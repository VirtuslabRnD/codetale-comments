[
  {
    "id" : "03fde84a-60dc-4509-bb8b-f63d1b571c9e",
    "prId" : 536,
    "prUrl" : "https://github.com/zio/zio/pull/536#pullrequestreview-196750921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27cebc40-fa10-4116-971a-a9d5e865cc9b",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Shouldn't you rather use `.onInterrupt(IO.flatten(finalizer.get))`?",
        "createdAt" : "2019-01-25T09:44:07Z",
        "updatedAt" : "2019-01-25T09:44:08Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "0b0a00e3-f1db-43c5-a4e5-0b279528fd22",
        "parentId" : "27cebc40-fa10-4116-971a-a9d5e865cc9b",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "It's the same effect either way, because the thread will be `None` in case it's not interrupted, but `ensuring` will be faster than `onInterrupt`.",
        "createdAt" : "2019-01-25T23:24:48Z",
        "updatedAt" : "2019-01-25T23:24:49Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "989838843637bd6f186beff2d92644b8afd80b61",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +1066,1070 @@              either <- fiber.join\n              a      <- either.fold[IO[Nothing, A]](IO.die, IO.succeed)\n            } yield a).ensuring(IO.flatten(finalizer.get))\n      } yield a\n    })"
  },
  {
    "id" : "c6ab4364-a2f1-4168-b599-a9a75a0375ac",
    "prId" : 536,
    "prUrl" : "https://github.com/zio/zio/pull/536#pullrequestreview-196782857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adcf1328-378c-4487-8cc2-2851aefd56be",
        "parentId" : null,
        "authorId" : "11ae19de-4c9c-4e15-829f-991fa5548274",
        "body" : "why guard atomic ref with the lock? isn't `thread.getAndSet` enough?",
        "createdAt" : "2019-01-26T03:28:18Z",
        "updatedAt" : "2019-01-26T03:28:18Z",
        "lastEditedBy" : "11ae19de-4c9c-4e15-829f-991fa5548274",
        "tags" : [
        ]
      },
      {
        "id" : "7d41a976-84a1-4ba5-a02d-38a5846fe53d",
        "parentId" : "adcf1328-378c-4487-8cc2-2851aefd56be",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "No, the thread will, after finishing this work, start working on some other fiber's work, and you don't want to accidentally kill it, so you need to make sure the thread stays working on the target fiber (rather than finishing and switching to another fiber) before you call Thread.interrupt. Or else you interrupt the wrong fiber.",
        "createdAt" : "2019-01-26T09:46:02Z",
        "updatedAt" : "2019-01-26T09:46:02Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "989838843637bd6f186beff2d92644b8afd80b61",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1054,1058 @@        a <- (for {\n              fiber <- (IO.unyielding(IO.sync[Either[Throwable, A]] {\n                        withLock(thread.set(Some(Thread.currentThread())))\n\n                        try Right(effect)"
  },
  {
    "id" : "052513c6-5c52-48ee-80cc-b271880eb3bf",
    "prId" : 469,
    "prUrl" : "https://github.com/zio/zio/pull/469#pullrequestreview-186297881",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1331569b-db6b-4e8e-8a3a-0211d34dfff2",
        "parentId" : null,
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "Is this even a good idea to introduce aliases to immediately deprecate them?",
        "createdAt" : "2018-12-18T21:26:39Z",
        "updatedAt" : "2019-01-09T13:58:26Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      },
      {
        "id" : "8f97ca57-ecf8-45f2-9c4f-2a51bf6f608e",
        "parentId" : "1331569b-db6b-4e8e-8a3a-0211d34dfff2",
        "authorId" : "56df1b23-bbcc-41fe-bb95-36e07b5ff1e8",
        "body" : "that's very intentional\r\npeople might be looking for methods with these names because they're familiar with them and they will find them both in Doc or in IDE autocompletion\r\nbut there should be one way of doing things -- that's why they're deprecated -- because there exists another, canonical, method with a name that better captures the meaning in context of ZIO",
        "createdAt" : "2018-12-18T21:47:58Z",
        "updatedAt" : "2019-01-09T13:58:26Z",
        "lastEditedBy" : "56df1b23-bbcc-41fe-bb95-36e07b5ff1e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b13d950861eb4a09791e16a8ff6d56b0516540b5",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +284,288 @@   * Alias for redeem\n   */\n  @deprecated(\"Use redeem\", \"scalaz-zio 0.6.0\")\n  final def foldM[E2, B](err: E => IO[E2, B], succ: A => IO[E2, B]): IO[E2, B] =\n    redeem(err, succ)"
  },
  {
    "id" : "2d7e3d2f-6a58-4c98-a210-af8b00061ae1",
    "prId" : 469,
    "prUrl" : "https://github.com/zio/zio/pull/469#pullrequestreview-186288497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "103e78eb-2d71-4639-89ef-122164d73c1d",
        "parentId" : null,
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "Much clearer now 👍 ",
        "createdAt" : "2018-12-18T21:27:14Z",
        "updatedAt" : "2019-01-09T13:58:26Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      }
    ],
    "commit" : "b13d950861eb4a09791e16a8ff6d56b0516540b5",
    "line" : 333,
    "diffHunk" : "@@ -1,1 +524,528 @@   * results into a tuple.\n   */\n  final def zip[E1 >: E, B](that: IO[E1, B]): IO[E1, (A, B)] =\n    self.zipWith(that)((a, b) => (a, b))\n"
  },
  {
    "id" : "b01020f8-7358-4a1b-a960-7d5856956e9e",
    "prId" : 469,
    "prUrl" : "https://github.com/zio/zio/pull/469#pullrequestreview-186321333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5be64ce9-b3ff-4bfd-a026-7bdf95895f40",
        "parentId" : null,
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "deprecated warning is a pretty big punish for 'FP-sounding' names... Can't say I like this, just means I have to import cats syntax more often for FP names.",
        "createdAt" : "2018-12-18T21:32:13Z",
        "updatedAt" : "2019-01-09T13:58:26Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      },
      {
        "id" : "29cee569-0fb8-48d7-ae19-a787e8b26294",
        "parentId" : "5be64ce9-b3ff-4bfd-a026-7bdf95895f40",
        "authorId" : "56df1b23-bbcc-41fe-bb95-36e07b5ff1e8",
        "body" : "`foreach` is the most descriptive name for what kind of `IO` this produces, so if you're writing \"directly against an `IO`\", use that\r\nof course, if you're writing \"against a typeclass\" (is it *Applicative functor* in this case?), use `traverse` not  `foreach` (it's not even available, after all)\r\n",
        "createdAt" : "2018-12-18T21:58:04Z",
        "updatedAt" : "2019-01-09T13:58:26Z",
        "lastEditedBy" : "56df1b23-bbcc-41fe-bb95-36e07b5ff1e8",
        "tags" : [
        ]
      },
      {
        "id" : "16ca7f4c-a069-4c27-9b56-36239e627037",
        "parentId" : "5be64ce9-b3ff-4bfd-a026-7bdf95895f40",
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "Makes sense I guess",
        "createdAt" : "2018-12-18T22:12:43Z",
        "updatedAt" : "2019-01-09T13:58:26Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      },
      {
        "id" : "a19531ea-a983-408d-ac27-afa4481400f5",
        "parentId" : "5be64ce9-b3ff-4bfd-a026-7bdf95895f40",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I don't mind keeping them around forever, personally. Although I do think if you're using Cats or Scalaz, it's easy to call `io.sequence`, you get that from the syntax.",
        "createdAt" : "2018-12-18T22:38:05Z",
        "updatedAt" : "2019-01-09T13:58:26Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "b52a9dde-4968-4cd7-83cb-86a3dbef8bf3",
        "parentId" : "5be64ce9-b3ff-4bfd-a026-7bdf95895f40",
        "authorId" : "56df1b23-bbcc-41fe-bb95-36e07b5ff1e8",
        "body" : "yeah, the intention is to keeps these aliases around -- people discovering them easily is their whole point! :slightly_smiling_face: ",
        "createdAt" : "2018-12-18T22:55:22Z",
        "updatedAt" : "2019-01-09T13:58:26Z",
        "lastEditedBy" : "56df1b23-bbcc-41fe-bb95-36e07b5ff1e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b13d950861eb4a09791e16a8ff6d56b0516540b5",
    "line" : 647,
    "diffHunk" : "@@ -1,1 +1328,1332 @@   * Alias for foreach\n   */\n  @deprecated(\"Use foreach\", \"scalaz-zio 0.6.0\")\n  final def traverse[E, A, B](in: Iterable[A])(fn: A => IO[E, B]): IO[E, List[B]] =\n    foreach(in)(fn)"
  },
  {
    "id" : "bdb6300c-943f-4711-af2d-e21993038083",
    "prId" : 462,
    "prUrl" : "https://github.com/zio/zio/pull/462#pullrequestreview-185402905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dd6f625-df44-4167-a75e-f6a6824b4e02",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "That will be wicked fast. 😆 \r\n\r\nCan you add a test to show this works? i.e. that if you do `io.run.flatMap(_ => promise.complete(42))` the promise is actually completed?",
        "createdAt" : "2018-12-16T20:41:48Z",
        "updatedAt" : "2018-12-27T21:40:46Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "78638151825a530949dd853a00c618bb3810159f",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +687,691 @@      cause => IO.now(ExitResult.failed(cause)),\n      succ => IO.now(ExitResult.succeeded(succ))\n    )\n\n  /**"
  },
  {
    "id" : "58c842cc-7a08-4639-bd46-1cfef04586da",
    "prId" : 462,
    "prUrl" : "https://github.com/zio/zio/pull/462#pullrequestreview-186573472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "daf8d513-3d9a-4b78-89df-dd7df82a26c6",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Nice to see a `Boolean` gone!",
        "createdAt" : "2018-12-19T14:36:34Z",
        "updatedAt" : "2018-12-27T21:40:46Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "78638151825a530949dd853a00c618bb3810159f",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +822,826 @@    val value: IO[E, A],\n    val err: Cause[E] => IO[E2, B],\n    val succ: A => IO[E2, B]\n  ) extends IO[E2, B]\n      with Function[A, IO[E2, B]] {"
  },
  {
    "id" : "6586e9b0-c0db-4b02-a298-cb87a43aaba7",
    "prId" : 452,
    "prUrl" : "https://github.com/zio/zio/pull/452#pullrequestreview-185368860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fe53eeb-07ca-458c-a7db-aa04568dbc8e",
        "parentId" : null,
        "authorId" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "body" : "What is the behavior when a `Right` is returned from `register`, particularly when `k` is invoked before `register` returns? Does it start two distinct run loops, one from the continuation, and another from the `Right`?",
        "createdAt" : "2018-12-13T22:05:59Z",
        "updatedAt" : "2018-12-16T00:00:49Z",
        "lastEditedBy" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "tags" : [
        ]
      },
      {
        "id" : "906c273e-e0ee-40fc-8ee3-38a3ade03ca5",
        "parentId" : "0fe53eeb-07ca-458c-a7db-aa04568dbc8e",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "No, there's just one run loop. The old one continues with the continuation.",
        "createdAt" : "2018-12-13T22:51:07Z",
        "updatedAt" : "2018-12-16T00:00:49Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "28b3ec9e-29df-479a-85f0-342d690ae069",
        "parentId" : "0fe53eeb-07ca-458c-a7db-aa04568dbc8e",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "I wonder if `Async.Later` could be changed into a case class that accepts a cancel action.",
        "createdAt" : "2018-12-14T07:34:19Z",
        "updatedAt" : "2018-12-16T00:00:49Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "704ce1ec-0456-434d-a990-eb6a0b520234",
        "parentId" : "0fe53eeb-07ca-458c-a7db-aa04568dbc8e",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Oh, I see _removing_ the canceler allowed you to clean up a lot of code actually 😁",
        "createdAt" : "2018-12-14T07:44:56Z",
        "updatedAt" : "2018-12-16T00:00:49Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "ccdd2db0-b7bc-4ab9-8c28-a7c94b925ff6",
        "parentId" : "0fe53eeb-07ca-458c-a7db-aa04568dbc8e",
        "authorId" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "body" : "Ah, I think I get it now. If the operation is asynchronous (i.e. `k` is invoked), then you can specify a `Canceler`. If the operation is synchronous (i.e. `k` isn't invoked), just return the `IO`. The doc didn't quite make sense the first couple times around.",
        "createdAt" : "2018-12-15T22:18:15Z",
        "updatedAt" : "2018-12-16T00:00:49Z",
        "lastEditedBy" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "tags" : [
        ]
      }
    ],
    "commit" : "3eb71c8c2a3962595c473e2f4e5c4bae6f60c82e",
    "line" : 193,
    "diffHunk" : "@@ -1,1 +1120,1124 @@   * asynchronous effect if the fiber executing the effect is interrupted.\n   */\n  final def asyncInterrupt[E, A](register: (IO[E, A] => Unit) => Either[Canceler, IO[E, A]]): IO[E, A] = {\n    import java.util.concurrent.atomic.AtomicBoolean\n    import internal.OneShot"
  },
  {
    "id" : "ac8ee023-8ac3-487a-bd34-047fdc11afd2",
    "prId" : 452,
    "prUrl" : "https://github.com/zio/zio/pull/452#pullrequestreview-185356097",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35e8eaa7-58e7-465d-bbda-1be3f90a39ec",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "😍 now `delay` will be a piece of 🍰 ",
        "createdAt" : "2018-12-15T07:46:43Z",
        "updatedAt" : "2018-12-16T00:00:49Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "c36edf31-0b5a-4fc3-a222-c727fa25ba0e",
        "parentId" : "35e8eaa7-58e7-465d-bbda-1be3f90a39ec",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Exactly, you can feed the callback the `IO` to `Schedule` via the new `async`. 😄 ",
        "createdAt" : "2018-12-15T14:14:46Z",
        "updatedAt" : "2018-12-16T00:00:49Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "3eb71c8c2a3962595c473e2f4e5c4bae6f60c82e",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +898,902 @@   * Sleeps for the specified duration. This is always asynchronous.\n   */\n  final def sleep(duration: Duration): IO[Nothing, Unit] =\n    IO.sync0(identity)\n      .flatMap("
  },
  {
    "id" : "355a3f91-f03a-4ed7-86d5-e6a51276e49b",
    "prId" : 452,
    "prUrl" : "https://github.com/zio/zio/pull/452#pullrequestreview-185356315",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "785d9e77-ac5c-40a2-96a7-a8b77d85aaed",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Is it safe here, instead of in the `finally` clause?",
        "createdAt" : "2018-12-15T08:04:13Z",
        "updatedAt" : "2018-12-16T00:00:49Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "0c1f3265-c90a-4495-b77f-a9c6d62a0c63",
        "parentId" : "785d9e77-ac5c-40a2-96a7-a8b77d85aaed",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Yes, it's safe. The interrupt can happen _before_ the `async0` begins; in which case, calling `cancel.get` will block forever. However, if `async0` _begins_ execution (as detected / exposed by the `started` boolean reference), then the fiber enters the `Suspended` state, which means that it can be interrupted before `async0`; in which case we want the interruption process to block on `cancel.get` so we have a guarantee of invoking the cancellation action as soon as it's set (and it won't be set until `asyncy0` returns the canceler).",
        "createdAt" : "2018-12-15T14:23:38Z",
        "updatedAt" : "2018-12-16T00:00:49Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "3eb71c8c2a3962595c473e2f4e5c4bae6f60c82e",
    "line" : 201,
    "diffHunk" : "@@ -1,1 +1128,1132 @@        IO.flatten {\n          async0[Nothing, IO[E, A]]((k: IO[Nothing, IO[E, A]] => Unit) => {\n            started.set(true)\n\n            try register(io => k(IO.now(io))) match {"
  },
  {
    "id" : "a023fbdb-2bfb-4e8e-8764-e33dd71dc298",
    "prId" : 414,
    "prUrl" : "https://github.com/zio/zio/pull/414#pullrequestreview-180800844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a919aa1c-c353-4cb2-8c3d-db8000b09949",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "With all these changes, you can look for expressions like `io.void` and probably simplify to `io` most of the time (perhaps changing a `*>` into `<*` too)",
        "createdAt" : "2018-12-03T13:59:20Z",
        "updatedAt" : "2018-12-03T16:26:45Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "2ee59f81-23f1-416d-97fd-f8b24635559a",
        "parentId" : "a919aa1c-c353-4cb2-8c3d-db8000b09949",
        "authorId" : "6080cd8f-e671-4d49-a54c-b6159456ac0e",
        "body" : "Good point, will take care of that.",
        "createdAt" : "2018-12-03T14:48:19Z",
        "updatedAt" : "2018-12-03T16:26:45Z",
        "lastEditedBy" : "6080cd8f-e671-4d49-a54c-b6159456ac0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a853ae39bb9d7fc7a135d9e8c187eb4768424b8",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +340,344 @@   * before the finalizer is added.\n   */\n  final def ensuring(finalizer: IO[Nothing, _]): IO[E, A] =\n    new IO.Ensuring(self, finalizer)\n"
  },
  {
    "id" : "eb10aa19-f677-4b56-a990-35ad505b89c8",
    "prId" : 386,
    "prUrl" : "https://github.com/zio/zio/pull/386#pullrequestreview-178780411",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "598ece72-a593-436a-a081-c51f10ff8824",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This is really wonderful to see! With some work I think we can merge `SyncEffect` and `AsyncEffect`, push the `Supervisor` into `Descriptor`, and possibly delete `Suspend` (it's redundant). It's headed in the right direction!",
        "createdAt" : "2018-11-27T13:32:25Z",
        "updatedAt" : "2018-11-27T16:45:56Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "daed5983c002952435f31704e8cf03ec7bc1d731",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +735,739 @@    final val Fail            = 4\n    final val AsyncEffect     = 5\n    final val Redeem          = 6\n    final val Fork            = 7\n    final val Uninterruptible = 8"
  },
  {
    "id" : "344e07b7-834b-43b0-a3a5-f351ba84f357",
    "prId" : 386,
    "prUrl" : "https://github.com/zio/zio/pull/386#pullrequestreview-178942887",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b31a153-46f6-4df1-a770-82932a3c94c0",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Just read that ☝️ 🤣 ",
        "createdAt" : "2018-11-27T18:34:26Z",
        "updatedAt" : "2018-11-27T18:34:26Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "daed5983c002952435f31704e8cf03ec7bc1d731",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +866,870 @@   * Do not use this method to effectfully construct `IO` values. The results\n   * will be undefined and most likely involve the physical explosion of your\n   * computer in a heap of rubble.\n   */\n  final def suspend[E, A](io: => IO[E, A]): IO[E, A] ="
  },
  {
    "id" : "f3fd367f-696c-449d-8068-b4539604567b",
    "prId" : 342,
    "prUrl" : "https://github.com/zio/zio/pull/342#pullrequestreview-172989843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fff18fa-e654-4535-8d8e-5c7b2e19bf49",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "😍 ",
        "createdAt" : "2018-11-08T15:28:24Z",
        "updatedAt" : "2018-11-09T01:44:35Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a03e319bc75fd45669400738c0a1117e86bb1a5",
    "line" : 166,
    "diffHunk" : "@@ -1,1 +726,730 @@    final val Supervisor      = 13\n    final val Ensuring        = 14\n    final val Descriptor      = 15\n  }\n  final class FlatMap[E, A0, A] private[IO] (val io: IO[E, A0], val flatMapper: A0 => IO[E, A]) extends IO[E, A] {"
  },
  {
    "id" : "2c9db40c-5853-495e-9c1e-198a0c21d24f",
    "prId" : 332,
    "prUrl" : "https://github.com/zio/zio/pull/332#pullrequestreview-172707935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "420c7e3b-197a-4ab7-a56d-d0ecc23c957a",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "In addition to `repeatOrElse0`, there are two other methods that delegate to this one: `repeatOrElse`, and `repeat`. Both of these methods should take a `Clock` which defaults to `Clock.Live`.",
        "createdAt" : "2018-11-01T08:40:17Z",
        "updatedAt" : "2018-11-07T21:12:58Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "05a8b631-d188-469c-bba1-e9841bd63d38",
        "parentId" : "420c7e3b-197a-4ab7-a56d-d0ecc23c957a",
        "authorId" : "9defc685-1ba4-475d-b27f-4726d7eeee84",
        "body" : "These are now solved by [this commit](https://github.com/scalaz/scalaz-zio/pull/332/commits/5fa247a94df8893f299bc2a415484e90bf9ce81a)",
        "createdAt" : "2018-11-07T21:29:17Z",
        "updatedAt" : "2018-11-07T21:29:17Z",
        "lastEditedBy" : "9defc685-1ba4-475d-b27f-4726d7eeee84",
        "tags" : [
        ]
      }
    ],
    "commit" : "04979c839217008a48527178c516b894a87925e6",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +498,502 @@  final def repeatOrElse0[B, E2, C](\n    schedule: Schedule[A, B],\n    orElse: (E, Option[B]) => IO[E2, C],\n    clock: Clock = Clock.Live\n  ): IO[E2, Either[C, B]] = {"
  },
  {
    "id" : "b13d70e4-28eb-4568-82f1-3df2b8adff78",
    "prId" : 332,
    "prUrl" : "https://github.com/zio/zio/pull/332#pullrequestreview-172708072",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ae0b0c4-fe08-4984-a420-14c8116afd11",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "In addition to `retryOrElse0`, there are two other methods that delegate to this one: `retryOrElse`, and `retry`. Both of these methods should take a `Clock` which defaults to `Clock.Live`.",
        "createdAt" : "2018-11-01T08:40:56Z",
        "updatedAt" : "2018-11-07T21:12:58Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "5c1873b3-bc93-47a4-a6c0-7c538dd46bb5",
        "parentId" : "2ae0b0c4-fe08-4984-a420-14c8116afd11",
        "authorId" : "9defc685-1ba4-475d-b27f-4726d7eeee84",
        "body" : "These are now (also) solved by [this commit](https://github.com/scalaz/scalaz-zio/pull/332/commits/5fa247a94df8893f299bc2a415484e90bf9ce81a)",
        "createdAt" : "2018-11-07T21:29:42Z",
        "updatedAt" : "2018-11-07T21:29:42Z",
        "lastEditedBy" : "9defc685-1ba4-475d-b27f-4726d7eeee84",
        "tags" : [
        ]
      }
    ],
    "commit" : "04979c839217008a48527178c516b894a87925e6",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +539,543 @@  final def retryOrElse0[E1 >: E, S, E2, B](\n    policy: Schedule[E1, S],\n    orElse: (E1, S) => IO[E2, B],\n    clock: Clock = Clock.Live\n  ): IO[E2, Either[B, A]] = {"
  },
  {
    "id" : "7698607a-1e77-4517-b281-7a8853f9d412",
    "prId" : 328,
    "prUrl" : "https://github.com/zio/zio/pull/328#pullrequestreview-170986675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "676ce475-8d4c-490c-92c4-5032098c7dbe",
        "parentId" : null,
        "authorId" : "05793de5-8cbe-49ba-90b1-8ef51f2dd854",
        "body" : "private？",
        "createdAt" : "2018-11-02T00:46:05Z",
        "updatedAt" : "2018-11-02T10:29:58Z",
        "lastEditedBy" : "05793de5-8cbe-49ba-90b1-8ef51f2dd854",
        "tags" : [
        ]
      },
      {
        "id" : "879a12e5-7d11-4804-aedc-8fd4ddc4072b",
        "parentId" : "676ce475-8d4c-490c-92c4-5032098c7dbe",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "This is kind of a pattern where the `-0` suffix identifies the more powerful version of a combinator: `fork0`, `bracket0`, `repeatOrElse0`, etc. The idea is all other combinators can be/are derived from it. Most users will be happy with the derived ones, but some may have particular needs only the `-0` version allows.",
        "createdAt" : "2018-11-02T06:56:44Z",
        "updatedAt" : "2018-11-02T10:29:58Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "87ca5dba85afc9529092d20857a78e9377e870c1",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +539,543 @@   * }}}\n   */\n  final def timeout0[Z](z: Z)(f: A => Z)(duration: Duration): IO[E, Z] =\n    self\n      .map(f)"
  },
  {
    "id" : "1b576999-15b8-4a7c-ab13-582862a06fc8",
    "prId" : 326,
    "prUrl" : "https://github.com/zio/zio/pull/326#pullrequestreview-171370734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6bdd8ac4-c8d1-451d-8b0f-b78d6f027a5c",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I don't think `supervised` works if the fiber is interrupted. We should probably fix that. If you fix that, this will be equivalent to the old way which used `ensuring` to make sure that if the parent is killed, the racing fibers are killed as well. \r\n\r\nAlso in this method you can kind of see why we wanted `observe` (well, the old version, `onComplete`) to take a call back: because we turn right around and fork it because we just want to do something when observation happens. (But nonetheless, probably better to express it this way, it's more orthogonal, and we can always optimize RTS for this pattern.)",
        "createdAt" : "2018-10-31T21:31:47Z",
        "updatedAt" : "2018-11-04T11:57:53Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "94dd19b6-54c8-496a-ab7a-d05814fdc8ad",
        "parentId" : "6bdd8ac4-c8d1-451d-8b0f-b78d6f027a5c",
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "I'm fairly sure .supervised works on interruption, at least that's pretty much the only case I'm using it for.",
        "createdAt" : "2018-10-31T22:36:19Z",
        "updatedAt" : "2018-11-04T11:57:53Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      },
      {
        "id" : "0319b4bd-da71-49d9-a99e-d9715281dd27",
        "parentId" : "6bdd8ac4-c8d1-451d-8b0f-b78d6f027a5c",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Yeah I think it works, see:\r\n\r\nhttps://github.com/scalaz/scalaz-zio/blob/989ca743611c82357efcdaa3ff9249d64a01eec7/core/jvm/src/main/scala/scalaz/zio/RTS.scala#L542-L546\r\n\r\nThe supervisor is run as a finalizer.",
        "createdAt" : "2018-11-01T07:02:15Z",
        "updatedAt" : "2018-11-04T11:57:53Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "059dcb34-b3f0-43b4-be38-546eda1a8a90",
        "parentId" : "6bdd8ac4-c8d1-451d-8b0f-b78d6f027a5c",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This is good. We should probably add a test to preserve this behavior since it seems the correct (and only useful) semantics for supervision.",
        "createdAt" : "2018-11-01T08:28:20Z",
        "updatedAt" : "2018-11-04T11:57:53Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "6e26b606-a4d7-4d8a-a23d-cfb126601cbe",
        "parentId" : "6bdd8ac4-c8d1-451d-8b0f-b78d6f027a5c",
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "Seems like it would be impossible to implement [`Concurrent.racePair`](https://github.com/typelevel/cats-effect/blob/master/core/shared/src/main/scala/cats/effect/Concurrent.scala#L217) on top of `raceWith` if it's supervised, the loser fiber has to stay alive some more after it exits",
        "createdAt" : "2018-11-04T17:08:03Z",
        "updatedAt" : "2018-11-04T17:08:03Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      }
    ],
    "commit" : "205be4456e7a127fc08b9b98e45a12de2cf812ee",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +202,206 @@      _     <- right.observe.flatMap(arbiter(rightWins, right, left, race, done)).fork\n      c     <- done.get\n    } yield c).supervised\n  }\n"
  },
  {
    "id" : "4766bc2d-b964-42d3-9dce-8081a7377ea8",
    "prId" : 326,
    "prUrl" : "https://github.com/zio/zio/pull/326#pullrequestreview-170690741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "143be352-853a-4a7f-bf6e-e97f18b9f41f",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Nice to see these shrink! Also if you look at the PR, it's net negative! 🎉 🕺 ",
        "createdAt" : "2018-10-31T21:37:54Z",
        "updatedAt" : "2018-11-04T11:57:53Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "e13cccfe-90d4-4eec-9d40-7b953547f59b",
        "parentId" : "143be352-853a-4a7f-bf6e-e97f18b9f41f",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "It says a lot about the expressiveness of ZIO 😍 ",
        "createdAt" : "2018-11-01T13:48:23Z",
        "updatedAt" : "2018-11-04T11:57:53Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "205be4456e7a127fc08b9b98e45a12de2cf812ee",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +718,722 @@    final val Terminate       = 13\n    final val Supervisor      = 14\n    final val Ensuring        = 15\n  }\n  final class FlatMap[E, A0, A] private[IO] (val io: IO[E, A0], val flatMapper: A0 => IO[E, A]) extends IO[E, A] {"
  },
  {
    "id" : "44677fb8-30db-43dd-ad70-1351f1d5b7dd",
    "prId" : 326,
    "prUrl" : "https://github.com/zio/zio/pull/326#pullrequestreview-170673994",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9956b15d-aa04-48cb-a5cd-0b11bfec0ea0",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "You could (should?) add syntax for these in the syntax module.",
        "createdAt" : "2018-10-31T21:38:54Z",
        "updatedAt" : "2018-11-04T11:57:53Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "62332887-f2cd-4f46-b46a-2b9128d0abfa",
        "parentId" : "9956b15d-aa04-48cb-a5cd-0b11bfec0ea0",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Like this?\r\n```\r\nio.when(pred)\r\n```\r\nThen I may just add `io.when` directly. Somehow the opposite (`pred.when(io)`) feels weird.",
        "createdAt" : "2018-11-01T12:59:00Z",
        "updatedAt" : "2018-11-04T11:57:53Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "eed0a49b-b1e2-4472-8d79-6dd16a4947d6",
        "parentId" : "9956b15d-aa04-48cb-a5cd-0b11bfec0ea0",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "ha no, only on `IO[E, Unit]`",
        "createdAt" : "2018-11-01T13:01:11Z",
        "updatedAt" : "2018-11-04T11:57:53Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "205be4456e7a127fc08b9b98e45a12de2cf812ee",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +957,961 @@   * The moral equivalent of `if (p) exp` when `p` has side-effects\n   */\n  final def whenM[E](b: IO[Nothing, Boolean])(io: IO[E, Unit]): IO[E, Unit] =\n    b.flatMap(b => if (b) io else IO.unit)\n"
  },
  {
    "id" : "e4f1233b-396e-460f-a762-e25c0f055be8",
    "prId" : 326,
    "prUrl" : "https://github.com/zio/zio/pull/326#pullrequestreview-171327185",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd4d1ff9-e1d3-4841-abcc-360643dcbe0f",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This makes me want to add:\r\n\r\n```scala\r\ntrait IO[+E, +A] {\r\n  final def to(p: Promise[E, A]): IO[Nothing, Unit] = \r\n    self.run.flatMap(p.done(_)).void\r\n}\r\n```\r\n\r\nAnd of course it makes me want to optimize `run`. 😄 \r\n\r\nThis looks great to me! It's very tricky to get this perfectly right.",
        "createdAt" : "2018-11-03T13:13:55Z",
        "updatedAt" : "2018-11-04T11:57:53Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "205be4456e7a127fc08b9b98e45a12de2cf812ee",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +192,196 @@      race\n        .modify(r => r.won(res.succeeded) -> r.next(res.succeeded))\n        .flatMap(IO.when(_)(f(winner, loser).run.flatMap(done.done(_)).void))\n\n    (for {"
  },
  {
    "id" : "94aff299-4699-4184-abec-a51d1a3892bd",
    "prId" : 326,
    "prUrl" : "https://github.com/zio/zio/pull/326#pullrequestreview-171327250",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a12835e0-6792-4284-8447-692e6ef5e286",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Looks good to me!",
        "createdAt" : "2018-11-03T13:16:24Z",
        "updatedAt" : "2018-11-04T11:57:53Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "205be4456e7a127fc08b9b98e45a12de2cf812ee",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +141,145 @@  final def parWith[E1 >: E, B, C](that: IO[E1, B])(f: (A, B) => C): IO[E1, C] = {\n    def coordinate[A, B](f: (A, B) => C)(winner: Fiber[E1, A], loser: Fiber[E1, B]): IO[E1, C] =\n      winner.observe.flatMap {\n        case ExitResult.Completed(_)   => winner.zipWith(loser)(f).join\n        case ExitResult.Failed(e, ts)  => loser.interrupt *> IO.fail0(e, ts)"
  },
  {
    "id" : "6a34986a-eea3-4213-9a4f-bcec509fcf8b",
    "prId" : 307,
    "prUrl" : "https://github.com/zio/zio/pull/307#pullrequestreview-171361170",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42fac520-b49a-4161-ae20-6cc137655081",
        "parentId" : null,
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "This will unnecessarily fork into scheduled pool. Why not \r\n```scala\r\nIO.async { cb: Callback[Nothing, Unit] => cb(ExitResult.Completed(()) }\r\n```\r\n?",
        "createdAt" : "2018-10-20T21:33:55Z",
        "updatedAt" : "2018-11-05T01:35:31Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      },
      {
        "id" : "fde4855b-cdeb-4620-b0c1-8840e864a97a",
        "parentId" : "42fac520-b49a-4161-ae20-6cc137655081",
        "authorId" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "body" : "The JVM `RTS` checks for zero duration sleeps and will submit to the regular pool instead: https://github.com/scalaz/scalaz-zio/blob/master/core/jvm/src/main/scala/scalaz/zio/RTS.scala#L88 . \r\n\r\nI'm not sure what this means for JS.",
        "createdAt" : "2018-10-20T21:54:18Z",
        "updatedAt" : "2018-11-05T01:35:31Z",
        "lastEditedBy" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "tags" : [
        ]
      },
      {
        "id" : "0bb8efea-0e30-43a8-810d-158580d53468",
        "parentId" : "42fac520-b49a-4161-ae20-6cc137655081",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "In Javascript, it _should_ mean `setImmediate` ",
        "createdAt" : "2018-11-04T12:46:26Z",
        "updatedAt" : "2018-11-05T01:35:31Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab7a3ef7d7eac1708d82e625effff47b3c46304d",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +994,998 @@   */\n  final def shift: IO[Nothing, Unit] =\n    IO.sleep(0.seconds)\n\n  /**"
  },
  {
    "id" : "0f3edbe9-e768-4f8e-9c1b-1aa658da2b5a",
    "prId" : 307,
    "prUrl" : "https://github.com/zio/zio/pull/307#pullrequestreview-166786350",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c57e3eb-27dc-416b-8075-d41ebed6d1a9",
        "parentId" : null,
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "It might make sense to also add `forkOn`\r\n\r\n```scala\r\nfinal def forkOn(ec: ExecutionContext): IO[Nothing, Fiber[E, A]] =\r\n  on(ec).fork\r\n```",
        "createdAt" : "2018-10-20T21:37:10Z",
        "updatedAt" : "2018-11-05T01:35:31Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      },
      {
        "id" : "43670ae8-5dc4-4175-91a9-12a776b6defa",
        "parentId" : "0c57e3eb-27dc-416b-8075-d41ebed6d1a9",
        "authorId" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "body" : "I like this one. The implementation perhaps feels a bit weird because it might not be necessary to shift back to the default pool just to product the result.\r\n\r\nAlso, what do we want the order of operations to be? Shift, fork, then shift back? Or fork, shift, and shift back?",
        "createdAt" : "2018-10-20T22:16:02Z",
        "updatedAt" : "2018-11-05T01:35:31Z",
        "lastEditedBy" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "tags" : [
        ]
      },
      {
        "id" : "fc84af59-aa89-4a92-afae-d073ca36565f",
        "parentId" : "0c57e3eb-27dc-416b-8075-d41ebed6d1a9",
        "authorId" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "body" : "Now that I think about it, shift and then fork doesn't make any sense because fork submits the task on the RTS pool.\r\n\r\nUsers of this function would need to be aware that inserting an `IO.shift` would shift execution to the RTS pool.",
        "createdAt" : "2018-10-21T03:17:04Z",
        "updatedAt" : "2018-11-05T01:35:31Z",
        "lastEditedBy" : "1a6431ea-d176-4aa9-b17c-bd9fdcc9423a",
        "tags" : [
        ]
      },
      {
        "id" : "4823c8a5-eb64-492c-b7c7-ee7c3b9d40ec",
        "parentId" : "0c57e3eb-27dc-416b-8075-d41ebed6d1a9",
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "> Users of this function would need to be aware that inserting an IO.shift would shift execution to the RTS pool.\r\n\r\nYes, but we might want to change that in the future, I.e. make fiber remember its execution context to have better compatibility with `cats-effect` and libraries that want the user to supply an explicit ec - currently at least fs2, http4s, doobie.",
        "createdAt" : "2018-10-21T13:54:16Z",
        "updatedAt" : "2018-11-05T01:35:31Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      },
      {
        "id" : "968297d9-1dcf-423c-a38d-f5bef65d4bfd",
        "parentId" : "0c57e3eb-27dc-416b-8075-d41ebed6d1a9",
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "> The implementation perhaps feels a bit weird because it might not be necessary to shift back to the default pool just to product the result.\r\n\r\nAh, yes, that's redundant. It should probably be just:\r\n\r\n```scala\r\n(IO.shift(ec) *> self).fork\r\n```",
        "createdAt" : "2018-10-21T13:58:30Z",
        "updatedAt" : "2018-11-05T01:35:31Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab7a3ef7d7eac1708d82e625effff47b3c46304d",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +339,343 @@   * to the default one.\n   */\n  final def on(ec: ExecutionContext): IO[E, A] =\n    IO.shift(ec).bracket_(IO.shift)(self)\n"
  },
  {
    "id" : "a02a27f0-93b5-4bc6-ad9c-b245f5375fec",
    "prId" : 307,
    "prUrl" : "https://github.com/zio/zio/pull/307#pullrequestreview-171361329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47be524c-3736-4337-9fe6-76687dd505d9",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I'm not sure this comment makes sense—because it's really only forking the `IO` _on_ the specified execution context. The main fiber which called `fork` never shifts off, so never needs to \"shift back\".",
        "createdAt" : "2018-11-04T12:52:03Z",
        "updatedAt" : "2018-11-05T01:35:31Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab7a3ef7d7eac1708d82e625effff47b3c46304d",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +345,349 @@   * Forks an action that will be executed on the specified `ExecutionContext`.\n   */\n  final def forkOn(ec: ExecutionContext): IO[E, Fiber[E, A]] =\n    (IO.shift(ec) *> self).fork\n"
  },
  {
    "id" : "17364442-4896-471e-81d0-fda09625b3fd",
    "prId" : 307,
    "prUrl" : "https://github.com/zio/zio/pull/307#pullrequestreview-171515252",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27727929-9ce2-44e7-9415-4bd890d925eb",
        "parentId" : null,
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "It works, but in event of failure, it only does so as a side-effect of .observe in `catchError`, when async is not completed by the time observe runs it will spawn a new task on RTS ec. But if it is completed, the fiber will resume on the same thread. So this will also shift back to the RTS even though there are no explicit async boundaries, because finaliser took long enough for RTS to spawn a new task:\r\n\r\n```scala\r\nval ec = ExecutionContext.fromExecutorService(Executors.newCachedThreadPool())\r\n\r\ndef printThread: IO[Nothing, Unit] =\r\n  IO.sync(println(Thread.currentThread()))\r\n\r\nnew scalaz.zio.RTS {}.unsafeRun {\r\n  for {\r\n    _ <- printThread\r\n    _ <- IO.shift(ec)\r\n    _ <- printThread\r\n    _ <- IO.unit.bracket_(IO.sync(Thread.sleep(1000)))(IO.fail(())).catchAll(_ => IO.unit)\r\n    _ <- printThread\r\n  } yield ()\r\n}\r\n```\r\n```\r\nThread[main,5,main]\r\nThread[pool-1-thread-1,5,main]\r\nThread[zio-2-1169146729,5,zio]\r\n```",
        "createdAt" : "2018-11-05T11:33:43Z",
        "updatedAt" : "2018-11-05T11:35:03Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab7a3ef7d7eac1708d82e625effff47b3c46304d",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +340,344 @@   */\n  final def on(ec: ExecutionContext): IO[E, A] =\n    IO.shift(ec).bracket_(IO.shift)(self)\n\n  /**"
  },
  {
    "id" : "37d5e005-1c66-400a-b8ce-d89fc626e78a",
    "prId" : 289,
    "prUrl" : "https://github.com/zio/zio/pull/289#pullrequestreview-164778102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7586e16c-a447-4525-a3a0-b754ba045260",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "[With Product](https://typelevel.org/blog/2018/05/09/product-with-serializable.html), here and elsewhere.",
        "createdAt" : "2018-10-09T13:55:13Z",
        "updatedAt" : "2018-10-20T03:42:43Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "7288180f-b1a6-468e-906c-503f641e7d68",
        "parentId" : "7586e16c-a447-4525-a3a0-b754ba045260",
        "authorId" : "72da57fb-a549-4ffe-806f-c498c78f3a6e",
        "body" : "We can make the IO extend Product but the materializations of IO are classes and not case classes hence we need to implement the abstract methods ```productArity``` etc,  of ```Product```, or make these case classes:\r\n\r\n```final class Suspend[E, A] private[IO] (val value: () => IO[E, A]) extends IO[E, A]```\r\n",
        "createdAt" : "2018-10-10T03:55:26Z",
        "updatedAt" : "2018-10-20T03:42:43Z",
        "lastEditedBy" : "72da57fb-a549-4ffe-806f-c498c78f3a6e",
        "tags" : [
        ]
      },
      {
        "id" : "6639c527-0d6a-4218-bcbc-e54a036f247c",
        "parentId" : "7586e16c-a447-4525-a3a0-b754ba045260",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "You are absolutely right, there's no need to extend `Product` for `IO`. For other types which are case classes, however, let's try to do that.",
        "createdAt" : "2018-10-15T16:00:55Z",
        "updatedAt" : "2018-10-20T03:42:43Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "7487846a5948218c37ad4b31a489cc25acc821f7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +43,47 @@ * `App`.\n */\nsealed abstract class IO[+E, +A] extends Serializable { self =>\n\n  /**"
  },
  {
    "id" : "70b60863-efdf-4157-8862-ecbedcfc8bd0",
    "prId" : 270,
    "prUrl" : "https://github.com/zio/zio/pull/270#pullrequestreview-159071956",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5a5b973-bb3c-4f56-ae77-891675a51a15",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Looks correct to me! (Of course I may have said that before. 😆)\r\n\r\nGetting information out of the `use` action while still preserving its interruptibility is amazingly difficult with only `ensuring` and `uninterruptible` as primitives. At least the more common version of bracket is going to be much faster (`IO.bracket`), and it looks correct to me, too (using the same strategy, but no need to fork).",
        "createdAt" : "2018-09-26T15:24:46Z",
        "updatedAt" : "2018-09-26T15:41:08Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "590e986a-21d3-4b6c-972d-c0bd3daddde8",
        "parentId" : "a5a5b973-bb3c-4f56-ae77-891675a51a15",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "> At least the more common version of bracket is going to be much faster\r\n\r\nI still don't have a good intuition of the performance impact of using one version vs another, I mean:\r\n\r\n- a fiber is just a few hundred bytes, forking must be super fast\r\n- joining has virtually no cost since it merely adds a callback to a list\r\n- `tryObserve` (should we call it `poll`? like `Promise.poll`) is super fast\r\n\r\nIf my reasoning is correct, that leaves interruption, which may block the thread indeed.",
        "createdAt" : "2018-09-26T15:52:56Z",
        "updatedAt" : "2018-09-26T15:52:56Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fdb826a004df345447d3da2953d5cc02932358a",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1023,1027 @@            case Some(r) => release(a, r)\n            case None    => f.interrupt\n          }\n      }))\n    }"
  },
  {
    "id" : "61cd909e-7875-4701-9e3f-d37dbed9c90c",
    "prId" : 262,
    "prUrl" : "https://github.com/zio/zio/pull/262#pullrequestreview-178054162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92ea34fd-7d52-4c35-8c2b-e575469939e7",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Good catch.",
        "createdAt" : "2018-11-24T15:39:25Z",
        "updatedAt" : "2018-11-24T22:42:11Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7b460bbbddc47b611b6a7a506294c7f6ddca476",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1137,1141 @@  final def parTraverse[E, A, B](as: Iterable[A])(fn: A => IO[E, B]): IO[E, List[B]] =\n    as.foldRight[IO[E, List[B]]](IO.sync(Nil)) { (a, io) =>\n      fn(a).parWith(io)((b, bs) => b :: bs)\n    }\n"
  },
  {
    "id" : "fa43ca4f-2288-42fb-bdf9-9add101baba0",
    "prId" : 260,
    "prUrl" : "https://github.com/zio/zio/pull/260#pullrequestreview-158067134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf14173b-8b2d-496b-a489-47fe5610c8cf",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Super nice.",
        "createdAt" : "2018-09-24T11:52:40Z",
        "updatedAt" : "2018-09-25T12:21:33Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "838bea108a7804e9f74a58d7f5a1d580cf9a6ea0",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +1021,1025 @@              r <- f.observe\n              _ <- m.set(Some((a, r)))\n            } yield r).uninterruptibly\n        b <- r.fold(IO.now(_), (e, _) => IO.fail(e), IO.terminate0(_))\n      } yield b).ensuring(m.get.flatMap(_.fold(unit) { case ((a, r)) => release(a, r) }))"
  },
  {
    "id" : "1677e27d-6566-43dd-a9a5-303e6ef2eb66",
    "prId" : 260,
    "prUrl" : "https://github.com/zio/zio/pull/260#pullrequestreview-158284659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0df80156-b507-42e2-a808-a10d66f11b95",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I think this is a safe default for now. We may have to later make it public.",
        "createdAt" : "2018-09-24T20:37:29Z",
        "updatedAt" : "2018-09-25T12:21:33Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "838bea108a7804e9f74a58d7f5a1d580cf9a6ea0",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +778,782 @@  final def fail[E](error: E): IO[E, Nothing] = fail0(error, Nil)\n\n  private[zio] final def fail0[E](error: E, defects: List[Throwable]): IO[E, Nothing] = new Fail(error, defects)\n\n  /**"
  },
  {
    "id" : "25ce14f7-3f68-4afb-858d-853fb451fbea",
    "prId" : 260,
    "prUrl" : "https://github.com/zio/zio/pull/260#pullrequestreview-158525085",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afea5178-8892-4e20-9ffc-b34f001d5cc5",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "I forgot that one, will fix now.",
        "createdAt" : "2018-09-25T12:55:10Z",
        "updatedAt" : "2018-09-25T12:55:10Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "838bea108a7804e9f74a58d7f5a1d580cf9a6ea0",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +1022,1026 @@              _ <- m.set(Some((a, r)))\n            } yield r).uninterruptibly\n        b <- r.fold(IO.now(_), (e, _) => IO.fail(e), IO.terminate0(_))\n      } yield b).ensuring(m.get.flatMap(_.fold(unit) { case ((a, r)) => release(a, r) }))\n    }"
  },
  {
    "id" : "c190661b-b7e4-426f-bbea-82fa03c02c17",
    "prId" : 234,
    "prUrl" : "https://github.com/zio/zio/pull/234#pullrequestreview-150946115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77704654-5acf-4d61-8aa5-1c43a49212fe",
        "parentId" : null,
        "authorId" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "body" : "@jdegoes I think in scalafmt there is a problem with parentheses, I suggest if you change it `{` the `e => ` will be at the same line as redeem",
        "createdAt" : "2018-08-30T11:17:27Z",
        "updatedAt" : "2018-09-02T11:55:24Z",
        "lastEditedBy" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8966061991be66befc00e9c0d1717906b14ba32",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +440,444 @@                                         orElse: (E, B) => IO[E1, C]): IO[E1, Either[C, B]] = {\n    def loop(last: Option[() => B], state: schedule.State): IO[E1, Either[C, B]] =\n      self.redeem(\n        e =>\n          last match {"
  },
  {
    "id" : "a503023f-a742-469d-a719-ee1e472f9a5d",
    "prId" : 165,
    "prUrl" : "https://github.com/zio/zio/pull/165#pullrequestreview-145204605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a014d7a6-88e6-4a76-9b7b-346b03cc6bfa",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Yay! This makes me so happy! 🎉 🕺 ",
        "createdAt" : "2018-08-10T11:36:22Z",
        "updatedAt" : "2018-08-15T05:59:26Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "329c3d67ce435b2fee72ff355116bb2cd9dc243e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +261,265 @@   */\n  final def bracket0[E1 >: E, B](\n    release: (A, ExitResult[E1, B]) => IO[Nothing, Unit]\n  )(use: A => IO[E1, B]): IO[E1, B] =\n    IO.bracket0[E1, A, B](this)(release)(use)"
  },
  {
    "id" : "b28396f7-96f7-4a36-b0b2-72582d543cae",
    "prId" : 165,
    "prUrl" : "https://github.com/zio/zio/pull/165#pullrequestreview-145204660",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fac0b900-354a-4c92-9833-326b2b04b421",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "🎉 🕺 ",
        "createdAt" : "2018-08-10T11:36:38Z",
        "updatedAt" : "2018-08-15T05:59:26Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "329c3d67ce435b2fee72ff355116bb2cd9dc243e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +284,288 @@  final def bracketOnError[E1 >: E, B](release: A => IO[Nothing, Unit])(use: A => IO[E1, B]): IO[E1, B] =\n    IO.bracket0[E1, A, B](this)(\n      (a: A, eb: ExitResult[E1, B]) =>\n        eb match {\n          case ExitResult.Failed(_, _)  => release(a)"
  },
  {
    "id" : "6bc4a4bd-0336-441a-aec1-f2f1b0f2bd13",
    "prId" : 165,
    "prUrl" : "https://github.com/zio/zio/pull/165#pullrequestreview-145784747",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cec680f9-fd47-4c87-be18-747fd9c63aaa",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "It's nice to see this go away as a primitive. Also in this form, it becomes simple to supervise the `fork` so that if this IO is interrupted, then the child fiber will be interrupted. We can think about whether or not to do that.",
        "createdAt" : "2018-08-10T11:38:38Z",
        "updatedAt" : "2018-08-15T05:59:26Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "3d8003d8-7485-4507-b540-ae10996a1e6a",
        "parentId" : "cec680f9-fd47-4c87-be18-747fd9c63aaa",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I think interruptible by default makes sense. It's what ZIO chooses in many places. Because you can always get the other with `uninterruptibly`. \r\n\r\nSo let's go ahead and make it interruptible.",
        "createdAt" : "2018-08-13T20:13:45Z",
        "updatedAt" : "2018-08-15T05:59:26Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "329c3d67ce435b2fee72ff355116bb2cd9dc243e",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +524,528 @@   * Runs this action in a new fiber, resuming when the fiber terminates.\n   */\n  final def run: IO[Nothing, ExitResult[E, A]] =\n    (for {\n      p <- Promise.make[Nothing, ExitResult[E, A]]"
  },
  {
    "id" : "06e07d54-bb43-48db-bedb-22c48a62296a",
    "prId" : 147,
    "prUrl" : "https://github.com/zio/zio/pull/147#pullrequestreview-143812718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24db5dd8-b05f-4720-9f4e-ba6138f68586",
        "parentId" : null,
        "authorId" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "body" : "Hmm, I just realize about this, in a sequential traverse do we want to fold from the right? Wouldn't it run the effects in an unexpected order? @AL333Z @jdegoes ",
        "createdAt" : "2018-08-06T15:22:42Z",
        "updatedAt" : "2018-08-06T15:22:42Z",
        "lastEditedBy" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "tags" : [
        ]
      },
      {
        "id" : "0187c691-f75c-4f34-8aa6-b0dbd5680557",
        "parentId" : "24db5dd8-b05f-4720-9f4e-ba6138f68586",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "It makes no difference. The only thing that matters is the order of arguments to `zip` / `zipWith`: what's on the left will go first when it's interpreted.",
        "createdAt" : "2018-08-06T16:05:32Z",
        "updatedAt" : "2018-08-06T16:05:32Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "9070e5ad-ea5f-43a8-b622-ce9e124a4931",
        "parentId" : "24db5dd8-b05f-4720-9f4e-ba6138f68586",
        "authorId" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "body" : "Oh you right. Didn't thought about that lazy step :slightly_smiling_face: ",
        "createdAt" : "2018-08-06T16:09:16Z",
        "updatedAt" : "2018-08-06T16:09:16Z",
        "lastEditedBy" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "tags" : [
        ]
      },
      {
        "id" : "e09e0b4f-3cc7-4f32-8c12-451fe190f723",
        "parentId" : "24db5dd8-b05f-4720-9f4e-ba6138f68586",
        "authorId" : "5a7c67ec-d3d8-49f6-bc2a-daab362e6273",
        "body" : "Well.. that's quite easyto prove.\r\n\r\n```scala\r\n    for {\r\n      xs <- IO.traverse(List(1, 2, 3)) { i => putStrLn(s\"Evaluating $i\") *> IO.point(i) }\r\n      _ <- putStrLn(s\"Res $xs\")\r\n    } yield ()\r\n```\r\n\r\nThat's the result:\r\n\r\n```\r\nEvaluating 3\r\nEvaluating 2\r\nEvaluating 1\r\nRes List(1, 2, 3)\r\n```\r\n\r\nIs this what you'd expect?",
        "createdAt" : "2018-08-06T17:49:31Z",
        "updatedAt" : "2018-08-06T17:49:31Z",
        "lastEditedBy" : "5a7c67ec-d3d8-49f6-bc2a-daab362e6273",
        "tags" : [
        ]
      },
      {
        "id" : "dba97db5-ff30-4e5f-b99b-1518d34326cc",
        "parentId" : "24db5dd8-b05f-4720-9f4e-ba6138f68586",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Ah, we need to flip the argument order to `zipWith`. Otherwise, last-most will be left-most.",
        "createdAt" : "2018-08-06T18:03:17Z",
        "updatedAt" : "2018-08-06T18:03:18Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "4cde96ef-e860-4e9c-bac3-b5930f6a01fe",
        "parentId" : "24db5dd8-b05f-4720-9f4e-ba6138f68586",
        "authorId" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "body" : "Oh so my instinct was right then",
        "createdAt" : "2018-08-06T23:13:04Z",
        "updatedAt" : "2018-08-06T23:13:04Z",
        "lastEditedBy" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "tags" : [
        ]
      },
      {
        "id" : "a337790d-32ec-4a04-b8d1-4885651c41f2",
        "parentId" : "24db5dd8-b05f-4720-9f4e-ba6138f68586",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "It's not the `foldRight`, though, but the order of parameters to `zip`: in `zip(a, b)`, `a` always comes before `b`. In fact we're changing the name to `seq` to make that clearer.",
        "createdAt" : "2018-08-07T01:23:07Z",
        "updatedAt" : "2018-08-07T01:23:08Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "cc0c7408-03a3-41f5-bce7-e07402c597fe",
        "parentId" : "24db5dd8-b05f-4720-9f4e-ba6138f68586",
        "authorId" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "body" : "Yeah, got that, but the combination of using foldRight plus not flipping the IOs was what felt odd when i double checked the impl. I did check it to help someone on the gitter channel.",
        "createdAt" : "2018-08-07T01:28:14Z",
        "updatedAt" : "2018-08-07T01:28:14Z",
        "lastEditedBy" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "tags" : [
        ]
      }
    ],
    "commit" : "4603529e5a3a3da56314d1106084ed1df7abf2c2",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +879,883 @@   */\n  final def traverse[E, A, B](in: Iterable[A])(fn: A => IO[E, B]): IO[E, List[B]] =\n    in.foldRight[IO[E, List[B]]](IO.sync(Nil)) { (a, io) =>\n      io.zipWith(fn(a))((bs, b) => b :: bs)\n    }"
  },
  {
    "id" : "d3a37bb6-062d-4325-8a9a-e9a010f88f90",
    "prId" : 129,
    "prUrl" : "https://github.com/zio/zio/pull/129#pullrequestreview-139226698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b60f6db-093f-4d72-bdf5-8b51d22f14d3",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "`final def sync[A](....): IO[Nothing, A]`",
        "createdAt" : "2018-07-20T22:20:52Z",
        "updatedAt" : "2018-07-26T21:12:44Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "33490ff4fe40c177dd498b3abaf4d86bb8dd88c2",
    "line" : 547,
    "diffHunk" : "@@ -1,1 +766,770 @@          val result = effect\n          Right(result)\n        } catch f andThen Left[E, A]\n      )\n    )"
  },
  {
    "id" : "ad671639-32ab-4278-b6b1-5f6e8c6168b5",
    "prId" : 129,
    "prUrl" : "https://github.com/zio/zio/pull/129#pullrequestreview-139226698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9598105-f412-474e-9724-375ec0bd771a",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "`final def never[A]: IO[Nothing, A]`\r\n\r\n",
        "createdAt" : "2018-07-20T22:24:44Z",
        "updatedAt" : "2018-07-26T21:12:44Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "33490ff4fe40c177dd498b3abaf4d86bb8dd88c2",
    "line" : 572,
    "diffHunk" : "@@ -1,1 +819,823 @@\n  /**\n   * Retrieves the supervisor associated with the fiber running the action\n   * returned by this method.\n   */"
  },
  {
    "id" : "f5087bea-d1bb-4975-ac8c-847b7733a03f",
    "prId" : 129,
    "prUrl" : "https://github.com/zio/zio/pull/129#pullrequestreview-139226698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59a490a2-4d01-40fd-82b0-1fa6901c3e58",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I think `forkAll` can be changed to return `IO[Nothing, Fiber[E, M[A]]`. ",
        "createdAt" : "2018-07-20T22:25:37Z",
        "updatedAt" : "2018-07-26T21:12:44Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "33490ff4fe40c177dd498b3abaf4d86bb8dd88c2",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +845,849 @@   * not only is the acquired resource be cleaned up, the outcome of the computation is also\n   * reified for processing.\n   */\n  final def bracket0[E, A, B](\n    acquire: IO[E, A]"
  },
  {
    "id" : "8198b9fa-8746-4edc-b15d-01438296af68",
    "prId" : 129,
    "prUrl" : "https://github.com/zio/zio/pull/129#pullrequestreview-139297195",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffedacfc-713b-407c-8240-c698903a25bb",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This reminds me that `IO.sleep` cannot fail and should return `Nothing` for its error.",
        "createdAt" : "2018-07-22T18:48:43Z",
        "updatedAt" : "2018-07-26T21:12:44Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "33490ff4fe40c177dd498b3abaf4d86bb8dd88c2",
    "line" : 311,
    "diffHunk" : "@@ -1,1 +440,444 @@      }\n\n    nanoTime.flatMap { start =>\n      tick(start, 1)\n    }"
  },
  {
    "id" : "be4f36fd-2a82-4ed3-b520-a39e0c386e4d",
    "prId" : 129,
    "prUrl" : "https://github.com/zio/zio/pull/129#pullrequestreview-140758620",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "316f1503-e111-4c75-9e90-df8fee9bf3fd",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "The scaladoc can be updated because the error is now `Nothing`.",
        "createdAt" : "2018-07-26T14:37:59Z",
        "updatedAt" : "2018-07-26T21:12:44Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "33490ff4fe40c177dd498b3abaf4d86bb8dd88c2",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +222,226 @@   * it is guaranteed the `IO` action does not raise any errors.\n   */\n  final def attempt: IO[Nothing, Either[E, A]] =\n    self.redeem[Nothing, Either[E, A]](IO.nowLeft, IO.nowRight)\n"
  },
  {
    "id" : "67e364ee-0596-481d-8cc0-a5404d66a897",
    "prId" : 107,
    "prUrl" : "https://github.com/zio/zio/pull/107#pullrequestreview-143395785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9caa3188-7aff-423a-805d-81464462e0b0",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Looks good.",
        "createdAt" : "2018-08-04T23:00:11Z",
        "updatedAt" : "2018-08-05T12:35:24Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0678f0b1c77862a214a5e4cd2ee578de3280b92",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +713,717 @@   * Terminates the fiber executing this action, running all finalizers.\n   */\n  final def terminate: IO[Nothing, Nothing] = terminate0(Nil)\n\n  /**"
  },
  {
    "id" : "85a56ffd-2a72-4e35-a39c-b0b873c77829",
    "prId" : 69,
    "prUrl" : "https://github.com/zio/zio/pull/69#pullrequestreview-135681597",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e311735-24df-4132-a61f-62760ace6786",
        "parentId" : null,
        "authorId" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "body" : "Scaladocs got outdated after this change. Also `cleanupE` could be renamed to just `cleanup`",
        "createdAt" : "2018-07-10T05:52:47Z",
        "updatedAt" : "2018-07-10T05:52:47Z",
        "lastEditedBy" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcbbc1ea00b8662f9b3229f62b72b92dce8a2ec1",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +266,270 @@   * Cleanup actions for handled and unhandled errors can be provided separately.\n   */\n  final def onError(cleanupE: Option[E] => Infallible[Unit]): IO[E, A] =\n    IO.bracket0(IO.unit[E])(\n      (_, eb: Option[Either[E, A]]) =>"
  },
  {
    "id" : "5e456676-3051-497b-bc3e-976a3bbca196",
    "prId" : 40,
    "prUrl" : "https://github.com/zio/zio/pull/40#pullrequestreview-129395231",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7801c3f2-01cc-4189-a9b1-d74648e35a62",
        "parentId" : null,
        "authorId" : "64a07906-0c26-4393-9002-344c9bbf55d9",
        "body" : "I know this is probably going to sound too far-fetched, but there is an issue with partial unification and non-trivial `Traversable` children like `Map`: https://users.scala-lang.org/t/problem-with-partial-unification-and-map-traversal/2083.\r\n\r\nThere is a workaround for a similar issue in e.g. scalatest: https://github.com/scalatest/scalatest/pull/1375/files. I'm just wondering if you would consider doing something similar here - that is, if someone besides me thinks this is actually an issue. ",
        "createdAt" : "2018-06-13T20:17:01Z",
        "updatedAt" : "2018-06-19T20:11:40Z",
        "lastEditedBy" : "64a07906-0c26-4393-9002-344c9bbf55d9",
        "tags" : [
        ]
      },
      {
        "id" : "a330dfb5-f2c6-43cf-930c-fff45f9712c8",
        "parentId" : "7801c3f2-01cc-4189-a9b1-d74648e35a62",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "imho It looks like a bad design choice in the scala collection library ([one of many](https://www.reddit.com/r/haskell/comments/1pjjy5/odersky_the_trouble_with_types_strange_loop_2013/cd3bgcu/)) that should be addressed in a wholistic fashion, i.e. via proper `Traversable`s and `Applicative`s.",
        "createdAt" : "2018-06-16T08:44:31Z",
        "updatedAt" : "2018-06-19T20:11:40Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "e39a6a24-6814-495d-922a-d6d59f7a5696",
        "parentId" : "7801c3f2-01cc-4189-a9b1-d74648e35a62",
        "authorId" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "body" : "> i.e. via proper Traversables and Applicatives.\r\n\r\nDon't think this is happening scala/bug#10934  :smile: ",
        "createdAt" : "2018-06-16T08:59:26Z",
        "updatedAt" : "2018-06-19T20:11:40Z",
        "lastEditedBy" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "tags" : [
        ]
      },
      {
        "id" : "b5366a4b-b357-4a34-a6a7-e77cdeb1dc92",
        "parentId" : "7801c3f2-01cc-4189-a9b1-d74648e35a62",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I'm fine with the workaround, but if this is just for `Map`, I'm not sure it's worth it. In any case, let's do it in a followup PR.",
        "createdAt" : "2018-06-17T17:00:46Z",
        "updatedAt" : "2018-06-19T20:11:40Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc55bc3a5d8aa82e980b9b424f02013eb4b62814",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +800,804 @@   * _Note_: ordering in the input collection is not preserved\n   */\n  def parTraverse[E, A, B, M[X] <: TraversableOnce[X]](\n    in: M[A]\n  )(fn: A => IO[E, B])(implicit cbf: CanBuildFrom[M[A], B, M[B]]): IO[E, M[B]] = {"
  },
  {
    "id" : "a05b868b-9f3e-49f7-b8b2-6a64b5d08a6d",
    "prId" : 33,
    "prUrl" : "https://github.com/zio/zio/pull/33#pullrequestreview-127809267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7da4e92f-ede4-4bdb-a408-081b613b596b",
        "parentId" : null,
        "authorId" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "body" : "Doesn't it compile without all the type annotations?",
        "createdAt" : "2018-06-12T03:22:20Z",
        "updatedAt" : "2018-06-12T03:24:38Z",
        "lastEditedBy" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "tags" : [
        ]
      },
      {
        "id" : "10597f7d-3a8e-47f1-9e86-0d026decbd8c",
        "parentId" : "7da4e92f-ede4-4bdb-a408-081b613b596b",
        "authorId" : "50f02981-689f-49f5-b80d-3f667da70148",
        "body" : "Nope, I get:\r\n\r\n```\r\ntype mismatch;\r\n[error]  found   : scalaz.zio.IO[E,B]\r\n[error]  required: scalaz.zio.IO[Nothing,?]\r\n```",
        "createdAt" : "2018-06-12T03:30:28Z",
        "updatedAt" : "2018-06-12T03:34:57Z",
        "lastEditedBy" : "50f02981-689f-49f5-b80d-3f667da70148",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f08fac6d7ef8471f45a361d1bc22772d051392b",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +790,794 @@    in: M[A]\n  )(fn: A => IO[E, B])(implicit cbf: CanBuildFrom[M[A], B, M[B]]): IO[E, M[B]] =\n    in.foldLeft(point[E, mutable.Builder[B, M[B]]](cbf(in)))((io, b) => io.zipWith(fn(b))(_ += _))\n      .map(_.result())\n"
  }
]