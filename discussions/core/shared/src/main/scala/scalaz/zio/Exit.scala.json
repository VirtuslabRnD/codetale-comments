[
  {
    "id" : "03afd3df-5c48-4fa8-9c49-030f06170dcc",
    "prId" : 849,
    "prUrl" : "https://github.com/zio/zio/pull/849#pullrequestreview-242044129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "474da3fd-c65d-4fac-a20e-a94d17be4497",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This looks way cleaner! Nice work.",
        "createdAt" : "2019-05-26T17:55:10Z",
        "updatedAt" : "2019-05-30T01:18:27Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c5bbbea1c9833689e7f728f96b420cad75711fc",
    "line" : 205,
    "diffHunk" : "@@ -1,1 +500,504 @@\n    // Traced is excluded completely from equals & hashCode\n    final case class Traced[E](cause: Cause[E], trace: ZTrace) extends Cause[E] {\n      override final def hashCode: Int = cause.hashCode()\n      override final def equals(obj: Any): Boolean = obj match {"
  },
  {
    "id" : "efcc330d-73b3-4e63-8a15-b8d220d12c6c",
    "prId" : 849,
    "prUrl" : "https://github.com/zio/zio/pull/849#pullrequestreview-242528405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6acf6ddc-ab7a-44e6-b5c4-f52fd6cf1eaf",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "We need to make sure this equality is symmetrical, i.e. `(traced === c) === (c === traced)`.",
        "createdAt" : "2019-05-26T17:55:55Z",
        "updatedAt" : "2019-05-30T01:18:27Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "65860fcb-1502-4368-b96f-191256b1560b",
        "parentId" : "6acf6ddc-ab7a-44e6-b5c4-f52fd6cf1eaf",
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : ":+1:",
        "createdAt" : "2019-05-28T08:49:05Z",
        "updatedAt" : "2019-05-30T01:18:27Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c5bbbea1c9833689e7f728f96b420cad75711fc",
    "line" : 207,
    "diffHunk" : "@@ -1,1 +502,506 @@    final case class Traced[E](cause: Cause[E], trace: ZTrace) extends Cause[E] {\n      override final def hashCode: Int = cause.hashCode()\n      override final def equals(obj: Any): Boolean = obj match {\n        case traced: Traced[_] => cause == traced.cause\n        case _                 => cause == obj"
  },
  {
    "id" : "6dd4597c-4076-4ca2-bf6a-279fd29363df",
    "prId" : 597,
    "prUrl" : "https://github.com/zio/zio/pull/597#pullrequestreview-211187491",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09764cb6-b50e-48f4-b21e-89c6fda71a42",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Interesting, why the change? I thought abstract classes generate more efficient bytecode most of the time.",
        "createdAt" : "2019-03-06T07:23:48Z",
        "updatedAt" : "2019-03-06T12:17:54Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "7e6be5ac-a764-4df1-b35b-fd5b06e7d8e7",
        "parentId" : "09764cb6-b50e-48f4-b21e-89c6fda71a42",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "We dropped Scala 2.11. The main reason for abstract class is to avoid breaking backward binary compatibility on adding a method with a default implementation.",
        "createdAt" : "2019-03-06T11:50:58Z",
        "updatedAt" : "2019-03-06T12:17:54Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "42c6e5b1d96e14b071d166a8460f3ac876660534",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +21,25 @@ * result is either succeeded with a value `A`, or failed with a `Cause[E]`.\n */\nsealed trait Exit[+E, +A] extends Product with Serializable { self =>\n  import Exit._\n"
  }
]