[
  {
    "id" : "d5c7a567-a16e-45d3-b043-9a0cc6858e56",
    "prId" : 376,
    "prUrl" : "https://github.com/zio/zio/pull/376#pullrequestreview-178052108",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dba62df-302a-4447-b4f8-0df77d7c1321",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Is it worth optimising `Tags.Fork` in RTS to use `Fiber.done` for trivial cases and avoid the creation of a new `FiberContext`?",
        "createdAt" : "2018-11-24T08:13:35Z",
        "updatedAt" : "2018-11-24T14:26:16Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "c1177fc1-122e-4777-b7c7-2c034dab3e81",
        "parentId" : "1dba62df-302a-4447-b4f8-0df77d7c1321",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "(Feel free to ignore, I'm happy to take this in a follow-up if useful)",
        "createdAt" : "2018-11-24T09:01:51Z",
        "updatedAt" : "2018-11-24T14:26:16Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "a111e43a-3121-446e-ac64-daef39a925ad",
        "parentId" : "1dba62df-302a-4447-b4f8-0df77d7c1321",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Yes, we should do that. It will be a little involved.",
        "createdAt" : "2018-11-24T14:13:51Z",
        "updatedAt" : "2018-11-24T14:26:16Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "022be82057c72021151ee9dc3f44b8b8acaa66f4",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +122,126 @@    }\n\n  final def done[E, A](exit: => ExitResult[E, A]): Fiber[E, A] =\n    new Fiber[E, A] {\n      def observe: IO[Nothing, ExitResult[E, A]]      = IO.point(exit)"
  },
  {
    "id" : "d65e9e25-38ce-4708-a4b1-e93cca51d24d",
    "prId" : 342,
    "prUrl" : "https://github.com/zio/zio/pull/342#pullrequestreview-171559711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2a2b395-9e0c-425e-89db-c0bf277da90d",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This is quite nice!",
        "createdAt" : "2018-11-05T15:22:46Z",
        "updatedAt" : "2018-11-09T01:44:35Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a03e319bc75fd45669400738c0a1117e86bb1a5",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +40,44 @@   * result in a catchable error, _if_ that error does not result from interruption.\n   */\n  final def join: IO[E, A] = observe.flatMap(IO.done)\n\n  /**"
  },
  {
    "id" : "b681cfdc-f65a-4e70-ad41-e2043d9fa718",
    "prId" : 270,
    "prUrl" : "https://github.com/zio/zio/pull/270#pullrequestreview-159055028",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a6df246-ffd3-4239-a1da-f65820fda0e7",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I suggest `self.tryObserve.seqWith(that.tryObserve)(???)`",
        "createdAt" : "2018-09-26T15:19:24Z",
        "updatedAt" : "2018-09-26T15:41:08Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fdb826a004df345447d3da2953d5cc02932358a",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +77,81 @@        self.observe.seqWith(that.observe)(_.zipWith(_)(f))\n\n      def tryObserve: IO[Nothing, Option[ExitResult[E1, C]]] =\n        self.tryObserve.seqWith(that.tryObserve) {\n          case (Some(ra), Some(rb)) => Some(ra.zipWith(rb)(f))"
  },
  {
    "id" : "d3dcd07e-d26c-41cd-b5c3-0c6b26f77ba9",
    "prId" : 260,
    "prUrl" : "https://github.com/zio/zio/pull/260#pullrequestreview-158385694",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50bad6a7-5eb3-4e6e-82ef-a7622f2e1c19",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "It seems there are missing cases here? I'm not sure why the compiler is not picking them up.",
        "createdAt" : "2018-09-24T20:36:24Z",
        "updatedAt" : "2018-09-25T12:21:33Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "06a6c406-8441-42b8-948d-70ff744c5eea",
        "parentId" : "50bad6a7-5eb3-4e6e-82ef-a7622f2e1c19",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "After patterns of the previous two lines fail, we know fiber `a` is completed and fiber `b` is in an error state (the happy path being the first match).",
        "createdAt" : "2018-09-25T05:53:00Z",
        "updatedAt" : "2018-09-25T12:21:33Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "838bea108a7804e9f74a58d7f5a1d580cf9a6ea0",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +75,79 @@          case (ExitResult.Terminated(ts), rb)                      => ExitResult.Terminated(combine(ts, rb))\n          case (ExitResult.Completed(_), ExitResult.Failed(e, ts))  => ExitResult.Failed(e, ts)\n          case (ExitResult.Completed(_), ExitResult.Terminated(ts)) => ExitResult.Terminated(ts)\n        }\n"
  },
  {
    "id" : "e564b451-06a9-48d5-9ac4-ced10fd42a24",
    "prId" : 165,
    "prUrl" : "https://github.com/zio/zio/pull/165#pullrequestreview-146477831",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08fd274a-5840-4a74-9883-9e94f40edf10",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "It occurs to me that if we change `fork` to require something like `ExitResult[E, A] => IO[Nothing, Unit]` (which would require changing the hierarchical error supervision model), then we maybe want to change `onComplete` to `supervise` for consistency. \r\n\r\nThen we just need to find a good name for the `supervise` combinator (`collectForked`?).\r\n\r\nThe most generic supervisor is something like `(ExitResult[E, A], List[Fiber[E, A]]) => IO[Nothing, Unit]`). i.e. it lets you see not just the exit result, but also all the fibers spawned by the fiber. You can imagine this signature in `onComplete` / `supervise` eventually. This might allow deleting `supervise` combinator entirely if you can recapture what you want in `Fiber.supervise`.",
        "createdAt" : "2018-08-13T19:00:36Z",
        "updatedAt" : "2018-08-15T05:59:26Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "fc2b60d6-6bba-44c5-a7eb-e6bf1aa26f46",
        "parentId" : "08fd274a-5840-4a74-9883-9e94f40edf10",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "I need to spend some time understanding the ramifications of that idea, it would ripple through the whole of RTS. That sounds like fun! ðŸ˜„ ",
        "createdAt" : "2018-08-14T20:40:33Z",
        "updatedAt" : "2018-08-15T05:59:26Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "0355de47-8c71-4067-b210-3e5fd70c7502",
        "parentId" : "08fd274a-5840-4a74-9883-9e94f40edf10",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "So with that, `unhandled` becomes a regular exit handler and probably needs another name too. Then the behaviour of `reportErrors` changes to `reportResult` to all the exit handlers. First part is easy.\r\n\r\nUpgrading `onComplete` to the almighty `supervise` would then delegate the behaviour on child fibers to a user-provided function (essentially `superviseWith`). In the face of that change, is it still reasonable to let users register multiple supervisors? I don't think so, for they could totally write something like\r\n```scala\r\nf\r\n  .supervise((_, l) => Fiber.interruptAll(l))\r\n  .supervise((_, l) => Fiber.joinAll(l))\r\n```\r\n",
        "createdAt" : "2018-08-15T06:46:51Z",
        "updatedAt" : "2018-08-15T06:46:51Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "6bbd231a-6292-46b5-86c1-952a06651165",
        "parentId" : "08fd274a-5840-4a74-9883-9e94f40edf10",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Let's discuss these in a new ticket (or maybe there is one already).",
        "createdAt" : "2018-08-15T14:50:14Z",
        "updatedAt" : "2018-08-15T14:50:14Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "329c3d67ce435b2fee72ff355116bb2cd9dc243e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +62,66 @@   */\n  def onComplete(f: ExitResult[E, A] => IO[Nothing, Unit]): IO[Nothing, Unit]\n\n  /**\n   * Zips this fiber with the specified fiber, combining their results using"
  },
  {
    "id" : "a4d86eac-455e-4899-8f5b-8018779a5312",
    "prId" : 165,
    "prUrl" : "https://github.com/zio/zio/pull/165#pullrequestreview-145784747",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0df4d7d-7d54-4887-b1ff-e8e53dee838a",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I like how the nesting preserves the ordering of the callbacks, like you'd expect `zipWith` to (soon: `seqWith`).",
        "createdAt" : "2018-08-13T19:03:36Z",
        "updatedAt" : "2018-08-15T05:59:26Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "329c3d67ce435b2fee72ff355116bb2cd9dc243e",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +79,83 @@        self.onComplete { ra: ExitResult[E, A] =>\n          that.onComplete { rb: ExitResult[E1, B] =>\n            (ra, rb) match {\n              case (ExitResult.Completed(a), ExitResult.Completed(b))   => fc(ExitResult.Completed(f(a, b)))\n              case (ExitResult.Failed(e, ts), rb)                       => fc(ExitResult.Failed(e, combine(ts, rb)))"
  }
]