[
  {
    "id" : "6985fbe9-3424-4a1c-a9da-5b094037c8a1",
    "prId" : 897,
    "prUrl" : "https://github.com/zio/zio/pull/897#pullrequestreview-241983249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c558ce3-0753-4fc2-86eb-15cbf2b78467",
        "parentId" : null,
        "authorId" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "body" : "👍 on this, way more explicit",
        "createdAt" : "2019-05-25T01:08:40Z",
        "updatedAt" : "2019-05-26T17:34:11Z",
        "lastEditedBy" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff3a6560499f08fe182782f70d5160aeecb9be56",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +1274,1278 @@   * the effect are interrupted when this effect completes.\n   */\n  final def interruptChildren[R >: LowerR, E <: UpperE, A](zio: ZIO[R, E, A]): ZIO[R, E, A] =\n    handleChildrenWith(zio)(Fiber.interruptAll)\n"
  },
  {
    "id" : "8f801475-adf6-4dc1-bb03-4693f8856295",
    "prId" : 849,
    "prUrl" : "https://github.com/zio/zio/pull/849#pullrequestreview-242044129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0530859c-1962-47c4-a409-6b1f3545e863",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "All of this manual wrapping will be hard to maintain and easy to get wrong (plus, of course, it adds overhead that cannot be escaped). ",
        "createdAt" : "2019-05-28T00:38:16Z",
        "updatedAt" : "2019-05-30T01:18:27Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c5bbbea1c9833689e7f728f96b420cad75711fc",
    "line" : 180,
    "diffHunk" : "@@ -1,1 +906,910 @@   * }}}\n   */\n  final def tap[R1 <: R, E1 >: E](f: A => ZIO[R1, E1, _]): ZIO[R1, E1, A] = self.flatMap(new ZIO.TapFn(f))\n\n  /**"
  },
  {
    "id" : "8d20330c-14e1-4fd4-9dc6-0999095273b3",
    "prId" : 839,
    "prUrl" : "https://github.com/zio/zio/pull/839#pullrequestreview-239215121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48ab70fc-e545-436b-ba85-9895eb929bd1",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Nice catch. 👍 ",
        "createdAt" : "2019-05-18T22:39:52Z",
        "updatedAt" : "2019-05-19T17:31:36Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "571adc1d1fbbae12a10a66a81a6219e90667d75e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1573,1577 @@   * For a sequential version of this method, see `foreach_`.\n   */\n  final def foreachPar_[R >: LowerR, E <: UpperE, A](as: Iterable[A])(f: A => ZIO[R, E, _]): ZIO[R, E, Unit] =\n    ZIO.succeedLazy(as.iterator).flatMap { i =>\n      def loop(a: A): ZIO[R, E, Unit] ="
  },
  {
    "id" : "7e497de9-e6d1-4bd3-8797-6516813ba76f",
    "prId" : 748,
    "prUrl" : "https://github.com/zio/zio/pull/748#pullrequestreview-226804229",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49badf11-1ae5-4775-adeb-902eeff5768e",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I think we can delete `&&&` now that we have `<*>`. I know Haskell uses `&&&` but no reason for two symbols for the same operator.",
        "createdAt" : "2019-04-15T18:17:37Z",
        "updatedAt" : "2019-04-15T18:17:37Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "91f9cabf6f7ff51622b5541b0855e5b15bfc7b09",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +722,726 @@\n  /**\n   * A named alias for `&&&` or `<*>`.\n   */\n  final def zip[R1 <: R, E1 >: E, B](that: ZIO[R1, E1, B]): ZIO[R1, E1, (A, B)] ="
  },
  {
    "id" : "974a19e4-73b6-4cef-87ea-05998e7816ec",
    "prId" : 742,
    "prUrl" : "https://github.com/zio/zio/pull/742#pullrequestreview-226118521",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d46bfc38-3af2-4b55-8f9a-c8d39725c9a1",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Can you make this one delegate to the other one, to avoid duplicated code?",
        "createdAt" : "2019-04-12T14:18:10Z",
        "updatedAt" : "2019-04-13T11:29:22Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "a2ced37b-a2d3-4b1b-9b1c-1a5575199a34",
        "parentId" : "d46bfc38-3af2-4b55-8f9a-c8d39725c9a1",
        "authorId" : "7e3942e8-574e-4098-a8e1-89fffa0c877d",
        "body" : "Removed duplicate code by delegating to new function.",
        "createdAt" : "2019-04-12T14:38:26Z",
        "updatedAt" : "2019-04-13T11:29:22Z",
        "lastEditedBy" : "7e3942e8-574e-4098-a8e1-89fffa0c877d",
        "tags" : [
        ]
      }
    ],
    "commit" : "402ba627f2a70f5580c6a905063dfe72bd27e16a",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +797,801 @@   * Returns the effect resulting from mapping the success of this effect to unit.\n   */\n  @deprecated(\"use unit\", \"1.0.0\")\n  final def void: ZIO[R, E, Unit] = unit\n"
  },
  {
    "id" : "44bb7276-4beb-4ff9-90a2-b7b8f72232f4",
    "prId" : 740,
    "prUrl" : "https://github.com/zio/zio/pull/740#pullrequestreview-226391263",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa68dc35-1ec5-40a5-b66e-cf67ebb8b1fd",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Not `descriptor >>= (d => d.interruptible)`?",
        "createdAt" : "2019-04-14T06:39:21Z",
        "updatedAt" : "2019-04-15T14:55:56Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "7e6884e7-b560-400b-888f-168db2b7f044",
        "parentId" : "aa68dc35-1ec5-40a5-b66e-cf67ebb8b1fd",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I thought about that (indeed, that's why I added `interruptible` to `Descriptor`), but it's becoming more and more expensive to call `descriptor` (it allocates a lot, accesses volatile memory, etc.). All this logic will appear in the new `ensuring`, which was previously a primitive, so I'm trying to keep an eye on performance issues now in advance of benchmarking/optimization.",
        "createdAt" : "2019-04-14T11:42:18Z",
        "updatedAt" : "2019-04-15T14:55:56Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "889bcdf8060876dbcf923fa3cae3d5675cf66cc9",
    "line" : 244,
    "diffHunk" : "@@ -1,1 +1629,1633 @@   */\n  final def checkInterruptible[R >: LowerR, E <: UpperE, A](f: Boolean => ZIO[R, E, A]): ZIO[R, E, A] =\n    new ZIO.CheckInterrupt(f)\n\n  /**"
  },
  {
    "id" : "547340a7-233f-4bf1-8286-8cdb4ef72c05",
    "prId" : 740,
    "prUrl" : "https://github.com/zio/zio/pull/740#pullrequestreview-226381230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6ca2f77-6fed-442f-ab7f-ecba255ae0f6",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "😄 ",
        "createdAt" : "2019-04-14T07:02:23Z",
        "updatedAt" : "2019-04-15T14:55:56Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "889bcdf8060876dbcf923fa3cae3d5675cf66cc9",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +425,429 @@   */\n  final def ensuring(finalizer: UIO[_]): ZIO[R, E, A] =\n    ZIO.uninterruptibleMask(\n      restore =>\n        restore(self)"
  },
  {
    "id" : "b48c4a79-b78d-433c-8f9a-cb4faf717d5b",
    "prId" : 665,
    "prUrl" : "https://github.com/zio/zio/pull/665#pullrequestreview-239253619",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb1cf045-7fd1-459f-b1c6-0fd9cdaeef95",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Much cleaner!",
        "createdAt" : "2019-05-19T20:22:31Z",
        "updatedAt" : "2019-05-22T20:33:36Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "1de46fa03a686ae8f0cae79d2cfa549eb52bd6d0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1962,1966 @@    final val SuspendWith     = 16\n    final val FiberRefNew     = 17\n    final val FiberRefModify  = 18\n  }\n  private[zio] final class FlatMap[R, E, A0, A](val zio: ZIO[R, E, A0], val k: A0 => ZIO[R, E, A])"
  },
  {
    "id" : "715a6a98-fe8a-45b3-9805-6acba20023c9",
    "prId" : 654,
    "prUrl" : "https://github.com/zio/zio/pull/654#pullrequestreview-215581187",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c3ce237-c65b-4481-b3cc-c85e6fc201d0",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "No need for `[R1 <: R]` then :-)",
        "createdAt" : "2019-03-18T12:57:19Z",
        "updatedAt" : "2019-03-18T12:57:19Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "0b4c875b-8aa5-4ba8-8f57-ee61dbcbdfa1",
        "parentId" : "9c3ce237-c65b-4481-b3cc-c85e6fc201d0",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Good catch, will fix in followup!",
        "createdAt" : "2019-03-18T12:59:08Z",
        "updatedAt" : "2019-03-18T12:59:08Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc1362d2fbe3ad8c5d1dc944265a0ef39d018d05",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +949,953 @@   * Converts the effect to a [[scala.concurrent.Future]].\n   */\n  final def toFuture[R1 <: R](implicit ev2: E <:< Throwable): ZIO[R, Nothing, scala.concurrent.Future[A]] =\n    self.toFutureWith(ev2)\n"
  },
  {
    "id" : "ef34a68b-70b6-496c-a053-72873f1571d6",
    "prId" : 630,
    "prUrl" : "https://github.com/zio/zio/pull/630#pullrequestreview-215259598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f746cdf5-3003-4d30-aa44-fc8907870b17",
        "parentId" : null,
        "authorId" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "body" : "~Why do you rename this method? I think `managed` fits other combinators better than `toManaged`, although this one is unique because it returns totally different type.~\r\nI missed the converstion! Sorry!",
        "createdAt" : "2019-03-15T21:38:49Z",
        "updatedAt" : "2019-03-16T08:36:07Z",
        "lastEditedBy" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "3961005833ad0e35f62596e810ae6088503daa2c",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +457,461 @@   * Converts this ZIO to [[scalaz.zio.Managed]].\n   */\n  final def toManaged(release: A => UIO[_]): ZManaged[R, E, A] =\n    ZManaged.make(this)(release)\n"
  },
  {
    "id" : "8ae4c007-7eeb-4543-84bb-9af378b7f55e",
    "prId" : 617,
    "prUrl" : "https://github.com/zio/zio/pull/617#pullrequestreview-215379537",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa884628-7fe6-4899-999a-7382d1c75ac7",
        "parentId" : null,
        "authorId" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "body" : "I'm sorry for this one, but scaladoc finds two `bracket` methods now and I cannot find method when signature contains type bounded by `type LowerR` declared inside `ZIO`.",
        "createdAt" : "2019-03-17T22:42:51Z",
        "updatedAt" : "2019-03-17T22:42:52Z",
        "lastEditedBy" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c0342a848ce4c634178a5384d1f98090e54f662",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +427,431 @@   * Finalizers offer very powerful guarantees, but they are low-level, and\n   * should generally not be used for releasing resources. For higher-level\n   * logic built on `ensuring`, see `ZIO#bracket`.\n   */\n  final def ensuring(finalizer: UIO[_]): ZIO[R, E, A] ="
  },
  {
    "id" : "e819fb61-9b44-49c4-8e06-e8363b981646",
    "prId" : 597,
    "prUrl" : "https://github.com/zio/zio/pull/597#pullrequestreview-211191605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a520460-901b-437c-9b64-20aa8cd98145",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "OCD much 😂",
        "createdAt" : "2019-03-06T07:25:45Z",
        "updatedAt" : "2019-03-06T12:17:54Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "cbcc47cf-3563-4f53-a014-5e2e2d43b3b8",
        "parentId" : "3a520460-901b-437c-9b64-20aa8cd98145",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "You have no idea 😆 ",
        "createdAt" : "2019-03-06T12:01:07Z",
        "updatedAt" : "2019-03-06T12:17:54Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "42c6e5b1d96e14b071d166a8460f3ac876660534",
    "line" : 164,
    "diffHunk" : "@@ -1,1 +570,574 @@   * effects of this effect.\n   */\n  final def const[B](b: => B): ZIO[R, E, B] = self map (_ => b)\n\n  /**"
  },
  {
    "id" : "87ecea80-a8be-415e-a108-5a6cefc65fbd",
    "prId" : 582,
    "prUrl" : "https://github.com/zio/zio/pull/582#pullrequestreview-207782189",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c00e759-bb2b-407e-892a-e9238c337440",
        "parentId" : null,
        "authorId" : "de89a48e-13a7-4516-a51d-dd4027b753b0",
        "body" : "Why does `R1` need the `with Clock` here but not in the `orElse` above?\r\nI am clearly missing something :)",
        "createdAt" : "2019-02-25T23:40:00Z",
        "updatedAt" : "2019-02-26T06:57:28Z",
        "lastEditedBy" : "de89a48e-13a7-4516-a51d-dd4027b753b0",
        "tags" : [
        ]
      },
      {
        "id" : "14e8957a-1fc5-4526-9c76-8c9947fce17c",
        "parentId" : "3c00e759-bb2b-407e-892a-e9238c337440",
        "authorId" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "body" : "in `repeatOrElseEither` we used Schedule which has `Clock` now",
        "createdAt" : "2019-02-26T06:40:27Z",
        "updatedAt" : "2019-02-26T06:57:28Z",
        "lastEditedBy" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5078c29102f8cc506ac0375ad39f8de426baf478",
    "line" : 668,
    "diffHunk" : "@@ -1,1 +660,664 @@  final def repeatOrElseEither[R1 <: R, B, E2, C](\n    schedule: Schedule[R1, A, B],\n    orElse: (E, Option[B]) => ZIO[R1 with Clock, E2, C]\n  ): ZIO[R1 with Clock, E2, Either[C, B]] = {\n    def loop(last: Option[() => B], state: schedule.State): ZIO[R1 with Clock, E2, Either[C, B]] ="
  },
  {
    "id" : "c91ba118-19df-4d0d-aa80-e20cac98afce",
    "prId" : 582,
    "prUrl" : "https://github.com/zio/zio/pull/582#pullrequestreview-208095978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba552319-33d9-4adc-80dc-1c5e61befc96",
        "parentId" : null,
        "authorId" : "de89a48e-13a7-4516-a51d-dd4027b753b0",
        "body" : "I am not a fan of these strange trait names...",
        "createdAt" : "2019-02-25T23:42:50Z",
        "updatedAt" : "2019-02-26T06:57:28Z",
        "lastEditedBy" : "de89a48e-13a7-4516-a51d-dd4027b753b0",
        "tags" : [
        ]
      },
      {
        "id" : "97720c45-0d9b-4d8a-9047-474ffc36c597",
        "parentId" : "ba552319-33d9-4adc-80dc-1c5e61befc96",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I'll clean them up in followup PR.",
        "createdAt" : "2019-02-26T17:21:27Z",
        "updatedAt" : "2019-02-26T17:21:27Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "5078c29102f8cc506ac0375ad39f8de426baf478",
    "line" : 1421,
    "diffHunk" : "@@ -1,1 +1409,1413 @@}\n\ntrait ZIO_E_Any extends ZIO_E_Throwable {\n  type UpperE = Any\n"
  },
  {
    "id" : "f330e4b8-3384-4d76-b94a-2206c60b80a5",
    "prId" : 400,
    "prUrl" : "https://github.com/zio/zio/pull/400#pullrequestreview-180167509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4eca4db6-d05b-4f42-a70f-3dd78a8996fb",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Closes #365 ",
        "createdAt" : "2018-11-30T08:52:50Z",
        "updatedAt" : "2018-11-30T08:52:50Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "7bfde5e4b69df551ea820d302c9719f1d6396cb7",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +8,12 @@ */\ntrait ZIO[F[_, _]] {\n  def liftZIO[E, A](io: IO[E, A]): F[E, A]\n}\nobject ZIO extends Serializable {"
  }
]