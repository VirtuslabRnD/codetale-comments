[
  {
    "id" : "4e52e6b0-95d6-4194-bde3-941c9cd51931",
    "prId" : 134,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/134#pullrequestreview-101243217",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e3fc6cd-7cc9-4337-842d-2d391449a922",
        "parentId" : null,
        "authorId" : "b93e2985-c394-41e6-a036-b46320cfbf21",
        "body" : "What about an example without unsafeRunSync? For instance, an application that is a single `IO[Unit]` value that is triggered run in a `main` method. It might be nicer to show an example where this is run or canceled without calling unsafe.",
        "createdAt" : "2018-03-05T17:00:13Z",
        "updatedAt" : "2018-03-06T06:44:21Z",
        "lastEditedBy" : "b93e2985-c394-41e6-a036-b46320cfbf21",
        "tags" : [
        ]
      }
    ],
    "commit" : "e88692e16aa56e97332a9e8ead1e04dd28bcdac8",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +57,61 @@   *   // For triggering asynchronous execution\n   *   val cancel = io.unsafeRunSync\n   *   // For cancellation\n   *   cancel.unsafeRunSync\n   * }}}"
  },
  {
    "id" : "56f31980-56a9-4f01-ba57-8e83ea35e9bd",
    "prId" : 134,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/134#pullrequestreview-101347941",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72cc98ea-ed9c-4981-b8d5-29997b9149e1",
        "parentId" : null,
        "authorId" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "body" : "I like the nested `IO`, but it doesn't exactly signal that the inner type means cancelation. This is a pretty low level API so I think it's perfectly fine, but if someone e.g. calls `flatten` on it, it will immediately run and cancel the execution, right? I sort of prefer the `CancelableFuture` that Monix provides, but I still think this API is good enough for what we set out to do. But maybe someone has a good idea that nobody's thought about yet, so I just wanted to provide some food for thought. :)",
        "createdAt" : "2018-03-05T20:40:35Z",
        "updatedAt" : "2018-03-06T06:44:21Z",
        "lastEditedBy" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "tags" : [
        ]
      },
      {
        "id" : "1a1e4f7b-5f2b-486a-b710-87b9ec80e6e1",
        "parentId" : "72cc98ea-ed9c-4981-b8d5-29997b9149e1",
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "I like Monix's approach too, but there we have the luxury of an entire sub-project supporting it (monix-execution), whereas cats-effect is more minimal.\r\n\r\nI think `IO[Unit]` is reasonable though. Once you get accustomed to what cancellation looks like, there's not much that an `IO[IO[Unit]]` can mean.",
        "createdAt" : "2018-03-05T20:48:12Z",
        "updatedAt" : "2018-03-06T06:44:21Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      },
      {
        "id" : "42f3c48f-c02c-4ecf-b85b-0fec6b432686",
        "parentId" : "72cc98ea-ed9c-4981-b8d5-29997b9149e1",
        "authorId" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "body" : "Yeah, agreed :)",
        "createdAt" : "2018-03-05T22:10:08Z",
        "updatedAt" : "2018-03-06T06:44:21Z",
        "lastEditedBy" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "tags" : [
        ]
      }
    ],
    "commit" : "e88692e16aa56e97332a9e8ead1e04dd28bcdac8",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +61,65 @@   * }}}\n   */\n  def runCancelable[A](fa: F[A])(cb: Either[Throwable, A] => IO[Unit]): IO[IO[Unit]]\n}\n"
  }
]