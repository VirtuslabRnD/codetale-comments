[
  {
    "id" : "a9b0c479-0fe1-48e8-8007-958226f1511e",
    "prId" : 2132,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/2132#pullrequestreview-710777502",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e5e31ef-1565-47e0-8dbe-5701f3115aee",
        "parentId" : null,
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "Does it matter if we change this to `IO.asyncForIO.foreverM[A, Nothing](this)`?",
        "createdAt" : "2021-07-19T23:10:41Z",
        "updatedAt" : "2021-07-19T23:35:10Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      },
      {
        "id" : "f21a8e15-0167-4654-9a7f-de0bb2a99d96",
        "parentId" : "8e5e31ef-1565-47e0-8dbe-5701f3115aee",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "It's probably slightly faster to do so in fact. Very slightly.",
        "createdAt" : "2021-07-20T16:13:34Z",
        "updatedAt" : "2021-07-20T16:13:34Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c299b1fe0721a4125ed7607c90e1d957bbc9578",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +858,862 @@   * }}}\n   */\n  def foreverM: IO[Nothing] = Monad[IO].foreverM[A, Nothing](this)\n\n  def whileM[G[_]: Alternative, B >: A](p: IO[Boolean]): IO[G[B]] ="
  },
  {
    "id" : "c86be8a5-5294-4ab6-9a64-400b890a4d04",
    "prId" : 2107,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/2107#pullrequestreview-704675500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ccb3b59-b7d4-4ac4-a09a-273f1874acc3",
        "parentId" : null,
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "Doesn't `onCancel` on the `finalized` value force this method to be evaluated at least once? Should we go for a `val`?",
        "createdAt" : "2021-07-13T00:17:19Z",
        "updatedAt" : "2021-07-13T00:17:20Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      },
      {
        "id" : "4f94f1b7-2680-4caa-9266-a8e8d5f3337c",
        "parentId" : "9ccb3b59-b7d4-4ac4-a09a-273f1874acc3",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "I think the `val` wouldn't change anything. We would still need multiple versions of it since we're passing different outcomes.",
        "createdAt" : "2021-07-13T01:21:57Z",
        "updatedAt" : "2021-07-13T01:21:58Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "715bc53c-1480-43f1-9bbf-6a50d3e82156",
        "parentId" : "9ccb3b59-b7d4-4ac4-a09a-273f1874acc3",
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "You are right, I missed that detail.",
        "createdAt" : "2021-07-13T01:48:36Z",
        "updatedAt" : "2021-07-13T01:48:36Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "966a4e6b94e9c503b2d7f08eb02be5984053a393",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1155,1159 @@    IO.uncancelable { poll =>\n      acquire(poll).flatMap { a =>\n        def fin(oc: OutcomeIO[B]) = IO.uncancelable(_ => release(a, oc))\n\n        val finalized = poll(IO.defer(use(a))).onCancel(fin(Outcome.canceled))"
  },
  {
    "id" : "e51b3bd4-0c06-4ec5-97b9-fca2e1595fe9",
    "prId" : 2065,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/2065#pullrequestreview-687753174",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2bab593-e7e8-4be8-a82f-1358014040a0",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "I think this is actually not going to be that helpful because it's going to trace the `async` implementation (which is generic), and not the specific *call site*. I think we probably need something a bit like what @RaasAhsan did in CE2 to support tracing of `>>` and similar.",
        "createdAt" : "2021-06-18T20:23:05Z",
        "updatedAt" : "2021-06-18T20:23:09Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "df942f88-7c87-4eeb-8ae7-367dcabeb029",
        "parentId" : "c2bab593-e7e8-4be8-a82f-1358014040a0",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Actually I think we can make it even simpler actually. Rather than `IO.async` delegating to `IO.cont`, it can simply create its own `IOCont` based on the `Class` of the registration function. Should solve the problem.",
        "createdAt" : "2021-06-18T21:46:50Z",
        "updatedAt" : "2021-06-18T21:46:50Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "e8d97d3e-d157-4332-bb1e-98eca3c61ccd",
        "parentId" : "c2bab593-e7e8-4be8-a82f-1358014040a0",
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "Let me show you a trace.",
        "createdAt" : "2021-06-18T21:55:46Z",
        "updatedAt" : "2021-06-18T21:55:46Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      },
      {
        "id" : "9b2009e1-baaa-4961-876d-9d436e5602b0",
        "parentId" : "c2bab593-e7e8-4be8-a82f-1358014040a0",
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "```scala\r\npackage blah\r\n\r\nimport cats.effect._\r\n\r\nobject Example extends IOApp.Simple {\r\n\r\n  def run: IO[Unit] =\r\n    (IO(println(\"started\")) >> IO.async_[Unit](_ => throw new RuntimeException())).onCancel(IO(println(\"canceled\")))\r\n}\r\n```\r\n\r\n```\r\nException in thread \"main\" java.lang.RuntimeException\r\n\tat blah.Example$.$anonfun$run$3(Example.scala:24)\r\n\tat async_ @ blah.Example$.$anonfun$run$2(Example.scala:24)\r\n\tat apply @ blah.Example$.run(Example.scala:24)\r\n\tat >> @ blah.Example$.run(Example.scala:24)\r\n\tat run$ @ blah.Example$.run(Example.scala:21)\r\n```",
        "createdAt" : "2021-06-18T21:58:05Z",
        "updatedAt" : "2021-06-18T21:58:37Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      },
      {
        "id" : "0d959997-43dd-42d1-9d4a-c9147374b83e",
        "parentId" : "c2bab593-e7e8-4be8-a82f-1358014040a0",
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "Although you are right that this doesn't really work as the `body.getClass` is always the same key.",
        "createdAt" : "2021-06-18T22:00:21Z",
        "updatedAt" : "2021-06-18T22:00:21Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      },
      {
        "id" : "be4fdad8-2c87-4e2d-9ec9-21a44bce3c32",
        "parentId" : "c2bab593-e7e8-4be8-a82f-1358014040a0",
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "Also, you forget that Raas did write CE3's implementation. 😄 ",
        "createdAt" : "2021-06-18T22:21:26Z",
        "updatedAt" : "2021-06-18T22:21:53Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "6382a6fa6b349e967be2b623bbda9d9ca942ca92",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +905,909 @@   */\n  def cont[K, R](body: Cont[IO, K, R]): IO[R] =\n    IOCont[K, R](body, Tracing.calculateTracingEvent(body.getClass))\n\n  def executionContext: IO[ExecutionContext] = ReadEC"
  },
  {
    "id" : "68a934b0-18da-4905-9322-be9e862eba4b",
    "prId" : 1632,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1632#pullrequestreview-589087709",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aec5f0ea-cb2c-4d8b-a3e0-d0b43c9ec01c",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "This would probably need a similar change to what Daniel mentioned below:\r\n\r\n```suggestion\r\n  def startOn(ec: ExecutionContext): IO[FiberIO[A @uncheckedVariance]] = evalOn(ec).start\r\n```",
        "createdAt" : "2021-02-07T18:45:06Z",
        "updatedAt" : "2021-02-15T22:24:38Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "55b613e7-5f72-4b70-b1cd-6473d19a9acb",
        "parentId" : "aec5f0ea-cb2c-4d8b-a3e0-d0b43c9ec01c",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "ignore ;)",
        "createdAt" : "2021-02-11T23:56:33Z",
        "updatedAt" : "2021-02-15T22:24:38Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "afe985a0f47c581cc7bf3de02f742b26fe4d60a3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +85,89 @@  def evalOn(ec: ExecutionContext): IO[A] = IO.EvalOn(this, ec)\n\n  def startOn(ec: ExecutionContext): IO[FiberIO[A @uncheckedVariance]] = start.evalOn(ec)\n\n  def backgroundOn(ec: ExecutionContext): ResourceIO[IO[OutcomeIO[A @uncheckedVariance]]] ="
  },
  {
    "id" : "aa72b996-1d7a-4476-9594-d2b48e0ffba4",
    "prId" : 1572,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1572#pullrequestreview-560625485",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1746afcb-3de7-495c-99e0-47e58e281ee0",
        "parentId" : null,
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "This should work, but it's a bit weird to me because `bracketFull` is the more general operation. I would define `bracketFull` in the `IO` companion object (with the side channel reporting details) and use that here. Then `bracketCase` doesn't need to be overrided anymore, and the `bracket*` methods on `IO` can just forward to the `Async[IO]` instance for consistency",
        "createdAt" : "2021-01-01T17:54:14Z",
        "updatedAt" : "2021-01-02T07:28:44Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      },
      {
        "id" : "2e50b73c-71c9-4eed-8ef7-c0122da364a7",
        "parentId" : "1746afcb-3de7-495c-99e0-47e58e281ee0",
        "authorId" : "880bb4f2-a82a-487e-8c6b-c60b6dca8171",
        "body" : "Thank you for your comment. move `bracketFull` in `IO` companion object and use in `IO` abstract class. And use it in `Async[IO]` instance. Can you review it again?",
        "createdAt" : "2021-01-02T07:56:05Z",
        "updatedAt" : "2021-01-02T07:56:06Z",
        "lastEditedBy" : "880bb4f2-a82a-487e-8c6b-c60b6dca8171",
        "tags" : [
        ]
      }
    ],
    "commit" : "3267731ea2d083e0de3a27a2dc631055fdc3b587",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +539,543 @@      ioa.onCancel(fin)\n\n    override def bracketFull[A, B](acquire: Poll[IO] => IO[A])(use: A => IO[B])(\n        release: (A, Outcome[IO, Throwable, B]) => IO[Unit]): IO[B] =\n      IO.bracketFull(acquire)(use)(release)"
  },
  {
    "id" : "ec2c19c3-363b-481c-8edd-9aa622f9beef",
    "prId" : 1572,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1572#pullrequestreview-560651384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d32a598a-4828-44ea-8f6d-9fc397127950",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Random thought that doesn't need to be handled in this PR: shouldn't we just put this side-channeling behavior into `IO#onError` itself, rather than having it live in `bracketFull`?",
        "createdAt" : "2021-01-02T19:23:13Z",
        "updatedAt" : "2021-01-02T19:23:24Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "3267731ea2d083e0de3a27a2dc631055fdc3b587",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +368,372 @@            IO.executionContext.flatMap(ec => IO(ec.reportFailure(t)))\n          }\n        }\n        handled.flatMap(b => safeRelease(a, Outcome.Succeeded(IO.pure(b))).as(b))\n      }"
  },
  {
    "id" : "f5670a91-49ac-4053-a204-715e78b890b2",
    "prId" : 1549,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1549#pullrequestreview-558903650",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62544d3c-7f1a-419b-af9a-e4cec0067bdd",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Do we side-channel errors that are caught in `onCancel`?",
        "createdAt" : "2020-12-27T04:13:14Z",
        "updatedAt" : "2020-12-27T04:13:14Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "a82fbc3f-870c-4312-b193-60acd14ed2a8",
        "parentId" : "62544d3c-7f1a-419b-af9a-e4cec0067bdd",
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "yup, we do for the overrided `IO` method. this brings up an interesting question for the `MonadCancel` implementation though -- should we assume errors in the cancel path are swallowed, or should we proactively catch errors there?",
        "createdAt" : "2020-12-27T04:49:30Z",
        "updatedAt" : "2020-12-27T04:49:31Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      }
    ],
    "commit" : "221918cf447fa88e459ac2da1ddef6ace6dd5a27",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +83,87 @@    val safeRelease: (A, OutcomeIO[B]) => IO[Unit] =\n      (a, out) => IO.uncancelable(_ => release(a, out))\n\n    IO.uncancelable { poll =>\n      flatMap { a =>"
  },
  {
    "id" : "cf10c79b-e6d7-4920-b358-5c5b1034aca4",
    "prId" : 1069,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1069#pullrequestreview-464868006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3eb6b5f-83e5-4971-b418-8dcd5e57f660",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Shouldn't we also override `redeemWith`?",
        "createdAt" : "2020-08-11T03:07:36Z",
        "updatedAt" : "2020-08-13T16:18:35Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "6b53aa7f-fccb-4c09-bf82-7861136c7319",
        "parentId" : "b3eb6b5f-83e5-4971-b418-8dcd5e57f660",
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "Good catch.",
        "createdAt" : "2020-08-11T08:46:12Z",
        "updatedAt" : "2020-08-13T16:18:35Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "08dfc336c1d833ee3bc6d9f8fd5627262291cb93",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +547,551 @@    override def void[A](ioa: IO[A]): IO[Unit] = ioa.void\n\n    override def redeem[A, B](fa: IO[A])(recover: Throwable => B, f: A => B): IO[B] =\n      fa.redeem(recover, f)\n"
  },
  {
    "id" : "f30af599-9821-4528-9b77-d0eb99736453",
    "prId" : 1069,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1069#pullrequestreview-467263261",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a61ba87-085d-4774-a8f0-55fec3e71981",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Oh lol",
        "createdAt" : "2020-08-14T02:05:12Z",
        "updatedAt" : "2020-08-14T02:06:05Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "08dfc336c1d833ee3bc6d9f8fd5627262291cb93",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +604,608 @@  }\n\n  private[effect] final case class OnCancel[+A](ioa: IO[A], fin: IO[Unit]) extends IO[A] {\n    def tag = 10\n  }"
  },
  {
    "id" : "120988d6-0646-48e6-8256-83ffc8b6dbf4",
    "prId" : 984,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/984#pullrequestreview-454558121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c1e2a12-d57e-44cc-a190-dbdbc79a2595",
        "parentId" : null,
        "authorId" : "47fc4a25-15fa-4e62-ad64-2ba7ec420d80",
        "body" : "What's the usage of `tag` (curious and I don't have access to source right now)",
        "createdAt" : "2020-07-23T20:54:25Z",
        "updatedAt" : "2020-07-23T20:54:26Z",
        "lastEditedBy" : "47fc4a25-15fa-4e62-ad64-2ba7ec420d80",
        "tags" : [
        ]
      },
      {
        "id" : "0bb6dfb8-7aa9-47bc-8720-0f1df9a49bec",
        "parentId" : "1c1e2a12-d57e-44cc-a190-dbdbc79a2595",
        "authorId" : "47fc4a25-15fa-4e62-ad64-2ba7ec420d80",
        "body" : "Ah nvm, I just saw it below. It's used in a pattern match when interpreting the IO",
        "createdAt" : "2020-07-23T20:57:23Z",
        "updatedAt" : "2020-07-23T20:57:24Z",
        "lastEditedBy" : "47fc4a25-15fa-4e62-ad64-2ba7ec420d80",
        "tags" : [
        ]
      },
      {
        "id" : "86a9a936-b310-4819-a746-16feb5503a7e",
        "parentId" : "1c1e2a12-d57e-44cc-a190-dbdbc79a2595",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Yep! It gets compiled to a `tableswitch`, which is vastly faster than the corresponding `if`/`else` chain that you would normally get out of pattern matching.",
        "createdAt" : "2020-07-23T23:22:50Z",
        "updatedAt" : "2020-07-23T23:22:50Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2b30589d6f10153a6ca6a13e55fb57e4fe2695e",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +543,547 @@\n  private[effect] final case class Blocking[+A](hint: Sync.Type, thunk: () => A) extends IO[A] {\n    def tag = 2\n  }\n"
  },
  {
    "id" : "52c4d6ed-ad2e-4707-8687-617e6a5839e1",
    "prId" : 960,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/960#pullrequestreview-451089956",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5324a8b-600a-4297-bf4b-b2d2774b7ae8",
        "parentId" : null,
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "Seems like we could have a `bothOutcome` in a similar fashion to `raceOutcome`",
        "createdAt" : "2020-07-19T00:28:25Z",
        "updatedAt" : "2020-07-22T00:36:38Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1e155d2ee34e5421745266ed3c9553b8fbcc993",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +51,55 @@    }\n\n  def both[B](that: IO[B]): IO[(A, B)] =\n    racePair(that).flatMap {\n      case Left((oc, f)) =>"
  },
  {
    "id" : "b6518c8a-6050-458c-8609-d3210ad01cd7",
    "prId" : 945,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/945#pullrequestreview-449944443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b1f8bc3-0b98-4acf-b9bf-e6ea2dd5cb4b",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "I think these should also be copied to `Temporal`. I want to make sure we try to keep things as much in sync as we can.",
        "createdAt" : "2020-07-16T14:36:11Z",
        "updatedAt" : "2020-07-16T15:02:06Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "f66aa837-153b-464e-bbde-06ebb9ecfdb1",
        "parentId" : "9b1f8bc3-0b98-4acf-b9bf-e6ea2dd5cb4b",
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "I think once they're in `Temporal`, we should also just be able to call out to instance for `IO`",
        "createdAt" : "2020-07-16T15:00:37Z",
        "updatedAt" : "2020-07-16T15:02:06Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      },
      {
        "id" : "8d55e950-2068-43a3-9796-a8a40ebe2008",
        "parentId" : "9b1f8bc3-0b98-4acf-b9bf-e6ea2dd5cb4b",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Yes absolutely, though I like having copies of the combinators on `IO` itself for reasons for discoverability in documentation, IDEs, and error messages.",
        "createdAt" : "2020-07-16T15:09:17Z",
        "updatedAt" : "2020-07-16T15:09:17Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a6141685400bf971be64ab56ddab2d22ac2ce59",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +104,108 @@      case Right(_) => fallback\n      case Left(value) => IO.pure(value)\n    }\n\n  def productL[B](that: IO[B]): IO[A] ="
  },
  {
    "id" : "20fa15d4-1ef7-4b5d-b806-c1933a39e1a5",
    "prId" : 915,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/915#pullrequestreview-446820405",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a954edfb-2fa5-45f4-9063-1558564cef8d",
        "parentId" : null,
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "I don't agree. \r\n\r\nWhile a similar effect can be achieved with `Concurrent.timeout`, they operate at different levels of the run-loop. \r\n\r\n`unsafeRunTimed` exists because doing `unsafeRunSync` on top of a thread that isn't meant to support blocking operations is very unsafe. In fact I would say that `unsafeRunSync` without a `timeout` parameter shouldn't have been added to the API IMO, the reason for why we have it is because we obviously needed to express synchronous operations and we didn't have `SyncIO` back then.\r\n\r\n> while permitting proper resource cleanup and subsequent error handling\r\n\r\nSure, this is true, but you can say the same thing about `unsafeRunSync`. Ideally you'd use `IOApp`. But if not using `IOApp`, then `unsafeRunTimed` is probably better for async operations than `unsafeRunSync`. ",
        "createdAt" : "2020-07-11T12:35:55Z",
        "updatedAt" : "2020-07-11T12:35:55Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      },
      {
        "id" : "42f57296-fae8-4157-84e0-0917f65ff944",
        "parentId" : "a954edfb-2fa5-45f4-9063-1558564cef8d",
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "Ah, I now see the comment that it is replacing, sorry 😅\r\n\r\nOK, it's a good idea to mention `Concurrent.timeout`, but maybe as a separate paragraph?",
        "createdAt" : "2020-07-11T12:38:51Z",
        "updatedAt" : "2020-07-11T12:38:51Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      },
      {
        "id" : "15b08765-cbdd-49eb-9955-b574a001d452",
        "parentId" : "a954edfb-2fa5-45f4-9063-1558564cef8d",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "I actually think it's pretty reasonable to have it in this paragraph. It emphasizes that `unsafeRunTimed`'s sole purpose is to implement tests and the like, without getting into the resource management resources why this is the case. Users who find this function will *most* of the time actually be looking for `Concurrent#timeout`, so it doesn't seem that crazy to mention it.",
        "createdAt" : "2020-07-11T18:27:25Z",
        "updatedAt" : "2020-07-11T18:27:25Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "de91eb389365139de94ddfebc4d9801670f073ba",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +320,324 @@   * resource cleanup and subsequent error handling. `unsafeRunTimed`\n   * should only be used for ''testing'', in cases where you want timeouts to\n   * cause immediate termination of the cats-effect runtime itself.\n   *\n   * @see [[unsafeRunSync]]"
  },
  {
    "id" : "d045e2cd-27ff-471d-9cf4-6fd0412c1d51",
    "prId" : 911,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/911#pullrequestreview-443254302",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bed6364b-3ae4-4fea-8906-66e32b022adf",
        "parentId" : null,
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "💯 ",
        "createdAt" : "2020-07-06T17:06:20Z",
        "updatedAt" : "2020-07-11T18:35:51Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      }
    ],
    "commit" : "11095f3ade81d210f681ceeeb6c55e2c3c66a768",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +43,47 @@    bracketCase(use)((a, _) => release(a))\n\n  def bracketCase[B](use: A => IO[B])(release: (A, Outcome[IO, Throwable, B]) => IO[Unit]): IO[B] =\n    IO uncancelable { poll =>\n      flatMap { a =>"
  },
  {
    "id" : "04333dd0-606b-4fb4-96e6-36300ae5a088",
    "prId" : 911,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/911#pullrequestreview-446711251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bddbf493-9e10-4fba-947c-7771adefa9a1",
        "parentId" : null,
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "Do we need to start the mask from `Int.MinValue` to take advantage of the whole integer space",
        "createdAt" : "2020-07-10T21:06:12Z",
        "updatedAt" : "2020-07-11T18:35:51Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      },
      {
        "id" : "cdc145e0-05ab-4959-958a-82018b59fe3d",
        "parentId" : "bddbf493-9e10-4fba-947c-7771adefa9a1",
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "disregard, it'll just overflow :)",
        "createdAt" : "2020-07-10T21:16:47Z",
        "updatedAt" : "2020-07-11T18:35:51Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      },
      {
        "id" : "37020f5e-14cb-4656-a922-9366223b3913",
        "parentId" : "bddbf493-9e10-4fba-947c-7771adefa9a1",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Yeah I'm just using it as a ring, so it doesn't matter where we are on that ring. Starting at 0 just because it's like, a randomly convenient place to start.",
        "createdAt" : "2020-07-10T21:29:47Z",
        "updatedAt" : "2020-07-11T18:35:51Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "11095f3ade81d210f681ceeeb6c55e2c3c66a768",
    "line" : 200,
    "diffHunk" : "@@ -1,1 +198,202 @@\n    if (shift)\n      ec.execute(() => fiber.run(this, ec, 0))\n    else\n      fiber.run(this, ec, 0)"
  },
  {
    "id" : "c452af7f-7590-42b2-8ead-85c2697f5aab",
    "prId" : 854,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/854#pullrequestreview-408702099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f574c829-85ea-4231-aa5f-7abfc44881f2",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "`new` is actually faster and probably should be preferred for internal code whenever possible",
        "createdAt" : "2020-05-09T21:31:47Z",
        "updatedAt" : "2020-07-11T18:55:45Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "b7db07b8-89fd-4861-b713-6126cd20bb40",
        "parentId" : "f574c829-85ea-4231-aa5f-7abfc44881f2",
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "Ahh that's right, this goes through an `apply` method if I'm not mistaken :) . I'll try to find other stragglers",
        "createdAt" : "2020-05-10T04:09:04Z",
        "updatedAt" : "2020-07-11T18:55:45Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ba1b112106c96a7175793ef9c80ec6514762adb",
    "line" : 356,
    "diffHunk" : "@@ -1,1 +1661,1665 @@  final private[effect] case class Map[E, +A](source: IO[E], f: E => A, trace: AnyRef) extends IO[A] with (E => IO[A]) {\n    override def apply(value: E): IO[A] =\n      Pure(f(value))\n  }\n"
  },
  {
    "id" : "94c43840-1cea-4535-99de-95a36ff794b4",
    "prId" : 854,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/854#pullrequestreview-443532166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee1dde74-df96-4cf9-aa17-e1996d1f51b7",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Same as with `Delay`",
        "createdAt" : "2020-07-07T03:13:59Z",
        "updatedAt" : "2020-07-11T18:55:45Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ba1b112106c96a7175793ef9c80ec6514762adb",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +1145,1149 @@   */\n  def suspend[A](thunk: => IO[A]): IO[A] = {\n    val nextIo = Suspend(() => thunk)\n    if (isFullStackTracing) {\n      IOTracing.decorated(nextIo, 2)"
  },
  {
    "id" : "b47518df-f044-4911-9bfd-622aa3405d84",
    "prId" : 854,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/854#pullrequestreview-446107747",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb988bcd-cdc9-4777-96d7-e3b42ad9c1d6",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "It's worth commenting why we're using `AnyRef` here rather than `Trace`. Oh also, out of curiosity, have you measured whether the performance impact from using `Trace` vs `AnyRef` is specific to C2? More specifically, does it also have the same impact on GraalVM?",
        "createdAt" : "2020-07-07T14:21:18Z",
        "updatedAt" : "2020-07-11T18:55:45Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "5ebe9687-19d6-443e-9e48-566324e743fb",
        "parentId" : "cb988bcd-cdc9-4777-96d7-e3b42ad9c1d6",
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "Good point, I'll check Graal out",
        "createdAt" : "2020-07-08T04:33:41Z",
        "updatedAt" : "2020-07-11T18:55:45Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      },
      {
        "id" : "052ced1b-32ee-4db7-b8bc-f95412a4ac9c",
        "parentId" : "cb988bcd-cdc9-4777-96d7-e3b42ad9c1d6",
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "So I can't really tell what the situation is with the graal compiler. There is a high variance in throughput between individual benchmark runs (anywhere from 6500 to 6800), so I can't make any useful conclusions. The `AnyRef` still consistently gives better performance on C2 though",
        "createdAt" : "2020-07-10T04:01:16Z",
        "updatedAt" : "2020-07-11T18:55:45Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ba1b112106c96a7175793ef9c80ec6514762adb",
    "line" : 349,
    "diffHunk" : "@@ -1,1 +1656,1660 @@\n  /** Corresponds to [[IO.flatMap]]. */\n  final private[effect] case class Bind[E, +A](source: IO[E], f: E => IO[A], trace: AnyRef) extends IO[A]\n\n  /** Corresponds to [[IO.map]]. */"
  },
  {
    "id" : "6d00cdf0-d08f-4ed1-ac0f-7cdc1c297415",
    "prId" : 804,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/804#pullrequestreview-366885301",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43a3ca69-0403-4621-9c8e-90c8811dca0f",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Is it worth also adding `>>`? It annoys me that one is lazy and the other isn't, but breaking with Cats on this would be a nightmare from a usability standpoint.",
        "createdAt" : "2020-03-01T18:57:15Z",
        "updatedAt" : "2020-03-01T21:41:49Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "efcad1a8-d4ce-4681-ad79-bd5ed4d0b697",
        "parentId" : "43a3ca69-0403-4621-9c8e-90c8811dca0f",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "I don't have a strong preference - whatever others think. @rossabaker?",
        "createdAt" : "2020-03-01T19:23:54Z",
        "updatedAt" : "2020-03-01T21:41:49Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "d2726db4-3d02-4cdc-aae8-6da28368248b",
        "parentId" : "43a3ca69-0403-4621-9c8e-90c8811dca0f",
        "authorId" : "a680c99b-0d47-47f6-a175-cad1562111ac",
        "body" : "I would rather have `>>` only over `*>` which is common point of confusion",
        "createdAt" : "2020-03-01T20:03:14Z",
        "updatedAt" : "2020-03-01T21:41:49Z",
        "lastEditedBy" : "a680c99b-0d47-47f6-a175-cad1562111ac",
        "tags" : [
        ]
      },
      {
        "id" : "b54f3d84-87e9-4423-9689-dcfb90aa95f4",
        "parentId" : "43a3ca69-0403-4621-9c8e-90c8811dca0f",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Except we don't have a `<<` :-(\r\n\r\nAgreed it's a super-common point of confusion, made far worse by the fact that one is lazy and the other isn't.",
        "createdAt" : "2020-03-01T20:25:03Z",
        "updatedAt" : "2020-03-01T21:41:49Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "77f4c984-fb05-4ed5-a986-7998d6cb9bb2",
        "parentId" : "43a3ca69-0403-4621-9c8e-90c8811dca0f",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "I think for new users we could just as well advise using `*> IO.suspend(...)` instead of `>>`. I suggest we wait and see how many people complain about the lack of `>>` in the class :)",
        "createdAt" : "2020-03-01T20:43:29Z",
        "updatedAt" : "2020-03-01T21:41:49Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "6129e5e3-3202-4cd9-b549-2861131afd99",
        "parentId" : "43a3ca69-0403-4621-9c8e-90c8811dca0f",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "> I suggest we wait and see how many people complain about the lack of >> in the class :)\r\n\r\nI'm okay with this approach. Lazily-evaluated API surface area.",
        "createdAt" : "2020-03-01T20:44:39Z",
        "updatedAt" : "2020-03-01T21:41:49Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "3162cf6c733fe6e345ca462f0ce0c3127ee72dd2",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +757,761 @@   * If the source fails, the other action won't run.\n   * */\n  def *>[B](another: IO[B]): IO[B] = flatMap(_ => another)\n\n  /**"
  },
  {
    "id" : "9ac93c44-6136-49e3-adca-0c592c060e22",
    "prId" : 729,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/729#pullrequestreview-335611142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47ef9e5c-775a-4b4a-8b1f-fe78f8928c0c",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Curiosity: why is this being organized in this fashion? I mean, `implicit val`s being declared as such, while the `def`s are declared private and non-implicit and just delegated by the implicit version?",
        "createdAt" : "2019-12-21T16:01:11Z",
        "updatedAt" : "2019-12-21T16:02:41Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "d36d5035-a6ba-4688-b3fc-990ac23ddd2f",
        "parentId" : "47ef9e5c-775a-4b4a-8b1f-fe78f8928c0c",
        "authorId" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "body" : "I assumed it had something to do with binary compability, I took a look at the git blame and didn't think about it too much, but it's probably not necessary here.",
        "createdAt" : "2019-12-21T16:06:48Z",
        "updatedAt" : "2019-12-21T16:06:48Z",
        "lastEditedBy" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4ef92808e447c8a8221d8048a89e2911496799c",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +744,748 @@  object Par extends IONewtype\n\n  private[effect] def ioParAlign(implicit cs: ContextShift[IO]): Align[IO.Par] = new Align[IO.Par] {\n    import IO.Par.{unwrap, apply => par}\n"
  },
  {
    "id" : "c580837f-c772-45d1-a0dc-a2c508688f10",
    "prId" : 546,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/546#pullrequestreview-242401389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00d53319-c9de-4bce-ab5f-21f6b8ee97d1",
        "parentId" : null,
        "authorId" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "body" : "I'm trying to think of a new name for this function, so we can deprecate this and preserve our guarantees. `liftFuture`?",
        "createdAt" : "2019-05-27T02:36:03Z",
        "updatedAt" : "2019-05-27T02:37:07Z",
        "lastEditedBy" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "tags" : [
        ]
      },
      {
        "id" : "ee6083b3-a721-4268-8d93-096fe09dee01",
        "parentId" : "00d53319-c9de-4bce-ab5f-21f6b8ee97d1",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "`liftFuture` isn't bad. The thing I'm worried about though is exactly what I wrote in the description: anyone who is using `IO.fromFuture` who doesn't *already* have a `ContextShift[IO]` in scope (for use in an immediate follow-up `shift`) has a bug that they haven't uncovered. This change, breaking as it is, takes that silent bug and makes it a compile error.",
        "createdAt" : "2019-05-27T16:35:48Z",
        "updatedAt" : "2019-05-27T16:35:48Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "3d3a7a3c-912b-4381-9011-4f4894d97410",
        "parentId" : "00d53319-c9de-4bce-ab5f-21f6b8ee97d1",
        "authorId" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "body" : "I tend to assume `-deprecation` is on and fatal, though neither is the default.  I guess we can rationalize this as fixing a buggy signature.",
        "createdAt" : "2019-05-27T22:56:16Z",
        "updatedAt" : "2019-05-27T22:56:16Z",
        "lastEditedBy" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "tags" : [
        ]
      }
    ],
    "commit" : "73856a78ccc036ed9058a58ffcb0399904be3ebd",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1201,1205 @@   * @see [[IO#unsafeToFuture]]\n   */\n  def fromFuture[A](iof: IO[Future[A]])(implicit cs: ContextShift[IO]): IO[A] =\n    iof.flatMap(IOFromFuture.apply).flatMap(a => cs.shift.map(_ => a))\n"
  },
  {
    "id" : "cb720795-22e2-450a-802c-c074d9fb814a",
    "prId" : 546,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/546#pullrequestreview-246771518",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1b84de1-7ab4-4d45-8018-f64a91f08fa8",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "@djspiewak have you thought about using `guarantee` instead of `flatMap`? In the current shape it won't shift after failures, will it?",
        "createdAt" : "2019-06-06T16:12:55Z",
        "updatedAt" : "2019-06-06T16:12:55Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "c9b0685a-8ea9-49f7-a44e-a79318725f39",
        "parentId" : "e1b84de1-7ab4-4d45-8018-f64a91f08fa8",
        "authorId" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "body" : "`guarantee` does not work because you cannot access `a`. This is a use case where `continual` would be useful",
        "createdAt" : "2019-06-06T19:19:42Z",
        "updatedAt" : "2019-06-06T19:19:42Z",
        "lastEditedBy" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "tags" : [
        ]
      },
      {
        "id" : "d899446b-b223-442f-a9e4-528a0723ad34",
        "parentId" : "e1b84de1-7ab4-4d45-8018-f64a91f08fa8",
        "authorId" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "body" : "or maybe just make the thing `uncancelable` and use `attempt.flatMap` given that Futures are not cancelable anyway, that would be even better",
        "createdAt" : "2019-06-06T19:20:22Z",
        "updatedAt" : "2019-06-06T19:20:50Z",
        "lastEditedBy" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "tags" : [
        ]
      },
      {
        "id" : "c24af4ac-a78e-424d-b357-1a87a075fbdf",
        "parentId" : "e1b84de1-7ab4-4d45-8018-f64a91f08fa8",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Actually `guarantee` works because it's already a `tap`, so we don't really need the `a`.",
        "createdAt" : "2019-06-06T19:31:06Z",
        "updatedAt" : "2019-06-06T19:31:06Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "73856a78ccc036ed9058a58ffcb0399904be3ebd",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1202,1206 @@   */\n  def fromFuture[A](iof: IO[Future[A]])(implicit cs: ContextShift[IO]): IO[A] =\n    iof.flatMap(IOFromFuture.apply).flatMap(a => cs.shift.map(_ => a))\n\n  /**"
  },
  {
    "id" : "84d0a91f-1ffa-48e8-80b9-e4cda45f3263",
    "prId" : 258,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/258#pullrequestreview-125361730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efbde500-628c-4a48-9a66-9c7e41b45d90",
        "parentId" : null,
        "authorId" : "16272f97-0dd8-4e44-ab5f-3d06d9ac5a98",
        "body" : "`b/t`?",
        "createdAt" : "2018-06-02T09:55:39Z",
        "updatedAt" : "2018-06-02T09:55:39Z",
        "lastEditedBy" : "16272f97-0dd8-4e44-ab5f-3d06d9ac5a98",
        "tags" : [
        ]
      }
    ],
    "commit" : "04b0bf220bad55bf7132542e103d07410fa7887e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1070,1074 @@    Async { (conn, cb) =>\n      // Must create new connection, otherwise we can have a race\n      // condition b/t the bind continuation and `startCancelable` below\n      val conn2 = IOConnection()\n      conn.push(conn2.cancel)"
  },
  {
    "id" : "8a495f4a-e66f-4c4c-bc29-e53c149a1a40",
    "prId" : 232,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/232#pullrequestreview-121637946",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0cc775e-60fd-40ef-b072-be7667bde67b",
        "parentId" : null,
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "The nice thing about this is that we get to keep the old `ioEffect`, with the previous type.",
        "createdAt" : "2018-05-20T07:30:42Z",
        "updatedAt" : "2018-05-22T13:39:01Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      }
    ],
    "commit" : "010d6d7b9aa78233caabf17f7d14a68a4ea251f7",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +672,676 @@  implicit def ioSemigroup[A: Semigroup]: Semigroup[IO[A]] = new IOSemigroup[A]\n\n  implicit val ioEffect: Effect[IO] = new IOEffect\n\n  private[effect] class IOEffect extends Effect[IO] with StackSafeMonad[IO] {"
  },
  {
    "id" : "6fb8a444-5a63-4406-bf6c-c8f4515cd271",
    "prId" : 232,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/232#pullrequestreview-121639214",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6faa1fe9-3b94-40f1-b745-575973c6283c",
        "parentId" : null,
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "WTF I did not know there's a `StackSafeMonad` in Cats since Jun 20, 2017.",
        "createdAt" : "2018-05-20T07:31:10Z",
        "updatedAt" : "2018-05-22T13:39:01Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      },
      {
        "id" : "054caae4-224e-4ac1-8b30-13839c50192d",
        "parentId" : "6faa1fe9-3b94-40f1-b745-575973c6283c",
        "authorId" : "14fa9071-c3b2-4b1b-a7aa-9d7398bdbade",
        "body" : "It's not that known because it's not appearing in user code, I think. But yeah, it's nice to not copy-paste same `tailRecM` across all your types :)",
        "createdAt" : "2018-05-20T08:45:26Z",
        "updatedAt" : "2018-05-22T13:39:01Z",
        "lastEditedBy" : "14fa9071-c3b2-4b1b-a7aa-9d7398bdbade",
        "tags" : [
        ]
      }
    ],
    "commit" : "010d6d7b9aa78233caabf17f7d14a68a4ea251f7",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +674,678 @@  implicit val ioEffect: Effect[IO] = new IOEffect\n\n  private[effect] class IOEffect extends Effect[IO] with StackSafeMonad[IO] {\n    final override def pure[A](a: A): IO[A] =\n      IO.pure(a)"
  },
  {
    "id" : "2c29ed2f-729a-40c8-95d1-faad23b13259",
    "prId" : 195,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/195#pullrequestreview-117030715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30dcd988-b76e-43b9-a342-5e12334f2f4c",
        "parentId" : null,
        "authorId" : "b93e2985-c394-41e6-a036-b46320cfbf21",
        "body" : "What if we have a `Bind` on a `Pure` (or a chain of Binds on Pure).\r\nsomething like:\r\n```\r\n  case Bind(left, fn) => left.runSyncStep.flatMap {\r\n    case Left(io) => Left(Bind(io, fn))\r\n    case Right(a) => fn(a)\r\n}\r\n```",
        "createdAt" : "2018-05-01T22:25:59Z",
        "updatedAt" : "2018-05-02T13:27:53Z",
        "lastEditedBy" : "b93e2985-c394-41e6-a036-b46320cfbf21",
        "tags" : [
        ]
      },
      {
        "id" : "fb1986b0-b9ab-4a05-86e5-3c0801988c14",
        "parentId" : "30dcd988-b76e-43b9-a342-5e12334f2f4c",
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "That's taken care of by the `IORunLoop.step` implementation already. What it does is that it evaluates the `IO` until it hits a `Pure`, a `RaiseError` or an `Async` state (regrettable that we can't express this type in Scala).",
        "createdAt" : "2018-05-02T07:33:19Z",
        "updatedAt" : "2018-05-02T13:27:53Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      },
      {
        "id" : "9df2c09f-0b86-46f9-87ab-fd90b3ca6a46",
        "parentId" : "30dcd988-b76e-43b9-a342-5e12334f2f4c",
        "authorId" : "186a4cfe-39c6-4fe8-87fa-f281ab2a4141",
        "body" : "@johnynek Indeed, that is already handled. I've added a test in 18e60b7 which demonstrates this.\r\n\r\n@alexandru In this case I think we _could_ express this. We could have something like `private[effect] sealed abstract class StepResult[A] extends IO[A]`, and then `Pure`, `RaiseError` and `Async` could `extend` this class. And `step` would return a `StepResult[A]`. At least I think it could work. (But that's out of scope for this PR.)",
        "createdAt" : "2018-05-02T13:34:55Z",
        "updatedAt" : "2018-05-02T13:34:56Z",
        "lastEditedBy" : "186a4cfe-39c6-4fe8-87fa-f281ab2a4141",
        "tags" : [
        ]
      },
      {
        "id" : "fb9e9d52-b335-4ea7-b4fe-461c39e1370a",
        "parentId" : "30dcd988-b76e-43b9-a342-5e12334f2f4c",
        "authorId" : "b93e2985-c394-41e6-a036-b46320cfbf21",
        "body" : "👍 adding the StepResult type seems like a nice change to me. Could make this a total match.",
        "createdAt" : "2018-05-02T18:38:02Z",
        "updatedAt" : "2018-05-02T18:38:02Z",
        "lastEditedBy" : "b93e2985-c394-41e6-a036-b46320cfbf21",
        "tags" : [
        ]
      },
      {
        "id" : "af5a7c35-97af-4ad8-98e8-09ab569c634f",
        "parentId" : "30dcd988-b76e-43b9-a342-5e12334f2f4c",
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "Right, but I don’t think there’s any point in doing it as it’s an internal function.",
        "createdAt" : "2018-05-02T18:52:45Z",
        "updatedAt" : "2018-05-02T18:52:45Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      },
      {
        "id" : "0469af39-216d-4961-8512-02a06b24e6b1",
        "parentId" : "30dcd988-b76e-43b9-a342-5e12334f2f4c",
        "authorId" : "b93e2985-c394-41e6-a036-b46320cfbf21",
        "body" : "we would have been able to use it here for a benefit. What is the cost?",
        "createdAt" : "2018-05-02T18:58:49Z",
        "updatedAt" : "2018-05-02T18:58:49Z",
        "lastEditedBy" : "b93e2985-c394-41e6-a036-b46320cfbf21",
        "tags" : [
        ]
      },
      {
        "id" : "f88e0175-94d1-46a5-99e4-ad7b76893044",
        "parentId" : "30dcd988-b76e-43b9-a342-5e12334f2f4c",
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "Well, it introduces another package private interface, plus `case Async(_)` as last branch makes the bytecode heavier b/c the Scala compiler isn't smart enough.\r\n\r\nNothing major though, so if you want it, I'm fine with it.",
        "createdAt" : "2018-05-02T19:11:54Z",
        "updatedAt" : "2018-05-02T19:11:54Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      }
    ],
    "commit" : "18e60b7fbcf37449404d30aff69b6cb1f080f2c2",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +184,188 @@      case Pure(a) => Pure(Right(a))\n      case r @ RaiseError(_) => r\n      case async => Pure(Left(async))\n    }\n  }"
  },
  {
    "id" : "ef92ba6e-5cd9-43fa-9cca-7ac7838a3029",
    "prId" : 137,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/137#pullrequestreview-101685612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa2729e0-ea32-4ba5-a9e7-35bf513e1b08",
        "parentId" : null,
        "authorId" : "b93e2985-c394-41e6-a036-b46320cfbf21",
        "body" : "we could reuse this if we put this on Async.",
        "createdAt" : "2018-03-06T18:47:34Z",
        "updatedAt" : "2018-03-06T18:50:34Z",
        "lastEditedBy" : "b93e2985-c394-41e6-a036-b46320cfbf21",
        "tags" : [
        ]
      },
      {
        "id" : "105a1943-4901-4253-98ce-43fe7708e8ca",
        "parentId" : "aa2729e0-ea32-4ba5-a9e7-35bf513e1b08",
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "👍 but maybe after 0.10 or after we decide on the milestones?\r\n\r\nTried drafting a plan today, so the timeline I was thinking of looks like this: https://github.com/typelevel/cats-effect/milestones",
        "createdAt" : "2018-03-06T19:35:17Z",
        "updatedAt" : "2018-03-06T19:35:18Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      }
    ],
    "commit" : "03317769dbca865d725b3e148a2cc42139af70b4",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +648,652 @@   * A non-terminating `IO`, alias for `async(_ => ())`.\n   */\n  val never: IO[Nothing] = async(_ => ())\n\n  /**"
  },
  {
    "id" : "18be1fe3-3549-4ff7-a47a-6c7a0f871eaf",
    "prId" : 113,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/113#pullrequestreview-104754501",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25b844aa-4e35-4011-8aac-bdd45b1e5c05",
        "parentId" : null,
        "authorId" : "0f844b93-c74a-44d3-8df7-597a37ca5da2",
        "body" : "Might be nice to use `fold` here? Seems more concise and idiomatic.\r\n\r\n```scala\r\ndef fromEither[A](e: Either[Throwable, A]): IO[A] = e.fold(raiseError, pure)\r\n```",
        "createdAt" : "2018-03-16T04:09:01Z",
        "updatedAt" : "2018-04-16T07:51:33Z",
        "lastEditedBy" : "0f844b93-c74a-44d3-8df7-597a37ca5da2",
        "tags" : [
        ]
      },
      {
        "id" : "24eefc0f-3aec-4bb7-beef-9fa439ab03de",
        "parentId" : "25b844aa-4e35-4011-8aac-bdd45b1e5c05",
        "authorId" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "body" : "We recently got rid of all internal uses of `fold` since it incurs a moderate performance penalty :)",
        "createdAt" : "2018-03-16T13:01:24Z",
        "updatedAt" : "2018-04-16T07:51:33Z",
        "lastEditedBy" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "tags" : [
        ]
      },
      {
        "id" : "655b0ed2-2e68-4d74-9aa5-44fa4f942ef2",
        "parentId" : "25b844aa-4e35-4011-8aac-bdd45b1e5c05",
        "authorId" : "0f844b93-c74a-44d3-8df7-597a37ca5da2",
        "body" : "I was thinking about it after I commented this XD Are there any benchmarks to back this decision? I'm interested in seeing how big (percentage-wise) is the performance cost since at work we are also using folds everywhere instead of pattern matching.",
        "createdAt" : "2018-03-16T13:24:47Z",
        "updatedAt" : "2018-04-16T07:51:33Z",
        "lastEditedBy" : "0f844b93-c74a-44d3-8df7-597a37ca5da2",
        "tags" : [
        ]
      },
      {
        "id" : "0f7ff284-7128-4b8e-b087-640457ab1bf1",
        "parentId" : "25b844aa-4e35-4011-8aac-bdd45b1e5c05",
        "authorId" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "body" : "Here is an issue that includes some benchmarks: https://github.com/typelevel/cats/issues/1951",
        "createdAt" : "2018-03-16T13:27:55Z",
        "updatedAt" : "2018-04-16T07:51:33Z",
        "lastEditedBy" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "tags" : [
        ]
      },
      {
        "id" : "c6da99a0-da60-47d3-95dc-695e2a1418d4",
        "parentId" : "25b844aa-4e35-4011-8aac-bdd45b1e5c05",
        "authorId" : "0f844b93-c74a-44d3-8df7-597a37ca5da2",
        "body" : "Thanks a lot!",
        "createdAt" : "2018-03-17T02:50:15Z",
        "updatedAt" : "2018-04-16T07:51:34Z",
        "lastEditedBy" : "0f844b93-c74a-44d3-8df7-597a37ca5da2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bbbea7904d949d844d8009403c0bfe35c9f11de",
    "line" : 248,
    "diffHunk" : "@@ -1,1 +927,931 @@   * if it exists.\n   */\n  def fromEither[A](e: Either[Throwable, A]): IO[A] =\n    e match {\n      case Right(a) => pure(a)"
  },
  {
    "id" : "fed5eb5b-cb14-4d59-aff4-cc51268aa019",
    "prId" : 46,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/46#pullrequestreview-36910695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80a42255-9aa6-49f4-b202-c8488630736c",
        "parentId" : null,
        "authorId" : "e856ded5-89e9-4e09-937c-311c66e1f1a6",
        "body" : "Avoid constructing this in `Pure` and `RaiseError` cases? E.g., change to `def`",
        "createdAt" : "2017-05-08T23:09:18Z",
        "updatedAt" : "2017-05-08T23:19:55Z",
        "lastEditedBy" : "e856ded5-89e9-4e09-937c-311c66e1f1a6",
        "tags" : [
        ]
      },
      {
        "id" : "d662009b-f387-4f92-b9e4-630d75791dee",
        "parentId" : "80a42255-9aa6-49f4-b202-c8488630736c",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "What do you mean?",
        "createdAt" : "2017-05-08T23:22:20Z",
        "updatedAt" : "2017-05-08T23:22:20Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "c4645659-8d83-430b-aa93-978196feda7b",
        "parentId" : "80a42255-9aa6-49f4-b202-c8488630736c",
        "authorId" : "e856ded5-89e9-4e09-937c-311c66e1f1a6",
        "body" : "Change `val fe = ...` to `def fe = ...` to avoid constructing a new `AndThen` and then not using it in the `Pure` and `RaiseError` cases below.",
        "createdAt" : "2017-05-08T23:23:38Z",
        "updatedAt" : "2017-05-08T23:23:38Z",
        "lastEditedBy" : "e856ded5-89e9-4e09-937c-311c66e1f1a6",
        "tags" : [
        ]
      },
      {
        "id" : "904c1df4-4fc2-4947-b048-6234d80d8a5c",
        "parentId" : "80a42255-9aa6-49f4-b202-c8488630736c",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Oh right!  Github cut off the diff so I couldn't see.  I'll make that change on merge.",
        "createdAt" : "2017-05-08T23:25:11Z",
        "updatedAt" : "2017-05-08T23:25:11Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "17dabc4bcbf93af2093ba0ad0ca02672cf270070",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +143,147 @@   */\n  def attempt: IO[Either[Throwable, A]] = {\n    val fe = AndThen((a: A) => Pure(Right(a)), e => Pure(Left(e)))\n\n    this match {"
  }
]