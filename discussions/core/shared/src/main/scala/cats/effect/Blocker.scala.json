[
  {
    "id" : "d7fd23c8-2d9b-4a54-89a6-2b894b8d703a",
    "prId" : 560,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/560#pullrequestreview-247925321",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4e8aac3-2127-468b-80d1-962d1497fe20",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "No strong opinion on this one :)",
        "createdAt" : "2019-06-11T02:16:11Z",
        "updatedAt" : "2019-06-11T02:17:47Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "688c839b-9f51-4035-844c-b7b410c1980f",
        "parentId" : "d4e8aac3-2127-468b-80d1-962d1497fe20",
        "authorId" : "e856ded5-89e9-4e09-937c-311c66e1f1a6",
        "body" : "No strong reason not to either, and one benefit is improved binary compatibility (stuff that used to take `ExecutionContext` and now takes `Blocker` will be BC but not source compatible).",
        "createdAt" : "2019-06-11T02:20:12Z",
        "updatedAt" : "2019-06-11T02:20:12Z",
        "lastEditedBy" : "e856ded5-89e9-4e09-937c-311c66e1f1a6",
        "tags" : [
        ]
      },
      {
        "id" : "c6156d05-e7c8-4ecb-962f-1242c1bdbfa7",
        "parentId" : "d4e8aac3-2127-468b-80d1-962d1497fe20",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "Yeah, that makes sense. ",
        "createdAt" : "2019-06-11T02:21:41Z",
        "updatedAt" : "2019-06-11T02:21:41Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c2fed96fe10f021fd0b7571c82876c119dbd9d1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +31,35 @@ * Instances of this class should *not* be passed implicitly.\n */\nfinal class Blocker private (val blockingContext: ExecutionContext) extends AnyVal {\n\n  /**"
  },
  {
    "id" : "ee083a00-a88a-47d2-b708-6dde194799f9",
    "prId" : 556,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/556#pullrequestreview-247922983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "440fe177-b9c7-42f3-83b8-b98b8513b526",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "Why not a value class?",
        "createdAt" : "2019-06-11T01:51:45Z",
        "updatedAt" : "2019-06-11T01:51:45Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "332c92f0-c501-4139-9e98-817e67e7f002",
        "parentId" : "440fe177-b9c7-42f3-83b8-b98b8513b526",
        "authorId" : "e856ded5-89e9-4e09-937c-311c66e1f1a6",
        "body" : "No reason really - I tend to avoid value classes unless the performance gain is significant. In this case, it's a single extra allocation per app in most cases. :)",
        "createdAt" : "2019-06-11T01:55:11Z",
        "updatedAt" : "2019-06-11T01:55:11Z",
        "lastEditedBy" : "e856ded5-89e9-4e09-937c-311c66e1f1a6",
        "tags" : [
        ]
      },
      {
        "id" : "bbf8f6ad-abe9-4766-b7a2-5d822d96ca54",
        "parentId" : "440fe177-b9c7-42f3-83b8-b98b8513b526",
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "Good point, OTOH it'd make sense if old-style evalOn was removed. But since it's not being removed... :)",
        "createdAt" : "2019-06-11T02:05:11Z",
        "updatedAt" : "2019-06-11T02:05:12Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      },
      {
        "id" : "f6844b21-99b0-4105-a3a3-7ba0da468b80",
        "parentId" : "440fe177-b9c7-42f3-83b8-b98b8513b526",
        "authorId" : "e856ded5-89e9-4e09-937c-311c66e1f1a6",
        "body" : "See #560 btw",
        "createdAt" : "2019-06-11T02:08:59Z",
        "updatedAt" : "2019-06-11T02:08:59Z",
        "lastEditedBy" : "e856ded5-89e9-4e09-937c-311c66e1f1a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c073ef3bf940a2320c1c5500e59b64dc3bbac4d",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +31,35 @@ * Instances of this class should *not* be passed implicitly.\n */\nfinal class Blocker private (val blockingContext: ExecutionContext) {\n\n  /**"
  }
]