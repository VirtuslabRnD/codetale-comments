[
  {
    "id" : "c8819737-c19d-4d55-ba23-1df5b8a4f104",
    "prId" : 847,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/847#pullrequestreview-446903467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afb9cd47-1843-41d1-a0bd-7bd3e077d00b",
        "parentId" : null,
        "authorId" : "b93e2985-c394-41e6-a036-b46320cfbf21",
        "body" : "I'm concerned about returning `true` to mean the update *didn't* happen, if I am reading this correctly. `Ref.tryUpdate(f)` returns `true` to mean the update *did* happen. Both methods use the name `update` but use the Boolean in opposite directions to signal if an update took place.\r\n\r\nI know there are two different causes here:\r\n1. in tryUpdate, false means there was a race and we lost the race.\r\n2. in updateMaybe, false means after 0 or more retries f eventually returned `None`\r\n\r\nSince we haven't published a final version yet, it seems the horse isn't out of the barn yet.\r\n\r\nI would say, it would maybe be nice to have:\r\n```scala\r\nsealed abstract class Modified(val success: Boolean)\r\nobject Modified {\r\n  final case object Failure extends Modified(false)\r\n  final case object Success extends Modified(true)\r\n}\r\n```\r\nThen we could use `F[Modified]` here to be more clear about what `true` means.",
        "createdAt" : "2020-07-12T19:22:44Z",
        "updatedAt" : "2020-07-12T19:22:45Z",
        "lastEditedBy" : "b93e2985-c394-41e6-a036-b46320cfbf21",
        "tags" : [
        ]
      }
    ],
    "commit" : "cedd5a78714287cd291b695e36f73aab136c465f",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +296,300 @@     * Returns whether or not the update short-circuited.\n     */\n    def updateMaybe(f: A => Option[A])(implicit F: Monad[F]): F[Boolean] =\n      updateOr(a => f(a).toRight(())).map(_.isEmpty)\n"
  },
  {
    "id" : "7ef94941-cb2b-4b49-912a-094108c78128",
    "prId" : 827,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/827#pullrequestreview-404483263",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6711c31-7926-4e2c-823a-507d0c63f8ab",
        "parentId" : null,
        "authorId" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "body" : "I think we should briefly mention that updates in the parent that don't change the child won't disable the setter in the child's `access`.",
        "createdAt" : "2020-05-02T00:40:40Z",
        "updatedAt" : "2020-05-02T00:40:40Z",
        "lastEditedBy" : "df537f5b-c150-4710-8eb4-40b8b59c3bcc",
        "tags" : [
        ]
      }
    ],
    "commit" : "d02a15a9dee5fd06e7e9d947b9beeb2df5ff0aef",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +228,232 @@\n  /**\n   * Creates an instance focused on a component of another Ref's value.\n   * Delegates every get and modification to underlying Ref, so both instances are always in sync.\n   *"
  },
  {
    "id" : "9cbbec26-477b-4bce-a298-773abb9bfe6c",
    "prId" : 665,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/665#pullrequestreview-297878676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0938701e-3de0-41fd-bb60-e700faeb4c5a",
        "parentId" : null,
        "authorId" : "aa5c76be-5eb1-48db-9593-f603ecc53f20",
        "body" : "https://github.com/typelevel/cats-effect/issues/666 ðŸ˜¢ ",
        "createdAt" : "2019-10-07T01:53:47Z",
        "updatedAt" : "2019-10-07T01:53:48Z",
        "lastEditedBy" : "aa5c76be-5eb1-48db-9593-f603ecc53f20",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1fde03fb7145cb2b12d931ef544baa4dcb99df8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +182,186 @@   *\n   *   class Counter private () {\n   *     private val count = Ref.unsafe[IO, Int](0)\n   *\n   *     def increment: IO[Unit] = count.update(_ + 1)"
  },
  {
    "id" : "510b02ac-5faf-4080-ba62-c3a3bf42d82d",
    "prId" : 392,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/392#pullrequestreview-164739973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06c44ab2-a2cb-4876-abe5-f76032153605",
        "parentId" : null,
        "authorId" : "855e0d4a-4c1d-49a7-8fd0-9333d518b4d7",
        "body" : "I wonder also if that temporary `Functor[F[(A, A => ?]]` should be cached for performance reasons",
        "createdAt" : "2018-10-15T14:44:02Z",
        "updatedAt" : "2018-11-21T13:37:13Z",
        "lastEditedBy" : "855e0d4a-4c1d-49a7-8fd0-9333d518b4d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbc6b3ef1a45396c1017facfd7feecf1dfff9b1d",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +272,276 @@\n    override def access: G[(A, A => G[Boolean])] =\n      trans(F.compose[(A, ?)].compose[A => ?].map(underlying.access)(trans(_)))\n  }\n"
  },
  {
    "id" : "9c7d18e2-3c6b-4e56-97c4-c6f423fd27d6",
    "prId" : 211,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/211#pullrequestreview-120170528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26b16f21-5f31-48cb-a18a-694c357cf069",
        "parentId" : null,
        "authorId" : "186a4cfe-39c6-4fe8-87fa-f281ab2a4141",
        "body" : "This is a `private[concurrent]` type which appears in the public API.",
        "createdAt" : "2018-05-11T21:33:17Z",
        "updatedAt" : "2018-05-15T13:19:36Z",
        "lastEditedBy" : "186a4cfe-39c6-4fe8-87fa-f281ab2a4141",
        "tags" : [
        ]
      },
      {
        "id" : "60674306-f354-4f60-be9f-6c476d5904b2",
        "parentId" : "26b16f21-5f31-48cb-a18a-694c357cf069",
        "authorId" : "14fa9071-c3b2-4b1b-a7aa-9d7398bdbade",
        "body" : "Yes, this is unavoidable with this technique. Cats [does it as well](https://typelevel.org/cats/api/cats/data/EitherT$.html#fromOption[F[_]]:cats.data.EitherT.FromOptionPartiallyApplied[F])",
        "createdAt" : "2018-05-12T06:10:35Z",
        "updatedAt" : "2018-05-15T13:19:36Z",
        "lastEditedBy" : "14fa9071-c3b2-4b1b-a7aa-9d7398bdbade",
        "tags" : [
        ]
      },
      {
        "id" : "d1703f1a-3de3-4f3c-950e-28ec00139043",
        "parentId" : "26b16f21-5f31-48cb-a18a-694c357cf069",
        "authorId" : "186a4cfe-39c6-4fe8-87fa-f281ab2a4141",
        "body" : "Okay, but why is it unavoidable? It could just be public ...",
        "createdAt" : "2018-05-12T09:05:18Z",
        "updatedAt" : "2018-05-15T13:19:36Z",
        "lastEditedBy" : "186a4cfe-39c6-4fe8-87fa-f281ab2a4141",
        "tags" : [
        ]
      },
      {
        "id" : "6d0020c5-61a8-45db-9af3-0cf65714ce34",
        "parentId" : "26b16f21-5f31-48cb-a18a-694c357cf069",
        "authorId" : "14fa9071-c3b2-4b1b-a7aa-9d7398bdbade",
        "body" : "@durban I don't know exactly why it's done this way in cats/cats-mtl, but from my point of view:\r\n\r\n* This is easier for newcomers searching through the docs, since it's just a noise we accept for ergonomics, to not be confused about wtf is that. For people reading the code, it's also understandable that it's an artifact, not really an essential part of public API.\r\n* It's better for source compatibility if nobody can explicitly reference this type.",
        "createdAt" : "2018-05-14T08:08:05Z",
        "updatedAt" : "2018-05-15T13:19:36Z",
        "lastEditedBy" : "14fa9071-c3b2-4b1b-a7aa-9d7398bdbade",
        "tags" : [
        ]
      },
      {
        "id" : "e4fea264-4b9d-471c-b9f2-b8eee2af3f3a",
        "parentId" : "26b16f21-5f31-48cb-a18a-694c357cf069",
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "It's better if it's `private[concurrent]` because then users aren't allowed to use the type.\r\nIt's also sort of a visual guarantee that the code gets inlined (or at least I hope it does).\r\n\r\nThe problem with it is that the IDE goes blind to what's going on, it doesn't report an error, but it doesn't help with the required params either. But that's fine in this case IMO.",
        "createdAt" : "2018-05-14T08:30:50Z",
        "updatedAt" : "2018-05-15T13:19:36Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      },
      {
        "id" : "50eba36c-e5b8-4e56-9b25-a76e6cafcf49",
        "parentId" : "26b16f21-5f31-48cb-a18a-694c357cf069",
        "authorId" : "186a4cfe-39c6-4fe8-87fa-f281ab2a4141",
        "body" : "In my opinion, this is abusing a bug in scalac. That doesn't mean we coundn't do it, but let's be clear about what we're doing exactly :-)",
        "createdAt" : "2018-05-15T10:21:31Z",
        "updatedAt" : "2018-05-15T13:19:36Z",
        "lastEditedBy" : "186a4cfe-39c6-4fe8-87fa-f281ab2a4141",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a77ef8e9ace3c85b9818d6464914be5ee96cf47",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +151,155 @@  def apply[F[_]]: RefApplyPartiallyApplied[F] = new RefApplyPartiallyApplied[F]\n\n  private[concurrent] final class RefApplyPartiallyApplied[F[_]](val dummy: Boolean = true) extends AnyVal {\n    def apply[A](a: A)(implicit F: Sync[F]): F[Ref[F, A]] = F.delay(unsafe[F](a))\n  }"
  },
  {
    "id" : "a2ffb9df-0d06-48b6-85b2-4989cbc23aaf",
    "prId" : 211,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/211#pullrequestreview-119586582",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d92fe6b-0fcc-4912-8ae2-48a7ebf1c937",
        "parentId" : null,
        "authorId" : "186a4cfe-39c6-4fe8-87fa-f281ab2a4141",
        "body" : "See above.",
        "createdAt" : "2018-05-11T21:34:36Z",
        "updatedAt" : "2018-05-15T13:19:36Z",
        "lastEditedBy" : "186a4cfe-39c6-4fe8-87fa-f281ab2a4141",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a77ef8e9ace3c85b9818d6464914be5ee96cf47",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +197,201 @@  def unsafe[F[_]]: RefUnsafePartiallyApplied[F] = new RefUnsafePartiallyApplied[F]\n\n  private[concurrent] final class RefUnsafePartiallyApplied[F[_]](val dummy: Boolean = true) extends AnyVal {\n    def apply[A](a: A)(implicit F: Sync[F]): Ref[F, A] = new SyncRef[F, A](new AtomicReference[A](a))\n  }"
  }
]