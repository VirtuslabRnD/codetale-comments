[
  {
    "id" : "59440f79-9bff-4098-b331-12c612d546ad",
    "prId" : 519,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/519#pullrequestreview-232899689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcb4649a-dbc3-40c8-b1d0-fce795fd05ed",
        "parentId" : null,
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "Unfortunately this too breaks binary compatibility on Scala 2.11.",
        "createdAt" : "2019-05-02T08:57:02Z",
        "updatedAt" : "2019-05-25T23:33:10Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7c0acd1d89e82e6edd762fbcda161b93c1d295b",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +162,166 @@   *      result of `F[A]`\n   */\n  def onCancel[A](fa: F[A])(finalizer: F[Unit]): F[A] =\n    guaranteeCase(fa) {\n      case ExitCase.Canceled => finalizer"
  },
  {
    "id" : "a6a5b3b4-dab9-4d54-afd4-f58c074f9aff",
    "prId" : 254,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/254#pullrequestreview-124308698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a45c7660-cf63-4701-8329-fbc6e97e96e9",
        "parentId" : null,
        "authorId" : "14fa9071-c3b2-4b1b-a7aa-9d7398bdbade",
        "body" : "I think the original intention was that E = Throwable (it has to be the same thing as in ExitCase.Error anyway), and we don't support Scalaz IO fully in its bifunctor adventures.\r\n\r\nNot gonna miss it though - it's not like I wanted to do message-passing to `release` cases using `Throwable`s, so for me it means just less `(_)` in pattern matches.\r\n\r\nOn a side note, we might want to consider dropping `E` from `Bracket[F[_], E]` (we'll be able to use `@typeclass` for free syntax) and hard-wiring everything to `Throwable` 😃 . I'm not convinced thus far that we'll be able to make any good use of that `E` parameter on `ExitCase`. I wonder if @LukaJCB has to say something in its defense 😸 ",
        "createdAt" : "2018-05-30T06:33:34Z",
        "updatedAt" : "2018-05-30T06:37:43Z",
        "lastEditedBy" : "14fa9071-c3b2-4b1b-a7aa-9d7398bdbade",
        "tags" : [
        ]
      },
      {
        "id" : "abb5f3fe-f7b1-4e02-8d7f-ff0d43904e56",
        "parentId" : "a45c7660-cf63-4701-8329-fbc6e97e96e9",
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "The idea with that `Option[E]` was to support Haskell's interruption model where you send an `E` with your `cancel` signal.\r\n\r\nYou are right that the original intent was E = Throwable. We failed to support Scalaz with it however, plus our `cancel` does not take an `E`, so in polymorphic code this is useless.\r\n\r\nSo it's junk that we might as well remove.",
        "createdAt" : "2018-05-30T06:57:14Z",
        "updatedAt" : "2018-05-30T06:57:15Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      },
      {
        "id" : "59f5f29b-4875-470a-bf54-43e182cb2534",
        "parentId" : "a45c7660-cf63-4701-8329-fbc6e97e96e9",
        "authorId" : "14fa9071-c3b2-4b1b-a7aa-9d7398bdbade",
        "body" : "Yep, no objections to removal :) I'm just not sure if we even need `E` on `Bracket`.",
        "createdAt" : "2018-05-30T08:02:59Z",
        "updatedAt" : "2018-05-30T08:02:59Z",
        "lastEditedBy" : "14fa9071-c3b2-4b1b-a7aa-9d7398bdbade",
        "tags" : [
        ]
      },
      {
        "id" : "c2ac5022-2c1a-4d34-aa09-d995d56fd51d",
        "parentId" : "a45c7660-cf63-4701-8329-fbc6e97e96e9",
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "`Bracket` having an `E` is the same as `MonadError` having an `E`, even if that `E` is usually `Throwable`.\r\n\r\nFor `Sync` it makes sense to specialize it because if a `BSync` (bifunctor `Sync` 😛) ever happens, the difference will be that `Sync` catches Throwables in `delay`, `suspend`, `map` and `flatMap`, so it has behavior related to `Throwable`. So a `Sync[F] <: BSync[F, Throwable]` wouldn't be just a type alias.\r\n\r\nI don't like type classes with two type parameters to be honest.\r\nHowever polymorphic code will usually use `Sync` anyway.",
        "createdAt" : "2018-05-30T08:11:34Z",
        "updatedAt" : "2018-05-30T08:11:34Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      },
      {
        "id" : "c1387314-9035-4191-b5ee-f21b755baa1b",
        "parentId" : "a45c7660-cf63-4701-8329-fbc6e97e96e9",
        "authorId" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "body" : "👍 we added it to future proof for Scalaz, but they can't use it so, remove it is!",
        "createdAt" : "2018-05-30T08:23:27Z",
        "updatedAt" : "2018-05-30T08:23:27Z",
        "lastEditedBy" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "tags" : [
        ]
      },
      {
        "id" : "def09b39-c300-496d-a0b1-a82595f35665",
        "parentId" : "a45c7660-cf63-4701-8329-fbc6e97e96e9",
        "authorId" : "14fa9071-c3b2-4b1b-a7aa-9d7398bdbade",
        "body" : "@LukaJCB so what if we removed `E` parameter from Bracket and ExitCase and forced things to `Throwable`?",
        "createdAt" : "2018-05-30T08:59:29Z",
        "updatedAt" : "2018-05-30T08:59:39Z",
        "lastEditedBy" : "14fa9071-c3b2-4b1b-a7aa-9d7398bdbade",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d36affc381489117dc0b5661bed9c88677e1ef5",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +174,178 @@   * and act on them.\n   */\n  final case object Canceled extends ExitCase[Nothing]\n\n  /**"
  }
]