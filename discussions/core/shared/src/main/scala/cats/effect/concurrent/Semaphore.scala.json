[
  {
    "id" : "fee2d1ed-26a7-4b6d-b270-9f29f4fffb3d",
    "prId" : 403,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/403#pullrequestreview-171045464",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad23507e-d4b4-4265-aac8-e385afbc31cc",
        "parentId" : null,
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "I don't understand how this `cleanup` routine remembers that the `acquire` actually happened or not.\r\n\r\nFirst of all we can have a `Right(m)` in that `state` without `acquire` ever happening, which means `n` permits will get re-added to the pool that were never acquired.",
        "createdAt" : "2018-11-02T06:51:38Z",
        "updatedAt" : "2018-11-02T13:13:17Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      },
      {
        "id" : "bcac6762-9cb9-4e7b-bf39-7d6924dfadb0",
        "parentId" : "ad23507e-d4b4-4265-aac8-e385afbc31cc",
        "authorId" : "e856ded5-89e9-4e09-937c-311c66e1f1a6",
        "body" : "> First of all we can have a Right(m) in that state without acquire ever happening, which means n permits will get re-added to the pool that were never acquired.\r\n\r\nNo, if we have a `Right(m)` in state when `cleanup` runs, it means that `acquire` happened. Note this cleanup is only used when we've put a new entry in `Left(waiting)` for this particular `acquire` call. We know there *was* an entry in the state and we know it's no longer there, therefore we know `acquire` completed.",
        "createdAt" : "2018-11-02T10:05:38Z",
        "updatedAt" : "2018-11-02T13:13:17Z",
        "lastEditedBy" : "e856ded5-89e9-4e09-937c-311c66e1f1a6",
        "tags" : [
        ]
      },
      {
        "id" : "812ed600-439d-4642-a96a-c1a4691d6378",
        "parentId" : "ad23507e-d4b4-4265-aac8-e385afbc31cc",
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "Ah, you might be right, I was thinking of another constraint that you don't have.",
        "createdAt" : "2018-11-02T10:33:55Z",
        "updatedAt" : "2018-11-02T13:13:17Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      }
    ],
    "commit" : "0970f0f52c0d4410e329bc044888f23e4ed611a7",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +165,169 @@                      case Some(m) => (Left(waiting.filterNot(_._2 eq gate)), releaseN(n - m))\n                    }\n                  case Right(m) => (Right(m + n), F.unit)\n                }.flatten\n                val entry = waiting.lastOption.getOrElse(sys.error(\"Semaphore has empty waiting queue rather than 0 count\"))"
  },
  {
    "id" : "2dc196ac-9952-4319-a849-cf6b06584d36",
    "prId" : 254,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/254#pullrequestreview-124269882",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d964412-f04c-4ea2-b0b7-22025bf23cae",
        "parentId" : null,
        "authorId" : "14fa9071-c3b2-4b1b-a7aa-9d7398bdbade",
        "body" : "Side idea: what if we had `guaranteeCase` accept a `PartialFunction[ExitCase, F[Unit]]`, so that you won't have to care about sticking `F.unit` and can only focus on cases you care about?",
        "createdAt" : "2018-05-30T06:36:59Z",
        "updatedAt" : "2018-05-30T06:37:43Z",
        "lastEditedBy" : "14fa9071-c3b2-4b1b-a7aa-9d7398bdbade",
        "tags" : [
        ]
      },
      {
        "id" : "954a81bb-c4a0-4f0b-969b-5add5d10e801",
        "parentId" : "2d964412-f04c-4ea2-b0b7-22025bf23cae",
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "It would be inconsistent with `bracketCase`. I don't mind it being a total function, the Scala compiler complains about it and makes people remember what all the cases are.",
        "createdAt" : "2018-05-30T06:58:30Z",
        "updatedAt" : "2018-05-30T06:58:30Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d36affc381489117dc0b5661bed9c88677e1ef5",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +248,252 @@          }\n        case _ =>\n          F.unit\n      }\n  }"
  }
]