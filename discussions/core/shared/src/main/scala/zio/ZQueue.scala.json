[
  {
    "id" : "b6cac18f-d7ef-4d23-b68e-d4317156ca5b",
    "prId" : 3274,
    "prUrl" : "https://github.com/zio/zio/pull/3274#pullrequestreview-387710718",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "500d0f08-923f-4912-9d85-064892c8b4f8",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "For this one since we are polling `n` items from the queue, it may make sense to allocate an n element Array and just put them on the array, returning a view of that array later.",
        "createdAt" : "2020-04-04T14:52:29Z",
        "updatedAt" : "2020-04-05T15:29:01Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "3d420432-a5af-4156-affa-c5edab84a80d",
        "parentId" : "500d0f08-923f-4912-9d85-064892c8b4f8",
        "authorId" : "6080cd8f-e671-4d49-a54c-b6159456ac0e",
        "body" : "Will tackle this one in a follow-up, as part of migration to chunks :).",
        "createdAt" : "2020-04-04T15:50:15Z",
        "updatedAt" : "2020-04-05T15:29:01Z",
        "lastEditedBy" : "6080cd8f-e671-4d49-a54c-b6159456ac0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d0d7e5a96650773013af8a793e29fb640a883b9",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +294,298 @@     */\n    def unsafePollN[A](q: MutableConcurrentQueue[A], max: Int): List[A] = {\n      val empty = null.asInstanceOf[A]\n\n      @tailrec"
  },
  {
    "id" : "96f333df-276b-40ee-9373-df2690787516",
    "prId" : 3216,
    "prUrl" : "https://github.com/zio/zio/pull/3216#pullrequestreview-381036341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f98fe907-079c-4de0-a507-71337f4bfed6",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This could be made faster by pushing the `unsafeCompleteTakers()` into `handleSurplus`, perhaps. But you have 2 `FlatMap` from `<*` and another `effectTotal` wrapper around `unsafeCompleteTakers()`.",
        "createdAt" : "2020-03-25T10:49:05Z",
        "updatedAt" : "2020-03-25T10:49:06Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "b578b6f3bdd7d69d64a11aa75ad536b51bf98395",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +504,508 @@            if (surplus.isEmpty) IO.succeedNow(true)\n            else\n              strategy.handleSurplus(surplus, queue, shutdownFlag) <* IO.effectTotal(unsafeCompleteTakers())\n          }\n        }"
  },
  {
    "id" : "75e9e0ee-66be-46c8-8003-5ddd025d8f2a",
    "prId" : 3216,
    "prUrl" : "https://github.com/zio/zio/pull/3216#pullrequestreview-381037490",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e45751b-de82-44e5-b058-9ef92f29ed95",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "We could optimize `effectSuspendTotal` primitive to do peekahead and immediately evaluate any `EffectTotal` / `Succeed` embedded inside there (such as the `succeedNow` in the below happy path).",
        "createdAt" : "2020-03-25T10:50:19Z",
        "updatedAt" : "2020-03-25T10:50:19Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "6b71d5f7-8f34-4d27-9a0e-8d2efccd7a15",
        "parentId" : "5e45751b-de82-44e5-b058-9ef92f29ed95",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Actually that probably wouldn't make a difference, scratch that.",
        "createdAt" : "2020-03-25T10:50:45Z",
        "updatedAt" : "2020-03-25T10:50:45Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "b578b6f3bdd7d69d64a11aa75ad536b51bf98395",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +485,489 @@\n    def offer(a: A): UIO[Boolean] =\n      UIO.effectSuspendTotal {\n        if (shutdownFlag.get) ZIO.interrupt\n        else {"
  },
  {
    "id" : "5da0c7ee-a1c8-4667-9a37-0a5b510219c9",
    "prId" : 3216,
    "prUrl" : "https://github.com/zio/zio/pull/3216#pullrequestreview-381047653",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a04d4a2-828c-4e8f-b820-81caf0adcff1",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "May be worth drilling down into `unsafePollN` and optimizing it. For example, right now it is building this `List` every time you call it.",
        "createdAt" : "2020-03-25T11:02:32Z",
        "updatedAt" : "2020-03-25T11:02:33Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "f31723d5-7ff5-4f72-b5d6-b57168876f41",
        "parentId" : "3a04d4a2-828c-4e8f-b820-81caf0adcff1",
        "authorId" : "6080cd8f-e671-4d49-a54c-b6159456ac0e",
        "body" : "Will do, probably the same specialization can be done with offering a single element.",
        "createdAt" : "2020-03-25T11:06:03Z",
        "updatedAt" : "2020-03-25T11:06:03Z",
        "lastEditedBy" : "6080cd8f-e671-4d49-a54c-b6159456ac0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "b578b6f3bdd7d69d64a11aa75ad536b51bf98395",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +489,493 @@        else {\n          val noRemaining =\n            unsafePollN(takers, 1) match {\n              case taker :: _ =>\n                unsafeCompletePromise(taker, a)"
  },
  {
    "id" : "64abedfb-1d99-4e06-b63b-6cd9fb0ba737",
    "prId" : 3216,
    "prUrl" : "https://github.com/zio/zio/pull/3216#pullrequestreview-381045568",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0dd8935d-f2cc-4104-893a-1b51c16bee32",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Lots of overhead here as in the other case.",
        "createdAt" : "2020-03-25T11:02:50Z",
        "updatedAt" : "2020-03-25T11:02:50Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "b578b6f3bdd7d69d64a11aa75ad536b51bf98395",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +527,531 @@            if (surplus.isEmpty) IO.succeedNow(true)\n            else\n              strategy.handleSurplus(surplus, queue, shutdownFlag) <* IO.effectTotal(unsafeCompleteTakers())\n          }\n        }"
  }
]