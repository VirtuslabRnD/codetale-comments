[
  {
    "id" : "698b0a67-9ad1-4495-812e-4ef4f2b95ec6",
    "prId" : 4037,
    "prUrl" : "https://github.com/zio/zio/pull/4037#pullrequestreview-459657443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0f28cc8-fd45-4238-9049-e408b989e371",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Yikes! These are some pretty monstrous type annotations. Could partial application trick help here?",
        "createdAt" : "2020-08-02T12:29:13Z",
        "updatedAt" : "2020-08-02T15:20:09Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "06973e63-6f1e-4102-8a99-a0fd64b6b930",
        "parentId" : "e0f28cc8-fd45-4238-9049-e408b989e371",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "This can be rewritten as `UIO.foreach(fibers: Iterable[Fiber[E, A]])(_.poll)`.",
        "createdAt" : "2020-08-02T15:24:47Z",
        "updatedAt" : "2020-08-02T15:24:47Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f227401f0ee9a606e7a100c3aface01e47081487",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +560,564 @@      def poll: UIO[Option[Exit[E, Collection[A]]]] =\n        UIO\n          .foreach[Fiber[E, A], Option[Exit[E, A]], Iterable](fibers)(_.poll)\n          .map(_.foldRight[Option[Exit[E, List[A]]]](Some(Exit.succeed(Nil))) {\n            case (Some(ra), Some(rb)) => Some(ra.zipWith(rb)(_ :: _, _ && _))"
  },
  {
    "id" : "7fdd0852-5488-4408-98c0-8cf7f350b69b",
    "prId" : 2715,
    "prUrl" : "https://github.com/zio/zio/pull/2715#pullrequestreview-348303874",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7af6c261-6d4d-4aed-a53c-c9cce74bd724",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "We still have code doing `new Fiber[E, A]`, whereas, we want every fiber to be either `Runtime` or `Synthetic`. So we should change every instance of `new Fiber` in this file to be `new Synthetic`.\r\n\r\nThen make sure `Fiber` is sealed in this file, so we won't have to worry about outside code doing the wrong thing.",
        "createdAt" : "2020-01-24T23:04:57Z",
        "updatedAt" : "2020-01-25T04:32:21Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "da2823a7-48c5-4dce-9188-cc6b36378712",
        "parentId" : "7af6c261-6d4d-4aed-a53c-c9cce74bd724",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Yes. If we want to seal it I think we are going to need to move `FiberContext` into the same file.",
        "createdAt" : "2020-01-24T23:37:17Z",
        "updatedAt" : "2020-01-25T04:32:21Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "09475c13-72ec-4994-a849-335fa2784c0b",
        "parentId" : "7af6c261-6d4d-4aed-a53c-c9cce74bd724",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Used a trick to get around this.",
        "createdAt" : "2020-01-25T02:09:53Z",
        "updatedAt" : "2020-01-25T04:32:21Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "054345599b8678d4db8472d117d6b5cf647d3d74",
    "line" : 405,
    "diffHunk" : "@@ -1,1 +575,579 @@  def done[E, A](exit: => Exit[E, A]): Fiber.Synthetic[E, A] =\n    new Fiber.Synthetic[E, A] {\n      final def await: UIO[Exit[E, A]]                     = IO.succeed(exit)\n      final def children: UIO[Iterable[Fiber[Any, Any]]]   = UIO(Nil)\n      final def getRef[A](ref: FiberRef[A]): UIO[A]        = UIO(ref.initial)"
  },
  {
    "id" : "34d7253e-9214-4014-9ef8-f1f003ee9d97",
    "prId" : 2715,
    "prUrl" : "https://github.com/zio/zio/pull/2715#pullrequestreview-348325368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bc7671e-4fbc-4537-855a-2c65ce89bfb3",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Nice trick! 👍 ",
        "createdAt" : "2020-01-25T13:07:36Z",
        "updatedAt" : "2020-01-25T13:07:36Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "054345599b8678d4db8472d117d6b5cf647d3d74",
    "line" : 357,
    "diffHunk" : "@@ -1,1 +410,414 @@\n  private[zio] object Runtime {\n    trait Internal[+E, +A] extends Runtime[E, A]\n  }\n"
  },
  {
    "id" : "0a3023ee-f855-4b3c-9974-3e54965d7293",
    "prId" : 2228,
    "prUrl" : "https://github.com/zio/zio/pull/2228#pullrequestreview-316217250",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cc366b2-9a7c-46a1-9c21-73f08710bcf9",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Don't you have to use `stripMargin` here?",
        "createdAt" : "2019-11-13T10:22:35Z",
        "updatedAt" : "2019-11-13T12:38:29Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "c9dd071b-fe45-47d0-86f6-af2ea06e80e1",
        "parentId" : "2cc366b2-9a7c-46a1-9c21-73f08710bcf9",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Thank you! 🙏 ",
        "createdAt" : "2019-11-13T12:38:42Z",
        "updatedAt" : "2019-11-13T12:38:43Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "8e3a41ec-451a-439b-acba-a4d61ea03641",
        "parentId" : "2cc366b2-9a7c-46a1-9c21-73f08710bcf9",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "No worries 🤗  You will have to prefix with `|` every line though, like this:\r\n```scala\r\ns\"\"\"\r\n   |${name}#${fiberId.seqNumber} (${lifeMsg}) ${waitMsg}}\r\n   |  Status: ${statMsg}\r\n   |${trace.prettyPrint}\r\n   |\"\"\".stripMargin",
        "createdAt" : "2019-11-13T12:46:16Z",
        "updatedAt" : "2019-11-13T12:46:46Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "48675742f1744e2e3299e9d6347d167d31aededc",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +462,466 @@\n      s\"\"\"\n      ${name}#${fiberId.seqNumber} (${lifeMsg}) ${waitMsg}}\n         Status: ${statMsg}\n      ${trace.prettyPrint}"
  },
  {
    "id" : "ef7a0358-96b9-4d57-9803-71dd8bb9d425",
    "prId" : 2169,
    "prUrl" : "https://github.com/zio/zio/pull/2169#pullrequestreview-315144203",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13740b55-4d9c-4f56-8150-b8f51091b335",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Ohh that's pretty cool",
        "createdAt" : "2019-11-11T20:41:00Z",
        "updatedAt" : "2019-11-12T02:32:19Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "e597a3f9ff4c9895deccd1a7dc9ed0e94e93be52",
    "line" : 671,
    "diffHunk" : "@@ -1,1 +543,547 @@   * A `FiberRef` that stores the name of the fiber, which defaults to `None`.\n   */\n  val fiberName: FiberRef[Option[String]] = new FiberRef(None, (old, _) => old)\n\n  /**"
  },
  {
    "id" : "eeb6400f-4d5d-4ef5-b8aa-122863b1e5a7",
    "prId" : 1774,
    "prUrl" : "https://github.com/zio/zio/pull/1774#pullrequestreview-291499257",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88e15546-f60f-427a-ab54-3a001052f7c5",
        "parentId" : null,
        "authorId" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "body" : "toes This comment update reflects that calling `.interrupt` before `.join` places `Exit` into result channel?",
        "createdAt" : "2019-09-22T09:52:04Z",
        "updatedAt" : "2019-09-22T09:52:04Z",
        "lastEditedBy" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "tags" : [
        ]
      },
      {
        "id" : "e0183fb0-b0c5-4fe8-b907-b83e9f41affb",
        "parentId" : "88e15546-f60f-427a-ab54-3a001052f7c5",
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "It will place `Cause.interrupt` in the result channel and cause your fiber to terminate. I've read the previous comment as saying that joining the interrupted fiber will not result in error (will succeed) and got confused.",
        "createdAt" : "2019-09-22T09:59:43Z",
        "updatedAt" : "2019-09-22T10:00:00Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e50fe09c43409e0937e6e62b75ae2f94133254e",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +63,67 @@   * result in a catchable error. Joining an interrupted fiber will result in an\n   * \"inner interruption\" of this fiber, unlike interruption triggered by another\n   * fiber, \"inner interruption\" can be catched and recovered.\n   *\n   * @return `IO[E, A]`"
  },
  {
    "id" : "4a785427-7eb0-4969-8629-a1ed3b3b6bb3",
    "prId" : 1655,
    "prUrl" : "https://github.com/zio/zio/pull/1655#pullrequestreview-294706249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5247a9ea-f11d-42f9-b48f-014110dbef94",
        "parentId" : null,
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "I wonder if type annotations could be avoided if `concurrent.Promise[A]` is used in `success/failure` returns instead of `p.type`",
        "createdAt" : "2019-09-29T22:35:07Z",
        "updatedAt" : "2019-09-29T22:35:13Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      }
    ],
    "commit" : "e80ed91d9f0eabade892b391cb0f97aeb76761d5",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +280,284 @@        }\n      } <* self.await\n        .flatMap[Any, Nothing, p.type](_.foldM[Any, Nothing, p.type](failure, success))\n        .fork\n    }.flatten"
  },
  {
    "id" : "75ccb89c-e511-4227-a0d5-8560495b7b0f",
    "prId" : 1377,
    "prUrl" : "https://github.com/zio/zio/pull/1377#pullrequestreview-273440697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97de499d-3465-4c70-9453-b324ee8dba09",
        "parentId" : null,
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "There is no `effectTotal` on `Fiber`, so I'm inclined to let this one stay since there's no alternative?.. /cc @jdegoes ",
        "createdAt" : "2019-08-10T22:11:55Z",
        "updatedAt" : "2019-08-12T06:56:56Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      }
    ],
    "commit" : "72c2462db25cd27d99dfff79763fa027ecf12832",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +286,290 @@  final def succeed[E, A](a: A): Fiber[E, A] = done(Exit.succeed(a))\n\n  @deprecated(\"use succeed\", \"1.0.0\")\n  final def succeedLazy[E, A](a: => A): Fiber[E, A] =\n    succeed(a)"
  }
]