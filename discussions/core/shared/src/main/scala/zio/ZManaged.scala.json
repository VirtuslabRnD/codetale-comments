[
  {
    "id" : "345cea13-f5e8-42ce-bf70-d87bda204452",
    "prId" : 4037,
    "prUrl" : "https://github.com/zio/zio/pull/4037#pullrequestreview-459646594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86811d59-ed2f-4f40-8e45-da31f9d3ac24",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Seems like we can no longer work with `Iterable`. Could a low priority implicit build from compat work to restore that?",
        "createdAt" : "2020-08-02T12:32:33Z",
        "updatedAt" : "2020-08-02T15:20:09Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "ae7d4cd9-4a31-483c-bf99-b0937da7fbe3",
        "parentId" : "86811d59-ed2f-4f40-8e45-da31f9d3ac24",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "I think this actually isn't an issue with our implementation at all. `reverse` isn't defined on `Iterable` so since we no longer automatically return a `List` we don't have a `Seq` that can be reverse.",
        "createdAt" : "2020-08-02T12:46:29Z",
        "updatedAt" : "2020-08-02T15:20:09Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f227401f0ee9a606e7a100c3aface01e47081487",
    "line" : 206,
    "diffHunk" : "@@ -1,1 +1684,1688 @@    ZManaged(ZIO.foreach(as)(f(_).zio).map { result =>\n      val (fins, _) = result.unzip\n      (e => ZIO.foreach(fins.toList.reverse)(_.apply(e)), ())\n    })\n"
  },
  {
    "id" : "9d8fc309-222d-4226-ae02-2b32ecf347d4",
    "prId" : 3983,
    "prUrl" : "https://github.com/zio/zio/pull/3983#pullrequestreview-452014095",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f954113f-0bfd-4bfe-a372-8ae672868ed1",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Can we keep it on the class with implicit evidence? (`implicit ev: E <:< Throwable`). Better discoverability that way.",
        "createdAt" : "2020-07-20T21:15:21Z",
        "updatedAt" : "2020-07-20T21:15:46Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "bda81cf6-60e7-4c8b-81f7-bc6458b03e30",
        "parentId" : "f954113f-0bfd-4bfe-a372-8ae672868ed1",
        "authorId" : "d658ecdb-5876-4c2e-b729-b795b39dd4e8",
        "body" : "Yep, but the cost is that we can no longer constrain `E1 <: E` and the test cases won't pass (#2355). This PR is just a copy of what was done for `zio.ZIO` (#2360) to fix that.",
        "createdAt" : "2020-07-20T22:55:52Z",
        "updatedAt" : "2020-07-20T22:55:52Z",
        "lastEditedBy" : "d658ecdb-5876-4c2e-b729-b795b39dd4e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ffc085f7b7a2c2944b28e9ee89c9075b414074a",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +2292,2296 @@     * Keeps some of the errors, and terminates the fiber with the rest.\n     */\n    def refineToOrDie[E1 <: E: ClassTag](implicit ev: CanFail[E]): ZManaged[R, E1, A] =\n      self.refineOrDie { case e: E1 => e }\n  }"
  },
  {
    "id" : "9c82fee4-ae8e-48c4-970e-8779b9dfa7ae",
    "prId" : 3813,
    "prUrl" : "https://github.com/zio/zio/pull/3813#pullrequestreview-431873485",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f1c866f-1bb7-439e-ae11-8a7fd42ccfe4",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Would be good to update the comment for this one!",
        "createdAt" : "2020-06-16T20:38:55Z",
        "updatedAt" : "2020-06-19T15:46:05Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "34eb8128b142e93826e7a330f07cda2df5d5a5fa",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +409,413 @@   * Unwraps the optional success of this effect, but can fail with None value.\n   */\n  def get[B](implicit ev1: E <:< Nothing, ev2: A <:< Option[B]): ZManaged[R, Option[Nothing], B] =\n    ZManaged.absolve(mapError(ev1)(CanFail).map(ev2(_).toRight(None)))\n"
  },
  {
    "id" : "6909f8c9-1014-453b-9f07-fb842f4ab78c",
    "prId" : 3696,
    "prUrl" : "https://github.com/zio/zio/pull/3696#pullrequestreview-417390625",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8dc2c71-0645-4440-b2b3-3a39b8937c2c",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "I think there's an issue here in that `a *> b.release *> c` won't work, as after `b.release`, the ReleaseMap is already closed.\r\n\r\nThe workaround may be for this combinator to run `self` on a nested `ReleaseMap`.",
        "createdAt" : "2020-05-24T19:48:05Z",
        "updatedAt" : "2020-05-24T20:50:51Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "7d4afbeb-10c0-4d10-b451-b209ee27e9f5",
        "parentId" : "b8dc2c71-0645-4440-b2b3-3a39b8937c2c",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Added a test for this. Seems to be working as expected:\r\n\r\n```scala\r\ntestM(\"closes the scope\") {\r\n  val expected = Chunk(\"acquiring a\", \"acquiring b\", \"releasing b\", \"acquiring c\", \"releasing c\", \"releasing a\")\r\n  for {\r\n    ref     <- Ref.make[Chunk[String]](Chunk.empty)\r\n    a       = Managed.make(ref.update(_ + \"acquiring a\"))(_ => ref.update(_ + \"releasing a\"))\r\n    b       = Managed.make(ref.update(_ + \"acquiring b\"))(_ => ref.update(_ + \"releasing b\"))\r\n    c       = Managed.make(ref.update(_ + \"acquiring c\"))(_ => ref.update(_ + \"releasing c\"))\r\n    managed = a *> b.release *> c\r\n    _       <- managed.useNow\r\n    log     <- ref.get\r\n  } yield assert(log)(equalTo(expected))\r\n}\r\n```",
        "createdAt" : "2020-05-24T20:51:31Z",
        "updatedAt" : "2020-05-24T20:51:31Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "714bf283e7b8da42b07494f3a4704f70d941466d",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +779,783 @@   * outside its scope.\n   */\n  def release: ZManaged[R, E, A] =\n    ZManaged.fromEffect(useNow)\n"
  },
  {
    "id" : "9a81a694-29a6-4b94-aebb-39a7c95a7861",
    "prId" : 3510,
    "prUrl" : "https://github.com/zio/zio/pull/3510#pullrequestreview-404514444",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5463e615-a320-42b9-b865-c4e229035706",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "```scala\r\nifM (expr) {\r\n  consequentM\r\n} elseM {\r\n  alternateM\r\n}\r\n```\r\n😃 ",
        "createdAt" : "2020-05-02T09:32:17Z",
        "updatedAt" : "2020-05-09T19:03:22Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "2c157fcd-472c-452d-9bed-5cb6b68aa305",
        "parentId" : "5463e615-a320-42b9-b865-c4e229035706",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Lol. Happy to satisfy your DSL desires in a follow up 😂",
        "createdAt" : "2020-05-02T09:34:55Z",
        "updatedAt" : "2020-05-09T19:03:22Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f5d0b97fd3ea7ab30a7846653e09688cc672071",
    "line" : 652,
    "diffHunk" : "@@ -1,1 +1118,1122 @@  }\n\n  final class IfM[R, E](private val b: ZManaged[R, E, Boolean]) extends AnyVal {\n    def apply[R1 <: R, E1 >: E, A](\n      onTrue: => ZManaged[R1, E1, A],"
  },
  {
    "id" : "87967f50-eb89-412b-83f3-93fa8527d637",
    "prId" : 3510,
    "prUrl" : "https://github.com/zio/zio/pull/3510#pullrequestreview-408663002",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a34a3239-d129-4969-b93e-7df7722ceb1e",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "I think you could pass id here too right?",
        "createdAt" : "2020-05-09T08:39:13Z",
        "updatedAt" : "2020-05-09T19:03:22Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "cf25c8dd-1828-4d4c-b034-b4a92685054a",
        "parentId" : "a34a3239-d129-4969-b93e-7df7722ceb1e",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "`Fiber#interrupt` automatically uses the current fiber's ID as the interruptor.",
        "createdAt" : "2020-05-09T16:07:40Z",
        "updatedAt" : "2020-05-09T19:03:22Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f5d0b97fd3ea7ab30a7846653e09688cc672071",
    "line" : 509,
    "diffHunk" : "@@ -1,1 +926,930 @@                case Left(fiber) =>\n                  ZIO.fiberId.flatMap { id =>\n                    fiber.interrupt\n                      .ensuring(innerReleaseMap.releaseAll(Exit.interrupt(id), ExecutionStrategy.Sequential))\n                      .forkDaemon"
  },
  {
    "id" : "f22c3e08-21fc-481f-b1b7-f4ad7cb25cda",
    "prId" : 3510,
    "prUrl" : "https://github.com/zio/zio/pull/3510#pullrequestreview-408628586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03030271-33ae-459c-a2ac-76cb5415473e",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "nice simplification 😲",
        "createdAt" : "2020-05-09T08:42:18Z",
        "updatedAt" : "2020-05-09T19:03:22Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f5d0b97fd3ea7ab30a7846653e09688cc672071",
    "line" : 622,
    "diffHunk" : "@@ -1,1 +1077,1081 @@   * either side fails, then the other side will be interrupted.\n   */\n  def zipWithPar[R1 <: R, E1 >: E, A1, A2](that: ZManaged[R1, E1, A1])(f: (A, A1) => A2): ZManaged[R1, E1, A2] =\n    ZManaged.ReleaseMap.makeManaged(ExecutionStrategy.Parallel).mapM { parallelReleaseMap =>\n      self.zio"
  },
  {
    "id" : "683e838c-dd52-4a6f-82c3-bda1b11f01f2",
    "prId" : 3033,
    "prUrl" : "https://github.com/zio/zio/pull/3033#pullrequestreview-370785429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cab73e46-eaf1-4af3-807b-01d8154c79db",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Big improvement!",
        "createdAt" : "2020-03-07T19:48:33Z",
        "updatedAt" : "2020-03-07T19:48:34Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "98cdcbfa7cb350ed46a88541a44391399c4b22ef",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +480,484 @@    ZManaged(reserve.mapErrorCause(f).map(r => Reservation(r.acquire.mapErrorCause(f), r.release)))\n\n  def memoize: ZManaged[Any, Nothing, ZManaged[R, E, A]] =\n    ZManaged.finalizerRef(_ => UIO.unit).mapM { finalizers =>\n      for {"
  },
  {
    "id" : "5d8c598f-ad5b-4ef1-83dd-5082f7dc387b",
    "prId" : 2942,
    "prUrl" : "https://github.com/zio/zio/pull/2942#pullrequestreview-363663994",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e11df2af-d40f-418e-9e11-488cdf235664",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Can't get the state machine more explicit than this!",
        "createdAt" : "2020-02-24T20:05:10Z",
        "updatedAt" : "2020-02-25T05:01:09Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a180577cbd80561250ab1f711384651205ec63d",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1064,1068 @@\n    sealed trait State\n    case object Running   extends State\n    case object Acquiring extends State\n    case object Exited    extends State"
  },
  {
    "id" : "77fd4700-80e8-4b72-a380-fc44d33c7092",
    "prId" : 2933,
    "prUrl" : "https://github.com/zio/zio/pull/2933#pullrequestreview-361412932",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fee1817-0129-4a0f-adcb-28091ee81bda",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Very tricky indeed. Nice catch. Happy to see it's a relatively esoteric scenario.",
        "createdAt" : "2020-02-19T20:28:37Z",
        "updatedAt" : "2020-02-20T00:41:39Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "78a35e926cd4ef2fadd362949f07914953b4ea4d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1073,1077 @@                  case Right(finalizers) => Right(reservation.release :: finalizers)\n                }.flatMap {\n                  case Left(exit) => restore(reservation.acquire).ensuring(reservation.release(exit))\n                  case _          => restore(reservation.acquire)\n                }"
  },
  {
    "id" : "85ba8358-5a48-43b7-8367-c5091abd5d34",
    "prId" : 2933,
    "prUrl" : "https://github.com/zio/zio/pull/2933#pullrequestreview-361412932",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e49bd58-022e-4e52-8034-466cfe26f386",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "I don't know why `foreachPar` is causing trouble, but I am assuming it is the same issue we had with `race` in finalizers after interruption. `foreachPar_` (which `foreachPar` is based on) has some interruptible sections.",
        "createdAt" : "2020-02-19T20:29:51Z",
        "updatedAt" : "2020-02-20T00:41:39Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "78a35e926cd4ef2fadd362949f07914953b4ea4d",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +1094,1098 @@              case Right(finalizers) =>\n                for {\n                  exits <- ZIO.foreach(finalizers)(_(exit).run)\n                  _     <- ZIO.doneNow(Exit.collectAllPar(exits).getOrElse(Exit.unit))\n                } yield ()"
  },
  {
    "id" : "687a0bd5-9156-4c9d-9d62-94751ad2cad6",
    "prId" : 2472,
    "prUrl" : "https://github.com/zio/zio/pull/2472#pullrequestreview-332270112",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "658301c3-6bc3-422d-a2bb-4656e4096d64",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Do we need to expose this as part of the API? It would be safer if we could only preallocate resources in the context of `preallocateManaged` so we couldn't leak them, or at least it would be much more difficult to do so. But maybe that doesn't give you the power to do what you want with this.",
        "createdAt" : "2019-12-15T02:56:01Z",
        "updatedAt" : "2019-12-15T16:00:45Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "fa10ff62-5d0b-422c-b514-393be758199a",
        "parentId" : "658301c3-6bc3-422d-a2bb-4656e4096d64",
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : "I can see your point. To use this safely you would almost always need to use uninterruptible / ensuring which is not something we would want to expose to users. On the other hand this will be often more convenient than preallocateManaged.\r\n\r\nMaybe lets wait for a few more opinions and then decide what to do with it.",
        "createdAt" : "2019-12-15T13:32:18Z",
        "updatedAt" : "2019-12-15T16:00:45Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      },
      {
        "id" : "7699fd7e-989f-44ac-82ec-f8fd864a6999",
        "parentId" : "658301c3-6bc3-422d-a2bb-4656e4096d64",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "I'd love to keep `preallocate` around as it's a pretty handy combinator for tricky situations.",
        "createdAt" : "2019-12-15T15:16:02Z",
        "updatedAt" : "2019-12-15T16:00:45Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5afda187fb77a9f8b8d61ec13044d5eacf7831e",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +576,580 @@   * as you might leak otherwise.\n   */\n  final def preallocate: ZIO[R, E, Managed[Nothing, A]] =\n    ZIO.uninterruptibleMask { restore =>\n      for {"
  },
  {
    "id" : "24894438-1ae5-49c9-aead-170be97fb937",
    "prId" : 2409,
    "prUrl" : "https://github.com/zio/zio/pull/2409#pullrequestreview-326436581",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6cc3958-7678-44c0-9d52-3813656f4a62",
        "parentId" : null,
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : "Wow, this is a quite unintuitive fix O.o",
        "createdAt" : "2019-12-03T19:35:59Z",
        "updatedAt" : "2019-12-03T20:07:32Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      },
      {
        "id" : "ca025f9a-653e-4b29-93ee-dc5956c17503",
        "parentId" : "c6cc3958-7678-44c0-9d52-3813656f4a62",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "I've used it in a couple of places and it works really well with contravariant types. You would think there would be an issue with the `R1 <: R` constraint if the environment type of the `release` is actually a supertype of the environment type of the `acquire`. But since `ZIO` is contravariant in `R` the compiler can arbitrarily narrow the type of `R1` to satisfy the constraint.",
        "createdAt" : "2019-12-03T19:40:14Z",
        "updatedAt" : "2019-12-03T20:07:32Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "d9332ef6-d304-4ccb-a4a9-99cd00a67f99",
        "parentId" : "c6cc3958-7678-44c0-9d52-3813656f4a62",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "How about your other trick of making `R1` independent of `R` and returning `R with R1` in the result?",
        "createdAt" : "2019-12-03T20:07:19Z",
        "updatedAt" : "2019-12-03T20:07:32Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "81f91a6b-deb9-42be-9a3f-d4bd932a74b2",
        "parentId" : "c6cc3958-7678-44c0-9d52-3813656f4a62",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Yes just confirmed that works too.\r\n\r\nI thought this was slightly nicer because since you are just returning one type you should avoid the problem of getting back an environment type of `Clock with Clock`. But I guess if you did manually specify the environment type or looked at the type signature it could be confusing.\r\n\r\nAs far as I can tell they are identical from a type inference perspective and I think I have included tests for all possible relationships between the environment types.\r\n\r\nWhichever one we use may be good to say what we think is best practice here and try to do more consistently.",
        "createdAt" : "2019-12-03T20:15:02Z",
        "updatedAt" : "2019-12-03T20:15:02Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "d95f197a-18ec-442a-9a81-91182f2bce42",
        "parentId" : "c6cc3958-7678-44c0-9d52-3813656f4a62",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Thinking about this a bit more, I'm actually not sure this encoding should be surprising, at least given everything else we do in ZIO. Almost everything we do in ZIO where we compose two effects with environment types follows this pattern. For example, the signature of `ZIO#flatMap` is:\r\n\r\n```scala\r\ndef flatMap[R1 <: R, E1 >: E, B](k: A => ZIO[R1, E1, B]): ZIO[R1, E1, B]\r\n```\r\n\r\nHere again we have a constraint that `R1 <: R` but that doesn't actually mean `k` has to use all the environmental effects that `self` does because of contravariance. So this \"trick\" is really just taking what we do in method type signatures all the time and pulling the `R` from a type parameter of `self` to a type parameter of the method since there is no `self` type here.",
        "createdAt" : "2019-12-03T20:45:42Z",
        "updatedAt" : "2019-12-03T20:45:42Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "09667508230b1f09ff6ccdc5b4ada412fe516a1d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1227,1231 @@   * The acquire and release actions will be performed uninterruptibly.\n   */\n  final def make[R, R1 <: R, E, A](acquire: ZIO[R, E, A])(release: A => ZIO[R1, Nothing, Any]): ZManaged[R1, E, A] =\n    ZManaged(acquire.map(r => Reservation(IO.succeed(r), _ => release(r))))\n"
  },
  {
    "id" : "b439a5ed-120e-43e7-b5f1-06d21368da32",
    "prId" : 2324,
    "prUrl" : "https://github.com/zio/zio/pull/2324#pullrequestreview-324290604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fdf24e0-2d0b-44b3-a4ac-2f85a0c05714",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Should `f` here be `R => ZManaged[R, E, A]` or `R => ZIO[R, E, A]`? I ran into the same thing with regard to `accessM` on `ZStream`. It seems like it could just be the first one, and that is more consistent with other `M` methods, but I'm not sure.",
        "createdAt" : "2019-11-26T21:50:46Z",
        "updatedAt" : "2019-11-30T20:35:00Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "710d9d50-f311-492d-ad52-9444d5fd8497",
        "parentId" : "5fdf24e0-2d0b-44b3-a4ac-2f85a0c05714",
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : "My feeling is that we are more flexible with the current signature.\r\nI think the proposed signature would be equivalent to ZIO.accessM(???).toManaged_ which I feel is something you need less often.",
        "createdAt" : "2019-11-27T13:13:25Z",
        "updatedAt" : "2019-11-30T20:35:00Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      },
      {
        "id" : "d7994043-fd36-43b8-bf38-f96e72c01b05",
        "parentId" : "5fdf24e0-2d0b-44b3-a4ac-2f85a0c05714",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Added a comment related to this in #2337.",
        "createdAt" : "2019-11-27T14:05:10Z",
        "updatedAt" : "2019-11-30T20:35:00Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "60ecefbf-356a-4736-92b9-23377ce2d66a",
        "parentId" : "5fdf24e0-2d0b-44b3-a4ac-2f85a0c05714",
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : "I'll rename this to accessManaged and add accessM as per John's comment",
        "createdAt" : "2019-11-28T13:35:09Z",
        "updatedAt" : "2019-11-30T20:35:00Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      },
      {
        "id" : "ec99cf65-c280-4b57-9275-6bd7acfe1f11",
        "parentId" : "5fdf24e0-2d0b-44b3-a4ac-2f85a0c05714",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Sounds good. I am doing the same thing on `ZStream`.",
        "createdAt" : "2019-11-28T13:36:48Z",
        "updatedAt" : "2019-11-30T20:35:00Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbc9587e0a0ae4949a1d44f791f715e88296bedb",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +909,913 @@\n  final class AccessManagedPartiallyApplied[R](private val dummy: Boolean = true) extends AnyVal {\n    def apply[E, A](f: R => ZManaged[R, E, A]): ZManaged[R, E, A] =\n      ZManaged.environment.flatMap(f)\n  }"
  },
  {
    "id" : "5715a3d9-bb56-4014-9b81-e69c39defa7b",
    "prId" : 2046,
    "prUrl" : "https://github.com/zio/zio/pull/2046#pullrequestreview-307783747",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fde3980-4282-48ad-b325-320d511f5cb3",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Curious, what's the motivation for the change? The differences are mainly correct usage of `ZIOFn` and error preservation (which shouldn't matter here because `finalizer.set` is a `UIO`)",
        "createdAt" : "2019-10-28T11:19:47Z",
        "updatedAt" : "2019-10-28T11:19:47Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "1db18d64-1bc2-48e5-ab81-1c2e5be1b4d5",
        "parentId" : "8fde3980-4282-48ad-b325-320d511f5cb3",
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "@iravid Less low-level code; also this is the only instance of `uninterruptibleMask(restore(_).catch)` aside of `bracketExit` in core and turns out it just duplicates it – making it just reuse `bracketExit` also safeguards it against any changes to finalizer behavior :)",
        "createdAt" : "2019-10-28T11:26:16Z",
        "updatedAt" : "2019-10-28T11:26:41Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      },
      {
        "id" : "dc2181cf-a468-4be7-a162-820a3f5de911",
        "parentId" : "8fde3980-4282-48ad-b325-320d511f5cb3",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Ok, makes sense!",
        "createdAt" : "2019-10-28T11:27:17Z",
        "updatedAt" : "2019-10-28T11:27:18Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "5190b559ce1579101a2dac526ae306a0a346c618",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +407,411 @@      Ref.make[Exit[Any, Any] => ZIO[R1, Nothing, Any]](_ => UIO.unit).map { finalizer =>\n        Reservation(\n          acquire = ZIO.bracketExit(self.reserve)(\n            (res, exitA: Exit[E, A]) => finalizer.set(exitU => res.release(exitU).ensuring(cleanup(exitA)))\n          )(_.acquire),"
  },
  {
    "id" : "170e0f0a-1b84-45ab-a768-69175d62e7bc",
    "prId" : 1952,
    "prUrl" : "https://github.com/zio/zio/pull/1952#pullrequestreview-300969245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c0bc429-c926-4586-bb0c-228dd825fafe",
        "parentId" : null,
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : ":+1: ",
        "createdAt" : "2019-10-11T23:52:12Z",
        "updatedAt" : "2019-10-14T08:15:06Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf66cc3cdeb8caae5ab18b041abda8157af12dda",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +227,231 @@      Ref.make[List[Exit[_, _] => ZIO[R1, Nothing, Any]]](Nil).map { finalizers =>\n        Reservation(\n          acquire = ZIO.uninterruptibleMask { restore =>\n            reserve\n              .flatMap(resR => finalizers.update(resR.release :: _) *> restore(resR.acquire))"
  },
  {
    "id" : "dc4e6710-ea1f-4ccc-91ff-4f55881a1cd8",
    "prId" : 1848,
    "prUrl" : "https://github.com/zio/zio/pull/1848#pullrequestreview-294655488",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bbe65e2-7bc6-497b-9298-783fc3977d80",
        "parentId" : null,
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Not sure if we should stick to `Any` as per John's comment in some other PR. Personally I'm ok with either.",
        "createdAt" : "2019-09-28T21:58:45Z",
        "updatedAt" : "2019-09-28T22:06:41Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "5dad0d8e6762f8f34f65321bcc7d5d7b1d790a49",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +569,573 @@   * ZManaged value.\n   */\n  final def tapM[R1 <: R, E1 >: E](f: A => ZIO[R1, E1, _]): ZManaged[R1, E1, A] =\n    mapM(a => f(a).as(a))\n"
  },
  {
    "id" : "fa184dce-dbf4-4eb7-8fb5-d4d9c39fc016",
    "prId" : 1848,
    "prUrl" : "https://github.com/zio/zio/pull/1848#pullrequestreview-294655488",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5817e74d-d575-47cf-b65b-1dca33989e65",
        "parentId" : null,
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "This reminds me of `Semaphore.withPermitManaged`. Cool.",
        "createdAt" : "2019-09-28T22:04:41Z",
        "updatedAt" : "2019-09-28T22:06:41Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "5dad0d8e6762f8f34f65321bcc7d5d7b1d790a49",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1012,1016 @@   * variant.\n   */\n  final def fromEffectUninterruptible[R, E, A](fa: ZIO[R, E, A]): ZManaged[R, E, A] =\n    ZManaged(fa.map(a => Reservation(UIO.succeed(a), _ => UIO.unit)))\n"
  },
  {
    "id" : "c8adea0d-dc6d-476a-bef8-09811533ec25",
    "prId" : 1760,
    "prUrl" : "https://github.com/zio/zio/pull/1760#pullrequestreview-291480895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5d84b08-a913-45af-ac40-5282215b230a",
        "parentId" : null,
        "authorId" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "body" : "Is this because of Scala 3?",
        "createdAt" : "2019-09-21T21:10:02Z",
        "updatedAt" : "2019-09-21T21:14:58Z",
        "lastEditedBy" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "tags" : [
        ]
      },
      {
        "id" : "a8eeb6cd-6246-41c7-9e07-9da899d80717",
        "parentId" : "b5d84b08-a913-45af-ac40-5282215b230a",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Yes, just trying to implement #1759 and at least not add any more existential types.",
        "createdAt" : "2019-09-21T21:23:49Z",
        "updatedAt" : "2019-09-21T21:23:49Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1266e842ec68b7df21629f8ebf62a5418be303f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +678,682 @@   * exit value in the event of early release.\n   */\n  final def withEarlyReleaseExit(exit: Exit[Any, Any]): ZManaged[R, E, (URIO[R, Any], A)] =\n    ZManaged[R, E, (URIO[R, Any], A)] {\n      reserve.flatMap {"
  },
  {
    "id" : "8170f0a7-15ec-4999-be8d-5e323276a0ed",
    "prId" : 1722,
    "prUrl" : "https://github.com/zio/zio/pull/1722#pullrequestreview-291468634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "275f9b05-8e5f-4b02-9acf-4a684a6e8dc8",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "How about renaming both to `earlyRelease` and `earlyReleaseWith`, this seems to be more in line with other combinators that have a more powerful version.",
        "createdAt" : "2019-09-21T09:00:15Z",
        "updatedAt" : "2019-09-21T09:00:15Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "226c5b20-e03a-4265-bec0-4d5ff81ac9ac",
        "parentId" : "275f9b05-8e5f-4b02-9acf-4a684a6e8dc8",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "I think maybe `withEarlyRelease` indicates more clearly that it is giving you an option to do early release but not actually doing it? And we do have other `Exit` variants like `finalizer` and `finalizerExit`. But that is super subjective. I'm fine with either one. @iravid What do you think?",
        "createdAt" : "2019-09-21T09:04:27Z",
        "updatedAt" : "2019-09-21T09:04:27Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "e3b84edf-1428-4f53-add4-3ca1330a697b",
        "parentId" : "275f9b05-8e5f-4b02-9acf-4a684a6e8dc8",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "`withEarlyRelease` is probably more accurate as it \"adds\" the option to release early",
        "createdAt" : "2019-09-21T15:05:06Z",
        "updatedAt" : "2019-09-21T15:05:06Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "c80419d47c8d2f1e59b28514d192425a8019dc6a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +678,682 @@   * exit value in the event of early release.\n   */\n  final def withEarlyReleaseExit(exit: Exit[_, _]): ZManaged[R, E, (URIO[R, _], A)] =\n    ZManaged[R, E, (URIO[R, _], A)] {\n      reserve.flatMap {"
  },
  {
    "id" : "d72fef40-ad7a-4064-bcbe-3d2aecb3080d",
    "prId" : 1427,
    "prUrl" : "https://github.com/zio/zio/pull/1427#pullrequestreview-278322377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dde8be4d-f7fd-453d-83ed-c3275a5ffc06",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This looks great!",
        "createdAt" : "2019-08-22T10:19:23Z",
        "updatedAt" : "2019-08-22T10:19:23Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "79f9daa63961ade3e1f4cb706c242c192b3cdac6",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +844,848 @@   * mutating finalizers.\n   */\n  final def finalizerRef[R](\n    initial: Exit[_, _] => ZIO[R, Nothing, Any]\n  ): ZManaged[R, Nothing, Ref[Exit[_, _] => ZIO[R, Nothing, Any]]] ="
  },
  {
    "id" : "63ea78a2-002f-428f-895e-955abe1f75b1",
    "prId" : 1427,
    "prUrl" : "https://github.com/zio/zio/pull/1427#pullrequestreview-278322541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a03de941-0efa-4afb-8d73-73b46756407f",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This looks great!",
        "createdAt" : "2019-08-22T10:19:44Z",
        "updatedAt" : "2019-08-22T10:19:44Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "79f9daa63961ade3e1f4cb706c242c192b3cdac6",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +844,848 @@   * mutating finalizers.\n   */\n  final def finalizerRef[R](\n    initial: Exit[_, _] => ZIO[R, Nothing, Any]\n  ): ZManaged[R, Nothing, Ref[Exit[_, _] => ZIO[R, Nothing, Any]]] ="
  },
  {
    "id" : "060e60bd-3cb1-4d36-a335-0637bb6da608",
    "prId" : 1387,
    "prUrl" : "https://github.com/zio/zio/pull/1387#pullrequestreview-276229953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d555d3bb-a275-4b00-a021-619d83708c3f",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Good catch! 👍 ",
        "createdAt" : "2019-08-17T08:53:44Z",
        "updatedAt" : "2019-08-17T21:07:16Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4585e4a9d128a025aa44b2188cd2187559cfd32",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +792,796 @@   * because a defect has been detected in the code.\n   */\n  final def dieMessage(message: String): ZManaged[Any, Nothing, Nothing] = die(new RuntimeException(message))\n\n  /**"
  },
  {
    "id" : "2fe8f777-34f1-4cdd-be65-68148d2e92b1",
    "prId" : 1354,
    "prUrl" : "https://github.com/zio/zio/pull/1354#pullrequestreview-270957106",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "faa421e2-f631-4949-a94c-58e935e788a1",
        "parentId" : null,
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "nice catch!",
        "createdAt" : "2019-08-05T19:19:26Z",
        "updatedAt" : "2019-08-05T19:28:31Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      }
    ],
    "commit" : "104f4254b5a166b933126a0bfac07d461e48a3f0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +22,26 @@\n/**\n * A `Reservation[-R, +E, +A]` encapsulates resource acquisition and disposal\n * without specifying when or how that resource might be used.\n *"
  }
]