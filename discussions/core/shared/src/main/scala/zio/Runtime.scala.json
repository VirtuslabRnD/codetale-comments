[
  {
    "id" : "1c9d74df-1db1-47a0-856a-cc5e6daf47f4",
    "prId" : 4120,
    "prUrl" : "https://github.com/zio/zio/pull/4120#pullrequestreview-474811697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78aa506f-5993-4ce4-a6f4-5193b25b3cc6",
        "parentId" : null,
        "authorId" : "56df1b23-bbcc-41fe-bb95-36e07b5ff1e8",
        "body" : "isn't the situation of JavaScript here similar to that of Native?",
        "createdAt" : "2020-08-25T19:59:03Z",
        "updatedAt" : "2020-08-25T19:59:04Z",
        "lastEditedBy" : "56df1b23-bbcc-41fe-bb95-36e07b5ff1e8",
        "tags" : [
        ]
      },
      {
        "id" : "2b62ee65-b2f0-4ce4-bfcf-3aa45ab84ace",
        "parentId" : "78aa506f-5993-4ce4-a6f4-5193b25b3cc6",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "I'm not sure what the situation is on Native here. At this point we have no tests for Native and there is an ongoing effort to get those working with associated changes so my overall point of view is we address Native specific issues as part of that but could definitely flip this to only yield on the JVM.",
        "createdAt" : "2020-08-25T20:03:59Z",
        "updatedAt" : "2020-08-25T20:03:59Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd3dc0f91726917ad404e7ef70c81e0c2e521aba",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +104,108 @@   */\n  final def unsafeRunAsyncCancelable[E, A](zio: => ZIO[R, E, A])(k: Exit[E, A] => Any): Fiber.Id => Exit[E, A] = {\n    lazy val curZIO = if (Platform.isJS) zio else ZIO.yieldNow *> zio\n    unsafeRunWith(curZIO)(k)\n  }"
  },
  {
    "id" : "dd6f475c-0494-4af3-8702-b050caee0990",
    "prId" : 2751,
    "prUrl" : "https://github.com/zio/zio/pull/2751#pullrequestreview-350211353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0c6e76d-8ef6-4a43-a9a3-d920ea61c8a2",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "With `unsafeGlobal`, it occurs to me we have 2 different meanings of `Global`: first off, global as in \"powered by the global Platform\", as in \"powered by the global execution context\". Then we have `unsafeGlobal`, which is global as in \"resources that are global, for the lifetime of the application, and not deallocated until shutdown\".\r\n\r\nWe need to give one of them a different name to avoid confusion.",
        "createdAt" : "2020-01-29T15:47:04Z",
        "updatedAt" : "2020-02-08T17:50:15Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a90604f89029e030deb10cc520ad7be79aa25a7",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +204,208 @@  lazy val default = Runtime((), Platform.default)\n\n  lazy val global = Runtime((), Platform.global)\n\n  /**"
  },
  {
    "id" : "06368035-e49b-425b-bf38-66e9dca9c4a3",
    "prId" : 2751,
    "prUrl" : "https://github.com/zio/zio/pull/2751#pullrequestreview-350792879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f40b28af-7b34-4b92-8ce9-a704c7d152da",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "To be \"ZIO best practice\" here we should wrap the inner block in `UIO.effectSuspend` since we are calling `addShutdownHook` there. Won't make a difference here but could be useful for people perusing the code.",
        "createdAt" : "2020-01-30T12:16:21Z",
        "updatedAt" : "2020-02-08T17:50:15Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "54f1eae9-7a92-4a69-99cb-771a3fb03c91",
        "parentId" : "f40b28af-7b34-4b92-8ce9-a704c7d152da",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Good point. Will fix.",
        "createdAt" : "2020-01-30T12:41:55Z",
        "updatedAt" : "2020-02-08T17:50:15Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a90604f89029e030deb10cc520ad7be79aa25a7",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +224,228 @@        case Reservation(acquire, release) =>\n          Ref.make(true).flatMap { finalize =>\n            val finalizer = () =>\n              runtime.unsafeRun {\n                release(Exit.unit).whenM(finalize.getAndSet(false)).uninterruptible"
  },
  {
    "id" : "bc31efd1-b3f4-4158-8533-53a9a427789b",
    "prId" : 1031,
    "prUrl" : "https://github.com/zio/zio/pull/1031#pullrequestreview-251143230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "162eb892-42a5-4922-9902-ffda5e73e9c7",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Scaladoc?",
        "createdAt" : "2019-06-18T14:36:55Z",
        "updatedAt" : "2019-06-18T14:42:41Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "44ded6e77c7d45c81bff202088309c076f6e54b5",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +124,128 @@  /**\n   * Constructs a new `Runtime` with the specified fatal predicate.\n   */\n  final def withFatal(f: Throwable => Boolean): Runtime[R] = mapPlatform(_.withFatal(f))\n"
  }
]