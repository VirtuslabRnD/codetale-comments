[
  {
    "id" : "363b0034-cb04-49a4-9852-540416d8c36d",
    "prId" : 1798,
    "prUrl" : "https://github.com/zio/zio/pull/1798#pullrequestreview-302225141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb3a3d04-94fb-4034-bd5e-967726d2bcbe",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Why not just increase the delay by a random amount? My understanding is that the main use case of `jittered` is to make sure that that we are not inadvertently having a bunch of effects occur at the exact same time and, for example, overwhelming a server. This could be achieved by just adding an additional random delay versus modifying the delay. This would provide a nicer API because we would not have to get into any of these issues about mapping the environment or needing the environment to be a particular type. We could always provide another method that can potentially decrease the delay for users who need that.\r\n\r\nI think we should be able to get to the point where for common use cases the environment type can be fully generic and doesn't require special modification and then modifying the environment can be a feature for power users to achieve functionality not available through a fully generic environment type.",
        "createdAt" : "2019-10-15T00:11:24Z",
        "updatedAt" : "2019-10-27T21:13:24Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "7e709cb7-af92-4b0b-ab72-64e31a922061",
        "parentId" : "bb3a3d04-94fb-4034-bd5e-967726d2bcbe",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "That's probably a good point for `jittered` in particular. Of course we still need things like `modifyDelay`, etc. ",
        "createdAt" : "2019-10-15T00:12:35Z",
        "updatedAt" : "2019-10-27T21:13:24Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "5427d2c6-ffa5-4508-a8f4-a13dffcc3d8c",
        "parentId" : "bb3a3d04-94fb-4034-bd5e-967726d2bcbe",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Yes exactly.",
        "createdAt" : "2019-10-15T00:13:39Z",
        "updatedAt" : "2019-10-27T21:13:24Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "e47856e7-ecaf-42fb-9ade-09e0e1a47845",
        "parentId" : "bb3a3d04-94fb-4034-bd5e-967726d2bcbe",
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : "I have added ZSchedule#randomDelay and ZSchedule#randomDelayNormal that create a schedule that sleeps with a uniformly and normally distributed delay respectively. Using >>> this can be used to add random delays to arbitrary schedules.\r\n\r\nI think jittered is also worth keeping around the way it currently exists.",
        "createdAt" : "2019-10-15T22:05:30Z",
        "updatedAt" : "2019-10-27T21:13:24Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      }
    ],
    "commit" : "85723fa5b39983f7ca4e00175970147787e755db",
    "line" : 373,
    "diffHunk" : "@@ -1,1 +413,417 @@   * Applies random jitter to all sleeps executed by the schedule.\n   */\n  final def jittered(min: Double = 0.0, max: Double = 1.0)(implicit ev: ZEnv <:< R): ZSchedule[ZEnv, A, B] =\n    jitteredEnv(min, max)(f => ZEnv.mapClock(f) andThen ev.apply)\n"
  },
  {
    "id" : "c9d44e37-bac2-4b5b-9881-924530b19b0b",
    "prId" : 1798,
    "prUrl" : "https://github.com/zio/zio/pull/1798#pullrequestreview-307477401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62f8183d-bbb2-4120-8102-5ba9d6ec8142",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Way cleaner than before, really quite nice!",
        "createdAt" : "2019-10-25T22:28:12Z",
        "updatedAt" : "2019-10-27T21:13:24Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "85723fa5b39983f7ca4e00175970147787e755db",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +61,65 @@   * Updates the schedule based on a new input and the current state.\n   */\n  val update: (A, State) => ZIO[R, Unit, State]\n\n  /**"
  },
  {
    "id" : "4d6648ea-9677-4935-ae4b-b8c584109ccb",
    "prId" : 1798,
    "prUrl" : "https://github.com/zio/zio/pull/1798#pullrequestreview-307477401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba5a7a4e-5c60-4d2e-ac0a-47678effc83d",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "So much simpler & more essential, both of these.",
        "createdAt" : "2019-10-25T22:28:51Z",
        "updatedAt" : "2019-10-27T21:13:24Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "85723fa5b39983f7ca4e00175970147787e755db",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +83,87 @@      val initial = self.initial.zip(that.initial)\n      val extract = (a: (A, C), s: (self.State, that.State)) => (self.extract(a._1, s._1), that.extract(a._2, s._2))\n      val update  = (a: (A, C), s: (self.State, that.State)) => self.update(a._1, s._1).zipPar(that.update(a._2, s._2))\n    }\n"
  },
  {
    "id" : "a6963d16-598a-47e8-afe2-3dddb431bbd3",
    "prId" : 1798,
    "prUrl" : "https://github.com/zio/zio/pull/1798#pullrequestreview-307534275",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0de7aa7-f911-4e02-b2a7-5894404ced66",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Nice and clean!\r\n\r\nWe may want to consider a test for [this one](https://github.com/zio/zio/issues/1909) so we can close it out in this PR.",
        "createdAt" : "2019-10-25T22:30:32Z",
        "updatedAt" : "2019-10-27T21:13:24Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "6b543294-feb9-4fd6-b793-13fb9d00cd30",
        "parentId" : "f0de7aa7-f911-4e02-b2a7-5894404ced66",
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : "Good point! added",
        "createdAt" : "2019-10-26T16:48:21Z",
        "updatedAt" : "2019-10-27T21:13:24Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      },
      {
        "id" : "09526b28-4950-4bf1-8ab2-cf3e45017585",
        "parentId" : "f0de7aa7-f911-4e02-b2a7-5894404ced66",
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : "I'll also update how the tests are grouped/organized in a seperate pr",
        "createdAt" : "2019-10-26T16:50:15Z",
        "updatedAt" : "2019-10-27T21:13:24Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      }
    ],
    "commit" : "85723fa5b39983f7ca4e00175970147787e755db",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +151,155 @@    new ZSchedule[R1, A1, (B, C)] {\n      type State = (self.State, that.State)\n      val initial = self.initial zip that.initial\n      val extract = (a: A1, s: (self.State, that.State)) => (self.extract(a, s._1), that.extract(a, s._2))\n      val update = (a: A1, s: (self.State, that.State)) =>"
  },
  {
    "id" : "f3a37dd7-a14a-40fd-b424-931d7900bd6d",
    "prId" : 1798,
    "prUrl" : "https://github.com/zio/zio/pull/1798#pullrequestreview-307477401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5173fa29-9faf-4d97-9a88-4ce1aa72fdf8",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Way simpler.",
        "createdAt" : "2019-10-25T22:30:50Z",
        "updatedAt" : "2019-10-27T21:13:24Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "85723fa5b39983f7ca4e00175970147787e755db",
    "line" : 164,
    "diffHunk" : "@@ -1,1 +206,210 @@        state match {\n          case Left(v) =>\n            self.update(a, v).map(Left(_)) orElse that.initial.flatMap(that.update(a, _)).map(Right(_))\n          case Right(v) =>\n            that.update(a, v).map(Right(_))"
  },
  {
    "id" : "c2973fd2-ea8f-4ecd-ae24-2e9f5d704a89",
    "prId" : 1798,
    "prUrl" : "https://github.com/zio/zio/pull/1798#pullrequestreview-307522211",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f51874a9-aa83-45cf-81af-857eeb640806",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Is there a reason to exclude that? For backward compatibility?",
        "createdAt" : "2019-10-25T22:34:26Z",
        "updatedAt" : "2019-10-27T21:13:24Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "8ac00ff7-eee1-4ec8-a4f8-a84d7efef0d7",
        "parentId" : "f51874a9-aa83-45cf-81af-857eeb640806",
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : "We need the current B to decide how to modify sleeps, but sadly cant extract it for initial",
        "createdAt" : "2019-10-26T11:21:53Z",
        "updatedAt" : "2019-10-27T21:13:24Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      }
    ],
    "commit" : "85723fa5b39983f7ca4e00175970147787e755db",
    "line" : 426,
    "diffHunk" : "@@ -1,1 +464,468 @@   * applied to each sleep performed by this schedule.\n   *\n   * Note that this does not apply to sleeps performed in ZSchedule#initial.\n   * All effects executed while calculating the modified duration will run with the old\n   * environment."
  },
  {
    "id" : "9a077630-6816-4815-86aa-9750951b15aa",
    "prId" : 1798,
    "prUrl" : "https://github.com/zio/zio/pull/1798#pullrequestreview-307477401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cca13a3-2af3-4ea2-abec-10b68f4bc344",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "❤️ ",
        "createdAt" : "2019-10-25T22:35:23Z",
        "updatedAt" : "2019-10-27T21:13:24Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "85723fa5b39983f7ca4e00175970147787e755db",
    "line" : 487,
    "diffHunk" : "@@ -1,1 +515,519 @@   * Provide all requirements to the schedule.\n   */\n  final def provide(r: R): ZSchedule[Any, A, B] =\n    provideSome(_ => r)\n"
  },
  {
    "id" : "1f1b903c-5a33-41fa-ae8a-2718785d12b4",
    "prId" : 1798,
    "prUrl" : "https://github.com/zio/zio/pull/1798#pullrequestreview-307477401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48d6be2e-8bd2-46c3-803a-471fb8e98094",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "👍 ",
        "createdAt" : "2019-10-25T22:35:31Z",
        "updatedAt" : "2019-10-27T21:13:24Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "85723fa5b39983f7ca4e00175970147787e755db",
    "line" : 497,
    "diffHunk" : "@@ -1,1 +521,525 @@   * Provide some of the requirements to the schedule.\n   */\n  final def provideSome[R1](f: R1 => R): ZSchedule[R1, A, B] =\n    new ZSchedule[R1, A, B] {\n      type State = self.State"
  },
  {
    "id" : "6c477fbd-7b31-4c89-bfc2-27b4bf9f708f",
    "prId" : 1798,
    "prUrl" : "https://github.com/zio/zio/pull/1798#pullrequestreview-307536099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93d85ba1-8a43-4019-923e-39e4f13605ac",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This isn't quite equivalent to the old reconsider, nor can it be without fixing the env.",
        "createdAt" : "2019-10-25T22:36:13Z",
        "updatedAt" : "2019-10-27T21:13:24Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "31527d66-155c-433c-b831-c8dfa74fa5d5",
        "parentId" : "93d85ba1-8a43-4019-923e-39e4f13605ac",
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : "I'm not quite sure what we are losing compared to the old reconsider.\r\nCan you explain in a little more detail?",
        "createdAt" : "2019-10-26T17:32:25Z",
        "updatedAt" : "2019-10-27T21:13:24Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      }
    ],
    "commit" : "85723fa5b39983f7ca4e00175970147787e755db",
    "line" : 515,
    "diffHunk" : "@@ -1,1 +536,540 @@   */\n  final def reconsider[R1 <: R, A1 <: A](\n    f: (A1, Either[State, State]) => ZIO[R1, Unit, State]\n  ): ZSchedule[R1, A1, B] =\n    updated("
  },
  {
    "id" : "e9f66c5f-29bd-40ba-a4f3-d0eae904d12e",
    "prId" : 1798,
    "prUrl" : "https://github.com/zio/zio/pull/1798#pullrequestreview-307477401",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fcc694a-cdb6-43c2-a595-22a88a844b58",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I really like how the `R` tells you if the schedule sleeps or not now. More information in the type.",
        "createdAt" : "2019-10-25T22:37:38Z",
        "updatedAt" : "2019-10-27T21:13:24Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "85723fa5b39983f7ca4e00175970147787e755db",
    "line" : 765,
    "diffHunk" : "@@ -1,1 +800,804 @@   * current duration between recurrences.\n   */\n  final def fibonacci(one: Duration): ZSchedule[Clock, Any, Duration] =\n    delayed {\n      unfold[(Duration, Duration)]((one, one)) {"
  },
  {
    "id" : "16314b2f-4db6-4617-a24e-62aa63cf2b08",
    "prId" : 1798,
    "prUrl" : "https://github.com/zio/zio/pull/1798#pullrequestreview-307536229",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f44829e-d7d1-4322-a130-dfbca93f3b03",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Intentional change?",
        "createdAt" : "2019-10-25T22:38:29Z",
        "updatedAt" : "2019-10-27T21:13:24Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "9974f98b-cff1-4369-aa36-3b2f653b32e1",
        "parentId" : "6f44829e-d7d1-4322-a130-dfbca93f3b03",
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : "Sadly check subtly changed its semantics as we now have to extract before updating and not after.\r\nThis is a consequence of that change",
        "createdAt" : "2019-10-26T17:36:11Z",
        "updatedAt" : "2019-10-27T21:13:24Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      }
    ],
    "commit" : "85723fa5b39983f7ca4e00175970147787e755db",
    "line" : 889,
    "diffHunk" : "@@ -1,1 +925,929 @@   * that in `(op: IO[E, A]).repeat(Schedule.recurs(0)) `, op is not done at all.\n   */\n  final def recurs(n: Int): Schedule[Any, Int] = forever.whileOutput(_ < n)\n\n  /**"
  }
]