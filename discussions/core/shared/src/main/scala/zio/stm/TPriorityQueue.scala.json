[
  {
    "id" : "e90ef235-15b9-4836-a6ad-dcac5773aaf1",
    "prId" : 4623,
    "prUrl" : "https://github.com/zio/zio/pull/4623#pullrequestreview-578733024",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "599a6898-8233-49fa-9289-88c32837430d",
        "parentId" : null,
        "authorId" : "ade9c4cf-e4cb-41af-a70b-b2af2be5fd37",
        "body" : "do you normally implement `nonEmpty` in similar collections?",
        "createdAt" : "2021-01-28T20:26:35Z",
        "updatedAt" : "2021-01-28T20:54:18Z",
        "lastEditedBy" : "ade9c4cf-e4cb-41af-a70b-b2af2be5fd37",
        "tags" : [
        ]
      },
      {
        "id" : "63606d1e-991e-4cd9-ad62-ea9d3887c6f3",
        "parentId" : "599a6898-8233-49fa-9289-88c32837430d",
        "authorId" : "6080cd8f-e671-4d49-a54c-b6159456ac0e",
        "body" : "We don't yet, but we could provide them separately.",
        "createdAt" : "2021-01-28T20:30:05Z",
        "updatedAt" : "2021-01-28T20:54:18Z",
        "lastEditedBy" : "6080cd8f-e671-4d49-a54c-b6159456ac0e",
        "tags" : [
        ]
      },
      {
        "id" : "325342ca-e411-4e89-bfb1-17e38c2c2352",
        "parentId" : "599a6898-8233-49fa-9289-88c32837430d",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "We haven't on a lot of these historically but I don't think there is any reason not to. I just added it to this PR for `TPriorityQueue`.",
        "createdAt" : "2021-01-28T20:56:04Z",
        "updatedAt" : "2021-01-28T20:56:04Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f12f8f1f0b66397f6fa800925fa11862ed37c0ea",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +34,38 @@   * Checks whether the queue is empty.\n   */\n  def isEmpty: USTM[Boolean] =\n    ref.get.map(_.isEmpty)\n"
  },
  {
    "id" : "7bb5b486-8320-4b0d-b53c-71979048601f",
    "prId" : 3923,
    "prUrl" : "https://github.com/zio/zio/pull/3923#pullrequestreview-440840602",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7df6c32-e3f1-4e09-b519-ffb985df81e9",
        "parentId" : null,
        "authorId" : "ade9c4cf-e4cb-41af-a70b-b2af2be5fd37",
        "body" : "we specify all the values at same partial ordering in a non-empty list ( a cons), as opposed to counting how many elements of same partial ordering we have.",
        "createdAt" : "2020-07-01T12:53:30Z",
        "updatedAt" : "2020-07-01T12:53:31Z",
        "lastEditedBy" : "ade9c4cf-e4cb-41af-a70b-b2af2be5fd37",
        "tags" : [
        ]
      }
    ],
    "commit" : "c696f9a7db936c018faaa299aefceb6638b5c65f",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +35,39 @@   */\n  def offer(a: A): USTM[Unit] =\n    ref.update(map => map + (a -> map.get(a).fold(::(a, Nil))(::(a, _))))\n\n  /**"
  },
  {
    "id" : "15b54944-6dc7-4df9-a576-9ddcc949746a",
    "prId" : 3923,
    "prUrl" : "https://github.com/zio/zio/pull/3923#pullrequestreview-440843334",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8727b360-6120-4d03-9ea5-fd023592e144",
        "parentId" : null,
        "authorId" : "ade9c4cf-e4cb-41af-a70b-b2af2be5fd37",
        "body" : "this is where we make use of the `a: A` on left side of `SortedMap` in `TRef[SortedMap[A, ::[A]]` by removing the elements at same priority/partial ordering when there is no more.",
        "createdAt" : "2020-07-01T12:57:04Z",
        "updatedAt" : "2020-07-01T12:58:58Z",
        "lastEditedBy" : "ade9c4cf-e4cb-41af-a70b-b2af2be5fd37",
        "tags" : [
        ]
      }
    ],
    "commit" : "c696f9a7db936c018faaa299aefceb6638b5c65f",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +130,134 @@        r match {\n          case h :: t => updated += (a -> ::(h, t))\n          case Nil    => updated -= a\n        }\n        i += l.length"
  },
  {
    "id" : "470e1d74-a9da-4040-a46d-827247141176",
    "prId" : 3756,
    "prUrl" : "https://github.com/zio/zio/pull/3756#pullrequestreview-428260733",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "664d9090-4a40-4dec-afc0-fe4113ba343d",
        "parentId" : null,
        "authorId" : "ade9c4cf-e4cb-41af-a70b-b2af2be5fd37",
        "body" : "s/first/largest/ ?",
        "createdAt" : "2020-06-04T17:28:48Z",
        "updatedAt" : "2020-06-11T23:19:30Z",
        "lastEditedBy" : "ade9c4cf-e4cb-41af-a70b-b2af2be5fd37",
        "tags" : [
        ]
      },
      {
        "id" : "6533e0cf-5fb5-418b-9219-9c291a2f2210",
        "parentId" : "664d9090-4a40-4dec-afc0-fe4113ba343d",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "It is actually the value that is first in the ordering which is typically the value that is \"smallest\", (e.g. a priority queue based with events and times would typically return the earliest time event first). You can always negate the ordering if you want the opposite behavior.",
        "createdAt" : "2020-06-10T16:54:45Z",
        "updatedAt" : "2020-06-11T23:19:30Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "f72997fc-182c-4f2d-887d-ccb21b751d86",
        "parentId" : "664d9090-4a40-4dec-afc0-fe4113ba343d",
        "authorId" : "ade9c4cf-e4cb-41af-a70b-b2af2be5fd37",
        "body" : "I was sticking to known implementations as opposed to concept, priority is about what's next or first. Good point.",
        "createdAt" : "2020-06-10T17:05:59Z",
        "updatedAt" : "2020-06-11T23:19:30Z",
        "lastEditedBy" : "ade9c4cf-e4cb-41af-a70b-b2af2be5fd37",
        "tags" : [
        ]
      }
    ],
    "commit" : "7aab1cf95a8ba3e032244695fdafed0322fa8501",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +23,27 @@ * of type `V`. Each value is associated with a key of type `K` that an\n * `Ordering` is defined on. Unlike a `TQueue`, `take` returns the highest\n * priority value (the value that is first in the specified ordering) as\n * opposed to the first value offered to the queue. The ordering that elements\n * with the same priority will be taken from the queue is not guaranteed."
  }
]