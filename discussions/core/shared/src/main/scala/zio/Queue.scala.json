[
  {
    "id" : "f590460e-ebd3-4530-8f65-d33653579d4f",
    "prId" : 1468,
    "prUrl" : "https://github.com/zio/zio/pull/1468#pullrequestreview-279280904",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c56fc680-ce3d-4e17-8ce4-90b6374885ac",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Isn't there a likelihood of that action being interrupted in `*>` right after `checkShutdownState`? Perhaps that part should be uninterruptible?",
        "createdAt" : "2019-08-24T07:57:50Z",
        "updatedAt" : "2019-08-24T07:57:50Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "c62aafb8-af4b-4dde-8f13-4d712b3b0678",
        "parentId" : "c56fc680-ce3d-4e17-8ce4-90b6374885ac",
        "authorId" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "body" : "I donâ€™t see the problem if it was interrupted there? Thereâ€™s a `onInterrupt` to clean it up. \r\n\r\nWhat I added is just a check that the queue wasnâ€™t shut down before awaiting. If it was shut down, `checkShutdownState` will interrupt the current fiber (no endless waiting) and `onInterrupt` will remove the promise. ",
        "createdAt" : "2019-08-24T08:08:55Z",
        "updatedAt" : "2019-08-24T08:08:56Z",
        "lastEditedBy" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "tags" : [
        ]
      },
      {
        "id" : "327dc4dc-d762-4e9d-8529-e573016d35a9",
        "parentId" : "c56fc680-ce3d-4e17-8ce4-90b6374885ac",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Oh, right ðŸ‘Œ",
        "createdAt" : "2019-08-24T08:16:29Z",
        "updatedAt" : "2019-08-24T08:16:29Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "546c0af3be7b86ce5e8ae249f0c30a8d2af6a67c",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +163,167 @@                  unsafeOffer(as, p)\n                  unsafeOnQueueEmptySpace(queue)\n                } *> checkShutdownState *> p.await).onInterrupt(IO.effectTotal(unsafeRemove(p)))\n          } yield true\n        }"
  }
]