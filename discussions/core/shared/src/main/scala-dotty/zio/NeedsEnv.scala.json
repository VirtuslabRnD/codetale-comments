[
  {
    "id" : "58c992a6-c906-4f56-bbd5-59fd2917fc2f",
    "prId" : 3080,
    "prUrl" : "https://github.com/zio/zio/pull/3080#pullrequestreview-371847680",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "721a8663-a177-48a4-85eb-547df560292e",
        "parentId" : null,
        "authorId" : "f1a836e7-8861-40a9-ae3a-459df312e36f",
        "body" : "This trait + object + implicit def combo looks pretty involved, instead I think you could do:\r\n```scala\r\ntype NeedsEnv[+R] = Not[R =:= Any]\r\n```\r\n(this can be at the top-level since dotty supports top-level definitions, or wrapped in a package object)",
        "createdAt" : "2020-03-10T02:10:15Z",
        "updatedAt" : "2020-03-10T02:10:15Z",
        "lastEditedBy" : "f1a836e7-8861-40a9-ae3a-459df312e36f",
        "tags" : [
        ]
      },
      {
        "id" : "1b0a4018-6862-4d28-81fc-54ddac9ece1b",
        "parentId" : "721a8663-a177-48a4-85eb-547df560292e",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "@smarter If we do that is there a way to provide a custom error message when the implicit is not found like we do today? I think that is quite important.",
        "createdAt" : "2020-03-10T02:20:28Z",
        "updatedAt" : "2020-03-10T02:20:28Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "817d0f81-e855-4089-a8a0-e6f00b2205e4",
        "parentId" : "721a8663-a177-48a4-85eb-547df560292e",
        "authorId" : "f1a836e7-8861-40a9-ae3a-459df312e36f",
        "body" : "`@implicitNotFound` works on a type alias: https://scastie.scala-lang.org/DSpKypbqRT6mXAjM7ly8YA (hmm, looks like we should disable the automatic import suggestions when implicitNotFound is used).",
        "createdAt" : "2020-03-10T02:28:09Z",
        "updatedAt" : "2020-03-10T02:28:09Z",
        "lastEditedBy" : "f1a836e7-8861-40a9-ae3a-459df312e36f",
        "tags" : [
        ]
      },
      {
        "id" : "634ac4e0-9d47-401c-afbf-4f963ebdb67d",
        "parentId" : "721a8663-a177-48a4-85eb-547df560292e",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Okay great!",
        "createdAt" : "2020-03-10T02:29:02Z",
        "updatedAt" : "2020-03-10T02:29:02Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "a9621dfa-abcd-4828-9c98-c0a70aa94504",
        "parentId" : "721a8663-a177-48a4-85eb-547df560292e",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "So playing with this more I don't know if it is going to work because of variance. We need the variance on `CanFail` and `NeedsEnv` so they work with all of our data types and methods that use variance extensively. But if it is just a type alias we need to have the same variance as `Not` which is invariant.",
        "createdAt" : "2020-03-10T02:46:27Z",
        "updatedAt" : "2020-03-10T02:46:27Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "20121a0b-685e-4242-a8e2-076904d9f75f",
        "parentId" : "721a8663-a177-48a4-85eb-547df560292e",
        "authorId" : "f1a836e7-8861-40a9-ae3a-459df312e36f",
        "body" : "Can you give an example where you need it to be variant?",
        "createdAt" : "2020-03-10T10:50:03Z",
        "updatedAt" : "2020-03-10T10:50:04Z",
        "lastEditedBy" : "f1a836e7-8861-40a9-ae3a-459df312e36f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d044ef6e7eaf83dad98316bb4d3eba8a4cfb288d",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +30,34 @@    \"has no requirement, so there is no need to provide the environment.\"\n)\nsealed trait NeedsEnv[+R]\n\nobject NeedsEnv extends NeedsEnv[Nothing] {"
  }
]