[
  {
    "id" : "8fdf6890-074b-46df-96a6-420e9005f4ac",
    "prId" : 722,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/722#pullrequestreview-330248589",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38122e55-7a75-4d18-8011-f591a44df99d",
        "parentId" : null,
        "authorId" : "34e8cbcb-0f79-491e-8a9a-a47b1269128c",
        "body" : "As per https://github.com/typelevel/cats-effect/pull/722#discussion_r355536484, this does somewhat assume that `BlockerPlatform` will continue to only be extended by a single object `Blocker`.\r\n\r\nThe other option would be to have an object to hold the `AtomicInteger` reference, maybe:\r\n```scala\r\nprivate object BlockerPlatform {\r\n  val threadCtr = new AtomicInteger(0)\r\n}\r\n```\r\nIt didn't seem entirely worth it though.",
        "createdAt" : "2019-12-09T23:57:08Z",
        "updatedAt" : "2019-12-10T22:45:44Z",
        "lastEditedBy" : "34e8cbcb-0f79-491e-8a9a-a47b1269128c",
        "tags" : [
        ]
      },
      {
        "id" : "efb22e74-9233-439f-ab8c-bb26234200d5",
        "parentId" : "38122e55-7a75-4d18-8011-f591a44df99d",
        "authorId" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "body" : "Only one subtype is a safe assumption, and if it's wrong, duplicate thread names aren't tragic and can be fixed without binary breakage.",
        "createdAt" : "2019-12-11T01:17:23Z",
        "updatedAt" : "2019-12-11T01:17:31Z",
        "lastEditedBy" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c346dbbdfa3dc0b0dccda595e04ba821c75f335",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +24,28 @@\nprivate[effect] trait BlockerPlatform {\n  private val threadCtr = new AtomicInteger(0)\n\n  /**"
  }
]