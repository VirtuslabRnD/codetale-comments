[
  {
    "id" : "e5905969-95b9-468c-9658-7474d23dab75",
    "prId" : 1134,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1134#pullrequestreview-477120699",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af7a6164-58b3-40c9-bbb2-a16ac94d6392",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "üëç ",
        "createdAt" : "2020-08-27T22:16:26Z",
        "updatedAt" : "2020-08-30T22:15:10Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "412008eb9f64d092ec05f6618aece641293712d6",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +22,26 @@ * For the reasoning behind the design decisions of this code, please consult:\n * https://tokio.rs/blog/2019-10-scheduler#the-next-generation-tokio-scheduler.\n */\n\npackage cats.effect"
  },
  {
    "id" : "74a9b4e9-097d-4dae-9e07-5c47147b71f1",
    "prId" : 1134,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1134#pullrequestreview-478116105",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba7c67c7-f7aa-40de-af9d-cf83574a6b21",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Is this faster than `ReentrantLock`?",
        "createdAt" : "2020-08-27T22:16:59Z",
        "updatedAt" : "2020-08-30T22:15:10Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "1dea1f9b-48f1-4a3a-a847-e831dac30667",
        "parentId" : "ba7c67c7-f7aa-40de-af9d-cf83574a6b21",
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "I have never used a `ReentrantLock`. I'll change and benchmark.",
        "createdAt" : "2020-08-28T17:04:34Z",
        "updatedAt" : "2020-08-30T22:15:10Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      },
      {
        "id" : "06d44d86-129a-457b-91b0-d03998a8ce10",
        "parentId" : "ba7c67c7-f7aa-40de-af9d-cf83574a6b21",
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "`ReentrantLock` implements `AbstractQueuedSynchronizer` which relies on thread parking and unparking to achieve mutual exclusion rather than monitors, so it should be a lot cheaper.",
        "createdAt" : "2020-08-29T07:34:15Z",
        "updatedAt" : "2020-08-30T22:15:10Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      },
      {
        "id" : "f4fa245e-8a23-4193-9ba2-91b421d0f3cf",
        "parentId" : "ba7c67c7-f7aa-40de-af9d-cf83574a6b21",
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "It would be cool if we could get rid of the lock altogether, but that's dangerous and wishful thinking :D",
        "createdAt" : "2020-08-29T07:34:37Z",
        "updatedAt" : "2020-08-30T22:15:10Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      },
      {
        "id" : "1255a05e-7bfa-45d6-a66e-506243922b9f",
        "parentId" : "ba7c67c7-f7aa-40de-af9d-cf83574a6b21",
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "Unfortunately I couldn't get `ReentrantLock` to work. I did use it in the prescribed way of locking and unlocking in a `try/finally` block, but it deadlocks. This happens in `WorkStealingThreadPool#workerToNotify()`.",
        "createdAt" : "2020-08-29T10:09:03Z",
        "updatedAt" : "2020-08-30T22:15:10Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "412008eb9f64d092ec05f6618aece641293712d6",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +40,44 @@\n  // Lock that ensures exclusive access to the internal state of the linked queue.\n  private[this] val lock: AnyRef = new Object()\n\n  // Pointer to the least recently added fiber in the queue."
  },
  {
    "id" : "5681f4c3-8217-423a-9ec8-a36447ff6bb4",
    "prId" : 1134,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1134#pullrequestreview-477891991",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4d03a2c-74c7-43ef-8e1c-4c24ba42ebae",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "I strongly suspect this would be much faster under contention without the lock. Would need to think about it, but should be doable with just three atomic references. We're only allocating these once ever, so the cost is relatively minimal.",
        "createdAt" : "2020-08-27T22:23:07Z",
        "updatedAt" : "2020-08-30T22:15:10Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "edd4174d-ecfb-42be-851e-cc7ba22fa380",
        "parentId" : "f4d03a2c-74c7-43ef-8e1c-4c24ba42ebae",
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "I'm looking for help on this one. `tokio` uses locks in the same places as in this PR, I was mainly concerned with getting things working correctly first, then reiterating for optimizations after a review.",
        "createdAt" : "2020-08-28T17:05:42Z",
        "updatedAt" : "2020-08-30T22:15:10Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "412008eb9f64d092ec05f6618aece641293712d6",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +83,87 @@      len += 1\n    }\n  }\n\n  /**"
  },
  {
    "id" : "1ac004b9-d9ed-44d3-84f6-e1000e918f97",
    "prId" : 1134,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1134#pullrequestreview-478116391",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d2fcacb-8c4c-4f4b-8dbc-6459d0e6becf",
        "parentId" : null,
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "I think a lot of the comments here are redundant and follow clearly from local context",
        "createdAt" : "2020-08-29T07:39:13Z",
        "updatedAt" : "2020-08-30T22:15:10Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      },
      {
        "id" : "9e8a98b9-e465-47fc-b5bc-42018ecf0689",
        "parentId" : "5d2fcacb-8c4c-4f4b-8dbc-6459d0e6becf",
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "Yeah, I got carried away, maybe this class doesn't need comments.",
        "createdAt" : "2020-08-29T10:15:19Z",
        "updatedAt" : "2020-08-30T22:15:10Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "412008eb9f64d092ec05f6618aece641293712d6",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +66,70 @@      }\n\n      // Safe to mutate the internal state because we are holding the lock.\n      if (tail != null) {\n        // The queue is not empty, put the new fiber at the back of the queue."
  },
  {
    "id" : "148dd724-2fc8-480f-8131-c10849cccd01",
    "prId" : 1134,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/1134#pullrequestreview-478116606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "526fe5b6-494c-43f8-8522-c92a3cfcf786",
        "parentId" : null,
        "authorId" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "body" : "Is it sufficient to just set `head` to `null` here? From a GC standpoint, none of the elements in the queue would be reachable via `head`, so all elements would be eligible for collection as long as there aren't any other outstanding, reachable references to elements in the queue.",
        "createdAt" : "2020-08-29T07:43:26Z",
        "updatedAt" : "2020-08-30T22:15:10Z",
        "lastEditedBy" : "3b5d55eb-40d5-4d14-a8a4-3ed1601b5bff",
        "tags" : [
        ]
      },
      {
        "id" : "8726490c-709a-4ada-ad49-8d753697e0c0",
        "parentId" : "526fe5b6-494c-43f8-8522-c92a3cfcf786",
        "authorId" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "body" : "They shouldn't be reachable from anywhere else.",
        "createdAt" : "2020-08-29T10:19:22Z",
        "updatedAt" : "2020-08-30T22:15:10Z",
        "lastEditedBy" : "566d094c-978a-46cc-94f5-bc87e03c9fd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "412008eb9f64d092ec05f6618aece641293712d6",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +166,170 @@\n      // Unlink and drain the queue.\n      var fiber: IOFiber[_] = head\n      var next: IOFiber[_] = null\n      while (fiber != null) {"
  }
]