[
  {
    "id" : "3b0b59b9-a064-49cd-9bf1-5c3a8a8b9001",
    "prId" : 111,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/111#pullrequestreview-87075381",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e7c49cf-9989-4cfa-90c2-67dc2fafa86f",
        "parentId" : null,
        "authorId" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "body" : "Seems this is currently not being hit?",
        "createdAt" : "2018-01-06T13:02:25Z",
        "updatedAt" : "2018-01-06T13:02:25Z",
        "lastEditedBy" : "ff78fcf6-a54d-4325-a0c8-d28cc86fb75e",
        "tags" : [
        ]
      },
      {
        "id" : "db81af9f-d347-4a7b-b17e-8f3285e50fdb",
        "parentId" : "8e7c49cf-9989-4cfa-90c2-67dc2fafa86f",
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "It should be, at least in `OnceOnlyTests`.",
        "createdAt" : "2018-01-06T13:16:32Z",
        "updatedAt" : "2018-01-06T13:16:32Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      }
    ],
    "commit" : "20c58c4407a7ce5dfeeb07b3c432b3cdead54038",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +77,81 @@      a match {\n        case Left(err) => throw err\n        case Right(_) => ()\n      }\n    } else {"
  },
  {
    "id" : "3a8d84f1-b6f5-4d46-b62f-65ebbecf6563",
    "prId" : 95,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/95#pullrequestreview-82907308",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9095fdf5-46e5-4571-ada2-d352f1751f08",
        "parentId" : null,
        "authorId" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "body" : "We don't want to depend on a logger, but is it worth it to explain on stderr why we choked?",
        "createdAt" : "2017-12-11T17:28:20Z",
        "updatedAt" : "2017-12-12T05:42:08Z",
        "lastEditedBy" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "tags" : [
        ]
      },
      {
        "id" : "7e026bd2-8d87-46a4-8e98-f0f62214abcc",
        "parentId" : "9095fdf5-46e5-4571-ada2-d352f1751f08",
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "I'd prefer to not do it, since it introduces extra code — but I don't care much and if it's a popular demand, then OK.\r\n\r\nWhat I'm thinking is that people won't modify this parameter unless they are in big trouble and we can have two issues:\r\n\r\n1. given my calculations, the default value seems fine, but we might underestimate stack growth in common usage\r\n2. we don't control all possible virtual machines, I have no idea for example what's the default stack size on Android or other non-Oracle JVMs\r\n\r\nSo increasing it won't increase performance unless used for very narrow use-cases and if people hit the stack limit because of this default, then we probably need to lower this limit in the library, with the overriding option being made available only to empower people to fix it without having to wait for another release.",
        "createdAt" : "2017-12-11T20:41:00Z",
        "updatedAt" : "2017-12-12T05:42:08Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      },
      {
        "id" : "9b1ad4f5-a603-4d86-9a3d-f36699e73f7f",
        "parentId" : "9095fdf5-46e5-4571-ada2-d352f1751f08",
        "authorId" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "body" : "Okay, I'll buy that.",
        "createdAt" : "2017-12-12T17:05:20Z",
        "updatedAt" : "2017-12-12T17:05:20Z",
        "lastEditedBy" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "tags" : [
        ]
      }
    ],
    "commit" : "b553dadb5ce67c190951f298bad2034bafc588cd",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +112,116 @@    Option(System.getProperty(\"cats.effect.fusionMaxStackDepth\", \"\"))\n      .filter(s => s != null && s.nonEmpty)\n      .flatMap(s => Try(s.toInt).toOption)\n      .filter(_ > 0)\n      .map(_ - 1)"
  },
  {
    "id" : "91ded3a1-a685-47f2-822e-2e8c7169bca3",
    "prId" : 95,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/95#pullrequestreview-82720999",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a82b5ea-f2c9-4185-96fe-27d3bdd2c780",
        "parentId" : null,
        "authorId" : "f03705f3-792d-4b36-bfdf-380cd6f2af9a",
        "body" : "Just confirming what this looks like at `1` which is then reduced to `0` is that every operation is flatMapped rather than `Map`",
        "createdAt" : "2017-12-11T23:08:57Z",
        "updatedAt" : "2017-12-12T05:42:08Z",
        "lastEditedBy" : "f03705f3-792d-4b36-bfdf-380cd6f2af9a",
        "tags" : [
        ]
      },
      {
        "id" : "117b0a67-5817-4d7b-83fe-04bb51836764",
        "parentId" : "4a82b5ea-f2c9-4185-96fe-27d3bdd2c780",
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "Yes, that's the intention — which made me realize that when that counter gets reset we should use a `Map(this, f, 0)` instead of a `FlatMap(this, f.andThen(pure))`.",
        "createdAt" : "2017-12-12T05:04:46Z",
        "updatedAt" : "2017-12-12T05:42:08Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      }
    ],
    "commit" : "b553dadb5ce67c190951f298bad2034bafc588cd",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +113,117 @@      .filter(s => s != null && s.nonEmpty)\n      .flatMap(s => Try(s.toInt).toOption)\n      .filter(_ > 0)\n      .map(_ - 1)\n      .getOrElse(127)"
  },
  {
    "id" : "78778509-1771-420d-bc6e-1590c2573298",
    "prId" : 19,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/19#pullrequestreview-34341244",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a040f6f-0e4c-4248-ac8d-d91590583987",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "I wonder if a `SwitchPoint` would be more efficient, since we could then communicate to HotSpot that the boolean is *never* going to \"flip back\" and it can aggressively optimize accordingly.  Then again, `MethodHandle` is absurdly inefficient until the JIT warms up, so we probably wouldn't gain all that much in the end.  Just a thought.",
        "createdAt" : "2017-04-24T15:48:52Z",
        "updatedAt" : "2017-04-24T18:18:27Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      },
      {
        "id" : "9859b729-edc1-4257-8293-fe9efb1f9ba4",
        "parentId" : "4a040f6f-0e4c-4248-ac8d-d91590583987",
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "I've never used a `SwitchPoint`, but the `AtomicBoolean.getAndSet` gets optimized using platform intrinsics on Java 8, which means that it gets translated into a `LOCK XCHG`, which is more efficient than a loop with `LOCK CMPXCHG`.\r\n\r\nAs far as synchronization goes, it's the most efficient thing you can do, other than *avoiding synchronization entirely* of course.",
        "createdAt" : "2017-04-24T15:56:47Z",
        "updatedAt" : "2017-04-24T18:18:27Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      },
      {
        "id" : "2dd47700-4781-48fc-9e9b-d0ecf16a7d68",
        "parentId" : "4a040f6f-0e4c-4248-ac8d-d91590583987",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "Yep.  I know `AtomicBoolean` is pretty crazy efficient.  Also, since 1.4, HotSpot has had some relatively aggressive speculative boolean constant folding, so a lot of this code can ultimately get inlined away anyway.  Just a thought.",
        "createdAt" : "2017-04-24T15:58:32Z",
        "updatedAt" : "2017-04-24T18:18:27Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c23b45549e6fada1d5b56dae50d787df5108f3b",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +73,77 @@    val wasCalled = new AtomicBoolean(false)\n\n    a => if (wasCalled.getAndSet(true)) () else f(a)\n  }\n"
  }
]