[
  {
    "id" : "c3418a7f-50e7-417e-a7e7-430c3061d335",
    "prId" : 1099,
    "prUrl" : "https://github.com/zio/zio/pull/1099#pullrequestreview-256050443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1946f89e-631a-45a3-aaba-bf888e86d441",
        "parentId" : null,
        "authorId" : "d658ecdb-5876-4c2e-b729-b795b39dd4e8",
        "body" : "This is simpler if we use the `Lock` API, shame about the memory overhead:\r\n\r\n```scala\r\n  private val lock = new ReentrantLock()\r\n  private val valueAvailable = lock.newCondition()\r\n\r\n  final def get(timeout: Long): A = {\r\n    var remainingNano = math.min(timeout, Long.MaxValue/1000000L)*1000000L\r\n    while (value == null && remainingNano > 0L) {\r\n      lock.lock()\r\n      try {\r\n        if (value == null) {\r\n          remainingNano = valueAvailable.awaitNanos(remainingNano)\r\n        }\r\n      } finally {\r\n        lock.unlock()\r\n      }\r\n    }\r\n\r\n    if (value == null) throw new Error(\"Timed out waiting for variable to be set\")\r\n\r\n    value\r\n  }\r\n```\r\n",
        "createdAt" : "2019-06-29T21:02:12Z",
        "updatedAt" : "2019-07-01T08:12:19Z",
        "lastEditedBy" : "d658ecdb-5876-4c2e-b729-b795b39dd4e8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3b72d80944dfeb209fdf227cf4ccb7927f38963",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +52,56 @@   * @throws Error if the timeout is reached without the value being set.\n   */\n  final def get(timeout: Long): A = {\n    var remainingNano = math.min(timeout, Long.MaxValue / nanosPerMilli) * nanosPerMilli\n    while (value == null && remainingNano > 0L) {"
  },
  {
    "id" : "62f73b0d-38e1-42eb-bbda-66bed5faa452",
    "prId" : 1099,
    "prUrl" : "https://github.com/zio/zio/pull/1099#pullrequestreview-256080611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5e7a9e9-c7d5-4bf2-ad52-ecca0f4910ab",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Can we factor `1000000L` into a constant (even a local one)? It is used many times.",
        "createdAt" : "2019-06-30T15:53:03Z",
        "updatedAt" : "2019-07-01T08:12:19Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3b72d80944dfeb209fdf227cf4ccb7927f38963",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +54,58 @@  final def get(timeout: Long): A = {\n    var remainingNano = math.min(timeout, Long.MaxValue / nanosPerMilli) * nanosPerMilli\n    while (value == null && remainingNano > 0L) {\n      val waitMilli = remainingNano / nanosPerMilli\n      val waitNano  = (remainingNano % nanosPerMilli).toInt"
  }
]