[
  {
    "id" : "fae1c44d-9427-4fdf-9ba5-f03d9234d694",
    "prId" : 617,
    "prUrl" : "https://github.com/zio/zio/pull/617#pullrequestreview-215379266",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5877f660-0b18-43d7-8ad9-1f7d7f5e46a2",
        "parentId" : null,
        "authorId" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "body" : "I don't really know where to place these `if-compiles-works` tests.",
        "createdAt" : "2019-03-17T22:37:23Z",
        "updatedAt" : "2019-03-17T22:37:23Z",
        "lastEditedBy" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c0342a848ce4c634178a5384d1f98090e54f662",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +273,277 @@    }\n\n  object UncurriedBracketCompilesRegardlessOrderOfEAndRTypes {\n    class A\n    class B"
  },
  {
    "id" : "1cd5b999-9073-44be-8921-7a30d01628e6",
    "prId" : 33,
    "prUrl" : "https://github.com/zio/zio/pull/33#pullrequestreview-127811418",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72dbc524-e88b-46a2-81ee-a0bd031dba34",
        "parentId" : null,
        "authorId" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "body" : "I'd like to keep `IOSpec` for `IO` combinators test cases and leave `RTSSpec` for testing only the primitives. WDYT @jdegoes?",
        "createdAt" : "2018-06-12T03:17:29Z",
        "updatedAt" : "2018-06-12T03:24:38Z",
        "lastEditedBy" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "tags" : [
        ]
      },
      {
        "id" : "88f1e2f5-30ce-40c4-b2ed-1dab5d734c13",
        "parentId" : "72dbc524-e88b-46a2-81ee-a0bd031dba34",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "It's a nice idea in theory, I am not sure how you can decide what is primitive and not???",
        "createdAt" : "2018-06-12T03:27:52Z",
        "updatedAt" : "2018-06-12T03:27:52Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "e0f7c566-baab-43ef-8f03-07077ae35c56",
        "parentId" : "72dbc524-e88b-46a2-81ee-a0bd031dba34",
        "authorId" : "50f02981-689f-49f5-b80d-3f667da70148",
        "body" : "Sorry, I am just getting familiar with the project. Should I move all the tests to RTSSpec then? ",
        "createdAt" : "2018-06-12T03:33:34Z",
        "updatedAt" : "2018-06-12T03:33:34Z",
        "lastEditedBy" : "50f02981-689f-49f5-b80d-3f667da70148",
        "tags" : [
        ]
      },
      {
        "id" : "43b5d476-32b0-42ee-9020-609e22e1339f",
        "parentId" : "72dbc524-e88b-46a2-81ee-a0bd031dba34",
        "authorId" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "body" : "I was thinking things like testing trampolining, error handling, finalization, etc belong in `RTSSpec` and things like testing all the several combinators accepting traversables recently added belong in `IOSpec`. The rest we can see.",
        "createdAt" : "2018-06-12T03:36:42Z",
        "updatedAt" : "2018-06-12T03:36:43Z",
        "lastEditedBy" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "tags" : [
        ]
      },
      {
        "id" : "78ab030f-04ff-4d0f-be4f-a6603a29dfbb",
        "parentId" : "72dbc524-e88b-46a2-81ee-a0bd031dba34",
        "authorId" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "body" : "@leandrob13 My vote is to keep `IOSpec`, but let's wait for @jdegoes to decide.",
        "createdAt" : "2018-06-12T03:39:56Z",
        "updatedAt" : "2018-06-12T03:39:56Z",
        "lastEditedBy" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "tags" : [
        ]
      },
      {
        "id" : "0766fdf9-e139-4b05-a6fb-ac08c71e9543",
        "parentId" : "72dbc524-e88b-46a2-81ee-a0bd031dba34",
        "authorId" : "50f02981-689f-49f5-b80d-3f667da70148",
        "body" : "Seems ok to me, although I didn't catch it at first (to be honest I don't know what RTS stands for) and that is why I created IOSpec.",
        "createdAt" : "2018-06-12T03:46:09Z",
        "updatedAt" : "2018-06-12T03:46:09Z",
        "lastEditedBy" : "50f02981-689f-49f5-b80d-3f667da70148",
        "tags" : [
        ]
      },
      {
        "id" : "492e25cd-c75c-442f-8d08-beefa72a0af2",
        "parentId" : "72dbc524-e88b-46a2-81ee-a0bd031dba34",
        "authorId" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "body" : "I don't blame you, that's the right instinct. That's why I want to keep it.",
        "createdAt" : "2018-06-12T03:49:11Z",
        "updatedAt" : "2018-06-12T03:49:12Z",
        "lastEditedBy" : "54ce3eb7-2972-4dfe-af78-881ac5ff3a90",
        "tags" : [
        ]
      },
      {
        "id" : "11042ee7-6166-48e3-b745-e28f04771510",
        "parentId" : "72dbc524-e88b-46a2-81ee-a0bd031dba34",
        "authorId" : "50f02981-689f-49f5-b80d-3f667da70148",
        "body" : "Run Time System, I did miss it in the javadoc.\r\n```\r\n * This trait provides a high-performance implementation of a runtime system for\r\n * the `IO` monad on the JVM.\r\n```",
        "createdAt" : "2018-06-12T03:49:37Z",
        "updatedAt" : "2018-06-12T03:49:37Z",
        "lastEditedBy" : "50f02981-689f-49f5-b80d-3f667da70148",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f08fac6d7ef8471f45a361d1bc22772d051392b",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +7,11 @@import scala.util.Try\n\nclass IOSpec extends Specification with GenIO with RTS with ScalaCheck {\n  import Prop.forAll\n"
  }
]