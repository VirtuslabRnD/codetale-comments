[
  {
    "id" : "d02f2ea8-fe4f-4930-980f-229036df2be2",
    "prId" : 905,
    "prUrl" : "https://github.com/zio/zio/pull/905#pullrequestreview-243072230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3382929-eea1-4a9c-b7f2-959faf9860e1",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "There is a `withLatch` combinator courtesy of @regiskuckaertz that we may want to take a look at.",
        "createdAt" : "2019-05-28T13:36:08Z",
        "updatedAt" : "2019-05-28T23:31:21Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "e8a8683a-572f-4564-a63d-bd50ea4f374e",
        "parentId" : "c3382929-eea1-4a9c-b7f2-959faf9860e1",
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : "Just took a look at it.\r\nLooks awesome and we should definitely use it :+1: \r\n\r\nQuestion is whether is should update this pr or make another one were everything is migrated over to withLatch? I would prefer the latter option as we would immediately profit from reduced flakiness :grin: \r\n",
        "createdAt" : "2019-05-28T17:05:03Z",
        "updatedAt" : "2019-05-28T23:31:21Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      },
      {
        "id" : "b2404fbe-9bf4-426d-b0ad-6c0558720ecb",
        "parentId" : "c3382929-eea1-4a9c-b7f2-959faf9860e1",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Then let's do the latter!",
        "createdAt" : "2019-05-29T00:32:19Z",
        "updatedAt" : "2019-05-29T00:32:20Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "fb1335db-2527-42d1-bc53-ef26f54affdf",
        "parentId" : "c3382929-eea1-4a9c-b7f2-959faf9860e1",
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : "Cool :+1: \r\nWhat needs to be still changed in this pr?",
        "createdAt" : "2019-05-29T07:08:05Z",
        "updatedAt" : "2019-05-29T07:08:05Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      }
    ],
    "commit" : "23801bc863857220a0db670683dda542e57fc448",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +308,312 @@    unsafeRun {\n      for {\n        reserveLatch <- Promise.make[Nothing, Unit]\n        releases     <- Ref.make[Int](0)\n        first        = ZManaged.reserve(Reservation(reserveLatch.succeed(()), releases.update(_ + 1)))"
  },
  {
    "id" : "3e60c762-1875-4a3c-8c0a-f31b525c0d53",
    "prId" : 905,
    "prUrl" : "https://github.com/zio/zio/pull/905#pullrequestreview-242675048",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3570370-aec4-4c92-8e36-64b68fe5fe30",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Great to see all the sleeps disappear! 🎉 ",
        "createdAt" : "2019-05-28T13:39:05Z",
        "updatedAt" : "2019-05-28T23:31:21Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "23801bc863857220a0db670683dda542e57fc448",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +343,347 @@    unsafeRun {\n      for {\n        latch   <- Promise.make[Nothing, Unit]\n        managed = ZManaged.make(latch.await)(_ => ZIO.unit)\n        res     <- managed.timeout(Duration.Zero).use(res => ZIO.succeed(res must_=== (None)))"
  },
  {
    "id" : "fd6bb855-bda6-4fd6-8f61-df433e8fe620",
    "prId" : 905,
    "prUrl" : "https://github.com/zio/zio/pull/905#pullrequestreview-243271627",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "515459cc-3eeb-444a-94a3-f8f2d7d0e025",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This one looks more reasonable since sleeping for 20 ms + 20 ms should always involve the passage of >= 40 ms of time.\r\n\r\n_Should_, of course. 😊 ",
        "createdAt" : "2019-05-28T13:43:01Z",
        "updatedAt" : "2019-05-28T23:31:21Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "07988a0c-e545-41b9-b91f-adc14d8d31f9",
        "parentId" : "515459cc-3eeb-444a-94a3-f8f2d7d0e025",
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : "Hopefully :D. You never know with clocks\r\n\r\nThis one will probably be prone to quite a lot of false negatives though. Should we just remove it?",
        "createdAt" : "2019-05-28T16:59:15Z",
        "updatedAt" : "2019-05-28T23:31:21Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      },
      {
        "id" : "780cde24-4dcf-45a1-9154-73c0642ef3f5",
        "parentId" : "515459cc-3eeb-444a-94a3-f8f2d7d0e025",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I have never seen a false positive here, because scheduling + overhead will never come up _short_. You could be conservative and do `>= 39`, but I don't think you have to worry about this one.\r\n\r\n_Think_. 😄 ",
        "createdAt" : "2019-05-29T00:34:20Z",
        "updatedAt" : "2019-05-29T00:34:21Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "a70c3d9d-376b-44db-8456-a01db18f42c1",
        "parentId" : "515459cc-3eeb-444a-94a3-f8f2d7d0e025",
        "authorId" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "body" : "I meant that if the actual code is buggy the test would have a good chance of still passing. Even if only reserve or acquire was measured, etc. ",
        "createdAt" : "2019-05-29T07:07:17Z",
        "updatedAt" : "2019-05-29T07:07:17Z",
        "lastEditedBy" : "2a2f79ba-933f-43cd-9d45-5d769ab0f54d",
        "tags" : [
        ]
      },
      {
        "id" : "98b3daac-8f2f-4a45-aaff-ca0718a0282b",
        "parentId" : "515459cc-3eeb-444a-94a3-f8f2d7d0e025",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Ah in that case, the test has marginal value, maybe best to either delete, or run it a bunch of times like a few other tests in RTSSPec.",
        "createdAt" : "2019-05-29T13:47:35Z",
        "updatedAt" : "2019-05-29T13:47:35Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "23801bc863857220a0db670683dda542e57fc448",
    "line" : 241,
    "diffHunk" : "@@ -1,1 +389,393 @@    )\n    unsafeRun {\n      managed.timed.use { case (duration, _) => ZIO.succeed(duration must be_>=(40.milliseconds)) }\n    }\n  }"
  },
  {
    "id" : "b0763b83-d4ed-4164-a22a-dc6f09a45608",
    "prId" : 839,
    "prUrl" : "https://github.com/zio/zio/pull/839#pullrequestreview-239196596",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41e71c81-e490-4f6a-8dab-27ee1b04b1fc",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "😍",
        "createdAt" : "2019-05-18T12:18:19Z",
        "updatedAt" : "2019-05-19T17:31:36Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "571adc1d1fbbae12a10a66a81a6219e90667d75e",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +99,103 @@    Returns None if the reservation takes longer than d $timeoutReservation\n    Returns None if the acquisition takes longer than d $timeoutAcquisition\n    Returns None if (reservation >>= acquisition) takes longer than d $timeoutAcquisitionAndReservation\n    Runs finalizers if returning None and reservation is successful $timeoutRunFinalizers\n  ZManaged.zipPar"
  },
  {
    "id" : "e9ff6559-e817-4352-9109-cddd39e2bd9f",
    "prId" : 839,
    "prUrl" : "https://github.com/zio/zio/pull/839#pullrequestreview-239196669",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0517f88-4fb5-4ea6-9572-3e8777e730f1",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "This is fantastic. Great coverage here.",
        "createdAt" : "2019-05-18T12:20:39Z",
        "updatedAt" : "2019-05-19T17:31:36Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "571adc1d1fbbae12a10a66a81a6219e90667d75e",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +14,18 @@import scala.collection.mutable\n\nclass ZManagedSpec(implicit ee: org.specs2.concurrent.ExecutionEnv) extends TestRuntime with GenIO with ScalaCheck {\n  import Prop.forAll\n"
  }
]