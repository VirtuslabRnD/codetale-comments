[
  {
    "id" : "23cbdaee-0aa3-4b46-8a94-dcfdb6e8889b",
    "prId" : 897,
    "prUrl" : "https://github.com/zio/zio/pull/897#pullrequestreview-242002607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f31b8306-9a34-4718-b0b0-72ec576d6c0f",
        "parentId" : null,
        "authorId" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "body" : "I had this test that verifies it works \"in practice\", you can include it if you want (it passes):\r\n```scala\r\ndef testSupervisingInheritance = {\r\n    def forkAwaitStart[A](io: UIO[A]) =\r\n      for {\r\n        latch <- Promise.make[Nothing, Unit]\r\n        _     <- (latch.succeed(()) *> io).fork\r\n        _     <- latch.await\r\n      } yield ()\r\n\r\n    unsafeRun(\r\n      (for {\r\n        _     <- forkAwaitStart(forkAwaitStart(forkAwaitStart(IO.succeed(()))))\r\n        fibs <- ZIO.children\r\n      } yield fibs must have size 3).supervised\r\n    )\r\n  }\r\n```",
        "createdAt" : "2019-05-25T01:15:14Z",
        "updatedAt" : "2019-05-26T17:34:11Z",
        "lastEditedBy" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "tags" : [
        ]
      },
      {
        "id" : "342eb78a-aef5-4b2e-be59-b3ec2ecc1a29",
        "parentId" : "f31b8306-9a34-4718-b0b0-72ec576d6c0f",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Added it, thank you! 🙏 ",
        "createdAt" : "2019-05-25T13:14:51Z",
        "updatedAt" : "2019-05-26T17:34:11Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff3a6560499f08fe182782f70d5160aeecb9be56",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +988,992 @@  }\n\n  def testSupervisionIsHeritable = unsafeRun {\n    for {\n      latch <- Promise.make[Nothing, Unit]"
  },
  {
    "id" : "6b94c378-5869-48bd-99d7-44d8c6ef18b9",
    "prId" : 536,
    "prUrl" : "https://github.com/zio/zio/pull/536#pullrequestreview-196268241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b728779e-fd6d-47c1-8c03-4e1d76d30658",
        "parentId" : null,
        "authorId" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "body" : "Is it possible that test failed because docs of ensuring states:\r\n```\r\nThis method should not be used for cleaning up resources, because it's possible the fiber will be interrupted after acquisition but before the finalizer is added.\r\n```\r\n?",
        "createdAt" : "2019-01-24T21:54:05Z",
        "updatedAt" : "2019-01-24T23:20:54Z",
        "lastEditedBy" : "524c15e0-b013-4ec4-bd1d-2b61884828d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "989838843637bd6f186beff2d92644b8afd80b61",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +966,970 @@      fiber <- IO.blocking { start.set(()); Thread.sleep(Long.MaxValue) }.ensuring(done.set(true)).fork\n      _     <- IO.succeed(start.get())\n      _     <- fiber.interrupt\n      value <- done.get\n    } yield value must_=== true"
  },
  {
    "id" : "cb2f0361-69f7-415f-84a5-8bc6aff45a87",
    "prId" : 65,
    "prUrl" : "https://github.com/zio/zio/pull/65#pullrequestreview-135173104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7934ee2-1363-452d-8629-739dbc7a6ccc",
        "parentId" : null,
        "authorId" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "body" : "@jdegoes should we keep this test case?",
        "createdAt" : "2018-07-06T22:11:22Z",
        "updatedAt" : "2018-07-06T22:11:22Z",
        "lastEditedBy" : "4ace600a-1453-4cce-81f8-efdc7c98ad7a",
        "tags" : [
        ]
      },
      {
        "id" : "56af751d-1d6b-4e75-a8ff-b860da6640b2",
        "parentId" : "c7934ee2-1363-452d-8629-739dbc7a6ccc",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Yes, it’s quite useful. Never delete a good test. :)",
        "createdAt" : "2018-07-06T22:24:56Z",
        "updatedAt" : "2018-07-06T22:24:57Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "11668769df6e1c6d9346de49b760bce4e3e71812",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +469,473 @@      f <- IO.sync[Void, Int](1).forever[Void].fork\n      _ <- f.interrupt[Void](new Error(\"terminate forever\"))\n    } yield true\n  )\n"
  }
]