[
  {
    "id" : "f79444a6-1845-4e50-b8c7-7d21a27dd5b9",
    "prId" : 614,
    "prUrl" : "https://github.com/root-project/root/pull/614#pullrequestreview-43696782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6543f1eb-4b71-496e-9bdb-42dec04fca51",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Does print_wrapper actually show things on the terminal?  If not, wouldn't it be better to call it get_wrapper_code?",
        "createdAt" : "2017-06-13T10:34:53Z",
        "updatedAt" : "2017-06-13T10:36:11Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "f2f4baf2-309c-4765-a3fe-ce23141a1bd0",
        "parentId" : "6543f1eb-4b71-496e-9bdb-42dec04fca51",
        "authorId" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "body" : "Seems like this PR got already merged, so I renamed this in #642.",
        "createdAt" : "2017-06-13T11:44:49Z",
        "updatedAt" : "2017-06-13T11:44:49Z",
        "lastEditedBy" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "tags" : [
        ]
      }
    ],
    "commit" : "cdc502a3fded8bd88adeae3c7a1edfb30a8c0958",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +6852,6856 @@   std::string wrapper_name;\n   std::string wrapper;\n   f->print_wrapper(wrapper_name, wrapper);\n   return wrapper;\n}"
  },
  {
    "id" : "af3c81df-e270-4281-aea7-0d083e353426",
    "prId" : 1381,
    "prUrl" : "https://github.com/root-project/root/pull/1381#pullrequestreview-79464376",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "431dd7df-bc9c-4380-bff7-ace436163c72",
        "parentId" : null,
        "authorId" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "body" : "@vgvassilev I reply here to [your comment on the closed PR](https://github.com/root-project/root/pull/1378#pullrequestreview-79456335). I don't think we call recursively `LoadCoreModule` or recursively make TCling instances? And if we do, then we already made a good portion of `declare`s before this code for all the other TCling things, so we would anyway be in deep trouble.",
        "createdAt" : "2017-11-28T10:45:22Z",
        "updatedAt" : "2017-11-28T11:06:06Z",
        "lastEditedBy" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "tags" : [
        ]
      },
      {
        "id" : "00c56846-ed8a-4648-92c5-0ecc06be820e",
        "parentId" : "431dd7df-bc9c-4380-bff7-ace436163c72",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "I think we ought to reduce all `declares` in TCling and that seems to be an easy-to-reduce one.",
        "createdAt" : "2017-11-28T11:00:23Z",
        "updatedAt" : "2017-11-28T11:06:06Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfe40ddd1225113526720a2ee3f1bb90846ee429",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1152,1156 @@   // core modules have defined it:\n   // https://www.gnu.org/software/libc/manual/html_node/Complex-Numbers.html\n   interp.declare(\"#ifdef I\\n #undef I\\n #endif\\n\");\n}\n"
  },
  {
    "id" : "eec23c7e-cdd2-4914-a577-60cb23bd9dbb",
    "prId" : 1564,
    "prUrl" : "https://github.com/root-project/root/pull/1564#pullrequestreview-92845699",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e1e1d67-a4fd-4221-a619-ad2b5463c2f0",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Is the number of calls to ApplyToInterpreterMutex guaranteed by construction?  If not and ApplyToInterpreterMutex is called one too many time, the fInitialMutex could be empty and all the guard like\r\n```\r\n  if (fInitialMutex.back()) \r\n```\r\nwould have random behavior.",
        "createdAt" : "2018-01-30T22:20:30Z",
        "updatedAt" : "2018-01-31T09:00:24Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "785ac838-f5c2-4db1-8770-21793cb5c4ac",
        "parentId" : "3e1e1d67-a4fd-4221-a619-ad2b5463c2f0",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "By construction, but I added an `R__ASSERT`.",
        "createdAt" : "2018-01-31T09:01:23Z",
        "updatedAt" : "2018-01-31T09:01:23Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a65c2a00cd69d157517ee5e73a780227a103745",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +8491,8495 @@      }\n   }\n   fInitialMutex.pop_back();\n}\n"
  },
  {
    "id" : "d5e0140f-7186-41cb-9e13-393091e5851a",
    "prId" : 2093,
    "prUrl" : "https://github.com/root-project/root/pull/2093#pullrequestreview-125080702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54050fa6-5a4b-467e-9809-eb7a32810cde",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Could you prepend a `FIXME:` to the comment here.",
        "createdAt" : "2018-06-01T08:13:45Z",
        "updatedAt" : "2018-06-01T12:02:30Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "089fd8df1de5c643b5987467eee2a4f7177414a3",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +5904,5908 @@            std::string FileName(DirIt->path());\n            if (!llvm::sys::fs::is_directory(FileName) && extension(FileName) == \".so\") {\n               // TCling::IsLoaded is incredibly slow!\n               // No need to check linked libraries, as this function is only invoked\n               // for symbols that cannot be found (neither by dlsym nor in the JIT)."
  },
  {
    "id" : "9bb8e694-f660-4d7a-85d4-c94f6e81dd48",
    "prId" : 2135,
    "prUrl" : "https://github.com/root-project/root/pull/2135#pullrequestreview-126051730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97172e09-5c15-403a-8c92-8e98c03b87e9",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "A slight improvement on that pattern:\r\n```\r\n#ifdef R__USE_CXXMODULES\r\nconstexpr bool useCxxModules = true;\r\n#else\r\nconstexpr bool useCxxModules = false;\r\n#endif\r\n```",
        "createdAt" : "2018-06-05T16:28:35Z",
        "updatedAt" : "2018-06-05T16:28:35Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "68a2c84b3fcd6273611e1ff59baf53a1b1000b1c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +5950,5954 @@\nvoid* TCling::LazyFunctionCreatorAutoload(const std::string& mangled_name) {\n   bool useCxxModules = false;\n#ifdef R__USE_CXXMODULES\n   useCxxModules = true;"
  },
  {
    "id" : "0148537c-257d-45c8-b00c-03cdccd1cb50",
    "prId" : 2148,
    "prUrl" : "https://github.com/root-project/root/pull/2148#pullrequestreview-128124540",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1072f10-3853-4f6f-be7a-94ddf72c022e",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Do we have something similar for the (rarer) case of a global variables? [This is a just a question, not a blocker :) ]",
        "createdAt" : "2018-06-12T14:20:42Z",
        "updatedAt" : "2018-06-12T15:51:31Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "a5ac7e6f-c804-44f0-a18a-c34266eea57e",
        "parentId" : "f1072f10-3853-4f6f-be7a-94ddf72c022e",
        "authorId" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "body" : "This is for global variables. This error message is emitted by dlopen for example when it couldn't find symbol that has to be initialized",
        "createdAt" : "2018-06-12T14:36:23Z",
        "updatedAt" : "2018-06-12T15:51:31Z",
        "lastEditedBy" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "tags" : [
        ]
      },
      {
        "id" : "53676b9e-2d5d-4cdd-b5b2-256320aefab9",
        "parentId" : "f1072f10-3853-4f6f-be7a-94ddf72c022e",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "I am confused ... It mentions 'Function' in the method name ... and thus I would assume it would detect missing symbol for function but not for variables ... i.e.\r\n```\r\n   void ThisFunction();\r\n```\r\nvs\r\n```\r\n   int gGlobalVariable;\r\n```\r\n",
        "createdAt" : "2018-06-12T14:47:01Z",
        "updatedAt" : "2018-06-12T15:51:31Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "156e72a3-b865-416a-ac8a-db98b40aef92",
        "parentId" : "f1072f10-3853-4f6f-be7a-94ddf72c022e",
        "authorId" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "body" : "It'll detect missing symbols for global variables, when\r\n`TTree tree;` was a global variable and libTree.so was not loaded, I think we get an error \"undefined symbol TTree\".",
        "createdAt" : "2018-06-12T16:01:28Z",
        "updatedAt" : "2018-06-12T16:01:39Z",
        "lastEditedBy" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "tags" : [
        ]
      },
      {
        "id" : "6e2a7aa8-2743-4fd7-9148-c01023f8ded2",
        "parentId" : "f1072f10-3853-4f6f-be7a-94ddf72c022e",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "> It'll detect missing symbols for global variables, when\r\n> TTree tree; was a global variable and libTree.so was not loaded, I think we get an error > \"undefined symbol TTree\".\r\n\r\nThis is not the case I am talking about.  it the case of two libraries, \r\n```\r\n// libA.so\r\nTTree gTree;\r\n```\r\nand\r\n```\r\n// libB.so\r\nextern TTree gTree;\r\nLong64_t somefunction() {\r\n   return gTree.GetEntries();\r\n}\r\n```\r\nThen\r\nYou load (explictly or implicitly) libTree.so\r\nand the attempt to load libB.so which will fail with undefined symbol 'gTree'.\r\n\r\nI am guessing that this is not supported yet (and was **not** supported before .. so really, I am just asking :) )\r\n",
        "createdAt" : "2018-06-12T16:31:57Z",
        "updatedAt" : "2018-06-12T16:33:07Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "1386ced4-5763-476a-b8ae-b3c77d762bc4",
        "parentId" : "f1072f10-3853-4f6f-be7a-94ddf72c022e",
        "authorId" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "body" : "I see, yeah I think it's not supported",
        "createdAt" : "2018-06-12T19:58:34Z",
        "updatedAt" : "2018-06-12T19:58:34Z",
        "lastEditedBy" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4894ad7bfc6e4536f0016f0251c301525da8ff4",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +5886,5890 @@   if (errMsg.contains(\"undefined symbol: \")) {\n      std::string mangled_name = std::string(errMsg.split(\"undefined symbol: \").second);\n      void* res = ((TCling*)gCling)->LazyFunctionCreatorAutoload(mangled_name);\n      cling::DynamicLibraryManager* DLM = fInterpreter->getDynamicLibraryManager();\n      if (res && DLM && (DLM->loadLibrary(libStem, permanent, resolved) == cling::DynamicLibraryManager::kLoadLibSuccess))"
  },
  {
    "id" : "98c9beae-b1e6-4a76-8fde-3a84b97c895c",
    "prId" : 2592,
    "prUrl" : "https://github.com/root-project/root/pull/2592#pullrequestreview-158863631",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de2c0dcc-7ae8-4d48-98e2-756961ae7590",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "We can replace this by:\r\n```cpp\r\n  llvm::StringRef moduleName = llvm::sys::path::filename(rootmapfile);\r\n  moduleName.consume_front(\"lib\");\r\n  moduleName.consume_back(\"rootmap\");\r\n```",
        "createdAt" : "2018-09-26T07:33:19Z",
        "updatedAt" : "2018-09-27T13:17:04Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "26e3ed3b0334c02e070b4a678b89d035edce2d85",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +4978,4982 @@   moduleName.consume_front(\"lib\");\n   moduleName.consume_back(\".rootmap\");\n\n   Module *M = interp->getCI()->getPreprocessor().getHeaderSearchInfo().lookupModule(moduleName);\n"
  },
  {
    "id" : "9d6327c8-cf17-412f-9bca-f4992a9afafb",
    "prId" : 2592,
    "prUrl" : "https://github.com/root-project/root/pull/2592#pullrequestreview-158863631",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86e3b248-d5ce-487a-b7a8-7ceebc96376d",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Likewise.",
        "createdAt" : "2018-09-26T07:40:18Z",
        "updatedAt" : "2018-09-27T13:17:04Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "26e3ed3b0334c02e070b4a678b89d035edce2d85",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +5186,5190 @@   }\n   bool needsRootMap = true;\n   if (rootmapfile && *rootmapfile)\n      needsRootMap = requiresRootMap(rootmapfile, fInterpreter);\n"
  },
  {
    "id" : "912e1c39-0c48-4e34-9627-b1ce5491ec32",
    "prId" : 2592,
    "prUrl" : "https://github.com/root-project/root/pull/2592#pullrequestreview-158863631",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf9906fb-d7e8-419d-9bd0-11046b7e16e8",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Likewise.\r\n",
        "createdAt" : "2018-09-26T07:40:26Z",
        "updatedAt" : "2018-09-27T13:17:04Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "26e3ed3b0334c02e070b4a678b89d035edce2d85",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +5271,5275 @@      }\n   }\n   if (rootmapfile && *rootmapfile) {\n      Int_t res;\n      if (needsRootMap)"
  },
  {
    "id" : "f07b1cd3-e397-40e3-8d04-a13ccef709e6",
    "prId" : 2615,
    "prUrl" : "https://github.com/root-project/root/pull/2615#pullrequestreview-156402151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d00ebd6-1fb1-463f-9087-51149a0cd80a",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "If the solution is not to store the emulated tuple in the pcm I’d be much more comfortable with this PR if we do not store it in the pch too. That’d mean dropping the useCxxModules variable. ",
        "createdAt" : "2018-09-18T07:59:38Z",
        "updatedAt" : "2018-09-18T14:45:55Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "60209824-e0de-48b4-8de5-f6413f568d63",
        "parentId" : "4d00ebd6-1fb1-463f-9087-51149a0cd80a",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "If we remove 'useCxxModule' this means that without the module (i.e. current default) the alternate information will not be stored the rootpcm, this will lead to auto-parsing at run-time which would be a disaster.  [Even with the module, I am not clear whether we 'need' the info put into the rootpcm ... i.e. we would need to measure what is the cost]",
        "createdAt" : "2018-09-18T14:37:40Z",
        "updatedAt" : "2018-09-18T14:45:55Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5117fb677abd8a44d0f72e9f2da2b3ab94f7810",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +3583,3587 @@   // details and just overlay a 'simpler'/'simplistic' version that is easy\n   // for the I/O to understand and handle.\n   if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),\"tuple<\",strlen(\"tuple<\"))==0) {\n\n      name = AtlernateTuple(cl->GetName());"
  },
  {
    "id" : "289c51f7-a565-4383-afb5-5acece7b2e1e",
    "prId" : 2915,
    "prUrl" : "https://github.com/root-project/root/pull/2915#pullrequestreview-171579770",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47f9f5c0-6453-4182-a2fd-eff9cb3badb9",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "It seems that this will be accurate only if the library and pcm existed at process startup time.   What if the library was created later (for example via ACliC)? \r\n\r\nAlso, we need to add at least one line of doxygen documentation describing the function.",
        "createdAt" : "2018-11-02T16:01:32Z",
        "updatedAt" : "2018-11-05T13:43:27Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "f01d680c-6e05-4281-959c-282617d071c5",
        "parentId" : "47f9f5c0-6453-4182-a2fd-eff9cb3badb9",
        "authorId" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "body" : "PCMs are only created at compilation time. When a new library was created by ACLiC and this function was called, it'll always return false which is a correct behavior.",
        "createdAt" : "2018-11-03T17:10:34Z",
        "updatedAt" : "2018-11-05T13:43:27Z",
        "lastEditedBy" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "tags" : [
        ]
      },
      {
        "id" : "53f6c2ab-33df-42b6-8dc0-3162e54b4efa",
        "parentId" : "47f9f5c0-6453-4182-a2fd-eff9cb3badb9",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : ">  When a new library was created by ACLiC and this function was called, it'll always return false which is a correct behavior.\r\n\r\nWhy?  The compilation steps done by ACLiC may have produced a pcm file.   Why can't we use it then?",
        "createdAt" : "2018-11-04T21:17:28Z",
        "updatedAt" : "2018-11-05T13:43:27Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "0ebfb967-0fba-4fc0-8311-4f9a23eed29d",
        "parentId" : "47f9f5c0-6453-4182-a2fd-eff9cb3badb9",
        "authorId" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "body" : "As far as I know, we're not supporting that feature and I'm not sure if we should. @vgvassilev ?",
        "createdAt" : "2018-11-05T12:00:55Z",
        "updatedAt" : "2018-11-05T13:43:27Z",
        "lastEditedBy" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "tags" : [
        ]
      },
      {
        "id" : "85fb42e4-f9c5-40b0-b7b8-4a5344344038",
        "parentId" : "47f9f5c0-6453-4182-a2fd-eff9cb3badb9",
        "authorId" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "body" : "I talked with Vassil, and true we need to be able to support lazy loading of pcm generated by ACLiC. I'll add FIXME here.",
        "createdAt" : "2018-11-05T13:39:10Z",
        "updatedAt" : "2018-11-05T13:43:27Z",
        "lastEditedBy" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "tags" : [
        ]
      },
      {
        "id" : "91b5fd5a-8cef-4aba-917c-d663cd2200b2",
        "parentId" : "47f9f5c0-6453-4182-a2fd-eff9cb3badb9",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "One of the design goal (and actual use) of ACLiC is for it to be a simple way to produce a complete 'ROOT' library including the necessary infrastructure (i.e. dictionary etc.) to be used 'instead' of 'complex' makefile/CMakeLists.txt for the simple cases.   So unless there is really a heavy (development) cost to support creating 'full fledge' library we should try (or least keep in mind how we could).",
        "createdAt" : "2018-11-05T14:13:40Z",
        "updatedAt" : "2018-11-05T14:13:40Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "f829679c-0e84-43b6-92f3-eae177421442",
        "parentId" : "47f9f5c0-6453-4182-a2fd-eff9cb3badb9",
        "authorId" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "body" : "Yeah I agree, I'll try to generate pcm for aclic and load them when it exists instead of rootmaps.",
        "createdAt" : "2018-11-05T14:30:55Z",
        "updatedAt" : "2018-11-05T14:30:55Z",
        "lastEditedBy" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd1cc9c42bc048acc32a8a22baccc0d7c8150623",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2828,2832 @@/// Return true if ROOT has cxxmodules pcm for a given library name.\n// FIXME: We need to be able to support lazy loading of pcm generated by ACLiC.\nBool_t TCling::HasPCMForLibrary(const char *libname) const\n{\n   llvm::StringRef ModuleName(libname);"
  },
  {
    "id" : "19fdb724-00ce-48cd-86df-41838b559308",
    "prId" : 2915,
    "prUrl" : "https://github.com/root-project/root/pull/2915#pullrequestreview-171334424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46f801f4-a5a0-42ae-808b-e29ee1e34175",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "```suggestion\r\n   return M && M->getASTFile() && !M->IsMissingRequirement;\r\n```",
        "createdAt" : "2018-11-02T16:22:36Z",
        "updatedAt" : "2018-11-05T13:43:27Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "5346f811-038f-41fb-a6b4-030c78db2c91",
        "parentId" : "46f801f4-a5a0-42ae-808b-e29ee1e34175",
        "authorId" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "body" : "Oh wow, this feature is super cool",
        "createdAt" : "2018-11-03T17:07:47Z",
        "updatedAt" : "2018-11-05T13:43:27Z",
        "lastEditedBy" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd1cc9c42bc048acc32a8a22baccc0d7c8150623",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +2836,2840 @@   clang::ModuleMap &moduleMap = fInterpreter->getCI()->getPreprocessor().getHeaderSearchInfo().getModuleMap();\n   clang::Module *M = moduleMap.findModule(ModuleName);\n   return M && !M->IsMissingRequirement;\n}\n"
  },
  {
    "id" : "0075d727-eaf7-4c83-ba87-93e35ecafec4",
    "prId" : 3043,
    "prUrl" : "https://github.com/root-project/root/pull/3043#pullrequestreview-232091396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41968bf1-06b3-43d6-8150-419baa4a1385",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "maybe\r\n```\r\nrootmapfile == nullptr || *rootmapfile = '\\0' || !requiresRootMap(rootmapfile, fInterpreter))\r\n```",
        "createdAt" : "2019-04-10T21:33:29Z",
        "updatedAt" : "2019-05-30T21:02:34Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "b67a0a16-fe95-40b1-8020-8cac84f92139",
        "parentId" : "41968bf1-06b3-43d6-8150-419baa4a1385",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "`requiresRootMap` assumes we have checked for `rootmapfile && *rootmapfile`",
        "createdAt" : "2019-04-11T15:43:48Z",
        "updatedAt" : "2019-05-30T21:02:34Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "ecbc26cc-c101-4f89-915f-56afdd3c93b4",
        "parentId" : "41968bf1-06b3-43d6-8150-419baa4a1385",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "I know :) and the proposed new version does that and return early if the rootmapfile string is empty or nullptr.",
        "createdAt" : "2019-04-11T18:10:10Z",
        "updatedAt" : "2019-05-30T21:02:34Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "12b9a467-15a8-4a51-b601-0237ebab6e28",
        "parentId" : "41968bf1-06b3-43d6-8150-419baa4a1385",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Now I remember, when `rootmapfile == nullptr` we do a scan over all rootmap files. We cannot use the generic condition to exit early which I prefer, too :)",
        "createdAt" : "2019-04-30T10:15:34Z",
        "updatedAt" : "2019-05-30T21:02:34Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "73c3f5ff4a1696d0bf7bfed45f660481ccb8a434",
    "line" : 272,
    "diffHunk" : "@@ -1,1 +5215,5219 @@Int_t TCling::LoadLibraryMap(const char* rootmapfile)\n{\n   if (rootmapfile && *rootmapfile && !requiresRootMap(rootmapfile, fInterpreter))\n      return 0;\n"
  },
  {
    "id" : "56f923c3-deed-4bb9-8592-1645134c87f6",
    "prId" : 3850,
    "prUrl" : "https://github.com/root-project/root/pull/3850#pullrequestreview-255882876",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f53345f-5234-46cd-bbf3-23889f283c9e",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Why does this need to become a member now? I prefer to have *less* functions in `TInterpreter`...",
        "createdAt" : "2019-06-28T08:40:39Z",
        "updatedAt" : "2019-07-01T10:55:04Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "1259054f-1610-42a7-befc-9d23ff69c341",
        "parentId" : "6f53345f-5234-46cd-bbf3-23889f283c9e",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "This is needed in Core: https://github.com/root-project/root/pull/3850/files#diff-849f40df79a2c791b5e8a7edd3845b81R3561",
        "createdAt" : "2019-06-28T17:16:47Z",
        "updatedAt" : "2019-07-01T10:55:04Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "46939bca420800c5f657d26363f6f3843b4d3ce5",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +1694,1698 @@///\\returns true if the module map was loaded, false on error or if the map was\n///         already loaded.\nbool TCling::RegisterPrebuiltModulePath(const std::string &FullPath,\n                                        const std::string &ModuleMapName /*= \"module.modulemap\"*/) const\n{"
  },
  {
    "id" : "81c8aa3a-081b-4a8f-bb76-395468eec0e0",
    "prId" : 3850,
    "prUrl" : "https://github.com/root-project/root/pull/3850#pullrequestreview-255884113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfe029c0-9a3e-4eca-bf85-16a821d93383",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Could pass `fInterpreter` as argument.",
        "createdAt" : "2019-06-28T08:41:11Z",
        "updatedAt" : "2019-07-01T10:55:04Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "fad2abbc-a13b-4048-9588-c66d9e3336ae",
        "parentId" : "bfe029c0-9a3e-4eca-bf85-16a821d93383",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "See above. We can’t make it file static. ",
        "createdAt" : "2019-06-28T17:19:47Z",
        "updatedAt" : "2019-07-01T10:55:04Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "46939bca420800c5f657d26363f6f3843b4d3ce5",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +1698,1702 @@{\n   assert(llvm::sys::path::is_absolute(FullPath));\n   Preprocessor &PP = fInterpreter->getCI()->getPreprocessor();\n   FileManager &FM = PP.getFileManager();\n   // FIXME: In a ROOT session we can add an include path (through .I /inc/path)"
  },
  {
    "id" : "b86739a9-1ef3-4447-8e29-e3814c6a3691",
    "prId" : 3896,
    "prUrl" : "https://github.com/root-project/root/pull/3896#pullrequestreview-245849763",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69026d2d-bbb7-4b28-b8fc-25afe2aa1492",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Why do we have the same comment here as in line 1797, in the new version of the file?",
        "createdAt" : "2019-06-05T07:46:34Z",
        "updatedAt" : "2019-06-05T19:29:57Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "adee23be2bead9a4db055418a12287ecb6d748db",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +1800,1804 @@\n      if (isSharedLib) {\n         // We need to open the dictionary shared library, to resolve symbols\n         // requested by the JIT from it: as the library is currently being dlopen'ed,\n         // its symbols are not yet reachable from the process."
  }
]