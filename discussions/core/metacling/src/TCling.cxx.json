[
  {
    "id" : "f79444a6-1845-4e50-b8c7-7d21a27dd5b9",
    "prId" : 614,
    "prUrl" : "https://github.com/root-project/root/pull/614#pullrequestreview-43696782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6543f1eb-4b71-496e-9bdb-42dec04fca51",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Does print_wrapper actually show things on the terminal?  If not, wouldn't it be better to call it get_wrapper_code?",
        "createdAt" : "2017-06-13T10:34:53Z",
        "updatedAt" : "2017-06-13T10:36:11Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "f2f4baf2-309c-4765-a3fe-ce23141a1bd0",
        "parentId" : "6543f1eb-4b71-496e-9bdb-42dec04fca51",
        "authorId" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "body" : "Seems like this PR got already merged, so I renamed this in #642.",
        "createdAt" : "2017-06-13T11:44:49Z",
        "updatedAt" : "2017-06-13T11:44:49Z",
        "lastEditedBy" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "tags" : [
        ]
      }
    ],
    "commit" : "cdc502a3fded8bd88adeae3c7a1edfb30a8c0958",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +6852,6856 @@   std::string wrapper_name;\n   std::string wrapper;\n   f->print_wrapper(wrapper_name, wrapper);\n   return wrapper;\n}"
  },
  {
    "id" : "af3c81df-e270-4281-aea7-0d083e353426",
    "prId" : 1381,
    "prUrl" : "https://github.com/root-project/root/pull/1381#pullrequestreview-79464376",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "431dd7df-bc9c-4380-bff7-ace436163c72",
        "parentId" : null,
        "authorId" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "body" : "@vgvassilev I reply here to [your comment on the closed PR](https://github.com/root-project/root/pull/1378#pullrequestreview-79456335). I don't think we call recursively `LoadCoreModule` or recursively make TCling instances? And if we do, then we already made a good portion of `declare`s before this code for all the other TCling things, so we would anyway be in deep trouble.",
        "createdAt" : "2017-11-28T10:45:22Z",
        "updatedAt" : "2017-11-28T11:06:06Z",
        "lastEditedBy" : "2349f38f-171e-43d8-8dee-e8439718c88a",
        "tags" : [
        ]
      },
      {
        "id" : "00c56846-ed8a-4648-92c5-0ecc06be820e",
        "parentId" : "431dd7df-bc9c-4380-bff7-ace436163c72",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "I think we ought to reduce all `declares` in TCling and that seems to be an easy-to-reduce one.",
        "createdAt" : "2017-11-28T11:00:23Z",
        "updatedAt" : "2017-11-28T11:06:06Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfe40ddd1225113526720a2ee3f1bb90846ee429",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1152,1156 @@   // core modules have defined it:\n   // https://www.gnu.org/software/libc/manual/html_node/Complex-Numbers.html\n   interp.declare(\"#ifdef I\\n #undef I\\n #endif\\n\");\n}\n"
  },
  {
    "id" : "eec23c7e-cdd2-4914-a577-60cb23bd9dbb",
    "prId" : 1564,
    "prUrl" : "https://github.com/root-project/root/pull/1564#pullrequestreview-92845699",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e1e1d67-a4fd-4221-a619-ad2b5463c2f0",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Is the number of calls to ApplyToInterpreterMutex guaranteed by construction?  If not and ApplyToInterpreterMutex is called one too many time, the fInitialMutex could be empty and all the guard like\r\n```\r\n  if (fInitialMutex.back()) \r\n```\r\nwould have random behavior.",
        "createdAt" : "2018-01-30T22:20:30Z",
        "updatedAt" : "2018-01-31T09:00:24Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "785ac838-f5c2-4db1-8770-21793cb5c4ac",
        "parentId" : "3e1e1d67-a4fd-4221-a619-ad2b5463c2f0",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "By construction, but I added an `R__ASSERT`.",
        "createdAt" : "2018-01-31T09:01:23Z",
        "updatedAt" : "2018-01-31T09:01:23Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a65c2a00cd69d157517ee5e73a780227a103745",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +8491,8495 @@      }\n   }\n   fInitialMutex.pop_back();\n}\n"
  },
  {
    "id" : "d5e0140f-7186-41cb-9e13-393091e5851a",
    "prId" : 2093,
    "prUrl" : "https://github.com/root-project/root/pull/2093#pullrequestreview-125080702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54050fa6-5a4b-467e-9809-eb7a32810cde",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Could you prepend a `FIXME:` to the comment here.",
        "createdAt" : "2018-06-01T08:13:45Z",
        "updatedAt" : "2018-06-01T12:02:30Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "089fd8df1de5c643b5987467eee2a4f7177414a3",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +5904,5908 @@            std::string FileName(DirIt->path());\n            if (!llvm::sys::fs::is_directory(FileName) && extension(FileName) == \".so\") {\n               // TCling::IsLoaded is incredibly slow!\n               // No need to check linked libraries, as this function is only invoked\n               // for symbols that cannot be found (neither by dlsym nor in the JIT)."
  },
  {
    "id" : "9bb8e694-f660-4d7a-85d4-c94f6e81dd48",
    "prId" : 2135,
    "prUrl" : "https://github.com/root-project/root/pull/2135#pullrequestreview-126051730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97172e09-5c15-403a-8c92-8e98c03b87e9",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "A slight improvement on that pattern:\r\n```\r\n#ifdef R__USE_CXXMODULES\r\nconstexpr bool useCxxModules = true;\r\n#else\r\nconstexpr bool useCxxModules = false;\r\n#endif\r\n```",
        "createdAt" : "2018-06-05T16:28:35Z",
        "updatedAt" : "2018-06-05T16:28:35Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "68a2c84b3fcd6273611e1ff59baf53a1b1000b1c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +5950,5954 @@\nvoid* TCling::LazyFunctionCreatorAutoload(const std::string& mangled_name) {\n   bool useCxxModules = false;\n#ifdef R__USE_CXXMODULES\n   useCxxModules = true;"
  },
  {
    "id" : "0148537c-257d-45c8-b00c-03cdccd1cb50",
    "prId" : 2148,
    "prUrl" : "https://github.com/root-project/root/pull/2148#pullrequestreview-128124540",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1072f10-3853-4f6f-be7a-94ddf72c022e",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Do we have something similar for the (rarer) case of a global variables? [This is a just a question, not a blocker :) ]",
        "createdAt" : "2018-06-12T14:20:42Z",
        "updatedAt" : "2018-06-12T15:51:31Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "a5ac7e6f-c804-44f0-a18a-c34266eea57e",
        "parentId" : "f1072f10-3853-4f6f-be7a-94ddf72c022e",
        "authorId" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "body" : "This is for global variables. This error message is emitted by dlopen for example when it couldn't find symbol that has to be initialized",
        "createdAt" : "2018-06-12T14:36:23Z",
        "updatedAt" : "2018-06-12T15:51:31Z",
        "lastEditedBy" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "tags" : [
        ]
      },
      {
        "id" : "53676b9e-2d5d-4cdd-b5b2-256320aefab9",
        "parentId" : "f1072f10-3853-4f6f-be7a-94ddf72c022e",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "I am confused ... It mentions 'Function' in the method name ... and thus I would assume it would detect missing symbol for function but not for variables ... i.e.\r\n```\r\n   void ThisFunction();\r\n```\r\nvs\r\n```\r\n   int gGlobalVariable;\r\n```\r\n",
        "createdAt" : "2018-06-12T14:47:01Z",
        "updatedAt" : "2018-06-12T15:51:31Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "156e72a3-b865-416a-ac8a-db98b40aef92",
        "parentId" : "f1072f10-3853-4f6f-be7a-94ddf72c022e",
        "authorId" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "body" : "It'll detect missing symbols for global variables, when\r\n`TTree tree;` was a global variable and libTree.so was not loaded, I think we get an error \"undefined symbol TTree\".",
        "createdAt" : "2018-06-12T16:01:28Z",
        "updatedAt" : "2018-06-12T16:01:39Z",
        "lastEditedBy" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "tags" : [
        ]
      },
      {
        "id" : "6e2a7aa8-2743-4fd7-9148-c01023f8ded2",
        "parentId" : "f1072f10-3853-4f6f-be7a-94ddf72c022e",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "> It'll detect missing symbols for global variables, when\r\n> TTree tree; was a global variable and libTree.so was not loaded, I think we get an error > \"undefined symbol TTree\".\r\n\r\nThis is not the case I am talking about.  it the case of two libraries, \r\n```\r\n// libA.so\r\nTTree gTree;\r\n```\r\nand\r\n```\r\n// libB.so\r\nextern TTree gTree;\r\nLong64_t somefunction() {\r\n   return gTree.GetEntries();\r\n}\r\n```\r\nThen\r\nYou load (explictly or implicitly) libTree.so\r\nand the attempt to load libB.so which will fail with undefined symbol 'gTree'.\r\n\r\nI am guessing that this is not supported yet (and was **not** supported before .. so really, I am just asking :) )\r\n",
        "createdAt" : "2018-06-12T16:31:57Z",
        "updatedAt" : "2018-06-12T16:33:07Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "1386ced4-5763-476a-b8ae-b3c77d762bc4",
        "parentId" : "f1072f10-3853-4f6f-be7a-94ddf72c022e",
        "authorId" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "body" : "I see, yeah I think it's not supported",
        "createdAt" : "2018-06-12T19:58:34Z",
        "updatedAt" : "2018-06-12T19:58:34Z",
        "lastEditedBy" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4894ad7bfc6e4536f0016f0251c301525da8ff4",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +5886,5890 @@   if (errMsg.contains(\"undefined symbol: \")) {\n      std::string mangled_name = std::string(errMsg.split(\"undefined symbol: \").second);\n      void* res = ((TCling*)gCling)->LazyFunctionCreatorAutoload(mangled_name);\n      cling::DynamicLibraryManager* DLM = fInterpreter->getDynamicLibraryManager();\n      if (res && DLM && (DLM->loadLibrary(libStem, permanent, resolved) == cling::DynamicLibraryManager::kLoadLibSuccess))"
  },
  {
    "id" : "98c9beae-b1e6-4a76-8fde-3a84b97c895c",
    "prId" : 2592,
    "prUrl" : "https://github.com/root-project/root/pull/2592#pullrequestreview-158863631",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de2c0dcc-7ae8-4d48-98e2-756961ae7590",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "We can replace this by:\r\n```cpp\r\n  llvm::StringRef moduleName = llvm::sys::path::filename(rootmapfile);\r\n  moduleName.consume_front(\"lib\");\r\n  moduleName.consume_back(\"rootmap\");\r\n```",
        "createdAt" : "2018-09-26T07:33:19Z",
        "updatedAt" : "2018-09-27T13:17:04Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "26e3ed3b0334c02e070b4a678b89d035edce2d85",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +4978,4982 @@   moduleName.consume_front(\"lib\");\n   moduleName.consume_back(\".rootmap\");\n\n   Module *M = interp->getCI()->getPreprocessor().getHeaderSearchInfo().lookupModule(moduleName);\n"
  },
  {
    "id" : "9d6327c8-cf17-412f-9bca-f4992a9afafb",
    "prId" : 2592,
    "prUrl" : "https://github.com/root-project/root/pull/2592#pullrequestreview-158863631",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86e3b248-d5ce-487a-b7a8-7ceebc96376d",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Likewise.",
        "createdAt" : "2018-09-26T07:40:18Z",
        "updatedAt" : "2018-09-27T13:17:04Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "26e3ed3b0334c02e070b4a678b89d035edce2d85",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +5186,5190 @@   }\n   bool needsRootMap = true;\n   if (rootmapfile && *rootmapfile)\n      needsRootMap = requiresRootMap(rootmapfile, fInterpreter);\n"
  },
  {
    "id" : "912e1c39-0c48-4e34-9627-b1ce5491ec32",
    "prId" : 2592,
    "prUrl" : "https://github.com/root-project/root/pull/2592#pullrequestreview-158863631",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf9906fb-d7e8-419d-9bd0-11046b7e16e8",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Likewise.\r\n",
        "createdAt" : "2018-09-26T07:40:26Z",
        "updatedAt" : "2018-09-27T13:17:04Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "26e3ed3b0334c02e070b4a678b89d035edce2d85",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +5271,5275 @@      }\n   }\n   if (rootmapfile && *rootmapfile) {\n      Int_t res;\n      if (needsRootMap)"
  },
  {
    "id" : "f07b1cd3-e397-40e3-8d04-a13ccef709e6",
    "prId" : 2615,
    "prUrl" : "https://github.com/root-project/root/pull/2615#pullrequestreview-156402151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d00ebd6-1fb1-463f-9087-51149a0cd80a",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "If the solution is not to store the emulated tuple in the pcm I’d be much more comfortable with this PR if we do not store it in the pch too. That’d mean dropping the useCxxModules variable. ",
        "createdAt" : "2018-09-18T07:59:38Z",
        "updatedAt" : "2018-09-18T14:45:55Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "60209824-e0de-48b4-8de5-f6413f568d63",
        "parentId" : "4d00ebd6-1fb1-463f-9087-51149a0cd80a",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "If we remove 'useCxxModule' this means that without the module (i.e. current default) the alternate information will not be stored the rootpcm, this will lead to auto-parsing at run-time which would be a disaster.  [Even with the module, I am not clear whether we 'need' the info put into the rootpcm ... i.e. we would need to measure what is the cost]",
        "createdAt" : "2018-09-18T14:37:40Z",
        "updatedAt" : "2018-09-18T14:45:55Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5117fb677abd8a44d0f72e9f2da2b3ab94f7810",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +3583,3587 @@   // details and just overlay a 'simpler'/'simplistic' version that is easy\n   // for the I/O to understand and handle.\n   if (!(useCxxModules && IsFromRootCling()) && strncmp(cl->GetName(),\"tuple<\",strlen(\"tuple<\"))==0) {\n\n      name = AtlernateTuple(cl->GetName());"
  },
  {
    "id" : "289c51f7-a565-4383-afb5-5acece7b2e1e",
    "prId" : 2915,
    "prUrl" : "https://github.com/root-project/root/pull/2915#pullrequestreview-171579770",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47f9f5c0-6453-4182-a2fd-eff9cb3badb9",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "It seems that this will be accurate only if the library and pcm existed at process startup time.   What if the library was created later (for example via ACliC)? \r\n\r\nAlso, we need to add at least one line of doxygen documentation describing the function.",
        "createdAt" : "2018-11-02T16:01:32Z",
        "updatedAt" : "2018-11-05T13:43:27Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "f01d680c-6e05-4281-959c-282617d071c5",
        "parentId" : "47f9f5c0-6453-4182-a2fd-eff9cb3badb9",
        "authorId" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "body" : "PCMs are only created at compilation time. When a new library was created by ACLiC and this function was called, it'll always return false which is a correct behavior.",
        "createdAt" : "2018-11-03T17:10:34Z",
        "updatedAt" : "2018-11-05T13:43:27Z",
        "lastEditedBy" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "tags" : [
        ]
      },
      {
        "id" : "53f6c2ab-33df-42b6-8dc0-3162e54b4efa",
        "parentId" : "47f9f5c0-6453-4182-a2fd-eff9cb3badb9",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : ">  When a new library was created by ACLiC and this function was called, it'll always return false which is a correct behavior.\r\n\r\nWhy?  The compilation steps done by ACLiC may have produced a pcm file.   Why can't we use it then?",
        "createdAt" : "2018-11-04T21:17:28Z",
        "updatedAt" : "2018-11-05T13:43:27Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "0ebfb967-0fba-4fc0-8311-4f9a23eed29d",
        "parentId" : "47f9f5c0-6453-4182-a2fd-eff9cb3badb9",
        "authorId" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "body" : "As far as I know, we're not supporting that feature and I'm not sure if we should. @vgvassilev ?",
        "createdAt" : "2018-11-05T12:00:55Z",
        "updatedAt" : "2018-11-05T13:43:27Z",
        "lastEditedBy" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "tags" : [
        ]
      },
      {
        "id" : "85fb42e4-f9c5-40b0-b7b8-4a5344344038",
        "parentId" : "47f9f5c0-6453-4182-a2fd-eff9cb3badb9",
        "authorId" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "body" : "I talked with Vassil, and true we need to be able to support lazy loading of pcm generated by ACLiC. I'll add FIXME here.",
        "createdAt" : "2018-11-05T13:39:10Z",
        "updatedAt" : "2018-11-05T13:43:27Z",
        "lastEditedBy" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "tags" : [
        ]
      },
      {
        "id" : "91b5fd5a-8cef-4aba-917c-d663cd2200b2",
        "parentId" : "47f9f5c0-6453-4182-a2fd-eff9cb3badb9",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "One of the design goal (and actual use) of ACLiC is for it to be a simple way to produce a complete 'ROOT' library including the necessary infrastructure (i.e. dictionary etc.) to be used 'instead' of 'complex' makefile/CMakeLists.txt for the simple cases.   So unless there is really a heavy (development) cost to support creating 'full fledge' library we should try (or least keep in mind how we could).",
        "createdAt" : "2018-11-05T14:13:40Z",
        "updatedAt" : "2018-11-05T14:13:40Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "f829679c-0e84-43b6-92f3-eae177421442",
        "parentId" : "47f9f5c0-6453-4182-a2fd-eff9cb3badb9",
        "authorId" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "body" : "Yeah I agree, I'll try to generate pcm for aclic and load them when it exists instead of rootmaps.",
        "createdAt" : "2018-11-05T14:30:55Z",
        "updatedAt" : "2018-11-05T14:30:55Z",
        "lastEditedBy" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd1cc9c42bc048acc32a8a22baccc0d7c8150623",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2828,2832 @@/// Return true if ROOT has cxxmodules pcm for a given library name.\n// FIXME: We need to be able to support lazy loading of pcm generated by ACLiC.\nBool_t TCling::HasPCMForLibrary(const char *libname) const\n{\n   llvm::StringRef ModuleName(libname);"
  },
  {
    "id" : "19fdb724-00ce-48cd-86df-41838b559308",
    "prId" : 2915,
    "prUrl" : "https://github.com/root-project/root/pull/2915#pullrequestreview-171334424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46f801f4-a5a0-42ae-808b-e29ee1e34175",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "```suggestion\r\n   return M && M->getASTFile() && !M->IsMissingRequirement;\r\n```",
        "createdAt" : "2018-11-02T16:22:36Z",
        "updatedAt" : "2018-11-05T13:43:27Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "5346f811-038f-41fb-a6b4-030c78db2c91",
        "parentId" : "46f801f4-a5a0-42ae-808b-e29ee1e34175",
        "authorId" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "body" : "Oh wow, this feature is super cool",
        "createdAt" : "2018-11-03T17:07:47Z",
        "updatedAt" : "2018-11-05T13:43:27Z",
        "lastEditedBy" : "f53de117-7078-4af9-a2ff-d8831bcdb0f1",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd1cc9c42bc048acc32a8a22baccc0d7c8150623",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +2836,2840 @@   clang::ModuleMap &moduleMap = fInterpreter->getCI()->getPreprocessor().getHeaderSearchInfo().getModuleMap();\n   clang::Module *M = moduleMap.findModule(ModuleName);\n   return M && !M->IsMissingRequirement;\n}\n"
  },
  {
    "id" : "0075d727-eaf7-4c83-ba87-93e35ecafec4",
    "prId" : 3043,
    "prUrl" : "https://github.com/root-project/root/pull/3043#pullrequestreview-232091396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41968bf1-06b3-43d6-8150-419baa4a1385",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "maybe\r\n```\r\nrootmapfile == nullptr || *rootmapfile = '\\0' || !requiresRootMap(rootmapfile, fInterpreter))\r\n```",
        "createdAt" : "2019-04-10T21:33:29Z",
        "updatedAt" : "2019-05-30T21:02:34Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "b67a0a16-fe95-40b1-8020-8cac84f92139",
        "parentId" : "41968bf1-06b3-43d6-8150-419baa4a1385",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "`requiresRootMap` assumes we have checked for `rootmapfile && *rootmapfile`",
        "createdAt" : "2019-04-11T15:43:48Z",
        "updatedAt" : "2019-05-30T21:02:34Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "ecbc26cc-c101-4f89-915f-56afdd3c93b4",
        "parentId" : "41968bf1-06b3-43d6-8150-419baa4a1385",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "I know :) and the proposed new version does that and return early if the rootmapfile string is empty or nullptr.",
        "createdAt" : "2019-04-11T18:10:10Z",
        "updatedAt" : "2019-05-30T21:02:34Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "12b9a467-15a8-4a51-b601-0237ebab6e28",
        "parentId" : "41968bf1-06b3-43d6-8150-419baa4a1385",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Now I remember, when `rootmapfile == nullptr` we do a scan over all rootmap files. We cannot use the generic condition to exit early which I prefer, too :)",
        "createdAt" : "2019-04-30T10:15:34Z",
        "updatedAt" : "2019-05-30T21:02:34Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "73c3f5ff4a1696d0bf7bfed45f660481ccb8a434",
    "line" : 272,
    "diffHunk" : "@@ -1,1 +5215,5219 @@Int_t TCling::LoadLibraryMap(const char* rootmapfile)\n{\n   if (rootmapfile && *rootmapfile && !requiresRootMap(rootmapfile, fInterpreter))\n      return 0;\n"
  },
  {
    "id" : "56f923c3-deed-4bb9-8592-1645134c87f6",
    "prId" : 3850,
    "prUrl" : "https://github.com/root-project/root/pull/3850#pullrequestreview-255882876",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f53345f-5234-46cd-bbf3-23889f283c9e",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Why does this need to become a member now? I prefer to have *less* functions in `TInterpreter`...",
        "createdAt" : "2019-06-28T08:40:39Z",
        "updatedAt" : "2019-07-01T10:55:04Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "1259054f-1610-42a7-befc-9d23ff69c341",
        "parentId" : "6f53345f-5234-46cd-bbf3-23889f283c9e",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "This is needed in Core: https://github.com/root-project/root/pull/3850/files#diff-849f40df79a2c791b5e8a7edd3845b81R3561",
        "createdAt" : "2019-06-28T17:16:47Z",
        "updatedAt" : "2019-07-01T10:55:04Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "46939bca420800c5f657d26363f6f3843b4d3ce5",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +1694,1698 @@///\\returns true if the module map was loaded, false on error or if the map was\n///         already loaded.\nbool TCling::RegisterPrebuiltModulePath(const std::string &FullPath,\n                                        const std::string &ModuleMapName /*= \"module.modulemap\"*/) const\n{"
  },
  {
    "id" : "81c8aa3a-081b-4a8f-bb76-395468eec0e0",
    "prId" : 3850,
    "prUrl" : "https://github.com/root-project/root/pull/3850#pullrequestreview-255884113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfe029c0-9a3e-4eca-bf85-16a821d93383",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Could pass `fInterpreter` as argument.",
        "createdAt" : "2019-06-28T08:41:11Z",
        "updatedAt" : "2019-07-01T10:55:04Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "fad2abbc-a13b-4048-9588-c66d9e3336ae",
        "parentId" : "bfe029c0-9a3e-4eca-bf85-16a821d93383",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "See above. We can’t make it file static. ",
        "createdAt" : "2019-06-28T17:19:47Z",
        "updatedAt" : "2019-07-01T10:55:04Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "46939bca420800c5f657d26363f6f3843b4d3ce5",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +1698,1702 @@{\n   assert(llvm::sys::path::is_absolute(FullPath));\n   Preprocessor &PP = fInterpreter->getCI()->getPreprocessor();\n   FileManager &FM = PP.getFileManager();\n   // FIXME: In a ROOT session we can add an include path (through .I /inc/path)"
  },
  {
    "id" : "b86739a9-1ef3-4447-8e29-e3814c6a3691",
    "prId" : 3896,
    "prUrl" : "https://github.com/root-project/root/pull/3896#pullrequestreview-245849763",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69026d2d-bbb7-4b28-b8fc-25afe2aa1492",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Why do we have the same comment here as in line 1797, in the new version of the file?",
        "createdAt" : "2019-06-05T07:46:34Z",
        "updatedAt" : "2019-06-05T19:29:57Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "adee23be2bead9a4db055418a12287ecb6d748db",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +1800,1804 @@\n      if (isSharedLib) {\n         // We need to open the dictionary shared library, to resolve symbols\n         // requested by the JIT from it: as the library is currently being dlopen'ed,\n         // its symbols are not yet reachable from the process."
  },
  {
    "id" : "e83a3667-9e85-49d9-8e07-3aab0500409f",
    "prId" : 3965,
    "prUrl" : "https://github.com/root-project/root/pull/3965#pullrequestreview-251324930",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c910d0a-6018-4d0d-aea3-2b9664273ec2",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "@pcanal, why we need to have a RAII object restoring the state of gDirectory here, isn't the dtor of TFile supposed to restore the previous value? (I saw it is not the case because if we remove this tests start to fail...)",
        "createdAt" : "2019-06-18T19:52:25Z",
        "updatedAt" : "2019-06-19T12:45:45Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "24690696-645b-40ec-b1ae-bb9e4dd168e2",
        "parentId" : "3c910d0a-6018-4d0d-aea3-2b9664273ec2",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "The TFile does not retain the information .. and the timing would be odd (the current directory at the end of sequence of TFile creation and deletion would depend on how those are intertwined rather than being 'guaranteed' to return to the state before the first file creation).",
        "createdAt" : "2019-06-18T19:55:03Z",
        "updatedAt" : "2019-06-19T12:45:45Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "950d8234cc86a79e48bbe0e3c7d508f1f5ecc425",
    "line" : 359,
    "diffHunk" : "@@ -1,1 +1659,1663 @@   R__InitStreamerInfoFactory();\n\n   TDirectory::TContext ctxt;\n   llvm::SaveAndRestore<Int_t> SaveGDebug(gDebug);\n   if (gDebug > 5) {"
  },
  {
    "id" : "94c0257e-b021-43fc-9c56-658176133dd0",
    "prId" : 4005,
    "prUrl" : "https://github.com/root-project/root/pull/4005#pullrequestreview-263570474",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3a2e50a-baed-46fc-9ca5-26429ffa52bf",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "What about the symbols of libraries that `lib` depends on? Shouldn't this function recurse over dependencies?",
        "createdAt" : "2019-07-15T22:35:25Z",
        "updatedAt" : "2019-07-18T07:29:46Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "65b66f66-a128-47ed-acff-a2422f1fe7e0",
        "parentId" : "a3a2e50a-baed-46fc-9ca5-26429ffa52bf",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "It seems impossible to recurse in the generic case. Maybe if the library had explicit linking we could iterate through, but if that was the case we won't have to resolve the symbol, it'd have been resolved by the dynamic linker already.",
        "createdAt" : "2019-07-16T10:29:26Z",
        "updatedAt" : "2019-07-18T07:29:46Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "8002b71c-0dcf-463e-9ae0-f4a6af86f0c9",
        "parentId" : "a3a2e50a-baed-46fc-9ca5-26429ffa52bf",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "I don't understand any of this :-(\r\n\r\nThe interface \"returns a list of dependent libraries\" (from the doc). IIUC it does that even for not explicitly linked libraries (else why does it iterate through symbols?)\r\n\r\nIf one of the dependent libraries itself depends on another library - shouldn't that other library also be enumerated as a dependency of the original library?",
        "createdAt" : "2019-07-16T19:27:33Z",
        "updatedAt" : "2019-07-18T07:29:46Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "b920d2b3-98d1-49ed-b100-d765fd45425a",
        "parentId" : "a3a2e50a-baed-46fc-9ca5-26429ffa52bf",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "It is a question of intent. This PR is trying to do as much or as little to replace the rootmap file logic. In the rootmap-based implementation, rootcling would listen to a bunch of deserialized declarations and try to guess which library it came from. It did not do any transitive dependency resolution.\r\n\r\nThe proposed algorithm is much more precise but introduce O(n^3) complexity, that is for N undefined symbols, iterate over M symbols from L libraries. Because of that I had to only enable it for ACLiC where the N is presumably small. We had a reduced a little M on ELF binaries by using bloom filters. Ideally, with a lot of efforts we could further reduce the complexity.\r\n\r\nA simple (straight forward) implementation of the suggestion would introduce higher complexity. We cannot really use simple caching techniques (such as a map) because we are tight on memory. I'd be in favor of enhancing the algorithm to resolve transitive dependencies once we optimize it to reduce the cubic complexity. Although, nowhere in the autoloading techniques (neither in the owning module-based one) we resolve transitive dependencies.",
        "createdAt" : "2019-07-16T21:28:00Z",
        "updatedAt" : "2019-07-18T07:29:46Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "b6bfc1e0-9361-4e4e-a63b-65be34afd72a",
        "parentId" : "a3a2e50a-baed-46fc-9ca5-26429ffa52bf",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Thanks. Can we rename the function to `GetSharedLibImmediateDepsSlow()` or something, to clarify that this is not meant to come up with the exhaustive list? Or alternatively clarify this in the doc?\r\n\r\nNow - rootmap files tell `TCling` which library to load and which header to parse for a given class. I don't remember nor see that we store dependent libraries in there. Can you remind me of an example?",
        "createdAt" : "2019-07-16T21:47:33Z",
        "updatedAt" : "2019-07-18T07:29:46Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "0496326a-4cff-4df3-b650-1ed25f19216c",
        "parentId" : "a3a2e50a-baed-46fc-9ca5-26429ffa52bf",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Renamed. The code doing library autoloading is [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L6771). We get the owning module of a used decl and get the relevant library from the modulemap file.\r\n\r\nPS: the relevant rootcling section is here: https://github.com/root-project/root/blob/master/core/dictgen/src/rootcling_impl.cxx#L4871",
        "createdAt" : "2019-07-17T06:08:15Z",
        "updatedAt" : "2019-07-18T07:29:46Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "46968e9b-c8c4-4149-9c5b-759776449822",
        "parentId" : "a3a2e50a-baed-46fc-9ca5-26429ffa52bf",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Thanks - ok that's mostly used by ACLiC. It notes which libs are currently loaded and will load them before loading the ACLiC'ed lib.\r\n\r\nThe current setup notes *all* libs. I.e. even if libA depends on libB depends on libC - libC will be noted as \"must load\". IIUC your replacement code will only load libs that resolve symbols *of `lib`*, but not *of those that lib depends on*.\r\n\r\nThat's not an issue for explicit linking, which is what we do on Linux and Mac. It is likely going to be an issue if that's not happening (rare or Windows).\r\n\r\nCan you add a comment along these lines? I don't believe that this missing feature should block the PR.",
        "createdAt" : "2019-07-18T09:30:12Z",
        "updatedAt" : "2019-07-18T09:30:12Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "abf42d16-d8fd-45ee-8384-a91925880951",
        "parentId" : "a3a2e50a-baed-46fc-9ca5-26429ffa52bf",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "I do not understand this part `, but not of those that lib depends on.`\r\n\r\nWe essentially disable explicit linking when it comes to ACLiC with modules disabled and fall back to symbol resolution if that's what you meant. The same symbol resolution mechanisms for those undefined symbols will apply to windows. We do not rely on hooks from dyld (although that would bring the algorithm complexity down), so I do not see how windows can be affected. Could you elaborate?\r\n\r\nPS: Did you mean that Windows might need the transitive library dependencies because there is no explicit linking?",
        "createdAt" : "2019-07-18T10:40:12Z",
        "updatedAt" : "2019-07-18T10:54:34Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea2ea4216140f75aa079d4730e9954834866b5d4",
    "line" : 308,
    "diffHunk" : "@@ -1,1 +6986,6990 @@   std::set<string> DedupSet;\n   std::string Result = lib + ' ';\n   for (const auto &S : BinObjFile->symbols()) {\n      uint32_t Flags = S.getFlags();\n      if (Flags & llvm::object::SymbolRef::SF_Undefined) {"
  },
  {
    "id" : "744eaa96-c3cf-4974-b5ac-edf0203182f5",
    "prId" : 4005,
    "prUrl" : "https://github.com/root-project/root/pull/4005#pullrequestreview-262697796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72e86a1c-29c4-4565-8179-31c17c444f8c",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "This looks more like `tryDyld`: the algorithm falls back to the `!useDyld` case if the symbol lookup fails. Maybe rename the parameter?",
        "createdAt" : "2019-07-15T22:37:46Z",
        "updatedAt" : "2019-07-18T07:29:46Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "719b9110-496e-437f-8532-45f3d3387183",
        "parentId" : "72e86a1c-29c4-4565-8179-31c17c444f8c",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "I've changed it but I am not convinced it conveys better the meaning.",
        "createdAt" : "2019-07-16T21:40:17Z",
        "updatedAt" : "2019-07-18T07:29:46Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea2ea4216140f75aa079d4730e9954834866b5d4",
    "line" : 358,
    "diffHunk" : "@@ -1,1 +7034,7038 @@   if (useDyld) {\n      std::string libs = GetSharedLibImmediateDepsSlow(lib, fInterpreter);\n      if (!libs.empty()) {\n         fAutoLoadLibStorage.push_back(libs);\n         return fAutoLoadLibStorage.back().c_str();"
  },
  {
    "id" : "5c7602c3-e866-4c5d-a482-4c0e26ba89ed",
    "prId" : 4104,
    "prUrl" : "https://github.com/root-project/root/pull/4104#pullrequestreview-274400976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "055da0f7-77b6-46d8-81c8-9117779689b8",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "What about other UNIX platforms, like [FreeBSD](https://root-forum.cern.ch/search?q=FreeBSD), [OpenBSD](https://root-forum.cern.ch/search?q=OpenBSD), etc?",
        "createdAt" : "2019-07-24T06:15:33Z",
        "updatedAt" : "2019-08-13T16:21:49Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "33082582-1247-47d1-9434-0c87cb14ebb4",
        "parentId" : "055da0f7-77b6-46d8-81c8-9117779689b8",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Thanks, fixed.",
        "createdAt" : "2019-08-13T16:19:51Z",
        "updatedAt" : "2019-08-13T16:21:49Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "5545fe01983887636151ca1e1375c08c67421a7a",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +1484,1488 @@      return result;\n# else\n#  error \"Unsupported platform.\"\n# endif\n      return {};"
  },
  {
    "id" : "5491ad99-ee3c-46ed-90dd-dc9510638def",
    "prId" : 4104,
    "prUrl" : "https://github.com/root-project/root/pull/4104#pullrequestreview-276014451",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e364a992-0e2f-4713-af71-d29c7db33894",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "This kind of comment looks bad, I'd remove it. Here's the documentation (from `man 5 proc`):\r\n```\r\n/proc/[pid]/exe\r\n    Under Linux 2.2 and later, this file is a symbolic link containing the actual pathname of\r\n    the executed command.  This symbolic link can be  dereferenced  normally;  attempting  to\r\n    open  it will open the executable.  You can even type /proc/[pid]/exe to run another copy\r\n    of the same executable that is being run by process [pid].  If the pathname has been  un-\r\n    linked,  the  symbolic  link will contain the string '(deleted)' appended to the original\r\n    pathname.  In a multithreaded process, the contents of this symbolic link are not  avail-\r\n    able if the main thread has already terminated (typically by calling pthread_exit(3)).\r\n```\r\nNo one is using Linux < 2.2, so the call to `readlink` is safe, we just need to check for the `(deleted)` at the end, which this code doesn't do and will return a broken string in that case. Also, you can probably remove the code just below using pipes, as it's just dead code. If the `readlink` part fails due to the main binary being deleted or the main thread having already been terminated, the attempt with pipes won't help and we can just error out.",
        "createdAt" : "2019-07-24T06:32:37Z",
        "updatedAt" : "2019-08-13T16:21:49Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "ee392290-b03f-4326-a1de-6e797233a2f1",
        "parentId" : "e364a992-0e2f-4713-af71-d29c7db33894",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "This is meant to cover \"R__UNIX\", actually. AFAIK not all distros / unix flavors have `/proc/` so I prefer to keep it the way it is.",
        "createdAt" : "2019-08-13T16:18:10Z",
        "updatedAt" : "2019-08-13T16:22:23Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "310c0462-3782-42c6-b15e-a7f1fd5e0643",
        "parentId" : "e364a992-0e2f-4713-af71-d29c7db33894",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "You are still not testing for the ` (deleted)` case that can happen on Linux.",
        "createdAt" : "2019-08-16T15:14:42Z",
        "updatedAt" : "2019-08-16T15:16:15Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "4b76acdc-d550-4eb5-81e6-2ea82d6e6c0d",
        "parentId" : "e364a992-0e2f-4713-af71-d29c7db33894",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "I like that `(deleted)` is added :-) It's certainly not a problem for `TCling`'s usage of this.",
        "createdAt" : "2019-08-16T15:23:49Z",
        "updatedAt" : "2019-08-16T15:23:49Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "5545fe01983887636151ca1e1375c08c67421a7a",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +1470,1474 @@# elif defined(R__UNIX)\n      char buf[PATH_MAX] = { 0 };\n      // Cross our fingers that /proc/self/exe exists.\n      if (readlink(\"/proc/self/exe\", buf, sizeof(buf)) > 0)\n         return buf;"
  },
  {
    "id" : "34b812b9-3e35-415d-9f62-1b7bb0f33b62",
    "prId" : 4214,
    "prUrl" : "https://github.com/root-project/root/pull/4214#pullrequestreview-282945612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1081d16-e19a-4b0b-9e12-bab566f77cc7",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "👍 thanks for spotting!",
        "createdAt" : "2019-08-16T13:39:28Z",
        "updatedAt" : "2019-09-23T22:00:17Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "f68f908e-0bce-4206-9abf-a91040215f38",
        "parentId" : "f1081d16-e19a-4b0b-9e12-bab566f77cc7",
        "authorId" : "99b1a3c3-6269-4bb7-a482-a3f4d80a6b59",
        "body" : "You are welcome!  :-)",
        "createdAt" : "2019-09-03T12:03:57Z",
        "updatedAt" : "2019-09-23T22:00:17Z",
        "lastEditedBy" : "99b1a3c3-6269-4bb7-a482-a3f4d80a6b59",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8d896596e568b34cfd0314b7c14e7e9ac1ae24f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +7939,7943 @@      return kTRUE;\n   else if ((decl->getDeclContext()->isTransparentContext()\n             || decl->getDeclContext()->isInlineNamespace())\n            && decl->getDeclContext()->getParent()->Equals(ctxt))\n      return kTRUE;"
  },
  {
    "id" : "9e4b574a-df81-4526-8a6d-0b995114437c",
    "prId" : 4317,
    "prUrl" : "https://github.com/root-project/root/pull/4317#pullrequestreview-282455839",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26611616-518f-4caa-98b3-3bc1578cefd7",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "This function is a bit too complex with all these places for returning with a function call. This is probably one of the few cases where setting the name to be returned and using a `goto out;` where you call `return ROOT::TMetaUtils::GetRealPath(name);` just once is a good idea. Also, given the system specific nature of this function, it's probably better to put it in some system dependent source file where no ifdefs are needed, and just add the right file to the library during configuration.",
        "createdAt" : "2019-09-02T08:13:16Z",
        "updatedAt" : "2019-09-02T08:47:49Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "516655e1ce406ec3d94fd2f53090cc25c2752ab5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1448,1452 @@      return {};\n   }\n   return ROOT::TMetaUtils::GetRealPath(moduleName);\n#else\n   Dl_info info;"
  },
  {
    "id" : "95480934-76d0-47c8-8a46-b2fccdbffea3",
    "prId" : 4399,
    "prUrl" : "https://github.com/root-project/root/pull/4399#pullrequestreview-289328572",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70615e31-e587-4789-8960-e448adcdccdb",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Should we `assert(reload)`? We really shouldn't be requesting new `TClass`es when shutting down.",
        "createdAt" : "2019-09-17T14:57:23Z",
        "updatedAt" : "2019-09-20T00:43:52Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "833e1f6336cafa69988ab1864c49f7ea8443b42c",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +3692,3696 @@         cl->fClassInfo = nullptr;\n      }\n      return;\n   }\n"
  },
  {
    "id" : "734e9fa9-778b-4fa5-9c7b-455d697a0081",
    "prId" : 4553,
    "prUrl" : "https://github.com/root-project/root/pull/4553#pullrequestreview-303223729",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdd312df-e558-4172-8e20-fb22a804ba93",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Please consider fixing [ROOT-9403](https://sft.its.cern.ch/jira/browse/ROOT-9403) as part of this pull request. When installing into `/usr`, ROOT will create `/usr/include/module.modulemap`, which causes many problems. See the issue description for more information.",
        "createdAt" : "2019-10-16T14:19:54Z",
        "updatedAt" : "2019-10-17T10:04:46Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "e076cfc6-0873-4d9e-b254-89ed3144595e",
        "parentId" : "cdd312df-e558-4172-8e20-fb22a804ba93",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "That seems quite a bit of work. I first want to fix the `/usr/local/root` issue. Fixing ROOT-9403 seems quite a bit of work. I will put it on the list but it is not yet modules critical.",
        "createdAt" : "2019-10-16T19:24:41Z",
        "updatedAt" : "2019-10-17T10:04:46Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "a23e40fb-987f-4323-be09-0a94ff16f491",
        "parentId" : "cdd312df-e558-4172-8e20-fb22a804ba93",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "It is critical from the point of view of the user. If ROOT installs `/usr/include/module.modulemap`, no distro will enable modules in their packaging (e.g. conda), and it may also interfere with other packages that need a module map if ROOT's own module map is found first. At the very least the module map should be renamed to a less generic thing, like `root.modulemap`.",
        "createdAt" : "2019-10-17T08:52:27Z",
        "updatedAt" : "2019-10-17T10:04:46Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "dd2ed38b-5958-4bc5-b581-e6b5629ccd3a",
        "parentId" : "cdd312df-e558-4172-8e20-fb22a804ba93",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "We must not install the ROOT headers in /usr/include. This is pretty terrible and it should be resolved first. I can rename the module.modulemap to root.modulemap however that would break `-Dcxxmodules=On`. We can probably install it as `root.modulemap` but that that would likely be a workaround.",
        "createdAt" : "2019-10-17T10:14:52Z",
        "updatedAt" : "2019-10-17T10:14:52Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "f007a4e9-4391-43af-91b7-b39d002b0836",
        "parentId" : "cdd312df-e558-4172-8e20-fb22a804ba93",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "> We must not install the ROOT headers in /usr/include\r\n\r\nIIUC \"we\" don't, the default gnuinstall dir is `/usr/include/root` according to [this comment](https://sft.its.cern.ch/jira/browse/ROOT-9403?focusedCommentId=106073&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-106073). So this is not as much of an issue as I initially understood it to be, and could be addresses later if actually needed. OTOH Guilherme says:\r\n\r\n> When installing into /usr, ROOT will create /usr/include/module.modulemap\r\n\r\nwhich seems to contradict the Jira comment. What am I misunderstanding?",
        "createdAt" : "2019-10-17T10:31:48Z",
        "updatedAt" : "2019-10-17T10:31:49Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "0e768645-7a93-4ed2-8899-b6237c44a1b8",
        "parentId" : "cdd312df-e558-4172-8e20-fb22a804ba93",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "> We must not install the ROOT headers in /usr/include. This is pretty terrible and it should be resolved first.\r\n\r\nThat's [ROOT-9403](https://sft.its.cern.ch/jira/browse/ROOT-9403). It would indeed be nice if that got fixed.\r\n\r\n>  I can rename the module.modulemap to root.modulemap however that would break -Dcxxmodules=On.\r\n\r\nWhy?",
        "createdAt" : "2019-10-17T11:34:05Z",
        "updatedAt" : "2019-10-17T11:34:05Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "1c654bed-98b3-4ab9-a375-612349f0f5bc",
        "parentId" : "cdd312df-e558-4172-8e20-fb22a804ba93",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "> IIUC \"we\" don't, the default gnuinstall dir is /usr/include/root according to this comment. \r\n> What am I misunderstanding?\r\n\r\nThe `gnuinstall` option is disabled by default, which makes ROOT install everything into `/usr/include/` by default.",
        "createdAt" : "2019-10-17T11:35:29Z",
        "updatedAt" : "2019-10-17T11:35:29Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "3ffceab7-d0c6-46bd-85cc-7234da4843c4",
        "parentId" : "cdd312df-e558-4172-8e20-fb22a804ba93",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "> > We must not install the ROOT headers in /usr/include. This is pretty terrible and it should be resolved first.\r\n> \r\n> That's [ROOT-9403](https://sft.its.cern.ch/jira/browse/ROOT-9403). It would indeed be nice if that got fixed.\r\n> \r\n> > I can rename the module.modulemap to root.modulemap however that would break -Dcxxmodules=On.\r\n> \r\n> Why?\r\n\r\nBecause -Dcxxmodules=On presumes implicit modules which presume the modulemap files to be called module.modulemap. So if ROOT is installed and somebody depends on ROOT and builds his software with -fmodules (the ROOT *compile-time* modules will not be automatically enabled). If you look at the osx distributions most of the libraries and frameworks come with a `module.modulemap` file. They do not have special names -- it is a responsibility of the installation to find a proper (isolated) place for the header files and their modulemap to live.",
        "createdAt" : "2019-10-17T12:14:30Z",
        "updatedAt" : "2019-10-17T12:14:31Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "27974e90-2388-457a-b753-9d20d0523c5a",
        "parentId" : "cdd312df-e558-4172-8e20-fb22a804ba93",
        "authorId" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "body" : "I would propose to start gradually fix issues added in Jira long time ago and raised in the context of  this PR, which had initially the different purpose. Now it is important to unblock compilation of ROOT with C++ modules in case of pre-installed modulemap, such as a next case: http://cdash.cern.ch/viewBuildError.php?buildid=744995 and I am going to check if it will fix Jakob's use case. This PR will also unblock the case when user sourced dev3/dev4 builds and trying to build his custom ROOT locally.",
        "createdAt" : "2019-10-17T12:41:37Z",
        "updatedAt" : "2019-10-17T12:41:38Z",
        "lastEditedBy" : "b3162d7b-6062-4c19-9553-67738ce206f7",
        "tags" : [
        ]
      }
    ],
    "commit" : "53af298c10e64f40c1e9c2da33388563e2df2452",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1309,1313 @@      clingArgsStorage.push_back(\"-includedir_loc=\" + std::string(TROOT::GetIncludeDir().Data()));\n      clingArgsStorage.push_back((\"-fmodule-map-file=\" +\n                                  TROOT::GetIncludeDir() + \"/module.modulemap\").Data());\n      clingArgsStorage.push_back((\"-fmodule-map-file=\" +\n                                  TROOT::GetEtcDir() + \"/cling/module.modulemap\").Data());"
  },
  {
    "id" : "b001c354-2c37-435e-876d-7573476da315",
    "prId" : 4717,
    "prUrl" : "https://github.com/root-project/root/pull/4717#pullrequestreview-405759737",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b8b2b37-bd09-459c-a9a6-ff29ad7da4be",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "This suggests ResolveSymbol returns just the file name. Iiuc that's extracted from the full path name of the library that was identified to contain the symbol. Later we need to search for the library again - can that be rationalized? ",
        "createdAt" : "2020-05-05T13:09:54Z",
        "updatedAt" : "2020-05-06T14:48:33Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "fe577051-aef7-4159-a83a-a8bf294b68f0",
        "parentId" : "3b8b2b37-bd09-459c-a9a6-ff29ad7da4be",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Looks like that was the case already before - i.e. that's a topic for a separate PR?",
        "createdAt" : "2020-05-05T13:52:47Z",
        "updatedAt" : "2020-05-06T14:48:33Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee856ff4d24ae868a567ec148be33800b1f0efe0",
    "line" : 377,
    "diffHunk" : "@@ -1,1 +6208,6212 @@#endif //R__MACOSX\n\n   assert(!llvm::StringRef(libName).startswith(\"libNew\") &&\n          \"We must not resolve symbols from libNew!\");\n"
  },
  {
    "id" : "8b6202d7-8867-4521-b428-003fc34ed6f8",
    "prId" : 4717,
    "prUrl" : "https://github.com/root-project/root/pull/4717#pullrequestreview-406022910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "131537b5-717b-403b-bc41-0d90d23bc9d9",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Might make more sense to put `LibLoader`'s code right here, as this is the only occurrence of `LibLoader`. I needed to search it, wonder whether it diagnoses errors etc - that's not worth it.",
        "createdAt" : "2020-05-05T13:49:03Z",
        "updatedAt" : "2020-05-06T14:48:33Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "3cb25edd-e3ed-4985-aedb-f9cd046a22fb",
        "parentId" : "131537b5-717b-403b-bc41-0d90d23bc9d9",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "That lambda is for later when we sink that interface. The initial version of the PR had ResolveSymbol in the Dyld, however we decided to settle the infrastructure first. If we move ResolveSymbol in a subsequent PR this lamda will be passed there.",
        "createdAt" : "2020-05-05T17:53:24Z",
        "updatedAt" : "2020-05-06T14:48:33Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee856ff4d24ae868a567ec148be33800b1f0efe0",
    "line" : 386,
    "diffHunk" : "@@ -1,1 +6214,6218 @@      return nullptr;\n\n   if (!LibLoader(libName))\n      return nullptr;\n"
  },
  {
    "id" : "d1384cdf-ef16-435b-a2f4-b7fa753d92e3",
    "prId" : 4717,
    "prUrl" : "https://github.com/root-project/root/pull/4717#pullrequestreview-413761164",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a631c8c0-1a93-4c9d-823e-198bca56d114",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "If we need a lock (IIUC this used to not be called unlocked) then why isn't `LazyFunctionCreatorAutoloadForModule` locked?",
        "createdAt" : "2020-05-05T13:51:24Z",
        "updatedAt" : "2020-05-06T14:48:33Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "7d36ea13-19a2-4597-8bb9-88234cd48c4d",
        "parentId" : "a631c8c0-1a93-4c9d-823e-198bca56d114",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Legacy? I have no idea. Should we lock there, too?",
        "createdAt" : "2020-05-05T17:54:18Z",
        "updatedAt" : "2020-05-06T14:48:33Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "20204adc-a404-4990-9a28-81e036996c8f",
        "parentId" : "a631c8c0-1a93-4c9d-823e-198bca56d114",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "I don't understand. The lock shows as \"new\", introduced by this PR - so I don't see legacy. If we need it (do we?) then why don't we need it for other interpreter calls in front of the lock? We might not need it: if this is a non-public function and all callers have acquired a lock.\r\n\r\nI trust you will revisit and decide, if needed in a subsequent PR.",
        "createdAt" : "2020-05-06T19:48:50Z",
        "updatedAt" : "2020-05-06T19:48:50Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "136967e1-f961-44e4-92da-ee22a5a70d18",
        "parentId" : "a631c8c0-1a93-4c9d-823e-198bca56d114",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Removal is easy. Let's summon @pcanal before we do that...",
        "createdAt" : "2020-05-15T06:23:50Z",
        "updatedAt" : "2020-05-15T06:23:50Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "f8784acf-7b14-4382-8b91-845fa9754862",
        "parentId" : "a631c8c0-1a93-4c9d-823e-198bca56d114",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "> LazyFunctionCreatorAutoloadForModule locked?\r\n\r\nWhy that function in particular?\r\n\r\nThe lock on line 6902 seems to be in the function GetSharedLibImmediateDepsSlow which is used from GetSharedLibDeps which is part of the TInterpreter interface ... hence it can be called from anywhere (no possible assumption on already held locks).",
        "createdAt" : "2020-05-15T22:00:31Z",
        "updatedAt" : "2020-05-15T22:00:31Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "488db7d7-581f-4929-b569-f66410d5a33e",
        "parentId" : "a631c8c0-1a93-4c9d-823e-198bca56d114",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "So we keep the lock?",
        "createdAt" : "2020-05-16T09:41:07Z",
        "updatedAt" : "2020-05-16T09:41:07Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "9d5e420b-4ad4-41f6-8722-99e9098d277a",
        "parentId" : "a631c8c0-1a93-4c9d-823e-198bca56d114",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Yes.",
        "createdAt" : "2020-05-18T16:36:27Z",
        "updatedAt" : "2020-05-18T16:36:27Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee856ff4d24ae868a567ec148be33800b1f0efe0",
    "line" : 420,
    "diffHunk" : "@@ -1,1 +6900,6904 @@            continue;\n\n         R__LOCKGUARD(gInterpreterMutex);\n         std::string found = interp->getDynamicLibraryManager()->searchLibrariesForSymbol(SymName, /*searchSystem*/false);\n         // The expected output is just filename without the full path, which"
  },
  {
    "id" : "d1cca777-2fb4-4bb4-a34c-61a9afa6ea1f",
    "prId" : 5094,
    "prUrl" : "https://github.com/root-project/root/pull/5094#pullrequestreview-431842820",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "892143d2-29dd-45f1-859e-4ca5025e7281",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Can't typedef decl be repeated (in several header files and thus several modules)?",
        "createdAt" : "2020-06-16T16:04:35Z",
        "updatedAt" : "2020-06-16T16:40:48Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "c014f4ba-37f5-4a96-a785-1b4ccad8a78a",
        "parentId" : "892143d2-29dd-45f1-859e-4ca5025e7281",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Yes, but it should define the same entity, otherwise modules ODR hash will complain. So whichever we pick should be fine. I suspect that may lead to loading the 'wrong' module to resolve the intended typedef but cannot do anything better.\r\n\r\nAlternatively, we could load all modules which have this typedef name -- that would be redundant because if the typedefs are all the same what's the point; if the typedefs are different we will get an ODR violation diagnostic.",
        "createdAt" : "2020-06-16T16:07:52Z",
        "updatedAt" : "2020-06-16T16:40:48Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "4fcac976-7424-4675-866a-a39a880b0dd4",
        "parentId" : "892143d2-29dd-45f1-859e-4ca5025e7281",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Do we need to load the pcm for the target of the typedef?",
        "createdAt" : "2020-06-16T18:55:03Z",
        "updatedAt" : "2020-06-16T18:55:03Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "2cab36bb-8ec7-44c1-839d-916f6f36119b",
        "parentId" : "892143d2-29dd-45f1-859e-4ca5025e7281",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Yes, we need to load something that has a clang::Decl for the missing identifier ",
        "createdAt" : "2020-06-16T19:53:12Z",
        "updatedAt" : "2020-06-16T19:53:12Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c26e5fcab63b441b8308a2612e0ff70651e5225",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1141,1145 @@                     Register(NSD, /*AddSingleEntry=*/ false);\n                  else if (TypedefNameDecl *TND = dyn_cast<TypedefNameDecl>(R))\n                     Register(TND);\n                  // FIXME: Add the rest...\n               }"
  },
  {
    "id" : "44d5476a-fed4-41bc-ad5e-5aaa1044deb3",
    "prId" : 5094,
    "prUrl" : "https://github.com/root-project/root/pull/5094#pullrequestreview-431692101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a24c04a-123a-4f3a-8b8d-18979a485407",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Is that statement just for the purpose of the assert or does it have another function.\r\nIf \"only for assert\" then maybe put it inside the assert\r\nif \"for more\", could you add the explanation as a comment (other another maintainer might factor it out).",
        "createdAt" : "2020-06-16T16:07:27Z",
        "updatedAt" : "2020-06-16T16:40:48Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "44198c13-7cb9-4efb-b94a-b4ca4e24a230",
        "parentId" : "6a24c04a-123a-4f3a-8b8d-18979a485407",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "I prefer shorter statements. The optimizer will kill that code anyway. \r\n\r\nBtw, this is a temporary code as if we implement what we discussed to fix the CMSSW non-defining but composing Linkdef by updating the owning module of the declarations that came from the lookup helper and other operations all decls will have an owning module and this code will go.",
        "createdAt" : "2020-06-16T16:11:46Z",
        "updatedAt" : "2020-06-16T16:40:48Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "d88ac224-b4bf-49fe-aaea-3315a51b8dcb",
        "parentId" : "6a24c04a-123a-4f3a-8b8d-18979a485407",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "I strongly recommend you put both statements (\"code has no side effect and is here just for the assert\" and \"will be removed later because .... \") in comments.",
        "createdAt" : "2020-06-16T16:32:56Z",
        "updatedAt" : "2020-06-16T16:40:48Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "bb7e55d2-41f8-449b-bf48-b67264f0b486",
        "parentId" : "6a24c04a-123a-4f3a-8b8d-18979a485407",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Sure.",
        "createdAt" : "2020-06-16T16:34:27Z",
        "updatedAt" : "2020-06-16T16:40:48Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c26e5fcab63b441b8308a2612e0ff70651e5225",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +1156,1160 @@                  SourceManager &SM = ND->getASTContext().getSourceManager();\n                  SourceLocation Loc = ND->getLocation();\n                  const FileEntry *FE = SM.getFileEntryForID(SM.getFileID(Loc));\n                  (void)FE;\n                  assert(FE->getName().contains(\"input_line_\"));"
  },
  {
    "id" : "dd544998-9dd4-410b-a8a1-a6c4886c4913",
    "prId" : 5462,
    "prUrl" : "https://github.com/root-project/root/pull/5462#pullrequestreview-401927224",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "980a365c-5a55-4731-8b34-7b420c8cf0fa",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Shouldn't we have a separate class for this. Eg: `TClingClassInfoReadOnly` (name is a placeholder). This would make the code more explicit that this is not changing stuff, thread-safe, etc?",
        "createdAt" : "2020-04-25T20:05:36Z",
        "updatedAt" : "2020-04-28T15:32:31Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "769ffbc7-7ce6-4d71-8654-3449cd791207",
        "parentId" : "980a365c-5a55-4731-8b34-7b420c8cf0fa",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "That sounds a bit heavy-handed though and would easily (not unavoidably) lead to code duplication (either way it is quite a bit more of typing).",
        "createdAt" : "2020-04-26T23:20:30Z",
        "updatedAt" : "2020-04-28T15:32:31Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "7cf98b94-a5c8-4115-b8aa-b9e854455cce",
        "parentId" : "980a365c-5a55-4731-8b34-7b420c8cf0fa",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Could you just then add a `FIXME: We should move this functionality in a separate class TClingClassInfoReadOnly which makes the intent more explicit.`?",
        "createdAt" : "2020-04-28T10:53:45Z",
        "updatedAt" : "2020-04-28T15:32:31Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "e08f2488-7b8a-4284-81b9-ff9ec28af5cb",
        "parentId" : "980a365c-5a55-4731-8b34-7b420c8cf0fa",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Well in addition to moving that functionality the new code would need to suspend the autoparsing and autoloading (this code path by itself only disable template instantiation).\r\nI will add a fixme nonetheless.",
        "createdAt" : "2020-04-28T15:01:49Z",
        "updatedAt" : "2020-04-28T15:32:31Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e8fb15a0772db697c3216f1e2add74f592267bd",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +3880,3884 @@   // code is in the callee (disabling template instantiation) and end up with a more explicit class:\n   //      TClingClassInfoReadOnly.\n   TClingClassInfo* info = new TClingClassInfo(GetInterpreterImpl(), name.c_str(), instantiateTemplate);\n   if (!info->IsValid()) {\n      if (cl->fState != TClass::kHasTClassInit) {"
  },
  {
    "id" : "29a70f00-82c1-42c9-8504-b28c63d844a4",
    "prId" : 5462,
    "prUrl" : "https://github.com/root-project/root/pull/5462#pullrequestreview-401957272",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb5d7762-59d9-4bd5-b4ce-963f32a0501f",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "```suggestion\r\n   // FIXME: Rather than adding an option to the TClingClassInfo, we should consider combining code \r\n   // that is currently in the caller (like SetUnloaded) that disable AutoLoading and AutoParsing and\r\n   // code is in the callee (disabling template instantiation) and end up with a more explicit class:\r\n   //      TClingClassInfoReadOnly.\r\n   TClingClassInfo* info = new TClingClassInfo(GetInterpreterImpl(), name.c_str(), instantiateTemplate);\r\n```",
        "createdAt" : "2020-04-28T15:31:57Z",
        "updatedAt" : "2020-04-28T15:32:31Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e8fb15a0772db697c3216f1e2add74f592267bd",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +3880,3884 @@   // code is in the callee (disabling template instantiation) and end up with a more explicit class:\n   //      TClingClassInfoReadOnly.\n   TClingClassInfo* info = new TClingClassInfo(GetInterpreterImpl(), name.c_str(), instantiateTemplate);\n   if (!info->IsValid()) {\n      if (cl->fState != TClass::kHasTClassInit) {"
  },
  {
    "id" : "3f31ee43-424e-4571-82b7-8ba13ac38a70",
    "prId" : 5485,
    "prUrl" : "https://github.com/root-project/root/pull/5485#pullrequestreview-403192934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12def230-efe7-4f8c-9ffc-7ce90f4e47b8",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "This is a bit unrelated to the PR and the comment is still valid.  So I would skip that.",
        "createdAt" : "2020-04-29T19:32:20Z",
        "updatedAt" : "2020-04-29T19:39:27Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "3d9e30e4-5b8e-4f08-a8c5-66578ba07344",
        "parentId" : "12def230-efe7-4f8c-9ffc-7ce90f4e47b8",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "It is, if I remove the comments without the changes to TSystem, tests will start to fail. With the change in TSystem uncommenting these lines should work just fine. That code actually detected the issue.",
        "createdAt" : "2020-04-29T19:39:11Z",
        "updatedAt" : "2020-04-29T19:39:27Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "4e81bb61-ddfd-4039-a0ab-0678e742ee3b",
        "parentId" : "12def230-efe7-4f8c-9ffc-7ce90f4e47b8",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Yes.  That is what I expect:\r\n\r\nWithout this PR, reloading libraries is exercised (a lot).\r\n\r\nThat the code in TCling.cxx has no negative effect only means that after this PR, the test are no longer reloading libraries that have a PCM (or something like) and thus unloading library and that line are no longer exercise.\r\n\r\nUnless I am mistaken it still means that we need to implement UnloadPCM at some point, don't we?",
        "createdAt" : "2020-04-29T19:42:31Z",
        "updatedAt" : "2020-04-29T19:42:32Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "2835587b-90dc-4d69-9cf0-1d32a994c8de",
        "parentId" : "12def230-efe7-4f8c-9ffc-7ce90f4e47b8",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Yes, the urgency however changes a bit. ",
        "createdAt" : "2020-04-30T04:30:32Z",
        "updatedAt" : "2020-04-30T04:30:33Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "c91fed49748a8425225625699f787640c3f8ec3d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1833,1837 @@\n      LoadPCMImpl(pcmMemFile);\n      fPendingRdicts.erase(pendingRdict);\n\n      return;"
  },
  {
    "id" : "67fe4c25-ef21-4f64-993d-5a18e0faf490",
    "prId" : 5486,
    "prUrl" : "https://github.com/root-project/root/pull/5486#pullrequestreview-412061094",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85aaff3c-dbe2-42cf-889a-8273997067b3",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Move the curly to the prev line?",
        "createdAt" : "2020-05-09T14:59:43Z",
        "updatedAt" : "2020-05-14T19:15:00Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "5e956fc6-2f57-4d08-a0e9-ac358a5147b3",
        "parentId" : "85aaff3c-dbe2-42cf-889a-8273997067b3",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "I find it more readable (because of the complex if) that way.",
        "createdAt" : "2020-05-14T18:06:55Z",
        "updatedAt" : "2020-05-14T19:15:00Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7e069aa73ed34bb3a971252899e5842db77d593",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +5918,5922 @@            if (classinfo && gInterpreter->ClassInfo_IsValid(classinfo)\n                && !(gInterpreter->ClassInfo_Property(classinfo) & kIsEnum))\n            {\n               DataMemberInfo_t *memberinfo = gInterpreter->DataMemberInfo_Factory(classinfo);\n               while (gInterpreter->DataMemberInfo_Next(memberinfo)) {"
  },
  {
    "id" : "7b9c7daa-9ba9-4008-b38a-5c954f3ffb45",
    "prId" : 5486,
    "prUrl" : "https://github.com/root-project/root/pull/5486#pullrequestreview-408656719",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5a8f199-06dc-49cf-a756-8b5828f84b42",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Likewise?",
        "createdAt" : "2020-05-09T15:00:05Z",
        "updatedAt" : "2020-05-14T19:15:00Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7e069aa73ed34bb3a971252899e5842db77d593",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +5924,5928 @@                  if (!(gInterpreter->DataMemberInfo_TypeProperty(memberinfo) & ::kIsFundamental)\n                      && !TClassTable::GetDictNorm(membertypename.c_str()))\n                  {\n                     // Failure to load a dictionary is not (quite) a failure load\n                     // the top-level library.   See detailed comment in the TProtoClass"
  },
  {
    "id" : "1a6242b6-ed14-455f-b5aa-d5a7e17a8668",
    "prId" : 5486,
    "prUrl" : "https://github.com/root-project/root/pull/5486#pullrequestreview-412060663",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e2c3de1-9b07-41be-89c2-980ea9cd4f2a",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Shouldn't the return result of this call affect the final return result?",
        "createdAt" : "2020-05-09T15:00:48Z",
        "updatedAt" : "2020-05-14T19:15:00Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "e1c9e666-22e5-4f64-aec4-fa727b3dd7ae",
        "parentId" : "0e2c3de1-9b07-41be-89c2-980ea9cd4f2a",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "No, see the comment in the previous call to DeepAutoLoadImpl (line 5902)",
        "createdAt" : "2020-05-14T18:06:23Z",
        "updatedAt" : "2020-05-14T19:15:00Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7e069aa73ed34bb3a971252899e5842db77d593",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +5928,5932 @@                     // the top-level library.   See detailed comment in the TProtoClass\n                     // branch (above).\n                     (void)DeepAutoLoadImpl(membertypename.c_str());\n                  }\n               }"
  },
  {
    "id" : "9047fb96-3504-40c3-bab8-7669ee19f397",
    "prId" : 5847,
    "prUrl" : "https://github.com/root-project/root/pull/5847#pullrequestreview-465391674",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec0d1099-3b93-4699-8389-09e97219b65d",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Weird - I was convinced that `IdentifierInfo` is always an (unscoped) name, i.e. `A::BB::CCC` would contain `A`, `BB`, `CCC`. Do you have a test that's sensitive to this, e.g. that we don't offer `CCC` as completion on the global scope?",
        "createdAt" : "2020-08-10T10:02:24Z",
        "updatedAt" : "2020-08-13T14:48:35Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "12724a8c-da36-433e-8dcb-0d7bc6f8470b",
        "parentId" : "ec0d1099-3b93-4699-8389-09e97219b65d",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "That is correct. We control what gets registered as identifier [here](https://github.com/root-project/root/blob/master/core/metacling/src/TCling.cxx#L1112). Let's take your example `A::BB:CCC` being present in module `M`. In code where we have `namespace A{ namespace BB{}}; using namespace A::BB; CCC* c = new CCC();` we need the GMI to store CCC->M mapping.\r\n\r\nThis means that it will give CCC as an identifier for tabcompletion. And yes, we have such a test -- that's the TH1DModel in the RDF namespace.\r\n\r\nWe do not have a reasonable way to improve tab completion in this case for the moment.",
        "createdAt" : "2020-08-10T10:54:37Z",
        "updatedAt" : "2020-08-13T14:48:35Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "045bd242-6423-4221-b328-ea515f1ed591",
        "parentId" : "ec0d1099-3b93-4699-8389-09e97219b65d",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "@vgvassilev I am confused.  In the case of ```A::BB:CCC``` **without** any using statement.  Would this code means that ```CC<tab>``` will auto-complete to CCC or fail (as expected).   What about ```A::BB::CC<tab>```?",
        "createdAt" : "2020-08-10T16:55:44Z",
        "updatedAt" : "2020-08-13T14:48:35Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "d188e190-5ccf-4fe1-b911-d6efb78f00ca",
        "parentId" : "ec0d1099-3b93-4699-8389-09e97219b65d",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "It will autocomplete in both cases. ",
        "createdAt" : "2020-08-10T20:03:33Z",
        "updatedAt" : "2020-08-13T14:48:35Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "506a2cf7-7dea-44bf-879e-db03d9a600f0",
        "parentId" : "ec0d1099-3b93-4699-8389-09e97219b65d",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "In the case where you have:\r\n```\r\nnamespace A { class DDD; };\r\nnamespace B { namespace C { class DDD; } };\r\n```\r\nwhat is the output on screen of\r\n```\r\nroot [] DD<tab>\r\n```",
        "createdAt" : "2020-08-11T14:04:14Z",
        "updatedAt" : "2020-08-13T14:48:35Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "30f88e8d-0daa-4ac4-b53d-7c9a20092c41",
        "parentId" : "ec0d1099-3b93-4699-8389-09e97219b65d",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Nothing -- that's not in the GMI so that's not in the completion set.",
        "createdAt" : "2020-08-11T14:23:12Z",
        "updatedAt" : "2020-08-13T14:48:35Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "efd06f7f-bb92-45c9-b3d5-cb1685242cdb",
        "parentId" : "ec0d1099-3b93-4699-8389-09e97219b65d",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Ok.  Then I am confused.  The previous comments asked:\r\n```\r\nin the case of A::BB:CCC without any using statement. Would this code means that CC<tab> will auto-complete to CCC or fail (as expected). What about A::BB::CC<tab>?\r\n```\r\nand the answer was\r\n```\r\nIt will autocomplete in both cases.\r\n```\r\nFrom that I understood that with\r\n```\r\nnamespace A { namespace B { class CCC; } };\r\n```\r\nwould lead to\r\n```\r\nCC<tab>\r\nautocompletes to\r\nCCC\r\n```\r\nand\r\n```\r\nA::BB:CC<tab>\r\nautocompletes to\r\nA::BB::CCC\r\n```\r\nbut that seems to be contradicted by the last answer (very similar setup):\r\n\r\n> Nothing -- that's not in the GMI so that's not in the completion set.\r\n\r\nSo what am I missing?",
        "createdAt" : "2020-08-11T14:43:07Z",
        "updatedAt" : "2020-08-13T14:48:35Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "5f64636f-dd87-491b-92af-afacbda1470f",
        "parentId" : "ec0d1099-3b93-4699-8389-09e97219b65d",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Sorry, the comment was assuming that A::BB::CCC is part of a dictionary (has a module for it) and went into the global module index. An example for this is ROOT::RDF::TH1DModel. There if you type TH1<tab> the results will contain TH1DModel although it may not be reachable (as we may not have had using `namespace ROOT::RDF`). The artificially created examples, such as A::BB::CCC -- on CC<tab> won't complete as CCC was not in the GMI.",
        "createdAt" : "2020-08-11T18:34:22Z",
        "updatedAt" : "2020-08-13T14:48:35Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "e53d385a-6108-4b0a-81a5-da82a0a71168",
        "parentId" : "ec0d1099-3b93-4699-8389-09e97219b65d",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Ah but I meant to say \"what if those types where in a dictionary and hence in the GMI ?\".\r\nI.e. if the types:\r\n```\r\nnamespace A { namespace B { class CCC; }\r\nnamespace A { class DDD; };\r\nnamespace B { namespace C { class DDD; } };\r\n```\r\nare in a dictionary and hence in the GMI what does:\r\n```\r\nCC<tab>\r\nDD<tab>\r\nB::C::DD<tab>\r\n```\r\nprints?",
        "createdAt" : "2020-08-11T18:55:52Z",
        "updatedAt" : "2020-08-13T14:48:35Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "360a6879-9e1e-4436-8760-bd1e8cd5571b",
        "parentId" : "ec0d1099-3b93-4699-8389-09e97219b65d",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "```\r\nroot.exe -l -b\r\nroot [0] TH1\r\nTH1\r\nTH1C\r\nTH1D\r\nTH1DModel\r\nTH1Editor\r\nTH1F\r\nTH1I\r\nTH1K\r\nTH1S\r\n```\r\n```\r\nroot.exe -l -b\r\nroot [0] ROOT::RDF::\r\nMakeCsvDataFrame\r\nMakeSqliteDataFrame\r\nMakeTrivialDataFrame\r\nRCsvDS\r\nRInterface<ROOT\r\nRTrivialDS\r\nTH1DModel\r\nTH2DModel\r\nTH3DModel\r\nTProfile1DModel\r\nTProfile2DModel\r\n```",
        "createdAt" : "2020-08-11T19:29:34Z",
        "updatedAt" : "2020-08-13T14:48:35Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "21ffc24e-c1af-48f6-897a-1fe6494641fe",
        "parentId" : "ec0d1099-3b93-4699-8389-09e97219b65d",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Well this is a little bit \"annoying\" :( ... What is the source of the problem? (I.e. is it the issue @Axel-Naumann is pointing out about line 2377?)",
        "createdAt" : "2020-08-11T19:52:11Z",
        "updatedAt" : "2020-08-13T14:48:35Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "988fd7b2-3138-4d9f-9aa6-8223b6a9b5a2",
        "parentId" : "ec0d1099-3b93-4699-8389-09e97219b65d",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Yes, the same issue -- the GMI can never know if the user typed `using namespace ROOT::RDF` if it was typed the completion will be correct.",
        "createdAt" : "2020-08-11T19:57:26Z",
        "updatedAt" : "2020-08-13T14:48:35Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "f748142c-bb75-45cb-872e-f43597e330eb",
        "parentId" : "ec0d1099-3b93-4699-8389-09e97219b65d",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Fair enough.  For the record the current behavior is reversely \"bad\" as even with the `using namespace ROOT::RDF `, it does not list `TH1DModel`.",
        "createdAt" : "2020-08-11T20:09:51Z",
        "updatedAt" : "2020-08-13T14:48:35Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "64389973fd1340a1107c21730ad10dfd887b7dcb",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +2361,2365 @@      return;\n\n   if (IdentifierInfoLookup *External = C.Idents.getExternalIdentifierLookup()) {\n      std::unique_ptr<IdentifierIterator> Iter(External->getIdentifiers());\n      for (llvm::StringRef Ident = Iter->Next(); !Ident.empty(); Ident = Iter->Next()) {"
  }
]