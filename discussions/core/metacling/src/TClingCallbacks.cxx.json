[
  {
    "id" : "8b4cf382-84de-4267-8ac0-e0a32a5b6763",
    "prId" : 5398,
    "prUrl" : "https://github.com/root-project/root/pull/5398#pullrequestreview-397354253",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "147c38ea-c234-4391-96ef-c1a3f16b499a",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Out of curiosity, isn't that check also done in ```DynamicLibraryManager::isSharedLibrary```?",
        "createdAt" : "2020-04-21T12:20:33Z",
        "updatedAt" : "2020-04-21T21:00:37Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "83701bf7-2ecc-4a0d-8036-4eea95347844",
        "parentId" : "147c38ea-c234-4391-96ef-c1a3f16b499a",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "We do not seem to have that. There we assume we passed a file.",
        "createdAt" : "2020-04-21T13:55:14Z",
        "updatedAt" : "2020-04-21T21:00:37Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9cc406be22692eefd2d40396941d784a2c369d6",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +925,929 @@static bool shouldIgnore(const std::string& FileName,\n                         const cling::DynamicLibraryManager& dyLibManager) {\n   if (llvm::sys::fs::is_directory(FileName))\n     return true;\n"
  },
  {
    "id" : "36e3f4c5-3578-4990-95f3-5b83964ad7f3",
    "prId" : 5398,
    "prUrl" : "https://github.com/root-project/root/pull/5398#pullrequestreview-397523160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb3d0825-a1dd-4969-8333-04d9c84a7e33",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Are the bases for these test documented somewhere (a reference would then be helpful) or discovered (i.e. heuristic)?",
        "createdAt" : "2020-04-21T12:23:32Z",
        "updatedAt" : "2020-04-21T21:00:37Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "48bf1b18-2ecf-419f-8777-63945350150d",
        "parentId" : "cb3d0825-a1dd-4969-8333-04d9c84a7e33",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "We created a library and looked. The best reference is the manual for `objcopy` which does not have the information we need.\r\n\r\nWhat do you mean by bases: `ELFSectionRef`?",
        "createdAt" : "2020-04-21T13:57:10Z",
        "updatedAt" : "2020-04-21T21:00:37Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "20e6e9fc-12df-4bbd-bfd3-ee22cd8e35cb",
        "parentId" : "cb3d0825-a1dd-4969-8333-04d9c84a7e33",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "By \"bases\" I meant \"source of information/knowledge\", so given your answer you may want to add a comment akin to \"Test extracted from looking at a library created with binutils X.Y.Z.\"",
        "createdAt" : "2020-04-21T17:31:40Z",
        "updatedAt" : "2020-04-21T21:00:37Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9cc406be22692eefd2d40396941d784a2c369d6",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +956,960 @@            // reading the manual of objcopy and inspection of stripped with\n            // objcopy libraries.\n            auto SecRef = static_cast<llvm::object::ELFSectionRef&>(S);\n            if (SecRef.getType() == llvm::ELF::SHT_NOBITS)\n               return true;"
  }
]