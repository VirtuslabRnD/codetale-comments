[
  {
    "id" : "98864f26-a8c3-403f-8389-37ca66489517",
    "prId" : 9986,
    "prUrl" : "https://github.com/apache/kafka/pull/9986#pullrequestreview-585947129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f6783f1-c337-4a83-9fbb-2d51ba74a14f",
        "parentId" : null,
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "capitalize enum names please.  also, do we need this enum?  Why does DEFAULT need to be distinct from YES?  Once we have a lot of tests depending on the default being \"on\" I can't see us changing this (or how having 3 values would help us change it if so...)",
        "createdAt" : "2021-02-08T18:57:59Z",
        "updatedAt" : "2021-02-09T14:12:29Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "91bc97ae-4a7c-4aa7-91e7-8b09bb5334cc",
        "parentId" : "2f6783f1-c337-4a83-9fbb-2d51ba74a14f",
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "Since we can't use `null` as defaults for annotations, I added DEFAULT enum constants for cluster type and auto start attributes. When processing the `@ClusterTest` method annotations, if we see Type.DEFAULT or AutoStart.DEFAULT, we know the test method is saying \"use the default\". We could simply put the defaults right in the `ClusterTest` annotation, but then we would have an issue when method-level `@ClusterTest` and class-level `@ClusterTestDefaults` are both in use. How would we know which to use? \r\n\r\nI added AutoStart.DEFAULT in order to let the method-level annotation explicitly defer to the default. Here's an example:\r\n\r\n```java\r\n// indicate that for this test, we want to disable auto-start by default\r\n@ClusterTestDefaults(autoStart = false)\r\npublic class TestClass {\r\n  \r\n  // but this test does want auto start\r\n  @ClusterTest(autoStart = AutoStart.YES)\r\n  public void test1() { }\r\n\r\n  // this test is unnecessarily setting auto start as false\r\n  @ClusterTest(autoStart = AutoStart.NO)\r\n  public void test2() { }\r\n\r\n  // this test will get its auto start value from the class level\r\n  @ClusterTest\r\n  public void test3() { }\r\n}\r\n```\r\n\r\nAn alternative would be to allow for a class-level annotation that completely overrides any method-level `@ClusterTest`, but that seems a little backwards.",
        "createdAt" : "2021-02-08T21:30:03Z",
        "updatedAt" : "2021-02-09T14:12:29Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      },
      {
        "id" : "41f540d6-903b-4840-918f-29fdb26e8ac1",
        "parentId" : "2f6783f1-c337-4a83-9fbb-2d51ba74a14f",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "Thanks for the explanation.  That makes sense.",
        "createdAt" : "2021-02-08T21:38:55Z",
        "updatedAt" : "2021-02-09T14:12:29Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc59c3356e36f9f7615aa2c3f1f9ab7aa50c49a0",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +18,22 @@package kafka.test.annotation;\n\npublic enum AutoStart {\n    YES,\n    NO,"
  }
]