[
  {
    "id" : "027a05d3-9fd4-4978-b710-a8fc98939bf0",
    "prId" : 4351,
    "prUrl" : "https://github.com/apache/kafka/pull/4351#pullrequestreview-85275179",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e54b94c-4a03-42b7-a23c-22dc73ffa93b",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "So, we don't actually need to wait until true here?",
        "createdAt" : "2017-12-21T23:04:34Z",
        "updatedAt" : "2017-12-22T06:18:37Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "a3f73cb1-4489-4586-bacb-3924d4072093",
        "parentId" : "3e54b94c-4a03-42b7-a23c-22dc73ffa93b",
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "Right, since the ZK write in between is blocking and is guaranteed to update the count in the histogram. ",
        "createdAt" : "2017-12-22T02:40:40Z",
        "updatedAt" : "2017-12-22T06:18:37Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "df686e50-a50d-48aa-a9b6-3271c8aa7011",
        "parentId" : "3e54b94c-4a03-42b7-a23c-22dc73ffa93b",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Ah, I had missed that you're using the count now. Makes sense.",
        "createdAt" : "2017-12-22T10:17:25Z",
        "updatedAt" : "2017-12-22T10:27:01Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d10b7657e7d5ebc621fbbf1c9ed6402af7cc63a1",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +207,211 @@  private def verifyBrokerZkMetrics(server: KafkaServer, topic: String): Unit = {\n    // Latency is rounded to milliseconds, so check the count instead.\n    val initialCount = yammerHistogramCount(\"kafka.server:type=ZooKeeperClientMetrics,name=ZooKeeperRequestLatencyMs\").asInstanceOf[Long]\n    servers.head.zkClient.getLeaderForPartition(new TopicPartition(topic, 0))\n    val newCount = yammerHistogramCount(\"kafka.server:type=ZooKeeperClientMetrics,name=ZooKeeperRequestLatencyMs\").asInstanceOf[Long]"
  },
  {
    "id" : "a51cc786-1cea-43f8-9862-990cbb45310f",
    "prId" : 4351,
    "prUrl" : "https://github.com/apache/kafka/pull/4351#pullrequestreview-85275179",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ceaeedf-b55a-44d6-8116-ff4580920968",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "I think we can return a `Long` here.",
        "createdAt" : "2017-12-22T10:18:24Z",
        "updatedAt" : "2017-12-22T10:27:01Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d10b7657e7d5ebc621fbbf1c9ed6402af7cc63a1",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +275,279 @@  }\n\n  private def yammerHistogramCount(name: String): Any = {\n    val allMetrics = Metrics.defaultRegistry.allMetrics.asScala\n    val (_, metric) = allMetrics.find { case (n, _) => n.getMBeanName.endsWith(name) }"
  }
]