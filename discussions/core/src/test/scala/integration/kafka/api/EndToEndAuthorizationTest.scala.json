[
  {
    "id" : "4c023428-f985-41ab-b4b0-81df02e438c7",
    "prId" : 4795,
    "prUrl" : "https://github.com/apache/kafka/pull/4795#pullrequestreview-125965814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3578d905-2629-4b21-9b40-2d82be2dac43",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Why is this needed?",
        "createdAt" : "2018-06-05T11:45:00Z",
        "updatedAt" : "2018-06-06T06:59:36Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "8edb2601-449d-4bb2-98c1-89eeea3afb25",
        "parentId" : "3578d905-2629-4b21-9b40-2d82be2dac43",
        "authorId" : "947ee362-c474-4fcc-becc-f2f90b1fd1e9",
        "body" : "because we added tests which use topic auto-create, so they need a default replication factor matching the min in sync",
        "createdAt" : "2018-06-05T13:23:21Z",
        "updatedAt" : "2018-06-06T06:59:36Z",
        "lastEditedBy" : "947ee362-c474-4fcc-becc-f2f90b1fd1e9",
        "tags" : [
        ]
      },
      {
        "id" : "1a757d24-a191-473d-85dd-3720296688e4",
        "parentId" : "3578d905-2629-4b21-9b40-2d82be2dac43",
        "authorId" : "947ee362-c474-4fcc-becc-f2f90b1fd1e9",
        "body" : "thanks anyway, we spotted a missing `@Test` :(",
        "createdAt" : "2018-06-05T13:23:39Z",
        "updatedAt" : "2018-06-06T06:59:36Z",
        "lastEditedBy" : "947ee362-c474-4fcc-becc-f2f90b1fd1e9",
        "tags" : [
        ]
      }
    ],
    "commit" : "1346289d0bc7df43f923dd339c611736a0d5d3d8",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +159,163 @@  this.serverConfig.setProperty(KafkaConfig.OffsetsTopicReplicationFactorProp, \"3\")\n  this.serverConfig.setProperty(KafkaConfig.MinInSyncReplicasProp, \"3\")\n  this.serverConfig.setProperty(KafkaConfig.DefaultReplicationFactorProp, \"3\")\n  this.consumerConfig.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group\")\n"
  },
  {
    "id" : "a3abb9c3-f9f5-4107-9ccd-86597713d36b",
    "prId" : 7086,
    "prUrl" : "https://github.com/apache/kafka/pull/7086#pullrequestreview-261589786",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c661a2d8-ca83-4750-a30d-652f3d2c9058",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Are the consumer and adminclient cases tested already?",
        "createdAt" : "2019-07-13T21:33:51Z",
        "updatedAt" : "2019-07-15T23:22:26Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "9bc70b0e-8e89-43eb-8a29-76bfa1f77e60",
        "parentId" : "c661a2d8-ca83-4750-a30d-652f3d2c9058",
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "@ijuma Thanks for the review. This test verifies producer and consumer. AdminClient doesn't cache topics in its metadata, so that should be ok.",
        "createdAt" : "2019-07-14T12:33:14Z",
        "updatedAt" : "2019-07-15T23:22:26Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "b7d3b8ce-d9d3-454b-ad6d-fee0b8f7dc53",
        "parentId" : "c661a2d8-ca83-4750-a30d-652f3d2c9058",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "The test comment only mentions the producer, so should probably be updated. Since this class is about end to end testing, I don't think it should care about implementation details. That is, we should have at least one test for the admin client where a batch of topics is partially authorized.",
        "createdAt" : "2019-07-14T16:24:56Z",
        "updatedAt" : "2019-07-15T23:22:26Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f93f97b499bcc758c2133d0bdb6bb732b3b92de3",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +317,321 @@    * Also verifies that subsequent publish, consume and describe to authorized topic succeeds.\n    */\n  @Test\n  def testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl(): Unit = {\n    // Set consumer group acls since we are testing topic authorization"
  },
  {
    "id" : "17a31916-6bb3-4458-b42f-9a1b305915a5",
    "prId" : 7312,
    "prUrl" : "https://github.com/apache/kafka/pull/7312#pullrequestreview-314511196",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "372ff991-83fc-4c27-83f9-a5c842063f7a",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Scala checkstyle cleanup, ditto below",
        "createdAt" : "2019-11-08T23:37:43Z",
        "updatedAt" : "2020-01-09T19:24:32Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "27f76b7b68256a0b935ed2ffb490616718608782",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +217,221 @@    consumer.assign(List(tp).asJava)\n    consumeRecords(consumer, numRecords)\n    confirmReauthenticationMetrics()\n  }\n"
  },
  {
    "id" : "4d3e8e92-ca1e-490e-b759-a997cd178c0a",
    "prId" : 7312,
    "prUrl" : "https://github.com/apache/kafka/pull/7312#pullrequestreview-338815258",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49c87cf6-1eef-4f48-b953-bf420194f0a5",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "As explained in the above comment, with this change we may still return data for `topic2` if only `topic` is not authorized, so this test needs to be updated.",
        "createdAt" : "2019-11-08T23:41:04Z",
        "updatedAt" : "2020-01-09T19:24:32Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "6eaa05d6-0151-4b1b-a082-6554e5e9d8d6",
        "parentId" : "49c87cf6-1eef-4f48-b953-bf420194f0a5",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I wonder if we really need to be testing with two separate topics here. We already have a hard time with the flakiness of this test.",
        "createdAt" : "2020-01-06T17:33:33Z",
        "updatedAt" : "2020-01-09T19:24:33Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "2a71c98a-bba3-474e-ba12-008baddb635d",
        "parentId" : "49c87cf6-1eef-4f48-b953-bf420194f0a5",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I think it is sound to have two topics here since topic1 is for read/write to a topic without ACL restrictions, and topic2 is for read/write to a topic with ACL restriction, and then granting the permission.\r\n\r\nI hope I've figured out all the flakiness of this one after spending 10+ hours on it already :P and actually one of the flakiness did lead to some real issue here, so I'd prefer we keep it as is.",
        "createdAt" : "2020-01-06T18:34:45Z",
        "updatedAt" : "2020-01-09T19:24:33Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "27f76b7b68256a0b935ed2ffb490616718608782",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +358,362 @@    consumer.assign(List(tp, tp2).asJava)\n    sendRecords(producer, numRecords, tp2)\n    var topic2RecordConsumed = false\n    def verifyNoRecords(records: ConsumerRecords[Array[Byte], Array[Byte]]): Boolean = {\n      assertEquals(\"Consumed records with unexpected partitions: \" + records, Collections.singleton(tp2), records.partitions())"
  },
  {
    "id" : "52966a9a-23c8-436d-b401-9830cb3ca4b8",
    "prId" : 7613,
    "prUrl" : "https://github.com/apache/kafka/pull/7613#pullrequestreview-313726030",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb707ac8-e78e-4527-b892-21dc00e44027",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is a fix for the test flakiness itself: when the metadata has an error, it would not be requested update immediately but still wait on its metadata age to expire; so if we are unlucky and still get this error when assigned with tp1/tp2, we are doomed to fail since the metadata would not be refreshed within the 10 sec timeout.",
        "createdAt" : "2019-10-30T04:26:17Z",
        "updatedAt" : "2019-11-05T03:14:32Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "fae5a158-dc78-44fe-b866-016fe7b3584c",
        "parentId" : "bb707ac8-e78e-4527-b892-21dc00e44027",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "The metadata refresh policy seems a bit broken if it can go 5 minutes between updating the metadata due to an error :(",
        "createdAt" : "2019-10-30T15:49:12Z",
        "updatedAt" : "2019-11-05T03:14:32Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "3e6d6066-0101-40af-bdb4-f7cab207a296",
        "parentId" : "bb707ac8-e78e-4527-b892-21dc00e44027",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "It should not wait for expiration in that case, right?",
        "createdAt" : "2019-10-30T15:55:42Z",
        "updatedAt" : "2019-11-05T03:14:32Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "b6ad3889-ee8d-4770-8dab-5335a284b46e",
        "parentId" : "bb707ac8-e78e-4527-b892-21dc00e44027",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "From my observation, it would still if there's a fatal error like `AuthorizationException`, in this test we actually are relying on manual `assign` which would always request a metadata update, but if that update still get the `AuthorizationException` on some of the topic metadata it would wait for another refresh period.",
        "createdAt" : "2019-10-30T17:14:18Z",
        "updatedAt" : "2019-11-05T03:14:32Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "d98223e3-d7ad-45a2-8cbd-03cbec810801",
        "parentId" : "bb707ac8-e78e-4527-b892-21dc00e44027",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "AuthorizationException should not happen during the test, though, right?  We choose to treat AuthorizationException differently than transitory errors specifically because we believe authorization failures should be permanent (in most cases....)",
        "createdAt" : "2019-10-31T21:16:54Z",
        "updatedAt" : "2019-11-05T03:14:32Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "6017c873-5dd6-43ea-9d6b-d3eef6f9718b",
        "parentId" : "bb707ac8-e78e-4527-b892-21dc00e44027",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I actually see it being thrown from the metadata, in `metadata.maybeThrowAnyException()` inside `poll`. The problem is that, within this test, if this race condition happens:\r\n\r\n1. We update ACL for `topic`.\r\n2. We change `consumer.assign`, which would automatically trigger a metadata request.\r\n3. The metadata still have the AuthorizationException even after 1) since it is not propagated yet.\r\n\r\nThen after it is thrown the metadata would no longer be updated until 5 min later, whereas we only wait for 10 secs.",
        "createdAt" : "2019-11-02T17:30:30Z",
        "updatedAt" : "2019-11-05T03:14:32Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "38e0026b-17a4-4d84-a9b3-c30e70f65b44",
        "parentId" : "bb707ac8-e78e-4527-b892-21dc00e44027",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Could we wait for the metadata propagation before calling assign?",
        "createdAt" : "2019-11-02T18:27:26Z",
        "updatedAt" : "2019-11-05T03:14:32Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "819d85e0-691e-434d-b9c1-173699ea709c",
        "parentId" : "bb707ac8-e78e-4527-b892-21dc00e44027",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "For authorization errors, it seems reasonable not to retry too eagerly. We do have logic to retry immediately if the error is invalid metadata (e.g. NOT_LEADER).",
        "createdAt" : "2019-11-04T21:48:57Z",
        "updatedAt" : "2019-11-05T03:14:32Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "bdb48177-61ff-47ab-b944-4005e491b2fa",
        "parentId" : "bb707ac8-e78e-4527-b892-21dc00e44027",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "@ijuma actually my previous statement is not correct, what we actually did is:\r\n\r\n1. Change `consumer.assign`, and then check that produce to other authorized topic is okay but fetching will throw.\r\n2. Then update the ACL for `topic`.\r\n\r\nSo there are two scenarios when 1) throw: it can either throw from the update-position call where the metadata is not updated, or it can throw from the already-requested metadata that still have the `TopicAuthorizationException`. In the latter case since the metadata is already updated it would not be updated again until the metadata.age elapsed.",
        "createdAt" : "2019-11-04T22:29:13Z",
        "updatedAt" : "2019-11-05T03:14:32Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "b9f84ef3-5b6b-4ceb-becf-6059f735966d",
        "parentId" : "bb707ac8-e78e-4527-b892-21dc00e44027",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "I see. OK, maybe what you've done is easiest then. 1.5 seconds seems a bit slow still, should it be even lower?",
        "createdAt" : "2019-11-07T14:36:35Z",
        "updatedAt" : "2019-11-07T14:36:35Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "b79c27f6-bc5a-443e-87a5-fb5fe42a797e",
        "parentId" : "bb707ac8-e78e-4527-b892-21dc00e44027",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I guess I can make that even lower, the previous value is just to resolve the flakiness.",
        "createdAt" : "2019-11-08T00:40:21Z",
        "updatedAt" : "2019-11-08T00:40:21Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6162e14bec895c0b7abafec33394ee11cb25a75d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +182,186 @@  this.serverConfig.setProperty(KafkaConfig.ConnectionsMaxReauthMsProp, \"1500\")\n  this.consumerConfig.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group\")\n  this.consumerConfig.setProperty(ConsumerConfig.METADATA_MAX_AGE_CONFIG, \"1500\")\n\n  /**"
  }
]