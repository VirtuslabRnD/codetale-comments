[
  {
    "id" : "7fd8783a-bef5-4688-bc1b-88f8a9d81cd1",
    "prId" : 5443,
    "prUrl" : "https://github.com/apache/kafka/pull/5443#pullrequestreview-142855342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eaea04c3-7694-492a-958f-fa02fbd9348e",
        "parentId" : null,
        "authorId" : "915b2f67-05e6-4824-939a-398e7be58870",
        "body" : "nit: unused import",
        "createdAt" : "2018-08-02T15:41:10Z",
        "updatedAt" : "2018-08-14T18:40:41Z",
        "lastEditedBy" : "915b2f67-05e6-4824-939a-398e7be58870",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a20c3066d53aa7d61df1cc5bf89938e2489d2bf",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +33,37 @@ * Integration tests for the consumer that cover basic usage as well as server failures\n */\nabstract class BaseConsumerTest extends IntegrationTestHarness {\n\n  val epsilon = 0.1"
  },
  {
    "id" : "6049d79b-0e8f-4c1e-a405-42ef0ace399f",
    "prId" : 6058,
    "prUrl" : "https://github.com/apache/kafka/pull/6058#pullrequestreview-192417129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50f62798-9ae9-4493-9be7-d81b4cfd2fda",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Was this needed in the end?",
        "createdAt" : "2019-01-14T22:15:14Z",
        "updatedAt" : "2019-01-15T03:26:21Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "0a8d6228-8fd8-4293-b5fa-0cd8c168cb9c",
        "parentId" : "50f62798-9ae9-4493-9be7-d81b4cfd2fda",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "The tests `testMultiConsumerSessionTimeoutOnStopPolling` and `testMultiConsumerSessionTimeoutOnClose` are having 3 consumers join the group concurrently. With one more bounce, it is easy to see that the last 2 consumers join late which triggers second rebalance that takes longer time and test could timeout. Adding 10ms for initial.join.delay could mitigate the problem.",
        "createdAt" : "2019-01-14T23:16:20Z",
        "updatedAt" : "2019-01-15T03:26:21Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "29f668ef1a9b2ee5939791b9bd5b89bf1a1660bb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +53,57 @@  this.serverConfig.setProperty(KafkaConfig.GroupMinSessionTimeoutMsProp, \"100\") // set small enough session timeout\n  this.serverConfig.setProperty(KafkaConfig.GroupMaxSessionTimeoutMsProp, \"30000\")\n  this.serverConfig.setProperty(KafkaConfig.GroupInitialRebalanceDelayMsProp, \"10\")\n  this.producerConfig.setProperty(ProducerConfig.ACKS_CONFIG, \"all\")\n  this.producerConfig.setProperty(ProducerConfig.CLIENT_ID_CONFIG, producerClientId)"
  },
  {
    "id" : "3553ff89-ce7a-487a-8053-22b9ec4e6f2b",
    "prId" : 6238,
    "prUrl" : "https://github.com/apache/kafka/pull/6238#pullrequestreview-206856338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "881bece6-8721-4715-93dc-a725f7246f7b",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Not sure why this should be a requirement. I think `validateGroupAssignment` can still be satisfied as long as the subscription is non-empty.",
        "createdAt" : "2019-02-13T18:53:15Z",
        "updatedAt" : "2019-03-30T16:16:28Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "9e97c2c1-6b72-46d2-81ed-46093e2a1077",
        "parentId" : "881bece6-8721-4715-93dc-a725f7246f7b",
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "`isPartitionAssignmentValid(assignments, subscriptions)`\r\n```\r\n* Check whether partition assignment is valid\r\n   * Assumes partition assignment is valid if\r\n   * 1. Every consumer got assigned at least one partition\r\n   * 2. Each partition is assigned to only one consumer\r\n   * 3. Every partition is assigned to one of the consumers\r\n```\r\n\r\nIt checks \r\n```\r\nval allNonEmptyAssignments = assignments.forall(assignment => assignment.nonEmpty)\r\n    if (!allNonEmptyAssignments) {\r\n      // at least one consumer got empty assignment\r\n      return false\r\n    }\r\n```\r\n\r\nI don't think it will pass if that assertion doesn't itself",
        "createdAt" : "2019-02-22T14:49:34Z",
        "updatedAt" : "2019-03-30T16:16:28Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2acc8ddf917981b24c61b84f36c4ec7ec4caeec",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +256,260 @@                                                   subscriptions: Set[TopicPartition],\n                                                   group: String = group): (mutable.Buffer[KafkaConsumer[Array[Byte], Array[Byte]]], mutable.Buffer[ConsumerAssignmentPoller]) = {\n    assertTrue(consumerGroup.size + numOfConsumersToAdd <= subscriptions.size)\n    addConsumersToGroup(numOfConsumersToAdd, consumerGroup, consumerPollers, topicsToSubscribe, subscriptions, group)\n    // wait until topics get re-assigned and validate assignment"
  }
]