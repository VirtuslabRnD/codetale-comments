[
  {
    "id" : "9dfea993-8034-4ff4-b76f-c361525903a8",
    "prId" : 4464,
    "prUrl" : "https://github.com/apache/kafka/pull/4464#pullrequestreview-92282845",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a572cb6-ecea-4edc-a3d0-bc7f43b7962f",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Should we clear this in a `@Setup`?",
        "createdAt" : "2018-01-29T17:42:09Z",
        "updatedAt" : "2018-01-30T17:59:34Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ec0d321aa79ae11696dc746b434c88b1bad60ff",
    "line" : 230,
    "diffHunk" : "@@ -1,1 +812,816 @@object TestMetricsReporter {\n  val PollingIntervalProp = \"polling.interval\"\n  val testReporters = new ConcurrentLinkedQueue[TestMetricsReporter]()\n\n  def waitForReporters(count: Int): List[TestMetricsReporter] = {"
  },
  {
    "id" : "def98ad2-54af-4671-89ed-87f8c6b92004",
    "prId" : 4488,
    "prUrl" : "https://github.com/apache/kafka/pull/4488#pullrequestreview-93800207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a84156ff-ef8f-4743-a8ea-e9db7bda655b",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Is it worthwhile having a test case for changing the inter-broker-listener?",
        "createdAt" : "2018-02-02T22:42:14Z",
        "updatedAt" : "2018-02-04T02:11:57Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "f6144f1e-5e9e-4a56-a809-6b5a44448af2",
        "parentId" : "a84156ff-ef8f-4743-a8ea-e9db7bda655b",
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "Sorry for the confusion about inter-broker listeners. Added a test to verify that inter-broker listener cannot be updated. ",
        "createdAt" : "2018-02-03T01:22:06Z",
        "updatedAt" : "2018-02-04T02:11:57Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0488d78e0ea02c3ddde1a31f6c1e0613a443e3d",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +523,527 @@\n  @Test\n  def testAdvertisedListenerUpdate(): Unit = {\n    val adminClient = adminClients.head\n    val externalAdminClient = createAdminClient(SecurityProtocol.SASL_SSL, SecureExternal)"
  },
  {
    "id" : "0f945108-8d0b-451d-a421-84aa4ea4afdf",
    "prId" : 4526,
    "prUrl" : "https://github.com/apache/kafka/pull/4526#pullrequestreview-94070527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdff2be7-c77c-460a-875e-cd0d20d22a80",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Do we want to rename the parameter in `verifyThreadPoolResize` as well?",
        "createdAt" : "2018-02-05T17:18:23Z",
        "updatedAt" : "2018-02-05T20:42:17Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb5325e54ace98a983ce5f6245206cdd8d94acc7",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +1057,1061 @@\n  private def stopAndVerifyProduceConsume(producerThread: ProducerThread, consumerThread: ConsumerThread,\n                                          mayReceiveDuplicates: Boolean = false): Unit = {\n    TestUtils.waitUntilTrue(() => producerThread.sent >= 10, \"Messages not sent\")\n    producerThread.shutdown()"
  },
  {
    "id" : "0933d246-e7cd-439f-9957-245e45bbd7b5",
    "prId" : 4603,
    "prUrl" : "https://github.com/apache/kafka/pull/4603#pullrequestreview-98159558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6dc4fd73-47fe-4397-a11a-423adf247e2a",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Does this test case actually depend on expiring the controller's session? I thought the registration logic is common on all brokers.",
        "createdAt" : "2018-02-21T07:09:50Z",
        "updatedAt" : "2018-02-21T11:24:25Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "9e211390-36eb-414c-8662-03232e9a99e6",
        "parentId" : "6dc4fd73-47fe-4397-a11a-423adf247e2a",
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "The test doesn't depend on expiring the controller's session, it could be any broker's ZK session. I chose the controller because I thought it was worth checking that the controller epoch had changed as a result of the expiry (not strictly required for the test though).",
        "createdAt" : "2018-02-21T11:31:04Z",
        "updatedAt" : "2018-02-21T11:31:04Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      }
    ],
    "commit" : "28285548473d133891cea199a37e94cd843e1e30",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +612,616 @@    // Trigger session expiry and ensure that controller registers new advertised listener after expiry\n    val controllerEpoch = zkClient.getControllerEpoch\n    val controllerServer = servers(zkClient.getControllerId.getOrElse(throw new IllegalStateException(\"No controller\")))\n    val controllerZkClient = controllerServer.zkClient\n    val sessionExpiringClient = createZooKeeperClientToTriggerSessionExpiry(controllerZkClient.currentZooKeeper)"
  },
  {
    "id" : "72f836f8-67ee-4f76-96db-0ab398191189",
    "prId" : 4747,
    "prUrl" : "https://github.com/apache/kafka/pull/4747#pullrequestreview-106182973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf5cd359-a7aa-4aeb-90d0-0906a062b8d8",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Maybe we could add an assertion on the size of `passwordConfigs` so that the test case cannot succeed trivially?",
        "createdAt" : "2018-03-22T15:53:51Z",
        "updatedAt" : "2018-03-22T16:51:48Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d1d875b65618c9a3ffea33323a2f9e39b94bc2f",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +672,676 @@      val secret = config.passwordEncoderSecret.getOrElse(throw new IllegalStateException(\"Password encoder secret not configured\"))\n      val oldSecret = config.passwordEncoderOldSecret.getOrElse(throw new IllegalStateException(\"Password encoder old secret not configured\"))\n      val passwordConfigs = props.asScala.filterKeys(DynamicBrokerConfig.isPasswordConfig)\n      assertTrue(\"Password configs not found\", passwordConfigs.nonEmpty)\n      val passwordDecoder = new PasswordEncoder(secret,"
  },
  {
    "id" : "1957cf72-dc4a-4303-ae57-2163840ef712",
    "prId" : 5189,
    "prUrl" : "https://github.com/apache/kafka/pull/5189#pullrequestreview-130378605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f32ef24-6483-4369-9589-96a0795940a8",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Is the expectation that there is 1 `leader == null`? Should we make that explicit?",
        "createdAt" : "2018-06-20T12:30:26Z",
        "updatedAt" : "2018-06-20T13:52:02Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "d33944f8-fcae-4a87-8594-8a72fd804d05",
        "parentId" : "8f32ef24-6483-4369-9589-96a0795940a8",
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "There could be more than one. The previous check verifies that all partitions with this leader id have `leader == null`. This is just to verify that there was at least one such case.",
        "createdAt" : "2018-06-20T12:50:03Z",
        "updatedAt" : "2018-06-20T13:52:02Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "5b8f67bf-dcf0-406e-ab9b-0b615b6760be",
        "parentId" : "8f32ef24-6483-4369-9589-96a0795940a8",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Got it.",
        "createdAt" : "2018-06-20T12:54:53Z",
        "updatedAt" : "2018-06-20T13:52:02Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a77d5234890f32c80fbc067a65177ea594be99d5",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +837,841 @@    val partitions = producer.partitionsFor(topic).asScala\n    assertEquals(0, partitions.count(p => p.leader != null && p.leader.id == servers.head.config.brokerId))\n    assertTrue(\"Did not find partitions with no leader\", partitions.exists(_.leader == null))\n  }\n"
  },
  {
    "id" : "89c57caf-dde0-48b7-bcb0-9c19adf42bbc",
    "prId" : 5256,
    "prUrl" : "https://github.com/apache/kafka/pull/5256#pullrequestreview-131553017",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2784420-3b3d-495c-9034-61c87b0f2333",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "It looks like this is intended to be the default in `ProducerConfig`. Maybe we should refer to the value there?",
        "createdAt" : "2018-06-23T22:58:06Z",
        "updatedAt" : "2018-06-23T22:58:29Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "bf7b05af-8b23-438e-8e57-bdbbb4934f48",
        "parentId" : "e2784420-3b3d-495c-9034-61c87b0f2333",
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "@ijuma Thanks for the review. `ProducerConfig` hard-codes the default in the config definition, so there doesn't seem to be an easy way to use that constant. So I will merge as-is for now. Let me know if I should add a re-usable constant in `ProducerConfig` for default values and I can do that in a follow-on PR since that is public API. Thanks.",
        "createdAt" : "2018-06-25T09:49:01Z",
        "updatedAt" : "2018-06-25T09:49:01Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "68a13b66-aa2a-489d-bdfd-670de90d357b",
        "parentId" : "e2784420-3b3d-495c-9034-61c87b0f2333",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Yeah, it seems like an oversight that such constants only exist for some of the values. But it's OK to leave as is for now.",
        "createdAt" : "2018-06-25T10:38:59Z",
        "updatedAt" : "2018-06-25T10:38:59Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e73ecf03382fa0776d8a6ed970d3db64385d5114",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +1352,1356 @@    private var _retries = 0\n    private var _acks = -1\n    private var _requestTimeoutMs = 30000L\n\n    def maxRetries(retries: Int): ProducerBuilder = { _retries = retries; this }"
  },
  {
    "id" : "bd4f0a2a-a878-4425-acb6-82393ffef6a3",
    "prId" : 5425,
    "prUrl" : "https://github.com/apache/kafka/pull/5425#pullrequestreview-141164151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04072841-52fa-4dfd-aea2-0db87a8044ff",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Do we just want to remove this?",
        "createdAt" : "2018-07-27T14:07:28Z",
        "updatedAt" : "2018-08-01T00:34:42Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "9e9adc70-a472-48c6-9386-a0deece9c83b",
        "parentId" : "04072841-52fa-4dfd-aea2-0db87a8044ff",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "It is being overridden in some cases.",
        "createdAt" : "2018-07-27T15:37:17Z",
        "updatedAt" : "2018-08-01T00:34:42Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "eae84c1396d2828a0a2a4aa9fb571d5f7d39a652",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +1368,1372 @@\n  private case class ProducerBuilder() extends ClientBuilder[KafkaProducer[String, String]] {\n    private var _retries = Int.MaxValue\n    private var _acks = -1\n    private var _requestTimeoutMs = 30000"
  },
  {
    "id" : "c05d3e9b-6964-48a7-b16f-2b70c5e791d7",
    "prId" : 6247,
    "prUrl" : "https://github.com/apache/kafka/pull/6247#pullrequestreview-202812843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01db9c64-ad13-4ec7-ac8c-ba024e8c6d88",
        "parentId" : null,
        "authorId" : "915b2f67-05e6-4824-939a-398e7be58870",
        "body" : "@rajinisivaram i have updated few Dynamic Reconfig test cases to use incremental alter config API. Please take a look when you get a chance. Let me know, if we need to add/update any specific test cases.",
        "createdAt" : "2019-02-12T17:45:41Z",
        "updatedAt" : "2019-04-13T16:04:28Z",
        "lastEditedBy" : "915b2f67-05e6-4824-939a-398e7be58870",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf81f6c6e266fe058527609c60fb163035b70509",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +331,335 @@      Paths.get(sslProperties1.getProperty(SSL_TRUSTSTORE_LOCATION_CONFIG)),\n      StandardCopyOption.REPLACE_EXISTING)\n    TestUtils.incrementalAlterConfigs(servers, adminClients.head, oldTruststoreProps, perBrokerConfig = true).all.get()\n    verifySslProduceConsume(sslProperties1, \"alter-truststore-4\")\n    verifySslProduceConsume(sslProperties2, \"alter-truststore-5\")"
  }
]