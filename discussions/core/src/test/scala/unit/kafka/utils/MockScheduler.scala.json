[
  {
    "id" : "4977ddde-200e-4fd5-b1a8-f3ef33ebff5d",
    "prId" : 6847,
    "prUrl" : "https://github.com/apache/kafka/pull/6847#pullrequestreview-249981142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2d04ffb-c6ac-47d2-8015-0b4cf8f1146c",
        "parentId" : null,
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "If we aren't going to implement the Future stuff, we should just return null for the future, so that tests relying on this behavior break quickly rather than getting weird behavior.  Alternately, it might not be that hard to properly implement it.",
        "createdAt" : "2019-06-04T22:05:27Z",
        "updatedAt" : "2019-06-17T16:34:23Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "4b3f9c2b-fe2f-4561-af87-3c5f7809eaea",
        "parentId" : "e2d04ffb-c6ac-47d2-8015-0b4cf8f1146c",
        "authorId" : "a31dcef8-b459-4b48-bb49-44e910fa9f34",
        "body" : "I tried to return null, but unfortunately it broke tests which is why I half-implemented it here. ",
        "createdAt" : "2019-06-04T22:11:19Z",
        "updatedAt" : "2019-06-17T16:34:23Z",
        "lastEditedBy" : "a31dcef8-b459-4b48-bb49-44e910fa9f34",
        "tags" : [
        ]
      },
      {
        "id" : "836b88af-a9e4-4e9d-b2cd-885341852305",
        "parentId" : "e2d04ffb-c6ac-47d2-8015-0b4cf8f1146c",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "How did the tests break?",
        "createdAt" : "2019-06-05T18:02:44Z",
        "updatedAt" : "2019-06-17T16:34:23Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "7596571d-eedf-450c-a37c-c4f3e5d8793c",
        "parentId" : "e2d04ffb-c6ac-47d2-8015-0b4cf8f1146c",
        "authorId" : "a31dcef8-b459-4b48-bb49-44e910fa9f34",
        "body" : "Any test that uses a MockTask that closes will try to call cancel on the task. This results in trying to call cancel on a null object.",
        "createdAt" : "2019-06-05T18:05:15Z",
        "updatedAt" : "2019-06-17T16:34:23Z",
        "lastEditedBy" : "a31dcef8-b459-4b48-bb49-44e910fa9f34",
        "tags" : [
        ]
      },
      {
        "id" : "2d0895a2-bcb4-48c3-9f12-464c4f1056a8",
        "parentId" : "e2d04ffb-c6ac-47d2-8015-0b4cf8f1146c",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "After looking at it more, I agree that returning null wouldn't work here.  However, I think returning a useless future that always appears to be successful isn't good.  Why not change the return type to Future rather than ScheduledFuture?  Then the mock classes can return a CompletableFuture which we can complete whenever we need to.",
        "createdAt" : "2019-06-07T22:40:10Z",
        "updatedAt" : "2019-06-17T16:34:23Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "06377f71-341b-4409-a76c-1e17744d128e",
        "parentId" : "e2d04ffb-c6ac-47d2-8015-0b4cf8f1146c",
        "authorId" : "a31dcef8-b459-4b48-bb49-44e910fa9f34",
        "body" : "Done.",
        "createdAt" : "2019-06-08T00:02:23Z",
        "updatedAt" : "2019-06-17T16:34:23Z",
        "lastEditedBy" : "a31dcef8-b459-4b48-bb49-44e910fa9f34",
        "tags" : [
        ]
      },
      {
        "id" : "f37565bf-0366-4028-be88-aa601fe5a333",
        "parentId" : "e2d04ffb-c6ac-47d2-8015-0b4cf8f1146c",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "To be clear, I don't think `MockTask` should inherit from `CompletableFuture`.  I was just suggesting that we could return a separate future object which could then do what we expected.  I think the minimum here would be cancelling the task when `future.cancel()` was called, blocking util the task was done when `future.get()` was called, etc.\r\n\r\nIf that seems too hard, we can do it in a follow on change.  If you want to get this in now, you can just go back to returning a fake future that's always completed, and we can tackle the rest in a follow-on change.",
        "createdAt" : "2019-06-14T01:03:04Z",
        "updatedAt" : "2019-06-17T16:34:23Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "39459405-166e-40e0-a530-0131797c558d",
        "parentId" : "e2d04ffb-c6ac-47d2-8015-0b4cf8f1146c",
        "authorId" : "a31dcef8-b459-4b48-bb49-44e910fa9f34",
        "body" : "I'm a bit confused by what you mean by a separate future object that can cancel the task when future.cancel() is called.  Currently, MockScheduler creates MockTasks. Are you saying that in the schedule method, a MockTask should be created and added to the queue and then a separate future should be created that is linked to the MockTask in some way that allows it to remove the task from the queue when future.cancel() is called, etc?\r\n\r\n I didn't implement this functionality because MockTasks are used mostly for testing purposes, and currently there is no test to see if a MockTask can be cancelled. Perhaps we want to do that in the future, but that seems like a lot of extra work for something that is not used currently.",
        "createdAt" : "2019-06-14T15:46:47Z",
        "updatedAt" : "2019-06-17T16:34:23Z",
        "lastEditedBy" : "a31dcef8-b459-4b48-bb49-44e910fa9f34",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a0be6532fabbe65ac4204596bfc5d353eb78b34",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +100,104 @@      1\n  }\n\n  /**\n    * Not used, so not not fully implemented"
  }
]