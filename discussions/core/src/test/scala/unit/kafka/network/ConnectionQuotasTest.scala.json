[
  {
    "id" : "c453af21-24f6-4274-8393-ff2254c52f16",
    "prId" : 8650,
    "prUrl" : "https://github.com/apache/kafka/pull/8650#pullrequestreview-411269409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "addd12c3-4fd9-458b-ab0b-3eac57fefb92",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "you may want to assert here.",
        "createdAt" : "2020-05-12T08:51:34Z",
        "updatedAt" : "2020-05-20T20:14:30Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "8c77f839-a48e-4d92-b26e-561dc2a374d7",
        "parentId" : "addd12c3-4fd9-458b-ab0b-3eac57fefb92",
        "authorId" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "body" : "see my comment that intercept does assert on both wrong exception or no exception, similar to assertThrown",
        "createdAt" : "2020-05-13T20:20:20Z",
        "updatedAt" : "2020-05-20T20:14:30Z",
        "lastEditedBy" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2e473fa7eb203c04b56a0d9dc549cf78ed3cdc",
    "line" : 297,
    "diffHunk" : "@@ -1,1 +295,299 @@      }\n      overLimitFutures.foreach { future =>\n        intercept[TimeoutException](future.get(1, TimeUnit.SECONDS))\n      }\n      listeners.values.foreach { listener =>"
  },
  {
    "id" : "08c5d8b9-e439-43e3-b846-63c779bcabbf",
    "prId" : 8768,
    "prUrl" : "https://github.com/apache/kafka/pull/8768#pullrequestreview-448748648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dae422c-dd5c-499c-b180-9d6591011bb0",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "I wonder if we could just check that the metric's config is correctly re-configured instead of testing the number of connections accepted. The goal of the test is not really to verify that the quota works but rather to ensure that metric is correctly re-configured. Have you considered this? The same would apply to `testMaxBrokerConnectionRateReconfiguration`.",
        "createdAt" : "2020-06-15T12:18:08Z",
        "updatedAt" : "2020-08-17T03:38:12Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "c2eb8a90-433c-428e-a8bd-af6e5245f7b1",
        "parentId" : "5dae422c-dd5c-499c-b180-9d6591011bb0",
        "authorId" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "body" : "I still think it's important to test all the way that it does throttle to the correct value. We had a bug pretty recently, KAFKA-9658, where adding and then removing bandwidth quotas via a dynamic config changed the config and even changed some data structs, but not all data structs to actually change the throttling behavior. So, I feel more confident keeping the test up to checking the throttle. ",
        "createdAt" : "2020-07-11T00:29:23Z",
        "updatedAt" : "2020-08-17T03:38:12Z",
        "lastEditedBy" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "tags" : [
        ]
      },
      {
        "id" : "1169dd0c-1641-41e0-b15c-f403c173c394",
        "parentId" : "5dae422c-dd5c-499c-b180-9d6591011bb0",
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "Fair enough.",
        "createdAt" : "2020-07-15T08:48:57Z",
        "updatedAt" : "2020-08-17T03:38:12Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      }
    ],
    "commit" : "508a754f397b5a1939c44dfcba72ba996bc912c5",
    "line" : 565,
    "diffHunk" : "@@ -1,1 +425,429 @@\n  @Test\n  def testMaxListenerConnectionRateReconfiguration(): Unit = {\n    val config = KafkaConfig.fromProps(brokerPropsWithDefaultConnectionLimits)\n    connectionQuotas = new ConnectionQuotas(config, Time.SYSTEM, metrics)"
  },
  {
    "id" : "e83dfe3b-ffe5-4f2d-9ad8-a7148a089e0a",
    "prId" : 8768,
    "prUrl" : "https://github.com/apache/kafka/pull/8768#pullrequestreview-447642818",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70a30517-9b82-4cf8-ae69-f8f818f40c53",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "nit: We could perhaps create a small help method like `brokerProps` that accepts a Map of customer configuration pairs and returns a `KafkaConfig`. That would reduce the boilerplate code.",
        "createdAt" : "2020-06-15T12:28:59Z",
        "updatedAt" : "2020-08-17T03:38:12Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "463fb7e4-e0b4-4fdf-b029-fa5048ae740e",
        "parentId" : "70a30517-9b82-4cf8-ae69-f8f818f40c53",
        "authorId" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "body" : "the test code has just one extra prop in addition to `brokerPropsWithDefaultConnectionLimits` -- somehow it is easier to read the current way. I will keep it.",
        "createdAt" : "2020-07-13T22:04:57Z",
        "updatedAt" : "2020-08-17T03:38:12Z",
        "lastEditedBy" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "tags" : [
        ]
      }
    ],
    "commit" : "508a754f397b5a1939c44dfcba72ba996bc912c5",
    "line" : 473,
    "diffHunk" : "@@ -1,1 +333,337 @@    val props = brokerPropsWithDefaultConnectionLimits\n    props.put(KafkaConfig.MaxConnectionCreationRateProp, brokerRateLimit.toString)\n    val config = KafkaConfig.fromProps(props)\n    connectionQuotas = new ConnectionQuotas(config, Time.SYSTEM, metrics)\n"
  },
  {
    "id" : "e66ef95e-eb98-41b8-8e13-a7f5a1a89292",
    "prId" : 8768,
    "prUrl" : "https://github.com/apache/kafka/pull/8768#pullrequestreview-464574512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "295cd8a4-dea9-4812-a332-5589cedacef5",
        "parentId" : null,
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "Is this required for all tests or only the new connection rate tests?",
        "createdAt" : "2020-07-20T11:45:46Z",
        "updatedAt" : "2020-08-17T03:38:12Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "a077909b-49a0-42a0-be6f-9ffdc55976cb",
        "parentId" : "295cd8a4-dea9-4812-a332-5589cedacef5",
        "authorId" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "body" : "This is required for all tests. For tests that are not supposed to trigger throttling due to connection rate quota, we want this because if the code incorrectly throttles to limit rate (calls wait() with timeout), the existing tests may start failing in a way that is hard to debug (timeout too early or too late, not in a place we expect). ",
        "createdAt" : "2020-08-10T20:44:42Z",
        "updatedAt" : "2020-08-17T03:38:12Z",
        "lastEditedBy" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "tags" : [
        ]
      }
    ],
    "commit" : "508a754f397b5a1939c44dfcba72ba996bc912c5",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +84,88 @@    // use system time, because ConnectionQuota causes the current thread to wait with timeout, which waits based on\n    // system time; so using mock time will likely result in test flakiness due to a mixed use of mock and system time\n    metrics = new Metrics(new MetricConfig(), Collections.emptyList(), Time.SYSTEM)\n    executor = Executors.newFixedThreadPool(listeners.size)\n  }"
  },
  {
    "id" : "b9e0c5dd-bb17-4ad9-a513-eb508663a176",
    "prId" : 9386,
    "prUrl" : "https://github.com/apache/kafka/pull/9386#pullrequestreview-505260377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f4911eb-78b6-4286-8d05-36ca115f4c97",
        "parentId" : null,
        "authorId" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "body" : "It would be useful to add a test where we have both per-listener and per IP limit, and verify that it throttles based on which limit is reached first. Something like: 2 IPs, each per IP limit < per-listener limit, but sum of per IP limits > listener limit. So, if you reach limit on one IP, the broker would not throttle the second IP until it reaches per listener limit. Does not have to be exactly this, just need to verify how per IP throttling interacts with per listener throttling. ",
        "createdAt" : "2020-10-09T00:20:40Z",
        "updatedAt" : "2020-11-19T01:19:49Z",
        "lastEditedBy" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "tags" : [
        ]
      }
    ],
    "commit" : "156149090a3ff4bd6394dbc8432d2747e518d1d8",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +422,426 @@  }\n\n  @Test\n  def testIpConnectionRateWhenActualRateBelowLimit(): Unit = {\n    val ipConnectionRateLimit = 30"
  },
  {
    "id" : "0a102a4a-99e7-449c-8ebd-6e648f94d8c3",
    "prId" : 9386,
    "prUrl" : "https://github.com/apache/kafka/pull/9386#pullrequestreview-515599044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cdf4648-9188-41af-8a66-6a7195377676",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "It would be good to add few basic unit tests to verify the basics. Stuff like verifying that the quota is updated in-memory, verifying that the metrics are updated correctly (got caught by this recently), etc.",
        "createdAt" : "2020-10-23T14:21:03Z",
        "updatedAt" : "2020-11-19T01:19:49Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      }
    ],
    "commit" : "156149090a3ff4bd6394dbc8432d2747e518d1d8",
    "line" : 271,
    "diffHunk" : "@@ -1,1 +509,513 @@    assertTrue(\"Expect at most one IP to get throttled\", throttledIps.size < 2)\n  }\n\n  @Test\n  def testRejectedIpConnectionUnrecordedFromConnectionRateQuotas(): Unit = {"
  },
  {
    "id" : "69c95fcb-156d-46d0-8877-acdfeb60acec",
    "prId" : 9386,
    "prUrl" : "https://github.com/apache/kafka/pull/9386#pullrequestreview-528154202",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f24cff05-e1d4-4504-b9d7-6fd2642fdc8c",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "Could we verify here that the `externalListener` still has the correct quota?",
        "createdAt" : "2020-11-11T15:04:07Z",
        "updatedAt" : "2020-11-19T01:19:49Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      }
    ],
    "commit" : "156149090a3ff4bd6394dbc8432d2747e518d1d8",
    "line" : 365,
    "diffHunk" : "@@ -1,1 +641,645 @@    // remove default connection rate quota\n    connectionQuotas.updateIpConnectionRateQuota(None, None)\n    verifyIpConnectionQuota(adminListener.defaultIp, DynamicConfig.Ip.DefaultConnectionCreationRate)\n    verifyIpConnectionQuota(externalListener.defaultIp, overrideIpRate)\n"
  },
  {
    "id" : "62d05dfc-69b7-4bab-bc4b-edd41f0368fc",
    "prId" : 9386,
    "prUrl" : "https://github.com/apache/kafka/pull/9386#pullrequestreview-534007997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "559a28ac-a02e-43fe-b606-ddacf7a932c9",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "When we hit this line, should we just stopped trying more connections? `ipThrottled` will remain true regardless.",
        "createdAt" : "2020-11-11T16:06:55Z",
        "updatedAt" : "2020-11-19T01:19:49Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "73062ccc-247d-46fd-8377-8c0f57b22bb5",
        "parentId" : "559a28ac-a02e-43fe-b606-ddacf7a932c9",
        "authorId" : "e400c702-fb4f-4635-8164-bc79063a89a7",
        "body" : "I took a closer look at some of the IP throttling tests, and I think they are a little too coarse-grained with respect to testing the quota rate being enforced. I updated the IP throttling rate above/below tests that don't expect to block to use `acceptConnectionsAndVerifyRate` with `MockTime` to verify that the expected quota rate holds while getting throttled.\r\n\r\nIt's a little messy, because a lot of the other tests for broker/listener quotas have to use `Time.SYSTEM` due to monitor waiting. I think it should also be possible to rewrite the broker/listener connection rate quota tests to use mock time by extending the `Time` interface, but I would prefer to do that in a follow-up PR.",
        "createdAt" : "2020-11-15T03:10:56Z",
        "updatedAt" : "2020-11-19T01:19:49Z",
        "lastEditedBy" : "e400c702-fb4f-4635-8164-bc79063a89a7",
        "tags" : [
        ]
      },
      {
        "id" : "bd0d9ac7-cbd9-477b-8ca8-8741769644ed",
        "parentId" : "559a28ac-a02e-43fe-b606-ddacf7a932c9",
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "Sounds good. Let's try to clean this up in the follow-up PR.",
        "createdAt" : "2020-11-18T09:57:38Z",
        "updatedAt" : "2020-11-19T01:19:49Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "1e4b01eb-2134-45d5-a5df-bd06a1a5d45b",
        "parentId" : "559a28ac-a02e-43fe-b606-ddacf7a932c9",
        "authorId" : "e400c702-fb4f-4635-8164-bc79063a89a7",
        "body" : "Thanks. I filed https://issues.apache.org/jira/browse/KAFKA-10744 for the clean up/conversion.",
        "createdAt" : "2020-11-19T01:17:34Z",
        "updatedAt" : "2020-11-19T01:19:49Z",
        "lastEditedBy" : "e400c702-fb4f-4635-8164-bc79063a89a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "156149090a3ff4bd6394dbc8432d2747e518d1d8",
    "line" : 549,
    "diffHunk" : "@@ -1,1 +895,899 @@          if (!expectIpThrottle)\n            throw e\n          ipThrottled = true\n      }\n      val sleepMs = math.max(nextSendTime - time.milliseconds, 0)"
  },
  {
    "id" : "20e11439-1066-4158-b184-f633447b91a3",
    "prId" : 10319,
    "prUrl" : "https://github.com/apache/kafka/pull/10319#pullrequestreview-612936288",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7e83581-664d-4052-b556-225c98908e13",
        "parentId" : null,
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "line#809 and line#761 have similar issue. Could you fix them in this PR?",
        "createdAt" : "2021-03-16T07:54:39Z",
        "updatedAt" : "2021-03-16T14:13:18Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      }
    ],
    "commit" : "1630a8f2d70040150e6c209b87dbfbf80c7ca77d",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +784,788 @@\n  private def verifyNoBlockedPercentRecordedOnAllListeners(): Unit = {\n    blockedPercentMeters.forKeyValue { (name, meter) =>\n      assertEquals(0, meter.count(),\n        s\"BlockedPercentMeter metric for $name listener\")"
  }
]