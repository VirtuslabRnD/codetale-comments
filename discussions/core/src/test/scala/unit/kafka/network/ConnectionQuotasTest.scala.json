[
  {
    "id" : "c453af21-24f6-4274-8393-ff2254c52f16",
    "prId" : 8650,
    "prUrl" : "https://github.com/apache/kafka/pull/8650#pullrequestreview-411269409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "addd12c3-4fd9-458b-ab0b-3eac57fefb92",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "you may want to assert here.",
        "createdAt" : "2020-05-12T08:51:34Z",
        "updatedAt" : "2020-05-20T20:14:30Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "8c77f839-a48e-4d92-b26e-561dc2a374d7",
        "parentId" : "addd12c3-4fd9-458b-ab0b-3eac57fefb92",
        "authorId" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "body" : "see my comment that intercept does assert on both wrong exception or no exception, similar to assertThrown",
        "createdAt" : "2020-05-13T20:20:20Z",
        "updatedAt" : "2020-05-20T20:14:30Z",
        "lastEditedBy" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2e473fa7eb203c04b56a0d9dc549cf78ed3cdc",
    "line" : 297,
    "diffHunk" : "@@ -1,1 +295,299 @@      }\n      overLimitFutures.foreach { future =>\n        intercept[TimeoutException](future.get(1, TimeUnit.SECONDS))\n      }\n      listeners.values.foreach { listener =>"
  },
  {
    "id" : "08c5d8b9-e439-43e3-b846-63c779bcabbf",
    "prId" : 8768,
    "prUrl" : "https://github.com/apache/kafka/pull/8768#pullrequestreview-448748648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dae422c-dd5c-499c-b180-9d6591011bb0",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "I wonder if we could just check that the metric's config is correctly re-configured instead of testing the number of connections accepted. The goal of the test is not really to verify that the quota works but rather to ensure that metric is correctly re-configured. Have you considered this? The same would apply to `testMaxBrokerConnectionRateReconfiguration`.",
        "createdAt" : "2020-06-15T12:18:08Z",
        "updatedAt" : "2020-08-17T03:38:12Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "c2eb8a90-433c-428e-a8bd-af6e5245f7b1",
        "parentId" : "5dae422c-dd5c-499c-b180-9d6591011bb0",
        "authorId" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "body" : "I still think it's important to test all the way that it does throttle to the correct value. We had a bug pretty recently, KAFKA-9658, where adding and then removing bandwidth quotas via a dynamic config changed the config and even changed some data structs, but not all data structs to actually change the throttling behavior. So, I feel more confident keeping the test up to checking the throttle. ",
        "createdAt" : "2020-07-11T00:29:23Z",
        "updatedAt" : "2020-08-17T03:38:12Z",
        "lastEditedBy" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "tags" : [
        ]
      },
      {
        "id" : "1169dd0c-1641-41e0-b15c-f403c173c394",
        "parentId" : "5dae422c-dd5c-499c-b180-9d6591011bb0",
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "Fair enough.",
        "createdAt" : "2020-07-15T08:48:57Z",
        "updatedAt" : "2020-08-17T03:38:12Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      }
    ],
    "commit" : "508a754f397b5a1939c44dfcba72ba996bc912c5",
    "line" : 565,
    "diffHunk" : "@@ -1,1 +425,429 @@\n  @Test\n  def testMaxListenerConnectionRateReconfiguration(): Unit = {\n    val config = KafkaConfig.fromProps(brokerPropsWithDefaultConnectionLimits)\n    connectionQuotas = new ConnectionQuotas(config, Time.SYSTEM, metrics)"
  },
  {
    "id" : "e83dfe3b-ffe5-4f2d-9ad8-a7148a089e0a",
    "prId" : 8768,
    "prUrl" : "https://github.com/apache/kafka/pull/8768#pullrequestreview-447642818",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70a30517-9b82-4cf8-ae69-f8f818f40c53",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "nit: We could perhaps create a small help method like `brokerProps` that accepts a Map of customer configuration pairs and returns a `KafkaConfig`. That would reduce the boilerplate code.",
        "createdAt" : "2020-06-15T12:28:59Z",
        "updatedAt" : "2020-08-17T03:38:12Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "463fb7e4-e0b4-4fdf-b029-fa5048ae740e",
        "parentId" : "70a30517-9b82-4cf8-ae69-f8f818f40c53",
        "authorId" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "body" : "the test code has just one extra prop in addition to `brokerPropsWithDefaultConnectionLimits` -- somehow it is easier to read the current way. I will keep it.",
        "createdAt" : "2020-07-13T22:04:57Z",
        "updatedAt" : "2020-08-17T03:38:12Z",
        "lastEditedBy" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "tags" : [
        ]
      }
    ],
    "commit" : "508a754f397b5a1939c44dfcba72ba996bc912c5",
    "line" : 473,
    "diffHunk" : "@@ -1,1 +333,337 @@    val props = brokerPropsWithDefaultConnectionLimits\n    props.put(KafkaConfig.MaxConnectionCreationRateProp, brokerRateLimit.toString)\n    val config = KafkaConfig.fromProps(props)\n    connectionQuotas = new ConnectionQuotas(config, Time.SYSTEM, metrics)\n"
  },
  {
    "id" : "e66ef95e-eb98-41b8-8e13-a7f5a1a89292",
    "prId" : 8768,
    "prUrl" : "https://github.com/apache/kafka/pull/8768#pullrequestreview-464574512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "295cd8a4-dea9-4812-a332-5589cedacef5",
        "parentId" : null,
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "Is this required for all tests or only the new connection rate tests?",
        "createdAt" : "2020-07-20T11:45:46Z",
        "updatedAt" : "2020-08-17T03:38:12Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "a077909b-49a0-42a0-be6f-9ffdc55976cb",
        "parentId" : "295cd8a4-dea9-4812-a332-5589cedacef5",
        "authorId" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "body" : "This is required for all tests. For tests that are not supposed to trigger throttling due to connection rate quota, we want this because if the code incorrectly throttles to limit rate (calls wait() with timeout), the existing tests may start failing in a way that is hard to debug (timeout too early or too late, not in a place we expect). ",
        "createdAt" : "2020-08-10T20:44:42Z",
        "updatedAt" : "2020-08-17T03:38:12Z",
        "lastEditedBy" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "tags" : [
        ]
      }
    ],
    "commit" : "508a754f397b5a1939c44dfcba72ba996bc912c5",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +84,88 @@    // use system time, because ConnectionQuota causes the current thread to wait with timeout, which waits based on\n    // system time; so using mock time will likely result in test flakiness due to a mixed use of mock and system time\n    metrics = new Metrics(new MetricConfig(), Collections.emptyList(), Time.SYSTEM)\n    executor = Executors.newFixedThreadPool(listeners.size)\n  }"
  }
]