[
  {
    "id" : "dbd7d8bd-51d3-407b-9b11-6d913ca69250",
    "prId" : 6785,
    "prUrl" : "https://github.com/apache/kafka/pull/6785#pullrequestreview-253152651",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0fceb0b-c8c7-4921-a2c9-0ccc495e9ede",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I missed this before, but this is not used.",
        "createdAt" : "2019-06-22T06:24:50Z",
        "updatedAt" : "2019-06-22T06:24:50Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "b8eef18e-36e1-4cfe-b4f6-a3637dd3a177",
        "parentId" : "a0fceb0b-c8c7-4921-a2c9-0ccc495e9ede",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Ack.",
        "createdAt" : "2019-06-23T22:38:52Z",
        "updatedAt" : "2019-06-23T22:38:52Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2877059086b62a6a36170174e0d2c924a1a6503",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +1194,1198 @@  }\n\n  private def createDiscontinuousOffsetRecords(magicValue: Byte,\n                                               codec: CompressionType): MemoryRecords = {\n    val buf = ByteBuffer.allocate(512)"
  },
  {
    "id" : "eea7184a-ec82-4212-8662-8f0d64808701",
    "prId" : 7167,
    "prUrl" : "https://github.com/apache/kafka/pull/7167#pullrequestreview-299741331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ce65acb-5a13-4513-859c-48e0c1e891b8",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "We should use `assertThrows`. Currently this test will pass if `validateMessagesAndAssignOffsets` returns successfully.",
        "createdAt" : "2019-10-07T23:25:11Z",
        "updatedAt" : "2019-10-09T03:47:51Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "a0c28a09-5c6e-4e5a-a5a2-84fb987eff08",
        "parentId" : "2ce65acb-5a13-4513-859c-48e0c1e891b8",
        "authorId" : "38aea9c5-d7f1-4e61-920e-b35370a0109c",
        "body" : "I used try - catch in this case because I wanted to test against the exception object if it correctly has `InvalidTimestampException` and `recordErrors`. Will add a `fail` statement below",
        "createdAt" : "2019-10-08T18:16:52Z",
        "updatedAt" : "2019-10-09T03:47:51Z",
        "lastEditedBy" : "38aea9c5-d7f1-4e61-920e-b35370a0109c",
        "tags" : [
        ]
      },
      {
        "id" : "441ef939-b6c2-4435-bed1-d5f2cc9747d6",
        "parentId" : "2ce65acb-5a13-4513-859c-48e0c1e891b8",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "You can use `assertThrows`. It will return the exception which can then be used for assertions.",
        "createdAt" : "2019-10-08T20:45:26Z",
        "updatedAt" : "2019-10-09T03:47:51Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "0054f49f-0634-429e-9840-a92b26312c88",
        "parentId" : "2ce65acb-5a13-4513-859c-48e0c1e891b8",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "As @hachikuji this can still be done with the `assertThrows` call, you just pass in the statement(s) that you want to cover with the expected throw type, should be easier to use too :)",
        "createdAt" : "2019-10-09T21:02:06Z",
        "updatedAt" : "2019-10-09T21:02:11Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "cd916f09-f096-4115-8ebe-6d421543095a",
        "parentId" : "2ce65acb-5a13-4513-859c-48e0c1e891b8",
        "authorId" : "38aea9c5-d7f1-4e61-920e-b35370a0109c",
        "body" : "Actually `assertThrows` only returns a `Succeeded` object if the enclosed statement throws an expected exception. I changed it to use `intercept` to do assertion on the exception objects",
        "createdAt" : "2019-10-09T22:52:57Z",
        "updatedAt" : "2019-10-09T22:52:57Z",
        "lastEditedBy" : "38aea9c5-d7f1-4e61-920e-b35370a0109c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca821c98f7e78ea2dadf8271000d4d084d1be6f5",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +1257,1261 @@      codec = CompressionType.GZIP)\n    val e = intercept[RecordValidationException] {\n      LogValidator.validateMessagesAndAssignOffsets(\n        records,\n        topicPartition,"
  },
  {
    "id" : "50e884a2-eca2-4946-b9dd-b3ff45ef6b9a",
    "prId" : 7167,
    "prUrl" : "https://github.com/apache/kafka/pull/7167#pullrequestreview-299036514",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99b7b37b-63fa-4f75-9759-3fad34641890",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Note we would have caught the original bug if we started from a non-zero offset.",
        "createdAt" : "2019-10-07T23:56:45Z",
        "updatedAt" : "2019-10-09T03:47:51Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "cac7c81d-0a67-4a46-90dd-b48ad6073238",
        "parentId" : "99b7b37b-63fa-4f75-9759-3fad34641890",
        "authorId" : "38aea9c5-d7f1-4e61-920e-b35370a0109c",
        "body" : "ack",
        "createdAt" : "2019-10-08T20:41:51Z",
        "updatedAt" : "2019-10-09T03:47:51Z",
        "lastEditedBy" : "38aea9c5-d7f1-4e61-920e-b35370a0109c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca821c98f7e78ea2dadf8271000d4d084d1be6f5",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +1260,1264 @@        records,\n        topicPartition,\n        offsetCounter = new LongRef(0),\n        time = time,\n        now = System.currentTimeMillis(),"
  }
]