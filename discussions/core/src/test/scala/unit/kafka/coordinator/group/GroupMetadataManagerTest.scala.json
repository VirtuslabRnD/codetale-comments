[
  {
    "id" : "89aafe9f-1383-4588-b5a1-ced079dafb4c",
    "prId" : 4479,
    "prUrl" : "https://github.com/apache/kafka/pull/4479#pullrequestreview-93045278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e146dd5-60f3-4598-80ac-191d19236560",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Following this and prior to adding the group, we should see `groupNotExists` return true?",
        "createdAt" : "2018-01-31T19:00:43Z",
        "updatedAt" : "2018-01-31T19:11:21Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "a5ca4495-bf4c-425c-b27a-d1cc975b82f0",
        "parentId" : "7e146dd5-60f3-4598-80ac-191d19236560",
        "authorId" : "2a5e5a4d-e0e2-4e26-b139-0930dd63f949",
        "body" : "Yes, I'll add that. Thanks!",
        "createdAt" : "2018-01-31T19:07:27Z",
        "updatedAt" : "2018-01-31T19:11:21Z",
        "lastEditedBy" : "2a5e5a4d-e0e2-4e26-b139-0930dd63f949",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca60b651ee8c2c38a6122b0300504aad8d2972b9",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +503,507 @@    assertFalse(groupMetadataManager.groupNotExists(groupId))\n\n    groupMetadataManager.addPartitionOwnership(groupPartitionId)\n    // group is owned but does not exist yet\n    assertTrue(groupMetadataManager.groupNotExists(groupId))"
  },
  {
    "id" : "c6b1d5a6-2821-4e64-8f08-73b172e55990",
    "prId" : 6177,
    "prUrl" : "https://github.com/apache/kafka/pull/6177#pullrequestreview-196650608",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4458a765-6410-48b9-baa0-69e844eb0437",
        "parentId" : null,
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "We don't have `group.getStaticMemberId` in tests anywhere, I think this is a good spot to assert it works as well",
        "createdAt" : "2019-01-24T16:43:27Z",
        "updatedAt" : "2019-04-26T15:12:49Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      },
      {
        "id" : "00be5633-600f-4aaf-81b3-7eb99b84981c",
        "parentId" : "4458a765-6410-48b9-baa0-69e844eb0437",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Make sense",
        "createdAt" : "2019-01-25T18:40:01Z",
        "updatedAt" : "2019-04-26T15:12:49Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "932118542844c01e3caf657e2eee9c16dfd269d7",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +798,802 @@    assertTrue(group.has(staticMemberId))\n    assertTrue(group.has(dynamicMemberId))\n    assertTrue(group.hasStaticMember(groupInstanceId))\n    assertEquals(staticMemberId, group.getStaticMemberId(groupInstanceId))\n  }"
  },
  {
    "id" : "2f2b34c1-d7ea-4819-8a80-3622c85f17f2",
    "prId" : 6177,
    "prUrl" : "https://github.com/apache/kafka/pull/6177#pullrequestreview-229896626",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08ca6240-991c-432b-914d-26925edd16d1",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Do we have unit test coverage on compatibility? I.e. old formatted data can be loaded with new versioned byte code with new fields set to default (null) values?",
        "createdAt" : "2019-04-23T00:31:15Z",
        "updatedAt" : "2019-04-26T15:12:49Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "dccc0264-bcdd-4c8a-be58-36031c0278e9",
        "parentId" : "08ca6240-991c-432b-914d-26925edd16d1",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "@guozhangwang mind giving me an example for compatibility test? I look around and haven't found one good example.",
        "createdAt" : "2019-04-23T18:28:46Z",
        "updatedAt" : "2019-04-26T15:12:49Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "180d7549-2023-43fe-9b3a-91680b2a3cf7",
        "parentId" : "08ca6240-991c-432b-914d-26925edd16d1",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "You can for example take a look at this PR: https://github.com/apache/kafka/pull/6528\r\n\r\nWhen we update the consumer protocol, we added unit test to make sure old versioned code can still deser it, and similarly in this case, we need to change that new versioned code can still deser old versioned data.",
        "createdAt" : "2019-04-24T01:30:40Z",
        "updatedAt" : "2019-04-26T15:12:49Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "9d2ec1ba-f25d-47e3-836d-353fb82eb5b4",
        "parentId" : "08ca6240-991c-432b-914d-26925edd16d1",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Thanks!",
        "createdAt" : "2019-04-24T04:40:56Z",
        "updatedAt" : "2019-04-26T15:12:49Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "932118542844c01e3caf657e2eee9c16dfd269d7",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +777,781 @@\n  @Test\n  def testloadGroupWithStaticMember() {\n    val generation = 27\n    val protocolType = \"consumer\""
  },
  {
    "id" : "e0ffafca-5e53-4187-8b67-a9893aa4a8ed",
    "prId" : 6177,
    "prUrl" : "https://github.com/apache/kafka/pull/6177#pullrequestreview-230895068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fcea48f-2a61-435f-8fb6-01ef72ab2677",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "We should check that `staticMembers` is also empty by default when deserializing from old versions.",
        "createdAt" : "2019-04-25T21:31:03Z",
        "updatedAt" : "2019-04-26T15:12:49Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "932118542844c01e3caf657e2eee9c16dfd269d7",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +817,821 @@      assertEquals(protocolType, deserializedGroupMetadata.protocolType.get)\n      assertEquals(protocol, deserializedGroupMetadata.protocolOrNull)\n      assertEquals(1, deserializedGroupMetadata.allMembers.size)\n      assertTrue(deserializedGroupMetadata.allMembers.contains(memberId))\n      assertTrue(deserializedGroupMetadata.allStaticMembers.isEmpty)"
  },
  {
    "id" : "ca3bdaf4-c122-417d-a95f-35889bed8c6a",
    "prId" : 8767,
    "prUrl" : "https://github.com/apache/kafka/pull/8767#pullrequestreview-421507727",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95758b6f-6bb6-45b4-a3dd-eeb29dba3567",
        "parentId" : null,
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "create another GroupMetadataManager to override the methods we want to verify",
        "createdAt" : "2020-05-31T16:09:41Z",
        "updatedAt" : "2020-05-31T16:33:58Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ece74d094cb186bff1316062c0199c56461dc5e",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +108,112 @@    var expiredOffsets: Int = 0\n    var infoCount = 0\n    val gmm = new GroupMetadataManager(0, ApiVersion.latestVersion, offsetConfig, replicaManager, mockKafkaZkClient, time, metrics) {\n      override def cleanupGroupMetadata(groups: Iterable[GroupMetadata],\n                                        selector: GroupMetadata => Map[TopicPartition, OffsetAndMetadata]): Int = expiredOffsets"
  },
  {
    "id" : "1c8368d4-f847-4bba-a554-3bffb3c040af",
    "prId" : 9202,
    "prUrl" : "https://github.com/apache/kafka/pull/9202#pullrequestreview-485705434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ac90ea8-988f-4a01-be0d-3f905b44c949",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Is this test related to the change or a gap you identified? It's fine if it's the latter, just trying to understand.",
        "createdAt" : "2020-09-09T14:28:30Z",
        "updatedAt" : "2020-09-18T01:18:28Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "0f497564-094a-49fe-b782-6e49b6f13f3e",
        "parentId" : "1ac90ea8-988f-4a01-be0d-3f905b44c949",
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "This test doesn't relate to the change. I just like to add missing tests for what I saw. :)",
        "createdAt" : "2020-09-10T08:33:37Z",
        "updatedAt" : "2020-09-18T01:18:28Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      }
    ],
    "commit" : "85b0b7a459a4e6c9fb3c49a976b1c75062b12e3b",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +934,938 @@\n  @Test\n  def testShouldThrowExceptionForUnsupportedGroupMetadataVersion(): Unit = {\n    val generation = 1\n    val protocol = \"range\""
  }
]