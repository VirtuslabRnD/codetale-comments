[
  {
    "id" : "63ac3f4e-9c17-40f3-8b48-39ef3e59361a",
    "prId" : 9032,
    "prUrl" : "https://github.com/apache/kafka/pull/9032#pullrequestreview-464538491",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10faddfe-e496-4603-8ed4-8e27966bf987",
        "parentId" : null,
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "Do we test for empty password?",
        "createdAt" : "2020-08-10T15:27:44Z",
        "updatedAt" : "2020-09-02T17:54:03Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "558774bd-6c6b-4a8b-9ffd-c5b414c1c77c",
        "parentId" : "10faddfe-e496-4603-8ed4-8e27966bf987",
        "authorId" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "body" : "Added a test for it in `UserScramCredentialsCommandTest`.  We can't test for it here because we get a salted password here, and I don't think it is possible for that to be an empty string and allow a successful SASL/SCRAM authentication.",
        "createdAt" : "2020-08-10T22:37:07Z",
        "updatedAt" : "2020-09-02T17:54:03Z",
        "lastEditedBy" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "tags" : [
        ]
      }
    ],
    "commit" : "04a882b1794f90bbe002f460803cda9a2beebccc",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +129,133 @@\n  @Test\n  def testAlterEmptyUser(): Unit = {\n    val deletionEmpty = new AlterUserScramCredentialsRequestData.ScramCredentialDeletion().setName(\"\").setMechanism(ScramMechanism.SCRAM_SHA_256.`type`)\n    val upsertionEmpty = new AlterUserScramCredentialsRequestData.ScramCredentialUpsertion().setName(\"\").setMechanism(ScramMechanism.SCRAM_SHA_256.`type`)"
  },
  {
    "id" : "90a6495e-c97f-4228-9b6e-7fca50aaea16",
    "prId" : 9855,
    "prUrl" : "https://github.com/apache/kafka/pull/9855#pullrequestreview-570058235",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "584a60fc-1251-44a6-b26c-dacb24c193cb",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Is this still used in this file?",
        "createdAt" : "2021-01-17T03:01:28Z",
        "updatedAt" : "2021-01-18T10:53:34Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "9b03a4e7-c2fc-4444-97c0-1402ec0bc5e0",
        "parentId" : "584a60fc-1251-44a6-b26c-dacb24c193cb",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "yep",
        "createdAt" : "2021-01-17T13:37:21Z",
        "updatedAt" : "2021-01-18T10:53:34Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd4919734648d903c9600ef715bde06ae92cff0c",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +320,324 @@  }\n\n  private def checkAllErrorsAlteringCredentials(resultsToCheck: util.List[AlterUserScramCredentialsResult], expectedError: Errors, contextMsg: String) = {\n    assertEquals(0, resultsToCheck.asScala.filterNot(_.errorCode == expectedError.code).size,\n      s\"Expected all '${expectedError.name}' errors when altering credentials $contextMsg\")"
  }
]