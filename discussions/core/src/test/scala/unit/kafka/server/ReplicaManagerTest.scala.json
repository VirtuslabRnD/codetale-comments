[
  {
    "id" : "3527957f-a4ca-4c44-a40e-cf5d594e960f",
    "prId" : 7650,
    "prUrl" : "https://github.com/apache/kafka/pull/7650#pullrequestreview-312604660",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1932315-bff1-4f1f-85bb-79f064e27642",
        "parentId" : null,
        "authorId" : "cb6f8432-d515-4113-87f8-14e555ab8ed1",
        "body" : "Wouldn't `.get` throw exception in this case instead of returning null/None?",
        "createdAt" : "2019-11-06T11:19:17Z",
        "updatedAt" : "2019-11-06T11:38:27Z",
        "lastEditedBy" : "cb6f8432-d515-4113-87f8-14e555ab8ed1",
        "tags" : [
        ]
      },
      {
        "id" : "a124264a-d2ce-426b-84a2-ffb441447e23",
        "parentId" : "f1932315-bff1-4f1f-85bb-79f064e27642",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "It's an atomic reference, so it would return null.",
        "createdAt" : "2019-11-06T17:15:42Z",
        "updatedAt" : "2019-11-06T17:15:42Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "acff32b11b43a0139b32df7c6bf26e477ed7eb7c",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +944,948 @@      Optional.of(0))\n    var fetchResult = sendConsumerFetch(replicaManager, tp0, partitionData, Some(clientMetadata))\n    assertNotNull(fetchResult.get)\n    assertEquals(fetchResult.get.error, Errors.NONE)\n"
  },
  {
    "id" : "1122b68a-0f15-4c5b-8fdc-58e374df0796",
    "prId" : 7701,
    "prUrl" : "https://github.com/apache/kafka/pull/7701#pullrequestreview-318321162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d4a3059-4d2b-4635-947d-e7d77cfd0821",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Happy to see `Mockito` being used here. :)",
        "createdAt" : "2019-11-18T13:17:01Z",
        "updatedAt" : "2019-11-18T17:37:32Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e24b05b14f9ba9f80b3aa0a07c9d5133961e6bf",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +1123,1127 @@    assertNull(fetchResult.get)\n\n    Mockito.when(replicaManager.metadataCache.contains(tp0)).thenReturn(true)\n\n    // We have a fetch in purgatory, now receive a stop replica request and"
  },
  {
    "id" : "ee9391f6-3401-48ef-b7e6-7ebfe1d484fc",
    "prId" : 8223,
    "prUrl" : "https://github.com/apache/kafka/pull/8223#pullrequestreview-377427999",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f34ef629-1d21-4be4-bbed-5c500fe97357",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Should this be an assertion? Is the test not deterministic for some reason?",
        "createdAt" : "2020-03-18T19:08:37Z",
        "updatedAt" : "2020-03-19T05:42:15Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "83ea4c17-e4d8-4296-b633-ceb81c87a7b0",
        "parentId" : "f34ef629-1d21-4be4-bbed-5c500fe97357",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "If the thread is done before ReplicaManager#becomeLeaderOrFollower, the faced error does not happen. ",
        "createdAt" : "2020-03-19T05:10:06Z",
        "updatedAt" : "2020-03-19T05:42:15Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      }
    ],
    "commit" : "5134b2ddacb42642b8bbdf91b6df8417be731e4a",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +251,255 @@      // if the thread is done before ReplicaManager#becomeLeaderOrFollower updates epoch,the fenced error does\n      // not happen and failedPartitions is empty.\n      if (replicaManager.replicaAlterLogDirsManager.failedPartitions.size != 0) {\n        replicaManager.replicaAlterLogDirsManager.shutdownIdleFetcherThreads()\n        assertEquals(0, replicaManager.replicaAlterLogDirsManager.fetcherThreadMap.size)"
  },
  {
    "id" : "43f22d47-ae86-4a75-9f24-0dc43a97c348",
    "prId" : 8223,
    "prUrl" : "https://github.com/apache/kafka/pull/8223#pullrequestreview-381394838",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9cc9678-899e-4cca-9a58-f4380ea843e2",
        "parentId" : null,
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "@chia7712 In our IC we are consistently getting a failure in this check. Do you have any suggestion on what is happening and how to fix it?\r\n\r\n\r\nError Message\r\n```\r\norg.scalatest.exceptions.TestFailedException: the partition=test-topic-0 should be removed from pending state\r\n```\r\nStacktrace\r\n```\r\norg.scalatest.exceptions.TestFailedException: the partition=test-topic-0 should be removed from pending state\r\n\tat org.scalatest.Assertions.newAssertionFailedException(Assertions.scala:530)\r\n\tat org.scalatest.Assertions.newAssertionFailedException$(Assertions.scala:529)\r\n\tat org.scalatest.Assertions$.newAssertionFailedException(Assertions.scala:1389)\r\n\tat org.scalatest.Assertions.fail(Assertions.scala:1091)\r\n\tat org.scalatest.Assertions.fail$(Assertions.scala:1087)\r\n\tat org.scalatest.Assertions$.fail(Assertions.scala:1389)\r\n\tat kafka.server.ReplicaManagerTest.testFencedErrorCausedByBecomeLeader(ReplicaManagerTest.scala:248)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)\r\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\r\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\r\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\r\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)\r\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)\r\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)\r\n\tat org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)\r\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)\r\n\tat sun.reflect.GeneratedMethodAccessor112.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)\r\n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)\r\n\tat com.sun.proxy.$Proxy2.processTestClass(Unknown Source)\r\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118)\r\n\tat sun.reflect.GeneratedMethodAccessor111.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\n\tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:182)\r\n\tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:164)\r\n\tat org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:412)\r\n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)\r\n\tat org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```\r\nStandard Output\r\n```\r\n[2020-03-24 17:39:19,377] ERROR [ReplicaAlterLogDirsThread-0]: Error due to (kafka.server.ReplicaAlterLogDirsThread:76)\r\norg.apache.kafka.common.errors.ReplicaNotAvailableException: Future log for partition test-topic-0 is not available on broker 0\r\n[2020-03-24 17:39:38,537] ERROR [ReplicaManager broker=0] Error processing append operation on partition test-topic-0 (kafka.server.ReplicaManager:76)\r\norg.apache.kafka.common.errors.OutOfOrderSequenceException: Out of order sequence number for producerId 234 at offset 3 in partition test-topic-0: 13 (incoming seq. number), 2 (current end sequence number)\r\n```",
        "createdAt" : "2020-03-24T21:23:05Z",
        "updatedAt" : "2020-03-24T21:23:06Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      },
      {
        "id" : "5a151cbb-5f0d-4a5e-84c6-4e4d6de41f11",
        "parentId" : "b9cc9678-899e-4cca-9a58-f4380ea843e2",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "@jsancio Thanks for this report. Let me dig in it :)",
        "createdAt" : "2020-03-24T21:26:25Z",
        "updatedAt" : "2020-03-24T21:26:25Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "d42cdae4-d008-4cf4-8c3c-a5b8b8540f9a",
        "parentId" : "b9cc9678-899e-4cca-9a58-f4380ea843e2",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "seems there is a ticket (https://issues.apache.org/jira/browse/KAFKA-9750) ",
        "createdAt" : "2020-03-24T21:28:46Z",
        "updatedAt" : "2020-03-24T21:28:47Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "22784ca1-c7c5-48da-a856-7148795039f0",
        "parentId" : "b9cc9678-899e-4cca-9a58-f4380ea843e2",
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "Thanks. I update the Jira with the same information above.",
        "createdAt" : "2020-03-25T17:51:26Z",
        "updatedAt" : "2020-03-25T17:51:27Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "5134b2ddacb42642b8bbdf91b6df8417be731e4a",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +247,251 @@      replicaManager.becomeLeaderOrFollower(0, leaderAndIsrRequest(1), (_, _) => ())\n      TestUtils.waitUntilTrue(() => replicaManager.replicaAlterLogDirsManager.fetcherThreadMap.values.forall(_.partitionCount() == 0),\n        s\"the partition=$topicPartition should be removed from pending state\")\n      // the partition is added to failedPartitions if fenced error happens\n      // if the thread is done before ReplicaManager#becomeLeaderOrFollower updates epoch,the fenced error does"
  },
  {
    "id" : "2da2bc72-946a-4c0c-9924-db7980661baa",
    "prId" : 8586,
    "prUrl" : "https://github.com/apache/kafka/pull/8586#pullrequestreview-404297456",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cc8d266-cc84-45e9-bebb-d9feecac821e",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "This would return `3` without the fix?",
        "createdAt" : "2020-05-01T04:47:05Z",
        "updatedAt" : "2020-05-01T20:15:11Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "88bf85d5-04e4-4b52-94da-c95c9ed27b44",
        "parentId" : "2cc8d266-cc84-45e9-bebb-d9feecac821e",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Right.",
        "createdAt" : "2020-05-01T17:43:41Z",
        "updatedAt" : "2020-05-01T20:15:11Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "b86edaf3085419996e437d56fb373aeded8b99a1",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +1063,1067 @@    assertNotNull(purgatoryFetchResult.get)\n    assertEquals(Errors.NONE, purgatoryFetchResult.get.error)\n    assertMetricCount(2)\n  }\n"
  }
]