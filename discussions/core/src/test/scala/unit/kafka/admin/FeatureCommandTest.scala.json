[
  {
    "id" : "384e7f7f-1e62-47b8-926c-df4e37f70536",
    "prId" : 9409,
    "prUrl" : "https://github.com/apache/kafka/pull/9409#pullrequestreview-507680078",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a2d259a-f0e9-415a-905b-92dd0d91f603",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Do we need a downgrade failure test as well?\r\n",
        "createdAt" : "2020-10-12T18:13:44Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "28a94889-dbd4-42a3-837f-337e1f0e08f7",
        "parentId" : "7a2d259a-f0e9-415a-905b-92dd0d91f603",
        "authorId" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "body" : "As such the downgrade can not fail currently on the server. The reason is the following: the `FeatureCommand` downgrades `maxVersionLevel` of existing finalized features to the max versions that it knows internally (since it links with the `BrokerFeatures` library). As a result, the only situation when the `FeatureCommand` can fail is if it tries to downgrade below the supported `minVersion`. But this can never happen since we don't (yet) have the facility on the broker to have a supported `minVersion` > 1 (this can only happen during feature deprecation, the support for this is future work).\r\n\r\nOn a side note, we could maybe write a test using `AdminClientUnitTestEnv` to create a mock setup specifically for the downgrade test and inject a mock admin client into the `FeatureApis` class. But that looks overkill to me...",
        "createdAt" : "2020-10-13T17:37:31Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e568285c314102b9e4f7351badfcdf73a5c5a53",
    "line" : 200,
    "diffHunk" : "@@ -1,1 +198,202 @@   */\n  @Test\n  def testUpgradeFeaturesFailure(): Unit = {\n    val upgradeOpts = new FeatureCommandOptions(Array(\"--bootstrap-server\", brokerList, \"--upgrade-all\"))\n    val featureApis = new FeatureApis(upgradeOpts)"
  }
]