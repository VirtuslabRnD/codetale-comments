[
  {
    "id" : "7a445076-3706-4e70-acae-51b6b38be202",
    "prId" : 8675,
    "prUrl" : "https://github.com/apache/kafka/pull/8675#pullrequestreview-412678983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a27e2570-c3b5-4990-8cef-fb378b323df7",
        "parentId" : null,
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "reorder this test case to put the `verifyAlterBrokerConfig` test suits together. Note: the previous test is also test with `verifyAlterBrokerConfig`",
        "createdAt" : "2020-05-15T14:04:53Z",
        "updatedAt" : "2020-05-16T08:10:29Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      }
    ],
    "commit" : "83cc2328099ef1424c3cea492156bd4a82f3fe65",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +736,740 @@    val node = new Node(1, \"localhost\", 9092)\n    verifyAlterBrokerConfig(node, \"1\", List(\"--entity-name\", \"1\"))\n  }\n\n  def verifyAlterBrokerConfig(node: Node, resourceName: String, resourceOpts: List[String]): Unit = {"
  },
  {
    "id" : "b20f94cc-6344-4e79-a38b-c10aa9ce438c",
    "prId" : 8675,
    "prUrl" : "https://github.com/apache/kafka/pull/8675#pullrequestreview-412679448",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "986e2e5f-26ce-4465-812b-19aa8d8e6bd4",
        "parentId" : null,
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "fix the wrong zk connection info",
        "createdAt" : "2020-05-15T14:05:25Z",
        "updatedAt" : "2020-05-16T08:10:29Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      }
    ],
    "commit" : "83cc2328099ef1424c3cea492156bd4a82f3fe65",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +642,646 @@  @Test\n  def testNoSpecifiedEntityOptionWithDescribeBrokersInZKIsAllowed(): Unit = {\n    val optsList = List(\"--zookeeper\", zkConnect,\n      \"--entity-type\", ConfigType.Broker,\n      \"--describe\""
  },
  {
    "id" : "a1e1df1b-ce8e-4313-b554-ef403de890e0",
    "prId" : 9032,
    "prUrl" : "https://github.com/apache/kafka/pull/9032#pullrequestreview-470123694",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f57bc23-1df3-48c6-9f56-afd44c5daa86",
        "parentId" : null,
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "sorry, this might be a silly question, but how are these constraints different when using --zookeeper?  should we test that as well",
        "createdAt" : "2020-08-18T21:23:20Z",
        "updatedAt" : "2020-09-02T17:54:03Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "654632f8-e4fc-49ca-b066-9b0d4aaf7421",
        "parentId" : "5f57bc23-1df3-48c6-9f56-afd44c5daa86",
        "authorId" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "body" : "@cmccabe Good question, actually.  There is already a check to make sure a non-existent config cannot be **deleted** via `--zookeeper`: `shouldNotUpdateConfigIfNonExistingConfigIsDeletedUsingZookeper()`.  This test passes, of course.\r\n\r\nHowever, there is no check to make sure an unrecognized config can be **added**, and in fact if I add that test it fails; the code will gladly go ahead and add anything we wish (and it will gladly go ahead and delete it if we wish as well -- the above test is only checking that something that doesn't exist can't be deleted).\r\n\r\nThe next question, of course, is whether we should \"fix\" this or not.  What do you think?  To fix it we would need the full set of allowed configs at the User, Client, Topic, and Broker levels and then insert code to check accordingly.  Since the ZooKeeper update path is going away due to KIP-500, I'm wondering if we can just leave it alone?",
        "createdAt" : "2020-08-18T22:32:53Z",
        "updatedAt" : "2020-09-02T17:54:03Z",
        "lastEditedBy" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "tags" : [
        ]
      },
      {
        "id" : "eb8ee470-9029-4b3a-90c2-84196be7d6d4",
        "parentId" : "5f57bc23-1df3-48c6-9f56-afd44c5daa86",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "Yeah, I think we should leave it alone for now, for the reasons you state.  But thanks for the context.",
        "createdAt" : "2020-08-19T04:54:46Z",
        "updatedAt" : "2020-09-02T17:54:03Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "04a882b1794f90bbe002f460803cda9a2beebccc",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +489,493 @@  def shouldNotAlterNonQuotaNonScramUserOrClientConfigUsingBootstrapServer(): Unit = {\n    // when using --bootstrap-server, it should be illegal to alter anything that is not a quota and not a SCRAM credential\n    // for both user and client entities\n    val node = new Node(1, \"localhost\", 9092)\n    val mockAdminClient = new MockAdminClient(util.Collections.singletonList(node), node)"
  }
]