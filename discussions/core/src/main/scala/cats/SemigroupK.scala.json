[
  {
    "id" : "77b71723-a2b3-433b-a039-06f5207be0af",
    "prId" : 751,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7774603-4e2b-479c-ac9d-20d7d856ad2a",
        "parentId" : null,
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "We have [Alternative](https://github.com/non/cats/blob/master/core/src/main/scala/cats/Alternative.scala) which extends both `Applicative` and `MonoidK`. Not that calling it `composedWith` is a particularly elegant solution, but do we run the risk of overloading ambiguities/annoyances with both `compose`s being on the same instance?\n",
        "createdAt" : "2015-12-15T13:02:31Z",
        "updatedAt" : "2015-12-15T13:02:31Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "cb574e88-90a5-4b10-b348-85b95ab8200a",
        "parentId" : "d7774603-4e2b-479c-ac9d-20d7d856ad2a",
        "authorId" : "ca741d6d-c629-4558-85cb-02e76238d728",
        "body" : "I think the right thing to do here is to add a `compose` to `Alternative` which composes a pair of `Alternatives` to an `Alternative`. I can add that to this PR or follow up afterwards.\n",
        "createdAt" : "2015-12-15T13:27:23Z",
        "updatedAt" : "2015-12-15T13:27:23Z",
        "lastEditedBy" : "ca741d6d-c629-4558-85cb-02e76238d728",
        "tags" : [
        ]
      },
      {
        "id" : "a065ae67-cbd8-4eff-a003-86c8e480af3f",
        "parentId" : "d7774603-4e2b-479c-ac9d-20d7d856ad2a",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "That sounds like a good solution to me. It might also mean we want to add something similar to `MonoidK`. I'm okay with that either going into this PR or a follow up one.\n",
        "createdAt" : "2015-12-15T13:43:04Z",
        "updatedAt" : "2015-12-15T13:43:04Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "9938d341b8a306d3e973d7d715225fc81d3b4e38",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +32,36 @@   * Compose two SemigroupK intsances.\n   */\n  def compose[G[_]: SemigroupK]: SemigroupK[λ[α => F[G[α]]]] =\n    new SemigroupK[λ[α => F[G[α]]]] {\n      def combine[A](x: F[G[A]], y: F[G[A]]): F[G[A]] = self.combine(x, y)"
  },
  {
    "id" : "1cb2516d-ea49-4bbe-8888-1d79092687c2",
    "prId" : 751,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7dae358f-c7bf-458d-a399-a4b64c0c0011",
        "parentId" : null,
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "Good catch!\n",
        "createdAt" : "2015-12-15T13:43:24Z",
        "updatedAt" : "2015-12-15T13:43:24Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "9938d341b8a306d3e973d7d715225fc81d3b4e38",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +34,38 @@  def compose[G[_]: SemigroupK]: SemigroupK[λ[α => F[G[α]]]] =\n    new SemigroupK[λ[α => F[G[α]]]] {\n      def combine[A](x: F[G[A]], y: F[G[A]]): F[G[A]] = self.combine(x, y)\n    }\n"
  }
]