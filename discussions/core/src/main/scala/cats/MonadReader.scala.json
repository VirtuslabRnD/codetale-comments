[
  {
    "id" : "7bbd1ecb-0ffc-4eb7-80a2-203468fd7500",
    "prId" : 397,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45f0d8e7-318c-4761-9cc0-13b457894ebe",
        "parentId" : null,
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "Should we make this `def local[A](fa: F[R, A])(f: R => R): F[R, A]` to line up with the definitions for `map`, `flatMap`, `traverse`, etc in other type classes?\n",
        "createdAt" : "2015-07-11T13:28:53Z",
        "updatedAt" : "2015-07-11T13:28:53Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "5ffac9be-2149-4963-9e98-13f446bd2095",
        "parentId" : "45f0d8e7-318c-4761-9cc0-13b457894ebe",
        "authorId" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "body" : "I am OK with either, one thing I just noticed is that the direction may or may not look nicer due to the \"flow\" of the operation. For instance,\n\n``` scala\n[M[_], A]def flatMap[B](ma: M[A])(f: A => M[B]): M[B]\n```\n\nWe run the effects of `ma` first, and then apply `f` to it, and then run the effects of `M[B]`, so the flow is left to right. similarly for `map` and `traverse`.\n\nWith local:\n\n``` scala\n[F[_, _], R]def local[A](f: R => R)(fa: F[R, A]): F[R, A]\n```\n\nWe are first modifying the environment with `f` and then running `fa` against that, as opposed to running `fa` and then modifying the environment after the fact.\n",
        "createdAt" : "2015-07-11T18:02:27Z",
        "updatedAt" : "2015-07-11T18:02:27Z",
        "lastEditedBy" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "tags" : [
        ]
      },
      {
        "id" : "ea614680-8be7-4b28-a71f-625970330090",
        "parentId" : "45f0d8e7-318c-4761-9cc0-13b457894ebe",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "Ah your point about the flow is a good one. I didn't think about that.\n\nOne reason I like about putting the function in the last parameter list is that I often am using a lambda that I format as multiple lines:\n\n``` scala\n(...).local(fra)(r =>\n  doStuffWithR(r))\n```\n\nWhich looks slightly nicer to me than:\n\n``` scala\n(...).local(r =>\n  doStuffWithR(r)\n)(fra)\n```\n\nSo between the convention on other methods, and this formatting, I'd be a bit inclined to have the function in a second parameter list; but it's not a big deal to me. Whichever people prefer.\n",
        "createdAt" : "2015-07-11T18:37:38Z",
        "updatedAt" : "2015-07-11T18:37:38Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "f1531de0-dec6-4d9c-b96d-9819100b6e52",
        "parentId" : "45f0d8e7-318c-4761-9cc0-13b457894ebe",
        "authorId" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "body" : "Fair enough, I often find myself really liking the function standalone in the last parameter list for the exact reason you describe above.\n\nI'll wait for others to chime in with their thoughts, if folks like it as the 2nd/last parameter I'll happily make the change :-)\n",
        "createdAt" : "2015-07-11T20:32:57Z",
        "updatedAt" : "2015-07-11T20:32:57Z",
        "lastEditedBy" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "tags" : [
        ]
      },
      {
        "id" : "c7955445-9543-499f-b00f-20d77507c8c2",
        "parentId" : "45f0d8e7-318c-4761-9cc0-13b457894ebe",
        "authorId" : "64d7f629-ef5c-4472-bf31-18525b62f63d",
        "body" : "do we worry about confusion of the method name local with the Kleisli#local from scalaz (which is contramap)?\n",
        "createdAt" : "2015-07-14T06:49:18Z",
        "updatedAt" : "2015-07-14T06:49:18Z",
        "lastEditedBy" : "64d7f629-ef5c-4472-bf31-18525b62f63d",
        "tags" : [
        ]
      },
      {
        "id" : "83d127d6-65c2-44e8-8268-70534e6fe72e",
        "parentId" : "45f0d8e7-318c-4761-9cc0-13b457894ebe",
        "authorId" : "64d7f629-ef5c-4472-bf31-18525b62f63d",
        "body" : "If I have to choose a side in the arg list ordering, I'd probably prefer Chang's.\n\nPartially applying a function to get back a Kleisli => Kleisli seems more natural to me than partially applying a Kleisli and getting back a (R => R) => Kleisli\n",
        "createdAt" : "2015-07-14T06:51:31Z",
        "updatedAt" : "2015-07-14T06:51:31Z",
        "lastEditedBy" : "64d7f629-ef5c-4472-bf31-18525b62f63d",
        "tags" : [
        ]
      },
      {
        "id" : "f1b0f51b-6173-4635-9f45-83ed0feea9cf",
        "parentId" : "45f0d8e7-318c-4761-9cc0-13b457894ebe",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "Okay, I have no problem with that.\n",
        "createdAt" : "2015-07-14T12:10:43Z",
        "updatedAt" : "2015-07-14T12:10:43Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "3f2ee7ad-a09c-4d06-8def-cbf28f87cb7a",
        "parentId" : "45f0d8e7-318c-4761-9cc0-13b457894ebe",
        "authorId" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "body" : "@stew Yeah I had wondered that we have `Kleisli#local: Kleisli[M, A, B] => (AA => A) => Kleisli[M, AA, B]` (which I find useful in \"expanding\" the config when I use it in a more global scope), but also `MonadReader#local: M[R, A] => (R => R) => M[R, A]`. Perhaps we can rename the `Kleisli#local` to something else? ... `expand` ?\n\n_EDIT_ That being said we can treat `Kleisli#local` as a more general form of `MonadReader#local` - making the `MonadReader` version as general as the `Kleisli` one gets a bit tricky since law checking relies on it being `R => R`, e.g. \n\n``` scala\ndef monadReaderLocalAsk(f: R => R): IsEq[F[R, R]] =\n  F.local(f)(F.ask) <-> F.map(F.ask)(f) // to `map` over the `F.ask` we need `R => ?`\n```\n",
        "createdAt" : "2015-07-14T16:16:30Z",
        "updatedAt" : "2015-07-15T15:54:30Z",
        "lastEditedBy" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "2350bf0666f6c99bb3ae9e6b90f548b588abfeec",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +7,11 @@\n  /** Modify the environment */\n  def local[A](f: R => R)(fa: F[R, A]): F[R, A]\n}\n"
  }
]