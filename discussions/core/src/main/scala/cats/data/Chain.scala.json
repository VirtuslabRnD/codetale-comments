[
  {
    "id" : "510b5b2a-f154-4ba0-9fd0-330298d50d7d",
    "prId" : 3535,
    "prUrl" : "https://github.com/typelevel/cats/pull/3535#pullrequestreview-460323895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2d1b9fe-9732-4608-b6e2-52d89e92cf03",
        "parentId" : null,
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "This is just miscellaneous clean-up, right, since `foreach` isn't used anywhere else?",
        "createdAt" : "2020-08-03T20:24:27Z",
        "updatedAt" : "2020-08-03T20:24:41Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      },
      {
        "id" : "078b752b-81aa-4512-bac4-254fc35be868",
        "parentId" : "a2d1b9fe-9732-4608-b6e2-52d89e92cf03",
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "yes. foreach is used exactly once and is private. Just use foreachUntil (or iterator).",
        "createdAt" : "2020-08-03T20:37:03Z",
        "updatedAt" : "2020-08-03T20:37:03Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      }
    ],
    "commit" : "c07ad37ad9f4259cf664300903a72cf466842a5d",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +501,505 @@    var first = true\n\n    foreachUntil { a =>\n      if (first) {\n        builder ++= AA.show(a); first = false"
  },
  {
    "id" : "9a92a42c-2540-4ea9-bf91-5ebbd5262591",
    "prId" : 2579,
    "prUrl" : "https://github.com/typelevel/cats/pull/2579#pullrequestreview-171378224",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b682c27c-93a5-477e-a02b-56a47b7f3042",
        "parentId" : null,
        "authorId" : "dc9a9512-c1aa-4f95-a2a1-7f1c1984a1d5",
        "body" : "Just a question of curiosity. Why are you using TreeSet instead of pure scala's Set?",
        "createdAt" : "2018-10-23T20:53:40Z",
        "updatedAt" : "2018-10-23T20:57:50Z",
        "lastEditedBy" : "dc9a9512-c1aa-4f95-a2a1-7f1c1984a1d5",
        "tags" : [
        ]
      },
      {
        "id" : "3fb79fec-29f2-4a87-82d2-2b4ea0fd9055",
        "parentId" : "b682c27c-93a5-477e-a02b-56a47b7f3042",
        "authorId" : "d2879c60-b189-4cea-bd94-bc4592155bea",
        "body" : "This was done for symmetry with `NonEmptyList#distinct` but it's a good question. `Set` uses a `HashSet` with sets bigger than 4 elements.  `HashSet#contains` has O(1) and `TreeSet#contains` has O(log(n)).\r\n\r\nChanging `Set` would also remove the artificial dependency on `Order`. Was there a reason for this dependency when `NonEmptyList#distinct` was introduced?",
        "createdAt" : "2018-10-30T20:03:01Z",
        "updatedAt" : "2018-10-30T20:03:01Z",
        "lastEditedBy" : "d2879c60-b189-4cea-bd94-bc4592155bea",
        "tags" : [
        ]
      },
      {
        "id" : "305bc84b-2fa7-4d41-a498-fb2de0631193",
        "parentId" : "b682c27c-93a5-477e-a02b-56a47b7f3042",
        "authorId" : "2b134052-7dd4-4664-8a0b-7200f55535fa",
        "body" : "I wrote up a functional set implementation that should speed up `distinct` in the future and let it depend on `Eq` instead of `Order`. Closed issue here, was suggested to put up a PR on cats-collection instead. https://github.com/typelevel/cats/issues/2593\r\n\r\nEDIT: Seems like this structure exists already in cats-collections, called ISet.",
        "createdAt" : "2018-11-04T20:37:20Z",
        "updatedAt" : "2018-11-04T23:33:03Z",
        "lastEditedBy" : "2b134052-7dd4-4664-8a0b-7200f55535fa",
        "tags" : [
        ]
      }
    ],
    "commit" : "cef2e4df72f9c309a3b760e8cd328061669e41cf",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +368,372 @@    var alreadyIn = TreeSet.empty[AA]\n\n    foldLeft(Chain.empty[AA]) { (elementsSoFar, b) =>\n      if (alreadyIn.contains(b)) {\n        elementsSoFar"
  },
  {
    "id" : "8465a15d-e834-403e-a611-0dbd6842b566",
    "prId" : 2430,
    "prUrl" : "https://github.com/typelevel/cats/pull/2430#pullrequestreview-147786986",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01b9ad0c-04ed-440d-87a1-f90c07f0c08c",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "without the null here we had a match error previously on empty.",
        "createdAt" : "2018-08-20T18:16:14Z",
        "updatedAt" : "2018-08-21T05:53:33Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "831beb04-0ad2-45ed-a929-62db7fa9cde9",
        "parentId" : "01b9ad0c-04ed-440d-87a1-f90c07f0c08c",
        "authorId" : "240add12-1fe5-499a-918c-053b1f46b348",
        "body" : "Huh, I didn't even know you could pattern match on null ðŸ˜¬",
        "createdAt" : "2018-08-20T19:24:08Z",
        "updatedAt" : "2018-08-21T05:53:33Z",
        "lastEditedBy" : "240add12-1fe5-499a-918c-053b1f46b348",
        "tags" : [
        ]
      }
    ],
    "commit" : "27648d726005a8e22b65975f84f9b2f804dd3bd3",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +454,458 @@              currentIterator = seq.iterator\n              currentIterator.next\n            case null | Empty =>\n              throw new java.util.NoSuchElementException(\"next called on empty iterator\")\n          }"
  },
  {
    "id" : "bfa80327-def1-4560-8bd3-40060c3a6c2a",
    "prId" : 2430,
    "prUrl" : "https://github.com/typelevel/cats/pull/2430#pullrequestreview-147762324",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cfbab62d-0ac5-40ad-9446-37938aeb28a4",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "without the null here we had a match error previously on empty.",
        "createdAt" : "2018-08-20T18:16:20Z",
        "updatedAt" : "2018-08-21T05:53:33Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      }
    ],
    "commit" : "27648d726005a8e22b65975f84f9b2f804dd3bd3",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +498,502 @@              currentIterator = seq.reverseIterator\n              currentIterator.next\n            case null | Empty =>\n              throw new java.util.NoSuchElementException(\"next called on empty iterator\")\n          }"
  },
  {
    "id" : "0f1b4fb7-4139-44ce-a77f-4fbf6d50af5a",
    "prId" : 2406,
    "prUrl" : "https://github.com/typelevel/cats/pull/2406#pullrequestreview-146905103",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0988ed38-6733-4e3c-9fde-21442886113c",
        "parentId" : null,
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "just curious, did we actually tried one instance with more than 2 billion items? ",
        "createdAt" : "2018-08-16T15:14:16Z",
        "updatedAt" : "2018-08-16T15:14:16Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "25c855ff-ae90-4ef7-978f-fa576aa5646a",
        "parentId" : "0988ed38-6733-4e3c-9fde-21442886113c",
        "authorId" : "240add12-1fe5-499a-918c-053b1f46b348",
        "body" : "No I don't think so, I just wanted to be consistent with NonEmptyList and NonEmptyVector :)",
        "createdAt" : "2018-08-16T15:41:19Z",
        "updatedAt" : "2018-08-16T15:41:19Z",
        "lastEditedBy" : "240add12-1fe5-499a-918c-053b1f46b348",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5b414c4530d99d91a28a49e5cdf3aa2e4bbb4ea",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +323,327 @@  final def length: Long = {\n    val iter = iterator\n    var i: Long = 0\n    while(iter.hasNext) { i += 1; iter.next; }\n    i"
  },
  {
    "id" : "e37507f3-3592-4c94-87ca-2c434480a1ea",
    "prId" : 2371,
    "prUrl" : "https://github.com/typelevel/cats/pull/2371#pullrequestreview-146504566",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19bc309c-bdca-4bce-98cd-cca1219613f7",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "This branch is not being tested which worries me. Can we think of a way to exercise this part?",
        "createdAt" : "2018-08-15T15:52:20Z",
        "updatedAt" : "2018-08-15T16:09:20Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc66361dd5beee411a76a437f98de66adbb99d83",
    "line" : 301,
    "diffHunk" : "@@ -1,1 +299,303 @@            c = null\n          } else {\n            c = rights.last\n            rights.trimEnd(1)\n          }"
  },
  {
    "id" : "23ac02dc-fe1e-4420-9bd6-4a55a7fca884",
    "prId" : 2371,
    "prUrl" : "https://github.com/typelevel/cats/pull/2371#pullrequestreview-146513913",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b4212fb-de80-4ec3-8fd3-5e9244e086e6",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "Wouldnâ€™t it be better to just do `fromSeq(as)` here?\r\n\r\nI notice currently the second branch of the case match is untested.",
        "createdAt" : "2018-08-15T15:54:56Z",
        "updatedAt" : "2018-08-15T16:09:20Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "ef972757-7c28-466f-b786-fbdd688889c3",
        "parentId" : "7b4212fb-de80-4ec3-8fd3-5e9244e086e6",
        "authorId" : "1b80f00c-b2ed-49b7-8651-8be183b8980a",
        "body" : "`Chain(1, 2, 3, 4)` will exercise the `WrappedArray` case. Now that we have a `Wrap` constructor, it's probably better to replace this specialization with `fromSeq`.",
        "createdAt" : "2018-08-15T16:17:10Z",
        "updatedAt" : "2018-08-15T16:17:10Z",
        "lastEditedBy" : "1b80f00c-b2ed-49b7-8651-8be183b8980a",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc66361dd5beee411a76a437f98de66adbb99d83",
    "line" : 427,
    "diffHunk" : "@@ -1,1 +425,429 @@  /** Creates a Chain from the specified elements. */\n  def apply[A](as: A*): Chain[A] =\n    as match {\n      case w: collection.mutable.WrappedArray[A] =>\n        if (w.isEmpty) nil"
  }
]