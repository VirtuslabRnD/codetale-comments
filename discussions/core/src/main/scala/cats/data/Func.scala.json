[
  {
    "id" : "24e0aaad-2c99-4015-b46c-a77712473ab9",
    "prId" : 388,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3dfade84-a7df-483d-903b-dfea91b42630",
        "parentId" : null,
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "Is this any different than `Kleisli`?\n",
        "createdAt" : "2015-07-06T12:35:16Z",
        "updatedAt" : "2015-08-20T03:13:00Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "0b45d32b-da2a-4d4a-8d93-513c3bbbe305",
        "parentId" : "3dfade84-a7df-483d-903b-dfea91b42630",
        "authorId" : "82d25386-bd7e-4bbe-ad79-33feddfab2fb",
        "body" : "Yes, the semantics of `product` and `compose` formed around `Func` is different from Kliesli composition, which is described in detail in https://www.cs.ox.ac.uk/jeremy.gibbons/publications/iterator.pdf.\n",
        "createdAt" : "2015-07-06T18:40:21Z",
        "updatedAt" : "2015-08-20T03:13:00Z",
        "lastEditedBy" : "82d25386-bd7e-4bbe-ad79-33feddfab2fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed08b9067b4c8580bf1975bbe1ac37321a90e26a",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +7,11 @@ * See: [[https://www.cs.ox.ac.uk/jeremy.gibbons/publications/iterator.pdf The Essence of the Iterator Pattern]]\n */\nsealed abstract class Func[F[_], A, B] { self =>\n  def run: A => F[B]\n  def map[C](f: B => C)(implicit FF: Functor[F]): Func[F, A, C] ="
  }
]