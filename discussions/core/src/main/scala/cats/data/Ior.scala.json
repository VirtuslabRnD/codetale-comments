[
  {
    "id" : "0c336db9-38e4-4c9b-b450-8c595de855c5",
    "prId" : 3554,
    "prUrl" : "https://github.com/typelevel/cats/pull/3554#pullrequestreview-463551933",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22cafff0-2be6-4e5e-9cc6-a89b939aec9c",
        "parentId" : null,
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "I think it might be useful to have a comment with a high-level explanation of the semantics here. I think what you have makes sense as the natural way to do this, but what exactly it's doing isn't necessarily clear at a glance.",
        "createdAt" : "2020-08-07T14:50:14Z",
        "updatedAt" : "2020-08-07T19:30:57Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      },
      {
        "id" : "8c3543ae-7918-4eb5-8c69-deb5d7bdc360",
        "parentId" : "22cafff0-2be6-4e5e-9cc6-a89b939aec9c",
        "authorId" : "0305d3a6-be70-4124-b2db-e5f54937820d",
        "body" : "To be honest, I copied the semantics of `===` above and didn't think too much about it! I guess it's just standard practice for a covariant datatype?",
        "createdAt" : "2020-08-07T15:35:41Z",
        "updatedAt" : "2020-08-07T19:30:57Z",
        "lastEditedBy" : "0305d3a6-be70-4124-b2db-e5f54937820d",
        "tags" : [
        ]
      },
      {
        "id" : "8bf1bf3d-aae1-458e-8bb8-01837bbc4497",
        "parentId" : "22cafff0-2be6-4e5e-9cc6-a89b939aec9c",
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "It's mostly the between-ness of `Both` that I think isn't necessarily obvious. I could imagine both `Left` and `Right` preceding `Both`, for example.",
        "createdAt" : "2020-08-07T15:42:56Z",
        "updatedAt" : "2020-08-07T19:30:57Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      },
      {
        "id" : "4cc6d82f-4dcd-4b8b-bc8b-79f2ad2a3c3e",
        "parentId" : "22cafff0-2be6-4e5e-9cc6-a89b939aec9c",
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "(Sorry, by \"semantics here\" I meant the details of how the comparison happens, not the `AA >: A` part.)",
        "createdAt" : "2020-08-07T15:43:33Z",
        "updatedAt" : "2020-08-07T19:30:57Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      },
      {
        "id" : "89a962f7-d972-4a88-b605-3e7f768c87d5",
        "parentId" : "22cafff0-2be6-4e5e-9cc6-a89b939aec9c",
        "authorId" : "0305d3a6-be70-4124-b2db-e5f54937820d",
        "body" : "Oh sorry!! Yeah I had a look in Haskell and found https://hackage.haskell.org/package/these-1.1.1.1/docs/Data-These.html. It puts `Both` after `Right` so I'm happy to change this. Although I don't know how widely used (and therefore canonical) it is. In my head, I feel like `Both` is kind-of between `Left` and `Right` so the ordering makes sense to me but I'm happy to be persuaded otherwise!",
        "createdAt" : "2020-08-07T15:59:13Z",
        "updatedAt" : "2020-08-07T19:30:57Z",
        "lastEditedBy" : "0305d3a6-be70-4124-b2db-e5f54937820d",
        "tags" : [
        ]
      },
      {
        "id" : "b685353f-e057-4132-a167-f4a022acb91a",
        "parentId" : "22cafff0-2be6-4e5e-9cc6-a89b939aec9c",
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "Hmm, my vote would be to follow the Haskell instance, then, but I don't have a strong opinion.",
        "createdAt" : "2020-08-07T16:00:28Z",
        "updatedAt" : "2020-08-07T19:30:57Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      },
      {
        "id" : "1aec0a24-e650-462c-b7b0-9d9d378edf41",
        "parentId" : "22cafff0-2be6-4e5e-9cc6-a89b939aec9c",
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "I think there is an argument for the `These` choice in that if you think of this as an `(Option, Option)` pair with two `None`s prohibited, both `Left` and `Right` would precede `Both`.",
        "createdAt" : "2020-08-07T16:06:30Z",
        "updatedAt" : "2020-08-07T19:30:57Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      },
      {
        "id" : "77de9b02-9108-4f87-bf6c-c12aed91af7c",
        "parentId" : "22cafff0-2be6-4e5e-9cc6-a89b939aec9c",
        "authorId" : "2ed5d687-cc94-4d72-ba74-717be38944e9",
        "body" : "The Haskell instance is derived and I think not a product of deep thought, but I also don't see a compelling reason to diverge from prior art.  I think of the type as a cleaner `Either[A, (Option[A], B)]`, which `Both` after `Right` is consistent with.",
        "createdAt" : "2020-08-07T16:28:35Z",
        "updatedAt" : "2020-08-07T19:30:57Z",
        "lastEditedBy" : "2ed5d687-cc94-4d72-ba74-717be38944e9",
        "tags" : [
        ]
      },
      {
        "id" : "9ec97338-d3c7-4c0c-aec8-2240f49a8717",
        "parentId" : "22cafff0-2be6-4e5e-9cc6-a89b939aec9c",
        "authorId" : "0305d3a6-be70-4124-b2db-e5f54937820d",
        "body" : "Cool, I'll change it. Thanks for the feedback! :)",
        "createdAt" : "2020-08-07T19:11:37Z",
        "updatedAt" : "2020-08-07T19:30:57Z",
        "lastEditedBy" : "0305d3a6-be70-4124-b2db-e5f54937820d",
        "tags" : [
        ]
      }
    ],
    "commit" : "64de92f8ba1dfb05cb5064c7f8a46b0d77acd74c",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +709,713 @@    )\n\n  final def compare[AA >: A, BB >: B](that: AA Ior BB)(implicit AA: Order[AA], BB: Order[BB]): Int =\n    (this, that) match {\n      case (Ior.Left(a1), Ior.Left(a2))   => AA.compare(a1, a2)"
  },
  {
    "id" : "a54c43a3-8fd7-4988-9596-c28ba58ddb3d",
    "prId" : 1548,
    "prUrl" : "https://github.com/typelevel/cats/pull/1548#pullrequestreview-26047423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05ad2349-511a-45f1-9cfe-c0fd8e1dbf2d",
        "parentId" : null,
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "This line is not tested",
        "createdAt" : "2017-03-09T14:53:06Z",
        "updatedAt" : "2017-04-08T14:58:37Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      }
    ],
    "commit" : "d23e374781a0501e15fcb2b4c7afd42207ba0066",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +164,168 @@      def handleErrorWith[B](fa: Ior[A, B])(f: (A) => Ior[A, B]): Ior[A, B] =\n        fa match {\n          case Ior.Left(e) => f(e)\n          case r @ Ior.Right(_) => r\n          case Ior.Both(e, _) => f(e)"
  },
  {
    "id" : "7b759c4f-aa23-4dcd-a09c-872a14f9863e",
    "prId" : 1548,
    "prUrl" : "https://github.com/typelevel/cats/pull/1548#pullrequestreview-26048887",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52b4f6e6-37be-4509-9ef4-d8609eb6be35",
        "parentId" : null,
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "This line is not tested",
        "createdAt" : "2017-03-09T14:53:10Z",
        "updatedAt" : "2017-04-08T14:58:37Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "831d44ab-42de-4582-8331-28164b256eaa",
        "parentId" : "52b4f6e6-37be-4509-9ef4-d8609eb6be35",
        "authorId" : "eacb14a9-4369-4283-b6c8-2d9ade7df4a5",
        "body" : "@kailuowang Thanks for pointing them out. I will get it fixed this week.",
        "createdAt" : "2017-03-09T14:58:30Z",
        "updatedAt" : "2017-04-08T14:58:37Z",
        "lastEditedBy" : "eacb14a9-4369-4283-b6c8-2d9ade7df4a5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d23e374781a0501e15fcb2b4c7afd42207ba0066",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +166,170 @@          case Ior.Left(e) => f(e)\n          case r @ Ior.Right(_) => r\n          case Ior.Both(e, _) => f(e)\n        }\n"
  },
  {
    "id" : "1f39da5e-4bbd-42d2-9515-ab147dc9e27b",
    "prId" : 1540,
    "prUrl" : "https://github.com/typelevel/cats/pull/1540#pullrequestreview-22848400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04f9cf0b-7e77-4109-8250-f965b7bf58af",
        "parentId" : null,
        "authorId" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "body" : ":+1: ",
        "createdAt" : "2017-02-20T22:37:16Z",
        "updatedAt" : "2017-03-11T02:02:10Z",
        "lastEditedBy" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef82db6cd661cc361557d5315e6871e950d30b7f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +50,54 @@\n  final def toEither: Either[A, B] = fold(Left(_), Right(_), (_, b) => Right(b))\n  final def toValidated: Validated[A, B] = fold(Invalid(_), Valid(_), (_, b) => Valid(b))\n  final def toOption: Option[B] = right\n  final def toList: List[B] = right.toList"
  }
]