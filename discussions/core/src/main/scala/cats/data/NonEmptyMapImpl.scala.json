[
  {
    "id" : "6fb6417f-a6e9-4297-b0a5-726639542d50",
    "prId" : 3807,
    "prUrl" : "https://github.com/typelevel/cats/pull/3807#pullrequestreview-605773614",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd08c57f-572b-448d-a88a-f6fd779daeef",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "can we not move this to a lower priority? I think we could.\r\n\r\n",
        "createdAt" : "2021-03-05T19:58:54Z",
        "updatedAt" : "2021-03-05T19:58:54Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "15de103d-2b89-45c3-889b-191c83a080dc",
        "parentId" : "dd08c57f-572b-448d-a88a-f6fd779daeef",
        "authorId" : "f8d4ee36-cf86-4e28-a829-ce6d292ad3b0",
        "body" : "I don't think we should. Having a surprising `Semigroup` instance (as we do right now) is error-prone. But having two overlapping instances (one of them surprising), and choosing between them implicitly based on whether or not `A` has a `Semigroup` instance in scope - that is downright evil, IMO.",
        "createdAt" : "2021-03-06T01:14:03Z",
        "updatedAt" : "2021-03-06T01:14:20Z",
        "lastEditedBy" : "f8d4ee36-cf86-4e28-a829-ce6d292ad3b0",
        "tags" : [
        ]
      },
      {
        "id" : "40b812cc-fd83-4893-94a6-7d24350286b5",
        "parentId" : "dd08c57f-572b-448d-a88a-f6fd779daeef",
        "authorId" : "c33b0e1d-0e21-4a60-9e9e-dd22d678ce35",
        "body" : "Also it wouldn't work, because `Band <: Semigroup` so if we put a `Band` instance in a lower-priority scope, they will become ambiguous (lower priority gives you -1 points, but being a subtype gives you +1 points, making the score even).",
        "createdAt" : "2021-03-06T09:00:10Z",
        "updatedAt" : "2021-03-06T09:00:10Z",
        "lastEditedBy" : "c33b0e1d-0e21-4a60-9e9e-dd22d678ce35",
        "tags" : [
        ]
      },
      {
        "id" : "6dba647d-8c10-46b3-8230-7751c942d493",
        "parentId" : "dd08c57f-572b-448d-a88a-f6fd779daeef",
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "Yeah. This was a bad suggestion on my part.",
        "createdAt" : "2021-03-06T17:35:55Z",
        "updatedAt" : "2021-03-06T17:35:55Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      }
    ],
    "commit" : "b50ca30a516ad937d89baee3f8a2bca888aee421",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +319,323 @@\n  @deprecated(\"Use catsDataSemigroupForNonEmptyMap\", \"2.5.0\")\n  def catsDataBandForNonEmptyMap[K, A]: Band[NonEmptyMap[K, A]] =\n    new Band[NonEmptyMap[K, A]] {\n      def combine(x: NonEmptyMap[K, A], y: NonEmptyMap[K, A]): NonEmptyMap[K, A] = x ++ y"
  },
  {
    "id" : "96f63e14-a99d-4500-93f7-d5f131e354aa",
    "prId" : 2989,
    "prUrl" : "https://github.com/typelevel/cats/pull/2989#pullrequestreview-275466207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70c5d5e2-992c-49f5-81d3-a87e39677b03",
        "parentId" : null,
        "authorId" : "240add12-1fe5-499a-918c-053b1f46b348",
        "body" : "We should consider adding a `Contravariant[Hash]`, so we don't need to `asInstanceOf` these, WDYT @kailuowang ?",
        "createdAt" : "2019-08-14T17:53:52Z",
        "updatedAt" : "2019-08-14T17:53:52Z",
        "lastEditedBy" : "240add12-1fe5-499a-918c-053b1f46b348",
        "tags" : [
        ]
      },
      {
        "id" : "991e2f71-cf4a-4b45-bf5b-5f53e38b8dbf",
        "parentId" : "70c5d5e2-992c-49f5-81d3-a87e39677b03",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "Contravariant[Hash] sounds reasonable, but that would add overhead to this particular case right? So maybe we add that in a separate PR? ",
        "createdAt" : "2019-08-15T14:14:08Z",
        "updatedAt" : "2019-08-15T14:14:19Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "df75f4ab-4b50-4fe5-b7a2-2a298acf603d",
        "parentId" : "70c5d5e2-992c-49f5-81d3-a87e39677b03",
        "authorId" : "240add12-1fe5-499a-918c-053b1f46b348",
        "body" : "Yes, just in general :)",
        "createdAt" : "2019-08-15T14:15:13Z",
        "updatedAt" : "2019-08-15T14:15:13Z",
        "lastEditedBy" : "240add12-1fe5-499a-918c-053b1f46b348",
        "tags" : [
        ]
      },
      {
        "id" : "40c77147-d7cc-43a1-ba83-2dd1d517c32a",
        "parentId" : "70c5d5e2-992c-49f5-81d3-a87e39677b03",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "so shall we merge this one? \r\n",
        "createdAt" : "2019-08-15T14:23:59Z",
        "updatedAt" : "2019-08-15T14:24:00Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "31fea964-e64b-4148-a554-dd2dd8b0f281",
        "parentId" : "70c5d5e2-992c-49f5-81d3-a87e39677b03",
        "authorId" : "240add12-1fe5-499a-918c-053b1f46b348",
        "body" : "indeed\r\n",
        "createdAt" : "2019-08-15T14:36:58Z",
        "updatedAt" : "2019-08-15T14:36:59Z",
        "lastEditedBy" : "240add12-1fe5-499a-918c-053b1f46b348",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb6eb9619a71619519589ef218943a51fa560d51",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +320,324 @@\n  implicit def catsDataHashForNonEmptyMap[K: Hash: Order, A: Hash]: Hash[NonEmptyMap[K, A]] =\n    Hash[SortedMap[K, A]].asInstanceOf[Hash[NonEmptyMap[K, A]]]\n\n  implicit def catsDataShowForNonEmptyMap[K: Show, A: Show]: Show[NonEmptyMap[K, A]] ="
  },
  {
    "id" : "93aaa12f-74c6-445c-847b-e0f0e9a3a0a1",
    "prId" : 2141,
    "prUrl" : "https://github.com/typelevel/cats/pull/2141#pullrequestreview-93968695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c051fda0-7dde-4d75-bd16-e1309dc7147c",
        "parentId" : null,
        "authorId" : "c6fbf8a4-c76f-4b5c-9735-296cc159a29a",
        "body" : "Nitpicky, I know, but there are a lot of these double empty lines around.",
        "createdAt" : "2018-02-05T12:10:14Z",
        "updatedAt" : "2018-03-14T14:54:48Z",
        "lastEditedBy" : "c6fbf8a4-c76f-4b5c-9735-296cc159a29a",
        "tags" : [
        ]
      }
    ],
    "commit" : "60327b1963cfc1a69f453c9a071a2c2ced9d5c2d",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +52,56 @@    new NonEmptyMapOps(value)\n\n\n}\n"
  },
  {
    "id" : "7487dff3-add1-4a6d-825e-ff840538c565",
    "prId" : 2141,
    "prUrl" : "https://github.com/typelevel/cats/pull/2141#pullrequestreview-103242577",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e7c03f9-3be5-4ca9-b4ae-96f7b46f76e7",
        "parentId" : null,
        "authorId" : "d4c926be-8eed-42c7-9c7c-0ff0bf086280",
        "body" : "Maybe `private val value`?",
        "createdAt" : "2018-02-12T14:26:37Z",
        "updatedAt" : "2018-03-14T14:54:48Z",
        "lastEditedBy" : "d4c926be-8eed-42c7-9c7c-0ff0bf086280",
        "tags" : [
        ]
      },
      {
        "id" : "276bbad0-bb81-43e1-8ba7-00cfe03d3766",
        "parentId" : "5e7c03f9-3be5-4ca9-b4ae-96f7b46f76e7",
        "authorId" : "240add12-1fe5-499a-918c-053b1f46b348",
        "body" : "These are just the Ops, what do we gain from making the `value` public? :)",
        "createdAt" : "2018-02-12T14:31:15Z",
        "updatedAt" : "2018-03-14T14:54:48Z",
        "lastEditedBy" : "240add12-1fe5-499a-918c-053b1f46b348",
        "tags" : [
        ]
      },
      {
        "id" : "e3517f9e-fea2-4a3e-9209-7af55d0343f7",
        "parentId" : "5e7c03f9-3be5-4ca9-b4ae-96f7b46f76e7",
        "authorId" : "d4c926be-8eed-42c7-9c7c-0ff0bf086280",
        "body" : "Nothing, that's why I suggested making it private :-)\r\nIn fact, I think it shouldn't be a `val` at all.",
        "createdAt" : "2018-02-12T14:42:10Z",
        "updatedAt" : "2018-03-14T14:54:48Z",
        "lastEditedBy" : "d4c926be-8eed-42c7-9c7c-0ff0bf086280",
        "tags" : [
        ]
      },
      {
        "id" : "02a8496d-c974-4768-9dfb-b071b923da3b",
        "parentId" : "5e7c03f9-3be5-4ca9-b4ae-96f7b46f76e7",
        "authorId" : "240add12-1fe5-499a-918c-053b1f46b348",
        "body" : "Oh yeah, I got it switched around in my head :smile: \r\nCurrently all of our Ops Syntax classes look this way and consistency is good the way I see it. \r\nWhat would it be if not a `val`?",
        "createdAt" : "2018-02-12T15:40:50Z",
        "updatedAt" : "2018-03-14T14:54:48Z",
        "lastEditedBy" : "240add12-1fe5-499a-918c-053b1f46b348",
        "tags" : [
        ]
      },
      {
        "id" : "26386f34-ce39-47f1-b097-ff978a700340",
        "parentId" : "5e7c03f9-3be5-4ca9-b4ae-96f7b46f76e7",
        "authorId" : "c6fbf8a4-c76f-4b5c-9735-296cc159a29a",
        "body" : "Adding `val` makes it a member on the class, omitting it, it's only in the constructor.",
        "createdAt" : "2018-02-13T07:46:43Z",
        "updatedAt" : "2018-03-14T14:54:48Z",
        "lastEditedBy" : "c6fbf8a4-c76f-4b5c-9735-296cc159a29a",
        "tags" : [
        ]
      },
      {
        "id" : "fa4a69b8-dd45-4bf6-90c8-1e26e2fb25a1",
        "parentId" : "5e7c03f9-3be5-4ca9-b4ae-96f7b46f76e7",
        "authorId" : "240add12-1fe5-499a-918c-053b1f46b348",
        "body" : "Huh, yeah that makes sense, I wonder why that's the convention for syntax classes in cats, maybe someone else can chime in ðŸ¤” ",
        "createdAt" : "2018-02-14T16:23:56Z",
        "updatedAt" : "2018-03-14T14:54:48Z",
        "lastEditedBy" : "240add12-1fe5-499a-918c-053b1f46b348",
        "tags" : [
        ]
      },
      {
        "id" : "bf65d4e7-51f8-4a29-91fd-54a192411180",
        "parentId" : "5e7c03f9-3be5-4ca9-b4ae-96f7b46f76e7",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "@LukaJCB you have to make it public (ie `val`) if it's a value class, which is why you see it on other syntax classes.",
        "createdAt" : "2018-03-09T03:38:54Z",
        "updatedAt" : "2018-03-14T14:54:48Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "2c0da3e9-4f54-48d7-953f-9adcafe560a8",
        "parentId" : "5e7c03f9-3be5-4ca9-b4ae-96f7b46f76e7",
        "authorId" : "98bd6ddf-86cb-413a-a672-ee7d989ba290",
        "body" : "If I remember correctly the reason it must be public is 2.10. For 2.11 and 2.12 `private` would work as well.",
        "createdAt" : "2018-03-12T22:26:32Z",
        "updatedAt" : "2018-03-14T14:54:48Z",
        "lastEditedBy" : "98bd6ddf-86cb-413a-a672-ee7d989ba290",
        "tags" : [
        ]
      }
    ],
    "commit" : "60327b1963cfc1a69f453c9a071a2c2ced9d5c2d",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +55,59 @@}\n\nsealed class NonEmptyMapOps[K, A](val value: NonEmptyMap[K, A]) {\n  /**\n    * Converts this map to a `SortedMap`."
  }
]