[
  {
    "id" : "9c155e68-2e4b-4156-ae0f-24ce64b9d28b",
    "prId" : 1169,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62b8d294-eb34-41cb-9a77-59af055b3529",
        "parentId" : null,
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "Should we have `inspect` take `S => A` and create a separate `inspectF` for `S => F[A]`? It seems like the simple `S => A` case might be pretty common, so it might be nice to make it concise.\n",
        "createdAt" : "2016-07-01T11:24:18Z",
        "updatedAt" : "2016-07-08T16:10:51Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "91c1a412-a4fb-4e54-8c84-4f54b639c00b",
        "parentId" : "62b8d294-eb34-41cb-9a77-59af055b3529",
        "authorId" : "ce96b419-753f-4ea1-afb3-3adc3b30fcc7",
        "body" : "Agreed.  I'm thinking of adding a `modify` taking `S => S` and a `modifyF` taking `S => F[S]` while \nI'm at it.\n",
        "createdAt" : "2016-07-01T15:53:57Z",
        "updatedAt" : "2016-07-08T16:10:51Z",
        "lastEditedBy" : "ce96b419-753f-4ea1-afb3-3adc3b30fcc7",
        "tags" : [
        ]
      }
    ],
    "commit" : "90a228011c6b6f029544d86bcb322214c037e11a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +142,146 @@\n  def inspectF[F[_], S, A](f: S => F[A])(implicit F: Applicative[F]): StateT[F, S, A] =\n    StateT(s => F.map(f(s))(a => (s, a)))\n\n  def modify[F[_], S](f: S => S)(implicit F: Applicative[F]): StateT[F, S, Unit] ="
  }
]