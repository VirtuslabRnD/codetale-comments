[
  {
    "id" : "64b208c6-62a9-4f0e-8866-cf0a806a73bc",
    "prId" : 864,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06c5145a-2f47-484e-9807-8f0cb527b1f4",
        "parentId" : null,
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "It looks like we are combining the `Bifunctor` and `Bifoldable` instances in some places but not others. I guess if we are going to go forward with #800 then they will eventually be combined anyway. Was there any particular reason behind when they've been combined and when they haven't?\n",
        "createdAt" : "2016-02-06T12:30:55Z",
        "updatedAt" : "2016-02-17T04:44:58Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "00288bdc-ba69-4bdc-b965-ecec7e55971d",
        "parentId" : "06c5145a-2f47-484e-9807-8f0cb527b1f4",
        "authorId" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "body" : "The `Bifunctor[Xor]` instance was there prior to this PR. It wasn't in other places so I figured I would do those separately, hence https://github.com/typelevel/cats/pull/867. However because it looks like we have a use case for https://github.com/typelevel/cats/issues/800 I may abandon #867  and add `Bitraverse` once this is OK'ed and merged :-)\n",
        "createdAt" : "2016-02-06T17:20:45Z",
        "updatedAt" : "2016-02-17T04:44:58Z",
        "lastEditedBy" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "a39438868a0f73e8b4ae01ea3d91e1aca238dc16",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +167,171 @@    }\n\n  implicit def xorBifunctor: Bifunctor[Xor] with Bifoldable[Xor] =\n    new Bifunctor[Xor] with Bifoldable[Xor]{\n      override def bimap[A, B, C, D](fab: A Xor B)(f: A => C, g: B => D): C Xor D = fab.bimap(f, g)"
  },
  {
    "id" : "ab7dc4a0-14bc-41bd-ba9f-20ec99201dfd",
    "prId" : 575,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "016978a9-4552-4d2f-9583-f8ba055261c6",
        "parentId" : null,
        "authorId" : "64d7f629-ef5c-4472-bf31-18525b62f63d",
        "body" : "is there a difference in \n\n```\ncase r @ Xor.Right(_) => r\n```\n\nand\n\n```\ncase r => r\n```\n\n? The former is probably nicer to read, but does it come at a cost? i don't actually know and have wondered about this.\n",
        "createdAt" : "2015-10-16T18:54:14Z",
        "updatedAt" : "2015-10-16T18:55:21Z",
        "lastEditedBy" : "64d7f629-ef5c-4472-bf31-18525b62f63d",
        "tags" : [
        ]
      },
      {
        "id" : "cf287008-b08d-4692-9bde-37c54b02dd0b",
        "parentId" : "016978a9-4552-4d2f-9583-f8ba055261c6",
        "authorId" : "e34868e2-0a2a-481b-96bc-618893b0a42d",
        "body" : "I would be surprised if it did not come at a cost, but who knows, maybe the scala pattern matcher is smarter than I give it credit for. Happy to change it to `r => r`.\n",
        "createdAt" : "2015-10-16T19:16:42Z",
        "updatedAt" : "2015-10-16T19:16:42Z",
        "lastEditedBy" : "e34868e2-0a2a-481b-96bc-618893b0a42d",
        "tags" : [
        ]
      },
      {
        "id" : "516f7303-77f7-49b6-a438-b9e09e2824e3",
        "parentId" : "016978a9-4552-4d2f-9583-f8ba055261c6",
        "authorId" : "89a3e0e3-e301-4aa8-b150-74070eb5a619",
        "body" : "I think it will essentially correspond to an _else_ case, so it seems fine to me.\n",
        "createdAt" : "2015-10-16T20:07:39Z",
        "updatedAt" : "2015-10-16T20:07:39Z",
        "lastEditedBy" : "89a3e0e3-e301-4aa8-b150-74070eb5a619",
        "tags" : [
        ]
      }
    ],
    "commit" : "68e4e490d5bd3048a7bce46906c6109749ae6298",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +41,45 @@  def orElse[C, BB >: B](fallback: => C Xor BB): C Xor BB = this match {\n    case Xor.Left(_)      => fallback\n    case r @ Xor.Right(_) => r\n  }\n"
  }
]