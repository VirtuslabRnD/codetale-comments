[
  {
    "id" : "bb3d8085-06a0-44ca-8c77-9e57ea7b4b49",
    "prId" : 3459,
    "prUrl" : "https://github.com/typelevel/cats/pull/3459#pullrequestreview-432572060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdb4c53c-131b-4160-b0cf-658f91e0724d",
        "parentId" : null,
        "authorId" : "6eab4df0-103c-4334-ab61-5d3e9aa43193",
        "body" : "just a note, but don't consider it a blocker for the PR. I personally like the example in your comment [here](https://github.com/typelevel/cats/pull/3459#discussion_r437766077)\r\n \r\n```scala\r\nfa.attemptTap {\r\n  case Right(a) => log.info(s\"succeeded with $a\")\r\n  case Left(e) => log.error(s\"failed with $e\")\r\n}\r\n``` \r\nIt describes very well a real use case for `attemptTap`. A simple program could be simulated with `State`. Something like\r\n```scala\r\n/**\r\n * {{{\r\n * scala> import cats._, data._, implicits._\r\n * scala> type F[A] = EitherT[State[String, *], String, A]\r\n * scala> object log { def info(m: String): F[Unit] = EitherT.liftF(State.modify(_ => s\"info: $m\")); def error(m: String): F[Unit] = EitherT.liftF(State.modify(_ => s\"error: $m\")) }\r\n *\r\n * scala> val prog1: F[Int] = EitherT.liftF(State.pure(1))\r\n * scala> val prog2: F[Int] = \"this one failed\".raiseError[F, Int]\r\n *\r\n * scala> val run1 = prog1.attemptTap { case Right(a) => log.info(a.toString); case Left(e) => log.error(e) }\r\n * scala> val run2 = prog2.attemptTap { case Right(a) => log.info(a.toString); case Left(e) => log.error(e) }\r\n *\r\n * scala> run1.value.runS(\"init\").value\r\n * res0: String = info: 1\r\n *\r\n * scala> run2.value.runS(\"init\").value\r\n * res1: String = error: this one failed\r\n * }}}\r\n */\r\n```",
        "createdAt" : "2020-06-17T16:29:10Z",
        "updatedAt" : "2020-06-17T16:29:45Z",
        "lastEditedBy" : "6eab4df0-103c-4334-ab61-5d3e9aa43193",
        "tags" : [
        ]
      }
    ],
    "commit" : "f78dc9221e4a1bcc4f68e404ed8d69a76b66489d",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +91,95 @@   * scala> import scala.util.{Try, Success, Failure}\n   *\n   * scala> def checkError(result: Either[Throwable, Int]): Try[String] = result.fold(_ => Failure(new java.lang.Exception), _ => Success(\"success\"))\n   *\n   * scala> val a: Try[Int] = Failure(new Throwable(\"failed\"))"
  }
]