[
  {
    "id" : "c63df25e-9a96-447a-a110-9c7a9cca6a6f",
    "prId" : 1612,
    "prUrl" : "https://github.com/typelevel/cats/pull/1612#pullrequestreview-37985553",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a01ca01-1406-426d-b391-967229731c46",
        "parentId" : null,
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "It looks like this is following a precedent, but I find myself wondering if this `Either` syntax should really be providing syntax for methods that should already be available via type class syntax (in this case `MonadError`). Let's table that for a separate issue though.",
        "createdAt" : "2017-05-13T18:54:11Z",
        "updatedAt" : "2017-05-15T20:55:18Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "a76d8574d5071ee5f794208224e68b59ade8c7ac",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +81,85 @@  }\n\n  def ensureOr[AA >: A](onFailure: B => AA)(f: B => Boolean): Either[AA, B] = eab match {\n    case Left(_)  => eab\n    case Right(b) => if (f(b)) eab else Left(onFailure(b))"
  },
  {
    "id" : "4bca6f11-32a2-4176-bb8d-d26893a22b5f",
    "prId" : 1506,
    "prUrl" : "https://github.com/typelevel/cats/pull/1506#pullrequestreview-14729801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f926b630-ab3b-4c5d-8ad6-cba106e81eb1",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "this method is untested. Is it too much to ask to write a test of some kind during this PR?",
        "createdAt" : "2016-12-30T00:11:09Z",
        "updatedAt" : "2016-12-31T01:19:01Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "19580308-5436-4301-8e30-a78bcee6c373",
        "parentId" : "f926b630-ab3b-4c5d-8ad6-cba106e81eb1",
        "authorId" : "643cb6cd-19bf-44f6-8cc4-dbda01eaef44",
        "body" : "Not at all. Will do",
        "createdAt" : "2016-12-30T00:50:46Z",
        "updatedAt" : "2016-12-31T01:19:01Z",
        "lastEditedBy" : "643cb6cd-19bf-44f6-8cc4-dbda01eaef44",
        "tags" : [
        ]
      },
      {
        "id" : "b678c0fd-11d1-4c87-b69e-ac04252b9abc",
        "parentId" : "f926b630-ab3b-4c5d-8ad6-cba106e81eb1",
        "authorId" : "643cb6cd-19bf-44f6-8cc4-dbda01eaef44",
        "body" : "Actually this one should be covered by order laws at https://github.com/typelevel/cats/blob/master/tests/src/test/scala/cats/tests/EitherTests.scala#L44 , right?\r\n\r\nEDIT: Ah, it isn't because implementation of `partialCompare` in `EitherInstances` is duplicated in `EitherOps`. Is it better to dedup these two?",
        "createdAt" : "2016-12-30T02:39:01Z",
        "updatedAt" : "2016-12-31T01:19:01Z",
        "lastEditedBy" : "643cb6cd-19bf-44f6-8cc4-dbda01eaef44",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cafcdd7fb86ce4361cb36f4bb34b4e12a8c5599",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +143,147 @@  }\n\n  def partialCompare[AA >: A, BB >: B](that: Either[AA, BB])(implicit AA: PartialOrder[AA], BB: PartialOrder[BB]): Double = eab match {\n    case Left(a1)  =>\n      that match {"
  },
  {
    "id" : "594ad8a6-7968-4760-9687-e83e82cfec62",
    "prId" : 1506,
    "prUrl" : "https://github.com/typelevel/cats/pull/1506#pullrequestreview-14725920",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d5e0e42-1cd4-4dee-a632-6d822660d44b",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "this is untested. Can we add a simple test?",
        "createdAt" : "2016-12-30T00:11:24Z",
        "updatedAt" : "2016-12-31T01:19:01Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "709dafcc-1f1b-4c47-b24a-53c680ff8515",
        "parentId" : "7d5e0e42-1cd4-4dee-a632-6d822660d44b",
        "authorId" : "643cb6cd-19bf-44f6-8cc4-dbda01eaef44",
        "body" : "Of course",
        "createdAt" : "2016-12-30T00:50:56Z",
        "updatedAt" : "2016-12-31T01:19:01Z",
        "lastEditedBy" : "643cb6cd-19bf-44f6-8cc4-dbda01eaef44",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cafcdd7fb86ce4361cb36f4bb34b4e12a8c5599",
    "line" : 140,
    "diffHunk" : "@@ -1,1 +224,228 @@  }\n\n  def show[AA >: A, BB >: B](implicit AA: Show[AA], BB: Show[BB]): String = eab match {\n    case Left(a)  => s\"Left(${AA.show(a)})\"\n    case Right(b) => s\"Right(${BB.show(b)})\""
  },
  {
    "id" : "7a97d8a7-e2fa-4aab-8229-afaf8d18e63e",
    "prId" : 1506,
    "prUrl" : "https://github.com/typelevel/cats/pull/1506#pullrequestreview-14724409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e66ce0fe-e264-4eca-a177-b26d087e25ae",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "this is untested. Can we add a simple test?",
        "createdAt" : "2016-12-30T00:11:39Z",
        "updatedAt" : "2016-12-31T01:19:01Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cafcdd7fb86ce4361cb36f4bb34b4e12a8c5599",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +229,233 @@  }\n\n  def ap[AA >: A, BB >: B, C](that: Either[AA, BB => C]): Either[AA, C] = new EitherOps(that).flatMap(this.map)\n\n  /**"
  },
  {
    "id" : "2064e871-f4f8-474b-ad12-baf3a7b8d56e",
    "prId" : 1454,
    "prUrl" : "https://github.com/typelevel/cats/pull/1454#pullrequestreview-7347579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "730bdbb7-0b6d-4315-bbd5-7e00e8461413",
        "parentId" : null,
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "Let's make this `private val obj: A` , otherwise everybody will have an `obj` that point to itself. \n",
        "createdAt" : "2016-11-06T13:46:11Z",
        "updatedAt" : "2016-11-06T18:15:32Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "fe322cae-082f-4df2-a948-575c5cccbda7",
        "parentId" : "730bdbb7-0b6d-4315-bbd5-7e00e8461413",
        "authorId" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "body" : "I'll do it to all the ops classes in here, for consistency.\n",
        "createdAt" : "2016-11-06T16:50:13Z",
        "updatedAt" : "2016-11-06T18:15:32Z",
        "lastEditedBy" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "tags" : [
        ]
      },
      {
        "id" : "523ba9b6-47f2-4a56-8a64-b3dcb773755a",
        "parentId" : "730bdbb7-0b6d-4315-bbd5-7e00e8461413",
        "authorId" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "body" : "@kailuowang I checked and it looks like we don't use private vals in constructors for ops classes elsewhere in cats. Should I perhaps keep it not private for now for consistency, then submit a PR making all of them private?\n",
        "createdAt" : "2016-11-06T17:30:33Z",
        "updatedAt" : "2016-11-06T18:15:32Z",
        "lastEditedBy" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "tags" : [
        ]
      },
      {
        "id" : "3dbca181-0b16-4511-b3b4-59a014a7ded3",
        "parentId" : "730bdbb7-0b6d-4315-bbd5-7e00e8461413",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "But this is the only one that applies to all types. So I would favor a bit inconsistency over having a surprising obj on all types.  \n",
        "createdAt" : "2016-11-06T20:13:47Z",
        "updatedAt" : "2016-11-06T20:13:47Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "31a378c4-6ba1-46c7-818a-81d53ce9944e",
        "parentId" : "730bdbb7-0b6d-4315-bbd5-7e00e8461413",
        "authorId" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "body" : "This isn't the only one that applies to all types, see `OptionIdOps`. Everything has an `a` member already.\n",
        "createdAt" : "2016-11-06T20:29:46Z",
        "updatedAt" : "2016-11-06T20:29:46Z",
        "lastEditedBy" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "tags" : [
        ]
      },
      {
        "id" : "cbaf1fe1-e1a5-4786-bc5f-d6f09c6661bb",
        "parentId" : "730bdbb7-0b6d-4315-bbd5-7e00e8461413",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "Ah, don't know how I missed that. I will submit a PR  to fix OptionIdOps as soon as I get back to my laptop. Thanks for pointing it out.  I still don't think being consistent with previous mistakes provides  much value here. \n",
        "createdAt" : "2016-11-06T20:43:47Z",
        "updatedAt" : "2016-11-06T20:43:47Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "5cd35fd9-5e41-4d44-9e3d-26213b78c2d3",
        "parentId" : "730bdbb7-0b6d-4315-bbd5-7e00e8461413",
        "authorId" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "body" : "You will also have to fix `ApplicativeIdOps`, `ValidatedIdSyntax`, and `WriterIdSyntax`. I don't think e.g. attaching an `oa` member to every `Option[A]` is particularly helpful either; are you sure we shouldn't make them all private? \n",
        "createdAt" : "2016-11-06T20:52:30Z",
        "updatedAt" : "2016-11-06T20:52:30Z",
        "lastEditedBy" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "tags" : [
        ]
      },
      {
        "id" : "ba4fc48b-dcb1-4ed4-afa7-00737e7fc8be",
        "parentId" : "730bdbb7-0b6d-4315-bbd5-7e00e8461413",
        "authorId" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "body" : "@kailuowang I have a PR (#1456) making the ops classes consistent in this regard.\nEdit: You cannot make the val param of a value class private in 2.10. We're going to have to keep them all public.\n",
        "createdAt" : "2016-11-06T21:28:18Z",
        "updatedAt" : "2016-11-06T21:36:24Z",
        "lastEditedBy" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "tags" : [
        ]
      },
      {
        "id" : "58b7a416-20bc-4725-b908-14cd5ebd11df",
        "parentId" : "730bdbb7-0b6d-4315-bbd5-7e00e8461413",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "Thanks! \n",
        "createdAt" : "2016-11-07T01:25:17Z",
        "updatedAt" : "2016-11-07T01:25:17Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      }
    ],
    "commit" : "2538b0ea139cce2bad487261c6cc87b7cffc0adb",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +309,313 @@}\n\nfinal class EitherIdOps[A](val obj: A) extends AnyVal {\n  /** Wrap a value in `Left`. */\n  def asLeft[B]: Either[A, B] = Left(obj)"
  },
  {
    "id" : "2751fdfe-229e-4349-9476-f8c7f375af1b",
    "prId" : 1289,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3fe36d9-b0fc-432d-aebb-d9f9703a47ff",
        "parentId" : null,
        "authorId" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "body" : "I chose to name them like this to follow the `leftMap` convention - the name indicates which type parameter side to cast.\n",
        "createdAt" : "2016-08-17T05:18:21Z",
        "updatedAt" : "2016-08-17T06:02:17Z",
        "lastEditedBy" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba1a7860a34829755fd5adc9d0397c12adb8b2eb",
    "line" : 315,
    "diffHunk" : "@@ -1,1 +324,328 @@  /** Cast the left type parameter of the `Right`. */\n  def leftCast[C]: Either[C, B] = right.asInstanceOf[Either[C, B]]\n}\n\n/** Convenience methods to use `Either` syntax inside `Either` syntax definitions. */"
  }
]