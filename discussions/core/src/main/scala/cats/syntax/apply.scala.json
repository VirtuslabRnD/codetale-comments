[
  {
    "id" : "c259ea24-2fbb-4538-a851-d4d0ae47689c",
    "prId" : 2609,
    "prUrl" : "https://github.com/typelevel/cats/pull/2609#pullrequestreview-176921085",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b6cece8-df57-426d-8407-ce6a90adfe3e",
        "parentId" : null,
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "Unfortunately we can't add any methods to type classses without breaking binary compatibility. So for now, we have to settle adding to a new syntax trait. Sorry I am on my phone and couldn't point you to an example. ",
        "createdAt" : "2018-11-13T18:13:20Z",
        "updatedAt" : "2019-01-12T03:31:18Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "3a45ee17-61a3-4b1a-a9c6-d415bbabd3f3",
        "parentId" : "9b6cece8-df57-426d-8407-ce6a90adfe3e",
        "authorId" : "ee04e3fc-01cf-4b53-b73a-ec7dfe8d58cf",
        "body" : "@kailuowang If I understand you correctly, we can not add the method to the `trait Apply[F[_]]` (the type-class) but can only leave it as part of a syntactic extension `implicit class`? ",
        "createdAt" : "2018-11-14T09:37:01Z",
        "updatedAt" : "2019-01-12T03:31:18Z",
        "lastEditedBy" : "ee04e3fc-01cf-4b53-b73a-ec7dfe8d58cf",
        "tags" : [
        ]
      },
      {
        "id" : "f8b2f56d-1442-44f2-af31-b9e5bac1b85c",
        "parentId" : "9b6cece8-df57-426d-8407-ce6a90adfe3e",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "sorry for the delayed response. Yes, that's the idea. You already updated the PR, we also need to create a new `ApplySyntaxBinCompat` trait to include an implicit conversion from `F[Boolean]` to `IfAOps`, then there are a couple of more steps, \r\n1.  [here](https://github.com/typelevel/cats/blob/master/core/src/main/scala/cats/syntax/all.scala) we need to add a new trait `AllSyntaxBinCompat4` to extends the new `ApplySyntaxBinCompat`,\r\n let the `AllSyntaxBinCompat` at the top extend this `AllSyntaxBinCompat4`\r\n2. [here] https://github.com/typelevel/cats/blob/master/core/src/main/scala/cats/implicits.scala we also need to let the `implicits` object extends this new `AllSyntaxBinCompat4`\r\n3. then we can probably add a doctest here that `import cats.implicits._` to validate that it's all hooked up. \r\n\r\nSorry about the gymnastics you have to go through to overcome the Scala 2.11 binary compatibility restrictions. \r\n\r\n",
        "createdAt" : "2018-11-20T18:49:47Z",
        "updatedAt" : "2019-01-12T03:31:18Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      }
    ],
    "commit" : "2517183ae261a46dceb3ffdbaa68da845ec857b3",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +48,52 @@   * asInt2: Option[Int] = None\n   *\n   * }}}\n   */\n  def ifA[A](ifTrue: F[A], ifFalse: F[A])(implicit F: Apply[F]): F[A] = {"
  },
  {
    "id" : "c930bbf9-c145-4ac8-85c1-7b97ef64726b",
    "prId" : 2083,
    "prUrl" : "https://github.com/typelevel/cats/pull/2083#pullrequestreview-83594626",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b107dab-7a86-44ae-bc54-87ff97763a78",
        "parentId" : null,
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "Hmm, why is it that this new syntax is needed? Does simulacrum not generate syntax for deprecated methods?",
        "createdAt" : "2017-12-14T02:45:21Z",
        "updatedAt" : "2017-12-15T17:37:07Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "61f0d417-b18b-4458-9dc1-5286be8dd34a",
        "parentId" : "8b107dab-7a86-44ae-bc54-87ff97763a78",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "Generate as deprecated?\r\n",
        "createdAt" : "2017-12-14T03:12:57Z",
        "updatedAt" : "2017-12-15T17:37:07Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "2d3ab3f3-5262-4898-85bf-90110a3d6ee5",
        "parentId" : "8b107dab-7a86-44ae-bc54-87ff97763a78",
        "authorId" : "e86d506c-5451-40fd-bd5c-3cecd80f839d",
        "body" : "Simulacrum does generate the deprecated methods, which makes scalac complain since it references the original deprecated method.",
        "createdAt" : "2017-12-14T18:08:24Z",
        "updatedAt" : "2017-12-15T17:37:07Z",
        "lastEditedBy" : "e86d506c-5451-40fd-bd5c-3cecd80f839d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0153f3df5bb538773fb6a3b0295b972e6e7e8e3d",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +15,19 @@}\n\nfinal class ApplyOps[F[_], A](val fa: F[A]) extends AnyVal {\n  /** Alias for [[Apply.productR]]. */\n  @deprecated(\"Use *> or apR instead.\", \"1.0.0-RC2\")"
  }
]