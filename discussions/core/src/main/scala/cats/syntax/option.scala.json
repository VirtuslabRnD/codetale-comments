[
  {
    "id" : "d63be0b1-ad15-4cd5-883b-26ddf5b781bc",
    "prId" : 3358,
    "prUrl" : "https://github.com/typelevel/cats/pull/3358#pullrequestreview-434260398",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47326209-f60c-469e-91f2-df6bf8c922eb",
        "parentId" : null,
        "authorId" : "6eab4df0-103c-4334-ab61-5d3e9aa43193",
        "body" : "To fix  the ci error, the doctest  could be changed to something like\r\n```scala\r\n/**\r\n * Raise to an F[Unit], as long as it has an ApplicativeError[F, A] instance\r\n * If the option is empty, an empty unit effect is given.\r\n * If the option contains an error, it is raised.\r\n *\r\n * Example:\r\n * {{{\r\n * scala> import cats.implicits._\r\n *\r\n * scala> type F[A] = Either[String, A]\r\n *\r\n * scala> Option.empty[String].raiseTo[F]\r\n * res0: scala.Either[String, Unit] = Right(())\r\n *\r\n * scala> Option(\"Failed\").raiseTo[F]\r\n * res1: scala.Either[String, Unit] = Left(Failed)\r\n * }}}\r\n */\r\n```",
        "createdAt" : "2020-06-19T18:08:59Z",
        "updatedAt" : "2020-06-20T17:26:25Z",
        "lastEditedBy" : "6eab4df0-103c-4334-ab61-5d3e9aa43193",
        "tags" : [
        ]
      }
    ],
    "commit" : "e809c6fc37b871638e408dbc01d1486628df7efd",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +351,355 @@   * scala> Option(\"Failed\").raiseTo[F]\n   * res1: scala.Either[String, Unit] = Left(Failed)\n   * }}}\n   */\n  def raiseTo[F[_]](implicit F: ApplicativeError[F, A]): F[Unit] ="
  },
  {
    "id" : "7737a034-9829-4e33-84f0-ed3ab3efb238",
    "prId" : 2179,
    "prUrl" : "https://github.com/typelevel/cats/pull/2179#pullrequestreview-100872099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9e007c5-3192-4e45-a0c4-75fc3282c0fb",
        "parentId" : null,
        "authorId" : "8106957f-b999-418b-b22b-14067e9a3932",
        "body" : "I'm surprised this works because `LiftToPartiallyApplied` is marked `private[cats]` â€¦ I guess I can have a value of this type but I can't declare or ascribe it. Interesting trick.",
        "createdAt" : "2018-03-02T18:31:21Z",
        "updatedAt" : "2018-03-02T18:31:29Z",
        "lastEditedBy" : "8106957f-b999-418b-b22b-14067e9a3932",
        "tags" : [
        ]
      },
      {
        "id" : "9fdf1215-50f6-4c9c-984a-c2ee0d9698f5",
        "parentId" : "a9e007c5-3192-4e45-a0c4-75fc3282c0fb",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "this is the fun of working with scala. ",
        "createdAt" : "2018-03-02T18:40:35Z",
        "updatedAt" : "2018-03-02T18:40:35Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      }
    ],
    "commit" : "423cb0cb6c39fdb33acedcce649a49f352ff9cfb",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +187,191 @@    * }}}\n    */\n  def liftTo[F[_]]: LiftToPartiallyApplied[F, A] = new LiftToPartiallyApplied(oa)\n\n}"
  }
]