[
  {
    "id" : "68092a54-77fa-4002-9b25-43b4d6da86d0",
    "prId" : 3234,
    "prUrl" : "https://github.com/typelevel/cats/pull/3234#pullrequestreview-340611012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58a41734-0cfb-4543-a62f-635aab4170cb",
        "parentId" : null,
        "authorId" : "2ed5d687-cc94-4d72-ba74-717be38944e9",
        "body" : "I can't remember why some syntax traits are package private and some aren't.  I can't think of a reason this couldn't and shouldn't be, but I also was not very active in developing this idiom.",
        "createdAt" : "2020-01-06T16:17:29Z",
        "updatedAt" : "2020-01-06T16:18:21Z",
        "lastEditedBy" : "2ed5d687-cc94-4d72-ba74-717be38944e9",
        "tags" : [
        ]
      },
      {
        "id" : "8a7f3a53-46b6-4055-a68f-d6aefa20d753",
        "parentId" : "58a41734-0cfb-4543-a62f-635aab4170cb",
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "@rossabaker As far as I know there's not a good answer to this questionâ€”like a lot of stuff in Cats it's just the result of a lot of uncoordinated decisions. I opened a related issue [here](https://github.com/typelevel/cats/issues/3008) a few months ago.",
        "createdAt" : "2020-01-07T10:24:42Z",
        "updatedAt" : "2020-01-07T10:24:42Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      },
      {
        "id" : "c154a6db-3aa4-4f01-af20-8d83bfa4e37e",
        "parentId" : "58a41734-0cfb-4543-a62f-635aab4170cb",
        "authorId" : "2ed5d687-cc94-4d72-ba74-717be38944e9",
        "body" : "@gagandeepkalra has been through a lot of incidental distractions already. I'm good with punting on it for the purposes of this ticket.",
        "createdAt" : "2020-01-07T13:53:51Z",
        "updatedAt" : "2020-01-07T13:53:51Z",
        "lastEditedBy" : "2ed5d687-cc94-4d72-ba74-717be38944e9",
        "tags" : [
        ]
      },
      {
        "id" : "ce3812d9-639c-456f-bb89-948d45580b97",
        "parentId" : "58a41734-0cfb-4543-a62f-635aab4170cb",
        "authorId" : "429eae10-8138-404f-b9b2-421bcdcf30be",
        "body" : "thank you",
        "createdAt" : "2020-01-09T15:37:52Z",
        "updatedAt" : "2020-01-09T15:37:53Z",
        "lastEditedBy" : "429eae10-8138-404f-b9b2-421bcdcf30be",
        "tags" : [
        ]
      }
    ],
    "commit" : "4df68699e2d8a3b7f0af8f4b8850b750d2c05158",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +96,100 @@trait AllSyntaxBinCompat6 extends ParallelUnorderedTraverseSyntax\n\ntrait AllSyntaxBinCompat7 extends FunctorSyntaxBinCompat0"
  },
  {
    "id" : "3a1a31bc-9e70-4b3a-9afa-9e3764e1ef6a",
    "prId" : 2148,
    "prUrl" : "https://github.com/typelevel/cats/pull/2148#pullrequestreview-91499611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d58cb5f-b3e6-406c-a120-1c7c910452fd",
        "parentId" : null,
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "One more small thing, if we make this one abstract class (and maybe even have it extends `AllSyntax`) we can add more traits to it going forward.",
        "createdAt" : "2018-01-24T17:25:21Z",
        "updatedAt" : "2018-01-25T03:36:28Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "d0acfa4b-fa97-43f3-a44a-655627401dea",
        "parentId" : "6d58cb5f-b3e6-406c-a120-1c7c910452fd",
        "authorId" : "5e69f9a7-81f7-4c30-81de-392443f2c68d",
        "body" : "How about an `abstract class AllSyntaxBinCompat extends AllSyntax with AllSyntaxBinCompat0`?",
        "createdAt" : "2018-01-24T22:21:35Z",
        "updatedAt" : "2018-01-25T03:36:28Z",
        "lastEditedBy" : "5e69f9a7-81f7-4c30-81de-392443f2c68d",
        "tags" : [
        ]
      },
      {
        "id" : "f5907105-ef47-49a5-8904-769d2ea4f2f4",
        "parentId" : "6d58cb5f-b3e6-406c-a120-1c7c910452fd",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "then what's the purpose of `AllSyntaxBinCompat0`? just as a versioning scheme? ",
        "createdAt" : "2018-01-24T22:24:10Z",
        "updatedAt" : "2018-01-25T03:36:28Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "0bbe2509-690e-4d3c-9f50-4898ab5283ed",
        "parentId" : "6d58cb5f-b3e6-406c-a120-1c7c910452fd",
        "authorId" : "5e69f9a7-81f7-4c30-81de-392443f2c68d",
        "body" : "A downstream consumer can't mix in the abstract class but they could mix in `AllSyntax` and `AllSyntaxBinCompat0` to get roughly the same effect. Without `AllSyntaxBinCompat0`, but then you'd have to remember that `AllSyntax` is missing `UnorderedTraverse` syntax. So it's versioning scheme to facilitate downstream use.\r\n\r\nI'm not sure if it's worth it though. It's just an idea.",
        "createdAt" : "2018-01-24T22:47:24Z",
        "updatedAt" : "2018-01-25T03:36:28Z",
        "lastEditedBy" : "5e69f9a7-81f7-4c30-81de-392443f2c68d",
        "tags" : [
        ]
      },
      {
        "id" : "96880217-a068-4d4f-a189-06ff9559891f",
        "parentId" : "6d58cb5f-b3e6-406c-a120-1c7c910452fd",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "I see. Makes sense to me ",
        "createdAt" : "2018-01-25T12:11:08Z",
        "updatedAt" : "2018-01-25T12:11:08Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6375e01c523060aefc18f23ab4c4d8875276d91d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +54,58 @@    with WriterSyntax\n\ntrait AllSyntaxBinCompat0\n    extends UnorderedTraverseSyntax"
  },
  {
    "id" : "b2b6fd2b-c102-4d62-8aeb-63a745cef21f",
    "prId" : 1112,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5509d499-5d2c-4d5e-9ec2-43128e22fda4",
        "parentId" : null,
        "authorId" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "body" : "This needs to also have `object tuple extends TupleSyntax` in `package.scala` right?\n\nAlso, do we want to put this under tuples or Cartesian syntax?\n",
        "createdAt" : "2016-08-09T18:44:15Z",
        "updatedAt" : "2016-08-11T00:14:19Z",
        "lastEditedBy" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "tags" : [
        ]
      },
      {
        "id" : "c852e204-ee18-4346-bd59-7314c0cd5c01",
        "parentId" : "5509d499-5d2c-4d5e-9ec2-43128e22fda4",
        "authorId" : "f94caf4c-b5e8-4029-84ca-0fca5b9efcd8",
        "body" : "Ah yes, well spotted - thanks! I'll update this.\n\nI am not really sure about the second question; my reasoning was that in general the syntax is named according to the type or set of types that it decorates but I may have got the wrong idea and I'm happy to rename it.\n",
        "createdAt" : "2016-08-11T00:03:16Z",
        "updatedAt" : "2016-08-11T00:14:19Z",
        "lastEditedBy" : "f94caf4c-b5e8-4029-84ca-0fca5b9efcd8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6bd29a59f2f01ca4aadf0854342bc2f16714809",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +41,45 @@    with TraverseFilterSyntax\n    with TraverseSyntax\n    with TupleSyntax\n    with ValidatedSyntax\n    with WriterSyntax"
  }
]