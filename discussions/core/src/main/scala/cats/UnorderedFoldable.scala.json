[
  {
    "id" : "84a0f4d7-b74f-45bd-a329-b0b47d7ab1cf",
    "prId" : 2586,
    "prUrl" : "https://github.com/typelevel/cats/pull/2586#pullrequestreview-169691647",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dfea119-4a0d-44bf-90a6-900722f6e2ba",
        "parentId" : null,
        "authorId" : "240add12-1fe5-499a-918c-053b1f46b348",
        "body" : "Tiny tiny nitpick but `nonEmpty` now negates `exists` twice. Maybe we should define `nonEmpty` as `exists(fa)(Function.const(true))` and then `isEmpty` as `!nonEmpty` WDYT? :)",
        "createdAt" : "2018-10-30T07:02:48Z",
        "updatedAt" : "2018-10-30T10:17:14Z",
        "lastEditedBy" : "240add12-1fe5-499a-918c-053b1f46b348",
        "tags" : [
        ]
      },
      {
        "id" : "35a957f7-013a-4e87-8364-26edec0157d8",
        "parentId" : "1dfea119-4a0d-44bf-90a6-900722f6e2ba",
        "authorId" : "6eab4df0-103c-4334-ab61-5d3e9aa43193",
        "body" : "Actually I started from that :), but then I changed it as I had the impression it was reading better in my head (not exists instead of not non empty). But I don't really love my version either, as you said double negates, and even if it's simple logic, that makes reasoning convoluted and unnatural. I'm happy to change it 👍.",
        "createdAt" : "2018-10-30T10:02:31Z",
        "updatedAt" : "2018-10-30T10:17:14Z",
        "lastEditedBy" : "6eab4df0-103c-4334-ab61-5d3e9aa43193",
        "tags" : [
        ]
      }
    ],
    "commit" : "972db967e8b8a377575e5c90b397ba11de2e83f8",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +20,24 @@  def isEmpty[A](fa: F[A]): Boolean =\n    !nonEmpty(fa)\n\n  def nonEmpty[A](fa: F[A]): Boolean =\n    exists(fa)(Function.const(true))"
  },
  {
    "id" : "48bc749a-ab59-456f-8e66-50b420747972",
    "prId" : 1981,
    "prUrl" : "https://github.com/typelevel/cats/pull/1981#pullrequestreview-70895194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1efefeda-345b-4df1-b236-4f3f3fdd7d4f",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "This can be implemented with foldMap (map to true, do the commutative “or” monoid",
        "createdAt" : "2017-10-20T16:22:55Z",
        "updatedAt" : "2017-11-24T16:01:13Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea38cd60eb2846d92d6b9b425524433717ee9882",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +18,22 @@    * Returns true if there are no elements. Otherwise false.\n    */\n  def isEmpty[A](fa: F[A]): Boolean =\n    exists(fa)(Function.const(true))\n"
  },
  {
    "id" : "341531d6-1c68-4b48-b3db-b3e99e052e71",
    "prId" : 1981,
    "prUrl" : "https://github.com/typelevel/cats/pull/1981#pullrequestreview-70895194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aab2a41c-06cf-4483-a261-ee5b088a5fd0",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "This can be implemented with unorderedFoldMap",
        "createdAt" : "2017-10-20T16:23:24Z",
        "updatedAt" : "2017-11-24T16:01:13Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea38cd60eb2846d92d6b9b425524433717ee9882",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +29,33 @@    * If there are no elements, the result is `false`.\n    */\n  def exists[A](fa: F[A])(p: A => Boolean): Boolean =\n    unorderedFoldMap(fa)(a => Eval.later(p(a)))(UnorderedFoldable.commutativeMonoidEval(UnorderedFoldable.orMonoid))\n      .value"
  },
  {
    "id" : "05a7c809-24c1-40d6-a131-3ae3cb5369ef",
    "prId" : 1981,
    "prUrl" : "https://github.com/typelevel/cats/pull/1981#pullrequestreview-70895194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40394d81-35e3-48e2-952e-a5fc9fdb183d",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "This can be implemented with foldMap using and monoid.",
        "createdAt" : "2017-10-20T16:24:18Z",
        "updatedAt" : "2017-11-24T16:01:13Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea38cd60eb2846d92d6b9b425524433717ee9882",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +38,42 @@    * If there are no elements, the result is `true`.\n    */\n  def forall[A](fa: F[A])(p: A => Boolean): Boolean =\n    unorderedFoldMap(fa)(a => Eval.later(p(a)))(UnorderedFoldable.commutativeMonoidEval(UnorderedFoldable.andMonoid))\n      .value"
  }
]