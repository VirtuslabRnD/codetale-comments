[
  {
    "id" : "7dc69c6d-2347-4adc-96a4-e3e3a0352ad8",
    "prId" : 1649,
    "prUrl" : "https://github.com/typelevel/cats/pull/1649#pullrequestreview-47499323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "907e37e2-dc21-4050-96ac-d8151e4606fd",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "I wonder if we can get the test to pass by asking for `Show[_ >: A]` which is effectively what this trick is doing, and not having to introduce the new type. I *think* we can (at least on 2.12).",
        "createdAt" : "2017-06-30T17:51:56Z",
        "updatedAt" : "2017-07-07T07:32:49Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "705616ce-aecf-47dd-8f3e-5bb9a4415c05",
        "parentId" : "907e37e2-dc21-4050-96ac-d8151e4606fd",
        "authorId" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "body" : "Unfortunately type inference looks to be just slightly shy, like it was when I asked for `[A, B >: A](x: A)(implicit z: Show[B])`: it never converts anything to a `Shown`.\r\n\r\n```\r\n[error] /Users/edmund/workspace/scala/cats/tests/src/test/scala/cats/tests/ShowTests.scala:29: type mismatch;\r\n[error]  found   : TimeOfDay\r\n[error]  required: cats.Show.Shown\r\n[error]     assertResult(\"Good morning, Whiskers!\")(show\"Good $tod, $cat!\")\r\n[error]                                                        ^\r\n[error] /Users/edmund/workspace/scala/cats/tests/src/test/scala/cats/tests/ShowTests.scala:29: type mismatch;\r\n[error]  found   : Cat\r\n[error]  required: cats.Show.Shown\r\n[error]     assertResult(\"Good morning, Whiskers!\")(show\"Good $tod, $cat!\")\r\n[error]                                                              ^\r\n[error] /Users/edmund/workspace/scala/cats/tests/src/test/scala/cats/tests/ShowTests.scala:31: type mismatch;\r\n[error]  found   : TimeOfDay\r\n[error]  required: cats.Show.Shown\r\n[error]     assertResult(\"Good morning, Whiskers!\")(show\"Good $tod, ${List(cat).head}!\")\r\n[error]                                                        ^\r\n[error] /Users/edmund/workspace/scala/cats/tests/src/test/scala/cats/tests/ShowTests.scala:31: type mismatch;\r\n[error]  found   : Cat\r\n[error]  required: cats.Show.Shown\r\n[error]     assertResult(\"Good morning, Whiskers!\")(show\"Good $tod, ${List(cat).head}!\")\r\n[error]                                                                         ^\r\n[error] /Users/edmund/workspace/scala/cats/tests/src/test/scala/cats/tests/ShowTests.scala:46: type mismatch;\r\n[error]  found   : Cat\r\n[error]  required: cats.Show.Shown\r\n[error]     assertResult(\"Good morning, Whiskers!\")(show\"Good morning, $cat!\")\r\n[error]                                                                 ^\r\n[error] 5 errors found\r\n```\r\n",
        "createdAt" : "2017-06-30T19:46:41Z",
        "updatedAt" : "2017-07-07T07:32:49Z",
        "lastEditedBy" : "b084ae12-948e-41db-b85f-097bb81e5826",
        "tags" : [
        ]
      },
      {
        "id" : "36560f79-79c3-47ba-9c88-654f3737a19e",
        "parentId" : "907e37e2-dc21-4050-96ac-d8151e4606fd",
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "when I did a simple test in the repl this worked when I did `implicitly[Foo[_ >: A]]` did you try that form (not putting a specific type)? you never know with scala which minor translation of the code will work.",
        "createdAt" : "2017-06-30T19:48:07Z",
        "updatedAt" : "2017-07-07T07:32:49Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "414df770-76cf-4b33-8af1-128d3e1ff830",
        "parentId" : "907e37e2-dc21-4050-96ac-d8151e4606fd",
        "authorId" : "6cfa05a7-5825-4a88-8b85-c15200ac3897",
        "body" : "An implicit in the repl is like you've imported it. His is in the Shown companion object.",
        "createdAt" : "2017-06-30T20:39:30Z",
        "updatedAt" : "2017-07-07T07:32:49Z",
        "lastEditedBy" : "6cfa05a7-5825-4a88-8b85-c15200ac3897",
        "tags" : [
        ]
      },
      {
        "id" : "04b34df3-283a-4975-a0cb-b78bb2463a0e",
        "parentId" : "907e37e2-dc21-4050-96ac-d8151e4606fd",
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "right. That clarifies it for me.",
        "createdAt" : "2017-06-30T21:24:51Z",
        "updatedAt" : "2017-07-07T07:32:49Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      }
    ],
    "commit" : "59822c149cc882b295f1105c15c063c5c6e6a07a",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +33,37 @@  final case class Shown(override val toString: String) extends AnyVal\n  object Shown {\n    implicit def mat[A](x: A)(implicit z: ContravariantShow[A]): Shown = Shown(z show x)\n  }\n"
  }
]