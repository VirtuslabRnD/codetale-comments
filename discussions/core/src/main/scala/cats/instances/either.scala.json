[
  {
    "id" : "fb43f61d-62e5-45fb-ac1e-03b4ad5f4fc9",
    "prId" : 3076,
    "prUrl" : "https://github.com/typelevel/cats/pull/3076#pullrequestreview-302045155",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9abe26e-d8a7-41d1-a831-0e22cbf5d067",
        "parentId" : null,
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "This `Align` instance for `Either` seems not tested. ",
        "createdAt" : "2019-10-15T16:34:57Z",
        "updatedAt" : "2019-11-04T21:43:28Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5be6a8607eeb1459f225690b573187397ae128e9",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +148,152 @@      def functor: Functor[Either[A, *]] = this\n\n      def align[B, C](fa: Either[A, B], fb: Either[A, C]): Either[A, Ior[B, C]] =\n        alignWith(fa, fb)(identity)\n"
  },
  {
    "id" : "a1f1eef4-b1d6-4dc8-97a0-4a8298eb9614",
    "prId" : 1532,
    "prUrl" : "https://github.com/typelevel/cats/pull/1532#pullrequestreview-19864922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff57a20c-cd1e-4a03-9150-86ea04f38555",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "next 5 method untested.",
        "createdAt" : "2017-02-02T19:10:49Z",
        "updatedAt" : "2017-02-03T09:46:59Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      }
    ],
    "commit" : "96c62466b4e161c284fe8fba775d19a25a648bc0",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +94,98 @@        fab.ensure(error)(predicate)\n\n      override def reduceLeftToOption[B, C](fab: Either[A, B])(f: B => C)(g: (C, B) => C): Option[C] =\n        fab.right.map(f).toOption\n"
  },
  {
    "id" : "68626d31-0cb2-42a4-b011-c5b60fc25b6a",
    "prId" : 1532,
    "prUrl" : "https://github.com/typelevel/cats/pull/1532#pullrequestreview-19864922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f53520fd-83f7-48c2-81b9-fa233419c8e6",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "untested.",
        "createdAt" : "2017-02-02T19:10:57Z",
        "updatedAt" : "2017-02-03T09:46:59Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      }
    ],
    "commit" : "96c62466b4e161c284fe8fba775d19a25a648bc0",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +122,126 @@\n      override def toList[B](fab: Either[A, B]): List[B] =\n        fab.fold(_ => Nil, _ :: Nil)\n\n      override def isEmpty[B](fab: Either[A, B]): Boolean ="
  },
  {
    "id" : "633aa1c2-99c4-48da-8116-1a38f51c8532",
    "prId" : 1289,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fc18f4e-328d-4b69-8a6a-21c1e2825d0d",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "I'm concerned about this. Is this how Xor worked?\n\nThe standard combine is to prefer `Left`, but this `combineK` is preferring `Right` in that case. Maybe this is what you expect with `MonadCombine`, but I'm a bit concerned there is no documentation of this, and it is a bit unclear why one works in one direction, but the other the opposite.\n",
        "createdAt" : "2016-08-16T19:03:11Z",
        "updatedAt" : "2016-08-17T06:02:17Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "ae3da13d-d260-437d-9fa2-84f3f62af04d",
        "parentId" : "3fc18f4e-328d-4b69-8a6a-21c1e2825d0d",
        "authorId" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "body" : "Yeah, all of the new `either` syntax is copied over from the `Xor` data type. You can see the equivalent here: https://github.com/typelevel/cats/blob/master/core/src/main/scala/cats/data/Xor.scala#L229\n\nThat change was made in this PR I believe: https://github.com/typelevel/cats/pull/996\n",
        "createdAt" : "2016-08-16T19:34:36Z",
        "updatedAt" : "2016-08-17T06:02:17Z",
        "lastEditedBy" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba1a7860a34829755fd5adc9d0397c12adb8b2eb",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +105,109 @@  implicit def catsDataSemigroupKForEither[L]: SemigroupK[Either[L, ?]] =\n    new SemigroupK[Either[L, ?]] {\n      def combineK[A](x: Either[L, A], y: Either[L, A]): Either[L, A] = x match {\n        case Left(_) => y\n        case Right(_) => x"
  }
]