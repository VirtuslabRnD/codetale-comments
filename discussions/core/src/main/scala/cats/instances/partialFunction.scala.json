[
  {
    "id" : "5569c123-4a1d-4628-af53-de18471e1f6c",
    "prId" : 3392,
    "prUrl" : "https://github.com/typelevel/cats/pull/3392#pullrequestreview-394485459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6489179a-7d4c-4cc6-9dd3-306b54e0b679",
        "parentId" : null,
        "authorId" : "429eae10-8138-404f-b9b2-421bcdcf30be",
        "body" : "guess there's no better way",
        "createdAt" : "2020-04-16T10:06:06Z",
        "updatedAt" : "2020-06-12T11:59:18Z",
        "lastEditedBy" : "429eae10-8138-404f-b9b2-421bcdcf30be",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fd89272ba41cf5ed989c840262ce3076a8df80a",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +59,63 @@\n      override def compose[A, B, C](f: PartialFunction[B, C], g: PartialFunction[A, B]): PartialFunction[A, C] = {\n        case a if g.isDefinedAt(a) && f.isDefinedAt(g(a)) => f(g(a))\n      }\n    }"
  },
  {
    "id" : "a36e5b37-8636-4549-9126-baeaf6ec34d0",
    "prId" : 3392,
    "prUrl" : "https://github.com/typelevel/cats/pull/3392#pullrequestreview-423732424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b1de4fa-7c6e-426d-9d7a-3d5175ac2e2f",
        "parentId" : null,
        "authorId" : "6eab4df0-103c-4334-ab61-5d3e9aa43193",
        "body" : "Could this be ?\r\n```suggestion\r\n      override def lift[A, B](f: A => B): PartialFunction[A, B] = { case a => f(a) }\r\n```",
        "createdAt" : "2020-06-02T23:33:05Z",
        "updatedAt" : "2020-06-12T11:59:18Z",
        "lastEditedBy" : "6eab4df0-103c-4334-ab61-5d3e9aa43193",
        "tags" : [
        ]
      },
      {
        "id" : "89318d99-b249-4bb3-b820-464e79e8b064",
        "parentId" : "5b1de4fa-7c6e-426d-9d7a-3d5175ac2e2f",
        "authorId" : "429eae10-8138-404f-b9b2-421bcdcf30be",
        "body" : "yes, this works. \r\n\r\nI originally tried `{ case a: A => f(a) }` which led to this type erasure error-\r\n\r\n> [error] /Users/gagandeepkalra/IdeaProjects/cats/core/src/main/scala/cats/instances/partialFunction.scala:29:77: abstract type pattern A is unchecked since it is eliminated by erasure\r\n[error]       override def lift[A, B](f: A => B): PartialFunction[A, B] = { case a: A => f(a) }\r\n[error]    \r\n\r\nAs I understand adding `: A` introduces another type check (which is not possible because of erasure), but the function `{ case a => f(a) }` in itself type checks at compile team no runtime check needed?",
        "createdAt" : "2020-06-03T15:45:35Z",
        "updatedAt" : "2020-06-12T11:59:18Z",
        "lastEditedBy" : "429eae10-8138-404f-b9b2-421bcdcf30be",
        "tags" : [
        ]
      },
      {
        "id" : "b427a410-8cc3-47c7-bb2d-f20843e7ffd7",
        "parentId" : "5b1de4fa-7c6e-426d-9d7a-3d5175ac2e2f",
        "authorId" : "6eab4df0-103c-4334-ab61-5d3e9aa43193",
        "body" : "The only case I can think of that would break at runtime the assumption that `f` takes an `A` and that the `PartialFunction` map `A` to `B` is when cast is involved. But the fact that I don't see it doesn't mean it doesn't exist :). Happy to leave the check there. You can ignore my comment :).",
        "createdAt" : "2020-06-03T16:31:38Z",
        "updatedAt" : "2020-06-12T11:59:18Z",
        "lastEditedBy" : "6eab4df0-103c-4334-ab61-5d3e9aa43193",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fd89272ba41cf5ed989c840262ce3076a8df80a",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@      }\n\n      override def lift[A, B](f: A => B): PartialFunction[A, B] = { case a if a.isInstanceOf[A] => f(a) }\n\n      /**"
  }
]