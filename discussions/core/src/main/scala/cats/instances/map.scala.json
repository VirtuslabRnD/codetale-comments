[
  {
    "id" : "6f080899-6ebe-4de0-a3d1-a8d5afcb47a2",
    "prId" : 1324,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5bcefd0-9a6b-4590-988e-9c041cc2973d",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "why not `s\"...\"` here? Is + just as good? (compiled with a StringBuilder?)\n",
        "createdAt" : "2016-08-23T18:00:03Z",
        "updatedAt" : "2016-08-23T22:43:34Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "5e5204e4-debe-4f00-8449-43004eb4fedf",
        "parentId" : "c5bcefd0-9a6b-4590-988e-9c041cc2973d",
        "authorId" : "89a3e0e3-e301-4aa8-b150-74070eb5a619",
        "body" : "I thought the compiler would rewrite it to us a string builder, but maybe that's only Java? I can rewrite this using interpolation (it just ends up looking uglier IMO).\n",
        "createdAt" : "2016-08-23T18:08:23Z",
        "updatedAt" : "2016-08-23T22:43:34Z",
        "lastEditedBy" : "89a3e0e3-e301-4aa8-b150-74070eb5a619",
        "tags" : [
        ]
      }
    ],
    "commit" : "24e4de2f849faababbffa10943ef508d2642dd23",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +10,14 @@      def show(m: Map[A, B]): String =\n        m.iterator\n          .map { case (a, b) => showA.show(a) + \" -> \" + showB.show(b) }\n          .mkString(\"Map(\", \", \", \")\")\n    }"
  }
]