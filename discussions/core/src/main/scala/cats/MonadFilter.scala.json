[
  {
    "id" : "a0f34ce8-58ea-4958-a391-e624b50f5602",
    "prId" : 1225,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80cd655d-ff96-418a-9c5f-7c180a7273cf",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "It seems like a FunctorFilter had to have an empty value too. We could just filter everything from any value and get there, no?\n\nSeems like empty might almost be there.\n",
        "createdAt" : "2016-07-24T03:27:41Z",
        "updatedAt" : "2016-07-27T23:27:38Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "751177b2-6167-4828-a8ac-3fd15cfd0c08",
        "parentId" : "80cd655d-ff96-418a-9c5f-7c180a7273cf",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "> We could just filter everything from any value and get there, no?\n\nThat's true, but you would have to have a value to start with. With `Applicative` you have `pure` for that, but with `Functor` this isn't available.\n\nI was thinking about whether the `empty` from `MonadFilter` should be moved to `FunctorFilter` along with the `filter` method at first, but I think this constrains `FunctorFilter` more than we might want. For example, that would mean that the `FunctorFilter` instance for `OptionT[F, A]` would then require an `Applicative[F]` as opposed to the `Functor[F]` that it currently requires. And more generally, I think that what I have in this PR as a `composeFilter` method on `Functor` would need to instead be moved to `Applicative`.\n\nI think that if we were to add an `ApplicativeFilter`, _that_ would be the place to add the `def empty[A]: F[A]`. With `ApplicativeFilter`, you could even implement `empty` and `pure` in terms of each other (with help from `map`).\n\nAt this point I haven't added `ApplicativeFilter` because I didn't have a particularly compelling use-case for it and there's already a lot going on in this type class hierarchy. However, I should be able to add it if people have good use-cases for it.\n",
        "createdAt" : "2016-07-24T12:19:00Z",
        "updatedAt" : "2016-07-27T23:27:38Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a67c7f86f7de78af14540e481d70f0dccacb99c",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +12,16 @@@typeclass trait MonadFilter[F[_]] extends Monad[F] with FunctorFilter[F] {\n\n  def empty[A]: F[A]\n\n  override def mapFilter[A, B](fa: F[A])(f: A => Option[B]): F[B] ="
  }
]