[
  {
    "id" : "d95dc391-cd76-424c-8af2-dfd645eb1099",
    "prId" : 3893,
    "prUrl" : "https://github.com/typelevel/cats/pull/3893#pullrequestreview-671869895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e3fb519-3638-4c48-91fc-c074e2a26b96",
        "parentId" : null,
        "authorId" : "9e8a6a6c-6f4e-49b4-ab87-ee2c5ced7e78",
        "body" : "We can also eventually make this package private, shutting off the source access without breaking bincompat. We should wait a while though.",
        "createdAt" : "2021-05-30T22:30:22Z",
        "updatedAt" : "2021-05-30T22:30:27Z",
        "lastEditedBy" : "9e8a6a6c-6f4e-49b4-ab87-ee2c5ced7e78",
        "tags" : [
        ]
      }
    ],
    "commit" : "62672b55af8bd90bbd0b0ae99510f1aee043e0a4",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +227,231 @@  @noop\n  @deprecated(\"Dangerous method, use ifM (a flatMap) or ifF (a map) instead\", \"2.6.2\")\n  def ifA[A](fcond: F[Boolean])(ifTrue: F[A], ifFalse: F[A]): F[A] = {\n    def ite(b: Boolean)(ifTrue: A, ifFalse: A) = if (b) ifTrue else ifFalse\n    ap2(map(fcond)(ite))(ifTrue, ifFalse)"
  },
  {
    "id" : "285d0fec-2ca8-4a61-9695-6961a5f7f594",
    "prId" : 2827,
    "prUrl" : "https://github.com/typelevel/cats/pull/2827#pullrequestreview-233716541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f3a0c50-65a6-468a-9584-8cb92ca422bc",
        "parentId" : null,
        "authorId" : "2ed5d687-cc94-4d72-ba74-717be38944e9",
        "body" : "Light copy editing (spans lines, so I couldn't GitHub it):\r\n\r\n```\r\n   * This semigroup uses a product operation to combine `F`s.\r\n   * If the `Apply[F].product` results in larger `F` (i.e. when `F` is a `List`),\r\n   * accumulative usage of this instance, such as `combineAll`, will result in\r\n   * `F`s with exponentially increasing sizes.\r\n```",
        "createdAt" : "2019-05-03T18:59:06Z",
        "updatedAt" : "2019-05-04T01:32:01Z",
        "lastEditedBy" : "2ed5d687-cc94-4d72-ba74-717be38944e9",
        "tags" : [
        ]
      },
      {
        "id" : "a96c8110-6564-45e3-b515-aef43e60b173",
        "parentId" : "2f3a0c50-65a6-468a-9584-8cb92ca422bc",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "thanks!",
        "createdAt" : "2019-05-04T01:32:09Z",
        "updatedAt" : "2019-05-04T01:32:09Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfcf98c78d4c09da938c94d685d7863e9007cb10",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +222,226 @@   * If the `Apply[F].product` results in larger `F` (i.e. when `F` is a `List`),\n   * accumulative usage of this instance, such as `combineAll`, will result in\n   * `F`s with exponentially increasing sizes.\n   */\n  def semigroup[F[_], A](implicit f: Apply[F], sg: Semigroup[A]): Semigroup[F[A]] ="
  },
  {
    "id" : "cd16f0eb-3af9-4750-b14e-4d27e582d8ab",
    "prId" : 1955,
    "prUrl" : "https://github.com/typelevel/cats/pull/1955#pullrequestreview-67869461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cbfdc86-96bc-4b28-b4b7-638fe6fe5962",
        "parentId" : null,
        "authorId" : "240add12-1fe5-499a-918c-053b1f46b348",
        "body" : "This is untested because `<*` and `<<` were before this PR.",
        "createdAt" : "2017-10-08T21:28:24Z",
        "updatedAt" : "2017-10-09T17:44:07Z",
        "lastEditedBy" : "240add12-1fe5-499a-918c-053b1f46b348",
        "tags" : [
        ]
      }
    ],
    "commit" : "95ac1abc96fa11baabab4da2e187c509416fc75b",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +34,38 @@  /** Alias for [[forEffect]]. */\n  @inline final def <*[A, B](fa: F[A])(fb: F[B]): F[A] =\n    forEffect(fa)(fb)\n\n  /**"
  }
]