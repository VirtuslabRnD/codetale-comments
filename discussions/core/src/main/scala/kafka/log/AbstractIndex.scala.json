[
  {
    "id" : "b97410af-892d-423c-a2fb-70edc6582ccb",
    "prId" : 5346,
    "prUrl" : "https://github.com/apache/kafka/pull/5346#pullrequestreview-138808027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27a1e40e-affa-4e1d-9743-e9cc2e005add",
        "parentId" : null,
        "authorId" : "0c73d886-f3da-4107-8045-92d8e3c8fb75",
        "body" : "Standard notation for calculating midpoint is lo + (hi-lo)/2",
        "createdAt" : "2018-07-08T12:23:11Z",
        "updatedAt" : "2018-07-18T00:35:25Z",
        "lastEditedBy" : "0c73d886-f3da-4107-8045-92d8e3c8fb75",
        "tags" : [
        ]
      },
      {
        "id" : "d77e9e47-46cd-4ba9-8233-c71061c9387b",
        "parentId" : "27a1e40e-affa-4e1d-9743-e9cc2e005add",
        "authorId" : "665c5462-ea8e-43bf-b7bf-71d87f4a353d",
        "body" : "This line is copied from existing code. i didn't change it.",
        "createdAt" : "2018-07-09T19:37:09Z",
        "updatedAt" : "2018-07-18T00:35:25Z",
        "lastEditedBy" : "665c5462-ea8e-43bf-b7bf-71d87f4a353d",
        "tags" : [
        ]
      },
      {
        "id" : "1dce4c99-c903-4a64-9af9-614eef6667fd",
        "parentId" : "27a1e40e-affa-4e1d-9743-e9cc2e005add",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "It should be more efficient to use ints than floating point here, right?",
        "createdAt" : "2018-07-10T18:08:42Z",
        "updatedAt" : "2018-07-18T00:35:25Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "da0af80f-8b6c-4cff-aa07-336628832053",
        "parentId" : "27a1e40e-affa-4e1d-9743-e9cc2e005add",
        "authorId" : "665c5462-ea8e-43bf-b7bf-71d87f4a353d",
        "body" : "This is an existing line. I didn't touch it. If you want to improve it, you should create another pull request and move the discussion to the new pull request. Fixing this line has nothing to do with this ticket.",
        "createdAt" : "2018-07-10T20:36:05Z",
        "updatedAt" : "2018-07-18T00:35:25Z",
        "lastEditedBy" : "665c5462-ea8e-43bf-b7bf-71d87f4a353d",
        "tags" : [
        ]
      },
      {
        "id" : "a15cb447-b83e-4c91-a8cf-979a720618a6",
        "parentId" : "27a1e40e-affa-4e1d-9743-e9cc2e005add",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "OK.  I filed https://github.com/apache/kafka/pull/5378 to fix this.",
        "createdAt" : "2018-07-17T16:51:29Z",
        "updatedAt" : "2018-07-18T00:35:25Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "e2935780-ae43-4e97-90eb-5ee5d9cdf0ba",
        "parentId" : "27a1e40e-affa-4e1d-9743-e9cc2e005add",
        "authorId" : "93b1c273-8917-4547-bd53-5101f22161c0",
        "body" : "@ying-zheng because this is a trivial change and you are touching this line, I think we should change it to use the best implementation in this PR. More PRs is obviously more overhead for everyone involved. :-)",
        "createdAt" : "2018-07-19T01:18:20Z",
        "updatedAt" : "2018-07-19T01:18:21Z",
        "lastEditedBy" : "93b1c273-8917-4547-bd53-5101f22161c0",
        "tags" : [
        ]
      },
      {
        "id" : "804a574c-3e8e-4626-b46a-f1f67e3fac3e",
        "parentId" : "27a1e40e-affa-4e1d-9743-e9cc2e005add",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "I don't know if the change is that trivial.  We probably need to think a bit about overflow, rounding, etc.  It's fine for Ying Z. to push back a bit and ask us to do it in a separate PR.",
        "createdAt" : "2018-07-19T18:57:04Z",
        "updatedAt" : "2018-07-19T18:57:04Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf1a630449aca5d5ad0ec7670080d9205ab65004",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +375,379 @@      var hi = end\n      while(lo < hi) {\n        val mid = ceil(hi/2.0 + lo/2.0).toInt\n        val found = parseEntry(idx, mid)\n        val compareResult = compareIndexEntry(found, target, searchEntity)"
  },
  {
    "id" : "61c9f660-f5dd-47fe-aeba-f93f40590369",
    "prId" : 5346,
    "prUrl" : "https://github.com/apache/kafka/pull/5346#pullrequestreview-138443734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83f91b45-0c73-4d9c-96ec-8ead0c37bf82",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This maybe a bit confusing to readers: we did not set N to no larger than 8192, but we set N so that its num.bytes on the two types of index files is no larger than 8192, right?",
        "createdAt" : "2018-07-18T21:19:46Z",
        "updatedAt" : "2018-07-18T21:27:38Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "6ffdc8dc-b208-482a-90ae-d8e9f4ee5ceb",
        "parentId" : "83f91b45-0c73-4d9c-96ec-8ead0c37bf82",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Ditto below in the explanation, e.g. `We can't set make N (_warmEntries) to be larger than 8192`: we cannot set N too large so that the num.bytes gets bigger than 8KB.",
        "createdAt" : "2018-07-18T21:25:36Z",
        "updatedAt" : "2018-07-18T21:27:38Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf1a630449aca5d5ad0ec7670080d9205ab65004",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +87,91 @@   relatively small section, the pages containing this section are more likely to be in the page cache.\n\n   We set N (_warmEntries) to 8192, because\n   1. This number is small enough to guarantee all the pages of the \"warm\" section is touched in every warm-section\n      lookup. So that, the entire warm section is really \"warm\"."
  },
  {
    "id" : "fdf53f20-720b-46a9-8c81-33fbbff7622e",
    "prId" : 5346,
    "prUrl" : "https://github.com/apache/kafka/pull/5346#pullrequestreview-521895397",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f0023f0-bc9c-4b02-9440-2d93b021b889",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "nit: `8KB index corresponds to N = 4MB for offset index and N = 2.7MB for time index`.",
        "createdAt" : "2018-07-18T21:26:27Z",
        "updatedAt" : "2018-07-18T21:27:38Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "3866b412-e3e0-4fe2-858e-ae8a7fc29018",
        "parentId" : "0f0023f0-bc9c-4b02-9440-2d93b021b889",
        "authorId" : "bad43a41-2f3a-4742-829d-211e0ec305f7",
        "body" : "@ying-zheng @guozhangwang how to understand ?\r\n>8KB index corresponds to about 4MB (offset index) or 2.7MB (time index) log messages",
        "createdAt" : "2020-10-31T03:16:24Z",
        "updatedAt" : "2020-10-31T03:16:24Z",
        "lastEditedBy" : "bad43a41-2f3a-4742-829d-211e0ec305f7",
        "tags" : [
        ]
      },
      {
        "id" : "f2363eab-4dc3-461e-8b68-b6a8cdcb025a",
        "parentId" : "0f0023f0-bc9c-4b02-9440-2d93b021b889",
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "An offset index has 8 bytes per entry. So, 8KB offset index has 1K entries. Since by default, we add an index entry for every 4KB of messages, 8KB offset index corresponds to 1K * 4KB = 4MB of messages.\r\n\r\nA time index has 12 bytes per entry. So, the same calculation leads to 2.7MB of messages.",
        "createdAt" : "2020-11-02T18:33:42Z",
        "updatedAt" : "2020-11-02T18:33:42Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf1a630449aca5d5ad0ec7670080d9205ab65004",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +95,99 @@      SPARC, Power, ARM etc.).\n   2. This number is large enough to guarantee most of the in-sync lookups are in the warm-section. With default Kafka\n      settings, 8KB index corresponds to about 4MB (offset index) or 2.7MB (time index) log messages.\n\n   We can't set make N (_warmEntries) to be larger than 8192, as there is no simple way to guarantee all the \"warm\""
  },
  {
    "id" : "542b6e90-4e86-46e3-a231-a912a8b833cc",
    "prId" : 7452,
    "prUrl" : "https://github.com/apache/kafka/pull/7452#pullrequestreview-298926432",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "432c5832-bb66-434b-9a23-d3801338db5d",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Curious why are these piggy-backs added here?",
        "createdAt" : "2019-10-08T16:41:44Z",
        "updatedAt" : "2019-10-08T16:41:54Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "7491186e-71a1-43b4-afdf-340d657c6c94",
        "parentId" : "432c5832-bb66-434b-9a23-d3801338db5d",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "It was causing a spotBugs failure after the inlining.",
        "createdAt" : "2019-10-08T17:28:27Z",
        "updatedAt" : "2019-10-08T17:28:28Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "80bb3ab0fec5200463de98ecdc483643694616b5",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +406,410 @@  private def compareIndexEntry(indexEntry: IndexEntry, target: Long, searchEntity: IndexSearchEntity): Int = {\n    searchEntity match {\n      case IndexSearchType.KEY => java.lang.Long.compare(indexEntry.indexKey, target)\n      case IndexSearchType.VALUE => java.lang.Long.compare(indexEntry.indexValue, target)\n    }"
  },
  {
    "id" : "25c028ae-4bcc-4e2a-8612-cfd329977e56",
    "prId" : 8983,
    "prUrl" : "https://github.com/apache/kafka/pull/8983#pullrequestreview-443152209",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c73ec492-0983-48fe-ac9e-b638289f60a1",
        "parentId" : null,
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "#7387 added null check to ```forceUnmap``` rather than ```safeForceUnmap```. Which one makes sense? For another, ```forceUnmap``` is used by ```safeForceUnmap``` only. We can merge them so above question gets resolved.",
        "createdAt" : "2020-07-06T03:58:25Z",
        "updatedAt" : "2020-07-06T03:58:25Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "2d24e3ed-2091-4980-b9e5-aa6000463134",
        "parentId" : "c73ec492-0983-48fe-ac9e-b638289f60a1",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "This one and hence why I did it this way.",
        "createdAt" : "2020-07-06T04:33:41Z",
        "updatedAt" : "2020-07-06T04:33:41Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "81f1c1d9-a657-48d4-b86e-a8935e7f7dce",
        "parentId" : "c73ec492-0983-48fe-ac9e-b638289f60a1",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "To clarify, we do use `forceUnmap` directly in a test. It's difficult to test methods that swallow all exceptions and hence it's useful to have `forceUnmap` from that perspective.",
        "createdAt" : "2020-07-06T14:55:24Z",
        "updatedAt" : "2020-07-06T14:55:25Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a37ad7cde90a3c0be6ba936ca6e4180b1418ef81",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +312,316 @@\n  protected def safeForceUnmap(): Unit = {\n    if (mmap != null) {\n      try forceUnmap()\n      catch {"
  }
]