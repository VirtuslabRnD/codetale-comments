[
  {
    "id" : "b9ce99b2-183c-406d-b7c7-5e77d163dc5b",
    "prId" : 4503,
    "prUrl" : "https://github.com/apache/kafka/pull/4503#pullrequestreview-93231565",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70c9f21e-f595-449f-b5c1-7ca9b7ef246f",
        "parentId" : null,
        "authorId" : "915b2f67-05e6-4824-939a-398e7be58870",
        "body" : "looks like we are not doing valid config check.  I was able to add some random config. we are doing invalid config check for other types (topic, users)",
        "createdAt" : "2018-02-01T07:25:28Z",
        "updatedAt" : "2018-02-02T21:51:31Z",
        "lastEditedBy" : "915b2f67-05e6-4824-939a-398e7be58870",
        "tags" : [
        ]
      },
      {
        "id" : "bf7f82c3-368a-4292-9ee5-27d0e478e6a0",
        "parentId" : "70c9f21e-f595-449f-b5c1-7ca9b7ef246f",
        "authorId" : "915b2f67-05e6-4824-939a-398e7be58870",
        "body" : "just saw below comment at adminZkClient.validateBrokerConfig. Pls ignore above comment.\r\n\r\n\"Since broker configs may contain custom configs, the validation only verifies that the provided config does not contain any static configs.\"",
        "createdAt" : "2018-02-01T10:20:00Z",
        "updatedAt" : "2018-02-02T21:51:31Z",
        "lastEditedBy" : "915b2f67-05e6-4824-939a-398e7be58870",
        "tags" : [
        ]
      },
      {
        "id" : "14846414-2b0f-4453-af04-9a87b09b6245",
        "parentId" : "70c9f21e-f595-449f-b5c1-7ca9b7ef246f",
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "@omkreddy Thanks for the review. We allow custom configs for brokers (e.g. properties of metrics reporters). So we validate all broker configs and allow adding other custom configs.",
        "createdAt" : "2018-02-01T10:35:59Z",
        "updatedAt" : "2018-02-02T21:51:31Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c122527b6aac22323a62c3d084e3c2ba05689762",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +249,253 @@\n    val alterOptions = new AlterConfigsOptions().timeoutMs(30000).validateOnly(false)\n    adminClient.alterConfigs(Map(configResource -> newConfig).asJava, alterOptions).all().get(60, TimeUnit.SECONDS)\n\n    if (entityName.nonEmpty)"
  },
  {
    "id" : "44b9dab2-87f2-4589-9867-5375dd6583e0",
    "prId" : 4503,
    "prUrl" : "https://github.com/apache/kafka/pull/4503#pullrequestreview-93784030",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afa82de1-e306-4ab2-8fa2-1063ed9b57c7",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Looks like this is the first case where we pass admin client properties to a tool, so I'm wondering about the name. An alternative might be `admin-config` to make it's relation to the AdminClient a bit more obvious.",
        "createdAt" : "2018-02-02T07:04:34Z",
        "updatedAt" : "2018-02-02T21:51:31Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "45094ead-9446-4eab-bf4b-7c4cf383be18",
        "parentId" : "afa82de1-e306-4ab2-8fa2-1063ed9b57c7",
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "I had suggested `adminclient-config` for KIP-248 and later realized that `DelegationTokenCommand`, `ConsumerGroupCommand`, `BrokerApiVersionsCommand` and `DeleteRecordsCommand` use `--command-config`.",
        "createdAt" : "2018-02-02T21:56:26Z",
        "updatedAt" : "2018-02-02T21:56:26Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "7edc9b08-4984-4768-aa31-728f728a86e0",
        "parentId" : "afa82de1-e306-4ab2-8fa2-1063ed9b57c7",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Ok, guess the ship has sailed; \"command-config\" it is.",
        "createdAt" : "2018-02-02T23:07:41Z",
        "updatedAt" : "2018-02-02T23:07:41Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "c122527b6aac22323a62c3d084e3c2ba05689762",
    "line" : 212,
    "diffHunk" : "@@ -1,1 +404,408 @@      .describedAs(\"server to connect to\")\n      .ofType(classOf[String])\n    val commandConfigOpt = parser.accepts(\"command-config\", \"Property file containing configs to be passed to Admin Client. \" +\n      \"This is used only with --bootstrap-server option for describing and altering broker configs.\")\n      .withRequiredArg"
  },
  {
    "id" : "42a53c6a-ec97-4c6b-b7fc-787c1c7f142f",
    "prId" : 4898,
    "prUrl" : "https://github.com/apache/kafka/pull/4898#pullrequestreview-129226628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4dc2fb0-6857-4f02-80f2-fc1431de2479",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "This seems a little annoying from a user perspective. If we have to open the door for changing configs directly through zk, do we get much benefit from restricting its usage?",
        "createdAt" : "2018-04-23T16:54:15Z",
        "updatedAt" : "2018-06-18T17:21:49Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "b7c984b5-8007-4588-9b03-ea23b845e09b",
        "parentId" : "a4dc2fb0-6857-4f02-80f2-fc1431de2479",
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "@hachikuji Thanks for the review. For initial configuration of brokers, we don't do much validation. This feels reasonable since initial config from server.properties is only validated when broker starts up (broker fails to start with invalid config). The validation is slightly better with configs persisted in ZK since we can check the types etc. With dynamic configuration of a running broker, we do a lot more validation. For example, for keystore update, we can check that the file exists on the broker and is a valid store, but that can only be verified by the broker itself. For inter-broker keystore update, we can validate keystore against truststore. We could allow updating using ZK at any time and have the broker print out an error and not apply an invalid config. But since we are able to validate using AdminClient and the tool gives immediate feedback for invalid config, I thought it was better to restrict this for bootstrapping use only. ",
        "createdAt" : "2018-04-24T15:38:44Z",
        "updatedAt" : "2018-06-18T17:21:49Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "b3fabb40-4326-4430-9a93-6d05a6af18f1",
        "parentId" : "a4dc2fb0-6857-4f02-80f2-fc1431de2479",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Ok, that makes sense. Perhaps we can explain in the message that configuration through zookeeper is only permitted in order to bootstrap a broker? Maybe we should even mention the password use case?",
        "createdAt" : "2018-06-15T16:04:24Z",
        "updatedAt" : "2018-06-18T17:21:49Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3198bb34917bde4769b9b38ec13a1595233c9c1",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +122,126 @@      // Replication quota configs may be updated using ZK at any time. Other dynamic broker configs\n      // may be updated using ZooKeeper only if the corresponding broker is not running. Dynamic broker\n      // configs at cluster-default level may be configured using ZK only if there are no brokers running.\n      val dynamicBrokerConfigs = configsToBeAdded.asScala.keySet.filterNot(BrokerConfigsUpdatableUsingZooKeeperWhileBrokerRunning.contains)\n      if (dynamicBrokerConfigs.nonEmpty) {"
  },
  {
    "id" : "e238c033-3962-4fc6-9ef7-b94578ea469b",
    "prId" : 4956,
    "prUrl" : "https://github.com/apache/kafka/pull/4956#pullrequestreview-121886777",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83a50262-fca1-4dd5-b3b2-ceecd2523e89",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Can we add a comment explaining why the `-1` is needed here?",
        "createdAt" : "2018-05-21T17:53:22Z",
        "updatedAt" : "2018-06-05T08:53:36Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f31d21c17e690eeb44631100cb82f9cd284b2e7",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +180,184 @@      val configsToBeAdded = opts.options.valueOf(opts.addConfig)\n        .split(\",\" + pattern)\n        .map(_.split(\"\"\"\\s*=\\s*\"\"\" + pattern, -1))\n      require(configsToBeAdded.forall(config => config.length == 2), \"Invalid entity config: all configs to be added must be in the format \\\"key=val\\\".\")\n      //Create properties, parsing square brackets from values if necessary"
  },
  {
    "id" : "7b74c356-2c51-4baa-ad8d-f0751b79edc7",
    "prId" : 7607,
    "prUrl" : "https://github.com/apache/kafka/pull/7607#pullrequestreview-338313810",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b561aa3-bb7e-4b7b-af29-ef0c0b4179d2",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "The `describeAll` argument is no longer being used. Maybe we lost some logic when rebasing?",
        "createdAt" : "2020-01-03T23:12:45Z",
        "updatedAt" : "2020-01-29T02:32:16Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "80cb2d9c-09bc-4bcd-b8b3-ea6853abf214",
        "parentId" : "8b561aa3-bb7e-4b7b-af29-ef0c0b4179d2",
        "authorId" : "4124b4cc-1212-4380-9d69-ad40e3441433",
        "body" : "Yes unfortunately it did. Thanks @hachikuji for catching this. Will update shortly.",
        "createdAt" : "2020-01-03T23:21:33Z",
        "updatedAt" : "2020-01-29T02:32:16Z",
        "lastEditedBy" : "4124b4cc-1212-4380-9d69-ad40e3441433",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c2f36a16aec343ac95b476aee7c0f677131f133",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +392,396 @@  }\n\n  private def getConfig(adminClient: Admin, entityType: String, entityName: String, includeSynonyms: Boolean, describeAll: Boolean) = {\n    def validateBrokerId(): Unit = try entityName.toInt catch {\n      case _: NumberFormatException =>"
  },
  {
    "id" : "d3cd83c4-f0cd-4f43-a33b-4de350119cb7",
    "prId" : 7607,
    "prUrl" : "https://github.com/apache/kafka/pull/7607#pullrequestreview-350564761",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3efe7052-0526-4cd4-9b7a-4a8bc39751a7",
        "parentId" : null,
        "authorId" : "0c73d886-f3da-4107-8045-92d8e3c8fb75",
        "body" : "Since the user may not have seen the 'Only one of --bootstrap-server or --zookeeper' error above, it would be clearer to mention that zkConnectOpt should be dropped while adding '--bootstrap-server'",
        "createdAt" : "2020-01-30T03:32:04Z",
        "updatedAt" : "2020-01-30T03:32:04Z",
        "lastEditedBy" : "0c73d886-f3da-4107-8045-92d8e3c8fb75",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c2f36a16aec343ac95b476aee7c0f677131f133",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +665,669 @@\n      if (options.has(allOpt) && options.has(zkConnectOpt)) {\n        throw new IllegalArgumentException(s\"--bootstrap-server must be specified for --all\")\n      }\n"
  },
  {
    "id" : "a23e216b-0a36-4439-8057-b0abbc56e5e5",
    "prId" : 7667,
    "prUrl" : "https://github.com/apache/kafka/pull/7667#pullrequestreview-327012400",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aad4e1de-75cf-4b60-a726-d23eea750f3d",
        "parentId" : null,
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "I know this is an existing problem in the code, but I really think we should avoid overloading the meaning of the empty string to mean \"the default.\"  It's not very clear, and furthermore, we made the unfortunate decision to allow empty names in some cases.  For example empty consumer group names are valid. :(  Let's use a `List[Option[String]]` here to make it clear.",
        "createdAt" : "2019-11-22T19:17:12Z",
        "updatedAt" : "2019-11-22T19:17:32Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "a7e4ebda-4d3b-42eb-b7e7-93d52b52f78a",
        "parentId" : "aad4e1de-75cf-4b60-a726-d23eea750f3d",
        "authorId" : "98b12f1a-2624-4608-85a1-ec49503fd316",
        "body" : "Agreed, this would be much cleaner. The only concern I have is that this may break compatibility, e.g. --entity-type users --entity-name \"\" (double quotes) would resolve to the default user today, whereas with this change it'd resolve to the empty user name. If we continue to pass it along, then the formed ZK config path may be invalid/unexpected.\r\n\r\nI would consider leaving it as-is for ConfigCommand, and then the new API can be more intelligent about this sort of thing. Thoughts?",
        "createdAt" : "2019-11-25T17:34:08Z",
        "updatedAt" : "2019-11-25T17:34:08Z",
        "lastEditedBy" : "98b12f1a-2624-4608-85a1-ec49503fd316",
        "tags" : [
        ]
      },
      {
        "id" : "872dac83-5c23-4068-a0f4-22c28a8ff8db",
        "parentId" : "aad4e1de-75cf-4b60-a726-d23eea750f3d",
        "authorId" : "98b12f1a-2624-4608-85a1-ec49503fd316",
        "body" : "Ping - any thoughts/comments? BTW, you will need to integrate the PR since I don't have permissions.",
        "createdAt" : "2019-12-03T19:33:48Z",
        "updatedAt" : "2019-12-03T19:33:48Z",
        "lastEditedBy" : "98b12f1a-2624-4608-85a1-ec49503fd316",
        "tags" : [
        ]
      },
      {
        "id" : "2e121535-f5f8-4b76-888f-3c8c5cb707be",
        "parentId" : "aad4e1de-75cf-4b60-a726-d23eea750f3d",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "I guess we can kick the can down the road with regard to empty string handling.  We will have to tackle it when designing the client side quotas API, though (probably by forbidding empty strings for now...)",
        "createdAt" : "2019-12-04T17:10:49Z",
        "updatedAt" : "2019-12-04T17:10:49Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "354a4efa637dfc0068f41856cc50dda7f8d27628",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +452,456 @@      // Exactly one entity type and at-most one entity name expected for other entities\n      val name = entityNames.headOption match {\n        case Some(\"\") => Some(ConfigEntityName.Default)\n        case v => v\n      }"
  },
  {
    "id" : "1400a781-bc00-4dd6-9511-ad3c912dcc39",
    "prId" : 8056,
    "prUrl" : "https://github.com/apache/kafka/pull/8056#pullrequestreview-354843542",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5c3bfa9-1dbc-4253-8327-b82167b5d33c",
        "parentId" : null,
        "authorId" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "body" : "Can add \"Replaced by --bootstrap-server, REQUIRED unless --bootstrap-server is given.\" as per `PreferredReplicaLeaderElectionCommand`.  It might also be appropriate to add .requiredUnless(\"bootstrap-server\") after parser.accepts() as long as bootstrap-server is defined in the parser before zookeeper, as per https://jopt-simple.github.io/jopt-simple/apidocs/joptsimple/OptionSpecBuilder.html#requiredUnless-java.lang.String-java.lang.String...-\r\n\r\n```\r\nparser.accepts(\"zookeeper\", \"DEPRECATED...\").requiredUnless(\"bootstrap-server\")\r\n```",
        "createdAt" : "2020-02-06T22:11:32Z",
        "updatedAt" : "2020-02-08T00:00:18Z",
        "lastEditedBy" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "tags" : [
        ]
      },
      {
        "id" : "a181f037-4d97-433b-85a1-a871d18febaf",
        "parentId" : "e5c3bfa9-1dbc-4253-8327-b82167b5d33c",
        "authorId" : "0437327f-f1bc-4c4a-b258-4c8dd6851ac9",
        "body" : "Thanks for the suggestion @rondagostino, not very familiar with Scala so this is good to know :). Just so I'm clear here, the addition of `.requiredUnless(\"bootstrap-server\")` would look something like this?\r\n```scala\r\n    val bootstrapServerOpt = parser.accepts(\"bootstrap-server\", \"The Kafka server to connect to. \" +\r\n      \"This is required for describing and altering broker configs.\")\r\n      .withRequiredArg\r\n      .describedAs(\"server to connect to\")\r\n      .ofType(classOf[String])\r\n    val zkConnectOpt = parser.accepts(\"zookeeper\", \"DEPRECATED. The connection string for the zookeeper connection in the form host:port. \" +\r\n      \"Multiple URLS can be given to allow fail-over. Replaced by --bootstrap-server, REQUIRED unless --bootstrap-server is given.\")\r\n      .requiredUnless(\"bootstrap-server\")\r\n      .withRequiredArg\r\n      .describedAs(\"urls\")\r\n      .ofType(classOf[String])\r\n```",
        "createdAt" : "2020-02-06T22:21:37Z",
        "updatedAt" : "2020-02-08T00:00:18Z",
        "lastEditedBy" : "0437327f-f1bc-4c4a-b258-4c8dd6851ac9",
        "tags" : [
        ]
      },
      {
        "id" : "0364c10d-7e22-4c57-bcbc-329da5d847af",
        "parentId" : "e5c3bfa9-1dbc-4253-8327-b82167b5d33c",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "I agree that it's a good idea to suggest using --bootstrap-server instead.  I'm not sure we need to use `requireUnless`, since I think that the argument parsing code already handles this",
        "createdAt" : "2020-02-06T22:30:36Z",
        "updatedAt" : "2020-02-08T00:00:18Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "af006892-cfab-414c-a1ea-d1d9e84cba4e",
        "parentId" : "e5c3bfa9-1dbc-4253-8327-b82167b5d33c",
        "authorId" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "body" : "Yes, I believe that is correct.  You could also add a test to make sure the command fails if neither are given (there may be a test for that already, but I didn't see it upon looking quickly).  Such a test should already pass if it exists or if you add one, and then having it would be good if you add the .requiredUnless(\"bootstrap-server\").  You could also add a test to make sure the command fails if both options are given.  I thunk you would have to add new logic for that, though I'm not sure.  Adding a test for it would probably be straightforward and a good idea.",
        "createdAt" : "2020-02-06T22:31:21Z",
        "updatedAt" : "2020-02-08T00:00:18Z",
        "lastEditedBy" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "tags" : [
        ]
      },
      {
        "id" : "05a58972-1ee9-4131-a899-aaec836a847f",
        "parentId" : "e5c3bfa9-1dbc-4253-8327-b82167b5d33c",
        "authorId" : "0437327f-f1bc-4c4a-b258-4c8dd6851ac9",
        "body" : "@cmccabe is correct, in the code here: https://github.com/apache/kafka/blob/8a7db5a595d4acd515aedfe118bb1205f2356f9f/core/src/main/scala/kafka/admin/ConfigCommand.scala#L663-L666 It checks that only 1 option is specified, and if 0 or both options are specified, it throws the appropriate exception. In this case then it might be redundant to have a `requireUnless` here. I will update the help statement as suggested and push.",
        "createdAt" : "2020-02-06T23:14:13Z",
        "updatedAt" : "2020-02-08T00:00:18Z",
        "lastEditedBy" : "0437327f-f1bc-4c4a-b258-4c8dd6851ac9",
        "tags" : [
        ]
      },
      {
        "id" : "49d43886-e16e-42fc-b2fe-60dcef57ecdc",
        "parentId" : "e5c3bfa9-1dbc-4253-8327-b82167b5d33c",
        "authorId" : "0437327f-f1bc-4c4a-b258-4c8dd6851ac9",
        "body" : "@rondagostino There also seems to be a test for invalid args (if neither bootstrap servers or zk is specified here:\r\n\r\nhttps://github.com/apache/kafka/blob/8a7db5a595d4acd515aedfe118bb1205f2356f9f/core/src/test/scala/unit/kafka/admin/ConfigCommandTest.scala#L48-L50",
        "createdAt" : "2020-02-06T23:25:01Z",
        "updatedAt" : "2020-02-08T00:00:18Z",
        "lastEditedBy" : "0437327f-f1bc-4c4a-b258-4c8dd6851ac9",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a13f714574ed9a4369e09208cfd05e159ffbe4f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +538,542 @@  class ConfigCommandOptions(args: Array[String]) extends CommandDefaultOptions(args) {\n\n    val zkConnectOpt = parser.accepts(\"zookeeper\", \"DEPRECATED. The connection string for the zookeeper connection in the form host:port. \" +\n            \"Multiple URLS can be given to allow fail-over. Replaced by --bootstrap-server, REQUIRED unless --bootstrap-server is given.\")\n            .withRequiredArg"
  },
  {
    "id" : "a630a4df-b250-4cce-b7bd-f4085c0b5572",
    "prId" : 8229,
    "prUrl" : "https://github.com/apache/kafka/pull/8229#pullrequestreview-369729515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b18a0ab-45b1-4fb5-b00a-b60de4f7ebb7",
        "parentId" : null,
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "Is this visibility just for testing?",
        "createdAt" : "2020-03-05T16:00:52Z",
        "updatedAt" : "2020-03-05T16:36:13Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      },
      {
        "id" : "5b562917-e49f-4cc1-9e0c-64d48508293e",
        "parentId" : "3b18a0ab-45b1-4fb5-b00a-b60de4f7ebb7",
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "yes, the alterConfigs method above this had the same visibility too for the same reason.",
        "createdAt" : "2020-03-05T16:39:03Z",
        "updatedAt" : "2020-03-05T16:39:03Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9e39ed95cbad83b81ebbd2e1712d6497b8e0aa4",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +368,372 @@  }\n\n  private[admin] def describeConfig(adminClient: Admin, opts: ConfigCommandOptions): Unit = {\n    val entityType = opts.entityTypes.head\n    val entityName = opts.entityNames.headOption"
  },
  {
    "id" : "2babc1e1-aa89-47e6-8917-428a56ecba87",
    "prId" : 8229,
    "prUrl" : "https://github.com/apache/kafka/pull/8229#pullrequestreview-369696901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "978d1929-caa8-4742-a752-23fad82a8849",
        "parentId" : null,
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "I was going to ask about unused linter warnings to catch bugs like this, but turns out we have a problem in our build. Filed https://issues.apache.org/jira/browse/KAFKA-9665",
        "createdAt" : "2020-03-05T16:02:04Z",
        "updatedAt" : "2020-03-05T16:36:13Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9e39ed95cbad83b81ebbd2e1712d6497b8e0aa4",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +427,431 @@\n    val configResource = new ConfigResource(configResourceType, entityName)\n    val describeOptions = new DescribeConfigsOptions().includeSynonyms(includeSynonyms)\n    val configs = adminClient.describeConfigs(Collections.singleton(configResource), describeOptions)\n      .all.get(30, TimeUnit.SECONDS)"
  },
  {
    "id" : "7b50f8cd-68dd-4fe4-ae9f-e01604827516",
    "prId" : 8628,
    "prUrl" : "https://github.com/apache/kafka/pull/8628#pullrequestreview-408577230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31867d22-590f-4c47-a900-07704340878c",
        "parentId" : null,
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "It's not really that they're invalid, it's that we want to delete them and they're not present, right?  I realize this is an existing issue.",
        "createdAt" : "2020-05-07T23:52:15Z",
        "updatedAt" : "2020-05-08T17:25:29Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "c830eac7-1dbc-4f13-8ab1-1d95521e5bb9",
        "parentId" : "31867d22-590f-4c47-a900-07704340878c",
        "authorId" : "98b12f1a-2624-4608-85a1-ec49503fd316",
        "body" : "That's correct. I can rename the variable for the various cases if you'd prefer.",
        "createdAt" : "2020-05-07T23:56:22Z",
        "updatedAt" : "2020-05-08T17:25:29Z",
        "lastEditedBy" : "98b12f1a-2624-4608-85a1-ec49503fd316",
        "tags" : [
        ]
      },
      {
        "id" : "3aab4f74-9f2e-492d-9d90-5a1edd2b200e",
        "parentId" : "31867d22-590f-4c47-a900-07704340878c",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "It's OK as-is.",
        "createdAt" : "2020-05-08T23:24:53Z",
        "updatedAt" : "2020-05-08T23:24:53Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "12a91f3ca2cb2c6bcc9b08cf5c5b68640b3bdd50",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +367,371 @@\n        val invalidConfigs = configsToBeDeleted.filterNot(oldConfig.contains)\n        if (invalidConfigs.nonEmpty)\n          throw new InvalidConfigurationException(s\"Invalid config(s): ${invalidConfigs.mkString(\",\")}\")\n"
  },
  {
    "id" : "32f0be33-2388-448a-b3ef-5b8dfe9a6bda",
    "prId" : 8675,
    "prUrl" : "https://github.com/apache/kafka/pull/8675#pullrequestreview-413058355",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aef2a620-ceef-49a2-9e1d-aaac908417a2",
        "parentId" : null,
        "authorId" : "98b12f1a-2624-4608-85a1-ec49503fd316",
        "body" : "Please substitute `\"\"` for `BrokerDefaultEntityName` in the `match` below, as well as in `getResourceConfig`.",
        "createdAt" : "2020-05-15T14:20:58Z",
        "updatedAt" : "2020-05-16T08:10:29Z",
        "lastEditedBy" : "98b12f1a-2624-4608-85a1-ec49503fd316",
        "tags" : [
        ]
      },
      {
        "id" : "bdc037f1-9633-47fd-b536-94e307510923",
        "parentId" : "aef2a620-ceef-49a2-9e1d-aaac908417a2",
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "Thanks @bdbyrne . Good suggestion. I've updated it in this commit https://github.com/apache/kafka/pull/8675/commits/83cc2328099ef1424c3cea492156bd4a82f3fe65. Thank you.",
        "createdAt" : "2020-05-16T08:15:15Z",
        "updatedAt" : "2020-05-16T08:15:15Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      }
    ],
    "commit" : "83cc2328099ef1424c3cea492156bd4a82f3fe65",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +426,430 @@          adminClient.listTopics(new ListTopicsOptions().listInternal(true)).names().get().asScala.toSeq\n        case ConfigType.Broker | BrokerLoggerConfigType =>\n          adminClient.describeCluster(new DescribeClusterOptions()).nodes().get().asScala.map(_.idString).toSeq :+ BrokerDefaultEntityName\n      })\n"
  },
  {
    "id" : "1ef64e7f-bab6-4106-a457-eefcb75d4c37",
    "prId" : 9032,
    "prUrl" : "https://github.com/apache/kafka/pull/9032#pullrequestreview-461234352",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2feb4eef-2127-4396-893f-84a98bf7d96e",
        "parentId" : null,
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "it would be good to split this off into its own function (after verifying that we weren't trying to do both SCRAM + quota) or multiple entity names",
        "createdAt" : "2020-08-04T23:04:48Z",
        "updatedAt" : "2020-09-02T17:54:03Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "04a882b1794f90bbe002f460803cda9a2beebccc",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +396,400 @@          alterQuotaConfigs(adminClient, entityTypes, entityNames, configsToBeAddedMap, configsToBeDeleted)\n        } else {\n          // handle altering user SCRAM credential configs\n          if (entityNames.size != 1)\n            // should never happen, if we get here then it is a bug"
  }
]