[
  {
    "id" : "85c5ad0b-4c42-4b51-b49e-ccf9d68b2f56",
    "prId" : 9409,
    "prUrl" : "https://github.com/apache/kafka/pull/9409#pullrequestreview-507647964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6803f250-773c-49fe-94df-7f20a530a276",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Is the `\\n` necessary?",
        "createdAt" : "2020-10-12T17:44:27Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "1d831ebf-f9b8-4100-a32f-3cdd4db6bfd9",
        "parentId" : "6803f250-773c-49fe-94df-7f20a530a276",
        "authorId" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "body" : "Yeah, it provides a separation between the regular o/p and the error.",
        "createdAt" : "2020-10-13T16:55:30Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e568285c314102b9e4f7351badfcdf73a5c5a53",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +62,66 @@\n  private def printException(exception: Throwable): Unit = {\n    System.err.println(\"\\nError encountered when executing command: \" + Utils.stackTrace(exception))\n  }\n}"
  },
  {
    "id" : "4c631a35-e7c6-4257-90f3-925513b695f4",
    "prId" : 9409,
    "prUrl" : "https://github.com/apache/kafka/pull/9409#pullrequestreview-507651498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72989eed-8748-4ab8-ab12-0bfd19bc6ba4",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "I feel we don't need the `has` prefix for all the options, which seem not matching with the conventions by looking at examples as `CofnigCommand.scala`",
        "createdAt" : "2020-10-12T17:46:53Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "d3e42fbb-a834-440a-b617-4eae60c6aa5a",
        "parentId" : "72989eed-8748-4ab8-ab12-0bfd19bc6ba4",
        "authorId" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "body" : "This convention is used in `TopicCommand.scala`. See: https://github.com/apache/kafka/blob/trunk/core/src/main/scala/kafka/admin/TopicCommand.scala#L698-L702",
        "createdAt" : "2020-10-13T16:59:39Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e568285c314102b9e4f7351badfcdf73a5c5a53",
    "line" : 360,
    "diffHunk" : "@@ -1,1 +358,362 @@  def has(builder: OptionSpec[_]): Boolean = options.has(builder)\n\n  def hasDescribeOption: Boolean = has(describeOpt)\n\n  def hasFromControllerOption: Boolean = has(fromControllerOpt)"
  },
  {
    "id" : "b7d2b181-0f2c-4494-a5bd-705f5e61f32a",
    "prId" : 9409,
    "prUrl" : "https://github.com/apache/kafka/pull/9409#pullrequestreview-506868518",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3164e2b-eb9f-4d5b-9750-32f5a69a187f",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "A random thought I have is that since describe/upgrade/downgrade are mutually-exclusive, we could define one flag like `--action` and pass in the different options as strings to translate the an enum matching scenario.",
        "createdAt" : "2020-10-12T17:49:31Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "5d9647af-91c5-4999-af04-8eb81fd02083",
        "parentId" : "c3164e2b-eb9f-4d5b-9750-32f5a69a187f",
        "authorId" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "body" : "@abbccdda How do you envision the proposed `--action` flag for the advanced CLI scenarios where we would want to allow for `--upgrade`, `--downgrade` and `--delete` options as part of the same CLI command? Please [see this section](https://cwiki.apache.org/confluence/display/KAFKA/KIP-584%3A+Versioning+scheme+for+features#KIP584:Versioningschemeforfeatures-AdvancedCLItoolusage) of the KIP. As such, the existing technique allows us to support the advanced CLI facilities in the future.\r\n",
        "createdAt" : "2020-10-12T19:36:52Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e568285c314102b9e4f7351badfcdf73a5c5a53",
    "line" : 366,
    "diffHunk" : "@@ -1,1 +364,368 @@  def hasDryRunOption: Boolean = has(dryRunOpt)\n\n  def hasUpgradeAllOption: Boolean = has(upgradeAllOpt)\n\n  def hasDowngradeAllOption: Boolean = has(downgradeAllOpt)"
  },
  {
    "id" : "441efd35-fc9d-4cb0-a61e-adc202789d47",
    "prId" : 9409,
    "prUrl" : "https://github.com/apache/kafka/pull/9409#pullrequestreview-507875113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66fcc483-35d3-4242-9e84-e6ab48299653",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Could we just log a warning in this case instead of failing?",
        "createdAt" : "2020-10-12T17:52:09Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "51ee0963-f2da-4092-96b6-49edebaaeb6c",
        "parentId" : "66fcc483-35d3-4242-9e84-e6ab48299653",
        "authorId" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "body" : "What do we lose by making a stricter check? This is not the expected usage of the command, and therefore it should be disallowed. ",
        "createdAt" : "2020-10-13T17:02:33Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "tags" : [
        ]
      },
      {
        "id" : "6f8f6a49-02f2-410e-85e9-dde15bb3a521",
        "parentId" : "66fcc483-35d3-4242-9e84-e6ab48299653",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "I just don't see it hinders the command to succeed, which means it's an ignorable property. Anyway, I'm not insisting either. ",
        "createdAt" : "2020-10-13T18:00:54Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "65c832ca-4a90-4cb8-81a8-ed2241b6a5b0",
        "parentId" : "66fcc483-35d3-4242-9e84-e6ab48299653",
        "authorId" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "body" : "Sounds good. I'll mark this resolved since you don't feel strongly about t.",
        "createdAt" : "2020-10-13T22:33:51Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e568285c314102b9e4f7351badfcdf73a5c5a53",
    "line" : 393,
    "diffHunk" : "@@ -1,1 +391,395 @@        \"Command can contain --dry-run option only when either --upgrade-all or --downgrade-all actions are provided.\")\n    }\n    if (hasFromControllerOption && !hasDescribeOption) {\n      CommandLineUtils.printUsageAndDie(\n        parser,"
  },
  {
    "id" : "56188597-4cee-40ee-8e0b-f033a14e8ff5",
    "prId" : 9409,
    "prUrl" : "https://github.com/apache/kafka/pull/9409#pullrequestreview-507654047",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6f38f57-8b35-443b-8416-ec28b741a64c",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "I'm not sure the exception thrown here is necessary since we already printed out the result, is this just for testing purpose?",
        "createdAt" : "2020-10-12T17:57:21Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "1a760b44-8726-4815-8405-ced6c030eb66",
        "parentId" : "b6f38f57-8b35-443b-8416-ec28b741a64c",
        "authorId" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "body" : "Done. Good point. This is fixed now, as we are no longer printing exception from within `FeatureCommand.main`. Yes, the exception as such is useful for testing too.",
        "createdAt" : "2020-10-13T17:02:55Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e568285c314102b9e4f7351badfcdf73a5c5a53",
    "line" : 294,
    "diffHunk" : "@@ -1,1 +292,296 @@          }\n      }.sum\n      if (failures > 0) {\n        throw new UpdateFeaturesException(s\"$failures feature updates failed!\")\n      }"
  },
  {
    "id" : "04c0d40a-6f1a-413e-b099-b666493e67a4",
    "prId" : 9409,
    "prUrl" : "https://github.com/apache/kafka/pull/9409#pullrequestreview-507655082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9760170-c943-4085-a480-1ba5db599672",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Why do we need to sort the features?",
        "createdAt" : "2020-10-12T18:02:38Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "53b2556b-0a9b-4a93-91f6-5c4eac2e93c7",
        "parentId" : "d9760170-c943-4085-a480-1ba5db599672",
        "authorId" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "body" : "It is easy to compare command outputs when they are sorted based on feature names. Also, it is easier to write unit/integration tests when the output is uniform.",
        "createdAt" : "2020-10-13T17:04:14Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e568285c314102b9e4f7351badfcdf73a5c5a53",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +113,117 @@    val features = result.supportedFeatures.asScala.keys.toSet ++ result.finalizedFeatures.asScala.keys.toSet\n\n    features.toList.sorted.foreach {\n      feature =>\n        val output = new StringBuilder()"
  },
  {
    "id" : "a3f40636-f6bc-401a-a1c7-25276f526f6f",
    "prId" : 9409,
    "prUrl" : "https://github.com/apache/kafka/pull/9409#pullrequestreview-510809722",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f300ef51-9551-4650-85b7-75efa490fc44",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "If we hit ExecutionException and the exception has a cause, the wrapper ExecutionException is not really relevant and we should just print the cause. See TopicCommand as a reference. ",
        "createdAt" : "2020-10-16T20:05:50Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "2bb5e38d-eaf8-4ccb-8582-59f13357339d",
        "parentId" : "f300ef51-9551-4650-85b7-75efa490fc44",
        "authorId" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "body" : "Done. Great point!",
        "createdAt" : "2020-10-16T21:31:32Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e568285c314102b9e4f7351badfcdf73a5c5a53",
    "line" : 290,
    "diffHunk" : "@@ -1,1 +288,292 @@              1\n            case e: Throwable =>\n              println(updateStr + \"\\tResult: FAILED due to \" + e)\n              1\n          }"
  },
  {
    "id" : "6b3173ac-c734-4726-a627-3f6130a76428",
    "prId" : 9409,
    "prUrl" : "https://github.com/apache/kafka/pull/9409#pullrequestreview-510809757",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b031aa3-07c2-4c7a-b428-2d99730bf891",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "It seems that we can hit ExecutionException through describeFeatures. We want to handle it properly too.",
        "createdAt" : "2020-10-16T20:10:12Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "6c768dd5-1470-4255-b9b5-b43493a966ff",
        "parentId" : "0b031aa3-07c2-4c7a-b428-2d99730bf891",
        "authorId" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "body" : "Done.",
        "createdAt" : "2020-10-16T21:31:36Z",
        "updatedAt" : "2020-10-16T22:32:32Z",
        "lastEditedBy" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e568285c314102b9e4f7351badfcdf73a5c5a53",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +52,56 @@        printException(cause)\n        exitCode = 1\n      case e: Throwable =>\n        printException(e)\n        exitCode = 1"
  }
]