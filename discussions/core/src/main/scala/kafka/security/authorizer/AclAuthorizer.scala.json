[
  {
    "id" : "9a03da0c-b77b-4656-8d15-6ac52c17451f",
    "prId" : 7911,
    "prUrl" : "https://github.com/apache/kafka/pull/7911#pullrequestreview-340538527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84631594-fce2-4b8f-b75a-91d1ea6461b4",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Another thing to consider for a separate PR: this method seems highly inefficient. We take _all_ the keys in the cache and do a bunch of transformations. It seems like we should avoid that, no? Intuitively, we would do a filter operation first and then transform only the cache items that match.",
        "createdAt" : "2020-01-09T13:24:38Z",
        "updatedAt" : "2020-01-09T13:24:38Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "374e3bec-7d06-4de3-88e8-2c7a0b59b624",
        "parentId" : "84631594-fce2-4b8f-b75a-91d1ea6461b4",
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "I will do https://issues.apache.org/jira/browse/KAFKA-8847 first to remove references to the old classes and deprecate those. And that would avoid a lot of the unnecessary conversions. I can see if more can be done to improve this in the same PR.",
        "createdAt" : "2020-01-09T13:43:49Z",
        "updatedAt" : "2020-01-09T13:43:50Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "bdcea45f-1719-4653-92a2-5276a68dce60",
        "parentId" : "84631594-fce2-4b8f-b75a-91d1ea6461b4",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Sounds good.",
        "createdAt" : "2020-01-09T14:01:03Z",
        "updatedAt" : "2020-01-09T14:01:03Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac83288aaa1dbd164b088ca140d12b23d4608b19",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +191,195 @@      // Find all potentially matching resource patterns from the provided filters and ACL cache and apply the filters\n      val resources = aclCache.keys ++ filters.map(_._1.patternFilter).filter(_.matchesAtMostOne).flatMap(filterToResources)\n      val resourcesToUpdate = resources.map { resource =>\n        val matchingFilters = filters.filter { case (filter, _) =>\n          filter.patternFilter.matches(resource.toPattern)"
  },
  {
    "id" : "00594927-b0b1-4a99-a0eb-9c12ddfbf38e",
    "prId" : 8769,
    "prUrl" : "https://github.com/apache/kafka/pull/8769#pullrequestreview-421861976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68c40112-d267-4893-a31d-f14d167bbaa0",
        "parentId" : null,
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "Should it need comment to remind reader that this style is for optimization.",
        "createdAt" : "2020-06-01T09:08:11Z",
        "updatedAt" : "2020-06-01T13:55:05Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "2e1145ed-7bb9-4b9a-9ff2-5971da0fa408",
        "parentId" : "68c40112-d267-4893-a31d-f14d167bbaa0",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "I think this is obvious, no? `find` should generally short-circuit and not go through all the items. That's how it works for all collection implementations\r\n\r\nI think this kind of comment makes sense in `matchingAcls` where I added one.",
        "createdAt" : "2020-06-01T13:50:44Z",
        "updatedAt" : "2020-06-01T13:55:05Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "cb3cfc48-a880-46b5-b126-bdb5927742cf",
        "parentId" : "68c40112-d267-4893-a31d-f14d167bbaa0",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "@chia7712 I looked at the code again and I guess the intent may not be clear. I added a comment that hopefully clarifies.",
        "createdAt" : "2020-06-01T13:55:29Z",
        "updatedAt" : "2020-06-01T13:55:50Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "100a645188fcba815a7e1180bdc7de5cb070c250",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +66,70 @@\n  class AclSeqs(seqs: Seq[AclEntry]*) {\n    def find(p: AclEntry => Boolean): Option[AclEntry] = {\n      // Lazily iterate through the inner `Seq` elements and stop as soon as we find a match\n      val it = seqs.iterator.flatMap(_.find(p))"
  },
  {
    "id" : "bb760526-77ee-4930-babe-276a3d531314",
    "prId" : 8931,
    "prUrl" : "https://github.com/apache/kafka/pull/8931#pullrequestreview-438243983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5d7d965-7726-41da-86ab-52b07efb4c7e",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "This avoids the `tuple` creation.",
        "createdAt" : "2020-06-26T12:12:43Z",
        "updatedAt" : "2020-06-26T12:12:44Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "261ab95d14bbc7d88b6d57f5ad291351eed91e0b",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +551,555 @@  private def updateCache(resource: ResourcePattern, versionedAcls: VersionedAcls): Unit = {\n    if (versionedAcls.acls.nonEmpty) {\n      aclCache = aclCache.updated(resource, versionedAcls)\n    } else {\n      aclCache -= resource"
  },
  {
    "id" : "1368325c-e7f4-4733-ac48-f5b45bdb1ac4",
    "prId" : 8931,
    "prUrl" : "https://github.com/apache/kafka/pull/8931#pullrequestreview-438244685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e2d3d39-de19-4b9f-a3cb-8066d176491a",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "The behavior of `&` was changed so that both conditions have to evaluate to true for a warning to match the exclusion.",
        "createdAt" : "2020-06-26T12:14:02Z",
        "updatedAt" : "2020-06-26T12:14:02Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "261ab95d14bbc7d88b6d57f5ad291351eed91e0b",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +369,373 @@\n  @nowarn(\"cat=deprecation\")\n  @nowarn(\"cat=optimizer\")\n  private def matchingAcls(resourceType: ResourceType, resourceName: String): AclSeqs = {\n    // this code is performance sensitive, make sure to run AclAuthorizerBenchmark after any changes"
  },
  {
    "id" : "7b168891-21e7-4b92-8c47-d9bc14a124a8",
    "prId" : 8931,
    "prUrl" : "https://github.com/apache/kafka/pull/8931#pullrequestreview-438244970",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc1b26c5-cb12-4a47-8e2e-74d0b4cdcb58",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "New warning flagged by the compiler.",
        "createdAt" : "2020-06-26T12:14:33Z",
        "updatedAt" : "2020-06-26T12:14:34Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "261ab95d14bbc7d88b6d57f5ad291351eed91e0b",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +540,544 @@  }\n\n  @nowarn(\"cat=optimizer\")\n  private def getAclsFromCache(resource: ResourcePattern): VersionedAcls = {\n    aclCache.getOrElse(resource, throw new IllegalArgumentException(s\"ACLs do not exist in the cache for resource $resource\"))"
  },
  {
    "id" : "99b6fc34-e8a9-4db7-b0dd-2999ac960042",
    "prId" : 9485,
    "prUrl" : "https://github.com/apache/kafka/pull/9485#pullrequestreview-555068555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d064ee77-0f31-4e95-a0d9-66d98b82f871",
        "parentId" : null,
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "`PatternType.UNKNOWN` looks odd in audit logs, `ANY` may be better.",
        "createdAt" : "2020-12-17T18:53:16Z",
        "updatedAt" : "2020-12-18T13:57:43Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "21c80b38-ec0d-4380-a819-973c15045ae3",
        "parentId" : "d064ee77-0f31-4e95-a0d9-66d98b82f871",
        "authorId" : "bb605074-6b7c-47bc-9e2f-a760f7e44ad8",
        "body" : "```\r\n    public ResourcePattern(ResourceType resourceType, String name, PatternType patternType) {\r\n        this.resourceType = Objects.requireNonNull(resourceType, \"resourceType\");\r\n        this.name = Objects.requireNonNull(name, \"name\");\r\n        this.patternType = Objects.requireNonNull(patternType, \"patternType\");\r\n\r\n        if (resourceType == ResourceType.ANY) {\r\n            throw new IllegalArgumentException(\"resourceType must not be ANY\");\r\n        }\r\n\r\n        if (patternType == PatternType.MATCH || patternType == PatternType.ANY) {\r\n            throw new IllegalArgumentException(\"patternType must not be \" + patternType);\r\n        }\r\n    }\r\n```\r\n\r\nI think the ResourcePattern constructor is preventing us passing PatternType.ANY. It's only usable with Filter.",
        "createdAt" : "2020-12-17T23:26:46Z",
        "updatedAt" : "2020-12-18T13:57:43Z",
        "lastEditedBy" : "bb605074-6b7c-47bc-9e2f-a760f7e44ad8",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd620f4cc70d09def9304904e7fcf020fd1c406e",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +325,329 @@    val principalStr = principal.toString\n    val host = requestContext.clientAddress().getHostAddress\n    val action = new Action(op, new ResourcePattern(resourceType, \"NONE\", PatternType.UNKNOWN), 0, true, true)\n\n    val denyLiterals = matchingResources("
  }
]