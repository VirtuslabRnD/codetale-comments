[
  {
    "id" : "554ba59b-b4bf-40ee-a695-e9c4544b033f",
    "prId" : 4351,
    "prUrl" : "https://github.com/apache/kafka/pull/4351#pullrequestreview-85251105",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb1c6111-1cb9-4355-a1b6-a7e547727211",
        "parentId" : null,
        "authorId" : "915b2f67-05e6-4824-939a-398e7be58870",
        "body" : "nit: typo \"borker\"",
        "createdAt" : "2017-12-22T07:15:17Z",
        "updatedAt" : "2017-12-22T08:37:57Z",
        "lastEditedBy" : "915b2f67-05e6-4824-939a-398e7be58870",
        "tags" : [
        ]
      }
    ],
    "commit" : "d10b7657e7d5ebc621fbbf1c9ed6402af7cc63a1",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +1218,1222 @@\n  /**\n    * Generate a borker id by updating the broker sequence id path in ZK and return the version of the path.\n    * The version is incremented by one on every update starting from 1.\n    * @return sequence number as the broker id"
  },
  {
    "id" : "668943c2-5116-4c9a-b297-7bb09c8d3a95",
    "prId" : 4596,
    "prUrl" : "https://github.com/apache/kafka/pull/4596#pullrequestreview-97932517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a9363d2-8013-4364-b380-fe9db8b803f5",
        "parentId" : null,
        "authorId" : "915b2f67-05e6-4824-939a-398e7be58870",
        "body" : "good catch.",
        "createdAt" : "2018-02-20T18:14:32Z",
        "updatedAt" : "2018-03-01T22:48:10Z",
        "lastEditedBy" : "915b2f67-05e6-4824-939a-398e7be58870",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e2b0c8a6d7003c6c14373983ff6e06405fbcde9",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +423,427 @@    val getChildrenResponse = retryRequestUntilConnected(GetChildrenRequest(LogDirEventNotificationZNode.path))\n    if (getChildrenResponse.resultCode == Code.OK) {\n      deleteLogDirEventNotifications(getChildrenResponse.children.map(LogDirEventNotificationSequenceZNode.sequenceNumber))\n    } else if (getChildrenResponse.resultCode != Code.NONODE) {\n      getChildrenResponse.maybeThrow"
  },
  {
    "id" : "7d805898-922b-4c24-be62-10e67a32c36a",
    "prId" : 4727,
    "prUrl" : "https://github.com/apache/kafka/pull/4727#pullrequestreview-104757347",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75a3f813-fca2-4f01-8144-0bc8c5a73c42",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "I think this makes sense for 1.1 and to get the tests passing again, but maybe calling `zkClient.createTopLevelPaths()` from the config tool is a better long term solution. We can do the latter in a separate PR (I can include it in a related clean-up PR that I have been working on for too long).",
        "createdAt" : "2018-03-17T00:11:15Z",
        "updatedAt" : "2018-03-17T00:11:23Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "ca1015d2-94bb-4435-b7d5-3eef5a698a49",
        "parentId" : "75a3f813-fca2-4f01-8144-0bc8c5a73c42",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Sounds good to me. I considered doing just that in fact, but decided for the incremental fix instead.",
        "createdAt" : "2018-03-17T05:27:14Z",
        "updatedAt" : "2018-03-17T05:27:14Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e3905db686f8a3d1f5a4b2fb306e7e5948ad9a5",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +287,291 @@   */\n  def createConfigChangeNotification(sanitizedEntityPath: String): Unit = {\n    makeSurePersistentPathExists(ConfigEntityChangeNotificationZNode.path)\n    val path = ConfigEntityChangeNotificationSequenceZNode.createPath\n    val createRequest = CreateRequest(path, ConfigEntityChangeNotificationSequenceZNode.encode(sanitizedEntityPath), acls(path), CreateMode.PERSISTENT_SEQUENTIAL)"
  },
  {
    "id" : "5eea906f-1f65-4825-84c0-157cc0ff581a",
    "prId" : 5161,
    "prUrl" : "https://github.com/apache/kafka/pull/5161#pullrequestreview-128095958",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aba62d13-7e8f-4f9c-af31-6aa35fdc3f04",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "The comment of the method should be adjusted to \"Creates the required zk nodes for Acl storage and Acl change storage\".",
        "createdAt" : "2018-06-12T17:28:36Z",
        "updatedAt" : "2018-06-12T18:40:32Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "12b33aff-ae7a-40d7-8b43-2c9af8c4d435",
        "parentId" : "aba62d13-7e8f-4f9c-af31-6aa35fdc3f04",
        "authorId" : "e431deb4-a19e-4e78-a775-12af049c9089",
        "body" : "Done.",
        "createdAt" : "2018-06-12T18:36:26Z",
        "updatedAt" : "2018-06-12T18:40:32Z",
        "lastEditedBy" : "e431deb4-a19e-4e78-a775-12af049c9089",
        "tags" : [
        ]
      }
    ],
    "commit" : "23bb972dc517ee4efdc54a4703e6d89602b8241a",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +950,954 @@    })\n\n    ZkAclChangeStore.stores.foreach(store => createRecursive(store.aclChangePath, throwIfPathExists = false))\n  }\n"
  },
  {
    "id" : "3096f926-8720-495c-9b7f-d18caca9cf35",
    "prId" : 5259,
    "prUrl" : "https://github.com/apache/kafka/pull/5259#pullrequestreview-131388424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f82be847-1421-4cd2-a7d5-204a772405d7",
        "parentId" : null,
        "authorId" : "0c73d886-f3da-4107-8045-92d8e3c8fb75",
        "body" : "The second parameter can be replaced with configData, right ?",
        "createdAt" : "2018-06-23T08:08:41Z",
        "updatedAt" : "2018-06-23T08:08:41Z",
        "lastEditedBy" : "0c73d886-f3da-4107-8045-92d8e3c8fb75",
        "tags" : [
        ]
      }
    ],
    "commit" : "abda862dee625c5fb0ce6f2d3077c5cac61e151f",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +266,270 @@    def createOrSet(configData: Array[Byte]): Unit = {\n      val path = ConfigEntityZNode.path(rootEntityType, sanitizedEntityName)\n      try createRecursive(path, ConfigEntityZNode.encode(config))\n      catch {\n        case _: NodeExistsException => set(configData).maybeThrow"
  },
  {
    "id" : "6ec2d2cc-4cb8-47a8-a353-e458e4ce6039",
    "prId" : 5575,
    "prUrl" : "https://github.com/apache/kafka/pull/5575#pullrequestreview-169654919",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ba4e54f-caf1-49ca-b921-101410fb72a4",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "Could we add some comments why we need this and that we want to remove this once ZOOKEEPER-2985 is fixed?",
        "createdAt" : "2018-10-29T23:49:59Z",
        "updatedAt" : "2018-11-08T18:13:38Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "8e4b7dbb-6a0d-48f0-a94c-5bb779788d15",
        "parentId" : "2ba4e54f-caf1-49ca-b921-101410fb72a4",
        "authorId" : "d247117d-335e-4fd3-b317-b598d1fea4b3",
        "body" : "Yes, is definitely needed, I will add a comment with the appropriated references.\r\nOnce again, thanks for the heads up.",
        "createdAt" : "2018-10-30T08:29:45Z",
        "updatedAt" : "2018-11-08T18:13:38Z",
        "lastEditedBy" : "d247117d-335e-4fd3-b317-b598d1fea4b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0e2df540d41a0b83892bdbb759af229223c94d9",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +1718,1722 @@        // This code is part of the work around done in the KAFKA-7165, once ZOOKEEPER-2985 is complete, this code must\n        // be deleted.\n        case Code.OK if shouldReCreateEphemeralZNode(ephemeralOwnerId) =>\n          info(s\"Was not possible to create the ephemeral at $path, node already exists and owner \" +\n            s\"'$ephemeralOwnerId' does not match current session '${zooKeeperClient.sessionId}'\" +"
  },
  {
    "id" : "bcee3e7b-61bd-43e9-a9ce-ecc991a3f9ae",
    "prId" : 5575,
    "prUrl" : "https://github.com/apache/kafka/pull/5575#pullrequestreview-170406320",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d68ac224-5ad2-49ae-984b-7c3e61b7437d",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "Do we really need this? Could we just create a subclass of KafkaZkClient and overwrite the return value of shouldReCreateEphemeralZNode() in the test?",
        "createdAt" : "2018-10-29T23:51:19Z",
        "updatedAt" : "2018-11-08T18:13:38Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "65928f19-a91f-4fa7-a889-579e7d314f87",
        "parentId" : "d68ac224-5ad2-49ae-984b-7c3e61b7437d",
        "authorId" : "d247117d-335e-4fd3-b317-b598d1fea4b3",
        "body" : "As you pointed out, this is a momentaneous workaround to tackle the issue. I have thought on a more elegant way to do it, as you propose. Probably am opting for the simples but not elegant solution for this. The rationale behind my proposal is:\r\n\r\n- Keeping everything in the same place/file (now with the comments you suggested is better), in this way, the workaround is framed to a single place.\r\n- Once the Zookeeper issue is addressed properly, we just have to come to this file/class and delete this code.\r\n\r\nHaving said that, am more than happy to change it if you think is better :)",
        "createdAt" : "2018-10-30T08:56:37Z",
        "updatedAt" : "2018-11-08T18:13:38Z",
        "lastEditedBy" : "d247117d-335e-4fd3-b317-b598d1fea4b3",
        "tags" : [
        ]
      },
      {
        "id" : "7870f2a5-1a5b-450f-b2fc-d7799c9af9f5",
        "parentId" : "d68ac224-5ad2-49ae-984b-7c3e61b7437d",
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "Yes, I am mostly after simplicity. The patch as it is seems a bit hard for me to read. Part of that is to have to understand the meaning of 2 separate ZK session ids and when they are updated. I thought maintaining just one session id var could be simpler. With regard to keeping things in one place, I guess in either case, we have to change the test case when this logic is eventually removed?",
        "createdAt" : "2018-10-30T18:27:25Z",
        "updatedAt" : "2018-11-08T18:13:38Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "fa66f460-0205-4f99-a19e-4840c9f752b7",
        "parentId" : "d68ac224-5ad2-49ae-984b-7c3e61b7437d",
        "authorId" : "d247117d-335e-4fd3-b317-b598d1fea4b3",
        "body" : "Yes, it makes sense, am changing the code to achieve that. 👍 ",
        "createdAt" : "2018-10-31T18:24:50Z",
        "updatedAt" : "2018-11-08T18:13:38Z",
        "lastEditedBy" : "d247117d-335e-4fd3-b317-b598d1fea4b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0e2df540d41a0b83892bdbb759af229223c94d9",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +72,76 @@  // This code is part of the work around done in the KAFKA-7165, once ZOOKEEPER-2985 is complete, this code must\n  // be deleted.\n  private var currentZooKeeperSessionId: Long = -1\n\n  /**"
  },
  {
    "id" : "19afbdc9-ef8a-4256-86c1-ab5153729e87",
    "prId" : 5575,
    "prUrl" : "https://github.com/apache/kafka/pull/5575#pullrequestreview-171333869",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "022a02d3-1b4c-46b5-b748-ffdbcb94ef85",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "It seems that if code is NoNode, we should just let it go.",
        "createdAt" : "2018-11-03T00:09:19Z",
        "updatedAt" : "2018-11-08T18:13:38Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "502e9b97-6f14-4f63-9633-8e9cce5a8f2c",
        "parentId" : "022a02d3-1b4c-46b5-b748-ffdbcb94ef85",
        "authorId" : "d247117d-335e-4fd3-b317-b598d1fea4b3",
        "body" : "@junrao sorry, but I do not get this comment.\r\nIs true (after you point this out) that at the moment we try to delete the ephemeral znode, it could not be present anymore an a `NoNode` response will be received, and because we are just checking `if (codeAfterDelete == Code.OK)` the `created()` call will not be performed, hence, the Broker will be not registered. Is that what you meant?\r\n\r\nIf so, will be adding `if (codeAfterDelete == Code.OK || codeAfterDelete == Code.NONODE)`?\r\n\r\nHope you can help me to understand your point.\r\n\r\nCheers!",
        "createdAt" : "2018-11-03T13:00:56Z",
        "updatedAt" : "2018-11-08T18:13:38Z",
        "lastEditedBy" : "d247117d-335e-4fd3-b317-b598d1fea4b3",
        "tags" : [
        ]
      },
      {
        "id" : "7d61923f-3d2a-409d-8a93-1cb01e3b8a39",
        "parentId" : "022a02d3-1b4c-46b5-b748-ffdbcb94ef85",
        "authorId" : "d247117d-335e-4fd3-b317-b598d1fea4b3",
        "body" : "Or this?\r\n```\r\ndeleteResponse.resultCode match {\r\n        case code@ Code.OK => code\r\n        \r\n\r\n      > case code@ Code.NONODE => code\r\n\r\n        case code =>\r\n          error(s\"Error while deleting ephemeral node at $path with return code: $code\")\r\n          code\r\n}\r\n```",
        "createdAt" : "2018-11-03T13:12:03Z",
        "updatedAt" : "2018-11-08T18:13:38Z",
        "lastEditedBy" : "d247117d-335e-4fd3-b317-b598d1fea4b3",
        "tags" : [
        ]
      },
      {
        "id" : "88fe34a7-fdd3-401d-a03f-c2a2fa30a3f7",
        "parentId" : "022a02d3-1b4c-46b5-b748-ffdbcb94ef85",
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "Yes, it seems that if the node doesn't exist (ZK server could have deleted), we should still do the create() instead of returning an error code.",
        "createdAt" : "2018-11-03T16:50:09Z",
        "updatedAt" : "2018-11-08T18:13:38Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0e2df540d41a0b83892bdbb759af229223c94d9",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +1688,1692 @@        case code@ Code.OK => code\n        case code@ Code.NONODE => code\n        case code =>\n          error(s\"Error while deleting ephemeral node at $path with return code: $code\")\n          code"
  },
  {
    "id" : "000a1eb8-7cdd-4b8f-a07a-3698dfb2c693",
    "prId" : 5575,
    "prUrl" : "https://github.com/apache/kafka/pull/5575#pullrequestreview-172248000",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "600b6034-16bd-4f81-9809-0845598f7df2",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "Could we just move the call to updateCurrentZKSessionId() here? This way, there will be a single place where updateCurrentZKSessionId() will be called.",
        "createdAt" : "2018-11-05T21:27:02Z",
        "updatedAt" : "2018-11-08T18:13:38Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "c641bf37-bd0d-4e17-a3e5-4e0e3ad8008e",
        "parentId" : "600b6034-16bd-4f81-9809-0845598f7df2",
        "authorId" : "d247117d-335e-4fd3-b317-b598d1fea4b3",
        "body" : "Hmmmm, where exactly @junrao?\r\n\r\nWe are setting the `currentZooKeeperSessionId` at the end of `private def checkedEphemeralCreate(path: String, data: Array[Byte])` method, this ensures that the first time the broker tries to registered we have the session Id used.\r\n\r\nIf we do not do that, the method `isZKSessionTheEphemeralOwner` will return `false` (since `-1 != zooKeeperClient.sessionId`) and will not try to recreate the ephemeral node.\r\n\r\nThen we are setting `currentZooKeeperSessionId` again if the condition `case Code.OK if shouldReCreateEphemeralZNode(ephemeralOwnerId) =>` applies, becase this will update the `currentZooKeeperSessionId` with the newest session, useful when trying to recreate the ephemeral node.\r\n\r\nAm pretty sure am missing something since you point this out, but I can not see it, hope you can give me a clue :) \r\n",
        "createdAt" : "2018-11-06T13:51:56Z",
        "updatedAt" : "2018-11-08T18:13:38Z",
        "lastEditedBy" : "d247117d-335e-4fd3-b317-b598d1fea4b3",
        "tags" : [
        ]
      },
      {
        "id" : "abf84bb6-057e-4871-9aa0-efeb0b9a142d",
        "parentId" : "600b6034-16bd-4f81-9809-0845598f7df2",
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "Sorry, I didn't make it clear. Basically, we want to set the session id after a successful creation of the ephemeral path. I was thinking  that we can call updateCurrentZKSessionId() after line 1667 in CheckedEphemeral.create() when the return code is ok. Then, we don't need to call updateCurrentZKSessionId() anywhere else.",
        "createdAt" : "2018-11-06T21:34:56Z",
        "updatedAt" : "2018-11-08T18:13:38Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "305a9c81-eb3f-478e-8460-443b04715f89",
        "parentId" : "600b6034-16bd-4f81-9809-0845598f7df2",
        "authorId" : "d247117d-335e-4fd3-b317-b598d1fea4b3",
        "body" : "+1",
        "createdAt" : "2018-11-06T21:46:01Z",
        "updatedAt" : "2018-11-08T18:13:38Z",
        "lastEditedBy" : "d247117d-335e-4fd3-b317-b598d1fea4b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0e2df540d41a0b83892bdbb759af229223c94d9",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +1686,1690 @@      val deleteResponse = retryRequestUntilConnected(deleteRequest)\n      deleteResponse.resultCode match {\n        case code@ Code.OK => code\n        case code@ Code.NONODE => code\n        case code =>"
  },
  {
    "id" : "ae577f94-90db-4e91-b489-a0e99e62bbf7",
    "prId" : 5575,
    "prUrl" : "https://github.com/apache/kafka/pull/5575#pullrequestreview-172623331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fb2277f-449e-4efd-b831-9ac8ad05e1b8",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "Do we need to expose package level visibility for this method?",
        "createdAt" : "2018-11-06T23:13:04Z",
        "updatedAt" : "2018-11-08T18:13:38Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "06f24f3e-a024-4c1c-a961-4356030ae325",
        "parentId" : "4fb2277f-449e-4efd-b831-9ac8ad05e1b8",
        "authorId" : "d247117d-335e-4fd3-b317-b598d1fea4b3",
        "body" : "Is to take advantage of that method to perform the call to Zookeeper.\r\n\r\nI can move the method `getPathCzxid` present in the class `ExpiredKafkaZkClient` from the test, to the class `KafkaZkClient` (but not useful in that class `KafkaZkClient`).\r\n\r\nOr I can add more code just to make the call to Zookeeper to get the `czxid` in the class `ExpiredKafkaZkClient`\r\n\r\nWhat do you think?",
        "createdAt" : "2018-11-07T18:03:34Z",
        "updatedAt" : "2018-11-08T18:13:38Z",
        "lastEditedBy" : "d247117d-335e-4fd3-b317-b598d1fea4b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0e2df540d41a0b83892bdbb759af229223c94d9",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1592,1596 @@  private def acls(path: String): Seq[ACL] = ZkData.defaultAcls(isSecure, path)\n\n  private[zk] def retryRequestUntilConnected[Req <: AsyncRequest](request: Req): Req#Response = {\n    retryRequestsUntilConnected(Seq(request)).head\n  }"
  },
  {
    "id" : "4daf581b-0f47-45fd-8653-1562bee5461f",
    "prId" : 5575,
    "prUrl" : "https://github.com/apache/kafka/pull/5575#pullrequestreview-173100832",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70abe666-3be3-4774-a299-cda661628ea0",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "Perhaps the code can be simplified a bit as the following?\r\n\r\n```\r\n      val createResultCode = \r\n        createResponse.resultCode match {\r\n          case code@ Code.OK =>\r\n            code\r\n          case Code.NODEEXISTS =>\r\n            getAfterNodeExists()\r\n          case code =>\r\n            error(s\"Error while creating ephemeral at $path with return code: $code\")\r\n            code\r\n      }\r\n```",
        "createdAt" : "2018-11-08T00:37:59Z",
        "updatedAt" : "2018-11-08T18:13:38Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "73458355-00d8-4c2f-8989-717c6409ae54",
        "parentId" : "70abe666-3be3-4774-a299-cda661628ea0",
        "authorId" : "d247117d-335e-4fd3-b317-b598d1fea4b3",
        "body" : "Yes, it definitely is simpler and allow use to use `val` instead of `var`.\r\nDoing it.",
        "createdAt" : "2018-11-08T18:12:08Z",
        "updatedAt" : "2018-11-08T18:13:38Z",
        "lastEditedBy" : "d247117d-335e-4fd3-b317-b598d1fea4b3",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0e2df540d41a0b83892bdbb759af229223c94d9",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +1666,1670 @@          error(s\"Error while creating ephemeral at $path with return code: $code\")\n          code\n      }\n\n      if (createResultCode == Code.OK) {"
  }
]