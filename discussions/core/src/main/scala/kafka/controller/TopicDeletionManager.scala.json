[
  {
    "id" : "c70c33b3-b616-4d8e-b367-ec4c30d0cf95",
    "prId" : 5388,
    "prUrl" : "https://github.com/apache/kafka/pull/5388#pullrequestreview-146996554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae827f22-8c8a-4f0a-97a7-3ed04c58b40b",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "This change doesn't seem to be needed? Ditto below.",
        "createdAt" : "2018-08-15T21:59:36Z",
        "updatedAt" : "2018-08-21T14:33:53Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "2a8b1fd1-8861-43d7-88ef-776919008829",
        "parentId" : "ae827f22-8c8a-4f0a-97a7-3ed04c58b40b",
        "authorId" : "7d732cb7-eb6e-42e2-a773-db6c10d43f26",
        "body" : "I made this change in order to mock the method ReplicaStateMachine#handleStateChanges in the PartitionStateMachineTest.\r\nScala converts the handleStateChanges function into the following 2 java methods (reveald using javap ReplicaStateMachine.class):\r\n\r\npublic void handleStateChanges(scala.collection.Seq<kafka.controller.PartitionAndReplica>, kafka.controller.ReplicaState, kafka.controller.Callbacks);\r\npublic kafka.controller.Callbacks handleStateChanges$default$3();\r\n\r\nand if the call here only passes in two parameters, the hidden method handleStateChanges$default$3() will be called for the 3rd parameter, and I haven't found a way to mock this hidden method in EasyMock.\r\n",
        "createdAt" : "2018-08-16T19:46:25Z",
        "updatedAt" : "2018-08-21T14:33:53Z",
        "lastEditedBy" : "7d732cb7-eb6e-42e2-a773-db6c10d43f26",
        "tags" : [
        ]
      }
    ],
    "commit" : "a88df990ba29bfc85ca4ab2096d225a80a3a7641",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +308,312 @@      val replicasForDeletionRetry = aliveReplicasForTopic -- successfullyDeletedReplicas\n      // move dead replicas directly to failed state\n      controller.replicaStateMachine.handleStateChanges(deadReplicasForTopic.toSeq, ReplicaDeletionIneligible, new Callbacks())\n      // send stop replica to all followers that are not in the OfflineReplica state so they stop sending fetch requests to the leader\n      controller.replicaStateMachine.handleStateChanges(replicasForDeletionRetry.toSeq, OfflineReplica, new Callbacks())"
  }
]