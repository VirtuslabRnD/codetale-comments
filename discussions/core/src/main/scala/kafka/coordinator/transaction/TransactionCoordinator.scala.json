[
  {
    "id" : "50eaf6c6-70f1-401a-8d1f-5b1e02f0bfb5",
    "prId" : 7115,
    "prUrl" : "https://github.com/apache/kafka/pull/7115#pullrequestreview-267516214",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "067556fd-8410-42e9-901e-4490890bff9c",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "If there is no producerId currently mapped, the KIP suggests we allow the newly generated producerId to be returned. I wonder if it's simpler from an implementation perspective to accept the producerId and epoch from the InitProducerId request instead.\r\n\r\nBy the way, I think we might need to be a little careful with the result of `putTransactionStateIfNotExists`. Just need to be sure that if two InitProducerId requests come in at once, only one will be accepted.",
        "createdAt" : "2019-07-28T18:18:03Z",
        "updatedAt" : "2019-11-06T19:26:41Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a46583148fdd1f10258760e1b767b577ef193d8",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +129,133 @@            lastProducerId = RecordBatch.NO_PRODUCER_ID,\n            producerEpoch = RecordBatch.NO_PRODUCER_EPOCH,\n            lastProducerEpoch = RecordBatch.NO_PRODUCER_EPOCH,\n            txnTimeoutMs = transactionTimeoutMs,\n            state = Empty,"
  },
  {
    "id" : "b53ad656-f1ce-4206-b162-63c7e664e5aa",
    "prId" : 7115,
    "prUrl" : "https://github.com/apache/kafka/pull/7115#pullrequestreview-283976052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "debe1c70-f1f8-41b3-b679-e2a3c2a390db",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Just checking my understanding. If the expected producer id and epoch is non-empty and there is no current producerId defined, we have hit the \"unknown producer\" case.  I think we want to allow the request, but return the newly generated id. But I think actually we would hit the `isStaleProducerId` check below since the expected producer id does not match either the current or the (undefined) last producer id.",
        "createdAt" : "2019-08-15T23:09:58Z",
        "updatedAt" : "2019-11-06T19:26:41Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "bb478e67-5dde-465e-97c9-719e60516e65",
        "parentId" : "debe1c70-f1f8-41b3-b679-e2a3c2a390db",
        "authorId" : "e88252f3-8879-452a-8098-afb39cb614dc",
        "body" : "Good catch, thanks. I've added a flag to `CoordinatorEpochAndTxnMetadata` to indicate the the `TransactionMetadata` was newly-created. which lets us distinguish the non-empty expected ID and epoch and no current producer id case.",
        "createdAt" : "2019-09-03T18:43:33Z",
        "updatedAt" : "2019-11-06T19:26:41Z",
        "lastEditedBy" : "e88252f3-8879-452a-8098-afb39cb614dc",
        "tags" : [
        ]
      },
      {
        "id" : "345051e9-a3c6-4b14-94f6-3acda1cff7bc",
        "parentId" : "debe1c70-f1f8-41b3-b679-e2a3c2a390db",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "That's interesting. Would it also be possible to detect this case by looking for a producer epoch that is equal to -1?",
        "createdAt" : "2019-09-05T01:31:39Z",
        "updatedAt" : "2019-11-06T19:26:41Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a46583148fdd1f10258760e1b767b577ef193d8",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +127,131 @@          val createdMetadata = new TransactionMetadata(transactionalId = transactionalId,\n            producerId = producerId,\n            lastProducerId = RecordBatch.NO_PRODUCER_ID,\n            producerEpoch = RecordBatch.NO_PRODUCER_EPOCH,\n            lastProducerEpoch = RecordBatch.NO_PRODUCER_EPOCH,"
  },
  {
    "id" : "f24301c2-fc97-43d2-9d7f-56a857eb8ffa",
    "prId" : 10009,
    "prUrl" : "https://github.com/apache/kafka/pull/10009#pullrequestreview-581876481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70c69ac6-0a8f-496e-887e-c5bded14bf80",
        "parentId" : null,
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "Since we're externalizing this trait (`ProducerIdGenerator`), it seems odd that TransactionCoordinator takes it as a dependency, but then later assumes the responsibility of closing it. I think we might need to move the shutdown call to the same place we create the instance, just so the ownership is clear.\r\n\r\nAlternatively (and maybe preferably?) we can keep the ProducerIdGenerator construction in the companion object and add a second `apply` method when we add the KIP-500 implementation.",
        "createdAt" : "2021-02-01T20:57:09Z",
        "updatedAt" : "2021-02-03T00:28:25Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      },
      {
        "id" : "7a3fdb34-325a-412a-bb0d-a18fefab6128",
        "parentId" : "70c69ac6-0a8f-496e-887e-c5bded14bf80",
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "Either way, the new trait looks good ",
        "createdAt" : "2021-02-01T20:58:01Z",
        "updatedAt" : "2021-02-03T00:28:25Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      },
      {
        "id" : "01405716-a3c2-41e3-b6e5-402cafda7e13",
        "parentId" : "70c69ac6-0a8f-496e-887e-c5bded14bf80",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Yeah, I agree that the shutdown of producer id generator should move to `KafkaServer` if it's where we create it. Alternatively, `TransactionCoordinator` could take a factory (i.e. () => ProducerIdGenerator) for creating a `ProducerIdGenerator` and keep lifecycle management in `TransactionCoordinator`.",
        "createdAt" : "2021-02-02T14:35:06Z",
        "updatedAt" : "2021-02-03T00:28:25Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "f30c7969-c476-4ccc-af0c-c242b7f3f319",
        "parentId" : "70c69ac6-0a8f-496e-887e-c5bded14bf80",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "I think the factory with the `apply` method would work reasonably well.",
        "createdAt" : "2021-02-02T14:36:00Z",
        "updatedAt" : "2021-02-03T00:28:25Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "0fbaf32d-8590-4658-bb5c-07d4dbb39be7",
        "parentId" : "70c69ac6-0a8f-496e-887e-c5bded14bf80",
        "authorId" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "body" : "It felt weird to create the instance in `apply()` and hand it off to `TransactionCoordinator`, so I passed the factory and had the coordinator generate the instance.",
        "createdAt" : "2021-02-02T23:58:21Z",
        "updatedAt" : "2021-02-03T00:28:25Z",
        "lastEditedBy" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b5a29edfb7cbb0abfba47b2780e0c133d71662b",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +618,622 @@    isActive.set(false)\n    scheduler.shutdown()\n    producerIdGenerator.shutdown()\n    txnManager.shutdown()\n    txnMarkerChannelManager.shutdown()"
  }
]