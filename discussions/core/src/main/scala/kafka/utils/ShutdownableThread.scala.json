[
  {
    "id" : "febcc78e-f026-4841-bf1e-dfb4f36c195a",
    "prId" : 6218,
    "prUrl" : "https://github.com/apache/kafka/pull/6218#pullrequestreview-205452710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81f878ac-f9fd-4e20-922d-756147cdbb26",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "Hmm, do we need to set isStarted here again since it's already set in start()?",
        "createdAt" : "2019-02-19T18:27:33Z",
        "updatedAt" : "2019-02-26T01:19:07Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "7d1cc572-d1d0-4348-b47c-c35680dfa30a",
        "parentId" : "81f878ac-f9fd-4e20-922d-756147cdbb26",
        "authorId" : "851026f6-ef9e-43cc-bb20-4145295d1b95",
        "body" : "I was trying to cover the case where `run()` is called directly, without `start()`, either directly or by an executor implementation. ",
        "createdAt" : "2019-02-19T20:13:50Z",
        "updatedAt" : "2019-02-26T01:19:07Z",
        "lastEditedBy" : "851026f6-ef9e-43cc-bb20-4145295d1b95",
        "tags" : [
        ]
      },
      {
        "id" : "6396590b-4f29-494a-885b-69f8600d0b10",
        "parentId" : "81f878ac-f9fd-4e20-922d-756147cdbb26",
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "In that case, could we just set it in run() and not in start()?",
        "createdAt" : "2019-02-19T20:44:06Z",
        "updatedAt" : "2019-02-26T01:19:07Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "5c13d0dd-c587-4ceb-bbfb-f3d8e1156b18",
        "parentId" : "81f878ac-f9fd-4e20-922d-756147cdbb26",
        "authorId" : "851026f6-ef9e-43cc-bb20-4145295d1b95",
        "body" : "I added in the `start()` case because there could be a delay between `start()` getting called and `run()` getting called in the new thread, but I think this sends up producing inconsistent behavior depending on how the `ShutdownableThread` is started.\r\n\r\nIn the current state, if `start()` is used to start the `ShutdownableThread`, we're guaranteed to always correctly block in subsequent calls to `awaitShutdown()` since `isStarted` is set from the caller thread. If the `ShutdownableThread` is submitted to an executor, `run()` can be called at any time in the future, which makes it impossible for the caller thread to know if `awaitShutdown()` will block as we expect. \r\n\r\nWe end up with different guarantees based on how the class is run, which is not optimal. I think the only one we can guarantee across both `start()` and an Executor starting the thread is that the caller thread won't know when `isStarted` is true, and as a result, when it can rely on the blocking behavior of `awaitShutdown`. ",
        "createdAt" : "2019-02-19T21:09:07Z",
        "updatedAt" : "2019-02-26T01:19:07Z",
        "lastEditedBy" : "851026f6-ef9e-43cc-bb20-4145295d1b95",
        "tags" : [
        ]
      }
    ],
    "commit" : "54826d13f882d63d07a3f5f30f5329d846614ef2",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +83,87 @@\n  override def run(): Unit = {\n    isStarted = true\n    info(\"Starting\")\n    try {"
  }
]