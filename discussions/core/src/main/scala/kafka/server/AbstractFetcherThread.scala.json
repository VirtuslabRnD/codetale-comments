[
  {
    "id" : "603cfdb0-f030-4e85-9b3a-447b81b9ac91",
    "prId" : 4501,
    "prUrl" : "https://github.com/apache/kafka/pull/4501#pullrequestreview-94918475",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46952625-a587-4353-81c6-ab07106da854",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Do we still want this change? I think `handlePartitionsWithErrors` can be safely called with an empty collection. But maybe this is clearer. Leaving it to you to decide.",
        "createdAt" : "2018-02-08T00:03:48Z",
        "updatedAt" : "2018-02-08T00:03:53Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "eeb89387-9273-4c84-8456-0d843e40468a",
        "parentId" : "46952625-a587-4353-81c6-ab07106da854",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "No strong feeling. If we didn't already have the empty check for the log message, it wouldn't bother me. But since the check is there, it seemed more natural to skip the call to `handlePartitionsWithError`. Of course both implementations repeat the empty check anyway. I'll probably leave it this way.",
        "createdAt" : "2018-02-08T00:11:21Z",
        "updatedAt" : "2018-02-08T00:11:43Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c15aed3bf20e993d986ce1299955bc514879c3f",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +236,240 @@      debug(s\"Handling errors for partitions $partitionsWithError\")\n      handlePartitionsWithErrors(partitionsWithError)\n    }\n  }\n"
  },
  {
    "id" : "0cf4a43e-8a84-4aca-ad72-9c1242fa10ec",
    "prId" : 4882,
    "prUrl" : "https://github.com/apache/kafka/pull/4882#pullrequestreview-118473834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff404894-5e23-4c37-924f-4079a082bc83",
        "parentId" : null,
        "authorId" : "220f032c-6592-42d9-9042-aed276632816",
        "body" : "nits: this replica can be either follower or future replica. Maybe the variable can be named `replicaName`?",
        "createdAt" : "2018-05-08T06:43:03Z",
        "updatedAt" : "2018-05-09T21:46:13Z",
        "lastEditedBy" : "220f032c-6592-42d9-9042-aed276632816",
        "tags" : [
        ]
      },
      {
        "id" : "125d6159-5dd0-4d9e-88f8-bfac462350d6",
        "parentId" : "ff404894-5e23-4c37-924f-4079a082bc83",
        "authorId" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "body" : "Yeah, I already went back and forth couple of times regarding \"replica\" vs. \"follower\" (also re: your comment below). Jun commented (in this PR) that replica is also confusing in a way that leader is also a replica. And in case of future replica, it is also a follower, but of a different type. I propose to keep this name as is, but replace `replicaEndOffset` with `followerEndOffset` re: your comment below.",
        "createdAt" : "2018-05-08T18:09:53Z",
        "updatedAt" : "2018-05-09T21:46:13Z",
        "lastEditedBy" : "e235ea82-83a9-41e5-8e3a-15b2e1b6f350",
        "tags" : [
        ]
      }
    ],
    "commit" : "544f4fdf83ce6f540124668d95a58d2cdebc1ea8",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +321,325 @@  def getOffsetTruncationState(tp: TopicPartition, leaderEpochOffset: EpochEndOffset, replica: Replica, isFutureReplica: Boolean = false): OffsetTruncationState = {\n    // to make sure we can distinguish log output for fetching from remote leader or local replica\n    val followerName = if (isFutureReplica) \"future replica\" else \"follower\"\n\n    if (leaderEpochOffset.endOffset == UNDEFINED_EPOCH_OFFSET) {"
  },
  {
    "id" : "c9506581-2f1c-4938-9b88-55b1038fa788",
    "prId" : 4882,
    "prUrl" : "https://github.com/apache/kafka/pull/4882#pullrequestreview-118836530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b83d15c-4e85-4ee2-aa64-c3186f648f46",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "In general, we don't expect the truncation point to be < local HW. So, it would be useful to log a warning when this happens. Not sure what's the easiest way since now we can have intermediate truncation point.",
        "createdAt" : "2018-05-09T17:50:28Z",
        "updatedAt" : "2018-05-09T21:46:13Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      }
    ],
    "commit" : "544f4fdf83ce6f540124668d95a58d2cdebc1ea8",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +361,365 @@      } else {\n        val offsetToTruncateTo = min(followerEndOffset, leaderEpochOffset.endOffset)\n        OffsetTruncationState(min(offsetToTruncateTo, replica.logEndOffset.messageOffset), truncationCompleted = true)\n      }\n    }"
  },
  {
    "id" : "ec514950-b1d4-45d0-a07d-995856bb0a92",
    "prId" : 5587,
    "prUrl" : "https://github.com/apache/kafka/pull/5587#pullrequestreview-153462219",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84b2f51f-4db9-419a-bfc5-6df875993954",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "There is actually a reason why we fetch the partition state directly from partitionStates here again under the partitionMapLock. partitionStates can be modified after we release the lock in doWork() (e.g, due to a leadership change). When we get to processFetchRequest(),  a replica may have become the leader and therefore have been removed from partitionStates. In this case, we don't want to append the pending fetched data to the log since this partition could have appended new data from the producer to the log. This may cause leader epoch to be out of order in the log.",
        "createdAt" : "2018-09-07T00:33:48Z",
        "updatedAt" : "2018-09-07T00:58:37Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "8e5bbfcf-d699-45f6-ad44-d422795ede63",
        "parentId" : "84b2f51f-4db9-419a-bfc5-6df875993954",
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "On another look, the change is fine. We still check partitionStates in processFetchRequest().",
        "createdAt" : "2018-09-07T18:49:23Z",
        "updatedAt" : "2018-09-07T18:49:23Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcba833cdbe86d8a85c7d7109e66a19dc08615b2",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +227,231 @@            // In this case, we only want to process the fetch response if the partition state is ready for fetch and\n            // the current offset is the same as the offset requested.\n            val fetchOffset = fetchStates(topicPartition).fetchOffset\n            if (fetchOffset == currentPartitionFetchState.fetchOffset && currentPartitionFetchState.isReadyForFetch) {\n              partitionData.error match {"
  },
  {
    "id" : "ca8555cf-37eb-4b60-8a27-28e0efb6d894",
    "prId" : 5661,
    "prUrl" : "https://github.com/apache/kafka/pull/5661#pullrequestreview-161019725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc394f80-bb95-4b8a-aee2-c4ee397a4059",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "If we remove tp here, should we update AbstractFetcherManager so that it can update partitionBrokerIdMap and also kills idle thread if possible?",
        "createdAt" : "2018-09-28T22:03:19Z",
        "updatedAt" : "2018-10-05T16:40:27Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "e31a6afa-6a90-4578-bde9-810213b20d11",
        "parentId" : "dc394f80-bb95-4b8a-aee2-c4ee397a4059",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "@junrao Thanks for the suggestion. This is tricky since we would need to acquire the lock in `AbstractFetcherManager` while holding the lock in `AbstractFetcherThread`. The usual locking order is the other way around. I will explore whether it is possible to give up the lock in `AbstractFetcherThread` prior to invoking `onPartitionFenced`.",
        "createdAt" : "2018-10-03T06:14:32Z",
        "updatedAt" : "2018-10-05T16:40:27Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9bc468a7415831841a1203315789e683066dad4",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +222,226 @@      info(s\"Partition $tp has an older epoch ($currentLeaderEpoch) than the current leader. Will await \" +\n        s\"the new LeaderAndIsr state before resuming fetching.\")\n      partitionStates.remove(tp)\n    }\n  }"
  },
  {
    "id" : "ec2a4605-02f1-41b6-b003-70dc89f25f78",
    "prId" : 6089,
    "prUrl" : "https://github.com/apache/kafka/pull/6089#pullrequestreview-189594783",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa6b024a-ba7b-4f8e-8e92-6c0cc0b3ba34",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Not sure if this part of the change was worth it. We still need a copy per element and the code is a bit harder to read. The rest looks great though.",
        "createdAt" : "2019-01-05T11:51:54Z",
        "updatedAt" : "2019-01-05T11:52:03Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "dff8a2a479f7a5da0a69b57e3631ecaded29e13a",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +146,150 @@    val partitionsWithEpochs = mutable.Map.empty[TopicPartition, EpochData]\n\n    partitionStates.stream().forEach(new Consumer[PartitionStates.PartitionState[PartitionFetchState]] {\n      override def accept(state: PartitionStates.PartitionState[PartitionFetchState]): Unit = {\n        val tp = state.topicPartition"
  },
  {
    "id" : "68b1b610-78d0-4554-8452-d0d43d56f387",
    "prId" : 6232,
    "prUrl" : "https://github.com/apache/kafka/pull/6232#pullrequestreview-200772349",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a3575d6-65de-4401-a3b2-a39f34a6a844",
        "parentId" : null,
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "nit: IntelliJ suggests to convert this to a `Single Abstract Method`, effectivelly removing the `new Consumer[PartitionStates.PartitionState[PartitionFetchState]]` and ` override def accept(state: PartitionStates.PartitionState[PartitionFetchState]): Unit = {` boilerplate",
        "createdAt" : "2019-02-06T18:24:19Z",
        "updatedAt" : "2019-02-08T04:13:43Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      },
      {
        "id" : "1e440924-25d5-4264-b848-ea775fd984de",
        "parentId" : "8a3575d6-65de-4401-a3b2-a39f34a6a844",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I think that only works with scala 2.12. ",
        "createdAt" : "2019-02-06T19:50:39Z",
        "updatedAt" : "2019-02-08T04:13:43Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab429a3c1ea54d660cfae70d6c14c21ad8bf4c1e",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +148,152 @@    val partitionsWithoutEpochs = mutable.Set.empty[TopicPartition]\n\n    partitionStates.stream().forEach(new Consumer[PartitionStates.PartitionState[PartitionFetchState]] {\n      override def accept(state: PartitionStates.PartitionState[PartitionFetchState]): Unit = {\n        if (state.value.isTruncating) {"
  },
  {
    "id" : "0ecfdd0f-95e8-4710-bbec-744f77a6498f",
    "prId" : 6333,
    "prUrl" : "https://github.com/apache/kafka/pull/6333#pullrequestreview-208607641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9527bc33-bf6b-4719-b825-7f717a4dd091",
        "parentId" : null,
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "nit: Looking at the usage in the file, I think we would prefer:\r\n```\r\nOption(partitionStates.stateValue(topicPartition)).foreach { currentFetchState =\r\n...\r\n```\r\ninstead of the null check",
        "createdAt" : "2019-02-27T15:58:40Z",
        "updatedAt" : "2019-02-28T16:18:47Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b395b68b85ba67200f71c645b5002a4a04fb1c4",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +212,216 @@    for (tp <- partitions) {\n      val partitionState = partitionStates.stateValue(tp)\n      if (partitionState != null) {\n        try {\n          val highWatermark = partitionState.fetchOffset"
  },
  {
    "id" : "017804d4-7cdc-4a92-a4e9-60b346c85a72",
    "prId" : 6716,
    "prUrl" : "https://github.com/apache/kafka/pull/6716#pullrequestreview-238037566",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ccf02b1-4dd5-4857-a46c-a74473abba90",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Every time we call `markPartitionFailed`, we also call `removePartitions`. Maybe we could create a private method to do this?",
        "createdAt" : "2019-05-15T17:55:02Z",
        "updatedAt" : "2019-05-17T19:53:38Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "175a33c1-49c7-49cf-86b0-930c516d3836",
        "parentId" : "1ccf02b1-4dd5-4857-a46c-a74473abba90",
        "authorId" : "678ef46b-7a50-4214-891b-456966e84ed0",
        "body" : "Yeah, defined a new method `addFailedPartition` for it.",
        "createdAt" : "2019-05-15T19:55:35Z",
        "updatedAt" : "2019-05-17T19:53:38Z",
        "lastEditedBy" : "678ef46b-7a50-4214-891b-456966e84ed0",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e5b801039a364d5aa3f528c8591dd5d98f00f03",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +186,190 @@      case e: KafkaStorageException =>\n        error(s\"Failed to truncate $topicPartition at offset ${truncationState.offset}\", e)\n        markPartitionFailed(topicPartition)\n        false\n      case t: Throwable =>"
  },
  {
    "id" : "4e2f1bde-b757-42e1-a993-315468031d1e",
    "prId" : 6716,
    "prUrl" : "https://github.com/apache/kafka/pull/6716#pullrequestreview-238566300",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40940827-1758-4db5-a3ae-6e8c03e988c4",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Storage failures result in an event which eventually bubbles up to `ReplicaManager.handleLogDirFailure` by way of `LogDirFailureChannel`. This method will remove the partitions from the replica fetchers, which will consequently remove them from the `failedPartitions` set. I am wondering if it would be better not to do this so that `FailedPartitionsCount` also takes into account failed log directories.\r\n\r\ncc @junrao Does this make sense?",
        "createdAt" : "2019-05-15T18:03:39Z",
        "updatedAt" : "2019-05-17T19:53:38Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "290c3fae-20fc-4e46-8f76-3697028d976d",
        "parentId" : "40940827-1758-4db5-a3ae-6e8c03e988c4",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Thinking about this a little more, we already have a separate metric to track the offline partitions in `ReplicaManager`, so I think we do not need to change the behavior of `handleLogDirFailure`. If a partition fails due to a storage error, it will be reflected initially in `FailedPartitionsCount`, but later in the offline metric. I think that seems reasonable.",
        "createdAt" : "2019-05-16T18:31:20Z",
        "updatedAt" : "2019-05-17T19:53:38Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e5b801039a364d5aa3f528c8591dd5d98f00f03",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +184,188 @@    }\n    catch {\n      case e: KafkaStorageException =>\n        error(s\"Failed to truncate $topicPartition at offset ${truncationState.offset}\", e)\n        markPartitionFailed(topicPartition)"
  },
  {
    "id" : "577f63ba-22d0-4cb7-af23-fd05467f5a45",
    "prId" : 7443,
    "prUrl" : "https://github.com/apache/kafka/pull/7443#pullrequestreview-297236832",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9f8c6fe-b898-4ab4-8e70-a0433fa9de7a",
        "parentId" : null,
        "authorId" : "6c4430fc-3795-49d6-9c36-cf6aa694824e",
        "body" : "Wrapping each put in a ClientIdTopicPartition served no purpose here, as metricId is fixed for every instantiation of FetcherLagStats. This adds additional object creation/GC overhead, as well as additional hashing overhead.",
        "createdAt" : "2019-10-04T02:17:46Z",
        "updatedAt" : "2019-10-15T22:47:30Z",
        "lastEditedBy" : "6c4430fc-3795-49d6-9c36-cf6aa694824e",
        "tags" : [
        ]
      }
    ],
    "commit" : "1aa07f40ac1c69349f51604ba85e44344e1644d2",
    "line" : 264,
    "diffHunk" : "@@ -1,1 +712,716 @@\n  def getAndMaybePut(topicPartition: TopicPartition): FetcherLagMetrics = {\n    stats.getAndMaybePut(topicPartition)\n  }\n"
  },
  {
    "id" : "e0703894-8a18-4990-bdee-7afb8686bd45",
    "prId" : 7443,
    "prUrl" : "https://github.com/apache/kafka/pull/7443#pullrequestreview-297236890",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c8e9e88-1c3c-42cd-923c-a606e0e91989",
        "parentId" : null,
        "authorId" : "6c4430fc-3795-49d6-9c36-cf6aa694824e",
        "body" : "This could be cleaned up a little.",
        "createdAt" : "2019-10-04T02:18:06Z",
        "updatedAt" : "2019-10-15T22:47:30Z",
        "lastEditedBy" : "6c4430fc-3795-49d6-9c36-cf6aa694824e",
        "tags" : [
        ]
      }
    ],
    "commit" : "1aa07f40ac1c69349f51604ba85e44344e1644d2",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +311,315 @@            // the current offset is the same as the offset requested.\n            val fetchPartitionData = sessionPartitions.get(topicPartition)\n            if (fetchPartitionData != null && fetchPartitionData.fetchOffset == currentFetchState.fetchOffset && currentFetchState.isReadyForFetch) {\n              partitionData.error match {\n                case Errors.NONE =>"
  },
  {
    "id" : "52bd648e-a785-4338-ab42-85105c247f17",
    "prId" : 7443,
    "prUrl" : "https://github.com/apache/kafka/pull/7443#pullrequestreview-297237782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d29f2534-b299-4a6f-b3f4-e74816f3a670",
        "parentId" : null,
        "authorId" : "6c4430fc-3795-49d6-9c36-cf6aa694824e",
        "body" : "Avoid an unnecessary gettimeofday when partitions are in Fetching state (the common case) by using an Option[DelayedItem].",
        "createdAt" : "2019-10-04T02:23:05Z",
        "updatedAt" : "2019-10-15T22:47:30Z",
        "lastEditedBy" : "6c4430fc-3795-49d6-9c36-cf6aa694824e",
        "tags" : [
        ]
      }
    ],
    "commit" : "1aa07f40ac1c69349f51604ba85e44344e1644d2",
    "line" : 309,
    "diffHunk" : "@@ -1,1 +777,781 @@  def isTruncating: Boolean = state == Truncating && !isDelayed\n\n  def isDelayed: Boolean = delay.exists(_.getDelay(TimeUnit.MILLISECONDS) > 0)\n\n  override def toString: String = {"
  },
  {
    "id" : "9e938280-caca-4896-9816-c654b69419b0",
    "prId" : 7443,
    "prUrl" : "https://github.com/apache/kafka/pull/7443#pullrequestreview-302239774",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9bf3703-ba5b-415c-9965-f525a4d9bcfa",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "Could we add the newly added field lag?",
        "createdAt" : "2019-10-15T16:56:35Z",
        "updatedAt" : "2019-10-15T22:47:30Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "0e55ce21-5fdd-4792-8157-3c1c88a1f419",
        "parentId" : "d9bf3703-ba5b-415c-9965-f525a4d9bcfa",
        "authorId" : "6c4430fc-3795-49d6-9c36-cf6aa694824e",
        "body" : "Good suggestion, thanks. Resolved by https://github.com/apache/kafka/pull/7443/commits/1aa07f40ac1c69349f51604ba85e44344e1644d2",
        "createdAt" : "2019-10-15T22:47:45Z",
        "updatedAt" : "2019-10-15T22:47:45Z",
        "lastEditedBy" : "6c4430fc-3795-49d6-9c36-cf6aa694824e",
        "tags" : [
        ]
      }
    ],
    "commit" : "1aa07f40ac1c69349f51604ba85e44344e1644d2",
    "line" : 317,
    "diffHunk" : "@@ -1,1 +784,788 @@      s\", state=$state\" +\n      s\", lag=$lag\" +\n      s\", delay=${delay.map(_.delayMs).getOrElse(0)}ms\" +\n      s\")\"\n  }"
  },
  {
    "id" : "289de0b9-5675-4c7a-a80e-e95ae099a6f6",
    "prId" : 7443,
    "prUrl" : "https://github.com/apache/kafka/pull/7443#pullrequestreview-302165909",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e4a958d-d380-44f8-8515-38ed83f92207",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "+100",
        "createdAt" : "2019-10-15T20:09:37Z",
        "updatedAt" : "2019-10-15T22:47:30Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1aa07f40ac1c69349f51604ba85e44344e1644d2",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +282,286 @@                                  fetchRequest: FetchRequest.Builder): Unit = {\n    val partitionsWithError = mutable.Set[TopicPartition]()\n    var responseData: Map[TopicPartition, FetchData] = Map.empty\n\n    try {"
  },
  {
    "id" : "77dcc7ae-f275-4a26-8abd-4ee6ae9d6c4b",
    "prId" : 8412,
    "prUrl" : "https://github.com/apache/kafka/pull/8412#pullrequestreview-387402792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af864151-2d9a-4a4c-a878-859e3ca4110e",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I was tempted to fix this with the plural `truncations`.",
        "createdAt" : "2020-04-03T16:23:23Z",
        "updatedAt" : "2020-04-03T16:23:23Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "9dd4ec7253154a2e2db31c28c0ba188434d20199",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +200,204 @@    *   leader epoch. This is the offset the follower should truncate to ensure\n    *   accurate log replication.\n    * - Finally truncate the logs for partitions in the truncating phase and mark the\n    *   truncation complete. Do this within a lock to ensure no leadership changes can\n    *   occur during truncation."
  },
  {
    "id" : "4387b6ca-1310-4938-95e5-1c3a86b1c8c7",
    "prId" : 9382,
    "prUrl" : "https://github.com/apache/kafka/pull/9382#pullrequestreview-507915650",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c054b18-93d1-480e-9ad7-8165b3f27189",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Borderline overkill perhaps, but we could check if `epochEndOffsets` is non-empty before acquiring the lock",
        "createdAt" : "2020-10-14T01:02:37Z",
        "updatedAt" : "2020-12-03T01:21:35Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "be8b884ae2034c4ce6aef17d29a9a3f3429abe82",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +229,233 @@\n  protected def truncateOnFetchResponse(epochEndOffsets: Map[TopicPartition, EpochEndOffset]): Unit = {\n    inLock(partitionMapLock) {\n      val ResultWithPartitions(fetchOffsets, partitionsWithError) = maybeTruncateToEpochEndOffsets(epochEndOffsets, Map.empty)\n      handlePartitionsWithErrors(partitionsWithError, \"truncateOnFetchResponse\")"
  },
  {
    "id" : "38a8d6d2-3f53-44af-8a87-2aee940e8f61",
    "prId" : 9689,
    "prUrl" : "https://github.com/apache/kafka/pull/9689#pullrequestreview-549026792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "521c3c41-4c1c-4bc1-8ecf-605b35a41783",
        "parentId" : null,
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "Should it call ```setPartition```? ",
        "createdAt" : "2020-12-09T12:11:32Z",
        "updatedAt" : "2020-12-17T13:17:45Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "7f839e49-0661-427b-8749-9760140777b7",
        "parentId" : "521c3c41-4c1c-4bc1-8ecf-605b35a41783",
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "Good catch! Let me fix this.",
        "createdAt" : "2020-12-10T09:39:03Z",
        "updatedAt" : "2020-12-17T13:17:45Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "6417c8cb-8a9c-4e95-8a8f-bc43d1d305f1",
        "parentId" : "521c3c41-4c1c-4bc1-8ecf-605b35a41783",
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "I have updated tests to catch this.",
        "createdAt" : "2020-12-10T09:58:12Z",
        "updatedAt" : "2020-12-17T13:17:45Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f22942a41ee5ed60766908115509aaa0047c9ec",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +163,167 @@        latestEpoch(tp) match {\n          case Some(epoch) if isOffsetForLeaderEpochSupported =>\n            partitionsWithEpochs += tp -> new EpochData()\n              .setPartition(tp.partition)\n              .setCurrentLeaderEpoch(state.currentLeaderEpoch)"
  }
]