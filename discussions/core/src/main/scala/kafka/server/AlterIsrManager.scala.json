[
  {
    "id" : "a0e5bdfe-c307-4ca7-be7e-4aeef21d598b",
    "prId" : 9100,
    "prUrl" : "https://github.com/apache/kafka/pull/9100#pullrequestreview-490002851",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3cf0ac9-c30c-4a91-ab82-e26e99aa7e5a",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Still not super keen on this propagation delay. At least it would be nice if we did not have to wakeup the thread every 50ms when there's nothing to do. This is potentially something we can save for a follow-up since coming up with a good solution might require some experimentation and analysis.",
        "createdAt" : "2020-09-16T17:55:53Z",
        "updatedAt" : "2020-09-24T19:27:07Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "e05776e5-b01f-4d26-9fb1-68ad363b43bf",
        "parentId" : "e3cf0ac9-c30c-4a91-ab82-e26e99aa7e5a",
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "Currently we impose a 2.5s delay for the old ZK based ISR propagation method. We could probably increase this 50ms up to a few hundred without any ill-effects. We still benefit from fact that we assume the maximal ISR immediately. How about 200ms?\r\n\r\nLonger term we can look into having a single thread invocation that sits in a while loop trying to consume from a LinkedBlockingQueue or maybe even a SynchronousQueue. But agreed we should leave this for later.",
        "createdAt" : "2020-09-16T20:39:05Z",
        "updatedAt" : "2020-09-24T19:27:07Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac3eec11505bace6c3302ad982d6418d30f26313",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +64,68 @@\n  override def start(): Unit = {\n    scheduler.schedule(\"send-alter-isr\", propagateIsrChanges, 50, 50, TimeUnit.MILLISECONDS)\n  }\n"
  },
  {
    "id" : "64cd4bbb-8b78-48c7-9b1e-eaea9b60b206",
    "prId" : 9732,
    "prUrl" : "https://github.com/apache/kafka/pull/9732#pullrequestreview-555686161",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28b0cc1f-392f-4312-9a6d-e5e934f4c6bd",
        "parentId" : null,
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "I guess we're not sharing these channel managers between anything. In that case, moving them into the classes that need them seems fine.",
        "createdAt" : "2020-12-18T17:40:44Z",
        "updatedAt" : "2020-12-21T20:43:49Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      }
    ],
    "commit" : "c31ba33f2ffb1144e0acbe975ddf45cc5d4065bc",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +74,78 @@    brokerEpochSupplier: () => Long\n  ): AlterIsrManager = {\n    val channelManager = new BrokerToControllerChannelManager(\n      metadataCache = metadataCache,\n      time = time,"
  },
  {
    "id" : "d527a848-e5b9-40b1-b413-a853d561c8c0",
    "prId" : 10113,
    "prUrl" : "https://github.com/apache/kafka/pull/10113#pullrequestreview-592807587",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e454d3fa-b845-472c-a05e-a0c660264082",
        "parentId" : null,
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "why can't we use config.brokerId?  Is this to support automatic broker id assignment in the pre-KIP-500 code?  It would be good to add a note to the commit, if so.",
        "createdAt" : "2021-02-17T23:41:12Z",
        "updatedAt" : "2021-02-18T03:32:54Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "f233d207-f566-47d3-8d58-c553691ab77c",
        "parentId" : "e454d3fa-b845-472c-a05e-a0c660264082",
        "authorId" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "body" : "This supplies the broker epoch rather than the brokerId",
        "createdAt" : "2021-02-18T02:50:10Z",
        "updatedAt" : "2021-02-18T03:32:54Z",
        "lastEditedBy" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0755d439ecef512cb5d689d52d661fd55848e424",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +72,76 @@    threadNamePrefix: Option[String],\n    brokerEpochSupplier: () => Long,\n    brokerId: Int\n  ): AlterIsrManager = {\n    val nodeProvider = MetadataCacheControllerNodeProvider(config, metadataCache)"
  },
  {
    "id" : "8b015fea-d63f-41e9-8822-ee07a97cd0bc",
    "prId" : 10157,
    "prUrl" : "https://github.com/apache/kafka/pull/10157#pullrequestreview-594980611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c947df85-ea6e-4a7d-9685-8597632d7f36",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Seems like it's pretty common t check for these two fields. Could we have an enum to represent the two errors and then have a function from the enum the Error? Seems a bit easier to use and less error prone.",
        "createdAt" : "2021-02-20T19:04:43Z",
        "updatedAt" : "2021-02-22T16:35:16Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "06fb534f-9ae2-4409-af2a-a84d3d038a1f",
        "parentId" : "c947df85-ea6e-4a7d-9685-8597632d7f36",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "It's a good suggestion. I think what we want is for `ClientResponse` to expose something like `Either[AbstractResponse, Exception]`. This would prevent bugs like this in the future since it forces the code to unwrap the response. I'm willing to give it a shot here, but I suspect it will cause a much bigger diff. My intent here was to try and keep the PR small so that we could get it into 2.8. Let me know what you think.",
        "createdAt" : "2021-02-20T20:55:32Z",
        "updatedAt" : "2021-02-22T16:35:16Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "659f1e17-4674-4c1a-8335-4b0bae8035ca",
        "parentId" : "c947df85-ea6e-4a7d-9685-8597632d7f36",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "I'm fine to improve this post 2.8, let's file a JIRA please.",
        "createdAt" : "2021-02-21T22:22:51Z",
        "updatedAt" : "2021-02-22T16:35:16Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "87aa4880-9327-4043-9427-d33daa2f8dde",
        "parentId" : "c947df85-ea6e-4a7d-9685-8597632d7f36",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Filed this: https://issues.apache.org/jira/browse/KAFKA-12353",
        "createdAt" : "2021-02-22T03:01:42Z",
        "updatedAt" : "2021-02-22T16:35:16Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "6dcc4bdeefebe062e0f03c6264c84cd7c917e145",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +173,177 @@              // authentication errors so that users have a chance to fix the problem.\n              Errors.NETWORK_EXCEPTION\n            } else if (response.versionMismatch != null) {\n              Errors.UNSUPPORTED_VERSION\n            } else {"
  }
]