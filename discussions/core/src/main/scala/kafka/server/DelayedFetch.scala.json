[
  {
    "id" : "e3762945-6368-41f7-a3d3-19857c2d2a26",
    "prId" : 6832,
    "prUrl" : "https://github.com/apache/kafka/pull/6832#pullrequestreview-250765485",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51708030-b69f-41fb-9248-dabbaad6c415",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Below we have logic which relies on fully realized LogOffsetMetadata (including segment and position) for the high watermark and LSO. Does this work for the follower since it won't have this information in all cases? \r\n\r\nIn general, I think our usage of `LogOffsetMetadata` is unsafe since it's unclear when we can expect the segment position to be present. I think it would be better to only expose the `LogOffsetMetadata` object outside of `Log` when we can rely on its full contents.  We could have two methods in Log for this:\r\n\r\n```scala\r\n  def highWatermark: Long = highWatermarkMetadata.messageOffset\r\n\r\n  def highWatermarkMetadata: LogOffsetMetadata = {\r\n    if (_highWatermarkMetadata.messageOffsetOnly) {\r\n      _highWatermarkMetadata = lookupOffsetMetadata(_highWatermarkMetadata.messageOffset)\r\n    } \r\n    _highWatermarkMetadata\r\n  }\r\n```\r\n\r\nThe code can then be modified to only call `highWatermarkMetadata` when we truly need the segment and position.",
        "createdAt" : "2019-06-17T23:01:35Z",
        "updatedAt" : "2019-07-04T02:59:14Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "4649c14a969cd8c88d06cad68f65d39a0cfdd905",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +77,81 @@   * Upon completion, should return whatever data is available for each valid partition\n   */\n  override def tryComplete(): Boolean = {\n    var accumulatedSize = 0\n    fetchMetadata.fetchPartitionStatus.foreach {"
  }
]