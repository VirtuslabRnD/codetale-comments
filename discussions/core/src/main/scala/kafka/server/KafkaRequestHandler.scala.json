[
  {
    "id" : "4a60d735-697e-4ce9-9eb6-fccda8ef69b7",
    "prId" : 4471,
    "prUrl" : "https://github.com/apache/kafka/pull/4471#pullrequestreview-92412717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd6f0930-c700-4bcd-9b38-1d7369477ec4",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I wonder why we don't use `ShutdownableThread`. Maybe this code predates it.",
        "createdAt" : "2018-01-29T21:12:55Z",
        "updatedAt" : "2018-01-30T15:24:51Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "65a1d26e-b53b-4e61-826a-85b43a3c7bab",
        "parentId" : "fd6f0930-c700-4bcd-9b38-1d7369477ec4",
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "Don't know the answer, didn't change.",
        "createdAt" : "2018-01-30T00:32:14Z",
        "updatedAt" : "2018-01-30T15:24:51Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "a360728f-2fc8-4d6d-8aeb-4512d470f864",
        "parentId" : "fd6f0930-c700-4bcd-9b38-1d7369477ec4",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Fair enough. More of an observation. We can consider separately.",
        "createdAt" : "2018-01-30T01:07:40Z",
        "updatedAt" : "2018-01-30T15:24:51Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c25c58922801e023bc1fe56919dfbab7f4565f5",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +39,43 @@                          val requestChannel: RequestChannel,\n                          apis: KafkaApis,\n                          time: Time) extends Runnable with Logging {\n  this.logIdent = \"[Kafka Request Handler \" + id + \" on Broker \" + brokerId + \"], \"\n  private val shutdownComplete = new CountDownLatch(1)"
  },
  {
    "id" : "08de6b6e-1db7-4cac-9812-27cac2b9c4f9",
    "prId" : 6977,
    "prUrl" : "https://github.com/apache/kafka/pull/6977#pullrequestreview-253157450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0a7cf19-3ae8-40f9-8d73-739e462b2659",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "The second type can be `Metric` to be generalized.",
        "createdAt" : "2019-06-21T22:05:17Z",
        "updatedAt" : "2019-07-17T20:25:44Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "a8fb9b99-07ac-476f-922e-929632bf9d16",
        "parentId" : "f0a7cf19-3ae8-40f9-8d73-739e462b2659",
        "authorId" : "38aea9c5-d7f1-4e61-920e-b35370a0109c",
        "body" : "I tried the `Metric` type but the line\r\n```\r\ntopicStats(topic).bytesOutRate.mark(value)\r\n```\r\ncaused a build failure because the compiler doesn't recognize `mark` is member of the `Metric` type",
        "createdAt" : "2019-06-21T22:29:31Z",
        "updatedAt" : "2019-07-17T20:25:44Z",
        "lastEditedBy" : "38aea9c5-d7f1-4e61-920e-b35370a0109c",
        "tags" : [
        ]
      },
      {
        "id" : "8dc6a89c-1dfe-48fc-a7c1-db4aecd7177b",
        "parentId" : "f0a7cf19-3ae8-40f9-8d73-739e462b2659",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Ack, let's use `Meter` then.",
        "createdAt" : "2019-06-24T00:21:39Z",
        "updatedAt" : "2019-07-17T20:25:44Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c0e5d328df542dd395e85a823552e57b6302baf",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +148,152 @@\n  // an internal map for \"lazy initialization\" of certain metrics\n  private val metricTypeMap = new Pool[String, Meter]\n\n  def messagesInRate = metricTypeMap.getAndMaybePut(BrokerTopicStats.MessagesInPerSec,"
  },
  {
    "id" : "dc0fa1b4-4ba7-4300-97af-98acfdfe6b64",
    "prId" : 7142,
    "prUrl" : "https://github.com/apache/kafka/pull/7142#pullrequestreview-328214878",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dedcb56c-dc8c-4501-9a8a-af5cbd93949a",
        "parentId" : null,
        "authorId" : "85578594-6b0b-4724-b709-a8c84f206391",
        "body" : "@tuvtran @guozhangwang \r\nSince the decision is made to record the `InvalidRecord` errors only at `allTopicStats` level. Shall we move the L192-195 inside the `if (name.isEmpty)` check? ",
        "createdAt" : "2019-11-25T09:50:07Z",
        "updatedAt" : "2019-11-25T09:51:47Z",
        "lastEditedBy" : "85578594-6b0b-4724-b709-a8c84f206391",
        "tags" : [
        ]
      },
      {
        "id" : "b6ce9d0d-40c6-4df0-ab34-e9a100e53115",
        "parentId" : "dedcb56c-dc8c-4501-9a8a-af5cbd93949a",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "@kamalcph Sorry for the late reply, I think the decision is to record it at specific-topic level, not on all-topics level.",
        "createdAt" : "2019-12-05T21:02:32Z",
        "updatedAt" : "2019-12-05T21:02:32Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "e4666f90-1ebd-4599-a321-d059c0651233",
        "parentId" : "dedcb56c-dc8c-4501-9a8a-af5cbd93949a",
        "authorId" : "85578594-6b0b-4724-b709-a8c84f206391",
        "body" : "Going by the source-code, I can see the `NoKeyCompactedTopicRecordsPerSec`, `InvalidMagicNumberRecordsPerSec`, `InvalidMessageCrcRecordsPerSec` and `InvalidOffsetOrSequenceRecordsPerSec` metrics are marked only at the all-topic stats so I asked. ",
        "createdAt" : "2019-12-06T13:52:51Z",
        "updatedAt" : "2019-12-06T13:52:52Z",
        "lastEditedBy" : "85578594-6b0b-4724-b709-a8c84f206391",
        "tags" : [
        ]
      }
    ],
    "commit" : "09a79610109d36eaca221f0651cc74d53aa26440",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +190,194 @@    BrokerTopicStats.FetchMessageConversionsPerSec -> MeterWrapper(BrokerTopicStats.FetchMessageConversionsPerSec, \"requests\"),\n    BrokerTopicStats.ProduceMessageConversionsPerSec -> MeterWrapper(BrokerTopicStats.ProduceMessageConversionsPerSec, \"requests\"),\n    BrokerTopicStats.NoKeyCompactedTopicRecordsPerSec -> MeterWrapper(BrokerTopicStats.NoKeyCompactedTopicRecordsPerSec, \"requests\"),\n    BrokerTopicStats.InvalidMagicNumberRecordsPerSec -> MeterWrapper(BrokerTopicStats.InvalidMagicNumberRecordsPerSec, \"requests\"),\n    BrokerTopicStats.InvalidMessageCrcRecordsPerSec -> MeterWrapper(BrokerTopicStats.InvalidMessageCrcRecordsPerSec, \"requests\"),"
  },
  {
    "id" : "18cd1d1f-af44-4e08-a6c9-25dcc03b3f4d",
    "prId" : 7142,
    "prUrl" : "https://github.com/apache/kafka/pull/7142#pullrequestreview-322150170",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67b982af-1f7e-438b-8f03-eed3f865196c",
        "parentId" : null,
        "authorId" : "85578594-6b0b-4724-b709-a8c84f206391",
        "body" : "Should the return type be Option[meter] to be uniform with other `allTopicStats` only metrics?",
        "createdAt" : "2019-11-25T09:50:58Z",
        "updatedAt" : "2019-11-25T09:51:47Z",
        "lastEditedBy" : "85578594-6b0b-4724-b709-a8c84f206391",
        "tags" : [
        ]
      }
    ],
    "commit" : "09a79610109d36eaca221f0651cc74d53aa26440",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +231,235 @@  def produceMessageConversionsRate = metricTypeMap.get(BrokerTopicStats.ProduceMessageConversionsPerSec).meter()\n\n  def noKeyCompactedTopicRecordsPerSec = metricTypeMap.get(BrokerTopicStats.NoKeyCompactedTopicRecordsPerSec).meter()\n\n  def invalidMagicNumberRecordsPerSec = metricTypeMap.get(BrokerTopicStats.InvalidMagicNumberRecordsPerSec).meter()"
  },
  {
    "id" : "d2daf24d-ac0d-4974-9ddd-4c3ea720af96",
    "prId" : 7198,
    "prUrl" : "https://github.com/apache/kafka/pull/7198#pullrequestreview-278419600",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac754726-cc1e-458e-a392-4f2970b90974",
        "parentId" : null,
        "authorId" : "716a8cd3-e031-471c-a34e-268551b762e8",
        "body" : "Can this be generalized to allow other Metric types like `Histogram` ?",
        "createdAt" : "2019-08-20T19:33:09Z",
        "updatedAt" : "2019-08-22T15:00:58Z",
        "lastEditedBy" : "716a8cd3-e031-471c-a34e-268551b762e8",
        "tags" : [
        ]
      },
      {
        "id" : "187e9b94-4acc-491c-82a2-ab1dd31f5cb2",
        "parentId" : "ac754726-cc1e-458e-a392-4f2970b90974",
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "Do you think we should? Considering it's just used for Meters right now, I think we don't need to prematurely generalize it.",
        "createdAt" : "2019-08-22T10:36:43Z",
        "updatedAt" : "2019-08-22T15:00:58Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      },
      {
        "id" : "c753ec5b-032a-46cd-8406-d2996f375d45",
        "parentId" : "ac754726-cc1e-458e-a392-4f2970b90974",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "I think we can leave this for when we need it.",
        "createdAt" : "2019-08-22T13:31:05Z",
        "updatedAt" : "2019-08-22T15:00:58Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5673d197f9d9d72b246c2b1dd70ccb596ca6c000",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +148,152 @@  }\n\n  case class MeterWrapper(metricType: String, eventType: String) {\n    @volatile private var lazyMeter: Meter = _\n    private val meterLock = new Object"
  },
  {
    "id" : "937dc445-e13b-45d3-8957-147f8470a3ce",
    "prId" : 7198,
    "prUrl" : "https://github.com/apache/kafka/pull/7198#pullrequestreview-278421082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08cdb8ad-c630-4047-a492-4edbde60cce6",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Nit: the standard practice is to assign the local variable first and then assign the field from the local variable. It's the same code and a tiny bit more efficient.",
        "createdAt" : "2019-08-22T13:33:16Z",
        "updatedAt" : "2019-08-22T15:00:58Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5673d197f9d9d72b246c2b1dd70ccb596ca6c000",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +156,160 @@      if (meter == null) {\n        meterLock synchronized {\n          meter = lazyMeter\n          if (meter == null) {\n            meter = newMeter(metricType, eventType, TimeUnit.SECONDS, tags)"
  }
]