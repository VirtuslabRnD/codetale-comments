[
  {
    "id" : "71e811f3-078b-440b-a6bf-d3e003e015ba",
    "prId" : 3960,
    "prUrl" : "https://github.com/apache/kafka/pull/3960#pullrequestreview-140809034",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ecb8060-edfb-40a7-ad1c-d689613cca10",
        "parentId" : null,
        "authorId" : "915b2f67-05e6-4824-939a-398e7be58870",
        "body" : "We also need to update DeleteTopicsRequest/DeleteTopicsResponse request/response classes to V3.",
        "createdAt" : "2018-07-26T15:58:08Z",
        "updatedAt" : "2018-08-24T04:15:03Z",
        "lastEditedBy" : "915b2f67-05e6-4824-939a-398e7be58870",
        "tags" : [
        ]
      },
      {
        "id" : "3fd11012-77a3-408a-8136-cada4c730828",
        "parentId" : "7ecb8060-edfb-40a7-ad1c-d689613cca10",
        "authorId" : "e010e546-b6d6-4bd1-8a04-3b3160805fc9",
        "body" : "Done!",
        "createdAt" : "2018-07-26T16:29:48Z",
        "updatedAt" : "2018-08-24T04:15:03Z",
        "lastEditedBy" : "e010e546-b6d6-4bd1-8a04-3b3160805fc9",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc67c0df33ed26af6c5af45f32d139b7dbe87738",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1541,1545 @@      sendResponseCallback(results)\n    } else if (!config.deleteTopicEnable) {\n      val error = if (request.context.apiVersion < 3) Errors.INVALID_REQUEST else Errors.TOPIC_DELETION_DISABLED\n      val results = deleteTopicRequest.topics.asScala.map { topic =>\n        (topic, error)"
  },
  {
    "id" : "7a02ce24-97db-4c45-bb6f-60e548ac6dbd",
    "prId" : 5074,
    "prUrl" : "https://github.com/apache/kafka/pull/5074#pullrequestreview-123536379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b556fb5b-8369-45fc-a182-53c46e52add8",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "We don't guarantee this, do we? It seems like we only guarantee that we won't exceed the quota if ISR traffic is below the quota.",
        "createdAt" : "2018-05-25T23:24:48Z",
        "updatedAt" : "2018-05-25T23:25:02Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "f06aeb1d-d791-4816-a754-3ebff5163e30",
        "parentId" : "b556fb5b-8369-45fc-a182-53c46e52add8",
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "Right, we guarantee that if the quota is set high enough.",
        "createdAt" : "2018-05-25T23:30:18Z",
        "updatedAt" : "2018-05-25T23:30:18Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2fc60cfd9188a3a530d5ae8f6ad2ca305a89add",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +668,672 @@\n  // Traffic from both in-sync and out of sync replicas are accounted for in replication quota to ensure total replication\n  // traffic doesn't exceed quota.\n  private def sizeOfThrottledPartitions(versionId: Short,\n                                        unconvertedResponse: FetchResponse,"
  },
  {
    "id" : "1afefefa-5c98-4e0f-8212-72c7871069f9",
    "prId" : 5972,
    "prUrl" : "https://github.com/apache/kafka/pull/5972#pullrequestreview-196171710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a45a77b5-3f16-4301-842f-defd788c1431",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "Since results is a set, is that check still needed?",
        "createdAt" : "2019-01-23T18:35:03Z",
        "updatedAt" : "2019-02-01T23:53:39Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "8b2f2193-08d7-4418-ade9-2a268367f61a",
        "parentId" : "a45a77b5-3f16-4301-842f-defd788c1431",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "Just to be clear, it's a multiset.  This was done specifically to preserve the existing behavior where duplicate entries caused us to return an error code, rather than triggering a deserialization error (which would show up as a disconnection)",
        "createdAt" : "2019-01-24T18:00:56Z",
        "updatedAt" : "2019-02-01T23:53:39Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "83e42e5fc686792f41bd087a5b4b2270871bfcb7",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +1423,1427 @@      val hasClusterAuthorization = authorize(request.session, Create, Resource.ClusterResource)\n      results.asScala.foreach(topic => {\n        if (results.findAll(topic.name()).size() > 1) {\n          topic.setErrorCode(Errors.INVALID_REQUEST.code())\n          topic.setErrorMessage(\"Found multiple entries for this topic.\")"
  },
  {
    "id" : "2a97d99a-8002-49e6-beef-05c218a15007",
    "prId" : 5991,
    "prUrl" : "https://github.com/apache/kafka/pull/5991#pullrequestreview-182902344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08dc0976-4b20-41ca-bcd9-0b6923699991",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Just thinking about this a little, do you think there's much advantage to having a separate error code? Whether it is `OFFSET_NOT_AVAILABLE` or `LEADER_NOT_AVAILABLE`, the client will just retry.\r\n\r\nAlso, it might be a good idea to update `Fetcher.handleListOffsetResponse` to explicitly check the expected error codes. We can probably skip the log warning in these cases and print a debug message since this is an expected scenario.",
        "createdAt" : "2018-12-04T18:14:01Z",
        "updatedAt" : "2018-12-14T16:34:23Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "b21c7285-5752-4ad6-b4a3-9a96ff301a01",
        "parentId" : "08dc0976-4b20-41ca-bcd9-0b6923699991",
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "The motivation of a new exception was to give a more precise reason for not returning the offsets. Sticking with `LEADER_NOT_AVAILABLE` would eliminate any change required to the protocol, which is nice, but maybe runs the risk of overloading the error code. Looking at usages of `LEADER_NOT_AVAILABLE` in the code, it doesn't actually look all that widely used, so maybe adding another usage of it for this case isn't so bad. \r\n\r\n@hachikuji @cmccabe WDYT?",
        "createdAt" : "2018-12-04T19:12:28Z",
        "updatedAt" : "2018-12-14T16:34:23Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      },
      {
        "id" : "13ab09a8-d622-47f6-a676-1e16981a1ff9",
        "parentId" : "08dc0976-4b20-41ca-bcd9-0b6923699991",
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "> Fetcher.handleListOffsetResponse to explicitly check the expected error codes\r\n\r\nSounds good. Would handling `LEADER_NOT_AVAILABLE` and retrying have any unintended consequences with other uses of this error code?",
        "createdAt" : "2018-12-04T19:13:14Z",
        "updatedAt" : "2018-12-14T16:34:23Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      },
      {
        "id" : "c3edb389-b1d4-497a-8f27-1ba1f59296f2",
        "parentId" : "08dc0976-4b20-41ca-bcd9-0b6923699991",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Yeah, I'm not sure. We have tended to regret when we didn't provide more explicit error codes, so perhaps we should just stick with what's in the KIP. \r\n\r\n> Sounds good. Would handling LEADER_NOT_AVAILABLE and retrying have any unintended consequences with other uses of this error code?\r\n\r\nI didn't see any explicit logic to handle it in `Fetcher`, so I think we'd be hitting this case:\r\n```java\r\nlog.warn(\"Attempt to fetch offsets for partition {} failed due to: {}\", topicPartition, error.message());\r\npartitionsToRetry.add(topicPartition);\r\n```\r\nDo we have any current scenarios in the ListOffset handler where we could raise `LEADER_NOT_AVAILABLE`?",
        "createdAt" : "2018-12-06T02:58:49Z",
        "updatedAt" : "2018-12-14T16:34:23Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "e8b074b1-6eb7-4014-9467-ebc286aa24e2",
        "parentId" : "08dc0976-4b20-41ca-bcd9-0b6923699991",
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "As far as I can tell, `LEADER_NOT_AVAILABLE` is only returned when creating a topic, fetching metadata, and deleting records. I'll continue with the new error as indicated in the KIP and rev the IBP",
        "createdAt" : "2018-12-06T14:42:31Z",
        "updatedAt" : "2018-12-14T16:34:23Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      },
      {
        "id" : "48fa917c-4ffd-453e-8938-8e0fab2c2b85",
        "parentId" : "08dc0976-4b20-41ca-bcd9-0b6923699991",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "Yes, we discussed this in the KIP.  It is good to be specific with error codes.  +1.",
        "createdAt" : "2018-12-07T22:48:08Z",
        "updatedAt" : "2018-12-14T16:34:23Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "54d8dd54100b18957db07485d9ee0c37ad4476c8",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +875,879 @@          case e: OffsetNotAvailableException =>\n            if(request.header.apiVersion >= 5) {\n              buildErrorResponse(Errors.forException(e))\n            } else {\n              buildErrorResponse(Errors.LEADER_NOT_AVAILABLE)"
  }
]