[
  {
    "id" : "f8838cef-a6c5-43a3-aed9-0230950feb73",
    "prId" : 4263,
    "prUrl" : "https://github.com/apache/kafka/pull/4263#pullrequestreview-90080648",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb4a6f64-b599-495f-a11c-a43d98ea66be",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Do you think it's intentional for the log level to be so high for an invalid request?",
        "createdAt" : "2018-01-08T18:20:15Z",
        "updatedAt" : "2018-01-19T13:34:10Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "ff9939a3-a4bb-4460-87e7-b7cd08baa849",
        "parentId" : "bb4a6f64-b599-495f-a11c-a43d98ea66be",
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "It is like this in all the methods in AdminManager, but perhaps it shouldn't be? I will raise a JIRA to change it.",
        "createdAt" : "2018-01-10T16:57:30Z",
        "updatedAt" : "2018-01-19T13:34:10Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "9113b1b8-eeb6-4c5b-a044-2cbd51d79127",
        "parentId" : "bb4a6f64-b599-495f-a11c-a43d98ea66be",
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "Raised KAFKA-6463.",
        "createdAt" : "2018-01-19T11:15:00Z",
        "updatedAt" : "2018-01-19T13:34:10Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d7e19562c3db9e224ad0933b90f58446641c527",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +384,388 @@        case e @ (_: ConfigException | _: IllegalArgumentException) =>\n          val message = s\"Invalid config value for resource $resource: ${e.getMessage}\"\n          info(message)\n          resource -> ApiError.fromThrowable(new InvalidRequestException(message, e))\n        case e: Throwable =>"
  },
  {
    "id" : "fbe31c69-b209-4606-a5f8-f0afba4a575a",
    "prId" : 4263,
    "prUrl" : "https://github.com/apache/kafka/pull/4263#pullrequestreview-90113325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bb12bc2-e177-4711-95f8-7fd5cd1796c6",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "It's a tad vexing that we build the full synonym list only to pick the first entry when `includeSynonyms` is false. Probably not too big of a deal though.",
        "createdAt" : "2018-01-18T21:14:51Z",
        "updatedAt" : "2018-01-19T13:34:10Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "93aef511-cb13-45f4-9b6f-2c7d9ee47bc5",
        "parentId" : "2bb12bc2-e177-4711-95f8-7fd5cd1796c6",
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "Since it is not a performance-critical code path, it felt easier to use a single method.",
        "createdAt" : "2018-01-19T13:40:26Z",
        "updatedAt" : "2018-01-19T13:40:26Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d7e19562c3db9e224ad0933b90f58446641c527",
    "line" : 191,
    "diffHunk" : "@@ -1,1 +456,460 @@    }\n    val source = if (allSynonyms.isEmpty) ConfigSource.DEFAULT_CONFIG else allSynonyms.head.source\n    val synonyms = if (!includeSynonyms) List.empty else allSynonyms\n    new DescribeConfigsResponse.ConfigEntry(name, valueAsString, source, isSensitive, false, synonyms.asJava)\n  }"
  },
  {
    "id" : "7e148985-c7ba-44b2-94a3-e93b574e554a",
    "prId" : 6247,
    "prUrl" : "https://github.com/apache/kafka/pull/6247#pullrequestreview-205321999",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fac385be-852d-4090-ba85-9f476ebf48f6",
        "parentId" : null,
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "nit: In scala, do we use parentheses for simple getters? I remember we don't but I very well may be wrong",
        "createdAt" : "2019-02-18T13:44:18Z",
        "updatedAt" : "2019-04-13T16:04:28Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      },
      {
        "id" : "981496c5-f6fa-4ab0-8922-bfd9806efa29",
        "parentId" : "fac385be-852d-4090-ba85-9f476ebf48f6",
        "authorId" : "915b2f67-05e6-4824-939a-398e7be58870",
        "body" : "we are not strictly following this. but i will update if any concerns.\r\ncc @ijuma ",
        "createdAt" : "2019-02-19T16:39:17Z",
        "updatedAt" : "2019-04-13T16:04:28Z",
        "lastEditedBy" : "915b2f67-05e6-4824-939a-398e7be58870",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf81f6c6e266fe058527609c60fb163035b70509",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +457,461 @@          throw new InvalidRequestException(s\"Error due to duplicate config keys : ${duplicateKeys.mkString(\",\")}\")\n\n        val configEntriesMap = alterConfigOps.map(entry => (entry.configEntry().name(), entry.configEntry().value())).toMap\n\n        resource.`type` match {"
  },
  {
    "id" : "fa9238a9-8051-4a58-ac16-aee5f2a55c48",
    "prId" : 6247,
    "prUrl" : "https://github.com/apache/kafka/pull/6247#pullrequestreview-204756693",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fcf536e-05a0-4544-bf93-4cd352d6c9f7",
        "parentId" : null,
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "👍 on the refactor",
        "createdAt" : "2019-02-18T14:06:10Z",
        "updatedAt" : "2019-04-13T16:04:28Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf81f6c6e266fe058527609c60fb163035b70509",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +377,381 @@\n        resource.`type` match {\n          case ConfigResource.Type.TOPIC => alterTopicConfigs(resource, validateOnly, configProps, configEntriesMap)\n          case ConfigResource.Type.BROKER => alterBrokerConfigs(resource, validateOnly, configProps, configEntriesMap)\n          case resourceType =>"
  },
  {
    "id" : "438201e9-c509-40f8-b2e5-17d8e1cd533b",
    "prId" : 7493,
    "prUrl" : "https://github.com/apache/kafka/pull/7493#pullrequestreview-337803249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49b87cae-5af6-4054-b2e6-09ccdadabae9",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "nit: did the alignment get messed up below?",
        "createdAt" : "2019-12-03T23:33:40Z",
        "updatedAt" : "2020-01-07T19:58:36Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "30a09c6e-75e4-46ea-83ed-e935fb4bebb1",
        "parentId" : "49b87cae-5af6-4054-b2e6-09ccdadabae9",
        "authorId" : "e61d770a-e328-41b4-b8c3-6a769370680c",
        "body" : "Fixed.",
        "createdAt" : "2020-01-02T18:56:51Z",
        "updatedAt" : "2020-01-07T19:58:36Z",
        "lastEditedBy" : "e61d770a-e328-41b4-b8c3-6a769370680c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0128e030e3559cde3be5395c63b4b055768546ab",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +297,301 @@              createPartitionAssignment => createPartitionAssignment.brokerIds.asScala.map(_.toInt)\n            }\n            val unknownBrokers = assignments.flatten.toSet -- allBrokerIds\n            if (unknownBrokers.nonEmpty)\n              throw new InvalidReplicaAssignmentException("
  },
  {
    "id" : "07a04a96-b9b8-443c-8f87-ae98525b4716",
    "prId" : 8083,
    "prUrl" : "https://github.com/apache/kafka/pull/8083#pullrequestreview-372401262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5b455e7-0d12-46c7-82ce-36653dd6e0d0",
        "parentId" : null,
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "If it's not supported, it shouldn't silently return incorrect data.  It should throw an `UnsupportedVersionException`",
        "createdAt" : "2020-03-10T17:25:21Z",
        "updatedAt" : "2020-03-14T00:26:11Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "6a7644aa-4c14-49cc-a37c-62a54b5e8969",
        "parentId" : "f5b455e7-0d12-46c7-82ce-36653dd6e0d0",
        "authorId" : "98b12f1a-2624-4608-85a1-ec49503fd316",
        "body" : "Done.",
        "createdAt" : "2020-03-11T00:08:08Z",
        "updatedAt" : "2020-03-14T00:26:11Z",
        "lastEditedBy" : "98b12f1a-2624-4608-85a1-ec49503fd316",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fb5904d862a544d2c6bb718d4584f8723ec0ce4",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +755,759 @@          throw new InvalidRequestException(s\"Unexpected empty filter component entity type\")\n        case et =>\n          // Supplying other entity types is not yet supported.\n          throw new UnsupportedVersionException(s\"Custom entity type '${et}' not supported\")\n      }"
  },
  {
    "id" : "9dfafb45-75a2-4f9f-a463-c285f85a6893",
    "prId" : 8723,
    "prUrl" : "https://github.com/apache/kafka/pull/8723#pullrequestreview-420799908",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5fce513-1f92-456f-aa8e-ca32e2fe178f",
        "parentId" : null,
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "case _ => UNKNOWN or throw an exception?",
        "createdAt" : "2020-05-29T08:51:47Z",
        "updatedAt" : "2020-05-29T18:45:38Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "c1fc52c2-097f-4105-bd5d-b11d3da82596",
        "parentId" : "b5fce513-1f92-456f-aa8e-ca32e2fe178f",
        "authorId" : "8a152ec3-451b-4643-9675-878158d11b22",
        "body" : " Return UNKNOWN to prevent older clients from breaking",
        "createdAt" : "2020-05-29T09:36:09Z",
        "updatedAt" : "2020-05-29T18:45:38Z",
        "lastEditedBy" : "8a152ec3-451b-4643-9675-878158d11b22",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c104079898cb4b1034d90ba5586557b26d55425",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +675,679 @@      case ConfigDef.Type.LIST => DescribeConfigsResponse.ConfigType.LIST\n      case ConfigDef.Type.CLASS => DescribeConfigsResponse.ConfigType.CLASS\n      case ConfigDef.Type.PASSWORD => DescribeConfigsResponse.ConfigType.PASSWORD\n      case _ => DescribeConfigsResponse.ConfigType.UNKNOWN\n    }"
  },
  {
    "id" : "67de67c8-58e3-4771-b170-1b4a65fcd1dc",
    "prId" : 8933,
    "prUrl" : "https://github.com/apache/kafka/pull/8933#pullrequestreview-450439085",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cef976c9-8217-428f-af2c-bee48d137c9a",
        "parentId" : null,
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "Shouldn't validateOnly tell you know much you would have been throttled?",
        "createdAt" : "2020-07-16T14:32:14Z",
        "updatedAt" : "2020-07-22T13:19:12Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "9f56e32b-75e5-4b93-9fa3-57c1d773f532",
        "parentId" : "cef976c9-8217-428f-af2c-bee48d137c9a",
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "That's a great question. If I remember correctly, someone brought this up in the DISCUSS thread a while back.\r\n\r\nThe main issue is that we can't use the `throttleTimeMs` field to give back this information to the client because the java client would consider this as a quota violation and would throttle the connection. If we want to do this, we would need to find another way to convey this to the client. I don't think that it is worth it.\r\n\r\nMoreover, as the validation of the request doesn't not entail any creations nor deletions, I would find strange to actually return `ThrottlingQuotaExceededException` with a `throttleTimeMs` to the client. `ThrottlingQuotaExceededException` would actually mean \"the validation has passed but you would have been throttled if you would have executed that request\" which is not intuitive if you care about validating the request only.",
        "createdAt" : "2020-07-17T07:39:56Z",
        "updatedAt" : "2020-07-22T13:19:12Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7013e950461b6a05a246b7903b4d817dd3c5ed3",
    "line" : 314,
    "diffHunk" : "@@ -1,1 +337,341 @@\n        if (validateOnly) {\n          CreatePartitionsMetadata(topic, (existingAssignment ++ assignmentForNewPartitions).keySet)\n        } else {\n          controllerMutationQuota.record(numPartitionsIncrement)"
  },
  {
    "id" : "8f04ff89-a18e-4c0d-bcca-b34f6cd56c46",
    "prId" : 9628,
    "prUrl" : "https://github.com/apache/kafka/pull/9628#pullrequestreview-542901175",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7303c0e7-9796-4386-8cdf-f8f26ba47fe9",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "Should we also provide a better error message if the user mixes up IP and user/clientId?",
        "createdAt" : "2020-12-02T16:05:41Z",
        "updatedAt" : "2020-12-09T17:22:13Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      }
    ],
    "commit" : "a781ee70fd166c1e0773da21112a2dcd721b658a",
    "line" : 196,
    "diffHunk" : "@@ -1,1 +1002,1006 @@        case (_, _, Some(_)) => throw new InvalidRequestException(s\"Invalid quota entity combination, \" +\n          s\"IP entity should not be used with user/client ID entity.\")\n        case _ => throw new InvalidRequestException(\"Invalid client quota entity\")\n      }\n"
  },
  {
    "id" : "54fc476d-370f-48da-9291-0a40b9f8ee2c",
    "prId" : 9628,
    "prUrl" : "https://github.com/apache/kafka/pull/9628#pullrequestreview-544146059",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78b9e211-9d5e-43b9-8749-9f558bd62fec",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "I am not sure to understand why you have removed `flatten` here. Could you elaborate a bit on this please?",
        "createdAt" : "2020-12-02T16:17:09Z",
        "updatedAt" : "2020-12-09T17:22:13Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "a9f87562-d29b-4150-b2f6-2df96d799220",
        "parentId" : "78b9e211-9d5e-43b9-8749-9f558bd62fec",
        "authorId" : "e400c702-fb4f-4635-8164-bc79063a89a7",
        "body" : "this was just a coding style change, from calling `entries.map(...).flatten()` => `entries.flatMap()`",
        "createdAt" : "2020-12-02T21:31:14Z",
        "updatedAt" : "2020-12-09T17:22:13Z",
        "lastEditedBy" : "e400c702-fb4f-4635-8164-bc79063a89a7",
        "tags" : [
        ]
      },
      {
        "id" : "85a8a1e7-e618-4075-a8aa-a9928579fb87",
        "parentId" : "78b9e211-9d5e-43b9-8749-9f558bd62fec",
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "Ah. I missed the `flatMap`. That makes sense, thanks.",
        "createdAt" : "2020-12-03T16:31:41Z",
        "updatedAt" : "2020-12-09T17:22:13Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      }
    ],
    "commit" : "a781ee70fd166c1e0773da21112a2dcd721b658a",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +961,965 @@      else\n        None\n    }.toMap\n  }\n"
  },
  {
    "id" : "d2f75065-3243-4c6f-bd17-ec46b0d4f403",
    "prId" : 9628,
    "prUrl" : "https://github.com/apache/kafka/pull/9628#pullrequestreview-545001373",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2512abcd-b819-474c-b714-5cad4720ee87",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "It seems that we should validate the provided `ip` somewhere here. I just tried with the following command:\r\n```\r\n./bin/kafka-configs.sh --bootstrap-server localhost:9092 --alter --entity-type ips --entity-name ip --add-config  connection_creation_rate=10\r\n```\r\nThe command completes but then the broker fails while applying the configuration:\r\n```\r\n[2020-12-04 15:31:01,951] ERROR error processing change notification {\"version\":2,\"entity_path\":\"ips/ip\"} from /config/changes/config_change_0000000001 (kafka.common.ZkNodeChangeNotificationListener)\r\njava.lang.IllegalArgumentException: Unable to resolve address ip\r\n\tat kafka.server.IpConfigHandler.processConfigChanges(ConfigHandler.scala:199)\r\n\tat kafka.server.DynamicConfigManager$ConfigChangedNotificationHandler$.processEntityConfigChangeVersion2(DynamicConfigManager.scala:151)\r\n\tat kafka.server.DynamicConfigManager$ConfigChangedNotificationHandler$.$anonfun$processNotification$1(DynamicConfigManager.scala:105)\r\n\tat kafka.server.DynamicConfigManager$ConfigChangedNotificationHandler$.processNotification(DynamicConfigManager.scala:96)\r\n\tat kafka.common.ZkNodeChangeNotificationListener.$anonfun$processNotification$1(ZkNodeChangeNotificationListener.scala:106)\r\n\tat kafka.common.ZkNodeChangeNotificationListener.processNotification(ZkNodeChangeNotificationListener.scala:106)\r\n\tat kafka.common.ZkNodeChangeNotificationListener.$anonfun$processNotifications$2(ZkNodeChangeNotificationListener.scala:90)\r\n\tat kafka.common.ZkNodeChangeNotificationListener.$anonfun$processNotifications$2$adapted(ZkNodeChangeNotificationListener.scala:87)\r\n\tat scala.collection.IterableOnceOps.foreach(IterableOnce.scala:563)\r\n\tat scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:561)\r\n\tat scala.collection.AbstractIterable.foreach(Iterable.scala:919)\r\n\tat kafka.common.ZkNodeChangeNotificationListener.kafka$common$ZkNodeChangeNotificationListener$$processNotifications(ZkNodeChangeNotificationListener.scala:87)\r\n\tat kafka.common.ZkNodeChangeNotificationListener$ChangeNotification.process(ZkNodeChangeNotificationListener.scala:120)\r\n\tat kafka.common.ZkNodeChangeNotificationListener$ChangeEventProcessThread.doWork(ZkNodeChangeNotificationListener.scala:146)\r\n\tat kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96)\r\n```\r\n\r\nIt would be good to cover this in the tests, both for the command and the api.\r\n\r\nThis is also true with:\r\n```\r\n./bin/kafka-configs.sh --zookeeper localhost:2181 --alter --ip ip --add-config connection_creation_rate=2\r\n```",
        "createdAt" : "2020-12-04T14:31:40Z",
        "updatedAt" : "2020-12-09T17:22:13Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      }
    ],
    "commit" : "a781ee70fd166c1e0773da21112a2dcd721b658a",
    "line" : 186,
    "diffHunk" : "@@ -1,1 +992,996 @@  def alterClientQuotas(entries: Seq[ClientQuotaAlteration], validateOnly: Boolean): Map[ClientQuotaEntity, ApiError] = {\n    def alterEntityQuotas(entity: ClientQuotaEntity, ops: Iterable[ClientQuotaAlteration.Op]): Unit = {\n      val (path, configType, configKeys) = parseAndSanitizeQuotaEntity(entity) match {\n        case (Some(user), Some(clientId), None) => (user + \"/clients/\" + clientId, ConfigType.User, DynamicConfig.User.configKeys)\n        case (Some(user), None, None) => (user, ConfigType.User, DynamicConfig.User.configKeys)"
  },
  {
    "id" : "2cdb16f9-3bb0-457d-8f3f-359e80010cfe",
    "prId" : 9628,
    "prUrl" : "https://github.com/apache/kafka/pull/9628#pullrequestreview-546283247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a476a2c7-f8b2-4cd3-8cec-adfd93c2a651",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "nit: Shouldn't we use `(Some(_), Some(_), Some(_))` here in order to be really accurate? As it is, the first two could be anything. That works because it is after all the others but I would prefer to be explicit if possible.",
        "createdAt" : "2020-12-04T15:02:32Z",
        "updatedAt" : "2020-12-09T17:22:13Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "704406a2-ab5c-4574-afb9-dab67d37f8ed",
        "parentId" : "a476a2c7-f8b2-4cd3-8cec-adfd93c2a651",
        "authorId" : "e400c702-fb4f-4635-8164-bc79063a89a7",
        "body" : "i used `(_, _, Some(_))` for this case, because we want to throw the more verbose exception in all of these cases:\r\n\r\n`(Some(_), None, Some(_))` => specifying a user and IP, but no client\r\n`(None, Some, Some)` => specifying client and IP, but no user\r\n`(Some, Some, Some)` => specifying client, user and IP\r\n\r\nbasically any time there is a client OR user specified along with IP. I felt like adding all three cases would be pretty verbose, so I relied on the ordering of the cases instead.\r\n",
        "createdAt" : "2020-12-04T16:55:46Z",
        "updatedAt" : "2020-12-09T17:22:13Z",
        "lastEditedBy" : "e400c702-fb4f-4635-8164-bc79063a89a7",
        "tags" : [
        ]
      },
      {
        "id" : "66cceb56-9f1e-436e-a992-28ab3fedaf93",
        "parentId" : "a476a2c7-f8b2-4cd3-8cec-adfd93c2a651",
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "Thanks for the explanation. That makes sense.",
        "createdAt" : "2020-12-07T15:53:14Z",
        "updatedAt" : "2020-12-09T17:22:13Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      }
    ],
    "commit" : "a781ee70fd166c1e0773da21112a2dcd721b658a",
    "line" : 194,
    "diffHunk" : "@@ -1,1 +1000,1004 @@            throw new InvalidRequestException(s\"$ip is not a valid IP or resolvable host.\")\n          (ip, ConfigType.Ip, DynamicConfig.Ip.configKeys)\n        case (_, _, Some(_)) => throw new InvalidRequestException(s\"Invalid quota entity combination, \" +\n          s\"IP entity should not be used with user/client ID entity.\")\n        case _ => throw new InvalidRequestException(\"Invalid client quota entity\")"
  }
]