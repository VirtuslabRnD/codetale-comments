[
  {
    "id" : "8fb8a731-e654-47b3-96f3-4ea30f4f454c",
    "prId" : 2983,
    "prUrl" : "https://github.com/typelevel/cats/pull/2983#pullrequestreview-275345364",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62945107-4ae5-49b2-b24c-d020f8369ee1",
        "parentId" : null,
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "Can we use an abstract class for objects from both scala specific versions to inherit from and remove the duplication? ",
        "createdAt" : "2019-08-09T13:40:30Z",
        "updatedAt" : "2019-08-22T07:17:11Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "89c13dd5-2593-44fc-93a6-7ebce68bbdae",
        "parentId" : "62945107-4ae5-49b2-b24c-d020f8369ee1",
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "Not without dropping in some `lazy val`s. Here's a minimization:\r\n```scala\r\npackage foo\r\n\r\npackage object bar extends BarPackage\r\npackage bar {\r\n  abstract class BarPackage {\r\n    object baz extends Baz\r\n  }\r\n  trait Baz {\r\n    val x = foo.bar.baz\r\n  }\r\n}\r\n```\r\nReferring to `baz` will stack overflow.",
        "createdAt" : "2019-08-15T09:46:51Z",
        "updatedAt" : "2019-08-22T07:17:11Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a1c3340dc0f84cbc1e1d7fce3c4dd034aa8c957",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1,5 @@package cats\n\npackage object instances {\n  object all\n      extends AllInstances"
  }
]