[
  {
    "id" : "3156f3be-c4ec-4228-a3b3-29db123f3022",
    "prId" : 6327,
    "prUrl" : "https://github.com/root-project/root/pull/6327#pullrequestreview-539377351",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3419ee8b-2ba6-4654-a746-cbeed479b7d6",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "missing includes for `size_t`, `std::enable_if`, `std::result_of`, `std::initializer_list`, `std::move`",
        "createdAt" : "2020-11-18T10:31:33Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "8e57a0f6-d63d-4c34-b7f3-50343e97b832",
        "parentId" : "3419ee8b-2ba6-4654-a746-cbeed479b7d6",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "still missing?",
        "createdAt" : "2020-11-25T18:27:16Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "5ea490bf-f58d-4613-854c-0cd708c6ad85",
        "parentId" : "3419ee8b-2ba6-4654-a746-cbeed479b7d6",
        "authorId" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "body" : "argh",
        "createdAt" : "2020-11-26T14:48:59Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9bb54fda49f27cbb93130686b4d2cf0471f63c",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +20,24 @@#include <type_traits> //std::enable_if, std::result_of\n#include <utility> //std::move\n#include <vector>\n\n//////////////////////////////////////////////////////////////////////////"
  },
  {
    "id" : "5cafdc3f-a4bf-467b-8232-c3dc7ea00a71",
    "prId" : 6327,
    "prUrl" : "https://github.com/root-project/root/pull/6327#pullrequestreview-533276537",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f5b0a54-aa17-46c4-836e-6dfdb58cd404",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "`Reduce` should also be mentioned here",
        "createdAt" : "2020-11-18T10:36:15Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9bb54fda49f27cbb93130686b4d2cf0471f63c",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +93,97 @@///\n/// ~~~\n///\n//////////////////////////////////////////////////////////////////////////\n"
  },
  {
    "id" : "33c7f82b-0ed0-4419-b3fc-56fc2035f819",
    "prId" : 6327,
    "prUrl" : "https://github.com/root-project/root/pull/6327#pullrequestreview-533276537",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73ab0c4e-027e-436a-9ab5-cb54600badc7",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "why do we need both the non-const and the const reference overloads? ",
        "createdAt" : "2020-11-18T11:17:11Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9bb54fda49f27cbb93130686b4d2cf0471f63c",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +123,127 @@   auto Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>;\n   template<class F, class T, class Cond = noReferenceCond<F, T>>\n   auto Map(F func, const std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>;\n\n   // MapReduce"
  },
  {
    "id" : "c8780da9-8a1b-4235-9b13-4c75ebe5d2fa",
    "prId" : 6327,
    "prUrl" : "https://github.com/root-project/root/pull/6327#pullrequestreview-536492470",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5bf7e28-6aaa-4b40-8347-bf61f4c6f3f7",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I don't understand these two `MapReduce` signatures, where is the `Reduce`?",
        "createdAt" : "2020-11-18T11:19:12Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "1d2b296a-e8b1-4183-976f-e1ab5fdcfa15",
        "parentId" : "e5bf7e28-6aaa-4b40-8347-bf61f4c6f3f7",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I guess the argument should be a `std::vector<TObject*>` if we want to use TObject's `Merge`?",
        "createdAt" : "2020-11-20T13:57:29Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "23903740-08b8-4f3c-930c-c84a6aaf6941",
        "parentId" : "e5bf7e28-6aaa-4b40-8347-bf61f4c6f3f7",
        "authorId" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "body" : "I am not sure all TObjects implement Merge, but it will improve it, yes",
        "createdAt" : "2020-11-23T13:23:55Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "tags" : [
        ]
      },
      {
        "id" : "59323e75-4d88-4f4a-8f17-c4269e025d97",
        "parentId" : "e5bf7e28-6aaa-4b40-8347-bf61f4c6f3f7",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "iiuc there are two requirements on `T`, one is that `T` inherits from `TObject`, the other that it implements the `Merge` method with `TObject`'s signature.\r\n\r\nI think at compile-time one can easily check for the first but not the second.",
        "createdAt" : "2020-11-23T13:39:07Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "9eb9d8f5-da93-4197-a6f5-4fd1629258bb",
        "parentId" : "e5bf7e28-6aaa-4b40-8347-bf61f4c6f3f7",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "You can make sure that `T::Merge` is callable with the right arguments. I don't know whether its return type must be convertible to `bool` or whatever, but even that you can require. See e.g. https://github.com/root-project/root/blob/master/interpreter/cling/include/cling/Interpreter/RuntimePrintValue.h#L156:L158",
        "createdAt" : "2020-11-23T13:43:24Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "91066e6b-b88d-4c0b-8504-088f5bb33caa",
        "parentId" : "e5bf7e28-6aaa-4b40-8347-bf61f4c6f3f7",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "@Axel-Naumann doesn't work for polymorphic uses of `TObject*`, does it?",
        "createdAt" : "2020-11-23T13:48:02Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "15009332-dcaa-4ca4-97cc-2b376de66d1e",
        "parentId" : "e5bf7e28-6aaa-4b40-8347-bf61f4c6f3f7",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "If the `vector<T*>` has `TObject` as `T` then, no. But I don't think that's possible, because IIRC there's no `TObject::Merge`? So you should be able to check that `T::Merge` is callable?",
        "createdAt" : "2020-11-23T13:51:44Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "e0b9f0ee-75d9-4657-ba5f-ac4522a77881",
        "parentId" : "e5bf7e28-6aaa-4b40-8347-bf61f4c6f3f7",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "ah my bad, my whole line of reasoning in this thread is that `TObject::Merge` exists and is pure virtual. @xvallspl feel free to resolve, thank you @Axel-Naumann ",
        "createdAt" : "2020-11-23T13:55:13Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9bb54fda49f27cbb93130686b4d2cf0471f63c",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +141,145 @@   T* MapReduce(F func, std::vector<T*> &args);\n   template<class F, class T,class Cond = noReferenceCond<F, T>>\n   T* MapReduce(F func, const std::vector<T*> &args);\n\n   template<class T> T* Reduce(const std::vector<T*> &mergeObjs);"
  },
  {
    "id" : "b768219b-31ee-46de-952a-febd4fd805bd",
    "prId" : 6327,
    "prUrl" : "https://github.com/root-project/root/pull/6327#pullrequestreview-533276537",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c759af3e-cdb9-4d61-9d7b-766c20e7d14b",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "```suggestion\r\n/// \\brief Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one using their `Merge` method.\r\n///\r\n/// \\param func Function to be executed on the elements of the vector passed as second parameter.\r\n/// \\param args Immutableector of elements passed as an argument to `func`.\r\n/// \\return A value result of \"reducing\" the vector returned by the Map operation into a single object.\r\n```",
        "createdAt" : "2020-11-18T11:28:04Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9bb54fda49f27cbb93130686b4d2cf0471f63c",
    "line" : 325,
    "diffHunk" : "@@ -1,1 +323,327 @@/// \\param args Immutableector of elements passed as an argument to `func`.\n/// \\param redfunc Reduction function to combine the results of the calls to `func`. Must return the same type as `func`.\n/// \\return A value result of \"reducing\" the vector returned by the Map operation into a single object.\ntemplate<class SubC> template<class F, class T, class Cond>\nT* TExecutorCRTP<SubC>::MapReduce(F func, const std::vector<T*> &args)"
  },
  {
    "id" : "c31e0d69-b6df-4858-96d2-d56f85cf868c",
    "prId" : 6327,
    "prUrl" : "https://github.com/root-project/root/pull/6327#pullrequestreview-536468662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2b0089b-19eb-4c70-9a99-b95bd757456c",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "`decltype(redfunc(objs))` seems to indicate that the return type of `redfunc` could be different from `T`, but `MapReduce` assumes that it is the same as `T`. Maybe just return `T`?",
        "createdAt" : "2020-11-18T11:31:50Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "906ec662-a726-41d0-bfa6-ea66507da695",
        "parentId" : "b2b0089b-19eb-4c70-9a99-b95bd757456c",
        "authorId" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "body" : "Good catch!\r\n\r\nIs this something we want though? Or we want the user to decide what does he want to reduce to? I can adapt the MapReduce signature to extend the functionality if so",
        "createdAt" : "2020-11-20T14:53:35Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "tags" : [
        ]
      },
      {
        "id" : "4c5cf6bb-e387-4dcc-81ab-3270ee87e5fb",
        "parentId" : "b2b0089b-19eb-4c70-9a99-b95bd757456c",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I think there is enough meat in this PR as it is :stuck_out_tongue_winking_eye: ",
        "createdAt" : "2020-11-20T14:57:50Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "20e9ba44-ba4d-4044-a277-16bbcbbc40cf",
        "parentId" : "b2b0089b-19eb-4c70-9a99-b95bd757456c",
        "authorId" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "body" : "hahaha. Yes, but then I would not touch it yet.",
        "createdAt" : "2020-11-20T15:20:44Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "tags" : [
        ]
      },
      {
        "id" : "a8baef2f-0226-4c41-a27b-c0c3a80e0ef9",
        "parentId" : "b2b0089b-19eb-4c70-9a99-b95bd757456c",
        "authorId" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "body" : "I'll add a note in the work for subsequent PRs part of the description",
        "createdAt" : "2020-11-23T13:25:38Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9bb54fda49f27cbb93130686b4d2cf0471f63c",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +144,148 @@\n   template<class T> T* Reduce(const std::vector<T*> &mergeObjs);\n   template<class T, class R> auto Reduce(const std::vector<T> &objs, R redfunc) -> decltype(redfunc(objs));\n\n   //////////////////////////////////////////////////////////////////////////"
  },
  {
    "id" : "172ecbd9-96a3-4051-b53b-dfd156a25f4f",
    "prId" : 6327,
    "prUrl" : "https://github.com/root-project/root/pull/6327#pullrequestreview-533530312",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4040ffa-c73e-409d-9e1b-2aba56182e13",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I _think_ we can require just the `const&` overload?",
        "createdAt" : "2020-11-18T11:39:34Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "35eb0648-8fc0-4d98-a58f-ed659be1fd25",
        "parentId" : "a4040ffa-c73e-409d-9e1b-2aba56182e13",
        "authorId" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "body" : "I didn't want to break the case where the user is passing a function that modifies the input vector.",
        "createdAt" : "2020-11-18T14:57:33Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9bb54fda49f27cbb93130686b4d2cf0471f63c",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +170,174 @@   /// Implementation of the Map method, left to the derived classes\n   template<class F, class T, class Cond = noReferenceCond<F, T>>\n   auto MapImpl(F func, const std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type> = delete;\n\n};"
  },
  {
    "id" : "b8314efa-5c1c-42cd-8211-6c11211376a7",
    "prId" : 6327,
    "prUrl" : "https://github.com/root-project/root/pull/6327#pullrequestreview-536519391",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06448555-1c61-4e29-a5ad-86693c397635",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "argh why is this `(objs, redfunc)` while `Map` is `(mapfunc, objs)`? :sweat_smile: but it's too late to change I guess...",
        "createdAt" : "2020-11-18T11:42:14Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "374b9e63-dda3-40bc-b37a-78795b2facfd",
        "parentId" : "06448555-1c61-4e29-a5ad-86693c397635",
        "authorId" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "body" : "You will have to ask the Enrico Guiraud from summer 2015 😅",
        "createdAt" : "2020-11-18T14:59:24Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "tags" : [
        ]
      },
      {
        "id" : "8f9a0a1c-9040-4a12-92dd-8fc1c4df521f",
        "parentId" : "06448555-1c61-4e29-a5ad-86693c397635",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "ugh",
        "createdAt" : "2020-11-20T13:57:58Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "8a68eed7-6406-4cbe-acee-ba5d14b99763",
        "parentId" : "06448555-1c61-4e29-a5ad-86693c397635",
        "authorId" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "body" : "Oh, because of the other reduce signature that doesn't take a reduction function, duh.\r\n\r\nMaybe Map is the one who should have taken the map function as second argument 🤷‍♂️ ",
        "createdAt" : "2020-11-23T14:22:46Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "tags" : [
        ]
      },
      {
        "id" : "b9fb92da-47e8-4831-874f-36140e0333ad",
        "parentId" : "06448555-1c61-4e29-a5ad-86693c397635",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "anyways...marking as \"resolved\" :D",
        "createdAt" : "2020-11-23T14:25:22Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9bb54fda49f27cbb93130686b4d2cf0471f63c",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +144,148 @@\n   template<class T> T* Reduce(const std::vector<T*> &mergeObjs);\n   template<class T, class R> auto Reduce(const std::vector<T> &objs, R redfunc) -> decltype(redfunc(objs));\n\n   //////////////////////////////////////////////////////////////////////////"
  },
  {
    "id" : "5854bd03-79de-4558-a096-96122fab6e3d",
    "prId" : 6327,
    "prUrl" : "https://github.com/root-project/root/pull/6327#pullrequestreview-533276537",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1803cfe-13b3-4fce-b9ce-c5c6f3501f3e",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "should probably add a static_assert that verifies `T` derives from `TObject`, it should provide a better error message if users don't comply",
        "createdAt" : "2020-11-18T11:45:58Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9bb54fda49f27cbb93130686b4d2cf0471f63c",
    "line" : 316,
    "diffHunk" : "@@ -1,1 +314,318 @@T* TExecutorCRTP<SubC>::MapReduce(F func, std::vector<T*> &args)\n{\n   return Reduce(Map(func, args));\n}\n"
  },
  {
    "id" : "5ff0506f-591f-461a-8077-cfebce656a06",
    "prId" : 6327,
    "prUrl" : "https://github.com/root-project/root/pull/6327#pullrequestreview-533276537",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3eea1e73-633a-4025-8e25-1c9fd8839aac",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "why does this overload only work on types derived from TObject?",
        "createdAt" : "2020-11-18T11:46:59Z",
        "updatedAt" : "2021-01-07T14:38:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd9bb54fda49f27cbb93130686b4d2cf0471f63c",
    "line" : 320,
    "diffHunk" : "@@ -1,1 +318,322 @@\n//////////////////////////////////////////////////////////////////////////\n/// \\brief Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce).\n///\n/// \\param func Function to be executed on the elements of the vector passed as second parameter."
  }
]