[
  {
    "id" : "d6a9dd43-eca7-4697-a931-a95d24b57497",
    "prId" : 3793,
    "prUrl" : "https://github.com/root-project/root/pull/3793#pullrequestreview-236102990",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4dd51baa-81b9-4b6c-ada2-e66465ade832",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "`inline` should not be part of `R__NEVER_INLINE`",
        "createdAt" : "2019-05-10T06:21:06Z",
        "updatedAt" : "2019-05-10T15:49:32Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "eb23caa8-bcce-4305-854b-85997278cc17",
        "parentId" : "4dd51baa-81b9-4b6c-ada2-e66465ade832",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "it is part of always_inline ....",
        "createdAt" : "2019-05-10T12:33:17Z",
        "updatedAt" : "2019-05-10T15:49:32Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "dc3ef423-44c1-44bb-8229-13929544f959",
        "parentId" : "4dd51baa-81b9-4b6c-ada2-e66465ade832",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Fair enough - I guess there's no use case for this without `inline` - or rather, any use case will happily accept having an `inline` keyword (i.e. even in-class method definitions)",
        "createdAt" : "2019-05-10T13:27:15Z",
        "updatedAt" : "2019-05-10T15:49:32Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "206e1306127011b53bda4f1283e048b88ed16796",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +575,579 @@// for other platforms.\n#ifdef R__HAS_ATTRIBUTE_NOINLINE\n#define R__NEVER_INLINE inline __attribute__((noinline))\n#else\n#if defined(_MSC_VER)"
  },
  {
    "id" : "d35c2c05-67df-46ea-aebc-779a6f22baf4",
    "prId" : 3793,
    "prUrl" : "https://github.com/root-project/root/pull/3793#pullrequestreview-236265121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23096398-2b0e-4282-9b1f-0a5e11e0dc2f",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Consider renaming to `R__NOINLINE` given that this is the spelling on all platforms that support this.",
        "createdAt" : "2019-05-10T06:21:20Z",
        "updatedAt" : "2019-05-10T15:49:32Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "648566a1-beea-4a29-8aad-161fd2c77921",
        "parentId" : "23096398-2b0e-4282-9b1f-0a5e11e0dc2f",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "I find NO_INLINE or NEVER_INLINE to be slight more readable ...\r\n\r\nAnd there exists one platorm (http://ftp.iar.se/WWWfiles/arm/webic/doc/EWARM_DevelopmentGuide.ENU.pdf) where it is spelled ```#pragma inline=never``` :) [yep not one of ours :) ]",
        "createdAt" : "2019-05-10T15:03:49Z",
        "updatedAt" : "2019-05-10T15:49:32Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "1d65fcd8-f946-4733-bf6e-7d37bb4e4cc1",
        "parentId" : "23096398-2b0e-4282-9b1f-0a5e11e0dc2f",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "and R__NEVER_INLINE is a 'good' opposite to R__ALWAYS_INLINE",
        "createdAt" : "2019-05-10T18:59:46Z",
        "updatedAt" : "2019-05-10T18:59:47Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "206e1306127011b53bda4f1283e048b88ed16796",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +575,579 @@// for other platforms.\n#ifdef R__HAS_ATTRIBUTE_NOINLINE\n#define R__NEVER_INLINE inline __attribute__((noinline))\n#else\n#if defined(_MSC_VER)"
  },
  {
    "id" : "cd7c5ce4-7242-4168-8f2f-2614f5233c97",
    "prId" : 3793,
    "prUrl" : "https://github.com/root-project/root/pull/3793#pullrequestreview-236128407",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1244d1ba-fd3e-41fb-87bd-119d360067e2",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "`#elif`?",
        "createdAt" : "2019-05-10T06:21:57Z",
        "updatedAt" : "2019-05-10T15:49:32Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "02e80e04-32c0-447c-909e-990c916a78ee",
        "parentId" : "1244d1ba-fd3e-41fb-87bd-119d360067e2",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Copy/paste from 10 lines above .. ",
        "createdAt" : "2019-05-10T14:14:38Z",
        "updatedAt" : "2019-05-10T15:49:32Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "206e1306127011b53bda4f1283e048b88ed16796",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +577,581 @@#define R__NEVER_INLINE inline __attribute__((noinline))\n#else\n#if defined(_MSC_VER)\n#define R__NEVER_INLINE inline  __declspec(noinline)\n#else"
  }
]