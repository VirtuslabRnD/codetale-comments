[
  {
    "id" : "879cd5ca-ea84-45e5-b9ab-65f79b9c513f",
    "prId" : 1510,
    "prUrl" : "https://github.com/root-project/root/pull/1510#pullrequestreview-100826443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1de9b92d-5e75-4ca1-ac4c-27c4ab1471e8",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Why should this take a `TString` as first argument, not a `const TString&`? The latter is more performant (doesn't copy the string).",
        "createdAt" : "2018-01-29T11:59:10Z",
        "updatedAt" : "2018-03-02T16:15:00Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "7acb736c-5217-4a57-9e08-a2b558d5a0a1",
        "parentId" : "1de9b92d-5e75-4ca1-ac4c-27c4ab1471e8",
        "authorId" : "9b509425-c4ef-41f9-aef4-9eba2da6b169",
        "body" : "For `operator+`, taking in the object by value is more performant because it will pass it through the output. It is like an `operator+=` but with copy elision. If it was `const TString&` we couldn't take advantage of this speed up.",
        "createdAt" : "2018-03-02T16:12:39Z",
        "updatedAt" : "2018-03-02T16:15:00Z",
        "lastEditedBy" : "9b509425-c4ef-41f9-aef4-9eba2da6b169",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cdbf05174a51801c81d7f53a885bdf53cdb4b4e",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +143,147 @@template<class T>\nfriend typename std::enable_if<ROOT::TypeTraits::IsSignedNumeral<T>::value,TString>::type\noperator+(TString s, T i);\ntemplate<class T>\nfriend typename std::enable_if<ROOT::TypeTraits::IsUnsignedNumeral<T>::value,TString>::type"
  },
  {
    "id" : "4d8b5044-e7e4-4a72-9bab-56cf59be1f6b",
    "prId" : 1510,
    "prUrl" : "https://github.com/root-project/root/pull/1510#pullrequestreview-100828735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e489be45-1238-4ecb-ad2b-6f036c15241d",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Can these become `friend`s?",
        "createdAt" : "2018-01-29T11:59:59Z",
        "updatedAt" : "2018-03-02T16:15:00Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "ffca7390-5f0a-4570-bb41-3c336eda9c0f",
        "parentId" : "e489be45-1238-4ecb-ad2b-6f036c15241d",
        "authorId" : "9b509425-c4ef-41f9-aef4-9eba2da6b169",
        "body" : "The `operator+=` should not be `friend` since it does not use `protected` data and the rest, which do use it, are marked `friend`.",
        "createdAt" : "2018-03-02T16:19:08Z",
        "updatedAt" : "2018-03-02T16:19:08Z",
        "lastEditedBy" : "9b509425-c4ef-41f9-aef4-9eba2da6b169",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cdbf05174a51801c81d7f53a885bdf53cdb4b4e",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +142,146 @@\ntemplate<class T>\nfriend typename std::enable_if<ROOT::TypeTraits::IsSignedNumeral<T>::value,TString>::type\noperator+(TString s, T i);\ntemplate<class T>"
  },
  {
    "id" : "706292d6-ad87-4c02-9b25-b91e010dc353",
    "prId" : 1510,
    "prUrl" : "https://github.com/root-project/root/pull/1510#pullrequestreview-101332528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d9737c0-dcfe-44ea-8ab6-96ef4a672b33",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Should we remove this commented out code or is it a reminder for future/alternative implementation?",
        "createdAt" : "2018-03-05T21:23:07Z",
        "updatedAt" : "2018-03-05T21:23:07Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cdbf05174a51801c81d7f53a885bdf53cdb4b4e",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +52,56 @@Bool_t  operator==(const TSubString &s1, const TString &s2);\nBool_t  operator==(const TSubString &s1, const char *s2);\n/*\ntemplate<class T>\nstruct is_signed_numeral : std::integral_constant<bool,"
  }
]