[
  {
    "id" : "e8c9034c-320a-4caa-9e93-6a0b7c50fda1",
    "prId" : 5097,
    "prUrl" : "https://github.com/root-project/root/pull/5097#pullrequestreview-370462203",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21e07291-d1c3-404c-acce-a1adb032dd1d",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Note that Delete/Purge never shrinks the file.   What it does is make the space (usually somewhere in the middle of the file) available for reuse.\r\nNote that the notion/separation of data vs meta-data that is mentioned in this addition is valid **solely** for TTree (and of course its derived clases TNTuple).\r\nFor example for an histogram the \"data\" and \"meta-data\" are both stored together in a single key and thus the kWriteDelete frees up/reuse all the space occupied for the histograms.\r\n\r\nFor TTree the story is more complicated.   In the usual case the data is written once (each branches will write its own series of TBaskets which are TKeys so, as far as the file is concerned a 'top level item' that is not registered with any TDirectory).\r\n\r\nOn the other hand the meta-data is usually written many time.  The TTree object (which contains the meta-data which includes where to find the data in the disk) is usually written many time (to allow for data recovery in case the process crashes before the natural end).  When you write this TTree object, you may want\r\n\r\n  * be safe and keep the back copy (cycles) for a while (this is the default, leads to 2 cycles per TTree)\r\n  * be slightly less safe and use kWriteDelete\r\n  * be daring and use kOverwrite\r\n\r\nIn ***none*** of those cases would you want the data to disappear ... because then it would be gone forever since the TTree object does not contain the data (except for the 'last' baskets) so the only copy is in the file.\r\n\r\nWhen users want to throwaway the data and replace it with something else, they usually have just created new files.\r\n\r\nEven if/when we support the \"throwaway the data and replace it\" mode, it will still be less efficient that creating a new file, as the new data may or may not fit in the 'hole in the file' left by the data-removal.",
        "createdAt" : "2020-03-06T15:34:44Z",
        "updatedAt" : "2020-03-24T17:58:31Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "8410690e-9e73-44ed-80fc-172e28c55066",
        "parentId" : "21e07291-d1c3-404c-acce-a1adb032dd1d",
        "authorId" : "678cc757-c5b5-4f52-b00d-db56d81b988d",
        "body" : "Added line clarifying the distinction between `TTree`s and other objects.",
        "createdAt" : "2020-03-06T16:37:53Z",
        "updatedAt" : "2020-03-24T17:58:31Z",
        "lastEditedBy" : "678cc757-c5b5-4f52-b00d-db56d81b988d",
        "tags" : [
        ]
      }
    ],
    "commit" : "632106d5394d4c8da900a07e23dcd368c588592a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +752,756 @@///  deleted only after the new object has been written. This option\n///  is safer than kOverwrite but it is slower.\n///  NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile--\n///  the space is simply freed up to be overwritten; in the case of a TTree,\n///  it is more complicated. If one opens a TTree, appends some entries,"
  }
]