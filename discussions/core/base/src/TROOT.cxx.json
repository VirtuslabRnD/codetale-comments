[
  {
    "id" : "d87a51a1-fa65-4148-a9e0-97d9e53656a9",
    "prId" : 130,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f04e8ae-8195-4224-92e9-c320211a4c5d",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Could `IgnorePrefix()` return `false` if `ROOTPREFIX` is not defined (I think ROOTPREFIX defined or not means ROOTBINDIR etc defined or not, so testing for one should be sufficient for all)? Then the logic here (and below) should become much simpler. Then maybe rename `IgnorePrefix()` into `UsePrefix()` and invert the logic.\n",
        "createdAt" : "2016-01-19T10:49:57Z",
        "updatedAt" : "2017-01-17T12:00:15Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac0702ca547393945b5880ded3ef317c80d1d269",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +2688,2692 @@const TString& TROOT::GetRootSys() {\n#ifdef ROOTPREFIX\n   if (IgnorePrefix()) {\n#endif\n      static TString rootsys;"
  },
  {
    "id" : "8a703073-8822-4aff-8dfc-3e92942b593c",
    "prId" : 130,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b22097e-4630-4745-b784-6a2f0f41c4c4",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "I'm scared about the thread-safety of this... Can we do\n\n```\nconst char* GetRootSysImpl() {\n  if (const char* rsEnv = gSystem->Getenv(\"ROOTSYS\")) {\n    return rsEnv;\n  }\n  return gRootDir;\n}\n```\n\nand then\n\n```\nstatic TString rootsys = GetRootSysImpl();\n```\n\n(or something that actually compiles, and enforces thread safety through initialization?) Same for the other incarnations below.\n",
        "createdAt" : "2016-01-19T10:54:15Z",
        "updatedAt" : "2017-01-17T12:00:15Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac0702ca547393945b5880ded3ef317c80d1d269",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +2691,2695 @@#endif\n      static TString rootsys;\n      if (rootsys.IsNull())\n         rootsys = gSystem->Getenv(\"ROOTSYS\");\n      if (rootsys.IsNull())"
  },
  {
    "id" : "289a02f1-6058-4f90-8a6b-d6e82cf949af",
    "prId" : 130,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d215f94d-97ef-47c4-a306-3c3559c09fb3",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Can we combine those 12 into (or a subset, e.g. the ROOTSYS-derived ones) into one, instead of having near-duplicate bodies? And yes, this might involve preprocessor macros :-(\n",
        "createdAt" : "2016-01-19T10:58:42Z",
        "updatedAt" : "2017-01-17T12:00:15Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac0702ca547393945b5880ded3ef317c80d1d269",
    "line" : 347,
    "diffHunk" : "@@ -1,1 +2921,2925 @@      const static TString ttffontdir = TTFFONTDIR;\n      return ttffontdir;\n   }\n#endif\n}"
  },
  {
    "id" : "7dd25ca9-66c0-49ae-9b34-a29e527b5b34",
    "prId" : 794,
    "prUrl" : "https://github.com/root-project/root/pull/794#pullrequestreview-58825950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48e23fdd-a4ab-4683-8f1a-877ac8b09f3f",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "FYI.  The  intent was to move the 'good delete' out of the #ifdef and keep the bad one hidden behind it ....  ",
        "createdAt" : "2017-08-27T15:56:33Z",
        "updatedAt" : "2017-08-27T15:56:33Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbb7389a1b97bc371ecdf6340915f267ff4fe62f",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +937,941 @@\n      // FIXME: Causes segfault in rootcling, debug and uncomment\n      // fClasses->Delete();    SafeDelete(fClasses);     // TClass'es must be deleted last\n#endif\n"
  },
  {
    "id" : "e5bd7d1a-bb93-4960-8723-326914976dd5",
    "prId" : 3404,
    "prUrl" : "https://github.com/root-project/root/pull/3404#pullrequestreview-204196303",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b42c999-e78b-40d2-b056-6dd79199756a",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Is there no way to enforce the function to not be usable from outside? This will not deter people from using this function.",
        "createdAt" : "2019-02-15T14:51:20Z",
        "updatedAt" : "2019-03-08T12:05:38Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed5740c6c0265805eac4a385ef23526b8ad5e5eb",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +2916,2920 @@\n////////////////////////////////////////////////////////////////////////////////\n/// INTERNAL function!\n/// Used by rootcling to inject interpreter arguments through a C-interface layer.\n"
  }
]