[
  {
    "id" : "f1f77237-5c71-4847-9522-872d7ea398ba",
    "prId" : 917,
    "prUrl" : "https://github.com/root-project/root/pull/917#pullrequestreview-60159845",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12f051dc-62a0-4470-97b1-1c1e2202a5c4",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "As you're touching this anyway, can you use pre-member doxygen doc like so:\r\n```\r\n/// The library containing the dictionary for this class was\r\n/// loaded and has been unloaded from memory.\r\nkUnloaded    = BIT(16),\r\n```\r\nThis makes it easier to read and write precise documentation and enables doxygen to actually pick it up.",
        "createdAt" : "2017-09-01T04:12:16Z",
        "updatedAt" : "2017-09-01T22:06:54Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "0f9ef6c2-5340-4115-9b28-96b73c489572",
        "parentId" : "12f051dc-62a0-4470-97b1-1c1e2202a5c4",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "The annoying part is that (visually at the very least), unless there is a empy line above the comment, I never 'know' whether the comment applies to the one before or after.",
        "createdAt" : "2017-09-01T12:24:39Z",
        "updatedAt" : "2017-09-01T22:06:54Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "3451b7f5-f36a-42fe-8cd2-855ab5c74b63",
        "parentId" : "12f051dc-62a0-4470-97b1-1c1e2202a5c4",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "But we're paid by lines of code, so adding empty lines is a wonderful thing! ;-)",
        "createdAt" : "2017-09-01T14:58:16Z",
        "updatedAt" : "2017-09-01T22:06:54Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fa653f8882f03af55d7dd7a4fef145be1a2f18b",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +81,85 @@      kClassSaved  = BIT(12),\n      kIgnoreTObjectStreamer = BIT(15),\n      kUnloaded    = BIT(16), // The library containing the dictionary for this class was\n                              // loaded and has been unloaded from memory.\n      kIsTObject = BIT(17),"
  },
  {
    "id" : "d87d8cc1-7a66-4bc5-8c8c-d03b0b1625c8",
    "prId" : 917,
    "prUrl" : "https://github.com/root-project/root/pull/917#pullrequestreview-60042892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f5ada0f-b432-4880-b49e-3dc8b66eef70",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "See above",
        "createdAt" : "2017-09-01T04:12:55Z",
        "updatedAt" : "2017-09-01T22:06:54Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fa653f8882f03af55d7dd7a4fef145be1a2f18b",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +89,93 @@      kWarned      = BIT(21),\n      kHasNameMapNode = BIT(22),\n      kHasCustomStreamerMember = BIT(23) // The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer.\n   };\n   enum ENewType { kRealNew = 0, kClassNew, kDummyNew };"
  },
  {
    "id" : "7516f019-f99e-41bd-bd28-6eb596baf735",
    "prId" : 953,
    "prUrl" : "https://github.com/root-project/root/pull/953#pullrequestreview-60973688",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cec7f81f-9b05-4929-b9a0-a70ba0a1fb26",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "If no longer aligning the function name, please add an empy line between blocks. (here and a couple of other places).\r\n\r\nIn general in this file, we tend to try to align function names.",
        "createdAt" : "2017-09-06T16:44:49Z",
        "updatedAt" : "2017-09-07T09:23:43Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "904647f8795e4e1819b6d57578c89f33101d31c9",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +316,320 @@protected:\n   TVirtualStreamerInfo *FindStreamerInfo(TObjArray *arr, UInt_t checksum) const;\n   void GetMissingDictionariesForBaseClasses(TCollection &result, TCollection &visited, bool recurse);\n   void GetMissingDictionariesForMembers(TCollection &result, TCollection &visited, bool recurse);\n   void GetMissingDictionariesWithRecursionCheck(TCollection &result, TCollection &visited, bool recurse);"
  },
  {
    "id" : "6b306491-5a5b-42a2-914a-fbd6c7ef3d0e",
    "prId" : 6062,
    "prUrl" : "https://github.com/root-project/root/pull/6062#pullrequestreview-454251539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93633ccd-3cbd-4851-b0d4-1972d3365d2a",
        "parentId" : null,
        "authorId" : "a4098cc8-1677-4408-8eb5-cabf1875c2bd",
        "body" : "My understanding of `std::memory_order_relaxed` is it will give you a value that was the value set by  some thread at some time. So for this case that is fine since setting `VersionUsed` again would not be a problem.",
        "createdAt" : "2020-07-23T15:28:21Z",
        "updatedAt" : "2020-07-23T16:31:58Z",
        "lastEditedBy" : "a4098cc8-1677-4408-8eb5-cabf1875c2bd",
        "tags" : [
        ]
      }
    ],
    "commit" : "d319506405a6901a61abda28fefe215acb28419f",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +376,380 @@                                                  ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch);\n   Version_t          GetClassVersion() const {\n      if (!fVersionUsed.load(std::memory_order_relaxed))\n         fVersionUsed = kTRUE;\n      return fClassVersion;"
  },
  {
    "id" : "4cd29bc6-d4d9-4205-8343-d7c406b24a01",
    "prId" : 6559,
    "prUrl" : "https://github.com/root-project/root/pull/6559#pullrequestreview-553951747",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41e80cfa-c6f3-4165-abb1-3eb7fb55c3f2",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Isn't it \"either no args or both\"? If so please do;\r\n```suggestion\r\n      ObjectPtr() = default;\r\n      ObjectPtr(void *ptr, TVirtualStreamerInfo *allocator) : fPtr(ptr), fAllocator(allocator) {} \r\n```\r\n",
        "createdAt" : "2020-12-16T17:22:45Z",
        "updatedAt" : "2020-12-21T18:59:16Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "a09c7191-b934-483b-9bf6-d9c5c0cb5c1e",
        "parentId" : "41e80cfa-c6f3-4165-abb1-3eb7fb55c3f2",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "> Isn't it \"either no args or both\"? If so please do;\r\n\r\nIn the current code (possibly to pedantic) it is either one or two.  The case one is use for implicit creation from a void *, for example:\r\n```\r\nObjectPtr NewObject(....) {\r\n....\r\n    return fNew(....);\r\n....\r\n}\r\n```",
        "createdAt" : "2020-12-16T18:06:36Z",
        "updatedAt" : "2020-12-21T18:59:16Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "597f521472f8cf641bf4c57a274b5f593ad97238",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +143,147 @@      TVirtualStreamerInfo *fAllocator = nullptr;\n\n      ObjectPtr(void *ptr = nullptr, TVirtualStreamerInfo *allocator = nullptr) : fPtr(ptr), fAllocator(allocator) {}\n\n      void *GetPtr() const { return fPtr; }"
  },
  {
    "id" : "72b12e50-342b-41bc-adb7-a7c543241048",
    "prId" : 6559,
    "prUrl" : "https://github.com/root-project/root/pull/6559#pullrequestreview-553953622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f97a98b3-e744-4824-bf5c-495d1b0f21d9",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Should this not be `char *`? Makes e.g. `TVirtualArray::GetObjectAt()` much simpler.",
        "createdAt" : "2020-12-16T17:26:39Z",
        "updatedAt" : "2020-12-21T18:59:16Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "07eaeb9e-9592-4e73-86ae-7a9fbc759a60",
        "parentId" : "f97a98b3-e744-4824-bf5c-495d1b0f21d9",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "It could be but semantic it is a void* so it might be clearer as is, especially if we make it a struct.",
        "createdAt" : "2020-12-16T18:08:58Z",
        "updatedAt" : "2020-12-21T18:59:16Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "597f521472f8cf641bf4c57a274b5f593ad97238",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +139,143 @@   struct ObjectPtr\n   {\n      void *fPtr = nullptr;\n\n      TVirtualStreamerInfo *fAllocator = nullptr;"
  },
  {
    "id" : "424ba104-b602-43f9-b416-0b7f31e1f945",
    "prId" : 6873,
    "prUrl" : "https://github.com/root-project/root/pull/6873#pullrequestreview-538844944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e464c883-f699-4dbf-96a6-55b99785c733",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "As this is a public method, would it make sense to swap the last two parameters for backward compatibility?\r\n\r\nOr, to break the interface for existing callers and make sure they don't silently get wrong results, to take an `array<size_t, 2>` or a `struct PairInfo_t` as last parameter?",
        "createdAt" : "2020-11-25T13:30:27Z",
        "updatedAt" : "2020-11-25T21:06:05Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "3d9df421-ec32-49fb-8dac-7be875814ed3",
        "parentId" : "e464c883-f699-4dbf-96a6-55b99785c733",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "The new argument are already additive (require to specify the default arguments).",
        "createdAt" : "2020-11-25T21:04:33Z",
        "updatedAt" : "2020-11-25T21:06:05Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cc1a35d319a2fc3f6986b0f6e946d1513995c3a",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +545,549 @@   static TClass        *GetClass(const char *name, Bool_t load = kTRUE, Bool_t silent = kFALSE);\n   static TClass        *GetClass(const char *name, Bool_t load, Bool_t silent, size_t hint_pair_offset, size_t hint_pair_size);\n   static TClass        *GetClass(const std::type_info &typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE, size_t hint_pair_offset = 0, size_t hint_pair_size = 0);\n   static TClass        *GetClass(ClassInfo_t *info, Bool_t load = kTRUE, Bool_t silent = kFALSE);\n   template<typename T>"
  }
]