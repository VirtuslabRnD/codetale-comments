[
  {
    "id" : "fcdecdaa-b1ad-4692-b631-f66bc2865282",
    "prId" : 908,
    "prUrl" : "https://github.com/root-project/root/pull/908#pullrequestreview-59589887",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7f6faf4-516f-41b5-a845-da9470f0f5f4",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "One hesitation I have with this pattern is that the iterator cast is moved one level down. i.e.\r\n```\r\nwhile ((item = reinterpret_cast<TBaseClass *>(next()))) {\r\n   if (auto base = item->GetClassPointer())\r\n```\r\nvs\r\n```\r\nfor (auto item : *GetListOfBases())\r\n   if (auto base = reinterpret_cast<TBaseClass *>(item)->GetClassPointer())\r\n```\r\nor more often.\r\n```\r\nfor (auto item : *GetListOfBases()) {\r\n   auto base = reinterpret_cast<TBaseClass *>(item);\r\n   if (base->GetClassPointer())\r\n```\r\n\r\nI wonder if we can have something like\r\n\r\n```\r\nfor (auto item : ContaineeIs<TBaseClass*>(GetListOfBases()))\r\n   if (auto base = item->GetClassPointer())\r\n```\r\n",
        "createdAt" : "2017-08-30T15:02:28Z",
        "updatedAt" : "2017-08-30T15:36:04Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "9c6be761-3c72-4b9a-8852-42a3de80fbb1",
        "parentId" : "b7f6faf4-516f-41b5-a845-da9470f0f5f4",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Let's not sidestep a 5 line commit into a lenghty discussion on code patterns. If you disagree that the code is more readable after the changes, just let me know and I'll close the PR.",
        "createdAt" : "2017-08-30T15:11:58Z",
        "updatedAt" : "2017-08-30T15:36:04Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b95526d44345cfcb80461a284c0b7ffe27c3ef1b",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +4203,4207 @@      return reinterpret_cast<TMethod *>(method);\n\n   for (auto item : *GetListOfBases())\n      if (auto base = reinterpret_cast<TBaseClass *>(item)->GetClassPointer())\n         if (TFunction* method = base->FindClassOrBaseMethodWithId(declId))"
  },
  {
    "id" : "097c1ed6-7a8b-4e82-b7ce-588570cf3809",
    "prId" : 953,
    "prUrl" : "https://github.com/root-project/root/pull/953#pullrequestreview-60990723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e602e168-bce8-44d9-8a93-beab4ff2c3c8",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "That change is a functional one, right? I don't see it motivated by the commit message (\"Avoid lookup for StreamerInfo when it is cached\"); could you maybe even move this into a separate commit explaining why this change should happen? (I am not questioning that it's a good thing, I bet you discussed with Philippe, but these changes are not obvious to pinpoint when looking at commit logs.)",
        "createdAt" : "2017-09-06T14:49:50Z",
        "updatedAt" : "2017-09-07T09:23:43Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "de6d9985-6be2-42eb-b7c9-fb226dc9eaa3",
        "parentId" : "e602e168-bce8-44d9-8a93-beab4ff2c3c8",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "I need @pcanal  to take a look, actually, that's why I included this commit again. Let's see what he says. If `version = 0` is used, then it will check for the `StreamerInfo` every time. The version itself is cached in `fClassVersion`, so you can only avoid the lookup when it's already there if you check against the same number. `version = 0` means current, which is whatever is stored in `fClassVersion`.",
        "createdAt" : "2017-09-06T15:21:09Z",
        "updatedAt" : "2017-09-07T09:23:43Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "74cab805-43f6-46b4-a785-0abaf5fcef0c",
        "parentId" : "e602e168-bce8-44d9-8a93-beab4ff2c3c8",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "> version = 0 means current, \r\n\r\nTechnically, no anymore at this point in the code.  It now means literally the one in slot zero .. but there is never any StreamerInfo in that slot, so it seems it leads to the execution of line 4396 and hence the leak of a TStreamerInfo (in cases where the fClassVersion's StreamerInfo was already build.\r\n\r\nThis code snippet is handling the error case (an non-existing StreamerInfo was asked for) and the new value of 'version' was essentially arbitrary and Guilherme's value is an improvement.",
        "createdAt" : "2017-09-06T17:07:14Z",
        "updatedAt" : "2017-09-07T09:23:43Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "fe14b7f2-5641-4b4a-8591-ac6ed2226571",
        "parentId" : "e602e168-bce8-44d9-8a93-beab4ff2c3c8",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Anyway, I agree with Axel that this should be a separate commit ;)  Thanks.",
        "createdAt" : "2017-09-06T17:33:32Z",
        "updatedAt" : "2017-09-07T09:23:43Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "904647f8795e4e1819b6d57578c89f33101d31c9",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +4395,4399 @@      Error(\"GetStreamerInfo\", \"class: %s, attempting to access a wrong version: %d\", GetName(), version);\n      // FIXME: Shouldn't we go to -1 here, or better just abort?\n      version = fClassVersion;\n   }\n"
  },
  {
    "id" : "3f33aa69-4f78-4f82-8b07-d4f2daeaf6a7",
    "prId" : 953,
    "prUrl" : "https://github.com/root-project/root/pull/953#pullrequestreview-61016188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4adc96f-dd28-4e56-98cb-431c21653e09",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Reminder of the discussion on this line, in the previous PR",
        "createdAt" : "2017-09-06T17:08:23Z",
        "updatedAt" : "2017-09-07T09:23:43Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "73baf388-8247-4eb7-b5f1-52e34692d155",
        "parentId" : "e4adc96f-dd28-4e56-98cb-431c21653e09",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : ">  \t\r\n> @Axel-Naumann\r\n> Axel-Naumann on Jun 29 Owner\r\n> \r\n> That's a change in behavior (version might have been set to fClassVersion after your change but not before); could you document it in the commit log if it was intentional?\r\n> @amadio\r\n> amadio on Jun 29 â€¢ edited Member\r\n> \r\n> This is intentional. When the requested version is 0, it really means the current version (which supposedly isn't itself equal to 0), so this let's the detection work properly and return the version already available (that's the point of this check). However, before the check would always fail, because sinfo->GetClassVersion() never returns 0 (at least that's how I interpreted it, correct me if I'm wrong).\r\n> @Axel-Naumann\r\n> Axel-Naumann on Jun 29 Owner\r\n> \r\n>     (which supposedly isn't itself equal to 0)\r\n>     ...\r\n>     (at least that's how I interpreted it, correct me if I'm wrong)\r\n> \r\n> These are assumptions; they suggest that we are probably better off waiting for Philippe with these changes?\r\n> @amadio\r\n> amadio on Jun 29 Member\r\n> \r\n> Yes, definitely, I will not merge this before Philippe is back. I just want to give others a chance to review immediately to address any problems found before he comes back.\r\n> @pcanal\r\n> pcanal on Jul 3 Owner\r\n> \r\n> This looks fine but really hinge on whether the line number 4366 (in new file) is thread safe or not.\r\n> @amadio\r\n> amadio on Jul 4 Member\r\n> \r\n> That line is apparently not thread-safe, due to false sharing (lack of alignment of fClassVersion), but real problems depend on if there is any pattern where modifications to the class version can actually happen when this function is called. As commented above, we may need to go back to taking the lock despite the performance penalty. On the other hand, we need a better long term solution for our thread-safety issues. On one side we need a test suite to catch thread-safety problems like these, and on the other, we need a better way than taking locks and using atomics.\r\n> ",
        "createdAt" : "2017-09-06T17:08:38Z",
        "updatedAt" : "2017-09-07T09:23:43Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "cf9d726e-708b-4592-ad1e-1f823d67e6e8",
        "parentId" : "e4adc96f-dd28-4e56-98cb-431c21653e09",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Note that fClassVersion is not (yet?) an atomic.  Note the implementation of TClass::GetClassVersion\r\nNote the existence of TClass::SetClassVersion which is only use in ROOT::ResetClassVersion which relies on the atomic fVersionUsed to allow or disallow the change.   This feature is usually triggered by the use of the macro RootClassVersion (so the SetClassVersion is usually executed at library load time).\r\n\r\nAnd a cursory look a the code mentions seems to indicates that the existing situation is already not really thread-safe ... (missing lock taking in the above mention function, missing setting of fVersionUsed in direct use of fClassVersion in TClass.cxx and/or fClassVersion not being atomic ....)",
        "createdAt" : "2017-09-06T17:20:46Z",
        "updatedAt" : "2017-09-07T09:23:43Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "d51873e1-971d-49a4-992a-2acdb5d31f3b",
        "parentId" : "e4adc96f-dd28-4e56-98cb-431c21653e09",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Indeed, we need a better solution for this kind of problem, and I suggested using [RCU](http://www.rdrop.com/~paulmck/RCU) before, which should be much better in terms of performance than using locks.",
        "createdAt" : "2017-09-06T18:56:02Z",
        "updatedAt" : "2017-09-07T09:23:43Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "904647f8795e4e1819b6d57578c89f33101d31c9",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +4370,4374 @@   // If the StreamerInfo is assigned to the fLastReadInfo, we are\n   // guaranteed it was built and compiled.\n   if (sinfo && sinfo->GetClassVersion() == version)\n      return sinfo;\n"
  }
]