[
  {
    "id" : "16e5c0cd-d3f4-4449-a2e9-daee6f9aa2ec",
    "prId" : 7286,
    "prUrl" : "https://github.com/root-project/root/pull/7286#pullrequestreview-600954757",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "603b485f-a85c-45c1-ada1-869c9799e4ba",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Why create a pair for each iteration to check the key? Is it not possible to just loop over keys, and fetch the value only if found?",
        "createdAt" : "2021-03-01T13:09:46Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "d54785ce-945b-40e4-8d5b-bfd8aaac475d",
        "parentId" : "603b485f-a85c-45c1-ada1-869c9799e4ba",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "The content of the container is, type-wise, a void* but is a pointer to a pair.  So `ToPair` is both necessary and cheap (it is just a static cast).  This convolution was needed to reduce the content of the header file.",
        "createdAt" : "2021-03-01T16:56:07Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "42f6af2ad3d5063d76a91b41221663a6f815ac92",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +112,116 @@   for(auto& slot : fLasts) {\n      auto last = ToPair(slot);\n      if ( last && typ == last->first )  {\n         return last->second;\n      }"
  },
  {
    "id" : "ddfa81c5-5555-42fb-b526-e7f4c42f320d",
    "prId" : 7286,
    "prUrl" : "https://github.com/root-project/root/pull/7286#pullrequestreview-600958188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd0f21db-49eb-4587-bf8b-f1f1db293527",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "If you hard-code 8 as number of slots, you can just use `next & 0x7` to get rid of some of the branching above.",
        "createdAt" : "2021-03-01T13:20:33Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "4c6f999a-563b-4374-82d2-2798ed4e4610",
        "parentId" : "bd0f21db-49eb-4587-bf8b-f1f1db293527",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "I was planning on only \"soft\" hard-coding leaving the ability to tweak it later. So the question is whether that performance improvement you mention is worth the loss of flexibility ....",
        "createdAt" : "2021-03-01T16:59:19Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "42f6af2ad3d5063d76a91b41221663a6f815ac92",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +134,138 @@      fNextLastSlot.compare_exchange_strong(expected_value, next + 1);\n   }\n   fLasts[next].store(last);\n\n   return last ? last->second : nullptr;"
  },
  {
    "id" : "7ad052a3-927c-4b00-99e5-1a757c4611f3",
    "prId" : 7286,
    "prUrl" : "https://github.com/root-project/root/pull/7286#pullrequestreview-600960123",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37c20205-0385-48e4-aec6-4a47b7ba3704",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Coding style calls for no space around parenthesis if I recall correctly.",
        "createdAt" : "2021-03-01T13:24:22Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "4828298e-f740-49a7-9dec-a4c3ebf87c26",
        "parentId" : "37c20205-0385-48e4-aec6-4a47b7ba3704",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Not sure.  For now staying with the style of the surrounding code.",
        "createdAt" : "2021-03-01T17:01:08Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "42f6af2ad3d5063d76a91b41221663a6f815ac92",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +90,94 @@         fClass = TClass::GetClass(*fType);\n      }\n      if ( !fClass ) return nullptr;\n      fVirtual = (*fClass).ClassProperty() & kClassHasVirtual;\n      fInit = kTRUE;"
  }
]