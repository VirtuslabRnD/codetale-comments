[
  {
    "id" : "ce3beefe-7573-4eed-9325-b200ed128fdf",
    "prId" : 6301,
    "prUrl" : "https://github.com/root-project/root/pull/6301#pullrequestreview-490863997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f5ccda0-798f-4541-a666-b4e124f2fa8c",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Should / can we `assert` that the write lock is taken?",
        "createdAt" : "2020-09-17T12:42:52Z",
        "updatedAt" : "2020-09-17T20:54:21Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "310dc59c-7ec2-474f-960d-ec25e8109a86",
        "parentId" : "1f5ccda0-798f-4541-a666-b4e124f2fa8c",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "I added some error message.  Let me know if you agree.",
        "createdAt" : "2020-09-17T18:12:31Z",
        "updatedAt" : "2020-09-17T20:54:21Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcc04e24a2617d92ad238a1986628b39469a72e0",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +339,343 @@      // (See WriteLock and ReadLock methods) but fReaders is an atomic, so that should be fine\n      // but that's weird, that does not account to other change in fReaders during between\n      // the snapshot and the rewind ... humm unless the lock held is a WriteLock\n      // (the actual use case) in which case there is no other thread that can update fReaders\n      // and we also assume that the \"user code\" is balanced and release all read locks it takes."
  }
]