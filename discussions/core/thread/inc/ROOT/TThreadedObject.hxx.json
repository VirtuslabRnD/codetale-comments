[
  {
    "id" : "c1943fa5-5050-406c-850c-5eb46aca1d0d",
    "prId" : 1030,
    "prUrl" : "https://github.com/root-project/root/pull/1030#pullrequestreview-64185895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3de1c564-d674-4870-ac76-7cbd6441697d",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Why not simply use `std::thread::hardware_concurrency()`?",
        "createdAt" : "2017-09-21T06:07:41Z",
        "updatedAt" : "2017-09-21T06:07:41Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "50cedc68-239a-4706-91e5-4c0d7202dff4",
        "parentId" : "3de1c564-d674-4870-ac76-7cbd6441697d",
        "authorId" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "body" : "For not breaking previous behaviour? But yeah, I was told to keep a minimum of 32.\r\n\r\nOne step at a time https://github.com/root-project/root/pull/1019",
        "createdAt" : "2017-09-21T06:10:59Z",
        "updatedAt" : "2017-09-21T06:18:09Z",
        "lastEditedBy" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "tags" : [
        ]
      }
    ],
    "commit" : "69f153617af7bd78a7ea28902ea14aa374bf5c6f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +288,292 @@   };\n\n   template<class T> unsigned TThreadedObject<T>::fgMaxSlots = std::max(std::thread::hardware_concurrency(), 64u);\n\n} // End ROOT namespace"
  },
  {
    "id" : "1cde5abf-2608-4db7-9e73-130bdc2891a6",
    "prId" : 5049,
    "prUrl" : "https://github.com/root-project/root/pull/5049#pullrequestreview-370292742",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e29a92c-fc4f-4857-8f7c-2e98d52d80e0",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I think it's a bit confusing that the terms \"slots\" and \"threads\" are used interchangeably in this commit. The terms are related but not equivalent. It should probably always be \"slots\" in the context of TThreadedObject?",
        "createdAt" : "2020-03-06T10:46:36Z",
        "updatedAt" : "2020-03-23T13:06:18Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "17c7772d-a7cc-485c-a63b-e66f5f8a7fe5",
        "parentId" : "4e29a92c-fc4f-4857-8f7c-2e98d52d80e0",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "> It should probably always be \"slots\" in the context of TThreadedObject?\r\n\r\nWhen a user thinks about \"how many\", then the unit should threads. `->` uses thread id. So slots internally (for the vector etc), but threads externally - that's how I understood it. Would you prefer me to use the (more abstract and less user-friendly) term \"slots\"?",
        "createdAt" : "2020-03-06T11:46:11Z",
        "updatedAt" : "2020-03-23T13:06:18Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "20d6ed18-ded8-4fec-b740-a354e6d77934",
        "parentId" : "4e29a92c-fc4f-4857-8f7c-2e98d52d80e0",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I agree that users understand threads better than slots. The problem is that \"slot\" is not strictly an internal concept, not always at least. It leaks out if e.g. you have N threads but only use TThreadedObject from 2 (can happen because of manual scheduling or also with a thread pool): then you need to know that TThreadedObject will have nSlots internal copies of your object and will merge nSlots copies, even if you only filled/used 2.",
        "createdAt" : "2020-03-06T12:35:43Z",
        "updatedAt" : "2020-03-23T13:06:18Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "04b96501-22bd-4cc8-b6fc-55931955c4b4",
        "parentId" : "4e29a92c-fc4f-4857-8f7c-2e98d52d80e0",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "OK I trust your verdict here. I then also changed `kNumThreadsIMT` => `kIMTPoolSize`.",
        "createdAt" : "2020-03-06T12:41:06Z",
        "updatedAt" : "2020-03-23T13:06:18Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "a812c62af2d4369eb6c1884fad263a47967b2ac9",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +42,46 @@      friend bool operator==(TNumSlots lhs, TNumSlots rhs) { return lhs.fVal == rhs.fVal; }\n      friend bool operator!=(TNumSlots lhs, TNumSlots rhs) { return lhs.fVal != rhs.fVal; }\n   };\n\n   static constexpr const TNumSlots kIMTPoolSize{-1}; // Whatever the IMT pool size is."
  },
  {
    "id" : "6939e05e-e40a-46ea-9979-0532bbfb76ba",
    "prId" : 5049,
    "prUrl" : "https://github.com/root-project/root/pull/5049#pullrequestreview-370222931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "074a7a09-bf84-4362-b2f0-854caf769e08",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "The behavior of this new constructor has a certain amount of non-trivial details that should be documented in the docstring above it.",
        "createdAt" : "2020-03-06T10:48:29Z",
        "updatedAt" : "2020-03-23T13:06:18Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "a812c62af2d4369eb6c1884fad263a47967b2ac9",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +185,189 @@      ///   TThreadedObject: each slot will hold one `T`. If `kIMTPoolSize` is passed, the\n      ///   number of slots is defined by ROOT's implicit MT pool size; IMT must be enabled.\n      /// \\tparam ARGS Arguments of the constructor of T\n      template<class ...ARGS>\n      TThreadedObject(TNumSlots nslotsTag, ARGS&&... args) : fIsMerged(false)"
  }
]