[
  {
    "id" : "1250fbbd-ef57-4a49-993e-d9decd9218e3",
    "prId" : 4671,
    "prUrl" : "https://github.com/root-project/root/pull/4671#pullrequestreview-328462645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "544a6454-8ab2-40a2-b928-543f8d3bf153",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "What's the reasoning/purpose of this addition?  Note that \"too-often\" the signal handler itself gets silly (for example on my MacOS it is common for the stack trace generator to get stuck) and I need to force the end of the process with kill -9  ... does that prevent it .. or not?",
        "createdAt" : "2019-12-06T14:56:24Z",
        "updatedAt" : "2020-01-20T14:49:24Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "f4fc2986-33f9-47ef-94be-fe72a7e53f62",
        "parentId" : "544a6454-8ab2-40a2-b928-543f8d3bf153",
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "Even if I do not know how the whole signal capturing / exception mechanism works in ROOT, my guess is that this is added to handle sigabrt in case a library has a critical error and sends the signal (@wlav can better comment perhaps). Anyway I understand this should not affect sigkill.",
        "createdAt" : "2019-12-06T15:19:06Z",
        "updatedAt" : "2020-01-20T14:49:24Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      },
      {
        "id" : "257c9f72-120b-4658-aa14-77b5654b53c3",
        "parentId" : "544a6454-8ab2-40a2-b928-543f8d3bf153",
        "authorId" : "683b29c3-de55-4bfa-a8f9-8a107533453c",
        "body" : "SIGABRT comes from assertion failures. Having the handle, cppyy can trace the abort from a C++ function in a (automatically generated) callback through Python, yielding both a C++ and Python stack trace. Not sure about the technical term \"gets silly\". Actually, in cppyy when using controlled execution with `with`, cppyy will by default switch the C++ tracing of. It's never been good on Mac or Windows (with the latter now changing for the better, I see) and it's dog-slow on Linux plus annoyingly duplicated. (On the wishlist to patch.)\r\n\r\nEither which way, since the signal map is not accessible through an API, it is repeated in clingwrapper.cxx, so just as a heads up you need to patch that in your copy if you don't add SIGABRT. (Alternatively, SIGABRT could be moved to the end of the map, so then you don't have to, as it will never appear nor bump the number of the others.)",
        "createdAt" : "2019-12-06T15:37:16Z",
        "updatedAt" : "2020-01-20T14:49:24Z",
        "lastEditedBy" : "683b29c3-de55-4bfa-a8f9-8a107533453c",
        "tags" : [
        ]
      },
      {
        "id" : "363ea050-47af-40e4-ba95-e68340847754",
        "parentId" : "544a6454-8ab2-40a2-b928-543f8d3bf153",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "> Not sure about the technical term \"gets silly\"\r\n\r\nIn my case, takes for ever and no longer react to CTRL+C or CTRL+Z, usually because something is going awry (infinite loop?, crash?) in the stack trace generator (gdb).\r\n\r\n> (On the wishlist to patch.)\r\n\r\nNote the related PR: https://github.com/root-project/root/pull/1053\r\n\r\n> SIGABRT comes from assertion failures. \r\n\r\nhumm ... so my point is moot, I mistoke SIGABRT (6) for SIGKILL (9) .. so never mind :)\r\n",
        "createdAt" : "2019-12-06T21:13:15Z",
        "updatedAt" : "2020-01-20T14:49:24Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "68e63cc1-20dd-43e3-afb5-ddbebda462db",
        "parentId" : "544a6454-8ab2-40a2-b928-543f8d3bf153",
        "authorId" : "683b29c3-de55-4bfa-a8f9-8a107533453c",
        "body" : "CTRL+\\ is your friend. It sends SIGQUIT, which the application can not intercept (contrary to SIGINT or SIGTSTP as coming from the other two).",
        "createdAt" : "2019-12-06T21:17:22Z",
        "updatedAt" : "2020-01-20T14:49:24Z",
        "lastEditedBy" : "683b29c3-de55-4bfa-a8f9-8a107533453c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4de70afdd8a2ae78c0cd2dae5902d27cffdc09b2",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +3584,3588 @@   { SIGPIPE,  0, 0, \"write on a pipe with no one to read it\" },\n   { SIGILL,   0, 0, \"illegal instruction\" },\n   { SIGABRT,  0, 0, \"abort\" },\n   { SIGQUIT,  0, 0, \"quit\" },\n   { SIGINT,   0, 0, \"interrupt\" },"
  }
]