[
  {
    "id" : "8031def1-6da0-4c11-bd51-c6c2477f8e0f",
    "prId" : 842,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/842#pullrequestreview-399713036",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb14042f-b444-41cb-8238-3a42120d0216",
        "parentId" : null,
        "authorId" : "4d77496d-651c-404b-aba2-254b1aab0d0b",
        "body" : "This change follows the \"Testing whether a global variable exists\" advice in https://www.scala-js.org/doc/interoperability/global-scope.html, so that it works with Scalajs 1.x.",
        "createdAt" : "2020-04-22T18:13:09Z",
        "updatedAt" : "2020-04-22T18:13:09Z",
        "lastEditedBy" : "4d77496d-651c-404b-aba2-254b1aab0d0b",
        "tags" : [
        ]
      },
      {
        "id" : "1d5e5a7e-1492-4510-972b-d6d3c0d32680",
        "parentId" : "bb14042f-b444-41cb-8238-3a42120d0216",
        "authorId" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "body" : "I wonder if there are at least constants for this `\"undefined\"`.  I agree per docs that it's the right thing to do, but on first glance, it's worse code. Certainly not a blocker.",
        "createdAt" : "2020-04-23T01:31:13Z",
        "updatedAt" : "2020-04-23T01:31:14Z",
        "lastEditedBy" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "tags" : [
        ]
      },
      {
        "id" : "bd198d7a-e366-41d4-97d0-e91f991d89b3",
        "parentId" : "bb14042f-b444-41cb-8238-3a42120d0216",
        "authorId" : "4d77496d-651c-404b-aba2-254b1aab0d0b",
        "body" : "I completely agree with you. There doesn't seem to be a constant for this. From what I've seen, it's common practice in JS to use strings as constants. I find this easier to digest by thinking of them as \"singleton type constants\" instead of strings ;).\r\n\r\nAlso, I don't know if this is the right place to document this, but the logging of an error code won't work with Scala.js 1.x in the browser if you are using webpack (which IMO is a fairly common practice) with default configuration. This is because webpack by default introduces a shim to `process` that Scala.js 1.x sees in `global`, but it didn't in 0.6. Things will work as expected if this explicitly disabled (`node: false`) as detailed in: https://webpack.js.org/configuration/node/",
        "createdAt" : "2020-04-24T01:51:48Z",
        "updatedAt" : "2020-04-24T01:51:48Z",
        "lastEditedBy" : "4d77496d-651c-404b-aba2-254b1aab0d0b",
        "tags" : [
        ]
      },
      {
        "id" : "a2d1256e-9a10-4a3b-87c3-9d673bbcfd9f",
        "parentId" : "bb14042f-b444-41cb-8238-3a42120d0216",
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "Doing `typeof identifier === \"undefined\"` is certainly standard JavaScript practice. Other possible values are `\"object\"`, `\"number\"`, `\"string\"`. TypeScript can also use these checks to refine the typing.\r\n\r\nSo yes, it's standard practice and totally fine. If there are constants, they should get exposed by ScalaJS, but going with a string is acceptable.",
        "createdAt" : "2020-04-24T07:44:15Z",
        "updatedAt" : "2020-04-24T07:44:15Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      }
    ],
    "commit" : "396009497df5b188d32d6431f45a1110589d9f7d",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +93,97 @@\n    IO {\n      if (js.typeOf(js.Dynamic.global.process) != \"undefined\") {\n        val process = js.Dynamic.global.process\n        process.on(\"SIGHUP\", handler(1))"
  },
  {
    "id" : "30b2a9cd-6abb-4f82-82ba-ae9003ee7a66",
    "prId" : 812,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/812#pullrequestreview-370803315",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1342ec9-f0f5-4c8b-8941-671249208033",
        "parentId" : null,
        "authorId" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "body" : "I have found this documented as a standard in Node, and tested it in Node.  I can no longer remember which runtime inspired the catch block, but since the fallback has been eliminated, I guess I'm content to crash with a JavaScriptException on the off chance someone is using `IOApp` and not running on `node`. :man_shrugging:",
        "createdAt" : "2020-03-08T04:07:19Z",
        "updatedAt" : "2020-03-08T04:10:33Z",
        "lastEditedBy" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "tags" : [
        ]
      }
    ],
    "commit" : "99f2875f5140cceca403ee78409b0f46d2f79ea6",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +46,50 @@   **/\n  private def setExitCode(code: Int): Unit =\n    js.Dynamic.global.process.exitCode = code\n\n  def mainFiber(args: Array[String], contextShift: Eval[ContextShift[IO]], timer: Eval[Timer[IO]])("
  },
  {
    "id" : "9e66d730-6b7a-4ab0-9985-359b29671bcb",
    "prId" : 812,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/812#pullrequestreview-370803315",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e63aed33-8d5d-47ad-bd24-f01983c8130f",
        "parentId" : null,
        "authorId" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "body" : "Contrary to @djspiewak's comment, this is referenced.  Without it, the process exits with 0 when killed.  I tested using `setExitCode` and still get the expected 143.",
        "createdAt" : "2020-03-08T04:08:50Z",
        "updatedAt" : "2020-03-08T04:10:34Z",
        "lastEditedBy" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "tags" : [
        ]
      }
    ],
    "commit" : "99f2875f5140cceca403ee78409b0f46d2f79ea6",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +82,86 @@        fiber.cancel.unsafeRunAsync { result =>\n          result.swap.foreach(Logger.reportFailure)\n          setExitCode(code + 128)\n        }\n"
  },
  {
    "id" : "d6c8445f-31ab-4c65-a9ab-d3bf0682ee7c",
    "prId" : 540,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/540#pullrequestreview-242017371",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48e7d5be-b721-49d0-b4ec-7754b127b30d",
        "parentId" : null,
        "authorId" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "body" : "This was the bug: killing a JS IOApp resulted in success, not the traditional signal+128.",
        "createdAt" : "2019-05-24T14:44:40Z",
        "updatedAt" : "2019-05-26T00:55:37Z",
        "lastEditedBy" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "tags" : [
        ]
      },
      {
        "id" : "8db4da8a-00cf-416b-bbe3-6b1256252ae3",
        "parentId" : "48e7d5be-b721-49d0-b4ec-7754b127b30d",
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "warn-on-discard should just be the default. It's literally *never* a semantic that you want.",
        "createdAt" : "2019-05-25T22:27:43Z",
        "updatedAt" : "2019-05-26T00:55:37Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9a2bc3972a8b4a828b480aa0bddd5f82e750e8c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +83,87 @@      fiber.cancel.unsafeRunAsync { result =>\n        result.swap.foreach(Logger.reportFailure)\n        sys.exit(code + 128)\n      }\n"
  },
  {
    "id" : "95f9663a-a270-4909-8b36-6b7cdedbe786",
    "prId" : 305,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/305#pullrequestreview-146561289",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cafbf191-ddee-4bc3-9683-f0d672719ee9",
        "parentId" : null,
        "authorId" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "body" : "Nice.  Are these the only three signals that reach `process`?",
        "createdAt" : "2018-08-15T17:20:30Z",
        "updatedAt" : "2018-08-15T17:23:19Z",
        "lastEditedBy" : "19f1b7b0-eaed-49a1-9ac5-80ac65598c75",
        "tags" : [
        ]
      },
      {
        "id" : "d2a8baec-5f77-4ed7-b7ed-747f099da46f",
        "parentId" : "cafbf191-ddee-4bc3-9683-f0d672719ee9",
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "I think so, I took a look here: https://nodejs.org/api/process.html#process_signal_events",
        "createdAt" : "2018-08-15T18:22:55Z",
        "updatedAt" : "2018-08-15T18:22:55Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      }
    ],
    "commit" : "65879a8f3b7143337fafc94cb5dc44eb4c303604",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +75,79 @@        process.on(\"SIGHUP\", handler(1))\n        process.on(\"SIGINT\", handler(2))\n        process.on(\"SIGTERM\", handler(15))\n      }\n    }"
  },
  {
    "id" : "5c529795-44c0-4cc0-b912-747e6eaedc5b",
    "prId" : 252,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/252#pullrequestreview-124038850",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc522619-fcd8-479f-8e06-14604b77fba0",
        "parentId" : null,
        "authorId" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "body" : "JS is always tricky. I guess at this point the keep-alive was canceled.\r\n\r\nBut yes, this is better for JS as well.",
        "createdAt" : "2018-05-29T15:10:42Z",
        "updatedAt" : "2018-05-29T15:11:01Z",
        "lastEditedBy" : "efc45bfc-463c-4c9e-946d-ad472fabc9f0",
        "tags" : [
        ]
      }
    ],
    "commit" : "74e83b0a27e7af700f0087f066332f416d916676",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +29,33 @@        IO(sys.exit(ExitCode.Error.code))\n      case Right(0) =>\n        IO.unit\n      case Right(code) =>\n        IO(sys.exit(code))"
  }
]