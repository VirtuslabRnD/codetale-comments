[
  {
    "id" : "7de1d9c5-f617-4dad-ac9b-6e62e452063d",
    "prId" : 589,
    "prUrl" : "https://github.com/root-project/root/pull/589#pullrequestreview-42610035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f76eeaf-c00e-419a-9ecb-11a93f30ba2d",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "What is that needed for?",
        "createdAt" : "2017-06-07T13:43:51Z",
        "updatedAt" : "2017-06-07T20:23:28Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "257a1c2a-3d5d-4509-8023-f770ca00fe78",
        "parentId" : "7f76eeaf-c00e-419a-9ecb-11a93f30ba2d",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Didn't really see. It fixed compilation.",
        "createdAt" : "2017-06-07T13:56:03Z",
        "updatedAt" : "2017-06-07T20:23:28Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc3d4e966669b54da4361e2bc176badbe60e9729",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +41,45 @@#include \"clang/Lex/ModuleMap.h\"\n#include \"clang/Lex/Preprocessor.h\"\n#include \"clang/Lex/PreprocessorOptions.h\"\n\n#include \"clang/Sema/Sema.h\""
  },
  {
    "id" : "203e536f-d9d9-446e-bc1c-89591686c0da",
    "prId" : 1580,
    "prUrl" : "https://github.com/root-project/root/pull/1580#pullrequestreview-93769598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59542c4e-16b3-4a70-a9fe-ebead783ceeb",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Hi Philippe, thanks for addressing this. However, once we enter `if (substType)`, there is a comment which indicates that by the time all clauses of this `if` are processed, `replacedCtxt` should never be null, so I still believe that it being null should be a fatal error. What is the reason to make it only a warning?\r\n\r\n```cpp\r\n   if (substType) {\r\n      // Make sure it got replaced from this template\r\n      const clang::ClassTemplateDecl *replacedCtxt = 0;\r\n   ...   \r\n  } else if (...) {\r\n```\r\n\r\nAlso, this funtion is 250 lines long. It would improve readability a lot if it was broken into smaller pieces.",
        "createdAt" : "2018-02-02T16:07:29Z",
        "updatedAt" : "2018-02-02T16:07:29Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "e4429180-42a6-4d47-b195-4c87f206eca8",
        "parentId" : "59542c4e-16b3-4a70-a9fe-ebead783ceeb",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "> What is the reason to make it only a warning?\r\n\r\nBecause I believe that the 'redundant' test 4606 is likely to still give the correct result even if replacedCtxt is a nullptr and even if those two fails, the final code might still do something sensible.",
        "createdAt" : "2018-02-02T21:57:58Z",
        "updatedAt" : "2018-02-02T21:57:58Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4e6fd69d5f6fe5429eb2a2b309343d802f4d7b4",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +4598,4602 @@                                   replacedDeclCtxt->getDeclKindName(), astDump.c_str());\n         replacedCtxt = nullptr;\n      }\n\n      if ((replacedCtxt && replacedCtxt->getCanonicalDecl() == TSTdecl->getSpecializedTemplate()->getCanonicalDecl())"
  },
  {
    "id" : "1fe1b7e8-b6b9-40e5-8ca5-14b931f04dec",
    "prId" : 6895,
    "prUrl" : "https://github.com/root-project/root/pull/6895#pullrequestreview-541774331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b917fd2-ded3-433e-ac76-e8fb9aae2b3d",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "LOL :-)",
        "createdAt" : "2020-12-01T10:36:43Z",
        "updatedAt" : "2020-12-01T16:44:50Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "998857f4-de7d-4a16-9793-b8751b073e7c",
        "parentId" : "7b917fd2-ded3-433e-ac76-e8fb9aae2b3d",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "nothing worse than a comment out of sync with the code :P ",
        "createdAt" : "2020-12-01T10:47:51Z",
        "updatedAt" : "2020-12-01T16:44:50Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e13ed3688d755735743701f4872085fbac5bb8d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1745,1749 @@\n////////////////////////////////////////////////////////////////////////////////\n/// FIXME: a function of 450+ lines!\n\nvoid ROOT::TMetaUtils::WriteClassInit(std::ostream& finalString,"
  },
  {
    "id" : "346eef10-32ff-44f9-be04-32ef6b2e699b",
    "prId" : 7232,
    "prUrl" : "https://github.com/root-project/root/pull/7232#pullrequestreview-611045664",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cc36815-b001-46af-a840-f5a84755c1c1",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "```suggestion\r\n         \"forward_list\",\"unordered_set\",\"unordered_multiset\",\"unordered_map\",\r\n         \"unordered_multimap\", \"RVec\", 0};\r\n```",
        "createdAt" : "2021-03-05T18:10:46Z",
        "updatedAt" : "2021-03-12T18:49:06Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "66e8528f-f46b-4b2d-ac3e-72e769d769e1",
        "parentId" : "5cc36815-b001-46af-a840-f5a84755c1c1",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I don't understand the suggestion: the line is not beyond ROOT's 120 columns, while clang-format would actually like for the list to be formatted this way:\r\n\r\n```cpp\r\n   static const char *stls[] = // container names\r\n      {\"any\",           \"vector\",\r\n       \"list\",          \"deque\",\r\n       \"map\",           \"multimap\",\r\n       \"set\",           \"multiset\",\r\n       \"bitset\",        \"forward_list\",\r\n       \"unordered_set\", \"unordered_multiset\",\r\n       \"unordered_map\", \"unordered_multimap\",\r\n       \"RVec\",          0};\r\n```",
        "createdAt" : "2021-03-12T18:20:42Z",
        "updatedAt" : "2021-03-12T18:49:06Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "ede8ab24c225f90737ea9f56b56f45199faeee83",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +4844,4848 @@   static const char *stls[] =                  //container names\n      {\"any\",\"vector\",\"list\", \"deque\",\"map\",\"multimap\",\"set\",\"multiset\",\"bitset\",\n         \"forward_list\",\"unordered_set\",\"unordered_multiset\",\"unordered_map\",\"unordered_multimap\", \"RVec\", 0};\n   static const ROOT::ESTLType values[] =\n      {ROOT::kNotSTL, ROOT::kSTLvector,"
  }
]