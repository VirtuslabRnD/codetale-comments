[
  {
    "id" : "3aaa2e91-0a02-431f-8959-e318123b1500",
    "prId" : 8769,
    "prUrl" : "https://github.com/root-project/root/pull/8769#pullrequestreview-723265046",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7bc6c42-075c-4806-8a84-26c3bb88c950",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "```c++\r\n/// \\tparam T The type to ...\r\n/// \\tparam isDynamic Apply dynamic ...\r\n...\r\n```",
        "createdAt" : "2021-08-05T08:05:00Z",
        "updatedAt" : "2021-08-05T08:27:11Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "8542db09-40a5-4cad-9cb7-522bdee0a5ba",
        "parentId" : "d7bc6c42-075c-4806-8a84-26c3bb88c950",
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "Okay!",
        "createdAt" : "2021-08-05T11:58:41Z",
        "updatedAt" : "2021-08-05T11:58:41Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      }
    ],
    "commit" : "221173a85d2f78a1a61a1b68be3f47f60918bef4",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +128,132 @@\n/// Wraps any collection that can be used in range-based loops and applies\n/// `static_cast<T>` or `dynamic_cast<T>` to each element.\n/// \\tparam T The new type to convert to.\n/// \\tparam isDynamic If `true`, `dynamic_cast` is used, otherwise `static_cast` is used."
  },
  {
    "id" : "e4eebcee-764b-41d6-a531-ac13177d3ffb",
    "prId" : 8769,
    "prUrl" : "https://github.com/root-project/root/pull/8769#pullrequestreview-723268454",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "643e8260-3194-4eb4-a8ca-3aa9d0268e38",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Are you creating copies of containers here when called in the wrong way?",
        "createdAt" : "2021-08-05T08:06:32Z",
        "updatedAt" : "2021-08-05T08:27:11Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "887386e9-8565-4d65-bb50-6c95d250b1b2",
        "parentId" : "643e8260-3194-4eb4-a8ca-3aa9d0268e38",
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "Sure, if you call it in the wrong way and instantiate a `RRangeCast` with `Range_t` as a value type  explicitly, you can cause unnecessary moving (not copying, as the constructor has the signature `RRangeCast(Range_t &&inputRange)`).\r\n\r\nHowever, if you use the `RangeStaticCast` or `RangeDynCast` functions that take a universal reference that is perfect-forwarded to `RRangeCast`, `Range_t` will always be a reference type.",
        "createdAt" : "2021-08-05T12:02:39Z",
        "updatedAt" : "2021-08-05T12:02:39Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      }
    ],
    "commit" : "221173a85d2f78a1a61a1b68be3f47f60918bef4",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +151,155 @@\nprivate:\n   Range_t fInputRange;\n};\n"
  }
]