[
  {
    "id" : "c63a64ae-f6b7-4076-bc01-ab2eef0f0618",
    "prId" : 4399,
    "prUrl" : "https://github.com/root-project/root/pull/4399#pullrequestreview-290777643",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d108ad8e-5253-4b8e-a20c-be449b9825ca",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Why template here?",
        "createdAt" : "2019-09-19T18:56:46Z",
        "updatedAt" : "2019-09-20T00:43:52Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "988cfc41-0b5e-4339-886e-b6110099862e",
        "parentId" : "d108ad8e-5253-4b8e-a20c-be449b9825ca",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "because it is a wrapper around the actual type of the static variable.",
        "createdAt" : "2019-09-19T18:58:53Z",
        "updatedAt" : "2019-09-20T00:43:52Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "833e1f6336cafa69988ab1864c49f7ea8443b42c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +32,36 @@   static TClassEdit::TInterpreterLookupHelper *gInterpreterHelper = 0;\n\n   template <typename T>\n   struct ShuttingDownSignaler : public T {\n      using T::T;"
  },
  {
    "id" : "56258e6f-5132-41b7-bf4e-96116aecf46e",
    "prId" : 6445,
    "prUrl" : "https://github.com/root-project/root/pull/6445#pullrequestreview-499967128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87ffa177-5622-49b7-8177-d37cd8f05f1c",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Can you not use `IsStdPair` here?",
        "createdAt" : "2020-09-26T19:59:57Z",
        "updatedAt" : "2020-09-30T21:19:23Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "8b9fa0ef-ad13-4945-9815-6fbc37b4c83e",
        "parentId" : "87ffa177-5622-49b7-8177-d37cd8f05f1c",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "I  don't think so.  The test is also on the base class name (`__pair_base`) and technically the name can have wild spelling.  I.e. the input name (unsplit and unnormalized of course) could be \"`std   ::   pair    <`\" and the split name lacks the `<` that IsStdPair expects.",
        "createdAt" : "2020-09-28T21:09:48Z",
        "updatedAt" : "2020-09-30T21:19:23Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "cb510007-76e5-417f-a1ad-bfa1255fff84",
        "parentId" : "87ffa177-5622-49b7-8177-d37cd8f05f1c",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "here I mean that I need to do the test after the call to Split to remove the problem with spelling (and then the name does not have the \"<\" and thus IsStdPair is not applicable.",
        "createdAt" : "2020-10-01T02:14:17Z",
        "updatedAt" : "2020-10-01T02:14:17Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "0005d17fa38c8acd5947072e5fe14cbe48aef703",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +851,855 @@\n   // 4 elements expected: \"pair\", \"first type name\", \"second type name\", \"trailing stars\"\n   if (splitname.fElements.size() == 4 && (splitname.fElements[0] == \"std::pair\" || splitname.fElements[0] == \"pair\" || splitname.fElements[0] == \"__pair_base\")) {\n      // We don't want to lookup the std::pair itself.\n      std::string first, second;"
  },
  {
    "id" : "d814ef2b-cb53-4e1e-882d-4b9742adfd4e",
    "prId" : 6445,
    "prUrl" : "https://github.com/root-project/root/pull/6445#pullrequestreview-499966801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45ad4822-cc44-4f96-aaec-e6779d014dad",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "How can `splitname` be `std::pair` when `splitname` is the result of `kDropStd`? Or am I misremembering input/output of `ShortType`?",
        "createdAt" : "2020-09-26T20:01:34Z",
        "updatedAt" : "2020-09-30T21:19:23Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "973bd80c-99c5-4ed5-8d76-822b4775ea9f",
        "parentId" : "45ad4822-cc44-4f96-aaec-e6779d014dad",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "actually ... that's right .. the test for std::pair is here superfluous ... ",
        "createdAt" : "2020-10-01T02:13:00Z",
        "updatedAt" : "2020-10-01T02:13:00Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "0005d17fa38c8acd5947072e5fe14cbe48aef703",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +851,855 @@\n   // 4 elements expected: \"pair\", \"first type name\", \"second type name\", \"trailing stars\"\n   if (splitname.fElements.size() == 4 && (splitname.fElements[0] == \"std::pair\" || splitname.fElements[0] == \"pair\" || splitname.fElements[0] == \"__pair_base\")) {\n      // We don't want to lookup the std::pair itself.\n      std::string first, second;"
  }
]