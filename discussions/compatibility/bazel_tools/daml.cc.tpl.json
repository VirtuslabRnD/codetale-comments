[
  {
    "id" : "fa03a576-3299-4ad0-878d-d3b46b56027a",
    "prId" : 6018,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6018",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1db72f49-43d0-4ddc-9a96-9f73bd2352e8",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "We're setting `build --test_env=JAVA_HOME` in `.bazelrc` which makes `JAVA_HOME` exported in tests. For `genrule`s you could probably also use the [java make variables](https://docs.bazel.build/versions/master/be/make-variables.html#custom_variables) that Bazel offers.",
        "createdAt" : "2020-05-22T11:48:40Z",
        "updatedAt" : "2020-05-22T11:52:33Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "f516a7fd-ff92-4f97-ae63-40e866a21d44",
        "parentId" : "1db72f49-43d0-4ddc-9a96-9f73bd2352e8",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Ah thanks for the explanation! I don’t actually need it in genrules, I mostly noticed that it wasn’t set there when my C++ code segfaulted when I didn’t handle the case where `JAVA_HOME` wasn’t set :slightly_smiling_face: ",
        "createdAt" : "2020-05-22T12:02:48Z",
        "updatedAt" : "2020-05-22T12:02:48Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "a20cec2c94a272e9c17ae26f77408dd64d40189a",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +35,39 @@    // NOTE (MK) I don’t entirely understand when Bazel defines\n    // JAVA_HOME and when it doesn’t but it looks like it defines\n    // it in tests but not in genrules which is good enough for us.\n    if (java_home) {\n#if defined(_WIN32)"
  },
  {
    "id" : "6e1b130b-84d4-48d7-949b-c25eefb56df9",
    "prId" : 6018,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6018",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bb50d84-8605-46e7-be15-b27a91926d50",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Why not a `haskell_binary`?",
        "createdAt" : "2020-05-22T11:51:22Z",
        "updatedAt" : "2020-05-22T11:52:33Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "cedf995c-14ce-41ca-99a9-6558bd142a4e",
        "parentId" : "0bb50d84-8605-46e7-be15-b27a91926d50",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I got sufficiently scared of cross-platform process management that I wanted to know exactly what is going on here so this seemed like the easiest option. Now that it does work, a Haskell binary would probably do the trick but having a several megabyte binary for this makes me a bit sad.",
        "createdAt" : "2020-05-22T12:02:01Z",
        "updatedAt" : "2020-05-22T12:02:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "a20cec2c94a272e9c17ae26f77408dd64d40189a",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@\n/*\nNOTE (MK): Why is this not just an sh_binary?\nGood question! It turns out that on Windows, an\nsh_binary creates a custom executable that then launches"
  }
]