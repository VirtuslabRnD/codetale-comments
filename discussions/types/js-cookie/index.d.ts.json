[
  {
    "id" : "de098650-acd5-47a2-bfb0-efee879fb7e5",
    "prId" : 38855,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/38855#pullrequestreview-297720539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6931829-735b-4b36-b060-cca1e208881d",
        "parentId" : null,
        "authorId" : "8a8917fc-fc5d-40f0-82b7-d96599d0e82c",
        "body" : "I'm not sure it's a good idea to add this. What is the use case? Wouldn't it prevent catching mistakes when one of the supported attributes is mistyped?",
        "createdAt" : "2019-10-04T03:07:27Z",
        "updatedAt" : "2019-10-04T08:07:37Z",
        "lastEditedBy" : "8a8917fc-fc5d-40f0-82b7-d96599d0e82c",
        "tags" : [
        ]
      },
      {
        "id" : "020fd848-03a8-4a3a-987c-d8f11e1ab76c",
        "parentId" : "b6931829-735b-4b36-b060-cca1e208881d",
        "authorId" : "c84adefc-9af1-4b59-a49e-73d8ab74100f",
        "body" : "I don't think it's the role of types definition to validate or constraint values (edit for clarity: constraints shouldn't be stricter than the underlying code). Sure adding known standardized attributes is a nice added value, but you also have to accuratly represent the code ability.\r\n\r\nRight now the library is compatible with `SameSite` and also with other attributes who may be added in the future. The only thing breaking it is too restrictive type definition.\r\n\r\nIf in a few years navigators decide to add let's say `SpdyOnly` or whatever, the library will be fine, types definition should also.",
        "createdAt" : "2019-10-04T05:47:04Z",
        "updatedAt" : "2019-10-04T08:52:37Z",
        "lastEditedBy" : "c84adefc-9af1-4b59-a49e-73d8ab74100f",
        "tags" : [
        ]
      },
      {
        "id" : "baae46ea-1461-4eaf-9835-40b3f060068d",
        "parentId" : "b6931829-735b-4b36-b060-cca1e208881d",
        "authorId" : "c84adefc-9af1-4b59-a49e-73d8ab74100f",
        "body" : "Restricting the properties is an API design decision that should be made in the library. Types definition, IMHO, should be about describing and providing type safety, not adding our own opinions on API design.",
        "createdAt" : "2019-10-04T10:42:52Z",
        "updatedAt" : "2019-10-04T10:42:52Z",
        "lastEditedBy" : "c84adefc-9af1-4b59-a49e-73d8ab74100f",
        "tags" : [
        ]
      },
      {
        "id" : "a5b8a2e9-e5b1-4878-b014-973e050cd24a",
        "parentId" : "b6931829-735b-4b36-b060-cca1e208881d",
        "authorId" : "8a8917fc-fc5d-40f0-82b7-d96599d0e82c",
        "body" : "Normally I'd agree about it being a library decision, but in this case it's more an implementation detail of the library, and the API design decision is ultimately made by the HTTP Cookie specification implemented by browsers. If some other attribute is hypothetically added in the future, the type definitions should be updated to correctly suggest and constrain this property (just as is being done now for SameSite).",
        "createdAt" : "2019-10-04T14:17:23Z",
        "updatedAt" : "2019-10-04T14:17:23Z",
        "lastEditedBy" : "8a8917fc-fc5d-40f0-82b7-d96599d0e82c",
        "tags" : [
        ]
      },
      {
        "id" : "2291ac6e-b284-4a89-ac90-961b17a341ea",
        "parentId" : "b6931829-735b-4b36-b060-cca1e208881d",
        "authorId" : "c84adefc-9af1-4b59-a49e-73d8ab74100f",
        "body" : "I'm sorry to insist, but it's not an implementation detail, it's by design.\r\n\r\n1. The RFC has the grammar for it (https://tools.ietf.org/html/rfc6265#section-4.1.1):\r\n```ABNF\r\n cookie-av         = expires-av / max-age-av / domain-av /\r\n                     path-av / secure-av / httponly-av /\r\n                     extension-av\r\n expires-av        = \"Expires=\" sane-cookie-date\r\n max-age-av        = \"Max-Age=\" non-zero-digit *DIGIT\r\n domain-av         = \"Domain=\" domain-value\r\n path-av           = \"Path=\" path-value\r\n secure-av         = \"Secure\"\r\n httponly-av       = \"HttpOnly\"\r\n extension-av      = <any CHAR except CTLs or \";\">\r\n```\r\n2. There's an issue for it (https://github.com/js-cookie/js-cookie/issues/276)\r\n3. And also a merged PR complete with explicit unit test for unofficial attributes (https://github.com/js-cookie/js-cookie/pull/293)",
        "createdAt" : "2019-10-04T19:24:50Z",
        "updatedAt" : "2019-10-04T19:24:50Z",
        "lastEditedBy" : "c84adefc-9af1-4b59-a49e-73d8ab74100f",
        "tags" : [
        ]
      },
      {
        "id" : "9cc1ff5b-3dce-43c1-b15d-3d6336674bfd",
        "parentId" : "b6931829-735b-4b36-b060-cca1e208881d",
        "authorId" : "8a8917fc-fc5d-40f0-82b7-d96599d0e82c",
        "body" : "Okay, I guess it makes sense then. Shouldn't the value at least have a type of `string`, though, instead of `any`?",
        "createdAt" : "2019-10-04T19:37:48Z",
        "updatedAt" : "2019-10-04T19:37:48Z",
        "lastEditedBy" : "8a8917fc-fc5d-40f0-82b7-d96599d0e82c",
        "tags" : [
        ]
      },
      {
        "id" : "e6659064-35ab-43ee-99a3-ec6f669f2bd2",
        "parentId" : "b6931829-735b-4b36-b060-cca1e208881d",
        "authorId" : "c84adefc-9af1-4b59-a49e-73d8ab74100f",
        "body" : "Well you can pass:\r\n* `string` which would be used as is\r\n* `number` which would be casted to string\r\n* boolean `true`, the attribute will be printed but won't have value (the loop will hit the second `continue`)\r\n\r\nOther values can technically also be passed but don't really make sense:\r\n* boolean `false`, `null`, `undefined` and anything falsy, will skip the attribute (the loop will hit the first `continue`)\r\n* `array` and `function` will be casted to string\r\n\r\nKinda grey area:\r\n* `object` could potentially make sense if the object implements `toString`",
        "createdAt" : "2019-10-04T20:01:49Z",
        "updatedAt" : "2019-10-04T20:03:10Z",
        "lastEditedBy" : "c84adefc-9af1-4b59-a49e-73d8ab74100f",
        "tags" : [
        ]
      },
      {
        "id" : "8751f3d4-d1eb-49f3-ad25-74b22092d949",
        "parentId" : "b6931829-735b-4b36-b060-cca1e208881d",
        "authorId" : "8a8917fc-fc5d-40f0-82b7-d96599d0e82c",
        "body" : "If the property can only hold a string value, I think it should be declared as such. Devs can call `toString` themselves on objects/numbers if they want to store them. Otherwise it's confusing if you get a different value out than you put in.",
        "createdAt" : "2019-10-04T20:09:53Z",
        "updatedAt" : "2019-10-04T20:09:53Z",
        "lastEditedBy" : "8a8917fc-fc5d-40f0-82b7-d96599d0e82c",
        "tags" : [
        ]
      },
      {
        "id" : "ea1c99ea-8d5d-4398-aec3-99e170c32e51",
        "parentId" : "b6931829-735b-4b36-b060-cca1e208881d",
        "authorId" : "c84adefc-9af1-4b59-a49e-73d8ab74100f",
        "body" : "So `string | number | boolean` ?",
        "createdAt" : "2019-10-04T20:19:27Z",
        "updatedAt" : "2019-10-04T20:19:27Z",
        "lastEditedBy" : "c84adefc-9af1-4b59-a49e-73d8ab74100f",
        "tags" : [
        ]
      },
      {
        "id" : "56755849-0fb2-48f4-aea1-70dce190d260",
        "parentId" : "b6931829-735b-4b36-b060-cca1e208881d",
        "authorId" : "8a8917fc-fc5d-40f0-82b7-d96599d0e82c",
        "body" : "No, only `string` (just like the value parameter on the `set` method has a string type, even though technically in JavaScript you could pass other things to it which would be cast to a string).",
        "createdAt" : "2019-10-04T20:40:18Z",
        "updatedAt" : "2019-10-04T20:40:18Z",
        "lastEditedBy" : "8a8917fc-fc5d-40f0-82b7-d96599d0e82c",
        "tags" : [
        ]
      },
      {
        "id" : "d80a7c31-7638-48fb-9bd1-0e34df14ca3a",
        "parentId" : "b6931829-735b-4b36-b060-cca1e208881d",
        "authorId" : "c84adefc-9af1-4b59-a49e-73d8ab74100f",
        "body" : "Accepting only `string` won't do the trick because you need at least `string | boolean` to declare value-less attributes.\r\n\r\nAlso I just tested it and the generic property declaration have to at least be compatible with all other attributes declaration or else other attributes will throw `ts(2411)` errors.\r\nSo the bare minimum is `[property: string]: string | number | boolean | Date | undefined;`... might as well keep `any`\r\n\r\nhttps://www.typescriptlang.org/docs/handbook/interfaces.html#indexable-types",
        "createdAt" : "2019-10-04T21:00:39Z",
        "updatedAt" : "2019-10-04T21:00:40Z",
        "lastEditedBy" : "c84adefc-9af1-4b59-a49e-73d8ab74100f",
        "tags" : [
        ]
      },
      {
        "id" : "23f6b1d3-3437-465d-bc92-b4975bce5bcb",
        "parentId" : "b6931829-735b-4b36-b060-cca1e208881d",
        "authorId" : "c84adefc-9af1-4b59-a49e-73d8ab74100f",
        "body" : "Thank you for your time @theodorejb ",
        "createdAt" : "2019-10-04T21:12:35Z",
        "updatedAt" : "2019-10-04T21:12:35Z",
        "lastEditedBy" : "c84adefc-9af1-4b59-a49e-73d8ab74100f",
        "tags" : [
        ]
      }
    ],
    "commit" : "be2271ac97c00d9daa00dabff17249b6644cebea",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +46,50 @@         * section 5.2.\n         */\n        [property: string]: any;\n    }\n"
  }
]