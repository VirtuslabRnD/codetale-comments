[
  {
    "id" : "683e7bda-cab0-4f1f-bfdf-c8bf96fbbccc",
    "prId" : 16432,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/16432#pullrequestreview-37211356",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca4c5087-df63-41da-a812-fd66602106c0",
        "parentId" : null,
        "authorId" : "3d4c1e13-0523-4e9c-8765-e6e662a3091b",
        "body" : "why is this an optional value？",
        "createdAt" : "2017-05-10T03:49:49Z",
        "updatedAt" : "2017-05-10T05:51:00Z",
        "lastEditedBy" : "3d4c1e13-0523-4e9c-8765-e6e662a3091b",
        "tags" : [
        ]
      },
      {
        "id" : "7be1f6af-b343-4f12-b72e-90f919978217",
        "parentId" : "ca4c5087-df63-41da-a812-fd66602106c0",
        "authorId" : "69ea6e57-b431-44aa-8085-c0b426b6b4a7",
        "body" : "As i mentioned above, the navigation prop does not need to be provided every time a StackNavigator is instantiated. Perhaps it would be better suited to have a default value, instead of optional.",
        "createdAt" : "2017-05-10T05:09:20Z",
        "updatedAt" : "2017-05-10T05:51:00Z",
        "lastEditedBy" : "69ea6e57-b431-44aa-8085-c0b426b6b4a7",
        "tags" : [
        ]
      },
      {
        "id" : "91ae5964-6216-4527-affd-d643f21a63eb",
        "parentId" : "ca4c5087-df63-41da-a812-fd66602106c0",
        "authorId" : "3d4c1e13-0523-4e9c-8765-e6e662a3091b",
        "body" : "Sorry. 😳\r\nyou are right.",
        "createdAt" : "2017-05-10T05:14:45Z",
        "updatedAt" : "2017-05-10T05:51:00Z",
        "lastEditedBy" : "3d4c1e13-0523-4e9c-8765-e6e662a3091b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5733a87591ea2c03540357a31ed5b46f2600d0c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +477,481 @@\ninterface NavigationContainerProps {\n  navigation?: NavigationProp<any, NavigationAction>\n  onNavigationStateChange?: (\n    preNavigationState: NavigationState,"
  },
  {
    "id" : "2a959f62-bb7b-496b-aa58-0f1babe664b9",
    "prId" : 17096,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17096#pullrequestreview-44445496",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47d31d0a-c947-4574-8053-945cc4ed1983",
        "parentId" : null,
        "authorId" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "body" : "Could you revert this to the single-line comma-separated format? I think @dt-bot has trouble parsing headers that deviate at all from this exact format.",
        "createdAt" : "2017-06-15T23:38:01Z",
        "updatedAt" : "2017-06-15T23:38:01Z",
        "lastEditedBy" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "tags" : [
        ]
      }
    ],
    "commit" : "b15fc38fcb90be8a470890db28c30dad1f43d114",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +3,7 @@// Definitions by: Huhuanming <https://github.com/huhuanming>\n//                 mhcgrq <https://github.com/mhcgrq>\n//                 fangpenlin <https://github.com/fangpenlin>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n"
  },
  {
    "id" : "7d8a8663-68fb-42d0-8179-37f1f613d48c",
    "prId" : 17201,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17201#pullrequestreview-44207877",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f45e485b-0dc5-475f-aa6d-f005a1aa8b0c",
        "parentId" : null,
        "authorId" : "3d4c1e13-0523-4e9c-8765-e6e662a3091b",
        "body" : " it would be better like this.\r\n`key?: string | null,`   =>  `key?: string,`\r\n\r\nThe optional value need not to add null type again.",
        "createdAt" : "2017-06-15T03:54:22Z",
        "updatedAt" : "2017-06-15T03:54:47Z",
        "lastEditedBy" : "3d4c1e13-0523-4e9c-8765-e6e662a3091b",
        "tags" : [
        ]
      },
      {
        "id" : "4a4cdd3b-ea45-47fb-be99-860d1d25759c",
        "parentId" : "f45e485b-0dc5-475f-aa6d-f005a1aa8b0c",
        "authorId" : "9abe6bd1-4455-4a95-a6b6-67aa6a09a57a",
        "body" : "I think when using the `--strictNullChecks` flag you need `| null`. It wouldn't compile in my project without it. See https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html",
        "createdAt" : "2017-06-15T03:59:50Z",
        "updatedAt" : "2017-06-15T03:59:50Z",
        "lastEditedBy" : "9abe6bd1-4455-4a95-a6b6-67aa6a09a57a",
        "tags" : [
        ]
      },
      {
        "id" : "e9a144f3-e7eb-4784-8c97-9d0316fe126f",
        "parentId" : "f45e485b-0dc5-475f-aa6d-f005a1aa8b0c",
        "authorId" : "3d4c1e13-0523-4e9c-8765-e6e662a3091b",
        "body" : "ummm...\r\nIn that case,  I usually do like this.\r\n```\r\n reset(undefined)\r\n```\r\nI can't judge now.\r\n\r\nMaybe we need to see other typings how to do in this case such as [@types/react-native](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react-native).\r\n\r\nKeep that sames.",
        "createdAt" : "2017-06-15T05:24:16Z",
        "updatedAt" : "2017-06-15T05:25:04Z",
        "lastEditedBy" : "3d4c1e13-0523-4e9c-8765-e6e662a3091b",
        "tags" : [
        ]
      },
      {
        "id" : "0c7494fd-b832-4003-b101-23dd9edc1ac2",
        "parentId" : "f45e485b-0dc5-475f-aa6d-f005a1aa8b0c",
        "authorId" : "3d4c1e13-0523-4e9c-8765-e6e662a3091b",
        "body" : "![image](https://user-images.githubusercontent.com/5743863/27166550-2af56d6e-51ce-11e7-9a9d-80b502406b98.png)\r\n\r\nno problem, It' s okay.",
        "createdAt" : "2017-06-15T05:26:19Z",
        "updatedAt" : "2017-06-15T05:26:35Z",
        "lastEditedBy" : "3d4c1e13-0523-4e9c-8765-e6e662a3091b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9ff8d230eb58d33fcb814469eb2491a0ee755c2",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +269,273 @@  type?: 'Navigation/RESET',\n  index: number,\n  key?: string | null,\n  actions: NavigationNavigateAction[],\n}"
  },
  {
    "id" : "bdcf855e-ab2c-4a2f-90a2-fdecefb2123b",
    "prId" : 17597,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17597#pullrequestreview-48125740",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13aeb9d1-c878-406f-b5e5-e19165e44868",
        "parentId" : null,
        "authorId" : "9b7f4578-af32-45d6-ac85-43d4702c6b8b",
        "body" : "Are you sure? I think `params` **is** empty when not given?",
        "createdAt" : "2017-06-29T06:14:27Z",
        "updatedAt" : "2017-07-06T04:45:19Z",
        "lastEditedBy" : "9b7f4578-af32-45d6-ac85-43d4702c6b8b",
        "tags" : [
        ]
      },
      {
        "id" : "17c04d44-7135-4e78-9454-ae7502301292",
        "parentId" : "13aeb9d1-c878-406f-b5e5-e19165e44868",
        "authorId" : "db412a73-b16b-4203-8804-42904beb4e61",
        "body" : "I think it is the user's responsibility to decide whether `params` could be optional. It would be a logical error if the `params` is required but not provided. Mark `params` always optional force an extra check before use it, which is inconvenient and seems unnecessary.",
        "createdAt" : "2017-06-29T06:31:46Z",
        "updatedAt" : "2017-07-06T04:45:19Z",
        "lastEditedBy" : "db412a73-b16b-4203-8804-42904beb4e61",
        "tags" : [
        ]
      },
      {
        "id" : "13df6cb4-0277-430b-b151-b99a7728985a",
        "parentId" : "13aeb9d1-c878-406f-b5e5-e19165e44868",
        "authorId" : "9b7f4578-af32-45d6-ac85-43d4702c6b8b",
        "body" : "Hm, this seems wrong to me. If we're typing out something, we probably want it to be as accurate as possible, even if that isn't quite as convenient sometimes. Here, you're suggesting trading off accuracy for convenience it seems? I think that this library/typing should be generic and not make assumptions about its use - just stick as close to what the actual underlying types are at runtime as possible.\r\n\r\nI do understand it's a bit inconvenient, but why not just cast each time you need to access `params` if you're absolutely sure it exists and should fit some format? For example:\r\n\r\n```\r\nrender() {\r\n    const params: ThisComponentsNavigationParamsInterface = this.props.navigation.state.params;\r\n   return ( <Text>{params.x}</Text> );\r\n}\r\n```\r\n\r\nLastly, I think the biggest point is that this can easily result in trying to access an undefined object in many cases. Consider the following example.\r\n\r\n```\r\ninterface ThisComponentsNavigationParamsInterface {\r\n    something?: string,\r\n}\r\n\r\n...\r\n\r\nrender() {\r\n    if (this.props.navigation.state.params.something) {\r\n       return ( <Text>...</Text> );\r\n    } else {\r\n       return ( <View>...</View> );\r\n    }\r\n}\r\n\r\n...\r\n\r\n<From some other component>\r\n`this.props.navigation.navigate(ThisComponentRouteName);\r\n```\r\n\r\nThis would result in a runtime exception when accessing `state.params.something`, since `params` is actually totally empty, NOT an empty object. So in this case you'd have to check for `state.params && state.params.something`, which then is as inconvenient as you were saying before, just in the other direction.\r\n\r\nYou could argue that this is still somewhat the user's fault, since maybe they should have allowed `something` to also be `null`, and then passed it in explicitly in the `navigate` call as `null`, but this seems like we're building up more gotchas than solving problems for the general user, especially if they're new.\r\n\r\nThoughts?",
        "createdAt" : "2017-06-29T14:58:59Z",
        "updatedAt" : "2017-07-06T04:45:19Z",
        "lastEditedBy" : "9b7f4578-af32-45d6-ac85-43d4702c6b8b",
        "tags" : [
        ]
      },
      {
        "id" : "21fa5f72-9260-44f4-b702-3831f7b3bc7b",
        "parentId" : "13aeb9d1-c878-406f-b5e5-e19165e44868",
        "authorId" : "db412a73-b16b-4203-8804-42904beb4e61",
        "body" : "I totally agree with \"we probably want it to be as accurate as possible\". If a screen expects its params to be some `T`, it should be free to express this, other than be forced to be `T | undefined`. As in typical react component situation, a component could expect its props type `P`. If an undefined is expected, it could be expressed as `T | undefined` explicitly. Although currently, this could not be enforced by the compiler as props do. I think it would be a logical error to provide an unexpected undefined (as params). To force the (undefined) check does not solve the problem, and make the boundary fuzzy.",
        "createdAt" : "2017-06-29T15:57:14Z",
        "updatedAt" : "2017-07-06T04:45:19Z",
        "lastEditedBy" : "db412a73-b16b-4203-8804-42904beb4e61",
        "tags" : [
        ]
      },
      {
        "id" : "3e4c21db-f900-4f33-8445-dc4fdcc01284",
        "parentId" : "13aeb9d1-c878-406f-b5e5-e19165e44868",
        "authorId" : "9b7f4578-af32-45d6-ac85-43d4702c6b8b",
        "body" : "Wow, so sorry, you're totally right. I was mistakenly thinking of this as still being `params?: NavigationParams`, not the typed-generic `Params` (which is even more ironic since I made this change not too long ago in https://github.com/phanalpha/DefinitelyTyped/commit/9be2563bfc81f9127474f0c319c54532a3321517). This should indeed be changed according to what you did, since this is a typed generic, and the user should in general be responsible for adding `undefined` if they want. But if this were still the generic *map-like object* `NavigationParams`, then we would have wanted to leave this as `params?:`.\r\n\r\nReally sorry about that, I've done some really sloppy and rushed work reviewing your PR. But thanks for the patience and for keeping up the explanation of your approaches and changes!\r\n\r\nThe only thing here is that unfortunately I believe my example with the empty `state.params` could still be applicable if end-users don't take care. I've copied it below:\r\n\r\n```\r\ninterface ThisComponentsNavigationParamsInterface {\r\n    something?: string,\r\n}\r\n\r\n...\r\n\r\nrender() {\r\n    if (this.props.navigation.state.params.something) {\r\n       return ( <Text>...</Text> );\r\n    } else {\r\n       return ( <View>...</View> );\r\n    }\r\n}\r\n\r\n...\r\n\r\n<From some other component>\r\nthis.props.navigation.navigate(ThisComponentRouteName);\r\n```\r\n\r\nTechnically, what should probably be done instead is something like the following if you want to not specify the optional params:\r\n```\r\nconst params: ThisComponentsNavigationParamsInterface = {};\r\nthis.props.navigation.navigate(ThisComponentRouteName, params);\r\n```\r\nBut this may be a gotcha for new users who are more loosely using the typed, and who would still expect at least an empty object in `this.props.navigation.state.params`. Thoughts there?",
        "createdAt" : "2017-06-29T19:07:36Z",
        "updatedAt" : "2017-07-06T04:45:19Z",
        "lastEditedBy" : "9b7f4578-af32-45d6-ac85-43d4702c6b8b",
        "tags" : [
        ]
      },
      {
        "id" : "bb4e4e8d-26ed-4880-be34-abe9faa654bd",
        "parentId" : "13aeb9d1-c878-406f-b5e5-e19165e44868",
        "authorId" : "db412a73-b16b-4203-8804-42904beb4e61",
        "body" : "I would prefer to type `navigate()` more specifically, say a series of `navigate('routeNameX', params: ParamX)` or so, so that the compiler could do all the checks. The navigation logic implies a screen (local) is mostly coupled with the navigator (global). An ideal type system might be too much complicated to implement currently if possible, I think.",
        "createdAt" : "2017-06-30T05:04:30Z",
        "updatedAt" : "2017-07-06T04:45:19Z",
        "lastEditedBy" : "db412a73-b16b-4203-8804-42904beb4e61",
        "tags" : [
        ]
      },
      {
        "id" : "3e53f96b-7e41-4544-be96-16c57d10aa5f",
        "parentId" : "13aeb9d1-c878-406f-b5e5-e19165e44868",
        "authorId" : "9b7f4578-af32-45d6-ac85-43d4702c6b8b",
        "body" : "Yeah, that would certainly be the best case, but as you mentioned, given the decoupling in typings between the local and global contexts, this seems intractable at the time for compilation steps (and anything else before runtime). We'll just leave it up to the user to type their own params at this time, with my suggestion being the form mentioned in my comment above, and copied below:\r\n\r\n```\r\nconst params: ThisComponentsNavigationParamsInterface = {};\r\nthis.props.navigation.navigate(ThisComponentRouteName, params);\r\n```",
        "createdAt" : "2017-07-05T17:37:28Z",
        "updatedAt" : "2017-07-06T04:45:19Z",
        "lastEditedBy" : "9b7f4578-af32-45d6-ac85-43d4702c6b8b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f0b5485dc47fd4dc25faf6f567e9bcc3d35cff2",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +89,93 @@   * e.g. `{ car_id: 123 }` in a route that displays a car.\n   */\n  params: Params,\n};\n"
  },
  {
    "id" : "f5dff65e-5151-435a-8c80-73702672f8af",
    "prId" : 17597,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17597#pullrequestreview-47148992",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "022c259b-de5c-49ca-a375-0ad58983d5b4",
        "parentId" : null,
        "authorId" : "9b7f4578-af32-45d6-ac85-43d4702c6b8b",
        "body" : "This is typed as just `string` in `TypeDefinition.js`. Is there a specific reason to make this allow `null` too? Just wondering, since this introduces a difference from the official Flow typings.",
        "createdAt" : "2017-06-29T06:16:03Z",
        "updatedAt" : "2017-07-06T04:45:19Z",
        "lastEditedBy" : "9b7f4578-af32-45d6-ac85-43d4702c6b8b",
        "tags" : [
        ]
      },
      {
        "id" : "46e5f524-5b00-4263-8517-4099340ae323",
        "parentId" : "022c259b-de5c-49ca-a375-0ad58983d5b4",
        "authorId" : "db412a73-b16b-4203-8804-42904beb4e61",
        "body" : "It is described in the [document](https://reactnavigation.org/docs/navigators/stack#headerBackTitle) and it does work. [Maybe types](https://flow.org/en/docs/types/maybe/) accept the provided type as well as null or undefined. Typescript do not accept null unless specified.",
        "createdAt" : "2017-06-29T06:38:01Z",
        "updatedAt" : "2017-07-06T04:45:19Z",
        "lastEditedBy" : "db412a73-b16b-4203-8804-42904beb4e61",
        "tags" : [
        ]
      },
      {
        "id" : "d8e977a6-7935-4118-9414-8dbb87dc262d",
        "parentId" : "022c259b-de5c-49ca-a375-0ad58983d5b4",
        "authorId" : "3d4c1e13-0523-4e9c-8765-e6e662a3091b",
        "body" : "In strict mode，It requires that declares null when value is optional.\r\n\r\na number of cases In `react-native.d.ts`.",
        "createdAt" : "2017-06-29T07:04:54Z",
        "updatedAt" : "2017-07-06T04:45:19Z",
        "lastEditedBy" : "3d4c1e13-0523-4e9c-8765-e6e662a3091b",
        "tags" : [
        ]
      },
      {
        "id" : "23154904-e4dc-497d-9edc-54be656be6d6",
        "parentId" : "022c259b-de5c-49ca-a375-0ad58983d5b4",
        "authorId" : "9b7f4578-af32-45d6-ac85-43d4702c6b8b",
        "body" : "@phanalpha Ah, sorry, I forgot `null` was a valid value to pass for `headerBackTitle` specifically. Thanks for correcting me, this looks good.",
        "createdAt" : "2017-06-29T14:48:34Z",
        "updatedAt" : "2017-07-06T04:45:19Z",
        "lastEditedBy" : "9b7f4578-af32-45d6-ac85-43d4702c6b8b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f0b5485dc47fd4dc25faf6f567e9bcc3d35cff2",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +265,269 @@  headerTintColor?: string,\n  headerLeft?: React.ReactElement<any>,\n  headerBackTitle?: string | null,\n  headerTruncatedBackTitle?: string,\n  headerBackTitleStyle?: Style,"
  },
  {
    "id" : "13561fa7-afc2-4d2b-a18f-4fab0adae3ec",
    "prId" : 17597,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17597#pullrequestreview-47150067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "249ef53f-6900-41b2-b92e-26dd429c6e4a",
        "parentId" : null,
        "authorId" : "9b7f4578-af32-45d6-ac85-43d4702c6b8b",
        "body" : "Can you move all of this up into the `CUSTOM CONVENIENCE INTERFACES` area (between the `BEGIN` and `END` marks)? Maybe put this next to the stack navigator stuff in that area?",
        "createdAt" : "2017-06-29T06:18:10Z",
        "updatedAt" : "2017-07-06T04:45:19Z",
        "lastEditedBy" : "9b7f4578-af32-45d6-ac85-43d4702c6b8b",
        "tags" : [
        ]
      },
      {
        "id" : "c52d85fa-8c6c-4afd-9ca6-8e2824767d04",
        "parentId" : "249ef53f-6900-41b2-b92e-26dd429c6e4a",
        "authorId" : "db412a73-b16b-4203-8804-42904beb4e61",
        "body" : "`react-navigation.js` exports views and header (`Header`, `HeaderTitle`, `HeaderBackTitle`), most of which are not included in current ts definition. I'm not sure if it is better to have it's own section. And I wonder `CUSTOM CONVENIENCE INTERFACES` is customized by who, or just be distinguished with `TypeDefinition.js`.",
        "createdAt" : "2017-06-29T06:49:43Z",
        "updatedAt" : "2017-07-06T04:45:19Z",
        "lastEditedBy" : "db412a73-b16b-4203-8804-42904beb4e61",
        "tags" : [
        ]
      },
      {
        "id" : "4aff8929-cc3d-4b5c-b32c-ec2d18a7ace8",
        "parentId" : "249ef53f-6900-41b2-b92e-26dd429c6e4a",
        "authorId" : "9b7f4578-af32-45d6-ac85-43d4702c6b8b",
        "body" : "Good point, that section naming is a bit dated now that other things have been put in there, so I agree that `CUSTOM CONVENIENCE INTERFACES` is a bit inaccurate. You can leave this as-is for now, and maybe we can reorganize everything in a separate PR later. Thoughts on labeling sections either just as `Header`, `StackNavigator`, etc., versus by corresponding `react-navigation`-repo file names (`src/views/HeaderBackButton`)?\r\n\r\nFor the former, that's pretty simple, but if we want to point to the `src/...` file in a comment, it will look kinda messy. On the other hand, for the latter, there might be cases where a definition doesn't quite fit under a single file name.\r\n\r\nJust thinking out loud, not important for this PR, but open to any opinions now. Thanks!",
        "createdAt" : "2017-06-29T14:51:47Z",
        "updatedAt" : "2017-07-06T04:45:19Z",
        "lastEditedBy" : "9b7f4578-af32-45d6-ac85-43d4702c6b8b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f0b5485dc47fd4dc25faf6f567e9bcc3d35cff2",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +680,684 @@\n\n/*\n * Header\n */"
  },
  {
    "id" : "2ce1301e-6ba8-416c-a403-ba87607edc04",
    "prId" : 18982,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18982#pullrequestreview-56382324",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87ad8557-f49a-464b-bbba-a475d575bd20",
        "parentId" : null,
        "authorId" : "f930c153-5ec4-4671-bc7e-f04fc58c0281",
        "body" : "Adding your name here means you agree to be a maintainer. You'll receive notifications of all issues, PRs. Just making sure you know what you're doing @timwangdev ",
        "createdAt" : "2017-08-15T15:49:31Z",
        "updatedAt" : "2017-08-15T15:49:31Z",
        "lastEditedBy" : "f930c153-5ec4-4671-bc7e-f04fc58c0281",
        "tags" : [
        ]
      },
      {
        "id" : "2df61aae-a040-4283-9f49-365c583b2652",
        "parentId" : "87ad8557-f49a-464b-bbba-a475d575bd20",
        "authorId" : "0e870c41-085d-4733-9658-282dcd07ee1e",
        "body" : "Yes. Thanks for mention.",
        "createdAt" : "2017-08-15T15:50:17Z",
        "updatedAt" : "2017-08-15T15:50:17Z",
        "lastEditedBy" : "0e870c41-085d-4733-9658-282dcd07ee1e",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa00e46e93d532c2c08f8e9d0faca320da65eb7d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +9,13 @@//                 phanalpha <https://github.com/phanalpha>\n//                 charlesfamu <https://github.com/charlesfamu>\n//                 Tim Wang <https://github.com/timwangdev>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.3"
  },
  {
    "id" : "076a8d4f-ac0f-47e0-9703-38084db7591a",
    "prId" : 22063,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/22063#pullrequestreview-82588603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9593420f-380d-4192-98ae-f045b19b958e",
        "parentId" : null,
        "authorId" : "b4ffcec2-2afc-4cc0-9b6c-d7ee2c192de1",
        "body" : "Also adding your name here, says you agree to be a maintainer for these typings. So you'll be pinged for code reviews and issues. Just making sure you know what you're doing. ",
        "createdAt" : "2017-12-11T18:14:00Z",
        "updatedAt" : "2017-12-11T18:14:10Z",
        "lastEditedBy" : "b4ffcec2-2afc-4cc0-9b6c-d7ee2c192de1",
        "tags" : [
        ]
      },
      {
        "id" : "c5d0fc99-2964-4d64-9be0-c347a449a284",
        "parentId" : "9593420f-380d-4192-98ae-f045b19b958e",
        "authorId" : "51aceb1a-6548-4721-9e68-cfc305a2ff17",
        "body" : "Yes, I know about this, just didn't know about TS versioning. Every project depends on this library and I'll try to contribute to it and try to review the code.",
        "createdAt" : "2017-12-11T18:21:23Z",
        "updatedAt" : "2017-12-11T18:21:23Z",
        "lastEditedBy" : "51aceb1a-6548-4721-9e68-cfc305a2ff17",
        "tags" : [
        ]
      },
      {
        "id" : "184f5cba-e19a-4db8-8f9b-0f75c441cc0d",
        "parentId" : "9593420f-380d-4192-98ae-f045b19b958e",
        "authorId" : "b4ffcec2-2afc-4cc0-9b6c-d7ee2c192de1",
        "body" : "Great 👍 ",
        "createdAt" : "2017-12-11T18:22:04Z",
        "updatedAt" : "2017-12-11T18:22:04Z",
        "lastEditedBy" : "b4ffcec2-2afc-4cc0-9b6c-d7ee2c192de1",
        "tags" : [
        ]
      }
    ],
    "commit" : "016956f89ce3be1502175c1066e20b6ba83bd6de",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +11,15 @@//                 Tim Wang <https://github.com/timwangdev>\n//                 Qibang Sun <https://github.com/bang88>\n//                 Sergei Butko: <https://github.com/svbutko>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.3"
  },
  {
    "id" : "ff658c85-22b5-4636-9d17-53c070d968eb",
    "prId" : 23916,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23916#pullrequestreview-106382114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4de59c9-096b-4c66-b813-36724cc85d25",
        "parentId" : null,
        "authorId" : "f930c153-5ec4-4671-bc7e-f04fc58c0281",
        "body" : "@timwangdev Here's where it was added. However getScreen isn't in the source code *directly*. Can check the search here https://github.com/react-navigation/react-navigation/search?q=getScreen&type=Code&utf8=✓. Looks like it's used in tests",
        "createdAt" : "2018-03-15T03:19:14Z",
        "updatedAt" : "2018-03-15T03:19:14Z",
        "lastEditedBy" : "f930c153-5ec4-4671-bc7e-f04fc58c0281",
        "tags" : [
        ]
      },
      {
        "id" : "89f441d1-a22a-4405-bb1f-41f6aa307116",
        "parentId" : "f4de59c9-096b-4c66-b813-36724cc85d25",
        "authorId" : "0e870c41-085d-4733-9658-282dcd07ee1e",
        "body" : "This change is adding `NavigationCompoent` to the Union Type and code format. It's still `screen` or `getScreen`. The test [here](https://github.com/react-navigation/react-navigation/blob/4569ad49f9224d7a980dafe3c3798fa2384aa788/src/routers/__tests__/validateRouteConfigMap-test.js#L40) says it should fail if `screen` and `getScreen` both defined.",
        "createdAt" : "2018-03-15T08:06:54Z",
        "updatedAt" : "2018-03-15T09:45:06Z",
        "lastEditedBy" : "0e870c41-085d-4733-9658-282dcd07ee1e",
        "tags" : [
        ]
      },
      {
        "id" : "c9fa8adf-7604-44ea-9787-60d334f9e2e0",
        "parentId" : "f4de59c9-096b-4c66-b813-36724cc85d25",
        "authorId" : "f930c153-5ec4-4671-bc7e-f04fc58c0281",
        "body" : "The test does that sure, but that's on the js side. I actually can't seem to get any combination of `screen` or `getScreen` to work.\r\n\r\nI think the `NavigationComponent` is too strong of a typing as well. It doesn't allow for simple functional component since it extends from `React.ComponentClass`. Think we need to revert this",
        "createdAt" : "2018-03-15T11:08:18Z",
        "updatedAt" : "2018-03-15T11:08:19Z",
        "lastEditedBy" : "f930c153-5ec4-4671-bc7e-f04fc58c0281",
        "tags" : [
        ]
      },
      {
        "id" : "06ece0e8-1789-4e15-bac9-8b5487eed18f",
        "parentId" : "f4de59c9-096b-4c66-b813-36724cc85d25",
        "authorId" : "f930c153-5ec4-4671-bc7e-f04fc58c0281",
        "body" : "Trying to force the type for a functional component fails as well: \r\n```tsx\r\nconst Lecturers: NavigationScreenComponent<{}, {}> = () => <Text>Lecturers</Text>\r\n```\r\n\r\n```\r\nType '() => Element' is not assignable to type 'NavigationScreenComponent<{}, {}>'.\r\n  Type '() => Element' provides no match for the signature 'new (props: {}, context?: any): Component<{}, ComponentState>'.\r\n```",
        "createdAt" : "2018-03-15T11:10:30Z",
        "updatedAt" : "2018-03-15T11:10:31Z",
        "lastEditedBy" : "f930c153-5ec4-4671-bc7e-f04fc58c0281",
        "tags" : [
        ]
      },
      {
        "id" : "05a5cf3e-b16f-40ee-8a76-420bcdb50f1c",
        "parentId" : "f4de59c9-096b-4c66-b813-36724cc85d25",
        "authorId" : "f930c153-5ec4-4671-bc7e-f04fc58c0281",
        "body" : "This is how it fails for the `getScreen`:\r\n\r\n```tsx\r\nexport default StackNavigator(\r\n  {\r\n    lecturers: {\r\n      screen: Lecturers,\r\n    },\r\n  }\r\n)\r\n```\r\n\r\n```\r\nArgument of type '{ lecturers: { screen: () => Element; }; }' is not assignable to parameter of type 'NavigationRouteConfigMap'.\r\n  Property 'lecturers' is incompatible with index signature.\r\n    Type '{ screen: () => Element; }' is not assignable to type 'NavigationRouteConfig'.\r\n      Type '{ screen: () => Element; }' is not assignable to type '{ navigationOptions?: any; path?: string | undefined; } & { getScreen: () => NavigationComponent; }'.\r\n        Type '{ screen: () => Element; }' is not assignable to type '{ getScreen: () => NavigationComponent; }'.\r\n          Property 'getScreen' is missing in type '{ screen: () => Element; }'.\r\n```",
        "createdAt" : "2018-03-15T11:13:18Z",
        "updatedAt" : "2018-03-15T11:13:19Z",
        "lastEditedBy" : "f930c153-5ec4-4671-bc7e-f04fc58c0281",
        "tags" : [
        ]
      },
      {
        "id" : "61c034ce-b406-4fd5-a78e-dcd75f501aaa",
        "parentId" : "f4de59c9-096b-4c66-b813-36724cc85d25",
        "authorId" : "f930c153-5ec4-4671-bc7e-f04fc58c0281",
        "body" : "TypeScript 2.7, using `strict: true`",
        "createdAt" : "2018-03-15T11:14:18Z",
        "updatedAt" : "2018-03-15T11:14:19Z",
        "lastEditedBy" : "f930c153-5ec4-4671-bc7e-f04fc58c0281",
        "tags" : [
        ]
      },
      {
        "id" : "3ad11a25-378e-4de7-a7a6-cdf8a11d0640",
        "parentId" : "f4de59c9-096b-4c66-b813-36724cc85d25",
        "authorId" : "0e870c41-085d-4733-9658-282dcd07ee1e",
        "body" : "Just back from holiday. I will open a new PR for those issues later this week.",
        "createdAt" : "2018-03-23T02:17:37Z",
        "updatedAt" : "2018-03-23T02:17:37Z",
        "lastEditedBy" : "0e870c41-085d-4733-9658-282dcd07ee1e",
        "tags" : [
        ]
      },
      {
        "id" : "c54cce0f-5f40-4938-ace5-d6898617bbb0",
        "parentId" : "f4de59c9-096b-4c66-b813-36724cc85d25",
        "authorId" : "0e870c41-085d-4733-9658-282dcd07ee1e",
        "body" : "@iRoachie Please check PR at #24471",
        "createdAt" : "2018-03-23T05:32:40Z",
        "updatedAt" : "2018-03-23T05:32:40Z",
        "lastEditedBy" : "0e870c41-085d-4733-9658-282dcd07ee1e",
        "tags" : [
        ]
      }
    ],
    "commit" : "4739cf80e488687d8dc0d2f638f7b25602689b31",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +307,311 @@    screen: NavigationComponent,\n} | {\n    getScreen: () => NavigationComponent,\n};\n"
  },
  {
    "id" : "ed5007f8-2280-4502-ab09-9cc54038c056",
    "prId" : 24051,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24051#pullrequestreview-102850961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "903e7d73-ac3d-42fa-a4c9-62fbbe3ebc89",
        "parentId" : null,
        "authorId" : "f930c153-5ec4-4671-bc7e-f04fc58c0281",
        "body" : "Adding your name here means you'll be one of the maintainers for these typings, and you'll get notifications for issues and PRs to this definition. Just checking if you understand what it means",
        "createdAt" : "2018-03-10T13:20:13Z",
        "updatedAt" : "2018-03-15T21:27:40Z",
        "lastEditedBy" : "f930c153-5ec4-4671-bc7e-f04fc58c0281",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d4ae0d76492c0d9c8467e0bc0add43445add346",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +14,18 @@//                 Roberto Huertas: <https://github.com/robertohuertasm>\n//                 Steven Miller <https://github.com/YourGamesBeOver>\n//                 Armando Assuncao <https://github.com/ArmandoAssuncao>\n//                 Ciaran Liedeman <https://github.com/cliedeman>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped"
  },
  {
    "id" : "dc4a403f-a0d7-4b92-b3f5-9f425bee3c00",
    "prId" : 26916,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26916#pullrequestreview-133181598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66b14c96-a4d8-4da6-b335-b8f3993d4b63",
        "parentId" : null,
        "authorId" : "f930c153-5ec4-4671-bc7e-f04fc58c0281",
        "body" : "Confirming you know that adding your name here makes you a maintainer, and you'll receive further notifications for any PRs and issues for react-navigation",
        "createdAt" : "2018-06-29T04:44:01Z",
        "updatedAt" : "2018-06-29T04:44:25Z",
        "lastEditedBy" : "f930c153-5ec4-4671-bc7e-f04fc58c0281",
        "tags" : [
        ]
      },
      {
        "id" : "ad8e65a7-f923-48ec-8c92-0a7d094735be",
        "parentId" : "66b14c96-a4d8-4da6-b335-b8f3993d4b63",
        "authorId" : "84f10d88-8d06-404e-91d3-b5b22fc15632",
        "body" : "@iRoachie That's cool with me. I'm using `react-navigation` in all of my RN projects, so I'm more than happy to get a bit involved. Just started migrating from Flow to TypeScript where contributing to the types seems much easier. Good to Go?",
        "createdAt" : "2018-06-29T08:20:57Z",
        "updatedAt" : "2018-06-29T08:20:57Z",
        "lastEditedBy" : "84f10d88-8d06-404e-91d3-b5b22fc15632",
        "tags" : [
        ]
      },
      {
        "id" : "760c938a-2160-456f-8ded-44bd00659d68",
        "parentId" : "66b14c96-a4d8-4da6-b335-b8f3993d4b63",
        "authorId" : "f930c153-5ec4-4671-bc7e-f04fc58c0281",
        "body" : "Great!",
        "createdAt" : "2018-06-29T10:51:53Z",
        "updatedAt" : "2018-06-29T10:51:53Z",
        "lastEditedBy" : "f930c153-5ec4-4671-bc7e-f04fc58c0281",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c42098631673b56a278c7cc49da1f19d92015e0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +19,23 @@//                 Jérémy Magrin <https://github.com/magrinj>\n//                 Luca Campana <https://github.com/TizioFittizio>\n//                 Ullrich Schaefer <https://github.com/stigi>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.6"
  }
]