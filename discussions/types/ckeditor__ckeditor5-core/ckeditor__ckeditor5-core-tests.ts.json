[
  {
    "id" : "376ceefc-01eb-4509-bd5b-d66647d2b0dd",
    "prId" : 54924,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/54924#pullrequestreview-721554089",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07459571-b5d9-44c8-b708-00a3a9976d4a",
        "parentId" : null,
        "authorId" : "6e3a16ae-7de7-4546-93f5-068fdc628fbf",
        "body" : "Relying in a string can lead to errors. As I mentioned in the comments, you should check if your variable is `instanceof` a specific `Plugin` subclass.",
        "createdAt" : "2021-08-03T18:52:21Z",
        "updatedAt" : "2021-08-03T18:52:21Z",
        "lastEditedBy" : "6e3a16ae-7de7-4546-93f5-068fdc628fbf",
        "tags" : [
        ]
      },
      {
        "id" : "c3a59a29-bde1-444a-aa62-cb1946a175b4",
        "parentId" : "07459571-b5d9-44c8-b708-00a3a9976d4a",
        "authorId" : "63a73438-003a-47d8-97ec-7304393f7cd4",
        "body" : "I entirely agree that using the form of `get()` that accepts a string is inherently type-unsafe, and will always need to be coupled with a type casting, or an `instanceof` check (which I also agree is safer than just type casting).\r\n\r\nUsing the form of `get()` that accepts a plugin class (constructor) reliably returns an instance of that class (or throws an error), so no `instanceof` check or casting is needed in that case, which is the main use case this PR is enabling.",
        "createdAt" : "2021-08-03T18:56:54Z",
        "updatedAt" : "2021-08-03T18:57:21Z",
        "lastEditedBy" : "63a73438-003a-47d8-97ec-7304393f7cd4",
        "tags" : [
        ]
      },
      {
        "id" : "77072f51-e738-451d-a857-9dcf75601f9c",
        "parentId" : "07459571-b5d9-44c8-b708-00a3a9976d4a",
        "authorId" : "63a73438-003a-47d8-97ec-7304393f7cd4",
        "body" : "I do think you were squashing some problems with the types by using `instanceof`. That's a strong enough check that the typescript compiler will let you treat the value as an instance of the plugin inside the if block, but the type is still incorrect -- e.g. try actually casting the return value to an instance of your plugin class. When I tried the compiler complained that `MyPlugin` and `() => Plugin` don't overlap sufficiently.",
        "createdAt" : "2021-08-03T18:59:19Z",
        "updatedAt" : "2021-08-03T18:59:19Z",
        "lastEditedBy" : "63a73438-003a-47d8-97ec-7304393f7cd4",
        "tags" : [
        ]
      },
      {
        "id" : "a882963d-86f2-4d13-b454-72fc69d35aa1",
        "parentId" : "07459571-b5d9-44c8-b708-00a3a9976d4a",
        "authorId" : "6e3a16ae-7de7-4546-93f5-068fdc628fbf",
        "body" : "> try actually casting\r\n\r\nYou shouldn't cast :smile: \r\n\r\nBy the way, I liked your approach of overloading `get`. I'll try some locally now, but could you check the PR I mentioned and add whatever needed to support `ContextPlugin` too. I would approve this after that.",
        "createdAt" : "2021-08-03T19:10:23Z",
        "updatedAt" : "2021-08-03T19:10:52Z",
        "lastEditedBy" : "6e3a16ae-7de7-4546-93f5-068fdc628fbf",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5e706fab1bc9a59c8797833becad4546f1b5be1",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +57,61 @@    get pluginName() {\n        return 'MyPlugin';\n    }\n\n    myMethod() {"
  }
]