[
  {
    "id" : "f75c886d-47de-4444-b94e-4f339abbcd7d",
    "prId" : 30467,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30467#pullrequestreview-174211489",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "762c4317-c8b3-4bba-965f-b8eb5d0f16df",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "https://github.com/styled-components/styled-components/pull/2200 implements the function style, [this commit](https://github.com/styled-components/styled-components/commit/ba34abe681f4962a5ee160421bb80eede0d196a3) deprecates the object-with-functions style",
        "createdAt" : "2018-11-12T14:22:12Z",
        "updatedAt" : "2018-11-13T11:45:59Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "b2f56ba5-f282-4362-a3a9-40e6c151c237",
        "parentId" : "762c4317-c8b3-4bba-965f-b8eb5d0f16df",
        "authorId" : "aab5faa9-50f5-4c59-bab8-32e15471c81c",
        "body" : "Thanks for jumping on this so quickly!",
        "createdAt" : "2018-11-13T06:40:51Z",
        "updatedAt" : "2018-11-13T11:45:59Z",
        "lastEditedBy" : "aab5faa9-50f5-4c59-bab8-32e15471c81c",
        "tags" : [
        ]
      }
    ],
    "commit" : "539ee2291287af0a6e9b30a873324cdf1f057b0f",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +75,79 @@type DeprecatedAttrs<P, A extends Partial<P>, T> = {\n    [K in keyof A]: ((props: ThemedStyledProps<P, T>) => A[K]) | A[K]\n};\n\nexport type ThemedGlobalStyledClassProps<P, T> = P & {"
  },
  {
    "id" : "5b1e8846-1073-4086-966e-fecb595960fe",
    "prId" : 30467,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30467#pullrequestreview-174306547",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "750500e7-9cf8-411b-b137-ec2759cc0a88",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Good news is, these two overloads are sufficient to implement the `as` prop in TS 3.2. The bad news is, their presence at all causes everything to break in TS<3.2.",
        "createdAt" : "2018-11-13T11:05:33Z",
        "updatedAt" : "2018-11-13T11:45:59Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "539ee2291287af0a6e9b30a873324cdf1f057b0f",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +118,122 @@    // <AsC extends keyof JSX.IntrinsicElements | React.ComponentType<any> = C>(\n    //   props: StyledComponentPropsWithAs<AsC, T, O, A>\n    // ): React.ReactElement<StyledComponentPropsWithAs<AsC, T, O, A>>\n\n    // TODO (TypeScript 3.2): delete this overload"
  },
  {
    "id" : "ab5d113a-64ac-4f6c-9e18-005a83894481",
    "prId" : 30467,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30467#pullrequestreview-174324042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b09c833-2d3f-4e61-89d8-dae07d3e4d46",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "This problem not even TS 3.2 solves...",
        "createdAt" : "2018-11-13T11:56:53Z",
        "updatedAt" : "2018-11-13T12:05:10Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "539ee2291287af0a6e9b30a873324cdf1f057b0f",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +126,130 @@             * Typing Note: prefer using .withComponent for now as it is actually type-safe.\n             *\n             * String types need to be cast to themselves to become literal types (as={'a' as 'a'}).\n             */\n            as?: keyof JSX.IntrinsicElements | React.ComponentType<any>"
  },
  {
    "id" : "5462f43f-efd9-4ed5-bd9b-1dd13a34a9a3",
    "prId" : 30467,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30467#pullrequestreview-174324042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11cb3527-5f38-4660-8940-d725a310eda3",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Oops, I forgot to add CSSObject support here.",
        "createdAt" : "2018-11-13T11:59:03Z",
        "updatedAt" : "2018-11-13T12:05:10Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "37f88c2a-2187-45fc-a678-42e789e8571f",
        "parentId" : "11cb3527-5f38-4660-8940-d725a310eda3",
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "One potential breaking change I noticed in my own code is that `U`'s inference seems to be more eager.\r\n\r\nIf you have two function interpolations, and only the second one annotates its props, `U` is still inferred as `{}` instead of as the annotated type of the second interpolation. The first interpolation is the one that needs its props.",
        "createdAt" : "2018-11-13T12:00:16Z",
        "updatedAt" : "2018-11-13T12:05:10Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "539ee2291287af0a6e9b30a873324cdf1f057b0f",
    "line" : 187,
    "diffHunk" : "@@ -1,1 +167,171 @@            >\n        >\n    ): StyledComponent<C, T, O & U, A>;\n    // Fun thing: 'attrs' can also provide a polymorphic 'as' prop\n    // My head already hurts enough so maybe later..."
  },
  {
    "id" : "ce66e4d9-5a2c-487d-ab4c-5bc5519ae545",
    "prId" : 30467,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30467#pullrequestreview-174324042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ecd9a8c-efb2-4298-be3f-832ce18d6cde",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "I don't know if `keyframes` accepts the `InterpolationFunction` variation. It does have `SimpleInterpolation[]` in the second overload.\r\n\r\n(actually, I haven't tested this either; more homework...)",
        "createdAt" : "2018-11-13T12:02:45Z",
        "updatedAt" : "2018-11-13T12:05:10Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "539ee2291287af0a6e9b30a873324cdf1f057b0f",
    "line" : 405,
    "diffHunk" : "@@ -1,1 +338,342 @@}\n\nexport function keyframes(cssObject: CSSObject): Keyframes;\nexport function keyframes(\n    strings: TemplateStringsArray,"
  },
  {
    "id" : "8e0d7005-3ee6-454c-895e-ad79546ccff0",
    "prId" : 30467,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30467#pullrequestreview-174324042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba60b35c-9556-47a7-bebb-f8e50fde23df",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "The `StyleSheet` in the source code is not the DOM `StyleSheet` which this was accidentally referring to but a private class that is not exported so I didn't define it here.\r\n\r\nAt any rate, the `instance` at runtime will be a `ServerStyleSheet` instance anyway so I just made it be `this` typed.",
        "createdAt" : "2018-11-13T12:04:36Z",
        "updatedAt" : "2018-11-13T12:06:59Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "539ee2291287af0a6e9b30a873324cdf1f057b0f",
    "line" : 458,
    "diffHunk" : "@@ -1,1 +369,373 @@        readableStream: NodeJS.ReadableStream\n    ): NodeJS.ReadableStream;\n    readonly instance: this;\n}\n"
  },
  {
    "id" : "781e1171-0e47-449a-893a-4980482964fe",
    "prId" : 30511,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30511#pullrequestreview-174692130",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8eebb63-b9b4-4079-a612-145727f7146d",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "They can be arbitrarily nested.\r\n\r\n```\r\n> sc.css([[[[[[['color: green;']]]]]]])\r\n[ 'color: green;' ]\r\n```",
        "createdAt" : "2018-11-14T04:19:24Z",
        "updatedAt" : "2018-11-16T07:55:08Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0a99124e9c77cac8e3985001a3865f47d6bf6fa",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +62,66 @@// must be an interface to be self-referential\nexport interface FlattenInterpolation<P>\n    extends ReadonlyArray<Interpolation<P>> {}\nexport type InterpolationValue =\n    | string"
  },
  {
    "id" : "382d1e0c-ab30-42ac-b6ce-32f249cb8295",
    "prId" : 30511,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30511#pullrequestreview-174692130",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afdedd0e-d8ec-40a1-9217-59215d81e4cb",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Same with `SimpleInterpolation`\r\n\r\n```\r\n> sc.keyframes([[[[[[['from { color: green; }']]], { to: { color: 'red' } }]]]])\r\nKeyframes {\r\n  inject: [Function],\r\n  toString: [Function],\r\n  name: 'ijNbFt',\r\n  rules:\r\n   [ '@-webkit-keyframes ijNbFt{from{color:green;}to{color:red;}}',\r\n     '@keyframes ijNbFt{from{color:green;}to{color:red;}}' ],\r\n  id: 'sc-keyframes-ijNbFt' }\r\n```\r\n\r\nHowever, keyframes absolutely cannot take any function. It'll just call `.toString()` on it and add to the rules.",
        "createdAt" : "2018-11-14T04:20:57Z",
        "updatedAt" : "2018-11-16T07:55:08Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0a99124e9c77cac8e3985001a3865f47d6bf6fa",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +75,79 @@// must be an interface to be self-referential\ninterface FlattenSimpleInterpolation\n    extends ReadonlyArray<SimpleInterpolation> {}\n\nexport type InterpolationFunction<P> = (props: P) => Interpolation<P>;"
  },
  {
    "id" : "abc60177-840d-4ea1-b7df-e0a08b7485ab",
    "prId" : 30511,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30511#pullrequestreview-174692130",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc8cf96c-4c9a-4b71-99a9-71379544484b",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "This wasn't excluding any `theme` that might have been expected by interpolations, so it'd be kept as a required prop.",
        "createdAt" : "2018-11-14T04:21:53Z",
        "updatedAt" : "2018-11-16T07:55:08Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0a99124e9c77cac8e3985001a3865f47d6bf6fa",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +86,90 @@};\n\nexport type ThemedGlobalStyledClassProps<P, T> = WithOptionalTheme<P, T> & {\n    suppressMultiMountWarning?: boolean;\n};"
  },
  {
    "id" : "2895aa01-aac2-45e2-a1e6-b5b521f542d2",
    "prId" : 30511,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30511#pullrequestreview-174692130",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ee3770c-0e5b-4e97-91f6-89347a47bf3d",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "This hack was needed to allow this:\r\n\r\n```js\r\nconst StyledDiv = styled.div``\r\ncss({\r\n  background: 'white',\r\n  [StyledDiv]: {\r\n    background: 'black'\r\n  }\r\n})\r\n```\r\n\r\nThis works because styled components have a `toString()` implementation, but just adding a `toString(): string` to the interface is not sufficient to make typescript like it as an object key.",
        "createdAt" : "2018-11-14T04:23:00Z",
        "updatedAt" : "2018-11-16T07:55:08Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0a99124e9c77cac8e3985001a3865f47d6bf6fa",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +122,126 @@> = // the \"string\" allows this to be used as an object key\n    // I really want to avoid this if possible but it's the only way to use nesting with object styles...\n    string & StyledComponentBase<C, T, O, A>;\n\nexport interface StyledComponentBase<"
  },
  {
    "id" : "8d8433fd-90aa-4a71-9f76-57e341fd8002",
    "prId" : 30511,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30511#pullrequestreview-174692130",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bc7785c-c958-4c1f-96ca-e621117102cd",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "This kinda doesn't belong here as it can't be affected by the type of theme anyway...... but on the other hand, omitting it would make it harder to use, with you having to import `keyframes` from elsewhere instead of from your strongly typed wrapper.",
        "createdAt" : "2018-11-14T04:26:03Z",
        "updatedAt" : "2018-11-16T07:55:08Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0a99124e9c77cac8e3985001a3865f47d6bf6fa",
    "line" : 299,
    "diffHunk" : "@@ -1,1 +325,329 @@        strings: TemplateStringsArray | CSSKeyframes,\n        ...interpolations: SimpleInterpolation[]\n    ): Keyframes;\n\n    createGlobalStyle<P extends object = {}>("
  },
  {
    "id" : "9189c509-159b-4433-8ca0-318f43e869c2",
    "prId" : 30511,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30511#pullrequestreview-174746384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "923294b9-aef8-4cd4-8c53-ddb52e08af8e",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "I couldn't find any way to test this in an isolated context that wouldn't affect the type of `DefaultTheme` as seen from `index.tsx`. It's very important for the existing tests that `DefaultTheme` be empty...\r\n\r\nHowever, augmenting `DefaultTheme` did cause expected type errors so it seems to work 🤷‍♀️ ",
        "createdAt" : "2018-11-14T08:43:36Z",
        "updatedAt" : "2018-11-16T07:55:08Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0a99124e9c77cac8e3985001a3865f47d6bf6fa",
    "line" : 344,
    "diffHunk" : "@@ -1,1 +371,375 @@// as any augmentation will break the tests for the default case (not augmented).\n// tslint:disable-next-line:no-empty-interface\nexport interface DefaultTheme {}\n\nexport interface ThemeProviderProps<T extends object, U extends object = T> {"
  },
  {
    "id" : "b12b1f0b-eff9-4a65-bca2-fbf82a736a7f",
    "prId" : 32200,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/32200#pullrequestreview-193026497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ecf67bc-09d4-4c29-8308-0fd414422dc7",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Interesting trick 👀\r\n\r\nI wonder if this can be used to work around some issues I encountered with union types... e.g. `react-redux`'s `connect` always collapses unions.",
        "createdAt" : "2019-01-16T08:53:41Z",
        "updatedAt" : "2019-01-16T08:58:46Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "024685f00eafeb9ad8a8c19b0cf33d57c5b75fa0",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +36,40 @@// Undeclared default props are augmented into the resulting allowable attributes\n// If declared props have indexed properties, ignore default props entirely as keyof gets widened\n// Wrap in an outer-level conditional type to allow distribution over props that are unions\ntype Defaultize<P, D> = P extends any\n    ? string extends keyof P ? P :"
  },
  {
    "id" : "867b9ca9-59ad-4180-b7db-cd8b692f8471",
    "prId" : 32200,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/32200#pullrequestreview-193029740",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "086e788c-db88-4f07-8e5c-cc672d798ee8",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Does this work with `Memo` / `Lazy`? I remember I had to add specific support for them in `LibraryManagedAttributes`",
        "createdAt" : "2019-01-16T08:57:10Z",
        "updatedAt" : "2019-01-16T08:58:46Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "5ef69e0c-9008-4e7c-811c-0a2cc17e1aa1",
        "parentId" : "086e788c-db88-4f07-8e5c-cc672d798ee8",
        "authorId" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "body" : "Hm... I didn't try. It may worth trying this. I suspect that it will work since `ReactDefaultizedProps` is simplified version of `LibraryManagedAttributes`.",
        "createdAt" : "2019-01-16T09:02:06Z",
        "updatedAt" : "2019-01-16T09:02:06Z",
        "lastEditedBy" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "tags" : [
        ]
      }
    ],
    "commit" : "024685f00eafeb9ad8a8c19b0cf33d57c5b75fa0",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +42,46 @@        & Partial<Pick<P, Extract<keyof P, keyof D>>>\n        & Partial<Pick<D, Exclude<keyof D, keyof P>>>\n    : never;\n\ntype ReactDefaultizedProps<C, P> = C extends { defaultProps: infer D; }"
  }
]