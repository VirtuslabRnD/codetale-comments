[
  {
    "id" : "d207a38e-0004-496c-a62b-1e96ce44764e",
    "prId" : 22248,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/22248#pullrequestreview-83989250",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3aff39c8-4ba8-47ca-a216-b52076b2117e",
        "parentId" : null,
        "authorId" : "881935d0-0f3f-4c94-b9f8-82cc00a39158",
        "body" : "I think this change makes sense, as I can't really think of any reason why the internal properties of a Grammar would ever need to be modified after instantiation... it seems to me that this would likely only break things, so making it `readonly` seems appropriate. This can always be modified if it turns out there is a legitimate reason to make these properties writable.",
        "createdAt" : "2017-12-17T03:39:12Z",
        "updatedAt" : "2017-12-17T03:39:44Z",
        "lastEditedBy" : "881935d0-0f3f-4c94-b9f8-82cc00a39158",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c842ceefe58b3913937d5a3e7637faf9c49bb7d",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +3620,3624 @@export interface Grammar {\n    /** The name of the Grammar. */\n    readonly name: string;\n\n    /** Undocumented: scope name of the Grammar. */"
  },
  {
    "id" : "41f4c771-edea-4588-adea-df8338d91889",
    "prId" : 22251,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/22251#pullrequestreview-84004162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28147e8a-7662-4002-b09f-62afce4b7917",
        "parentId" : null,
        "authorId" : "881935d0-0f3f-4c94-b9f8-82cc00a39158",
        "body" : "I'm guessing that, due to scoping issues, it's not possible to allow users to merge their own element types into this interface without resorting to global augmentation? At first, something rubbed me the wrong way about declaring a \"fake\" interface on the global scope, but now that I think about it, I'm willing to accept that it might be necessary in order to accomplish what it needs to do. Just want to make sure that it actually *is* necessary for it to be a global, though, since most users wouldn't ever need to reference it directly.",
        "createdAt" : "2017-12-17T13:48:10Z",
        "updatedAt" : "2017-12-17T16:42:29Z",
        "lastEditedBy" : "881935d0-0f3f-4c94-b9f8-82cc00a39158",
        "tags" : [
        ]
      },
      {
        "id" : "41f3c2cd-359a-4328-8916-f207d69cfba0",
        "parentId" : "28147e8a-7662-4002-b09f-62afce4b7917",
        "authorId" : "72973e8b-b1ba-4186-a2e7-1e30e4720971",
        "body" : "We're augmenting here. `HTMLElementTagNameMap` is [defined in TS's `lib.dom.d.ts`](https://github.com/Microsoft/TypeScript/blob/aa9e2ba31822ba7b002cf1c436e2c6cd6954972b/src/lib/dom.generated.d.ts#L14847) (warning: **large** file). That thing's defined in global scope, so it's impossible to augment from module scope, at least as far as I can tell.",
        "createdAt" : "2017-12-17T15:42:57Z",
        "updatedAt" : "2017-12-17T16:42:29Z",
        "lastEditedBy" : "72973e8b-b1ba-4186-a2e7-1e30e4720971",
        "tags" : [
        ]
      },
      {
        "id" : "973a6c95-912b-4965-b165-b810e13bef0b",
        "parentId" : "28147e8a-7662-4002-b09f-62afce4b7917",
        "authorId" : "881935d0-0f3f-4c94-b9f8-82cc00a39158",
        "body" : "Oh! I didn't realize it was a TypeScript core thing, now I get the point of it being declared in global (because it *already is* in global scope.) Totally makes sense, then. Forget what I said above, I didn't catch onto the fact that it's merging the new value into an existing interface. Definitely done correctly in that case, I'll go ahead and approve as soon as the CI is done. üëç",
        "createdAt" : "2017-12-17T15:56:14Z",
        "updatedAt" : "2017-12-17T16:42:29Z",
        "lastEditedBy" : "881935d0-0f3f-4c94-b9f8-82cc00a39158",
        "tags" : [
        ]
      }
    ],
    "commit" : "e04d65fe120f2cfcdcfbf25acfa75bc9b9bfddbe",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +21,25 @@    interface HTMLElementTagNameMap {\n      \"atom-text-editor\": TextEditorElement;\n    }\n}\n"
  },
  {
    "id" : "e8f5d153-d134-4d4d-bad3-0b3416a3621e",
    "prId" : 22251,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/22251#pullrequestreview-84003897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3650ba2d-cb02-4c33-ad9a-c18ca01a127e",
        "parentId" : null,
        "authorId" : "881935d0-0f3f-4c94-b9f8-82cc00a39158",
        "body" : "This all LGTM.",
        "createdAt" : "2017-12-17T13:52:14Z",
        "updatedAt" : "2017-12-17T16:42:29Z",
        "lastEditedBy" : "881935d0-0f3f-4c94-b9f8-82cc00a39158",
        "tags" : [
        ]
      },
      {
        "id" : "46ffac7a-f4cb-4d8e-a85b-de9617e8626a",
        "parentId" : "3650ba2d-cb02-4c33-ad9a-c18ca01a127e",
        "authorId" : "881935d0-0f3f-4c94-b9f8-82cc00a39158",
        "body" : "Worth adding?\r\n\r\n```typescript\r\nexport interface PixelPosition {\r\n    left: number\r\n    top: number\r\n}\r\n```\r\n\r\nI see it repeated 4 times, that seems like enough for it to get its own interface IMO.",
        "createdAt" : "2017-12-17T14:00:55Z",
        "updatedAt" : "2017-12-17T16:42:29Z",
        "lastEditedBy" : "881935d0-0f3f-4c94-b9f8-82cc00a39158",
        "tags" : [
        ]
      },
      {
        "id" : "ad076e1e-084c-4539-8d43-49ae7ac9ae81",
        "parentId" : "3650ba2d-cb02-4c33-ad9a-c18ca01a127e",
        "authorId" : "72973e8b-b1ba-4186-a2e7-1e30e4720971",
        "body" : "Sounds reasonable.",
        "createdAt" : "2017-12-17T15:44:13Z",
        "updatedAt" : "2017-12-17T16:42:29Z",
        "lastEditedBy" : "72973e8b-b1ba-4186-a2e7-1e30e4720971",
        "tags" : [
        ]
      }
    ],
    "commit" : "e04d65fe120f2cfcdcfbf25acfa75bc9b9bfddbe",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +2464,2468 @@  onDidDetach(callback: () => void): Disposable;\n}\n\n/** Experimental: This global registry tracks registered TextEditors. */\nexport interface TextEditorRegistry {"
  },
  {
    "id" : "2d9c36f5-3313-4d8e-bf94-333feabdc60e",
    "prId" : 22251,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/22251#pullrequestreview-84000825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da583897-7478-4b16-8dd1-726fd2561fc4",
        "parentId" : null,
        "authorId" : "881935d0-0f3f-4c94-b9f8-82cc00a39158",
        "body" : "Great refactoring, this reads *so* much cleaner than it did before despite the added type-checking. üëç",
        "createdAt" : "2017-12-17T13:57:09Z",
        "updatedAt" : "2017-12-17T16:42:29Z",
        "lastEditedBy" : "881935d0-0f3f-4c94-b9f8-82cc00a39158",
        "tags" : [
        ]
      }
    ],
    "commit" : "e04d65fe120f2cfcdcfbf25acfa75bc9b9bfddbe",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +288,292 @@    }): CompositeDisposable;\n    add<T extends Node>(target: T, commands: {\n        [key: string]: (event: CommandEvent<T>) => void\n    }): CompositeDisposable;\n"
  },
  {
    "id" : "3b534586-0757-41d9-989f-dcbe65516ff7",
    "prId" : 24325,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24325#pullrequestreview-104459245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f87db8d-ed92-47aa-958b-997647df851e",
        "parentId" : null,
        "authorId" : "72973e8b-b1ba-4186-a2e7-1e30e4720971",
        "body" : "Somewhere around here, `groupLastChanges` (https://atom.io/docs/api/v1.25.0/TextBuffer#instance-groupLastChanges) is missing.",
        "createdAt" : "2018-03-16T05:55:42Z",
        "updatedAt" : "2018-03-16T09:26:53Z",
        "lastEditedBy" : "72973e8b-b1ba-4186-a2e7-1e30e4720971",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e06710aab17d7d134749fbb94289d858d6705bb",
    "line" : 279,
    "diffHunk" : "@@ -1,1 +5255,5259 @@     */\n    groupChangesSinceCheckpoint(checkpoint: number): boolean;\n\n    /**\n     *  Group the last two text changes for purposes of undo/redo."
  }
]