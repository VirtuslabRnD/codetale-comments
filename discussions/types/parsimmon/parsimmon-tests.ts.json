[
  {
    "id" : "5ceba58f-836d-4a78-a99a-a9ed32597ad8",
    "prId" : 22070,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/22070#pullrequestreview-82364147",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61714090-44d2-40e1-8ffa-b82c7db8077e",
        "parentId" : null,
        "authorId" : "221bba70-057a-4b37-925c-0342337ea5ee",
        "body" : "@bvanreeven Is there a way to better type these? Ie. this rule should ideally be `Parser<string>`.",
        "createdAt" : "2017-12-10T19:49:43Z",
        "updatedAt" : "2017-12-10T21:58:10Z",
        "lastEditedBy" : "221bba70-057a-4b37-925c-0342337ea5ee",
        "tags" : [
        ]
      },
      {
        "id" : "10f15812-aa46-4bec-b051-3031552c7dc5",
        "parentId" : "61714090-44d2-40e1-8ffa-b82c7db8077e",
        "authorId" : "fd404b0d-707f-45ce-bd52-7e1b97e94ed9",
        "body" : "As far as I can tell, this is not possible without introducing additional type parameters: one for the `rules` parameter, and one for the return type.\r\n\r\nThe return type of `createLanguage` should be an object that has the same properties as the `rules` parameter object, but the types of those properties should match the return types of the functions that are passed as properties of the `rules` parameter object. If that makes sense.\r\n\r\nI tried an approach that has only one type parameter and returns a mapped type of the parameter, but I got stuck here:\r\n\r\n```typescript\r\nfunction createLanguage<TRule extends Rule>(rules: TRule): { [K in keyof TRule]: <return type of>TRule[K] };\r\n```\r\n\r\nAs far as I know, it is currently not possible to statically determine the return type of a function type.",
        "createdAt" : "2017-12-10T21:39:32Z",
        "updatedAt" : "2017-12-10T21:58:10Z",
        "lastEditedBy" : "fd404b0d-707f-45ce-bd52-7e1b97e94ed9",
        "tags" : [
        ]
      },
      {
        "id" : "44f16e24-4b4c-4634-b85c-9c053adbaf34",
        "parentId" : "61714090-44d2-40e1-8ffa-b82c7db8077e",
        "authorId" : "fd404b0d-707f-45ce-bd52-7e1b97e94ed9",
        "body" : "@bcherny I added some documentation on how to use the type parameter in `createLanguage` to make a language specification typed.",
        "createdAt" : "2017-12-10T22:01:19Z",
        "updatedAt" : "2017-12-10T22:01:19Z",
        "lastEditedBy" : "fd404b0d-707f-45ce-bd52-7e1b97e94ed9",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbd47980a3c0fcd862913643c636bddf46ee0c18",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +202,206 @@});\n\n// $ExpectType Parser<any>\nlanguage.SomeRule;\n// $ExpectType Parser<any>"
  },
  {
    "id" : "119e7907-4588-409b-9593-8bf94ec4bebf",
    "prId" : 49906,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/49906#pullrequestreview-545591558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5d95185-7b6a-424e-b939-387cd7446622",
        "parentId" : null,
        "authorId" : "44336855-cf00-433b-810b-70f6378cceb2",
        "body" : "Can we remove this line if we already have `str1ArrPar`?",
        "createdAt" : "2020-12-04T03:40:45Z",
        "updatedAt" : "2020-12-04T03:42:03Z",
        "lastEditedBy" : "44336855-cf00-433b-810b-70f6378cceb2",
        "tags" : [
        ]
      },
      {
        "id" : "5913ab01-223d-4c74-9c0d-410fb90d1e24",
        "parentId" : "d5d95185-7b6a-424e-b939-387cd7446622",
        "authorId" : "d276207e-e525-4eed-a282-e42a06761a40",
        "body" : "This line is helpful to ensure that the typing change to `P.sebPy1` is backwards-compatible, by ensuring that `Parser<[string, ...string[]]>` is still recognized as a valid subtype of `Parser<string[]>` by tsc. It should probably stay.",
        "createdAt" : "2020-12-04T20:09:02Z",
        "updatedAt" : "2020-12-04T20:09:02Z",
        "lastEditedBy" : "d276207e-e525-4eed-a282-e42a06761a40",
        "tags" : [
        ]
      },
      {
        "id" : "adc98517-59e8-4667-b05e-6bdebb962787",
        "parentId" : "d5d95185-7b6a-424e-b939-387cd7446622",
        "authorId" : "44336855-cf00-433b-810b-70f6378cceb2",
        "body" : "Then everything looks good to me. :)",
        "createdAt" : "2020-12-05T14:33:41Z",
        "updatedAt" : "2020-12-05T14:33:41Z",
        "lastEditedBy" : "44336855-cf00-433b-810b-70f6378cceb2",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4b806b20ae19a21dcf5c23f94ea9e8705ccc95e",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +286,290 @@\nstrArrPar = P.sepBy(P.string('foo'), P.string('bar'));\nstrArrPar = P.sepBy1(P.string('foo'), P.string('bar'));\nstr1ArrPar = P.sepBy1(P.string('foo'), P.string('bar'));\nfunction flattenMultiple(first: string, ...rest: string[]): number { return rest.length; }"
  },
  {
    "id" : "0064b5ed-a9c8-46c0-a065-63cafdc87776",
    "prId" : 49906,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/49906#pullrequestreview-545264282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c962819-5577-458c-a0b2-4e53f9bd5813",
        "parentId" : null,
        "authorId" : "44336855-cf00-433b-810b-70f6378cceb2",
        "body" : "Just like `str1ArrPar`, can we remove this line if we already have `foo1ArrPar`?",
        "createdAt" : "2020-12-04T03:41:36Z",
        "updatedAt" : "2020-12-04T03:42:03Z",
        "lastEditedBy" : "44336855-cf00-433b-810b-70f6378cceb2",
        "tags" : [
        ]
      },
      {
        "id" : "5524f9d4-bc10-4434-8371-5885096dbaec",
        "parentId" : "9c962819-5577-458c-a0b2-4e53f9bd5813",
        "authorId" : "d276207e-e525-4eed-a282-e42a06761a40",
        "body" : "Same as above (verifies that `Parser<['foo', ...'foo'[]]>` is still recognized as a subtype of `Parser<'foo'[]>`); though the marginal improvement over plain string is obviously minor.",
        "createdAt" : "2020-12-04T20:10:37Z",
        "updatedAt" : "2020-12-04T20:10:37Z",
        "lastEditedBy" : "d276207e-e525-4eed-a282-e42a06761a40",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4b806b20ae19a21dcf5c23f94ea9e8705ccc95e",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +329,333 @@\nfooArrPar = fooPar.sepBy(barPar);\nfooArrPar = fooPar.sepBy1(barPar);\nfoo1ArrPar = fooPar.sepBy1(barPar);\n"
  }
]