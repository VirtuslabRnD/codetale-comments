[
  {
    "id" : "e1a2472e-4e51-4e6b-a18b-d940cd558b40",
    "prId" : 46270,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46270#pullrequestreview-465347389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3669561-87f5-4b41-ac6d-4364cd717bc2",
        "parentId" : null,
        "authorId" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "body" : "Unfortunately, this is not guarnateed to be `Signal | Error`, since the `uncaughtException` handler reason can be any thrown value (despite even the Node.js docs saying the parameter type is `Error` ðŸ˜±):\r\n\r\n```js\r\nprocess.on('uncaughtException', err => console.log(typeof err));\r\nthrow \"asdfasdfasdf\";\r\n// > string",
        "createdAt" : "2020-08-10T23:21:06Z",
        "updatedAt" : "2020-08-10T23:21:06Z",
        "lastEditedBy" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "tags" : [
        ]
      },
      {
        "id" : "88c7ac45-0467-42e5-8fcf-0c01024bce33",
        "parentId" : "b3669561-87f5-4b41-ac6d-4364cd717bc2",
        "authorId" : "652fee9a-f2b8-4684-9a35-af31611a31f5",
        "body" : "should the type then be `any`?",
        "createdAt" : "2020-08-11T17:02:33Z",
        "updatedAt" : "2020-08-11T17:02:33Z",
        "lastEditedBy" : "652fee9a-f2b8-4684-9a35-af31611a31f5",
        "tags" : [
        ]
      },
      {
        "id" : "c4269016-572f-4a4c-a49d-f1c9c07049b8",
        "parentId" : "b3669561-87f5-4b41-ac6d-4364cd717bc2",
        "authorId" : "652fee9a-f2b8-4684-9a35-af31611a31f5",
        "body" : "I prefer \"Error\", even though it's not 100% accurate, it's in line with the Node.js docs and is more accurate than the current type. But I'm also comfortable with \"any\" if you think that's best",
        "createdAt" : "2020-08-11T17:03:50Z",
        "updatedAt" : "2020-08-11T17:03:50Z",
        "lastEditedBy" : "652fee9a-f2b8-4684-9a35-af31611a31f5",
        "tags" : [
        ]
      },
      {
        "id" : "96a77933-f8d4-49e4-b625-1b855a7a48e7",
        "parentId" : "b3669561-87f5-4b41-ac6d-4364cd717bc2",
        "authorId" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "body" : "I think itâ€™s up to you; this is why I didnâ€™t explicitly request changes; I just wanted to make sure youâ€™re aware and had thought about it.\r\n\r\n- `unknown`: correct (all possible values in the type domain) but unhelpful (provides no hint about what the value is likely to be), cumbersome but very safe (must be narrowed to be used)\r\n- `any`: correct but unhelpful, uncumbersome but very unsafe (can be used in any way without ceremony, even in ways that will not work at runtime)\r\n- `Error`: incorrect but helpful (value will usually be an `Error`), uncumbersome but moderately unsafe (safety is better than `any` if the value is an `Error`, otherwise itâ€™s a wash)",
        "createdAt" : "2020-08-11T18:45:17Z",
        "updatedAt" : "2020-08-11T18:45:17Z",
        "lastEditedBy" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "tags" : [
        ]
      },
      {
        "id" : "c512805b-7d96-4f3e-9f72-b38f811c95e8",
        "parentId" : "b3669561-87f5-4b41-ac6d-4364cd717bc2",
        "authorId" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "body" : "The only reason I bring it up is that in TypeScript we donâ€™t allow you to assume the value passed to a `catch` clause in a try/catch is an `Error` either. This feels analogous so I think is worth consideration. But Iâ€™ll go ahead and approve so you can decide what to do on your own.",
        "createdAt" : "2020-08-11T18:47:13Z",
        "updatedAt" : "2020-08-11T18:47:14Z",
        "lastEditedBy" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "tags" : [
        ]
      },
      {
        "id" : "7a9f9cc3-dfbc-42dc-941b-cc5cea11b15a",
        "parentId" : "b3669561-87f5-4b41-ac6d-4364cd717bc2",
        "authorId" : "652fee9a-f2b8-4684-9a35-af31611a31f5",
        "body" : "Makes sense. I'm gonna go ahead with 'Error'. It can typecast if the value ends up being anything else, and in most cases it will infact be an Error",
        "createdAt" : "2020-08-11T19:01:55Z",
        "updatedAt" : "2020-08-11T19:01:55Z",
        "lastEditedBy" : "652fee9a-f2b8-4684-9a35-af31611a31f5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0c566448439ef3157bd639df8dd5b4b3a15c361",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +84,88 @@    SIGQUIT?: boolean;\n    uncaughtException: true;\n}): (callback: (signalOrErr: Signal | Error, origin?: string) => void) => () => void;\n\nexport = ON_DEATH;"
  }
]