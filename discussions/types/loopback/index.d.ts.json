[
  {
    "id" : "c75b1c26-92b2-4bfd-b05f-42758a1d07c6",
    "prId" : 19238,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19238#pullrequestreview-57991657",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d82743f-d9f7-4fb7-8900-9b720e8a68b8",
        "parentId" : null,
        "authorId" : "9659474b-ff65-4639-a0c5-317124d10049",
        "body" : "Can it be simply `Model[]` without the use of `typeof`?",
        "createdAt" : "2017-08-22T15:27:26Z",
        "updatedAt" : "2017-08-22T15:27:26Z",
        "lastEditedBy" : "9659474b-ff65-4639-a0c5-317124d10049",
        "tags" : [
        ]
      },
      {
        "id" : "a4696b64-c746-40a3-b3f5-b3f6eb6fe1bc",
        "parentId" : "0d82743f-d9f7-4fb7-8900-9b720e8a68b8",
        "authorId" : "4b513e4d-cc61-42d2-ab3a-1a3db4e77c70",
        "body" : "Actualy not, because `models()` returns not an instance of `Model` but the class itself.",
        "createdAt" : "2017-08-23T07:20:37Z",
        "updatedAt" : "2017-08-23T07:20:37Z",
        "lastEditedBy" : "4b513e4d-cc61-42d2-ab3a-1a3db4e77c70",
        "tags" : [
        ]
      }
    ],
    "commit" : "1aad15414807bebbcf11dad108d479ac50292336",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +148,152 @@             *  @returns {Array} Array of model classes\n             */\n            models(): Array<typeof Model>;\n\n            /**"
  },
  {
    "id" : "d6761936-fc82-4f86-bf7f-264374f84760",
    "prId" : 25903,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/25903#pullrequestreview-122851215",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "562f00f9-d75c-4a6b-96fe-e27f6434564e",
        "parentId" : null,
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "I know it's annoying, but would you be able to move the callback versions below the `Promise` versions of these overloads? That way things like signature help will actually work out better.",
        "createdAt" : "2018-05-22T00:49:13Z",
        "updatedAt" : "2018-05-22T00:49:22Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "a4f87e50-077a-4039-985e-815e44cf332c",
        "parentId" : "562f00f9-d75c-4a6b-96fe-e27f6434564e",
        "authorId" : "20e56ce1-c677-43ea-9cab-9b1f01d24d14",
        "body" : "What about for functions with 2+ overloads? Is the rule that one should go from least specific to most specific?",
        "createdAt" : "2018-05-22T03:03:38Z",
        "updatedAt" : "2018-05-22T14:18:07Z",
        "lastEditedBy" : "20e56ce1-c677-43ea-9cab-9b1f01d24d14",
        "tags" : [
        ]
      },
      {
        "id" : "8e41e18b-82d4-495e-8546-e42ee91aad14",
        "parentId" : "562f00f9-d75c-4a6b-96fe-e27f6434564e",
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "Well, it sort of depends. For arity, I think the idea is to go with fewer first. but you know, this is silly, this can be adjusted in a later iteration.",
        "createdAt" : "2018-05-24T05:42:12Z",
        "updatedAt" : "2018-05-24T05:42:12Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      }
    ],
    "commit" : "56cf16cff3a35fd3473ef98c449f10302fda1dad",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +1359,1363 @@             * @returns {Promise<{ count: number }>} number of instances (rows, documents) destroyed\n             */\n            static destroyAll(where?: any): Promise<{ info: any, infoCount: number}>;\n\n            /**"
  }
]