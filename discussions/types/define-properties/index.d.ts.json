[
  {
    "id" : "9a9a360e-7581-439f-94b6-26d499d466c4",
    "prId" : 39058,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/39058#pullrequestreview-300966427",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27cd1e5d-fafc-4bf0-ad2a-093164266430",
        "parentId" : null,
        "authorId" : "f20e512d-d787-45a8-a000-96a979941658",
        "body" : "why is this any? The K must be a Property Key, ie a string/number/symbol/bigint",
        "createdAt" : "2019-10-11T22:53:51Z",
        "updatedAt" : "2019-10-11T22:54:43Z",
        "lastEditedBy" : "f20e512d-d787-45a8-a000-96a979941658",
        "tags" : [
        ]
      },
      {
        "id" : "db516db2-6d35-47b9-a44c-410e3b15b92e",
        "parentId" : "27cd1e5d-fafc-4bf0-ad2a-093164266430",
        "authorId" : "e5209397-2510-4745-aef6-1632dc787392",
        "body" : "It extends `keyof any`, which resolves to `string | number | symbol`. This is needed to support older versions of **TypeScript** which don’t have the `PropertyKey` type alias, so I just inlined its definition.\r\n\r\nAlso, last I checked, `bigint` couldn’t be used to index properties directly in **TypeScript** (unless they changed that).",
        "createdAt" : "2019-10-11T23:28:53Z",
        "updatedAt" : "2019-10-11T23:30:40Z",
        "lastEditedBy" : "e5209397-2510-4745-aef6-1632dc787392",
        "tags" : [
        ]
      },
      {
        "id" : "dbb96c36-5cdd-4e37-b40b-7407c05abe57",
        "parentId" : "27cd1e5d-fafc-4bf0-ad2a-093164266430",
        "authorId" : "f20e512d-d787-45a8-a000-96a979941658",
        "body" : "true, that hasn’t been fixed yet.",
        "createdAt" : "2019-10-11T23:33:11Z",
        "updatedAt" : "2019-10-11T23:33:11Z",
        "lastEditedBy" : "f20e512d-d787-45a8-a000-96a979941658",
        "tags" : [
        ]
      }
    ],
    "commit" : "d092a7f26417ce9bf761d68e1bc49fe5a54c082b",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +20,24 @@ * @param predicates The optional predicates map, return `true` to override existing properties on `object`.\n */\ndeclare function defineProperties<K extends keyof any>(\n\tobject: object,\n\tmap: Record<K, any> & ThisType<any>,"
  }
]