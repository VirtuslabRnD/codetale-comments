[
  {
    "id" : "93fc7581-0cb1-4c73-bf61-5ae22f2df8b9",
    "prId" : 16645,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/16645#pullrequestreview-44223322",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d17d282-6790-4a8d-850f-1ca38457c889",
        "parentId" : null,
        "authorId" : "1dafe895-0dee-4056-9e2a-aadb53c1825d",
        "body" : "why is this generic? i only see one use of it, and it takes `void`.\r\ncan you share references to the docs that clarify this change?",
        "createdAt" : "2017-06-01T17:26:06Z",
        "updatedAt" : "2017-06-01T17:26:07Z",
        "lastEditedBy" : "1dafe895-0dee-4056-9e2a-aadb53c1825d",
        "tags" : [
        ]
      },
      {
        "id" : "b78a43fe-4833-42c2-aa51-16557d3bbfdc",
        "parentId" : "9d17d282-6790-4a8d-850f-1ca38457c889",
        "authorId" : "9ba72b00-7317-4663-ad7f-de5842e21c8f",
        "body" : "`resolves` and `rejects` return `Matchers<Promise<void>>` while `not` returns `Matchers<void>`. How should I make this change without introducing parameters?",
        "createdAt" : "2017-06-02T00:03:32Z",
        "updatedAt" : "2017-06-02T00:04:58Z",
        "lastEditedBy" : "9ba72b00-7317-4663-ad7f-de5842e21c8f",
        "tags" : [
        ]
      },
      {
        "id" : "2d6af45b-cb49-4848-a0c2-5ee4275c77e5",
        "parentId" : "9d17d282-6790-4a8d-850f-1ca38457c889",
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "Ping @mhegazy - this seems pretty strange behavior but it doesn't seem unreasonable. are you okay to pull this in?",
        "createdAt" : "2017-06-15T07:30:56Z",
        "updatedAt" : "2017-06-15T07:30:56Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      }
    ],
    "commit" : "649f8e44f145620cd9409aa8ac4ca87888a11796",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +178,182 @@    }\n\n    interface Matchers<R> {\n        /** If you know how to test something, `.not` lets you test its opposite. */\n        not: Matchers<R>;"
  },
  {
    "id" : "48c414eb-ac96-40b5-b405-98d07a1b966f",
    "prId" : 17278,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17278#pullrequestreview-45328020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9a0e3b8-28d2-4153-9920-a34205696c4d",
        "parentId" : null,
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "Please add an `@param` for timeout.",
        "createdAt" : "2017-06-20T18:14:12Z",
        "updatedAt" : "2017-06-21T04:56:06Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      },
      {
        "id" : "e116aff3-d24f-4e10-a0cc-fd4555a0a581",
        "parentId" : "e9a0e3b8-28d2-4153-9920-a34205696c4d",
        "authorId" : "9ce6cb92-59ab-4ab4-9f68-813aff422fa1",
        "body" : "Added thanks.",
        "createdAt" : "2017-06-21T04:56:47Z",
        "updatedAt" : "2017-06-21T04:56:47Z",
        "lastEditedBy" : "9ce6cb92-59ab-4ab4-9f68-813aff422fa1",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fe04c5e3ce02e2dc52a791f845ed673f056cc3d",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +114,118 @@         *\n         * @param {string} name The name of your test\n         * @param {fn?} ProvidesCallback The function for your test\n         * @param {timeout?} timeout The timeout for an async function test\n         */"
  },
  {
    "id" : "6aa95cb5-8a09-4749-b0e8-a6a6059ada64",
    "prId" : 18034,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18034#pullrequestreview-50165557",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad712a75-4ed8-429a-8321-6e2148e0d7ca",
        "parentId" : null,
        "authorId" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "body" : "Why not `interface Environment` and kill the type alias?",
        "createdAt" : "2017-07-14T22:29:47Z",
        "updatedAt" : "2017-07-14T23:08:45Z",
        "lastEditedBy" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "tags" : [
        ]
      },
      {
        "id" : "83b716de-ecee-4113-99d3-a95cca947c81",
        "parentId" : "ad712a75-4ed8-429a-8321-6e2148e0d7ca",
        "authorId" : "cdd321b8-f917-441a-8d8d-6b0550778fd7",
        "body" : "It's the name from jest repo, I think we should not change it for better comparing in the future.",
        "createdAt" : "2017-07-14T22:32:50Z",
        "updatedAt" : "2017-07-14T23:08:45Z",
        "lastEditedBy" : "cdd321b8-f917-441a-8d8d-6b0550778fd7",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e0ba12c5cf002078cf2a74e096f51f011883ff7",
    "line" : 897,
    "diffHunk" : "@@ -1,1 +854,858 @@    }\n\n    interface $JestEnvironment {\n        global: Global;\n        fakeTimers: FakeTimers;"
  },
  {
    "id" : "b5a2db4b-4713-40dc-997d-b9af54d2073b",
    "prId" : 26304,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26304#pullrequestreview-127802875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2af656fa-7551-4465-bfbc-917b4782d350",
        "parentId" : null,
        "authorId" : "cdd321b8-f917-441a-8d8d-6b0550778fd7",
        "body" : "This one is added in v23.1.0, we should either bump the version at Line 1 to `23.1` or just remove it.",
        "createdAt" : "2018-06-12T02:35:12Z",
        "updatedAt" : "2018-06-12T05:29:18Z",
        "lastEditedBy" : "cdd321b8-f917-441a-8d8d-6b0550778fd7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c094234a83f3f40b30c6c7b988589deef18fdbb",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +889,893 @@        coverageReporters: string[];\n        coverageThreshold: Maybe<{global: {[key: string]: number}}>;\n        errorOnDeprecated: boolean;\n        expand: boolean;\n        filter: Maybe<Path>;"
  },
  {
    "id" : "e72fa34f-1939-4fec-a6aa-5827264948f3",
    "prId" : 26304,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26304#pullrequestreview-127901978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23e5a83c-def6-4153-b4b6-338e96ca0a32",
        "parentId" : null,
        "authorId" : "cdd321b8-f917-441a-8d8d-6b0550778fd7",
        "body" : "Same as above.",
        "createdAt" : "2018-06-12T02:36:28Z",
        "updatedAt" : "2018-06-12T05:29:18Z",
        "lastEditedBy" : "cdd321b8-f917-441a-8d8d-6b0550778fd7",
        "tags" : [
        ]
      },
      {
        "id" : "f489d5bd-c6fe-45b6-8776-d8a2116f334a",
        "parentId" : "23e5a83c-def6-4153-b4b6-338e96ca0a32",
        "authorId" : "630484b0-c615-41eb-923a-608cb7b6a956",
        "body" : "kk bump sounds good. Also I've been thinking about extracting those configs in separate file, this one ambient index is getting too big -> hard to maintain. WDYT ?",
        "createdAt" : "2018-06-12T05:20:15Z",
        "updatedAt" : "2018-06-12T05:29:18Z",
        "lastEditedBy" : "630484b0-c615-41eb-923a-608cb7b6a956",
        "tags" : [
        ]
      },
      {
        "id" : "30f3a8f5-e709-4228-8308-379b69420334",
        "parentId" : "23e5a83c-def6-4153-b4b6-338e96ca0a32",
        "authorId" : "cdd321b8-f917-441a-8d8d-6b0550778fd7",
        "body" : "Sounds good to me, and I think extracting all types mirrored from `jest` into separate files would be better, not just `Config.js`.",
        "createdAt" : "2018-06-12T08:05:30Z",
        "updatedAt" : "2018-06-12T08:05:30Z",
        "lastEditedBy" : "cdd321b8-f917-441a-8d8d-6b0550778fd7",
        "tags" : [
        ]
      },
      {
        "id" : "5296747b-d098-4e7f-8df5-b69bf212878b",
        "parentId" : "23e5a83c-def6-4153-b4b6-338e96ca0a32",
        "authorId" : "630484b0-c615-41eb-923a-608cb7b6a956",
        "body" : "I'll do that in separate PR ‚úåÔ∏è. Thx for reviewing and your time @ikatyang  ! üçª",
        "createdAt" : "2018-06-12T10:18:45Z",
        "updatedAt" : "2018-06-12T10:18:46Z",
        "lastEditedBy" : "630484b0-c615-41eb-923a-608cb7b6a956",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c094234a83f3f40b30c6c7b988589deef18fdbb",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +1006,1010 @@        skipNodeResolution?: boolean;\n        snapshotSerializers?: Path[];\n        errorOnDeprecated?: boolean;\n        testEnvironment?: string;\n        testEnvironmentOptions?: object;"
  },
  {
    "id" : "4824efb5-5a3f-448f-b57a-aeb7cc57d5b0",
    "prId" : 26603,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26603#pullrequestreview-129382466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bcb1454-5805-40f1-abe3-cab3dd3f084b",
        "parentId" : null,
        "authorId" : "8614b618-866d-45f4-94e2-5b0974905cc0",
        "body" : "I wonder if this `Each` could be made templated? Is there a way to enforce that If we define the cases as `number[]`, a case with `[\"foo\"]` would be blocked?\r\n\r\nNot a blocker for this PR at all, just curious.",
        "createdAt" : "2018-06-16T20:56:28Z",
        "updatedAt" : "2018-06-16T20:56:47Z",
        "lastEditedBy" : "8614b618-866d-45f4-94e2-5b0974905cc0",
        "tags" : [
        ]
      },
      {
        "id" : "ea9f66b8-97ce-4183-94da-fbbadb5b9274",
        "parentId" : "0bcb1454-5805-40f1-abe3-cab3dd3f084b",
        "authorId" : "cae76ff5-132f-4399-b2fe-c3511b9ab5fb",
        "body" : "I was thinking about it too. I only have problem with arrays containing elements of different types. For that Typescript have `Tuples`. So it could be used like that:\r\n```\r\nit.each<[number, string]>([[1, 'one']])\r\n```\r\nBut it will not work for arguments of callback function as far as I know :(\r\n\r\nThis issue  https://github.com/Microsoft/TypeScript/issues/5453  addresses this problem.",
        "createdAt" : "2018-06-17T08:18:25Z",
        "updatedAt" : "2018-06-17T11:26:44Z",
        "lastEditedBy" : "cae76ff5-132f-4399-b2fe-c3511b9ab5fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "898ed0479ceda021e9200a275379da0e28e19b69",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +211,215 @@\n    interface Each {\n        (cases: any[]): (name: string, fn: (...args: any[]) => any) => void;\n        (strings: TemplateStringsArray, ...placeholders: any[]): (\n            name: string,"
  },
  {
    "id" : "bf7abb62-64b5-4516-a6ec-62f514f7f15a",
    "prId" : 26965,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26965#pullrequestreview-133430793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "873c00a9-adb9-4297-b45a-9ae27de93edd",
        "parentId" : null,
        "authorId" : "40e61ff8-b223-4e7e-8f91-44bc16197019",
        "body" : "This is purposefully not documented on the website, but I don't want to break anyone's builds.",
        "createdAt" : "2018-06-30T16:52:44Z",
        "updatedAt" : "2018-06-30T16:52:44Z",
        "lastEditedBy" : "40e61ff8-b223-4e7e-8f91-44bc16197019",
        "tags" : [
        ]
      }
    ],
    "commit" : "1df988c5bc537fddae725a12f5e5b02b75642cd1",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +261,265 @@        /**\n         * Experimental and should be avoided.\n         */\n        concurrent: It;\n        /**"
  },
  {
    "id" : "fc4062c9-7b30-4be3-972a-74a16dea26b7",
    "prId" : 27170,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/27170#pullrequestreview-141745606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9a60e97-4c67-4969-a502-743b24f21c5f",
        "parentId" : null,
        "authorId" : "d04b601c-02c0-4504-9dd5-a0ed3c6fe315",
        "body" : "@andys8  Why is an `Expect['any']` here? I think what is that saying is that the values of a property matcher can only be `expect.any()` calls. Is that correct? This works for other asymmetric matchers just because `Expect['any']` is of type `(a: any) => any`.",
        "createdAt" : "2018-07-30T22:46:39Z",
        "updatedAt" : "2018-07-30T22:47:16Z",
        "lastEditedBy" : "d04b601c-02c0-4504-9dd5-a0ed3c6fe315",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ed66e682c5e2a76f6f10a3e806ac38bfc3aa52e",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +656,660 @@         * Check out [the Snapshot Testing guide](http://facebook.github.io/jest/docs/snapshot-testing.html) for more information.\n         */\n        toMatchSnapshot<T extends {[P in keyof R]: Expect['any']}>(propertyMatchers: Partial<T>, snapshotName?: string): R;\n        /**\n         * This ensures that a value matches the most recent snapshot."
  },
  {
    "id" : "a0433e0d-467f-410f-85a7-a2ef4b1cbc48",
    "prId" : 29371,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/29371#pullrequestreview-163534902",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd1e2f51-1c9f-46dc-bce9-ac2f12b7da70",
        "parentId" : null,
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "It looks like `T` isn't even needed and this could just be `Partial<Record<keyof R, any>>`? That could be done in a different PR though.",
        "createdAt" : "2018-10-10T19:58:39Z",
        "updatedAt" : "2018-10-10T19:58:39Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e9445c8b7cee1dc18962e1e7459a92c3ef55a13",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +676,680 @@         * Check out [the Snapshot Testing guide](http://facebook.github.io/jest/docs/snapshot-testing.html) for more information.\n         */\n        toMatchInlineSnapshot<T extends {[P in keyof R]: any}>(propertyMatchers: Partial<T>, snapshot?: string): R;\n        /**\n         * This ensures that a value matches the most recent snapshot with property matchers."
  },
  {
    "id" : "8e0e67ca-2143-4074-9a81-590f7a3135f1",
    "prId" : 32579,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/32579#pullrequestreview-199429428",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec757836-9d1b-4e77-a556-5f82e86f7eb6",
        "parentId" : null,
        "authorId" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "body" : "TS ships with a `Parameters` type for this. Was it added after 3.0?",
        "createdAt" : "2019-02-03T22:05:08Z",
        "updatedAt" : "2019-02-04T04:09:43Z",
        "lastEditedBy" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "tags" : [
        ]
      },
      {
        "id" : "cd974798-3e05-49a5-be3b-f03289c51d1f",
        "parentId" : "ec757836-9d1b-4e77-a556-5f82e86f7eb6",
        "authorId" : "af64965d-59b5-42e7-8e44-c0fbc34bfdf0",
        "body" : "It was added in 3.1 (https://github.com/Microsoft/TypeScript/pull/26243/commits/60b4fe971f95b1d70cb4329f6f230615903b668f) \r\n\r\nThanks for the info. I didn't even know about it since it's not in https://www.typescriptlang.org/docs/handbook/advanced-types.html\r\n\r\n```\r\nERROR: 218:145  expect  Compile error in typescript@3.0 but not in typescript@3.1.\r\nFix with a comment '// TypeScript Version: 3.1' just under the header.\r\nCannot find name 'Parameters'.\r\n```",
        "createdAt" : "2019-02-04T03:26:40Z",
        "updatedAt" : "2019-02-04T04:09:43Z",
        "lastEditedBy" : "af64965d-59b5-42e7-8e44-c0fbc34bfdf0",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ba138ae2046e7af25ad389fcc7dfcb2ccca0d8c",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +37,41 @@declare const expect: jest.Expect;\n\ntype ArgsType<T> = T extends (...args: infer A) => any ? A : never;\n\ninterface NodeRequire {"
  },
  {
    "id" : "dce84778-8868-4e5a-98ca-9bd1a860c27f",
    "prId" : 32816,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/32816#pullrequestreview-201700107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbff618e-9d78-4825-8baf-687cdca0809d",
        "parentId" : null,
        "authorId" : "62e3e1d0-0d53-4e22-8b67-71bb14267f4d",
        "body" : "Why don't you return to `MockInstance<F>` and derive ReturnType and ArgsType where needed? This is a breaking change anyway - so this shouldn't be a problem. Same is true for `Mock<F>` and `jest.fn<F>`. This would make the API less error prone/more obvious as I proposed in https://github.com/DefinitelyTyped/DefinitelyTyped/pull/32864/files#r254967801.",
        "createdAt" : "2019-02-08T13:18:57Z",
        "updatedAt" : "2019-02-12T13:28:27Z",
        "lastEditedBy" : "62e3e1d0-0d53-4e22-8b67-71bb14267f4d",
        "tags" : [
        ]
      },
      {
        "id" : "5a153242-6f52-4667-935e-3bb87b294c00",
        "parentId" : "cbff618e-9d78-4825-8baf-687cdca0809d",
        "authorId" : "af64965d-59b5-42e7-8e44-c0fbc34bfdf0",
        "body" : "this will be discussed in #32901 ",
        "createdAt" : "2019-02-08T17:37:14Z",
        "updatedAt" : "2019-02-12T13:28:27Z",
        "lastEditedBy" : "af64965d-59b5-42e7-8e44-c0fbc34bfdf0",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fbb2766af29de3eea40a9c1a0693b95b608f86b",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +809,813 @@     */\n    type Mocked<T> = {\n        [P in keyof T]: T[P] extends (...args: any[]) => any ? MockInstance<ReturnType<T[P]>, ArgsType<T[P]>>: T[P];\n    } & T;\n"
  }
]