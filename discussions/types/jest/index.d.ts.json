[
  {
    "id" : "93fc7581-0cb1-4c73-bf61-5ae22f2df8b9",
    "prId" : 16645,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/16645#pullrequestreview-44223322",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d17d282-6790-4a8d-850f-1ca38457c889",
        "parentId" : null,
        "authorId" : "1dafe895-0dee-4056-9e2a-aadb53c1825d",
        "body" : "why is this generic? i only see one use of it, and it takes `void`.\r\ncan you share references to the docs that clarify this change?",
        "createdAt" : "2017-06-01T17:26:06Z",
        "updatedAt" : "2017-06-01T17:26:07Z",
        "lastEditedBy" : "1dafe895-0dee-4056-9e2a-aadb53c1825d",
        "tags" : [
        ]
      },
      {
        "id" : "b78a43fe-4833-42c2-aa51-16557d3bbfdc",
        "parentId" : "9d17d282-6790-4a8d-850f-1ca38457c889",
        "authorId" : "9ba72b00-7317-4663-ad7f-de5842e21c8f",
        "body" : "`resolves` and `rejects` return `Matchers<Promise<void>>` while `not` returns `Matchers<void>`. How should I make this change without introducing parameters?",
        "createdAt" : "2017-06-02T00:03:32Z",
        "updatedAt" : "2017-06-02T00:04:58Z",
        "lastEditedBy" : "9ba72b00-7317-4663-ad7f-de5842e21c8f",
        "tags" : [
        ]
      },
      {
        "id" : "2d6af45b-cb49-4848-a0c2-5ee4275c77e5",
        "parentId" : "9d17d282-6790-4a8d-850f-1ca38457c889",
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "Ping @mhegazy - this seems pretty strange behavior but it doesn't seem unreasonable. are you okay to pull this in?",
        "createdAt" : "2017-06-15T07:30:56Z",
        "updatedAt" : "2017-06-15T07:30:56Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      }
    ],
    "commit" : "649f8e44f145620cd9409aa8ac4ca87888a11796",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +178,182 @@    }\n\n    interface Matchers<R> {\n        /** If you know how to test something, `.not` lets you test its opposite. */\n        not: Matchers<R>;"
  },
  {
    "id" : "48c414eb-ac96-40b5-b405-98d07a1b966f",
    "prId" : 17278,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17278#pullrequestreview-45328020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9a0e3b8-28d2-4153-9920-a34205696c4d",
        "parentId" : null,
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "Please add an `@param` for timeout.",
        "createdAt" : "2017-06-20T18:14:12Z",
        "updatedAt" : "2017-06-21T04:56:06Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      },
      {
        "id" : "e116aff3-d24f-4e10-a0cc-fd4555a0a581",
        "parentId" : "e9a0e3b8-28d2-4153-9920-a34205696c4d",
        "authorId" : "9ce6cb92-59ab-4ab4-9f68-813aff422fa1",
        "body" : "Added thanks.",
        "createdAt" : "2017-06-21T04:56:47Z",
        "updatedAt" : "2017-06-21T04:56:47Z",
        "lastEditedBy" : "9ce6cb92-59ab-4ab4-9f68-813aff422fa1",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fe04c5e3ce02e2dc52a791f845ed673f056cc3d",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +114,118 @@         *\n         * @param {string} name The name of your test\n         * @param {fn?} ProvidesCallback The function for your test\n         * @param {timeout?} timeout The timeout for an async function test\n         */"
  },
  {
    "id" : "6aa95cb5-8a09-4749-b0e8-a6a6059ada64",
    "prId" : 18034,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18034#pullrequestreview-50165557",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad712a75-4ed8-429a-8321-6e2148e0d7ca",
        "parentId" : null,
        "authorId" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "body" : "Why not `interface Environment` and kill the type alias?",
        "createdAt" : "2017-07-14T22:29:47Z",
        "updatedAt" : "2017-07-14T23:08:45Z",
        "lastEditedBy" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "tags" : [
        ]
      },
      {
        "id" : "83b716de-ecee-4113-99d3-a95cca947c81",
        "parentId" : "ad712a75-4ed8-429a-8321-6e2148e0d7ca",
        "authorId" : "cdd321b8-f917-441a-8d8d-6b0550778fd7",
        "body" : "It's the name from jest repo, I think we should not change it for better comparing in the future.",
        "createdAt" : "2017-07-14T22:32:50Z",
        "updatedAt" : "2017-07-14T23:08:45Z",
        "lastEditedBy" : "cdd321b8-f917-441a-8d8d-6b0550778fd7",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e0ba12c5cf002078cf2a74e096f51f011883ff7",
    "line" : 897,
    "diffHunk" : "@@ -1,1 +854,858 @@    }\n\n    interface $JestEnvironment {\n        global: Global;\n        fakeTimers: FakeTimers;"
  },
  {
    "id" : "b5a2db4b-4713-40dc-997d-b9af54d2073b",
    "prId" : 26304,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26304#pullrequestreview-127802875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2af656fa-7551-4465-bfbc-917b4782d350",
        "parentId" : null,
        "authorId" : "cdd321b8-f917-441a-8d8d-6b0550778fd7",
        "body" : "This one is added in v23.1.0, we should either bump the version at Line 1 to `23.1` or just remove it.",
        "createdAt" : "2018-06-12T02:35:12Z",
        "updatedAt" : "2018-06-12T05:29:18Z",
        "lastEditedBy" : "cdd321b8-f917-441a-8d8d-6b0550778fd7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c094234a83f3f40b30c6c7b988589deef18fdbb",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +889,893 @@        coverageReporters: string[];\n        coverageThreshold: Maybe<{global: {[key: string]: number}}>;\n        errorOnDeprecated: boolean;\n        expand: boolean;\n        filter: Maybe<Path>;"
  },
  {
    "id" : "e72fa34f-1939-4fec-a6aa-5827264948f3",
    "prId" : 26304,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26304#pullrequestreview-127901978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23e5a83c-def6-4153-b4b6-338e96ca0a32",
        "parentId" : null,
        "authorId" : "cdd321b8-f917-441a-8d8d-6b0550778fd7",
        "body" : "Same as above.",
        "createdAt" : "2018-06-12T02:36:28Z",
        "updatedAt" : "2018-06-12T05:29:18Z",
        "lastEditedBy" : "cdd321b8-f917-441a-8d8d-6b0550778fd7",
        "tags" : [
        ]
      },
      {
        "id" : "f489d5bd-c6fe-45b6-8776-d8a2116f334a",
        "parentId" : "23e5a83c-def6-4153-b4b6-338e96ca0a32",
        "authorId" : "630484b0-c615-41eb-923a-608cb7b6a956",
        "body" : "kk bump sounds good. Also I've been thinking about extracting those configs in separate file, this one ambient index is getting too big -> hard to maintain. WDYT ?",
        "createdAt" : "2018-06-12T05:20:15Z",
        "updatedAt" : "2018-06-12T05:29:18Z",
        "lastEditedBy" : "630484b0-c615-41eb-923a-608cb7b6a956",
        "tags" : [
        ]
      },
      {
        "id" : "30f3a8f5-e709-4228-8308-379b69420334",
        "parentId" : "23e5a83c-def6-4153-b4b6-338e96ca0a32",
        "authorId" : "cdd321b8-f917-441a-8d8d-6b0550778fd7",
        "body" : "Sounds good to me, and I think extracting all types mirrored from `jest` into separate files would be better, not just `Config.js`.",
        "createdAt" : "2018-06-12T08:05:30Z",
        "updatedAt" : "2018-06-12T08:05:30Z",
        "lastEditedBy" : "cdd321b8-f917-441a-8d8d-6b0550778fd7",
        "tags" : [
        ]
      },
      {
        "id" : "5296747b-d098-4e7f-8df5-b69bf212878b",
        "parentId" : "23e5a83c-def6-4153-b4b6-338e96ca0a32",
        "authorId" : "630484b0-c615-41eb-923a-608cb7b6a956",
        "body" : "I'll do that in separate PR ‚úåÔ∏è. Thx for reviewing and your time @ikatyang  ! üçª",
        "createdAt" : "2018-06-12T10:18:45Z",
        "updatedAt" : "2018-06-12T10:18:46Z",
        "lastEditedBy" : "630484b0-c615-41eb-923a-608cb7b6a956",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c094234a83f3f40b30c6c7b988589deef18fdbb",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +1006,1010 @@        skipNodeResolution?: boolean;\n        snapshotSerializers?: Path[];\n        errorOnDeprecated?: boolean;\n        testEnvironment?: string;\n        testEnvironmentOptions?: object;"
  },
  {
    "id" : "4824efb5-5a3f-448f-b57a-aeb7cc57d5b0",
    "prId" : 26603,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26603#pullrequestreview-129382466",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bcb1454-5805-40f1-abe3-cab3dd3f084b",
        "parentId" : null,
        "authorId" : "8614b618-866d-45f4-94e2-5b0974905cc0",
        "body" : "I wonder if this `Each` could be made templated? Is there a way to enforce that If we define the cases as `number[]`, a case with `[\"foo\"]` would be blocked?\r\n\r\nNot a blocker for this PR at all, just curious.",
        "createdAt" : "2018-06-16T20:56:28Z",
        "updatedAt" : "2018-06-16T20:56:47Z",
        "lastEditedBy" : "8614b618-866d-45f4-94e2-5b0974905cc0",
        "tags" : [
        ]
      },
      {
        "id" : "ea9f66b8-97ce-4183-94da-fbbadb5b9274",
        "parentId" : "0bcb1454-5805-40f1-abe3-cab3dd3f084b",
        "authorId" : "cae76ff5-132f-4399-b2fe-c3511b9ab5fb",
        "body" : "I was thinking about it too. I only have problem with arrays containing elements of different types. For that Typescript have `Tuples`. So it could be used like that:\r\n```\r\nit.each<[number, string]>([[1, 'one']])\r\n```\r\nBut it will not work for arguments of callback function as far as I know :(\r\n\r\nThis issue  https://github.com/Microsoft/TypeScript/issues/5453  addresses this problem.",
        "createdAt" : "2018-06-17T08:18:25Z",
        "updatedAt" : "2018-06-17T11:26:44Z",
        "lastEditedBy" : "cae76ff5-132f-4399-b2fe-c3511b9ab5fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "898ed0479ceda021e9200a275379da0e28e19b69",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +211,215 @@\n    interface Each {\n        (cases: any[]): (name: string, fn: (...args: any[]) => any) => void;\n        (strings: TemplateStringsArray, ...placeholders: any[]): (\n            name: string,"
  },
  {
    "id" : "bf7abb62-64b5-4516-a6ec-62f514f7f15a",
    "prId" : 26965,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26965#pullrequestreview-133430793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "873c00a9-adb9-4297-b45a-9ae27de93edd",
        "parentId" : null,
        "authorId" : "40e61ff8-b223-4e7e-8f91-44bc16197019",
        "body" : "This is purposefully not documented on the website, but I don't want to break anyone's builds.",
        "createdAt" : "2018-06-30T16:52:44Z",
        "updatedAt" : "2018-06-30T16:52:44Z",
        "lastEditedBy" : "40e61ff8-b223-4e7e-8f91-44bc16197019",
        "tags" : [
        ]
      }
    ],
    "commit" : "1df988c5bc537fddae725a12f5e5b02b75642cd1",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +261,265 @@        /**\n         * Experimental and should be avoided.\n         */\n        concurrent: It;\n        /**"
  },
  {
    "id" : "fc4062c9-7b30-4be3-972a-74a16dea26b7",
    "prId" : 27170,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/27170#pullrequestreview-141745606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9a60e97-4c67-4969-a502-743b24f21c5f",
        "parentId" : null,
        "authorId" : "d04b601c-02c0-4504-9dd5-a0ed3c6fe315",
        "body" : "@andys8  Why is an `Expect['any']` here? I think what is that saying is that the values of a property matcher can only be `expect.any()` calls. Is that correct? This works for other asymmetric matchers just because `Expect['any']` is of type `(a: any) => any`.",
        "createdAt" : "2018-07-30T22:46:39Z",
        "updatedAt" : "2018-07-30T22:47:16Z",
        "lastEditedBy" : "d04b601c-02c0-4504-9dd5-a0ed3c6fe315",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ed66e682c5e2a76f6f10a3e806ac38bfc3aa52e",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +656,660 @@         * Check out [the Snapshot Testing guide](http://facebook.github.io/jest/docs/snapshot-testing.html) for more information.\n         */\n        toMatchSnapshot<T extends {[P in keyof R]: Expect['any']}>(propertyMatchers: Partial<T>, snapshotName?: string): R;\n        /**\n         * This ensures that a value matches the most recent snapshot."
  },
  {
    "id" : "a0433e0d-467f-410f-85a7-a2ef4b1cbc48",
    "prId" : 29371,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/29371#pullrequestreview-163534902",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd1e2f51-1c9f-46dc-bce9-ac2f12b7da70",
        "parentId" : null,
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "It looks like `T` isn't even needed and this could just be `Partial<Record<keyof R, any>>`? That could be done in a different PR though.",
        "createdAt" : "2018-10-10T19:58:39Z",
        "updatedAt" : "2018-10-10T19:58:39Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e9445c8b7cee1dc18962e1e7459a92c3ef55a13",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +676,680 @@         * Check out [the Snapshot Testing guide](http://facebook.github.io/jest/docs/snapshot-testing.html) for more information.\n         */\n        toMatchInlineSnapshot<T extends {[P in keyof R]: any}>(propertyMatchers: Partial<T>, snapshot?: string): R;\n        /**\n         * This ensures that a value matches the most recent snapshot with property matchers."
  },
  {
    "id" : "8e0e67ca-2143-4074-9a81-590f7a3135f1",
    "prId" : 32579,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/32579#pullrequestreview-199429428",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec757836-9d1b-4e77-a556-5f82e86f7eb6",
        "parentId" : null,
        "authorId" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "body" : "TS ships with a `Parameters` type for this. Was it added after 3.0?",
        "createdAt" : "2019-02-03T22:05:08Z",
        "updatedAt" : "2019-02-04T04:09:43Z",
        "lastEditedBy" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "tags" : [
        ]
      },
      {
        "id" : "cd974798-3e05-49a5-be3b-f03289c51d1f",
        "parentId" : "ec757836-9d1b-4e77-a556-5f82e86f7eb6",
        "authorId" : "af64965d-59b5-42e7-8e44-c0fbc34bfdf0",
        "body" : "It was added in 3.1 (https://github.com/Microsoft/TypeScript/pull/26243/commits/60b4fe971f95b1d70cb4329f6f230615903b668f) \r\n\r\nThanks for the info. I didn't even know about it since it's not in https://www.typescriptlang.org/docs/handbook/advanced-types.html\r\n\r\n```\r\nERROR: 218:145  expect  Compile error in typescript@3.0 but not in typescript@3.1.\r\nFix with a comment '// TypeScript Version: 3.1' just under the header.\r\nCannot find name 'Parameters'.\r\n```",
        "createdAt" : "2019-02-04T03:26:40Z",
        "updatedAt" : "2019-02-04T04:09:43Z",
        "lastEditedBy" : "af64965d-59b5-42e7-8e44-c0fbc34bfdf0",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ba138ae2046e7af25ad389fcc7dfcb2ccca0d8c",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +37,41 @@declare const expect: jest.Expect;\n\ntype ArgsType<T> = T extends (...args: infer A) => any ? A : never;\n\ninterface NodeRequire {"
  },
  {
    "id" : "dce84778-8868-4e5a-98ca-9bd1a860c27f",
    "prId" : 32816,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/32816#pullrequestreview-201700107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbff618e-9d78-4825-8baf-687cdca0809d",
        "parentId" : null,
        "authorId" : "62e3e1d0-0d53-4e22-8b67-71bb14267f4d",
        "body" : "Why don't you return to `MockInstance<F>` and derive ReturnType and ArgsType where needed? This is a breaking change anyway - so this shouldn't be a problem. Same is true for `Mock<F>` and `jest.fn<F>`. This would make the API less error prone/more obvious as I proposed in https://github.com/DefinitelyTyped/DefinitelyTyped/pull/32864/files#r254967801.",
        "createdAt" : "2019-02-08T13:18:57Z",
        "updatedAt" : "2019-02-12T13:28:27Z",
        "lastEditedBy" : "62e3e1d0-0d53-4e22-8b67-71bb14267f4d",
        "tags" : [
        ]
      },
      {
        "id" : "5a153242-6f52-4667-935e-3bb87b294c00",
        "parentId" : "cbff618e-9d78-4825-8baf-687cdca0809d",
        "authorId" : "af64965d-59b5-42e7-8e44-c0fbc34bfdf0",
        "body" : "this will be discussed in #32901 ",
        "createdAt" : "2019-02-08T17:37:14Z",
        "updatedAt" : "2019-02-12T13:28:27Z",
        "lastEditedBy" : "af64965d-59b5-42e7-8e44-c0fbc34bfdf0",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fbb2766af29de3eea40a9c1a0693b95b608f86b",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +809,813 @@     */\n    type Mocked<T> = {\n        [P in keyof T]: T[P] extends (...args: any[]) => any ? MockInstance<ReturnType<T[P]>, ArgsType<T[P]>>: T[P];\n    } & T;\n"
  },
  {
    "id" : "3bc1f171-67aa-45dd-b59b-bc6cc92c3e1d",
    "prId" : 33013,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33013#pullrequestreview-204049380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5facc09f-835e-449a-b304-8eff7e225567",
        "parentId" : null,
        "authorId" : "1f11900c-0ba4-4f75-9536-38582a7ff656",
        "body" : "This should be generic too, but then it will be harder to define MockResult type",
        "createdAt" : "2019-02-15T00:33:00Z",
        "updatedAt" : "2019-02-15T00:33:00Z",
        "lastEditedBy" : "1f11900c-0ba4-4f75-9536-38582a7ff656",
        "tags" : [
        ]
      },
      {
        "id" : "ce213ff3-262b-44bf-9ecd-ee30150f9330",
        "parentId" : "5facc09f-835e-449a-b304-8eff7e225567",
        "authorId" : "af64965d-59b5-42e7-8e44-c0fbc34bfdf0",
        "body" : "There is no way of inferring exceptions from a function in Typescript. https://github.com/Microsoft/TypeScript/issues/13219\r\n\r\nSince exceptions can't be inferred, we have to use any type here.",
        "createdAt" : "2019-02-15T01:20:03Z",
        "updatedAt" : "2019-02-15T01:20:03Z",
        "lastEditedBy" : "af64965d-59b5-42e7-8e44-c0fbc34bfdf0",
        "tags" : [
        ]
      },
      {
        "id" : "6e77cda3-e3a8-4592-badf-f4d7f4b6be03",
        "parentId" : "5facc09f-835e-449a-b304-8eff7e225567",
        "authorId" : "1f11900c-0ba4-4f75-9536-38582a7ff656",
        "body" : "Ok !",
        "createdAt" : "2019-02-15T01:29:18Z",
        "updatedAt" : "2019-02-15T01:29:18Z",
        "lastEditedBy" : "1f11900c-0ba4-4f75-9536-38582a7ff656",
        "tags" : [
        ]
      }
    ],
    "commit" : "17a24edb012e06c05dac9158b7d5266df667ef95",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +993,997 @@     * Represents the result of a single call to a mock function with a thrown error.\n     */\n    interface MockResultThrow {\n        type: 'throw';\n        value: any;"
  },
  {
    "id" : "c3084758-b2b3-48e3-b1c9-95d5bdfd875c",
    "prId" : 33216,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33216#pullrequestreview-209888964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6bd2d350-8c2b-47d7-b770-1b537a123a74",
        "parentId" : null,
        "authorId" : "55f4cf7f-224e-4000-8488-5049738a7d7d",
        "body" : "@niedzielski what's the use case for this third overload?",
        "createdAt" : "2019-03-02T22:55:01Z",
        "updatedAt" : "2019-03-08T00:15:48Z",
        "lastEditedBy" : "55f4cf7f-224e-4000-8488-5049738a7d7d",
        "tags" : [
        ]
      },
      {
        "id" : "17fd25e1-cead-4d81-9523-54555c78a834",
        "parentId" : "6bd2d350-8c2b-47d7-b770-1b537a123a74",
        "authorId" : "cbfb134c-3d5a-48ca-b916-fc2228a390bc",
        "body" : "I am uncertain but believe this is best practice needed for improved error messages if the first two cases fail. See recommendation from @Jessidhia in https://github.com/DefinitelyTyped/DefinitelyTyped/issues/33079#issuecomment-464367917.",
        "createdAt" : "2019-03-03T00:03:39Z",
        "updatedAt" : "2019-03-08T00:15:48Z",
        "lastEditedBy" : "cbfb134c-3d5a-48ca-b916-fc2228a390bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba957a8a02f5f3cf906ef15a21178453b09ac6ca",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +277,281 @@            timeout?: number\n        ) => void;\n        (cases: ReadonlyArray<ReadonlyArray<any>>): (\n            name: string,\n            fn: (...args: any[]) => any,"
  },
  {
    "id" : "908d2b96-f3a4-4672-bf51-9f73c5e56558",
    "prId" : 35033,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/35033#pullrequestreview-231437609",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abdfe4af-5e3c-4df9-918b-7a8f6fea1ce7",
        "parentId" : null,
        "authorId" : "55f4cf7f-224e-4000-8488-5049738a7d7d",
        "body" : "I don't see any comments similar to this in here.\r\n\r\nI believe the documentation throughout the file is intended to document Jest's API as stated in its docs, not on how to use the types. The type information, such as generic arguments, can still be inferred from the editor sometimes:\r\n\r\n![Screen Shot 2019-04-27 at 11 28 34 AM](https://user-images.githubusercontent.com/2100222/56851834-88966a00-68e1-11e9-9981-21a7d67d47f0.png)\r\n\r\n",
        "createdAt" : "2019-04-27T15:47:22Z",
        "updatedAt" : "2019-04-27T18:06:42Z",
        "lastEditedBy" : "55f4cf7f-224e-4000-8488-5049738a7d7d",
        "tags" : [
        ]
      },
      {
        "id" : "4d7b273c-7ffb-400d-ac67-142a090584b3",
        "parentId" : "abdfe4af-5e3c-4df9-918b-7a8f6fea1ce7",
        "authorId" : "0ec5ee53-1f04-4f9f-9087-2e5430305508",
        "body" : "I based the including of an example on `.toHaveNthReturnedWith()` typing just above `toMatchObject()`. As for inferring from IntelliSense, the examples are in fact also included in the IntelliSense and I personally thing it's nice to have some extra documentation, especially for TypeScript structures that are considered \"advanced\" (being that Generics are under \"advanced types\" on the docs) so it helps TS starters.\r\n\r\nGIF recording of the IntelliSense I see, with the example:\r\n\r\n![19-57-46_27-04-2019_%pn](https://user-images.githubusercontent.com/4019718/56853369-04ff6c00-6927-11e9-86a1-5861a14434ae.gif)\r\n\r\n\r\nTL;DR: I think it doesn't give any negative effects and only (if minor), positive ones. I see no reason to remove it.",
        "createdAt" : "2019-04-27T18:00:44Z",
        "updatedAt" : "2019-04-27T18:06:42Z",
        "lastEditedBy" : "0ec5ee53-1f04-4f9f-9087-2e5430305508",
        "tags" : [
        ]
      },
      {
        "id" : "bc6d00f9-a3db-40ff-8d56-acea6e700376",
        "parentId" : "abdfe4af-5e3c-4df9-918b-7a8f6fea1ce7",
        "authorId" : "55f4cf7f-224e-4000-8488-5049738a7d7d",
        "body" : "The comment added stood out a little bit to me from the rest of the documentation comments since it isn't describing Jest's functionality, but given what you said above I don't think it hurts to keep it either. Thanks for the clarification! üòÑ ",
        "createdAt" : "2019-04-27T20:53:13Z",
        "updatedAt" : "2019-04-27T20:53:13Z",
        "lastEditedBy" : "55f4cf7f-224e-4000-8488-5049738a7d7d",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbfa03d852c22dbe723f559a8029ce389278570a",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +761,765 @@         *\n         * Optionally, you can provide an object to use as Generic type for the expected value.\n         * This ensures that the matching object matches the structure of the provided object-like type.\n         *\n         * @example"
  },
  {
    "id" : "c48878a0-7bb8-468a-8614-03f266c5bf30",
    "prId" : 35033,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/35033#pullrequestreview-231572516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8077b139-3089-48c0-8560-372fc62b63c2",
        "parentId" : null,
        "authorId" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "body" : "Is the intent to spread into an object here?\r\n```suggestion\r\n         * expect(desiredHouse).toMatchObject<House>({ ...standardHouse, kitchen: {area: 20} }) // wherein standardHouse is some base object of type House\r\n```",
        "createdAt" : "2019-04-28T21:43:38Z",
        "updatedAt" : "2019-04-28T21:43:38Z",
        "lastEditedBy" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "tags" : [
        ]
      },
      {
        "id" : "c99137f0-20fe-420f-b8be-709c2ac2be37",
        "parentId" : "8077b139-3089-48c0-8560-372fc62b63c2",
        "authorId" : "0ec5ee53-1f04-4f9f-9087-2e5430305508",
        "body" : "This was indeed meant to be an object spread. I indeed forgot a `{`. Looks like the PR was merged already though so this'll have to be covered in a next one. That said... It's not *really* important I think so I think I'll just wait for the next PR to come up and the bot will ping me now as well so I can request the change then from whoever is editing. ",
        "createdAt" : "2019-04-29T09:01:48Z",
        "updatedAt" : "2019-04-29T09:01:49Z",
        "lastEditedBy" : "0ec5ee53-1f04-4f9f-9087-2e5430305508",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbfa03d852c22dbe723f559a8029ce389278570a",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +775,779 @@         * };\n         *\n         * expect(desiredHouse).toMatchObject<House>(...standardHouse, kitchen: {area: 20}) // wherein standardHouse is some base object of type House\n         */\n        toMatchObject<E extends {} | any[]>(expected: E): R;"
  },
  {
    "id" : "fcd1439c-0513-47a0-a742-9311f2f713ef",
    "prId" : 36045,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36045#pullrequestreview-247367601",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e46ba7a5-6148-477d-9cb9-18bc0b7c6e3b",
        "parentId" : null,
        "authorId" : "0ec5ee53-1f04-4f9f-9087-2e5430305508",
        "body" : "Why did you change their URL from `<...>` to `(...)`?",
        "createdAt" : "2019-06-08T07:59:26Z",
        "updatedAt" : "2019-06-08T08:04:49Z",
        "lastEditedBy" : "0ec5ee53-1f04-4f9f-9087-2e5430305508",
        "tags" : [
        ]
      },
      {
        "id" : "e0230c75-da24-4fda-8a8c-5aed55547b60",
        "parentId" : "e46ba7a5-6148-477d-9cb9-18bc0b7c6e3b",
        "authorId" : "e5209397-2510-4745-aef6-1632dc787392",
        "body" : "Because [the&nbsp;`dt‚Äëheader` rule](https://github.com/microsoft/dtslint/blob/master/docs/dt-header.md) told me&nbsp;to.",
        "createdAt" : "2019-06-08T12:50:08Z",
        "updatedAt" : "2019-06-08T12:50:08Z",
        "lastEditedBy" : "e5209397-2510-4745-aef6-1632dc787392",
        "tags" : [
        ]
      },
      {
        "id" : "de89c4c9-00f3-4e43-8a4d-cf8271892e9f",
        "parentId" : "e46ba7a5-6148-477d-9cb9-18bc0b7c6e3b",
        "authorId" : "0ec5ee53-1f04-4f9f-9087-2e5430305508",
        "body" : "Oh you mean when you ran `npm run lint jest`? If so I guess they changed that check since I PR'd for Jest because it didn't say anything about it for me.",
        "createdAt" : "2019-06-08T13:21:01Z",
        "updatedAt" : "2019-06-08T13:21:10Z",
        "lastEditedBy" : "0ec5ee53-1f04-4f9f-9087-2e5430305508",
        "tags" : [
        ]
      }
    ],
    "commit" : "9445ee661fcf6bbcaf3618c33f772c66231130c8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1,5 @@// Type definitions for Jest 24.0\n// Project: https://jestjs.io/\n// Definitions by: Asana (https://asana.com)\n//                 Ivo Stratev <https://github.com/NoHomey>\n//                 jwbay <https://github.com/jwbay>"
  },
  {
    "id" : "d897560f-57b3-4673-974b-7ad54af0a712",
    "prId" : 39291,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/39291#pullrequestreview-307973720",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1400cc9-0baf-48b4-9049-7bbec45db204",
        "parentId" : null,
        "authorId" : "e5209397-2510-4745-aef6-1632dc787392",
        "body" : "```suggestion\r\n        <T extends any[]>(cases: ReadonlyArray<T>): (name: string, fn: (...args: T) => any, timeout?: number) => void;\r\n        <T extends ReadonlyArray<any>>(cases: ReadonlyArray<T>): (name: string, fn: (...args: ExtractEachCallbackArgs<T>) => any, timeout?: number) => void;\r\n```",
        "createdAt" : "2019-10-28T16:18:16Z",
        "updatedAt" : "2019-10-29T16:35:12Z",
        "lastEditedBy" : "e5209397-2510-4745-aef6-1632dc787392",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef2d1285bdfe9ed16f7f046cd5609a484d10d5bf",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +329,333 @@        // Exclusively arrays.\n        <T extends any[]>(cases: ReadonlyArray<T>): (name: string, fn: (...args: T) => any, timeout?: number) => void;\n        <T extends ReadonlyArray<any>>(cases: ReadonlyArray<T>): (name: string, fn: (...args: ExtractEachCallbackArgs<T>) => any, timeout?: number) => void;\n        // Not arrays.\n        <T>(cases: ReadonlyArray<T>): (name: string, fn: (...args: T[]) => any, timeout?: number) => void;"
  },
  {
    "id" : "185cc04f-4a6c-4a0c-b3b9-20337184e4be",
    "prId" : 43531,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43531#pullrequestreview-560953579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d8833dc-7d83-4e58-bda8-ec4a476b89ac",
        "parentId" : null,
        "authorId" : "6a5d4049-429a-458e-a497-c91017a048f3",
        "body" : "This definition is wrong. According to https://github.com/facebook/jest/blob/master/packages/jest-mock/src/index.ts#L51, this should be `getMockImplementation(): ((...args: Y) => T) | undefined;`. I think you just missed a couple of parenthesis.",
        "createdAt" : "2021-01-03T22:49:46Z",
        "updatedAt" : "2021-01-03T22:49:46Z",
        "lastEditedBy" : "6a5d4049-429a-458e-a497-c91017a048f3",
        "tags" : [
        ]
      },
      {
        "id" : "8c1cfe70-f492-425c-bdd4-93246b76717b",
        "parentId" : "8d8833dc-7d83-4e58-bda8-ec4a476b89ac",
        "authorId" : "508650c4-faa0-49a4-86f5-1b5643b525c3",
        "body" : "@GerkinDev I wouldn't trust all the type definitions you see on jest site.",
        "createdAt" : "2021-01-03T23:06:08Z",
        "updatedAt" : "2021-01-03T23:06:08Z",
        "lastEditedBy" : "508650c4-faa0-49a4-86f5-1b5643b525c3",
        "tags" : [
        ]
      },
      {
        "id" : "742ba065-f2b4-4015-a150-cafc4c8bd81a",
        "parentId" : "8d8833dc-7d83-4e58-bda8-ec4a476b89ac",
        "authorId" : "6a5d4049-429a-458e-a497-c91017a048f3",
        "body" : "@tonyhallett this isn't from jest site, but from source code type definitions. Moreover, in real use cases, if actual implementation is not defined, it returns `undefined`, not a function with same arity that may return undefined.\r\n\r\nAnyway, I've PR: #50377 ",
        "createdAt" : "2021-01-03T23:31:43Z",
        "updatedAt" : "2021-01-03T23:31:43Z",
        "lastEditedBy" : "6a5d4049-429a-458e-a497-c91017a048f3",
        "tags" : [
        ]
      },
      {
        "id" : "5d0c8733-9fcc-4d09-8c43-c6da9dcbdd6c",
        "parentId" : "8d8833dc-7d83-4e58-bda8-ec4a476b89ac",
        "authorId" : "508650c4-faa0-49a4-86f5-1b5643b525c3",
        "body" : "@GerkinDev I was referring to the jest source code type definitions.  My comment was in case you were attempting to match theirs without reading the source code.\r\n\r\n> According to https://github.com/facebook/jest/blob/master/packages/jest-mock/src/index.ts#L51\r\n\r\nAlthough the jest type definition has getMockImplementation(): Function | undefined;\r\n\r\n\r\nBut\r\nhttps://github.com/facebook/jest/blob/7430a7824421c122cd07035d800d22e1007408fa/packages/jest-mock/src/index.ts#L622\r\n\r\n```\r\nf.getMockImplementation = () => this._ensureMockConfig(f).mockImpl;\r\n```\r\n\r\nAlso see https://github.com/facebook/jest/issues/9061\r\n\r\n> Regarding getMockImplementation, I think that's undocumented and should not be used\r\n\r\n\r\nSo your change to \r\n> getMockImplementation(): ((...args: Y) => T) | undefined;\r\n\r\nin #50377 seems incorrect to me.\r\n ",
        "createdAt" : "2021-01-04T11:03:15Z",
        "updatedAt" : "2021-01-04T11:03:45Z",
        "lastEditedBy" : "508650c4-faa0-49a4-86f5-1b5643b525c3",
        "tags" : [
        ]
      },
      {
        "id" : "3512ee9d-7083-4e9d-9d36-e2d90f39080a",
        "parentId" : "8d8833dc-7d83-4e58-bda8-ec4a476b89ac",
        "authorId" : "6a5d4049-429a-458e-a497-c91017a048f3",
        "body" : "Given\r\n\r\n> ```ts\r\n> f.getMockImplementation = () => this._ensureMockConfig(f).mockImpl;\r\n> ```\r\n> https://github.com/facebook/jest/blob/7430a7824421c122cd07035d800d22e1007408fa/packages/jest-mock/src/index.ts#L622\r\n\r\nThis calls \r\n\r\n> ```ts\r\n> private _ensureMockConfig<T, Y extends Array<unknown>>(\r\n>     f: Mock<T, Y>,\r\n>   ): MockFunctionConfig {\r\n>     let config = this._mockConfigRegistry.get(f);\r\n>     if (!config) {\r\n>       config = this._defaultMockConfig();\r\n>       this._mockConfigRegistry.set(f, config);\r\n>     }\r\n>     return config;\r\n>   }\r\n>   ```\r\n> https://github.com/facebook/jest/blob/7430a7824421c122cd07035d800d22e1007408fa/packages/jest-mock/src/index.ts#L432-L441\r\n\r\nIf there is no config, it inits a new one with\r\n\r\n> ```ts\r\n>   private _defaultMockConfig(): MockFunctionConfig {\r\n>     return {\r\n>       mockImpl: undefined,\r\n>       mockName: 'jest.fn()',\r\n>       specificMockImpls: [],\r\n>       specificReturnValues: [],\r\n>     };\r\n>   }\r\n> ```\r\n> https://github.com/facebook/jest/blob/7430a7824421c122cd07035d800d22e1007408fa/packages/jest-mock/src/index.ts#L454-L461\r\n\r\nwhere `mockImpl` is `undefined`.\r\n\r\nBack in your sample\r\n\r\n> ```ts\r\n> f.getMockImplementation = () => this._ensureMockConfig(f).mockImpl;\r\n> ```\r\n> https://github.com/facebook/jest/blob/7430a7824421c122cd07035d800d22e1007408fa/packages/jest-mock/src/index.ts#L622\r\n\r\nit's actually the `mockImpl` property that is returned.\r\n\r\nI maintain my PR and am even more sure of it.\r\n\r\n---\r\n\r\nAbout facebook/jest#9061, in that case, the type definition should either be removed or correct. An existing incorrect type definition just makes no sense.",
        "createdAt" : "2021-01-04T11:11:17Z",
        "updatedAt" : "2021-01-04T11:14:09Z",
        "lastEditedBy" : "6a5d4049-429a-458e-a497-c91017a048f3",
        "tags" : [
        ]
      },
      {
        "id" : "5295f35f-b2bc-4843-ad3f-362657063d69",
        "parentId" : "8d8833dc-7d83-4e58-bda8-ec4a476b89ac",
        "authorId" : "6a5d4049-429a-458e-a497-c91017a048f3",
        "body" : "Please continue the conversation in #50377. I'll re-post this comment, and I think we should continue there.",
        "createdAt" : "2021-01-04T11:17:32Z",
        "updatedAt" : "2021-01-04T11:17:33Z",
        "lastEditedBy" : "6a5d4049-429a-458e-a497-c91017a048f3",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d1f199e0034a942b051139e840ef4a3721aaf23",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1153,1157 @@         * Returns the function that was set as the implementation of the mock (using mockImplementation).\n         */\n        getMockImplementation(): (...args: Y) => T | undefined;\n        /**\n         * Accepts a function that should be used as the implementation of the mock. The mock itself will still record"
  },
  {
    "id" : "f585c0be-ebc2-4ab3-8b0c-e349952a616d",
    "prId" : 45496,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45496#pullrequestreview-430802182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5fb4540-ab11-45d4-bc16-69ce8933cf08",
        "parentId" : null,
        "authorId" : "70b266e4-22ff-4fa0-8f6f-7b3406c28e1a",
        "body" : "I tried to follow the comment patterns I observed elsewhere in this file, I just copy pasted this comment and the one below straight out of jest's docs.",
        "createdAt" : "2020-06-15T16:24:02Z",
        "updatedAt" : "2020-06-16T12:56:13Z",
        "lastEditedBy" : "70b266e4-22ff-4fa0-8f6f-7b3406c28e1a",
        "tags" : [
        ]
      }
    ],
    "commit" : "725c00d5da5651ae54f3b98679d54d28f8279751",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +141,145 @@     * > Note: This function is only available when using modern fake timers\n     * > implementation\n     */\n    function setSystemTime(now?: number): void;\n    /**"
  },
  {
    "id" : "e0e8cc96-e5b6-4be1-9b84-edd535ff2a91",
    "prId" : 47020,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/47020#pullrequestreview-516386427",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c8fce0f-3943-480a-8f80-6f691dd598ff",
        "parentId" : null,
        "authorId" : "6b174fb4-9ad3-4caf-9ebd-24075cb23037",
        "body" : "We can have something like...\r\n```typescript\r\ndeclare const expect: <A>(a: A) => ({ toStrictEqual: <E extends ExactWith<A, E>>(e: E) => void })\r\n\r\ntype ExactWith<A, E> =\r\n  IsPlainObject<A> extends false ? A :\r\n  & { [K in keyof A]: ExactWith<A[K], K extends keyof E ? E[K] : never> }\r\n  & { [K in Exclude<keyof E, keyof A>]: never }\r\n\r\ntype IsPlainObject<T> =\r\n  T extends object\r\n    ? T extends (...a: any[]) => any\r\n      ? false\r\n      : true\r\n    : false\r\n```\r\n[Playground](https://www.typescriptlang.org/play?#code/CYUwxgNghgTiAEYD2A7AzgF3iAHgB3AwC54AeAQQD4AKKE8gSngF5L5qBveDJAZQxgBLMBgCiARwCuUCCVKjsODCBTA08UTigiA6oIwALCgBoNlGiBKimreADckg4PAC+DAFDuMATwIatuvpG5KaibMzu8PAAkmgACtCCKADyAEYAVoQUbLjKquoAZjJoCAD88OTwRJHwAGTwXADaANLwSfAA1iDeSAUVALpWARh6hhQt-aatuSpqnd29GvDlohNV8CggdiAwbC419U2t7ZqQkqCkXT19oqZXi1SDG1s7rp4+frEJUElpmSKkAAq4RqgMUeTmSAyhBqUXKYJm+XYADpUXR4FAUN5Gv0bGxMd5YVFlvAihASkSoiQBJIQESSGSKe5cAQRJwMSQAERQTmuBjInj8IQiCTSCDs9Hc3luZn4QgSrk8vkCvgCYRiKQyBXwKWmVJc1LSjws+VcSVKtwqoXq0Vas0kABMeoNRs8JrZ9p1POdDUQXLA0uVgrVIs14s9uvg+t9YH9gZl7ow2sj0a4sZ1AdcQdVwo1YuT3qjJDTcdMwC5wHjxrlHo5Xs5PpLGarVpDebtdZTxb98AAzK5TJZ4ABGPnuIA)",
        "createdAt" : "2020-09-17T21:25:06Z",
        "updatedAt" : "2020-10-24T23:36:53Z",
        "lastEditedBy" : "6b174fb4-9ad3-4caf-9ebd-24075cb23037",
        "tags" : [
        ]
      },
      {
        "id" : "4937877a-2c9d-4580-9f51-fed7012aab36",
        "parentId" : "6c8fce0f-3943-480a-8f80-6f691dd598ff",
        "authorId" : "f04e6f4c-e104-4830-826f-43f49cec1ba9",
        "body" : "Sorry for misunderstanding, but what problem does this code solve? As I can see from the playground, it checks for additional properies, so `expect({ a: \"a\" }).toStrictEqual({ a: \"a\", b: \"b\" })` will fail. But can't this be achieved with just `toStrictEqual(expected: T): R`?\r\n\r\nAlso, your example is too restrictive. Consider this example:\r\n```\r\ninterface Animal { type: string }\r\ninterface Dog extends Animal { breed: string }\r\nconst dog: Dog = { type: 'dog', breed: 'chihuahua' }\r\nconst animals: Animal[] = [ dog ]\r\nexpect(animals[0]).toStrictEqual({ type: 'dog', breed: 'chihuahua' })\r\n```",
        "createdAt" : "2020-10-24T23:21:44Z",
        "updatedAt" : "2020-10-24T23:36:53Z",
        "lastEditedBy" : "f04e6f4c-e104-4830-826f-43f49cec1ba9",
        "tags" : [
        ]
      },
      {
        "id" : "a1b357fe-c1f2-474c-936d-e9976c84c052",
        "parentId" : "6c8fce0f-3943-480a-8f80-6f691dd598ff",
        "authorId" : "6b174fb4-9ad3-4caf-9ebd-24075cb23037",
        "body" : "(afk) your version won't check for deep equalities and mine would as the playground shows.\r\nAlthough as you pointed out the actual runtime value can be wider than the type hence we shouldn't have my version. Apart from that I think this would be only work well for literals in other cases I feel it would be a footgun to it's not a great idea anyway. Probably I was a little drunk with type gymnastics when I suggested this xD.\r\nSo tbc I'm taking back this suggestion.",
        "createdAt" : "2020-10-25T17:11:04Z",
        "updatedAt" : "2020-10-25T17:11:04Z",
        "lastEditedBy" : "6b174fb4-9ad3-4caf-9ebd-24075cb23037",
        "tags" : [
        ]
      },
      {
        "id" : "5ebbc218-c26c-428f-bec2-f0e813466108",
        "parentId" : "6c8fce0f-3943-480a-8f80-6f691dd598ff",
        "authorId" : "6b174fb4-9ad3-4caf-9ebd-24075cb23037",
        "body" : "(on keyboard now) I know this is resolved by realized this part - \"your version won't check for deep equalities and mine would\" - is not clear in the above playground. So here's a version which would show the difference.\r\n\r\n```typescript\r\ndeclare const expect: <A>(a: A) => ({\r\n  toStrictEqualMine: <E extends ExactWith<A, E>>(e: E) => void,\r\n  toStrictEqualYours: (e: A) => void,\r\n})\r\n\r\ntype ExactWith<A, E> =\r\n  IsPlainObject<A> extends false ? A :\r\n  & { [K in keyof A]: ExactWith<A[K], K extends keyof E ? E[K] : never> }\r\n  & { [K in Exclude<keyof E, keyof A>]: never }\r\n\r\ntype IsPlainObject<T> =\r\n  T extends object\r\n    ? T extends (...a: any[]) => any\r\n      ? false\r\n      : true\r\n    : false\r\n\r\nlet a = { a: \"a\", b: { c: \"c\" } }\r\nlet b = { a: \"a\", b: { c: \"c\", e: 1 } }\r\n\r\nexpect(a).toStrictEqualMine(b) // error\r\nexpect(a).toStrictEqualYours(b) // no error\r\n```\r\n\r\n[Playground](https://www.typescriptlang.org/play?#code/CYUwxgNghgTiAEYD2A7AzgF3iAHgB3AwC54AeAQQD4AKKE8gSngF5L5qBvAKHngyQDKGGAEswGAKIBHAK5QIAWREoQJUhOw4MIFMDTwJOKOIDqIjAAsKAGgOUaqg01bwAbkhHBrPPoOFjJWXkATSQZGDQSakdGFjZ3T28AXwYuLgwATwIDI1NzK3JbCTZmHwBJNAAFaGUAeQAjACtCCjZcbV19ADN5NAQAfnhyeCIfADJ4DngAbQBpeGV4AGsQDKQuoYBdEkNjDDNLCjnN23n2nT1l1fWDeEGJY5H4FVcQGDYk8cmZ+cXDSBkoFIKzWGwkthBNyo22eIFeMHgn3SWQQFWqUDqTRaABUSj5sZoOpckFjxD5eIMCedOuwAHT0ujwKAoDLTTbONjMjLk3h3eA9CB9Hm8EjCGQgHkkAVCrgQEBYKAsb6MgBEUBVtnqJCmYBIKrAKsRiNl8vg9SVU1V6s12sQeoNtkcAEYjUjcARxLQGLT+EJROJpHJFMoQNR6kwAPQR7AwGBIGBcd2EL0+vz+wJB0LhNBhyPRlBIGNxmBAA). The previous version doesn't show the difference probably because they were literals and/or because of contextual inference idk.\r\nAnyway, I just wanted to clarify how my version is different. Still isn't workable.\r\n\r\n",
        "createdAt" : "2020-10-25T18:42:39Z",
        "updatedAt" : "2020-10-25T18:42:39Z",
        "lastEditedBy" : "6b174fb4-9ad3-4caf-9ebd-24075cb23037",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb3997a7b534f3154add0f5d9d032c3f4ce169ec",
    "line" : 179,
    "diffHunk" : "@@ -1,1 +1028,1032 @@         */\n        // tslint:disable-next-line: no-unnecessary-generics\n        toStrictEqual<E extends T>(expected: E): R;\n        /**\n         * Used to test that a function throws when it is called."
  },
  {
    "id" : "4e7ac9b5-5ec3-42c9-b8ba-0dc860de8214",
    "prId" : 48473,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/48473#pullrequestreview-501669134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e899fc42-c9ec-4884-8ede-5ee864f002c2",
        "parentId" : null,
        "authorId" : "e5209397-2510-4745-aef6-1632dc787392",
        "body" : "For¬†the¬†sake of¬†consistency, this¬†should¬†be:\r\n```suggestion\r\n// TypeScript Version: 3.8\r\n```",
        "createdAt" : "2020-10-04T22:26:48Z",
        "updatedAt" : "2020-10-04T22:27:18Z",
        "lastEditedBy" : "e5209397-2510-4745-aef6-1632dc787392",
        "tags" : [
        ]
      },
      {
        "id" : "436816c7-d397-4f3b-a2f6-8f416d4bc5dc",
        "parentId" : "e899fc42-c9ec-4884-8ede-5ee864f002c2",
        "authorId" : "14dcc82f-aade-4928-b66a-5ef85cdfeb4d",
        "body" : "See, I'd prefer that for consistency, but the readme says [it should have that word](https://github.com/DefinitelyTyped/DefinitelyTyped#i-want-to-use-features-from-typescript-33-or-above) ü§î ",
        "createdAt" : "2020-10-04T23:30:34Z",
        "updatedAt" : "2020-10-04T23:30:34Z",
        "lastEditedBy" : "14dcc82f-aade-4928-b66a-5ef85cdfeb4d",
        "tags" : [
        ]
      }
    ],
    "commit" : "68b52e14810df2587af9a101fa3f67b6f399b0ed",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +29,33 @@//                 Regev Brody <https://github.com/regevbr>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// Minimum TypeScript Version: 3.8\n\ndeclare var beforeAll: jest.Lifecycle;"
  }
]