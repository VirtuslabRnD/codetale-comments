[
  {
    "id" : "4e1b30aa-ac2c-4a1b-b646-8beeac1a0ec4",
    "prId" : 40091,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/40091#pullrequestreview-310793345",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c80794ee-b2ea-4378-83e3-160fbb1fa37f",
        "parentId" : null,
        "authorId" : "98350853-17bd-4d6f-9e6a-12944bce677f",
        "body" : "Maybe we could do something like this:\r\n```ts\r\ndeclare namespace UIDGenerator {\r\n  interface UIDGeneratorInstance {\r\n    readonly bitSize: number;\r\n    readonly uidLength: number;\r\n    readonly baseEncoding: string;\r\n    readonly base: number;\r\n    generateSync(): string;\r\n    generate(): Promise<string>;\r\n    generate(cb: (error: Error|null, uid: string) => any): void;\r\n  }\r\n\r\n  interface UIDGeneratorClass {\r\n    new (bitSize?: number, baseEncoding?: string): UIDGeneratorInstance;\r\n    new (baseEncoding?: string): UIDGeneratorInstance;\r\n    readonly BASE16: '0123456789abcdef';\r\n    readonly BASE36: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    readonly BASE58: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\r\n    readonly BASE62: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r\n    readonly BASE66: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~';\r\n    readonly BASE71: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!'()*-._~\";\r\n    readonly BASE94: \"!\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";\r\n  }\r\n}\r\n\r\ndeclare const UIDGenerator: UIDGenerator.UIDGeneratorClass;\r\n\r\nexport = UIDGenerator;\r\n``` \r\nWith this, the package would use the correct `export =` while still having its types",
        "createdAt" : "2019-11-02T20:55:10Z",
        "updatedAt" : "2019-11-02T20:55:24Z",
        "lastEditedBy" : "98350853-17bd-4d6f-9e6a-12944bce677f",
        "tags" : [
        ]
      },
      {
        "id" : "a358beef-98ef-42dc-a5ab-89e90ed3c2f6",
        "parentId" : "c80794ee-b2ea-4378-83e3-160fbb1fa37f",
        "authorId" : "ce9dc0d2-00cb-4a6c-a7ef-564c8243e0d5",
        "body" : "Default-export should be forbidden indeed. :-D\r\n\r\nI think maybe it does not necessary to export Interfaces in practice:\r\n\r\nTypically, user will write something like this:\r\n\r\n```typescript\r\nimport UIDGenerator =  require('uid-generator');\r\nconst uidgen    = new UIDGenerator(bitLength, UIDGenerator.BASE58);\r\nlet uid = uidgen.generateSync();\r\nuidgen.generate(uid=>{\r\n  // uid = string\r\n});\r\n```\r\n\r\nThe situation when explicit type is needed could be very rare:\r\n\r\n```typescript\r\nimport UIDGenerator =  require('uid-generator');\r\nconst uidgen:UIDGenerator.UIDGeneratorInstance    = new UIDGenerator(bitLength, UIDGenerator.BASE58);\r\nlet uid = uidgen.generateSync();\r\nuidgen.generate(uid=>{\r\n  // uid = string\r\n});\r\n```\r\n\r\nPlus, because of we already defined returning type at: \r\n\r\n```typescript\r\nnew (bitSize?: number, baseEncoding?: string): UIDGeneratorInstance;\r\nnew (baseEncoding?: string): UIDGeneratorInstance;\r\n```\r\n\r\nTypeScript already knows the returning type structure. (I have tested, my atom editor understands both the class instance constants and methods)\r\n\r\nSo basically, I tend to believe explicit export types could be unnecessary.\r\n\r\nThe drawback of using a namespace is that it imports a global namespace. There is no guarantee that another package would never use the same namespace.",
        "createdAt" : "2019-11-02T22:04:34Z",
        "updatedAt" : "2019-11-02T22:04:34Z",
        "lastEditedBy" : "ce9dc0d2-00cb-4a6c-a7ef-564c8243e0d5",
        "tags" : [
        ]
      },
      {
        "id" : "f41d9bd8-22b4-4af4-8777-c47e75fca05c",
        "parentId" : "c80794ee-b2ea-4378-83e3-160fbb1fa37f",
        "authorId" : "98350853-17bd-4d6f-9e6a-12944bce677f",
        "body" : "I see what you mean, and I think you're right. I'll approve this version then :)\r\nHowever, I do not agree with your last argument. It would be quite surprising to have a project using the namespace `UIDGenerator`...",
        "createdAt" : "2019-11-02T23:38:05Z",
        "updatedAt" : "2019-11-02T23:39:48Z",
        "lastEditedBy" : "98350853-17bd-4d6f-9e6a-12944bce677f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf5f25b71fa45bcf961ffc84ac792d460441aee9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +29,33 @@declare const UIDGenerator: UIDGeneratorClass;\n\nexport = UIDGenerator;"
  }
]