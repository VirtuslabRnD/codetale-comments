[
  {
    "id" : "fdfa7063-8616-494d-b95a-905055c7fe19",
    "prId" : 52227,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/52227#pullrequestreview-630690029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b40c10c6-1147-406c-98fb-3782182ef95e",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "Naive question: this should returning `Listener`s?",
        "createdAt" : "2021-04-07T20:12:02Z",
        "updatedAt" : "2021-04-07T22:02:42Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "df113f9b-0306-465d-9e67-414ac94bc65b",
        "parentId" : "b40c10c6-1147-406c-98fb-3782182ef95e",
        "authorId" : "a11989c2-659b-45d2-b5e4-e2ce04058d65",
        "body" : "Ideally yes, but the typings for `EventEmitter` in the `@types/node` package currently return `Function[]` instead. I just used `any[]` to avoid the lint warnings about `Function[]`, the actual type doesn't really matter since `ultron` just needs to `===` it.",
        "createdAt" : "2021-04-07T22:08:58Z",
        "updatedAt" : "2021-04-07T22:08:59Z",
        "lastEditedBy" : "a11989c2-659b-45d2-b5e4-e2ce04058d65",
        "tags" : [
        ]
      },
      {
        "id" : "b20f4b03-dcbd-4b4b-ba1a-c50853e70548",
        "parentId" : "b40c10c6-1147-406c-98fb-3782182ef95e",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "Works for me.  Thanks!",
        "createdAt" : "2021-04-07T22:10:35Z",
        "updatedAt" : "2021-04-07T22:10:35Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      }
    ],
    "commit" : "1accf7f984726aec127838adb5d87552b465942d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +14,18 @@    once(event: string | symbol, fn: Listener): void;\n    removeListener(event: string | symbol, fn: Listener): void;\n    listeners(event: string | symbol): any[];\n    eventNames?(): Array<string | symbol>;\n}"
  }
]