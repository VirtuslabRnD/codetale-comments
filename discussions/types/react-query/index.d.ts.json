[
  {
    "id" : "142cfac4-b324-457c-8793-425ec1722631",
    "prId" : 40312,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/40312#pullrequestreview-315198920",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14977b98-774c-4c20-af05-20336d35e87b",
        "parentId" : null,
        "authorId" : "035d69d2-159c-4133-8954-501882b330ab",
        "body" : "Add clearQueryCache method",
        "createdAt" : "2019-11-11T20:06:46Z",
        "updatedAt" : "2019-11-11T22:38:17Z",
        "lastEditedBy" : "035d69d2-159c-4133-8954-501882b330ab",
        "tags" : [
        ]
      },
      {
        "id" : "5e0867ae-105b-47fb-a152-f47f6198dc11",
        "parentId" : "14977b98-774c-4c20-af05-20336d35e87b",
        "authorId" : "6589e83f-6a9e-48e6-854f-22b884fee8fc",
        "body" : "Added",
        "createdAt" : "2019-11-11T22:38:36Z",
        "updatedAt" : "2019-11-11T22:38:36Z",
        "lastEditedBy" : "6589e83f-6a9e-48e6-854f-22b884fee8fc",
        "tags" : [
        ]
      }
    ],
    "commit" : "b378b5ab6f1ca15426cbdccee5de6856cae07fe7",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +119,123 @@    refetchInterval: boolean;\n    suspense: boolean;\n}\n\nexport function clearQueryCache(): void;"
  },
  {
    "id" : "28580532-2516-44a3-a1ef-9edf9329a1b2",
    "prId" : 43438,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43438#pullrequestreview-383433698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba5fd41a-223e-492f-bf58-0da72b54a09a",
        "parentId" : null,
        "authorId" : "6589e83f-6a9e-48e6-854f-22b884fee8fc",
        "body" : "Did you considered merging those 2 overloads into one? The difference in `TKey` arg could be handled by wrapping it with a conditional type before passing into `QueryFunction`\r\n  \r\n\r\n",
        "createdAt" : "2020-03-29T12:14:14Z",
        "updatedAt" : "2020-03-30T22:18:15Z",
        "lastEditedBy" : "6589e83f-6a9e-48e6-854f-22b884fee8fc",
        "tags" : [
        ]
      },
      {
        "id" : "0d22435e-5a06-4b81-b97a-35f677160a8d",
        "parentId" : "ba5fd41a-223e-492f-bf58-0da72b54a09a",
        "authorId" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "body" : "I'm trying to not overuse complex type constructs such as conditional types if you can achieve the same with overloading or any other simpler constructs. TS usually works better with them.\r\nAlso, I wanted to be sure that what a key means is well defined. In this case, the key is a tuple with serializable elements.\r\nIn this overload, I probable needed to call this type `TSingleKey` or something like that.",
        "createdAt" : "2020-03-29T17:14:47Z",
        "updatedAt" : "2020-03-30T22:18:15Z",
        "lastEditedBy" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa6c5841195e3b80ddf7a1275b341dd748adca69",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +18,22 @@): QueryResult<TResult>;\n\nexport function useQuery<TResult, TKey extends string>(\n    queryKey: TKey | false | null | undefined | (() => TKey | false | null | undefined),\n    queryFn: QueryFunction<TResult, [TKey]>,"
  },
  {
    "id" : "76a6c3fd-b955-4044-9100-5d3ba73d1641",
    "prId" : 43438,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43438#pullrequestreview-383485534",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e7462ff-9205-4382-9f66-46e9c28134f2",
        "parentId" : null,
        "authorId" : "6589e83f-6a9e-48e6-854f-22b884fee8fc",
        "body" : "Although you're right that we can't conclude `data` based on `success` status, discriminated union here still make sense for `error` and `loading` statuses. ",
        "createdAt" : "2020-03-29T12:32:28Z",
        "updatedAt" : "2020-03-30T22:18:15Z",
        "lastEditedBy" : "6589e83f-6a9e-48e6-854f-22b884fee8fc",
        "tags" : [
        ]
      },
      {
        "id" : "45bf188c-4c0a-42ee-956e-1a9ec2a55085",
        "parentId" : "3e7462ff-9205-4382-9f66-46e9c28134f2",
        "authorId" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "body" : "So, unfortunately, we cannot do this for `error` either. This is because the type of error is not `Error` (built-in class) but any possible throwable type (the library does not wrap inner exceptions), which can be anything, including primitives, `null` or `undefined`. That makes the type be `unknown | null` which is just `unknown`. So any CFA based on that does not make sense.",
        "createdAt" : "2020-03-29T18:46:04Z",
        "updatedAt" : "2020-03-30T22:18:15Z",
        "lastEditedBy" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "tags" : [
        ]
      },
      {
        "id" : "6295e27d-1ecf-488b-aa0d-1e10f0212746",
        "parentId" : "3e7462ff-9205-4382-9f66-46e9c28134f2",
        "authorId" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "body" : "To clarify, `const { status, error } = useQuery(key, () => throw null)` would produce `status === 'error' && error === null`.",
        "createdAt" : "2020-03-29T18:47:50Z",
        "updatedAt" : "2020-03-30T22:18:15Z",
        "lastEditedBy" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "tags" : [
        ]
      },
      {
        "id" : "d9098193-9f69-4e07-8153-ab7b8150cae4",
        "parentId" : "3e7462ff-9205-4382-9f66-46e9c28134f2",
        "authorId" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "body" : "Added discriminated union that allows to have `status === 'success' && data !== TResult`",
        "createdAt" : "2020-03-30T01:31:20Z",
        "updatedAt" : "2020-03-30T22:18:15Z",
        "lastEditedBy" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa6c5841195e3b80ddf7a1275b341dd748adca69",
    "line" : 217,
    "diffHunk" : "@@ -1,1 +189,193 @@}\n\nexport interface QueryResultBase<TResult> {\n    status: 'loading' | 'error' | 'success';\n    error: null | unknown;"
  },
  {
    "id" : "0399961d-8831-442d-bf88-61e4ce15bcfa",
    "prId" : 43438,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43438#pullrequestreview-383485866",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4754b95-0220-44a2-be78-74e30a6b0b69",
        "parentId" : null,
        "authorId" : "6589e83f-6a9e-48e6-854f-22b884fee8fc",
        "body" : "Can you add discrimanated untion here?",
        "createdAt" : "2020-03-29T12:33:34Z",
        "updatedAt" : "2020-03-30T22:18:15Z",
        "lastEditedBy" : "6589e83f-6a9e-48e6-854f-22b884fee8fc",
        "tags" : [
        ]
      },
      {
        "id" : "ebc04ab7-9e36-442d-a855-4e65ac23666f",
        "parentId" : "c4754b95-0220-44a2-be78-74e30a6b0b69",
        "authorId" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "body" : "Added. [Source code](https://github.com/tannerlinsley/react-query/blob/v1.1.4/src/useMutation.js#L29-L49) is even weirder there, it just not have `error`, `data` in some states. The definition now follows actual behaviour.",
        "createdAt" : "2020-03-30T01:33:08Z",
        "updatedAt" : "2020-03-30T22:18:15Z",
        "lastEditedBy" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa6c5841195e3b80ddf7a1275b341dd748adca69",
    "line" : 346,
    "diffHunk" : "@@ -1,1 +281,285 @@\nexport interface MutationResultBase<TResult> {\n    status: 'idle' | 'loading' | 'error' | 'success';\n    data: undefined | TResult;\n    error: null | unknown;"
  },
  {
    "id" : "6ae68759-aa0e-421e-83bf-da203ef0c0ec",
    "prId" : 43438,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43438#pullrequestreview-384303277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c5a19b1-5c71-4ea6-995f-46153e06ec45",
        "parentId" : null,
        "authorId" : "77b0ef1b-7dd4-4e85-a577-8d4b8f924f85",
        "body" : "Isn't it all right to have type Error here? Can it be any other type than that?",
        "createdAt" : "2020-03-30T09:11:40Z",
        "updatedAt" : "2020-03-30T22:18:15Z",
        "lastEditedBy" : "77b0ef1b-7dd4-4e85-a577-8d4b8f924f85",
        "tags" : [
        ]
      },
      {
        "id" : "ef6dbd7d-eefe-4e15-8e9b-f1f81e50e06b",
        "parentId" : "5c5a19b1-5c71-4ea6-995f-46153e06ec45",
        "authorId" : "4a06afd6-a5c1-498b-b3af-653f5ce90c95",
        "body" : "I think @Igorbek explained it quite well here: https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43438/files#r399837161\r\n\r\n> To clarify, `const { status, error } = useQuery(key, () => throw null)` would produce `status === 'error' && error === null`.\r\n\r\nI am not sure if something else would hold here, but I assume it's the same thing?",
        "createdAt" : "2020-03-30T11:44:51Z",
        "updatedAt" : "2020-03-30T22:18:15Z",
        "lastEditedBy" : "4a06afd6-a5c1-498b-b3af-653f5ce90c95",
        "tags" : [
        ]
      },
      {
        "id" : "c42b4be3-038e-4f6d-8b4d-42b4989cb82e",
        "parentId" : "5c5a19b1-5c71-4ea6-995f-46153e06ec45",
        "authorId" : "77b0ef1b-7dd4-4e85-a577-8d4b8f924f85",
        "body" : "yeah but come on, this is bad, later on in the code it will be quite a useless type, to do something like error.message that is what we all probably going to do you need to cast it to Error \r\n```\r\n<pre>{(error as Error)?.message}</pre>\r\n```\r\nSomething like this 😭",
        "createdAt" : "2020-03-30T14:32:45Z",
        "updatedAt" : "2020-03-30T22:18:15Z",
        "lastEditedBy" : "77b0ef1b-7dd4-4e85-a577-8d4b8f924f85",
        "tags" : [
        ]
      },
      {
        "id" : "f6dcafa0-51e0-4bd3-a36a-b40167e313ce",
        "parentId" : "5c5a19b1-5c71-4ea6-995f-46153e06ec45",
        "authorId" : "77b0ef1b-7dd4-4e85-a577-8d4b8f924f85",
        "body" : "actually maybe `Error | null` can work fine?",
        "createdAt" : "2020-03-30T14:34:19Z",
        "updatedAt" : "2020-03-30T22:18:15Z",
        "lastEditedBy" : "77b0ef1b-7dd4-4e85-a577-8d4b8f924f85",
        "tags" : [
        ]
      },
      {
        "id" : "a13d0ef9-349e-4ab8-9949-0bfd63bd79cd",
        "parentId" : "5c5a19b1-5c71-4ea6-995f-46153e06ec45",
        "authorId" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "body" : "I understand the concern and wish thrown exceptions were always of type `Error`, but in JavaScript you can throw and catch anything, including primitives, `null`, `undefined`. This the why when you write `try { ... } catch (err) { ... }` TS doesn't give you the type of the error and just uses `any`. Most of the libraries that propagate exceptions have to decide what to use for error `any` or `unknown`. For example, promises always have `error: any` as a parameter to `onReject`. I chose to use `unknown` here as it was more conservative and puts further decisions on consumers.\r\n`Error | null` wouldn't work either for the same reasons.",
        "createdAt" : "2020-03-30T16:02:37Z",
        "updatedAt" : "2020-03-30T22:18:15Z",
        "lastEditedBy" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "tags" : [
        ]
      },
      {
        "id" : "69ce4b51-a1a2-416f-a1e8-d1465a5272b3",
        "parentId" : "5c5a19b1-5c71-4ea6-995f-46153e06ec45",
        "authorId" : "77b0ef1b-7dd4-4e85-a577-8d4b8f924f85",
        "body" : "got it! Sad, but thanks for the explenation",
        "createdAt" : "2020-03-30T16:28:55Z",
        "updatedAt" : "2020-03-30T22:18:15Z",
        "lastEditedBy" : "77b0ef1b-7dd4-4e85-a577-8d4b8f924f85",
        "tags" : [
        ]
      },
      {
        "id" : "797ac24a-b04b-46c3-a489-8de462f7ddc2",
        "parentId" : "5c5a19b1-5c71-4ea6-995f-46153e06ec45",
        "authorId" : "4a06afd6-a5c1-498b-b3af-653f5ce90c95",
        "body" : "I see where you are coming from though. In many other languages async functionality is represented with a result type, for instance: Result<SuccessType, ErrorType = unknown>, that way you can type both success and failure state. It could even default to unknown for the failure state.",
        "createdAt" : "2020-03-30T17:11:07Z",
        "updatedAt" : "2020-03-30T22:18:15Z",
        "lastEditedBy" : "4a06afd6-a5c1-498b-b3af-653f5ce90c95",
        "tags" : [
        ]
      },
      {
        "id" : "e5de1068-9779-4f68-94e8-d053647587b6",
        "parentId" : "5c5a19b1-5c71-4ea6-995f-46153e06ec45",
        "authorId" : "4a06afd6-a5c1-498b-b3af-653f5ce90c95",
        "body" : "However, unless this is blocking valid use cases (which I doubt since it simply requires you to cast to a type) then I think this should be added in a patch or minor version later on. I rather have non blocking functional types now that we can extend than 100% correct types in a month.",
        "createdAt" : "2020-03-30T17:20:16Z",
        "updatedAt" : "2020-03-30T22:18:15Z",
        "lastEditedBy" : "4a06afd6-a5c1-498b-b3af-653f5ce90c95",
        "tags" : [
        ]
      },
      {
        "id" : "32f52c1f-d4a4-4e53-9946-bf0da7ba5d30",
        "parentId" : "5c5a19b1-5c71-4ea6-995f-46153e06ec45",
        "authorId" : "77b0ef1b-7dd4-4e85-a577-8d4b8f924f85",
        "body" : "Result ♥️! Anyway no problem at all! Thanks for merging this!",
        "createdAt" : "2020-03-30T23:29:42Z",
        "updatedAt" : "2020-03-30T23:29:42Z",
        "lastEditedBy" : "77b0ef1b-7dd4-4e85-a577-8d4b8f924f85",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa6c5841195e3b80ddf7a1275b341dd748adca69",
    "line" : 245,
    "diffHunk" : "@@ -1,1 +206,210 @@    status: 'error';\n    data: TResult | undefined; // even when error, data can have stale data\n    error: unknown;\n}\n"
  },
  {
    "id" : "40d18c00-49ad-4632-b840-602521121211",
    "prId" : 43438,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43438#pullrequestreview-384182645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8303aec8-480e-4a2d-b1dd-bd8a79546fd3",
        "parentId" : null,
        "authorId" : "4a06afd6-a5c1-498b-b3af-653f5ce90c95",
        "body" : "Wouldn't it be enough to simply expand this and line 26 to be `TResult | undefined` (maybe `null` too?) ? At least 33 would not necessarily result in undefined, since it's not a falsy value. Then maybe this requires a bit more from the user but at least it shouldn't leave the user in a scenario where things break.",
        "createdAt" : "2020-03-30T19:50:29Z",
        "updatedAt" : "2020-03-30T22:18:15Z",
        "lastEditedBy" : "4a06afd6-a5c1-498b-b3af-653f5ce90c95",
        "tags" : [
        ]
      },
      {
        "id" : "750ed9f2-ebef-419b-992a-58c99bdf6d69",
        "parentId" : "8303aec8-480e-4a2d-b1dd-bd8a79546fd3",
        "authorId" : "4a06afd6-a5c1-498b-b3af-653f5ce90c95",
        "body" : "Oh nevermind, this is not enough. :disappointed:",
        "createdAt" : "2020-03-30T19:56:32Z",
        "updatedAt" : "2020-03-30T22:18:15Z",
        "lastEditedBy" : "4a06afd6-a5c1-498b-b3af-653f5ce90c95",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa6c5841195e3b80ddf7a1275b341dd748adca69",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +38,42 @@): QueryResult<TResult>;\n\nexport function useQuery<TResult, TKey extends AnyQueryKey, TVariables extends AnyVariables = []>({\n    queryKey,\n    variables,"
  },
  {
    "id" : "20f84345-f09d-40fe-a58b-233bda38562b",
    "prId" : 43438,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43438#pullrequestreview-385320603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b980f69f-d38c-4fd8-86af-ce87c7539e2c",
        "parentId" : null,
        "authorId" : "944f0177-c4a7-46ed-9130-1e5ed229c169",
        "body" : "Hi @Igorbek \r\nThanks for all the work you've done.\r\nShould we include/allow `string` queryKeys here? The library seems to [allow it](https://github.com/tannerlinsley/react-query#string-only-query-keys)",
        "createdAt" : "2020-04-01T07:04:14Z",
        "updatedAt" : "2020-04-01T07:04:14Z",
        "lastEditedBy" : "944f0177-c4a7-46ed-9130-1e5ed229c169",
        "tags" : [
        ]
      },
      {
        "id" : "a46e2c73-1dec-4f7b-8b43-a0339dd395ff",
        "parentId" : "b980f69f-d38c-4fd8-86af-ce87c7539e2c",
        "authorId" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "body" : "You're welcome.\r\nIt is allowed, but not in the query function (the one that fetches data), it is allowed in `useQuery` and friends. Query functions, on the other hand, always accept the keys as set of arguments, no matter is that single string or an array.",
        "createdAt" : "2020-04-01T07:17:51Z",
        "updatedAt" : "2020-04-01T07:17:52Z",
        "lastEditedBy" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa6c5841195e3b80ddf7a1275b341dd748adca69",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +137,141 @@export type AnyVariables = readonly [] | readonly [any, ...any[]]; // this forces the variables to be inferred as a tuple\n\nexport type QueryFunction<TResult, TKey extends AnyQueryKey> = (...key: TKey) => Promise<TResult>;\nexport type QueryFunctionWithVariables<TResult, TKey extends AnyQueryKey, TVariables extends AnyVariables> = (\n    ...key: _.List.Concat<TKey, TVariables>"
  },
  {
    "id" : "aa0ae861-da5a-4204-bbf3-1b2a7696e6ce",
    "prId" : 43438,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43438#pullrequestreview-386113089",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ead5944-c506-4b73-9b93-7cd4f0ab98d5",
        "parentId" : null,
        "authorId" : "944f0177-c4a7-46ed-9130-1e5ed229c169",
        "body" : "I meant to comment 👆",
        "createdAt" : "2020-04-01T07:07:58Z",
        "updatedAt" : "2020-04-01T07:26:30Z",
        "lastEditedBy" : "944f0177-c4a7-46ed-9130-1e5ed229c169",
        "tags" : [
        ]
      },
      {
        "id" : "3c8771ba-2141-4b0d-ab19-709442db6db8",
        "parentId" : "9ead5944-c506-4b73-9b93-7cd4f0ab98d5",
        "authorId" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "body" : "ah, ok, it might be a valid concern.\r\nIt has to be a different overload though. Because in this case, we have to infer the type of the key as `[T]` where `T extends string`. I will make an update soon.",
        "createdAt" : "2020-04-01T18:40:26Z",
        "updatedAt" : "2020-04-01T18:40:26Z",
        "lastEditedBy" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "tags" : [
        ]
      },
      {
        "id" : "9e6ea2e6-8b97-45b1-a0aa-ec123249f961",
        "parentId" : "9ead5944-c506-4b73-9b93-7cd4f0ab98d5",
        "authorId" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "body" : "addressed here #43568",
        "createdAt" : "2020-04-02T05:18:31Z",
        "updatedAt" : "2020-04-02T05:18:31Z",
        "lastEditedBy" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa6c5841195e3b80ddf7a1275b341dd748adca69",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +134,138 @@\nexport type QueryKeyPart = string | object | boolean | number | null | readonly QueryKeyPart[] | null | undefined;\nexport type AnyQueryKey = readonly [string, ...QueryKeyPart[]]; // this forces the key to be inferred as a tuple\nexport type AnyVariables = readonly [] | readonly [any, ...any[]]; // this forces the variables to be inferred as a tuple\n"
  }
]