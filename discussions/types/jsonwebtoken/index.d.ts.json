[
  {
    "id" : "e03d2e0f-25c1-4b11-af4c-431f83a70b4d",
    "prId" : 22068,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/22068#pullrequestreview-90950621",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e34f1f84-e70f-46d6-82fa-829a8d7c735b",
        "parentId" : null,
        "authorId" : "12d669e7-71ea-4328-9d11-c67c19345ed6",
        "body" : "Why change from `object`?",
        "createdAt" : "2017-12-23T02:52:59Z",
        "updatedAt" : "2017-12-23T02:52:59Z",
        "lastEditedBy" : "12d669e7-71ea-4328-9d11-c67c19345ed6",
        "tags" : [
        ]
      },
      {
        "id" : "b9bca5ea-1f16-4f49-a401-de761655b510",
        "parentId" : "e34f1f84-e70f-46d6-82fa-829a8d7c735b",
        "authorId" : "d593664c-4c7a-4d18-86b3-a8e47e2af3b5",
        "body" : "Using `object` is equivalent to `{}`, using `{ [key: string]: any }` describe the general shape of the object and so makes it less restrictive.",
        "createdAt" : "2017-12-28T08:39:06Z",
        "updatedAt" : "2017-12-28T08:39:06Z",
        "lastEditedBy" : "d593664c-4c7a-4d18-86b3-a8e47e2af3b5",
        "tags" : [
        ]
      },
      {
        "id" : "06d44b87-7cb0-42f6-a41e-f46919d1ab0b",
        "parentId" : "e34f1f84-e70f-46d6-82fa-829a8d7c735b",
        "authorId" : "1dafe895-0dee-4056-9e2a-aadb53c1825d",
        "body" : "> Using `object` is equivalent to `{}`, using `{ [key: string]: any }` describe the general shape of the object and so makes it less restrictive.\r\n  \r\nyou do not need the `| string` then.. it does match `{ [key: string]: any } `",
        "createdAt" : "2018-01-03T21:01:12Z",
        "updatedAt" : "2018-01-03T21:01:12Z",
        "lastEditedBy" : "1dafe895-0dee-4056-9e2a-aadb53c1825d",
        "tags" : [
        ]
      },
      {
        "id" : "83062198-3d3b-46b5-8978-957c4b33d1f3",
        "parentId" : "e34f1f84-e70f-46d6-82fa-829a8d7c735b",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "By less restrictive, you mean it's not type-checked? Can't you leave the declaration as `object` and cast it to the type you expect?",
        "createdAt" : "2018-01-23T19:27:03Z",
        "updatedAt" : "2018-01-23T19:27:14Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a94d4a3d434602d3fbc7d6b768bb9d535410d3b",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +167,171 @@    token: string,\n    options?: DecodeOptions,\n): null | { [key: string]: any } | string;"
  },
  {
    "id" : "8a999077-c9d9-47a8-ba12-70d8b969e68d",
    "prId" : 33587,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33587#pullrequestreview-210329152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e8e8c5c-2a03-4302-8a01-4aaaa43c70b9",
        "parentId" : null,
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "We should probably also mark this as `readonly`",
        "createdAt" : "2019-03-04T19:38:44Z",
        "updatedAt" : "2019-03-04T19:38:47Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f9e0fddedb7ec27aa6885cd382a8f7bdeb18c9a",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +19,23 @@\nexport class TokenExpiredError extends JsonWebTokenError {\n    expiredAt: Date;\n\n    constructor(message: string, expiredAt: Date);"
  },
  {
    "id" : "c5fb7554-415a-4c5b-b828-352e46e8396f",
    "prId" : 53435,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/53435#pullrequestreview-676452007",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1278cc29-76fe-475e-86aa-80daf16570cb",
        "parentId" : null,
        "authorId" : "ca977a94-3c41-449e-8103-87accb54a28f",
        "body" : "Perhaps an optional type argument could be considered too?\r\n```suggestion\r\nexport function decode<T = Jwt>(token: string, options: DecodeOptions & { json: true } | DecodeOpti\r\nexport function decode<T = JwtPayload>(token: string, options?: DecodeOptions): null | T | string;\r\n```",
        "createdAt" : "2021-05-27T10:21:52Z",
        "updatedAt" : "2021-05-27T10:21:52Z",
        "lastEditedBy" : "ca977a94-3c41-449e-8103-87accb54a28f",
        "tags" : [
        ]
      },
      {
        "id" : "dc3d3dc1-a2b5-4c2c-8219-aea0f2d2e2d9",
        "parentId" : "1278cc29-76fe-475e-86aa-80daf16570cb",
        "authorId" : "ca977a94-3c41-449e-8103-87accb54a28f",
        "body" : "or `extends` rather than `=`\r\nbut anyhow that would violate https://github.com/Microsoft/dtslint/blob/master/docs/no-unnecessary-generics.md :(",
        "createdAt" : "2021-06-04T12:49:03Z",
        "updatedAt" : "2021-06-04T12:49:03Z",
        "lastEditedBy" : "ca977a94-3c41-449e-8103-87accb54a28f",
        "tags" : [
        ]
      },
      {
        "id" : "5f9fcbb7-4e28-465a-913b-e4373da45bfc",
        "parentId" : "1278cc29-76fe-475e-86aa-80daf16570cb",
        "authorId" : "45d9c670-2241-42ab-8e9e-9388e528c740",
        "body" : "A type argument has come up before and shouldn't be added because of the following reason in the link you posted:\r\n\r\n> `getMeAT<T>(): T`:\r\nIf a type parameter does not appear in the types of any parameters, you don't really have a generic function, you just have a disguised type assertion.\r\nPrefer to use a real type assertion, e.g. `getMeAT() as number`.\r\nExample where a type parameter is acceptable: `function id<T>(value: T): T;`.\r\nExample where it is not acceptable: `function parseJson<T>(json: string): T;`.\r\nException: `new Map<string, number>()` is OK.\r\n\r\n\r\nThis is because otherwise you'll write code that assumes that all the tokens passed in are well formed which is bad since the tokens are usually passed from other systems or third parties...",
        "createdAt" : "2021-06-04T16:05:13Z",
        "updatedAt" : "2021-06-04T16:05:13Z",
        "lastEditedBy" : "45d9c670-2241-42ab-8e9e-9388e528c740",
        "tags" : [
        ]
      }
    ],
    "commit" : "85afc23c8360a479857db56d7c4a31e9695e544a",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +240,244 @@ */\nexport function decode(token: string, options: DecodeOptions & { json: true } | DecodeOptions & { complete: true }): null | Jwt;\nexport function decode(token: string, options?: DecodeOptions): null | JwtPayload | string;"
  }
]