[
  {
    "id" : "011b753d-2285-4690-bdfa-88651424dff8",
    "prId" : 35840,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/35840#pullrequestreview-247737280",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ebec649-6e11-4eac-9f7b-721dcb84755b",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "I'm probably missing something obvious, but why are there two overloads?  Why not just provide a default value for the type parameter of the first overload?",
        "createdAt" : "2019-06-05T00:52:24Z",
        "updatedAt" : "2019-06-05T00:52:24Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "145bec2b-fc95-43f5-bbbe-fa44592d480e",
        "parentId" : "3ebec649-6e11-4eac-9f7b-721dcb84755b",
        "authorId" : "c99f57c0-ee92-4826-aea2-764338846f03",
        "body" : "I think because then you could do\r\n\r\n```ts\r\ntraverse<StateType>(node, visitor)\r\n```\r\n\r\nIn the visitor functions, the type of `state` would appear to be `StateType` even though no state was provided. Ideally, it would error if you specified a type parameter and did not pass in any state.",
        "createdAt" : "2019-06-10T16:00:35Z",
        "updatedAt" : "2019-06-10T16:00:35Z",
        "lastEditedBy" : "c99f57c0-ee92-4826-aea2-764338846f03",
        "tags" : [
        ]
      },
      {
        "id" : "37d74c69-84ff-4ff1-b3f4-676bf7587d11",
        "parentId" : "3ebec649-6e11-4eac-9f7b-721dcb84755b",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "Ah, I missed the extra question mark in the second overload.  Thanks!",
        "createdAt" : "2019-06-10T17:22:36Z",
        "updatedAt" : "2019-06-10T17:22:36Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      }
    ],
    "commit" : "b881aaaa14222d1fd6c71beaef9dca7bf35991cb",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +12,16 @@export type Node = t.Node;\n\nexport default function traverse<S>(\n    parent: Node | Node[],\n    opts: TraverseOptions<S>,"
  }
]