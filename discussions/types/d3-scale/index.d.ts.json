[
  {
    "id" : "03c5d8ef-d1d5-4714-a581-eb7bb185fa53",
    "prId" : 48364,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/48364#pullrequestreview-500657272",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d67a7763-bb74-4549-aee7-682c975f6d74",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "I really thought I'd already left this comment...  Maybe there was a similar PR to a different package?\r\n\r\nAnyway, changing from a 2-tuple to an iterable seems like a downgrade - was this intentional?",
        "createdAt" : "2020-09-30T21:04:14Z",
        "updatedAt" : "2020-09-30T21:04:17Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "b958ffc5-18b4-41d9-9bef-29828464cc46",
        "parentId" : "d67a7763-bb74-4549-aee7-682c975f6d74",
        "authorId" : "6d447f9d-4946-46c6-8162-102e21d6a2ed",
        "body" : "I don't know how to avoid it. They now accept iterables and the code just takes the first two values from the iterable. Afaik there's no way to specify that in TypeScript, right?",
        "createdAt" : "2020-09-30T21:07:27Z",
        "updatedAt" : "2020-09-30T21:16:38Z",
        "lastEditedBy" : "6d447f9d-4946-46c6-8162-102e21d6a2ed",
        "tags" : [
        ]
      },
      {
        "id" : "5a607c4a-672b-4802-829d-b1b14c08fcba",
        "parentId" : "d67a7763-bb74-4549-aee7-682c975f6d74",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "Disappointing, but I can't think of an alternative either.",
        "createdAt" : "2020-10-01T19:33:03Z",
        "updatedAt" : "2020-10-01T19:33:04Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      }
    ],
    "commit" : "26e9a8be4d77a4e2a450663587af0b6ed7678449",
    "line" : 291,
    "diffHunk" : "@@ -1,1 +1288,1292 @@ */\nexport function scaleSequential<Output>(\n    domain: Iterable<NumberValue>,\n    interpolator: (t: number) => Output\n): ScaleSequential<Output>;"
  }
]