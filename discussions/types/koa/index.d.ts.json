[
  {
    "id" : "fc7c5b28-fb50-4b58-a880-485b3fb36a38",
    "prId" : 36016,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36016#pullrequestreview-249368900",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94f9fc2c-af3c-4220-8b45-c9a2a30e7409",
        "parentId" : null,
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "Is this necessary, or would you just augment `BaseContext` instead? It also seems like the purpose of `ParameterizedContext` is to add custom extensions to `BaseContext` (via `CustomT` and `Middleware`):\r\n\r\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/blob/9f59635899ed15815241c55bc795fe371393b469/types/koa/index.d.ts#L500-L502",
        "createdAt" : "2019-06-12T23:13:11Z",
        "updatedAt" : "2019-06-12T23:13:11Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      },
      {
        "id" : "1d3b3345-0dec-4433-8c93-5cff670edd9d",
        "parentId" : "94f9fc2c-af3c-4220-8b45-c9a2a30e7409",
        "authorId" : "c1641e4d-3d7a-4d7c-9750-631554b77a48",
        "body" : "I only want to add to `ctx`, but `BaseContext` will also add to `context`.",
        "createdAt" : "2019-06-13T14:01:44Z",
        "updatedAt" : "2019-06-13T14:01:45Z",
        "lastEditedBy" : "c1641e4d-3d7a-4d7c-9750-631554b77a48",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f59635899ed15815241c55bc795fe371393b469",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +687,691 @@    }\n\n    interface ExtendableContext extends BaseContext {\n        app: Application;\n        request: Request;"
  },
  {
    "id" : "78df4c23-6bff-48be-9d25-71287b4bfd05",
    "prId" : 42551,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/42551#pullrequestreview-363764547",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "584ad94c-cbe2-4e1d-8307-9c036885dc56",
        "parentId" : null,
        "authorId" : "29659952-8433-49c0-b154-ef50e837bd8b",
        "body" : "`callback` doesn't return a `Promise<void>`, if anything, it returns the `handleRequest` function, which then returns a `Promise<void>`\r\n\r\n---\r\n\r\n```\r\nWelcome to Node.js v12.3.1.\r\nType \".help\" for more information.\r\n> const Koa = require('koa')\r\nundefined\r\n> new Koa().callback()\r\n[Function: handleRequest]\r\n> \r\n```",
        "createdAt" : "2020-02-23T23:11:05Z",
        "updatedAt" : "2020-02-23T23:11:11Z",
        "lastEditedBy" : "29659952-8433-49c0-b154-ef50e837bd8b",
        "tags" : [
        ]
      },
      {
        "id" : "044e394d-d658-4ff3-9ea0-791dd7380c21",
        "parentId" : "584ad94c-cbe2-4e1d-8307-9c036885dc56",
        "authorId" : "aaa17825-d55b-4b56-adcd-d9abf5b5ba30",
        "body" : "Yes, that’s how I explained it and that’s how I typed it? `callback()` (not `callback`) is a method signature. It's a method (not a property) that returns a function type `(req, res) => Promise<void>`.",
        "createdAt" : "2020-02-24T08:36:35Z",
        "updatedAt" : "2020-02-24T12:08:52Z",
        "lastEditedBy" : "aaa17825-d55b-4b56-adcd-d9abf5b5ba30",
        "tags" : [
        ]
      },
      {
        "id" : "10b60e4e-bad2-4e8d-94af-0ff6d4ef7b19",
        "parentId" : "584ad94c-cbe2-4e1d-8307-9c036885dc56",
        "authorId" : "29659952-8433-49c0-b154-ef50e837bd8b",
        "body" : "ahh I see, my bad, sorry about that",
        "createdAt" : "2020-02-24T23:04:02Z",
        "updatedAt" : "2020-02-24T23:04:03Z",
        "lastEditedBy" : "29659952-8433-49c0-b154-ef50e837bd8b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9e6e3e6e2dec99ebf0f1c8d85a78556eab5836b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +514,518 @@     * for node's native http/http2 server.\n     */\n    callback(): (req: IncomingMessage | Http2ServerRequest, res: ServerResponse | Http2ServerResponse) => Promise<void>;\n\n    /**"
  },
  {
    "id" : "600fd7dc-6f02-454a-b46f-85756686158d",
    "prId" : 50249,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50249#pullrequestreview-557454905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "995881db-388a-4890-8511-45c0a1693f5a",
        "parentId" : null,
        "authorId" : "3b25cd4e-974d-48b3-ba06-60921618ebf6",
        "body" : "Not sure where `CustomT` was coming from, so I gave it a more descriptive name",
        "createdAt" : "2020-12-23T01:15:17Z",
        "updatedAt" : "2021-02-14T23:01:47Z",
        "lastEditedBy" : "3b25cd4e-974d-48b3-ba06-60921618ebf6",
        "tags" : [
        ]
      }
    ],
    "commit" : "26e68aa610a06bbad74e60a584aac09030b30567",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +443,447 @@declare class Application<\n    StateT = Application.DefaultState,\n    ContextT = Application.DefaultContext\n> extends EventEmitter {\n    proxy: boolean;"
  },
  {
    "id" : "44313ce0-3e4a-450e-b9be-f78cbdbf1083",
    "prId" : 50249,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50249#pullrequestreview-557455757",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9578e752-b77f-4218-af7b-a1909477c3a7",
        "parentId" : null,
        "authorId" : "3b25cd4e-974d-48b3-ba06-60921618ebf6",
        "body" : "This is the clue for the whole change. With only this small change, one could type the response like this:\r\n\r\n```js\r\ninterface MyControllerResponse {\r\n   ...\r\n}\r\n\r\nexport const myController: Middleware<DefaultState, { body: MyControllerResponse, response: { body: MyControllerResponse } }> = async (ctx) => {\r\n    ...\r\n}\r\n```\r\n\r\nIt was pretty long though, so I extended the Middleware type below...",
        "createdAt" : "2020-12-23T01:18:21Z",
        "updatedAt" : "2021-02-14T23:01:47Z",
        "lastEditedBy" : "3b25cd4e-974d-48b3-ba06-60921618ebf6",
        "tags" : [
        ]
      }
    ],
    "commit" : "26e68aa610a06bbad74e60a584aac09030b30567",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +318,322 @@     * Get/Set response body.\n     */\n    body: unknown;\n\n    /**"
  },
  {
    "id" : "ecb9c9ac-a21e-4f07-b9db-e93bcfffc76d",
    "prId" : 50249,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50249#pullrequestreview-574092908",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18f612eb-0aa9-4252-93cf-e9b99b5225ad",
        "parentId" : null,
        "authorId" : "29659952-8433-49c0-b154-ef50e837bd8b",
        "body" : "overriding these properties opens up the potential for being inconsistent, since these don't necessarily need to correlate with the existing reference to `body` and `response.body`.",
        "createdAt" : "2020-12-23T01:22:21Z",
        "updatedAt" : "2021-02-14T23:01:47Z",
        "lastEditedBy" : "29659952-8433-49c0-b154-ef50e837bd8b",
        "tags" : [
        ]
      },
      {
        "id" : "a6879796-ad3f-4df3-9720-0063d532858b",
        "parentId" : "18f612eb-0aa9-4252-93cf-e9b99b5225ad",
        "authorId" : "3b25cd4e-974d-48b3-ba06-60921618ebf6",
        "body" : "There is a chance a middleware could modify the body, that's true, yet one could provide a type for what body could be populated before with... It's optional for the developer to define strict type here...",
        "createdAt" : "2020-12-23T01:40:35Z",
        "updatedAt" : "2021-02-14T23:01:47Z",
        "lastEditedBy" : "3b25cd4e-974d-48b3-ba06-60921618ebf6",
        "tags" : [
        ]
      },
      {
        "id" : "344c93e6-6882-4845-b35c-118aeabcd86c",
        "parentId" : "18f612eb-0aa9-4252-93cf-e9b99b5225ad",
        "authorId" : "29659952-8433-49c0-b154-ef50e837bd8b",
        "body" : "I still don't find this to be appropriate to exist within this types package, as far as Koa is concerned, the response body can and should still be any.\r\n\r\nThis type enforcement can be handled within your application by extending the Koa types already",
        "createdAt" : "2021-01-22T04:06:06Z",
        "updatedAt" : "2021-02-14T23:01:47Z",
        "lastEditedBy" : "29659952-8433-49c0-b154-ef50e837bd8b",
        "tags" : [
        ]
      },
      {
        "id" : "bc48a7a0-b1cb-4b5c-a5bf-ce8656c30d23",
        "parentId" : "18f612eb-0aa9-4252-93cf-e9b99b5225ad",
        "authorId" : "3b25cd4e-974d-48b3-ba06-60921618ebf6",
        "body" : "That's correct. And so far with this PR it's still `any` by default, but allows developer to provide more specific type if he wants. Check line [537](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50249/files#diff-bb94074d9ae1164d531dd6eb17a8858f06f4129662469a7d5e1dd19cb5eed86cR537)\r\n\r\n```\r\ntype Middleware<StateT = DefaultState, ContextT = DefaultContext, ResponseBodyT = any> = compose.Middleware<\r\n```\r\n\r\nWith this set-up I would be able to define my middleware as:\r\n\r\n```\r\ninterface MyMiddlewareResponse {\r\n  prop: string\r\n}\r\n\r\nexport const myMiddleware: Middleware<{}, {}, MyMiddlewareResponse> = (ctx, next) => { ... }\r\n```\r\n\r\nSimilarly like you can provide a more specific type for state and context. Is there anything wrong with it? I don't think so. Please tell me exactly what it would be? If you don't specify the third param for the `Middleware` it will be `any` by default, so this PR does not change current behaviour at all.\r\n\r\nIf there is another way to achieve the example I have shown above, meaning easily provide a type for response body, please could you provide an example?\r\n\r\nThank you in advance for your time :)",
        "createdAt" : "2021-01-22T09:36:58Z",
        "updatedAt" : "2021-02-14T23:01:47Z",
        "lastEditedBy" : "3b25cd4e-974d-48b3-ba06-60921618ebf6",
        "tags" : [
        ]
      }
    ],
    "commit" : "26e68aa610a06bbad74e60a584aac09030b30567",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +718,722 @@        & { state: StateT; }\n        & ContextT\n        & { body: ResponseBodyT; response: { body: ResponseBodyT }; };\n\n    interface Context extends ParameterizedContext {}"
  },
  {
    "id" : "e73fd4a9-9304-4c31-8b24-4520faee47dc",
    "prId" : 53386,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/53386#pullrequestreview-668551619",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0799edbb-311e-4a79-addc-ae55989d1a5e",
        "parentId" : null,
        "authorId" : "3b25cd4e-974d-48b3-ba06-60921618ebf6",
        "body" : "Koa offers some nice jsdoc https://github.com/koajs/koa/blob/master/lib/application.js#L39\r\n\r\nMaybe it's worth adding it here too?",
        "createdAt" : "2021-05-25T22:12:25Z",
        "updatedAt" : "2021-05-25T22:12:26Z",
        "lastEditedBy" : "3b25cd4e-974d-48b3-ba06-60921618ebf6",
        "tags" : [
        ]
      },
      {
        "id" : "bf9a451f-2fd9-4170-992d-0cff5bd5c0b7",
        "parentId" : "0799edbb-311e-4a79-addc-ae55989d1a5e",
        "authorId" : "7be5f6ac-9ef9-421b-9361-982c52078c31",
        "body" : "Year, I add it together",
        "createdAt" : "2021-05-26T02:43:27Z",
        "updatedAt" : "2021-05-26T02:43:27Z",
        "lastEditedBy" : "7be5f6ac-9ef9-421b-9361-982c52078c31",
        "tags" : [
        ]
      }
    ],
    "commit" : "2fdc67a9c515b6383079f903601c7d17c74da539",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +469,473 @@     *\n     */\n    constructor(options?: {\n        env?: string,\n        keys?: string[],"
  }
]