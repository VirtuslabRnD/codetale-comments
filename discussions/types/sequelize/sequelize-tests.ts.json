[
  {
    "id" : "a013946c-02c0-4e6d-b53b-fcd680889930",
    "prId" : 19962,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19962#pullrequestreview-64622552",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfbef266-e472-4ca6-aaf1-b7c1d3702fcb",
        "parentId" : null,
        "authorId" : "9a9fe0e4-7a6d-42e8-af3d-b2441eb882c3",
        "body" : "This was needed for the compile error to surface",
        "createdAt" : "2017-09-22T15:56:12Z",
        "updatedAt" : "2017-09-22T15:56:12Z",
        "lastEditedBy" : "9a9fe0e4-7a6d-42e8-af3d-b2441eb882c3",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fc0c02875391f62411e0af36d4e4cf28e4c4b87",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +8,12 @@//\n\ninterface AnyAttributes { [name: string]: boolean | number | string | object; };\ninterface AnyInstance extends Sequelize.Instance<AnyAttributes> { };\n"
  },
  {
    "id" : "1ec21580-f2bd-461f-9c3c-fa3409697b83",
    "prId" : 22965,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/22965#pullrequestreview-89142387",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "985fe564-89ec-4472-bc22-f1b8554496c2",
        "parentId" : null,
        "authorId" : "ba8dc389-3028-4e21-be32-5adad70aacf8",
        "body" : "Can you test your new `removeColumn` implementation either, please?",
        "createdAt" : "2018-01-16T15:37:01Z",
        "updatedAt" : "2018-01-16T15:51:30Z",
        "lastEditedBy" : "ba8dc389-3028-4e21-be32-5adad70aacf8",
        "tags" : [
        ]
      },
      {
        "id" : "3582f8f6-5640-4189-bb27-0b7576923825",
        "parentId" : "985fe564-89ec-4472-bc22-f1b8554496c2",
        "authorId" : "044a051e-c666-44ed-9033-6a6593dada07",
        "body" : "Yeah of course.",
        "createdAt" : "2018-01-16T15:45:52Z",
        "updatedAt" : "2018-01-16T15:51:30Z",
        "lastEditedBy" : "044a051e-c666-44ed-9033-6a6593dada07",
        "tags" : [
        ]
      }
    ],
    "commit" : "99801334d187b676fead5b49c9e0705c7f0d04cd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1146,1150 @@queryInterface.addColumn( 'users', 'so', { type : Sequelize.ENUM, values : ['value1', 'value2', 'value3'] } );\nqueryInterface.addColumn({tableName:'users', schema:'test'}, 'enum',{ type : Sequelize.ENUM, values : ['value1', 'value2', 'value3'] });\nqueryInterface.removeColumn('users','so');\nqueryInterface.removeColumn({tableName:'users', schema:'test'},'enum');\nqueryInterface.createTable( 'hosts', {"
  },
  {
    "id" : "6bd70585-8bdc-441f-aa65-4230219bd0e1",
    "prId" : 25240,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/25240#pullrequestreview-114867652",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0590586-f5d7-4eb7-9539-bc44ab841a3c",
        "parentId" : null,
        "authorId" : "ba8dc389-3028-4e21-be32-5adad70aacf8",
        "body" : "The return type `Bluebird<boolean>` should not pass the test if the function does not return anything.",
        "createdAt" : "2018-04-24T15:15:01Z",
        "updatedAt" : "2018-04-24T15:15:05Z",
        "lastEditedBy" : "ba8dc389-3028-4e21-be32-5adad70aacf8",
        "tags" : [
        ]
      },
      {
        "id" : "ead30b36-49df-49f5-95ea-94941bf091ec",
        "parentId" : "c0590586-f5d7-4eb7-9539-bc44ab841a3c",
        "authorId" : "3502ef29-40dc-47a3-80e9-4f6b08bfef3a",
        "body" : "@oktapodia im not sure what you mean here, as per the sequelize docs, `upsert` returns a Promise<boolean> _unless_ the `returning` option is true, then it returns a Promise<Model, created>.\r\n\r\nSee http://docs.sequelizejs.com/class/lib/model.js~Model.html#static-method-upsert\r\n\r\nIt might be the name of the value being defined here `upsertPromiseWithNonReturningOptions` that is confusing?  It is intended to communicate that the options passed did not include a `returning` option.  Is that the issue? If so, do you have a suggestion for a name?",
        "createdAt" : "2018-04-24T16:27:09Z",
        "updatedAt" : "2018-04-24T16:27:09Z",
        "lastEditedBy" : "3502ef29-40dc-47a3-80e9-4f6b08bfef3a",
        "tags" : [
        ]
      },
      {
        "id" : "debc2c90-353e-4f01-9aeb-bf4ef4df49e8",
        "parentId" : "c0590586-f5d7-4eb7-9539-bc44ab841a3c",
        "authorId" : "ba8dc389-3028-4e21-be32-5adad70aacf8",
        "body" : "my bad sorry!",
        "createdAt" : "2018-04-24T16:33:16Z",
        "updatedAt" : "2018-04-24T16:33:16Z",
        "lastEditedBy" : "ba8dc389-3028-4e21-be32-5adad70aacf8",
        "tags" : [
        ]
      }
    ],
    "commit" : "89891d4a4569388063454cb124b56d73ca206270",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1056,1060 @@\nlet upsertPromiseNoOptions: Bluebird<boolean> = User.upsert( { id : 42, username : 'doe', foo : s.fn( 'upper', 'mixedCase2' ) } );\nlet upsertPromiseWithNonReturningOptions: Bluebird<boolean> = User.upsert( { id : 42, username : 'doe', foo : s.fn( 'upper', 'mixedCase2' ) }, { logging: true } );\nlet upsertPromiseReturning: Bluebird<[AnyInstance, boolean]> = User.upsert( { id : 42, username : 'doe', foo : s.fn( 'upper', 'mixedCase2' ) }, { returning: true } );\nlet upsertPromiseNotReturning: Bluebird<boolean> = User.upsert( { id : 42, username : 'doe', foo : s.fn( 'upper', 'mixedCase2' ) }, { returning: false } );"
  }
]