[
  {
    "id" : "44714075-b780-4145-b793-1f139c2a8e7a",
    "prId" : 15721,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/15721#pullrequestreview-31689776",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85eef849-4a8f-4211-be99-ec2ed101f084",
        "parentId" : null,
        "authorId" : "405feade-830e-4951-b18e-783f39760468",
        "body" : "@fabiob Thanks for following the existing style.",
        "createdAt" : "2017-04-08T01:20:37Z",
        "updatedAt" : "2017-04-08T01:20:37Z",
        "lastEditedBy" : "405feade-830e-4951-b18e-783f39760468",
        "tags" : [
        ]
      }
    ],
    "commit" : "16be2fcb11a0571d30bbf68b6649ef14e007d0c0",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +2026,2030 @@        * http://mongoosejs.com/docs/api.html#schema-decimal128-js\n        */\n      class Decimal128 extends SchemaType {\n        /** Decimal128 SchemaType constructor. */\n        constructor(key: string, options?: Object);"
  },
  {
    "id" : "525b5757-5cb2-48d5-920a-db0ca003eacb",
    "prId" : 19954,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19954#pullrequestreview-64701222",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60df5acf-2ba7-40b6-9427-56e5a19d6b23",
        "parentId" : null,
        "authorId" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "body" : "Please do not use optional parameters in callbacks as discussed [here](http://www.typescriptlang.org/docs/handbook/declaration-files/do-s-and-don-ts.html).",
        "createdAt" : "2017-09-22T17:12:12Z",
        "updatedAt" : "2017-09-22T17:12:17Z",
        "lastEditedBy" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "tags" : [
        ]
      },
      {
        "id" : "71eab57a-d5e1-441b-bf3d-dfaec71b7dde",
        "parentId" : "60df5acf-2ba7-40b6-9427-56e5a19d6b23",
        "authorId" : "34c723ed-2048-4496-add6-ed8bc96fd1cc",
        "body" : "Please correct me if I am wrong - but I think this is not applicable in this case.\r\n\r\nYou *definitely can* call the done()-callback without supplying a error parameter (signaling that everything was OK). It is exactly the special case mentioned in the docs: done() might be invoked with one or zero arguments.\r\n\r\nThe done()-callback is not even provided by the user but the framework itself.",
        "createdAt" : "2017-09-22T19:51:04Z",
        "updatedAt" : "2017-09-22T19:51:04Z",
        "lastEditedBy" : "34c723ed-2048-4496-add6-ed8bc96fd1cc",
        "tags" : [
        ]
      },
      {
        "id" : "2bd350f4-9e66-4ea2-8eb1-ea6fdc493771",
        "parentId" : "60df5acf-2ba7-40b6-9427-56e5a19d6b23",
        "authorId" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "body" : "You're correct, I missed the extra level of parameter nesting. Sorry for the confusion.",
        "createdAt" : "2017-09-22T21:14:32Z",
        "updatedAt" : "2017-09-22T21:14:32Z",
        "lastEditedBy" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e30f58fda54d3f29accbc38ca96600504f690031",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +629,633 @@     * Defines a pre hook for the document.\n     */\n    pre(method: string, parallel: boolean, fn: (next: (err?: NativeError) => void, done: (err?: NativeError) => void) => void,\n      errorCb?: (err: Error) => void): this;\n    pre(method: string, fn: (next: (err?: NativeError) => void) => void,"
  }
]