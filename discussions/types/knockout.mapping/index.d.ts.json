[
  {
    "id" : "e3ee6139-45dd-4ba6-9f44-bb78c301de8c",
    "prId" : 35343,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/35343#pullrequestreview-237631879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76ade0c4-94c1-4b1b-9c53-eb5f37a2f688",
        "parentId" : null,
        "authorId" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "body" : "Agree. It must be possible to use conditional types here. Do you want to try them?",
        "createdAt" : "2019-05-15T06:40:55Z",
        "updatedAt" : "2019-05-15T06:43:13Z",
        "lastEditedBy" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "tags" : [
        ]
      }
    ],
    "commit" : "98f643607941f171aa50b69e8cb5fdee8ae626db",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +16,20 @@\ndeclare global {\n    // the idea behind this is good, but doesn't work as intended. This will make object properties T | Observable<T>, \n    //and you will have to put the correct Type in each property to use them, what defeats the purpose. Besides, this gives  \n    //RangeError: Maximum call stack size exceeded in TSC when used in all the mapping signatures. Maybe this can be used with TS 2.8 and conditional typing"
  },
  {
    "id" : "4f6cc32e-ff98-41ef-8084-5de0326897ba",
    "prId" : 36025,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36025#pullrequestreview-274394353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59bdc6fc-0cd6-4242-b114-b983c9c1a44f",
        "parentId" : null,
        "authorId" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "body" : "I would suggest to have redirection of types and leave old version for compatibility.\r\nAs I know most users of ko is considering it legacy code with older ts.\r\nSo we should be careful with uplifting ts requirements.",
        "createdAt" : "2019-06-25T17:42:24Z",
        "updatedAt" : "2019-07-21T23:23:35Z",
        "lastEditedBy" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "tags" : [
        ]
      },
      {
        "id" : "5797e6be-e1e7-470f-bc66-52c350d1867d",
        "parentId" : "59bdc6fc-0cd6-4242-b114-b983c9c1a44f",
        "authorId" : "ff309f72-b4c0-4c56-8d02-6bf0ff0b7104",
        "body" : "I don't know what you mean by: \"redirection of types\".\r\n\r\nI thought long and hard about upping the TS version, but the only way for this typing to work is with version 2.8. \r\n\r\nIt's my understanding that when someone needs and older version of a typing, he needs to check the git history and get the version that satisfy he's needs.\r\n\r\nThere is also a way to command to npm to download a specific version of the typings correlated with the TS version using `npm install @types/knockout.mapping@ts2.2`\r\nAlthough I know this command is not popular.\r\n\r\n[Examples of versions from the  \"versions\" in npm site:](https://www.npmjs.com/package/@types/knockout.mapping). \r\n![image](https://user-images.githubusercontent.com/898124/60127481-af004680-9766-11e9-8875-305ca603ea6c.png)\r\n\r\n\r\n\r\nI don't think it's a good idea to limit development and usage of new features, because the userbase is using older versions. :disappointed:\r\n\r\n",
        "createdAt" : "2019-06-25T19:31:35Z",
        "updatedAt" : "2019-07-21T23:23:35Z",
        "lastEditedBy" : "ff309f72-b4c0-4c56-8d02-6bf0ff0b7104",
        "tags" : [
        ]
      },
      {
        "id" : "5b0a6fed-79c7-402f-8d3e-238224dbf176",
        "parentId" : "59bdc6fc-0cd6-4242-b114-b983c9c1a44f",
        "authorId" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "body" : "I'm sorry, I should've been clearer. I mean this types redirection: https://github.com/microsoft/TypeScript/wiki/What%27s-new-in-TypeScript#version-selection-with-typesversions\r\n\r\nSo it allows to have types for lower versions of TS as well as newer versions, in the same package.",
        "createdAt" : "2019-06-26T00:27:16Z",
        "updatedAt" : "2019-07-21T23:23:35Z",
        "lastEditedBy" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "tags" : [
        ]
      },
      {
        "id" : "8b33fd47-95ac-4796-92ea-0a2773da21db",
        "parentId" : "59bdc6fc-0cd6-4242-b114-b983c9c1a44f",
        "authorId" : "ff309f72-b4c0-4c56-8d02-6bf0ff0b7104",
        "body" : "The problem I see is that it only works in TS 3.1 or above. So people with TS 2.8 thru 3.0 would be getting the older knockout.mapping file. Basically the version present in the PR will only be available to TS 3.1 users or above. \r\n\r\nI guess this is acceptable, but I really believe this is not the way to do it.\r\n\r\nMy reasoning:\r\n1) If the project doesn't use a package delivery system, the dev already included the `.d.ts` file in it's project repository, so this PR has no harm for the legacy project and it's developer.\r\n2) If the project uses Nuget, again, this changes won't affect him. He is stuck to the typings version in his projects.\r\n3) If the project uses NPM, with a specific version set, again, this changes won't affect him. He is stuck to the typings version in his projects.\r\n4) If the project uses NPM, without any version established, then this is the devs fault / decision to use the latest version and deal with the consequences. \r\n\r\nSo my conclusion is that this won't really harm anyone already using knockout.mapping. \r\nSomeone that will start to use now, will be actively developing on a legacy code... so It won't really be legacy, will it? That person would be more than better off upping the TSC version. But again he is not required, he can just set a specific version in NPM packages.json and be happy.\r\n",
        "createdAt" : "2019-06-28T12:54:18Z",
        "updatedAt" : "2019-07-21T23:23:35Z",
        "lastEditedBy" : "ff309f72-b4c0-4c56-8d02-6bf0ff0b7104",
        "tags" : [
        ]
      },
      {
        "id" : "81075200-486e-43eb-94ba-37ed46b11bab",
        "parentId" : "59bdc6fc-0cd6-4242-b114-b983c9c1a44f",
        "authorId" : "ff309f72-b4c0-4c56-8d02-6bf0ff0b7104",
        "body" : "Hey @Igorbek , the bot wrongly things there has been no activity on this PR and will close it tomorrow. Can you put a hold on it?",
        "createdAt" : "2019-07-01T23:04:13Z",
        "updatedAt" : "2019-07-21T23:23:35Z",
        "lastEditedBy" : "ff309f72-b4c0-4c56-8d02-6bf0ff0b7104",
        "tags" : [
        ]
      },
      {
        "id" : "2229a67a-d607-4a75-a0aa-cc0ee0d93aac",
        "parentId" : "59bdc6fc-0cd6-4242-b114-b983c9c1a44f",
        "authorId" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "body" : "@ltlombardi I think it should be quite easy to follow suggesting described here: https://github.com/DefinitelyTyped/DefinitelyTyped#i-want-to-use-features-from-typescript-31-or-above\r\n\r\nI still think that there're projects that use older versions of TS and wouldn't upgrade.\r\nHowever, I don't think I can prevent from upgrading to new TS now, and if any update for older version is required in the future, we can make a new redirection folder.",
        "createdAt" : "2019-08-13T16:08:29Z",
        "updatedAt" : "2019-08-13T16:08:39Z",
        "lastEditedBy" : "1e1dcea1-00d3-4083-8360-099f29168ec2",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd06f2c4895275ea671f35c16696d256af6a0409",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +5,9 @@//                 Leonardo Lombardi <https://github.com/ltlombardi>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.8\n\n/// <reference types=\"knockout\" />"
  },
  {
    "id" : "be5ce220-4add-4c6e-b6f8-f2943502cd22",
    "prId" : 36025,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36025#pullrequestreview-264556431",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bf10a64-1c1a-4e26-b0ad-38f1f6cfc3ac",
        "parentId" : null,
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "What happens here if `T[P]` is a `ReadonlyArray<any>` ?",
        "createdAt" : "2019-07-15T19:12:29Z",
        "updatedAt" : "2019-07-21T23:23:35Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      },
      {
        "id" : "1949e134-3a46-4306-9537-a031110e4791",
        "parentId" : "1bf10a64-1c1a-4e26-b0ad-38f1f6cfc3ac",
        "authorId" : "ff309f72-b4c0-4c56-8d02-6bf0ff0b7104",
        "body" : "Added support for this scenario. Will return KnockoutReadonlyObservableArrayType.",
        "createdAt" : "2019-07-21T22:04:08Z",
        "updatedAt" : "2019-07-21T23:23:35Z",
        "lastEditedBy" : "ff309f72-b4c0-4c56-8d02-6bf0ff0b7104",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd06f2c4895275ea671f35c16696d256af6a0409",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +25,29 @@    type KnockoutObservableType<T> = {\n        [P in keyof T]: T[P] extends Primitives ? KnockoutObservable<T[P]> :\n                        T[P] extends any[] ? KnockoutObservableArrayType<T[P][number]> :\n                        T[P] extends ReadonlyArray<any> ? KnockoutReadonlyObservableArrayType<T[P][number]> :\n                        MappedType<T[P]>;"
  }
]