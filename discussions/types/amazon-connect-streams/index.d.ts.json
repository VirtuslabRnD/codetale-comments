[
  {
    "id" : "d0720317-721b-4825-abca-ba25059fc142",
    "prId" : 35752,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/35752#pullrequestreview-244419515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efd3ba8c-7ca0-4fca-b05a-3f1b54f62684",
        "parentId" : null,
        "authorId" : "e30eb346-917e-4cfa-b6d7-7688bc735d2e",
        "body" : "There is already definition at https://github.com/aws/amazon-connect-streams/blob/master/src/index.d.ts\r\nSince this is shipping with definition, I don't think you need them here.",
        "createdAt" : "2019-05-28T22:57:19Z",
        "updatedAt" : "2019-05-29T13:01:43Z",
        "lastEditedBy" : "e30eb346-917e-4cfa-b6d7-7688bc735d2e",
        "tags" : [
        ]
      },
      {
        "id" : "1b3450a6-b120-442c-99ba-9d72aec0383c",
        "parentId" : "efd3ba8c-7ca0-4fca-b05a-3f1b54f62684",
        "authorId" : "a4779e52-eec0-491c-ad43-f586286c9ce1",
        "body" : "There isn't an NPM package for this library yet; I'm the author of that definition (used my work account) and have added it to DT in order to make it easier for developers ",
        "createdAt" : "2019-05-28T23:42:05Z",
        "updatedAt" : "2019-05-29T13:01:43Z",
        "lastEditedBy" : "a4779e52-eec0-491c-ad43-f586286c9ce1",
        "tags" : [
        ]
      },
      {
        "id" : "2cfbb501-e396-4042-b46d-c5580c223e3c",
        "parentId" : "efd3ba8c-7ca0-4fca-b05a-3f1b54f62684",
        "authorId" : "e30eb346-917e-4cfa-b6d7-7688bc735d2e",
        "body" : "Since the definitions are available where the source is, I don't think we need definitions on DT. https://github.com/aws/amazon-connect-streams#downloading-streams shows the steps to get the js files, .d.ts file should be available along with that?",
        "createdAt" : "2019-05-30T18:22:09Z",
        "updatedAt" : "2019-05-30T18:22:09Z",
        "lastEditedBy" : "e30eb346-917e-4cfa-b6d7-7688bc735d2e",
        "tags" : [
        ]
      },
      {
        "id" : "a20cd56a-70f8-418a-ae3a-9f0d0965cdb6",
        "parentId" : "efd3ba8c-7ca0-4fca-b05a-3f1b54f62684",
        "authorId" : "a4779e52-eec0-491c-ad43-f586286c9ce1",
        "body" : "My chief concern is that, since we do not yet publish amazon-connect-streams as an NPM package, there are a couple of manual steps the developer would need to perform to modify their tsconfig to import the .d.ts file. Using the already-idiomatic @types scope simplifies the developer experience and is already a familiar process for developers using external JS libraries.\r\n \r\nOnce we start publishing ACS to NPM, we would, of course, remove the DT package.\r\n \r\nThanks again!",
        "createdAt" : "2019-05-30T21:39:36Z",
        "updatedAt" : "2019-05-30T21:39:37Z",
        "lastEditedBy" : "a4779e52-eec0-491c-ad43-f586286c9ce1",
        "tags" : [
        ]
      },
      {
        "id" : "58197217-5d27-4266-9240-bbf7dabf53d5",
        "parentId" : "efd3ba8c-7ca0-4fca-b05a-3f1b54f62684",
        "authorId" : "e30eb346-917e-4cfa-b6d7-7688bc735d2e",
        "body" : "Adding @RyanCavanaugh and @sandersn for their opinion on hosting the types while they are still available elsewhere.",
        "createdAt" : "2019-05-31T00:19:08Z",
        "updatedAt" : "2019-05-31T00:19:08Z",
        "lastEditedBy" : "e30eb346-917e-4cfa-b6d7-7688bc735d2e",
        "tags" : [
        ]
      },
      {
        "id" : "ede60f13-cd0a-438d-82b1-2aff306c0d4c",
        "parentId" : "efd3ba8c-7ca0-4fca-b05a-3f1b54f62684",
        "authorId" : "a4779e52-eec0-491c-ad43-f586286c9ce1",
        "body" : "I should add; if having the types in the ACS GH repo is the issue, I could certainly remove them (I'd prefer *not* to, of course, but I'm willing to be persuaded otherwise!). I'm just trying to provide developers with a simple/easy way to code against ACS with Typescript while I drum up support for an official NPM package.",
        "createdAt" : "2019-05-31T13:28:00Z",
        "updatedAt" : "2019-05-31T13:28:00Z",
        "lastEditedBy" : "a4779e52-eec0-491c-ad43-f586286c9ce1",
        "tags" : [
        ]
      },
      {
        "id" : "fb5f9739-4919-4d5e-9865-5b5a0a178919",
        "parentId" : "efd3ba8c-7ca0-4fca-b05a-3f1b54f62684",
        "authorId" : "e30eb346-917e-4cfa-b6d7-7688bc735d2e",
        "body" : "@andyhop making typings available easily seems to make sense. We see that your steps for install are to clone the repro, build and then copy js. Why not copy `.d.ts` as well next to the .js file? When the package is ready to ship, you can add `typings` field to package json pointing to the `.d.ts`",
        "createdAt" : "2019-05-31T16:08:06Z",
        "updatedAt" : "2019-05-31T16:08:06Z",
        "lastEditedBy" : "e30eb346-917e-4cfa-b6d7-7688bc735d2e",
        "tags" : [
        ]
      },
      {
        "id" : "66e47c67-3c6d-44dc-89f8-dec9b5df2f53",
        "parentId" : "efd3ba8c-7ca0-4fca-b05a-3f1b54f62684",
        "authorId" : "a4779e52-eec0-491c-ad43-f586286c9ce1",
        "body" : "My concern there is that this becomes an additional step the developer needs to perform (modifying the tsconfig file to add the types). Most TS developers are familiar with the default behavior (to wit: including node_modules/@types), but once you start hacking the types property the developer must explicitly include that as well as the other types.\r\n\r\nI certainly could work around this by instructing the developer to manually create a @types/amazon-connect-streams sub-folder, but I feel like that's an abuse.\r\n\r\nIt sounds like we're over-indexing on the fact that I included the types in the JS repo (which is officially only the JS library). I'll work with that team to address the fact that it's not published to NPM, but in the meantime, I really would like to keep the number of manual steps they need to perform to a minimum. I'm currently unhappy with the fact that users have to run a makefile to create the .js file for the library (again, working with the team to resolve that), and I'd be even unhappier with them having to know how to tweak up their tsconfig file (speaking from experience: the less you touch that file, the better).\r\n\r\nWould deleting the index.d.ts file from the amazon-connect-streams repo resolve this to everyone's satisfaction?",
        "createdAt" : "2019-05-31T16:39:28Z",
        "updatedAt" : "2019-05-31T16:39:28Z",
        "lastEditedBy" : "a4779e52-eec0-491c-ad43-f586286c9ce1",
        "tags" : [
        ]
      },
      {
        "id" : "83cb6a91-e8f4-4240-ae35-63698a5e8ae9",
        "parentId" : "efd3ba8c-7ca0-4fca-b05a-3f1b54f62684",
        "authorId" : "e30eb346-917e-4cfa-b6d7-7688bc735d2e",
        "body" : "I think the main concern is that we don't understand the extra step you are talking about. Why is copying the .d.ts file next to `.js` file while you are copying it difficult compared to installing types package?",
        "createdAt" : "2019-05-31T16:46:07Z",
        "updatedAt" : "2019-05-31T16:46:07Z",
        "lastEditedBy" : "e30eb346-917e-4cfa-b6d7-7688bc735d2e",
        "tags" : [
        ]
      },
      {
        "id" : "95b2c1e5-a1b8-48f3-82df-5fac043b4c1e",
        "parentId" : "efd3ba8c-7ca0-4fca-b05a-3f1b54f62684",
        "authorId" : "a4779e52-eec0-491c-ad43-f586286c9ce1",
        "body" : "Because if the developer is working with something like React or Angular, the location of the external javascript libraries is not typically under the project folder created by \"ng new\" or \"create-react-app\" and will therefore require modifying the tsconfig file to pull that file in. Performing an \"npm i @types/xxx\" is something I can expect most TS developers to be familiar with.\r\n\r\n(edit: I should qualify the above - in cases where the app IS the site, you're absolutely right. However, there are many cases where the angular/react app is added to an existing site/app that has its own js folder, and that's the scenario I'm thinking of when I object) ",
        "createdAt" : "2019-05-31T17:08:56Z",
        "updatedAt" : "2019-05-31T17:13:07Z",
        "lastEditedBy" : "a4779e52-eec0-491c-ad43-f586286c9ce1",
        "tags" : [
        ]
      }
    ],
    "commit" : "551d1d2b4ff69afbdc3732f9d7654f20c2628a6e",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1,5 @@// Type definitions for non-npm package Amazon Connect Streams API 1.3\n// Project: https://github.com/aws/amazon-connect-streams\n// Definitions by: Andy Hopper <https://github.com/andyhopp>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.4"
  },
  {
    "id" : "76f167a9-8618-4bef-a8c4-9515bf6994f1",
    "prId" : 35752,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/35752#pullrequestreview-244470276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7ca3858-14e4-496d-b136-9c0f57dd7ed8",
        "parentId" : null,
        "authorId" : "e30eb346-917e-4cfa-b6d7-7688bc735d2e",
        "body" : "Is this really enum? Do the values like `AgentStateType` or `AgentAvailStates` etc exist at runtime. If not you want to declare this as union of string literal instead as :\r\n```ts\r\ntype AgentStateType  = \"init\" | \"routable\" | \"not_routable\" | \"offline\";\r\n```",
        "createdAt" : "2019-05-31T18:01:33Z",
        "updatedAt" : "2019-05-31T18:02:08Z",
        "lastEditedBy" : "e30eb346-917e-4cfa-b6d7-7688bc735d2e",
        "tags" : [
        ]
      },
      {
        "id" : "768e8e63-957c-4b7d-a96f-de0a3ad79af4",
        "parentId" : "c7ca3858-14e4-496d-b136-9c0f57dd7ed8",
        "authorId" : "a4779e52-eec0-491c-ad43-f586286c9ce1",
        "body" : "Hello! Yep, it is an enum; the expected usage per the ACS API docs is AgentStateType.INIT (ACS creates an enum object using the connect.makeEnum utility function).",
        "createdAt" : "2019-05-31T18:58:29Z",
        "updatedAt" : "2019-05-31T18:58:29Z",
        "lastEditedBy" : "a4779e52-eec0-491c-ad43-f586286c9ce1",
        "tags" : [
        ]
      }
    ],
    "commit" : "551d1d2b4ff69afbdc3732f9d7654f20c2628a6e",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +89,93 @@     }\n\n     enum AgentStateType {\n        INIT = 'init',\n        ROUTABLE = 'routable',"
  }
]