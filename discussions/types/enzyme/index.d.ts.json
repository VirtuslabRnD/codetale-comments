[
  {
    "id" : "1a2b9013-f3b3-4b6a-8ef0-f8bc3c962b16",
    "prId" : 20116,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20116#pullrequestreview-65953173",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f35a0cc9-e56d-418f-9d4e-69535f68353a",
        "parentId" : null,
        "authorId" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "body" : "These don't exist on ReactWrapper, only ShallowWrapper.",
        "createdAt" : "2017-09-28T18:15:22Z",
        "updatedAt" : "2017-09-28T18:15:27Z",
        "lastEditedBy" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "tags" : [
        ]
      },
      {
        "id" : "fe2c60bf-a4bd-4d76-9e64-d472891db778",
        "parentId" : "f35a0cc9-e56d-418f-9d4e-69535f68353a",
        "authorId" : "3e8c0191-ee56-428b-8336-2f54ec56b1e2",
        "body" : "I believe they do https://github.com/airbnb/enzyme/blob/master/packages/enzyme/src/ReactWrapper.js#L139-L174",
        "createdAt" : "2017-09-28T18:18:55Z",
        "updatedAt" : "2017-09-28T18:18:55Z",
        "lastEditedBy" : "3e8c0191-ee56-428b-8336-2f54ec56b1e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f39d73010f3252463b338e04acd548650daff0f",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +152,156 @@     * Returns the wrapper's underlying node.\n     */\n    getElement(): ReactElement<any>;\n\n    /**"
  },
  {
    "id" : "069104b5-4aa0-41c6-a3c2-99f958978026",
    "prId" : 21046,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21046#pullrequestreview-73600247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "076b4d6a-96a8-4fb3-8043-76bb120de991",
        "parentId" : null,
        "authorId" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "body" : "Should this be a single heterogeneous array type? i.e. `nodes: Array<ReactElement<any> | Array<ReactElement<any>>`\r\nwould allow for\r\n```tsx\r\ncontainsAllMatchingElements([<span />, [<span />, <span />]])\r\n```\r\nNot sure if that's a legit thing that works in enzyme, haven't messed with React 16 much.",
        "createdAt" : "2017-10-27T23:50:28Z",
        "updatedAt" : "2017-10-27T23:50:28Z",
        "lastEditedBy" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "tags" : [
        ]
      },
      {
        "id" : "6642fcd8-7048-4540-9337-675fd7112c10",
        "parentId" : "076b4d6a-96a8-4fb3-8043-76bb120de991",
        "authorId" : "8207bb8d-7a00-41e3-8ba8-d40a814779c0",
        "body" : "I'd be ok with that although was following the method signatures inside of the enzyme lib so that it'd be as close as possible to what they are doing there.",
        "createdAt" : "2017-11-01T20:01:44Z",
        "updatedAt" : "2017-11-01T20:01:44Z",
        "lastEditedBy" : "8207bb8d-7a00-41e3-8ba8-d40a814779c0",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cf04ecafacc9b7d528d19bbd7c6eed33e45f7a3",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +65,69 @@     * Returns whether or not all the given react elements exists in the shallow render tree\n     */\n    containsAllMatchingElements(nodes: Array<ReactElement<any>> | Array<Array<ReactElement<any>>>): boolean;\n\n    /**"
  },
  {
    "id" : "9ccb48a9-99c2-4580-9107-ee8b6987191f",
    "prId" : 24811,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24811#pullrequestreview-112219948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89e52456-fc7b-496b-a082-d11184b78169",
        "parentId" : null,
        "authorId" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "body" : "It's possible to write React components with constructors that don't accept props, and the signatures wouldn't match here. Seems this would break overload selection for .find and friends on such components.",
        "createdAt" : "2018-04-14T17:43:54Z",
        "updatedAt" : "2018-04-14T17:44:12Z",
        "lastEditedBy" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "tags" : [
        ]
      },
      {
        "id" : "84aa2fa3-83da-44d4-80a1-3540b928cf75",
        "parentId" : "89e52456-fc7b-496b-a082-d11184b78169",
        "authorId" : "768febce-c75a-4b5d-8227-842cb7b3d3d8",
        "body" : "Hi @jwbay thanks for the review.\r\n\r\nHonestly, I'm not sure why this works (which is not a good sign), but it does. My original approach unioned a no-arg, 1-arg, and 2-arg component class (to handle exactly what you point out), but I dropped that approach when I realized this simpler approach actually does work.\r\n\r\nE.g. if I change `MyComponent` and `AnotherComponent` to have 0-arg constructors:\r\n\r\n```\r\nclass MyComponent extends Component<MyComponentProps, MyComponentState> {\r\n    constructor() {\r\n        super({stringProp: \"1\", numberProp: 2});\r\n    }\r\n    setState(...args: any[]) {\r\n        console.log(args);\r\n    }\r\n}\r\n\r\nclass AnotherComponent extends Component<AnotherComponentProps> {\r\n    constructor() {\r\n        super({});\r\n    }\r\n    setState(...args: any[]) {\r\n        console.log(args);\r\n    }\r\n}\r\n```\r\n\r\nAll of the enyzme-tests code still type-checks, including this line that is in this PR:\r\n\r\n```\r\n        const s1: EnzymeComponentClass<AnotherComponentProps> = AnotherComponent;\r\n```\r\n\r\nOh...actually, I bet I know why it works; in TS it's legal to implement a method but not declare all of the parameters, e.g.:\r\n\r\n```\r\ntype Callback = (status: number, done: boolean) => void;\r\nfunction doSomething(c: Callback) {}\r\ndoSomething(() => console.log(\"done\"));\r\n```\r\n\r\nThe 0-arg closure still matches the 2-arg `Callback` type, by conveniently ignoring the two params.\r\n\r\nSo, in the same way, a 0-arg `MyComponent.new()` will (somewhat surprisingly but actually conveniently) match the `ComponentClass.new(props, context)` and so the `find<P2>(component: ComponentClass<P2>): ShallowWrapper<P2, any>` overload still kicks in.",
        "createdAt" : "2018-04-14T21:40:21Z",
        "updatedAt" : "2018-04-14T21:40:22Z",
        "lastEditedBy" : "768febce-c75a-4b5d-8227-842cb7b3d3d8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4124ea9a60f615c6cff67244cfb994d0ce5fc22",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +24,28 @@ */\nexport interface ComponentClass<Props> {\n    new(props: Props, context?: any): Component<Props>;\n}\n"
  },
  {
    "id" : "32c565f4-0c9d-48ee-b51d-b63e8d0ab256",
    "prId" : 32424,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/32424#pullrequestreview-196320346",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "723fe202-70a8-4226-925b-1be16b2287fc",
        "parentId" : null,
        "authorId" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "body" : "I don't understand why `StatelessComponent` needs to be present in this overload (via the union). It should be matched by what is now the first overload. Can you give an example of what was broken before that this change fixes?",
        "createdAt" : "2019-01-24T00:08:43Z",
        "updatedAt" : "2019-01-26T12:27:07Z",
        "lastEditedBy" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "tags" : [
        ]
      },
      {
        "id" : "dfa868eb-d531-4c00-9066-6b48077d07bb",
        "parentId" : "723fe202-70a8-4226-925b-1be16b2287fc",
        "authorId" : "1f11900c-0ba4-4f75-9536-38582a7ff656",
        "body" : "@jwbay Yeah sure.\r\n\r\nWhen you use HOC typed like that\r\n```\r\nfunction withNamespaces(): <P extends WithNamespaces>(\r\n    component: React.ComponentType<P>,\r\n  ) => React.ComponentType<Subtract<P, WithNamespaces>>\r\n``` \r\n\r\nThe class lose his type for ComponentType = Class | Stateless\r\n```\r\nclass MyComponent extend Component<Props>\r\nexport withNamespaces()(MyComponent)\r\n```\r\n\r\nThen, when you use\r\n```\r\nmount(Something).find<Props>(MyComponent)\r\n```\r\n\r\nMy Component is not a Stateless because it's Stateless OR Class, so it doesnt match the Stateless case.",
        "createdAt" : "2019-01-24T09:12:33Z",
        "updatedAt" : "2019-01-26T12:27:07Z",
        "lastEditedBy" : "1f11900c-0ba4-4f75-9536-38582a7ff656",
        "tags" : [
        ]
      },
      {
        "id" : "2e707894-131c-490e-af84-1b6462469ded",
        "parentId" : "723fe202-70a8-4226-925b-1be16b2287fc",
        "authorId" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "body" : "I see, ty. üëç Could you add tests to prevent us from regressing this fix?",
        "createdAt" : "2019-01-25T00:56:46Z",
        "updatedAt" : "2019-01-26T12:27:07Z",
        "lastEditedBy" : "42b731f1-b9e9-4087-9982-d0a4a64c6625",
        "tags" : [
        ]
      }
    ],
    "commit" : "fba358da45c6dda900a64c299bb08055de535e65",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +376,380 @@     */\n    find<P2>(statelessComponent: StatelessComponent<P2>): ShallowWrapper<P2, never>;\n    find<P2>(component: ComponentType<P2>): ShallowWrapper<P2, any>;\n    find(props: EnzymePropSelector): ShallowWrapper<any, any>;\n    find(selector: string): ShallowWrapper<HTMLAttributes, any>;"
  }
]