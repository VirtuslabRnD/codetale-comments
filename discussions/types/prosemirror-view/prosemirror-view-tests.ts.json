[
  {
    "id" : "c7a88a8a-1b6a-414f-86c8-dbf57929d86d",
    "prId" : 48651,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/48651#pullrequestreview-507843500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c36c86af-5ae8-4d6b-93a8-cc204edb0afe",
        "parentId" : null,
        "authorId" : "c5797251-256e-4248-8fab-01184997dc09",
        "body" : "`event` intentionally defaults to any so that types pass correctly, and also it allows for typing the function with a custom event if desired in a much simpler way. \r\n\r\n```ts\r\nhandleDOMEvents: {\r\n  // This would have been an error previously.\r\n  custom: (view, event: MyCustomEvent) => {\r\n\t// ...\r\n  }\r\n}\r\n```",
        "createdAt" : "2020-10-10T11:08:47Z",
        "updatedAt" : "2020-10-10T19:23:59Z",
        "lastEditedBy" : "c5797251-256e-4248-8fab-01184997dc09",
        "tags" : [
        ]
      },
      {
        "id" : "980ee0e7-cc0d-4d55-9de5-5ca0aa407938",
        "parentId" : "c36c86af-5ae8-4d6b-93a8-cc204edb0afe",
        "authorId" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "body" : "The TypeScript handbook [recommends](https://www.typescriptlang.org/docs/handbook/declaration-files/do-s-and-don-ts.html#any) not using `any`:\r\n\r\n> Don’t use `any` as a type unless you are in the process of migrating a JavaScript project to TypeScript. The compiler effectively treats `any` as “please turn off type checking for this thing”. It is similar to putting an `@ts-ignore` comment around every usage of the variable. This can be very helpful when you are first migrating a JavaScript project to TypeScript as you can set the type for stuff you haven’t migrated yet as any, but in a full TypeScript project you are disabling type checking for any parts of your program that use it.\r\n> \r\n> In cases where you don’t know what type you want to accept, or when you want to accept anything because you will be blindly passing it through without interacting with it, you can use unknown.\r\n\r\nI think we should follow that advice. To preserve backwards-compatibility, we should use `Event` rather than `unknown`.\r\n\r\nWhen using custom events, one could add them to `DocumentEventMap` (using declaration merging) and achieve a similar effect but in a more type-safe way.",
        "createdAt" : "2020-10-10T19:24:53Z",
        "updatedAt" : "2020-10-10T19:32:43Z",
        "lastEditedBy" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "tags" : [
        ]
      },
      {
        "id" : "9b35c491-31e7-4793-b23f-70618017df65",
        "parentId" : "c36c86af-5ae8-4d6b-93a8-cc204edb0afe",
        "authorId" : "c5797251-256e-4248-8fab-01184997dc09",
        "body" : "I initially wanted to use `Event` which I tried first. But it errors since the intersection of the types have no overlap. `unknown` also has a similar error.\r\n\r\n```\r\nType '{ click(this: Plugin<any, any>, view: EditorView<any>, event: MouseEvent): true; blur(this: Plugin<...>, view: EditorView<any>, event: FocusEvent): true; customxyz: (this: Plugin<...>, view: EditorView<...>, event: Event) => true; }' is not assignable to type 'HandleDOMEventsProp<Plugin<any, any>, any>'.\r\n  Type '{ click(this: Plugin<any, any>, view: EditorView<any>, event: MouseEvent): true; blur(this: Plugin<...>, view: EditorView<any>, event: FocusEvent): true; customxyz: (this: Plugin<...>, view: EditorView<...>, event: Event) => true; }' is not assignable to type '{ [key: string]: (this: Plugin<any, any>, view: EditorView<any>, event: Event) => boolean; }'.\r\n    Property 'click' is incompatible with index signature.\r\n      Type '(this: Plugin<any, any>, view: EditorView<any>, event: MouseEvent) => true' is not assignable to type '(this: Plugin<any, any>, view: EditorView<any>, event: Event) => boolean'.\r\n        Types of parameters 'event' and 'event' are incompatible.\r\n          Type 'Event' is missing the following properties from type 'MouseEvent': altKey, button, buttons, clientX, and 20 more.\r\n```\r\n\r\nThe reason I used `any` was because, if a user really wants to add a custom type they can use **Declaration Merging** or specifically add their type to the argument. I can add a comment, which outlines how to do it?\r\n\r\n#### Error screenshot\r\n\r\n![image](https://user-images.githubusercontent.com/1160934/95745975-f4af8e00-0c8d-11eb-83ba-44ec91afdd86.png)\r\n",
        "createdAt" : "2020-10-12T12:25:07Z",
        "updatedAt" : "2020-10-12T12:25:07Z",
        "lastEditedBy" : "c5797251-256e-4248-8fab-01184997dc09",
        "tags" : [
        ]
      },
      {
        "id" : "4b6a42e1-dca8-445c-a8b2-27413ac76060",
        "parentId" : "c36c86af-5ae8-4d6b-93a8-cc204edb0afe",
        "authorId" : "c5797251-256e-4248-8fab-01184997dc09",
        "body" : "As an alternative, I could remove the intersection with `{ [key: string]: (this: ThisT, view: EditorView<S>, event: Event) => boolean; }`. That way if you want to add a custom type, you need to use declaration merging. I avoided this because I don't think it's a great experience for users of the types.\r\n\r\nWhile I understand the reasoning behind not using `any` I think in this case, to enhance usability, `any` is the better choice. \r\n\r\nThe file already has multiple uses of the `any` type so it's not a reduction in quality.",
        "createdAt" : "2020-10-12T12:40:15Z",
        "updatedAt" : "2020-10-12T12:40:42Z",
        "lastEditedBy" : "c5797251-256e-4248-8fab-01184997dc09",
        "tags" : [
        ]
      },
      {
        "id" : "34e0474a-f24a-4b4f-93c9-133275e44d45",
        "parentId" : "c36c86af-5ae8-4d6b-93a8-cc204edb0afe",
        "authorId" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "body" : "Thanks for explaining the reasoning behind that choice! I think that both the current approach (using `any`) and the one without `{ [key: string]: (this: ThisT, view: EditorView<S>, event: Event) => boolean; }` have their pros and cons. You can leave it as-is or change it, I would accept it either way.",
        "createdAt" : "2020-10-13T21:30:46Z",
        "updatedAt" : "2020-10-13T21:30:46Z",
        "lastEditedBy" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a707bad3a65ee68702dfa211540661dde055c76",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +84,88 @@                return true;\n            },\n            customxyz: (view, event) => {\n                event; // $ExpectType any\n                return true;"
  }
]