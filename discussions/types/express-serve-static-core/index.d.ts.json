[
  {
    "id" : "9edbc7d9-0176-47a4-9bbf-c7a2ffb0b8f5",
    "prId" : 25994,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/25994#pullrequestreview-123576004",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d906807-c9eb-4c34-a705-b18d574b2e04",
        "parentId" : null,
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "Seems like we could just rewrite the overloads as\r\n\r\n```ts\r\nset(fields: object): Response;\r\nset(field: string, value?: string | string[]): Response;\r\n```",
        "createdAt" : "2018-05-27T08:21:49Z",
        "updatedAt" : "2018-05-27T08:21:50Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d104a5829ca51f5b5dd2aff1ae4c220198e012b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +708,712 @@    set(field: any): Response;\n    set(field: string, value?: string): Response;\n    set(field: string, value?: string[]): Response;\n\n    header(field: any): Response;"
  },
  {
    "id" : "db5a16e2-f2ab-4068-971e-571454773488",
    "prId" : 37718,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/37718#pullrequestreview-276282854",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2ed63a3-46e0-4575-9d7e-eb94442e7381",
        "parentId" : null,
        "authorId" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "body" : "This is the main change.",
        "createdAt" : "2019-08-18T15:02:12Z",
        "updatedAt" : "2019-08-18T18:54:29Z",
        "lastEditedBy" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9989d4aa906c72647a09782cea06612ea83e231",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +455,459 @@    method: string;\n\n    params: P;\n\n    /** Clear cookie `name`. */"
  },
  {
    "id" : "67ac661a-fa3c-45da-b00c-9c28a5414cd2",
    "prId" : 37718,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/37718#pullrequestreview-276291152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93f3c755-efc6-4ac9-9d8d-654e4ad02c83",
        "parentId" : null,
        "authorId" : "ed1ae67c-053c-4f6f-8b45-71b4b441a787",
        "body" : "Oh, one thing I was going to suggest - when this broke for me, I ctrl-clicked in VSCode to get to the type defition which brought me here.  It might be worthwhile putting a comment in here (or maybe above `interface Request`) giving a brief description of how to use this.  Something along the lines of:\r\n\r\n```\r\n/**\r\n * An Express Request.\r\n * @param {P} For most requests, this should be `ParamsDictionary`, but if you're\r\n * using this in a route handler for a route that uses a RegExp or a wildcard path\r\n * (e.g. \"/user/*\"), then `req.params` will be an array, in which case you should\r\n * use `Request<ParamsArray>` instead.\r\n *\r\n * @example\r\n *     app.get(/echo/(.*),\r\n *         (req: Request<ParamsDictionary>, res: Response) => res.send(req.params[1])\r\n *     );\r\n */\r\n```",
        "createdAt" : "2019-08-18T17:59:44Z",
        "updatedAt" : "2019-08-18T18:54:29Z",
        "lastEditedBy" : "ed1ae67c-053c-4f6f-8b45-71b4b441a787",
        "tags" : [
        ]
      },
      {
        "id" : "5f57904f-db18-46c1-a917-5d212f82a599",
        "parentId" : "93f3c755-efc6-4ac9-9d8d-654e4ad02c83",
        "authorId" : "89785281-b9fb-4be9-b5a6-d294762ff6ea",
        "body" : "The example snippet has an invalid regex (guessing you intended `/echo\\/(.*)/`?) and should use `ParamsArray`, not `ParamsDictionary`\r\n\r\nIf you add this documentation, I suggest adding another snippet for the more common case, to demonstrate that `ParamsDictionary` does not need to be specified explicitly.\r\n\r\nAlso as I understand it, the suggested usage puts the generic type on the method (saving the need to explicitly type the request and response):\r\n\r\n```\r\napp.get<ParamsArray>(/echo\\/(.*)/, (req, res) => res.send(req.params[1]));\r\n```",
        "createdAt" : "2019-08-18T18:06:13Z",
        "updatedAt" : "2019-08-18T18:54:29Z",
        "lastEditedBy" : "89785281-b9fb-4be9-b5a6-d294762ff6ea",
        "tags" : [
        ]
      },
      {
        "id" : "2967581d-61dd-417c-b173-8e02350612e8",
        "parentId" : "93f3c755-efc6-4ac9-9d8d-654e4ad02c83",
        "authorId" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "body" : "Good idea. That's now done, let me know what you think.\r\n\r\nI put the comment on `Request`, although some users might look to `app.get` (and its other methods), so I'm not sure what the best place for this is.",
        "createdAt" : "2019-08-18T18:53:26Z",
        "updatedAt" : "2019-08-18T18:54:29Z",
        "lastEditedBy" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9989d4aa906c72647a09782cea06612ea83e231",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +203,207 @@ *     app.get<ParamsArray>('/user/*', (req, res) => res.send(req.params[0]));\n */\nexport interface Request<P extends Params = ParamsDictionary> extends http.IncomingMessage, Express.Request {\n    /**\n     * Return request header."
  },
  {
    "id" : "b7d2c379-9218-4ec6-8fc4-1d40de1ddc0c",
    "prId" : 38887,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/38887#pullrequestreview-298879023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77218f23-c42f-4f07-8aa5-8f88c2bf4d4e",
        "parentId" : null,
        "authorId" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "body" : "What was the reason for this change?",
        "createdAt" : "2019-10-08T14:45:57Z",
        "updatedAt" : "2019-10-08T18:09:38Z",
        "lastEditedBy" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "tags" : [
        ]
      },
      {
        "id" : "51e19b83-feaa-489c-a61d-faee1686bcc3",
        "parentId" : "77218f23-c42f-4f07-8aa5-8f88c2bf4d4e",
        "authorId" : "ed8100d9-7082-4dad-9859-dad5afb9af7f",
        "body" : "Can we discuss this with #38888 ?\r\n\r\nI must change it, or I won't pass the test!",
        "createdAt" : "2019-10-08T16:01:22Z",
        "updatedAt" : "2019-10-08T18:09:38Z",
        "lastEditedBy" : "ed8100d9-7082-4dad-9859-dad5afb9af7f",
        "tags" : [
        ]
      },
      {
        "id" : "78a744f5-7235-40b1-831f-ed2c3f82beff",
        "parentId" : "77218f23-c42f-4f07-8aa5-8f88c2bf4d4e",
        "authorId" : "ed8100d9-7082-4dad-9859-dad5afb9af7f",
        "body" : "I agree this is not the best solution, but it could fix all error perfectly.",
        "createdAt" : "2019-10-08T16:03:38Z",
        "updatedAt" : "2019-10-08T18:09:38Z",
        "lastEditedBy" : "ed8100d9-7082-4dad-9859-dad5afb9af7f",
        "tags" : [
        ]
      },
      {
        "id" : "b3713d56-a435-4007-88df-46419d0147fc",
        "parentId" : "77218f23-c42f-4f07-8aa5-8f88c2bf4d4e",
        "authorId" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "body" : "I commented there",
        "createdAt" : "2019-10-08T16:06:42Z",
        "updatedAt" : "2019-10-08T18:09:38Z",
        "lastEditedBy" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef629005e2dadd0950b5d7d32d989e7d54004075",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +34,38 @@export interface Dictionary<T> { [key: string]: T; }\n\nexport interface ParamsDictionary { [key: string]: string; }\nexport type ParamsArray = string[];\nexport type Params = ParamsDictionary | ParamsArray;"
  },
  {
    "id" : "6e0ed936-6eda-4747-bd64-45e3d6eb7420",
    "prId" : 42994,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/42994#pullrequestreview-379545996",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "816b3375-cee3-496e-a6bb-8fc27b931da6",
        "parentId" : null,
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "Is it possible to create routes for non-standard HTTP methods? If so, then this constraint is too narrow.",
        "createdAt" : "2020-03-14T01:53:36Z",
        "updatedAt" : "2020-03-14T01:53:37Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      },
      {
        "id" : "19434534-d263-4f8d-8642-f50770343f19",
        "parentId" : "816b3375-cee3-496e-a6bb-8fc27b931da6",
        "authorId" : "40e61ff8-b223-4e7e-8f91-44bc16197019",
        "body" : "Poke @andoshin11 / @dwrss  ^",
        "createdAt" : "2020-03-20T15:50:11Z",
        "updatedAt" : "2020-03-20T15:50:12Z",
        "lastEditedBy" : "40e61ff8-b223-4e7e-8f91-44bc16197019",
        "tags" : [
        ]
      },
      {
        "id" : "b34c1126-36dd-4c2f-b30e-7a95ddf3b774",
        "parentId" : "816b3375-cee3-496e-a6bb-8fc27b931da6",
        "authorId" : "12df70e6-24e5-4cbb-a6a4-2dafe98689cf",
        "body" : "@rbuckton Not through the helper methods attached to a router/application, as far as I‚Äôm aware (they‚Äôre defined [here](https://github.com/expressjs/express/blob/e1b45ebd050b6f06aa38cda5aaf0c21708b0c71e/lib/application.js#L472)).",
        "createdAt" : "2020-03-22T11:35:18Z",
        "updatedAt" : "2020-03-22T11:35:19Z",
        "lastEditedBy" : "12df70e6-24e5-4cbb-a6a4-2dafe98689cf",
        "tags" : [
        ]
      },
      {
        "id" : "c5190eb9-fa79-44b8-922a-f1bdfc9799d7",
        "parentId" : "816b3375-cee3-496e-a6bb-8fc27b931da6",
        "authorId" : "40e61ff8-b223-4e7e-8f91-44bc16197019",
        "body" : "Thanks @dwrss - üëç works for me, merging",
        "createdAt" : "2020-03-23T15:33:17Z",
        "updatedAt" : "2020-03-23T15:33:17Z",
        "lastEditedBy" : "40e61ff8-b223-4e7e-8f91-44bc16197019",
        "tags" : [
        ]
      }
    ],
    "commit" : "281f74ed1974d7fcddbaf59ca8b9dc1c51466e15",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +56,60 @@    | ErrorRequestHandler<P>>;\n\nexport interface IRouterMatcher<T, Method extends 'all' | 'get' | 'post' | 'put' | 'delete' | 'patch' | 'options' | 'head' = any> {\n    // tslint:disable-next-line no-unnecessary-generics (This generic is meant to be passed explicitly.)\n    <P extends Params = ParamsDictionary, ResBody = any, ReqBody = any>(path: PathParams, ...handlers: Array<RequestHandler<P, ResBody, ReqBody>>): T;"
  },
  {
    "id" : "f8e0a9c8-05f3-4288-b703-19c6540221a7",
    "prId" : 43434,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43434#pullrequestreview-409226208",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba1c4683-1644-4eb2-8068-c0677c4ec50e",
        "parentId" : null,
        "authorId" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "body" : "Maybe add a comment above here to say it's the return type of `qs.parse`, the default query parser (https://expressjs.com/en/api.html#app-settings-property).",
        "createdAt" : "2020-04-01T10:36:35Z",
        "updatedAt" : "2020-04-01T18:50:39Z",
        "lastEditedBy" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "tags" : [
        ]
      },
      {
        "id" : "8ffb9453-f39a-410a-9b7e-6824ac41b75f",
        "parentId" : "ba1c4683-1644-4eb2-8068-c0677c4ec50e",
        "authorId" : "e0a95941-4ed9-4d8f-b29d-ff1296874684",
        "body" : "Hey @OliverJAsh, I just realized that the dictionary types don't take account when the `key` is not present. Should we update this to\r\n\r\n```\r\nexport interface Query { [key: string]: string | string[] | Query | Query[] | undefined; }\r\n```",
        "createdAt" : "2020-04-05T00:16:34Z",
        "updatedAt" : "2020-04-05T00:16:34Z",
        "lastEditedBy" : "e0a95941-4ed9-4d8f-b29d-ff1296874684",
        "tags" : [
        ]
      },
      {
        "id" : "e3f22412-ea9a-4be5-a941-61378df46433",
        "parentId" : "ba1c4683-1644-4eb2-8068-c0677c4ec50e",
        "authorId" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "body" : "[In my opinion that's a bug in TypeScript](https://github.com/microsoft/TypeScript/issues/13778). I don't believe we should provide a workaround here, since it applies to all index signatures (e.g. arrays). If the user wants to workaround that, they can use a helper instead of indexing directly: https://github.com/microsoft/TypeScript/issues/13778#issuecomment-344637746",
        "createdAt" : "2020-04-06T08:12:38Z",
        "updatedAt" : "2020-05-05T10:08:57Z",
        "lastEditedBy" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "tags" : [
        ]
      },
      {
        "id" : "ab650fc0-ed27-42dc-a26b-7f3c566787f4",
        "parentId" : "ba1c4683-1644-4eb2-8068-c0677c4ec50e",
        "authorId" : "e4f811dc-b25b-436c-a789-5a54e271d87f",
        "body" : "Not including `undefined` though breaks this usage pattern for typing the request object of a specific route, which I had found quite useful:\r\n\r\n```\r\ninterface MyRouteRequest extends Request {\r\n  // Validation of the query object is in place so I'm basically asserting the type\r\n  query: {\r\n    requiredParam: string;\r\n    optionalParam?: string;\r\n  }\r\n}\r\n```\r\n\r\nWith `query: any` this didn't raise any compilation error, with `query: Query` (or `query: ParsedQs`, like it is now) this raises the following error, caused by the `?` of `optionalParam`:\r\n\r\n```\r\nType 'undefined' is not assignable to type 'string | ParsedQs | string[] | ParsedQs[]'\r\n```\r\n\r\nI agree that the underlying problem is TypeScript's, though practically this change means that if before I could meaningfully and correctly type my query objects, now I can only go for a partially correct typing.\r\n\r\nSo I would suggest either adding `undefined` to the `ParsedQs` union type, or maybe better yet go back to using `any`. Rationale:\r\n\r\n- as written above, it gives the developer the possibility to override the type\r\n- `ParsedQs` is very broad as a type, so it doesn't give many more guarantees over `any`\r\n- `ParsedQs` gives false guarantees about nullability (again, I agree it's a TypeScript problem, but at that point I would argue in favour of using `any`, which seems less deceptive)\r\n- though `qs` is the default express query parser, express can use node's native query parser `querystring`, for which the `ParsedQs` typing would be incorrect\r\n\r\nWhat do you think @puneetar , @OliverJAsh ? (If it sounds reasonable I'll open a PR for the change)\r\n",
        "createdAt" : "2020-05-11T09:32:20Z",
        "updatedAt" : "2020-05-11T09:32:21Z",
        "lastEditedBy" : "e4f811dc-b25b-436c-a789-5a54e271d87f",
        "tags" : [
        ]
      },
      {
        "id" : "c5e59017-c578-4484-a0bd-c8ee50611d37",
        "parentId" : "ba1c4683-1644-4eb2-8068-c0677c4ec50e",
        "authorId" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "body" : "> Not including undefined though breaks this usage pattern for typing the request object of a specific route\r\n\r\nCould you switch from extending `Request` to passing the custom query type as a generic? This PR added the query as a generic to support this.\r\n\r\nI understand though that this does mean you'll need to switch from your current approach. If someone wants to raise a PR to add `undefined` to the union I would be happy to approve it.\r\n\r\n> better yet go back to using any\r\n\r\nI do not think this is a good idea. `any` completely disables type checking‚Äîyou have to opt-in by providing a generic, otherwise you may get runtime exceptions.\r\n\r\n```ts\r\napp.get('/', req => {\r\n  // no compile error, but throws at runtime!\r\n  req.query.i.do.not.exist\r\n});\r\n```\r\n\r\nAs soon as `any` is used (whether it's intentional or not), it may leak into other places and cause all sorts of bugs.\r\n\r\n```ts\r\nconst fn = (foo: string) => foo.length;\r\napp.get('/', req => {\r\n  // no compile error, but throws at runtime if `foo` does not exist!\r\n  fn(req.query.foo);\r\n});\r\n```\r\n\r\nWith the current model, type safety is built-in. If you don't care about type safety, you can opt-out.\r\n\r\n> though `qs` is the default express query parser, express can use node's native query parser `querystring`, for which the `ParsedQs` typing would be incorrect\r\n\r\nIn that case you would use the generic to customise the query type to use `querystring.ParsedUrlQuery` instead. Alternatively you could write a function that asserts the type, then use that instead of reading `req.query` directly. That's actually what I'm doing:\r\n\r\n```ts\r\n/**\r\n * By default, Express uses `qs` to parse query strings:\r\n * https://expressjs.com/en/api.html#app.settings.table.\r\n *\r\n * However, we have switched this to use Node's built-in `querystring` parser instead. For this\r\n * reason, we need to assert the type.\r\n *\r\n * It is possible to change the type of `req.query` via a generic, however the generic is very\r\n * awkward to use since it requires many other unrelated generics to be provided at the same time.\r\n * */\r\nexport const getQueryForRequest = (req: express.Request) => req.query as ParsedUrlQuery;\r\n```",
        "createdAt" : "2020-05-11T09:43:41Z",
        "updatedAt" : "2020-05-11T10:02:14Z",
        "lastEditedBy" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "tags" : [
        ]
      },
      {
        "id" : "321180eb-97ba-4255-94a1-d8b04a12efe6",
        "parentId" : "ba1c4683-1644-4eb2-8068-c0677c4ec50e",
        "authorId" : "e4f811dc-b25b-436c-a789-5a54e271d87f",
        "body" : ">Could you switch from extending Request to passing the custom query type as a generic? This PR added the query as a generic to support this.\r\n\r\nYeah, sorry, did not specify that which is the obvious answer. In theory it's possible, but the code I'm working with is a bit more convoluted, in that there are several layers of interface extension, each adding some custom properties to the request object. Something like:\r\n\r\n```\r\ninterface ILoggedRequest extends Request {}\r\ninterface ITracedRequest extends ILoggedRequest {}\r\ninterface IAuthenticatedRequest extends ITracedRequest {}\r\ninterface MyCustomRequest extends IAuthenticatedRequest {}\r\n```\r\n\r\nSo I'd need to add generics to each step of the chain, some of which are defined in shared libraries, which makes it very complicated. Ofc it's not this package definition's problem, but if the proposed change makes sense for other use cases all the better.\r\n\r\nI opened this PR https://github.com/DefinitelyTyped/DefinitelyTyped/pull/44645 for it.",
        "createdAt" : "2020-05-11T14:28:50Z",
        "updatedAt" : "2020-05-11T14:29:03Z",
        "lastEditedBy" : "e4f811dc-b25b-436c-a789-5a54e271d87f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3a0d4776222c21c722fdd0a3e0c3f8a33180678",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +42,46 @@\n// Return type of qs.parse, the default query parser (https://expressjs.com/en/api.html#app-settings-property).\nexport interface Query { [key: string]: string | string[] | Query | Query[]; }\n\nexport interface RequestHandler<P extends Params = ParamsDictionary, ResBody = any, ReqBody = any, ReqQuery = Query> {"
  },
  {
    "id" : "27f6708f-a71c-4d22-b439-6afb619b0a9d",
    "prId" : 49879,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/49879#pullrequestreview-546682424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a91fe94-65bd-4273-829f-ff22bd27adf8",
        "parentId" : null,
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "Are these lines required or just a copy-paste from above? I'm not clear on why they're considered \"unnecessary\" since they are used in the reference to `RequestHandler`.",
        "createdAt" : "2020-12-08T01:10:43Z",
        "updatedAt" : "2020-12-08T01:10:44Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      },
      {
        "id" : "970d9c2a-750a-41a2-9373-295bbfea0286",
        "parentId" : "9a91fe94-65bd-4273-829f-ff22bd27adf8",
        "authorId" : "b62804e6-aff2-4121-8b50-829df00e626f",
        "body" : "I did omit them initially and the tests failed without them. \r\n\r\nI've just checked again to be safe and without them the tests have following output:\r\n```\r\nERROR: 74:111  no-unnecessary-generics  Type parameter P is used only once. See: https://github.com/Microsoft/dtslint/blob/master/docs/no-unnecessary-generics.md\r\nERROR: 74:114  no-unnecessary-generics  Type parameter ResBody is used only once. See: https://github.com/Microsoft/dtslint/blob/master/docs/no-unnecessary-generics.md\r\nERROR: 74:123  no-unnecessary-generics  Type parameter ReqBody is used only once. See: https://github.com/Microsoft/dtslint/blob/master/docs/no-unnecessary-generics.md\r\nERROR: 74:132  no-unnecessary-generics  Type parameter ReqQuery is used only once. See: https://github.com/Microsoft/dtslint/blob/master/docs/no-unnecessary-generics.md\r\nERROR: 75:117  no-unnecessary-generics  Type parameter P is used only once. See: https://github.com/Microsoft/dtslint/blob/master/docs/no-unnecessary-generics.md\r\nERROR: 75:120  no-unnecessary-generics  Type parameter ResBody is used only once. See: https://github.com/Microsoft/dtslint/blob/master/docs/no-unnecessary-generics.md\r\nERROR: 75:129  no-unnecessary-generics  Type parameter ReqBody is used only once. See: https://github.com/Microsoft/dtslint/blob/master/docs/no-unnecessary-generics.md\r\nERROR: 75:138  no-unnecessary-generics  Type parameter ReqQuery is used only once. See: https://github.com/Microsoft/dtslint/blob/master/docs/no-unnecessary-generics.md\r\n```",
        "createdAt" : "2020-12-08T01:48:29Z",
        "updatedAt" : "2020-12-08T01:48:29Z",
        "lastEditedBy" : "b62804e6-aff2-4121-8b50-829df00e626f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bef3e060cebe3f8f99f192b2cbdd3bd11b2d44cf",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +74,78 @@  // tslint:disable-next-line no-unnecessary-generics (This generic is meant to be passed explicitly.)\n  <P = ParamsDictionary, ResBody = any, ReqBody = any, ReqQuery = ParsedQs>(...handlers: Array<RequestHandler<P, ResBody, ReqBody, ReqQuery>>): T;\n  // tslint:disable-next-line no-unnecessary-generics (This generic is meant to be passed explicitly.)\n  <P = ParamsDictionary, ResBody = any, ReqBody = any, ReqQuery = ParsedQs>(...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery>>): T;\n}"
  },
  {
    "id" : "7e854326-cc82-4525-afab-90eb56ada012",
    "prId" : 49879,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/49879#pullrequestreview-549644571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb448a89-df72-4a20-af6f-8f2db0e499b6",
        "parentId" : null,
        "authorId" : "e5209397-2510-4745-aef6-1632dc787392",
        "body" : "This¬†change¬†broke `@types/morgan`, I‚Äôm¬†fixing¬†that in¬†<https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50065>.\r\n\r\n---\r\n\r\nAlso, this¬†should be¬†indented and¬†formatted¬†correctly:\r\n```suggestion\r\n    // tslint:disable-next-line no-unnecessary-generics (This generic is meant to be passed explicitly.)\r\n    <P = ParamsDictionary, ResBody = any, ReqBody = any, ReqQuery = ParsedQs>(\r\n        ...handlers: Array<RequestHandler<P, ResBody, ReqBody, ReqQuery>>\r\n    ): T;\r\n    // tslint:disable-next-line no-unnecessary-generics (This generic is meant to be passed explicitly.)\r\n    <P = ParamsDictionary, ResBody = any, ReqBody = any, ReqQuery = ParsedQs>(\r\n        ...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery>>\r\n    ): T;\r\n```",
        "createdAt" : "2020-12-10T18:18:19Z",
        "updatedAt" : "2020-12-10T18:19:49Z",
        "lastEditedBy" : "e5209397-2510-4745-aef6-1632dc787392",
        "tags" : [
        ]
      },
      {
        "id" : "ddb5b1d5-c596-4f04-9a9d-647a310989e0",
        "parentId" : "cb448a89-df72-4a20-af6f-8f2db0e499b6",
        "authorId" : "b62804e6-aff2-4121-8b50-829df00e626f",
        "body" : "Ah okay, my mistake. \r\n\r\nI've raised a PR that should fix this issue. It allows both not passing generics and passing generics. Hopefully this will mean downstream types and packages won't need an update.",
        "createdAt" : "2020-12-10T22:10:02Z",
        "updatedAt" : "2020-12-10T22:10:02Z",
        "lastEditedBy" : "b62804e6-aff2-4121-8b50-829df00e626f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bef3e060cebe3f8f99f192b2cbdd3bd11b2d44cf",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +75,79 @@  <P = ParamsDictionary, ResBody = any, ReqBody = any, ReqQuery = ParsedQs>(...handlers: Array<RequestHandler<P, ResBody, ReqBody, ReqQuery>>): T;\n  // tslint:disable-next-line no-unnecessary-generics (This generic is meant to be passed explicitly.)\n  <P = ParamsDictionary, ResBody = any, ReqBody = any, ReqQuery = ParsedQs>(...handlers: Array<RequestHandlerParams<P, ResBody, ReqBody, ReqQuery>>): T;\n}\n"
  }
]