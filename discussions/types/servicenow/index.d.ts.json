[
  {
    "id" : "69a6f4b5-fae3-489a-bb25-5ebf49035649",
    "prId" : 26044,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26044#pullrequestreview-124099294",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e0ec223-d73f-4eda-928b-6f14e287f288",
        "parentId" : null,
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "So `GlideRecord` describes the static side of a class, which when constructed returns... a `GlideRecord`? Are you sure?",
        "createdAt" : "2018-05-27T05:28:58Z",
        "updatedAt" : "2018-05-30T20:59:57Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "357b95ad-8438-422e-8928-8824a47040d0",
        "parentId" : "8e0ec223-d73f-4eda-928b-6f14e287f288",
        "authorId" : "08b03fa9-e952-47f8-99a2-2966684e2012",
        "body" : "Yes, this is actually an odd situation where GlideRecord is not really a javascript object.  ServiceNow provides a system where they will run your javascript code in their process pipeline of the server, and you can access some of their java API objects such as GlideRecord for querying the database (this also runs on the Rhino engine...).  \r\nI was trying to make this a class, but the object dynamically adds new properties based on the value you pass into the constructor which is the table name you are querying, that loads that tables schema and columns onto the GlideRecord instance.\r\nWhat we end up doing is merging the two interfaces together with the tables dts definition in our projects, which you can see an example of in the servicenow-test.ts file.  I tried doing this with a class but can't seem to find a way to change the type similar to new on interface, but I'm certainly open to better ways of doing this.\r\n\r\n```typescript\r\ndeclare namespace servicenow {\r\n   interface GlideRecord {\r\n      new(\"mytablename\"} : MyTableDefinition;\r\n   }\r\n\r\n   interface MyTableDefinition extends GlideRecord {\r\n      column_one: string;\r\n      column_two: string;\r\n   }\r\n}\r\n\r\nconst foo = new GlideRecord('mytablename');\r\nfoo.column_one = 'blah';",
        "createdAt" : "2018-05-29T17:42:16Z",
        "updatedAt" : "2018-05-30T20:59:57Z",
        "lastEditedBy" : "08b03fa9-e952-47f8-99a2-2966684e2012",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6e42584af96e221ae3c0eb1c975f6e37cde4016",
    "line" : 282,
    "diffHunk" : "@@ -1,1 +280,284 @@        readonly sys_updated_by: string & GlideElement;\n        readonly sys_updated_on: GlideDateTime & GlideElement;\n        new (type: string): GlideRecord;\n        addActiveQuery(): GlideQueryCondition;\n        addEncodedQuery(query: string): void;"
  },
  {
    "id" : "beb1cf7a-5671-4898-9fb8-ce2cadfc437e",
    "prId" : 26044,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26044#pullrequestreview-124587432",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa586cbf-5175-41b5-959c-7d69cd358c3a",
        "parentId" : null,
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "How is this type possible?",
        "createdAt" : "2018-05-27T05:29:37Z",
        "updatedAt" : "2018-05-30T20:59:57Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "41e15f16-6ff4-4913-8572-e698ef5cd04e",
        "parentId" : "aa586cbf-5175-41b5-959c-7d69cd358c3a",
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "Is this the same situation as above?",
        "createdAt" : "2018-05-29T22:45:42Z",
        "updatedAt" : "2018-05-30T20:59:57Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "c164c879-6baa-4cbe-b7d5-3e1aa753bbad",
        "parentId" : "aa586cbf-5175-41b5-959c-7d69cd358c3a",
        "authorId" : "08b03fa9-e952-47f8-99a2-2966684e2012",
        "body" : "Yes, its really a GlideElement but you can access it as its underlying type also",
        "createdAt" : "2018-05-30T20:49:58Z",
        "updatedAt" : "2018-05-30T20:59:57Z",
        "lastEditedBy" : "08b03fa9-e952-47f8-99a2-2966684e2012",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6e42584af96e221ae3c0eb1c975f6e37cde4016",
    "line" : 279,
    "diffHunk" : "@@ -1,1 +277,281 @@        readonly sys_created_on: GlideDateTime & GlideElement;\n        readonly sys_id: string;\n        readonly sys_mod_count: number & GlideElement;\n        readonly sys_updated_by: string & GlideElement;\n        readonly sys_updated_on: GlideDateTime & GlideElement;"
  }
]