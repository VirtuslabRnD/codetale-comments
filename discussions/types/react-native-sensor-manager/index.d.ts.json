[
  {
    "id" : "b6230a63-ee5d-47ed-b681-767842a40d4a",
    "prId" : 18665,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18665#pullrequestreview-54539906",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0d01b6c-5caa-40fd-8ee2-0551d71378f8",
        "parentId" : null,
        "authorId" : "3d4c1e13-0523-4e9c-8765-e6e662a3091b",
        "body" : "is it not conflict with the `react-native` typing?",
        "createdAt" : "2017-08-05T19:33:46Z",
        "updatedAt" : "2017-08-05T20:59:21Z",
        "lastEditedBy" : "3d4c1e13-0523-4e9c-8765-e6e662a3091b",
        "tags" : [
        ]
      },
      {
        "id" : "b40fc08b-9bbf-4c0b-8717-dda459dcef27",
        "parentId" : "e0d01b6c-5caa-40fd-8ee2-0551d71378f8",
        "authorId" : "03f9bbae-0702-4115-9b6c-a4fd1018773f",
        "body" : "The original definition in react-native uses a template parameter which will be used for the data type.  Which looks like this.\r\n\r\n```ts\r\n addListener<T>( type: string, listener: ( data: T ) => void, context?: any ): EmitterSubscription;\r\n```\r\n\r\nSo it does not conflict with the original definition, it only augments the definition with non templated specialisation based on the even type. \r\n\r\nSo something like this still works.\r\n\r\n```ts\r\nDeviceEventEmitter.addListener<{x:number;y:number}>('Test',(data)=>\r\n{\r\n    \r\n});\r\n```",
        "createdAt" : "2017-08-05T20:43:13Z",
        "updatedAt" : "2017-08-05T20:59:21Z",
        "lastEditedBy" : "03f9bbae-0702-4115-9b6c-a4fd1018773f",
        "tags" : [
        ]
      },
      {
        "id" : "2ed2805e-be7e-461b-ae6e-e694d9b522ce",
        "parentId" : "e0d01b6c-5caa-40fd-8ee2-0551d71378f8",
        "authorId" : "03f9bbae-0702-4115-9b6c-a4fd1018773f",
        "body" : "Btw looking at the original definitions my augmented functions have a return void type instand of EmitterSubscription, I will fix that to be consistent here.",
        "createdAt" : "2017-08-05T20:50:35Z",
        "updatedAt" : "2017-08-05T20:59:21Z",
        "lastEditedBy" : "03f9bbae-0702-4115-9b6c-a4fd1018773f",
        "tags" : [
        ]
      },
      {
        "id" : "6ecd7c74-c3a9-49d4-9c95-45d258328d0c",
        "parentId" : "e0d01b6c-5caa-40fd-8ee2-0551d71378f8",
        "authorId" : "03f9bbae-0702-4115-9b6c-a4fd1018773f",
        "body" : "Return type fixed to EmitterSubscription",
        "createdAt" : "2017-08-05T21:01:53Z",
        "updatedAt" : "2017-08-05T21:01:53Z",
        "lastEditedBy" : "03f9bbae-0702-4115-9b6c-a4fd1018773f",
        "tags" : [
        ]
      },
      {
        "id" : "efe047ad-f5cc-4395-8f4f-df65b4503801",
        "parentId" : "e0d01b6c-5caa-40fd-8ee2-0551d71378f8",
        "authorId" : "3d4c1e13-0523-4e9c-8765-e6e662a3091b",
        "body" : "I'm not sure if two `react-native` module declared are conflict.\r\n\r\nAnd this repo `react-native-sensor-manager` is obviously not a good implementation for use missing `index.js`.\r\n\r\nA far better approach would be to define a class named `SensorManager`, however it use `NativeModule ` directly.\r\n",
        "createdAt" : "2017-08-06T12:41:56Z",
        "updatedAt" : "2017-08-06T12:41:56Z",
        "lastEditedBy" : "3d4c1e13-0523-4e9c-8765-e6e662a3091b",
        "tags" : [
        ]
      },
      {
        "id" : "ed9b9b88-dcb4-4793-b092-e43e6c3ffd08",
        "parentId" : "e0d01b6c-5caa-40fd-8ee2-0551d71378f8",
        "authorId" : "03f9bbae-0702-4115-9b6c-a4fd1018773f",
        "body" : ">I'm not sure if two react-native module declared are conflict.\r\n\r\nThis would only happen when we have different declarations for the same property inside NativeModules. But then we would also have a problem with the implementation. In this case we would have two react-native native modules which are creating the property inside NativeModules. \r\n\r\nAlso before my change, the type of NativeModules is any, so before my change it was not possible to declare properties inside NativeModules.\r\n\r\n> A far better approach would be to define a class named SensorManager, however it use NativeModule directly.\r\n\r\nAccording to the official docs, this is a valid approach in react-native.\r\nSee [https://facebook.github.io/react-native/docs/native-modules-ios.html](url)",
        "createdAt" : "2017-08-06T16:58:35Z",
        "updatedAt" : "2017-08-06T16:58:35Z",
        "lastEditedBy" : "03f9bbae-0702-4115-9b6c-a4fd1018773f",
        "tags" : [
        ]
      },
      {
        "id" : "b27a1925-bfcd-4fe2-9617-971fb249563c",
        "parentId" : "e0d01b6c-5caa-40fd-8ee2-0551d71378f8",
        "authorId" : "3d4c1e13-0523-4e9c-8765-e6e662a3091b",
        "body" : "> I'm not sure if two react-native module declared are conflict.\r\n\r\nokay, got it.\r\n\r\n>A far better approach would be to define a class named SensorManager, however it use NativeModule directly.\r\n\r\nI mean, `react-native-sensor-manager` can be better to do like that.\r\n\r\nBut never mind, it is okay for typings.",
        "createdAt" : "2017-08-06T17:08:01Z",
        "updatedAt" : "2017-08-06T17:08:10Z",
        "lastEditedBy" : "3d4c1e13-0523-4e9c-8765-e6e662a3091b",
        "tags" : [
        ]
      }
    ],
    "commit" : "03c324b1d0ae44240ef5e0c1fa1e2d2223887308",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +30,34 @@\ndeclare module 'react-native' {\n    export interface DeviceEventEmitterStatic {\n        addListener(event: 'Accelerometer' | 'Gyroscope' | 'Magnetometer', callback: (data: {x: number, y: number, z: number}) => void): EmitterSubscription;\n        addListener(event: 'Orientation', callback: (data: {azimuth: number, pitch: number, roll: number}) => void): EmitterSubscription;"
  }
]