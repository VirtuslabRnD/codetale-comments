[
  {
    "id" : "39686e5a-ffee-472d-9c9a-a34f4f27bea9",
    "prId" : 21007,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21007#pullrequestreview-72219834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8f556cf-becf-4860-be6e-f9266f5004d2",
        "parentId" : null,
        "authorId" : "b6bce987-55ab-49ec-b158-859af43bec18",
        "body" : "I note Travis is failing on the cli-color dependency. I had considered replacing that with an interface of the methods actually used by the grasp module, but I'm not sure that's a good idea. Would appreciate any thoughts on whether it's better to just have the dependency or use something like\r\n\r\n```typescript\r\ntextFormat?: Record<\"bold\" | \"magenta\" | \"red\" | \"green\" | \"cyan\", (input: string) => string>\r\n```",
        "createdAt" : "2017-10-25T15:18:58Z",
        "updatedAt" : "2017-10-25T16:00:26Z",
        "lastEditedBy" : "b6bce987-55ab-49ec-b158-859af43bec18",
        "tags" : [
        ]
      },
      {
        "id" : "a4f5d837-1924-4122-a997-33a172157341",
        "parentId" : "a8f556cf-becf-4860-be6e-f9266f5004d2",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "This is suspicious, do they really require this option to implement every method on `cliColor`? Now if `cliColor` added a new method that would be a breaking change. The above line would be preferrable if it only required those five methods.",
        "createdAt" : "2017-10-25T16:04:26Z",
        "updatedAt" : "2017-10-25T16:04:26Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "80ef6660-a46e-4254-a39e-8506c62aa09c",
        "parentId" : "a8f556cf-becf-4860-be6e-f9266f5004d2",
        "authorId" : "b6bce987-55ab-49ec-b158-859af43bec18",
        "body" : "Yeah, for `textFormat`, `fs`, and `console` they only use a small subset of features so it's unclear how to type it. I'm not super comfortable with basing the type on code inspection (grasp could decide to use other methods anytime, basically), so my thinking was that if you really wanted to use those you could use a cast. Basically this whole \"give me something that behaves like `fs`\" thing feels weird and not ideal for static typing. I'm tempted to just say `any` :-P",
        "createdAt" : "2017-10-25T16:12:05Z",
        "updatedAt" : "2017-10-25T16:12:06Z",
        "lastEditedBy" : "b6bce987-55ab-49ec-b158-859af43bec18",
        "tags" : [
        ]
      },
      {
        "id" : "90ec4013-cbf2-48a7-95ca-0c49b21fb01d",
        "parentId" : "a8f556cf-becf-4860-be6e-f9266f5004d2",
        "authorId" : "b6bce987-55ab-49ec-b158-859af43bec18",
        "body" : "But yes, it does appear to only use those methods: https://github.com/gkz/grasp/blob/master/src/index.ls#L128",
        "createdAt" : "2017-10-25T16:13:04Z",
        "updatedAt" : "2017-10-25T16:13:04Z",
        "lastEditedBy" : "b6bce987-55ab-49ec-b158-859af43bec18",
        "tags" : [
        ]
      },
      {
        "id" : "98de87b9-bad4-44f3-a14d-14680f180d11",
        "parentId" : "a8f556cf-becf-4860-be6e-f9266f5004d2",
        "authorId" : "b6bce987-55ab-49ec-b158-859af43bec18",
        "body" : "Essentially this whole block *could* be:\r\n\r\n```typescript\r\n    fs?: Pick<typeof fs, \"readFileSync\" | \"writeFileSync\" | \"lstatSync\" | \"readdirSync\">;\r\n    console?: Pick<typeof console, \"log\" | \"warn\" | \"error\" | \"time\" | \"timeEnd\">;\r\n    textFormat?: Record<\"bold\" | \"magenta\" | \"red\" | \"green\" | \"cyan\", (input: string) => string>;\r\n    stdin?: Pick<typeof process.stdin, \"setEncoding\" | \"on\" | \"resume\">;\r\n```\r\n\r\nBut I'm not sure if that's... better? What do you think? This is my first contribution to DefinitelyTyped so I'm definitely open to suggestions.",
        "createdAt" : "2017-10-25T16:19:11Z",
        "updatedAt" : "2017-10-25T16:19:12Z",
        "lastEditedBy" : "b6bce987-55ab-49ec-b158-859af43bec18",
        "tags" : [
        ]
      },
      {
        "id" : "ab95b3a1-7fd6-4678-957e-37a4a0d719df",
        "parentId" : "a8f556cf-becf-4860-be6e-f9266f5004d2",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "That's better, although you might be right that giving `fs` a particular type is dangerous if you're not sure exactly how it's supposed to be used.",
        "createdAt" : "2017-10-25T16:21:22Z",
        "updatedAt" : "2017-10-25T16:21:22Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "2f0340d2-a058-4327-997a-3d843cda0e51",
        "parentId" : "a8f556cf-becf-4860-be6e-f9266f5004d2",
        "authorId" : "b6bce987-55ab-49ec-b158-859af43bec18",
        "body" : "If I do go that route, do you think it would be better to e.g. have an `interface TextFormatter extends Record<...>`, `interface FsLike`, `interface ConsoleLike`, etc. or leave the types inline?",
        "createdAt" : "2017-10-25T16:23:23Z",
        "updatedAt" : "2017-10-25T16:23:23Z",
        "lastEditedBy" : "b6bce987-55ab-49ec-b158-859af43bec18",
        "tags" : [
        ]
      },
      {
        "id" : "0ea11258-f151-4f12-af81-9c74ee05abf6",
        "parentId" : "a8f556cf-becf-4860-be6e-f9266f5004d2",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "Leave them inline.",
        "createdAt" : "2017-10-25T16:28:24Z",
        "updatedAt" : "2017-10-25T16:28:24Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "12decc57-300c-4e03-9803-cdfeeb9259ae",
        "parentId" : "a8f556cf-becf-4860-be6e-f9266f5004d2",
        "authorId" : "b6bce987-55ab-49ec-b158-859af43bec18",
        "body" : "You know the more I think about what it looks like to actually use this the less I'm convinced Pick is a good idea - if you use grasp for \"reading a fake file\" you'd only really need to implement\r\n\r\n```typescript\r\nreadFileSync(path: string): string\r\n```\r\n\r\nBut just to implement `Pick<typeof fs, \"readFileSync\">` is significantly more complicated.\r\n\r\nSo I'm leaning back towards leaving as-is with \"typeof\", and relying on callers who really want to use these features to use e.g. `as typeof fs`. Does that seem okay? Honestly I don't anticipate those options being used much by typescript users, and when they do use them I want them to be aware of the risks.",
        "createdAt" : "2017-10-26T09:49:31Z",
        "updatedAt" : "2017-10-26T09:49:32Z",
        "lastEditedBy" : "b6bce987-55ab-49ec-b158-859af43bec18",
        "tags" : [
        ]
      },
      {
        "id" : "a4dc2fd8-2740-4cc8-af0f-86d79059f539",
        "parentId" : "a8f556cf-becf-4860-be6e-f9266f5004d2",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "You could use `Partial` -- meaning any methods you do provide must match the signature from `fs`, but you don't have to provide every method.",
        "createdAt" : "2017-10-26T14:19:09Z",
        "updatedAt" : "2017-10-26T14:19:09Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "8b12b7c4-48ba-4b4b-b144-712f26bda888",
        "parentId" : "a8f556cf-becf-4860-be6e-f9266f5004d2",
        "authorId" : "b6bce987-55ab-49ec-b158-859af43bec18",
        "body" : "Yeah I considered that, as well as something like `Minimal<T, K extends string> = Pick<T, K> & Partial<T>`, but in the end those still feel just as onerous as `typeof fs` for the reason above (the actual type signatures for most of those methods are significantly more complicated than anyone using them would likely want to do, meaning you'd still need to cast to `typeof fs` even if it were `Partial<typeof fs>`. No one wants to implement\r\n\r\n```\r\nreadFileSync(path: PathLike | number, options?: { encoding?: null; flag?: string; } | null): Buffer;\r\nreadFileSync(path: PathLike | number, options: { encoding: string; flag?: string; } | string): string;\r\nreadFileSync(path: PathLike | number, options?: { encoding?: string | null; flag?: string; } | string | null): string | Buffer;\r\n```\r\n\r\nwhen all they need is\r\n\r\n```\r\nreadFileSync (path: string): string\r\n```\r\n\r\nSo, at the end of the day, I don't think using `Partial` would really provide a better experience, and would actually potentially be misleading - in that it neither enables you to actually only write the methods you need in the way you need them nor ensures that you didn't miss implementing something that would be needed. So I don't really see the value. I guess I'd either do `typeof fs` or `any` or `{ readFileSync: (path: string) => string, ... }`, and right now I'd lean towards the former.\r\n\r\nDoes that seem reasonable?",
        "createdAt" : "2017-10-26T14:41:13Z",
        "updatedAt" : "2017-10-26T14:41:14Z",
        "lastEditedBy" : "b6bce987-55ab-49ec-b158-859af43bec18",
        "tags" : [
        ]
      },
      {
        "id" : "a611e769-99b3-46c5-9b81-a9d7e88f0f8c",
        "parentId" : "a8f556cf-becf-4860-be6e-f9266f5004d2",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : ":+1:",
        "createdAt" : "2017-10-26T14:44:41Z",
        "updatedAt" : "2017-10-26T14:44:41Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      }
    ],
    "commit" : "98d388f5da570e8e6c308d34e7f919d9b0f8656c",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +30,34 @@    fs?: typeof fs;\n    console?: typeof console;\n    textFormat?: typeof cliColor;\n    stdin?: typeof process.stdin;\n}): void;"
  }
]