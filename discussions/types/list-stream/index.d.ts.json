[
  {
    "id" : "8cd6bb56-4cb6-41e2-9fc7-d1821e3338ff",
    "prId" : 30669,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30669#pullrequestreview-180974166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3898fa89-b04a-4e49-9fbf-5cdd3168dd5e",
        "parentId" : null,
        "authorId" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "body" : "@IanStorm  I'm surprised you moved away from using a class here. Was there a particular reason that you thought a new-able constant would be better?",
        "createdAt" : "2018-11-22T05:09:21Z",
        "updatedAt" : "2018-12-05T07:49:11Z",
        "lastEditedBy" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "tags" : [
        ]
      },
      {
        "id" : "f6ba4797-a209-4ff9-bcb7-22740549a1e8",
        "parentId" : "3898fa89-b04a-4e49-9fbf-5cdd3168dd5e",
        "authorId" : "8e90eeb3-a4fd-4d1b-a2c8-30fa0c9e0af1",
        "body" : "@uniqueiniquity In the first version of this Pull Request I actually forgot the case of instantiating `ListStream` without calling `new`. However, when I tried to extend the previous version of `index.d.ts` (containing class), I got a \"duplicate identifier\" error.\r\nIn general, important for me in this definition was the usage of the \"import style\" (i..e. `import * as ListStream from \"list-stream\";` over the \"require style\" (i.e. `import ListStream = require(\"list-stream\");`. As far as I can see, the good thing with the current state of the Pull Request is that it allows the usage of \"import style\" and \"require style\" at the same time.\r\nThat means the answer to your previous comment (https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30669#discussion_r235472188) should have been that the empty `namespace` was needed to enable the \"import style\". But then I found the issue of the missing definition for creating `ListStream` without `new`, which in the end required a major change to the definition.\r\n\r\nLooking forward to get your feedback.",
        "createdAt" : "2018-11-24T10:22:07Z",
        "updatedAt" : "2018-12-05T07:49:11Z",
        "lastEditedBy" : "8e90eeb3-a4fd-4d1b-a2c8-30fa0c9e0af1",
        "tags" : [
        ]
      },
      {
        "id" : "b1e74212-13a2-4a30-a0ff-35cfbfbb3e92",
        "parentId" : "3898fa89-b04a-4e49-9fbf-5cdd3168dd5e",
        "authorId" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "body" : "I see, that makes sense!\r\n\r\nI do have a recommendation regarding your \"import style\" point.\r\nUnder the ES6 spec, it is not correct to expect something imported with `import * as foo from \"bar\";` to be callable or newable. If consumers of this package want to use ES6-style imports in TypeScript, they should use `import ListStream from \"list-stream\";` and the `--esModuleInterop` compilation flag. You can do the same in your tests by adding that compilation option to the tsconfig.json in this folder.\r\n\r\nSee [here](https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#support-for-import-d-from-cjs-form-commonjs-modules-with---esmoduleinterop) and [here](https://github.com/definitelyTyped/DefinitelyTyped/#should-i-add-an-empty-namespace-to-a-package-that-doesnt-export-a-module-to-use-es6-style-imports) for more information.",
        "createdAt" : "2018-11-26T15:33:15Z",
        "updatedAt" : "2018-12-05T07:49:11Z",
        "lastEditedBy" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "tags" : [
        ]
      },
      {
        "id" : "de024f50-3110-4dec-b0cd-f7eba42bf57a",
        "parentId" : "3898fa89-b04a-4e49-9fbf-5cdd3168dd5e",
        "authorId" : "8e90eeb3-a4fd-4d1b-a2c8-30fa0c9e0af1",
        "body" : "Thank you for the recommendation. The links you provided were really helpful, not only with respect to this merge request, but also to improve my general understanding. :)\r\nI pushed new commits (f368a2dbfdd73511fbde3ab961ec111ce0486646 and 3f185078d8bdf57c6669b08a5ea135de65555d9d) to include the required changes.\r\n\r\nKeeping in mind that my goal was to support \"import style\" and \"require style\" I was thinking that the \"tests\" file should also reflect that. Currently it only reflects the \"import style\". So what would you say about having two `list-stream-tests.ts` files, i.e. one for \"import style\" renamed to (for example) `list-stream-tests-import.ts`, and another for \"require style\" named (for example) `list-stream-tests-require.ts`? Do you think it is a good idea? Is there any convention on how to name or create the test files?\r\n",
        "createdAt" : "2018-12-02T19:16:42Z",
        "updatedAt" : "2018-12-05T07:49:11Z",
        "lastEditedBy" : "8e90eeb3-a4fd-4d1b-a2c8-30fa0c9e0af1",
        "tags" : [
        ]
      },
      {
        "id" : "f8e258f9-d771-4760-9a10-3c5759f281fc",
        "parentId" : "3898fa89-b04a-4e49-9fbf-5cdd3168dd5e",
        "authorId" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "body" : "There definitely does need to be a `list-stream-tests.ts` file. However, you can make a `tests` directory and add your two test files there, then import them into `list-stream-tests.ts`. Alternatively, you can use both imports in a single file:\r\n```ts\r\nimport ListStream = require(\"list-stream\");\r\nimport ListStream2 from \"list-stream\";\r\nimport { obj } from \"list-stream\";\r\n```",
        "createdAt" : "2018-12-03T20:54:12Z",
        "updatedAt" : "2018-12-05T07:49:11Z",
        "lastEditedBy" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "50db82783af95ccf7ee14596963360a84b790393",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +14,18 @@}\n\ninterface ListStreamConstructor extends ListStreamMethod {\n    new(callback?: (err: Error, data: any[]) => void): ListStream;\n    new(options?: DuplexOptions, callback?: (err: Error, data: any[]) => void): ListStream;"
  }
]