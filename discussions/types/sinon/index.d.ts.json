[
  {
    "id" : "ae93e5ab-4b23-430c-910c-7cb149850f1f",
    "prId" : 15942,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/15942#pullrequestreview-33303366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acecd9ce-06f1-4097-ae75-38d564422fc3",
        "parentId" : null,
        "authorId" : "4793f071-7e81-45d9-a31c-b780467b4336",
        "body" : "I don't see any documentation on sinonjs.org for a getCalls() on the spy API, only getCall(). Can you provide a reference for this?\r\n\r\nI do see it's included in the Sinon source code, but I don't think that undocumented or private APIs are supposed to be included in typings. So this change might require clarification from the Sinon developers and a doc change before being accepted.\r\n\r\nAnyone more deeply involved with DefinitelyTyped please correct me on this if I'm wrong about what should be accepted!",
        "createdAt" : "2017-04-18T16:40:00Z",
        "updatedAt" : "2017-04-21T21:10:48Z",
        "lastEditedBy" : "4793f071-7e81-45d9-a31c-b780467b4336",
        "tags" : [
        ]
      },
      {
        "id" : "f7e5c51c-40e6-4cf3-95da-434919ad7090",
        "parentId" : "acecd9ce-06f1-4097-ae75-38d564422fc3",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "In a well-documented package you shouldn't include something that's not documented, since it may change.",
        "createdAt" : "2017-04-18T17:50:58Z",
        "updatedAt" : "2017-04-21T21:10:48Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3cdf5106d037dbe2553ee2df52f30039213e27d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +80,84 @@        invokeCallback(...args: any[]): void;\n        getCall(n: number): SinonSpyCall;\n        getCalls(): SinonSpyCall[];\n        reset(): void;\n        printf(format: string, ...args: any[]): string;"
  },
  {
    "id" : "b6589575-c052-4d23-bae4-05872142e7f8",
    "prId" : 16848,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/16848#pullrequestreview-41171044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f67863b7-2344-4b4e-9abc-0ab4f89d1d36",
        "parentId" : null,
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "Not sure if we should add this here as in fact it's not working (see https://github.com/sinonjs/sinon/issues/922) and considered to be changed.",
        "createdAt" : "2017-05-31T06:34:15Z",
        "updatedAt" : "2017-05-31T06:38:47Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "87f33882-ddc4-4219-a9e1-6d5705c85ad2",
        "parentId" : "f67863b7-2344-4b4e-9abc-0ab4f89d1d36",
        "authorId" : "6aed7036-ec9d-4b50-94bf-43195544a50a",
        "body" : "I guess you're referring to both the previously existing `throws(type?: string)` and the newly added `throwsException(type?: string)`.\r\n\r\nIn which case, the referenced issue hasn't resulted in any changes yet. So whether or not it gets changed in future shouldn't matter as right now it is part of the API. We shouldn't be ignoring parts of the library because we expect it to be removed in future, as people may well be using it still.",
        "createdAt" : "2017-05-31T08:39:51Z",
        "updatedAt" : "2017-05-31T08:39:51Z",
        "lastEditedBy" : "6aed7036-ec9d-4b50-94bf-43195544a50a",
        "tags" : [
        ]
      },
      {
        "id" : "81569db8-d594-426d-a17c-39b2317ef72a",
        "parentId" : "f67863b7-2344-4b4e-9abc-0ab4f89d1d36",
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "ok, fine with me.",
        "createdAt" : "2017-05-31T09:00:35Z",
        "updatedAt" : "2017-05-31T09:00:35Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      }
    ],
    "commit" : "1993274533d32cfbd6b09cde827e871c62e889e6",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +116,120 @@        throws(obj: any): SinonStub;\n        throwsArg(index: number): SinonStub;\n        throwsException(type?: string): SinonStub;\n        throwsException(obj: any): SinonStub;\n        rejects(): SinonStub;"
  }
]