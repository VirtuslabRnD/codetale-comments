[
  {
    "id" : "fbb3cfd6-7bd7-4a5f-a742-139e4e2909fe",
    "prId" : 33201,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33201#pullrequestreview-205382005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57d815df-cd43-47c3-a78b-79f512ab8692",
        "parentId" : null,
        "authorId" : "6aed7036-ec9d-4b50-94bf-43195544a50a",
        "body" : "edit: nevermind typescript behaves correctly here, ignore me",
        "createdAt" : "2019-02-19T18:35:33Z",
        "updatedAt" : "2019-02-28T22:39:35Z",
        "lastEditedBy" : "6aed7036-ec9d-4b50-94bf-43195544a50a",
        "tags" : [
        ]
      }
    ],
    "commit" : "345ccdbe9e39f149e2f9684eb233b52e0cb306f2",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +409,413 @@\n    const fnSpy = sinon.spy(fn); // $ExpectType SinonSpy<[string, number], boolean>\n    fn = fnSpy; // Should be assignable to original function\n    fnSpy('a', 1); // $ExpectType boolean\n    fnSpy.args; // $ExpectType [string, number][]"
  },
  {
    "id" : "6b898a0f-09b4-4c10-933c-f4acd733a9b1",
    "prId" : 33223,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33223#pullrequestreview-209347672",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26eef3fc-30d3-4cfe-9635-438514d19382",
        "parentId" : null,
        "authorId" : "05927cec-5f14-4464-8e4d-2c2ffa66ea69",
        "body" : "This test doesn't doesn't look correct. According to the docs, the value should either be a stub object or a return value to be used, i.e. here `SinonStub | number`, but it is a function",
        "createdAt" : "2019-02-28T22:35:55Z",
        "updatedAt" : "2019-02-28T22:35:55Z",
        "lastEditedBy" : "05927cec-5f14-4464-8e4d-2c2ffa66ea69",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce71dddafde2e36cf92f431cba647cafc311f23c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +89,93 @@    const privateFooBar: number = privateFooStubbedInstance.bar;\n    sb.createStubInstance(cls, {\n        foo: (arg1: string, arg2: number) => 2,\n        bar: 1\n    });"
  },
  {
    "id" : "957b8ab9-0c72-4a94-be66-20de0c49586d",
    "prId" : 33344,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33344#pullrequestreview-208726677",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a949903-4212-4e7b-8ea9-00e26d3ddd0b",
        "parentId" : null,
        "authorId" : "6aed7036-ec9d-4b50-94bf-43195544a50a",
        "body" : "don't add bluebird to these tests. the actual fix you're doing is not bluebird-specific, it is just that `PromiseLike` is more appropriate than the default implementation, `Promise`.\r\n\r\ninstead, add a test which uses an interface which matches `PromiseLike`. \r\n\r\n`promiseLikeFunc() { return MyFakePromise; }` where `MyFakePromise` implements `PromiseLike`",
        "createdAt" : "2019-02-24T19:38:10Z",
        "updatedAt" : "2019-02-27T18:58:19Z",
        "lastEditedBy" : "6aed7036-ec9d-4b50-94bf-43195544a50a",
        "tags" : [
        ]
      },
      {
        "id" : "cda4ef46-fd07-43e0-96e1-e3e381ec40d8",
        "parentId" : "9a949903-4212-4e7b-8ea9-00e26d3ddd0b",
        "authorId" : "a5686873-81ab-4d9c-a3c1-b20d6f9909d3",
        "body" : "I assumed that pulling Bluebird as a type dependency is not a big deal, since it is already present in the repo.\r\n\r\nI can see you point though, so I'll submit a fix in a couple of days.",
        "createdAt" : "2019-02-27T19:41:10Z",
        "updatedAt" : "2019-02-27T19:41:11Z",
        "lastEditedBy" : "a5686873-81ab-4d9c-a3c1-b20d6f9909d3",
        "tags" : [
        ]
      }
    ],
    "commit" : "e59a8682539c76db01b64ec5083dd5a23ae2197f",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +0,4 @@import sinon = require(\"sinon\");\nimport Bluebird = require(\"bluebird\");\n\nfunction testSandbox() {"
  },
  {
    "id" : "d5d2de92-e773-4916-9a4c-3b1b24e80df7",
    "prId" : 33344,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33344#pullrequestreview-208193583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4807f8d3-701b-4bc8-9913-6475d512b2fb",
        "parentId" : null,
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "Nit, `Bluebird.resolve('foo')` instead.",
        "createdAt" : "2019-02-26T20:37:12Z",
        "updatedAt" : "2019-02-26T20:37:15Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "e59a8682539c76db01b64ec5083dd5a23ae2197f",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +424,428 @@        foo() { }\n        promiseFunc() { return Promise.resolve('foo'); }\n        promiseLikeFunc() { return {} as any as Bluebird<string>; }\n    };\n    const instance = new obj();"
  },
  {
    "id" : "6f0602b7-1395-4ca0-bf61-3b0b2ad78a6c",
    "prId" : 33563,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33563#pullrequestreview-210049120",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1081e387-e25a-4d94-9dc7-b8db3c0488ad",
        "parentId" : null,
        "authorId" : "6aed7036-ec9d-4b50-94bf-43195544a50a",
        "body" : "i would suggest putting it in a const to make this very clear and avoiding casting it.\r\n\r\n```ts\r\nconst p: PromiseLike<string> = Promise.resolve('foo');\r\nreturn p;\r\n```",
        "createdAt" : "2019-03-04T09:23:34Z",
        "updatedAt" : "2019-03-04T09:23:34Z",
        "lastEditedBy" : "6aed7036-ec9d-4b50-94bf-43195544a50a",
        "tags" : [
        ]
      },
      {
        "id" : "f1a9066d-3141-4ebd-be78-596ac362b0a8",
        "parentId" : "1081e387-e25a-4d94-9dc7-b8db3c0488ad",
        "authorId" : "a5686873-81ab-4d9c-a3c1-b20d6f9909d3",
        "body" : "Could you explain the difference between casting and declaration with explicit type in this case?\r\n\r\nAs far as I understand, type checks are the same, e.g. one cannot cast an object that does not implement the interface.",
        "createdAt" : "2019-03-04T09:33:50Z",
        "updatedAt" : "2019-03-04T09:33:50Z",
        "lastEditedBy" : "a5686873-81ab-4d9c-a3c1-b20d6f9909d3",
        "tags" : [
        ]
      },
      {
        "id" : "103d5351-c2a1-4093-9474-1186f35b0864",
        "parentId" : "1081e387-e25a-4d94-9dc7-b8db3c0488ad",
        "authorId" : "6aed7036-ec9d-4b50-94bf-43195544a50a",
        "body" : "There's likely very little difference, if any (I would have to do some investigation to be sure). it was more to make it clearer, but now that I read it again, it seems fine actually as we'd just be introducing bloat.",
        "createdAt" : "2019-03-04T09:46:14Z",
        "updatedAt" : "2019-03-04T09:46:14Z",
        "lastEditedBy" : "6aed7036-ec9d-4b50-94bf-43195544a50a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c54b6a4be626ccf5668c324b80cfaf01a70c0b7",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +427,431 @@        foo() { }\n        promiseFunc() { return Promise.resolve('foo'); }\n        promiseLikeFunc() { return Promise.resolve('foo') as PromiseLike<string>; }\n    };\n    const instance = new obj();"
  },
  {
    "id" : "81b510c5-c054-4a48-8a8b-4a3171dce622",
    "prId" : 34048,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/34048#pullrequestreview-217145547",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2876d69-2f14-49cf-b205-d5d6d47b7e07",
        "parentId" : null,
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "Won't still allow stuff like `.calledWith('foo', undefined)` which would be invalid?",
        "createdAt" : "2019-03-21T00:26:43Z",
        "updatedAt" : "2019-05-23T09:27:13Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      },
      {
        "id" : "126d6d6f-e46b-49c1-af7f-1bd4346d6bc3",
        "parentId" : "c2876d69-2f14-49cf-b205-d5d6d47b7e07",
        "authorId" : "6aed7036-ec9d-4b50-94bf-43195544a50a",
        "body" : "a partial doesn't include extra values.\r\n\r\nas in, `Partial<[number, number]>` would not match `[1, 3, 4]`. if your inferred arguments allow for an `undefined` in the second position, sure.",
        "createdAt" : "2019-03-21T09:49:33Z",
        "updatedAt" : "2019-05-23T09:27:13Z",
        "lastEditedBy" : "6aed7036-ec9d-4b50-94bf-43195544a50a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d8c11028cf172e8e4592cc3677b50e3ae0e9bf0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +83,87 @@    const privateFooStubbedInstance = sb.createStubInstance(PrivateFoo);\n    stubInstance.foo.calledWith('foo', 1);\n    stubInstance.foo.calledWith('foo');\n    privateFooStubbedInstance.foo.calledWith();\n    const clsFoo: sinon.SinonStub<[string, number], number> = stubInstance.foo;"
  }
]