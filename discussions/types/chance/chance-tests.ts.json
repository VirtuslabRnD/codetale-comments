[
  {
    "id" : "31bf5efc-6f6c-4fe4-b6c0-6ff273fe699a",
    "prId" : 41103,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/41103#pullrequestreview-335955815",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f6f6066-27c1-46b6-a986-ae6acf7fedfc",
        "parentId" : null,
        "authorId" : "941bda12-4211-4ee1-9762-e91345df4253",
        "body" : "it doesn't seem like you're actually using the `comparator` here. perhaps the following will test it.\r\n\r\n```suggestion\r\nconst currencyComparator = (arr: Currency[], value: Currency): boolean => arr.findIndex(x => x.code === value.code && x.name === value.name) > -1;\r\nconst uniqCurrencies: Currency[] = chance.unique(chance.currency, 2, { comparator: currencyComparator });\r\n```",
        "createdAt" : "2019-12-18T05:52:48Z",
        "updatedAt" : "2019-12-18T16:57:37Z",
        "lastEditedBy" : "941bda12-4211-4ee1-9762-e91345df4253",
        "tags" : [
        ]
      },
      {
        "id" : "ff6cd3e9-4ef9-4fa3-b78d-d1b36b44c4e4",
        "parentId" : "3f6f6066-27c1-46b6-a986-ae6acf7fedfc",
        "authorId" : "a0cd088a-4e3d-46b1-8fdc-e576b7afcc7b",
        "body" : "I'm not going to remove the the uniqInts2 case as it's testing weather or not the passed in values come back through the options. But yeah that should be included.",
        "createdAt" : "2019-12-18T16:07:48Z",
        "updatedAt" : "2019-12-18T16:57:37Z",
        "lastEditedBy" : "a0cd088a-4e3d-46b1-8fdc-e576b7afcc7b",
        "tags" : [
        ]
      },
      {
        "id" : "2f0dd872-4a9e-484b-9e21-f9e97b645531",
        "parentId" : "3f6f6066-27c1-46b6-a986-ae6acf7fedfc",
        "authorId" : "a0cd088a-4e3d-46b1-8fdc-e576b7afcc7b",
        "body" : "Also, problem with this. Unless I'm mistaken, the interfaces and types in this library are not importable. I created a dummy interface for the test file, but I don't like it. Would there be an issue exposing these types?",
        "createdAt" : "2019-12-18T16:59:50Z",
        "updatedAt" : "2019-12-18T16:59:50Z",
        "lastEditedBy" : "a0cd088a-4e3d-46b1-8fdc-e576b7afcc7b",
        "tags" : [
        ]
      },
      {
        "id" : "bab2f6aa-e53f-486e-8eef-575cf2597000",
        "parentId" : "3f6f6066-27c1-46b6-a986-ae6acf7fedfc",
        "authorId" : "941bda12-4211-4ee1-9762-e91345df4253",
        "body" : "ah, good point. it's actually already exported as `Chance.Currency`, not `Currency` like my example indicates. so i think would actually be \r\n\r\n```typescript\r\nconst currencyComparator = (arr: Chance.Currency[], value: Chance.Currency): boolean => arr.findIndex(x => x.code === value.code && x.name === value.name) > -1;\r\n```\r\n\r\nyou should be able to replace your `currencyType` interface with that.",
        "createdAt" : "2019-12-18T21:16:55Z",
        "updatedAt" : "2019-12-18T21:16:55Z",
        "lastEditedBy" : "941bda12-4211-4ee1-9762-e91345df4253",
        "tags" : [
        ]
      },
      {
        "id" : "8b2c6403-c495-415e-8a3e-1ce13a529ce7",
        "parentId" : "3f6f6066-27c1-46b6-a986-ae6acf7fedfc",
        "authorId" : "a0cd088a-4e3d-46b1-8fdc-e576b7afcc7b",
        "body" : "I've already tried :/ \r\n![image](https://user-images.githubusercontent.com/12650208/71124319-71bac580-2199-11ea-9f8f-9876814cc874.png)\r\n",
        "createdAt" : "2019-12-18T21:23:04Z",
        "updatedAt" : "2019-12-18T21:23:04Z",
        "lastEditedBy" : "a0cd088a-4e3d-46b1-8fdc-e576b7afcc7b",
        "tags" : [
        ]
      },
      {
        "id" : "86baacc8-5281-454d-b6a6-d172e568de8f",
        "parentId" : "3f6f6066-27c1-46b6-a986-ae6acf7fedfc",
        "authorId" : "941bda12-4211-4ee1-9762-e91345df4253",
        "body" : "Ah, i see the problem. it's in the namespace, but not exprted. i misread it on my phone.\r\n\r\nfrankly, i think things like `Currency` _should_ be exported. if you look at the usage of `currency_pair` in the following test, you see that the object that's returned is _not_ typed. because the return types aren't exported, i don't think a user of the lib can appropriately type things that are returned. most of our tests are returning basic types so that's probably why it hasnt mattered so far.\r\n\r\nfor now, LGTM. this exporting thing ill try to take a look at when i have time. ",
        "createdAt" : "2019-12-23T15:28:32Z",
        "updatedAt" : "2019-12-23T15:28:32Z",
        "lastEditedBy" : "941bda12-4211-4ee1-9762-e91345df4253",
        "tags" : [
        ]
      },
      {
        "id" : "af12d511-7f52-4cc6-bd56-b1f5c9657390",
        "parentId" : "3f6f6066-27c1-46b6-a986-ae6acf7fedfc",
        "authorId" : "a0cd088a-4e3d-46b1-8fdc-e576b7afcc7b",
        "body" : "My thoughts exactly. I appreciate you looking this over! ",
        "createdAt" : "2019-12-23T17:51:59Z",
        "updatedAt" : "2019-12-23T17:51:59Z",
        "lastEditedBy" : "a0cd088a-4e3d-46b1-8fdc-e576b7afcc7b",
        "tags" : [
        ]
      }
    ],
    "commit" : "95268250e59be76de8c83b3c949911629890c1a6",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +20,24 @@\nconst uniqInts: number[] = chance.unique(chance.integer, 99);\nconst uniqInts2: number[] = chance.unique(a => chance.integer({ min: 0, max: 999 }) + a.value, 99, { value: 1000 });\n\ninterface currencyType { name: string; code: string; }"
  }
]