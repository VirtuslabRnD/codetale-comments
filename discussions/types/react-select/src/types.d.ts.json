[
  {
    "id" : "46271441-198e-4d5a-8034-6931e174a62d",
    "prId" : 50880,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50880#pullrequestreview-578891901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d98e15f2-b603-4263-a25e-43daef471be3",
        "parentId" : null,
        "authorId" : "29f233ef-91b5-4ab3-be8c-c101879fa178",
        "body" : "```suggestion\r\n    setValue: (newValue: ValueType<OptionType, IsMulti>, action: SetValueAction, option?: OptionType) => void;\r\n```\r\n\r\nShould this be optional?",
        "createdAt" : "2021-01-29T00:06:59Z",
        "updatedAt" : "2021-01-29T00:07:34Z",
        "lastEditedBy" : "29f233ef-91b5-4ab3-be8c-c101879fa178",
        "tags" : [
        ]
      },
      {
        "id" : "fa5e89f3-90bd-449b-a0c7-9a6e66e479d1",
        "parentId" : "d98e15f2-b603-4263-a25e-43daef471be3",
        "authorId" : "6d447f9d-4946-46c6-8162-102e21d6a2ed",
        "body" : "You don't have to use all the parameters (i.e., `setValue` can be a function that is just `(newValue: ValueType<OptionType, IsMulti>, action: SetValueAction) => void`), but I believe the `option` parameter will always be specified. Can you provide an example where this is not the case?",
        "createdAt" : "2021-01-29T00:25:25Z",
        "updatedAt" : "2021-01-29T00:25:26Z",
        "lastEditedBy" : "6d447f9d-4946-46c6-8162-102e21d6a2ed",
        "tags" : [
        ]
      },
      {
        "id" : "2be30893-5868-4c88-8d8f-cfa459e8eafa",
        "parentId" : "d98e15f2-b603-4263-a25e-43daef471be3",
        "authorId" : "29f233ef-91b5-4ab3-be8c-c101879fa178",
        "body" : "We have a few uses where `setValue` is called programmatically via `CommonProps`. Here's a contrived example:\r\n\r\n```tsx\r\nimport Select, { components } from 'react-select';\r\n\r\nconst options = [\r\n  { value: 'chocolate', label: 'Chocolate' },\r\n  { value: 'strawberry', label: 'Strawberry' },\r\n  { value: 'vanilla', label: 'Vanilla' },\r\n];\r\n\r\nexport default function ExampleSelect() {\r\n  return (\r\n    <Select\r\n      components={{\r\n        Menu({ children, ...props }) {\r\n          return (\r\n            <components.Menu {...props}>\r\n              <>\r\n                <button\r\n                  onClick={() => props.setValue(props.options, 'select-option')}\r\n                >\r\n                  Select all\r\n                </button>\r\n                {children}\r\n              </>\r\n            </components.Menu>\r\n          );\r\n        },\r\n      }}\r\n      options={options}\r\n      isMulti\r\n    />\r\n  );\r\n}\r\n```\r\n\r\nAlthough, now that I'm reviewing this logic, I believe we could programmatically set these values outside.",
        "createdAt" : "2021-01-29T00:48:10Z",
        "updatedAt" : "2021-01-29T00:48:11Z",
        "lastEditedBy" : "29f233ef-91b5-4ab3-be8c-c101879fa178",
        "tags" : [
        ]
      },
      {
        "id" : "fa9e8ae9-b8c8-40c0-b966-0076227f9303",
        "parentId" : "d98e15f2-b603-4263-a25e-43daef471be3",
        "authorId" : "6d447f9d-4946-46c6-8162-102e21d6a2ed",
        "body" : "Yes, thanks, after reviewing it does look there is precedent for it being optional (since it's not getting passed [here](https://github.com/JedWatson/react-select/blob/master/packages/react-select/src/Select.js#L832)).  I've made https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50901 to fix the oversight.",
        "createdAt" : "2021-01-29T02:01:01Z",
        "updatedAt" : "2021-01-29T02:01:01Z",
        "lastEditedBy" : "6d447f9d-4946-46c6-8162-102e21d6a2ed",
        "tags" : [
        ]
      },
      {
        "id" : "5879bfc1-90c9-4664-b056-be766d02327d",
        "parentId" : "d98e15f2-b603-4263-a25e-43daef471be3",
        "authorId" : "29f233ef-91b5-4ab3-be8c-c101879fa178",
        "body" : "Thanks!",
        "createdAt" : "2021-01-29T02:14:58Z",
        "updatedAt" : "2021-01-29T02:14:58Z",
        "lastEditedBy" : "29f233ef-91b5-4ab3-be8c-c101879fa178",
        "tags" : [
        ]
      }
    ],
    "commit" : "24409fa12d264e35153dde6dda00bf7bfe258e9e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +65,69 @@    selectOption: (option: OptionType) => void;\n    selectProps: SelectProps<OptionType, IsMulti, GroupType>;\n    setValue: (newValue: ValueType<OptionType, IsMulti>, action: SetValueAction, option: OptionType) => void;\n}\n"
  },
  {
    "id" : "30666d33-7cde-48e9-b89d-d99f13e49f62",
    "prId" : 50901,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50901#pullrequestreview-578934730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6fcdb9b-3c98-43a7-8a35-6eb46aabc104",
        "parentId" : null,
        "authorId" : "cbaebbb0-fbfb-4945-93e3-43e729226449",
        "body" : "Out of curiosity: Why `undefined` vs. `key?:`",
        "createdAt" : "2021-01-29T04:28:59Z",
        "updatedAt" : "2021-01-29T04:29:03Z",
        "lastEditedBy" : "cbaebbb0-fbfb-4945-93e3-43e729226449",
        "tags" : [
        ]
      },
      {
        "id" : "31ae5f82-a332-4043-b985-ecf472b824fa",
        "parentId" : "c6fcdb9b-3c98-43a7-8a35-6eb46aabc104",
        "authorId" : "6d447f9d-4946-46c6-8162-102e21d6a2ed",
        "body" : "I usually use `undefined` when the key is always specified but the value can be `undefined`. I use `?` when the key may or may not be specified. In this case the `option` key is always specified (see [code](https://github.com/JedWatson/react-select/blob/master/packages/react-select/src/Select.js#L797)), but its value might be `undefined`.",
        "createdAt" : "2021-01-29T04:33:41Z",
        "updatedAt" : "2021-01-29T04:34:20Z",
        "lastEditedBy" : "6d447f9d-4946-46c6-8162-102e21d6a2ed",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f8423f1c58f91265438f1366c9e8fcaac5f9b91",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +70,74 @@export interface SelectOptionActionMeta<OptionType extends OptionTypeBase> {\n    action: 'select-option';\n    option: OptionType | undefined;\n    name?: string;\n}"
  }
]