[
  {
    "id" : "01021fc9-49c6-4194-9d94-07d5e7f5ca9e",
    "prId" : 18439,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18439#pullrequestreview-56804423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c0acd1a-2583-4560-abe0-3ccb03ea706c",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "The value of `state` is actually the same as the value of `this`. You can check by doing a `===` comparison -- they are the same reference.\r\n\r\nThis is true of all the plugin methods that receive a `state` as their last parameter, including `Visitor`; which seems to be using an incorrect template argument.",
        "createdAt" : "2017-07-27T09:47:39Z",
        "updatedAt" : "2017-07-27T09:48:01Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "47d1462b-5d40-4437-a30c-4aee90e0c4ab",
        "parentId" : "7c0acd1a-2583-4560-abe0-3ccb03ea706c",
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "It also seems that the `state` type is shared with all visitors being visited during a single `traverse` call (i.e. all plugins share the same state object). I'm not sure it is possible to correctly type it in typescript :/",
        "createdAt" : "2017-07-27T09:51:44Z",
        "updatedAt" : "2017-07-27T09:51:59Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "cef90627-2979-4159-a952-a5acb3f0c224",
        "parentId" : "7c0acd1a-2583-4560-abe0-3ccb03ea706c",
        "authorId" : "ae01d18a-c527-430d-a5d4-4323e4f61e82",
        "body" : "@Kovensky Are you sure about that? For me that isn't the case with latest babel. Only inside the visitor functions `state` is equal to `this`.\r\n\r\n```js\r\nconst babel = require(\"babel-core\");\r\n\r\nfunction plugin() {\r\n  return {\r\n    pre(state) {\r\n      state.foo = \"foo\";\r\n      console.log(\"pre:\", state.foo, \", equal:\", this === state);\r\n    },\r\n    visitor: {\r\n      VariableDeclaration(path, state) {\r\n        console.log(\"visitor:\", state.foo, \", equal:\", this === state);\r\n        state.foo = \"bar\";\r\n      },\r\n    },\r\n    post(state) {\r\n      console.log(\"post:\", state.foo, \", equal:\", this === state);\r\n    },\r\n  };\r\n}\r\n\r\nbabel.transform(`const foo = \"Hello World\";`, { plugins: [plugin] });\r\n\r\n// logs:\r\npre: foo , equal: false\r\nvisitor: undefined , equal: true\r\npost: foo , equal: false\r\n```\r\n\r\nNotice how  `state` is never set to `bar`. Now compare this to setting state on `this`:\r\n\r\n```js\r\nconst babel = require(\"babel-core\");\r\n\r\nfunction plugin() {\r\n  return {\r\n    pre(state) {\r\n      this.foo = \"foo\";\r\n      console.log(\"pre:\", this.foo, \", equal:\", this === state);\r\n    },\r\n    visitor: {\r\n      VariableDeclaration(path, state) {\r\n        console.log(\"visitor:\", this.foo, \", equal:\", this === state);\r\n        this.foo = \"bar\";\r\n      },\r\n    },\r\n    post(state) {\r\n      console.log(\"post:\", this.foo, \", equal:\", this === state);\r\n    },\r\n  };\r\n}\r\n\r\nbabel.transform(`const foo = \"Hello World\";`, { plugins: [plugin] });\r\n\r\n// Logs:\r\npre: foo , equal: false\r\nvisitor: foo , equal: true\r\npost: bar , equal: false\r\n```\r\n\r\nMy PR fixes exactly that and makes `this` type safe by using the same interface in `pre+post` and `visitor` functions.",
        "createdAt" : "2017-07-27T17:50:32Z",
        "updatedAt" : "2017-07-27T17:50:55Z",
        "lastEditedBy" : "ae01d18a-c527-430d-a5d4-4323e4f61e82",
        "tags" : [
        ]
      },
      {
        "id" : "74cb3012-f369-401e-9c6b-e0861c846023",
        "parentId" : "7c0acd1a-2583-4560-abe0-3ccb03ea706c",
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "I wonder what _is_ `this` equivalent to then ü§î \r\n\r\nIt's hard to follow in the babel codebase since the `state` is handled inside a closure created by a helper function for creating such closures ü§∑‚Äç‚ôÄÔ∏è ",
        "createdAt" : "2017-08-17T01:09:02Z",
        "updatedAt" : "2017-08-17T01:09:02Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2b741f6a594ff929498de2685baf265837a12a2",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +21,25 @@    name?: string;\n    manipulateOptions?(opts: any, parserOpts: any): void;\n    pre?(this: S, state: any): void;\n    visitor: Visitor<S>;\n    post?(this: S, state: any): void;"
  },
  {
    "id" : "7990d959-aa21-44f5-93d8-2b2454f650e5",
    "prId" : 19428,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19428#pullrequestreview-60535846",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f346431e-31c8-413d-b1c8-e9a0478d634c",
        "parentId" : null,
        "authorId" : "684aaf20-f23a-4b2a-8070-073a826b9c21",
        "body" : "This `NodePath` isn't used. Did you want to use it for `wrapPluginVisitorMethod`?\r\n\r\nThe rest looks great.",
        "createdAt" : "2017-09-04T08:38:11Z",
        "updatedAt" : "2017-09-05T18:58:01Z",
        "lastEditedBy" : "684aaf20-f23a-4b2a-8070-073a826b9c21",
        "tags" : [
        ]
      },
      {
        "id" : "a38a7d84-a171-4603-b544-4a9691da99a3",
        "parentId" : "f346431e-31c8-413d-b1c8-e9a0478d634c",
        "authorId" : "b98a5c77-80f7-4dc9-91fe-dd30c35e735b",
        "body" : "Left over from my trying to get `wrapPluginVisitorMethod` to have better specified types ‚Äì¬†was going to ask about that actually. The callback function it takes and the function it returns can take any `NodePath` variant. I couldn't come up with a way to add concrete typing to those functions without enumerating every templated type, like is done in `babel-traverse`. Do you have a better way to do this?",
        "createdAt" : "2017-09-04T21:14:34Z",
        "updatedAt" : "2017-09-05T18:58:01Z",
        "lastEditedBy" : "b98a5c77-80f7-4dc9-91fe-dd30c35e735b",
        "tags" : [
        ]
      },
      {
        "id" : "676ec5c9-2a0c-4e65-9f8d-b7024d750d7f",
        "parentId" : "f346431e-31c8-413d-b1c8-e9a0478d634c",
        "authorId" : "684aaf20-f23a-4b2a-8070-073a826b9c21",
        "body" : "Simple `NodePath` (AKA `NodePath<Node>`) is okay in this case.",
        "createdAt" : "2017-09-05T09:04:26Z",
        "updatedAt" : "2017-09-05T18:58:01Z",
        "lastEditedBy" : "684aaf20-f23a-4b2a-8070-073a826b9c21",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2f49b8b1d8dbb61fd58c2b67920ab9d0acb9b05",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +11,15 @@export import template = require('babel-template');\nexport const version: string;\nimport traverse, { Visitor, NodePath } from \"babel-traverse\";\nexport { traverse, Visitor };\nimport { BabylonOptions } from \"babylon\";"
  }
]