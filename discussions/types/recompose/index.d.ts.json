[
  {
    "id" : "b01e5e2e-e83d-448d-9f3c-239bdc4d7fbe",
    "prId" : 29114,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/29114#pullrequestreview-161430618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "753911a1-18a7-4fc0-a7f5-8b78498d4c84",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "If `ComponentModifier` were generic, could this be simplified?",
        "createdAt" : "2018-09-27T22:28:14Z",
        "updatedAt" : "2018-10-04T02:03:10Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "22ed317a-799c-4ef2-a8a9-b4f020571dfe",
        "parentId" : "753911a1-18a7-4fc0-a7f5-8b78498d4c84",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "(i.e. as `ComponentModifier<P>`)",
        "createdAt" : "2018-09-27T22:30:27Z",
        "updatedAt" : "2018-10-04T02:03:10Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "c216e99c-7fb1-4278-a7a5-d4206809912f",
        "parentId" : "753911a1-18a7-4fc0-a7f5-8b78498d4c84",
        "authorId" : "1b764c0a-5cc7-4f94-90b6-47a5d67777d0",
        "body" : "`setPropTypes` is the only static property helper that needs to know the type of the props for the component that the resulting function will be called on, and is the only static property helper that should return a function that is limited to only being callable on a component with props of that type.\r\n\r\nIt needs to know the props since it is setting the `propTypes` static property which is [a validation map for the properties of the component](https://reactjs.org/docs/typechecking-with-proptypes.html).\r\n\r\nIn contrast, `setStatic` and `setDisplayName` both create functions that can be called on *any* component.\r\n\r\nMaking `ComponentModifier` generic would force `setStatic` and `setDisplayName` to require a type argument which would make the typing on the functions they return incorrect (more info below on the section for `setStatic`).",
        "createdAt" : "2018-09-28T17:09:43Z",
        "updatedAt" : "2018-10-04T02:03:10Z",
        "lastEditedBy" : "1b764c0a-5cc7-4f94-90b6-47a5d67777d0",
        "tags" : [
        ]
      },
      {
        "id" : "665e2b30-7655-41ef-908d-d5118495499d",
        "parentId" : "753911a1-18a7-4fc0-a7f5-8b78498d4c84",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "If `ComponentModifier` had an optional type parameter (e.g. `ComponentModifier<P = {}>`), then `setStatic` and `setDisplayName` would not need to be generic, would they?  Or were you making a subtler objection (e.g. that doing it that way might somehow degrade type inference)?",
        "createdAt" : "2018-09-29T00:03:52Z",
        "updatedAt" : "2018-10-04T02:03:10Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "64974dbe-5025-4d21-a4f5-16f7bb410746",
        "parentId" : "753911a1-18a7-4fc0-a7f5-8b78498d4c84",
        "authorId" : "1b764c0a-5cc7-4f94-90b6-47a5d67777d0",
        "body" : "I played with that...if `ComponentModifier` has an optional type parameter then `setStatic` and `setDisplayName` still need to be generic and need to pass the correct `P` to `ComponentModifier`, if they don't then `P` will default to `{}` and the resulting function will be incorrectly typed as only callable on a component with no props.\r\n\r\nCode update\r\n---\r\n\r\nI removed `ComponentModifier` since it seemed to be causing confusion and updated the typing for `setStatic` and `setDisplayName` to very clearly return a function that can be called on a component and will return what it was called on since that is what they do: [`setStatic`](https://github.com/acdlite/recompose/blob/68c560b216f2530796147bee07f45bf2b9bf0412/src/packages/recompose/setStatic.js#L3-L5), [`setDisplayName`](https://github.com/acdlite/recompose/blob/68c560b216f2530796147bee07f45bf2b9bf0412/src/packages/recompose/setDisplayName.js#L3).",
        "createdAt" : "2018-10-04T02:47:57Z",
        "updatedAt" : "2018-10-04T02:47:57Z",
        "lastEditedBy" : "1b764c0a-5cc7-4f94-90b6-47a5d67777d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "b10fdc2261eeaa4a7451c077c00460ec19e60d2b",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +278,282 @@    export function setPropTypes<P>(\n        propTypes: ValidationMap<P>\n    ): <T extends Component<P>>(component: T) => T;\n\n    // setDisplayName: https://github.com/acdlite/recompose/blob/master/docs/API.md#setDisplayName"
  },
  {
    "id" : "8b8445e4-0a48-471c-9b62-12af39fb4ca9",
    "prId" : 29114,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/29114#pullrequestreview-161430078",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f809a976-ab29-4b57-bc71-bf4daabd9b13",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "If any caller used to specify a type argument, they will be broken by this.",
        "createdAt" : "2018-09-27T22:29:22Z",
        "updatedAt" : "2018-10-04T02:03:10Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "221b1577-0d4e-45af-b35f-516fae3c61d0",
        "parentId" : "f809a976-ab29-4b57-bc71-bf4daabd9b13",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "(Consider `setStatic<P = {}>` and `ComponentModifier<P>`.)",
        "createdAt" : "2018-09-27T22:30:06Z",
        "updatedAt" : "2018-10-04T02:03:10Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "61847128-5908-45c9-88e0-8af1318d02ad",
        "parentId" : "f809a976-ab29-4b57-bc71-bf4daabd9b13",
        "authorId" : "1b764c0a-5cc7-4f94-90b6-47a5d67777d0",
        "body" : "Hey @amcasey, thanks for taking a look at this.\r\n\r\nYes, it is a breaking change, the typing for `setStatic` should not take a type argument.\r\n\r\n`setStatic` creates a function that can be called on *any* component.  It sets a static property on the component and returns it, [that's literally all it does](https://github.com/acdlite/recompose/blob/5b8498a48e8f7ad9dd6b2706be2fc3311d86543c/src/packages/recompose/setStatic.js#L3-L5).\r\n\r\nRequiring a type argument means that the resulting function is incorrectly typed as only being able to accept a component with props matching the type that was passed as the type argument when it was created with `setStatic`.\r\n\r\nIn addition to artificially limiting the resulting function, the type argument also requires the user to know the props of the component they are planning on calling the function with and to accurately pass the type of those props when creating the function using `setStatic`.  This creates unnecessary work and introduces the possibility for errors and confusion if the type argument is not passed correctly.  (I've answered questions on SO about this).\r\n\r\nThis change corrects the typing for `setStatic` which also simplifies its use.\r\n\r\nI bumped the version, is there anything else that needs to be done for a breaking change like this?",
        "createdAt" : "2018-09-28T16:43:56Z",
        "updatedAt" : "2018-10-04T02:03:10Z",
        "lastEditedBy" : "1b764c0a-5cc7-4f94-90b6-47a5d67777d0",
        "tags" : [
        ]
      },
      {
        "id" : "bd3d6065-1008-4fff-8f18-11c1f706dde9",
        "parentId" : "f809a976-ab29-4b57-bc71-bf4daabd9b13",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "I trust your judgement (and mostly understand your explanation) that setStatic *shouldn't* be generic.  However, this appears to be quite a widely used package and so some weight has to be given to call patterns that exist now.  Personally, I think it would be very helpful to have input from an additional reviewer who knows more about the domain, but I'm not sure how to find such a person.  In the interim, I think bumping the version is probably a sufficient mitigation.",
        "createdAt" : "2018-09-29T00:09:54Z",
        "updatedAt" : "2018-10-04T02:03:10Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "e158e3ad-59b1-4ffb-9fd5-73dc71e2b712",
        "parentId" : "f809a976-ab29-4b57-bc71-bf4daabd9b13",
        "authorId" : "1b764c0a-5cc7-4f94-90b6-47a5d67777d0",
        "body" : "Anyone who was using the older incorrect typing will have code that looks something like this:\r\n\r\n`setStatic<IProps>('prop', 'value')`\r\n\r\nWhen they update to the new typing they will see an error for that line like this:\r\n\r\n`[ts] Expected 0 type arguments, but got 1.`\r\n\r\nThey will simply need to remove the type argument so the line looks like this:\r\n\r\n`setStatic('prop', 'value')`\r\n\r\nThe same process and result applies to any previous uses of `setDisplayName`.\r\n\r\nThis is an easy code migration and the benefit is correct typing.  An additional benefit is that anyone using `recompose` for the first time won't need to worry about the unnecessary type arguments for `setStatic` and `setDisplayName` and will get correct typing.",
        "createdAt" : "2018-10-04T02:43:17Z",
        "updatedAt" : "2018-10-04T02:43:17Z",
        "lastEditedBy" : "1b764c0a-5cc7-4f94-90b6-47a5d67777d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "b10fdc2261eeaa4a7451c077c00460ec19e60d2b",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +271,275 @@\n    // setStatic: https://github.com/acdlite/recompose/blob/master/docs/API.md#setStatic\n    export function setStatic(\n        key: string, value: any\n    ): <T extends Component>(component: T) => T;"
  },
  {
    "id" : "1379f3a9-1cee-48a0-88d0-f3c560ba86d4",
    "prId" : 30602,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30602#pullrequestreview-183789193",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b588d406-f84a-418a-be9f-187c2fdc9aa2",
        "parentId" : null,
        "authorId" : "43014ae0-4cd4-4c01-8371-bef42f85ccbb",
        "body" : "BTW don't you think it would be even better to replace `TUpdaters extends StateHandlerMap<TState>` with `TUpdaters = StateHandlerMap<TState>`, so we could set a custom `TUpdaters` without extending the default `StateHandlerMap` ? It shouldn't introduce any breaking change.",
        "createdAt" : "2018-12-11T16:55:16Z",
        "updatedAt" : "2018-12-11T16:55:20Z",
        "lastEditedBy" : "43014ae0-4cd4-4c01-8371-bef42f85ccbb",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7e72529b207c1529dd2ad7707f154ac0e359b86",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +154,158 @@      [updaterName in keyof TUpdaters]: (state: TState, props: TOutter) => TUpdaters[updaterName];\n    };\n    export function withStateHandlers<TState, TUpdaters extends StateHandlerMap<TState>, TOutter = {}>(\n      createProps: TState | mapper<TOutter, TState>,\n      stateUpdaters: StateUpdaters<TOutter, TState, TUpdaters>,"
  }
]