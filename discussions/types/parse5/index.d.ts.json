[
  {
    "id" : "9414c17f-2126-469e-bd94-d37f70af7070",
    "prId" : 36817,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36817#pullrequestreview-269408086",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97e09bbb-f915-4b2e-b145-199d97ef9bb7",
        "parentId" : null,
        "authorId" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "body" : "This all looks reasonable given the types already defined here, but nothing is _actually_ stricter because of this, right? Because `DefaultTreeChildNode | object` reduces to just `object` (unless the union is being used to check a fresh object literal, in which case it operates a little differently).",
        "createdAt" : "2019-07-16T20:05:13Z",
        "updatedAt" : "2019-07-16T20:08:05Z",
        "lastEditedBy" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "tags" : [
        ]
      },
      {
        "id" : "5c75286d-4e0d-421b-bb91-dcc6767f35e9",
        "parentId" : "97e09bbb-f915-4b2e-b145-199d97ef9bb7",
        "authorId" : "d44309c9-c29f-40b9-ac5c-c22f6acf95c8",
        "body" : "Oh @andrewbranch i'm sorry, I had a lot of work to do on my main job, so completely forgot about this PR and now received the notification about it's merge.\r\n\r\nThe main idea is that:\r\n1. now you can't pass `DefaultTreeDocumentType`  to `getParentNode`\r\n2. now you have a generic type for all nodes that could have parent.\r\n\r\nOne more thing I have to fix here is type `childNodes`  property in `DefaultTreeParentNode` as `DefaultTreeChildNode` so this give an ability to write node traversal code like `node.childNodes[0].parentNode` (which return same node). ",
        "createdAt" : "2019-07-19T16:31:27Z",
        "updatedAt" : "2019-07-19T16:31:28Z",
        "lastEditedBy" : "d44309c9-c29f-40b9-ac5c-c22f6acf95c8",
        "tags" : [
        ]
      },
      {
        "id" : "5b849f83-cc90-4b90-91c0-2691b5d5bf48",
        "parentId" : "97e09bbb-f915-4b2e-b145-199d97ef9bb7",
        "authorId" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "body" : "> now you can't pass DefaultTreeDocumentType to getParentNode\r\n\r\nBut that‚Äôs not true. You can pass literally any object type, because that‚Äôs what `object` means.\r\n\r\n<img width=\"650\" alt=\"image\" src=\"https://user-images.githubusercontent.com/3277153/61552498-d6b49880-aa0c-11e9-8756-45571087582a.png\">\r\n\r\nAll these `| object` basically make all the other typings meaningless. I merged this because that was already the case for _everything_ in these typings, but if you want to fix them in the future, you need to get rid of those union types.",
        "createdAt" : "2019-07-19T17:08:24Z",
        "updatedAt" : "2019-07-19T17:08:24Z",
        "lastEditedBy" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "tags" : [
        ]
      },
      {
        "id" : "bee6f936-e8a1-4c6d-b1f3-739b670e53b6",
        "parentId" : "97e09bbb-f915-4b2e-b145-199d97ef9bb7",
        "authorId" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "body" : "And by the way, if you intend to ensure that, e.g., ‚Äúnow you can't pass DefaultTreeDocumentType to getParentNode,‚Äù you should add that as a test case with `// $ExpectError`, so you (and reviewers here) don‚Äôt have to guess at what the effect of a PR is.",
        "createdAt" : "2019-07-19T17:10:30Z",
        "updatedAt" : "2019-07-19T17:10:31Z",
        "lastEditedBy" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "tags" : [
        ]
      },
      {
        "id" : "40422051-0bdb-4910-8c5d-1f3006240b89",
        "parentId" : "97e09bbb-f915-4b2e-b145-199d97ef9bb7",
        "authorId" : "43da0a50-8183-4edc-8df9-65a0d8e196b7",
        "body" : "@andrewbranch thank you so much for this comment, I'm not that familiar with `ts` and I was banging my head on this for a long time.\r\n\r\nDo you see any reason why the `| object` is even there? Can it be removed? Not only it creates the case that you described in https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36817/files#r305446160, but using these typedefs is completely meaningless as typescript always thinks that anything returned by parser is just `object` with no interface props available üò≠ \r\n\r\n<img width=\"567\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5036933/62240990-80663300-b3d8-11e9-82e2-69375afecf01.png\">\r\n",
        "createdAt" : "2019-07-31T19:17:05Z",
        "updatedAt" : "2019-07-31T19:17:05Z",
        "lastEditedBy" : "43da0a50-8183-4edc-8df9-65a0d8e196b7",
        "tags" : [
        ]
      },
      {
        "id" : "7f3df624-5b66-423e-ab8c-1ffce63d82c5",
        "parentId" : "97e09bbb-f915-4b2e-b145-199d97ef9bb7",
        "authorId" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "body" : "Sorry, I'm not familiar enough with parse5 to know if this would break anyone or not :/\r\n\r\nIt definitely seems wrong, but it's possible that it's wrong for a _reason_. This is kind of a weird package because the JS is used by millions of people every day (it‚Äôs a dependency of jsdom, notably), but relatively few people are depending on the types. Still, the types package has some popular-ish dependencies, so my advice would be to test whether your changes break some of the more popular ones there: https://www.npmjs.com/browse/depended/@types/parse5\r\n\r\nA quick sampling shows these are fairly popular:\r\n\r\n- dom5\r\n- polymer-analyzer\r\n- polyserve\r\n",
        "createdAt" : "2019-07-31T22:53:44Z",
        "updatedAt" : "2019-07-31T22:53:44Z",
        "lastEditedBy" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "tags" : [
        ]
      },
      {
        "id" : "b743d659-d097-4546-a488-768692dedc07",
        "parentId" : "97e09bbb-f915-4b2e-b145-199d97ef9bb7",
        "authorId" : "43da0a50-8183-4edc-8df9-65a0d8e196b7",
        "body" : "Thanks for some guidance! I'll try looking into it!",
        "createdAt" : "2019-08-01T05:54:31Z",
        "updatedAt" : "2019-08-01T05:54:32Z",
        "lastEditedBy" : "43da0a50-8183-4edc-8df9-65a0d8e196b7",
        "tags" : [
        ]
      }
    ],
    "commit" : "b00fe0f4fec35c5c41217bff1ddd03768622aa40",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +267,271 @@ * Cast to the actual AST interface (e.g. {@link parse5.DefaultTreeChildNode}) to get access to the properties.\n */\nexport type ChildNode = DefaultTreeChildNode | object;\n/**\n * Generic ParentNode interface."
  }
]