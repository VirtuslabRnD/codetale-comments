[
  {
    "id" : "30f86abc-1504-4883-a680-9d5ec245d5b4",
    "prId" : 17082,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17082#pullrequestreview-45034848",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "887595cb-386e-4991-a103-9b31cd84e45d",
        "parentId" : null,
        "authorId" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "body" : "did you mean to leave this here?",
        "createdAt" : "2017-06-16T03:49:23Z",
        "updatedAt" : "2017-06-16T03:49:23Z",
        "lastEditedBy" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "tags" : [
        ]
      },
      {
        "id" : "cc6d30e8-da0e-48a5-838a-98dc03499da9",
        "parentId" : "887595cb-386e-4991-a103-9b31cd84e45d",
        "authorId" : "284e3fa9-dee8-440e-a81c-8cff890cc23b",
        "body" : "@vsiao oh uh I wasn't expecting this to be merged until your suggestion was applied :)  but yep this was intentional to gain the target attribute.",
        "createdAt" : "2017-06-20T05:20:39Z",
        "updatedAt" : "2017-06-20T05:20:39Z",
        "lastEditedBy" : "284e3fa9-dee8-440e-a81c-8cff890cc23b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c19e8e8862acb0fff191b9d7413ead46bed7c5b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +334,338 @@        target: EventTarget & T;\n    }\n\n    interface ChangeEvent<T> extends SyntheticEvent<T> {\n        target: EventTarget & T;"
  },
  {
    "id" : "42002e5e-b8a1-479a-8d0f-faedd0ce87f8",
    "prId" : 17947,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17947#pullrequestreview-49331883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62bc8683-cf01-4711-b196-0943086077b5",
        "parentId" : null,
        "authorId" : "f8cc332b-a66e-442c-8a4a-388a74c3ed9a",
        "body" : "In what situation is it an array of strings?",
        "createdAt" : "2017-07-11T16:57:30Z",
        "updatedAt" : "2017-07-11T16:57:30Z",
        "lastEditedBy" : "f8cc332b-a66e-442c-8a4a-388a74c3ed9a",
        "tags" : [
        ]
      },
      {
        "id" : "81ccf258-eff7-447f-98a7-f145ea83a63e",
        "parentId" : "62bc8683-cf01-4711-b196-0943086077b5",
        "authorId" : "95712c81-eb7a-41a6-99e3-df0efb59a9b1",
        "body" : "In the case of a Select, it might be in  `<select multiple>`, I simply kept the definition that existed before and distributed it to form fields",
        "createdAt" : "2017-07-11T20:10:56Z",
        "updatedAt" : "2017-07-11T20:10:57Z",
        "lastEditedBy" : "95712c81-eb7a-41a6-99e3-df0efb59a9b1",
        "tags" : [
        ]
      },
      {
        "id" : "01ddeefb-0c96-4191-86c2-5623fe806cea",
        "parentId" : "62bc8683-cf01-4711-b196-0943086077b5",
        "authorId" : "95712c81-eb7a-41a6-99e3-df0efb59a9b1",
        "body" : "ah sorry, I see it's not my pull request, typed too fast. I missed this one.\r\n\r\nThis definition looks correct to me.",
        "createdAt" : "2017-07-11T20:12:11Z",
        "updatedAt" : "2017-07-11T20:12:11Z",
        "lastEditedBy" : "95712c81-eb7a-41a6-99e3-df0efb59a9b1",
        "tags" : [
        ]
      },
      {
        "id" : "1397edea-c42d-41d7-bd5a-57536308cb60",
        "parentId" : "62bc8683-cf01-4711-b196-0943086077b5",
        "authorId" : "42bd9d99-29b4-4d45-97f8-56517795165d",
        "body" : "Not sure about the use case of an array of strings, but that was the previous definition of the value prop:\r\n\r\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/blob/fec422d2266ff5041bbc8082ca4c1d675f83efed/types/react/index.d.ts#L2449",
        "createdAt" : "2017-07-11T21:15:49Z",
        "updatedAt" : "2017-07-11T21:15:49Z",
        "lastEditedBy" : "42bd9d99-29b4-4d45-97f8-56517795165d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fd96da0fe213d4948b5800628510ea5e8fcaa63",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2790,2794 @@        required?: boolean;\n        size?: number;\n        value?: string | string[] | number;\n        onChange?: ChangeEventHandler<T>;\n    }"
  },
  {
    "id" : "9d0c432c-ba06-4678-b486-0fa6494f3c28",
    "prId" : 18463,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18463#pullrequestreview-53008403",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7aa5bdcc-07f5-437d-bb82-0d499949d83a",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "I don't know how dtslint works here but I assume it's expecting you to copy the old react 15 `index.d.ts` to `react/v15/`.",
        "createdAt" : "2017-07-28T08:58:16Z",
        "updatedAt" : "2017-07-31T19:10:30Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "90342646-7802-4559-b7f6-043074a1faed",
        "parentId" : "7aa5bdcc-07f5-437d-bb82-0d499949d83a",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "That's actually not necessary, but if you do want to maintain multiple versions of react in parallel, you need to copy *all* of the old definitions to `v15` (incl. `tsconfig.json`, `tslint.json`, and `test`), not just `index.d.ts`.\r\n`README.md` is ignored by types-publisher, so this might be a good time to move it into a comment instead.",
        "createdAt" : "2017-07-28T14:12:08Z",
        "updatedAt" : "2017-07-31T19:10:30Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "2504f5bb-605e-4c9e-a8cb-468672fa28fc",
        "parentId" : "7aa5bdcc-07f5-437d-bb82-0d499949d83a",
        "authorId" : "f82690bf-f608-440c-a604-3e01e744204c",
        "body" : "Tests are now passing.",
        "createdAt" : "2017-07-28T18:41:55Z",
        "updatedAt" : "2017-07-31T19:10:30Z",
        "lastEditedBy" : "f82690bf-f608-440c-a604-3e01e744204c",
        "tags" : [
        ]
      }
    ],
    "commit" : "035228e304d80a630a775c3e64d009792bf23862",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +-1,3 @@// Type definitions for React 16.0\n// Project: http://facebook.github.io/react/\n// Definitions by: Asana <https://asana.com>"
  },
  {
    "id" : "b0d20609-f183-4a8c-80d3-fb6204c35ead",
    "prId" : 18463,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18463#pullrequestreview-53006607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80e78c4b-110a-43ed-b75d-360599a27b14",
        "parentId" : null,
        "authorId" : "f8cc332b-a66e-442c-8a4a-388a74c3ed9a",
        "body" : "The stack is a string and not an array?",
        "createdAt" : "2017-07-28T17:36:36Z",
        "updatedAt" : "2017-07-31T19:10:30Z",
        "lastEditedBy" : "f8cc332b-a66e-442c-8a4a-388a74c3ed9a",
        "tags" : [
        ]
      },
      {
        "id" : "e7cae755-b1ad-40e8-a2ee-a263ae8fbf89",
        "parentId" : "80e78c4b-110a-43ed-b75d-360599a27b14",
        "authorId" : "f82690bf-f608-440c-a604-3e01e744204c",
        "body" : "Yep! Here's a [pen](https://codepen.io/anon/pen/jLbJMj?editors=0010).",
        "createdAt" : "2017-07-28T18:34:10Z",
        "updatedAt" : "2017-07-31T19:10:30Z",
        "lastEditedBy" : "f82690bf-f608-440c-a604-3e01e744204c",
        "tags" : [
        ]
      }
    ],
    "commit" : "035228e304d80a630a775c3e64d009792bf23862",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +3400,3404 @@         * Captures which component contained the exception, and it's ancestors.\n         */\n        componentStack: string;\n    }\n}"
  },
  {
    "id" : "2d75946a-7165-4f7e-98b7-241a15f5afa5",
    "prId" : 19210,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19210#pullrequestreview-57633732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "baaa2ec1-22cf-471a-a6bd-a8e9c331ab7d",
        "parentId" : null,
        "authorId" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "body" : "Should be `DetailedReactHTMLElement<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>`, I think.",
        "createdAt" : "2017-08-21T23:15:26Z",
        "updatedAt" : "2017-08-21T23:15:44Z",
        "lastEditedBy" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb270d5e3e5003766f16afcb0411501d3440c02",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +189,193 @@        type: \"input\",\n        props?: InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement>,\n        ...children: ReactNode[]): DetailedReactHTMLElement<{}, HTMLInputElement>;\n    function createElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        type: keyof ReactHTML,"
  },
  {
    "id" : "598bf8e2-4c89-4575-978a-f687c7f60341",
    "prId" : 20595,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20595#pullrequestreview-69644672",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad706a02-254d-4dda-afce-120c6103b6d6",
        "parentId" : null,
        "authorId" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "body" : "You could also change the definition to take a union of string literal types to describe the set of valid arguments.",
        "createdAt" : "2017-10-16T17:30:46Z",
        "updatedAt" : "2017-10-16T17:30:46Z",
        "lastEditedBy" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "tags" : [
        ]
      },
      {
        "id" : "ef28569a-6d1c-48fd-a1b9-0073ae0ca737",
        "parentId" : "ad706a02-254d-4dda-afce-120c6103b6d6",
        "authorId" : "699779f4-7dc1-4596-8cd0-10ea0c5d476f",
        "body" : "I would, but there are some none standard values that are useful in some browsers in some circumstances. I could try to list those too but I feel that the situation is that we then are trying to specify higher type safety than there is. All strings are allowed even though only a subset is usable which is similar to the situation with array indices, real numbers are allowed, just not useful. I also think many valid uses of it would error due to literal type widening as it is likely that you for example have an array of modifiers that you check.",
        "createdAt" : "2017-10-16T17:54:49Z",
        "updatedAt" : "2017-10-16T17:54:49Z",
        "lastEditedBy" : "699779f4-7dc1-4596-8cd0-10ea0c5d476f",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd13d12eccf9a989150cb2d23d6d75f3181edd2a",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +494,498 @@        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: string): boolean;"
  },
  {
    "id" : "ff1cec7d-b317-4d92-a475-d6e15c06f6be",
    "prId" : 20769,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20769#pullrequestreview-116128681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ec0e67e-a77d-4996-9f79-99dc6ffc6ec4",
        "parentId" : null,
        "authorId" : "d87cfedc-ddf5-46da-905c-ced83376309b",
        "body" : "Hi @artem-malko, i've tried to use the `as` attribute on a component that extends `AnchorHTMLAttributes`. Something like the following:\r\n```ts\r\ninterface MyCustomComponentProps extends AnchorHTMLAttributes<HTMLAnchorElement> {\r\n  as: React.ComponentClass<{}> | React.StatelessComponent<{}> | string;\r\n}\r\n```\r\n\r\nBut this is not allowed as the `as` attribute is defined on AnchorHTMLAttributes, so i tracked it down to this PR and through that i found the preload standard. https://w3c.github.io/preload/#as-attribute\r\n\r\nThe standard clearly defines the `as` attribute for the `<link />` element, but i can't find any info on it also being an attribute for the `<a />` element? Could you clarify to me why you also added it here?",
        "createdAt" : "2018-04-26T18:44:38Z",
        "updatedAt" : "2018-04-26T18:44:38Z",
        "lastEditedBy" : "d87cfedc-ddf5-46da-905c-ced83376309b",
        "tags" : [
        ]
      },
      {
        "id" : "bfeb1017-633f-4651-bd8d-f89ad1e427e0",
        "parentId" : "5ec0e67e-a77d-4996-9f79-99dc6ffc6ec4",
        "authorId" : "d87cfedc-ddf5-46da-905c-ced83376309b",
        "body" : "@johnnyreilly since you merged it i hope you might know more :)",
        "createdAt" : "2018-04-27T10:07:38Z",
        "updatedAt" : "2018-04-27T10:07:38Z",
        "lastEditedBy" : "d87cfedc-ddf5-46da-905c-ced83376309b",
        "tags" : [
        ]
      },
      {
        "id" : "12982f23-f7d0-41f8-8bcf-6f032f4cb78c",
        "parentId" : "5ec0e67e-a77d-4996-9f79-99dc6ffc6ec4",
        "authorId" : "c2c415fe-d8c9-4f57-ad51-cbd4c4fa80f1",
        "body" : "Yes, you are right! It is not useful now.\r\nAs I remember, I've added it because of typescript. There were some errors in console, if as attr is not in AnchorHTMLAttributes. So, I think, it is possible to get rid of it now.",
        "createdAt" : "2018-04-28T01:25:51Z",
        "updatedAt" : "2018-04-28T01:25:51Z",
        "lastEditedBy" : "c2c415fe-d8c9-4f57-ad51-cbd4c4fa80f1",
        "tags" : [
        ]
      },
      {
        "id" : "74283cf5-73dc-44d6-9be5-deee6f5d97f6",
        "parentId" : "5ec0e67e-a77d-4996-9f79-99dc6ffc6ec4",
        "authorId" : "d87cfedc-ddf5-46da-905c-ced83376309b",
        "body" : "Nice, thanks @artem-malko, i'll create a PR to remove it :D",
        "createdAt" : "2018-04-28T09:10:09Z",
        "updatedAt" : "2018-04-28T09:10:19Z",
        "lastEditedBy" : "d87cfedc-ddf5-46da-905c-ced83376309b",
        "tags" : [
        ]
      }
    ],
    "commit" : "78d0bd0b55ead067c23e15c39a5cd4163d84cf1d",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +2604,2608 @@        target?: string;\n        type?: string;\n        as?: string;\n    }\n"
  },
  {
    "id" : "1d98b04b-7f9c-47a9-b94c-6371ccdcbe1e",
    "prId" : 21146,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21146#pullrequestreview-75914609",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88da3951-4bb8-45eb-b099-cf0cdc4e9b27",
        "parentId" : null,
        "authorId" : "9659474b-ff65-4639-a0c5-317124d10049",
        "body" : "Can it be `type: string | ComponentClass<P> | SFC<P> | Fragment` or I'm missing something? (same remark for code below)",
        "createdAt" : "2017-10-31T23:13:23Z",
        "updatedAt" : "2017-11-06T20:28:29Z",
        "lastEditedBy" : "9659474b-ff65-4639-a0c5-317124d10049",
        "tags" : [
        ]
      },
      {
        "id" : "05594c2f-fd92-46c8-a61b-e126e9a1d311",
        "parentId" : "88da3951-4bb8-45eb-b099-cf0cdc4e9b27",
        "authorId" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "body" : "Are you suggesting that I also add a new type alias named `Fragment` that is `symbol | number` and then use that instead as shorthand?",
        "createdAt" : "2017-11-06T20:39:05Z",
        "updatedAt" : "2017-11-06T20:39:05Z",
        "lastEditedBy" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "tags" : [
        ]
      },
      {
        "id" : "2124ea15-68ed-4b17-87de-71bcfa30847e",
        "parentId" : "88da3951-4bb8-45eb-b099-cf0cdc4e9b27",
        "authorId" : "9659474b-ff65-4639-a0c5-317124d10049",
        "body" : "@uniqueiniquity sorry did not see your comment\r\n> new type alias named `Fragment` that is `symbol | number`\r\n\r\nYes, you have also `const Fragment: symbol | number;`. It's a suggestion, your choice.\r\n",
        "createdAt" : "2017-11-10T21:10:10Z",
        "updatedAt" : "2017-11-10T21:10:10Z",
        "lastEditedBy" : "9659474b-ff65-4639-a0c5-317124d10049",
        "tags" : [
        ]
      },
      {
        "id" : "09668f80-4477-41e4-a9a8-82310d13056f",
        "parentId" : "88da3951-4bb8-45eb-b099-cf0cdc4e9b27",
        "authorId" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "body" : "I'm a little confused by your suggestion; that's a value with the type `symbol | number`, not a type alias.",
        "createdAt" : "2017-11-10T21:36:32Z",
        "updatedAt" : "2017-11-10T21:36:32Z",
        "lastEditedBy" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "tags" : [
        ]
      },
      {
        "id" : "edac886f-a5d7-4d42-8cef-28a4cc641921",
        "parentId" : "88da3951-4bb8-45eb-b099-cf0cdc4e9b27",
        "authorId" : "9659474b-ff65-4639-a0c5-317124d10049",
        "body" : "> that's a value [...] not a type alias\r\n\r\nI know, you can then write `const Fragment: NEW_TYPE;`, NEW_TYPE being named something like `ReactFragment` since I guess naming it `Fragment` would clashname with the `const Fragment...`.\r\n\r\nFYI a type `Fragment` exist in React Flow source code: https://github.com/facebook/react/blob/v16.1.0/packages/shared/ReactTypes.js#L18\r\n",
        "createdAt" : "2017-11-10T22:36:39Z",
        "updatedAt" : "2017-11-10T22:36:39Z",
        "lastEditedBy" : "9659474b-ff65-4639-a0c5-317124d10049",
        "tags" : [
        ]
      },
      {
        "id" : "e265224d-9068-43af-b259-0670fa0f1282",
        "parentId" : "88da3951-4bb8-45eb-b099-cf0cdc4e9b27",
        "authorId" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "body" : "Aha, I understand now. I would prefer keeping it explicit here to prevent confusion with [this type](https://github.com/uniqueiniquity/DefinitelyTyped/blob/4d07771b6c5ed5c3b75c7ee3e0d939557927403d/types/react/index.d.ts#L169).",
        "createdAt" : "2017-11-11T00:40:50Z",
        "updatedAt" : "2017-11-11T00:40:50Z",
        "lastEditedBy" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d07771b6c5ed5c3b75c7ee3e0d939557927403d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +89,93 @@\n    interface ReactElement<P> {\n        type: string | symbol | number | ComponentClass<P> | SFC<P>;\n        props: P;\n        key: Key | null;"
  },
  {
    "id" : "953b72d0-9d70-40ed-81d5-b8188b6cf4e0",
    "prId" : 22236,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/22236#pullrequestreview-83946441",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb66d058-07bf-47bd-9e81-dd4823296657",
        "parentId" : null,
        "authorId" : "f05ace5c-561f-467d-a3f5-c1be4d255ec2",
        "body" : "Solid comment, haha",
        "createdAt" : "2017-12-15T22:56:25Z",
        "updatedAt" : "2017-12-15T22:56:26Z",
        "lastEditedBy" : "f05ace5c-561f-467d-a3f5-c1be4d255ec2",
        "tags" : [
        ]
      }
    ],
    "commit" : "87969c8c359abbd906ce706a65f0f1b4ddd9163c",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +283,287 @@        // We MUST keep setState() as a unified signature because it allows proper checking of the method return type.\n        // See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257\n        // Also, the ` | S` allows intellisense to not be dumbisense\n        setState<K extends keyof S>(\n            state: ((prevState: Readonly<S>, props: P) => (Pick<S, K> | S)) | (Pick<S, K> | S),"
  },
  {
    "id" : "e6fa8847-ffd0-42b9-bcb6-03de4f4fddec",
    "prId" : 23587,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23587#pullrequestreview-97432025",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "314c4097-541f-49e3-995e-34e257a52bae",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "This change probably should be done to all instances of `crossOrigin` in the definitions",
        "createdAt" : "2018-02-19T02:50:06Z",
        "updatedAt" : "2018-02-19T02:50:06Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3bac764285f18e13a2332f29adcbe6579edde35",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2914,2918 @@    interface ImgHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\";\n        height?: number | string;\n        sizes?: string;"
  }
]