[
  {
    "id" : "30f86abc-1504-4883-a680-9d5ec245d5b4",
    "prId" : 17082,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17082#pullrequestreview-45034848",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "887595cb-386e-4991-a103-9b31cd84e45d",
        "parentId" : null,
        "authorId" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "body" : "did you mean to leave this here?",
        "createdAt" : "2017-06-16T03:49:23Z",
        "updatedAt" : "2017-06-16T03:49:23Z",
        "lastEditedBy" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "tags" : [
        ]
      },
      {
        "id" : "cc6d30e8-da0e-48a5-838a-98dc03499da9",
        "parentId" : "887595cb-386e-4991-a103-9b31cd84e45d",
        "authorId" : "284e3fa9-dee8-440e-a81c-8cff890cc23b",
        "body" : "@vsiao oh uh I wasn't expecting this to be merged until your suggestion was applied :)  but yep this was intentional to gain the target attribute.",
        "createdAt" : "2017-06-20T05:20:39Z",
        "updatedAt" : "2017-06-20T05:20:39Z",
        "lastEditedBy" : "284e3fa9-dee8-440e-a81c-8cff890cc23b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c19e8e8862acb0fff191b9d7413ead46bed7c5b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +334,338 @@        target: EventTarget & T;\n    }\n\n    interface ChangeEvent<T> extends SyntheticEvent<T> {\n        target: EventTarget & T;"
  },
  {
    "id" : "42002e5e-b8a1-479a-8d0f-faedd0ce87f8",
    "prId" : 17947,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17947#pullrequestreview-49331883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62bc8683-cf01-4711-b196-0943086077b5",
        "parentId" : null,
        "authorId" : "f8cc332b-a66e-442c-8a4a-388a74c3ed9a",
        "body" : "In what situation is it an array of strings?",
        "createdAt" : "2017-07-11T16:57:30Z",
        "updatedAt" : "2017-07-11T16:57:30Z",
        "lastEditedBy" : "f8cc332b-a66e-442c-8a4a-388a74c3ed9a",
        "tags" : [
        ]
      },
      {
        "id" : "81ccf258-eff7-447f-98a7-f145ea83a63e",
        "parentId" : "62bc8683-cf01-4711-b196-0943086077b5",
        "authorId" : "95712c81-eb7a-41a6-99e3-df0efb59a9b1",
        "body" : "In the case of a Select, it might be in  `<select multiple>`, I simply kept the definition that existed before and distributed it to form fields",
        "createdAt" : "2017-07-11T20:10:56Z",
        "updatedAt" : "2017-07-11T20:10:57Z",
        "lastEditedBy" : "95712c81-eb7a-41a6-99e3-df0efb59a9b1",
        "tags" : [
        ]
      },
      {
        "id" : "01ddeefb-0c96-4191-86c2-5623fe806cea",
        "parentId" : "62bc8683-cf01-4711-b196-0943086077b5",
        "authorId" : "95712c81-eb7a-41a6-99e3-df0efb59a9b1",
        "body" : "ah sorry, I see it's not my pull request, typed too fast. I missed this one.\r\n\r\nThis definition looks correct to me.",
        "createdAt" : "2017-07-11T20:12:11Z",
        "updatedAt" : "2017-07-11T20:12:11Z",
        "lastEditedBy" : "95712c81-eb7a-41a6-99e3-df0efb59a9b1",
        "tags" : [
        ]
      },
      {
        "id" : "1397edea-c42d-41d7-bd5a-57536308cb60",
        "parentId" : "62bc8683-cf01-4711-b196-0943086077b5",
        "authorId" : "42bd9d99-29b4-4d45-97f8-56517795165d",
        "body" : "Not sure about the use case of an array of strings, but that was the previous definition of the value prop:\r\n\r\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/blob/fec422d2266ff5041bbc8082ca4c1d675f83efed/types/react/index.d.ts#L2449",
        "createdAt" : "2017-07-11T21:15:49Z",
        "updatedAt" : "2017-07-11T21:15:49Z",
        "lastEditedBy" : "42bd9d99-29b4-4d45-97f8-56517795165d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fd96da0fe213d4948b5800628510ea5e8fcaa63",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2790,2794 @@        required?: boolean;\n        size?: number;\n        value?: string | string[] | number;\n        onChange?: ChangeEventHandler<T>;\n    }"
  },
  {
    "id" : "9d0c432c-ba06-4678-b486-0fa6494f3c28",
    "prId" : 18463,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18463#pullrequestreview-53008403",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7aa5bdcc-07f5-437d-bb82-0d499949d83a",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "I don't know how dtslint works here but I assume it's expecting you to copy the old react 15 `index.d.ts` to `react/v15/`.",
        "createdAt" : "2017-07-28T08:58:16Z",
        "updatedAt" : "2017-07-31T19:10:30Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "90342646-7802-4559-b7f6-043074a1faed",
        "parentId" : "7aa5bdcc-07f5-437d-bb82-0d499949d83a",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "That's actually not necessary, but if you do want to maintain multiple versions of react in parallel, you need to copy *all* of the old definitions to `v15` (incl. `tsconfig.json`, `tslint.json`, and `test`), not just `index.d.ts`.\r\n`README.md` is ignored by types-publisher, so this might be a good time to move it into a comment instead.",
        "createdAt" : "2017-07-28T14:12:08Z",
        "updatedAt" : "2017-07-31T19:10:30Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "2504f5bb-605e-4c9e-a8cb-468672fa28fc",
        "parentId" : "7aa5bdcc-07f5-437d-bb82-0d499949d83a",
        "authorId" : "f82690bf-f608-440c-a604-3e01e744204c",
        "body" : "Tests are now passing.",
        "createdAt" : "2017-07-28T18:41:55Z",
        "updatedAt" : "2017-07-31T19:10:30Z",
        "lastEditedBy" : "f82690bf-f608-440c-a604-3e01e744204c",
        "tags" : [
        ]
      }
    ],
    "commit" : "035228e304d80a630a775c3e64d009792bf23862",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +-1,3 @@// Type definitions for React 16.0\n// Project: http://facebook.github.io/react/\n// Definitions by: Asana <https://asana.com>"
  },
  {
    "id" : "b0d20609-f183-4a8c-80d3-fb6204c35ead",
    "prId" : 18463,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18463#pullrequestreview-53006607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80e78c4b-110a-43ed-b75d-360599a27b14",
        "parentId" : null,
        "authorId" : "f8cc332b-a66e-442c-8a4a-388a74c3ed9a",
        "body" : "The stack is a string and not an array?",
        "createdAt" : "2017-07-28T17:36:36Z",
        "updatedAt" : "2017-07-31T19:10:30Z",
        "lastEditedBy" : "f8cc332b-a66e-442c-8a4a-388a74c3ed9a",
        "tags" : [
        ]
      },
      {
        "id" : "e7cae755-b1ad-40e8-a2ee-a263ae8fbf89",
        "parentId" : "80e78c4b-110a-43ed-b75d-360599a27b14",
        "authorId" : "f82690bf-f608-440c-a604-3e01e744204c",
        "body" : "Yep! Here's a [pen](https://codepen.io/anon/pen/jLbJMj?editors=0010).",
        "createdAt" : "2017-07-28T18:34:10Z",
        "updatedAt" : "2017-07-31T19:10:30Z",
        "lastEditedBy" : "f82690bf-f608-440c-a604-3e01e744204c",
        "tags" : [
        ]
      }
    ],
    "commit" : "035228e304d80a630a775c3e64d009792bf23862",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +3400,3404 @@         * Captures which component contained the exception, and it's ancestors.\n         */\n        componentStack: string;\n    }\n}"
  },
  {
    "id" : "2d75946a-7165-4f7e-98b7-241a15f5afa5",
    "prId" : 19210,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19210#pullrequestreview-57633732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "baaa2ec1-22cf-471a-a6bd-a8e9c331ab7d",
        "parentId" : null,
        "authorId" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "body" : "Should be `DetailedReactHTMLElement<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>`, I think.",
        "createdAt" : "2017-08-21T23:15:26Z",
        "updatedAt" : "2017-08-21T23:15:44Z",
        "lastEditedBy" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb270d5e3e5003766f16afcb0411501d3440c02",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +189,193 @@        type: \"input\",\n        props?: InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement>,\n        ...children: ReactNode[]): DetailedReactHTMLElement<{}, HTMLInputElement>;\n    function createElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        type: keyof ReactHTML,"
  },
  {
    "id" : "598bf8e2-4c89-4575-978a-f687c7f60341",
    "prId" : 20595,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20595#pullrequestreview-69644672",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad706a02-254d-4dda-afce-120c6103b6d6",
        "parentId" : null,
        "authorId" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "body" : "You could also change the definition to take a union of string literal types to describe the set of valid arguments.",
        "createdAt" : "2017-10-16T17:30:46Z",
        "updatedAt" : "2017-10-16T17:30:46Z",
        "lastEditedBy" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "tags" : [
        ]
      },
      {
        "id" : "ef28569a-6d1c-48fd-a1b9-0073ae0ca737",
        "parentId" : "ad706a02-254d-4dda-afce-120c6103b6d6",
        "authorId" : "699779f4-7dc1-4596-8cd0-10ea0c5d476f",
        "body" : "I would, but there are some none standard values that are useful in some browsers in some circumstances. I could try to list those too but I feel that the situation is that we then are trying to specify higher type safety than there is. All strings are allowed even though only a subset is usable which is similar to the situation with array indices, real numbers are allowed, just not useful. I also think many valid uses of it would error due to literal type widening as it is likely that you for example have an array of modifiers that you check.",
        "createdAt" : "2017-10-16T17:54:49Z",
        "updatedAt" : "2017-10-16T17:54:49Z",
        "lastEditedBy" : "699779f4-7dc1-4596-8cd0-10ea0c5d476f",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd13d12eccf9a989150cb2d23d6d75f3181edd2a",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +494,498 @@        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: string): boolean;"
  },
  {
    "id" : "ff1cec7d-b317-4d92-a475-d6e15c06f6be",
    "prId" : 20769,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20769#pullrequestreview-116128681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ec0e67e-a77d-4996-9f79-99dc6ffc6ec4",
        "parentId" : null,
        "authorId" : "d87cfedc-ddf5-46da-905c-ced83376309b",
        "body" : "Hi @artem-malko, i've tried to use the `as` attribute on a component that extends `AnchorHTMLAttributes`. Something like the following:\r\n```ts\r\ninterface MyCustomComponentProps extends AnchorHTMLAttributes<HTMLAnchorElement> {\r\n  as: React.ComponentClass<{}> | React.StatelessComponent<{}> | string;\r\n}\r\n```\r\n\r\nBut this is not allowed as the `as` attribute is defined on AnchorHTMLAttributes, so i tracked it down to this PR and through that i found the preload standard. https://w3c.github.io/preload/#as-attribute\r\n\r\nThe standard clearly defines the `as` attribute for the `<link />` element, but i can't find any info on it also being an attribute for the `<a />` element? Could you clarify to me why you also added it here?",
        "createdAt" : "2018-04-26T18:44:38Z",
        "updatedAt" : "2018-04-26T18:44:38Z",
        "lastEditedBy" : "d87cfedc-ddf5-46da-905c-ced83376309b",
        "tags" : [
        ]
      },
      {
        "id" : "bfeb1017-633f-4651-bd8d-f89ad1e427e0",
        "parentId" : "5ec0e67e-a77d-4996-9f79-99dc6ffc6ec4",
        "authorId" : "d87cfedc-ddf5-46da-905c-ced83376309b",
        "body" : "@johnnyreilly since you merged it i hope you might know more :)",
        "createdAt" : "2018-04-27T10:07:38Z",
        "updatedAt" : "2018-04-27T10:07:38Z",
        "lastEditedBy" : "d87cfedc-ddf5-46da-905c-ced83376309b",
        "tags" : [
        ]
      },
      {
        "id" : "12982f23-f7d0-41f8-8bcf-6f032f4cb78c",
        "parentId" : "5ec0e67e-a77d-4996-9f79-99dc6ffc6ec4",
        "authorId" : "c2c415fe-d8c9-4f57-ad51-cbd4c4fa80f1",
        "body" : "Yes, you are right! It is not useful now.\r\nAs I remember, I've added it because of typescript. There were some errors in console, if as attr is not in AnchorHTMLAttributes. So, I think, it is possible to get rid of it now.",
        "createdAt" : "2018-04-28T01:25:51Z",
        "updatedAt" : "2018-04-28T01:25:51Z",
        "lastEditedBy" : "c2c415fe-d8c9-4f57-ad51-cbd4c4fa80f1",
        "tags" : [
        ]
      },
      {
        "id" : "74283cf5-73dc-44d6-9be5-deee6f5d97f6",
        "parentId" : "5ec0e67e-a77d-4996-9f79-99dc6ffc6ec4",
        "authorId" : "d87cfedc-ddf5-46da-905c-ced83376309b",
        "body" : "Nice, thanks @artem-malko, i'll create a PR to remove it :D",
        "createdAt" : "2018-04-28T09:10:09Z",
        "updatedAt" : "2018-04-28T09:10:19Z",
        "lastEditedBy" : "d87cfedc-ddf5-46da-905c-ced83376309b",
        "tags" : [
        ]
      }
    ],
    "commit" : "78d0bd0b55ead067c23e15c39a5cd4163d84cf1d",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +2604,2608 @@        target?: string;\n        type?: string;\n        as?: string;\n    }\n"
  },
  {
    "id" : "1d98b04b-7f9c-47a9-b94c-6371ccdcbe1e",
    "prId" : 21146,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21146#pullrequestreview-75914609",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88da3951-4bb8-45eb-b099-cf0cdc4e9b27",
        "parentId" : null,
        "authorId" : "9659474b-ff65-4639-a0c5-317124d10049",
        "body" : "Can it be `type: string | ComponentClass<P> | SFC<P> | Fragment` or I'm missing something? (same remark for code below)",
        "createdAt" : "2017-10-31T23:13:23Z",
        "updatedAt" : "2017-11-06T20:28:29Z",
        "lastEditedBy" : "9659474b-ff65-4639-a0c5-317124d10049",
        "tags" : [
        ]
      },
      {
        "id" : "05594c2f-fd92-46c8-a61b-e126e9a1d311",
        "parentId" : "88da3951-4bb8-45eb-b099-cf0cdc4e9b27",
        "authorId" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "body" : "Are you suggesting that I also add a new type alias named `Fragment` that is `symbol | number` and then use that instead as shorthand?",
        "createdAt" : "2017-11-06T20:39:05Z",
        "updatedAt" : "2017-11-06T20:39:05Z",
        "lastEditedBy" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "tags" : [
        ]
      },
      {
        "id" : "2124ea15-68ed-4b17-87de-71bcfa30847e",
        "parentId" : "88da3951-4bb8-45eb-b099-cf0cdc4e9b27",
        "authorId" : "9659474b-ff65-4639-a0c5-317124d10049",
        "body" : "@uniqueiniquity sorry did not see your comment\r\n> new type alias named `Fragment` that is `symbol | number`\r\n\r\nYes, you have also `const Fragment: symbol | number;`. It's a suggestion, your choice.\r\n",
        "createdAt" : "2017-11-10T21:10:10Z",
        "updatedAt" : "2017-11-10T21:10:10Z",
        "lastEditedBy" : "9659474b-ff65-4639-a0c5-317124d10049",
        "tags" : [
        ]
      },
      {
        "id" : "09668f80-4477-41e4-a9a8-82310d13056f",
        "parentId" : "88da3951-4bb8-45eb-b099-cf0cdc4e9b27",
        "authorId" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "body" : "I'm a little confused by your suggestion; that's a value with the type `symbol | number`, not a type alias.",
        "createdAt" : "2017-11-10T21:36:32Z",
        "updatedAt" : "2017-11-10T21:36:32Z",
        "lastEditedBy" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "tags" : [
        ]
      },
      {
        "id" : "edac886f-a5d7-4d42-8cef-28a4cc641921",
        "parentId" : "88da3951-4bb8-45eb-b099-cf0cdc4e9b27",
        "authorId" : "9659474b-ff65-4639-a0c5-317124d10049",
        "body" : "> that's a value [...] not a type alias\r\n\r\nI know, you can then write `const Fragment: NEW_TYPE;`, NEW_TYPE being named something like `ReactFragment` since I guess naming it `Fragment` would clashname with the `const Fragment...`.\r\n\r\nFYI a type `Fragment` exist in React Flow source code: https://github.com/facebook/react/blob/v16.1.0/packages/shared/ReactTypes.js#L18\r\n",
        "createdAt" : "2017-11-10T22:36:39Z",
        "updatedAt" : "2017-11-10T22:36:39Z",
        "lastEditedBy" : "9659474b-ff65-4639-a0c5-317124d10049",
        "tags" : [
        ]
      },
      {
        "id" : "e265224d-9068-43af-b259-0670fa0f1282",
        "parentId" : "88da3951-4bb8-45eb-b099-cf0cdc4e9b27",
        "authorId" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "body" : "Aha, I understand now. I would prefer keeping it explicit here to prevent confusion with [this type](https://github.com/uniqueiniquity/DefinitelyTyped/blob/4d07771b6c5ed5c3b75c7ee3e0d939557927403d/types/react/index.d.ts#L169).",
        "createdAt" : "2017-11-11T00:40:50Z",
        "updatedAt" : "2017-11-11T00:40:50Z",
        "lastEditedBy" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d07771b6c5ed5c3b75c7ee3e0d939557927403d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +89,93 @@\n    interface ReactElement<P> {\n        type: string | symbol | number | ComponentClass<P> | SFC<P>;\n        props: P;\n        key: Key | null;"
  },
  {
    "id" : "953b72d0-9d70-40ed-81d5-b8188b6cf4e0",
    "prId" : 22236,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/22236#pullrequestreview-83946441",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb66d058-07bf-47bd-9e81-dd4823296657",
        "parentId" : null,
        "authorId" : "f05ace5c-561f-467d-a3f5-c1be4d255ec2",
        "body" : "Solid comment, haha",
        "createdAt" : "2017-12-15T22:56:25Z",
        "updatedAt" : "2017-12-15T22:56:26Z",
        "lastEditedBy" : "f05ace5c-561f-467d-a3f5-c1be4d255ec2",
        "tags" : [
        ]
      }
    ],
    "commit" : "87969c8c359abbd906ce706a65f0f1b4ddd9163c",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +283,287 @@        // We MUST keep setState() as a unified signature because it allows proper checking of the method return type.\n        // See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257\n        // Also, the ` | S` allows intellisense to not be dumbisense\n        setState<K extends keyof S>(\n            state: ((prevState: Readonly<S>, props: P) => (Pick<S, K> | S)) | (Pick<S, K> | S),"
  },
  {
    "id" : "e6fa8847-ffd0-42b9-bcb6-03de4f4fddec",
    "prId" : 23587,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23587#pullrequestreview-97432025",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "314c4097-541f-49e3-995e-34e257a52bae",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "This change probably should be done to all instances of `crossOrigin` in the definitions",
        "createdAt" : "2018-02-19T02:50:06Z",
        "updatedAt" : "2018-02-19T02:50:06Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3bac764285f18e13a2332f29adcbe6579edde35",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2914,2918 @@    interface ImgHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\";\n        height?: number | string;\n        sizes?: string;"
  },
  {
    "id" : "c621fd9e-42ce-4fe8-bfd7-32efa7986afd",
    "prId" : 24509,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24509#pullrequestreview-108689689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "638289cc-2cc6-4372-89a2-085dc8c1cca3",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "It should be possible to call `createContext()` to create one with `defaultValue` of `undefined`.\r\n\r\n`function createContext<T>(): Context<T|undefined>` override? This is one of those that look like the antipattern warned against in the docs, but I think it's correct to use here, similar to a collection constructor.",
        "createdAt" : "2018-03-28T03:50:24Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "b3b16244-e8ad-4421-bb1f-8a7b6fec830d",
        "parentId" : "638289cc-2cc6-4372-89a2-085dc8c1cca3",
        "authorId" : "279f0903-33a9-4f5b-a5aa-8a34bbbbfdd8",
        "body" : "Hmm. I'm confused here.  Calling `createContext()` (*i.e.,* no arguments) would require the `defaultValue` to be optional.  Otherwise you'd need to do an explicit `createContext(undefined)`.  Also, since `T` can be anything, I don't understand `T|undefined`.\r\n\r\nFYI, I address this case of optional default values in [my article on the new Context API](https://medium.com/@mtiller/react-16-3-context-api-intypescript-45c9eeb7a384) (using the typings as they stand here, but wrapping them in one additional layer).  Also note that, in my opinion (see article), it isn't *just* about making the default value optional.  But again, I used these typings without issue.",
        "createdAt" : "2018-03-28T16:55:18Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "279f0903-33a9-4f5b-a5aa-8a34bbbbfdd8",
        "tags" : [
        ]
      },
      {
        "id" : "e903bf2a-d28a-44e7-9469-a6728b60e8a4",
        "parentId" : "638289cc-2cc6-4372-89a2-085dc8c1cca3",
        "authorId" : "53bf9604-049e-4ce7-abee-4acc52fb133c",
        "body" : "16.3 released today and the docs seem to indicate @Kovensky is correct here — they use ‘createContext’ without args so it must be a correct usage. I’ll take a look at updating later today. ",
        "createdAt" : "2018-03-29T20:58:03Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "53bf9604-049e-4ce7-abee-4acc52fb133c",
        "tags" : [
        ]
      },
      {
        "id" : "d1a842bd-9c97-4267-ba73-c82ded1c2b06",
        "parentId" : "638289cc-2cc6-4372-89a2-085dc8c1cca3",
        "authorId" : "53bf9604-049e-4ce7-abee-4acc52fb133c",
        "body" : "https://reactjs.org/docs/context.html",
        "createdAt" : "2018-03-29T20:59:27Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "53bf9604-049e-4ce7-abee-4acc52fb133c",
        "tags" : [
        ]
      },
      {
        "id" : "8685a1b0-5b13-4cd8-a570-3552787b979e",
        "parentId" : "638289cc-2cc6-4372-89a2-085dc8c1cca3",
        "authorId" : "53bf9604-049e-4ce7-abee-4acc52fb133c",
        "body" : "OK, rebased this post merge conflict.\r\n\r\nSpent some time with this tonight and it looks like the behavior of the final API is that \r\n`createContext()`  gives you a context object where `_defaultValue` is undefined. \r\n\r\n`createContext('foo')` gives you a context object where `_defaultValue` is `foo`\r\n\r\nGiven that, I'm a bit confused as to the correct typing for `createContext()` with no params. I tried the overload @Kovensky mentioned but doing so types the resulting RenderProps function args with `{} or undefined`, which I don't think is correct. \r\n\r\nI suspect the overload closest to the API's usage would be\r\n\r\n```\r\nfunction createContext(): Context<any>\r\n```\r\n\r\nWhich completely gives up type safety for RenderProps function but at least allows it to be used. `{} or undefined` doesn't allow you to still give, say, an anonymous object in the Provider's `value` field and still be able to retrieve it later in the RenderProps.\r\n\r\nIf anyone has any opinions on this they'd be welcome. ",
        "createdAt" : "2018-03-30T04:06:43Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "53bf9604-049e-4ce7-abee-4acc52fb133c",
        "tags" : [
        ]
      },
      {
        "id" : "9e6358e5-3406-496b-8068-7f6e2c5eea3e",
        "parentId" : "638289cc-2cc6-4372-89a2-085dc8c1cca3",
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "It resulting in `RenderProps` with `{}|undefined` was completely intended. You should call `createContext<MyContextType>()`, not just `createContext()`; similar to how you should call `new Set<valueType>()` instead of `new Set()`.",
        "createdAt" : "2018-03-30T04:09:44Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "9d9a1377-2734-4754-b503-dc85d9aa2ade",
        "parentId" : "638289cc-2cc6-4372-89a2-085dc8c1cca3",
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Although there is an argument for making it possible to `createContext<MyContextType>()` produce a function with render props of `MyContextType` instead of `MyContextType|undefined`; in this case, your provider's `value` type would have to be required and not include `undefined`.\r\n\r\nBut do _not_ make it produce a `Context<any>` without the user explicitly giving `<any>` as the template argument. That defeats the type safety that `--noImplicitAny` would gain you.",
        "createdAt" : "2018-03-30T04:14:17Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "1f6127c7-903f-4e03-ae39-d9ca88734ac9",
        "parentId" : "638289cc-2cc6-4372-89a2-085dc8c1cca3",
        "authorId" : "53bf9604-049e-4ce7-abee-4acc52fb133c",
        "body" : "@Kovensky Yes, I agree. Thanks for the explanation. I've made it `T | undefined` for now.",
        "createdAt" : "2018-03-30T05:22:55Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "53bf9604-049e-4ce7-abee-4acc52fb133c",
        "tags" : [
        ]
      },
      {
        "id" : "cb150f7f-82e0-4a08-ad11-d5498ca59b95",
        "parentId" : "638289cc-2cc6-4372-89a2-085dc8c1cca3",
        "authorId" : "f42543e0-fef7-4ce2-bf03-66e44549420f",
        "body" : "Please correct me if I am wrong, but having the resulting `T` as `{}|undefined` means that I have to check for `undefined` in every Consumer use, right? I haven't actually tested that yet so I am probably wrong :)\r\n\r\n```tsx\r\nconst context = createContext<MyContextType>()\r\n\r\n<Provider value={myValue}>\r\n  <Consumer>{(value: MyContextType | undefined ) => /* adding type here just to show an issue */ }</Consumer>\r\n</Provider>\r\n```\r\n\r\nIf this is the case, then it's definitely a bad way to go imo. Sadly, my TypeScript knowledge is limited and I am not sure about better way here.",
        "createdAt" : "2018-03-30T13:14:39Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "f42543e0-fef7-4ce2-bf03-66e44549420f",
        "tags" : [
        ]
      },
      {
        "id" : "e451ec0f-c224-4b05-b6b6-680ce211bc56",
        "parentId" : "638289cc-2cc6-4372-89a2-085dc8c1cca3",
        "authorId" : "154935b0-c747-4431-b603-036adc203ce3",
        "body" : "@FredyC I would say this is the intended behavior, since React doesn't enforce that a `Consumer` be a descendant of its dual `Provider` so if you do not provide a default value on creating the context, there is a chance that it is `undefined`, since the React tree is determined at runtime there's no way to statically check that - it's more of an incentive for the developer to actually ensure there's always a default value for the context:\r\n```tsx\r\nconst Context = createContext<MyContextType>()\r\n\r\n<App>\r\n  <Context.Provider value={myValue>\r\n    <Context.Consumer>{value => { \r\n      /* value here will be defined, even though it's typed as optional */ }}\r\n    </Context.Consumer>\r\n  </Context.Provider>\r\n\r\n<App>\r\n  <Context.Consumer>{value => { \r\n    /* value here will be undefined since Consumer isn't a descendant of Provider \r\n    and we didn't provide a default value */ }}\r\n  </Context.Consumer>\r\n</App>\r\n```\r\n\r\n@scally with TS 2.8 we can now use the overload while preserving the required value type of `Provider` using a conditional type, that way we can still have no-parameter defaultValue that the user can manually assign the generic type and `Provider.value` is still required, see cod below:\r\n```tsx\r\nimport { ComponentType, ReactNode } from 'react'\r\n\r\ntype Consumer<T> = ComponentType<{\r\n    children(value: T): ReactNode\r\n}>\r\ntype Provider<T> = ComponentType<{\r\n    value: T extends undefined ? never : T\r\n    children?: ReactNode\r\n}>\r\n\r\ntype Context<T> = {\r\n    Consumer: Consumer<T>\r\n    Provider: Provider<T>\r\n}\r\n\r\ndeclare function createContext<T>(defaultValue: T): Context<T>\r\ndeclare function createContext<T>(): Context<T | undefined>\r\n\r\nconst Foo = createContext<string>()\r\nconst Bar = createContext('hello')\r\n\r\nconst foo = (\r\n    <Foo.Provider value={undefined /* error */}>\r\n        <Foo.Consumer>{val => val /* val: T | undefined */}</Foo.Consumer>\r\n    </Foo.Provider>\r\n)\r\n\r\nconst bar = (\r\n    <Bar.Provider value=\"hello\">\r\n        <Bar.Consumer>{val => val /* T */}</Bar.Consumer>\r\n    </Bar.Provider>\r\n)\r\n```",
        "createdAt" : "2018-03-30T16:24:29Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "154935b0-c747-4431-b603-036adc203ce3",
        "tags" : [
        ]
      },
      {
        "id" : "cdb94b4a-ac56-4ffd-a76f-fdc7077f1712",
        "parentId" : "638289cc-2cc6-4372-89a2-085dc8c1cca3",
        "authorId" : "f42543e0-fef7-4ce2-bf03-66e44549420f",
        "body" : "I am failing to see how it can actually work (copied from your first example). Obviously second overload is used so `T = MyContextType | undefined`. If you supply value later with `Provider`, the T is not gonna change, unless there is some magic part I am missing.\r\n\r\n```tsx\r\nconst Context = createContext<MyContextType>()\r\n\r\n<Context.Provider value={myValue>\r\n  <Context.Consumer>{value => { \r\n    /* T = MyContextType | undefined ??? */ }}\r\n  </Context.Consumer>\r\n</Context.Provider>\r\n```\r\n\r\nEdit: I've removed rest of the comment as I realized my mistake :)",
        "createdAt" : "2018-03-30T17:28:53Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "f42543e0-fef7-4ce2-bf03-66e44549420f",
        "tags" : [
        ]
      },
      {
        "id" : "5df6fb89-0ed8-48b8-81cc-cddf1409d2ae",
        "parentId" : "638289cc-2cc6-4372-89a2-085dc8c1cca3",
        "authorId" : "154935b0-c747-4431-b603-036adc203ce3",
        "body" : "Yup, I'm just saying that we shouldn't want to correct that behavior, because you can always use `Consumer` not paired with a `Provider` so the value of `T` should not change even if you later pass in the value as a prop to `Provider`. \r\n\r\nI.e. if you create the context with the default value, you are *always* guaranteed to have a defined value wherever you use `Consumer` (even not as a descendant of `Provider`), but once you create the context without a default value, you are not guaranteed that defined value unless you wrap the `Consumer` inside a `Provider`, which wouldn't be able to be statically analyzed before runtime.\r\n\r\nI'm agreeing with you that it's unfortunate that we'll always have to check for undefined, but I think that should be the way the interface is structured due to the lack of compile-time guarantees of the consumer value",
        "createdAt" : "2018-03-30T22:34:37Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "154935b0-c747-4431-b603-036adc203ce3",
        "tags" : [
        ]
      },
      {
        "id" : "5f3aad42-1c9d-4825-b67a-432e08782c48",
        "parentId" : "638289cc-2cc6-4372-89a2-085dc8c1cca3",
        "authorId" : "f42543e0-fef7-4ce2-bf03-66e44549420f",
        "body" : "Well, in your first example you had the comment there `/* value here will be defined, even though it's typed as optional */` and that was what's confused me the most. As you have said now, you will have to check for `undefined` either way. I understand now.\r\n\r\nI see a bit of problem arising here. Developers are generally lazy and we might end up with pattern like this.\r\n\r\n```tsx\r\ninterface MyContextType { myValue: string }\r\nconst Context = createContext<MyContextType>()\r\n\r\n<Context.Consumer>{value => { \r\n  <div>{value!.myValue.toUpperCase()}</div> // <-- notice the \"!\" mark there\r\n</Context.Consumer>\r\n```\r\n\r\nThat might be a good source of runtime errors (_and blaming TypeScript/React for it_) in case someone really forgets to add the Provider. It's true that if anyone is using `!` it's for own risk, but there are people that might just copy&paste and then be surprised.\r\n\r\n---\r\n\r\nWhat about this approach? Would this work the same way? I am not sure if it's a correct syntax, but you get the gist. This would at least allow to override this `undefined` type in case someone knows what they are doing.\r\n\r\n```ts\r\nfunction createContext<T, S = T | undefined>(): Context<S>;\r\n```",
        "createdAt" : "2018-03-31T08:51:05Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "f42543e0-fef7-4ce2-bf03-66e44549420f",
        "tags" : [
        ]
      },
      {
        "id" : "9dc6be5e-7f06-4054-832a-7069c8b03d78",
        "parentId" : "638289cc-2cc6-4372-89a2-085dc8c1cca3",
        "authorId" : "154935b0-c747-4431-b603-036adc203ce3",
        "body" : "Hmm.. it might not be immediately clear to the user why the second generic type param may be used, and they'll have to dig into the type defs to actually find out how they resolve.\r\n\r\nWith my suggestion (the two overloads), creating context with a default param will assert the value in the consumer to be always be defined:\r\n```tsx\r\ninterface ContextProps {\r\n  foo: string\r\n  bar?: number\r\n}\r\n\r\n// note the default values passed in as the first parameter\r\nconst Context = createContext<Props>({ foo: 'foo' }) // typed as Props\r\nconst OtherContext = createContext({ foo: 'foo' }) // inferred to be type { foo: string }\r\n\r\n// even without a Provider it is still typed to be required\r\nconst app = (\r\n  <App>\r\n    <Context.Consumer>\r\n      {( value ) => /* value is typed to be Props here, no need to check for undefined */ }\r\n    </Context.Consumer>\r\n    <Context.Consumer>\r\n      {( value ) => /* value is typed to be { foo: string } here, no need to check for undefined */ }\r\n    </Context.Consumer>\r\n  </App>\r\n)\r\n```\r\n\r\nin this case, all you need as a type consumer to override the `undefined` behavior is to just provide a default value, the type inference will work for you or you can explicitly set the generic type parameter, and as long as the default value is passed in as a parameter, the consumer render props will always be defined",
        "createdAt" : "2018-03-31T15:21:02Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "154935b0-c747-4431-b603-036adc203ce3",
        "tags" : [
        ]
      },
      {
        "id" : "d546cd7f-df05-410d-8073-587d5f0ebf5f",
        "parentId" : "638289cc-2cc6-4372-89a2-085dc8c1cca3",
        "authorId" : "53bf9604-049e-4ce7-abee-4acc52fb133c",
        "body" : "@ferdaber I'm trying to use the TypeScript 2.8 features you mentioned in this definition, but it looks like that's not possible yet? \r\n\r\nI've updated the headers to `// TypeScript Version: 2.8` but that results in a linting error.\r\n\r\nAccording to this comment, we can only use TypeScript up to 2.7 right now, so I may not be able to use the definition you specify.\r\n\r\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/pull/24586#issuecomment-376911352",
        "createdAt" : "2018-03-31T20:45:45Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "53bf9604-049e-4ce7-abee-4acc52fb133c",
        "tags" : [
        ]
      },
      {
        "id" : "63d0eaa0-56d1-4033-8216-01ee4d2e22d8",
        "parentId" : "638289cc-2cc6-4372-89a2-085dc8c1cca3",
        "authorId" : "154935b0-c747-4431-b603-036adc203ce3",
        "body" : "ah, that's too bad, we'll keep it in the backburner then",
        "createdAt" : "2018-04-02T18:06:08Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "154935b0-c747-4431-b603-036adc203ce3",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a990af1c23ddb4e73fa2411f2837630ddbd768b",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +261,265 @@        defaultValue: T,\n        calculateChangedBits?: (prev: T, next: T) => number\n    ): Context<T>;\n    function createContext<T>(): Context<T | undefined>;\n"
  }
]