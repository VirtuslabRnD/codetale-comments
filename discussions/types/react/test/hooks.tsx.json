[
  {
    "id" : "b72eef90-ef40-4b4d-b51f-9212884faeb1",
    "prId" : 30057,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30057#pullrequestreview-170543419",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cafc78d-fa73-4e7e-8ab2-6cb62bcf9196",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "We're actually hitting against TypeScript's inability to declare the input's variance (the first argument is nonvariant). The callback here is allowed to return empty object, causing `T` to infer as `{}`, and that wouldn't be a type error(!) because `ref` would still be assignable to `Ref<{}>|undefined` under covariance rules.\r\n\r\n---\r\n\r\nPS: I've edited this comment countless times because I still don't understand covariance/contravariance intuitively ðŸ˜©",
        "createdAt" : "2018-11-01T02:16:45Z",
        "updatedAt" : "2018-11-09T02:08:24Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "088e2503-8577-4290-91a8-59270a32152a",
        "parentId" : "8cafc78d-fa73-4e7e-8ab2-6cb62bcf9196",
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Found a hackish solution ðŸ˜† ",
        "createdAt" : "2018-11-01T03:10:05Z",
        "updatedAt" : "2018-11-09T02:08:24Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "49b4647601f42654afc684455280d3b314a1c64f",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +92,96 @@\n    const id = React.useMemo(() => Math.random(), []);\n    React.useImperativeMethods(ref, () => ({ id }), [id]);\n    // $ExpectError\n    React.useImperativeMethods(ref, () => ({}), [id]);"
  },
  {
    "id" : "82a7b3b7-5f5d-4567-b27d-9befd531f342",
    "prId" : 30057,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30057#pullrequestreview-170535847",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "401232ee-8497-4b60-83d0-d145794bb3e9",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "I actually ran into an inference issue with this in 3.1 too but I couldn't reproduce in the test.\r\n\r\nI'll add one later if I figure out how to reproduce it again.",
        "createdAt" : "2018-11-01T02:29:59Z",
        "updatedAt" : "2018-11-09T02:08:24Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "49b4647601f42654afc684455280d3b314a1c64f",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +122,126 @@<UsesEveryHook ref={everyHookRef}/>;\n// TODO: \"implicit any\" in typescript@3.0 but not in typescript@3.1\n// <UsesEveryHook ref={ref => { ref && console.log(ref.id); }}/>;"
  },
  {
    "id" : "c9f162d6-43bf-428a-9a22-72a265dc75e0",
    "prId" : 30057,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30057#pullrequestreview-170535847",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8001c1dc-eb61-47d6-bd2b-86cd84e152e8",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Don't actually do this; don't actually do any of this in a real hook or component ðŸ™ˆ",
        "createdAt" : "2018-11-01T02:32:36Z",
        "updatedAt" : "2018-11-09T02:08:24Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "49b4647601f42654afc684455280d3b314a1c64f",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +91,95 @@    const didLayout = React.useRef(false);\n\n    const id = React.useMemo(() => Math.random(), []);\n    React.useImperativeMethods(ref, () => ({ id }), [id]);\n    // $ExpectError"
  },
  {
    "id" : "20a83341-a865-4dab-8c66-dc6b32b07afe",
    "prId" : 36080,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36080#pullrequestreview-252051126",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bc522dd-5e5d-4d55-872d-e734548d74e6",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "The `() => true` initializer will create a `boolean` state (`useState` will treat function arguments as lazy initializers instead of values)",
        "createdAt" : "2019-06-20T02:01:46Z",
        "updatedAt" : "2019-06-20T02:02:02Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "de1a82d3cfbd9dded53828128000dd5775572d9f",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +207,211 @@    React.useState<(() => boolean)>(() => true)[1](() => false);\n    // Returning a function for state is fine\n    React.useState<(() => boolean)>(() => true)[1](() => () => false);\n    // As is returning non-function members of a union\n    React.useState<(() => boolean) | number>(() => true)[1](() => 42);"
  },
  {
    "id" : "ff2b09fe-5feb-4fcb-8113-9edbaefb5a19",
    "prId" : 40961,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/40961#pullrequestreview-331158554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f32b5def-da72-4c6a-9c0c-2ed6c9fb8515",
        "parentId" : null,
        "authorId" : "04e09978-475a-4333-8639-a85b17b7429f",
        "body" : "I think this dispatch would now also allow zero arguments. Since this is the most common use case it should be fully supported instead of a nichÃ¨ case. \r\n\r\nI think we need an overload to make zero-arguments dispatch safe.",
        "createdAt" : "2019-12-11T07:08:05Z",
        "updatedAt" : "2019-12-18T16:30:07Z",
        "lastEditedBy" : "04e09978-475a-4333-8639-a85b17b7429f",
        "tags" : [
        ]
      },
      {
        "id" : "a5ca2551-89ec-4e22-ae3d-986b709dec83",
        "parentId" : "f32b5def-da72-4c6a-9c0c-2ed6c9fb8515",
        "authorId" : "23beb484-f025-4f89-b2c1-3f2e827bdf38",
        "body" : "Any idea how to implement the overload?",
        "createdAt" : "2019-12-11T10:46:22Z",
        "updatedAt" : "2019-12-18T16:30:07Z",
        "lastEditedBy" : "23beb484-f025-4f89-b2c1-3f2e827bdf38",
        "tags" : [
        ]
      },
      {
        "id" : "3ee5e672-3581-4b38-8dc8-b1b5020906ab",
        "parentId" : "f32b5def-da72-4c6a-9c0c-2ed6c9fb8515",
        "authorId" : "04e09978-475a-4333-8639-a85b17b7429f",
        "body" : "I haven't put any thought into it. As I said it's a very rare use case. Maybe dispatch `undefined` explicitly?",
        "createdAt" : "2019-12-11T11:19:19Z",
        "updatedAt" : "2019-12-18T16:30:07Z",
        "lastEditedBy" : "04e09978-475a-4333-8639-a85b17b7429f",
        "tags" : [
        ]
      },
      {
        "id" : "66dac024-598b-48eb-bc90-8f1cb9a2f5aa",
        "parentId" : "f32b5def-da72-4c6a-9c0c-2ed6c9fb8515",
        "authorId" : "154935b0-c747-4431-b603-036adc203ce3",
        "body" : "The dispatch type is reliant on the reducer, so if the reducer is 1-ary, then the dispatch necessarily needs to be 0-ary, @dancerphil you can start with that.\r\n\r\nTo clarify:\r\n```tsx\r\n// `dispatchWithAction` requires `TAction`\r\nconst [, dispatchWithAction] = useReducer(\r\n  (state: TState, action: TAction): TState => { /* ... */ },\r\n  initialState\r\n)\r\n// `dispatchWithoutAction` should not accept an argument\r\nconst [, dispatchWithoutAction] = useReducer(\r\n  (state: TState): TState => { /* ... */ },\r\n  initialState\r\n)\r\n```\r\n\r\nIf your actions are such that you allow both defined and undefined values, then that's probably already a code smell, but if you *really* have to do it then the overloads will already take care of it and you can dispatch `undefined` explicitly.",
        "createdAt" : "2019-12-11T15:01:18Z",
        "updatedAt" : "2019-12-18T16:30:07Z",
        "lastEditedBy" : "154935b0-c747-4431-b603-036adc203ce3",
        "tags" : [
        ]
      },
      {
        "id" : "2c05d31b-59ca-4cc1-bbf1-341203d75e60",
        "parentId" : "f32b5def-da72-4c6a-9c0c-2ed6c9fb8515",
        "authorId" : "23beb484-f025-4f89-b2c1-3f2e827bdf38",
        "body" : "Thank a lot, i am working on it: https://gist.github.com/dancerphil/060d5aeca3c47be2e5d9ba368796b43f\r\n\r\nI fully agree that we should not allow both defined and undefined values.",
        "createdAt" : "2019-12-12T11:17:15Z",
        "updatedAt" : "2019-12-18T16:30:07Z",
        "lastEditedBy" : "23beb484-f025-4f89-b2c1-3f2e827bdf38",
        "tags" : [
        ]
      }
    ],
    "commit" : "54103e9a8f70b1dd39733f581785ca78fd289349",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +160,164 @@    }, []);\n    React.useEffect(() => {\n        dispatch({ type: 'getOlder' });\n        // $ExpectError\n        dispatch();"
  }
]