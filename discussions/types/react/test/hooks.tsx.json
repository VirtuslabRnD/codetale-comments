[
  {
    "id" : "b72eef90-ef40-4b4d-b51f-9212884faeb1",
    "prId" : 30057,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30057#pullrequestreview-170543419",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cafc78d-fa73-4e7e-8ab2-6cb62bcf9196",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "We're actually hitting against TypeScript's inability to declare the input's variance (the first argument is nonvariant). The callback here is allowed to return empty object, causing `T` to infer as `{}`, and that wouldn't be a type error(!) because `ref` would still be assignable to `Ref<{}>|undefined` under covariance rules.\r\n\r\n---\r\n\r\nPS: I've edited this comment countless times because I still don't understand covariance/contravariance intuitively ðŸ˜©",
        "createdAt" : "2018-11-01T02:16:45Z",
        "updatedAt" : "2018-11-09T02:08:24Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "088e2503-8577-4290-91a8-59270a32152a",
        "parentId" : "8cafc78d-fa73-4e7e-8ab2-6cb62bcf9196",
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Found a hackish solution ðŸ˜† ",
        "createdAt" : "2018-11-01T03:10:05Z",
        "updatedAt" : "2018-11-09T02:08:24Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "49b4647601f42654afc684455280d3b314a1c64f",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +92,96 @@\n    const id = React.useMemo(() => Math.random(), []);\n    React.useImperativeMethods(ref, () => ({ id }), [id]);\n    // $ExpectError\n    React.useImperativeMethods(ref, () => ({}), [id]);"
  },
  {
    "id" : "82a7b3b7-5f5d-4567-b27d-9befd531f342",
    "prId" : 30057,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30057#pullrequestreview-170535847",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "401232ee-8497-4b60-83d0-d145794bb3e9",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "I actually ran into an inference issue with this in 3.1 too but I couldn't reproduce in the test.\r\n\r\nI'll add one later if I figure out how to reproduce it again.",
        "createdAt" : "2018-11-01T02:29:59Z",
        "updatedAt" : "2018-11-09T02:08:24Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "49b4647601f42654afc684455280d3b314a1c64f",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +122,126 @@<UsesEveryHook ref={everyHookRef}/>;\n// TODO: \"implicit any\" in typescript@3.0 but not in typescript@3.1\n// <UsesEveryHook ref={ref => { ref && console.log(ref.id); }}/>;"
  },
  {
    "id" : "c9f162d6-43bf-428a-9a22-72a265dc75e0",
    "prId" : 30057,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30057#pullrequestreview-170535847",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8001c1dc-eb61-47d6-bd2b-86cd84e152e8",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Don't actually do this; don't actually do any of this in a real hook or component ðŸ™ˆ",
        "createdAt" : "2018-11-01T02:32:36Z",
        "updatedAt" : "2018-11-09T02:08:24Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "49b4647601f42654afc684455280d3b314a1c64f",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +91,95 @@    const didLayout = React.useRef(false);\n\n    const id = React.useMemo(() => Math.random(), []);\n    React.useImperativeMethods(ref, () => ({ id }), [id]);\n    // $ExpectError"
  }
]