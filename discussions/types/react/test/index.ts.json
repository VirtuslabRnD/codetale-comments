[
  {
    "id" : "574ffe5c-136e-409c-a3b9-9ddf392df5d5",
    "prId" : 21146,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21146#pullrequestreview-80372365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f7f1e76-d51b-4dfb-8bd1-e091f1c9d406",
        "parentId" : null,
        "authorId" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "body" : "I'm of the opinion that the actual type of `React.Fragment` should be opaque to clients. The fact that it is a `symbol | number` is an implementation detail. As @tkrotoff suggested I would feel better about changing references to an alias like `type FragmentType = symbol & 0xeacb;`",
        "createdAt" : "2017-11-30T22:39:49Z",
        "updatedAt" : "2017-11-30T22:39:49Z",
        "lastEditedBy" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "tags" : [
        ]
      },
      {
        "id" : "074d3d99-81ee-4b28-990a-601c2e858b8a",
        "parentId" : "1f7f1e76-d51b-4dfb-8bd1-e091f1c9d406",
        "authorId" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "body" : "Unfortunately, our type aliases aren't opaque. So creating something like `type FragmentType = symbol | 0xeacb;` wouldn't be visible by clients anyway.",
        "createdAt" : "2017-11-30T23:34:17Z",
        "updatedAt" : "2017-11-30T23:34:17Z",
        "lastEditedBy" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "tags" : [
        ]
      },
      {
        "id" : "477c2b27-1303-4331-9e75-369b631bb1e4",
        "parentId" : "1f7f1e76-d51b-4dfb-8bd1-e091f1c9d406",
        "authorId" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "body" : "All I'm saying is this test shouldn't be testing that `React.Fragment` is a `symbol | number`, because that's liable to change. Something like\r\n\r\n```ts\r\nconst fragmentType: React.FragmentType = React.Fragment\r\n```\r\n\r\nwould be appropriate.",
        "createdAt" : "2017-12-01T00:07:23Z",
        "updatedAt" : "2017-12-01T00:07:23Z",
        "lastEditedBy" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "tags" : [
        ]
      },
      {
        "id" : "dbe04d23-3be0-43de-b592-936ba7d393c1",
        "parentId" : "1f7f1e76-d51b-4dfb-8bd1-e091f1c9d406",
        "authorId" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "body" : "A type like `symbol & 0xeacb` prevents users from making a mistake by passing a `number` into `createElement`.",
        "createdAt" : "2017-12-01T00:08:59Z",
        "updatedAt" : "2017-12-01T00:08:59Z",
        "lastEditedBy" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d07771b6c5ed5c3b75c7ee3e0d939557927403d",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +230,234 @@let domNode: Element = ReactDOM.findDOMNode(component);\ndomNode = ReactDOM.findDOMNode(domNode);\nconst fragmentType: symbol | number = React.Fragment;\n\n//"
  },
  {
    "id" : "9ad65193-408f-4817-be71-a720eaeacc35",
    "prId" : 24624,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24624#pullrequestreview-108796918",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc3c9243-6ddd-46bc-85fd-64710b758f31",
        "parentId" : null,
        "authorId" : "a161efa3-ad0a-46da-bab2-b1f9e4f6d5c7",
        "body" : "This type annotation can just be removed entirely:\r\n\r\n```ts\r\nconst props = {\r\n  // ...\r\n```",
        "createdAt" : "2018-04-03T02:12:20Z",
        "updatedAt" : "2018-04-03T02:16:28Z",
        "lastEditedBy" : "a161efa3-ad0a-46da-bab2-b1f9e4f6d5c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "4628e925e15cbd4922cd42f4dd657cf23531b3f0",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +39,43 @@\n// use any for ClassAttribute type sine we're using string refs\nconst props: Props & React.ClassAttributes<any> = {\n    key: 42,\n    ref: \"myComponent42\","
  },
  {
    "id" : "faed9dc3-6409-451c-be86-a6bb2a1cca2b",
    "prId" : 38603,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/38603#pullrequestreview-293347266",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aac2bf83-a980-4dae-922c-a6f2f6b31bb8",
        "parentId" : null,
        "authorId" : "04e09978-475a-4333-8639-a85b17b7429f",
        "body" : "```suggestion\r\ninterface AttributeProps {\r\n```\r\n\r\n`React.Attributes` is not meant to be used that way since it includes props that you never see inside your component or need to validate with `propTypes`. It's technically only a private type.",
        "createdAt" : "2019-09-25T19:49:16Z",
        "updatedAt" : "2019-09-25T19:49:24Z",
        "lastEditedBy" : "04e09978-475a-4333-8639-a85b17b7429f",
        "tags" : [
        ]
      },
      {
        "id" : "9e17b33f-fec0-4b23-a10d-da30f098f3eb",
        "parentId" : "aac2bf83-a980-4dae-922c-a6f2f6b31bb8",
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "The test is broken without `extends React.Attributes` -- `WeakValidationMap<AttributeProps>` doesn't have any properties in common with `WeakValidationMap<RefAttributes<RefComponent>>` from `ForwardRefExoticComponent<RefAttributes<RefComponent>>`\r\n\r\nDoes that mean the test is broken or the new propTypes property in ForwardRefExoticComponent is wrong? I suppose I could say\r\n\r\n```ts\r\nconst ForwardingRefComponentPropTypes: React.WeakValidationMap<React.RefAttributes<RefComponent>> = {};\r\n```\r\n\r\nin the test instead.",
        "createdAt" : "2019-09-25T19:57:08Z",
        "updatedAt" : "2019-09-25T19:57:09Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      },
      {
        "id" : "d042ffca-e52c-4673-9d38-d923c0fd1cfd",
        "parentId" : "aac2bf83-a980-4dae-922c-a6f2f6b31bb8",
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "I don't know React that well, I'm just trying to get it unblocked for other contributors, so any advice you have is helpful.",
        "createdAt" : "2019-09-25T19:57:46Z",
        "updatedAt" : "2019-09-25T19:57:46Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      },
      {
        "id" : "829b6f2a-6025-4314-a8f5-1aa734e4c3bb",
        "parentId" : "aac2bf83-a980-4dae-922c-a6f2f6b31bb8",
        "authorId" : "04e09978-475a-4333-8639-a85b17b7429f",
        "body" : "Well lets merge this if this blocks other work. I'll take  look later why we need this.",
        "createdAt" : "2019-09-25T20:18:33Z",
        "updatedAt" : "2019-09-25T20:18:45Z",
        "lastEditedBy" : "04e09978-475a-4333-8639-a85b17b7429f",
        "tags" : [
        ]
      },
      {
        "id" : "1189e484-aca8-4082-872b-6114e0d9a41b",
        "parentId" : "aac2bf83-a980-4dae-922c-a6f2f6b31bb8",
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "Thanks. I merged it.\r\n\r\n@rpokorny Maybe you can take another look too?",
        "createdAt" : "2019-09-25T20:34:41Z",
        "updatedAt" : "2019-09-25T20:34:41Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      }
    ],
    "commit" : "4142c2788faddaf43518fc3820e03e209d4ccd63",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +403,407 @@});\n\ninterface AttributeProps extends React.Attributes {\n    hello: string;\n    world?: string | null;"
  },
  {
    "id" : "d59f9e22-180a-41f5-9b94-8d453f251865",
    "prId" : 41760,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/41760#pullrequestreview-345818576",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0ede3b2-b15a-4503-9a22-3f72b6738ad8",
        "parentId" : null,
        "authorId" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "body" : "> If children is null or undefined, this method will return null or undefined rather than an array.\r\n\r\nhttps://reactjs.org/docs/react-api.html#reactchildrenmap",
        "createdAt" : "2020-01-21T11:47:44Z",
        "updatedAt" : "2020-01-21T11:54:18Z",
        "lastEditedBy" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d074c98e2d78507fd0c838abe07c0a6720da367",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +523,527 @@const mappedChildrenArray0 = React.Children.map(null, num => num);\n// $ExpectType undefined\nconst mappedChildrenArray1 = React.Children.map(undefined, num => num);\n// $ExpectType number[]\nconst mappedChildrenArray2 = React.Children.map(numberChildren, num => num);"
  },
  {
    "id" : "00978fe1-74c4-4666-95d0-ff8b7700fe5e",
    "prId" : 41771,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/41771#pullrequestreview-346130710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3af10158-3414-470a-bfdc-fce3d790b6ec",
        "parentId" : null,
        "authorId" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "body" : "Previously this would not error.",
        "createdAt" : "2020-01-21T19:24:04Z",
        "updatedAt" : "2020-01-21T19:24:28Z",
        "lastEditedBy" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "tags" : [
        ]
      }
    ],
    "commit" : "28944178e1c01330b85310cda48e5a85a5a8eca0",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +537,541 @@// The return type may not be an array\n// $ExpectError\nconst mappedChildrenArray7 = React.Children.map(nodeChildren, node => node).map;\n\n//"
  },
  {
    "id" : "1e6e67ca-e2be-4b25-8454-07413ccd2f95",
    "prId" : 44898,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/44898#pullrequestreview-415141608",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "342bd331-f1e5-4e69-8c2c-ab79d06a9653",
        "parentId" : null,
        "authorId" : "04e09978-475a-4333-8639-a85b17b7429f",
        "body" : "@alloy Could you take a look at these changes and tell me if I'm missing something? It seems to me that `never` is a more appropriate type for these two cases. The components would reject `ref` anyway. It would never assign `undefined` anyway. The instance would always be `null`.",
        "createdAt" : "2020-05-19T21:17:41Z",
        "updatedAt" : "2020-06-09T16:03:12Z",
        "lastEditedBy" : "04e09978-475a-4333-8639-a85b17b7429f",
        "tags" : [
        ]
      },
      {
        "id" : "82c7aeab-bbe9-43dc-9419-684d6d9ea6f5",
        "parentId" : "342bd331-f1e5-4e69-8c2c-ab79d06a9653",
        "authorId" : "66bf5f80-ba60-4e8e-b14c-d134127a254e",
        "body" : "Yeah that seems fine to me–I used `undefined` simply to match the upstream Flow documentation.",
        "createdAt" : "2020-05-20T09:13:04Z",
        "updatedAt" : "2020-06-09T16:03:12Z",
        "lastEditedBy" : "66bf5f80-ba60-4e8e-b14c-d134127a254e",
        "tags" : [
        ]
      }
    ],
    "commit" : "dab427ff60d71ad36cf656e343061c736ec6882e",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +461,465 @@type ClassComponentAsRef = React.ElementRef<typeof RefComponent>; // $ExpectType RefComponent\ntype FunctionComponentWithoutPropsAsRef = React.ElementRef<typeof RefCarryingComponent>; // $ExpectType never\ntype FunctionComponentWithPropsAsRef = React.ElementRef<typeof FunctionComponent>; // $ExpectType never\ntype HTMLIntrinsicAsRef = React.ElementRef<'div'>; // $ExpectType HTMLDivElement\ntype SVGIntrinsicAsRef = React.ElementRef<'svg'>; // $ExpectType SVGSVGElement"
  }
]