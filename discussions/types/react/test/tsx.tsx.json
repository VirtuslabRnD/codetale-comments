[
  {
    "id" : "48d86d8f-663c-4708-b51d-5467165d2e25",
    "prId" : 22127,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/22127#pullrequestreview-83337198",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b5f8f24-aaa9-4440-a4ab-e1eade67e12e",
        "parentId" : null,
        "authorId" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "body" : "Maybe could name this component `SetStateTest`? :)",
        "createdAt" : "2017-12-13T22:10:53Z",
        "updatedAt" : "2017-12-13T22:58:54Z",
        "lastEditedBy" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "tags" : [
        ]
      }
    ],
    "commit" : "80cee0e314b9abf1a0b92aaa7d939904d3ce04fc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +79,83 @@</div>;\n\nclass Comp extends React.Component<{}, { foo: boolean, bar: boolean }> {\n    handleSomething = () => {\n      this.setState({ foo: '' }); // $ExpectError"
  },
  {
    "id" : "b9266cb1-25f5-40de-8109-9beeb723e01e",
    "prId" : 22582,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/22582#pullrequestreview-91290415",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d16f8e0-d64c-4b7e-b8f5-ba351509a637",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Is there any way to have a test for a failure case?\r\n\r\nAs far as I understand, the typescript compiler just has a blanket whitelist for any property with a `-` in its name. I don't know if it will type-check the property if a type declaration exists.\r\n\r\nAt any rate, this _is_ useful, even if not checked, for IDE code assists and documentation.",
        "createdAt" : "2018-01-10T01:12:34Z",
        "updatedAt" : "2018-01-11T00:14:10Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "75d44382-1d79-460f-9d28-3e66f54bda7d",
        "parentId" : "3d16f8e0-d64c-4b7e-b8f5-ba351509a637",
        "authorId" : "6d3474ea-5270-4451-ae67-9ff08040138b",
        "body" : "I wasn't able to find, but if there is a way, I'd love to know!",
        "createdAt" : "2018-01-10T01:16:21Z",
        "updatedAt" : "2018-01-11T00:14:10Z",
        "lastEditedBy" : "6d3474ea-5270-4451-ae67-9ff08040138b",
        "tags" : [
        ]
      },
      {
        "id" : "c264a6a4-f629-4502-8fcd-10bd71309f6f",
        "parentId" : "3d16f8e0-d64c-4b7e-b8f5-ba351509a637",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "You can add `// $ExpectError` to a line to assert that there is an error on that line.",
        "createdAt" : "2018-01-24T18:57:23Z",
        "updatedAt" : "2018-01-24T18:57:23Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f505ce4c3cb4a2c823bf7a4f3c7320c5f85eb42",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +47,51 @@    aria-checked='true'\n    aria-colcount={7}\n    aria-label='test'\n>\n    <b>bar</b>"
  },
  {
    "id" : "6cc83b1b-b8ea-4711-a169-aa45d10a779f",
    "prId" : 24509,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24509#pullrequestreview-108793820",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2702aa8a-e775-437d-9233-e916f3ff946d",
        "parentId" : null,
        "authorId" : "f42543e0-fef7-4ce2-bf03-66e44549420f",
        "body" : "I think this is the way too simple test to cover the changes. I would propose following, but I am not entirely sure how to run these tests, so there might some mistake (or several)\r\n\r\n```tsx\r\ninterface ContextTest = {\r\n  assert: boolean\r\n}\r\nconst ContextWithValue = React.createContext<ContextTest>({ assert: true })\r\nconst ContextWithoutValue = React.createContext<ContextTest>()\r\n\r\n<ContextWithValue.Context>{value => value.assert}</ContextWithValue.Context>\r\n\r\n<ContextWithoutValue.Provider value={{ assert: true }}>\r\n  <ContextWithoutValue.Context>{value => value.assert}</ContextWithoutValue.Context>\r\n</ContextWithoutValue.Provider>\r\n```",
        "createdAt" : "2018-03-30T13:25:27Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "f42543e0-fef7-4ce2-bf03-66e44549420f",
        "tags" : [
        ]
      },
      {
        "id" : "9cd4064c-628d-4616-8509-81c02d194ed4",
        "parentId" : "2702aa8a-e775-437d-9233-e916f3ff946d",
        "authorId" : "53bf9604-049e-4ce7-abee-4acc52fb133c",
        "body" : "@FredyC I'm not sure myself. The test files here don't seem to be assertion-style tests so much as a sandbox to prove that the typings work without syntax errors. \r\n\r\nI agree that there could be more code here exercising both context scenarios (with and without defaults), but I don't know that they should be executable as none of the rest of the code in this file seems to be. ",
        "createdAt" : "2018-03-30T18:41:05Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "53bf9604-049e-4ce7-abee-4acc52fb133c",
        "tags" : [
        ]
      },
      {
        "id" : "025de5f3-2d9f-4b48-ad4b-43f51976d7b3",
        "parentId" : "2702aa8a-e775-437d-9233-e916f3ff946d",
        "authorId" : "3aead6d0-9596-42c8-ac54-43d19b7c4039",
        "body" : "Well yes, tests code is not executed, because you're testing types, not React's behavior.\r\nBut tests shouldn't always be positive, if you think that there might be some usage that is not correct, but could be assumed as correct one.\r\n\r\nWhat you have to do for failing tests is add `// $ExpectError` line immediately before the test line. More about that in DT readme:\r\nhttps://github.com/DefinitelyTyped/DefinitelyTyped#lint \r\nAnd dtslint readme:\r\nhttps://github.com/Microsoft/dtslint#write-tests",
        "createdAt" : "2018-03-30T19:39:49Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "3aead6d0-9596-42c8-ac54-43d19b7c4039",
        "tags" : [
        ]
      },
      {
        "id" : "11d961b1-d59f-4712-a86d-e97f3de6d478",
        "parentId" : "2702aa8a-e775-437d-9233-e916f3ff946d",
        "authorId" : "f42543e0-fef7-4ce2-bf03-66e44549420f",
        "body" : "@scally Are you willing to try that? Perhaps it's overkill for such relatively simple thing. It's your call.",
        "createdAt" : "2018-03-31T19:33:57Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "f42543e0-fef7-4ce2-bf03-66e44549420f",
        "tags" : [
        ]
      },
      {
        "id" : "95843b9a-660f-4803-a12d-6d9678a276f4",
        "parentId" : "2702aa8a-e775-437d-9233-e916f3ff946d",
        "authorId" : "53bf9604-049e-4ce7-abee-4acc52fb133c",
        "body" : "@FredyC Yes, I'll try it out and see where I get with it.",
        "createdAt" : "2018-03-31T20:19:43Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "53bf9604-049e-4ce7-abee-4acc52fb133c",
        "tags" : [
        ]
      },
      {
        "id" : "53bcbd6a-e3da-4756-93d7-0e50318c7336",
        "parentId" : "2702aa8a-e775-437d-9233-e916f3ff946d",
        "authorId" : "53bf9604-049e-4ce7-abee-4acc52fb133c",
        "body" : "I am trying something like this:\r\n\r\n```TypeScript\r\nconst RenderPropsContext = React.createContext('defaultValue');\r\n\r\ninterface RenderPropsContextTest {\r\n    assert: boolean;\r\n}\r\n\r\nconst ContextWithDefaultValue = React.createContext<RenderPropsContextTest>({ assert: true });\r\nconst ContextWithoutDefaultValue = React.createContext<RenderPropsContextTest>();\r\n\r\nconst ContextRenderPropsConsumerComponent = (\r\n    <ContextWithDefaultValue.Consumer>\r\n        {value => value.assert}\r\n    </ContextWithDefaultValue.Consumer>\r\n);\r\n\r\nconst ContextRenderPropsProviderConsumerComponent = (\r\n    <ContextWithoutDefaultValue.Provider value={{ assert: true }}>\r\n        <ContextWithoutDefaultValue.Consumer>\r\n            {value => value.assert}\r\n        </ContextWithoutDefaultValue.Consumer>\r\n    </ContextWithoutDefaultValue.Provider>\r\n); // $ExpectError\r\n```\r\n\r\n",
        "createdAt" : "2018-03-31T20:47:17Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "53bf9604-049e-4ce7-abee-4acc52fb133c",
        "tags" : [
        ]
      },
      {
        "id" : "a57b0670-e056-4345-961c-593af63f759b",
        "parentId" : "2702aa8a-e775-437d-9233-e916f3ff946d",
        "authorId" : "53bf9604-049e-4ce7-abee-4acc52fb133c",
        "body" : "@FredyC Are these tests sufficient for what you feel should be achieved here?",
        "createdAt" : "2018-04-02T17:58:37Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "53bf9604-049e-4ce7-abee-4acc52fb133c",
        "tags" : [
        ]
      },
      {
        "id" : "2be8a12d-0f78-4cd8-86e2-f37d3cc677c6",
        "parentId" : "2702aa8a-e775-437d-9233-e916f3ff946d",
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Strange that the error is in the full statement instead of in the argument to `Consumer`, but seems to be the case.\r\n\r\nAn additional _non-erroring_ test where the argument is `value => value === undefined ? null : value.assert` would also help demonstrate it.\r\n\r\nThere's one last confirmation I'd like to take; if the Context is created with a default value, will the Consumer receive that value even if it's not put inside its Provider in the tree? ðŸ¤” _looks at source_\r\n\r\nEDIT: The context's context has a copy of the default argument as its value, and it's only overwritten by the reconciler if the Provider is present. It's also restored to its original value once the Provider tree has been processed. So indeed it can only be `undefined` if you passed something that can be `undefined` (or nothing) to the `createContext` call.",
        "createdAt" : "2018-04-03T01:46:08Z",
        "updatedAt" : "2018-04-14T00:41:12Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a990af1c23ddb4e73fa2411f2837630ddbd768b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +77,81 @@\n// React.createContext\nconst ContextWithRenderProps = React.createContext('defaultValue');\n\n// Fragments"
  }
]