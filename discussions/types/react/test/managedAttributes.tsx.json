[
  {
    "id" : "319fd259-559f-47e0-bc6e-7f0439938130",
    "prId" : 30054,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30054#pullrequestreview-168771131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "841c8588-4f16-42cf-a286-87dc4f6aeec4",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "I fixed lints that were hit while I was editing this uncommented.",
        "createdAt" : "2018-10-26T11:02:37Z",
        "updatedAt" : "2018-11-09T06:11:55Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a26c430354b67e4e5327cd03f0a2a2c523f0da3",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +27,31 @@//     fnc: (() => 'abc') as () => any,\n//     extraBool: false,\n//     reqNode: 'text_node' as NonNullable<React.ReactNode>\n// };\n"
  },
  {
    "id" : "0fefcabf-40de-42a7-9421-0b85a3490590",
    "prId" : 30054,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30054#pullrequestreview-168771131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85a42bc3-bd81-4187-bf94-7f3f7a48b0fb",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Assuming I'm using `$ExpectType` correctly these all pass. It just doesn't _actually_ work when the functional/exotic components are used in JSX.",
        "createdAt" : "2018-10-26T11:03:18Z",
        "updatedAt" : "2018-11-09T06:11:55Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a26c430354b67e4e5327cd03f0a2a2c523f0da3",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +204,208 @@// type MemoFunctionalComponentLibraryManagedAttributes = JSX.LibraryManagedAttributes<typeof MemoFunctionalComponent, Props>;\n// // $ExpectType FunctionalComponentLibraryManagedAttributes\n// type LazyMemoFunctionalComponentLibraryManagedAttributes = JSX.LibraryManagedAttributes<typeof LazyMemoFunctionalComponent, Props>;\n\n// const ForwardRef = React.forwardRef((props: Props, ref: React.Ref<ComponentWithNoDefaultProps>) => ("
  }
]