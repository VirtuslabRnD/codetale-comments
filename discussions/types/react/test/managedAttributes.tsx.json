[
  {
    "id" : "319fd259-559f-47e0-bc6e-7f0439938130",
    "prId" : 30054,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30054#pullrequestreview-168771131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "841c8588-4f16-42cf-a286-87dc4f6aeec4",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "I fixed lints that were hit while I was editing this uncommented.",
        "createdAt" : "2018-10-26T11:02:37Z",
        "updatedAt" : "2018-11-09T06:11:55Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a26c430354b67e4e5327cd03f0a2a2c523f0da3",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +27,31 @@//     fnc: (() => 'abc') as () => any,\n//     extraBool: false,\n//     reqNode: 'text_node' as NonNullable<React.ReactNode>\n// };\n"
  },
  {
    "id" : "0fefcabf-40de-42a7-9421-0b85a3490590",
    "prId" : 30054,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30054#pullrequestreview-168771131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85a42bc3-bd81-4187-bf94-7f3f7a48b0fb",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Assuming I'm using `$ExpectType` correctly these all pass. It just doesn't _actually_ work when the functional/exotic components are used in JSX.",
        "createdAt" : "2018-10-26T11:03:18Z",
        "updatedAt" : "2018-11-09T06:11:55Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a26c430354b67e4e5327cd03f0a2a2c523f0da3",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +204,208 @@// type MemoFunctionalComponentLibraryManagedAttributes = JSX.LibraryManagedAttributes<typeof MemoFunctionalComponent, Props>;\n// // $ExpectType FunctionalComponentLibraryManagedAttributes\n// type LazyMemoFunctionalComponentLibraryManagedAttributes = JSX.LibraryManagedAttributes<typeof LazyMemoFunctionalComponent, Props>;\n\n// const ForwardRef = React.forwardRef((props: Props, ref: React.Ref<ComponentWithNoDefaultProps>) => ("
  },
  {
    "id" : "973171e6-a502-4a41-a256-7c30496810df",
    "prId" : 30730,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30730#pullrequestreview-178580088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30436de3-0160-4832-b45f-1c41ea5e51fb",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Oh, cool, they actually work :tada:\r\n\r\nThe only way I had to check when I was writing these was using `JSX.LibraryManagedAttributes` directly and seeing if the types looked right.",
        "createdAt" : "2018-11-27T01:57:54Z",
        "updatedAt" : "2018-11-27T03:06:38Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "0829a4fa665555ab543e2b526750d8bc5589df33",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +121,125 @@//     <MemoAnnotatedDefaultProps />,\n//     <AnnotatedDefaultProps str='abc' />,\n//     // Requires TypeScript >= 3.2; see comment re FunctionalComponent above\n//     <MemoAnnotatedDefaultProps str='abc' />,\n//     // Requires TypeScript >= 3.2; see comment re FunctionalComponent above"
  },
  {
    "id" : "ea9d454a-a745-4915-a5e9-7848e36ecf6e",
    "prId" : 30730,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30730#pullrequestreview-178585899",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1898f556-1215-4e9f-a005-e7a0da553c23",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "The alias doesn't work? ðŸ˜ž ",
        "createdAt" : "2018-11-27T01:58:20Z",
        "updatedAt" : "2018-11-27T03:06:38Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "b420f0cf-bda0-451e-9982-56aba437a73b",
        "parentId" : "1898f556-1215-4e9f-a005-e7a0da553c23",
        "authorId" : "4bd3e2e8-1fae-432f-8029-38736d5d13f2",
        "body" : "dtslint does a [string comparison](https://github.com/Microsoft/dtslint/blob/73a196741d5b6ca9af7f6ef68ef4ee3e801ac4b5/src/rules/expectRule.ts#L302) of the expected type to the default string representation of the actual type, so I don't think this could ever have worked.  Feel free to file an enhancement request against dtslint.  In the meantime, if we really wanted to assert the equality of two types without writing out one of them in full, there are probably other ways, but in this case it didn't seem too bad.",
        "createdAt" : "2018-11-27T02:20:10Z",
        "updatedAt" : "2018-11-27T03:06:38Z",
        "lastEditedBy" : "4bd3e2e8-1fae-432f-8029-38736d5d13f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0829a4fa665555ab543e2b526750d8bc5589df33",
    "line" : 199,
    "diffHunk" : "@@ -1,1 +133,137 @@// // $ExpectType Pick<Props, \"bool\" | \"node\" | \"num\" | \"str\"> & Partial<Pick<Props, \"fnc\" | \"reqNode\">>\n// type AnnotatedDefaultPropsLibraryManagedAttributes = JSX.LibraryManagedAttributes<typeof AnnotatedDefaultProps, Props>;\n// // $ExpectType Pick<Props, \"bool\" | \"node\" | \"num\" | \"str\"> & Partial<Pick<Props, \"fnc\" | \"reqNode\">>\n// type FunctionalComponentLibraryManagedAttributes = JSX.LibraryManagedAttributes<typeof FunctionalComponent, Props>;\n// // $ExpectType Pick<Props, \"bool\" | \"node\" | \"num\" | \"str\"> & Partial<Pick<Props, \"fnc\" | \"reqNode\">>"
  }
]