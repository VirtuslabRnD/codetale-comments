[
  {
    "id" : "03fdd254-c195-43a2-93ef-eda5cb93f826",
    "prId" : 22738,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/22738#pullrequestreview-87924672",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b1b841b-4332-48b5-abfd-eb309c59bb1e",
        "parentId" : null,
        "authorId" : "cc9658aa-0aea-40d1-991b-732c9fa6334b",
        "body" : "Hey @NN--- many thanks for your PR!\r\n\r\nWhy did you not declare a `boolean` returns directly?",
        "createdAt" : "2018-01-09T12:48:59Z",
        "updatedAt" : "2018-01-09T12:49:00Z",
        "lastEditedBy" : "cc9658aa-0aea-40d1-991b-732c9fa6334b",
        "tags" : [
        ]
      },
      {
        "id" : "4f3faed7-7879-42e9-a744-f39123133965",
        "parentId" : "0b1b841b-4332-48b5-abfd-eb309c59bb1e",
        "authorId" : "e929e58b-7da7-478a-b5e2-df11c1e40e26",
        "body" : "This allows type guard check.\r\nE.g.\r\nvar abc:any;\r\nif(core.Array.isArray(abc)){\r\n// here abc is typed as any[] instead of just any.\r\n}",
        "createdAt" : "2018-01-09T15:16:14Z",
        "updatedAt" : "2018-01-09T15:16:14Z",
        "lastEditedBy" : "e929e58b-7da7-478a-b5e2-df11c1e40e26",
        "tags" : [
        ]
      },
      {
        "id" : "9b9ba467-a037-4a90-af42-34d2a3802ae0",
        "parentId" : "0b1b841b-4332-48b5-abfd-eb309c59bb1e",
        "authorId" : "cc9658aa-0aea-40d1-991b-732c9fa6334b",
        "body" : "Great! @NN--- I understand now. This is a nice `ts` feature! Thanks a lot for your explanation ðŸ˜„ ",
        "createdAt" : "2018-01-10T17:55:52Z",
        "updatedAt" : "2018-01-10T17:56:08Z",
        "lastEditedBy" : "cc9658aa-0aea-40d1-991b-732c9fa6334b",
        "tags" : [
        ]
      }
    ],
    "commit" : "84cae6d0c76bae98b875ca8827a4904b89425014",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +713,717 @@        from<T>(arrayLike: ArrayLike<T> | Iterable<T>): T[];\n        of<T>(...items: T[]): T[];\n        isArray(arg: any): arg is Array<any>;\n        push<T>(array: ArrayLike<T>, ...items: T[]): number;\n        pop<T>(array: ArrayLike<T>): T;"
  }
]