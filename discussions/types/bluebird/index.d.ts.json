[
  {
    "id" : "dc8b6e03-73ea-4122-b1f9-7519057371f4",
    "prId" : 16737,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/16737#pullrequestreview-41559084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cacc8069-1820-4427-b48f-be351048b92d",
        "parentId" : null,
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "What do you mean? If you just switch from `Object` to `object` and add the \r\n\r\n```ts\r\n// TypeScript Version: 2.2.\r\n```\r\n\r\nheader, it should just work.",
        "createdAt" : "2017-05-31T23:15:28Z",
        "updatedAt" : "2017-06-01T16:07:58Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "d46e4b71-7183-453e-914f-c173bae89ad9",
        "parentId" : "cacc8069-1820-4427-b48f-be351048b92d",
        "authorId" : "a7011979-acaf-4d2d-b61a-6d20ec8a152d",
        "body" : "I know. But i thought that we'd like to still support version 2.0 as well. Should i make it compatible only for 2.2 and newer (changing `Object` for `object`), is that ok?\r\n\r\n\\cc @lhecker ",
        "createdAt" : "2017-05-31T23:22:18Z",
        "updatedAt" : "2017-06-01T16:07:58Z",
        "lastEditedBy" : "a7011979-acaf-4d2d-b61a-6d20ec8a152d",
        "tags" : [
        ]
      },
      {
        "id" : "7814572e-bd55-4331-b8fe-a7cf2fcc060d",
        "parentId" : "cacc8069-1820-4427-b48f-be351048b92d",
        "authorId" : "a7011979-acaf-4d2d-b61a-6d20ec8a152d",
        "body" : "This is the only doubt I have. Drop support for 2.0 and use `object` or leave it for future changes to drop support and make the change\r\n\\cc @lhecker @DanielRosenwasser  ",
        "createdAt" : "2017-06-01T16:09:28Z",
        "updatedAt" : "2017-06-01T16:09:29Z",
        "lastEditedBy" : "a7011979-acaf-4d2d-b61a-6d20ec8a152d",
        "tags" : [
        ]
      }
    ],
    "commit" : "707e46062b41fa602127451d8268a97e0c350ed3",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +226,230 @@  /**\n   * Like `.catch()` but rethrows the error\n   * TODO: disallow non-objects\n   */\n  tapCatch<U>(onReject: (error?: any) => U | Bluebird.Thenable<U>): Bluebird<R>;"
  },
  {
    "id" : "10f25915-9ea9-4a89-b277-261383c1006d",
    "prId" : 17245,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17245#pullrequestreview-44597800",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee3473f6-c9d0-4710-a5b0-52ecec3a2399",
        "parentId" : null,
        "authorId" : "dddc05e9-6ff4-4fbc-927a-c3aa76c2c851",
        "body" : "If you intend to deprecate `Bluebird.Thenable`, wouldn't it be better if we replaced all uses of it inside the `index.d.ts` as well?\r\nIn general I'm in favor of using `PromiseLike`, since that guarantees future compatibility with the native promise signature, just like the actual bluebird project has a guarantee for compatbility with all native promise implementations.",
        "createdAt" : "2017-06-16T15:53:59Z",
        "updatedAt" : "2017-06-16T19:50:23Z",
        "lastEditedBy" : "dddc05e9-6ff4-4fbc-927a-c3aa76c2c851",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5c94b002020ce800d04cf96af40893d95c68e87",
    "line" : 550,
    "diffHunk" : "@@ -1,1 +953,957 @@\n  /** @deprecated Use PromiseLike<T> directly. */\n  export type Thenable<T> = PromiseLike<T>;\n\n  export interface Resolver<R> {"
  }
]