[
  {
    "id" : "dc8b6e03-73ea-4122-b1f9-7519057371f4",
    "prId" : 16737,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/16737#pullrequestreview-41559084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cacc8069-1820-4427-b48f-be351048b92d",
        "parentId" : null,
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "What do you mean? If you just switch from `Object` to `object` and add the \r\n\r\n```ts\r\n// TypeScript Version: 2.2.\r\n```\r\n\r\nheader, it should just work.",
        "createdAt" : "2017-05-31T23:15:28Z",
        "updatedAt" : "2017-06-01T16:07:58Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "d46e4b71-7183-453e-914f-c173bae89ad9",
        "parentId" : "cacc8069-1820-4427-b48f-be351048b92d",
        "authorId" : "a7011979-acaf-4d2d-b61a-6d20ec8a152d",
        "body" : "I know. But i thought that we'd like to still support version 2.0 as well. Should i make it compatible only for 2.2 and newer (changing `Object` for `object`), is that ok?\r\n\r\n\\cc @lhecker ",
        "createdAt" : "2017-05-31T23:22:18Z",
        "updatedAt" : "2017-06-01T16:07:58Z",
        "lastEditedBy" : "a7011979-acaf-4d2d-b61a-6d20ec8a152d",
        "tags" : [
        ]
      },
      {
        "id" : "7814572e-bd55-4331-b8fe-a7cf2fcc060d",
        "parentId" : "cacc8069-1820-4427-b48f-be351048b92d",
        "authorId" : "a7011979-acaf-4d2d-b61a-6d20ec8a152d",
        "body" : "This is the only doubt I have. Drop support for 2.0 and use `object` or leave it for future changes to drop support and make the change\r\n\\cc @lhecker @DanielRosenwasser  ",
        "createdAt" : "2017-06-01T16:09:28Z",
        "updatedAt" : "2017-06-01T16:09:29Z",
        "lastEditedBy" : "a7011979-acaf-4d2d-b61a-6d20ec8a152d",
        "tags" : [
        ]
      }
    ],
    "commit" : "707e46062b41fa602127451d8268a97e0c350ed3",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +226,230 @@  /**\n   * Like `.catch()` but rethrows the error\n   * TODO: disallow non-objects\n   */\n  tapCatch<U>(onReject: (error?: any) => U | Bluebird.Thenable<U>): Bluebird<R>;"
  },
  {
    "id" : "10f25915-9ea9-4a89-b277-261383c1006d",
    "prId" : 17245,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17245#pullrequestreview-44597800",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee3473f6-c9d0-4710-a5b0-52ecec3a2399",
        "parentId" : null,
        "authorId" : "dddc05e9-6ff4-4fbc-927a-c3aa76c2c851",
        "body" : "If you intend to deprecate `Bluebird.Thenable`, wouldn't it be better if we replaced all uses of it inside the `index.d.ts` as well?\r\nIn general I'm in favor of using `PromiseLike`, since that guarantees future compatibility with the native promise signature, just like the actual bluebird project has a guarantee for compatbility with all native promise implementations.",
        "createdAt" : "2017-06-16T15:53:59Z",
        "updatedAt" : "2017-06-16T19:50:23Z",
        "lastEditedBy" : "dddc05e9-6ff4-4fbc-927a-c3aa76c2c851",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5c94b002020ce800d04cf96af40893d95c68e87",
    "line" : 550,
    "diffHunk" : "@@ -1,1 +953,957 @@\n  /** @deprecated Use PromiseLike<T> directly. */\n  export type Thenable<T> = PromiseLike<T>;\n\n  export interface Resolver<R> {"
  },
  {
    "id" : "82f6680c-739d-46f1-8728-206a185b7cf7",
    "prId" : 19707,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19707#pullrequestreview-62708499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36639f48-9bd0-47df-a585-81ee7b9b209f",
        "parentId" : null,
        "authorId" : "dddc05e9-6ff4-4fbc-927a-c3aa76c2c851",
        "body" : "I believe the `nodeFunction` should be `(...args: any[]) => any` as the return value is ignored, right?",
        "createdAt" : "2017-09-13T14:37:38Z",
        "updatedAt" : "2017-09-14T10:16:53Z",
        "lastEditedBy" : "dddc05e9-6ff4-4fbc-927a-c3aa76c2c851",
        "tags" : [
        ]
      },
      {
        "id" : "6333c33c-13a5-41bc-86b8-17c1dcd8f9f6",
        "parentId" : "36639f48-9bd0-47df-a585-81ee7b9b209f",
        "authorId" : "5ebdf404-0448-4dfb-ac23-ffdb46e9c8c7",
        "body" : "thank review!\r\nAccording to typescript playbook, [callback should be of type to return void](http://www.typescriptlang.org/docs/handbook/declaration-files/do-s-and-don-ts.html#callback-types).\r\nAlso, I checked the source code of bluebird and confirmed that the [return value of callback is discarded](https://github.com/petkaantonov/bluebird/blob/master/src/promisify.js#L233).\r\nBased on the above, I have created PR to return void.\r\nIt will be helpful if you can judge from these.\r\n",
        "createdAt" : "2017-09-14T00:42:15Z",
        "updatedAt" : "2017-09-14T10:16:53Z",
        "lastEditedBy" : "5ebdf404-0448-4dfb-ac23-ffdb46e9c8c7",
        "tags" : [
        ]
      },
      {
        "id" : "357ccb23-5be2-4acb-8b4c-b389f06a8524",
        "parentId" : "36639f48-9bd0-47df-a585-81ee7b9b209f",
        "authorId" : "dddc05e9-6ff4-4fbc-927a-c3aa76c2c851",
        "body" : "@segayuu Ah, I only saw your comment just now. Sorry for the confusion - I'll approve it now. ðŸ™‚",
        "createdAt" : "2017-09-14T10:43:15Z",
        "updatedAt" : "2017-09-14T10:43:15Z",
        "lastEditedBy" : "dddc05e9-6ff4-4fbc-927a-c3aa76c2c851",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7346ede24250d598d158789ad3740ff734be409",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +756,760 @@  static promisify<T, A1, A2, A3, A4>(func: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, result?: T) => void) => void, options?: Bluebird.PromisifyOptions): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Bluebird<T>;\n  static promisify<T, A1, A2, A3, A4, A5>(func: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, result?: T) => void) => void, options?: Bluebird.PromisifyOptions): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Bluebird<T>;\n  static promisify(nodeFunction: (...args: any[]) => void, options?: Bluebird.PromisifyOptions): (...args: any[]) => Bluebird<any>;\n\n  /**"
  },
  {
    "id" : "595b6ee7-d7e4-4258-ba3b-1ee53ac8390f",
    "prId" : 22167,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/22167#pullrequestreview-83434298",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "273ec511-b4d4-44d5-a7c9-f851593809b8",
        "parentId" : null,
        "authorId" : "dddc05e9-6ff4-4fbc-927a-c3aa76c2c851",
        "body" : "Dude, this is f**** brilliant!\r\nOf courseâ€¦ And it's such an obvious solution evenâ€¦ Why didn't we use that all the time yet?!\r\n\r\n![Mind Blown](https://i.imgur.com/WrKPhfd.gif)",
        "createdAt" : "2017-12-14T09:06:25Z",
        "updatedAt" : "2017-12-14T09:08:58Z",
        "lastEditedBy" : "dddc05e9-6ff4-4fbc-927a-c3aa76c2c851",
        "tags" : [
        ]
      }
    ],
    "commit" : "42b8e18474291dc7ee3e233b19b3c8cf60bac967",
    "line" : 311,
    "diffHunk" : "@@ -1,1 +153,157 @@   * Alias `.caught();` for compatibility with earlier ECMAScript version.\n   */\n  caught: Bluebird<R>[\"catch\"];\n\n  /**"
  },
  {
    "id" : "b47ba698-2622-4bb2-b471-f1705ae89332",
    "prId" : 23152,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23152#pullrequestreview-91065979",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1ffcbc4-bed3-4ed6-9beb-014a2c489335",
        "parentId" : null,
        "authorId" : "83dd42c5-fd1b-4f69-a4a9-cb89643caf20",
        "body" : "This was a guess: I'm fairly certain \"dedefer\" isn't a word, but wasn't sure what it was supposed to be.  ",
        "createdAt" : "2018-01-24T05:06:46Z",
        "updatedAt" : "2018-01-24T05:06:46Z",
        "lastEditedBy" : "83dd42c5-fd1b-4f69-a4a9-cb89643caf20",
        "tags" : [
        ]
      }
    ],
    "commit" : "df0b61e5a0a1cfefdad8031123b55fe94017784b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +48,52 @@   * Promises/A+ `.then()`. Returns a new promise chained from this promise.\n   *\n   * The new promise will be rejected or resolved depending on the passed `fulfilledHandler`, `rejectedHandler` and the state of this promise.\n   */\n  // Based on PromiseLike.then, but returns a Bluebird instance."
  },
  {
    "id" : "bb8cc388-5887-4ea9-ba47-fb0854df0dfe",
    "prId" : 33396,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33396#pullrequestreview-207705520",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d97fd78b-f97f-4da1-a6ef-6e669d9b9a6b",
        "parentId" : null,
        "authorId" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "body" : "shouldn't this be `some<Q>(this: Bluebird<R & Iterable<Q>>, count: number): Bluebird<Q>;` ? Or do I misunderstand?",
        "createdAt" : "2019-02-25T23:43:19Z",
        "updatedAt" : "2019-02-26T16:51:44Z",
        "lastEditedBy" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "tags" : [
        ]
      },
      {
        "id" : "835e1353-dad3-427e-9727-ddbf0d0233e5",
        "parentId" : "d97fd78b-f97f-4da1-a6ef-6e669d9b9a6b",
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "Not according to the tests:\r\n\r\n```ts\r\nlet fooArrProm: Promise<Foo[]>;\r\nfooArrProm = fooArrProm.some(num);\r\n```\r\n\r\nIt doesn't make sense to me either.",
        "createdAt" : "2019-02-25T23:44:42Z",
        "updatedAt" : "2019-02-26T16:51:44Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      },
      {
        "id" : "81d74acd-ccac-45fa-8b9c-1d2de60fa72c",
        "parentId" : "d97fd78b-f97f-4da1-a6ef-6e669d9b9a6b",
        "authorId" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "body" : "Update: I do misunderstand, and the `count` parameter is important.",
        "createdAt" : "2019-02-26T00:23:55Z",
        "updatedAt" : "2019-02-26T16:51:44Z",
        "lastEditedBy" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e33c8d4e766409839912be251692f834f8c35f2",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +593,597 @@   * Same as calling `Promise.some(thisPromise)`. With the exception that if this promise is bound to a value, the returned promise is bound to that value too.\n   */\n  some(this: Bluebird<Iterable<{}>>, count: number): Bluebird<R>;\n\n  /**"
  }
]