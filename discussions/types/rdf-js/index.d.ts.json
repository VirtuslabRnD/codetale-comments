[
  {
    "id" : "32371130-0134-47f0-b08c-d7c47f89bda6",
    "prId" : 29836,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/29836#pullrequestreview-166751993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e24585f-4582-44c0-96d7-5de3d214e3a4",
        "parentId" : null,
        "authorId" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "body" : "I like the idea of defining the range of S, P, O and G, but I think this might be _too_ restricting in some cases.\r\n\r\nFor example, JSON-LD allows [generalized RDF](https://www.w3.org/TR/json-ld11-api/#dom-jsonldoptions-producegeneralizedrdf) to be produced, which basically allows you to use blank nodes as predicates.\r\nThis change would exclude the usage of the RDFJS typings for JSON-LD tools.\r\n\r\nThere are probably even more cases where stepping outside of the RDF spec might be needed.",
        "createdAt" : "2018-10-20T14:58:11Z",
        "updatedAt" : "2018-10-30T10:49:28Z",
        "lastEditedBy" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "tags" : [
        ]
      }
    ],
    "commit" : "107bde0f830659e6beda84a23168b7bb863b8717",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +145,149 @@ * @see Variable\n */\nexport type Quad_Subject = NamedNode | BlankNode | Variable;\n\n/**"
  },
  {
    "id" : "defd7c30-d3a8-4eba-9de0-74ea8167f8a6",
    "prId" : 30164,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30164#pullrequestreview-171952492",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b78dc3f8-8d28-4986-88cc-20b74d5d8bdc",
        "parentId" : null,
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "Can you check whether we have noUnusedGenerics disabled in the `tslint.json` for this package? If you care to work on them, there may be others in this package.",
        "createdAt" : "2018-11-01T17:42:35Z",
        "updatedAt" : "2018-11-06T10:33:25Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "908d7225-317c-4c95-9ee6-d8d5260ed965",
        "parentId" : "b78dc3f8-8d28-4986-88cc-20b74d5d8bdc",
        "authorId" : "4c8489d9-5c1e-43a0-96ac-ab841f11ffea",
        "body" : "There's a `\"no-unnecessary-generics\": false` in the tslint. Is that the one the you refer to? I'm not getting any linting errors",
        "createdAt" : "2018-11-02T09:23:22Z",
        "updatedAt" : "2018-11-06T10:33:25Z",
        "lastEditedBy" : "4c8489d9-5c1e-43a0-96ac-ab841f11ffea",
        "tags" : [
        ]
      },
      {
        "id" : "fcc7e18c-a8d2-4a26-9c75-697c14bd36cc",
        "parentId" : "b78dc3f8-8d28-4986-88cc-20b74d5d8bdc",
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "Yes, if you remove that line entirely it should enable that rule.",
        "createdAt" : "2018-11-02T17:46:11Z",
        "updatedAt" : "2018-11-06T10:33:25Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "8fc2e468-56fd-46e7-a5eb-870a2d505fc2",
        "parentId" : "b78dc3f8-8d28-4986-88cc-20b74d5d8bdc",
        "authorId" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "body" : "@LaurensRietveld Any update on this one?\r\nI'd be happy to update it myself if you can give me access to your fork.",
        "createdAt" : "2018-11-06T08:32:45Z",
        "updatedAt" : "2018-11-06T10:33:25Z",
        "lastEditedBy" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "tags" : [
        ]
      },
      {
        "id" : "2ef76b06-e256-4b7a-b30d-4b8f1d83fac8",
        "parentId" : "b78dc3f8-8d28-4986-88cc-20b74d5d8bdc",
        "authorId" : "4c8489d9-5c1e-43a0-96ac-ab841f11ffea",
        "body" : "I'm a bit confused ;). What is the problem and what is the proposed solution?\r\n\r\nIs the problem having the `no-unnecessary-generics` flag set to false? If so, what is the recommended solution?\r\nI think this situation results in a false-positive for this lint rule. If I see the doc for that rule, I see that it `Forbids a function to use a generic type parameter only once`. We're not using it once right? We're using if for 3 arguments and the return type. \r\n\r\n",
        "createdAt" : "2018-11-06T10:11:05Z",
        "updatedAt" : "2018-11-06T10:33:25Z",
        "lastEditedBy" : "4c8489d9-5c1e-43a0-96ac-ab841f11ffea",
        "tags" : [
        ]
      },
      {
        "id" : "0021169e-ad0f-41d0-8ba0-68e2ec38c2e4",
        "parentId" : "b78dc3f8-8d28-4986-88cc-20b74d5d8bdc",
        "authorId" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "body" : "> If so, what is the recommended solution?\r\n\r\nI think @DanielRosenwasser just means that `no-unnecessary-generics` should be set to true by removing the line from `tslint.json`.\r\n\r\n> We're not using it once right? We're using if for 3 arguments and the return type.\r\n\r\nIndeed, it should be fine here. But I guess there's nothing wrong in double-checking and making the compiler settings a bit more restrictive :-)",
        "createdAt" : "2018-11-06T10:18:23Z",
        "updatedAt" : "2018-11-06T10:33:25Z",
        "lastEditedBy" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "tags" : [
        ]
      },
      {
        "id" : "622d7cbb-b1ac-4cf9-be84-6dfe8fb58503",
        "parentId" : "b78dc3f8-8d28-4986-88cc-20b74d5d8bdc",
        "authorId" : "4c8489d9-5c1e-43a0-96ac-ab841f11ffea",
        "body" : "When removing the line I get linting errors. Is that acceptable? ",
        "createdAt" : "2018-11-06T10:26:11Z",
        "updatedAt" : "2018-11-06T10:33:25Z",
        "lastEditedBy" : "4c8489d9-5c1e-43a0-96ac-ab841f11ffea",
        "tags" : [
        ]
      },
      {
        "id" : "f79b46a3-824f-4e41-9069-84739ce1492a",
        "parentId" : "b78dc3f8-8d28-4986-88cc-20b74d5d8bdc",
        "authorId" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "body" : "What errors do you get?",
        "createdAt" : "2018-11-06T10:27:22Z",
        "updatedAt" : "2018-11-06T10:33:25Z",
        "lastEditedBy" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "tags" : [
        ]
      },
      {
        "id" : "7da11af3-a818-43a6-8001-cb688023b527",
        "parentId" : "b78dc3f8-8d28-4986-88cc-20b74d5d8bdc",
        "authorId" : "4c8489d9-5c1e-43a0-96ac-ab841f11ffea",
        "body" : "> I'm a bit confused ;). \r\n\r\nI was indeed, sorry about the confusion. This rule can indeed go. Just a simple mistake of working on the wrong branch",
        "createdAt" : "2018-11-06T10:32:35Z",
        "updatedAt" : "2018-11-06T10:33:25Z",
        "lastEditedBy" : "4c8489d9-5c1e-43a0-96ac-ab841f11ffea",
        "tags" : [
        ]
      }
    ],
    "commit" : "7235611c65bdc5bc9cf6e24d3e6bf6d03d4b9a4b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +298,302 @@     * @see DefaultGraph\n     */\n    triple<Q extends BaseQuad = Quad>(subject: Q['subject'], predicate: Q['predicate'], object: Q['object']): Q;\n\n    /**"
  },
  {
    "id" : "f72470d2-2687-4c4d-9934-7b6108b4927f",
    "prId" : 40794,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/40794#pullrequestreview-326032421",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "529d75f6-dfd7-4133-a68f-644a7138a36c",
        "parentId" : null,
        "authorId" : "a4bdefc4-8872-47e7-99fd-c570356f274c",
        "body" : "The spec has a `void` return type, as well as saying it 'returns a new accumulator' (the former must be a mistake).",
        "createdAt" : "2019-12-03T08:51:40Z",
        "updatedAt" : "2019-12-04T10:27:19Z",
        "lastEditedBy" : "a4bdefc4-8872-47e7-99fd-c570356f274c",
        "tags" : [
        ]
      },
      {
        "id" : "8b02d9fc-09a6-412f-9f71-2404cecef930",
        "parentId" : "529d75f6-dfd7-4133-a68f-644a7138a36c",
        "authorId" : "60633f70-ccdc-41ed-bb5c-0ece769c29b0",
        "body" : "Good catch: https://github.com/rdfjs/dataset-spec/pull/56",
        "createdAt" : "2019-12-03T10:26:01Z",
        "updatedAt" : "2019-12-04T10:27:19Z",
        "lastEditedBy" : "60633f70-ccdc-41ed-bb5c-0ece769c29b0",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b643c79c97291f68f4048091be841e438058897",
    "line" : 180,
    "diffHunk" : "@@ -1,1 +644,648 @@     * A callable function that can be executed on an accumulator and quad and returns a new accumulator.\n     */\n    run(accumulator: A, quad: Q, dataset: Dataset<Q>): A;\n}\n"
  },
  {
    "id" : "fb183a3f-6faf-4d67-9008-a2f3f1f81f08",
    "prId" : 40794,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/40794#pullrequestreview-326698962",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a487d8e-7fd3-4c09-a16e-6768c261e5bf",
        "parentId" : null,
        "authorId" : "a4bdefc4-8872-47e7-99fd-c570356f274c",
        "body" : "Will be updated if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/40821 is approved.",
        "createdAt" : "2019-12-04T09:21:47Z",
        "updatedAt" : "2019-12-04T10:27:19Z",
        "lastEditedBy" : "a4bdefc4-8872-47e7-99fd-c570356f274c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b643c79c97291f68f4048091be841e438058897",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +506,510 @@     * @param graph     The optional exact graph to match.\n     */\n    deleteMatches(subject?: Term, predicate?: Term, object?: Term, graph?: Term): this;\n\n    /**"
  },
  {
    "id" : "7ef4a863-e1e3-4639-a501-3d9607c57cb6",
    "prId" : 41678,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/41678#pullrequestreview-347141721",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23145f6a-38b8-41f1-b427-5ede4dd9c2e7",
        "parentId" : null,
        "authorId" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "body" : "I suggest to refer to the terms of `InQuad` here as well.",
        "createdAt" : "2020-01-21T15:18:04Z",
        "updatedAt" : "2020-01-27T19:11:27Z",
        "lastEditedBy" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "tags" : [
        ]
      },
      {
        "id" : "4298b2f3-5bf9-46f0-96e0-93e69c942ab7",
        "parentId" : "23145f6a-38b8-41f1-b427-5ede4dd9c2e7",
        "authorId" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "body" : "Like this?\r\n\r\n```ts\r\nmatch(\r\n    subject?: PropType<InQuad, 'subject'> | null,\r\n    predicate?: PropType<InQuad, 'predicate'> | null,\r\n    object?: PropType<InQuad, 'object'> | null,\r\n    graph?: PropType<InQuad, 'graph'> | null): this;\r\n```",
        "createdAt" : "2020-01-21T15:27:03Z",
        "updatedAt" : "2020-01-27T19:11:27Z",
        "lastEditedBy" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "tags" : [
        ]
      },
      {
        "id" : "bfdeabe5-85bc-4314-87b1-f9a853ee1a1c",
        "parentId" : "23145f6a-38b8-41f1-b427-5ede4dd9c2e7",
        "authorId" : "a4bdefc4-8872-47e7-99fd-c570356f274c",
        "body" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/40821 was rejected (but still makes sense to me).",
        "createdAt" : "2020-01-21T16:21:50Z",
        "updatedAt" : "2020-01-27T19:11:27Z",
        "lastEditedBy" : "a4bdefc4-8872-47e7-99fd-c570356f274c",
        "tags" : [
        ]
      },
      {
        "id" : "a67a9a8a-e721-4ac5-b277-a42b22dbd199",
        "parentId" : "23145f6a-38b8-41f1-b427-5ede4dd9c2e7",
        "authorId" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "body" : "@tpluscode Something like `InQuad['subject']` is a bit shorter, and consistent with #40821.\r\n\r\n@thewilkybarkid Good point, it's the same issue. Let's try to figure this out...\r\nIn any case, whatever option we choose, I think it's important to be consistent between `Dataset` and `Store`.\r\n\r\nSo the question is if incompatible quad subtypes `MyQuad1` and `MyQuad2` are created, should this be allowed?:\r\n```\r\nconst source = new MySource<MyQuad1>();\r\nconst matchQuad = new SomeQuad<MyQuad2>();\r\nsource.match(matchQuad.subject, matchQuad.predicate, matchQuad.object);\r\n```\r\n\r\nIn hindsight, perhaps it doesn't make much sense to allow this. What do you think @tpluscode @thewilkybarkid?",
        "createdAt" : "2020-01-22T07:51:59Z",
        "updatedAt" : "2020-01-27T19:11:27Z",
        "lastEditedBy" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "tags" : [
        ]
      },
      {
        "id" : "35a4626b-d38d-4b14-bcb1-0edbd542ef3d",
        "parentId" : "23145f6a-38b8-41f1-b427-5ede4dd9c2e7",
        "authorId" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "body" : "Yea, I think I stand by your comment from #40821. Not because you might have different kinds of quads (not really sold on that still) but because in code you might have a `Term` and declarations will prevent it from being used to match:\r\n\r\n```ts\r\n// any term we got from other lib or whatever\r\nlet subject: Term\r\nlet dataset: Dataset\r\n\r\n// restricting match will cause this to fail\r\ndataset.match(term)\r\n```",
        "createdAt" : "2020-01-22T08:57:27Z",
        "updatedAt" : "2020-01-27T19:11:27Z",
        "lastEditedBy" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "tags" : [
        ]
      },
      {
        "id" : "83228130-8643-438f-845c-308891a16aa5",
        "parentId" : "23145f6a-38b8-41f1-b427-5ede4dd9c2e7",
        "authorId" : "a4bdefc4-8872-47e7-99fd-c570356f274c",
        "body" : "Are there any genuine cases for not knowing what type of `Term` you have? (Either the exact type, or a `Quad_Subject` etc.)",
        "createdAt" : "2020-01-22T12:59:50Z",
        "updatedAt" : "2020-01-27T19:11:27Z",
        "lastEditedBy" : "a4bdefc4-8872-47e7-99fd-c570356f274c",
        "tags" : [
        ]
      },
      {
        "id" : "66a66a2e-b9f1-4739-bfb8-e7026dba897d",
        "parentId" : "23145f6a-38b8-41f1-b427-5ede4dd9c2e7",
        "authorId" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "body" : "It may just be inaccurate types in other, potential 3rd party code. Limiting the match method would likely force a bunch of `if (node.termType === 'NamedNode')` kind of statement to ensure matching terms. I expect this to quickly go out of hand with little benefit",
        "createdAt" : "2020-01-22T13:08:01Z",
        "updatedAt" : "2020-01-27T19:11:27Z",
        "lastEditedBy" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "tags" : [
        ]
      },
      {
        "id" : "c7835e59-d24c-4937-b29d-3df9490d2504",
        "parentId" : "23145f6a-38b8-41f1-b427-5ede4dd9c2e7",
        "authorId" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "body" : "> It may just be inaccurate types in other, potential 3rd party code.\r\n\r\nIMO, we should assume that typings will be accurate and correct.\r\nOtherwise we risk moving more in the direction of weakly-typed/typeless JS code.\r\n\r\n> would likely force a bunch of if (node.termType === 'NamedNode')\r\n\r\nExcept for the inaccurate typings case you mentioned, I don't expect this to happen (unless desired by the developer).",
        "createdAt" : "2020-01-23T07:43:06Z",
        "updatedAt" : "2020-01-27T19:11:27Z",
        "lastEditedBy" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "tags" : [
        ]
      },
      {
        "id" : "752c939c-87df-461f-a505-7b2658765742",
        "parentId" : "23145f6a-38b8-41f1-b427-5ede4dd9c2e7",
        "authorId" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "body" : "I'm not sure it's a good idea, and also seems unrelated to the current changes. Agree to try in a separate PR?",
        "createdAt" : "2020-01-23T09:00:05Z",
        "updatedAt" : "2020-01-27T19:11:27Z",
        "lastEditedBy" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "tags" : [
        ]
      },
      {
        "id" : "6882a457-9301-4fd0-afef-84e0dc31591d",
        "parentId" : "23145f6a-38b8-41f1-b427-5ede4dd9c2e7",
        "authorId" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "body" : "Sure, a separate PR sounds good.",
        "createdAt" : "2020-01-23T09:03:29Z",
        "updatedAt" : "2020-01-27T19:11:27Z",
        "lastEditedBy" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5d004aa7ca317059360f83bcb46d26a632eba26",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +466,470 @@     * @param graph     The optional exact graph to match.\n     */\n    match(subject?: Term | null, predicate?: Term | null, object?: Term | null, graph?: Term | null): this;\n\n    [Symbol.iterator](): Iterator<OutQuad>;"
  },
  {
    "id" : "f9de0e43-44d9-46b0-b634-5fe7ec96d645",
    "prId" : 43604,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43604#pullrequestreview-387271391",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efad9f3e-d2f1-44f5-83c6-f9203fa09a52",
        "parentId" : null,
        "authorId" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "body" : "@rubensworks @LaurensRietveld \r\n\r\nWhile improving `rdf-ext` I noticed that the factory might require similar treatment that the `DatasetCore` got before. By splitting the type arguments I was able to accurately type `DataFactoryExt` which can take any base term and use them to build it's sepcialized `QuadExt`",
        "createdAt" : "2020-04-03T13:47:44Z",
        "updatedAt" : "2020-04-03T16:20:16Z",
        "lastEditedBy" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d4a23a3b62d1413410aa78c86219da7dbea5228",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +308,312 @@     * @see Quad\n     */\n    quad(subject: InQuad['subject'], predicate: InQuad['predicate'], object: InQuad['object'], graph?: InQuad['graph']): OutQuad;\n}\n"
  },
  {
    "id" : "77d95f4e-1cef-41bf-979a-008322ba2b5a",
    "prId" : 46847,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46847#pullrequestreview-470169879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fe5f34b-8748-4056-b369-56cd28a34d63",
        "parentId" : null,
        "authorId" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "body" : "Are you sure this is necessary?\r\n\r\nTo put it differently, did your changes break any existing test in the typings tests?",
        "createdAt" : "2020-08-17T18:18:42Z",
        "updatedAt" : "2020-08-18T06:31:25Z",
        "lastEditedBy" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "tags" : [
        ]
      },
      {
        "id" : "4bf04875-ff09-4599-88e6-14ea6885ece8",
        "parentId" : "1fe5f34b-8748-4056-b369-56cd28a34d63",
        "authorId" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "body" : "Yes, every package I tested with had compilation errors upon loading in the new typings.",
        "createdAt" : "2020-08-17T18:35:42Z",
        "updatedAt" : "2020-08-18T06:31:25Z",
        "lastEditedBy" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "tags" : [
        ]
      },
      {
        "id" : "66f54d4f-6407-43c0-ac8e-3d151b9aa039",
        "parentId" : "1fe5f34b-8748-4056-b369-56cd28a34d63",
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "Looks like our lint rules are disabled for this package. Can you enable the lints in our `tslint.json` and fix up the header string?",
        "createdAt" : "2020-08-19T00:32:24Z",
        "updatedAt" : "2020-08-19T00:32:25Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "1dfd5871-f422-4b2a-bf0e-544ce6b66614",
        "parentId" : "1fe5f34b-8748-4056-b369-56cd28a34d63",
        "authorId" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "body" : "@DanielRosenwasser Not sure what you mean exactly, could you clarify?\r\n\r\nThere is in fact a `tslint.json` present. Maybe you are referring to the fact that these typings do not refer to a specific npm package? This is because this provides common typings for RDF-related TS packages: https://github.com/rdfjs/",
        "createdAt" : "2020-08-19T06:51:10Z",
        "updatedAt" : "2020-08-19T06:51:10Z",
        "lastEditedBy" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d21520d16aceee46a862a6d8d5b82c432e2027f",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +-1,3 @@// Type definitions for the RDFJS specification 4.0\n// Project: https://github.com/rdfjs/representation-task-force\n// Definitions by: Ruben Taelman <https://github.com/rubensworks>"
  },
  {
    "id" : "b785f80b-1e3d-4def-bc01-50a2c4e22ed3",
    "prId" : 46847,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46847#pullrequestreview-468742040",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbf32333-6301-4714-bccc-f5d0495449b4",
        "parentId" : null,
        "authorId" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "body" : "Why not `BaseQuad`?",
        "createdAt" : "2020-08-17T18:19:04Z",
        "updatedAt" : "2020-08-18T06:31:25Z",
        "lastEditedBy" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "tags" : [
        ]
      },
      {
        "id" : "eadffd27-fca5-41ef-9371-c694368f350a",
        "parentId" : "dbf32333-6301-4714-bccc-f5d0495449b4",
        "authorId" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "body" : "`Quad_Subject` is aimed to be used in the standard (non-generalized) RDF representation `Quad`. Allowing generalized RDF inside non-generalized RDF does not make much sense to me, so I would keep them strictly separate.",
        "createdAt" : "2020-08-17T18:37:59Z",
        "updatedAt" : "2020-08-18T06:31:25Z",
        "lastEditedBy" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d21520d16aceee46a862a6d8d5b82c432e2027f",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +147,151 @@ * @see Variable\n */\nexport type Quad_Subject = NamedNode | BlankNode | Quad | Variable;\n\n/**"
  },
  {
    "id" : "0da6655d-053f-4529-9a75-9a9267c1881b",
    "prId" : 46847,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46847#pullrequestreview-468722044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29a9bdef-cd0b-4176-a40b-bf2ecc54baa3",
        "parentId" : null,
        "authorId" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "body" : "ditto",
        "createdAt" : "2020-08-17T18:19:08Z",
        "updatedAt" : "2020-08-18T06:31:25Z",
        "lastEditedBy" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d21520d16aceee46a862a6d8d5b82c432e2027f",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +163,167 @@ * @see Variable\n */\nexport type Quad_Object = NamedNode | Literal | BlankNode | Quad | Variable;\n\n/**"
  },
  {
    "id" : "e20dd4dd-b521-4c9d-b625-338e7f1f561a",
    "prId" : 46847,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46847#pullrequestreview-468743277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bf47963-0006-4444-b687-617696b891a1",
        "parentId" : null,
        "authorId" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "body" : "This is related to the earlier generic NamedNode change? I think it should be addressed separately",
        "createdAt" : "2020-08-17T18:23:49Z",
        "updatedAt" : "2020-08-18T06:31:25Z",
        "lastEditedBy" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "tags" : [
        ]
      },
      {
        "id" : "4e9f2c33-9bb9-4061-b9b2-1e1957366133",
        "parentId" : "3bf47963-0006-4444-b687-617696b891a1",
        "authorId" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "body" : "Since this PR increases the major semver version, it makes sense to include this breaking change here. Not sure when the referred breaking change could be applied otherwise, since it was delayed to be part of a future breaking change.",
        "createdAt" : "2020-08-17T18:40:09Z",
        "updatedAt" : "2020-08-18T06:31:25Z",
        "lastEditedBy" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d21520d16aceee46a862a6d8d5b82c432e2027f",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +256,260 @@     * @see NamedNode\n     */\n    namedNode<Iri extends string = string>(value: Iri): NamedNode<Iri>;\n\n    /**"
  }
]