[
  {
    "id" : "a3976f18-ca0b-4589-80d6-b4e1e4187483",
    "prId" : 36092,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36092#pullrequestreview-247878475",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d5cda74-7241-4611-abe9-faae4329edf4",
        "parentId" : null,
        "authorId" : "3cc27761-5cc1-45d8-94e8-7f84a59d834f",
        "body" : "According to the document，`encoding` has a default value `utf8` and withFileTypes has a default value `false`\r\n\r\nSo I think here should be `{ encoding?: string, withFileTypes?: boolean } `",
        "createdAt" : "2019-06-10T21:41:50Z",
        "updatedAt" : "2019-06-11T14:01:58Z",
        "lastEditedBy" : "3cc27761-5cc1-45d8-94e8-7f84a59d834f",
        "tags" : [
        ]
      },
      {
        "id" : "6671df9f-84c6-4d98-92dc-d1f7bfa40030",
        "parentId" : "8d5cda74-7241-4611-abe9-faae4329edf4",
        "authorId" : "1075d897-d1f3-45c2-a067-9d9a3cb0a911",
        "body" : "Overloaded signatures were already provided to effectively support `{ encoding?: string, withFileTypes?: boolean }`.\r\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/blob/e8c7805c47489ed1b20821d9c22fae10be014e75/types/node/fs.d.ts#L821-L861",
        "createdAt" : "2019-06-10T21:53:31Z",
        "updatedAt" : "2019-06-11T14:01:58Z",
        "lastEditedBy" : "1075d897-d1f3-45c2-a067-9d9a3cb0a911",
        "tags" : [
        ]
      },
      {
        "id" : "0fc01e2a-8b48-4c13-996f-504895bc2622",
        "parentId" : "8d5cda74-7241-4611-abe9-faae4329edf4",
        "authorId" : "3cc27761-5cc1-45d8-94e8-7f84a59d834f",
        "body" : "ok,I will approve it.",
        "createdAt" : "2019-06-10T22:36:28Z",
        "updatedAt" : "2019-06-11T14:01:58Z",
        "lastEditedBy" : "3cc27761-5cc1-45d8-94e8-7f84a59d834f",
        "tags" : [
        ]
      }
    ],
    "commit" : "db0dc557b626fe5de978ee6182c40fdcde094396",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +859,863 @@     * @param options If called with `withFileTypes: true` the result data will be an array of Dirent.\n     */\n    function readdir(path: PathLike, options: { encoding?: string | null; withFileTypes: true }, callback: (err: NodeJS.ErrnoException | null, files: Dirent[]) => void): void;\n\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime."
  },
  {
    "id" : "9d7d595c-121e-455e-a987-404de5fe98f3",
    "prId" : 36092,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36092#pullrequestreview-247860576",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03568c5a-0aaa-419d-9d4c-99dca5a42acc",
        "parentId" : null,
        "authorId" : "3cc27761-5cc1-45d8-94e8-7f84a59d834f",
        "body" : "see the above.",
        "createdAt" : "2019-06-10T21:42:33Z",
        "updatedAt" : "2019-06-11T14:01:58Z",
        "lastEditedBy" : "3cc27761-5cc1-45d8-94e8-7f84a59d834f",
        "tags" : [
        ]
      }
    ],
    "commit" : "db0dc557b626fe5de978ee6182c40fdcde094396",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +918,922 @@     * @param options If called with `withFileTypes: true` the result data will be an array of Dirent.\n     */\n    function readdirSync(path: PathLike, options: { encoding?: string | null; withFileTypes: true }): Dirent[];\n\n    /**"
  },
  {
    "id" : "2534d64c-842b-443f-a5f3-614af90f8767",
    "prId" : 43579,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43579#pullrequestreview-386496099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4437c987-4db3-4347-90a1-4ce6fa4799e9",
        "parentId" : null,
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "Doesn't this line render the specialised overloads mood?\r\nA string CAN only ever be returned if `recursive` IF an `MakeDirectoryOptions` is passed for the options.\r\nI think you can remove the type union here and reduce it to just `MakeDirectoryOptions`",
        "createdAt" : "2020-04-02T14:04:03Z",
        "updatedAt" : "2020-04-02T14:04:03Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      },
      {
        "id" : "c6953a00-02de-4f55-b5ad-f36d3060075f",
        "parentId" : "4437c987-4db3-4347-90a1-4ce6fa4799e9",
        "authorId" : "e5209397-2510-4745-aef6-1632dc787392",
        "body" : "This is the fallback overload to ensure that we don’t break existing code, where the exact subtype of `options` can’t be determined.\r\n\r\nThis fallback overload also exists for `child_process.spawn`: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/45aba8f505f4e353ecef3d0b589fe968836918b7/types/node/child_process.d.ts#L258>\r\n\r\n---\r\n\r\nThis is necessary because of <https://github.com/microsoft/TypeScript/issues/14107>.",
        "createdAt" : "2020-04-02T14:42:10Z",
        "updatedAt" : "2020-04-02T14:42:10Z",
        "lastEditedBy" : "e5209397-2510-4745-aef6-1632dc787392",
        "tags" : [
        ]
      }
    ],
    "commit" : "45aba8f505f4e353ecef3d0b589fe968836918b7",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +889,893 @@     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\n     */\n    function mkdir(path: PathLike, options: number | string | MakeDirectoryOptions | null | undefined, callback: (err: NodeJS.ErrnoException | null, path: string | undefined) => void): void;\n\n    /**"
  },
  {
    "id" : "2c1f8116-2151-4df4-b062-8040c3111d2f",
    "prId" : 43579,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43579#pullrequestreview-386458798",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdb38e6e-3dc3-400e-b6c0-86346f96c882",
        "parentId" : null,
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "See above comment for overload.",
        "createdAt" : "2020-04-02T14:04:25Z",
        "updatedAt" : "2020-04-02T14:05:50Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "45aba8f505f4e353ecef3d0b589fe968836918b7",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +2344,2348 @@         * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\n         */\n        function mkdir(path: PathLike, options?: number | string | MakeDirectoryOptions | null): Promise<string | undefined>;\n\n        /**"
  },
  {
    "id" : "ea51497a-3c5a-4518-8e44-5e6d70f1fb8c",
    "prId" : 48841,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/48841#pullrequestreview-585059708",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33c25ec1-796f-489c-9502-1e4d6cba907b",
        "parentId" : null,
        "authorId" : "f43a9e94-87c5-41c6-92f3-8283964d73b7",
        "body" : "@Semigradsky marking this property as `@deprecated` is a problem. This makes VSCode show the entire property as deprecated, which it isn't. The behavior is changing, but it is not deprecated.",
        "createdAt" : "2021-02-07T05:16:34Z",
        "updatedAt" : "2021-02-07T05:16:34Z",
        "lastEditedBy" : "f43a9e94-87c5-41c6-92f3-8283964d73b7",
        "tags" : [
        ]
      },
      {
        "id" : "23221051-ae86-4774-84c0-b59690132f86",
        "parentId" : "33c25ec1-796f-489c-9502-1e4d6cba907b",
        "authorId" : "b9afcfdd-cfe4-4170-88af-2de9b15ff88b",
        "body" : "As I see per comment using `fs.rm(path, { recursive: true, force: true })` is more preferred than `fs.rmdir(path, { recursive: true })`. `recursive: false` is default so you no need to use this property.",
        "createdAt" : "2021-02-07T19:00:00Z",
        "updatedAt" : "2021-02-07T19:00:01Z",
        "lastEditedBy" : "b9afcfdd-cfe4-4170-88af-2de9b15ff88b",
        "tags" : [
        ]
      },
      {
        "id" : "33dfda9d-051f-4f1d-9102-7ec14123b521",
        "parentId" : "33c25ec1-796f-489c-9502-1e4d6cba907b",
        "authorId" : "f43a9e94-87c5-41c6-92f3-8283964d73b7",
        "body" : "Not necessarily - libraries which need to support both Node before v14 and Node after v14 need to detect the existence of `fs.rm` and fall back to `fs.rmdir`",
        "createdAt" : "2021-02-07T19:27:30Z",
        "updatedAt" : "2021-02-07T19:27:30Z",
        "lastEditedBy" : "f43a9e94-87c5-41c6-92f3-8283964d73b7",
        "tags" : [
        ]
      }
    ],
    "commit" : "ffd00d2033a54654e104e24cb9354fded0e2060b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +831,835 @@        maxRetries?: number;\n        /**\n         * @deprecated since v14.14.0 In future versions of Node.js,\n         * `fs.rmdir(path, { recursive: true })` will throw on nonexistent\n         * paths, or when given a file as a target."
  },
  {
    "id" : "e874c117-4c4f-4739-af13-04275471bc52",
    "prId" : 50120,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50120#pullrequestreview-588273856",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6dfc4dda-c19b-424b-865d-2901faec79df",
        "parentId" : null,
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "I think the `options === undefined` case is not optimal here as the result should be of type `Stats`.\r\n\r\nI think omitting `| undefined` here is better because this case is handled correct by the overload two lines above.",
        "createdAt" : "2021-02-04T14:51:59Z",
        "updatedAt" : "2021-02-04T14:57:22Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "2278bfbf-b865-4893-bac5-b55a6cc61ffb",
        "parentId" : "6dfc4dda-c19b-424b-865d-2901faec79df",
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "Its possible you could have a weakly defined `StatOptions | undefined` that you want to pass in, which should be legal. Since you can't differentiate between whether its a `Stats` or `BigIntStats` due to the weaker type, I would expect that to be the result. This definition looks fine to me.",
        "createdAt" : "2021-02-11T06:31:02Z",
        "updatedAt" : "2021-02-11T06:31:02Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      },
      {
        "id" : "12c78f56-72ce-465b-b0bb-1cb6a92e9bbf",
        "parentId" : "6dfc4dda-c19b-424b-865d-2901faec79df",
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "Also, the `undefined` case should hit the first overload (with `& { bigint?: false }`), which will correctly return `Stats`.",
        "createdAt" : "2021-02-11T06:37:05Z",
        "updatedAt" : "2021-02-11T06:37:05Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e39b21b87ab4fe6bc6d43739fa5cbcde9f801ec",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +540,544 @@    export function stat(path: PathLike, options: StatOptions & { bigint?: false } | undefined, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;\n    export function stat(path: PathLike, options: StatOptions & { bigint: true }, callback: (err: NodeJS.ErrnoException | null, stats: BigIntStats) => void): void;\n    export function stat(path: PathLike, options: StatOptions | undefined, callback: (err: NodeJS.ErrnoException | null, stats: Stats | BigIntStats) => void): void;\n\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime."
  },
  {
    "id" : "e46a52d5-dbf7-4b35-9e24-72bad98ad478",
    "prId" : 50120,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50120#pullrequestreview-588273350",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98804b9e-d1cf-415b-8eda-571a2c3108fb",
        "parentId" : null,
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "what is the advantage of `StatOptions & { bigint: true }` compared to `BigIntOptions` used till now?",
        "createdAt" : "2021-02-04T14:53:41Z",
        "updatedAt" : "2021-02-04T14:53:41Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "02478096-9400-4687-8d34-b5fd6647a652",
        "parentId" : "98804b9e-d1cf-415b-8eda-571a2c3108fb",
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "It actually looks easier to see *why* this matters with the options inline. ",
        "createdAt" : "2021-02-11T06:35:13Z",
        "updatedAt" : "2021-02-11T06:36:06Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e39b21b87ab4fe6bc6d43739fa5cbcde9f801ec",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +539,543 @@    export function stat(path: PathLike, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;\n    export function stat(path: PathLike, options: StatOptions & { bigint?: false } | undefined, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;\n    export function stat(path: PathLike, options: StatOptions & { bigint: true }, callback: (err: NodeJS.ErrnoException | null, stats: BigIntStats) => void): void;\n    export function stat(path: PathLike, options: StatOptions | undefined, callback: (err: NodeJS.ErrnoException | null, stats: Stats | BigIntStats) => void): void;\n"
  },
  {
    "id" : "3f6a26a4-72c8-4b8c-b0c3-62bf5cf64a2b",
    "prId" : 50120,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50120#pullrequestreview-588273536",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "748c1809-675b-4422-b36e-2a58a94a0ae1",
        "parentId" : null,
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "There is quite some copy paste of this compound type.\r\nWhat about adding something like this instead:\r\n```\r\ninterface NoBigIntOptions {\r\n  bigint?: false;\r\n}\r\n```",
        "createdAt" : "2021-02-04T14:56:11Z",
        "updatedAt" : "2021-02-04T14:56:12Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "8b7ab8e3-5236-48c2-a7a5-8fada2df5558",
        "parentId" : "748c1809-675b-4422-b36e-2a58a94a0ae1",
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "It actually looks easier to see *why* this matters with the options inline. Are you recommending it be `StatOptions & NoBigIntOptions`? Or are you recommending a `NoBigIntOptions` interface that inherits from `StatOptions`? If the latter, The naming of `BigIntOptions`/`NoBigIntOptions` seems very ambiguous to me. Personally, I'd rather see either:\r\n\r\n1. `StatOptions & { bigint: true }` (as is written), or\r\n2. `BigIntStatOptions`/`NoBigIntStatOptions` (indicating the specific variations of `StatOptions`\r\n\r\nPersonally I think (1) is easier to read and reason over.",
        "createdAt" : "2021-02-11T06:36:00Z",
        "updatedAt" : "2021-02-11T06:36:00Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e39b21b87ab4fe6bc6d43739fa5cbcde9f801ec",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +538,542 @@     */\n    export function stat(path: PathLike, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;\n    export function stat(path: PathLike, options: StatOptions & { bigint?: false } | undefined, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;\n    export function stat(path: PathLike, options: StatOptions & { bigint: true }, callback: (err: NodeJS.ErrnoException | null, stats: BigIntStats) => void): void;\n    export function stat(path: PathLike, options: StatOptions | undefined, callback: (err: NodeJS.ErrnoException | null, stats: Stats | BigIntStats) => void): void;"
  }
]