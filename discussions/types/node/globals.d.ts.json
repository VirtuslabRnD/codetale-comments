[
  {
    "id" : "842b88d5-3dba-410f-a6bd-4386b7994e7b",
    "prId" : 32691,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/32691#pullrequestreview-200865266",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fe56766-f1d7-433f-bbba-e126772d0647",
        "parentId" : null,
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "I'd have to look to see when this was added, but this value does not actually exist in NodeJS and most likely should also be removed.",
        "createdAt" : "2019-02-01T02:08:35Z",
        "updatedAt" : "2019-02-06T23:58:27Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      },
      {
        "id" : "c25d281d-bfb0-4441-9916-db8671d76cc1",
        "parentId" : "1fe56766-f1d7-433f-bbba-e126772d0647",
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "see #15093, #26034 (observable) and #25269 (asyncIterator)\r\nNot sure if the rxjs (v6) compatibility is still needed.",
        "createdAt" : "2019-02-06T23:50:46Z",
        "updatedAt" : "2019-02-06T23:58:27Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      }
    ],
    "commit" : "77a6c2a9706e17d83a3623f2b1686aafa383e27b",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +144,148 @@\ninterface SymbolConstructor {\n    readonly observable: symbol;\n}\n"
  },
  {
    "id" : "abaa0456-f0a7-4d20-ba8c-4283aae95540",
    "prId" : 33527,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33527#pullrequestreview-209930882",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c55d4d8-0124-4e6d-bc67-7828f995b2c1",
        "parentId" : null,
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "seems the variant `Buffer.from(object[, offsetOrEncoding[, length]])` is missing which was partly supported by this one, see https://nodejs.org/dist/latest-v11.x/docs/api/buffer.html#buffer_class_method_buffer_from_object_offsetorencoding_length",
        "createdAt" : "2019-03-03T20:41:20Z",
        "updatedAt" : "2019-03-06T20:51:00Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "0171d273-68af-4dfb-a2c4-529787d38569",
        "parentId" : "7c55d4d8-0124-4e6d-bc67-7828f995b2c1",
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "Symbols are tricky, I'm not touching this one, feel free to add it in another PR.\r\nPlease note this will likely only work in the `3.2` folder.",
        "createdAt" : "2019-03-03T21:09:06Z",
        "updatedAt" : "2019-03-06T20:51:00Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "a994a227d834d98580e515abf886b6350f3dff6c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +361,365 @@     * @param data data to create a new Buffer\n     */\n    from(data: number[]): Buffer;\n    from(data: Uint8Array): Buffer;\n    /**"
  },
  {
    "id" : "529d9141-a670-4de0-b4e5-b40f80bf71b8",
    "prId" : 36660,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36660#pullrequestreview-263269964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f049e2c8-83aa-4c33-8d2a-1eb7c5f93bf2",
        "parentId" : null,
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "Do we care about `Buffer` being subclassed? Specifying `constructor` prevents `Buffer` subclasses from having differing construct signatures. I'm aware this is an existing declaration, but it seems like it could be problematic.",
        "createdAt" : "2019-07-16T20:34:51Z",
        "updatedAt" : "2019-07-17T00:32:37Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      },
      {
        "id" : "21b8ee7c-e7b4-4757-a036-53098a223eb7",
        "parentId" : "f049e2c8-83aa-4c33-8d2a-1eb7c5f93bf2",
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "See previous discussion, I'm personally against defining it as it is a VERY niche use case, but it would be a breaking change.",
        "createdAt" : "2019-07-16T22:26:24Z",
        "updatedAt" : "2019-07-17T00:32:37Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      },
      {
        "id" : "cdfcd178-bbd7-4bc1-8629-3de53dae8637",
        "parentId" : "f049e2c8-83aa-4c33-8d2a-1eb7c5f93bf2",
        "authorId" : "f20e512d-d787-45a8-a000-96a979941658",
        "body" : "Until all classes T have `.constructor` as a type T, this is important for me to be able to correctly type `qs` (something i'm gradually exploring). It'd be appreciated if it wasn't removed.",
        "createdAt" : "2019-07-16T22:34:17Z",
        "updatedAt" : "2019-07-17T00:32:37Z",
        "lastEditedBy" : "f20e512d-d787-45a8-a000-96a979941658",
        "tags" : [
        ]
      },
      {
        "id" : "187866a8-9bd8-47b4-9ad5-537469cbc811",
        "parentId" : "f049e2c8-83aa-4c33-8d2a-1eb7c5f93bf2",
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "> Until all classes T have .constructor as a type T, this is important for me to be able to correctly type qs (something i'm gradually exploring). It'd be appreciated if it wasn't removed.\r\n\r\nWe will probably never do this as it would break subclassing where the subclass has a differing construct signature:\r\n```ts\r\nclass SuperClass {\r\n  a: string;\r\n  constructor(a: string) {\r\n    this.a = a;\r\n  }\r\n}\r\n\r\nclass SubClass extends SuperClass {\r\n  b: string;\r\n  constructor(opts: { a: string, b: string }) {\r\n    super(opts.a);\r\n    this.b = opts.b;\r\n  }\r\n}\r\n\r\ninterface SuperClass {\r\n    constructor: typeof SuperClass;\r\n}\r\n\r\ninterface SubClass {\r\n    //    ^^^^^^^^\r\n    // error: class 'SubClass' incorrectly extends base class 'SuperClass'.\r\n    //  Types of property 'constructor' are incompatible.\r\n    //    Type 'typeof SubClass' is not assignable to type 'typeof SuperClass'.\r\n    //      Types of parameters 'opts' and 'a' are incompatible.\r\n    //        Type 'string' is not assignable to type '{ a: string; b: string; }'.\r\n    constructor: typeof SubClass;\r\n}\r\n```\r\n\r\nPlayground Link: https://www.typescriptlang.org/play/index.html#code/MYGwhgzhAEDKCuAHApgJwMLitA3gKGmjAC5oIAXVASwDsBzAbgOmAHsaLV5hzXUAKEmUq06ASlzNC5ABZUIAOjDQAvESaEAvnm15QkGAgBGmA9GQAPcshoATQ0jSns+QkdKdRGlu07deAqyI5BCkOEQeIvQANNDuwtT00JoSroRkjoHBimBi3tJyikaq0EEhCkbe2rq01qgAZmDAyHCZzjBphGwclP58pOQAniis9a0oGFgQTDU0dY3NrSZTkuk+PVw8-dBDI2PG7TNAA",
        "createdAt" : "2019-07-16T23:21:56Z",
        "updatedAt" : "2019-07-17T00:32:37Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      },
      {
        "id" : "e8f45df4-7447-4e37-83a8-48e181091691",
        "parentId" : "f049e2c8-83aa-4c33-8d2a-1eb7c5f93bf2",
        "authorId" : "f20e512d-d787-45a8-a000-96a979941658",
        "body" : "I guess i don’t understand why, because the constructor property has no relationship to super, and I’d expect with the interface approach to have to subtract out the constructor, or union it.\r\n\r\nCertainly not directly relevant to this PR tho.",
        "createdAt" : "2019-07-16T23:40:33Z",
        "updatedAt" : "2019-07-17T00:32:37Z",
        "lastEditedBy" : "f20e512d-d787-45a8-a000-96a979941658",
        "tags" : [
        ]
      },
      {
        "id" : "eb2868c5-6151-40ce-9957-c3697db601c4",
        "parentId" : "f049e2c8-83aa-4c33-8d2a-1eb7c5f93bf2",
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "If you type `.constructor` as `typeof SuperClass`, you might expect to be able to do this:\r\n```ts\r\nclass SuperClass {\r\n  a: string;\r\n  constructor(a: string) {\r\n    this.a = a;\r\n  }\r\n  clone() {\r\n    return new this.constructor(this.a);\r\n  }\r\n}\r\n```\r\nHowever, this isn't sound as any subclass could have an incompatible construct signature.",
        "createdAt" : "2019-07-16T23:47:54Z",
        "updatedAt" : "2019-07-17T00:32:37Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      },
      {
        "id" : "b50b8464-21a0-4bae-8d3c-b23de0c3238f",
        "parentId" : "f049e2c8-83aa-4c33-8d2a-1eb7c5f93bf2",
        "authorId" : "f20e512d-d787-45a8-a000-96a979941658",
        "body" : "Then it should be the union of all constructor types, such that if they’re incompatible you need an explicit cast to call it.",
        "createdAt" : "2019-07-16T23:49:21Z",
        "updatedAt" : "2019-07-17T00:32:37Z",
        "lastEditedBy" : "f20e512d-d787-45a8-a000-96a979941658",
        "tags" : [
        ]
      },
      {
        "id" : "d136e4c7-1305-44e8-b037-29ff929f1127",
        "parentId" : "f049e2c8-83aa-4c33-8d2a-1eb7c5f93bf2",
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "You can't have a \"union of all constructor types\" when typing `constructor` of `SuperClass`, because you can't know all of the possible subclasses at that time.\r\n\r\nFor your case, the more sound approach would be to do something like:\r\n```js\r\nconst { Buffer } = require(\"buffer\");\r\nconst { Buffer: SaferBuffer } = require(\"safer-buffer\");\r\nvar isBuffer = function isBuffer(obj) {\r\n  return Buffer.isBuffer(obj) || SaferBuffer.isBuffer(obj);\r\n}\r\n```\r\n\r\nI could see a *possible* future mechanism for `this.constructor` that returned the static side of the containing class *without* call or construct signatures (but retaining the apparent type of `Function`). Then in `qs` you would do `(obj: (Buffer | Value) & { constructor?: { isBuffer?(obj: any): boolean; } }) => boolean;`",
        "createdAt" : "2019-07-17T00:00:24Z",
        "updatedAt" : "2019-07-17T00:32:37Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      },
      {
        "id" : "70ed9118-0367-445e-8f14-8e793f3df322",
        "parentId" : "f049e2c8-83aa-4c33-8d2a-1eb7c5f93bf2",
        "authorId" : "f20e512d-d787-45a8-a000-96a979941658",
        "body" : "In qs, we can’t add those deps since it would increase bundle size for everyone whether they’re using Buffer or not, nor can we even reference Buffer directly.",
        "createdAt" : "2019-07-17T00:03:35Z",
        "updatedAt" : "2019-07-17T00:32:37Z",
        "lastEditedBy" : "f20e512d-d787-45a8-a000-96a979941658",
        "tags" : [
        ]
      },
      {
        "id" : "10dd2f98-628a-45d6-a6ef-6cbfb133c5c2",
        "parentId" : "f049e2c8-83aa-4c33-8d2a-1eb7c5f93bf2",
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "(though I suppose `SaferBuffer.isBuffer` is just `Buffer.isBuffer`)",
        "createdAt" : "2019-07-17T00:04:58Z",
        "updatedAt" : "2019-07-17T00:32:37Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      },
      {
        "id" : "b808affb-2147-4e6e-8d36-cdc131e40017",
        "parentId" : "f049e2c8-83aa-4c33-8d2a-1eb7c5f93bf2",
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "Is it strictly necessary to enforce `Buffer`'s constructor is `Buffer` then? From a type-perspective the assumption is that if you are using the `Buffer` type from `@types/node` then you should be a `Buffer` (hand-wavy type-casts like `x as unknown as Buffer` aside). If you can't import or reference `Buffer` at runtime, your only type safety would be a duck-typed best-fit scenario:\r\n```js\r\nvar isBuffer = function (obj) {\r\n  ...\r\n  if (obj.constructor && typeof obj.constructor.isBuffer === \"function\" && obj.constructor.isBuffer.length >= 1) {\r\n    try {\r\n      const result = obj.constructor.isBuffer(obj);\r\n      return typeof result === \"boolean\" && result; // pretty sure this could be a buffer...\r\n    }\r\n    catch {\r\n      return false; // definitely not a buffer\r\n    }\r\n  }\r\n  return false; // no way to know  \r\n}\r\n```",
        "createdAt" : "2019-07-17T00:15:14Z",
        "updatedAt" : "2019-07-17T00:32:37Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      },
      {
        "id" : "6bbb38c4-c80d-4f9b-b572-d95508956d2c",
        "parentId" : "f049e2c8-83aa-4c33-8d2a-1eb7c5f93bf2",
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "@ljharb: I filed https://github.com/microsoft/TypeScript/issues/32452 as a suggestion for improving the type of `constructor`. This includes a possible workaround for the subclassing issue that could be employed today: \r\n\r\n```ts\r\ntype StaticMembers<TClass extends Function> = Pick<TClass, keyof TClass> & Function;\r\ninterface Buffer {\r\n  constructor: StaticMembers<typeof Buffer>;\r\n}\r\n```",
        "createdAt" : "2019-07-17T19:31:39Z",
        "updatedAt" : "2019-07-17T19:31:40Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "e291047ee5678269937885193a55cac00118c23a",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +241,245 @@\ninterface Buffer {\n    constructor: typeof Buffer;\n}\n"
  },
  {
    "id" : "10f519ba-60ee-4412-8825-f0c34bff1ba3",
    "prId" : 39209,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/39209#pullrequestreview-304673655",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78b56548-0f15-414f-bcfc-7c4a9f86827c",
        "parentId" : null,
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "`createRequire` allows `string | URL`",
        "createdAt" : "2019-10-17T15:44:58Z",
        "updatedAt" : "2019-10-18T07:54:32Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "ef53adff-2b6f-49f9-9c0b-c3e0a5a284bf",
        "parentId" : "78b56548-0f15-414f-bcfc-7c4a9f86827c",
        "authorId" : "58e28416-019c-489e-9872-117fa8f884e6",
        "body" : "@Flarna updated",
        "createdAt" : "2019-10-17T16:18:08Z",
        "updatedAt" : "2019-10-18T07:54:32Z",
        "lastEditedBy" : "58e28416-019c-489e-9872-117fa8f884e6",
        "tags" : [
        ]
      },
      {
        "id" : "e5138e65-5859-410c-bfe0-18c9112cac02",
        "parentId" : "78b56548-0f15-414f-bcfc-7c4a9f86827c",
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "seems this causes problems, CI is red. If you know how to fix it please do so otherwise revert to `string` only and leave adding `URL` open for a followup PR. I think it's not easy to import URL in global.d.ts.",
        "createdAt" : "2019-10-17T18:33:34Z",
        "updatedAt" : "2019-10-18T07:54:32Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "394ca162-6e4f-4273-b53c-41989f3665fc",
        "parentId" : "78b56548-0f15-414f-bcfc-7c4a9f86827c",
        "authorId" : "58e28416-019c-489e-9872-117fa8f884e6",
        "body" : "removed the url parameter. Actually I think we should import url from \"url.d.ts\" but I am not sure how it must be done in right way.",
        "createdAt" : "2019-10-18T07:57:00Z",
        "updatedAt" : "2019-10-18T07:57:00Z",
        "lastEditedBy" : "58e28416-019c-489e-9872-117fa8f884e6",
        "tags" : [
        ]
      },
      {
        "id" : "75db6169-c975-4638-b399-fa2885007747",
        "parentId" : "78b56548-0f15-414f-bcfc-7c4a9f86827c",
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "iirc referencing modules in a global context doesn't work.",
        "createdAt" : "2019-10-18T08:08:41Z",
        "updatedAt" : "2019-10-18T08:08:44Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      },
      {
        "id" : "276e3a98-90e1-4097-8878-9018af74d970",
        "parentId" : "78b56548-0f15-414f-bcfc-7c4a9f86827c",
        "authorId" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "body" : "`string | import('url').URL`?",
        "createdAt" : "2019-10-18T22:47:40Z",
        "updatedAt" : "2019-10-18T22:47:40Z",
        "lastEditedBy" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "tags" : [
        ]
      },
      {
        "id" : "4e954f1f-d334-4146-a778-2b54a26bbc7f",
        "parentId" : "78b56548-0f15-414f-bcfc-7c4a9f86827c",
        "authorId" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "body" : "That was added in TypeScript 2.9, though. To support your TS 2.1 definition, I believe it would work to `import { URL } from \"url\";` at the top and then wrap the rest of the file in `declare global { ... }`.",
        "createdAt" : "2019-10-18T22:51:40Z",
        "updatedAt" : "2019-10-18T22:51:40Z",
        "lastEditedBy" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "tags" : [
        ]
      },
      {
        "id" : "195126f0-7a40-4d16-bce7-b0ba4760ea09",
        "parentId" : "78b56548-0f15-414f-bcfc-7c4a9f86827c",
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "I tried the `declare global {}` variant but failed. it complains in process.d.ts that node typings are missing.\r\n\r\nOff topic but I have to comment regarding \"To support **_your_** TS 2.1 definition\": we asked several times to raise the min typescript version for definitions here but this was rejected by the maintainers of this repo.\r\nDoing it by hand means updating >1000 dependents and this ends up in a PR that unicorns because of a too big changeset and as a result gets never merged as it can't be reviewed.\r\n",
        "createdAt" : "2019-10-18T23:12:50Z",
        "updatedAt" : "2019-10-18T23:12:50Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "a2270983-1244-494e-aca5-1af4a4df6e5b",
        "parentId" : "78b56548-0f15-414f-bcfc-7c4a9f86827c",
        "authorId" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "body" : "Ugh, it looks like the thing that’s preventing `declare global` is a bug that ran all the way up until 2.9: https://github.com/microsoft/TypeScript/issues/23796",
        "createdAt" : "2019-10-21T16:01:36Z",
        "updatedAt" : "2019-10-21T16:01:37Z",
        "lastEditedBy" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f22d318d6cac6f709ac45377919cc8fe3190477",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1138,1142 @@         */\n        static createRequireFromPath(path: string): NodeRequireFunction;\n        static createRequire(path: string): NodeRequireFunction;\n        static builtinModules: string[];\n"
  },
  {
    "id" : "768f876d-2bff-46f6-adeb-eb93c4ece254",
    "prId" : 48570,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/48570#pullrequestreview-514152677",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "420c589b-8ab6-410c-8fb6-20347bb525ba",
        "parentId" : null,
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "I think `clearTimeout()` should be changed to accept number because of this.",
        "createdAt" : "2020-10-21T20:18:41Z",
        "updatedAt" : "2020-10-21T20:18:41Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      }
    ],
    "commit" : "aec9a1a0ba4412aa1d5faed875280f0a467e31a6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +542,546 @@        hasRef(): boolean;\n        refresh(): this;\n        [Symbol.toPrimitive](): number;\n    }\n"
  },
  {
    "id" : "99d6bee8-6a66-4715-8a1e-3aa4bcf616b3",
    "prId" : 49880,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/49880#pullrequestreview-548769904",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8e1f20b-6ce5-48d5-806a-855fde4f6720",
        "parentId" : null,
        "authorId" : "83dd42c5-fd1b-4f69-a4a9-cb89643caf20",
        "body" : "I combined the two original overloads into one.  In theory I could also combine my two overloads into one, but doing so breaks compatibility with the `Uint8Array` type that `Buffer` extends.\r\n\r\nAlso `| string` isn't strictly necessary here (covered in the next signature) but including it here seemed pretty harmless, and addresses #38272 where someone tried to pass a union of `string | Buffer` to `Buffer.from`. ",
        "createdAt" : "2020-12-01T01:33:16Z",
        "updatedAt" : "2020-12-08T17:16:07Z",
        "lastEditedBy" : "83dd42c5-fd1b-4f69-a4a9-cb89643caf20",
        "tags" : [
        ]
      },
      {
        "id" : "2fb90d66-c11f-4b39-969b-4ccbe2d33041",
        "parentId" : "a8e1f20b-6ce5-48d5-806a-855fde4f6720",
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "Do you need `static from(data: Uint8Array...`? It seems like it would be covered by the `static from(data: WithImplicit...` overload.",
        "createdAt" : "2020-12-08T01:18:01Z",
        "updatedAt" : "2020-12-08T17:16:07Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      },
      {
        "id" : "69bae161-cebf-4990-8a16-89ffb06bc44a",
        "parentId" : "a8e1f20b-6ce5-48d5-806a-855fde4f6720",
        "authorId" : "83dd42c5-fd1b-4f69-a4a9-cb89643caf20",
        "body" : "Yeah, that's what I meant in my above comment:\r\n\r\n> In theory I could also combine my two overloads into one, but doing so breaks compatibility with the Uint8Array type that Buffer extends.\r\n\r\nI do think the `WithImplicit` overload covers everything in the `Uint8Array` overload, but if I get rid of the `Uint8Array` overload, TS errors on the `class Buffer extends Uint8Array` line, saying that the `Buffer` type no longer correctly extends the `Uint8Array` class.  I'm not entirely sure why that error happens, but I couldn't find a better fix than just leaving the theoretically-unnecessary overload.",
        "createdAt" : "2020-12-08T16:49:44Z",
        "updatedAt" : "2020-12-08T17:16:07Z",
        "lastEditedBy" : "83dd42c5-fd1b-4f69-a4a9-cb89643caf20",
        "tags" : [
        ]
      },
      {
        "id" : "3606d56c-804e-4392-912d-3867b22d1019",
        "parentId" : "a8e1f20b-6ce5-48d5-806a-855fde4f6720",
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "Ah, I see. It needs to exist for compatibility with the static `from` method on `Uint8Array`.",
        "createdAt" : "2020-12-10T02:22:58Z",
        "updatedAt" : "2020-12-10T02:22:58Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd535e8829ebbf18e9d0086a9745133d4de2fca1",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +141,145 @@     */\n    static from(data: Uint8Array | ReadonlyArray<number>): Buffer;\n    static from(data: WithImplicitCoercion<Uint8Array | ReadonlyArray<number> | string>): Buffer;\n    /**\n     * Creates a new Buffer containing the given JavaScript string {str}."
  },
  {
    "id" : "90807ec2-7fa6-4d63-bcc7-7b306b219920",
    "prId" : 52357,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/52357#pullrequestreview-637847023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5c3b73b-3b42-426b-888a-009a256337eb",
        "parentId" : null,
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "Is there an issue filed for this on https://github.com/microsoft/TypeScript? I haven't found one and it would be useful to link to an issue as I was unaware this was a request.",
        "createdAt" : "2021-04-15T17:35:45Z",
        "updatedAt" : "2021-04-24T02:35:21Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      },
      {
        "id" : "db9a5767-9252-4332-bd41-ef3c13b03c0c",
        "parentId" : "e5c3b73b-3b42-426b-888a-009a256337eb",
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "I've filed https://github.com/microsoft/TypeScript/issues/43692 to track this.",
        "createdAt" : "2021-04-15T17:40:07Z",
        "updatedAt" : "2021-04-24T02:35:21Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      },
      {
        "id" : "15b65d92-aa63-431f-804e-b7ced1718f10",
        "parentId" : "e5c3b73b-3b42-426b-888a-009a256337eb",
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "Added note.",
        "createdAt" : "2021-04-16T15:45:41Z",
        "updatedAt" : "2021-04-24T02:35:21Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "86a67aec2146518a96df8eae08ddaf74a23fb46f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +313,317 @@\n//#region borrowed\n// from https://github.com/microsoft/TypeScript/blob/38da7c600c83e7b31193a62495239a0fe478cb67/lib/lib.webworker.d.ts#L633 until moved to separate lib\n/** A controller object that allows you to abort one or more DOM requests as and when desired. */\ninterface AbortController {"
  },
  {
    "id" : "81f3c06b-795a-46ea-b606-e8458eee3c60",
    "prId" : 52776,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/52776#pullrequestreview-676134151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8c38aeb-38dd-47e2-8a33-1f1ef78ee6c2",
        "parentId" : null,
        "authorId" : "f04c9762-3cb9-496d-a04d-4b3f71dcc166",
        "body" : "I think this is being treated as an instance method which I'm not sure is correct.\r\n\r\nThere's nothing on the [node docs](https://nodejs.org/dist/latest-v16.x/docs/api/globals.html#globals_class_abortsignal) for an `abort()` instance method on AbortSignal, only a static `AbortSignal.abort()` method.  There's also nothing on the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal) for this method and it's not in the [node.js source for AbortSignal](https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/abort_controller.js#L50-L70) either.\r\n\r\nTS compilation with `@types/node@15.12.0` fails with:\r\n\r\n```\r\n Argument of type 'import(\"/path/to/node_modules/abort-controller/dist/abort-controller\").AbortSignal' is not assignable to parameter of type 'AbortSignal'.\r\n  Property 'abort' is missing in type 'import(\"/path/to/node_modules/abort-controller/dist/abort-controller\").AbortSignal' but required in type 'AbortSignal'.\r\n\r\n  node_modules/@types/node/globals.d.ts:339:5\r\n    339     abort(): void;\r\n            ~~~~~~~~~~~~~~\r\n    'abort' is declared here.\r\n```\r\n\r\n`node_modules/abort-controller` is the [abort-controller](https://www.npmjs.com/package/abort-controller) module, on which the node implementation is [closely based](https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/abort_controller.js#L3-L4).\r\n\r\n`@types/node@15.9.0` works as expected.",
        "createdAt" : "2021-06-03T18:28:21Z",
        "updatedAt" : "2021-06-03T18:37:41Z",
        "lastEditedBy" : "f04c9762-3cb9-496d-a04d-4b3f71dcc166",
        "tags" : [
        ]
      },
      {
        "id" : "8ee6a479-769e-4bfd-9f83-cf6e188200b3",
        "parentId" : "b8c38aeb-38dd-47e2-8a33-1f1ef78ee6c2",
        "authorId" : "5fd7c20f-7500-40f0-b32f-365b4ce89145",
        "body" : "this PR was already merged. you might wanna open an issue or better create a PR.",
        "createdAt" : "2021-06-03T21:24:33Z",
        "updatedAt" : "2021-06-03T21:24:33Z",
        "lastEditedBy" : "5fd7c20f-7500-40f0-b32f-365b4ce89145",
        "tags" : [
        ]
      },
      {
        "id" : "d529602d-9871-4bac-ac4c-bf8f614cab64",
        "parentId" : "b8c38aeb-38dd-47e2-8a33-1f1ef78ee6c2",
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "Ah yea I read the changelog wrong, I will file a PR asap.",
        "createdAt" : "2021-06-03T21:37:00Z",
        "updatedAt" : "2021-06-03T21:37:00Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      },
      {
        "id" : "ef06adf8-4b89-4c76-aa23-8da3b28470f8",
        "parentId" : "b8c38aeb-38dd-47e2-8a33-1f1ef78ee6c2",
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "Actually I cannot make it static as this will conflict with the lib dom typings, I will remove the method entirely for now.",
        "createdAt" : "2021-06-03T21:44:11Z",
        "updatedAt" : "2021-06-03T21:44:12Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      },
      {
        "id" : "ffd37e0c-7b30-4474-a9ce-803d3440445e",
        "parentId" : "b8c38aeb-38dd-47e2-8a33-1f1ef78ee6c2",
        "authorId" : "f04c9762-3cb9-496d-a04d-4b3f71dcc166",
        "body" : "The PR is [here](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/53591) for anyone with power to approve.",
        "createdAt" : "2021-06-04T10:11:28Z",
        "updatedAt" : "2021-06-04T10:11:28Z",
        "lastEditedBy" : "f04c9762-3cb9-496d-a04d-4b3f71dcc166",
        "tags" : [
        ]
      }
    ],
    "commit" : "e492a481dd00fb5a824d55a5f1f6530c809f938b",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +337,341 @@     * Invoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted.\n     */\n    abort(): void;\n}\n"
  }
]