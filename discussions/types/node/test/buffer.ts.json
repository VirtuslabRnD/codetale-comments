[
  {
    "id" : "297c1521-d1e3-4284-a464-1fca94e7556a",
    "prId" : 46706,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46706#pullrequestreview-504392663",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ac7203b-92fa-421e-8748-bdf160e89f47",
        "parentId" : null,
        "authorId" : "e5209397-2510-4745-aef6-1632dc787392",
        "body" : "You can use `as const` to do this:\r\n```suggestion\r\n    const buf1: Buffer = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72] as const);\r\n```",
        "createdAt" : "2020-10-07T03:57:27Z",
        "updatedAt" : "2020-10-10T23:41:20Z",
        "lastEditedBy" : "e5209397-2510-4745-aef6-1632dc787392",
        "tags" : [
        ]
      },
      {
        "id" : "b11ac51d-3c57-4d07-8f90-19004b38e265",
        "parentId" : "4ac7203b-92fa-421e-8748-bdf160e89f47",
        "authorId" : "0f9a4e11-016b-495b-a214-d5b6c4302e48",
        "body" : ":+1: Absolutely, `as const` is the right thing to do here, `as ReadonlyArray<...>` is just so the tests pass on TypeScript 3.2.",
        "createdAt" : "2020-10-07T14:40:23Z",
        "updatedAt" : "2020-10-10T23:41:20Z",
        "lastEditedBy" : "0f9a4e11-016b-495b-a214-d5b6c4302e48",
        "tags" : [
        ]
      },
      {
        "id" : "c3fcd491-c82e-4c94-8e93-e7f92e5d8a35",
        "parentId" : "4ac7203b-92fa-421e-8748-bdf160e89f47",
        "authorId" : "0f9a4e11-016b-495b-a214-d5b6c4302e48",
        "body" : "... however where `typesVersions >= 3.4` I should do as you suggest, thanks! Done :heavy_check_mark:",
        "createdAt" : "2020-10-08T02:46:57Z",
        "updatedAt" : "2020-10-10T23:41:20Z",
        "lastEditedBy" : "0f9a4e11-016b-495b-a214-d5b6c4302e48",
        "tags" : [
        ]
      }
    ],
    "commit" : "f75282ed69ea582372e6544576770aee63d0334b",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +42,46 @@{\n    // Array\n    const buf1: Buffer = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72] as ReadonlyArray<number>);\n    // Buffer\n    const buf2: Buffer = Buffer.from(buf1);"
  }
]