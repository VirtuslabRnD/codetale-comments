[
  {
    "id" : "13735b85-811c-4231-ae07-ff0865ff4098",
    "prId" : 38753,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/38753#pullrequestreview-297361617",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ec3408d-2ce1-4a14-8abb-f96e3b97ec07",
        "parentId" : null,
        "authorId" : "13ec4322-bf15-4ec2-a12e-f8ab83207105",
        "body" : "This was added in v0.8.0 https://nodejs.org/api/util.html#util_util_deprecate_fn_msg_code\r\n\r\nCan you please make changes in other existing supported versions too?\r\n* 10.x https://github.com/DefinitelyTyped/DefinitelyTyped/blob/aee73c479bd3f156b1468f3fd7e34811263f9e1a/types/node/v10/util.d.ts#L58\r\n* 8.x https://github.com/DefinitelyTyped/DefinitelyTyped/blob/aee73c479bd3f156b1468f3fd7e34811263f9e1a/types/node/v8/base.d.ts#L5661",
        "createdAt" : "2019-10-02T17:56:35Z",
        "updatedAt" : "2019-10-07T08:28:45Z",
        "lastEditedBy" : "13ec4322-bf15-4ec2-a12e-f8ab83207105",
        "tags" : [
        ]
      },
      {
        "id" : "fb62fda1-7359-42e4-9047-c1bb3714aaae",
        "parentId" : "1ec3408d-2ce1-4a14-8abb-f96e3b97ec07",
        "authorId" : "7d675550-1998-4a4c-a6b3-d39280dd4f3d",
        "body" : "Done",
        "createdAt" : "2019-10-04T09:31:59Z",
        "updatedAt" : "2019-10-07T08:28:45Z",
        "lastEditedBy" : "7d675550-1998-4a4c-a6b3-d39280dd4f3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "acee15e81cef0497c50df6aaaa2e3f7ddb730cfd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +52,56 @@    /** @deprecated since v4.0.0 - use `value === undefined` instead. */\n    function isUndefined(object: any): object is undefined;\n    function deprecate<T extends Function>(fn: T, message: string, code?: string): T;\n    function isDeepStrictEqual(val1: any, val2: any): boolean;\n"
  },
  {
    "id" : "55958bf9-de67-4da6-a022-95e26e14bd42",
    "prId" : 38753,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/38753#pullrequestreview-297476997",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ff5749e-aa0d-486e-be0f-e78ea82e66a7",
        "parentId" : null,
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "Using `?` and `| undefined` are redundant, just keep the `?`.",
        "createdAt" : "2019-10-04T13:34:05Z",
        "updatedAt" : "2019-10-07T08:28:45Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "acee15e81cef0497c50df6aaaa2e3f7ddb730cfd",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +53,57 @@    function isUndefined(object: any): object is undefined;\n    function deprecate<T extends Function>(fn: T, message: string, code?: string): T;\n    function isDeepStrictEqual(val1: any, val2: any): boolean;\n\n    interface CustomPromisify<TCustom extends Function> extends Function {"
  },
  {
    "id" : "f6c2398f-3e44-4b99-9a05-b2b25ce56a9b",
    "prId" : 41353,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/41353#pullrequestreview-355047716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6326291b-7b81-484e-a198-aebcfd56dbc8",
        "parentId" : null,
        "authorId" : "a5cf9582-17c9-4d13-aac6-210a683b6dc0",
        "body" : "I think this list is missing `name`, which is used to style the property names:\r\nhttps://nodejs.org/api/util.html#util_customizing_util_inspect_colors",
        "createdAt" : "2020-02-07T09:52:12Z",
        "updatedAt" : "2020-02-07T09:52:12Z",
        "lastEditedBy" : "a5cf9582-17c9-4d13-aac6-210a683b6dc0",
        "tags" : [
        ]
      },
      {
        "id" : "87743926-64fd-474b-892a-9ce734e32836",
        "parentId" : "6326291b-7b81-484e-a198-aebcfd56dbc8",
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "Lol yea https://github.com/nodejs/node/blob/master/lib/internal/util/inspect.js#L389\r\nFeel free to file a PR.",
        "createdAt" : "2020-02-07T10:02:08Z",
        "updatedAt" : "2020-02-07T10:02:08Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f18add8a919c9f4987d733c44c3e68cbd5b5dc4",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1,5 @@declare module \"util\" {\n    interface InspectOptions extends NodeJS.InspectOptions { }\n    type Style = 'special' | 'number' | 'bigint' | 'boolean' | 'undefined' | 'null' | 'string' | 'symbol' | 'date' | 'regexp' | 'module';\n    type CustomInspectFunction = (depth: number, options: InspectOptionsStylized) => string;\n    interface InspectOptionsStylized extends InspectOptions {"
  },
  {
    "id" : "8af2db8a-c0ff-4af8-aea6-96d14e85448e",
    "prId" : 42154,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/42154#pullrequestreview-359274543",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2192dddb-cc24-42a3-af93-7aa14d423107",
        "parentId" : null,
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "I looked into the possibility of completely iradicating this but there seems to be no way to property define\r\n`[promisify.custom]` on functions via namespace merging (only via interfaces, but that's super bloaty).\r\nWe'd need the ability to define function properties in the typings themselves, OR use symbols as keys in namespaces in typings.\r\n\r\nCalling this 'legacy' makes it sound like the new way works, which it doesn't (at least not internally).",
        "createdAt" : "2020-02-08T22:46:30Z",
        "updatedAt" : "2020-02-18T23:45:14Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      },
      {
        "id" : "06c8d665-735c-4491-b73a-e0f1a35eaa1d",
        "parentId" : "2192dddb-cc24-42a3-af93-7aa14d423107",
        "authorId" : "e5209397-2510-4745-aef6-1632dc787392",
        "body" : "Well, the&nbsp;new&nbsp;way does&nbsp;work:\r\n\r\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/blob/96418fa420c42f2d9b1afd8f9b1dfac213cb287c/types/node/node-tests.ts#L133-L150\r\n\r\nIt&nbsp;just&nbsp;doesn’t currently&nbsp;work with&nbsp;merged&nbsp;`function` and&nbsp;`namespace`&nbsp;declarations, which&nbsp;needs&nbsp;support from&nbsp;**TypeScript**.",
        "createdAt" : "2020-02-14T19:33:06Z",
        "updatedAt" : "2020-02-18T23:45:14Z",
        "lastEditedBy" : "e5209397-2510-4745-aef6-1632dc787392",
        "tags" : [
        ]
      },
      {
        "id" : "e7017c3f-d107-4855-b87f-e1e57820e3c0",
        "parentId" : "2192dddb-cc24-42a3-af93-7aa14d423107",
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "I'm still a little bit concerned about usability and how we tell developers how to use this feature.\r\n\r\nThe _only_ way I can currently create a promisifiable function without casting with your changes is something like this:\r\n\r\n```ts\r\nexport const myFn = Object.assign(function myFn() {\r\n    return 1;\r\n}, {\r\n    async [util.promisify.custom](): Promise<number> {\r\n        return 1;\r\n    }\r\n});\r\n\r\nconst promisified: () => Promise<number> = util.promisify(myFn);\r\nconsole.log(promisified);\r\npromisified().then(console.log);\r\n```\r\n\r\nWhich yields d.ts:\r\n```ts\r\nimport { promisify } from 'util';\r\nexport declare const myFn: (() => 1) & {\r\n    [promisify.custom](): Promise<number>;\r\n};\r\n```\r\n\r\nHow do you envision developers will use `promisify.custom` in the wild?",
        "createdAt" : "2020-02-14T20:15:48Z",
        "updatedAt" : "2020-02-18T23:45:14Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      },
      {
        "id" : "bce361c7-5093-4bbe-bf0f-e9785f3ad83e",
        "parentId" : "2192dddb-cc24-42a3-af93-7aa14d423107",
        "authorId" : "e5209397-2510-4745-aef6-1632dc787392",
        "body" : "If&nbsp;you&nbsp;do:\r\n```js\r\nexport function myFn() {\r\n\treturn 1;\r\n}\r\nmyFn[util.promisify.custom] = async () => {\r\n\treturn 1;\r\n};\r\n```\r\n\r\nYou&nbsp;should&nbsp;get:\r\n```ts\r\nimport { promisify } from 'util';\r\nexport var myFn: {\r\n\t(): 1;\r\n\t[promisify.custom](): Promise<1>;\r\n};\r\n```",
        "createdAt" : "2020-02-14T20:33:28Z",
        "updatedAt" : "2020-02-18T23:45:14Z",
        "lastEditedBy" : "e5209397-2510-4745-aef6-1632dc787392",
        "tags" : [
        ]
      },
      {
        "id" : "d6c40912-d95d-4ff5-b0eb-6bc022d853ee",
        "parentId" : "2192dddb-cc24-42a3-af93-7aa14d423107",
        "authorId" : "e5209397-2510-4745-aef6-1632dc787392",
        "body" : "I’ve&nbsp;opened <https://github.com/microsoft/TypeScript/issues/36813> to&nbsp;add&nbsp;support for&nbsp;symbol&nbsp;properties to&nbsp;**TypeScript**&nbsp;namespaces.",
        "createdAt" : "2020-02-14T23:35:31Z",
        "updatedAt" : "2020-02-18T23:45:14Z",
        "lastEditedBy" : "e5209397-2510-4745-aef6-1632dc787392",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd65c3963b5a14e16193d7c2e7a4db22551c93e9",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +86,90 @@    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\n\n    interface CustomPromisifyLegacy<TCustom extends Function> extends Function {\n        __promisify__: TCustom;\n    }"
  }
]