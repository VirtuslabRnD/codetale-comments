[
  {
    "id" : "9f3ff90a-07c6-4587-a871-7d2b5883d78b",
    "prId" : 17277,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17277#pullrequestreview-45098316",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d3e3e6b-88b6-41b7-9693-04b1f8d44e0e",
        "parentId" : null,
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "Are you sure that numbers are allowed here? I think header values are always strings (or array of strings in case the same header name is set several times).\r\nIn case numbers are really allowed I would expect that also an array of numbers is allowed.",
        "createdAt" : "2017-06-20T07:10:19Z",
        "updatedAt" : "2017-06-20T20:48:36Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "95d4458e-0040-4b43-9d93-7d6fa6db0523",
        "parentId" : "1d3e3e6b-88b6-41b7-9693-04b1f8d44e0e",
        "authorId" : "15d6cfde-3549-4984-8602-9eaa53e7a001",
        "body" : "Numbers are allowed as input, see the type of the Content-Length header in the example; https://nodejs.org/api/http.html#http_response_writehead_statuscode_statusmessage_headers\r\n\r\nEverything that can be converted to a primitive value is technically valid input.",
        "createdAt" : "2017-06-20T08:29:35Z",
        "updatedAt" : "2017-06-20T20:48:36Z",
        "lastEditedBy" : "15d6cfde-3549-4984-8602-9eaa53e7a001",
        "tags" : [
        ]
      },
      {
        "id" : "efc7115b-4038-4caa-ac0d-672f04ff2163",
        "parentId" : "1d3e3e6b-88b6-41b7-9693-04b1f8d44e0e",
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "I just gave this a try and it works. And it has side effects to `getHeader()` typings because if you pass in a `number` in `setHeader()` or `writeHead()` you get a `number` via `getHeader()` - not a `string`.\r\nAlso arrays of numbers are allowed and even arrays with mixture of strings and numbers - or everything else which can be appended to a string...\r\nSo in then end we are back to `any` in this area - or we force users to stringify in usercode....",
        "createdAt" : "2017-06-20T09:22:17Z",
        "updatedAt" : "2017-06-20T20:48:36Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "8ad51c4f-6361-48c3-a9a6-3ac5f7646008",
        "parentId" : "1d3e3e6b-88b6-41b7-9693-04b1f8d44e0e",
        "authorId" : "15d6cfde-3549-4984-8602-9eaa53e7a001",
        "body" : "I have added number to getHeader. For all normal use cases people don't have to change anything in their code. If they really want to do strange/useless things like adding objects or mixed arrays to header variables then they can cast to make it possible.",
        "createdAt" : "2017-06-20T10:48:44Z",
        "updatedAt" : "2017-06-20T20:48:36Z",
        "lastEditedBy" : "15d6cfde-3549-4984-8602-9eaa53e7a001",
        "tags" : [
        ]
      }
    ],
    "commit" : "6410fd28780edad7d61ed714e7d6529c530f045e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +751,755 @@\n    export interface ServerResponseHeaders {\n      [key: string]: number | string | string[];\n    }\n"
  },
  {
    "id" : "e060a031-9101-4e17-b6b0-d0d9123957e2",
    "prId" : 17277,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17277#pullrequestreview-45264164",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3b5114f-9b17-4511-b722-26b516bf5375",
        "parentId" : null,
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "Turns out dtslint gets *almost* all the way through definitely typed  before Travis kills it. Searching for errors turns up 1 error in `content-type`: \r\n\r\n```\r\nTesting content-type\r\n\tRunning: node /home/travis/build/DefinitelyTyped/DefinitelyTyped/node_modules/types-publisher/bin/tester/../../node_modules/dtslint/bin/index.js --noLint\r\n\tcontent-type-tests.ts(14,25): error TS2345: Argument of type 'Response' is not assignable to parameter of type '{ getHeader(key: string): string; }'.\r\n  Types of property 'getHeader' are incompatible.\r\n    Type '(name: string) => string | number | string[]' is not assignable to type '(key: string) => string'.\r\n      Type 'string | number | string[]' is not assignable to type 'string'.\r\n        Type 'number' is not assignable to type 'string'.\r\n```\r\n\r\ncontent-type just uses a type literal to cut out the part of `Response` that it cares about. Either it should update its type or change to requiring the full `Response` type, which it would need to import.",
        "createdAt" : "2017-06-20T18:08:27Z",
        "updatedAt" : "2017-06-20T20:48:36Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      },
      {
        "id" : "476557ad-d637-4dea-a4f4-e4678553b4fe",
        "parentId" : "e3b5114f-9b17-4511-b722-26b516bf5375",
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "My feeling is that content-type definition should be adapted here as getHeader() may return something else then a string in general so the definition here matches better to the actual code.\r\nFor the content-type case getHeader() is always called with 'content-type' which should in real world code be either a string or undefined but not string[],...",
        "createdAt" : "2017-06-20T20:17:50Z",
        "updatedAt" : "2017-06-20T20:48:36Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "87fad591-7a57-4cda-a756-800acac69499",
        "parentId" : "e3b5114f-9b17-4511-b722-26b516bf5375",
        "authorId" : "15d6cfde-3549-4984-8602-9eaa53e7a001",
        "body" : "I have fixed content-type and added linting.",
        "createdAt" : "2017-06-20T20:53:30Z",
        "updatedAt" : "2017-06-20T20:53:30Z",
        "lastEditedBy" : "15d6cfde-3549-4984-8602-9eaa53e7a001",
        "tags" : [
        ]
      }
    ],
    "commit" : "6410fd28780edad7d61ed714e7d6529c530f045e",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +764,768 @@        addTrailers(headers: ServerResponseHeaders): void;\n        finished: boolean;\n        getHeader(name: string): number | string | string[] | undefined;\n        getHeaderNames(): string[]\n        getHeaders(): any"
  },
  {
    "id" : "77d57c31-7257-42ac-9c81-991908b87d9b",
    "prId" : 18766,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18766#pullrequestreview-70034227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c812e9b5-97a6-46b6-a3b1-587b9ad23e9c",
        "parentId" : null,
        "authorId" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "body" : "Doesn't `format` use the same type as `parse` returns? If so, how come we need both `UrlObject` and `Url`? Won't the latter suffice?\r\n\r\nAlso, I would suggest renaming `Url` to `ParsedURL` to disambiguate it from `URL`",
        "createdAt" : "2017-10-17T19:57:02Z",
        "updatedAt" : "2017-10-17T19:57:16Z",
        "lastEditedBy" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "tags" : [
        ]
      },
      {
        "id" : "4d8b4099-fb77-4dea-af6c-492f43c424df",
        "parentId" : "c812e9b5-97a6-46b6-a3b1-587b9ad23e9c",
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "From node docu: `The value of urlObject.port is coerced to a string and appended to result`\r\nSo in fact everything convertible to string is accepted here (which would be `any`) but you will get a `string | null` from `parse()`.\r\nIn real world apps `string | number` is usually what is needed which is most likely the reason why noone complained yet.\r\nThere are several such places in node; e.a. you can set everything convertible to `string` as a http header.",
        "createdAt" : "2017-10-17T21:19:05Z",
        "updatedAt" : "2017-10-17T21:19:05Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      }
    ],
    "commit" : "86d2ce2bc6df23a05ce6b3537c5f5ae2332591d4",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +2179,2183 @@    export function parse(urlStr: string, parseQueryString?: boolean, slashesDenoteHost?: boolean): Url;\n    export function format(URL: URL, options?: URLFormatOptions): string;\n    export function format(urlObject: UrlObject | string): string;\n    export function resolve(from: string, to: string): string;\n"
  }
]