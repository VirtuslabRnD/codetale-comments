[
  {
    "id" : "9f3ff90a-07c6-4587-a871-7d2b5883d78b",
    "prId" : 17277,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17277#pullrequestreview-45098316",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d3e3e6b-88b6-41b7-9693-04b1f8d44e0e",
        "parentId" : null,
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "Are you sure that numbers are allowed here? I think header values are always strings (or array of strings in case the same header name is set several times).\r\nIn case numbers are really allowed I would expect that also an array of numbers is allowed.",
        "createdAt" : "2017-06-20T07:10:19Z",
        "updatedAt" : "2017-06-20T20:48:36Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "95d4458e-0040-4b43-9d93-7d6fa6db0523",
        "parentId" : "1d3e3e6b-88b6-41b7-9693-04b1f8d44e0e",
        "authorId" : "15d6cfde-3549-4984-8602-9eaa53e7a001",
        "body" : "Numbers are allowed as input, see the type of the Content-Length header in the example; https://nodejs.org/api/http.html#http_response_writehead_statuscode_statusmessage_headers\r\n\r\nEverything that can be converted to a primitive value is technically valid input.",
        "createdAt" : "2017-06-20T08:29:35Z",
        "updatedAt" : "2017-06-20T20:48:36Z",
        "lastEditedBy" : "15d6cfde-3549-4984-8602-9eaa53e7a001",
        "tags" : [
        ]
      },
      {
        "id" : "efc7115b-4038-4caa-ac0d-672f04ff2163",
        "parentId" : "1d3e3e6b-88b6-41b7-9693-04b1f8d44e0e",
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "I just gave this a try and it works. And it has side effects to `getHeader()` typings because if you pass in a `number` in `setHeader()` or `writeHead()` you get a `number` via `getHeader()` - not a `string`.\r\nAlso arrays of numbers are allowed and even arrays with mixture of strings and numbers - or everything else which can be appended to a string...\r\nSo in then end we are back to `any` in this area - or we force users to stringify in usercode....",
        "createdAt" : "2017-06-20T09:22:17Z",
        "updatedAt" : "2017-06-20T20:48:36Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "8ad51c4f-6361-48c3-a9a6-3ac5f7646008",
        "parentId" : "1d3e3e6b-88b6-41b7-9693-04b1f8d44e0e",
        "authorId" : "15d6cfde-3549-4984-8602-9eaa53e7a001",
        "body" : "I have added number to getHeader. For all normal use cases people don't have to change anything in their code. If they really want to do strange/useless things like adding objects or mixed arrays to header variables then they can cast to make it possible.",
        "createdAt" : "2017-06-20T10:48:44Z",
        "updatedAt" : "2017-06-20T20:48:36Z",
        "lastEditedBy" : "15d6cfde-3549-4984-8602-9eaa53e7a001",
        "tags" : [
        ]
      }
    ],
    "commit" : "6410fd28780edad7d61ed714e7d6529c530f045e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +751,755 @@\n    export interface ServerResponseHeaders {\n      [key: string]: number | string | string[];\n    }\n"
  },
  {
    "id" : "e060a031-9101-4e17-b6b0-d0d9123957e2",
    "prId" : 17277,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17277#pullrequestreview-45264164",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3b5114f-9b17-4511-b722-26b516bf5375",
        "parentId" : null,
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "Turns out dtslint gets *almost* all the way through definitely typed  before Travis kills it. Searching for errors turns up 1 error in `content-type`: \r\n\r\n```\r\nTesting content-type\r\n\tRunning: node /home/travis/build/DefinitelyTyped/DefinitelyTyped/node_modules/types-publisher/bin/tester/../../node_modules/dtslint/bin/index.js --noLint\r\n\tcontent-type-tests.ts(14,25): error TS2345: Argument of type 'Response' is not assignable to parameter of type '{ getHeader(key: string): string; }'.\r\n  Types of property 'getHeader' are incompatible.\r\n    Type '(name: string) => string | number | string[]' is not assignable to type '(key: string) => string'.\r\n      Type 'string | number | string[]' is not assignable to type 'string'.\r\n        Type 'number' is not assignable to type 'string'.\r\n```\r\n\r\ncontent-type just uses a type literal to cut out the part of `Response` that it cares about. Either it should update its type or change to requiring the full `Response` type, which it would need to import.",
        "createdAt" : "2017-06-20T18:08:27Z",
        "updatedAt" : "2017-06-20T20:48:36Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      },
      {
        "id" : "476557ad-d637-4dea-a4f4-e4678553b4fe",
        "parentId" : "e3b5114f-9b17-4511-b722-26b516bf5375",
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "My feeling is that content-type definition should be adapted here as getHeader() may return something else then a string in general so the definition here matches better to the actual code.\r\nFor the content-type case getHeader() is always called with 'content-type' which should in real world code be either a string or undefined but not string[],...",
        "createdAt" : "2017-06-20T20:17:50Z",
        "updatedAt" : "2017-06-20T20:48:36Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "87fad591-7a57-4cda-a756-800acac69499",
        "parentId" : "e3b5114f-9b17-4511-b722-26b516bf5375",
        "authorId" : "15d6cfde-3549-4984-8602-9eaa53e7a001",
        "body" : "I have fixed content-type and added linting.",
        "createdAt" : "2017-06-20T20:53:30Z",
        "updatedAt" : "2017-06-20T20:53:30Z",
        "lastEditedBy" : "15d6cfde-3549-4984-8602-9eaa53e7a001",
        "tags" : [
        ]
      }
    ],
    "commit" : "6410fd28780edad7d61ed714e7d6529c530f045e",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +764,768 @@        addTrailers(headers: ServerResponseHeaders): void;\n        finished: boolean;\n        getHeader(name: string): number | string | string[] | undefined;\n        getHeaderNames(): string[]\n        getHeaders(): any"
  },
  {
    "id" : "77d57c31-7257-42ac-9c81-991908b87d9b",
    "prId" : 18766,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18766#pullrequestreview-70034227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c812e9b5-97a6-46b6-a3b1-587b9ad23e9c",
        "parentId" : null,
        "authorId" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "body" : "Doesn't `format` use the same type as `parse` returns? If so, how come we need both `UrlObject` and `Url`? Won't the latter suffice?\r\n\r\nAlso, I would suggest renaming `Url` to `ParsedURL` to disambiguate it from `URL`",
        "createdAt" : "2017-10-17T19:57:02Z",
        "updatedAt" : "2017-10-17T19:57:16Z",
        "lastEditedBy" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "tags" : [
        ]
      },
      {
        "id" : "4d8b4099-fb77-4dea-af6c-492f43c424df",
        "parentId" : "c812e9b5-97a6-46b6-a3b1-587b9ad23e9c",
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "From node docu: `The value of urlObject.port is coerced to a string and appended to result`\r\nSo in fact everything convertible to string is accepted here (which would be `any`) but you will get a `string | null` from `parse()`.\r\nIn real world apps `string | number` is usually what is needed which is most likely the reason why noone complained yet.\r\nThere are several such places in node; e.a. you can set everything convertible to `string` as a http header.",
        "createdAt" : "2017-10-17T21:19:05Z",
        "updatedAt" : "2017-10-17T21:19:05Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      }
    ],
    "commit" : "86d2ce2bc6df23a05ce6b3537c5f5ae2332591d4",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +2179,2183 @@    export function parse(urlStr: string, parseQueryString?: boolean, slashesDenoteHost?: boolean): Url;\n    export function format(URL: URL, options?: URLFormatOptions): string;\n    export function format(urlObject: UrlObject | string): string;\n    export function resolve(from: string, to: string): string;\n"
  },
  {
    "id" : "22ca3d46-4661-4058-9f31-e1407831f2fa",
    "prId" : 18952,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18952#pullrequestreview-58204022",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "520a40b6-6df3-46f0-b74f-a9f655a4ff2f",
        "parentId" : null,
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "I think the most general overload should go *last*, otherwise none of the later overloads will be reached.",
        "createdAt" : "2017-08-23T18:06:07Z",
        "updatedAt" : "2017-08-23T20:15:01Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "b07ceeb7-6623-4126-96cf-e160aab28770",
        "parentId" : "520a40b6-6df3-46f0-b74f-a9f655a4ff2f",
        "authorId" : "8f4f0b53-5cfa-4fbd-9903-00bfde4168a5",
        "body" : "I've been following the convention in other core modules, where the general case for EventEmitter functions is always placed first. I don't think there is an issue with later overloads being reached.",
        "createdAt" : "2017-08-23T20:11:01Z",
        "updatedAt" : "2017-08-23T20:15:01Z",
        "lastEditedBy" : "8f4f0b53-5cfa-4fbd-9903-00bfde4168a5",
        "tags" : [
        ]
      },
      {
        "id" : "562a899e-c3f9-473c-9046-731bfa408c37",
        "parentId" : "520a40b6-6df3-46f0-b74f-a9f655a4ff2f",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "You're right, I think we special-case this for string overloads.",
        "createdAt" : "2017-08-23T20:24:52Z",
        "updatedAt" : "2017-08-23T20:24:52Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4224f91c6d89e2eac8f010623f9e2054917196c",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +5895,5899 @@        readonly state: StreamState;\n\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: \"aborted\", listener: () => void): this;\n        addListener(event: \"close\", listener: () => void): this;"
  },
  {
    "id" : "9ca2b91b-d399-458f-b810-8d98322f16e1",
    "prId" : 19114,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19114#pullrequestreview-68618800",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b6f3d88-ded0-403f-8654-0c73eab9105d",
        "parentId" : null,
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "I don't think these `void` overloads are necessary; `void` could be just another `TResult`.",
        "createdAt" : "2017-08-22T15:19:22Z",
        "updatedAt" : "2017-09-30T09:03:38Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "a7225a2d-267a-4a49-8620-53c2f5872518",
        "parentId" : "6b6f3d88-ded0-403f-8654-0c73eab9105d",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "Ping @alvis",
        "createdAt" : "2017-09-13T15:12:55Z",
        "updatedAt" : "2017-09-30T09:03:38Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "79f374d7-dd1e-402e-822d-08f943fccb98",
        "parentId" : "6b6f3d88-ded0-403f-8654-0c73eab9105d",
        "authorId" : "079d64c4-185e-4b57-bce8-bb42ee10bf63",
        "body" : "Sorry for the belated reply.\r\n\r\nThey are not overloads. In fact, they've different structure of return depending on whether `arg1` is passed to `fn`.",
        "createdAt" : "2017-10-11T11:01:55Z",
        "updatedAt" : "2017-10-11T11:01:55Z",
        "lastEditedBy" : "079d64c4-185e-4b57-bce8-bb42ee10bf63",
        "tags" : [
        ]
      },
      {
        "id" : "2f0c3045-2206-43ce-85b3-5629740a3511",
        "parentId" : "6b6f3d88-ded0-403f-8654-0c73eab9105d",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "Compare these two overloads:\r\n```ts\r\nexport function callbackify(fn: () => Promise<void>): (callback: (err: NodeJS.ErrnoException) => void) => void;\r\nexport function callbackify<TResult>(fn: () => Promise<TResult>): (callback: (err: NodeJS.ErrnoException, result: TResult) => void) => void;\r\n```\r\nIsn't the first overload just the second overload with `void` in place of `TResult`? It's only missing `result: void`, but presumably that's what the second callback parameter would be.",
        "createdAt" : "2017-10-11T13:53:55Z",
        "updatedAt" : "2017-10-11T13:53:56Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "128bfb1e-764d-46c8-8ccf-3cde9e9383e0",
        "parentId" : "6b6f3d88-ded0-403f-8654-0c73eab9105d",
        "authorId" : "079d64c4-185e-4b57-bce8-bb42ee10bf63",
        "body" : "Got it. The reason of having another one is for the benefit of `result` in the callback function. Without the first declaration, typescript will suggest that the callback has two arguments instead of one, and the type of `result` is `{}`.",
        "createdAt" : "2017-10-11T14:06:57Z",
        "updatedAt" : "2017-10-11T14:06:57Z",
        "lastEditedBy" : "079d64c4-185e-4b57-bce8-bb42ee10bf63",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cbf74c4d7f88231a9d8b9ff407fd2aecf92fb46",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +5258,5262 @@    export function callbackify(fn: () => Promise<void>): (callback: (err: NodeJS.ErrnoException) => void) => void;\n    export function callbackify<TResult>(fn: () => Promise<TResult>): (callback: (err: NodeJS.ErrnoException, result: TResult) => void) => void;\n    export function callbackify<T1>(fn: (arg1: T1) => Promise<void>): (arg1: T1, callback: (err: NodeJS.ErrnoException) => void) => void;\n    export function callbackify<T1, TResult>(fn: (arg1: T1) => Promise<TResult>): (arg1: T1, callback: (err: NodeJS.ErrnoException, result: TResult) => void) => void;\n    export function callbackify<T1, T2>(fn: (arg1: T1, arg2: T2) => Promise<void>): (arg1: T1, arg2: T2, callback: (err: NodeJS.ErrnoException) => void) => void;"
  },
  {
    "id" : "83685580-861d-4214-b38a-edc40b4aea5c",
    "prId" : 19114,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19114#pullrequestreview-68626248",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "888c2260-96a6-4ae5-803c-ebc72c3e2599",
        "parentId" : null,
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "I think it should be `NodeJS.ErrnoException | null`.",
        "createdAt" : "2017-09-23T16:13:08Z",
        "updatedAt" : "2017-09-30T09:03:38Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "54519e7a-9ec7-4a76-8e4c-3b28ed16e615",
        "parentId" : "888c2260-96a6-4ae5-803c-ebc72c3e2599",
        "authorId" : "079d64c4-185e-4b57-bce8-bb42ee10bf63",
        "body" : "🤔 After checking the definition of NodeJS.ErrnoException, I'm convinced that it should be the case. However, it seems like no one use `NodeJS.ErrnoException | null` in all other callback functions.\r\n\r\nWe can either correct all of them, or convert `ErrnoException` to a type which includes `null` as an alternative.",
        "createdAt" : "2017-10-11T10:58:17Z",
        "updatedAt" : "2017-10-11T10:58:17Z",
        "lastEditedBy" : "079d64c4-185e-4b57-bce8-bb42ee10bf63",
        "tags" : [
        ]
      },
      {
        "id" : "f0f760d9-023d-4c16-885d-0219d22e79f2",
        "parentId" : "888c2260-96a6-4ae5-803c-ebc72c3e2599",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "I think it would be better to add `| null` everywhere, because people may be using `NodeJS.ErrnoException` as a type already and expecting it to be an interface type.",
        "createdAt" : "2017-10-11T13:55:15Z",
        "updatedAt" : "2017-10-11T13:55:15Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "33a8d439-deb2-44a7-b37d-415ec9e1109c",
        "parentId" : "888c2260-96a6-4ae5-803c-ebc72c3e2599",
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "I agree with @andy-ms. I expect node types were created before strictNullChecks was in place.\r\nBut I think such a change should be in a new PR. Maybe I will create one once CI for Node is stable again...",
        "createdAt" : "2017-10-11T14:26:54Z",
        "updatedAt" : "2017-10-11T14:26:54Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cbf74c4d7f88231a9d8b9ff407fd2aecf92fb46",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +5256,5260 @@    }\n\n    export function callbackify(fn: () => Promise<void>): (callback: (err: NodeJS.ErrnoException) => void) => void;\n    export function callbackify<TResult>(fn: () => Promise<TResult>): (callback: (err: NodeJS.ErrnoException, result: TResult) => void) => void;\n    export function callbackify<T1>(fn: (arg1: T1) => Promise<void>): (arg1: T1, callback: (err: NodeJS.ErrnoException) => void) => void;"
  },
  {
    "id" : "38b8bfd8-8851-4935-b698-107920cd7007",
    "prId" : 19465,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19465#pullrequestreview-60941366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37a1e209-822f-4c40-b5f4-16584fc380b0",
        "parentId" : null,
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "These all have the same type of value, shouldn't it just be the string indexer then?",
        "createdAt" : "2017-09-06T14:51:49Z",
        "updatedAt" : "2017-09-06T14:51:49Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "7132235a-49be-487a-9d43-d75bc1600e6f",
        "parentId" : "37a1e209-822f-4c40-b5f4-16584fc380b0",
        "authorId" : "6284694e-861f-4f30-a033-680d797370a3",
        "body" : "I think it's better to leave them for documentation purposes. From type checker point of view it doesn't matter, but for human reader it should make it more clear what is expected usage.",
        "createdAt" : "2017-09-06T14:59:27Z",
        "updatedAt" : "2017-09-06T14:59:27Z",
        "lastEditedBy" : "6284694e-861f-4f30-a033-680d797370a3",
        "tags" : [
        ]
      }
    ],
    "commit" : "f607877b026b72f0c9694a814491477d26a09903",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +99,103 @@\ninterface NodeExtensions {\n  '.js': (m: NodeModule, filename: string) => any;\n  '.json': (m: NodeModule, filename: string) => any;\n  '.node': (m: NodeModule, filename: string) => any;"
  },
  {
    "id" : "b9f76c07-3851-4b26-b383-d8013ad5f52e",
    "prId" : 19488,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19488#pullrequestreview-61419333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14c6dc69-cf79-42e2-b4cb-4a42089e50bb",
        "parentId" : null,
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "According to https://nodejs.org/api/timers.html#timers_settimeout_callback_delay_args, you can pass a value as well: `setTimeoutPromise(40, \"foobar\")`, so you might want to consider:\r\n```ts\r\ndeclare namespace setTimeout {\r\n  export function __promisify__(ms: number): Promise<void>;\r\n  export function __promisify__<T>(ms: number, value: T): Promise<T>;\r\n}\r\n```",
        "createdAt" : "2017-09-08T06:15:14Z",
        "updatedAt" : "2017-09-08T16:11:02Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b15ea00d1d4fe043e28023d635dbe2fd337f93b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +83,87 @@declare function setTimeout(callback: (...args: any[]) => void, ms: number, ...args: any[]): NodeJS.Timer;\ndeclare namespace setTimeout {\n    export function __promisify__(ms: number): Promise<void>;\n    export function __promisify__<T>(ms: number, value: T): Promise<T>;\n}"
  },
  {
    "id" : "49bdcf9f-a2e5-4a59-8799-7507a019b9c3",
    "prId" : 19488,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19488#pullrequestreview-61419333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eae10de9-e23e-4519-b3db-333d4616476b",
        "parentId" : null,
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "Similar to `setTimeout`, `setImmediate` can also take a value.",
        "createdAt" : "2017-09-08T06:16:10Z",
        "updatedAt" : "2017-09-08T16:11:02Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b15ea00d1d4fe043e28023d635dbe2fd337f93b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +91,95 @@declare function setImmediate(callback: (...args: any[]) => void, ...args: any[]): any;\ndeclare namespace setImmediate {\n    export function __promisify__(): Promise<void>;\n    export function __promisify__<T>(value: T): Promise<T>;\n}"
  },
  {
    "id" : "491966f9-4b03-4094-ba4c-d464f80b57be",
    "prId" : 19488,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19488#pullrequestreview-61419333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "feb1fd44-7a8e-45b3-93ba-8289d6d107fa",
        "parentId" : null,
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "See earlier comment.",
        "createdAt" : "2017-09-08T06:16:43Z",
        "updatedAt" : "2017-09-08T16:11:02Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b15ea00d1d4fe043e28023d635dbe2fd337f93b",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +5676,5680 @@    export function setTimeout(callback: (...args: any[]) => void, ms: number, ...args: any[]): NodeJS.Timer;\n    export namespace setTimeout {\n        export function __promisify__(ms: number): Promise<void>;\n        export function __promisify__<T>(ms: number, value: T): Promise<T>;\n    }"
  },
  {
    "id" : "191ea83c-512c-44f9-a48a-c666578bd35e",
    "prId" : 19488,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19488#pullrequestreview-61419333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33726d71-6b1b-4969-a318-8501aa9df7b4",
        "parentId" : null,
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "See earlier comment.",
        "createdAt" : "2017-09-08T06:16:49Z",
        "updatedAt" : "2017-09-08T16:11:02Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b15ea00d1d4fe043e28023d635dbe2fd337f93b",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +5684,5688 @@    export function setImmediate(callback: (...args: any[]) => void, ...args: any[]): any;\n    export namespace setImmediate {\n        export function __promisify__(): Promise<void>;\n        export function __promisify__<T>(value: T): Promise<T>;\n    }"
  },
  {
    "id" : "ba049035-e838-4158-b406-a64b8a95c28d",
    "prId" : 20068,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20068#pullrequestreview-65568807",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf2d06ea-41ff-4d1f-8f1e-f36b0754d5ba",
        "parentId" : null,
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "I think this should be `_destroy(err: Error | null, (err: Error | null) => void)`.",
        "createdAt" : "2017-09-27T14:09:15Z",
        "updatedAt" : "2017-10-04T07:41:29Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "4ff05524-2156-4867-b0c9-a47f760d3c32",
        "parentId" : "bf2d06ea-41ff-4d1f-8f1e-f36b0754d5ba",
        "authorId" : "3bc44f3d-8622-4a89-8fb6-24b94177a830",
        "body" : "At least the documentation does not specify `null` as a possible value for the first parameter.\r\n\r\nFor the callback type I tried to align this change with the signature of `_destroy` in other stream classes. If it was changed to the more specific type it should probably be reflected there as well for consistency.",
        "createdAt" : "2017-09-27T14:22:34Z",
        "updatedAt" : "2017-10-04T07:41:29Z",
        "lastEditedBy" : "3bc44f3d-8622-4a89-8fb6-24b94177a830",
        "tags" : [
        ]
      },
      {
        "id" : "0d81ddeb-908c-4c92-aa6a-891b197a567c",
        "parentId" : "bf2d06ea-41ff-4d1f-8f1e-f36b0754d5ba",
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "To my understanding `_destroy()` gets called if `destroy()` is called. As parameter to `destroy()` is optional it may happen that `_destroy()` gets no Error object.\r\nNode defaults to null in this case. see https://github.com/nodejs/node/blob/1fe9b535a78a23a9549b544ec4a4f76614f45c5c/lib/internal/streams/destroy.js#L32\r\n\r\nBut you are right, the `_destroy()` for `Writeable` and `Duplex` are like your proposal so maybe it's better to keep them in sync to avoid confusion.",
        "createdAt" : "2017-09-27T14:45:18Z",
        "updatedAt" : "2017-10-04T07:41:29Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      }
    ],
    "commit" : "886dbe35e21d6ba294a5869caeebf4d3ceaec615",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +5036,5040 @@            wrap(oldStream: NodeJS.ReadableStream): Readable;\n            push(chunk: any, encoding?: string): boolean;\n            _destroy(err: Error, callback: Function): void;\n            destroy(error?: Error): void;\n"
  },
  {
    "id" : "1fd98def-0e3e-4b89-be1f-db547086cb3d",
    "prId" : 20185,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20185#pullrequestreview-66382034",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b155f717-aafa-4cd4-b0d0-ab2d52e6d8b2",
        "parentId" : null,
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "I think it should be `NodeJS.ErrnoException | null`.",
        "createdAt" : "2017-10-02T07:54:35Z",
        "updatedAt" : "2017-10-17T07:13:59Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc4e67f44f06b07ed3f5cc63852129e26aadefaf",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +4347,4351 @@     * @param dest A path to the destination file.\n     */\n    export function copyFile(src: PathLike, dest: PathLike, callback: (err: NodeJS.ErrnoException) => void): void;\n    /**\n     * Asynchronously copies src to dest. By default, dest is overwritten if it already exists."
  },
  {
    "id" : "037a6ca7-0e2e-4846-870b-c7b883062c2d",
    "prId" : 20185,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20185#pullrequestreview-66386339",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3feff73d-c5f5-40fb-9548-e0a50b50c177",
        "parentId" : null,
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "I think it should be `NodeJS.ErrnoException | null`.",
        "createdAt" : "2017-10-02T07:55:00Z",
        "updatedAt" : "2017-10-17T07:13:59Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "92e0666a-7ca9-423b-b5c3-a05d366babd1",
        "parentId" : "3feff73d-c5f5-40fb-9548-e0a50b50c177",
        "authorId" : "cc9b3f80-55c3-4c87-aadd-bbc3fb5fe95f",
        "body" : "I think you are right, but all the other callbacks are declared this way so I kept the same style",
        "createdAt" : "2017-10-02T08:13:34Z",
        "updatedAt" : "2017-10-17T07:13:59Z",
        "lastEditedBy" : "cc9b3f80-55c3-4c87-aadd-bbc3fb5fe95f",
        "tags" : [
        ]
      },
      {
        "id" : "0b0c19ca-780d-4962-840b-3ca51d90b1e9",
        "parentId" : "3feff73d-c5f5-40fb-9548-e0a50b50c177",
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "ok fine with me. Maybe it's better to change them all via a separated PR.",
        "createdAt" : "2017-10-02T08:18:24Z",
        "updatedAt" : "2017-10-17T07:13:59Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc4e67f44f06b07ed3f5cc63852129e26aadefaf",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +4358,4362 @@     * @param flags An integer that specifies the behavior of the copy operation. The only supported flag is fs.constants.COPYFILE_EXCL, which causes the copy operation to fail if dest already exists.\n     */\n    export function copyFile(src: PathLike, dest: PathLike, flags: number, callback: (err: NodeJS.ErrnoException) => void): void;\n\n    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime."
  },
  {
    "id" : "a18b02c7-52bd-46fa-942e-71e9604ada78",
    "prId" : 21897,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21897#pullrequestreview-80875528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f40c6f60-b246-4392-8774-0de44b66391d",
        "parentId" : null,
        "authorId" : "04e09978-475a-4333-8639-a85b17b7429f",
        "body" : "Duplicate of #21768.",
        "createdAt" : "2017-12-04T15:21:42Z",
        "updatedAt" : "2017-12-04T20:19:43Z",
        "lastEditedBy" : "04e09978-475a-4333-8639-a85b17b7429f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a385b18cd63d91f395f54c5c301f74241a884b11",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +107,111 @@// TODO: change to `type NodeRequireFunction = (id: string) => any;` in next mayor version.\ninterface NodeRequireFunction {\n/* tslint:disable-next-line:callable-types */\n    (id: string): any;\n}"
  },
  {
    "id" : "48adc279-a151-464f-ac42-a2f747a3734f",
    "prId" : 22171,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/22171#pullrequestreview-84192454",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c78c10b7-633c-4024-8699-1396a4b9b737",
        "parentId" : null,
        "authorId" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "body" : "Maybe remove this, and make the `boolean` `parse` overload return `UrlParsedQuery | UrlStringQuery`?",
        "createdAt" : "2017-12-18T10:02:36Z",
        "updatedAt" : "2018-01-03T19:29:45Z",
        "lastEditedBy" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "tags" : [
        ]
      },
      {
        "id" : "788ea000-972a-4a11-b8fa-ca0a6f8b8e07",
        "parentId" : "c78c10b7-633c-4024-8699-1396a4b9b737",
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "seems `Url.url` is used at several other modules so I will keep it.",
        "createdAt" : "2017-12-18T16:34:50Z",
        "updatedAt" : "2018-01-03T19:29:45Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6ce3925c1236ec4d656be33812392232880a66c",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +2340,2344 @@    export interface Url extends UrlObjectCommon {\n        port?: string;\n        query?: string | null | ParsedUrlQuery;\n    }\n"
  },
  {
    "id" : "efc6b8b7-9ef3-4725-bc48-2d0371b54fac",
    "prId" : 22567,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/22567#pullrequestreview-86505995",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c0e784f-6ff6-4fa0-959c-8aac32e422e5",
        "parentId" : null,
        "authorId" : "eee1ebb2-52db-43c1-8342-105edab35b05",
        "body" : "The description should probably be amended",
        "createdAt" : "2018-01-03T22:05:32Z",
        "updatedAt" : "2018-01-03T22:05:32Z",
        "lastEditedBy" : "eee1ebb2-52db-43c1-8342-105edab35b05",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6a73eb8ca9c6f05ab76eb43b0da159986f3fa98",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +4619,4623 @@     * If {to} isn't already absolute, {from} arguments are prepended in right to left order, until an absolute path is found. If after using all {from} paths still no absolute path is found, the current working directory is used as well. The resulting path is normalized, and trailing slashes are removed unless the path gets resolved to the root directory.\n     *\n     * @param pathSegments string paths to join.  Non-string arguments are ignored.\n     */\n    export function resolve(...pathSegments: string[]): string;"
  },
  {
    "id" : "54ba33d2-39c6-413a-84d5-7c44b40d11e8",
    "prId" : 23330,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23330#pullrequestreview-95956042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f3cb53e-4717-4ca2-abf8-107e48f2942a",
        "parentId" : null,
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "I think there should be also a `closed: boolean` and `pending: boolean` (see https://nodejs.org/dist/latest/docs/api/http2.html#http2_http2stream_closed and https://nodejs.org/dist/latest/docs/api/http2.html#http2_http2stream_pending)",
        "createdAt" : "2018-02-01T22:52:42Z",
        "updatedAt" : "2018-02-12T21:55:16Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "31dc468e-8fd7-4ba4-94af-780af1650f6a",
        "parentId" : "1f3cb53e-4717-4ca2-abf8-107e48f2942a",
        "authorId" : "8f4f0b53-5cfa-4fbd-9903-00bfde4168a5",
        "body" : "Done",
        "createdAt" : "2018-02-12T21:55:38Z",
        "updatedAt" : "2018-02-12T21:55:39Z",
        "lastEditedBy" : "8f4f0b53-5cfa-4fbd-9903-00bfde4168a5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a25c336a5931d450dab423654eec3fc7837fee8a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +6182,6186 @@    export interface Http2Stream extends stream.Duplex {\n        readonly aborted: boolean;\n        close(code: number, callback?: () => void): void;\n        readonly closed: boolean;\n        readonly destroyed: boolean;"
  },
  {
    "id" : "f7ac43e1-6dc6-46bd-aa88-08d43cd60410",
    "prId" : 23330,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23330#pullrequestreview-96251474",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45dd3318-29f3-4224-a091-9575d5b7c411",
        "parentId" : null,
        "authorId" : "04e09978-475a-4333-8639-a85b17b7429f",
        "body" : "Should we add a `TypedArray` alias in the meantime until typescript offers a built-in solution in one of their lib files?\r\n\r\n> `type TypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array;`\r\n>\r\n> -- [<cite>Microsoft/TypeScript#15402</cite>](https://github.com/Microsoft/TypeScript/issues/15402#issuecomment-297544403)",
        "createdAt" : "2018-02-02T09:59:27Z",
        "updatedAt" : "2018-02-12T21:55:16Z",
        "lastEditedBy" : "04e09978-475a-4333-8639-a85b17b7429f",
        "tags" : [
        ]
      },
      {
        "id" : "b8fcd8dc-96d5-4dc2-995b-991605d6b23d",
        "parentId" : "45dd3318-29f3-4224-a091-9575d5b7c411",
        "authorId" : "8f4f0b53-5cfa-4fbd-9903-00bfde4168a5",
        "body" : "Is that going to cause re-definition issues when the built-in `TypedArray` becomes available? If so maybe it's better to either not include, or have a type with a different name. Since other places use `TypedArray` as well, it shouldn't be difficult to substitute all in a separate PR.",
        "createdAt" : "2018-02-06T19:38:49Z",
        "updatedAt" : "2018-02-12T21:55:16Z",
        "lastEditedBy" : "8f4f0b53-5cfa-4fbd-9903-00bfde4168a5",
        "tags" : [
        ]
      },
      {
        "id" : "6381e806-691e-40d7-9c29-a25c4fb15152",
        "parentId" : "45dd3318-29f3-4224-a091-9575d5b7c411",
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "As long as it's not defined in the global scope, you should be okay.",
        "createdAt" : "2018-02-13T18:34:01Z",
        "updatedAt" : "2018-02-13T18:34:01Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      }
    ],
    "commit" : "a25c336a5931d450dab423654eec3fc7837fee8a",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +6364,6368 @@        readonly destroyed: boolean;\n        readonly encrypted?: boolean;\n        goaway(code?: number, lastStreamID?: number, opaqueData?: Buffer | DataView /*| TypedArray*/): void;\n        readonly localSettings: Settings;\n        readonly originSet?: string[];"
  },
  {
    "id" : "f70ab548-0e81-4ccf-8bd8-f5d62130fa5d",
    "prId" : 24798,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24798#pullrequestreview-110274429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e234a2b9-d3ce-44a5-8385-577551efa4ab",
        "parentId" : null,
        "authorId" : "01e461e7-0879-4481-94a6-957ca6878bad",
        "body" : "https://github.com/nodejs/node/blob/de0053cc3280bdf72c9010f383290f79120a1e98/doc/api/deprecations.md#dep0069-vmrunindebugcontextstring",
        "createdAt" : "2018-04-08T04:46:39Z",
        "updatedAt" : "2018-04-09T21:04:23Z",
        "lastEditedBy" : "01e461e7-0879-4481-94a6-957ca6878bad",
        "tags" : [
        ]
      }
    ],
    "commit" : "980f7b880e1c9037791ec62d54f1d71658573449",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2005,2009 @@    export function isContext(sandbox: Context): boolean;\n    export function runInContext(code: string, contextifiedSandbox: Context, options?: RunningScriptOptions | string): any;\n    /** @deprecated */\n    export function runInDebugContext(code: string): any;\n    export function runInNewContext(code: string, sandbox?: Context, options?: RunningScriptOptions | string): any;"
  },
  {
    "id" : "48bb5135-4a10-4187-960a-bb43429672a6",
    "prId" : 25263,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/25263#pullrequestreview-115828853",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb6f34b0-fca7-4ced-9b81-1257684d69fa",
        "parentId" : null,
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "is it really `any` here or should this be something like `{}` to avoid `null` and `undefined`?",
        "createdAt" : "2018-04-26T19:14:10Z",
        "updatedAt" : "2018-04-30T02:23:32Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "65ae692c-8109-4070-8bec-ab99a2bc6d42",
        "parentId" : "bb6f34b0-fca7-4ced-9b81-1257684d69fa",
        "authorId" : "06b2c4d7-2a74-4deb-b548-5fd5167ea8eb",
        "body" : "I wrote \"any\" to match the definition of `write` on the stream. The [documentation](https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback_1) also says `<any>`; I know of no reason it couldn't be null or undefined on an object-mode stream.",
        "createdAt" : "2018-04-27T03:19:23Z",
        "updatedAt" : "2018-04-30T02:23:32Z",
        "lastEditedBy" : "06b2c4d7-2a74-4deb-b548-5fd5167ea8eb",
        "tags" : [
        ]
      },
      {
        "id" : "46bff814-0781-425f-914f-23b3c2c24d57",
        "parentId" : "bb6f34b0-fca7-4ced-9b81-1257684d69fa",
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "I have read here https://nodejs.org/dist/latest/docs/api/stream.html#stream_writable_write_chunk_encoding_callback that `null` is not allowed in object mode. But you are right the APIs should be symmetric.",
        "createdAt" : "2018-04-27T06:08:27Z",
        "updatedAt" : "2018-04-30T02:23:32Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      }
    ],
    "commit" : "1bf687dc417e2d57f11d0d0caca2608e46827cad",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +5382,5386 @@            decodeStrings?: boolean;\n            objectMode?: boolean;\n            write?: (chunk: any, encoding: string, callback: Function) => any;\n            writev?: (chunks: Array<{ chunk: any, encoding: string }>, callback: Function) => any;\n            destroy?: (error?: Error) => any;"
  },
  {
    "id" : "85a536f3-416e-4b1c-9979-a600371a79d4",
    "prId" : 25269,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/25269#pullrequestreview-114986779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d02b30e3-d8df-40c9-92d4-501799f71f6a",
        "parentId" : null,
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "Wait, `log` isn't `console.log`?",
        "createdAt" : "2018-04-24T22:06:40Z",
        "updatedAt" : "2018-04-26T04:16:35Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "e5138ef3-c04d-4c93-93da-7bcda6c67321",
        "parentId" : "d02b30e3-d8df-40c9-92d4-501799f71f6a",
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "No, it wraps `console.log` and adds a timestamp. However, it's a soft deprecation (no runtime warning), but its marked \"deprecated\" in the docs.",
        "createdAt" : "2018-04-24T22:23:53Z",
        "updatedAt" : "2018-04-26T04:16:35Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "bffb03282272b37ccb12429026f4504a39a3cd83",
    "line" : 706,
    "diffHunk" : "@@ -1,1 +6037,6041 @@    /** @deprecated since v0.11.3 - use `console.log()` instead. */\n    export function print(...param: any[]): void;\n    /** @deprecated since v0.11.3 - use a third party module instead. */\n    export function log(string: string): void;\n    export var inspect: {"
  },
  {
    "id" : "77dddb60-7003-40c5-927e-3c5caacb76ba",
    "prId" : 25269,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/25269#pullrequestreview-116030250",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d79a0117-c95d-4d19-821c-ac7665ff3b15",
        "parentId" : null,
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "Question just for interest: what is the reason to move this into `global` here?",
        "createdAt" : "2018-04-26T19:23:09Z",
        "updatedAt" : "2018-04-26T19:23:09Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "2df9aa8d-89a4-4470-a0ae-6253d45645a2",
        "parentId" : "d79a0117-c95d-4d19-821c-ac7665ff3b15",
        "authorId" : "be9f1bf9-04c3-406e-a6a2-095e26ff727e",
        "body" : "https://github.com/DefinitelyTyped/DefinitelyTyped/issues/25342\r\n\r\nI'm working on build failures caused by 10.0.0 being pulled in as a transitive dependency and I wonder whether the decision to move these definitions into the global namespace is causing the collision here.",
        "createdAt" : "2018-04-26T20:10:05Z",
        "updatedAt" : "2018-04-26T20:10:05Z",
        "lastEditedBy" : "be9f1bf9-04c3-406e-a6a2-095e26ff727e",
        "tags" : [
        ]
      },
      {
        "id" : "76f13b83-2a93-4b5e-a690-9a886da7af4d",
        "parentId" : "d79a0117-c95d-4d19-821c-ac7665ff3b15",
        "authorId" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "body" : "It was definitely made a global because `node` now places it into the global scope (which is problematic if node is in the same compilation as the `dom` lib), this really needs https://github.com/Microsoft/TypeScript/pull/15780 (and for the `URL` constructor to be in its own lib) for it to be handled well.",
        "createdAt" : "2018-04-26T22:53:03Z",
        "updatedAt" : "2018-04-26T22:53:03Z",
        "lastEditedBy" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "tags" : [
        ]
      },
      {
        "id" : "191d1bb5-646c-48c3-bf34-e01f6e707bd2",
        "parentId" : "d79a0117-c95d-4d19-821c-ac7665ff3b15",
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "@weswigham I'm apprehensive that even Microsoft/TypeScript#15780 will help since the WHATWG URL implementation has a subtly different API surface in the DOM vs. NodeJS. Rather, I think this will necessitate switching the definition of `URL` and `URLSearchParams` in DOM to use the same split interface (instance vs. constructor) approach we use for Object, Number, etc. so that the declarations can merge.",
        "createdAt" : "2018-04-27T00:36:14Z",
        "updatedAt" : "2018-04-27T00:37:29Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      },
      {
        "id" : "4d1a560d-c76a-4e49-aae2-668f8bc2a486",
        "parentId" : "d79a0117-c95d-4d19-821c-ac7665ff3b15",
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "I'm reverting this specific change in #25356 for now.",
        "createdAt" : "2018-04-27T00:37:09Z",
        "updatedAt" : "2018-04-27T00:37:09Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      },
      {
        "id" : "7901ae42-ace4-4d8a-ab46-dc26c2acf4c9",
        "parentId" : "d79a0117-c95d-4d19-821c-ac7665ff3b15",
        "authorId" : "a39278b7-038b-4aff-8f2f-7683961e4227",
        "body" : "I believe this same type of problem exists for `setTimeout`.\r\n\r\nThe implementation is subtly different in the DOM vs Node.js, specifically the return type. https://nodejs.org/dist/latest-v10.x/docs/api/timers.html\r\n\r\nSomehow TypeScript is able to handle this scenario, right?",
        "createdAt" : "2018-04-27T18:01:30Z",
        "updatedAt" : "2018-04-27T18:01:30Z",
        "lastEditedBy" : "a39278b7-038b-4aff-8f2f-7683961e4227",
        "tags" : [
        ]
      }
    ],
    "commit" : "bffb03282272b37ccb12429026f4504a39a3cd83",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +2378,2382 @@    }\n\n    global {\n        class URL {\n            constructor(input: string, base?: string | URL);"
  },
  {
    "id" : "c91ffdd0-b866-4a7b-a886-0f781e5e8e8d",
    "prId" : 26613,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26613#pullrequestreview-129758547",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f33b13f8-6542-4940-bf3a-b45923487ab6",
        "parentId" : null,
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "This is not for this PR, but I noticed that `__promisify__(hostname: string, rrtype?: \"A\" | ...)` prevents `__promisify__(hostname: string, rrtype?: string)` from ever matching a call like `__promisify__(\"host\")`. I'm pretty sure that `rrtype` should not be optional in the first overload.",
        "createdAt" : "2018-06-18T22:13:14Z",
        "updatedAt" : "2018-06-18T22:13:20Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      }
    ],
    "commit" : "169b2063839b313fcabd4e4cded0bfa26690d8b8",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +2634,2638 @@    // NOTE: This namespace provides design-time support for util.promisify. Exported members do not exist at runtime.\n    export namespace resolve {\n        export function __promisify__(hostname: string, rrtype?: \"A\" | \"AAAA\" | \"CNAME\" | \"NS\" | \"PTR\"): Promise<string[]>;\n        export function __promisify__(hostname: string, rrtype: \"ANY\"): Promise<ReadonlyArray<AnySrvRecord | AnySoaRecord | AnyNaptrRecord | AnyRecordWithTtl | AnyMxRecord | AnyTxtRecord>>;\n        export function __promisify__(hostname: string, rrtype: \"MX\"): Promise<MxRecord[]>;"
  },
  {
    "id" : "40a3a16e-1310-485f-83f0-d18849379457",
    "prId" : 26655,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26655#pullrequestreview-131078073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80b564bb-6ffa-4425-9604-4865f3a8c903",
        "parentId" : null,
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "`of` is not a member of `Buffer`, it's available in `Buffer` via base `Uint8Array` so it should not be here.",
        "createdAt" : "2018-06-22T05:48:22Z",
        "updatedAt" : "2018-06-22T05:48:22Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "dc1a1079-977a-47cc-be25-b81ac9696683",
        "parentId" : "80b564bb-6ffa-4425-9604-4865f3a8c903",
        "authorId" : "9dbe7a00-2ca0-4c89-b45a-361b6e2486f4",
        "body" : "Yeah; I just did a hotfix because a build failed because it couldn't find a definition of `Buffer.of`; so I added it.",
        "createdAt" : "2018-06-22T05:59:15Z",
        "updatedAt" : "2018-06-22T05:59:15Z",
        "lastEditedBy" : "9dbe7a00-2ca0-4c89-b45a-361b6e2486f4",
        "tags" : [
        ]
      },
      {
        "id" : "6796a724-ae0d-4f61-93b0-15242dbf33f3",
        "parentId" : "80b564bb-6ffa-4425-9604-4865f3a8c903",
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "I think the correct approach would be to create `BufferConstructor extends Uint8ArrayConstructor` but this wont work out of the box as the `from` methods are incompatible.\r\nSo most likely using your hotfix is best for now.\r\nUsually I would state to add some comment in this but one more commit will result again in a CI nightmare which is not worth to do.",
        "createdAt" : "2018-06-22T06:23:26Z",
        "updatedAt" : "2018-06-22T06:23:26Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcbc1c2eef69f1ceded8839516832de470d6f102",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +397,401 @@     * @param values to create a new Buffer\n     */\n    of(...items: number[]): Buffer;\n    /**\n     * Returns true if {obj} is a Buffer"
  },
  {
    "id" : "63e4c872-3199-4e02-8940-34b4f1f76511",
    "prId" : 27387,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/27387#pullrequestreview-139256487",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b43cb9e-238f-47ad-8ce7-f2ed90a0583c",
        "parentId" : null,
        "authorId" : "bf72326f-2337-4bd0-ab3c-47d2b78dd15e",
        "body" : "Could you explain why need to introduce new type definition instead of using `ArrayBufferView`, which covers the same types https://heycam.github.io/webidl/#common ?",
        "createdAt" : "2018-07-20T07:40:05Z",
        "updatedAt" : "2018-07-24T16:19:49Z",
        "lastEditedBy" : "bf72326f-2337-4bd0-ab3c-47d2b78dd15e",
        "tags" : [
        ]
      },
      {
        "id" : "95afdc90-9f59-4876-b0ab-21f9415accba",
        "parentId" : "4b43cb9e-238f-47ad-8ce7-f2ed90a0583c",
        "authorId" : "bf72326f-2337-4bd0-ab3c-47d2b78dd15e",
        "body" : "~~Hmm. Maybe something wrong, but in [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) `ArrayBufferView` also contains `DataView`~~",
        "createdAt" : "2018-07-20T07:45:44Z",
        "updatedAt" : "2018-07-24T16:19:49Z",
        "lastEditedBy" : "bf72326f-2337-4bd0-ab3c-47d2b78dd15e",
        "tags" : [
        ]
      },
      {
        "id" : "88fc771f-53fa-4fad-ae2f-fa4d244d9f45",
        "parentId" : "4b43cb9e-238f-47ad-8ce7-f2ed90a0583c",
        "authorId" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "body" : "From MDN docs point of view it looks nice but the definiton in lib.es5.d.ts is quite reduced compared to that:\r\n```\r\ninterface ArrayBufferView {\r\n    /**\r\n      * The ArrayBuffer instance referenced by the array.\r\n      */\r\n    buffer: ArrayBufferLike;\r\n\r\n    /**\r\n      * The length in bytes of the array.\r\n      */\r\n    byteLength: number;\r\n\r\n    /**\r\n      * The offset in bytes of the array.\r\n      */\r\n    byteOffset: number;\r\n}\r\n```\r\n\r\nSee also https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26886#issuecomment-400853289 and https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26886#issuecomment-400989270\r\n\r\nTo my knowlege Node really checks on types in this so I think using a union of existing types matches better then the loose `ArrayBufferView` interface.",
        "createdAt" : "2018-07-21T08:37:14Z",
        "updatedAt" : "2018-07-24T16:19:49Z",
        "lastEditedBy" : "e72002e7-e411-40da-ac47-9c0e8d147cda",
        "tags" : [
        ]
      },
      {
        "id" : "dca3bae8-343f-4872-8227-be6d3be8255d",
        "parentId" : "4b43cb9e-238f-47ad-8ce7-f2ed90a0583c",
        "authorId" : "9dbe7a00-2ca0-4c89-b45a-361b6e2486f4",
        "body" : "Yeah. The actual one checks against the string name of the prototype rather than eg `ArrayBuffer.isView()`.",
        "createdAt" : "2018-07-21T12:00:57Z",
        "updatedAt" : "2018-07-24T16:19:49Z",
        "lastEditedBy" : "9dbe7a00-2ca0-4c89-b45a-361b6e2486f4",
        "tags" : [
        ]
      }
    ],
    "commit" : "40e8985bab02319632fcdf7d609d086ae45b93e0",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +979,983 @@    }\n\n    type TypedArray = Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n}\n"
  }
]