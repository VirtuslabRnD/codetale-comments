[
  {
    "id" : "38210db8-446f-4178-b635-8fce3115fc62",
    "prId" : 48210,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/48210#pullrequestreview-497112489",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b10b900-4934-419b-b107-a99b2769037f",
        "parentId" : null,
        "authorId" : "6c65b7d2-dd62-4eab-9c04-1f124d6fe9e4",
        "body" : "This object can also optionally have a `middleware` key with an array value and a `bindings` key with an object value where all the keys and values of that object are strings.",
        "createdAt" : "2020-09-26T17:54:38Z",
        "updatedAt" : "2020-09-27T04:44:39Z",
        "lastEditedBy" : "6c65b7d2-dd62-4eab-9c04-1f124d6fe9e4",
        "tags" : [
        ]
      },
      {
        "id" : "4e9a9aac-5cb6-4e9b-9b15-156d66f19c21",
        "parentId" : "8b10b900-4934-419b-b107-a99b2769037f",
        "authorId" : "3cfc9916-f953-463c-8676-038f29d1099a",
        "body" : "I added them, but can you please point to where this is referenced in the ziggy js? I searched and didn't find those keys anywhere in the repo.",
        "createdAt" : "2020-09-26T18:50:17Z",
        "updatedAt" : "2020-09-27T04:44:39Z",
        "lastEditedBy" : "3cfc9916-f953-463c-8676-038f29d1099a",
        "tags" : [
        ]
      },
      {
        "id" : "9eb914e3-75f6-4a76-bf54-a2e29ea10d4d",
        "parentId" : "8b10b900-4934-419b-b107-a99b2769037f",
        "authorId" : "6c65b7d2-dd62-4eab-9c04-1f124d6fe9e4",
        "body" : "I don't think `middleware` actually gets used by Ziggy's javascript anywhere, but it can be included with a config option, see https://github.com/tighten/ziggy/blob/0.9.x/src/RoutePayload.php#L98-L104 and https://github.com/tighten/ziggy/blob/0.9.x/tests/Unit/RoutePayloadTest.php#L280-L329.\r\n\r\n`bindings` is going to be in `1.0` so you're right actually it's not possible yet, sorry!",
        "createdAt" : "2020-09-26T23:14:47Z",
        "updatedAt" : "2020-09-27T04:44:39Z",
        "lastEditedBy" : "6c65b7d2-dd62-4eab-9c04-1f124d6fe9e4",
        "tags" : [
        ]
      },
      {
        "id" : "31b99180-51c6-4f17-beb7-22c5951243ab",
        "parentId" : "8b10b900-4934-419b-b107-a99b2769037f",
        "authorId" : "3cfc9916-f953-463c-8676-038f29d1099a",
        "body" : "Hmm ok I think it is best to omit these for now, at least until 1.0 comes along. Typescript doesn't care if you give it extra keys, so it won't hurt anything if someone adds `{ middleware: 'foo' }` or even `{ bar: 'baz' }`\r\n\r\nDoes that sound ok to you? People can always include extra keys in TS, it will just treat them as `any` types.",
        "createdAt" : "2020-09-27T04:40:54Z",
        "updatedAt" : "2020-09-27T04:44:39Z",
        "lastEditedBy" : "3cfc9916-f953-463c-8676-038f29d1099a",
        "tags" : [
        ]
      },
      {
        "id" : "1e1701ee-21ec-440d-8396-b824980de64e",
        "parentId" : "8b10b900-4934-419b-b107-a99b2769037f",
        "authorId" : "6c65b7d2-dd62-4eab-9c04-1f124d6fe9e4",
        "body" : "Perfect üëç ",
        "createdAt" : "2020-09-27T21:28:10Z",
        "updatedAt" : "2020-09-27T21:28:10Z",
        "lastEditedBy" : "6c65b7d2-dd62-4eab-9c04-1f124d6fe9e4",
        "tags" : [
        ]
      }
    ],
    "commit" : "661a44c62acb6416f7fbfdc75faf0bf3577446d2",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@    methods: Array<'GET' | 'HEAD' | 'POST' | 'PATCH' | 'PUT' | 'OPTIONS' | 'DELETE'>;\n    domain?: null | string;\n}\n\nexport interface Config {"
  },
  {
    "id" : "0151133b-d98b-4c08-b40c-ddd15e5633ec",
    "prId" : 48210,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/48210#pullrequestreview-497050649",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82b862db-221e-4e7f-a275-673fcdb9e03f",
        "parentId" : null,
        "authorId" : "6c65b7d2-dd62-4eab-9c04-1f124d6fe9e4",
        "body" : "This should probably just be `string` because it can be any valid URL protocol, including `ssh`, `ftp`, and tons of others.",
        "createdAt" : "2020-09-26T17:55:42Z",
        "updatedAt" : "2020-09-27T04:44:39Z",
        "lastEditedBy" : "6c65b7d2-dd62-4eab-9c04-1f124d6fe9e4",
        "tags" : [
        ]
      },
      {
        "id" : "3e01c664-7e0c-4ea1-b01e-923892dcc6ad",
        "parentId" : "82b862db-221e-4e7f-a275-673fcdb9e03f",
        "authorId" : "3cfc9916-f953-463c-8676-038f29d1099a",
        "body" : "Can you clarify please, I thought these routes always pointed back to the Laravel API? When would they ever be anything other than http(s)?",
        "createdAt" : "2020-09-26T18:47:02Z",
        "updatedAt" : "2020-09-27T04:44:39Z",
        "lastEditedBy" : "3cfc9916-f953-463c-8676-038f29d1099a",
        "tags" : [
        ]
      },
      {
        "id" : "d0ed2c30-d270-4ff7-9728-e8003ac5c926",
        "parentId" : "82b862db-221e-4e7f-a275-673fcdb9e03f",
        "authorId" : "6c65b7d2-dd62-4eab-9c04-1f124d6fe9e4",
        "body" : "A user could manually overrides this by modifying the Ziggy config. Now that you mention this though that doesn't really make sense... the only routes in the list would be Laravel named routes. Idk if it's even possible for them to be anything besides `http` and `https`? I'll leave this up to you for now but I'm going to look into this more, if this config option is completely useless we should just remove it.",
        "createdAt" : "2020-09-26T23:22:52Z",
        "updatedAt" : "2020-09-27T04:44:39Z",
        "lastEditedBy" : "6c65b7d2-dd62-4eab-9c04-1f124d6fe9e4",
        "tags" : [
        ]
      },
      {
        "id" : "f9382970-c52c-4b38-bbe3-d0710c35383f",
        "parentId" : "82b862db-221e-4e7f-a275-673fcdb9e03f",
        "authorId" : "3cfc9916-f953-463c-8676-038f29d1099a",
        "body" : "Ok will leave as is for now. If someone complains I can always update it once we have a concrete use case to support it.",
        "createdAt" : "2020-09-27T04:41:51Z",
        "updatedAt" : "2020-09-27T04:44:39Z",
        "lastEditedBy" : "3cfc9916-f953-463c-8676-038f29d1099a",
        "tags" : [
        ]
      }
    ],
    "commit" : "661a44c62acb6416f7fbfdc75faf0bf3577446d2",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +32,36 @@    };\n    baseUrl: string;\n    baseProtocol: 'http' | 'https';\n    baseDomain: string;\n    basePort?: number | null;"
  },
  {
    "id" : "e19fb442-2163-4679-80c3-0af31983bf0e",
    "prId" : 48210,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/48210#pullrequestreview-497112537",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3443ccf7-59c6-4c46-9916-874faeb2bed1",
        "parentId" : null,
        "authorId" : "3cfc9916-f953-463c-8676-038f29d1099a",
        "body" : "@bakerkretzmar Just a side comment, in `route.js` I think it might be nice to do \r\n\r\n```\r\n                if (this.ziggy.defaultParameters.hasOwnProperty(keyName)) {\r\n                    defaultParameter = encodeURIComponent(this.ziggy.defaultParameters[keyName]);\r\n                }\r\n```\r\n\r\nThat way default params could be any encodable type.",
        "createdAt" : "2020-09-26T18:58:51Z",
        "updatedAt" : "2020-09-27T04:44:39Z",
        "lastEditedBy" : "3cfc9916-f953-463c-8676-038f29d1099a",
        "tags" : [
        ]
      },
      {
        "id" : "6085e0a8-7d20-41db-9389-30d85e05e97e",
        "parentId" : "3443ccf7-59c6-4c46-9916-874faeb2bed1",
        "authorId" : "6c65b7d2-dd62-4eab-9c04-1f124d6fe9e4",
        "body" : "Default parameters actually can only be strings and integers, they aren't subject to route model binding: see https://laravel.com/docs/8.x/urls#default-values at the \"URL Defaults & Middleware Priority\" heading, and https://github.com/laravel/framework/blob/8.x/src/Illuminate/Routing/RouteUrlGenerator.php#L211-L231",
        "createdAt" : "2020-09-26T23:33:40Z",
        "updatedAt" : "2020-09-27T04:44:39Z",
        "lastEditedBy" : "6c65b7d2-dd62-4eab-9c04-1f124d6fe9e4",
        "tags" : [
        ]
      },
      {
        "id" : "60d5ccdc-b9f2-43ff-9f23-fb93254f89d7",
        "parentId" : "3443ccf7-59c6-4c46-9916-874faeb2bed1",
        "authorId" : "3cfc9916-f953-463c-8676-038f29d1099a",
        "body" : "Ok I've updated it to `string | number`. Is the goal to mimic the PHP `route()` as much as possible? TS doesn't have an `int` type, so the best we can do is `number`. Hope that works :)",
        "createdAt" : "2020-09-27T04:44:24Z",
        "updatedAt" : "2020-09-27T04:44:39Z",
        "lastEditedBy" : "3cfc9916-f953-463c-8676-038f29d1099a",
        "tags" : [
        ]
      },
      {
        "id" : "026f161a-b206-4dca-b9ff-15c8bab3609d",
        "parentId" : "3443ccf7-59c6-4c46-9916-874faeb2bed1",
        "authorId" : "6c65b7d2-dd62-4eab-9c04-1f124d6fe9e4",
        "body" : "Yep that's the goal, and `number` is great thanks!",
        "createdAt" : "2020-09-27T21:29:01Z",
        "updatedAt" : "2020-09-27T21:29:02Z",
        "lastEditedBy" : "6c65b7d2-dd62-4eab-9c04-1f124d6fe9e4",
        "tags" : [
        ]
      }
    ],
    "commit" : "661a44c62acb6416f7fbfdc75faf0bf3577446d2",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +37,41 @@    defaultParameters: {\n        [_: string]: string | number;\n    };\n}\n"
  },
  {
    "id" : "f0e36655-d14c-4423-8a7c-a41b8d9b6af2",
    "prId" : 48210,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/48210#pullrequestreview-497050812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ec9c6e0-c91d-4fd2-87a7-34a39fc28943",
        "parentId" : null,
        "authorId" : "3cfc9916-f953-463c-8676-038f29d1099a",
        "body" : "@bakerkretzmar Taking a slightly different approach here, I noticed that we can be a little more specific about param data that has already been normalized. \r\n\r\nIn all cases, it seems that param values must be something that `encodeURIComponent` can accept. In the Typescript world, that is the `EncodeURIParamType`. \r\n\r\nNotice that `object` types are not allowed (and in fact aren't supported by encodeURIComponent). But also, `array` types are not allowed even though they are technically supported by the encodeURIComponent implementation (at least in Chrome). \r\n\r\nAccording to [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) really only `string` should be allowed, but other types seem to work. I trust the official Typescript definition.",
        "createdAt" : "2020-09-26T19:07:11Z",
        "updatedAt" : "2020-09-27T04:44:39Z",
        "lastEditedBy" : "3cfc9916-f953-463c-8676-038f29d1099a",
        "tags" : [
        ]
      },
      {
        "id" : "84f32b4a-a58c-4249-9d73-593e7becc538",
        "parentId" : "3ec9c6e0-c91d-4fd2-87a7-34a39fc28943",
        "authorId" : "6c65b7d2-dd62-4eab-9c04-1f124d6fe9e4",
        "body" : "Ziggy processes the params internally and will only pass integers and strings to `encodeURIComponent()`, so it is actually valid to pass an array of mixed integers, strings, and objects, or an object containing string keys and object values.\r\n\r\nI know that's extremely lenient and hard to type-check, but that's how Ziggy works üòÇ \r\n\r\nAll of the following are allowed as `params` to the `route()` function:\r\n\r\n```js\r\n1\r\n'foo'\r\n[1]\r\n[1, 2]\r\n['foo', 3]\r\n{ city: 'Toronto', user: 'Jacob' }\r\n{ city: 'Toronto', user: { id: 12, name: 'Jacob' } }\r\n{ id: 1, name: 'Jacob' }\r\n[{ id: 1, name: 'Jacob' }]\r\n[{ id: 1, name: 'Jacob' }, 'foo']\r\n[{ id: 1, name: 'Jacob' }, { id: 2, name: 'Ben' }]\r\n[{ id: 3, name: 'Jacob', details: [/* literally anything is allowed here, it all gets thrown away */] }]\r\n```",
        "createdAt" : "2020-09-26T23:42:00Z",
        "updatedAt" : "2020-09-27T04:44:39Z",
        "lastEditedBy" : "6c65b7d2-dd62-4eab-9c04-1f124d6fe9e4",
        "tags" : [
        ]
      },
      {
        "id" : "55eaac89-1969-4f67-88cc-20f1fb921efa",
        "parentId" : "3ec9c6e0-c91d-4fd2-87a7-34a39fc28943",
        "authorId" : "3cfc9916-f953-463c-8676-038f29d1099a",
        "body" : "I think we have this dialed in this time üëç   It will require the `id` key if it is a param value and will allow any key name if it is a param object. Plus it will allow strings/numbers/arrays thereof. ",
        "createdAt" : "2020-09-27T04:45:54Z",
        "updatedAt" : "2020-09-27T04:45:55Z",
        "lastEditedBy" : "3cfc9916-f953-463c-8676-038f29d1099a",
        "tags" : [
        ]
      }
    ],
    "commit" : "661a44c62acb6416f7fbfdc75faf0bf3577446d2",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +20,24 @@\nexport type InputParams = NormalizedParams | InputValue;\n\nexport interface Route {\n    uri: string;"
  }
]