[
  {
    "id" : "175c5594-f297-4c65-9425-37977fe7af80",
    "prId" : 51586,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/51586#pullrequestreview-605724087",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff3a76e7-673a-4185-94fa-2256975fbef4",
        "parentId" : null,
        "authorId" : "7ca27347-6993-4bd5-8542-b95fbf0bd85b",
        "body" : "Here and elsewhere, I've made certain properties readonly because the library defines them as such:\r\n```javascript\r\nObject.defineProperty(obj.prototype, \"key\", {\r\n  get: function() {\r\n    // return some value\r\n  },\r\n  enumerable: true\r\n})\r\n```\r\nMy understanding is that attempting to set these properties like below will have no effect:\r\n```javascript\r\nconst myObj = new obj();\r\nconst initial = myObj.key; // for argument's sake, pretend this is a number\r\nmyObj.key = \"abc\";\r\nmyObj.key === initial // will be true because the property is unchanged\r\n```\r\nIs this understanding correct, and is it safe to mark properties defined in this way as readonly?",
        "createdAt" : "2021-03-06T03:41:39Z",
        "updatedAt" : "2021-03-06T03:41:39Z",
        "lastEditedBy" : "7ca27347-6993-4bd5-8542-b95fbf0bd85b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed5ba52a52d17ee325f8fc91ac0565447aab1852",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +11,15 @@\n        /** A sorted array of all keys in the tree. */\n        readonly keys: K[];\n\n        /** An array of all values in the tree, sorted by key. */"
  },
  {
    "id" : "64b9e024-4e2f-4b92-b248-31e1c89be281",
    "prId" : 51586,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/51586#pullrequestreview-605725342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50ecc1dc-7714-47d4-95cd-2cdd6a741dc2",
        "parentId" : null,
        "authorId" : "7ca27347-6993-4bd5-8542-b95fbf0bd85b",
        "body" : "tslint gave the following error for this signiture:\r\n`ERROR: 42:58  unified-signatures  These overloads can be combined into one signature with an optional parameter.`\r\nFrom my understanding, it's recommending combining these overloads into somthing like this:\r\n```typescript\r\n <T>(visitor: (key: K, value: V) => T, lo?: K, hi?: K): T;\r\n```\r\nHowever, I belive this is unsafe/not representative of the implementation, which is as follows:\r\n```javascript\r\nproto.forEach = function rbTreeForEach(visit, lo, hi) {\r\n  if(!this.root) {\r\n    return\r\n  }\r\n  switch(arguments.length) {\r\n    case 1:\r\n      return doVisitFull(visit, this.root)\r\n    break\r\n\r\n    case 2:\r\n      return doVisitHalf(lo, this._compare, visit, this.root)\r\n    break\r\n\r\n    case 3:\r\n      if(this._compare(lo, hi) >= 0) {\r\n        return\r\n      }\r\n      return doVisit(lo, hi, this._compare, visit, this.root)\r\n    break\r\n  }\r\n}\r\n```\r\nTo me, because the function uses `arguments.length`, it looks like it can take:\r\n\r\n- Just a visitor\r\n- A visitor and a lower bound of type `K`\r\n- A visitor, lower bound of type `K`, and a upper bound of type `K`\r\n\r\nThe combined signiture (with it's two optional parameters) however, allows the following:\r\n```javascript\r\ntree.forEach(\r\n  // visitor:\r\n  () => {}, // ok\r\n  // lo:\r\n  undefined, // potentially unexpected/unsafe\r\n  // hi:\r\n  5 // ok (assuming the type \"K\" is \"number\")\r\n)\r\n```\r\n\r\nIs it acceptable to disable the lint rule for this line, or is there a combined signiture that correctly matches the implementation that I'm missing?",
        "createdAt" : "2021-03-06T04:03:05Z",
        "updatedAt" : "2021-03-06T04:03:05Z",
        "lastEditedBy" : "7ca27347-6993-4bd5-8542-b95fbf0bd85b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed5ba52a52d17ee325f8fc91ac0565447aab1852",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +39,43 @@        forEach: {\n            <T>(visitor: (key: K, value: V) => T): T;\n            // tslint:disable-next-line:unified-signatures\n            <T>(visitor: (key: K, value: V) => T, lo: K, hi?: K): T;\n        };"
  }
]