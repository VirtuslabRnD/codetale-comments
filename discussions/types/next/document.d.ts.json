[
  {
    "id" : "33bfb449-8eda-4fa8-a6f8-a9617a91680f",
    "prId" : 25540,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/25540#pullrequestreview-119785061",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f975583d-4979-4ae2-b517-95eef97dbfd2",
        "parentId" : null,
        "authorId" : "420654f1-4d73-4f09-9fa2-89cf822a64b5",
        "body" : "`page` should be `ComponentType<any>` instead of `Component` otherwise you get \"JSX element type 'â€¦' does not have any construct or call signatures\". In other words, as it is now, page is an _instance of_ Component which is not a valid JSX element.",
        "createdAt" : "2018-05-14T11:03:45Z",
        "updatedAt" : "2018-05-14T11:03:45Z",
        "lastEditedBy" : "420654f1-4d73-4f09-9fa2-89cf822a64b5",
        "tags" : [
        ]
      },
      {
        "id" : "4d736a9a-9870-4c16-921a-c28e93ec615d",
        "parentId" : "f975583d-4979-4ae2-b517-95eef97dbfd2",
        "authorId" : "420654f1-4d73-4f09-9fa2-89cf822a64b5",
        "body" : "```js\r\n    const sheet = new ServerStyleSheet();\r\n    const page = renderPage(App => (props: {}) =>\r\n      sheet.collectStyles(<App {...props} />)\r\n      //                   ^^^ I get the error here\r\n    );\r\n```\r\nServerStyleSheet comes from styled-components which I've adapted from [this example](https://github.com/zeit/next.js/blob/canary/examples/with-styled-components/pages/_document.js#L7)",
        "createdAt" : "2018-05-14T11:05:40Z",
        "updatedAt" : "2018-05-14T11:05:40Z",
        "lastEditedBy" : "420654f1-4d73-4f09-9fa2-89cf822a64b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a976c4fa2a491dfd4140b079d2083f984a9d850",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +19,23 @@\n    renderPage(\n        enhancer?: (page: React.Component) => React.ComponentType<any>\n    ): {\n        html?: string;"
  },
  {
    "id" : "d4de911f-da71-4c57-81df-c441ebcd47a8",
    "prId" : 25711,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/25711#pullrequestreview-121823734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28e3fe29-0688-459c-af18-0f6885a96b6b",
        "parentId" : null,
        "authorId" : "627e0252-f99f-4c95-971d-2e3dd298c616",
        "body" : "`() => JSX.Element` is going to mean TypeScript rejects any and all props, no? I may be mistaken; the nesting functions here can be a bit hard to reason about. But it seems like `() => JSX.Element` means TypeScript will expect `cb` to be a function that takes a props-less ComponentType and returns a ComponentType with `any` props.\r\n\r\nSome changes here are going to bump up against my PR #25775 which attempts to elaborate on this `renderPage` and other `Document` logic, while correcting some bugs introduced in the merged PR that is currently producing conflicts with this one. I'd be curious your thoughts on my PR.\r\n\r\nOne of the biggest differences I would note is that there are a lot of `[key: string]: any` and `<any>` generics in this PR, which mean that without using, e.g., `as React.ComponentType<MyProps>`, there are going to be a lot of very broadly permissive types generated here without the room for developers to to be precise more precise by passing types to generics. TypeScript won't be able to infer descriptive types and reject, e.g., improperly-passed Props.",
        "createdAt" : "2018-05-21T14:24:34Z",
        "updatedAt" : "2018-06-12T06:50:36Z",
        "lastEditedBy" : "627e0252-f99f-4c95-971d-2e3dd298c616",
        "tags" : [
        ]
      },
      {
        "id" : "89b260a6-bfd7-4848-a56c-ea25298ec781",
        "parentId" : "28e3fe29-0688-459c-af18-0f6885a96b6b",
        "authorId" : "f98192d4-bec4-47ab-b563-54b357fff330",
        "body" : "@bensaufley Yes, it'll assume a prop-less stateless component. I'm also referencing the styled-components example like in your PR, and it seems going for the `ComponentType` + generics method will be the better option here.\r\n\r\nI appreciate your work attempting to improve a lot of the typings, though! Haven't played around with generics + object types to be confident in putting them on this PR. Some enhancements to the currently `any`-ed object keys would be appreciated as well (e.g. `router` key in the `App` component context, which I assume comes from `SingletonRouter`)\r\n\r\nWould definitely resolve the conflicts once your PR is merged to sync up with your improvements. ",
        "createdAt" : "2018-05-21T14:38:32Z",
        "updatedAt" : "2018-06-12T06:50:36Z",
        "lastEditedBy" : "f98192d4-bec4-47ab-b563-54b357fff330",
        "tags" : [
        ]
      },
      {
        "id" : "fb565d8a-450f-440b-89dc-322ba6e969f5",
        "parentId" : "28e3fe29-0688-459c-af18-0f6885a96b6b",
        "authorId" : "f98192d4-bec4-47ab-b563-54b357fff330",
        "body" : "One question though, is `renderPage` also used in `App`?",
        "createdAt" : "2018-05-21T14:45:09Z",
        "updatedAt" : "2018-06-12T06:50:36Z",
        "lastEditedBy" : "f98192d4-bec4-47ab-b563-54b357fff330",
        "tags" : [
        ]
      }
    ],
    "commit" : "512782a734254850dc31005b359cdf3f5239aa75",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +20,24 @@    /** A callback that executes the actual React rendering logic (synchronously) */\n    renderPage(\n        cb?: (enhancer: () => JSX.Element) => React.ComponentType<any>\n    ): {\n        [key: string]: any"
  }
]