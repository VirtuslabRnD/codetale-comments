[
  {
    "id" : "fc5eaa75-4f99-42f8-a915-81987a7c4dd3",
    "prId" : 50944,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50944#pullrequestreview-583478322",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a00c5fd-2585-419f-a9b6-93f352f72e07",
        "parentId" : null,
        "authorId" : "5047176f-3e47-4b40-abd1-aef58c7b70f9",
        "body" : "Should be `run(fn: (context?: Context) => void): Context`?",
        "createdAt" : "2021-02-04T09:10:00Z",
        "updatedAt" : "2021-02-04T09:10:00Z",
        "lastEditedBy" : "5047176f-3e47-4b40-abd1-aef58c7b70f9",
        "tags" : [
        ]
      },
      {
        "id" : "09b60723-3fd2-432b-ad59-76de61984982",
        "parentId" : "4a00c5fd-2585-419f-a9b6-93f352f72e07",
        "authorId" : "5047176f-3e47-4b40-abd1-aef58c7b70f9",
        "body" : "I'm not very sure about it. Could you add the example code from https://github.com/Jeff-Lewis/cls-hooked/blob/master/README.md into test case?",
        "createdAt" : "2021-02-04T09:17:35Z",
        "updatedAt" : "2021-02-04T09:17:36Z",
        "lastEditedBy" : "5047176f-3e47-4b40-abd1-aef58c7b70f9",
        "tags" : [
        ]
      },
      {
        "id" : "43094ab4-7f4b-4ef7-99b2-7d504a3c781a",
        "parentId" : "4a00c5fd-2585-419f-a9b6-93f352f72e07",
        "authorId" : "d79bad48-ea42-4e99-a519-bd4ea37e7244",
        "body" : "The documentation says _\"The new context is passed as an argument to the callback when it's called.\"_ and the code backs it up.\r\n\r\nWe can declare `context` as optional or we can let it as it is now. The actual handler is not required to have it in its arguments list; it can be a function without arguments in both cases:\r\n\r\n```typescript\r\nconst session = cls.createNamespace('my session');\r\nconst user = { id: 'foo' };\r\nsession.run(() => {\r\n    session.set('user', user);\r\n    session.run((context: cls.Context) => {\r\n        console.log(`[With context] Find user using session.get(): ${session.get('user')}`);\r\n        console.log(`[With context] Get user directly from the context received as argument: ${(<any>context).user}`);\r\n    });\r\n    session.run(() => {\r\n        // The context is ignored by this handler; its content can still be accessed by using `session.get()`\r\n        console.log(`[No context] Find user using session.get(): ${session.get('user')}`);\r\n    });\r\n});\r\n```\r\n\r\nI tested the code above. TypeScript does not complain.\r\n\r\nDo you think it is better to mark it as optional in the declaration?",
        "createdAt" : "2021-02-04T10:27:34Z",
        "updatedAt" : "2021-02-04T10:27:34Z",
        "lastEditedBy" : "d79bad48-ea42-4e99-a519-bd4ea37e7244",
        "tags" : [
        ]
      },
      {
        "id" : "ea11ec0e-b2db-41ad-9b41-3702c9e32c5a",
        "parentId" : "4a00c5fd-2585-419f-a9b6-93f352f72e07",
        "authorId" : "5047176f-3e47-4b40-abd1-aef58c7b70f9",
        "body" : "If you have verified that tsc doesn't complain, then it's ok.",
        "createdAt" : "2021-02-04T14:56:14Z",
        "updatedAt" : "2021-02-04T14:56:14Z",
        "lastEditedBy" : "5047176f-3e47-4b40-abd1-aef58c7b70f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "338a48521ec1e509de73483ea3229b7c8628b7ce",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +17,21 @@    run(fn: (context: Context) => void): Context;\n    runAndReturn<T>(fn: (context: Context) => T): T;\n    runPromise<T>(fn: (context: Context) => Promise<T>): Promise<T>;\n    bind<F extends Function>(fn: F, context?: Context): F; // tslint:disable-line: ban-types\n    bindEmitter(emitter: EventEmitter): void;"
  }
]