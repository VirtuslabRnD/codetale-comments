[
  {
    "id" : "8214e63f-3ae7-470b-9618-6e77334f3080",
    "prId" : 21441,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21441#pullrequestreview-77025598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a782ac4d-adf8-4449-a28d-5625d1772eb1",
        "parentId" : null,
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "You shouldn't need to use the `declare module` syntax here, you can just unwrap all of this and write something like\r\n\r\n```ts\r\nconst enigmaJS: IEnigmaClass;\r\nexport = enigmaJS;\r\nexport as namespace enigmaJS;\r\n```",
        "createdAt" : "2017-11-11T23:44:48Z",
        "updatedAt" : "2017-11-16T08:34:28Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "4bf6c9a3-9b08-49af-a559-c5c5e712610a",
        "parentId" : "a782ac4d-adf8-4449-a28d-5625d1772eb1",
        "authorId" : "d36c79ea-c36a-4648-aec7-d56f21ea2d21",
        "body" : "@DanielRosenwasser thx, I already tried that, but if I do that I can not use the definied interfaces in enigmaJS namespace in my normal sourcecode that have imported that type file.",
        "createdAt" : "2017-11-12T19:25:31Z",
        "updatedAt" : "2017-11-16T08:34:28Z",
        "lastEditedBy" : "d36c79ea-c36a-4648-aec7-d56f21ea2d21",
        "tags" : [
        ]
      },
      {
        "id" : "575671c7-f21c-459f-90ec-c8a95b1349ad",
        "parentId" : "a782ac4d-adf8-4449-a28d-5625d1772eb1",
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "For `export = e` syntax you need to import it with `import enigma = require('enigma.js')`. If you do this, does @DanielRosenwasser's suggestion work? (Note that his name suggestion of `enigmaJS: IEnigmaClass` will merge with the namespace `declare namespace enigmaJS`, so I would keep the name `e: IEnigmaJSClass`.)",
        "createdAt" : "2017-11-15T17:22:24Z",
        "updatedAt" : "2017-11-16T08:34:28Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      },
      {
        "id" : "e8be1123-3f12-43a6-a9e8-ea2a8ee113c6",
        "parentId" : "a782ac4d-adf8-4449-a28d-5625d1772eb1",
        "authorId" : "d36c79ea-c36a-4648-aec7-d56f21ea2d21",
        "body" : "@sandersn thx for the explanation. I tried this, but if I change the tsconfig to (amd / umd) with the syntax import `enigma = require('enigma.js')` it complains that is say module enigma.js not found. This is only working with commonjs, and I have corrected this in the tsconfig.",
        "createdAt" : "2017-11-16T07:16:30Z",
        "updatedAt" : "2017-11-16T08:34:28Z",
        "lastEditedBy" : "d36c79ea-c36a-4648-aec7-d56f21ea2d21",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a0ff2107446c2a8ad8dbae16d8d06440b91886a",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +5,9 @@// TypeScript Version: 2.2\n\ndeclare module \"enigma.js\" {\n    const e: IEnigmaClass;\n    export = e;"
  },
  {
    "id" : "fbdba369-68d0-4bdf-b974-7a231f7184a0",
    "prId" : 21441,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21441#pullrequestreview-77025696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a3208b1-b729-4e2d-b177-8ce6b21befe5",
        "parentId" : null,
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "To be pedantic, this probably doesn't need to be generic; a cast to `Promise<WhateverTypeYouNeed>` could achieve the same thing.",
        "createdAt" : "2017-11-11T23:46:22Z",
        "updatedAt" : "2017-11-16T08:34:28Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "bf74b768-00c0-4ca4-9d7d-bb3e8aba47ef",
        "parentId" : "0a3208b1-b729-4e2d-b177-8ce6b21befe5",
        "authorId" : "d36c79ea-c36a-4648-aec7-d56f21ea2d21",
        "body" : "@DanielRosenwasser thx, this is not pedantic. I do that because the most users will use that together with types/qlik-engineapi and this exports for example IGlobal that extends IGenericAPI, so that if they use the generic open, they don't have to \"as\" the result.",
        "createdAt" : "2017-11-12T19:29:35Z",
        "updatedAt" : "2017-11-16T08:34:28Z",
        "lastEditedBy" : "d36c79ea-c36a-4648-aec7-d56f21ea2d21",
        "tags" : [
        ]
      },
      {
        "id" : "a01c8da7-4fbb-4e4a-a63c-ff068c25b80f",
        "parentId" : "0a3208b1-b729-4e2d-b177-8ce6b21befe5",
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "I think @DanielRosenwasser's point is that the user has to explicitly write either `open<IGlobal>()` or `open() as Promise<IGlobal>`. There is no way for the compiler to infer the desired type, so both are equivalent to a cast. That means the first is preferable to reduce confusion among people who are used to C# (or any system with non-erased generics) where `open<IGlobal>()` *is* safer than the cast.\r\n\r\nThis is quite a minor point, though, so there's no reason to hold the merge for it.",
        "createdAt" : "2017-11-15T17:17:34Z",
        "updatedAt" : "2017-11-16T08:34:28Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      },
      {
        "id" : "052631c3-673a-4663-b7b1-c9c3186e3f57",
        "parentId" : "0a3208b1-b729-4e2d-b177-8ce6b21befe5",
        "authorId" : "d36c79ea-c36a-4648-aec7-d56f21ea2d21",
        "body" : "@sandersn Thanks, now I got the point and removed the open() declaration.",
        "createdAt" : "2017-11-16T07:17:07Z",
        "updatedAt" : "2017-11-16T08:34:28Z",
        "lastEditedBy" : "d36c79ea-c36a-4648-aec7-d56f21ea2d21",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a0ff2107446c2a8ad8dbae16d8d06440b91886a",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +103,107 @@         * @return Promise.\n         */\n        open<T extends IGeneratedAPI>(): Promise<T>;\n\n        /**"
  }
]