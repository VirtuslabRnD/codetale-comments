[
  {
    "id" : "f70c9e22-8a00-4d20-87f4-b8d4e230e7ad",
    "prId" : 16359,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/16359#pullrequestreview-36628435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03e24851-c1d4-481c-921b-fc0d53786728",
        "parentId" : null,
        "authorId" : "c701fbef-e0f2-4be6-9abb-4ba16fd9f2aa",
        "body" : "I think this might work better if this is `static reject<R>(reason?: R): Promise<any, R>` ‚Äì is there a reason I'm missing not to do that? (There very well might be; that's a genuine question.)",
        "createdAt" : "2017-05-05T21:55:35Z",
        "updatedAt" : "2017-05-05T21:55:35Z",
        "lastEditedBy" : "c701fbef-e0f2-4be6-9abb-4ba16fd9f2aa",
        "tags" : [
        ]
      },
      {
        "id" : "8af58577-e547-4bb2-93d8-510ce971f646",
        "parentId" : "03e24851-c1d4-481c-921b-fc0d53786728",
        "authorId" : "c701fbef-e0f2-4be6-9abb-4ba16fd9f2aa",
        "body" : "For any future readers: the reason is to match the underlying RSVP types, [here](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/rsvp/index.d.ts#L172).",
        "createdAt" : "2017-05-05T23:35:20Z",
        "updatedAt" : "2017-05-05T23:35:20Z",
        "lastEditedBy" : "c701fbef-e0f2-4be6-9abb-4ba16fd9f2aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "a58d77ea7afebc14b28311b5984e3d4591fc0704",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +1600,1604 @@             `RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\n             */\n            static reject(reason?: any): Promise<any, any>;\n        }\n"
  },
  {
    "id" : "7d47de49-d057-414c-9aab-21eb4aa9f686",
    "prId" : 20827,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20827#pullrequestreview-71205390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62689c8c-9084-4650-bc8e-5bb99d27a77a",
        "parentId" : null,
        "authorId" : "c701fbef-e0f2-4be6-9abb-4ba16fd9f2aa",
        "body" : "I assume `undefined` is removed here as redundant given the `obj?`?",
        "createdAt" : "2017-10-22T20:00:05Z",
        "updatedAt" : "2017-10-22T20:00:05Z",
        "lastEditedBy" : "c701fbef-e0f2-4be6-9abb-4ba16fd9f2aa",
        "tags" : [
        ]
      },
      {
        "id" : "9c63eaf7-a313-4826-96ac-ed6ccec03711",
        "parentId" : "62689c8c-9084-4650-bc8e-5bb99d27a77a",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "Yep, you can pass `undefined` already.",
        "createdAt" : "2017-10-23T14:35:25Z",
        "updatedAt" : "2017-10-23T14:35:25Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a69d3127cae2bd2fc461a5c65316f71f4c4011a",
    "line" : 197,
    "diffHunk" : "@@ -1,1 +3223,3227 @@         * an array. If obj is `null` or `undefined`, it will return an empty array.\n         */\n        function makeArray<T>(obj?: T[] | T | null): T[];\n        /**\n         * Framework objects in an Ember application (components, services, routes, etc.)"
  },
  {
    "id" : "e4c6eae5-6f9a-4cc5-827e-96b88a13d958",
    "prId" : 21633,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21633#pullrequestreview-77651301",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44af821e-49f0-4e10-9218-94499870f669",
        "parentId" : null,
        "authorId" : "0829eecb-8f43-4bd4-8a3d-ba4f590afaf2",
        "body" : "why is this necessary?",
        "createdAt" : "2017-11-19T18:40:22Z",
        "updatedAt" : "2017-11-19T18:40:22Z",
        "lastEditedBy" : "0829eecb-8f43-4bd4-8a3d-ba4f590afaf2",
        "tags" : [
        ]
      },
      {
        "id" : "ff89c2b4-f79a-4c26-ac05-43cc95d91adc",
        "parentId" : "44af821e-49f0-4e10-9218-94499870f669",
        "authorId" : "a7e97654-e5c3-4ed8-9b8a-c2ca9d2464fe",
        "body" : "@bttf The type parameter makes no sense here, and `any | Rsvp.Promise<any>` is equivalent to just `any`. See typed-ember/ember-typings#61",
        "createdAt" : "2017-11-19T18:50:06Z",
        "updatedAt" : "2017-11-19T18:50:07Z",
        "lastEditedBy" : "a7e97654-e5c3-4ed8-9b8a-c2ca9d2464fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "d17a9bb82368c403b5f456014dd4a16d3b259ee7",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1840,1844 @@             * this route.\n             */\n            model(params: {}, transition: Transition): any;\n\n            /**"
  },
  {
    "id" : "2bf14d45-cce7-4d88-9c59-3cb419f6483b",
    "prId" : 23130,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23130#pullrequestreview-90953437",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d269675a-dd07-4452-a35b-5fc3995c2712",
        "parentId" : null,
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "This used to return `NativeArray`, but only in one overload, was that just wrong?",
        "createdAt" : "2018-01-23T19:16:14Z",
        "updatedAt" : "2018-01-23T19:16:24Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "5fdb2d31-0f93-46ae-8c87-7d345ccaf656",
        "parentId" : "d269675a-dd07-4452-a35b-5fc3995c2712",
        "authorId" : "a7e97654-e5c3-4ed8-9b8a-c2ca9d2464fe",
        "body" : "`NativeArray<T>` (which extends `T[]`) would be more correct but I'm not sure we can use mapped types to convert the return type.",
        "createdAt" : "2018-01-23T19:32:45Z",
        "updatedAt" : "2018-01-23T19:32:45Z",
        "lastEditedBy" : "a7e97654-e5c3-4ed8-9b8a-c2ca9d2464fe",
        "tags" : [
        ]
      },
      {
        "id" : "269a4954-7c74-470d-9321-90b3472e57dd",
        "parentId" : "d269675a-dd07-4452-a35b-5fc3995c2712",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "You can't without Microsoft/TypeScript#6606",
        "createdAt" : "2018-01-23T19:35:25Z",
        "updatedAt" : "2018-01-23T19:35:25Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      }
    ],
    "commit" : "7813d428897f742931414681ab2b3fa569329ec7",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1139,1143 @@             * JavaScript 1.6.\n             */\n            filter: GlobalArray<T>['filter'];\n            /**\n             * Returns an array with all of the items in the enumeration where the passed"
  },
  {
    "id" : "1deac925-3703-44f2-88bc-14237162f57f",
    "prId" : 23827,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23827#pullrequestreview-99461323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27b77f09-4a0f-4ac7-bad0-9ef911d7bf1d",
        "parentId" : null,
        "authorId" : "a7e97654-e5c3-4ed8-9b8a-c2ca9d2464fe",
        "body" : "Is the second argument here also optional?",
        "createdAt" : "2018-02-26T20:48:08Z",
        "updatedAt" : "2018-02-26T20:48:18Z",
        "lastEditedBy" : "a7e97654-e5c3-4ed8-9b8a-c2ca9d2464fe",
        "tags" : [
        ]
      },
      {
        "id" : "ceb7b6ff-0d3f-4fb3-bbf8-d87bf3e2cf0e",
        "parentId" : "27b77f09-4a0f-4ac7-bad0-9ef911d7bf1d",
        "authorId" : "a7e97654-e5c3-4ed8-9b8a-c2ca9d2464fe",
        "body" : "Yes... yes it is https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23772",
        "createdAt" : "2018-02-26T20:49:08Z",
        "updatedAt" : "2018-02-26T20:49:08Z",
        "lastEditedBy" : "a7e97654-e5c3-4ed8-9b8a-c2ca9d2464fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c8b6dd2280e0ff53aeb53e702a2a2f91fb05a11",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1183,1187 @@             * than using a callback.\n             */\n            isEvery(key: string, value: any): boolean;\n            /**\n             * Returns `true` if the passed function returns true for any item in the"
  },
  {
    "id" : "c392653e-b5d9-4adc-82dc-2136005d6cc5",
    "prId" : 24524,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24524#pullrequestreview-106759578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4af739e5-a6ad-4328-8c1f-b8fc4682f954",
        "parentId" : null,
        "authorId" : "50955754-13d4-4943-9a4a-48a01c76b683",
        "body" : "üòç ",
        "createdAt" : "2018-03-26T02:36:29Z",
        "updatedAt" : "2018-03-26T02:38:37Z",
        "lastEditedBy" : "50955754-13d4-4943-9a4a-48a01c76b683",
        "tags" : [
        ]
      }
    ],
    "commit" : "6983d94a0e080404939e4803cef68ccd5b116425",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +3536,3540 @@declare module '@ember/object/computed' {\n    import Ember from 'ember';\n    export default class ComputedProperty<Get, Set = Get> extends Ember.ComputedProperty<Get, Set> { }\n    export const alias: typeof Ember.computed.alias;\n    export const and: typeof Ember.computed.and;"
  },
  {
    "id" : "d43da058-af59-4166-9890-f3f281a9ee11",
    "prId" : 24524,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24524#pullrequestreview-106760700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "019e2b50-e4c0-4995-ba95-880ffc3f7a95",
        "parentId" : null,
        "authorId" : "c701fbef-e0f2-4be6-9abb-4ba16fd9f2aa",
        "body" : "This is really clever.\r\n\r\nAlso: üò≠ ",
        "createdAt" : "2018-03-26T02:48:32Z",
        "updatedAt" : "2018-03-26T02:51:45Z",
        "lastEditedBy" : "c701fbef-e0f2-4be6-9abb-4ba16fd9f2aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "6983d94a0e080404939e4803cef68ccd5b116425",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +29,33 @@     * Deconstructs computed properties into the types which would be returned by `.get()`.\n     */\n    type ComputedPropertyGetters<T> = { [K in keyof T]: Ember.ComputedProperty<T[K], any> | ModuleComputed<T[K], any> | T[K] };\n    type ComputedPropertySetters<T> = { [K in keyof T]: Ember.ComputedProperty<any, T[K]> | ModuleComputed<any, T[K]> | T[K] };\n"
  }
]