[
  {
    "id" : "03adfbdc-8473-4d90-b12c-be7520731078",
    "prId" : 20253,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20253#pullrequestreview-66925430",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74409031-9df6-41d9-b808-d1a0802159c0",
        "parentId" : null,
        "authorId" : "923387d2-09bc-4eab-80ed-ff947c8d7865",
        "body" : "Indentation looks off here.",
        "createdAt" : "2017-10-03T19:25:23Z",
        "updatedAt" : "2017-10-03T19:29:21Z",
        "lastEditedBy" : "923387d2-09bc-4eab-80ed-ff947c8d7865",
        "tags" : [
        ]
      },
      {
        "id" : "723a4381-11e9-459f-917b-9da25a119b61",
        "parentId" : "74409031-9df6-41d9-b808-d1a0802159c0",
        "authorId" : "1b0866cc-5827-4c94-a6ff-2e1af1c22614",
        "body" : "Oh, sorry I let this one slip. Thanks.",
        "createdAt" : "2017-10-03T23:13:52Z",
        "updatedAt" : "2017-10-03T23:13:53Z",
        "lastEditedBy" : "1b0866cc-5827-4c94-a6ff-2e1af1c22614",
        "tags" : [
        ]
      }
    ],
    "commit" : "a204a9cb02b5b054f9f870cbe51090292ec4445c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3627,3631 @@    toArray(): number[];\n\t\n\t/**\n     * Multiplies this matrix by m.\n     */"
  },
  {
    "id" : "718ba617-a5fb-4690-beb8-f6f8a4b23451",
    "prId" : 24819,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24819#pullrequestreview-110313271",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fb3819a-d38d-447c-bc09-c8e6133b4d21",
        "parentId" : null,
        "authorId" : "19a84347-2032-42f5-8503-c93fc2b9d9f0",
        "body" : "Was this meant to be part of the PR? It might be better to add it in a separate PR",
        "createdAt" : "2018-04-08T21:31:51Z",
        "updatedAt" : "2018-04-08T21:32:56Z",
        "lastEditedBy" : "19a84347-2032-42f5-8503-c93fc2b9d9f0",
        "tags" : [
        ]
      },
      {
        "id" : "e8a28a92-0ba6-462d-95b6-96323d385756",
        "parentId" : "5fb3819a-d38d-447c-bc09-c8e6133b4d21",
        "authorId" : "923387d2-09bc-4eab-80ed-ff947c8d7865",
        "body" : "Also note that the indentation is off here.",
        "createdAt" : "2018-04-09T02:04:37Z",
        "updatedAt" : "2018-04-09T02:04:38Z",
        "lastEditedBy" : "923387d2-09bc-4eab-80ed-ff947c8d7865",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d7ba0ae3d812f6fe6fb5061a7cffaef64c0ac46",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +5111,5115 @@    morphTargetInfluences?: number[];\n    morphTargetDictionary?: { [key: string]: number; };\n\tisMesh: boolean;\n\n    setDrawMode(drawMode: TrianglesDrawModes): void;"
  },
  {
    "id" : "1a987184-55c2-4617-9e64-28a1e3a94992",
    "prId" : 26772,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26772#pullrequestreview-133648270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1fa39de-5c1d-451c-b1c2-aab273a05da5",
        "parentId" : null,
        "authorId" : "8bd92f61-c4fd-45f1-9f67-3c9a0d936b8c",
        "body" : "I may have been a little fast on this part too. \r\n\r\nHaving more precise types should be an improvement (for instance a PointsMaterial is not supposed to be passed as a material for a Mesh). But this change creates a new intermediate type for a very basic use, though this type is not documented and neither exported. So during development, if a wrong material is passed in, or a wrong type casted, VSCode complains that the `MeshMaterial` type is not respected, which is surprising.\r\n\r\nWhat do you think a nice solution can be ?",
        "createdAt" : "2018-07-02T14:27:24Z",
        "updatedAt" : "2018-07-02T14:31:21Z",
        "lastEditedBy" : "8bd92f61-c4fd-45f1-9f67-3c9a0d936b8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "981b19dcd0b25d1ce5a321a65122652e864f01e5",
    "line" : 360,
    "diffHunk" : "@@ -1,1 +5234,5238 @@}\n\ntype MeshMaterial = MeshBasicMaterial | MeshLambertMaterial | MeshPhongMaterial | MeshDepthMaterial | MeshStandardMaterial | MeshPhysicalMaterial | MeshNormalMaterial | MeshFaceMaterial | ShaderMaterial;\n\nexport class Mesh extends Object3D {"
  },
  {
    "id" : "fc494efd-6da4-4aaa-98e8-0ba75db01670",
    "prId" : 27413,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/27413#pullrequestreview-138832399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08d38d67-317e-4e5f-b0cf-d0e24386f381",
        "parentId" : null,
        "authorId" : "19a84347-2032-42f5-8503-c93fc2b9d9f0",
        "body" : "Wondering if the union types i.e. `LineMaterialType` need to be `export`ed",
        "createdAt" : "2018-07-19T14:25:52Z",
        "updatedAt" : "2018-07-19T14:26:15Z",
        "lastEditedBy" : "19a84347-2032-42f5-8503-c93fc2b9d9f0",
        "tags" : [
        ]
      },
      {
        "id" : "281bae89-5cb9-46d4-af25-a478f2ba82aa",
        "parentId" : "08d38d67-317e-4e5f-b0cf-d0e24386f381",
        "authorId" : "8bd92f61-c4fd-45f1-9f67-3c9a0d936b8c",
        "body" : "Can be handy ? If someone extends the Mesh/Line/Points classes, these types would benefit being exposed.",
        "createdAt" : "2018-07-19T20:12:37Z",
        "updatedAt" : "2018-07-19T20:12:49Z",
        "lastEditedBy" : "8bd92f61-c4fd-45f1-9f67-3c9a0d936b8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "388a383ae8810b77d9628429d0be47614c543a76",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +5210,5214 @@ * // - can [[Line]] take in an array of materials ?\n */\nexport type LineMaterialType = LineBasicMaterial | ShaderMaterial | MeshDepthMaterial;\n\nexport class Line extends Object3D {"
  },
  {
    "id" : "c944dec3-526f-4f40-b0ec-7148be593a9f",
    "prId" : 27413,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/27413#pullrequestreview-162260862",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80f8c292-ee94-4d87-9693-8e47d371d71c",
        "parentId" : null,
        "authorId" : "6d447f9d-4946-46c6-8162-102e21d6a2ed",
        "body" : "Why is `MeshDepthMaterial` a part of this union?",
        "createdAt" : "2018-10-05T19:47:34Z",
        "updatedAt" : "2018-10-05T19:47:44Z",
        "lastEditedBy" : "6d447f9d-4946-46c6-8162-102e21d6a2ed",
        "tags" : [
        ]
      },
      {
        "id" : "0c22ef13-6c2a-49d9-a938-0e3702a9b7ec",
        "parentId" : "80f8c292-ee94-4d87-9693-8e47d371d71c",
        "authorId" : "8bd92f61-c4fd-45f1-9f67-3c9a0d936b8c",
        "body" : "MeshDepthMaterial is applied to all the scene as an overrideMaterial in some postprocessing. I remember that I tested MeshDepthMaterial on a line and that it did render as expected. Since there is no LineDepthMaterial, this material is expected to be applied on a Line by the library. Furthering the logic, I think that I tried other materials on a Line, MeshBasicMaterial might have been working but not the others if I am correct. I still discarded MeshBasicMaterial in the type because I don't think it is even ever used as overrideMaterial in a post process effect... But there the line turns finer.",
        "createdAt" : "2018-10-05T21:15:33Z",
        "updatedAt" : "2018-10-05T21:38:01Z",
        "lastEditedBy" : "8bd92f61-c4fd-45f1-9f67-3c9a0d936b8c",
        "tags" : [
        ]
      },
      {
        "id" : "53bf9359-6a7e-4968-9aef-54de68418a0f",
        "parentId" : "80f8c292-ee94-4d87-9693-8e47d371d71c",
        "authorId" : "6d447f9d-4946-46c6-8162-102e21d6a2ed",
        "body" : "Is this only for use with `scene#overrideMaterial`? It wouldn't make sense to pass `MeshDepthMaterial` into a `Line` constructor, right? So why does the constructor allow for it?",
        "createdAt" : "2018-10-06T13:10:43Z",
        "updatedAt" : "2018-10-06T13:11:29Z",
        "lastEditedBy" : "6d447f9d-4946-46c6-8162-102e21d6a2ed",
        "tags" : [
        ]
      },
      {
        "id" : "3db6f960-22e5-4e1a-be20-7aaf60d47e99",
        "parentId" : "80f8c292-ee94-4d87-9693-8e47d371d71c",
        "authorId" : "8bd92f61-c4fd-45f1-9f67-3c9a0d936b8c",
        "body" : "I don't know. One could imagine a mask effect with lines, based on depth, and assigning the MeshDepthMaterial in the constructor would work. If the types admit so, then effects can also be imagined with MeshBasicMaterial, and I think that there is no technical issue with this material on a line. Then the other materials have the problems of using the normal attribute, missing in a Line geometry. So, I don't know. This is about a very special use case, and one can also use the overrideMaterial anyway. As you wish.",
        "createdAt" : "2018-10-06T15:37:59Z",
        "updatedAt" : "2018-10-06T15:37:59Z",
        "lastEditedBy" : "8bd92f61-c4fd-45f1-9f67-3c9a0d936b8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "388a383ae8810b77d9628429d0be47614c543a76",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +5210,5214 @@ * // - can [[Line]] take in an array of materials ?\n */\nexport type LineMaterialType = LineBasicMaterial | ShaderMaterial | MeshDepthMaterial;\n\nexport class Line extends Object3D {"
  },
  {
    "id" : "ca40e0b9-7da1-449b-8ecb-44683ba276f1",
    "prId" : 27413,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/27413#pullrequestreview-162210134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4431875-8999-448f-ac7d-0afd0e69641f",
        "parentId" : null,
        "authorId" : "6d447f9d-4946-46c6-8162-102e21d6a2ed",
        "body" : "`ShadowMaterial` can be removed from this union since it extends from `ShaderMaterial`, right? Also, shouldn't we be using `MultiMaterial` instead of `MeshFaceMaterial` since `MeshFaceMaterial` extends from `MultiMaterial`?",
        "createdAt" : "2018-10-05T19:51:16Z",
        "updatedAt" : "2018-10-05T19:51:17Z",
        "lastEditedBy" : "6d447f9d-4946-46c6-8162-102e21d6a2ed",
        "tags" : [
        ]
      },
      {
        "id" : "6ee172f6-8486-4052-942b-4a4cf0a0520d",
        "parentId" : "f4431875-8999-448f-ac7d-0afd0e69641f",
        "authorId" : "8bd92f61-c4fd-45f1-9f67-3c9a0d936b8c",
        "body" : "Currently in three.js, \r\n- `ShadowMaterial` directly extends `Material`.\r\n- both `MultiMaterial` and `MeshFaceMaterial` have been replaced by an array of `Material`. I kept it because @types/physijs uses it and that I was too lazy to remove it from everywhere it was still used :).",
        "createdAt" : "2018-10-05T21:29:43Z",
        "updatedAt" : "2018-10-05T21:29:43Z",
        "lastEditedBy" : "8bd92f61-c4fd-45f1-9f67-3c9a0d936b8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "388a383ae8810b77d9628429d0be47614c543a76",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +5252,5256 @@ * `MeshToonMaterial` and [[MeshPhysicalMaterial]] are omitted as they extend [[MeshPhongMaterial]] and [[MeshStandardMaterial]] respectively.\n */\nexport type MeshMaterialType = MeshBasicMaterial | MeshDepthMaterial | MeshFaceMaterial | MeshLambertMaterial | MeshNormalMaterial | MeshPhongMaterial | MeshStandardMaterial | ShaderMaterial | ShadowMaterial;\n\nexport class Mesh extends Object3D {"
  },
  {
    "id" : "d7317220-3d33-4edd-8f8b-bd5c36a08bb6",
    "prId" : 27413,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/27413#pullrequestreview-162211102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98439229-9977-4b5f-a6ae-7bc717a4f0d2",
        "parentId" : null,
        "authorId" : "6d447f9d-4946-46c6-8162-102e21d6a2ed",
        "body" : "Why is `MeshDepthMaterial` a part of this union?",
        "createdAt" : "2018-10-05T19:51:40Z",
        "updatedAt" : "2018-10-05T19:51:41Z",
        "lastEditedBy" : "6d447f9d-4946-46c6-8162-102e21d6a2ed",
        "tags" : [
        ]
      },
      {
        "id" : "44f79baf-13e6-4e92-944e-4b28af05365f",
        "parentId" : "98439229-9977-4b5f-a6ae-7bc717a4f0d2",
        "authorId" : "8bd92f61-c4fd-45f1-9f67-3c9a0d936b8c",
        "body" : "As for lines, MeshDepthMaterial is used as an overrideMaterial in the scene for postprocessing. However as opposed to the lines I don't remember what the result was. MeshDepthMaterial should not be able to render points correctly, it should be missing `gl_PointSize` in the shader, as for the other Line/Mesh materials.\r\n\r\nThis overrideMaterial situation does raise some questions that may be answered on the ThreeJS issue you opened.",
        "createdAt" : "2018-10-05T21:33:53Z",
        "updatedAt" : "2018-10-05T21:33:54Z",
        "lastEditedBy" : "8bd92f61-c4fd-45f1-9f67-3c9a0d936b8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "388a383ae8810b77d9628429d0be47614c543a76",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +5278,5282 @@ * // - can [[Points]] take in an array of materials ?\n */\nexport type PointsMaterialType = PointsMaterial | ShaderMaterial | MeshDepthMaterial;\n\n/**"
  },
  {
    "id" : "fffad459-decb-47f1-95f1-17557df34f81",
    "prId" : 27951,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/27951#pullrequestreview-144635670",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b976b3d3-2bda-4da6-8b4e-40d82f568cb2",
        "parentId" : null,
        "authorId" : "19a84347-2032-42f5-8503-c93fc2b9d9f0",
        "body" : "I don't think it's necessary to wrap the link in an anchor tag. See [\\@see documentation](http://usejsdoc.org/tags-see.html)",
        "createdAt" : "2018-08-08T00:13:06Z",
        "updatedAt" : "2018-08-08T16:00:32Z",
        "lastEditedBy" : "19a84347-2032-42f5-8503-c93fc2b9d9f0",
        "tags" : [
        ]
      },
      {
        "id" : "78222d12-bacd-4940-adf2-331ec57489e7",
        "parentId" : "b976b3d3-2bda-4da6-8b4e-40d82f568cb2",
        "authorId" : "874dfb50-6782-41a5-a461-14d28af87717",
        "body" : "Much of the rest of the three-core.d.ts classes seemed to follow the see convention (that's why I went with that at first). Any reason in particular we want to deviate in this case?",
        "createdAt" : "2018-08-08T15:52:09Z",
        "updatedAt" : "2018-08-08T16:00:32Z",
        "lastEditedBy" : "874dfb50-6782-41a5-a461-14d28af87717",
        "tags" : [
        ]
      },
      {
        "id" : "67fd8802-91fc-47d8-a34e-267715eb8769",
        "parentId" : "b976b3d3-2bda-4da6-8b4e-40d82f568cb2",
        "authorId" : "19a84347-2032-42f5-8503-c93fc2b9d9f0",
        "body" : "I could be wrong, but I suspect the other instances are incorrectly formatted. This is a minor nitpick. I'll let the maintainers decide.",
        "createdAt" : "2018-08-08T21:04:42Z",
        "updatedAt" : "2018-08-08T21:04:42Z",
        "lastEditedBy" : "19a84347-2032-42f5-8503-c93fc2b9d9f0",
        "tags" : [
        ]
      },
      {
        "id" : "1629e0d0-c519-4fbd-a3d6-76b23bdeb680",
        "parentId" : "b976b3d3-2bda-4da6-8b4e-40d82f568cb2",
        "authorId" : "874dfb50-6782-41a5-a461-14d28af87717",
        "body" : "Sounds good. Happy to change it to whatever format is best if requested.",
        "createdAt" : "2018-08-08T22:40:21Z",
        "updatedAt" : "2018-08-08T22:40:21Z",
        "lastEditedBy" : "874dfb50-6782-41a5-a461-14d28af87717",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f7cfbba8b59336a1ec4a30a8b003cc4fdeb8f3a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1449,1453 @@\n/**\n * @see <a href=\"https://github.com/mrdoob/three.js/blob/master/examples/js/BufferGeometryUtils.js\">examples/js/BufferGeometryUtils.js</a>\n */\nexport namespace BufferGeometryUtils {"
  },
  {
    "id" : "78fb6e05-510c-4611-9ade-7c54d8204a82",
    "prId" : 30153,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30153#pullrequestreview-172211882",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68c5815f-9aa2-4bdb-8c3e-de8cb5210e1a",
        "parentId" : null,
        "authorId" : "923387d2-09bc-4eab-80ed-ff947c8d7865",
        "body" : "Nitpicking: rest of file is egyptian braces.",
        "createdAt" : "2018-11-02T09:46:38Z",
        "updatedAt" : "2018-11-02T09:46:38Z",
        "lastEditedBy" : "923387d2-09bc-4eab-80ed-ff947c8d7865",
        "tags" : [
        ]
      },
      {
        "id" : "db23e107-0308-4413-92c6-8e4ab2575d33",
        "parentId" : "68c5815f-9aa2-4bdb-8c3e-de8cb5210e1a",
        "authorId" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "body" : "@FishOrBear could you please address the review comments? I can merge as soon as they are done.",
        "createdAt" : "2018-11-05T19:21:22Z",
        "updatedAt" : "2018-11-05T19:22:05Z",
        "lastEditedBy" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "tags" : [
        ]
      },
      {
        "id" : "32eccdec-a39c-4202-ad8f-7f455168b5d6",
        "parentId" : "68c5815f-9aa2-4bdb-8c3e-de8cb5210e1a",
        "authorId" : "923387d2-09bc-4eab-80ed-ff947c8d7865",
        "body" : "I think it's fine to merge but a style fix follow-up would be appreciated.",
        "createdAt" : "2018-11-06T08:30:21Z",
        "updatedAt" : "2018-11-06T08:30:21Z",
        "lastEditedBy" : "923387d2-09bc-4eab-80ed-ff947c8d7865",
        "tags" : [
        ]
      },
      {
        "id" : "43894a04-fde8-407d-a0be-372b18a7983a",
        "parentId" : "68c5815f-9aa2-4bdb-8c3e-de8cb5210e1a",
        "authorId" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "body" : "Ok, Ill merge the PR since it has been open for some time. The style can be addressed on another PR.",
        "createdAt" : "2018-11-06T20:14:06Z",
        "updatedAt" : "2018-11-06T20:14:07Z",
        "lastEditedBy" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3245c642975dfdd0ebb33e6dcb1af693e4701565",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +6690,6694 @@\ninterface Vec2\n{\n    x: number;\n    y: number;"
  }
]