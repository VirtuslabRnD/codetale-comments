[
  {
    "id" : "f3fd3f45-7541-40e5-afcf-c849dc836339",
    "prId" : 35825,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/35825#pullrequestreview-245693162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bc849ac-f0ed-4885-bdbf-3e00254f1b09",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "Nit: extra space before semicolon.",
        "createdAt" : "2019-06-04T20:45:12Z",
        "updatedAt" : "2019-06-04T20:52:19Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e2c02f451605ad3acb12078dae4ae1fbd7d307a",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +61,65 @@\n    saturated(): Promise<void>;\n    saturated(handler: () => void): void ;\n    empty(): Promise<void>;\n    empty(handler: () => void): void;"
  },
  {
    "id" : "df4a5f29-e938-4764-9027-2327bd6e89c0",
    "prId" : 38876,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/38876#pullrequestreview-302081316",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29daa589-bcc1-4938-943b-0ea24392b004",
        "parentId" : null,
        "authorId" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "body" : "Actually, it looks like\r\n```ts\r\nexport function constant<T>(...values: T[]): AsyncFunctionEx<T>;\r\n```\r\nwould be an improvement?",
        "createdAt" : "2019-10-14T23:13:53Z",
        "updatedAt" : "2019-10-14T23:13:53Z",
        "lastEditedBy" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "tags" : [
        ]
      },
      {
        "id" : "0cbdb8b8-a5ac-499c-9bbd-eeca2ed30e61",
        "parentId" : "29daa589-bcc1-4938-943b-0ea24392b004",
        "authorId" : "66bf5f80-ba60-4e8e-b14c-d134127a254e",
        "body" : "Ahh, the `Ex` suffix here put me on the right track to notice that `AsyncFunction` was being defined locally, rather than being the canonical `AsyncFunction` type:\r\n\r\n```\r\n> async () => {}\r\n[AsyncFunction]\r\n```",
        "createdAt" : "2019-10-15T09:09:12Z",
        "updatedAt" : "2019-10-15T09:09:12Z",
        "lastEditedBy" : "66bf5f80-ba60-4e8e-b14c-d134127a254e",
        "tags" : [
        ]
      },
      {
        "id" : "62d57dbc-2941-4e2f-87a4-c997e7d92fb7",
        "parentId" : "29daa589-bcc1-4938-943b-0ea24392b004",
        "authorId" : "5792c4b6-3661-419f-bcd1-94b27e88d302",
        "body" : "@andrewbranch thanks for the observation. In fact, `constant()` can receive arguments of any type. I don't think assuming those will be all of the same type is correct.",
        "createdAt" : "2019-10-15T14:03:19Z",
        "updatedAt" : "2019-10-15T14:03:20Z",
        "lastEditedBy" : "5792c4b6-3661-419f-bcd1-94b27e88d302",
        "tags" : [
        ]
      },
      {
        "id" : "26af143c-a1c6-4b85-be32-27a73a082708",
        "parentId" : "29daa589-bcc1-4938-943b-0ea24392b004",
        "authorId" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "body" : "In that case, the well-typed version would be\r\n\r\n```ts\r\ninterface AsyncFunctionVariadic<T extends any[], E = Error> {\r\n  (callback: (err?: E, ...params: T) => void): void;\r\n}\r\n\r\nexport function constant<T extends any[]>(...values: T): AsyncFunctionVariadic<T>;\r\n```\r\n\r\nHowever, it would require bumping the minimum TypeScript version to 3.0 (currently itâ€™s set to 2.3). Iâ€™m not an `async` user so I donâ€™t have the context to know whether that tradeoff is worth it. It seems that this library could really benefit from these features (e.g. `compose`, `seq`, `applyEach` all suffer from `any`-infected typings that could be fixed with generic tuples like this). But of course, this is outside the scope of what you originally came here to do.\r\n\r\nIf youâ€™re happy with the status quo here, Iâ€™ll go ahead and merge.",
        "createdAt" : "2019-10-15T17:23:35Z",
        "updatedAt" : "2019-10-15T17:23:35Z",
        "lastEditedBy" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "tags" : [
        ]
      },
      {
        "id" : "1aba0a4d-8167-4c37-9a93-d1e07f255031",
        "parentId" : "29daa589-bcc1-4938-943b-0ea24392b004",
        "authorId" : "5792c4b6-3661-419f-bcd1-94b27e88d302",
        "body" : "@andrewbranch I think we should go ahead and merge.\r\n\r\nAny further optimization like the one you mentioned would be great but should be addressed in conjunction with the `async` authors/maintainers IMO.",
        "createdAt" : "2019-10-15T17:30:16Z",
        "updatedAt" : "2019-10-15T17:30:17Z",
        "lastEditedBy" : "5792c4b6-3661-419f-bcd1-94b27e88d302",
        "tags" : [
        ]
      },
      {
        "id" : "5fe36ac2-41e2-4254-9962-f62bc26fe0b5",
        "parentId" : "29daa589-bcc1-4938-943b-0ea24392b004",
        "authorId" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "body" : "I was wondering if you would be inspired to become a maintainer, since none of the maintainers showed up to review your PR ðŸ˜„ ",
        "createdAt" : "2019-10-15T17:38:45Z",
        "updatedAt" : "2019-10-15T17:38:45Z",
        "lastEditedBy" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b36f05b2dd7851f8fe9181576024735cd837a8b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +260,264 @@export function unmemoize(fn: Function): Function;\nexport function ensureAsync(fn: (... argsAndCallback: any[]) => void): Function;\nexport function constant(...values: any[]): AsyncFunction<any>;\nexport function asyncify(fn: Function): (...args: any[]) => any;\nexport function wrapSync(fn: Function): Function;"
  },
  {
    "id" : "675b793c-324c-454f-9ead-fae20f62d4c3",
    "prId" : 41792,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/41792#pullrequestreview-349041859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e77d41fb-02ea-46a7-977f-aa5cd6ed2196",
        "parentId" : null,
        "authorId" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "body" : "I'm _pretty sure_ this overload needs the `task` parameter, since it's the only \"required\" parameter according to the docs, no?",
        "createdAt" : "2020-01-27T22:18:25Z",
        "updatedAt" : "2020-01-27T23:13:38Z",
        "lastEditedBy" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "tags" : [
        ]
      },
      {
        "id" : "1a0cea4e-f120-4477-a6c7-d0af2c4c4971",
        "parentId" : "e77d41fb-02ea-46a7-977f-aa5cd6ed2196",
        "authorId" : "889aa791-06c6-4e14-90d4-8e19d2ddb2b0",
        "body" : "Done, thanks! It was not covered by existing or added tests, never though about this. Amended",
        "createdAt" : "2020-01-27T23:15:25Z",
        "updatedAt" : "2020-01-27T23:15:26Z",
        "lastEditedBy" : "889aa791-06c6-4e14-90d4-8e19d2ddb2b0",
        "tags" : [
        ]
      }
    ],
    "commit" : "54a5c463388658f3de6c60acba047ef3d502bfe0",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +231,235 @@          },\n    task?: (callback: AsyncResultCallback<T, E>, results: any) => void,\n): Promise<void>;\nexport function retry<T, E = Error>(\n    opts?:"
  }
]