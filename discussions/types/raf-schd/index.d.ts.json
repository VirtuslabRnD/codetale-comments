[
  {
    "id" : "b0df8c93-41e0-4d43-be50-25d95182a57a",
    "prId" : 37582,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/37582#pullrequestreview-276036761",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a29a3af-6ab7-4d57-b89d-3888b60c2a23",
        "parentId" : null,
        "authorId" : "ae1cf0f9-564e-40ad-9cdf-73f717fd1d58",
        "body" : "It seems like the [underlying library](https://www.npmjs.com/package/raf-schd) is using `export default`, so this .d.ts file should as well.\r\n```suggestion\r\nexport default rafSchd;\r\n```",
        "createdAt" : "2019-08-13T20:13:43Z",
        "updatedAt" : "2019-08-19T21:37:58Z",
        "lastEditedBy" : "ae1cf0f9-564e-40ad-9cdf-73f717fd1d58",
        "tags" : [
        ]
      },
      {
        "id" : "2ceb0b84-8c39-4ba1-9e2b-d9798ae85de3",
        "parentId" : "2a29a3af-6ab7-4d57-b89d-3888b60c2a23",
        "authorId" : "44d5bc65-90f1-4781-90bf-4ea305544de5",
        "body" : "I tried this at first. But running `npm run lint raf-schd` with that code (and the tests updated) makes `dtslint` complain:\r\n```sh\r\nERROR: 14:1  npm-naming  The types for raf-schd specify 'export default' but the source does not mention 'default' anywhere.\r\nHere is the source:\r\n## Source removed but found here https://runpkg.com/?raf-schd@4.0.2/dist/raf-schd.cjs.js\r\nSee: https://github.com/Microsoft/dtslint/blob/master/docs/npm-naming.md\r\n```\r\n\r\nThe source code refered to is the `main`-file defined in package.json. But bundlers will most likely use the [`module`-file](https://runpkg.com/?raf-schd@4.0.2/dist/raf-schd.esm.js) from package.json which uses `export default...`\r\n\r\nIs there a way to either force dtslint to look for the module file instead? Or in worst case skip that rule? The link mentioned in the error message does not exists, so no luck there.",
        "createdAt" : "2019-08-14T06:42:27Z",
        "updatedAt" : "2019-08-19T21:37:58Z",
        "lastEditedBy" : "44d5bc65-90f1-4781-90bf-4ea305544de5",
        "tags" : [
        ]
      },
      {
        "id" : "9697464c-0691-465e-a2ee-5aa3eb7c9533",
        "parentId" : "2a29a3af-6ab7-4d57-b89d-3888b60c2a23",
        "authorId" : "44d5bc65-90f1-4781-90bf-4ea305544de5",
        "body" : "I took a look at #35165 which seemed to encounter the same problem. They decided to stay on the `export = rafSchd`-format but adding `\"esModuleInterop\": true` to tsconfig.json. What do you think?",
        "createdAt" : "2019-08-14T06:55:10Z",
        "updatedAt" : "2019-08-19T21:37:58Z",
        "lastEditedBy" : "44d5bc65-90f1-4781-90bf-4ea305544de5",
        "tags" : [
        ]
      },
      {
        "id" : "2f5aa0ef-d994-4099-bbb9-ff15a034b300",
        "parentId" : "2a29a3af-6ab7-4d57-b89d-3888b60c2a23",
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "The code should use `export = rafSchd`; usage from node looks like this:\r\n\r\n```\r\n✔ test  [master L|✚ 11…7]$ npm install raf-schd\r\n✔ test  [master L|✚ 11…7]$ node\r\n> var r = require('raf-schd')\r\nundefined\r\n> r\r\n[Function: rafSchd]\r\n> r.default\r\nundefined\r\n```\r\n\r\n\r\nThis means that raf-schd's README is wrong, by the way, since it claims commonjs usage needs to append `.default`.\r\n\r\nBoth this PR and #35165 should leave off esModuleInterop since DT's tests need to simulate the least-common-denominator environment. esModuleInterop is only going to be present in recently-created (2.9?) codebases.",
        "createdAt" : "2019-08-16T16:04:58Z",
        "updatedAt" : "2019-08-19T21:37:58Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      }
    ],
    "commit" : "342f3ab23a3933251182a95bd7157aa9bea5a1d4",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@declare function rafSchd<T extends (...args: any[]) => void>(fn: T): Schedule<T>;\n\nexport = rafSchd;"
  }
]