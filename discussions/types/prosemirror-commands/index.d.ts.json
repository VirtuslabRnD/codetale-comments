[
  {
    "id" : "d95f275c-320f-4ab4-b14e-24a8c84b4a02",
    "prId" : 19524,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19524#pullrequestreview-60304873",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc022526-0257-43e0-8d5b-025c498e72e3",
        "parentId" : null,
        "authorId" : "0cf64e02-e002-468f-ad75-8c4ce3dc2241",
        "body" : "You should bump the version at the top of the file to whatever major.minor version of ProseMirror added this.",
        "createdAt" : "2017-09-02T21:59:07Z",
        "updatedAt" : "2017-09-03T21:08:35Z",
        "lastEditedBy" : "0cf64e02-e002-468f-ad75-8c4ce3dc2241",
        "tags" : [
        ]
      },
      {
        "id" : "70739f01-7e5c-4021-b3e0-28781305af48",
        "parentId" : "cc022526-0257-43e0-8d5b-025c498e72e3",
        "authorId" : "d55904f5-af49-4858-ae87-2dafaaf58344",
        "body" : "Updated!",
        "createdAt" : "2017-09-03T21:05:13Z",
        "updatedAt" : "2017-09-03T21:08:35Z",
        "lastEditedBy" : "d55904f5-af49-4858-ae87-2dafaaf58344",
        "tags" : [
        ]
      }
    ],
    "commit" : "62bbba2a88db1d51fe8107b60edc9aa00c5dcb57",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +12,16 @@export function deleteSelection(state: EditorState, dispatch?: (tr: Transaction) => void): boolean;\nexport function joinBackward(state: EditorState, dispatch?: (tr: Transaction) => void, view?: EditorView): boolean;\nexport function selectNodeBackward(state: EditorState, dispatch?: (tr: Transaction) => void, view?: EditorView): boolean;\nexport function selectNodeForward(state: EditorState, dispatch?: (tr: Transaction) => void, view?: EditorView): boolean;\nexport function joinForward(state: EditorState, dispatch?: (tr: Transaction) => void, view?: EditorView): boolean;"
  },
  {
    "id" : "06501c6e-5067-4f56-b939-03f33663e4da",
    "prId" : 45836,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45836#pullrequestreview-441551874",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d325693b-2cac-485f-91b5-c879373c5bf8",
        "parentId" : null,
        "authorId" : "2f68ae54-d7f4-4d7f-a73d-c8407e2645f4",
        "body" : "It's not really clear to me if these types should go here, or in prosemirror-keymap. They are used by both.",
        "createdAt" : "2020-07-01T23:10:27Z",
        "updatedAt" : "2020-07-01T23:10:27Z",
        "lastEditedBy" : "2f68ae54-d7f4-4d7f-a73d-c8407e2645f4",
        "tags" : [
        ]
      },
      {
        "id" : "acb247eb-5a52-4182-9183-0748c389f12f",
        "parentId" : "d325693b-2cac-485f-91b5-c879373c5bf8",
        "authorId" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "body" : "I think that prosemirror-commands is the best place for the `Command` interface. Unfortunately, moving the `Keymap` interface to prosemirror-keymap would introduce a cycle. Thus, the current solution seems to be the best one to me.",
        "createdAt" : "2020-07-02T10:43:59Z",
        "updatedAt" : "2020-07-02T10:51:55Z",
        "lastEditedBy" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c7735e2b8f39640cb73e40ae04cb6642a8ab2cd",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +23,27 @@export interface Keymap<S extends Schema = any> {\n  [key: string]: Command<S>;\n}\n\n/**"
  },
  {
    "id" : "f8c81f3e-b23f-446c-9bd6-70f2722361b2",
    "prId" : 45836,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45836#pullrequestreview-441551874",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f01ebbe-a5ba-4a94-b7ce-09108797cf52",
        "parentId" : null,
        "authorId" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "body" : "I want to point out that this is a breaking change. After reading the README and some discussions in issues, it seems to me that it's recommended for versions of type definitions to\r\n\r\n* always track the library version\r\n* follow semvar\r\n\r\nwhich together imply that breaking changes to the type definitions are only possible when the the corresponding library publishes a new major version. I don't agree with this policy because it means that one must willingly tolerate imprecise or plain wrong type definitions for an indefinite time (e.g. there has been no major release of `prosemirror-commands` since 1.0.0 was released in October 2017). Therefore I'm ignoring this policy and approve this breaking change.",
        "createdAt" : "2020-07-02T10:29:47Z",
        "updatedAt" : "2020-07-02T10:51:55Z",
        "lastEditedBy" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c7735e2b8f39640cb73e40ae04cb6642a8ab2cd",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +236,240 @@ * * **Mod-a** to `selectAll`\n */\nexport let pcBaseKeymap: Keymap;\n/**\n * A copy of `pcBaseKeymap` that also binds **Ctrl-h** like Backspace,"
  },
  {
    "id" : "10b2992d-3d41-4dbc-a9b2-22b243f0e3e7",
    "prId" : 45836,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45836#pullrequestreview-442569775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eaca6a7d-79cd-4cda-a607-de69bf1ec5f3",
        "parentId" : null,
        "authorId" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "body" : "Are there any reasons for using `any` instead of `unknown` here? If not, could you please replace `any` with `unknown`?",
        "createdAt" : "2020-07-02T10:45:30Z",
        "updatedAt" : "2020-07-02T10:51:55Z",
        "lastEditedBy" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "tags" : [
        ]
      },
      {
        "id" : "10fb0b66-ccf2-4931-a2f5-6ee99c6acf09",
        "parentId" : "eaca6a7d-79cd-4cda-a607-de69bf1ec5f3",
        "authorId" : "2f68ae54-d7f4-4d7f-a73d-c8407e2645f4",
        "body" : "`unknown` is not compatible with the constraint type `Schema`. If I try `<S extends Schema = unknown>`, the compiler objects, \"Type 'unknown' does not satisfy the constraint 'Schema'. (2344)\"\r\n\r\nI think `<S extends Schema = Schema>` is worth considering. `Schema` itself is defined as `Schema<N extends string = any, M extends string = any>`.\r\n\r\nI'm a little hesitant to do that in this PR, though, because throughout the rest of all of the prosemirror packages, there is currently a consistent pattern of using `<S extends Schema = any>`.\r\n\r\nI did a little experimentation, and I do quite like `<S extends Schema = Schema>`. I'm not quite sure in practice where it is useful, but it does feel more correct. For example, `EditorState<S extends Schema>` exposes a property `schema: S`. As things are written today, since the declaration says `EditorState<S extends Schema = any>`, my editor does not provide autocomplete in this scenario:\r\n\r\n```ts\r\ndeclare const editorState: EditorState;\r\neditorState.schema.    // <-- I typed \".\" but I get no hints, since `schema` is of type `any`\r\n```\r\n\r\nIf I change the declaration to `EditorState<S extend Schema = Schema>`, I do get autocomplete hints:\r\n\r\n<img width=\"587\" alt=\"Screen Shot 2020-07-02 at 9 29 34 AM\" src=\"https://user-images.githubusercontent.com/207671/86386511-b3e3ba00-bc46-11ea-812f-7f245df7d5a1.png\">\r\n\r\nI would suggest leaving this line the way I have it in this PR, and then doing a separate PR to change to `<S extends Schema = Schema>` throughout all of the ProseMirror packages.\r\n\r\nThe same could be done for any other types that use `= any`. For example, `Schema` itself could be changed to `Schema<N extends string = string, M extends string = string>`.",
        "createdAt" : "2020-07-02T16:31:58Z",
        "updatedAt" : "2020-07-02T16:37:37Z",
        "lastEditedBy" : "2f68ae54-d7f4-4d7f-a73d-c8407e2645f4",
        "tags" : [
        ]
      },
      {
        "id" : "9c543282-a958-4156-94b6-2e2361864afc",
        "parentId" : "eaca6a7d-79cd-4cda-a607-de69bf1ec5f3",
        "authorId" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "body" : "I'm okay with using `s extends Schema = any` for consistency reasons. Let's experiment with `s extends Schema = Schema` in another change!",
        "createdAt" : "2020-07-03T22:30:43Z",
        "updatedAt" : "2020-07-03T22:31:28Z",
        "lastEditedBy" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c7735e2b8f39640cb73e40ae04cb6642a8ab2cd",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +13,17 @@import { EditorView } from 'prosemirror-view';\n\nexport interface Command<S extends Schema = any> {\n  (\n    state: EditorState<S>,"
  },
  {
    "id" : "679e78d2-63b0-4e62-9cbf-34dfef2ae2d0",
    "prId" : 45836,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45836#pullrequestreview-442569775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f16c4db-6590-405d-bc72-c7e39b3263ce",
        "parentId" : null,
        "authorId" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "body" : "Are there any reasons for using `any` instead of `unknown` here? If not, could you please replace `any` with `unknown`? (I believe that this would also require using the type `Keymap<any>` for `baseKeymap`, `pcBaseKeymap` and `macBaseKeymap` because otherwise using one of these values would not be possible when something of type `Keymap<S>` for some concrete schema type `S` is required.)",
        "createdAt" : "2020-07-02T10:45:56Z",
        "updatedAt" : "2020-07-02T10:51:55Z",
        "lastEditedBy" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "tags" : [
        ]
      },
      {
        "id" : "1d90c00b-5259-405f-81fb-78cbc45b0321",
        "parentId" : "0f16c4db-6590-405d-bc72-c7e39b3263ce",
        "authorId" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "body" : "(see other comment)",
        "createdAt" : "2020-07-03T22:30:36Z",
        "updatedAt" : "2020-07-03T22:31:28Z",
        "lastEditedBy" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c7735e2b8f39640cb73e40ae04cb6642a8ab2cd",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +21,25 @@}\n\nexport interface Keymap<S extends Schema = any> {\n  [key: string]: Command<S>;\n}"
  },
  {
    "id" : "42cd5570-437d-4163-95fe-544786b93cc8",
    "prId" : 45836,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45836#pullrequestreview-445620180",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f168c1f-988c-46e1-b26a-0d59f2219163",
        "parentId" : null,
        "authorId" : "ea5fb5e1-2dcd-497e-a0f8-bdbc76220b33",
        "body" : "Hey! I was wondering, shouldn't it be `dispatch?` and `view?`?\r\n\r\nMost of the command type definitions in this file use:\r\n\r\n```TypeScript\r\nstate: EditorState<S>,\r\ndispatch?: (tr: Transaction<S>) => void,\r\nview?: EditorView<S>\r\n```\r\n\r\nand the docs say:\r\n\r\n> A command function takes an editor state, _optionally_ a `dispatch` function that it can use to dispatch a transaction and _optionally_ an `EditorView` instance.\r\n\r\nIf we add the following code to the `prosemirror-commands-tests.ts` file, this wouldn't compile.\r\n\r\n```TypeScript\r\nObject.keys(commands.baseKeymap).forEach(key => {\r\n    if (keymap[key]) {\r\n        keymap[key] = commands.chainCommands(keymap[key], commands.baseKeymap[key]);\r\n    } else {\r\n        keymap[key] = commands.baseKeymap[key];\r\n    }\r\n});\r\n```\r\n\r\n(I forgot where this code came from, but apparently it's [a thing](https://github.com/search?q=Object.keys%28baseKeymap%29.forEach&type=Code))\r\n\r\nUsing the definition from this PR I get:\r\n\r\n```\r\nERROR: 26:46  expect                         TypeScript@next compile error:\r\nArgument of type 'Command<any>' is not assignable to parameter of type '(p1: EditorState<any>, p2?: ((tr: Transaction<any>) => void) | undefined, p3?: EditorView<any> | undefined) => boolean'.\r\n  Types of parameters 'dispatch' and 'p2' are incompatible.\r\n    Type '((tr: Transaction<any>) => void) | undefined' is not assignable to type '(tr: Transaction<any>) => void'.\r\n      Type 'undefined' is not assignable to type '(tr: Transaction<any>) => void'.\r\n```\r\n\r\nIf I change it to `dispatch?` and `view?` it works.\r\n\r\nAm I doing something wrong here? Maybe I'm confusing what is a `Command` and what isn't.",
        "createdAt" : "2020-07-09T09:12:31Z",
        "updatedAt" : "2020-07-09T09:12:31Z",
        "lastEditedBy" : "ea5fb5e1-2dcd-497e-a0f8-bdbc76220b33",
        "tags" : [
        ]
      },
      {
        "id" : "bc476fad-ec48-4a3a-a372-6b6299be3687",
        "parentId" : "0f168c1f-988c-46e1-b26a-0d59f2219163",
        "authorId" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "body" : "@aried3r You are right. It's important that commands can handle the case where `dispatch` and `view` are undefined, because that's used to check whether a command can be applied:\r\n\r\n> When no dispatch callback is passed, the command should do a 'dry run', determining whether it is applicable, but not actually doing anything.\r\n\r\nWe should change that.",
        "createdAt" : "2020-07-09T11:05:20Z",
        "updatedAt" : "2020-07-09T11:05:20Z",
        "lastEditedBy" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "tags" : [
        ]
      },
      {
        "id" : "1920f71a-468e-4070-a619-d2b6b8efc83b",
        "parentId" : "0f168c1f-988c-46e1-b26a-0d59f2219163",
        "authorId" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "body" : "@aried3r I've made a PR containing a fix: https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45972",
        "createdAt" : "2020-07-09T13:34:08Z",
        "updatedAt" : "2020-07-09T13:34:08Z",
        "lastEditedBy" : "cdf08ebe-0d14-4a04-90dc-8cf4b1cb34aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c7735e2b8f39640cb73e40ae04cb6642a8ab2cd",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +17,21 @@    state: EditorState<S>,\n    dispatch: (tr: Transaction<S>) => void,\n    view: EditorView<S>\n  ): boolean;\n}"
  }
]