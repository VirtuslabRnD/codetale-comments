[
  {
    "id" : "4f8a1110-f07e-43ec-ac0a-5d1dc10186cc",
    "prId" : 23114,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23114#pullrequestreview-90955487",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7644f796-aee8-4b82-a518-d748e4020fe8",
        "parentId" : null,
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "It would be better to just use the default tslint rules instead of adding exceptions for some packages.",
        "createdAt" : "2018-01-22T22:51:46Z",
        "updatedAt" : "2018-01-23T09:36:44Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "3af9c90a-d143-42a8-9521-2dd98913e5e6",
        "parentId" : "7644f796-aee8-4b82-a518-d748e4020fe8",
        "authorId" : "0f04e351-742a-456e-82bc-f9abef2a3aef",
        "body" : "this also has to do with my preference of types over interfaces, but if there are good arguments for the different rules I can get convinced ðŸ˜„ \r\n",
        "createdAt" : "2018-01-23T09:52:31Z",
        "updatedAt" : "2018-01-23T09:52:31Z",
        "lastEditedBy" : "0f04e351-742a-456e-82bc-f9abef2a3aef",
        "tags" : [
        ]
      },
      {
        "id" : "63b27be5-9eab-426d-801c-b2d73012dea9",
        "parentId" : "7644f796-aee8-4b82-a518-d748e4020fe8",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "Intersecting two types never fails, while interfaces bring more guarantees.\r\nAlso, when you use an interface we are able to use the type name in more places.\r\n```ts\r\ntype T = { a: number; x: number };\r\ntype U = T & { b: number; x: string };\r\ndeclare const u: U;\r\nu.a; // (property) a: number\r\nu.b; // (property) b: number\r\nu.x; // (property) x: number & string\r\n\r\ninterface I { a: number; x: number; }\r\ninterface J extends I { b: number; x: string; } // Error, bad override of 'x'\r\ndeclare const j: J;\r\nj.a; // (property) I.a: number\r\nj.b; // (property) J.b: number\r\nj.x; // (property) J.x: string\r\n```",
        "createdAt" : "2018-01-23T15:30:45Z",
        "updatedAt" : "2018-01-23T15:30:45Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "4ff2d731-f6cc-4130-b2a7-d9ebad01ac12",
        "parentId" : "7644f796-aee8-4b82-a518-d748e4020fe8",
        "authorId" : "0f04e351-742a-456e-82bc-f9abef2a3aef",
        "body" : "okay I see the benefit with the bad override, thank you for the explanation. But still don't know if I'm completely convinced, because interfaces allow declaration merging what I think is quite dirty, because it spreads the definition to different places.\r\nAlso the behavior of intersection types is very close to the behavior of object merging in JS, so I think of it as the typed equivalent of Object.assign\r\n\r\n```TS\r\ntype T3 = T1 & T2\r\nconst a: T1\r\nconst b: T2\r\nconst c: T3 = Object.assign(a, b)\r\n```\r\n\r\nBut all arguments aside in this specific case I still want to stay with types instead of interfaces just to stay closer to the original code in flowType.\r\nhttps://github.com/LeoLeBras/react-router-navigation/blob/master/packages/react-router-navigation/src/TypeDefinitions.js ",
        "createdAt" : "2018-01-23T16:33:35Z",
        "updatedAt" : "2018-01-23T16:35:43Z",
        "lastEditedBy" : "0f04e351-742a-456e-82bc-f9abef2a3aef",
        "tags" : [
        ]
      },
      {
        "id" : "374893d1-3ce4-43d7-bc40-a387926022ab",
        "parentId" : "7644f796-aee8-4b82-a518-d748e4020fe8",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "Unless the value is actually `number & string` at runtime, it's not more accurate to the runtime behavior! The compiler and language service work best on named over anonymous types -- please stick to the DefinitelyTyped lint rules.",
        "createdAt" : "2018-01-23T18:15:06Z",
        "updatedAt" : "2018-01-23T18:15:06Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "0ae5cbe1-b7db-4611-87d4-550d2f4ae65d",
        "parentId" : "7644f796-aee8-4b82-a518-d748e4020fe8",
        "authorId" : "0f04e351-742a-456e-82bc-f9abef2a3aef",
        "body" : "hmm you are making it more difficult than it should be to contribute type declarations. \r\nAs I already said the main reason to use types instead of interfaces is that the original code written in FlowType also uses types instead of interfaces.\r\n\r\nIf I would use interfaces everytime the original code changes there will be the transfer from type to interface again. By using types it is almost just copy and paste.",
        "createdAt" : "2018-01-23T19:13:34Z",
        "updatedAt" : "2018-01-23T19:13:34Z",
        "lastEditedBy" : "0f04e351-742a-456e-82bc-f9abef2a3aef",
        "tags" : [
        ]
      },
      {
        "id" : "85cbb6da-fe19-4d7c-ad0b-cada4a7b00b7",
        "parentId" : "7644f796-aee8-4b82-a518-d748e4020fe8",
        "authorId" : "0f04e351-742a-456e-82bc-f9abef2a3aef",
        "body" : "another argument to stay with types for this lib is, that the implementation of intersection types in flow is the same as in typescript, with the same pitfalls (https://flow.org/en/docs/types/intersections/#toc-intersections-of-object-types)\r\n\r\nSo with interfaces instead of types there would be a real difference to the original typings",
        "createdAt" : "2018-01-23T19:41:28Z",
        "updatedAt" : "2018-01-23T19:59:16Z",
        "lastEditedBy" : "0f04e351-742a-456e-82bc-f9abef2a3aef",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec269fbabef474816602e98fb9d2202af8c13d0f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2,6 @@    \"extends\": \"dtslint/dt.json\",\n    \"rules\": {\n        \"interface-over-type-literal\": false,\n        \"prefer-method-signature\": false,\n        \"prefer-declare-function\": false,"
  }
]