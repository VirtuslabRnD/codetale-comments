[
  {
    "id" : "d3c5eab7-b2fd-4612-b5ae-239f471d6f9a",
    "prId" : 37057,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/37057#pullrequestreview-265533628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc454507-f391-4021-90a3-f3136e8d8ca0",
        "parentId" : null,
        "authorId" : "3acd3c32-6643-4868-a42f-05dfda822102",
        "body" : "@Jessidhia Without `| {}`, you could call `act().then(...)` without a cast - is that correct? Is there some other way to make it harder to use this (presumably internal) API?",
        "createdAt" : "2019-07-23T15:36:41Z",
        "updatedAt" : "2019-07-23T15:36:41Z",
        "lastEditedBy" : "3acd3c32-6643-4868-a42f-05dfda822102",
        "tags" : [
        ]
      },
      {
        "id" : "cd0ed041-c5f8-4ff9-bc48-58ddab258f15",
        "parentId" : "fc454507-f391-4021-90a3-f3136e8d8ca0",
        "authorId" : "f6fea77b-5d92-421b-be93-8ad6d7cd9975",
        "body" : "It is still *really* hard to call `act.then(...)` because you get a compile error unless you pass two callbacks that each return `never`.\r\n\r\nThe type `{} | DebugPromiseLike` is definitely suspicious. Ordinarily the compiler would just reduce it to `{}` (since `DebugPromiseLike` is a subtype of `{}`), but for reasons of efficiency and backwards compatibility we don't always reduce unions. With the changes in microsoft/TypeScript#32460 we now infer `{}` for `T` when inferring from `{} | DebugPromiseLike` to `T | PromiseLike<T>`, which certainly is a better inference than the previous `{} | DebugPromiseLike`.",
        "createdAt" : "2019-07-23T16:34:21Z",
        "updatedAt" : "2019-07-23T16:34:21Z",
        "lastEditedBy" : "f6fea77b-5d92-421b-be93-8ad6d7cd9975",
        "tags" : [
        ]
      }
    ],
    "commit" : "543e42968ab5730d75ec6d34463e29e4985c2d57",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +67,71 @@// the \"void | undefined\" is here to forbid any sneaky \"Promise\" returns.\n// the actual return value is always a \"DebugPromiseLike\".\nexport function act(callback: () => void | undefined): DebugPromiseLike;\n\n// Intentionally doesn't extend PromiseLike<never>."
  },
  {
    "id" : "274de00f-1ffa-4e0e-bb93-177d22a8ded6",
    "prId" : 37426,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/37426#pullrequestreview-273524901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "013caa11-2cfa-40b9-aba6-35659338b43d",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "`() => Promise<void>` would essentially accept `Promise<any>`, so it's `|`ed with `undefined` to enforce no values are returned. Just `Promise<undefined>` would reject `void` functions.",
        "createdAt" : "2019-08-07T02:41:30Z",
        "updatedAt" : "2019-08-07T02:44:26Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "65e03ffc-aac1-4bb0-969c-f84f55114e27",
        "parentId" : "013caa11-2cfa-40b9-aba6-35659338b43d",
        "authorId" : "154935b0-c747-4431-b603-036adc203ce3",
        "body" : "Does this affect the test renderer runtime at all if the Promise resolves to a defined value? I think some developers like to combine early returns with an evaluation (still not caring about the return value)\r\n\r\n```ts\r\nif (somethingThatMakesMeReturnEarly) {\r\n  return doSomethingElse()\r\n}\r\n```",
        "createdAt" : "2019-08-07T13:40:33Z",
        "updatedAt" : "2019-08-07T13:41:41Z",
        "lastEditedBy" : "154935b0-c747-4431-b603-036adc203ce3",
        "tags" : [
        ]
      },
      {
        "id" : "25515e5d-7b60-4c4b-b1f5-bda6be97fc7b",
        "parentId" : "013caa11-2cfa-40b9-aba6-35659338b43d",
        "authorId" : "10b3a7b8-1c51-4865-9a6d-ef87f2a5b032",
        "body" : "What's the problem with `Promise<any>`?\r\n\r\nI'm incurring into an error when trying to do something like this:\r\n```js\r\nawait act(() =>\r\n  expect(result.current.validate()).rejects.toEqual({ a: \"error\" })\r\n);\r\n```\r\n`expect(somePromise).rejects.toEqual()` will return the same type returned by `somePromise`. Test passes, but TypeScript is complaining: `Type 'Promise<SomePromiseReturn>' is not assignable to type 'void'.`",
        "createdAt" : "2019-08-10T23:14:38Z",
        "updatedAt" : "2019-08-10T23:14:38Z",
        "lastEditedBy" : "10b3a7b8-1c51-4865-9a6d-ef87f2a5b032",
        "tags" : [
        ]
      },
      {
        "id" : "f10bc2f7-f3f3-414e-b605-207bd94bc2e3",
        "parentId" : "013caa11-2cfa-40b9-aba6-35659338b43d",
        "authorId" : "04e09978-475a-4333-8639-a85b17b7429f",
        "body" : "@diegoazh Please open an issue with the full error message. May also be an issue with the jest typings. \r\n\r\nIn any case: I would keep it simply an just `await` `result.current.validate()` `toThrow` and wrap it in a callback that's just `void`. It's not obvious anyway that `expect.rejects` returns a promise which makes this `act` harder to read than necessary.",
        "createdAt" : "2019-08-12T06:37:20Z",
        "updatedAt" : "2019-08-12T06:37:21Z",
        "lastEditedBy" : "04e09978-475a-4333-8639-a85b17b7429f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7ba85070d113c14442a029175bd5108b3bb356d",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +67,71 @@// the \"void | undefined\" is here to forbid any sneaky return values\n// tslint:disable-next-line: void-return\nexport function act(callback: () => Promise<void | undefined>): Promise<undefined>;\n/**\n * Wrap any code rendering and triggering updates to your components into `act()` calls."
  }
]