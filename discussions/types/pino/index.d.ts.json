[
  {
    "id" : "a1ae1fab-c373-4b77-9139-a35618e353f7",
    "prId" : 34011,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/34011#pullrequestreview-216863917",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "662ff198-c7b8-4e19-ac6a-cb34165d2f53",
        "parentId" : null,
        "authorId" : "126975c5-3e8d-459a-a6e2-9fa020cf3408",
        "body" : "Why a generic string? If you define `LevelWithSilent | string` you could get rid of `LevelWithSilent` because every string is valid and I guess it should only be allowed to set allowed levels. So I would delete `string`\t",
        "createdAt" : "2019-03-20T09:06:54Z",
        "updatedAt" : "2019-03-20T09:07:03Z",
        "lastEditedBy" : "126975c5-3e8d-459a-a6e2-9fa020cf3408",
        "tags" : [
        ]
      },
      {
        "id" : "6ba514eb-6fe9-4c0e-9ddf-28b1be2f6cce",
        "parentId" : "662ff198-c7b8-4e19-ac6a-cb34165d2f53",
        "authorId" : "126975c5-3e8d-459a-a6e2-9fa020cf3408",
        "body" : "Ok, I saw that you can [set](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/a5e81b2ecccc4122eb2335df655af28830f2ef91/types/pino/index.d.ts#L158) a level with -`LevelWithSilent | string` but in my opinion this is wrong as well. If you define union for string literals and a generic `string` the string literal makes no sense anymore.",
        "createdAt" : "2019-03-20T09:10:33Z",
        "updatedAt" : "2019-03-20T09:11:31Z",
        "lastEditedBy" : "126975c5-3e8d-459a-a6e2-9fa020cf3408",
        "tags" : [
        ]
      },
      {
        "id" : "c9a8364c-20bf-44cb-a289-b3c6034e34ae",
        "parentId" : "662ff198-c7b8-4e19-ac6a-cb34165d2f53",
        "authorId" : "fc965e54-c1ed-422f-8947-e2498358f5cf",
        "body" : "My best guess is that this could potentially provide hints to documentation-generators and IDE autocompletions.\r\n\r\nThis convention is followed in 4 other places in this definition file, so I'd be a little hesitant to depart from it here without a good reason.",
        "createdAt" : "2019-03-20T14:10:23Z",
        "updatedAt" : "2019-03-20T14:10:34Z",
        "lastEditedBy" : "fc965e54-c1ed-422f-8947-e2498358f5cf",
        "tags" : [
        ]
      },
      {
        "id" : "859ad038-9c31-42ee-873a-4be9e591b234",
        "parentId" : "662ff198-c7b8-4e19-ac6a-cb34165d2f53",
        "authorId" : "b020629e-b52b-403a-98c4-dd5d98f3aa6b",
        "body" : "Well, actually it does. You can use the `LiteralUnion` type from https://github.com/sindresorhus/type-fest to get autocompletion for such union types in an IDE.",
        "createdAt" : "2019-03-20T14:15:17Z",
        "updatedAt" : "2019-03-20T14:15:17Z",
        "lastEditedBy" : "b020629e-b52b-403a-98c4-dd5d98f3aa6b",
        "tags" : [
        ]
      },
      {
        "id" : "e437d0c0-b021-4651-8a07-adbf25d091eb",
        "parentId" : "662ff198-c7b8-4e19-ac6a-cb34165d2f53",
        "authorId" : "b020629e-b52b-403a-98c4-dd5d98f3aa6b",
        "body" : "It's actually more of a bug in TypeScript that it doesn't work.",
        "createdAt" : "2019-03-20T14:15:52Z",
        "updatedAt" : "2019-03-20T14:15:52Z",
        "lastEditedBy" : "b020629e-b52b-403a-98c4-dd5d98f3aa6b",
        "tags" : [
        ]
      },
      {
        "id" : "cb0b0dd8-bec4-4cad-8ac0-614192729886",
        "parentId" : "662ff198-c7b8-4e19-ac6a-cb34165d2f53",
        "authorId" : "126975c5-3e8d-459a-a6e2-9fa020cf3408",
        "body" : "All right, good to know :+1:",
        "createdAt" : "2019-03-20T16:02:32Z",
        "updatedAt" : "2019-03-20T16:02:33Z",
        "lastEditedBy" : "126975c5-3e8d-459a-a6e2-9fa020cf3408",
        "tags" : [
        ]
      },
      {
        "id" : "9e085ec7-b242-49c2-a0c5-ec29230ee49a",
        "parentId" : "662ff198-c7b8-4e19-ac6a-cb34165d2f53",
        "authorId" : "fc965e54-c1ed-422f-8947-e2498358f5cf",
        "body" : "@screendriver Are you comfortable approving this PR?",
        "createdAt" : "2019-03-20T16:58:23Z",
        "updatedAt" : "2019-03-20T16:58:23Z",
        "lastEditedBy" : "fc965e54-c1ed-422f-8947-e2498358f5cf",
        "tags" : [
        ]
      },
      {
        "id" : "b187bd37-74ce-47d3-9bf3-eeac9204a59c",
        "parentId" : "662ff198-c7b8-4e19-ac6a-cb34165d2f53",
        "authorId" : "126975c5-3e8d-459a-a6e2-9fa020cf3408",
        "body" : "I thought it would be enough that @BendingBender approved it. I approved it also now. ",
        "createdAt" : "2019-03-20T17:13:28Z",
        "updatedAt" : "2019-03-20T17:13:29Z",
        "lastEditedBy" : "126975c5-3e8d-459a-a6e2-9fa020cf3408",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5e81b2ecccc4122eb2335df655af28830f2ef91",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +449,453 @@         * A utility method for determining if a given log level will write to the destination.\n         */\n        isLevelEnabled(level: LevelWithSilent | string): boolean;\n    }\n"
  },
  {
    "id" : "a1de1454-cbde-46b5-b03a-8785f89cd45e",
    "prId" : 42887,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/42887#pullrequestreview-370550567",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72c5aa7a-e4c8-478d-9679-d9ee4840846c",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "Some libraries use the JSDoc `@deprecated` syntax, which I believe has some tool support.  I don't think there's official guidance either way, but I thought I'd mention the option.",
        "createdAt" : "2020-03-06T18:54:05Z",
        "updatedAt" : "2020-03-06T18:54:06Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      }
    ],
    "commit" : "08f9369a13a45b6b2a6e05bb5b17f9d013ae8a60",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +230,234 @@        levelKey?: string;\n        /**\n         * (DEPRECATED, use `levelKey`) Changes the property `level` to any string value you pass in. Default: 'level'\n         */\n        changeLevelName?: string;"
  },
  {
    "id" : "24a2bc73-f4bb-4a70-a695-2d2b835d332c",
    "prId" : 48203,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/48203#pullrequestreview-511922872",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac9627e1-c2f9-4f71-bc28-90d17c521370",
        "parentId" : null,
        "authorId" : "8b1b728e-d663-409c-9ea0-fa4bc1484261",
        "body" : "I wonder if we would benefit from adding `as const` here.",
        "createdAt" : "2020-10-19T16:02:59Z",
        "updatedAt" : "2020-10-19T16:03:53Z",
        "lastEditedBy" : "8b1b728e-d663-409c-9ea0-fa4bc1484261",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f8a322723738d355201ca86a3c91913b7438938",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +74,78 @@        readonly formattersSym: unique symbol,\n        readonly hooksSym: unique symbol,\n    };\n    /**\n     * Exposes the Pino package version. Also available on the logger instance."
  }
]