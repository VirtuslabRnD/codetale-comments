[
  {
    "id" : "74d5ed14-f314-47b3-8f63-e8e93e768f2f",
    "prId" : 19497,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19497#pullrequestreview-60123809",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98a66194-0968-4fb2-858e-2bc79014044d",
        "parentId" : null,
        "authorId" : "317a00dd-7a6e-44c0-96cc-bd132d5da0af",
        "body" : "where exactly in the documentation is this property?",
        "createdAt" : "2017-09-01T12:30:22Z",
        "updatedAt" : "2017-09-05T14:19:14Z",
        "lastEditedBy" : "317a00dd-7a6e-44c0-96cc-bd132d5da0af",
        "tags" : [
        ]
      },
      {
        "id" : "69da6271-1e81-4158-bef4-5658a5cc5426",
        "parentId" : "98a66194-0968-4fb2-858e-2bc79014044d",
        "authorId" : "8c0b72ae-1f2f-4af5-8a5a-0e5df942b0f5",
        "body" : "You are right, it is not yet in the official documentation, but see:\r\n\r\nOfficial demo: https://github.com/recharts/recharts/blob/master/demo/component/PieChart.js#L148\r\n",
        "createdAt" : "2017-09-01T12:41:42Z",
        "updatedAt" : "2017-09-05T14:19:14Z",
        "lastEditedBy" : "8c0b72ae-1f2f-4af5-8a5a-0e5df942b0f5",
        "tags" : [
        ]
      }
    ],
    "commit" : "764d271d28624107f2ca4ff889228f7de1d5022c",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +311,315 @@\tpaddingAngle?: number;\n\tnameKey?: string;\n\tdataKey?: string;\n\tvalueKey?: string;\n\tlegendType?: LegendType;"
  },
  {
    "id" : "27259b17-9e4d-486f-93b4-9a78c41aadcc",
    "prId" : 19497,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19497#pullrequestreview-60124107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d931fc2e-e456-42a5-88e6-0fe33b8a192f",
        "parentId" : null,
        "authorId" : "317a00dd-7a6e-44c0-96cc-bd132d5da0af",
        "body" : "Is React.StatelessComponent also a ReactElement? since the docs are saying of type `Boolean | Object | ReactElement`",
        "createdAt" : "2017-09-01T12:32:40Z",
        "updatedAt" : "2017-09-05T14:19:14Z",
        "lastEditedBy" : "317a00dd-7a6e-44c0-96cc-bd132d5da0af",
        "tags" : [
        ]
      },
      {
        "id" : "9c9ff8cd-502a-421b-8632-f73278442dbc",
        "parentId" : "d931fc2e-e456-42a5-88e6-0fe33b8a192f",
        "authorId" : "8c0b72ae-1f2f-4af5-8a5a-0e5df942b0f5",
        "body" : "Yes, React.StatelessComponent is a React.ReactElement, but without class definition. See https://facebook.github.io/react/docs/components-and-props.html#extracting-components",
        "createdAt" : "2017-09-01T12:43:10Z",
        "updatedAt" : "2017-09-05T14:19:14Z",
        "lastEditedBy" : "8c0b72ae-1f2f-4af5-8a5a-0e5df942b0f5",
        "tags" : [
        ]
      }
    ],
    "commit" : "764d271d28624107f2ca4ff889228f7de1d5022c",
    "line" : 326,
    "diffHunk" : "@@ -1,1 +647,651 @@\twrapperStyle?: any;\n\tlabelStyle?: any;\n\tcursor?: boolean | any | React.ReactElement<any> | React.StatelessComponent<any>;\n\tviewBox: ViewBox;\n\tactive?: boolean;"
  },
  {
    "id" : "bd300c88-c2b1-4a0a-a81d-2e5b494a2d7c",
    "prId" : 19497,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19497#pullrequestreview-60124139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f4a459f-1f1b-4f94-8221-a86b432e5956",
        "parentId" : null,
        "authorId" : "317a00dd-7a6e-44c0-96cc-bd132d5da0af",
        "body" : "The same as the question before. The docs states: `ReactElement | Function`",
        "createdAt" : "2017-09-01T12:33:29Z",
        "updatedAt" : "2017-09-05T14:19:14Z",
        "lastEditedBy" : "317a00dd-7a6e-44c0-96cc-bd132d5da0af",
        "tags" : [
        ]
      },
      {
        "id" : "4fd5f3ed-8d03-4f3a-b4a3-638ed349efd6",
        "parentId" : "6f4a459f-1f1b-4f94-8221-a86b432e5956",
        "authorId" : "8c0b72ae-1f2f-4af5-8a5a-0e5df942b0f5",
        "body" : "Same as before.",
        "createdAt" : "2017-09-01T12:43:20Z",
        "updatedAt" : "2017-09-05T14:19:14Z",
        "lastEditedBy" : "8c0b72ae-1f2f-4af5-8a5a-0e5df942b0f5",
        "tags" : [
        ]
      }
    ],
    "commit" : "764d271d28624107f2ca4ff889228f7de1d5022c",
    "line" : 333,
    "diffHunk" : "@@ -1,1 +653,657 @@\tpayload?: TooltipPayload[];\n\tlabel?: string | number;\n\tcontent?: React.ReactElement<any> | React.StatelessComponent<any> | RechartsFunction;\n\tformatter?: RechartsFunction;\n\tlabelFormatter?: RechartsFunction;"
  },
  {
    "id" : "804068fa-99b5-4ff1-89d3-446e222b1f3d",
    "prId" : 21916,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21916#pullrequestreview-82680838",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd96b5b8-cdfd-468c-bd45-33d70e50f29a",
        "parentId" : null,
        "authorId" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "body" : "The doc links look a bit out of place when none of the other properties have it, I'd suggest removing them and following @mthmulders 's advice of adding test cases. Thanks.",
        "createdAt" : "2017-12-11T23:53:31Z",
        "updatedAt" : "2017-12-11T23:53:36Z",
        "lastEditedBy" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c04b0ce024b3623261ac8792f535787869de7ba",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +879,883 @@    interval?: AxisInterval;\n    reversed?: boolean;\n    // see label section at http://recharts.org/#/en-US/api/XAxis\n    label?: string | number | Label;\n}"
  },
  {
    "id" : "2cdab67a-9cf1-40e0-a3c2-4f193552a112",
    "prId" : 25470,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/25470#pullrequestreview-116952825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4d2523b-26d7-469d-8f5d-77ba6364862f",
        "parentId" : null,
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "Maybe there should be an `AxisProps` interface, since these two have a lot in common?",
        "createdAt" : "2018-05-02T15:40:25Z",
        "updatedAt" : "2018-05-02T15:40:25Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      }
    ],
    "commit" : "65dd4ca294e65db0c228ba1d25a5bd168322a9c2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +938,942 @@    tickSize?: number;\n    // The margin between tick line and the label\n    tickMargin?: number;\n    interval?: AxisInterval;\n    reversed?: boolean;"
  },
  {
    "id" : "9dcb95e1-9eb8-45a3-ad17-d6edaf6bb462",
    "prId" : 26101,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26101#pullrequestreview-125393359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4a7a5c9-d4b4-410a-accd-670f28cfbe47",
        "parentId" : null,
        "authorId" : "66b8ace2-3171-4c7c-b095-4b13406b6f64",
        "body" : "Is `ContentRenderer<Label>` too narrow-typed? What's the problem that this change addresses?",
        "createdAt" : "2018-06-03T11:43:14Z",
        "updatedAt" : "2018-06-03T18:08:16Z",
        "lastEditedBy" : "66b8ace2-3171-4c7c-b095-4b13406b6f64",
        "tags" : [
        ]
      },
      {
        "id" : "a17856c8-95e3-452c-9b65-9e297dbf8107",
        "parentId" : "e4a7a5c9-d4b4-410a-accd-670f28cfbe47",
        "authorId" : "b0e5b7b3-d252-466d-9fe8-c242194bc558",
        "body" : "Label is just incorrect. These are not the props that are passed to the function. I did not have time to write the correct definitions, so I've changed it to any. Which is always better than something incorrect, I believe.",
        "createdAt" : "2018-06-03T12:05:42Z",
        "updatedAt" : "2018-06-03T18:08:16Z",
        "lastEditedBy" : "b0e5b7b3-d252-466d-9fe8-c242194bc558",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d935f62f677c2d317fae9830349a29614374fea",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +209,213 @@    data?: BarData[];\n    // see label section at http://recharts.org/#/en-US/api/Bar\n    label?: boolean | Label | React.SFC<LabelProps> | React.ReactElement<LabelProps> | ContentRenderer<any>;\n}\n"
  },
  {
    "id" : "5aae2259-7928-405d-914e-85b5c15b79ec",
    "prId" : 26101,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26101#pullrequestreview-125403813",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "435579de-1661-4bdc-9a6d-871b0982ca82",
        "parentId" : null,
        "authorId" : "b0e5b7b3-d252-466d-9fe8-c242194bc558",
        "body" : "@mthmulders Same thing as before (not the component is being passed so I've changed it to `any`. We should add correct typings for the render functions eventually, but this works for now.",
        "createdAt" : "2018-06-03T18:12:58Z",
        "updatedAt" : "2018-06-03T18:12:58Z",
        "lastEditedBy" : "b0e5b7b3-d252-466d-9fe8-c242194bc558",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d935f62f677c2d317fae9830349a29614374fea",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +840,844 @@    children?: React.ReactNode[] | React.ReactNode;\n    className?: string;\n    content?: React.ReactElement<any> | ContentRenderer<any>;\n}\n"
  },
  {
    "id" : "05e50c11-4a37-43a6-9d8b-726331fd3898",
    "prId" : 27751,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/27751#pullrequestreview-142499739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27c58606-98ed-47f6-8df1-bd594c9820f1",
        "parentId" : null,
        "authorId" : "cc1874f8-209f-48ad-baa5-7e73b696850f",
        "body" : "I'm a bit confused about this change. Could you clarify why returning null here is desirable?",
        "createdAt" : "2018-08-01T16:02:00Z",
        "updatedAt" : "2018-08-01T16:02:29Z",
        "lastEditedBy" : "cc1874f8-209f-48ad-baa5-7e73b696850f",
        "tags" : [
        ]
      },
      {
        "id" : "8a6d6b1f-f369-4869-8864-1b0bd2f327b4",
        "parentId" : "27c58606-98ed-47f6-8df1-bd594c9820f1",
        "authorId" : "844147fe-b3ae-42d0-8dc3-8e1d6f3c94a3",
        "body" : "The DataKey can be a function which maps data points to their y values on the graph. Not all data points will necessarily have a y-value, e.g. if you have two different data series with slightly different ranges.\r\n\r\nThe example [here](http://recharts.org/en-US/examples/LineChartConnectNulls) shows that null values are not unexpected, yet the DataKey function was previously not allowed to return null",
        "createdAt" : "2018-08-01T16:33:08Z",
        "updatedAt" : "2018-08-01T16:33:08Z",
        "lastEditedBy" : "844147fe-b3ae-42d0-8dc3-8e1d6f3c94a3",
        "tags" : [
        ]
      },
      {
        "id" : "11e37f31-1e58-472b-ab8b-82ee81e73cc9",
        "parentId" : "27c58606-98ed-47f6-8df1-bd594c9820f1",
        "authorId" : "b0e5b7b3-d252-466d-9fe8-c242194bc558",
        "body" : "I've deleted this message, because it's about the return of the function and not the prop. Sorry.",
        "createdAt" : "2018-08-01T16:47:56Z",
        "updatedAt" : "2018-08-01T16:51:57Z",
        "lastEditedBy" : "b0e5b7b3-d252-466d-9fe8-c242194bc558",
        "tags" : [
        ]
      },
      {
        "id" : "62c5815e-0c0a-4a2f-b568-462141c6f0b7",
        "parentId" : "27c58606-98ed-47f6-8df1-bd594c9820f1",
        "authorId" : "cc1874f8-209f-48ad-baa5-7e73b696850f",
        "body" : "That's helpful, thank you!",
        "createdAt" : "2018-08-01T18:12:27Z",
        "updatedAt" : "2018-08-01T18:12:27Z",
        "lastEditedBy" : "cc1874f8-209f-48ad-baa5-7e73b696850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cdc9fdfb81986a610907a3b84c4608162bf1595",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +27,31 @@export type ItemSorter<T> = (a: T, b: T) => number;\nexport type ContentRenderer<P> = (props: P) => React.ReactNode;\nexport type DataKey = string | number | ((dataObject: any) => number | [number, number] | null);\n\nexport type IconType = 'plainline' | 'line' | 'square' | 'rect' | 'circle' | 'cross' | 'diamond' | 'star' | 'triangle' | 'wye' | 'plainline';"
  },
  {
    "id" : "caf2956d-2869-478b-9a65-fbd386032959",
    "prId" : 36626,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36626#pullrequestreview-259721810",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd3dd6bb-4354-4408-98c7-e8cbaddf3cc1",
        "parentId" : null,
        "authorId" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "body" : "I'm not very familiar the library but based on the documentation, seems like `baseValue` is only specific of `AreaChart`. Adding it to the interface will add it to another bunch of classes where the property is not documented. Is that the intended behavior?",
        "createdAt" : "2019-07-08T23:44:13Z",
        "updatedAt" : "2019-07-08T23:44:18Z",
        "lastEditedBy" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "tags" : [
        ]
      },
      {
        "id" : "b472e3d7-ee8b-46c1-af8a-77fc17938ded",
        "parentId" : "cd3dd6bb-4354-4408-98c7-e8cbaddf3cc1",
        "authorId" : "4b472788-f975-4355-9dad-65177a6d6de1",
        "body" : "Because you can put  `Area` inside of composed charts, the prop needs to be there as well so it can be passed down to children of `ComposedChart`.   For a real-world example, if you go to their Composed Char example: http://recharts.org/en-US/examples/LineBarAreaComposedChart you can add `baseValue={450}` to the  `ComposedChart` component and it will have the desired effect. So I'm just documenting existing behavior with this change.",
        "createdAt" : "2019-07-09T13:18:59Z",
        "updatedAt" : "2019-07-09T13:19:00Z",
        "lastEditedBy" : "4b472788-f975-4355-9dad-65177a6d6de1",
        "tags" : [
        ]
      },
      {
        "id" : "8d5f012c-4753-4170-8db3-0e188aced1f5",
        "parentId" : "cd3dd6bb-4354-4408-98c7-e8cbaddf3cc1",
        "authorId" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "body" : "Thanks for clarifying.",
        "createdAt" : "2019-07-09T19:48:23Z",
        "updatedAt" : "2019-07-09T19:48:23Z",
        "lastEditedBy" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8274e1a4d0e3304ff7662359ebbe3e8bf65c0c2",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +99,103 @@    barGap?: number | string;\n    barSize?: number | string;\n    baseValue?: BaseValueType;\n    maxBarSize?: number;\n    style?: object;"
  },
  {
    "id" : "52a23ca5-82f8-4866-a878-e7e41ee40cf7",
    "prId" : 39230,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/39230#pullrequestreview-303928325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92b331ac-e9c5-4515-b6fd-8c453e8d0821",
        "parentId" : null,
        "authorId" : "884bc401-80e6-483f-97c5-507c54215844",
        "body" : "Why not mark them as optional?\r\n\r\n```suggestion\r\nexport type AllowEscapeViewBox = { x?: boolean, y?: boolean };\r\n```",
        "createdAt" : "2019-10-18T09:32:56Z",
        "updatedAt" : "2019-10-21T12:52:09Z",
        "lastEditedBy" : "884bc401-80e6-483f-97c5-507c54215844",
        "tags" : [
        ]
      },
      {
        "id" : "f8b4166b-a949-4cbd-b9b0-cb388367307b",
        "parentId" : "92b331ac-e9c5-4515-b6fd-8c453e8d0821",
        "authorId" : "f2a7014f-3c90-4c73-be94-2a5148163ab7",
        "body" : "because it is not optional that one of them is provided if either `x` or `y` is provided. \r\n\r\nmaking them both optional would make a `allowEscapeViewBox={{}}` prop would be valid input, and, if you look at the code, doing such a thing will cause a typeerror in runtime",
        "createdAt" : "2019-10-18T09:36:15Z",
        "updatedAt" : "2019-10-21T12:52:09Z",
        "lastEditedBy" : "f2a7014f-3c90-4c73-be94-2a5148163ab7",
        "tags" : [
        ]
      },
      {
        "id" : "2a8e0f19-d64d-4ce7-ad6a-594f724b8586",
        "parentId" : "92b331ac-e9c5-4515-b6fd-8c453e8d0821",
        "authorId" : "884bc401-80e6-483f-97c5-507c54215844",
        "body" : "Could you please share an example where it causes typeerror? Looking at merged PR in Recharts it seems like it's going to be totally fine since `allowEscapeViewBox` is still an object.",
        "createdAt" : "2019-10-18T12:24:05Z",
        "updatedAt" : "2019-10-21T12:52:09Z",
        "lastEditedBy" : "884bc401-80e6-483f-97c5-507c54215844",
        "tags" : [
        ]
      },
      {
        "id" : "3f6b6064-c5a1-404c-a037-6775e0eac840",
        "parentId" : "92b331ac-e9c5-4515-b6fd-8c453e8d0821",
        "authorId" : "f2a7014f-3c90-4c73-be94-2a5148163ab7",
        "body" : "You know what.  You're right.  I stand corrected that it would cause a runtime error.\r\n\r\nThat said, the semantics of the code are in line with https://github.com/sindresorhus/type-fest/blob/master/source/require-at-least-one.d.ts.  I now, with your comment, realize that it wouldn't _fail_... but the semantics are still not quite right.\r\n\r\nhere's the code as it exists now:\r\n```tsx\r\nif (allowEscapeViewBox[key]) {\r\n  return unrestricted;\r\n}\r\n```\r\n\r\nIf an empty object is passed in, this case will appropriately not trigger... but the intent is that there's always something there, that is to say, that the type of `allowEscapeViewBox.x` and `allowEscapeViewBox.y` are always `boolean`s, as opposed to `undefined`.\r\n\r\nStill, if you feel passionately about it, I'm happy to make the change you suggest.\r\n\r\n:)\r\n\r\n",
        "createdAt" : "2019-10-18T13:52:05Z",
        "updatedAt" : "2019-10-21T12:52:09Z",
        "lastEditedBy" : "f2a7014f-3c90-4c73-be94-2a5148163ab7",
        "tags" : [
        ]
      },
      {
        "id" : "a0f80554-a5e4-4303-ba0c-968a4c61888b",
        "parentId" : "92b331ac-e9c5-4515-b6fd-8c453e8d0821",
        "authorId" : "884bc401-80e6-483f-97c5-507c54215844",
        "body" : "No, it's totally fine, I was just wondering if there is some hidden knowledge I was missing on 🙂\r\n\r\nBy the way, could you please increment typings versions since your addition in recharts would likely land in `1.8.4`?",
        "createdAt" : "2019-10-18T14:04:40Z",
        "updatedAt" : "2019-10-21T12:52:09Z",
        "lastEditedBy" : "884bc401-80e6-483f-97c5-507c54215844",
        "tags" : [
        ]
      },
      {
        "id" : "c14b4bd3-dc0f-4b95-bc60-0336d249bfd9",
        "parentId" : "92b331ac-e9c5-4515-b6fd-8c453e8d0821",
        "authorId" : "f2a7014f-3c90-4c73-be94-2a5148163ab7",
        "body" : "sure! :)",
        "createdAt" : "2019-10-18T14:11:15Z",
        "updatedAt" : "2019-10-21T12:52:09Z",
        "lastEditedBy" : "f2a7014f-3c90-4c73-be94-2a5148163ab7",
        "tags" : [
        ]
      },
      {
        "id" : "e791057c-14a1-45bb-a9db-25c04f4e4c71",
        "parentId" : "92b331ac-e9c5-4515-b6fd-8c453e8d0821",
        "authorId" : "f2a7014f-3c90-4c73-be94-2a5148163ab7",
        "body" : "just to be clear, you would increment to `1.7.1`, right?",
        "createdAt" : "2019-10-18T14:13:12Z",
        "updatedAt" : "2019-10-21T12:52:09Z",
        "lastEditedBy" : "f2a7014f-3c90-4c73-be94-2a5148163ab7",
        "tags" : [
        ]
      },
      {
        "id" : "16ec29a9-c485-47ac-9551-e5f5ab0c0780",
        "parentId" : "92b331ac-e9c5-4515-b6fd-8c453e8d0821",
        "authorId" : "884bc401-80e6-483f-97c5-507c54215844",
        "body" : "I would increment it to `1.8` to be aligned with version of the library, plus, I would also hold off merging it until a new version of recharts will be released containing the feature.",
        "createdAt" : "2019-10-18T14:17:58Z",
        "updatedAt" : "2019-10-21T12:52:09Z",
        "lastEditedBy" : "884bc401-80e6-483f-97c5-507c54215844",
        "tags" : [
        ]
      },
      {
        "id" : "41e16c98-7c57-4ec0-a04c-127d8373f1d4",
        "parentId" : "92b331ac-e9c5-4515-b6fd-8c453e8d0821",
        "authorId" : "f2a7014f-3c90-4c73-be94-2a5148163ab7",
        "body" : "like this? https://github.com/DefinitelyTyped/DefinitelyTyped/pull/39230/commits/996fbd33f4810bb8d537906f19cd625bfe8ed166\r\n\r\nI know some projects go back and forth on whether to align the type version with the project because there's always that situation where the upstream releases `1.1.1` and the types are updated, but then someone discovers a bug in the types and suddenly the types are `1.1.2` and the project is still `1.1.1`.\r\n\r\nSounds good though :)",
        "createdAt" : "2019-10-18T14:21:06Z",
        "updatedAt" : "2019-10-21T12:52:09Z",
        "lastEditedBy" : "f2a7014f-3c90-4c73-be94-2a5148163ab7",
        "tags" : [
        ]
      },
      {
        "id" : "39785664-4fa4-441a-a7bf-991aafcdcacf",
        "parentId" : "92b331ac-e9c5-4515-b6fd-8c453e8d0821",
        "authorId" : "f2a7014f-3c90-4c73-be94-2a5148163ab7",
        "body" : "> I would also hold off merging it until a new version of recharts will be released containing the feature.\r\n\r\nSounds fine.  Though, I will note, that it's a backwards compatible change in that if someone does specify a value here it will just do nothing.  I'd prefer if we could merge it sooner than later so I can use it, but I can always copy/past into my project for now so no biggie :)\r\n\r\nThanks for your review!",
        "createdAt" : "2019-10-18T14:22:33Z",
        "updatedAt" : "2019-10-21T12:52:09Z",
        "lastEditedBy" : "f2a7014f-3c90-4c73-be94-2a5148163ab7",
        "tags" : [
        ]
      },
      {
        "id" : "02ab42e7-b991-4c4c-b007-9da00cd83d93",
        "parentId" : "92b331ac-e9c5-4515-b6fd-8c453e8d0821",
        "authorId" : "884bc401-80e6-483f-97c5-507c54215844",
        "body" : ">like this? 996fbd3\r\n\r\n>I know some projects go back and forth on whether to align the type version with the project because there's always that situation where the upstream releases 1.1.1 and the types are updated, but then someone discovers a bug in the types and suddenly the types are 1.1.2 and the project is still 1.1.1.\r\n\r\nIndeed, I, personally, don't have a preference for that but since the comment says `Type definitions for Recharts x.x` I assume it means that type definitions are aligned with specified version.",
        "createdAt" : "2019-10-18T14:27:41Z",
        "updatedAt" : "2019-10-21T12:52:09Z",
        "lastEditedBy" : "884bc401-80e6-483f-97c5-507c54215844",
        "tags" : [
        ]
      }
    ],
    "commit" : "abf9f943bc176aca8e0ba4ab559dce86ef6935a1",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +838,842 @@}\n\nexport type AllowEscapeViewBox = { x: boolean } | { y: boolean } | { x: boolean, y: boolean };\n\nexport interface TooltipPayload {"
  },
  {
    "id" : "4d96eff3-f760-46ef-a783-011beb9f609d",
    "prId" : 40067,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/40067#pullrequestreview-310464017",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "878269b1-47e2-4886-8a67-54cfd9317b99",
        "parentId" : null,
        "authorId" : "3b8bcc99-3146-4198-abda-b10cf1e3cf0e",
        "body" : "I am wondering about this `any`. The function will receive `props` and `state` as parameters. Is there a way we can enforce that? We already have all the props defined for each type of chart",
        "createdAt" : "2019-11-01T12:44:55Z",
        "updatedAt" : "2019-11-01T12:44:56Z",
        "lastEditedBy" : "3b8bcc99-3146-4198-abda-b10cf1e3cf0e",
        "tags" : [
        ]
      },
      {
        "id" : "526c0cea-8646-45d1-bf95-621ce49d9f70",
        "parentId" : "878269b1-47e2-4886-8a67-54cfd9317b99",
        "authorId" : "1e0d3e6b-f560-4dcf-9662-715523152338",
        "body" : "Then props can be LineChartProps, BarChartProps, ComposedChartProps, AreaChartProps, PieChartProps, RadarChartProps, RadialBarChartProps, ScatterChartProps or FunnelChartProps. The same is for the state. Also, we have no definitions for these state types. Do you really want me to create all types for the state? ",
        "createdAt" : "2019-11-01T13:09:27Z",
        "updatedAt" : "2019-11-01T13:09:27Z",
        "lastEditedBy" : "1e0d3e6b-f560-4dcf-9662-715523152338",
        "tags" : [
        ]
      },
      {
        "id" : "2544c467-cad4-46a4-a861-dab33466f69c",
        "parentId" : "878269b1-47e2-4886-8a67-54cfd9317b99",
        "authorId" : "3b8bcc99-3146-4198-abda-b10cf1e3cf0e",
        "body" : "well, I guess there's nothing we can do for the state part 😞 ",
        "createdAt" : "2019-11-01T13:18:02Z",
        "updatedAt" : "2019-11-01T13:18:02Z",
        "lastEditedBy" : "3b8bcc99-3146-4198-abda-b10cf1e3cf0e",
        "tags" : [
        ]
      },
      {
        "id" : "83caf863-375a-46db-b258-70fb1029719a",
        "parentId" : "878269b1-47e2-4886-8a67-54cfd9317b99",
        "authorId" : "1e0d3e6b-f560-4dcf-9662-715523152338",
        "body" : "I don't think that these combined props without the state will be more useful than any type. ",
        "createdAt" : "2019-11-01T13:44:00Z",
        "updatedAt" : "2019-11-01T13:44:00Z",
        "lastEditedBy" : "1e0d3e6b-f560-4dcf-9662-715523152338",
        "tags" : [
        ]
      },
      {
        "id" : "f5bdc641-924b-4b82-a9d8-c5c6d8090869",
        "parentId" : "878269b1-47e2-4886-8a67-54cfd9317b99",
        "authorId" : "3b8bcc99-3146-4198-abda-b10cf1e3cf0e",
        "body" : "oh yes, I agree. Sorry if it looked that you should do the Props part, I did not mean that. It doesn't make sense without the state",
        "createdAt" : "2019-11-01T13:51:45Z",
        "updatedAt" : "2019-11-01T13:51:45Z",
        "lastEditedBy" : "3b8bcc99-3146-4198-abda-b10cf1e3cf0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "c880ae4bed0be1f6d2033bbb2a824fae97c47376",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1087,1091 @@\nexport interface CustomizedProps {\n    component: ContentRenderer<any> | React.ReactElement;\n}\n"
  }
]