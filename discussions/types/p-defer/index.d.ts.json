[
  {
    "id" : "4d7b3d15-4dc4-4197-af10-c64db1481b68",
    "prId" : 30671,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30671#pullrequestreview-181026571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7d3d622-108f-465a-a534-e3e33f5cda1c",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "I think `resolve` and `reject` usually return promises.  Does this library work differently?",
        "createdAt" : "2018-12-03T21:36:55Z",
        "updatedAt" : "2018-12-03T21:36:55Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "054d0a7c-e4db-4771-94a4-9b3726f14cd6",
        "parentId" : "a7d3d622-108f-465a-a534-e3e33f5cda1c",
        "authorId" : "b020629e-b52b-403a-98c4-dd5d98f3aa6b",
        "body" : "No, `resolve` and `reject` pretty much always return `undefined`, this lib is no exception.\r\nSee:\r\nhttps://www.ecma-international.org/ecma-262/6.0/#sec-promise-resolve-functions\r\n\r\nFrom lib.es2015.promise.d.ts:\r\n```typescript\r\nnew <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;\r\n\r\n```",
        "createdAt" : "2018-12-03T22:31:51Z",
        "updatedAt" : "2018-12-03T22:35:17Z",
        "lastEditedBy" : "b020629e-b52b-403a-98c4-dd5d98f3aa6b",
        "tags" : [
        ]
      },
      {
        "id" : "d0ed3b1c-8409-467e-8f6c-3149b2562264",
        "parentId" : "a7d3d622-108f-465a-a534-e3e33f5cda1c",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "I'm convinced :smile:",
        "createdAt" : "2018-12-03T23:13:50Z",
        "updatedAt" : "2018-12-03T23:13:51Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      }
    ],
    "commit" : "16033f3b89831cdd6f23c1236ed8a0b741ca522e",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +11,15 @@declare namespace pDefer {\n    interface DeferredPromise<T> {\n        resolve(value?: T | PromiseLike<T>): void;\n        reject(reason: any): void;\n        promise: Promise<T>;"
  }
]