[
  {
    "id" : "b60e9ce5-d3f4-42fc-b394-3b4466680976",
    "prId" : 47103,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/47103#pullrequestreview-478588930",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "795c795a-0452-40de-9a00-91fa9e1f48e7",
        "parentId" : null,
        "authorId" : "5361226e-1847-4be5-8baa-6b64b1213f44",
        "body" : "May I ask what would be the use case of these default state fields?\r\nBecause I couldn't find `memory-fs` in koa-webpack's dependency list.\r\nIt seems the purpose of `DefaultState` has nothing to do with `koa-webpack` as well.\r\nIf you need to access these fields, this way might work without modifying type file:\r\n```typescript\r\nconst app = new Koa<{\r\n    fs: MemoryFileSystem;\r\n    stats: webpack.Stats;\r\n}>();\r\n\r\napp.use(ctx => {\r\n    // $ExpectType MemoryFileSystem\r\n    ctx.state.fs;\r\n    ctx.body = ctx.state.fs.createReadStream('file.js');\r\n});\r\n\r\napp.use(ctx => {\r\n    // $ExpectType Stats\r\n    ctx.state.stats;\r\n    ctx.body = ctx.state.stats.toJson();\r\n});\r\n```\r\n\r\nThe README of `memory-fs` package shows that it has been deprecated as well.\r\nWe should avoid adding a deprecated package to the dependency list.",
        "createdAt" : "2020-08-29T04:32:16Z",
        "updatedAt" : "2020-08-31T13:06:15Z",
        "lastEditedBy" : "5361226e-1847-4be5-8baa-6b64b1213f44",
        "tags" : [
        ]
      },
      {
        "id" : "fff3847a-a224-46f1-981e-a21a3b727892",
        "parentId" : "795c795a-0452-40de-9a00-91fa9e1f48e7",
        "authorId" : "67195de8-a220-482d-b913-a938505457ce",
        "body" : "I use this [here](https://github.com/appsemble/appsemble/blob/master/packages/server/src/middleware/frontend.ts#L54). We use Webpack to output `index.html` as a moustache template. We then render the template using Koa, which comes from a static file in production, but from the `memory-fs` injected by `koa-webpack` in development. I won’t argue whether it’s a pretty solution, but it works.\r\n\r\n---\r\n\r\nThis is how `DefaultState` is supposed to be used according to the tsdoc ([link](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/koa/index.d.ts#L520-L523)). The same goes for `DefaultContext`.\r\n\r\nThere are multiple packages on DefinitelyTyped that augment these types this way.\r\n\r\n---\r\n\r\nThe `MemoryFileSystem` type comes from `webpack-dev-middleware`. I could change it to `webpackDevMiddleware.Options['fs']` if you prefer.",
        "createdAt" : "2020-08-29T10:43:50Z",
        "updatedAt" : "2020-08-31T13:06:15Z",
        "lastEditedBy" : "67195de8-a220-482d-b913-a938505457ce",
        "tags" : [
        ]
      },
      {
        "id" : "05ea155f-ed9e-4924-9c35-b43b9d8332b8",
        "parentId" : "795c795a-0452-40de-9a00-91fa9e1f48e7",
        "authorId" : "5361226e-1847-4be5-8baa-6b64b1213f44",
        "body" : "Thanks for your explanation :smile:\r\nI'm looking for a clean solution to let TypeScript infer the type itself as much as possible.\r\nBut the `compose` situation you are facing seems not easy to infer correctly.\r\nThere might be no way to infer the injected values (ctx.state.`fs`) before the app really applies middleware.\r\nThe second element of `compose` function can only get the original type of `ctx.state` without `fs`.\r\nI agree with you that `DefaultState` would be the straightforward solution.\r\n\r\nBesides, I found that `webpack-dev-middleware` injected the `fs` through these lines:\r\nhttps://github.com/webpack/webpack-dev-middleware/blob/v3.7.2/lib/fs.js#L138\r\nhttps://github.com/webpack/webpack-dev-middleware/blob/v3.7.2/lib/middleware.js#L38\r\nTo point out where does the `fs` come from.\r\nI think that `webpackDevMiddleware .Options['fs']` is more clear than `MemoryFileSystem`.\r\n\r\nI'll review the changes soon so that we can merge it :+1:",
        "createdAt" : "2020-08-31T12:39:17Z",
        "updatedAt" : "2020-08-31T13:06:15Z",
        "lastEditedBy" : "5361226e-1847-4be5-8baa-6b64b1213f44",
        "tags" : [
        ]
      },
      {
        "id" : "02f8f68a-12d5-40b9-961f-7347dc9aca0f",
        "parentId" : "795c795a-0452-40de-9a00-91fa9e1f48e7",
        "authorId" : "67195de8-a220-482d-b913-a938505457ce",
        "body" : "I agree Koa types are a bit odd.\r\n\r\nI changed the type from `MemoryFileSystem` to `webpackDevMiddleware.Options['fs']`",
        "createdAt" : "2020-08-31T12:56:24Z",
        "updatedAt" : "2020-08-31T13:06:15Z",
        "lastEditedBy" : "67195de8-a220-482d-b913-a938505457ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "207509b1b789dd7b10f6738c3487ecabbd11b879",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +14,18 @@\ndeclare module 'koa' {\n    interface DefaultState {\n        fs: webpackDevMiddleware.Options['fs'];\n        stats: webpack.Stats;"
  }
]