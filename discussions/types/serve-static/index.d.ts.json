[
  {
    "id" : "765681d5-a4f4-4143-a188-d985c83c56cd",
    "prId" : 48591,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/48591#pullrequestreview-506105281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ad04bdf-7a20-4f59-a2c5-5847aef0e665",
        "parentId" : null,
        "authorId" : "6b174fb4-9ad3-4caf-9ebd-24075cb23037",
        "body" : "Making the type parameter optional to avoid unnecessary breaking change for those who have used `ServeStaticOptions` in their codebase. I often avoid going so overboard to avoid breaking changes in types but it's not that bad hence went with it.",
        "createdAt" : "2020-10-07T18:17:33Z",
        "updatedAt" : "2020-10-10T15:47:22Z",
        "lastEditedBy" : "6b174fb4-9ad3-4caf-9ebd-24075cb23037",
        "tags" : [
        ]
      },
      {
        "id" : "9dfbd5af-52e9-4e52-9f4d-68104b6e8e02",
        "parentId" : "4ad04bdf-7a20-4f59-a2c5-5847aef0e665",
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "Isn't this still a breaking change? Anyone who had previously used `serveStatic` with a custom `setHeaders` callback will now get the weaker `http.OutgoingMessage` instead of `express.Response` when *not* contextually typed. This is mitigated somewhat by the fact that `app.use(serveStatic(...))` should result in `R` being contextually typed to `express.Response`, but if anyone writes code like this then they will be broken:\r\n\r\n```ts\r\nconst middleware = serveStatic(...); // no contextual type\r\napp.use(middleware); // error: `OutgoingMessage` is not assignable to `Response`.\r\n```\r\n\r\nIt would be good to have the tests verify the contextual type for the `app.use(serveStatic(...))` case. I'm not sure how often anyone writes `serveStatic(...)` outside of a `.use()`, so I'm not sure how much of an impact this change will be.",
        "createdAt" : "2020-10-10T01:03:26Z",
        "updatedAt" : "2020-10-10T15:47:22Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      },
      {
        "id" : "a40d68c5-0c38-4c15-a0bd-e122f6ad2cec",
        "parentId" : "4ad04bdf-7a20-4f59-a2c5-5847aef0e665",
        "authorId" : "6b174fb4-9ad3-4caf-9ebd-24075cb23037",
        "body" : "Well ultimately it is a breaking change although making type parameter optional saves some error in cases where users have written `const options: ServeStaticOptions = { ... }` and are not using express exclusive methods on the response.\r\n\r\n> [...] but if anyone writes code like this then they will be broken:\r\n> ```\r\n> const middleware = serveStatic(...); // no contextual type\r\n> app.use(middleware); // error: `OutgoingMessage` is not assignable to `Response`.\r\n> ```\r\n\r\nUmm, not really? This would compile ...\r\n```typescript\r\nconst middleware = serveStatic({ setHeaders: res => res.setHeader(\"foo, bar\") }) // R is http.OutgoingMessage\r\napp.use(middleware) // works because `use` will invoke with `express.Response` which is wider than `http.OutgoingMessage` which is required by `middleware`\r\n```\r\n... however this would not (which would have compiled with previous version) ...\r\n```typescript\r\nconst middleware = serveStatic({ setHeaders: res => res.set(\"foo, bar\") }) // R is http.OutgoingMessage, error: property set does not exist\r\napp.use(middleware) // no error here\r\n```\r\n\r\n> It would be good to have the tests verify the contextual type for the app.use(serveStatic(...)) case.\r\n\r\nYes as you might have seen I have added tests for this and the above expected error as well.\r\n\r\n> I'm not sure how often anyone writes serveStatic(...) outside of a .use(), so I'm not sure how much of an impact this change will be.\r\n\r\nYeah and even if they do write `serveStatic(...)` outside `use` it's won't be a breaking change as long as they don't use express exclusive methods in `setHeaders`. As I had said in the description:\r\n\r\n> So it indeed is a breaking change but only for people who invoke the serveStatic with setHeaders option using express apis and the invocation is not directly passed to use (which makes the response not infer to express.Response).\r\n\r\nBut all things said I don't think this will have a huge impact.",
        "createdAt" : "2020-10-10T15:24:15Z",
        "updatedAt" : "2020-10-12T16:22:15Z",
        "lastEditedBy" : "6b174fb4-9ad3-4caf-9ebd-24075cb23037",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbb12c7e0c34275dbea1a4bdb62dc50fd24b0dd3",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +23,27 @@declare namespace serveStatic {\n    var mime: typeof m;\n    interface ServeStaticOptions<R extends http.OutgoingMessage = http.OutgoingMessage> {\n        /**\n         * Enable or disable setting Cache-Control response header, defaults to true."
  },
  {
    "id" : "71729b38-bc01-4b5f-8efe-80bf2770a291",
    "prId" : 48591,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/48591#pullrequestreview-506048908",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2eb712d-2b9b-49b6-ba0b-ecb6f34b5c1e",
        "parentId" : null,
        "authorId" : "6b174fb4-9ad3-4caf-9ebd-24075cb23037",
        "body" : "This assumes users have `@types/node` installed, which I guess is okay?",
        "createdAt" : "2020-10-07T18:21:55Z",
        "updatedAt" : "2020-10-10T15:47:22Z",
        "lastEditedBy" : "6b174fb4-9ad3-4caf-9ebd-24075cb23037",
        "tags" : [
        ]
      },
      {
        "id" : "07d7827d-7495-4e34-b2b0-7d94a43c7da2",
        "parentId" : "a2eb712d-2b9b-49b6-ba0b-ecb6f34b5c1e",
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "You should probably indicate that with `/// <reference types=\"node\" />`.",
        "createdAt" : "2020-10-10T00:54:33Z",
        "updatedAt" : "2020-10-10T15:47:22Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbb12c7e0c34275dbea1a4bdb62dc50fd24b0dd3",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +9,13 @@/// <reference types=\"node\" />\nimport * as m from \"mime\";\nimport * as http from \"http\";\n\n/**"
  }
]