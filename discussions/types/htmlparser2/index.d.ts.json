[
  {
    "id" : "1e69c63c-3ed8-4a1c-9efd-9e1858a16c5b",
    "prId" : 33921,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33921#pullrequestreview-215311740",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5c63eeb-e1a8-41bc-9e58-84bb0bc71198",
        "parentId" : null,
        "authorId" : "45d9c670-2241-42ab-8e9e-9388e528c740",
        "body" : "This will be a breaking change for anyone importing `Options`, but maybe that's okay...\r\n\r\nWe could add a `@deprecated` `export type Options = ParserOptions` though",
        "createdAt" : "2019-03-16T10:58:35Z",
        "updatedAt" : "2019-03-20T12:44:28Z",
        "lastEditedBy" : "45d9c670-2241-42ab-8e9e-9388e528c740",
        "tags" : [
        ]
      },
      {
        "id" : "9cae64bb-5023-4b1c-a632-51c5042b4ebf",
        "parentId" : "a5c63eeb-e1a8-41bc-9e58-84bb0bc71198",
        "authorId" : "43901c7c-885e-43b9-b049-1bf670d2d35c",
        "body" : "Yes, I guess my inexperience working with this shines through. The @ deprecated decorator doesn't work though. Would you consider `/** @deprecated */ export type Options = ParserOptions` or maybe stick with the old naming? (I guess this will be braking changes anyway since the old handler and the new DomHandler isn't the same. I just wanted to clearly separate the DomHandlerOptions from the options for the parser)",
        "createdAt" : "2019-03-16T11:42:07Z",
        "updatedAt" : "2019-03-20T12:44:28Z",
        "lastEditedBy" : "43901c7c-885e-43b9-b049-1bf670d2d35c",
        "tags" : [
        ]
      }
    ],
    "commit" : "87c16b285f9fa6686735fa6a2e585bcc69a9f2d9",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +15,19 @@export { DomElement, DomHandlerOptions, DomHandler, Element, Node } from 'domhandler';\n\nexport interface ParserOptions {\n\n    /***"
  }
]