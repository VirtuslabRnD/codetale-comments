[
  {
    "id" : "1167b908-d2d5-4e53-9c7e-2d4930541649",
    "prId" : 18622,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18622#pullrequestreview-56524078",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "200d64ac-4e23-4378-90c4-83d2302c8e41",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "It appears that this will result in a call to the `TransitionGroup` ctor, which is impossible to invoke when it is pulled in via an `import * as` import.",
        "createdAt" : "2017-08-08T21:41:33Z",
        "updatedAt" : "2017-08-16T03:41:01Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "b32c5f31-bee5-41a4-912b-0cbfb2796228",
        "parentId" : "200d64ac-4e23-4378-90c4-83d2302c8e41",
        "authorId" : "ce6722c6-cf8d-4e9e-b4f2-07d1e2bcb965",
        "body" : "Have you checked the transpiled code and not the source file? This is actually correct import because `TransitionGroup` and `CSSTransition` are converted into CJS modules during compilation. ",
        "createdAt" : "2017-08-09T01:04:23Z",
        "updatedAt" : "2017-08-16T03:41:01Z",
        "lastEditedBy" : "ce6722c6-cf8d-4e9e-b4f2-07d1e2bcb965",
        "tags" : [
        ]
      },
      {
        "id" : "2409fac3-2e89-47aa-83d6-8cc4f935ac07",
        "parentId" : "200d64ac-4e23-4378-90c4-83d2302c8e41",
        "authorId" : "d6f4bc0a-728d-4289-8443-0dd8f532a636",
        "body" : "Then you should be writing `import TransitionGroup = require('...')`;\r\n\r\nThere is **absolutely no point** to writing code that pretends to be ES6 but actually can never work when run as ES6. See https://stackoverflow.com/questions/39415661/what-does-resolves-to-a-non-module-entity-and-cannot-be-imported-using-this",
        "createdAt" : "2017-08-09T17:10:48Z",
        "updatedAt" : "2017-08-16T03:41:01Z",
        "lastEditedBy" : "d6f4bc0a-728d-4289-8443-0dd8f532a636",
        "tags" : [
        ]
      },
      {
        "id" : "78af722a-3057-405e-8dfe-6b938593135a",
        "parentId" : "200d64ac-4e23-4378-90c4-83d2302c8e41",
        "authorId" : "ce6722c6-cf8d-4e9e-b4f2-07d1e2bcb965",
        "body" : "@RyanCavanaugh The module is converted from ES6 `default` export to `module.export = exports['default']` in the compiled code. I'm using the `namespace` hack here, also mentioned in your Stackoverflow post to be eble to export corresponding types along with the classes themselves. I'm not sure if there is any other way to export smething else than the main class if just using `module.export = SomeClass`. I want to be able to import all the types along with cjs import ie.:\r\n```ts\r\nimport TransitionGroup = require(\"react-transition-group/TransitionGroup\");\r\nimport { TransitionGroupProps } from \"react-transiton-group/TransitionGroup\";\r\n```\r\nI don't think it woul be possible with `require()` syntax or am I missing something?",
        "createdAt" : "2017-08-09T23:55:44Z",
        "updatedAt" : "2017-08-16T03:41:01Z",
        "lastEditedBy" : "ce6722c6-cf8d-4e9e-b4f2-07d1e2bcb965",
        "tags" : [
        ]
      },
      {
        "id" : "36a192a1-17ab-4955-983c-808186ba0564",
        "parentId" : "200d64ac-4e23-4378-90c4-83d2302c8e41",
        "authorId" : "d6f4bc0a-728d-4289-8443-0dd8f532a636",
        "body" : "If the class is on the default export then you can write `import TransitionGroup from \"...\"`",
        "createdAt" : "2017-08-10T00:00:12Z",
        "updatedAt" : "2017-08-16T03:41:01Z",
        "lastEditedBy" : "d6f4bc0a-728d-4289-8443-0dd8f532a636",
        "tags" : [
        ]
      },
      {
        "id" : "4d30f08b-ee93-4572-85c0-8d0c1452e540",
        "parentId" : "200d64ac-4e23-4378-90c4-83d2302c8e41",
        "authorId" : "ce6722c6-cf8d-4e9e-b4f2-07d1e2bcb965",
        "body" : "@RyanCavanaugh Transpiled code does not have default export anymore after its converted to cjs module. The ES6 default export is overridden and thus this import won't work anymore, returning `undefined`. The changed exports/imports are indeed correct at this point.",
        "createdAt" : "2017-08-14T23:41:48Z",
        "updatedAt" : "2017-08-16T03:41:01Z",
        "lastEditedBy" : "ce6722c6-cf8d-4e9e-b4f2-07d1e2bcb965",
        "tags" : [
        ]
      },
      {
        "id" : "10f76d7a-1a44-47a5-b9bf-d4110b144a50",
        "parentId" : "200d64ac-4e23-4378-90c4-83d2302c8e41",
        "authorId" : "d6f4bc0a-728d-4289-8443-0dd8f532a636",
        "body" : "`import * as X from 'y';` is an ES6 module object import.\r\nES6 module object imports are never callable/constructable.\r\nYou are attempting to call or construct an ES6 module object import, which is not legal.\r\n\r\nWhatever transpiler set up you have that makes this happen to work is irrelevant. `import * as X from 'y';` followed by `X()` or `new X()` is always wrong and attempting to make it work by breaking the definition file is just going to break people who are doing correct things. This change will not be merged",
        "createdAt" : "2017-08-15T22:16:23Z",
        "updatedAt" : "2017-08-16T03:41:01Z",
        "lastEditedBy" : "d6f4bc0a-728d-4289-8443-0dd8f532a636",
        "tags" : [
        ]
      },
      {
        "id" : "704137ef-3de3-4b99-9d89-8400739f1d03",
        "parentId" : "200d64ac-4e23-4378-90c4-83d2302c8e41",
        "authorId" : "ce6722c6-cf8d-4e9e-b4f2-07d1e2bcb965",
        "body" : "I changed import to `import X = require(\"...\")` so they are cjs imports as well as tranpiled code. I tested this in my actual aplications and that seems to work fine. Is that what you were asking? If not then could you share what is the proper solution here? The \"namespace workaround\" is all over the place in the definitions in DT and countless modules use such imports. Are you saying that they are all broken?",
        "createdAt" : "2017-08-16T03:45:01Z",
        "updatedAt" : "2017-08-16T03:45:01Z",
        "lastEditedBy" : "ce6722c6-cf8d-4e9e-b4f2-07d1e2bcb965",
        "tags" : [
        ]
      }
    ],
    "commit" : "f585e6f27f32facf2664f1b4d3b9e7575ecabf98",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +15,19 @@\n    return (\n        <TransitionGroup\n            component=\"ul\"\n            className=\"animated-list\""
  }
]