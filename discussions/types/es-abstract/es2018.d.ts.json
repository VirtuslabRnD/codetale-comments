[
  {
    "id" : "b03a89b6-c7d2-409d-b818-fbaca2d00279",
    "prId" : 38979,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/38979#pullrequestreview-299541130",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8b1305d-5b46-4422-bef2-42b4c63e9477",
        "parentId" : null,
        "authorId" : "f20e512d-d787-45a8-a000-96a979941658",
        "body" : "```suggestion\r\n\tPromiseResolve: typeof Promise.resolve\r\n```",
        "createdAt" : "2019-10-09T16:08:14Z",
        "updatedAt" : "2020-01-03T21:02:41Z",
        "lastEditedBy" : "f20e512d-d787-45a8-a000-96a979941658",
        "tags" : [
        ]
      },
      {
        "id" : "f2192a4a-65c0-4daa-94f8-1385e885ba42",
        "parentId" : "d8b1305d-5b46-4422-bef2-42b4c63e9477",
        "authorId" : "e5209397-2510-4745-aef6-1632dc787392",
        "body" : "The current type definition is correct, because `Promise.resolve` takes one parameter, whereas `PromiseResolve` takes 2, as it’s essentially:\r\n```ts\r\nfunction PromiseResolve<T>(C: PromiseConstructorLike, x: T) {\r\n\treturn Promise.resolve.call(C, x);\r\n}\r\n```",
        "createdAt" : "2019-10-09T16:13:23Z",
        "updatedAt" : "2020-01-03T21:02:41Z",
        "lastEditedBy" : "e5209397-2510-4745-aef6-1632dc787392",
        "tags" : [
        ]
      },
      {
        "id" : "5d3d9a34-2826-427e-9607-94ad33b97520",
        "parentId" : "d8b1305d-5b46-4422-bef2-42b4c63e9477",
        "authorId" : "f20e512d-d787-45a8-a000-96a979941658",
        "body" : "ahhh fair point. in that case, what about `typeof Promise.resolve.call`?",
        "createdAt" : "2019-10-09T16:16:48Z",
        "updatedAt" : "2020-01-03T21:02:41Z",
        "lastEditedBy" : "f20e512d-d787-45a8-a000-96a979941658",
        "tags" : [
        ]
      },
      {
        "id" : "6d711577-11d1-429c-bec4-cf9a74897c80",
        "parentId" : "d8b1305d-5b46-4422-bef2-42b4c63e9477",
        "authorId" : "e5209397-2510-4745-aef6-1632dc787392",
        "body" : "That won’t work, as `typeof Promise.resolve.call` is:\r\n```ts\r\n(this: Function, thisArg: any, ...argArray: any[]) => any\r\n```\r\nWhich comes from [`lib.es5.d.ts`](https://github.com/microsoft/TypeScript/blob/3d130b7d5e64868d91b8f4b8b985dbc2bec45e43/lib/lib.es5.d.ts#L280-L285).",
        "createdAt" : "2019-10-09T16:19:18Z",
        "updatedAt" : "2020-01-03T21:02:41Z",
        "lastEditedBy" : "e5209397-2510-4745-aef6-1632dc787392",
        "tags" : [
        ]
      },
      {
        "id" : "c3fb36f5-504f-40e9-867d-5f4c3f9a80d4",
        "parentId" : "d8b1305d-5b46-4422-bef2-42b4c63e9477",
        "authorId" : "f20e512d-d787-45a8-a000-96a979941658",
        "body" : "hmm, i thought the .call overloads were supposed to work here. `Promise.resolve.call` should  have a typeof `(thisArg, value)`.",
        "createdAt" : "2019-10-09T16:21:37Z",
        "updatedAt" : "2020-01-03T21:02:41Z",
        "lastEditedBy" : "f20e512d-d787-45a8-a000-96a979941658",
        "tags" : [
        ]
      },
      {
        "id" : "6695afee-daae-4ffb-b941-d2c510fa1096",
        "parentId" : "d8b1305d-5b46-4422-bef2-42b4c63e9477",
        "authorId" : "e5209397-2510-4745-aef6-1632dc787392",
        "body" : "That’s only when you use `strictBindCallApply`, and only for code that actually uses it like so:\r\n```ts\r\nfunction NewCustomPromise<T>(someValue: T): CustomPromise<T> {\r\n\tconst p = Promise.resolve.call(CustomPromise, someValue);\r\n\t// Do stuff with `p`\r\n\treturn p;\r\n}\r\n```",
        "createdAt" : "2019-10-09T16:29:00Z",
        "updatedAt" : "2020-01-03T21:02:41Z",
        "lastEditedBy" : "e5209397-2510-4745-aef6-1632dc787392",
        "tags" : [
        ]
      }
    ],
    "commit" : "222334139e52fc16369464cfb5dc95c82f71192f",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +16,20 @@\tNumberToString(m: number): string;\n\tCopyDataProperties<T, S, E extends ES2017.PropertyKey>(target: T, source: S, excludedItems: E[]): T & Omit<S, E>;\n\tPromiseResolve<T>(C: PromiseConstructor, x: T): Promise<T>;\n\tPromiseResolve<C extends PromiseConstructorLike, T>(C: C, x: T): PromiseConstructorLikeReturnType<C, T>;\n"
  }
]