[
  {
    "id" : "f33dbabe-4e79-458f-baa2-c0470a41ed0f",
    "prId" : 38361,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/38361#pullrequestreview-289030010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18a5503a-de15-445a-947d-cc9905c3db96",
        "parentId" : null,
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "Can keys really be `any`?",
        "createdAt" : "2019-09-16T21:33:17Z",
        "updatedAt" : "2019-09-24T13:01:16Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      },
      {
        "id" : "7e4462a3-efa6-4d31-93b8-b12f90a88631",
        "parentId" : "18a5503a-de15-445a-947d-cc9905c3db96",
        "authorId" : "8d64c503-03dc-41ca-90aa-310f2659fb3d",
        "body" : "From [CacheInterface](https://hapi.dev/family/joi/?v=16.0.1#cache-interface) docs:\r\n\r\n> Note that key and value can be anything including objects, array, etc.\r\n\r\nI will add documentation to it.",
        "createdAt" : "2019-09-17T05:48:16Z",
        "updatedAt" : "2019-09-24T13:01:16Z",
        "lastEditedBy" : "8d64c503-03dc-41ca-90aa-310f2659fb3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c5efa79b3590ff8f8656c1c67cbd21e7fd6d90f",
    "line" : 661,
    "diffHunk" : "@@ -1,1 +436,440 @@         * Note that key and value can be anything including objects, array, etc.\n         */\n        set(key: any, value: any): void;\n\n        /**"
  },
  {
    "id" : "7227f8f0-eacc-4d53-a91c-07518f56bd97",
    "prId" : 38361,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/38361#pullrequestreview-289066184",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a77e8ae-0ad8-41cc-986d-fb2104a33871",
        "parentId" : null,
        "authorId" : "6304627b-68f2-4004-b87a-f595d65daf0a",
        "body" : "We should add `flags?: Record<string, Flag>;` here with:\r\n```\r\n    interface Flag {\r\n        setter?: string;\r\n        default?: any\r\n    }\r\n```\r\n\r\n(see https://github.com/hapijs/joi/blob/master/lib/schemas.js#L85-L88)",
        "createdAt" : "2019-09-17T07:28:11Z",
        "updatedAt" : "2019-09-24T13:01:16Z",
        "lastEditedBy" : "6304627b-68f2-4004-b87a-f595d65daf0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c5efa79b3590ff8f8656c1c67cbd21e7fd6d90f",
    "line" : 2884,
    "diffHunk" : "@@ -1,1 +1854,1858 @@        cast?: Record<string, { from(value: any): any; to(value: any, helpers: CustomHelpers): any }>;\n        properties?: Record<string, any>;\n    }\n\n    type ExtensionFactory = (joi: Root) => Extension;"
  },
  {
    "id" : "ec76a627-39f2-40fd-b1fe-0d7a2f90debe",
    "prId" : 38361,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/38361#pullrequestreview-309661040",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d1b08f4-0cba-40bf-a196-ac90e6ee7209",
        "parentId" : null,
        "authorId" : "6304627b-68f2-4004-b87a-f595d65daf0a",
        "body" : "I think we should make this generic: \r\n```ts\r\n    interface ValidationResult<T = any> {\r\n        error: ValidationError;\r\n        errors: ValidationError;\r\n        warning: ValidationError;\r\n        value: T;\r\n    }\r\n```",
        "createdAt" : "2019-09-24T08:18:18Z",
        "updatedAt" : "2019-09-24T13:01:16Z",
        "lastEditedBy" : "6304627b-68f2-4004-b87a-f595d65daf0a",
        "tags" : [
        ]
      },
      {
        "id" : "15286648-1889-41f4-a190-cb561bf73833",
        "parentId" : "0d1b08f4-0cba-40bf-a196-ac90e6ee7209",
        "authorId" : "8d64c503-03dc-41ca-90aa-310f2659fb3d",
        "body" : "To keep consistency with previous comments, we should also change signatures of validate methods to take `<V, R>` where `V` is the type of the input value and `R` the type of the validated/transformed value.\r\nOr even `<V = any, R = V>` to make it \"simpler\".\r\n\r\nHowever, I recall having something like the one you propose, but linter complains with [`no-unnecessary-generics`](https://github.com/Microsoft/dtslint/blob/master/docs/no-unnecessary-generics.md).",
        "createdAt" : "2019-09-24T12:54:48Z",
        "updatedAt" : "2019-09-24T13:01:16Z",
        "lastEditedBy" : "8d64c503-03dc-41ca-90aa-310f2659fb3d",
        "tags" : [
        ]
      },
      {
        "id" : "ae47a995-086f-443c-a60a-cfd74aaeca30",
        "parentId" : "0d1b08f4-0cba-40bf-a196-ac90e6ee7209",
        "authorId" : "6304627b-68f2-4004-b87a-f595d65daf0a",
        "body" : " Mhm, not sure what's best. \r\n@SimonSchick what do you think?",
        "createdAt" : "2019-09-24T16:25:35Z",
        "updatedAt" : "2019-09-24T16:25:36Z",
        "lastEditedBy" : "6304627b-68f2-4004-b87a-f595d65daf0a",
        "tags" : [
        ]
      },
      {
        "id" : "803ac187-623a-405b-bc52-2f990241ddbb",
        "parentId" : "0d1b08f4-0cba-40bf-a196-ac90e6ee7209",
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "`no-unnecessary-generics` is _usually_ right, as you are effectively substituting casts with generics, which in the end reduces type safety, unless your intent it to make schemas generic and default to `unknown` then this should NOT be generic.",
        "createdAt" : "2019-09-26T22:11:55Z",
        "updatedAt" : "2019-09-26T22:11:55Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      },
      {
        "id" : "8b84217a-3508-4ee9-9901-97b4e2ea02db",
        "parentId" : "0d1b08f4-0cba-40bf-a196-ac90e6ee7209",
        "authorId" : "6304627b-68f2-4004-b87a-f595d65daf0a",
        "body" : "But how would it look like then? Am I supposed to cast every validation result like this?\r\n```ts\r\nconst result = schema.validate() as {\r\n  error: ValidationError;\r\n  errors: ValidationError;\r\n  warning: ValidationError;\r\n  value: {\r\n    validatedString: string          \r\n  };\r\n}\r\n```\r\n\r\nOr is there a simpler way?",
        "createdAt" : "2019-09-27T05:32:05Z",
        "updatedAt" : "2019-09-27T05:32:05Z",
        "lastEditedBy" : "6304627b-68f2-4004-b87a-f595d65daf0a",
        "tags" : [
        ]
      },
      {
        "id" : "3f44ae23-528c-4e23-8f3e-51b2ac79a2b7",
        "parentId" : "0d1b08f4-0cba-40bf-a196-ac90e6ee7209",
        "authorId" : "81902a5f-ec7d-4704-8b9c-6ed20cfbf5c8",
        "body" : "@RecuencoJones @SimonSchick what's the decision here, looks like this was merged without finishing the conversation around generics. Can we add them back, but default to `any`?\r\n\r\nI agree with @jaulz that this should *remain* a generic. ",
        "createdAt" : "2019-10-29T17:47:58Z",
        "updatedAt" : "2019-10-29T17:47:58Z",
        "lastEditedBy" : "81902a5f-ec7d-4704-8b9c-6ed20cfbf5c8",
        "tags" : [
        ]
      },
      {
        "id" : "fb2245ad-19f4-49d7-b068-34f6c1525f3e",
        "parentId" : "0d1b08f4-0cba-40bf-a196-ac90e6ee7209",
        "authorId" : "81902a5f-ec7d-4704-8b9c-6ed20cfbf5c8",
        "body" : "After reading the comment by @SimonSchick, maybe `unknown` is an OK compromise since it's at least safer than `any`. Supporting a generic still makes sense to me though since it doesn't violate the lint rule since it was used in the params and return value AFAICT.",
        "createdAt" : "2019-10-29T17:58:32Z",
        "updatedAt" : "2019-10-29T17:58:32Z",
        "lastEditedBy" : "81902a5f-ec7d-4704-8b9c-6ed20cfbf5c8",
        "tags" : [
        ]
      },
      {
        "id" : "387d4daa-06cb-42eb-be69-c87f0998be54",
        "parentId" : "0d1b08f4-0cba-40bf-a196-ac90e6ee7209",
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "That's the thing, the input value may NOT be the return value since joi performs cohersion/conversion.",
        "createdAt" : "2019-10-29T22:15:20Z",
        "updatedAt" : "2019-10-29T22:15:21Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      },
      {
        "id" : "14adeeb9-deb2-496e-aeef-5bba834fb015",
        "parentId" : "0d1b08f4-0cba-40bf-a196-ac90e6ee7209",
        "authorId" : "81902a5f-ec7d-4704-8b9c-6ed20cfbf5c8",
        "body" : "Exactly, that's why the generic is required you need to specify the return value type. So I *think* we agree here?",
        "createdAt" : "2019-10-29T23:20:05Z",
        "updatedAt" : "2019-10-29T23:20:05Z",
        "lastEditedBy" : "81902a5f-ec7d-4704-8b9c-6ed20cfbf5c8",
        "tags" : [
        ]
      },
      {
        "id" : "d327f269-9087-4fc5-934f-863178931580",
        "parentId" : "0d1b08f4-0cba-40bf-a196-ac90e6ee7209",
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "No, you input `unknown` and you get `unknown`, the generic would do nothing but hide the type assertion, which `no unnecessary generic` attempts to prevent.",
        "createdAt" : "2019-10-29T23:58:10Z",
        "updatedAt" : "2019-10-29T23:58:10Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      },
      {
        "id" : "41f52de8-fa38-42e9-a94c-2fba42034bc4",
        "parentId" : "0d1b08f4-0cba-40bf-a196-ac90e6ee7209",
        "authorId" : "81902a5f-ec7d-4704-8b9c-6ed20cfbf5c8",
        "body" : "Agreed you input `unknown`, but returning `unknown` is a choice being made to satisfy the lint rule AFAICT. \r\n\r\nWe know what'll be returned is either:\r\n\r\n* an object with the `value` key with value `T` (since Joi validated it)\r\n* an object with an `error` key and associated value (if validation failed)\r\n\r\nChanging the `any` to `unknown` is probably a good call since changing the lint rule is probably a no-go and it would force developers to apply the type cast?",
        "createdAt" : "2019-10-31T05:54:23Z",
        "updatedAt" : "2019-10-31T05:54:23Z",
        "lastEditedBy" : "81902a5f-ec7d-4704-8b9c-6ed20cfbf5c8",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c5efa79b3590ff8f8656c1c67cbd21e7fd6d90f",
    "line" : 1611,
    "diffHunk" : "@@ -1,1 +617,621 @@    type ValidationErrorFunction = (errors: ValidationErrorItem[]) => string | ValidationErrorItem | Error;\n\n    interface ValidationResult {\n        error: ValidationError;\n        errors: ValidationError;"
  }
]