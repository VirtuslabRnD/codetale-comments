[
  {
    "id" : "ff625b81-0863-4c4d-9c27-e0ee7f82cb74",
    "prId" : 19129,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19129#pullrequestreview-57313006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13c60f90-636d-4e55-b531-6dcd6feb1ecf",
        "parentId" : null,
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "Why not write this as `export interface Languages extends LanguageMap, LanguageProtocol {}`? I know it's stylistic here, but `interface`s tend to be more efficient internally.",
        "createdAt" : "2017-08-18T20:58:42Z",
        "updatedAt" : "2017-08-18T20:58:42Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "d59e03c2-fa6f-4df4-973d-716d3acc6750",
        "parentId" : "13c60f90-636d-4e55-b531-6dcd6feb1ecf",
        "authorId" : "edc783f4-93bc-43c7-9d3f-989d17e72436",
        "body" : "I got the following error with your definition.\r\n\r\n```\r\nTypeScript error: node_modules/@types/prismjs/index.d.ts(145,18): Error TS2411: Property 'extend' of type '(id: string, redef: LanguageDefinition) => LanguageDefinition' is not assignable to string index type 'LanguageDefinition'.\r\nTypeScript error: node_modules/@types/prismjs/index.d.ts(145,18): Error TS2411: Property 'insertBefore' of type '(inside: string, before: string, insert: LanguageDefinition, root: LanguageDefinition) => Languag...' is not assignable to string index type 'LanguageDefinition'.\r\n```\r\n\r\nSo this pr is a workaround for that. Also see https://github.com/Microsoft/TypeScript/issues/17763",
        "createdAt" : "2017-08-18T21:08:54Z",
        "updatedAt" : "2017-08-18T22:47:39Z",
        "lastEditedBy" : "edc783f4-93bc-43c7-9d3f-989d17e72436",
        "tags" : [
        ]
      }
    ],
    "commit" : "634accbe7b5666309609503ea6817e648f686362",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +143,147 @@}\n\nexport type Languages\n    = LanguageMap\n    & LanguageMapProtocol;"
  },
  {
    "id" : "dc5322b0-e976-43b0-8290-b0ece4c19f44",
    "prId" : 34201,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/34201#pullrequestreview-218738460",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9337167e-8e05-460b-ba4a-a32db9e649f8",
        "parentId" : null,
        "authorId" : "e5209397-2510-4745-aef6-1632dc787392",
        "body" : "The&nbsp;`Token.stringify(…)` method is&nbsp;`private` according to&nbsp;@RunDevelopment in&nbsp;https://github.com/PrismJS/prism/pull/1782#discussion_r261895197.",
        "createdAt" : "2019-03-25T19:35:08Z",
        "updatedAt" : "2019-03-25T20:51:37Z",
        "lastEditedBy" : "e5209397-2510-4745-aef6-1632dc787392",
        "tags" : [
        ]
      },
      {
        "id" : "eb7ef427-9dd2-4265-888d-177f399d8cee",
        "parentId" : "9337167e-8e05-460b-ba4a-a32db9e649f8",
        "authorId" : "3cdd9645-eab4-47a7-9602-1bd598e4cda5",
        "body" : "I marked it as private because it can only work correctly if the tokens passed to it are already encoded via `Prism.util.encode`.\r\nPut simply: It's a deadly trap from anyone trying to use it and it should only be used by the library anyway, so I went with private.",
        "createdAt" : "2019-03-25T20:04:01Z",
        "updatedAt" : "2019-03-25T20:51:37Z",
        "lastEditedBy" : "3cdd9645-eab4-47a7-9602-1bd598e4cda5",
        "tags" : [
        ]
      },
      {
        "id" : "bdf9110e-dc07-4e90-b2bf-a0bb482fda6c",
        "parentId" : "9337167e-8e05-460b-ba4a-a32db9e649f8",
        "authorId" : "3082a8e8-b39a-4b3b-8f6f-d2fa571bcff6",
        "body" : "In this case, maybe `Prism.util.encode` should return a different type which this function will accept instead of `TokenNode`?",
        "createdAt" : "2019-03-25T20:05:48Z",
        "updatedAt" : "2019-03-25T20:51:37Z",
        "lastEditedBy" : "3082a8e8-b39a-4b3b-8f6f-d2fa571bcff6",
        "tags" : [
        ]
      },
      {
        "id" : "142b3411-66c0-4e31-8c90-0b892e98830d",
        "parentId" : "9337167e-8e05-460b-ba4a-a32db9e649f8",
        "authorId" : "e5209397-2510-4745-aef6-1632dc787392",
        "body" : "That wouldn’t work, since TypeScript uses structural equality when checking if two types match, and since the result of `Prism.util.encode(\"<x>\")` is `\"&lt;x&gt;\"`, which is still `string`, so it will match `TokenNode`.",
        "createdAt" : "2019-03-25T20:21:57Z",
        "updatedAt" : "2019-03-25T20:51:37Z",
        "lastEditedBy" : "e5209397-2510-4745-aef6-1632dc787392",
        "tags" : [
        ]
      },
      {
        "id" : "95d66e29-d321-4808-9e64-b9546b4d98ea",
        "parentId" : "9337167e-8e05-460b-ba4a-a32db9e649f8",
        "authorId" : "3cdd9645-eab4-47a7-9602-1bd598e4cda5",
        "body" : "Something in the direction of `encode(tokens: TokenNode): EncodedTokenNode`, right?\r\n\r\nWell, I don't know, if it's worth it as I plan to change this in the future anyway.",
        "createdAt" : "2019-03-25T20:23:44Z",
        "updatedAt" : "2019-03-25T20:51:37Z",
        "lastEditedBy" : "3cdd9645-eab4-47a7-9602-1bd598e4cda5",
        "tags" : [
        ]
      },
      {
        "id" : "53ac66fc-18d7-46c9-88b1-9092dd2ae440",
        "parentId" : "9337167e-8e05-460b-ba4a-a32db9e649f8",
        "authorId" : "3082a8e8-b39a-4b3b-8f6f-d2fa571bcff6",
        "body" : "There are certain ways to enforce nominal typing in TypeScript.\r\n\r\nBut even if you keep structural typing, having a different name for this type to differentiate between them would be a good idea IMHO.",
        "createdAt" : "2019-03-26T04:03:07Z",
        "updatedAt" : "2019-03-26T04:03:07Z",
        "lastEditedBy" : "3082a8e8-b39a-4b3b-8f6f-d2fa571bcff6",
        "tags" : [
        ]
      },
      {
        "id" : "a6b6fe70-0d64-43e2-83de-09ddd3a96540",
        "parentId" : "9337167e-8e05-460b-ba4a-a32db9e649f8",
        "authorId" : "e5209397-2510-4745-aef6-1632dc787392",
        "body" : "Except that type aliases are usually expanded into what they are aliases of in IDEs, so it wouldn’t really be clear from hovering over the function in **VS Code**.",
        "createdAt" : "2019-03-26T08:09:08Z",
        "updatedAt" : "2019-03-26T08:09:19Z",
        "lastEditedBy" : "e5209397-2510-4745-aef6-1632dc787392",
        "tags" : [
        ]
      }
    ],
    "commit" : "62d029d7019e91326604a4f29c343957e0b9cf12",
    "line" : 614,
    "diffHunk" : "@@ -1,1 +430,434 @@\t * @private\n\t */\n\tstatic stringify(\n\t\ttoken: TokenStream,\n\t\tlanguage: string,"
  },
  {
    "id" : "4f03030a-64f5-4b68-a0fc-a60c7b7000e3",
    "prId" : 34201,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/34201#pullrequestreview-218564942",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73fce035-033a-4f9e-baf0-095c3bca0c90",
        "parentId" : null,
        "authorId" : "3cdd9645-eab4-47a7-9602-1bd598e4cda5",
        "body" : "Doesn't this mean that the type of `Grammar#rest` will be `GrammarValue & Grammar` which is `never`?\r\n\r\nI'm asking because I had a similar problem a while ago and I have yet to find a solution.",
        "createdAt" : "2019-03-25T20:09:46Z",
        "updatedAt" : "2019-03-25T20:51:37Z",
        "lastEditedBy" : "3cdd9645-eab4-47a7-9602-1bd598e4cda5",
        "tags" : [
        ]
      },
      {
        "id" : "5a12fb3b-860b-4c17-a004-2e1ce0b6b9cc",
        "parentId" : "73fce035-033a-4f9e-baf0-095c3bca0c90",
        "authorId" : "e5209397-2510-4745-aef6-1632dc787392",
        "body" : "No, this is different.\r\n\r\nMerging two types using `&` when one is defined using an index signature will cause the definite one to always override the index signature.\r\n\r\nResult: `Grammar#rest` has the type of `Grammar`.",
        "createdAt" : "2019-03-25T20:24:22Z",
        "updatedAt" : "2019-03-25T20:51:37Z",
        "lastEditedBy" : "e5209397-2510-4745-aef6-1632dc787392",
        "tags" : [
        ]
      }
    ],
    "commit" : "62d029d7019e91326604a4f29c343957e0b9cf12",
    "line" : 244,
    "diffHunk" : "@@ -1,1 +170,174 @@\nexport type GrammarValue = RegExp | TokenObject | Array<RegExp | TokenObject>;\nexport type Grammar = GrammarRest & Record<string, GrammarValue>;\nexport interface GrammarRest {\n\tkeyword?: GrammarValue;"
  },
  {
    "id" : "ad17ae24-2180-468e-88a3-d213f665b540",
    "prId" : 34201,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/34201#pullrequestreview-218573700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a185cecd-8fbe-4780-abd6-2e82f3f7f3e7",
        "parentId" : null,
        "authorId" : "3cdd9645-eab4-47a7-9602-1bd598e4cda5",
        "body" : "Can't all of those be removed?",
        "createdAt" : "2019-03-25T20:10:07Z",
        "updatedAt" : "2019-03-25T20:51:37Z",
        "lastEditedBy" : "3cdd9645-eab4-47a7-9602-1bd598e4cda5",
        "tags" : [
        ]
      },
      {
        "id" : "f1e76772-eb48-46cc-978b-5d2dc5305fef",
        "parentId" : "a185cecd-8fbe-4780-abd6-2e82f3f7f3e7",
        "authorId" : "e5209397-2510-4745-aef6-1632dc787392",
        "body" : "Probably.\r\n\r\nI kept them to ease IntelliSense in IDEs.",
        "createdAt" : "2019-03-25T20:19:33Z",
        "updatedAt" : "2019-03-25T20:51:37Z",
        "lastEditedBy" : "e5209397-2510-4745-aef6-1632dc787392",
        "tags" : [
        ]
      },
      {
        "id" : "2477dc09-2b16-4263-a727-d553ea6445af",
        "parentId" : "a185cecd-8fbe-4780-abd6-2e82f3f7f3e7",
        "authorId" : "3cdd9645-eab4-47a7-9602-1bd598e4cda5",
        "body" : "That's not a bad idea, but in that case, should `class-name` and `comment` also be present?",
        "createdAt" : "2019-03-25T20:42:09Z",
        "updatedAt" : "2019-03-25T20:51:37Z",
        "lastEditedBy" : "3cdd9645-eab4-47a7-9602-1bd598e4cda5",
        "tags" : [
        ]
      }
    ],
    "commit" : "62d029d7019e91326604a4f29c343957e0b9cf12",
    "line" : 247,
    "diffHunk" : "@@ -1,1 +173,177 @@export interface GrammarRest {\n\tkeyword?: GrammarValue;\n\tnumber?: GrammarValue;\n\tfunction?: GrammarValue;\n\tstring?: GrammarValue;"
  }
]