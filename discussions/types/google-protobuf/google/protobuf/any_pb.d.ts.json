[
  {
    "id" : "e0b64b2b-92d3-4291-b10f-55da927adc32",
    "prId" : 46662,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46662#pullrequestreview-467931393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2eafb9e1-9551-44e9-a9ec-3e282c6a3856",
        "parentId" : null,
        "authorId" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "body" : "Shouldn’t every one of these return types be `this`, so that subclassing works as expected? Adding some tests would be nice since this is an important popular package.",
        "createdAt" : "2020-08-12T20:04:20Z",
        "updatedAt" : "2020-08-12T20:04:26Z",
        "lastEditedBy" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "tags" : [
        ]
      },
      {
        "id" : "f5c825d9-b939-42f7-a160-39bee18edfd7",
        "parentId" : "2eafb9e1-9551-44e9-a9ec-3e282c6a3856",
        "authorId" : "5fd7c20f-7500-40f0-b32f-365b4ce89145",
        "body" : "> Shouldn’t every one of these return types be this, so that subclassing works as expected\r\n\r\nI was not familiar with any subclassing problems (although I looked it up and got the idea), but to my knowledge the protobuf javascript generator is not written with sub-classing in mind:\r\n\r\nreference: https://developers.google.com/protocol-buffers/docs/reference/javascript-generated#message\r\n>  the protocol buffer compiler generates a class called Foo. Foo inherits from jspb.Message.\r\nYou should not create your own Foo subclasses. Generated classes are not designed for subclassing and may lead to \"fragile base class\" problems.\r\n\r\nprotoc plugins for typescript type generators also only return the type (which is not to say it's the source of truth):\r\n\r\nhttps://github.com/agreatfool/grpc_tools_node_protoc_ts#book_pbdts\r\nhttps://github.com/agreatfool/grpc_tools_node_protoc_ts/pull/55",
        "createdAt" : "2020-08-13T23:24:57Z",
        "updatedAt" : "2020-08-13T23:29:50Z",
        "lastEditedBy" : "5fd7c20f-7500-40f0-b32f-365b4ce89145",
        "tags" : [
        ]
      },
      {
        "id" : "1c094f47-316f-43aa-87d2-0f24b0246cf3",
        "parentId" : "2eafb9e1-9551-44e9-a9ec-3e282c6a3856",
        "authorId" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "body" : "If the implementation does `return this` in the method (which it surely does), the correct return type is `this`. But naming the class instead might discourage subclassing, and if that’s to be desired I’m fine with leaving it as is.",
        "createdAt" : "2020-08-14T16:16:02Z",
        "updatedAt" : "2020-08-14T16:16:02Z",
        "lastEditedBy" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "tags" : [
        ]
      },
      {
        "id" : "840cd9df-2bed-43c7-be2b-e62e98e29879",
        "parentId" : "2eafb9e1-9551-44e9-a9ec-3e282c6a3856",
        "authorId" : "5fd7c20f-7500-40f0-b32f-365b4ce89145",
        "body" : "> If the implementation does `return this` in the method (which it surely does), the correct return type is `this`. But naming the class instead might discourage subclassing, and if that’s to be desired I’m fine with leaving it as is.\r\n\r\nif someone feels strongly about returning `this` instead of the class, one could open a followup PR. the good thing is that it would be a non-breaking change.\r\n\r\nthank you for the review @andrewbranch !",
        "createdAt" : "2020-08-15T00:34:24Z",
        "updatedAt" : "2020-08-15T03:13:31Z",
        "lastEditedBy" : "5fd7c20f-7500-40f0-b32f-365b4ce89145",
        "tags" : [
        ]
      }
    ],
    "commit" : "47c27405d5aa94856c31c034e5166df595ee843d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +6,10 @@export class Any extends jspb.Message {\n  getTypeUrl(): string;\n  setTypeUrl(value: string): Any;\n\n  getValue(): Uint8Array | string;"
  }
]