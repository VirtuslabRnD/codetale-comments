[
  {
    "id" : "1d9ee776-e801-441a-86a0-6821f9ad32d3",
    "prId" : 20160,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20160#pullrequestreview-66318169",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77cf8e8b-f725-4fec-a944-7165e3d6ef70",
        "parentId" : null,
        "authorId" : "ae01d18a-c527-430d-a5d4-4323e4f61e82",
        "body" : "Good catch üëç ",
        "createdAt" : "2017-09-30T17:29:04Z",
        "updatedAt" : "2017-10-16T18:44:18Z",
        "lastEditedBy" : "ae01d18a-c527-430d-a5d4-4323e4f61e82",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ecab1a3e56a9b159c5af8315f7b3921234ba315",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +294,298 @@  close(): Promise<void>;\n  content(): Promise<string>;\n  cookies(...urls: string[]): Promise<Cookie[]>;\n  deleteCookie(\n    ...cookies: Array<{"
  },
  {
    "id" : "1ed0eacc-0f86-4685-8d7e-edcf525d1178",
    "prId" : 20620,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20620#pullrequestreview-70036761",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e17e7741-2b9a-49db-8f20-36775b0e01e5",
        "parentId" : null,
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "Was the previous type too strict?",
        "createdAt" : "2017-10-17T16:09:17Z",
        "updatedAt" : "2017-10-19T14:09:53Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "5803a88a-b3bd-4ab6-8990-1b7192390ef2",
        "parentId" : "e17e7741-2b9a-49db-8f20-36775b0e01e5",
        "authorId" : "fb277939-680b-4517-8c1a-1351c393f6d9",
        "body" : "Yes, the `elem?: ElementHandle` part is incorrect.\r\n\r\n![image](https://user-images.githubusercontent.com/404765/31690263-d6c3b93a-b357-11e7-9180-d52fb4b5351d.png)\r\n\r\nThe `args` that will be passed to `pageFunction` are of type `Serializable|ElementHandle`.\r\n\r\n`Serializable` is an `any` and the previous code locked it to only `ElementHandle`\r\n\r\nIt also returns a `Serializable` / `any`\r\n\r\nhttps://github.com/GoogleChrome/puppeteer/blob/v0.12.0/docs/api.md#pageevaluatepagefunction-args",
        "createdAt" : "2017-10-17T21:28:31Z",
        "updatedAt" : "2017-10-19T14:09:53Z",
        "lastEditedBy" : "fb277939-680b-4517-8c1a-1351c393f6d9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3a19b2732e1f748cde918bd7afd871dd74cf647",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +111,115 @@}\n\nexport type EvaluateFn = string | ((...args: any[]) => any);\n\nexport interface NavigationOptions {"
  },
  {
    "id" : "f2abbb19-84ae-46c5-a462-0a0db19bbe21",
    "prId" : 21463,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21463#pullrequestreview-76686691",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f51fc50-7860-4a57-959a-24a9068ca327",
        "parentId" : null,
        "authorId" : "ae01d18a-c527-430d-a5d4-4323e4f61e82",
        "body" : "I can't find any place where these are used. Perhaps this was a leftover of something else?",
        "createdAt" : "2017-11-14T16:19:21Z",
        "updatedAt" : "2017-11-14T16:28:07Z",
        "lastEditedBy" : "ae01d18a-c527-430d-a5d4-4323e4f61e82",
        "tags" : [
        ]
      },
      {
        "id" : "86fd321a-44e7-4c63-afcb-e257326c1a0a",
        "parentId" : "0f51fc50-7860-4a57-959a-24a9068ca327",
        "authorId" : null,
        "body" : "The `BrowserEvents` have the same purpose as the `PageEvents`, they are just references to available events in the `Browser` and `Page` classes. They can be used to make dynamic event handlers.\r\n\r\nTechnically, neither type is required, I just kept the code standard from the previous version.",
        "createdAt" : "2017-11-14T22:42:26Z",
        "updatedAt" : "2017-11-14T22:42:26Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "0c6024ad-2fb4-445f-9f1f-2aeb36afe3ed",
        "parentId" : "0f51fc50-7860-4a57-959a-24a9068ca327",
        "authorId" : "ae01d18a-c527-430d-a5d4-4323e4f61e82",
        "body" : "Makes sense. :+1:",
        "createdAt" : "2017-11-15T06:39:02Z",
        "updatedAt" : "2017-11-15T06:39:02Z",
        "lastEditedBy" : "ae01d18a-c527-430d-a5d4-4323e4f61e82",
        "tags" : [
        ]
      }
    ],
    "commit" : "467b564b39aef6683fd2eb58b0bc64bd84b19846",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +140,144 @@  | \"response\";\n\nexport type BrowserEvents =\n  | \"disconnected\"\n  | \"targetchanged\""
  },
  {
    "id" : "d46e8194-0cee-43d4-8467-aa491f5f6313",
    "prId" : 21463,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21463#pullrequestreview-76686555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9095543-2d11-41b6-8ac8-59d3e2ab4210",
        "parentId" : null,
        "authorId" : "ae01d18a-c527-430d-a5d4-4323e4f61e82",
        "body" : "The [docs](https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#class-browser) don't mention an `on()`-method. Perhaps their document is outdated, or this doesn't exist.",
        "createdAt" : "2017-11-14T16:24:48Z",
        "updatedAt" : "2017-11-14T16:28:07Z",
        "lastEditedBy" : "ae01d18a-c527-430d-a5d4-4323e4f61e82",
        "tags" : [
        ]
      },
      {
        "id" : "8ff38c87-826f-4fb9-a721-4623146802b6",
        "parentId" : "f9095543-2d11-41b6-8ac8-59d3e2ab4210",
        "authorId" : null,
        "body" : "The docs mention the events (disconnected, targetchanged, targetcreated and the targetdestroyed). The `Browser` class [extends](https://github.com/GoogleChrome/puppeteer/blob/master/lib/Browser.js#L21) the [EventEmitter](https://nodejs.org/api/events.html) that has the `on` method.\r\n\r\nI think we should be fine.",
        "createdAt" : "2017-11-14T22:33:30Z",
        "updatedAt" : "2017-11-14T22:33:30Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "4f074a9a-df61-4fa7-8f2f-4fc808811016",
        "parentId" : "f9095543-2d11-41b6-8ac8-59d3e2ab4210",
        "authorId" : "ae01d18a-c527-430d-a5d4-4323e4f61e82",
        "body" : "You're right, thanks for clearing this up! Just had a look at the source and it indeed does extend event emitter. :radar:",
        "createdAt" : "2017-11-15T06:38:19Z",
        "updatedAt" : "2017-11-15T06:38:19Z",
        "lastEditedBy" : "ae01d18a-c527-430d-a5d4-4323e4f61e82",
        "tags" : [
        ]
      }
    ],
    "commit" : "467b564b39aef6683fd2eb58b0bc64bd84b19846",
    "line" : 981,
    "diffHunk" : "@@ -1,1 +1030,1034 @@/** A Browser is created when Puppeteer connects to a Chromium instance, either through puppeteer.launch or puppeteer.connect. */\nexport interface Browser {\n  on<K extends keyof BrowserEventObj>(\n    event: K,\n    handler: (e: BrowserEventObj[K], ...args: any[]) => void"
  },
  {
    "id" : "15357757-051f-47fa-a83d-c2626ea13af0",
    "prId" : 25508,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/25508#pullrequestreview-117302351",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efb843fe-bd68-41b4-aa87-33e47359be14",
        "parentId" : null,
        "authorId" : "ae01d18a-c527-430d-a5d4-4323e4f61e82",
        "body" : "Now that both `Frame` and `Page` have a `click` method we can finally remove the one for the `Page` class https://github.com/DefinitelyTyped/DefinitelyTyped/pull/25508/files#diff-26c1cae70a0e01ff10cdc4e82232b3eaL952",
        "createdAt" : "2018-05-03T14:54:40Z",
        "updatedAt" : "2018-05-03T15:06:21Z",
        "lastEditedBy" : "ae01d18a-c527-430d-a5d4-4323e4f61e82",
        "tags" : [
        ]
      },
      {
        "id" : "c9ec8434-9c4b-406e-8667-2c4e43cde4f5",
        "parentId" : "efb843fe-bd68-41b4-aa87-33e47359be14",
        "authorId" : "03bdeff1-2c4f-4547-9eff-b2dc181fe233",
        "body" : "Done üëç",
        "createdAt" : "2018-05-03T15:07:45Z",
        "updatedAt" : "2018-05-03T15:07:46Z",
        "lastEditedBy" : "03bdeff1-2c4f-4547-9eff-b2dc181fe233",
        "tags" : [
        ]
      }
    ],
    "commit" : "34efb8f81f5878fbc5022477e8914ca6fa8c5bef",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +812,816 @@   * @param options Specifies the click options.\n   */\n  click(selector: string, options?: ClickOptions): Promise<void>;\n\n  /** Gets the full HTML contents of the page, including the doctype. */"
  },
  {
    "id" : "8fa7896e-3ebf-423e-8d0b-78188aa0911f",
    "prId" : 26489,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26489#pullrequestreview-129689910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11276b7f-a533-47ca-afec-ff6755c236b2",
        "parentId" : null,
        "authorId" : "26c05778-4426-489f-a8a1-2a6af08f6974",
        "body" : "It _might_ be worth considering a couple of overloads for this function (and other evaluation funcs):\r\n```typescript\r\nevaluate<R>(pageFunction: () => R | Promise<R>): Promise<R>;\r\nevaluate<R, X1>(pageFunction: (x1: X1) => R | Promise<R>, x1: X1): Promise<R>;\r\n...\r\nevaluate<R>(pageFunction: (...args: any[]) => R | Promise<R>, ...args: any[]): Promise<R>;\r\n```",
        "createdAt" : "2018-06-14T20:57:32Z",
        "updatedAt" : "2018-06-20T07:03:06Z",
        "lastEditedBy" : "26c05778-4426-489f-a8a1-2a6af08f6974",
        "tags" : [
        ]
      },
      {
        "id" : "f5c7863d-54fa-442a-a2df-7c2995def1f4",
        "parentId" : "11276b7f-a533-47ca-afec-ff6755c236b2",
        "authorId" : "63f5ab2d-424f-40bf-97a6-b47d041857f3",
        "body" : "Actually this may be problematic when you pass an `ElementHandle` to `evaluate`'s args, because in the callback it will be an actual `HTMLElement` of the DOM.",
        "createdAt" : "2018-06-18T08:31:52Z",
        "updatedAt" : "2018-06-20T07:03:06Z",
        "lastEditedBy" : "63f5ab2d-424f-40bf-97a6-b47d041857f3",
        "tags" : [
        ]
      },
      {
        "id" : "3bbce0e4-e201-4253-912b-ba1ccdbf7491",
        "parentId" : "11276b7f-a533-47ca-afec-ff6755c236b2",
        "authorId" : "26c05778-4426-489f-a8a1-2a6af08f6974",
        "body" : "Hmm, that's an interesting point. With conditional mapped types in ts2.8, would be easy to solve :) But that might be more trouble than it is worth.",
        "createdAt" : "2018-06-18T12:31:19Z",
        "updatedAt" : "2018-06-20T07:03:06Z",
        "lastEditedBy" : "26c05778-4426-489f-a8a1-2a6af08f6974",
        "tags" : [
        ]
      },
      {
        "id" : "9960b6b2-9fff-43bf-9e16-521e3d6d72ad",
        "parentId" : "11276b7f-a533-47ca-afec-ff6755c236b2",
        "authorId" : "63f5ab2d-424f-40bf-97a6-b47d041857f3",
        "body" : "Hey @andnp, what do you think about adding those typings?\r\n\r\n```ts\r\n// Change ElementHandle interface\r\ninterface ElementHandle<E extends Element = Element> extends JSHandle { /*...*/ }\r\n\r\n// Fix $eval typings\r\n$eval<R, X1>(\r\n  selector: string,\r\n  pageFunction: (element: Element, x1: X1 extends ElementHandle<infer E1> ? E1 : X1) => R | Promise<R>,\r\n  x1: X1,\r\n): Promise<R extends Element ? ElementHandle<R> : R>;\r\n```",
        "createdAt" : "2018-06-18T16:27:01Z",
        "updatedAt" : "2018-06-20T07:03:06Z",
        "lastEditedBy" : "63f5ab2d-424f-40bf-97a6-b47d041857f3",
        "tags" : [
        ]
      },
      {
        "id" : "2afc6ad9-509d-4e22-99a3-fcd7008d7f1a",
        "parentId" : "11276b7f-a533-47ca-afec-ff6755c236b2",
        "authorId" : "26c05778-4426-489f-a8a1-2a6af08f6974",
        "body" : "That looks pretty solid! Though it is definitely up to @marvinhagemeister @cdeutsch @jwbay if they are interested in bumping the TS version to 2.8",
        "createdAt" : "2018-06-18T17:24:24Z",
        "updatedAt" : "2018-06-20T07:03:06Z",
        "lastEditedBy" : "26c05778-4426-489f-a8a1-2a6af08f6974",
        "tags" : [
        ]
      },
      {
        "id" : "7b678580-c6a4-415b-a561-186f032d7c21",
        "parentId" : "11276b7f-a533-47ca-afec-ff6755c236b2",
        "authorId" : "ae01d18a-c527-430d-a5d4-4323e4f61e82",
        "body" : "@andnp I'm all for bumping TS version to 2.8 if it improves type-safety üëç ",
        "createdAt" : "2018-06-18T18:45:11Z",
        "updatedAt" : "2018-06-20T07:03:06Z",
        "lastEditedBy" : "ae01d18a-c527-430d-a5d4-4323e4f61e82",
        "tags" : [
        ]
      }
    ],
    "commit" : "faf255a762c64fe582ab5c690f02071aa513c3d2",
    "line" : 233,
    "diffHunk" : "@@ -1,1 +651,655 @@   * then `worker.evaluate` resolves to `undefined`.\n   */\n  evaluate<T>(\n    pageFunction: (...args: any[]) => T | Promise<T>,\n    ...args: any[],"
  },
  {
    "id" : "c74d4a86-a1e0-4f4a-8442-9aa19a7533c6",
    "prId" : 26489,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26489#pullrequestreview-391081711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89827900-b950-4f77-8515-1c15d98d5a91",
        "parentId" : null,
        "authorId" : "589c60b1-79aa-4225-bc26-77ab3ced5794",
        "body" : "@ksm2 I hope you are still around. \r\nI have a question here. Why are we saying this returns a `Promise<WrapElementHandle<R>>`? \r\n`$eval` returns the result of `pageFunction`, so it would return a `Promise<R>`.",
        "createdAt" : "2020-04-09T19:44:22Z",
        "updatedAt" : "2020-04-09T19:44:23Z",
        "lastEditedBy" : "589c60b1-79aa-4225-bc26-77ab3ced5794",
        "tags" : [
        ]
      }
    ],
    "commit" : "faf255a762c64fe582ab5c690f02071aa513c3d2",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +33,37 @@    selector: string,\n    pageFunction: (element: Element) => R | Promise<R>,\n  ): Promise<WrapElementHandle<R>>;\n\n  /**"
  }
]