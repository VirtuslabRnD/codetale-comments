[
  {
    "id" : "ee758aae-1f1f-43f8-af66-5db184e4ee92",
    "prId" : 34784,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/34784#pullrequestreview-227876036",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14c6ad49-2724-4567-ab51-7f6b48f8e3a2",
        "parentId" : null,
        "authorId" : "59d438e3-1dfe-4dea-8eb3-dcbe31057793",
        "body" : "@sandersn Is it actually possible for a value to be of type number and type string at the same time? I would have thought `number | string` to be more appropriate.",
        "createdAt" : "2019-04-17T00:53:49Z",
        "updatedAt" : "2019-04-17T00:53:50Z",
        "lastEditedBy" : "59d438e3-1dfe-4dea-8eb3-dcbe31057793",
        "tags" : [
        ]
      },
      {
        "id" : "b5ed3972-59f0-4f0d-acaa-c70fef8eb57d",
        "parentId" : "14c6ad49-2724-4567-ab51-7f6b48f8e3a2",
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "Yep, it's definitely impossible! This cast is just to tell the compiler we know what we're doing -- specifically, because `HTMLInputElement.value : string`, we are asserting that `newRow[column.field]` can safely be assigned `string` even though the compiler conservatively guesses its type to be `string & number` (the intersection of types of all properties of `newRow`). This isn't generally true, so in real code we'd want to guard with `if (typeof newRow[column.field] === typeof 'string')`",
        "createdAt" : "2019-04-17T16:50:53Z",
        "updatedAt" : "2019-04-17T16:50:53Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      }
    ],
    "commit" : "e98d9cfca589ac57f6ba452857c5949549d1ccb0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +780,784 @@    const newRow: Partial<Product> = {};\n    this.props.columns.forEach((column, i) => {\n      newRow[column.field] = (this.refs[column.field] as HTMLInputElement).value as number & string;\n    }, this);\n    return newRow as Product;"
  }
]