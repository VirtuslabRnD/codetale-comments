[
  {
    "id" : "891c36ce-25a8-4ef4-b7bd-f0c4bae93bf4",
    "prId" : 27378,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/27378#pullrequestreview-138288496",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f64529ee-b9e4-4764-831b-bf5f8fd603f2",
        "parentId" : null,
        "authorId" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "body" : "I think `T` needs to be constrained here so `PropTypes.oneOf(['a', 'b'])` produces literal types instead of `string`. Probably warrants a test in any case.",
        "createdAt" : "2018-07-18T03:42:12Z",
        "updatedAt" : "2018-07-21T04:48:28Z",
        "lastEditedBy" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "tags" : [
        ]
      },
      {
        "id" : "f40c0c03-eacd-4b9a-aec5-5fa5498a20cf",
        "parentId" : "f64529ee-b9e4-4764-831b-bf5f8fd603f2",
        "authorId" : "154935b0-c747-4431-b603-036adc203ce3",
        "body" : "I'm unsure how to do this if, you can offer any assistance. `oneOf` takes an array of anything and the runtime will just do a strict equality check on them. \r\n\r\nIn TS 3.0 I know we can infer tuple types from rest args, but the prop-types package does not take rest args for `oneOf`, so as far as I can tell any array literals passed in just gets widened by the compiler prior to being parsed as a parameter type.\r\n\r\nedit: or maybe in 3.0 we get tuple type inference on regular array-type params too?",
        "createdAt" : "2018-07-18T04:06:39Z",
        "updatedAt" : "2018-07-21T04:48:28Z",
        "lastEditedBy" : "154935b0-c747-4431-b603-036adc203ce3",
        "tags" : [
        ]
      },
      {
        "id" : "fb42db7a-26e7-4f8c-9653-adcca45aa001",
        "parentId" : "f64529ee-b9e4-4764-831b-bf5f8fd603f2",
        "authorId" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "body" : "It's not that you get tuple inference on array members, but can specify the generic in such a way that rest parameter inference is used and then shuffled into the array by indirecting into a signature.... I think Anders had an example in his PR.\r\n\r\nBut yeah, probably not fixable until a 3.0 bump comes around. Maybe worth leaving a comment?",
        "createdAt" : "2018-07-18T04:25:56Z",
        "updatedAt" : "2018-07-21T04:48:28Z",
        "lastEditedBy" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "tags" : [
        ]
      },
      {
        "id" : "1b0aaf3e-8ce7-4e71-a572-5d407efbf806",
        "parentId" : "f64529ee-b9e4-4764-831b-bf5f8fd603f2",
        "authorId" : "154935b0-c747-4431-b603-036adc203ce3",
        "body" : "I'm using TS 3.1-dev in my VSCode, and seeing this with the generic type constraint (though I may be misinterpreting what you're saying):\r\n![image](https://user-images.githubusercontent.com/12239873/42860570-d592956c-8a1c-11e8-9478-5892a7a819d3.png)\r\n\r\nAs opposed to:\r\n![image](https://user-images.githubusercontent.com/12239873/42860589-ef51216c-8a1c-11e8-8f29-2096644efb2c.png)\r\n(which wouldn't be helpful anyways since it's not actually capturing the literal types)",
        "createdAt" : "2018-07-18T04:56:06Z",
        "updatedAt" : "2018-07-21T04:48:28Z",
        "lastEditedBy" : "154935b0-c747-4431-b603-036adc203ce3",
        "tags" : [
        ]
      },
      {
        "id" : "82d95e03-4044-4aeb-b11f-23813d2a6d99",
        "parentId" : "f64529ee-b9e4-4764-831b-bf5f8fd603f2",
        "authorId" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "body" : "Does `T extends string[]` instead of `any[]` get somewhere?",
        "createdAt" : "2018-07-18T11:33:38Z",
        "updatedAt" : "2018-07-21T04:48:28Z",
        "lastEditedBy" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "tags" : [
        ]
      },
      {
        "id" : "95d461b0-13d9-48a5-8086-53808065ebe1",
        "parentId" : "f64529ee-b9e4-4764-831b-bf5f8fd603f2",
        "authorId" : "154935b0-c747-4431-b603-036adc203ce3",
        "body" : "Doesn't seem to be the case:\r\n![image](https://user-images.githubusercontent.com/12239873/42888954-efca634a-8a6e-11e8-9359-9a21e7f95beb.png)\r\n",
        "createdAt" : "2018-07-18T14:42:53Z",
        "updatedAt" : "2018-07-21T04:48:28Z",
        "lastEditedBy" : "154935b0-c747-4431-b603-036adc203ce3",
        "tags" : [
        ]
      }
    ],
    "commit" : "be9f8935cd2d2a05594311c536b66af7365f5a71",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +43,47 @@export const symbol: Requireable<symbol>;\nexport function instanceOf<T>(expectedClass: new (...args: any[]) => T): Requireable<T>;\nexport function oneOf<T>(types: T[]): Requireable<T>;\nexport function oneOfType<T extends Validator<any>>(types: T[]): Requireable<NonNullable<InferType<T>>>;\nexport function arrayOf<T>(type: Validator<T>): Requireable<T[]>;"
  },
  {
    "id" : "687aac21-c862-47d9-b6ca-3b0160f7c109",
    "prId" : 27378,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/27378#pullrequestreview-138097775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e19fa2a-7996-482c-8947-9ab0d987c206",
        "parentId" : null,
        "authorId" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "body" : "As written, I'd think this would find a common subtype of all the input validators, rather than creating a union of tuple members. Maybe not fixable without a 3.0 bump for tuple types, though?",
        "createdAt" : "2018-07-18T03:46:28Z",
        "updatedAt" : "2018-07-21T04:48:28Z",
        "lastEditedBy" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "tags" : [
        ]
      },
      {
        "id" : "34926f62-2ff1-4a61-a3e7-b417af5a4972",
        "parentId" : "6e19fa2a-7996-482c-8947-9ab0d987c206",
        "authorId" : "154935b0-c747-4431-b603-036adc203ce3",
        "body" : "Yep, that happened in line 72, when the common type of `ReactNode` and `() => any` is `() => any`. Couldn't get TS to actually infer a tuple type from it without explicitly annotating the type.",
        "createdAt" : "2018-07-18T04:12:49Z",
        "updatedAt" : "2018-07-21T04:48:28Z",
        "lastEditedBy" : "154935b0-c747-4431-b603-036adc203ce3",
        "tags" : [
        ]
      }
    ],
    "commit" : "be9f8935cd2d2a05594311c536b66af7365f5a71",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +44,48 @@export function instanceOf<T>(expectedClass: new (...args: any[]) => T): Requireable<T>;\nexport function oneOf<T>(types: T[]): Requireable<T>;\nexport function oneOfType<T extends Validator<any>>(types: T[]): Requireable<NonNullable<InferType<T>>>;\nexport function arrayOf<T>(type: Validator<T>): Requireable<T[]>;\nexport function objectOf<T>(type: Validator<T>): Requireable<{ [K in keyof any]: T; }>;"
  }
]