[
  {
    "id" : "450dd623-7fa1-4f5a-be3a-e689ad6adbf0",
    "prId" : 24030,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24030#pullrequestreview-102415322",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79b3499c-3e6a-4851-a28a-c8671259f595",
        "parentId" : null,
        "authorId" : "e69aeb27-47fc-4a1b-8bc1-8dc65c6b8bc0",
        "body" : "According to the [Leaflet documentation](http://leafletjs.com/reference-1.3.0.html#polyline-getlatlngs) it should return `LatLng[]` for simple polylines and `LatLng[][]` for multi-polylines. But you are also allowed to nest them as you with. For example also this type would be processed `LatLng[][][][][]`, but I think it makes no sense to make a long list of possible nesting. So in my opinions the return type should be: `LatLng[] | LatLng[][]`! It covers both different kinds of polylines and multi-polylines.\r\n\r\n@mcauer Do you have  a reason for `LatLng[][][]`?\r\n\r\nAnother approach would be a type like mentioned below, but as far as I know a circular type is not allowed:\r\n\r\n```typescript\r\ntype NestedPolyline = LatLng[] | NestedPolyline[];\r\n```",
        "createdAt" : "2018-03-08T08:12:24Z",
        "updatedAt" : "2018-03-08T08:13:12Z",
        "lastEditedBy" : "e69aeb27-47fc-4a1b-8bc1-8dc65c6b8bc0",
        "tags" : [
        ]
      },
      {
        "id" : "193543ee-2caa-4108-a7d4-1e0e583e58c9",
        "parentId" : "79b3499c-3e6a-4851-a28a-c8671259f595",
        "authorId" : "d5a0a2c6-8835-4d41-b5f1-54628abc891b",
        "body" : "I agree for Polylines. But as the method is also inherited by Polygons. A multipolygon with holes may return LatLng[][][]. See examples of Multipolygon: http://leafletjs.com/reference-1.3.0.html#polygon\r\nOr can we have different return types for the getLatLngs() method for Polylines and Polygons?",
        "createdAt" : "2018-03-08T09:03:39Z",
        "updatedAt" : "2018-03-08T09:03:39Z",
        "lastEditedBy" : "d5a0a2c6-8835-4d41-b5f1-54628abc891b",
        "tags" : [
        ]
      },
      {
        "id" : "b3858d1b-3ac1-4508-a12a-29c4a024ba0a",
        "parentId" : "79b3499c-3e6a-4851-a28a-c8671259f595",
        "authorId" : "e69aeb27-47fc-4a1b-8bc1-8dc65c6b8bc0",
        "body" : "For now it is the best result with less work. We can't inherit from Polyline when we want to make it exact. What do you think @alejo90? Should we make it exact and introduce other interfaces or classes that even do not exists - just for extending? Should we not extend from Polyline and \"rewrite\" Polygon without extending from Polyline? Or should we simply solve it with this PR?",
        "createdAt" : "2018-03-08T19:03:34Z",
        "updatedAt" : "2018-04-11T18:04:48Z",
        "lastEditedBy" : "e69aeb27-47fc-4a1b-8bc1-8dc65c6b8bc0",
        "tags" : [
        ]
      }
    ],
    "commit" : "d15cc69dfb10fc10e80c921917d7798387679b9e",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +585,589 @@    constructor(latlngs: LatLngExpression[], options?: PolylineOptions);\n    toGeoJSON(): geojson.Feature<T, P>;\n    getLatLngs(): LatLng[] | LatLng[][] | LatLng[][][];\n    setLatLngs(latlngs: LatLngExpression[]): this;\n    isEmpty(): boolean;"
  },
  {
    "id" : "4564df09-9ebd-4991-b95c-977f3be12f1c",
    "prId" : 32586,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/32586#pullrequestreview-199917702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95798651-f410-44d6-a0fd-a4ac5e527e28",
        "parentId" : null,
        "authorId" : "e69aeb27-47fc-4a1b-8bc1-8dc65c6b8bc0",
        "body" : "Can you apply the CrossOrigin type also to the other occurrences?",
        "createdAt" : "2019-01-29T16:32:17Z",
        "updatedAt" : "2019-02-06T07:37:41Z",
        "lastEditedBy" : "e69aeb27-47fc-4a1b-8bc1-8dc65c6b8bc0",
        "tags" : [
        ]
      },
      {
        "id" : "63ec6911-0e96-47c8-b9f4-44a040a679cb",
        "parentId" : "95798651-f410-44d6-a0fd-a4ac5e527e28",
        "authorId" : "e3cadd3f-2d03-4752-af3b-1d76fcfa22bd",
        "body" : "Yep, no problem. The only other place I could find it in the Leaflet documentation was in `TileLayer`:\r\nhttps://leafletjs.com/reference-1.4.0.html#tilelayer-crossorigin\r\n\r\nI've updated that interface now.",
        "createdAt" : "2019-01-30T07:08:00Z",
        "updatedAt" : "2019-02-06T07:37:41Z",
        "lastEditedBy" : "e3cadd3f-2d03-4752-af3b-1d76fcfa22bd",
        "tags" : [
        ]
      },
      {
        "id" : "ce0a1e91-9d62-4e17-9059-4da11603e593",
        "parentId" : "95798651-f410-44d6-a0fd-a4ac5e527e28",
        "authorId" : "e3cadd3f-2d03-4752-af3b-1d76fcfa22bd",
        "body" : "@atd-schubert Does this PR look okay now?",
        "createdAt" : "2019-02-05T05:14:27Z",
        "updatedAt" : "2019-02-06T07:37:41Z",
        "lastEditedBy" : "e3cadd3f-2d03-4752-af3b-1d76fcfa22bd",
        "tags" : [
        ]
      }
    ],
    "commit" : "45a316a3e61917fc34a139dc45b339bd0f2f0310",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +551,555 @@}\n\nexport type CrossOrigin = boolean | string;\n\nexport interface ImageOverlayOptions extends InteractiveLayerOptions {"
  },
  {
    "id" : "1a282b28-989e-410d-b7d5-2fc5c5194846",
    "prId" : 32586,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/32586#pullrequestreview-203003494",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "916e09b2-24fa-4cdb-a492-3d65b63ff8cb",
        "parentId" : null,
        "authorId" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "body" : "Any reason to `export` the type? Might make it a bit cleaner an API to leave it hidden.",
        "createdAt" : "2019-02-12T22:11:22Z",
        "updatedAt" : "2019-02-12T22:11:58Z",
        "lastEditedBy" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "tags" : [
        ]
      },
      {
        "id" : "a2f920f8-5616-4efb-aa7a-cfed4ba052da",
        "parentId" : "916e09b2-24fa-4cdb-a492-3d65b63ff8cb",
        "authorId" : "e3cadd3f-2d03-4752-af3b-1d76fcfa22bd",
        "body" : "I was under the impression that all types should to be exported even if it seems unnecessary based on this documentation: https://github.com/Microsoft/dtslint/blob/master/docs/strict-export-declare-modifiers.md. If I run `npm run lint leaflet` after making the change to this:\r\n```ts\r\ntype CrossOrigin = boolean | string;\r\n```\r\n\r\nI get the following output:\r\n```\r\n$ npm run lint leaflet\r\n\r\n> definitely-typed@0.0.3 lint /my/path/Documents/dev/DefinitelyTyped\r\n> dtslint types \"leaflet\"\r\n\r\nError: /my/path/Documents/dev/DefinitelyTyped/types/leaflet/index.d.ts:552:6\r\nERROR: 552:6  strict-export-declare-modifiers  All declarations in this module are exported automatically. Prefer to explicitly write 'export' for clarity. If you have a good reason not to export this declaration, add 'export {}' to the module to shut off automatic exporting. See: https://github.com/Microsoft/dtslint/blob/master/docs/strict-export-declare-modifiers.md\r\n\r\n    at /my/path/Documents/dev/DefinitelyTyped/node_modules/dtslint/bin/index.js:160:19\r\n    at Generator.next (<anonymous>)\r\n    at fulfilled (/my/path/Documents/dev/DefinitelyTyped/node_modules/dtslint/bin/index.js:5:58)\r\n    at <anonymous>\r\nnpm ERR! code ELIFECYCLE\r\nnpm ERR! errno 1\r\nnpm ERR! definitely-typed@0.0.3 lint: `dtslint types \"leaflet\"`\r\nnpm ERR! Exit status 1\r\nnpm ERR! \r\nnpm ERR! Failed at the definitely-typed@0.0.3 lint script.\r\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\r\n\r\nnpm ERR! A complete log of this run can be found in:\r\nnpm ERR!     /my/path/.npm/_logs/2019-02-13T01_15_08_050Z-debug.log\r\n```\r\n\r\nBased on the error I think I would have to turn automatic exporting off for the whole module, which seems like it should be discussed in a separate issue.",
        "createdAt" : "2019-02-13T01:31:50Z",
        "updatedAt" : "2019-02-13T01:31:51Z",
        "lastEditedBy" : "e3cadd3f-2d03-4752-af3b-1d76fcfa22bd",
        "tags" : [
        ]
      },
      {
        "id" : "8f2c9184-708a-48b7-a050-b5e193b42e40",
        "parentId" : "916e09b2-24fa-4cdb-a492-3d65b63ff8cb",
        "authorId" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "body" : "My bad, didnâ€™t catch that requirement!",
        "createdAt" : "2019-02-13T02:20:00Z",
        "updatedAt" : "2019-02-13T02:20:00Z",
        "lastEditedBy" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "tags" : [
        ]
      }
    ],
    "commit" : "45a316a3e61917fc34a139dc45b339bd0f2f0310",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +551,555 @@}\n\nexport type CrossOrigin = boolean | string;\n\nexport interface ImageOverlayOptions extends InteractiveLayerOptions {"
  },
  {
    "id" : "396ee7bd-bd32-4423-890a-0b260085e337",
    "prId" : 32950,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/32950#pullrequestreview-206468281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02528cde-3eeb-40d3-b6e0-129298e277fd",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "I had a quick look at the underlying library and it didn't obviously support non-string values for `dashArray`.  Do you have a link to the code that's consuming an array instead?",
        "createdAt" : "2019-02-20T23:31:05Z",
        "updatedAt" : "2019-02-21T15:00:26Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "bf5a2468-4806-47d0-8609-8d51b6e9d9ab",
        "parentId" : "02528cde-3eeb-40d3-b6e0-129298e277fd",
        "authorId" : "1e114be1-6c82-4ce6-9b3f-22cd8d020ca9",
        "body" : "I'm looking at this PR https://github.com/Leaflet/Leaflet/pull/6200, which is part of Leaflet 1.3.2. The documentation does not appear to be updated. ",
        "createdAt" : "2019-02-21T14:57:55Z",
        "updatedAt" : "2019-02-21T15:00:26Z",
        "lastEditedBy" : "1e114be1-6c82-4ce6-9b3f-22cd8d020ca9",
        "tags" : [
        ]
      },
      {
        "id" : "705430f8-e59c-43e6-98a1-c7aea0ba9170",
        "parentId" : "02528cde-3eeb-40d3-b6e0-129298e277fd",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "Perfect.  Thanks!",
        "createdAt" : "2019-02-21T18:28:16Z",
        "updatedAt" : "2019-02-21T18:28:17Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      }
    ],
    "commit" : "0af47c7cc6b61b10b9bbb7159928e71e2b6002a6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +627,631 @@    lineCap?: LineCapShape;\n    lineJoin?: LineJoinShape;\n    dashArray?: string | number[];\n    dashOffset?: string;\n    fill?: boolean;"
  },
  {
    "id" : "bbe89f36-c4d3-4077-8507-c061fe2c05e9",
    "prId" : 32950,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/32950#pullrequestreview-206353067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26436a59-27ae-4d34-8a3e-6663a6860c17",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "It might be nice to add tests covering the new properties.",
        "createdAt" : "2019-02-20T23:31:18Z",
        "updatedAt" : "2019-02-21T15:00:26Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "8ba310ea-7827-4b3a-8f13-aca70e240f07",
        "parentId" : "26436a59-27ae-4d34-8a3e-6663a6860c17",
        "authorId" : "1e114be1-6c82-4ce6-9b3f-22cd8d020ca9",
        "body" : "Done ",
        "createdAt" : "2019-02-21T15:03:21Z",
        "updatedAt" : "2019-02-21T15:03:21Z",
        "lastEditedBy" : "1e114be1-6c82-4ce6-9b3f-22cd8d020ca9",
        "tags" : [
        ]
      }
    ],
    "commit" : "0af47c7cc6b61b10b9bbb7159928e71e2b6002a6",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1536,1540 @@    riseOnHover?: boolean;\n    riseOffset?: number;\n    autoPan?: boolean;\n    autoPanSpeed?: number;\n    autoPanPadding?: PointExpression;"
  },
  {
    "id" : "b318e718-7572-43da-b33b-8c2db5dd1ce1",
    "prId" : 38885,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/38885#pullrequestreview-297662110",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ef58c2f-edb3-4379-99f6-933c2492bf1e",
        "parentId" : null,
        "authorId" : "0ec5ee53-1f04-4f9f-9087-2e5430305508",
        "body" : "Hm not sure how I feel about this to be honest",
        "createdAt" : "2019-10-04T18:33:13Z",
        "updatedAt" : "2019-10-04T18:33:14Z",
        "lastEditedBy" : "0ec5ee53-1f04-4f9f-9087-2e5430305508",
        "tags" : [
        ]
      },
      {
        "id" : "78e9ffb2-6674-4f37-bdd1-0eb43116cd7c",
        "parentId" : "2ef58c2f-edb3-4379-99f6-933c2492bf1e",
        "authorId" : "cfacb38f-9c77-4c12-8932-efeca827ff36",
        "body" : "@Favna unfortunately, it's necessary. Otherwise it pushes to merge the `type, fn, ctx?` overloads with the `eventMap` overload, which would be inaccurate because `eventMap` overloads do not take optional `ctx`. ",
        "createdAt" : "2019-10-04T19:00:08Z",
        "updatedAt" : "2019-10-04T19:00:09Z",
        "lastEditedBy" : "cfacb38f-9c77-4c12-8932-efeca827ff36",
        "tags" : [
        ]
      }
    ],
    "commit" : "c31d242b13cf269b888cf9d2810b76646c873a1c",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +335,339 @@     * (e.g. 'click dblclick').\n     */\n    // tslint:disable:unified-signatures\n    on(type: string, fn: LeafletEventHandlerFn, context?: any): this;\n    on(type: 'baselayerchange' | 'overlayadd' | 'overlayremove',"
  }
]