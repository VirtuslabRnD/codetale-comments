[
  {
    "id" : "2ae46d62-066a-4381-ba71-69762d1e994b",
    "prId" : 19461,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19461#pullrequestreview-59578983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90635971-579c-4328-b039-2a52151dd7eb",
        "parentId" : null,
        "authorId" : "bec6bd1f-33aa-4105-854c-4905aa6320f4",
        "body" : "add in typings here for the promise-returning versions of these functions.",
        "createdAt" : "2017-08-30T14:47:24Z",
        "updatedAt" : "2017-08-30T14:49:34Z",
        "lastEditedBy" : "bec6bd1f-33aa-4105-854c-4905aa6320f4",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2098c51a10dcee9784592dba294e6887209fc66",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +11,15 @@export class SObject<T> {\n    record(id: SalesforceId): RecordReference<T>;\n    retrieve(id: SalesforceId, options?: Object, callback?: (err: Error, record: Record<T>) => void): Promise<Record<T>>;\n    retrieve(ids: SalesforceId[], options?: Object, callback?: (err: Error, ret: Array<Record<T>>) => void): Promise<Array<Record<T>>>;\n    update(record: Partial<T>, options?: Object, callback?: (err: Error, ret: RecordResult) => void): Promise<RecordResult>;"
  },
  {
    "id" : "88a07443-4b3b-4bc7-b31f-325c6297f5cc",
    "prId" : 19461,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19461#pullrequestreview-59578983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c106527-6883-4493-abb8-9f3d788c9fe4",
        "parentId" : null,
        "authorId" : "bec6bd1f-33aa-4105-854c-4905aa6320f4",
        "body" : "I split out single and array versions of these methods so that the return types could be more strictly provided.",
        "createdAt" : "2017-08-30T14:47:51Z",
        "updatedAt" : "2017-08-30T14:49:34Z",
        "lastEditedBy" : "bec6bd1f-33aa-4105-854c-4905aa6320f4",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2098c51a10dcee9784592dba294e6887209fc66",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +13,17 @@    retrieve(id: SalesforceId, options?: Object, callback?: (err: Error, record: Record<T>) => void): Promise<Record<T>>;\n    retrieve(ids: SalesforceId[], options?: Object, callback?: (err: Error, ret: Array<Record<T>>) => void): Promise<Array<Record<T>>>;\n    update(record: Partial<T>, options?: Object, callback?: (err: Error, ret: RecordResult) => void): Promise<RecordResult>;\n    update(records: Array<Partial<T>>, options?: Object, callback?: (err: Error, ret: RecordResult[]) => void): Promise<RecordResult[]>;\n    upsert(records: Record<T>, extIdField: SalesforceId, options?: Object, callback?: (err: Error, ret: RecordResult) => void): Promise<RecordResult>;"
  },
  {
    "id" : "38847d9a-f04c-4d78-a016-f5a068748c1b",
    "prId" : 19461,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19461#pullrequestreview-60024621",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1123983-be1e-44c3-85ce-c395de0ffa88",
        "parentId" : null,
        "authorId" : "bec6bd1f-33aa-4105-854c-4905aa6320f4",
        "body" : "lint made me change all of these [] notation to Array<>",
        "createdAt" : "2017-08-30T14:48:11Z",
        "updatedAt" : "2017-08-30T14:49:34Z",
        "lastEditedBy" : "bec6bd1f-33aa-4105-854c-4905aa6320f4",
        "tags" : [
        ]
      },
      {
        "id" : "49b2242f-1bd0-4137-8686-e89e024307de",
        "parentId" : "c1123983-be1e-44c3-85ce-c395de0ffa88",
        "authorId" : "5a02d304-eb7c-4512-aefe-3dcbf4fa5922",
        "body" : "I personally prefer `[]` over `Array`, `Record<T>[]` looks way better than `Array<Record<T>>`, but yeah, not much can be done ðŸ˜¢ ",
        "createdAt" : "2017-09-01T00:33:52Z",
        "updatedAt" : "2017-09-01T00:33:52Z",
        "lastEditedBy" : "5a02d304-eb7c-4512-aefe-3dcbf4fa5922",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2098c51a10dcee9784592dba294e6887209fc66",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +39,43 @@    destroy(ids: string | string[], callback?: (err: Error, ret: any) => void): void;\n    delete(ids: string | string[], callback?: (err: Error, ret: any) => void): void;\n    deleteBulk(input?: Array<Record<T>> | stream.Stream | string, callback?: (err: Error, ret: RecordResult) => void): Batch;\n    destroyBulk(input?: Array<Record<T>> | stream.Stream | string, callback?: (err: Error, ret: RecordResult) => void): Batch;\n    destroyHardBulk(input?: Array<Record<T>> | stream.Stream | string, callback?: (err: Error, ret: RecordResult) => void): Batch;"
  },
  {
    "id" : "27313d94-a4a0-4936-a2e3-6ac796104dea",
    "prId" : 19461,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19461#pullrequestreview-59578983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad1dc45d-0449-4c75-bca6-7b75780460b8",
        "parentId" : null,
        "authorId" : "bec6bd1f-33aa-4105-854c-4905aa6320f4",
        "body" : "select with no fields should return the entire object.",
        "createdAt" : "2017-08-30T14:48:32Z",
        "updatedAt" : "2017-08-30T14:49:34Z",
        "lastEditedBy" : "bec6bd1f-33aa-4105-854c-4905aa6320f4",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2098c51a10dcee9784592dba294e6887209fc66",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +53,57 @@    quickActions(callback?: (err: Error, info: any) => void): Promise<any>;\n    recent(callback?: (err: Error, ret: RecordResult) => void): Promise<RecordResult>;\n    select(callback?: (err: Error, ret: T[]) => void): Promise<T[]>;\n    // TODO:use a typed pluck to turn `fields` into a subset of T's fields so that the output is slimmed down appropriately\n    select(fields?: {[P in keyof T]: boolean}  | Array<(keyof T)> | (keyof T), callback?: (err: Error, ret: Array<Partial<T>>) => void): Promise<Array<Partial<T>>>;"
  },
  {
    "id" : "3a8d6752-0f6b-47e7-9dc0-1a34c07ba03c",
    "prId" : 19461,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19461#pullrequestreview-59578983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9707c1ab-655b-4c63-84f5-02c74159158f",
        "parentId" : null,
        "authorId" : "bec6bd1f-33aa-4105-854c-4905aa6320f4",
        "body" : "this overload of select validates that the keys provided are actually in the base object type.",
        "createdAt" : "2017-08-30T14:49:14Z",
        "updatedAt" : "2017-08-30T14:49:34Z",
        "lastEditedBy" : "bec6bd1f-33aa-4105-854c-4905aa6320f4",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2098c51a10dcee9784592dba294e6887209fc66",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +55,59 @@    select(callback?: (err: Error, ret: T[]) => void): Promise<T[]>;\n    // TODO:use a typed pluck to turn `fields` into a subset of T's fields so that the output is slimmed down appropriately\n    select(fields?: {[P in keyof T]: boolean}  | Array<(keyof T)> | (keyof T), callback?: (err: Error, ret: Array<Partial<T>>) => void): Promise<Array<Partial<T>>>;\n}\n"
  }
]