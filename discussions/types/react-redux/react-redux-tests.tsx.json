[
  {
    "id" : "c0d49e2c-4083-43be-ad9b-3bd905d016cc",
    "prId" : 15929,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/15929#pullrequestreview-33298398",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ed999d5-4816-444f-9293-fc78bb9cd176",
        "parentId" : null,
        "authorId" : "e709fc94-0374-43ab-8ace-fe56abc9729b",
        "body" : "the type `{}` allowed the compiler to overlook the missing `TOwnProps`, since `{}` is basically `any`.",
        "createdAt" : "2017-04-18T02:19:30Z",
        "updatedAt" : "2017-04-18T17:51:38Z",
        "lastEditedBy" : "e709fc94-0374-43ab-8ace-fe56abc9729b",
        "tags" : [
        ]
      },
      {
        "id" : "a8875f63-f984-4177-a77e-e1636061adb9",
        "parentId" : "1ed999d5-4816-444f-9293-fc78bb9cd176",
        "authorId" : "dbc0e58d-9f4d-41a9-9fd8-c0b24e9aab13",
        "body" : "Indeed: #8787",
        "createdAt" : "2017-04-18T17:31:45Z",
        "updatedAt" : "2017-04-18T17:51:38Z",
        "lastEditedBy" : "dbc0e58d-9f4d-41a9-9fd8-c0b24e9aab13",
        "tags" : [
        ]
      }
    ],
    "commit" : "416c0f9c3df391ca24139d18f750506edd3180ce",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +360,364 @@    const ConnectedWithoutOwnProps = connect(mapStateToPropsWithoutOwnProps)(OwnPropsComponent);\n    const ConnectedWithOwnProps = connect(mapStateToPropsWithOwnProps)(OwnPropsComponent);\n    const ConnectedWithTypeHint = connect<StateProps, void, OwnProps>(mapStateToPropsWithoutOwnProps)(OwnPropsComponent);\n\n    // This compiles, which is bad."
  },
  {
    "id" : "21b23824-2f64-4729-950c-345d28c2ea8f",
    "prId" : 16024,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/16024#pullrequestreview-33901660",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74af3f75-c0cd-466e-9d35-b1cd7acb7301",
        "parentId" : null,
        "authorId" : "dbc0e58d-9f4d-41a9-9fd8-c0b24e9aab13",
        "body" : "Why change this test?",
        "createdAt" : "2017-04-20T17:19:52Z",
        "updatedAt" : "2017-04-20T23:58:47Z",
        "lastEditedBy" : "dbc0e58d-9f4d-41a9-9fd8-c0b24e9aab13",
        "tags" : [
        ]
      },
      {
        "id" : "21785c9e-44b8-470c-986f-02483bbfbfa2",
        "parentId" : "74af3f75-c0cd-466e-9d35-b1cd7acb7301",
        "authorId" : "e709fc94-0374-43ab-8ace-fe56abc9729b",
        "body" : "it implied to me that `missingOwn` was testing a parameter _missing_, separately from how `anything` tests add a noise parameter. They're actually the same thing.\r\n\r\nThis was more for my own sanity, I'm happy to change it back if you'd like",
        "createdAt" : "2017-04-20T18:09:41Z",
        "updatedAt" : "2017-04-20T23:58:47Z",
        "lastEditedBy" : "e709fc94-0374-43ab-8ace-fe56abc9729b",
        "tags" : [
        ]
      },
      {
        "id" : "d2a015cc-fa7b-4930-bfe4-7fb3a114b56e",
        "parentId" : "74af3f75-c0cd-466e-9d35-b1cd7acb7301",
        "authorId" : "dbc0e58d-9f4d-41a9-9fd8-c0b24e9aab13",
        "body" : "Okay, you're right, this name is more-obviously undesirable noise. Can you change the one on line 378 too?",
        "createdAt" : "2017-04-20T22:33:27Z",
        "updatedAt" : "2017-04-20T23:58:47Z",
        "lastEditedBy" : "dbc0e58d-9f4d-41a9-9fd8-c0b24e9aab13",
        "tags" : [
        ]
      }
    ],
    "commit" : "840a39c0afef2e9faf63fd4acd2c396b0414693e",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +369,373 @@\n    // This should not compile, which is good.\n    // React.createElement(ConnectedWithOwnProps, { anything: 'goes!' });\n\n    // This compiles, as expected."
  },
  {
    "id" : "b250cc2d-cf6f-4e91-8692-56ff227be9c9",
    "prId" : 19666,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19666#pullrequestreview-61726383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f81dfeb9-4ebd-4628-8edb-fe03fa33bdee",
        "parentId" : null,
        "authorId" : "af7014c7-59b2-459f-bbe5-91eb01fb7a35",
        "body" : "This had a TS error previously. `{ bar: number }` was not inferred as a `TStateProps` and thus became required in the verify section",
        "createdAt" : "2017-09-11T06:37:15Z",
        "updatedAt" : "2017-09-11T06:37:15Z",
        "lastEditedBy" : "af7014c7-59b2-459f-bbe5-91eb01fb7a35",
        "tags" : [
        ]
      }
    ],
    "commit" : "1cc622c196e2451bd2272e2af87221fc82da2dec",
    "line" : 191,
    "diffHunk" : "@@ -1,1 +189,193 @@\n    const Test = connect(\n        mapStateToPropsFactory,\n        mapDispatchToProps,\n    )(TestComponent)"
  },
  {
    "id" : "8872fc38-e2e2-4495-b341-318520f6ac39",
    "prId" : 19666,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19666#pullrequestreview-61727754",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec118277-f05e-40e4-8219-7f12527081e7",
        "parentId" : null,
        "authorId" : "af7014c7-59b2-459f-bbe5-91eb01fb7a35",
        "body" : "I find this style of verification steps more organized and easier to understand what is being tested. Many existing type tests don't verify the output of `connect` and many breakages and fixes have occurred. The `verify` is like an expectation or an assertion. It is a way to verify the component returned by `connect` has the right property requirements in a way that is understandable by people just doing React.\r\n\r\nThis line could be removed and the test look like this instead:\r\n\r\n```ts\r\nconst Test: React.ComponentClass<{ foo: string }> = connect(\r\n  mapStateToPropsFactory,\r\n  mapDispatchToProps,\r\n)(TestComponent)\r\n```\r\n\r\nBut this method allows cast narrowing. Meaning `React.ComponentClass<{}>` would be a valid cast target (`{}` can fit into `{ foo: string }`, but not the reverse)",
        "createdAt" : "2017-09-11T06:46:53Z",
        "updatedAt" : "2017-09-11T06:46:53Z",
        "lastEditedBy" : "af7014c7-59b2-459f-bbe5-91eb01fb7a35",
        "tags" : [
        ]
      }
    ],
    "commit" : "1cc622c196e2451bd2272e2af87221fc82da2dec",
    "line" : 195,
    "diffHunk" : "@@ -1,1 +193,197 @@    )(TestComponent)\n\n    const verify = <Test foo='bar' />\n}\n"
  },
  {
    "id" : "7666547c-8eec-489f-aa34-741c354af7a4",
    "prId" : 19666,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19666#pullrequestreview-61729851",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4588b61b-6dbc-4443-b48e-bbbc4d491893",
        "parentId" : null,
        "authorId" : "af7014c7-59b2-459f-bbe5-91eb01fb7a35",
        "body" : "namespacing allows all type and variable definitions to be isolated preventing a lot of numbers from being appended to types and variables making the test easier to understand and isolated. It was a bit odd that if I forgot to defined `mapStateToProps` that I'd get a type error about not having `{ value: number }` since that is the signature of a globally defined function",
        "createdAt" : "2017-09-11T07:01:16Z",
        "updatedAt" : "2017-09-11T07:01:16Z",
        "lastEditedBy" : "af7014c7-59b2-459f-bbe5-91eb01fb7a35",
        "tags" : [
        ]
      }
    ],
    "commit" : "1cc622c196e2451bd2272e2af87221fc82da2dec",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +14,18 @@// output of `connect` to make sure the signature is what is expected\n\nnamespace Empty {\n    interface OwnProps { foo: string, dispatch: Dispatch<any> }    \n"
  },
  {
    "id" : "506db894-27cd-4c82-b972-0f46700e9378",
    "prId" : 24764,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24764#pullrequestreview-110090214",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23f9a66c-f155-48c5-af81-3821109bf81b",
        "parentId" : null,
        "authorId" : "26c05778-4426-489f-a8a1-2a6af08f6974",
        "body" : "Good call on these tests here. In fact, perhaps we should add tests for all 12 overloads. That's outside the scope of this PR though, just thinking aloud :)",
        "createdAt" : "2018-04-06T14:43:38Z",
        "updatedAt" : "2018-04-06T14:44:05Z",
        "lastEditedBy" : "26c05778-4426-489f-a8a1-2a6af08f6974",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8f2d97c8051b54ccbdc6ac78502612867ef2526",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +901,905 @@}\n\nnamespace TestTypeInference {\n    interface State { a: number };\n"
  },
  {
    "id" : "213936c0-ada9-4f55-b802-1280f6da9f4b",
    "prId" : 24764,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24764#pullrequestreview-110575710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4442454f-ec4c-400a-8427-1443337fb241",
        "parentId" : null,
        "authorId" : "be8956b7-8d17-45ea-bda1-9deb9d43ccb4",
        "body" : "This looks like a redundant definition of `State`. ",
        "createdAt" : "2018-04-09T18:56:52Z",
        "updatedAt" : "2018-04-09T18:58:43Z",
        "lastEditedBy" : "be8956b7-8d17-45ea-bda1-9deb9d43ccb4",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8f2d97c8051b54ccbdc6ac78502612867ef2526",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +907,911 @@        (state: {a: number}, props: {b: number}) => ({a: state.a, c: state.a + props.b})\n    )(props => <span>{props.a} + {props.b} = {props.c}</span>)\n    interface State { a: number };\n    ReactDOM.render(<OnlyState b={1} />, document.body);\n"
  },
  {
    "id" : "542239fa-c80c-4e23-a6e0-6f5ae5e9f5e4",
    "prId" : 24764,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24764#pullrequestreview-110575710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60aad021-5186-48f0-a874-041db0c23df1",
        "parentId" : null,
        "authorId" : "be8956b7-8d17-45ea-bda1-9deb9d43ccb4",
        "body" : "Wouldn't it be better to use `State` instead of `{a: number}` here?",
        "createdAt" : "2018-04-09T18:57:59Z",
        "updatedAt" : "2018-04-09T18:58:43Z",
        "lastEditedBy" : "be8956b7-8d17-45ea-bda1-9deb9d43ccb4",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8f2d97c8051b54ccbdc6ac78502612867ef2526",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +905,909 @@\n    const OnlyState = connect(\n        (state: {a: number}, props: {b: number}) => ({a: state.a, c: state.a + props.b})\n    )(props => <span>{props.a} + {props.b} = {props.c}</span>)\n    interface State { a: number };"
  },
  {
    "id" : "11903b70-7eb3-490d-bdbd-7754e67ac192",
    "prId" : 30760,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30760#pullrequestreview-178634480",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08ec96ac-1331-47f8-8ffe-73d8ad68f0ba",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "If you're using `redux-thunk` you should be using `ThunkDispatch` as the type of `dispatch` which would correctly handle thunk action creators.\r\n\r\nProbably better to add a test just to make sure `mapDispatchToProps(dispatch: ThunkDispatch)` is assignable as the 2nd argument.",
        "createdAt" : "2018-11-27T02:02:30Z",
        "updatedAt" : "2018-11-27T06:18:51Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "55fdc319-bd2b-471b-ba0e-9bf5653e986b",
        "parentId" : "08ec96ac-1331-47f8-8ffe-73d8ad68f0ba",
        "authorId" : "0b9eba81-2056-4749-8c25-f212b6a4a275",
        "body" : "Can I use a `ThunkDispatch` type in tests without adding explicit dependency on `redux-thunk`?\r\n\r\nIf \"No\", then what are the benefits  of using `ThunkDispatch` instead of simple `Dispatch` in the test? As far as I can tell `react-redux` will NOT use type inference to pick up `ThunkDispatch` type from `mapDispatchToProps` argument (i.e. `react-redux` will still use simple `Dispatch` under the hood  regardless of what type you're using in test).\r\n\r\nI'd like to avoid explicit dependency on `redux-thunk`, because:\r\n- `react-redux` can easily be used without `redux-thunk`, so it's there's no actual depenendency in place (and I'm not sure if adding `redux-thunk` to `react-redux`'s  `package.json` will not lead to problem for the people not using `redux-thunk`)\r\n- even if we use `redux-thunk` only for the tests, future maintainers may use it in the type definitions (just because the dependency is already there), which may make them less generic (they will stop working for custom `redux-thunk` implemenations, for example)\r\n- it will be a bad example for the future maintainers that may add dependencies on other Redux middlewares by analogy which may affect `redux-thunk`'s definitions verstaility/maintainability (I cannot imagine how though; it's more like a gut feeling).",
        "createdAt" : "2018-11-27T06:14:05Z",
        "updatedAt" : "2018-11-27T06:22:15Z",
        "lastEditedBy" : "0b9eba81-2056-4749-8c25-f212b6a4a275",
        "tags" : [
        ]
      },
      {
        "id" : "08feeba7-902c-498c-93aa-2e103743574a",
        "parentId" : "08ec96ac-1331-47f8-8ffe-73d8ad68f0ba",
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Not really...... would probably have to copy the definition\r\n\r\n```ts\r\nexport interface ThunkDispatch<S, E, A extends Action> {\r\n  <T extends A>(action: T): T;\r\n  <R>(asyncAction: ThunkAction<R, S, E, A>): R;\r\n}\r\n```\r\n\r\nBecause it doesn't `extends Dispatch` it looks like it wouldn't work, not directly. With the way the `Middleware` / `StoreEnhancer` interface works, they actually can upgrade the type of `dispatch` in a specific `redux` store (which would have to be accessed with `typeof store['dispatch']`), but I'm not sure there's any way to propagate it to `react-redux` as `connect` doesn't know what store it is connecting to.\r\n\r\nSo there are two alternatives: do something similar to what `styled-components` does and have a way to reexport in your own code a version of `react-redux` where the store/dispatch types are hardcoded to types you're aware of, or change `redux-thunk` to directly augment `Dispatch<A>` instead.\r\n\r\nOr recommend that users write the module augmentation themselves:\r\n\r\n```ts\r\nimport { ThunkDispatch } from 'redux-thunk'\r\n\r\ninterface State {\r\n  // your redux store state\r\n}\r\n\r\ndeclare module 'redux' {\r\n  interface Dispatch<A extends Action> extends ThunkDispatch<State, never, A> {}\r\n}\r\n```",
        "createdAt" : "2018-11-27T06:42:57Z",
        "updatedAt" : "2018-11-27T06:42:57Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "68f761df-3c0f-4a80-a5d2-6e913b40acc6",
        "parentId" : "08ec96ac-1331-47f8-8ffe-73d8ad68f0ba",
        "authorId" : "0b9eba81-2056-4749-8c25-f212b6a4a275",
        "body" : "Thank you very much for explanation, but to be honest I did not get the complete picture out of it (seems like I'm not yet ready for such an abstract types; I'll probably need to re-read your comment again and again to understand it).\r\n\r\nEven if the problem is real (I'll check if it exists for me in my project), it seems like it was there even before I introduced any of my thunk-changes - hence it's not immediate subject of this PR. I'm going to contemplate on it and maybe I'll come up with the follow up PR to address it.\r\n\r\nRight now I'm more concerned by the fact that my previous PR introduced regression into the `@types/react-redux@6.0.10`, so I'd like to merge this PR as fast as possible to fix previously introduced regression.\r\n\r\nSo, if you don't mind, let's delay this problem for a while.",
        "createdAt" : "2018-11-27T07:10:42Z",
        "updatedAt" : "2018-11-27T07:13:14Z",
        "lastEditedBy" : "0b9eba81-2056-4749-8c25-f212b6a4a275",
        "tags" : [
        ]
      }
    ],
    "commit" : "84bc355df06ea07679ab0634483c08f76ac4bb7c",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +157,161 @@        return {\n            remove(item: string) {\n                return () => dispatch({ type: 'REMOVE_ITEM', item });\n            }\n        };"
  },
  {
    "id" : "b2e20433-811a-442a-8afb-5c09250b7492",
    "prId" : 30760,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30760#pullrequestreview-178624002",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b383c26-f0a9-467b-9469-5e3bbf5cb148",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "It could be nice to have a simply-named type operator that you can use to transform the types yourself.\r\n\r\nThis is how I generally declare my components' inputs:\r\n\r\n```ts\r\ninterface OwnProps {\r\n  // ...\r\n}\r\n\r\ninterface ReduxProps {\r\n  // things from mapStateToProps\r\n}\r\n\r\nfunction mapStateToProps(state: State /* if required: , ownProps: OwnProps */): ReduxProps {\r\n  return { /* ... */ }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  actionCreator1,\r\n  actionCreator2\r\n}\r\n\r\ntype Props = OwnProps & ReduxProps & typeof mapDispatchToProps\r\n```\r\n\r\nThe request is for something like `type ResolveThunks<T> = ...` that you could then use like `ResolveThunks<typeof mapDispatchToProps>`.",
        "createdAt" : "2018-11-27T02:07:10Z",
        "updatedAt" : "2018-11-27T06:18:51Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "93db9217-3ab8-4b78-9116-f78c69ca65ae",
        "parentId" : "0b383c26-f0a9-467b-9469-5e3bbf5cb148",
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "(oh, you have `WithThunkActionCreators` but would be nice to have a shorter name)",
        "createdAt" : "2018-11-27T02:08:38Z",
        "updatedAt" : "2018-11-27T06:18:51Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "0a3c49a4-be5a-49c6-a222-59579a503a39",
        "parentId" : "0b383c26-f0a9-467b-9469-5e3bbf5cb148",
        "authorId" : "0b9eba81-2056-4749-8c25-f212b6a4a275",
        "body" : "Renamed `WithThunkActionCreators` to `ResolveThunks`.",
        "createdAt" : "2018-11-27T06:19:35Z",
        "updatedAt" : "2018-11-30T11:46:46Z",
        "lastEditedBy" : "0b9eba81-2056-4749-8c25-f212b6a4a275",
        "tags" : [
        ]
      }
    ],
    "commit" : "84bc355df06ea07679ab0634483c08f76ac4bb7c",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +117,121 @@    interface TestComponentProps extends OwnProps {\n        simpleAction: typeof simpleAction;\n        thunkAction(param1: number, param2: string): Promise<string>;\n   }\n    class TestComponent extends React.Component<TestComponentProps> {}"
  },
  {
    "id" : "3160573a-bff0-4ef7-a195-3ef2cfcb3fb6",
    "prId" : 31799,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/31799#pullrequestreview-196158935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "387edccb-7939-40ea-a040-2bcb6d532395",
        "parentId" : null,
        "authorId" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "body" : "You can also add the following to test:\r\n```ts\r\nsimpleSelect(state, ownProps); // $ExpectError\r\nnotSimpleSelect(state); // $ExpectError\r\n```",
        "createdAt" : "2019-01-24T17:34:33Z",
        "updatedAt" : "2019-01-24T21:14:08Z",
        "lastEditedBy" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3beeb8c77c07a7b153b8fd27df50b816d38c9f71",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1203,1207 @@    const ownProps = {};\n    const state = { key: 'value' };\n    simpleSelect(state);\n    notSimpleSelect(state, ownProps);\n    simpleSelect(state, ownProps); // $ExpectError"
  },
  {
    "id" : "b02bfdcd-305a-416c-83d7-9eb45e558005",
    "prId" : 41540,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/41540#pullrequestreview-346056784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba216c9f-3cb4-4a77-aeb3-0d7993c0423e",
        "parentId" : null,
        "authorId" : "cb98f9f1-fd67-4726-b05f-4fc0244131bd",
        "body" : "Can you add another test with a correctly inferred type just to be sure?",
        "createdAt" : "2020-01-21T17:25:38Z",
        "updatedAt" : "2020-01-23T12:16:04Z",
        "lastEditedBy" : "cb98f9f1-fd67-4726-b05f-4fc0244131bd",
        "tags" : [
        ]
      }
    ],
    "commit" : "144f5e9cbc29f0bc5c00d14afc2fb534e7fe1ebd",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1360,1364 @@    const correctlyInferred: State = useSelector(selector, shallowEqual);\n    const inferredTypeIsNotString: string = useSelector(selector, shallowEqual); // $ExpectError\n\n    const compare = (_l: number, _r: number) => true;\n    useSelector(() => 1, compare);"
  },
  {
    "id" : "46a12219-bb84-4a3e-b20c-2f0be113fa3e",
    "prId" : 54363,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/54363#pullrequestreview-701655076",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bd16b8e-8acd-4394-85ea-09292a3a45c9",
        "parentId" : null,
        "authorId" : "8f534d80-4fb7-489a-bf60-2aa61762716e",
        "body" : "It was difficult to keep this behavior because in this PR, we transform the props in the following steps:\r\n\r\n- `{ bar: number, fn: () => void, foo: string }`\r\n- → `{ bar?: number | undefined, fn: () => void, foo: string }` (apply JSX.LibraryManagedAttributes)\r\n- → `{ bar?: number | undefined, fn: () => void }` (remove injected props)\r\n\r\n`OwnProps` doesn't appear in any of the steps.",
        "createdAt" : "2021-07-08T05:35:16Z",
        "updatedAt" : "2021-07-08T05:35:16Z",
        "lastEditedBy" : "8f534d80-4fb7-489a-bf60-2aa61762716e",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8b9cd8e57184f851e6361813bd36ab8f1dc9c55",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1215,1219 @@    <ConnectedComponent fn={() => { }} />;\n\n    const ConnectedComponent2 = connect<MapStateProps, void, ExternalOwnProps>(mapStateToProps)(Component);\n    <ConnectedComponent2 fn={() => { }} />;\n}"
  }
]