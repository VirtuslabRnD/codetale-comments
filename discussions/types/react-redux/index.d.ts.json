[
  {
    "id" : "d02c5392-0156-4d88-9c93-ed774ecb19eb",
    "prId" : 16969,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/16969#pullrequestreview-44187500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12ce9411-f35c-4bf1-a8b0-d051ded59547",
        "parentId" : null,
        "authorId" : "24253a71-b2ae-410a-8c5b-4101ecaa21ca",
        "body" : "Hey @blakeembrey - I'm trying to understand some type issues we're having (related to https://github.com/DefinitelyTyped/DefinitelyTyped/issues/16990#issuecomment-308256211). We don't fully understand why the `<T extends TOwnProps>` is needed. It seems like below should be correct in terms of what react-redux connect returns:\r\n```\r\ninterface ComponentDecorator<TMergedProps, TOwnProps> {\r\n  (component: Component<TOwnProps & TMergedProps>): ComponentClass<TOwnProps>;\r\n}\r\n```\r\nWhen we change it to that the problem in that linked comment seems to go away, because it can correctly infer that the connected component only accepts ownProps, not all the props of the dumb / presentation component.\r\nI've added a test in my fork which passes if I change to that:\r\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/compare/master...ritwik:react-redux/fix-ownprop-inference\r\nHowever, the problem is that now the tests for untyped connect calls don't work: \r\n```\r\nreact-redux-tests.tsx(286,1): error TS2322: Type 'ComponentClass<{}>' is not assignable to type 'ComponentClass<TestProp>'.\r\n  Type '{}' is not assignable to type 'TestProp'.\r\n    Property 'property1' is missing in type '{}'.\r\nreact-redux-tests.tsx(289,23): error TS2339: Property 'property1' does not exist on type 'IntrinsicAttributes & IntrinsicClassAttributes<Component<{}, ComponentState>> & Readonly<{ childr...'.\r\nreact-redux-tests.tsx(301,39): error TS2345: Argument of type '(props: HelloMessageProps) => Element' is not assignable to parameter of type 'Component<DispatchProp<any>>'.\r\n  Type '(props: HelloMessageProps) => Element' is not assignable to type 'StatelessComponent<DispatchProp<any>>'.\r\n    Types of parameters 'props' and 'props' are incompatible.\r\n      Type 'DispatchProp<any> & { children?: ReactNode; }' is not assignable to type 'HelloMessageProps'.\r\n        Property 'name' is missing in type 'DispatchProp<any> & { children?: ReactNode; }'.\r\nreact-redux-tests.tsx(303,40): error TS2339: Property 'name' does not exist on type 'IntrinsicAttributes & IntrinsicClassAttributes<Component<{}, ComponentState>> & Readonly<{ childr...'.\r\n```\r\nSo my assumption is that it's needed for the cases where you're less explicit about the ownprop types? ",
        "createdAt" : "2017-06-14T21:59:32Z",
        "updatedAt" : "2017-06-14T21:59:32Z",
        "lastEditedBy" : "24253a71-b2ae-410a-8c5b-4101ecaa21ca",
        "tags" : [
        ]
      },
      {
        "id" : "71a0e66a-3a7b-43a1-af10-bafa031c7b74",
        "parentId" : "12ce9411-f35c-4bf1-a8b0-d051ded59547",
        "authorId" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "body" : "Yes. If you aren't explicit in the definition at `connect` it's used to capture the additional properties for the component. It might be possible to do `<T>(component: Component<T & TOwnProps & TMergedProps>): ComponentClass<T & TOwnProps>` instead - does that solve both problems?",
        "createdAt" : "2017-06-14T22:21:25Z",
        "updatedAt" : "2017-06-14T22:21:25Z",
        "lastEditedBy" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "tags" : [
        ]
      },
      {
        "id" : "0e067bd6-1b51-42d5-9481-8fb64182440d",
        "parentId" : "12ce9411-f35c-4bf1-a8b0-d051ded59547",
        "authorId" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "body" : "Maybe we can provide two versions of the generic overloads? One where you define \"own props\" and another where it's inferred?",
        "createdAt" : "2017-06-14T22:38:05Z",
        "updatedAt" : "2017-06-14T22:38:05Z",
        "lastEditedBy" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "tags" : [
        ]
      },
      {
        "id" : "9ca615db-0782-497c-b8f5-c80f7b33be9d",
        "parentId" : "12ce9411-f35c-4bf1-a8b0-d051ded59547",
        "authorId" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "body" : "Also, FWIW, it is possible to make your code work today with `connect()<OwnProps>(Component)`, but I would like to improve the default behaviour for everyone involved.",
        "createdAt" : "2017-06-14T22:42:03Z",
        "updatedAt" : "2017-06-14T22:42:03Z",
        "lastEditedBy" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "tags" : [
        ]
      },
      {
        "id" : "d2ae5b7c-aa33-4777-b80b-fedd316c33cd",
        "parentId" : "12ce9411-f35c-4bf1-a8b0-d051ded59547",
        "authorId" : "24253a71-b2ae-410a-8c5b-4101ecaa21ca",
        "body" : "ah interesting - I'll try that out tomorrow and see if both tests pass. Agree that it would be good to support both options. In the mean time, I'll also try the `connect()<OwnProps>(Component)`, happy for that to be the interim solution for my codebase while we try the other ideas. Appreciate the help! :)",
        "createdAt" : "2017-06-15T01:25:18Z",
        "updatedAt" : "2017-06-15T01:25:18Z",
        "lastEditedBy" : "24253a71-b2ae-410a-8c5b-4101ecaa21ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "f527af6ed365e87058480e22577e3e191a13fb42",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +21,25 @@\ninterface ComponentDecorator<TMergedProps, TOwnProps> {\n    <T extends TOwnProps>(component: Component<T & TMergedProps>): ComponentClass<T>;\n}\n"
  },
  {
    "id" : "8658eb78-71d9-48f0-873c-cd5cdeb5a711",
    "prId" : 17196,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17196#pullrequestreview-44705412",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4694ce12-314a-4ffe-afed-a6a3546a9000",
        "parentId" : null,
        "authorId" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "body" : "I see that only the zero argument overload for ```connect()``` uses ```ComponentDecoratorInfer``` now. Could you add a test that exercises it?",
        "createdAt" : "2017-06-16T22:56:38Z",
        "updatedAt" : "2017-06-16T22:56:47Z",
        "lastEditedBy" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "tags" : [
        ]
      },
      {
        "id" : "19516a96-1383-4b86-b85f-a65a515a0fc4",
        "parentId" : "4694ce12-314a-4ffe-afed-a6a3546a9000",
        "authorId" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "body" : "There already are.",
        "createdAt" : "2017-06-17T01:37:14Z",
        "updatedAt" : "2017-06-17T01:37:14Z",
        "lastEditedBy" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "tags" : [
        ]
      },
      {
        "id" : "2a4dd260-44f4-4e69-bffb-80a8f126bccc",
        "parentId" : "4694ce12-314a-4ffe-afed-a6a3546a9000",
        "authorId" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "body" : "So there are. My mistake.",
        "createdAt" : "2017-06-17T01:39:40Z",
        "updatedAt" : "2017-06-17T01:39:40Z",
        "lastEditedBy" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "tags" : [
        ]
      },
      {
        "id" : "4f321ef9-25f0-4a28-a79c-6700d48a2d15",
        "parentId" : "4694ce12-314a-4ffe-afed-a6a3546a9000",
        "authorId" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "body" : "No problem. Hopefully all bases are covered now - this change was mostly in the opposite direction making only the single endpoint inferred rather than introducing something new.",
        "createdAt" : "2017-06-17T18:21:47Z",
        "updatedAt" : "2017-06-17T18:21:47Z",
        "lastEditedBy" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6087cff80d8e05e7523e12f3829b413eea4ef22",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +51,55 @@ * @param options\n */\nexport declare function connect(): ComponentDecoratorInfer<DispatchProp<any>>;\n\nexport declare function connect<TStateProps, no_dispatch, TOwnProps>("
  },
  {
    "id" : "43921213-5f8e-4ef9-a7b4-1707b85a9067",
    "prId" : 18510,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18510#pullrequestreview-55028340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07e19fa0-5e1f-478b-aa78-26d176e1a23f",
        "parentId" : null,
        "authorId" : "e709fc94-0374-43ab-8ace-fe56abc9729b",
        "body" : "why are `DispatchProp<any>` added when `mapDispatchToProps` is undefined?",
        "createdAt" : "2017-08-08T16:11:23Z",
        "updatedAt" : "2017-08-14T19:04:11Z",
        "lastEditedBy" : "e709fc94-0374-43ab-8ace-fe56abc9729b",
        "tags" : [
        ]
      },
      {
        "id" : "4b25c187-1063-405a-aaae-c190722dc61f",
        "parentId" : "07e19fa0-5e1f-478b-aa78-26d176e1a23f",
        "authorId" : "2de8fc81-fd63-4667-943c-0ec4022dd342",
        "body" : "That's how `react-redux` works:\r\n\r\n> If you do not supply your own `mapDispatchToProps` function or object full of action creators, the default `mapDispatchToProps` implementation just injects `dispatch` into your component‚Äôs props.\r\n\r\nhttps://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options",
        "createdAt" : "2017-08-08T18:22:22Z",
        "updatedAt" : "2017-08-14T19:04:11Z",
        "lastEditedBy" : "2de8fc81-fd63-4667-943c-0ec4022dd342",
        "tags" : [
        ]
      },
      {
        "id" : "0d169e2c-373a-41ba-810c-bc8c00d97e10",
        "parentId" : "07e19fa0-5e1f-478b-aa78-26d176e1a23f",
        "authorId" : "e709fc94-0374-43ab-8ace-fe56abc9729b",
        "body" : "üëç ",
        "createdAt" : "2017-08-08T18:27:09Z",
        "updatedAt" : "2017-08-14T19:04:11Z",
        "lastEditedBy" : "e709fc94-0374-43ab-8ace-fe56abc9729b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1dea144e504df95c13a01ca65d03224169dc1623",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +70,74 @@export declare function connect<TStateProps, no_dispatch, TOwnProps>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps>\n): InferableComponentEnhancerWithProps<TStateProps & DispatchProp<any>, TOwnProps>;\n\nexport declare function connect<no_state, TDispatchProps, TOwnProps>("
  },
  {
    "id" : "a5512a12-d652-4948-b2ea-b93b5442baaf",
    "prId" : 18510,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18510#pullrequestreview-55332948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "575377e0-2995-4b87-82c4-e987bda0fbf8",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "These types seem rather complicated.  Would it make sense to add some sample uses to the test case below?",
        "createdAt" : "2017-08-09T17:33:38Z",
        "updatedAt" : "2017-08-14T19:04:11Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "4ae2bc11-a6e0-4ae2-863b-4d04dcacf926",
        "parentId" : "575377e0-2995-4b87-82c4-e987bda0fbf8",
        "authorId" : "2de8fc81-fd63-4667-943c-0ec4022dd342",
        "body" : "I'm not opposed to doing that. It's definitely not trivial.",
        "createdAt" : "2017-08-09T18:36:41Z",
        "updatedAt" : "2017-08-14T19:04:11Z",
        "lastEditedBy" : "2de8fc81-fd63-4667-943c-0ec4022dd342",
        "tags" : [
        ]
      }
    ],
    "commit" : "1dea144e504df95c13a01ca65d03224169dc1623",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +21,25 @@\n// Diff / Omit taken from https://github.com/Microsoft/TypeScript/issues/12215#issuecomment-311923766\ntype Diff<T extends string, U extends string> = ({ [P in T]: P } & { [P in U]: never } & { [x: string]: never })[T];\ntype Omit<T, K extends keyof T> = Pick<T, Diff<keyof T, K>>;\n"
  },
  {
    "id" : "4e32580d-81c9-448c-84c6-c5680b497030",
    "prId" : 19666,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19666#pullrequestreview-63166869",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29c7c225-418b-4230-8072-7be55f6de02c",
        "parentId" : null,
        "authorId" : "af7014c7-59b2-459f-bbe5-91eb01fb7a35",
        "body" : "The previous order caused a map factory to not be inferred. Listing the factory first forces TS to recognized the factory first and thus infer `TStateProps` properly",
        "createdAt" : "2017-09-11T06:35:09Z",
        "updatedAt" : "2017-09-11T06:35:10Z",
        "lastEditedBy" : "af7014c7-59b2-459f-bbe5-91eb01fb7a35",
        "tags" : [
        ]
      },
      {
        "id" : "9791fd44-5375-485d-ab3c-b17b2e24de65",
        "parentId" : "29c7c225-418b-4230-8072-7be55f6de02c",
        "authorId" : "e709fc94-0374-43ab-8ace-fe56abc9729b",
        "body" : "late to the üéâ :\r\nwas adding `| null | undefined` necessary? any reason you didn't do that for `MapDispatchToPropsParam`?",
        "createdAt" : "2017-09-15T00:19:44Z",
        "updatedAt" : "2017-09-15T00:19:46Z",
        "lastEditedBy" : "e709fc94-0374-43ab-8ace-fe56abc9729b",
        "tags" : [
        ]
      },
      {
        "id" : "46fd93a0-b912-45f6-935d-b305999732af",
        "parentId" : "29c7c225-418b-4230-8072-7be55f6de02c",
        "authorId" : "2de8fc81-fd63-4667-943c-0ec4022dd342",
        "body" : "It's necessary because often times you only want to give an argument for dispatch without requiring state which means you need to pass null for `mapStateToProps`.",
        "createdAt" : "2017-09-15T01:17:57Z",
        "updatedAt" : "2017-09-15T01:17:57Z",
        "lastEditedBy" : "2de8fc81-fd63-4667-943c-0ec4022dd342",
        "tags" : [
        ]
      },
      {
        "id" : "19e8c05f-f9e2-4a98-a544-897c1de91efd",
        "parentId" : "29c7c225-418b-4230-8072-7be55f6de02c",
        "authorId" : "e709fc94-0374-43ab-8ace-fe56abc9729b",
        "body" : "wouldn't the same be true for only providing an argument for `mergeProps`?\r\n\r\n```\r\nexport const FooHOC = connect<undefined, undefined, TOwnProps, TMergedProps>(\r\n    undefined,\r\n    undefined,\r\n    mergeProps,\r\n)(UnconnectedFoo);\r\n```\r\n\r\nI have similar code in a codebase with `strictNullChecks`, and it works fine with current typings.",
        "createdAt" : "2017-09-15T01:57:14Z",
        "updatedAt" : "2017-09-15T01:57:14Z",
        "lastEditedBy" : "e709fc94-0374-43ab-8ace-fe56abc9729b",
        "tags" : [
        ]
      },
      {
        "id" : "a708d616-d138-4340-9944-fcc55af55109",
        "parentId" : "29c7c225-418b-4230-8072-7be55f6de02c",
        "authorId" : "e709fc94-0374-43ab-8ace-fe56abc9729b",
        "body" : "on second thought, this goes against the overloads we've provided.\r\nthe idea is that overloads that expect `mapStateToProps` to be defined reference this type, and those who don't expect `null | undefined` explicitly.\r\n\r\ne.g.\r\nhttps://github.com/NicholasBoll/DefinitelyTyped/blob/1cc622c196e2451bd2272e2af87221fc82da2dec/types/react-redux/index.d.ts#L76\r\nvs\r\nhttps://github.com/NicholasBoll/DefinitelyTyped/blob/1cc622c196e2451bd2272e2af87221fc82da2dec/types/react-redux/index.d.ts#L81\r\n\r\n",
        "createdAt" : "2017-09-15T01:59:06Z",
        "updatedAt" : "2017-09-15T01:59:06Z",
        "lastEditedBy" : "e709fc94-0374-43ab-8ace-fe56abc9729b",
        "tags" : [
        ]
      },
      {
        "id" : "43362b10-033a-44bc-bf9b-18295f3e37c9",
        "parentId" : "29c7c225-418b-4230-8072-7be55f6de02c",
        "authorId" : "2de8fc81-fd63-4667-943c-0ec4022dd342",
        "body" : "Good catch. I don't think the changes are going to cause any issues but we should probably change this one piece back to the way that it was since it's unnecessary.",
        "createdAt" : "2017-09-15T18:53:17Z",
        "updatedAt" : "2017-09-15T18:53:17Z",
        "lastEditedBy" : "2de8fc81-fd63-4667-943c-0ec4022dd342",
        "tags" : [
        ]
      },
      {
        "id" : "e7b2e66e-7d95-4544-913f-c63670ee2d7d",
        "parentId" : "29c7c225-418b-4230-8072-7be55f6de02c",
        "authorId" : "af7014c7-59b2-459f-bbe5-91eb01fb7a35",
        "body" : "Good catch. Originally I was able to get right of 4 extra overloads, but decided against the more drastic change. The `null | undefined` was leftover from that revert. It doesn't actually cause harm in this case, but currently the overloads don't work as expected anyways. Oftentimes the unexpected overload is picked (`connect(mapStateToProps, mapStateToDispatch)(Component)` will pick an overload with `mergeProps`. I was also experimenting forcing some overloads to extend from `{}` or `object` to force Typescript to recognize the correct overload.\r\n\r\nI thought we should add more test cases before refactoring anything though. It should be safe to remove `null | undefined` as that edge case shouldn't be hit with the current typings.",
        "createdAt" : "2017-09-15T21:25:26Z",
        "updatedAt" : "2017-09-15T21:25:27Z",
        "lastEditedBy" : "af7014c7-59b2-459f-bbe5-91eb01fb7a35",
        "tags" : [
        ]
      }
    ],
    "commit" : "1cc622c196e2451bd2272e2af87221fc82da2dec",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +143,147 @@}\n\ntype MapStateToPropsParam<TStateProps, TOwnProps> = MapStateToPropsFactory<TStateProps, TOwnProps> | MapStateToProps<TStateProps, TOwnProps> | null | undefined;\n\ninterface MapDispatchToPropsFunction<TDispatchProps, TOwnProps> {"
  },
  {
    "id" : "bf53c23f-8623-4e17-8f71-0e80e5485639",
    "prId" : 24764,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24764#pullrequestreview-113661637",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae4714e8-ae15-4e36-96ee-07c1f018efa0",
        "parentId" : null,
        "authorId" : "26c05778-4426-489f-a8a1-2a6af08f6974",
        "body" : "So `InferableComponentEnhancerWithProps` is receiving `TOwnProps` twice now. I think it would be better to fix this within that interface? You mention that type inference is failing, but trying this out locally and it seems that inference is working properly. It looks like `InferableComponentEnhancerWithProps` is doing the wrong thing with `TOwnProps`.\r\n\r\nPerhaps changing that interface to:\r\n```typescript\r\nexport interface InferableComponentEnhancerWithProps<TInjectedProps, TNeedsProps> {\r\n    <P extends TInjectedProps>(\r\n        component: Component<P & TNeedsProps> // this is the line that changed\r\n    ): ComponentClass<Omit<P, keyof TInjectedProps> & TNeedsProps> & {WrappedComponent: Component<P>}\r\n}\r\n```",
        "createdAt" : "2018-04-06T14:42:30Z",
        "updatedAt" : "2018-04-06T14:44:05Z",
        "lastEditedBy" : "26c05778-4426-489f-a8a1-2a6af08f6974",
        "tags" : [
        ]
      },
      {
        "id" : "eaab08c0-9698-4304-94ef-0f21deb1a7ac",
        "parentId" : "ae4714e8-ae15-4e36-96ee-07c1f018efa0",
        "authorId" : "699779f4-7dc1-4596-8cd0-10ea0c5d476f",
        "body" : "I was about to do what you propose first but what stopped me is `mergeProps`.\r\n\r\nI don't think I have ever used the `mergeProps` parameter to connect but I was under the impression that it could make it so that you do not receive the outer props. If that is true `InferableComponentEnhancerWithProps` can not assume that you will always receive them, but I can be wrong though.\r\nIf you are guaranteed to receive outer props even with `mergeProps` set then I agree that it would be better to change `InferableComponentEnhancerWithProps` as that would be less code and also solve all overloads at the same time.",
        "createdAt" : "2018-04-06T14:49:43Z",
        "updatedAt" : "2018-04-06T14:49:43Z",
        "lastEditedBy" : "699779f4-7dc1-4596-8cd0-10ea0c5d476f",
        "tags" : [
        ]
      },
      {
        "id" : "ad5e52bc-918e-4cd3-908a-7b50afe64698",
        "parentId" : "ae4714e8-ae15-4e36-96ee-07c1f018efa0",
        "authorId" : "26c05778-4426-489f-a8a1-2a6af08f6974",
        "body" : "Yup, you are right. Good call. Looking into `mergeProps` a bit, and we cannot assume that `OwnProps` will always be there when `mergeProps` is supplied.",
        "createdAt" : "2018-04-06T15:17:14Z",
        "updatedAt" : "2018-04-06T15:17:14Z",
        "lastEditedBy" : "26c05778-4426-489f-a8a1-2a6af08f6974",
        "tags" : [
        ]
      },
      {
        "id" : "c6f92270-12d7-427a-b517-52b68829a4fc",
        "parentId" : "ae4714e8-ae15-4e36-96ee-07c1f018efa0",
        "authorId" : "556fb2b6-7c62-45e5-8851-330ca501f280",
        "body" : "This is breaking our implementation.\r\nWe can no longer decorate component whose props don't extends TOwnProps.\r\n\r\nIt is a problem, because own props can be required by mapStateToProps and / or mapDispatchToProps and not by the decorated component.\r\n\r\nIt is leading to leaking state consumption logic into a component that shouldn't be aware of such implication.\r\nI think we might have a contravariance conflict: it should be possible to decorate a component that ignores some of the props it receives, whether they are injected by mapState, mapDisptach or merge.",
        "createdAt" : "2018-04-19T15:37:08Z",
        "updatedAt" : "2018-04-19T15:37:08Z",
        "lastEditedBy" : "556fb2b6-7c62-45e5-8851-330ca501f280",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8f2d97c8051b54ccbdc6ac78502612867ef2526",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +81,85 @@    <TStateProps = {}, no_dispatch = {}, TOwnProps = {}, State = {}>(\n        mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>\n    ): InferableComponentEnhancerWithProps<TStateProps & DispatchProp<any> & TOwnProps, TOwnProps>;\n\n    <no_state = {}, TDispatchProps = {}, TOwnProps = {}>("
  },
  {
    "id" : "d83baeb8-eada-410e-be5d-1a5d17472e01",
    "prId" : 28189,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/28189#pullrequestreview-154815018",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd96282d-4cf8-4a1a-b128-012f759a70e3",
        "parentId" : null,
        "authorId" : "be8956b7-8d17-45ea-bda1-9deb9d43ccb4",
        "body" : "This code looks like it is effectively doing `Pick<keyof DecorationTargetProps, InjectedProps & DecorationTargetProps>`. Is this right? If so, perhaps it should be simplified to that. If not, I would appreciate a clarification in comments on why the code does this, and how it maps to what `connect` actually does.",
        "createdAt" : "2018-09-11T23:00:37Z",
        "updatedAt" : "2018-09-12T18:32:24Z",
        "lastEditedBy" : "be8956b7-8d17-45ea-bda1-9deb9d43ccb4",
        "tags" : [
        ]
      },
      {
        "id" : "8d63da9d-807d-47d2-9f38-74a5991db2d7",
        "parentId" : "cd96282d-4cf8-4a1a-b128-012f759a70e3",
        "authorId" : "d8c83fe7-d86b-4a29-abe9-8829bf97e6fe",
        "body" : "That's not quite correct. The Pick version would represent something like `InjectedProps[P] & DecorationTargetProps[P]` rather than `InjectedProps[P]`. The latter is important because it's what ensures the types are matching.",
        "createdAt" : "2018-09-11T23:46:22Z",
        "updatedAt" : "2018-09-12T18:32:24Z",
        "lastEditedBy" : "d8c83fe7-d86b-4a29-abe9-8829bf97e6fe",
        "tags" : [
        ]
      },
      {
        "id" : "5e41f796-c1c6-478f-b8b4-ef92d13b22ae",
        "parentId" : "cd96282d-4cf8-4a1a-b128-012f759a70e3",
        "authorId" : "d8c83fe7-d86b-4a29-abe9-8829bf97e6fe",
        "body" : "You can also modify the definition and confirm that the tests will fail with those changes.",
        "createdAt" : "2018-09-11T23:54:30Z",
        "updatedAt" : "2018-09-12T18:32:24Z",
        "lastEditedBy" : "d8c83fe7-d86b-4a29-abe9-8829bf97e6fe",
        "tags" : [
        ]
      },
      {
        "id" : "5072db06-8321-406d-bd64-48e2ace27a0a",
        "parentId" : "cd96282d-4cf8-4a1a-b128-012f759a70e3",
        "authorId" : "be8956b7-8d17-45ea-bda1-9deb9d43ccb4",
        "body" : "Okay, makes sense.",
        "createdAt" : "2018-09-12T19:49:48Z",
        "updatedAt" : "2018-09-12T19:49:48Z",
        "lastEditedBy" : "be8956b7-8d17-45ea-bda1-9deb9d43ccb4",
        "tags" : [
        ]
      }
    ],
    "commit" : "61092a2f2c97e3dd77e6d2222ccb356e72072d2e",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +70,74 @@\t\t\t? DecorationTargetProps[P]\n\t\t\t: InjectedProps[P]\n\t\t: DecorationTargetProps[P];\n};\n"
  },
  {
    "id" : "ecb18d74-be55-42cf-bee6-fac5a622d6e9",
    "prId" : 30760,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30760#pullrequestreview-177792411",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c18becb-cbc6-47a3-a9e1-2dca353db841",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Interesting, I thought argument type tuples were a 3.1 feature.\r\n\r\nLooks like the part that _is_ a 3.1 feature would be mapping on the tuple, but luckily we don't need to map it.",
        "createdAt" : "2018-11-23T01:01:39Z",
        "updatedAt" : "2018-11-27T06:18:51Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "84bc355df06ea07679ab0634483c08f76ac4bb7c",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +115,119 @@export type InferThunkActionCreatorType<TActionCreator extends (...args: any[]) => any> =\n    TActionCreator extends (...args: infer TParams) => (...args: any[]) => infer TReturn\n        ? (...args: TParams) => TReturn\n        : TActionCreator;\n"
  },
  {
    "id" : "5c53c9d0-2300-4004-a8d1-cf8a98eaf561",
    "prId" : 31545,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/31545#pullrequestreview-193482703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "750dc283-16d7-4c19-a53a-edf21baf667e",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Why was this a version bump? There's no react-redux 7.0. These are types for react-redux 6.0.",
        "createdAt" : "2019-01-16T07:21:47Z",
        "updatedAt" : "2019-01-16T07:21:48Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "27ebd677-b40c-421b-a9e4-d61aacf46227",
        "parentId" : "750dc283-16d7-4c19-a53a-edf21baf667e",
        "authorId" : "709f6ef4-f69f-481b-8d6e-5fb96c483694",
        "body" : "Says in the comment further down the file as below:\r\n\r\n```\r\n// NOTE about the wrong react-redux version in the header comment:\r\n// The actual react-redux version is not 6.0.0, but we had to increase the major version\r\n// to update this type definitions for redux@4.x from redux@3.x.\r\n// https://github.com/DefinitelyTyped/DefinitelyTyped/issues/25321\r\n```",
        "createdAt" : "2019-01-16T08:47:29Z",
        "updatedAt" : "2019-01-16T08:47:29Z",
        "lastEditedBy" : "709f6ef4-f69f-481b-8d6e-5fb96c483694",
        "tags" : [
        ]
      },
      {
        "id" : "b8480a5d-f695-4c34-a227-076bf9128307",
        "parentId" : "750dc283-16d7-4c19-a53a-edf21baf667e",
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "DefinitelyTyped doesn't follow semver; even if the new types are \"breaking\" from a TypeScript perspective they're still describing the same major.minor version of the target package.\r\n\r\nThough I'm indeed not sure how this interacts when the types the DT types depend on are not themselves in DT...",
        "createdAt" : "2019-01-16T08:51:22Z",
        "updatedAt" : "2019-01-16T08:51:22Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "2ceb85b8-d119-487e-8afc-405232797a86",
        "parentId" : "750dc283-16d7-4c19-a53a-edf21baf667e",
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "@Kovensky what would you advise is the right course of action? Should we unpublish?",
        "createdAt" : "2019-01-16T20:05:33Z",
        "updatedAt" : "2019-01-16T20:05:34Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "f84b683b-0893-42d4-b99a-fe7793573aba",
        "parentId" : "750dc283-16d7-4c19-a53a-edf21baf667e",
        "authorId" : "709f6ef4-f69f-481b-8d6e-5fb96c483694",
        "body" : "@Kovensky Simply building on the reasoning from the previous version, but if we find a suitable solution I agree that the better approach would be to follow the library targeted.",
        "createdAt" : "2019-01-17T07:08:45Z",
        "updatedAt" : "2019-01-17T07:08:45Z",
        "lastEditedBy" : "709f6ef4-f69f-481b-8d6e-5fb96c483694",
        "tags" : [
        ]
      }
    ],
    "commit" : "a827d39967141a9b4515300f3f7b98a4db7f151c",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +-1,3 @@// Type definitions for react-redux 7.0\n// Project: https://github.com/reduxjs/react-redux\n// Definitions by: Qubo <https://github.com/tkqubo>,"
  }
]