[
  {
    "id" : "d02c5392-0156-4d88-9c93-ed774ecb19eb",
    "prId" : 16969,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/16969#pullrequestreview-44187500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12ce9411-f35c-4bf1-a8b0-d051ded59547",
        "parentId" : null,
        "authorId" : "24253a71-b2ae-410a-8c5b-4101ecaa21ca",
        "body" : "Hey @blakeembrey - I'm trying to understand some type issues we're having (related to https://github.com/DefinitelyTyped/DefinitelyTyped/issues/16990#issuecomment-308256211). We don't fully understand why the `<T extends TOwnProps>` is needed. It seems like below should be correct in terms of what react-redux connect returns:\r\n```\r\ninterface ComponentDecorator<TMergedProps, TOwnProps> {\r\n  (component: Component<TOwnProps & TMergedProps>): ComponentClass<TOwnProps>;\r\n}\r\n```\r\nWhen we change it to that the problem in that linked comment seems to go away, because it can correctly infer that the connected component only accepts ownProps, not all the props of the dumb / presentation component.\r\nI've added a test in my fork which passes if I change to that:\r\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/compare/master...ritwik:react-redux/fix-ownprop-inference\r\nHowever, the problem is that now the tests for untyped connect calls don't work: \r\n```\r\nreact-redux-tests.tsx(286,1): error TS2322: Type 'ComponentClass<{}>' is not assignable to type 'ComponentClass<TestProp>'.\r\n  Type '{}' is not assignable to type 'TestProp'.\r\n    Property 'property1' is missing in type '{}'.\r\nreact-redux-tests.tsx(289,23): error TS2339: Property 'property1' does not exist on type 'IntrinsicAttributes & IntrinsicClassAttributes<Component<{}, ComponentState>> & Readonly<{ childr...'.\r\nreact-redux-tests.tsx(301,39): error TS2345: Argument of type '(props: HelloMessageProps) => Element' is not assignable to parameter of type 'Component<DispatchProp<any>>'.\r\n  Type '(props: HelloMessageProps) => Element' is not assignable to type 'StatelessComponent<DispatchProp<any>>'.\r\n    Types of parameters 'props' and 'props' are incompatible.\r\n      Type 'DispatchProp<any> & { children?: ReactNode; }' is not assignable to type 'HelloMessageProps'.\r\n        Property 'name' is missing in type 'DispatchProp<any> & { children?: ReactNode; }'.\r\nreact-redux-tests.tsx(303,40): error TS2339: Property 'name' does not exist on type 'IntrinsicAttributes & IntrinsicClassAttributes<Component<{}, ComponentState>> & Readonly<{ childr...'.\r\n```\r\nSo my assumption is that it's needed for the cases where you're less explicit about the ownprop types? ",
        "createdAt" : "2017-06-14T21:59:32Z",
        "updatedAt" : "2017-06-14T21:59:32Z",
        "lastEditedBy" : "24253a71-b2ae-410a-8c5b-4101ecaa21ca",
        "tags" : [
        ]
      },
      {
        "id" : "71a0e66a-3a7b-43a1-af10-bafa031c7b74",
        "parentId" : "12ce9411-f35c-4bf1-a8b0-d051ded59547",
        "authorId" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "body" : "Yes. If you aren't explicit in the definition at `connect` it's used to capture the additional properties for the component. It might be possible to do `<T>(component: Component<T & TOwnProps & TMergedProps>): ComponentClass<T & TOwnProps>` instead - does that solve both problems?",
        "createdAt" : "2017-06-14T22:21:25Z",
        "updatedAt" : "2017-06-14T22:21:25Z",
        "lastEditedBy" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "tags" : [
        ]
      },
      {
        "id" : "0e067bd6-1b51-42d5-9481-8fb64182440d",
        "parentId" : "12ce9411-f35c-4bf1-a8b0-d051ded59547",
        "authorId" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "body" : "Maybe we can provide two versions of the generic overloads? One where you define \"own props\" and another where it's inferred?",
        "createdAt" : "2017-06-14T22:38:05Z",
        "updatedAt" : "2017-06-14T22:38:05Z",
        "lastEditedBy" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "tags" : [
        ]
      },
      {
        "id" : "9ca615db-0782-497c-b8f5-c80f7b33be9d",
        "parentId" : "12ce9411-f35c-4bf1-a8b0-d051ded59547",
        "authorId" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "body" : "Also, FWIW, it is possible to make your code work today with `connect()<OwnProps>(Component)`, but I would like to improve the default behaviour for everyone involved.",
        "createdAt" : "2017-06-14T22:42:03Z",
        "updatedAt" : "2017-06-14T22:42:03Z",
        "lastEditedBy" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "tags" : [
        ]
      },
      {
        "id" : "d2ae5b7c-aa33-4777-b80b-fedd316c33cd",
        "parentId" : "12ce9411-f35c-4bf1-a8b0-d051ded59547",
        "authorId" : "24253a71-b2ae-410a-8c5b-4101ecaa21ca",
        "body" : "ah interesting - I'll try that out tomorrow and see if both tests pass. Agree that it would be good to support both options. In the mean time, I'll also try the `connect()<OwnProps>(Component)`, happy for that to be the interim solution for my codebase while we try the other ideas. Appreciate the help! :)",
        "createdAt" : "2017-06-15T01:25:18Z",
        "updatedAt" : "2017-06-15T01:25:18Z",
        "lastEditedBy" : "24253a71-b2ae-410a-8c5b-4101ecaa21ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "f527af6ed365e87058480e22577e3e191a13fb42",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +21,25 @@\ninterface ComponentDecorator<TMergedProps, TOwnProps> {\n    <T extends TOwnProps>(component: Component<T & TMergedProps>): ComponentClass<T>;\n}\n"
  },
  {
    "id" : "8658eb78-71d9-48f0-873c-cd5cdeb5a711",
    "prId" : 17196,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17196#pullrequestreview-44705412",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4694ce12-314a-4ffe-afed-a6a3546a9000",
        "parentId" : null,
        "authorId" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "body" : "I see that only the zero argument overload for ```connect()``` uses ```ComponentDecoratorInfer``` now. Could you add a test that exercises it?",
        "createdAt" : "2017-06-16T22:56:38Z",
        "updatedAt" : "2017-06-16T22:56:47Z",
        "lastEditedBy" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "tags" : [
        ]
      },
      {
        "id" : "19516a96-1383-4b86-b85f-a65a515a0fc4",
        "parentId" : "4694ce12-314a-4ffe-afed-a6a3546a9000",
        "authorId" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "body" : "There already are.",
        "createdAt" : "2017-06-17T01:37:14Z",
        "updatedAt" : "2017-06-17T01:37:14Z",
        "lastEditedBy" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "tags" : [
        ]
      },
      {
        "id" : "2a4dd260-44f4-4e69-bffb-80a8f126bccc",
        "parentId" : "4694ce12-314a-4ffe-afed-a6a3546a9000",
        "authorId" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "body" : "So there are. My mistake.",
        "createdAt" : "2017-06-17T01:39:40Z",
        "updatedAt" : "2017-06-17T01:39:40Z",
        "lastEditedBy" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "tags" : [
        ]
      },
      {
        "id" : "4f321ef9-25f0-4a28-a79c-6700d48a2d15",
        "parentId" : "4694ce12-314a-4ffe-afed-a6a3546a9000",
        "authorId" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "body" : "No problem. Hopefully all bases are covered now - this change was mostly in the opposite direction making only the single endpoint inferred rather than introducing something new.",
        "createdAt" : "2017-06-17T18:21:47Z",
        "updatedAt" : "2017-06-17T18:21:47Z",
        "lastEditedBy" : "0eef38e8-106d-4148-aa07-d41eea243797",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6087cff80d8e05e7523e12f3829b413eea4ef22",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +51,55 @@ * @param options\n */\nexport declare function connect(): ComponentDecoratorInfer<DispatchProp<any>>;\n\nexport declare function connect<TStateProps, no_dispatch, TOwnProps>("
  },
  {
    "id" : "43921213-5f8e-4ef9-a7b4-1707b85a9067",
    "prId" : 18510,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18510#pullrequestreview-55028340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07e19fa0-5e1f-478b-aa78-26d176e1a23f",
        "parentId" : null,
        "authorId" : "e709fc94-0374-43ab-8ace-fe56abc9729b",
        "body" : "why are `DispatchProp<any>` added when `mapDispatchToProps` is undefined?",
        "createdAt" : "2017-08-08T16:11:23Z",
        "updatedAt" : "2017-08-14T19:04:11Z",
        "lastEditedBy" : "e709fc94-0374-43ab-8ace-fe56abc9729b",
        "tags" : [
        ]
      },
      {
        "id" : "4b25c187-1063-405a-aaae-c190722dc61f",
        "parentId" : "07e19fa0-5e1f-478b-aa78-26d176e1a23f",
        "authorId" : "2de8fc81-fd63-4667-943c-0ec4022dd342",
        "body" : "That's how `react-redux` works:\r\n\r\n> If you do not supply your own `mapDispatchToProps` function or object full of action creators, the default `mapDispatchToProps` implementation just injects `dispatch` into your component‚Äôs props.\r\n\r\nhttps://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options",
        "createdAt" : "2017-08-08T18:22:22Z",
        "updatedAt" : "2017-08-14T19:04:11Z",
        "lastEditedBy" : "2de8fc81-fd63-4667-943c-0ec4022dd342",
        "tags" : [
        ]
      },
      {
        "id" : "0d169e2c-373a-41ba-810c-bc8c00d97e10",
        "parentId" : "07e19fa0-5e1f-478b-aa78-26d176e1a23f",
        "authorId" : "e709fc94-0374-43ab-8ace-fe56abc9729b",
        "body" : "üëç ",
        "createdAt" : "2017-08-08T18:27:09Z",
        "updatedAt" : "2017-08-14T19:04:11Z",
        "lastEditedBy" : "e709fc94-0374-43ab-8ace-fe56abc9729b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1dea144e504df95c13a01ca65d03224169dc1623",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +70,74 @@export declare function connect<TStateProps, no_dispatch, TOwnProps>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps>\n): InferableComponentEnhancerWithProps<TStateProps & DispatchProp<any>, TOwnProps>;\n\nexport declare function connect<no_state, TDispatchProps, TOwnProps>("
  },
  {
    "id" : "a5512a12-d652-4948-b2ea-b93b5442baaf",
    "prId" : 18510,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18510#pullrequestreview-55332948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "575377e0-2995-4b87-82c4-e987bda0fbf8",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "These types seem rather complicated.  Would it make sense to add some sample uses to the test case below?",
        "createdAt" : "2017-08-09T17:33:38Z",
        "updatedAt" : "2017-08-14T19:04:11Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "4ae2bc11-a6e0-4ae2-863b-4d04dcacf926",
        "parentId" : "575377e0-2995-4b87-82c4-e987bda0fbf8",
        "authorId" : "2de8fc81-fd63-4667-943c-0ec4022dd342",
        "body" : "I'm not opposed to doing that. It's definitely not trivial.",
        "createdAt" : "2017-08-09T18:36:41Z",
        "updatedAt" : "2017-08-14T19:04:11Z",
        "lastEditedBy" : "2de8fc81-fd63-4667-943c-0ec4022dd342",
        "tags" : [
        ]
      }
    ],
    "commit" : "1dea144e504df95c13a01ca65d03224169dc1623",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +21,25 @@\n// Diff / Omit taken from https://github.com/Microsoft/TypeScript/issues/12215#issuecomment-311923766\ntype Diff<T extends string, U extends string> = ({ [P in T]: P } & { [P in U]: never } & { [x: string]: never })[T];\ntype Omit<T, K extends keyof T> = Pick<T, Diff<keyof T, K>>;\n"
  }
]