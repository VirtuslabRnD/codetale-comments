[
  {
    "id" : "7e5e5ffe-2cc9-41ce-8360-fc15af6bf0b9",
    "prId" : 23237,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23237#pullrequestreview-95626353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b46ab278-3e1d-46c1-bd93-b4afaa11224b",
        "parentId" : null,
        "authorId" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "body" : "`ast.d.ts`",
        "createdAt" : "2018-02-10T16:24:28Z",
        "updatedAt" : "2018-02-10T18:11:00Z",
        "lastEditedBy" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ed9c988abf562c033e62a29dc8cbce84da4132f",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +9,13 @@import * as ESTree from 'estree';\n\nexport namespace AST {\n    type TokenType =\n        | 'Boolean'"
  },
  {
    "id" : "0c2c9657-7e48-436e-ab6c-6f85194506d8",
    "prId" : 23237,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23237#pullrequestreview-95626353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebf0e09b-2601-4bcd-8487-1020a395d1ab",
        "parentId" : null,
        "authorId" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "body" : "`scope.d.ts`",
        "createdAt" : "2018-02-10T16:24:44Z",
        "updatedAt" : "2018-02-10T18:11:00Z",
        "lastEditedBy" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ed9c988abf562c033e62a29dc8cbce84da4132f",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +44,48 @@}\n\nexport namespace Scope {\n    interface ScopeManager {\n        scopes: Scope[];"
  },
  {
    "id" : "0a4a0612-ab46-41f0-81a4-c3918c3944a4",
    "prId" : 23237,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23237#pullrequestreview-95626353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a24c00b-f52d-4bd2-b00c-94a36b8d04bc",
        "parentId" : null,
        "authorId" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "body" : "`source-code.d.ts`",
        "createdAt" : "2018-02-10T16:25:40Z",
        "updatedAt" : "2018-02-10T18:11:00Z",
        "lastEditedBy" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ed9c988abf562c033e62a29dc8cbce84da4132f",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +108,112 @@//#region SourceCode\n\nexport class SourceCode {\n    text: string;\n    ast: AST.Program;"
  },
  {
    "id" : "52e4c0df-ce62-4aea-9020-25293bde0e7a",
    "prId" : 23237,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23237#pullrequestreview-95626353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5565349e-0b60-468f-b7fc-527c670bd528",
        "parentId" : null,
        "authorId" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "body" : "`rule.d.ts`",
        "createdAt" : "2018-02-10T16:25:51Z",
        "updatedAt" : "2018-02-10T18:11:00Z",
        "lastEditedBy" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ed9c988abf562c033e62a29dc8cbce84da4132f",
    "line" : 237,
    "diffHunk" : "@@ -1,1 +235,239 @@//#endregion\n\nexport namespace Rule {\n    interface RuleModule {\n        create(context: RuleContext): RuleListener;"
  },
  {
    "id" : "2fde46a9-ff04-4113-8d23-4a547eec573f",
    "prId" : 23237,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23237#pullrequestreview-95626353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ecca5ea4-347e-4ade-9093-5c2fb13f84cb",
        "parentId" : null,
        "authorId" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "body" : "`linter.d.ts`",
        "createdAt" : "2018-02-10T16:26:05Z",
        "updatedAt" : "2018-02-10T18:11:00Z",
        "lastEditedBy" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ed9c988abf562c033e62a29dc8cbce84da4132f",
    "line" : 351,
    "diffHunk" : "@@ -1,1 +349,353 @@//#region Linter\n\nexport class Linter {\n    version: string;\n"
  },
  {
    "id" : "d72e0320-f73e-4b3c-b2a0-5a92128f423a",
    "prId" : 23237,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23237#pullrequestreview-95626353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79e633e9-0d8a-4564-a682-d96198a41ae5",
        "parentId" : null,
        "authorId" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "body" : "`cli.d.ts`",
        "createdAt" : "2018-02-10T16:26:17Z",
        "updatedAt" : "2018-02-10T18:11:00Z",
        "lastEditedBy" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ed9c988abf562c033e62a29dc8cbce84da4132f",
    "line" : 453,
    "diffHunk" : "@@ -1,1 +451,455 @@//#region CLIEngine\n\nexport class CLIEngine {\n    version: string;\n"
  },
  {
    "id" : "d5f172a5-fb6f-4966-92f5-8f5c2e1b8fd6",
    "prId" : 23237,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23237#pullrequestreview-95626353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7a1dfa1-87dd-4daa-a6bc-24abb5a9506a",
        "parentId" : null,
        "authorId" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "body" : "`rule-tester.d.ts`",
        "createdAt" : "2018-02-10T16:26:32Z",
        "updatedAt" : "2018-02-10T18:11:00Z",
        "lastEditedBy" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ed9c988abf562c033e62a29dc8cbce84da4132f",
    "line" : 532,
    "diffHunk" : "@@ -1,1 +530,534 @@//#region RuleTester\n\nexport class RuleTester {\n    constructor(config?: any);\n"
  },
  {
    "id" : "c99200ac-780f-436a-aa13-6fd2fac7f7eb",
    "prId" : 25399,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/25399#pullrequestreview-182942879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5ed08de-1ef2-441c-93ad-c04f6ff5ab8f",
        "parentId" : null,
        "authorId" : "0d642cc1-bb17-4384-9722-f50bdcc63761",
        "body" : "Would it be possible to type `node` to be `T`?\r\n\r\n(I'm a TS newbie, so might not be needed).\r\n\r\n```ts\r\nconst rule: Rule.RuleModule = {\r\n  create() {\r\n    return {\r\n      CallExpression(node: CallExpression) {\r\n        console.log(node.callee);\r\n      },\r\n    };\r\n  },\r\n};\r\n```\r\nGives me `Type 'Node' is not assignable to type 'CallExpression'`",
        "createdAt" : "2018-11-27T14:21:58Z",
        "updatedAt" : "2018-11-27T14:21:59Z",
        "lastEditedBy" : "0d642cc1-bb17-4384-9722-f50bdcc63761",
        "tags" : [
        ]
      },
      {
        "id" : "20a03813-d70c-4df5-8907-82cfaa9cc9d3",
        "parentId" : "e5ed08de-1ef2-441c-93ad-c04f6ff5ab8f",
        "authorId" : "0d642cc1-bb17-4384-9722-f50bdcc63761",
        "body" : "```ts\r\nconst rule: Rule.RuleModule = {\r\n  create() {\r\n    return {\r\n      CallExpression(node: CallExpression) {\r\n        if (node.type !== 'CallExpression') {\r\n          return;\r\n        }\r\n        console.log(node.callee);\r\n      },\r\n    };\r\n  },\r\n};\r\n```\r\n\r\nSeems to fix it, but that's dead code...",
        "createdAt" : "2018-11-27T14:24:44Z",
        "updatedAt" : "2018-11-27T14:24:44Z",
        "lastEditedBy" : "0d642cc1-bb17-4384-9722-f50bdcc63761",
        "tags" : [
        ]
      },
      {
        "id" : "83e441c3-d071-4a1a-83d8-5b04d035f53e",
        "parentId" : "e5ed08de-1ef2-441c-93ad-c04f6ff5ab8f",
        "authorId" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "body" : "The solution to this is a two-parter:\r\n\r\n1. <details><summary>Add a new mapping to <code>@types/estree</code>. This maps from the name of the node to its type.</summary>\r\n\r\n   ```ts\r\n   // yes, this is necessary :(\r\n   type _NodeMap = { [K in Node['type']]: Node }\r\n\r\n   export interface NodeByType extends _NodeMap {\r\n     Identifier: Identifier\r\n\r\n     SimpleLiteral: SimpleLiteral\r\n     RegExpLiteral: RegExpLiteral\r\n\r\n     Program: Program\r\n\r\n     FunctionDeclaration: FunctionDeclaration\r\n     FunctionExpression: FunctionExpression\r\n     ArrowFunctionExpression: ArrowFunctionExpression\r\n\r\n     SwitchCase: SwitchCase\r\n     CatchClause: CatchClause\r\n     VariableDeclarator: VariableDeclarator\r\n\r\n     ExpressionStatement: ExpressionStatement\r\n     BlockStatement: BlockStatement\r\n     EmptyStatement: EmptyStatement\r\n     DebuggerStatement: DebuggerStatement\r\n     WithStatement: WithStatement\r\n     ReturnStatement: ReturnStatement\r\n     LabeledStatement: LabeledStatement\r\n     BreakStatement: BreakStatement\r\n     ContinueStatement: ContinueStatement\r\n     IfStatement: IfStatement\r\n     SwitchStatement: SwitchStatement\r\n     ThrowStatement: ThrowStatement\r\n     TryStatement: TryStatement\r\n     WhileStatement: WhileStatement\r\n     DoWhileStatement: DoWhileStatement\r\n     ForStatement: ForStatement\r\n     ForInStatement: ForInStatement\r\n     ForOfStatement: ForOfStatement\r\n\r\n     // FunctionDeclaration: FunctionDeclaration\r\n     VariableDeclaration: VariableDeclaration\r\n     ClassDeclaration: ClassDeclaration\r\n\r\n     ThisExpression: ThisExpression\r\n     ArrayExpression: ArrayExpression\r\n     ObjectExpression: ObjectExpression\r\n     // FunctionExpression: FunctionExpression\r\n     // ArrowFunctionExpression: ArrowFunctionExpression\r\n     YieldExpression: YieldExpression\r\n     // Literal: Literal\r\n     UnaryExpression: UnaryExpression\r\n     UpdateExpression: UpdateExpression\r\n     BinaryExpression: BinaryExpression\r\n     AssignmentExpression: AssignmentExpression\r\n     LogicalExpression: LogicalExpression\r\n     MemberExpression: MemberExpression\r\n     ConditionalExpression: ConditionalExpression\r\n     CallExpression: SimpleCallExpression // <-- Important!\r\n     NewExpression: NewExpression\r\n     SequenceExpression: SequenceExpression\r\n     TemplateLiteral: TemplateLiteral\r\n     TaggedTemplateExpression: TaggedTemplateExpression\r\n     ClassExpression: ClassExpression\r\n     MetaProperty: MetaProperty\r\n     // Identifier: Identifier\r\n     AwaitExpression: AwaitExpression\r\n\r\n     Property: Property\r\n     AssignmentProperty: AssignmentProperty\r\n     Super: Super\r\n     TemplateElement: TemplateElement\r\n     SpreadElement: SpreadElement\r\n\r\n     // Identifier: Identifier\r\n     ObjectPattern: ObjectPattern\r\n     ArrayPattern: ArrayPattern\r\n     RestElement: RestElement\r\n     AssignmentPattern: AssignmentPattern\r\n     // MemberExpression: MemberExpression\r\n\r\n     ClassBody: ClassBody\r\n     // ClassDeclaration: ClassDeclaration\r\n     // ClassExpression: ClassExpression\r\n     MethodDefinition: MethodDefinition\r\n\r\n     ImportDeclaration: ImportDeclaration\r\n     ExportNamedDeclaration: ExportNamedDeclaration\r\n     ExportDefaultDeclaration: ExportDefaultDeclaration\r\n     ExportAllDeclaration: ExportAllDeclaration\r\n\r\n     ImportSpecifier: ImportSpecifier\r\n     ImportDefaultSpecifier: ImportDefaultSpecifier\r\n     ImportNamespaceSpecifier: ImportNamespaceSpecifier\r\n     ExportSpecifier: ExportSpecifier\r\n   }\r\n   ```\r\n\r\n   </details>\r\n\r\n1. Redefine the listener:\r\n\r\n   ```ts\r\n   type NodeListener = {\r\n     [T in ESTree.Node['type']]?: (node: ESTree.NodeByType[T]) => void\r\n   }\r\n   ```\r\n\r\n\r\nI defined the mapping in `@types/estree` so it gets updated as new nodes are added.",
        "createdAt" : "2018-11-27T16:18:54Z",
        "updatedAt" : "2018-11-27T17:59:17Z",
        "lastEditedBy" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "tags" : [
        ]
      },
      {
        "id" : "016ef575-5feb-431d-99bc-fa7f881e90bd",
        "parentId" : "e5ed08de-1ef2-441c-93ad-c04f6ff5ab8f",
        "authorId" : "0d642cc1-bb17-4384-9722-f50bdcc63761",
        "body" : "@j-f1 could you send a PR for that? 👼",
        "createdAt" : "2018-11-29T09:57:36Z",
        "updatedAt" : "2018-11-29T09:57:36Z",
        "lastEditedBy" : "0d642cc1-bb17-4384-9722-f50bdcc63761",
        "tags" : [
        ]
      },
      {
        "id" : "5c81bd75-bd0c-4e3d-b346-c4f0b9212eef",
        "parentId" : "e5ed08de-1ef2-441c-93ad-c04f6ff5ab8f",
        "authorId" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "body" : "@SimenB I got started [here](https://github.com/DefinitelyTyped/DefinitelyTyped/commit/a9ac72f3ebfe6adbcfffd728a092972b8bb3a7d2), but I couldn’t get the tests to pass :(",
        "createdAt" : "2018-12-08T12:30:05Z",
        "updatedAt" : "2018-12-08T12:30:05Z",
        "lastEditedBy" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a4fe4cc23344bc61891f0f0e331de430953ce4b",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +243,247 @@\n    type NodeTypes = ESTree.Node['type'];\n    type NodeListener = { [T in NodeTypes]?: (node: ESTree.Node) => void };\n\n    interface RuleListener extends NodeListener {"
  },
  {
    "id" : "ba9fb1ab-b8ee-49b4-b41d-48a63e1296ae",
    "prId" : 43345,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43345#pullrequestreview-381765420",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39235be7-42f7-4f27-a853-b9c7584981c5",
        "parentId" : null,
        "authorId" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "body" : "I see the docs for `version` being static, but where is this documented as static? It looks to be an instance method [here](https://eslint.org/docs/developer-guide/nodejs-api#cliengine-getformatter).",
        "createdAt" : "2020-03-25T20:48:10Z",
        "updatedAt" : "2020-03-25T20:48:13Z",
        "lastEditedBy" : "85c656ed-a963-4bdf-b5ad-b52a517f05cb",
        "tags" : [
        ]
      },
      {
        "id" : "1d6a713e-02b5-4063-afa7-e03b8ae6d33d",
        "parentId" : "39235be7-42f7-4f27-a853-b9c7584981c5",
        "authorId" : "1ec56a8b-c2ea-4fba-933a-5f0947417129",
        "body" : "Seems like it is both an instance method and a `static` method. From that link:\r\n\r\n> Note: Also available as a static function on CLIEngine",
        "createdAt" : "2020-03-26T01:42:20Z",
        "updatedAt" : "2020-03-26T01:42:20Z",
        "lastEditedBy" : "1ec56a8b-c2ea-4fba-933a-5f0947417129",
        "tags" : [
        ]
      },
      {
        "id" : "7a673686-d219-4be2-8cdd-815ac2e90b55",
        "parentId" : "39235be7-42f7-4f27-a853-b9c7584981c5",
        "authorId" : "8e07db17-97b9-4d1c-ada6-211e06f5b7e4",
        "body" : "Yes, information about static `getFormatter` can easily be overlooked.",
        "createdAt" : "2020-03-26T07:51:16Z",
        "updatedAt" : "2020-03-26T07:51:16Z",
        "lastEditedBy" : "8e07db17-97b9-4d1c-ada6-211e06f5b7e4",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5d8568d7088f8ad68eab352226aec6d6f574b66",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +497,501 @@    static getErrorResults(results: CLIEngine.LintResult[]): CLIEngine.LintResult[];\n\n    static getFormatter(format?: string): CLIEngine.Formatter;\n\n    static outputFixes(report: CLIEngine.LintReport): void;"
  }
]