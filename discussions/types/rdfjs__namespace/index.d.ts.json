[
  {
    "id" : "c222e0aa-920f-4c29-9f2c-daca02d2729b",
    "prId" : 41082,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/41082#pullrequestreview-337580302",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1276a3ee-a86e-4260-8636-60e4187474a3",
        "parentId" : null,
        "authorId" : "a4bdefc4-8872-47e7-99fd-c570356f274c",
        "body" : "My IDE (PhpStorm) complains if using the property `name` (confuses it with `Function.name`, so thinks it's a `string` instead).\r\n\r\nTypeScript and eslint don't have the problem though; not sure if there's a way to keep both happy.\r\n\r\nEdit: forgot this file wasnâ€™t in the container I was running them through.",
        "createdAt" : "2019-12-20T14:20:25Z",
        "updatedAt" : "2019-12-21T08:02:24Z",
        "lastEditedBy" : "a4bdefc4-8872-47e7-99fd-c570356f274c",
        "tags" : [
        ]
      },
      {
        "id" : "6c8c79f0-288a-4ca1-88e9-5742e863fe9a",
        "parentId" : "1276a3ee-a86e-4260-8636-60e4187474a3",
        "authorId" : "a4bdefc4-8872-47e7-99fd-c570356f274c",
        "body" : "Adding an explicit `name` property gets round it, but  should be unnecessary.",
        "createdAt" : "2019-12-20T15:47:15Z",
        "updatedAt" : "2019-12-20T15:47:15Z",
        "lastEditedBy" : "a4bdefc4-8872-47e7-99fd-c570356f274c",
        "tags" : [
        ]
      },
      {
        "id" : "a1653ad9-857b-45c0-b98b-8b3d6d7637aa",
        "parentId" : "1276a3ee-a86e-4260-8636-60e4187474a3",
        "authorId" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "body" : "My eslint setup complains about that `name` property. Here's another solution\r\n\r\n```\r\ntype NamespaceBuilder = Record<string, NamedNode> & Omit<{\r\n  (property: TemplateStringsArray | string): NamedNode;\r\n}, 'name'>\r\n```\r\n\r\nEDIT: I inlined the interface to hide it from the implicit export",
        "createdAt" : "2019-12-20T15:57:34Z",
        "updatedAt" : "2019-12-20T15:58:39Z",
        "lastEditedBy" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "tags" : [
        ]
      },
      {
        "id" : "988ff223-7976-4bd5-9ccf-f196767822e4",
        "parentId" : "1276a3ee-a86e-4260-8636-60e4187474a3",
        "authorId" : "a4bdefc4-8872-47e7-99fd-c570356f274c",
        "body" : "Hmm, doesn't seem to work, no longer recognised as callable...",
        "createdAt" : "2019-12-20T16:06:07Z",
        "updatedAt" : "2019-12-20T16:06:07Z",
        "lastEditedBy" : "a4bdefc4-8872-47e7-99fd-c570356f274c",
        "tags" : [
        ]
      },
      {
        "id" : "e6ba37c1-c478-4244-8cc8-ceaaad40d165",
        "parentId" : "1276a3ee-a86e-4260-8636-60e4187474a3",
        "authorId" : "3f0500b1-ac3e-4a17-b763-f04d40814050",
        "body" : "@thewilkybarkid I think it's unavoidable to redeclare the properties from the `Function.prototype` (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype)\r\n\r\nIf Typescript did override, then it would have a knock on effect on things like objects:\r\n```typescript\r\ntype A = {\r\n [property: string]: SomeType;\r\n};\r\n\r\nconst t: A = { };\r\n\r\nt.toString(); // is this a function or `SomeType`\r\n```",
        "createdAt" : "2019-12-29T20:53:21Z",
        "updatedAt" : "2019-12-29T20:53:21Z",
        "lastEditedBy" : "3f0500b1-ac3e-4a17-b763-f04d40814050",
        "tags" : [
        ]
      },
      {
        "id" : "af948390-d7de-45ca-a04a-31114cc91589",
        "parentId" : "1276a3ee-a86e-4260-8636-60e4187474a3",
        "authorId" : "a4bdefc4-8872-47e7-99fd-c570356f274c",
        "body" : "Opened https://stackoverflow.com/questions/59560965/name-property-when-a-type-is-both-indexable-and-callable",
        "createdAt" : "2020-01-02T09:27:43Z",
        "updatedAt" : "2020-01-02T09:27:43Z",
        "lastEditedBy" : "a4bdefc4-8872-47e7-99fd-c570356f274c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd476b45af1a61e3f7e195986a0811dae90f2cf7",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@        (property: TemplateStringsArray | string): NamedNode;\n\n        readonly [property: string]: NamedNode;\n    }\n"
  }
]