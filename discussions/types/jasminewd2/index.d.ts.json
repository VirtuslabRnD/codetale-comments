[
  {
    "id" : "509101fd-117a-4693-807e-fdf66fc55558",
    "prId" : 38412,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/38412#pullrequestreview-297568116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cfbf00d4-a52f-48b7-bb61-675651acb8c9",
        "parentId" : null,
        "authorId" : "03a704a7-a2ca-44c6-877b-b216b4b4b50f",
        "body" : "Joining the party late, but I don't think this change is correct. According to [the docs][1], `jasminewd2/tsconfig.json` should have been updated instead, mapping `jasmine` to `jasmine/v2`. \r\n\r\n[1]: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/a4a55f6c8/README.md#if-a-library-is-updated-to-a-new-major-version-with-breaking-changes-how-should-i-update-its-type-declaration-package",
        "createdAt" : "2019-09-30T06:56:20Z",
        "updatedAt" : "2019-09-30T07:13:39Z",
        "lastEditedBy" : "03a704a7-a2ca-44c6-877b-b216b4b4b50f",
        "tags" : [
        ]
      },
      {
        "id" : "bac2f1ee-c0cd-4e3a-ae0f-e7cd33c933a1",
        "parentId" : "cfbf00d4-a52f-48b7-bb61-675651acb8c9",
        "authorId" : "979c8287-290f-46d4-b487-2087354abb82",
        "body" : "With this change published, I have errors similar to `Argument of type 'Whatever' is not assignable to parameter of type 'string'.` in the parameter of `withArgs()`. \r\n\r\nAlso i'm no longer able to use `jasmine.ObjectContaining()` to match a partial representation of a type in `withArgs()`.\r\n```\r\nArgument of type 'ObjectContaining<{ property: string; }>' is not assignable to parameter of type 'SomeObject'.\r\nType 'ObjectContaining<{ property: string; }>' is missing the following properties from type 'SomeObject': otherProperty, blah-blah, and 10 more.\r\n```\r\n\r\nI have yet to come up with a bare reproduction, however any tips are welcome in the meantime.",
        "createdAt" : "2019-09-30T12:59:16Z",
        "updatedAt" : "2019-09-30T13:09:17Z",
        "lastEditedBy" : "979c8287-290f-46d4-b487-2087354abb82",
        "tags" : [
        ]
      },
      {
        "id" : "d5614757-0f62-4d34-af3b-d70a5ecfba2f",
        "parentId" : "cfbf00d4-a52f-48b7-bb61-675651acb8c9",
        "authorId" : "1eeff2c0-3979-4336-9501-eb5cdd6ddbb3",
        "body" : "I'm very sorry for the mess created around - it's always annoying ðŸ˜– I had only good intentions to make jasmine usage better.\r\n\r\n@gkalpak\r\n\r\n> Wouldn't a major (or at least minor) version bumb be appropriate (based on this doc)?\r\n\r\nIf you are speaking about `jasmine` library, then no. There are no breaking changes in the types itself and the previously compatible code is still compatible. Of course, new types are more stricter, but that's always the case when you improve type coverage.\r\n\r\nThe reason `jasminewd2` got affected is because that project was not configured correctly. They must have depended on `jasmine v2` instead of pretending being compatible with v3. See more detail [here](https://github.com/DefinitelyTyped/DefinitelyTyped/issues/38656#issuecomment-535936695).\r\n\r\n> According to the docs, jasminewd2/tsconfig.json should have been updated instead, mapping jasmine to jasmine/v2.\r\n\r\nThat's for spotting it - I read that article, but missed the part about dependent packages. I'll try to give it a go. Anyway, I think it still could have limitations according to [this answer](https://github.com/DefinitelyTyped/DefinitelyTyped/issues/38656#issuecomment-536116451).\r\n\r\n@AndrejEPAM\r\n\r\n> With this change published, I have errors similar to Argument of type 'Whatever' is not assignable to parameter of type 'string'. in the parameter of withArgs().\r\n\r\nIndeed now we check types for the parameters. You should pass only compatible types. In your case typescript is not making widening, which has been fixed in later versions of TS. Notice, if you don't care about value, just use `jasmine.anything()` matcher.\r\n\r\n> Also i'm no longer able to use jasmine.ObjectContaining() to match a partial representation of a type in withArgs().\r\n\r\nStrange, as we have test case for that. I've just tried again and the code below worked as a charm:\r\n\r\n```ts\r\nconst spy = jasmine.createSpyObj<{\r\n    method: (arg: { prop1: string, prop2: number }) => void }\r\n    >(['method']);\r\n\r\nexpect(spy.method)\r\n    .toHaveBeenCalledWith(jasmine.objectContaining({ prop1: \"forty-two\" }));\r\n```\r\n\r\nIf everything is fine with code and it fails, please create a standalone GitHub issue and share scenarios, so they could be investigated in more detail.\r\n\r\nNotice, you could also use `NonTypedSpyObj<T>` instead of `SpyObj<T>` if you would like to opt-out from type checking. Sometimes it's required if method signature is tricky and typescript cannot deduce type correctly (e.g. you have multiple overloads).",
        "createdAt" : "2019-09-30T14:34:02Z",
        "updatedAt" : "2019-09-30T14:34:03Z",
        "lastEditedBy" : "1eeff2c0-3979-4336-9501-eb5cdd6ddbb3",
        "tags" : [
        ]
      },
      {
        "id" : "a0407803-c20c-4c64-8811-ac908124249c",
        "parentId" : "cfbf00d4-a52f-48b7-bb61-675651acb8c9",
        "authorId" : "979c8287-290f-46d4-b487-2087354abb82",
        "body" : "@zvirja thanks for the valuable tips, will try them and create reproduction, if still applicable. I was using `jasmine.objectContaining` within `withArgs`, specifically, it worked like a charm, but it may be unintended/unsupported use of `objectContaining`.",
        "createdAt" : "2019-09-30T15:32:29Z",
        "updatedAt" : "2019-09-30T15:32:29Z",
        "lastEditedBy" : "979c8287-290f-46d4-b487-2087354abb82",
        "tags" : [
        ]
      },
      {
        "id" : "ebe79da8-6639-442e-85e9-fff04030fb2a",
        "parentId" : "cfbf00d4-a52f-48b7-bb61-675651acb8c9",
        "authorId" : "1eeff2c0-3979-4336-9501-eb5cdd6ddbb3",
        "body" : "@AndrejEPAM Oooh, you mean `withArgs`. Silly me, overlooked that twice, sorry ðŸ˜– See it now. Yes, that's a regression and it should be fixed - I overlooked that you could specify argument matchers there ðŸ˜Ÿ ",
        "createdAt" : "2019-09-30T16:43:03Z",
        "updatedAt" : "2019-09-30T16:43:03Z",
        "lastEditedBy" : "1eeff2c0-3979-4336-9501-eb5cdd6ddbb3",
        "tags" : [
        ]
      },
      {
        "id" : "dde7b29d-c4df-4755-a64d-5a83253bf491",
        "parentId" : "cfbf00d4-a52f-48b7-bb61-675651acb8c9",
        "authorId" : "1eeff2c0-3979-4336-9501-eb5cdd6ddbb3",
        "body" : "@AndrejEPAM JFYI Created a PR to allow arg matchers in `withArgs()` method: #38738. Thanks for highlighting.",
        "createdAt" : "2019-09-30T21:28:23Z",
        "updatedAt" : "2019-09-30T21:28:32Z",
        "lastEditedBy" : "1eeff2c0-3979-4336-9501-eb5cdd6ddbb3",
        "tags" : [
        ]
      },
      {
        "id" : "af3544c7-a7e4-4be6-bfc6-63bd96e15787",
        "parentId" : "cfbf00d4-a52f-48b7-bb61-675651acb8c9",
        "authorId" : "ab4f1226-160a-45b0-b70c-f02164e7f314",
        "body" : "I have a similar issue with 3.4.2. This code no longer compiles:\r\n\r\n```ts\r\nexpect(ga).toHaveBeenCalledWith(\"send\", jasmine.objectContaining({\r\n    hitType: \"event\",\r\n    eventCategory: category,\r\n    eventAction: action,\r\n    eventLabel: label\r\n}));\r\n```",
        "createdAt" : "2019-10-04T15:55:13Z",
        "updatedAt" : "2019-10-04T15:55:13Z",
        "lastEditedBy" : "ab4f1226-160a-45b0-b70c-f02164e7f314",
        "tags" : [
        ]
      }
    ],
    "commit" : "edf8c51931cb34ce6074f842aa1d3b6eea5da07d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +6,10 @@// TypeScript Version: 2.8\n\n/// <reference types=\"jasmine/v2\" />\n\ndeclare function it(expectation: string, assertion?: (done: DoneFn) => Promise<void>, timeout?: number): void;"
  }
]