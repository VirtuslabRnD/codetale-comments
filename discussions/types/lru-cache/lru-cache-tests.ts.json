[
  {
    "id" : "9023ba22-0267-46cf-8814-ea22f2a48a05",
    "prId" : 33123,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33123#pullrequestreview-204532422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2522a8f6-c236-41fc-afb9-a782d93f4982",
        "parentId" : null,
        "authorId" : "bf72326f-2337-4bd0-ab3c-47d2b78dd15e",
        "body" : "Command \r\n\r\n```\r\n$ npm run lint lru-cache\r\n```\r\nreturns the following error for this line:\r\n\r\n```\r\n/home/kostya/proj/DefinitelyTyped/types/lru-cache/lru-cache-tests.ts:110:1\r\nERROR: 110:1  expect                           Expected type to be:\r\n  LRUCache.Entry<string, Foo>[]\r\ngot:\r\n  Entry<string, Foo>[]\r\n\r\n    at /home/kostya/proj/DefinitelyTyped/node_modules/dtslint/bin/index.js:182:19\r\n    at Generator.next (<anonymous>)\r\n    at fulfilled (/home/kostya/proj/DefinitelyTyped/node_modules/dtslint/bin/index.js:5:58)\r\n    at <anonymous>\r\n```\r\n\r\nThis is strange, because actual type is `LRUCache.Entry` and `Entry` interface is not available in this scope. Maybe this is problem with `dtslint` :thinking: ",
        "createdAt" : "2019-02-16T19:48:46Z",
        "updatedAt" : "2019-02-23T00:22:28Z",
        "lastEditedBy" : "bf72326f-2337-4bd0-ab3c-47d2b78dd15e",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c9ace64ade37593cb130a69e084defbc2629a70",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +108,112 @@\nconst dump = cache.dump();\ndump; // $ExpectType Entry<string, Foo>[]\ncache.load(dump);"
  },
  {
    "id" : "1947358f-ec97-4bbf-8600-1c9f49fffca6",
    "prId" : 33123,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33123#pullrequestreview-207064386",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec7bc94b-debd-46f9-bcbd-3e35cbbcbcfe",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "Generally speaking, you can't instantiate a symbol imported with `import *`.  Would it be more appropriate to retain the `import = require` form?",
        "createdAt" : "2019-02-22T00:13:35Z",
        "updatedAt" : "2019-02-23T00:22:28Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "a93a2b65-2845-4108-aaa3-6f06fb14914f",
        "parentId" : "ec7bc94b-debd-46f9-bcbd-3e35cbbcbcfe",
        "authorId" : "bf72326f-2337-4bd0-ab3c-47d2b78dd15e",
        "body" : "> Generally speaking, you can't instantiate a symbol imported with `import *`\r\n\r\nCould you provide more information why this is impossible? Module [exports](https://github.com/isaacs/node-lru-cache/blob/a71be6cd547d28b24d28957a15b10cd3eb34555a/index.js#L334) class `LRUCache` as\r\n\r\n```ts\r\nclass LRUCache {}\r\n\r\nmodule.exports = LRUCache;\r\n```\r\n\r\nTherefore, class can be imported as \r\n\r\n```ts\r\nimport * as LRUCache from 'lru-cache';\r\n```\r\n\r\nThe import above will be compiled by `tsc` to the following `require` call:\r\n\r\n```js\r\nconst LRUCache = require('lru-cache');\r\n```",
        "createdAt" : "2019-02-22T14:40:41Z",
        "updatedAt" : "2019-02-23T00:22:28Z",
        "lastEditedBy" : "bf72326f-2337-4bd0-ab3c-47d2b78dd15e",
        "tags" : [
        ]
      },
      {
        "id" : "194b3f78-cf63-4ddb-abf0-cab80c6f3966",
        "parentId" : "ec7bc94b-debd-46f9-bcbd-3e35cbbcbcfe",
        "authorId" : "b020629e-b52b-403a-98c4-dd5d98f3aa6b",
        "body" : "This is a coincidence that it actually works. It wouldn't work any more if you'd remove `declare namespace LRUCache ...` declaration from the declaration file.\r\n\r\nYou can't actually remove this declaration becase we want to expose interfaces from the module and declaring them in a namespace is the only way to expose them from a module with an `export = ...` export. So this is a necessary evil.\r\n\r\nWhat @amcasey tries to say is that it probably won't work in a native ES module environment, it only works in emulated environments that use CJS-style modules under the hood. You can find more materials on this topic [here](https://github.com/DefinitelyTyped/DefinitelyTyped#should-i-add-an-empty-namespace-to-a-package-that-doesnt-export-a-module-to-use-es6-style-imports).\r\n\r\nI would also prefer if you change it back to `const LRUCache = require('lru-cache');`, it is simply the only correct solution.",
        "createdAt" : "2019-02-22T17:29:00Z",
        "updatedAt" : "2019-02-23T00:22:28Z",
        "lastEditedBy" : "b020629e-b52b-403a-98c4-dd5d98f3aa6b",
        "tags" : [
        ]
      },
      {
        "id" : "8b861c4a-0b3c-4050-a3d0-e692efa9eb53",
        "parentId" : "ec7bc94b-debd-46f9-bcbd-3e35cbbcbcfe",
        "authorId" : "bf72326f-2337-4bd0-ab3c-47d2b78dd15e",
        "body" : "Thanks for explanation. This change was reverted.",
        "createdAt" : "2019-02-22T23:04:52Z",
        "updatedAt" : "2019-02-23T00:22:28Z",
        "lastEditedBy" : "bf72326f-2337-4bd0-ab3c-47d2b78dd15e",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c9ace64ade37593cb130a69e084defbc2629a70",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +11,15 @@};\n\nconst cache = new LRUCache<string, Foo>();\ncache; // $ExpectType LRUCache<string, Foo>\nnew LRUCache<string, Foo>({ // $ExpectType LRUCache<string, Foo>"
  }
]