[
  {
    "id" : "766538d7-bafe-4d4b-bf50-f55558314fd7",
    "prId" : 29524,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/29524#pullrequestreview-162301535",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9e7237b-0378-46b6-a8e9-c9491d783140",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "Bumped the minor version",
        "createdAt" : "2018-10-07T19:25:06Z",
        "updatedAt" : "2018-10-11T16:14:06Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "6acc389e3b18e24ff4a0fc8b72f635d0fa5630c1",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +-1,3 @@// Type definitions for yup 0.26\n// Project: https://github.com/jquense/yup\n// Definitions by: Dominik Hardtke <https://github.com/dhardtke>,"
  },
  {
    "id" : "43251622-3142-46fb-8039-ebff655c7a67",
    "prId" : 29524,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/29524#pullrequestreview-184568377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bfa63be-40cd-4f2f-91cc-6608d9489770",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "Added two new methods, `validateAt` and `validateSyncAt`",
        "createdAt" : "2018-10-07T19:26:00Z",
        "updatedAt" : "2018-10-11T16:14:06Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      },
      {
        "id" : "29ea2c9e-14c2-4000-b3cb-ddb598feebd8",
        "parentId" : "2bfa63be-40cd-4f2f-91cc-6608d9489770",
        "authorId" : "ab914c66-a60a-4e04-9e43-b8527787475f",
        "body" : "Are the types for `validateAt` and `validateSyncAt` correct?\r\n\r\nLooking at the documentation at https://github.com/jquense/yup#mixedvalidateatpath-string-value-any-options-object-promiseany-validationerror\r\n\r\n```\r\nconst rootValue = {\r\n  foo: [{ bar: 1 }, { bar: 1, loose: true }],\r\n};\r\n\r\nawait schema.validateAt('foo[0].bar', rootValue); // -> '1';\r\n```\r\n\r\nAccording to that snippet, `validateAt` returns the value at the path. However, the current type definition expects it to return the `rootValue`. I think the definition of `validateAt` should be something like:\r\n\r\n```\r\nvalidateAt(path: string, value: T, options?: ValidateOptions): Promise<any>;\r\n```\r\n\r\nI'm using `any` because I think it will be difficult to infer the type for paths like `foo[0].bar`.",
        "createdAt" : "2018-12-13T08:36:54Z",
        "updatedAt" : "2018-12-13T08:36:55Z",
        "lastEditedBy" : "ab914c66-a60a-4e04-9e43-b8527787475f",
        "tags" : [
        ]
      },
      {
        "id" : "6ef2b1b9-674c-455a-9145-93533dc2b39b",
        "parentId" : "2bfa63be-40cd-4f2f-91cc-6608d9489770",
        "authorId" : "4bbde1f5-44fa-4ce6-9b60-f66d54e71164",
        "body" : "Good point. Returning `any` is what lodash does with `_.get`, which is why I started using idx instead.",
        "createdAt" : "2018-12-13T09:30:57Z",
        "updatedAt" : "2018-12-13T09:30:57Z",
        "lastEditedBy" : "4bbde1f5-44fa-4ce6-9b60-f66d54e71164",
        "tags" : [
        ]
      }
    ],
    "commit" : "6acc389e3b18e24ff4a0fc8b72f635d0fa5630c1",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +57,61 @@    validate(value: T, options?: ValidateOptions): Promise<T>;\n    validateSync(value: T, options?: ValidateOptions): T;\n    validateAt(path: string, value: T, options?: ValidateOptions): Promise<T>;\n    validateSyncAt(path: string, value: T, options?: ValidateOptions): T;\n    isValid(value: T, options?: any): Promise<boolean>;"
  },
  {
    "id" : "92fcb25c-e144-4076-9b7b-a69694b71963",
    "prId" : 29524,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/29524#pullrequestreview-243718790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aeec25de-5b64-44e5-a980-33ad7c539494",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "`test` can now take a function as message and it gets passes some data to use to compose an error message. The documentation around this is not all that defined and tracing through the code, I found properties that I listed in `TestMessageParams` but there could be more so I set the type as a union of `object` and the partial. ",
        "createdAt" : "2018-10-07T19:27:51Z",
        "updatedAt" : "2018-10-11T16:14:06Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      },
      {
        "id" : "0e82f514-1280-4a6f-a165-17c115d5f430",
        "parentId" : "aeec25de-5b64-44e5-a980-33ad7c539494",
        "authorId" : "e2a22318-6550-4e05-a3d9-e492ca79a826",
        "body" : "I know this is an old commit - but `TestMessageParams` is missing the property of the method being used (not sure if this is applicable for all methods)... if I use `min` for example with a function for message creation:\r\n\r\n```\r\n.min(2, ({ path, value, originalValue, label, min }) => {\r\n  return `String must be at lease ${min} length`;\r\n})\r\n```\r\n\r\nThen `min` does not exist on the `TestMessageParams` interface. However Yup passes this through. I'm relatively new to TS so forgive me if something here is incorrect. ",
        "createdAt" : "2019-05-30T10:03:39Z",
        "updatedAt" : "2019-05-30T10:03:39Z",
        "lastEditedBy" : "e2a22318-6550-4e05-a3d9-e492ca79a826",
        "tags" : [
        ]
      }
    ],
    "commit" : "6acc389e3b18e24ff4a0fc8b72f635d0fa5630c1",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +78,82 @@        message:\n            | string\n            | ((params: object & Partial<TestMessageParams>) => string),\n        test: (\n            this: TestContext,"
  },
  {
    "id" : "c1da5347-c798-4d7b-8963-eff3e1f68ecd",
    "prId" : 29524,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/29524#pullrequestreview-162301629",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43bf8e1c-59e7-43bc-893a-e6a3b113cfa2",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "Another addition, this basically lists out the properties that I found in the code. ",
        "createdAt" : "2018-10-07T19:28:31Z",
        "updatedAt" : "2018-10-11T16:14:06Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "6acc389e3b18e24ff4a0fc8b72f635d0fa5630c1",
    "line" : 199,
    "diffHunk" : "@@ -1,1 +233,237 @@}\n\nexport interface TestMessageParams {\n    path: string;\n    value: any;"
  },
  {
    "id" : "b5b38643-5a41-4fbc-968a-90f48a53cf47",
    "prId" : 29524,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/29524#pullrequestreview-162301652",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86408b3a-b2c5-416e-a79f-319979158c58",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "Since test has both an config object style callsign and an arguments style callback, I also added the new changes to `message` here too. ",
        "createdAt" : "2018-10-07T19:29:25Z",
        "updatedAt" : "2018-10-11T16:14:06Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "6acc389e3b18e24ff4a0fc8b72f635d0fa5630c1",
    "line" : 225,
    "diffHunk" : "@@ -1,1 +259,263 @@    message?:\n        | string\n        | ((params: object & Partial<TestMessageParams>) => string);\n\n    /**"
  },
  {
    "id" : "41fbbdba-338f-4323-a961-4455f7be3af1",
    "prId" : 31290,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/31290#pullrequestreview-184323416",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a899a52c-5870-4602-bb47-f947e59aa135",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : ":100:",
        "createdAt" : "2018-12-12T18:20:17Z",
        "updatedAt" : "2018-12-16T15:06:24Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fad2b49e9e9a6b514f2257d353a362dfe676888",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +336,340 @@ * function.\n */\nexport class Ref {\n    private constructor();\n    private readonly __isYupRef: true;"
  },
  {
    "id" : "570e6bf2-3174-4f52-9473-7ad7a0fc1ba8",
    "prId" : 32532,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/32532#pullrequestreview-196846223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7618322d-3aea-4c36-9b10-34e8b86ad2bd",
        "parentId" : null,
        "authorId" : "2acfbe89-7d31-446c-abd8-072c90942939",
        "body" : "Shouldn't the line above also change to make the `value` argument no longer optional? Doing so would accurately distinguish between the \"has a single argument\" and \"has no argument\" overloads, which have different return types. ",
        "createdAt" : "2019-01-27T20:26:39Z",
        "updatedAt" : "2019-01-27T21:25:58Z",
        "lastEditedBy" : "2acfbe89-7d31-446c-abd8-072c90942939",
        "tags" : [
        ]
      },
      {
        "id" : "17be90b7-453d-41dc-86df-6de04eb78152",
        "parentId" : "7618322d-3aea-4c36-9b10-34e8b86ad2bd",
        "authorId" : "79d3de4d-5873-4c9e-a0b3-54b1b319998f",
        "body" : "Good point - yes, I believe you are correct",
        "createdAt" : "2019-01-27T21:25:20Z",
        "updatedAt" : "2019-01-27T21:25:58Z",
        "lastEditedBy" : "79d3de4d-5873-4c9e-a0b3-54b1b319998f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a38224f97624a41d10c69ec77dc1ac375dcf608f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +69,73 @@    withMutation(fn: (current: this) => void): void;\n    default(value: any): this;\n    default(): T;\n    nullable(isNullable: boolean): this;\n    required(message?: TestOptionsMessage): this;"
  },
  {
    "id" : "7391fe22-9cca-408d-952b-b604669103a0",
    "prId" : 35789,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/35789#pullrequestreview-243477952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a415dc7c-42c9-4451-b0a9-7a38775cfd74",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "I'm guessing some of these changes are like prettier changes?",
        "createdAt" : "2019-05-29T09:38:14Z",
        "updatedAt" : "2019-06-05T13:18:29Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      },
      {
        "id" : "36bcdcef-70f1-47e2-a618-a8ba0f406209",
        "parentId" : "a415dc7c-42c9-4451-b0a9-7a38775cfd74",
        "authorId" : "3c4f8ddb-eedb-4bbf-b919-e0ad9cd83b2d",
        "body" : "Yes sorry, I have prettier with format on save enabled. You want me to revert these?",
        "createdAt" : "2019-05-29T10:20:36Z",
        "updatedAt" : "2019-06-05T13:18:29Z",
        "lastEditedBy" : "3c4f8ddb-eedb-4bbf-b919-e0ad9cd83b2d",
        "tags" : [
        ]
      },
      {
        "id" : "2a6b2753-7a75-4789-baa7-daf070310948",
        "parentId" : "a415dc7c-42c9-4451-b0a9-7a38775cfd74",
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "Oh no. I like prettier being run on the code!",
        "createdAt" : "2019-05-29T19:44:59Z",
        "updatedAt" : "2019-06-05T13:18:29Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "607b48d17e1a2e29baae4cadb8af8a218e316f37",
    "line" : 179,
    "diffHunk" : "@@ -1,1 +333,337 @@    label: string;\n    meta: object;\n    tests: Array<{ name: string; params: object }>;\n    fields: object;\n}"
  },
  {
    "id" : "3ad6c096-c86d-48dc-842e-1e5b24831ca8",
    "prId" : 36040,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36040#pullrequestreview-247421700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "894baa00-0d34-49c4-a518-cc9d6e27c3b7",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "I think we should call this type `WhenOptionsFunction<T>` because the docs call the second argument `builder` when it's an object. ",
        "createdAt" : "2019-06-09T01:04:15Z",
        "updatedAt" : "2019-06-11T13:49:25Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      },
      {
        "id" : "7aaf96ee-31af-4cb9-be9a-ecd9182100e9",
        "parentId" : "894baa00-0d34-49c4-a518-cc9d6e27c3b7",
        "authorId" : "2c8f1e80-944d-4e4b-bfe7-dd9fba7dec81",
        "body" : "`builder` is the name of the argument when it is an object or function. I was trying to stick with the existing naming scheme, but add more specificity.",
        "createdAt" : "2019-06-09T16:43:43Z",
        "updatedAt" : "2019-06-11T13:49:25Z",
        "lastEditedBy" : "2c8f1e80-944d-4e4b-bfe7-dd9fba7dec81",
        "tags" : [
        ]
      },
      {
        "id" : "87e848bb-731c-408f-9894-ee89e96b5fa4",
        "parentId" : "894baa00-0d34-49c4-a518-cc9d6e27c3b7",
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "Yeah, okay. I'll concede. 😄",
        "createdAt" : "2019-06-10T00:29:09Z",
        "updatedAt" : "2019-06-11T13:49:25Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1bf201047c9a6645afb28850266c5500ff8483c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +241,245 @@) => any;\n\nexport interface WhenOptionsBuilderFunction<T> {\n    (value: any, schema: T): T;\n    (v1: any, v2: any, schema: T): T;"
  },
  {
    "id" : "e75e7497-92a0-4a2d-a100-9c0cb7780662",
    "prId" : 36040,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36040#pullrequestreview-247421745",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d081f6b0-d44b-4cc5-aa68-6996fe8c7c2d",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "Since `is` can actually be anything, are we losing of the type information if we just change this type to `((...values: any[]) => boolean) | any` rather than a union of all these types?\r\n\r\nFurthermore, can we name this type something like `BuilderIsProperty` or `WhenIsProperty` or simply `IsProperty` so that it doesn't sound like a ruby method name? ",
        "createdAt" : "2019-06-09T01:13:39Z",
        "updatedAt" : "2019-06-11T13:49:25Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      },
      {
        "id" : "9889fc69-6dfe-4964-9d4f-2916333e1e1f",
        "parentId" : "d081f6b0-d44b-4cc5-aa68-6996fe8c7c2d",
        "authorId" : "2c8f1e80-944d-4e4b-bfe7-dd9fba7dec81",
        "body" : "Yes. Unioning anything with `any` resolves to just `any`. I believe this is even a linter warning. The way I have it allows for all the types I tested with, but still gives some intellisense/direction about what the `when` method expects.\r\n\r\nI think `IsProperty` is too generic. What if there were another `is` property that took different types. Likewise with `BuilderIsProperty`. There could be other methods that take a builder of a different sort. Again, I was trying to stick with and expand the existing naming convention.",
        "createdAt" : "2019-06-09T16:52:04Z",
        "updatedAt" : "2019-06-11T13:49:25Z",
        "lastEditedBy" : "2c8f1e80-944d-4e4b-bfe7-dd9fba7dec81",
        "tags" : [
        ]
      },
      {
        "id" : "ac0078b0-6f2a-445c-9d39-80415e13b306",
        "parentId" : "d081f6b0-d44b-4cc5-aa68-6996fe8c7c2d",
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "I'm still not a fan of the name but I don't see that as a reason to block this PR from being merged. ",
        "createdAt" : "2019-06-10T00:29:57Z",
        "updatedAt" : "2019-06-11T13:49:25Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1bf201047c9a6645afb28850266c5500ff8483c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +248,252 @@}\n\nexport type WhenOptionsBuilderObjectIs =\n    | ((...values: any[]) => boolean)\n    | boolean"
  },
  {
    "id" : "eb178f25-3621-4289-a6ff-0495e5b58805",
    "prId" : 36040,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36040#pullrequestreview-247406804",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6762acd2-f089-48a9-8df1-653b94ed341f",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "We should just call this `WhenOptionsBuilder` to match the documentation for yup.",
        "createdAt" : "2019-06-09T01:15:31Z",
        "updatedAt" : "2019-06-11T13:49:25Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      },
      {
        "id" : "1d508d67-f390-45ae-ba95-15194609bb6f",
        "parentId" : "6762acd2-f089-48a9-8df1-653b94ed341f",
        "authorId" : "2c8f1e80-944d-4e4b-bfe7-dd9fba7dec81",
        "body" : "Referring back to the 1st comment. `builder` can be an object or function, so suffixing them makes sense to me to distinguish them.",
        "createdAt" : "2019-06-09T16:53:08Z",
        "updatedAt" : "2019-06-11T13:49:25Z",
        "lastEditedBy" : "2c8f1e80-944d-4e4b-bfe7-dd9fba7dec81",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1bf201047c9a6645afb28850266c5500ff8483c",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +256,260 @@    | string;\n\nexport type WhenOptionsBuilderObject =\n    | {\n        is: WhenOptionsBuilderObjectIs;"
  },
  {
    "id" : "08bde0e4-33f1-4b0f-a247-23b6d6359e84",
    "prId" : 36155,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36155#pullrequestreview-250222196",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "936827d8-90f3-4c8f-b8f6-25e305ec39d0",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "I think having these types are clutch!",
        "createdAt" : "2019-06-16T01:14:29Z",
        "updatedAt" : "2019-06-19T19:33:42Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      },
      {
        "id" : "cccba7e8-e6da-4f83-ab41-548d1c2f71d7",
        "parentId" : "936827d8-90f3-4c8f-b8f6-25e305ec39d0",
        "authorId" : "3c4f8ddb-eedb-4bbf-b919-e0ad9cd83b2d",
        "body" : "Thanks :-)\r\n\r\nWhen this PR is merged I will do a PR on the yup docs to show how to use this.",
        "createdAt" : "2019-06-16T08:47:40Z",
        "updatedAt" : "2019-06-19T19:33:42Z",
        "lastEditedBy" : "3c4f8ddb-eedb-4bbf-b919-e0ad9cd83b2d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d271b78b4624f31def19a57b46c047ad0f46e0be",
    "line" : 224,
    "diffHunk" : "@@ -1,1 +500,504 @@export {};\n\ntype KeyOfUndefined<T> = {\n    [P in keyof T]-?: undefined extends T[P] ? P : never\n}[keyof T];"
  },
  {
    "id" : "d578a0ce-eef8-426e-b64e-68ff71e9efcc",
    "prId" : 36155,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36155#pullrequestreview-251926662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b6c1dcd-f568-4026-b65f-994ec23c11ef",
        "parentId" : null,
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "(reposting comment on PR instead of commit)\r\ncan nullable be called with anything but a literal? It doesn't work with an unknown boolean:\r\n\r\n```ts\r\nfunction wrapper(b: boolean, msx: MixedSchema) {\r\n  return msx.nullable(b)\r\n}\r\n```\r\n\r\nGives an error \"Argument of type 'boolean' is not assignable to 'false'.\"",
        "createdAt" : "2019-06-18T15:37:16Z",
        "updatedAt" : "2019-06-19T19:33:42Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      },
      {
        "id" : "a895f793-96c0-426d-88a9-a1aef77c2641",
        "parentId" : "0b6c1dcd-f568-4026-b65f-994ec23c11ef",
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "We might need to flip the order of these function declarations for the types to flow correctly? ",
        "createdAt" : "2019-06-18T16:21:43Z",
        "updatedAt" : "2019-06-19T19:33:42Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      },
      {
        "id" : "2c2b1823-5749-4aa9-b9c4-75b115796f6f",
        "parentId" : "0b6c1dcd-f568-4026-b65f-994ec23c11ef",
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "I think you actually need another overload for `boolean`, but I'm not sure what to return. Just `NumberSchema<T>`?",
        "createdAt" : "2019-06-18T16:28:20Z",
        "updatedAt" : "2019-06-19T19:33:42Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      },
      {
        "id" : "2a564596-b91e-415e-9847-a2b0d7c7e9e9",
        "parentId" : "0b6c1dcd-f568-4026-b65f-994ec23c11ef",
        "authorId" : "3c4f8ddb-eedb-4bbf-b919-e0ad9cd83b2d",
        "body" : "@sandersn \t\r\n\r\nAdding an extra overload to the `MixedSchema`:\r\n```TypeScript\r\nexport interface MixedSchema<T = any> extends Schema<T> {\r\n    nullable(isNullable?: boolean): MixedSchema<T>;\r\n    nullable(isNullable?: true): MixedSchema<T | null>;\r\n    nullable(isNullable: false): MixedSchema<Exclude<T, null>>;\r\n    required(message?: TestOptionsMessage): MixedSchema<Exclude<T, undefined>>;\r\n    notRequired(): MixedSchema<T | undefined>;\r\n}\r\n```\r\n\r\nAnd overloading the wrapper like:\r\n```TypeScript\r\nfunction wrapper<T>(b: false, msx: MixedSchema<T>): MixedSchema<T>;\r\nfunction wrapper<T>(b: true, msx: MixedSchema<T>): MixedSchema<T | null>;\r\n\r\nfunction wrapper<T>(b: boolean, msx: MixedSchema<T>) {\r\n    return msx.nullable(b);\r\n}\r\n``` \r\n\r\nShould IMHO result in the correct typing:\r\n```TypeScript\r\nconst resultingSchema1 = wrapper<string | number>(false, yup.mixed().oneOf(['1', 2]));\r\nconst resultingSchema2 = wrapper<string | number>(true, yup.mixed().oneOf(['1', 2]));\r\n```\r\n\r\nResulting type signatures:\r\n```TypeScript\r\nconst resultingSchema1: yup.MixedSchema<string | number>\r\nconst resultingSchema2: yup.MixedSchema<string | number | null>\r\n```\r\n",
        "createdAt" : "2019-06-18T17:44:36Z",
        "updatedAt" : "2019-06-19T19:33:42Z",
        "lastEditedBy" : "3c4f8ddb-eedb-4bbf-b919-e0ad9cd83b2d",
        "tags" : [
        ]
      },
      {
        "id" : "4e7565ea-1a65-4e27-b422-a3135dd72a03",
        "parentId" : "0b6c1dcd-f568-4026-b65f-994ec23c11ef",
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "Shouldn't the boolean overload go last since it will otherwise match literal `true` and `false`?",
        "createdAt" : "2019-06-18T20:42:28Z",
        "updatedAt" : "2019-06-19T19:33:42Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      },
      {
        "id" : "a18ae5a1-3e85-4c9f-ab97-767fb21da7b7",
        "parentId" : "0b6c1dcd-f568-4026-b65f-994ec23c11ef",
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "Yeah, I'm thinking this too. ",
        "createdAt" : "2019-06-19T16:30:04Z",
        "updatedAt" : "2019-06-19T19:33:42Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      },
      {
        "id" : "ecd9c4d4-2175-4452-a64e-b47b0f817cb2",
        "parentId" : "0b6c1dcd-f568-4026-b65f-994ec23c11ef",
        "authorId" : "3c4f8ddb-eedb-4bbf-b919-e0ad9cd83b2d",
        "body" : "Agreed, added the various overloads and a test for them.",
        "createdAt" : "2019-06-19T19:34:16Z",
        "updatedAt" : "2019-06-19T19:34:17Z",
        "lastEditedBy" : "3c4f8ddb-eedb-4bbf-b919-e0ad9cd83b2d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d271b78b4624f31def19a57b46c047ad0f46e0be",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +157,161 @@    round(type: \"floor\" | \"ceil\" | \"trunc\" | \"round\"): NumberSchema<T>;\n    nullable(isNullable?: true): NumberSchema<T | null>;\n    nullable(isNullable: false): NumberSchema<Exclude<T, null>>;\n    nullable(isNullable?: boolean): NumberSchema<T>;\n    required(message?: TestOptionsMessage): NumberSchema<Exclude<T, undefined>>;"
  },
  {
    "id" : "52820ddb-b585-469c-b207-bb3d86b1acbe",
    "prId" : 36155,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36155#pullrequestreview-252685212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f30fbc7-39a5-4062-ad1d-caedec597e1d",
        "parentId" : null,
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "Instead of overloads, what about a conditional type?\r\n\r\n```ts\r\nnullable(isNullable?: boolean): MixedSchema<T extends true ? T | null : Exclude<T, null>>;",
        "createdAt" : "2019-06-21T00:48:44Z",
        "updatedAt" : "2019-06-21T00:49:17Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "c2042362-066d-4215-9332-9a3120433c6e",
        "parentId" : "3f30fbc7-39a5-4062-ad1d-caedec597e1d",
        "authorId" : "3c4f8ddb-eedb-4bbf-b919-e0ad9cd83b2d",
        "body" : "@DanielRosenwasser \t\r\n\r\nSweet, I like removing the overloads, makes the definition more readable.\r\n\r\nHowever when I try this works fine but using a wrapper function becomes harder. The [wrapper test code here](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36155/files#diff-3ed4607a6b19a001ccf1d37f42e3f387R663) needs to be updated to the following. \r\n\r\n```TypeScrript\r\nfunction wrapper<T>(b: false, msx: MixedSchema<T>): MixedSchema<T>;\r\nfunction wrapper<T>(b: true, msx: MixedSchema<T>): MixedSchema<T | null>;\r\n\r\nfunction wrapper<T>(b: boolean, msx: MixedSchema<T>): MixedSchema<T extends true ? T | null : Exclude<T, null>> {\r\n    return msx.nullable(b);\r\n}\r\n\r\nconst resultingSchema1 = wrapper<string | number>(false, yup.mixed().oneOf(['1', 2])); // $ExpectType MixedSchema<string | number>\r\nconst resultingSchema2 = wrapper<string | number>(true, yup.mixed().oneOf(['1', 2])); // $ExpectType MixedSchema<string | number | null>\r\n```\r\n\r\nSo the overloads are still required else the resulting type changes and the return of the wrapper function is a lot more verbose.\r\n\r\nPersonally I would favor more complexity in the type definition with a simple API over a simple type definition and a more complex API for developers to use. \r\n\r\nLets put this to the vote and see what the others think and go with that.",
        "createdAt" : "2019-06-21T05:09:47Z",
        "updatedAt" : "2019-06-21T05:09:47Z",
        "lastEditedBy" : "3c4f8ddb-eedb-4bbf-b919-e0ad9cd83b2d",
        "tags" : [
        ]
      },
      {
        "id" : "59a51cad-af76-447f-a656-64ab86eef7d4",
        "parentId" : "3f30fbc7-39a5-4062-ad1d-caedec597e1d",
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "I agree with 👇 statement pretty wholeheartedly\r\n\r\n> Personally I would favor more complexity in the type definition with a simple API over a simple type definition and a more complex API for developers to use.\r\n\r\nI do wonder though, how many of our clients are using wrapper code like that because if that's somewhat of an \"advanced\" usecase, then I'm okay having the types be conditional so that we can get some of the benefits of simpler types on the type author side as well. ",
        "createdAt" : "2019-06-21T07:50:24Z",
        "updatedAt" : "2019-06-21T07:50:24Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "d271b78b4624f31def19a57b46c047ad0f46e0be",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +100,104 @@    nullable(isNullable?: true): MixedSchema<T | null>;\n    nullable(isNullable: false): MixedSchema<Exclude<T, null>>;\n    nullable(isNullable?: boolean): MixedSchema<T>;\n    required(message?: TestOptionsMessage): MixedSchema<Exclude<T, undefined>>;\n    notRequired(): MixedSchema<T | undefined>;"
  },
  {
    "id" : "ff0edcd4-32b2-49d8-abb3-f4fee19d1524",
    "prId" : 37648,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/37648#pullrequestreview-277175586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e45fe15-3c69-4fe5-818d-caab6b408510",
        "parentId" : null,
        "authorId" : "4bbde1f5-44fa-4ce6-9b60-f66d54e71164",
        "body" : "@kalley just add your name and GH profile url here :)",
        "createdAt" : "2019-08-20T13:43:48Z",
        "updatedAt" : "2019-08-20T13:45:29Z",
        "lastEditedBy" : "4bbde1f5-44fa-4ce6-9b60-f66d54e71164",
        "tags" : [
        ]
      }
    ],
    "commit" : "3877634dabe8ea4ce70513809a5d785a216b036b",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +11,15 @@//                 Dan Rumney <https://github.com/dancrumb>\n//                 Desmond Koh <https://github.com/deskoh>\n//                 Maurice de Beijer <https://github.com/mauricedb>\n//                 Kalley Powell <https://github.com/kalley>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped"
  },
  {
    "id" : "c6aeb203-2fb5-4458-a2dc-06f57f7b685f",
    "prId" : 45083,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45083#pullrequestreview-418890990",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "395a355b-e381-4c3e-b7af-5ed7d4ee2dcf",
        "parentId" : null,
        "authorId" : "e580309f-a492-4ba0-94b6-adf3d79ac4f2",
        "body" : "Any reason this needs to be an interface? I think it would be clearer as `type InnerInferTypeArray<T> = Array<InnerInferType<T>>;`",
        "createdAt" : "2020-05-27T04:00:04Z",
        "updatedAt" : "2020-05-27T04:00:42Z",
        "lastEditedBy" : "e580309f-a492-4ba0-94b6-adf3d79ac4f2",
        "tags" : [
        ]
      },
      {
        "id" : "1d875115-d4a2-46fd-8f53-15eef729f6b3",
        "parentId" : "395a355b-e381-4c3e-b7af-5ed7d4ee2dcf",
        "authorId" : "5e035caf-f1c7-492e-87a5-f6daa68ea5a4",
        "body" : "good question – it's because you can't use a type alias there; if you do, you get errors about type aliases not being able to recursively reference themselves. this limitation doesn't apply to interfaces.",
        "createdAt" : "2020-05-27T04:48:57Z",
        "updatedAt" : "2020-05-27T04:48:57Z",
        "lastEditedBy" : "5e035caf-f1c7-492e-87a5-f6daa68ea5a4",
        "tags" : [
        ]
      },
      {
        "id" : "e76d7d46-38fc-48c9-9b6a-b2129bb54453",
        "parentId" : "395a355b-e381-4c3e-b7af-5ed7d4ee2dcf",
        "authorId" : "3c4f8ddb-eedb-4bbf-b919-e0ad9cd83b2d",
        "body" : "I was wondering about the reason for `interface InnerInferTypeArray<T>` in the fist place as it doesn't add any members from `Array<InnerInferType<T>>` so just using the laster should be the same. But I noticed compile errors with TypeScript@3.6 while TypeScript@3.7 has no compile errors.\r\n\r\nLGTM",
        "createdAt" : "2020-05-27T06:29:57Z",
        "updatedAt" : "2020-05-27T06:29:57Z",
        "lastEditedBy" : "3c4f8ddb-eedb-4bbf-b919-e0ad9cd83b2d",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf7d7286bcfa08f704c4ab06dc1a913c553fd1c3",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +645,649 @@    | (T extends Array<infer T> ? InnerInferTypeArray<T> : Id<NotRequiredProps<T> & RequiredProps<T>>)\n    | PreserveOptionals<T>;\ninterface InnerInferTypeArray<T> extends Array<InnerInferType<T>> {}\ntype InferredArrayType<T> = T extends Array<infer U> ? U : T;\n/** If `T` is optional, returns optional `U`. */"
  },
  {
    "id" : "91f9e93c-70db-4f83-a2f7-a5a69f867c32",
    "prId" : 46705,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46705#pullrequestreview-467581924",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4926d878-d954-49f3-9656-df6430419b06",
        "parentId" : null,
        "authorId" : "e580309f-a492-4ba0-94b6-adf3d79ac4f2",
        "body" : "I would add a comment here explaining that `| undefined | null` is added intentionally because the test will still run for undefined/null input whether or not they're set to be allowed. Otherwise inevitably someone else will submit a PR to remove that.",
        "createdAt" : "2020-08-14T13:41:57Z",
        "updatedAt" : "2020-08-14T15:13:37Z",
        "lastEditedBy" : "e580309f-a492-4ba0-94b6-adf3d79ac4f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b49a7a76b23a2933d29ba835090caf05e94c8c7a",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +152,156 @@        will narrow out those types, and tests run for (undefined | null) even if they're not allowed.\n    */\n    test(name: string, message: TestOptionsMessage, test: TestFunction<T | undefined | null>): this;\n    test<U extends T = T>(name: string, message: TestOptionsMessage, test: AssertingTestFunction<U>): StringSchema<U>;\n    test<U extends T = T>(options: AssertingTestOptions<U, Record<string, any>>): StringSchema<U>;"
  }
]