[
  {
    "id" : "766538d7-bafe-4d4b-bf50-f55558314fd7",
    "prId" : 29524,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/29524#pullrequestreview-162301535",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9e7237b-0378-46b6-a8e9-c9491d783140",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "Bumped the minor version",
        "createdAt" : "2018-10-07T19:25:06Z",
        "updatedAt" : "2018-10-11T16:14:06Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "6acc389e3b18e24ff4a0fc8b72f635d0fa5630c1",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +-1,3 @@// Type definitions for yup 0.26\n// Project: https://github.com/jquense/yup\n// Definitions by: Dominik Hardtke <https://github.com/dhardtke>,"
  },
  {
    "id" : "43251622-3142-46fb-8039-ebff655c7a67",
    "prId" : 29524,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/29524#pullrequestreview-184568377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bfa63be-40cd-4f2f-91cc-6608d9489770",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "Added two new methods, `validateAt` and `validateSyncAt`",
        "createdAt" : "2018-10-07T19:26:00Z",
        "updatedAt" : "2018-10-11T16:14:06Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      },
      {
        "id" : "29ea2c9e-14c2-4000-b3cb-ddb598feebd8",
        "parentId" : "2bfa63be-40cd-4f2f-91cc-6608d9489770",
        "authorId" : "ab914c66-a60a-4e04-9e43-b8527787475f",
        "body" : "Are the types for `validateAt` and `validateSyncAt` correct?\r\n\r\nLooking at the documentation at https://github.com/jquense/yup#mixedvalidateatpath-string-value-any-options-object-promiseany-validationerror\r\n\r\n```\r\nconst rootValue = {\r\n  foo: [{ bar: 1 }, { bar: 1, loose: true }],\r\n};\r\n\r\nawait schema.validateAt('foo[0].bar', rootValue); // -> '1';\r\n```\r\n\r\nAccording to that snippet, `validateAt` returns the value at the path. However, the current type definition expects it to return the `rootValue`. I think the definition of `validateAt` should be something like:\r\n\r\n```\r\nvalidateAt(path: string, value: T, options?: ValidateOptions): Promise<any>;\r\n```\r\n\r\nI'm using `any` because I think it will be difficult to infer the type for paths like `foo[0].bar`.",
        "createdAt" : "2018-12-13T08:36:54Z",
        "updatedAt" : "2018-12-13T08:36:55Z",
        "lastEditedBy" : "ab914c66-a60a-4e04-9e43-b8527787475f",
        "tags" : [
        ]
      },
      {
        "id" : "6ef2b1b9-674c-455a-9145-93533dc2b39b",
        "parentId" : "2bfa63be-40cd-4f2f-91cc-6608d9489770",
        "authorId" : "4bbde1f5-44fa-4ce6-9b60-f66d54e71164",
        "body" : "Good point. Returning `any` is what lodash does with `_.get`, which is why I started using idx instead.",
        "createdAt" : "2018-12-13T09:30:57Z",
        "updatedAt" : "2018-12-13T09:30:57Z",
        "lastEditedBy" : "4bbde1f5-44fa-4ce6-9b60-f66d54e71164",
        "tags" : [
        ]
      }
    ],
    "commit" : "6acc389e3b18e24ff4a0fc8b72f635d0fa5630c1",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +57,61 @@    validate(value: T, options?: ValidateOptions): Promise<T>;\n    validateSync(value: T, options?: ValidateOptions): T;\n    validateAt(path: string, value: T, options?: ValidateOptions): Promise<T>;\n    validateSyncAt(path: string, value: T, options?: ValidateOptions): T;\n    isValid(value: T, options?: any): Promise<boolean>;"
  },
  {
    "id" : "92fcb25c-e144-4076-9b7b-a69694b71963",
    "prId" : 29524,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/29524#pullrequestreview-243718790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aeec25de-5b64-44e5-a980-33ad7c539494",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "`test` can now take a function as message and it gets passes some data to use to compose an error message. The documentation around this is not all that defined and tracing through the code, I found properties that I listed in `TestMessageParams` but there could be more so I set the type as a union of `object` and the partial. ",
        "createdAt" : "2018-10-07T19:27:51Z",
        "updatedAt" : "2018-10-11T16:14:06Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      },
      {
        "id" : "0e82f514-1280-4a6f-a165-17c115d5f430",
        "parentId" : "aeec25de-5b64-44e5-a980-33ad7c539494",
        "authorId" : "e2a22318-6550-4e05-a3d9-e492ca79a826",
        "body" : "I know this is an old commit - but `TestMessageParams` is missing the property of the method being used (not sure if this is applicable for all methods)... if I use `min` for example with a function for message creation:\r\n\r\n```\r\n.min(2, ({ path, value, originalValue, label, min }) => {\r\n  return `String must be at lease ${min} length`;\r\n})\r\n```\r\n\r\nThen `min` does not exist on the `TestMessageParams` interface. However Yup passes this through. I'm relatively new to TS so forgive me if something here is incorrect. ",
        "createdAt" : "2019-05-30T10:03:39Z",
        "updatedAt" : "2019-05-30T10:03:39Z",
        "lastEditedBy" : "e2a22318-6550-4e05-a3d9-e492ca79a826",
        "tags" : [
        ]
      }
    ],
    "commit" : "6acc389e3b18e24ff4a0fc8b72f635d0fa5630c1",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +78,82 @@        message:\n            | string\n            | ((params: object & Partial<TestMessageParams>) => string),\n        test: (\n            this: TestContext,"
  },
  {
    "id" : "c1da5347-c798-4d7b-8963-eff3e1f68ecd",
    "prId" : 29524,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/29524#pullrequestreview-162301629",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43bf8e1c-59e7-43bc-893a-e6a3b113cfa2",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "Another addition, this basically lists out the properties that I found in the code. ",
        "createdAt" : "2018-10-07T19:28:31Z",
        "updatedAt" : "2018-10-11T16:14:06Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "6acc389e3b18e24ff4a0fc8b72f635d0fa5630c1",
    "line" : 199,
    "diffHunk" : "@@ -1,1 +233,237 @@}\n\nexport interface TestMessageParams {\n    path: string;\n    value: any;"
  },
  {
    "id" : "b5b38643-5a41-4fbc-968a-90f48a53cf47",
    "prId" : 29524,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/29524#pullrequestreview-162301652",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86408b3a-b2c5-416e-a79f-319979158c58",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "Since test has both an config object style callsign and an arguments style callback, I also added the new changes to `message` here too. ",
        "createdAt" : "2018-10-07T19:29:25Z",
        "updatedAt" : "2018-10-11T16:14:06Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "6acc389e3b18e24ff4a0fc8b72f635d0fa5630c1",
    "line" : 225,
    "diffHunk" : "@@ -1,1 +259,263 @@    message?:\n        | string\n        | ((params: object & Partial<TestMessageParams>) => string);\n\n    /**"
  },
  {
    "id" : "41fbbdba-338f-4323-a961-4455f7be3af1",
    "prId" : 31290,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/31290#pullrequestreview-184323416",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a899a52c-5870-4602-bb47-f947e59aa135",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : ":100:",
        "createdAt" : "2018-12-12T18:20:17Z",
        "updatedAt" : "2018-12-16T15:06:24Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fad2b49e9e9a6b514f2257d353a362dfe676888",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +336,340 @@ * function.\n */\nexport class Ref {\n    private constructor();\n    private readonly __isYupRef: true;"
  },
  {
    "id" : "570e6bf2-3174-4f52-9473-7ad7a0fc1ba8",
    "prId" : 32532,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/32532#pullrequestreview-196846223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7618322d-3aea-4c36-9b10-34e8b86ad2bd",
        "parentId" : null,
        "authorId" : "2acfbe89-7d31-446c-abd8-072c90942939",
        "body" : "Shouldn't the line above also change to make the `value` argument no longer optional? Doing so would accurately distinguish between the \"has a single argument\" and \"has no argument\" overloads, which have different return types. ",
        "createdAt" : "2019-01-27T20:26:39Z",
        "updatedAt" : "2019-01-27T21:25:58Z",
        "lastEditedBy" : "2acfbe89-7d31-446c-abd8-072c90942939",
        "tags" : [
        ]
      },
      {
        "id" : "17be90b7-453d-41dc-86df-6de04eb78152",
        "parentId" : "7618322d-3aea-4c36-9b10-34e8b86ad2bd",
        "authorId" : "79d3de4d-5873-4c9e-a0b3-54b1b319998f",
        "body" : "Good point - yes, I believe you are correct",
        "createdAt" : "2019-01-27T21:25:20Z",
        "updatedAt" : "2019-01-27T21:25:58Z",
        "lastEditedBy" : "79d3de4d-5873-4c9e-a0b3-54b1b319998f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a38224f97624a41d10c69ec77dc1ac375dcf608f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +69,73 @@    withMutation(fn: (current: this) => void): void;\n    default(value: any): this;\n    default(): T;\n    nullable(isNullable: boolean): this;\n    required(message?: TestOptionsMessage): this;"
  },
  {
    "id" : "7391fe22-9cca-408d-952b-b604669103a0",
    "prId" : 35789,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/35789#pullrequestreview-243477952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a415dc7c-42c9-4451-b0a9-7a38775cfd74",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "I'm guessing some of these changes are like prettier changes?",
        "createdAt" : "2019-05-29T09:38:14Z",
        "updatedAt" : "2019-06-05T13:18:29Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      },
      {
        "id" : "36bcdcef-70f1-47e2-a618-a8ba0f406209",
        "parentId" : "a415dc7c-42c9-4451-b0a9-7a38775cfd74",
        "authorId" : "3c4f8ddb-eedb-4bbf-b919-e0ad9cd83b2d",
        "body" : "Yes sorry, I have prettier with format on save enabled. You want me to revert these?",
        "createdAt" : "2019-05-29T10:20:36Z",
        "updatedAt" : "2019-06-05T13:18:29Z",
        "lastEditedBy" : "3c4f8ddb-eedb-4bbf-b919-e0ad9cd83b2d",
        "tags" : [
        ]
      },
      {
        "id" : "2a6b2753-7a75-4789-baa7-daf070310948",
        "parentId" : "a415dc7c-42c9-4451-b0a9-7a38775cfd74",
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "Oh no. I like prettier being run on the code!",
        "createdAt" : "2019-05-29T19:44:59Z",
        "updatedAt" : "2019-06-05T13:18:29Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "607b48d17e1a2e29baae4cadb8af8a218e316f37",
    "line" : 179,
    "diffHunk" : "@@ -1,1 +333,337 @@    label: string;\n    meta: object;\n    tests: Array<{ name: string; params: object }>;\n    fields: object;\n}"
  },
  {
    "id" : "3ad6c096-c86d-48dc-842e-1e5b24831ca8",
    "prId" : 36040,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36040#pullrequestreview-247421700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "894baa00-0d34-49c4-a518-cc9d6e27c3b7",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "I think we should call this type `WhenOptionsFunction<T>` because the docs call the second argument `builder` when it's an object. ",
        "createdAt" : "2019-06-09T01:04:15Z",
        "updatedAt" : "2019-06-11T13:49:25Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      },
      {
        "id" : "7aaf96ee-31af-4cb9-be9a-ecd9182100e9",
        "parentId" : "894baa00-0d34-49c4-a518-cc9d6e27c3b7",
        "authorId" : "2c8f1e80-944d-4e4b-bfe7-dd9fba7dec81",
        "body" : "`builder` is the name of the argument when it is an object or function. I was trying to stick with the existing naming scheme, but add more specificity.",
        "createdAt" : "2019-06-09T16:43:43Z",
        "updatedAt" : "2019-06-11T13:49:25Z",
        "lastEditedBy" : "2c8f1e80-944d-4e4b-bfe7-dd9fba7dec81",
        "tags" : [
        ]
      },
      {
        "id" : "87e848bb-731c-408f-9894-ee89e96b5fa4",
        "parentId" : "894baa00-0d34-49c4-a518-cc9d6e27c3b7",
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "Yeah, okay. I'll concede. 😄",
        "createdAt" : "2019-06-10T00:29:09Z",
        "updatedAt" : "2019-06-11T13:49:25Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1bf201047c9a6645afb28850266c5500ff8483c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +241,245 @@) => any;\n\nexport interface WhenOptionsBuilderFunction<T> {\n    (value: any, schema: T): T;\n    (v1: any, v2: any, schema: T): T;"
  },
  {
    "id" : "e75e7497-92a0-4a2d-a100-9c0cb7780662",
    "prId" : 36040,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36040#pullrequestreview-247421745",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d081f6b0-d44b-4cc5-aa68-6996fe8c7c2d",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "Since `is` can actually be anything, are we losing of the type information if we just change this type to `((...values: any[]) => boolean) | any` rather than a union of all these types?\r\n\r\nFurthermore, can we name this type something like `BuilderIsProperty` or `WhenIsProperty` or simply `IsProperty` so that it doesn't sound like a ruby method name? ",
        "createdAt" : "2019-06-09T01:13:39Z",
        "updatedAt" : "2019-06-11T13:49:25Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      },
      {
        "id" : "9889fc69-6dfe-4964-9d4f-2916333e1e1f",
        "parentId" : "d081f6b0-d44b-4cc5-aa68-6996fe8c7c2d",
        "authorId" : "2c8f1e80-944d-4e4b-bfe7-dd9fba7dec81",
        "body" : "Yes. Unioning anything with `any` resolves to just `any`. I believe this is even a linter warning. The way I have it allows for all the types I tested with, but still gives some intellisense/direction about what the `when` method expects.\r\n\r\nI think `IsProperty` is too generic. What if there were another `is` property that took different types. Likewise with `BuilderIsProperty`. There could be other methods that take a builder of a different sort. Again, I was trying to stick with and expand the existing naming convention.",
        "createdAt" : "2019-06-09T16:52:04Z",
        "updatedAt" : "2019-06-11T13:49:25Z",
        "lastEditedBy" : "2c8f1e80-944d-4e4b-bfe7-dd9fba7dec81",
        "tags" : [
        ]
      },
      {
        "id" : "ac0078b0-6f2a-445c-9d39-80415e13b306",
        "parentId" : "d081f6b0-d44b-4cc5-aa68-6996fe8c7c2d",
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "I'm still not a fan of the name but I don't see that as a reason to block this PR from being merged. ",
        "createdAt" : "2019-06-10T00:29:57Z",
        "updatedAt" : "2019-06-11T13:49:25Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1bf201047c9a6645afb28850266c5500ff8483c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +248,252 @@}\n\nexport type WhenOptionsBuilderObjectIs =\n    | ((...values: any[]) => boolean)\n    | boolean"
  },
  {
    "id" : "eb178f25-3621-4289-a6ff-0495e5b58805",
    "prId" : 36040,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36040#pullrequestreview-247406804",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6762acd2-f089-48a9-8df1-653b94ed341f",
        "parentId" : null,
        "authorId" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "body" : "We should just call this `WhenOptionsBuilder` to match the documentation for yup.",
        "createdAt" : "2019-06-09T01:15:31Z",
        "updatedAt" : "2019-06-11T13:49:25Z",
        "lastEditedBy" : "f792d4a4-6369-4b86-a1e4-78ab0a8e93fe",
        "tags" : [
        ]
      },
      {
        "id" : "1d508d67-f390-45ae-ba95-15194609bb6f",
        "parentId" : "6762acd2-f089-48a9-8df1-653b94ed341f",
        "authorId" : "2c8f1e80-944d-4e4b-bfe7-dd9fba7dec81",
        "body" : "Referring back to the 1st comment. `builder` can be an object or function, so suffixing them makes sense to me to distinguish them.",
        "createdAt" : "2019-06-09T16:53:08Z",
        "updatedAt" : "2019-06-11T13:49:25Z",
        "lastEditedBy" : "2c8f1e80-944d-4e4b-bfe7-dd9fba7dec81",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1bf201047c9a6645afb28850266c5500ff8483c",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +256,260 @@    | string;\n\nexport type WhenOptionsBuilderObject =\n    | {\n        is: WhenOptionsBuilderObjectIs;"
  }
]