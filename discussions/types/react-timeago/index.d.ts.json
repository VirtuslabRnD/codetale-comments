[
  {
    "id" : "f9a844ba-638a-4cf4-8663-a6340f13808e",
    "prId" : 49495,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/49495#pullrequestreview-549518051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85c1f37c-f9fc-4504-943b-813c7c5e8608",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "@Philipp91 anecdotally, yes, using `keyof JSX.IntrinsicElements` is likely to be substantially slower than just using `string`.  Whether that affects the editing experience in practice is a judgement call.  You need to trade off the value of the extra type checking and IntelliSense from providing a list of acceptable strings against this extra cost.  As someone who doesn't use this library on a regular basis, I can't really make the call.",
        "createdAt" : "2020-12-03T23:45:28Z",
        "updatedAt" : "2020-12-03T23:46:33Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "e978a522-ea60-40a0-9a7d-75ddf6b3b95e",
        "parentId" : "85c1f37c-f9fc-4504-943b-813c7c5e8608",
        "authorId" : "bc9c9461-6e66-4ca1-aa3d-ba7beb4ae976",
        "body" : "Thanks for taking a look!\r\n\r\nI see your point. I (wrongly) thought the slowness was limited to that particular unit test case that the bot complained about.\r\n\r\nAs for the type checking / IntelliSense, I think that's applicable in two places: Firstly, when specifying the actual value of `T`, I think it doesn't matter much. Secondly, after `T` is chosen, checking that all the props passed to the components are actually valid props for `T` or `ReactTimeago` itself, that's quite important, as it can help discover subtle bugs.\r\n\r\nIf I replace `keyof JSX.IntrinsicElements` with just `string` as you proposed, then I think that wouldn't break the latter desirable kind of type checking, as once the user specifies `T` it can be checked. However, I instead get this error when compiling the library already:\r\n\r\n```\r\nERROR: 45:62  expect  TypeScript@4.2 compile error:\r\nType 'T' does not satisfy the constraint '\"symbol\" | \"object\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"track\" | \"progress\" | \"a\" | \"abbr\" | \"address\" |\r\n\"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | ... 156 more ... | (new (props: any) => Component<...>)'.\r\n  Type 'string | ComponentClass<{}, any> | FunctionComponent<{}>' is not assignable to type '\"symbol\" | \"object\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"track\" | \"progress\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | ... 156 more ... | (new (props: any) => Component<...>)'.\r\n    Type 'string' is not assignable to type '\"symbol\" | \"object\" | \"big\" | \"link\" | \"small\" | \"sub\" | \"sup\" | \"track\" | \"progress\" | \"a\" | \"abbr\" | \"address\" | \"area\" | \"article\" | \"aside\" | \"audio\" | \"b\" | \"base\" | \"bdi\" | \"bdo\" | ... 156 more ... | (new (props: any) => Component<...>)'.\r\n      Type 'T' is not assignable to type '\"mpath\"'.\r\n        Type 'string | ComponentClass<{}, any> | FunctionComponent<{}>' is not assignable to type '\"mpath\"'.\r\n          Type 'string' is not assignable to type '\"mpath\"'.\r\n```\r\n\r\nI guess `React.ComponentProps<T>` isn't available when `T` can be an arbitrary `string`. Do you have any tips on how to work around this?\r\n\r\nPresumably with a conditional type (sth like `T extends keyof JSX.IntrinsicElements ? ComponentProps<T> : never`) we'd be back at a slow (and more convoluted) solution. Dropping `ComponentProps` entirely leads to compile errors at the call site (because I *do* pass in some props for the underlying component). And replacing it with `any` seems ugly.\r\n",
        "createdAt" : "2020-12-04T20:59:18Z",
        "updatedAt" : "2020-12-04T20:59:35Z",
        "lastEditedBy" : "bc9c9461-6e66-4ca1-aa3d-ba7beb4ae976",
        "tags" : [
        ]
      },
      {
        "id" : "74324d7b-f513-4e36-974e-f29f65164a99",
        "parentId" : "85c1f37c-f9fc-4504-943b-813c7c5e8608",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "Unfortunately, I'm not aware of a silver bullet that give you both perf and correctness in scenarios like this.  Personally, I tend to err on the side of using the more correct types until perf is shown to be a problem.  The difficulty, in this case, is that it will be hard for consumers to attribute any new editor delays they might see to this change, so there won't be a good way to react if the perf impact is excessiveness.  However, if you are or work with heavy users of this library, then your own experience should be a reasonably good indicator.",
        "createdAt" : "2020-12-07T17:43:29Z",
        "updatedAt" : "2020-12-07T17:43:29Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "b34797c3-8b00-4d67-90b8-ff5e8da53e8e",
        "parentId" : "85c1f37c-f9fc-4504-943b-813c7c5e8608",
        "authorId" : "bc9c9461-6e66-4ca1-aa3d-ba7beb4ae976",
        "body" : "> Personally, I tend to err on the side of using the more correct types until perf is shown to be a problem.\r\n\r\nThat does seem reasonable in general, and also applicable in this case. At least in my application, `TimeAgo` has only two call sites, unlike other components like `TextField` which have dozens. Even \"heavy users\" probably don't have more than a handful call sites. So the performance impact might not matter in practice.\r\n\r\nSo let's leave as is, for best type correctness.",
        "createdAt" : "2020-12-10T19:10:11Z",
        "updatedAt" : "2020-12-10T19:10:11Z",
        "lastEditedBy" : "bc9c9461-6e66-4ca1-aa3d-ba7beb4ae976",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ff5e7b9c44f6196023a8730f6cab59784988a27",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +28,32 @@    ) => React.ReactNode;\n\n    interface ReactTimeagoProps<T extends React.ComponentType | keyof JSX.IntrinsicElements = 'time'> {\n        readonly live?: boolean;\n        readonly minPeriod?: number;"
  }
]