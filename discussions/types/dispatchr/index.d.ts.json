[
  {
    "id" : "66f423dd-5185-4d7a-aac0-43d8231d0def",
    "prId" : 23952,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23952#pullrequestreview-100095527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27193656-f169-4981-9a5d-b7a8079c30bc",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "I wonder if there's a nice way to strongly type this...\r\n\r\nRandom idea that probably only works in 2.8 *if* it works at all:\r\n\r\n```ts\r\ninterface DispatcherContext<ActionTypeMap extends object|string> {\r\n  dispatch <Name extends (ActionTypeMap extends string ? string : keyof ActionTypeMap)>(\r\n    actionName: Name, payload: ActionTypeMap extends string ? any : ActionTypeMap[Name]\r\n  ): void\r\n}\r\n```\r\n\r\n```ts\r\ninterface TypeMap {\r\n  ACTION_FOO: { foo: string }\r\n  ACTION_BAR: { bar: string }\r\n}\r\ndeclare var ctx: DispatcherContext<TypeMap>\r\nctx.dispatch('ACTION_FOO', { foo: 'foo' })\r\nctx.dispatch('ACTION_BAR', { foo: 'foo' }) // type error, expected { bar: string }\r\nctx.dispatch('CTHULHU', { foo: 'foo' }) // type error, expected 'ACTION_FOO' | 'ACTION_BAR'\r\n```\r\n",
        "createdAt" : "2018-02-28T01:29:33Z",
        "updatedAt" : "2018-03-11T06:12:51Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "0e332ff3-a7f7-4e88-a626-5b1c5f9b4397",
        "parentId" : "27193656-f169-4981-9a5d-b7a8079c30bc",
        "authorId" : "fd0411ce-d525-4253-a0e0-f648c1be40f4",
        "body" : "Great :+1:\r\nBut since TypeScript 2.8 has not been officially released yet, I'd like to avoid putting it in at the momentðŸ˜” ",
        "createdAt" : "2018-02-28T15:02:15Z",
        "updatedAt" : "2018-03-11T06:12:51Z",
        "lastEditedBy" : "fd0411ce-d525-4253-a0e0-f648c1be40f4",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d75110d7c886e21565488e6a577933ad644f5a1",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +45,49 @@    getStore<T extends StoreClass>(name: T): T;\n\n    dispatch(actionName: string, payload: any): void;\n\n    dehydrate(): DispatcherState;"
  }
]