[
  {
    "id" : "6ac4f899-eb0c-4bab-848b-294b293b2a07",
    "prId" : 21557,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21557#pullrequestreview-79701827",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f208ed4-3964-4fbb-bbe9-04aa15495c61",
        "parentId" : null,
        "authorId" : "4be4cb4a-552d-4cd5-8b52-207bc2523d6a",
        "body" : "This is probably not ideal. I don't have a firm grasp on Union types yet but it seems to pass.",
        "createdAt" : "2017-11-28T23:40:02Z",
        "updatedAt" : "2017-11-28T23:40:02Z",
        "lastEditedBy" : "4be4cb4a-552d-4cd5-8b52-207bc2523d6a",
        "tags" : [
        ]
      },
      {
        "id" : "3daa7a1f-db58-4915-9974-affb482d3590",
        "parentId" : "9f208ed4-3964-4fbb-bbe9-04aa15495c61",
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "You could just cast the array to <GuidVersions[]>",
        "createdAt" : "2017-11-29T00:17:58Z",
        "updatedAt" : "2017-11-29T00:17:58Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c20cfdcd94de5b31c9e7a883775e83393d9a943",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +773,777 @@strSchema = strSchema.uri(uriOpts);\nstrSchema = strSchema.guid();\nstrSchema = strSchema.guid({ version: ['uuidv1' as GuidVersions, 'uuidv2'  as GuidVersions, 'uuidv3' as GuidVersions, 'uuidv4' as GuidVersions, 'uuidv5'  as GuidVersions]});\nstrSchema = strSchema.guid({ version: 'uuidv4' });\nstrSchema = strSchema.hex();"
  },
  {
    "id" : "e2a1137d-d586-4bb5-9b17-cc3e3b2f3626",
    "prId" : 26244,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26244#pullrequestreview-127348964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f356790-ae2e-423b-8c5e-dbc991980222",
        "parentId" : null,
        "authorId" : "590840cf-6468-4ac8-b784-96dbee0d5680",
        "body" : "We might want \"value\" to be \"any\" here. In theory, you can validate any value against a schema, and we should only assert that the value is the expected type once validation passes.",
        "createdAt" : "2018-06-09T01:24:06Z",
        "updatedAt" : "2018-06-15T09:16:09Z",
        "lastEditedBy" : "590840cf-6468-4ac8-b784-96dbee0d5680",
        "tags" : [
        ]
      },
      {
        "id" : "0f4dfb0e-3d20-42df-9061-58334b219589",
        "parentId" : "9f356790-ae2e-423b-8c5e-dbc991980222",
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "Ah yea, I forgot to change the rest of the test, this type safety is achieved through the `base` parameter.",
        "createdAt" : "2018-06-09T02:02:42Z",
        "updatedAt" : "2018-06-15T09:16:09Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a39b90d7413521dfb914d488606af1d55153c40",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +994,998 @@                const fIsAllowed = params.allowFalse;\n            },\n            validate(params, value: boolean, state, options) {\n                if (value || params.allowFalse && !value) {\n                    return value;"
  },
  {
    "id" : "96b3efda-b40f-44b3-b5e9-01d369095178",
    "prId" : 26244,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26244#pullrequestreview-127348964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "590e9755-29bb-423e-bf72-dcfface911a9",
        "parentId" : null,
        "authorId" : "590840cf-6468-4ac8-b784-96dbee0d5680",
        "body" : "I think the existing test code was correct, if a bit confusing.\r\n\r\nWhen defining a custom rule, \"params\" accepts an object mapping to Joi schemas. Each schema is used to validate the parameters passed to the rule. The value of \"params\" then becomes the validated object. In the original case, this will be an object with a property \"allowF\", which is a boolean defaulting to false.\r\n\r\nThe actual validation only allows the string values \"asd\", or in the case where the \"allowF\" parameter is true, \"asdf\".\r\n\r\nThe new validation you've written is also valid, but a future developer might read the test and think that the `Joi.boolean()` schema is related to `value`, which is not the case.",
        "createdAt" : "2018-06-09T01:32:11Z",
        "updatedAt" : "2018-06-15T09:16:09Z",
        "lastEditedBy" : "590840cf-6468-4ac8-b784-96dbee0d5680",
        "tags" : [
        ]
      },
      {
        "id" : "d2045763-39b6-4bec-b0a1-662beb16efec",
        "parentId" : "590e9755-29bb-423e-bf72-dcfface911a9",
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "I will have to take a break from this for a couple of days (e3), if you want to investigate it, please feel free to post your findings here.",
        "createdAt" : "2018-06-09T02:03:43Z",
        "updatedAt" : "2018-06-15T09:16:09Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a39b90d7413521dfb914d488606af1d55153c40",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +995,999 @@            },\n            validate(params, value: boolean, state, options) {\n                if (value || params.allowFalse && !value) {\n                    return value;\n                }"
  }
]