[
  {
    "id" : "209e1660-2cd4-4dcd-8436-ea885a195a2c",
    "prId" : 16448,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/16448#pullrequestreview-39330146",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d558b48f-b92c-4b25-8d93-424ecf233345",
        "parentId" : null,
        "authorId" : "5cfd6547-0d22-4bd0-929e-9a6a38ad6c03",
        "body" : "Why do you add `value?` when there's already `[key: string]: any;` defined that allows any property?",
        "createdAt" : "2017-05-20T07:38:12Z",
        "updatedAt" : "2017-05-20T07:38:12Z",
        "lastEditedBy" : "5cfd6547-0d22-4bd0-929e-9a6a38ad6c03",
        "tags" : [
        ]
      }
    ],
    "commit" : "53b4fa6ca82a0790c2858db138d418f91298bb6d",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +149,153 @@    context?: {\n        [key: string]: any;\n        value?: any;\n    };\n}"
  },
  {
    "id" : "30455e8e-b5de-4806-8ac5-eb1b806babf5",
    "prId" : 18760,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18760#pullrequestreview-55331162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f42c4aef-6b9d-49db-ba8d-4406c6020bfa",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "Why does `setup` return `x | void` but `validate` return `x | undefined`?  Does it convey a meaningful distinction?",
        "createdAt" : "2017-08-09T18:02:29Z",
        "updatedAt" : "2017-08-09T18:02:29Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "dddd45a9-5fc8-4ba2-b205-43a35eb8632b",
        "parentId" : "f42c4aef-6b9d-49db-ba8d-4406c6020bfa",
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "This is actually incorrect, this should `Err | any` as you are meant to return the value.\r\n\r\nUnfortunately this passed inside the test as `value` was treated as `any` already.\r\n\r\nWe should probably create a follow-up PR soon-ish to avoid people getting confused in case they type `value` manually...\r\n\r\nI can do this tonight unless you want to grab this one.",
        "createdAt" : "2017-08-09T18:10:37Z",
        "updatedAt" : "2017-08-09T18:10:37Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      },
      {
        "id" : "3525eea5-0bc1-4924-b8a8-f0299484e26b",
        "parentId" : "f42c4aef-6b9d-49db-ba8d-4406c6020bfa",
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "Apparently TypeScript doesn't care if return anything else which is weird, so this is not _breaking_.",
        "createdAt" : "2017-08-09T18:31:20Z",
        "updatedAt" : "2017-08-09T18:31:20Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a0343138d219f33e39a9479ba095d416772ffe2",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +845,849 @@    name: string;\n    params?: ObjectSchema | { [key: string]: Schema };\n    setup?: (this: AnySchema<AnySchema<Schema>>, description: { [key: string]: any }) => AnySchema<AnySchema<Schema>> | void;\n    validate?: (this: AnySchema<AnySchema<Schema>>, params: { [key: string]: any }, value: any, state: State, options: ValidationOptions) => Err | undefined;\n    description?: string | Function;"
  },
  {
    "id" : "6c0bba10-d1b7-424e-b5c0-100e224015b1",
    "prId" : 18760,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18760#pullrequestreview-55333247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60455ea5-3b50-4bbc-8f5f-437d9eb8ac87",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "What's `AnySchema<AnySchema<Schema>>`?  Is that just the least-derived schema type?",
        "createdAt" : "2017-08-09T18:09:50Z",
        "updatedAt" : "2017-08-09T18:09:50Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "071d8090-c270-4981-9c84-2434fe212e52",
        "parentId" : "60455ea5-3b50-4bbc-8f5f-437d9eb8ac87",
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "Basically, I'm still somewhat confused by the self referencing interface:\r\n```export interface AnySchema<T extends AnySchema<Schema>>``` but this appears fulfill the interface, I could have probably used `any`, but I hoped for some clarification from the original authors.",
        "createdAt" : "2017-08-09T18:19:19Z",
        "updatedAt" : "2017-08-09T18:19:19Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      },
      {
        "id" : "9ea5342d-0207-41dc-aefa-c313f40e174c",
        "parentId" : "60455ea5-3b50-4bbc-8f5f-437d9eb8ac87",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "Perhaps @laurence-myers can explain?",
        "createdAt" : "2017-08-09T18:37:40Z",
        "updatedAt" : "2017-08-09T18:37:40Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a0343138d219f33e39a9479ba095d416772ffe2",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +846,850 @@    params?: ObjectSchema | { [key: string]: Schema };\n    setup?: (this: AnySchema<AnySchema<Schema>>, description: { [key: string]: any }) => AnySchema<AnySchema<Schema>> | void;\n    validate?: (this: AnySchema<AnySchema<Schema>>, params: { [key: string]: any }, value: any, state: State, options: ValidationOptions) => Err | undefined;\n    description?: string | Function;\n}"
  },
  {
    "id" : "79157226-44fe-434d-b00c-b66048853711",
    "prId" : 22741,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/22741#pullrequestreview-87422870",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c34f8e20-f3c1-413f-8d3d-235dda19731e",
        "parentId" : null,
        "authorId" : "45f88ff7-8c77-4752-a69a-2ca14e5adca3",
        "body" : "Maybe just `extends Promise<T>` is okay?\r\n",
        "createdAt" : "2018-01-09T03:55:50Z",
        "updatedAt" : "2018-01-09T03:55:53Z",
        "lastEditedBy" : "45f88ff7-8c77-4752-a69a-2ca14e5adca3",
        "tags" : [
        ]
      },
      {
        "id" : "8f164668-8209-4a97-8782-f8d3632b0c48",
        "parentId" : "c34f8e20-f3c1-413f-8d3d-235dda19731e",
        "authorId" : "6e3b564e-da91-49c7-b179-6a7ec5bafd04",
        "body" : "I think `extends Pick<Promise<T>, 'then' | 'catch'>` is good enough and exactly the same as the implementation. https://github.com/hapijs/joi/blob/master/lib/types/any/index.js#L660",
        "createdAt" : "2018-01-09T06:30:04Z",
        "updatedAt" : "2018-01-09T06:30:04Z",
        "lastEditedBy" : "6e3b564e-da91-49c7-b179-6a7ec5bafd04",
        "tags" : [
        ]
      }
    ],
    "commit" : "81e796bc79dde967b08ec4304c2588b09bbabb09",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +187,191 @@}\n\nexport interface ValidationResult<T> extends Pick<Promise<T>, 'then' | 'catch'> {\n    error: ValidationError;\n    value: T;"
  }
]