[
  {
    "id" : "1496ae42-5f92-471a-a00c-1b5335c98a13",
    "prId" : 49391,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/49391#pullrequestreview-527272924",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f350d45c-ede1-4d11-b4a1-a0079079ad52",
        "parentId" : null,
        "authorId" : "3082a8e8-b39a-4b3b-8f6f-d2fa571bcff6",
        "body" : "I believe an empty string should only be allowed when allowEmpty is true, correct?",
        "createdAt" : "2020-11-07T23:13:31Z",
        "updatedAt" : "2020-11-07T23:13:35Z",
        "lastEditedBy" : "3082a8e8-b39a-4b3b-8f6f-d2fa571bcff6",
        "tags" : [
        ]
      },
      {
        "id" : "d44be157-b7d5-4ba6-8463-da1c0a133747",
        "parentId" : "f350d45c-ede1-4d11-b4a1-a0079079ad52",
        "authorId" : "eca6ca9c-5b99-4c76-a24a-08b2a834af36",
        "body" : "Yes, empty value is only permitted when `allowEmpty` option is true. But, I don't know how to implement optional type when `allowEmpty` is true. Is my suggestion wrong?",
        "createdAt" : "2020-11-09T00:58:59Z",
        "updatedAt" : "2020-11-09T00:58:59Z",
        "lastEditedBy" : "eca6ca9c-5b99-4c76-a24a-08b2a834af36",
        "tags" : [
        ]
      },
      {
        "id" : "ad156ceb-2664-4353-978d-9acf52a3489b",
        "parentId" : "f350d45c-ede1-4d11-b4a1-a0079079ad52",
        "authorId" : "3082a8e8-b39a-4b3b-8f6f-d2fa571bcff6",
        "body" : "It's not wrong _per se_ but could be improved using Discriminated Union Type:\r\n\r\n```ts\r\nexport interface NumberInputCommonProps\r\n  extends Omit<ReactInputAttr, ExcludedAttributes>,\r\n    InternationalProps<NumberInputTranslationKey> {\r\n  ariaLabel?: string;\r\n  helperText?: React.ReactNode;\r\n  hideLabel?: boolean;\r\n  iconDescription?: string;\r\n  id: string;\r\n  invalid?: boolean;\r\n  invalidText?: React.ReactNode;\r\n  isMobile?: boolean;\r\n  label?: React.ReactNode;\r\n  light?: boolean;\r\n  size?: Extract<CarbonInputSize, 'sm' | 'xl'>;\r\n  warn?: boolean;\r\n  warnText?: React.ReactNode;\r\n}\r\n\r\nexport type NumberInputProps = NumberInputCommonProps &\r\n  ({ allowEmpty: true; value: number | '' } | { allowEmpty?: false; value: number });\r\n```\r\n\r\nSee https://tsplay.dev/1WGg9W",
        "createdAt" : "2020-11-09T15:42:50Z",
        "updatedAt" : "2020-11-09T15:43:06Z",
        "lastEditedBy" : "3082a8e8-b39a-4b3b-8f6f-d2fa571bcff6",
        "tags" : [
        ]
      },
      {
        "id" : "f53629e9-d813-49f3-b539-c4e5340d0dc4",
        "parentId" : "f350d45c-ede1-4d11-b4a1-a0079079ad52",
        "authorId" : "086ee9cf-4bc2-41d4-9a72-267a3471b9a8",
        "body" : "IMO I think this specific case is where the types can be loose and it will just boil down to proper usage/referencing the docs. Discriminated unions particularly with JSX can cause annoying issues. I think it's only worth introducing if the type signatures are significantly different (different props, different base element attributes, etc) or the component breaks.",
        "createdAt" : "2020-11-09T19:09:28Z",
        "updatedAt" : "2020-11-09T19:13:16Z",
        "lastEditedBy" : "086ee9cf-4bc2-41d4-9a72-267a3471b9a8",
        "tags" : [
        ]
      },
      {
        "id" : "50587438-e867-4fdd-a726-46ca7c10c70b",
        "parentId" : "f350d45c-ede1-4d11-b4a1-a0079079ad52",
        "authorId" : "086ee9cf-4bc2-41d4-9a72-267a3471b9a8",
        "body" : "I would also suggest the unioned types be their own exported interfaces as it will allow type augmentation and usage by the user.",
        "createdAt" : "2020-11-09T19:15:33Z",
        "updatedAt" : "2020-11-09T19:15:33Z",
        "lastEditedBy" : "086ee9cf-4bc2-41d4-9a72-267a3471b9a8",
        "tags" : [
        ]
      },
      {
        "id" : "67df69d6-e52e-4697-a253-d06fff80d2d7",
        "parentId" : "f350d45c-ede1-4d11-b4a1-a0079079ad52",
        "authorId" : "086ee9cf-4bc2-41d4-9a72-267a3471b9a8",
        "body" : "On second inspection it looks like more recent versions of TypeScript have improved inference. One example usage that seems to only fail on <= 3.7.x: [Playground](https://www.typescriptlang.org/play?ts=3.7.5#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcARFDvmQNwBQWAHpLHDAJ5hZwByAriABGWKAEkAdmD4wACsTDoAvHAAUAbxQAbTRADuAUXAcAXGyh8sAGjgA3ZJounxA4VDgAfOAHIvcAL4ecBr2OgZG7AD8pgT2qFa29o5wzkIi-gCU9LgQ4qjw-KliktKm2HgwAHQAYgDCADwFrhJSsvKoAHxwyirpXZ11ACbANgD07fR0wOIwIjG43ADy0iJyEApBdHBbWqGGYBxRcIIQEJo44vR+dHTZufAAsuw1JGClVJW1dUszUKsKnd1gto9HsOBk+httnBbnk4ABtFLWOIwAoAXS6mHeFT4cQAyjBkDMVAAGTKbbaUGB8KDiVTkqFbBouETNaQ7EHhRRqEIc-bsAJ2BxYLkpAJjelwdJ0PwTGHwZ5QSj4LADN7lar1b4rNoA1RA3bhcGKTpqCVy+GIuDItEYsr4bF4glE0n0KHAAiqHlhPm9U0MilYKk0uBMwqs+Be0HsBJCrlkMh+cVQgJYTRxSH+uCU6m00NNYrwQUWEUCMXtCVXGVAA).",
        "createdAt" : "2020-11-09T19:33:05Z",
        "updatedAt" : "2020-11-09T19:36:59Z",
        "lastEditedBy" : "086ee9cf-4bc2-41d4-9a72-267a3471b9a8",
        "tags" : [
        ]
      },
      {
        "id" : "c405f467-1a87-4bad-8e8f-95af53e2635a",
        "parentId" : "f350d45c-ede1-4d11-b4a1-a0079079ad52",
        "authorId" : "eca6ca9c-5b99-4c76-a24a-08b2a834af36",
        "body" : "Then, you mean that @mmiszy 's suggestion should be accepted? or just continue with my suggestion? I'm not good at English, so I didn't understand your intention clearly. cc @kalbert312 ",
        "createdAt" : "2020-11-10T01:12:58Z",
        "updatedAt" : "2020-11-10T01:12:58Z",
        "lastEditedBy" : "eca6ca9c-5b99-4c76-a24a-08b2a834af36",
        "tags" : [
        ]
      },
      {
        "id" : "4ba7c42c-70bb-4610-9a0b-34cb2bd3f808",
        "parentId" : "f350d45c-ede1-4d11-b4a1-a0079079ad52",
        "authorId" : "086ee9cf-4bc2-41d4-9a72-267a3471b9a8",
        "body" : "Continue with your suggestion.",
        "createdAt" : "2020-11-10T14:43:43Z",
        "updatedAt" : "2020-11-10T14:43:44Z",
        "lastEditedBy" : "086ee9cf-4bc2-41d4-9a72-267a3471b9a8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b848ba578021bf8200553e392bf7700bbeecb8c5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +21,25 @@    light?: boolean,\n    size?: Extract<CarbonInputSize, \"sm\" | \"xl\">,\n    value: number | '',\n    warn?: boolean,\n    warnText?: React.ReactNode,"
  }
]