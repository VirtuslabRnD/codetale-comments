[
  {
    "id" : "2401b623-8b4a-4ce6-a458-66c366270c6c",
    "prId" : 16321,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/16321#pullrequestreview-36539676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d9868b4-2231-4211-877c-87f86397f86c",
        "parentId" : null,
        "authorId" : "1dafe895-0dee-4056-9e2a-aadb53c1825d",
        "body" : "the top level intersection is sufficient. so: \r\n`T &  { [k in keyof T]: Spy; }`",
        "createdAt" : "2017-05-04T18:50:19Z",
        "updatedAt" : "2017-05-05T15:35:53Z",
        "lastEditedBy" : "1dafe895-0dee-4056-9e2a-aadb53c1825d",
        "tags" : [
        ]
      },
      {
        "id" : "181ebf6a-12fd-4e1d-a146-932710d0fb9c",
        "parentId" : "4d9868b4-2231-4211-877c-87f86397f86c",
        "authorId" : "d61e073b-b76d-4fdc-b679-53f17e371702",
        "body" : "Done, thanks.",
        "createdAt" : "2017-05-05T15:36:41Z",
        "updatedAt" : "2017-05-05T15:36:41Z",
        "lastEditedBy" : "d61e073b-b76d-4fdc-b679-53f17e371702",
        "tags" : [
        ]
      }
    ],
    "commit" : "9235e1c5b9eb3b16355d327626f4051fc2cd09ef",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +515,519 @@    }\n\n    type SpyObj<T> = T & {\n      [k in keyof T]: Spy;\n    }"
  },
  {
    "id" : "06a3dc1c-0d1a-4fec-8245-3d3163323ea0",
    "prId" : 21308,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21308#pullrequestreview-76209267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "493dd226-f249-4df3-8240-4d9b072786a8",
        "parentId" : null,
        "authorId" : "d61e073b-b76d-4fdc-b679-53f17e371702",
        "body" : "`Expected<ArrayLike<T> | ArrayContaining<T>>` ?",
        "createdAt" : "2017-11-13T17:10:54Z",
        "updatedAt" : "2017-11-13T19:00:55Z",
        "lastEditedBy" : "d61e073b-b76d-4fdc-b679-53f17e371702",
        "tags" : [
        ]
      },
      {
        "id" : "64bd9ff6-da1b-4ad1-a1c1-006b467530b1",
        "parentId" : "493dd226-f249-4df3-8240-4d9b072786a8",
        "authorId" : "4fad2b80-6130-4b11-bf94-15be7a7a230f",
        "body" : "as mentioned in the linked issue #21305 the `ArrayLikeMatchers` did not accept the type returned by `jasmine. arrayContaining()`\r\n\r\nbecause of that I added the `ArrayContaining<T>` type",
        "createdAt" : "2017-11-13T18:52:03Z",
        "updatedAt" : "2017-11-13T19:00:55Z",
        "lastEditedBy" : "4fad2b80-6130-4b11-bf94-15be7a7a230f",
        "tags" : [
        ]
      }
    ],
    "commit" : "53908383354eeca8d41486acd56db56c3bdbe402",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +450,454 @@\n    interface ArrayLikeMatchers<T> extends Matchers<ArrayLike<T>> {\n        toBe(expected: Expected<ArrayLike<T>> | ArrayContaining<T>, expectationFailOutput?: any): boolean;\n        toEqual(expected: Expected<ArrayLike<T>> | ArrayContaining<T>, expectationFailOutput?: any): boolean;\n        toContain(expected: Expected<T>, expectationFailOutput?: any): boolean;"
  },
  {
    "id" : "6f56237c-190e-40cd-adf3-67f03f6b13d0",
    "prId" : 21515,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21515#pullrequestreview-76555514",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "173ab06d-4437-4da5-8bd5-65df7a1f7eb1",
        "parentId" : null,
        "authorId" : "4fad2b80-6130-4b11-bf94-15be7a7a230f",
        "body" : "in jasmine 2.8 the `nothing()` matcher was added \r\n\r\nthis change makes the `actual` parameter optional as the usage is `expect().nothing`\r\n\r\nsee https://github.com/jasmine/jasmine/issues/1221\r\n\r\nthis was reason for this change\r\n\r\nwe'll need to support both uses",
        "createdAt" : "2017-11-14T17:57:59Z",
        "updatedAt" : "2017-11-14T18:58:02Z",
        "lastEditedBy" : "4fad2b80-6130-4b11-bf94-15be7a7a230f",
        "tags" : [
        ]
      },
      {
        "id" : "a30505c6-4956-433e-8d75-98a7e1cded90",
        "parentId" : "173ab06d-4437-4da5-8bd5-65df7a1f7eb1",
        "authorId" : "0f93df09-dd0a-45bb-9fe3-4b2a521071a4",
        "body" : "done",
        "createdAt" : "2017-11-14T18:59:23Z",
        "updatedAt" : "2017-11-14T18:59:23Z",
        "lastEditedBy" : "0f93df09-dd0a-45bb-9fe3-4b2a521071a4",
        "tags" : [
        ]
      }
    ],
    "commit" : "66d4e5113f395f7b52343240f8bb899985a53d2d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +89,93 @@ * @param actual Actual computed value to test expectations against.\n */\ndeclare function expect<T>(actual: T): jasmine.Matchers<T>;\n\n/**"
  },
  {
    "id" : "6a065c2c-3dba-4098-b54b-fc884a148c25",
    "prId" : 23094,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23094#pullrequestreview-90789894",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5b51356-9a23-4c25-a148-c69743e5a353",
        "parentId" : null,
        "authorId" : "4fad2b80-6130-4b11-bf94-15be7a7a230f",
        "body" : "as the documentation states that you can call it either without any argument or with both `files` and `filterString` I'd propose to add a overload with the parameters both set and one without \r\n\r\n```\r\nexecute(): any;\r\nexecute(files: string[], filterString: string): any;\r\n```\r\n\r\nalthough I could not find any reference to `filterString` in the actual code\r\nhttps://github.com/jasmine/jasmine/blob/master/src/core/Env.js#L262",
        "createdAt" : "2018-01-21T18:07:05Z",
        "updatedAt" : "2018-01-21T18:13:31Z",
        "lastEditedBy" : "4fad2b80-6130-4b11-bf94-15be7a7a230f",
        "tags" : [
        ]
      },
      {
        "id" : "ef832aa3-920b-4771-8449-62aa052f9bbf",
        "parentId" : "e5b51356-9a23-4c25-a148-c69743e5a353",
        "authorId" : "ed831a19-2cfe-4b8d-807b-77d2d5eab394",
        "body" : "I agree with the proposed change.\r\n\r\nI thought these were typings definitions for https://github.com/jasmine/jasmine-npm (where both parameters do have an effect), since it says on the [README.md](https://github.com/DefinitelyTyped/DefinitelyTyped) of DefinitelyTyped\r\n>For an NPM package \"foo\", typings for it will be at \"(at)types/foo\"\r\n\r\nand you install jasmine-npm on npm by typing\r\n```\r\nnpm install jasmine\r\n```\r\n\r\nSee also https://www.npmjs.com/package/jasmine.\r\nThis is kind of confusing.",
        "createdAt" : "2018-01-21T22:51:49Z",
        "updatedAt" : "2018-01-21T22:51:49Z",
        "lastEditedBy" : "ed831a19-2cfe-4b8d-807b-77d2d5eab394",
        "tags" : [
        ]
      },
      {
        "id" : "0c209305-8b42-4fda-ba13-89a63552208e",
        "parentId" : "e5b51356-9a23-4c25-a148-c69743e5a353",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "So what are these typings for if not for the npm package `jasmine`?",
        "createdAt" : "2018-01-22T21:44:49Z",
        "updatedAt" : "2018-01-22T21:44:50Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "e139705e-5c4a-4951-b201-8dc6f147142b",
        "parentId" : "e5b51356-9a23-4c25-a148-c69743e5a353",
        "authorId" : "4fad2b80-6130-4b11-bf94-15be7a7a230f",
        "body" : "@andy-ms The npm package is called `jasmine` so these are the correct typings for that package.\r\nBut the repository on Github is called [jasmine-npm](https://github.com/jasmine/jasmine-npm) \r\n\r\nThe core module [jasmine](https://github.com/jasmine/jasmine) is not available on npm at all, therefore the confusion\r\n\r\n@Engineer2B linked to the correct repository and the changes are correct, I simply looked in  the wrong repository",
        "createdAt" : "2018-01-23T11:30:34Z",
        "updatedAt" : "2018-01-23T11:30:56Z",
        "lastEditedBy" : "4fad2b80-6130-4b11-bf94-15be7a7a230f",
        "tags" : [
        ]
      }
    ],
    "commit" : "de0f8491e989cca1aaa56ec2618e4a4882af7e3a",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +719,723 @@        addSpecFiles(files: string[]): void;\n        configureDefaultReporter(options: any, ...args: any[]): void;\n        execute(files?: string[], filterString?: string): any;\n        exitCodeCompletion(passed: any): void;\n        loadConfig(config: any): void;"
  },
  {
    "id" : "6cfc1466-957e-4863-b211-f8d2848a91bc",
    "prId" : 29325,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/29325#pullrequestreview-160554512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36588277-66ae-48a5-9a4f-62ec87c5fb26",
        "parentId" : null,
        "authorId" : "a49d602a-0752-4c5c-b14f-0c0d5b77898f",
        "body" : "Should the same change be applied here (i.e. `methodNames: SpyObjMethodNames<T>`)?",
        "createdAt" : "2018-10-02T03:08:05Z",
        "updatedAt" : "2018-10-02T03:08:23Z",
        "lastEditedBy" : "a49d602a-0752-4c5c-b14f-0c0d5b77898f",
        "tags" : [
        ]
      }
    ],
    "commit" : "824c766de06887bcef02070852e9b2b65d1328a8",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +149,153 @@\n    function createSpyObj(methodNames: SpyObjMethodNames): any;\n    function createSpyObj<T>(methodNames: SpyObjMethodNames): SpyObj<T>;\n\n    function pp(value: any): string;"
  },
  {
    "id" : "52f509e2-7dff-4487-821c-7d1a1d53d840",
    "prId" : 30646,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30646#pullrequestreview-183631798",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f173128-481f-43fe-ba28-f1aa1d9185ac",
        "parentId" : null,
        "authorId" : "30823ba3-06da-47e0-abdc-8196b7fa743a",
        "body" : "* `T` is for what the Promise should resolve to.\r\n* `U` is for what the Promise should reject to. This is only used in `toBeRejectedWith`.",
        "createdAt" : "2018-11-19T17:22:53Z",
        "updatedAt" : "2018-12-18T22:22:12Z",
        "lastEditedBy" : "30823ba3-06da-47e0-abdc-8196b7fa743a",
        "tags" : [
        ]
      },
      {
        "id" : "710cd53d-639f-483b-a539-259342c32bd7",
        "parentId" : "5f173128-481f-43fe-ba28-f1aa1d9185ac",
        "authorId" : "6284694e-861f-4f30-a033-680d797370a3",
        "body" : "Users will have to specify `U` manually if they want to use it unfortunately... Inference will always result in `any` given the signature of `expectAsync`.",
        "createdAt" : "2018-12-11T11:37:14Z",
        "updatedAt" : "2018-12-18T22:22:12Z",
        "lastEditedBy" : "6284694e-861f-4f30-a033-680d797370a3",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bdd1cabc5f97ea74f2d9786b8525d7bba874bd1",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +504,508 @@    }\n\n    interface AsyncMatchers<T, U> {\n\n        /**"
  },
  {
    "id" : "9fa69997-43d8-475f-ab91-ebc3e84ca488",
    "prId" : 49639,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/49639#pullrequestreview-534120993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ec3a979-b72c-48b3-aee7-5de67e1b05ff",
        "parentId" : null,
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "Seems like changing the return types of methods to `PromiseLike` actually makes them less easy to use, not more lax.",
        "createdAt" : "2020-11-19T00:49:50Z",
        "updatedAt" : "2020-11-19T00:50:09Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      },
      {
        "id" : "4c3d716a-f822-49b4-a90e-da76f4d3af45",
        "parentId" : "0ec3a979-b72c-48b3-aee7-5de67e1b05ff",
        "authorId" : "ed8df54b-dc86-4218-8e48-e06204ff1620",
        "body" : "So what happened is, when the TS team made the change to remove the ts3.1/ directory and move files outward, some repositories (aka Jasmine typings) had some changes in the outer level index.d.ts that weren't reflected in ts3.1/\r\n\r\nThis is what happened here, you can see the original commit that created these typings in the original post.\r\n\r\nI looked at the source code for Jasmine. It uses Promise.then(success, failure) callback style. I don't see Jasmine using the Promise.then(success).catch(failure) callback style at all.\r\n\r\nI think PromiseLike is fine here.",
        "createdAt" : "2020-11-19T06:44:20Z",
        "updatedAt" : "2020-11-19T06:44:21Z",
        "lastEditedBy" : "ed8df54b-dc86-4218-8e48-e06204ff1620",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5e5c9885d23e7d1c1ea8f54b53c8283d5f4f856",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +766,770 @@         * @param expectationFailOutput\n         */\n        toBePending(expectationFailOutput?: any): PromiseLike<void>;\n\n        /**"
  },
  {
    "id" : "8862e0b6-5aac-4884-b524-f14b7be31773",
    "prId" : 51520,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/51520#pullrequestreview-603521795",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2683a602-78d1-4f0d-b0e4-d968062eb06e",
        "parentId" : null,
        "authorId" : "ed8df54b-dc86-4218-8e48-e06204ff1620",
        "body" : "Isn't this an integer?",
        "createdAt" : "2021-03-04T00:12:50Z",
        "updatedAt" : "2021-03-04T00:14:42Z",
        "lastEditedBy" : "ed8df54b-dc86-4218-8e48-e06204ff1620",
        "tags" : [
        ]
      },
      {
        "id" : "ae3cccae-f679-4a8d-bff8-8d9428398815",
        "parentId" : "2683a602-78d1-4f0d-b0e4-d968062eb06e",
        "authorId" : "0426458e-0aa9-48c6-805a-38d39ad43680",
        "body" : "It is typed as `{Int}` in the JSDoc... but it's actually always a string x.x",
        "createdAt" : "2021-03-04T00:23:15Z",
        "updatedAt" : "2021-03-04T00:23:16Z",
        "lastEditedBy" : "0426458e-0aa9-48c6-805a-38d39ad43680",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a010732739c208b7d0539e933b79fd17b991cfc",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +867,871 @@         * The unique id of this spec.\n         */\n        id: string;\n\n        /**"
  },
  {
    "id" : "c6224723-a0a8-4117-a855-1d32cc63d81e",
    "prId" : 51520,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/51520#pullrequestreview-603528265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65826695-a014-400e-822f-3d9ecc7cfd16",
        "parentId" : null,
        "authorId" : "ed8df54b-dc86-4218-8e48-e06204ff1620",
        "body" : "I see that this + L914 are typed as possible nulls, because the Jasmine code initializes this.result to have those fields set to null.\r\nBut in practice, are they always set? Because by the time the spec finishes executing, won't those values exist then?",
        "createdAt" : "2021-03-04T00:14:19Z",
        "updatedAt" : "2021-03-04T00:14:42Z",
        "lastEditedBy" : "ed8df54b-dc86-4218-8e48-e06204ff1620",
        "tags" : [
        ]
      },
      {
        "id" : "3689e91f-56cf-4ee6-b05a-d780f948cc35",
        "parentId" : "65826695-a014-400e-822f-3d9ecc7cfd16",
        "authorId" : "0426458e-0aa9-48c6-805a-38d39ad43680",
        "body" : "It's always set as a number in specDone(), but it's passed as null to specStarted().\r\n\r\nThese types could be better if we split this interface into a different type for each of {specStarted,specDone,suiteStarted,suiteDone}, but I didn't want to change things that much in this PR.",
        "createdAt" : "2021-03-04T00:26:51Z",
        "updatedAt" : "2021-03-04T00:26:51Z",
        "lastEditedBy" : "0426458e-0aa9-48c6-805a-38d39ad43680",
        "tags" : [
        ]
      }
    ],
    "commit" : "5a010732739c208b7d0539e933b79fd17b991cfc",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +907,911 @@         * The time in ms used by the spec execution, including any before/afterEach.\n         */\n        duration: number | null;\n\n        /**"
  }
]