[
  {
    "id" : "c2541b58-ca05-49c1-a543-80217f6538df",
    "prId" : 21308,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21308#pullrequestreview-76212622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6535cfc5-5515-410d-896b-442992f387e3",
        "parentId" : null,
        "authorId" : "d61e073b-b76d-4fdc-b679-53f17e371702",
        "body" : "Add lines for `.toBe` too.",
        "createdAt" : "2017-11-13T17:11:39Z",
        "updatedAt" : "2017-11-13T19:00:55Z",
        "lastEditedBy" : "d61e073b-b76d-4fdc-b679-53f17e371702",
        "tags" : [
        ]
      },
      {
        "id" : "2e2a8568-5a59-492e-bbee-3104d89b2d58",
        "parentId" : "6535cfc5-5515-410d-896b-442992f387e3",
        "authorId" : "4fad2b80-6130-4b11-bf94-15be7a7a230f",
        "body" : "added `.toBe` to `jasmine.arrayWithExactContents` and `jasmine. arrayContaining `",
        "createdAt" : "2017-11-13T19:02:21Z",
        "updatedAt" : "2017-11-13T19:02:22Z",
        "lastEditedBy" : "4fad2b80-6130-4b11-bf94-15be7a7a230f",
        "tags" : [
        ]
      }
    ],
    "commit" : "53908383354eeca8d41486acd56db56c3bdbe402",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +796,800 @@    it(\"matches arrays with exactly the same values\", () => {\n        expect(foo).toEqual(jasmine.arrayWithExactContents([1, 2, 3, 4]));\n        expect(foo).not.toEqual(jasmine.arrayWithExactContents([6]));\n\n        expect(foo).toBe(jasmine.arrayWithExactContents([1, 2, 3, 4]));"
  },
  {
    "id" : "b95da9a0-862d-4f51-876f-18380b9b296c",
    "prId" : 21515,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21515#pullrequestreview-76586924",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cf53bff-544a-4590-8d89-db47feec2138",
        "parentId" : null,
        "authorId" : "d61e073b-b76d-4fdc-b679-53f17e371702",
        "body" : "the cast here seems redundant?",
        "createdAt" : "2017-11-14T20:40:01Z",
        "updatedAt" : "2017-11-14T20:40:27Z",
        "lastEditedBy" : "d61e073b-b76d-4fdc-b679-53f17e371702",
        "tags" : [
        ]
      }
    ],
    "commit" : "66d4e5113f395f7b52343240f8bb899985a53d2d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +58,62 @@        it(\"should work for optional values\", () => {\n            var opt: string | undefined = \"s\";\n            expect(opt as (string | undefined)).toEqual(undefined);\n        });\n    });"
  },
  {
    "id" : "699b3a50-2f76-4be8-a308-180a4c9a5bc6",
    "prId" : 42374,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/42374#pullrequestreview-359135309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7495ccb4-f430-4a15-ba09-c257324bc94f",
        "parentId" : null,
        "authorId" : "247fcd83-82bb-4840-b708-348e3d7f9bca",
        "body" : "Not sure what the meaning of this test case is? It only creates spies but does nothing else",
        "createdAt" : "2020-02-14T17:55:31Z",
        "updatedAt" : "2020-02-14T17:57:08Z",
        "lastEditedBy" : "247fcd83-82bb-4840-b708-348e3d7f9bca",
        "tags" : [
        ]
      },
      {
        "id" : "00f0382a-f88b-4be2-91fd-e13f08be3986",
        "parentId" : "7495ccb4-f430-4a15-ba09-c257324bc94f",
        "authorId" : "955cc280-ad8d-40ba-ade8-ed488d30e8a9",
        "body" : "Meaning of the test case is to give a compile error if resolveTo() is removed from typings. Remember the tests are for the typings, not for the jasmine library (at least this is my informed guess by looking at existing tests). The exact same set of tests are there for and.returnValue().\r\n\r\nGoal here was to be roughly consistent with the tests for and.returnValue, so unless you want to turn this into \"refactor tests\", I'd leave it as-is.",
        "createdAt" : "2020-02-14T18:28:48Z",
        "updatedAt" : "2020-02-14T18:28:48Z",
        "lastEditedBy" : "955cc280-ad8d-40ba-ade8-ed488d30e8a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b41d83247ad0a682489809f310885c84ace43672",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +511,515 @@    it(\"verifies return value type\", () => {\n        spyOn(foo, \"getAsyncBar\").and.resolveTo(745);\n        spyOn(foo, \"getAsyncBar\").and.resolveTo(\"42\"); // Is an error with TS 3.1+ typings.\n    });\n"
  },
  {
    "id" : "3fd12544-3b7c-45cd-ad80-b8db401f3345",
    "prId" : 42374,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/42374#pullrequestreview-359135934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2610783d-e327-41e2-a885-88c1ca0efc21",
        "parentId" : null,
        "authorId" : "247fcd83-82bb-4840-b708-348e3d7f9bca",
        "body" : "Please use\r\n```\r\nconst foo = jasmine.createSpyObj(['getAsyncBar']);\r\nfoo.getAsyncBar.and.resolveTo(bar);\r\n```\r\n\r\nPlus: I would prefer more useful names than foo and bar ;-)",
        "createdAt" : "2020-02-14T17:56:11Z",
        "updatedAt" : "2020-02-14T17:57:08Z",
        "lastEditedBy" : "247fcd83-82bb-4840-b708-348e3d7f9bca",
        "tags" : [
        ]
      },
      {
        "id" : "1c50276c-1dc3-4255-a919-fea9c8dbc5de",
        "parentId" : "2610783d-e327-41e2-a885-88c1ca0efc21",
        "authorId" : "955cc280-ad8d-40ba-ade8-ed488d30e8a9",
        "body" : "I might prefer useful names too, but we got a bunch of foo bar everywhere and I'd stick to the existing conventions.\r\n\r\nAlso, createSpyObj gets us an \"any\". If you look at the TypeScript 3.1 tests, they're similar, and there you're going to hit a problem because .and.resolveTo should work only for functions returning a Promise. I find valuable that the tests are the same, but differ only in the extra typings support that highlights the difference.",
        "createdAt" : "2020-02-14T18:29:52Z",
        "updatedAt" : "2020-02-14T18:39:09Z",
        "lastEditedBy" : "955cc280-ad8d-40ba-ade8-ed488d30e8a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b41d83247ad0a682489809f310885c84ace43672",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +503,507 @@describe(\"A spy, when configured to fake a promised return value\", () => {\n    const bar = 10;\n    const foo = {\n        getAsyncBar: () => {\n            return Promise.resolve(bar);"
  }
]