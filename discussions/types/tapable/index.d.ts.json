[
  {
    "id" : "67d75f4a-a4fe-4759-a1e2-b5f897d6891e",
    "prId" : 24092,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24092#pullrequestreview-101753158",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fca24177-e233-4880-a502-93f6088526b4",
        "parentId" : null,
        "authorId" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "body" : "Mentioning @e-cloud for review.",
        "createdAt" : "2018-03-06T23:08:15Z",
        "updatedAt" : "2018-03-07T01:19:58Z",
        "lastEditedBy" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "tags" : [
        ]
      }
    ],
    "commit" : "81514fb7bc9263497e94eb4b726f495bf7bcf564",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1,5 @@// Type definitions for tapable v1.0.0\n// Project: https://github.com/webpack/tapable.git\n// Definitions by: e-cloud <https://github.com/e-cloud>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.3"
  },
  {
    "id" : "d73b79a2-373d-4ce9-9780-66fa99b68fd3",
    "prId" : 24092,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24092#pullrequestreview-101961516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1570c85-a99b-43cf-8ce1-cb7cb8b94836",
        "parentId" : null,
        "authorId" : "01e461e7-0879-4481-94a6-957ca6878bad",
        "body" : "why you need to default to `any`? ",
        "createdAt" : "2018-03-07T01:39:56Z",
        "updatedAt" : "2018-03-07T01:41:53Z",
        "lastEditedBy" : "01e461e7-0879-4481-94a6-957ca6878bad",
        "tags" : [
        ]
      },
      {
        "id" : "fdeb0a0d-6bf9-4e60-bf21-63e165c545dc",
        "parentId" : "f1570c85-a99b-43cf-8ce1-cb7cb8b94836",
        "authorId" : "6727fdaf-7474-458b-b858-976cb481e92a",
        "body" : "I'm definitely looking for suggestions here because I think I might have gotten in over my head a bit, but here's my line of reasoning on this:\r\n\r\nTake this set of hooks as a sample: https://github.com/webpack/webpack/blob/8a59ef79b3124f76cbc6b19f19b2276f06178b6d/lib/Compiler.js#L29\r\n```javascript\r\nshouldEmit: new SyncBailHook([\"compilation\"]),\r\ndone: new AsyncSeriesHook([\"stats\"]),\r\nadditionalPass: new AsyncSeriesHook([]),\r\nbeforeRun: new AsyncSeriesHook([\"compilation\"]),\r\nrun: new AsyncSeriesHook([\"compilation\"]),\r\nemit: new AsyncSeriesHook([\"compilation\"]),\r\nafterEmit: new AsyncSeriesHook([\"compilation\"]),\r\nthisCompilation: new SyncHook([\"compilation\", \"params\"]),\r\ncompilation: new SyncHook([\"compilation\", \"params\"]),\r\nnormalModuleFactory: new SyncHook([\"normalModuleFactory\"]),\r\ncontextModuleFactory: new SyncHook([\"contextModulefactory\"]),\r\nbeforeCompile: new AsyncSeriesHook([\"params\"]),\r\ncompile: new SyncHook([\"params\"]),\r\nmake: new AsyncParallelHook([\"compilation\"]),\r\nafterCompile: new AsyncSeriesHook([\"compilation\"]),\r\nwatchRun: new AsyncSeriesHook([\"compiler\"]),\r\nfailed: new SyncHook([\"error\"]),\r\ninvalid: new SyncHook([\"filename\", \"changeTime\"]),\r\nwatchClose: new SyncHook([]),\r\n```\r\nYou can see that each hook accepts a different number of parameters... (The max I've seen in the source has been 3, I figured I would start with that many..\r\n\r\nI wanted a way to strongly type the callback fns for these hooks, but from what I've been reading theres no way to do this right now.\r\n (https://github.com/Microsoft/TypeScript/issues/5453)\r\n\r\nBy defining Hook as I have, I was able to define these hooks like so:\r\n\r\n```typescript\r\nadditionalPass: AsyncSeriesHook;\r\nbeforeRun: AsyncSeriesHook<Compilation>;\r\nrun: AsyncSeriesHook<Compilation>;\r\nemit: AsyncSeriesHook<Compilation>;\r\nafterEmit: AsyncSeriesHook<Compilation>;\r\nthisCompilation: SyncHook<Compilation, { normalModuleFactory: NormalModuleFactory }>;\r\ncompilation: SyncHook<Compilation, { normalModuleFactory: NormalModuleFactory }>;\r\nnormalModuleFactory: SyncHook<NormalModuleFactory>;\r\n```\r\n\r\nAnd then when I tap the hook, the parameters are strongly typed. In this example:\r\n```\r\ncompiler.hooks.compilation.tap(\r\n    \"DllEntryPlugin\",\r\n    (compilation, { normalModuleFactory }) => {\r\n        const dllModuleFactory = new DllModuleFactory();\r\n        compilation.dependencyFactories.set(\r\n            DllEntryDependency,\r\n            dllModuleFactory\r\n        );\r\n    }\r\n);\r\n```\r\n\r\nThe callback signature is equivalent to:\r\n```typescript\r\n(compilation: webpack.compilation.Compilation, { normalModuleFactory: webpack.compilation.NormalModuleFactory })\r\n```\r\n\r\nI really hope that makes sense... I'm kinda struggling with this.",
        "createdAt" : "2018-03-07T01:55:58Z",
        "updatedAt" : "2018-03-07T01:55:58Z",
        "lastEditedBy" : "6727fdaf-7474-458b-b858-976cb481e92a",
        "tags" : [
        ]
      },
      {
        "id" : "0656d56a-4293-4cb1-a390-bfd0e8b913a1",
        "parentId" : "f1570c85-a99b-43cf-8ce1-cb7cb8b94836",
        "authorId" : "01e461e7-0879-4481-94a6-957ca6878bad",
        "body" : "thanks for explaining. Makes sense\r\n\r\nOverall I feel Webpack source is a good candidate for TypeScriptification. Not sure how open @sokra and @TheLarkInn are to this idea! I love to help type the code.",
        "createdAt" : "2018-03-07T01:59:33Z",
        "updatedAt" : "2018-03-07T01:59:33Z",
        "lastEditedBy" : "01e461e7-0879-4481-94a6-957ca6878bad",
        "tags" : [
        ]
      },
      {
        "id" : "9c05c393-890e-4474-ac7a-dc9bbd220ac5",
        "parentId" : "f1570c85-a99b-43cf-8ce1-cb7cb8b94836",
        "authorId" : "6727fdaf-7474-458b-b858-976cb481e92a",
        "body" : "That would be the most ideal thing!",
        "createdAt" : "2018-03-07T15:04:19Z",
        "updatedAt" : "2018-03-07T15:04:19Z",
        "lastEditedBy" : "6727fdaf-7474-458b-b858-976cb481e92a",
        "tags" : [
        ]
      }
    ],
    "commit" : "81514fb7bc9263497e94eb4b726f495bf7bcf564",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +242,246 @@}\n\nexport class Hook<T1 = any, T2 = any, T3 = any> {\n    constructor(...args: any[]);\n    taps: any[];"
  }
]