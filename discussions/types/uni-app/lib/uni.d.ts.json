[
  {
    "id" : "8cc8584b-2e6c-4510-83ec-bddfd8327fef",
    "prId" : 45067,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45067#pullrequestreview-421396198",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c15320ae-8db6-4d45-872f-a6004e0388fc",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "What's the purpose of this empty interface?",
        "createdAt" : "2020-05-27T21:35:03Z",
        "updatedAt" : "2020-05-27T21:35:06Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "11806fbf-ce9d-45ec-b343-5778db235907",
        "parentId" : "c15320ae-8db6-4d45-872f-a6004e0388fc",
        "authorId" : "bad51621-1561-4c49-bd57-44a3759cc449",
        "body" : "[Doc](https://uniapp.dcloud.io/api/canvas/CanvasContext?id=canvascontextcreatepattern)\r\n\r\nBelow is the example code I copy from the doc of uni-app.\r\n```js\r\nconst ctx = uni.createCanvasContext('myCanvas')\r\nconst pattern = ctx.createPattern('/path/to/image', 'repeat-x')\r\nctx.fillStyle = pattern\r\nctx.fillRect(0, 0, 300, 150)\r\nctx.draw()\r\n```\r\nWe can get the `CanvasPattern` object by calling `uni.createCanvasContext`, and assign it to `ctx.fillStyle`. The `CanvasPattern` has no public props or methods and could only obtian from calling `uni.createCanvasContext`. We could not assign an any object (`{}`) to `ctx.fillStyle`.\r\n\r\nIt's somewhat like the `WebGLObject` definition in \"lib.dom.d.ts\"\r\n```ts\r\ninterface WebGLObject {\r\n}\r\n```\r\nNo public props or methods, but it is special.\r\n\r\nPlease forgive my pool english.",
        "createdAt" : "2020-05-28T02:50:16Z",
        "updatedAt" : "2020-05-28T02:50:16Z",
        "lastEditedBy" : "bad51621-1561-4c49-bd57-44a3759cc449",
        "tags" : [
        ]
      },
      {
        "id" : "c00cbd8a-6f46-4ad1-8750-6c7d840793d8",
        "parentId" : "c15320ae-8db6-4d45-872f-a6004e0388fc",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "I think an easy approximation to the behavior you want would be to use `object` (e.g. `type CanvasPattern = object`).  A fancier version might be a class with private field (e.g. `image` and `repetition`).",
        "createdAt" : "2020-05-29T00:25:48Z",
        "updatedAt" : "2020-05-29T00:25:49Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "349c086f-16a0-41c7-a47a-71b1e706e3f6",
        "parentId" : "c15320ae-8db6-4d45-872f-a6004e0388fc",
        "authorId" : "bad51621-1561-4c49-bd57-44a3759cc449",
        "body" : "Before I added the disable-check comment, I searched a lot for a workaround, but none of them met my needs.\r\n\r\n1. Use the `type` keyword\r\n\r\n As the TS [doc](https://www.typescriptlang.org/docs/handbook/advanced-types.html#interfaces-vs-type-aliases) says\r\n> Type aliases donâ€™t create a new name â€” for instance, error messages wonâ€™t use the alias name. ... **hovering over interfaced in an editor will show that it returns an Interface, but will show that aliased returns object literal type**.\r\n\r\nThis is not what I expected. I wrote these types to get a pretty clear code IntelliSense. If the IntelliSense shows that `CanvasContext.fillStyle` could pass an `object` value, it may misguide users.\r\n\r\n2. Use private field\r\n\r\nI don't really like this hack-like approach. \r\nMoreover, the type `CanvasGradient` does have a public method, thus it could be an `interface`. I don't like to have an **interface** `CanvasGradient` but a **class** `CanvasPattern`.\r\n\r\n3. I also read tricks on https://github.com/microsoft/TypeScript/issues/202 but I think it's \r\nnot worth introducing those extra complexity to solve this problem which can be solved using a simple empty interface.\r\n\r\n4. I think it's proper to use an empty interface in this case because I have found a lot of similar cases in the standard  library `lib.dom.d.ts`.",
        "createdAt" : "2020-05-29T14:37:25Z",
        "updatedAt" : "2020-05-29T16:20:07Z",
        "lastEditedBy" : "bad51621-1561-4c49-bd57-44a3759cc449",
        "tags" : [
        ]
      },
      {
        "id" : "bba0bc7d-8efb-4069-8059-6fb183740e06",
        "parentId" : "c15320ae-8db6-4d45-872f-a6004e0388fc",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "While I'm pretty sure that type aliases do appear in intellisense, I assume you've tested out the experience and confirmed that the empty interface works better in some scenarios.\r\n\r\nI'm not sure the private field approach is a \"hack\" since the underlying library does appear to [declare ](https://github.com/dcloudio/uni-app/blob/1de259ec9eebd1d41951d0b8ffc985b6c2e9dd4f/src/core/service/api/context/canvas.js#L242)the type as a class with two private fields.\r\n\r\nNote that an empty interface provides little type safety beyond using `any` - it mostly makes tool tips more readable.",
        "createdAt" : "2020-05-29T18:12:14Z",
        "updatedAt" : "2020-05-29T18:12:15Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "2ba5cb9f-0ccb-4c49-9a54-1021cc72077d",
        "parentId" : "c15320ae-8db6-4d45-872f-a6004e0388fc",
        "authorId" : "bad51621-1561-4c49-bd57-44a3759cc449",
        "body" : "> While I'm pretty sure that type aliases do appear in intellisense, I assume you've tested out the experience and confirmed that the empty interface works better in some scenarios.\r\n\r\nType aliases do appear in intellisense while they denote a \"not so complicate\" type.\r\n\r\nSee following cases:\r\n```typescript\r\ntype TA = object;\r\nlet a: TA; // when hover, shows 'let a: object'\r\n\r\ntype TB = () => object;\r\nlet b: TB; // when hover, shows 'let b: TB'\r\n\r\nlet c: TA | TB; // when hover, shows 'let c: object | TB'\r\n```\r\n\r\n> I'm not sure the private field approach is a \"hack\" since the underlying library does appear to declare the type as a class with two private fields.\r\n\r\n[Uniapp](https://uniapp.dcloud.io/README) is a cross-platform framework. Code built with uniapp runs not only on browser but also on several different miniprogram platforms. While the underlying library which is just the runtime for browser uses a class as implementation, it may be different in other runtimes which are not open source.\r\n\r\nThanks for your approval. ðŸ˜€",
        "createdAt" : "2020-05-30T10:41:02Z",
        "updatedAt" : "2020-05-30T10:41:03Z",
        "lastEditedBy" : "bad51621-1561-4c49-bd57-44a3759cc449",
        "tags" : [
        ]
      }
    ],
    "commit" : "33df4d0022779857a165ab5ded153d7848aa59bd",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +5490,5494 @@}\n\n// tslint:disable-next-line no-empty-interface\ninterface CanvasPattern {\n}"
  }
]