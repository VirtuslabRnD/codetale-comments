[
  {
    "id" : "2544ba75-db4e-43fb-8ec0-fad47e477c29",
    "prId" : 45205,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45205#pullrequestreview-422268228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d9b612e-9e45-4ee2-8834-aeb428a1c071",
        "parentId" : null,
        "authorId" : "64552b51-af57-448f-947e-8c81d1c0915c",
        "body" : "üëç on doc comments, it would be great to get better coverage on this, given how broken up all the AWS documentation is, so adding it on the go is nice, though at least having \"Event for ...\" etc vs \"Works with\" would read a little less weird in isolation.",
        "createdAt" : "2020-06-01T23:41:47Z",
        "updatedAt" : "2020-06-02T00:28:35Z",
        "lastEditedBy" : "64552b51-af57-448f-947e-8c81d1c0915c",
        "tags" : [
        ]
      },
      {
        "id" : "111261b7-e5c2-4d9a-982c-75b0be6d2752",
        "parentId" : "7d9b612e-9e45-4ee2-8834-aeb428a1c071",
        "authorId" : "84922a72-b601-4b33-b327-85bd8a6ad785",
        "body" : "What's your suggestion?",
        "createdAt" : "2020-06-02T00:32:37Z",
        "updatedAt" : "2020-06-02T00:32:38Z",
        "lastEditedBy" : "84922a72-b601-4b33-b327-85bd8a6ad785",
        "tags" : [
        ]
      },
      {
        "id" : "56568fe8-be09-4e2b-a437-a9cf0eb3c685",
        "parentId" : "7d9b612e-9e45-4ee2-8834-aeb428a1c071",
        "authorId" : "64552b51-af57-448f-947e-8c81d1c0915c",
        "body" : "As mentioned, replace the generic \"Works with\" with \"Event for\" / \"Result for\" etc., which has the same information, but the paragraph is now a description of the documented type, which is what doc comments are for.",
        "createdAt" : "2020-06-02T00:36:12Z",
        "updatedAt" : "2020-06-02T00:36:12Z",
        "lastEditedBy" : "64552b51-af57-448f-947e-8c81d1c0915c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e8880a7d1c7ba29f8c52fa87c41dcbb4611e0c0",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +30,34 @@ * Works with Lambda Proxy Integration for Rest API or HTTP API integration Payload Format version 1.0\n * @see - https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html\n */\nexport type APIGatewayProxyEvent = APIGatewayProxyEventBase<APIGatewayEventDefaultAuthorizerContext>;\n"
  },
  {
    "id" : "9087ca8f-6ac2-4df4-a7e4-42912570604f",
    "prId" : 45205,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45205#pullrequestreview-422276645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9069958-982f-4e24-b4b2-5b143f4e5dc0",
        "parentId" : null,
        "authorId" : "64552b51-af57-448f-947e-8c81d1c0915c",
        "body" : "Isn't this `APIGatewayEventRequestContextWithAuthorizer<TAuthorizerContext>`? I don't think they changed anything in there....\r\nGetting the authorizer stuff right is particularly messy, as you can probably tell from all the types...",
        "createdAt" : "2020-06-01T23:46:59Z",
        "updatedAt" : "2020-06-02T00:28:35Z",
        "lastEditedBy" : "64552b51-af57-448f-947e-8c81d1c0915c",
        "tags" : [
        ]
      },
      {
        "id" : "5d1931e9-2ef6-4c08-a627-05b8390b0481",
        "parentId" : "a9069958-982f-4e24-b4b2-5b143f4e5dc0",
        "authorId" : "84922a72-b601-4b33-b327-85bd8a6ad785",
        "body" : "No. This is significantly different. For example, v1 has `identity` in `requestContext`, which doesn't exist in v2. Similarly, v2 has `http` in `requestContext` which doesn't exist in v1.",
        "createdAt" : "2020-06-02T01:04:08Z",
        "updatedAt" : "2020-06-02T01:04:08Z",
        "lastEditedBy" : "84922a72-b601-4b33-b327-85bd8a6ad785",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e8880a7d1c7ba29f8c52fa87c41dcbb4611e0c0",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +128,132 @@        time: string;\n        timeEpoch: number;\n    };\n    body: string;\n    pathParameters: { [name: string]: string };"
  },
  {
    "id" : "f871f589-cc79-4731-ba3a-817fbb7a30ba",
    "prId" : 45205,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45205#pullrequestreview-422278793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ccbca39-d515-4864-8f12-2ba7954f98fe",
        "parentId" : null,
        "authorId" : "64552b51-af57-448f-947e-8c81d1c0915c",
        "body" : "AWS document that you can also return the body to be JSONed, or the JSON string to use as the body, but not sure it's worth the loss of typing? Possibly this is `APIGatewayProxyV2StrictEvent`, and `type APIGatewayProxyV2Event = unknown | string | APIGatewayProxyV2StrictEvent`, which I believe will still give completion, but no type checking.",
        "createdAt" : "2020-06-01T23:49:48Z",
        "updatedAt" : "2020-06-02T00:28:35Z",
        "lastEditedBy" : "64552b51-af57-448f-947e-8c81d1c0915c",
        "tags" : [
        ]
      },
      {
        "id" : "c341f7e5-d993-43fd-bde4-e61815538e69",
        "parentId" : "1ccbca39-d515-4864-8f12-2ba7954f98fe",
        "authorId" : "84922a72-b601-4b33-b327-85bd8a6ad785",
        "body" : "Unlike v1, v2 is smart enough to automatically detect JSON or text and add appropriate `Content-Type` header. No longer need to stringify a JSON object.",
        "createdAt" : "2020-06-02T00:22:33Z",
        "updatedAt" : "2020-06-02T00:28:35Z",
        "lastEditedBy" : "84922a72-b601-4b33-b327-85bd8a6ad785",
        "tags" : [
        ]
      },
      {
        "id" : "3ddcef9a-4d16-4cd4-8628-a8684ba3fffc",
        "parentId" : "1ccbca39-d515-4864-8f12-2ba7954f98fe",
        "authorId" : "64552b51-af57-448f-947e-8c81d1c0915c",
        "body" : "You may be misreading the doc page? There's at least no example of returning an object in `body` property, only of directly returning the object, returning the string (which is assumed to be JSON) or returning this type.",
        "createdAt" : "2020-06-02T00:29:12Z",
        "updatedAt" : "2020-06-02T00:29:12Z",
        "lastEditedBy" : "64552b51-af57-448f-947e-8c81d1c0915c",
        "tags" : [
        ]
      },
      {
        "id" : "1dc7d1e0-8e62-4461-aa60-e5fe71fbc7fc",
        "parentId" : "1ccbca39-d515-4864-8f12-2ba7954f98fe",
        "authorId" : "84922a72-b601-4b33-b327-85bd8a6ad785",
        "body" : "I am not sure if I understood you, but I've tested it myself. Here are the results:\r\n\r\n- If I assign string to `body`, it infers `statusCode` as `200` and sets the `Content-Type` to `text/plain; charset=utf-8` even if the body content was output of `JSON.stringify()`.\r\n\r\n- If I assign an object to `body` (without doing `JSON.stringify()`), it infers `statusCode` as `200` and sets `Content-Type` to `application/json`.\r\n\r\n- If I assign boolean, number, null, undefined to `body` without `statusCode`, it misbehaves by returning the whole result object with `Content-Type` set to `application/json`.\r\n\r\n- If I assign boolean, number, null, undefined to `body` with `statusCode`, content is returned as text with `Content-Type` set to `text/plain; charset=utf-8`.",
        "createdAt" : "2020-06-02T00:57:14Z",
        "updatedAt" : "2020-06-02T00:57:14Z",
        "lastEditedBy" : "84922a72-b601-4b33-b327-85bd8a6ad785",
        "tags" : [
        ]
      },
      {
        "id" : "2779dacd-70f5-4cf2-8449-032fd18b2f5f",
        "parentId" : "1ccbca39-d515-4864-8f12-2ba7954f98fe",
        "authorId" : "64552b51-af57-448f-947e-8c81d1c0915c",
        "body" : "Thanks for testing that, and it's nice to know, but the documentation claims in the \"Lambda function response for format 2.0\" section that you can return a JSON string or object directly, instead of as a body property, and it will interpret it as the `body` property of a JSON response, stringifying it if it is not a string - that's what I was referring to.\r\n\r\nSince you can directly return the body value now, unrelated to the above issue, I'd like a way to type the `body` property e.g. `APIGatewayProxyResultV2<MyHttpJsonBody>`, but it's hard to cleanly make `body` required only if you provide a type parameter. Take a stab if you like, but not a priority.",
        "createdAt" : "2020-06-02T01:11:47Z",
        "updatedAt" : "2020-06-02T01:11:47Z",
        "lastEditedBy" : "64552b51-af57-448f-947e-8c81d1c0915c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e8880a7d1c7ba29f8c52fa87c41dcbb4611e0c0",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +147,151 @@    isBase64Encoded?: boolean;\n    cookies?: string[];\n}\n\n// Legacy names"
  },
  {
    "id" : "8dc7165c-7108-4cb8-a6f0-0e8f4b560be0",
    "prId" : 45205,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45205#pullrequestreview-422249994",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0366e6f0-c230-49e4-bfaa-ebc5b7b2d3f8",
        "parentId" : null,
        "authorId" : "64552b51-af57-448f-947e-8c81d1c0915c",
        "body" : "I think these names should be `APIGatewayProxyV2*`, not `APIGatewayProxy*V2` to follow the pattern of \"`FooHandler = Handler<FooEvent, FooResult>`, but I don't think there's any direct example of a v2 in this package beforehand so I'm happy to have this establish that semantically it's the whole set of types that are v2, not just its another set of types that happen to be v2 of existing ones... if that made any sense. Feedback welcomed!",
        "createdAt" : "2020-06-01T23:55:29Z",
        "updatedAt" : "2020-06-02T00:28:35Z",
        "lastEditedBy" : "64552b51-af57-448f-947e-8c81d1c0915c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e8880a7d1c7ba29f8c52fa87c41dcbb4611e0c0",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +20,24 @@ * @see - https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html\n */\nexport type APIGatewayProxyHandlerV2 = Handler<APIGatewayProxyEventV2, APIGatewayProxyResultV2>;\n/**\n * Works with HTTP API integration Payload Format version 2.0"
  },
  {
    "id" : "59775587-b4f6-4f6e-9f4f-4683449d7f3e",
    "prId" : 45205,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45205#pullrequestreview-579844576",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d2f1577-0103-4610-b839-bc38ee324c69",
        "parentId" : null,
        "authorId" : "4f2106f2-ac1a-45f9-a66f-5b99210098e0",
        "body" : "Is it possible that this should be `string | number | boolean | string[]` ?\r\n\r\nThis is what Cognito claims looks like in my test.",
        "createdAt" : "2020-06-05T21:42:52Z",
        "updatedAt" : "2020-06-05T21:42:52Z",
        "lastEditedBy" : "4f2106f2-ac1a-45f9-a66f-5b99210098e0",
        "tags" : [
        ]
      },
      {
        "id" : "5d0092ff-2a48-4cb1-bbdc-785b760b03fa",
        "parentId" : "4d2f1577-0103-4610-b839-bc38ee324c69",
        "authorId" : "84922a72-b601-4b33-b327-85bd8a6ad785",
        "body" : "Yeah. Given that JWT specification allows string, array, boolean and integer as value of custom claims (which gets base64 encoded), it's only fitting that Lambda event supports them.\r\n\r\nThis PR has already been merged. Would you like to open a new PR?",
        "createdAt" : "2020-06-05T22:06:34Z",
        "updatedAt" : "2020-06-05T22:06:34Z",
        "lastEditedBy" : "84922a72-b601-4b33-b327-85bd8a6ad785",
        "tags" : [
        ]
      },
      {
        "id" : "54bbb5e1-4211-460f-8fb3-4f9714ae0165",
        "parentId" : "4d2f1577-0103-4610-b839-bc38ee324c69",
        "authorId" : "4f2106f2-ac1a-45f9-a66f-5b99210098e0",
        "body" : "Created #45320",
        "createdAt" : "2020-06-05T22:14:52Z",
        "updatedAt" : "2020-06-05T22:14:53Z",
        "lastEditedBy" : "4f2106f2-ac1a-45f9-a66f-5b99210098e0",
        "tags" : [
        ]
      },
      {
        "id" : "3c07f4d3-f74c-437f-a079-dc1aa2f850a7",
        "parentId" : "4d2f1577-0103-4610-b839-bc38ee324c69",
        "authorId" : "ad01dea4-e04a-456e-9d99-492a3211d2e3",
        "body" : "Don't know why, but I don't see that top-level `jwt` inside authorizer. raised #50939 ",
        "createdAt" : "2021-01-31T01:10:39Z",
        "updatedAt" : "2021-01-31T01:10:39Z",
        "lastEditedBy" : "ad01dea4-e04a-456e-9d99-492a3211d2e3",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e8880a7d1c7ba29f8c52fa87c41dcbb4611e0c0",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +110,114 @@        authorizer: {\n            jwt: {\n                claims: { [name: string]: string };\n                scopes: string[];\n            };"
  },
  {
    "id" : "3da9fddb-a98b-40c1-84c2-e81af3bcaa39",
    "prId" : 45263,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45263#pullrequestreview-423973044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a795eacc-c733-4754-9929-85ef2434237c",
        "parentId" : null,
        "authorId" : "64552b51-af57-448f-947e-8c81d1c0915c",
        "body" : "Are the newly optional properties not provided only in the API tester? That's had the same sort of different behavior to the actual API before, and the existing payload effectively says that the tester is wrong (though mostly because of compatibility)",
        "createdAt" : "2020-06-03T20:28:27Z",
        "updatedAt" : "2020-06-03T21:10:22Z",
        "lastEditedBy" : "64552b51-af57-448f-947e-8c81d1c0915c",
        "tags" : [
        ]
      },
      {
        "id" : "e5f279d7-e3d9-4fda-8fa1-ffa6b387bd19",
        "parentId" : "a795eacc-c733-4754-9929-85ef2434237c",
        "authorId" : "84922a72-b601-4b33-b327-85bd8a6ad785",
        "body" : "Optional properties are not provided in real deployed API. For example, if cookies aren't sent with the http request, API Gateway v2 doesn't include `cookies` field in proxy lambda's event. I believe v1's event also needs to be checked for this.",
        "createdAt" : "2020-06-03T21:19:25Z",
        "updatedAt" : "2020-06-03T21:19:26Z",
        "lastEditedBy" : "84922a72-b601-4b33-b327-85bd8a6ad785",
        "tags" : [
        ]
      },
      {
        "id" : "7110cd85-fc96-4cea-b3a3-5b46075a360a",
        "parentId" : "a795eacc-c733-4754-9929-85ef2434237c",
        "authorId" : "64552b51-af57-448f-947e-8c81d1c0915c",
        "body" : "Unfortunately it's a bit late for V1 even if so, it would basically break every API lambda out there. An earlier PR to do so was reverted after (IMO valid) feedback. Possibly easier to stomach now with the conditional access operator though?",
        "createdAt" : "2020-06-03T22:10:40Z",
        "updatedAt" : "2020-06-03T22:10:41Z",
        "lastEditedBy" : "64552b51-af57-448f-947e-8c81d1c0915c",
        "tags" : [
        ]
      }
    ],
    "commit" : "52cb43bf6924c64886ac760ae9941a3780829d2f",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +130,134 @@        timeEpoch: number;\n    };\n    body?: string;\n    pathParameters?: { [name: string]: string };\n    isBase64Encoded: boolean;"
  }
]