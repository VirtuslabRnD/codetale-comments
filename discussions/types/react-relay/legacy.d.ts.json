[
  {
    "id" : "07443031-0e97-4752-9ddc-40bbf9edf553",
    "prId" : 51442,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/51442#pullrequestreview-605796323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "768eaca2-1a04-4742-bb54-2726b5410329",
        "parentId" : null,
        "authorId" : "1c778066-ded5-4d45-8557-e98a09a1e549",
        "body" : "@rbalicki2 can you just help me and check if this is correct? Struggling to understand the flow equivalent to this one",
        "createdAt" : "2021-03-06T10:42:03Z",
        "updatedAt" : "2021-03-13T02:21:10Z",
        "lastEditedBy" : "1c778066-ded5-4d45-8557-e98a09a1e549",
        "tags" : [
        ]
      },
      {
        "id" : "4afda305-a134-4def-9ebd-dad9b4b03c36",
        "parentId" : "768eaca2-1a04-4742-bb54-2726b5410329",
        "authorId" : "07e7e6e7-d286-45fa-923a-b2faebc5d802",
        "body" : "# Flow\r\n\r\nAs far as I can tell, Props2 = $RelayProps<Props1, RelayProp> is generating a new type which is like Props1, except:\r\n* Excluding `{relay: RelayProp}`, and\r\n* Mapping all remaining props which are generated GraphQLTaggedLiterals to the value of their $refType field (preserving things like nullability and whether it's an array), and\r\n* leaving all remaining props alone\r\n\r\nI think!\r\n\r\nSo, it is used in e.g. `createContainerWithProps` to create a new component type (Component2) to which you pass Props2, i.e.:\r\n\r\n* don't pass `relay`\r\n* pass `$key` types (e.g. FooFragment_user$key, I think)\r\n\r\nAnd which reverses this, i.e. adds `relay` and looks up fragments by their ref (via RelayModernFragmentSpecResolver), and calls `Component1` with `Props1`.\r\n\r\n# Typescript\r\n\r\nThat looks like what is happening in Typescript as well, but it's hard to be entirely sure.\r\n\r\nMaybe it would be good to check whether all props are correctly mapped? e.g. making sure that all `FragmentOrRegularProp` matches the behavior of $RelayProps.\r\n\r\nIn particular, I would make sure that if the array is nullable, FragmentOrRegularProp applies. That seems to not be covered by FragmentOrRegularProp. But it's not clear!\r\n\r\nSee this: https://www.typescriptlang.org/play?#code/FAFwngDgpgBAgjAvDA3gQwFwxAJwK5QC+A3MKJLAEJLwwA+MAbgPYCWAJqedDAMIA8AFQB8NQTCgAPEFAB27AM60A-KlYLMMWXgC2AIyg5CMLCnV6s2-YZJlwPACI0BlYVwD07mE4UALZngANuwwAMaBUGg4gWASrCC+hjAGahqWugZGMMw4qRZaGTYANMl4IDDxAORKeswJysp2FDAAojQAFAgMLBwAlBLScooq2PiwWABmaIEKUKRAA\r\nType E seems to indicate that A | void doesn't extend A, but Typescript gets confused with type D.\r\n\r\nNullable arrays don't show up in Relay, though, so I think you're probably good.\r\n\r\n# Conclusion\r\n\r\nDid this work previously, with no complaints? If this is broken, it seems like it would have tripped someone else up.\r\n\r\nI would land this, and maybe add some tests as a follow up?",
        "createdAt" : "2021-03-06T23:40:29Z",
        "updatedAt" : "2021-03-13T02:21:10Z",
        "lastEditedBy" : "07e7e6e7-d286-45fa-923a-b2faebc5d802",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bb79e8a18249b0ddbe0a62ae01f8828f0efc7c8",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +79,83 @@\nexport type ContainerProps<Props> = MappedFragmentProps<Pick<Props, Exclude<keyof Props, 'relay'>>>;\nexport type RelayProps<Props> = ContainerProps<Props>; // TODO: validate this\nexport type Container<Props> = React.ComponentType<ContainerProps<Props> & { componentRef?: (ref: any) => void }>;\n"
  },
  {
    "id" : "97d87d40-08e7-46bf-a531-a3cc967c45cb",
    "prId" : 51442,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/51442#pullrequestreview-617804224",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7be78276-8b1f-4090-b1b4-18559c2c3cc9",
        "parentId" : null,
        "authorId" : "e2db1206-6b42-4ea5-bd15-4da0e96cc882",
        "body" : "@rbalicki2 it looks like in previous versions of `@types/react-relay`, index.d.ts re-exported the concrete `Environment` from relay-runtime. See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/4c251988d62d2f0d7bdbb5b2fcf2d7570f2d1da7/types/react-relay/index.d.ts#L80\r\n\r\nWas it intended for this to change in `react-relay/legacy`? Is it expected to be a type error when a function's argument is typed as `Environment` imported from `relay-runtime` and is passed a relay environment typed as  `Environment` imported from `react-relay/legacy` (or `react-relay`)?\r\n\r\n```\r\nArgument of type 'Environment' is not assignable to parameter of type 'RelayModernEnvironment'.\r\n  Type 'Environment' is missing the following properties from type 'RelayModernEnvironment': configName, revertUpdate, replaceUpdate\r\n```",
        "createdAt" : "2021-03-22T17:33:33Z",
        "updatedAt" : "2021-03-22T17:33:33Z",
        "lastEditedBy" : "e2db1206-6b42-4ea5-bd15-4da0e96cc882",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bb79e8a18249b0ddbe0a62ae01f8828f0efc7c8",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@    Disposable,\n    // RelayRuntime has two environment exports: one interface, one concrete.\n    IEnvironment as Environment,\n    GraphQLTaggedNode,\n    MutationType,"
  }
]