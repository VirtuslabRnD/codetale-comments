[
  {
    "id" : "adf09815-73f9-44e4-80ca-7a4811b63489",
    "prId" : 29836,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/29836#pullrequestreview-169713237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82791781-1078-4988-b98a-481dd65b3f00",
        "parentId" : null,
        "authorId" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "body" : "`RDF.NamedNode`",
        "createdAt" : "2018-10-20T15:00:34Z",
        "updatedAt" : "2018-10-30T10:49:28Z",
        "lastEditedBy" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "tags" : [
        ]
      },
      {
        "id" : "83425bf6-f9af-4e27-a67d-b40c03096bcf",
        "parentId" : "82791781-1078-4988-b98a-481dd65b3f00",
        "authorId" : "4c8489d9-5c1e-43a0-96ac-ab841f11ffea",
        "body" : "This datatype is part of the return value of the `literal` function in the factory. The N3 factory returns a n3 NamedNode. Any reason why you'd like this on to be of type `RDF.NamedNode`?",
        "createdAt" : "2018-10-21T19:17:29Z",
        "updatedAt" : "2018-10-30T10:49:28Z",
        "lastEditedBy" : "4c8489d9-5c1e-43a0-96ac-ab841f11ffea",
        "tags" : [
        ]
      },
      {
        "id" : "fbf03056-b5e6-4421-a935-982182660ee0",
        "parentId" : "82791781-1078-4988-b98a-481dd65b3f00",
        "authorId" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "body" : "The reason is because `literal` in the datafactory should also take an `RDF. NamedNode` as datatype argument. This is because any kind of named node should be allowed to define the datatype, not only those that were created by N3.",
        "createdAt" : "2018-10-24T21:29:01Z",
        "updatedAt" : "2018-10-30T10:49:28Z",
        "lastEditedBy" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "tags" : [
        ]
      },
      {
        "id" : "103d1a35-b7a0-4b6d-b815-fd024cbfa02c",
        "parentId" : "82791781-1078-4988-b98a-481dd65b3f00",
        "authorId" : "4c8489d9-5c1e-43a0-96ac-ab841f11ffea",
        "body" : "afaik the literal function would _always_ return a an N3 NamedNode (see https://github.com/rdfjs/N3.js/blob/master/lib/N3DataFactory.js#L279 , where if the datatype is a `RDF.NamedNode` it would be re-instantiated as a new N3.NamedNode).\r\n~Looking at this, I think the datatype input argument of the `literal` datafactory function should be changed from N3.NamedNode to RDF.NamedNode~ (done)",
        "createdAt" : "2018-10-25T07:33:08Z",
        "updatedAt" : "2018-10-30T10:49:28Z",
        "lastEditedBy" : "4c8489d9-5c1e-43a0-96ac-ab841f11ffea",
        "tags" : [
        ]
      },
      {
        "id" : "ca84ae72-1700-475b-a55b-15282a2b2dc5",
        "parentId" : "82791781-1078-4988-b98a-481dd65b3f00",
        "authorId" : "4c8489d9-5c1e-43a0-96ac-ab841f11ffea",
        "body" : "I'm assuming this is resolved? To clarify: this is the typing of the N3 Literal, which is created by the N3 datafactory. As a result, it'll always have a N3 NamedNode as datatype",
        "createdAt" : "2018-10-30T10:51:49Z",
        "updatedAt" : "2018-10-30T10:51:49Z",
        "lastEditedBy" : "4c8489d9-5c1e-43a0-96ac-ab841f11ffea",
        "tags" : [
        ]
      },
      {
        "id" : "21142d26-8033-439f-9252-ab071fb30aeb",
        "parentId" : "82791781-1078-4988-b98a-481dd65b3f00",
        "authorId" : "4c8489d9-5c1e-43a0-96ac-ab841f11ffea",
        "body" : "A, missed your :+1:  here. Considering it resolved ;)",
        "createdAt" : "2018-10-30T10:55:44Z",
        "updatedAt" : "2018-10-30T10:55:45Z",
        "lastEditedBy" : "4c8489d9-5c1e-43a0-96ac-ab841f11ffea",
        "tags" : [
        ]
      }
    ],
    "commit" : "107bde0f830659e6beda84a23168b7bb863b8717",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +61,65 @@    static subclass(type: any): void;\n    language: string;\n    datatype: NamedNode;\n    datatypeString: string;\n    constructor(id: string);"
  },
  {
    "id" : "302b0ff7-09e4-4474-8f4e-216ba624a9f9",
    "prId" : 29836,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/29836#pullrequestreview-166751993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22c112d1-d930-45a0-b6f1-218d439dface",
        "parentId" : null,
        "authorId" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "body" : "Same comment here as in the RDFJS typings. The N3 implementation doesn't restrict the term type for S, P, O and G. So the typings should also allow any term type to be used for triple/quad components.",
        "createdAt" : "2018-10-20T15:02:04Z",
        "updatedAt" : "2018-10-30T10:49:28Z",
        "lastEditedBy" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "tags" : [
        ]
      }
    ],
    "commit" : "107bde0f830659e6beda84a23168b7bb863b8717",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +76,80 @@}\n\nexport type Quad_Subject = NamedNode | BlankNode | Variable;\nexport type Quad_Predicate = NamedNode | Variable;\nexport type Quad_Object = NamedNode | Literal | BlankNode | Variable;"
  },
  {
    "id" : "bea57034-fac0-4b2c-a079-8619ca800c66",
    "prId" : 29836,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/29836#pullrequestreview-166751993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab616c8a-437f-4a86-8b30-79e875919321",
        "parentId" : null,
        "authorId" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "body" : "Same comment here regarding I/O types.",
        "createdAt" : "2018-10-20T15:04:50Z",
        "updatedAt" : "2018-10-30T10:49:28Z",
        "lastEditedBy" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "tags" : [
        ]
      }
    ],
    "commit" : "107bde0f830659e6beda84a23168b7bb863b8717",
    "line" : 298,
    "diffHunk" : "@@ -1,1 +233,237 @@    remove(stream: stream.Stream): EventEmitter;\n}\nexport interface StoreConstructor {\n  new<Q_RDF extends RDF.BaseQuad = RDF.Quad, Q_N3 extends BaseQuad = Quad> (triples?: Q_RDF[], options?: StoreOptions): N3Store<Q_RDF, Q_N3>;\n  <Q_RDF extends RDF.BaseQuad = RDF.Quad, Q_N3 extends BaseQuad = Quad>(triples?: Q_RDF[], options?: StoreOptions): N3Store<Q_RDF, Q_N3>;"
  },
  {
    "id" : "81e1030f-71ae-4cf1-b92f-1696d6d5da3b",
    "prId" : 46847,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46847#pullrequestreview-469026090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a7c6e84-aecf-4aab-b14e-5de58299419b",
        "parentId" : null,
        "authorId" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "body" : "I was just looking at that. Should `constructor` and `id` also change to use `Iri` type?",
        "createdAt" : "2020-08-18T06:23:23Z",
        "updatedAt" : "2020-08-18T06:31:25Z",
        "lastEditedBy" : "ed26f330-7611-446b-bc51-5ff4cc825915",
        "tags" : [
        ]
      },
      {
        "id" : "4910e464-be55-4515-9b3b-ea9133dd614f",
        "parentId" : "8a7c6e84-aecf-4aab-b14e-5de58299419b",
        "authorId" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "body" : "Indeed, good catch.",
        "createdAt" : "2020-08-18T06:30:26Z",
        "updatedAt" : "2020-08-18T06:31:25Z",
        "lastEditedBy" : "6cbc20cc-7248-463b-91bb-03a78c308433",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d21520d16aceee46a862a6d8d5b82c432e2027f",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +24,28 @@export class NamedNode<Iri extends string = string> implements RDF.NamedNode<Iri> {\n    readonly termType: \"NamedNode\";\n    readonly value: Iri;\n    constructor(iri: Iri);\n    readonly id: string;"
  },
  {
    "id" : "a0a4d1e8-d299-40bf-b5d8-7732caa65f8d",
    "prId" : 51572,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/51572#pullrequestreview-619572492",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8deb1431-84a1-4d1e-831f-bc71a2b738e7",
        "parentId" : null,
        "authorId" : "2a2ce6f8-8bbd-40a8-b19f-25c6a0bf03ff",
        "body" : "```suggestion\r\n    prefix?: string;\r\n}\r\n```\r\n\r\nTokens can also have a prefix field: https://github.com/rdfjs/N3.js/blob/89f0daf748bf2d6ca194b37e58733798346a88e0/src/N3Lexer.js#L348",
        "createdAt" : "2021-03-24T10:54:20Z",
        "updatedAt" : "2021-03-24T11:07:42Z",
        "lastEditedBy" : "2a2ce6f8-8bbd-40a8-b19f-25c6a0bf03ff",
        "tags" : [
        ]
      }
    ],
    "commit" : "a94d8f78f042ea50b577b2dfb43365f9bc0e843f",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +136,140 @@    line: number;\n    prefix?: string;\n}\nexport interface LexerOptions {\n    lineMode?: boolean;"
  },
  {
    "id" : "cee3c6b5-6d32-4df0-aa4a-460d88aab148",
    "prId" : 54301,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/54301#pullrequestreview-699604771",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c32aa4c8-cbcb-430e-8a49-65a709a023c7",
        "parentId" : null,
        "authorId" : "67915062-dec3-45a2-8333-6ac167e948ca",
        "body" : "Shall we perhaps keep casing consistent here? Should be `TriG` and `Turtle` and `N3` for me.",
        "createdAt" : "2021-07-06T07:09:17Z",
        "updatedAt" : "2021-07-06T07:09:21Z",
        "lastEditedBy" : "67915062-dec3-45a2-8333-6ac167e948ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "d66146be625cf6911d70425b499eb20a41882bee",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +165,169 @@  | 'N-Quads'\n  | 'N3'\n  | 'Notation3';\n\nexport type BaseFormatVariant ="
  }
]