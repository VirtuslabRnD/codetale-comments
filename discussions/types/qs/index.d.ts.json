[
  {
    "id" : "95df33ec-26a7-480e-9e2d-c9c498312f2c",
    "prId" : 43440,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43440#pullrequestreview-390206238",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c0fbd24-639d-478a-888d-b68862756679",
        "parentId" : null,
        "authorId" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "body" : "I switched from `unknown` (https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43440#discussion_r399770343) to this so I didn't have to bump the versions of all types which depend on `qs`—including Express which started to depend on this very recently (in https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43217).",
        "createdAt" : "2020-04-08T18:00:40Z",
        "updatedAt" : "2020-05-05T10:02:57Z",
        "lastEditedBy" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "tags" : [
        ]
      }
    ],
    "commit" : "823d5739a04eae4b5caaf7c01cceca7b9beb8e82",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +60,64 @@    // TODO: The value type here is a \"poor man's `unknown`\". When these types support TypeScript\n    // 3.0+, we can replace this with `unknown`.\n    type PoorMansUnknown = {} | null | undefined;\n\n    function stringify(obj: any, options?: IStringifyOptions): string;"
  },
  {
    "id" : "60c01be4-0041-4011-90aa-fe567495fe42",
    "prId" : 43440,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43440#pullrequestreview-405649305",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b89a38a5-9664-44e3-9421-0813ae1dc632",
        "parentId" : null,
        "authorId" : "f20e512d-d787-45a8-a000-96a979941658",
        "body" : "i wonder if we could infer, from the return type of the decoder option, what the value of this object might be?",
        "createdAt" : "2020-04-08T20:06:13Z",
        "updatedAt" : "2020-05-05T10:02:57Z",
        "lastEditedBy" : "f20e512d-d787-45a8-a000-96a979941658",
        "tags" : [
        ]
      },
      {
        "id" : "f6f3cadf-ea4f-4086-a146-fb6c23c78d1c",
        "parentId" : "b89a38a5-9664-44e3-9421-0813ae1dc632",
        "authorId" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "body" : "We sort of discussed this earlier, here: https://github.com/DefinitelyTyped/DefinitelyTyped/pull/43440#discussion_r399768952.\r\n\r\nI can look into it again though. Is it possible to write a decoder that creates a key with a type other than string (symbol?), or is the key always a string (at runtime)?",
        "createdAt" : "2020-04-09T09:39:02Z",
        "updatedAt" : "2020-05-05T10:02:57Z",
        "lastEditedBy" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "tags" : [
        ]
      },
      {
        "id" : "8019313a-0d41-4e3f-8872-d6c443d81ec9",
        "parentId" : "b89a38a5-9664-44e3-9421-0813ae1dc632",
        "authorId" : "f20e512d-d787-45a8-a000-96a979941658",
        "body" : "yes, `parse`'s decoder can return any value. however, if it's for a key, it'll be whatever the engine allows as an object key - which at the moment, in TS, would be `string || symbol || number || bigint` (which should be `PropertyKey` but i don't think that includes all the proper primitive types)",
        "createdAt" : "2020-04-09T23:25:01Z",
        "updatedAt" : "2020-05-05T10:02:57Z",
        "lastEditedBy" : "f20e512d-d787-45a8-a000-96a979941658",
        "tags" : [
        ]
      },
      {
        "id" : "39380c93-ef69-4fd7-b92b-0042e62d840a",
        "parentId" : "b89a38a5-9664-44e3-9421-0813ae1dc632",
        "authorId" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "body" : "Unless I’m missing something, I don’t think these overloads make sense. It seems like you’re trying to return a more specific type (`ParsedQs`) if you know that you _weren’t_ passed a `decoder`. But, since `IParseOptions` is assingable to `Omit<IParseOptions, 'decoder'>`, you can’t really know for sure that you weren’t passed a decoder.\r\n\r\n[This](https://www.typescriptlang.org/play/#code/C4TwDgpgBAJhBmBDArgG2AUQHYGMD2cATlALxQAUAzsIQFxSJYgA0sCK62+RA-PYyyg4AFokKUIwPlGqEAllgDmASlIA+GTQWKA3AChQkNkjTAAIhG4RiZKjXqztrOFcLSBrEWIlSHWpaokGo5K+noKwNZIONAAkgAK3hAA8mDAcnhYlFAA3npQBUJ4ALbFiNIARnh4qBCM+oVsqHLFcpFufvJKUAA+UABKEIoYAB5gDYVwacLSWMjFFda9UEioEhMFLgTW0nZ0ml2KzuymFq70cCboZ9uEnqLikp1OUIYQ9ADkANYQIB-LHwAbohUMgIB9AhoBBsGIRCIgQAAZFptWbzRaEGFgJIAQThCMolWqtXq+UKINQeAA7mY8MBCfQqjU6lgsahEApkhUAFaWelE5mkxoU6nxQh0ungCAMqBMkmsskFbHw4qSazI1q+KBzBbWGGOHDAAByaFQAAlGDBmkoBfKYXJFFg8IQIABFMGEEBihByEa2lkwryPLUfZDAeAAWgAHP8+h85JQ8NGowBWACcEYAjB9Aw8fABlCBYdJYCCof1CwoRaxgF3G+bWOQ4bDpdLSisKgC+enCxaiiBiUESjxgruyOSgAG0fiBnkoALpzxTLEKKSfz5bDiSj7J9LcQHfrqDdgxSofVQgAWUYlAAqlgvk6qVhSLlO8s5qhUMtkFhLgoDzCFx2RdFZf0NDIX2VCQ9iXVg8DSSCZWSTUAB4EiSVJ0kyShWA+LYiA+NRlHofcd30YCxGgeBwOwqCklgg4XgQuiZQwx4sKQkjcinGcl0Xc9nWvLJ70fakX07MJ8CyYAoBYpD6HYiROJw188kaAjrHochISgAAGPRJJ7aTqCgABHbIyGgiByA+D54MQnDlH0IA) demonstrates, I think, a case where my decoder unconditionally returns a number, but these typings think it’s safe to assume that all properties are `string | string[] | ParsedQs | ParsedQs[]`.",
        "createdAt" : "2020-05-04T17:34:19Z",
        "updatedAt" : "2020-05-05T10:02:57Z",
        "lastEditedBy" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "tags" : [
        ]
      },
      {
        "id" : "9b1c6738-c78b-4d94-bdf5-3d891adc3297",
        "parentId" : "b89a38a5-9664-44e3-9421-0813ae1dc632",
        "authorId" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "body" : "Good catch. How about this?\r\n\r\n```diff\r\n-declare function parse(str: string, options?: Omit<IParseOptions, 'decoder'>): ParsedQs;\r\n+declare function parse(str: string, options?: Omit<IParseOptions, 'decoder'> & { decoder?: never }): ParsedQs;\r\n declare function parse(str: string, options?: IParseOptions): { [key: string]: PoorMansUnknown };\r\n```\r\n\r\nhttps://www.typescriptlang.org/play/?ssl=26&ssc=1&pln=27&pc=1#code/C4TwDgpgBAJhBmBDArgG2AUQHYGMD2cATlALxQAUAzsIQFxSJYgA0sCK62+RA-PYyyg4AFokKUIwPlGqEAllgDmASlIA+GTQWKA3AChQkNkjTAAIhG4RiZKjXqztrOFcLSBrEWIlSHWpaokGo5K+noKwNZIONAAkgAK3hAA8mDAcnhYlFAA3npQBUJ4ALbFiNIARnh4qBCM+oVsqHLFcpFufvJKUAA+UABKEIoYAB5gDYVwacLSWMjFFda9UEioEhMFLgTW0nZ0ml2KzuymFq70cCboZ9uEnqLikp1OUIYQ9ADkANYQIB-LHwAbohUMgIB9AhoBBsGIRCIgQAAZFptWbzRaEGFgJIAQThCMolWqtXq+UKINQeAA7mY8MBCfQqjU6lgsahEApkhUAFaWelE5mkxoU6nxQh0ungCAMqBMkmsskFbHw4qSazI1q+KBzBbWGGOHDAAByaFQAAlGDBmkoBfKYXJFFg8IQIABFMGEEBihByEa2lkwryPLUfZDAeAAWgAHP8+h85JQ8NGowBWACcEYAjB9Aw8fABlCBYdJYCCof1CwoRaxgF3G+bWOQ4bDpdLSisKgC+enCxaiiBiUESjxgruyOSgAG0fiBnkoALpzxTLEKKSfz5bDiSj7J9LcQHfrqDdgxSofVQgAWUYlAAqlgvk6qVhSLlO8s5qhUMtkFhLgoDzCFx2RdFZf0NDIX2VCQ9iXVg8DSSCZWSTUAB4EiSVJ0kyShWA+LYiA+DQADJcjYVxZggQElk7ZR6H3Hd9GAsRoHgcDsKgpJYIOF4EI4mUMMeLCkLosjp1+JdF3PZ1ryye9H2pF9OzCfAsmAKA+KQ+hBIkYScNfPJGgI6x6HISEoAABj0ZSe1U6goAAR2yMhoIgcgPg+eDEJw5R9Ds9SnIAJlfVz3IhPycICygAGYQq4jzWEMyZLFuUzzKs2j9CAA",
        "createdAt" : "2020-05-04T22:00:27Z",
        "updatedAt" : "2020-05-05T10:02:57Z",
        "lastEditedBy" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "tags" : [
        ]
      },
      {
        "id" : "b015fb0a-e9e0-4ee8-89f6-4360f55db761",
        "parentId" : "b89a38a5-9664-44e3-9421-0813ae1dc632",
        "authorId" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "body" : "Yeah, I think that works. I think with that you don’t need the `Omit` anymore.",
        "createdAt" : "2020-05-04T22:42:55Z",
        "updatedAt" : "2020-05-05T10:02:57Z",
        "lastEditedBy" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "tags" : [
        ]
      },
      {
        "id" : "1f6117ec-1979-47d1-bc4b-dfe6263785ad",
        "parentId" : "b89a38a5-9664-44e3-9421-0813ae1dc632",
        "authorId" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "body" : "Updated the PR. Would you mind giving it another review?",
        "createdAt" : "2020-05-05T10:02:55Z",
        "updatedAt" : "2020-05-05T10:02:57Z",
        "lastEditedBy" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "tags" : [
        ]
      }
    ],
    "commit" : "823d5739a04eae4b5caaf7c01cceca7b9beb8e82",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +64,68 @@    function stringify(obj: any, options?: IStringifyOptions): string;\n    function parse(str: string, options?: IParseOptions & { decoder?: never }): ParsedQs;\n    function parse(str: string, options?: IParseOptions): { [key: string]: PoorMansUnknown };\n}"
  }
]