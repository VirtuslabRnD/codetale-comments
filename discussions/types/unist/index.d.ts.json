[
  {
    "id" : "221b51f4-7f7b-4d2b-8b23-6dbdef3e8fd0",
    "prId" : 54413,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/54413#pullrequestreview-703306990",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f568717-6220-4572-9719-3ccdb9eb6d44",
        "parentId" : null,
        "authorId" : "8a2e7504-ca6b-44e6-85b7-ac124b465c9d",
        "body" : "Why not extend `Node`?",
        "createdAt" : "2021-07-09T18:14:02Z",
        "updatedAt" : "2021-07-09T18:15:54Z",
        "lastEditedBy" : "8a2e7504-ca6b-44e6-85b7-ac124b465c9d",
        "tags" : [
        ]
      },
      {
        "id" : "df4e9e5e-a71d-4e90-865a-c06e11101490",
        "parentId" : "8f568717-6220-4572-9719-3ccdb9eb6d44",
        "authorId" : "00414433-2604-4008-bfde-431abe31c35c",
        "body" : "It does. `T extends Node = Node`",
        "createdAt" : "2021-07-09T18:19:26Z",
        "updatedAt" : "2021-07-09T18:19:26Z",
        "lastEditedBy" : "00414433-2604-4008-bfde-431abe31c35c",
        "tags" : [
        ]
      },
      {
        "id" : "f159a14e-1ddc-4cdc-8442-99bc33cb1644",
        "parentId" : "8f568717-6220-4572-9719-3ccdb9eb6d44",
        "authorId" : "8a2e7504-ca6b-44e6-85b7-ac124b465c9d",
        "body" : "No, I mean: for your custom parent, extend `MyParent extends UnistParent`. That’s what `@types/mdast`, `@types/hast`, etc are doing",
        "createdAt" : "2021-07-09T18:26:59Z",
        "updatedAt" : "2021-07-09T18:27:06Z",
        "lastEditedBy" : "8a2e7504-ca6b-44e6-85b7-ac124b465c9d",
        "tags" : [
        ]
      },
      {
        "id" : "1907d39e-7b65-4f03-9bbf-5075bcf5878e",
        "parentId" : "8f568717-6220-4572-9719-3ccdb9eb6d44",
        "authorId" : "00414433-2604-4008-bfde-431abe31c35c",
        "body" : "This is for simple usage as I described at https://github.com/DefinitelyTyped/DefinitelyTyped/pull/54413#issuecomment-877351562\r\n\r\n```ts\r\ndeclare const parent: Parent\r\n\r\nconst literals = parent.children as Literal[] // error now\r\n\r\n// after\r\ndeclare const parent: Parent<Literal>\r\n\r\nconst literals = parent.children // already `Literal[]`, no error\r\n```",
        "createdAt" : "2021-07-09T18:39:28Z",
        "updatedAt" : "2021-07-09T18:39:28Z",
        "lastEditedBy" : "00414433-2604-4008-bfde-431abe31c35c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6a5006fa5f11643892420bc198b94ebc0458716",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +103,107 @@     */\n    children: ChildNode[];\n}\n\n/**"
  },
  {
    "id" : "7092627f-a017-419a-93bf-8396c31c94e6",
    "prId" : 54413,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/54413#pullrequestreview-703472634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20594db3-859b-43b3-a567-a0585a8573aa",
        "parentId" : null,
        "authorId" : "9d7c2812-05ea-4d7e-ab2d-2285bbbeda55",
        "body" : "could `@typeParam` ts docs be added here?",
        "createdAt" : "2021-07-10T05:13:39Z",
        "updatedAt" : "2021-07-10T05:14:10Z",
        "lastEditedBy" : "9d7c2812-05ea-4d7e-ab2d-2285bbbeda55",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6a5006fa5f11643892420bc198b94ebc0458716",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +110,114 @@ * @typeParam Value Specific value type of {@link Literal.value} such as `string` for `Text` node\n */\nexport interface Literal<Value = unknown, TData extends object = Data> extends Node<TData> {\n    value: Value;\n}"
  },
  {
    "id" : "93a614e0-e4fb-4c60-9601-ac956e7c8fd5",
    "prId" : 54413,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/54413#pullrequestreview-703472634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ecb73a9-b529-4cfa-9299-791534d9e988",
        "parentId" : null,
        "authorId" : "9d7c2812-05ea-4d7e-ab2d-2285bbbeda55",
        "body" : "could `@typeParam` ts docs be added here?",
        "createdAt" : "2021-07-10T05:13:46Z",
        "updatedAt" : "2021-07-10T05:14:10Z",
        "lastEditedBy" : "9d7c2812-05ea-4d7e-ab2d-2285bbbeda55",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6a5006fa5f11643892420bc198b94ebc0458716",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +97,101 @@ * @typeParam ChildNode Node item of {@link Parent.children}\n */\nexport interface Parent<ChildNode extends Node<object> = Node, TData extends object = NodeData<ChildNode>>\n    extends Node<TData> {\n    /**"
  },
  {
    "id" : "21f83f6a-5ddc-4071-bdbf-cdd792c8bd89",
    "prId" : 54413,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/54413#pullrequestreview-703472634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bb90ed2-3948-475f-817a-0954a645ec63",
        "parentId" : null,
        "authorId" : "9d7c2812-05ea-4d7e-ab2d-2285bbbeda55",
        "body" : "could `@typeParam` ts docs be added here?",
        "createdAt" : "2021-07-10T05:13:51Z",
        "updatedAt" : "2021-07-10T05:14:10Z",
        "lastEditedBy" : "9d7c2812-05ea-4d7e-ab2d-2285bbbeda55",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6a5006fa5f11643892420bc198b94ebc0458716",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +90,94 @@ * @example `NodeData<Node<{ key: string }>>` -> `{ key: string }`\n */\nexport type NodeData<TNode extends Node<object>> = TNode extends Node<infer TData> ? TData : never;\n\n/**"
  },
  {
    "id" : "8561059a-95f3-44b3-9560-286fc585280f",
    "prId" : 54413,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/54413#pullrequestreview-703495555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "011405ca-e22f-4b96-aba7-3a42c6aa0e27",
        "parentId" : null,
        "authorId" : "67195de8-a220-482d-b913-a938505457ce",
        "body" : "We could go one step further and make `type` generic as well. The situation is very similar to `data` or `Parent['children'}`.\r\n\r\n```ts\r\nexport interface Node<TType extends string = string, TData extends object = Data> {\r\n  type: TType;\r\n  data?: TData | undefined;\r\n  position?: Position | undefined;\r\n}\r\n```\r\n\r\nI’m not saying we should or shouldn’t. Just saying we could. I think it’s good to discuss this at this point.",
        "createdAt" : "2021-07-10T11:01:55Z",
        "updatedAt" : "2021-07-10T11:01:56Z",
        "lastEditedBy" : "67195de8-a220-482d-b913-a938505457ce",
        "tags" : [
        ]
      },
      {
        "id" : "3bde52bc-3f14-435d-9c64-f2de7bf36af8",
        "parentId" : "011405ca-e22f-4b96-aba7-3a42c6aa0e27",
        "authorId" : "929aa4b1-87f9-44ba-9774-678c4f7b3d85",
        "body" : "Yep, similar use case. If we wanted to go _even_ further we could do the same for `Position`, potentially. We should keep an eye on the number of type parameters though - if we add too many it could get confusing.\r\n\r\nI'd probably vote for **not** adding this one (or flipping the order) - it's pretty clear when using `Node`s if you do e.g., `const f = (x: Node<Dat> & { type: 'a' | 'b' })...` seeing as all nodes have types. I think the majority of cases are going to want to be specifying `TData` before they specify the `TType`, so we could either flip the parameter order here, or just omit it. In most cases, a specification of a `TType` would be a union which could get verbose, so I'd probably specify this separately (via `type: ...` in an interface, or `& { type: ... }` in a parameter.",
        "createdAt" : "2021-07-10T11:38:58Z",
        "updatedAt" : "2021-07-10T11:41:10Z",
        "lastEditedBy" : "929aa4b1-87f9-44ba-9774-678c4f7b3d85",
        "tags" : [
        ]
      },
      {
        "id" : "bbad7a48-2948-492e-bf1e-79185e5b6eb6",
        "parentId" : "011405ca-e22f-4b96-aba7-3a42c6aa0e27",
        "authorId" : "00414433-2604-4008-bfde-431abe31c35c",
        "body" : "Personally I won't vote to change like that either, at least in this PR, that should be discussed furtherly.",
        "createdAt" : "2021-07-10T12:01:40Z",
        "updatedAt" : "2021-07-10T12:01:40Z",
        "lastEditedBy" : "00414433-2604-4008-bfde-431abe31c35c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6a5006fa5f11643892420bc198b94ebc0458716",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +16,20 @@ * @typeParam TData Information from the ecosystem. Useful for more specific {@link Node.data}.\n */\nexport interface Node<TData extends object = Data> {\n    /**\n     * The variant of a node."
  }
]