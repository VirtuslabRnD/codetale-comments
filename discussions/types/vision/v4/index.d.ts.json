[
  {
    "id" : "ce53efaf-f536-42f2-814b-73d0e0eef8c3",
    "prId" : 23737,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23737#pullrequestreview-97381891",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a67bbfde-0d44-44ab-874e-218bb6debb1f",
        "parentId" : null,
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "Prefer importing only what you need.",
        "createdAt" : "2018-02-17T18:44:38Z",
        "updatedAt" : "2018-02-17T22:55:22Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "723755f032195a4b65dd6690afa792230cb56e60",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +5,9 @@// TypeScript Version: 2.4\n\nimport * as Hapi from 'hapi';\n\ndeclare module 'hapi' {"
  },
  {
    "id" : "ad16a523-b0aa-4d10-94c5-5102b0c265f1",
    "prId" : 23737,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23737#pullrequestreview-97381891",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09397899-f18c-4deb-ae28-3b3f12c10d08",
        "parentId" : null,
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "You probably meant to use `object`.",
        "createdAt" : "2018-02-17T18:45:12Z",
        "updatedAt" : "2018-02-17T22:55:22Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "723755f032195a4b65dd6690afa792230cb56e60",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +126,130 @@    compileMode?: 'sync' | 'async';\n    /** a global context used with all templates. The global context option can be either an object or a function that takes the request as its only argument and returns a context object. The request object is only provided when using the view handler or reply.view(). When using server.render() or request.render(), the request argument will be null. When rendering views, the global context will be merged with any context object specified on the handler or using reply.view(). When multiple context objects are used, values from the global context always have lowest precedence. */\n    context?: Object | ((request: Hapi.Request) => Object);\n}\n"
  },
  {
    "id" : "e9bdaa2c-4591-4ae1-a7e6-6a262b31e047",
    "prId" : 23737,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23737#pullrequestreview-97381891",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c750a9e8-4f6d-48ad-b9d3-428a84588887",
        "parentId" : null,
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "This one is tricky, TS isn't very good at narrowing types/selecting the right overload when defining functions as interfaces, you should use a `type` instead and use a union.",
        "createdAt" : "2018-02-17T18:46:05Z",
        "updatedAt" : "2018-02-17T22:55:22Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "723755f032195a4b65dd6690afa792230cb56e60",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +147,151 @@ */\nexport interface ServerViewCompile {\n    (template: string, options: any): (context: any, options: any) => void;\n    (template: string, options: any, next: (err: Error | null, compiled: (context: any, options: any, callback: (err: null | Error, rendered: string | null) => void) => void) => void): void;\n}"
  },
  {
    "id" : "de0e2cb6-6417-47e1-9c2f-28014b42b4bb",
    "prId" : 23737,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23737#pullrequestreview-97381891",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "355b1be8-186d-451d-9813-ae8ca53a3765",
        "parentId" : null,
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "This type definition doesn't look quite right, triple nested callback?\r\nIf it is triple nested (I hope it's not), try to declare some intermediate types.",
        "createdAt" : "2018-02-17T18:47:07Z",
        "updatedAt" : "2018-02-17T22:55:22Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "723755f032195a4b65dd6690afa792230cb56e60",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +148,152 @@export interface ServerViewCompile {\n    (template: string, options: any): (context: any, options: any) => void;\n    (template: string, options: any, next: (err: Error | null, compiled: (context: any, options: any, callback: (err: null | Error, rendered: string | null) => void) => void) => void): void;\n}\n"
  },
  {
    "id" : "b7b88e4e-5d22-426d-a0d5-4b5bad9c7598",
    "prId" : 23737,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23737#pullrequestreview-97381891",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "145e7d1a-1d20-44eb-b8d1-2f83d9420be1",
        "parentId" : null,
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "Can we narrow these types?",
        "createdAt" : "2018-02-17T18:47:25Z",
        "updatedAt" : "2018-02-17T22:55:22Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      },
      {
        "id" : "18602470-a368-47cc-b96a-4e571f25f533",
        "parentId" : "145e7d1a-1d20-44eb-b8d1-2f83d9420be1",
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "Potentially `object`.",
        "createdAt" : "2018-02-17T18:47:34Z",
        "updatedAt" : "2018-02-17T22:55:22Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "723755f032195a4b65dd6690afa792230cb56e60",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +147,151 @@ */\nexport interface ServerViewCompile {\n    (template: string, options: any): (context: any, options: any) => void;\n    (template: string, options: any, next: (err: Error | null, compiled: (context: any, options: any, callback: (err: null | Error, rendered: string | null) => void) => void) => void): void;\n}"
  },
  {
    "id" : "e8ace069-a45a-4302-832b-9f1c98f12e85",
    "prId" : 23737,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23737#pullrequestreview-97381891",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0a824d2-3000-4089-b5a9-cb8eb1ee7de0",
        "parentId" : null,
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "Please narrow `helper`.",
        "createdAt" : "2018-02-17T18:47:59Z",
        "updatedAt" : "2018-02-17T22:55:22Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "723755f032195a4b65dd6690afa792230cb56e60",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +163,167 @@    registerPartial(name: string, src: string): void;\n    /** registers a helper for use during template rendering. The name is the name that templates should use to reference the helper and helper is the function that will be invoked when the helper is called. */\n    registerHelper(name: string, helper: Function): void;\n}\nexport interface EngineConfigurationObject {}"
  },
  {
    "id" : "596359c6-1408-45b9-9d58-f9c5abbf0a9d",
    "prId" : 23737,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23737#pullrequestreview-97381891",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e60100dd-97df-49d5-9d2e-9fba247cc08e",
        "parentId" : null,
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "Again, prefer type over interface for overloaded functions.",
        "createdAt" : "2018-02-17T18:48:21Z",
        "updatedAt" : "2018-02-17T22:55:22Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "723755f032195a4b65dd6690afa792230cb56e60",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +181,185 @@ */\ninterface RenderMethod {\n    (template: string, context?: any, options?: ServerViewsAdditionalOptions, callback?: RenderCallBack): void;\n    (template: string, context?: any, options?: ServerViewsAdditionalOptions): Promise<string>;\n}"
  },
  {
    "id" : "76e2ad08-fc4a-4a4f-a103-d82fe4b41f32",
    "prId" : 23737,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23737#pullrequestreview-97381891",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bce57698-0e32-4367-9931-186e7bc62ead",
        "parentId" : null,
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "Use void instead of `{}`.",
        "createdAt" : "2018-02-17T18:49:23Z",
        "updatedAt" : "2018-02-17T22:55:22Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "723755f032195a4b65dd6690afa792230cb56e60",
    "line" : 210,
    "diffHunk" : "@@ -1,1 +208,212 @@\n// Has no plugin registration options\ndeclare var visionPlugin: Hapi.PluginFunction<{}>;\n\nexport default visionPlugin;"
  },
  {
    "id" : "c87e9254-d796-4eb8-b02d-f84c896de7a6",
    "prId" : 23737,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23737#pullrequestreview-97382565",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5c4a7cd-3af6-4632-af9e-a87f1fc2ccc5",
        "parentId" : null,
        "authorId" : "786e164e-1abc-44dd-9fbd-f7d49e0cbbbb",
        "body" : "We're on 5.x",
        "createdAt" : "2018-02-17T19:11:36Z",
        "updatedAt" : "2018-02-17T22:55:22Z",
        "lastEditedBy" : "786e164e-1abc-44dd-9fbd-f7d49e0cbbbb",
        "tags" : [
        ]
      },
      {
        "id" : "28b690f7-033d-4c94-85e0-649cb66808bb",
        "parentId" : "a5c4a7cd-3af6-4632-af9e-a87f1fc2ccc5",
        "authorId" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "body" : "That's the old file, these are kept for v4 users.",
        "createdAt" : "2018-02-17T19:14:59Z",
        "updatedAt" : "2018-02-17T22:55:22Z",
        "lastEditedBy" : "4316e44d-461c-4e33-8f9e-87e705b6e3cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "723755f032195a4b65dd6690afa792230cb56e60",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@// Type definitions for vision 4.1\n// Project: https://github.com/hapijs/vision\n// Definitions by: Jason Swearingen <https://github.com/jasonswearingen>, AJP <https://github.com/AJamesPhillips>"
  }
]