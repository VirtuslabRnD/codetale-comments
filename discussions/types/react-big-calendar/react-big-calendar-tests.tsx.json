[
  {
    "id" : "f829372e-f2bf-4fc9-a1b8-97b0fd8b67e7",
    "prId" : 44708,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/44708#pullrequestreview-412133925",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a77a3ec1-d737-461a-9834-1240cea6066c",
        "parentId" : null,
        "authorId" : "04e09978-475a-4333-8639-a85b17b7429f",
        "body" : "nit: `\"` for consistency",
        "createdAt" : "2020-05-14T08:47:12Z",
        "updatedAt" : "2020-05-14T19:51:11Z",
        "lastEditedBy" : "04e09978-475a-4333-8639-a85b17b7429f",
        "tags" : [
        ]
      },
      {
        "id" : "332ad083-3b9e-4355-a6e7-749db4e7d98b",
        "parentId" : "a77a3ec1-d737-461a-9834-1240cea6066c",
        "authorId" : "22fdc4e7-d9a6-4394-b7fd-3a96e8784a4b",
        "body" : "Thanks JetBrains, pushing that now.",
        "createdAt" : "2020-05-14T19:50:33Z",
        "updatedAt" : "2020-05-14T19:51:11Z",
        "lastEditedBy" : "22fdc4e7-d9a6-4394-b7fd-3a96e8784a4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1167f9556dbf254dd59de280e2fc4bb125796143",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +19,23 @@    NavigateAction,\n    Culture, DayLayoutAlgorithm, DayLayoutFunction,\n} from 'react-big-calendar';\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\n"
  },
  {
    "id" : "87d1775a-8864-4459-8c1b-1d8af4a17a54",
    "prId" : 44708,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/44708#pullrequestreview-413672789",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0735d9d-61d7-4a18-aef1-1cf45a3752f6",
        "parentId" : null,
        "authorId" : "04e09978-475a-4333-8639-a85b17b7429f",
        "body" : "This is undefined at this point in the code. Could you move the actual `customLayoutAlgorithm` up so that the variable is declared and used in the same scope?",
        "createdAt" : "2020-05-14T08:48:05Z",
        "updatedAt" : "2020-05-14T19:51:11Z",
        "lastEditedBy" : "04e09978-475a-4333-8639-a85b17b7429f",
        "tags" : [
        ]
      },
      {
        "id" : "5aa3e459-eed4-4f6d-aa0a-e7cca83b5a40",
        "parentId" : "a0735d9d-61d7-4a18-aef1-1cf45a3752f6",
        "authorId" : "22fdc4e7-d9a6-4394-b7fd-3a96e8784a4b",
        "body" : "I debated this point before committing it, I put it with the rest of the data functions rather than starting them in two places. Do we think it would be better to move all of these or leave it as is?",
        "createdAt" : "2020-05-14T19:50:13Z",
        "updatedAt" : "2020-05-14T19:51:11Z",
        "lastEditedBy" : "22fdc4e7-d9a6-4394-b7fd-3a96e8784a4b",
        "tags" : [
        ]
      },
      {
        "id" : "77f3f85a-774e-43df-97aa-04db6983cbbb",
        "parentId" : "a0735d9d-61d7-4a18-aef1-1cf45a3752f6",
        "authorId" : "04e09978-475a-4333-8639-a85b17b7429f",
        "body" : "They should live close to another and not across scopes. I'm honestly a bit surprised this even works. `customLayoutAlgorithm` is declared after usage so you could potentially call render and get an undefined Â´customLayoutAlgorithm` because of \"temporal dead zone\". Not relevant for static tests but we want to them to be as close as possible to actual usage.",
        "createdAt" : "2020-05-15T09:51:59Z",
        "updatedAt" : "2020-05-15T09:51:59Z",
        "lastEditedBy" : "04e09978-475a-4333-8639-a85b17b7429f",
        "tags" : [
        ]
      },
      {
        "id" : "78f6f564-0f44-4314-beb9-2166abaa21d3",
        "parentId" : "a0735d9d-61d7-4a18-aef1-1cf45a3752f6",
        "authorId" : "22fdc4e7-d9a6-4394-b7fd-3a96e8784a4b",
        "body" : "Is the verdict here to move all of the functions passed by reference to above where they are used or just this one. I personally feel keeping them together is far more useful than splitting them, which would logically put them all at the top of the file. If so, would this be better in a secondary PR to keep the changes clear?",
        "createdAt" : "2020-05-18T14:54:31Z",
        "updatedAt" : "2020-05-18T14:54:31Z",
        "lastEditedBy" : "22fdc4e7-d9a6-4394-b7fd-3a96e8784a4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1167f9556dbf254dd59de280e2fc4bb125796143",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +199,203 @@                        return true;\n                    }}\n                    dayLayoutAlgorithm={customLayoutAlgorithm}\n                    views={['day']}\n                    toolbar={true}"
  },
  {
    "id" : "21037d7f-ccf2-4068-b19e-4e402a50a18a",
    "prId" : 46226,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46226#pullrequestreview-457676255",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "600a63c9-8eea-4992-a2b6-ada0441ec3d1",
        "parentId" : null,
        "authorId" : "04e09978-475a-4333-8639-a85b17b7429f",
        "body" : "Do we need to explicitly pass generic arguments?",
        "createdAt" : "2020-07-25T05:18:51Z",
        "updatedAt" : "2020-08-21T09:22:54Z",
        "lastEditedBy" : "04e09978-475a-4333-8639-a85b17b7429f",
        "tags" : [
        ]
      },
      {
        "id" : "269e551a-ea71-4861-887e-b5c9688f7b0c",
        "parentId" : "600a63c9-8eea-4992-a2b6-ada0441ec3d1",
        "authorId" : "8cd07375-c57d-4165-9699-794ba60367b1",
        "body" : "I couldn't figure out how to define this stuff with type safety *without* explicitly passing them (or type casting, which I found worse)",
        "createdAt" : "2020-07-27T14:20:41Z",
        "updatedAt" : "2020-08-21T09:22:54Z",
        "lastEditedBy" : "8cd07375-c57d-4165-9699-794ba60367b1",
        "tags" : [
        ]
      },
      {
        "id" : "433aceec-7551-4ce7-9971-4325e4b01b2f",
        "parentId" : "600a63c9-8eea-4992-a2b6-ada0441ec3d1",
        "authorId" : "04e09978-475a-4333-8639-a85b17b7429f",
        "body" : "> I couldn't figure out how to define this stuff with type safety\r\n\r\nWhat do you mean by this? ",
        "createdAt" : "2020-07-27T16:01:16Z",
        "updatedAt" : "2020-08-21T09:22:54Z",
        "lastEditedBy" : "04e09978-475a-4333-8639-a85b17b7429f",
        "tags" : [
        ]
      },
      {
        "id" : "6fe93562-13ff-45b6-b460-44335dc1c53b",
        "parentId" : "600a63c9-8eea-4992-a2b6-ada0441ec3d1",
        "authorId" : "8cd07375-c57d-4165-9699-794ba60367b1",
        "body" : "`withDragAndDrop` was not passing the generic parameters of `TEvent` and `TResource` (old code: `declare function withDragAndDrop(calendar: typeof Calendar): typeof DragAndDropCalendar;`). My change adds this, but it found no way how to achieve this which TypeScript inferring them, so it have to pass them explicitly via `const DragAndDropCalendar = withDragAndDrop<CalendarEvent, CalendarResource>(MyCalendar)`.",
        "createdAt" : "2020-07-29T16:11:03Z",
        "updatedAt" : "2020-08-21T09:22:54Z",
        "lastEditedBy" : "8cd07375-c57d-4165-9699-794ba60367b1",
        "tags" : [
        ]
      }
    ],
    "commit" : "661332939a6dfb7eb03c6f1eea2ec9a41700e009",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +112,116 @@        localizer: DateLocalizer;\n    }\n    const DragAndDropCalendar = withDragAndDrop<CalendarEvent, CalendarResource>(MyCalendar);\n    const DnD = ({ localizer }: Props) => (\n        <DragAndDropCalendar"
  }
]