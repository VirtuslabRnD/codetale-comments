[
  {
    "id" : "97f5a02d-b436-403f-8faf-4423b1566b05",
    "prId" : 30446,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30446#pullrequestreview-174889789",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6403ceda-8d0a-44fb-8029-8ca7d2134d9c",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Interesting that in the Flow types they have this as a generic input, but don't actually use its genericness.\r\n\r\nIn TS, that being generic would have the effect of inferring literal types for the return, but that doesn't seem productive for a hash function either.\r\n\r\nThe result is also anything that can be a `Map`'s `key` (i.e. `any`), not necessarily `string | number`, though they do have `string | number` as a bound in the generic argument. I guess if they did expose the `Map` somehow that they'd need the generic, but the map is hidden through yet another private `Map`.\r\n\r\nThat unfortunately has a side effect of leaking memory if you ever want to destroy a cache as they can't use `WeakMap` due to their self-imposed stdlib restrictions.",
        "createdAt" : "2018-11-14T14:44:28Z",
        "updatedAt" : "2018-11-15T03:06:05Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a65d034353a34f1e3de20d3423bc3421fa72c71",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +11,15 @@export function unstable_createResource<Input, Value>(\n  fetch: (input: Input) => PromiseLike<Value>,\n  maybeHashInput?: (input: Input) => string | number\n): Resource<Input, Value>;"
  }
]