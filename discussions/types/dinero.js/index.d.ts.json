[
  {
    "id" : "605d8c41-26d4-455a-a813-4860f37aa98e",
    "prId" : 38856,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/38856#pullrequestreview-302064691",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27b96a19-b4ce-4e9f-8bdd-6f6a98279346",
        "parentId" : null,
        "authorId" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "body" : "Should it not be `string | Promise<{ rates: { [K in Currency]?: number } }>`?",
        "createdAt" : "2019-10-14T22:47:08Z",
        "updatedAt" : "2019-10-14T22:47:25Z",
        "lastEditedBy" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "tags" : [
        ]
      },
      {
        "id" : "ced8c347-03d4-4971-be5d-5c288d7ecdae",
        "parentId" : "27b96a19-b4ce-4e9f-8bdd-6f6a98279346",
        "authorId" : "f7892934-a576-4552-bdeb-91e49f95e348",
        "body" : "The promise can resolve to any object. It does not have any constraints apart from being possible to navigate it using a key path that may or may not include a `{{to}}` or `{{from}}` currency.\r\n\r\nThe Dinero docs define [`propertyPath`](https://sarahdayan.github.io/dinero.js/module-Dinero.html#~convert) which is used to navigate the resolved object. This allows for use of differently structured exchange rate objects, which may have actual exchange rates deeply nested.\r\n\r\nCan't really think of a way to make type stricter than it already is without breaking usage of nested exchange rate objects, like the structure used in [`dinero.js-tests.ts`](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/f573096ba00fea104202310253b1798586040d95/types/dinero.js/dinero.js-tests.ts#L26). ðŸ¤”",
        "createdAt" : "2019-10-15T11:46:57Z",
        "updatedAt" : "2019-10-15T11:46:57Z",
        "lastEditedBy" : "f7892934-a576-4552-bdeb-91e49f95e348",
        "tags" : [
        ]
      },
      {
        "id" : "e186fad5-39d4-43e9-947e-24164519aa72",
        "parentId" : "27b96a19-b4ce-4e9f-8bdd-6f6a98279346",
        "authorId" : "f7892934-a576-4552-bdeb-91e49f95e348",
        "body" : "If you have any ideas, I'd be happy to refactor accordingly! ðŸ¤—",
        "createdAt" : "2019-10-15T11:48:50Z",
        "updatedAt" : "2019-10-15T11:48:51Z",
        "lastEditedBy" : "f7892934-a576-4552-bdeb-91e49f95e348",
        "tags" : [
        ]
      },
      {
        "id" : "3bc06554-421c-49cb-8cb4-d4753a7ee256",
        "parentId" : "27b96a19-b4ce-4e9f-8bdd-6f6a98279346",
        "authorId" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "body" : "Sounds good, I just only saw one type structure from quickly looking at examples so I was wondering if it could be improved. Thereâ€™s probably not much we can do with dynamic stuff like `propertyPath`.",
        "createdAt" : "2019-10-15T17:09:17Z",
        "updatedAt" : "2019-10-15T17:09:17Z",
        "lastEditedBy" : "28aab869-30d5-42f8-8a85-4af7d5854cea",
        "tags" : [
        ]
      }
    ],
    "commit" : "f573096ba00fea104202310253b1798586040d95",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +74,78 @@\n    interface ExchangeRatesApiOptions {\n        endpoint: string | Promise<{[key: string]: any}>;\n        propertyPath: string;\n        headers?: { [header: string]: string };"
  }
]