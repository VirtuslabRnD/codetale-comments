[
  {
    "id" : "33ae7501-5eb1-4ce2-a8d5-adf474148de1",
    "prId" : 37576,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/37576#pullrequestreview-278589814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11e07e12-3af0-4ce8-a851-db72401012f9",
        "parentId" : null,
        "authorId" : "e30eb346-917e-4cfa-b6d7-7688bc735d2e",
        "body" : "Is this missing few more typings?:\r\n\r\n```js\r\n// a.js\r\nconst x = import(\"relay-compiler\");\r\nconsole.log(x);\r\n```\r\n\r\nresults in \r\n```\r\n> node a.js\r\nASTConvert:\r\n   { convertASTDocuments: [Function: convertASTDocuments],\r\n     convertASTDocumentsWithBase: [Function: convertASTDocumentsWithBase],\r\n     extendASTSchema: [Function: extendASTSchema],\r\n     transformASTSchema: [Function: transformASTSchema] },\r\n  CodegenDirectory:\r\n   { [Function: CodegenDirectory]\r\n     combineChanges: [Function: combineChanges],\r\n     hasChanges: [Function: hasChanges],\r\n     printChanges: [Function: printChanges],\r\n     getAddedRemovedFiles: [Function: getAddedRemovedFiles],\r\n     sourceControlAddRemove: [Function: sourceControlAddRemove] },\r\n  CodegenRunner: [Function: CodegenRunner],\r\n  CodegenWatcher:\r\n   { queryDirectories: [Function: queryDirectories],\r\n     queryFiles: [Function: queryFiles],\r\n     queryFilepaths: [Function: queryFilepaths],\r\n     watch: [Function: watch],\r\n     watchFiles: [Function: watchFiles],\r\n     watchCompile: [Function: watchCompile] },\r\n  CompilerContext: [Function: GraphQLCompilerContext],\r\n  ConsoleReporter: [Function: GraphQLConsoleReporter],\r\n  DotGraphQLParser:\r\n   { parseFile: [Function: parseFile],\r\n     getParser: [Function: getParser] },\r\n  ASTCache: [Function: ASTCache],\r\n  IRTransformer: { transform: [Function: transform] },\r\n  IRVisitor: { visit: [Function: visitIR] },\r\n  Printer:\r\n   { print: [Function: print],\r\n     printField: [Function: printField],\r\n     printArguments: [Function: printArguments],\r\n     printDirectives: [Function: printDirectives] },\r\n  Profiler:\r\n   { enable: [Function: enable],\r\n     getTraces: [Function: getTraces],\r\n     run: [Function: run],\r\n     asyncContext: [Function: asyncContext],\r\n     waitFor: [Function: waitFor],\r\n     instrument: [Function: instrument],\r\n     instrumentAsyncContext: [Function: instrumentAsyncContext],\r\n     instrumentWait: [Function: instrumentWait],\r\n     start: [Function: start],\r\n     startWait: [Function: startWait],\r\n     end: [Function: end] },\r\n  Rollout: { set: [Function: set], check: [Function: check] },\r\n  SchemaUtils:\r\n   { assertTypeWithFields: [Function: assertTypeWithFields],\r\n     canHaveSelections: [Function: canHaveSelections],\r\n     generateIDField: [Function: generateIDField],\r\n     getNullableType: [Function: getNullableType],\r\n     getRawType: [Function: getRawType],\r\n     getSingularType: [Function: getSingularType],\r\n     hasID: [Function: hasID],\r\n     implementsInterface: [Function: implementsInterface],\r\n     isAbstractType: [Function: isAbstractType],\r\n     isClientDefinedField: [Function: isClientDefinedField],\r\n     isExecutableDefinitionAST: [Function: isExecutableDefinitionAST],\r\n     isSchemaDefinitionAST: [Function: isSchemaDefinitionAST],\r\n     isServerDefinedField: [Function: isServerDefinedField],\r\n     isUnionType: [Function: isUnionType],\r\n     mayImplement: [Function: mayImplement] },\r\n  SourceControlMercurial: { addRemove: [Function: addRemove] },\r\n  WatchmanClient:\r\n   { [Function: GraphQLWatchmanClient] isAvailable: [Function: isAvailable] },\r\n  filterContextForNode: [Function: filterContextForNode],\r\n  getIdentifierForArgumentValue: [Function: getIdentifierForArgumentValue],\r\n  getNormalizationOperationName: [Function: getNormalizationOperationName],\r\n  getLiteralArgumentValues: [Function: getLiteralArgumentValues],\r\n  isEquivalentType: [Function: isEquivalentType],\r\n  nullthrows: [Function: nullthrows],\r\n  Parser:\r\n   { parse: [Function: parse], transform: [Function: transform] },\r\n  Validator:\r\n   { GLOBAL_RULES:\r\n      [ [Function: KnownArgumentNames],\r\n        [Function: NoUnusedVariables],\r\n        [Function: UniqueArgumentNames],\r\n        [Function: UniqueFragmentNames],\r\n        [Function: UniqueInputFieldNames],\r\n        [Function: UniqueOperationNames],\r\n        [Function: UniqueVariableNames] ],\r\n     LOCAL_RULES:\r\n      [ [Function: FragmentsOnCompositeTypes],\r\n        [Function: KnownTypeNames],\r\n        [Function: LoneAnonymousOperation],\r\n        [Function: PossibleFragmentSpreads],\r\n        [Function: ValuesOfCorrectType],\r\n        [Function: VariablesAreInputTypes],\r\n        [Function: DisallowIdAsAliasValidationRule] ],\r\n     validate: [Function: validateOrThrow] },\r\n  CodeGenerator: { generate: [Function: generate] },\r\n  FlowGenerator:\r\n   { generate: [Function: generate],\r\n     transforms:\r\n      [ [Function: relayRelayDirectiveTransform],\r\n        [Function: relayMaskTransform],\r\n        [Function: relayMatchTransform],\r\n        [Function: flattenTransform],\r\n        [Function: relayRefetchableFragmentTransform] ] },\r\n  GraphQLCompilerContext: [Function: GraphQLCompilerContext],\r\n  FileWriter: { writeAll: [Function: writeAll] },\r\n  IRTransforms:\r\n   { commonTransforms:\r\n      [ [Function: relayConnectionTransform],\r\n        [Function: relayRelayDirectiveTransform],\r\n        [Function: relayMaskTransform],\r\n        [Function: relayMatchTransform],\r\n        [Function: relayRefetchableFragmentTransform] ],\r\n     codegenTransforms:\r\n      [ [Function: skipUnreachableNodeTransform],\r\n        [Function: relaySplitMatchTransform],\r\n        [Function: inlineFragmentsTransform],\r\n        [Function: clientExtensionTransform],\r\n        [Function: flattenTransform],\r\n        [Function: skipRedundantNodesTransform],\r\n        [Function: relayGenerateTypeNameTransform],\r\n        [Function: filterDirectivesTransform],\r\n        [Function: refineOperationVariablesTransform] ],\r\n     fragmentTransforms:\r\n      [ [Function: clientExtensionTransform],\r\n        [Function: relayFieldHandleTransform],\r\n        [Function: flattenTransform],\r\n        [Function: skipRedundantNodesTransform] ],\r\n     printTransforms:\r\n      [ [Function: clientExtensionTransform],\r\n        [Function: skipClientExtensionTransform],\r\n        [Function: skipUnreachableNodeTransform],\r\n        [Function: flattenTransform],\r\n        [Function: relayGenerateTypeNameTransform],\r\n        [Function: relaySkipHandleFieldTransform],\r\n        [Function: filterDirectivesTransform],\r\n        [Function: refineOperationVariablesTransform] ],\r\n     queryTransforms:\r\n      [ [Function: relayApplyFragmentArgumentTransform],\r\n        [Function: relayGenerateIDFieldTransform],\r\n        [Function: relayDeferStreamTransform],\r\n        [Function: testOperationDirective] ],\r\n     schemaExtensions:\r\n      [ '\\n  directive @connection(\\n    key: String!\\n    filters: [String]\\n    handler: String\\n    dynamicKey_UNSTABLE: String\\n  ) on FIELD\\n\\n  directive @stream_connection(\\n    key: String!\\n    filters: [String]\\n    handler: String\\n    label: String!\\n    initial_count: Int!\\n    if: Boolean = true\\n    dynamicKey_UNSTABLE: String\\n  ) on FIELD\\n',\r\n        '\\n  directive @match on FIELD\\n\\n  directive @module(\\n    name: String!\\n  ) on FRAGMENT_SPREAD\\n',\r\n        '\\ndirective @relay(\\n  # Marks a connection field as containing nodes without \\'id\\' fields.\\n  # This is used to silence the warning when diffing connections.\\n  isConnectionWithoutNodeID: Boolean,\\n\\n  # Marks a fragment as intended for pattern matching (as opposed to fetching).\\n  # Used in Classic only.\\n  pattern: Boolean,\\n\\n  # Marks a fragment as being backed by a GraphQLList.\\n  plural: Boolean,\\n\\n  # Marks a fragment spread which should be unmasked if provided false\\n  mask: Boolean = true,\\n\\n  # Selectively pass variables down into a fragment. Only used in Classic.\\n  variables: [String!],\\n) on FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT | FIELD\\n',\r\n        '\\n  directive @refetchable(\\n    queryName: String!\\n  ) on FRAGMENT_DEFINITION\\n',\r\n        'directive @relay_test_operation on QUERY | MUTATION | SUBSCRIPTION' ] },\r\n  JSModuleParser:\r\n   { getParser: [Function: getParser],\r\n     getFileFilter: [Function: getFileFilter],\r\n     parseFile: [Function: parseFile],\r\n     parseFileWithSources: [Function: parseFileWithSources] },\r\n  MultiReporter: [Function: GraphQLMultiReporter],\r\n  Runner: [Function: CodegenRunner],\r\n  compileRelayArtifacts: [Function: compileRelayArtifacts],\r\n  formatGeneratedModule: [Function: formatGeneratedModule],\r\n  convertASTDocuments: [Function: convertASTDocuments],\r\n  transformASTSchema: [Function: transformASTSchema],\r\n  getReaderSourceDefinitionName: [Function: getReaderSourceDefinitionName],\r\n  getSourceDefinitionName: [Function: getSourceDefinitionName],\r\n  writeRelayGeneratedFile: [Function: writeRelayGeneratedFile] }\r\n```\r\n",
        "createdAt" : "2019-08-21T21:32:44Z",
        "updatedAt" : "2019-08-22T16:31:10Z",
        "lastEditedBy" : "e30eb346-917e-4cfa-b6d7-7688bc735d2e",
        "tags" : [
        ]
      },
      {
        "id" : "49a58dfc-caf4-4ee4-87b1-19940688b2a4",
        "parentId" : "11e07e12-3af0-4ce8-a851-db72401012f9",
        "authorId" : "efd6da07-8c85-42ac-9122-9ec40a35c133",
        "body" : "Is it necessary to add all types for getting this merged? Currently, I only created types for the parts that I need.",
        "createdAt" : "2019-08-22T05:26:06Z",
        "updatedAt" : "2019-08-22T16:31:10Z",
        "lastEditedBy" : "efd6da07-8c85-42ac-9122-9ec40a35c133",
        "tags" : [
        ]
      },
      {
        "id" : "ddf3a960-a650-41ce-8127-2bb129d0c62e",
        "parentId" : "11e07e12-3af0-4ce8-a851-db72401012f9",
        "authorId" : "e30eb346-917e-4cfa-b6d7-7688bc735d2e",
        "body" : "No but i wanted to point out to ensure it was intentional",
        "createdAt" : "2019-08-22T17:57:05Z",
        "updatedAt" : "2019-08-22T17:57:05Z",
        "lastEditedBy" : "e30eb346-917e-4cfa-b6d7-7688bc735d2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb1e917f893af8a6140202f56b8ed6419a75daab",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@declare var transformASTSchema: typeof ASTConvert.transformASTSchema;\n\nexport { GraphQLCompilerContext, ASTConvert, transformASTSchema, Parser, Printer, ConsoleReporter, MultiReporter };"
  }
]