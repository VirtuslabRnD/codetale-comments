[
  {
    "id" : "8bfd72e7-beff-4626-b745-efb792c55807",
    "prId" : 36666,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36666#pullrequestreview-259230248",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b66b2511-f13e-496c-9f05-21f454ea672b",
        "parentId" : null,
        "authorId" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "body" : "`message` property is missing.",
        "createdAt" : "2019-07-09T01:25:52Z",
        "updatedAt" : "2019-07-09T07:58:36Z",
        "lastEditedBy" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "tags" : [
        ]
      }
    ],
    "commit" : "25f83d4991ca5dbdece496fdf3ec3023d08dd343",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@}\n\nexport class InternalError extends Error {\n    name: 'InternalError';\n    message: string;"
  },
  {
    "id" : "bbb0be53-dc07-4708-8414-01b5205171e2",
    "prId" : 36666,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36666#pullrequestreview-259230248",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "749595c9-4885-45be-9a65-73d09cbf67f7",
        "parentId" : null,
        "authorId" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "body" : "`message` property is missing.",
        "createdAt" : "2019-07-09T01:26:05Z",
        "updatedAt" : "2019-07-09T07:58:36Z",
        "lastEditedBy" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "tags" : [
        ]
      }
    ],
    "commit" : "25f83d4991ca5dbdece496fdf3ec3023d08dd343",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +39,43 @@}\n\nexport class RequestError extends Error {\n    name: 'RequestError';\n    message: string;"
  },
  {
    "id" : "34867f74-0286-4e10-a51b-7c88e0cfdaa3",
    "prId" : 36666,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36666#pullrequestreview-259230248",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c44dba2-b205-4e52-a6c9-e8e5de84786d",
        "parentId" : null,
        "authorId" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "body" : "`message` property is missing.",
        "createdAt" : "2019-07-09T01:27:06Z",
        "updatedAt" : "2019-07-09T07:58:36Z",
        "lastEditedBy" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "tags" : [
        ]
      }
    ],
    "commit" : "25f83d4991ca5dbdece496fdf3ec3023d08dd343",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +45,49 @@}\n\nexport class ApiError<T extends object = any> extends Error {\n    name: 'ApiError';\n    status: number;"
  },
  {
    "id" : "9a6c48a1-4725-468d-8a42-f1c2811c3a03",
    "prId" : 36666,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36666#pullrequestreview-279278453",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ed2f799-9210-48c5-a23b-f0ee6ba34145",
        "parentId" : null,
        "authorId" : "fef24065-ddcd-470c-a3f5-fe8f66907629",
        "body" : "Day 1 of Typescript for me so please correct me if I'm wrong...should this line instead be `endpoint: ((state: S) => string) | string;`\r\n\r\nSeems that this is currently saying the function must return a string or a string, instead of, a string or a function that returns a string? \r\n\r\n\r\n\r\n",
        "createdAt" : "2019-08-19T16:08:39Z",
        "updatedAt" : "2019-08-19T16:08:39Z",
        "lastEditedBy" : "fef24065-ddcd-470c-a3f5-fe8f66907629",
        "tags" : [
        ]
      },
      {
        "id" : "c59261b5-8b33-4505-9f10-52074acdde7b",
        "parentId" : "0ed2f799-9210-48c5-a23b-f0ee6ba34145",
        "authorId" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "body" : "Yeap, you're right. Now it seems is evaluated how you said\r\n```\r\n(state: S) => (string | string);\r\n```\r\nand `string | string` equals `string`",
        "createdAt" : "2019-08-23T22:41:59Z",
        "updatedAt" : "2019-08-23T22:41:59Z",
        "lastEditedBy" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "tags" : [
        ]
      },
      {
        "id" : "5a871432-c055-449a-b060-4c8f14ccfeaa",
        "parentId" : "0ed2f799-9210-48c5-a23b-f0ee6ba34145",
        "authorId" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "body" : "And not only this one, but all lines that have a type or a function with same exact return type. Also strange behaviour\r\n```ts\r\n// type-test.ts\r\ntype Test1 = string | arg => string;\r\ntype Test2 = string | (arg: any) => string;\r\ntype Test3 = arg => string | string;\r\ntype Test4 = (arg: any) => string | string;\r\n```\r\n```bash\r\nandreiluca@trolic:~/Downloads|â‡’  npx typescript --noEmit type-test.ts\r\nnpx: installed 1 in 2.855s\r\n\r\ntype-test.ts:1:27 - error TS1005: ';' expected.\r\n1 type Test1 = string | arg => string;\r\n                            ~~\r\n\r\ntype-test.ts:2:27 - error TS1005: ')' expected.\r\n2 type Test2 = string | (arg: any) => string;\r\n                            ~\r\n\r\ntype-test.ts:2:32 - error TS1005: ';' expected.\r\n2 type Test2 = string | (arg: any) => string;\r\n                                 ~\r\n\r\ntype-test.ts:2:34 - error TS1128: Declaration or statement expected.\r\n2 type Test2 = string | (arg: any) => string;\r\n                                   ~~\r\n\r\ntype-test.ts:3:18 - error TS1005: ';' expected.\r\n3 type Test3 = arg => string | string;\r\n                   ~~\r\n```",
        "createdAt" : "2019-08-23T22:54:43Z",
        "updatedAt" : "2019-08-23T22:54:43Z",
        "lastEditedBy" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "tags" : [
        ]
      },
      {
        "id" : "00417d72-c047-4235-9d9d-f4db4548d846",
        "parentId" : "0ed2f799-9210-48c5-a23b-f0ee6ba34145",
        "authorId" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "body" : "One solution is to create some aliases\r\n```ts\r\ntype TypeResolver<Type, State> = (state: State) => Type;\r\ntype TypeOrResolver<Type, State> = Type | TypeResolver<Type, State>;\r\n\r\nexport interface RSAACall<S = any, P = any, M = any> {\r\n    endpoint: TypeOrResolver<string, S>;\r\n    body?: TypeOrResolver<BodyInit | null, S>;\r\n    headers?: TypeOrResolver<HeadersInit | HeadersInit, S>;\r\n    options?: TypeOrResolver<RequestInit | RequestInit, S>;\r\n}\r\n\r\nconst test: RSAACall<number> = {\r\n    endpoint: (a: number) => ''\r\n    // ...\r\n}\r\n```\r\n\r\n@Mrman Would you like to crete a PR for fixing this? Or I'll fix it.",
        "createdAt" : "2019-08-23T23:33:22Z",
        "updatedAt" : "2019-08-23T23:33:23Z",
        "lastEditedBy" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "tags" : [
        ]
      },
      {
        "id" : "f9049da2-427c-4f03-809c-10b074fdacc0",
        "parentId" : "0ed2f799-9210-48c5-a23b-f0ee6ba34145",
        "authorId" : "fef24065-ddcd-470c-a3f5-fe8f66907629",
        "body" : "I'll fix in the next day or two. I probably won't go down the alias route, feels like more indirection for something that is fairly simple.\r\n\r\nThanks for replying!",
        "createdAt" : "2019-08-24T06:48:25Z",
        "updatedAt" : "2019-08-24T06:48:35Z",
        "lastEditedBy" : "fef24065-ddcd-470c-a3f5-fe8f66907629",
        "tags" : [
        ]
      }
    ],
    "commit" : "25f83d4991ca5dbdece496fdf3ec3023d08dd343",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +84,88 @@\nexport interface RSAACall<S = any, P = any, M = any> {\n    endpoint: (state: S) => string | string;\n    method: string;\n    types: ["
  },
  {
    "id" : "c9a3eb3b-39c5-49e8-8cc0-d0526ad84832",
    "prId" : 38645,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/38645#pullrequestreview-294934961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f9fe0e8-2adb-4e92-9668-31771f61ccd7",
        "parentId" : null,
        "authorId" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "body" : "```suggestion\r\n        <State = any, Payload = any, Meta = any>(\r\n            action: RSAAAction<State, Payload, Meta>\r\n        ): Promise<RSAAResultAction<Payload, Meta>>;\r\n\r\n```",
        "createdAt" : "2019-09-27T08:54:10Z",
        "updatedAt" : "2019-09-30T09:57:23Z",
        "lastEditedBy" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "tags" : [
        ]
      },
      {
        "id" : "b58a8a81-fda7-4a9d-ad8d-9a76303810de",
        "parentId" : "7f9fe0e8-2adb-4e92-9668-31771f61ccd7",
        "authorId" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "body" : "@artursvonda add please `State` generic parameter",
        "createdAt" : "2019-09-30T09:58:20Z",
        "updatedAt" : "2019-09-30T09:58:21Z",
        "lastEditedBy" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "tags" : [
        ]
      },
      {
        "id" : "93a0fccf-88fb-4a6d-aa43-81eab6ffe1fa",
        "parentId" : "7f9fe0e8-2adb-4e92-9668-31771f61ccd7",
        "authorId" : "e3469a12-f077-474a-ab26-f71be56a818d",
        "body" : "Sure! Any reason to have the defaults? They are inferred from the input anyway.",
        "createdAt" : "2019-09-30T10:06:02Z",
        "updatedAt" : "2019-09-30T10:06:03Z",
        "lastEditedBy" : "e3469a12-f077-474a-ab26-f71be56a818d",
        "tags" : [
        ]
      },
      {
        "id" : "66422edf-d210-413d-a3ee-a4dd3f62988f",
        "parentId" : "7f9fe0e8-2adb-4e92-9668-31771f61ccd7",
        "authorId" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "body" : "Defaults are if user does not want to use generics.\r\n![image](https://user-images.githubusercontent.com/1881266/65873790-b8fc9b80-e38c-11e9-8280-5281924af00b.png)\r\n",
        "createdAt" : "2019-09-30T11:10:26Z",
        "updatedAt" : "2019-09-30T11:15:17Z",
        "lastEditedBy" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "tags" : [
        ]
      },
      {
        "id" : "6a6ecb01-58f5-4c88-9e81-7148bde81d43",
        "parentId" : "7f9fe0e8-2adb-4e92-9668-31771f61ccd7",
        "authorId" : "e3469a12-f077-474a-ab26-f71be56a818d",
        "body" : "Actually in this case the input generic types are inferred and one doesn't need to provide anything.\r\n\r\n```\r\nconst action = RSAAAction<any, string, number> = { ... };\r\n\r\ndispatch(action).then(result => // the result here is inferred correctly and user didn't need to provide any generics\r\n```\r\n\r\nBy the way, I realised we're not using State in the output so no reason to put it in the generics list.",
        "createdAt" : "2019-09-30T12:04:17Z",
        "updatedAt" : "2019-09-30T12:04:18Z",
        "lastEditedBy" : "e3469a12-f077-474a-ab26-f71be56a818d",
        "tags" : [
        ]
      },
      {
        "id" : "ed3a5666-523b-48ee-a4f6-44ddaef2883e",
        "parentId" : "7f9fe0e8-2adb-4e92-9668-31771f61ccd7",
        "authorId" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "body" : "> Actually in this case the input generic types are inferred and one doesn't need to provide anything.\r\n\r\nIn the image above it shows that there is an error if you don't provide generics, `1 argument is requried`\r\n\r\n> By the way, I realised we're not using State in the output so no reason to put it in the generics list.\r\n\r\nIt is used inside `RSAAAction` to define type descriptors",
        "createdAt" : "2019-09-30T12:09:09Z",
        "updatedAt" : "2019-09-30T12:09:09Z",
        "lastEditedBy" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "tags" : [
        ]
      },
      {
        "id" : "713d2ca8-0613-47df-b238-47051632017a",
        "parentId" : "7f9fe0e8-2adb-4e92-9668-31771f61ccd7",
        "authorId" : "e3469a12-f077-474a-ab26-f71be56a818d",
        "body" : "https://www.typescriptlang.org/play/index.html#code/C4TwDgpgBA4hB2EBOBLAxgHgCoD4oF4osBuAKFLQHt4BnYKFeMAV2AC5YFl0M7V4A5nkIByEWQrU6UZkwCGaANYEo2HAApGLdp0SpMuAJQcsBPFtYSqtegDc5AGxWywCxZqatDxKAHpfRAAW0EgQwMxI8FCgkFDBoQw0UFRIoWjADiAM8ABmyKEAJlBySQAGfIwCpUA I think this example illustrates better what I mean and why we don't need default values here.\r\n\r\nAnd the `State` is used inside the action, but it's irrelevant to the output as you can see in the return type `Promise<RSAAResultAction<Payload, Meta>>;`. As it doesn't provide any value, I left it out.",
        "createdAt" : "2019-09-30T12:19:13Z",
        "updatedAt" : "2019-09-30T12:19:14Z",
        "lastEditedBy" : "e3469a12-f077-474a-ab26-f71be56a818d",
        "tags" : [
        ]
      },
      {
        "id" : "eef2b6fb-cf54-4b24-b5e2-ae31ebeaa9f0",
        "parentId" : "7f9fe0e8-2adb-4e92-9668-31771f61ccd7",
        "authorId" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "body" : "Ok, I agree",
        "createdAt" : "2019-09-30T12:22:36Z",
        "updatedAt" : "2019-09-30T12:22:36Z",
        "lastEditedBy" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "tags" : [
        ]
      },
      {
        "id" : "cf5d8e5d-795d-4822-96e3-ef023461b315",
        "parentId" : "7f9fe0e8-2adb-4e92-9668-31771f61ccd7",
        "authorId" : "e3469a12-f077-474a-ab26-f71be56a818d",
        "body" : "Cool! I appreciate you taking your time to give the feedback. Thanks!",
        "createdAt" : "2019-09-30T12:25:10Z",
        "updatedAt" : "2019-09-30T12:25:10Z",
        "lastEditedBy" : "e3469a12-f077-474a-ab26-f71be56a818d",
        "tags" : [
        ]
      }
    ],
    "commit" : "97c6332ad9699b2c07fc1d5963da78bfbef9944b",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +157,161 @@     */\n    interface Dispatch {\n        <Payload, Meta>(action: RSAAAction<any, Payload, Meta>): Promise<RSAAResultAction<Payload, Meta>>;\n        // `Promise<undefined> is returned in case of RSAA validation errors or user bails out\n        (action: RSAAAction): Promise<undefined>;"
  }
]