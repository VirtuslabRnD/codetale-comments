[
  {
    "id" : "8bfd72e7-beff-4626-b745-efb792c55807",
    "prId" : 36666,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36666#pullrequestreview-259230248",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b66b2511-f13e-496c-9f05-21f454ea672b",
        "parentId" : null,
        "authorId" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "body" : "`message` property is missing.",
        "createdAt" : "2019-07-09T01:25:52Z",
        "updatedAt" : "2019-07-09T07:58:36Z",
        "lastEditedBy" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "tags" : [
        ]
      }
    ],
    "commit" : "25f83d4991ca5dbdece496fdf3ec3023d08dd343",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@}\n\nexport class InternalError extends Error {\n    name: 'InternalError';\n    message: string;"
  },
  {
    "id" : "bbb0be53-dc07-4708-8414-01b5205171e2",
    "prId" : 36666,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36666#pullrequestreview-259230248",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "749595c9-4885-45be-9a65-73d09cbf67f7",
        "parentId" : null,
        "authorId" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "body" : "`message` property is missing.",
        "createdAt" : "2019-07-09T01:26:05Z",
        "updatedAt" : "2019-07-09T07:58:36Z",
        "lastEditedBy" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "tags" : [
        ]
      }
    ],
    "commit" : "25f83d4991ca5dbdece496fdf3ec3023d08dd343",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +39,43 @@}\n\nexport class RequestError extends Error {\n    name: 'RequestError';\n    message: string;"
  },
  {
    "id" : "34867f74-0286-4e10-a51b-7c88e0cfdaa3",
    "prId" : 36666,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36666#pullrequestreview-259230248",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c44dba2-b205-4e52-a6c9-e8e5de84786d",
        "parentId" : null,
        "authorId" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "body" : "`message` property is missing.",
        "createdAt" : "2019-07-09T01:27:06Z",
        "updatedAt" : "2019-07-09T07:58:36Z",
        "lastEditedBy" : "1985e37c-2f23-4a96-8385-ab8d42e6573b",
        "tags" : [
        ]
      }
    ],
    "commit" : "25f83d4991ca5dbdece496fdf3ec3023d08dd343",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +45,49 @@}\n\nexport class ApiError<T extends object = any> extends Error {\n    name: 'ApiError';\n    status: number;"
  },
  {
    "id" : "9a6c48a1-4725-468d-8a42-f1c2811c3a03",
    "prId" : 36666,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36666#pullrequestreview-279278453",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ed2f799-9210-48c5-a23b-f0ee6ba34145",
        "parentId" : null,
        "authorId" : "fef24065-ddcd-470c-a3f5-fe8f66907629",
        "body" : "Day 1 of Typescript for me so please correct me if I'm wrong...should this line instead be `endpoint: ((state: S) => string) | string;`\r\n\r\nSeems that this is currently saying the function must return a string or a string, instead of, a string or a function that returns a string? \r\n\r\n\r\n\r\n",
        "createdAt" : "2019-08-19T16:08:39Z",
        "updatedAt" : "2019-08-19T16:08:39Z",
        "lastEditedBy" : "fef24065-ddcd-470c-a3f5-fe8f66907629",
        "tags" : [
        ]
      },
      {
        "id" : "c59261b5-8b33-4505-9f10-52074acdde7b",
        "parentId" : "0ed2f799-9210-48c5-a23b-f0ee6ba34145",
        "authorId" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "body" : "Yeap, you're right. Now it seems is evaluated how you said\r\n```\r\n(state: S) => (string | string);\r\n```\r\nand `string | string` equals `string`",
        "createdAt" : "2019-08-23T22:41:59Z",
        "updatedAt" : "2019-08-23T22:41:59Z",
        "lastEditedBy" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "tags" : [
        ]
      },
      {
        "id" : "5a871432-c055-449a-b060-4c8f14ccfeaa",
        "parentId" : "0ed2f799-9210-48c5-a23b-f0ee6ba34145",
        "authorId" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "body" : "And not only this one, but all lines that have a type or a function with same exact return type. Also strange behaviour\r\n```ts\r\n// type-test.ts\r\ntype Test1 = string | arg => string;\r\ntype Test2 = string | (arg: any) => string;\r\ntype Test3 = arg => string | string;\r\ntype Test4 = (arg: any) => string | string;\r\n```\r\n```bash\r\nandreiluca@trolic:~/Downloads|â‡’  npx typescript --noEmit type-test.ts\r\nnpx: installed 1 in 2.855s\r\n\r\ntype-test.ts:1:27 - error TS1005: ';' expected.\r\n1 type Test1 = string | arg => string;\r\n                            ~~\r\n\r\ntype-test.ts:2:27 - error TS1005: ')' expected.\r\n2 type Test2 = string | (arg: any) => string;\r\n                            ~\r\n\r\ntype-test.ts:2:32 - error TS1005: ';' expected.\r\n2 type Test2 = string | (arg: any) => string;\r\n                                 ~\r\n\r\ntype-test.ts:2:34 - error TS1128: Declaration or statement expected.\r\n2 type Test2 = string | (arg: any) => string;\r\n                                   ~~\r\n\r\ntype-test.ts:3:18 - error TS1005: ';' expected.\r\n3 type Test3 = arg => string | string;\r\n                   ~~\r\n```",
        "createdAt" : "2019-08-23T22:54:43Z",
        "updatedAt" : "2019-08-23T22:54:43Z",
        "lastEditedBy" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "tags" : [
        ]
      },
      {
        "id" : "00417d72-c047-4235-9d9d-f4db4548d846",
        "parentId" : "0ed2f799-9210-48c5-a23b-f0ee6ba34145",
        "authorId" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "body" : "One solution is to create some aliases\r\n```ts\r\ntype TypeResolver<Type, State> = (state: State) => Type;\r\ntype TypeOrResolver<Type, State> = Type | TypeResolver<Type, State>;\r\n\r\nexport interface RSAACall<S = any, P = any, M = any> {\r\n    endpoint: TypeOrResolver<string, S>;\r\n    body?: TypeOrResolver<BodyInit | null, S>;\r\n    headers?: TypeOrResolver<HeadersInit | HeadersInit, S>;\r\n    options?: TypeOrResolver<RequestInit | RequestInit, S>;\r\n}\r\n\r\nconst test: RSAACall<number> = {\r\n    endpoint: (a: number) => ''\r\n    // ...\r\n}\r\n```\r\n\r\n@Mrman Would you like to crete a PR for fixing this? Or I'll fix it.",
        "createdAt" : "2019-08-23T23:33:22Z",
        "updatedAt" : "2019-08-23T23:33:23Z",
        "lastEditedBy" : "3cf19e23-0b1f-4828-938c-9bc949ab2cb7",
        "tags" : [
        ]
      },
      {
        "id" : "f9049da2-427c-4f03-809c-10b074fdacc0",
        "parentId" : "0ed2f799-9210-48c5-a23b-f0ee6ba34145",
        "authorId" : "fef24065-ddcd-470c-a3f5-fe8f66907629",
        "body" : "I'll fix in the next day or two. I probably won't go down the alias route, feels like more indirection for something that is fairly simple.\r\n\r\nThanks for replying!",
        "createdAt" : "2019-08-24T06:48:25Z",
        "updatedAt" : "2019-08-24T06:48:35Z",
        "lastEditedBy" : "fef24065-ddcd-470c-a3f5-fe8f66907629",
        "tags" : [
        ]
      }
    ],
    "commit" : "25f83d4991ca5dbdece496fdf3ec3023d08dd343",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +84,88 @@\nexport interface RSAACall<S = any, P = any, M = any> {\n    endpoint: (state: S) => string | string;\n    method: string;\n    types: ["
  }
]