[
  {
    "id" : "ee1677d1-5a13-4e2c-a975-7775f82def9a",
    "prId" : 23027,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23027#pullrequestreview-90978273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "539fb407-e1c0-4c3c-ba90-858d9c4ca39d",
        "parentId" : null,
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "Could you explain in more detail why this change is needed? Adding an index signature like this generally reduces type safety.",
        "createdAt" : "2018-01-23T20:01:31Z",
        "updatedAt" : "2018-01-23T20:02:10Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "a532fa3d-8915-4006-b220-064a4b21e6a1",
        "parentId" : "539fb407-e1c0-4c3c-ba90-858d9c4ca39d",
        "authorId" : "2ea00645-e66a-4a5e-9df0-8cba1476b86a",
        "body" : "If you want to extend an actual chart type on `chart.js`, you also need to create a default value for this chart, because of a bug. See [this doc](http://www.chartjs.org/docs/latest/developers/charts.html#extending-existing-chart-types) : \r\n\r\n> // Sets the default config for 'derivedBubble' to be the same as the bubble defaults. \r\n> // We look for the defaults by doing Chart.defaults[chartType]\r\n> // It looks like a bug exists when the defaults don't exist\r\n> Chart.defaults.derivedBubble = Chart.defaults.bubble;\r\n\r\nThe configuration can be anything you need in your new chart type, so you can have a strong type safety.",
        "createdAt" : "2018-01-23T20:09:57Z",
        "updatedAt" : "2018-01-23T20:11:59Z",
        "lastEditedBy" : "2ea00645-e66a-4a5e-9df0-8cba1476b86a",
        "tags" : [
        ]
      },
      {
        "id" : "0889aafe-612b-4ffe-803c-54a8feca851b",
        "parentId" : "539fb407-e1c0-4c3c-ba90-858d9c4ca39d",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "OK, thanks!",
        "createdAt" : "2018-01-23T20:57:43Z",
        "updatedAt" : "2018-01-23T20:57:43Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f00743f35ad75e31853251c626fc2ed1db5264dd",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +38,42 @@    static defaults: {\n        global: Chart.ChartOptions & Chart.ChartFontOptions;\n        [key: string]: any;\n    };\n"
  },
  {
    "id" : "7bf37d40-3581-4ecd-a077-30c3252f62e8",
    "prId" : 23157,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23157#pullrequestreview-91821468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9892eff5-2d87-4037-aa97-6d2f8b0204f2",
        "parentId" : null,
        "authorId" : "b2fd457e-9380-4fb0-b68d-d937e6feb08d",
        "body" : "I’m not sure if the return type should be `any`, but the documentation doesn’t say anything… I’m guessing it casts the return value to boolean, so this is fair enough.",
        "createdAt" : "2018-01-26T12:23:57Z",
        "updatedAt" : "2018-01-26T12:24:15Z",
        "lastEditedBy" : "b2fd457e-9380-4fb0-b68d-d937e6feb08d",
        "tags" : [
        ]
      }
    ],
    "commit" : "11b2511331c07c446b8c92d9330d83c564cb1dd3",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +234,238 @@        padding?: number;\n        generateLabels?(chart: any): any;\n        filter?(item: ChartLegendItem, data: ChartData): any;\n        usePointStyle?: boolean;\n    }"
  },
  {
    "id" : "ba2894eb-10d3-4446-8d10-80331a5fedd2",
    "prId" : 27046,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/27046#pullrequestreview-134320132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "828f6ad7-3387-4703-98ae-e7fdc019b78a",
        "parentId" : null,
        "authorId" : "2ea00645-e66a-4a5e-9df0-8cba1476b86a",
        "body" : "FYI, a global plugin can also be registered without an ID : [example](https://github.com/chartjs/Chart.js/blob/master/samples/advanced/data-labelling.html#L73)",
        "createdAt" : "2018-07-04T10:13:01Z",
        "updatedAt" : "2018-07-05T17:20:13Z",
        "lastEditedBy" : "2ea00645-e66a-4a5e-9df0-8cba1476b86a",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c807d865acf0f41b1d71d8a6ab7b584972cc9fd",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +66,70 @@\ninterface PluginServiceGlobalRegistration {\n    id?: string;\n}\n"
  },
  {
    "id" : "210b7d19-8368-43c5-81c7-ec773ab33bd6",
    "prId" : 40537,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/40537#pullrequestreview-325461373",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1169254-7f6b-436a-98a0-8d7bad1e4d74",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "Was this intended to be a subtype of Model?  If not, it seems like the properties that are on `Model` but not `DoughnutModel` will be unavailable on `ModelType`.",
        "createdAt" : "2019-11-25T22:40:33Z",
        "updatedAt" : "2019-12-02T17:59:07Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "1ce03b75-7ae6-46c8-9cef-9acf71cd983b",
        "parentId" : "a1169254-7f6b-436a-98a0-8d7bad1e4d74",
        "authorId" : "01caf2f2-0152-41c3-bdc9-7bf7b44ad6e0",
        "body" : "Good catch! These would be major breaking changes as they are currently written, which I didn't realize at first.\r\n\r\nI wasn't intending for `DoughnutModel` to be a subtype of `Model`. Each chart model seemed very different looking at the chart.js code. I was hoping these models would be very explicit on what properties are going to be defined to avoid a bunch of optional properties or base properties defined that would never have values. For example, I didn't want to just add `circumference?: number;` to the `Model` definition because when I get the data for the Doughnut chart I know it is always defined.\r\n\r\nAny suggestions on how to proceed?\r\n\r\nI was thinking that the model and view definitions would eventually turn into something like `_model: BarModel | BubbleModel | DoughnutModel | LineModel | PolarAreaModel | RadarModel;` long-term. That was my mindset when creating this change. I don't have the time to do that right now so I just focused on getting the DoughnutModel updated on this PR.",
        "createdAt" : "2019-11-26T01:20:10Z",
        "updatedAt" : "2019-12-02T17:59:07Z",
        "lastEditedBy" : "01caf2f2-0152-41c3-bdc9-7bf7b44ad6e0",
        "tags" : [
        ]
      },
      {
        "id" : "8d873f25-82f0-4f99-b6b1-456cfc6ed055",
        "parentId" : "a1169254-7f6b-436a-98a0-8d7bad1e4d74",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "How would a consumer know which of the XModel types to use?  Without that information, they'd only have access to the properties common to all of them.",
        "createdAt" : "2019-11-26T01:24:25Z",
        "updatedAt" : "2019-12-02T17:59:07Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "3c37c230-67d1-41ec-873f-1b6ebbb26d1c",
        "parentId" : "a1169254-7f6b-436a-98a0-8d7bad1e4d74",
        "authorId" : "01caf2f2-0152-41c3-bdc9-7bf7b44ad6e0",
        "body" : "Consumers would need to use `as` to use assertion to one of the specific types of models. Otherwise, yes they would just get the common properties across all union types. That might not be a good way to do this because consumers might not know they need to do that even if the names of the models match the chart types.\r\n\r\nIs there a better way to add these missing properties from the Doughnut chart without making everything optional? When I create a Doughnut chart, I know the chart's data will be in a specific format so I was hoping I could reflect that in these definitions somehow.",
        "createdAt" : "2019-11-26T01:45:16Z",
        "updatedAt" : "2019-12-02T17:59:07Z",
        "lastEditedBy" : "01caf2f2-0152-41c3-bdc9-7bf7b44ad6e0",
        "tags" : [
        ]
      },
      {
        "id" : "6f27c86b-1402-4d4a-8620-8294d27dc95c",
        "parentId" : "a1169254-7f6b-436a-98a0-8d7bad1e4d74",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "One common way to handle this would be to have a `kind` property on the model that tells you which set of properties are available.  I take it the underlying library doesn't have anything like that.  If you were consuming `_model` in pure JS, how would you know which properties to look at?",
        "createdAt" : "2019-11-26T01:55:42Z",
        "updatedAt" : "2019-12-02T17:59:07Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "bc9480a6-bf68-4483-8eeb-8345f4bf3056",
        "parentId" : "a1169254-7f6b-436a-98a0-8d7bad1e4d74",
        "authorId" : "01caf2f2-0152-41c3-bdc9-7bf7b44ad6e0",
        "body" : "The chart.js library seems to define a completely different `_model` structure for each type of chart it can render. It seems like inherent knowledge of the type of chart being rendered is needed for the `_model` property to be of any use to consumers.\r\n\r\n* [Bubble _model](https://github.com/chartjs/Chart.js/blob/master/src/controllers/controller.bubble.js#L140-L151)\r\n* [Doughnut _model](https://github.com/chartjs/Chart.js/blob/master/src/controllers/controller.doughnut.js#L242-L257)\r\n* [Line _model](https://github.com/chartjs/Chart.js/blob/master/src/controllers/controller.line.js#L122-L135)\r\n\r\nNo common `kind` (or the equivalent) property seems to exist in the JS form. If that did exist, doing the discriminated unions would be possible.",
        "createdAt" : "2019-11-26T02:12:16Z",
        "updatedAt" : "2019-12-02T17:59:07Z",
        "lastEditedBy" : "01caf2f2-0152-41c3-bdc9-7bf7b44ad6e0",
        "tags" : [
        ]
      },
      {
        "id" : "902f5da0-d6ac-4dbf-8f78-6ac261f0a1c5",
        "parentId" : "a1169254-7f6b-436a-98a0-8d7bad1e4d74",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "Personally, I haven't seen a good solution to this problem.  Options including loading `Model` with an optional declaration of every possible property, or cobbling together something like \r\n\r\n```ts\r\ninterface Model1 {\r\n    P1: string;\r\n    P2: number;\r\n    P3?: never;\r\n}\r\ninterface Model2 {\r\n    P1?:never;\r\n    P2: number;\r\n    P3: boolean;\r\n}\r\n\r\ndeclare const _model: Model1 | Model2;\r\n```\r\n\r\n`_model` will have `P1` and `P3` optional and `P2` required and the declaration accurately conveys that the caller should probably assert one of the individual model types.  The downside is that all the declarations have to stay in sync (there might be something clever you can do with index signatures, but I didn't find it while experimenting).",
        "createdAt" : "2019-11-26T02:47:00Z",
        "updatedAt" : "2019-12-02T17:59:07Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "6090d327-1e5f-4ef9-9b11-df58459f9c34",
        "parentId" : "a1169254-7f6b-436a-98a0-8d7bad1e4d74",
        "authorId" : "01caf2f2-0152-41c3-bdc9-7bf7b44ad6e0",
        "body" : "I think I'll pursue the optional declaration for every possible property on `Model` to not break existing users and then possibly still export `DoughnutModel` for users that want to assert to that model type. I don't like the other option of adding a bunch of `never` properties for the `DoughnutModel`. That seems to unnecessarily complicate that model and keeping everything in sync seems difficult.",
        "createdAt" : "2019-12-02T17:05:47Z",
        "updatedAt" : "2019-12-02T17:59:07Z",
        "lastEditedBy" : "01caf2f2-0152-41c3-bdc9-7bf7b44ad6e0",
        "tags" : [
        ]
      },
      {
        "id" : "944c16d8-10a6-4035-9428-4dd3b6387a06",
        "parentId" : "a1169254-7f6b-436a-98a0-8d7bad1e4d74",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "Understandable.  Sorry I didn't have a better answer for you.",
        "createdAt" : "2019-12-02T18:53:09Z",
        "updatedAt" : "2019-12-02T18:53:09Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "e353850d-438f-4506-9b1e-b965a77c9ad7",
        "parentId" : "a1169254-7f6b-436a-98a0-8d7bad1e4d74",
        "authorId" : "01caf2f2-0152-41c3-bdc9-7bf7b44ad6e0",
        "body" : "That's okay. Hopefully as these definitions progress, we can come up with a better solution for this scenario.\r\n\r\nThanks for all the help with this PR. I really appreciate the discussion.",
        "createdAt" : "2019-12-02T19:03:34Z",
        "updatedAt" : "2019-12-02T19:03:34Z",
        "lastEditedBy" : "01caf2f2-0152-41c3-bdc9-7bf7b44ad6e0",
        "tags" : [
        ]
      }
    ],
    "commit" : "552e4031b67b367855bac9aace7f7f905a6d50bb",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +813,817 @@\n    // Model used with the doughnut chart\n    interface DoughnutModel {\n        backgroundColor: ChartColor;\n        borderAlign: BorderAlignment;"
  },
  {
    "id" : "e8c1f587-2e98-45b5-821a-66482a9900a3",
    "prId" : 44519,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/44519#pullrequestreview-414404008",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b837300-dd55-4c74-997a-5f700ce0ca45",
        "parentId" : null,
        "authorId" : "5eb6ed4e-f750-4cd2-bf19-f5ce28104c28",
        "body" : "Will this produce the exact same result as the row you removed?",
        "createdAt" : "2020-05-15T06:51:15Z",
        "updatedAt" : "2020-05-19T12:44:58Z",
        "lastEditedBy" : "5eb6ed4e-f750-4cd2-bf19-f5ce28104c28",
        "tags" : [
        ]
      },
      {
        "id" : "8d650e9f-0c7c-4e46-aaa0-c336a9e3882e",
        "parentId" : "5b837300-dd55-4c74-997a-5f700ce0ca45",
        "authorId" : "59874ad7-6bc6-43a6-9f1f-6ffddbb8a3c2",
        "body" : "Yes, this will produce the exact result/typing as the row that was removed, just now it's also extensible.",
        "createdAt" : "2020-05-19T12:42:24Z",
        "updatedAt" : "2020-05-19T12:44:58Z",
        "lastEditedBy" : "59874ad7-6bc6-43a6-9f1f-6ffddbb8a3c2",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad808ed1969bf4ac77b08e79c2e5d2eeb051e69",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +171,175 @@        'y': 'y';\n    }\n    type InteractionMode = InteractionModeRegistry[keyof InteractionModeRegistry];\n\n    type Easing = 'linear' | 'easeInQuad' | 'easeOutQuad' | 'easeInOutQuad' | 'easeInCubic' | 'easeOutCubic' | 'easeInOutCubic' |"
  }
]