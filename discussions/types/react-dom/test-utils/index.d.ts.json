[
  {
    "id" : "05cc0425-d94b-41c0-80d4-d0ea398a6c2f",
    "prId" : 37554,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/37554#pullrequestreview-274013908",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9a47c74-49e8-4202-ad70-4777feb86df1",
        "parentId" : null,
        "authorId" : "89785281-b9fb-4be9-b5a6-d294762ff6ea",
        "body" : "I don't think this needs multiple signatures; `DebugPromiseLike` is promise-like, after all:\r\n\r\n```ts\r\nexport function act(callback: () => Promise<void | undefined> | void | undefined): DebugPromiseLike;\r\n```\r\n\r\nshould be fine. And I'm not sure if it even needs the whole `void | undefined` thing now that it doesn't need to catch promises in a special way. Maybe getting rid of the `undefined`s and just using `void`s is fine now? I don't really understand how that bit was working before. It could also be changed to simply `() => any`, but that doesn't get the intended semantics across so well.",
        "createdAt" : "2019-08-12T09:12:24Z",
        "updatedAt" : "2019-08-12T09:12:24Z",
        "lastEditedBy" : "89785281-b9fb-4be9-b5a6-d294762ff6ea",
        "tags" : [
        ]
      },
      {
        "id" : "08208e41-8166-4403-af64-c4ef6ab3dcfd",
        "parentId" : "f9a47c74-49e8-4202-ad70-4777feb86df1",
        "authorId" : "04e09978-475a-4333-8639-a85b17b7429f",
        "body" : "`DebugPromiseLike` is here to throw type errors because it will trigger react warnings if you await the sync act and more importantly can cause subtle scheduling bugs.\r\n\r\n`() => any` is not valid either because react will warn if you return anything but a thenable from it.",
        "createdAt" : "2019-08-12T09:23:34Z",
        "updatedAt" : "2019-08-12T09:23:34Z",
        "lastEditedBy" : "04e09978-475a-4333-8639-a85b17b7429f",
        "tags" : [
        ]
      },
      {
        "id" : "7eef1ee6-39f4-4e0e-a61c-3c5d9b7703cf",
        "parentId" : "f9a47c74-49e8-4202-ad70-4777feb86df1",
        "authorId" : "89785281-b9fb-4be9-b5a6-d294762ff6ea",
        "body" : "Ah, in that case I think the first signature should become a regular promise, because the recommendation now is to `await` even synchronous `act` (if you give it a synchronous function, it may still wait for asynchronous tasks). So maybe combine them with a `Promise<void>` return type?",
        "createdAt" : "2019-08-12T11:08:25Z",
        "updatedAt" : "2019-08-12T11:08:25Z",
        "lastEditedBy" : "89785281-b9fb-4be9-b5a6-d294762ff6ea",
        "tags" : [
        ]
      },
      {
        "id" : "ad03d215-cf4c-48d4-9036-7ede2739c8b8",
        "parentId" : "f9a47c74-49e8-4202-ad70-4777feb86df1",
        "authorId" : "04e09978-475a-4333-8639-a85b17b7429f",
        "body" : "> because the recommendation now is to await even synchronous act \r\n\r\nDo you have a link for that? I remember a PR where the author for async act explicitly told me this can cause bugs and I'm fairly certain this still issues warnings from react.",
        "createdAt" : "2019-08-12T11:37:25Z",
        "updatedAt" : "2019-08-12T11:37:25Z",
        "lastEditedBy" : "04e09978-475a-4333-8639-a85b17b7429f",
        "tags" : [
        ]
      },
      {
        "id" : "816136e9-5d55-45eb-9bbe-b09e38293c54",
        "parentId" : "f9a47c74-49e8-4202-ad70-4777feb86df1",
        "authorId" : "89785281-b9fb-4be9-b5a6-d294762ff6ea",
        "body" : "Hmm, looks like I made it up, which is weird because I distinctly remember seeing that from a maintainer in the [original tracker](https://github.com/facebook/react/issues/14769). Maybe it was an early thought which got edited out. Anyway doesn't seem to be the case, so I guess it does have to be 2 separate signatures.",
        "createdAt" : "2019-08-13T00:29:06Z",
        "updatedAt" : "2019-08-13T00:29:06Z",
        "lastEditedBy" : "89785281-b9fb-4be9-b5a6-d294762ff6ea",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b8bfaf2535d019de888b1dee69b74ac95ca0acc",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +295,299 @@// the \"void | undefined\" is here to forbid any sneaky return values\n// tslint:disable-next-line: void-return\nexport function act(callback: () => Promise<void | undefined>): Promise<undefined>;\n\n// Intentionally doesn't extend PromiseLike<never>."
  }
]