[
  {
    "id" : "196d9b3c-da81-4f97-b62f-8f9f04819367",
    "prId" : 26323,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26323#pullrequestreview-126879552",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9160283-d7c6-4eca-bc77-e382340269d5",
        "parentId" : null,
        "authorId" : "28e87784-ba04-40fa-8839-785cd7f63920",
        "body" : "I would also recommend adding `CustomInput` to the `GenericPropExample` and `AnyPropExample`.",
        "createdAt" : "2018-06-07T15:39:53Z",
        "updatedAt" : "2018-06-07T20:49:33Z",
        "lastEditedBy" : "28e87784-ba04-40fa-8839-785cd7f63920",
        "tags" : [
        ]
      },
      {
        "id" : "0e7392d1-f31f-40e6-add7-d05a4f3b799f",
        "parentId" : "a9160283-d7c6-4eca-bc77-e382340269d5",
        "authorId" : "166cabd8-b1bb-48e9-b8d1-13f601d56a5c",
        "body" : "Included in 405abf2",
        "createdAt" : "2018-06-07T17:22:38Z",
        "updatedAt" : "2018-06-07T20:49:33Z",
        "lastEditedBy" : "166cabd8-b1bb-48e9-b8d1-13f601d56a5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "03041459989ac55f3031e9bef0492482a5575f91",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +4057,4061 @@  );\n}\n\nclass Example119 extends React.Component<any, any> {\n  render() {"
  },
  {
    "id" : "8be472ae-8d2a-40f2-916f-e24a2539f9ef",
    "prId" : 30331,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30331#pullrequestreview-172372076",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c08da012-7504-444c-9d85-f23d71c82f5f",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Even just `props => <Button>{props.children}</Button>` would cause crazy build errors but _only_ in dtslint. The error wouldn't be flagged by tsservice inside vscode even with the version correctly set to use node_modules'.\r\n\r\n```\r\nERROR: 287:62  expect  TypeScript@next compile error:\r\nType '{ children: ReactNode; }' is not assignable to type 'Readonly<ButtonProps<{ children: {}; }>>'.\r\n  Types of property 'children' are incompatible.\r\n    Type 'ReactNode' is not assignable to type '{} | ReactElement<any> | ReactNodeArray | ReactPortal | (string & {}) | (number & {}) | (false & {}) | (true & {})'.\r\n      Type 'undefined' is not assignable to type '{} | ReactElement<any> | ReactNodeArray | ReactPortal | (string & {}) | (number & {}) | (false & {}) | (true & {})'.\r\n```\r\n",
        "createdAt" : "2018-11-07T04:53:51Z",
        "updatedAt" : "2018-11-07T08:54:17Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "f41fb04c-9304-44a1-ad37-fbd0a69c40fa",
        "parentId" : "c08da012-7504-444c-9d85-f23d71c82f5f",
        "authorId" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "body" : "Hm. It *looks* like the SFC definition of `children` (it intersects it with the passed props to form the argument type in the react .d.ts) is incompatible with the `children` of `CustomButtonProps`. I'd be interested in looking at this a bit more. It might be that inference is failing for some reason. Would you mind opening an issue on the TS repo to track it, so I remember to look at it soon even if you merge this to get DT's react PRs flowing again?",
        "createdAt" : "2018-11-07T05:29:59Z",
        "updatedAt" : "2018-11-07T08:54:17Z",
        "lastEditedBy" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "tags" : [
        ]
      },
      {
        "id" : "6a7c48af-d38f-46a1-b85d-24ed8e0a37c9",
        "parentId" : "c08da012-7504-444c-9d85-f23d71c82f5f",
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "It's really weird, because both SFC's definition and ButtonProps' definitions are `children?: ReactNode`. The type of `props.children` according to tooltip _is_ `ReactNode`. It just gets inferred as `children: {}` in the generic which causes `ReactNode` to be `& {}`ed.\r\n\r\nI also couldn't reproduce it in the IDE, only with dtslint, so I'll see if it still happens when I rerun the tests for the other generics.",
        "createdAt" : "2018-11-07T05:34:42Z",
        "updatedAt" : "2018-11-07T08:54:17Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "0f696a9d-9396-47d6-8c03-e8111d4b184c",
        "parentId" : "c08da012-7504-444c-9d85-f23d71c82f5f",
        "authorId" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "body" : "Hm. Yeah, definitely sounds odd, at least. The \"`{}` instead of the written value\" description sounds a lot like an inference failure of some sort. Since it could be indicative of a flaw in our inference, it bears looking into if reproducible.",
        "createdAt" : "2018-11-07T05:40:52Z",
        "updatedAt" : "2018-11-07T08:54:17Z",
        "lastEditedBy" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "tags" : [
        ]
      },
      {
        "id" : "90e8b3a5-465a-4f41-8592-dd15fb8cf819",
        "parentId" : "c08da012-7504-444c-9d85-f23d71c82f5f",
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Yeah, it still happened with today's nightly but again **only** in dtslint; I couldn't get it to happen at all with \"use workspace version `3.2.0-dev.20181107`\" inside vscode.\r\n\r\nI'll make an issue in a bit.",
        "createdAt" : "2018-11-07T08:02:57Z",
        "updatedAt" : "2018-11-07T08:54:17Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      }
    ],
    "commit" : "35781a36476f26b7021ea73af37064ad50b609fc",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +285,289 @@// for some reason this causes children to be inferred as being 'ReactNode & {}' which makes the spread\n// invalid. TS3.2 bug?\nconst CustomButton: React.SFC<CustomButtonProps> = props => <Button<{}> {...props}/>;\n\nclass Example14 extends React.Component<any, any> {"
  }
]