[
  {
    "id" : "4caf0662-12e7-4f90-a467-7aae986957f5",
    "prId" : 16641,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/16641#pullrequestreview-41811134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a65ccfa-86eb-4f5b-8ddc-e71ce54469ae",
        "parentId" : null,
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "So what makes this cast valid? Do the constructor options somehow determine it, or is the cast just an expression of intent?",
        "createdAt" : "2017-06-02T14:04:06Z",
        "updatedAt" : "2017-06-02T15:14:26Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "17e8c0d0-2892-4f0c-b680-d34569c45330",
        "parentId" : "3a65ccfa-86eb-4f5b-8ddc-e71ce54469ae",
        "authorId" : "9a9fe0e4-7a6d-42e8-af3d-b2441eb882c3",
        "body" : "This is more of a convenience to restrict the types of arguments that can be passed to the array member functions.\r\n\r\nThe return value of the constructor with cast is basically of type:\r\n```typescript\r\nlet table: Array<HorizontalTableRow>; // or other element type depending on the cast\r\n```\r\nThe return value of the constructor without cast is basically of type:\r\n```typescript\r\nlet table: Array<HorizontalTableRow> | Array<VerticalTableRow> | Array<CrossTableRow>;\r\n```\r\nwhich results in a push method having type:\r\n```typescript\r\npush: ((...items: HorizontalTableRow[]) => number) | ((...items: VerticalTableRow[]) => number) | ((...items: CrossTableRow[]) => number)\r\n```\r\nand passing a value of one of the three element types above gives:\r\n\r\n> Cannot invoke an expression whose type lacks a call signature. Type '((...items: HorizontalTableRow[]) => number) | ((...items: VerticalTableRow[]) => number) | ((...items: Cross...' has no compatible call signatures.\r\n\r\ninstead of what i wanted it to be:\r\n```typescript\r\npush: (...items: HorizontalTableRow[] | VerticalTableRow[] | CrossTableRow[]) => number\r\n```\r\n",
        "createdAt" : "2017-06-02T14:49:08Z",
        "updatedAt" : "2017-06-02T15:14:26Z",
        "lastEditedBy" : "9a9fe0e4-7a6d-42e8-af3d-b2441eb882c3",
        "tags" : [
        ]
      },
      {
        "id" : "ca57e48b-09db-46a5-80cb-63a780c6ec02",
        "parentId" : "3a65ccfa-86eb-4f5b-8ddc-e71ce54469ae",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "OK, I can't think of a better way to do that then.",
        "createdAt" : "2017-06-02T15:41:46Z",
        "updatedAt" : "2017-06-02T15:41:46Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a7920efe654c68d4dbffa13f986f3156c29ead3",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +11,15 @@\n// Vertical table\nconst table2 = new Table() as Table.VerticalTable;\ntable2.push(\n    { 'Some key': 'Some value' },"
  }
]