[
  {
    "id" : "c3addd15-5c81-4189-85ce-e6710050de28",
    "prId" : 15895,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/15895#pullrequestreview-32934287",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b165188-52cb-47ba-af43-8092cbbdf0d6",
        "parentId" : null,
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "The tests for this started failing once I enabled `strictNullChecks`, so I fixed it to make the tests work.\r\n\r\nOn a side note, the tests are still failing for me with a different error now. But the error seems unrelated to my changes, and I also get the same error on DefinitelyTyped:master (which excludes my changes). The error is: Error: ENOTDIR: not a directory, scandir '/home/travis/build/aj-r/DefinitelyTyped/types/tslint.json'. ",
        "createdAt" : "2017-04-15T20:54:11Z",
        "updatedAt" : "2017-05-05T04:35:35Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e2500bd438480da0eac6fb97dcd2570df6671cf",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +18523,18527 @@         * @returns Returns the resolved value.\n         */\n        defaultTo<T>(value: T | null | undefined, defaultValue: T): T;\n    }\n"
  },
  {
    "id" : "e57eb8fa-315b-4607-8a66-f0f877b51ce3",
    "prId" : 17456,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17456#pullrequestreview-46127036",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90ddb914-087b-42d5-bf38-9214324a3ca2",
        "parentId" : null,
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "This feels a bit hacky, so I'm open to input on this one. This was the only way I could make my `let value: any` test pass. The issue is that without this line, typescript will use this overload: ` isArrayLike<any>(value: T | Function): value is any`. And if the function returns false, typescript says that `value` is now type `never`, which is wrong.",
        "createdAt" : "2017-06-24T14:25:39Z",
        "updatedAt" : "2017-06-24T14:25:39Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      },
      {
        "id" : "312a12f6-7dd5-42a0-8e79-fab3de7f79f7",
        "parentId" : "90ddb914-087b-42d5-bf38-9214324a3ca2",
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "Once we get [sutraction types](https://github.com/Microsoft/TypeScript/issues/4183) this should become a lot easier.",
        "createdAt" : "2017-06-24T14:27:37Z",
        "updatedAt" : "2017-06-24T14:27:37Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9a5643e4d784cf6855fd9c3237a435abc8bb0fc",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +12064,12068 @@         * // => false\n         */\n        isArrayLike<T>(value: T & string & number): boolean; // should only match if T = any\n    \n        /**"
  },
  {
    "id" : "9259c45b-7a47-4784-aeb2-4898ae9cec01",
    "prId" : 20717,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20717#pullrequestreview-71032506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47fd0c39-6f68-428d-a588-d5c7a261b581",
        "parentId" : null,
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "I don't like returning `object` because it's not assignable to pretty much anything. For example, this code will break:\r\n\r\n```\r\ninterface Person {\r\n    name: string;\r\n    age: number;\r\n}\r\n\r\nconst p: Person = _.zipObjectDeep([\"name\", \"age\"], [\"Joe\", 32]);\r\n```\r\n\r\nI would prefer to return `any` in the general case, and only return `object` if no arguments were provided.",
        "createdAt" : "2017-10-21T18:11:09Z",
        "updatedAt" : "2017-10-23T20:42:09Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      },
      {
        "id" : "60d843ea-80a1-4aa0-a23a-c1d91f968cdf",
        "parentId" : "47fd0c39-6f68-428d-a588-d5c7a261b581",
        "authorId" : "684aaf20-f23a-4b2a-8070-073a826b9c21",
        "body" : "In general, type assertions should be explicit. So instead of\r\n\r\n```ts\r\nconst p: Person = _.zipObjectDeep([\"name\", \"age\"], [\"Joe\", 32]);\r\n```\r\n\r\nit's better to write\r\n\r\n```ts\r\nconst p = _.zipObjectDeep([\"name\", \"age\"], [\"Joe\", 32]) as Person;\r\n```",
        "createdAt" : "2017-10-21T21:39:05Z",
        "updatedAt" : "2017-10-23T20:42:09Z",
        "lastEditedBy" : "684aaf20-f23a-4b2a-8070-073a826b9c21",
        "tags" : [
        ]
      },
      {
        "id" : "95478a5e-2bbb-4f15-b03a-75a61188d706",
        "parentId" : "47fd0c39-6f68-428d-a588-d5c7a261b581",
        "authorId" : "684aaf20-f23a-4b2a-8070-073a826b9c21",
        "body" : "@aj-r Do you insist on using `any`? If so I'll change it, but I don't feel like it's the right choice.",
        "createdAt" : "2017-10-22T12:26:19Z",
        "updatedAt" : "2017-10-23T20:42:09Z",
        "lastEditedBy" : "684aaf20-f23a-4b2a-8070-073a826b9c21",
        "tags" : [
        ]
      },
      {
        "id" : "d31d6068-4b54-4c51-9499-457c51c2364f",
        "parentId" : "47fd0c39-6f68-428d-a588-d5c7a261b581",
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "According to the [common mistakes](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/README.md#common-mistakes), it looks like you are right - we should be forcing people to use a type assertion. So I guess `object` is ok.",
        "createdAt" : "2017-10-22T12:57:29Z",
        "updatedAt" : "2017-10-23T20:42:09Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      }
    ],
    "commit" : "42fe57028a365eff11a14aab52588eada1b94463",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +3587,3591 @@            paths?: List<PropertyPath>,\n            values?: List<any>\n        ): object;\n    }\n"
  },
  {
    "id" : "d5773b5b-b09e-469e-b47c-41d9cba83d54",
    "prId" : 20795,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20795#pullrequestreview-73028383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f4db020-da71-420f-a687-0f87ff7f6e9f",
        "parentId" : null,
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "This seems like an odd choice if `T1` and `T2` are not comparable (e.g. when `comparator` is `undefined`). I would recommend you leave the original overload and add this one with both `values` and `comparator` as required, otherwise the entire method is much less type safe.",
        "createdAt" : "2017-10-31T00:38:51Z",
        "updatedAt" : "2017-11-03T00:39:44Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "b416b57ef56d950b8123d3291b12cc38163d6bb4",
    "line" : 351,
    "diffHunk" : "@@ -1,1 +829,833 @@         * // => [{ 'x': 2, 'y': 1 }]\n         */\n        differenceWith<T1, T2>(\n            array: List<T1> | null | undefined,\n            values: List<T2>,"
  }
]