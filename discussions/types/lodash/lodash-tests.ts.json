[
  {
    "id" : "b81fd537-c153-40af-9df5-2b3c9b067ca9",
    "prId" : 15895,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/15895#pullrequestreview-32934329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90d1745e-1b60-4266-99e0-feb5c974b753",
        "parentId" : null,
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "Here is the one thing I added to the tests: a check to make sure the type inference works correctly in strictNullChecks mode (so the type of `key` should be inferred as `string`, not `string | undefined`)",
        "createdAt" : "2017-04-15T20:58:04Z",
        "updatedAt" : "2017-05-05T04:35:35Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e2500bd438480da0eac6fb97dcd2570df6671cf",
    "line" : 1184,
    "diffHunk" : "@@ -1,1 +5069,5073 @@        result = _.some<SampleObject>(dictionary);\n        result = _.some<SampleObject>(numericDictionary, dictionaryIterator);\n        result = _.some<SampleObject>(dictionary, (value, key, collection) => {\n            value.a--;\n            key.substr(0);"
  },
  {
    "id" : "7a69edab-b9be-4e2c-927a-69294992d8e3",
    "prId" : 17503,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17503#pullrequestreview-46363870",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7609bd72-f897-4473-894e-cec7374cc4d1",
        "parentId" : null,
        "authorId" : "994ce329-a5cb-4357-afff-0652d8c4f62b",
        "body" : "you'll need to remove this white line to make the tslinter happy.",
        "createdAt" : "2017-06-26T19:48:31Z",
        "updatedAt" : "2017-06-27T07:54:34Z",
        "lastEditedBy" : "994ce329-a5cb-4357-afff-0652d8c4f62b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b999a376fc72577d9a3635911f7404b2343fb09",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +7680,7684 @@   }\n}\n\n// _.toInteger\nnamespace TestToInteger {"
  },
  {
    "id" : "f9f53e03-97b2-4f5e-820f-1198e8c45228",
    "prId" : 21015,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21015#pullrequestreview-73860406",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03dc1143-5bfd-4a59-8885-21d0cb852786",
        "parentId" : null,
        "authorId" : "684aaf20-f23a-4b2a-8070-073a826b9c21",
        "body" : "What is the point of this test? Type guards don't narrow down `any`.",
        "createdAt" : "2017-11-02T16:48:18Z",
        "updatedAt" : "2017-11-02T16:48:18Z",
        "lastEditedBy" : "684aaf20-f23a-4b2a-8070-073a826b9c21",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfdc7a320d3a8a722857452a2be62073539e2e5c",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +8065,8069 @@\n        if (_.isFunction(any)) {\n            any();\n        }\n    }"
  },
  {
    "id" : "4660eb9d-1f20-4223-9e96-b0b1ad0f92df",
    "prId" : 24052,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24052#pullrequestreview-101004013",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc82e58e-fced-4381-9115-2dcc4099b7cc",
        "parentId" : null,
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "Testing using `result = x` is an old way of doing it, and it's not very good because it only proves that `x` is *assignable to* `Array<AbcObject[keyof AbcObject]>`. It doesn't prove that the return type is *exactly* `Array<AbcObject[keyof AbcObject]>`. For example, `_.at()` could return `any`, and this test would still pass.\r\n\r\nA better way is to use `$ExpectType`:\r\n\r\n```ts\r\n_.at(abcObject, 'a', ['b'], ['a', 'b']); // $ExpectType AbcObject[keyof AbcObject][]\r\n```\r\n\r\nThe downside is that `dtslint` does a dumb string comparison when it sees `$ExpectType`, so your type needs to *exactly match* what `dtslint` is expecting, including whitespace. Also, you'll need to use `[]` instead of `Array<>`.\r\n\r\nAlso, since `$ExpectType` allows you to remove `let result: x;`, the braces (`{}`) are no longer necessary. i.e. instead of this:\r\n\r\n```ts\r\n{\r\n    _.at(abcObject, 'a', ['b'], ['a', 'b']); // $ExpectType AbcObject[keyof AbcObject][]\r\n}\r\n```\r\n\r\njust do this:\r\n\r\n```ts\r\n_.at(abcObject, 'a', ['b'], ['a', 'b']); // $ExpectType AbcObject[keyof AbcObject][]\r\n```",
        "createdAt" : "2018-03-03T15:13:33Z",
        "updatedAt" : "2018-03-14T22:58:37Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      },
      {
        "id" : "dfd5551e-c23c-4134-bab4-0ecbdb61288b",
        "parentId" : "dc82e58e-fced-4381-9115-2dcc4099b7cc",
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "This comment also applies to tests below.",
        "createdAt" : "2018-03-03T15:15:39Z",
        "updatedAt" : "2018-03-14T22:58:37Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      },
      {
        "id" : "773f8986-8e97-48cd-ba2e-3dd99ca93317",
        "parentId" : "dc82e58e-fced-4381-9115-2dcc4099b7cc",
        "authorId" : "b54acf2c-f89c-4e62-8310-6bf181eb8982",
        "body" : "Yeah; there were a couple bugs I found already that were masked by false positive test cases using  \"assignability\". I started updating some unit tests and writing new unit tests using $ExpectType comments later on. It's hard to decide when to follow the existing pattern vs when to rework to the better approach. Gotta be careful to avoid going down the rabbit hole that results in every unit test being rewritten and creating an impossibly gigantic PR to review.\r\n\r\nI'll work on updating some more of these test cases. Let me know if you have any good advice on how far down the rabbit hole I should go.",
        "createdAt" : "2018-03-04T05:06:05Z",
        "updatedAt" : "2018-03-14T22:58:37Z",
        "lastEditedBy" : "b54acf2c-f89c-4e62-8310-6bf181eb8982",
        "tags" : [
        ]
      },
      {
        "id" : "849c481b-26fd-48dc-889c-3b675405269e",
        "parentId" : "dc82e58e-fced-4381-9115-2dcc4099b7cc",
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "Agreed. In general, my approach is to clean up tests as I'm touching them. And if I create new ones, obviously create them using the better style. Probably don't worry about the tests where you only removed `<AbcObject>`, though.\r\n\r\nRight now, actually, don't go too crazy updating the tests. I just found out that in order to support `ReadonlyArray<T>`, I'm going to need to do some major optimizations to the tests, which means I'll probably end up converting them all to the new style anyway.",
        "createdAt" : "2018-03-04T12:23:11Z",
        "updatedAt" : "2018-03-14T22:58:37Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b04fda154816c9ab839991a0e480fddd259142e",
    "line" : 1526,
    "diffHunk" : "@@ -1,1 +4086,4090 @@        let result: Array<AbcObject[keyof AbcObject]>;\n\n        result = _.at(abcObject, 'a', ['b'], ['a', 'b']);\n    }\n"
  },
  {
    "id" : "b28cb166-e108-46cf-ab71-a03c14bdf8a7",
    "prId" : 24052,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24052#pullrequestreview-100976991",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47346255-a0fb-41f9-b28c-e275cdd1cb62",
        "parentId" : null,
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "Wow, I didn't even realize we were missing `mapValues` tests.\r\n\r\nLooks really good. Although probably make a few adjustments based on my previous comments.",
        "createdAt" : "2018-03-03T15:32:53Z",
        "updatedAt" : "2018-03-14T22:58:37Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      },
      {
        "id" : "03f99f63-850b-4862-86a7-e633ce53e03d",
        "parentId" : "47346255-a0fb-41f9-b28c-e275cdd1cb62",
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "Also, I feel like all of the braces (`{}`) aren't necessary since you don't ever do `let result: x;`. For other tests, the braces are needed to keep scopes separate. But that's not an issue here, so I would just use line breaks instead of braces to logically group things.",
        "createdAt" : "2018-03-03T15:35:36Z",
        "updatedAt" : "2018-03-14T22:58:37Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b04fda154816c9ab839991a0e480fddd259142e",
    "line" : 3488,
    "diffHunk" : "@@ -1,1 +11711,11715 @@}\n\n// _.mapValues\n{\n    const dictionary: _.Dictionary<AbcObject> | null | undefined = anything;"
  },
  {
    "id" : "571941b7-ba78-4a87-a113-92a2f751a388",
    "prId" : 25522,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/25522#pullrequestreview-119629012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "615ed667-6fcc-4856-b501-18cab2573778",
        "parentId" : null,
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "This test was failing even on the default branch (probably due to a bug fix in TS2.9) so I had to disable the `$ExpectType`.",
        "createdAt" : "2018-05-12T15:24:32Z",
        "updatedAt" : "2018-05-12T15:31:56Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      }
    ],
    "commit" : "79b40511a06e9e4079808147630cdb2bca3ebc33",
    "line" : 1289,
    "diffHunk" : "@@ -1,1 +5162,5166 @@    _.chain(\"abc\").get(1); // $ExpectType LoDashExplicitWrapper<string>\n    _.chain(\"abc\").get([\"0\"], \"_\");\n    _.chain([42]).get(0, -1); // ExpectType LoDashExplicitWrapper<number>\n    _.chain({ a: { b: true } }).get(\"a\"); // $ExpectType LoDashExplicitWrapper<{ b: boolean; }>\n    _.chain({ a: { b: true } }).get([\"a\"]); // $ExpectType LoDashExplicitWrapper<{ b: boolean; }>"
  },
  {
    "id" : "8b0aab93-9cd6-4b00-8420-b4635c2c9447",
    "prId" : 25522,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/25522#pullrequestreview-119629012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "813e6efd-6da3-432c-ab8a-251bb9b9caba",
        "parentId" : null,
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "Test the new `omit` overload",
        "createdAt" : "2018-05-12T15:24:58Z",
        "updatedAt" : "2018-05-12T15:31:56Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      }
    ],
    "commit" : "79b40511a06e9e4079808147630cdb2bca3ebc33",
    "line" : 1403,
    "diffHunk" : "@@ -1,1 +5539,5543 @@    const numericDictionary: _.NumericDictionary<AbcObject> = anything;\n\n    _.omit(obj, \"a\"); // ExpectType Pick<AbcObject, \"b\" | \"c\">   // NOTE: ExpectType disabled because it fails in TS2.4\n    _.omit(obj, [\"b\", 1], 0, \"a\"); // $ExpectType Partial<AbcObject>\n    _.omit(dictionary, \"a\"); // $ExpectType Dictionary<AbcObject>"
  },
  {
    "id" : "d15810d8-e9e5-4649-91a0-dd359d987bce",
    "prId" : 25522,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/25522#pullrequestreview-119629012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4201badf-1d3a-4b40-9398-4b90d5c7cb45",
        "parentId" : null,
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "FP's version of `unset` returns an object, not a boolean.",
        "createdAt" : "2018-05-12T15:26:06Z",
        "updatedAt" : "2018-05-12T15:31:56Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      }
    ],
    "commit" : "79b40511a06e9e4079808147630cdb2bca3ebc33",
    "line" : 1463,
    "diffHunk" : "@@ -1,1 +5811,5815 @@    _.chain(object).unset([\"a\", \"b\"]); // $ExpectType LoDashExplicitWrapper<boolean>\n\n    fp.unset(\"a.b\", object); // $ExpectType { a: { b: string; c: boolean; }; }\n    fp.unset(\"a.b\")(object); // $ExpectType { a: { b: string; c: boolean; }; }\n    fp.unset([\"a\", \"b\"])(object); // $ExpectType { a: { b: string; c: boolean; }; }"
  },
  {
    "id" : "41956673-6ebf-44aa-b704-8dcc4b7d66b0",
    "prId" : 25522,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/25522#pullrequestreview-119629012",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a529ab4-ab8b-49f4-9a01-c7930479ba6f",
        "parentId" : null,
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "These tests were also failing on the default branch - looks like TS 2.9 splits `PropertyName` into `string | number | symbol`, but earlier versions do not, so the `$ExpectType` does not work in this case.",
        "createdAt" : "2018-05-12T15:27:30Z",
        "updatedAt" : "2018-05-12T15:31:56Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      }
    ],
    "commit" : "79b40511a06e9e4079808147630cdb2bca3ebc33",
    "line" : 1609,
    "diffHunk" : "@@ -1,1 +6810,6814 @@// _.propertyOf\n{\n    _.propertyOf({}) as (path: _.Many<_.PropertyName>) => any;\n    _({}).propertyOf() as _.LoDashImplicitWrapper<(path: _.Many<_.PropertyName>) => any>;\n    _.chain({}).propertyOf() as _.LoDashExplicitWrapper<(path: _.Many<_.PropertyName>) => any>;"
  },
  {
    "id" : "f7f3fc97-f2b3-4453-9eea-4ebe34328a1f",
    "prId" : 31902,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/31902#pullrequestreview-193396007",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1618b34-4cf7-429e-84cd-dd99d4346eae",
        "parentId" : null,
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "Yeah, this is a little dubious. Not the worst thing, though, so maybe we just need to live with it.\r\n\r\nI had one thought - instead of completely ignoring `StringIterator`, we replace it with `ListIterator<T>`? Then `generate-fp` should be smart enough to merge this overload with the other  `ListIterator<T>` overload(s), but still handle `forEach`/`forEachRight` correctly. Then we would get something like `collection: string` for the second argument. Which is great if `T` is `string`, but not so great if `T` is anything else. So maybe not the best idea.",
        "createdAt" : "2019-01-10T03:01:13Z",
        "updatedAt" : "2019-01-16T15:57:06Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      },
      {
        "id" : "90daeb5f-e042-4427-aaa2-1ac24ee17064",
        "parentId" : "b1618b34-4cf7-429e-84cd-dd99d4346eae",
        "authorId" : "751cf7cc-d92c-4821-a552-ba98172be310",
        "body" : "I tried this and it did not go well. Maybe I did it wrong, but the tests were complaining about missing types and it seemed... bad.",
        "createdAt" : "2019-01-16T15:54:58Z",
        "updatedAt" : "2019-01-16T15:57:30Z",
        "lastEditedBy" : "751cf7cc-d92c-4821-a552-ba98172be310",
        "tags" : [
        ]
      },
      {
        "id" : "33b7e272-f5be-4a3d-82fd-be3aae4d7466",
        "parentId" : "b1618b34-4cf7-429e-84cd-dd99d4346eae",
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "Yeah I was worried it wouldn't work well. Let's leave it as you have it then.",
        "createdAt" : "2019-01-16T23:06:37Z",
        "updatedAt" : "2019-01-16T23:06:40Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6d6875730b4c97197a14e4a0fe76266ae1f2994",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2340,2344 @@    });\n\n    fp.forEach(stringIterator, \"\"); // $ExpectType ArrayLike<string>\n    fp.forEach(valueIterator, array); // $ExpectType AbcObject[]\n    fp.forEach(valueIterator)(array); // $ExpectType AbcObject[]"
  },
  {
    "id" : "c8f7a7ff-9998-4245-98ab-53994df38adf",
    "prId" : 33228,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33228#pullrequestreview-206077711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79c777c2-bd54-4a44-a088-259606f9259e",
        "parentId" : null,
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "Add this same test for regular lodash (`if (_.isObject(...))`)",
        "createdAt" : "2019-02-21T00:56:36Z",
        "updatedAt" : "2019-03-11T17:18:14Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b033c62ea1e004eb931b3fee129c8e3a7dc7336",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +4292,4296 @@    _.chain([]).isObject(); // $ExpectType LoDashExplicitWrapper<boolean>\n    fp.isObject(anything); // $ExpectType boolean\n    if (fp.isObject(anything)) {\n        anything; // $ExpectType object\n    }"
  }
]