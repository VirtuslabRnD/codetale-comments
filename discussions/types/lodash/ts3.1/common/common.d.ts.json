[
  {
    "id" : "12cd2fd1-7ff1-4d78-a3f7-7ced6478167f",
    "prId" : 35241,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/35241#pullrequestreview-235183433",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93c52d4d-2e35-4517-8574-f58ca0a40cb9",
        "parentId" : null,
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "Ah, I didn't noticate before that these chain types incorporated null/undefined already. The only issue is that when you call `value()`, the null/undefined information will be lost. Maybe that's ok?",
        "createdAt" : "2019-05-08T01:44:58Z",
        "updatedAt" : "2019-05-08T23:25:49Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      },
      {
        "id" : "c341eca2-7632-47dd-a2c7-067c9210c8e7",
        "parentId" : "93c52d4d-2e35-4517-8574-f58ca0a40cb9",
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "I think it's fine to be a bit lossy, although we might re-evaluate after people have a chance to use the new code. This only makes a difference when `first/last` happens at the end of a long chain of wrapped method calls, and I don't think that happens very often.",
        "createdAt" : "2019-05-08T17:18:26Z",
        "updatedAt" : "2019-05-08T23:25:49Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e44d9e59e6f16f9fb434b429bcd72c41a0f2688",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +11,15 @@        T extends string | null | undefined ? String :\n        T extends (...args: any) => any ? Function<T> :\n        T extends List<infer U> | null | undefined ? Collection<U> :\n        T extends object | null | undefined ? Object<T> :\n        Primitive<T>;"
  },
  {
    "id" : "0a03519d-9e4f-4f2e-b5ab-c8e9c389bc5c",
    "prId" : 35241,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/35241#pullrequestreview-235187970",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca3add9d-24c8-40b6-9606-fd602d3f36ef",
        "parentId" : null,
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "Would it be better to combine these into a single overload:\r\n\r\n```ts\r\n<T>(value: T): ImpChain<T>;\r\n```\r\n\r\nto avoid defining all of these rules twice? It looks like this is already getting out of sync with `ImpChain`. Or would that be bad for performance?",
        "createdAt" : "2019-05-08T01:48:40Z",
        "updatedAt" : "2019-05-08T23:25:49Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      },
      {
        "id" : "bd9756bb-2c39-4084-9d60-a3604703d57c",
        "parentId" : "ca3add9d-24c8-40b6-9606-fd602d3f36ef",
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "Good idea. I'll test it. Conditional types also distribute across unions, so that may cause less coherent types. So I'll check for that too.",
        "createdAt" : "2019-05-08T17:19:24Z",
        "updatedAt" : "2019-05-08T23:25:49Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      },
      {
        "id" : "72e71191-909a-4dc6-bd49-ecd7680fa678",
        "parentId" : "ca3add9d-24c8-40b6-9606-fd602d3f36ef",
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "Later: distribution makes null checking way too strict. 390 errors in the tests, all based around `Dictionary<number> | null | undefined` resulting in `Object<Dictionary<number>> | Primitive<null> | Primitive<undefined>`.\r\n\r\nIt's also 25% less efficient.",
        "createdAt" : "2019-05-08T17:27:35Z",
        "updatedAt" : "2019-05-08T23:25:49Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e44d9e59e6f16f9fb434b429bcd72c41a0f2688",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +98,102 @@        <T = any>(value: List<T> | null | undefined): Collection<T>;\n        <T extends object>(value: T | null | undefined): Object<T>;\n        <T>(value: T): Primitive<T>;\n        /**\n        * The semantic version number."
  }
]