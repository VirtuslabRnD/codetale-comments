[
  {
    "id" : "a8c27507-8f77-4e56-9a68-1282f81ca182",
    "prId" : 35241,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/35241#pullrequestreview-234830125",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbc00cbc-6060-47b8-b620-64f5893c44de",
        "parentId" : null,
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "I'm not a huge fan of some of these names (`Collection<T>`,  `Object<T>`) because they sound like other types. MY C#/Java brain looks at `Collection<T>` and thinks it's a lot like `List<T>` or `Array<T>`, but it's not. That said I can't think of a better name that's not painfully long.",
        "createdAt" : "2019-05-07T13:10:21Z",
        "updatedAt" : "2019-05-08T23:25:49Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      },
      {
        "id" : "e2e5e7fe-3396-47d4-9ba3-18b774c51af1",
        "parentId" : "dbc00cbc-6060-47b8-b620-64f5893c44de",
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "I'd like to use `List`, but got a name conflict with `type List<T> = ArrayLike<T>`. Maybe if I change it to `interface List<T> extends ArrayLike<T> { }`.",
        "createdAt" : "2019-05-07T15:48:43Z",
        "updatedAt" : "2019-05-08T23:25:49Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      },
      {
        "id" : "e7671346-5ab6-4077-bdf3-b576e4ed2cf0",
        "parentId" : "dbc00cbc-6060-47b8-b620-64f5893c44de",
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "Later: I tried that and compilation never finished.\r\n\r\nOther ideas are welcome!",
        "createdAt" : "2019-05-07T16:15:54Z",
        "updatedAt" : "2019-05-08T23:25:49Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      },
      {
        "id" : "a87c2b5b-afbc-4eb9-928d-57545cbef295",
        "parentId" : "dbc00cbc-6060-47b8-b620-64f5893c44de",
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "Collection is probably fine. I was thinking something like `CollectionWrapper` or `ListWrapper` (and `ObjectWrapper`, `PrimitiveWrapper`, etc) to indicate that they aren't real collecttions, they are just wrappers. I don't feel too strongly though.",
        "createdAt" : "2019-05-08T01:28:11Z",
        "updatedAt" : "2019-05-08T23:25:49Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e44d9e59e6f16f9fb434b429bcd72c41a0f2688",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@        chunk<T>(array: List<T> | null | undefined, size?: number): T[][];\n    }\n    interface Collection<T> {\n        /**\n         * @see _.chunk"
  },
  {
    "id" : "2d5136b7-2a2f-483b-a483-a8d0eadbe358",
    "prId" : 35241,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/35241#pullrequestreview-235180305",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cfedacd-b36c-42b9-ba86-b209dbf8bd97",
        "parentId" : null,
        "authorId" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "body" : "Too bad we can't really get the right type here. I feel like `T` is almost always the wrong type though. Maybe `Collection<any>` would be better? Or maybe something like what you did for `flatMapDeep`:\r\n\r\n```ts\r\nflattenDeep<TResult = any>(): Collection<TResult>;\r\n```\r\n\r\nSame below.",
        "createdAt" : "2019-05-08T01:31:06Z",
        "updatedAt" : "2019-05-08T23:25:49Z",
        "lastEditedBy" : "fb0aaf85-cd8a-41bc-b18d-36fea4011685",
        "tags" : [
        ]
      },
      {
        "id" : "8084f3b7-11a5-498e-9b48-049c6411fddc",
        "parentId" : "7cfedacd-b36c-42b9-ba86-b209dbf8bd97",
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "Well, I think the type will be a supertype of the correct type at least. Consider:\r\n\r\n```ts\r\n[1, [2, 3, [3, 4]], 6, 7]: (number | (number | number[])[])[]\r\n```\r\n\r\nflattenDeep of that should be `number[]` but `number[]` is a subtype of `(number | (number | number[])[])[]` at least, so you can manually narrow using casts probably. Type parameters are just an alternate syntax for a cast in this case, and I'd rather not encourage that. So I'll skip the type parameter here; `flatMapDeep` was an existing use of this pattern that I didn't want to break.",
        "createdAt" : "2019-05-08T17:12:03Z",
        "updatedAt" : "2019-05-08T23:25:49Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e44d9e59e6f16f9fb434b429bcd72c41a0f2688",
    "line" : 504,
    "diffHunk" : "@@ -1,1 +502,506 @@         * @see _.flattenDeep\n         */\n        flattenDeep(): Collection<T>;\n    }\n    interface CollectionChain<T> {"
  }
]