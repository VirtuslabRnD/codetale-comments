[
  {
    "id" : "0f541d6f-cf40-4ea8-b55d-3ee3c49fcbaa",
    "prId" : 32605,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/32605#pullrequestreview-198350004",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9519a3f1-2780-4423-b06a-18e84543819c",
        "parentId" : null,
        "authorId" : "ae1cf0f9-564e-40ad-9cdf-73f717fd1d58",
        "body" : "I'm happy to merge this PR, but just wanted to throw out another option. Instead of changing the structure of Options in order to make the constructors work, you can keep the original Options interface from before this PR and make the constructor typed in this way:\r\n```ts\r\ninterface Constructor {\r\n    new <T extends Options | undefined = undefined>(options?: T): T extends { promise: true } ? MinifierPromise : MinifierOutput;\r\n}\r\n```",
        "createdAt" : "2019-01-30T19:27:47Z",
        "updatedAt" : "2019-01-30T23:09:29Z",
        "lastEditedBy" : "ae1cf0f9-564e-40ad-9cdf-73f717fd1d58",
        "tags" : [
        ]
      },
      {
        "id" : "e389e2d8-bfb8-4506-b523-602739fb7e35",
        "parentId" : "9519a3f1-2780-4423-b06a-18e84543819c",
        "authorId" : "1d949d09-c9f9-4795-bef8-668ebc18b21a",
        "body" : "Tested those changes and it fails the tests when dealing with trying to pass options as an object.\r\n\r\n```javascript\r\nlet CleanCssOptions: CleanCSS.Options = { returnPromise: true };\r\nnew CleanCSS(CleanCssOptions).minify(source)  // <-- error: expect it to return MinifierPromise instead returns MinifierOutput\r\n    .then((minified: CleanCSS.Output): void => {\r\n        console.log(minified.styles);\r\n    }).catch((error: any): void => {\r\n        console.log(error);\r\n    }\r\n);\r\n```\r\n\r\nI tried an approach similar to this but TypeScript doesn't recognize `{ returnPromise: true }` without creating two separate Options types with a discriminated union.",
        "createdAt" : "2019-01-30T21:39:00Z",
        "updatedAt" : "2019-01-30T23:09:29Z",
        "lastEditedBy" : "1d949d09-c9f9-4795-bef8-668ebc18b21a",
        "tags" : [
        ]
      },
      {
        "id" : "c53a0025-9bab-41c8-a6a6-2dd4f09c94fb",
        "parentId" : "9519a3f1-2780-4423-b06a-18e84543819c",
        "authorId" : "1d949d09-c9f9-4795-bef8-668ebc18b21a",
        "body" : "I will add, I think the reason that trying to check if the options extends `{ returnPromise: true }` doesn't work is that, in the original way method of doing the objects interface, it has the property `{ returnPromise: boolean }` and `{ returnPromise: true }` does not inherit from `{ returnPromise: boolean }`.  This means if I pass `{ returnPromise: true }` directly to the constructor, it works but if I create an object instance of options, it doesn't inherit `{ returnPromise: true }` but rather the `{ returnPromise: boolean }`-- if all that makes sense.  In this case `true` isn't a value per say but rather a type literal and `boolean` cannot be assigned to `true`.",
        "createdAt" : "2019-01-30T22:43:20Z",
        "updatedAt" : "2019-01-30T23:09:29Z",
        "lastEditedBy" : "1d949d09-c9f9-4795-bef8-668ebc18b21a",
        "tags" : [
        ]
      },
      {
        "id" : "09b27cf3-f657-4c15-b39b-856289ed610f",
        "parentId" : "9519a3f1-2780-4423-b06a-18e84543819c",
        "authorId" : "1d949d09-c9f9-4795-bef8-668ebc18b21a",
        "body" : "Last thing to add.  So the only thing that doesn't work in the code change I made is this scenario.\r\n\r\n```javascript\r\nlet CleanCssOptions: CleanCSS.Options = { };\r\nCleanCssOptions.returnPromise = true;   // <-- error as TypeScript assigned the options branch for the output and it only allows returnPromise = false\r\n// to fix this we will need to manually re-cast the options\r\n(CleanCssOptions = CleanCssOptions as CleanCSS.OptionsPromise).returnPromise = true;\r\n// this works since we are switching the casting to use the promise options branch.\r\n```\r\n\r\nOther then this one scenario, by splitting options in OptiomsPromise and OptionsOutput with the discriminated union between them, we are able to property return the correct minifier with the correct return type regardless if we pass configuration properties direct or pass configuration properties using an object.",
        "createdAt" : "2019-01-30T22:55:02Z",
        "updatedAt" : "2019-01-30T23:09:29Z",
        "lastEditedBy" : "1d949d09-c9f9-4795-bef8-668ebc18b21a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5239b343f6c0e3a36c3cf16e970ed9582e4aba86",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +678,682 @@     */\n    interface Constructor {\n        new(options: OptionsPromise): MinifierPromise;\n        new(options?: OptionsOutput): MinifierOutput;\n    }"
  }
]