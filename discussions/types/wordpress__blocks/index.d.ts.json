[
  {
    "id" : "0036b348-5ede-4b33-a336-0377d4c5b2e4",
    "prId" : 36420,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36420#pullrequestreview-306710375",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cd6b3be-8703-49b4-8fdf-86a2cc1e6838",
        "parentId" : null,
        "authorId" : "aa31069a-2dd7-4981-aa70-37765a09d676",
        "body" : "hey @dsifford, sorry to reach you here regarding this. But I was wondering how can I correctly type an external function to match the `save` method available under block?\r\n\r\nI am not too advanced in Typescript and wondered if this declaration (`readonly save: ComponentType<BlockSaveProps<T>>;`) is the same of:\r\n\r\n```ts\r\nimport {ComponentType} from '@wordpress/element';\r\ninterface BlockData { foo:string }\r\nfunction save(props:<BlockSaveProps<BlockData>): ComponentType { ... }\r\n```\r\n\r\nalthough I couldn't get it working unless I would do:\r\n\r\n```ts\r\nimport {ReactElement} from '@wordpress/element';\r\ninterface BlockData { foo:string }\r\nfunction save(props:<BlockSaveProps<BlockData>): ReactElement { ... }\r\n```\r\nbut then I fear I may be losing some validations with this?\r\n\r\nIt would be great in case you could help.\r\n\r\nAll the best\r\n",
        "createdAt" : "2019-10-24T08:07:29Z",
        "updatedAt" : "2019-10-24T08:07:30Z",
        "lastEditedBy" : "aa31069a-2dd7-4981-aa70-37765a09d676",
        "tags" : [
        ]
      },
      {
        "id" : "8162869a-03ab-4165-88a1-749eef12ceef",
        "parentId" : "9cd6b3be-8703-49b4-8fdf-86a2cc1e6838",
        "authorId" : "aa31069a-2dd7-4981-aa70-37765a09d676",
        "body" : "Just a small update here as I did look for the `ComponentType` definition on React's declaration and did find this:\r\n\r\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/blob/7d4caa8dd6f01035092c0b28b6b160ac93f35ca1/types/react/index.d.ts#L164\r\n\r\nwhich solved my problem definition the function as:\r\n\r\n```ts\r\nimport {FunctionComponentElement} from '@wordpress/element';\r\ninterface BlockData { foo:string }\r\nfunction save(props:<BlockSaveProps<BlockData>): FunctionComponentElement<BlockData> { ... }\r\n```\r\nI'm not sure this is correct, but hopefully already a bit better than the general `ReactElement` solution?\r\n\r\nCheers\r\n",
        "createdAt" : "2019-10-24T09:37:12Z",
        "updatedAt" : "2019-10-24T09:37:13Z",
        "lastEditedBy" : "aa31069a-2dd7-4981-aa70-37765a09d676",
        "tags" : [
        ]
      },
      {
        "id" : "20faa57c-08a9-489d-9b3f-52bd104cfd98",
        "parentId" : "9cd6b3be-8703-49b4-8fdf-86a2cc1e6838",
        "authorId" : "88b8e7ff-7bfb-405d-a8d3-99e3e782d71f",
        "body" : "@zanona `ComponentType` is just a union of `ComponentClass<Props>` and `FunctionComponent<Props>` so with that in mind, if we look at your definition of...\r\n\r\n```ts\r\nfunction save(props:<BlockSaveProps<BlockData>): ComponentType;\r\n```\r\nWhat this really amounts to is one of the following...\r\n\r\n```tsx\r\nfunction save(props) {\r\n  return function(props)  {\r\n    return <h1>Hello world</h1>;\r\n  }\r\n}\r\n```\r\n\r\nor\r\n\r\n```tsx\r\nfunction save(props) {\r\n  return class extends Component {\r\n    render() {\r\n      return <h1>Hello world</h1>;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWhich is not correct. \r\n\r\nInstead, your type should look like this...\r\n\r\n```tsx\r\nimport {ComponentType} from '@wordpress/element';\r\ninterface BlockData { foo:string }\r\nfunction save(props:<BlockSaveProps<BlockData>): JSX.Element;\r\n//       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nWhich would amount to being...\r\n\r\n```tsx\r\nfunction save(props) {\r\n  return <h1>Hello world</h1>;\r\n}\r\n```\r\n\r\nLooking at the modified definition, everything above the `^`s is part of the `ComponentType` definition.\r\n\r\nHope that makes sense.",
        "createdAt" : "2019-10-24T14:32:28Z",
        "updatedAt" : "2019-10-24T14:32:29Z",
        "lastEditedBy" : "88b8e7ff-7bfb-405d-a8d3-99e3e782d71f",
        "tags" : [
        ]
      },
      {
        "id" : "bc89be86-2cad-4361-9b37-da4c2fe50bb7",
        "parentId" : "9cd6b3be-8703-49b4-8fdf-86a2cc1e6838",
        "authorId" : "aa31069a-2dd7-4981-aa70-37765a09d676",
        "body" : "Wow, that's great! Thanks so much for the explanation. I didn't know about `JSX.Element`  ;)",
        "createdAt" : "2019-10-24T16:32:20Z",
        "updatedAt" : "2019-10-24T16:32:20Z",
        "lastEditedBy" : "aa31069a-2dd7-4981-aa70-37765a09d676",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad65d5fa4af071c731255add565efa27a4fb8c16",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +88,92 @@     * Component to render on the frontend.\n     */\n    readonly save: ComponentType<BlockSaveProps<T>>;\n    /**\n     * Block styles."
  },
  {
    "id" : "2387c4c8-ab89-43cd-9fcc-3e5db45d9dab",
    "prId" : 36420,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36420#pullrequestreview-338420495",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e3cd283-332d-46df-90a7-ead7146826b0",
        "parentId" : null,
        "authorId" : "aa31069a-2dd7-4981-aa70-37765a09d676",
        "body" : "Apparently, we now also have access to the following properties sent to the edit function:\r\n`clientId`,\r\n`insertBlocksAfter`,\r\n`isSelectionEnabled`,\r\n`mergeBlocks`,\r\n`name`,\r\n`onReplace` and\r\n`toggleSelection`.  ",
        "createdAt" : "2020-01-04T13:33:05Z",
        "updatedAt" : "2020-01-04T13:34:53Z",
        "lastEditedBy" : "aa31069a-2dd7-4981-aa70-37765a09d676",
        "tags" : [
        ]
      },
      {
        "id" : "e55e330c-a83d-4ca4-b915-a623b6630c80",
        "parentId" : "0e3cd283-332d-46df-90a7-ead7146826b0",
        "authorId" : "88b8e7ff-7bfb-405d-a8d3-99e3e782d71f",
        "body" : "No time at the moment to get to this, but feel free to handle and open a PR.",
        "createdAt" : "2020-01-05T20:49:57Z",
        "updatedAt" : "2020-01-05T20:49:57Z",
        "lastEditedBy" : "88b8e7ff-7bfb-405d-a8d3-99e3e782d71f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad65d5fa4af071c731255add565efa27a4fb8c16",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +20,24 @@\nexport interface BlockEditProps<T extends Record<string, any>> extends BlockSaveProps<T> {\n    readonly className: string;\n    readonly isSelected: boolean;\n    readonly setAttributes: (attrs: Partial<T>) => void;"
  },
  {
    "id" : "2ef3adf2-cbe6-426c-ba09-28a134d33328",
    "prId" : 36420,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36420#pullrequestreview-338353651",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7ead106-440c-4c8d-809a-fe423960184d",
        "parentId" : null,
        "authorId" : "aa31069a-2dd7-4981-aa70-37765a09d676",
        "body" : "and whenever using `InnerBlocks` an `innerBlocks` property (array) is also sent to the save function.",
        "createdAt" : "2020-01-04T13:34:49Z",
        "updatedAt" : "2020-01-04T13:34:53Z",
        "lastEditedBy" : "aa31069a-2dd7-4981-aa70-37765a09d676",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad65d5fa4af071c731255add565efa27a4fb8c16",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +35,39 @@\nexport interface BlockSaveProps<T extends Record<string, any>> {\n    readonly attributes: Readonly<T>;\n}\n"
  }
]