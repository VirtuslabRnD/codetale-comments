[
  {
    "id" : "4215e142-394f-4ffc-93fc-2512c7f79dcf",
    "prId" : 18769,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/18769#pullrequestreview-55325641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa90da0e-382d-4a46-8b5d-b002df34a17f",
        "parentId" : null,
        "authorId" : "1dafe895-0dee-4056-9e2a-aadb53c1825d",
        "body" : "see https://github.com/DefinitelyTyped/DefinitelyTyped#a-package-uses-export--but-i-prefer-to-use-default-imports-can-i-change-export--to-export-default",
        "createdAt" : "2017-08-09T17:35:27Z",
        "updatedAt" : "2017-08-09T17:41:51Z",
        "lastEditedBy" : "1dafe895-0dee-4056-9e2a-aadb53c1825d",
        "tags" : [
        ]
      },
      {
        "id" : "f117bbc5-7969-446a-ab43-d288e396af0c",
        "parentId" : "aa90da0e-382d-4a46-8b5d-b002df34a17f",
        "authorId" : "c701fbef-e0f2-4be6-9abb-4ba16fd9f2aa",
        "body" : "That's not what's going on here. As I noted in that explanation, this is an AST transform that nonetheless needs to have a type of some sort because the transform *looks* like an imported, tagged-template-string function. This export correctly represents the behavior as far as consumers are concerned. There is no export at all – neither require-style nor ES6 module-style.",
        "createdAt" : "2017-08-09T17:40:02Z",
        "updatedAt" : "2017-08-09T17:42:27Z",
        "lastEditedBy" : "c701fbef-e0f2-4be6-9abb-4ba16fd9f2aa",
        "tags" : [
        ]
      },
      {
        "id" : "b6b5dccb-13b9-485a-8469-d2c688c8a74f",
        "parentId" : "aa90da0e-382d-4a46-8b5d-b002df34a17f",
        "authorId" : "1dafe895-0dee-4056-9e2a-aadb53c1825d",
        "body" : "so how is supposed to be consumed? the issue is about the emitted code from the TS compiler.",
        "createdAt" : "2017-08-09T17:42:29Z",
        "updatedAt" : "2017-08-09T17:42:29Z",
        "lastEditedBy" : "1dafe895-0dee-4056-9e2a-aadb53c1825d",
        "tags" : [
        ]
      },
      {
        "id" : "8bf90c1b-67bb-44e1-b48e-5b0ed33f03c9",
        "parentId" : "aa90da0e-382d-4a46-8b5d-b002df34a17f",
        "authorId" : "c701fbef-e0f2-4be6-9abb-4ba16fd9f2aa",
        "body" : "Consumers write an import statement like normal as if it were an ES6-style `export default`:\r\n\r\n```typescript\r\nimport hbs from 'htmlbars-inline-precompile';\r\n```\r\n\r\nThen at build time, it's transformed (literally \"precompiled\"). But from the perspective of the consumers, it's just a default export, tagged template string function.",
        "createdAt" : "2017-08-09T17:44:51Z",
        "updatedAt" : "2017-08-09T17:48:35Z",
        "lastEditedBy" : "c701fbef-e0f2-4be6-9abb-4ba16fd9f2aa",
        "tags" : [
        ]
      },
      {
        "id" : "8dff399f-ff59-4756-8ea0-2af9e4605001",
        "parentId" : "aa90da0e-382d-4a46-8b5d-b002df34a17f",
        "authorId" : "1dafe895-0dee-4056-9e2a-aadb53c1825d",
        "body" : "that is the issue. if you use babel it will be transformed in a manner that would work, if you use TS compiler it will not, and you will get no error. that is why this recommendation is there.\r\n\r\nThe TS compiler transforms default imports to access to a property named `\"default\"` on the module. if the module at runtime does not have that property it will fail. since this is a commonjs module it does not have a `\"default\"` property at run-time.\r\nThe TS compiler has a flag to tell it to ignore these errors if the user is going to use a transpiler that handles default imports like babel, or a loader that can synthesize them like systemJs, that option is `--allowSyntheticDefaultImports `.",
        "createdAt" : "2017-08-09T17:55:33Z",
        "updatedAt" : "2017-08-09T17:55:33Z",
        "lastEditedBy" : "1dafe895-0dee-4056-9e2a-aadb53c1825d",
        "tags" : [
        ]
      },
      {
        "id" : "82dcd00e-8387-4b74-807e-7f58af1b2798",
        "parentId" : "aa90da0e-382d-4a46-8b5d-b002df34a17f",
        "authorId" : "c701fbef-e0f2-4be6-9abb-4ba16fd9f2aa",
        "body" : "Sorry, to be as clear as possible: this is *not* a commonJS module.\r\n\r\nThe module I'm providing a type for here explicitly depends on the underlying babel transform (linked in the writeup as well as the opening PR comment), which itself depends on babel—as does Ember CLI, which is the only thing that uses this. Accordingly, there's no worry about whether users will be able to depend on having Babel. Moreover, TypeScript and Babel are well-integrated and play nicely with each other in that toolchain, the optional TypeScript component of which I maintain.\r\n\r\nThe only question is whether the TypeScript integration will fall over when it encounters an unknown import. That's what this typing is meant to address, and it works exactly as expected in that context.",
        "createdAt" : "2017-08-09T18:14:39Z",
        "updatedAt" : "2017-08-09T18:14:39Z",
        "lastEditedBy" : "c701fbef-e0f2-4be6-9abb-4ba16fd9f2aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "b102312ac99faed18dde95f5b5cca898625398d4",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +14,18 @@// [output]: https://github.com/emberjs/ember-test-helpers/blob/77f9a53da9d8c19a85b3122788caadbcc59274c2/lib/ember-test-helpers/-legacy-overrides.js#L17-L42\n\nexport default function hbs(tagged: TemplateStringsArray): string | string[];"
  }
]