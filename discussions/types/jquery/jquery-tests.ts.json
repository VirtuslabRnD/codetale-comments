[
  {
    "id" : "c1ef09f0-207b-435c-8778-d0055f4496eb",
    "prId" : 26674,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/26674#pullrequestreview-132310830",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d910b91-9300-4331-8192-7b40c7d9cc5f",
        "parentId" : null,
        "authorId" : "4f24cb62-8bdc-46f1-8453-bed6c5305a92",
        "body" : "This is intuitive but wrong.\r\n> The target property can be the element that registered for the event or a descendant of it.\r\n\r\nSo probably it is HTMLElement or SVGElement. The test should be\r\n\r\n```ts\r\nmyDoc.on('click', (evt) => {\r\n    let target = evt.target;\r\n    // $ExpectType Document|HTMLElement\r\n    target;\r\n});\r\n```\r\nPerhaps the typing should be \r\n```ts\r\non(events: string,\r\n        handler: JQuery.EventHandler<TElement | HTMLElement> | JQuery.EventHandlerBase<any, JQuery.Event<TElement>> | false): this;\r\n```\r\n\r\nBut the following code should compile, as in reality a mouse interaction event will not have a target with, too. But this does not compile...\r\n```ts\r\nmyDoc.on('click', (evt: JQuery.Event<HTMLElement|SVGElement>) => {\r\n    let target = evt.target;\r\n    // $ExpectType HTMLElement|SVGElement\r\n    target;\r\n});\r\n```\r\n\r\nAnd thanks a lot for the notification :-)",
        "createdAt" : "2018-06-20T08:47:45Z",
        "updatedAt" : "2018-06-20T09:58:53Z",
        "lastEditedBy" : "4f24cb62-8bdc-46f1-8453-bed6c5305a92",
        "tags" : [
        ]
      },
      {
        "id" : "28c9fa2b-91f2-463c-8749-1d012c9958a0",
        "parentId" : "8d910b91-9300-4331-8192-7b40c7d9cc5f",
        "authorId" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "body" : "This has been brought up before in #17377. There's a couple of solutions to the problem but none of them are particularly clean.\r\n\r\nFirst off, let's keep in mind that there are 4 target properties on `JQuery.Event`.\r\n\r\n#### `currentTarget`\r\nThe current element within the event bubbling phase.\r\n\r\n#### `delegateTarget`\r\nThe element that the handler was attached to. With the way the declarations are currently defined, this property is the only one that has the correct type.\r\n\r\n#### `relatedTarget`\r\nAnother DOM element involved in the event. Set for `mouseout` and `mouseover` events.\r\n\r\n#### `target`\r\nThe element that initiated the event. This can be the element that registered the event (`delegateTarget`) or a descendant.\r\n\r\n---\r\n\r\n### Solution 1\r\n\r\nThe current solution. All target properties have the same generic type. This works well when `TTarget` is some base type (e.g. `HTMLElement` or `SVGElement`), you're only working with 1 DOM, and you don't need to access properties of more specific types. It otherwise produces incorrect types or types that are too general.\r\n\r\n### Solution 2a\r\n\r\nSet the target properties to a base type. `EventTarget` would be the correct base type but wouldn't be very useful. This leads to correct typing but requires type assertions to be practical.\r\n\r\n### Solution 2b\r\n\r\nSet the target properties to `any`. This throws away type safety and autocomplete but is the most flexible.\r\n\r\n### Solution 3\r\n\r\nIntroduce type parameters for the other target properties. This allows the user to have the most accurate typings but is a bit unwieldy. This would introduce up to 3 more type parameters on top of the 2 existing. Ordering of the parameters is also significant. They should be arranged to minimize the number of parameters that need to be defined in common cases.\r\n\r\nIn addition to this, it should also keep in mind additional type parameters that could be introduced to fix the [issue of properties being marked optional on `JQuery.Event` when they are known to exist](https://github.com/DefinitelyTyped/DefinitelyTyped/issues/17377).\r\n\r\n---\r\n\r\nOf all these, I prefer Solution 3 for its accuracy. My concern is that mistakes in the implementation could mean a lot of breaking changes for consumers in order to fix them. I would prefer a more graceful solution.",
        "createdAt" : "2018-06-20T13:34:09Z",
        "updatedAt" : "2018-06-20T13:34:09Z",
        "lastEditedBy" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "tags" : [
        ]
      },
      {
        "id" : "316985c4-781d-4fee-bbc2-867eca2b8eda",
        "parentId" : "8d910b91-9300-4331-8192-7b40c7d9cc5f",
        "authorId" : "e29aef19-42f7-44d7-96b6-569cd9e502e0",
        "body" : "This commit are not compatible with many other typings, with messages like:\r\n`All declarations of 'JQuery' must have identical type parameters.`\r\n\r\nAlso, the comment style is not playing well with vscode:\r\n```\r\n     * @see \\`{@link https://api.jquery.com/find/ }\\`\r\n     * @since 1.0\r\n     * @since 1.6\r\n```\r\n\r\nCan some of you look at this, and possible fix or revert this pr? @sandersn @leonard-thieu @holgeradam  @Diullei @borislavjivkov  @basarat @johnnyreilly \r\nIf it there are many breaking changes, I would suggest that it should have been a bigger version bump.\r\nI will use the old version until it's resolved.",
        "createdAt" : "2018-06-26T14:42:16Z",
        "updatedAt" : "2018-06-26T14:44:27Z",
        "lastEditedBy" : "e29aef19-42f7-44d7-96b6-569cd9e502e0",
        "tags" : [
        ]
      },
      {
        "id" : "d032a033-b8e3-44e4-971d-ce014734ec93",
        "parentId" : "8d910b91-9300-4331-8192-7b40c7d9cc5f",
        "authorId" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "body" : "> This commit are not compatible with many other typings, with messages like:\r\n`All declarations of 'JQuery' must have identical type parameters.`\r\n\r\nWhich typings? All current versions of typings from DefinitelyTyped should be compatible.\r\n\r\n> Also, the comment style is not playing well with vscode:\r\n\r\nCould you elaborate on what you mean (include a screenshot)?\r\n\r\n> If it there are many breaking changes, I would suggest that it should have been a bigger version bump.\r\n\r\n`@types/*` packages do not follow semantic versioning. Instead, their major and minor version numbers match the version of the library they represent. I recommend locking `@types/*` packages to a specific version for your needs.",
        "createdAt" : "2018-06-26T15:04:42Z",
        "updatedAt" : "2018-06-26T15:04:42Z",
        "lastEditedBy" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "tags" : [
        ]
      },
      {
        "id" : "dcb66c5b-75a6-4fdf-afa9-7e3d8ee62655",
        "parentId" : "8d910b91-9300-4331-8192-7b40c7d9cc5f",
        "authorId" : "e29aef19-42f7-44d7-96b6-569cd9e502e0",
        "body" : "I will update all our business typings then.",
        "createdAt" : "2018-06-27T07:22:24Z",
        "updatedAt" : "2018-06-27T07:22:24Z",
        "lastEditedBy" : "e29aef19-42f7-44d7-96b6-569cd9e502e0",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3b10b2269652e51347b84fedf9c8ae329fc6a1f",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +94,98 @@                const target = evt.target;\n                // $ExpectType Document\n                target;\n            });\n            const myDocForced: JQuery<Document> = $(document);"
  },
  {
    "id" : "6746882b-9721-4b07-b977-277cbb65efbb",
    "prId" : 30234,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30234#pullrequestreview-182012690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76a1c227-369c-472d-8ecc-99717c15ebe4",
        "parentId" : null,
        "authorId" : "70f3f43d-15fc-4e48-9cee-dd12ddea3e83",
        "body" : "Use `as` in test.ts is a bad smell. Why not returning `this` in this method and declare returning type as `JQuery`?",
        "createdAt" : "2018-11-27T15:23:17Z",
        "updatedAt" : "2018-12-09T19:52:15Z",
        "lastEditedBy" : "70f3f43d-15fc-4e48-9cee-dd12ddea3e83",
        "tags" : [
        ]
      },
      {
        "id" : "ec61a56c-3363-40c6-b2fc-9ef711116374",
        "parentId" : "76a1c227-369c-472d-8ecc-99717c15ebe4",
        "authorId" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "body" : "This is intended to concisely test that `.replaceWith()` accepts a callback that returns all possible return types (or any combination of them). Returning only `this` would only test that `HTMLElement` is a valid return type.",
        "createdAt" : "2018-11-27T18:41:30Z",
        "updatedAt" : "2018-12-09T19:52:15Z",
        "lastEditedBy" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "tags" : [
        ]
      },
      {
        "id" : "fb9d52c8-b251-4948-ad92-a20a1ce7a0f0",
        "parentId" : "76a1c227-369c-472d-8ecc-99717c15ebe4",
        "authorId" : "70f3f43d-15fc-4e48-9cee-dd12ddea3e83",
        "body" : "If we want to test all possible returning cases, they should be list here one by one. \r\n\r\n```\r\n{ ... return this; }\r\n{ ... return $('div'); }\r\n{ ... return $('<div />'); }\r\n```",
        "createdAt" : "2018-11-28T14:01:18Z",
        "updatedAt" : "2018-12-09T19:52:15Z",
        "lastEditedBy" : "70f3f43d-15fc-4e48-9cee-dd12ddea3e83",
        "tags" : [
        ]
      },
      {
        "id" : "6bda5f66-8880-4d9b-a822-ee8532a5c583",
        "parentId" : "76a1c227-369c-472d-8ecc-99717c15ebe4",
        "authorId" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "body" : "This is also intended to test scenarios where a user writes code that results in a union of the potential return types (e.g. `JQuery.htmlString | Element`). Testing all possible combinations results in a lot of tests and I'm not sure there's even a real gain to doing so.\r\n\r\nI use the type assertion like that because what I really need is to test the return type. The code that gets me there shouldn't matter.",
        "createdAt" : "2018-12-05T22:51:22Z",
        "updatedAt" : "2018-12-09T19:52:15Z",
        "lastEditedBy" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5001e2c42f6fc98305a683b018e6ff5af4a9ac16",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +5559,5563 @@                oldhtml;\n\n                return undefined! as JQuery.htmlString | JQuery<JQuery.Node> | JQuery.TypeOrArray<Element> | JQuery.Node;\n            });\n        }"
  }
]