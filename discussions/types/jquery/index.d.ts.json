[
  {
    "id" : "84a88340-4f89-4b4a-ac7f-8f59dc75e855",
    "prId" : 17301,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17301#pullrequestreview-45137714",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5602d6b4-ec8e-49bf-ac74-b34ed0b6644e",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "The factory function definitely does not return an _instance_ of `JQuery`.\r\n\r\n```ts\r\nimport jsdomify from 'jsdomify'\r\njsdomify.create()\r\n\r\nimport jqueryFactory = require('jquery')\r\njqueryFactory(window)(window).data('foo') // returns undefined\r\njqueryFactory(window).data('foo') // would validate with this change, but throws\r\n```\r\n\r\nThe case where jquery is loaded on a real DOM is already correctly handled by the `factoryOrJQuery` type.",
        "createdAt" : "2017-06-20T04:32:28Z",
        "updatedAt" : "2017-06-20T04:38:04Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "79b401bc-be32-4aee-9521-df423820ac1f",
        "parentId" : "5602d6b4-ec8e-49bf-ac74-b34ed0b6644e",
        "authorId" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "body" : "This was supposed to handle https://github.com/DefinitelyTyped/DefinitelyTyped/issues/17298. I was getting correct behavior while testing although now I can't reproduce it. I'm looking into it.",
        "createdAt" : "2017-06-20T10:02:40Z",
        "updatedAt" : "2017-06-20T10:02:40Z",
        "lastEditedBy" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "tags" : [
        ]
      },
      {
        "id" : "bf8f4dda-abd1-417b-90b8-176864d397d8",
        "parentId" : "5602d6b4-ec8e-49bf-ac74-b34ed0b6644e",
        "authorId" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "body" : "Here's a repro for the bug mentioned in #17298. `jQuery` should represent `JQueryStatic` in that scenario but is `factory` instead.\r\n\r\nDuring testing, I _thought_ I had it so that it was importing only one of the two types based on the import form.\r\n- `factory` when using `import jqueryFactory = require('jquery');`\r\n- `JQueryStatic` when using `import * as jQuery from 'jquery';`\r\n\r\nI haven't been able to reproduce that behavior. (And no, it didn't make sense to me why it seemed to be working.)",
        "createdAt" : "2017-06-20T11:07:46Z",
        "updatedAt" : "2017-06-20T12:24:47Z",
        "lastEditedBy" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "tags" : [
        ]
      },
      {
        "id" : "2fc34e86-2c19-40ba-94f8-b43b228078af",
        "parentId" : "5602d6b4-ec8e-49bf-ac74-b34ed0b6644e",
        "authorId" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "body" : "I'm considering changing the signature of `factory` to:\r\n```typescript\r\nfunction factory(window: Window, discriminator: boolean): JQueryStatic;\r\n```\r\nThis is technically wrong but the extraneous argument should be ignored by the factory method.\r\n\r\nFrom https://github.com/jquery/jquery/blob/3.2.0/src/wrapper.js#L30:\r\n```javascript\r\nfunction( w ) {\r\n    if ( !w.document ) {\r\n        throw new Error( \"jQuery requires a window with a document\" );\r\n    }\r\n    return factory( w );\r\n};\r\n```\r\n\r\nConsumers will have to know to pass in the extra parameter in order to get correct typing. I get the impression that users who use the factory are a small proportion of users. This is a compromise solution that tries to give a good and intuitive experience to the majority of users. I haven't been able to come up with a solution that doesn't compromise in one way or another.",
        "createdAt" : "2017-06-20T13:37:34Z",
        "updatedAt" : "2017-06-20T13:37:34Z",
        "lastEditedBy" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b2eb2d8728caaf71230699bc2ebd9c2735ac119",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +26,30 @@\ndeclare module 'jquery' {\n    function factory(window: Window): JQueryStatic & JQuery;\n\n    const factoryOrJQuery: typeof factory & JQueryStatic;"
  },
  {
    "id" : "60f860e3-a5c2-4637-a73c-3e8d1fe4fcbd",
    "prId" : 17301,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17301#pullrequestreview-45086088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "173e8a23-faec-496a-926e-d96a37bbf6ee",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Why are you removing the optionality of the callbacks? This makes it so the completion callbacks become _required_ arguments.",
        "createdAt" : "2017-06-20T04:34:07Z",
        "updatedAt" : "2017-06-20T04:38:04Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "669f3a49-dc06-498c-be35-70f1b9289316",
        "parentId" : "173e8a23-faec-496a-926e-d96a37bbf6ee",
        "authorId" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "body" : "The optional case was redundant with the overload immediately following it:\r\n```typescript\r\nfadeIn(duration_easing_complete_options?: JQuery.Duration | string | ((this: TElement) => void) | JQuery.EffectsOptions<TElement>): this;\r\n```",
        "createdAt" : "2017-06-20T09:53:16Z",
        "updatedAt" : "2017-06-20T09:53:16Z",
        "lastEditedBy" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b2eb2d8728caaf71230699bc2ebd9c2735ac119",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +700,704 @@     * @since 1.4.3\n     */\n    fadeIn(duration_easing: JQuery.Duration | string, complete: (this: TElement) => void): this;\n    /**\n     * Display the matched elements by fading them to opaque."
  },
  {
    "id" : "4882dd14-1413-4ad4-9b8b-1350fe9d93ac",
    "prId" : 17301,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17301#pullrequestreview-45087320",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de669936-0da9-42e1-b0dc-fe5f15eab508",
        "parentId" : null,
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Why snake case?",
        "createdAt" : "2017-06-20T04:35:07Z",
        "updatedAt" : "2017-06-20T04:38:04Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "dd4f06dd-43f1-4618-b69f-deef21557a8b",
        "parentId" : "de669936-0da9-42e1-b0dc-fe5f15eab508",
        "authorId" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "body" : "I broke with naming convention because I wanted to indicate that they were multiple dissimilar parameters. `durationCompleteOptionsDisplay` might give off the impression that it was some mega-parameter or something.",
        "createdAt" : "2017-06-20T09:58:12Z",
        "updatedAt" : "2017-06-20T09:58:12Z",
        "lastEditedBy" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b2eb2d8728caaf71230699bc2ebd9c2735ac119",
    "line" : 256,
    "diffHunk" : "@@ -1,1 +2173,2177 @@     * @since 1.3\n     */\n    toggle(duration_complete_options_display?: JQuery.Duration | ((this: TElement) => void) | JQuery.EffectsOptions<TElement> | boolean): this;\n    /**\n     * Add or remove one or more classes from each element in the set of matched elements, depending on"
  }
]