[
  {
    "id" : "560b8547-adb8-4e21-88b7-54e6c88de434",
    "prId" : 30234,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30234#pullrequestreview-182010343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df147806-179a-4d1d-acf7-a4786de5630f",
        "parentId" : null,
        "authorId" : "70f3f43d-15fc-4e48-9cee-dd12ddea3e83",
        "body" : "I am not sure I really understand this TODO comment. How can we represent the element types after added?",
        "createdAt" : "2018-11-27T15:18:25Z",
        "updatedAt" : "2018-12-09T19:52:15Z",
        "lastEditedBy" : "70f3f43d-15fc-4e48-9cee-dd12ddea3e83",
        "tags" : [
        ]
      },
      {
        "id" : "a1b21ab7-349b-4c04-b32c-6133337f3295",
        "parentId" : "df147806-179a-4d1d-acf7-a4786de5630f",
        "authorId" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "body" : "```typescript\r\nconst paragraphs = document.querySelectorAll('p');\r\n// Array.from strictly isn't necessary but there appears to be a bug in the declarations. Passing an ArrayLike should work.\r\nconst $p = $(Array.from(paragraphs)); // JQuery<HTMLParagraphElement>\r\nconst $a = $p.add('div');\r\n```\r\n\r\nWith the current declarations, `$a` will be of type `JQuery<HTMLParagraphElement>` even though it may include `HTMLDivElement` objects. `$a` should probably be of type `JQuery<HTMLParagraphElement | HTMLDivElement>`. This can be accomplished by changing the return type of `.add()` from `this` to `JQuery<TElement | TAddedType>` where `TAddedType` would depend on the argument passed to `.add()`.\r\n\r\nI didn't make the change in this PR for several reasons.\r\n* I wasn't sure on the impact to the user experience. Would this change make certain scenarios unnecessarily difficult or awkward to use?\r\n* This isn't the only API affected by this. The jQuery API should be audited to determine which APIs are affected.\r\n* I haven't determined a cohesive, consistent solution. The solution needs to consider when it's appropriate to return a more specific type, what type to return when it's not possible to infer it, what to do for mixed-DOM scenarios (e.g. HTML + SVG), etc.",
        "createdAt" : "2018-11-27T18:35:38Z",
        "updatedAt" : "2018-12-09T19:52:15Z",
        "lastEditedBy" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "tags" : [
        ]
      },
      {
        "id" : "902e1867-96a6-439d-b8ef-9bd941559d02",
        "parentId" : "df147806-179a-4d1d-acf7-a4786de5630f",
        "authorId" : "70f3f43d-15fc-4e48-9cee-dd12ddea3e83",
        "body" : "How about `$p.add('.className')`? What is the returning type?",
        "createdAt" : "2018-11-28T13:59:18Z",
        "updatedAt" : "2018-12-09T19:52:15Z",
        "lastEditedBy" : "70f3f43d-15fc-4e48-9cee-dd12ddea3e83",
        "tags" : [
        ]
      },
      {
        "id" : "0acfabcb-2c2d-4a45-9e77-b16b5f3f4203",
        "parentId" : "df147806-179a-4d1d-acf7-a4786de5630f",
        "authorId" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "body" : "Since selecting by class name could select both HTML and SVG elements, the return type _should_ be `JQuery<HTMLParagraphElement | Element>`.\r\n\r\nHowever, in the current declarations there exists a call signature\r\n```typescript\r\n<TElement extends Element = HTMLElement>(selector: JQuery.Selector, context?: Element | Document | JQuery): JQuery<TElement>;\r\n```\r\nthat returns `HTMLElement` instead of `Element`. This was done for usability (vast majority of users will only use jQuery with HTML elements) and backwards compatibility (`@types/jquery@1` and formerly `@types/jquery@2` use `HTMLElement` as their selected type).\r\n\r\nSo for correctness, `.add('.className')` should return `Element` but for consistency, it should return `HTMLElement`.",
        "createdAt" : "2018-12-05T22:44:34Z",
        "updatedAt" : "2018-12-09T19:52:15Z",
        "lastEditedBy" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5001e2c42f6fc98305a683b018e6ff5af4a9ac16",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +84,88 @@     */\n    add(selector: JQuery.Selector, context: Element): this;\n    // TODO: The return type should reflect newly selected types.\n    /**\n     * Create a new jQuery object with elements added to the set of matched elements."
  },
  {
    "id" : "7fcd92e6-40be-4e41-916d-1dce27630a2a",
    "prId" : 30234,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30234#pullrequestreview-178948015",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ae8af7f-0753-4122-829f-c1dd279305ef",
        "parentId" : null,
        "authorId" : "70f3f43d-15fc-4e48-9cee-dd12ddea3e83",
        "body" : "This seems strange to me.",
        "createdAt" : "2018-11-27T15:21:48Z",
        "updatedAt" : "2018-12-09T19:52:15Z",
        "lastEditedBy" : "70f3f43d-15fc-4e48-9cee-dd12ddea3e83",
        "tags" : [
        ]
      },
      {
        "id" : "5595d1b8-f305-4a3d-8c12-7adb82e31ff8",
        "parentId" : "0ae8af7f-0753-4122-829f-c1dd279305ef",
        "authorId" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "body" : "The change here is from `JQuery` (`JQuery<HTMLElement>`) to `JQuery<JQuery.Node>`. `.replaceWith()` is indeed more permissive than previously declared and can accept `Text` and `Comment` objects. See [these tests](https://jsfiddle.net/leonard_thieu/ysa502gL/16/) for verification.",
        "createdAt" : "2018-11-27T18:45:17Z",
        "updatedAt" : "2018-12-09T19:52:15Z",
        "lastEditedBy" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "tags" : [
        ]
      }
    ],
    "commit" : "5001e2c42f6fc98305a683b018e6ff5af4a9ac16",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +9991,9995 @@     */\n    replaceWith(newContent_function: JQuery.htmlString |\n                                     JQuery<JQuery.Node> |\n                                     JQuery.TypeOrArray<Element> |\n                                     JQuery.Node |"
  },
  {
    "id" : "d8386b10-8291-4029-9ed3-22885ce1fd60",
    "prId" : 45618,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45618#pullrequestreview-434525213",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aff42f5b-dc8c-4bda-b0a2-a97eb5c6c817",
        "parentId" : null,
        "authorId" : "f4e7ec42-d599-478f-a665-71834c60da47",
        "body" : "I think the HTML example is unnecessary. A description in the comment with a link to documentation is enough for me.",
        "createdAt" : "2020-06-21T05:59:13Z",
        "updatedAt" : "2020-06-21T06:10:52Z",
        "lastEditedBy" : "f4e7ec42-d599-478f-a665-71834c60da47",
        "tags" : [
        ]
      },
      {
        "id" : "42f15fe6-3dbe-45f7-b9a6-d5c54a3eb7b9",
        "parentId" : "aff42f5b-dc8c-4bda-b0a2-a97eb5c6c817",
        "authorId" : "f4e7ec42-d599-478f-a665-71834c60da47",
        "body" : "the same for `even` function",
        "createdAt" : "2020-06-21T05:59:36Z",
        "updatedAt" : "2020-06-21T06:10:52Z",
        "lastEditedBy" : "f4e7ec42-d599-478f-a665-71834c60da47",
        "tags" : [
        ]
      },
      {
        "id" : "b67dbd3c-5683-4de4-ac40-6cc2354c367b",
        "parentId" : "aff42f5b-dc8c-4bda-b0a2-a97eb5c6c817",
        "authorId" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "body" : "![HTML example rendered in tooltip](https://user-images.githubusercontent.com/5265970/85231729-a23d1f80-b3c7-11ea-8630-840013de5931.png)\r\n\r\nThe HTML example will render in tooltips. Having the example in-editor reduces friction for developers who'd otherwise have to open the docs in a browser and then switch back to continue working.",
        "createdAt" : "2020-06-21T18:04:34Z",
        "updatedAt" : "2020-06-21T18:04:34Z",
        "lastEditedBy" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "tags" : [
        ]
      },
      {
        "id" : "fafa2321-d410-4ebe-b374-2c8caf4992cd",
        "parentId" : "aff42f5b-dc8c-4bda-b0a2-a97eb5c6c817",
        "authorId" : "f4e7ec42-d599-478f-a665-71834c60da47",
        "body" : "I know but I still prefer documentation opened in a browser because there will always actual documentation.",
        "createdAt" : "2020-06-21T18:13:31Z",
        "updatedAt" : "2020-06-21T18:21:47Z",
        "lastEditedBy" : "f4e7ec42-d599-478f-a665-71834c60da47",
        "tags" : [
        ]
      },
      {
        "id" : "d698ada8-748b-4ff1-aaf0-5ea566daa759",
        "parentId" : "aff42f5b-dc8c-4bda-b0a2-a97eb5c6c817",
        "authorId" : "889aa791-06c6-4e14-90d4-8e19d2ddb2b0",
        "body" : "@leonard-thieu @martin-badin thx for the review!",
        "createdAt" : "2020-06-21T19:10:15Z",
        "updatedAt" : "2020-06-21T19:10:15Z",
        "lastEditedBy" : "889aa791-06c6-4e14-90d4-8e19d2ddb2b0",
        "tags" : [
        ]
      }
    ],
    "commit" : "f52cc4f15ce4ac4f4cdef26105568401373e6ac7",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +6211,6215 @@     * @since 3.5\n     * @example â€‹ ````Highlight the odd items in a list.\n```html\n<!doctype html>\n<html lang=\"en\">"
  }
]