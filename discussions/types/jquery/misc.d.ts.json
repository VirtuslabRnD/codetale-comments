[
  {
    "id" : "b1d53acc-baee-4782-a535-604ec0c2569e",
    "prId" : 30144,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30144#pullrequestreview-170060272",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4c610ca-8501-4bff-8654-6801ffd3afe7",
        "parentId" : null,
        "authorId" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "body" : "Adding `object` to the union weakens the type a bit, although in practice, it's unlikely that users will attempt to a assign a non-function object to a property. I don't understand what's causing the assignability issue nor do I understand why including `object` in the union fixes it.",
        "createdAt" : "2018-10-31T01:04:06Z",
        "updatedAt" : "2018-12-05T23:36:23Z",
        "lastEditedBy" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "tags" : [
        ]
      }
    ],
    "commit" : "e067afd74c6a54eb618b82b92f195b9a21b7f0d8",
    "line" : 2304,
    "diffHunk" : "@@ -1,1 +6334,6338 @@                        false |\n                        undefined |\n                        object;\n    }\n"
  },
  {
    "id" : "32b585ce-cac4-423b-b2e3-84d61c9793d7",
    "prId" : 30144,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/30144#pullrequestreview-182003180",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12a4b8aa-d611-4283-99b4-a68da357be6f",
        "parentId" : null,
        "authorId" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "body" : "I can't find any instantiations of `TypeEventHandler` where `TCurrentTarget`, `TTarget` and `TContext` aren't all exactly the same type. It would be simpler to just have one type argument (`TTarget`?) instead of 3 separate ones.",
        "createdAt" : "2018-12-02T23:00:57Z",
        "updatedAt" : "2018-12-05T23:36:23Z",
        "lastEditedBy" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "tags" : [
        ]
      },
      {
        "id" : "ea7b2516-04e3-4d6e-985f-3d55c7ec092b",
        "parentId" : "12a4b8aa-d611-4283-99b4-a68da357be6f",
        "authorId" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "body" : "This comment was for an earlier commit -- I see you removed `TContext`, but my comment still applies to `TCurrentTarget` and `TTarget`. They could be simplified.",
        "createdAt" : "2018-12-02T23:47:30Z",
        "updatedAt" : "2018-12-05T23:36:23Z",
        "lastEditedBy" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "tags" : [
        ]
      },
      {
        "id" : "38b5884b-5e1c-4489-870a-31aa31da5c61",
        "parentId" : "12a4b8aa-d611-4283-99b4-a68da357be6f",
        "authorId" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "body" : "Sounds like a possible mistake elsewhere, an event's currentTarget is definitely not always the same as its target.\r\n\r\nThe way React dealt with it is that Change events and others that don't bubble have target = currentTarget, but other events have target being EventTarget.\r\n\r\nTContext is supposed to be whatever was the 2nd argument of .on in 3-argument form so sounds like another omission.",
        "createdAt" : "2018-12-02T23:50:38Z",
        "updatedAt" : "2018-12-05T23:36:23Z",
        "lastEditedBy" : "a81e6202-fa01-4d6d-b977-d96c59398a53",
        "tags" : [
        ]
      },
      {
        "id" : "d642f6d1-af89-490a-9258-f4a35f27a88a",
        "parentId" : "12a4b8aa-d611-4283-99b4-a68da357be6f",
        "authorId" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "body" : "For directly bound event handlers, `TElement` is passed for `TCurrentTarget` and `TTarget` because they are known to be the same object. For delegated event handlers, `any` is passed for `TCurrentTarget` and `TTarget` because they can be any element in the event propagation path and potentially refer to different objects.\r\n\r\nI went with 2 type parameters because they're not semantically the same. I was also concerned there might be scenarios where say a user asserts that `currentTarget` is of a certain type which might allow TypeScript to infer that `target` is the same type since they share a type parameter. I don't know if TypeScript actually does this but it didn't seem unreasonable. There's also concern with what to name it. `jQuery.Event` has 4 properties that have `target` in the name, one of which is named `target`. I think if a user came across a type parameter named `TTarget`, they'd either expect it to cover just the `target` property or all 4 `*Target` properties, not just a particular 2 of the 4.",
        "createdAt" : "2018-12-05T22:20:41Z",
        "updatedAt" : "2018-12-05T23:36:23Z",
        "lastEditedBy" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "tags" : [
        ]
      },
      {
        "id" : "a4cad479-9260-4e23-9223-19c27ace5d28",
        "parentId" : "12a4b8aa-d611-4283-99b4-a68da357be6f",
        "authorId" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "body" : "> TContext is supposed to be whatever was the 2nd argument of .on in 3-argument form so sounds like another omission.\r\n\r\n`TContext` is passed `TCurrentTarget` since they should be the same unless the function is bound to a different context.",
        "createdAt" : "2018-12-05T22:23:48Z",
        "updatedAt" : "2018-12-05T23:36:23Z",
        "lastEditedBy" : "61abb659-d3df-4d39-aa58-2c625b0d6da7",
        "tags" : [
        ]
      }
    ],
    "commit" : "e067afd74c6a54eb618b82b92f195b9a21b7f0d8",
    "line" : 2285,
    "diffHunk" : "@@ -1,1 +6315,6319 @@    > = EventHandlerBase<TCurrentTarget, TriggeredEvent<TCurrentTarget, TData>>;\n\n    type TypeEventHandler<\n        TDelegateTarget,\n        TData,"
  }
]