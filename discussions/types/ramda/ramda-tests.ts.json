[
  {
    "id" : "fbda2934-9253-4b9c-aabe-9613ae70be7d",
    "prId" : 15618,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/15618#pullrequestreview-30785510",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b50d6f0a-19f7-46b2-92ac-2a79126ba4a1",
        "parentId" : null,
        "authorId" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "body" : "This test does not conform to the `Functor` interface, because it's `map` method does not return a functor. However I don't think this matters to this test, hence the type assertion.",
        "createdAt" : "2017-04-04T13:58:02Z",
        "updatedAt" : "2017-04-04T13:58:02Z",
        "lastEditedBy" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a694ef256d5319e3ac8d0fa9f51aa7635677ede",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +669,673 @@        map: (fn: (c: number) => number) => {\n            var chars = \"Ifmmp!Xpsme\".split(\"\");\n            return chars.map((char) => String.fromCharCode(fn(char.charCodeAt(0)))).join(\"\") as any;\n        }\n    };"
  },
  {
    "id" : "1dc3176c-ab0a-45bf-880f-061f6abc9f94",
    "prId" : 21260,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21260#pullrequestreview-74298989",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0855b31e-f9c3-4e2e-ad72-d9486df38340",
        "parentId" : null,
        "authorId" : "a161efa3-ad0a-46da-bab2-b1f9e4f6d5c7",
        "body" : "The type parameters to `compose` were wrong here, which came to light as a result of these improved typings.",
        "createdAt" : "2017-11-05T23:51:13Z",
        "updatedAt" : "2017-11-05T23:51:13Z",
        "lastEditedBy" : "a161efa3-ad0a-46da-bab2-b1f9e4f6d5c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb51b88dec1abd321a99dfa4517a6556ac737475",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1857,1861 @@\n() => {\n    const sortByNameCaseInsensitive = R.sortBy(R.compose<Record<'name', string>, string, string>(R.toLower, R.prop(\"name\")));\n    const alice                     = {\n        name: \"ALICE\","
  },
  {
    "id" : "5e18bc18-4e7b-468b-8983-e601d1728c9f",
    "prId" : 36398,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36398#pullrequestreview-253796100",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27343067-0186-4064-bca5-fc4993b47e00",
        "parentId" : null,
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "Will this actually require providing type arguments? If not, please remove them. If so, then maybe we should consider the declaration here.",
        "createdAt" : "2019-06-25T04:55:01Z",
        "updatedAt" : "2019-06-25T04:55:02Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "e41ffee0-912e-4ab3-99b3-bce170ddedc4",
        "parentId" : "27343067-0186-4064-bca5-fc4993b47e00",
        "authorId" : "db0e5947-1115-4c28-bd95-b3da592ce859",
        "body" : "Provide the type arguments explicitly is required here.\r\nThis is cause by Typescript `strange` type infer behavior of overload function.\r\nIn this case, the `concat`  function not be infer `correctly`(you can see it be infer a very not make sense if you check the code in your editor), so we need provider type arguments\r\nexplicitly.\r\n\r\nSee [this issues](https://github.com/microsoft/TypeScript/issues/32081)",
        "createdAt" : "2019-06-25T06:38:19Z",
        "updatedAt" : "2019-06-25T06:38:19Z",
        "lastEditedBy" : "db0e5947-1115-4c28-bd95-b3da592ce859",
        "tags" : [
        ]
      }
    ],
    "commit" : "17db61cb6f8717be8125e987ef8b10a4bad2344f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2198,2202 @@    const x: number[] = R.ap([R.multiply(2), R.add(3)], [1, 2, 3]); // => [2, 4, 6, 4, 5, 6]\n    const y: number[] = R.ap([R.multiply(2), R.add(3)])([1, 2, 3]); // => [2, 4, 6, 4, 5, 6]\n    const z: string = R.ap<string, string, string>(R.concat, R.toUpper)('Ramda'); // => 'RamdaRAMDA'\n};\n"
  }
]