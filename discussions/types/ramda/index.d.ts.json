[
  {
    "id" : "aff33a2e-947b-4094-9348-5524109b2e6f",
    "prId" : 15618,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/15618#pullrequestreview-30785846",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a4189de-8e25-404c-a0f1-7b415153898a",
        "parentId" : null,
        "authorId" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "body" : "Is this correct? I think so https://github.com/fantasyland/fantasy-land#functor",
        "createdAt" : "2017-04-04T13:59:06Z",
        "updatedAt" : "2017-04-04T13:59:06Z",
        "lastEditedBy" : "0a67fd49-8b41-42a0-9d85-8a4ba0bfcc90",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a694ef256d5319e3ac8d0fa9f51aa7635677ede",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +16,20 @@\n    interface Functor<T> {\n        map<U>(fn: (t: T) => U): Functor<U>;\n    }\n"
  },
  {
    "id" : "85765604-978c-470b-8b75-402363401516",
    "prId" : 17594,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/17594#pullrequestreview-47554772",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c18900cb-bff8-438f-b30a-20539f189378",
        "parentId" : null,
        "authorId" : "dd998dd7-4ffd-4af0-95b1-6d30ed3b6fa4",
        "body" : "Why do you have `K | string`?  Not just `K`?",
        "createdAt" : "2017-07-02T13:16:10Z",
        "updatedAt" : "2017-07-02T13:16:36Z",
        "lastEditedBy" : "dd998dd7-4ffd-4af0-95b1-6d30ed3b6fa4",
        "tags" : [
        ]
      },
      {
        "id" : "b0f6bc6f-4953-4064-bc04-37c76da027e9",
        "parentId" : "c18900cb-bff8-438f-b30a-20539f189378",
        "authorId" : "dc47236a-758b-4684-bfcb-ab5a861e42a9",
        "body" : "The string alternative must be there because it is possible to call the pick function with names which are not part of the supplied object.\r\nThere are a couple of tests that show this.",
        "createdAt" : "2017-07-02T17:15:27Z",
        "updatedAt" : "2017-07-02T17:15:27Z",
        "lastEditedBy" : "dc47236a-758b-4684-bfcb-ab5a861e42a9",
        "tags" : [
        ]
      }
    ],
    "commit" : "d80cb8f1f5f0d72aaed55745a0715c4748f38e8f",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +1185,1189 @@         * property is ignored.\n         */\n        pick<T, K extends keyof T>(names: Array<K | string>, obj: T): Pick<T, K>;\n        pick(names: string[]): <T, U>(obj: T) => U;\n"
  },
  {
    "id" : "3b2e8c00-9856-4f6f-9138-1fbc14884e44",
    "prId" : 20219,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20219#pullrequestreview-66870063",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "927549aa-f23e-41c7-993c-63d19c13fef1",
        "parentId" : null,
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "Why is this not `Array<T | U>`? I guess it was already written this way...\r\n\r\nwat",
        "createdAt" : "2017-10-03T07:56:37Z",
        "updatedAt" : "2017-10-03T22:28:34Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "25d53dfd-735e-4274-91ea-38035f5bab8d",
        "parentId" : "927549aa-f23e-41c7-993c-63d19c13fef1",
        "authorId" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "body" : "convenience!",
        "createdAt" : "2017-10-03T19:29:03Z",
        "updatedAt" : "2017-10-03T22:28:34Z",
        "lastEditedBy" : "ad9f05a4-d336-4549-96b0-f8a3b95c9764",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0dec6bc6ba8670bf725f432c16a6992ebe818c8",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +227,231 @@         */\n        append<U>(el: U): <T>(list: T[]) => Array<(T & U)>;\n        append<T, U>(el: U, list: T[]): Array<(T & U)>;\n        append<T>(el: T, list: string): Array<T & string>;\n"
  },
  {
    "id" : "7ed2084f-5448-4286-a9f1-9df180edbbab",
    "prId" : 20819,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20819#pullrequestreview-73011475",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "307a3297-1d25-433d-99ec-e9a4cca161c1",
        "parentId" : null,
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "This overload does not have associated documentation. Consider copying the documentation from the preceding overload.",
        "createdAt" : "2017-10-30T22:51:18Z",
        "updatedAt" : "2017-11-01T09:57:47Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ba640f40ff15eb8cbf879dab1a74ce744013523",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1160,1164 @@         */\n        once(fn: (...a: any[]) => any): (...a: any[]) => any;\n        once<T>(fn: (...a: any[]) => T): (...a: any[]) => T;\n\n        /**"
  },
  {
    "id" : "b7a58fe3-48c9-45ee-888a-af2d8dbd3e30",
    "prId" : 20819,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20819#pullrequestreview-73011475",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ca65509-7461-469d-aa9d-2a326cf7e1e5",
        "parentId" : null,
        "authorId" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "body" : "This overload does not have associated documentation. Consider copying the documentation from the preceding overload.",
        "createdAt" : "2017-10-30T22:51:23Z",
        "updatedAt" : "2017-11-01T09:57:47Z",
        "lastEditedBy" : "0762ec2f-c2e9-4296-915b-f2139e71b5ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ba640f40ff15eb8cbf879dab1a74ce744013523",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1194,1198 @@         */\n        partial(fn: (...a: any[]) => any, ...args: any[]): (...a: any[]) => any;\n        partial<T>(fn: (...a: any[]) => T, ...args: any[]): (...a: any[]) => T;\n\n        /**"
  },
  {
    "id" : "797a1d8f-f549-4386-aa71-e5531eefda7a",
    "prId" : 21260,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21260#pullrequestreview-75897634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad1c787a-b2cc-481d-9429-9fc8aadf379f",
        "parentId" : null,
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "What do you think of the following type instead?\r\n\r\n```ts\r\nprop<P extends string>(p: P): <T extends Record<P, any>(obj: T): Pick<T, P>;\r\n```",
        "createdAt" : "2017-11-09T22:49:50Z",
        "updatedAt" : "2017-11-09T22:49:50Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "84978114-409d-4a0e-8457-0d4e88e31810",
        "parentId" : "ad1c787a-b2cc-481d-9429-9fc8aadf379f",
        "authorId" : "a161efa3-ad0a-46da-bab2-b1f9e4f6d5c7",
        "body" : "AFAIK they’re equivalent; is there a reason to prefer that? I find yours a little more complex to read.",
        "createdAt" : "2017-11-09T23:05:11Z",
        "updatedAt" : "2017-11-09T23:09:07Z",
        "lastEditedBy" : "a161efa3-ad0a-46da-bab2-b1f9e4f6d5c7",
        "tags" : [
        ]
      },
      {
        "id" : "3ac50e7a-82a2-4830-b430-b77b343c04f1",
        "parentId" : "ad1c787a-b2cc-481d-9429-9fc8aadf379f",
        "authorId" : "a161efa3-ad0a-46da-bab2-b1f9e4f6d5c7",
        "body" : "Wait, you mean `T[P]` instead of `Pick<T, P>`, don’t you?",
        "createdAt" : "2017-11-09T23:12:57Z",
        "updatedAt" : "2017-11-09T23:15:47Z",
        "lastEditedBy" : "a161efa3-ad0a-46da-bab2-b1f9e4f6d5c7",
        "tags" : [
        ]
      },
      {
        "id" : "c669eecb-44ce-41aa-89f3-9504dd0c6f50",
        "parentId" : "ad1c787a-b2cc-481d-9429-9fc8aadf379f",
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "Oh, yes, probably. Sorry about that.",
        "createdAt" : "2017-11-10T21:34:21Z",
        "updatedAt" : "2017-11-10T21:34:42Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "e582433b-2735-4df9-a171-6895490fa711",
        "parentId" : "ad1c787a-b2cc-481d-9429-9fc8aadf379f",
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "They're actually not exactly equivalent. With `Record<P, T>`, you're expecting an object that is homogeneous for some well-known `T` (meaning that if you have `{x: number, y: string}`, you'll get `number | string` if inference even determines it's appropriate to pick a union type there).\r\n\r\nIf you make `T` the object type, and then use an indexed access, you've delayed the evaluation of the return type until `T` is fully known, giving you a more accurate `prop`.",
        "createdAt" : "2017-11-10T21:36:49Z",
        "updatedAt" : "2017-11-10T21:37:57Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      },
      {
        "id" : "3a180ab7-84b4-4975-a491-5cef01378087",
        "parentId" : "ad1c787a-b2cc-481d-9429-9fc8aadf379f",
        "authorId" : "a161efa3-ad0a-46da-bab2-b1f9e4f6d5c7",
        "body" : "@DanielRosenwasser ok, but in this case `P` can't be a union of multiple literals, since it's determined by a single `p: P`. So `Record<P, T>` amounts to just `{ [p]: T }`.",
        "createdAt" : "2017-11-10T22:14:52Z",
        "updatedAt" : "2017-11-10T22:14:52Z",
        "lastEditedBy" : "a161efa3-ad0a-46da-bab2-b1f9e4f6d5c7",
        "tags" : [
        ]
      },
      {
        "id" : "17c07c29-4c02-49f7-9ada-c0823b6a1cd9",
        "parentId" : "ad1c787a-b2cc-481d-9429-9fc8aadf379f",
        "authorId" : "a161efa3-ad0a-46da-bab2-b1f9e4f6d5c7",
        "body" : "Well, I guess you could always explicitly widen `P` to a union of literals or even `string`. Fair point, I think you're right.",
        "createdAt" : "2017-11-10T22:26:09Z",
        "updatedAt" : "2017-11-10T22:26:09Z",
        "lastEditedBy" : "a161efa3-ad0a-46da-bab2-b1f9e4f6d5c7",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb51b88dec1abd321a99dfa4517a6556ac737475",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1451,1455 @@         */\n        prop<P extends string, T>(p: P, obj: Record<P, T>): T;\n        prop<P extends string>(p: P): <T>(obj: Record<P, T>) => T;\n\n        /**"
  },
  {
    "id" : "5b27ff7c-a120-4124-bd86-99a85d1451c2",
    "prId" : 21486,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21486#pullrequestreview-76372981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66a76ca8-aa35-44f8-a611-8fb28cd104be",
        "parentId" : null,
        "authorId" : "845fc937-970c-4a38-b5b0-3a625554507e",
        "body" : "Please update the curried version as well",
        "createdAt" : "2017-11-14T05:44:45Z",
        "updatedAt" : "2017-11-14T05:45:07Z",
        "lastEditedBy" : "845fc937-970c-4a38-b5b0-3a625554507e",
        "tags" : [
        ]
      },
      {
        "id" : "b617b78c-8066-4d67-a16b-17f1f8d167e8",
        "parentId" : "66a76ca8-aa35-44f8-a611-8fb28cd104be",
        "authorId" : "099adaba-888f-4a27-b043-8e55d5ec7a69",
        "body" : "@samsonkeung I don't know why, but curried version seems to work.",
        "createdAt" : "2017-11-14T09:17:09Z",
        "updatedAt" : "2017-11-14T09:17:09Z",
        "lastEditedBy" : "099adaba-888f-4a27-b043-8e55d5ec7a69",
        "tags" : [
        ]
      },
      {
        "id" : "0872c648-16e6-4ca9-98b8-f8e85e6d0760",
        "parentId" : "66a76ca8-aa35-44f8-a611-8fb28cd104be",
        "authorId" : "099adaba-888f-4a27-b043-8e55d5ec7a69",
        "body" : "If I wrote it like `prop<P extends keyof T, T>(p: P): (obj: T) => T[P];`, it wouldn't work (I don't know how to write it in different way so that it would work as expected. (It works as expected now though).",
        "createdAt" : "2017-11-14T09:19:19Z",
        "updatedAt" : "2017-11-14T09:19:36Z",
        "lastEditedBy" : "099adaba-888f-4a27-b043-8e55d5ec7a69",
        "tags" : [
        ]
      }
    ],
    "commit" : "3903644020d82e98c452656db4c2adb774ff2e49",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1450,1454 @@         */\n        prop<P extends keyof T, T>(p: P, obj: T): T[P];\n        prop<P extends string>(p: P): <T>(obj: Record<P, T>) => T;\n\n        /**"
  },
  {
    "id" : "ed07ffdc-cd4c-4f04-b78c-3ad82d2ac543",
    "prId" : 21771,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/21771#pullrequestreview-83792490",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ef8d64c-039b-46ac-a7b2-9287e58a9605",
        "parentId" : null,
        "authorId" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "body" : "I don't understand these properties - are they really part of the API? Can you provide a doc reference please?",
        "createdAt" : "2017-12-11T22:42:36Z",
        "updatedAt" : "2018-01-02T23:21:22Z",
        "lastEditedBy" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "tags" : [
        ]
      },
      {
        "id" : "87e547ad-289d-437c-858a-66f746616c3a",
        "parentId" : "9ef8d64c-039b-46ac-a7b2-9287e58a9605",
        "authorId" : "139f2028-3c90-4cc2-bf49-2935b0a550f9",
        "body" : "Seems to me like they are:\r\nhttps://github.com/ramda/ramda/blob/master/source/internal/_reduced.js",
        "createdAt" : "2017-12-12T02:25:44Z",
        "updatedAt" : "2018-01-02T23:21:22Z",
        "lastEditedBy" : "139f2028-3c90-4cc2-bf49-2935b0a550f9",
        "tags" : [
        ]
      },
      {
        "id" : "5586fff2-4b34-4162-a4d9-8e1d29c39ad7",
        "parentId" : "9ef8d64c-039b-46ac-a7b2-9287e58a9605",
        "authorId" : "225dbac5-3b45-4369-bbcf-f18867216a42",
        "body" : "Yes they are. They are an implementation detail that is subject to change, but I still think we should include this in the type definitions. Unfortunately there is no way in JavaScript or TypeScript to enforce encapsulation without using classes, AFAIK. And I don't think it is the job of the TypeScript definitions to enforce that kind of thing either, it should just represent the actual types used in the JavaScript library.",
        "createdAt" : "2017-12-12T07:44:25Z",
        "updatedAt" : "2018-01-02T23:21:22Z",
        "lastEditedBy" : "225dbac5-3b45-4369-bbcf-f18867216a42",
        "tags" : [
        ]
      },
      {
        "id" : "7e5a5027-b9dc-40b2-a9fa-3fd2b1137a61",
        "parentId" : "9ef8d64c-039b-46ac-a7b2-9287e58a9605",
        "authorId" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "body" : "> And I don't think it is the job of the TypeScript definitions to enforce that kind of thing either, it should just represent the actual types used in the JavaScript library.\r\n\r\nThis is up to interpretation. Of course the typings should represent actual types, but the goal of the typings is to allow developers to easily write correct, maintainable code. More often than not, this involves excluding implementation details and undocumented properties.\r\n\r\nI'm not familiar with this particular library, so I'm going to need your help understanding the intention. To demonstrate, could you add a test case, showing a common use case, that would fail without your changes?",
        "createdAt" : "2017-12-12T17:07:57Z",
        "updatedAt" : "2018-01-02T23:21:22Z",
        "lastEditedBy" : "d853babe-4254-41de-b4dc-f225efa4a6ff",
        "tags" : [
        ]
      },
      {
        "id" : "b8262804-b719-40b8-970d-0d7d669d9c10",
        "parentId" : "9ef8d64c-039b-46ac-a7b2-9287e58a9605",
        "authorId" : "225dbac5-3b45-4369-bbcf-f18867216a42",
        "body" : "Good idea, I will see if I can add a test case if I have the time",
        "createdAt" : "2017-12-15T12:16:17Z",
        "updatedAt" : "2018-01-02T23:21:22Z",
        "lastEditedBy" : "225dbac5-3b45-4369-bbcf-f18867216a42",
        "tags" : [
        ]
      }
    ],
    "commit" : "10fbc648ee5d8d02ed9cd23f60e588c213ccec29",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +150,154 @@\n    interface Reduced<T> {\n        '@@transducer/value': T;\n        '@@transducer/reduced': true;\n    }"
  }
]