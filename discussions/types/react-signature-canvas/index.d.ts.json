[
  {
    "id" : "2b513458-f89c-4634-aa3f-0fdc02e2e668",
    "prId" : 41396,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/41396#pullrequestreview-338388117",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afcce4ac-ccee-45b0-932f-548478f94fc5",
        "parentId" : null,
        "authorId" : "800163a6-42c8-49cb-8e95-8a4daa924462",
        "body" : "Is `HTMLCanvasElement` the right generic type? I thought it should be `canvasProps<T>?: React.CanvasHTMLAttributes<T>`, but I'm not 100% sure. If you could provide an explanation, would be helpful to understand better :pray: .\r\n\r\nSee same discussion in https://github.com/agilgur5/react-signature-canvas/pull/25#discussion_r303264418",
        "createdAt" : "2020-01-04T20:55:51Z",
        "updatedAt" : "2020-01-05T08:49:00Z",
        "lastEditedBy" : "800163a6-42c8-49cb-8e95-8a4daa924462",
        "tags" : [
        ]
      },
      {
        "id" : "5694517e-389e-4cc8-b2a8-9158b7f97fc5",
        "parentId" : "afcce4ac-ccee-45b0-932f-548478f94fc5",
        "authorId" : "e8150f93-f6da-475d-814b-9fcbe54e22d2",
        "body" : "I believe this is the only proper way to type the attributes of a canvas element. This is how it's used in `React` itself:\r\n```\r\ncanvas: React.DetailedHTMLProps<React.CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\r\n```",
        "createdAt" : "2020-01-04T23:18:54Z",
        "updatedAt" : "2020-01-05T08:49:00Z",
        "lastEditedBy" : "e8150f93-f6da-475d-814b-9fcbe54e22d2",
        "tags" : [
        ]
      },
      {
        "id" : "6d7f2f8d-f8a1-4f0a-bf8c-c325f9ce75f6",
        "parentId" : "afcce4ac-ccee-45b0-932f-548478f94fc5",
        "authorId" : "800163a6-42c8-49cb-8e95-8a4daa924462",
        "body" : "Huh, confusing why it would be a generic then ðŸ¤”   I guess it passes type-checking in the tests, so that does mean it works o.o. ",
        "createdAt" : "2020-01-05T01:26:37Z",
        "updatedAt" : "2020-01-05T08:49:00Z",
        "lastEditedBy" : "800163a6-42c8-49cb-8e95-8a4daa924462",
        "tags" : [
        ]
      },
      {
        "id" : "d29a9113-7396-4fb4-930e-3bf32ae94bf6",
        "parentId" : "afcce4ac-ccee-45b0-932f-548478f94fc5",
        "authorId" : "e8150f93-f6da-475d-814b-9fcbe54e22d2",
        "body" : "I think it's generic because of consistency. In the React's type definitions, `CanvasHTMLAttributes` is defined as:\r\n```\r\ninterface CanvasHTMLAttributes<T> extends HTMLAttributes<T> {\r\n    height?: number | string;\r\n    width?: number | string;\r\n}\r\n```\r\n\r\n`IntrinsicElements` interface which defines all html elements looks like:\r\n```\r\n[...]\r\nbutton: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\ncanvas: React.DetailedHTMLProps<React.CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\r\ncaption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\r\n[...]\r\n```\r\n\r\nGeneric type passed to `HTMLAttributes` is used mostly (if not only) in event handlers definitions, e.g.: `onFocus?: FocusEventHandler<T>;`",
        "createdAt" : "2020-01-05T08:54:46Z",
        "updatedAt" : "2020-01-05T08:54:47Z",
        "lastEditedBy" : "e8150f93-f6da-475d-814b-9fcbe54e22d2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e76094df8f0ad0acfaab2363ec79339b70ff0119",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +8,12 @@\nexport interface ReactSignatureCanvasProps extends SignaturePad.SignaturePadOptions {\n    canvasProps?: React.CanvasHTMLAttributes<HTMLCanvasElement>;\n    clearOnResize?: boolean;\n}"
  }
]