[
  {
    "id" : "34f16745-3af4-4f33-8ddb-918214509216",
    "prId" : 19369,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/19369#pullrequestreview-59145288",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e7509e1-bbf1-4a64-b11f-dc9216341ac1",
        "parentId" : null,
        "authorId" : "c1e032d5-2244-4735-9385-971a949ddd75",
        "body" : "I'm not sure about this... the comment above indicates this should be allowed, and without it there's an error in the test... (but it's not directly related).",
        "createdAt" : "2017-08-28T22:22:36Z",
        "updatedAt" : "2017-08-28T22:22:37Z",
        "lastEditedBy" : "c1e032d5-2244-4735-9385-971a949ddd75",
        "tags" : [
        ]
      },
      {
        "id" : "e21eb00b-a0c8-4095-9392-5e0ac6ad0238",
        "parentId" : "8e7509e1-bbf1-4a64-b11f-dc9216341ac1",
        "authorId" : "58289451-5a61-4ca5-821e-d0e0cd2a80f1",
        "body" : "Oh huh, I just checked out the code and you're right about a seemingly unrelated failure.\r\n\r\nIt looks like that line in the tests\r\n```ts\r\nconst xf = t.comp(t.map(reverse), t.cat);\r\n```\r\nis a bit too much to ask from type inference. Without the overload, `xf` is inferred as `CompletingTransformer<{}, {}, number[]>`. Even with the overload which makes the error go away, `xf` is inferred as the somewhat unsatisfying `Transducer<number[], any>`. I tried to make it work with stuff like\r\n```ts\r\nconst xf = t.comp<number[], number[], number>(t.map(reverse), t.cat);\r\n```\r\nwhich led to other complicated errors.\r\n\r\nIt looks like this is indicative of a deeper problem that typical usage of this library simply asks too much of the type inferencer. I'm happy to add the overload, and we may just have to live with not getting satisfying types from this library when using `comp`.\r\n\r\n(Shameless plug: these sorts of issues are exactly why I wrote [Transducist](https://github.com/dphilipson/transducist)).",
        "createdAt" : "2017-08-29T06:15:14Z",
        "updatedAt" : "2017-08-29T06:16:59Z",
        "lastEditedBy" : "58289451-5a61-4ca5-821e-d0e0cd2a80f1",
        "tags" : [
        ]
      },
      {
        "id" : "8899a81d-dd7d-4517-9c35-0c16bd60de4d",
        "parentId" : "8e7509e1-bbf1-4a64-b11f-dc9216341ac1",
        "authorId" : "c1e032d5-2244-4735-9385-971a949ddd75",
        "body" : "Yeah, I figured something like that... https://github.com/DefinitelyTyped/DefinitelyTyped/issues/19276#issuecomment-325168002\r\n\r\nThanks for taking a look in any case!\r\n\r\nYour lib looks useful! (I'm more a fan of inherent TS libs anyways :-D)",
        "createdAt" : "2017-08-29T06:48:22Z",
        "updatedAt" : "2017-08-29T06:48:22Z",
        "lastEditedBy" : "c1e032d5-2244-4735-9385-971a949ddd75",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a938a25f7d49cc5b15aa6b95ef3fc1c245e61e4",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +16,20 @@//   Transformer<TResult, TOutput> => Transformer<TResult, TInput>.\nexport interface Transducer<TInput, TOutput> {\n    <TResult>(xf: Transformer<TResult, TOutput>)\n        : Transformer<TResult, TInput>;\n    <TResult, TCompleteResult>(xf: CompletingTransformer<TResult, TCompleteResult, TOutput>)"
  }
]