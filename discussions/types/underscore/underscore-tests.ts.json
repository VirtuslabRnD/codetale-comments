[
  {
    "id" : "357bbb9c-0ab2-4494-b61e-6da8d71abf0d",
    "prId" : 36510,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36510#pullrequestreview-256300055",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8746f943-9be0-456b-a30b-147155c93541",
        "parentId" : null,
        "authorId" : "2bb619c2-ecd2-48e8-8e59-d1208775b7ce",
        "body" : "This test should actually fail, as performing filter on a a Dictionary<T> returns T[], thus performing map on it will need the following iterator:\r\n```\r\n(value: T, index: number, list: T[]): TResult\r\n```\r\nThe reason this test passes now is because of missing signature of filter for _Chain which should be:\r\n```ts\r\nfilter(iterator: _.ObjectIterator<T, boolean>, context?: any): _Chain<T, T[]>;\r\n```\r\nBut fixing it will not even help as the entire _Chain interface is malformed :-( and I'm working on a wide fix for it.\r\nI would rather you only add tests that use the fixed map method",
        "createdAt" : "2019-07-01T08:52:32Z",
        "updatedAt" : "2019-07-01T12:09:37Z",
        "lastEditedBy" : "2bb619c2-ecd2-48e8-8e59-d1208775b7ce",
        "tags" : [
        ]
      },
      {
        "id" : "e23e8061-c83f-4604-b937-ac5f36741e04",
        "parentId" : "8746f943-9be0-456b-a30b-147155c93541",
        "authorId" : "fc2b87a1-31b1-453f-a095-f3215fe0becc",
        "body" : "You have right. I will stick in this test to 'map' function. I interface definition I was trying to test.",
        "createdAt" : "2019-07-01T12:17:09Z",
        "updatedAt" : "2019-07-01T12:29:53Z",
        "lastEditedBy" : "fc2b87a1-31b1-453f-a095-f3215fe0becc",
        "tags" : [
        ]
      }
    ],
    "commit" : "f197216080ed9b4deb9174023927ede6eaacbad9",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +221,225 @@};\n\nlet youngPeopleId: string[] = _.chain(usersData)\n    .map((p, k: string) => k)\n    .value();"
  },
  {
    "id" : "af17a1ba-7ac0-4415-9e94-5ecabe0c7da8",
    "prId" : 36510,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36510#pullrequestreview-256356102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f346689e-c518-4ab1-8651-8dcecd628f17",
        "parentId" : null,
        "authorId" : "2bb619c2-ecd2-48e8-8e59-d1208775b7ce",
        "body" : "why did you remove the type here?\r\nIt is best to use the flatten() method here and then get the value",
        "createdAt" : "2019-07-01T13:35:44Z",
        "updatedAt" : "2019-07-01T13:36:15Z",
        "lastEditedBy" : "2bb619c2-ecd2-48e8-8e59-d1208775b7ce",
        "tags" : [
        ]
      },
      {
        "id" : "c868502a-bb65-4dfc-840c-f063cadcd503",
        "parentId" : "f346689e-c518-4ab1-8651-8dcecd628f17",
        "authorId" : "fc2b87a1-31b1-453f-a095-f3215fe0becc",
        "body" : "because the type by the underscore should be like this one in the comment, But with current typescript definition, There is missing one level of array nest. \r\n`{ age: number; name: string; id: string }[][]  // type return by underscore`\r\n`{ age: number; name: string; id: string }[]    // type with is calculate base of current definitions`\r\nIt would require more changes in the underscore typescript definition. And I'm not certain what should be changed?\r\n`interface _ChainOfArrays<T> extends _Chain<T[]> `\r\nto \r\n`interface _ChainOfArrays<T> extends _Chain<T[], T[][]> `\r\nit will not match with data return from function 'groupBy'\r\n\r\n\r\n\r\n",
        "createdAt" : "2019-07-01T13:55:42Z",
        "updatedAt" : "2019-07-01T13:56:46Z",
        "lastEditedBy" : "fc2b87a1-31b1-453f-a095-f3215fe0becc",
        "tags" : [
        ]
      },
      {
        "id" : "b475de81-b18e-4a2b-b794-919b5a083a3e",
        "parentId" : "f346689e-c518-4ab1-8651-8dcecd628f17",
        "authorId" : "2bb619c2-ecd2-48e8-8e59-d1208775b7ce",
        "body" : "You are correct. Lets leave it be for now",
        "createdAt" : "2019-07-01T14:01:38Z",
        "updatedAt" : "2019-07-01T14:01:39Z",
        "lastEditedBy" : "2bb619c2-ecd2-48e8-8e59-d1208775b7ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "f197216080ed9b4deb9174023927ede6eaacbad9",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +232,236 @@\n// Test map function with _ChainOfArrays<>\nlet usersTable_2 /*: { age: number; name: string; id: string }[][]*/ = _.chain(usersData)\n    .map<{ age: number; name: string; id: string }>((p, k: string) => {\n        return [{ id: k, ...p }];"
  },
  {
    "id" : "e680e36d-f918-4896-874f-f57a93567aca",
    "prId" : 36510,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36510#pullrequestreview-256340559",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe9830fc-c498-4b4a-8274-bcb325d060ea",
        "parentId" : null,
        "authorId" : "2bb619c2-ecd2-48e8-8e59-d1208775b7ce",
        "body" : "same here - why did you remove the type?",
        "createdAt" : "2019-07-01T13:36:12Z",
        "updatedAt" : "2019-07-01T13:36:15Z",
        "lastEditedBy" : "2bb619c2-ecd2-48e8-8e59-d1208775b7ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "f197216080ed9b4deb9174023927ede6eaacbad9",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +238,242 @@    .value();\n\nlet usersTable_3 /*: { score: number; fullName: string; login: string }[][]*/ = _.chain(usersTable)\n    .map<{ score: number; fullName: string; login: string }>(p => {\n        return ["
  },
  {
    "id" : "625ec46d-f5a3-4855-a7c5-32b0f3dbeddb",
    "prId" : 45304,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45304#pullrequestreview-432929318",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3efbc67e-53bc-42c3-a5bb-622e23e7c93f",
        "parentId" : null,
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "The problem with this example from #7931, though, is that while it passes with the current changes it's not a great example of what someone would actually want to do since most folks would want to use the values from the reduce call rather than just turning them all into ones. I tried doing something that someone would actually want to do in such a situation (shown below) and ran into trouble. Happily, it's trouble that I know how to deal with pretty quickly and easily from my long-term experimentation! Less happily, applying it will require a change to all return types that were previously `_ChainSingle`s and potentially the addition of more tests üòû.\r\n\r\n```TS\r\n_.chain([1, 2, 3])\r\n    .reduce((acc, x) => { acc.unshift(x); return acc; }, [] as number[])\r\n    .map(n => n + 1) // error - n is number[] when it should be number\r\n    .value();\r\n```\r\n\r\nTo deal with this, I can change all functions that were returning `_ChainSingle<T>` to return `_Chain<TypeOfCollection<T>, T>` rather than just `_Chain<T>`.\r\n\r\nSince I know what to do here, it won't be difficult to do, and it would be nice for this to work in situations like those described in the issue filed around this, I'll make that change and add a few more interesting tests around that. Sorry for not catching this until now üòû ",
        "createdAt" : "2020-06-18T03:44:10Z",
        "updatedAt" : "2020-06-18T04:46:46Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "605701a8-ce6b-48d8-93ba-88c898b2ac7e",
        "parentId" : "3efbc67e-53bc-42c3-a5bb-622e23e7c93f",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "I should note, too, that this is specifically an issue with operations that result in collections; these changes would still work fine as-is with reduce and other operations previously resulting in a `_ChainSingle` that would yield non-collection items like objects with properties of multiple types, strings, and numbers.",
        "createdAt" : "2020-06-18T03:56:43Z",
        "updatedAt" : "2020-06-18T04:46:46Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "ef1d192f-0f1a-460e-8203-fb6b8ea1294a",
        "parentId" : "3efbc67e-53bc-42c3-a5bb-622e23e7c93f",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "The change is made! To do this, I reverted the change where I removed `_ChainSingle<T>` and instead redefined `_ChainSingle<V>` as `_Chain<TypeOfCollection<V>, V>`, which is admittedly how I ideally see `_Chain` itself being defined long-term anyway except with `V` being the first parameter and `T` technically not even needing to exist. One other advantage around making this change is that it reduces the likelihood of accidental foot-shooting because any type `V` that is not a collection will result in a `T` type of `never`, which makes calling the functions that expect to act on collections not work very well when tried on wrapped non-collections üòÅ \r\n\r\nThis also involved updating `Collection<T>` to something more useful, though I was planning on doing that in the next PR anyway.",
        "createdAt" : "2020-06-18T04:17:23Z",
        "updatedAt" : "2020-06-18T04:46:46Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      }
    ],
    "commit" : "3835c33848aed8f30912d06e75e9074c51cf5d6d",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +679,683 @@    .first()\n    .reduce((aggregate, n) => aggregate + n, 0)\n    .value();\n\n// common testing types and objects"
  }
]