[
  {
    "id" : "357bbb9c-0ab2-4494-b61e-6da8d71abf0d",
    "prId" : 36510,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36510#pullrequestreview-256300055",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8746f943-9be0-456b-a30b-147155c93541",
        "parentId" : null,
        "authorId" : "2bb619c2-ecd2-48e8-8e59-d1208775b7ce",
        "body" : "This test should actually fail, as performing filter on a a Dictionary<T> returns T[], thus performing map on it will need the following iterator:\r\n```\r\n(value: T, index: number, list: T[]): TResult\r\n```\r\nThe reason this test passes now is because of missing signature of filter for _Chain which should be:\r\n```ts\r\nfilter(iterator: _.ObjectIterator<T, boolean>, context?: any): _Chain<T, T[]>;\r\n```\r\nBut fixing it will not even help as the entire _Chain interface is malformed :-( and I'm working on a wide fix for it.\r\nI would rather you only add tests that use the fixed map method",
        "createdAt" : "2019-07-01T08:52:32Z",
        "updatedAt" : "2019-07-01T12:09:37Z",
        "lastEditedBy" : "2bb619c2-ecd2-48e8-8e59-d1208775b7ce",
        "tags" : [
        ]
      },
      {
        "id" : "e23e8061-c83f-4604-b937-ac5f36741e04",
        "parentId" : "8746f943-9be0-456b-a30b-147155c93541",
        "authorId" : "fc2b87a1-31b1-453f-a095-f3215fe0becc",
        "body" : "You have right. I will stick in this test to 'map' function. I interface definition I was trying to test.",
        "createdAt" : "2019-07-01T12:17:09Z",
        "updatedAt" : "2019-07-01T12:29:53Z",
        "lastEditedBy" : "fc2b87a1-31b1-453f-a095-f3215fe0becc",
        "tags" : [
        ]
      }
    ],
    "commit" : "f197216080ed9b4deb9174023927ede6eaacbad9",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +221,225 @@};\n\nlet youngPeopleId: string[] = _.chain(usersData)\n    .map((p, k: string) => k)\n    .value();"
  },
  {
    "id" : "af17a1ba-7ac0-4415-9e94-5ecabe0c7da8",
    "prId" : 36510,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36510#pullrequestreview-256356102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f346689e-c518-4ab1-8651-8dcecd628f17",
        "parentId" : null,
        "authorId" : "2bb619c2-ecd2-48e8-8e59-d1208775b7ce",
        "body" : "why did you remove the type here?\r\nIt is best to use the flatten() method here and then get the value",
        "createdAt" : "2019-07-01T13:35:44Z",
        "updatedAt" : "2019-07-01T13:36:15Z",
        "lastEditedBy" : "2bb619c2-ecd2-48e8-8e59-d1208775b7ce",
        "tags" : [
        ]
      },
      {
        "id" : "c868502a-bb65-4dfc-840c-f063cadcd503",
        "parentId" : "f346689e-c518-4ab1-8651-8dcecd628f17",
        "authorId" : "fc2b87a1-31b1-453f-a095-f3215fe0becc",
        "body" : "because the type by the underscore should be like this one in the comment, But with current typescript definition, There is missing one level of array nest. \r\n`{ age: number; name: string; id: string }[][]  // type return by underscore`\r\n`{ age: number; name: string; id: string }[]    // type with is calculate base of current definitions`\r\nIt would require more changes in the underscore typescript definition. And I'm not certain what should be changed?\r\n`interface _ChainOfArrays<T> extends _Chain<T[]> `\r\nto \r\n`interface _ChainOfArrays<T> extends _Chain<T[], T[][]> `\r\nit will not match with data return from function 'groupBy'\r\n\r\n\r\n\r\n",
        "createdAt" : "2019-07-01T13:55:42Z",
        "updatedAt" : "2019-07-01T13:56:46Z",
        "lastEditedBy" : "fc2b87a1-31b1-453f-a095-f3215fe0becc",
        "tags" : [
        ]
      },
      {
        "id" : "b475de81-b18e-4a2b-b794-919b5a083a3e",
        "parentId" : "f346689e-c518-4ab1-8651-8dcecd628f17",
        "authorId" : "2bb619c2-ecd2-48e8-8e59-d1208775b7ce",
        "body" : "You are correct. Lets leave it be for now",
        "createdAt" : "2019-07-01T14:01:38Z",
        "updatedAt" : "2019-07-01T14:01:39Z",
        "lastEditedBy" : "2bb619c2-ecd2-48e8-8e59-d1208775b7ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "f197216080ed9b4deb9174023927ede6eaacbad9",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +232,236 @@\n// Test map function with _ChainOfArrays<>\nlet usersTable_2 /*: { age: number; name: string; id: string }[][]*/ = _.chain(usersData)\n    .map<{ age: number; name: string; id: string }>((p, k: string) => {\n        return [{ id: k, ...p }];"
  },
  {
    "id" : "e680e36d-f918-4896-874f-f57a93567aca",
    "prId" : 36510,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36510#pullrequestreview-256340559",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe9830fc-c498-4b4a-8274-bcb325d060ea",
        "parentId" : null,
        "authorId" : "2bb619c2-ecd2-48e8-8e59-d1208775b7ce",
        "body" : "same here - why did you remove the type?",
        "createdAt" : "2019-07-01T13:36:12Z",
        "updatedAt" : "2019-07-01T13:36:15Z",
        "lastEditedBy" : "2bb619c2-ecd2-48e8-8e59-d1208775b7ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "f197216080ed9b4deb9174023927ede6eaacbad9",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +238,242 @@    .value();\n\nlet usersTable_3 /*: { score: number; fullName: string; login: string }[][]*/ = _.chain(usersTable)\n    .map<{ score: number; fullName: string; login: string }>(p => {\n        return ["
  },
  {
    "id" : "625ec46d-f5a3-4855-a7c5-32b0f3dbeddb",
    "prId" : 45304,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45304#pullrequestreview-432929318",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3efbc67e-53bc-42c3-a5bb-622e23e7c93f",
        "parentId" : null,
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "The problem with this example from #7931, though, is that while it passes with the current changes it's not a great example of what someone would actually want to do since most folks would want to use the values from the reduce call rather than just turning them all into ones. I tried doing something that someone would actually want to do in such a situation (shown below) and ran into trouble. Happily, it's trouble that I know how to deal with pretty quickly and easily from my long-term experimentation! Less happily, applying it will require a change to all return types that were previously `_ChainSingle`s and potentially the addition of more tests üòû.\r\n\r\n```TS\r\n_.chain([1, 2, 3])\r\n    .reduce((acc, x) => { acc.unshift(x); return acc; }, [] as number[])\r\n    .map(n => n + 1) // error - n is number[] when it should be number\r\n    .value();\r\n```\r\n\r\nTo deal with this, I can change all functions that were returning `_ChainSingle<T>` to return `_Chain<TypeOfCollection<T>, T>` rather than just `_Chain<T>`.\r\n\r\nSince I know what to do here, it won't be difficult to do, and it would be nice for this to work in situations like those described in the issue filed around this, I'll make that change and add a few more interesting tests around that. Sorry for not catching this until now üòû ",
        "createdAt" : "2020-06-18T03:44:10Z",
        "updatedAt" : "2020-06-18T04:46:46Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "605701a8-ce6b-48d8-93ba-88c898b2ac7e",
        "parentId" : "3efbc67e-53bc-42c3-a5bb-622e23e7c93f",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "I should note, too, that this is specifically an issue with operations that result in collections; these changes would still work fine as-is with reduce and other operations previously resulting in a `_ChainSingle` that would yield non-collection items like objects with properties of multiple types, strings, and numbers.",
        "createdAt" : "2020-06-18T03:56:43Z",
        "updatedAt" : "2020-06-18T04:46:46Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "ef1d192f-0f1a-460e-8203-fb6b8ea1294a",
        "parentId" : "3efbc67e-53bc-42c3-a5bb-622e23e7c93f",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "The change is made! To do this, I reverted the change where I removed `_ChainSingle<T>` and instead redefined `_ChainSingle<V>` as `_Chain<TypeOfCollection<V>, V>`, which is admittedly how I ideally see `_Chain` itself being defined long-term anyway except with `V` being the first parameter and `T` technically not even needing to exist. One other advantage around making this change is that it reduces the likelihood of accidental foot-shooting because any type `V` that is not a collection will result in a `T` type of `never`, which makes calling the functions that expect to act on collections not work very well when tried on wrapped non-collections üòÅ \r\n\r\nThis also involved updating `Collection<T>` to something more useful, though I was planning on doing that in the next PR anyway.",
        "createdAt" : "2020-06-18T04:17:23Z",
        "updatedAt" : "2020-06-18T04:46:46Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      }
    ],
    "commit" : "3835c33848aed8f30912d06e75e9074c51cf5d6d",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +679,683 @@    .first()\n    .reduce((aggregate, n) => aggregate + n, 0)\n    .value();\n\n// common testing types and objects"
  },
  {
    "id" : "e81597cf-1052-4650-8d7a-8f3bae066797",
    "prId" : 45893,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45893#pullrequestreview-442828390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df899a21-b555-4819-bc0e-b0b8fa051e90",
        "parentId" : null,
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "I ran into an interesting issue with the `UnderscoreStatic` overloads of these functions specifically, which is why there are separate list and dictionary overloads of them at this time. For some reason if I use a `Collection` constraint and a `MemoCollectionIterator` in `UnderscoreStatic`, a `memo` value of `0` is not widened to `number` but instead causes the result type to be `0`, which doesn't work well. Super surprisingly, though, that behavior does not also occur in `Underscore` and `_Chain` overloads. I should probably look for an issue in the TS repository that explains why this might be occurring and file an issue asking about it if I can't find one.",
        "createdAt" : "2020-07-05T02:14:38Z",
        "updatedAt" : "2020-07-07T16:00:46Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "ed6dd2d8-850d-4969-90b0-efbd73faae75",
        "parentId" : "df899a21-b555-4819-bc0e-b0b8fa051e90",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "Oh yeah, this issue also only happens when the type for `memo` is not explicitly specified in the iteratee, which is why my tests didn't catch it since I always declare the iteratee separately with explicit parameter types. The alternation between a partial and full iterator signature was something I added as an attempt to figure out what was going on here, and I decided to keep it because it seemed like a nice case to cover.",
        "createdAt" : "2020-07-05T02:28:39Z",
        "updatedAt" : "2020-07-07T16:00:46Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "b935c9b1-7c76-4d12-b109-042d8108fb07",
        "parentId" : "df899a21-b555-4819-bc0e-b0b8fa051e90",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "I think the example below that shows the difference in type inference given a function vs. class generic `V` is as simple as I can make it and still have it repro:\r\n\r\n```TS\r\ninterface MemoIterator<TResult> {\r\n    (memo: TResult, num: number): TResult;\r\n}\r\n\r\ntype MemoCollectionIterator<TResult, V> =\r\n    V extends number[] ? MemoIterator<TResult>\r\n    : never;\r\n\r\ninterface FunctionGeneric {\r\n    reduce<V, TResult>(\r\n        collection: V,\r\n        iteratee: MemoCollectionIterator<TResult, V>,\r\n        memo: TResult\r\n    ): TResult;\r\n}\r\n\r\ninterface ClassGeneric<V> {\r\n    reduce<TResult>(\r\n        collection: V,\r\n        iteratee: MemoCollectionIterator<TResult, V>,\r\n        memo: TResult\r\n    ): TResult;\r\n}\r\n\r\ndeclare const functionGeneric: FunctionGeneric;\r\ndeclare const classGeneric: ClassGeneric<number[]>;\r\n\r\nfunctionGeneric.reduce([1, 2, 3], (memo, num) => memo + num, 0); // TResult is inferred as 0\r\nclassGeneric.reduce([1, 2, 3], (memo, num) => memo + num, 0); // TResult is inferred as number\r\n```",
        "createdAt" : "2020-07-05T09:25:48Z",
        "updatedAt" : "2020-07-07T16:00:46Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "2c4833bc-048c-41eb-8c58-bfb04bab1137",
        "parentId" : "df899a21-b555-4819-bc0e-b0b8fa051e90",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "I guess `V` isn't being inferred in the `ClassGeneric` case, so it probably isn't adding much, which I guess indicates that it's the inference of `V` that's causing issues.\r\n\r\n```TS\r\ninterface MemoIterator<TResult> {\r\n    (memo: TResult, num: number): TResult;\r\n}\r\n\r\ntype MemoCollectionIterator<TResult, V> =\r\n    V extends number[] ? MemoIterator<TResult>\r\n    : never;\r\n\r\ninterface Test {\r\n    reduce<V, TResult>(\r\n        collection: V,\r\n        iteratee: MemoCollectionIterator<TResult, V>,\r\n        memo: TResult\r\n    ): TResult;\r\n\r\n    reduce2<TResult>(\r\n        collection: number[],\r\n        iteratee: MemoCollectionIterator<TResult, number[]>,\r\n        memo: TResult\r\n    ): TResult;\r\n}\r\n\r\ndeclare const test: Test;\r\ntest.reduce([1, 2, 3], (memo, num) => memo + num, 0); // TResult is inferred as 0\r\ntest.reduce2([1, 2, 3], (memo, num) => memo + num, 0); // TResult is inferred as number\r\n```",
        "createdAt" : "2020-07-05T09:40:06Z",
        "updatedAt" : "2020-07-07T16:00:46Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "edffc9ab-da59-4934-85ed-39736318ef0c",
        "parentId" : "df899a21-b555-4819-bc0e-b0b8fa051e90",
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "I'm not sure whether this is playing a direct role in your observations, but your reduced testcases remind me that the type of `_.reduce` is impossible to express precisely in TypeScript, anyway. All of the iteratee typings we have seen in the PR so far, i.e., both the pre-existing ones and your changes, assume that the iteratee is function that involves at most two types:\r\n\r\n```ts\r\n// with memo\r\ninterface Reducer<T, R> {\r\n    (memo: R, element: T): R;\r\n}\r\n\r\n// without memo\r\ninterface Reducer<T> {\r\n    (memo: T, element: T): T;\r\n}\r\n```\r\n\r\nBut in the general case, the two parameters and the return type can be all distinct and the reducer behaves like a finite state machine:\r\n\r\n```ts\r\n// simple case with a single terminal type\r\ninterface Reducer<T, R> {\r\n    (memo: T, element: T): R;\r\n    (memo: R, element: T): R;\r\n}\r\n\r\n// traffic light cycle\r\ninterface Reducer<T, R, S> {\r\n    (memo: T, element: T): R;\r\n    (memo: R, element: T): S;\r\n    (memo: S, element: T): T;\r\n}\r\n\r\n// total mayhem\r\ninterface Reducer<A, B, C, D, E> {\r\n    (memo: A, element: B): C;\r\n    (memo: A, element: D): C;\r\n    (memo: C, element: B): E;\r\n    (memo: C, element: D): A;\r\n    (memo: E, element: B): E;\r\n    (memo: E, element: D): A;\r\n}\r\n```\r\n\r\nThis is of course too expensive to infer in the general case and that's why `TResult` will often pretend to be a union type. But then still, strictly speaking, the memo can be *either* `T` *or* `TResult` in the most general case. I'm afraid this is just a situation where TypeScript cannot accurately represent JavaScript.",
        "createdAt" : "2020-07-05T19:55:25Z",
        "updatedAt" : "2020-07-07T16:00:46Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      },
      {
        "id" : "6eab7a64-c0cb-4b3d-87f8-521a8d751ecb",
        "parentId" : "df899a21-b555-4819-bc0e-b0b8fa051e90",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "Even in the state machine case, I still think the use of a type union is correct because one still needs to figure out what one currently has and what one ends up with at the end of the call (though I suppose one could still possibly infer that without doing type checks by doing current index and collection size checks instead). I agree, though, that that is a good reason to still allow the memo to be augmented to more than just the collection element type, and I appreciate you raising that point. I feel like it would probably still be worth forcing the result type to at least include the collection element type when no memo is provided, though. I think that could probably be managed by updating the overload to include something like `TResult extends TypeOfCollection<V> = TypeOfCollection<V>`, but I'll experiment a bit and see whether that constraint works correctly with union types.",
        "createdAt" : "2020-07-06T01:05:29Z",
        "updatedAt" : "2020-07-07T16:00:46Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "0ed82db8-87f0-4f44-abec-e39dcab14be1",
        "parentId" : "df899a21-b555-4819-bc0e-b0b8fa051e90",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "Hmm, darn, another case that I didn't try that I should have is giving `reduce` and `reduceRight` an empty collection. It looks like these functions return `undefined` in the case of empty collections, so results should probably also be updated to include that.",
        "createdAt" : "2020-07-06T01:17:28Z",
        "updatedAt" : "2020-07-07T16:00:46Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "18b90e20-e7de-426b-811b-3f0fb29ed625",
        "parentId" : "df899a21-b555-4819-bc0e-b0b8fa051e90",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "I think I have a good set of overloads in theory, but I'm still working on getting them to be happy in practice since there's still some oddness going on with constant types not widening and also now a compilation issue that only occurs in TS3.3 and below. Here's what I'm thinking would be ideal to allow for a customizable final result but ensure that either the type of the memo (if one is specified) or the type of the collection (if one is not) is included in the results.\r\n\r\n```TS\r\n        reduce<V extends Collection<any>, TResult = TypeOfCollection<V>>(\r\n            collection: V,\r\n            iteratee: MemoCollectionIterator<TypeOfCollection<V>, TResult | TypeOfCollection<V>, V>,\r\n            memo?: undefined,\r\n            context?: any\r\n        ): TResult | TypeOfCollection<V> | undefined;\r\n        reduce<V extends Collection<any>, TMemo, TResult = TMemo>(\r\n            collection: V,\r\n            iteratee: MemoCollectionIterator<TypeOfCollection<V>, TResult | TMemo, V>,\r\n            memo: TMemo,\r\n            context?: any\r\n        ): TResult | TMemo | undefined;\r\n```",
        "createdAt" : "2020-07-06T03:00:19Z",
        "updatedAt" : "2020-07-07T16:00:46Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "eb528b96-814a-4976-8908-e35c42b60232",
        "parentId" : "df899a21-b555-4819-bc0e-b0b8fa051e90",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "Alright, aside from the widening issue the first signature was working, it was just the second one that was having issues and I was finally able to resolve those in a way that seems satisfactory by dropping `TMemo` in favor of just using `TResult` for `memo` (which should be fine since it will still take any value that is of any one of the types in the result type union). I've added tests that demonstrate union type memo iterators working which includes putting back the test I removed; let me know what you think @jgonggrijp. With regards to the test that I added back, I put in the full expected result type but it's worth noting that it still forces the collection type to be included if the ~collection~ iterator type is omitted as shown below.\r\n\r\n```TS\r\n_.reduce<_.Dictionary<string>, number>({ 'a': '1', 'b': '2', 'c': '3' }, (memo, numstr) => (+memo) + (+numstr)); // $ExpectType string | number | undefined\r\n```",
        "createdAt" : "2020-07-06T07:19:34Z",
        "updatedAt" : "2020-07-07T22:52:06Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d952cf3c9669bd2a1b39f465bc3edc514d545609",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +16,20 @@_.reduce<_.Dictionary<string>, number>({ 'a': '1', 'b': '2', 'c': '3' }, (memo, numstr) => (+memo) + (+numstr)); // $ExpectType string | number | undefined\n_.reduce({ 'a': '1', 'b': '2', 'c': '3' }, (memo: string | number, numstr) => (+memo) + (+numstr)); // $ExpectType string | number | undefined\n_.reduce([1, 2, 3], (memo, num) => memo + num, 0); // $ExpectType number\n_([1, 2, 3]).reduce((memo, num) => memo + num, 0); // $ExpectType number\n_.chain([1, 2, 3]).reduce((memo, num) => memo + num, 0).value(); // $ExpectType number"
  },
  {
    "id" : "03e2a1d8-68d9-4d36-9b56-55bb2f94e369",
    "prId" : 45893,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45893#pullrequestreview-444157500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b22f0a74-9ae9-4198-bb60-32e201c55937",
        "parentId" : null,
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "Yes, this is easier to digest.",
        "createdAt" : "2020-07-07T18:46:48Z",
        "updatedAt" : "2020-07-07T18:47:36Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      }
    ],
    "commit" : "d952cf3c9669bd2a1b39f465bc3edc514d545609",
    "line" : 431,
    "diffHunk" : "@@ -1,1 +1148,1152 @@    _.foldr(stringRecordDictionary, resultUnionPartialMemoIterator, stringMemo); // $ExpectType string | StringRecord\n    _(stringRecordDictionary).foldr(resultUnionPartialMemoIterator, stringMemo); // $ExpectType string | StringRecord\n    extractChainTypes(_.chain(stringRecordDictionary).foldr(resultUnionPartialMemoIterator, stringMemo)); // $ExpectType ChainType<string | StringRecord, string>\n\n    // no memo and union type result - strings - reduceRight"
  },
  {
    "id" : "1eccf2c7-be9a-495e-a6a6-07c6a2e15660",
    "prId" : 45894,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45894#pullrequestreview-442646177",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90ab7a3a-e5e0-40f0-838b-c92e11c3b239",
        "parentId" : null,
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "Surprisingly for some reason using `anyValue` here does not end up changing the perceived type of `anyValue` to `Function`, so I thought it would be interesting to check something that was a more specific function type than `Function`.",
        "createdAt" : "2020-07-05T04:31:13Z",
        "updatedAt" : "2020-07-09T22:59:08Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      }
    ],
    "commit" : "55626249833e5d8c4576a8609d4d6c3d06b81eef",
    "line" : 170,
    "diffHunk" : "@@ -1,1 +1122,1126 @@// isFunction\n{\n    _.isFunction(maybeFunction) ? maybeFunction : neverValue; // $ExpectType () => void\n    _(anyValue).isFunction(); // $ExpectType boolean\n    extractChainTypes(_.chain(anyValue).isFunction()); // $ExpectType ChainType<boolean, never>"
  },
  {
    "id" : "d65c50bf-1d9e-425c-8706-c7a303b84f2f",
    "prId" : 45894,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45894#pullrequestreview-444167768",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e1aa4c8-b768-46a9-a65c-4a6f236c07c2",
        "parentId" : null,
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "Please explain to me how this works. This reminds me a bit of undefined behavior optimizations in C and C++ compilers, which is not a positive association in this context...",
        "createdAt" : "2020-07-05T22:33:41Z",
        "updatedAt" : "2020-07-09T22:59:08Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      },
      {
        "id" : "5bce45e0-5b6d-4a2e-b836-2516dbacd2df",
        "parentId" : "3e1aa4c8-b768-46a9-a65c-4a6f236c07c2",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "The use of `_.isElement` in the check part of the ternary statement modifies the type of `anyValue` on the truthy branch of the statement to `Element`, TS determines the result type by unioning the types of the truthy and falsy branches of the ternary statement to `Element | never`, and the type is simplified to `Element` because [never is a subtype of every type](https://www.typescriptlang.org/docs/handbook/release-notes/overview.html#the-never-type).\r\n\r\nI'd be open to changing this to something else if you'd prefer. This seemed like a not-totally-unreasonable concise way to get the modified truthy type out of these checks, but the `never` magic to deal with the existence of the falsy branch is admittedly kind of hand-wavey.",
        "createdAt" : "2020-07-07T02:25:47Z",
        "updatedAt" : "2020-07-09T22:59:08Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "625bb713-40c4-4979-9459-25e9da842441",
        "parentId" : "3e1aa4c8-b768-46a9-a65c-4a6f236c07c2",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "Well, \"magic\" was probably not the best word to use there since this behavior is at least explicitly called out in the documentation for the release of the `never` type, which says \"Because never is a subtype of every type, it is always omitted from union types.\"",
        "createdAt" : "2020-07-07T04:21:22Z",
        "updatedAt" : "2020-07-09T22:59:08Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "6cfb2f70-3343-4305-adff-baf3fce11b81",
        "parentId" : "3e1aa4c8-b768-46a9-a65c-4a6f236c07c2",
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "Given this explanation, I'm perfectly happy with the approach you've taken. A union with an identity type is fine.\r\n\r\nI was a bit afraid that this was some kind of fuzzy logic thing where the TS compiler goes \"oh, the false branch returns `never`. That cannot be the case so I guess we'll take the other branch\".",
        "createdAt" : "2020-07-07T18:59:42Z",
        "updatedAt" : "2020-07-09T22:59:08Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      }
    ],
    "commit" : "55626249833e5d8c4576a8609d4d6c3d06b81eef",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +1075,1079 @@// isElement\n{\n    _.isElement(anyValue) ? anyValue : neverValue; // $ExpectType Element\n    _(anyValue).isElement(); // $ExpectType boolean\n    extractChainTypes(_.chain(anyValue).isElement()); // $ExpectType ChainType<boolean, never>"
  },
  {
    "id" : "aa294e71-5f92-4b6b-8dce-9930c8cf49bf",
    "prId" : 45994,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/45994#pullrequestreview-446699126",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65460506-1791-4fc8-89d7-d6c8b9fbbecd",
        "parentId" : null,
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "I'm getting used to this way of testing. I'm even starting to like it.\r\n\r\nPerhaps do add a few cases (just a sampling) with an implicit `_.identity` iteratee.",
        "createdAt" : "2020-07-10T09:17:35Z",
        "updatedAt" : "2020-07-10T20:48:15Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      },
      {
        "id" : "5364a74e-c234-4595-b6b6-473323819837",
        "parentId" : "65460506-1791-4fc8-89d7-d6c8b9fbbecd",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "I added the identity iteratee tests and also switched to alternating between testing lists and dictionaries for non-function iteratee tests for find, filter, and reject since I feel like testing both of those in those cases is not super interesting. Let me know if you disagree with that, though.",
        "createdAt" : "2020-07-10T18:54:10Z",
        "updatedAt" : "2020-07-10T20:48:15Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "d61c7a09-2bda-4122-99f1-9e0abeecff2b",
        "parentId" : "65460506-1791-4fc8-89d7-d6c8b9fbbecd",
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "I'm fine with it. I'm a bit surprised that you choose to do sampling after so much combinatorial completeness, though. ;-)",
        "createdAt" : "2020-07-10T20:24:20Z",
        "updatedAt" : "2020-07-10T20:48:15Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      },
      {
        "id" : "d154b302-10dc-4a77-8722-c00478df7cca",
        "parentId" : "65460506-1791-4fc8-89d7-d6c8b9fbbecd",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "Just trying to find ways to stick to the middle ground where we're both somewhat happy üòÑ ",
        "createdAt" : "2020-07-10T21:02:29Z",
        "updatedAt" : "2020-07-10T21:02:29Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      }
    ],
    "commit" : "71bbdd7fc4e25219a16c9985198471882e738c8c",
    "line" : 399,
    "diffHunk" : "@@ -1,1 +1175,1179 @@    _(stringRecordDictionary).reject(); // $ExpectType StringRecord[]\n    extractChainTypes(_.chain(stringRecordDictionary).reject()); // $ExpectType ChainType<StringRecord[], StringRecord>\n}\n\n// pluck"
  },
  {
    "id" : "d2947a5f-3fd1-415b-9315-a3794b826432",
    "prId" : 46035,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46035#pullrequestreview-447543167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af333509-8c68-4245-adeb-404d5c501402",
        "parentId" : null,
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "My company's solution ends up with a new error around `Partial<T>` where we're assigning a `string | number | string[] | undefined` (which will actually always be a `string` in context) to a `properties` property that expects a `string | undefined`, which I was originally thinking was ok but as I think about it more I suppose it's not really important for the types for any property to match up exactly.\r\n\r\nI guess ideally TS would make sure that at least one of the types for each property is the same as the provided type for that property, but I'm not entirely sure how to make that happen. Doing something like `U extends Partial<T>` for the `properties` parameter doesn't seem to work.\r\n\r\nTo preserve property name checking but drop type checking for the type of each property, I could make something like a `PartalAny<T>` that applies `Partial` to `T` but also changes all of the types of all of the properties to `any`. Thoughts?\r\n\r\nAlso, I had thought that only inline declarations were required to include at least one property that is in the expected partial type, but that doesn't appear to be the case, so I should drop the \"inline\" from this comment. However, I still think that a lack of any expected property on a `properties` object is still a good error to surface since calling one of these functions with a `properties` object that can't possibly match anything isn't a useful thing to do.",
        "createdAt" : "2020-07-12T15:26:52Z",
        "updatedAt" : "2020-07-14T06:37:48Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "c6a2ba91-62fd-4af7-a7b5-796a7d1d579b",
        "parentId" : "af333509-8c68-4245-adeb-404d5c501402",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "Too, I guess ideally any solution applied here should not involve an additional generic type argument and an `extends` check since ideally any change here would also be applied to the `Iteratee` type union, and it would be nice to not make that more complicated.",
        "createdAt" : "2020-07-12T15:39:03Z",
        "updatedAt" : "2020-07-14T06:37:48Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "ebb72cff-4ae9-49eb-8df6-8a2b71661e0c",
        "parentId" : "af333509-8c68-4245-adeb-404d5c501402",
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "I can't really comment on the other things you wrote, but I fully agree with this:\r\n\r\n> (...) I still think that a lack of any expected property on a `properties` object is still a good error to surface since calling one of these functions with a `properties` object that can't possibly match anything isn't a useful thing to do.",
        "createdAt" : "2020-07-12T16:12:27Z",
        "updatedAt" : "2020-07-14T06:37:48Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      },
      {
        "id" : "876c5622-e183-401a-8589-eedc849dbd0f",
        "parentId" : "af333509-8c68-4245-adeb-404d5c501402",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "After having given this even more thought, I think my rationale for checking property names actually probably also applies to checking types - if the actual type of the value that ends up being provided as search criteria does not match one of the possible types on the items being searched, then it's not a useful search criteria. Therefore, I think I'll leave this as-is and require that folks either use type guards or assertions to remove types from a type union that might not be useful as search criteria.",
        "createdAt" : "2020-07-13T19:36:20Z",
        "updatedAt" : "2020-07-14T06:37:48Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      }
    ],
    "commit" : "a702ec534210c6c37684ed0923c519dc77e5926a",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +513,517 @@\n// verify that partial objects can be provided without error to where and findWhere for a union type collection\n// where no types in the union share the same property names\ndeclare const nonIntersectinglTypeUnion: _.Dictionary<{ one: string; } | { two: number; }>;\n"
  },
  {
    "id" : "98f11d6d-b14f-41b8-bea1-a948a473b76f",
    "prId" : 46035,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46035#pullrequestreview-447550428",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4973f7f4-6291-49b2-a1ad-44db49ff299a",
        "parentId" : null,
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "Shouldn't this be `ChainType<string | undefined, string | undefined>`?",
        "createdAt" : "2020-07-12T19:54:19Z",
        "updatedAt" : "2020-07-14T06:37:48Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      },
      {
        "id" : "66761faf-cc8d-424a-bd8a-9484ef8dc631",
        "parentId" : "4973f7f4-6291-49b2-a1ad-44db49ff299a",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "I don't believe so, no. The collection item type for a wrapped type of `string | undefined` technically ends up being `string | never` (where `string` is the collection item type for `string` since a string is technically also a list of strings and `never` is the collection item type for `undefined` since `undefined` is not a list or dictionary), but `never` gets removed from all type unions so it ends up just being `string`.",
        "createdAt" : "2020-07-13T19:47:46Z",
        "updatedAt" : "2020-07-14T06:37:48Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      }
    ],
    "commit" : "a702ec534210c6c37684ed0923c519dc77e5926a",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +1355,1359 @@    _.sample(simpleString); // $ExpectType string | undefined\n    _(simpleString).sample(); // $ExpectType string | undefined\n    extractChainTypes(_.chain(simpleString).sample()); // $ExpectType ChainType<string | undefined, string>\n\n    // with n - lists"
  },
  {
    "id" : "62af00b2-57a5-413d-be81-f0f2de3acb28",
    "prId" : 46035,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46035#pullrequestreview-448021011",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3dc9d00-e71f-4ac1-bc2a-39fc8e777617",
        "parentId" : null,
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "Really nice that TS is now able to infer this without any type annotations.",
        "createdAt" : "2020-07-14T11:29:18Z",
        "updatedAt" : "2020-07-14T11:45:41Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a702ec534210c6c37684ed0923c519dc77e5926a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +487,491 @@    .value();\n\n// $ExpectType { valueProperty: string; } | undefined\n_.chain([\n    {"
  },
  {
    "id" : "701857bc-f7a4-48f1-bcac-1d353c250dfc",
    "prId" : 46068,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46068#pullrequestreview-448767006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7b14ddd-c5e6-4944-82ef-537ff9091522",
        "parentId" : null,
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "Any particular reason why you went with strings for the identity iteratee while using records for the other iteratees?",
        "createdAt" : "2020-07-14T12:37:27Z",
        "updatedAt" : "2020-07-15T08:59:49Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      },
      {
        "id" : "ddad88d7-6eea-4a8a-a819-49cd8eb5c384",
        "parentId" : "e7b14ddd-c5e6-4944-82ef-537ff9091522",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "I went with strings for the identity iteratee because records are not necessarily inherently usefully comparable, and I went with records for other iteratees because the elements produced when iterating over a string do not have selectable properties that are usefully comparable (they pretty much just have `length` and that is always 1).\r\n\r\nIt would be nice to constrain this function to only work with collection and iteratee combinations that are usefully comparable, but I don't think that's possible at this time because I don't think TS can differentiate between objects that have the default `toString` implementation and objects that have an overridden one.\r\n\r\nI guess since records could override `toString` I could use records for everything, but I don't know how prevalent overriding `toString` is in the JS community (just that I never do it) or how correct it's considered to be in general, and I'd like to not set a bad example with these tests.\r\n\r\nLet me know if you think it would be better to always compare records and assume a usefully overridden `toString` in identity iteratee tests. Conversely, let me know if overriding `toString` to make an object comparable is considered to be a major antipattern by the JS community in general that it would be useful to discourage by requiring that iteratees for this function always yield comparable primitives. Finally, let me know if I'm missing a way to assert in TS that an object type is (probably) usefully comparable because it overrides `toString` since then I could constrain iteratee results to primitives and usefully comparable objects.",
        "createdAt" : "2020-07-15T08:19:07Z",
        "updatedAt" : "2020-07-15T08:59:49Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "c6fba814-8b33-4902-bbe1-25069aa8b98a",
        "parentId" : "e7b14ddd-c5e6-4944-82ef-537ff9091522",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "Hmm, after reviewing [the MDN article for less than](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than) it looks like possibly the correct thing to do these days to make an object usefully comparable is to add a [Symbol.toPrimitive](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive) implementation to objects rather than overriding `toString` (though doing the latter still technically works). It looks like I could constrain objects against something like the below interface for this if you think that's a good idea.\r\n\r\n```TS\r\ninterface Comparable {\r\n    [Symbol.toPrimitive]: (hint: 'string' | 'number' | 'default') => string | number;\r\n}\r\n```",
        "createdAt" : "2020-07-15T08:38:32Z",
        "updatedAt" : "2020-07-15T08:59:49Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "7b56b73a-9cc1-47f4-aaa4-ae2859fa903e",
        "parentId" : "e7b14ddd-c5e6-4944-82ef-537ff9091522",
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "> I went with strings for the identity iteratee because records are not necessarily inherently usefully comparable, and I went with records for other iteratees because the elements produced when iterating over a string do not have selectable properties that are usefully comparable (they pretty much just have `length` and that is always 1).\r\n\r\nThat makes perfect sense. Funny I didn't think of that.\r\n\r\n> \r\n> It would be nice to constrain this function to only work with collection and iteratee combinations that are usefully comparable,\r\n\r\nOh no, please don't go there. That would open a big can of worms for something that people probably aren't going to do much.\r\n\r\n> but I don't think that's possible at this time because I don't think TS can differentiate between objects that have the default `toString` implementation and objects that have an overridden one.\r\n> \r\n> I guess since records could override `toString` I could use records for everything, but I don't know how prevalent overriding `toString` is in the JS community (just that I never do it) or how correct it's considered to be in general, and I'd like to not set a bad example with these tests.\r\n\r\nThis is a bit of a moot point because I'm not recommending that you try to differentiate, but: I don't know how prevalent it is in the JS community at large, either. However, I think it is perfectly correct to override the method as long as the override actually makes sense. I can also think of some authoritative overrides:\r\n\r\n- Underscore's `_.prototype.toString`\r\n- The JS builtin `Number.prototype.toString`(`1.toString()` returns `'1'` while `Object.prototype.toString.call(1)` returns `[object Number]`) and likewise for `Boolean`, `String`, `Symbol`, `Date` and so on\r\n\r\n> \r\n> Let me know if you think it would be better to always compare records and assume a usefully overridden `toString` in identity iteratee tests.\r\n\r\nNo, I don't think so. Your tests are fine as they are.\r\n\r\n> Conversely, let me know if overriding `toString` to make an object comparable is considered to be a major antipattern by the JS community in general that it would be useful to discourage by requiring that iteratees for this function always yield comparable primitives.\r\n\r\nI've never seen a mention anywhere that this would be an antipattern. If I had seen it, I would have disagreed. I also don't think that a majority opinion is necessarily a reason to do something. For example, there seems to be a majority opinion in the JS community that 2-space indents are deep enough, but that is no reason for me to follow suit.\r\n\r\n> Finally, let me know if I'm missing a way to assert in TS that an object type is (probably) usefully comparable because it overrides `toString` since then I could constrain iteratee results to primitives and usefully comparable objects.\r\n\r\nI don't know of such a way, but again, I wouldn't be in favor of using it if I did.",
        "createdAt" : "2020-07-15T08:58:21Z",
        "updatedAt" : "2020-07-15T08:59:49Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      },
      {
        "id" : "f9432cfe-9bb1-4379-b147-c35643bc7066",
        "parentId" : "e7b14ddd-c5e6-4944-82ef-537ff9091522",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "I'll leave all of this as-is then, thanks!",
        "createdAt" : "2020-07-15T09:06:31Z",
        "updatedAt" : "2020-07-15T09:06:32Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ef7c589e1bbefbc057d10451a5b47995ac205d0",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +1451,1455 @@    _.sortedIndex(simpleStringList, simpleString); // $ExpectType number\n    _(simpleStringList).sortedIndex(simpleString); // $ExpectType number\n    extractChainTypes(_.chain(simpleStringList).sortedIndex(simpleString)); // $ExpectType ChainType<number, never>\n\n    // function iteratee"
  },
  {
    "id" : "d96f3f03-b1b6-478e-9ae5-5f45c2a74e47",
    "prId" : 46120,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46120#pullrequestreview-450677951",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89009f3a-2281-4b82-a319-1252fe6b1143",
        "parentId" : null,
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "Why is this check here and not in the previous tests?",
        "createdAt" : "2020-07-17T09:29:09Z",
        "updatedAt" : "2020-07-17T14:12:07Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      },
      {
        "id" : "e51c880b-ff7b-4606-b848-90b1a71051c7",
        "parentId" : "89009f3a-2281-4b82-a319-1252fe6b1143",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "Unlike with other types for which functions are excluded from matching `Partial<T>` because it ends up with properties that functions don't inherently have, functions match the propertyless `Partial<any>` type, so I need to do this to make `anyFunctionIteratee` not `CollectionIterator<...> | Partial<any>`. This also applies to the `isArray` check later in this file.",
        "createdAt" : "2020-07-17T13:55:22Z",
        "updatedAt" : "2020-07-17T14:58:27Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ef8fe2907257beac41e27c3dc2399a087eddb67",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +707,711 @@        return element.a;\n    };\n    if (_.isFunction(anyFunctionIteratee)) {\n        anyFunctionIteratee(stringRecordDictionary['a'], 'a', stringRecordDictionary); // $ExpectType string\n    }"
  },
  {
    "id" : "0cd15af8-19c4-47d1-94a0-91db3c55e8a0",
    "prId" : 46189,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46189#pullrequestreview-452872476",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb4c21ac-df93-4390-9d29-0d9357ab5e22",
        "parentId" : null,
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "Nice one.",
        "createdAt" : "2020-07-21T18:53:46Z",
        "updatedAt" : "2020-07-22T21:38:06Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      },
      {
        "id" : "746b7f9c-031d-471b-b743-b079cca0b871",
        "parentId" : "cb4c21ac-df93-4390-9d29-0d9357ab5e22",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "Thanks! Also a nice example of how it's nice to be able to continue past a `_ChainSingle` result üòÑ.",
        "createdAt" : "2020-07-21T22:25:19Z",
        "updatedAt" : "2020-07-22T21:38:06Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9900505ff7bb6c93d6751c97ef08d7274ef0097",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +516,520 @@    .sample()\n    .range(10)\n    .value();\n\n// $ExpectType [number[], number[]]"
  },
  {
    "id" : "ccdfc7d3-daff-49dc-b89a-481bc7269338",
    "prId" : 46189,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46189#pullrequestreview-452730528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47c0c254-3748-4446-a4b5-fc60290a163d",
        "parentId" : null,
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "Also nice.",
        "createdAt" : "2020-07-21T18:54:26Z",
        "updatedAt" : "2020-07-22T21:38:06Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9900505ff7bb6c93d6751c97ef08d7274ef0097",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +523,527 @@    .compact()\n    .partition(n => n > 3)\n    .value();\n\n// verify that partial objects can be provided without error to where and findWhere for a union type collection"
  },
  {
    "id" : "dc5b8b3c-eacc-4023-b894-cf2a20e5b9ee",
    "prId" : 46189,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46189#pullrequestreview-452929388",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80dfbeca-907c-4290-bac6-788b6ccbbad0",
        "parentId" : null,
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "Really? Not `Exclude<string | number | true | object | Function | StringRecord | (() => void), '' | 0>`?",
        "createdAt" : "2020-07-21T18:59:08Z",
        "updatedAt" : "2020-07-22T21:38:06Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      },
      {
        "id" : "4bea6232-d4ca-495c-bca8-45d51125ba80",
        "parentId" : "80dfbeca-907c-4290-bac6-788b6ccbbad0",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "I suppose I could make a type name for this to make this not super long, TS seems willing to simplify type names as much as it can wherever it can with types in the same namespace.",
        "createdAt" : "2020-07-21T22:27:30Z",
        "updatedAt" : "2020-07-22T21:38:06Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "e0594a8a-3b44-457d-a8a7-994cdb75209f",
        "parentId" : "80dfbeca-907c-4290-bac6-788b6ccbbad0",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "Oh, ha, this doesn't already do this because `boolean` ends up being changed to `true` üòÜ ",
        "createdAt" : "2020-07-21T23:04:21Z",
        "updatedAt" : "2020-07-22T21:38:06Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "0c17049c-30ce-4909-a3c4-4b2c0a78dc10",
        "parentId" : "80dfbeca-907c-4290-bac6-788b6ccbbad0",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "Hmm, trying this out it doesn't seem to be willing to result in the simplified type and I'm not sure why üòï. It for sure always wants to simplify `StringRecord | undefined` to my custom `StringRecordOrUndefined` type (see e.g. assertions for `find`), which I've actually found to be more annoying than helpful.",
        "createdAt" : "2020-07-21T23:11:56Z",
        "updatedAt" : "2020-07-22T21:38:06Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "62bab552-2f53-4e7e-ba2c-b631de08e41e",
        "parentId" : "80dfbeca-907c-4290-bac6-788b6ccbbad0",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "Oh, but you're referring to `''` and `0` being members of `string` and `number` that TS should track as excluded. Unfortunately I don't think TS can collapse or carry along negatives like that.",
        "createdAt" : "2020-07-21T23:18:34Z",
        "updatedAt" : "2020-07-22T21:38:06Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "9a0c7838-ed42-44da-b268-c8c5cb4b6c0a",
        "parentId" : "80dfbeca-907c-4290-bac6-788b6ccbbad0",
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "So not really set-theoretic types after all. Shame.",
        "createdAt" : "2020-07-22T01:12:18Z",
        "updatedAt" : "2020-07-22T21:38:06Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9900505ff7bb6c93d6751c97ef08d7274ef0097",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +1747,1751 @@{\n    // lists\n    _.compact(truthyFalsyList); // $ExpectType (string | number | true | object | Function | StringRecord | (() => void))[]\n    _(truthyFalsyList).compact(); // $ExpectType (string | number | true | object | Function | StringRecord | (() => void))[]\n    extractChainTypes(_.chain(truthyFalsyList).compact()); // $ExpectType ChainType<(string | number | true | object | Function | StringRecord | (() => void))[], string | number | true | object | Function | StringRecord | (() => void)>"
  },
  {
    "id" : "9adbbce0-a386-4b9c-9c44-738c9af53858",
    "prId" : 46240,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46240#pullrequestreview-455251826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22f808dd-2c26-4d8f-8ebd-bd8014fa8f7c",
        "parentId" : null,
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "It would be nice to implement and confirm that value types like `string` cannot be included in the return type unless the iteratee result includes `number` (or more generally, types that extend `NumberComparable` as I suggested above).",
        "createdAt" : "2020-07-24T10:24:50Z",
        "updatedAt" : "2020-07-25T02:24:19Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      },
      {
        "id" : "7ccb8b00-55b1-45b4-a54c-e0848dbf8299",
        "parentId" : "22f808dd-2c26-4d8f-8ebd-bd8014fa8f7c",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "Per [this comment](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46240#discussion_r460349719) it doesn't seem like that's an accurate restriction to impose in all cases, so I'd rather not do this. To broaden that comment to include iteratees other than identity, the result of `_.max([{ a: '1' }, { a: '2' }, { a: '3' }], 'a')` is `{a: \"3\"}`.",
        "createdAt" : "2020-07-25T01:55:31Z",
        "updatedAt" : "2020-07-25T02:24:20Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee9bd2d6b6bd40ee9d75658cf2e05f7a055b4e8a",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +1807,1811 @@    _(numberDictionary).max(); // $ExpectType number\n    extractChainTypes(_.chain(numberDictionary).max()); // $ExpectType ChainType<number, never>\n}\n\n// min"
  },
  {
    "id" : "80e9333e-948c-4cd2-b51e-97eacca065b3",
    "prId" : 46306,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46306#pullrequestreview-455383231",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f280bd49-8dbd-4c66-8701-a6b80630c9dc",
        "parentId" : null,
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "Maybe also test the type produced for single-argument calls.",
        "createdAt" : "2020-07-26T13:19:54Z",
        "updatedAt" : "2020-07-27T23:22:45Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      },
      {
        "id" : "8bd80401-4bd1-46ef-bc1f-ba71cd6014d3",
        "parentId" : "f280bd49-8dbd-4c66-8701-a6b80630c9dc",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "Yeah, it would probably be nice (especially in the future when the result might be more exciting than `any[][]`) to validate more than one arity of parameters. Added!",
        "createdAt" : "2020-07-26T17:49:45Z",
        "updatedAt" : "2020-07-27T23:22:45Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      }
    ],
    "commit" : "db3c2d5aebf4f55de033a060b7f1b1cdec9ad1f1",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +2229,2233 @@    _.zip(simpleStringList, simpleNumberList, stringRecordList); // $ExpectType any[][]\n    _(simpleStringList).zip(simpleNumberList, stringRecordList); // $ExpectType any[][]\n    extractChainTypes(_.chain(simpleStringList).zip(simpleNumberList, stringRecordList)); // $ExpectType ChainType<any[][], any[]>\n\n    // single arguments"
  },
  {
    "id" : "cf2526fb-085c-4975-b2c4-0f5c83c2d87f",
    "prId" : 46419,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46419#pullrequestreview-457646660",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6907b84-ed2f-4eb8-a062-f7395494489c",
        "parentId" : null,
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "I wasted a little time trying to figure out how I could do something like `union<V extends List<any>>(...lists: V[])` and still have this work before deciding it wasn't worth it. I guess maybe at some point it will be possible to do something where `V` is a tuple, but overall it's still just adding an unnecessary level of abstraction that is at best maybe future-proofing the generics just in case `V` is necessary for some reason.\r\n\r\nOverall I think I made a mistake trying to get all of these to use `<V extends Collection<any>>` for the sake of consistency with those that needed that for `Iteratee`, and I think as part of the generics cleanup I had mentioned wanting to do I'll reverse course on that where it's not necessary unless you object @jgonggrijp.",
        "createdAt" : "2020-07-28T23:51:59Z",
        "updatedAt" : "2020-07-29T16:56:28Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "1b822c43-a93f-409e-a1b2-937f24c89c31",
        "parentId" : "e6907b84-ed2f-4eb8-a062-f7395494489c",
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "I'm fine with it either way.",
        "createdAt" : "2020-07-29T15:45:33Z",
        "updatedAt" : "2020-07-29T16:56:28Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      }
    ],
    "commit" : "543cdae2dd46399cdc70943038fd6fbd88cce111",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +2460,2464 @@\n    // list and array mix\n    _.union(simpleStringList, simpleStringArray, simpleStringList); // $ExpectType string[]\n    _(simpleStringList).union(simpleStringArray, simpleStringList); // $ExpectType string[]\n    extractChainTypes(_.chain(simpleStringList).union(simpleStringArray, simpleStringList)); // $ExpectType ChainType<string[], string>"
  },
  {
    "id" : "25a9aadb-954b-4c6b-b8c0-c1bb1112d428",
    "prId" : 46422,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46422#pullrequestreview-457142537",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f03a1912-7504-4103-898c-60a668d07ad2",
        "parentId" : null,
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "Hopefully soon this will be `[string[], number[]]` üòÑ ",
        "createdAt" : "2020-07-29T01:55:33Z",
        "updatedAt" : "2020-07-31T17:29:27Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b03f4d13078717e6c797e315c34517ad13d86e7",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +513,517 @@    .value();\n\n// $ExpectType any[][]\n_.chain({ one: 1, two: 2 })\n    .pairs()"
  },
  {
    "id" : "f2b1e3f6-360c-4ecf-920f-8b184f4ad8e8",
    "prId" : 46634,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46634#pullrequestreview-464516333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "703d4c32-d5bc-4e87-b2ed-f58e40fe55a2",
        "parentId" : null,
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "I didn't want to do this, but updating `V` in `CollectionIterator` to handle `undefined` as a possible `V` seemed like the best of the fixes that I could come up with and this was a necessary compromise since `any extends undefined` is true. Since folks should ideally be avoiding `any` anyway, I don't feel super bad about this.\r\n\r\nAn alternate solution that I considered was doing something like the below, but I feel like it's not a great solution.\r\n\r\n```TS\r\ninterface CollectionIterator<T extends TypeOfCollection<V, any>, TResult, V = Collection<T>, TOptionalCollection extends never | undefined = never> {\r\n    (element: T, key: CollectionKey<V> | TOptionalCollection, collection: V | TOptionalCollection): TResult;\r\n}\r\n```",
        "createdAt" : "2020-08-09T02:40:29Z",
        "updatedAt" : "2020-08-09T18:08:28Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "4947f10b-f22a-4e9e-82fc-8355cfde4e5e",
        "parentId" : "703d4c32-d5bc-4e87-b2ed-f58e40fe55a2",
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "I agree `never | undefined` doesn't look great.",
        "createdAt" : "2020-08-10T19:34:18Z",
        "updatedAt" : "2020-08-10T19:44:18Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      }
    ],
    "commit" : "3be612c0e680cbb07e35b022fd292db45507f54f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +823,827 @@    const anyFunctionIteratee: _.Iteratee<any, string> = (element, key, collection) => {\n        element; // $ExpectType any\n        key; // $ExpectType any\n        collection; // $ExpectType any\n        return element.a;"
  },
  {
    "id" : "51f8f559-2958-4cbc-805c-bca6eab6e53d",
    "prId" : 46634,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46634#pullrequestreview-465410548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebfaf193-a322-48ba-b417-3c2c33677ef1",
        "parentId" : null,
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "Hold on, I don't think \"shallow property\"/\"deep property\" is any more representative of the Underscore documentation than \"property name\"/\"property path\". The term \"path\" does appear in the documentation, as does \"key\" and all the other terms here.\r\n\r\nNot that I object to these terms per se, but it just seems a bit arbitrary.",
        "createdAt" : "2020-08-10T19:40:34Z",
        "updatedAt" : "2020-08-10T19:44:18Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      },
      {
        "id" : "45c42f8e-aa7c-4626-a1b4-275e4fd8989c",
        "parentId" : "ebfaf193-a322-48ba-b417-3c2c33677ef1",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "I'm fine with putting in whatever you'd prefer here. Would it be better to use \"property key\" and \"property path\"?",
        "createdAt" : "2020-08-10T20:07:56Z",
        "updatedAt" : "2020-08-10T20:07:56Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "a29202a5-dc19-4a3b-a955-55436b61b848",
        "parentId" : "ebfaf193-a322-48ba-b417-3c2c33677ef1",
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "I like those suggestions. I don't think my preference matters much, though. These are your tests so you can name them however you please (within reasonable limits, but all of these options are reasonable). I'm just a bit confused about the rationale for the change, that's all.",
        "createdAt" : "2020-08-10T22:03:26Z",
        "updatedAt" : "2020-08-10T22:03:26Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      },
      {
        "id" : "a54b44af-3b5d-4ef4-ab61-921c44341bf6",
        "parentId" : "ebfaf193-a322-48ba-b417-3c2c33677ef1",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "The comment I wanted to change most here was \"partial object\" since \"matcher\" more accurately describes what the partial object is for.\r\n\r\nI got the idea for shallow vs. deep from the last line of the below documentation (\"deep property fetching\") and thought it might be better than `path` because while that is the parameter name for `_.property` it takes both forms of path.\r\n![image](https://user-images.githubusercontent.com/8692126/89934597-aca8b800-dbc5-11ea-80b0-80caf5172733.png)\r\n",
        "createdAt" : "2020-08-11T18:30:20Z",
        "updatedAt" : "2020-08-11T18:30:36Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "ca80aa20-d203-42b5-8946-90155c65bcd8",
        "parentId" : "ebfaf193-a322-48ba-b417-3c2c33677ef1",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "Just FYI @jgonggrijp it looks like DT is probably set up so that any comment from you retracts your approval, so if you're ok with the rationale above I'd be super grateful if you would please also hit approve again in addition to (and ideally after) making any further replies here üòÑ ",
        "createdAt" : "2020-08-11T18:40:11Z",
        "updatedAt" : "2020-08-11T18:40:12Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "3b137804-4401-4332-afeb-915512e91785",
        "parentId" : "ebfaf193-a322-48ba-b417-3c2c33677ef1",
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "Gosh that's restrictive. I'll make sure to hit \"approve\" again from now on.",
        "createdAt" : "2020-08-11T19:57:58Z",
        "updatedAt" : "2020-08-11T19:57:58Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      },
      {
        "id" : "4ddf3d07-d209-4af5-a1b7-560dc50aaa26",
        "parentId" : "ebfaf193-a322-48ba-b417-3c2c33677ef1",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "No worries, just wanted to let you know in advance that that was necessary so you'd only have to make one more trip back here if you were ok with the latest comments üòÑ \r\n\r\nThanks for hitting the go button!",
        "createdAt" : "2020-08-11T20:37:43Z",
        "updatedAt" : "2020-08-11T20:37:43Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      }
    ],
    "commit" : "3be612c0e680cbb07e35b022fd292db45507f54f",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +1077,1081 @@    extractChainTypes(_.chain(anyValue).collect(stringRecordProperty)); // $ExpectType ChainType<any[], any>\n\n    // deep property iteratee - lists - map\n    _.map(stringRecordList, stringRecordPropertyPath); // $ExpectType any[]\n    _(stringRecordList).map(stringRecordPropertyPath); // $ExpectType any[]"
  },
  {
    "id" : "d5153302-94c7-4433-93cf-4d7b8edbd6f0",
    "prId" : 46634,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46634#pullrequestreview-464516333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1abc4f2-543a-4179-9e29-838c47046093",
        "parentId" : null,
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "If I didn't know you're still going to do a name shortening PR, I'd make this a change request.",
        "createdAt" : "2020-08-10T19:42:56Z",
        "updatedAt" : "2020-08-10T19:44:18Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      }
    ],
    "commit" : "3be612c0e680cbb07e35b022fd292db45507f54f",
    "line" : 682,
    "diffHunk" : "@@ -1,1 +2831,2835 @@    _(stringRecordList).sortedIndex(stringRecordList[0], stringRecordOptionalListValueIterator, context); // $ExpectType number\n    extractChainTypes(_.chain(stringRecordList).sortedIndex(stringRecordList[0], stringRecordOptionalListValueIterator)); // $ExpectType ChainType<number, never>\n    extractChainTypes(_.chain(stringRecordList).sortedIndex(stringRecordList[0], stringRecordOptionalListValueIterator, context)); // $ExpectType ChainType<number, never>\n\n    // matcher iteratee"
  },
  {
    "id" : "255a0949-bb87-4588-a6b8-18f0f50cc45d",
    "prId" : 46635,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46635#pullrequestreview-463881631",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e06e218-003e-45bd-9d49-4e35a5ab96f1",
        "parentId" : null,
        "authorId" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "body" : "Is there actually a difference between `Partial<any>` and `any`? Just curious.",
        "createdAt" : "2020-08-09T11:56:24Z",
        "updatedAt" : "2020-08-09T16:29:37Z",
        "lastEditedBy" : "d6dbc01c-d9ed-403c-aba1-4b9e918920b4",
        "tags" : [
        ]
      },
      {
        "id" : "1b7e7eee-adf5-4ac0-b744-beac6c223658",
        "parentId" : "4e06e218-003e-45bd-9d49-4e35a5ab96f1",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "There is a slight difference; as mentioned [here](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46422#issuecomment-666774904), `Partial<any>` knows for sure that it's an `object`.\r\n\r\n```TS\r\ndeclare const partialAny: Partial<any>;\r\ndeclare const iTakeAnObject: (arg: object) => void;\r\ndeclare const iTakeAFunction: (arg: Function) => void;\r\ndeclare const iTakeAString: (arg: string) => void;\r\n\r\niTakeAnObject(partialAny); // ok\r\niTakeAFunction(partialAny); // error: Argument of type `Partial<any>` is not assignable to parameter of type `Function`\r\niTakeAString(partialAny); // error: Argument of type `Partial<any>` is not assignable to parameter of type `string`\r\nconsole.log(partialAny.foo); // ok\r\n```",
        "createdAt" : "2020-08-09T15:08:41Z",
        "updatedAt" : "2020-08-09T16:29:37Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      }
    ],
    "commit" : "e04678498a98eb2d4eb00e56adc703449d5036e3",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +3042,3046 @@\n    // function - any\n    _.pick(anyValue, anyBooleanIterator); // $ExpectType Partial<any>\n    _(anyValue).pick(anyBooleanIterator); // $ExpectType Partial<any>\n    extractChainTypes(_.chain(anyValue).pick(anyBooleanIterator)); // $ExpectType ChainType<Partial<any>, any>"
  },
  {
    "id" : "a9dd4c0b-5797-4204-8edc-0ed81bdf5c3e",
    "prId" : 46799,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/46799#pullrequestreview-468940148",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b15f8625-71dc-4545-aa9f-a7e876cfdcf4",
        "parentId" : null,
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "As a point of interest, as part of doing this I found that there was an issue similar to #46650 in the `Iteratee` and `IterateeResult` types that I plan to fix in a quick PR after this merges.",
        "createdAt" : "2020-08-15T03:12:15Z",
        "updatedAt" : "2020-08-15T03:12:15Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      },
      {
        "id" : "c2a8e7da-43f9-4fb3-b38f-343d70413a1a",
        "parentId" : "b15f8625-71dc-4545-aa9f-a7e876cfdcf4",
        "authorId" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "body" : "I ended up having to give up on this for the moment due to errors that occur in TS3.0 but not TS3.1, so this will probably have to be included in future TS minimum version upgrade work.\r\n\r\nAs another point of interest here, I found that the `isArray` function doesn't work well with type unions that contain a readonly array or tuple, and super sadly I also could not find a solution there that would work with both a readonly array and an `any`.",
        "createdAt" : "2020-08-18T01:57:16Z",
        "updatedAt" : "2020-08-18T01:57:17Z",
        "lastEditedBy" : "96815620-060a-4548-941b-0e1ee9e23ed1",
        "tags" : [
        ]
      }
    ],
    "commit" : "5baece9b1cea7decbeb8637f800d2a68135f47c9",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +26,30 @@\ndeclare const shallowProperty: 'a';\ndeclare const deepProperty: ['a', 'length'];\ndeclare const matcher: Partial<StringRecord>;\ndeclare const recordTester: (value: StringRecord) => boolean;"
  }
]