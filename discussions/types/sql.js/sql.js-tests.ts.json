[
  {
    "id" : "f62c1088-2d3c-4950-839f-27647274185d",
    "prId" : 35713,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/35713#pullrequestreview-243133915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "875fbdb5-ba6e-461c-bbd3-0fffb5e699a0",
        "parentId" : null,
        "authorId" : "c7ac9491-a830-4626-8b4d-d3dfedc625ab",
        "body" : "Tests are for Node context by default and there isn't a `initSqlJs()` function in the global scope. See the comment on line 3 for one way (well, not the only way) of resolving this.",
        "createdAt" : "2019-05-27T21:09:49Z",
        "updatedAt" : "2019-05-29T08:19:20Z",
        "lastEditedBy" : "c7ac9491-a830-4626-8b4d-d3dfedc625ab",
        "tags" : [
        ]
      },
      {
        "id" : "e3718095-35ec-45c4-a5a3-9502cfdcda24",
        "parentId" : "875fbdb5-ba6e-461c-bbd3-0fffb5e699a0",
        "authorId" : "c7ac9491-a830-4626-8b4d-d3dfedc625ab",
        "body" : "This should be the final piece. After the change it's good to go.",
        "createdAt" : "2019-05-27T21:11:40Z",
        "updatedAt" : "2019-05-29T08:19:20Z",
        "lastEditedBy" : "c7ac9491-a830-4626-8b4d-d3dfedc625ab",
        "tags" : [
        ]
      },
      {
        "id" : "fea8e6f2-60e0-4b6d-a1c4-cb64e55a9d56",
        "parentId" : "875fbdb5-ba6e-461c-bbd3-0fffb5e699a0",
        "authorId" : "621d4fa1-c239-4b89-b863-cad5f4f809f2",
        "body" : "Sorry, I don't quite understand. I already imported `initSqlJs` in line 3, as suggested by you.",
        "createdAt" : "2019-05-29T08:50:41Z",
        "updatedAt" : "2019-05-29T08:50:41Z",
        "lastEditedBy" : "621d4fa1-c239-4b89-b863-cad5f4f809f2",
        "tags" : [
        ]
      },
      {
        "id" : "799928e8-26e9-49b6-b346-1ea891cd00c9",
        "parentId" : "875fbdb5-ba6e-461c-bbd3-0fffb5e699a0",
        "authorId" : "c7ac9491-a830-4626-8b4d-d3dfedc625ab",
        "body" : "It's only a comment. What I meant was:\r\n1. If `initSqlJs` is not imported, here this identifier has the semantic of accessing a global object. It is injected to the global scope only when it is *not* loaded as a module (e.g. using `<script>`). So compilation passes, but it will throw a runtime error when you compile the test code and run in a Node environment (which is quite popular for tests).\r\n2. If the symbol is correctly imported, for example, being fixed as suggested, then there's nothing to worry about. ← Now we are here",
        "createdAt" : "2019-05-29T09:09:58Z",
        "updatedAt" : "2019-05-29T09:09:59Z",
        "lastEditedBy" : "c7ac9491-a830-4626-8b4d-d3dfedc625ab",
        "tags" : [
        ]
      },
      {
        "id" : "5fa66a6e-1377-4930-a1a0-bfcb46692ed2",
        "parentId" : "875fbdb5-ba6e-461c-bbd3-0fffb5e699a0",
        "authorId" : "621d4fa1-c239-4b89-b863-cad5f4f809f2",
        "body" : "Alright, thanks! :slightly_smiling_face: ",
        "createdAt" : "2019-05-29T09:15:52Z",
        "updatedAt" : "2019-05-29T09:15:52Z",
        "lastEditedBy" : "621d4fa1-c239-4b89-b863-cad5f4f809f2",
        "tags" : [
        ]
      }
    ],
    "commit" : "70fb9e8a04b26be482d08754f2472682110fd80d",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +7,11 @@const DB_PATH = 'data.db';\n\ninitSqlJs().then(SQL => {\n    function createFile(path: string): void {\n        const fd = fs.openSync(path, 'a');"
  }
]