[
  {
    "id" : "8dfe5cd4-4810-4974-b082-8629785a3613",
    "prId" : 16809,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/16809#pullrequestreview-41839062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "315001fa-c746-4037-85f5-4674a5f00ff5",
        "parentId" : null,
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "`extends Object` should be unnecessary -- almost everything extends `Object`.",
        "createdAt" : "2017-06-02T15:56:40Z",
        "updatedAt" : "2017-06-02T15:56:41Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "f970d85d-f63d-4f24-9ab7-882925445af4",
        "parentId" : "315001fa-c746-4037-85f5-4674a5f00ff5",
        "authorId" : "fc1fd66a-6f05-4ea3-b2c1-ec4028438d20",
        "body" : "This `Object` refers to a `Parse.Object` (at least it should)",
        "createdAt" : "2017-06-02T17:08:23Z",
        "updatedAt" : "2017-06-02T17:08:23Z",
        "lastEditedBy" : "fc1fd66a-6f05-4ea3-b2c1-ec4028438d20",
        "tags" : [
        ]
      },
      {
        "id" : "93edc3f8-e7cb-4787-85cd-557d4925c660",
        "parentId" : "315001fa-c746-4037-85f5-4674a5f00ff5",
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "OK then. :+1: ",
        "createdAt" : "2017-06-02T17:40:11Z",
        "updatedAt" : "2017-06-02T17:40:11Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      }
    ],
    "commit" : "4016d2bf93d04fdb25848ceb9900d7bf81f2f3bc",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +269,273 @@     * Each instance of Parse.Relation is associated with a particular parent object and key.\n     */\n    class Relation<S extends Object = Object, T extends Object = Object> extends BaseObject {\n\n        parent: S;"
  },
  {
    "id" : "2e54c301-a230-4d83-b0bf-72492e2e2e00",
    "prId" : 23669,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/23669#pullrequestreview-97099199",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dba64c54-2941-4918-a1d5-f3730f68cc04",
        "parentId" : null,
        "authorId" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "body" : "Does this enum actually exist at runtime? Can you provide a link to documentation for the change?",
        "createdAt" : "2018-02-16T07:40:59Z",
        "updatedAt" : "2018-02-16T07:41:21Z",
        "lastEditedBy" : "9ff3a857-4ac9-4a7e-b447-d0a2f6573899",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4bfeb358d467258eb75bb0d36a98eb51dfb1fe0",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +920,924 @@        // Read preference describes how MongoDB driver route read operations to the members of a replica set.\n        enum ReadPreferenceOption {\n            Primary = 'PRIMARY',\n            PrimaryPreferred = 'PRIMARY_PREFERRED',\n            Secondary = 'SECONDARY',"
  },
  {
    "id" : "211e056c-c1c2-4bfd-9403-5f821ff7b5db",
    "prId" : 33981,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33981#pullrequestreview-216532871",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e65a6ef9-9707-4b1d-bd38-1c356244ccdf",
        "parentId" : null,
        "authorId" : "41a1b6a5-6fea-48e5-bb2a-c59d26061255",
        "body" : "`Object.SaveAllOptions` should be redefined [here](https://github.com/dplewis/DefinitelyTyped/blob/parse-2.2.1/types/parse/index.d.ts#L344) to something like\r\n```\r\n        interface SaveAllOptions extends BatchSizeOption, ScopeOptions { }\r\n```\r\n\r\nwhile \r\n```\r\n    interface BatchSizeOption {\r\n        batchSize?: number;\r\n    }\r\n```\r\n",
        "createdAt" : "2019-03-20T05:38:01Z",
        "updatedAt" : "2019-03-20T16:38:39Z",
        "lastEditedBy" : "41a1b6a5-6fea-48e5-bb2a-c59d26061255",
        "tags" : [
        ]
      }
    ],
    "commit" : "fab55e0af1f9ccfb00dbc26281e87bfb60ad8e77",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +299,303 @@        static pinAllWithName(name: string, objects: Object[]): Promise<void>;\n        static registerSubclass<T extends Object>(className: string, clazz: new (options?: any) => T): void;\n        static saveAll<T extends Object>(list: T[], options?: Object.SaveAllOptions): Promise<T[]>;\n        static unPinAll(objects: Object[]): Promise<void>;\n        static unPinAllObjects(): Promise<void>;"
  },
  {
    "id" : "6ff7e558-c5db-45a2-9450-441ab1858515",
    "prId" : 33981,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/33981#pullrequestreview-216532871",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2cd1feb-cd45-41d2-81b7-d42d87828f45",
        "parentId" : null,
        "authorId" : "41a1b6a5-6fea-48e5-bb2a-c59d26061255",
        "body" : "```suggestion\r\n        containsAllStartingWith(key: string, values: string[]): Query<T>;\r\n```",
        "createdAt" : "2019-03-20T06:05:44Z",
        "updatedAt" : "2019-03-20T16:38:39Z",
        "lastEditedBy" : "41a1b6a5-6fea-48e5-bb2a-c59d26061255",
        "tags" : [
        ]
      }
    ],
    "commit" : "fab55e0af1f9ccfb00dbc26281e87bfb60ad8e77",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +476,480 @@        contains(key: string, substring: string): Query<T>;\n        containsAll(key: string, values: any[]): Query<T>;\n        containsAllStartingWith(key: string, values: any[]): Query<T>;\n        count(options?: Query.CountOptions): Promise<number>;\n        descending(key: string): Query<T>;"
  },
  {
    "id" : "0c2ed7f9-bb95-486b-b8c7-343586559ab9",
    "prId" : 38472,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/38472#pullrequestreview-294410856",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae9d4c6d-c258-41eb-a901-d8eca754d5dd",
        "parentId" : null,
        "authorId" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "body" : "If you want to be able to import these from a consuming file, they need to be within the `Parse` namespace.",
        "createdAt" : "2019-09-27T00:02:21Z",
        "updatedAt" : "2019-09-27T00:02:25Z",
        "lastEditedBy" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "tags" : [
        ]
      },
      {
        "id" : "6c99d1ca-22de-4e3c-952f-706cdda3085f",
        "parentId" : "ae9d4c6d-c258-41eb-a901-d8eca754d5dd",
        "authorId" : "2e6a6019-cc77-4580-9864-baa6ab4fd56e",
        "body" : "@uniqueiniquity they are exported as static variables on the `Parse.Error` class in the changes below, [starting at line 968](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/38472/files#diff-aec51b2d87715b12fe03e0f09983ea8fR968). I followed the advice from the previous abandoned PR in [this comment](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/31248#pullrequestreview-183468400). The reasoning behind not declaring the enum inside the class is that the entity `Parse.ErrorCode` doesn't exist on Parse object.\r\n\r\nThe import appears to work when I test this file in my local `node_modules` folder. Is there something more that I'm not understanding? Thanks for your help!",
        "createdAt" : "2019-09-27T00:14:35Z",
        "updatedAt" : "2019-09-27T00:14:35Z",
        "lastEditedBy" : "2e6a6019-cc77-4580-9864-baa6ab4fd56e",
        "tags" : [
        ]
      },
      {
        "id" : "00ce573f-aa6e-4505-b028-cf517ad499d3",
        "parentId" : "ae9d4c6d-c258-41eb-a901-d8eca754d5dd",
        "authorId" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "body" : "Makes sense to me, I just wanted to check. Thanks for the explanation!",
        "createdAt" : "2019-09-27T15:44:05Z",
        "updatedAt" : "2019-09-27T15:44:05Z",
        "lastEditedBy" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "357ec8ff8264a9dea83716a5a699722609631c7e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +21,25 @@\ndeclare enum ErrorCode {\n    OTHER_CAUSE = -1,\n    INTERNAL_SERVER_ERROR = 1,\n    CONNECTION_FAILED = 100,"
  },
  {
    "id" : "24a3b438-96ed-4619-9c79-0f93236ff362",
    "prId" : 38878,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/38878#pullrequestreview-331334269",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc17b365-68af-4cd5-8924-cddcc53e09c8",
        "parentId" : null,
        "authorId" : "45d9c670-2241-42ab-8e9e-9388e528c740",
        "body" : "Hmm, this breaks when using Parse on the server side (`import Parse = require('parse/node')`) since Node.js doesn't have a `Blob` defined globally (it's a browser global).\r\n\r\nNot sure how to best fix this though, any ideas @RaschidJFR @rbuckton? 🤔 ",
        "createdAt" : "2019-12-12T14:22:55Z",
        "updatedAt" : "2019-12-12T14:22:55Z",
        "lastEditedBy" : "45d9c670-2241-42ab-8e9e-9388e528c740",
        "tags" : [
        ]
      },
      {
        "id" : "d2b99caf-f7fe-424c-adff-d024db309297",
        "parentId" : "bc17b365-68af-4cd5-8924-cddcc53e09c8",
        "authorId" : "ee19fb71-c9ed-4f01-945f-2da7147a1a01",
        "body" : "Thanks for pointing that out. I've changed it in #40990\r\nThat should do. What do you think @LinusU ?",
        "createdAt" : "2019-12-12T15:55:55Z",
        "updatedAt" : "2019-12-12T15:55:56Z",
        "lastEditedBy" : "ee19fb71-c9ed-4f01-945f-2da7147a1a01",
        "tags" : [
        ]
      }
    ],
    "commit" : "2626321c27e103f916a937ded1f25ac4013fc6c5",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +255,259 @@     */\n    class File {\n        constructor(name: string, data: number[] | { base64: string } | Blob | { uri: string }, type?: string);\n        /**\n         * Return the data for the file, downloading it if not already present."
  },
  {
    "id" : "57e4422e-e7ad-4145-9dde-1e9682840c73",
    "prId" : 40429,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/40429#pullrequestreview-317949300",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8560017-880b-4ac6-87e6-9dc2688ad7d9",
        "parentId" : null,
        "authorId" : "ae1cf0f9-564e-40ad-9cdf-73f717fd1d58",
        "body" : "Since your change fixes the lint error, could you remove the \"dt-header\" rule from the lint file? If you want to you can remove the others too and see what breaks - ideally all of them should be removed.",
        "createdAt" : "2019-11-16T00:50:45Z",
        "updatedAt" : "2019-11-16T03:04:49Z",
        "lastEditedBy" : "ae1cf0f9-564e-40ad-9cdf-73f717fd1d58",
        "tags" : [
        ]
      },
      {
        "id" : "d658de97-7b39-457b-96ce-bd828592b4e0",
        "parentId" : "f8560017-880b-4ac6-87e6-9dc2688ad7d9",
        "authorId" : "4f81f9e0-d18a-4517-9da4-103574c63adf",
        "body" : "Removed the `dt-header` rule 👍 \r\nRemoving the others still results in many errors, but we're thinking of doing another PR soon where we could do a sweep of those.",
        "createdAt" : "2019-11-16T03:06:32Z",
        "updatedAt" : "2019-11-16T03:06:32Z",
        "lastEditedBy" : "4f81f9e0-d18a-4517-9da4-103574c63adf",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e6a22a3806b691285c1c7c3037ed1a01fa428ff",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +-1,3 @@// Type definitions for parse 2.9\n// Project: https://parseplatform.org/\n// Definitions by:  Ullisen Media Group <https://github.com/ullisenmedia>"
  },
  {
    "id" : "0ad11c0d-030b-4314-9b3d-0240e8849ec2",
    "prId" : 41587,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/41587#pullrequestreview-344958658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea23a342-0c69-47f1-8a7c-f669669245fb",
        "parentId" : null,
        "authorId" : "45d9c670-2241-42ab-8e9e-9388e528c740",
        "body" : "Would you mind explaining why you chose `<T extends User>(...): Promise<T>` over\r\n`<T extends Attributes>(...): Promise<User<T>>`? Not saying that it's wrong, just curious...",
        "createdAt" : "2020-01-14T17:06:54Z",
        "updatedAt" : "2020-01-14T20:53:27Z",
        "lastEditedBy" : "45d9c670-2241-42ab-8e9e-9388e528c740",
        "tags" : [
        ]
      },
      {
        "id" : "a03b7990-d528-4228-a49b-274895e33288",
        "parentId" : "ea23a342-0c69-47f1-8a7c-f669669245fb",
        "authorId" : "4f81f9e0-d18a-4517-9da4-103574c63adf",
        "body" : "Yep, I actually initially typed it as `<T extends Attributes>` but I changed it so that users would be able to pass a type that extended User but was not User itself. In other words, if someone made a custom User class that extended Parse.User, then I wanted them to be able to have these methods return their custom class instead of the parent Parse.User class.\r\n\r\nOpen to suggestions, though, if you have any thoughts on that.",
        "createdAt" : "2020-01-14T17:19:37Z",
        "updatedAt" : "2020-01-14T20:53:27Z",
        "lastEditedBy" : "4f81f9e0-d18a-4517-9da4-103574c63adf",
        "tags" : [
        ]
      },
      {
        "id" : "9195b03e-42cd-4b09-bf62-d8eabea6f28e",
        "parentId" : "ea23a342-0c69-47f1-8a7c-f669669245fb",
        "authorId" : "45d9c670-2241-42ab-8e9e-9388e528c740",
        "body" : "Ah, of course, I think that sounds very good 👍 ",
        "createdAt" : "2020-01-14T17:49:26Z",
        "updatedAt" : "2020-01-14T20:53:27Z",
        "lastEditedBy" : "45d9c670-2241-42ab-8e9e-9388e528c740",
        "tags" : [
        ]
      },
      {
        "id" : "a2e5c376-07b1-4c2b-afe9-76a49951f230",
        "parentId" : "ea23a342-0c69-47f1-8a7c-f669669245fb",
        "authorId" : "ee19fb71-c9ed-4f01-945f-2da7147a1a01",
        "body" : "Hey this works great! Actually this has been always bugging me since forever. Tnx @rdhelms ",
        "createdAt" : "2020-01-18T19:26:55Z",
        "updatedAt" : "2020-01-18T19:26:55Z",
        "lastEditedBy" : "ee19fb71-c9ed-4f01-945f-2da7147a1a01",
        "tags" : [
        ]
      }
    ],
    "commit" : "1449d3e89d3057dc04f113af7a3f0cebd2ac2ef0",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +856,860 @@\n        allowCustomUserClass(isAllowed: boolean): void;\n        become<T extends User>(sessionToken: string, options?: UseMasterKeyOption): Promise<T>;\n        current<T extends User>(): T | undefined;\n        currentAsync<T extends User>(): Promise<T | null>;"
  },
  {
    "id" : "58494e91-f6b5-4111-be91-39edcc516847",
    "prId" : 41695,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/41695#pullrequestreview-345876684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef94bb6a-e3f2-47e2-8b7f-25f06fc9321b",
        "parentId" : null,
        "authorId" : "ee19fb71-c9ed-4f01-945f-2da7147a1a01",
        "body" : "Hey @rdhelms I just bumped into this when updated a project. Just curious: why `T extends () => any` instead of just `T = any`?. If it's not sensitive I can add another overload in my next push, just to make a bit shorter the syntax.",
        "createdAt" : "2020-01-18T19:57:38Z",
        "updatedAt" : "2020-01-18T19:57:39Z",
        "lastEditedBy" : "ee19fb71-c9ed-4f01-945f-2da7147a1a01",
        "tags" : [
        ]
      },
      {
        "id" : "14c428f4-2793-442a-bbfa-a7ee7819e0cf",
        "parentId" : "ef94bb6a-e3f2-47e2-8b7f-25f06fc9321b",
        "authorId" : "ee19fb71-c9ed-4f01-945f-2da7147a1a01",
        "body" : "Oh I think the reason is in `parse-tests.ts:578`: \r\n\r\n```\r\nParse.Cloud.define<(params: { something: string }) => number>('AFunc', (request) => {\r\n```\r\n",
        "createdAt" : "2020-01-18T20:16:44Z",
        "updatedAt" : "2020-01-18T20:16:44Z",
        "lastEditedBy" : "ee19fb71-c9ed-4f01-945f-2da7147a1a01",
        "tags" : [
        ]
      },
      {
        "id" : "e3ad1855-5d23-4586-95b0-d3f5de3a7c11",
        "parentId" : "ef94bb6a-e3f2-47e2-8b7f-25f06fc9321b",
        "authorId" : "4f81f9e0-d18a-4517-9da4-103574c63adf",
        "body" : "Yep the goal here was to have `define`'s type parameter be an actual function type (not just `any`) with the same structure as `Parse.Cloud.run`'s type parameter. We wanted to be able to define the type of `request.params` and the expected return type with one type parameter.\r\n\r\nOur idea was to be able to create a \"contract\" of sorts between the client and the server with these function types. We have a npm package where we write our function types, and then we import and pass those types into `Parse.Cloud.run` on the client and into `Parse.Cloud.define` on the server. If the function type changes, it will point us to the necessary changes on both client and server.\r\n\r\n",
        "createdAt" : "2020-01-21T13:31:47Z",
        "updatedAt" : "2020-01-21T13:31:48Z",
        "lastEditedBy" : "4f81f9e0-d18a-4517-9da4-103574c63adf",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5ff1f6f8fac1c892b965001cb1d0656ea0ee73d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1108,1112 @@        function beforeLogin(func?: (request: TriggerRequest) => any): void;\n        function define(name: string, func: (request: FunctionRequest) => any): void;\n        function define<T extends () => any>(\n            name: string,\n            func: (request: FunctionRequest<{}>) => Promise<ReturnType<T>> | ReturnType<T>"
  }
]