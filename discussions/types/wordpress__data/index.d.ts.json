[
  {
    "id" : "1d4b3407-846b-4837-a42a-ce31e6e0eaac",
    "prId" : 35907,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/35907#pullrequestreview-247115578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c2d0eca-c970-4457-9051-37149fc7cb9f",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "The reason the type parameter is being flagged as unnecessary is that there are no circumstances in which it will be inferred - it will always need to be specified (or allowed to default to `unknown`).  Since the type system has no role in determining the type, it is regarded as more \"honest\" to put an explicit type assertion at the call site.",
        "createdAt" : "2019-06-05T23:45:32Z",
        "updatedAt" : "2019-06-07T13:56:50Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "79f9c340-0be7-49d6-8ae7-54dd877a5d92",
        "parentId" : "0c2d0eca-c970-4457-9051-37149fc7cb9f",
        "authorId" : "88b8e7ff-7bfb-405d-a8d3-99e3e782d71f",
        "body" : "Yep, that's preferred... Because the return value of `dispatch()` will return a map of dispatcher functions that can literally return anything, depending on the namespace provided to the `dispatch` function, and it can be extended indefinitely by users. So there's no way to know ahead of time of the return value of these and I think it would be safer to default it to `unknown` if not explicitly marked.\r\n\r\nI'd have it return `unknown` always, but then you can't do this...\r\n\r\n```ts\r\nvar something: boolean = dispatch('foo').isSomething();\r\n```\r\n\r\nbecause type `boolean` is not compatible with type `unknown`. \r\n\r\nThe only way around that would be to do an `as` cast, but that's less ideal and more sloppy (IMHO).\r\n\r\nAnother alternative would be to return `any`, but that's the sloppiest way of all.",
        "createdAt" : "2019-06-06T01:27:56Z",
        "updatedAt" : "2019-06-07T13:56:50Z",
        "lastEditedBy" : "88b8e7ff-7bfb-405d-a8d3-99e3e782d71f",
        "tags" : [
        ]
      },
      {
        "id" : "6025f078-1225-404a-8aa0-61490d2d4851",
        "parentId" : "0c2d0eca-c970-4457-9051-37149fc7cb9f",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "You're aware of the reasoning for the rule and you've made an informed decision not to apply it - that's good enough for me.  Get the build passing and I'll merge it.",
        "createdAt" : "2019-06-07T02:45:29Z",
        "updatedAt" : "2019-06-07T13:56:50Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "cbee8111-d4a5-4eae-8a44-9eb2ad802b01",
        "parentId" : "0c2d0eca-c970-4457-9051-37149fc7cb9f",
        "authorId" : "88b8e7ff-7bfb-405d-a8d3-99e3e782d71f",
        "body" : "Cool! All set. :+1: ",
        "createdAt" : "2019-06-07T14:07:11Z",
        "updatedAt" : "2019-06-07T14:07:12Z",
        "lastEditedBy" : "88b8e7ff-7bfb-405d-a8d3-99e3e782d71f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f39504d5801d14ef16f3478489d4a54f62c14dd7",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +22,26 @@export type DispatcherMap = Record<\n    string,\n    <T = unknown>(...args: readonly any[]) => T\n>;\nexport type Subscriber = (callback: () => void) => void;"
  }
]