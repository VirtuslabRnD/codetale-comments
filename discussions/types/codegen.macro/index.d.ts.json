[
  {
    "id" : "00d76a20-979a-4a01-878c-cfbc5881930a",
    "prId" : 36409,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/36409#pullrequestreview-256463033",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b61e032b-29e2-458f-afd4-41ce6add09c9",
        "parentId" : null,
        "authorId" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "body" : "I would suggest the return type be `unknown`. This way, consumers of the library will have to cast the result of `codegen` in order to use it. As you have it now, you can \"cast\" it using type annotations as you do in your tests, but if they don't do this, then there's no error and they might introduce `any` into their program.",
        "createdAt" : "2019-06-27T23:59:49Z",
        "updatedAt" : "2019-06-27T23:59:52Z",
        "lastEditedBy" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "tags" : [
        ]
      },
      {
        "id" : "a5547910-674e-4b75-b7d2-295350cbc3b3",
        "parentId" : "b61e032b-29e2-458f-afd4-41ce6add09c9",
        "authorId" : "de45526c-23b8-4156-b410-50d53d781073",
        "body" : "Yes totally agree. But do we still need to support TypeScript versions older than 3.0?",
        "createdAt" : "2019-06-28T04:05:57Z",
        "updatedAt" : "2019-06-28T04:05:58Z",
        "lastEditedBy" : "de45526c-23b8-4156-b410-50d53d781073",
        "tags" : [
        ]
      },
      {
        "id" : "06a8429d-9c61-40f0-893b-db63fe152a4c",
        "parentId" : "b61e032b-29e2-458f-afd4-41ce6add09c9",
        "authorId" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "body" : "Ah, good point, I sometimes forget how new `unknown` is. In that case, you could use `{} | null | undefined`.",
        "createdAt" : "2019-06-28T15:43:55Z",
        "updatedAt" : "2019-06-28T15:43:55Z",
        "lastEditedBy" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "tags" : [
        ]
      },
      {
        "id" : "c363c3fe-263d-4175-bd79-e825b6faec74",
        "parentId" : "b61e032b-29e2-458f-afd4-41ce6add09c9",
        "authorId" : "de45526c-23b8-4156-b410-50d53d781073",
        "body" : "I think the return value of `codegen` can be literally anything, not limited to `{}` or `null` or `undefined`.\r\nI feel `any` should be a good representation of its return type, or `unknown` to be more accurate, but any specific types could limit its potential.",
        "createdAt" : "2019-07-01T15:48:27Z",
        "updatedAt" : "2019-07-01T15:48:28Z",
        "lastEditedBy" : "de45526c-23b8-4156-b410-50d53d781073",
        "tags" : [
        ]
      },
      {
        "id" : "f08b3972-4f25-4b65-9b93-3fcfeaef41d9",
        "parentId" : "b61e032b-29e2-458f-afd4-41ce6add09c9",
        "authorId" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "body" : "`unknown` and `{} | null | undefined` are actually the same thing. But I understand your concern, so I'm fine merging either that or `any`; whichever you prefer.",
        "createdAt" : "2019-07-01T15:55:28Z",
        "updatedAt" : "2019-07-01T15:55:28Z",
        "lastEditedBy" : "f6d540bd-fdc2-4205-b709-9c9832e9bd9d",
        "tags" : [
        ]
      },
      {
        "id" : "f2d86aee-4c31-4926-b4eb-1a8bf6d56ef9",
        "parentId" : "b61e032b-29e2-458f-afd4-41ce6add09c9",
        "authorId" : "de45526c-23b8-4156-b410-50d53d781073",
        "body" : "Thanks for pointing that out. I tried `{} | null | undefined` and even `{} | null | undefined | number | string`, not sure if I was doing something wrong, but looks like it was not compatible with the types given in the test case. For example, `{}` is not assignable to type `{ [key: string]: string; }`.\r\nGiven that, I would like it to be `any` which makes it much simpler.",
        "createdAt" : "2019-07-01T17:14:19Z",
        "updatedAt" : "2019-07-01T17:14:19Z",
        "lastEditedBy" : "de45526c-23b8-4156-b410-50d53d781073",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d9280aa02474ed22c29ccb234aeea629b9848a7",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +4,8 @@// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\ndeclare function codegen(strings: TemplateStringsArray, ...values: any[]): any;\nexport = codegen;"
  }
]