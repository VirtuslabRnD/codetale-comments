[
  {
    "id" : "3bcd91d5-5697-4d23-90a0-161b991e8b16",
    "prId" : 31012,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/31012#pullrequestreview-181547674",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2019d136-5797-41a5-aa85-583a08a3776d",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "It looks like this will make it possible to reference these types as `ui.Type` as well as `cast.framework.ui.Type`.  Is that intentional?",
        "createdAt" : "2018-12-04T23:09:23Z",
        "updatedAt" : "2018-12-05T00:32:48Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "816afdfe-a195-43e8-8c0b-71bb5f387084",
        "parentId" : "2019d136-5797-41a5-aa85-583a08a3776d",
        "authorId" : "e9dee7d5-ab1d-478c-ac3d-5e9450694aa2",
        "body" : "I think this is ok as some parts of the CAF framework may be used in isolation especially if the developer is building a custom receiver. If there is a better way could you please advise?",
        "createdAt" : "2018-12-04T23:24:37Z",
        "updatedAt" : "2018-12-05T00:32:48Z",
        "lastEditedBy" : "e9dee7d5-ab1d-478c-ac3d-5e9450694aa2",
        "tags" : [
        ]
      },
      {
        "id" : "59b6fcf3-54d8-45f2-81c1-d31fb5b978f1",
        "parentId" : "2019d136-5797-41a5-aa85-583a08a3776d",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "So, to take `PlayerData` in cast.framework.ui.d.ts as an example, the goal is to be able to either `import { PlayerData } from \"chromecast-caf-receiver/cast.framework.ui\"` in a module or refer to it as `cast.framework.ui.PlayerData` in a global context?",
        "createdAt" : "2018-12-04T23:47:32Z",
        "updatedAt" : "2018-12-05T00:32:48Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "e5f19b59-8d7b-4ab4-9f54-a6a0ee1eaafb",
        "parentId" : "2019d136-5797-41a5-aa85-583a08a3776d",
        "authorId" : "e9dee7d5-ab1d-478c-ac3d-5e9450694aa2",
        "body" : "yes, exactly",
        "createdAt" : "2018-12-04T23:51:15Z",
        "updatedAt" : "2018-12-05T00:32:48Z",
        "lastEditedBy" : "e9dee7d5-ab1d-478c-ac3d-5e9450694aa2",
        "tags" : [
        ]
      },
      {
        "id" : "79d35c04-913f-4007-8b91-d1dace56e9fa",
        "parentId" : "2019d136-5797-41a5-aa85-583a08a3776d",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "Some readers may find the current solution a little hard to read, but it sounds like you've found a way to satisfy all of your goals.  My only suggestion would be to add a little more test coverage to indicate the different kinds of references you expect to work (in particular, imports).",
        "createdAt" : "2018-12-05T00:09:17Z",
        "updatedAt" : "2018-12-05T00:32:48Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "bca84660-6a03-4b6e-ab90-4476b2b2b677",
        "parentId" : "2019d136-5797-41a5-aa85-583a08a3776d",
        "authorId" : "e9dee7d5-ab1d-478c-ac3d-5e9450694aa2",
        "body" : "Ok @amcasey - I have added an example with some comments to the tests. I had to ignore tslint rules for using `cast.framework` usage in the tests. Thanks for your help today :)",
        "createdAt" : "2018-12-05T00:37:20Z",
        "updatedAt" : "2018-12-05T00:37:20Z",
        "lastEditedBy" : "e9dee7d5-ab1d-478c-ac3d-5e9450694aa2",
        "tags" : [
        ]
      },
      {
        "id" : "219e9aaa-1112-4cc2-b6da-2c185e1bfcdd",
        "parentId" : "2019d136-5797-41a5-aa85-583a08a3776d",
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "Thanks!",
        "createdAt" : "2018-12-05T00:39:58Z",
        "updatedAt" : "2018-12-05T00:39:58Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b92e6f79cd8c387921efa99dda8aa6b923f877d",
    "line" : 198,
    "diffHunk" : "@@ -1,1 +2,6 @@import { MediaMetadata } from \"./cast.framework.messages\";\n\nexport as namespace ui\nexport type ContentType = \"video\" | \"audio\" | \"image\";\n"
  }
]