[
  {
    "id" : "6fdcccf0-3f5e-4bc5-8d9b-d93131ea5128",
    "prId" : 31012,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/31012#pullrequestreview-181529516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6c3580a-9a3a-4139-9cf3-a5168aeaaa2c",
        "parentId" : null,
        "authorId" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "body" : "This pattern is a bit unusual.  Is having consumers access the types through `cast` very inconvenient?",
        "createdAt" : "2018-12-04T23:05:16Z",
        "updatedAt" : "2018-12-05T00:32:48Z",
        "lastEditedBy" : "e5ae6fc6-9e2b-4b96-8480-7066f2f51e54",
        "tags" : [
        ]
      },
      {
        "id" : "032f7d0a-82f9-4abb-a339-ddd5bca3f69b",
        "parentId" : "b6c3580a-9a3a-4139-9cf3-a5168aeaaa2c",
        "authorId" : "e9dee7d5-ab1d-478c-ac3d-5e9450694aa2",
        "body" : "nothing was 'global' before this PR. you had to `import { Sometype } from 'chromecast-caf-receiver/framework/whatever' ` .. but as this is not an npm package, but a script reference that ends up on the `window` object, developers following the CAF documentation expected to be able to type `cast.framework.<whatever>` and get access to types. ",
        "createdAt" : "2018-12-04T23:23:42Z",
        "updatedAt" : "2018-12-05T00:32:48Z",
        "lastEditedBy" : "e9dee7d5-ab1d-478c-ac3d-5e9450694aa2",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b92e6f79cd8c387921efa99dda8aa6b923f877d",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +19,23 @@export { framework };\n\ndeclare global {\n    type EventHandler = (event: Event) => void;\n    type PlayerDataChangedEventHandler = ("
  }
]