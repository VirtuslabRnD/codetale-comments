[
  {
    "id" : "114a4e99-e240-4e74-93cb-165c13a9dbdd",
    "prId" : 28482,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28482#pullrequestreview-290059045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95599f45-6cde-4016-a026-bd8a6502fbf0",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Minor stylistic comment but does using a glob with path lib and iterating over results simplify this? Took me a bit to grok what we were doing here and I think a glob would be more stable if we added xml docs or changed name in future\r\n",
        "createdAt" : "2019-09-18T16:37:14Z",
        "updatedAt" : "2019-09-18T22:18:35Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "dc8483a9-c494-4eb5-9b34-e368ec88d66c",
        "parentId" : "95599f45-6cde-4016-a026-bd8a6502fbf0",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Good point, didn't think about that. But in the next PR after this one I'll make the test just run once and remove the single/multi, so this loop will be removed. So not really worth to change it.",
        "createdAt" : "2019-09-18T16:48:04Z",
        "updatedAt" : "2019-09-18T22:18:35Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b174abda3051b465ad16319ebf01744405bfd65c",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +29,33 @@    i = 1\n    for file_type in (\"-single\", \"-multiple\", \"\"):\n        for test_data in main(\"test-data{}.xml\".format(file_type)):\n            if test_data is None:\n                print(\"-\" * 80)"
  },
  {
    "id" : "b5a25312-9a27-42a4-93f8-654bd59f6e81",
    "prId" : 28482,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28482#pullrequestreview-290643928",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2c0db87-1bb1-4a6c-8c54-56dafa995c08",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Can you explain why this yields None? Does this not print skips that aren't associated to a class?\r\n\r\nHaven't looked deeply but compared the number of skipped tests in this build to another from today for Linux Py35_Compat and numbers were way lower, so just curious if this is a reason for that",
        "createdAt" : "2019-09-18T18:02:39Z",
        "updatedAt" : "2019-09-18T22:18:35Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "35ee9fe3-1a2e-47ae-a3a0-5557d81e1d13",
        "parentId" : "d2c0db87-1bb1-4a6c-8c54-56dafa995c08",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "This `yield None` shouldn't prevent the next yield from happening, so it's not causing to miss tests.\r\n\r\nIn the output of the skipped tests we print some division (i.e. `--------------`) between classes, so it's easier to see the different groups of tests that have been skipped.\r\n\r\nWith this `yield None` this becomes as simple as the `if` in the caller, and reduced significantly the code here, and makes things much compact and clear, which is the goal of this PR.",
        "createdAt" : "2019-09-18T22:11:38Z",
        "updatedAt" : "2019-09-18T22:18:35Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "8bef0bc3-3bd3-4b45-bd37-9882983330c3",
        "parentId" : "d2c0db87-1bb1-4a6c-8c54-56dafa995c08",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "There was indeed a typo that was causing the skipped tests of the `multiple` file to not be printed, good catch. Should be fixed now.",
        "createdAt" : "2019-09-18T22:19:10Z",
        "updatedAt" : "2019-09-18T22:19:10Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "0f7e70cc-0fb7-41de-8a65-78acddedd46f",
        "parentId" : "d2c0db87-1bb1-4a6c-8c54-56dafa995c08",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Cool. Looks like this is printing out more skips now though?",
        "createdAt" : "2019-09-19T05:12:15Z",
        "updatedAt" : "2019-09-19T05:12:16Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "72d33ade-9294-4676-9a14-a013047616ea",
        "parentId" : "d2c0db87-1bb1-4a6c-8c54-56dafa995c08",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I don't think so. If you're checking the number of the last test, before this PR that is not the number of tests. The \"single\" and \"multiple\" tests were printed independently, so they start both from 1 and are not added up.\r\n\r\nIn this PR I'm fixing that, and the numbers don't reset. So, for example, in the `Linux py35_compat`, not it shows from 1 to 2,902. And before it was 1 to 568, and then 1 to 2334. The cases that I've checked, the number of the tests are the same, just the numbers in the second batch don't match.\r\n\r\nDoes this explain the difference you saw?",
        "createdAt" : "2019-09-19T11:17:20Z",
        "updatedAt" : "2019-09-19T11:17:20Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "bb1069ce-aa92-4469-be27-45eaca547637",
        "parentId" : "d2c0db87-1bb1-4a6c-8c54-56dafa995c08",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Yea makes sense - thanks for clarifying",
        "createdAt" : "2019-09-19T15:13:45Z",
        "updatedAt" : "2019-09-19T15:13:45Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b174abda3051b465ad16319ebf01744405bfd65c",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +17,21 @@            current_class = cn\n            if old_class != current_class:\n                yield None\n            yield {\n                \"class_name\": current_class,"
  }
]