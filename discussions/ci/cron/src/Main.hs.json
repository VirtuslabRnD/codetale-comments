[
  {
    "id" : "d32e835e-7814-4c7e-b337-b6575321e3e1",
    "prId" : 9042,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c313cfc3-f0b5-45e9-9f6f-df59d52e63e8",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "instead of trying to get this right everywhere in here, can we just call `dade-assist` once outside of the script and then skip it? I don’t understand why we need to call it separately for each of those invocations.",
        "createdAt" : "2021-03-08T07:53:57Z",
        "updatedAt" : "2021-03-08T07:53:58Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b225afad-d095-4631-8173-20cfc87709b9",
        "parentId" : "c313cfc3-f0b5-45e9-9f6f-df59d52e63e8",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "Actually, we already do call `dade-assist` before running this. 🤔",
        "createdAt" : "2021-03-08T10:55:08Z",
        "updatedAt" : "2021-03-08T10:55:08Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca70ece7879393c2d90a1a879fbf67b263ec9d7e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +345,349 @@    System.callCommand $ unlines [\"bash -c '\",\n        \"set -euo pipefail\",\n        \"export DADE_SKIP_JAVA=1\",\n        \"eval \\\"$(dev-env/bin/dade assist)\\\"\",\n        \"source \\\"\" <> bash_lib <> \"\\\"\","
  },
  {
    "id" : "fc576bd0-f3a7-4ab7-8f00-1d57492e8875",
    "prId" : 8730,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b4168aa-ca0e-44db-b082-79bf79e0cc07",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "Just to double check: the base unit for these is microseconds, right?",
        "createdAt" : "2021-02-03T09:49:16Z",
        "updatedAt" : "2021-02-03T09:49:53Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "0debd28b-e5f1-4e8f-a8ba-07f00bc25c9a",
        "parentId" : "4b4168aa-ca0e-44db-b082-79bf79e0cc07",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "yep, see https://hackage.haskell.org/package/retry-0.8.1.2/docs/Control-Retry.html#v:limitRetriesByCumulativeDelay\r\nWe really need units in the types system.",
        "createdAt" : "2021-02-03T09:51:16Z",
        "updatedAt" : "2021-02-03T09:51:16Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2a628853d9aadcb6fbcfa4e3f0e0536d1f01b01",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +335,339 @@        writeTo = Data.ByteString.hPut\n        -- Retry for 5 minutes total, doubling delay starting with 20ms\n        retryPolicy = limitRetriesByCumulativeDelay (5 * 60 * 1000 * 1000) (exponentialBackoff (20 * 1000))\n        retryHandler status =\n          logRetries"
  },
  {
    "id" : "287b7c78-96f0-4041-9641-23fd99362b2f",
    "prId" : 8730,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aea16d2b-4c69-440a-91fa-6fa8c60845f4",
        "parentId" : null,
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "More `$` more happiness.",
        "createdAt" : "2021-02-03T09:49:34Z",
        "updatedAt" : "2021-02-03T09:49:53Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "cdaa71e0-1ec4-4e59-838f-1d82b05a6cbe",
        "parentId" : "aea16d2b-4c69-440a-91fa-6fa8c60845f4",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "@garyverhaegen-da is not going to be happy , sorry Gary :)",
        "createdAt" : "2021-02-03T09:52:10Z",
        "updatedAt" : "2021-02-03T09:52:10Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d50a311f-64c9-43a8-b5e0-aca4bf945f9f",
        "parentId" : "aea16d2b-4c69-440a-91fa-6fa8c60845f4",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I don't think I am either, but I don't think I can really judge Haskell code properly. 😂 ",
        "createdAt" : "2021-02-03T10:05:20Z",
        "updatedAt" : "2021-02-03T10:05:20Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "b6bc345c-6bed-4571-95e0-715f89949fa2",
        "parentId" : "aea16d2b-4c69-440a-91fa-6fa8c60845f4",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I don’t feel too strongly about it so if you both prefer parentheses here I’m happy to go back. Personally, I find it quite hard to track parentheses beyond a few lines without an editor that does it for me so I tend to opt for `$` for larger blocks and parentheses for small stuff.",
        "createdAt" : "2021-02-03T10:13:11Z",
        "updatedAt" : "2021-02-03T10:13:11Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "86282fac-a703-4704-b1ba-656353164b31",
        "parentId" : "aea16d2b-4c69-440a-91fa-6fa8c60845f4",
        "authorId" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "body" : "I was mostly joking at my own lack of experience with Haskell. 😉 ",
        "createdAt" : "2021-02-03T10:34:54Z",
        "updatedAt" : "2021-02-03T10:34:54Z",
        "lastEditedBy" : "1a7c6bd0-63e1-4deb-9695-6d6e9742f90b",
        "tags" : [
        ]
      },
      {
        "id" : "f9234802-663d-4ad3-9e72-ff9881436822",
        "parentId" : "aea16d2b-4c69-440a-91fa-6fa8c60845f4",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "Why would you ever use an editor that does not track parentheses? 😕\r\n\r\nI really don't mind using `$`; I even use it myself sometimes.",
        "createdAt" : "2021-02-03T11:03:01Z",
        "updatedAt" : "2021-02-03T11:03:01Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "da27dd77-455f-4bc5-ba02-43c218cff7e1",
        "parentId" : "aea16d2b-4c69-440a-91fa-6fa8c60845f4",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Reading git diffs unfortunately doesn’t track parentheses for me :slightly_smiling_face: ",
        "createdAt" : "2021-02-03T11:04:55Z",
        "updatedAt" : "2021-02-03T11:04:56Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2a628853d9aadcb6fbcfa4e3f0e0536d1f01b01",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +319,323 @@    manager <- HTTP.newManager TLS.tlsManagerSettings\n    tokens <- Control.Concurrent.QSem.newQSem 20\n    Control.Concurrent.Async.forConcurrently_ (map uri $ assets release) $ \\url ->\n        bracket_\n          (Control.Concurrent.QSem.waitQSem tokens)"
  },
  {
    "id" : "06c66e12-35bf-47a9-b4a8-2180b973ba4c",
    "prId" : 8514,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8514",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0abab5d2-4c0d-40e1-8e8e-12a11adcba54",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "the comment sounds wrong, we want to update `snapshots.json`.",
        "createdAt" : "2021-01-14T18:14:56Z",
        "updatedAt" : "2021-01-14T18:16:32Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "7edc60cd-c947-44dc-a545-2910b34842ef",
        "parentId" : "0abab5d2-4c0d-40e1-8e8e-12a11adcba54",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Also not sure if at this point it isn’t just better to keep this code long term.",
        "createdAt" : "2021-01-14T18:15:16Z",
        "updatedAt" : "2021-01-14T18:16:32Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "9b6c6cf1-ad32-4951-895c-53c6fb1a5892",
        "parentId" : "0abab5d2-4c0d-40e1-8e8e-12a11adcba54",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "I'll merge as is to fix the issue tonight; I'll think a bit more about what to do longer-term.",
        "createdAt" : "2021-01-14T18:29:35Z",
        "updatedAt" : "2021-01-14T18:29:35Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "409d49e3-9093-4ca3-a707-850263aade98",
        "parentId" : "0abab5d2-4c0d-40e1-8e8e-12a11adcba54",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : ":+1: ",
        "createdAt" : "2021-01-14T18:30:27Z",
        "updatedAt" : "2021-01-14T18:30:27Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4527b21cf932b7174aa7eaa9269c652f0a8eaf",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +464,468 @@          docs sdkDocOpts\n          docs damlOnSqlDocOpts\n          -- FIXME: this is meant to run once to create the `latest` file\n          -- without waiting for the next stable release.\n          gh_versions <- fetch_gh_versions (includedVersion sdkDocOpts)"
  },
  {
    "id" : "b1608bb0-f3b1-4831-8932-e4ae0633bb60",
    "prId" : 8384,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "deee07d0-30d2-49a3-9478-38cee6789be8",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This doesn’t need to be `shell` either right? You can also set `System.env` on the result of `proc` (same return type).",
        "createdAt" : "2021-01-04T17:39:13Z",
        "updatedAt" : "2021-01-04T18:04:05Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5e7d14f0-c0da-41a1-87b2-fb9506835062",
        "parentId" : "deee07d0-30d2-49a3-9478-38cee6789be8",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "I've taken the approach of using `shell` when the entire command is a single string, with no Haskell value interspersed, as I think that reads better. The only use-case we have for setting an env var at the moment fits that, hence `shell_env_` rather than `proc_env_`.\r\n\r\nI'm open to changing my mind on that one, but at first glance I prefer\r\n```haskell\r\nshell_env_ [(\"DAML_SDK_RELEASE_VERSION\", show version)] \"bazel build //docs:docs\"\r\n```\r\nto\r\n```haskell\r\nproc_env_ [(\"DAML_SDK_RELEASE_VERSION\", show version)] [\"bazel\", \"build\", \"//docs:docs\"]\r\n```",
        "createdAt" : "2021-01-04T17:59:23Z",
        "updatedAt" : "2021-01-04T18:04:05Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "df951430-dfbf-4e3f-a46d-8ec8d8a8507d",
        "parentId" : "deee07d0-30d2-49a3-9478-38cee6789be8",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Happy to keep it. I usually use the guideline to only use `shell` if I actually need a `shell` and not just as a syntactic nicety but no reason to stick to that here.",
        "createdAt" : "2021-01-04T18:31:30Z",
        "updatedAt" : "2021-01-04T18:31:33Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd66c598de43b1d62c3e45427225bd8f9af322d6",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +70,74 @@shell_env_ env cmd = do\n    parent_env <- System.Environment.getEnvironment\n    Control.void $ System.readCreateProcess ((System.shell cmd) {System.env = Just (parent_env ++ env)}) \"\"\n\nrobustly_download_nix_packages :: IO ()"
  },
  {
    "id" : "a214d67a-1ee8-4035-b7df-f23cf8c43144",
    "prId" : 8384,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "634f7c8c-41fd-4a7e-a706-22d08425a2e5",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe pass it as `String -> [String]` instead to avoid `head` `tail`?",
        "createdAt" : "2021-01-04T17:39:38Z",
        "updatedAt" : "2021-01-04T18:04:05Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4c208b25-0dbc-4784-886a-b50484f76fe9",
        "parentId" : "634f7c8c-41fd-4a7e-a706-22d08425a2e5",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "That was my first attempt, mirroring what System.proc does, but at least in the context of this script I prefer building up a single list than having to treat the first element specially.\r\n\r\nIs there a specific issue with calling `head` and `tail` here?",
        "createdAt" : "2021-01-04T18:01:24Z",
        "updatedAt" : "2021-01-04T18:04:05Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "11719aba-a6aa-4e6c-9316-b60e7ec7aa26",
        "parentId" : "634f7c8c-41fd-4a7e-a706-22d08425a2e5",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Should be fine, I’m probably just a bit overzealous when it comes to avoiding partial functions. Happy to keep it.",
        "createdAt" : "2021-01-04T18:30:41Z",
        "updatedAt" : "2021-01-04T18:31:33Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd66c598de43b1d62c3e45427225bd8f9af322d6",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +57,61 @@shell cmd = System.readCreateProcess (System.shell cmd) \"\"\n\nproc :: [String] -> IO String\nproc args = System.readCreateProcess (System.proc (head args) (tail args)) \"\"\n"
  },
  {
    "id" : "f1ac7be6-62e6-455b-8c6d-8acd55ecc6fd",
    "prId" : 8382,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8382",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98882957-f482-4323-b6cf-a6388eed2b78",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Is there a reason why we use `shell_` as opposed to `proc_` which passes the arguments as a list and avoids this issue?",
        "createdAt" : "2021-01-04T16:49:25Z",
        "updatedAt" : "2021-01-04T16:49:32Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c7f56b8f-c6bc-478c-ac7f-f78a68fcc5d8",
        "parentId" : "98882957-f482-4323-b6cf-a6388eed2b78",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "I don't think there's a good one, no.",
        "createdAt" : "2021-01-04T16:52:54Z",
        "updatedAt" : "2021-01-04T16:52:54Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "13dfbe4f4da4a78511139643b9d8624ee0bdd557",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +133,137 @@    let hidden = Data.List.sortOn Data.Ord.Down $ Set.toList $ all_versions vs `Set.difference` (Set.fromList $ dropdown vs)\n    create_versions_json hidden (temp </> \"hidden.json\")\n    let push f = shell_ $ \"aws s3 cp \" <> temp </> f <> \" \" <> s3Path opts f <> \" --acl public-read\"\n    push \"versions.json\"\n    push \"hidden.json\""
  },
  {
    "id" : "b2bd6b4f-4f5a-4f4b-b945-149e368d6769",
    "prId" : 8207,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "733f99a5-c205-4ae3-a5c1-9c333a232e15",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "It'd be nice to be more specific about this error. I'd prefer to treat a connection failure or an authorization error differently to \"404 not found\".\r\n\r\nThat said, I'm not going to block this fix on that.",
        "createdAt" : "2020-12-08T20:28:15Z",
        "updatedAt" : "2020-12-08T20:28:18Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "8a066bcd-b195-4467-82e3-5920f661bf09",
        "parentId" : "733f99a5-c205-4ae3-a5c1-9c333a232e15",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Fully agree but unfortunately the error comes from shelling out to `aws s3`. I don’t want to start parsing the output of that for probably obvious reasons and the exit code is just `1`. The two nicer solutions here would be either just use an s3 library instead of shelling out or call a command to check if the file exists but either seemed a bit more complex than just a bugfix.",
        "createdAt" : "2020-12-08T20:32:24Z",
        "updatedAt" : "2020-12-08T20:32:24Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "3420b6ecf2314cb00e15e1bf808342ea1f51b229",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +244,248 @@    -- We could technically remove the catch later.\n    dropdown <- fetch \"versions.json\" False `catchIO`\n      (\\_ -> pure [])\n    -- TODO: read hidden.json after this has run once\n    hidden <- fetch \"snapshots.json\" True `catchIO`"
  },
  {
    "id" : "19f09f0b-b880-4f92-876d-234c8d133617",
    "prId" : 8190,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8190",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a714adda-9ab7-4874-86fd-17316ebb882a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "all the haskell changes are forced by the hlint upgrade.",
        "createdAt" : "2021-02-05T08:58:07Z",
        "updatedAt" : "2021-02-08T10:09:34Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f78a41d4fdc2c2212d8621245e87f8ad1a3d8083",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +151,155 @@        -- unordered maps, and here order matters.\n        versions_json vs = vs\n                           & map ((\\s -> \"\\\"\" <> s <> \"\\\": \\\"\" <> s <> \"\\\"\") . show)\n                           & Data.List.intercalate \", \"\n                           & \\s -> \"{\" <> s <> \"}\""
  },
  {
    "id" : "ae950ff0-9998-4eae-ab14-b071155cd8f1",
    "prId" : 7731,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7731",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49a46740-3cca-468a-b623-7400b7842f0a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "You are basically reimplementing what `http-conduit` gives you. With that, you would end up with something like\r\n```\r\nrunResourceT $ HTTP.responseBody resp  $$ sinkFile (tmp </> …)`\r\n```\r\n\r\nI don’t particularly mind that so feel free to ignore that suggestion or to address it separately.",
        "createdAt" : "2020-10-19T11:17:03Z",
        "updatedAt" : "2020-10-19T16:41:05Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5816b33a-41bc-458f-90b1-ef028875ea7e",
        "parentId" : "49a46740-3cca-468a-b623-7400b7842f0a",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "I did come upon references to `conduit`, but it seemed to add a lot of concepts I do not know yet. I imagine it's not a lot of complexity once you know them, but this is also not very complex as it stands. I tend to be a bit reluctant to add dependencies for a single function. I'll take a closer look at conduit if it comes up again.",
        "createdAt" : "2020-10-19T16:36:12Z",
        "updatedAt" : "2020-10-19T16:41:05Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "18539687c40b5073ad751c690161bd6403d5927e",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +283,287 @@              let req = req' { HTTP.requestHeaders = [(\"User-Agent\", \"DAML cron (team-daml-language@digitalasset.com)\")] }\n              HTTP.withResponse req manager (\\resp -> do\n                  let body = HTTP.responseBody resp\n                  IO.withBinaryFile (tmp </> (last $ Network.URI.pathSegments url)) IO.AppendMode (\\handle -> do\n                      let loop = do"
  },
  {
    "id" : "de5f84dd-6567-48dc-bd49-02582f038d39",
    "prId" : 7731,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7731",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55f9b2ec-983d-41c8-9618-b0eda7908378",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe worth updating that email address but I guess it also doesn’t matter.",
        "createdAt" : "2020-10-19T11:17:21Z",
        "updatedAt" : "2020-10-19T16:41:05Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "728bc6b0-68c9-4155-a00c-f77fcfd27dff",
        "parentId" : "55f9b2ec-983d-41c8-9618-b0eda7908378",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "What would you suggest instead? AFAIK this one still works and will still reach the relevant people.",
        "createdAt" : "2020-10-19T16:36:28Z",
        "updatedAt" : "2020-10-19T16:41:05Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "7e511f77-12e8-4111-9c05-24840c797eb7",
        "parentId" : "55f9b2ec-983d-41c8-9618-b0eda7908378",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "afaik we are both not on this one `team-daml-app-runtime@digitalasset.com` should have everyone in the team.",
        "createdAt" : "2020-10-19T16:41:08Z",
        "updatedAt" : "2020-10-19T16:41:08Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "18539687c40b5073ad751c690161bd6403d5927e",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +281,285 @@          (do\n              req' <- HTTP.parseRequest (show url)\n              let req = req' { HTTP.requestHeaders = [(\"User-Agent\", \"DAML cron (team-daml-language@digitalasset.com)\")] }\n              HTTP.withResponse req manager (\\resp -> do\n                  let body = HTTP.responseBody resp"
  },
  {
    "id" : "9706ed58-7515-42c4-a4fe-5ccbe5afa7e3",
    "prId" : 7696,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84f34184-90c3-4cf9-941d-db8e0c5facd7",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "`forConcurrently_` will spawn an unbounded number of threads. I guess we don’t care since the number of assets is small? If we do care, the easiest solution is usually just to throw a semaphore around the map function you pass to `forConcurrently_`.",
        "createdAt" : "2020-10-15T10:55:00Z",
        "updatedAt" : "2020-10-15T10:56:30Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "9e654303-a277-4095-b475-4746612cabff",
        "parentId" : "84f34184-90c3-4cf9-941d-db8e0c5facd7",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "The Bash code this replaces was also unbounded, so at least this is not getting worse. 🙂\r\n\r\nI'm not concerned; we're not going to have a very big number of files anyway. If you are concerned, I can add a semaphore with, say, 30 slots, so it won't change anything for the happy path (16 assets atm) but will shield against future issues. I'd prefer to do that in a future PR, though.",
        "createdAt" : "2020-10-15T11:56:07Z",
        "updatedAt" : "2020-10-15T11:56:07Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e49ccf685fe01d47ba85c7cc5215c6dc3607d86",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +271,275 @@download_assets :: FilePath -> GitHubRelease -> IO ()\ndownload_assets tmp release = do\n    Control.Concurrent.Async.forConcurrently_ (map uri $ assets release) (\\url -> do\n        shell_ $ unlines [\"bash -c '\",\n            \"set -euo pipefail\","
  },
  {
    "id" : "777ae446-03fe-41b1-bcfc-ffa540a15575",
    "prId" : 7696,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30066908-57e2-462e-988d-ea0717e922ad",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Seems like we could just call `wget` directly and  `-o` to avoid the `cd` but I’ll leave that up to you.",
        "createdAt" : "2020-10-15T10:56:21Z",
        "updatedAt" : "2020-10-15T10:56:30Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "8c1ccd5a-c52e-4132-9da6-ed064b08028a",
        "parentId" : "30066908-57e2-462e-988d-ea0717e922ad",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "ì'm planning to remove wget in my next PR (perhaps next-next now, if the next one is the semaphore), so I don't see much point in trying to make the Bash code nicer. I would point though that we are not in the tmpdir in terms of Haskell process cwd as far as I can tell, so the `cd` there is not superfluous as it stands.",
        "createdAt" : "2020-10-15T11:57:35Z",
        "updatedAt" : "2020-10-15T11:57:35Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e49ccf685fe01d47ba85c7cc5215c6dc3607d86",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +276,280 @@            \"eval \\\"$(dev-env/bin/dade assist)\\\"\",\n            \"cd \\\"\" <> tmp <> \"\\\"\",\n            \"wget --quiet \\\"\" <> show url <> \"\\\"\",\n            \"'\"])\n"
  },
  {
    "id" : "35ebae0d-5c1e-4f7f-93d0-ebc49bb78222",
    "prId" : 7690,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3006d1ba-c142-42f5-b5f3-620c2dc43b3c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I guess cutting of within the pagination already is not worth the complexity since it’s fast enough?",
        "createdAt" : "2020-10-15T07:20:16Z",
        "updatedAt" : "2020-10-15T10:12:57Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2b2dced7-4323-4551-953c-1b66fbdda5d4",
        "parentId" : "3006d1ba-c142-42f5-b5f3-620c2dc43b3c",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "Exactly.",
        "createdAt" : "2020-10-15T09:44:50Z",
        "updatedAt" : "2020-10-15T10:12:57Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "f67fe7b38bbe4aa91647520f20da0e3e6e55ed69",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +346,350 @@check_releases gcp_credentials bash_lib max_releases = do\n    releases' <- fetch_gh_paginated \"https://api.github.com/repos/digital-asset/daml/releases\"\n    let releases = case max_releases of\n                     Nothing -> releases'\n                     Just n -> take n releases'"
  },
  {
    "id" : "21f11480-f09c-4a65-928e-c3a9e86c8dd5",
    "prId" : 7616,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7616",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6343b5ab-77cd-4d62-889d-2f4fbb99c258",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Seems pretty close to the point where you can just kill the bash script and call `gcs` directly (assuming you are running this in dev-env which seems like a reasonable assumption and is one that we make for lots of other tools). Doesn’t have to be in this PR.",
        "createdAt" : "2020-10-09T06:56:25Z",
        "updatedAt" : "2020-10-09T07:33:16Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "49f3e41c-130a-4f17-90ed-f267205f36c0",
        "parentId" : "6343b5ab-77cd-4d62-889d-2f4fbb99c258",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "`gcs` is a [Bash function](https://github.com/digital-asset/daml/blob/master/ci/bash-lib.yml#L32-L51) so unless I'm missing something this is as close as I can get to calling it directly from Haskell.\r\n\r\nThis Bash function is needed by other Bash scripts so I don't think I could easily replace it with a Haskell version, and while I do believe its implementation is quite final at this point, I've been wrong about that before so not too keen on replicating the logic. I'll think about it a bit.",
        "createdAt" : "2020-10-09T10:00:14Z",
        "updatedAt" : "2020-10-09T10:00:14Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "859c6bda-f716-4096-b21b-ecfe88a52936",
        "parentId" : "6343b5ab-77cd-4d62-889d-2f4fbb99c258",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Oh I see, I missed the fact that this was a bash function. Make sense to keep it then.",
        "createdAt" : "2020-10-09T10:04:50Z",
        "updatedAt" : "2020-10-09T10:04:51Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "8991e6162889215df657db95e18f35a5a660ce3e",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +315,319 @@does_backup_exist :: String -> FilePath -> FilePath -> IO Bool\ndoes_backup_exist gcp_credentials bash_lib path = do\n    out <- shell $ unlines [\"bash -c '\",\n        \"set -euo pipefail\",\n        \"eval \\\"$(dev-env/bin/dade assist)\\\"\","
  },
  {
    "id" : "0de47667-800e-4973-b8e1-b012585c2a5c",
    "prId" : 7616,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7616",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "581062f6-95e7-4d9e-bac9-8e2a1af03df7",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Same here, the bash script doesn’t really do anyhing.",
        "createdAt" : "2020-10-09T06:56:37Z",
        "updatedAt" : "2020-10-09T07:33:16Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "8991e6162889215df657db95e18f35a5a660ce3e",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +333,337 @@        \"eval \\\"$(dev-env/bin/dade assist)\\\"\",\n        \"source \\\"\" <> bash_lib <> \"\\\"\",\n        \"gcs \\\"\" <> gcp_credentials <> \"\\\" cp \\\"\" <> local_path <> \"\\\" \\\"\" <> remote_path <> \"\\\"\",\n        \"'\"]\n"
  },
  {
    "id" : "7aad0d0f-b5f9-442f-a62b-8527e4d4d7c0",
    "prId" : 7586,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a4bb5d8-7d99-45cb-99bb-d2debcbf35c6",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Nice!",
        "createdAt" : "2020-10-07T08:49:11Z",
        "updatedAt" : "2020-10-07T09:49:02Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ff0427fc5bfa77ffc7bddd4d68161481ec41107",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +197,201 @@        <$> (v JSON..: \"prerelease\")\n        <*> (version . Text.tail <$> v JSON..: \"tag_name\")\n        <*> (v JSON..: \"assets\")\n\ndata Version = Version Data.SemVer.Version"
  },
  {
    "id" : "fd317678-f9ba-40e6-bc2b-bdf906fa5029",
    "prId" : 7585,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac294575-e529-413a-a712-f77752102458",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Seems like there is an extra level of shells here. If you are calling `bash`, you don’t need `shell`.",
        "createdAt" : "2020-10-06T15:35:37Z",
        "updatedAt" : "2020-10-06T16:04:33Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "3e697161-5a8a-461f-8226-25268d24141e",
        "parentId" : "ac294575-e529-413a-a712-f77752102458",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "I'm aware of the inefficiency here. `shell` is my own wrapper over `System.shell` (see lines 53 & 34), which happens to run `sh`, which would not run this script. I suppose it could be more efficient to just call `System.createProcess` here (and would allow me to pass in the current stdout directly, avoiding the buffering issue), but I don't think it's worth doing at this point.",
        "createdAt" : "2020-10-06T15:48:51Z",
        "updatedAt" : "2020-10-06T16:04:33Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "25e95d944350dcda6a806063ff63aae07e5647bc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +263,267 @@check_releases :: String -> IO ()\ncheck_releases bash_lib = do\n    out <- shell $ unlines [\"bash -c '\",\n              \"set -euo pipefail\",\n              \"eval \\\"$(dev-env/bin/dade assist)\\\"\","
  },
  {
    "id" : "3fc37517-a9da-4034-b5e6-5e9cbc23809f",
    "prId" : 7569,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7569",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2246a276-1607-4fc3-addf-dfa21c11d0c8",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Any reason not to use `optparse-applicative` here? IME it’s pretty cheap in terms of the extra effort it requires even for very simple things and it’s much more maintainable as things get more complex.",
        "createdAt" : "2020-10-05T16:43:43Z",
        "updatedAt" : "2020-10-05T16:44:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "73e4d6f3-ab93-474c-bef0-18fd48df295c",
        "parentId" : "2246a276-1607-4fc3-addf-dfa21c11d0c8",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "I honestly don't expect this to get any more complex than this 2-way dispatch for a very long time, but I'll look at optparse next time I need to make any change there.",
        "createdAt" : "2020-10-05T17:34:59Z",
        "updatedAt" : "2020-10-05T17:34:59Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "574d1ae7672f0d8dffb77ae7c48a6a695f161c59",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +268,272 @@    putStrLn \"FIXME\"\n\nmain :: IO ()\nmain = System.Environment.getArgs >>= parse\n  where parse [\"docs\"] = docs"
  },
  {
    "id" : "a53761fa-dcaa-4c85-bc64-96f1f3f56fe5",
    "prId" : 6285,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6285",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "473aefe1-e359-45ce-8b07-782eb4ae201c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "```suggestion\r\n      _ -> fail $ \"Expected single commit to match release \" <> version <> \", but instead found: \" <> show matching\r\n```\r\nThat one crashes during execution rather than evaluation which is a bit more predictable (here `error` should be fine but I prefer going for the safe option).",
        "createdAt" : "2020-06-10T12:18:16Z",
        "updatedAt" : "2020-06-10T12:24:06Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5d8055ebdf950bbd27912a1c68d1c7b4f074262",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +266,270 @@    case matching of\n      [sha] -> return sha\n      _ -> error $ \"Expected single commit to match release \" <> version <> \", but instead found: \" <> show matching\n\nfetch_s3_versions :: IO (Set.Set Version, Set.Set Version)"
  },
  {
    "id" : "63ec94e3-e6b6-4fce-90b5-182bc3032494",
    "prId" : 6285,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6285",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb8e48bc-c24c-4d79-95c1-e20950ffd9e0",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Answering my own question: Even if we switch to a stable release without modifying the commit, we only get a single hit since we look for the exact line which includes both the version number and the hash not just the hash :+1:",
        "createdAt" : "2020-06-10T12:23:54Z",
        "updatedAt" : "2020-06-10T12:24:06Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "2b92d336-f73e-4777-86de-c0526396e614",
        "parentId" : "eb8e48bc-c24c-4d79-95c1-e20950ffd9e0",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "Spurious commits we would get in the `matching_commits` list include commits that remove that version line (whether by removing entirely or by changing the tag without changing the hash) and the one commit where LATEST suddenly became multi-line. As far as I'm aware that's all, and both cases will be filtered out by the set difference logic below.",
        "createdAt" : "2020-06-10T12:38:30Z",
        "updatedAt" : "2020-06-10T12:38:30Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5d8055ebdf950bbd27912a1c68d1c7b4f074262",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +257,261 @@    -- we want is a commit that added a single line, which matches the version\n    -- we are checking for.\n    matching_commits <- lines <$> (shell $ \"git log --format=%H --all -G '\" <> ver_sha <> \"' -- LATEST\")\n    matching <- Maybe.catMaybes <$> Traversable.for matching_commits (\\sha -> do\n        after <- Set.fromList . lines <$> (shell $ \"git show \" <> sha <> \":LATEST\")"
  },
  {
    "id" : "a391ac20-67fa-4886-befa-63912c6eaaea",
    "prId" : 6128,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "191598ea-e6cd-45d7-8fff-b02b5ea46157",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "CI is failing because `latest_sha` is now unusued.",
        "createdAt" : "2020-05-27T17:02:30Z",
        "updatedAt" : "2020-05-27T21:49:40Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "83ec83c5-6bbf-458b-9c33-c2cb4a984a1b",
        "parentId" : "191598ea-e6cd-45d7-8fff-b02b5ea46157",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "🤦 ",
        "createdAt" : "2020-05-27T21:35:33Z",
        "updatedAt" : "2020-05-27T21:49:40Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4ce486d8f73768357213dc68f06e08efa068dea",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +176,180 @@        create_versions_json (map fst releases) (new </> \"versions.json\")\n        create_versions_json (map fst snapshots) (new </> \"snapshots.json\")\n        -- Starting after 0.13.54, we have changed the way in which we trigger\n        -- releases. Rather than releasing the current commit by changing the\n        -- VERSION file, we now mark an existing commit as the source code for"
  },
  {
    "id" : "b940fdd3-7d4a-4994-bb0c-ce608b3f6ddd",
    "prId" : 6016,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6016",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02489a3a-916d-4107-952d-b916a0048ac9",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "the meaning of latest hasn’t changed right? it’s still the latest release on github releases that is not a prerelease according to semver?",
        "createdAt" : "2020-05-19T07:57:44Z",
        "updatedAt" : "2020-05-19T16:49:55Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "1dd60a56-9d38-4540-97da-81f7095cdebc",
        "parentId" : "02489a3a-916d-4107-952d-b916a0048ac9",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "The meaning has actually changed, not as of this PR, but as of #5584, despite that variable not being touched in there. What we want here is not the latest version, but the highest-numbered one, i.e. if 1.0.1 is released after 1.1.0, we still want the top-level documentation to show 1.1.0. So I thought calling it `latest` here would be confusing, especially now that I added references to the \"latest\" release notes (which really are intended to be the latest, as in most recent).",
        "createdAt" : "2020-05-19T09:47:30Z",
        "updatedAt" : "2020-05-19T16:49:55Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f991d71059dcd0bad10906e5ddf2f510803c993",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +109,113 @@\nbuild_docs_folder :: String -> [GitHubVersion] -> String -> IO String\nbuild_docs_folder path versions current = do\n    restore_sha $ do\n        let old = path </> \"old\""
  },
  {
    "id" : "550577cf-8c2d-405d-a71a-d84c44f45a20",
    "prId" : 6016,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6016",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e994a910-a02d-488b-8232-7116a46ce788",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "“from the most recent release” isn’t quite right as far as I can tell. You take it from the state of `master` and then build the `.html` file of the release for which you do not have docs (in theory there could be more than one and then you’ll end up with a somewhat random one but there shouldn’t be a meaningful difference since the state of `master` is the same). Any reason why we are not using the release commit?",
        "createdAt" : "2020-05-19T08:03:01Z",
        "updatedAt" : "2020-05-19T16:49:55Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "c6b17ec5-fbcc-4dae-9b26-0a50b7327a7c",
        "parentId" : "e994a910-a02d-488b-8232-7116a46ce788",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "Under the (unverified, but so far true) assumption that we do not change the release notes file outside of a release cycle (and that if we do, then there is no release so this script will not run until there actually is a release), the latest commit that changes the release notes on master _is_ the release commit of the latest release. This could only be a different commit if we committed changes to the release notes file in-between merging a release commit to master and the cron job running. This could be actually useful for last-minute typo corrections I suppose.\r\n\r\nThis could be made slightly safer by pinning it to the LATEST file instead of the release notes one.",
        "createdAt" : "2020-05-19T10:04:55Z",
        "updatedAt" : "2020-05-19T16:49:55Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "34408b90-933f-4ddd-aea4-a0889ae14194",
        "parentId" : "e994a910-a02d-488b-8232-7116a46ce788",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It’s not true if you look at https://github.com/digital-asset/daml/commits/master/docs/source/support/release-notes.rst. I don’t think we’ve changed it sufficiently quickly that it would matter but it can change.",
        "createdAt" : "2020-05-19T10:18:54Z",
        "updatedAt" : "2020-05-19T16:49:55Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "62055255-b2b5-4792-9af9-5d8d3ee10ca1",
        "parentId" : "e994a910-a02d-488b-8232-7116a46ce788",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "Changed to check LATEST, which should be closer to the last release. I don't really want to duplicate the entire logic of determining whether that commit was a release commit, especially given that this only runs if a version was actually added to GitHub.",
        "createdAt" : "2020-05-19T16:44:19Z",
        "updatedAt" : "2020-05-19T16:49:55Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f991d71059dcd0bad10906e5ddf2f510803c993",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +224,228 @@            -- from the past, and keep the changelog outside of the worktree\n            -- (in commit messages), that means that commit cannot contain its\n            -- own release notes. We have decided to resolve that conundrum by\n            -- always including the release notes from the most recent release\n            -- in all releases."
  },
  {
    "id" : "571d7771-f052-4b40-890f-0f0bf905abee",
    "prId" : 5584,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5584",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b9fba85-da0d-46a6-bfd4-d0aaeca7f1c0",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Applying this to master as well doesn’t do any harm or at least not more harm than only applying it here right? It seems nicer to not have those go needlessly out of sync.",
        "createdAt" : "2020-04-16T15:18:13Z",
        "updatedAt" : "2020-04-16T15:18:25Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "e7929eec-5523-4956-9ad3-a92cda8ec0ca",
        "parentId" : "5b9fba85-da0d-46a6-bfd4-d0aaeca7f1c0",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "This one is the master one.",
        "createdAt" : "2020-04-16T15:20:28Z",
        "updatedAt" : "2020-04-16T15:20:28Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "914738d5-e690-4ce5-8a15-44a2d0ab9683",
        "parentId" : "5b9fba85-da0d-46a6-bfd4-d0aaeca7f1c0",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "branches are confusing :facepalm: my question still stands: can we apply this to both? if not, maybe worth adding a comment in the code?",
        "createdAt" : "2020-04-16T15:24:16Z",
        "updatedAt" : "2020-04-16T15:24:16Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "1b224e76-c531-41f9-be86-892094e48b12",
        "parentId" : "5b9fba85-da0d-46a6-bfd4-d0aaeca7f1c0",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "The Azure cron only runs the latest master commit, so there is little point in changing this code on the 1.0 release branch.\r\n\r\nThe whole point of release branches being that they get the absolute minimum amount of changes to fix bugs, I'm somewhat reluctant to change anything I don't absolutely have to over there.",
        "createdAt" : "2020-04-16T15:30:37Z",
        "updatedAt" : "2020-04-16T15:30:37Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "e68cc65e-8819-4242-a372-4a4c42ac57ab",
        "parentId" : "5b9fba85-da0d-46a6-bfd4-d0aaeca7f1c0",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Oh makes sense, forgot that the cron job will always be based on master.",
        "createdAt" : "2020-04-16T15:48:01Z",
        "updatedAt" : "2020-04-16T15:48:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "5826d207fd2b3d9ba9c0f704e80c487466f1116e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +241,245 @@find_commit_for_version :: String -> IO String\nfind_commit_for_version version = do\n    release_commits <- lines <$> shell \"git log --format=%H --branches='*' -- LATEST\"\n    ver_sha <- init <$> (shell $ \"git rev-parse v\" <> version)\n    let expected = ver_sha <> \" \" <> version"
  },
  {
    "id" : "b08d23bb-ec18-4d40-9fdf-6c99763e9ac6",
    "prId" : 4976,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "817a578f-b3da-4841-949d-4e2c51e3c53a",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I’m struggling to understand what changed to require this now. Can you help me out?",
        "createdAt" : "2020-03-12T18:23:10Z",
        "updatedAt" : "2020-03-12T18:29:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b3de3319-da81-47fa-931f-77fea18bfe42",
        "parentId" : "817a578f-b3da-4841-949d-4e2c51e3c53a",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "The \"main loop\" is now returning `[GitHubVersion]` instead of `[String]` because we need to track which ones are prereleases.",
        "createdAt" : "2020-03-12T18:35:29Z",
        "updatedAt" : "2020-03-12T18:36:59Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "e686f597-fe5f-4eec-ba12-a54c830f6a14",
        "parentId" : "817a578f-b3da-4841-949d-4e2c51e3c53a",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : ":man_facepalming: Thanks for the explanation!",
        "createdAt" : "2020-03-12T18:36:58Z",
        "updatedAt" : "2020-03-12T18:36:58Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b679e1da-63f9-4668-9140-6bf003ccb7b8",
        "parentId" : "817a578f-b3da-4841-949d-4e2c51e3c53a",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "I should probably type my subfunctions. It would have made the change much clearer, and @nickchapman-da would stop telling me to do it. I'll add type annotations next time I need to touch this script.",
        "createdAt" : "2020-03-12T18:38:21Z",
        "updatedAt" : "2020-03-12T18:38:22Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "abb538fc-2d2d-4c4d-8cdb-ce58dfdc0372",
        "parentId" : "817a578f-b3da-4841-949d-4e2c51e3c53a",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Yeah. More types!",
        "createdAt" : "2020-03-16T09:12:51Z",
        "updatedAt" : "2020-03-16T09:12:51Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fafcb2de8ca9728165057297c6cf92ba2b71489",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +232,236 @@            -- unordered maps, and here order matters.\n            let versions_json = versions\n                                & map name\n                                & List.sortOn (Data.Ord.Down . to_v)\n                                & map (\\s -> \"\\\"\" <> s <> \"\\\": \\\"\" <> s <> \"\\\"\")"
  },
  {
    "id" : "d9b3f37f-5709-4885-a298-633ecf0cafd5",
    "prId" : 3944,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9ecb15d-d25f-4e44-bdc0-b65fd366fddf",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Order-sensitive JSON maps seem quite unintuitive to me. Can we use an array of key-value pairs instead?",
        "createdAt" : "2020-01-03T15:36:20Z",
        "updatedAt" : "2020-01-08T11:38:26Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "1c681c54-160a-4407-9f62-fb73140eff68",
        "parentId" : "d9ecb15d-d25f-4e44-bdc0-b65fd366fddf",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "It's the js bit on the website that is order-sensitive in its JSON parsing. I'm not a big fan either, but I don't have a viable plan for changing that without breaking all the past docs.\r\n\r\nFun fact: we only need an ordered list of versions, so a list of strings would work here, we don't even need it to be pairs.",
        "createdAt" : "2020-01-03T17:32:54Z",
        "updatedAt" : "2020-01-08T11:38:26Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf786c0d63f033042cf2f5196bb5ac6f5b24d5d1",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +179,183 @@            -- Not going through Aeson because it represents JSON objects as\n            -- unordered maps, and here order matters.\n            let versions_json = versions\n                                & map (\\s -> \"\\\"\" <> s <> \"\\\": \\\"\" <> s <> \"\\\"\")\n                                & List.intercalate \", \""
  },
  {
    "id" : "fb882cde-2d24-4ee4-9c20-ebc3dbfb8220",
    "prId" : 3943,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3943",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af7a3fae-8f5c-4b6d-9667-1437e7a88c8e",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I removed the dependency on `MissingH` since we already depend on enough other kitchen sink libraries and it doesn’t buy us anything.",
        "createdAt" : "2020-01-03T16:27:26Z",
        "updatedAt" : "2020-01-04T00:29:01Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ee4b31ae031ed1c21e1110225732a5c520aa53c",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +128,132 @@    let versions_json = versions\n                        & map (\\s -> \"\\\"\" <> s <> \"\\\": \\\"\" <> s <> \"\\\"\")\n                        & List.intercalate \", \"\n                        & \\s -> \"{\" <> s <> \"}\"\n    writeFile (path <> \"/versions.json\") versions_json"
  },
  {
    "id" : "cbdb51d8-da52-41ac-9fae-f0add7bcde15",
    "prId" : 3266,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3266",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1cff119-8367-4277-b658-122c3e706a75",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Newtypes around tuples are usually not very useful. Either just make it a proper datatype, i..e, `data Version = Version Int Int Int` or use the tuple.",
        "createdAt" : "2019-10-28T19:05:22Z",
        "updatedAt" : "2019-10-29T12:49:26Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d8004236e212354b2410fbd307d630888aa266e",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +109,113 @@    Set.fromList $ H.keys json\n\nnewtype Version = Version (Int, Int, Int)\n  deriving (Eq, Ord)\n"
  },
  {
    "id" : "51683daf-c675-4ccf-b102-46c80baf760c",
    "prId" : 3235,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3235",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad28cefc-1154-4d3e-815f-54a601f95c04",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "for better or for worse, we use camelcase as the naming convention for all other Haskell code so I think it would be better to be consistent here.",
        "createdAt" : "2019-10-21T18:49:12Z",
        "updatedAt" : "2019-10-28T16:38:32Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "275f27f0-f29d-4722-9c56-d932b60f0dba",
        "parentId" : "ad28cefc-1154-4d3e-815f-54a601f95c04",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "I disagree. I do believe snake case is better, and I do not think consistency within a monorepo matters much for a top-level application file (i.e. not a library that would \"pollute\" modules that import it), so I would rather keep those.",
        "createdAt" : "2019-10-25T19:32:35Z",
        "updatedAt" : "2019-10-28T16:38:32Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      },
      {
        "id" : "1697cdb9-ef0b-4735-ac17-5c9b059ad569",
        "parentId" : "ad28cefc-1154-4d3e-815f-54a601f95c04",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Given that basically all Haskell libraries use camelCase this isn’t just about consistency within a repo but also about consistency with the names used by your dependencies.",
        "createdAt" : "2019-10-25T19:35:52Z",
        "updatedAt" : "2019-10-28T16:38:32Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "dc490977-63a2-483d-9b1e-2389b228581f",
        "parentId" : "ad28cefc-1154-4d3e-815f-54a601f95c04",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "I actually like that inconsistency, as it tells me at a glance where an identifier comes from. We all have our quirks, I suppose.",
        "createdAt" : "2019-10-27T18:56:40Z",
        "updatedAt" : "2019-10-28T16:38:32Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "dae75011a452f0dfe7fecf83ff973bc5c6dbdfbb",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +26,30 @@import qualified System.Process as System\n\nshell_exit_code :: String -> IO (Exit.ExitCode, String, String)\nshell_exit_code cmd = do\n    System.readCreateProcessWithExitCode (System.shell cmd) \"\""
  },
  {
    "id" : "d7f62b17-8aa1-4009-808d-94e6fe092ca8",
    "prId" : 3235,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3235",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29a691fa-e827-4504-a659-427181c53b81",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "same comment about camelCase.",
        "createdAt" : "2019-10-21T18:49:36Z",
        "updatedAt" : "2019-10-28T16:38:32Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "dae75011a452f0dfe7fecf83ff973bc5c6dbdfbb",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +56,60 @@    Control.void $ shell cmd\n\nrobustly_download_nix_packages :: IO ()\nrobustly_download_nix_packages = do\n    h (10 :: Integer)"
  },
  {
    "id" : "3a197770-fcb5-453e-a9ea-0b97b40b3766",
    "prId" : 3235,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3235",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d825cf83-7af3-4d55-b489-9ae5f889b1db",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "```suggestion\r\n    case (statusCode $ responseStatus response, body) of\r\n```",
        "createdAt" : "2019-10-21T19:00:00Z",
        "updatedAt" : "2019-10-28T16:38:32Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "28536bc7-6403-4ab9-a70e-cb0ea18a69be",
        "parentId" : "d825cf83-7af3-4d55-b489-9ae5f889b1db",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "👍 ",
        "createdAt" : "2019-10-25T19:41:47Z",
        "updatedAt" : "2019-10-28T16:38:32Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "dae75011a452f0dfe7fecf83ff973bc5c6dbdfbb",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +78,82 @@    let body = JSON.decode $ HTTP.responseBody response\n    let status = Status.statusCode $ HTTP.responseStatus response\n    case (status, body) of\n      (200, Just body) -> return body\n      _ -> Exit.die $ unlines [\"GET \\\"\" <> url <> \"\\\" returned status code \" <> show status <> \".\","
  },
  {
    "id" : "19c70cd3-b6e6-4062-b08f-c4bf5cb09fb8",
    "prId" : 3235,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3235",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec93130a-b8db-4476-bb30-6da93cd97d73",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Can we just accept a `[Text]` here and rely on the `FromJSON` instance to implement `to_list` at the callsite?",
        "createdAt" : "2019-10-21T20:15:15Z",
        "updatedAt" : "2019-10-28T16:38:32Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d52df91c-7ad4-43c5-996d-d037609adebe",
        "parentId" : "ec93130a-b8db-4476-bb30-6da93cd97d73",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "I don't understand what you mean here.",
        "createdAt" : "2019-10-25T19:49:59Z",
        "updatedAt" : "2019-10-28T16:38:32Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "dae75011a452f0dfe7fecf83ff973bc5c6dbdfbb",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +104,108 @@\ndocs_versions :: H.HashMap String String -> Set.Set String\ndocs_versions json =\n    Set.fromList $ H.keys json\n"
  },
  {
    "id" : "682b4b77-5b61-4474-8981-5baec1a28be9",
    "prId" : 3235,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3235",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43703b3d-e35b-4a72-92f7-a1c888302af1",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I would import `.=` unqualified. It’s sufficiently common that the costs of not littering the code with qualified imports are lower than the costs of learning the operator imho.",
        "createdAt" : "2019-10-21T20:17:05Z",
        "updatedAt" : "2019-10-28T16:38:32Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "dde14721-f701-4f7b-a4cf-89801e1c7819",
        "parentId" : "43703b3d-e35b-4a72-92f7-a1c888302af1",
        "authorId" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "body" : "I personally think the cost of having import qualifiers is way lower than the cost of not having them. (You have to learn the operator either way.)",
        "createdAt" : "2019-10-25T19:50:45Z",
        "updatedAt" : "2019-10-28T16:38:32Z",
        "lastEditedBy" : "8afc1e61-17e0-4309-b9ea-f0690fd56c47",
        "tags" : [
        ]
      }
    ],
    "commit" : "dae75011a452f0dfe7fecf83ff973bc5c6dbdfbb",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +181,185 @@    toJSON SubmitBlog{body, date, summary, version} =\n    -- content_group_id and blog_author_id reference existing items in HubSpot\n        JSON.object [\"name\" JSON..= (\"Release of DAML SDK \" <> version),\n                     \"post_body\" JSON..= body,\n                     \"content_group_id\" JSON..= (11411412838 :: Integer),"
  }
]