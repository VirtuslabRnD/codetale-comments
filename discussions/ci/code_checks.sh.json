[
  {
    "id" : "f8d5c73c-e0af-41b9-bac1-ef25ebeec3ce",
    "prId" : 22863,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22863#pullrequestreview-161582656",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a60ba65-59a4-4e5f-bb71-daf4d69e53a5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I didn't see a response on splitting this file up into 3 separate files, you can make a sub-dir fi that is helpful and have a top-level script to call them.",
        "createdAt" : "2018-10-04T12:02:14Z",
        "updatedAt" : "2018-10-09T17:43:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cfaff4cb-e945-409f-a3a6-f2c0016f4bae",
        "parentId" : "9a60ba65-59a4-4e5f-bb71-daf4d69e53a5",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think I mentioned above. What I did is make the script able to run for a specific section. That keeps the advantage of simplicity, and addresses your concerns of being able to run just part of it in `Makefile` or manually. These are the calls:\r\n- `./ci/code_checks.sh lint` <- flake8 and cpplint\r\n- `./ci/code_checks.sh patterns` <- greps\r\n- `./ci/code_checks.sh doctests` <- doctests",
        "createdAt" : "2018-10-04T12:27:36Z",
        "updatedAt" : "2018-10-09T17:43:28Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8738e807853a9733496a142c32c2ffe41c75a46a",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +120,124 @@    pytest --doctest-modules -v pandas/core/frame.py \\\n        -k\"-axes -combine -itertuples -join -nlargest -nsmallest -nunique -pivot_table -quantile -query -reindex -reindex_axis -replace -round -set_index -stack -to_dict -to_stata\"\n    RET=$(($RET + $?)) ; echo $MSG \"DONE\"\n\n    MSG='Doctests series.py' ; echo $MSG"
  },
  {
    "id" : "9f2b3e9e-8d60-409b-9ba9-e987415c845d",
    "prId" : 22863,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22863#pullrequestreview-162934981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07d92853-d968-40d7-9eb5-2b609a9a40d7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some docs here on how to run things, maybe also in the contributing docs themselves.",
        "createdAt" : "2018-10-09T11:50:43Z",
        "updatedAt" : "2018-10-09T17:43:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "483d5bcd-ab4b-4b63-b15f-8c2b9647426a",
        "parentId" : "07d92853-d968-40d7-9eb5-2b609a9a40d7",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Yep, that makes a lot of sense, thank, didn't think about that before. Updated the PR",
        "createdAt" : "2018-10-09T14:52:57Z",
        "updatedAt" : "2018-10-09T17:43:28Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8738e807853a9733496a142c32c2ffe41c75a46a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@#   $ ./ci/code_checks.sh doctests    # run doctests\n\necho \"inside $0\"\n[[ $LINT ]] || { echo \"NOT Linting. To lint use: LINT=true $0 $1\"; exit 0; }\n[[ -z \"$1\" || \"$1\" == \"lint\" || \"$1\" == \"patterns\" || \"$1\" == \"doctests\" ]] || { echo \"Unkown command $1. Usage: $0 [lint|patterns|doctests]\"; exit 9999; }"
  },
  {
    "id" : "e031df7c-ab3b-4d7e-a4e5-6c214747fa09",
    "prId" : 24332,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24332#pullrequestreview-186362297",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "152ffaac-9c16-45d8-964f-e4c5457d0c2c",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Small things, but I'd place this validation next to the `assert_raises_regex`, as they are related. Also, I'd remove the comment and just add a short note to `MSG`, IMO that would be even clearer, and more compact. For example\r\n```\r\nMSG='Check for pytest.raises as context manager (a line starting with `pytest.raises` is invalid, as it needs the `with`)'\r\n```",
        "createdAt" : "2018-12-18T11:25:32Z",
        "updatedAt" : "2018-12-19T02:03:34Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "e73f7e5c-ca04-45f0-ad4e-2bf616f0cdd2",
        "parentId" : "152ffaac-9c16-45d8-964f-e4c5457d0c2c",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> Small things, but I'd place this validation next to the assert_raises_regex, as they are related. \r\n\r\nFair enough.\r\n\r\n> Also, I'd remove the comment and just add a short note to MSG, IMO that would be even clearer, and more compact.\r\n\r\nThe comment should stay because it explains the logic of the regex used to check.  That being said, I can expand the `MSG` string.",
        "createdAt" : "2018-12-18T18:18:26Z",
        "updatedAt" : "2018-12-19T02:03:34Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "b0c67806-7a75-49ba-88ae-1d32064ee134",
        "parentId" : "152ffaac-9c16-45d8-964f-e4c5457d0c2c",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Expanded the `MSG` and moved it next to `assert_raises_regex` as requested.  I also added a new `MSG` to print in the CI to remind us about enabling the check in the future.",
        "createdAt" : "2018-12-19T02:05:49Z",
        "updatedAt" : "2018-12-19T02:05:49Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "33a427a295e9da6977d33e89e5449fbbb3a288be",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +160,164 @@    MSG='Check that no file in the repo contains tailing whitespaces' ; echo $MSG\n    invgrep --exclude=\"*.svg\" -RI \"\\s$\" *\n    RET=$(($RET + $?)) ; echo $MSG \"DONE\"\nfi\n"
  },
  {
    "id" : "ac117687-e0b4-4d77-b901-5f793cd3083e",
    "prId" : 24822,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24822#pullrequestreview-194370706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4518dbbe-032f-42d5-923b-0c371812bf11",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this might be too distinct, should literally look for something like '[=,\\s+]nan[,\\s+]' or something like that, but can do in future PR's",
        "createdAt" : "2019-01-19T21:26:43Z",
        "updatedAt" : "2019-01-19T21:26:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0cbba955ba6f735e4c16a2ba13a267f3da2e518",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +113,117 @@    MSG='Check for non-standard imports' ; echo $MSG\n    invgrep -R --include=\"*.py*\" -E \"from pandas.core.common import \" pandas\n    # invgrep -R --include=\"*.py*\" -E \"from numpy import nan \" pandas  # GH#24822 not yet implemented since the offending imports have not all been removed\n    RET=$(($RET + $?)) ; echo $MSG \"DONE\"\n"
  },
  {
    "id" : "286f28eb-8ee9-4908-8b66-c0c17a1e25ac",
    "prId" : 26217,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26217#pullrequestreview-231333483",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0360ad88-388e-444e-9b9a-f930014699f5",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Would make sense to just have one include flag like in the other PR",
        "createdAt" : "2019-04-26T18:25:02Z",
        "updatedAt" : "2019-04-26T18:25:17Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "5cf86898-3fac-4bc5-aa68-aa65854d0a65",
        "parentId" : "0360ad88-388e-444e-9b9a-f930014699f5",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "This follows the conventions of the code_checks.sh file. I also find it more readable than the other convention...",
        "createdAt" : "2019-04-26T19:53:21Z",
        "updatedAt" : "2019-04-26T19:53:21Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6a4f9ed2fa9db28187669ad16131b64efd67578",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +142,146 @@\n    MSG='Check for python2 new-style classes' ; echo $MSG\n    invgrep -R --include=\"*.py\" --include=\"*.pyx\" -E \"class\\s\\S*\\(object\\):\" pandas scripts\n    RET=$(($RET + $?)) ; echo $MSG \"DONE\"\n"
  },
  {
    "id" : "a4b2a368-318f-4d3f-871a-e830be3c4f7a",
    "prId" : 28227,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28227#pullrequestreview-282710857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d473ce52-b2c6-4bb8-bced-fe9e542a1467",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why did this need to change?",
        "createdAt" : "2019-09-02T20:51:44Z",
        "updatedAt" : "2019-09-04T15:29:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "25acccde-c023-4ef5-b802-e927ecd003ed",
        "parentId" : "d473ce52-b2c6-4bb8-bced-fe9e542a1467",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "without this we couldn't blacklist `urllib.request`, only `urrlib` (which we dont want to blacklist)",
        "createdAt" : "2019-09-02T22:18:27Z",
        "updatedAt" : "2019-09-04T15:29:07Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "25140519-910c-4552-acfc-3b05715569c9",
        "parentId" : "d473ce52-b2c6-4bb8-bced-fe9e542a1467",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, can you add a comment, this is not obvious ",
        "createdAt" : "2019-09-02T22:26:35Z",
        "updatedAt" : "2019-09-04T15:29:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d1ad7ffc781f572da319d3e7382605db8a6ff27",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +210,214 @@# GH#28227 for some of these check for top-level modules, while others are\n#  more specific (e.g. urllib.request)\nimport_mods = set(m.split('.')[0] for m in sys.modules) | set(sys.modules)\nmods = blacklist & import_mods\nif mods:"
  },
  {
    "id" : "46ec3762-f797-4e57-9edf-16e0241a9961",
    "prId" : 29318,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29318#pullrequestreview-310336812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f997713-375c-4244-9692-fb4fc4f890be",
        "parentId" : null,
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "I removed the trailing spaces in the import strings to make them more robust to multi-line imports.\r\nAlso for the `from numpy import nan` import they didn't make sense at all. It doesn't seem to be valid syntax anymore though, so it doesn't require any additional clean up",
        "createdAt" : "2019-11-01T08:24:38Z",
        "updatedAt" : "2019-11-01T13:34:23Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc673f734133484c5392556e5554c76b290d4259",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +124,128 @@    invgrep -R --include=\"*.py*\" -E \"from pandas.core import common\" pandas\n    invgrep -R --include=\"*.py*\" -E \"from collections.abc import\" pandas\n    invgrep -R --include=\"*.py*\" -E \"from numpy import nan\" pandas\n\n    # Checks for test suite"
  },
  {
    "id" : "709ff70a-c404-473d-9402-38304e73e830",
    "prId" : 29318,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29318#pullrequestreview-310336812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "392f76af-264f-4a7b-8124-9263c51f13b5",
        "parentId" : null,
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "I noticed the pattern `from pandas.core import common as com` is used in the code base as an alternative to the desired `import pandas.core.common as com`. Therefore I fixed the existing cases (not a breaking change) and added this linting rule here. Let me know if that's fine with you or if this should rather go into a separate PR 🙂✌️",
        "createdAt" : "2019-11-01T08:26:12Z",
        "updatedAt" : "2019-11-01T13:37:27Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc673f734133484c5392556e5554c76b290d4259",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +122,126 @@    MSG='Check for non-standard imports' ; echo $MSG\n    invgrep -R --include=\"*.py*\" -E \"from pandas.core.common import\" pandas\n    invgrep -R --include=\"*.py*\" -E \"from pandas.core import common\" pandas\n    invgrep -R --include=\"*.py*\" -E \"from collections.abc import\" pandas\n    invgrep -R --include=\"*.py*\" -E \"from numpy import nan\" pandas"
  },
  {
    "id" : "7e511f9a-dbb2-489a-b9a4-2ee015882520",
    "prId" : 29607,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/29607#pullrequestreview-316640575",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1e839bf-f7ad-4555-8de0-5fe78d1864d6",
        "parentId" : null,
        "authorId" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "body" : "Moved the `--exclude` option to `pyproject.toml` since I had to create an entry there for `target-version`.  Also has the advantage that users running `black` (either explicitly or through `pre-commit`) will now pick this up as well, so local behavior will match CI.",
        "createdAt" : "2019-11-14T00:09:16Z",
        "updatedAt" : "2019-11-14T16:39:21Z",
        "lastEditedBy" : "7545b4d7-157f-47c4-b7f8-18bf358d429c",
        "tags" : [
        ]
      }
    ],
    "commit" : "967d7479fd71919d1a300e0e4a70230e9bffb426",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +57,61 @@\n    MSG='Checking black formatting' ; echo $MSG\n\tblack . --check\n    RET=$(($RET + $?)) ; echo $MSG \"DONE\"\n"
  },
  {
    "id" : "27bc0815-90ca-4ef1-861b-dddaeb6da69b",
    "prId" : 30755,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/30755#pullrequestreview-361745354",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e82f43a-8ac9-4d79-b615-111129c05c7d",
        "parentId" : null,
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "out of curiosity, what does the `##` here mean?",
        "createdAt" : "2020-02-20T00:37:14Z",
        "updatedAt" : "2020-03-23T09:47:04Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "f991ffed-a015-4aad-9713-ed7ddf474334",
        "parentId" : "9e82f43a-8ac9-4d79-b615-111129c05c7d",
        "authorId" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "body" : "Full disclosure I have no clue, I asked @datapythonista for the output format that it should be outputted when running on ```github-actions```.",
        "createdAt" : "2020-02-20T03:26:22Z",
        "updatedAt" : "2020-03-23T09:47:04Z",
        "lastEditedBy" : "37491837-935c-4b9d-810f-4bb1c44ff375",
        "tags" : [
        ]
      },
      {
        "id" : "35034aa0-c994-4df9-8259-5f41d4f2e2fe",
        "parentId" : "9e82f43a-8ac9-4d79-b615-111129c05c7d",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Just a convention in GitHub Actions. Any row in the output that starts with `##[error]` is highlighted as an error, and it's easier to find in the logs.",
        "createdAt" : "2020-02-20T09:26:06Z",
        "updatedAt" : "2020-03-23T09:47:04Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2897f5df77e2e3fa0f81c68b774e6e5fb79bdcf",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +103,107 @@    MSG='Check for use of not concatenated strings' ; echo $MSG\n    if [[ \"$GITHUB_ACTIONS\" == \"true\" ]]; then\n        $BASE_DIR/scripts/validate_string_concatenation.py --validation-type=\"strings_to_concatenate\" --format=\"##[error]{source_path}:{line_number}:{msg}\" .\n    else\n        $BASE_DIR/scripts/validate_string_concatenation.py --validation-type=\"strings_to_concatenate\" ."
  },
  {
    "id" : "f5863531-733c-40ac-ab7d-fca0e6ac527e",
    "prId" : 33121,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33121#pullrequestreview-387467534",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e091369c-cb0e-45f1-b4c0-860dd18e7164",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "If everything in `development/` is fixed, can you change this in a new PR, so the whole directory is validated in the CI? Thanks!\r\n```suggestion\r\n    $BASE_DIR/scripts/validate_rst_title_capitalization.py $BASE_DIR/doc/source/development $BASE_DIR/doc/source/reference\r\n```",
        "createdAt" : "2020-04-03T00:12:05Z",
        "updatedAt" : "2020-04-03T00:12:06Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "7a4b877a-7608-4dc2-b98a-c8040e0cf378",
        "parentId" : "e091369c-cb0e-45f1-b4c0-860dd18e7164",
        "authorId" : "c2ac41ba-001b-4b49-a8c4-5ae77c08e6d0",
        "body" : "Sure!",
        "createdAt" : "2020-04-03T17:57:38Z",
        "updatedAt" : "2020-04-03T17:57:39Z",
        "lastEditedBy" : "c2ac41ba-001b-4b49-a8c4-5ae77c08e6d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ea43a5d198d10296c4284cdb8c6ff6c4c1b0f09",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +328,332 @@\n    MSG='Validate correct capitalization among titles in documentation' ; echo $MSG\n    $BASE_DIR/scripts/validate_rst_title_capitalization.py $BASE_DIR/doc/source/development/contributing.rst $BASE_DIR/doc/source/reference\n    RET=$(($RET + $?)) ; echo $MSG \"DONE\"\n"
  },
  {
    "id" : "fedfdaba-cbdd-4749-9556-946cb7447c7b",
    "prId" : 33664,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33664#pullrequestreview-396085045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57fa0033-f0f9-440a-a00e-bad2a04cd0df",
        "parentId" : null,
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "I just converted this from `util.testing` to `._testing`. Seems like this code check wasn't adapted to the new location of the testing module.\r\n\r\nIt's not related, but as the PR is tiny otherwise, I think it's ok to include it.",
        "createdAt" : "2020-04-20T00:48:57Z",
        "updatedAt" : "2020-04-20T01:08:22Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "66d84093cd06525a50f38b7d183aecd3d22963e3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +151,155 @@    invgrep -R --include=\"*.py*\" -E \"from pandas._testing import\" pandas/tests\n    RET=$(($RET + $?)) ; echo $MSG \"DONE\"\n    invgrep -R --include=\"*.py*\" -E \"from pandas import _testing as tm\" pandas/tests\n    RET=$(($RET + $?)) ; echo $MSG \"DONE\"\n"
  },
  {
    "id" : "6b93ef5f-e2ff-4cf4-8778-1d1bf798f473",
    "prId" : 33664,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/33664#pullrequestreview-396085228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba5dc53d-7883-4e58-ae44-b51963e48564",
        "parentId" : null,
        "authorId" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "body" : "using `\"conftest import\"` instead of `\"pandas.conftest import\"` to make it work for all conftest files",
        "createdAt" : "2020-04-20T00:50:11Z",
        "updatedAt" : "2020-04-20T01:07:31Z",
        "lastEditedBy" : "c3f452b9-9ab3-4216-a45d-212d094cd8a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "66d84093cd06525a50f38b7d183aecd3d22963e3",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +155,159 @@\n    # No direct imports from conftest\n    invgrep -R --include=\"*.py*\" -E \"conftest import\" pandas/tests\n    RET=$(($RET + $?)) ; echo $MSG \"DONE\"\n    invgrep -R --include=\"*.py*\" -E \"import conftest\" pandas/tests"
  },
  {
    "id" : "751b9010-68ec-4e3e-acba-b6a34e56a550",
    "prId" : 36089,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/36089#pullrequestreview-482020928",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b653a2fb-8aa7-486b-8e90-aacb84ebdcab",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "```suggestion\r\n    invgrep -R --include=\"*.py\" -P '(?<!def )filter\\(' pandas\r\n```\r\n\r\nIs this necessary?",
        "createdAt" : "2020-09-03T16:11:56Z",
        "updatedAt" : "2020-09-03T16:12:11Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "55976353-8415-466e-adab-e4686f47790a",
        "parentId" : "b653a2fb-8aa7-486b-8e90-aacb84ebdcab",
        "authorId" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "body" : "that would fail on uses of `.filter`, `simplefilter`, `.apply_filter` and more",
        "createdAt" : "2020-09-03T16:41:41Z",
        "updatedAt" : "2020-09-03T16:41:41Z",
        "lastEditedBy" : "554ba0f6-6e6a-40c3-98e0-1a6cc4a8e1c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "e81c96c27ee794a980ac8bc1710b3d8a179cdadf",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +181,185 @@\n    MSG='Check for use of builtin filter function' ; echo $MSG\n    invgrep -R --include=\"*.py\" -P '(?<!def)[\\(\\s]filter\\(' pandas\n    RET=$(($RET + $?)) ; echo $MSG \"DONE\"\n"
  },
  {
    "id" : "82d29836-35ab-45e2-b8b5-f406c3e56f54",
    "prId" : 37401,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37401#pullrequestreview-520951982",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e01ffb60-adbe-41f5-849f-52295e66b7f1",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "didn't we move these to pre-commit?",
        "createdAt" : "2020-10-30T16:31:59Z",
        "updatedAt" : "2020-10-30T18:52:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "685664cf-790e-46c6-abc8-9ca77e4ca5cd",
        "parentId" : "e01ffb60-adbe-41f5-849f-52295e66b7f1",
        "authorId" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "body" : "I don't think that's been done yet but @MarcoGorelli seemed to think it was doable",
        "createdAt" : "2020-10-30T18:53:34Z",
        "updatedAt" : "2020-10-30T18:53:35Z",
        "lastEditedBy" : "c450dd54-d24d-43a8-b896-c2c9af46ca18",
        "tags" : [
        ]
      },
      {
        "id" : "5db68b0f-a3fb-4404-91fc-dff2a4c2cd9d",
        "parentId" : "e01ffb60-adbe-41f5-849f-52295e66b7f1",
        "authorId" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "body" : "On my to-do list :innocent:  I hope to get round to it next week",
        "createdAt" : "2020-10-30T18:57:36Z",
        "updatedAt" : "2020-10-30T18:57:36Z",
        "lastEditedBy" : "888173f2-4a00-44f2-b380-bc6a5ca76385",
        "tags" : [
        ]
      }
    ],
    "commit" : "d40e4f37da734ee56e1aeb89caf292fb323832cc",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +147,151 @@\n    MSG='Check for inconsistent use of pandas namespace in tests' ; echo $MSG\n    for class in \"Series\" \"DataFrame\" \"Index\" \"MultiIndex\" \"Timestamp\" \"Timedelta\" \"TimedeltaIndex\" \"DatetimeIndex\" \"Categorical\"; do\n        check_namespace ${class}\n        RET=$(($RET + $?))"
  }
]