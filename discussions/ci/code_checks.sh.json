[
  {
    "id" : "f8d5c73c-e0af-41b9-bac1-ef25ebeec3ce",
    "prId" : 22863,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22863#pullrequestreview-161582656",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a60ba65-59a4-4e5f-bb71-daf4d69e53a5",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "I didn't see a response on splitting this file up into 3 separate files, you can make a sub-dir fi that is helpful and have a top-level script to call them.",
        "createdAt" : "2018-10-04T12:02:14Z",
        "updatedAt" : "2018-10-09T17:43:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "cfaff4cb-e945-409f-a3a6-f2c0016f4bae",
        "parentId" : "9a60ba65-59a4-4e5f-bb71-daf4d69e53a5",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "I think I mentioned above. What I did is make the script able to run for a specific section. That keeps the advantage of simplicity, and addresses your concerns of being able to run just part of it in `Makefile` or manually. These are the calls:\r\n- `./ci/code_checks.sh lint` <- flake8 and cpplint\r\n- `./ci/code_checks.sh patterns` <- greps\r\n- `./ci/code_checks.sh doctests` <- doctests",
        "createdAt" : "2018-10-04T12:27:36Z",
        "updatedAt" : "2018-10-09T17:43:28Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8738e807853a9733496a142c32c2ffe41c75a46a",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +120,124 @@    pytest --doctest-modules -v pandas/core/frame.py \\\n        -k\"-axes -combine -itertuples -join -nlargest -nsmallest -nunique -pivot_table -quantile -query -reindex -reindex_axis -replace -round -set_index -stack -to_dict -to_stata\"\n    RET=$(($RET + $?)) ; echo $MSG \"DONE\"\n\n    MSG='Doctests series.py' ; echo $MSG"
  },
  {
    "id" : "9f2b3e9e-8d60-409b-9ba9-e987415c845d",
    "prId" : 22863,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/22863#pullrequestreview-162934981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07d92853-d968-40d7-9eb5-2b609a9a40d7",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you add some docs here on how to run things, maybe also in the contributing docs themselves.",
        "createdAt" : "2018-10-09T11:50:43Z",
        "updatedAt" : "2018-10-09T17:43:28Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "483d5bcd-ab4b-4b63-b15f-8c2b9647426a",
        "parentId" : "07d92853-d968-40d7-9eb5-2b609a9a40d7",
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Yep, that makes a lot of sense, thank, didn't think about that before. Updated the PR",
        "createdAt" : "2018-10-09T14:52:57Z",
        "updatedAt" : "2018-10-09T17:43:28Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      }
    ],
    "commit" : "8738e807853a9733496a142c32c2ffe41c75a46a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@#   $ ./ci/code_checks.sh doctests    # run doctests\n\necho \"inside $0\"\n[[ $LINT ]] || { echo \"NOT Linting. To lint use: LINT=true $0 $1\"; exit 0; }\n[[ -z \"$1\" || \"$1\" == \"lint\" || \"$1\" == \"patterns\" || \"$1\" == \"doctests\" ]] || { echo \"Unkown command $1. Usage: $0 [lint|patterns|doctests]\"; exit 9999; }"
  },
  {
    "id" : "e031df7c-ab3b-4d7e-a4e5-6c214747fa09",
    "prId" : 24332,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24332#pullrequestreview-186362297",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "152ffaac-9c16-45d8-964f-e4c5457d0c2c",
        "parentId" : null,
        "authorId" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "body" : "Small things, but I'd place this validation next to the `assert_raises_regex`, as they are related. Also, I'd remove the comment and just add a short note to `MSG`, IMO that would be even clearer, and more compact. For example\r\n```\r\nMSG='Check for pytest.raises as context manager (a line starting with `pytest.raises` is invalid, as it needs the `with`)'\r\n```",
        "createdAt" : "2018-12-18T11:25:32Z",
        "updatedAt" : "2018-12-19T02:03:34Z",
        "lastEditedBy" : "b0c8ea7f-389d-4305-8e0a-a1a394b9fcc2",
        "tags" : [
        ]
      },
      {
        "id" : "e73f7e5c-ca04-45f0-ad4e-2bf616f0cdd2",
        "parentId" : "152ffaac-9c16-45d8-964f-e4c5457d0c2c",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "> Small things, but I'd place this validation next to the assert_raises_regex, as they are related. \r\n\r\nFair enough.\r\n\r\n> Also, I'd remove the comment and just add a short note to MSG, IMO that would be even clearer, and more compact.\r\n\r\nThe comment should stay because it explains the logic of the regex used to check.  That being said, I can expand the `MSG` string.",
        "createdAt" : "2018-12-18T18:18:26Z",
        "updatedAt" : "2018-12-19T02:03:34Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      },
      {
        "id" : "b0c67806-7a75-49ba-88ae-1d32064ee134",
        "parentId" : "152ffaac-9c16-45d8-964f-e4c5457d0c2c",
        "authorId" : "51189123-86a2-400a-9762-6816882b6f12",
        "body" : "Expanded the `MSG` and moved it next to `assert_raises_regex` as requested.  I also added a new `MSG` to print in the CI to remind us about enabling the check in the future.",
        "createdAt" : "2018-12-19T02:05:49Z",
        "updatedAt" : "2018-12-19T02:05:49Z",
        "lastEditedBy" : "51189123-86a2-400a-9762-6816882b6f12",
        "tags" : [
        ]
      }
    ],
    "commit" : "33a427a295e9da6977d33e89e5449fbbb3a288be",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +160,164 @@    MSG='Check that no file in the repo contains tailing whitespaces' ; echo $MSG\n    invgrep --exclude=\"*.svg\" -RI \"\\s$\" *\n    RET=$(($RET + $?)) ; echo $MSG \"DONE\"\nfi\n"
  },
  {
    "id" : "ac117687-e0b4-4d77-b901-5f793cd3083e",
    "prId" : 24822,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/24822#pullrequestreview-194370706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4518dbbe-032f-42d5-923b-0c371812bf11",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "this might be too distinct, should literally look for something like '[=,\\s+]nan[,\\s+]' or something like that, but can do in future PR's",
        "createdAt" : "2019-01-19T21:26:43Z",
        "updatedAt" : "2019-01-19T21:26:43Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0cbba955ba6f735e4c16a2ba13a267f3da2e518",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +113,117 @@    MSG='Check for non-standard imports' ; echo $MSG\n    invgrep -R --include=\"*.py*\" -E \"from pandas.core.common import \" pandas\n    # invgrep -R --include=\"*.py*\" -E \"from numpy import nan \" pandas  # GH#24822 not yet implemented since the offending imports have not all been removed\n    RET=$(($RET + $?)) ; echo $MSG \"DONE\"\n"
  },
  {
    "id" : "286f28eb-8ee9-4908-8b66-c0c17a1e25ac",
    "prId" : 26217,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/26217#pullrequestreview-231333483",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0360ad88-388e-444e-9b9a-f930014699f5",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "Would make sense to just have one include flag like in the other PR",
        "createdAt" : "2019-04-26T18:25:02Z",
        "updatedAt" : "2019-04-26T18:25:17Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "5cf86898-3fac-4bc5-aa68-aa65854d0a65",
        "parentId" : "0360ad88-388e-444e-9b9a-f930014699f5",
        "authorId" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "body" : "This follows the conventions of the code_checks.sh file. I also find it more readable than the other convention...",
        "createdAt" : "2019-04-26T19:53:21Z",
        "updatedAt" : "2019-04-26T19:53:21Z",
        "lastEditedBy" : "c2e7df75-d1fb-42be-9205-186b46cef3d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6a4f9ed2fa9db28187669ad16131b64efd67578",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +142,146 @@\n    MSG='Check for python2 new-style classes' ; echo $MSG\n    invgrep -R --include=\"*.py\" --include=\"*.pyx\" -E \"class\\s\\S*\\(object\\):\" pandas scripts\n    RET=$(($RET + $?)) ; echo $MSG \"DONE\"\n"
  },
  {
    "id" : "a4b2a368-318f-4d3f-871a-e830be3c4f7a",
    "prId" : 28227,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/28227#pullrequestreview-282710857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d473ce52-b2c6-4bb8-bced-fe9e542a1467",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "why did this need to change?",
        "createdAt" : "2019-09-02T20:51:44Z",
        "updatedAt" : "2019-09-04T15:29:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "25acccde-c023-4ef5-b802-e927ecd003ed",
        "parentId" : "d473ce52-b2c6-4bb8-bced-fe9e542a1467",
        "authorId" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "body" : "without this we couldn't blacklist `urllib.request`, only `urrlib` (which we dont want to blacklist)",
        "createdAt" : "2019-09-02T22:18:27Z",
        "updatedAt" : "2019-09-04T15:29:07Z",
        "lastEditedBy" : "adf621f1-4745-479a-a1fc-dc14046a3f4b",
        "tags" : [
        ]
      },
      {
        "id" : "25140519-910c-4552-acfc-3b05715569c9",
        "parentId" : "d473ce52-b2c6-4bb8-bced-fe9e542a1467",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "ok, can you add a comment, this is not obvious ",
        "createdAt" : "2019-09-02T22:26:35Z",
        "updatedAt" : "2019-09-04T15:29:07Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d1ad7ffc781f572da319d3e7382605db8a6ff27",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +210,214 @@# GH#28227 for some of these check for top-level modules, while others are\n#  more specific (e.g. urllib.request)\nimport_mods = set(m.split('.')[0] for m in sys.modules) | set(sys.modules)\nmods = blacklist & import_mods\nif mods:"
  }
]