[
  {
    "id" : "f85f098c-31dd-4613-a0b3-d35e4a67d7e0",
    "prId" : 15518,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c18a663-261d-478f-a3c3-f142dbdad9e6",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : ":+1: \n",
        "createdAt" : "2015-10-13T10:07:05Z",
        "updatedAt" : "2015-10-15T19:07:29Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "99b03baa9bf3c7c63b7a505bdfc16098198504d6",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +449,453 @@\t\tpod := &task.Pod\n\t\tlog.Warningf(\"deleting rogue pod %v/%v for lost task %v\", pod.Namespace, pod.Name, task.ID)\n\t\tif err := k.client.Pods(pod.Namespace).Delete(pod.Name, api.NewDeleteOptions(0)); err != nil && !errors.IsNotFound(err) {\n\t\t\tlog.Errorf(\"failed to delete pod %v/%v for terminal task %v: %v\", pod.Namespace, pod.Name, task.ID, err)\n\t\t}"
  },
  {
    "id" : "f8746d29-c46d-4e51-9360-39f7267b3993",
    "prId" : 15518,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37394baa-69a8-4dbb-a52f-775cd630b41d",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "What is the logic behind this? How is this related to graceful termination? If this case was not taken care of, it should have been a problem even before graceful termination was introduced.\n",
        "createdAt" : "2015-10-13T10:11:07Z",
        "updatedAt" : "2015-10-15T19:07:29Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "12de2e52-5e30-4766-8a65-81cf3f3dfc0e",
        "parentId" : "37394baa-69a8-4dbb-a52f-775cd630b41d",
        "authorId" : "4be57fbb-0697-4123-9503-46e35adbceee",
        "body" : "This is another case of terminal task state status update. It handles task lost status update from executor on docker daemon restart, by deleting the pod so that the RC creates a new one (if the pod is backed by RC). we discussed this in https://github.com/mesosphere/kubernetes-mesos/issues/523\n",
        "createdAt" : "2015-10-13T18:22:41Z",
        "updatedAt" : "2015-10-15T19:07:29Z",
        "lastEditedBy" : "4be57fbb-0697-4123-9503-46e35adbceee",
        "tags" : [
        ]
      },
      {
        "id" : "01c6eeab-78da-42c6-955d-119fe651fd4d",
        "parentId" : "37394baa-69a8-4dbb-a52f-775cd630b41d",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Sounds sensible. Can you add that to the commit message and maybe a short version in the code?\n\n@jdef opinion?\n",
        "createdAt" : "2015-10-13T18:40:24Z",
        "updatedAt" : "2015-10-15T19:07:29Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "586e40be-3e0a-4c0e-aade-81f42c9294c1",
        "parentId" : "37394baa-69a8-4dbb-a52f-775cd630b41d",
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "lgtm once documented. at some point we really need to clean this up, but not in this PR\n",
        "createdAt" : "2015-10-14T01:29:05Z",
        "updatedAt" : "2015-10-15T19:07:29Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      }
    ],
    "commit" : "99b03baa9bf3c7c63b7a505bdfc16098198504d6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +439,443 @@\t\t\t(taskStatus.GetSource() == mesos.TaskStatus_SOURCE_SLAVE && taskStatus.GetReason() == mesos.TaskStatus_REASON_EXECUTOR_TERMINATED) ||\n\t\t\t(taskStatus.GetSource() == mesos.TaskStatus_SOURCE_SLAVE && taskStatus.GetReason() == mesos.TaskStatus_REASON_EXECUTOR_UNREGISTERED) ||\n\t\t\t(taskStatus.GetSource() == mesos.TaskStatus_SOURCE_EXECUTOR && taskStatus.GetMessage() == messages.ContainersDisappeared)) {\n\t\t//--\n\t\t// pod-task has metadata that refers to:"
  },
  {
    "id" : "3d33a5b5-5ef4-4176-b440-da01154b8aa8",
    "prId" : 14037,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e3c4e94-c7a8-4427-ba4c-92bc4c7cdbcc",
        "parentId" : null,
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "this conditional looks wrong, see https://github.com/mesosphere/kubernetes-mesos/issues/522\n",
        "createdAt" : "2015-09-30T22:15:14Z",
        "updatedAt" : "2015-09-30T22:15:14Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      },
      {
        "id" : "01cd15c0-5ef9-4f81-978f-b1fef9cdc1bc",
        "parentId" : "7e3c4e94-c7a8-4427-ba4c-92bc4c7cdbcc",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Good spot. \n",
        "createdAt" : "2015-10-01T03:15:32Z",
        "updatedAt" : "2015-10-01T03:15:32Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb5a5ffc28aaacafdb486aac05b91bc22d8feca2",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +377,381 @@\t\t\treturn\n\t\t}\n\t\tif hostName := k.slaveHostNames.HostName(taskStatus.GetSlaveId().GetValue()); hostName != \"\" {\n\t\t\t// a registered task has an update reported by a slave that we don't recognize.\n\t\t\t// this should never happen! So we don't reconcile it."
  },
  {
    "id" : "80bdbcfb-09cf-4515-b3cd-ca4e514d5166",
    "prId" : 12849,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "775c9925-061d-455a-95b1-34f3dd2b4328",
        "parentId" : null,
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "when TASK_ERROR happens, what is the Source? What is the Reason?\n",
        "createdAt" : "2015-08-18T13:39:53Z",
        "updatedAt" : "2015-08-24T22:31:37Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      },
      {
        "id" : "a4b86f1f-59ba-43be-bda4-69b2f769db51",
        "parentId" : "775c9925-061d-455a-95b1-34f3dd2b4328",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "The `TASK_ERROR` is described here: https://issues.apache.org/jira/browse/MESOS-1143\n\nIn short: it's like `TASK_LOST`, but the task should not be restarted by the framework, i.e. \"TASK_ERROR for unrecoverable errors\".\n\nAfter reconciliation we got a `TASK_LOST` status with empty executor and empty slaveId.\n",
        "createdAt" : "2015-08-18T15:10:26Z",
        "updatedAt" : "2015-08-24T22:31:37Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "10f69823-3bb1-4bbb-a3b3-441db706face",
        "parentId" : "775c9925-061d-455a-95b1-34f3dd2b4328",
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "I asked about the `Source` and `Reason` because the `if` block that you modified checks for some very specific values there. You also removed the `SlaveId` check, which I still can't decide if I'm concerned about: that may have been there for a good reason.\n",
        "createdAt" : "2015-08-19T15:40:31Z",
        "updatedAt" : "2015-08-24T22:31:37Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      },
      {
        "id" : "7148caf9-7e66-4606-9675-7a3047dd632d",
        "parentId" : "775c9925-061d-455a-95b1-34f3dd2b4328",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I saw `TASK_LOST` with `(taskStatus.GetSource() == mesos.TaskStatus_SOURCE_MASTER && taskStatus.GetReason() == mesos.TaskStatus_REASON_RECONCILIATION)`, but empty slaveId and empty exexcutorId.\n\nBefore that there was `TASK_ERROR` which we did not handle.\n",
        "createdAt" : "2015-08-19T20:47:04Z",
        "updatedAt" : "2015-08-24T22:31:37Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "f13f2862-1481-4ce0-8c87-e6d7c8f3882c",
        "parentId" : "775c9925-061d-455a-95b1-34f3dd2b4328",
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "I'm wondering which fields are populated for TASK_ERROR. Is source == master?\n",
        "createdAt" : "2015-08-20T05:15:27Z",
        "updatedAt" : "2015-08-24T22:31:37Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      },
      {
        "id" : "432fceef-df8a-4549-9157-d0d2e2b6c7e1",
        "parentId" : "775c9925-061d-455a-95b1-34f3dd2b4328",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I expect that. But it's not specified.\n\nI think we have to try to avoid depending on any detail of those errors as much as possible. They are nice for logging, but otherwise we will depend a lot on the Mesos version.\n",
        "createdAt" : "2015-08-20T08:03:49Z",
        "updatedAt" : "2015-08-24T22:31:37Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "3c615cb0-c5db-461b-93a6-58aa3385d105",
        "parentId" : "775c9925-061d-455a-95b1-34f3dd2b4328",
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "I was originally thinking that we should handle TASK_ERROR like we do for TASK_LOST, TASK_KILLED; not TASK_FAILED. TASK_ERROR is pretty serious: it means that the apiserver has accepted a pod for scheduling that we can probably _never_ schedule.\n\nfor a one-off pod, this is less problematic; we can log an error, delete the pod, and fire a k8s \"event\" indicating what happened.\n\nfor a pod that's being launched by a replication controller  .. things seem a little stickier. if we kill the pod, the rc will just create another one. i don't know if the RC has any backoff logic for re-creating pods that constantly fail. if we generate an API server event for each failure .. that could be pretty noisy.\n\nperhaps instead of deleting the pod we could update it's pod/status to Failed and leave a helpful message in there. maybe an RC would respond better to consecutive pod failures?\n",
        "createdAt" : "2015-08-20T18:15:22Z",
        "updatedAt" : "2015-08-24T22:31:37Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      }
    ],
    "commit" : "158c42f4bef13e53484a997740bcb934f7410e1e",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +468,472 @@\ttask, state := k.taskRegistry.UpdateStatus(taskStatus)\n\n\tif (state == podtask.StateRunning || state == podtask.StatePending) &&\n\t\t((taskStatus.GetSource() == mesos.TaskStatus_SOURCE_MASTER && taskStatus.GetReason() == mesos.TaskStatus_REASON_RECONCILIATION) ||\n\t\t\t(taskStatus.GetSource() == mesos.TaskStatus_SOURCE_SLAVE && taskStatus.GetReason() == mesos.TaskStatus_REASON_EXECUTOR_TERMINATED) ||"
  },
  {
    "id" : "f37d8f1d-6295-41ca-ba15-0cbae5c8027d",
    "prId" : 12849,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26fb3f7a-a565-4d58-b1b5-e9f4f0593438",
        "parentId" : null,
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "would be better written:\n\n``` go\nmessage := taskStatus.GetMessage()\nif message == \"\" {\n  message = \"none\"\n}\n```\n",
        "createdAt" : "2015-08-25T20:45:29Z",
        "updatedAt" : "2015-08-25T20:45:29Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      }
    ],
    "commit" : "158c42f4bef13e53484a997740bcb934f7410e1e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +401,405 @@\tmetrics.StatusUpdates.WithLabelValues(source, reason, taskState.String()).Inc()\n\n\tmessage := \"none\"\n\tif taskStatus.Message != nil {\n\t\tmessage = *taskStatus.Message"
  },
  {
    "id" : "88f72f7d-6a2b-4173-9752-1efddfdbb900",
    "prId" : 12849,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03999043-096b-42e8-a8d1-008259b3f0aa",
        "parentId" : null,
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : ":+1: \n",
        "createdAt" : "2015-08-25T20:46:04Z",
        "updatedAt" : "2015-08-25T20:46:04Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      }
    ],
    "commit" : "158c42f4bef13e53484a997740bcb934f7410e1e",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +452,456 @@\t\tk.reconcileTerminalTask(driver, taskStatus)\n\tdefault:\n\t\tlog.Errorf(\n\t\t\t\"unknown task status %q from %q for task %q on slave %q executor %q for reason %q with message %q\",\n\t\t\ttaskState.String(),"
  },
  {
    "id" : "a729e796-f891-4057-8a2e-e641e48b95ed",
    "prId" : 8882,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42f51297-607e-465f-b398-236e3429d9f6",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "IIUC the scheduler is using etcd directly for two things: (1) master election, (2) storing framework ID? If so, please add a comment about that here. (If I missed some usage, please add it too, of course.)\n\nIn theory, only the API server is supposed to talk to etcd. Our plan is for the API server to provide a master election service (see https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/proposals/high-availability.md), which addresses (1), and to have a config store that any component can use (see #6923), which addresses (2). So what you're doing here isn't quite kosher. That said, I think we've already violated this principle in #9133, and I don't see any other way for you to do what you're doing. But please add a TODO saying to move usage (1) to the API-server-based master election service when it is written, and (2) to the config store when it is written.\n",
        "createdAt" : "2015-06-07T09:25:11Z",
        "updatedAt" : "2015-06-11T13:48:08Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "388b3797-49fa-48fa-ad3f-4405816b16a2",
        "parentId" : "42f51297-607e-465f-b398-236e3429d9f6",
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "have added TODO's\n",
        "createdAt" : "2015-06-10T21:05:48Z",
        "updatedAt" : "2015-06-11T13:48:08Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6436c4a3bcd6756ebfd47679478fac700698ebb1",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +126,130 @@\tscheduleFunc      PodScheduleFunc\n\tclient            *client.Client\n\tetcdClient        tools.EtcdGetSet\n\tfailoverTimeout   float64 // in seconds\n\treconcileInterval int64"
  }
]