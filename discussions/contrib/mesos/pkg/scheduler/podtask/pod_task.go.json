[
  {
    "id" : "f02a1b67-7c83-4d68-9314-6192430937cb",
    "prId" : 21276,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a584caf-e849-4a24-b7f8-b671102e8e9d",
        "parentId" : null,
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "skip mirror pods (and return nil error for them)?\n",
        "createdAt" : "2016-02-15T19:51:11Z",
        "updatedAt" : "2016-02-15T21:30:38Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c776b7eb950730ffec5de04cfd4f3b65789ff83",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +307,311 @@\t// we only expect annotations if pod has been bound, which implies that it has already\n\t// been scheduled and launched\n\tif len(pod.Annotations) == 0 {\n\t\tlog.V(1).Infof(\"skipping recovery for unbound pod %v/%v\", pod.Namespace, pod.Name)\n\t\treturn nil, false, nil"
  },
  {
    "id" : "be385830-c3c4-4e25-9ad1-962aba55eb37",
    "prId" : 16316,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b9d0fd6-ba8c-426e-aa3c-cecd140c90c8",
        "parentId" : null,
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "why are we using a pod pointer here? back in the day it used to be that way as well, and we ended up with unintentionally shared state. IMO this is a bad idea.\n",
        "createdAt" : "2015-11-03T17:31:07Z",
        "updatedAt" : "2015-11-12T00:34:03Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      },
      {
        "id" : "e78d5213-e1ee-4e08-8de9-8c9fb373c638",
        "parentId" : "5b9d0fd6-ba8c-426e-aa3c-cecd140c90c8",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I prefer to have that behavior explicit in the `*pod` expression. As far as I see, it's not less shared now than it was before.\n",
        "createdAt" : "2015-11-04T12:09:57Z",
        "updatedAt" : "2015-11-12T00:34:03Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "a6a2e99e-ceb8-42e6-91d7-949db00aabec",
        "parentId" : "5b9d0fd6-ba8c-426e-aa3c-cecd140c90c8",
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "pod is a deep struct. simply dereferencing it is not sufficient anyway. we should really `Clone()` it here, and also in `T.Clone()`\n",
        "createdAt" : "2015-11-10T16:39:52Z",
        "updatedAt" : "2015-11-12T00:34:03Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e71f43de930c15c78c71c454836424ddf2829d42",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +199,203 @@}\n\nfunc New(ctx api.Context, id string, pod *api.Pod) (*T, error) {\n\tkey, err := MakePodKey(ctx, pod.Name)\n\tif err != nil {"
  },
  {
    "id" : "62c99b4c-3313-403e-8be4-660f8ad1903a",
    "prId" : 15775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23437e70-1b67-4b09-ab73-9663bb474d3a",
        "parentId" : null,
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : ":+1: \n",
        "createdAt" : "2015-11-20T16:29:36Z",
        "updatedAt" : "2015-11-23T16:27:27Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9eae47c6e62d23b5329100aa5bdbe81457ce3e82",
    "line" : 188,
    "diffHunk" : "@@ -1,1 +180,184 @@\n\t\troles = filterRoles(roles, not(emptyRole), not(seenRole()))\n\t} else {\n\t\t// no roles label defined,\n\t\t// by convention return the first allowed role"
  },
  {
    "id" : "12528834-8635-4bcb-9351-0548816090a7",
    "prId" : 15775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3eec4b34-0b7d-43e1-9255-f51b28a60a80",
        "parentId" : null,
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "is it worth validating the input here? for example `roleA, roleB,,roleC` is probably not valid\n",
        "createdAt" : "2015-11-20T16:30:40Z",
        "updatedAt" : "2015-11-23T16:27:27Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      },
      {
        "id" : "cbaecefe-f99b-474f-bb7d-58f45a86aff0",
        "parentId" : "3eec4b34-0b7d-43e1-9255-f51b28a60a80",
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "from what I see in the unit tests, it looks like filterRoles does this type of cleanup\n",
        "createdAt" : "2015-11-20T17:15:01Z",
        "updatedAt" : "2015-11-23T16:27:27Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      },
      {
        "id" : "8ec3bd3a-475f-4db1-a8c9-a75cd1c03e5c",
        "parentId" : "3eec4b34-0b7d-43e1-9255-f51b28a60a80",
        "authorId" : "39a87e74-3afd-4203-9f90-c761ddc10ff7",
        "body" : "more concretely the `not(emptyRole)` filters `roleA,,,,,,roleB` to `roleA,roleB`. I'll introduce a `trimmed` predicate, to make the `string.TrimSpace` to be also part of the filter.\n",
        "createdAt" : "2015-11-23T10:14:12Z",
        "updatedAt" : "2015-11-23T16:27:27Z",
        "lastEditedBy" : "39a87e74-3afd-4203-9f90-c761ddc10ff7",
        "tags" : [
        ]
      },
      {
        "id" : "4712826d-61a3-44a4-92de-8557d9619ddb",
        "parentId" : "3eec4b34-0b7d-43e1-9255-f51b28a60a80",
        "authorId" : "39a87e74-3afd-4203-9f90-c761ddc10ff7",
        "body" : "Oh ... I can't introduce a `trimmed` ... it's a predicate ;-)\n",
        "createdAt" : "2015-11-23T10:15:06Z",
        "updatedAt" : "2015-11-23T16:27:27Z",
        "lastEditedBy" : "39a87e74-3afd-4203-9f90-c761ddc10ff7",
        "tags" : [
        ]
      }
    ],
    "commit" : "9eae47c6e62d23b5329100aa5bdbe81457ce3e82",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +173,177 @@\n\tif r, ok := t.Pod.ObjectMeta.Labels[annotation.RolesKey]; ok {\n\t\troles = strings.Split(r, \",\")\n\n\t\tfor i, r := range roles {"
  },
  {
    "id" : "f6c41e84-28d7-484c-a800-4756ffda7ff6",
    "prId" : 15775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76547d06-ca72-4a72-8ec2-6df3d6120b0e",
        "parentId" : null,
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "do we actually need this?\n",
        "createdAt" : "2015-11-20T17:12:29Z",
        "updatedAt" : "2015-11-23T16:27:27Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      },
      {
        "id" : "cfa03c80-3e40-4878-940b-9702dba35245",
        "parentId" : "76547d06-ca72-4a72-8ec2-6df3d6120b0e",
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "nevermind\n",
        "createdAt" : "2015-11-20T17:12:38Z",
        "updatedAt" : "2015-11-23T16:27:27Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      },
      {
        "id" : "ff9f6524-0a6a-4742-9bdd-b3c1e2b457c8",
        "parentId" : "76547d06-ca72-4a72-8ec2-6df3d6120b0e",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "We were actually discussing this. The Spec != nil means that the pod is scheduled. This can also be signaled with a simple flag.\n",
        "createdAt" : "2015-11-21T07:54:12Z",
        "updatedAt" : "2015-11-23T16:27:27Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "9eae47c6e62d23b5329100aa5bdbe81457ce3e82",
    "line" : 253,
    "diffHunk" : "@@ -1,1 +276,280 @@\t\tlaunchTime: now,\n\t\tbindTime:   now,\n\t\tSpec:       &Spec{},\n\t}\n\tvar ("
  },
  {
    "id" : "1d3780c5-6829-4175-8d29-0c24045ca9f3",
    "prId" : 8882,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec4a1437-9a79-4d6f-b6e0-3c0e4d918c57",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I don't understand - shouldn't this be the CPU requirement of the corresponding pod, rather than a hard-coded constant?\n",
        "createdAt" : "2015-06-07T09:24:53Z",
        "updatedAt" : "2015-06-11T13:48:08Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "a4c95f87-fa8f-405e-914a-9f2d7db78b0e",
        "parentId" : "ec4a1437-9a79-4d6f-b6e0-3c0e4d918c57",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Actually, never mind this comment. I see that you're using containerCpus and containerMem as defaults. What I actually don't understand is the caller, not this function. (See my comment where this function is called.)\n",
        "createdAt" : "2015-06-07T10:16:55Z",
        "updatedAt" : "2015-06-11T13:48:08Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6436c4a3bcd6756ebfd47679478fac700698ebb1",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +165,169 @@\tt.Spec = Spec{\n\t\tSlaveID: details.GetSlaveId().GetValue(),\n\t\tCPU:     containerCpus,\n\t\tMemory:  containerMem,\n\t}"
  },
  {
    "id" : "654a0177-4473-4f2e-97ae-e6b1597cb6bc",
    "prId" : 8882,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78041ac4-7dc3-45b7-bfcc-b0cbd89709af",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I don't understand - shouldn't this be the mem requirement of the corresponding pod, rather than a hard-coded constant?\n",
        "createdAt" : "2015-06-07T09:24:55Z",
        "updatedAt" : "2015-06-11T13:48:08Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "736611bc-6db0-46c2-b95b-35d2369c0561",
        "parentId" : "78041ac4-7dc3-45b7-bfcc-b0cbd89709af",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Actually, never mind this comment. I see that you're using containerCpus and containerMem as defaults. What I actually don't understand is the caller, not this function. (See my comment where this function is called.)\n",
        "createdAt" : "2015-06-07T10:17:06Z",
        "updatedAt" : "2015-06-11T13:48:08Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6436c4a3bcd6756ebfd47679478fac700698ebb1",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +166,170 @@\t\tSlaveID: details.GetSlaveId().GetValue(),\n\t\tCPU:     containerCpus,\n\t\tMemory:  containerMem,\n\t}\n"
  },
  {
    "id" : "4c0b0178-6167-4495-91df-d97cc492d682",
    "prId" : 8882,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fb1c463-b187-4f29-9439-ed9112261a49",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Should these be t.Spec.CPU and t.Spec.Memory, rather than containerCpus and containerMem? I may be misunderstanding, but it seems like you are using hard-coded constants as the pod's resource requirements when computing whether a task fits an offer. (But I'm also not sure where t.Spec.CPU and t.Spec.Memory get set to the values from the pod.)\n",
        "createdAt" : "2015-06-07T09:24:59Z",
        "updatedAt" : "2015-06-11T13:48:08Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "a8dcd32d-50ba-45cc-9f31-6cc193e8844b",
        "parentId" : "6fb1c463-b187-4f29-9439-ed9112261a49",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Thanks for adding the TODO. In a separate PR can you please add something to \nhttps://github.com/mesosphere/kubernetes-mesos/blob/master/docs/issues.md\nmentioning the two major differences between scheduling in k8sm and k8s that I'm aware of: resource-based scheduling and label selectors in pods (to constrain machine) don't work yet in k8sm. (Also add anything else you can think of).  Also, we really should upstream that whole documentation tree or at least provide a pointer from\nhttps://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/getting-started-guides/mesos.md\nto it.\n",
        "createdAt" : "2015-06-11T05:54:58Z",
        "updatedAt" : "2015-06-11T13:48:08Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6436c4a3bcd6756ebfd47679478fac700698ebb1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +239,243 @@\t//\n\t// TODO(jdef): remove hardcoded values and make use of actual pod resource settings\n\tif (cpus < containerCpus) || (mem < containerMem) {\n\t\tlog.V(3).Infof(\"not enough resources: cpus: %f mem: %f\", cpus, mem)\n\t\treturn false"
  }
]