[
  {
    "id" : "241374c2-74f1-4bc5-b8a9-33cf1360b4b8",
    "prId" : 17917,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c376d378-1455-4ecf-ae98-02ca30527eff",
        "parentId" : null,
        "authorId" : "39a87e74-3afd-4203-9f90-c761ddc10ff7",
        "body" : "documentation missing: what is `podObserver`, what are its semantics, what does it do?\n",
        "createdAt" : "2015-12-10T12:13:53Z",
        "updatedAt" : "2015-12-12T23:07:47Z",
        "lastEditedBy" : "39a87e74-3afd-4203-9f90-c761ddc10ff7",
        "tags" : [
        ]
      },
      {
        "id" : "97a62e3f-b000-4307-bca3-0bde035ef042",
        "parentId" : "c376d378-1455-4ecf-ae98-02ca30527eff",
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "ack\n",
        "createdAt" : "2015-12-10T14:45:37Z",
        "updatedAt" : "2015-12-12T23:07:47Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      }
    ],
    "commit" : "26593f1a6a16c15d0309200b12edf61f0968eda0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +33,37 @@// podObserver receives callbacks for every pod state change on the apiserver and\n// for each decides whether to execute a task update transaction.\ntype podObserver struct {\n\tpodController *framework.Controller\n\tterminate     <-chan struct{}"
  },
  {
    "id" : "7e5902a2-e94a-42ec-bd27-2709a4f95a7e",
    "prId" : 17917,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da781a36-6767-4c8d-ba95-fc04128ff096",
        "parentId" : null,
        "authorId" : "39a87e74-3afd-4203-9f90-c761ddc10ff7",
        "body" : "code is documented extensively but not the function.\n",
        "createdAt" : "2015-12-10T12:15:44Z",
        "updatedAt" : "2015-12-12T23:07:47Z",
        "lastEditedBy" : "39a87e74-3afd-4203-9f90-c761ddc10ff7",
        "tags" : [
        ]
      },
      {
        "id" : "eec2905b-773b-4eef-912f-28c5ced6b0c1",
        "parentId" : "da781a36-6767-4c8d-ba95-fc04128ff096",
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "ack\n",
        "createdAt" : "2015-12-11T05:48:26Z",
        "updatedAt" : "2015-12-12T23:07:47Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      }
    ],
    "commit" : "26593f1a6a16c15d0309200b12edf61f0968eda0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +76,80 @@// handleChangedApiserverPod is invoked for pod add/update state changes and decides whether\n// task updates are necessary. if so, a task update is executed via taskUpdateTx.\nfunc (p *podObserver) handleChangedApiserverPod(pod *api.Pod) {\n\t// Don't do anything for pods without task anotation which means:\n\t// - \"pre-scheduled\" pods which have a NodeName set to this node without being scheduled already."
  },
  {
    "id" : "05939c67-67ab-4732-8464-b73bec901d60",
    "prId" : 17917,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdc1435a-a67b-458d-a38b-d53df7858213",
        "parentId" : null,
        "authorId" : "39a87e74-3afd-4203-9f90-c761ddc10ff7",
        "body" : "documentation: run does what exactly? does it block?\n",
        "createdAt" : "2015-12-10T12:16:08Z",
        "updatedAt" : "2015-12-12T23:07:47Z",
        "lastEditedBy" : "39a87e74-3afd-4203-9f90-c761ddc10ff7",
        "tags" : [
        ]
      },
      {
        "id" : "79df1559-18f2-47e3-a0c1-0c5e128ef781",
        "parentId" : "cdc1435a-a67b-458d-a38b-d53df7858213",
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "ack\n",
        "createdAt" : "2015-12-11T05:48:21Z",
        "updatedAt" : "2015-12-12T23:07:47Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      }
    ],
    "commit" : "26593f1a6a16c15d0309200b12edf61f0968eda0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +70,74 @@\n// run begins observing pod state changes; blocks until the terminate chan closes.\nfunc (p *podObserver) run() {\n\tp.podController.Run(p.terminate)\n}"
  },
  {
    "id" : "9e6f0f7a-7320-415f-b2dc-97e21b0a7d4f",
    "prId" : 17917,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "153a4300-cab1-42ea-8eec-77cba96b081b",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "s/updateMetaMap/updateMap/\n",
        "createdAt" : "2015-12-10T12:25:25Z",
        "updatedAt" : "2015-12-12T23:07:47Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "6e0c27c5-8c70-42c7-832a-a18c701b7160",
        "parentId" : "153a4300-cab1-42ea-8eec-77cba96b081b",
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "nope. updateMap is much too vague -- I don't intend for anyone to use for this func for generic maps .. it's specifically for updating maps of api.ObjectMeta. will add docs\n",
        "createdAt" : "2015-12-10T14:49:34Z",
        "updatedAt" : "2015-12-12T23:07:47Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      }
    ],
    "commit" : "26593f1a6a16c15d0309200b12edf61f0968eda0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +133,137 @@// updateMetaMap looks for differences between src and dest; if there are differences\n// then dest is changed (possibly to point to src) and this func returns true.\nfunc updateMetaMap(dest *map[string]string, src map[string]string) (changed bool) {\n\t// check for things in dest that are missing in src\n\tfor k := range *dest {"
  }
]