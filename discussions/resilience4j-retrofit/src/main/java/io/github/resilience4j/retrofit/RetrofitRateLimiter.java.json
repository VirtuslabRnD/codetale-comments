[
  {
    "id" : "f2f049c3-cf1e-4700-a4dc-2549767dcab1",
    "prId" : 98,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/98#pullrequestreview-31821415",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ccb2676-c8ec-435f-b3fb-a2255452f01f",
        "parentId" : null,
        "authorId" : "39b6d0e8-2d9c-4cea-a431-aae46358f338",
        "body" : "Is this an idiomatic way of using Javaslang's Try @RobWin?",
        "createdAt" : "2017-04-09T20:34:55Z",
        "updatedAt" : "2017-04-10T20:50:25Z",
        "lastEditedBy" : "39b6d0e8-2d9c-4cea-a431-aae46358f338",
        "tags" : [
        ]
      },
      {
        "id" : "fa35d627-539e-48c1-9adf-3a795fe95296",
        "parentId" : "7ccb2676-c8ec-435f-b3fb-a2255452f01f",
        "authorId" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "body" : "Can you use Try.of(restrictedSupplier).recover(ex -> tooManyRequestsError()).get() ?",
        "createdAt" : "2017-04-10T05:24:56Z",
        "updatedAt" : "2017-04-10T20:50:25Z",
        "lastEditedBy" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "tags" : [
        ]
      },
      {
        "id" : "7fbdcb2c-8efe-426e-8e3a-037a0ed17df0",
        "parentId" : "7ccb2676-c8ec-435f-b3fb-a2255452f01f",
        "authorId" : "39b6d0e8-2d9c-4cea-a431-aae46358f338",
        "body" : "I have updated the code to the following as I didn't want all calls that throw exceptions to look like they've been rate limited.\r\n\r\n```\r\npublic Response<T> execute() throws IOException {\r\n                final Try.CheckedSupplier<Response<T>> restrictedSupplier = RateLimiter.decorateCheckedSupplier(rateLimiter, call::execute);\r\n                return Try.of(restrictedSupplier)\r\n                        .recover(ex -> Match(ex).of(\r\n                                Case(instanceOf(RequestNotPermitted.class), tooManyRequestsError()),\r\n                                Case(instanceOf(IllegalStateException.class), tooManyRequestsError()))\r\n                        ).get();\r\n            }\r\n```\r\nHowever, Try seems to want to always swallow the exceptions and return some Response<T>.  I really only want to consume the `RequestNotPermitted` and perhaps `IllegalStateException` exceptions so as not to change the interface for `Call` in decorating.  \r\n\r\nThe code above will give a MatchError on the a IOException from Call.execute - I would like to re-throw on the \"else\" match if possible.  Is there any way of doing this?\r\n",
        "createdAt" : "2017-04-10T07:14:26Z",
        "updatedAt" : "2017-04-10T20:50:25Z",
        "lastEditedBy" : "39b6d0e8-2d9c-4cea-a431-aae46358f338",
        "tags" : [
        ]
      },
      {
        "id" : "fe9bd98b-eb3f-4072-a74f-97a8c3821bbc",
        "parentId" : "7ccb2676-c8ec-435f-b3fb-a2255452f01f",
        "authorId" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "body" : "Yes, Try might not be a good match for this type of use case. Might be simpler if you just use an imperative style.",
        "createdAt" : "2017-04-10T11:58:37Z",
        "updatedAt" : "2017-04-10T20:50:25Z",
        "lastEditedBy" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "tags" : [
        ]
      }
    ],
    "commit" : "515883091abaa4cce8d25c135b0cd69e83fb1647",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +58,62 @@            @Override\n            public Response<T> execute() throws IOException {\n                Try.CheckedSupplier<Response<T>> restrictedSupplier = RateLimiter.decorateCheckedSupplier(rateLimiter, call::execute);\n                final Try<Response<T>> response = Try.of(restrictedSupplier);\n                return response.isSuccess() ? response.get() : handleFailure(response);"
  }
]