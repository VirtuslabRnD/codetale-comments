[
  {
    "id" : "fbeffab3-0009-4d01-8dd9-54ef242c81b8",
    "prId" : 3750,
    "prUrl" : "https://github.com/typelevel/cats/pull/3750#pullrequestreview-582098123",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58b1e9c3-14a0-4776-ab4a-d7a4a9329c98",
        "parentId" : null,
        "authorId" : "9ef0156b-afd7-4f35-80a6-bb89d6331b7c",
        "body" : "We don't need this anymore, do we? I wonder why this split was in here in the first place; maybe @djspiewak can tell.",
        "createdAt" : "2021-02-01T20:53:25Z",
        "updatedAt" : "2021-02-03T08:13:13Z",
        "lastEditedBy" : "9ef0156b-afd7-4f35-80a6-bb89d6331b7c",
        "tags" : [
        ]
      },
      {
        "id" : "27500520-c5ef-4275-9d06-ed00ed16f3fb",
        "parentId" : "58b1e9c3-14a0-4776-ab4a-d7a4a9329c98",
        "authorId" : "da489d84-8c33-4be5-9a92-0b67dbc76436",
        "body" : "> We don't need this anymore, do we? I wonder why this split was in here in the first place; maybe @djspiewak can tell.\r\n\r\nIt isn't used anywhere anymore. Can remove.",
        "createdAt" : "2021-02-01T21:39:33Z",
        "updatedAt" : "2021-02-03T08:13:13Z",
        "lastEditedBy" : "da489d84-8c33-4be5-9a92-0b67dbc76436",
        "tags" : [
        ]
      },
      {
        "id" : "61588b9a-96f3-4899-a62c-72c391dd2887",
        "parentId" : "58b1e9c3-14a0-4776-ab4a-d7a4a9329c98",
        "authorId" : "da489d84-8c33-4be5-9a92-0b67dbc76436",
        "body" : "Actually just looking at the build again there are a couple of spots `Scala2Cond` is used as a condition. `Scala3Cond`, not anymore.",
        "createdAt" : "2021-02-01T21:56:28Z",
        "updatedAt" : "2021-02-03T08:13:13Z",
        "lastEditedBy" : "da489d84-8c33-4be5-9a92-0b67dbc76436",
        "tags" : [
        ]
      },
      {
        "id" : "33af2dfb-0cdf-43eb-a755-1cfebf583b9d",
        "parentId" : "58b1e9c3-14a0-4776-ab4a-d7a4a9329c98",
        "authorId" : "da489d84-8c33-4be5-9a92-0b67dbc76436",
        "body" : "Reverted to original setup. Can make a separate pull request for build specific changes.",
        "createdAt" : "2021-02-03T08:14:49Z",
        "updatedAt" : "2021-02-03T08:14:49Z",
        "lastEditedBy" : "da489d84-8c33-4be5-9a92-0b67dbc76436",
        "tags" : [
        ]
      }
    ],
    "commit" : "2fc45049d00ed1b2599a7a1b44526af1e5c980c4",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +70,74 @@\nval Scala2Cond = s\"(matrix.scala != '$DottyOld' && matrix.scala != '$DottyNew')\"\nval Scala3Cond = s\"(matrix.scala == '$DottyOld' || matrix.scala == '$DottyNew')\"\n\nThisBuild / githubWorkflowBuild := Seq("
  },
  {
    "id" : "6cb58a8e-da80-4d57-b956-5907dedfc158",
    "prId" : 3538,
    "prUrl" : "https://github.com/typelevel/cats/pull/3538#pullrequestreview-457621173",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f12c31f1-36d6-4720-993d-47782304097c",
        "parentId" : null,
        "authorId" : "9ef0156b-afd7-4f35-80a6-bb89d6331b7c",
        "body" : "Why is this change necessary?",
        "createdAt" : "2020-07-29T14:55:49Z",
        "updatedAt" : "2020-07-30T03:32:24Z",
        "lastEditedBy" : "9ef0156b-afd7-4f35-80a6-bb89d6331b7c",
        "tags" : [
        ]
      },
      {
        "id" : "5c395074-c9e9-4f19-8a5b-7a4b83261e93",
        "parentId" : "f12c31f1-36d6-4720-993d-47782304097c",
        "authorId" : "240add12-1fe5-499a-918c-053b1f46b348",
        "body" : "I honestly don't know, but the error message I got when running the tests without it pointed me to this. :smile:",
        "createdAt" : "2020-07-29T15:10:34Z",
        "updatedAt" : "2020-07-30T03:32:24Z",
        "lastEditedBy" : "240add12-1fe5-499a-918c-053b1f46b348",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b51b2961d15d492b828b8f7cdc2a797c4ba5c47",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +128,132 @@  // batch mode decreases the amount of memory needed to compile Scala.js code\n  scalaJSLinkerConfig := scalaJSLinkerConfig.value.withBatchMode(isTravisBuild.value),\n  scalaJSLinkerConfig ~= (_.withModuleKind(ModuleKind.CommonJSModule)),\n  // currently sbt-doctest doesn't work in JS builds\n  // https://github.com/tkawachi/sbt-doctest/issues/52"
  },
  {
    "id" : "30c68a17-8f58-4a79-8b03-4682e57a57cf",
    "prId" : 3486,
    "prUrl" : "https://github.com/typelevel/cats/pull/3486#pullrequestreview-434188062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8450bda8-c060-496e-b026-c23472f372ec",
        "parentId" : null,
        "authorId" : "9e8a6a6c-6f4e-49b4-ab87-ee2c5ced7e78",
        "body" : "Does this have to be in the *runtime* classpath?",
        "createdAt" : "2020-06-19T14:16:46Z",
        "updatedAt" : "2020-06-19T14:21:47Z",
        "lastEditedBy" : "9e8a6a6c-6f4e-49b4-ab87-ee2c5ced7e78",
        "tags" : [
        ]
      },
      {
        "id" : "0c89726e-a15b-4a13-bddb-fa1b21b75efc",
        "parentId" : "8450bda8-c060-496e-b026-c23472f372ec",
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "Hmm, this isn't new to this PR, but it's a good point—I'll change this to `Provided` before 2.2.0, and make sure that we're doing the same thing with Simulacrum Scalafix as we were with Simulacrum (the macro annotation version) in this respect. But I think that should be a follow-up. ",
        "createdAt" : "2020-06-19T16:00:55Z",
        "updatedAt" : "2020-06-19T16:00:56Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      }
    ],
    "commit" : "232cb8d5d76796747365c3c24621733bfd632109",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +92,96 @@  ),\n  libraryDependencies +=\n    (\"org.typelevel\" %% \"simulacrum-scalafix-annotations\" % \"0.5.0\").withDottyCompat(scalaVersion.value),\n  pomPostProcess := { (node: xml.Node) =>\n    new RuleTransformer(new RewriteRule {"
  },
  {
    "id" : "79795fa4-deb9-47d1-993e-3a0fedb4b814",
    "prId" : 3486,
    "prUrl" : "https://github.com/typelevel/cats/pull/3486#pullrequestreview-434194576",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f86502e-79e0-496e-a577-3929f09f760d",
        "parentId" : null,
        "authorId" : "9e8a6a6c-6f4e-49b4-ab87-ee2c5ced7e78",
        "body" : "I'm *tentatively* okay with merging this as-is, but only if we follow up on discipline-scalatest asap to update its dependency. Exclusion rules in published dependencies are dangerous on several levels.",
        "createdAt" : "2020-06-19T14:18:25Z",
        "updatedAt" : "2020-06-19T14:21:47Z",
        "lastEditedBy" : "9e8a6a6c-6f4e-49b4-ab87-ee2c5ced7e78",
        "tags" : [
        ]
      },
      {
        "id" : "7298cd17-88f3-44b6-ab7b-950ceb5b9878",
        "parentId" : "2f86502e-79e0-496e-a577-3929f09f760d",
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "What do you think about changing the exclusion to only apply for Dotty (which we’re not currently publishing anyway)? I think it’s likely I’ll be the one publishing discipline-scalatest, and I don’t really want to start doing that for every Dotty release since it’s just a test dependency.",
        "createdAt" : "2020-06-19T15:38:11Z",
        "updatedAt" : "2020-06-19T15:38:12Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      },
      {
        "id" : "64569b62-4b23-4976-98c6-5cdaa9bbce6e",
        "parentId" : "2f86502e-79e0-496e-a577-3929f09f760d",
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "@djspiewak Oh, nevermind, I forgot that this is only a test dependency (and that's configured here, so there's no danger of them accidentally missing an `% Test` at the use site), so I don't see any problem with keeping the exclusions as they are now.",
        "createdAt" : "2020-06-19T15:56:13Z",
        "updatedAt" : "2020-06-19T15:56:14Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      },
      {
        "id" : "acabc508-69d8-4db7-8aed-d2603da267c1",
        "parentId" : "2f86502e-79e0-496e-a577-3929f09f760d",
        "authorId" : "9e8a6a6c-6f4e-49b4-ab87-ee2c5ced7e78",
        "body" : "Ah if it's only a test dependency then I'm okay with it for now.",
        "createdAt" : "2020-06-19T16:10:12Z",
        "updatedAt" : "2020-06-19T16:10:12Z",
        "lastEditedBy" : "9e8a6a6c-6f4e-49b4-ab87-ee2c5ced7e78",
        "tags" : [
        ]
      }
    ],
    "commit" : "232cb8d5d76796747365c3c24621733bfd632109",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +170,174 @@      .exclude(\"org.scalactic\", \"scalactic_2.13\")\n      .exclude(\"org.scalatest\", \"scalatest_2.13\")\n      .withDottyCompat(scalaVersion.value)\n  )\n)"
  },
  {
    "id" : "bec0d274-22f4-4383-81ac-b1c7ff1c9de9",
    "prId" : 3486,
    "prUrl" : "https://github.com/typelevel/cats/pull/3486#pullrequestreview-434185342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6295fd47-a9d8-417d-9ae6-15be03a05ab3",
        "parentId" : null,
        "authorId" : "9e8a6a6c-6f4e-49b4-ab87-ee2c5ced7e78",
        "body" : "As an fyi, the `isDotty` setting is computed by string matching on `scalaVersion`. Though, it's not exposed as such, so there may be no way we can take advantage of it.",
        "createdAt" : "2020-06-19T14:20:04Z",
        "updatedAt" : "2020-06-19T14:21:47Z",
        "lastEditedBy" : "9e8a6a6c-6f4e-49b4-ab87-ee2c5ced7e78",
        "tags" : [
        ]
      },
      {
        "id" : "e46759d8-6355-40bb-a8a9-87aa7941b4cd",
        "parentId" : "6295fd47-a9d8-417d-9ae6-15be03a05ab3",
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "Right, I just thought this was clearer than trying to figure out and replicate whatever logic sbt-dotty uses for `isDotty`, but I have no objection to using `.startsWith(\"0\")` or something similar instead.",
        "createdAt" : "2020-06-19T15:57:42Z",
        "updatedAt" : "2020-06-19T15:57:43Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      }
    ],
    "commit" : "232cb8d5d76796747365c3c24621733bfd632109",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +811,815 @@  }\n\ndef commonScalacOptions(scalaVersion: String, isDotty: Boolean) =\n  Seq(\n    \"-encoding\","
  },
  {
    "id" : "d47b4114-700d-461a-a1bb-49a992cd2743",
    "prId" : 3079,
    "prUrl" : "https://github.com/typelevel/cats/pull/3079#pullrequestreview-291526788",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55aaa429-b725-4e4f-86fe-caacc72c4ba9",
        "parentId" : null,
        "authorId" : "66a3e1fe-d02b-4e16-badc-4e9980e148af",
        "body" : "@larsrh Is this a workaround for the problem described in [#3026](https://github.com/typelevel/cats/pull/3026/commits/4ee38b22a2455c0a812b9bc86ef70e835744fcaa)? If yes, we could just bump sbt and deal with the MiMa update separately.",
        "createdAt" : "2019-09-22T17:38:27Z",
        "updatedAt" : "2019-09-23T19:44:54Z",
        "lastEditedBy" : "66a3e1fe-d02b-4e16-badc-4e9980e148af",
        "tags" : [
        ]
      },
      {
        "id" : "7c1875f2-4715-47d2-be94-7a1761936f3c",
        "parentId" : "55aaa429-b725-4e4f-86fe-caacc72c4ba9",
        "authorId" : "9ef0156b-afd7-4f35-80a6-bb89d6331b7c",
        "body" : "Ah, I somehow didn't see that PR. But I can try to incorporate it here.",
        "createdAt" : "2019-09-22T17:42:51Z",
        "updatedAt" : "2019-09-23T19:44:54Z",
        "lastEditedBy" : "9ef0156b-afd7-4f35-80a6-bb89d6331b7c",
        "tags" : [
        ]
      },
      {
        "id" : "135d5498-e2c7-47ec-9900-86711ee8584c",
        "parentId" : "55aaa429-b725-4e4f-86fe-caacc72c4ba9",
        "authorId" : "66a3e1fe-d02b-4e16-badc-4e9980e148af",
        "body" : "That isn't necessary. The only change I did there that is not in this PR, is a change we don't want to merge. :-) I just wanted to note that we could bump sbt separately with the `useCoursier := false` workaround.",
        "createdAt" : "2019-09-22T17:48:13Z",
        "updatedAt" : "2019-09-23T19:44:54Z",
        "lastEditedBy" : "66a3e1fe-d02b-4e16-badc-4e9980e148af",
        "tags" : [
        ]
      },
      {
        "id" : "24fa6700-0b81-4729-a25e-2006106cbed4",
        "parentId" : "55aaa429-b725-4e4f-86fe-caacc72c4ba9",
        "authorId" : "9ef0156b-afd7-4f35-80a6-bb89d6331b7c",
        "body" : "Wait, now I'm confused. Is this PR good to merge or should I change anything?",
        "createdAt" : "2019-09-22T17:52:22Z",
        "updatedAt" : "2019-09-23T19:44:54Z",
        "lastEditedBy" : "9ef0156b-afd7-4f35-80a6-bb89d6331b7c",
        "tags" : [
        ]
      },
      {
        "id" : "7203b18d-0298-4d27-b637-74dfbc0f2f55",
        "parentId" : "55aaa429-b725-4e4f-86fe-caacc72c4ba9",
        "authorId" : "9ef0156b-afd7-4f35-80a6-bb89d6331b7c",
        "body" : "Oh, btw, we can't bump sbt without also bumping MiMa (there's some binary breakage there).",
        "createdAt" : "2019-09-22T17:57:32Z",
        "updatedAt" : "2019-09-23T19:44:54Z",
        "lastEditedBy" : "9ef0156b-afd7-4f35-80a6-bb89d6331b7c",
        "tags" : [
        ]
      },
      {
        "id" : "9efbdcc5-65e3-4304-8308-2e2e95518393",
        "parentId" : "55aaa429-b725-4e4f-86fe-caacc72c4ba9",
        "authorId" : "66a3e1fe-d02b-4e16-badc-4e9980e148af",
        "body" : "Interesting, I didn't notice this in #3026.",
        "createdAt" : "2019-09-22T18:10:34Z",
        "updatedAt" : "2019-09-23T19:44:54Z",
        "lastEditedBy" : "66a3e1fe-d02b-4e16-badc-4e9980e148af",
        "tags" : [
        ]
      },
      {
        "id" : "ec16d38b-b389-4090-8e96-6068361340a8",
        "parentId" : "55aaa429-b725-4e4f-86fe-caacc72c4ba9",
        "authorId" : "9ef0156b-afd7-4f35-80a6-bb89d6331b7c",
        "body" : "Try bumping to 1.3.2. At least I thought that's what happened in another PR, but maybe I was mistaken :thinking: ",
        "createdAt" : "2019-09-22T18:12:24Z",
        "updatedAt" : "2019-09-23T19:44:54Z",
        "lastEditedBy" : "9ef0156b-afd7-4f35-80a6-bb89d6331b7c",
        "tags" : [
        ]
      },
      {
        "id" : "5081556a-7fa0-4b45-887c-80a1342ba7da",
        "parentId" : "55aaa429-b725-4e4f-86fe-caacc72c4ba9",
        "authorId" : "66a3e1fe-d02b-4e16-badc-4e9980e148af",
        "body" : "You're right. Bumping from 1.3.0 to 1.3.2 produced errors like this in the \"binary compatibility\" job:\r\n```\r\n(coreJVM / mimaReportBinaryIssues) java.lang.NoSuchMethodError: com.typesafe.tools.mima.core.Settings.allSettings()Lscala/collection/mutable/HashSet;\r\n```\r\n",
        "createdAt" : "2019-09-22T20:50:47Z",
        "updatedAt" : "2019-09-23T19:44:54Z",
        "lastEditedBy" : "66a3e1fe-d02b-4e16-badc-4e9980e148af",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3484a5afcec760efa99304f1bed08c9041e33e2",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +663,667 @@    // see https://github.com/typelevel/cats/pull/3079#discussion_r327181584\n    // see https://github.com/typelevel/cats/pull/3026#discussion_r321984342\n    useCoursier := false,\n    commonScalaVersionSettings,\n    addCompilerPlugin(\"org.typelevel\" %% \"kind-projector\" % kindProjectorVersion),"
  },
  {
    "id" : "28dcb347-195b-4d4a-bf51-4ba2563a6e25",
    "prId" : 3079,
    "prUrl" : "https://github.com/typelevel/cats/pull/3079#pullrequestreview-291864815",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f2a13a9-29ac-46ea-8cc3-ce55d35c620d",
        "parentId" : null,
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "Coursier was disabled because it seemed to me that it doesn't understand this setting:\r\n`dependsOn(core.jvm % Test)`\r\n\r\nI should've added a comment. Can we add one now? ",
        "createdAt" : "2019-09-23T15:28:43Z",
        "updatedAt" : "2019-09-23T19:44:54Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3484a5afcec760efa99304f1bed08c9041e33e2",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +663,667 @@    // see https://github.com/typelevel/cats/pull/3079#discussion_r327181584\n    // see https://github.com/typelevel/cats/pull/3026#discussion_r321984342\n    useCoursier := false,\n    commonScalaVersionSettings,\n    addCompilerPlugin(\"org.typelevel\" %% \"kind-projector\" % kindProjectorVersion),"
  },
  {
    "id" : "24633058-e018-4078-aaf7-52326d6c8927",
    "prId" : 2983,
    "prUrl" : "https://github.com/typelevel/cats/pull/2983#pullrequestreview-277100678",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59cbf512-ce8c-403f-a488-17916e244d8f",
        "parentId" : null,
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "This is necessary because we now have deprecation warnings for `Stream` on 2.13.",
        "createdAt" : "2019-08-20T11:31:25Z",
        "updatedAt" : "2019-08-22T07:17:11Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a1c3340dc0f84cbc1e1d7fce3c4dd034aa8c957",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +524,528 @@  .settings(disciplineDependencies)\n  .settings(testingDependencies)\n  .settings(scalacOptions in Test := (scalacOptions in Test).value.filter(_ != \"-Xfatal-warnings\"))\n  .jsSettings(commonJsSettings)\n  .jvmSettings(commonJvmSettings)"
  },
  {
    "id" : "27d2ef26-e41f-4e61-ac44-18aa8e9aa293",
    "prId" : 2771,
    "prUrl" : "https://github.com/typelevel/cats/pull/2771#pullrequestreview-221805875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90e504ab-663d-4b96-bd73-b3fe498c9646",
        "parentId" : null,
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "unfortunately, sbt doesn't seem to work when trying to fix to a scala version when running a command alias.\r\nI filed an issue https://github.com/sbt/sbt/issues/4599 \r\nby this change we no longer run `binCompatTest/test`, but I think it's rare that it's accidentally broken before PR. ",
        "createdAt" : "2019-04-02T17:41:27Z",
        "updatedAt" : "2019-04-02T17:41:27Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc315faa153fb7d9d30d62cc14927915604cb04e",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +766,770 @@addCommandAlias(\"validate\", \";clean;validateJS;validateKernelJS;validateFreeJS;validateJVM\")\n\naddCommandAlias(\"prePR\", \";fmt;++2.11.12 mimaReportBinaryIssues\")\n\n////////////////////////////////////////////////////////////////////////////////////////////////////"
  },
  {
    "id" : "12a9395e-c7fb-4607-a660-e51c18235706",
    "prId" : 2732,
    "prUrl" : "https://github.com/typelevel/cats/pull/2732#pullrequestreview-204503145",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab2d679d-b16f-4725-a7cd-e76c2d5cff09",
        "parentId" : null,
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "Is this a switch from running `validate` from the current version to all versions? If so, does this lead to OOMs or anything?",
        "createdAt" : "2019-02-15T20:02:00Z",
        "updatedAt" : "2019-02-18T04:27:12Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "870e17d7-0271-4b65-b0fa-a96d84122962",
        "parentId" : "ab2d679d-b16f-4725-a7cd-e76c2d5cff09",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "Not really. Before the validate is still run against all scala versions because the `crossScalaVersions` settings on the root module and the `releaseCrossBuild := true`. sbt release automatically runs certain steps on each modules against all `crossScalaVersions` set on the root module. Now, with the new sbt version , the `+validate` will performe on each aggregated module correctly on their own `crossScalaVersions`. The root module's `crossScalaVersions` should set as `Nil`, otherwise it will conflict with the aggregrated module's `crossScalaVersion`. \r\n",
        "createdAt" : "2019-02-16T03:29:52Z",
        "updatedAt" : "2019-02-18T04:27:12Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c73039a8acfbaf78edce5a0506053e032cf13af",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +824,828 @@    checkSnapshotDependencies,\n    inquireVersions,\n    releaseStepCommandAndRemaining(\"+validate\"),\n    setReleaseVersion,\n    commitReleaseVersion,"
  },
  {
    "id" : "0c8b9e14-57e7-4e48-b485-4244909956ab",
    "prId" : 2583,
    "prUrl" : "https://github.com/typelevel/cats/pull/2583#pullrequestreview-168634724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e98ed85f-319e-4e63-8788-45c989e30c4e",
        "parentId" : null,
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "I think that this is fine for now, but in the near future I'd like us to get to a branching setup where binary-incompatible changes are okay for the right branches or something.",
        "createdAt" : "2018-10-25T18:23:09Z",
        "updatedAt" : "2018-10-26T00:14:01Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "0af9eb00-e2c1-4059-b85f-ca495bfb6042",
        "parentId" : "e98ed85f-319e-4e63-8788-45c989e30c4e",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "@ceedubs yes. It's probably possible that validateBC would just mean different thing on different branch or something. ",
        "createdAt" : "2018-10-26T00:18:11Z",
        "updatedAt" : "2018-10-26T00:18:11Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      }
    ],
    "commit" : "73c6f21769654dbbdcd6a76ce232896a26d007aa",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +698,702 @@addCommandAlias(\"validate\", \";clean;validateJS;validateKernelJS;validateFreeJS;validateJVM\")\n\naddCommandAlias(\"prePR\", \";fmt;validateBC\")\n\n////////////////////////////////////////////////////////////////////////////////////////////////////"
  },
  {
    "id" : "79a80516-68d5-4383-9cf1-142e4c15fde2",
    "prId" : 2568,
    "prUrl" : "https://github.com/typelevel/cats/pull/2568#pullrequestreview-166754491",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22d558b2-87dc-4745-b95b-eeca4f0f3ce8",
        "parentId" : null,
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "6GB is the max that our Travis instances have, right? We probably need to leave a little extra memory room for non-Java heap memory consumption on the instance, don't we?",
        "createdAt" : "2018-10-20T16:27:14Z",
        "updatedAt" : "2018-10-20T16:27:14Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "1dd0d813626f8f6e41093b3c678f6348eff9ece8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +35,39 @@  resolvers ++= Seq(Resolver.sonatypeRepo(\"releases\"), Resolver.sonatypeRepo(\"snapshots\")),\n  fork in test := true,\n  test / javaOptions := Seq(\"-Xmx6G\"),\n  parallelExecution in Test := false,\n  scalacOptions in (Compile, doc) := (scalacOptions in (Compile, doc)).value.filter(_ != \"-Xfatal-warnings\"),"
  },
  {
    "id" : "999aed8a-ec57-4c44-9a14-aaecac53e35a",
    "prId" : 2534,
    "prUrl" : "https://github.com/typelevel/cats/pull/2534#pullrequestreview-159194857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09001a47-4eac-4028-83d1-3cba51b8fbd9",
        "parentId" : null,
        "authorId" : "9ef0156b-afd7-4f35-80a6-bb89d6331b7c",
        "body" : "I didn't realize that the approach in #2509 would require a `publishLocal` first. This here may be simpler.",
        "createdAt" : "2018-09-26T20:19:40Z",
        "updatedAt" : "2018-09-26T20:57:52Z",
        "lastEditedBy" : "9ef0156b-afd7-4f35-80a6-bb89d6331b7c",
        "tags" : [
        ]
      },
      {
        "id" : "a790cabf-d760-4551-b00f-dd26aab8c822",
        "parentId" : "09001a47-4eac-4028-83d1-3cba51b8fbd9",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "right. I was testing against existing published jars, didn't realize that I can just do module dependency. ",
        "createdAt" : "2018-09-26T20:55:44Z",
        "updatedAt" : "2018-09-26T20:58:44Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8871228466d3bd5f85e101eb54b77e484c6a0e31",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +526,530 @@    )\n  )\n  .dependsOn(coreJVM % Test)\n\n"
  },
  {
    "id" : "fb16b040-1754-4717-b4c9-4402f8f02a5a",
    "prId" : 2509,
    "prUrl" : "https://github.com/typelevel/cats/pull/2509#pullrequestreview-156053677",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c85634ac-823d-4f64-9efb-d9bbbdc82de0",
        "parentId" : null,
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "~Note for @rossabaker , no need to read these changes regarding change to mimaPreviousArtifacts change. For now I'm not using them and hard coded the two cats versions to test binary compat (1.2.0 and 1.3.0)~\r\n\r\nUpdate: No longer relevant. ",
        "createdAt" : "2018-09-17T18:15:21Z",
        "updatedAt" : "2018-09-26T14:41:20Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd87dc320d5d68d48acfe958e2737a3411d0fdd7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +217,221 @@)\n\ndef mimaPrevious(moduleName: String, scalaVer: String, ver: String): List[ModuleID] = {\n  import sbtrelease.Version\n"
  },
  {
    "id" : "04d78845-bea9-406a-8c7e-d633e7ff73cc",
    "prId" : 2335,
    "prUrl" : "https://github.com/typelevel/cats/pull/2335#pullrequestreview-143106548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e78073e-95dd-4e4c-9667-88adfc74f103",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "This would be a good option to add to mima: ignore changes when the or trait is sealed.",
        "createdAt" : "2018-07-28T18:35:39Z",
        "updatedAt" : "2018-07-30T19:08:50Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "adcfcf8f-31cf-4154-8a05-1257686e2dbf",
        "parentId" : "0e78073e-95dd-4e4c-9667-88adfc74f103",
        "authorId" : "2d030743-7a25-4910-96f6-b7e298029260",
        "body" : "I created a placeholder issue at the mima repo, but it needs fleshing out to become actionable. https://github.com/lightbend/migration-manager/issues/237",
        "createdAt" : "2018-08-03T09:06:56Z",
        "updatedAt" : "2018-08-03T09:06:57Z",
        "lastEditedBy" : "2d030743-7a25-4910-96f6-b7e298029260",
        "tags" : [
        ]
      }
    ],
    "commit" : "228bbe1666a232cb6dc0b56f92629881b0e14632",
    "line" : 160,
    "diffHunk" : "@@ -1,1 +257,261 @@      import com.typesafe.tools.mima.core._\n      import com.typesafe.tools.mima.core.ProblemFilters._\n      //Only sealed abstract classes that provide implicit instances to companion objects are allowed here, since they don't affect usage outside of the file.\n      Seq(\n        exclude[DirectMissingMethodProblem](\"cats.data.OptionTInstances.catsDataMonadForOptionT\"),"
  },
  {
    "id" : "a0432aa7-85ea-418f-9ae1-2dd42600761d",
    "prId" : 1745,
    "prUrl" : "https://github.com/typelevel/cats/pull/1745#pullrequestreview-46568070",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7705568-2aa3-40db-abb3-2b6e8b7c7594",
        "parentId" : null,
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "old one is deprecated. ",
        "createdAt" : "2017-06-27T14:35:28Z",
        "updatedAt" : "2017-06-27T17:40:57Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      }
    ],
    "commit" : "9656199a5b229441ab96cdcd12fbe1d4617db39b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +68,72 @@  parallelExecution := false,\n  requiresDOM := false,\n  jsEnv := new org.scalajs.jsenv.nodejs.NodeJSEnv(),\n  // Only used for scala.js for now\n  botBuild := scala.sys.env.get(\"TRAVIS\").isDefined,"
  },
  {
    "id" : "d7233c9d-e3d9-414b-b84a-e85267c0d267",
    "prId" : 1632,
    "prUrl" : "https://github.com/typelevel/cats/pull/1632#pullrequestreview-35923314",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcbb9d7b-f2c6-42b7-b7ea-d6974d1301f5",
        "parentId" : null,
        "authorId" : "f22f17d6-aae1-4a27-984e-5a21e5c8be21",
        "body" : "What’s the motivation for this?\r\n\r\nI guess in 2.11, `unused` wasn’t part of `lint`, but is there a particular problem with it (asking because I’m in the process of enabling it on all my projects!)",
        "createdAt" : "2017-04-25T02:04:42Z",
        "updatedAt" : "2017-05-09T19:44:29Z",
        "lastEditedBy" : "f22f17d6-aae1-4a27-984e-5a21e5c8be21",
        "tags" : [
        ]
      },
      {
        "id" : "155d1249-5c13-4a71-b051-e66bcafb2e56",
        "parentId" : "fcbb9d7b-f2c6-42b7-b7ea-d6974d1301f5",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "This now warns on unused parameters, vals and implicits according to `scalac -xlint:help`",
        "createdAt" : "2017-04-25T03:06:57Z",
        "updatedAt" : "2017-05-09T19:44:29Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "c4f3f24c-0040-4871-b741-4eb0ac36a9cf",
        "parentId" : "fcbb9d7b-f2c6-42b7-b7ea-d6974d1301f5",
        "authorId" : "f22f17d6-aae1-4a27-984e-5a21e5c8be21",
        "body" : "Right, but that sounds like a good thing to me. Where does that cause problems?",
        "createdAt" : "2017-04-25T04:55:19Z",
        "updatedAt" : "2017-05-09T19:44:29Z",
        "lastEditedBy" : "f22f17d6-aae1-4a27-984e-5a21e5c8be21",
        "tags" : [
        ]
      },
      {
        "id" : "f0937adf-5dff-4dec-a9ef-3825f70fca0b",
        "parentId" : "fcbb9d7b-f2c6-42b7-b7ea-d6974d1301f5",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "I got quite a few seemingly related to simulacrum:\r\n>[error] /home/travis/build/typelevel/cats/core/src/main/scala/cats/Apply.scala:10: parameter value ev$macro$3 in method ap is never used\r\n[error] @typeclass(excludeParents = List(\"ApplyArityFunctions\"))\r\n\r\nAnd implicit evidence that are not \"in use\" like \r\n> [error] /home/travis/build/typelevel/cats/core/src/main/scala/cats/data/Validated.scala:421: parameter value NT in method apply is never used\r\n[error]     def apply[A](f: => A)(implicit T: ClassTag[T], NT: NotNull[T]): Validated[T, A] =",
        "createdAt" : "2017-04-25T13:54:39Z",
        "updatedAt" : "2017-05-09T19:44:29Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      },
      {
        "id" : "ca394cfd-0368-4bac-9c4e-36f25487a33d",
        "parentId" : "fcbb9d7b-f2c6-42b7-b7ea-d6974d1301f5",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "Ah I see. We have some evidence parameters that we don't directly use.\r\n\r\nThere's some related discussion [here](https://github.com/scala/scala/pull/5402#issuecomment-295261637). It sounds like scala doesn't offer great options for selectively ignoring these. Unless someone sees a better option, I'm fine with this change coming in as-is.",
        "createdAt" : "2017-04-28T13:23:38Z",
        "updatedAt" : "2017-05-09T19:44:29Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "b1e8ca30-7835-4213-b25a-3c9e7ac60acd",
        "parentId" : "fcbb9d7b-f2c6-42b7-b7ea-d6974d1301f5",
        "authorId" : "f94caf4c-b5e8-4029-84ca-0fca5b9efcd8",
        "body" : "@kailuowang @ceedubs perhaps we should keep an eye on [this PR](https://github.com/scala/scala/pull/5876) as it might help with Simulacrum-related warnings",
        "createdAt" : "2017-05-02T21:39:10Z",
        "updatedAt" : "2017-05-09T19:44:29Z",
        "lastEditedBy" : "f94caf4c-b5e8-4029-84ca-0fca5b9efcd8",
        "tags" : [
        ]
      },
      {
        "id" : "462ba19b-81ac-44bd-9859-b4c7e9b2549f",
        "parentId" : "fcbb9d7b-f2c6-42b7-b7ea-d6974d1301f5",
        "authorId" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "body" : "that's good to know. Thanks @DavidGregory084 ",
        "createdAt" : "2017-05-03T00:32:39Z",
        "updatedAt" : "2017-05-09T19:44:29Z",
        "lastEditedBy" : "6b760ef7-e448-44a7-b744-0c25c840a80a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f75cb017e0dd993a09d1b3da52472947350fecc3",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +578,582 @@  scalacOptions += {\n    CrossVersion.partialVersion(scalaVersion.value) match {\n      case Some((2, 12)) => \"-Xlint:-unused,_\"\n      case _ => \"-Xlint\"\n    }"
  },
  {
    "id" : "84154458-5734-462f-9e5c-21bab4f205ea",
    "prId" : 1426,
    "prUrl" : "https://github.com/typelevel/cats/pull/1426#pullrequestreview-5704099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1421351-d19c-4bd4-b1ae-e401e1338f49",
        "parentId" : null,
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "Any reason \"Free\" is capitalized here (unlike the others)?\n",
        "createdAt" : "2016-10-25T17:40:50Z",
        "updatedAt" : "2016-10-25T17:41:09Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      },
      {
        "id" : "c933901e-7430-4460-b45f-5476230e19dc",
        "parentId" : "a1421351-d19c-4bd4-b1ae-e401e1338f49",
        "authorId" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "body" : "I just did it because it was named after the Free monad which I usually see capitalized. I can make it lower case if folks prefer that.\n",
        "createdAt" : "2016-10-25T17:42:30Z",
        "updatedAt" : "2016-10-25T17:42:30Z",
        "lastEditedBy" : "4aafd631-794d-4704-aeda-a6c56ce667d1",
        "tags" : [
        ]
      },
      {
        "id" : "436262c6-a688-435f-b698-ac57b910b876",
        "parentId" : "a1421351-d19c-4bd4-b1ae-e401e1338f49",
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "Fair enough. I don't have a strong opinion either way (but would prefer lowercase).\n",
        "createdAt" : "2016-10-25T17:43:43Z",
        "updatedAt" : "2016-10-25T17:43:43Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      }
    ],
    "commit" : "4522b6117574d24c41ce870a72ffc8257afd2e67",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +275,279 @@lazy val free = crossProject.crossType(CrossType.Pure)\n  .dependsOn(macros, core, tests % \"test-internal -> test\")\n  .settings(moduleName := \"cats-free\", name := \"Cats Free\")\n  .settings(catsSettings:_*)\n  .jsSettings(commonJsSettings:_*)"
  },
  {
    "id" : "f0240ddf-eae3-4c67-9350-99447674d2be",
    "prId" : 1001,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32023556-202c-4d5a-92ab-2dc201eb7dc9",
        "parentId" : null,
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "Should `catalysts-platform` have a `% \"test\"` modifier?\n",
        "createdAt" : "2016-04-26T11:23:59Z",
        "updatedAt" : "2016-04-29T14:15:30Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "d158fadf-b435-446f-aa14-363d196e974f",
        "parentId" : "32023556-202c-4d5a-92ab-2dc201eb7dc9",
        "authorId" : "89a3e0e3-e301-4aa8-b150-74070eb5a619",
        "body" : "I think not, since we are checking the platform in the law testing code that we are publishing.\n",
        "createdAt" : "2016-04-26T14:04:06Z",
        "updatedAt" : "2016-04-29T14:15:30Z",
        "lastEditedBy" : "89a3e0e3-e301-4aa8-b150-74070eb5a619",
        "tags" : [
        ]
      },
      {
        "id" : "9443138c-80b1-4bef-b5c8-24c847523229",
        "parentId" : "32023556-202c-4d5a-92ab-2dc201eb7dc9",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "Ah I didn't realize this was only being included in laws/tests. 👍\n",
        "createdAt" : "2016-04-26T16:04:57Z",
        "updatedAt" : "2016-04-29T14:15:30Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "aac4652a20795153fea3101752904b2366206dea",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +92,96 @@\nlazy val testingDependencies = Seq(\n  libraryDependencies += \"org.typelevel\" %%% \"catalysts-platform\" % \"0.0.2\",\n  libraryDependencies += \"org.typelevel\" %%% \"catalysts-macros\" % \"0.0.2\" % \"test\",\n  libraryDependencies += \"org.scalatest\" %%% \"scalatest\" % \"3.0.0-M7\" % \"test\")"
  },
  {
    "id" : "fe70251e-78ac-456f-a58d-412c4e3d71ed",
    "prId" : 806,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8cedb98-b6a1-4637-9139-b1e5bb58ed10",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "can this be compile only? I guess not or you would have done so.\n",
        "createdAt" : "2016-01-14T22:01:14Z",
        "updatedAt" : "2016-01-29T14:01:56Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "1c250f31-cd3e-4cc1-ab27-c02e4a87d9c7",
        "parentId" : "f8cedb98-b6a1-4637-9139-b1e5bb58ed10",
        "authorId" : "879af59d-98d6-4c7a-8a00-119c66fde9ee",
        "body" : "Note that machinistDependencies are only used in cats-core, not in cats-kernel. I don't know if this can be compile-only, but I did not want to mess with things other than cats-kernel for this PR.\n\ncats-kernel does not have a dep on machinist for now. See pom.\n",
        "createdAt" : "2016-01-14T22:23:51Z",
        "updatedAt" : "2016-01-29T14:01:56Z",
        "lastEditedBy" : "879af59d-98d6-4c7a-8a00-119c66fde9ee",
        "tags" : [
        ]
      },
      {
        "id" : "ce9b4f22-2fa0-4813-9218-069d04a902b3",
        "parentId" : "f8cedb98-b6a1-4637-9139-b1e5bb58ed10",
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "Ahh yes. Sorry. LGTM.\n\nOn Thu, Jan 14, 2016 at 2:23 PM, Rüdiger Klaehn notifications@github.com\nwrote:\n\n> In build.sbt https://github.com/non/cats/pull/806#discussion_r49794859:\n> \n> > @@ -43,6 +44,10 @@ lazy val commonSettings = Seq(\n> >    scalacOptions in (Compile, doc) := (scalacOptions in (Compile, doc)).value.filter(_ != \"-Xfatal-warnings\")\n> >  ) ++ warnUnusedImport\n> > \n> > +lazy val machinistDependencies = Seq(\n> > -  libraryDependencies += \"org.typelevel\" %%% \"machinist\" % \"0.4.1\"\n> \n> Note that machinistDependencies are only used in cats-core, not in\n> cats-kernel. I don't know if this can be compile-only, but I did not want\n> to mess with things other than cats-kernel for this PR.\n> \n> cats-kernel does not have a dep on machinist for now. See pom.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/non/cats/pull/806/files#r49794859.\n\n## \n\nP. Oscar Boykin, Ph.D. | http://twitter.com/posco | http://pobox.com/~boykin\n",
        "createdAt" : "2016-01-14T22:25:32Z",
        "updatedAt" : "2016-01-29T14:01:56Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "5812cf9b-090d-4563-8f5c-09d1551d4e13",
        "parentId" : "f8cedb98-b6a1-4637-9139-b1e5bb58ed10",
        "authorId" : "879af59d-98d6-4c7a-8a00-119c66fde9ee",
        "body" : "The entire picture isn't that clear to me either. It seems that a later version of simulacrum _does_ use imp for summoning typeclasses instead of an `@inline def apply` method.\n",
        "createdAt" : "2016-01-14T22:33:16Z",
        "updatedAt" : "2016-01-29T14:01:56Z",
        "lastEditedBy" : "879af59d-98d6-4c7a-8a00-119c66fde9ee",
        "tags" : [
        ]
      },
      {
        "id" : "2d712be3-6a52-40f1-ade8-ef5b7996400b",
        "parentId" : "f8cedb98-b6a1-4637-9139-b1e5bb58ed10",
        "authorId" : "1b80f00c-b2ed-49b7-8651-8be183b8980a",
        "body" : "Right, the imp integration was just added in the last month or so. We could revert the imp integration to avoid the dependency and then tackle call-site inlining via macros ala imp and machinist once we start building typeclassic. I'm fine either way.\n",
        "createdAt" : "2016-01-14T22:50:11Z",
        "updatedAt" : "2016-01-29T14:01:56Z",
        "lastEditedBy" : "1b80f00c-b2ed-49b7-8651-8be183b8980a",
        "tags" : [
        ]
      },
      {
        "id" : "bf38fc01-4d43-43d1-8e67-6252814c60a3",
        "parentId" : "f8cedb98-b6a1-4637-9139-b1e5bb58ed10",
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "+1 to no runtime deps, so reverting imp or using an older version would be my pref.\n",
        "createdAt" : "2016-01-14T23:09:44Z",
        "updatedAt" : "2016-01-29T14:01:56Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      }
    ],
    "commit" : "87f2f3cd6ecd9c093220b4c604b6d76e881f51ac",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +46,50 @@\nlazy val machinistDependencies = Seq(\n  libraryDependencies += \"org.typelevel\" %%% \"machinist\" % \"0.4.1\"\n)\n"
  },
  {
    "id" : "3b1be139-75e9-4652-9636-ad7a509379bb",
    "prId" : 787,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0c7d577-4153-4c02-87ea-a6322d6f3b67",
        "parentId" : null,
        "authorId" : "e146bf5a-b942-458a-855d-3cc0cf3de9bb",
        "body" : "``` scala\nscalacOptions in (Compile, doc) -= \"-Xfatal-warnings\"\n```\n\nTFW _you_ teach Travis Brown something for once ;-)\n",
        "createdAt" : "2016-01-07T23:42:37Z",
        "updatedAt" : "2016-01-07T23:42:37Z",
        "lastEditedBy" : "e146bf5a-b942-458a-855d-3cc0cf3de9bb",
        "tags" : [
        ]
      },
      {
        "id" : "5f1dbb4c-7c1c-4d35-8fe4-3baf85e899f6",
        "parentId" : "e0c7d577-4153-4c02-87ea-a6322d6f3b67",
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "@dwijnand Nice!—I had no idea that would work.\n\nMy approach to dealing with SBT is 95% cargo-cultery, and there's a similar `filter` a little further down in the file—I'll update both in this PR when I'm back at my desktop.\n",
        "createdAt" : "2016-01-07T23:51:17Z",
        "updatedAt" : "2016-01-07T23:51:17Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      },
      {
        "id" : "887f11b2-b8c0-45a5-b7d1-f298dd3acc8c",
        "parentId" : "e0c7d577-4153-4c02-87ea-a6322d6f3b67",
        "authorId" : null,
        "body" : "But not if this is added to sbt-catalsysts due to [typesafe activator](https://github.com/InTheNow/sbt-catalysts/blob/master/src/main/scala/sbtcatalysts/CatalystsPlugin.scala#L321-L323)\n\n:wink: \n",
        "createdAt" : "2016-01-07T23:51:58Z",
        "updatedAt" : "2016-01-07T23:51:58Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "1db4c9b8-f734-49bd-91b8-cfd3ea9b58ce",
        "parentId" : "e0c7d577-4153-4c02-87ea-a6322d6f3b67",
        "authorId" : "e146bf5a-b942-458a-855d-3cc0cf3de9bb",
        "body" : "@InTheNow Does activator seriously not respect the sbt version in build.properties?\n",
        "createdAt" : "2016-01-08T06:52:53Z",
        "updatedAt" : "2016-01-08T06:53:41Z",
        "lastEditedBy" : "e146bf5a-b942-458a-855d-3cc0cf3de9bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "30115bc0af3832af2e063efafd1a526ecf6eda57",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +39,43 @@  ),\n  parallelExecution in Test := false,\n  scalacOptions in (Compile, doc) := (scalacOptions in (Compile, doc)).value.filter(_ != \"-Xfatal-warnings\")\n) ++ warnUnusedImport\n"
  },
  {
    "id" : "e3f15d2d-fe32-4ecb-9ccf-962e1fbe92bb",
    "prId" : 536,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f27fe23d-31bb-46de-a638-d63ed8713434",
        "parentId" : null,
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "What's the difference between `jvm/test` and `testsJVM/test`? Similarly below for `js`.\n",
        "createdAt" : "2015-09-25T14:08:40Z",
        "updatedAt" : "2015-09-25T17:14:52Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "a197e9af-b55d-4dba-a322-a9caf1bf11a3",
        "parentId" : "f27fe23d-31bb-46de-a638-d63ed8713434",
        "authorId" : null,
        "body" : "`testsJVM` and `testsJS` are the projects for the `tests` cross project.So neither contain actual code\n\n`jvm` and `js` are top level projects that are _not_ cross projects, and do contain code\n",
        "createdAt" : "2015-09-25T14:13:22Z",
        "updatedAt" : "2015-09-25T17:14:52Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "c5aa8e37-6402-4430-8d1e-92b2cbbfdc4e",
        "parentId" : "f27fe23d-31bb-46de-a638-d63ed8713434",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "Ah okay I think I understand now. Thanks for the explanation.\n",
        "createdAt" : "2015-09-25T14:15:20Z",
        "updatedAt" : "2015-09-25T17:14:52Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      },
      {
        "id" : "5fcf7ede-7536-4518-9c7e-645a101a6787",
        "parentId" : "f27fe23d-31bb-46de-a638-d63ed8713434",
        "authorId" : "89a3e0e3-e301-4aa8-b150-74070eb5a619",
        "body" : "Yeah, I am actually the origin of this confusing difference, but I think in the long-run it will make sense ;)\n",
        "createdAt" : "2015-09-25T18:41:35Z",
        "updatedAt" : "2015-09-25T18:41:35Z",
        "lastEditedBy" : "89a3e0e3-e301-4aa8-b150-74070eb5a619",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfda9401d471ba074c54f50afeac51e14c5dd09f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +219,223 @@\n// These aliases serialise the build for the benefit of Travis-CI.\naddCommandAlias(\"buildJVM\", \";macrosJVM/compile;coreJVM/compile;freeJVM/compile;freeJVM/test;stateJVM/compile;stateJVM/test;lawsJVM/compile;testsJVM/test;jvm/test;bench/test\")\n\naddCommandAlias(\"validateJVM\", \";scalastyle;buildJVM;makeSite\")"
  },
  {
    "id" : "788e2b9b-6a5a-42a9-9a64-dc6b0a8b1f37",
    "prId" : 302,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f7ca26b-b4e9-408f-b31d-eaf64b218e7d",
        "parentId" : null,
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "Is there a reason not to publish this?\n",
        "createdAt" : "2015-05-20T03:06:44Z",
        "updatedAt" : "2015-05-20T03:06:44Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      },
      {
        "id" : "9759181f-e083-4b4a-9dfe-19663c98fff7",
        "parentId" : "3f7ca26b-b4e9-408f-b31d-eaf64b218e7d",
        "authorId" : "89a3e0e3-e301-4aa8-b150-74070eb5a619",
        "body" : "Oh, good catch. I would be fine publishing it.\n\nWant to submit a small PR fixing this?\n",
        "createdAt" : "2015-05-20T03:08:56Z",
        "updatedAt" : "2015-05-20T03:08:56Z",
        "lastEditedBy" : "89a3e0e3-e301-4aa8-b150-74070eb5a619",
        "tags" : [
        ]
      },
      {
        "id" : "086b2bd9-356a-43f1-8627-6ba28c578d37",
        "parentId" : "3f7ca26b-b4e9-408f-b31d-eaf64b218e7d",
        "authorId" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "body" : "Fixed by #312\n",
        "createdAt" : "2015-05-20T10:03:26Z",
        "updatedAt" : "2015-05-20T10:03:26Z",
        "lastEditedBy" : "b714495a-5740-47d4-aaaa-98f354f5c0a7",
        "tags" : [
        ]
      }
    ],
    "commit" : "6063a5a356fec57f6e6fac67825ef676f3cbb698",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +139,143 @@  .settings(moduleName := \"cats-state\")\n  .settings(catsSettings)\n  .settings(noPublishSettings)\n\nlazy val publishSettings = Seq("
  },
  {
    "id" : "29dbe3d1-a656-4d3a-be7a-94e791fdec7e",
    "prId" : 34,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28070480-b1e2-47f6-b4d2-1eaeba877f54",
        "parentId" : null,
        "authorId" : "e146bf5a-b942-458a-855d-3cc0cf3de9bb",
        "body" : "looks like this is missing `noPublishSettings`\n",
        "createdAt" : "2015-02-02T09:56:57Z",
        "updatedAt" : "2015-02-02T09:56:57Z",
        "lastEditedBy" : "e146bf5a-b942-458a-855d-3cc0cf3de9bb",
        "tags" : [
        ]
      },
      {
        "id" : "a0e5de96-5500-4340-8d71-67a74ca7ceaa",
        "parentId" : "28070480-b1e2-47f6-b4d2-1eaeba877f54",
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "Ah, good catch @dwijnand—want to submit a pull request or should I?\n",
        "createdAt" : "2015-02-02T13:55:49Z",
        "updatedAt" : "2015-02-02T13:55:49Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      },
      {
        "id" : "5a818004-2179-40aa-8304-0ba3ec1b8013",
        "parentId" : "28070480-b1e2-47f6-b4d2-1eaeba877f54",
        "authorId" : "e146bf5a-b942-458a-855d-3cc0cf3de9bb",
        "body" : "https://github.com/non/cats/pull/38\n",
        "createdAt" : "2015-02-02T14:16:25Z",
        "updatedAt" : "2015-02-02T14:16:25Z",
        "lastEditedBy" : "e146bf5a-b942-458a-855d-3cc0cf3de9bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "13be0bb11b67ef77504f954d800b842f0f929ba7",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +49,53 @@\nlazy val aggregate = project.in(file(\".\"))\n  .settings(catsSettings: _*)\n  .aggregate(core, laws, tests, data, std, examples)\n  .dependsOn(core, laws, tests, data, std, examples)"
  }
]