[
  {
    "id" : "a5176ba6-e7b5-4b11-b7cc-8f133aa67613",
    "prId" : 362,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/362#pullrequestreview-171040917",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a200925-c668-48e0-8663-3d160b6dccf3",
        "parentId" : null,
        "authorId" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "body" : "Just want to make a broader point (not for the tutorial): you've just made `transfer` uninterruptible, which is probably not what you want in real code: imagine you want to cancel a long file transmission, with this code it will still wait until the whole file has been transferred, i.e. it's not canceling things at all.\r\n\r\nIdeally you want to make things a bit more granular.",
        "createdAt" : "2018-10-10T11:18:46Z",
        "updatedAt" : "2018-11-03T14:28:54Z",
        "lastEditedBy" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "tags" : [
        ]
      },
      {
        "id" : "0196c2b8-f533-496e-bafc-ee8ed512054d",
        "parentId" : "4a200925-c668-48e0-8663-3d160b6dccf3",
        "authorId" : "e1b8e19b-71b4-4413-ac97-b8c93160a714",
        "body" : "Running Ctrl-C when executing the final program closes the streams orderly so I assumed that cancellation was being properly controlled. But I guess that's because the Ctrl-C triggers the cancellation on the `IO` returned by  `.withPermit`, but not of the `transfer`. Good to know...",
        "createdAt" : "2018-10-13T08:49:25Z",
        "updatedAt" : "2018-11-03T14:28:54Z",
        "lastEditedBy" : "e1b8e19b-71b4-4413-ac97-b8c93160a714",
        "tags" : [
        ]
      },
      {
        "id" : "a35c9674-1344-41ec-b58d-26ba79d7ddf0",
        "parentId" : "4a200925-c668-48e0-8663-3d160b6dccf3",
        "authorId" : "d7279d47-eeb3-4647-bc2d-54ea4ab56ef7",
        "body" : "This sounds like something that should be mentioned in the text. People are _very_ likely to copy the sample code and try to use it, despite any disclaimers, so better warn them.",
        "createdAt" : "2018-10-28T12:03:45Z",
        "updatedAt" : "2018-11-03T14:28:54Z",
        "lastEditedBy" : "d7279d47-eeb3-4647-bc2d-54ea4ab56ef7",
        "tags" : [
        ]
      },
      {
        "id" : "765bdd27-fc4d-4454-94a5-98ab6acfc4dc",
        "parentId" : "4a200925-c668-48e0-8663-3d160b6dccf3",
        "authorId" : "e1b8e19b-71b4-4413-ac97-b8c93160a714",
        "body" : "Agreed. I'm adding this paragraph immediately after the text commented by @SystemFw :\r\n```\r\nMark that while the `IO` returned by `copy` is cancelable (because so are `IO`\r\ninstances returned by `use`), the `IO` returned by `transfer` is not. Trying to\r\ncancel it will not have any effect and that `IO` will run until the whole file\r\nis copied! In real world code you will probably want to make your functions\r\ncancelable, section [Building cancelable IO\r\ntasks](../datatypes/io.html#building-cancelable-io-tasks) of `IO` documentation\r\nexplains how to create such cancelable `IO` instances.\r\n```",
        "createdAt" : "2018-11-02T10:20:16Z",
        "updatedAt" : "2018-11-03T14:28:54Z",
        "lastEditedBy" : "e1b8e19b-71b4-4413-ac97-b8c93160a714",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac6f707f8db4a2022dfd233154cc4b194294e8a7",
    "line" : 385,
    "diffHunk" : "@@ -1,1 +383,387 @@error, or cancellation). As the 'release' parts in the `Resource` instances are\nnow blocked on the same semaphore, we can be sure that streams are closed only\nafter `transfer` is over, _i.e._ we have implemented mutual exclusion of\n`transfer` execution and resources releasing. An implicit `Concurrent` instance\nis required to create the semaphore instance, which is included in the function"
  },
  {
    "id" : "14f7db9c-2b0d-4afd-91bd-4bdeab6711cc",
    "prId" : 362,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/362#pullrequestreview-166780113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0996f81-02fd-40f7-b449-1ba43af3643f",
        "parentId" : null,
        "authorId" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "body" : "`attempt` isn't really needed here. You could just keep the correct case in the `for` and use `handleErrorWith` for your error logic.",
        "createdAt" : "2018-10-10T11:56:58Z",
        "updatedAt" : "2018-11-03T14:28:54Z",
        "lastEditedBy" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "tags" : [
        ]
      },
      {
        "id" : "d011ab99-543d-4843-af34-bf87986e56fc",
        "parentId" : "e0996f81-02fd-40f7-b449-1ba43af3643f",
        "authorId" : "e1b8e19b-71b4-4413-ac97-b8c93160a714",
        "body" : ":+1:",
        "createdAt" : "2018-10-21T11:01:50Z",
        "updatedAt" : "2018-11-03T14:28:54Z",
        "lastEditedBy" : "e1b8e19b-71b4-4413-ac97-b8c93160a714",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac6f707f8db4a2022dfd233154cc4b194294e8a7",
    "line" : 916,
    "diffHunk" : "@@ -1,1 +914,918 @@    _ <- serve(serverSocket, stopFlag)                   // Looping back to the beginning\n  } yield ()\n}\n```\n"
  },
  {
    "id" : "cde8e05e-2b34-420a-9229-d8cd2b378389",
    "prId" : 362,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/362#pullrequestreview-169059197",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cfd3ae34-10ef-437f-867e-96deba3ab186",
        "parentId" : null,
        "authorId" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "body" : "This idiom is no longer necessary. We have `ContextShift.evalOn` to run a computation on a given thread pool and have it return to the main one ",
        "createdAt" : "2018-10-10T12:13:50Z",
        "updatedAt" : "2018-11-03T14:28:54Z",
        "lastEditedBy" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "tags" : [
        ]
      },
      {
        "id" : "d8db87a0-f182-4f3f-b309-d447857fce8c",
        "parentId" : "cfd3ae34-10ef-437f-867e-96deba3ab186",
        "authorId" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "body" : "Also note that if `lineE` was interruptible you wouldn't `shift` back, another reason to use `evalOn` which is properly bracketed",
        "createdAt" : "2018-10-10T12:14:33Z",
        "updatedAt" : "2018-11-03T14:28:54Z",
        "lastEditedBy" : "a5a514ff-cd89-45cb-bcc8-796f0fa2a445",
        "tags" : [
        ]
      },
      {
        "id" : "b9192a29-ce58-469e-b535-02d31980f8a1",
        "parentId" : "cfd3ae34-10ef-437f-867e-96deba3ab186",
        "authorId" : "e1b8e19b-71b4-4413-ac97-b8c93160a714",
        "body" : "Code and text is changed to use `ContextShift[F].evalOn`.",
        "createdAt" : "2018-10-27T15:20:21Z",
        "updatedAt" : "2018-11-03T14:28:54Z",
        "lastEditedBy" : "e1b8e19b-71b4-4413-ac97-b8c93160a714",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac6f707f8db4a2022dfd233154cc4b194294e8a7",
    "line" : 1173,
    "diffHunk" : "@@ -1,1 +1171,1175 @@      lineE <- csf.evalOn(clientsExecutionContext)(Sync[F].delay(reader.readLine()).attempt)\n//    ...\n```\n\nand... that is mostly it. Only pending change is to create the thread pool and"
  }
]