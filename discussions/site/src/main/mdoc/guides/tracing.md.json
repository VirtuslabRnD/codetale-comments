[
  {
    "id" : "57ddcdb6-0089-4386-92d7-b54b40897d99",
    "prId" : 854,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/854#pullrequestreview-443532166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c064206c-e3e1-422a-9b2f-57c6ea1b7c33",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "!!! You documented it?!?! Wow!",
        "createdAt" : "2020-07-07T14:41:51Z",
        "updatedAt" : "2020-07-11T18:55:45Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ba1b112106c96a7175793ef9c80ec6514762adb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3,7 @@title:  \"Tracing\"\nposition: 2\n---\n\n<nav role=\"navigation\" id=\"toc\"></nav>"
  },
  {
    "id" : "c293f966-5aca-42d8-87c3-8fa19680cb87",
    "prId" : 854,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/854#pullrequestreview-443532166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ffc3a9d-523a-49eb-a8bd-dd638d42d075",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "This should be SUPER easy to do and will help a lot, IMO. Follow-up PRs.\r\n\r\nAlso this list is great.",
        "createdAt" : "2020-07-07T14:42:37Z",
        "updatedAt" : "2020-07-11T18:55:45Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ba1b112106c96a7175793ef9c80ec6514762adb",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +69,73 @@boundaries (thread IDs aren't very useful). With fiber identity, log messages\nproduced by a single fiber can be associated with a unique, stable identifier.\n7. Fiber ancestry graph. If fibers can assume an identity, an ancestry graph \ncan be formed, where nodes are fibers and edges represent a fork/join\nrelationship."
  },
  {
    "id" : "a0290dc5-bce1-4143-a2c1-73825e0162b2",
    "prId" : 854,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/854#pullrequestreview-443532166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3ab43aa-4291-4798-8d49-672a45dce94f",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "This is an important one. We should honestly consider having `IOApp` register a signal trap so that people can dump a current fiber trace with `kill`, and probably also register an `MBean` with the same. Of course, for that to actually help with deadlocks, we would need a) fiber identity, and b) fiber state (similar to when thread dumps show deadlocks) indicating that a fiber is in an `Async` awaiting its continuation (I guess this might be as simple as just \"the top of the trace is an `async` node\").",
        "createdAt" : "2020-07-07T14:45:19Z",
        "updatedAt" : "2020-07-11T18:55:45Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ba1b112106c96a7175793ef9c80ec6514762adb",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +72,76 @@can be formed, where nodes are fibers and edges represent a fork/join\nrelationship.\n8. Asynchronous deadlock detection. Even when working with asynchronously\nblocking code, fiber deadlocks aren't impossible. Being able to detect\ndeadlocks or infer when a deadlock can happen makes writing concurrent code"
  },
  {
    "id" : "2e7ca455-27ba-442e-9d8c-2eea77f8dd9e",
    "prId" : 854,
    "prUrl" : "https://github.com/typelevel/cats-effect/pull/854#pullrequestreview-443532166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8e65e5f-bd60-4a1b-abe7-e6c91f079cc9",
        "parentId" : null,
        "authorId" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "body" : "This is basically just \"better heuristics for stack frame extraction\" and it's definitely going to be interesting.",
        "createdAt" : "2020-07-07T14:45:58Z",
        "updatedAt" : "2020-07-11T18:55:45Z",
        "lastEditedBy" : "5b44dcf3-8819-42b0-9a49-4cdbf5a8a305",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ba1b112106c96a7175793ef9c80ec6514762adb",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +79,83 @@and trace information of all fibers in an application can be extracted for \ndebugging purposes.\n10. Monad transformer analysis.\n\nAs note of caution, fiber tracing generally introduces overhead to"
  }
]