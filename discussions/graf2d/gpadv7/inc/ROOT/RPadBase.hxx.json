[
  {
    "id" : "d5b21c8f-f8fc-49cd-82a1-ddd297b12816",
    "prId" : 8436,
    "prUrl" : "https://github.com/root-project/root/pull/8436#pullrequestreview-685366944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4139a123-f973-4c20-b72b-29dc376ef7b5",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Would it make sense to pass the owning pad into `GetDrawable()`, rather than depending on `AddPrimitive()` to do something special for pads and only for pads? That way, `GetDrawable<RPad>` can do \"the right thing\". And we don't need the friendship for `SetParent()` anymore.",
        "createdAt" : "2021-06-16T08:44:50Z",
        "updatedAt" : "2021-06-16T08:50:43Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "971e7d7c-a076-48e3-b835-156698d5a14c",
        "parentId" : "4139a123-f973-4c20-b72b-29dc376ef7b5",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Yes, one can hide `RPad` constructor and provide specialization for `RPadBase::Draw<RPad>()`.\r\nI prefer to use this signature and not `GetDrawable()` function.",
        "createdAt" : "2021-06-16T09:08:25Z",
        "updatedAt" : "2021-06-16T09:08:25Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "8eecb1b3-6a26-46bd-ae12-156d9ccdf0ae",
        "parentId" : "4139a123-f973-4c20-b72b-29dc376ef7b5",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "The advantage of using `GetDrawable` is that this is *meant* to be customized by different classes. Here you need to inject a customization (\"hack\") for `RPad` to interject and set the parent. This is surprising: if I were to ask a future team member, where do you think `SetParent` is called - they would not know!\r\n\r\n`friend` declarations can often be a symptom of the violation of separation of concerns.\r\n\r\nIn general I could imaging that it's useful for `GetDrawable()` to know the pad it will be painted on. Not just for `RPad`'s purposes.",
        "createdAt" : "2021-06-16T12:37:50Z",
        "updatedAt" : "2021-06-16T12:37:50Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "ff995bbc-8e72-4bd9-871b-64d242de68d6",
        "parentId" : "4139a123-f973-4c20-b72b-29dc376ef7b5",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "I could do it differently - just hide `RPad` constructor and let create it only via `RPadBase::CreateSubPad()` method.\r\nLike we do it with `RFrame`. ",
        "createdAt" : "2021-06-16T12:40:51Z",
        "updatedAt" : "2021-06-16T12:40:51Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "f779a73f-d6db-42ab-a85e-ef7db2bda209",
        "parentId" : "4139a123-f973-4c20-b72b-29dc376ef7b5",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "I cannot tell what this change would mean for users? I suppose we would prevent them from calling `Draw<RPad>(...)`? I think that's actually nice.\r\n\r\nCan I have some counter-arguments against what I'm proposing, please? :-) I understand you prefer your approach - what's wrong with changing the `GetDrawable()` signature?",
        "createdAt" : "2021-06-16T12:55:44Z",
        "updatedAt" : "2021-06-16T12:55:45Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "4020c6eb-2428-4801-a9d8-c0bb18d88182",
        "parentId" : "4139a123-f973-4c20-b72b-29dc376ef7b5",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "> what's wrong with changing the GetDrawable() signature\r\n\r\nEverywhere extra `RPadBase &pad` argument which not used in 99% of cases.",
        "createdAt" : "2021-06-16T12:57:42Z",
        "updatedAt" : "2021-06-16T12:57:43Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "e8d2faec-bff9-4251-bfe8-c643616b3a15",
        "parentId" : "4139a123-f973-4c20-b72b-29dc376ef7b5",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Thanks. I wouldn't extrapolate from what we have now to what we'll have in 5 years. I can imagine more complex objects to adjust their representation based on the aspect ratio of the pad, or they might automatically create sub-pads inside the pad (think `TRatioPlot`) etc.\r\n\r\nWe *could* check whether the overload `GetDrawable(RPad&, shared_ptr<T>&,...)` exists, else call `GetDrawable(shared_ptr<T>&,...)`. What do you think?",
        "createdAt" : "2021-06-16T13:09:02Z",
        "updatedAt" : "2021-06-16T13:09:02Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "59545d1a-415b-4eea-a978-71447d917bea",
        "parentId" : "4139a123-f973-4c20-b72b-29dc376ef7b5",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "> We could check whether the overload `GetDrawable(RPad&, shared_ptr<T>&,...)` exists, \r\n> else call `GetDrawable(shared_ptr<T>&,...)`. What do you think?\r\n\r\nWould be ok, but we always should remember about `python` binding - PyROOT not always perfect with handling of complex C++ templates. \r\n\r\nProbably we also should use different names for `canv->Draw(hist)` which calls `GetDrawable()` and \r\n`canv->Draw<RLine>(p1,p2)`. May be use `canv->Add<RLine>(p1,p2)`?",
        "createdAt" : "2021-06-16T13:20:38Z",
        "updatedAt" : "2021-06-16T13:20:38Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "76836c98-e274-44b5-8520-88085f7e7f9b",
        "parentId" : "4139a123-f973-4c20-b72b-29dc376ef7b5",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "`GetDrawable()` isn't called from the Python side - it's called by `RPadBase::Draw()`, right?\r\n\r\nA agree on the change to`Add`, or even `Create` (similarly to `RDirectory`)?",
        "createdAt" : "2021-06-16T13:30:13Z",
        "updatedAt" : "2021-06-16T13:30:13Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "d0f7fff5-deb0-4f4c-8a94-4e988b124379",
        "parentId" : "4139a123-f973-4c20-b72b-29dc376ef7b5",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "> `GetDrawable()` isn't called from the Python side - it's called by `RPadBase::Draw()`, right?\r\n\r\nYes, but `RPadBase::Draw` is templated method in this case and I have no idea to which extend PyROOT can unfold such templates, where `GetDrawable` is of main difficulty for it. ",
        "createdAt" : "2021-06-16T13:34:30Z",
        "updatedAt" : "2021-06-16T13:34:30Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "0ad943ae-e03e-4510-9e3a-636b3ebb6e90",
        "parentId" : "4139a123-f973-4c20-b72b-29dc376ef7b5",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Python only interacts with `RPadBase::Draw()` and not with functions called by it.",
        "createdAt" : "2021-06-16T13:42:57Z",
        "updatedAt" : "2021-06-16T13:42:58Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "67a16f3a-62ca-49a4-b271-b2710aeab0c1",
        "parentId" : "4139a123-f973-4c20-b72b-29dc376ef7b5",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "> Python only interacts with `RPadBase::Draw()` and not with functions called by it.\r\n\r\nBut even cling has difficulty to properly load function when calling `canv->Draw(hist)`.\r\nIn many v7 macros we have calls `R__LOAD_LIBRARY(libROOTHistDraw)`\r\nHow PyROOT can survive it?",
        "createdAt" : "2021-06-16T13:48:19Z",
        "updatedAt" : "2021-06-16T13:48:19Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "5d9505e0-368d-400c-bdba-b87908b90875",
        "parentId" : "4139a123-f973-4c20-b72b-29dc376ef7b5",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "PyROOT is invoking the function through cling. If cling has an issue, fine, we need to fix this (and the missing symbols *should* be addressed by now in master and 6.24, especially with modules). But PyROOT itself doesn't see the function body of what it invokes. \r\n\r\nMaybe we're talking past one another, but my understanding is that Python code might invoke `canv.Draw(foo)`. That is translated into a call in cling - and the function body of the inlined `RCanvas::Draw()` is \"compiled\" by cling - PyROOT doesn't deal with that. *If* Python code were to call `GetDrawable()` then it would have to do SFINAE + overload selection, but that doesn't seem to be a realistic case.",
        "createdAt" : "2021-06-16T15:59:14Z",
        "updatedAt" : "2021-06-16T15:59:15Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d91919a32e80c21d2229d33b31ee1a192fe22f2",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +95,99 @@      TestIfFrameRequired(drawable.get());\n\n      AddPrimitive(drawable);\n\n      return drawable;"
  },
  {
    "id" : "cf6eedb7-b6cb-4f68-8624-a95759a1e3a7",
    "prId" : 8436,
    "prUrl" : "https://github.com/root-project/root/pull/8436#pullrequestreview-685121114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3486e04-0bd4-4459-9c33-0d27cdbcef29",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "This generic `T` might or might not be a `RDrawable`. As is, this interface is far too \"open\" / \"permissive\".",
        "createdAt" : "2021-06-16T08:46:08Z",
        "updatedAt" : "2021-06-16T08:46:09Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "302c32f8-e32f-4af5-9b10-27636a3595fc",
        "parentId" : "c3486e04-0bd4-4459-9c33-0d27cdbcef29",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Can we limit `T` only for derived from `RDrawable`?\r\n\r\nIn principle, it will complain anyway during compilation while `AddPrimitive(drawable)` expects only `RDrawable`",
        "createdAt" : "2021-06-16T09:11:39Z",
        "updatedAt" : "2021-06-16T09:11:39Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "0e6c3bb1-b494-4eb2-bdbf-205e507cff5e",
        "parentId" : "c3486e04-0bd4-4459-9c33-0d27cdbcef29",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Yes but it's extremely user unfriendly to understand what that flood of template diagnostics is talking about...",
        "createdAt" : "2021-06-16T12:48:10Z",
        "updatedAt" : "2021-06-16T12:48:10Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d91919a32e80c21d2229d33b31ee1a192fe22f2",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +104,108 @@   std::shared_ptr<T> Draw(ARGS... args)\n   {\n      auto drawable = std::make_shared<T>(args...);\n\n      TestIfFrameRequired(drawable.get());"
  },
  {
    "id" : "25379bd8-bab8-46f4-ad7f-298bf9051b5c",
    "prId" : 8436,
    "prUrl" : "https://github.com/root-project/root/pull/8436#pullrequestreview-685118954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "673cf6df-7974-4035-96bd-edac1758efe2",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "```suggestion\r\n   template<class T, class... ARGS, class = typename std::enable_if<std::is_base_of<RDrawable, typename std::remove_cv<T>::type>::value>::type>\r\n   std::shared_ptr<T> Draw(ARGS... args)\r\n```\r\n",
        "createdAt" : "2021-06-16T08:49:58Z",
        "updatedAt" : "2021-06-16T10:07:02Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "42a7f335-2712-4197-a3bb-5936382f0971",
        "parentId" : "673cf6df-7974-4035-96bd-edac1758efe2",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "This does not work. You have typo somewhere.",
        "createdAt" : "2021-06-16T09:24:02Z",
        "updatedAt" : "2021-06-16T09:24:02Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "7aef8506-b1f1-4580-af82-32b58f7247bf",
        "parentId" : "673cf6df-7974-4035-96bd-edac1758efe2",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Indeed, fixed.",
        "createdAt" : "2021-06-16T10:07:08Z",
        "updatedAt" : "2021-06-16T10:07:08Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "b8761683-1691-42de-85e6-a67477e7b0ad",
        "parentId" : "673cf6df-7974-4035-96bd-edac1758efe2",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "This change mix-up PyROOT - it fails to find proper signature. I will revert change",
        "createdAt" : "2021-06-16T12:08:41Z",
        "updatedAt" : "2021-06-16T12:08:41Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "88ff7ca8-a21c-4bb9-80a4-09e6376bba17",
        "parentId" : "673cf6df-7974-4035-96bd-edac1758efe2",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "OK so that's broken in ROOT's meta belly.\r\n\r\nWhat about\r\n```c++\r\n// SFINAE-enabled only if T derives from RDrawable; returns std::shared_ptr<T>\r\ntemplate<class T, class... ARGS>\r\ntypename std::enable_if<std::is_base_of<RDrawable, T>::value, std::shared_ptr<T>>::type\r\nDraw(ARGS... args)\r\n```\r\nOnce we have C++20... we can use `requires` clauses.\r\n\r\n[Edit: removed `remove_cv`: if people say `Draw<const RBox>()` then that's their problem ;-)]",
        "createdAt" : "2021-06-16T12:46:05Z",
        "updatedAt" : "2021-06-16T12:47:22Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d91919a32e80c21d2229d33b31ee1a192fe22f2",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +102,106 @@   /// Create drawable of specified class T\n   template<class T, class... ARGS>\n   std::shared_ptr<T> Draw(ARGS... args)\n   {\n      auto drawable = std::make_shared<T>(args...);"
  }
]