[
  {
    "id" : "7ec648f7-dadf-4160-ad69-5a3e656ebdc9",
    "prId" : 4352,
    "prUrl" : "https://github.com/root-project/root/pull/4352#pullrequestreview-292222897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0ee1cb2-1668-4952-ae77-35a1cee9ee4e",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "`Holds`? `double` and `int` might be compatible, but that's not what this checks.",
        "createdAt" : "2019-09-23T09:49:33Z",
        "updatedAt" : "2019-09-24T08:12:55Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "9a6856d2-ed0c-4b93-8652-1cf347681478",
        "parentId" : "c0ee1cb2-1668-4952-ae77-35a1cee9ee4e",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "For the moment yes - exact type match is required. I plan to provide different conversion rules as well - but later.",
        "createdAt" : "2019-09-24T07:28:41Z",
        "updatedAt" : "2019-09-24T08:12:55Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "42fcc84752e7c0cc1b2789ca61ad3313229a8ddf",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +43,47 @@      virtual ~Value_t() = default;\n      virtual EValuesKind Kind() const = 0;\n      virtual bool Compatible(EValuesKind kind) const { return kind == Kind(); }\n      virtual bool GetBool() const { return false; }\n      virtual int GetInt() const { return 0; }"
  },
  {
    "id" : "24b98e95-e58c-4596-a2be-e11a5048ead5",
    "prId" : 4352,
    "prUrl" : "https://github.com/root-project/root/pull/4352#pullrequestreview-292223793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "748b6ca3-6e6c-4683-be38-6ea865fdc5b9",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Why is this `virtual`?",
        "createdAt" : "2019-09-23T09:49:48Z",
        "updatedAt" : "2019-09-24T08:12:55Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "1123c5aa-0136-4402-9e68-a4c21a5aa26a",
        "parentId" : "748b6ca3-6e6c-4683-be38-6ea865fdc5b9",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Because it is not yet completed. One has to provide implementation for all subclasses properly.",
        "createdAt" : "2019-09-24T07:30:35Z",
        "updatedAt" : "2019-09-24T08:12:55Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "42fcc84752e7c0cc1b2789ca61ad3313229a8ddf",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +43,47 @@      virtual ~Value_t() = default;\n      virtual EValuesKind Kind() const = 0;\n      virtual bool Compatible(EValuesKind kind) const { return kind == Kind(); }\n      virtual bool GetBool() const { return false; }\n      virtual int GetInt() const { return 0; }"
  },
  {
    "id" : "65fda220-f09a-41a9-8f52-fd9dbe82626d",
    "prId" : 4352,
    "prUrl" : "https://github.com/root-project/root/pull/4352#pullrequestreview-292225431",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9cd736d-43a1-4864-9602-ed906361f198",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Instead of inheritance and virtual functions, would it be simpler to build a hand-rolled `variant`? I.e.\r\n```\r\nclass Value_t {\r\n   int fIntOrBool;\r\n   double fDouble;\r\n   std::string fString;\r\n   EValuesKind fWhatAmI;\r\n   ...\r\n}\r\n```\r\n? Or does this need to be tiny in memory?\r\n\r\nDoing this that way would allow us to replace the internal representation by a `variant` later. And copy and equality would be trivial.",
        "createdAt" : "2019-09-23T09:52:33Z",
        "updatedAt" : "2019-09-24T08:12:55Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "31a85c7c-76a1-47a3-9b98-2e6dac47eef4",
        "parentId" : "e9cd736d-43a1-4864-9602-ed906361f198",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Main problem - these many data members will be streamed by I/O and increase size on disk.\r\nIt would be grate to implement this functionality with std::variant, but we are far away from support of std::variant in ROOT I/O.",
        "createdAt" : "2019-09-24T07:33:54Z",
        "updatedAt" : "2019-09-24T08:12:55Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "42fcc84752e7c0cc1b2789ca61ad3313229a8ddf",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +37,41 @@public:\n\n   enum EValuesKind { kBool, kInt, kDouble, kString };\n\n   class Value_t {"
  },
  {
    "id" : "71c9ee08-9a95-4be8-bb10-84dc81c482f0",
    "prId" : 4352,
    "prUrl" : "https://github.com/root-project/root/pull/4352#pullrequestreview-292226188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e0af5aa-285d-41f6-9e7a-0c0f0d8b9ed0",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Better member name? E.g. following coding conventions?",
        "createdAt" : "2019-09-23T09:54:10Z",
        "updatedAt" : "2019-09-24T08:12:55Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "4f26ad61-d472-4f12-9ca2-2909ed19d50a",
        "parentId" : "9e0af5aa-285d-41f6-9e7a-0c0f0d8b9ed0",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Let keep it as is for the moment. This name will appear in all JSON many-many times.\r\nI plan to modify I/O model here later anyway - this will give us freedom to use any name here.",
        "createdAt" : "2019-09-24T07:35:35Z",
        "updatedAt" : "2019-09-24T08:12:55Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "42fcc84752e7c0cc1b2789ca61ad3313229a8ddf",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +101,105 @@   // FIXME: due to ROOT-10306 only data member of such kind can be correctly stored by ROOT I/O\n   // Once problem fixed, one could make this container a base class\n   std::unordered_map<std::string, std::unique_ptr<Value_t>> m; ///< JSON_object\n\n"
  }
]