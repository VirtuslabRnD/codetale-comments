[
  {
    "id" : "d4b3e696-5ea7-4b18-9f57-f65624ac1c67",
    "prId" : 8017,
    "prUrl" : "https://github.com/apache/kafka/pull/8017#pullrequestreview-350535257",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ed822cc-1aef-46e8-9c5e-f028efae04cc",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "I'm wondering if we really want to pass in the StatusBackingStore interface, or whether we should define a new interface? It'd be nice to constrain future developers to only use the methods related to active topics. It's a bit more complicated, but better captures the current intent to just allow the worker tasks to check whether a topic is considered active for a connector and if not to record that a topic has been used.",
        "createdAt" : "2020-01-29T22:42:20Z",
        "updatedAt" : "2020-01-30T01:38:40Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      },
      {
        "id" : "b2410bd2-a564-400c-aeda-4b650acd6903",
        "parentId" : "1ed822cc-1aef-46e8-9c5e-f028efae04cc",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "My main issue is that the new methods seem to belong to the `StatusBackingStore` interface. Fleshing them out to a different one (let's say `TopicTracker`) would would separate concerns here, but would also add a step of redirection that might be more complex to follow. wdyt?",
        "createdAt" : "2020-01-30T00:17:09Z",
        "updatedAt" : "2020-01-30T01:38:40Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      },
      {
        "id" : "76fa1a42-4229-4c6b-9dbd-a6d8eeda9f50",
        "parentId" : "1ed822cc-1aef-46e8-9c5e-f028efae04cc",
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Neither approach is terribly clean. I think the current approach certainly works, but as you point out if we add something like `TopicTracker` as a superinterface of `StatusBackingStore` then we'd be inconsistent with the pre-existing status methods.\r\n\r\nLet's keep things simple.",
        "createdAt" : "2020-01-30T01:29:45Z",
        "updatedAt" : "2020-01-30T01:38:40Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7328b172193c7c52d38fe24553e50c846e18319e",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +76,80 @@                      RetryWithToleranceOperator retryWithToleranceOperator,\n                      Time time,\n                      StatusBackingStore statusBackingStore) {\n        this.id = id;\n        this.taskMetricsGroup = new TaskMetricsGroup(this.id, connectMetrics, statusListener);"
  },
  {
    "id" : "3fe3a020-305f-4eed-81f0-492da54b66ed",
    "prId" : 8844,
    "prUrl" : "https://github.com/apache/kafka/pull/8844#pullrequestreview-613375940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88635ba5-f95c-4e90-8aff-50ed99d18454",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "I see how you've just pulled the `WorkerSinkTask.initializeAndStart()` method up to this abstract class (per @C0urante's suggestion. That is a nice clean way to encapsulate that logic into the base class and keep the metrics behavior hidden from the subclasses. Nicely done.\r\n\r\nIt is a tiny bit unfortunate that the tests need to do something like:\r\n```\r\n        workerSourceTask.initialize(TASK_CONFIG);   // This just sets the config on the worker task\r\n        workerSourceTask.initializeAndStart();            // This calls task.initialize(...) and task.start(...)\r\n        workerSourceTask.execute();\r\n```\r\nBut the `initializeAndStart()` method in the `WorkerSinkTask` has been around since the beginning, and it's probably not worth changing here. After all, using `initializeAndStart()` still makes sense _within_ the `WorkerSinkTask` and now also the `WorkerTask` and `WorkerSourceTask` classes. So I'm fine with enlisting that method name as-is.",
        "createdAt" : "2021-03-29T16:04:43Z",
        "updatedAt" : "2021-04-01T05:43:56Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      }
    ],
    "commit" : "333c985055f3db9a21ad02f270dadadd50536916",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +149,153 @@    }\n\n    protected abstract void initializeAndStart();\n\n    protected abstract void execute();"
  }
]