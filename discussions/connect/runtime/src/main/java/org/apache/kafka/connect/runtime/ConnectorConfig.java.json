[
  {
    "id" : "58e3e867-3fd7-44b9-864c-3d524d0126db",
    "prId" : 8699,
    "prUrl" : "https://github.com/apache/kafka/pull/8699#pullrequestreview-416684473",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6830964-8e64-40d8-8c12-1044f592b6d8",
        "parentId" : null,
        "authorId" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "body" : "Just curious, why directly parse the `negate` property here instead of doing that in `PredicatedTransformation::configure`?",
        "createdAt" : "2020-05-20T22:00:45Z",
        "updatedAt" : "2020-05-28T08:23:52Z",
        "lastEditedBy" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "tags" : [
        ]
      },
      {
        "id" : "88eb07fe-f87f-4e73-a755-b583a3fd366c",
        "parentId" : "c6830964-8e64-40d8-8c12-1044f592b6d8",
        "authorId" : "491bcd91-bc8d-4f54-b5fd-d6c7be5e8693",
        "body" : "A more general question is \"Why does `PredicatedTransformation` have a special constructor rather than use `configure(Map<String, ?>)`?\" This arises because `PredicatedTransformer` is a bit special. In particular is has to be passed an already configured `Predicate` and a `Transformation`, which you couldn't do with normal `Transformation` (which can only be configured with the types supported by `ConfigDef`).\r\n\r\nI guess we could use `configure(Map<String, ?>)`, but then we have to instantiate a Map at this call site only to unpick it again in `PredicatedTransformation`, which feels like more work than just having a constructor. But if you prefer the consistency of using `configure()` I'm happy to do it.",
        "createdAt" : "2020-05-22T06:32:57Z",
        "updatedAt" : "2020-05-28T08:23:52Z",
        "lastEditedBy" : "491bcd91-bc8d-4f54-b5fd-d6c7be5e8693",
        "tags" : [
        ]
      },
      {
        "id" : "0164800f-935c-4597-9477-c3004dc0ca9d",
        "parentId" : "c6830964-8e64-40d8-8c12-1044f592b6d8",
        "authorId" : "491bcd91-bc8d-4f54-b5fd-d6c7be5e8693",
        "body" : "Actually, maybe I can make this nicer by changing how ConfigDef instantiates the `PredicateTransformer`, let me see...",
        "createdAt" : "2020-05-22T06:35:10Z",
        "updatedAt" : "2020-05-28T08:23:52Z",
        "lastEditedBy" : "491bcd91-bc8d-4f54-b5fd-d6c7be5e8693",
        "tags" : [
        ]
      },
      {
        "id" : "55962997-6e73-4a85-af0c-07961904b98c",
        "parentId" : "c6830964-8e64-40d8-8c12-1044f592b6d8",
        "authorId" : "491bcd91-bc8d-4f54-b5fd-d6c7be5e8693",
        "body" : "My idea was to let the `PredicatedTransformer` instantiate its delegate. That could be done, I think but `PredicatedTransformer` cannot instantiate its `Predicate` because the configs for that are under the `predicates.<key>` prefix rather than `transformers.<key>`, so there's not a single `Map` which you could pass to `PredicatedTransformer.configure()` to let it instantiate both transformer and predicate. We could instantiate the predicate in `ConnectorConfig`, but pass a `Map` and let the `PredicatedTransformer` instantiate the `Transformer`, but then transformer instantiation happens in different places depending on whether it's its predicated or not, so it doesn't seem worth it. I'm back to \"if you prefer the consistency of using `configure()` I'm happy to do it.\", so just let me know.",
        "createdAt" : "2020-05-22T06:48:45Z",
        "updatedAt" : "2020-05-28T08:23:52Z",
        "lastEditedBy" : "491bcd91-bc8d-4f54-b5fd-d6c7be5e8693",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbc89818ce2a9ac9dae9ca02288f9d71b1a851da",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +289,293 @@                    Predicate<R> predicate = Utils.newInstance(getClass(predicatePrefix + \"type\"), Predicate.class);\n                    predicate.configure(originalsWithPrefix(predicatePrefix));\n                    transformations.add(new PredicatedTransformation<>(predicate, negate == null ? false : Boolean.parseBoolean(negate.toString()), transformation));\n                } else {\n                    transformations.add(transformation);"
  }
]