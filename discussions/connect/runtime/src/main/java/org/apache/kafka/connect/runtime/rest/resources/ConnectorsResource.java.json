[
  {
    "id" : "b8ed3a78-1f06-44f1-90d0-0eb432d23196",
    "prId" : 8069,
    "prUrl" : "https://github.com/apache/kafka/pull/8069#pullrequestreview-406971936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b40a7ebb-6716-4ca4-9b26-bc4d6444e3fe",
        "parentId" : null,
        "authorId" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "body" : "If only time was mocked.",
        "createdAt" : "2020-05-06T05:44:42Z",
        "updatedAt" : "2020-06-11T04:43:53Z",
        "lastEditedBy" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "tags" : [
        ]
      },
      {
        "id" : "a335c61f-6929-4dd4-a956-38f8f4e2a691",
        "parentId" : "b40a7ebb-6716-4ca4-9b26-bc4d6444e3fe",
        "authorId" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "body" : "I mean, we have stuff to do that (the `Time` interface and the `MockTime` and `SystemTime` implementations of it) but it doesn't seem like it'd be easy to leverage here, since the request timeout is performed by a call to `FutureCallback::get`, which relies on `ShutdownLatch::await` under the hood.\r\nAFAIK we don't have a great way to mock shutdown latch timeouts, but if we do, it might not be so bad to do that instead of this hack here.",
        "createdAt" : "2020-05-06T16:16:36Z",
        "updatedAt" : "2020-06-11T04:43:53Z",
        "lastEditedBy" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "tags" : [
        ]
      },
      {
        "id" : "c2add0ad-e22f-4185-999f-5cffcdb1d1c8",
        "parentId" : "b40a7ebb-6716-4ca4-9b26-bc4d6444e3fe",
        "authorId" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "body" : "Yeah, I don't think that it's worth changing everything just to mock time, especially if requires us to change the functionality.\r\nSGTM.",
        "createdAt" : "2020-05-06T20:53:18Z",
        "updatedAt" : "2020-06-11T04:43:53Z",
        "lastEditedBy" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfb1bc04832b342e614e891d6da5af1f8ebe30a5",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +83,87 @@    // but currently a worker simply leaving the group can take this long as well.\n    public static final long REQUEST_TIMEOUT_MS = 90 * 1000;\n    // Mutable for integration testing; otherwise, some tests would take at least REQUEST_TIMEOUT_MS\n    // to run\n    private static long requestTimeoutMs = REQUEST_TIMEOUT_MS;"
  },
  {
    "id" : "2da74622-da54-434e-8e7a-c4aeefae3695",
    "prId" : 8069,
    "prUrl" : "https://github.com/apache/kafka/pull/8069#pullrequestreview-406776913",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c471bab-1618-4146-849d-12a09753dfde",
        "parentId" : null,
        "authorId" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "body" : "Can this be knocked down to protected / package-private?",
        "createdAt" : "2020-05-06T05:45:06Z",
        "updatedAt" : "2020-06-11T04:43:53Z",
        "lastEditedBy" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "tags" : [
        ]
      },
      {
        "id" : "80d7e386-83b6-44c2-bbd3-2e449de39fb1",
        "parentId" : "3c471bab-1618-4146-849d-12a09753dfde",
        "authorId" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "body" : "Don't think so :(\r\nRight now it's really only useful to call this from an integration test, and those all live in a different package. We could move to a different package but it seems a little funky to put one of our integration tests in a different place from all the others, or to move all of our integration tests into the seemingly-arbitrary `org.apache.kafka.connect.runtime.rest.resources` package.",
        "createdAt" : "2020-05-06T16:19:48Z",
        "updatedAt" : "2020-06-11T04:43:53Z",
        "lastEditedBy" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfb1bc04832b342e614e891d6da5af1f8ebe30a5",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +102,106 @@\n    // For testing purposes only\n    public static void setRequestTimeout(long requestTimeoutMs) {\n        ConnectorsResource.requestTimeoutMs = requestTimeoutMs;\n    }"
  },
  {
    "id" : "f6213801-d986-4613-82ce-a91b71450e83",
    "prId" : 10822,
    "prUrl" : "https://github.com/apache/kafka/pull/10822#pullrequestreview-685385770",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "139e246b-d7d4-4036-ad76-2875f9d733db",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Maybe add a comment here:\r\n```suggestion\r\n        // In all other cases, submit the async restart request and return connector state\r\n        FutureCallback<ConnectorStateInfo> cb = new FutureCallback<>();\r\n```",
        "createdAt" : "2021-06-16T16:57:28Z",
        "updatedAt" : "2021-06-16T17:21:11Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      }
    ],
    "commit" : "27100a789ac7b44c8bc13a9e1e65713f340be9e0",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +274,278 @@\n        // In all other cases, submit the async restart request and return connector state\n        FutureCallback<ConnectorStateInfo> cb = new FutureCallback<>();\n        herder.restartConnectorAndTasks(restartRequest, cb);\n        Map<String, String> queryParameters = new HashMap<>();"
  },
  {
    "id" : "c1359d1c-3d29-4ab6-9f0a-a1043e009c7c",
    "prId" : 11132,
    "prUrl" : "https://github.com/apache/kafka/pull/11132#pullrequestreview-716024293",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58779a7c-2fb2-4c2e-8c35-2a064d6e6cf9",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "This returns `204 No Content`, right? But doesn't the old code (prior to this feature) return `200 OK` with no content? \r\n\r\n[KIP-745](https://cwiki.apache.org/confluence/display/KAFKA/KIP-745%3A+Connect+API+to+restart+connector+and+tasks) mentions using `202 Accepted` for the new behavior, but keeps the `200 OK` behavior when `includeTasks=false` and `onlyFailed=false`. \r\n\r\nAre you suggesting that we can't return `200 OK` here if there is no response body and should therefore update the KIP, or can this line be left as is and we change the `RestClient` to properly handle a null content? The issue for this test failure ([KAFKA-111]()) mentions [this code](https://github.com/apache/kafka/blob/d89ea74918ce0a1f2309a09473c9500c52af3b10/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/rest/RestClient.java#L134-L136) in the `RestClient`, which handles all 200 to <300 status codes the same way, so could we just improve that?",
        "createdAt" : "2021-07-26T22:30:59Z",
        "updatedAt" : "2021-07-26T22:31:33Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      },
      {
        "id" : "6d98adbb-b818-4afe-ad03-4ec02a384c4b",
        "parentId" : "58779a7c-2fb2-4c2e-8c35-2a064d6e6cf9",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "Thanks for the review @rhauch. I had the same questions and concerns. \r\n\r\nActually, the current behavior for both connector and task restarts is to return `HTTP/1.1 204 No Content`. So this fix should retain this behavior for the connector restart. \r\n\r\nThis seemed the most appropriate thing to do for a POST request whose response would have an empty body given the description in the RFC:\r\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.5\r\n\r\nI also think that an addendum to the KIP would be a good idea one we finish the review here. \r\nWdyt?",
        "createdAt" : "2021-07-26T22:55:10Z",
        "updatedAt" : "2021-07-26T22:59:05Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      },
      {
        "id" : "ccdc3eb0-d483-44a6-b0f0-1c24027433a3",
        "parentId" : "58779a7c-2fb2-4c2e-8c35-2a064d6e6cf9",
        "authorId" : "094f6954-1557-4cfd-9696-2d85b89e8fea",
        "body" : "@rhauch and @kkonstantine  I confirm that from AK2.8 test the old behavior was returning 204, We would need to fix the documentation and KIP. Please see below\r\n\r\n> ➜  kafka_2.13-2.8.0 curl -v -X POST http://localhost:8083/connectors/local-file-source/restart\r\n> *   Trying ::1...\r\n> * TCP_NODELAY set\r\n> * Connected to localhost (::1) port 8083 (#0)\r\n> > POST /connectors/local-file-source/restart HTTP/1.1\r\n> > Host: localhost:8083\r\n> > User-Agent: curl/7.64.1\r\n> > Accept: */*\r\n> > \r\n> < HTTP/1.1 204 No Content\r\n> < Date: Mon, 26 Jul 2021 23:41:44 GMT\r\n> < Server: Jetty(9.4.39.v20210325)\r\n> < \r\n> * Connection #0 to host localhost left intact\r\n> * Closing connection 0\r\n> ➜  kafka_2.13-2.8.0",
        "createdAt" : "2021-07-26T23:43:05Z",
        "updatedAt" : "2021-07-26T23:44:36Z",
        "lastEditedBy" : "094f6954-1557-4cfd-9696-2d85b89e8fea",
        "tags" : [
        ]
      },
      {
        "id" : "6597414a-dae2-4bd3-88a5-b5b06b87cce3",
        "parentId" : "58779a7c-2fb2-4c2e-8c35-2a064d6e6cf9",
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Awesome. Thanks, folks!",
        "createdAt" : "2021-07-27T04:16:39Z",
        "updatedAt" : "2021-07-27T04:16:40Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      },
      {
        "id" : "420a0284-21ed-494d-8c85-b9c0f9a62d74",
        "parentId" : "58779a7c-2fb2-4c2e-8c35-2a064d6e6cf9",
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "I've corrected the KIP and sent an email describing this minor correction to the vote thread for the KIP.\r\n\r\nI've also added [a comment on KAFKA-13139](https://issues.apache.org/jira/browse/KAFKA-13139?focusedCommentId=17388116&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17388116) that describes the root cause and the KIP correction.\r\n\r\nThanks, @kkonstantine and @kpatelatwork.",
        "createdAt" : "2021-07-27T14:53:03Z",
        "updatedAt" : "2021-07-27T14:53:04Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6e4d3ac035a06801c93a7d024ee8863ea9bd1e2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +270,274 @@            herder.restartConnector(connector, cb);\n            completeOrForwardRequest(cb, forwardingPath, \"POST\", headers, null, forward);\n            return Response.noContent().build();\n        }\n"
  }
]