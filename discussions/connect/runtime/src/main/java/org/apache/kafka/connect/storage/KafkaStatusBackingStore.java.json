[
  {
    "id" : "ba18bd48-ab26-4d5e-9d78-6cd02a77f1b8",
    "prId" : 8017,
    "prUrl" : "https://github.com/apache/kafka/pull/8017#pullrequestreview-350382157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "763f5d6b-6c66-4ceb-b0bc-cc318026446b",
        "parentId" : null,
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "note: That's a simple rename, because the member variable `topic` is easy to be masked by a local variable with this new feature. ",
        "createdAt" : "2020-01-29T19:53:26Z",
        "updatedAt" : "2020-01-30T01:38:40Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      }
    ],
    "commit" : "7328b172193c7c52d38fe24553e50c846e18319e",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +128,132 @@    protected final ConcurrentMap<String, ConcurrentMap<String, TopicStatus>> topics;\n\n    private String statusTopic;\n    private KafkaBasedLog<String, byte[]> kafkaLog;\n    private int generation;"
  },
  {
    "id" : "18128dba-2220-4a58-a7ac-41e6501a6b81",
    "prId" : 8017,
    "prUrl" : "https://github.com/apache/kafka/pull/8017#pullrequestreview-350532348",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d8ca16f-a5ae-48aa-a7c7-96381a34ef30",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Do we need to pass the connector name and topic name if we could instead just get them from the `TopicStatus` object?",
        "createdAt" : "2020-01-29T22:43:20Z",
        "updatedAt" : "2020-01-30T01:38:40Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      },
      {
        "id" : "992b8965-0359-419f-a7a7-efaa658cfc42",
        "parentId" : "8d8ca16f-a5ae-48aa-a7c7-96381a34ef30",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "status may be `null` when we need to represent deletes. \r\nAnd I've kept it this way to avoid constructing another object, partially defined, to represent deletes/tombstones. ",
        "createdAt" : "2020-01-29T23:46:13Z",
        "updatedAt" : "2020-01-30T01:38:40Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      },
      {
        "id" : "87f774e2-e929-457f-9732-8cb188e6afb7",
        "parentId" : "8d8ca16f-a5ae-48aa-a7c7-96381a34ef30",
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Good point. I saw this method is called with a `null` topic status, but didn't put the two together. It's fine as-is.",
        "createdAt" : "2020-01-30T01:19:20Z",
        "updatedAt" : "2020-01-30T01:38:40Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7328b172193c7c52d38fe24553e50c846e18319e",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +252,256 @@    }\n\n    private void sendTopicStatus(final String connector, final String topic, final TopicStatus status) {\n        String key = TOPIC_STATUS_PREFIX + topic + TOPIC_STATUS_SEPARATOR + connector;\n"
  },
  {
    "id" : "67d3c904-c638-4d4f-8462-930aaf9149b1",
    "prId" : 8017,
    "prUrl" : "https://github.com/apache/kafka/pull/8017#pullrequestreview-350484645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cc10777-c434-48c8-9050-faf531238ac9",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Would be nice to add a unit test for this method, which would require this to be protected for visibility to unit tests.",
        "createdAt" : "2020-01-29T22:43:28Z",
        "updatedAt" : "2020-01-30T01:38:40Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      },
      {
        "id" : "d7940d81-668d-439a-979b-c61e062048a0",
        "parentId" : "2cc10777-c434-48c8-9050-faf531238ac9",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "True. I'm adding one which I'll extend during integration testing more. ",
        "createdAt" : "2020-01-29T23:46:58Z",
        "updatedAt" : "2020-01-30T01:38:40Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      }
    ],
    "commit" : "7328b172193c7c52d38fe24553e50c846e18319e",
    "line" : 217,
    "diffHunk" : "@@ -1,1 +436,440 @@    }\n\n    private TopicStatus parseTopicStatus(byte[] data) {\n        try {\n            SchemaAndValue schemaAndValue = converter.toConnectData(statusTopic, data);"
  },
  {
    "id" : "faa4bae8-6b3d-4f51-ae54-6ec7e1c01c89",
    "prId" : 8017,
    "prUrl" : "https://github.com/apache/kafka/pull/8017#pullrequestreview-350532586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b78e6b39-6dfc-45a7-9990-9054dd071b17",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Should we be a bit more fault tolerant here in case the active record is missing the task key -- or any other fields that are required? I understand that the current code will never write such a record, but it seems easy to do just in case users need/want to manually write active topic records with missing fields.",
        "createdAt" : "2020-01-29T22:43:35Z",
        "updatedAt" : "2020-01-30T01:38:40Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      },
      {
        "id" : "1244843d-d2f8-4f64-af61-2a09f7652444",
        "parentId" : "b78e6b39-6dfc-45a7-9990-9054dd071b17",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "My intention was also to be more fault tolerant. But I also didn't want to diverge from the pattern used for the rest of the values here (e.g. `#parseConnectorStatus`). I'd suggest refactoring in a separate PR for all. ",
        "createdAt" : "2020-01-30T00:21:15Z",
        "updatedAt" : "2020-01-30T01:38:40Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      },
      {
        "id" : "5dd99cf5-c1b7-480e-9b73-e561d904aaf3",
        "parentId" : "b78e6b39-6dfc-45a7-9990-9054dd071b17",
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "That works. Refactoring existing code is probably best in a simple but separate PR.",
        "createdAt" : "2020-01-30T01:20:15Z",
        "updatedAt" : "2020-01-30T01:38:40Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7328b172193c7c52d38fe24553e50c846e18319e",
    "line" : 234,
    "diffHunk" : "@@ -1,1 +453,457 @@            return new TopicStatus((String) topicStatusMetadata.get(TOPIC_NAME_KEY),\n                    (String) topicStatusMetadata.get(TOPIC_CONNECTOR_KEY),\n                    ((Long) topicStatusMetadata.get(TOPIC_TASK_KEY)).intValue(),\n                    (long) topicStatusMetadata.get(TOPIC_DISCOVER_TIMESTAMP_KEY));\n        } catch (Exception e) {"
  },
  {
    "id" : "92772a34-9fb5-4514-b77a-b35430f9943e",
    "prId" : 8864,
    "prUrl" : "https://github.com/apache/kafka/pull/8864#pullrequestreview-452676247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea2c00c7-1351-47d5-8e32-c55054cfdda8",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "@rhauch @kkonstantine -- We deprecate `retries` via KIP-572. Not sure if we should rewrite this test right away so it does not use `retries` any longer?",
        "createdAt" : "2020-06-13T00:12:14Z",
        "updatedAt" : "2020-07-21T00:12:06Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "f9ee30b3-e4ef-4dcd-8914-dd91a3a31d92",
        "parentId" : "ea2c00c7-1351-47d5-8e32-c55054cfdda8",
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "> Not sure if we should rewrite this test right away\r\n\r\nFirst of all, this is not test code. It's actually part of the Connect runtime.\r\n\r\nSecond, I'd have to look into what we would do differently and how we would set `deliver.timeout.ms` to work with the existing logic that handles retries. Since it's not clear, I suggest we keep the current behavior of setting `retries=0` as long as that still function. We're using the `ProducerConfig.RETRIES` constant, so that can't be removed without changing this code.",
        "createdAt" : "2020-07-08T22:19:14Z",
        "updatedAt" : "2020-07-21T00:12:06Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      },
      {
        "id" : "67a71bed-bba9-4f78-bea2-f6daf3d8ab44",
        "parentId" : "ea2c00c7-1351-47d5-8e32-c55054cfdda8",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "@rhauch @kkonstantine As discussed in person, I create a ticket that is marked as blocker for 2.7 release to address this issue: https://issues.apache.org/jira/browse/KAFKA-10297",
        "createdAt" : "2020-07-20T21:31:28Z",
        "updatedAt" : "2020-07-21T00:12:06Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "d4a7f39a-7c6a-4d7d-af9a-fda45ddad981",
        "parentId" : "ea2c00c7-1351-47d5-8e32-c55054cfdda8",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Btw: @hachikuji raise a concern about this issue, too: https://github.com/apache/kafka/pull/8864#pullrequestreview-443424531\r\n\r\n> I just had one question about the proposal. Using retries=0 in the producer allows the user to have \"at-most-once\" delivery. This allows the application to implement its own retry logic for example. Do we still have a way to do this once this configuration is gone?\r\n\r\nSo maybe we need to do some follow up work in the `Producer` to make it work for Connect. But I would defer this to the follow up work.\r\n\r\nMy original though was, that setting `max.deliver.timeout.ms := request .timeout.ms` might prevent internal retries. But we need to verify this. It was also brought to my attention, that this might not work if the network disconnects -- only `retries=0` would prevent to re-open the connection but a low timeout would not prevent retries.\r\n\r\nIn KIP-572, we proposed for Kafka Streams itself, to treat `task.timeout.ms = 0` as \"no retries\" -- maybe we can do a similar thing for the producer?\r\n\r\nThere is also `max.block.ms` that we should consider. Unfortunately, I am not an expert on the `Producer`. But I would like to move forward with KIP-572 for now and are happy to help to resolve those questions.",
        "createdAt" : "2020-07-21T17:26:33Z",
        "updatedAt" : "2020-07-21T17:26:34Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6c10d88f9c6fa9d89cc500112255898e2f24845",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +149,153 @@    }\n\n    @SuppressWarnings(\"deprecation\")\n    @Override\n    public void configure(final WorkerConfig config) {"
  }
]