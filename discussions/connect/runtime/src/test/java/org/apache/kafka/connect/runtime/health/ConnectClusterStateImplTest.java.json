[
  {
    "id" : "8a626b03-5b0f-4aa5-aae4-54eb985d7199",
    "prId" : 6384,
    "prUrl" : "https://github.com/apache/kafka/pull/6384#pullrequestreview-214772987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec1513ec-7f2e-4ad8-ae05-6556ceea9c3d",
        "parentId" : null,
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "Thanks for simplifying the tests @C0urante! Definitely on the right track. \r\nAs you can see in https://github.com/apache/kafka/blob/trunk/connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaConfigBackingStoreTest.java \r\nyou can use the already existing `TestFuture` and be a bit more specific on what to capture and what you expect. \r\n\r\nFor example this could be written as: \r\n```java\r\n    @Test\r\n    public void connectors() {\r\n        Capture<Callback<Collection<String>>> callback = EasyMock.newCapture();\r\n        mockHerder.connectors(EasyMock.capture(callback));\r\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Future<Collection<String>>>() {\r\n            @Override\r\n            public Future<Collection<String>> answer() throws Throwable {\r\n                TestFuture<Collection<String>> future = new TestFuture<>();\r\n                callback.getValue().onCompletion(null, expectedConnectors);\r\n                future.resolveOnGet(expectedConnectors);\r\n                return future;\r\n            }\r\n        });\r\n        EasyMock.replay(mockHerder);\r\n        assertEquals(expectedConnectors, connectClusterState.connectors());\r\n    }\r\n```\r\nthis way you also manage to avoid unchecked casts. ",
        "createdAt" : "2019-03-14T04:01:14Z",
        "updatedAt" : "2019-04-06T00:33:55Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      },
      {
        "id" : "f22a8e00-3515-499d-b7a2-1820ed334c36",
        "parentId" : "ec1513ec-7f2e-4ad8-ae05-6556ceea9c3d",
        "authorId" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "body" : "@kkonstantine definitely prefer the `Capture`-based approach that you've outlined, but I don't think the `TestFuture`/`IAnswer` combination in your example is applicable since the future/callback we're dealing with is being passed to `Herder.connectors(...)`, instead of being returned by it.",
        "createdAt" : "2019-03-14T20:17:35Z",
        "updatedAt" : "2019-04-06T00:33:55Z",
        "lastEditedBy" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "tags" : [
        ]
      },
      {
        "id" : "f9e39993-5ed6-4f84-ad74-fb9846d7627f",
        "parentId" : "ec1513ec-7f2e-4ad8-ae05-6556ceea9c3d",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "That's correct. It's called in the method you test. I was carried away in the effort to remove the unchecked casts. ",
        "createdAt" : "2019-03-14T21:28:47Z",
        "updatedAt" : "2019-04-06T00:33:55Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      }
    ],
    "commit" : "b57429477a10cc6104ed3f89630dbee5cd38a5ea",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +56,60 @@    \n    @Test\n    public void connectors() {\n        Capture<Callback<Collection<String>>> callback = EasyMock.newCapture();\n        herder.connectors(EasyMock.capture(callback));"
  },
  {
    "id" : "8f37d610-4217-44a1-9e55-d3f82459518a",
    "prId" : 6584,
    "prUrl" : "https://github.com/apache/kafka/pull/6584#pullrequestreview-235889176",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "956c10e9-4dbb-4cf0-bfb9-69698c3d6893",
        "parentId" : null,
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "should we start writing those as lambdas for the new code (the code that is not meant to be backported prior to 2.0?)",
        "createdAt" : "2019-05-09T18:28:19Z",
        "updatedAt" : "2019-05-09T20:11:47Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      },
      {
        "id" : "f2dba906-5b78-4966-ba98-4378690ea257",
        "parentId" : "956c10e9-4dbb-4cf0-bfb9-69698c3d6893",
        "authorId" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "body" : "I wouldn't mind altering these to be lambdas but it'd be better if we could backport that change to 2.0 to avoid any merge conflicts down the road if a bug fix is discovered that needs to be backported that far as well. Since this PR is targeted at 2.3 I think we should hold off on making those changes here.",
        "createdAt" : "2019-05-09T20:03:22Z",
        "updatedAt" : "2019-05-09T20:11:47Z",
        "lastEditedBy" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "tags" : [
        ]
      },
      {
        "id" : "7e461745-2c76-4163-8b6b-fb586c359dcf",
        "parentId" : "956c10e9-4dbb-4cf0-bfb9-69698c3d6893",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "I was referring only to the newly introduced methods and their tests. Not the whole class. Not a big issue. ",
        "createdAt" : "2019-05-09T23:54:28Z",
        "updatedAt" : "2019-05-09T23:54:28Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      },
      {
        "id" : "a1366417-5506-41e3-b45b-03df8c1d4f41",
        "parentId" : "956c10e9-4dbb-4cf0-bfb9-69698c3d6893",
        "authorId" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "body" : "I think introducing mixed style here would just cause minor confusion--why use lambdas for some test cases but not for others? It wouldn't be obvious to someone without looking through the git history of the class and maybe even this PR discussion.",
        "createdAt" : "2019-05-10T01:12:24Z",
        "updatedAt" : "2019-05-10T01:12:54Z",
        "lastEditedBy" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f5e0f441dff625281899c5c22e59e295d150e12",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +80,84 @@        Capture<Callback<Map<String, String>>> callback = EasyMock.newCapture();\n        herder.connectorConfig(EasyMock.eq(connName), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() {"
  }
]