[
  {
    "id" : "7f72682d-ee0e-4d2b-8d42-c120be0154f9",
    "prId" : 6342,
    "prUrl" : "https://github.com/apache/kafka/pull/6342#pullrequestreview-209380380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a471ada-8504-42de-a234-bcf302b4f456",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Nit: this returns the _URLs_ of the online workers in this cluster. Would be good to state this explicitly in the JavaDoc, including in the `@return` statement",
        "createdAt" : "2019-02-28T17:36:25Z",
        "updatedAt" : "2019-03-12T18:08:52Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      },
      {
        "id" : "3fd5ecfc-0f84-47e5-86a3-d6311d162acc",
        "parentId" : "6a471ada-8504-42de-a234-bcf302b4f456",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "done",
        "createdAt" : "2019-03-01T00:25:04Z",
        "updatedAt" : "2019-03-12T18:08:52Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      }
    ],
    "commit" : "881a6d7941953822871e479cd08c1feebb91534c",
    "line" : 207,
    "diffHunk" : "@@ -1,1 +229,233 @@\n    /**\n     * Get the workers that are up and running.\n     *\n     * @return the list of handles of the online workers"
  },
  {
    "id" : "e1c58746-58d8-4a9f-b998-f578929bb3d4",
    "prId" : 6342,
    "prUrl" : "https://github.com/apache/kafka/pull/6342#pullrequestreview-209380412",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8eac647c-65cc-411d-97f2-21dc5e8fcb4a",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Nit: this returns the _URLs_ of the provisioned workers in this cluster. Would be good to state this explicitly in the JavaDoc, including in the `@return` statement",
        "createdAt" : "2019-02-28T17:37:00Z",
        "updatedAt" : "2019-03-12T18:08:52Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      },
      {
        "id" : "a253ede9-753d-4d80-97e5-02dfb346ced5",
        "parentId" : "8eac647c-65cc-411d-97f2-21dc5e8fcb4a",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "done",
        "createdAt" : "2019-03-01T00:25:10Z",
        "updatedAt" : "2019-03-12T18:08:52Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      }
    ],
    "commit" : "881a6d7941953822871e479cd08c1feebb91534c",
    "line" : 228,
    "diffHunk" : "@@ -1,1 +250,254 @@\n    /**\n     * Get the provisioned workers.\n     *\n     * @return the list of handles of the provisioned workers"
  },
  {
    "id" : "55bdbef8-1339-4259-9ef8-716d692ca693",
    "prId" : 6342,
    "prUrl" : "https://github.com/apache/kafka/pull/6342#pullrequestreview-211290379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f582480-1e12-4d15-b395-52a92f6cf3d6",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Are these public so that test classes using `EmbeddedConnectCluster` can change them?",
        "createdAt" : "2019-03-01T18:06:52Z",
        "updatedAt" : "2019-03-12T18:08:52Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      },
      {
        "id" : "24dce1ea-bb84-4cd9-9737-2fc76be6dc78",
        "parentId" : "8f582480-1e12-4d15-b395-52a92f6cf3d6",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "I think reading and reusing is what I had in mind too. But yes, overriding crossed my mind too. Not a too bad tradeoff, WDYT?",
        "createdAt" : "2019-03-01T21:51:41Z",
        "updatedAt" : "2019-03-12T18:08:52Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      },
      {
        "id" : "46973724-6969-4be5-84d8-32f198a82e6b",
        "parentId" : "8f582480-1e12-4d15-b395-52a92f6cf3d6",
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Yeah, that's a nice simple approach.",
        "createdAt" : "2019-03-06T15:21:59Z",
        "updatedAt" : "2019-03-12T18:08:52Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      }
    ],
    "commit" : "881a6d7941953822871e479cd08c1feebb91534c",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +101,105 @@     * A more graceful way to handle abnormal exit of services in integration tests.\n     */\n    public Exit.Procedure exitProcedure = (code, message) -> {\n        if (code != 0) {\n            String exitMessage = \"Abrupt service exit with code \" + code + \" and message \" + message;"
  },
  {
    "id" : "788cf420-2185-4a54-bb7d-63e0ba09cfa9",
    "prId" : 6342,
    "prUrl" : "https://github.com/apache/kafka/pull/6342#pullrequestreview-209793107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19e082c0-d540-4bff-8d86-1657b8976ab6",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Might be nice to have log messages (at least at DEBUG) stating that the specific connector worker is being stopped.",
        "createdAt" : "2019-03-01T18:13:58Z",
        "updatedAt" : "2019-03-12T18:08:52Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      },
      {
        "id" : "9ab8fdcf-f040-443f-8e0a-b8efe025847b",
        "parentId" : "19e082c0-d540-4bff-8d86-1657b8976ab6",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "Interestingly, the logger for integration tests is `OFF`. I'm manually turning it one with a temporary commit so far. Before I suggest a broader change, I'd like to think a bit more for which packages we should turn logging on if we move this way. \r\n\r\nHowever, I'll add the equivalent log message that we have in `startConnect` to preserve symmetry",
        "createdAt" : "2019-03-01T21:31:33Z",
        "updatedAt" : "2019-03-12T18:08:52Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      }
    ],
    "commit" : "881a6d7941953822871e479cd08c1feebb91534c",
    "line" : 179,
    "diffHunk" : "@@ -1,1 +195,199 @@        try {\n            log.info(\"Stopping worker {}\", worker);\n            worker.stop();\n        } catch (UngracefulShutdownException e) {\n            log.warn(\"Worker {} did not shutdown gracefully\", worker);"
  },
  {
    "id" : "1871d970-91d0-4581-86a0-63a2a5953333",
    "prId" : 6342,
    "prUrl" : "https://github.com/apache/kafka/pull/6342#pullrequestreview-209883394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2601d08c-ec2e-4bdc-ae65-bed146fa101d",
        "parentId" : null,
        "authorId" : "1462ba0d-5f6b-4517-98de-68943d892c2b",
        "body" : "there are some corner cases for using log4j in shutdown hooks. one that comes to mind is that log4j _might_ have already been shutdown when this function is executed. so this reduces to a Noop and hopefully doesn't throw a different error of its own.",
        "createdAt" : "2019-03-01T23:57:27Z",
        "updatedAt" : "2019-03-12T18:08:52Z",
        "lastEditedBy" : "1462ba0d-5f6b-4517-98de-68943d892c2b",
        "tags" : [
        ]
      },
      {
        "id" : "3f29d4ea-7f46-4561-a87c-6cc927b747e7",
        "parentId" : "2601d08c-ec2e-4bdc-ae65-bed146fa101d",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "that's the logger of the test right? ",
        "createdAt" : "2019-03-02T00:30:40Z",
        "updatedAt" : "2019-03-12T18:08:52Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      },
      {
        "id" : "663231d8-dd87-4392-8de3-636d746a7ddc",
        "parentId" : "2601d08c-ec2e-4bdc-ae65-bed146fa101d",
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Yeah, it doesn't seem like this would be a problem as long as `EmbeddedConnectCluster` is used in tests, which is currently the intended scope.",
        "createdAt" : "2019-03-06T15:22:50Z",
        "updatedAt" : "2019-03-12T18:08:52Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      },
      {
        "id" : "d4e569da-881d-4242-b77f-e8bdc109143d",
        "parentId" : "2601d08c-ec2e-4bdc-ae65-bed146fa101d",
        "authorId" : "1462ba0d-5f6b-4517-98de-68943d892c2b",
        "body" : "yeah, I was bringing up this up, since there are some System.exit(1) calls coming from the DistributedHerder. I don't think it matters who owns the logger at that point. The entire jvm should shutdown. having said that, I think the shutdown hooks were problematic in log4j2. so we should be fine. also, you are overriding the exit procedure here, so it should be fine. ",
        "createdAt" : "2019-03-11T07:20:27Z",
        "updatedAt" : "2019-03-12T18:08:52Z",
        "lastEditedBy" : "1462ba0d-5f6b-4517-98de-68943d892c2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "881a6d7941953822871e479cd08c1feebb91534c",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +104,108 @@        if (code != 0) {\n            String exitMessage = \"Abrupt service exit with code \" + code + \" and message \" + message;\n            log.warn(exitMessage);\n            throw new UngracefulShutdownException(exitMessage);\n        }"
  },
  {
    "id" : "183a6241-a059-4dc7-8cd9-7312e2c68b85",
    "prId" : 6342,
    "prUrl" : "https://github.com/apache/kafka/pull/6342#pullrequestreview-211290379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8d9ab63-09b2-4689-ab89-e74dc220fcd9",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Nit: missing a `@return` line here",
        "createdAt" : "2019-03-06T15:24:03Z",
        "updatedAt" : "2019-03-12T18:08:52Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      }
    ],
    "commit" : "881a6d7941953822871e479cd08c1feebb91534c",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +157,161 @@     *\n     * @return the worker handle of the worker that was provisioned\n     */\n    public WorkerHandle addWorker() {\n        WorkerHandle worker = WorkerHandle.start(workerNamePrefix + nextWorkerId.getAndIncrement(), workerProps);"
  },
  {
    "id" : "e2b893c1-d524-441c-a0da-b19039bbe62f",
    "prId" : 6342,
    "prUrl" : "https://github.com/apache/kafka/pull/6342#pullrequestreview-211290379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d2f6240-43db-416b-9cf8-d1b248f05022",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Nit: might be nice to include:\r\n```\r\n* @see #removeWorker(WorkerHandle)\r\n```",
        "createdAt" : "2019-03-06T15:24:57Z",
        "updatedAt" : "2019-03-12T18:08:52Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      }
    ],
    "commit" : "881a6d7941953822871e479cd08c1feebb91534c",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +168,172 @@     * Decommission one of the workers from this Connect cluster. Which worker is removed is\n     * implementation dependent and selection is not guaranteed to be consistent. Use this method\n     * when you don't care which worker stops.\n     *\n     * @see #removeWorker(WorkerHandle)"
  },
  {
    "id" : "fcd9490a-bd78-4194-a653-267c51a0e0e2",
    "prId" : 6342,
    "prUrl" : "https://github.com/apache/kafka/pull/6342#pullrequestreview-211290379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edba48c2-577b-4442-b11b-25f4d5159d81",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Excellent and super helpful. Thanks!",
        "createdAt" : "2019-03-06T15:28:12Z",
        "updatedAt" : "2019-03-12T18:08:52Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      }
    ],
    "commit" : "881a6d7941953822871e479cd08c1feebb91534c",
    "line" : 309,
    "diffHunk" : "@@ -1,1 +454,458 @@         * exit and halt procedures by using a runtime exception instead. Customization of the\n         * exit and halt procedures is possible through {@code exitProcedure} and {@code\n         * haltProcedure} respectively.\n         *\n         * @param mask if false, exit and halt procedures remain unchanged; true is the default."
  },
  {
    "id" : "3960c008-5ded-4470-9421-bd5034ada836",
    "prId" : 6342,
    "prUrl" : "https://github.com/apache/kafka/pull/6342#pullrequestreview-212363597",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce1de105-f1cc-47d2-8a44-537f2c440b79",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "@kkonstantine, should these two procedures be on `EmbeddedKafkaCluster` instead since they are related only to Kafka and not Connect?",
        "createdAt" : "2019-03-08T15:55:58Z",
        "updatedAt" : "2019-03-12T18:08:52Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      },
      {
        "id" : "eff8d895-6d77-4228-8074-be163282a65e",
        "parentId" : "ce1de105-f1cc-47d2-8a44-537f2c440b79",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "They are related to both. Primarily Connect I'd say. \r\n\r\nFor example, one exit call you may hit if the kafka based logs don't shutdown promptly (I think this was the root cause) is: \r\nhttps://github.com/apache/kafka/blob/trunk/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedHerder.java#L228\r\n\r\nAnd since we'll use them in Connect's tests and we have to add them somewhere, I think they are ok here. Otherwise we could consider creating separate classes. ",
        "createdAt" : "2019-03-08T16:29:20Z",
        "updatedAt" : "2019-03-12T18:08:52Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      }
    ],
    "commit" : "881a6d7941953822871e479cd08c1feebb91534c",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +120,124 @@        }\n        Exit.halt(0, message);\n    };\n\n    /**"
  }
]