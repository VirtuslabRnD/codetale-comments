[
  {
    "id" : "3e4302dd-05b7-442f-a2c1-7cb2b8fcb6ea",
    "prId" : 5194,
    "prUrl" : "https://github.com/apache/kafka/pull/5194#pullrequestreview-127808674",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd4ac10a-8ff1-4046-bd80-e3be72cdc4ef",
        "parentId" : null,
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "nit: add also another case for something not ending in `ConfigProvider` ?",
        "createdAt" : "2018-06-12T03:25:29Z",
        "updatedAt" : "2018-06-12T17:16:08Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      }
    ],
    "commit" : "b324fba4db992215ffdbb1a4ca5e9fad139f3d29",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +164,168 @@        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\n                \"org.apache.kafka.common.config.provider.FutureConfigProvider\")\n        );\n    }"
  },
  {
    "id" : "e0471a05-a941-420e-bf1f-72f23c570f82",
    "prId" : 8630,
    "prUrl" : "https://github.com/apache/kafka/pull/8630#pullrequestreview-427585449",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b26a84ea-ecde-40df-9154-6e41a2ee64d8",
        "parentId" : null,
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "The exhaustive list of classes is unmaintainable and it's highly improbable that new classes will be removed or added. \r\n\r\nCan we instead keep the existing testing based on packages, keep testing the exceptions and then test a few indicative classes that most probably won't be removed any time soon as a way to test the inclusion and exclusion from isolation?",
        "createdAt" : "2020-06-02T06:12:12Z",
        "updatedAt" : "2020-06-02T18:49:54Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      },
      {
        "id" : "d32cd924-23fd-4044-b7c2-c1dc2dc2723d",
        "parentId" : "b26a84ea-ecde-40df-9154-6e41a2ee64d8",
        "authorId" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "body" : "> The exhaustive list of classes is unmaintainable\r\n\r\nYes, it will be difficult to keep this test perfectly up-to-date without due-diligence from reviewers and committers. I think this due-diligence is valuable, and will avoid a bug-fix PR like this being necessary in the future.\r\n\r\n> it's highly improbable that new classes will be removed or added.\r\n\r\nI would say infrequent, but not improbable. This next release includes two KIPs that added classes to the api, and each had to change the whitelist and/or tests (that's why this had merge conflicts earlier).\r\n\r\nI don't think it's significantly more effort to maintain the exhaustive list than it is to maintain a reduced list of classes either. Consider this decision tree:\r\n\r\n1. Did you add an API class? \r\n    If not -> It's not necessary to change this test, since it's only concerned with API classes.\r\n2. Is your new class inside an existing isolated-by-default package?\r\n    If so -> You'd need to exclude this class, and not doing so introduces a bug.\r\n    Once you change PluginUtils, you'd naturally update PluginUtilsTest with your class name to verify the fix.\r\n3. Is your new class in a new package\r\n    If so -> You'd need to update this test even if it was a non-exhaustive packages-only test.\r\n\r\nOnly if you've fallen through all of those conditions, and added an API class in an existing package that is already whitelisted, would you save the time necessary to update this test. And in this case, the code is already correct, so the test silently diverges from the real class list, without any negative effects.",
        "createdAt" : "2020-06-02T19:55:34Z",
        "updatedAt" : "2020-06-02T19:55:35Z",
        "lastEditedBy" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "tags" : [
        ]
      },
      {
        "id" : "5618a1e1-5b70-4088-bb7d-d9475d5bdde8",
        "parentId" : "b26a84ea-ecde-40df-9154-6e41a2ee64d8",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "Sorry, I wasn't clear. I meant that I think the bookkeeping of specific classes in this test might be hard and that we might miss adding or removing an entry once a class is added or removed in any of the packages. Totally agree that we add classes and interfaces to the API as needed. \r\n\r\nThe basic principles behind classloading isolation was that we exclude everything in the framework from isolation and the users should not expect to package connect classes with their connectors. Yet, we had the need to introduce exceptions because we package some of the Connect plugins (Connectors, SMTs and Converters and etc) with the framework itself. That explains the inclusion and exclusion lists here and why specific classes/interfaces are present. The intention is keep this \"per java package\" approach and add only the necessary exceptions. That's why I suggested that an per class explicit listing here might be a bit tedious and perhaps a bit surprising to developers that contribute a class that is properly isolated but they'd be ask to add it here (e.g. a new SMT). \r\n\r\nHaving said that the benefits of this PR outweigh my concern atm, so I'm happy to move forward and include the test refactoring as well. ",
        "createdAt" : "2020-06-09T22:20:20Z",
        "updatedAt" : "2020-06-09T22:20:20Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      }
    ],
    "commit" : "df11574f7e5ef013fe349d60b6a953b0d77f9a89",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +111,115 @@            \"org.apache.kafka.connect.data.\",\n            \"org.apache.kafka.connect.data.ConnectSchema\",\n            \"org.apache.kafka.connect.data.Date\",\n            \"org.apache.kafka.connect.data.Decimal\",\n            \"org.apache.kafka.connect.data.Field\","
  },
  {
    "id" : "2eb8a60e-3d67-4627-a1ae-134e07e7433b",
    "prId" : 8699,
    "prUrl" : "https://github.com/apache/kafka/pull/8699#pullrequestreview-419729329",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ae90469-0cec-4437-b46b-03fb4d2d91f9",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Should we also check the other two predicate implementations, too? I know it's not strictly required, but it would help to better ensure the pattern matches more than just one implementation.",
        "createdAt" : "2020-05-27T17:52:56Z",
        "updatedAt" : "2020-05-28T08:23:52Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      },
      {
        "id" : "78abf53d-a481-48b7-959e-892479947205",
        "parentId" : "2ae90469-0cec-4437-b46b-03fb4d2d91f9",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "Given the small number of predicates, I agree with @rhauch ",
        "createdAt" : "2020-05-28T02:07:11Z",
        "updatedAt" : "2020-05-28T08:23:52Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbc89818ce2a9ac9dae9ca02288f9d71b1a851da",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +135,139 @@        assertTrue(PluginUtils.shouldLoadInIsolation(\n                \"org.apache.kafka.connect.transforms.predicates.TopicNameMatches\")\n        );\n        assertTrue(PluginUtils.shouldLoadInIsolation(\"org.apache.kafka.connect.json.\"));\n        assertTrue(PluginUtils.shouldLoadInIsolation("
  }
]