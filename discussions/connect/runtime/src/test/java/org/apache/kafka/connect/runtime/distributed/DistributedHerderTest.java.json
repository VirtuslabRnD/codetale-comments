[
  {
    "id" : "0de141f4-d9d4-4614-b945-6193babfd0ca",
    "prId" : 6982,
    "prUrl" : "https://github.com/apache/kafka/pull/6982#pullrequestreview-253010899",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e33161b3-12f7-4e77-8de4-2cef16d39b0d",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Obviously a pre-existing problem, but we should probably try to avoid brittle expectations like this.",
        "createdAt" : "2019-06-21T20:02:13Z",
        "updatedAt" : "2019-06-21T20:02:13Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "9bc0f6d8-e603-4115-a5db-7b1dc04d099d",
        "parentId" : "e33161b3-12f7-4e77-8de4-2cef16d39b0d",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "Yeah, my other option would be to accept `any` String as reason, but I felt that the reason is connected with the actual call, so I think the assertion can be a bit specific here. I hope the reason won't change often. If and when it changes we'll have to change this test case too.",
        "createdAt" : "2019-06-21T20:06:11Z",
        "updatedAt" : "2019-06-21T20:06:12Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      },
      {
        "id" : "2f596572-8b32-4fd2-a371-7468ead8b202",
        "parentId" : "e33161b3-12f7-4e77-8de4-2cef16d39b0d",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "If the reason is important, maybe we should put an enum type behind it or something. Anyway, not a major issue.",
        "createdAt" : "2019-06-21T20:08:58Z",
        "updatedAt" : "2019-06-21T20:08:58Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "87675a5b559a29ea86c096a8e6dd73c814246810",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1443,1447 @@        configBackingStore.refresh(EasyMock.anyLong(), EasyMock.anyObject(TimeUnit.class));\n        EasyMock.expectLastCall().andThrow(new TimeoutException());\n        member.maybeLeaveGroup(EasyMock.eq(\"taking too long to read the log\"));\n        EasyMock.expectLastCall();\n        PowerMock.expectPrivate(herder, \"backoff\", DistributedConfig.WORKER_UNSYNC_BACKOFF_MS_DEFAULT);"
  },
  {
    "id" : "fc3c15f1-e48a-4813-8ee9-738b8024cda5",
    "prId" : 8069,
    "prUrl" : "https://github.com/apache/kafka/pull/8069#pullrequestreview-428299707",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cf91c65-727a-4e52-b07c-7ec5ab55ae0d",
        "parentId" : null,
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "this seems to refer to `member.wakeup`. Best to follow that method. ",
        "createdAt" : "2020-06-10T17:57:26Z",
        "updatedAt" : "2020-06-11T04:43:54Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfb1bc04832b342e614e891d6da5af1f8ebe30a5",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +257,261 @@        PowerMock.expectLastCall();\n        EasyMock.expect(worker.isRunning(CONN1)).andReturn(true);\n        PowerMock.expectLastCall();\n        EasyMock.expect(worker.connectorTaskConfigs(CONN1, conn1SinkConfig)).andReturn(TASK_CONFIGS);\n        worker.startTask(EasyMock.eq(TASK1), EasyMock.<ClusterConfigState>anyObject(), EasyMock.<Map<String, String>>anyObject(), EasyMock.<Map<String, String>>anyObject(),"
  },
  {
    "id" : "cb3afa89-cb6e-42ff-a476-420cc59fe83b",
    "prId" : 8069,
    "prUrl" : "https://github.com/apache/kafka/pull/8069#pullrequestreview-428299707",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96323ae0-a6d5-4e54-bad8-3443afe28937",
        "parentId" : null,
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "This call is missing an `expectLastCall`. Here an in a couple other places. ",
        "createdAt" : "2020-06-10T18:14:30Z",
        "updatedAt" : "2020-06-11T04:43:54Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfb1bc04832b342e614e891d6da5af1f8ebe30a5",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +292,296 @@            }\n        });\n        member.wakeup();\n        PowerMock.expectLastCall();\n        EasyMock.expect(worker.isRunning(CONN1)).andReturn(true);"
  },
  {
    "id" : "3c78dfa7-ea93-4c5f-b5a6-67463d9c551b",
    "prId" : 9765,
    "prUrl" : "https://github.com/apache/kafka/pull/9765#pullrequestreview-561193173",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13cce649-b8c2-4f16-ac1e-55b15abd1422",
        "parentId" : null,
        "authorId" : "4873aa72-3842-44ba-91a8-a59ea9830460",
        "body" : "It's hard to tell if this actually reproduces the issue or not due to the heavy mocking required. Is there a more direct way to reproduce? Maybe in `RebalanceSourceConnectorsIntegrationTest` or similar? Even if the IT ends up being flaky, having that repro would boost confidence in this fix.",
        "createdAt" : "2020-12-18T18:08:47Z",
        "updatedAt" : "2020-12-18T18:56:33Z",
        "lastEditedBy" : "4873aa72-3842-44ba-91a8-a59ea9830460",
        "tags" : [
        ]
      },
      {
        "id" : "edda7206-a7af-44a2-99a7-be3242ca57da",
        "parentId" : "13cce649-b8c2-4f16-ac1e-55b15abd1422",
        "authorId" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "body" : "Yeah, this test was a bit difficult to wrap my head around at first, but I think it's the best way to target this section of the code. I don't believe that adding a new flakey test is prudent, and making a non-flakey test with less mocks might end up to be harder to follow than this mocked test.\r\n\r\nI think what _would_ be a good test to add would be a variant which replaced this contrived reading-config-offset-topic-failure with a [genuine WakeupException thrown from the end of tick](https://github.com/apache/kafka/blob/ac7b5d3389fddf46bc53ab656de1fa7e2562efdb/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedHerder.java#L433-L443), which I believe is the true root cause of this issue most of the time. This is not easy with the boilerplate in this test as-is, and requires a little bit of refactoring to set up the rebalance during that block.",
        "createdAt" : "2021-01-04T17:09:14Z",
        "updatedAt" : "2021-01-04T17:09:14Z",
        "lastEditedBy" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "tags" : [
        ]
      }
    ],
    "commit" : "1375f01da6ce979307f7ba52362b453166c2d39e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +577,581 @@    }\n\n    public void revokeAndReassign(boolean incompleteRebalance) throws TimeoutException {\n        connectProtocolVersion = CONNECT_PROTOCOL_V1;\n        int configOffset = 1;"
  },
  {
    "id" : "9239518e-1465-4c8d-8b64-2da1c717a72a",
    "prId" : 9780,
    "prUrl" : "https://github.com/apache/kafka/pull/9780#pullrequestreview-583863980",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eabb7242-7923-469b-92be-31d850613480",
        "parentId" : null,
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "see comment above. We'll avoid the array static init too. Tests here but still that's where array lists come handy",
        "createdAt" : "2021-02-04T22:32:17Z",
        "updatedAt" : "2021-02-09T07:49:14Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      }
    ],
    "commit" : "54a3f10bc7be899cb47c6500d51ff2cec3e1e572",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +218,222 @@                new DistributedConfig(HERDER_CONFIG), worker, WORKER_ID, KAFKA_CLUSTER_ID,\n                statusBackingStore, configBackingStore, member, MEMBER_URL, metrics, time, noneConnectorClientConfigOverridePolicy,\n                new AutoCloseable[]{uponShutdown});\n\n        configUpdateListener = herder.new ConfigUpdateListener();"
  },
  {
    "id" : "c6d9e1ed-fd27-4c6f-a32f-bab527df6913",
    "prId" : 10014,
    "prUrl" : "https://github.com/apache/kafka/pull/10014#pullrequestreview-581413399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb548a43-4896-496f-b2cb-424dd121c1e9",
        "parentId" : null,
        "authorId" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "body" : "nit: Do these tests need a `PowerMock.verifyAll()` at the end? I see a `PowerMock.replayAll()` call but not any `PowerMock.expectLastCall()` or anything that makes it seem like powermock is being used functionally here.",
        "createdAt" : "2021-02-01T21:36:58Z",
        "updatedAt" : "2021-02-26T16:28:14Z",
        "lastEditedBy" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "tags" : [
        ]
      },
      {
        "id" : "001e8315-3fcd-4af5-b14d-ba3aa752500c",
        "parentId" : "eb548a43-4896-496f-b2cb-424dd121c1e9",
        "authorId" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "body" : "There are a bunch of expectations set up with the `expectRebalance` and `expectPostRebalance` methods; I've added the `PowerMock::verifyAll` call as a result. Good catch, thanks!",
        "createdAt" : "2021-02-02T14:41:25Z",
        "updatedAt" : "2021-02-26T16:28:14Z",
        "lastEditedBy" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "tags" : [
        ]
      }
    ],
    "commit" : "37287ea7bb95cf770fe5eccf9414e5f1e928409f",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +2117,2121 @@\n        PowerMock.verifyAll();\n    }\n\n    @Test"
  },
  {
    "id" : "13958b86-ad0a-482d-b0b6-f0d5fc5932b7",
    "prId" : 10014,
    "prUrl" : "https://github.com/apache/kafka/pull/10014#pullrequestreview-607645152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc122d29-277c-4ca3-abb6-43c99451ccea",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "This is the condition that in the test (and probably the majority of real-world cases) always happens quickly and immediately, but which at least theoretically could take a while if the config backing store's consumer is somehow blocked. If that were the case, then the leader's `member.poll(...)` invocation blocks indefinitely. If there are no rebalance-inducing events, config changes, or even herder requests, then isn't is possible that even if the config back store calls the listener regarding the session key update _after_ the `member.poll(...)` is called, leading to the session key expiring before the herder's `tick()` method returns?",
        "createdAt" : "2021-03-09T16:50:08Z",
        "updatedAt" : "2021-03-09T16:51:14Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      },
      {
        "id" : "782862d3-2ca9-422f-8919-2147ba9f78bd",
        "parentId" : "fc122d29-277c-4ca3-abb6-43c99451ccea",
        "authorId" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "body" : "I believe I've addressed this in my other comment; LMK what you think.",
        "createdAt" : "2021-03-09T17:00:14Z",
        "updatedAt" : "2021-03-09T17:00:14Z",
        "lastEditedBy" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "tags" : [
        ]
      }
    ],
    "commit" : "37287ea7bb95cf770fe5eccf9414e5f1e928409f",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +2101,2105 @@            configUpdateListener.onSessionKeyUpdate(updatedKey.getValue());\n            return null;\n        });\n        // Third rebalance: poll for a limited time as worker has become leader and must wake up for key expiration\n        Capture<Long> pollTimeout = EasyMock.newCapture();"
  }
]