[
  {
    "id" : "6466098e-da30-4ac1-9c27-ecff52eb282b",
    "prId" : 7315,
    "prUrl" : "https://github.com/apache/kafka/pull/7315#pullrequestreview-290830458",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8885815-90d6-46ee-b467-7b657ddd930b",
        "parentId" : null,
        "authorId" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "body" : "Nit: any reason we're blacklisting `.java` files here instead of whitelisting `.class` files? The manifest is written separately from this method, correct?",
        "createdAt" : "2019-09-18T22:04:18Z",
        "updatedAt" : "2019-10-17T00:13:30Z",
        "lastEditedBy" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "tags" : [
        ]
      },
      {
        "id" : "1a625334-0ea6-4a0f-8642-6e0503eac3fe",
        "parentId" : "f8885815-90d6-46ee-b467-7b657ddd930b",
        "authorId" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "body" : "With the current set of test plugins which each contain a single java file, these two strategies are identical.\r\nI had an earlier setup that was actually calling `ServiceLoader.load` and I needed to include a `META-INF/services` file, which ends in neither `.java` nor `.class`. These sorts of arbitrary resources should be included in the final jar when they're defined.",
        "createdAt" : "2019-09-19T00:28:07Z",
        "updatedAt" : "2019-10-17T00:13:30Z",
        "lastEditedBy" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "tags" : [
        ]
      },
      {
        "id" : "5be7cb4b-91dd-42eb-9e8a-5377eb6fd1da",
        "parentId" : "f8885815-90d6-46ee-b467-7b657ddd930b",
        "authorId" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "body" : "Gotcha. Okay, two points:\r\n\r\n1) It may be overkill, but you may want to consider separating the input (source, resource, etc.) files from the output (compiled class, JAR) files. It'd more closely mirror the build setup that's commonly used for Java projects and would probably make this code easier to modify in the future.\r\n2) This bug initially surfaced with use of the `ServiceLoader` mechanism; it'd be great if we could have a test that verifies that the changes here fix how that works in isolated plugins.",
        "createdAt" : "2019-09-19T22:24:05Z",
        "updatedAt" : "2019-10-17T00:13:30Z",
        "lastEditedBy" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d4993ff956913085852d3b4bf54bd02b8ce144f",
    "line" : 248,
    "diffHunk" : "@@ -1,1 +246,250 @@        List<Path> paths = Files.walk(inputDir)\n            .filter(Files::isRegularFile)\n            .filter(path -> !path.toFile().getName().endsWith(\".java\"))\n            .collect(Collectors.toList());\n        for (Path path : paths) {"
  },
  {
    "id" : "543899a3-db0c-4b85-aaa1-2f7896faa83b",
    "prId" : 7315,
    "prUrl" : "https://github.com/apache/kafka/pull/7315#pullrequestreview-297567042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "317b3993-ac88-48ff-ac3d-9e8ca77d55e2",
        "parentId" : null,
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "curious. Is there an issue if we load those early? (and therefore get their name without risking typos?)",
        "createdAt" : "2019-09-25T17:45:00Z",
        "updatedAt" : "2019-10-17T00:13:30Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      },
      {
        "id" : "5f13c377-ebd7-453f-8fca-14e12e2d1e69",
        "parentId" : "317b3993-ac88-48ff-ac3d-9e8ca77d55e2",
        "authorId" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "body" : "We can't reference this as `AlwaysThrowExceptions.class.getName()`, because these plugins live in the resources directory, and aren't really recognized as compilable classes. They can't be included as a compilable class in the system class loader, because then we wouldn't be able to adequately test the isolation.\r\nWe could determine the class name by scanning for `Converter` implementations inside the plugins directory, but then this adds more complication. It would essentially duplicate logic inside Kafka itself, which may be under test in the first place.",
        "createdAt" : "2019-09-25T22:32:15Z",
        "updatedAt" : "2019-10-17T00:13:30Z",
        "lastEditedBy" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "tags" : [
        ]
      },
      {
        "id" : "7165d54d-1d87-4258-9771-d3ea4c54cdd5",
        "parentId" : "317b3993-ac88-48ff-ac3d-9e8ca77d55e2",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "I'd like to insist a bit here, so that we are quite deliberate in terms of what is loaded and when. Isolation aims to isolate class loading even from the system classloader. When you use the delegating classloader in your tests, isn't such isolation happening?",
        "createdAt" : "2019-09-26T15:55:37Z",
        "updatedAt" : "2019-10-17T00:13:30Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      },
      {
        "id" : "0f2f039e-f5c6-4e3d-ba5d-3fb8d65c36ec",
        "parentId" : "317b3993-ac88-48ff-ac3d-9e8ca77d55e2",
        "authorId" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "body" : "If these plugin classes were included as normal classes, they would be part of the system classloader. The tests would then also need to verify that we were not falling back to the system classloader, where under the current system, these classes are not present, and any fallback would thrown an error.\r\n\r\nWe would need to also produce a jar for creating the `PluginClassLoader`, and I'm not sure how to extract additional jars from the main source directory for use in the `PluginClassLoader`s.",
        "createdAt" : "2019-09-26T18:25:25Z",
        "updatedAt" : "2019-10-17T00:13:30Z",
        "lastEditedBy" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "tags" : [
        ]
      },
      {
        "id" : "4092d801-d14f-44a8-bf28-2d8b0ccf4572",
        "parentId" : "317b3993-ac88-48ff-ac3d-9e8ca77d55e2",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "If you have an instance of a class object you can get the classloader that loaded the class. This way you could verify whether it was found from the plugin.path or not. \r\n\r\nHaven't checkout the code to see if there are any other hoops you'd need to jump to make reasonable assertions on your tests. But this could be a way. Again, it's not only about using Class objects instead of String objects but also to make the tests more robust by making sure that a class is verified as found by a plugin classloader and not the system one. Just another thought, but we've already made good progress with these tests",
        "createdAt" : "2019-09-26T20:20:04Z",
        "updatedAt" : "2019-10-17T00:13:30Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      },
      {
        "id" : "c895f109-7ed2-47b8-9ae1-cd3507f40567",
        "parentId" : "317b3993-ac88-48ff-ac3d-9e8ca77d55e2",
        "authorId" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "body" : "In order to verify that the PluginClassLoader is active, these checks are already being done. If these strings are wrong, a ClassNotFound exception will be thrown during the tests and it won't go unnoticed. I don't think there are any benefits here for getting these classnames to typecheck.",
        "createdAt" : "2019-09-27T16:16:31Z",
        "updatedAt" : "2019-10-17T00:13:30Z",
        "lastEditedBy" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "tags" : [
        ]
      },
      {
        "id" : "39b87c4b-9cde-4cf2-bd45-05aa2f4a3293",
        "parentId" : "317b3993-ac88-48ff-ac3d-9e8ca77d55e2",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "Thanks. Not a blocker. ",
        "createdAt" : "2019-10-04T15:57:08Z",
        "updatedAt" : "2019-10-17T00:13:30Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d4993ff956913085852d3b4bf54bd02b8ce144f",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +69,73 @@     * Class name of a plugin which will always throw an exception during loading\n     */\n    public static final String ALWAYS_THROW_EXCEPTION = \"test.plugins.AlwaysThrowException\";\n    /**\n     * Class name of a plugin which samples information about its initialization."
  }
]