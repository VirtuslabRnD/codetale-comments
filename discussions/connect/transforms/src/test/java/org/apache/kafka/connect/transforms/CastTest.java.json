[
  {
    "id" : "3fb45196-013b-4bc0-b696-d4182d691eee",
    "prId" : 4633,
    "prUrl" : "https://github.com/apache/kafka/pull/4633#pullrequestreview-105458801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cfb4a528-c4ff-4e8d-9b38-c5bf33a8b6b5",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Since this PR modifies the logic that builds the schema, it might be good to add a block that tests the schemas of each field in the resulting schema. Something like the following (which I don't know if it compiles):\r\n\r\n```\r\n\r\n        Schema transformedSchema = ((Struct) transformed.value()).schema();\r\n        assertEquals(Schema.INT16_SCHEMA, transformedSchema.field(\"int8\").schema());\r\n        assertEquals(Schema.OPTIONAL_INT32_SCHEMA, transformedSchema.field(\"int16\").schema());\r\n        assertEquals(Schema.INT64_SCHEMA, transformedSchema.field(\"int32\").schema());\r\n        assertEquals(Schema.BOOLEAN_SCHEMA, transformedSchema.field(\"int64\").schema());\r\n        assertEquals(Schema.FLOAT64_SCHEMA, transformedSchema.field(\"float32\").schema());\r\n        assertEquals(Schema.BOOLEAN_SCHEMA, transformedSchema.field(\"float64\").schema());\r\n        assertEquals(Schema.INT8_SCHEMA, transformedSchema.field(\"boolean\").schema());\r\n        assertEquals(Schema.INT32_SCHEMA, transformedSchema.field(\"string\").schema());\r\n        assertEquals(Schema.OPTIONAL_INT32_SCHEMA, transformedSchema.field(\"optional\").schema());\r\n        // The following fields are not changed\r\n        //assertEquals(Timestamp.SCHEMA, transformedSchema.field(\"timestamp\").schema());\r\n```\r\n",
        "createdAt" : "2018-03-20T17:33:27Z",
        "updatedAt" : "2018-03-20T17:35:58Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      }
    ],
    "commit" : "697ef512bfe1ca7411db6abfe4a86c4dbf642d4f",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +336,340 @@        assertEquals((byte) 1, ((Struct) transformed.value()).get(\"boolean\"));\n        assertEquals(42, ((Struct) transformed.value()).get(\"string\"));\n        assertEquals(new Date(0), ((Struct) transformed.value()).get(\"timestamp\"));\n        assertNull(((Struct) transformed.value()).get(\"optional\"));\n    }"
  }
]