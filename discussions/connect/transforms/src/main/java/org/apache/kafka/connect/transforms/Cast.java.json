[
  {
    "id" : "16aef47c-f4e2-4e5b-8a8d-197bbf740002",
    "prId" : 7371,
    "prUrl" : "https://github.com/apache/kafka/pull/7371#pullrequestreview-291845831",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2cc0317-9132-49e0-ab8c-92454a2db68a",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Can we easily make these non-static and protected so that they can be customized by a subclass if needed? We should avoid making too many changes other than what's required, but if this only affects a few other lines it might be worth it.",
        "createdAt" : "2019-09-19T22:27:27Z",
        "updatedAt" : "2019-10-02T20:31:07Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      },
      {
        "id" : "8e4d9446-f7f0-4d15-869c-c81dd4b732b3",
        "parentId" : "f2cc0317-9132-49e0-ab8c-92454a2db68a",
        "authorId" : "4873aa72-3842-44ba-91a8-a59ea9830460",
        "body" : "Err.. to clarify, we are talking about the `fromLogical`, `toLogical` methods on the Date, Decimal, Time, and Timestamp classes? I can see value in making these non-static, part of a LogicalType interface. Or, are we talking about the new encodeLogicalType(), and existing castTo* methods? These I feel are more implementation details of Cast and should remain private if possible.",
        "createdAt" : "2019-09-21T05:48:48Z",
        "updatedAt" : "2019-10-02T20:31:07Z",
        "lastEditedBy" : "4873aa72-3842-44ba-91a8-a59ea9830460",
        "tags" : [
        ]
      },
      {
        "id" : "863f81d5-5e4e-4fe1-b289-2dcbe8c9e08b",
        "parentId" : "f2cc0317-9132-49e0-ab8c-92454a2db68a",
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "No, I'm talking more about the `encode*` and `castTo*` methods in this class. I'm not suggesting we make them public, but instead I'm asking whether it would make sense to make these *protected* and *non-static* so that it would be easier to create subclasses.\r\n\r\nI guess the problem with that, though, is that they are implementation details and not part fo the public API. If anybody did create a subclass and we later changed the implementation, their subclass would no longer compile and they'd have problems running on different versions of Connect.\r\n\r\nGiven that, I think it's fine the way it is: private non-static or private static doesn't really matter except for subclasses.",
        "createdAt" : "2019-09-23T15:02:56Z",
        "updatedAt" : "2019-10-02T20:31:07Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      }
    ],
    "commit" : "af66cd102b7eaca8b7eb685a32cd914f88413656",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +229,233 @@    }\n\n    private static Object encodeLogicalType(Schema schema, Object value) {\n        switch (schema.name()) {\n            case Date.LOGICAL_NAME:"
  }
]