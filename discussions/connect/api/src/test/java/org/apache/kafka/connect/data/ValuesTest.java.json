[
  {
    "id" : "af053efe-d5ea-499a-8207-c4ce3a902266",
    "prId" : 7593,
    "prUrl" : "https://github.com/apache/kafka/pull/7593#pullrequestreview-307493294",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d6371bd-6302-48b5-8333-793fbdeff552",
        "parentId" : null,
        "authorId" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "body" : "Is there similar behavior in the map parsing? I see a similar comma consume call being ignored.\r\n\r\nConsider the following test:\r\n```\r\nSchemaAndValue schemaAndValue = Values.parseString(\"{foo:bar baz:quux}\");\r\nassertEquals(Type.STRING, schemaAndValue.schema().type());\r\nassertEquals(\"{foo:bar baz:quux}\", schemaAndValue.value());\r\n```",
        "createdAt" : "2019-10-25T20:59:09Z",
        "updatedAt" : "2019-10-25T23:37:33Z",
        "lastEditedBy" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "tags" : [
        ]
      },
      {
        "id" : "957b3fa7-84cb-4276-bf0a-16aee032e9dc",
        "parentId" : "3d6371bd-6302-48b5-8333-793fbdeff552",
        "authorId" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "body" : "Mmm, good call. This isn't broken in the existing code at the moment but an additional test (especially one that runs in a fraction of a second, like the tests for the `Values` class currently do) would definitely help prevent a regression.",
        "createdAt" : "2019-10-25T23:37:52Z",
        "updatedAt" : "2019-10-25T23:37:52Z",
        "lastEditedBy" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "tags" : [
        ]
      }
    ],
    "commit" : "d38391483b7f2c0ae8b0f794a0ce2f209d858176",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +166,170 @@        SchemaAndValue schemaAndValue = Values.parseString(\"[0 1 2]\");\n        assertEquals(Type.STRING, schemaAndValue.schema().type());\n        assertEquals(\"[0 1 2]\", schemaAndValue.value());\n    }\n"
  },
  {
    "id" : "c3fb9b6a-aa9d-473f-a675-534493fd926e",
    "prId" : 7593,
    "prUrl" : "https://github.com/apache/kafka/pull/7593#pullrequestreview-307507735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8567c2dc-05d2-424d-ae89-9c48e5867149",
        "parentId" : null,
        "authorId" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "body" : "Why aren't null keys permissible?",
        "createdAt" : "2019-10-25T21:12:25Z",
        "updatedAt" : "2019-10-25T23:37:33Z",
        "lastEditedBy" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "tags" : [
        ]
      },
      {
        "id" : "d17da849-96f4-4302-b8c9-8566f8628671",
        "parentId" : "8567c2dc-05d2-424d-ae89-9c48e5867149",
        "authorId" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "body" : "That's existing functionality in this class that I chose to preserve here. It mirrors the requirements of JSON that object keys be non-null and since there can be only one null-keyed entry in a map it doesn't seem too restrictive to not support that case. Happy to discuss if you think there's a solid use case for it, though.",
        "createdAt" : "2019-10-25T23:38:01Z",
        "updatedAt" : "2019-10-25T23:38:01Z",
        "lastEditedBy" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "tags" : [
        ]
      },
      {
        "id" : "c00aa5b6-5bfe-4d33-9978-0086faf8533f",
        "parentId" : "8567c2dc-05d2-424d-ae89-9c48e5867149",
        "authorId" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "body" : "I was not aware of the restriction on JSON object keys, and that seems like a fine standard to follow. I can't imagine it being too useful.",
        "createdAt" : "2019-10-26T03:06:28Z",
        "updatedAt" : "2019-10-26T03:06:29Z",
        "lastEditedBy" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "tags" : [
        ]
      }
    ],
    "commit" : "d38391483b7f2c0ae8b0f794a0ce2f209d858176",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +187,191 @@        SchemaAndValue schemaAndValue = Values.parseString(\"{null: 3}\");\n        assertEquals(Type.STRING, schemaAndValue.schema().type());\n        assertEquals(\"{null: 3}\", schemaAndValue.value());\n    }\n"
  },
  {
    "id" : "590c1614-96cc-4d77-8751-2b3e573e1752",
    "prId" : 7593,
    "prUrl" : "https://github.com/apache/kafka/pull/7593#pullrequestreview-307507697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31e85e70-386c-4fc9-bf8e-09ef7a3ac569",
        "parentId" : null,
        "authorId" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "body" : "Unless i'm misunderstanding something, I think these test names are inverted.\r\n```suggestion\r\n    public void shouldParseUnquotedEmbeddedMapKeysAsStrings() {\r\n```",
        "createdAt" : "2019-10-25T21:14:21Z",
        "updatedAt" : "2019-10-25T23:37:33Z",
        "lastEditedBy" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "tags" : [
        ]
      },
      {
        "id" : "d958f2e7-38ee-4d4a-ae36-eb86b36589b3",
        "parentId" : "31e85e70-386c-4fc9-bf8e-09ef7a3ac569",
        "authorId" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "body" : "The \"as strings\" part refers to \"unquoted embedded map keys\", as opposed to \"maps with unquoted embedded keys\". If that's unclear, maybe just `shouldNotParseUnquotedEmbeddedMapKeys` or `shouldFailToParseUnquotedEmbeddedMapKeys`?",
        "createdAt" : "2019-10-25T23:38:03Z",
        "updatedAt" : "2019-10-25T23:38:04Z",
        "lastEditedBy" : "f1480a85-4082-46f9-89c6-fe7231733b83",
        "tags" : [
        ]
      },
      {
        "id" : "84f76f06-b51f-490b-92f9-ea91556af19e",
        "parentId" : "31e85e70-386c-4fc9-bf8e-09ef7a3ac569",
        "authorId" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "body" : "I read these as \"should not parse X as Y\", as in X is in the input, and a Y is the output.\r\nThe input was a string which included an \"unquoted embedded map key\", and the output was a string, rather than a fully-parsed map.\r\nI now see the reading you're using, and it makes sense, since it refers to the innermost element that's being tested, rather than the whole input object.",
        "createdAt" : "2019-10-26T03:05:21Z",
        "updatedAt" : "2019-10-26T03:05:21Z",
        "lastEditedBy" : "12b658fc-2aaf-48e9-ad8b-15fd33dc8321",
        "tags" : [
        ]
      }
    ],
    "commit" : "d38391483b7f2c0ae8b0f794a0ce2f209d858176",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +74,78 @@\n    @Test\n    public void shouldNotParseUnquotedEmbeddedMapKeysAsStrings() {\n        SchemaAndValue schemaAndValue = Values.parseString(\"{foo: 3}\");\n        assertEquals(Type.STRING, schemaAndValue.schema().type());"
  }
]