[
  {
    "id" : "f02958a9-8013-4349-8010-262857b9da99",
    "prId" : 27902,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85f1971a-3c92-4655-b107-83b8fef3165d",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Without `--cascade`, the controlled pods are not deleted. They haven't caused any test failure only because the RCs created in later tests happen to have the same selector, so they select the left-over pods and deletes them. We won't be so lucky after introducing controller ref, because RC created later will see these left-over pods having a controller (which is deleted) and won't try to adopt them, so these pods will exist forever.\n",
        "createdAt" : "2016-06-22T22:11:44Z",
        "updatedAt" : "2016-06-22T22:11:44Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "27f4eca5b315d5db7c35d888a4004065ef0e6199",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2032,2036 @@    kubectl describe -f \"${file}\" \"${kube_flags[@]}\"\n    # Command\n    kubectl replace -f $replace_file --force --cascade \"${kube_flags[@]}\"\n    # Post-condition: mock service (and mock2) and mock rc (and mock2) are replaced\n    if [ \"$has_svc\" = true ]; then"
  },
  {
    "id" : "ff3c5c59-c88b-451c-9080-880dbb06f275",
    "prId" : 26775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad5c26e6-8398-483c-9eda-671108b5e1b5",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Does this mean the server won't apply a default value for cpu field?\n",
        "createdAt" : "2016-06-06T18:09:56Z",
        "updatedAt" : "2016-06-10T07:30:30Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "1656e250-4bbf-4270-9a1d-cbd39bf43feb",
        "parentId" : "ad5c26e6-8398-483c-9eda-671108b5e1b5",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "If so, need to update the description of `--cpu-percent` in `kubectl autoscale`\n",
        "createdAt" : "2016-06-06T18:10:29Z",
        "updatedAt" : "2016-06-10T07:30:30Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "4aba1aa6-a586-49ac-a076-0532b0ee46d5",
        "parentId" : "ad5c26e6-8398-483c-9eda-671108b5e1b5",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Updated description of `--cpu-percent` flag and the example of usage of `autoscale` command.\n",
        "createdAt" : "2016-06-06T19:02:53Z",
        "updatedAt" : "2016-06-10T07:30:30Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "1818b5b3fc5ac70bd07736b9d6b0d2dc75fdf1d4",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1051,1055 @@  # Post-condition: busybox0 & busybox replication controllers are autoscaled\n  # with min. of 1 replica & max of 2 replicas, and since busybox2 is malformed, it should error\n  kube::test::get_object_assert 'hpa busybox0' \"{{$hpa_min_field}} {{$hpa_max_field}} {{$hpa_cpu_field}}\" '1 2 <no value>'\n  kube::test::get_object_assert 'hpa busybox1' \"{{$hpa_min_field}} {{$hpa_max_field}} {{$hpa_cpu_field}}\" '1 2 <no value>'\n  kube::test::if_has_string \"${output_message}\" \"Object 'Kind' is missing\""
  },
  {
    "id" : "5275d13d-95bf-4a7c-b3eb-bd33e2e4ea2d",
    "prId" : 26775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14f0974b-13d2-43d5-b9e7-f70af54edd26",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Is the 80% cpu util no longer true for v1beta1 hpa? or should we verify the cpu field for v1beta1 hpa\n",
        "createdAt" : "2016-06-06T20:21:30Z",
        "updatedAt" : "2016-06-10T07:30:30Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "4e37d9b9-ef74-49b0-a5ce-f8fcbef033b6",
        "parentId" : "14f0974b-13d2-43d5-b9e7-f70af54edd26",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "The default is still applied when using v1beta1, however this is unrelated to the generator used. I can change this test to use `hpa.extenstions` but it won't fix the ux problem.\n\nIs there any way to configure `kubectl` to use v1beta1 if generator is set to `horizontalpodautoscaler/v1beta1` and v1 for `horizontalpodautoscaler/v1`?\n",
        "createdAt" : "2016-06-07T05:43:42Z",
        "updatedAt" : "2016-06-10T07:30:30Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "44939544-25cc-4c38-bc6c-1b9cc6a61981",
        "parentId" : "14f0974b-13d2-43d5-b9e7-f70af54edd26",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Also see more details in #23196.\n",
        "createdAt" : "2016-06-07T05:47:15Z",
        "updatedAt" : "2016-06-10T07:30:30Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "18ea694d-1b93-468c-b11d-7a15eb8f35dd",
        "parentId" : "14f0974b-13d2-43d5-b9e7-f70af54edd26",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Or maybe is it ok to apply the default value when using `horizontalpodautoscaler/v1beta1` in `kubectl` itself?\n",
        "createdAt" : "2016-06-07T05:49:05Z",
        "updatedAt" : "2016-06-10T07:30:30Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "288298b9-c4db-44bf-bb42-d62ad0e24645",
        "parentId" : "14f0974b-13d2-43d5-b9e7-f70af54edd26",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Ah, I see. Both generator are creating autoscaling/v1 hpa IIUC. \n",
        "createdAt" : "2016-06-07T22:36:08Z",
        "updatedAt" : "2016-06-10T07:30:30Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "3c96172a-f739-4ca4-a53e-a98b70aeed33",
        "parentId" : "14f0974b-13d2-43d5-b9e7-f70af54edd26",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Exactly.\n",
        "createdAt" : "2016-06-08T19:35:28Z",
        "updatedAt" : "2016-06-10T07:30:30Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "1818b5b3fc5ac70bd07736b9d6b0d2dc75fdf1d4",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +1663,1667 @@  # autoscale 2~3 pods, no CPU utilization specified, rc specified by name, using old generator\n  kubectl autoscale rc frontend \"${kube_flags[@]}\" --min=2 --max=3 --generator=horizontalpodautoscaler/v1beta1\n  kube::test::get_object_assert 'hpa frontend' \"{{$hpa_min_field}} {{$hpa_max_field}} {{$hpa_cpu_field}}\" '2 3 <no value>'\n  kubectl delete hpa frontend \"${kube_flags[@]}\"\n  # autoscale without specifying --max should fail"
  },
  {
    "id" : "42b2a066-93f7-4164-b3b6-e1893f96761e",
    "prId" : 25981,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfe9ccda-bfc7-4544-82df-2d4ea5930eec",
        "parentId" : null,
        "authorId" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "body" : "`--wrap=0` seems important here; why get rid of it?\n",
        "createdAt" : "2016-05-23T16:04:24Z",
        "updatedAt" : "2016-05-23T17:35:21Z",
        "lastEditedBy" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "tags" : [
        ]
      },
      {
        "id" : "0664820d-8060-405d-a166-75a70f4cc277",
        "parentId" : "bfe9ccda-bfc7-4544-82df-2d4ea5930eec",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "it's nonstandard, so it breaks on osx, and it's unnecessary, because the go base64 decoder skips newlines\n",
        "createdAt" : "2016-05-23T17:09:35Z",
        "updatedAt" : "2016-05-23T17:35:21Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "33ae2b856ebf4d47aeb97eaef737787c587de7ca",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +321,325 @@  r_writen=$(kubectl config view --raw -o jsonpath='{.clusters[?(@.name == \"test-cluster\")].cluster.certificate-authority-data}')\n\n  encoded=$(echo -n \"$cert_data\" | base64)\n  kubectl config set clusters.test-cluster.certificate-authority-data \"$encoded\"\n  e_writen=$(kubectl config view --raw -o jsonpath='{.clusters[?(@.name == \"test-cluster\")].cluster.certificate-authority-data}')"
  },
  {
    "id" : "11346ad3-6f01-45fd-812f-cd63b21221c0",
    "prId" : 25584,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15c662d9-0b0b-47da-896b-05d13d0620ee",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "slightly confused by this comment.  why exactly does `kubectl version` fail?\n",
        "createdAt" : "2016-05-25T15:18:33Z",
        "updatedAt" : "2016-07-29T18:35:37Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "009d7044-2d65-469d-828a-c452ad2aa6b1",
        "parentId" : "15c662d9-0b0b-47da-896b-05d13d0620ee",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "failure of `kubectl version` is because the generated source makes the commit hash dirty.  this was tricky to track down ! :) \n",
        "createdAt" : "2016-05-25T22:23:17Z",
        "updatedAt" : "2016-07-29T18:35:37Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "fa9cf463-11e1-474c-97bc-d65e09ab2e56",
        "parentId" : "15c662d9-0b0b-47da-896b-05d13d0620ee",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "it shouldn't fail if both the client and server were both built at a dirty commit, I think. maybe if one was built before the file was generated? seems odd though.\n",
        "createdAt" : "2016-05-31T23:44:31Z",
        "updatedAt" : "2016-07-29T18:35:37Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "fbcaa9a6-7bad-4f23-b6d0-1c1023414662",
        "parentId" : "15c662d9-0b0b-47da-896b-05d13d0620ee",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "In any case, we really do not want to _ever_ include bindata in a commit, so its the right thing to do.\n",
        "createdAt" : "2016-06-01T16:27:44Z",
        "updatedAt" : "2016-07-29T18:35:37Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "6b6ccb17-fc67-414c-b8be-ba3a1cc5edf4",
        "parentId" : "15c662d9-0b0b-47da-896b-05d13d0620ee",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "I agree that we don't want to commit bindata, and adding it to .gitignore is correct, but I think this comment may be inaccurate.\n\nI made my client dirty:\n\n``` console\n$ git diff\ndiff --git a/README.md b/README.md\nindex 24a54aa..d8b2bc5 100644\n--- a/README.md\n+++ b/README.md\n@@ -1,3 +1,5 @@\n+a change\n+\n # Kubernetes\n\n [![GoReportCard Widget]][GoReportCard] [![GoDoc Widget]][GoDoc] [![Travis Widget]][Travis] [![Coverage Status Widget]][Coverage Status]\n$ git describe --long --tags --always --dirty --abbrev=14\nv1.3.0-alpha.4-921-g06f742a5ea5605-dirty\n```\n\nbut `hack/test-cmd.sh` still passed:\n\n``` console\n$ PATH=third_party/etcd:$PATH hack/test-cmd.sh\n...\n+++ [0601 17:13:09] TEST PASSED\n```\n\nIt'd be instructive to figure out what caused this test to fail during development. But as far as I know, `kubectl version` only fails if the client/server versions don't match, which would probably only occur if you did a few independent incomplete builds.\n",
        "createdAt" : "2016-06-02T00:18:01Z",
        "updatedAt" : "2016-07-29T18:35:37Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "a1ade19d-0448-4582-a3ca-09323d00ac49",
        "parentId" : "15c662d9-0b0b-47da-896b-05d13d0620ee",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "Hmmmm... It was happening in the ci, and the fix was to do git ignore .\n\nI think iIt's specific to ci ? \n",
        "createdAt" : "2016-06-02T02:18:50Z",
        "updatedAt" : "2016-07-29T18:35:37Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "fff5842d-40ad-4ec5-be05-e3e8dc03e1be",
        "parentId" : "15c662d9-0b0b-47da-896b-05d13d0620ee",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "oh, I bet I know why.\n\nIn CI, we first do [`hack/build-go.sh`](https://github.com/kubernetes/kubernetes/blob/537602d2965806dca6b168a80488b0e75b33b016/hack/jenkins/test-dockerized.sh#L55), then [`go install ./cmd/...`](https://github.com/kubernetes/kubernetes/blob/537602d2965806dca6b168a80488b0e75b33b016/hack/jenkins/test-dockerized.sh#L56). So maybe between those two calls we made the client dirty?\n\nThough the bindata generation happens before anything is built, so I'm still confused.\n",
        "createdAt" : "2016-06-02T02:24:13Z",
        "updatedAt" : "2016-07-29T18:35:37Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "a069f58d-6ff3-49d7-a507-180b9603b924",
        "parentId" : "15c662d9-0b0b-47da-896b-05d13d0620ee",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "not sure: only way to find out is to run experiments against the CI I think ?  I can't promise that dirty commits are still an issue, since these build scripts changed a few times and also since the ci tooling may have changed .  So I think best to take a mental note and proceed with the possibility that various build tasks may be called in different orders....\n",
        "createdAt" : "2016-06-02T10:07:07Z",
        "updatedAt" : "2016-07-29T18:35:37Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      }
    ],
    "commit" : "6166083c78063e719017ddd8fb2cf4882e3749bf",
    "line" : null,
    "diffHunk" : "@@ -1,1 +43,47 @@kube::log::status \"Checking kubectl version\"\n\n# Note that this fails on a dirty commit.  To avoid that from happening, .gitignore\n# any files which might be generated at compilation.\nkubectl version"
  },
  {
    "id" : "f6753959-28c6-482b-beb0-fe56d2adb510",
    "prId" : 25509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e3083ce-e346-4a37-bb74-f83b5a819376",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Should add a test for wildcard.\n",
        "createdAt" : "2016-05-13T15:31:37Z",
        "updatedAt" : "2016-05-19T04:23:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "f10a601f-195d-493a-95b5-7893aeb8f786",
        "parentId" : "7e3083ce-e346-4a37-bb74-f83b5a819376",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "What's the expected behavior for wildcard? Wildcard in key (container name) or value (container image) or resource name?\n",
        "createdAt" : "2016-05-13T18:53:50Z",
        "updatedAt" : "2016-05-19T04:23:33Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "582683b7-1a5a-4c6b-8814-61a4329e3fbe",
        "parentId" : "7e3083ce-e346-4a37-bb74-f83b5a819376",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This was wildcard for container name so you could set image on every container in the pod.  Just key I think.\n",
        "createdAt" : "2016-05-16T20:27:14Z",
        "updatedAt" : "2016-05-19T04:23:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "7623d9f4-3e69-4a05-9790-bc375e0ae063",
        "parentId" : "7e3083ce-e346-4a37-bb74-f83b5a819376",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Added wildcard support and added test\n",
        "createdAt" : "2016-05-17T20:07:32Z",
        "updatedAt" : "2016-05-19T04:23:33Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "4332472bdea415e90fddb23f63771f6e963d0279",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1686,1690 @@  kube::test::get_object_assert deployment \"{{range.items}}{{$deployment_second_image_field}}:{{end}}\" \"${IMAGE_PERL}:\"\n  # Set the deployment's image \n  kubectl set image deployment nginx-deployment nginx=\"${IMAGE_DEPLOYMENT_R2}\" \"${kube_flags[@]}\"\n  kube::test::get_object_assert deployment \"{{range.items}}{{$deployment_image_field}}:{{end}}\" \"${IMAGE_DEPLOYMENT_R2}:\"\n  kube::test::get_object_assert deployment \"{{range.items}}{{$deployment_second_image_field}}:{{end}}\" \"${IMAGE_PERL}:\""
  },
  {
    "id" : "5090e132-1caf-47ee-9335-21a0cef443b2",
    "prId" : 25133,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fa8d349-8992-442e-9584-7d7741c6fa4b",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "How about retry like this:\n\n``` sh\nfor count in $(seq 0 3); do\n    if <the get command with 4 cassandra strings succeeded>\n      break\n    else\n      sleep $((2**count))\n    fi\ndone\n```\n",
        "createdAt" : "2016-05-05T00:41:00Z",
        "updatedAt" : "2016-05-05T01:12:17Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "f754a309-da20-4ab2-b915-a732d2f91806",
        "parentId" : "9fa8d349-8992-442e-9584-7d7741c6fa4b",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "or it's fine if we don't care whether the pods come up or not. It's up to you.\n",
        "createdAt" : "2016-05-05T00:44:17Z",
        "updatedAt" : "2016-05-05T01:12:17Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "f75b27e5-3428-458f-8998-f1c3a2d9648e",
        "parentId" : "9fa8d349-8992-442e-9584-7d7741c6fa4b",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "Good idea @janetkuo ... i think i kinda prefer explicit vs sleeps but am mostly +0 .  I'll keep as-is mostly because im lazy :)\n",
        "createdAt" : "2016-05-05T01:13:58Z",
        "updatedAt" : "2016-05-05T01:13:58Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a824aaf491e176bbd4502aa90a03f2543e5cbe7",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1732,1736 @@  kube::test::get_object_assert \"$object\" \"$request\" 'cassandra:cassandra:cassandra:cassandra:' || \\\n  kube::test::get_object_assert \"$object\" \"$request\" 'cassandra:cassandra:cassandra:' || \\\n  kube::test::get_object_assert \"$object\" \"$request\" 'cassandra:cassandra:'\n\n  kubectl delete all -l app=cassandra \"${kube_flags[@]}\""
  },
  {
    "id" : "2adb08bc-f336-40a8-a4aa-97e15debceaf",
    "prId" : 24710,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb64e621-843d-4188-9aa2-863bd9788cf3",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nit: we should probably start all other components in the same mode too (scheduler, kubelet, kube-proxy). But we can do it in a separate PR probably.\n",
        "createdAt" : "2016-05-05T06:22:55Z",
        "updatedAt" : "2016-05-05T16:08:25Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0ebcf421654b34519cde63093075e572f4c8f90",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +204,208 @@\"${KUBE_OUTPUT_HOSTBIN}/kube-controller-manager\" \\\n  --port=\"${CTLRMGR_PORT}\" \\\n  --kube-api-content-type=\"${KUBE_TEST_API_TYPE-}\" \\\n  --master=\"127.0.0.1:${API_PORT}\" 1>&2 &\nCTLRMGR_PID=$!"
  },
  {
    "id" : "7991ba5c-2300-4be4-be15-51d42eea6e48",
    "prId" : 23962,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87ced7b8-6d20-4693-840d-386392adef93",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "L781 uses `--image=nginx` and needs to be changed too\n",
        "createdAt" : "2016-04-07T20:54:38Z",
        "updatedAt" : "2016-04-08T00:55:30Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "6607df91-e695-44b4-ac85-31faa9902a53",
        "parentId" : "87ced7b8-6d20-4693-840d-386392adef93",
        "authorId" : "185604f6-2915-4313-8d6b-1d55757d0d22",
        "body" : "Done\n",
        "createdAt" : "2016-04-07T21:48:58Z",
        "updatedAt" : "2016-04-08T00:55:30Z",
        "lastEditedBy" : "185604f6-2915-4313-8d6b-1d55757d0d22",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fd47873dda941f32b75a118d9357f5e0dbcecef",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +772,776 @@  # Post-Condition: Job \"pi\" is created\n  kube::test::get_object_assert jobs \"{{range.items}}{{$id_field}}:{{end}}\" 'pi:'\n  # Clean up\n  kubectl delete jobs pi \"${kube_flags[@]}\"\n  # Post-condition: no pods exist."
  },
  {
    "id" : "174ab88b-c1c3-4081-a99b-ff8e5e6c0467",
    "prId" : 21265,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98aae359-aef5-460a-8eaf-1e0102ad9ff4",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "cleanup the namespace you created earlier.\n",
        "createdAt" : "2016-02-15T18:40:53Z",
        "updatedAt" : "2016-02-26T15:27:40Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "86795d0f-0e47-428e-a8ab-5aadb91bcc39",
        "parentId" : "98aae359-aef5-460a-8eaf-1e0102ad9ff4",
        "authorId" : "b145fbdc-4b68-45b5-b35e-49dd38c1d060",
        "body" : "done\n",
        "createdAt" : "2016-02-16T15:33:08Z",
        "updatedAt" : "2016-02-26T15:27:40Z",
        "lastEditedBy" : "b145fbdc-4b68-45b5-b35e-49dd38c1d060",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5b696ee431ad89164bb9482d85013106436c781",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +875,879 @@  kube::test::get_object_assert 'serviceaccount/test-service-account --namespace=test-service-accounts' \"{{$id_field}}\" 'test-service-account'\n  # Clean-up\n  kubectl delete serviceaccount test-service-account --namespace=test-service-accounts\n  # Clean up\n  kubectl delete namespace test-service-accounts"
  },
  {
    "id" : "4dbecc7f-7c4a-454a-b65f-37d159bcc26a",
    "prId" : 21175,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25215369-c0b5-4bc4-97b3-46ce9af3302e",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It'd be great if you could get & restore the previous context.\n",
        "createdAt" : "2016-02-18T20:24:01Z",
        "updatedAt" : "2016-02-19T20:14:08Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "65eb78b5-f754-4fa1-973e-f45d196ff534",
        "parentId" : "25215369-c0b5-4bc4-97b3-46ce9af3302e",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Oh, I should had removed this TODO, because I noticed this script switches to an empty kubeconfig before running tests: https://github.com/kubernetes/kubernetes/blob/master/hack/test-cmd.sh#L139\n",
        "createdAt" : "2016-02-18T20:29:04Z",
        "updatedAt" : "2016-02-19T20:14:08Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "314a6ab7de7437b26b3f76b76e055916988e99b3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +211,215 @@\n# TODO: we need to note down the current default namespace and set back to this\n# namespace after the tests are done.\nkubectl config view\nCONTEXT=\"test\""
  },
  {
    "id" : "3bc87bd6-4912-4650-8405-78be90d2a8c3",
    "prId" : 20260,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd39c538-78e6-47b8-9fb0-65cb74868d93",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "maybe we want a timeout in case the proxy never starts?\n",
        "createdAt" : "2016-01-28T21:32:21Z",
        "updatedAt" : "2016-01-29T00:07:22Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      }
    ],
    "commit" : "22b43d8f828d8a74e40471459711d1f43e71e106",
    "line" : null,
    "diffHunk" : "@@ -1,1 +55,59 @@\n  local attempts=0\n  while [[ -z ${PROXY_PORT} ]]; do\n    if (( ${attempts} > 9 )); then\n      kill \"${PROXY_PID}\""
  },
  {
    "id" : "549ad3e1-6f62-4b08-ba97-534ec833f75e",
    "prId" : 19840,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abd40583-6ad9-46d5-a5b2-eceabfb42321",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Add TODO here for scale too?\n",
        "createdAt" : "2016-02-08T22:53:10Z",
        "updatedAt" : "2016-02-09T23:50:12Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "4fb33774-d1db-455b-a8ca-14ee4871a1d1",
        "parentId" : "abd40583-6ad9-46d5-a5b2-eceabfb42321",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Why is this commented out? Because reaping support isn't yet merged?\n",
        "createdAt" : "2016-02-08T23:03:07Z",
        "updatedAt" : "2016-02-09T23:50:12Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "6a74453b-6ef8-4d06-aa1b-638b677d39d9",
        "parentId" : "abd40583-6ad9-46d5-a5b2-eceabfb42321",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "@bgrant0607 No, no. Because Scale is disabled for Deployments for now.\n",
        "createdAt" : "2016-02-08T23:05:35Z",
        "updatedAt" : "2016-02-09T23:50:12Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "4655c0ae-3202-4717-8033-eff7c7884a95",
        "parentId" : "abd40583-6ad9-46d5-a5b2-eceabfb42321",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "@janetkuo Done.\n",
        "createdAt" : "2016-02-08T23:12:49Z",
        "updatedAt" : "2016-02-09T23:50:12Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7a9f309361787679f2210ea4714b79420fc3cba",
    "line" : null,
    "diffHunk" : "@@ -1,1 +966,970 @@  kubectl delete job/pi \"${kube_flags[@]}\"\n  # TODO(madhusudancs): Fix this when Scale group issues are resolved (see issue #18528).\n  # ### Scale a deployment\n  # kubectl create -f examples/extensions/deployment.yaml \"${kube_flags[@]}\"\n  # # Command"
  },
  {
    "id" : "668ce18a-a650-44fd-b2ed-6017c0e198e4",
    "prId" : 19253,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a85ecbd-a84b-4cc8-8145-bbc2a1c0cb5e",
        "parentId" : null,
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Can you please add a comment that explains that you wait 1s 30 times?\n",
        "createdAt" : "2016-01-05T09:25:16Z",
        "updatedAt" : "2016-01-05T10:22:23Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "edfdf12d-e95e-4ee2-b341-5d08e95e88a2",
        "parentId" : "9a85ecbd-a84b-4cc8-8145-bbc2a1c0cb5e",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Done.\n",
        "createdAt" : "2016-01-05T10:22:48Z",
        "updatedAt" : "2016-01-05T10:22:48Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "79b6f13be00327132669649ee100bf59fe71889d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +58,62 @@  # failures.\n  if [ $# -eq 0 ]; then\n    kube::util::wait_for_url \"http://127.0.0.1:${PROXY_PORT}/healthz\" \"kubectl proxy\" 1 30\n  else\n    kube::util::wait_for_url \"http://127.0.0.1:${PROXY_PORT}/$1/healthz\" \"kubectl proxy --api-prefix=$1\" 1 30"
  },
  {
    "id" : "66669ae8-03f4-4369-becc-10262235c214",
    "prId" : 18077,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9734c4b0-24ee-4c4e-a2c3-9611826e5acd",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Remove this create as well and make the following pre-condition 2 from 3.\n",
        "createdAt" : "2015-12-02T19:31:38Z",
        "updatedAt" : "2016-02-12T09:36:02Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "61a86026-6be6-4577-baa9-7bea8241e676",
        "parentId" : "9734c4b0-24ee-4c4e-a2c3-9611826e5acd",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Not needed, since we're creating 3 in the above create command and expect them to exists. \n",
        "createdAt" : "2016-02-02T14:13:29Z",
        "updatedAt" : "2016-02-12T09:36:02Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b929424135c662415469bb2eca41516f5d35abb2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +988,992 @@\n  ### Expose replication controller as service\n  kubectl create -f examples/guestbook/frontend-controller.yaml \"${kube_flags[@]}\"\n  # Pre-condition: 3 replicas\n  kube::test::get_object_assert 'rc frontend' \"{{$rc_replicas_field}}\" '3'"
  },
  {
    "id" : "f2731fc9-75dd-41bb-b64f-da6134796d80",
    "prId" : 18077,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aed15f5a-14e6-4377-a234-b3df34afe0eb",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Remove L1078   `kubectl delete rc -l deployment.kubernetes.io/podTemplateHash \"${kube_flags[@]}\"`\n",
        "createdAt" : "2016-02-03T01:10:15Z",
        "updatedAt" : "2016-02-12T09:36:02Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "b929424135c662415469bb2eca41516f5d35abb2",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +1090,1094 @@  kubectl delete rc frontend \"${kube_flags[@]}\"\n\n  ### Auto scale deployment\n  # Pre-condition: no deployment exists\n  kube::test::get_object_assert deployment \"{{range.items}}{{$id_field}}:{{end}}\" ''"
  },
  {
    "id" : "d546071c-7633-4a53-b7a8-d21559aed887",
    "prId" : 16028,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c78ba3a9-77a1-488d-a738-e403bb2f9038",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I would expect service accounts to create secrets.  Are they not doing so for some reason?\n",
        "createdAt" : "2015-12-14T17:57:41Z",
        "updatedAt" : "2015-12-14T18:43:52Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "24b5d86c-cbe2-4d57-b781-224dc5f5a308",
        "parentId" : "c78ba3a9-77a1-488d-a738-e403bb2f9038",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "`hack-test.cmd.sh` is not running with admission control for `NamespaceLifecycle` so its actually not a prerequisite in this suite to create a `Namespace` before it is being used so there are in fact no other controllers trying to create service accounts right now.  Whether or not that is a good/bad thing is a separate topic, I think it would impact other tests in this suite outside scope of this PR.\n",
        "createdAt" : "2015-12-14T18:03:26Z",
        "updatedAt" : "2015-12-14T18:43:52Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "0f091a36-628c-4fe7-9122-e644442037bd",
        "parentId" : "c78ba3a9-77a1-488d-a738-e403bb2f9038",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "opened issue so its not lost: https://github.com/kubernetes/kubernetes/issues/18668\n",
        "createdAt" : "2015-12-14T18:46:16Z",
        "updatedAt" : "2015-12-14T18:46:16Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e0948586c35e7e7f4f7ccc39411d2726c8e767a",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +713,717 @@  ### Create a generic secret in a specific namespace\n  # Pre-condition: no SECRET exists\n  kube::test::get_object_assert 'secrets --namespace=test-secrets' \"{{range.items}}{{$id_field}}:{{end}}\" ''\n  # Command\n  kubectl create secret generic test-secret --from-literal=key1=value1 --type=test-type --namespace=test-secrets"
  },
  {
    "id" : "ec4381fa-62c5-4910-b357-1caa1cdb0fea",
    "prId" : 15420,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe510869-f2ba-4c80-b38e-3ed92fd95860",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "We can just put `! kubectl patch...` to imply that this command should fail (and then we don't need L410-417). \nIs there a test for the \"resourceVersion is NOT different from the one stored in the server\" case?\n",
        "createdAt" : "2015-10-13T16:52:11Z",
        "updatedAt" : "2015-10-13T17:41:20Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "b37eaf11-229f-4ad2-a0a2-cf24507a0e8c",
        "parentId" : "fe510869-f2ba-4c80-b38e-3ed92fd95860",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "But I want to check the error message.\n\n> Is there a test for the \"resourceVersion is NOT different from the one stored in the server\" case?\n\nThat's a good idea, I'll add one.\n",
        "createdAt" : "2015-10-13T17:10:05Z",
        "updatedAt" : "2015-10-13T17:41:20Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a503e5301a5cb2bd2a7915c08635484dee5603b6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +452,456 @@  ((resourceVersion+=100))\n  # Command\n  kubectl patch \"${kube_flags[@]}\" pod valid-pod -p='{\"spec\":{\"containers\":[{\"name\": \"kubernetes-serve-hostname\", \"image\": \"nginx\"}]},\"metadata\":{\"resourceVersion\":\"'$resourceVersion'\"}}' 2> \"${ERROR_FILE}\" || true\n  # Post-condition: should get an error reporting the conflict\n  if grep -q \"please apply your changes to the latest version and try again\" \"${ERROR_FILE}\"; then"
  },
  {
    "id" : "17f15eab-8143-40d3-ab39-9b9d7b40099e",
    "prId" : 15420,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2925dadd-4baa-414d-bfb8-bfabaad342cc",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@JanetKuo, this tests patch would be accepted if the resourceVersion is correct. PTAL. Thank you.\n",
        "createdAt" : "2015-10-13T17:43:17Z",
        "updatedAt" : "2015-10-13T17:43:17Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a503e5301a5cb2bd2a7915c08635484dee5603b6",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +434,438 @@  # Command\n  # Needs to retry because other party may change the resource.\n  for count in $(seq 0 3); do\n    resourceVersion=$(kubectl get \"${kube_flags[@]}\" pod valid-pod -o go-template='{{ .metadata.resourceVersion }}')\n    kubectl patch \"${kube_flags[@]}\" pod valid-pod -p='{\"spec\":{\"containers\":[{\"name\": \"kubernetes-serve-hostname\", \"image\": \"nginx\"}]},\"metadata\":{\"resourceVersion\":\"'$resourceVersion'\"}}' 2> \"${ERROR_FILE}\" || true"
  },
  {
    "id" : "a560e52b-f37a-48eb-835f-58708905cd45",
    "prId" : 15420,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd499db3-076b-4ba0-b9ef-c7a672e29a7a",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "If you remove this file here you won't be able to access it in the next loop. \n",
        "createdAt" : "2015-10-13T18:09:00Z",
        "updatedAt" : "2015-10-13T18:09:00Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "a4591596-d13e-4c0e-ab39-50af92aa694e",
        "parentId" : "cd499db3-076b-4ba0-b9ef-c7a672e29a7a",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "won't it be created at L438?\n",
        "createdAt" : "2015-10-13T18:13:46Z",
        "updatedAt" : "2015-10-13T18:13:46Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "b55e52dc-fc62-4577-b73b-7db082b4de7b",
        "parentId" : "cd499db3-076b-4ba0-b9ef-c7a672e29a7a",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Oh, yes. Never mind. \n",
        "createdAt" : "2015-10-13T18:14:28Z",
        "updatedAt" : "2015-10-13T18:14:28Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "a503e5301a5cb2bd2a7915c08635484dee5603b6",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +439,443 @@    if grep -q \"the object has been modified\" \"${ERROR_FILE}\"; then\n      kube::log::status \"retry $1, error: $(cat ${ERROR_FILE})\"\n      rm \"${ERROR_FILE}\"\n      sleep $((2**count))\n    else"
  },
  {
    "id" : "8eab00c8-47fa-445c-a875-2c68ae0481b4",
    "prId" : 15325,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aba46cd5-1500-45db-ba95-4c1827682180",
        "parentId" : null,
        "authorId" : null,
        "body" : "I'm not sure that I agree with this logic.  It seems that your call to kubectl-with-retry needs to succeed, or this test should bail out as failed?  You should not need (or want) --overwrite here?\n",
        "createdAt" : "2015-10-08T22:12:09Z",
        "updatedAt" : "2015-10-12T17:04:49Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "07ddceae-c3d5-4e54-a4d0-9f924ff6dd32",
        "parentId" : "aba46cd5-1500-45db-ba95-4c1827682180",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I discussed with @JanetKuo and she said the purpose of this test is to test if kubectl label/annotate works with multiple resource, and we don't care about if --overwrite is set.\n\nDo you think my comment makes sense? I need to reword it if you can't interpret it.\n",
        "createdAt" : "2015-10-08T22:31:58Z",
        "updatedAt" : "2015-10-12T17:04:49Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "936703fe-5a18-497e-a0b3-e00762659a1a",
        "parentId" : "aba46cd5-1500-45db-ba95-4c1827682180",
        "authorId" : null,
        "body" : "As discussed, sounds fine to me.  No need to reword.\n",
        "createdAt" : "2015-10-08T22:54:04Z",
        "updatedAt" : "2015-10-12T17:04:49Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "12bcea336a8ca1ce4a94a8bd45fb41fbea6208a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +842,846 @@    fi\n    # Command\n    # We need to set --overwrite, because otherwise, if the first attempt to run \"kubectl label\" \n    # fails on some, but not all, of the resources, retries will fail because it tries to modify\n    # existing labels."
  },
  {
    "id" : "d2136866-c866-4da5-8c9f-8379a6ce92b0",
    "prId" : 15325,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45189e80-5a9b-4be6-9073-56412594dbb0",
        "parentId" : null,
        "authorId" : null,
        "body" : "Same comment as above.\n",
        "createdAt" : "2015-10-08T22:12:32Z",
        "updatedAt" : "2015-10-12T17:04:49Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "12bcea336a8ca1ce4a94a8bd45fb41fbea6208a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +861,865 @@    # Command\n    # Command\n    # We need to set --overwrite, because otherwise, if the first attempt to run \"kubectl annotate\" \n    # fails on some, but not all, of the resources, retries will fail because it tries to modify\n    # existing annotations."
  },
  {
    "id" : "94105b1d-1b16-4399-9d7b-519597bb96d7",
    "prId" : 15325,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0a01d2f-238d-4677-b294-9ca28846272a",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Not sure about here... will `${KUBE_TEMP}` be different every time you run `kubectl-with-retry`?\n",
        "createdAt" : "2015-10-09T00:41:10Z",
        "updatedAt" : "2015-10-12T17:04:49Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "7f96b83b-1e84-4d58-b98a-27c944dfe091",
        "parentId" : "d0a01d2f-238d-4677-b294-9ca28846272a",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "It will be the same. But every run of test-cmd.sh shall get a different ${KUBE_TEMP}\n",
        "createdAt" : "2015-10-09T00:45:36Z",
        "updatedAt" : "2015-10-12T17:04:49Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "6dcee088-ff31-4c89-add6-532b63cf1624",
        "parentId" : "d0a01d2f-238d-4677-b294-9ca28846272a",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "IIUC, if I make parallel calls to `kubectl-with-retry`, won't they be using the same `ERROR_FILE`? \n",
        "createdAt" : "2015-10-09T00:56:36Z",
        "updatedAt" : "2015-10-12T17:04:49Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "7bcf6a2b-0051-483c-9e1f-e121d531eae5",
        "parentId" : "d0a01d2f-238d-4677-b294-9ca28846272a",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Never mind. I see what you mean. \n",
        "createdAt" : "2015-10-09T01:04:33Z",
        "updatedAt" : "2015-10-12T17:04:49Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "12bcea336a8ca1ce4a94a8bd45fb41fbea6208a7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +79,83 @@function kubectl-with-retry()\n{\n  ERROR_FILE=\"${KUBE_TEMP}/kubectl-error\"\n  for count in $(seq 0 3); do\n    kubectl \"$@\" 2> ${ERROR_FILE} || true"
  },
  {
    "id" : "ced6f41b-7f3b-4c73-bb31-ea37c84052e8",
    "prId" : 14793,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1148e82d-9284-4b4b-892c-d656b06c3438",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "When trying to get resources specified by JSON List, kubectl returns the following error. \n\n```\nerror: error: unknown type &api.List{TypeMeta:unversioned.TypeMeta{Kind:\"\", APIVersion:\"\"}, ListMeta:unversioned.ListMeta{SelfLink:\"\", ResourceVersion:\"\"}, Items:[]runtime.Object{(*runtime.Unknown)(0xc2080d2f40), (*runtime.Unknown)(0xc2080d3000)}}\n```\n\nIt's because we don't do `Flatten()` in kubectl get before `Visit()`. Is it expected behavior or we should fix this? \ncc @smarterclayton @bgrant0607 \n",
        "createdAt" : "2015-09-30T23:46:27Z",
        "updatedAt" : "2015-10-01T21:36:33Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "8a60aa60-f9a9-4410-a73f-d7c04dd87fc3",
        "parentId" : "1148e82d-9284-4b4b-892c-d656b06c3438",
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "We should definitely fix that. I thought we already fixed get with List, but perhaps it regressed. \n",
        "createdAt" : "2015-10-01T00:01:25Z",
        "updatedAt" : "2015-10-01T21:36:33Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "32d8e730-32bf-4a9f-b6b9-0764ea812ab4",
        "parentId" : "1148e82d-9284-4b4b-892c-d656b06c3438",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "I'll fix it. \n",
        "createdAt" : "2015-10-01T00:49:02Z",
        "updatedAt" : "2015-10-01T21:36:33Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "74feddbd-5dfe-40ec-8738-7b8e37b55441",
        "parentId" : "1148e82d-9284-4b4b-892c-d656b06c3438",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Fixing it in #14888\n",
        "createdAt" : "2015-10-01T01:16:44Z",
        "updatedAt" : "2015-10-01T21:36:33Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a2a5b021cb7ca9e0dfbf8267880bf31ac868fde",
    "line" : null,
    "diffHunk" : "@@ -1,1 +780,784 @@  # kubectl create -f hack/testdata/multi-resource.json \"${kube_flags[@]}\" # test fails here now\n  # TODO: test get when PR \"Fix get with List #14888\" is merged\n  # kubectl get -f hack/testdata/multi-resource-list.json \"${kube_flags[@]}\"\n  kubectl describe -f hack/testdata/multi-resource-list.json \"${kube_flags[@]}\"\n  # Command"
  },
  {
    "id" : "b4ad72c7-1add-4133-bbf7-8d223fac6744",
    "prId" : 14793,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "424076fd-b495-4952-9fbe-d45fdd91b91b",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "As much as I dislike bash meta programming, why not make this a loop over three different file suffixes for each test and verify with the exact same steps?  \n\n```\nfor suffix in (list.json concat.json concat.yaml)\n  ... same tests\n```\n",
        "createdAt" : "2015-10-02T06:49:56Z",
        "updatedAt" : "2015-10-02T06:50:25Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "493f0d5a-dad6-4a6b-b8c2-08b27a06773b",
        "parentId" : "424076fd-b495-4952-9fbe-d45fdd91b91b",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "@smarterclayton thanks for the suggestion. Since it's merged I'll send another PR for this. \n",
        "createdAt" : "2015-10-02T20:00:06Z",
        "updatedAt" : "2015-10-02T20:00:06Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a2a5b021cb7ca9e0dfbf8267880bf31ac868fde",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +735,739 @@  # TODO: add test for types like ReplicationControllerList, ServiceList\n\n  ### Create, get, describe, replace, label, annotate, and then delete service nginxsvc and replication controller my-nginx from YAML, separated by ---\n  # Pre-condition: no service (other than default kubernetes services) or replication controller is running\n  kube::test::get_object_assert services \"{{range.items}}{{$id_field}}:{{end}}\" 'kubernetes:'"
  },
  {
    "id" : "adc14b70-e908-4441-8c6e-ff8103d3048c",
    "prId" : 7540,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ccbf044-e4d2-491b-8aa2-32fb9bb99b7c",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "I get the feeling there's a cleaner way to do this, still digging through the go templating api. Suggestions? \n",
        "createdAt" : "2015-04-30T01:51:54Z",
        "updatedAt" : "2015-04-30T18:37:02Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "92fd4189-e74f-42a7-bbaa-9c6827b9266b",
        "parentId" : "5ccbf044-e4d2-491b-8aa2-32fb9bb99b7c",
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "That looks about as clean as you're likely to get it. go text/template is not very pretty.\n",
        "createdAt" : "2015-04-30T03:21:48Z",
        "updatedAt" : "2015-04-30T18:37:02Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8ea0c27e96e60dafa171b58df85b91ae65a493f",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +552,556 @@  kubectl rolling-update frontend --image=kubernetes/pause --update-period=10ns --poll-interval=10ms \"${kube_flags[@]}\"\n  # Post-condition: current image IS kubernetes/pause\n  kube::test::get_object_assert 'rc frontend' '{{range \\$c:=$rc_container_image_field}} {{\\$c.image}} {{end}}' ' +kubernetes/pause +'\n\n  ### Delete replication controller with id"
  },
  {
    "id" : "dbc82767-1cd8-462f-98ff-db1883bf54ad",
    "prId" : 5976,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dac2ecb4-4ae8-451f-bbca-92dd7b23b9f2",
        "parentId" : null,
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "Nit: s/sayan/saiyan\n",
        "createdAt" : "2015-03-26T16:54:03Z",
        "updatedAt" : "2015-03-26T18:01:13Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "700d24cb-3959-4600-a3d9-7891be0e4869",
        "parentId" : "dac2ecb4-4ae8-451f-bbca-92dd7b23b9f2",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Does that mean something?  :)\n\n----- Original Message -----\n\n> >    # Pre-condition: name is valid-pod\n> >    kube::test::get_object_assert 'pod valid-pod'\n> >    \"{{.${labels_field}.name}}\" 'valid-pod'\n> >    # Command\n> > -  kubectl label --overwrite pods valid-pod name=valid-pod-super-sayan\n> >   \"${kube_flags[@]}\"\n> > -  kubectl label --overwrite pods --all name=valid-pod-super-sayan\n> >   \"${kube_flags[@]}\"\n> \n> Nit: s/sayan/saiyan\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/5976/files#r27232026\n",
        "createdAt" : "2015-03-26T16:58:54Z",
        "updatedAt" : "2015-03-26T18:01:13Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "40c28503-973c-4c08-a5ae-70be34c65032",
        "parentId" : "dac2ecb4-4ae8-451f-bbca-92dd7b23b9f2",
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "Entirely frivolous nit. I figured you were making a dbz reference :P\n",
        "createdAt" : "2015-03-26T17:11:55Z",
        "updatedAt" : "2015-03-26T18:01:13Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "abb4d3ee-cc53-461b-af3e-882ea507b157",
        "parentId" : "dac2ecb4-4ae8-451f-bbca-92dd7b23b9f2",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I was just copying the previous person's incorrectly spelled dbz reference.\n\n----- Original Message -----\n\n> >    # Pre-condition: name is valid-pod\n> >    kube::test::get_object_assert 'pod valid-pod'\n> >    \"{{.${labels_field}.name}}\" 'valid-pod'\n> >    # Command\n> > -  kubectl label --overwrite pods valid-pod name=valid-pod-super-sayan\n> >   \"${kube_flags[@]}\"\n> > -  kubectl label --overwrite pods --all name=valid-pod-super-sayan\n> >   \"${kube_flags[@]}\"\n> \n> Entirely frivolous nit. I figured you were making a dbz reference :P\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/5976/files#r27233801\n",
        "createdAt" : "2015-03-26T17:56:41Z",
        "updatedAt" : "2015-03-26T18:01:13Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "d427cc6c-1bc1-473f-921a-3cd9e57b257a",
        "parentId" : "dac2ecb4-4ae8-451f-bbca-92dd7b23b9f2",
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "We can leave it for a more enthusiastic and less busy dbz fan to correct.\n",
        "createdAt" : "2015-03-26T18:38:44Z",
        "updatedAt" : "2015-03-26T18:38:44Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      }
    ],
    "commit" : "68c46e7f52ec3b5497aebb589c99b2ebe92300ec",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +312,316 @@  kube::test::get_object_assert 'pod valid-pod' \"{{.${labels_field}.name}}\" 'valid-pod'\n  # Command\n  kubectl label --overwrite pods --all name=valid-pod-super-sayan \"${kube_flags[@]}\"\n  # Post-condition: name is valid-pod-super-sayan\n  kube::test::get_object_assert 'pod valid-pod' \"{{.${labels_field}.name}}\" 'valid-pod-super-sayan'"
  },
  {
    "id" : "8d8fe4a5-d72a-4fe0-88f6-d887d6c50cd8",
    "prId" : 4267,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba3c8262-a1e8-4c42-bab6-405e61b5526f",
        "parentId" : null,
        "authorId" : "f5266f11-2f35-463a-bf70-5a4f0c966b69",
        "body" : "Latest conflict was here due to https://github.com/GoogleCloudPlatform/kubernetes/commit/29aae753299981140550397105a3b61c0ea6d38e\n",
        "createdAt" : "2015-02-24T19:23:49Z",
        "updatedAt" : "2015-02-24T19:23:49Z",
        "lastEditedBy" : "f5266f11-2f35-463a-bf70-5a4f0c966b69",
        "tags" : [
        ]
      }
    ],
    "commit" : "635281ebe3ecb937297a93357b792ed2a100023b",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +153,157 @@  [ ! $(kubectl delete pods \"${kube_flags[@]}\" ) ]\n  kubectl get pods \"${kube_flags[@]}\" -lname=valid-pod | grep -q 'valid-pod'\n  [ ! $(kubectl delete pods --all pods -l name=valid-pod \"${kube_flags[@]}\" ) ]   # not --all and label selector together\n  kubectl delete --all pods \"${kube_flags[@]}\" # --all remove all the pods\n  kubectl create -f examples/limitrange/valid-pod.json \"${kube_flags[@]}\""
  }
]