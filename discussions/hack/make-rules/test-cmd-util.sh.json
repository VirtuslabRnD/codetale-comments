[
  {
    "id" : "9df42bd4-0fdf-4c4b-ad1a-efcd5ad02289",
    "prId" : 65715,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65715#pullrequestreview-134638064",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6e50fc2-5bad-468c-999e-350dde7e97d9",
        "parentId" : null,
        "authorId" : "185604f6-2915-4313-8d6b-1d55757d0d22",
        "body" : "Can we put `test-cmd-util.sh` into a directory owned by sig-cli?\r\n\r\nFor example, one could create a `hack/make-rules/cmd` with its own `OWNERS` file that tags sig-cli people as reviewers/approvers",
        "createdAt" : "2018-07-02T18:02:39Z",
        "updatedAt" : "2018-07-02T18:02:52Z",
        "lastEditedBy" : "185604f6-2915-4313-8d6b-1d55757d0d22",
        "tags" : [
        ]
      },
      {
        "id" : "c83aa272-1611-4325-a7d9-a0b534faca61",
        "parentId" : "a6e50fc2-5bad-468c-999e-350dde7e97d9",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Can we put test-cmd-util.sh into a directory owned by sig-cli?\r\n> \r\n> For example, one could create a hack/make-rules/cmd with its own OWNERS file that tags sig-cli people as reviewers/approvers\r\n\r\nI'm fine with that.  @fejta you really want that done here or can we proceed with that separately?",
        "createdAt" : "2018-07-03T11:50:09Z",
        "updatedAt" : "2018-07-03T11:50:09Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "3bd17f59-eded-4aff-8e09-97be93100206",
        "parentId" : "a6e50fc2-5bad-468c-999e-350dde7e97d9",
        "authorId" : "185604f6-2915-4313-8d6b-1d55757d0d22",
        "body" : "Ideally here, so that I can approve this PR with an OWNERS file  that delegates subsequent changes to sig-cli.\r\n\r\nAlthough apparently this is already approved :smile:  ",
        "createdAt" : "2018-07-03T20:26:28Z",
        "updatedAt" : "2018-07-03T20:26:28Z",
        "lastEditedBy" : "185604f6-2915-4313-8d6b-1d55757d0d22",
        "tags" : [
        ]
      },
      {
        "id" : "ec7d8675-e170-4015-94b3-650648b0f9d9",
        "parentId" : "a6e50fc2-5bad-468c-999e-350dde7e97d9",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "@fejta the topic of moving/cleaning this is a separate issue, we're planning to clean this file, since this is hard to maintain and work with it. Ideally this will be split into a separate smaller chunks. But that's a larger task we're hoping to tackle soon-ish.",
        "createdAt" : "2018-07-04T11:46:14Z",
        "updatedAt" : "2018-07-04T11:46:15Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "bed3d819-08f1-49e0-a58c-6519d46c2a04",
        "parentId" : "a6e50fc2-5bad-468c-999e-350dde7e97d9",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Ideally here, so that I can approve this PR with an OWNERS file that delegates subsequent changes to sig-cli.\r\n> \r\n> Although apparently this is already approved\r\n\r\nI happen to be hack approver, so it was approved via pull author powers.",
        "createdAt" : "2018-07-05T13:00:21Z",
        "updatedAt" : "2018-07-05T13:00:21Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "58136ee568d2f264594e4ec4620be8d82f9446c1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +5342,5346 @@    kube::test::get_object_assert 'clusterroles -l test-cmd=auth' \"{{range.items}}{{$id_field}}:{{end}}\" 'testing-CR:'\n\n    failure_message=$(! kubectl auth reconcile \"${kube_flags[@]}\" -f test/fixtures/pkg/kubectl/cmd/auth/rbac-v1beta1.yaml 2>&1 )\n    kube::test::if_has_string \"${failure_message}\" 'only rbac.authorization.k8s.io/v1 is supported'\n"
  },
  {
    "id" : "ce3794cb-be61-4881-97d0-151427930048",
    "prId" : 64034,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64034#pullrequestreview-121618035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8678c5b2-a001-4861-ab37-4d5fccaec54f",
        "parentId" : null,
        "authorId" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "body" : "There is a chance that the deletion (as a result of `kubectl delete` above) will succeed _before_ we run this `kubectl wait` command, i.e. this test could succeed even if the `wait` command is not implemented correctly.\r\n\r\nTo make this test case more reliable, we could start `kubectl wait --for=delete` _first_, and only then execute `kubectl delete` in a separate thread.\r\nNot sure how hard it would be to implement with a shell script though, but we can write a similar unit test in Go (in addition to this change).",
        "createdAt" : "2018-05-19T04:35:19Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "tags" : [
        ]
      },
      {
        "id" : "9f90e1cc-ab05-482f-a919-5a50bab17850",
        "parentId" : "8678c5b2-a001-4861-ab37-4d5fccaec54f",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "It isn't super important, the unit tests on this command are quite thorough compared to others",
        "createdAt" : "2018-05-19T12:29:48Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "c564eac9-9f10-4b85-896e-ebcc2464e6c9",
        "parentId" : "8678c5b2-a001-4861-ab37-4d5fccaec54f",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Also I chose a namespace because they tend to delete very slowly because of finalizers",
        "createdAt" : "2018-05-19T12:37:42Z",
        "updatedAt" : "2018-05-22T12:47:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "49258593c34c377592865e2adfb3c01cd4c34bbd",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2385,2389 @@  kubectl delete namespace my-namespace --wait=false\n  # make sure that wait properly waits for finalization\n  kubectl wait --for=delete ns/my-namespace\n  output_message=$(! kubectl get ns/my-namespace 2>&1 \"${kube_flags[@]}\")\n  kube::test::if_has_string \"${output_message}\" ' not found'"
  },
  {
    "id" : "5ab95811-2390-4dc3-b632-9b95a2dcea8c",
    "prId" : 63254,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63254#pullrequestreview-116086154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7bb0a39-83fe-45e4-8151-da5c95e1d8fb",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "give a mouse a cookie...  You know someone's going to ask for a `--ignore-403-errors`",
        "createdAt" : "2018-04-27T21:17:20Z",
        "updatedAt" : "2018-04-27T21:17:20Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "deeb6b2a99d884d29bcb46f3c381a0fdeacd8a57",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +4889,4893 @@  kubectl \"${kube_flags[@]}\" api-resources\n  # find all namespaced resources that support list by name and get them\n  kubectl \"${kube_flags[@]}\" api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl \"${kube_flags[@]}\" get -o name\n\n  ################"
  },
  {
    "id" : "1c99b39f-f97d-443d-b3ef-99d62302644e",
    "prId" : 62569,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62569#pullrequestreview-112923541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05e60f1d-4756-4605-b786-7f914b9fccfa",
        "parentId" : null,
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "@soltysh this was updated, as this PR defaults to using the new generator",
        "createdAt" : "2018-04-17T17:48:49Z",
        "updatedAt" : "2018-04-18T15:38:22Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "0aec803a9cc0e2359e302cd3cbd0b49e24531d05",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1299,1303 @@  # new generator was used\n  output_message=$(kubectl get deployment.extensions/nginx-extensions -o jsonpath='{.spec.revisionHistoryLimit}')\n  kube::test::if_has_string \"${output_message}\" '2'\n  # Clean up\n  kubectl delete deployment nginx-extensions \"${kube_flags[@]}\""
  },
  {
    "id" : "639c66c6-f7e6-49d6-8c50-07e2de18a7a2",
    "prId" : 60826,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60826#pullrequestreview-103928143",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15ba197f-4549-4a22-9241-53c8950e9c07",
        "parentId" : null,
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "Also check to make sure the job was not actually created with --dry-run",
        "createdAt" : "2018-03-13T17:56:20Z",
        "updatedAt" : "2018-03-21T02:41:42Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      },
      {
        "id" : "4e09d369-e115-4f7a-bd5a-4d7588bde4d9",
        "parentId" : "15ba197f-4549-4a22-9241-53c8950e9c07",
        "authorId" : "451e6d32-0495-410e-a53b-943e3dd34a71",
        "body" : "@juanvallejo I am struggle with how to check if the job was not actually created with --dry-run",
        "createdAt" : "2018-03-14T08:57:03Z",
        "updatedAt" : "2018-03-21T02:41:42Z",
        "lastEditedBy" : "451e6d32-0495-410e-a53b-943e3dd34a71",
        "tags" : [
        ]
      },
      {
        "id" : "57e7fef5-0b81-4516-a6a8-a140394a2772",
        "parentId" : "15ba197f-4549-4a22-9241-53c8950e9c07",
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "You could try asserting on an empty jsonpath:\r\n`kube::test::get_object_assert jobs \"{{range.items}}{{$id_field}}{{end}}\" ''` ",
        "createdAt" : "2018-03-14T17:45:10Z",
        "updatedAt" : "2018-03-21T02:41:42Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3424872bd71f25cc0778504e1f27c113e34698a",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +4031,4035 @@  output_message=$(kubectl create job test-job --from=cronjob/pi --dry-run=true --namespace=test-jobs -o name)\n  # Post-condition: The text 'job.batch/test-job' should be part of the output\n  kube::test::if_has_string \"${output_message}\" 'job.batch/test-job'\n  # Post-condition: The test-job wasn't created actually\n  kube::test::get_object_assert jobs \"{{range.items}}{{$id_field}}{{end}}\" ''"
  },
  {
    "id" : "01f16d01-89f9-4e6a-8f79-6fce63259835",
    "prId" : 59579,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59579#pullrequestreview-125643631",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f7ab1de-105d-49f9-b2a4-edde8b5cf15d",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "This is still not testing your particular change. Can you add a test for your case, iow. one that will return non-zero when not allowed?",
        "createdAt" : "2018-05-11T19:48:38Z",
        "updatedAt" : "2018-05-11T19:48:42Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "7a24497e-6399-4778-bf8d-71da87c1cc09",
        "parentId" : "2f7ab1de-105d-49f9-b2a4-edde8b5cf15d",
        "authorId" : "dcfae4bb-2f0a-49cc-abd5-74cd09f2c3d4",
        "body" : "Actually there is no way to test kubectl returning exit code 1, since the apiserver is in AlwaysAllow, how can we test this?",
        "createdAt" : "2018-05-11T22:06:44Z",
        "updatedAt" : "2018-05-11T22:06:44Z",
        "lastEditedBy" : "dcfae4bb-2f0a-49cc-abd5-74cd09f2c3d4",
        "tags" : [
        ]
      },
      {
        "id" : "820a34ee-2106-4226-aa00-fbc785c989b1",
        "parentId" : "2f7ab1de-105d-49f9-b2a4-edde8b5cf15d",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Yeah, we'll have to live with a manual test. See https://github.com/kubernetes/kubernetes/pull/59579#discussion_r187638396",
        "createdAt" : "2018-05-11T22:12:03Z",
        "updatedAt" : "2018-05-11T22:12:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "47cb51a9-a495-4323-adc4-97a3bc862b1b",
        "parentId" : "2f7ab1de-105d-49f9-b2a4-edde8b5cf15d",
        "authorId" : "dcfae4bb-2f0a-49cc-abd5-74cd09f2c3d4",
        "body" : "@soltysh so what changes should I make? Since there is no way to test error exit 1 I think the commit is good as it is now.",
        "createdAt" : "2018-06-04T16:13:17Z",
        "updatedAt" : "2018-06-04T16:13:17Z",
        "lastEditedBy" : "dcfae4bb-2f0a-49cc-abd5-74cd09f2c3d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fa269a5e5e8ce6e8359f70bb1020d18eba1cd8f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +5221,5225 @@    kube::test::if_empty_string \"${output_message}\"\n    \n    output_message=$(kubectl auth can-i get pods --subresource=log 2>&1 \"${kube_flags[@]}\"; echo $?)\n    kube::test::if_has_string \"${output_message}\" '0'\n"
  },
  {
    "id" : "2b8e680a-4159-442a-b363-7e5149da2c63",
    "prId" : 59506,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59506#pullrequestreview-95545874",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00752435-c990-412d-8d97-466f44de05c4",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "is it actually related to watch or is related to the initial list?",
        "createdAt" : "2018-02-09T20:02:05Z",
        "updatedAt" : "2018-02-09T20:17:13Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "da2fdf61-7ae3-41b8-afe1-73857850b512",
        "parentId" : "00752435-c990-412d-8d97-466f44de05c4",
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "related to a check specific to \"watch\". The check made the assumption that multiple infos equals multiple resource types",
        "createdAt" : "2018-02-09T20:05:17Z",
        "updatedAt" : "2018-02-09T20:17:13Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "aea8deee03d26f1b642b4c63ea746218f28e233e",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1438,1442 @@  kubectl create cm two \"${kube_flags[@]}\"\n  kubectl create cm three \"${kube_flags[@]}\"\n  output_message=$(kubectl get configmap --chunk-size=1 --watch --request-timeout=1s 2>&1 \"${kube_flags[@]}\")\n  kube::test::if_has_not_string \"${output_message}\" \"watch is only supported on individual resources\"\n  output_message=$(kubectl get configmap --chunk-size=1 --watch-only --request-timeout=1s 2>&1 \"${kube_flags[@]}\")"
  },
  {
    "id" : "d2a26373-a0a8-4d4b-b195-fe7797b69981",
    "prId" : 59506,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59506#pullrequestreview-95545296",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61cd6bcf-25e2-4c7c-a76a-574ce9f50799",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Add a `--watch-only` test",
        "createdAt" : "2018-02-09T20:03:13Z",
        "updatedAt" : "2018-02-09T20:17:13Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "aea8deee03d26f1b642b4c63ea746218f28e233e",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1438,1442 @@  kubectl create cm two \"${kube_flags[@]}\"\n  kubectl create cm three \"${kube_flags[@]}\"\n  output_message=$(kubectl get configmap --chunk-size=1 --watch --request-timeout=1s 2>&1 \"${kube_flags[@]}\")\n  kube::test::if_has_not_string \"${output_message}\" \"watch is only supported on individual resources\"\n  output_message=$(kubectl get configmap --chunk-size=1 --watch-only --request-timeout=1s 2>&1 \"${kube_flags[@]}\")"
  },
  {
    "id" : "abb183a7-bc03-4cb3-a6c5-b7ca6f58f948",
    "prId" : 59486,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59486#pullrequestreview-97923824",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b518cb2-6a25-4a11-b973-1cdbc4be1720",
        "parentId" : null,
        "authorId" : "b145fbdc-4b68-45b5-b35e-49dd38c1d060",
        "body" : "```sh\r\nif [[ -n \"${foundError}\" ]]; then\r\n```",
        "createdAt" : "2018-02-20T15:18:52Z",
        "updatedAt" : "2018-02-20T15:18:53Z",
        "lastEditedBy" : "b145fbdc-4b68-45b5-b35e-49dd38c1d060",
        "tags" : [
        ]
      },
      {
        "id" : "c3d12f30-dd24-4681-9584-5146930140ef",
        "parentId" : "1b518cb2-6a25-4a11-b973-1cdbc4be1720",
        "authorId" : "b145fbdc-4b68-45b5-b35e-49dd38c1d060",
        "body" : "@soltysh follow up?",
        "createdAt" : "2018-02-20T17:48:37Z",
        "updatedAt" : "2018-02-20T17:48:37Z",
        "lastEditedBy" : "b145fbdc-4b68-45b5-b35e-49dd38c1d060",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fec14942c19cd45edfb0810ce99dd18f80a8e64",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +5036,5040 @@  kube::test::clear_all\n\n  if [ ! -z \"${foundError}\" ]; then\n    echo \"FAILED TESTS: \"\"${foundError}\"\n    exit 1"
  },
  {
    "id" : "3c304a79-ea8a-476c-be2b-43895bc6568f",
    "prId" : 59353,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59353#pullrequestreview-96554269",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4625316-4a7a-4b83-bbcf-16c5dfd8bbd5",
        "parentId" : null,
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "@deads2k I omitted a test for `$ kubectl get kind/myobj` as it currently fails with:\r\n```\r\n$ kubectl get kind/myobj -o name\r\nthe server doesn't have a resource type \"kind\"\r\n```\r\n\r\nWhen only a kind is given, we hit [this condition](https://github.com/kubernetes/kubernetes/pull/59353/files#diff-80a5c1e5d1429094c6ecb3ae22847912R615) in the resource builder, where we ask the mapper for a restmapping, using a GroupKind with no group, and an empty version.\r\n\r\nWe end up going through the [priority restmapper's RESTMapping method](https://github.com/kubernetes/apimachinery/blob/master/pkg/api/meta/priority.go#L156), which in turn calls the [default restmapper's RESTMappings method](https://github.com/kubernetes/apimachinery/blob/master/pkg/api/meta/restmapper.go#L485). \r\n\r\nThat method attempts to iterate through any versions given (none in this case), and then attempts to use the default groupversions which were [passed to the instance here](https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/client-go/discovery/restmapper.go#L92) in order to find any group versions with a matching group name.\r\n\r\nSince we have an empty group in this case (only using kind), this method then [proceeds to fail](https://github.com/kubernetes/apimachinery/blob/master/pkg/api/meta/restmapper.go#L513), causing us to ultimately end up with the error from the example above.\r\n\r\n[I have a patch here](https://gist.github.com/juanvallejo/1c77c14d18b14f15c09377cff0a02369) that iterates through stored gvks on the restmapper instance (added through the [AddSpecific method here](https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/client-go/discovery/restmapper.go#L110)) and does the same thing that we already attempt to do with groups: iterates through stored gvks, looking for ones that have matching `kind`s.\r\n\r\nI have tested this patch locally with [Jordan's example](https://github.com/kubernetes/kubernetes/pull/59227#issuecomment-363173986), and works as expected when attempting to fetch resources by only specifying their kind. PTAL",
        "createdAt" : "2018-02-13T23:36:25Z",
        "updatedAt" : "2018-02-15T15:33:14Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      },
      {
        "id" : "8657c00e-c6a3-441f-b53d-0a7f31a32e6a",
        "parentId" : "e4625316-4a7a-4b83-bbcf-16c5dfd8bbd5",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Isn't failure there exactly what we expect on the kind match (which shouldn't match because that isn't the kind group) and the code should fail through to the resource matching?  Why isn't it doing that?",
        "createdAt" : "2018-02-14T13:41:43Z",
        "updatedAt" : "2018-02-15T15:33:14Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "5c0726c8-a30b-4d38-b183-c15eddc2e971",
        "parentId" : "e4625316-4a7a-4b83-bbcf-16c5dfd8bbd5",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> @deads2k I omitted a test for $ kubectl get kind/myobj as it currently fails with:\r\n\r\nThat means this pull is broken.  You should be up front about the pull be broken by putting the broken test in your pull.",
        "createdAt" : "2018-02-14T13:42:19Z",
        "updatedAt" : "2018-02-15T15:33:14Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "8a3264c5-19e3-4b9c-a042-1624902c3baa",
        "parentId" : "e4625316-4a7a-4b83-bbcf-16c5dfd8bbd5",
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "> Isn't failure there exactly what we expect on the kind match (which shouldn't match because that isn't the kind group) and the code should fail through to the resource matching? Why isn't it doing that?\r\n\r\nIt is doing that. The code for resource matching is what ultimately ends up returning the error message `the server doesn't have a resource type \"kind\"`. I have added a test for `kubectl get kind -o name`",
        "createdAt" : "2018-02-14T15:27:18Z",
        "updatedAt" : "2018-02-15T15:33:14Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      },
      {
        "id" : "a49d5a8b-9f1f-4856-b7fe-9561185122d8",
        "parentId" : "e4625316-4a7a-4b83-bbcf-16c5dfd8bbd5",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> @deads2k I omitted a test for $ kubectl get kind/myobj as it currently fails with:\r\n> \r\n> $ kubectl get kind/myobj -o name\r\n> the server doesn't have a resource type \"kind\"\r\n\r\nkind is always paired with group for all non-legacy kinds.  Legacy kinds all match their resources.  We don't have to worry about this case.",
        "createdAt" : "2018-02-14T16:05:46Z",
        "updatedAt" : "2018-02-15T15:33:14Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "765f9ec68b0d0759e64d474f9dfb3bf22c24cadf",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +1659,1663 @@  kube::test::if_has_string \"${output_message}\" 'kind.mygroup.example.com/myobj'\n\n  output_message=$(kubectl \"${kube_flags[@]}\" get resources/myobj -o name)\n  kube::test::if_has_string \"${output_message}\" 'kind.mygroup.example.com/myobj'\n"
  },
  {
    "id" : "99d1bd04-5961-46ae-a1d9-ea0b58568812",
    "prId" : 57938,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57938#pullrequestreview-88149940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28f1648d-d294-4f17-9bda-62e739b0c1bf",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "would probably be worth setting up a e2e test that puts binary data in a configmap, and makes sure it gets plumbed to a container intact",
        "createdAt" : "2018-01-10T21:17:31Z",
        "updatedAt" : "2018-01-23T12:28:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6e389c0e-d14f-4105-88c7-d89d078b05d0",
        "parentId" : "28f1648d-d294-4f17-9bda-62e739b0c1bf",
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "Added a e2e test @liggitt ",
        "createdAt" : "2018-01-11T12:27:46Z",
        "updatedAt" : "2018-01-23T12:28:14Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "df1351f73e29a97771144d179febc0d498b8fe00",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2314,2318 @@  # Command\n  kubectl create configmap test-configmap --from-literal=key1=value1 --namespace=test-configmaps\n  kubectl create configmap test-binary-configmap --from-file <( head -c 256 /dev/urandom ) --namespace=test-configmaps\n  # Post-condition: configmap exists and has expected values\n  kube::test::get_object_assert 'configmap/test-configmap --namespace=test-configmaps' \"{{$id_field}}\" 'test-configmap'"
  },
  {
    "id" : "afebbbb6-c7da-44db-9f74-f7a0f3d70a94",
    "prId" : 54083,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54083#pullrequestreview-70385005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa81e5ca-754f-4f6d-8dc7-f66318bb046d",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "do you have a negative selector test? (pass a selector that doesn't match anything)",
        "createdAt" : "2017-10-18T20:30:18Z",
        "updatedAt" : "2017-10-19T14:13:42Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "33b72c89-acae-4089-83dc-50bd7579c517",
        "parentId" : "fa81e5ca-754f-4f6d-8dc7-f66318bb046d",
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "Will add one, thanks",
        "createdAt" : "2017-10-18T23:04:31Z",
        "updatedAt" : "2017-10-19T14:13:42Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb86297edf9df03455d3017ea6601fd8167d0560",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +4296,4300 @@  kube::test::if_has_string \"${response}\" 'must provide one or more resources'\n  # test=label matches our node\n  response=$(kubectl cordon --selector test=label)\n  kube::test::if_has_string \"${response}\" 'node \"127.0.0.1\" cordoned'\n  # invalid=label does not match any nodes"
  },
  {
    "id" : "05af22db-9de0-4e00-8b6a-cbf846417734",
    "prId" : 53679,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53679#pullrequestreview-68794064",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5989091e-55f6-4278-a428-20e1e3f0cc23",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Would this test be running against clusters that don't have `apps/v1` enabled yet?",
        "createdAt" : "2017-10-11T20:33:03Z",
        "updatedAt" : "2017-11-03T17:17:04Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "0cb91911-360f-4631-8219-64c08d261f0d",
        "parentId" : "5989091e-55f6-4278-a428-20e1e3f0cc23",
        "authorId" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "body" : "The command tests are always written expecting a specific version of group version kind to be returned. That version has always been dependent on the packaged kubectl and apiserver configuration.",
        "createdAt" : "2017-10-11T21:18:26Z",
        "updatedAt" : "2017-11-03T17:17:04Z",
        "lastEditedBy" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "tags" : [
        ]
      },
      {
        "id" : "e9537ba7-dbde-401e-9a63-b1d4f5964cbe",
        "parentId" : "5989091e-55f6-4278-a428-20e1e3f0cc23",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "👌 ",
        "createdAt" : "2017-10-12T01:07:18Z",
        "updatedAt" : "2017-11-03T17:17:04Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "5590c1fb94e09f9a2b7a09c9776e8d6535b18304",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1391,1395 @@  kube::test::if_has_string \"${output_message}\" \"/api/v1/namespaces/default/replicationcontrollers 200 OK\"\n  kube::test::if_has_string \"${output_message}\" \"/api/v1/namespaces/default/services 200 OK\"\n  kube::test::if_has_string \"${output_message}\" \"/apis/apps/v1/namespaces/default/statefulsets 200 OK\"\n  kube::test::if_has_string \"${output_message}\" \"/apis/autoscaling/v1/namespaces/default/horizontalpodautoscalers 200\"\n  kube::test::if_has_string \"${output_message}\" \"/apis/batch/v1/namespaces/default/jobs 200 OK\""
  },
  {
    "id" : "3ab2b5d0-f6e6-4c4f-b1de-215d08bd1d55",
    "prId" : 53609,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53609#pullrequestreview-68629305",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0ebc67c-29c7-4369-bb30-b8b6630adc4e",
        "parentId" : null,
        "authorId" : "b636cffe-e356-4628-b016-7e9b414c5367",
        "body" : "should add\r\n```\r\nset -o nounset\r\nset +o errexit\r\n```",
        "createdAt" : "2017-10-11T02:18:20Z",
        "updatedAt" : "2017-10-11T14:34:21Z",
        "lastEditedBy" : "b636cffe-e356-4628-b016-7e9b414c5367",
        "tags" : [
        ]
      },
      {
        "id" : "703f2297-2c33-4bbb-8f0e-b15955d0e209",
        "parentId" : "d0ebc67c-29c7-4369-bb30-b8b6630adc4e",
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "Thanks, done",
        "createdAt" : "2017-10-11T14:34:46Z",
        "updatedAt" : "2017-10-11T14:34:47Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd45076f8e86575438326a753f99e277f006df6a",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +935,939 @@    output_message=$(kubectl create \"${kube_flags[@]}\" secret generic mysecret --dry-run --from-literal=foo=bar -o jsonpath='{.metadata.namespace}')\n    # Post-condition: jsonpath for .metadata.namespace should be empty for object since --namespace was not explicitly specified\n    kube::test::if_empty_string \"${output_message}\"\n\n    set +o nounset"
  },
  {
    "id" : "8379930a-81c7-4c33-9f17-7422eed16e53",
    "prId" : 53609,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53609#pullrequestreview-70550450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c50a1f1f-95ac-4ae6-b9fa-e1d24537e841",
        "parentId" : null,
        "authorId" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "body" : "since you create a new func here, could we make the name more specific, like run_dryrun_override_namespace or sth better ?",
        "createdAt" : "2017-10-19T02:14:40Z",
        "updatedAt" : "2017-10-19T02:14:48Z",
        "lastEditedBy" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "tags" : [
        ]
      },
      {
        "id" : "443b50d6-82b0-4dad-9e2b-6810f556682f",
        "parentId" : "c50a1f1f-95ac-4ae6-b9fa-e1d24537e841",
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "@shiywang Thanks for the feedback, since this has already merged, will go ahead and sneak in a better name for this function as part of this PR https://github.com/kubernetes/kubernetes/pull/54083 which updates test-cmd-util.sh anyway :)",
        "createdAt" : "2017-10-19T14:09:20Z",
        "updatedAt" : "2017-10-19T14:09:20Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd45076f8e86575438326a753f99e277f006df6a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +917,921 @@\n# runs specific kubectl create tests\nrun_create_tests() {\n    set -o nounset\n    set -o errexit"
  },
  {
    "id" : "277f9bdc-32ab-4684-a357-e890cbed81c8",
    "prId" : 53312,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53312#pullrequestreview-66984338",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63b44288-6b26-42a5-a10f-c05c3ed9eaa5",
        "parentId" : null,
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "Why not `CustomResourceDefinition`? (not compulsory, just curious what's the formal name we are using)",
        "createdAt" : "2017-10-02T13:30:48Z",
        "updatedAt" : "2017-10-02T13:31:01Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      },
      {
        "id" : "5e1ae319-8fb7-47ef-bd5c-364a285df6b1",
        "parentId" : "63b44288-6b26-42a5-a10f-c05c3ed9eaa5",
        "authorId" : "c4d03131-048f-4d66-8656-262ab04a66bc",
        "body" : "+1. It's better to use the full name.",
        "createdAt" : "2017-10-02T13:53:46Z",
        "updatedAt" : "2017-10-02T13:53:46Z",
        "lastEditedBy" : "c4d03131-048f-4d66-8656-262ab04a66bc",
        "tags" : [
        ]
      },
      {
        "id" : "f73b8b08-b978-4a83-ab6c-ea1785d89986",
        "parentId" : "63b44288-6b26-42a5-a10f-c05c3ed9eaa5",
        "authorId" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "body" : "This does a `kubectl get foos` which lists the _instances_ of our custom type i.e. it lists the \"custom resources\". [This](https://github.com/nikhita/kubernetes/blob/694630724a1e5036d35ed9c12dc97dd2989d15d6/hack/testdata/CRD/foo.yaml) is an instance of type `Foo` .\r\n\r\nFor the `CustomResourceDefinition` (where we register the type `Foo`), we need to do `kubectl get crd`, which is done [here](https://github.com/nikhita/kubernetes/blob/694630724a1e5036d35ed9c12dc97dd2989d15d6/hack/make-rules/test-cmd-util.sh#L1480).",
        "createdAt" : "2017-10-02T13:53:53Z",
        "updatedAt" : "2017-10-02T13:53:59Z",
        "lastEditedBy" : "fa530650-5886-4415-a42f-0dee2e0e9ae3",
        "tags" : [
        ]
      },
      {
        "id" : "23cd5fa3-2704-4a1b-8218-0ec04d50284e",
        "parentId" : "63b44288-6b26-42a5-a10f-c05c3ed9eaa5",
        "authorId" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "body" : "So it seems to be mixed usage or inconsistency?",
        "createdAt" : "2017-10-03T15:15:33Z",
        "updatedAt" : "2017-10-03T15:15:34Z",
        "lastEditedBy" : "7dd504ec-7e63-45b3-98f8-6eb1c683e9c2",
        "tags" : [
        ]
      },
      {
        "id" : "b70f85f9-8231-47e9-a3b7-ce6dc9368305",
        "parentId" : "63b44288-6b26-42a5-a10f-c05c3ed9eaa5",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "CRDs and CRs are two different things.",
        "createdAt" : "2017-10-04T07:57:15Z",
        "updatedAt" : "2017-10-04T07:57:15Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "694630724a1e5036d35ed9c12dc97dd2989d15d6",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1542,1546 @@  kube::util::non_native_resources\n\n  # Test that we can list this new CustomResource (foos)\n  kube::test::get_object_assert foos \"{{range.items}}{{$id_field}}:{{end}}\" ''\n"
  },
  {
    "id" : "10b14e14-3f56-4775-94bc-80a034190934",
    "prId" : 50672,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50672#pullrequestreview-62218987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bcb9000-6ae9-4c1b-961c-97d7f05c35e7",
        "parentId" : null,
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "I'm not feeling good about this change. Why not checking `$?`?",
        "createdAt" : "2017-09-12T06:53:41Z",
        "updatedAt" : "2017-09-13T02:27:08Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "e29c8885-dc87-42f1-81ef-046f657962b1",
        "parentId" : "0bcb9000-6ae9-4c1b-961c-97d7f05c35e7",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "What are you worried about @mengqiy ?",
        "createdAt" : "2017-09-12T15:17:59Z",
        "updatedAt" : "2017-09-13T02:27:08Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "c76a7f17-0a7b-4a45-8355-60ed75744126",
        "parentId" : "0bcb9000-6ae9-4c1b-961c-97d7f05c35e7",
        "authorId" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "body" : "`record_command` will check every command's `$?`, so for command with no arguments provided, we need to inverse the value of `$?` so that `record_command` can be pass, ",
        "createdAt" : "2017-09-12T16:16:04Z",
        "updatedAt" : "2017-09-13T02:27:08Z",
        "lastEditedBy" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "tags" : [
        ]
      },
      {
        "id" : "45eb0135-3995-44bf-99d6-640486cdfcb0",
        "parentId" : "0bcb9000-6ae9-4c1b-961c-97d7f05c35e7",
        "authorId" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "body" : "maybe not every command, but it will check the last value of $? in each functions, iirc, so we need to make sure every function's `$?` is zero",
        "createdAt" : "2017-09-12T16:24:28Z",
        "updatedAt" : "2017-09-13T02:27:08Z",
        "lastEditedBy" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "tags" : [
        ]
      },
      {
        "id" : "2cad523c-7516-46bd-9673-4020bc20555d",
        "parentId" : "0bcb9000-6ae9-4c1b-961c-97d7f05c35e7",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "> What are you worried about @mengqiy ?\r\n\r\nMaybe this is fine.\r\nI'm not sure what is the best practice here to check the exit code and output at the same time.\r\n",
        "createdAt" : "2017-09-12T18:09:23Z",
        "updatedAt" : "2017-09-13T02:27:08Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      }
    ],
    "commit" : "87abe13022b063cf981a5a9679aa59be40f68efc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4189,4193 @@\n  # single plugins path\n  output_message=$(! KUBECTL_PLUGINS_PATH=test/fixtures/pkg/kubectl/plugins kubectl plugin 2>&1)\n  kube::test::if_has_string \"${output_message}\" 'echo\\s\\+Echoes for test-cmd'\n  kube::test::if_has_string \"${output_message}\" 'get\\s\\+The wonderful new plugin-based get!'"
  },
  {
    "id" : "a41e24b7-4a82-47dd-b076-6ae68010eaec",
    "prId" : 50497,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50497#pullrequestreview-58217441",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28f7fb8c-4f4b-4e04-b717-f7d517aab371",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "This looks sub-optimal. Perhaps we can let kubectl warning use `--include-uninitialized` isn't effective if name is specified. Not a blocker.",
        "createdAt" : "2017-08-23T21:43:07Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "d80ff0f60c7d903305c740a6271616297f1570f7",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +4751,4755 @@  kube::test::if_has_string \"${output_message}\" 'run=web'\n  # Command\n  output_message=$(kubectl describe deployments web --include-uninitialized=false 2>&1 \"${kube_flags[@]}\")\n  # Post-condition: The text \"run=web\" should be part of the output\n  kube::test::if_has_string \"${output_message}\" 'run=web'"
  },
  {
    "id" : "53065ed0-9729-49a0-8220-541856820fbb",
    "prId" : 50497,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50497#pullrequestreview-58485018",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1f19595-bd86-4b08-bce8-eb10cd7f77e9",
        "parentId" : null,
        "authorId" : "c2f27bcc-35d4-4085-8576-7930fa62dfa8",
        "body" : "you should check `web is not labeled` instead. (are you relying on `no output` = `nothing is labeled` here? maybe it's fine I'm not sure)",
        "createdAt" : "2017-08-24T04:12:46Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "c2f27bcc-35d4-4085-8576-7930fa62dfa8",
        "tags" : [
        ]
      },
      {
        "id" : "5a76b292-a988-475c-9410-bfac1a03629a",
        "parentId" : "f1f19595-bd86-4b08-bce8-eb10cd7f77e9",
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "> are you relying on no output = nothing is labeled here? maybe it's fine I'm not sure\r\n\r\nYeah. It will output nothing since no resources are found.",
        "createdAt" : "2017-08-24T07:57:35Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "dae5bb39-48b1-4b31-be84-c62ccde2e2aa",
        "parentId" : "f1f19595-bd86-4b08-bce8-eb10cd7f77e9",
        "authorId" : "c2f27bcc-35d4-4085-8576-7930fa62dfa8",
        "body" : "makes sense, then the `label` case  above that actually labels something should check that the output is `deployment \"web\" labeled`",
        "createdAt" : "2017-08-24T19:30:39Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "c2f27bcc-35d4-4085-8576-7930fa62dfa8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d80ff0f60c7d903305c740a6271616297f1570f7",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +4764,4768 @@  output_message=$(kubectl label deployments labelkey2=labelvalue2 --all --include-uninitialized=false 2>&1 \"${kube_flags[@]}\")\n  # Post-condition: The output should be empty\n  kube::test::if_empty_string \"${output_message}\"\n  # Command\n  output_message=$(kubectl label deployments labelkey3=labelvalue3 -l run=web 2>&1 \"${kube_flags[@]}\")"
  },
  {
    "id" : "65af7e15-64af-4c2b-915b-1d309b89c2f2",
    "prId" : 50497,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50497#pullrequestreview-58272244",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a2368b7-4292-4c05-9276-0eae49b6b99c",
        "parentId" : null,
        "authorId" : "c2f27bcc-35d4-4085-8576-7930fa62dfa8",
        "body" : "you should check `web is not labeled` instead. ",
        "createdAt" : "2017-08-24T04:13:40Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "c2f27bcc-35d4-4085-8576-7930fa62dfa8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d80ff0f60c7d903305c740a6271616297f1570f7",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +4768,4772 @@  output_message=$(kubectl label deployments labelkey3=labelvalue3 -l run=web 2>&1 \"${kube_flags[@]}\")\n  # Post-condition: The output should be empty\n  kube::test::if_empty_string \"${output_message}\"\n  # Command\n  output_message=$(kubectl label deployments labelkey4=labelvalue4 -l run=web --include-uninitialized 2>&1 \"${kube_flags[@]}\")"
  },
  {
    "id" : "78c924c5-6ae5-4af4-b2f2-4218871f884a",
    "prId" : 50497,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50497#pullrequestreview-59013191",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0438f36b-945b-429e-9879-983855fc9dff",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I think testing two `kubectl set` subcommands are enough. No need to test more.",
        "createdAt" : "2017-08-24T07:45:14Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "9c2f9d91-7e69-4d58-b934-2d7a003c1ad9",
        "parentId" : "0438f36b-945b-429e-9879-983855fc9dff",
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "@caesarxuchao Flag `--include-uninitialized` is separately set for `set subject`, `set image` and etc. So testing them exhaustively would be better?",
        "createdAt" : "2017-08-25T05:55:24Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "e0b02a77-9cab-48b1-b22b-b8182b180d9a",
        "parentId" : "0438f36b-945b-429e-9879-983855fc9dff",
        "authorId" : "c2f27bcc-35d4-4085-8576-7930fa62dfa8",
        "body" : "Agreed, setting separately would be the safest option. Though I noticed to test some stuff we have to add extra testdata files, maybe it's not worth it.",
        "createdAt" : "2017-08-28T17:41:55Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "c2f27bcc-35d4-4085-8576-7930fa62dfa8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d80ff0f60c7d903305c740a6271616297f1570f7",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +4873,4877 @@  kube::test::if_has_string \"${output_message}\" 'resource requirements updated'\n\n  ### Test kubectl set selector --include-uninitialized\n  # Create a service with initializer\n  kubectl create --request-timeout=1 -f hack/testdata/initializer-redis-master-service.yaml 2>&1 \"${kube_flags[@]}\" || true"
  },
  {
    "id" : "246812d2-df24-4fa1-928e-cbe3052dbd03",
    "prId" : 50497,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50497#pullrequestreview-58572696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca74036c-9036-40fd-9793-2984d3c08226",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Add a test for `--include-uninitialized=true` without `--all`?",
        "createdAt" : "2017-08-24T07:46:55Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "195e8423-cbe2-4899-a4ac-06af4a07852d",
        "parentId" : "ca74036c-9036-40fd-9793-2984d3c08226",
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "This is not allowed. We have to specify a resource name if `--all` is not specified.",
        "createdAt" : "2017-08-25T05:57:18Z",
        "updatedAt" : "2017-09-01T07:05:20Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      }
    ],
    "commit" : "d80ff0f60c7d903305c740a6271616297f1570f7",
    "line" : 231,
    "diffHunk" : "@@ -1,1 +4927,4931 @@  kube::test::if_has_string \"${output_message}\" 'No resources found'\n  # Command\n  output_message=$(kubectl delete clusterrolebinding --all 2>&1 \"${kube_flags[@]}\")\n  # Post-condition: The text \"deleted\" should be part of the output\n  kube::test::if_has_string \"${output_message}\" 'deleted'"
  },
  {
    "id" : "157a99f1-9de8-448e-a249-f5579290d31e",
    "prId" : 50497,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50497#pullrequestreview-60179147",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b105d3f-a7b1-4a9d-9018-b6ef6df66628",
        "parentId" : null,
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "From help text:\r\n```\r\n--request-timeout='0': The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.\r\n```\r\n\r\nI don't understand why you give `--request-timeout=1`. And it's not clear to me that timeout is 1s or 1m or ...",
        "createdAt" : "2017-09-01T07:46:51Z",
        "updatedAt" : "2017-09-01T07:46:56Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "0513f087-07bf-49ef-b250-8928fa62c62b",
        "parentId" : "5b105d3f-a7b1-4a9d-9018-b6ef6df66628",
        "authorId" : "c2f27bcc-35d4-4085-8576-7930fa62dfa8",
        "body" : "I think it's b/c I left a comment about it. If we don't specify a timeout, the test spend 30s here for the blocked initializer. Now I'm suspecting this 1s might cause flakes, I'm not sure making it another value like `5s` would help prevent the flake at all.",
        "createdAt" : "2017-09-01T07:51:35Z",
        "updatedAt" : "2017-09-01T07:51:43Z",
        "lastEditedBy" : "c2f27bcc-35d4-4085-8576-7930fa62dfa8",
        "tags" : [
        ]
      },
      {
        "id" : "5ce078a4-e180-4ce5-9266-b8e3e42587ae",
        "parentId" : "5b105d3f-a7b1-4a9d-9018-b6ef6df66628",
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "> I don't understand why you give --request-timeout=1\r\n\r\n@mengqiy I've added pending initializers in the yaml, which will keep blocking until timeout. Per [discussion](https://github.com/kubernetes/kubernetes/pull/50497#discussion_r134922857).\r\n\r\n> And it's not clear to me that timeout is 1s or 1m or ...\r\n\r\nJust follow other commands in the [test files](https://github.com/dixudx/kubernetes/blob/d80ff0f60c7d903305c740a6271616297f1570f7/hack/make-rules/test-cmd-util.sh#L1408). Actually `--request-timeout=1` means 1sec.\r\n\r\nSince the flag description of `--request-timeout` is quite confusing. We may consider to elaborate it.",
        "createdAt" : "2017-09-01T08:00:22Z",
        "updatedAt" : "2017-09-01T08:00:22Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      },
      {
        "id" : "027fca62-0640-4051-8653-3d1cd4874aff",
        "parentId" : "5b105d3f-a7b1-4a9d-9018-b6ef6df66628",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "Make sense.",
        "createdAt" : "2017-09-01T16:11:34Z",
        "updatedAt" : "2017-09-01T16:11:34Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d80ff0f60c7d903305c740a6271616297f1570f7",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +4709,4713 @@\n  ### Create a deployment\n  kubectl create --request-timeout=1 -f hack/testdata/initializer-deployments.yaml 2>&1 \"${kube_flags[@]}\" || true\n\n  ### Test kubectl get --include-uninitialized"
  },
  {
    "id" : "17cba790-f8a0-44b9-8278-fd5766290d85",
    "prId" : 49674,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49674#pullrequestreview-57103528",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52a1bcf9-4235-46c1-bb6c-07aa3d1704ad",
        "parentId" : null,
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "Just curious why changing this?\r\nIf `hack/testdata/nginx-statefulset.yaml` is no longer needed, please delete it.",
        "createdAt" : "2017-08-18T01:31:35Z",
        "updatedAt" : "2017-08-24T23:43:50Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "2718b824-16cd-4c0d-b1e8-54e37429b45b",
        "parentId" : "52a1bcf9-4235-46c1-bb6c-07aa3d1704ad",
        "authorId" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "body" : "I initally planned to reuse `nginx-statefulset.yaml`, but found out that `updateStrategy` of the spec has to be changed. I am not sure whether it is fine to change existing YAML test files, so i created a new one.\r\n\r\nI will remove `nginx-statefulset.yaml` if it is not used at other places.",
        "createdAt" : "2017-08-18T03:11:22Z",
        "updatedAt" : "2017-08-24T23:43:50Z",
        "lastEditedBy" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebdbafd2c509fde48935a97a812b4c1c394b3561",
    "line" : 242,
    "diffHunk" : "@@ -1,1 +3674,3678 @@  kube::test::get_object_assert statefulset \"{{range.items}}{{$id_field}}:{{end}}\" ''\n  # Command: create statefulset\n  kubectl create -f hack/testdata/rollingupdate-statefulset.yaml \"${kube_flags[@]}\"\n\n  ### Scale statefulset test with current-replicas and replicas"
  },
  {
    "id" : "6cede41b-b029-4dca-8578-a8a24fe50f09",
    "prId" : 49674,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49674#pullrequestreview-57585272",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60823cc9-569f-4203-a93a-2699d70778cf",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "We can replace `deployment_image_field` and `deployment_second_image_field` with these two as well",
        "createdAt" : "2017-08-21T18:09:47Z",
        "updatedAt" : "2017-08-24T23:43:50Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "7d7b5d95-28a6-481f-800f-42dcbb624dd2",
        "parentId" : "60823cc9-569f-4203-a93a-2699d70778cf",
        "authorId" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "body" : "Noted!",
        "createdAt" : "2017-08-21T19:16:06Z",
        "updatedAt" : "2017-08-24T23:43:50Z",
        "lastEditedBy" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebdbafd2c509fde48935a97a812b4c1c394b3561",
    "line" : 269,
    "diffHunk" : "@@ -1,1 +4282,4286 @@  container_len=\"(len .spec.template.spec.containers)\"\n  image_field0=\"(index .spec.template.spec.containers 0).image\"\n  image_field1=\"(index .spec.template.spec.containers 1).image\"\n\n  # Make sure \"default\" namespace exists."
  },
  {
    "id" : "7aea49e9-791d-4124-81b7-fc0e29fe349e",
    "prId" : 49674,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49674#pullrequestreview-58251321",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b8892a3-38e8-4cd5-af17-3b084c90a121",
        "parentId" : null,
        "authorId" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "body" : "@janetkuo We have to change `get_object_assert` to `wait_object_assert` here. :)",
        "createdAt" : "2017-08-24T00:31:00Z",
        "updatedAt" : "2017-08-24T23:43:50Z",
        "lastEditedBy" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebdbafd2c509fde48935a97a812b4c1c394b3561",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +3008,3012 @@  # Create a DaemonSet (revision 1)\n  kubectl apply -f hack/testdata/rollingupdate-daemonset.yaml --record \"${kube_flags[@]}\"\n  kube::test::wait_object_assert controllerrevisions \"{{range.items}}{{$annotations_field}}:{{end}}\" \".*rollingupdate-daemonset.yaml --record.*\"\n  # Rollback to revision 1 - should be no-op\n  kubectl rollout undo daemonset --to-revision=1 \"${kube_flags[@]}\""
  },
  {
    "id" : "8da086fc-5c2d-43dd-b2ff-3b0c2440a6a3",
    "prId" : 49674,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49674#pullrequestreview-58543792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88bbe3c3-8bf3-4317-8c97-f54021bee0eb",
        "parentId" : null,
        "authorId" : "c532215f-ed76-4a19-b066-8676d269eaf1",
        "body" : "Leave this set, and if you want to not fail on certain calls them put them in an \"if\"",
        "createdAt" : "2017-08-24T23:59:15Z",
        "updatedAt" : "2017-08-24T23:59:31Z",
        "lastEditedBy" : "c532215f-ed76-4a19-b066-8676d269eaf1",
        "tags" : [
        ]
      },
      {
        "id" : "728cceb3-fb58-4773-855d-62b46d1aec21",
        "parentId" : "88bbe3c3-8bf3-4317-8c97-f54021bee0eb",
        "authorId" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "body" : "i follow the template of `run_daemonset_history_tests`: https://github.com/kubernetes/kubernetes/blob/master/hack/make-rules/test-cmd-util.sh#L2998\r\n\r\nIf we are to remove this line for statefulset, we should also do so for daemonset. ",
        "createdAt" : "2017-08-25T00:12:37Z",
        "updatedAt" : "2017-08-25T00:12:37Z",
        "lastEditedBy" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "tags" : [
        ]
      },
      {
        "id" : "128ba350-e56b-4a9a-aec0-893e5cbcb950",
        "parentId" : "88bbe3c3-8bf3-4317-8c97-f54021bee0eb",
        "authorId" : "c532215f-ed76-4a19-b066-8676d269eaf1",
        "body" : "Ok",
        "createdAt" : "2017-08-25T00:17:15Z",
        "updatedAt" : "2017-08-25T00:17:15Z",
        "lastEditedBy" : "c532215f-ed76-4a19-b066-8676d269eaf1",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebdbafd2c509fde48935a97a812b4c1c394b3561",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +3046,3050 @@\nrun_statefulset_history_tests() {\n  set -o nounset\n  set -o errexit\n"
  },
  {
    "id" : "8ee83081-8634-469a-a770-8ad15a11dd07",
    "prId" : 47099,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47099#pullrequestreview-43273636",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e84d131-932e-4ed8-a54f-8e9a27bcc8d7",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "Why do you need to unset these two options?\r\n\r\nI see that you disable it here, and then re-enable inside the test, so I assume it's either in this function or in `juLog`. But can you be more explicit?",
        "createdAt" : "2017-06-07T04:32:19Z",
        "updatedAt" : "2017-06-14T18:27:52Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "3ee28aff-e116-4f3b-8234-eb318ec87086",
        "parentId" : "2e84d131-932e-4ed8-a54f-8e9a27bcc8d7",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "I need to disable these 2 options to make `juLog` run correctly. And I want these 2 options to be on when running the test cases as what we did before.",
        "createdAt" : "2017-06-07T20:58:43Z",
        "updatedAt" : "2017-06-14T18:27:52Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "cf2313de-b0a9-4e8e-9a4a-d98bc28afc09",
        "parentId" : "2e84d131-932e-4ed8-a54f-8e9a27bcc8d7",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "Can we fix juLog to work with `nounset` and `errexit` instead?",
        "createdAt" : "2017-06-08T03:06:35Z",
        "updatedAt" : "2017-06-14T18:27:52Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "5d0a7a1d-2e0a-4bfe-bba1-626cee694a2c",
        "parentId" : "2e84d131-932e-4ed8-a54f-8e9a27bcc8d7",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "I'm trying to do something similar to https://github.com/kubernetes/test-infra/blob/b72c1687c3b71a44bf9953447670fb566ed53f5e/jenkins/e2e-image/e2e-runner.sh#L58-L82.\r\nI will check if there is a fix in [upstream](https://github.com/manolo/shell2junit). If there is, we can bump it?",
        "createdAt" : "2017-06-08T06:33:35Z",
        "updatedAt" : "2017-06-14T18:27:52Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "3b9a9508-44da-4e39-8c9f-fdfcfe1a16ca",
        "parentId" : "2e84d131-932e-4ed8-a54f-8e9a27bcc8d7",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "Yeah, let's forget about that, thanks",
        "createdAt" : "2017-06-09T22:21:01Z",
        "updatedAt" : "2017-06-14T18:27:52Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "590ea991a5b5d8b6a948b89a0f8387de47ea9141",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +96,100 @@function record_command() {\n    set +o nounset\n    set +o errexit\n\n    local name=\"$1\""
  },
  {
    "id" : "fbbd48fc-02bf-4e95-a619-60c90e3cd2f2",
    "prId" : 47099,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47099#pullrequestreview-44141962",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "767cc00f-b301-4d87-a303-aed0c421aa1b",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "is it necessary to do this in every one of these functions?",
        "createdAt" : "2017-06-14T20:10:40Z",
        "updatedAt" : "2017-06-14T20:12:19Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "11631acf-5d5c-43a7-a8cc-ffc93c1431b9",
        "parentId" : "767cc00f-b301-4d87-a303-aed0c421aa1b",
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "we need to not fail the test if the sh2ju.sh script exits non-0 because that is expected for failed tests.  do you know of a better way of doing this?",
        "createdAt" : "2017-06-14T20:42:15Z",
        "updatedAt" : "2017-06-14T20:42:15Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      }
    ],
    "commit" : "590ea991a5b5d8b6a948b89a0f8387de47ea9141",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +272,276 @@########################################################\nrun_kubectl_version_tests() {\n  set -o nounset\n  set -o errexit\n"
  },
  {
    "id" : "941bd47d-acb4-40cd-aaec-43d915f710e8",
    "prId" : 47099,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47099#pullrequestreview-44152314",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d33723b3-9b06-42f3-87b3-591214b34952",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "the usual way to handle something returning nonzero with `errexit` is to do something like\r\n```bash\r\nmycmd && rc=$? || rc=$?\r\nif [[ \"${rc}\" != 0 ]]; then\r\n...\r\n```",
        "createdAt" : "2017-06-14T20:53:35Z",
        "updatedAt" : "2017-06-14T20:53:35Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "48cc7468-6327-4940-a918-828126bac4be",
        "parentId" : "d33723b3-9b06-42f3-87b3-591214b34952",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "It will look like \r\n```\r\n    juLog -output=\"${output}\" -class=\"test-cmd\" -name=\"${name}\" \"$@\" && rc=$? || rc=$?\r\n    if [[ \"${rc}\" != 0 ]]; then\r\n      echo \"Error when running ${name}\"\r\n      foundError=\"True\"\r\n    fi\r\n```\r\nThe first line will become really long. But I will update it as you suggested.",
        "createdAt" : "2017-06-14T21:03:18Z",
        "updatedAt" : "2017-06-14T21:03:18Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "e337468f-5f33-4d56-b07f-ad319abf8749",
        "parentId" : "d33723b3-9b06-42f3-87b3-591214b34952",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "yeah, that's pretty much the way shell works. you can always break into several lines with \\.\r\n\r\nif it can avoid us having the `set -o` / `set +o` stuff everywhere it's an improvement, though.",
        "createdAt" : "2017-06-14T21:06:37Z",
        "updatedAt" : "2017-06-14T21:06:37Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "f725d91d-a702-4859-86f2-356b3ce2a708",
        "parentId" : "d33723b3-9b06-42f3-87b3-591214b34952",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "(you're also welcome to do this in a followup PR or something. having junit for test-cmd is a huge improvement, and I don't mean to block that progress.)",
        "createdAt" : "2017-06-14T21:07:55Z",
        "updatedAt" : "2017-06-14T21:07:55Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "6ec56dbe-e755-4869-89d9-6bd09c96869b",
        "parentId" : "d33723b3-9b06-42f3-87b3-591214b34952",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "I will address the remaining comments in a followup PR. I want to get this PR merged ASAP. Otherwise, I can imagine I will fall into endless rebase when the queue open again.",
        "createdAt" : "2017-06-14T21:22:48Z",
        "updatedAt" : "2017-06-14T21:22:48Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      }
    ],
    "commit" : "590ea991a5b5d8b6a948b89a0f8387de47ea9141",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +102,106 @@    echo \"Recording: ${name}\"\n    echo \"Running command: $@\"\n    juLog -output=\"${output}\" -class=\"test-cmd\" -name=\"${name}\" \"$@\"\n    if [[ $? -ne 0 ]]; then\n      echo \"Error when running ${name}\""
  },
  {
    "id" : "5dbd8331-545d-4bf8-89c1-06ef49a65418",
    "prId" : 46755,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46755#pullrequestreview-43904892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3559677a-1999-4890-9c03-f2f8d82b6aeb",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "not sure how meaningful testing an authorization check is if the answer will always be yes",
        "createdAt" : "2017-06-01T15:08:01Z",
        "updatedAt" : "2017-06-03T09:01:55Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ef780e3a-1eb8-4561-9aa1-3cbcd3691782",
        "parentId" : "3559677a-1999-4890-9c03-f2f8d82b6aeb",
        "authorId" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "body" : "I can add some abnormal test cases when this is merged:\r\nhttps://github.com/kubernetes/kubernetes/pull/46432",
        "createdAt" : "2017-06-02T07:07:33Z",
        "updatedAt" : "2017-06-03T09:01:55Z",
        "lastEditedBy" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "tags" : [
        ]
      },
      {
        "id" : "c7bda0cc-0435-4d2a-8510-ee8fcf419661",
        "parentId" : "3559677a-1999-4890-9c03-f2f8d82b6aeb",
        "authorId" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "body" : "@liggitt \r\nSome more tests are added.",
        "createdAt" : "2017-06-03T09:10:19Z",
        "updatedAt" : "2017-06-03T09:10:24Z",
        "lastEditedBy" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "tags" : [
        ]
      },
      {
        "id" : "a5310c56-3b50-4770-867a-f89a0b08487e",
        "parentId" : "3559677a-1999-4890-9c03-f2f8d82b6aeb",
        "authorId" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "body" : "ping",
        "createdAt" : "2017-06-14T02:58:21Z",
        "updatedAt" : "2017-06-14T02:58:26Z",
        "lastEditedBy" : "b41ac763-2378-4c8a-a9bf-7a3dd4082826",
        "tags" : [
        ]
      }
    ],
    "commit" : "c28efb85ff69109f9af80a9b49d8fe5b4eed8133",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +3798,3802 @@\n  # kubectl auth can-i\n  # kube-apiserver is started with authorization mode AlwaysAllow, so kubectl can-i always returns yes\n  if kube::test::if_supports_resource \"${subjectaccessreviews}\" ; then\n    output_message=$(kubectl auth can-i '*' '*' 2>&1 \"${kube_flags[@]}\")"
  },
  {
    "id" : "56e28e0c-e8d8-4aeb-ab0c-359a6b3ecc6f",
    "prId" : 45809,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/45809#pullrequestreview-39643015",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18b3a289-55de-4e1a-a41f-aaa490e0cbdd",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "surprised the `*` didn't need quoting",
        "createdAt" : "2017-05-23T05:30:07Z",
        "updatedAt" : "2017-05-26T04:22:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "93e50b167e20648762e69791830d639d2e1833c6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3126,3130 @@    kube::test::get_object_assert clusterrole/resourcename-reader \"{{range.rules}}{{range.apiGroups}}{{.}}:{{end}}{{end}}\" ':'\n    kube::test::get_object_assert clusterrole/resourcename-reader \"{{range.rules}}{{range.resourceNames}}{{.}}:{{end}}{{end}}\" 'foo:'\n    kubectl create \"${kube_flags[@]}\" clusterrole url-reader --verb=get --non-resource-url=/logs/* --non-resource-url=/healthz/*\n    kube::test::get_object_assert clusterrole/url-reader \"{{range.rules}}{{range.verbs}}{{.}}:{{end}}{{end}}\" 'get:'\n    kube::test::get_object_assert clusterrole/url-reader \"{{range.rules}}{{range.nonResourceURLs}}{{.}}:{{end}}{{end}}\" '/logs/\\*:/healthz/\\*:'"
  },
  {
    "id" : "e8784d06-3b67-48d7-b0e6-dd0a660539fc",
    "prId" : 44466,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/44466#pullrequestreview-35806118",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "806294b9-067e-4246-baf8-6f106724d2eb",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "The \"normal\" handler appears to handle a registration of `/ui/` by creating a 301 from `/ui` to `/ui/`.  We serve it directly out of `/ui` which means the handler's actual `307` comes back instead of a 301 to a 307.",
        "createdAt" : "2017-05-02T15:31:52Z",
        "updatedAt" : "2017-05-03T20:21:48Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "c837c7fb1a227ef8c772ad15b08ff47593379543",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2944,2948 @@  # Make sure the UI can be proxied\n  start-proxy\n  check-curl-proxy-code /ui 307\n  check-curl-proxy-code /api/ui 404\n  check-curl-proxy-code /api/v1/namespaces 200"
  },
  {
    "id" : "11d2aa5a-3933-4fea-ba08-69c578ae30ed",
    "prId" : 43406,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43406#pullrequestreview-32234711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a79dd7d1-1844-49cd-849c-a86fd2853bd8",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Why is this tested here? Shouldn't this be a unit test? Is this to test that kubectl doesn't introduce some sort of change? If so please add a comment.",
        "createdAt" : "2017-04-11T18:00:16Z",
        "updatedAt" : "2017-04-11T18:00:16Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7e85b238-ff4b-4a46-8603-70b32b64889c",
        "parentId" : "a79dd7d1-1844-49cd-849c-a86fd2853bd8",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "This is to catch the original issue https://github.com/kubernetes/kubernetes/issues/43218. Test it here because `[]` specified in yaml config will be converted to `null`. \r\n\r\nI have a unit test in validation. Is that not enough?",
        "createdAt" : "2017-04-11T18:33:48Z",
        "updatedAt" : "2017-04-11T18:33:49Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "1f9a5ca1-f0ac-4a25-b5cc-cfaf4c863230",
        "parentId" : "a79dd7d1-1844-49cd-849c-a86fd2853bd8",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm just wondering if this test adds anything over the unit test you've already put in.",
        "createdAt" : "2017-04-11T20:25:45Z",
        "updatedAt" : "2017-04-11T20:25:45Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a35567c0-d6c3-43c0-91af-9790839769d4",
        "parentId" : "a79dd7d1-1844-49cd-849c-a86fd2853bd8",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "I see. The validation unit test only tests the validation part. I still want to test that after updating a DaemonSet with a semantically equal change, templateGeneration won't change. It can't be done in DaemonSet controller unit test, because templateGeneration is updated by API server but not DaemonSet controller. ",
        "createdAt" : "2017-04-11T21:38:00Z",
        "updatedAt" : "2017-04-11T21:38:00Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "24af8d3b72d5771076dc32d2f93baf3667e1c2a1",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +2576,2580 @@}\n\nrun_daemonset_tests() {\n  kube::log::status \"Testing kubectl(v1:daemonsets)\"\n"
  },
  {
    "id" : "1dddb3a8-02fb-47e4-8d61-42cdc499150d",
    "prId" : 40666,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40666#pullrequestreview-19860715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8bacff0-07b2-4074-849d-adcfbc55216f",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "was this for style or did this stop working?",
        "createdAt" : "2017-02-02T02:56:22Z",
        "updatedAt" : "2017-02-02T23:21:48Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ba8973b1-740e-451f-82c6-2cdb3c1d3f0c",
        "parentId" : "b8bacff0-07b2-4074-849d-adcfbc55216f",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "Not sure how to make nested index work.\r\n`{{.some-field}}` seems not allowed, because of `-`.\r\nFor 1 layer indexing, we can use `{{index . \\\"some-field\\\"}}`. I don't know how to make it work for 2 layer indexing. So using this style `{{.someField.someSubfield}}` to make my life easier. ",
        "createdAt" : "2017-02-02T03:06:16Z",
        "updatedAt" : "2017-02-02T23:21:48Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "5233edb0-f5c6-4143-901f-0b272c7374db",
        "parentId" : "b8bacff0-07b2-4074-849d-adcfbc55216f",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "just pass multiple tokens to index and it traverses:\r\n```\r\nkubectl get bar/test -o jsonpath='{.some-field.some-sub-field}'\r\nkubectl get bar/test -o go-template='{{index . \"some-field\" \"some-sub-field\"}}'\r\n```\r\n",
        "createdAt" : "2017-02-02T18:49:38Z",
        "updatedAt" : "2017-02-02T23:21:48Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "710d904998f95f83c66d39470dbe1efd0d25a42e",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1285,1289 @@  kubectl \"${kube_flags[@]}\" get foos/test -o \"jsonpath={.someField}\"          --allow-missing-template-keys=false\n  kubectl \"${kube_flags[@]}\" get foos      -o \"go-template={{range .items}}{{.someField}}{{end}}\" --allow-missing-template-keys=false\n  kubectl \"${kube_flags[@]}\" get foos/test -o \"go-template={{.someField}}\"                        --allow-missing-template-keys=false\n\n  # Test patching"
  },
  {
    "id" : "ca66461f-d320-412f-a0a5-6f569e380cf5",
    "prId" : 40666,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40666#pullrequestreview-19708314",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6dfc203-583a-40af-ad31-69d2ae4c8353",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "do an immediate re-apply of the list to make sure idempotent apply works for lists",
        "createdAt" : "2017-02-02T03:07:52Z",
        "updatedAt" : "2017-02-02T23:21:48Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "710d904998f95f83c66d39470dbe1efd0d25a42e",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +1399,1403 @@\n  # Test that we can create list via apply\n  kubectl \"${kube_flags[@]}\" apply -f hack/testdata/TPR/multi-tpr-list.yaml\n\n  # Test that we have create a foo and a bar from a list"
  },
  {
    "id" : "259d95fe-50c3-4ff7-ab85-c093073e465d",
    "prId" : 40428,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40428#pullrequestreview-18462518",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8995683d-e945-4fe8-b5ca-8215c0f43514",
        "parentId" : null,
        "authorId" : "766f642e-1622-4803-803b-05ce306fc30e",
        "body" : "SUPPORTED_RESOURCES is not a comma separated list, it is a bash array.\r\n\r\nWe'll never hit this echo if it was unset, since we'd die on the set -e. I think it should be be `if [[ -z \"${SUPPORTED_RESOURCES:-}\" ]]` for the (wrong) comment to ever pop...",
        "createdAt" : "2017-01-25T18:00:14Z",
        "updatedAt" : "2017-01-25T18:34:34Z",
        "lastEditedBy" : "766f642e-1622-4803-803b-05ce306fc30e",
        "tags" : [
        ]
      }
    ],
    "commit" : "5676b9a252b9989ee53985eafe370fdcc669b2c4",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2418,2422 @@  if [ -z \"${SUPPORTED_RESOURCES:-}\" ]; then\n    echo \"Need to set SUPPORTED_RESOURCES env var. It is a list of resources that are supported and hence should be tested. Set it to (*) to test all resources\"\n    exit 1\n  fi\n  kube::log::status \"Checking kubectl version\""
  },
  {
    "id" : "08bfed24-db86-418d-9d5a-addb12e9780b",
    "prId" : 39895,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39895#pullrequestreview-16662298",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f674a11-7f22-4bb5-968b-15ae082dfd33",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "alternately, would it be better to capture stderr?",
        "createdAt" : "2017-01-13T22:07:44Z",
        "updatedAt" : "2017-01-13T22:07:49Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb39d0d811f6f0d18839ac84bac9af5278552d0c",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1064,1068 @@\n  ## check --allow-missing-template-keys=false results in an error for a missing key with jsonpath\n  output_message=$(! kubectl get pod valid-pod --allow-missing-template-keys=false -o jsonpath='{.missing}' \"${kube_flags[@]}\")\n  kube::test::if_has_string \"${output_message}\" 'missing is not found'\n"
  },
  {
    "id" : "bfce5f66-c8c8-4729-a86d-2bf655b4b106",
    "prId" : 38844,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38844#pullrequestreview-14076883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45455ab2-cfa3-4c75-9168-b66f4e727bde",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "This should be outside of `runTests`? Otherwise all calls to `create_and_use_new_namespace` won't work ",
        "createdAt" : "2016-12-21T00:17:37Z",
        "updatedAt" : "2017-01-04T19:17:22Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "d4fec733-0049-497a-979c-49eb7d8ed9b2",
        "parentId" : "45455ab2-cfa3-4c75-9168-b66f4e727bde",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "This is for use by functions called by runTests so it works fine without moving it out.\r\nI dont want to move it out since that will mean making `$i` global. create_and_use_new_namespace uses `$i` to keep track of how many namespaces has it created and appends it to ns name to create unique ns names.",
        "createdAt" : "2016-12-22T00:22:59Z",
        "updatedAt" : "2017-01-04T19:17:22Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5424d50c03f293ef564fff23965c19bb659b0db2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1293,1297 @@  # Command\n  ! kubectl create -f hack/testdata/recursive/rc --recursive \"${kube_flags[@]}\"\n  # Post-condition: frontend replication controller is created\n  kube::test::get_object_assert rc \"{{range.items}}{{$id_field}}:{{end}}\" 'busybox0:busybox1:'\n"
  },
  {
    "id" : "e8983e52-38ff-498f-b5e7-84ecc96da13f",
    "prId" : 38844,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38844#pullrequestreview-14235650",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd249fb9-e4e5-4f1e-a975-653812f4f0d4",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "I'm curious why we need to create default namespace and kubernetes service now? When won't them exist?",
        "createdAt" : "2016-12-22T19:11:06Z",
        "updatedAt" : "2017-01-04T19:17:22Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "844ebc44-7536-4b55-b0fc-df52519e52f5",
        "parentId" : "dd249fb9-e4e5-4f1e-a975-653812f4f0d4",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Also can we move it to the top or its own section, not a part of kubectl local proxy tests",
        "createdAt" : "2016-12-22T19:13:33Z",
        "updatedAt" : "2017-01-04T19:17:22Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "5556b21b-dbb0-4284-bf0e-6639e9d49682",
        "parentId" : "dd249fb9-e4e5-4f1e-a975-653812f4f0d4",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "We need them for federation. Federation does not have a default namespace and kubernetes service by default",
        "createdAt" : "2016-12-22T19:33:36Z",
        "updatedAt" : "2017-01-04T19:17:22Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "fffaab64-9d89-42b7-b195-fa6c89d48592",
        "parentId" : "dd249fb9-e4e5-4f1e-a975-653812f4f0d4",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "This part was referencing the default namespace and kubernetes service. I'm not sure why GitHub doesn't show the correct line that I referenced ",
        "createdAt" : "2016-12-22T19:36:39Z",
        "updatedAt" : "2017-01-04T19:17:22Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "3ab216a6-6f89-4663-8af3-603d2d53f2df",
        "parentId" : "dd249fb9-e4e5-4f1e-a975-653812f4f0d4",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Moved to the top",
        "createdAt" : "2016-12-22T21:46:52Z",
        "updatedAt" : "2017-01-04T19:17:22Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5424d50c03f293ef564fff23965c19bb659b0db2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1293,1297 @@  # Command\n  ! kubectl create -f hack/testdata/recursive/rc --recursive \"${kube_flags[@]}\"\n  # Post-condition: frontend replication controller is created\n  kube::test::get_object_assert rc \"{{range.items}}{{$id_field}}:{{end}}\" 'busybox0:busybox1:'\n"
  },
  {
    "id" : "2c7e3eaa-cebb-4197-9f63-176a0fc1be74",
    "prId" : 38844,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38844#pullrequestreview-14235835",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ca9dce5-7ed5-41e9-9208-b64e2616bc9a",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Where is this function?",
        "createdAt" : "2016-12-22T19:24:55Z",
        "updatedAt" : "2017-01-04T19:17:22Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "a41c7cd4-1380-49a3-b6c6-0bceee576271",
        "parentId" : "8ca9dce5-7ed5-41e9-9208-b64e2616bc9a",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Again, test passed even though this command is not found ",
        "createdAt" : "2016-12-22T19:25:57Z",
        "updatedAt" : "2017-01-04T19:17:22Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "65379dc1-f4f0-491a-a778-9fb764f7af24",
        "parentId" : "8ca9dce5-7ed5-41e9-9208-b64e2616bc9a",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Sorry I did not understand. This is just a comment :)",
        "createdAt" : "2016-12-22T19:32:50Z",
        "updatedAt" : "2017-01-04T19:17:22Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "be7fe309-8823-441f-8735-d5fa7fba4528",
        "parentId" : "8ca9dce5-7ed5-41e9-9208-b64e2616bc9a",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "I was pointing at the line referencing `run_kubectl_request_timeout_tests`. GitHub is weird.",
        "createdAt" : "2016-12-22T19:35:29Z",
        "updatedAt" : "2017-01-04T19:17:22Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "2cdecac3-3683-4f08-912d-a72e27e2bab4",
        "parentId" : "8ca9dce5-7ed5-41e9-9208-b64e2616bc9a",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Great catch Janet. Fixed. Also filed https://github.com/kubernetes/kubernetes/issues/39168 to prevent such errors to happen again",
        "createdAt" : "2016-12-22T21:48:15Z",
        "updatedAt" : "2017-01-04T19:17:22Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5424d50c03f293ef564fff23965c19bb659b0db2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1293,1297 @@  # Command\n  ! kubectl create -f hack/testdata/recursive/rc --recursive \"${kube_flags[@]}\"\n  # Post-condition: frontend replication controller is created\n  kube::test::get_object_assert rc \"{{range.items}}{{$id_field}}:{{end}}\" 'busybox0:busybox1:'\n"
  },
  {
    "id" : "93668f0a-8d88-4007-a28b-be764d2918c3",
    "prId" : 38844,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38844#pullrequestreview-14235894",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9586f9f4-8366-4f62-a4aa-e1c6e7f16860",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "`kube::test::if_supports_resource \"xxxxxxxx\"`: it's very easy to make a typo in \"xxxxxx\" without any errors. Can we make it more robust?",
        "createdAt" : "2016-12-22T20:22:16Z",
        "updatedAt" : "2017-01-04T19:17:22Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "e074ebfc-695f-450b-8a23-00e43b27b7ea",
        "parentId" : "9586f9f4-8366-4f62-a4aa-e1c6e7f16860",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "I was referencing the line `kube::test::if_supports_resource \"horizontalpodautoscalers\"`",
        "createdAt" : "2016-12-22T20:23:17Z",
        "updatedAt" : "2017-01-04T19:17:22Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "68c2caea-764c-44fc-9d0e-f151cc8ab354",
        "parentId" : "9586f9f4-8366-4f62-a4aa-e1c6e7f16860",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "(Maybe because this file is too large GitHub decides to point all reviews after `L1247` to `L1247` 😞)",
        "createdAt" : "2016-12-22T20:29:12Z",
        "updatedAt" : "2017-01-04T19:17:22Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "d9d2b26b-d611-4171-ad08-c48f952b034e",
        "parentId" : "9586f9f4-8366-4f62-a4aa-e1c6e7f16860",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Created variables for these to reduce the chances of typo",
        "createdAt" : "2016-12-22T21:48:36Z",
        "updatedAt" : "2017-01-04T19:17:22Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5424d50c03f293ef564fff23965c19bb659b0db2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1293,1297 @@  # Command\n  ! kubectl create -f hack/testdata/recursive/rc --recursive \"${kube_flags[@]}\"\n  # Post-condition: frontend replication controller is created\n  kube::test::get_object_assert rc \"{{range.items}}{{$id_field}}:{{end}}\" 'busybox0:busybox1:'\n"
  }
]