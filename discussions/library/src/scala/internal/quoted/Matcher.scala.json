[
  {
    "id" : "68d2e405-02c8-4e52-a696-49c2ab60e2e2",
    "prId" : 8693,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8693#pullrequestreview-389782748",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af2f9e87-202f-4d3c-8247-f2014ea72da1",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "The pattern matching on definitions up to alpha-conversion 👍 ",
        "createdAt" : "2020-04-08T09:00:47Z",
        "updatedAt" : "2020-04-08T12:26:30Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c40b9668d588b0b868c20749259f43c27622087",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +241,245 @@          case (ValDef(_, tpt1, rhs1), ValDef(_, tpt2, rhs2)) if checkValFlags() =>\n            def rhsEnv = summon[Env] + (scrutinee.symbol -> pattern.symbol)\n            tpt1 =?= tpt2 && treeOptMatches(rhs1, rhs2)(using summon[Context], rhsEnv)\n\n          case (DefDef(_, typeParams1, paramss1, tpt1, Some(rhs1)), DefDef(_, typeParams2, paramss2, tpt2, Some(rhs2))) =>"
  },
  {
    "id" : "44340571-d42f-4730-880d-288b1c804738",
    "prId" : 8684,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8684#pullrequestreview-389760212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c14042df-b12a-44c0-9bb9-8607227fe624",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "This means there is no way to match against a typed expression. It's fine in practice. As this is a design choice, it's better to add a small doc here, and add a link to the relevant issue.",
        "createdAt" : "2020-04-08T07:53:25Z",
        "updatedAt" : "2020-04-08T07:53:32Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "9328db29-de69-41bb-ba48-0d976e4c8580",
        "parentId" : "c14042df-b12a-44c0-9bb9-8607227fe624",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "That should be added to the docs in #8687. These do not exist yet.",
        "createdAt" : "2020-04-08T08:31:34Z",
        "updatedAt" : "2020-04-08T08:31:35Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c927e4b20f512859adbb0bff1498c9435f3300f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +177,181 @@\n          case (Typed(expr1, _), pattern) =>\n            expr1 =?= pattern\n\n          case (scrutinee, Typed(expr2, _)) =>"
  },
  {
    "id" : "b8f7558c-0730-4d42-a8d6-61cd4abebe06",
    "prId" : 7591,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7591#pullrequestreview-327677035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae02f4d3-741e-46e2-bdb0-723daec254c7",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Can you add a documentation to `Env`?",
        "createdAt" : "2019-12-05T20:17:47Z",
        "updatedAt" : "2019-12-12T10:52:14Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "0db41ae5cac475b4cd41655282cd9fab18af31b1",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +24,28 @@     *  when matching `a * a` with `x * x` the enviroment will contain `Map(a -> x)`.\n     */\n    private type Env = Map[Symbol, Symbol]\n\n    inline private def withEnv[T](env: Env)(body: => (given Env) => T): T = body(given env)"
  },
  {
    "id" : "0c096bda-b8e6-48f8-9414-a7523abfae50",
    "prId" : 7591,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7591#pullrequestreview-327677035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33afd8d5-417f-4d3b-81ea-b61de788fa12",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I'm not sure if `ClosedTerm` is the correct name, as it may still contain free variables. It's only free relative to `env`.",
        "createdAt" : "2019-12-05T20:30:01Z",
        "updatedAt" : "2019-12-12T10:52:14Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "0db41ae5cac475b4cd41655282cd9fab18af31b1",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +324,328 @@        }\n        accumulator.foldTree(Set.empty, term)\n    }\n\n    private object IdentArgs {"
  },
  {
    "id" : "5ca6bf75-df5a-4123-aaad-3ab58daa4661",
    "prId" : 7591,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7591#pullrequestreview-327677035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96b39097-0ad9-4e4a-9452-8101f5f38143",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It's not obvious what is the supposed semantics of the extractor. Maybe add a document.",
        "createdAt" : "2019-12-05T20:32:55Z",
        "updatedAt" : "2019-12-12T10:52:14Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "0db41ae5cac475b4cd41655282cd9fab18af31b1",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +336,340 @@        }\n    }\n\n    private def treeOptMatches(scrutinee: Option[Tree], pattern: Option[Tree])(given Context, Env): Matching = {\n      (scrutinee, pattern) match {"
  },
  {
    "id" : "d011902d-f734-447e-bfab-925176702dc9",
    "prId" : 7591,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7591#pullrequestreview-331195843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "221e2b45-67ed-4732-bcc0-fd2b6a0b5d76",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Not sure `widenTermRefExpr` is safe, what if it's used as a singleton type inside?",
        "createdAt" : "2019-12-05T20:39:39Z",
        "updatedAt" : "2019-12-12T10:52:14Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "00bec557-5f85-4cdd-852a-fb67c7f6bce8",
        "parentId" : "221e2b45-67ed-4732-bcc0-fd2b6a0b5d76",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "The singleton would not be phase consistent in the first place. It is always a reference to a symbol defined in the pattern.",
        "createdAt" : "2019-12-12T10:29:11Z",
        "updatedAt" : "2019-12-12T10:52:14Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "aa3c6aca-0fc1-4bd9-b70f-eb4a5d206ca8",
        "parentId" : "221e2b45-67ed-4732-bcc0-fd2b6a0b5d76",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Agreed to keep it as it is, we see no way to break the code in reasonable usage.",
        "createdAt" : "2019-12-12T12:30:14Z",
        "updatedAt" : "2019-12-12T12:30:14Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "0db41ae5cac475b4cd41655282cd9fab18af31b1",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +165,169 @@            }\n            val names = args.map(_.name)\n            val argTypes = args0.map(x => x.tpe.widenTermRefExpr)\n            val resType = pattern.tpe\n            val res = Lambda(MethodType(names)(_ => argTypes, _ => resType), bodyFn)"
  }
]