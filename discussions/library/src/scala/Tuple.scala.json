[
  {
    "id" : "bd1fa830-9138-4250-b895-629fc9bfca90",
    "prId" : 9210,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9210#pullrequestreview-434291705",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bbdea73-3cdf-474e-900f-146c09687ea7",
        "parentId" : null,
        "authorId" : "802e55da-1ddd-4082-bfb6-ae518addb1e6",
        "body" : "A small typo:  `Create a copy` should become `Create a copy of` ",
        "createdAt" : "2020-06-19T18:19:19Z",
        "updatedAt" : "2020-06-24T14:22:25Z",
        "lastEditedBy" : "802e55da-1ddd-4082-bfb6-ae518addb1e6",
        "tags" : [
        ]
      },
      {
        "id" : "87c93fb5-0b4d-41a7-b362-b50827a16451",
        "parentId" : "2bbdea73-3cdf-474e-900f-146c09687ea7",
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "Thanks for pointing it out @nerush!",
        "createdAt" : "2020-06-19T19:12:22Z",
        "updatedAt" : "2020-06-24T14:22:25Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      }
    ],
    "commit" : "25071941fb9eb88bbaf73c2de1ccbd07e1f743b6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +12,16 @@    scala.runtime.Tuple.toArray(this)\n\n  /** Create a copy this tuple as a List */\n  inline def toList: List[Union[this.type]] =\n    this.productIterator.toList"
  },
  {
    "id" : "8a0646b3-4383-4643-83f4-005030b0d60a",
    "prId" : 9210,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9210#pullrequestreview-434275720",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ba6aae9-176a-445e-8cc0-a7cbfc042e88",
        "parentId" : null,
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "```suggestion\r\n  /** Create a copy of this tuple as a List */\r\n```",
        "createdAt" : "2020-06-19T18:39:13Z",
        "updatedAt" : "2020-06-24T14:22:25Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      }
    ],
    "commit" : "25071941fb9eb88bbaf73c2de1ccbd07e1f743b6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +12,16 @@    scala.runtime.Tuple.toArray(this)\n\n  /** Create a copy this tuple as a List */\n  inline def toList: List[Union[this.type]] =\n    this.productIterator.toList"
  },
  {
    "id" : "7baf8f63-5907-49d5-8b06-489848750cfa",
    "prId" : 7073,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7073#pullrequestreview-279578398",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2d2ea6d-f8ee-4b04-a462-29cba4dad0ab",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Probably missing `case _ => Tuple`\r\n\r\n```scala\r\nval t1: Int *: Long *: Tuple = ???\r\nval t2: Int *: Char *: Tuple = ???\r\nval t3: (Int, Int) *: (Long, Char) *: Tuple = t1.zip(t2)\r\n```\r\n\r\nBut maybe the `<: Tuple` is enough.",
        "createdAt" : "2019-08-21T15:29:51Z",
        "updatedAt" : "2019-08-27T11:23:07Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "bf9a8f72-970d-4da3-9089-8e3305094f2d",
        "parentId" : "f2d2ea6d-f8ee-4b04-a462-29cba4dad0ab",
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "Why would that case be necessary? I think the type bound is enough to specify that the result is a tuple",
        "createdAt" : "2019-08-21T15:58:02Z",
        "updatedAt" : "2019-08-27T11:23:07Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "107c58b8-c664-4a19-9eac-73fece062565",
        "parentId" : "f2d2ea6d-f8ee-4b04-a462-29cba4dad0ab",
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "I'll add a test based on your snippet and add that case if it misbehaves",
        "createdAt" : "2019-08-21T16:16:14Z",
        "updatedAt" : "2019-08-27T11:23:07Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "e1efc460-27dc-4f1c-b95d-c83bbdc12b65",
        "parentId" : "f2d2ea6d-f8ee-4b04-a462-29cba4dad0ab",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Also check how the error message looks.",
        "createdAt" : "2019-08-22T05:05:56Z",
        "updatedAt" : "2019-08-27T11:23:07Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "48ceb224-5ff5-4f5e-b1b9-c6b5721e7c79",
        "parentId" : "f2d2ea6d-f8ee-4b04-a462-29cba4dad0ab",
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "Looks like your test case passes without that clause.",
        "createdAt" : "2019-08-22T12:07:27Z",
        "updatedAt" : "2019-08-27T11:23:07Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "ae2db7aa-6bff-4dc7-9e26-06657095ba6c",
        "parentId" : "f2d2ea6d-f8ee-4b04-a462-29cba4dad0ab",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "OK",
        "createdAt" : "2019-08-26T09:09:45Z",
        "updatedAt" : "2019-08-27T11:23:07Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "e7443af0-8eb8-4a84-a828-e759db25cc56",
        "parentId" : "f2d2ea6d-f8ee-4b04-a462-29cba4dad0ab",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I would add it for completeness and to giving it a chance of simplifying the type in the error messages.",
        "createdAt" : "2019-08-26T09:11:04Z",
        "updatedAt" : "2019-08-27T11:23:07Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "de1ee958-ddd9-4c9a-93cf-bb728c114a75",
        "parentId" : "f2d2ea6d-f8ee-4b04-a462-29cba4dad0ab",
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "It is already in the test suite â€“ see the \"More Zip\" comment in `tuple-ops.scala`.",
        "createdAt" : "2019-08-26T11:29:07Z",
        "updatedAt" : "2019-08-27T11:23:07Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "b7f48c98-daa3-42d1-af18-ab37516aab67",
        "parentId" : "f2d2ea6d-f8ee-4b04-a462-29cba4dad0ab",
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "> giving it a chance of simplifying the type in the error messages.\r\n\r\nCan you clarify?",
        "createdAt" : "2019-08-26T11:29:24Z",
        "updatedAt" : "2019-08-27T11:23:07Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      },
      {
        "id" : "eb5532c2-c77f-4ac3-baaf-206f43c1f9c2",
        "parentId" : "f2d2ea6d-f8ee-4b04-a462-29cba4dad0ab",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "To reduce `Zip[Tuple, Tuple]` to just `Tuple`.",
        "createdAt" : "2019-08-26T13:06:44Z",
        "updatedAt" : "2019-08-27T11:23:07Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e7ed32ed38c87ed0a3a0236451c626cf0e8404f",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +100,104 @@    case (h1 *: t1, h2 *: t2) => (h1, h2) *: Zip[t1, t2]\n    case (Unit, _) => Unit\n    case (_, Unit) => Unit\n    case _ => Tuple\n  }"
  },
  {
    "id" : "949f010c-3f94-483a-b219-d1c9ebb68194",
    "prId" : 7073,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7073#pullrequestreview-279473890",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40abfc1e-a160-4a15-bc69-c6dd83aea230",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Add documentation",
        "createdAt" : "2019-08-26T08:51:02Z",
        "updatedAt" : "2019-08-27T11:23:07Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e7ed32ed38c87ed0a3a0236451c626cf0e8404f",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +41,45 @@   *  `(A1, B1) *: ... *: (Ai, Bi) *: Tuple`\n   */\n  inline def zip[This >: this.type <: Tuple, T2 <: Tuple](t2: T2): Zip[This, T2] =\n    DynamicTuple.dynamicZip(this, t2)\n"
  },
  {
    "id" : "3f8173e2-eded-4bff-89fe-361070807c88",
    "prId" : 7073,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7073#pullrequestreview-279473890",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1240c794-18e8-42c0-b7ef-612de32d6ff6",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Add documentation",
        "createdAt" : "2019-08-26T09:09:31Z",
        "updatedAt" : "2019-08-27T11:23:07Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e7ed32ed38c87ed0a3a0236451c626cf0e8404f",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +49,53 @@  *  to be the cons type.\n  */\n  inline def map[F[_]](f: [t] => t => F[t]): Map[this.type, F] =\n    DynamicTuple.dynamicMap(this, f)\n}"
  },
  {
    "id" : "76b5b4f7-7f11-4d52-af85-c3aeb9036716",
    "prId" : 7073,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7073#pullrequestreview-279473890",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58169ece-7712-45e7-8b7e-1982d8c423f5",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Add documentation",
        "createdAt" : "2019-08-26T09:09:40Z",
        "updatedAt" : "2019-08-27T11:23:07Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e7ed32ed38c87ed0a3a0236451c626cf0e8404f",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +97,101 @@   *  where `Ct` is `Unit` if `At` or `Bt` is `Unit`, otherwise `Ct` is `Tuple`.\n   */\n  type Zip[T1 <: Tuple, T2 <: Tuple] <: Tuple = (T1, T2) match {\n    case (h1 *: t1, h2 *: t2) => (h1, h2) *: Zip[t1, t2]\n    case (Unit, _) => Unit"
  },
  {
    "id" : "ab5b603f-a258-4415-8211-c62c8c78e456",
    "prId" : 7073,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7073#pullrequestreview-280076017",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d83d6370-45c2-4c9f-9c97-335bac5dc35f",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "```\r\n /** Called on a tuple `(a1, ..., an)`, returns a new tuple `(f(a1), ..., f(an))`. \r\n  *  The result is typed as `(F[A1], ..., F[An])` if the tuple type is fully known \r\n  *  or `F[A1] *: ... *: F[Ai] *: Tuple` if the tail is not known.\r\n  */\r\n```",
        "createdAt" : "2019-08-27T09:11:02Z",
        "updatedAt" : "2019-08-27T11:23:07Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "74e744a8-b92e-4034-a366-b1728d40b229",
        "parentId" : "d83d6370-45c2-4c9f-9c97-335bac5dc35f",
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "> if the tuple type is fully known \r\n>   *  or\r\n\r\n->\r\n\r\n```\r\nif the tuple type is fully known. If the tuple is of the form `a1 *: ... *: Tuple` (that is, the tail is not known to be the cons type.\r\n```",
        "createdAt" : "2019-08-27T09:43:10Z",
        "updatedAt" : "2019-08-27T11:23:07Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e7ed32ed38c87ed0a3a0236451c626cf0e8404f",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +48,52 @@  *  If the tuple is of the form `a1 *: ... *: Tuple` (that is, the tail is not known\n  *  to be the cons type.\n  */\n  inline def map[F[_]](f: [t] => t => F[t]): Map[this.type, F] =\n    DynamicTuple.dynamicMap(this, f)"
  },
  {
    "id" : "877950b3-b88a-433e-82ce-68127b98e6da",
    "prId" : 7073,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7073#pullrequestreview-280045950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41f471f0-5294-4ee9-9490-db988e03b1d0",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "```\r\n  /** Given two tuples, `(a1, ..., an)` and `(a1, ..., an)`, returns a tuple\r\n   *  `((a1, b1), ..., (an, bn))`. If the two tuples have different sizes,\r\n   *  the extra elements of the larger tuple will be disregarded.\r\n   *  The result is typed as `((A1, B1), ..., (An, Bn))` if at least one of the tuple types has a `Unit` tail\r\n   *  otherwise the result type is `(A1, B1) *: ... *: (Ai, Bi) *: Tuple`\r\n   */\r\n```",
        "createdAt" : "2019-08-27T09:16:52Z",
        "updatedAt" : "2019-08-27T11:23:07Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e7ed32ed38c87ed0a3a0236451c626cf0e8404f",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +41,45 @@   *  `(A1, B1) *: ... *: (Ai, Bi) *: Tuple`\n   */\n  inline def zip[This >: this.type <: Tuple, T2 <: Tuple](t2: T2): Zip[This, T2] =\n    DynamicTuple.dynamicZip(this, t2)\n"
  },
  {
    "id" : "b5f44696-28a4-4104-9228-0876d6807485",
    "prId" : 7073,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7073#pullrequestreview-280045950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7acb42d6-9de6-4f1b-9582-7658c4796b43",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "```suggestion\r\n    case (_, Unit) => Unit\r\n    case _ => Tuple\r\n```",
        "createdAt" : "2019-08-27T09:23:53Z",
        "updatedAt" : "2019-08-27T11:23:07Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e7ed32ed38c87ed0a3a0236451c626cf0e8404f",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +100,104 @@    case (h1 *: t1, h2 *: t2) => (h1, h2) *: Zip[t1, t2]\n    case (Unit, _) => Unit\n    case (_, Unit) => Unit\n    case _ => Tuple\n  }"
  },
  {
    "id" : "6b02d656-d014-42e0-a9ec-2680814ee9ca",
    "prId" : 7073,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7073#pullrequestreview-280045950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2a6e14d-3b11-48c4-9b09-a2334d88322e",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "```\r\n  /** Given two tuples, `A1 *: ... *: An * At` and `B1 *: ... *: Bn *: Bt` \r\n   *  where at least one of `At` or `Bt` is `Unit` or `Tuple`, \r\n   *  returns the tuple type `(A1, B1) *: ... *: (An, Bn) *: Ct` \r\n   *  where `Ct` is `Unit` if `At` or `Bt` is `Unit`, otherwise `Ct` is `Tuple`.\r\n   */\r\n```",
        "createdAt" : "2019-08-27T09:32:37Z",
        "updatedAt" : "2019-08-27T11:23:07Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "79109324-615c-4962-acc6-abd3d929d293",
        "parentId" : "d2a6e14d-3b11-48c4-9b09-a2334d88322e",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "The previous doc assumed the tuples where of fixed size (i.e. had a know tail).",
        "createdAt" : "2019-08-27T09:33:22Z",
        "updatedAt" : "2019-08-27T11:23:07Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e7ed32ed38c87ed0a3a0236451c626cf0e8404f",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +96,100 @@   *  returns the tuple type `(A1, B1) *: ... *: (An, Bn) *: Ct`\n   *  where `Ct` is `Unit` if `At` or `Bt` is `Unit`, otherwise `Ct` is `Tuple`.\n   */\n  type Zip[T1 <: Tuple, T2 <: Tuple] <: Tuple = (T1, T2) match {\n    case (h1 *: t1, h2 *: t2) => (h1, h2) *: Zip[t1, t2]"
  },
  {
    "id" : "628abd5b-76e0-43f0-97f7-7ec8bdd0658f",
    "prId" : 6929,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6929#pullrequestreview-267013950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91533c50-f881-4ce6-88a1-b43977dd4ac1",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Will a bound on `IArray` work, like `opaque type IArray[+T] <: Seq[T] = Array[_ <: T]`?",
        "createdAt" : "2019-07-26T06:08:50Z",
        "updatedAt" : "2019-07-26T07:49:31Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "b0d7f08d-304c-4200-bde1-a3addb0bbbaa",
        "parentId" : "91533c50-f881-4ce6-88a1-b43977dd4ac1",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Probably not. We need to do the same as array does and define a WrappedIArray for it.",
        "createdAt" : "2019-07-26T06:40:48Z",
        "updatedAt" : "2019-07-26T07:49:31Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c320fa893cd91e7ba8ee3ce67d7fe6c24326f54",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +90,94 @@      case xs =>\n        // TODO suport IArray.map\n        xs.asInstanceOf[Array[T]].map(_.asInstanceOf[Object]).asInstanceOf[IArray[Object]]\n    }\n    DynamicTuple.dynamicFromIArray[Tuple](xs2)"
  }
]