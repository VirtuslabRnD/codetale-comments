[
  {
    "id" : "01809b0d-95b6-49d2-970f-057c4efd0909",
    "prId" : 8500,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8500#pullrequestreview-372640513",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7dc5e1c5-d872-433d-9acd-442815fa86aa",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Minor: a complex import for just one line of code does not look nice.",
        "createdAt" : "2020-03-11T09:29:34Z",
        "updatedAt" : "2020-03-11T10:35:27Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "9c0a6719-863e-4aac-9516-127043056570",
        "parentId" : "7dc5e1c5-d872-433d-9acd-442815fa86aa",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Should be able to remove with #8502. I will rebase and check.",
        "createdAt" : "2020-03-11T10:27:59Z",
        "updatedAt" : "2020-03-11T10:35:27Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "9959d579-633d-449e-9b20-9dca2cae3548",
        "parentId" : "7dc5e1c5-d872-433d-9acd-442815fa86aa",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Indeed. I removed the imports.",
        "createdAt" : "2020-03-11T10:35:43Z",
        "updatedAt" : "2020-03-11T10:35:44Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "300332f2ae2abfc290b8c95826ee8b2d70ca946d",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +12,16 @@  /** Show a source code like representation of this expression */\n  def show(syntaxHighlight: SyntaxHighlight)(using qctx: QuoteContext): String =\n    this.unseal.showWith(syntaxHighlight)\n\n  /** Return the value of this expression."
  },
  {
    "id" : "bb97c24d-172e-4401-baa2-c9d66aed3edc",
    "prId" : 8061,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8061#pullrequestreview-347244877",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae57b6db-c992-42cc-9c27-4bf73219a706",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It seems this method only invites errors in meta-programming, maybe we should just remove it.",
        "createdAt" : "2020-01-23T11:22:05Z",
        "updatedAt" : "2020-01-23T15:49:39Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "1c5acfc9-4b67-421e-b0fe-be4bbc8a07da",
        "parentId" : "ae57b6db-c992-42cc-9c27-4bf73219a706",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Without it we would end up writing `expr.getValue.get` all over the place which would crash the macro expansion. This alternative emits an error saying that the call expected a constant value. Pointing to the argument that is not a value.",
        "createdAt" : "2020-01-23T12:01:53Z",
        "updatedAt" : "2020-01-23T15:49:39Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "e56574f4ba89f651fac58b96440731f00a440005",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +25,29 @@   */\n  final def value[U >: T](given qctx: QuoteContext, valueOf: ValueOfExpr[U]): U =\n    valueOf(this).getOrElse(qctx.throwError(s\"Expected a known value. \\n\\nThe value of: $show\\ncould not be recovered using $valueOf\", this))\n\n  /** Pattern matches `this` against `that`. Effectively performing a deep equality check."
  },
  {
    "id" : "a34ab020-28a0-4d78-ab21-51525c66efc1",
    "prId" : 8061,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8061#pullrequestreview-347241458",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "583d381d-65bb-4d58-9c09-17d311523dd3",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I find `getValue` is a little misleading, if what it does is to get the literal out. Maybe `getLiteralValue`?",
        "createdAt" : "2020-01-23T11:23:51Z",
        "updatedAt" : "2020-01-23T15:49:39Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "0bb535a0-4dba-4230-acb9-66cdbca13a61",
        "parentId" : "583d381d-65bb-4d58-9c09-17d311523dd3",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It is not necessarily a literal value.",
        "createdAt" : "2020-01-23T11:55:27Z",
        "updatedAt" : "2020-01-23T15:49:39Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "e56574f4ba89f651fac58b96440731f00a440005",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +17,21 @@   *  Otherwise returns the `Some` of the value.\n   */\n  final def getValue[U >: T](given qctx: QuoteContext, valueOf: ValueOfExpr[U]): Option[U] = valueOf(this)\n\n  /** Return the value of this expression."
  },
  {
    "id" : "7fa8e65a-194d-4f2c-8d2a-04188fe928ef",
    "prId" : 7591,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7591#pullrequestreview-331146458",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b63e30b-b676-4bed-ba97-7a4a04cd9ebe",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "`f` should be `Expr[(T1, T2, T3) => R]`? Maybe add a test.",
        "createdAt" : "2019-12-05T20:46:23Z",
        "updatedAt" : "2019-12-12T10:52:14Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "3fe18f23-6698-4872-ad87-d92eca41772d",
        "parentId" : "0b63e30b-b676-4bed-ba97-7a4a04cd9ebe",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Fixed and added test",
        "createdAt" : "2019-12-12T10:55:04Z",
        "updatedAt" : "2019-12-12T10:55:04Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "0db41ae5cac475b4cd41655282cd9fab18af31b1",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +223,227 @@      val (params, bodyExpr) = paramsAndBody(f)\n      content(bodyExpr, [t] => (e: Expr[t]) => (v1: Expr[T1], v2: Expr[T2], v3: Expr[T3]) => bodyFn[t](e.unseal, params, List(v1.unseal, v2.unseal, v3.unseal)).seal.asInstanceOf[Expr[t]])\n    }\n\n    private def paramsAndBody[R](given qctx: QuoteContext)(f: Expr[Any]) = {"
  },
  {
    "id" : "0ed7510a-1642-4c6d-a971-6e286a5525ac",
    "prId" : 7591,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7591#pullrequestreview-331129421",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62bd4c77-c339-4ecf-8701-2b809bc3a6a9",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It's not clear how `open/close` is useful. I'd suggest removing them for now.",
        "createdAt" : "2019-12-05T20:49:32Z",
        "updatedAt" : "2019-12-12T10:52:14Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "6ac97caf-0ce9-438d-a695-6fbcb4aa86e6",
        "parentId" : "62bd4c77-c339-4ecf-8701-2b809bc3a6a9",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I cannot remove it without breaking some tests. I particular those that test the code infrastructure for what @biboudis is working on.",
        "createdAt" : "2019-12-12T10:26:42Z",
        "updatedAt" : "2019-12-12T10:52:14Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "0db41ae5cac475b4cd41655282cd9fab18af31b1",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +211,215 @@      val (params, bodyExpr) = paramsAndBody(f)\n      content(bodyExpr, [t] => (e: Expr[t]) => (v: Expr[T1]) => bodyFn[t](e.unseal, params, List(v.unseal)).seal.asInstanceOf[Expr[t]])\n    }\n\n    def open[T1, T2, R, X](f: Expr[(T1, T2) => R])(content: (Expr[R], [t] => Expr[t] => (Expr[T1], Expr[T2]) => Expr[t]) => X)(given qctx: QuoteContext)(given DummyImplicit): X = {"
  },
  {
    "id" : "2196711e-39ad-4bb0-9189-8f41a12d276f",
    "prId" : 7506,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7506#pullrequestreview-312542309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b8b664e-5ff9-482f-835f-2478e10609a4",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Maybe add a comment about what we can expect if two Expr are equal. For example, why referential equality is not good enough?",
        "createdAt" : "2019-11-06T11:16:36Z",
        "updatedAt" : "2019-11-06T15:55:05Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "d30c5bbd-d8e7-4bcd-b275-b9e434de7de2",
        "parentId" : "9b8b664e-5ff9-482f-835f-2478e10609a4",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Added a comment",
        "createdAt" : "2019-11-06T15:55:23Z",
        "updatedAt" : "2019-11-06T15:55:23Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "845fe936a7dff6a93499c47e75102f766d23874f",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +197,201 @@          tree == that.tree && scopeId == that.scopeId\n        case _ => false\n      }\n      override def hashCode: Int = tree.hashCode\n      override def toString: String = s\"Expr(<tasty tree>)\""
  },
  {
    "id" : "d7ab5427-cc5d-4ede-9924-a7589146d585",
    "prId" : 7299,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7299#pullrequestreview-292833110",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5543d7ca-dba4-4881-b705-378010db19ba",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "> Beta-reduces the function appication (typo)\r\n\r\nThe doc is a little misleading: it seems not to be the beta-reduction people usually have in mind?\r\n",
        "createdAt" : "2019-09-24T21:27:35Z",
        "updatedAt" : "2019-09-25T06:27:04Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "f1669434-b27d-4304-b9d2-b99a97183535",
        "parentId" : "5543d7ca-dba4-4881-b705-378010db19ba",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Updated.",
        "createdAt" : "2019-09-25T05:18:47Z",
        "updatedAt" : "2019-09-25T06:27:04Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "19797491d13c920bb1e7237dee666da9e019955a",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +40,44 @@      import qctx.tasty._\n      tg.untupled(args => qctx.tasty.internal.betaReduce(f.unseal, args.toArray.toList.map(_.asInstanceOf[QuoteContext => Expr[_]](qctx).unseal)).seal.asInstanceOf[Expr[R]])\n    }\n\n    /** `Expr.betaReduceGiven(f)(x1, ..., xn)` is functionally the same as `'{($f)(given $x1, ..., $xn)}`, however it optimizes this call"
  },
  {
    "id" : "4821760c-3ee9-42ff-a9d8-070fb27ae371",
    "prId" : 4894,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4894#pullrequestreview-143419468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edb7a14a-f5a4-41d1-ad6f-ace281072d7a",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I think it'd make sense to make the subclasses covariant too for consistency.",
        "createdAt" : "2018-08-05T15:14:17Z",
        "updatedAt" : "2018-08-05T15:14:17Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "32d71ea5-476a-44f7-bc3a-bfd5cc916d31",
        "parentId" : "edb7a14a-f5a4-41d1-ad6f-ace281072d7a",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Yes, I will add apt them",
        "createdAt" : "2018-08-05T17:35:54Z",
        "updatedAt" : "2018-08-05T17:35:54Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "06d1420c-283c-40a7-9db5-c95a6b01b2e5",
        "parentId" : "edb7a14a-f5a4-41d1-ad6f-ace281072d7a",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Done in #4896",
        "createdAt" : "2018-08-05T18:36:45Z",
        "updatedAt" : "2018-08-05T18:36:46Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "71052ccaf5b84ca3832f63a27b40f4b7a6ef75da",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3,7 @@import scala.runtime.quoted.Unpickler.Pickled\n\nsealed abstract class Expr[+T] {\n  final def unary_~ : T = throw new Error(\"~ should have been compiled away\")\n"
  }
]