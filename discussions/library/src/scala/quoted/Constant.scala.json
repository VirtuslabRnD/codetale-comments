[
  {
    "id" : "8cddf338-aed2-42a7-9fe3-142316f8a41e",
    "prId" : 3697,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/3697#pullrequestreview-90299146",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3e43549-cd6b-456e-9e27-1ca12dcf08c3",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "We should leave design space for other extractors as well. Some thoughts:\r\n\r\n- it's better all extractors are located in the same file (as there aren't many)\r\n- the name `runner` doesn't make sense to programmers.\r\n    - FYI, in gestalt it's called `Toolbox`, in macros it's called `Universe`.\r\n- `ConstantExpr` can be removed, and Liftables could be implemented with an implicit `Runner`\r\n",
        "createdAt" : "2018-01-19T16:35:38Z",
        "updatedAt" : "2018-01-21T11:11:18Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "072078da-7cf8-425a-b18a-1c52b64378fe",
        "parentId" : "e3e43549-cd6b-456e-9e27-1ca12dcf08c3",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Needing an implicit `Runner` is something that should be avoided. That would create an unnecessary dependency on the compiler/toolbox. In the current design, if you only quote, splice and inline the user never needs to add the runner.",
        "createdAt" : "2018-01-20T07:08:25Z",
        "updatedAt" : "2018-01-21T11:11:18Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "73b34fce-9335-40b7-ae15-325f11724957",
        "parentId" : "e3e43549-cd6b-456e-9e27-1ca12dcf08c3",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Thanks for the explanation. I just want to point out another logically consistent design. As long as the design tradeoffs are clear,  I think it's fine to optimise.",
        "createdAt" : "2018-01-20T09:08:50Z",
        "updatedAt" : "2018-01-21T11:11:18Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "56f667c8-aa6c-45dc-99d2-87fb6960dc9f",
        "parentId" : "e3e43549-cd6b-456e-9e27-1ca12dcf08c3",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "In essence, the runner is equivalent to the toolbox except that we only use it to interpret expression at runtime (compile and run, show and deconstruction). The constructor are the quotes themselves, `'(if (~cond) ~e1 else ~e2)` is the constructor for an if expression. The only missing constructor is for literal constants from runtime primitive values, which we special case in `ConstantExpr`. It is true that having `ConstantExpr` is more performant but it is not an optimization. Thought we could decide to compile `'(5)` to a `ConstantExpr` to avoid the pickling memory and runtime costs.",
        "createdAt" : "2018-01-20T09:22:38Z",
        "updatedAt" : "2018-01-21T11:11:18Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6da04f8603d23769d55f6a39d8c51512238f274",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +5,9 @@object Constant {\n  def unapply[T](expr: Expr[T])(implicit runner: Runner[T]): Option[T] = runner.toConstantOpt(expr)\n}"
  }
]