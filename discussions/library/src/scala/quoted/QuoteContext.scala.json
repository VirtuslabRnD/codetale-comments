[
  {
    "id" : "1295d0fe-65b7-4804-973a-31dc758eac77",
    "prId" : 10402,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10402#pullrequestreview-535299384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b291389e-1d8b-4f16-bd42-b1e79f399b29",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Minor: what about `currentOwner`? I find `spliceOwner` is not so easy to understand.",
        "createdAt" : "2020-11-20T09:57:45Z",
        "updatedAt" : "2020-11-20T10:48:40Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "de415bdb-f915-4ed0-91d4-01ba689d8b49",
        "parentId" : "b291389e-1d8b-4f16-bd42-b1e79f399b29",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "The current owner will eventually need to disappear if we use an explicit owner scheme. `spliceOwner` is the ower of the current splice (i.e. `x` in `val x = ${ ... }; ...`). This is the same as the owner of the current `QuoteContext`. But `currentOwner` would be a confusing name to use for this one as in the middle of a `TreeMap` the current owner is not the same as the owner of the `QuoteContext`.",
        "createdAt" : "2020-11-20T10:19:26Z",
        "updatedAt" : "2020-11-20T10:48:40Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc03cb6da421074520644277d7a204785f4d7aeb",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +2685,2689 @@       */\n      def spliceOwner: Symbol\n\n      /** Returns the symbol of the current enclosing definition */\n      def currentOwner(using ctx: Context): Symbol"
  },
  {
    "id" : "26d85f93-ba5a-49bb-8a0f-bbff57b17146",
    "prId" : 6723,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6723#pullrequestreview-256237410",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "985415d5-576a-446b-893e-e43160a54034",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Nitpick : I'm not sure if `tasty` is a good name: (1) as a meta-programmer, I don't care about whether tasty or not, but only if the APIs are stable, useful and friendly; and it's easy to debug compiler crashes when using reflect API; (2) Reflection is more like an interface to compiler, `reflect` might be a better name.",
        "createdAt" : "2019-06-30T10:34:19Z",
        "updatedAt" : "2019-07-01T08:02:27Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "a319184b-810c-45e4-badc-025d4d78044c",
        "parentId" : "985415d5-576a-446b-893e-e43160a54034",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "In this case `tasty` should be read as the _Typed AST_ API. I will add some documentation for it.\r\n\r\nWe cannot use `reflect` as it conflicts with the `scala.reflect` package and also the expectation of the users that know about `scala.reflect`. Calling `scala.tasty.Reflection` has already proven to lead the confusion and we should probably also rename it.",
        "createdAt" : "2019-07-01T07:51:34Z",
        "updatedAt" : "2019-07-01T08:02:27Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "e96b473d-61de-4b02-8514-ffa0d3e0aaa4",
        "parentId" : "985415d5-576a-446b-893e-e43160a54034",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "At least in `scalatest` it does not [affect the code much](https://github.com/dotty-staging/scalatest/compare/b05be940b58440ee9dcf38f584f3283fc1d01799...600252602d346aaa7fb9402f70b2bfb4ec3ed9fa#diff-d615fbd417fa40ffd83fa5a537bac9b3), we can even remove one import per file.",
        "createdAt" : "2019-07-01T09:52:10Z",
        "updatedAt" : "2019-07-01T09:53:00Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9346599d9400f4c1883127fcae519d0b1233c99",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +11,15 @@ *  @param tasty Typed AST API. Usage: `def f(qctx: QuoteContext) = { import qctx.tasty._; ... }`.\n */\nclass QuoteContext(val tasty: scala.tasty.Reflection) {\n\n  def show[T](expr: Expr[T], syntaxHighlight: SyntaxHighlight): String = {"
  }
]