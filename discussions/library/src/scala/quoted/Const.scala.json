[
  {
    "id" : "e2349190-6896-467f-961c-42a9c36c8373",
    "prId" : 10684,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10684#pullrequestreview-547258020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7841b57f-0df3-4ab3-b6cb-08a6aa752226",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I remember in the meeting we agree to keep `Const` as an extractor. Or I misunderstood?",
        "createdAt" : "2020-12-08T10:38:21Z",
        "updatedAt" : "2020-12-08T10:38:29Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "bf0f8f0b-9a88-44e3-af1a-89f88336eb7d",
        "parentId" : "7841b57f-0df3-4ab3-b6cb-08a6aa752226",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We keep it in `scala.quoted.util` as it duplicates logic in `scala.quoted`. This is the only responsable action as we could add it back in `scala.quoted` but we would not be able to remove it.\r\n\r\nIt is already in `scala.quoted.util`.",
        "createdAt" : "2020-12-08T11:15:59Z",
        "updatedAt" : "2020-12-08T11:15:59Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "ca5b3ccc-6dcc-44f5-ba47-9c71f57c352b",
        "parentId" : "7841b57f-0df3-4ab3-b6cb-08a6aa752226",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It will be a pity that when a meta-programmer wants to pattern macher on a constant (which is a common need as we know in meta-programming), he has to add another library as a dependency.",
        "createdAt" : "2020-12-08T11:37:16Z",
        "updatedAt" : "2020-12-08T11:37:17Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "39f08f44-1302-46fd-9488-fa7512b53b6c",
        "parentId" : "7841b57f-0df3-4ab3-b6cb-08a6aa752226",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "The point is that they can do it using `.value` or `Expr`. Both cover all the cases that `Const` covers without the performance penalty and with better warnings in the pattern matching. It would be a pity to give them a version that is just tempting to use due to its name, but is always a worse option.\r\n\r\nWe have already seen that all uses cases in our test and in the community-build where better with `.value`/`Expr`. We do not have any remaining places were we would use `Const`.\r\n\r\nExplaining this extractor to new users is also unnecessarily hard and confusing. After introducing `.value`/`Expr` we need to tell them that they can optionally use this other variant that does less and is less performant. Why would a user want to use it then? Then the next step is to tell them that the `Const` extractor does not match `Constant`, the reason being that `Const` matches what `Expr` matches but only for primitive types. This amount of confusion is too much. I know what is the difference between those extractors, but even you, having worked with them for a long time, have show confusion about the differences.",
        "createdAt" : "2020-12-08T12:16:56Z",
        "updatedAt" : "2020-12-08T12:16:56Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "d2cc2d25-2711-46f9-9513-7627858a4e78",
        "parentId" : "7841b57f-0df3-4ab3-b6cb-08a6aa752226",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "> We have already seen that all uses cases in our test and in the community-build where better with `.value`/`Expr`. We do not have any remaining places were we would use `Const`.\r\n\r\nI basically agree with this. However, we cannot exclude some use cases where the usage of `Const(v)` in pattern matching is more convenient. If I were correct, the typical textbook example `power` is one such usage.\r\n\r\nOn the other hand, something is missing _at the conceptual level_ if there is no capability to directly pattern match on literals, while it is possible to do so on other syntactic forms. If we remove this capability, it would be good to remove pattern matching on quotes completely, and only keep tree pattern matching in reflect, which IMHO is a reasonable choice.\r\n\r\n> Explaining this extractor to new users is also unnecessarily hard and confusing.\r\n\r\nIt seems to me in meta-programming, inspecting literals is very natural, and having a dedicated extractor for that will not cause problems.",
        "createdAt" : "2020-12-08T12:34:40Z",
        "updatedAt" : "2020-12-08T12:34:40Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "4c3e52da-563d-4be1-8322-d15a53bd5475",
        "parentId" : "7841b57f-0df3-4ab3-b6cb-08a6aa752226",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "You mean the following `power`?\r\n\r\n```scala\r\n\r\ndef power(xExpr: Expr[Double], nExpr: Expr[Int])(using Quotes): Expr[Double] =\r\n  (xExpr.value, nExpr.value) match \r\n     case (Some(x), Some(n)) => Expr(x.pow(n))\r\n     case (Some(x), _) => '{...}\r\n     case (_, Some(n)) => unrollPower(xExpr, n)\r\n     case (_, _) => '{ $xExpr.pow($nExpr) }\r\n```\r\nHow would that benefit from using `Const` or `Expr`? We could do the following but it only has drawbacks. Calling `Const.unapply` is more expensive than `.value` and we need to call it twice instead of once. \r\n```diff\r\n-  (xExpr, nExpr) match \r\n-    case (Const(x), Const(n)) => Expr(x.pow(n))\r\n-     case (Const(x), _) => '{...}\r\n-     case (_, Const(n)) => unrollPower(xExpr, n)\r\n-     case (_, _) => '{ $xExpr.pow($nExpr) }\r\n```\r\n\r\n> It seems to me in meta-programming, inspecting literals is very natural, and having a dedicated extractor for that will not cause problems.\r\n\r\nWe have a dedicated concept for it which is called `FromExpr` and used by `Expr.unapply`. Calling it `Const` or `Literal` only leads to confusion as those do not match `Constant`s or `Literal`s. They match what `Expr` matches. It does not make any sense overload concepts and bloat the API with duplicated logic. It is simpler to explain `Expr` and be done with it rather than giving them another option that does less but requires the understanding the `Expr` first.",
        "createdAt" : "2020-12-08T13:22:01Z",
        "updatedAt" : "2020-12-08T13:22:01Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "a8936c32-d57e-477f-9947-02b901fe956c",
        "parentId" : "7841b57f-0df3-4ab3-b6cb-08a6aa752226",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "> You mean the following `power`?\r\n> \r\n> ```scala\r\n> def power(xExpr: Expr[Double], nExpr: Expr[Int])(using Quotes): Expr[Double] =\r\n>   (xExpr.value, nExpr.value) match \r\n>      case (Some(x), Some(n)) => Expr(x.pow(n))\r\n>      case (Some(x), _) => '{...}\r\n>      case (_, Some(n)) => unrollPower(xExpr, n)\r\n>      case (_, _) => '{ $xExpr.pow($nExpr) }\r\n> ```\r\n> \r\n> How would that benefit from using `Const` or `Expr`? We could do the following but it only has drawbacks. Calling `Const.unapply` is more expensive than `.value` and we need to call it twice instead of once.\r\n> \r\n> ```diff\r\n> -  (xExpr, nExpr) match \r\n> -    case (Const(x), Const(n)) => Expr(x.pow(n))\r\n> -     case (Const(x), _) => '{...}\r\n> -     case (_, Const(n)) => unrollPower(xExpr, n)\r\n> -     case (_, _) => '{ $xExpr.pow($nExpr) }\r\n> ```\r\n\r\nThanks for correcting my memory. I have in mind use cases like `case '{ power(${const(x)}. $y) } => ...`, where the usage of extractors are more convenient than `.value`.\r\n\r\n> \r\n> > It seems to me in meta-programming, inspecting literals is very natural, and having a dedicated extractor for that will not cause problems.\r\n> \r\n> We have a dedicated concept for it which is called `FromExpr` and used by `Expr.unapply`. Calling it `Const` or `Literal` only leads to confusion as those do not match `Constant`s or `Literal`s. They match what `Expr` matches. It does not make any sense overload concepts and bloat the API with duplicated logic. It is simpler to explain `Expr` and be done with it rather than giving them another option that does less but requires the understanding the `Expr` first.\r\n\r\nIt seems to be the exact reason why it cannot be renamed --- because `Expr.unapply` is not dedicated for pattern matching on literals. Missing a dedicated extractor for a category of syntactic forms seems to be a flaw at the coneptual level.",
        "createdAt" : "2020-12-08T13:37:51Z",
        "updatedAt" : "2020-12-08T13:37:51Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "608b9d5a-114c-4244-9b9e-f9a88a83ea4c",
        "parentId" : "7841b57f-0df3-4ab3-b6cb-08a6aa752226",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It could be renamed as shown in #10673. But there was some backlash against that. Either way, we cannot add every of the extractor in the library. This is why `scala.quoted.util` was created. This way we can provide different more specialized extractors such as `Const`, `Value`, `StringContextExpr`, ... . All those extractors that are not required or not necessarily practical to all users.\r\n\r\nI cannot spend more days fixing this issue. We should just merge it. Users will be able to use trivially the `scala.quoted.util.Const` instead or other variants that we might come up with that is more inline with their goals. If in the future we see actual use cases, then we can consider moving it to `scala.quoted`.",
        "createdAt" : "2020-12-08T13:52:46Z",
        "updatedAt" : "2020-12-08T13:52:46Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "1e988dd5-381b-41a1-966c-e5ca985c0b40",
        "parentId" : "7841b57f-0df3-4ab3-b6cb-08a6aa752226",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "There might be arguments for the design I'm not aware of. Please do what makes sense.",
        "createdAt" : "2020-12-08T13:59:02Z",
        "updatedAt" : "2020-12-08T13:59:02Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "d43368e331b19292c892415b9d019086ef3f9276",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3,7 @@/** Literal constant values */\n@deprecated(\"Use `scala.quoted.Expr` instead. This will be removed in 3.0.0-RC1\", \"3.0.0-M3\")\nobject Const {\n\n  /** Matches expressions containing literal constant values and extracts the value."
  }
]