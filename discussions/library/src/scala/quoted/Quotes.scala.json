[
  {
    "id" : "889d533f-cf3e-4e66-96c6-5cede3373cf7",
    "prId" : 12056,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/12056#pullrequestreview-634788619",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e495df2-e924-4aa1-856c-cfe4e207dba8",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "An API addition can only be done in 3.1, unless we get this PR into 3.0.0-RC3",
        "createdAt" : "2021-04-13T13:21:07Z",
        "updatedAt" : "2021-05-11T16:17:52Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "ebc003a7-989c-445e-aa81-3bae15003b6e",
        "parentId" : "3e495df2-e924-4aa1-856c-cfe4e207dba8",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I forgot to update that one to `3.1.0`. Done.",
        "createdAt" : "2021-04-13T16:03:51Z",
        "updatedAt" : "2021-05-11T16:17:52Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "0b6845e7-59c5-487f-83d3-48e38be2ba43",
        "parentId" : "3e495df2-e924-4aa1-856c-cfe4e207dba8",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Ah, if this PR is not supposed to be merged until 3.1.0 then we should mark it as draft for now.",
        "createdAt" : "2021-04-13T16:18:51Z",
        "updatedAt" : "2021-05-11T16:17:52Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "43fec8ff6f878c96b7262925d49888f0ce5797e7",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +71,75 @@     */\n    @experimental\n    def valueOrAbort(using FromExpr[T]): T\n\n  end extension"
  },
  {
    "id" : "09ab37f2-231a-49de-9f60-bb7b5fed8609",
    "prId" : 12056,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/12056#pullrequestreview-660775698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12caf933-6e4d-4d8f-83e4-c0e69852d4f4",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I'd suggest the method to take a message for indicating the reason why it's aborted. It helps end-users in debugging and saves the efforts of macro-authors in writing error-handling code.",
        "createdAt" : "2021-05-13T15:06:14Z",
        "updatedAt" : "2021-05-13T15:06:46Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "1d97fc96-164d-41ba-ab20-0abf64a4cc9a",
        "parentId" : "12caf933-6e4d-4d8f-83e4-c0e69852d4f4",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "The question then is if we should keep the version with the default error message. The idea if this signature was also to make the authors not need to write the error message.\r\n\r\nCurrently the can do \r\n```scala\r\nx.value match\r\n  case Some(n) => ...\r\n  case None => reflect.report.error(\"......\", x)\r\n```\r\nor just\r\n```scala\r\nif x.valueOrAbort == 0 then ...\r\nelse \r\n```\r\n\r\nthe proposed one would need to add the message\r\n```scala\r\nif x.valueOrAbort(\".........\") == 0 then\r\nelse ...\r\n```\r\n",
        "createdAt" : "2021-05-17T08:52:08Z",
        "updatedAt" : "2021-05-17T08:52:09Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "f1ebea61-a79c-4c9d-b9ab-fafa66f00363",
        "parentId" : "12caf933-6e4d-4d8f-83e4-c0e69852d4f4",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Indeed, the version with the error message does not look better in code and can be a little annoying for prototyping. For macro authors, it's not clear that it's better.\r\n\r\nMacros can be subtle to use,  more debuggability to end-users will make them more friendly for usage. However, if the gain for end-users is small, maybe it's not worth the complication.\r\n\r\n> The question then is if we should keep the version with the default error message\r\n\r\nWe probably only want to keep one of the two.",
        "createdAt" : "2021-05-17T09:02:54Z",
        "updatedAt" : "2021-05-17T09:02:54Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "bd3bc214-54a6-4b2c-8b11-7ff57d978228",
        "parentId" : "12caf933-6e4d-4d8f-83e4-c0e69852d4f4",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We could add an `valueOrAbortWith(\"....\")` later or users will just define their own in the meantime. We should probably wait and see what users define themselves to know what is preferable in paractice.",
        "createdAt" : "2021-05-17T09:07:31Z",
        "updatedAt" : "2021-05-17T09:07:31Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "bd83ed98-1929-4897-916d-d59a226665a4",
        "parentId" : "12caf933-6e4d-4d8f-83e4-c0e69852d4f4",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Meanwhile, they can just define something like this in their projects\r\n\r\n```scala\r\nextension [T: FromExpr](expr: Expr[T]) \r\n  def valueOrAbortWith(msg: String)(using Quotes) = \r\n    x.value match\r\n      case Some(n) => n\r\n      case None => reflect.report.errorAndAbort(msg, x)\r\n```\r\n\r\n```scala\r\nExpr(1).valueOrAbortWith(\"expected a constant\")\r\n```",
        "createdAt" : "2021-05-17T09:11:29Z",
        "updatedAt" : "2021-05-17T09:11:29Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "76862880-315a-4487-9a40-3b64c8eb524b",
        "parentId" : "12caf933-6e4d-4d8f-83e4-c0e69852d4f4",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I agree, it's better to wait and do it later.",
        "createdAt" : "2021-05-17T09:48:25Z",
        "updatedAt" : "2021-05-17T09:48:25Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "43fec8ff6f878c96b7262925d49888f0ce5797e7",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +72,76 @@    @experimental\n    def valueOrAbort(using FromExpr[T]): T\n\n  end extension\n"
  },
  {
    "id" : "8720658a-b7cb-4a8d-95bd-00e1f36f315f",
    "prId" : 10661,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10661#pullrequestreview-552136665",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcd24d78-9048-43b0-9174-4b0785e4bb38",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "With Printer being a member of the Reflection trait, it seems very tricky for users to write their own custom printer that works with any Reflection context. Is there an example of how to do that? If it's not possible maybe we can come up with a better API here.",
        "createdAt" : "2020-12-10T20:06:19Z",
        "updatedAt" : "2020-12-10T20:06:19Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "6803dbb3-171d-4f55-b490-4f997460ff4e",
        "parentId" : "bcd24d78-9048-43b0-9174-4b0785e4bb38",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "There are examples of how to use the Tree map that is quite similar. I will add an example for printer.",
        "createdAt" : "2020-12-11T07:03:13Z",
        "updatedAt" : "2020-12-11T07:03:13Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "b3f71682-0859-4eee-a6b8-9e1c785a45b8",
        "parentId" : "bcd24d78-9048-43b0-9174-4b0785e4bb38",
        "authorId" : "934162bc-7782-44b1-a3fa-f6b2838a75e5",
        "body" : "That would be nice.",
        "createdAt" : "2020-12-15T06:20:49Z",
        "updatedAt" : "2020-12-15T06:20:49Z",
        "lastEditedBy" : "934162bc-7782-44b1-a3fa-f6b2838a75e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "73226690313380c26c7de356685b99cff2340586",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +4017,4021 @@    trait Printer[T]:\n      /** Show the arguments as a `String` */\n      def show(x: T): String\n    end Printer\n"
  },
  {
    "id" : "e9b823d3-fb6a-407e-8de2-8718d3b0b381",
    "prId" : 10622,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10622#pullrequestreview-543911281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48a3dbfd-0fc9-47f2-8a8f-8197961be7c1",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "```suggestion\r\n      /** Is this symbol a declared, but not defined member */\r\n```",
        "createdAt" : "2020-12-03T12:38:42Z",
        "updatedAt" : "2020-12-03T13:15:49Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "53b6bd86b53291bdee821057db0f0818302e4428",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +3906,3910 @@      def Covariant: Flags\n\n      /** Is a declared, but not defined member */\n      def Deferred: Flags\n"
  },
  {
    "id" : "0849515e-5705-4dc2-bcd5-613ab713e151",
    "prId" : 10622,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10622#pullrequestreview-543911281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e56b94a3-e40e-4de7-9c54-748da9146024",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "```suggestion\r\n      /** Is this symbol an infix method or type */\r\n```",
        "createdAt" : "2020-12-03T12:39:13Z",
        "updatedAt" : "2020-12-03T13:15:49Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "53b6bd86b53291bdee821057db0f0818302e4428",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +3939,3943 @@      def Implicit: Flags\n\n      /** Is an infix method or type */\n      def Infix: Flags\n"
  },
  {
    "id" : "5ee74482-ba4d-4b56-853d-a047347aab9a",
    "prId" : 10622,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10622#pullrequestreview-543911281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c964a45-1f64-4951-836e-ffe46ff45206",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "```suggestion\r\n      /** Is this symbol implemented as a Java static */\r\n```",
        "createdAt" : "2020-12-03T12:39:25Z",
        "updatedAt" : "2020-12-03T13:15:49Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "53b6bd86b53291bdee821057db0f0818302e4428",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +3948,3952 @@      def JavaDefined: Flags\n\n      /** Is implemented as a Java static */\n      def JavaStatic: Flags\n"
  },
  {
    "id" : "cf5a231a-f2ac-45af-b9d1-6bd701060c93",
    "prId" : 10622,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10622#pullrequestreview-543911281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33a44e87-0f58-435e-9884-7b34769f49ae",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "```suggestion\r\n      /** Is this symbol a transparent inline method or trait */\r\n```",
        "createdAt" : "2020-12-03T12:40:07Z",
        "updatedAt" : "2020-12-03T13:15:49Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "53b6bd86b53291bdee821057db0f0818302e4428",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +4016,4020 @@      def Trait: Flags\n\n      /** Is a transparent inline method or trait */\n      def Transparent: Flags\n"
  },
  {
    "id" : "0ad5dbe4-40c5-4358-9f0a-831052011ed8",
    "prId" : 10622,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10622#pullrequestreview-543947053",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fe9b5d2-2c35-4b86-a87b-d368c0559cc0",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "```suggestion\r\n      /** Is this symbol compiler-generated and not meant to be called in source code.\r\n```",
        "createdAt" : "2020-12-03T13:23:27Z",
        "updatedAt" : "2020-12-03T13:23:28Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "53b6bd86b53291bdee821057db0f0818302e4428",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3889,3893 @@      def Abstract: Flags\n\n      /** Is this generated by Scala compiler.\n       *  Coresponds to ACC_SYNTHETIC in the JVM.\n       */"
  },
  {
    "id" : "2f89f830-527c-47ad-b118-11dbc8a6d3b2",
    "prId" : 10613,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10613#pullrequestreview-543658254",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a170013a-7e25-4a04-9c57-aaf1ddf86833",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Looks like you could directly use abstract givens for this now:\r\n```suggestion\r\n    given PackageClauseTypeTest: TypeTest[Tree, PackageClause]\r\n```",
        "createdAt" : "2020-12-02T19:44:30Z",
        "updatedAt" : "2020-12-02T22:51:47Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "ec364a4f-a3db-46ff-8965-009816d95b3c",
        "parentId" : "a170013a-7e25-4a04-9c57-aaf1ddf86833",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "@nicolasstucki ^",
        "createdAt" : "2020-12-02T19:45:20Z",
        "updatedAt" : "2020-12-02T22:51:47Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "39693914-7919-46b6-9869-8ed4477a61ff",
        "parentId" : "a170013a-7e25-4a04-9c57-aaf1ddf86833",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Is that supported now?",
        "createdAt" : "2020-12-03T07:08:17Z",
        "updatedAt" : "2020-12-03T07:08:17Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1453004aaad5cd94e7f4ab8b7372994dd096117",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +250,254 @@\n    /** Implementation of `PackageClauseTypeTest` */\n    protected val PackageClauseTypeTestImpl: TypeTest[Tree, PackageClause]\n\n    /** Module object of `type PackageClause`  */"
  },
  {
    "id" : "987216f6-1ede-4670-a862-81534572f874",
    "prId" : 10608,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10608#pullrequestreview-543884268",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06a42bd2-497e-4963-bc2e-a078285c01db",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "```suggestion\r\n        def rawDocumentation: Option[String]\r\n```",
        "createdAt" : "2020-12-03T10:10:42Z",
        "updatedAt" : "2020-12-07T16:35:21Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "0174770d-dd47-491c-8b46-65dd34d63eba",
        "parentId" : "06a42bd2-497e-4963-bc2e-a078285c01db",
        "authorId" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "body" : "`rawDocumentation` makes me expect that there's a way to access non-raw documentation, which is not the case. I specifically picked a name which wasn't used in the previous API, so that we avoid collisions when reintroducing it in the future. `docstring` is used in a bunch of languages to refer to a definition's documentation, so I think it makes sense here as well.",
        "createdAt" : "2020-12-03T10:25:35Z",
        "updatedAt" : "2020-12-07T16:35:21Z",
        "lastEditedBy" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "tags" : [
        ]
      },
      {
        "id" : "d3f518ef-6d5b-4848-8cc1-53cd35e92f92",
        "parentId" : "06a42bd2-497e-4963-bc2e-a078285c01db",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "ok",
        "createdAt" : "2020-12-03T12:02:29Z",
        "updatedAt" : "2020-12-07T16:35:21Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "eae6d189ac8147ef376f8d0f8826bfe2fb31ed35",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +3088,3092 @@\n        /** The documentation for this symbol, if any */\n        def docstring: Option[String]\n\n        /** Tree of this definition"
  },
  {
    "id" : "9249f8e5-ba55-4bed-80d1-f8d285235200",
    "prId" : 10608,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10608#pullrequestreview-546197593",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90613b25-9e11-4963-8a2f-b01647c3ac7e",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "```suggestion\r\n        def docString: Option[String]\r\n```",
        "createdAt" : "2020-12-07T14:25:42Z",
        "updatedAt" : "2020-12-07T16:35:21Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "eae6d189ac8147ef376f8d0f8826bfe2fb31ed35",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +3088,3092 @@\n        /** The documentation for this symbol, if any */\n        def docstring: Option[String]\n\n        /** Tree of this definition"
  }
]