[
  {
    "id" : "f4af4c22-4d2a-4011-a7be-2bc7ced1939c",
    "prId" : 11569,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11569#pullrequestreview-606395874",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd8780a0-eb28-41de-9c54-5a192d3662a0",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Is that cast actually still needed?",
        "createdAt" : "2021-03-01T17:35:53Z",
        "updatedAt" : "2021-03-08T15:14:37Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "0d04b1f1-cf57-4a50-8460-608111249f63",
        "parentId" : "fd8780a0-eb28-41de-9c54-5a192d3662a0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Yes, before inlining the type of `res` is `Tuple`.",
        "createdAt" : "2021-03-02T10:20:32Z",
        "updatedAt" : "2021-03-08T15:14:37Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "7807af12-d5cc-4c3b-9943-3a42e90ca29d",
        "parentId" : "fd8780a0-eb28-41de-9c54-5a192d3662a0",
        "authorId" : "5f907c64-1898-4d74-945b-1f630a7406b9",
        "body" : "Can these two be implemented in terms of `map`, which already deals with casting it.",
        "createdAt" : "2021-03-08T14:29:53Z",
        "updatedAt" : "2021-03-08T15:14:37Z",
        "lastEditedBy" : "5f907c64-1898-4d74-945b-1f630a7406b9",
        "tags" : [
        ]
      },
      {
        "id" : "fb4d1a67-0d41-4631-abc4-9bd958ceea54",
        "parentId" : "fd8780a0-eb28-41de-9c54-5a192d3662a0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "The issue is that we do not have a tuple on which we could call `map`.",
        "createdAt" : "2021-03-08T15:14:22Z",
        "updatedAt" : "2021-03-08T15:14:37Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "859cdd267982d80242b35740e2616abd94fc1167",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +110,114 @@        case _: (t *: ts) => constValue[t] *: constValueTuple[ts]\n      end match\n    res.asInstanceOf[T]\n  end constValueTuple\n"
  },
  {
    "id" : "cb0f1593-d001-4af2-86bf-ebd4e5e8af58",
    "prId" : 10313,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10313#pullrequestreview-530293574",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00ea2e9a-0798-494e-b0f6-48f25d8e46d0",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "If the s-interpolator won't work, that should be mentioned in the docs (but also maybe we should create an issue about this since it seems like a good thing to support)",
        "createdAt" : "2020-11-13T17:30:02Z",
        "updatedAt" : "2020-11-15T09:26:23Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "9052a3cf-a56f-48ed-9190-03e13ef57a3f",
        "parentId" : "00ea2e9a-0798-494e-b0f6-48f25d8e46d0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It would be good to support it. I will create an issue.",
        "createdAt" : "2020-11-13T17:57:56Z",
        "updatedAt" : "2020-11-15T09:26:23Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "16d848dc-6a6b-47f7-9b8e-4e501f877ba0",
        "parentId" : "00ea2e9a-0798-494e-b0f6-48f25d8e46d0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "#10315",
        "createdAt" : "2020-11-13T18:10:08Z",
        "updatedAt" : "2020-11-15T09:26:23Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ef91414c7e95669d514106a0ef82d9f0bebe7bb",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +28,32 @@   *  ```scala\n   *  inline def errorOnThisCode(inline x: Any) =\n   *    error(\"My error of this code: \" + codeOf(x))\n   *  ```\n   */"
  },
  {
    "id" : "e0370ecc-6324-41ca-b847-f6a283469649",
    "prId" : 10296,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10296#pullrequestreview-530264829",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a430f79a-83bc-4885-9665-bac4aa1fb4c0",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "I guess it's a bit late to change this, but why is `code` a string interpolator instead of just a method from Any to String?",
        "createdAt" : "2020-11-12T19:31:28Z",
        "updatedAt" : "2020-11-13T16:38:43Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "089786a9-8925-4575-a81e-11c70efa3ec5",
        "parentId" : "a430f79a-83bc-4885-9665-bac4aa1fb4c0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It was to have something that produces the full statically known string that is fed to `error`.",
        "createdAt" : "2020-11-12T20:28:53Z",
        "updatedAt" : "2020-11-13T16:38:43Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "69fdc029-3eb6-4a6a-b107-f3ae0ab0cc8d",
        "parentId" : "a430f79a-83bc-4885-9665-bac4aa1fb4c0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "That use case is in the documentation of `error`",
        "createdAt" : "2020-11-13T07:54:08Z",
        "updatedAt" : "2020-11-13T16:38:43Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "d18baeba-de23-43ec-b006-106eb51f8a82",
        "parentId" : "a430f79a-83bc-4885-9665-bac4aa1fb4c0",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "So is the problem that if I wrote `s\"My error: ${code(x)}\"` the result wouldn't be a String literal and so couldn't be passed to `error`? Seems like it'd be nice to have logic to concatenate multiple String literals into one String literal in the typer, but it might be complicated to do.",
        "createdAt" : "2020-11-13T13:50:58Z",
        "updatedAt" : "2020-11-13T17:55:13Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "550df9a0-7e0e-4fe1-a789-7cae57f551b9",
        "parentId" : "a430f79a-83bc-4885-9665-bac4aa1fb4c0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We do not constant fold `s\"\"` in typer. If we would do that we could probably simplify it.",
        "createdAt" : "2020-11-13T16:34:40Z",
        "updatedAt" : "2020-11-13T16:38:43Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "0c2629b9-610a-4da3-89c0-cdb440a9e9f8",
        "parentId" : "a430f79a-83bc-4885-9665-bac4aa1fb4c0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Actually, now constant folding is good enough to do `\"My error: \" + code\"$x\")` and therefore could simplify it to `\"My error: \" + codeOf(x))` ",
        "createdAt" : "2020-11-13T16:53:48Z",
        "updatedAt" : "2020-11-13T16:53:48Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "2084f1af-9cb4-4d80-afbd-7acdb27d02ad",
        "parentId" : "a430f79a-83bc-4885-9665-bac4aa1fb4c0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I would do that in another PR because it is a change of the API while this PR cleans up the library.",
        "createdAt" : "2020-11-13T16:55:10Z",
        "updatedAt" : "2020-11-13T16:55:10Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "a4840c75-9273-44ca-bea8-7d83b39fdfe6",
        "parentId" : "a430f79a-83bc-4885-9665-bac4aa1fb4c0",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Sounds good to me.",
        "createdAt" : "2020-11-13T16:56:16Z",
        "updatedAt" : "2020-11-13T16:56:17Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "8b8767ba-44f6-43e8-a74b-a1f6c47a1efb",
        "parentId" : "a430f79a-83bc-4885-9665-bac4aa1fb4c0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "See #10313",
        "createdAt" : "2020-11-13T17:27:04Z",
        "updatedAt" : "2020-11-13T17:27:05Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "d7308eab-33e1-4a8d-8484-da425d4037be",
        "parentId" : "a430f79a-83bc-4885-9665-bac4aa1fb4c0",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "That idea will simplify the API and implementation a lot.",
        "createdAt" : "2020-11-13T17:28:09Z",
        "updatedAt" : "2020-11-13T17:28:22Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee00a1d8697e7fdc7c12f422501f24f579652cc4",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +42,46 @@    *  ```scala\n    *  inline def logged(inline p1: Any) = {\n    *    val c = code\"code: $p1\"\n    *    val res = p1\n    *    (c, p1)"
  },
  {
    "id" : "158e9515-414e-45c4-a9ca-49dd43f8464d",
    "prId" : 9209,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9209#pullrequestreview-436698277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aaa1836d-6cc7-4a75-8b00-4c2f4bae16af",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Missing docs. Could you also try to fill the doc of `constValue`?",
        "createdAt" : "2020-06-24T14:26:00Z",
        "updatedAt" : "2020-07-02T13:41:22Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf38180da70c85dde930424499f907e7eeec14bc",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +63,67 @@   *  `(constValue[X1], ..., constValue[Xn])`.\n   */\n  inline def constValueTuple[T <: Tuple]: Tuple.Widen[T]=\n    val res =\n      inline erasedValue[T] match"
  },
  {
    "id" : "75881d2f-21b3-44ef-b16b-92bd465f2df1",
    "prId" : 8859,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8859#pullrequestreview-404554574",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "111e031f-6c75-4b94-be77-179bea96ac12",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It is not clear to me why we need `transparent`, given that the result type is always `String`.",
        "createdAt" : "2020-05-02T11:20:25Z",
        "updatedAt" : "2020-05-02T11:20:42Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "ee01bdc0-74bf-4f12-9955-c70490e42c30",
        "parentId" : "111e031f-6c75-4b94-be77-179bea96ac12",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It is because we want this to return a string literal that can be constant folded with other string literals. Also, the `error` method used the type of the string know the value.",
        "createdAt" : "2020-05-02T19:30:31Z",
        "updatedAt" : "2020-05-02T19:30:31Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "7a454262-5368-45e4-9d3c-9e45af3d9dcc",
        "parentId" : "111e031f-6c75-4b94-be77-179bea96ac12",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "The intrinsic implementation was also transparent, but we forgot to mark the definition as such.",
        "createdAt" : "2020-05-02T19:31:54Z",
        "updatedAt" : "2020-05-02T19:31:55Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6995d5acfe97652e563f109d304ca7284d0a617",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +36,40 @@   *       Other values may display unintutively.\n   */\n  transparent inline def (inline self: StringContext) code (inline args: Any*): String = ${ codeExpr('self, 'args) }\n  private def codeExpr(using qctx: QuoteContext)(sc: Expr[StringContext], args: Expr[Seq[Any]]): Expr[String] =\n    (sc, args) match"
  }
]