[
  {
    "id" : "cee4ca08-da42-4717-ab8b-c7cfbb46f741",
    "prId" : 6949,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6949#pullrequestreview-268792635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "066f5275-a0cc-4e1e-805a-d500577713a7",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Maybe add some documentation here.",
        "createdAt" : "2019-07-30T15:10:51Z",
        "updatedAt" : "2019-07-31T05:26:56Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "f38e8a9d-4188-475d-b5f9-aa53b3d6f58c",
        "parentId" : "066f5275-a0cc-4e1e-805a-d500577713a7",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Added the doc in `Kernel.scala`",
        "createdAt" : "2019-07-31T05:35:48Z",
        "updatedAt" : "2019-07-31T05:35:49Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "0abeb8dda139d104ea04dc722f546d0e9955951a",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1542,1546 @@   *  Otherwise apply the arguments to the closure.\n   */\n  def betaReduce(f: Term, args: List[Term]) given (ctx: Context): Term\n\n}"
  },
  {
    "id" : "3de94915-1ef9-47cd-a94f-b806b23167c8",
    "prId" : 6586,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6586#pullrequestreview-243487979",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36380b5c-b7a1-4bb4-97a6-d8d111c78771",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "`Type_isFunctionType` returns true for `given Int => Int` and `erased Int => Int`. The documentation should reflect that.\r\n\r\nGiven that we are adding this check we should also have `Type_isImplicitFunctionType` and `Type_isErasedFunctionType` to be able to distinguish them.",
        "createdAt" : "2019-05-29T20:05:48Z",
        "updatedAt" : "2019-05-30T08:37:29Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "7218284ffc7d4e23732f28d5f5f208d0f2f50074",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +875,879 @@   *     - returns false for `List[Int]`, despite that `List[Int] <:< Int => Int`.\n   */\n  def Type_isFunctionType(self: Type)(implicit ctx: Context): Boolean\n\n"
  },
  {
    "id" : "7a3a8e2b-1985-4b6c-82ea-7a6e661b98a9",
    "prId" : 6586,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6586#pullrequestreview-243488534",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30c52d9a-879f-4ba7-baca-aeaac3a54471",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "The specification of the method may raise some concerns. However, in the setting of meta-programming, this is can be justified, as it's well-known that reflection breaks referential transparency. E.g. `1 + 1 == 2`, but `'{1 + 1} != '2`. For this method, the semantic reasoning breaks at the type level -- an intended effect that's useful in meta-programming.",
        "createdAt" : "2019-05-29T20:07:02Z",
        "updatedAt" : "2019-05-30T08:37:29Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "7218284ffc7d4e23732f28d5f5f208d0f2f50074",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +876,880 @@   */\n  def Type_isFunctionType(self: Type)(implicit ctx: Context): Boolean\n\n\n  /** Is this type an implicit function type?"
  },
  {
    "id" : "6f9b1337-d07b-4f6b-a8f7-d979f9099aec",
    "prId" : 6191,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6191#pullrequestreview-220479431",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4360ab12-6e11-42b7-bdfc-eb13e4312f6a",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "This refactoring reminds me of a disagreement among @xeno-by @odersky @olafurpg and me about _whether type trees and types_ should be the same.\r\n\r\nNow opinions seem to converge that they should not be the same, as it's implemented in Tasty Reflect. However, I think one issue left unaddressed: _the confusion to meta programmers why there are seemingly overlapping Types and TypeTrees_ and usability problems evidenced by this PR.\r\n\r\nTo address the usability issue, I propose to just have one abstract type `TypeTree` (which could be used for positions) and remove all APIs to extract or construct `TypeTree`. Instead, meta-programmers should always work with `Types`, which is more reliable, as we do in the compiler.\r\n\r\nJust a thought for discussion, no need to address in this PR.\r\n",
        "createdAt" : "2019-03-29T11:13:53Z",
        "updatedAt" : "2019-03-29T11:17:11Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc7c97f756dd37c1a718c1897384e42a4161dbbb",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +50,54 @@ *           |               +- LambdaTypeTree\n *           |               +- TypeBind\n *           |               +- TypeBlock\n *           |\n *           +- TypeBoundsTree"
  },
  {
    "id" : "79eea598-a9c1-48d6-8a49-db555fc4fe01",
    "prId" : 6191,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6191#pullrequestreview-220504716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29396518-9969-4fe6-b698-3b793445484a",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It's called `Refinement` in Type, do we need some consistency here?",
        "createdAt" : "2019-03-29T11:16:16Z",
        "updatedAt" : "2019-03-29T11:17:11Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "f071581b-ad5b-4b97-9efd-d702375a5bec",
        "parentId" : "29396518-9969-4fe6-b698-3b793445484a",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Will do this renaming after #6193 for simplicity",
        "createdAt" : "2019-03-29T12:07:05Z",
        "updatedAt" : "2019-03-29T12:07:05Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc7c97f756dd37c1a718c1897384e42a4161dbbb",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +598,602 @@\n  /** Type tree representing a type refinement */\n  type Refined <: TypeTree\n\n  def matchRefined(tree: Tree)(implicit ctx: Context): Option[Refined]"
  }
]