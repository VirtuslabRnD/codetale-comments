[
  {
    "id" : "d06e9769-5a71-410a-a08a-29912eca95de",
    "prId" : 9428,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9428#pullrequestreview-456507782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abf4c8d2-a9ce-4ddb-94df-3cb64fdd232d",
        "parentId" : null,
        "authorId" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "body" : "Can we clarify this or make an issue to clarify this in the future? Does this comment want to convey that this class is only used for Scalac repeated parameters?",
        "createdAt" : "2020-07-28T09:03:20Z",
        "updatedAt" : "2020-07-28T09:03:24Z",
        "lastEditedBy" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "tags" : [
        ]
      },
      {
        "id" : "c3bbd405-9506-4539-b2f6-5f8f70999c5c",
        "parentId" : "abf4c8d2-a9ce-4ddb-94df-3cb64fdd232d",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I copied the original comment to the interface. We can revise this documentation later.",
        "createdAt" : "2020-07-28T09:12:34Z",
        "updatedAt" : "2020-07-28T09:12:34Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "fb3363db-f49e-4307-b96c-f411f5cf9ae0",
        "parentId" : "abf4c8d2-a9ce-4ddb-94df-3cb64fdd232d",
        "authorId" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "body" : "So can we make an issue for it? Or are you keeping track of such things in a different way?",
        "createdAt" : "2020-07-28T10:06:02Z",
        "updatedAt" : "2020-07-28T10:06:02Z",
        "lastEditedBy" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "tags" : [
        ]
      },
      {
        "id" : "2957c44e-5622-4668-9d3b-1d20ab95a035",
        "parentId" : "abf4c8d2-a9ce-4ddb-94df-3cb64fdd232d",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We will need to do a pass over everything in the API and probably rewrite/improve most of the documentation. Singling a few out does not seem to be worth it.",
        "createdAt" : "2020-07-28T10:34:52Z",
        "updatedAt" : "2020-07-28T10:34:52Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e25b7d8db9f615867dde646ab135f3c91c3435a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1480,1484 @@\n  /** A dummy class symbol that is used to indicate repeated parameters\n   *  compiled by the Scala compiler.\n   */\n  def Definitions_RepeatedParamClass: Symbol"
  },
  {
    "id" : "387fc2f7-b4c3-42aa-8eff-8558cd0c443c",
    "prId" : 8220,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8220#pullrequestreview-355736788",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b92ec13-6082-4b46-88b2-7baa1b6c9baf",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We should have the following API instead. Similar in `Reflection`.\r\n```scala\r\n  def Context_compilationUnitClassname(self: Context): String\r\n  def Context_isJavaCompilationUnit(self: Context): Boolean\r\n  def Context_isScala2CompilationUnit(self: Context): Boolean\r\n```",
        "createdAt" : "2020-02-10T07:35:53Z",
        "updatedAt" : "2020-02-10T21:58:41Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "682017e3-7449-42f6-be1c-5f78bb2f74c1",
        "parentId" : "2b92ec13-6082-4b46-88b2-7baa1b6c9baf",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Then your example would be changed to (or you can have extension methods to wrap thing into options on your side):\r\n\r\n```scala\r\n  protected def processCompilationUnit(reflect: Reflection)(root: reflect.Tree): Unit = \r\n    import reflect.{given,_}\r\n    if reflect.rootContext.isJavaCompilationUnit then \r\n      doSomethingHereWithJava(reflect.rootContext.compilationUnitClassname)\r\n    else \r\n      doSomethingHereWithTasty(...)\r\n```",
        "createdAt" : "2020-02-10T07:48:24Z",
        "updatedAt" : "2020-02-10T21:58:41Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "22d56f31fa3d90925089f384cdf27eba8ca589c8",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +171,175 @@  /** Class name of the current CompilationUnit */\n  def Context_compilationUnitClassname(self: Context): String\n\n\n  ///////////////"
  },
  {
    "id" : "eb2a42e8-de24-4f45-b76c-8583cd7eb9be",
    "prId" : 8204,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8204#pullrequestreview-353709247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccd7ae84-f7c8-4fe1-b8e2-611e82ad0a51",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I'm wondering if there are macros that use recursive types? Scala doesn't have syntax for recursive types.",
        "createdAt" : "2020-02-05T12:55:35Z",
        "updatedAt" : "2020-02-05T12:55:38Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "02a60713-7de4-4637-afff-a835bd6decf7",
        "parentId" : "ccd7ae84-f7c8-4fe1-b8e2-611e82ad0a51",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We will still get some types that are represented with recursive types in TASTy, hence we need to support it.",
        "createdAt" : "2020-02-05T13:22:59Z",
        "updatedAt" : "2020-02-05T13:22:59Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7b51e22af4fe492faef16c52fd50343fdd7ca13",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1035,1039 @@   *      try to follow these references.\n   */\n  def RecursiveType_apply(parentExp: RecursiveType => Type)(given ctx: Context): RecursiveType\n\n  def RecursiveType_underlying(self: RecursiveType)(given ctx: Context): Type"
  },
  {
    "id" : "84c26521-730f-4704-8ed7-2cf57d2c757d",
    "prId" : 7903,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7903#pullrequestreview-339130591",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2437075-c988-45d0-9823-61fe3f72ea1d",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "The meta-programmer may not know what's a module. Maybe rename to `requiredObject`?",
        "createdAt" : "2020-01-07T09:14:46Z",
        "updatedAt" : "2020-01-07T09:16:41Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "a84a2656-9bb0-4cbb-b215-0a6c071bd5a0",
        "parentId" : "c2437075-c988-45d0-9823-61fe3f72ea1d",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Better to keep names consistent. It will be simpler for documentation. We also have `moduleClass` and `companionModule` that use the same naming scheme.",
        "createdAt" : "2020-01-07T09:39:12Z",
        "updatedAt" : "2020-01-07T09:39:12Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "b6dcd95b-5752-44bb-bbe0-ea282c9eb80c",
        "parentId" : "c2437075-c988-45d0-9823-61fe3f72ea1d",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I totally agree, for advanced meta-programming, keeping the concepts closer to the compiler will help both meta-programmers who want to get into the compiler and maintenance of the framework.",
        "createdAt" : "2020-01-07T09:49:31Z",
        "updatedAt" : "2020-01-07T09:49:31Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "811804d4a080b2c0b60eb87493bbc477d0ad3e19",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +156,160 @@\n  /** Get module symbol if module is either defined in current compilation run or present on classpath. */\n  def Context_requiredModule(self: Context)(path: String): Symbol\n\n  /** Get method symbol if method is either defined in current compilation run or present on classpath. Throws if the method has an overload. */"
  },
  {
    "id" : "700653a4-c076-4aa6-a7e5-fbab590936df",
    "prId" : 7001,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7001#pullrequestreview-272563982",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e858f1f4-a729-44f4-a369-69f1f779cb71",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Take a `Symbol` instead of Name, for safety?",
        "createdAt" : "2019-08-08T13:15:01Z",
        "updatedAt" : "2019-08-08T13:15:27Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "3eb56634-2e07-4303-820d-474789d8f173",
        "parentId" : "e858f1f4-a729-44f4-a369-69f1f779cb71",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "That may incur a bigger refactoring. I will try it out in a different PR",
        "createdAt" : "2019-08-08T13:19:21Z",
        "updatedAt" : "2019-08-08T13:19:21Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddae49fe608a19d3a4fd98840017d0201f58d1ca",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +932,936 @@  def matchTermRef(tpe: TypeOrBounds) given (ctx: Context): Option[TermRef]\n\n  def TermRef_apply(qual: TypeOrBounds, name: String) given (ctx: Context): TermRef\n\n  def TermRef_qualifier(self: TermRef) given (ctx: Context): TypeOrBounds"
  }
]