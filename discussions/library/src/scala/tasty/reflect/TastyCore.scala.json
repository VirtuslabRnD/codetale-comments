[
  {
    "id" : "3469f263-4e21-4e12-9d75-43aebabd02cc",
    "prId" : 4993,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4993#pullrequestreview-149528717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "160e0df7-220f-45a6-b147-be06bd548b10",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "What is the motivation for this change, if all of them have the same interface?",
        "createdAt" : "2018-08-24T09:27:18Z",
        "updatedAt" : "2018-10-05T11:15:12Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "0b79605e-3c09-4a42-818a-be3d52a06f93",
        "parentId" : "160e0df7-220f-45a6-b147-be06bd548b10",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "They don't have the same interface. `DefSymbol.tree` returns a `DefDef`, `ValSymbol.tree` returns a `ValDef` and so on. The opposite way is also true. It also provides a way to have an extractor for precise symbols for example `case SymRef(IsClassSymbol(sym), _) => sym.tree: ClassDef`",
        "createdAt" : "2018-08-24T09:45:11Z",
        "updatedAt" : "2018-10-05T11:15:12Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "fd267e9a-cea5-4841-ab57-b5d9bc43b768",
        "parentId" : "160e0df7-220f-45a6-b147-be06bd548b10",
        "authorId" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "body" : "Then maybe the type should be `Symbol[Tree]`, writing then `Symbol[DefDef]` for `DefSymbol`, and so on?",
        "createdAt" : "2018-08-26T01:41:38Z",
        "updatedAt" : "2018-10-05T11:15:12Z",
        "lastEditedBy" : "348fab8e-49e2-442e-884d-850c7f41fdde",
        "tags" : [
        ]
      },
      {
        "id" : "a72ae341-8e98-46b5-ac14-4d6d2c354bc9",
        "parentId" : "160e0df7-220f-45a6-b147-be06bd548b10",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "There is another issue that is not show in this code yet. There is also a tree for a `Bind` which is not a subtype of `Tree`. This complicates a bit the situation. In fact what we would need is a `Symbol[Definition]` where `Definition` is a supertype of `XYZDef` and `Bind` but cannot be a subtype of `Tree`. I still need to explore all the options.",
        "createdAt" : "2018-08-26T06:54:46Z",
        "updatedAt" : "2018-10-05T11:15:12Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f29eb55453ca392bc3f9342305d89c414e3626a",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +185,189 @@    type ValSymbol <: Symbol\n    type BindSymbol <: Symbol\n    type NoSymbol <: Symbol\n\n}"
  },
  {
    "id" : "b656cf57-2829-4e69-9d52-7f3b0fee0f3e",
    "prId" : 4905,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4905#pullrequestreview-144947409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd9ac551-a70a-4c08-8234-ddbb9d751078",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Nice diagram 👍 ",
        "createdAt" : "2018-08-09T17:10:50Z",
        "updatedAt" : "2018-08-09T18:03:02Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "d40e3db4-bfe1-4610-9393-64d36be748c9",
        "parentId" : "fd9ac551-a70a-4c08-8234-ddbb9d751078",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Thanks :)",
        "createdAt" : "2018-08-09T17:32:44Z",
        "updatedAt" : "2018-08-09T18:03:02Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc6646f127b319f5d7d560ea6378032bc028ff7d",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +98,102 @@ *\n *  ```\n */\ntrait TastyCore {\n"
  }
]