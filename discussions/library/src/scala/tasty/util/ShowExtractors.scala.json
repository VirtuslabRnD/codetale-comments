[
  {
    "id" : "a2dcc7bf-9031-490b-962b-7d43b302e467",
    "prId" : 4601,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4601#pullrequestreview-128269873",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "064175ce-4102-4bda-8e92-e7c68e25fa9b",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I'm curious what kind of cycles can happen here?",
        "createdAt" : "2018-06-13T08:10:14Z",
        "updatedAt" : "2018-06-13T18:18:11Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "a8ea2d08-fa28-4c5a-a497-bf66f4d564e9",
        "parentId" : "064175ce-4102-4bda-8e92-e7c68e25fa9b",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "For definitions, we use the tree of the definition. Somewhere in the body of the type lambda there was a reference to itself and then tried to reprint itself in a loop.",
        "createdAt" : "2018-06-13T08:19:21Z",
        "updatedAt" : "2018-06-13T18:18:11Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "78e4ed7e9cf7d4726dd397b352b472469ddd7b8f",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +191,195 @@        this += \"Type.PolyType(\" ++= argNames += \", \" ++= argBounds += \", \" += resType += \")\"\n      case Type.TypeLambda(argNames, argBounds, resType) =>\n        // resType is not printed to avoid cycles\n        this += \"Type.TypeLambda(\" ++= argNames += \", \" ++= argBounds += \", _)\"\n      case TypeBounds(lo, hi) =>"
  },
  {
    "id" : "406408c1-4dbc-4e7f-9812-edf19c60f215",
    "prId" : 4577,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4577#pullrequestreview-123380001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18032725-52bc-4552-a6f3-baec2189307f",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I hope the name `ShowExtractors` can be improved later if possible.",
        "createdAt" : "2018-05-25T13:43:27Z",
        "updatedAt" : "2018-05-25T13:44:24Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "1f78bd70-1d6e-4989-a774-2026514928b7",
        "parentId" : "18032725-52bc-4552-a6f3-baec2189307f",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Yes",
        "createdAt" : "2018-05-25T13:51:42Z",
        "updatedAt" : "2018-05-25T13:51:43Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "b315dbfa9f2d206cc26da75779388fca98faaabd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3,7 @@import scala.tasty.Tasty\n\nclass ShowExtractors[T <: Tasty with Singleton](tasty0: T) extends Show[T](tasty0) {\n  import tasty._\n"
  }
]