[
  {
    "id" : "addaf140-71f6-4d20-b2ca-73afb51ee276",
    "prId" : 4279,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4279#pullrequestreview-119420993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55cff0b2-d662-47ac-9858-267f7190b2d5",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Why not put this directly in Tasty (or have Tasty inherit from `TreeAccumulators`?) The `Tasty with Singleton` trick looks a bit roundabout. ",
        "createdAt" : "2018-05-09T16:53:39Z",
        "updatedAt" : "2018-05-24T05:41:50Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "83e0c7d2-9494-4c88-a0cd-225e572d23d8",
        "parentId" : "55cff0b2-d662-47ac-9858-267f7190b2d5",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I was trying to figure out how users could create helper classes for tasty. I will try to move this particular one to Tasty as it is a core feature.",
        "createdAt" : "2018-05-10T07:15:54Z",
        "updatedAt" : "2018-05-24T05:41:50Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "5496f26c-1f2d-4e3f-9505-4cd12e22466f",
        "parentId" : "55cff0b2-d662-47ac-9858-267f7190b2d5",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Both those approaches do not allow us to extend the `TreeAccumulators` from outside `Tasty`.",
        "createdAt" : "2018-05-11T12:49:57Z",
        "updatedAt" : "2018-05-24T05:41:50Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f52db53a90c3de2e7dc79517dcc772523455474",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3,7 @@import scala.tasty.Tasty\n\nabstract class TreeAccumulator[X, T <: Tasty with Singleton](val tasty: T) {\n  import tasty._\n"
  },
  {
    "id" : "dde07859-67b8-4618-957e-d5247d43eb4a",
    "prId" : 4279,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/4279#pullrequestreview-119327121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5099c110-b7ac-4084-8178-a095938df5da",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Why not use `apply` for all operations? ",
        "createdAt" : "2018-05-09T16:56:39Z",
        "updatedAt" : "2018-05-24T05:41:50Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "c4e44af5-5470-4483-9508-e91b8221621f",
        "parentId" : "5099c110-b7ac-4084-8178-a095938df5da",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Because the overloads `def apply(x: X, tree: Tree)` and `def apply(x: X, tree: CaseDef)` would erase to the same types.",
        "createdAt" : "2018-05-11T06:14:33Z",
        "updatedAt" : "2018-05-24T05:41:50Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f52db53a90c3de2e7dc79517dcc772523455474",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +7,11 @@\n  // Ties the knot of the traversal: call `foldOver(x, tree))` to dive in the `tree` node.\n  def foldTree(x: X, tree: Tree)(implicit ctx: Context): X\n  def foldTypeTree(x: X, tree: TypeOrBoundsTree)(implicit ctx: Context): X\n  def foldCaseDef(x: X, tree: CaseDef)(implicit ctx: Context): X"
  }
]