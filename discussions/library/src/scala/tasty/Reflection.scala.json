[
  {
    "id" : "4090636b-80eb-4344-8d04-7abee0c36110",
    "prId" : 10232,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10232#pullrequestreview-526016980",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "565eff58-c828-4c0f-8f03-72368ecfd13e",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "what's the difference with `seal`?",
        "createdAt" : "2020-11-08T14:49:47Z",
        "updatedAt" : "2020-11-08T14:49:48Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      },
      {
        "id" : "efa5192a-2148-4d89-8bc1-225488cfbab1",
        "parentId" : "565eff58-c828-4c0f-8f03-72368ecfd13e",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It will replace `seal`. But that needs to be removed after #10207 is merged. In that PR we remove the `unseal` method from `Type`. I decided to do it this way to avoid conflicts with #10207.",
        "createdAt" : "2020-11-08T15:49:43Z",
        "updatedAt" : "2020-11-08T15:50:28Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "670c6792-46d0-49f4-99ee-d54f4b478138",
        "parentId" : "565eff58-c828-4c0f-8f03-72368ecfd13e",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I find the name `asType` is not as informative as `seal`, because the name `Type` in the context of `TypeRepr` is vague, it could refer to both `TypeRepr` and `quoted.Type`.",
        "createdAt" : "2020-11-09T08:20:00Z",
        "updatedAt" : "2020-11-09T08:20:11Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "f40451de-766b-4fad-b653-bac74c0bead2",
        "parentId" : "565eff58-c828-4c0f-8f03-72368ecfd13e",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "The next step is to find a way to inject this type in the context directly. Something like\r\n\r\n```scala\r\ntypeRep.asTypeInContext { [T] =>>\r\n   // Type[T] is given in this context\r\n}\r\n\r\ndef asTypeInContext[U](body: [T] =>> (using Type[T]) => U): U = ...\r\n```",
        "createdAt" : "2020-11-09T08:25:26Z",
        "updatedAt" : "2020-11-09T08:25:26Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "bff91a804ce74692df1844f2faaf58dc9465206f",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +1784,1788 @@       *  ```\n       */\n      def asType: scala.quoted.Type[?]\n\n      /** Is `self` type the same as `that` type?"
  },
  {
    "id" : "58df9ad9-61b6-4d9a-912e-3131a8a1b1fc",
    "prId" : 10184,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10184#pullrequestreview-524639299",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e4856e4-731e-4443-a601-3d92a21ee3ba",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I remember one of the previous PRs is to avoid the name `TASTy`. \r\n```suggestion\r\n  /** Tree accumulator.\r\n```",
        "createdAt" : "2020-11-05T19:28:26Z",
        "updatedAt" : "2020-11-05T19:28:39Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "acf4ba0c-d976-4b91-b7eb-f71e6e3dee9b",
        "parentId" : "3e4856e4-731e-4443-a601-3d92a21ee3ba",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I'll do a general cleanup of the docs in a separate PR",
        "createdAt" : "2020-11-05T20:26:04Z",
        "updatedAt" : "2020-11-05T20:26:04Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "38973e20471713dd7764f2595adc6ec4ec610588",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +3314,3318 @@  ///////////////\n\n  /** TASTy Reflect tree accumulator.\n   *\n   *  Usage:"
  },
  {
    "id" : "1700fa57-e45b-4601-a24d-33815132459e",
    "prId" : 10054,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10054#pullrequestreview-513628503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61210304-5e75-4dfb-bd5e-ed4465525e77",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "```suggestion\r\n    def overloaded(qualifier: Term, name: String, targs: List[Type], args: List[Term]): Apply\r\n      \r\n    /** Call an overloaded method with the given type and term parameters */\r\n    def overloaded(qualifier: Term, name: String, targs: List[Type], args: List[Term], returnType: Type): Apply\r\n```",
        "createdAt" : "2020-10-21T12:41:10Z",
        "updatedAt" : "2020-10-21T21:57:56Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbde5bd121902b0dd9782d7e95657b659704c360",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +518,522 @@      \n    /** Call an overloaded method with the given type and term parameters */\n    def overloaded(qualifier: Term, name: String, targs: List[Type], args: List[Term], returnType: Type): Apply\n\n    def copy(original: Tree)(qualifier: Term, name: String): Select"
  },
  {
    "id" : "3b69a3a6-92cf-4260-ae89-92c72361a9f9",
    "prId" : 9983,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9983#pullrequestreview-506581803",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21783872-c6eb-44c0-9134-c5b11248f391",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "This can be potentially ambiguous, as now the compiler may compile a batch of files in multiple runs to support macros.",
        "createdAt" : "2020-10-12T12:39:40Z",
        "updatedAt" : "2020-10-12T12:39:41Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "83380a7b9901ac6bc3d03d34568080b58ed17b9a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2681,2685 @@\n      /** Does this symbol come from a currently compiled source file? */\n      def isDefinedInCurrentRun: Boolean\n\n      /** Dummy val symbol that owns all statements within the initialization of the class."
  },
  {
    "id" : "b7d21bcc-cdb3-4c43-9198-bc80ff1958d2",
    "prId" : 9983,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9983#pullrequestreview-506593415",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8744e7e1-5864-4b94-b656-ea476ac5254f",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Regarding `isLocalDummy` and `isRefinementClass`,  it would be better to not provide them if they are not useful in practice, as they involve implementation details that might change.",
        "createdAt" : "2020-10-12T12:41:49Z",
        "updatedAt" : "2020-10-12T12:41:49Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "49133662-17f0-4ad3-a1d1-1661ab0ff195",
        "parentId" : "8744e7e1-5864-4b94-b656-ea476ac5254f",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We should see if we can have an alternative design. We cannot return the owner of the local dummy as that would be ambiguous.",
        "createdAt" : "2020-10-12T12:55:15Z",
        "updatedAt" : "2020-10-12T12:55:15Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "83380a7b9901ac6bc3d03d34568080b58ed17b9a",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +2686,2690 @@       *  This may also contain local definitions such as classes defined in a `locally` block in the class.\n       */\n      def isLocalDummy: Boolean\n\n      /** Is this symbol a class representing a refinement? */"
  },
  {
    "id" : "7281c49b-6086-4be4-94d0-84eef2f3ad09",
    "prId" : 9918,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9918#pullrequestreview-499466616",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d191287-e28c-40fa-bccf-1b65ebf23235",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Will it reduce if `x1, ..., xn` are constants?",
        "createdAt" : "2020-09-30T12:13:26Z",
        "updatedAt" : "2020-10-01T07:53:58Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "ca4b1df2-afdd-4614-9df8-e86f39c6afed",
        "parentId" : "6d191287-e28c-40fa-bccf-1b65ebf23235",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Yes, but it will introduce bindings to preserve the semantics all our beta-reduction optimization do (`Expr.betaReduce` and `BetaReduce` miniphase). They all use the same logic internally.",
        "createdAt" : "2020-09-30T12:27:57Z",
        "updatedAt" : "2020-10-01T07:53:58Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "0aa6504a-933a-4b05-b462-b3ad6e551dff",
        "parentId" : "6d191287-e28c-40fa-bccf-1b65ebf23235",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Then it might be better to use `e1, ..., en` instead of `x1, ..., xn` and say explicitly that it will preserve semantics by introduce bindings.",
        "createdAt" : "2020-09-30T12:29:35Z",
        "updatedAt" : "2020-10-01T07:53:58Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "bb851020-e7c1-4f3d-8029-5dff1a0c0bc0",
        "parentId" : "6d191287-e28c-40fa-bccf-1b65ebf23235",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I added the extra documentation",
        "createdAt" : "2020-09-30T14:04:10Z",
        "updatedAt" : "2020-10-01T07:53:58Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "cee37e5d5a7a5312802b94d30cd1124827662e4c",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +369,373 @@     *  then it optimizes this the top most call by returning the `Some`\n     *  with the result of beta-reducing the application.\n     *  Otherwise returns `None`.\n     *\n     *   To retain semantics the argument `ei` is bound as `val yi = ei` and by-name arguments to `def yi = ei`."
  },
  {
    "id" : "1b57b725-1174-4244-aaa2-30c0318e7c2f",
    "prId" : 9818,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9818#pullrequestreview-495508078",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6e24389-ff6c-4a91-8579-9d1087b09c73",
        "parentId" : null,
        "authorId" : "6998ebc0-40b8-4e52-b4f8-721fd5d8c0a9",
        "body" : "As discussed already, the `apply` is still missing here.",
        "createdAt" : "2020-09-24T07:49:56Z",
        "updatedAt" : "2020-09-24T12:23:58Z",
        "lastEditedBy" : "6998ebc0-40b8-4e52-b4f8-721fd5d8c0a9",
        "tags" : [
        ]
      },
      {
        "id" : "0810d000-6b39-4aaf-a7f0-b90be511c744",
        "parentId" : "a6e24389-ff6c-4a91-8579-9d1087b09c73",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "There is a TODO to remind us to do it just above.",
        "createdAt" : "2020-09-24T12:17:56Z",
        "updatedAt" : "2020-09-24T12:23:58Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cd1cce6e8903363d2f4f04718014b5e5df76310",
    "line" : 353,
    "diffHunk" : "@@ -1,1 +260,264 @@    // TODO def apply(name: String, constr: DefDef, parents: List[TermOrTypeTree], selfOpt: Option[ValDef], body: List[Statement]): ClassDef\n    def copy(original: Tree)(name: String, constr: DefDef, parents: List[Tree /* Term | TypeTree */], derived: List[TypeTree], selfOpt: Option[ValDef], body: List[Statement]): ClassDef\n    def unapply(cdef: ClassDef): Option[(String, DefDef, List[Tree /* Term | TypeTree */], List[TypeTree], Option[ValDef], List[Statement])]\n  }\n"
  },
  {
    "id" : "3baccb27-8fed-44df-baeb-12095bcddd3a",
    "prId" : 9818,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9818#pullrequestreview-495464493",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4886cba-dd7b-41ab-a72d-79b221fec82b",
        "parentId" : null,
        "authorId" : "6998ebc0-40b8-4e52-b4f8-721fd5d8c0a9",
        "body" : "Do you plan to add methods here?",
        "createdAt" : "2020-09-24T07:51:30Z",
        "updatedAt" : "2020-09-24T12:23:58Z",
        "lastEditedBy" : "6998ebc0-40b8-4e52-b4f8-721fd5d8c0a9",
        "tags" : [
        ]
      },
      {
        "id" : "0ab67ea2-dd92-4855-b210-6ac34133d85b",
        "parentId" : "d4886cba-dd7b-41ab-a72d-79b221fec82b",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Possibly. If we do, it is better to have it already defined to avoid breaking user code if we add it later. This happened in the past with the `Position` module.",
        "createdAt" : "2020-09-24T11:19:31Z",
        "updatedAt" : "2020-09-24T12:23:58Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cd1cce6e8903363d2f4f04718014b5e5df76310",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +141,145 @@  val Tree: TreeModule\n\n  trait TreeModule { this: Tree.type => }\n\n  given TreeMethods as TreeMethods = TreeMethodsImpl"
  },
  {
    "id" : "bb6d4cbd-c1a1-406a-930d-5dcd5e1beee9",
    "prId" : 9773,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9773#pullrequestreview-487557703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ffaeba3-a046-4d63-9e35-ead333973e54",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "It seems the object is not used?",
        "createdAt" : "2020-09-14T08:45:00Z",
        "updatedAt" : "2020-09-14T08:47:29Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "b7be3489-c735-426a-a793-629aab7339b0",
        "parentId" : "3ffaeba3-a046-4d63-9e35-ead333973e54",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Indeed. I kept it because as a placeholder in case we need to add methods to it. We had a case in the past where we had to add one of those and broke some code because the imports behaved differently. It might also be useful for documentation purposes.",
        "createdAt" : "2020-09-14T09:03:34Z",
        "updatedAt" : "2020-09-14T09:03:34Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "66bb30561cccf387db92d784284952f93dd809d7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +52,56 @@  // ----- Tree -----------------------------------------------------\n\n  object Tree\n\n  given TreeOps as AnyRef:"
  },
  {
    "id" : "ce85388a-1231-404a-9782-4034be5472f3",
    "prId" : 9773,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9773#pullrequestreview-487559120",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6acfc9a0-f5d8-4cd7-aee9-ad4feff187f2",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Can we remove `given TreeOps` and put extension methods directly inside `Reflection`?",
        "createdAt" : "2020-09-14T08:45:45Z",
        "updatedAt" : "2020-09-14T08:47:29Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "5e5acb30-e5aa-45f9-af03-1f613063310f",
        "parentId" : "6acfc9a0-f5d8-4cd7-aee9-ad4feff187f2",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "There are many methods with the same names that may clash. For example `show` is at least 5 times and to flatten these givens, we would need to add 5x `using DummyImplicit` to one of the variants.",
        "createdAt" : "2020-09-14T09:05:28Z",
        "updatedAt" : "2020-09-14T09:05:28Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "66bb30561cccf387db92d784284952f93dd809d7",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +54,58 @@  object Tree\n\n  given TreeOps as AnyRef:\n    extension (tree: Tree):\n      /** Position in the source code */"
  },
  {
    "id" : "39087145-e45e-4d47-abc1-97ce8f493582",
    "prId" : 9773,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9773#pullrequestreview-487560795",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44ab8e3e-8b89-4df1-bfaf-ad4f02d4c8cc",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Can we merge with the previous extension blockby moving `T` to `def asExprOf[T]`?",
        "createdAt" : "2020-09-14T08:46:50Z",
        "updatedAt" : "2020-09-14T08:47:29Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "924be25e-a4d5-4c92-840c-fa60dd027140",
        "parentId" : "44ab8e3e-8b89-4df1-bfaf-ad4f02d4c8cc",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We currently have the limitation that type parameters must be on the extension. \r\nWe cannot write\r\n```\r\nextension (tree: Tree)\r\n      def asExprOf[T] ...\r\n```\r\nto avoid having a `T` that may depend on `tree`.",
        "createdAt" : "2020-09-14T09:07:32Z",
        "updatedAt" : "2020-09-14T09:07:32Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "66bb30561cccf387db92d784284952f93dd809d7",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +87,91 @@    /** Convert this tree to an `quoted.Expr[T]` if the tree is a valid expression or throws */\n    extension [T](tree: Tree)\n      def asExprOf(using scala.quoted.Type[T])(using QuoteContext): scala.quoted.Expr[T] =\n        if tree.isExpr then\n          new scala.internal.quoted.Expr(tree, reflectSelf.compilerId).asExprOf[T]"
  },
  {
    "id" : "9aeb8a70-c3a1-4b13-9ecc-a11b185c7837",
    "prId" : 9514,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9514#pullrequestreview-463825177",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62b88705-e3da-439e-a72c-3d9b77d31cf8",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "The `isExpr` will cause confusion for meta-programmers: what's the relation between `expression` and `Expr[T]`? What is the relationship between `expression` and `Term`?",
        "createdAt" : "2020-08-08T19:40:08Z",
        "updatedAt" : "2020-08-08T20:00:58Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "37033b7e-4d8b-4cdb-8e87-b2efb8d936d4",
        "parentId" : "62b88705-e3da-439e-a72c-3d9b77d31cf8",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "The is `isExpr` indicates that this term is a valid `Expr[Any]`, therefore `asExprOf` will succeed. The names are intentionally similar as the are about the same concept. Docs can improve.",
        "createdAt" : "2020-08-08T20:05:35Z",
        "updatedAt" : "2020-08-08T20:05:35Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "0dc9cd66-0585-441e-a170-abe827ae62bc",
        "parentId" : "62b88705-e3da-439e-a72c-3d9b77d31cf8",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Maybe make the method private? ",
        "createdAt" : "2020-08-08T20:16:29Z",
        "updatedAt" : "2020-08-08T20:16:29Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "b5ea889d-9a7c-462c-86d8-d7e4b0b6b63d",
        "parentId" : "62b88705-e3da-439e-a72c-3d9b77d31cf8",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "But users are intended to use it",
        "createdAt" : "2020-08-08T20:22:00Z",
        "updatedAt" : "2020-08-08T20:22:01Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3e6831db25599d00e228663856c450dfcab754d",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +498,502 @@              case _ => true\n          case _ => false\n\n    end extension\n"
  },
  {
    "id" : "7d53b6bd-f60f-4149-b37e-896ca2d1d284",
    "prId" : 9311,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9311#pullrequestreview-443863138",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8563ba3-2c66-4446-89bc-0472a28e7e96",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "This seems to suggest something is wrong with the language design.\r\n",
        "createdAt" : "2020-07-07T12:32:25Z",
        "updatedAt" : "2020-07-08T06:09:22Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "750d7e3a-cca2-4b96-a0fd-5b42bf12b298",
        "parentId" : "b8563ba3-2c66-4446-89bc-0472a28e7e96",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It is more about the automatically imported scopes for abstract types. With opaque types we look into the module but for these ones we are missing it. I plan on minimizing this limitation and ideally remove those givens later ",
        "createdAt" : "2020-07-07T12:58:03Z",
        "updatedAt" : "2020-07-08T06:09:22Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "86770a2cef7a51c587cba9290a1410602d475e07",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +424,428 @@  given Context = rootContext // TODO: Should be an implicit converion from QuoteContext to Context\n\n  given ContextOps as Context.type = Context\n\n  object Context:"
  },
  {
    "id" : "235fa1d7-dd25-48e5-8a6e-bbc3560d6b50",
    "prId" : 9311,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9311#pullrequestreview-443843551",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f19521d-b30a-4099-8307-31193fbf2de8",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "The previous extension methods syntax seems much better for this use case.",
        "createdAt" : "2020-07-07T12:35:21Z",
        "updatedAt" : "2020-07-08T06:09:22Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "86770a2cef7a51c587cba9290a1410602d475e07",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +429,433 @@    extension (self: Context):\n      /** Returns the owner of the context */\n      def owner: Symbol = internal.Context_owner(self)\n\n      /** Returns the source file being compiled. The path is relative to the current working directory. */"
  },
  {
    "id" : "4c9e9ab4-3600-4e8d-a175-73374e6495ef",
    "prId" : 8438,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8438#pullrequestreview-369726428",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41014d95-6dc0-4721-b23a-646717454a26",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "This change seems not useful.",
        "createdAt" : "2020-03-05T10:16:59Z",
        "updatedAt" : "2020-03-05T10:18:24Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "d5d72fd2-85fa-44e6-8dab-36dc39a697d6",
        "parentId" : "41014d95-6dc0-4721-b23a-646717454a26",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "It is to be able to access the `rootContext` by name when only importing `import qctx.tasty._` , otherwise it is only visible with the given import.",
        "createdAt" : "2020-03-05T16:34:57Z",
        "updatedAt" : "2020-03-05T16:34:58Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "60deb4f5-ae1f-4e90-a962-6a0106c1b620",
        "parentId" : "41014d95-6dc0-4721-b23a-646717454a26",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Nothing changed for summoning it",
        "createdAt" : "2020-03-05T16:35:25Z",
        "updatedAt" : "2020-03-05T16:35:26Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "b30284210b7cd3111cc5469045ce960d0ccc5d6f",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +454,458 @@  /** Context of the macro expansion */\n  def rootContext: Context = internal.rootContext // TODO: Should this be moved to QuoteContext?\n  given Context = rootContext // TODO: Should be an implicit converion from QuoteContext to Context\n\n  extension ContextOps on (self: Context) {"
  },
  {
    "id" : "4d36c139-5607-48ec-89eb-e82a69d998b1",
    "prId" : 8291,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8291#pullrequestreview-357329912",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8681d309-47d9-4b02-b017-f02b47bac0e2",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Maybe add a link to `let` in the doc, which should always be preferred.",
        "createdAt" : "2020-02-12T10:12:25Z",
        "updatedAt" : "2020-02-12T14:47:25Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a62424d3f28e51940769ce61e406397d2f3a512",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +2124,2128 @@     */\n    def newVal(parent: Symbol, name: String, tpe: Type, flags: Flags, privateWithin: Symbol)(using ctx: Context): Symbol =\n      internal.Symbol_newVal(parent, name, flags, tpe, privateWithin)\n\n    /** Definition not available */"
  },
  {
    "id" : "32a2555f-a97f-4551-aa62-806495a28653",
    "prId" : 8191,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8191#pullrequestreview-352948700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96b4cbea-3e64-4df7-8036-a4e58fc2ed26",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Change  to `using`?",
        "createdAt" : "2020-02-04T12:12:13Z",
        "updatedAt" : "2020-02-04T12:12:20Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "60528595-50cf-46d4-80a8-814b8d6baacc",
        "parentId" : "96b4cbea-3e64-4df7-8036-a4e58fc2ed26",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "We still need to update the reference compiler to be able to use `using`.",
        "createdAt" : "2020-02-04T12:49:21Z",
        "updatedAt" : "2020-02-04T12:49:21Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce3171c1ac2cd83fe5fda88184505b0402eaca73",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2998,3002 @@\n  /** Bind the `rhs` to a `val` and use it in `body` */\n  def let(rhs: Term)(body: Ident => Term)(given ctx: Context): Term = {\n    import scala.quoted.QuoteContext\n    given QuoteContext = new QuoteContext(this)"
  },
  {
    "id" : "2f89b2c8-3a3f-4e0c-9527-8e51b6fc21c3",
    "prId" : 8142,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/8142#pullrequestreview-351434557",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4af13cf1-1d15-4271-8781-7a855f498bec",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Can we use the new syntax in #7917? Same for the changes blow.",
        "createdAt" : "2020-01-31T09:18:19Z",
        "updatedAt" : "2020-01-31T10:55:20Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "808037b3-407a-4d6f-ab32-3aee20232ed2",
        "parentId" : "4af13cf1-1d15-4271-8781-7a855f498bec",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "I'll update that syntax in a following PR",
        "createdAt" : "2020-01-31T10:28:31Z",
        "updatedAt" : "2020-01-31T10:55:20Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "3a64a983-4da1-4d6d-b601-02c31471923b",
        "parentId" : "4af13cf1-1d15-4271-8781-7a855f498bec",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "#8156",
        "createdAt" : "2020-01-31T11:05:39Z",
        "updatedAt" : "2020-01-31T11:05:40Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "a04c9c444f45503d31838c62d3e08779bdbfa487",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +420,424 @@  ////////////////\n\n  given  QuotedExprOps: extension (expr: scala.quoted.Expr[?]) {\n    /** View this expression `quoted.Expr[T]` as a `Term` */\n    def unseal(given ctx: Context): Term ="
  },
  {
    "id" : "21239c72-dc2f-4999-a282-cc2bb13183b8",
    "prId" : 6700,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6700#pullrequestreview-253311183",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2811fe93-a96e-4b30-b005-3dba527adc64",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "As discussed, in macros it will improve usability if we can reduce the number of concepts.",
        "createdAt" : "2019-06-24T09:39:52Z",
        "updatedAt" : "2019-06-27T15:31:10Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "da12f638-5fd4-48ab-9ead-fb75fb039cef",
        "parentId" : "2811fe93-a96e-4b30-b005-3dba527adc64",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "This one will be simplified the next time we update the reference compiler. The _de facto_  implicit will be `QuoteContext`.",
        "createdAt" : "2019-06-24T09:54:41Z",
        "updatedAt" : "2019-06-27T15:31:10Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "68387bbc820e260d8c136ed600d4269bdb9edecb",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +47,51 @@  implicit def reflectionToQuoteContext(implicit reflect: Reflection): scala.quoted.QuoteContext =\n    new scala.quoted.QuoteContext(reflect)\n\n}\n"
  }
]