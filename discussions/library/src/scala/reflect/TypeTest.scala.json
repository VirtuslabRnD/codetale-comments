[
  {
    "id" : "d6007e6e-ba22-42db-9b4f-c1603677eef8",
    "prId" : 7555,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/7555#pullrequestreview-319574088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "def970c9-61a0-42da-a5fa-3d11110362c7",
        "parentId" : null,
        "authorId" : "a14778fc-0e43-40e5-b0eb-4f1793ea271f",
        "body" : "That's not accurate, is it? Shouldn't the `tt` be used first? ",
        "createdAt" : "2019-11-19T13:31:23Z",
        "updatedAt" : "2020-11-06T10:59:38Z",
        "lastEditedBy" : "a14778fc-0e43-40e5-b0eb-4f1793ea271f",
        "tags" : [
        ]
      },
      {
        "id" : "00297ee7-657d-4c55-9884-2515633673c1",
        "parentId" : "def970c9-61a0-42da-a5fa-3d11110362c7",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "`tt(SomeExtractor(...))` it is accurate. But as it is a pattern, the outer most pattern is applied first at runtime.\r\n\r\n```scala\r\n x match { case tt(SomeExtractor(...)) =>  ... }\r\n```\r\n\r\nbecomes something like\r\n```scala\r\nval x$1 = tt.unapply(x)\r\nif (x$1.isDefined) {\r\n val x$2 = x$1.get\r\n val x$3 = SomeExtractor.unapply(x$2)\r\n if (x$3.isDefined) ...\r\n} else ...\r\n```",
        "createdAt" : "2019-11-20T06:25:37Z",
        "updatedAt" : "2020-11-06T10:59:38Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "919acc2ed5de3e14b40811216f7bcf22f248d665",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +18,22 @@   * by wrapping a `(_: T)` type pattern as `tt(_: T)`, where `tt` is the `TypeTest[S, T]` instance.\n   * Type tests necessary before calling other extractors are treated similarly.\n   * `SomeExtractor(...)` is turned into `tt(SomeExtractor(...))` if `T` in `SomeExtractor.unapply(x: T)`\n   * is uncheckable, but we have an instance of `TypeTest[S, T]`.\n   */"
  }
]