[
  {
    "id" : "e0465232-d1c2-403a-8297-1c70c7fc1417",
    "prId" : 6898,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6898#pullrequestreview-265044160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d206c0fc-ab11-4a66-b514-81ebc4eb8c35",
        "parentId" : null,
        "authorId" : "4107dafe-4e7b-4e85-8d5b-63e06e0e6318",
        "body" : "I understand the goal of simplifying the way to implement application entry points. In practice, most of the users just write a `def main(args: Array[String]): Unit` method, and manually parse the application arguments. For these cases, this PR definitely improves the developer experience.\r\n\r\nThat being said, by introducing a way to parse the program arguments in the compiler, we will also establish a “standard” way of doing that. And, I’m a little bit worried about the introduction of the `CommandLineParser` and `FromString` abstractions. For now, they are simple but I think we can already anticipate the following requests soon: can we also support optional parameters? Can we support named parameters? How could we customize the error message in case of invalid parameters? Can we print all the error messages instead of stopping at the first one? Should we use `Either` instead of relying on exceptions to model parsing failures? All these requests are legitimate, in my opinion, but if we try to fulfill them the size of the `CommandLineParser` and `FromString` modules will be 10x bigger. Then, the question will be “should we keep that thing in the compiler, or should we move it to the library land (like scopt, or optparse-applicative)?”. We can make the decision of keeping `CommandLineParser` simple and not honor these requests, “by design”, but then I’m worried about introducing a “standard” way of parsing command-line arguments which does not scale to advanced use cases.\r\n\r\nUnfortunately, I don’t have a simple idea of how to decouple `@main` expansion from `CommandLineParser` (so that users could plug in the parsing + reporting logic they want). I still think the most flexible way to go is to require users to forward a plain old `main` method to whatever they want:\r\n\r\n~~~ scala\r\ndef happyBirthday(age: Int, name: String, others: String*): Unit = …\r\n\r\ndef main(args: Array[String]): Unit = {\r\n  val happyBirthdayParser = … // some code that relies on a library for arguments parsing\r\n  happyBirthdayParser.run(args)(happyBirthday)\r\n}\r\n~~~\r\n\r\nBut I agree that this approach is *not* beginner-friendly…",
        "createdAt" : "2019-07-22T08:10:52Z",
        "updatedAt" : "2019-07-29T16:55:34Z",
        "lastEditedBy" : "4107dafe-4e7b-4e85-8d5b-63e06e0e6318",
        "tags" : [
        ]
      },
      {
        "id" : "2c84f7e0-7a08-46f9-8c29-51e4e95df24e",
        "parentId" : "d206c0fc-ab11-4a66-b514-81ebc4eb8c35",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I believe we can stay firm and keep `CommandLineParser` simple. If one wants something else, one can perfectly well define a traditional main method, or define the entry point like this:\r\n```scala\r\n@main def f(args: String*) = ...\r\n```\r\n",
        "createdAt" : "2019-07-22T20:40:42Z",
        "updatedAt" : "2019-07-29T16:55:34Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb374a15d3918a661e6d06098b26347dcad3319c",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2,6 @@\n/** A utility object to support command line parsing for @main methods */\nobject CommandLineParser {\n\n  /** An exception raised for an illegal command line"
  },
  {
    "id" : "17715a78-addf-4db5-824d-cd1eb4a96dd1",
    "prId" : 6898,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6898#pullrequestreview-267129392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c300949-5f65-47ca-849b-4b346b4d1f9d",
        "parentId" : null,
        "authorId" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "body" : "Again, I think `fromString: Option[T]` would be more obvious for the end user.",
        "createdAt" : "2019-07-26T11:45:13Z",
        "updatedAt" : "2019-07-29T16:55:34Z",
        "lastEditedBy" : "3a3c9c08-5985-41f6-a86b-7fc5a427f51a",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb374a15d3918a661e6d06098b26347dcad3319c",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +16,20 @@    try fs.fromString(str)\n    catch {\n      case ex: IllegalArgumentException => throw ParseError(n, ex.toString)\n    }\n  }"
  }
]