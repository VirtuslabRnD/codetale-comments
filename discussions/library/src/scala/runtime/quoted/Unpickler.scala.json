[
  {
    "id" : "de865f2b-5a2e-4ebf-8b63-7cc06ead0bf8",
    "prId" : 6958,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6958#pullrequestreview-268783841",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5d9b229-2b13-42a2-8343-1dbafd20f157",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Just curious, what's the recommended practice to use `given`: as parameters or contextual function types. Semantically the two are equivalent, and performance-wise they should be almost the same due to the optimization for implicit functions via direct methods.",
        "createdAt" : "2019-07-30T15:20:04Z",
        "updatedAt" : "2019-07-30T15:24:01Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "9cf94f5e-4366-436c-a203-b2c9d5c41136",
        "parentId" : "f5d9b229-2b13-42a2-8343-1dbafd20f157",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Here the desison was taken to have the symmetry between the quote and splices. The splice takes a contextual function, therefore the quote returns a contextual function. In this particular case, the alignment also helped to implement the quo/splice cancellation.",
        "createdAt" : "2019-07-31T04:51:35Z",
        "updatedAt" : "2019-07-31T04:51:35Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "bff3dd7005af1a9c3286ab7310cd2f47cf5d2bb7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +20,24 @@   *  replacing splice nodes with `args`\n   */\n  def unpickleType[T](repr: Pickled, args: Seq[Seq[Any] => Type[_]]): given QuoteContext => Type[T] = new TastyType[T](repr, args)\n\n}"
  },
  {
    "id" : "db0b86e1-5cdc-4b2a-89d8-844c7b38a2bb",
    "prId" : 6881,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6881#pullrequestreview-267471872",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "895cc6bb-e9d3-4cc2-af07-d69fce47fb5a",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Why `Type[_]` does not require `QuoteContext`?",
        "createdAt" : "2019-07-26T07:16:04Z",
        "updatedAt" : "2019-07-30T05:57:03Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "e5740661-cfab-4db5-ad67-757b3b6ea25d",
        "parentId" : "895cc6bb-e9d3-4cc2-af07-d69fce47fb5a",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "That will also change but I left it as a separate PR.",
        "createdAt" : "2019-07-27T15:09:59Z",
        "updatedAt" : "2019-07-30T05:57:03Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "80e42bb5eaa98a1081900d030216619c2018efa0",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +15,19 @@   *  replacing splice nodes with `args`\n   */\n  def unpickleExpr[T](repr: Pickled, args: Seq[Seq[Any] => ((given QuoteContext => Expr[Any]) | Type[_])]): given QuoteContext => Expr[T] = new TastyExpr[T](repr, args)\n\n  /** Unpickle `repr` which represents a pickled `Type` tree,"
  }
]