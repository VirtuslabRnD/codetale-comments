[
  {
    "id" : "1dd09c59-cba8-476e-bf03-e7924ae9ba1e",
    "prId" : 5540,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/5540#pullrequestreview-193088805",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0df52584-aaca-45d3-b2e7-f2408ad1f015",
        "parentId" : null,
        "authorId" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "body" : "I'm I correct saying that labels are only available as runtime values? If we want `scala.reflect.Generic` to be as expressive as `shapeless.LabelledGeneric` we would also need a type-level representation of the labels.",
        "createdAt" : "2019-01-15T14:14:44Z",
        "updatedAt" : "2019-01-19T16:40:59Z",
        "lastEditedBy" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "tags" : [
        ]
      },
      {
        "id" : "1f192bb9-cea3-4e35-88ca-394f2829f924",
        "parentId" : "0df52584-aaca-45d3-b2e7-f2408ad1f015",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Yes, or ideally a representation that can be used for both. Right now, I would like to learn first about possible use cases of compile-time labels. I could not come up with one that makes sense, without also postulating whitebox macros. For instance schema validation needs a whitebox macro to pull in a schema in the first place. So I opted for the simplest implementation that addresses the use cases I have right now. But if we get a good use case this is up for change.",
        "createdAt" : "2019-01-16T09:07:03Z",
        "updatedAt" : "2019-01-19T16:40:59Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "7e30339e-bd2e-4981-abbf-654614f2d379",
        "parentId" : "0df52584-aaca-45d3-b2e7-f2408ad1f015",
        "authorId" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "body" : "> For instance schema validation needs a whitebox macro to pull in a schema in the first place.\r\n\r\nIn Spark tables are typed as `Dataset[T]` where `T` is a case class. The [current API](https://spark.apache.org/docs/2.3.0/api/java/org/apache/spark/sql/Dataset.html#col-java.lang.String-) to reference table's columns is String based. With a type-level representation of case class labels this API could be made type-safe!\r\n\r\nAlso I think it might be enough to expose labels as `type`-s given that `valueOf` from #5647 allows users to summon values for singleton strings.",
        "createdAt" : "2019-01-16T09:18:47Z",
        "updatedAt" : "2019-01-19T16:40:59Z",
        "lastEditedBy" : "6d71bb21-e402-4464-b2b1-8bdd8e068461",
        "tags" : [
        ]
      },
      {
        "id" : "666b2659-bcdb-4c46-8460-2f8641b300d3",
        "parentId" : "0df52584-aaca-45d3-b2e7-f2408ad1f015",
        "authorId" : "063d43f2-51fb-4a29-94bd-204b16522902",
        "body" : "Yes, Spark is one use case (there's even a project you might want to take a look at - https://github.com/typelevel/frameless).\r\n\r\nAlso generating lenses automatically is another use case I could come up with off the top of my head (prisms as well).",
        "createdAt" : "2019-01-16T11:25:20Z",
        "updatedAt" : "2019-01-19T16:40:59Z",
        "lastEditedBy" : "063d43f2-51fb-4a29-94bd-204b16522902",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e4fa24b6ef68b20f91541da8b6a779426a5cd03",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +6,10 @@abstract class Generic[T] {\n\n  type Shape <: scala.compiletime.Shape\n\n  /** The case mirror corresponding to ADT instance `x` */"
  }
]