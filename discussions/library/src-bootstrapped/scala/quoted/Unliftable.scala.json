[
  {
    "id" : "ec098f33-00a3-4f96-ad1c-826447ac8032",
    "prId" : 10572,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10572#pullrequestreview-541878883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4be8a57c-348f-4115-ac3b-6e5a13e37dae",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "What if a user wants to implement an instance of `Unliftable` that performs evaluation to get `T` from `Expr[T]`? I don't see a principled reason to reject that usage.",
        "createdAt" : "2020-12-01T10:02:46Z",
        "updatedAt" : "2020-12-01T16:04:12Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "22dabd01-4ebe-4e02-8b8e-c995b77ec245",
        "parentId" : "4be8a57c-348f-4115-ac3b-6e5a13e37dae",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "That is simply not what unlift is for. `Unliftable` is the dual of `Liftable`, it performs the opposite operation and nothing more.\r\n\r\nIt is also impossible to implement a satisfactory version of `eval` as we would need a general-purpose interpreter which is **impossible** on the JVM due to technical details with java interop (can be done in JS and native). It would also come with an unbounded performance cost that would render the abstraction unusable. If someone wants an `eval` function, they can implement it them selfs and can manage the balance of performance vs completeness for their precise use cases. ",
        "createdAt" : "2020-12-01T10:14:07Z",
        "updatedAt" : "2020-12-01T16:04:12Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "d71ef8d5-3990-4e09-bc1b-b3209142e1cc",
        "parentId" : "4be8a57c-348f-4115-ac3b-6e5a13e37dae",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "There seem to be two issues here. First, the name `Unliftable` is very general. If it's only intended for normal forms, maybe it's better to rename it.\r\n\r\nSecond, as it's mentioned elsewhere, some evaluations are permissible in `Unliftable`. This creates a specification problem: what's the _principle_ there to tell what's allowed and what is not. If the restriction is not based on principles, it will be questioned and violated in practice and cause problems.",
        "createdAt" : "2020-12-01T12:28:49Z",
        "updatedAt" : "2020-12-01T16:04:12Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "5cc7599f-e672-4e04-9553-8ba7fe9fcb8d",
        "parentId" : "4be8a57c-348f-4115-ac3b-6e5a13e37dae",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "What name would you suggest? ",
        "createdAt" : "2020-12-01T12:34:55Z",
        "updatedAt" : "2020-12-01T16:04:12Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "d4d580e1-e0a9-4b25-9f76-bf46838f3d27",
        "parentId" : "4be8a57c-348f-4115-ac3b-6e5a13e37dae",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "I would simply keep the name, remove the restriction --- this way it's consistent.\r\n\r\nThen I would keep `Const.unapply`, which guarantees that no evaluation happens in the unlifting.\r\n\r\nUsers should use `.unlift` most of the time. However, it is not a replacement for `Const.unapply`, as\r\nthe semantics of `.unlift` depends on the imported `Unliftable` instance --- it does not provide the semantics intended by `Const.unapply`. ",
        "createdAt" : "2020-12-01T12:46:16Z",
        "updatedAt" : "2020-12-01T16:04:12Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "a2263754-d99a-4c9f-ac24-bbb96c86a0ad",
        "parentId" : "4be8a57c-348f-4115-ac3b-6e5a13e37dae",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Removing the restriction would break the abstraction. There would be no way to guess what `.unlift` would do. We have already tried that and saw that without a clear specification users had no idea what to expect from half-baked evaluation schemes. This is why we went back to the simple principled design where we can only unlift constructors of values.",
        "createdAt" : "2020-12-01T13:00:02Z",
        "updatedAt" : "2020-12-01T16:04:12Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "57a09e92-177f-47a9-ac03-42f86bc7777e",
        "parentId" : "4be8a57c-348f-4115-ac3b-6e5a13e37dae",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "> .unlift depends on the imported Unliftable instance --- it does not provide the semantics intended by Const.unapply.\r\n\r\nIt does as that is the spec. It would not only if you implement a custom `Unliftable` that does not follow the spec.",
        "createdAt" : "2020-12-01T13:01:40Z",
        "updatedAt" : "2020-12-01T16:04:12Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "080c8a69-7c9a-45da-afc0-b9e96d41cd7e",
        "parentId" : "4be8a57c-348f-4115-ac3b-6e5a13e37dae",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "This documentation is the current spec. We should merge this and if any changes to the spec must happen it should be done based on the current one rather than on a new one with unknown consequences.",
        "createdAt" : "2020-12-01T13:11:43Z",
        "updatedAt" : "2020-12-01T16:04:12Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "664e5477ae7a481eac372e5676daee72ef0bbf0d",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +11,15 @@ *    - Arguments of constructors can be recursively unlifted\n */\ntrait Unliftable[T] {\n\n  /** Return the value of the expression."
  },
  {
    "id" : "f8ae35b3-c5f9-423e-b175-1f8ae20c957e",
    "prId" : 9672,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/9672#pullrequestreview-480752855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db1ae599-0ac4-4e40-8b92-1b93897b9253",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "What about the name `from`? `unlift.from(expr)` reads better than `unlift.fromExpr(expr)`.\r\n\r\n```suggestion\r\n  def from(x: Expr[T]): QuoteContext ?=> Option[T]\r\n```",
        "createdAt" : "2020-09-02T11:36:53Z",
        "updatedAt" : "2020-09-02T11:36:59Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "ca727396-387b-456e-b67d-34bc4a8e95cc",
        "parentId" : "db1ae599-0ac4-4e40-8b92-1b93897b9253",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "That would not align with the `Liftable` and we almost never need to write it explicitly.",
        "createdAt" : "2020-09-02T11:39:07Z",
        "updatedAt" : "2020-09-02T11:39:07Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "2d49812d-8be0-4ed3-816b-c58d1e4badbd",
        "parentId" : "db1ae599-0ac4-4e40-8b92-1b93897b9253",
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "> That would not align with the `Liftable` and we almost never need to write it explicitly.\r\n\r\nIt makes sense to be consistent.",
        "createdAt" : "2020-09-02T12:07:28Z",
        "updatedAt" : "2020-09-02T12:07:28Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f4f665f8818f9289af3b9222e653eac3b5b31cd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +9,13 @@   *  Otherwise returns the `Some` of the value.\n   */\n  def fromExpr(x: Expr[T]): QuoteContext ?=> Option[T]\n\n}"
  }
]