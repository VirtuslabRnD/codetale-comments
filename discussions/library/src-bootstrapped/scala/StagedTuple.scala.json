[
  {
    "id" : "d94443d1-16a8-4014-b9dc-673181b24f29",
    "prId" : 6073,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/6073#pullrequestreview-217335278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8408c22-557f-42fd-890c-317a6cab42f3",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Why is the ascription needed here? ",
        "createdAt" : "2019-03-17T16:39:02Z",
        "updatedAt" : "2019-03-20T16:32:01Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "cc6a0dfb-186e-4560-8e3a-87d5f7d7f918",
        "parentId" : "a8408c22-557f-42fd-890c-317a6cab42f3",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "From the desugaring of `${...}` to `def exprSplice[T](x: Expr[T]): T` we get now need to infer `T` as well as the types of `++`. \r\n\r\nThe acctual error is\r\n```scala\r\n[error] 206 |        fromArrayStaged[Tuple]('{${ toArrayStaged(xs, None) } ++ ${ toArrayStaged(ys, None) }}, None)\r\n[error]     |                                                                    ^^^^^^^^^^^^^^^^^^^^^^^\r\n[error]     |    Found:    quoted.Expr[Array[Object]]\r\n[error]     |    Required: quoted.Expr[scala.collection.GenTraversableOnce[Object]]\r\n```\r\n",
        "createdAt" : "2019-03-18T13:09:07Z",
        "updatedAt" : "2019-03-20T16:32:01Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "2ab468b3-7e84-4b15-ab44-3769d6b9da4e",
        "parentId" : "a8408c22-557f-42fd-890c-317a6cab42f3",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "That's problematic. We should avoid type ascriptions that need to be added for obscure reasons.  Should we change the desugaring instead?",
        "createdAt" : "2019-03-18T17:29:25Z",
        "updatedAt" : "2019-03-20T16:32:01Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "508ef3d0-94e0-4b78-9700-dffefa529b86",
        "parentId" : "a8408c22-557f-42fd-890c-317a6cab42f3",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Actually, this is an instance of #6126 which is quite specific to `++` with `Array`s. If fixed this would not be an issue.",
        "createdAt" : "2019-03-20T16:33:43Z",
        "updatedAt" : "2019-03-20T16:33:43Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "a13a992b-57f6-42be-93d3-a5c56b5337e9",
        "parentId" : "a8408c22-557f-42fd-890c-317a6cab42f3",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I'll have a look at #6126.",
        "createdAt" : "2019-03-21T16:00:55Z",
        "updatedAt" : "2019-03-21T16:00:55Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "59a170ef3ded22a51a6ae26e7cbd3d3fbda3a436",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +205,209 @@      def genericConcat(xs: Expr[Tuple], ys: Expr[Tuple]): Expr[Tuple] =\n        // TODO remove ascriptions when #6126 is fixed\n        fromArrayStaged[Tuple]('{${ toArrayStaged(xs, None) } ++ (${ toArrayStaged(ys, None) }: Array[Object])}, None)\n\n      val res = selfSize match {"
  }
]