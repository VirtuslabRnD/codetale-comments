[
  {
    "id" : "64af8750-7e45-4144-8ff0-da25cb85ac82",
    "prId" : 2886,
    "prUrl" : "https://github.com/zio/zio/pull/2886#pullrequestreview-358209361",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49fc2a5a-ac2a-405e-956a-3a42989ec883",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Can we delete `overwrite` now?",
        "createdAt" : "2020-02-13T13:14:55Z",
        "updatedAt" : "2020-02-13T13:14:56Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "0558604e-398f-4f36-ba26-2e070c3d2ec8",
        "parentId" : "49fc2a5a-ac2a-405e-956a-3a42989ec883",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Yes, already deleted in this PR.",
        "createdAt" : "2020-02-13T13:22:13Z",
        "updatedAt" : "2020-02-13T13:22:13Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "8aead4b3c762d50cf7a0fc57a45009e803f373d6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +71,75 @@    },\n    testM(\"clock service can be overwritten\") {\n      val withLiveClock = TestEnvironment.live ++ Clock.live\n      val time          = clock.nanoTime.provideLayer(withLiveClock)\n      assertM(time)(isGreaterThan(0L))"
  },
  {
    "id" : "4c0347a0-4bc0-4f04-986e-ae9de7315025",
    "prId" : 1959,
    "prUrl" : "https://github.com/zio/zio/pull/1959#pullrequestreview-302957939",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6cd6b45-aaa5-4ec0-9a66-f16843216d7b",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "We lost something with this test. In the previous version we called `provideManaged(TestEnvironment.Value`) on each of the effects. That is important because what we are testing for in this assertion, which admittedly isn't labeled as clearly as it should be, is that the random number generators for different copies of the `TestEnvironment` are seeded with different seeds. If we don't do this both calls will use the same copy of the `TestEnvironment` so we won't be testing the same thing.",
        "createdAt" : "2019-10-16T11:07:30Z",
        "updatedAt" : "2019-10-18T11:21:41Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "21b930e0-a62d-4e10-9417-6e5da1dd5913",
        "parentId" : "c6cd6b45-aaa5-4ec0-9a66-f16843216d7b",
        "authorId" : "d75be8fa-2835-4186-80dc-40caf532bcef",
        "body" : "Ah, thought I was being clever by figuring out I could use the TestEnvironment provided generator - I'll update the test description",
        "createdAt" : "2019-10-16T11:56:08Z",
        "updatedAt" : "2019-10-18T11:21:41Z",
        "lastEditedBy" : "d75be8fa-2835-4186-80dc-40caf532bcef",
        "tags" : [
        ]
      },
      {
        "id" : "0eb96ba0-73cf-4dad-930c-fe8e0349adcf",
        "parentId" : "c6cd6b45-aaa5-4ec0-9a66-f16843216d7b",
        "authorId" : "d75be8fa-2835-4186-80dc-40caf532bcef",
        "body" : "I think I'll actually leave this test as is and create another one to check different copies of `TestEnvironment` are seeded with different seeds. I think it's important that we test the random number generator isn't just returning the same number for successive calls...",
        "createdAt" : "2019-10-17T01:09:39Z",
        "updatedAt" : "2019-10-18T11:21:41Z",
        "lastEditedBy" : "d75be8fa-2835-4186-80dc-40caf532bcef",
        "tags" : [
        ]
      },
      {
        "id" : "e7c75f34-9ef8-46fb-a7e4-f03b00abe59e",
        "parentId" : "c6cd6b45-aaa5-4ec0-9a66-f16843216d7b",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Sounds good. We also have a ton of additional tests in `RandomSpec`.",
        "createdAt" : "2019-10-17T01:11:54Z",
        "updatedAt" : "2019-10-18T11:21:41Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "375410d4e1bbeea04bfe11718e6fde9a4326e5ec",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +34,38 @@          }\n        },\n        testM(\"Random returns next pseudorandom integer\") {\n          for {\n            i <- random.nextInt"
  },
  {
    "id" : "6d2768c7-6575-4dc7-984f-e2dc6317fab5",
    "prId" : 1959,
    "prUrl" : "https://github.com/zio/zio/pull/1959#pullrequestreview-303642689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6a1bc29-4f30-478f-b344-9034923bd9ea",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Nice.",
        "createdAt" : "2019-10-18T02:59:04Z",
        "updatedAt" : "2019-10-18T11:21:41Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "375410d4e1bbeea04bfe11718e6fde9a4326e5ec",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +42,46 @@        /*Live clock is used to seed random number generator;\n            Node.js only has 1ms resolution so need to wait at least that long to avoid flakiness on ScalaJS*/\n        testM(\"Check different copies of TestEnvironment are seeded with different seeds\") {\n          for {\n            i <- random.nextInt.provideManaged(TestEnvironment.Value)"
  }
]