[
  {
    "id" : "ebd2a6ca-e301-40c6-ba92-7c88e08f1637",
    "prId" : 2037,
    "prUrl" : "https://github.com/zio/zio/pull/2037#pullrequestreview-307570187",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e3a82a4-0b2d-40c4-b679-7ead64c06abb",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "You should be able to do:\r\n\r\n```scala\r\nobject RandomSpec extends ZIOBaseSpec {\r\n  // Helpers here\r\n\r\n  suite(\r\n    // Tests here\r\n  )\r\n}\r\n```",
        "createdAt" : "2019-10-26T11:40:25Z",
        "updatedAt" : "2019-10-28T21:20:08Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "b24b467c-ddf8-467f-a483-b0379c5ba430",
        "parentId" : "6e3a82a4-0b2d-40c4-b679-7ead64c06abb",
        "authorId" : "d75be8fa-2835-4186-80dc-40caf532bcef",
        "body" : "Thanks @jdegoes, that's actually what I tried to do in my first PR but unfortunately it doesn't compile\r\n```\r\n[info] Compiling 1 Scala source to C:\\Users\\rober\\IdeaProjects\\zio\\test-tests\\jvm\\target\\scala-2.12\\test-classes ...\r\n[error] C:\\Users\\rober\\IdeaProjects\\zio\\test-tests\\shared\\src\\test\\scala\\zio\\test\\environment\\RandomSpec.scala:10:27: not enough arguments for constructor ZIOBaseSpec: (spec: => zio.test.ZSpec[zio.test.environment.TestEnvironment,Any,String,Any])zio.test.ZIOBaseSpec.\r\n[error] Unspecified value parameter spec.\r\n[error] object RandomSpec extends ZIOBaseSpec {\r\n[error]                           ^\r\n```\r\nthis is the approach that @adamgfraser suggested I take here https://github.com/zio/zio/pull/1959#discussion_r334951983\r\nand also the approach shown here https://zio.dev/docs/usecases/usecases_testing\r\nbut if we can change `DefaultRunnableSpec` so this works that'd be excellent\r\n\r\nI think the issue is with `RunnableSpec` - the class is abstract so doesn't need to define `spec` but I suspect it's been done so you don't have `override def spec` scattered throughout your tests. Perhaps @adamgfraser can shed some light on the background? \r\n```\r\nabstract class RunnableSpec[R, L, T, E, S](runner0: TestRunner[R, L, T, E, S])(spec0: => Spec[R, E, L, T])\r\n    extends AbstractRunnableSpec {\r\n  ...\r\n  override def spec   = spec0\r\n```\r\n",
        "createdAt" : "2019-10-26T21:41:30Z",
        "updatedAt" : "2019-10-28T21:20:08Z",
        "lastEditedBy" : "d75be8fa-2835-4186-80dc-40caf532bcef",
        "tags" : [
        ]
      },
      {
        "id" : "b0733795-8825-4ae4-8d4d-643430638579",
        "parentId" : "6e3a82a4-0b2d-40c4-b679-7ead64c06abb",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "To use John's approach you need one more set of parentheses.\r\n\r\n```scala\r\npackage zio.test.environment\r\n\r\nimport zio.test._\r\nimport zio.test.Assertion._\r\n\r\nobject RandomSpec\r\n    extends ZIOBaseSpec({\r\n\r\n      // Helpers here\r\n      def plus(x: Int, y: Int): Int =\r\n        x + y\r\n\r\n      suite(\"RandomSpec\")(\r\n        // Tests here\r\n        test(\"addition works fine\") {\r\n          assert(plus(1, 1), equalTo(2))\r\n        }\r\n      )\r\n    })\r\n```\r\n\r\nYou need the parentheses after `ZIOBaseSpec` (or `DefaultRunnableSpec`) to tell the compiler the code that follows is providing the required parameter to `ZIOBaseSpec` rather than the body of `RandomSpec` and then you need the brackets to be able to provide multiple statements. We did this to enable the user to not have to override anything but just be able to write tests in a declarative style.\r\n\r\n```scala\r\nobjectMySpec extends DefaultRunnableSpec(\r\n  suite(\"MySpec\")(\r\n    test(\"myTest\")\r\n```\r\n\r\nIt seems like so far users have preferred the separate object with helper methods style but both are fine.",
        "createdAt" : "2019-10-27T12:35:44Z",
        "updatedAt" : "2019-10-28T21:20:08Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c9e6e47b8e42e6202218c59f023576464f14355",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +8,12 @@\nobject RandomSpec\n    extends ZIOBaseSpec(\n      suite(\"RandomSpec\")(\n        testM(\"check clearBooleans\")(checkClear(_.nextBoolean)(_.feedBooleans(_: _*))(_.clearBooleans)(_.nextBoolean)),"
  },
  {
    "id" : "3cf0ca4b-a0b4-4920-97b8-7a0512d670d9",
    "prId" : 2037,
    "prUrl" : "https://github.com/zio/zio/pull/2037#pullrequestreview-307572163",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0795176f-2e95-4d4f-b5f3-1485f6cc80fa",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "If you want to have a more specific assertion here, you are on the right track with `assert(actual.zip(bounds), forall(...)`. The challenge is that `within` is not going to work as is because `isWithin` takes two parameters for the bounds and is expecting an `A`, but you need an `Assertion[(A, B)]`. You need a combinator that, given an `Assertion[A]` and a way to convert an `(A, B)` to an `A` and an `Assertion[A]`, gives you an `Assertion[(A, B)]`. The closest thing we have to this is `AssertionRec` but it is not quite powerful enough because it does not let you generate the assertion dynamically.\r\n\r\nI will think about this for the future but I think this is fine for now.",
        "createdAt" : "2019-10-27T13:16:16Z",
        "updatedAt" : "2019-10-28T21:20:08Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c9e6e47b8e42e6202218c59f023576464f14355",
    "line" : 169,
    "diffHunk" : "@@ -1,1 +167,171 @@      bounds     = List.fill(100)(num.abs(bound(sRandom)) max one)\n      actual     <- UIO.foreach(bounds)(f(testRandom, _))\n    } yield assert(actual.zip(bounds).forall { case (a, n) => zero <= a && a < n }, equalTo(true))\n  }\n}"
  }
]