[
  {
    "id" : "0b3c33f7-fc12-4e2a-8416-845aa2d46550",
    "prId" : 1906,
    "prUrl" : "https://github.com/zio/zio/pull/1906#pullrequestreview-297834962",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdb6ed07-7b69-4347-910c-2e69bdabbbf3",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Are you going to migrate this spec as part of this PR? If not I would leave this where it was.",
        "createdAt" : "2019-10-06T10:33:25Z",
        "updatedAt" : "2019-10-06T18:38:59Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "8cf3a002-c391-4408-9f1f-dd7a28b84917",
        "parentId" : "bdb6ed07-7b69-4347-910c-2e69bdabbbf3",
        "authorId" : "68c1c91e-6bf0-4665-9804-75ecdc1c3b42",
        "body" : "i think this will be last one for this pr",
        "createdAt" : "2019-10-06T10:38:27Z",
        "updatedAt" : "2019-10-06T18:38:59Z",
        "lastEditedBy" : "68c1c91e-6bf0-4665-9804-75ecdc1c3b42",
        "tags" : [
        ]
      },
      {
        "id" : "8760a24f-1165-4e1e-9c77-6a20446d3d72",
        "parentId" : "bdb6ed07-7b69-4347-910c-2e69bdabbbf3",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Okay, great. That would be fantastic! Maybe call this `BoolAlgebraSpecUtil` to conform with the practice in `core` and `tests`?  Otherwise will review this file when it is done but everything else is good to go once the tests pass. It looks like there are some compilation issues right now. Let me know if you need any help in resolving.",
        "createdAt" : "2019-10-06T10:42:51Z",
        "updatedAt" : "2019-10-06T18:38:59Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "80bdc64c-36c8-4f3d-a144-11c2fd8ee5da",
        "parentId" : "bdb6ed07-7b69-4347-910c-2e69bdabbbf3",
        "authorId" : "68c1c91e-6bf0-4665-9804-75ecdc1c3b42",
        "body" : "> Maybe call this BoolAlgebraSpecUtil to conform with the practice in core and tests?\r\n\r\nactually named it like `ZIOSpec` companion `ZIOSpecHelper`",
        "createdAt" : "2019-10-06T12:06:45Z",
        "updatedAt" : "2019-10-06T18:38:59Z",
        "lastEditedBy" : "68c1c91e-6bf0-4665-9804-75ecdc1c3b42",
        "tags" : [
        ]
      },
      {
        "id" : "22393846-fb23-4337-ad2c-d4aef9d1062c",
        "parentId" : "bdb6ed07-7b69-4347-910c-2e69bdabbbf3",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Sounds good.",
        "createdAt" : "2019-10-06T12:10:07Z",
        "updatedAt" : "2019-10-06T18:38:59Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f34ef479015256e6710bb8a9e58ad6279f00f818",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +129,133 @@    )\n\nobject BoolAlgebraSpecHelper {\n  val value1 = \"first success\"\n  val value2 = \"second success\""
  },
  {
    "id" : "68c46c02-c7ab-4d39-b868-2914814050b7",
    "prId" : 1906,
    "prUrl" : "https://github.com/zio/zio/pull/1906#pullrequestreview-297834872",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0df9eae2-fd11-4861-b67a-74f3386792f5",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Now that we are using `ZIO Test` we can take advantage of its built in property based testing functionality instead of our homegrown one. So `randomBoolAlgebra` can return a `Gen[Random, BoolAlgebra[Int]]` and then in all the tests that use it we can use the `check` method instead of `nonFlaky`.",
        "createdAt" : "2019-10-06T11:54:32Z",
        "updatedAt" : "2019-10-06T18:38:59Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "45412313-da12-470b-ac77-68d3d66d27fa",
        "parentId" : "0df9eae2-fd11-4861-b67a-74f3386792f5",
        "authorId" : "68c1c91e-6bf0-4665-9804-75ecdc1c3b42",
        "body" : "great idea!",
        "createdAt" : "2019-10-06T12:08:09Z",
        "updatedAt" : "2019-10-06T18:38:59Z",
        "lastEditedBy" : "68c1c91e-6bf0-4665-9804-75ecdc1c3b42",
        "tags" : [
        ]
      }
    ],
    "commit" : "f34ef479015256e6710bb8a9e58ad6279f00f818",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +5,9 @@import zio.test.BoolAlgebraSpecHelper._\n\nobject BoolAlgebraSpec\n    extends ZIOBaseSpec(\n      suite(\"BoolAlgebraSpec\")("
  },
  {
    "id" : "ede0c745-5136-40b7-b509-a720fa562345",
    "prId" : 1906,
    "prUrl" : "https://github.com/zio/zio/pull/1906#pullrequestreview-297847741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7286b7c-3aa0-4bde-836c-a4a3ee22cf77",
        "parentId" : null,
        "authorId" : "68c1c91e-6bf0-4665-9804-75ecdc1c3b42",
        "body" : "getting some weird compilation error without fully-qualified name",
        "createdAt" : "2019-10-06T14:43:32Z",
        "updatedAt" : "2019-10-06T18:38:59Z",
        "lastEditedBy" : "68c1c91e-6bf0-4665-9804-75ecdc1c3b42",
        "tags" : [
        ]
      },
      {
        "id" : "f83322a6-8eaf-4182-a881-25d6268b8ffd",
        "parentId" : "f7286b7c-3aa0-4bde-836c-a4a3ee22cf77",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Yes, it is because we have the `test` package object extend the `CheckVariants` trait so we don't clutter up the package object with all the different variants of the check methods. It looks like this issue only appears because the test suite uses the same package name. Not great but I don't have a better solution right now so we will have to go with it.",
        "createdAt" : "2019-10-06T17:30:27Z",
        "updatedAt" : "2019-10-06T18:38:59Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f34ef479015256e6710bb8a9e58ad6279f00f818",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@        },\n        testM(\"and distributes over or\") {\n          zio.test.check(boolAlgebra, boolAlgebra, boolAlgebra) { (a, b, c) =>\n            assert(a && (b || c), equalTo((a && b) || (a && c)))\n          }"
  },
  {
    "id" : "c990699f-330a-4aa1-9f05-46853d5b2f7d",
    "prId" : 1906,
    "prUrl" : "https://github.com/zio/zio/pull/1906#pullrequestreview-297847741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c524d7c7-0fbb-471a-817a-0b56809cf926",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "I think right now this is generating objects that are \"too large\" which is why you are having to reduce the size and number of samples in checking the \"hashCode is consistent with equals\" property. I think we want the concept of \"size\" to be that each term adds one to the size, so for example `And(Not(Value(1)), Value(2))` would have a size of four, and then `boolAlgebraOfSize` should always generate objects of the requested size. I think something like the below will do that. When I tried that I was able to change the size and number of sample parameters back to their previous values.\r\n\r\n```scala\r\n  def boolAlgebra: Gen[Random with Sized, BoolAlgebra[Int]] = Gen.small(s => boolAlgebraOfSize(s), 1)\r\n\r\n  def boolAlgebraOfSize(size: Int): Gen[Random, BoolAlgebra[Int]] =\r\n    if (size == 1) {\r\n      Gen.int(0, 9).map(BoolAlgebra.success)\r\n    } else if (size == 2) {\r\n      boolAlgebraOfSize(size - 1).map(!_)\r\n    } else {\r\n      for {\r\n        n <- Gen.int(1, size - 2)\r\n        gen <- Gen.oneOf(\r\n                (boolAlgebraOfSize(n) <*> boolAlgebraOfSize(size - n - 1)).map((p => p._1 && p._2)),\r\n                (boolAlgebraOfSize(n) <*> boolAlgebraOfSize(size - n - 1)).map(p => p._1 || p._2),\r\n                boolAlgebraOfSize(size - 1).map(!_)\r\n              )\r\n      } yield gen\r\n    }\r\n```",
        "createdAt" : "2019-10-06T17:46:59Z",
        "updatedAt" : "2019-10-06T18:38:59Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f34ef479015256e6710bb8a9e58ad6279f00f818",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +145,149 @@  def boolAlgebra: Gen[Random with Sized, BoolAlgebra[Int]] = Gen.small(s => boolAlgebraOfSize(s), 1)\n\n  def boolAlgebraOfSize(size: Int): Gen[Random, BoolAlgebra[Int]] =\n    if (size == 1) {\n      Gen.int(0, 9).map(BoolAlgebra.success)"
  }
]