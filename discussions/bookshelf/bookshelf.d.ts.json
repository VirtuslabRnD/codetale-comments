[
  {
    "id" : "65cb073a-e7bb-4d0a-ae4e-6042ecd9f323",
    "prId" : 9297,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df834148-aef5-4de7-84e8-74be61813d07",
        "parentId" : null,
        "authorId" : "873179f4-ccbb-4ee0-9683-ae8c59807b0a",
        "body" : "Why drop `DictionaryIterator`?\n",
        "createdAt" : "2016-05-11T20:16:40Z",
        "updatedAt" : "2016-05-13T12:16:12Z",
        "lastEditedBy" : "873179f4-ccbb-4ee0-9683-ae8c59807b0a",
        "tags" : [
        ]
      },
      {
        "id" : "27cb4045-4d52-4847-bf0d-a09e570d41ad",
        "parentId" : "df834148-aef5-4de7-84e8-74be61813d07",
        "authorId" : "9659474b-ff65-4639-a0c5-317124d10049",
        "body" : "Very good question.\n\nSee the test here: https://github.com/DefinitelyTyped/DefinitelyTyped/pull/9297/files#diff-8a3091671ada9e45452b597b82364fddR214, line:\n\n``` JavaScript\nconst booksOutput = books.map(book => new Author2Output(book.toJSON()));\n```\n\n`book` should be of type `Book` (and `booksOutput` of type `AuthorOutput[]`)\n- works with `map<U>(predicate? : Lodash.ListIterator<T, U>|string, thisArg? : any) : U[];`\n- works with `map<U>(predicate? : Lodash.DictionaryIterator<T, U>|string, thisArg? : any) : U[];`\n- does not work (`book` is of type `any`) with `map<U>(predicate? : Lodash.ListIterator<T, U>|Lodash.DictionaryIterator<T, boolean>|string, thisArg? : any) : U[];`\n\nTypeScript is lost with `Lodash.ListIterator<T, U>|Lodash.DictionaryIterator<T, U>`, I don't know why.\n\n<br>\n\nThis:\n\n``` JavaScript\nmap<U>(predicate? : Lodash.ListIterator<T, U>|string, thisArg? : any) : U[];\nmap<U>(predicate? : Lodash.DictionaryIterator<T, U>|string, thisArg? : any) : U[];\n```\n\nworks too => the best solution?\n\nI don't know the differences between `ListIterator` and `DictionaryIterator`, not a lodash expert :)\n",
        "createdAt" : "2016-05-11T22:20:05Z",
        "updatedAt" : "2016-05-13T12:16:12Z",
        "lastEditedBy" : "9659474b-ff65-4639-a0c5-317124d10049",
        "tags" : [
        ]
      },
      {
        "id" : "1b093dbd-f1a1-4316-bc42-68ec84030571",
        "parentId" : "df834148-aef5-4de7-84e8-74be61813d07",
        "authorId" : "873179f4-ccbb-4ee0-9683-ae8c59807b0a",
        "body" : "The difference is `iter[2]` and `iter['two']`. See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/lodash/lodash-3.10.d.ts#L15807. My only concern is maintaining lodash APIs even though I may not use them. I wish there as a better way to do that.\n\nYou are right in your assumption though. I don't know why typescript doesn't work either. My understanding of typescript says that (3) and the last are identical, but if only the last works (or is easier to write), then the last may be the best solution. If there is a reason why lodash splits the methods up instead of combining them like I have, I'm unsure of the why. Perhaps we should split them up identical to the lodash methods, i.e.\n\n```\nmap<U>(predicate? : Lodash.ListIterator<T, U>, thisArg? : any) : U[];\nmap<U>(predicate? : Lodash.Dictionary<T, U>, thisArg? : any) : U[];\nmap<U>(predicate? : string) : U[];\n```\n\n(I just realized that a string predicate doesn't have a this parameter). This might be why sometimes I see `map<Book>(...)` instead of `map(...)`.\n",
        "createdAt" : "2016-05-12T02:20:55Z",
        "updatedAt" : "2016-05-13T12:16:12Z",
        "lastEditedBy" : "873179f4-ccbb-4ee0-9683-ae8c59807b0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f5a9d315fabac1cbbc79bc813d9453f2f186fc2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +205,209 @@\t\t\t// See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/1ec3d51/lodash/lodash-3.10.d.ts#L7119\n\t\t\t// See https://github.com/Microsoft/TypeScript/blob/v1.8.10/lib/lib.core.es7.d.ts#L1122\n\t\t\tmap<U>(predicate? : Lodash.ListIterator<T, U>|string, thisArg? : any) : U[];\n\t\t\tmap<U>(predicate? : Lodash.DictionaryIterator<T, U>|string, thisArg? : any) : U[];\n\t\t\tmap<U>(predicate? : string) : U[];"
  },
  {
    "id" : "aee99631-c95d-433a-9da1-b74a0966d534",
    "prId" : 9297,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b10e395c-6a0b-49d7-a084-bd0c7055cddf",
        "parentId" : null,
        "authorId" : "873179f4-ccbb-4ee0-9683-ae8c59807b0a",
        "body" : "You should probably reference the lodash docs if you want to reference something: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/lodash/lodash-3.10.d.ts#L7119 or https://github.com/lodash/lodash/blob/3.10.1/lodash.src.js#L6864\n",
        "createdAt" : "2016-05-11T20:17:59Z",
        "updatedAt" : "2016-05-13T12:16:12Z",
        "lastEditedBy" : "873179f4-ccbb-4ee0-9683-ae8c59807b0a",
        "tags" : [
        ]
      },
      {
        "id" : "31196de5-9fe4-4cc8-9764-171927f14b97",
        "parentId" : "b10e395c-6a0b-49d7-a084-bd0c7055cddf",
        "authorId" : "9659474b-ff65-4639-a0c5-317124d10049",
        "body" : "See the `map<U>(...): U[]`? I took the **U** solution/idea from https://github.com/Microsoft/TypeScript/blob/v1.8.10/lib/lib.core.es7.d.ts#L1122:\n\n``` JavaScript\nmap<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\n```\n\n`ListIterator` from lodash being:\n\n``` JavaScript\ninterface ListIterator<T, TResult> {\n  (value: T, index: number, collection: List<T>): TResult;\n}\n```\n\nSo the 'same' as `(value: T, index: number, array: T[]) => U` from lib.core.es7.d.ts\n\nThat's why I put a link to lib.core.es7.d.ts (and it's a good idea to also link to lodash-3.10.d.ts#L7119).\n",
        "createdAt" : "2016-05-11T22:29:12Z",
        "updatedAt" : "2016-05-13T12:16:12Z",
        "lastEditedBy" : "9659474b-ff65-4639-a0c5-317124d10049",
        "tags" : [
        ]
      },
      {
        "id" : "7a1a35b8-6d5f-400c-b6f4-cd31f345ed4e",
        "parentId" : "b10e395c-6a0b-49d7-a084-bd0c7055cddf",
        "authorId" : "873179f4-ccbb-4ee0-9683-ae8c59807b0a",
        "body" : "You are right referencing a new `U` parameter. I don't know why I referenced `boolean` in the initial implementation. My thought was that it might be confusing to reference this es7 method since the lodash method overrides it (even though the API is almost identical).\n",
        "createdAt" : "2016-05-12T02:19:58Z",
        "updatedAt" : "2016-05-13T12:16:12Z",
        "lastEditedBy" : "873179f4-ccbb-4ee0-9683-ae8c59807b0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f5a9d315fabac1cbbc79bc813d9453f2f186fc2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +204,208 @@\n\t\t\t// See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/1ec3d51/lodash/lodash-3.10.d.ts#L7119\n\t\t\t// See https://github.com/Microsoft/TypeScript/blob/v1.8.10/lib/lib.core.es7.d.ts#L1122\n\t\t\tmap<U>(predicate? : Lodash.ListIterator<T, U>|string, thisArg? : any) : U[];\n\t\t\tmap<U>(predicate? : Lodash.DictionaryIterator<T, U>|string, thisArg? : any) : U[];"
  }
]