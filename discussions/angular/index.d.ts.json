[
  {
    "id" : "0edb7b6d-cb44-4414-970b-3e6a29d0aac1",
    "prId" : 13905,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/13905#pullrequestreview-17548470",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bceb7a41-be61-4ad3-840c-76e61039ae08",
        "parentId" : null,
        "authorId" : "684aaf20-f23a-4b2a-8070-073a826b9c21",
        "body" : "Why is the proposed signature better? In `lib.es2015.promise.d.ts`, we see this:\r\n```ts\r\nresolve<T>(value: T | PromiseLike<T>): Promise<T>;\r\n```\r\nSee my previous comment about compatibility between different types of promises. Their types should be structurally compatible as they all implement the same Promises/A+ spec. If the proposed signature is more accurate, then probably `lib.es2015.promise.d.ts` should be changed too. ",
        "createdAt" : "2017-01-18T21:36:05Z",
        "updatedAt" : "2017-02-03T17:28:12Z",
        "lastEditedBy" : "684aaf20-f23a-4b2a-8070-073a826b9c21",
        "tags" : [
        ]
      },
      {
        "id" : "e6875d1b-d049-4fcb-9067-b0cf10429ec4",
        "parentId" : "bceb7a41-be61-4ad3-840c-76e61039ae08",
        "authorId" : "d2870491-83ce-46d1-bd5b-f124b6b53e23",
        "body" : "1. It allows to handle rare edge cases. I agree that it is not very useful, but still there are \"legal\" cases that fail to compile with vanilla definitions of Promises:\r\n\r\n```\r\nPromise.resolve(Math.random() > 0.5 ? 2 : Promise.reject(2))\r\n    .then(x => console.log(x), x => console.error(x));\r\n```\r\n\r\n2. On other hand, I agree that better if my pull request will target `lib.es2015.promise.d.ts`. Consistency across the typings is a valuable thing as you mentioned in your previous comment.",
        "createdAt" : "2017-01-19T19:27:36Z",
        "updatedAt" : "2017-02-03T17:28:12Z",
        "lastEditedBy" : "d2870491-83ce-46d1-bd5b-f124b6b53e23",
        "tags" : [
        ]
      },
      {
        "id" : "6b23c895-6edc-4239-ac6d-d294b0fb64cd",
        "parentId" : "bceb7a41-be61-4ad3-840c-76e61039ae08",
        "authorId" : "684aaf20-f23a-4b2a-8070-073a826b9c21",
        "body" : "Nice catch actually. This should be brought up in the TypeScript project.",
        "createdAt" : "2017-01-19T20:21:38Z",
        "updatedAt" : "2017-02-03T17:28:12Z",
        "lastEditedBy" : "684aaf20-f23a-4b2a-8070-073a826b9c21",
        "tags" : [
        ]
      }
    ],
    "commit" : "352ee03af80d903738241bb89422e7ece88212e0",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1052,1056 @@         */\n        resolve<T>(value: IPromise<T>|T): IPromise<T>;\n        resolve<T1, T2>(value: IPromise<T1>|T2): IPromise<T1|T2>;\n        /**\n         * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise. This is useful when you are dealing with an object that might or might not be a promise, or if the promise comes from a source that can't be trusted."
  }
]