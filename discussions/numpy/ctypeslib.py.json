[
  {
    "id" : "6e251297-1b31-486c-acb6-bdfe5058d873",
    "prId" : 10970,
    "prUrl" : "https://github.com/numpy/numpy/pull/10970#pullrequestreview-121647380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bc4f0d3-4fc1-4e18-9279-f26ba05e2da4",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I wonder if we still need this. Much of the code here is ancient and predates the inclusion of ctypes into the standard library in Python 2.5.",
        "createdAt" : "2018-05-20T15:43:00Z",
        "updatedAt" : "2018-05-26T08:23:16Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a8be508d2b2ce719de94209286293973c278b46",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +340,344 @@\n\nif ctypes is not None:\n    _typecodes = _get_typecodes()\n"
  },
  {
    "id" : "e06e312b-5cf8-4daf-b7f8-9fde92f18e03",
    "prId" : 10970,
    "prUrl" : "https://github.com/numpy/numpy/pull/10970#pullrequestreview-123550836",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6eabcee2-3481-4cfc-b47d-8bb548696a97",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "A standard docstring would help here.",
        "createdAt" : "2018-05-20T15:45:09Z",
        "updatedAt" : "2018-05-26T08:23:16Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a0d46c54-5fe6-4232-8d06-e0fa5932140e",
        "parentId" : "6eabcee2-3481-4cfc-b47d-8bb548696a97",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm going to argue this is out of scope for this patch",
        "createdAt" : "2018-05-26T08:07:42Z",
        "updatedAt" : "2018-05-26T08:23:16Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a8be508d2b2ce719de94209286293973c278b46",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +349,353 @@        The numpy array shares the memory with the ctypes object.\n\n        The shape parameter must be given if converting from a ctypes POINTER.\n        The shape parameter is ignored if converting from a ctypes array\n        \"\"\""
  },
  {
    "id" : "226a98ba-5af6-43aa-af7f-ea33d9ab5837",
    "prId" : 10970,
    "prUrl" : "https://github.com/numpy/numpy/pull/10970#pullrequestreview-123550971",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5237b1c8-59d3-4fb3-86d5-387903e46aaf",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Is using private class safe?",
        "createdAt" : "2018-05-20T15:46:38Z",
        "updatedAt" : "2018-05-26T08:23:16Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "18bdb16f-242e-4c18-984d-fb7ce227f3ff",
        "parentId" : "5237b1c8-59d3-4fb3-86d5-387903e46aaf",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm not a huge fan of using attribute testing here, which will give a false-positive for `np.recarray` with the wrong dtype. I suppose I could switch it back to how the detection was done before, if you'd prefer that.\r\n\r\n",
        "createdAt" : "2018-05-26T08:14:36Z",
        "updatedAt" : "2018-05-26T08:23:16Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a8be508d2b2ce719de94209286293973c278b46",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +352,356 @@        The shape parameter is ignored if converting from a ctypes array\n        \"\"\"\n        if isinstance(obj, ctypes._Pointer):\n            # convert pointers to an array of the desired shape\n            if shape is None:"
  },
  {
    "id" : "ff08c93b-571c-434f-8841-6a1a67bb8ad4",
    "prId" : 12424,
    "prUrl" : "https://github.com/numpy/numpy/pull/12424#pullrequestreview-177068106",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "204162f0-d88e-4a4c-b675-365cb49e5717",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I wonder if #1725 might be a problem here, AFAIK, dtypes are not immutable, although the topic has come up many times and I don't recall where it has ended up.",
        "createdAt" : "2018-11-20T15:11:24Z",
        "updatedAt" : "2018-11-20T15:11:24Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "557d9002-eb1f-4d63-902d-535b7a342ff4",
        "parentId" : "204162f0-d88e-4a4c-b675-365cb49e5717",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yep, it will be. I'm of the opinion that dtypes need to become immutable",
        "createdAt" : "2018-11-21T03:51:04Z",
        "updatedAt" : "2018-11-21T03:51:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b366e0b0fff8bd46397d4d013832efce6e338b1",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +300,304 @@            shape = (shape,)\n\n    cache_key = (dtype, ndim, shape, num)\n\n    try:"
  },
  {
    "id" : "a71cb048-55fe-4843-be58-289614c0bdd1",
    "prId" : 12431,
    "prUrl" : "https://github.com/numpy/numpy/pull/12431#pullrequestreview-177457272",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b307057a-80e9-4001-8684-98eab7e63516",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is sort of frustrating - there ought to be a better way to construct an array from a pointer without having to go through an intermediate byte array.",
        "createdAt" : "2018-11-21T03:29:20Z",
        "updatedAt" : "2018-11-21T22:35:09Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "6512e98e-4660-42b5-a238-8b3c187fec4c",
        "parentId" : "b307057a-80e9-4001-8684-98eab7e63516",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "That's why the `full_ctype` ?",
        "createdAt" : "2018-11-21T22:23:37Z",
        "updatedAt" : "2018-11-21T22:35:09Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "f51c64f5-36cc-4f98-a098-414754c69d1e",
        "parentId" : "b307057a-80e9-4001-8684-98eab7e63516",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yeah, the goal of full_ctypes is to get an object supporting the buffer protocol that we can pass to `frombuffer`. Perhaps `ndarray.from_address(addr, shape, strides, dtype)` ought to be a (dangerous) part of the C api?",
        "createdAt" : "2018-11-21T22:39:38Z",
        "updatedAt" : "2018-11-21T22:39:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ae7210ee-e935-4932-b449-e2253e289bd8",
        "parentId" : "b307057a-80e9-4001-8684-98eab7e63516",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Interesting thought. I'd mostly be concerned if memory or speed was a problem with the current approach.",
        "createdAt" : "2018-11-21T23:02:28Z",
        "updatedAt" : "2018-11-21T23:02:28Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ade4843f-5419-4658-ad01-f32b1e5dfb5a",
        "parentId" : "b307057a-80e9-4001-8684-98eab7e63516",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Memory shouldn't be a concern - this doesn't make any copies of the underlying data - at most we're churning around a bunch of metadata. `_CPointer.contents` returns a reference, not a copy.",
        "createdAt" : "2018-11-21T23:05:19Z",
        "updatedAt" : "2018-11-21T23:06:05Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "73322a0ba923ff6e6429463ba1e31acc69ce1ea7",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +223,227 @@        full_ctype = ctypes.c_char * full_dtype.itemsize\n        buffer = ctypes.cast(self, ctypes.POINTER(full_ctype)).contents\n        return frombuffer(buffer, dtype=full_dtype).squeeze(axis=0)\n\n"
  },
  {
    "id" : "bc4dd203-ea1c-45f7-a989-e89816a41b73",
    "prId" : 12456,
    "prUrl" : "https://github.com/numpy/numpy/pull/12456#pullrequestreview-191965152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e589d5a-43fe-49f9-8782-257abc0430cd",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "donvert -> convert",
        "createdAt" : "2019-01-13T08:44:43Z",
        "updatedAt" : "2019-01-13T19:17:07Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "c4d27e4c-c6c3-466a-a502-b5092f52b744",
        "parentId" : "6e589d5a-43fe-49f9-8782-257abc0430cd",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Good datch",
        "createdAt" : "2019-01-13T08:47:29Z",
        "updatedAt" : "2019-01-13T19:17:07Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "08a92de354f1f7592c7957f4aafe892f3d5a828a",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +496,500 @@\n        \"\"\"\n        return _ctype_from_dtype(_dtype(dtype))\n\n"
  }
]