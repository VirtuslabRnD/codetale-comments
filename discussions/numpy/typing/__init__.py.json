[
  {
    "id" : "8773c097-21a1-4ce0-bee9-7f39ccffd9be",
    "prId" : 16558,
    "prUrl" : "https://github.com/numpy/numpy/pull/16558#pullrequestreview-427711138",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bbe34ee-dcdf-46c2-89e4-8b1d961c7839",
        "parentId" : null,
        "authorId" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "body" : "There isn't much code in this package, but since typing is so verbose it would be a little painful to keep `Any`, `overload`, ... out of the public namespace if we crammed everything in a `typing.py` file. So instead make a package and use this init to make sure we're only exporting exactly what we mean to.",
        "createdAt" : "2020-06-10T04:59:07Z",
        "updatedAt" : "2020-06-17T04:33:20Z",
        "lastEditedBy" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "d985e8ca2fca154d3770c842a2da1ba6dc3aaf1c",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +77,81 @@\n\"\"\"\nfrom ._array_like import _SupportsArray, ArrayLike\nfrom ._shape import _Shape, _ShapeLike\nfrom ._dtype_like import DtypeLike"
  },
  {
    "id" : "f587e8bf-e3e1-4af4-be79-8379d65d4a56",
    "prId" : 16558,
    "prUrl" : "https://github.com/numpy/numpy/pull/16558#pullrequestreview-431143551",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "377121f9-965a-4708-a927-74461b0a32a7",
        "parentId" : null,
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Can we add a brief note on the suggested work-around?\r\n\r\nThe obvious way would be to add a comment disabling typing:\r\n```\r\n  np.array(x**2 for x in range(10))  # type: ignore\r\n```\r\n\r\nAre there other recommended options?\r\n\r\nI think we've also discussed making checks less strict if `dtype=object` is specified, e.g.,\r\n```\r\n  np.array(x**2 for x in range(10), dtype=object)\r\n```\r\nI don't know if that works yet. If it does, perhaps we should mention it, too.",
        "createdAt" : "2020-06-15T17:20:03Z",
        "updatedAt" : "2020-06-17T04:33:20Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "b04f5b35-ad70-4fdf-9c3b-162f3c13681a",
        "parentId" : "377121f9-965a-4708-a927-74461b0a32a7",
        "authorId" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "body" : "> Are there other recommended options?\r\n\r\nThe other way we test for:\r\n\r\nhttps://github.com/numpy/numpy/blob/master/numpy/tests/typing/pass/array_like.py#L43)\r\n\r\nis adding an explicit `Any` annotation. I've added examples of both methods to the docs.\r\n\r\n> I don't know if that works yet. If it does, perhaps we should mention it, too.\r\n\r\nSeems like @seberg would probably know the answer to that?",
        "createdAt" : "2020-06-16T04:00:24Z",
        "updatedAt" : "2020-06-17T04:33:20Z",
        "lastEditedBy" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "d985e8ca2fca154d3770c842a2da1ba6dc3aaf1c",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +60,64 @@    >>> np.array(array_like)\n    array(<generator object <genexpr> at 0x1192741d0>, dtype=object)\n\nndarray\n~~~~~~~"
  },
  {
    "id" : "6c6ebad4-cca8-4eff-893e-fb83633ae4f0",
    "prId" : 16917,
    "prUrl" : "https://github.com/numpy/numpy/pull/16917#pullrequestreview-452822061",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45b2b93d-d72c-4b74-be82-84f6d5ab3c1f",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "```suggestion\r\n.. code-block:: python\r\n\r\n```",
        "createdAt" : "2020-07-21T20:43:53Z",
        "updatedAt" : "2020-07-24T18:04:40Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "8cf0ea1d-fd4d-4353-8b4e-1edb4f252e9e",
        "parentId" : "45b2b93d-d72c-4b74-be82-84f6d5ab3c1f",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Adding an additional empty line should fix the latest CI failure ([ref](https://app.circleci.com/pipelines/github/numpy/numpy/2654/workflows/70c4c38a-0aa0-4894-b8b2-96a76e5c01dc/jobs/14744)).",
        "createdAt" : "2020-07-21T20:45:28Z",
        "updatedAt" : "2020-07-24T18:04:40Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "2ae05009-08b9-4331-b18c-dda9602da311",
        "parentId" : "45b2b93d-d72c-4b74-be82-84f6d5ab3c1f",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "Thanks @BvB93 !",
        "createdAt" : "2020-07-21T20:55:30Z",
        "updatedAt" : "2020-07-24T18:04:40Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      }
    ],
    "commit" : "338b5f9c4d704700f015a99f9d9ae0c6c14a4da6",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +82,86 @@dictionary of fields like below:\n\n.. code-block:: python\n\n    >>> x = np.dtype({\"field1\": (float, 1), \"field2\": (int, 3)})"
  },
  {
    "id" : "08288218-9ef0-4a29-991b-df18141bc0c8",
    "prId" : 17844,
    "prUrl" : "https://github.com/numpy/numpy/pull/17844#pullrequestreview-538666193",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "767588dd-20a7-4ec2-8fe1-41572c7e79e5",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What does this do?",
        "createdAt" : "2020-11-25T16:05:13Z",
        "updatedAt" : "2020-11-25T16:25:33Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b00b870d-b014-4742-a859-6bcf971ea592",
        "parentId" : "767588dd-20a7-4ec2-8fe1-41572c7e79e5",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "If `__all__` is defined then mypy will only consider the objects mentioned therein to be importable. \r\nObviously this is a problem, as the `numpy.typing` contains a number of private variables that we _don't_ want in `__all__`.\r\n\r\nAs a workaround, `__all__` is now annotated as a generic list-of-strings while type checking, thus circumventing the issue above. In this manner we can still access our private variables and mypy knows that there is an `__all__` object within the module.",
        "createdAt" : "2020-11-25T16:11:20Z",
        "updatedAt" : "2020-11-25T16:25:33Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "b277e7dd-b23e-4416-8d23-d83afa0ee35b",
        "parentId" : "767588dd-20a7-4ec2-8fe1-41572c7e79e5",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What I find curious is the use of `:`.",
        "createdAt" : "2020-11-25T16:18:36Z",
        "updatedAt" : "2020-11-25T16:25:33Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "67eb2013-0f4d-4bb1-8311-f6a63768d227",
        "parentId" : "767588dd-20a7-4ec2-8fe1-41572c7e79e5",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I suppose that is an annotation here. Perhaps make the explanation more explicit.",
        "createdAt" : "2020-11-25T16:20:29Z",
        "updatedAt" : "2020-11-25T16:25:33Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "8cb75fa6-296b-4baf-99dc-b5690b812126",
        "parentId" : "767588dd-20a7-4ec2-8fe1-41572c7e79e5",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Done as of https://github.com/numpy/numpy/pull/17844/commits/670d94ffba5798559bff3538dba39ab01f050248.",
        "createdAt" : "2020-11-25T16:26:00Z",
        "updatedAt" : "2020-11-25T16:26:00Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "670d94ffba5798559bff3538dba39ab01f050248",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +141,145 @@    # Declare to mypy that `__all__` is a list of strings without assigning\n    # an explicit value\n    __all__: List[str]\n\n"
  },
  {
    "id" : "7ce9c4b5-af7e-4db1-93b3-871571e50004",
    "prId" : 18885,
    "prUrl" : "https://github.com/numpy/numpy/pull/18885#pullrequestreview-651496355",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e166036-3785-453f-9009-185fe7d028f9",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "TLDR: The new return annotations will now just be somewhat inconvenient for 0D arrays, rather than 0D _and_ ND arrays.",
        "createdAt" : "2021-05-02T12:02:19Z",
        "updatedAt" : "2021-05-02T12:02:19Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "21e7ce16-f6ad-4564-a491-332f973cd4df",
        "parentId" : "6e166036-3785-453f-9009-185fe7d028f9",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Also a second question: are there any parts of the numpy documentation that describe 0D arrays and/or numpy's aggressive 0D-to-scalar casting? If so, then it might be useful the place a link here.",
        "createdAt" : "2021-05-02T19:51:13Z",
        "updatedAt" : "2021-05-02T19:51:13Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "d89c3a40-8ecb-4923-82ed-5233f1462c36",
        "parentId" : "6e166036-3785-453f-9009-185fe7d028f9",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The casts are scattered through the C code as `PyArray_Return`. The policy, such as it is, is documented as\r\n```\r\n.. c:function:: PyObject* PyArray_Return(PyArrayObject* arr)\r\n\r\n    This function steals a reference to *arr*.\r\n\r\n    This function checks to see if *arr* is a 0-dimensional array and,\r\n    if so, returns the appropriate array scalar. It should be used\r\n    whenever 0-dimensional arrays could be returned to Python.\r\n```",
        "createdAt" : "2021-05-04T17:34:28Z",
        "updatedAt" : "2021-05-04T17:34:29Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6fa34d432722faaaf54f27fb9cb3b1b9e197e9fe",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +154,158 @@0D-array -> scalar cast, then one can consider manually remedying the\nsituation with either `typing.cast` or a ``# type: ignore`` comment.\n\nAPI\n---"
  }
]