[
  {
    "id" : "f806e73a-9653-42b4-8edd-123b7b11a485",
    "prId" : 16200,
    "prUrl" : "https://github.com/numpy/numpy/pull/16200#pullrequestreview-436815557",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62bbc45c-fdf5-4202-97d7-41bd75b3cad3",
        "parentId" : null,
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "i am a little confused by this logic. For example, if it doesnt fit into long long , value should be -1 (and also error not raised?). In which case it should hit the if here, and this will be true even if value didnt fall in this range ? Having said that, the following seems to work just fine, though I am not sure why.\r\n\r\n```\r\nimport numpy as np\r\n\r\nx = np.array([18446744073709551614, 18446744073709551614])\r\nprint(x.dtype)\r\n```",
        "createdAt" : "2020-06-23T21:21:04Z",
        "updatedAt" : "2020-07-08T23:39:29Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "6de27d3a-d98f-460a-96cc-d4e1d066b6c3",
        "parentId" : "62bbc45c-fdf5-4202-97d7-41bd75b3cad3",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Its handled by the `error_converting` path above. That should probably actually use some `AndOverflow` API to avoid creating and discoarting the error. But right now this code should be a pretty straight forward move only. ",
        "createdAt" : "2020-06-24T14:13:53Z",
        "updatedAt" : "2020-07-08T23:39:29Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "7bf67880-f9aa-4dd0-a9f7-02cb15c9876b",
        "parentId" : "62bbc45c-fdf5-4202-97d7-41bd75b3cad3",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "thanks for the clarification. i guess this hits a bunch of times before its called for 18446744073709551614 (not completely sure why), and i guess i was looking at the call for the wrong obj and that probably confused me. Agree looks pretty straightforward otherwise, and probably should be okay without the ``AndOverflow`` API\r\n\r\nEDIT: I meant without the ``AndOverflow`` API",
        "createdAt" : "2020-06-24T16:31:44Z",
        "updatedAt" : "2020-07-08T23:39:29Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      }
    ],
    "commit" : "22ee97190db0e2432e21d3d830e04776feb0f0a6",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +29,33 @@    else {\n        if (NPY_MIN_LONG <= value && value <= NPY_MAX_LONG) {\n            return PyArray_DescrFromType(NPY_LONG);\n        }\n        return PyArray_DescrFromType(NPY_LONGLONG);"
  },
  {
    "id" : "b0af760f-8aa5-4815-823e-4479c8f859e8",
    "prId" : 18676,
    "prUrl" : "https://github.com/numpy/numpy/pull/18676#pullrequestreview-660010483",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c0f7027-1b9e-4ea0-930b-e410480d2cf0",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Do you really need these wrappers, or can you use `PyArray_DescrFromType(NPY_XXX)` ?",
        "createdAt" : "2021-04-22T01:42:58Z",
        "updatedAt" : "2021-04-22T03:04:47Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "1b06fff3-4508-4075-89df-1ff22d1d66dd",
        "parentId" : "3c0f7027-1b9e-4ea0-930b-e410480d2cf0",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "All DTypes should have a `default_descr()` class method (even these abstract ones). I guess it could make sense to not have one in some cases, but here it is required.",
        "createdAt" : "2021-05-14T16:34:47Z",
        "updatedAt" : "2021-05-14T16:34:47Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b7b2561f3c6c6fb0c80fed4ee503647636f14bc",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +19,23 @@    return PyArray_DescrFromType(NPY_LONG);\n}\n\nstatic PyArray_Descr *\ndiscover_descriptor_from_pyint("
  },
  {
    "id" : "79112235-636c-45aa-8e09-0ce73a519fd6",
    "prId" : 18676,
    "prUrl" : "https://github.com/numpy/numpy/pull/18676#pullrequestreview-660485643",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d95a2525-b5d8-4b1a-a62c-51a01317d608",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Is there a NPY_DEFAULT_INT type? Also - is coverage correct that this case is not tested?",
        "createdAt" : "2021-05-16T13:31:00Z",
        "updatedAt" : "2021-05-16T13:31:00Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "67f2d2c0-e517-405b-8869-efb7597d44a6",
        "parentId" : "d95a2525-b5d8-4b1a-a62c-51a01317d608",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Added the coverage.  No, we don't have such a macro.  There are ~that~ three places currently where we use a default I think:\r\n\r\n* Here\r\n* In this file, but in the `discover_descriptor_from_pyint`\r\n* In the ufunc code when specialising `np.add.reduce` and `np.multiply.reduce` to always return (\"high precision\") integers.",
        "createdAt" : "2021-05-17T00:40:43Z",
        "updatedAt" : "2021-05-17T19:51:21Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b7b2561f3c6c6fb0c80fed4ee503647636f14bc",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +154,158 @@        if (other->type_num == NPY_BOOL) {\n            /* Use the default integer for bools: */\n            return PyArray_DTypeFromTypeNum(NPY_LONG);\n        }\n        else if (PyTypeNum_ISNUMBER(other->type_num) ||"
  },
  {
    "id" : "5e850562-2e5d-4919-84fe-d9ac05b56785",
    "prId" : 18676,
    "prUrl" : "https://github.com/numpy/numpy/pull/18676#pullrequestreview-660436048",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39f524bd-8544-4891-ab49-932c99e911e6",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "test needed?",
        "createdAt" : "2021-05-16T13:31:22Z",
        "updatedAt" : "2021-05-16T13:31:23Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b7b2561f3c6c6fb0c80fed4ee503647636f14bc",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +166,170 @@        /* This is a back-compat fallback to usually do the right thing... */\n        return PyArray_DTypeFromTypeNum(NPY_UINT8);\n    }\n    Py_INCREF(Py_NotImplemented);\n    return (PyArray_DTypeMeta *)Py_NotImplemented;"
  },
  {
    "id" : "2e526d7d-f330-47e5-ae0f-8a6f819f2f9c",
    "prId" : 19587,
    "prUrl" : "https://github.com/numpy/numpy/pull/19587#pullrequestreview-720389248",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e05c70a-cbdb-4326-9655-762a1aa4cce3",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Isn't it sufficient to have `other->type_num >=0 && other->type_num < NPY_NTYPES` here? (Though perhaps that is actually *less* clear.",
        "createdAt" : "2021-08-01T19:55:25Z",
        "updatedAt" : "2021-08-01T20:34:32Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "f19492cb-3345-41e8-8680-b6d47d788b36",
        "parentId" : "4e05c70a-cbdb-4326-9655-762a1aa4cce3",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Would work too.  I am still trying to not assign type numbers at all to new-style dtypes.  But even then, maybe I should assign them something like `INT_MAX` rather than an invalid one like `-1` or `0`.",
        "createdAt" : "2021-08-02T16:28:25Z",
        "updatedAt" : "2021-08-02T16:28:25Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "88613b87143e6debf12f662443ed38518ccb8a4d",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +175,179 @@float_common_dtype(PyArray_DTypeMeta *cls, PyArray_DTypeMeta *other)\n{\n    if (NPY_DT_is_legacy(other) && other->type_num < NPY_NTYPES) {\n        if (other->type_num == NPY_BOOL || PyTypeNum_ISINTEGER(other->type_num)) {\n            /* Use the default integer for bools and ints: */"
  }
]