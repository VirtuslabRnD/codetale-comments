[
  {
    "id" : "b862d625-0269-4e5f-9f08-22aed880e2f2",
    "prId" : 2812,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0f89638-aaf3-4b70-bdf2-c1d48b0223a8",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Good, I missed that check first time through.\n",
        "createdAt" : "2012-12-13T23:24:13Z",
        "updatedAt" : "2012-12-15T02:08:08Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb0952d780fd0488c9ea872e33c0bf9d79fe7607",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +72,76 @@        *step_size = 0;\n        if (!PyIndex_Check_Or_Unsupported(op)) {\n            if (DEPRECATE(\"non-integer scalar index. In a future numpy \"\n                          \"release, this will raise an error.\") < 0) {\n                goto fail;"
  },
  {
    "id" : "8c7d79d1-2e15-4103-ad2a-02623053fece",
    "prId" : 9762,
    "prUrl" : "https://github.com/numpy/numpy/pull/9762#pullrequestreview-64763560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34e9507b-0980-4500-bc4f-dd9f6a70c501",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "There's another setitem call at line 938.",
        "createdAt" : "2017-09-24T14:16:25Z",
        "updatedAt" : "2017-09-24T14:16:25Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c24bd30f105331034ffcadfeb2e74c8630fd917",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +921,925 @@        }\n        goto finish;\n    }\n\n    if (PySequence_Check(ind) || PySlice_Check(ind)) {"
  },
  {
    "id" : "00e2973b-274e-4b46-b846-4af1bdc0adda",
    "prId" : 13445,
    "prUrl" : "https://github.com/numpy/numpy/pull/13445#pullrequestreview-232805038",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fea4c964-e4bd-4877-b6eb-44ae5c9712e0",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n            it = (PyArrayIterObject *)PyArray_IterNew(arr);\r\n            Py_DECREF(arr);\r\n```\r\nI think you can move the DECREF up, sorry I guess those suggestions will mess things up again... (I hope they enable suggestion to batch when in review mode...)",
        "createdAt" : "2019-05-02T00:32:24Z",
        "updatedAt" : "2019-05-21T20:43:21Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "17abad6dd869f8bc076a57244f829f1b7c22b5f9",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +1294,1298 @@                goto fail;\n            }\n            it = (PyArrayIterObject *)PyArray_IterNew(arr);\n            Py_DECREF(arr);\n            if (it == NULL) {"
  },
  {
    "id" : "11499189-cca9-407a-9fe5-1afc4c495175",
    "prId" : 13544,
    "prUrl" : "https://github.com/numpy/numpy/pull/13544#pullrequestreview-236947339",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58ca53d1-6dbc-4465-a353-558b2607e451",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Strange message, but not even sure how that should get floated to a user...",
        "createdAt" : "2019-05-13T18:53:56Z",
        "updatedAt" : "2019-05-13T19:10:35Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "25d68127-9046-4a59-8234-c6e452712577",
        "parentId" : "58ca53d1-6dbc-4465-a353-558b2607e451",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is part of the c API, so python users will never see it.",
        "createdAt" : "2019-05-13T22:20:15Z",
        "updatedAt" : "2019-05-13T22:20:15Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3a19daff9330f0196aba90582450d022fc8798c",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1265,1269 @@    if (ntot < 0) {\n        PyErr_Format(PyExc_ValueError,\n                     \"n and nadd arguments must be non-negative\", NPY_MAXARGS);\n        return NULL;\n    }"
  },
  {
    "id" : "0ef4d6b0-38d9-40c9-8795-806d1115643f",
    "prId" : 13544,
    "prUrl" : "https://github.com/numpy/numpy/pull/13544#pullrequestreview-236863017",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb728d44-a2e9-4730-ba20-47fb3ba823a9",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "How does one hit the code path where `ntot < 0`? If there's a concise / practical way to do that, coverage shows this is never true so a test would be useful.\r\n\r\nConversely, if this can't be hit by any practical code path by calling NumPy public API, is the guard really needed?",
        "createdAt" : "2019-05-13T19:03:27Z",
        "updatedAt" : "2019-05-13T19:05:39Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "e139b7e3-7475-46dd-baf6-816846b56d43",
        "parentId" : "bb728d44-a2e9-4730-ba20-47fb3ba823a9",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "I guess the guard is needed because of C API exposure.",
        "createdAt" : "2019-05-13T19:06:52Z",
        "updatedAt" : "2019-05-13T19:07:13Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3a19daff9330f0196aba90582450d022fc8798c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1263,1267 @@\n    ntot = n + nadd;\n    if (ntot < 0) {\n        PyErr_Format(PyExc_ValueError,\n                     \"n and nadd arguments must be non-negative\", NPY_MAXARGS);"
  },
  {
    "id" : "a99041b6-bb93-44cc-84e4-44c99a135207",
    "prId" : 13544,
    "prUrl" : "https://github.com/numpy/numpy/pull/13544#pullrequestreview-236950603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "790ca1b1-264d-4872-9163-c114ac397142",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "This is never true in the coverage report either, though I suppose a unit test here might be slow if that max value is big.",
        "createdAt" : "2019-05-13T19:04:45Z",
        "updatedAt" : "2019-05-13T19:05:39Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "5a80c3f3-e437-4142-82c6-8d09fb0aced1",
        "parentId" : "790ca1b1-264d-4872-9163-c114ac397142",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think this entire function is probably untested, like most parts of the c API.",
        "createdAt" : "2019-05-13T22:31:03Z",
        "updatedAt" : "2019-05-13T22:31:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3a19daff9330f0196aba90582450d022fc8798c",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1268,1272 @@        return NULL;\n    }\n    if (ntot > NPY_MAXARGS) {\n        PyErr_Format(PyExc_ValueError,\n                     \"At most %d array objects are supported.\", NPY_MAXARGS);"
  },
  {
    "id" : "a5e0fb9d-7ce4-44b8-8d53-2b6c8e8acb8b",
    "prId" : 13544,
    "prUrl" : "https://github.com/numpy/numpy/pull/13544#pullrequestreview-236973635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9b4ae43-caa3-474c-93bc-146d3ba3a459",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK, do you see why this is there? I do not see how there can possibly an error set at this stage. But... It was there before, so I guess we can keep it (and moving it a bit doesn't matter much).",
        "createdAt" : "2019-05-13T19:09:59Z",
        "updatedAt" : "2019-05-13T19:10:35Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "f9c29396-7a50-405f-826a-09ab6d54c077",
        "parentId" : "d9b4ae43-caa3-474c-93bc-146d3ba3a459",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yes, isinstance can throw an exception in principle, when it returns -1",
        "createdAt" : "2019-05-13T22:22:44Z",
        "updatedAt" : "2019-05-13T22:22:44Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ba7b5cf7-7b6f-409f-9b7b-84befc22767c",
        "parentId" : "d9b4ae43-caa3-474c-93bc-146d3ba3a459",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "That seems pretty far fetched, but OK. This whole thing is trying to be minimal invasive. And I think that is successful enough for me to be OK with merging it in a bit. (so if anyone has any stomach aches about it, please comment).\r\n\r\nThe C-API testing would be better of course, so maybe will also see to add that before merging.",
        "createdAt" : "2019-05-14T00:03:41Z",
        "updatedAt" : "2019-05-14T00:03:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a3a19daff9330f0196aba90582450d022fc8798c",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +1418,1422 @@        }\n    }\n    if (PyErr_Occurred()) {\n        return NULL;\n    }"
  },
  {
    "id" : "ae2120dd-7647-45d4-871e-e57fbf9a006a",
    "prId" : 13871,
    "prUrl" : "https://github.com/numpy/numpy/pull/13871#pullrequestreview-267324408",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ab7fa71-36ea-4b29-8227-cdbc23b49434",
        "parentId" : null,
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "I don't have a strong opinion, but most internal helper functions don't seem to have `PyArray_` prefix.",
        "createdAt" : "2019-07-26T17:59:25Z",
        "updatedAt" : "2019-07-26T18:48:51Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "4510f2ced8efc16c0afeb9e7bb60be30408fc9f0",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +122,126 @@ */\nNPY_NO_EXPORT void\nPyArray_RawIterBaseInit(PyArrayIterObject *it, PyArrayObject *ao)\n{\n    int nd, i;"
  }
]