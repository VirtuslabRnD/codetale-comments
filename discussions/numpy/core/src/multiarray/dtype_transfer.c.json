[
  {
    "id" : "b3e227d4-f007-4f26-b71c-56c764f66583",
    "prId" : 6053,
    "prUrl" : "https://github.com/numpy/numpy/pull/6053#pullrequestreview-33402620",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7091b24d-e9bc-457b-8fff-96e87230769d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "What do `object` and `structure` mean here?",
        "createdAt" : "2017-04-18T21:39:33Z",
        "updatedAt" : "2017-09-07T21:54:14Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "064d0ffc-125b-4ca2-a4de-ff5972dea674",
        "parentId" : "7091b24d-e9bc-457b-8fff-96e87230769d",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "As I recall, this refers to converting object arrays (or python objects) to structures. \r\n\r\nIf you go to the (only) place that `get_fields_transfer_function ` is called, note that it is in an if-block that excludes NPY_OBJECT types.",
        "createdAt" : "2017-04-19T04:18:21Z",
        "updatedAt" : "2017-09-07T21:54:14Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f27418f48ada95a1cf19c98a8d1116f97f86ec5",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +2523,2527 @@/*\n * Handles fields transfer.  To call this, at least one of the dtypes\n * must have fields. Does not take care of object<->structure conversion\n */\nstatic int"
  },
  {
    "id" : "afb28dd4-e13e-491e-a009-dc22c394dd60",
    "prId" : 7664,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e064f1a-bf0e-4c32-8e00-25ff4c03c0e0",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Might this be changed to a call to `PyArray_GetStridedZeroPadCopyFn`? I would imagine that would be a small performance gain over using the element-wise `copy_swap` function.\n",
        "createdAt" : "2016-05-29T23:41:19Z",
        "updatedAt" : "2016-06-01T16:43:45Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "0279a603-f515-4d76-a3be-70a968dc27cc",
        "parentId" : "3e064f1a-bf0e-4c32-8e00-25ff4c03c0e0",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Sure, can change, not sure it should be faster, since I would expect this uses the copyswapn function and not copyswap which might actually be quicker, but did not check.\n",
        "createdAt" : "2016-05-30T08:52:53Z",
        "updatedAt" : "2016-06-01T16:43:45Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d6e3f480e228f3cbe95fd475fcc2e8e3f61736d",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +3525,3529 @@        return wrap_copy_swap_function(aligned,\n                                       src_stride, dst_stride, dtype, 1,\n                                       outstransfer, outtransferdata);\n    }\n    /* If it's not complex, one swap */"
  },
  {
    "id" : "81592993-badc-40b9-b4ba-1319bc1d1c19",
    "prId" : 7664,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07edfcc6-3e00-46a4-9420-7bb65e9a3b8f",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Here too, I think we can call `PyArray_GetStridedZeroPadCopyFn` instead. \n\nThat way, like before, `wrap_copy_swap_function` is only used for custom dtypes.\n",
        "createdAt" : "2016-05-29T23:43:36Z",
        "updatedAt" : "2016-06-01T16:43:45Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d6e3f480e228f3cbe95fd475fcc2e8e3f61736d",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +3682,3686 @@                                    src_stride, dst_stride,\n                                    src_dtype, 1,\n                                    out_stransfer, out_transferdata);\n                }\n            case NPY_VOID:"
  },
  {
    "id" : "a0a7e00d-42f4-4798-bb71-f8d674d9cae2",
    "prId" : 10898,
    "prUrl" : "https://github.com/numpy/numpy/pull/10898#pullrequestreview-123593673",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81fbad09-f580-41a2-a8f3-5214d328d4b0",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Indentation needs fix.",
        "createdAt" : "2018-05-25T21:17:07Z",
        "updatedAt" : "2018-05-25T21:17:07Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "3a90c4bb-2271-4043-8e2c-86781f6ebfde",
        "parentId" : "81fbad09-f580-41a2-a8f3-5214d328d4b0",
        "authorId" : "0b728713-4f12-4572-88d8-2632269b9f0b",
        "body" : "I had meant to have this align with col 13 since it's part of the conjunction `&&` operands, so that it should align with the beginning of the parentheses (and `!PyDataType_REFCHK(...`l).\r\n\r\nIf you want, I can move this line up to make the continuation more evident?",
        "createdAt" : "2018-05-25T21:34:18Z",
        "updatedAt" : "2018-05-25T21:34:18Z",
        "lastEditedBy" : "0b728713-4f12-4572-88d8-2632269b9f0b",
        "tags" : [
        ]
      },
      {
        "id" : "7f199130-4b2a-406e-a07f-6213b5913717",
        "parentId" : "81fbad09-f580-41a2-a8f3-5214d328d4b0",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "NVM, I misread the code.",
        "createdAt" : "2018-05-27T19:45:48Z",
        "updatedAt" : "2018-05-27T19:45:48Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "682403ef7e41f3ec171f10e4cbf317225312fd06",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +3471,3475 @@            !PyDataType_REFCHK(src_dtype) && !PyDataType_REFCHK(dst_dtype) &&\n            ( !PyDataType_HASFIELDS(dst_dtype) ||\n              is_dtype_struct_simple_unaligned_layout(dst_dtype)) &&\n            is_builtin) {\n        /*"
  },
  {
    "id" : "e13eaab1-0f9d-44c1-b41d-3d5ea92116f5",
    "prId" : 12266,
    "prUrl" : "https://github.com/numpy/numpy/pull/12266#pullrequestreview-168689739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f98c9865-c6ef-437f-b7f7-c50120525a63",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Needs to only be conditionally compiled to avoid `warning: ???_safe_print??? defined but not used`",
        "createdAt" : "2018-10-26T06:49:03Z",
        "updatedAt" : "2018-10-31T04:51:46Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "9751469b6ded12987667a147f7811adebab7370b",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +65,69 @@}\n#endif\n\n/*\n * Returns a transfer function which DECREFs any references in src_type."
  },
  {
    "id" : "c2df0880-e3e6-4faa-bf83-4369ad7b3422",
    "prId" : 15800,
    "prUrl" : "https://github.com/numpy/numpy/pull/15800#pullrequestreview-379073478",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be5260f2-59de-4a4f-871f-2fa62686199c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I suppose the idea of this was to avoid paying the cost of the branch during casting. However, it only runs for every `NPY_LOWLEVEL_BUFFER_BLOCKSIZE == 128` elements, so that's probably not a big deal.",
        "createdAt" : "2020-03-22T19:54:11Z",
        "updatedAt" : "2020-03-24T02:40:41Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "4266ecec-c721-4098-8921-6380d6a6461e",
        "parentId" : "be5260f2-59de-4a4f-871f-2fa62686199c",
        "authorId" : "dd9bf30c-e116-437c-8b08-7f45d7ed2992",
        "body" : "Yeah, and it's easily predicted too (if the compiler doesn't take care of it already).",
        "createdAt" : "2020-03-23T00:18:02Z",
        "updatedAt" : "2020-03-24T02:40:41Z",
        "lastEditedBy" : "dd9bf30c-e116-437c-8b08-7f45d7ed2992",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ceb5428ad6d97f71295815c2d3d1d785affa3dd",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +406,410 @@                memset(bufferout, 0,\n                        dst_itemsize*NPY_LOWLEVEL_BUFFER_BLOCKSIZE);\n            }\n            wrapped(bufferout, dst_itemsize, bufferin, inner_src_itemsize,\n                                    NPY_LOWLEVEL_BUFFER_BLOCKSIZE,"
  },
  {
    "id" : "3f2fb091-3739-4bd4-b1a6-1c7d748d68a1",
    "prId" : 15800,
    "prUrl" : "https://github.com/numpy/numpy/pull/15800#pullrequestreview-379613044",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f4c88f8-32eb-4f8a-8911-f956dce4074c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Documentation comment above should be updated with this new argument",
        "createdAt" : "2020-03-23T16:41:57Z",
        "updatedAt" : "2020-03-24T02:40:41Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ceb5428ad6d97f71295815c2d3d1d785affa3dd",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +456,460 @@            PyArray_StridedUnaryOp *tobuffer, NpyAuxData *todata,\n            PyArray_StridedUnaryOp *frombuffer, NpyAuxData *fromdata,\n            PyArray_StridedUnaryOp *wrapped, NpyAuxData *wrappeddata,\n            int init_dest,\n            int out_needs_api,"
  },
  {
    "id" : "30027521-1cf5-41ca-9cf1-3577f08ab677",
    "prId" : 15827,
    "prUrl" : "https://github.com/numpy/numpy/pull/15827#pullrequestreview-380621045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd84421e-5813-4554-9b03-9aead0c0524c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```suggestion\r\n        /* The caller does not know if a previous call resulted in a python exception.\r\n         * Much of the Python API is unsafe while an exception is in flight, so just\r\n         * skip all the work. Someone higher in the call stack will check for errors\r\n         * and propagate them\r\n         */\r\n        if (out_needs_api && PyErr_Occurred()) {\r\n``\r\nReword as desired.",
        "createdAt" : "2020-03-24T18:28:04Z",
        "updatedAt" : "2020-03-24T22:45:07Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "efda92a2-508d-4129-ac29-098cdacc7542",
        "parentId" : "cd84421e-5813-4554-9b03-9aead0c0524c",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "80 column formatting...",
        "createdAt" : "2020-03-24T19:11:42Z",
        "updatedAt" : "2020-03-24T22:45:07Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "2b86c32a-a993-496e-a51b-9fdefb9add49",
        "parentId" : "cd84421e-5813-4554-9b03-9aead0c0524c",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "github needs a ruler in their editor....",
        "createdAt" : "2020-03-24T19:13:38Z",
        "updatedAt" : "2020-03-24T22:45:07Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf325cdf55b26dde144974871cd0ef0cb86c7eed",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +405,409 @@         * will check for errors and propagate them.\n         */\n        if (out_needs_api && PyErr_Occurred()) {\n            return;\n        }"
  },
  {
    "id" : "9e9cf882-5d7e-4ac2-b9b4-b5656ee3fc84",
    "prId" : 17863,
    "prUrl" : "https://github.com/numpy/numpy/pull/17863#pullrequestreview-556561909",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4dc90034-4b8f-41ac-9398-cf5ca9cbb774",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Is this covered by a test? Maybe worth trying to think of one that has a use for this code path?",
        "createdAt" : "2020-12-21T17:20:11Z",
        "updatedAt" : "2021-01-08T15:52:50Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "c89d8e87-c10e-4cdf-9e11-a60ddbdc835b",
        "parentId" : "4dc90034-4b8f-41ac-9398-cf5ca9cbb774",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yeah, the only way to reach this is using `np.nditer(...).copy()` probably, but can add tests.\r\n\r\nAnything else that jumps at you aside from a few additional tests?  Most of the error paths (aside those in `array_method.c`) are probably (almost) impossible to tests, though.",
        "createdAt" : "2020-12-21T17:42:38Z",
        "updatedAt" : "2021-01-08T15:52:50Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "92764e76-d6ae-4fcf-b5cf-205888ca838b",
        "parentId" : "4dc90034-4b8f-41ac-9398-cf5ca9cbb774",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "No, it all looks quite straightforward although repetitive. It would be nice to try to refactor this somehow, but I don't see how. There is not much that needs careful refcount considerations or malloc/free checking, since it is mostly logic to assign function pointers.\r\n\r\nOne thing to think about would be to split the large files into smaller pieces.",
        "createdAt" : "2020-12-21T17:55:53Z",
        "updatedAt" : "2021-01-08T15:52:50Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "90f4b0838b44fabd89bcdd128d5707e7526d9d94",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +203,207 @@        }\n    }\n    return (NpyAuxData *)res;\n}\n"
  }
]