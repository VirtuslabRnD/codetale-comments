[
  {
    "id" : "eb094b24-fe7c-4e67-af02-94d06807e2fb",
    "prId" : 3514,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce60aabd-58cc-46a8-91c6-59e6ded69e6d",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So `Py_None` will now be broadcast?\n",
        "createdAt" : "2013-12-22T22:40:00Z",
        "updatedAt" : "2014-05-04T19:06:24Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "1e05a780-dc66-4ccb-9cf9-970593cb77f5",
        "parentId" : "ce60aabd-58cc-46a8-91c6-59e6ded69e6d",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yes. Should ping the list before about all of these changes, I guess.\n",
        "createdAt" : "2013-12-22T23:07:17Z",
        "updatedAt" : "2014-05-04T19:06:24Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f40831a53ff2d572f338b1445e40bc88a1167ce7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1293,1297 @@    case Py_EQ:\n        if (other == Py_None) {\n            if (DEPRECATE_FUTUREWARNING(\"comparison to `None` will result in \"\n                    \"an elementwise object comparison in the future.\") < 0) {\n                return NULL;"
  },
  {
    "id" : "e8627c25-bf8e-4fa5-9e8e-bf8a85465e6a",
    "prId" : 3655,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef0bc557-853b-401b-b05e-c106937a10e0",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK, looks like `PyObject_Init` raises an error when `obj == NULL`.\n",
        "createdAt" : "2013-08-30T13:12:06Z",
        "updatedAt" : "2013-08-30T13:12:06Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0167ac1daa6adb058d646efd0790ce129059116a",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1661,1665 @@    /* nitems will always be 0 */\n    PyObject *obj = PyArray_malloc(type->tp_basicsize);\n    PyObject_Init(obj, type);\n    return obj;\n}"
  },
  {
    "id" : "fa3a0b86-28d2-4872-acb3-8d4b2572b17d",
    "prId" : 4248,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a53a1a6-20d1-4dec-afe0-7c698f4abefe",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I assume this can't be inline, so a note to that effect would be helpful.\n",
        "createdAt" : "2014-02-02T05:15:44Z",
        "updatedAt" : "2014-02-02T05:15:44Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "d71399bf-d6af-4cfe-945c-26acb12e6e82",
        "parentId" : "5a53a1a6-20d1-4dec-afe0-7c698f4abefe",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "it can if the compiler is not dumb and produces wrong code.\nthe function is referenced in a non-inlineable spot so it must emit a body.\n",
        "createdAt" : "2014-02-02T15:38:24Z",
        "updatedAt" : "2014-02-02T15:38:24Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "a7dd6cfb-4f8d-4bde-acb9-bce482106791",
        "parentId" : "5a53a1a6-20d1-4dec-afe0-7c698f4abefe",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Ah, right.\n",
        "createdAt" : "2014-02-02T16:46:33Z",
        "updatedAt" : "2014-02-02T16:46:33Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9ebefec819ec3c193d4763d9f995c053fee58a3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1685,1689 @@}\n\nstatic PyObject *\narray_free(PyObject * v)\n{"
  },
  {
    "id" : "998a91ba-0994-4cfd-95bb-dbf9ab50149b",
    "prId" : 5124,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3cf01bfc-60ce-4ee5-b6b1-fd716c9a0c77",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I assume `op` is `Py_DECREF`ed in the `end` cleanup?\n",
        "createdAt" : "2014-09-30T02:03:49Z",
        "updatedAt" : "2014-09-30T02:03:49Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "f3a163c2-6d0d-4aa3-87fe-f35195d4e59a",
        "parentId" : "3cf01bfc-60ce-4ee5-b6b1-fd716c9a0c77",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "nvm, I see it down below.\n",
        "createdAt" : "2014-09-30T02:06:39Z",
        "updatedAt" : "2014-09-30T02:06:39Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bfc4bf4421a84eec6e17ddf09a3d2beacf4ea4b7",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +478,482 @@        if (sp == NULL) {\n            ret = -1;\n            goto end;\n        }\n        ostring = PyString_AsString(sp);"
  },
  {
    "id" : "4915e98c-cdfc-4cae-8605-e72e7b0f7c05",
    "prId" : 9167,
    "prUrl" : "https://github.com/numpy/numpy/pull/9167#pullrequestreview-39916435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "534cba1d-ea76-46e1-9114-d1c1dbb48342",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Don't we need this in `NE` too?",
        "createdAt" : "2017-05-23T23:52:17Z",
        "updatedAt" : "2017-05-24T00:44:45Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "fe56d093-2feb-417c-a7c7-ccbccb66f616",
        "parentId" : "534cba1d-ea76-46e1-9114-d1c1dbb48342",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Geez, I'm not being very bright today! And that only shows that my test is wrong too.  Will fix!",
        "createdAt" : "2017-05-24T00:41:06Z",
        "updatedAt" : "2017-05-24T00:44:45Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "4a8728b5-9de6-46cb-99bb-d0f000608374",
        "parentId" : "534cba1d-ea76-46e1-9114-d1c1dbb48342",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "How did the test change?",
        "createdAt" : "2017-05-24T01:40:54Z",
        "updatedAt" : "2017-05-24T01:40:54Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5e545045-46ac-4bd7-be0b-26c564124ed1",
        "parentId" : "534cba1d-ea76-46e1-9114-d1c1dbb48342",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "My initial test did not even use a structured array for the comparison, so it passed trivially! (I did check that the current test fails on master)",
        "createdAt" : "2017-05-24T02:43:36Z",
        "updatedAt" : "2017-05-24T02:43:36Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "48b4acac9f3521bd52dd411dce6c18372a5960c4",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1346,1350 @@        break;\n    case Py_EQ:\n        RICHCMP_GIVE_UP_IF_NEEDED(obj_self, other);\n        /*\n         * The ufunc does not support void/structured types, so these"
  },
  {
    "id" : "aa0a3f14-d4a1-4297-80c7-8238260850b3",
    "prId" : 9639,
    "prUrl" : "https://github.com/numpy/numpy/pull/9639#pullrequestreview-74934758",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0af7f135-2374-46fa-b20c-ca53723a6a55",
        "parentId" : null,
        "authorId" : null,
        "body" : "This seems odd to me. Why are we only deprecating this for PyPy? And IIUC, `DEPRECATE` should always be called.",
        "createdAt" : "2017-11-06T22:43:11Z",
        "updatedAt" : "2017-11-08T19:34:43Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "cf67898b-2bf2-4f8a-8ce8-45316ab10916",
        "parentId" : "0af7f135-2374-46fa-b20c-ca53723a6a55",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "See the design [comment](https://github.com/numpy/numpy/pull/9639#issue-254637365)  at the top of the pull request, and issue #9714 which covers the problem in depth. We cannot yet issue this warning because it will be emitted by ``nditer( ..., [updateifcopy], ...)``, with no option to silence it. Once this pull request lands, I will turn my attention to solving issue #9714, hopefully by choosing one of the alternatives mentioned there",
        "createdAt" : "2017-11-07T21:58:16Z",
        "updatedAt" : "2017-11-08T19:34:43Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "31b595f0-eb55-4ab3-a047-4e6248a6e457",
        "parentId" : "0af7f135-2374-46fa-b20c-ca53723a6a55",
        "authorId" : null,
        "body" : "Either the warning can be issued or it cannot. If it cannot, then surely pypy will have the same problem?",
        "createdAt" : "2017-11-07T22:00:35Z",
        "updatedAt" : "2017-11-08T19:34:43Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "ddd2a15e-eb83-45a1-97ce-a94d99dbded6",
        "parentId" : "0af7f135-2374-46fa-b20c-ca53723a6a55",
        "authorId" : null,
        "body" : "Ordinarily, I would say that you should rename the function so that internal users can use it without emitting the warning but external users cannot. But that may increase merge conflicts, and I know what it's like to be worried about having to rebase.",
        "createdAt" : "2017-11-07T22:04:04Z",
        "updatedAt" : "2017-11-08T19:34:43Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "5a07388e-de36-4e9e-8a4d-9d744f3b2744",
        "parentId" : "0af7f135-2374-46fa-b20c-ca53723a6a55",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "The PR also moves all the internal users it can over to the new API, so there's no need for a no-warning version of the old API.",
        "createdAt" : "2017-11-07T22:07:51Z",
        "updatedAt" : "2017-11-08T19:34:43Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "0d092063-b67c-4325-b011-4f07b89794c9",
        "parentId" : "0af7f135-2374-46fa-b20c-ca53723a6a55",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Until issue #9714 is resolved, ``npyiter_allocate_arrays()`` in ``nditer_constr.c`` still uses the old interface (i.e. calls this function), so yes, there is still a need for a no-warning version of the old API on CPython\r\n\r\nIt is hard enough to make this enormous change in NumPy without adding in yet another dimension of pain in fixing #9714, which will require [engaging with the community](http://numpy-discussion.10968.n7.nabble.com/nditer-and-updateifcopy-semantics-advice-needed-td44739.html) to try to determine if and how to fix it \r\n\r\nHowever, IMO in the mean time, users of PyPy should be warned that using the semantics in #9714 on PyPy is not well supported, and could cause wrong answers. It seems this compromise is the least evil of all the alternatives.",
        "createdAt" : "2017-11-07T22:28:25Z",
        "updatedAt" : "2017-11-08T19:34:43Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "e0bad609-c7ef-45a6-94a5-e4dc8583923a",
        "parentId" : "0af7f135-2374-46fa-b20c-ca53723a6a55",
        "authorId" : null,
        "body" : "> It is hard enough to make this enormous change in NumPy without adding in yet another dimension of pain in fixing #9714, which will require engaging with the community to try to determine if and how to fix it\r\n\r\n+1. If this requires additional refactoring to avoid the warning, I don't think you should do it for now.\r\n\r\n> However, IMO in the mean time, users of PyPy should be warned that using the semantics in #9714 on PyPy is not well supported, and could cause wrong answers. It seems this compromise is the least evil of all the alternatives.\r\n\r\nI disagree. I think we should leave the warning as a comment for now because there are still internal users. I don't think numpy should try to behave differently for a different implementation.",
        "createdAt" : "2017-11-07T22:31:44Z",
        "updatedAt" : "2017-11-08T19:34:43Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "252471dc-bda5-4b72-b823-e8bd58011e18",
        "parentId" : "0af7f135-2374-46fa-b20c-ca53723a6a55",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "@xoviat: also logic on warning on PyPy first is that right now, the remaining `nditer` case gives incorrect results on PyPy but not on CPython. So we don't want to hassle people on CPython until they have an alternative to move to, but on PyPy you probably want to know your code is broken even if there isn't a clear alternative.",
        "createdAt" : "2017-11-07T22:36:01Z",
        "updatedAt" : "2017-11-08T19:34:43Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "411c22a9-1dce-4ed3-ad0c-280c81fd82f5",
        "parentId" : "0af7f135-2374-46fa-b20c-ca53723a6a55",
        "authorId" : null,
        "body" : "I suppose it's fine as it is then.",
        "createdAt" : "2017-11-07T22:39:14Z",
        "updatedAt" : "2017-11-08T19:34:43Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "dcf304fc76eb73597bf5b289a88fe50b1565ce91",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +92,96 @@  #endif\n#endif\n\n#ifdef DEPRECATE_UPDATEIFCOPY \n    /* TODO: enable this once a solution for UPDATEIFCOPY"
  },
  {
    "id" : "79ed7943-779d-437f-a237-132317b3995f",
    "prId" : 9639,
    "prUrl" : "https://github.com/numpy/numpy/pull/9639#pullrequestreview-85250364",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c631293a-fcea-437e-9478-f0ed2ad05c23",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is not correct usage - the argument should be the _context_ - the message is already printed along with the exception type. Right now, the message is printed twice.\r\n\r\nOff the top of my head, `(PyObject *)&PyArray_Type` would be a safe context to pass. In theory you could pass `self`, but calling `array_repr` sounds a little too risky.\r\n\r\nif nothing else, passing `NULL` would cause the message alone to be printed.",
        "createdAt" : "2017-12-21T09:05:02Z",
        "updatedAt" : "2017-12-21T09:05:03Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "4e7dad40-630c-4719-80b6-ed2098359973",
        "parentId" : "c631293a-fcea-437e-9478-f0ed2ad05c23",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "If we used the py3 `tp_finalize` slot, then we could pass `ndarray.__del__` as the context.",
        "createdAt" : "2017-12-21T09:11:11Z",
        "updatedAt" : "2017-12-21T09:11:11Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "aabe100d-7865-4fa2-8ff7-0a492ae09aec",
        "parentId" : "c631293a-fcea-437e-9478-f0ed2ad05c23",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "> Right now, the message is printed twice\r\n\r\nThis code should only run if ``DEPRECATE`` (which is [``PyErr_WarnEx``](https://docs.python.org/3/c-api/exceptions.html#issuing-warnings) ) raises an exeption, in which case the exception will be ignored since this is a deallocator. In order to be sure the error is emitted, I wanted to print it to ``stderr``, and the documentation seems to indicate that is what [``PyErr_WriteUnraisable``](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_WriteUnraisable) does. Should I print to stderr and then emit ``PyErr_WriteUnraisable`` as well, or simply skip it altogether? Since there was no example in NumPy I looked at how ``PyErr_WriteUnraisable`` is used in Pandas as a hint.",
        "createdAt" : "2017-12-21T20:45:50Z",
        "updatedAt" : "2017-12-21T20:45:50Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "edad7071-fbbd-402f-852c-20e71e7ef553",
        "parentId" : "c631293a-fcea-437e-9478-f0ed2ad05c23",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> the documentation seems to indicate that is what PyErr_WriteUnraisable does\r\n\r\nCorrect, but it does this by looking at `sys.exc_info`, not by looking at its argument\r\n",
        "createdAt" : "2017-12-21T20:48:16Z",
        "updatedAt" : "2017-12-21T20:48:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b1e14714-51d4-4d1a-8f73-94b7290fb632",
        "parentId" : "c631293a-fcea-437e-9478-f0ed2ad05c23",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "I think I understand, the entire ``if()`` clause should be replaced by the one-liner \r\n```\r\nPyErr_WriteUnraisable((PyObject *)&PyArray_Type);\r\n```\r\nHow should I proceed since this pull request has been merged? Issue another pull request based off HEAD?",
        "createdAt" : "2017-12-22T06:48:50Z",
        "updatedAt" : "2017-12-22T06:48:50Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "8778526c-8516-4eda-8ef2-a5c5ea52d5f5",
        "parentId" : "c631293a-fcea-437e-9478-f0ed2ad05c23",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "hmm, it seems cpython prints both the context from ``PyErr_Fetch`` and ``repr(obj)`` for a call to ``PyErr_WriteUnrasiable`` but PyPy only prints the ``repr(obj)`` without the context. I will file an issue there\r\n\r\nedit: wrong, PyPy _does_ do the right thing, and double-prints the current message as well",
        "createdAt" : "2017-12-22T06:54:52Z",
        "updatedAt" : "2017-12-22T06:57:02Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "e2ffc89f-bb95-487a-b1d0-a580083527c5",
        "parentId" : "c631293a-fcea-437e-9478-f0ed2ad05c23",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'd personally go for a new PR based on the last commit of this PR, but going off head would work fine too.",
        "createdAt" : "2017-12-22T07:00:29Z",
        "updatedAt" : "2017-12-22T07:00:30Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcf304fc76eb73597bf5b289a88fe50b1565ce91",
    "line" : 173,
    "diffHunk" : "@@ -1,1 +495,499 @@#endif\n                if (s) {\n                    PyErr_WriteUnraisable(s);\n                    Py_DECREF(s);\n                }"
  },
  {
    "id" : "0da3c7c1-7128-4d4f-bc7d-351c62ed61cf",
    "prId" : 9998,
    "prUrl" : "https://github.com/numpy/numpy/pull/9998#pullrequestreview-114184198",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "601a8d82-abf3-4ca1-ab9b-cb9969e7171f",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think this needs an additional comment for the non-pypy deprecation",
        "createdAt" : "2018-04-21T21:25:29Z",
        "updatedAt" : "2018-04-21T21:25:29Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "48cef8ae-31d7-4a4d-b805-980180a50808",
        "parentId" : "601a8d82-abf3-4ca1-ab9b-cb9969e7171f",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "What would you suggest? Leaving the \"GH7054\" issue reference as a hint?",
        "createdAt" : "2018-04-21T21:28:14Z",
        "updatedAt" : "2018-04-21T21:28:14Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "8fd788f7-4714-4215-898e-eae815b8ddbc",
        "parentId" : "601a8d82-abf3-4ca1-ab9b-cb9969e7171f",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```\r\n/* 2017-11-10 1.14 (only in pypy) */\r\n/* 2018-04-21 1.15 (all python implementations) */\r\n```",
        "createdAt" : "2018-04-21T21:41:27Z",
        "updatedAt" : "2018-04-21T21:41:28Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "36d73296-0afa-4b76-ac5b-f05532d1c81e",
        "parentId" : "601a8d82-abf3-4ca1-ab9b-cb9969e7171f",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "fixed",
        "createdAt" : "2018-04-21T21:55:57Z",
        "updatedAt" : "2018-04-21T21:55:58Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa9a74165479142e2c1671f871fe7c860146cd52",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +87,91 @@{\n    int ret;\n    /* 2017-Nov-10 1.14 */\n    if (DEPRECATE(\"PyArray_SetUpdateIfCopyBase is deprecated, use \"\n              \"PyArray_SetWritebackIfCopyBase instead, and be sure to call \""
  },
  {
    "id" : "6087f860-2f24-45a6-bd3e-4ad13837d94a",
    "prId" : 10257,
    "prUrl" : "https://github.com/numpy/numpy/pull/10257#pullrequestreview-85261116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "587a1582-b74b-4b04-b0cb-0f8eca23ebe8",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think you might need to actually clear the error before calling `PyArray_ResolveWritebackIfCopy`, in case the array is an object dtype, and `PyArray_ResolveWritebackIfCopy` causes refcounts to drop to zero which can run arbitrary python code",
        "createdAt" : "2017-12-22T07:33:53Z",
        "updatedAt" : "2017-12-22T08:59:01Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b6b5adbb-da41-4876-b04d-d170de3820b4",
        "parentId" : "587a1582-b74b-4b04-b0cb-0f8eca23ebe8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Although I suppose that's an unrelated fix",
        "createdAt" : "2017-12-22T07:46:06Z",
        "updatedAt" : "2017-12-22T08:59:01Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "26da9624-a043-4cb9-a98b-9aea2c85ba84",
        "parentId" : "587a1582-b74b-4b04-b0cb-0f8eca23ebe8",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "In the implementation of ``PyErr_WriteUnraisable`` it calls ``PyErr_Fetch`` which clears the error state",
        "createdAt" : "2017-12-22T08:31:17Z",
        "updatedAt" : "2017-12-22T08:59:01Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f0bd24d1296209a9f6830705f874cf774167fa5",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +477,481 @@            if (DEPRECATE(msg) < 0) {\n                /* dealloc cannot raise an error, best effort try to write\n                   to stderr and clear the error\n                */\n                PyErr_WriteUnraisable((PyObject *)&PyArray_Type);"
  }
]