[
  {
    "id" : "ee7a3309-381f-426c-a068-2481817db506",
    "prId" : 87,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3eebe526-c7e1-4d3d-8ef7-9180f7b7ba23",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What's the difference between generic and default units?\n",
        "createdAt" : "2011-06-15T05:25:20Z",
        "updatedAt" : "2011-06-16T19:50:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "3d4246cf-282a-4a7f-83af-92c7fab0acb0",
        "parentId" : "3eebe526-c7e1-4d3d-8ef7-9180f7b7ba23",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "Here's the email thread I created about this:\n\nhttp://mail.scipy.org/pipermail/numpy-discussion/2011-June/056718.html\n\nI'm really liking the resulting behavior this is giving while I'm coding all the datetime tests and playing around with it. The change was to introduce generic units, and to make them the default.\n",
        "createdAt" : "2011-06-15T15:24:39Z",
        "updatedAt" : "2011-06-16T19:50:36Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7d59aef203ebf25b268ceaccfa1be45237b0df",
    "line" : 373,
    "diffHunk" : "@@ -1,1 +1130,1134 @@    char *substr = metastr, *substrend = NULL;\n\n    /* Treat the empty string as generic units */\n    if (len == 0) {\n        out_meta->base = NPY_FR_GENERIC;"
  },
  {
    "id" : "fd1d8349-474c-4728-84d7-d00b72f2f280",
    "prId" : 87,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b61a842a-6d36-42e3-b2d9-7fa5c1b714f2",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Safe cast?\n",
        "createdAt" : "2011-06-15T05:31:55Z",
        "updatedAt" : "2011-06-16T19:50:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a97315f5-728c-43b1-a44c-bc3ac1b3382a",
        "parentId" : "b61a842a-6d36-42e3-b2d9-7fa5c1b714f2",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "I'm not sure I understand your question. For the promotion, it returns a common type, which may additionally be checked by other code that it satisfies a casting condition. In datetime promotion, I'm causing promotion across a nonlinear unit boundary to fail, but that's independent of the casting rules.\n",
        "createdAt" : "2011-06-15T15:31:49Z",
        "updatedAt" : "2011-06-16T19:50:36Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7d59aef203ebf25b268ceaccfa1be45237b0df",
    "line" : 776,
    "diffHunk" : "@@ -1,1 +1764,1768 @@    /* Fill the 'out_meta' values */\n    out_meta->base = base;\n    out_meta->num = (int)num;\n    if (out_meta->num <= 0 || num != (npy_uint64)out_meta->num) {\n        goto units_overflow;"
  },
  {
    "id" : "42612822-4b06-4aaa-ba2f-bb525db9f34e",
    "prId" : 87,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca59aa29-9c6d-4acb-b302-f031994966ae",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I assume the 'now' concept is documented somewhere.\n",
        "createdAt" : "2011-06-15T05:41:36Z",
        "updatedAt" : "2011-06-16T19:50:36Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c36808d6-e492-48b4-9a4a-2490dc36a9c9",
        "parentId" : "ca59aa29-9c6d-4acb-b302-f031994966ae",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "Not yet, but writing documentation is on my todo list.\n",
        "createdAt" : "2011-06-15T15:32:17Z",
        "updatedAt" : "2011-06-16T19:50:36Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7d59aef203ebf25b268ceaccfa1be45237b0df",
    "line" : 1117,
    "diffHunk" : "@@ -1,1 +2452,2456 @@        PyArray_DatetimeMetaData meta;\n\n        /* 'now' only works for units of hours or smaller */\n        if (unit != -1 && unit < NPY_FR_h) {\n            PyErr_SetString(PyExc_ValueError,"
  },
  {
    "id" : "9c3d9983-30ac-4a7e-ba25-17d5dfd48ee1",
    "prId" : 10231,
    "prUrl" : "https://github.com/numpy/numpy/pull/10231#pullrequestreview-90694316",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48c675b4-1a94-4b69-bbdc-fcdf5e374966",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "nit: Not a huge fan of this type of linewrapping, as it always gets messed up when functions are renamed.",
        "createdAt" : "2018-01-23T02:16:41Z",
        "updatedAt" : "2018-01-23T18:30:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e17140d2-9bfb-4d46-b000-5e5c22b72ae3",
        "parentId" : "48c675b4-1a94-4b69-bbdc-fcdf5e374966",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'm not a big fan either, but it is PEP7 and pretty common in the NumPy C code. The NumPy C style guide is more forgiving\r\n```\r\n* Breaking long lines: if you can, break after commas in the\r\n  outermost argument list.  Always indent continuation lines\r\n  appropriately, e.g., ::\r\n\r\n        PyErr_SetString(PyExc_TypeError,\r\n                \"Oh dear, you messed up.\");\r\n\r\n  Here appropriately means at least two tabs. It isn't necessary to\r\n  line everything up with the opening parenthesis of the function\r\n  call.\r\n```",
        "createdAt" : "2018-01-23T02:32:54Z",
        "updatedAt" : "2018-01-23T18:30:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "8fa418de-f09c-481e-b8a2-392e0744689f",
        "parentId" : "48c675b4-1a94-4b69-bbdc-fcdf5e374966",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think I prefer the two tabs approach, as\r\n\r\n    PyErr_SetString(\r\n            PyExc_TypeError,\r\n            \"Oh dear, you messed up.\");\r\n\r\nAlthough for calls to python builtins which won't change, it doesn't matter. Our internal functions do seem to change name often, especially when we need an extended API which is wrapped by the external C api.",
        "createdAt" : "2018-01-23T02:38:17Z",
        "updatedAt" : "2018-01-23T18:30:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ec856d3ac713a7af3d4a6d14957d50daa075d68",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +780,784 @@    out_meta->base = parse_datetime_unit_from_string(substr,\n                                                     substrend - substr,\n                                                     metastr);\n    if (out_meta->base == NPY_FR_ERROR ) {\n        return -1;"
  },
  {
    "id" : "a57901aa-1683-4561-97d0-1a5eae577bb3",
    "prId" : 11852,
    "prUrl" : "https://github.com/numpy/numpy/pull/11852#pullrequestreview-166209546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dfcf4bca-625e-4843-8109-17332792f62a",
        "parentId" : null,
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Move this branch up, next to the branch handling \"raw integers\" on line 2661?",
        "createdAt" : "2018-10-18T16:37:09Z",
        "updatedAt" : "2018-10-18T16:37:16Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "58fcf13e-1d4a-445c-82c7-c03eacf10e4a",
        "parentId" : "dfcf4bca-625e-4843-8109-17332792f62a",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "This causes test failures in my hands -- I'm guessing other types of inputs get drawn in to the branch too early if moved up there.",
        "createdAt" : "2018-10-18T17:11:59Z",
        "updatedAt" : "2018-10-18T17:11:59Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "b4c5e2f3-4481-4421-b9eb-021d634ec37f",
        "parentId" : "dfcf4bca-625e-4843-8109-17332792f62a",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Hmm. I bet this is due to https://github.com/numpy/numpy/issues/10685.\r\n\r\nOK then, this looks good to me then.",
        "createdAt" : "2018-10-18T17:27:46Z",
        "updatedAt" : "2018-10-18T17:27:46Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a71482c93c586bbf751f073604fc0e23b106f0d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2846,2850 @@        return 0;\n    }\n    else if (PyArray_IsScalar(obj, Integer)) {\n        /* Use the default unit if none was specified */\n        if (meta->base == NPY_FR_ERROR) {"
  },
  {
    "id" : "f7df942f-89c7-4d96-9acf-a1582d2abad5",
    "prId" : 12624,
    "prUrl" : "https://github.com/numpy/numpy/pull/12624#pullrequestreview-188414626",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "805529dd-514f-43bf-a2ab-81b515cdc145",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "The code above does not seem super pretty, but I am not quite sure that subclasses are not supposed to get a chance here, so `PyObject_GetItem` is no behaviour change I think. Oddly the `datetime` code looks a bit different than the `timedelta` one above.",
        "createdAt" : "2018-12-29T15:42:44Z",
        "updatedAt" : "2019-01-02T19:17:23Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4732c1be2da093711ab544f6e0a302b9d7ee4bcb",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +3833,3837 @@                if (item == NULL) {\n                    return 0;\n                }\n                /*\n                 * NOTE: may need other type checks here in the future"
  }
]