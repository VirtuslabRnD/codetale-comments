[
  {
    "id" : "1ac73bdd-c047-491a-9a26-9658957047c0",
    "prId" : 15508,
    "prUrl" : "https://github.com/numpy/numpy/pull/15508#pullrequestreview-368916728",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab9de588-aa0f-46e7-a19d-1751165db938",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I am happy to just disable this completely for now as well. Or, put a PreliminaryAPI warning here. Which I think would be nice in general, but I am not sure I care too much about right away (it is not like this is a tricky API choice), that `type(instance)()` gives the default instance.\r\n\r\nThe main annoyance about this PR is, how to create the TypeStruct in a way that is hidden from the public.",
        "createdAt" : "2020-02-18T22:25:40Z",
        "updatedAt" : "2020-03-18T23:04:45Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "e2a8f696-f5dc-4af7-a2aa-ffd4450c7d08",
        "parentId" : "ab9de588-aa0f-46e7-a19d-1751165db938",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Warnings are probably annoying, given that you'll then have to filter them out again if you want to use this internally (applies to any preliminary API). How about just putting a big warning in the docs for any such object? And on the Python side, keep it out of the main namespace.",
        "createdAt" : "2020-03-04T13:30:26Z",
        "updatedAt" : "2020-03-18T23:04:45Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "fba53543-3271-48d9-ab83-3e0bf69477b8",
        "parentId" : "ab9de588-aa0f-46e7-a19d-1751165db938",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "True, as this is the python side, for a long time it probably only matters in tests though. `np.dtype` does not really have a test right now. I could change the repr away from `np.dtype[float64]` if you prefer. E.g. just add an underscore to make it \"private\".",
        "createdAt" : "2020-03-04T16:14:01Z",
        "updatedAt" : "2020-03-18T23:04:45Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ea745b41e093fa4c100a074be9392a1b44d1f6f",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +85,89 @@        PyObject *args, PyObject *kwargs)\n{\n    /* TODO: This should allow endianess and possibly metadata */\n    if (self->parametric) {\n        /* reject parametric ones since we would need to get unit, etc. info */"
  },
  {
    "id" : "6eb02431-8870-4e25-8b6a-e6b7159e0939",
    "prId" : 15508,
    "prUrl" : "https://github.com/numpy/numpy/pull/15508#pullrequestreview-434389746",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "301b1e5f-88d5-416e-bedf-5423fabd4b68",
        "parentId" : null,
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "> I do not really care right now how we want to name this in the future. Although I actually like the square bracket idea.\r\n\r\nOnly downside i see is that from a python user perspective this is not a valid class name, and trying to create an object (in the obvious way) will fail. ",
        "createdAt" : "2020-06-19T02:30:41Z",
        "updatedAt" : "2020-06-19T20:01:15Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "2ff18be8-6c27-42d2-9abc-6d10571f659a",
        "parentId" : "301b1e5f-88d5-416e-bedf-5423fabd4b68",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "True... I suppose the metaclass could probably have a `__repr__` slot to fix some of it. Although, it may be that to actually make it copy-pastable, we need a `.` in there, which may mean it can only be done by making everything HeapTypes (which is not totally unreasonable).",
        "createdAt" : "2020-06-19T20:23:25Z",
        "updatedAt" : "2020-06-19T20:23:26Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "0e5a011d-2f1d-453b-aed5-c87061709cde",
        "parentId" : "301b1e5f-88d5-416e-bedf-5423fabd4b68",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "Can we do something like numpy.dtype_%s ? Although this may be a bit ugly and little less self-explanatory of it being a subclass of np.dtype. ",
        "createdAt" : "2020-06-20T00:32:49Z",
        "updatedAt" : "2020-06-20T00:32:50Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "b49ad405-3008-4e00-a207-32b445ce468c",
        "parentId" : "301b1e5f-88d5-416e-bedf-5423fabd4b68",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "We could do various things I guess, but it will be a while before we should seriously consider exposing these in the API, and I think until then, it will be fine to modify the `__repr__` as we like.",
        "createdAt" : "2020-06-20T00:52:16Z",
        "updatedAt" : "2020-06-20T00:52:17Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ea745b41e093fa4c100a074be9392a1b44d1f6f",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +172,176 @@    }\n\n    snprintf(tp_name, name_length, \"numpy.dtype[%s]\", scalar_name);\n\n    PyArray_DTypeMeta *dtype_class = malloc(sizeof(PyArray_DTypeMeta));"
  },
  {
    "id" : "0e14b27a-5f32-4a1e-bb62-efdf7a552761",
    "prId" : 15508,
    "prUrl" : "https://github.com/numpy/numpy/pull/15508#pullrequestreview-433757105",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65d46c7b-25af-4b86-b254-f749d7eb596a",
        "parentId" : null,
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "nit: a comment for this magic number would be great",
        "createdAt" : "2020-06-19T18:58:15Z",
        "updatedAt" : "2020-06-19T20:01:15Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ea745b41e093fa4c100a074be9392a1b44d1f6f",
    "line" : 166,
    "diffHunk" : "@@ -1,1 +164,168 @@        scalar_name = dot + 1;\n    }\n    ssize_t name_length = strlen(scalar_name) + 14;\n\n    char *tp_name = malloc(name_length);"
  },
  {
    "id" : "b45ad489-729e-49bb-97ba-eb3633901b12",
    "prId" : 15508,
    "prUrl" : "https://github.com/numpy/numpy/pull/15508#pullrequestreview-433757105",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fbb12ad-e4da-4abe-897c-76114fbe9261",
        "parentId" : null,
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "this will always raise with the current code right? also this functions like a static type today so this dealloc never actually happens ?\r\n",
        "createdAt" : "2020-06-19T19:16:26Z",
        "updatedAt" : "2020-06-19T20:01:15Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ea745b41e093fa4c100a074be9392a1b44d1f6f",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +17,21 @@dtypemeta_dealloc(PyArray_DTypeMeta *self) {\n    /* Do not accidentally delete a statically defined DType: */\n    assert(((PyTypeObject *)self)->tp_flags & Py_TPFLAGS_HEAPTYPE);\n\n    Py_XDECREF(self->scalar_type);"
  },
  {
    "id" : "788d1f32-b786-4eda-8cc0-82d90dbe966b",
    "prId" : 15508,
    "prUrl" : "https://github.com/numpy/numpy/pull/15508#pullrequestreview-434323948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c1da335-affa-41c0-b330-8b67c5e0636a",
        "parentId" : null,
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "nit: looks like this was added for debugging ?",
        "createdAt" : "2020-06-19T19:25:42Z",
        "updatedAt" : "2020-06-19T20:01:15Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "dc90b8d1-efe9-487d-9a4b-d0ee90d1c7b9",
        "parentId" : "7c1da335-affa-41c0-b330-8b67c5e0636a",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Thanks for that and the other comments.  This one was intentional, because I thought if we actually start using it, we should check that it actually works correctly :).",
        "createdAt" : "2020-06-19T20:24:34Z",
        "updatedAt" : "2020-06-19T20:24:34Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ea745b41e093fa4c100a074be9392a1b44d1f6f",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +73,77 @@     * defined types). It should be revised at that time.\n     */\n    assert(0);\n    assert(!type->legacy && (PyTypeObject *)type != &PyArrayDescr_Type);\n    Py_VISIT(type->singleton);"
  },
  {
    "id" : "d6eecee7-dbee-4a46-a652-db2efd335fea",
    "prId" : 15508,
    "prUrl" : "https://github.com/numpy/numpy/pull/15508#pullrequestreview-433757105",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1aaec2f-e6ed-4cda-b3d9-71a5ea8be8af",
        "parentId" : null,
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "should this also be hidden ?",
        "createdAt" : "2020-06-19T19:38:27Z",
        "updatedAt" : "2020-06-19T20:01:15Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ea745b41e093fa4c100a074be9392a1b44d1f6f",
    "line" : 246,
    "diffHunk" : "@@ -1,1 +244,248 @@    {\"_abstract\",\n        T_BYTE, offsetof(PyArray_DTypeMeta, abstract), READONLY, NULL},\n    {\"type\",\n        T_OBJECT, offsetof(PyArray_DTypeMeta, scalar_type), READONLY, NULL},\n    {\"_parametric\","
  },
  {
    "id" : "d424c8d0-abb6-44f3-b40f-7417e961d864",
    "prId" : 17137,
    "prUrl" : "https://github.com/numpy/numpy/pull/17137#pullrequestreview-475069042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9405508b-5995-450b-8b44-961d1589e913",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I changed this to prefer the first dtype. Doesn't change anything except which identity gets returned, which also means the \"metadata\" that is returned is different.\r\n\r\nThis is a tiny change here: Since the other dtype gets cast first and then we call \"common instance\", the metadata and instance which is returned can differ from the one that was returned before.",
        "createdAt" : "2020-08-26T00:19:15Z",
        "updatedAt" : "2020-09-02T18:43:06Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b40f6bb22d7e71533e0b450493530e8fdd08afa5",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +223,227 @@string_unicode_common_instance(PyArray_Descr *descr1, PyArray_Descr *descr2)\n{\n    if (descr1->elsize >= descr2->elsize) {\n        return ensure_dtype_nbo(descr1);\n    }"
  },
  {
    "id" : "5f4061df-775e-4280-899c-c20d6a8f7092",
    "prId" : 17393,
    "prUrl" : "https://github.com/numpy/numpy/pull/17393#pullrequestreview-497988459",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f57f6db1-c19d-4b97-b2d7-d67faea5ca41",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Needs to return something :)",
        "createdAt" : "2020-09-28T23:45:52Z",
        "updatedAt" : "2020-09-28T23:51:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e5a7f5bf-7775-49c5-b1c6-20090435a245",
        "parentId" : "f57f6db1-c19d-4b97-b2d7-d67faea5ca41",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Probably ;), strange I was sure I ran the array-coercion tests on this. Thanks.",
        "createdAt" : "2020-09-28T23:51:54Z",
        "updatedAt" : "2020-09-28T23:51:54Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "7a922e26-9e32-4920-9a2c-cb02636f3484",
        "parentId" : "f57f6db1-c19d-4b97-b2d7-d67faea5ca41",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Fixed, but the tests seem to pass even if commenting it out, so have to check, must be something wrong with the tests.",
        "createdAt" : "2020-09-28T23:56:03Z",
        "updatedAt" : "2020-09-28T23:56:03Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "5e01e478-75e0-459b-9287-a47a94884032",
        "parentId" : "f57f6db1-c19d-4b97-b2d7-d67faea5ca41",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK, looks all fine. Seems through some stack-magic, the return value ended up being `res` even though the return was missing...",
        "createdAt" : "2020-09-29T00:25:29Z",
        "updatedAt" : "2020-09-29T00:25:29Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "f67583e3-5510-4bd6-bd6d-20062c9a95b5",
        "parentId" : "f57f6db1-c19d-4b97-b2d7-d67faea5ca41",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I think I recall that the last value gets returned by default in these cases. But it seems that isn't right ;)\r\n\r\n> If the } that terminates a function is reached, and the value of the function call is used by the caller, the behavior is undefined.",
        "createdAt" : "2020-09-29T00:44:21Z",
        "updatedAt" : "2020-09-29T00:44:21Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "127b262b0da014e624889532c3d4eb330ed2aa07",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +225,229 @@     * for the size of the requested void.\n     */\n    res->elsize = 8;\n    return res;\n}"
  }
]