[
  {
    "id" : "b6197c1f-9ade-44ae-9b4b-dd3a2d490fc5",
    "prId" : 3421,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3a35cbc-eaf9-404d-bc09-c401eeb4725a",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This is OK because you have changed the alignment of complex?\n",
        "createdAt" : "2013-06-10T18:21:19Z",
        "updatedAt" : "2013-06-11T21:57:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "13044493-be4a-4952-9a90-6b055368a80a",
        "parentId" : "b3a35cbc-eaf9-404d-bc09-c401eeb4725a",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "no this was always ok\n\nthe reason stated in the comment makes no sense to me.\nthe compiler will not add vectorization without alignment checks and there is no manually vectorized code in this file as far as I can tell.\nEven if there is vectorization somewhere that relies on the ndarray alignment flag it would not work because the alignment requirement is to small for SSE2 (16 bytes, ndarray alignment is only 8bytes for double)\n",
        "createdAt" : "2013-06-10T18:32:50Z",
        "updatedAt" : "2013-06-11T21:57:34Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2dd429afc204bc60e2db0f6ad4fb706ab93c273",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +25,29 @@ */\n#if (defined(NPY_CPU_X86) || defined(NPY_CPU_AMD64))\n#  define NPY_USE_UNALIGNED_ACCESS 1\n#else\n#  define NPY_USE_UNALIGNED_ACCESS 0"
  },
  {
    "id" : "5ecd92d6-34cd-4580-bd7c-b6292262196f",
    "prId" : 3931,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d99f92a-67e1-4744-b3ae-03e4b401a929",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "It always ends up with   `#  define NPY_USE_UNALIGNED_ACCESS 0`, that doesn't seem right. \n",
        "createdAt" : "2013-10-16T21:57:53Z",
        "updatedAt" : "2013-10-16T23:02:07Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "11b006ef-b6fe-4366-a2a9-495239459cff",
        "parentId" : "9d99f92a-67e1-4744-b3ae-03e4b401a929",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "its intentional, else the compiler might too aggressively autovectorize code assuming all pointers are aligned.\n",
        "createdAt" : "2013-10-16T22:03:47Z",
        "updatedAt" : "2013-10-16T23:02:07Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "2c9ebf0a-45c7-41a8-9fce-f69019efd192",
        "parentId" : "9d99f92a-67e1-4744-b3ae-03e4b401a929",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So why make it depend on  `NPY_CPU_HAVE_UNALIGNED_ACCESS`? Future plans?\n",
        "createdAt" : "2013-10-16T22:12:22Z",
        "updatedAt" : "2013-10-16T23:02:07Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "17a9a5e9-9540-4c8c-897b-3b76b8473d6b",
        "parentId" : "9d99f92a-67e1-4744-b3ae-03e4b401a929",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could probably use a comment to explain.\n",
        "createdAt" : "2013-10-16T22:18:35Z",
        "updatedAt" : "2013-10-16T23:02:07Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "aab085d6-776c-469e-9b3e-32873449a907",
        "parentId" : "9d99f92a-67e1-4744-b3ae-03e4b401a929",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "the comment above should explain it\n",
        "createdAt" : "2013-10-16T22:30:41Z",
        "updatedAt" : "2013-10-16T23:02:07Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d4ea165817fc613c79bb92ccb3844df94d1beed",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +40,44 @@ * So this flag can only be enabled if autovectorization is disabled.\n */\n#ifdef NPY_CPU_HAVE_UNALIGNED_ACCESS\n#  define NPY_USE_UNALIGNED_ACCESS 0\n#else"
  },
  {
    "id" : "a29e6a2e-6a2f-4dd1-b479-6106c57ab2e0",
    "prId" : 4497,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "300b8fc6-fe62-4b0c-947d-5423c080a1ca",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK.\n",
        "createdAt" : "2014-03-16T03:16:19Z",
        "updatedAt" : "2014-03-16T03:16:19Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ae3946f9bceee9ce2ce0fe16f538663ae92149c",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +1703,1707 @@                    if (!NpyIter_ResetBasePointers(mit->subspace_iter,\n                                                   subspace_baseptrs,\n                                                   &errmsg)) {\n                        NPY_END_THREADS;\n                        PyErr_SetString(PyExc_ValueError, errmsg);"
  },
  {
    "id" : "0b8eb914-111c-4606-b1ca-6527abc14687",
    "prId" : 4801,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2b3950e-a679-4381-8aed-2adedf4f712b",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "This `#if` doesn't match all the other usages of `iteraxis` (which seem to be `#if @isget@ && @oneiter@`)\n",
        "createdAt" : "2014-06-11T12:02:51Z",
        "updatedAt" : "2014-06-11T12:02:51Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "0ad5c8a6-51e2-45ff-8249-7ff8aee26220",
        "parentId" : "c2b3950e-a679-4381-8aed-2adedf4f712b",
        "authorId" : "acce7360-5cef-46f0-ab05-4fb0ffdffe3a",
        "body" : "`@oneiter@` isn't set until later on.\n",
        "createdAt" : "2014-06-11T12:45:33Z",
        "updatedAt" : "2014-06-11T12:45:33Z",
        "lastEditedBy" : "acce7360-5cef-46f0-ab05-4fb0ffdffe3a",
        "tags" : [
        ]
      }
    ],
    "commit" : "59b560645344d101ddd9e0dfece942b3c699003e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1491,1495 @@    npy_intp fancy_dims[NPY_MAXDIMS];\n    npy_intp fancy_strides[NPY_MAXDIMS];\n#if @isget@\n    int iteraxis;\n#endif"
  },
  {
    "id" : "2da912ce-2069-494f-a475-d62d2a51d0e2",
    "prId" : 6377,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02fd9e92-25d4-40de-9d26-89b4f7f9a412",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "`IsUintAligned` needs a declaration.\n",
        "createdAt" : "2015-09-27T20:27:32Z",
        "updatedAt" : "2018-09-27T19:44:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "12bd7c372ab5eeeff8bd2a46d765ccf28c6ce486",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1376,1380 @@    npy_intp itersize;\n\n    int is_aligned = IsUintAligned(self) && IsUintAligned(result);\n    int needs_api = PyDataType_REFCHK(PyArray_DESCR(self));\n"
  },
  {
    "id" : "6fec2c1e-d223-49af-b544-eabb3820b124",
    "prId" : 8964,
    "prUrl" : "https://github.com/numpy/numpy/pull/8964#pullrequestreview-33828116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c937f7f9-28fb-497c-a0a6-b4e0ad408a57",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Could probably do with a comment along the lines of \"dereferencing `src` when `N == 0` is not allowed",
        "createdAt" : "2017-04-20T17:04:53Z",
        "updatedAt" : "2017-04-20T17:04:58Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a16f16b94b61fc35b887d9e9f2e12c817c2819b6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +207,211 @@    npy_uint64 temp0, temp1;\n#endif\n    if (N == 0) {\n        return;\n    }"
  },
  {
    "id" : "5d1435ed-345a-493a-b255-7dfee57be03a",
    "prId" : 18398,
    "prUrl" : "https://github.com/numpy/numpy/pull/18398#pullrequestreview-614977028",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d34b35db-534b-487b-b7ca-50d46f0edadb",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "If this is never used maybe we do not need it?",
        "createdAt" : "2021-03-17T12:44:29Z",
        "updatedAt" : "2021-03-18T16:28:57Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "b214a9f0-3b3f-46df-8647-d5721b20ad0a",
        "parentId" : "d34b35db-534b-487b-b7ca-50d46f0edadb",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "ugggh, it might be used for unaligned, byte-swapped unicode strings or something, let me try to cover it...",
        "createdAt" : "2021-03-17T22:49:06Z",
        "updatedAt" : "2021-03-18T16:28:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "450b04a0-05f1-4e07-a970-26985d1d9138",
        "parentId" : "d34b35db-534b-487b-b7ca-50d46f0edadb",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "No, nevermind... this is impossible to hit.  It *might* have been possible to hit with user dtypes, because I won't rule out NumPy assumed it knows how to byte-swap them.  This code doesn't actually byte-swap unicde correctly (I tried, but its obvious, since it swaps the whole string rather than each element.)\r\n\r\nI reluctant to delete it, since it will be hit if a compiler would actually map `long long` to an `int128` though.",
        "createdAt" : "2021-03-17T23:20:32Z",
        "updatedAt" : "2021-03-18T16:28:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "5846e643-2fce-4a6f-9854-5543087a71b8",
        "parentId" : "d34b35db-534b-487b-b7ca-50d46f0edadb",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Actually would need int256, so if  you prefer, we could just make the branch that would end up using this an error instead.",
        "createdAt" : "2021-03-18T00:25:33Z",
        "updatedAt" : "2021-03-18T16:28:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "51dafa21-3bb3-4af5-8a4f-3ffbe9eccb75",
        "parentId" : "d34b35db-534b-487b-b7ca-50d46f0edadb",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "I would be fine with a comment about where it is useful",
        "createdAt" : "2021-03-18T04:46:07Z",
        "updatedAt" : "2021-03-18T16:28:57Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5de1ceb1f1707d0539446b3d8883f3f8f80cb69",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +301,305 @@    npy_intp src_stride = strides[0], dst_stride = strides[1];\n    npy_intp src_itemsize = context->descriptors[0]->elsize;\n\n    char *a, *b, c;\n"
  },
  {
    "id" : "24dcb0fd-5146-4394-8e24-6d0cb1cdf78c",
    "prId" : 18398,
    "prUrl" : "https://github.com/numpy/numpy/pull/18398#pullrequestreview-614888302",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cbad147-e395-4df0-a047-977319dd0657",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "this seems like a false negative, surely we are hitting this code path?",
        "createdAt" : "2021-03-17T12:45:41Z",
        "updatedAt" : "2021-03-18T16:28:57Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "6f596024-fbf9-408d-b90b-530512348f6f",
        "parentId" : "4cbad147-e395-4df0-a047-977319dd0657",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Hmmm, probably not a false positive... These are masked buffered casts that are only used in `NpyIter` so they are pretty darn specific and little used. (And this branch is probably specific to large arrays, have to think a bit how to test it right.)",
        "createdAt" : "2021-03-17T22:46:52Z",
        "updatedAt" : "2021-03-18T16:28:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "9aa415a6-4f6c-4edc-978d-c27e933dff06",
        "parentId" : "4cbad147-e395-4df0-a047-977319dd0657",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I added/expanded a test... Its not pretty, and confusing though :/.",
        "createdAt" : "2021-03-18T00:23:45Z",
        "updatedAt" : "2021-03-18T16:28:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5de1ceb1f1707d0539446b3d8883f3f8f80cb69",
    "line" : 397,
    "diffHunk" : "@@ -1,1 +1411,1415 @@                    return stransfer(&cast_info->context,\n                            args, &count, strides, mask,\n                            mask_stride, cast_info->auxdata);\n                }\n                else {"
  }
]