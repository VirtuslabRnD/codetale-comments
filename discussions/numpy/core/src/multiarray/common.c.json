[
  {
    "id" : "80855939-50e8-42e8-990e-b4cac7882393",
    "prId" : 296,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c73c1227-6003-4bf0-8ce3-6e86f6e8cc1c",
        "parentId" : null,
        "authorId" : "21f1d5b4-8c0e-420e-83d0-31a6c6d9e229",
        "body" : "This should be a check against a constant, like NPY_CHECK_UNKNOWN_AXIS (#def'd to -1).  That might also allow some future extensions like NPY_CHECK_FLATTENED_AXIS, to allow more informative reports in the case of indexing an implicitly flattened array.\n",
        "createdAt" : "2012-06-07T10:41:12Z",
        "updatedAt" : "2012-06-15T09:36:14Z",
        "lastEditedBy" : "21f1d5b4-8c0e-420e-83d0-31a6c6d9e229",
        "tags" : [
        ]
      }
    ],
    "commit" : "a83e212d40ea4ccb49ab75a60fd5d7afa9307c2a",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +513,517 @@    if ((*index < -max_item) || (*index >= max_item)) {\n        /* Try to be as clear as possible about what went wrong. */\n        if (axis >= 0) {\n            if (max_item > 0) {\n                PyErr_Format(PyExc_IndexError,"
  },
  {
    "id" : "12454cd8-7b5a-4f5c-819c-a148cd9c3557",
    "prId" : 451,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da896ce6-176d-48bb-85e8-13860d8fc616",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "First line of multiline comments should be blank\n",
        "createdAt" : "2012-09-20T22:17:39Z",
        "updatedAt" : "2012-09-20T23:25:38Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f18987a69c297b5602b00c22b9759d2ece4a7bf1",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +27,31 @@ * be allowed under the NPY_SAME_KIND_CASTING rules, and if not we issue a\n * warning (that people's code will be broken in a future release.)\n */\nNPY_NO_EXPORT NPY_CASTING NPY_DEFAULT_ASSIGN_CASTING = NPY_INTERNAL_UNSAFE_CASTING_BUT_WARN_UNLESS_SAME_KIND;\n"
  },
  {
    "id" : "2b3eea0a-7c3d-4749-b3a9-d62bcfd81472",
    "prId" : 451,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e1e85bd-4780-4f1b-b6f0-307716e6a0ef",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Will static do instead of NPY_NO_EXPORT ? It doesn't look like this is in a header.\n",
        "createdAt" : "2012-09-20T22:18:34Z",
        "updatedAt" : "2012-09-20T23:25:38Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "330829f9-4e5d-4fdb-9ff0-cf30eca01851",
        "parentId" : "1e1e85bd-4780-4f1b-b6f0-307716e6a0ef",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "No, I'm pretty sure that would break separate compilation -- it's declared extern in __multiarray_api.h, and references in other .c files need to be resolved to this definition by the linker.\n",
        "createdAt" : "2012-09-20T22:24:46Z",
        "updatedAt" : "2012-09-20T23:25:39Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "a52ccbf7-ce0e-4517-a0a2-3bc8320def6b",
        "parentId" : "1e1e85bd-4780-4f1b-b6f0-307716e6a0ef",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Maybe it should be declared extern in a header? I don't know if the is compatible with NPY_NO_EXORT though, I think that becomes static in one file builds.  \n",
        "createdAt" : "2012-09-20T22:36:50Z",
        "updatedAt" : "2012-09-20T23:25:39Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "958db2a6-39e8-437c-b300-f701127c6d66",
        "parentId" : "1e1e85bd-4780-4f1b-b6f0-307716e6a0ef",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "Well, the trick is that for one-file builds it has to be declared static, in multi-file builds it has to be declared extern in a header, and in builds of third-party packages it needs to be looked up via the famous array-of-pointers API structure. I'm pretty sure declaring it NPY_NO_EXPORT in a .c file plus putting it in numpy_api.py is the right way to automatically achieve all of those things. I found it useful to look at the generated __multiarray_api.h to see exactly what was going on.\n",
        "createdAt" : "2012-09-20T22:40:39Z",
        "updatedAt" : "2012-09-20T23:25:39Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f18987a69c297b5602b00c22b9759d2ece4a7bf1",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +28,32 @@ * warning (that people's code will be broken in a future release.)\n */\nNPY_NO_EXPORT NPY_CASTING NPY_DEFAULT_ASSIGN_CASTING = NPY_INTERNAL_UNSAFE_CASTING_BUT_WARN_UNLESS_SAME_KIND;\n\n"
  },
  {
    "id" : "1ed90b70-9252-4ec6-b0af-901f87c2a416",
    "prId" : 2882,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "975947ac-18da-473d-86cc-852363ff9d49",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "The `const int`'s on this line don't hurt, but they don't affect the API either -- since C passes by value, you're just declaring that your _local copies_ of `itemsize` and `nd` will remain unchanged. The caller doesn't care about this either way.\n",
        "createdAt" : "2013-01-06T00:33:11Z",
        "updatedAt" : "2013-01-06T00:33:11Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "1981d0640d6a598a043379be43d19dcf590823f1",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +678,682 @@\nNPY_NO_EXPORT void\noffset_bounds_from_strides(const int itemsize, const int nd,\n                           const npy_intp *dims, const npy_intp *strides,\n                           npy_intp *lower_offset, npy_intp *upper_offset) {"
  },
  {
    "id" : "17b412b7-33c4-464f-8813-4b1feb77cbac",
    "prId" : 3410,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd4e67af-6dc3-434a-9064-2884f19a5d22",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Just wondering, does this really make a real difference for your timings? Somehow it doesn't seem to me that None is all that special (but the check is very cheap and clear so...). I know None is special for you, just generally.\n",
        "createdAt" : "2013-06-07T09:06:42Z",
        "updatedAt" : "2013-06-10T22:18:30Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "ed899cb8-fa60-4a47-9680-e34964866b10",
        "parentId" : "bd4e67af-6dc3-434a-9064-2884f19a5d22",
        "authorId" : "ff5c65b0-5517-4eb3-80ab-47e8f225efab",
        "body" : "None would be at least as slow float, so it makes a difference,\nand like you said, the test is very cheap.\n\nIn [3]: %timeit numpy.array([None]*100000)\n100 loops, best of 3: 6.04 ms per loop\n\nIn [4]: %timeit numpy.array([0.0]*100000)\n100 loops, best of 3: 8.9 ms per loop\n\nOn Fri, Jun 7, 2013 at 5:06 AM, seberg notifications@github.com wrote:\n\n> In numpy/core/src/multiarray/common.c:\n> \n> > @@ -156,8 +198,17 @@\n> >          goto promote_types;\n> >      }\n> > -    /\\* See if it's a python None */\n> > -    if (obj == Py_None) {\n> \n> Just wondering, does this really make a real difference for your timings?\n> Somehow it doesn't seem to me that None is all that special (but the check\n> is very cheap and clear so...). I know None is special for you, just\n> generally.\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/numpy/numpy/pull/3410/files#r4585177\n> .\n",
        "createdAt" : "2013-06-07T14:11:00Z",
        "updatedAt" : "2013-06-10T22:18:30Z",
        "lastEditedBy" : "ff5c65b0-5517-4eb3-80ab-47e8f225efab",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c7d0b9e423087e05c5eb49dffbb67f72ff3a4e1",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +212,216 @@\n    /* See if it's a python None */\n    if (obj == Py_None) {\n        dtype = PyArray_DescrFromType(NPY_OBJECT);\n        if (dtype == NULL) {"
  },
  {
    "id" : "3653c5ba-b61d-4ad8-a2f9-c5dbfbf248c7",
    "prId" : 3410,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4883a66-b533-47b3-99a7-746c6b9eeb0c",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "Isn't this `PyErr_Clear` superfluous now?\n",
        "createdAt" : "2013-06-10T12:42:53Z",
        "updatedAt" : "2013-06-10T22:18:30Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "3661d9d3-d519-4a0d-abfb-0cb3f4ecbfb4",
        "parentId" : "b4883a66-b533-47b3-99a7-746c6b9eeb0c",
        "authorId" : "ff5c65b0-5517-4eb3-80ab-47e8f225efab",
        "body" : "PyObject_GetBuffer can still throw exceptions, so this is still required.\n",
        "createdAt" : "2013-06-10T14:34:41Z",
        "updatedAt" : "2013-06-10T22:18:30Z",
        "lastEditedBy" : "ff5c65b0-5517-4eb3-80ab-47e8f225efab",
        "tags" : [
        ]
      },
      {
        "id" : "a78eb802-15a6-498d-aff8-009eaaf5eda8",
        "parentId" : "b4883a66-b533-47b3-99a7-746c6b9eeb0c",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "Oh, I see -- I misread before, but actually this branch is reached only when all the `PyObject_GetBuffer` calls failed.\n\nThough, in that case, we have an object where `PyObject_CheckBuffer` returned True, so we should probably insist on using the buffer protocol instead of falling through and jamming it into an object array. In this branch, wouldn't it be better to return failure, and propagate the exception from the final `PyObject_GetBuffer(.., PyBUF_SIMPLE)`? (I know this isn't really the point of your PR, but since these PRs are one of the few times that such dusty bits of code get examined carefully I like to try and clean things up when we do find them.)\n",
        "createdAt" : "2013-06-10T15:03:07Z",
        "updatedAt" : "2013-06-10T22:18:30Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "04fc2670-26ff-40e3-b2f5-fea1484a4bed",
        "parentId" : "b4883a66-b533-47b3-99a7-746c6b9eeb0c",
        "authorId" : "ff5c65b0-5517-4eb3-80ab-47e8f225efab",
        "body" : "I'm hesitant to change behavior in this PR, other than performance.\n\nI don't really understand why buffer is supported here at all.  Does\nmemoryview conform to the buffer interface?  Buffer is deprecated in\n3.0.\n\nI think if you look closely at these suppressed exceptions, most are\nsloppy to ignore.  **array_struct** doesn't work quite the way I expect\neither.\n",
        "createdAt" : "2013-06-10T15:21:55Z",
        "updatedAt" : "2013-06-10T22:18:30Z",
        "lastEditedBy" : "ff5c65b0-5517-4eb3-80ab-47e8f225efab",
        "tags" : [
        ]
      },
      {
        "id" : "587840ee-44ce-4fae-b6eb-545b2e30054c",
        "parentId" : "b4883a66-b533-47b3-99a7-746c6b9eeb0c",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "Fair enough.\n\nIIUC the \"buffer interface\" is the generic name for the C API that memoryview and others (like ndarray) use, and is quite distinct from the \"buffer objects\" which were in py2 but removed in py3.\n",
        "createdAt" : "2013-06-10T16:15:06Z",
        "updatedAt" : "2013-06-10T22:18:30Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c7d0b9e423087e05c5eb49dffbb67f72ff3a4e1",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +395,399 @@        }\n        else {\n            PyErr_Clear();\n        }\n    }"
  },
  {
    "id" : "0d219de1-0120-4354-b5de-81bb58eae85e",
    "prId" : 3798,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28c31803-9db9-4892-999d-2d3b51abb015",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Something I did not note elsewhere. I changed the output here for 1-d arrays from `(6)` to `(6,)`.\n",
        "createdAt" : "2014-02-06T16:25:04Z",
        "updatedAt" : "2014-02-07T14:07:27Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d554c2954b82b120ce77c1fd9a74c4deb85503a3",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +795,799 @@ */\nNPY_NO_EXPORT PyObject *\nconvert_shape_to_string(npy_intp n, npy_intp *vals, char *ending)\n{\n    npy_intp i;"
  },
  {
    "id" : "282fb9f2-7123-4b3a-81d9-bcfde2bbcf44",
    "prId" : 5316,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06099cef-81f7-4cd6-92ad-f55b1c25d2f8",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "this should probably be removed and just restored to 1.8 state (always aligned)\nthis might still cause issues and I think I have a better solution in my other fix attempt branch\n",
        "createdAt" : "2015-01-19T21:09:53Z",
        "updatedAt" : "2015-01-19T21:09:53Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "dd4b911a-0d66-42b6-b451-4c184ca87c17",
        "parentId" : "06099cef-81f7-4cd6-92ad-f55b1c25d2f8",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Just replace `common.c` with the 1.8 version?\n",
        "createdAt" : "2015-01-19T22:17:32Z",
        "updatedAt" : "2015-01-19T22:17:32Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d106d590697fcbb7199b00e1f40ec835fe809f6",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +687,691 @@        npy_intp itemsize = PyArray_ITEMSIZE(ap);\n        /* power of two sizes may be loaded in larger moves */\n        if (((itemsize & (itemsize - 1)) == 0)) {\n            alignment = itemsize > NPY_MAX_COPY_ALIGNMENT ?\n                NPY_MAX_COPY_ALIGNMENT : itemsize;"
  }
]