[
  {
    "id" : "2c4c55ab-8b62-490a-a8b2-46b618f056d9",
    "prId" : 94,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "327e3868-3b38-43f1-862b-cfa34b6e022b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Filler ?\n",
        "createdAt" : "2011-06-22T02:16:17Z",
        "updatedAt" : "2011-06-22T17:12:17Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "faaa2526-3cd1-46bc-973c-1d216569338e",
        "parentId" : "327e3868-3b38-43f1-862b-cfa34b6e022b",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "This is specifically the bugfix for #1790. That code (well, functionally equivalent code) was already there, just after assigning totalsize to new->elsize.\n",
        "createdAt" : "2011-06-22T02:22:26Z",
        "updatedAt" : "2011-06-22T17:12:17Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      },
      {
        "id" : "07181c11-0587-4d7d-8f70-27149302f3ab",
        "parentId" : "327e3868-3b38-43f1-862b-cfa34b6e022b",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So the filler is gone, you just provide enough aligned space for the item?\n",
        "createdAt" : "2011-06-22T02:34:12Z",
        "updatedAt" : "2011-06-22T17:12:17Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "04ee1fce-d99d-44ea-9f1b-214c590fcd30",
        "parentId" : "327e3868-3b38-43f1-862b-cfa34b6e022b",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "I believe there never was any filler, just the illusion of filler created during the repr call.\n",
        "createdAt" : "2011-06-22T02:45:09Z",
        "updatedAt" : "2011-06-22T17:12:17Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "b23337999abcb3ecfa648d86f0bf049ef7e58d3e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +459,463 @@    }\n\n    new = PyArray_DescrNewFromType(PyArray_VOID);\n    if (new == NULL) {\n        Py_XDECREF(fields);"
  },
  {
    "id" : "289bd25b-61e5-4391-9499-09cf2035b5ea",
    "prId" : 94,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "353803d3-a19a-40d0-8ed3-1008944d0ae4",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What is done if it isn't a simple layout? Just asking.\n",
        "createdAt" : "2011-06-22T02:42:35Z",
        "updatedAt" : "2011-06-22T17:12:17Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b2a49a3c-073d-4b61-b6a1-78c83409772c",
        "parentId" : "353803d3-a19a-40d0-8ed3-1008944d0ae4",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "This test is used to determine what style of repr to use, either a list or a dict.\n",
        "createdAt" : "2011-06-22T02:46:54Z",
        "updatedAt" : "2011-06-22T17:12:17Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "b23337999abcb3ecfa648d86f0bf049ef7e58d3e",
    "line" : 711,
    "diffHunk" : "@@ -1,1 +2652,2656 @@ *\n * Returns 1 if it has a simple layout, 0 otherwise.\n */\nstatic int\nis_dtype_struct_simple_layout(PyArray_Descr *dtype)"
  },
  {
    "id" : "4dbed35e-3023-4d8a-a9c7-bc5027ce61ed",
    "prId" : 94,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "775571f0-f52e-45ef-b5be-74b7116b7c78",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So the result of creating a dtype from this isn't aligned?\n",
        "createdAt" : "2011-06-22T02:46:40Z",
        "updatedAt" : "2011-06-22T17:12:17Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6cb7be5a-6dfc-4860-b658-a176337b4346",
        "parentId" : "775571f0-f52e-45ef-b5be-74b7116b7c78",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "I guess it should also mention that it doesn't preserve 'itemsize' either. This isn't the true repr, rather a helper which builds the object for the first parameter of the repr. Align and itemsize don't fit in that object, they're extra parameters to the dtype constructor.\n",
        "createdAt" : "2011-06-22T02:49:09Z",
        "updatedAt" : "2011-06-22T17:12:17Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "b23337999abcb3ecfa648d86f0bf049ef7e58d3e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2987,2991 @@ * for structured arrays like the regular repr does, because\n * this flag is separate from the first dtype constructor parameter.\n */\nNPY_NO_EXPORT PyObject *\narraydescr_short_construction_repr(PyArray_Descr *dtype)"
  },
  {
    "id" : "a987a4d1-63f9-48c4-911e-d49178899f69",
    "prId" : 4095,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c64ef494-239e-453a-adfb-71b4125e1a41",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What does \"neither of which is safe\" refer to?\n",
        "createdAt" : "2013-12-19T15:54:34Z",
        "updatedAt" : "2013-12-19T15:54:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "bcd28cb8-273c-46b6-98a0-69aacdfd00d6",
        "parentId" : "c64ef494-239e-453a-adfb-71b4125e1a41",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Well. I suppose right now anything which isn't a tuple fails (with possibly some corner cases). So that would be an option, too. The integers inside the tuple (or the sequence if you allow more) can be mutable, but the dtype itself should not be mutable, so that is why it is not safe.\n",
        "createdAt" : "2013-12-19T16:19:13Z",
        "updatedAt" : "2013-12-19T16:19:13Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1951d3d4c1011132560ae4326f636e5cef01d918",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +356,360 @@        /*\n         * Create a new subarray->shape tuple (it can be an arbitrary\n         * sequence of integer like objects, neither of which is safe.\n         */\n        newdescr->subarray->shape = PyTuple_New(shape.len);"
  },
  {
    "id" : "e5066c32-6c92-48f5-8341-3e3704158556",
    "prId" : 6242,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea2e03f7-218f-4363-aede-742dcb767c99",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "`PyUnicode_AsUTF8String` returns a new reference, see [here](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_AsUTF8String), so you will need to `Py_DECREF(next)` afterwards. There may be other ways, but a possible solution could look like:\n\n```\n#if defined(NPY_PY3K)\n            name = PyUnicode_AsUTF8String(name);\n#else\n            Py_INCREF(next);\n#endif\n            PyErr_Format(PyExc_ValueError,\n                    \"field '%s' occurs more than once\", PyString_AsString(name));\n            Py_DECREF(next);\n            goto fail;\n```\n\nAlso, we are assuming that `PyUnicode_AsUTF8String` will always succeed. This seems to be consistent with other uses of the same function in the NumPy code base, but I am not 100% sure it is a good practice.\n",
        "createdAt" : "2015-08-25T03:49:06Z",
        "updatedAt" : "2015-08-25T14:45:23Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbca4cb6ecbec22fba097ad0d6dfb1e1f39f8ef6",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +511,515 @@                 && (PyDict_GetItem(fields, title) != NULL))) {\n#if defined(NPY_PY3K)\n            name = PyUnicode_AsUTF8String(name);\n#endif\n            PyErr_Format(PyExc_ValueError,"
  },
  {
    "id" : "1444538f-ae02-4203-99b6-55bea6cb6b4f",
    "prId" : 8235,
    "prUrl" : "https://github.com/numpy/numpy/pull/8235#pullrequestreview-7352504",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98f8481f-d2cc-43d3-a9ab-773d0a89e97b",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "This is fine, but I just want to note for posterity that this whole if-block is weird undocumented behavior. (as are a number of things related to metadata). \n\n(Actually, conceivably the \"correct\" behavior here if `type->metadata == NULL` might be to do `type->metadata = val`, eg compare to [the end of `convert_from_dict`](https://github.com/numpy/numpy/blob/e287741d60205bb920dea15d4e70178453db2788/numpy/core/src/multiarray/descriptor.c#L1234). But that's not clear.).\n\nIn the future we might consider removing the block anyway, so I'm fine with this as-is.\n",
        "createdAt" : "2016-11-07T03:18:34Z",
        "updatedAt" : "2016-11-24T21:02:06Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fe73dda45e711fe61eb88ed15afca12bdaba8b2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +288,292 @@        }\n    }\n    else if (type->metadata && (PyDict_Check(val) || PyDictProxy_Check(val))) {\n        /* Assume it's a metadata dictionary */\n        if (PyDict_Merge(type->metadata, val, 0) == -1) {"
  },
  {
    "id" : "549f0025-69ee-4716-94a1-6429f42f97c2",
    "prId" : 8279,
    "prUrl" : "https://github.com/numpy/numpy/pull/8279#pullrequestreview-8925844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95e8f7a6-1e56-4d28-a240-b0de01d32f4e",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Not Python 3 compatible, see `doc/Py3K.rst.txt` or grep for examples. Also, Python tends to `0` rather than NULL.\n",
        "createdAt" : "2016-11-16T00:15:51Z",
        "updatedAt" : "2017-01-23T18:21:38Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "0bb2dff7-3ff4-42dc-b723-c197d375be56",
        "parentId" : "95e8f7a6-1e56-4d28-a240-b0de01d32f4e",
        "authorId" : "2f09e143-721d-48b9-b594-c05d2d4da650",
        "body" : "Thanks, fixed.\n",
        "createdAt" : "2016-11-16T22:43:13Z",
        "updatedAt" : "2017-01-23T18:21:38Z",
        "lastEditedBy" : "2f09e143-721d-48b9-b594-c05d2d4da650",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cbb46e45dde71be76ec6c3f4e8e6fccb4227976",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +3660,3664 @@}\n\nstatic PyNumberMethods descr_as_number = {\n    (binaryfunc)0,                          /* nb_add */\n    (binaryfunc)0,                          /* nb_subtract */"
  },
  {
    "id" : "55458263-75bb-4baa-b38b-acd7a4fb32cb",
    "prId" : 9947,
    "prUrl" : "https://github.com/numpy/numpy/pull/9947#pullrequestreview-73408100",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63410611-5b3c-47c3-9822-2984d1758846",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Using `PySequence_GetItem` here means we don't have to implement our own handling of negative indices",
        "createdAt" : "2017-11-01T08:21:30Z",
        "updatedAt" : "2017-11-01T08:23:34Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9271d814517a4078faf6766594d0f93196b44990",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +3803,3807 @@_subscript_by_index(PyArray_Descr *self, Py_ssize_t i)\n{\n    PyObject *name = PySequence_GetItem(self->names, i);\n    if (name == NULL) {\n        PyErr_Format(PyExc_IndexError,"
  },
  {
    "id" : "1386c546-071c-4c09-a624-2e1aba267c64",
    "prId" : 9947,
    "prUrl" : "https://github.com/numpy/numpy/pull/9947#pullrequestreview-73408100",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32fdf027-d96c-4896-81b7-ca110ae67f81",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Changed to `Py_ssize_t` to avoid compiler warnings.",
        "createdAt" : "2017-11-01T08:22:09Z",
        "updatedAt" : "2017-11-01T08:23:34Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9271d814517a4078faf6766594d0f93196b44990",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +3827,3831 @@    }\n    else if (PyInt_Check(op)) {\n        Py_ssize_t i = PyArray_PyIntAsIntp(op);\n        if (PyErr_Occurred()) {\n            return NULL;"
  },
  {
    "id" : "afadb518-8238-45c3-9ac5-6e13fe552ea3",
    "prId" : 10417,
    "prUrl" : "https://github.com/numpy/numpy/pull/10417#pullrequestreview-191964060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b172f64b-10fa-42a1-8e3b-fd3ef24e8359",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I think it was you who mentioned that one should use `GetItem` to be sure that things work for list subclasses. Or do an exact test on list. Or is this a problem only for tuples? (`namedtuple` being quite common).",
        "createdAt" : "2018-01-17T14:36:13Z",
        "updatedAt" : "2019-06-07T22:21:37Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "f7e44689-8c8e-4597-ba13-42a6688d9139",
        "parentId" : "b172f64b-10fa-42a1-8e3b-fd3ef24e8359",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "It's not really a problem for either in more than a very contrived case. I'll do a list exactness check",
        "createdAt" : "2018-01-18T17:02:19Z",
        "updatedAt" : "2019-06-07T22:21:37Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "950b358b-041a-4fb7-a35a-d98ea03acf4a",
        "parentId" : "b172f64b-10fa-42a1-8e3b-fd3ef24e8359",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Which means that `dtype[some_list_subclass]` now gives a TypeError - but if anyone cares, they can report it when it hits them.",
        "createdAt" : "2018-01-18T17:09:05Z",
        "updatedAt" : "2019-06-07T22:21:37Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "525506cd-4b76-429c-9736-0766c168fc7d",
        "parentId" : "b172f64b-10fa-42a1-8e3b-fd3ef24e8359",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Resolving due to the `PyList_CheckExact` above",
        "createdAt" : "2019-01-13T08:05:00Z",
        "updatedAt" : "2019-06-07T22:21:37Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f01fd4795c60689c7c450e88c2ba212b57f76e5",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +3380,3384 @@    seqlen = PyList_GET_SIZE(obj);\n    for (i = 0; i < seqlen; i++) {\n        PyObject *item = PyList_GET_ITEM(obj, i);\n        if (!PyBaseString_Check(item)) {\n            return NPY_FALSE;"
  },
  {
    "id" : "07828938-0f62-4186-b11c-00d8931405a1",
    "prId" : 10417,
    "prUrl" : "https://github.com/numpy/numpy/pull/10417#pullrequestreview-89861004",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81821510-f1c0-4a34-8fb6-207a6dfd6819",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "For a later commit, but: This should probably just copy the original dtype.",
        "createdAt" : "2018-01-18T17:09:47Z",
        "updatedAt" : "2019-06-07T22:21:37Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f01fd4795c60689c7c450e88c2ba212b57f76e5",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +3466,3470 @@    }\n\n    view_dtype = PyArray_DescrNewFromType(NPY_VOID);\n    if (view_dtype == NULL) {\n        goto fail;"
  },
  {
    "id" : "895a76a4-e8eb-4fcf-be25-81c388d81275",
    "prId" : 10417,
    "prUrl" : "https://github.com/numpy/numpy/pull/10417#pullrequestreview-90288407",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34880cf7-0acd-4525-9252-a5cddc17dd7b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Was the decision to leave this as `ValueError` until 1.15? (and do you think this patch should be backported?)\r\n\r\nIf so, I'll add a `throw_1_13_error` boolean argument to switch between `KeyError` for `dtype.__getitem__` (more correct), and `ValueError` for `array.__getitem__` (backcompat)",
        "createdAt" : "2018-01-18T17:14:40Z",
        "updatedAt" : "2019-06-07T22:21:37Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1de109cb-027d-4ca9-87f8-9fc3cab4d9bc",
        "parentId" : "34880cf7-0acd-4525-9252-a5cddc17dd7b",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I'm thinking the change to KeyError and this PR as a whole can wait for 1.15. That way it can go out at the same time as the multifield copy-> view changes (assuming we revert that for 1.14.1).\r\n\r\n(that means we can merge this to master as-is)",
        "createdAt" : "2018-01-19T22:21:24Z",
        "updatedAt" : "2019-06-07T22:21:37Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "2365b38a-bd78-4af9-a6fa-fba8e40e40fc",
        "parentId" : "34880cf7-0acd-4525-9252-a5cddc17dd7b",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I worry that this will conflict heavily with the fixes to #10411 \r\nEdit: Looking more closely, that won't be a problem",
        "createdAt" : "2018-01-20T01:28:10Z",
        "updatedAt" : "2019-06-07T22:21:37Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f01fd4795c60689c7c450e88c2ba212b57f76e5",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +3427,3431 @@        tup = PyDict_GetItem(self->fields, name);\n        if (tup == NULL) {\n            PyErr_SetObject(PyExc_KeyError, name);\n            goto fail;\n        }"
  }
]