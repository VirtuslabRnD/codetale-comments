[
  {
    "id" : "2c4c55ab-8b62-490a-a8b2-46b618f056d9",
    "prId" : 94,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "327e3868-3b38-43f1-862b-cfa34b6e022b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Filler ?\n",
        "createdAt" : "2011-06-22T02:16:17Z",
        "updatedAt" : "2011-06-22T17:12:17Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "faaa2526-3cd1-46bc-973c-1d216569338e",
        "parentId" : "327e3868-3b38-43f1-862b-cfa34b6e022b",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "This is specifically the bugfix for #1790. That code (well, functionally equivalent code) was already there, just after assigning totalsize to new->elsize.\n",
        "createdAt" : "2011-06-22T02:22:26Z",
        "updatedAt" : "2011-06-22T17:12:17Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      },
      {
        "id" : "07181c11-0587-4d7d-8f70-27149302f3ab",
        "parentId" : "327e3868-3b38-43f1-862b-cfa34b6e022b",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So the filler is gone, you just provide enough aligned space for the item?\n",
        "createdAt" : "2011-06-22T02:34:12Z",
        "updatedAt" : "2011-06-22T17:12:17Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "04ee1fce-d99d-44ea-9f1b-214c590fcd30",
        "parentId" : "327e3868-3b38-43f1-862b-cfa34b6e022b",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "I believe there never was any filler, just the illusion of filler created during the repr call.\n",
        "createdAt" : "2011-06-22T02:45:09Z",
        "updatedAt" : "2011-06-22T17:12:17Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "b23337999abcb3ecfa648d86f0bf049ef7e58d3e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +459,463 @@    }\n\n    new = PyArray_DescrNewFromType(PyArray_VOID);\n    if (new == NULL) {\n        Py_XDECREF(fields);"
  },
  {
    "id" : "289bd25b-61e5-4391-9499-09cf2035b5ea",
    "prId" : 94,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "353803d3-a19a-40d0-8ed3-1008944d0ae4",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What is done if it isn't a simple layout? Just asking.\n",
        "createdAt" : "2011-06-22T02:42:35Z",
        "updatedAt" : "2011-06-22T17:12:17Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b2a49a3c-073d-4b61-b6a1-78c83409772c",
        "parentId" : "353803d3-a19a-40d0-8ed3-1008944d0ae4",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "This test is used to determine what style of repr to use, either a list or a dict.\n",
        "createdAt" : "2011-06-22T02:46:54Z",
        "updatedAt" : "2011-06-22T17:12:17Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "b23337999abcb3ecfa648d86f0bf049ef7e58d3e",
    "line" : 711,
    "diffHunk" : "@@ -1,1 +2652,2656 @@ *\n * Returns 1 if it has a simple layout, 0 otherwise.\n */\nstatic int\nis_dtype_struct_simple_layout(PyArray_Descr *dtype)"
  },
  {
    "id" : "4dbed35e-3023-4d8a-a9c7-bc5027ce61ed",
    "prId" : 94,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "775571f0-f52e-45ef-b5be-74b7116b7c78",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So the result of creating a dtype from this isn't aligned?\n",
        "createdAt" : "2011-06-22T02:46:40Z",
        "updatedAt" : "2011-06-22T17:12:17Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6cb7be5a-6dfc-4860-b658-a176337b4346",
        "parentId" : "775571f0-f52e-45ef-b5be-74b7116b7c78",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "I guess it should also mention that it doesn't preserve 'itemsize' either. This isn't the true repr, rather a helper which builds the object for the first parameter of the repr. Align and itemsize don't fit in that object, they're extra parameters to the dtype constructor.\n",
        "createdAt" : "2011-06-22T02:49:09Z",
        "updatedAt" : "2011-06-22T17:12:17Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "b23337999abcb3ecfa648d86f0bf049ef7e58d3e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2987,2991 @@ * for structured arrays like the regular repr does, because\n * this flag is separate from the first dtype constructor parameter.\n */\nNPY_NO_EXPORT PyObject *\narraydescr_short_construction_repr(PyArray_Descr *dtype)"
  },
  {
    "id" : "a987a4d1-63f9-48c4-911e-d49178899f69",
    "prId" : 4095,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c64ef494-239e-453a-adfb-71b4125e1a41",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What does \"neither of which is safe\" refer to?\n",
        "createdAt" : "2013-12-19T15:54:34Z",
        "updatedAt" : "2013-12-19T15:54:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "bcd28cb8-273c-46b6-98a0-69aacdfd00d6",
        "parentId" : "c64ef494-239e-453a-adfb-71b4125e1a41",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Well. I suppose right now anything which isn't a tuple fails (with possibly some corner cases). So that would be an option, too. The integers inside the tuple (or the sequence if you allow more) can be mutable, but the dtype itself should not be mutable, so that is why it is not safe.\n",
        "createdAt" : "2013-12-19T16:19:13Z",
        "updatedAt" : "2013-12-19T16:19:13Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1951d3d4c1011132560ae4326f636e5cef01d918",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +356,360 @@        /*\n         * Create a new subarray->shape tuple (it can be an arbitrary\n         * sequence of integer like objects, neither of which is safe.\n         */\n        newdescr->subarray->shape = PyTuple_New(shape.len);"
  },
  {
    "id" : "e5066c32-6c92-48f5-8341-3e3704158556",
    "prId" : 6242,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea2e03f7-218f-4363-aede-742dcb767c99",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "`PyUnicode_AsUTF8String` returns a new reference, see [here](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_AsUTF8String), so you will need to `Py_DECREF(next)` afterwards. There may be other ways, but a possible solution could look like:\n\n```\n#if defined(NPY_PY3K)\n            name = PyUnicode_AsUTF8String(name);\n#else\n            Py_INCREF(next);\n#endif\n            PyErr_Format(PyExc_ValueError,\n                    \"field '%s' occurs more than once\", PyString_AsString(name));\n            Py_DECREF(next);\n            goto fail;\n```\n\nAlso, we are assuming that `PyUnicode_AsUTF8String` will always succeed. This seems to be consistent with other uses of the same function in the NumPy code base, but I am not 100% sure it is a good practice.\n",
        "createdAt" : "2015-08-25T03:49:06Z",
        "updatedAt" : "2015-08-25T14:45:23Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbca4cb6ecbec22fba097ad0d6dfb1e1f39f8ef6",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +511,515 @@                 && (PyDict_GetItem(fields, title) != NULL))) {\n#if defined(NPY_PY3K)\n            name = PyUnicode_AsUTF8String(name);\n#endif\n            PyErr_Format(PyExc_ValueError,"
  },
  {
    "id" : "1444538f-ae02-4203-99b6-55bea6cb6b4f",
    "prId" : 8235,
    "prUrl" : "https://github.com/numpy/numpy/pull/8235#pullrequestreview-7352504",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98f8481f-d2cc-43d3-a9ab-773d0a89e97b",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "This is fine, but I just want to note for posterity that this whole if-block is weird undocumented behavior. (as are a number of things related to metadata). \n\n(Actually, conceivably the \"correct\" behavior here if `type->metadata == NULL` might be to do `type->metadata = val`, eg compare to [the end of `convert_from_dict`](https://github.com/numpy/numpy/blob/e287741d60205bb920dea15d4e70178453db2788/numpy/core/src/multiarray/descriptor.c#L1234). But that's not clear.).\n\nIn the future we might consider removing the block anyway, so I'm fine with this as-is.\n",
        "createdAt" : "2016-11-07T03:18:34Z",
        "updatedAt" : "2016-11-24T21:02:06Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fe73dda45e711fe61eb88ed15afca12bdaba8b2",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +288,292 @@        }\n    }\n    else if (type->metadata && (PyDict_Check(val) || PyDictProxy_Check(val))) {\n        /* Assume it's a metadata dictionary */\n        if (PyDict_Merge(type->metadata, val, 0) == -1) {"
  },
  {
    "id" : "549f0025-69ee-4716-94a1-6429f42f97c2",
    "prId" : 8279,
    "prUrl" : "https://github.com/numpy/numpy/pull/8279#pullrequestreview-8925844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95e8f7a6-1e56-4d28-a240-b0de01d32f4e",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Not Python 3 compatible, see `doc/Py3K.rst.txt` or grep for examples. Also, Python tends to `0` rather than NULL.\n",
        "createdAt" : "2016-11-16T00:15:51Z",
        "updatedAt" : "2017-01-23T18:21:38Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "0bb2dff7-3ff4-42dc-b723-c197d375be56",
        "parentId" : "95e8f7a6-1e56-4d28-a240-b0de01d32f4e",
        "authorId" : "2f09e143-721d-48b9-b594-c05d2d4da650",
        "body" : "Thanks, fixed.\n",
        "createdAt" : "2016-11-16T22:43:13Z",
        "updatedAt" : "2017-01-23T18:21:38Z",
        "lastEditedBy" : "2f09e143-721d-48b9-b594-c05d2d4da650",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cbb46e45dde71be76ec6c3f4e8e6fccb4227976",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +3660,3664 @@}\n\nstatic PyNumberMethods descr_as_number = {\n    (binaryfunc)0,                          /* nb_add */\n    (binaryfunc)0,                          /* nb_subtract */"
  },
  {
    "id" : "55458263-75bb-4baa-b38b-acd7a4fb32cb",
    "prId" : 9947,
    "prUrl" : "https://github.com/numpy/numpy/pull/9947#pullrequestreview-73408100",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63410611-5b3c-47c3-9822-2984d1758846",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Using `PySequence_GetItem` here means we don't have to implement our own handling of negative indices",
        "createdAt" : "2017-11-01T08:21:30Z",
        "updatedAt" : "2017-11-01T08:23:34Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9271d814517a4078faf6766594d0f93196b44990",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +3803,3807 @@_subscript_by_index(PyArray_Descr *self, Py_ssize_t i)\n{\n    PyObject *name = PySequence_GetItem(self->names, i);\n    if (name == NULL) {\n        PyErr_Format(PyExc_IndexError,"
  },
  {
    "id" : "1386c546-071c-4c09-a624-2e1aba267c64",
    "prId" : 9947,
    "prUrl" : "https://github.com/numpy/numpy/pull/9947#pullrequestreview-73408100",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32fdf027-d96c-4896-81b7-ca110ae67f81",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Changed to `Py_ssize_t` to avoid compiler warnings.",
        "createdAt" : "2017-11-01T08:22:09Z",
        "updatedAt" : "2017-11-01T08:23:34Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9271d814517a4078faf6766594d0f93196b44990",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +3827,3831 @@    }\n    else if (PyInt_Check(op)) {\n        Py_ssize_t i = PyArray_PyIntAsIntp(op);\n        if (PyErr_Occurred()) {\n            return NULL;"
  },
  {
    "id" : "afadb518-8238-45c3-9ac5-6e13fe552ea3",
    "prId" : 10417,
    "prUrl" : "https://github.com/numpy/numpy/pull/10417#pullrequestreview-191964060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b172f64b-10fa-42a1-8e3b-fd3ef24e8359",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I think it was you who mentioned that one should use `GetItem` to be sure that things work for list subclasses. Or do an exact test on list. Or is this a problem only for tuples? (`namedtuple` being quite common).",
        "createdAt" : "2018-01-17T14:36:13Z",
        "updatedAt" : "2019-06-07T22:21:37Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "f7e44689-8c8e-4597-ba13-42a6688d9139",
        "parentId" : "b172f64b-10fa-42a1-8e3b-fd3ef24e8359",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "It's not really a problem for either in more than a very contrived case. I'll do a list exactness check",
        "createdAt" : "2018-01-18T17:02:19Z",
        "updatedAt" : "2019-06-07T22:21:37Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "950b358b-041a-4fb7-a35a-d98ea03acf4a",
        "parentId" : "b172f64b-10fa-42a1-8e3b-fd3ef24e8359",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Which means that `dtype[some_list_subclass]` now gives a TypeError - but if anyone cares, they can report it when it hits them.",
        "createdAt" : "2018-01-18T17:09:05Z",
        "updatedAt" : "2019-06-07T22:21:37Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "525506cd-4b76-429c-9736-0766c168fc7d",
        "parentId" : "b172f64b-10fa-42a1-8e3b-fd3ef24e8359",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Resolving due to the `PyList_CheckExact` above",
        "createdAt" : "2019-01-13T08:05:00Z",
        "updatedAt" : "2019-06-07T22:21:37Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f01fd4795c60689c7c450e88c2ba212b57f76e5",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +3380,3384 @@    seqlen = PyList_GET_SIZE(obj);\n    for (i = 0; i < seqlen; i++) {\n        PyObject *item = PyList_GET_ITEM(obj, i);\n        if (!PyBaseString_Check(item)) {\n            return NPY_FALSE;"
  },
  {
    "id" : "07828938-0f62-4186-b11c-00d8931405a1",
    "prId" : 10417,
    "prUrl" : "https://github.com/numpy/numpy/pull/10417#pullrequestreview-89861004",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81821510-f1c0-4a34-8fb6-207a6dfd6819",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "For a later commit, but: This should probably just copy the original dtype.",
        "createdAt" : "2018-01-18T17:09:47Z",
        "updatedAt" : "2019-06-07T22:21:37Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f01fd4795c60689c7c450e88c2ba212b57f76e5",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +3466,3470 @@    }\n\n    view_dtype = PyArray_DescrNewFromType(NPY_VOID);\n    if (view_dtype == NULL) {\n        goto fail;"
  },
  {
    "id" : "895a76a4-e8eb-4fcf-be25-81c388d81275",
    "prId" : 10417,
    "prUrl" : "https://github.com/numpy/numpy/pull/10417#pullrequestreview-90288407",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34880cf7-0acd-4525-9252-a5cddc17dd7b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Was the decision to leave this as `ValueError` until 1.15? (and do you think this patch should be backported?)\r\n\r\nIf so, I'll add a `throw_1_13_error` boolean argument to switch between `KeyError` for `dtype.__getitem__` (more correct), and `ValueError` for `array.__getitem__` (backcompat)",
        "createdAt" : "2018-01-18T17:14:40Z",
        "updatedAt" : "2019-06-07T22:21:37Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1de109cb-027d-4ca9-87f8-9fc3cab4d9bc",
        "parentId" : "34880cf7-0acd-4525-9252-a5cddc17dd7b",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I'm thinking the change to KeyError and this PR as a whole can wait for 1.15. That way it can go out at the same time as the multifield copy-> view changes (assuming we revert that for 1.14.1).\r\n\r\n(that means we can merge this to master as-is)",
        "createdAt" : "2018-01-19T22:21:24Z",
        "updatedAt" : "2019-06-07T22:21:37Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "2365b38a-bd78-4af9-a6fa-fba8e40e40fc",
        "parentId" : "34880cf7-0acd-4525-9252-a5cddc17dd7b",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I worry that this will conflict heavily with the fixes to #10411 \r\nEdit: Looking more closely, that won't be a problem",
        "createdAt" : "2018-01-20T01:28:10Z",
        "updatedAt" : "2019-06-07T22:21:37Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f01fd4795c60689c7c450e88c2ba212b57f76e5",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +3427,3431 @@        tup = PyDict_GetItem(self->fields, name);\n        if (tup == NULL) {\n            PyErr_SetObject(PyExc_KeyError, name);\n            goto fail;\n        }"
  },
  {
    "id" : "5e2bdfd5-c5f1-4a81-9c66-e3095065a957",
    "prId" : 11870,
    "prUrl" : "https://github.com/numpy/numpy/pull/11870#pullrequestreview-151864287",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af804073-a244-4681-83e2-ce283fa497b6",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Doesn't the old error need to be cleared?",
        "createdAt" : "2018-09-03T16:47:50Z",
        "updatedAt" : "2018-09-03T16:47:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "78ab959f-1275-40fa-8934-595db326e14a",
        "parentId" : "af804073-a244-4681-83e2-ce283fa497b6",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "I was following a pattern I saw in other places that do the same, like [in conversion_utils.c](https://github.com/numpy/numpy/blob/464f79eb1d05bf938d16b49da1c39a4e02506fa3/numpy/core/src/multiarray/conversion_utils.c#L920). \r\n\r\nLooking at the CPython sources, it seems this is by design. `PyErr_SetString(exc, value)` calls `PyErr_SetObject(exc, value)`, which calls `PyErr_Restore(exc, value, tb)`, which gets the current values into temporary variables, sets the new values, then `Py_XDECREF`s the old ones.",
        "createdAt" : "2018-09-03T18:40:42Z",
        "updatedAt" : "2018-09-03T18:40:42Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "dbf823f1-f730-4499-ad1c-4c247dac2436",
        "parentId" : "af804073-a244-4681-83e2-ce283fa497b6",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK, good to know, the official documentation doesn't cover that. Google does show this:\r\n\r\n>The other thing to note is that if there are multiple calls to PyErr_SetString only the last one counts:\r\n\r\nI don't know if that covers other ways of raising errors, but I assume your inspection of the CPython code covers that.",
        "createdAt" : "2018-09-03T19:11:38Z",
        "updatedAt" : "2018-09-03T19:11:38Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "af82b54c1f18f811232f40e4c8b1f1ca96ee2966",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1443,1447 @@            PyObject *err = PyErr_Occurred();\n            if (PyErr_GivenExceptionMatches(err, PyExc_UnicodeEncodeError)) {\n                PyErr_SetString(PyExc_TypeError,\n                        \"data type not understood\");\n            }"
  },
  {
    "id" : "f7171738-43c2-408a-9a82-3850c466c557",
    "prId" : 11932,
    "prUrl" : "https://github.com/numpy/numpy/pull/11932#pullrequestreview-155276602",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88244465-2eba-43f9-80e4-4552998d9bd7",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Shouldn't this be `static PyObject *_numpy_dtype = NULL;`  It needs to stay around and needs to be initialized.",
        "createdAt" : "2018-09-13T21:09:24Z",
        "updatedAt" : "2018-09-13T21:09:24Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "33d1dc6b-eb42-4725-8ecf-40e13fb4380f",
        "parentId" : "88244465-2eba-43f9-80e4-4552998d9bd7",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I don't think it does need to stay around, and it's initialized at its first use below.\r\n\r\nThis matches `dtype.__repr__`, in that both do not bother to cache the module or the function",
        "createdAt" : "2018-09-13T21:18:06Z",
        "updatedAt" : "2018-09-13T21:18:06Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cba7ca56aa83ce222b40dbfbb12f696d1a4ab75",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1863,1867 @@{\n    /* let python handle this */\n    PyObject *_numpy_dtype;\n    PyObject *res;\n    _numpy_dtype = PyImport_ImportModule(\"numpy.core._dtype\");"
  },
  {
    "id" : "703aa145-fa46-4843-b9fc-227b34cd1ade",
    "prId" : 12254,
    "prUrl" : "https://github.com/numpy/numpy/pull/12254#pullrequestreview-168667478",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6536f7ec-3928-46ca-ac08-e9fe3faff619",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Blank line before this.",
        "createdAt" : "2018-10-25T18:52:55Z",
        "updatedAt" : "2018-10-26T04:24:36Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "fbbce539-8edb-4721-b01d-bb4da205b47f",
        "parentId" : "6536f7ec-3928-46ca-ac08-e9fe3faff619",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Doesn't matter much to me, added",
        "createdAt" : "2018-10-26T04:24:02Z",
        "updatedAt" : "2018-10-26T04:24:36Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0709d92f78cc6e78ba79da9a25627db87059b31d",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +62,66 @@\n    /* Call the python function of the same name. */\n    _numpy_dtype_ctypes = PyImport_ImportModule(\"numpy.core._dtype_ctypes\");\n    if (_numpy_dtype_ctypes == NULL) {\n        return NULL;"
  },
  {
    "id" : "5eb57d05-6c2e-4adb-85dd-e4a03685697f",
    "prId" : 12254,
    "prUrl" : "https://github.com/numpy/numpy/pull/12254#pullrequestreview-168666971",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "190c6e85-d030-4ff9-bb90-9b020d48529d",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Generally prefer to check against value, especially as the error return is '0'.",
        "createdAt" : "2018-10-25T19:14:41Z",
        "updatedAt" : "2018-10-26T04:24:36Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "bc7d19b5-afbe-414d-a9e5-959922051798",
        "parentId" : "190c6e85-d030-4ff9-bb90-9b020d48529d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Or maybe `NPY_SUCCEED` as that seems to be the interface for this bunch of functions. ",
        "createdAt" : "2018-10-25T19:19:23Z",
        "updatedAt" : "2018-10-26T04:24:36Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "8b835c6f-4621-4c21-af58-e76600f7ec0c",
        "parentId" : "190c6e85-d030-4ff9-bb90-9b020d48529d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'd rather leave this as is, since it matches things like `PyString_Check`",
        "createdAt" : "2018-10-26T04:19:37Z",
        "updatedAt" : "2018-10-26T04:24:36Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0709d92f78cc6e78ba79da9a25627db87059b31d",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +1404,1408 @@             * support it.\n             */\n            if (npy_ctypes_check((PyTypeObject *)obj)) {\n                *at = _arraydescr_from_ctypes_type((PyTypeObject *)obj);\n                return *at ? NPY_SUCCEED : NPY_FAIL;"
  },
  {
    "id" : "efb01413-c898-4177-b4a0-ffd2d421dc62",
    "prId" : 12254,
    "prUrl" : "https://github.com/numpy/numpy/pull/12254#pullrequestreview-168667431",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae051201-709d-4044-a45e-4281df4150b6",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Error return here is `NULL`, be nice to use that in the error check.",
        "createdAt" : "2018-10-25T19:16:59Z",
        "updatedAt" : "2018-10-26T04:24:36Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4ccd3f2a-4e54-41e1-9ee8-409820d922db",
        "parentId" : "ae051201-709d-4044-a45e-4281df4150b6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This whole function seems to use the style of not comparing against `NULL`, so I'd be inclined to leave it consistent",
        "createdAt" : "2018-10-26T04:23:35Z",
        "updatedAt" : "2018-10-26T04:24:36Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0709d92f78cc6e78ba79da9a25627db87059b31d",
    "line" : 145,
    "diffHunk" : "@@ -1,1 +1395,1399 @@        else {\n            *at = _arraydescr_from_dtype_attr(obj);\n            if (*at) {\n                return NPY_SUCCEED;\n            }"
  },
  {
    "id" : "8b08dfc5-9d53-424f-b105-34efe7be72c3",
    "prId" : 13003,
    "prUrl" : "https://github.com/numpy/numpy/pull/13003#pullrequestreview-206134438",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bac9aee8-4e3f-4af2-8f88-ad766dd70627",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think it would make sense to let the caller do this, since there's it's more obvious that ctypes is trying next.",
        "createdAt" : "2019-02-21T05:55:43Z",
        "updatedAt" : "2019-05-26T04:57:56Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "786cc297-fe37-4e06-b711-e3143f44139a",
        "parentId" : "bac9aee8-4e3f-4af2-8f88-ad766dd70627",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Looking again - it's already a mess, not sure this helps much. Fine to leave as is.",
        "createdAt" : "2019-02-21T05:58:40Z",
        "updatedAt" : "2019-05-26T04:57:56Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "65da9049eb34db40343edc3e24059944b354d918",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +117,121 @@\n  fail:\n    /* Ignore all but recursion errors, to give ctypes a full try. */\n    if (!PyErr_ExceptionMatches(PyExc_RecursionError)) {\n        PyErr_Clear();"
  },
  {
    "id" : "0f3ef4ae-285c-443c-9922-e3c5ad6e955b",
    "prId" : 13003,
    "prUrl" : "https://github.com/numpy/numpy/pull/13003#pullrequestreview-207476006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83cbebea-d2d9-4599-ae90-a38f394e68e0",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Returning `1` for an error is unusual. Can you return `-1` instead, and use the standard `< 0` check at the call site?",
        "createdAt" : "2019-02-21T06:00:44Z",
        "updatedAt" : "2019-05-26T04:57:56Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "94b8dd41-499d-4ea5-80d7-0ebf2c922d69",
        "parentId" : "83cbebea-d2d9-4599-ae90-a38f394e68e0",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yeah, did that because it actually meant \"using the dtype attribute\" and not necessarily error, but maybe nicer in any case.",
        "createdAt" : "2019-02-21T14:26:30Z",
        "updatedAt" : "2019-05-26T04:57:56Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "c18e2adf-f86f-4b57-954c-fe9befc89403",
        "parentId" : "83cbebea-d2d9-4599-ae90-a38f394e68e0",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Ah, I get it now. Perhaps just a better docstring - in particular, line 92 is now wrong.  Something like:\r\n```\r\nReturns 1 if getting a dtype was attempted, otherwise 0.\r\nIf an attempt was made, `newdescr` will contain the result, or NULL if an error occured and should be propagated.\r\n```\r\nYou could also consider returning `PyNone`, but then you have to remember to reference count it which is a bit of a waste of time.",
        "createdAt" : "2019-02-24T08:12:34Z",
        "updatedAt" : "2019-05-26T04:57:56Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "8bb42b1a-ee7c-445d-8a08-229ab12c0721",
        "parentId" : "83cbebea-d2d9-4599-ae90-a38f394e68e0",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yeah, PyNone may be a neat idea, it is just one \"DECREF on error\" in a sense, so maybe nicer than this dance.\r\n\r\nAbout splitting off: Yeah, thought it would be better as well probably, so planning to do that, if I don't get to it today, might be a few days.",
        "createdAt" : "2019-02-25T15:57:31Z",
        "updatedAt" : "2019-05-26T04:57:56Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "65da9049eb34db40343edc3e24059944b354d918",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +80,84 @@ * if this is not possible.\n * When the return value is true, the dtype attribute should have been used\n * and parsed. Currently the only failure mode for a 1 return is a\n * RecursionError and the descriptor is set to NULL.\n * When the return value is false, no error will be set."
  },
  {
    "id" : "7235bdd7-5bf7-4ea9-9755-19643b7ba70e",
    "prId" : 13039,
    "prUrl" : "https://github.com/numpy/numpy/pull/13039#pullrequestreview-207573102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1005c993-f873-4d3b-b189-4adad840054e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Tmp is leaked when it's equal to false.",
        "createdAt" : "2019-02-25T16:26:56Z",
        "updatedAt" : "2019-02-26T08:32:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "31bf2bf3-5e88-4fc4-8338-67ef42d2ddf1",
        "parentId" : "1005c993-f873-4d3b-b189-4adad840054e",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "fixed",
        "createdAt" : "2019-02-25T18:59:27Z",
        "updatedAt" : "2019-02-26T08:32:25Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e49ad4426a71b7e8226958ec1ba017c6c4595ec",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +1059,1063 @@                    \"but its value is neither True nor False\");\n            goto fail;\n        }\n        Py_DECREF(tmp);\n    }"
  },
  {
    "id" : "d23f3644-a7b6-4327-a56f-7631e2243105",
    "prId" : 13039,
    "prUrl" : "https://github.com/numpy/numpy/pull/13039#pullrequestreview-207574743",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "082c4b42-accd-43b9-92aa-0b393c21f900",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think metadata is leaked at the end of this if chain",
        "createdAt" : "2019-02-25T16:29:15Z",
        "updatedAt" : "2019-02-26T08:32:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "46664c6f-c8fe-43b6-8233-e58fb6c31e3b",
        "parentId" : "082c4b42-accd-43b9-92aa-0b393c21f900",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "fixed",
        "createdAt" : "2019-02-25T19:02:55Z",
        "updatedAt" : "2019-02-26T08:32:25Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e49ad4426a71b7e8226958ec1ba017c6c4595ec",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +1295,1299 @@        }\n    }\n    return new;\n\n fail:"
  },
  {
    "id" : "0bf77e10-512d-44e2-84d5-c1aea0a45e59",
    "prId" : 13039,
    "prUrl" : "https://github.com/numpy/numpy/pull/13039#pullrequestreview-207819320",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef83417a-41ae-4de1-aeb7-abac06dd7e20",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Pretty sure it's not safe to do these both before checking if either errored. Consider a pathological type like:\r\n```\r\nclass BadDict:\r\n    def __getitem__(self, item):\r\n        raise TypeError(\"Exception in flight here causes python to be unhappy\")\r\n\r\nclass Foo:\r\n    ___array_interface__ = BadDict\r\n```\r\n\r\nNote that we need a type overloading `__getitem__` like this to make your patch worth it in the first place.",
        "createdAt" : "2019-02-26T07:27:11Z",
        "updatedAt" : "2019-02-26T08:32:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d8267de3-2d96-4f68-b546-e530f724f628",
        "parentId" : "ef83417a-41ae-4de1-aeb7-abac06dd7e20",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "~Fixing, even though~ In this case I am pretty sure the code will work correctly, both `name` and `descrs` will be `NULL` so the following `if` will kick in. \r\n\r\nThe patch is to ensure we do not use an object with refcount 0, since it could be collected at any time.\r\n",
        "createdAt" : "2019-02-26T07:45:31Z",
        "updatedAt" : "2019-02-26T08:32:25Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "43995f89-b31e-4786-b5a0-9f7ac9e8ebbe",
        "parentId" : "ef83417a-41ae-4de1-aeb7-abac06dd7e20",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Looking more carefully, the code clears any exceptions before calling `_use_fields_dict` so is there a problem with the test you propose?\r\n\r\nI will add a pathological test that only errors on `name` lookup",
        "createdAt" : "2019-02-26T07:48:42Z",
        "updatedAt" : "2019-02-26T08:32:25Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "80330afe-dffc-4456-9c1f-2013f1b7eab0",
        "parentId" : "ef83417a-41ae-4de1-aeb7-abac06dd7e20",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "For reference, the error code path is hit when a `dict` with no `name`, `format`. For instance when converting this valid spec\r\n\r\n```\r\ndt = np.dtype({'f0': ('i4', 0), 'f1':('u1', 4)}, align=True)\r\n```",
        "createdAt" : "2019-02-26T07:56:30Z",
        "updatedAt" : "2019-02-26T08:32:25Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "867450d3-1736-4a3e-ab61-73ddfd0e3ca5",
        "parentId" : "ef83417a-41ae-4de1-aeb7-abac06dd7e20",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I've seen problems before where `__getitem__(\"formats\")` would raise a `SystemError` because an exception was set by `__getitem__(\"names\")`. I think in this case you silence both anyway, but in principle you could hit an assert or worse.",
        "createdAt" : "2019-02-26T07:57:46Z",
        "updatedAt" : "2019-02-26T08:32:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "810d19b3-8afc-4f95-a170-e0875178d865",
        "parentId" : "ef83417a-41ae-4de1-aeb7-abac06dd7e20",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "If that is something we should be checking for, we should only silence a `KeyError`. Would you like that to be part of this PR?",
        "createdAt" : "2019-02-26T08:11:05Z",
        "updatedAt" : "2019-02-26T08:32:25Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "d11cf3cc-94a5-47dd-9393-96d9622dda36",
        "parentId" : "ef83417a-41ae-4de1-aeb7-abac06dd7e20",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Worrying about preserving exceptions is a fair point, but I think it's fine to leave for another PR.\r\n\r\nCalling python code while `PyErr_Occurred() != NULL` is pretty dangerous though - grepping through the cpython source code for `assert(!PyErr_Occurred())` finds a lot of matches.",
        "createdAt" : "2019-02-26T08:18:35Z",
        "updatedAt" : "2019-02-26T08:32:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c359892c-2347-4cea-9998-73f29a768bbf",
        "parentId" : "ef83417a-41ae-4de1-aeb7-abac06dd7e20",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "So to clarify - I'd like to see this changed to call one, check for null, then call the other.  That's in line with the purpose of this PR, which is to make this work for non-`dict` objects with `__getitem__` (the only case when the refcount could drop to 0)\r\n\r\nCatching `KeyError` specifically is a nice idea, but not one that really makes sense as part of this PR.",
        "createdAt" : "2019-02-26T08:24:28Z",
        "updatedAt" : "2019-02-26T08:32:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "74068777-c63d-4a85-b57a-5d6e33467ded",
        "parentId" : "ef83417a-41ae-4de1-aeb7-abac06dd7e20",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "got it, thanks for persevering. Fixed.",
        "createdAt" : "2019-02-26T08:35:33Z",
        "updatedAt" : "2019-02-26T08:35:33Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e49ad4426a71b7e8226958ec1ba017c6c4595ec",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +1015,1019 @@        return _use_fields_dict(obj, align);\n    }\n    descrs = PyMapping_GetItemString(obj, \"formats\");\n    if (descrs == NULL) {\n        Py_DECREF(fields);"
  },
  {
    "id" : "9daa5c78-6202-43ec-9346-50294606fae5",
    "prId" : 13039,
    "prUrl" : "https://github.com/numpy/numpy/pull/13039#pullrequestreview-207800797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b625918-a58c-4729-9400-bdf2b7369d46",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Needs a null check after the re-assignment - `PySequence_Tuple` might have failed.",
        "createdAt" : "2019-02-26T07:28:31Z",
        "updatedAt" : "2019-02-26T08:32:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "bb0ed571-610c-4b6f-85e5-0c90f5c594cb",
        "parentId" : "7b625918-a58c-4729-9400-bdf2b7369d46",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "fixing",
        "createdAt" : "2019-02-26T07:45:41Z",
        "updatedAt" : "2019-02-26T08:32:25Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e49ad4426a71b7e8226958ec1ba017c6c4595ec",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +1216,1220 @@    new->elsize = totalsize;\n    if (!PyTuple_Check(names)) {\n        Py_SETREF(names, PySequence_Tuple(names));\n        if (names == NULL) {\n            Py_DECREF(new);"
  },
  {
    "id" : "ead39fdb-279f-4fde-9f3a-50658e4f61c5",
    "prId" : 13039,
    "prUrl" : "https://github.com/numpy/numpy/pull/13039#pullrequestreview-207821957",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26f53119-bb6c-4473-8aa0-ae784ac8c5dc",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`DECREF` can execute arbitrary code, so you need to have the exception cleared first",
        "createdAt" : "2019-02-26T08:35:50Z",
        "updatedAt" : "2019-02-26T08:35:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f4bc523d-0511-4db7-8249-d32ab1584773",
        "parentId" : "26f53119-bb6c-4473-8aa0-ae784ac8c5dc",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Hmm, perhaps I'm wrong about that - that seems to open an impossible can of worms.",
        "createdAt" : "2019-02-26T08:37:59Z",
        "updatedAt" : "2019-02-26T08:38:00Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5ffc5e4c-ec48-4272-ac98-d80232b36d06",
        "parentId" : "26f53119-bb6c-4473-8aa0-ae784ac8c5dc",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yep, I'm wrong about that - `tp_finalize` is implemented by default as;\r\n```\r\nstatic void\r\nslot_tp_finalize(PyObject *self)\r\n{\r\n    _Py_IDENTIFIER(__del__);\r\n    int unbound;\r\n    PyObject *del, *res;\r\n    PyObject *error_type, *error_value, *error_traceback;\r\n\r\n    /* Save the current exception, if any. */\r\n    PyErr_Fetch(&error_type, &error_value, &error_traceback);\r\n```",
        "createdAt" : "2019-02-26T08:41:58Z",
        "updatedAt" : "2019-02-26T08:41:58Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e49ad4426a71b7e8226958ec1ba017c6c4595ec",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +1019,1023 @@        Py_DECREF(fields);\n        /* XXX should check this is a KeyError */\n        PyErr_Clear();\n        Py_DECREF(names);\n        return _use_fields_dict(obj, align);"
  },
  {
    "id" : "1f704061-8aeb-42bd-90d2-108dcf4b17c4",
    "prId" : 13326,
    "prUrl" : "https://github.com/numpy/numpy/pull/13326#pullrequestreview-239500897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2078c5a6-71f8-4edb-9878-6c1f76a79799",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Deprecation warnings need a comment giving the version and date they were introduced. Search the source for use of the deprecate macro and you should see an example",
        "createdAt" : "2019-05-20T12:25:25Z",
        "updatedAt" : "2019-05-24T21:46:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "720e096c-2d5c-472d-aa37-0ba38b1406cc",
        "parentId" : "2078c5a6-71f8-4edb-9878-6c1f76a79799",
        "authorId" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "body" : "done",
        "createdAt" : "2019-05-20T13:32:36Z",
        "updatedAt" : "2019-05-24T21:46:57Z",
        "lastEditedBy" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad1e0600e45b9fa71096d0a0f10c1474e003f373",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +291,295 @@                && PyNumber_Check(val)) {\n            /* 2019-05-20, 1.17 */\n            if (DEPRECATE_FUTUREWARNING(\n                        \"Passing (type, 1) or '1type' as a synonym of type is \"\n                        \"deprecated; in a future version of numpy, it will be \""
  },
  {
    "id" : "168f9225-0f14-4d0c-9292-fb8ecbc9a5e0",
    "prId" : 13855,
    "prUrl" : "https://github.com/numpy/numpy/pull/13855#pullrequestreview-255570805",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b196b9e0-f781-403c-98bf-3ccda574ed3c",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK back to this version, setref is too smart/not that nice. But this just duplicates the fail path, so could avoid that. But right now that just feels like touching more code than necessary.",
        "createdAt" : "2019-06-27T22:57:19Z",
        "updatedAt" : "2019-06-28T03:01:50Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "e9d6dfde-b8dc-460a-805f-fa926bd969f8",
        "parentId" : "b196b9e0-f781-403c-98bf-3ccda574ed3c",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`names` and `fields` are always null here, they're set on line 1235",
        "createdAt" : "2019-06-28T03:12:14Z",
        "updatedAt" : "2019-06-28T03:12:51Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f8e9f2ca-37bc-4458-ae5e-fdf3a43d8f79",
        "parentId" : "b196b9e0-f781-403c-98bf-3ccda574ed3c",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "As for `offsets`, `descrs`, and `titles`, I'd be inclined to decref and null them on 1212, where they are last used.\r\n\r\nEither than or line 1235, so all the nulling happens in one place. `Py_CLEAR()` would work to combine the null and decref, althoug is a little unusual for local variables.",
        "createdAt" : "2019-06-28T03:15:36Z",
        "updatedAt" : "2019-06-28T03:16:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a835ee9d-938a-40b9-b3e6-6cbe6fdc750e",
        "parentId" : "b196b9e0-f781-403c-98bf-3ccda574ed3c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Hmm, maybe better. The nicer pattern would be to use the same cleanup code for success and failure path I think, which is why this unnecessary decref got in. But yeah, I can just decref it all there and think about moving things some other day",
        "createdAt" : "2019-06-28T03:28:06Z",
        "updatedAt" : "2019-06-28T03:28:06Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "668361bc-d424-4100-8c3a-b7247101bd9b",
        "parentId" : "b196b9e0-f781-403c-98bf-3ccda574ed3c",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I suppose I could see it either way. I'll let you make the call.\r\n\r\n",
        "createdAt" : "2019-06-28T03:32:32Z",
        "updatedAt" : "2019-06-28T03:32:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5f8876e86a699dc1c43a1369c963916684ec8de",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1307,1311 @@    Py_XDECREF(descrs);\n    Py_XDECREF(offsets);\n    Py_XDECREF(titles);\n    return new;\n"
  },
  {
    "id" : "df87edaf-3fbf-460a-98df-6ef303212f2b",
    "prId" : 13907,
    "prUrl" : "https://github.com/numpy/numpy/pull/13907#pullrequestreview-258604715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adeff33c-3671-4346-9aba-86db4a9c76d4",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Under what circumstances is this cast needed (type is defined as `char*`)?",
        "createdAt" : "2019-07-06T23:40:08Z",
        "updatedAt" : "2019-07-07T12:03:18Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "61457294-1419-4227-a2c1-560405082232",
        "parentId" : "adeff33c-3671-4346-9aba-86db4a9c76d4",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "It seems to me it would be better to catch this in `PyBytes_AsStringAndSize`",
        "createdAt" : "2019-07-06T23:44:15Z",
        "updatedAt" : "2019-07-07T12:03:18Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "793ac0af-5f5f-4df0-8da0-578bc6efd7d5",
        "parentId" : "adeff33c-3671-4346-9aba-86db4a9c76d4",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "ah, no, that is simply the CPython API.",
        "createdAt" : "2019-07-06T23:45:39Z",
        "updatedAt" : "2019-07-07T12:03:18Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "f723325b6f36868dfa483ff777e0447c229ffc42",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1548,1552 @@        if (len == 1) {\n            /* Python byte string characters are unsigned */\n            check_num = (unsigned char) type[0];\n        }\n        /* A kind + size like 'f8' */"
  },
  {
    "id" : "4900cc6c-0ce0-43ce-b0ff-f68361f1993b",
    "prId" : 14144,
    "prUrl" : "https://github.com/numpy/numpy/pull/14144#pullrequestreview-267523710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa54b1a5-190a-4f15-8636-2539187acc67",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Added deliberately to make the error handling a little easier to follow",
        "createdAt" : "2019-07-28T21:40:04Z",
        "updatedAt" : "2019-07-28T21:40:05Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "75016bde471adf1db59e69a604cf8c2e8ae50864",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +515,519 @@            goto fail;\n        }\n\n        if ((PyDict_GetItem(fields, name) != NULL)\n             || (title"
  },
  {
    "id" : "83bdf1f4-b80e-428a-8cc1-8f1f009c7ef5",
    "prId" : 15266,
    "prUrl" : "https://github.com/numpy/numpy/pull/15266#pullrequestreview-338978355",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "379db164-6304-4970-868d-a413caf3e0c1",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Mystery solved, this `ret` was being used uninitialized further down the file, in places where it made no sense to check it anyway.",
        "createdAt" : "2020-01-07T00:22:45Z",
        "updatedAt" : "2020-01-07T00:22:46Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "31bb5d65-9b91-4d0c-9ffe-9aad9363146a",
        "parentId" : "379db164-6304-4970-868d-a413caf3e0c1",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Odd that the compiler warning tests did not find that :(.",
        "createdAt" : "2020-01-07T00:24:55Z",
        "updatedAt" : "2020-01-07T00:24:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "966d96e9-98d3-4227-8972-a8d516f365b8",
        "parentId" : "379db164-6304-4970-868d-a413caf3e0c1",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Well, there was a codepath that set it, so the error was likely something like \"maybe uninitialized\", rather than \"is uninitialized\".",
        "createdAt" : "2020-01-07T00:46:27Z",
        "updatedAt" : "2020-01-07T00:46:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "d11601b3e4a1d4762dbb042d0844276a8f7fe44e",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +1088,1092 @@    for (i = 0; i < n; i++) {\n        PyObject *tup, *descr, *ind, *title, *name, *off;\n        int len, _align = 1;\n        PyArray_Descr *newdescr;\n"
  },
  {
    "id" : "75de2087-e760-4bec-9c1c-e36a2db70f74",
    "prId" : 15284,
    "prUrl" : "https://github.com/numpy/numpy/pull/15284#pullrequestreview-339560183",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0f7afb6-50cf-4efb-8406-82e05c81e14c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "unfortunately this really is reachable at the moment - a future patch will attempt to track down the cases when this happens, and emit the error in a more appropriate place.",
        "createdAt" : "2020-01-07T22:56:13Z",
        "updatedAt" : "2020-01-08T02:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "610fd89ba63f3917d34c8de2b7505219ae70cfa8",
    "line" : 182,
    "diffHunk" : "@@ -1,1 +1507,1511 @@    if (*at == NULL && !PyErr_Occurred()) {\n        _report_generic_error();\n    }\n    return (*at) ? NPY_SUCCEED : NPY_FAIL;\n}"
  },
  {
    "id" : "1f1b1fdc-16f4-417d-b590-513eaeb64dcc",
    "prId" : 15284,
    "prUrl" : "https://github.com/numpy/numpy/pull/15284#pullrequestreview-339579188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a23c4ef7-2de5-4e9c-bfa8-a1b89894999d",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n```\r\nCan you remove this here now?",
        "createdAt" : "2020-01-07T23:25:44Z",
        "updatedAt" : "2020-01-08T02:13:02Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "6ee15591-8e71-4e7a-b033-175c9da562aa",
        "parentId" : "a23c4ef7-2de5-4e9c-bfa8-a1b89894999d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I could, but it does the opposite of what I'm trying to do - the goal is to have each of these helpers set their own error, rather than sloppily rely on the caller to check if we remembered to set an error.\r\n\r\nThis particular error is \"I tried everything and nothing worked\".",
        "createdAt" : "2020-01-07T23:51:23Z",
        "updatedAt" : "2020-01-08T02:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "7e543d32-05a5-477f-bbef-9b4a6a39e915",
        "parentId" : "a23c4ef7-2de5-4e9c-bfa8-a1b89894999d",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "True enough, may help to track down how to get rid of these cases.",
        "createdAt" : "2020-01-07T23:52:37Z",
        "updatedAt" : "2020-01-08T02:13:02Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "610fd89ba63f3917d34c8de2b7505219ae70cfa8",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +1480,1484 @@            return _arraydescr_from_ctypes_type(Py_TYPE(obj));\n        }\n        _report_generic_error();\n        return NULL;\n    }"
  },
  {
    "id" : "197192be-5690-4889-9aaf-6fd3700b3adc",
    "prId" : 15284,
    "prUrl" : "https://github.com/numpy/numpy/pull/15284#pullrequestreview-339586001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2fbd6e5-96f3-416b-9b9d-50535f94e54a",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n            return NULL;\r\n```\r\nThis seems like it was an error, unless setting a new error when one already is set is always OK (I thought it was not on some python versions at least). So maybe we should just clear the error. But maybe its also fine as is.",
        "createdAt" : "2020-01-07T23:40:35Z",
        "updatedAt" : "2020-01-08T02:13:02Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "64bf4d8c-3f1e-43de-8ae8-4d3f6edaf48d",
        "parentId" : "f2fbd6e5-96f3-416b-9b9d-50535f94e54a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> setting a new error when one already is set is always OK\r\n\r\nI'm pretty sure we do it all over the place when replacing an exception with a different one. I'd rather not add that to the pile of bugs I need to think about in this patch.\r\n\r\n> So maybe we should just clear the error.\r\n\r\nI thought about this too, but decided I'd rather leave things the way they currently are for these cleanup patches, and only start fixing them if I get around to improving the error messages.\r\n\r\nThe change you suggest would result in a `UnicodeDecodeError` instead of a `TypeError`, which probably isn't helpful to users.",
        "createdAt" : "2020-01-07T23:56:04Z",
        "updatedAt" : "2020-01-08T02:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5b3f2925-4a2e-4351-adfd-62dc54607c1f",
        "parentId" : "f2fbd6e5-96f3-416b-9b9d-50535f94e54a",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yeah, the DeprecationWarning was what tripped me first. Just keep it as is, for a moment I was just wondering if you changed it earlier accidentally, but doubt that.",
        "createdAt" : "2020-01-08T00:08:27Z",
        "updatedAt" : "2020-01-08T02:13:02Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "fea6f95a-872a-41a0-ad03-086dfdaeaf98",
        "parentId" : "f2fbd6e5-96f3-416b-9b9d-50535f94e54a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Nope, this was here from the beginning, and was of the things I was deliberately steering clear of.",
        "createdAt" : "2020-01-08T00:15:54Z",
        "updatedAt" : "2020-01-08T02:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "610fd89ba63f3917d34c8de2b7505219ae70cfa8",
    "line" : 249,
    "diffHunk" : "@@ -1,1 +1638,1642 @@        PyObject *tmp = PyUnicode_FromEncodedObject(obj, \"ascii\", \"strict\");\n        if (tmp == NULL) {\n            goto fail;\n        }\n        item = PyDict_GetItem(typeDict, tmp);"
  },
  {
    "id" : "ca5bc31a-fbe0-429e-a281-ea5a8eb594da",
    "prId" : 15284,
    "prUrl" : "https://github.com/numpy/numpy/pull/15284#pullrequestreview-339580547",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "feddaf03-4ea3-4873-9ea7-802f0aa041e2",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "The line just one above seems also wrong. Maybe an error in our cleanup, maybe earlier, not sure, but it should be a `return NULL;` here. I assume we do not want to replace deprecation warnings when they are raced (normally). If replacing it trips tests, maybe keep it though.",
        "createdAt" : "2020-01-07T23:42:01Z",
        "updatedAt" : "2020-01-08T02:13:02Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "3debe7f7-9e1d-40e3-a40a-0bb9e22ce516",
        "parentId" : "feddaf03-4ea3-4873-9ea7-802f0aa041e2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Agreed, this looked fishy - but I wanted this patch to not change any semantics.",
        "createdAt" : "2020-01-07T23:56:58Z",
        "updatedAt" : "2020-01-08T02:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "610fd89ba63f3917d34c8de2b7505219ae70cfa8",
    "line" : 252,
    "diffHunk" : "@@ -1,1 +1659,1663 @@                              \"an error in the future.\") < 0) {\n                    goto fail;\n                }\n            }\n        }"
  },
  {
    "id" : "d7b7cae2-e53e-4b37-b1bf-26038e0759fe",
    "prId" : 15284,
    "prUrl" : "https://github.com/numpy/numpy/pull/15284#pullrequestreview-339586260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e69eda54-9cc9-4299-a01e-0a18d664ad44",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I am wondering if we should rename `fail` to `datatype_not_understood`, `fail` could just as well mean that an error is already set for me.",
        "createdAt" : "2020-01-07T23:43:01Z",
        "updatedAt" : "2020-01-08T02:13:02Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "ebf2a67c-59f4-4991-848a-80839b4e95f7",
        "parentId" : "e69eda54-9cc9-4299-a01e-0a18d664ad44",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Perhaps in a future patch. Agreed that the name is confusing. This code is such a mess that its hard to keep things in manageable patches as is, I have maybe 5 different branches all cleaning up similar code locally.",
        "createdAt" : "2020-01-07T23:58:27Z",
        "updatedAt" : "2020-01-08T02:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "688e6102-b1c7-41d1-a1a9-26ce4e9b071b",
        "parentId" : "e69eda54-9cc9-4299-a01e-0a18d664ad44",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Sure, I am impressed you are managing to split up nicely at all...",
        "createdAt" : "2020-01-08T00:16:47Z",
        "updatedAt" : "2020-01-08T02:13:02Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "610fd89ba63f3917d34c8de2b7505219ae70cfa8",
    "line" : 290,
    "diffHunk" : "@@ -1,1 +1684,1688 @@    return ret;\n\nfail:\n    PyErr_Format(PyExc_TypeError,\n            \"data type \\\"%s\\\" not understood\", PyBytes_AS_STRING(obj));"
  },
  {
    "id" : "20140a05-c683-4dd4-935d-2b2bd713237a",
    "prId" : 15287,
    "prUrl" : "https://github.com/numpy/numpy/pull/15287#pullrequestreview-339940768",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cde478a0-e8ac-425b-91a6-8b0eb9d4c279",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "If we want to keep the old behavior, we could change this to\r\n```suggestion\r\n        return _convert_from_any(item, 0);\r\n```",
        "createdAt" : "2020-01-08T15:27:14Z",
        "updatedAt" : "2020-01-08T15:27:15Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "b36db6635969e665a22a602e867702cfcd1764a9",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +1660,1664 @@         * knows what users are injecting into `np.typeDict`.\n         */\n        return _convert_from_any(item, align);\n    }\n"
  },
  {
    "id" : "c5d1f478-746b-47c3-9596-c50c651ff83e",
    "prId" : 15288,
    "prUrl" : "https://github.com/numpy/numpy/pull/15288#pullrequestreview-339955477",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49a15ee6-2665-4035-81a6-2846935cd096",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n            int offset = PyArray_PyIntAsInt(off);\r\n```",
        "createdAt" : "2020-01-08T15:20:08Z",
        "updatedAt" : "2020-01-08T15:24:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "fd9210e4-c9f0-4ce3-b1ac-237920d266ec",
        "parentId" : "49a15ee6-2665-4035-81a6-2846935cd096",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Would rather not fix that type of thing in this patch - `offset` was declared `long` before I moved the declaration, so I'd like this commit to not change its type.",
        "createdAt" : "2020-01-08T15:34:22Z",
        "updatedAt" : "2020-01-08T15:34:22Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "fc28a8f9-22fa-4b91-a6bd-9fc3d80f969f",
        "parentId" : "49a15ee6-2665-4035-81a6-2846935cd096",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Fine, I had missed that it was `long`, because I remembered that the top of the function everything was `int`.",
        "createdAt" : "2020-01-08T15:44:16Z",
        "updatedAt" : "2020-01-08T15:44:17Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "1e20625b-d784-4a6b-9308-5d7926a9fab2",
        "parentId" : "49a15ee6-2665-4035-81a6-2846935cd096",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "... which is exactly the type of mistake I'm trying to avoid making myself by moving the types down to where they're used :)",
        "createdAt" : "2020-01-08T15:46:58Z",
        "updatedAt" : "2020-01-08T15:46:58Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "4660bd3b8bb0619180f01ec78ae49d23354a8ab5",
    "line" : 367,
    "diffHunk" : "@@ -1,1 +1102,1106 @@                goto fail;\n            }\n            long offset = PyArray_PyIntAsInt(off);\n            if (error_converting(offset)) {\n                Py_DECREF(off);"
  },
  {
    "id" : "7ea70d5c-8e91-4ab5-bba3-9511a698fce6",
    "prId" : 15291,
    "prUrl" : "https://github.com/numpy/numpy/pull/15291#pullrequestreview-340903432",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38725efd-6561-4715-b117-b008e1572dd2",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is probably the only testable path, and I'm not sure it's worth the effort.",
        "createdAt" : "2020-01-10T00:53:17Z",
        "updatedAt" : "2020-01-10T00:53:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "bec92c201c708e13265b935318ca0f585264a92e",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +600,604 @@    }\n    if (n == 0) {\n        PyErr_SetString(PyExc_ValueError, \"Expected at least one field name\");\n        return NULL;\n    }"
  },
  {
    "id" : "044127c1-60c5-4e5a-b3a0-7f31c1019ca0",
    "prId" : 15310,
    "prUrl" : "https://github.com/numpy/numpy/pull/15310#pullrequestreview-341438710",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6deb8dbf-f784-44b2-9c32-de272b69c941",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I could make this respect alignment by adding an `align` argument to `_try_convert_from_dtype_attr`, but we'd then need to plumb that through `PyArray_DescrFromTypeObject` too, and the whole thing wouldn't make much sense anyway - user types are unlikely to have separate aligned and unaligned variants.\r\n\r\nAt any rate, this matches the old behavior.",
        "createdAt" : "2020-01-10T19:00:54Z",
        "updatedAt" : "2020-01-10T19:03:19Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a93e70c2-8a11-434d-bb34-7c9bad8ea3df",
        "parentId" : "6deb8dbf-f784-44b2-9c32-de272b69c941",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK, lets keep old behaviours for now in any case. If you wanted, we could add a comment, or even issue. But my guess is that it is not worth the trouble right now.",
        "createdAt" : "2020-01-10T21:44:35Z",
        "updatedAt" : "2020-01-10T21:56:58Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cd5a88c130894d3916c1cb174b1e73f10dac232",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +125,129 @@    }\n\n    PyArray_Descr *newdescr = _convert_from_any(dtypedescr, 0);\n    Py_DECREF(dtypedescr);\n    Py_LeaveRecursiveCall();"
  },
  {
    "id" : "8197c635-356c-4fa4-bb89-c8f656952034",
    "prId" : 15310,
    "prUrl" : "https://github.com/numpy/numpy/pull/15310#pullrequestreview-341360116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1837e8e1-2cfa-4cee-a94e-6a7858edeadf",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This fixes an extension of the bug in similar nonsensical code to https://github.com/numpy/numpy/pull/15287#issue-360237537, namely\r\n```python\r\nnp.typeDict['mypoint'] = [('a', 'i1'), ('b', 'i2')]\r\nassert np.dtype('mypoint,', align=True).isalignedstruct\r\n```\r\n(xref gh-15296)\r\n",
        "createdAt" : "2020-01-10T19:03:03Z",
        "updatedAt" : "2020-01-10T19:03:40Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cd5a88c130894d3916c1cb174b1e73f10dac232",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +730,734 @@    }\n    if (PyList_GET_SIZE(listobj) == 1) {\n        res = _convert_from_any(PyList_GET_ITEM(listobj, 0), align);\n    }\n    else {"
  },
  {
    "id" : "b0cef322-2465-480d-b3b8-62c6629aee2d",
    "prId" : 15333,
    "prUrl" : "https://github.com/numpy/numpy/pull/15333#pullrequestreview-343397317",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ce3883c-71dc-47e3-adc5-186e99cf75a5",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I wonder if that can actually happen, hehe :) (not that it matters). EDIT: Ah, I suppose it can if the dictionary includes weird stuff as keys...",
        "createdAt" : "2020-01-15T17:35:28Z",
        "updatedAt" : "2020-01-15T17:35:54Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b129a5981f025f50ca7b607e73fe508fbecde5a",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +1230,1234 @@                }\n                else if (PyErr_Occurred()) {\n                    /* MemoryError during dict lookup */\n                    goto fail;\n                }"
  },
  {
    "id" : "e32e291f-4174-4548-8aac-45b7d67d5836",
    "prId" : 15484,
    "prUrl" : "https://github.com/numpy/numpy/pull/15484#pullrequestreview-351911260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b94fe400-a40b-42f8-bbed-7837c325a2ec",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Could be one line if you fix indentation.",
        "createdAt" : "2020-02-02T00:11:55Z",
        "updatedAt" : "2020-02-02T00:15:21Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc2b217b5a7c98c38450552120c26cc3c2061a67",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +462,466 @@        else {\n            PyErr_SetString(PyExc_TypeError, \n\t\t\t            \"First element of field tuple is \"\n\t\t\t            \"neither a tuple nor str\");\n            goto fail;"
  },
  {
    "id" : "ac184d57-11af-4f16-a8c2-44431147f32e",
    "prId" : 15484,
    "prUrl" : "https://github.com/numpy/numpy/pull/15484#pullrequestreview-351911260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1dc398d-fb42-42a7-92c2-29c0c1ae9ec8",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Could put this on the previous line (and indentation is a bit funny).",
        "createdAt" : "2020-02-02T00:12:21Z",
        "updatedAt" : "2020-02-02T00:15:21Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "f3f6b373-4b83-4d68-8082-bbfa6414a54d",
        "parentId" : "a1dc398d-fb42-42a7-92c2-29c0c1ae9ec8",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "(Same applies in the above cases)",
        "createdAt" : "2020-02-02T00:14:15Z",
        "updatedAt" : "2020-02-02T00:15:21Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc2b217b5a7c98c38450552120c26cc3c2061a67",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +450,454 @@\t\t\t\t\"If a tuple, the first element of a field tuple must have \"\n\t\t\t\t\"two elements, not %zd\",\n\t\t\t       \tPyTuple_GET_SIZE(name));\n                goto fail;\n            }"
  },
  {
    "id" : "beed8e42-aa3b-4c93-947b-76285a677ab5",
    "prId" : 17536,
    "prUrl" : "https://github.com/numpy/numpy/pull/17536#pullrequestreview-509286792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e78ad06b-08e9-4700-b717-a5bc7ae95277",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "It would be good to add a test for this case too. Something like\r\n```\r\nd = dict(names=['self'], formats=[None], offsets=[0])\r\nd['formats'][0] = d\r\nnp.dtype(d)  # stack overflow\r\n```",
        "createdAt" : "2020-10-15T11:40:49Z",
        "updatedAt" : "2020-10-16T15:44:36Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e3fcf642a0aeae03c12fad325ceaf75235b24bc",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1524,1528 @@                \" a dict object\" ) != 0) {\n            return NULL;\n        }\n        PyArray_Descr *ret = _convert_from_dict(obj, align);\n        Py_LeaveRecursiveCall();"
  }
]