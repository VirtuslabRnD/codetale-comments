[
  {
    "id" : "f20da939-b44e-4f31-957f-e1a9e9bf0651",
    "prId" : 4637,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8fd53af-bc35-4942-a576-48ffb58fb1c6",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I can see `methods.c` needs a style cleanup ;) Didn't get that done before the original file was broken into parts and never was sure which parts remained undone.\n",
        "createdAt" : "2014-04-24T20:58:03Z",
        "updatedAt" : "2014-05-01T13:40:12Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "64af3fdd0fac08e01877a56faff5f3c6d4ac3a1b",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +356,360 @@  Get a subset of bytes from each element of the array\n  steals reference to typed, must not be NULL\n*/\nNPY_NO_EXPORT PyObject *\nPyArray_GetField(PyArrayObject *self, PyArray_Descr *typed, int offset)"
  },
  {
    "id" : "f194e5f7-6dcd-4117-808f-d37a4c46ade4",
    "prId" : 5548,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab831ffe-26a8-467e-8488-efbc53c6cf73",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "Interesting approach. Perhaps it warrants an explanatory comment that the return is a view, not a copy?\n",
        "createdAt" : "2015-03-15T01:35:32Z",
        "updatedAt" : "2015-06-05T05:14:57Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2cd6fa869cec6d92062fb687d8e6952c1202017",
    "line" : null,
    "diffHunk" : "@@ -1,1 +428,432 @@\n    /* getfield returns a view we can write to */\n    ret = PyArray_GetField(self, dtype, offset);\n    if (ret == NULL) {\n        return -1;"
  },
  {
    "id" : "1553e53a-0564-4373-9998-c529a684fe9b",
    "prId" : 8977,
    "prUrl" : "https://github.com/numpy/numpy/pull/8977#pullrequestreview-66346129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12360e44-a81e-4885-8ad0-2aab16870624",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Seems sensible, but why was it done differently before?",
        "createdAt" : "2017-10-01T20:17:08Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4ec977fc-84c9-4b28-93fa-8f1ff967c9c0",
        "parentId" : "12360e44-a81e-4885-8ad0-2aab16870624",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "To avoid recalculating `num`, most likely",
        "createdAt" : "2017-10-01T20:24:37Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6d2cd3870ba832973f85057d8d4735c99f18baa",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +1828,1832 @@            if (swap) {\n                /* byte-swap on pickle-read */\n                npy_intp numels = PyArray_SIZE(self);\n                PyArray_DESCR(self)->f->copyswapn(PyArray_DATA(self),\n                                        PyArray_DESCR(self)->elsize,"
  },
  {
    "id" : "9abe6e74-968e-4d71-b8ce-22543b6c3cfb",
    "prId" : 11246,
    "prUrl" : "https://github.com/numpy/numpy/pull/11246#pullrequestreview-126367132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2ce5549-6cbc-4990-8a33-fe1620fc2a5d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Here too, base and obj are different",
        "createdAt" : "2018-06-06T06:41:58Z",
        "updatedAt" : "2018-06-07T16:50:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e4a57b67-0430-40a5-9477-ba679fae572a",
        "parentId" : "a2ce5549-6cbc-4990-8a33-fe1620fc2a5d",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "This place I just say is one I wish didn't exist ...  `ndarray.__array_wrap__` does things it has no right to do!  But that is of course not relevant for this PR.",
        "createdAt" : "2018-06-06T13:12:24Z",
        "updatedAt" : "2018-06-07T16:50:31Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0b2f3a5ee665ba68235c9f8e9503b294748b8e1",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +879,883 @@                PyArray_DIMS(arr),\n                PyArray_STRIDES(arr), PyArray_DATA(arr),\n                PyArray_FLAGS(arr), (PyObject *)self, obj);\n    } else {\n        /*The type was set in __array_prepare__*/"
  },
  {
    "id" : "7435e29c-ed03-4318-85c4-315d6a74e6cc",
    "prId" : 12609,
    "prUrl" : "https://github.com/numpy/numpy/pull/12609#pullrequestreview-244601916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ce6d1d9-493c-4bbd-b6ee-4c73ff755e6b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Should this clear warn_on_write too? If the caller sets the result of `broadcast_arrays` to have `result.flags.writeable = False`, it seems to me that the warning is not needed.",
        "createdAt" : "2019-06-01T21:30:01Z",
        "updatedAt" : "2019-06-28T01:02:22Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7559f864dc0237a002d9dbf6ce1f4630aa7857a",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +2541,2545 @@        }\n        else {\n            PyArray_CLEARFLAGS(self, NPY_ARRAY_WRITEABLE);\n            PyArray_CLEARFLAGS(self, NPY_ARRAY_WARN_ON_WRITE);\n        }"
  },
  {
    "id" : "93e56c4e-fdbc-46d4-8c4e-7a40b69f4a87",
    "prId" : 12624,
    "prUrl" : "https://github.com/numpy/numpy/pull/12624#pullrequestreview-188759883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8db04585-21fe-4488-940c-c98e0d2364ae",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Shouldn't this be `Py_XDECREF` or can `name` never be `NULL`?",
        "createdAt" : "2019-01-02T17:21:16Z",
        "updatedAt" : "2019-01-02T19:17:23Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "46c27395-9fc7-4a4c-bc50-971e5979fe64",
        "parentId" : "8db04585-21fe-4488-940c-c98e0d2364ae",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "This is the same as in `sort`. I do not think the name can be possibly be `NULL` for structured dtypes. And it will only go into this branch if it is a structured dtype.",
        "createdAt" : "2019-01-02T17:26:48Z",
        "updatedAt" : "2019-01-02T19:17:23Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4732c1be2da093711ab544f6e0a302b9d7ee4bcb",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1382,1386 @@        }\n        newd = PyArray_DescrNew(saved);\n        Py_DECREF(newd->names);\n        newd->names = new_name;\n        ((PyArrayObject_fields *)self)->descr = newd;"
  },
  {
    "id" : "2df164c2-91ab-4be1-bc56-6e36b3b85e6a",
    "prId" : 12624,
    "prUrl" : "https://github.com/numpy/numpy/pull/12624#pullrequestreview-188758281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "293faa58-8fcb-4b2a-87d4-21ca81301e79",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "`Py_XDECREF` ?",
        "createdAt" : "2019-01-02T17:21:32Z",
        "updatedAt" : "2019-01-02T19:17:23Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "4732c1be2da093711ab544f6e0a302b9d7ee4bcb",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1437,1441 @@        }\n        newd = PyArray_DescrNew(saved);\n        Py_DECREF(newd->names);\n        newd->names = new_name;\n        ((PyArrayObject_fields *)self)->descr = newd;"
  },
  {
    "id" : "6455808d-5e10-484c-bf24-5c8c5ff74ea7",
    "prId" : 12748,
    "prUrl" : "https://github.com/numpy/numpy/pull/12748#pullrequestreview-194372119",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4c5dff6-d540-4afd-9e10-a2632d2139b2",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "The PEP says _\"PickleBuffer can wrap any kind of buffer, including non-contiguous buffers.\"_. Am I missing something?",
        "createdAt" : "2019-01-19T22:00:16Z",
        "updatedAt" : "2019-01-22T09:17:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d0beaf69-555c-4b72-bba8-5106886edcaf",
        "parentId" : "a4c5dff6-d540-4afd-9e10-a2632d2139b2",
        "authorId" : "4d247404-3edc-44db-9c1a-e6671fa3608e",
        "body" : "Only contiguous buffers are correctly handled by the `pickle` module, though.\r\n(this is something that should probably be improved in the future, but is non-trivial)",
        "createdAt" : "2019-01-19T22:10:10Z",
        "updatedAt" : "2019-01-22T09:17:43Z",
        "lastEditedBy" : "4d247404-3edc-44db-9c1a-e6671fa3608e",
        "tags" : [
        ]
      },
      {
        "id" : "5175459e-d252-4422-978a-a2b1a087ef33",
        "parentId" : "a4c5dff6-d540-4afd-9e10-a2632d2139b2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Is that mentioned in the PEP, pickle docs, or cpython bug tracker?",
        "createdAt" : "2019-01-19T22:12:52Z",
        "updatedAt" : "2019-01-22T09:17:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e27e1dd8-0433-4fff-a1b5-ef335a707966",
        "parentId" : "a4c5dff6-d540-4afd-9e10-a2632d2139b2",
        "authorId" : "4d247404-3edc-44db-9c1a-e6671fa3608e",
        "body" : "No, I have to update the PEP.",
        "createdAt" : "2019-01-19T22:15:40Z",
        "updatedAt" : "2019-01-22T09:17:43Z",
        "lastEditedBy" : "4d247404-3edc-44db-9c1a-e6671fa3608e",
        "tags" : [
        ]
      }
    ],
    "commit" : "7801e07b8fe3e28b12136302b0c6556adbf990ae",
    "line" : 234,
    "diffHunk" : "@@ -1,1 +1855,1859 @@        PyDataType_ISUNSIZED(descr)) {\n        /* The PickleBuffer class from version 5 of the pickle protocol\n         * can only be used for arrays backed by a contiguous data buffer.\n         * For all other cases we fallback to the generic array_reduce\n         * method that involves using a temporary bytes allocation. */"
  },
  {
    "id" : "b060881b-e950-4844-bbc3-6d7068ba4a9d",
    "prId" : 12748,
    "prUrl" : "https://github.com/numpy/numpy/pull/12748#pullrequestreview-407918662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e07af65c-1dbf-4df9-861c-4a95efcb5a78",
        "parentId" : null,
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "Is there a reason we expect this not to work with a later Python pickle protocol?",
        "createdAt" : "2020-05-08T00:14:24Z",
        "updatedAt" : "2020-05-08T00:14:24Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "7801e07b8fe3e28b12136302b0c6556adbf990ae",
    "line" : 244,
    "diffHunk" : "@@ -1,1 +1865,1869 @@    else {\n        PyErr_Format(PyExc_ValueError,\n                     \"__reduce_ex__ called with protocol > 5\");\n        return NULL;\n    }"
  },
  {
    "id" : "7692551a-3ec9-404e-9f18-57c70896184d",
    "prId" : 12905,
    "prUrl" : "https://github.com/numpy/numpy/pull/12905#pullrequestreview-247356595",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9dd21f83-e921-4fa7-a1f5-939496faa04a",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "What would go wrong if we removed this `if` entirely, I wonder? That is, keep only the else branch. Something for a follow-up, perhaps",
        "createdAt" : "2019-06-08T05:59:25Z",
        "updatedAt" : "2019-06-08T06:00:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e19ad1548e6c10bc174126bb748ee771b0c38ed",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2044,2048 @@                if (!(PyArray_ISEXTENDED(self) ||\n                      PyArray_DESCR(self)->metadata ||\n                      PyArray_DESCR(self)->c_metadata)) {\n                    fa->descr = PyArray_DescrFromType(\n                                    PyArray_DESCR(self)->type_num);"
  }
]