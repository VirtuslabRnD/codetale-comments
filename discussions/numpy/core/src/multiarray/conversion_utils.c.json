[
  {
    "id" : "d41703f1-8dc8-44f7-9587-cca326ea4d08",
    "prId" : 3243,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad4f5ccb-5723-46af-9dd6-776621552946",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "`is_valid_conversion` or some such might be a better name. That said, I like the original better is it makes clear the combination of a -1 return value and `PyErr_Occurred`. Might be better to have a function that combined the conversion with the error detection so the two can't become separated. Maybe `NpyInt_AsAxis(tmp, &axis)` or some such.\n",
        "createdAt" : "2013-04-15T17:47:50Z",
        "updatedAt" : "2013-06-09T15:10:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "7ba81768-4440-456c-a29f-7b097ecef1b3",
        "parentId" : "ad4f5ccb-5723-46af-9dd6-776621552946",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Make that `PyArray_PyIntAsAxis`.\n",
        "createdAt" : "2013-04-15T17:52:59Z",
        "updatedAt" : "2013-06-09T15:10:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "714d69bd-e95e-4b92-975a-e89e2735fb0b",
        "parentId" : "ad4f5ccb-5723-46af-9dd6-776621552946",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Can change it back to the -1 thing. the error_converting is used in some places across numpy and is just a macro anyway. A new public conversion function for a single axes or even integer/intp, or what do you suggest?\n",
        "createdAt" : "2013-04-15T18:23:34Z",
        "updatedAt" : "2013-06-09T15:10:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "ba71c3e0-07ea-411f-b723-be27e11390d0",
        "parentId" : "ad4f5ccb-5723-46af-9dd6-776621552946",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Because the error should be checked immediately after the conversion, I think it is a bad idea to separate the two. The name is up for grabs and I don't think it needs to be exposed, but if the variable receiving the result is passed by reference then the function return can be used for an error flag. So I think the `PyErr_Occurred` check should be part of the conversion so you could do\n\n```\nif (pyint_as_axis(obj, &axis) < 0) {\n    PyErr_Format(...);\n    return -1;\n}\n```\n\nMakes it more like a converter. \n",
        "createdAt" : "2013-04-15T18:54:45Z",
        "updatedAt" : "2013-06-09T15:10:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "163f6df5a6668d06cb7abfe38dbd03d19b26d6f3",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +230,234 @@            int axis = PyArray_PyIntAsInt(tmp);\n            int axis_orig = axis;\n            if (error_converting(axis)) {\n                return NPY_FAIL;\n            }"
  },
  {
    "id" : "0eb46f18-4fcd-4f4e-bc76-fa152f197200",
    "prId" : 3360,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6705e71-cfe5-4389-a513-e96ffb872cad",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Maybe \"select kind\", since \"kind\" is like a keyword.\n",
        "createdAt" : "2013-08-02T22:53:48Z",
        "updatedAt" : "2013-08-12T12:26:07Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "76f1809f-c876-4cd8-8478-d7ed3beccee8",
        "parentId" : "b6705e71-cfe5-4389-a513-e96ffb872cad",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "should the sort be changed too? it uses the same wording\n",
        "createdAt" : "2013-08-12T12:24:34Z",
        "updatedAt" : "2013-08-12T12:26:07Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "74654ee7-0ed7-4961-914a-28b8ee32f096",
        "parentId" : "b6705e71-cfe5-4389-a513-e96ffb872cad",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Let's leave it. In morning light the suggestion doesn't look like much of an improvement.\n",
        "createdAt" : "2013-08-12T13:23:21Z",
        "updatedAt" : "2013-08-12T13:23:21Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d9cd695486fa095c6bff3238341a85cbdb47d0e",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +436,440 @@    else {\n        PyErr_Format(PyExc_ValueError,\n                     \"%s is an unrecognized kind of select\",\n                     str);\n        Py_XDECREF(tmp);"
  },
  {
    "id" : "edfa9ac2-623e-40c2-ba8d-74608996b667",
    "prId" : 3678,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc302668-f261-4941-bc49-e24d823159f2",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Strictly speaking, we should probably check for equality of precision with long and long long, and generate a compile error if neither is met, as the overflow check provided by the `PyLong_As...` calls will not be valid in that case. \n",
        "createdAt" : "2013-09-04T03:38:42Z",
        "updatedAt" : "2013-09-04T03:38:58Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c8eb4eb396bd5227f2d8298ce60be0c4848fe0e",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +726,730 @@PyArray_PyIntAsIntp(PyObject *o)\n{\n#if (NPY_SIZEOF_LONG < NPY_SIZEOF_INTP)\n    long long long_value = -1;\n#else"
  },
  {
    "id" : "080c6819-3860-4806-bc3a-9d24fedb2b9c",
    "prId" : 3827,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80d4fadf-efa1-453c-9ea4-942442d69164",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Is it necessary for compatibility?\n",
        "createdAt" : "2013-09-28T19:47:18Z",
        "updatedAt" : "2013-09-28T19:47:18Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "9c0fd468-b35b-43dc-83e3-de68a254047b",
        "parentId" : "80d4fadf-efa1-453c-9ea4-942442d69164",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I think it is necessary, the only thing that one could maybe argue that the array should instead hold the `view` as `base` (which also holds a reference to the object), but since view is not a python object...\n",
        "createdAt" : "2013-09-29T00:28:59Z",
        "updatedAt" : "2013-09-29T00:28:59Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "fc3bd043-c6e1-41ff-b524-47615ccc9f4c",
        "parentId" : "80d4fadf-efa1-453c-9ea4-942442d69164",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Yes, strictly speaking, releasing the buffer here is wrong. The correct fix would be to have a \"managed buffer object\" that releases the buffer when its refcount drops to 0. In other places in Numpy, we use the python memoryview object for that --- but it has no mechanism for requiring the contiguity. So we'd need to steal the managed buffer implementation from CPython sources...\n",
        "createdAt" : "2013-09-29T10:49:55Z",
        "updatedAt" : "2013-09-29T10:49:55Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "28f4740d-089e-4ed4-9c03-6bf18d1f41cd",
        "parentId" : "80d4fadf-efa1-453c-9ea4-942442d69164",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "TODO in gh-3831\n",
        "createdAt" : "2013-09-29T10:53:19Z",
        "updatedAt" : "2013-09-29T10:53:19Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "3820f9e9c97560ec672dc1ba3b32bc2c38dcc15f",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +176,180 @@     * no strict guarantee that the buffer sticks around after being released.\n     */\n    PyBuffer_Release(&view);\n\n    /* Point to the base of the buffer object if present */"
  },
  {
    "id" : "eee7b700-6ef5-4edf-a47a-136b331fb9f5",
    "prId" : 6036,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbfbc0b3-6221-4bcc-983b-3ad68bf9b361",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Heh, clever ;)\n",
        "createdAt" : "2015-07-03T04:15:53Z",
        "updatedAt" : "2015-07-03T04:15:53Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "d3d9e076-0e9e-4436-b2f7-5603387501c5",
        "parentId" : "cbfbc0b3-6221-4bcc-983b-3ad68bf9b361",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Need to unindent all those labels someday.\n",
        "createdAt" : "2015-07-03T04:18:00Z",
        "updatedAt" : "2015-07-03T04:18:00Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb4682a091e9652bfd886a686b3fa85a9636028d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +904,908 @@    }\n\n    goto overflow_check; /* silence unused warning */\n overflow_check:\n#if (NPY_SIZEOF_LONG < NPY_SIZEOF_INTP)"
  },
  {
    "id" : "d94c792a-258c-46b6-91a3-25f327555a43",
    "prId" : 8584,
    "prUrl" : "https://github.com/numpy/numpy/pull/8584#pullrequestreview-20839214",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9611c50-6d07-41a6-b8b1-37f6a00fab18",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Here and below: check for status using `!= 0`? Or just omit the comparison altogether (as above in `error_converting(axis)`",
        "createdAt" : "2017-02-08T19:01:43Z",
        "updatedAt" : "2017-02-20T22:03:54Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d6ec65c925ebef5e0567708de1d16df39077c9d",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +263,267 @@                return NPY_FAIL;\n            }\n            if (check_and_adjust_axis(&axis, ndim) < 0) {\n                return NPY_FAIL;\n            }"
  },
  {
    "id" : "2e0d9ad0-2265-4059-9258-18c621224167",
    "prId" : 16008,
    "prUrl" : "https://github.com/numpy/numpy/pull/16008#pullrequestreview-396846947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c1a2abb-f7c8-4296-8bed-5b8911107748",
        "parentId" : null,
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "do we need to call `Py_XDECREF(str)` here?",
        "createdAt" : "2020-04-20T20:46:47Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "94295627-2855-493a-9df2-9e4b57c48673",
        "parentId" : "6c1a2abb-f7c8-4296-8bed-5b8911107748",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "No, because  `str` is a `char const *`!",
        "createdAt" : "2020-04-20T21:24:47Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "6f241465-0b8f-4e82-9d93-3fcf11a66abd",
        "parentId" : "6c1a2abb-f7c8-4296-8bed-5b8911107748",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n                \"%s() %s (got %R)\", name, message, object);\r\n```\r\nBefore, I forget it on the real pass. I personally like the brackets and python typically puts them. Since we don't access `str` here, we are fine with references yeah.",
        "createdAt" : "2020-04-20T21:31:17Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "b51bbdb3-19c2-4c12-9a91-6917312601bb",
        "parentId" : "6c1a2abb-f7c8-4296-8bed-5b8911107748",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "> No, because `str` is a `char const *`!\r\n\r\nmy bad, not sure what i was looking at :) ",
        "createdAt" : "2020-04-20T21:34:18Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "4404263c-e631-4ff8-bc47-2482a180f779",
        "parentId" : "6c1a2abb-f7c8-4296-8bed-5b8911107748",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "@seberg, I would vote against parens because this is not a function or class name",
        "createdAt" : "2020-04-20T22:06:50Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "35b0a051c19265f5643f6011ee11e31d30c8bc4c",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +362,366 @@    if (ret < 0) {\n            PyErr_Format(PyExc_ValueError,\n                \"%s %s (got %R)\", name, message, object);\n        return NPY_FAIL;\n    }"
  },
  {
    "id" : "8073b29f-b7c3-4bc0-8466-272c91b4c8c0",
    "prId" : 16008,
    "prUrl" : "https://github.com/numpy/numpy/pull/16008#pullrequestreview-398370849",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8b01862-4689-4673-933e-bcffe95877a2",
        "parentId" : null,
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "will skipping the NULL check cause any issue fo C API users?",
        "createdAt" : "2020-04-20T21:12:05Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "28a89cd4-538e-493f-85bc-7cde227808eb",
        "parentId" : "a8b01862-4689-4673-933e-bcffe95877a2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "No reasonable c API user should be passing `NULL`.\r\nProbably worth checking to see if we've set a precedent with other converter functions.",
        "createdAt" : "2020-04-20T21:26:23Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "39f4bbc3-9dc5-447c-9cdd-677439b3cfb4",
        "parentId" : "a8b01862-4689-4673-933e-bcffe95877a2",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yeah, was also a bit confused for a second. Initializing `NPY_ORDER` to anything you like is fine, but passing `NULL` really is very weird. It is also very unlikely, since in most cases these type of functions should be just passed into the Python machinery (users rarely call them directly).\r\nThat said, yes, someone could in theory segfault here, but at least that is a loud error, so I do not care much either way.",
        "createdAt" : "2020-04-20T21:34:16Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "d8382bf2-f38c-4b79-8a11-fbe0c173924e",
        "parentId" : "a8b01862-4689-4673-933e-bcffe95877a2",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "with the previous code and NULL argument this returns NPY_SUCCEED and i think now it will return NPY_FAIL. Is this not considered a breaking change, or are we saying that its not going to impact any users probably, so its fine to do it ?",
        "createdAt" : "2020-04-22T16:16:45Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "e2fc1b48-4e89-49a5-87fa-2b2ab9ec0b95",
        "parentId" : "a8b01862-4689-4673-933e-bcffe95877a2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "The typical use of these functions (both by us and in downstream code) is something like `PyArg_ParseTuple(args, \"O&\", PyArray_OrderConverter, &order))`.\r\nFor `object` to be `NULL`, `args` would have to be a tuple containing `NULL` elements, which is not a legal tuple object.\r\n\r\nAnother question is whether we call it `PyArray_OrderConverter` directly internally. We do, in exactly one place in `array_einsum`, but again it's guaranteed that `object` is non-null.\r\n\r\nSo the only case that would actually matter is users using `PyArray_OrderConverter` directly. The default should be to assume that any `PyObject *` argument must be non-null unless explicitly documented otherwise. We don't document that, so I think this change is safe.",
        "createdAt" : "2020-04-22T16:24:20Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "dfb05540-49b1-428f-b50b-bf4bff2852ce",
        "parentId" : "a8b01862-4689-4673-933e-bcffe95877a2",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "thanks for the explanation @eric-wieser !\r\n\r\n> The default should be to assume that any PyObject * argument must be non-null unless explicitly documented otherwise. \r\n\r\nIs this documented somewhere in python c api docs/numpy c api docs or is it a standard practice that numpy and python C API users follow ?",
        "createdAt" : "2020-04-22T16:34:48Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      }
    ],
    "commit" : "35b0a051c19265f5643f6011ee11e31d30c8bc4c",
    "line" : 364,
    "diffHunk" : "@@ -1,1 +560,564 @@{\n    /* Leave the desired default from the caller for Py_None */\n    if (object == Py_None) {\n        return NPY_SUCCEED;\n    }"
  },
  {
    "id" : "7a38c248-4033-446a-9ba3-d12c53e39fe0",
    "prId" : 16008,
    "prUrl" : "https://github.com/numpy/numpy/pull/16008#pullrequestreview-400518341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebe3447d-439c-4293-a356-bc060339f19a",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\nstatic int\r\nbyteorder_parser(char const *str, Py_ssize_t length, void *data)\r\n```",
        "createdAt" : "2020-04-25T23:09:20Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "d918e82f-a1aa-4068-9760-abf610891f37",
        "parentId" : "ebe3447d-439c-4293-a356-bc060339f19a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Throughout, I assume",
        "createdAt" : "2020-04-26T06:55:11Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "af4e9815-a7b8-4bc9-9ced-54b8541f4513",
        "parentId" : "ebe3447d-439c-4293-a356-bc060339f19a",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Sure, I meant the last return in this function. It is unreachable code, but lets things pass silently if there was a bug above. It doesn't matter much...",
        "createdAt" : "2020-04-26T15:06:28Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "f2a773ad-3708-4265-b4cb-e8a15c9db462",
        "parentId" : "ebe3447d-439c-4293-a356-bc060339f19a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you put a comment on the line you believe to be unreachable? I assume this is following on from a different thread.",
        "createdAt" : "2020-04-26T15:44:03Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "35b0a051c19265f5643f6011ee11e31d30c8bc4c",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +368,372 @@}\n\nstatic int byteorder_parser(char const *str, Py_ssize_t length, void *data)\n{\n    char *endian = (char *)data;"
  },
  {
    "id" : "d552a9da-7ee2-41e1-a8bd-4ab064be0cf6",
    "prId" : 16008,
    "prUrl" : "https://github.com/numpy/numpy/pull/16008#pullrequestreview-400514420",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c11d722d-1e2b-4f8a-ae54-c9c11e719f17",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n            \"%s must be a 'str', not '%s'\", name, Py_TYPE(object)->tp_name);\r\n```\r\nI suppose in theory this is off for `np.WRAP`, etc. but, those are so weird, that I do not care.",
        "createdAt" : "2020-04-25T23:21:49Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "e686e6f0-a30e-4e77-8132-0c9e1804e2f9",
        "parentId" : "c11d722d-1e2b-4f8a-ae54-c9c11e719f17",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Spelt it this way because it matches what I recall as the behavior of `PyArg_ParseTuple`.",
        "createdAt" : "2020-04-26T06:54:45Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0da9df79-8a80-4310-ab9b-733e6be09390",
        "parentId" : "c11d722d-1e2b-4f8a-ae54-c9c11e719f17",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Fair enough, indeed closer to that one. For int the errors read a bit more like that. Except that they only put the quotes on the user provided type ;). Some of the errors use `%50s`, not that it should matter in practice.",
        "createdAt" : "2020-04-26T15:05:20Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "35b0a051c19265f5643f6011ee11e31d30c8bc4c",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +347,351 @@    else {\n        PyErr_Format(PyExc_TypeError,\n            \"%s must be str, not %s\", name, Py_TYPE(object)->tp_name);\n        return NPY_FAIL;\n    }"
  },
  {
    "id" : "11c0d396-6f7a-49c5-8d34-2e18a6a325b4",
    "prId" : 16008,
    "prUrl" : "https://github.com/numpy/numpy/pull/16008#pullrequestreview-400466513",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3eee79e7-49d5-4df9-a5f2-e4be82e3ff1d",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Why the `length == 2` its not like it micro-optimizes even, since that would be the error path?",
        "createdAt" : "2020-04-26T01:37:24Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "08939671-0e4e-4b4c-9a87-efd002f5c74f",
        "parentId" : "3eee79e7-49d5-4df9-a5f2-e4be82e3ff1d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Because otherwise we allow trailing nulls.",
        "createdAt" : "2020-04-26T06:53:29Z",
        "updatedAt" : "2020-04-27T11:13:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "35b0a051c19265f5643f6011ee11e31d30c8bc4c",
    "line" : 506,
    "diffHunk" : "@@ -1,1 +680,684 @@    switch (str[2]) {\n    case 0:\n        if (length == 2 && strcmp(str, \"no\") == 0) {\n            *casting = NPY_NO_CASTING;\n            return 0;"
  },
  {
    "id" : "a67982f7-1d2c-4aa5-ae3e-2ea519dcee82",
    "prId" : 16056,
    "prUrl" : "https://github.com/numpy/numpy/pull/16056#pullrequestreview-416839099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36edaa64-f8c9-4ad2-887d-0b7febf30ec7",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```suggestion\r\n        /* str_func returns -1 without an exception if the value is wrong */\r\n        if (!PyErr_Occurred()) {\r\n```",
        "createdAt" : "2020-05-22T11:26:33Z",
        "updatedAt" : "2020-06-05T19:40:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "e47680f850ec978be2959d372c964fdee49db9cc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +373,377 @@    if (ret < 0) {\n        /* str_func returns -1 without an exception if the value is wrong */\n        if (!PyErr_Occurred()) {\n            PyErr_Format(PyExc_ValueError,\n                \"%s %s (got %R)\", name, message, object);"
  },
  {
    "id" : "8adb12a4-c78c-4a28-8fd9-f3d0378f2bfd",
    "prId" : 17492,
    "prUrl" : "https://github.com/numpy/numpy/pull/17492#pullrequestreview-571129623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26a107c5-4e75-448c-be9c-1a0f31442293",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```suggestion\r\n        /* Numpy 1.21, 2021-01-19 */\r\n        if (DEPRECATE(\"inexact matches and case insensitive matches for \"\r\n```",
        "createdAt" : "2021-01-19T10:59:16Z",
        "updatedAt" : "2021-03-18T19:03:46Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "89de3d9d21e38e4070681e455d98575df3f3b51f",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +745,749 @@    if (!is_exact) {\n        /* Numpy 1.21, 2021-01-19 */\n        if (DEPRECATE(\"inexact matches and case insensitive matches for \"\n                      \"convolve/correlate mode are deprecated, please \"\n                      \"use one of 'valid', 'same', or 'full' instead.\") < 0) {"
  },
  {
    "id" : "6185593c-e70d-4b06-b0f5-f050c8ae4b2c",
    "prId" : 17492,
    "prUrl" : "https://github.com/numpy/numpy/pull/17492#pullrequestreview-571220781",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa240e30-1411-434a-bb24-177e77e54dc9",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you add a test for this code-path, since codecov is complaining? Passing `mode=None` should be enough to trigger it, and `with pytest.raises` will let you test it.",
        "createdAt" : "2021-01-19T13:03:33Z",
        "updatedAt" : "2021-03-18T19:03:46Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "89de3d9d21e38e4070681e455d98575df3f3b51f",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +772,776 @@        if (error_converting(number)) {\n            PyErr_SetString(PyExc_TypeError,\n                        \"convolve/correlate mode not understood\");\n            return NPY_FAIL;\n        }"
  },
  {
    "id" : "7b55989f-78df-4370-8875-ce14622fbb74",
    "prId" : 17492,
    "prUrl" : "https://github.com/numpy/numpy/pull/17492#pullrequestreview-615859486",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "467b3090-7914-4324-806f-d0083eec32b7",
        "parentId" : null,
        "authorId" : "4f4f9774-f6a3-4e3b-a89f-9d34b2dd1771",
        "body" : "```suggestion\r\n        /* Numpy 1.21, 2021-03-19 */\r\n```\r\nOr this should still remain the same?",
        "createdAt" : "2021-03-18T20:19:27Z",
        "updatedAt" : "2021-03-18T20:19:27Z",
        "lastEditedBy" : "4f4f9774-f6a3-4e3b-a89f-9d34b2dd1771",
        "tags" : [
        ]
      },
      {
        "id" : "e022d7bb-cb38-4e49-bf87-84234a540bf6",
        "parentId" : "467b3090-7914-4324-806f-d0083eec32b7",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "not important enough to re-run CI for that.",
        "createdAt" : "2021-03-18T20:48:32Z",
        "updatedAt" : "2021-03-18T20:48:32Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "89de3d9d21e38e4070681e455d98575df3f3b51f",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +744,748 @@     */\n    if (!is_exact) {\n        /* Numpy 1.21, 2021-01-19 */\n        if (DEPRECATE(\"inexact matches and case insensitive matches for \"\n                      \"convolve/correlate mode are deprecated, please \""
  }
]