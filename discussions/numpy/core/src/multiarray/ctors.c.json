[
  {
    "id" : "59bca374-5959-4c53-bb4c-f879752000f0",
    "prId" : 87,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4513fe49-7191-4edc-bf07-96fb58941138",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What is the reason for the underscore in _datetime.h ?\n",
        "createdAt" : "2011-06-15T05:11:55Z",
        "updatedAt" : "2011-06-16T19:50:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a2640017-ac1b-491d-befc-e4c11258472e",
        "parentId" : "4513fe49-7191-4edc-bf07-96fb58941138",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "That's historical, and seems to be because datetime.h is the CPython header for accessing the Python datetime library objects.\n",
        "createdAt" : "2011-06-15T15:14:47Z",
        "updatedAt" : "2011-06-16T19:50:36Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7d59aef203ebf25b268ceaccfa1be45237b0df",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +20,24 @@#include \"numpymemoryview.h\"\n#include \"lowlevel_strided_loops.h\"\n#include \"_datetime.h\"\n\n/*"
  },
  {
    "id" : "2a018ed6-9b1b-467d-80cd-e4020f64f9f9",
    "prId" : 444,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "146cc9da-105b-41ca-bd6b-484597d74770",
        "parentId" : null,
        "authorId" : "1b526ef0-1c83-44be-b2b5-41cf1ee854e2",
        "body" : "This check is causing np.ndindex() to fail in master which I didn't catch earlier.   Why is this check here?   We needed to remove this check to get code that used np.ndindex() working against master.  \n",
        "createdAt" : "2013-01-09T05:26:12Z",
        "updatedAt" : "2013-01-09T05:26:12Z",
        "lastEditedBy" : "1b526ef0-1c83-44be-b2b5-41cf1ee854e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "92ecbdde33f6f61712d7d1a0e4500c76a65aac7a",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +2081,2085 @@        PyObject *dataptr;\n        if (n == 0) {\n            PyErr_SetString(PyExc_ValueError,\n                    \"__array_interface__ shape must be at least size 1\");\n            goto fail;"
  },
  {
    "id" : "a96990be-fed7-4a0a-9760-a2b250fb5d22",
    "prId" : 3376,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4713281-c986-48e2-b274-1430d7f2c408",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I assume adding `stride` keeps he alignment.\n",
        "createdAt" : "2013-05-29T17:18:12Z",
        "updatedAt" : "2013-05-29T17:58:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "04a58ebe-132c-4bb1-98be-663036a94bf8",
        "parentId" : "b4713281-c986-48e2-b274-1430d7f2c408",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "I'm assuming that, if it doesn't the old code would have garbled the input as it was still swapping two/four/eight byte elements\n",
        "createdAt" : "2013-05-29T17:21:16Z",
        "updatedAt" : "2013-05-29T17:58:59Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "0258a3e65ba9fea8892aaa9761bf7e37c999c8fd",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +313,317 @@    case 4:\n        if (npy_is_aligned(p, sizeof(npy_uint32))) {\n            for (a = (char*)p; n > 0; n--, a += stride) {\n                npy_uint32 * a_ = (npy_uint32 *)a;\n                *a_ = npy_bswap4(*a_);"
  },
  {
    "id" : "00595d32-7e71-44b5-9285-4af0f433a71d",
    "prId" : 3491,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc9ecdcb-ac17-41bd-9c77-989866fec691",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like there should be more indentation of the logical expression part.\n",
        "createdAt" : "2013-07-07T23:27:47Z",
        "updatedAt" : "2013-07-08T18:44:49Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "bf463eb7-d82f-42c8-8a8f-4f99289a7969",
        "parentId" : "fc9ecdcb-ac17-41bd-9c77-989866fec691",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yeah, the preceding logical parts need an extra indent. Basically:\n\n```\nif (log1 ||\n        log2 ||\n        log3) {\n    blah;\n}\n```\n",
        "createdAt" : "2013-07-08T17:55:40Z",
        "updatedAt" : "2013-07-08T18:44:49Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "97372dbe877f19ae73a070b05c380cfea0871dc0",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +537,541 @@            PyBuffer_Check(s) ||\n#endif\n            PyUnicode_Check(s)) {\n\n        /* If an object has no length, leave it be */"
  },
  {
    "id" : "aac468bc-ca0e-4e57-a92c-b5003fdf24c2",
    "prId" : 3509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fe67176-ad58-4602-b002-156a61addaea",
        "parentId" : null,
        "authorId" : "dd0b7ee8-4e17-4855-aa9e-6c7c9ddba53b",
        "body" : "@charris you were right. It also work for multi-dimensional arrays when (newtype == NULL && flags == 0).\n",
        "createdAt" : "2013-07-08T17:41:17Z",
        "updatedAt" : "2013-07-10T15:28:45Z",
        "lastEditedBy" : "dd0b7ee8-4e17-4855-aa9e-6c7c9ddba53b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6815f865678e88dab68c00c34fb1c9e7166f8f3c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1803,1807 @@         * If so return it directly instead of checking for casting.\n         */\n        if (flags == 0) {\n            Py_INCREF(arr);\n            return (PyObject *)arr;"
  },
  {
    "id" : "a1a30b27-3ab6-4f0b-b311-3a327947714d",
    "prId" : 3590,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a90bff0-6abb-4456-912d-24ef08caf9e3",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "This is really ugly. Can't we use the `NewFromDescr` `flags` argument instead?\n",
        "createdAt" : "2013-08-10T16:19:42Z",
        "updatedAt" : "2013-08-16T08:20:25Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "723517b8-91f5-40c5-917e-2928cbbdf1e9",
        "parentId" : "7a90bff0-6abb-4456-912d-24ef08caf9e3",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "if I read the code correctly flags of NewFromDescr is not used as flags, its just a boolean for c or fortran order if data is NULL\n\none could also add a static wrapper for NewFromDescr that takes an extra argument which is used from zeros which would be more explicit than this hack.\n",
        "createdAt" : "2013-08-12T12:49:49Z",
        "updatedAt" : "2013-08-16T08:20:25Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "409e9e6f-574e-4afc-9db4-84293193b7f7",
        "parentId" : "7a90bff0-6abb-4456-912d-24ef08caf9e3",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "It's a bit ugly, but at least understandable ;) Might be the easiest thing to do here.\n",
        "createdAt" : "2013-08-13T15:25:36Z",
        "updatedAt" : "2013-08-16T08:20:25Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d271d977bdfb977959db1ff26956666f3836b56b",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +2695,2699 @@    PyArray_DESCR_REPLACE(type);\n    need_init = PyDataType_FLAGCHK(type, NPY_NEEDS_INIT);\n    type->flags |= NPY_NEEDS_INIT;\n\n    ret = (PyArrayObject *)PyArray_NewFromDescr(&PyArray_Type,"
  },
  {
    "id" : "3cc3454c-73da-4a14-ba99-6502019bd678",
    "prId" : 3761,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d1adc87-ade5-4193-8a5d-cd8143c3bb47",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I think PyObject_Unicode should be good for both Python 2 and 3.\n",
        "createdAt" : "2013-09-19T16:09:19Z",
        "updatedAt" : "2013-09-19T16:09:19Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "fa1900bb-3b19-4db3-b928-81a90c249354",
        "parentId" : "8d1adc87-ade5-4193-8a5d-cd8143c3bb47",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "In fact, since you are only trying to find the length, maybe unicode would work for all cases?\n",
        "createdAt" : "2013-09-19T16:38:16Z",
        "updatedAt" : "2013-09-19T16:38:16Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "8619fa90-54ad-4ca6-9bd4-fc80950ba2e5",
        "parentId" : "8d1adc87-ade5-4193-8a5d-cd8143c3bb47",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "In which case `stringtype` may not matter.\n",
        "createdAt" : "2013-09-19T16:39:36Z",
        "updatedAt" : "2013-09-19T16:39:36Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e41d8e95-c4bc-4b75-ad6c-6c9f9d9b0ce6",
        "parentId" : "8d1adc87-ade5-4193-8a5d-cd8143c3bb47",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Nah, PyObject_Unicode is gone in 3.\n",
        "createdAt" : "2013-09-19T16:48:48Z",
        "updatedAt" : "2013-09-19T16:48:48Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ee105ff1-48fe-456d-a36b-da8985da2afc",
        "parentId" : "8d1adc87-ade5-4193-8a5d-cd8143c3bb47",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could add it to `npy_3kcompat`, but this is good as it.\n",
        "createdAt" : "2013-09-19T16:54:22Z",
        "updatedAt" : "2013-09-19T16:54:22Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f200034eee16a97348400a0daa694870c703d2d9",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +550,554 @@                s_string = PyObject_Str(s);\n#else\n                s_string = PyObject_Unicode(s);\n#endif\n            }"
  },
  {
    "id" : "f6f30f3a-728b-418f-977f-77f37291b6a8",
    "prId" : 3761,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4403b19d-bb4a-41fa-afdb-4ef3a4316560",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Probably want `PyObject_Bytes` here to match with `NPY_STRING`, good for both Python 2, 3.\n",
        "createdAt" : "2013-09-19T16:23:14Z",
        "updatedAt" : "2013-09-19T16:23:14Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "1250f302-5ce1-4df1-905d-0c5f5464b085",
        "parentId" : "4403b19d-bb4a-41fa-afdb-4ef3a4316560",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Or maybe not, `PyObject_Bytes` will fail for integers.\n",
        "createdAt" : "2013-09-19T16:32:27Z",
        "updatedAt" : "2013-09-19T16:32:27Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "3e73e76f-91fe-4665-aa29-703d9ddcd9f4",
        "parentId" : "4403b19d-bb4a-41fa-afdb-4ef3a4316560",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "nvm, I think this is good.\n",
        "createdAt" : "2013-09-19T16:34:05Z",
        "updatedAt" : "2013-09-19T16:34:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f200034eee16a97348400a0daa694870c703d2d9",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +544,548 @@            PyObject *s_string = NULL;\n            if (string_type == NPY_STRING) {\n                s_string = PyObject_Str(s);\n            }\n            else {"
  },
  {
    "id" : "b9bd6ff2-443d-4d29-a8bd-547a716f88d8",
    "prId" : 4244,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b3bd628-dbf3-474a-9055-5ddda0f5e04b",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "@juliantaylor Have you noticed this line? It's related with https://github.com/numpy/numpy/issues/4254, which I opened yesterday. Am I getting this right, or am I missing something?\n",
        "createdAt" : "2014-02-03T05:31:52Z",
        "updatedAt" : "2014-02-13T08:25:44Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "3485a1ab-4522-46ec-9d07-4c4dcc147daa",
        "parentId" : "7b3bd628-dbf3-474a-9055-5ddda0f5e04b",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "I think this is a correct solution, I didn't even know NPY_IGNORE exists :/\nnice work.\n",
        "createdAt" : "2014-02-04T01:01:00Z",
        "updatedAt" : "2014-02-13T08:25:44Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "9350d4dc9cc5a8288c965008c8dd6034c991289a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1840,1844 @@            PyArray_DESCR_REPLACE(descr);\n        }\n        if (descr && descr->byteorder != NPY_IGNORE) {\n            descr->byteorder = NPY_NATIVE;\n        }"
  },
  {
    "id" : "5b81fbb8-4761-4b28-8d30-0fe1bc85cfd4",
    "prId" : 4777,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b5f1d48-62c0-4ada-9214-7fcdba095bd3",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "How does the `|` work here, is it always safe?\n",
        "createdAt" : "2014-06-04T19:27:52Z",
        "updatedAt" : "2014-06-04T19:27:52Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "503db334-76b1-4325-80f8-4befee17aa6d",
        "parentId" : "5b5f1d48-62c0-4ada-9214-7fcdba095bd3",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "stride is always added to p so if it is aligned the alignment of p will never be lost\n`is_aligned(a) && is_aligned(b)` is the same as `is_aligned(a | b)` as we are only interested in the low bits which must all be zero for it to be true.\nall alignment checks involving strides in numpy already work this way (e.g. _IsAligned)\n",
        "createdAt" : "2014-06-04T20:25:22Z",
        "updatedAt" : "2014-06-04T20:25:22Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "937325ef-5883-44d1-83e8-bff9286c2e0c",
        "parentId" : "5b5f1d48-62c0-4ada-9214-7fcdba095bd3",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So safe for powers of two alignment, but not in general, i.e., 2 | 4 modulo 3. Hmm... \n",
        "createdAt" : "2014-06-04T20:52:32Z",
        "updatedAt" : "2014-06-04T20:52:32Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "14eb63e9-fe8d-4abd-9007-de07fa34a033",
        "parentId" : "5b5f1d48-62c0-4ada-9214-7fcdba095bd3",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "are cpus which have alignment requirements that are not powers of two still in existance (if they ever existed)?\n",
        "createdAt" : "2014-06-04T21:17:19Z",
        "updatedAt" : "2014-06-04T21:17:19Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "646f0125-1b83-4cff-b80b-09c43a300ec3",
        "parentId" : "5b5f1d48-62c0-4ada-9214-7fcdba095bd3",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Don't know of any, although Burroughs built a machine with 51 bit words, 48 + 3 type bits. The 48 was in order to contain both 6 and 8 bit characters.  `npy_is_aligned` handles the not power of 2 case too, so the potential for error is there.\n",
        "createdAt" : "2014-06-04T21:30:06Z",
        "updatedAt" : "2014-06-04T21:30:06Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "d5e3698b-8736-43f9-9197-fee24fdc3756",
        "parentId" : "5b5f1d48-62c0-4ada-9214-7fcdba095bd3",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Oh, and the PDP-8 had twelve bit words, hence the popularity of octal. Memory was split into 128 word pages with the lowest page acting as common memory for the rest.\n",
        "createdAt" : "2014-06-04T21:39:59Z",
        "updatedAt" : "2014-06-04T21:39:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9749fa92683ceeeac918b369da2824f756e931e8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +319,323 @@        break;\n    case 4:\n        if (npy_is_aligned((void*)((npy_intp)p | stride), sizeof(npy_uint32))) {\n            for (a = (char*)p; n > 0; n--, a += stride) {\n                npy_uint32 * a_ = (npy_uint32 *)a;"
  },
  {
    "id" : "f93ee2f4-dabc-46aa-912b-2acd31092fbb",
    "prId" : 5519,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b4e226b-1368-4882-b5ee-d67881d9c06b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like tmp can be NULL, assuming that the string cannot be converted to ascii. I'm not sure what the policy for this codec is.\n",
        "createdAt" : "2015-02-11T02:38:28Z",
        "updatedAt" : "2015-03-09T06:12:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0808ae8fc5e3d539989aeceb74cbac35bb55598e",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +2097,2101 @@    /* Allow unicode type strings */\n    if (PyUnicode_Check(typestr2)) {\n        tmp = PyUnicode_AsASCIIString(typestr2);\n        if (tmp == NULL) {\n            return 0;"
  },
  {
    "id" : "9863494c-8650-4818-9c8b-6b70b5fd5303",
    "prId" : 5519,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "654b4c99-ee77-4639-8c80-57de11a55cca",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I like the way this condition is expressed better than the one above ;)\n",
        "createdAt" : "2015-03-12T22:37:13Z",
        "updatedAt" : "2015-03-12T22:37:13Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0808ae8fc5e3d539989aeceb74cbac35bb55598e",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +2086,2090 @@    }\n    tuple = PyList_GET_ITEM(descr, 0);\n    if (!(PyTuple_Check(tuple) && PyTuple_GET_SIZE(tuple) == 2)) {\n        return 0;\n    }"
  },
  {
    "id" : "700e4fa7-1a87-411a-b65c-a683feb34d0b",
    "prId" : 6430,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee4b5f11-7e9b-4203-b212-9b925c74482b",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "from my other comment, I think these lines might be changed to \n\n```\n        if (!PyDataType_ISFLEXIBLE(descr)) {\n            PyErr_SetString(PyExc_TypeError, \"Empty data-type\");\n            Py_DECREF(descr);\n            return NULL;\n        } else if (PyDataType_ISSTRING(descr) && !allow_emptystring) {\n```\n",
        "createdAt" : "2016-05-06T04:37:36Z",
        "updatedAt" : "2016-05-31T14:35:07Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd95d10f4d7ed8f3cb66e4f7e73c184be13f395e",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +935,939 @@    if (nbytes == 0) {\n        if (!PyDataType_ISFLEXIBLE(descr)) {\n            PyErr_SetString(PyExc_TypeError, \"Empty data-type\");\n            Py_DECREF(descr);\n            return NULL;"
  },
  {
    "id" : "eb1d7027-fffd-4ebc-ba27-9b4f3901cf8a",
    "prId" : 6988,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "453942dd-baeb-471a-b013-692de47c1607",
        "parentId" : null,
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "After some more debugging with `gdb` apparently the segmentation fault is occurring at this line. The real line responsible is in `PyArray_EquivTypes`. Somehow `PyArray_EquivTypes` is getting `NULL` for its first type, which is the cause of the problem.\n",
        "createdAt" : "2016-01-10T23:32:15Z",
        "updatedAt" : "2016-01-12T00:42:41Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "bab118da49f051aecf35296bb9d8a00edd5b4198",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +1925,1929 @@\n    /* Raise an error if the casting rule isn't followed */\n    if (!PyArray_CanCastArrayTo(arr, newtype, casting)) {\n        PyObject *errmsg;\n        PyArray_Descr *arr_descr = NULL;"
  },
  {
    "id" : "adf787b3-2ac5-48c6-b232-4d5b76ae0ca1",
    "prId" : 6988,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cc613da-7961-4d1a-a82d-41dd425a2bff",
        "parentId" : null,
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "I think calling `Py_DECREF(arr_descr);` may have been the cause of the segmentation faults. At the time, I didn't realize `PyArray_DESCR` returned a borrowed reference. So, I was effectively deleting part of the array, but leaving the rest of the array around. As a result, we saw some weird behavior due to this.\n",
        "createdAt" : "2016-01-11T00:15:54Z",
        "updatedAt" : "2016-01-12T00:42:41Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "bab118da49f051aecf35296bb9d8a00edd5b4198",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1933,1937 @@        PyErr_Clear();\n        errmsg = PyUString_FromString(\"Cannot cast array data from \");\n        arr_descr = PyArray_DESCR(arr);\n        if (arr_descr == NULL) {\n            Py_DECREF(newtype);"
  },
  {
    "id" : "48cf7901-2451-4c32-b5de-3524cb855341",
    "prId" : 8977,
    "prUrl" : "https://github.com/numpy/numpy/pull/8977#pullrequestreview-34173825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "919d7eb0-4f32-43e4-a9d0-653d531e45a6",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "the else clause and the `new_data` variable can be removed",
        "createdAt" : "2017-04-22T15:16:39Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "be518177-e0f1-407a-a56b-422fe575b70d",
        "parentId" : "919d7eb0-4f32-43e4-a9d0-653d531e45a6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "What do you mean by removing the variable?\r\n\r\nFixing that feels kinda out of scope for this patch",
        "createdAt" : "2017-04-22T15:45:52Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "6a0df2ee-2879-466d-a41f-a053c67efd63",
        "parentId" : "919d7eb0-4f32-43e4-a9d0-653d531e45a6",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "IIRC, realloc will free the memory if size is zero, which we don't want to do. Worth checking, normally we keep a minimum of 1 byte to avoid problems.",
        "createdAt" : "2017-04-23T00:04:48Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "575eef8a-9e4a-417e-8d2c-fbae6934781c",
        "parentId" : "919d7eb0-4f32-43e4-a9d0-653d531e45a6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Sometimes, yes - but we don't actually care. All that matters is if `realloc` returns NULL, (which `realloc(..., 0)` does on some platforms, in which case we fail with a memory error.\r\n\r\nEither way, we don't need to worry about this yet - this function has a check for elsize == 0, which we shouldn't remove unless #8970 is merged.\r\n\r\nSo yes, technically, this file didn't need a patch at all - but I'd argue that `npy_mul_with_overflow_intp` does a better job of communicating the intention (which is why this change is in a `MAINT` commit)\r\n",
        "createdAt" : "2017-04-23T07:57:14Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6d2cd3870ba832973f85057d8d4735c99f18baa",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +3717,3721 @@            elcount = (i >> 1) + (i < 4 ? 4 : 2) + i;\n            if (!npy_mul_with_overflow_intp(&nbytes, elcount, elsize)) {\n                new_data = PyDataMem_RENEW(PyArray_DATA(ret), nbytes);\n            }\n            else {"
  },
  {
    "id" : "ce2aca05-2820-4f9b-91f2-1ce86e57574c",
    "prId" : 10263,
    "prUrl" : "https://github.com/numpy/numpy/pull/10263#pullrequestreview-85700550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90783737-c7da-4caa-a4d0-cf862ffb976e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Need to `DECREF` `zero` here too - or better yet, just allocate it further down.",
        "createdAt" : "2017-12-27T16:33:46Z",
        "updatedAt" : "2018-05-31T06:34:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "04a85b4559de69e99471c66f8138994cff36920a",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +3095,3099 @@                            \"instead of a tuple.\");\n        }\n        return -1;\n    }\n"
  },
  {
    "id" : "05913a81-7669-4b13-a171-b5af8999091d",
    "prId" : 10263,
    "prUrl" : "https://github.com/numpy/numpy/pull/10263#pullrequestreview-117137443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b50459c-78a1-4767-ad32-0de89c4a1f03",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "You need to check that this doesn't return -1, indicating an error occurred. Same above.",
        "createdAt" : "2018-05-03T05:00:08Z",
        "updatedAt" : "2018-05-31T06:34:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "04a85b4559de69e99471c66f8138994cff36920a",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +3121,3125 @@    }\n\n    val_is_zero = PyObject_RichCompareBool(val, zero, Py_EQ);\n    Py_DECREF(zero);\n    if (val_is_zero == -1) {"
  },
  {
    "id" : "6d9ebd60-01a4-4398-8b28-79257b9678a0",
    "prId" : 10740,
    "prUrl" : "https://github.com/numpy/numpy/pull/10740#pullrequestreview-104825418",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a10ae8b3-1b2a-44f3-b47f-7fd52b6e6edb",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Same remark about scoping this to where it's used, to remove an `#if defined`",
        "createdAt" : "2018-03-17T01:09:35Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "7b5ef4d2-4a8f-4865-87d4-b887ef973d2a",
        "parentId" : "a10ae8b3-1b2a-44f3-b47f-7fd52b6e6edb",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I considered that, but some of the places would require free floating blocks, which I really don't like.  I don't see much gain here, especially as this will all get cleaned up later when 2.7 is dropped.",
        "createdAt" : "2018-03-17T01:42:16Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "de7d71fc-62bd-4b85-bfaf-c5992c5fa3a8",
        "parentId" : "a10ae8b3-1b2a-44f3-b47f-7fd52b6e6edb",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Note that we will also be moving to C99 at some point after Python 2.7 and 3.4 are dropped, and it allows declarations after statements. Although, in cases like this, that probably just makes the code more difficult to understand as one never knows where to find the declaration...",
        "createdAt" : "2018-03-17T01:59:15Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4b668a9d-4a1a-4e03-a1bf-61f67e94c2eb",
        "parentId" : "a10ae8b3-1b2a-44f3-b47f-7fd52b6e6edb",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Some advantages of floating blocks:\r\n* They rule out places where the variable can be used\r\n* When we switch to C99, the braces around them can be removed\r\n* They reduce stack usage, as the variable does not consume the stack for the whole function\r\n\r\n",
        "createdAt" : "2018-03-17T16:46:33Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "01c059ee-d37f-4ad2-ae2a-70bfefc60e25",
        "parentId" : "a10ae8b3-1b2a-44f3-b47f-7fd52b6e6edb",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Still don't like floating blocks, haven't since Algol-68. If you really need them, you probably need a subroutine.",
        "createdAt" : "2018-03-17T17:54:46Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "22ce77b9-3244-4c7b-9da7-9f54b71bf539",
        "parentId" : "a10ae8b3-1b2a-44f3-b47f-7fd52b6e6edb",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Fair enough",
        "createdAt" : "2018-03-19T02:08:35Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9c53d73b80b52b36dd2f71e1e47aeaf682742ec",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +2193,2197 @@    char *data = NULL;\n#if defined(NPY_PY3K)\n    Py_buffer view;\n#else\n    Py_ssize_t buffer_len;"
  },
  {
    "id" : "7dc8480b-c096-440b-9939-239e3ddaedad",
    "prId" : 11277,
    "prUrl" : "https://github.com/numpy/numpy/pull/11277#pullrequestreview-127252622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edf6ed31-6332-45b9-909c-ac18c7ce2085",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Is it safe to assume that `memoryview` is actually a memoryview?",
        "createdAt" : "2018-06-08T17:04:49Z",
        "updatedAt" : "2018-06-08T18:27:04Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2594a83d-ddef-4187-9792-0d21d95f3644",
        "parentId" : "edf6ed31-6332-45b9-909c-ac18c7ce2085",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yes, because this function is only ever called with one, I think",
        "createdAt" : "2018-06-08T17:39:01Z",
        "updatedAt" : "2018-06-08T18:27:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e5df66c4ca420fc1afd736120e6d01449a4ba8f",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +1360,1364 @@    npy_intp shape[NPY_MAXDIMS], strides[NPY_MAXDIMS];\n\n    view = PyMemoryView_GET_BUFFER(memoryview);\n    nd = view->ndim;\n    descr = _dtype_from_buffer_3118(memoryview);"
  },
  {
    "id" : "3ada11c2-60df-4d48-896b-f03bf14d3e97",
    "prId" : 11277,
    "prUrl" : "https://github.com/numpy/numpy/pull/11277#pullrequestreview-127254101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48b35e7c-150b-47b5-9525-998a4fb03365",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'm confused here as `view->len` should be the total size of the memory. What am I missing?",
        "createdAt" : "2018-06-08T17:19:04Z",
        "updatedAt" : "2018-06-08T18:27:04Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "346aafe0-1624-4188-bd14-954b435ebc2b",
        "parentId" : "48b35e7c-150b-47b5-9525-998a4fb03365",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "We're creating an 0d array below with one (compound) element - so the dtype should span the total size of the memory",
        "createdAt" : "2018-06-08T17:38:37Z",
        "updatedAt" : "2018-06-08T18:27:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5b3c9b04-ef2c-44a6-9dee-9a654b6f70f8",
        "parentId" : "48b35e7c-150b-47b5-9525-998a4fb03365",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "A comment somewhere would help, as that is a bit unexpected. At least, I didn't expect it :)",
        "createdAt" : "2018-06-08T17:43:36Z",
        "updatedAt" : "2018-06-08T18:27:04Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e5df66c4ca420fc1afd736120e6d01449a4ba8f",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +1418,1422 @@            return NULL;\n        }\n        if (descr->elsize != view->len) {\n            PyErr_SetString(\n                    PyExc_RuntimeError,"
  }
]