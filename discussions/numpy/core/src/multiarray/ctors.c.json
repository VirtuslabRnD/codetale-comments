[
  {
    "id" : "59bca374-5959-4c53-bb4c-f879752000f0",
    "prId" : 87,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4513fe49-7191-4edc-bf07-96fb58941138",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What is the reason for the underscore in _datetime.h ?\n",
        "createdAt" : "2011-06-15T05:11:55Z",
        "updatedAt" : "2011-06-16T19:50:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a2640017-ac1b-491d-befc-e4c11258472e",
        "parentId" : "4513fe49-7191-4edc-bf07-96fb58941138",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "That's historical, and seems to be because datetime.h is the CPython header for accessing the Python datetime library objects.\n",
        "createdAt" : "2011-06-15T15:14:47Z",
        "updatedAt" : "2011-06-16T19:50:36Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7d59aef203ebf25b268ceaccfa1be45237b0df",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +20,24 @@#include \"numpymemoryview.h\"\n#include \"lowlevel_strided_loops.h\"\n#include \"_datetime.h\"\n\n/*"
  },
  {
    "id" : "2a018ed6-9b1b-467d-80cd-e4020f64f9f9",
    "prId" : 444,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "146cc9da-105b-41ca-bd6b-484597d74770",
        "parentId" : null,
        "authorId" : "1b526ef0-1c83-44be-b2b5-41cf1ee854e2",
        "body" : "This check is causing np.ndindex() to fail in master which I didn't catch earlier.   Why is this check here?   We needed to remove this check to get code that used np.ndindex() working against master.  \n",
        "createdAt" : "2013-01-09T05:26:12Z",
        "updatedAt" : "2013-01-09T05:26:12Z",
        "lastEditedBy" : "1b526ef0-1c83-44be-b2b5-41cf1ee854e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "92ecbdde33f6f61712d7d1a0e4500c76a65aac7a",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +2081,2085 @@        PyObject *dataptr;\n        if (n == 0) {\n            PyErr_SetString(PyExc_ValueError,\n                    \"__array_interface__ shape must be at least size 1\");\n            goto fail;"
  },
  {
    "id" : "a96990be-fed7-4a0a-9760-a2b250fb5d22",
    "prId" : 3376,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4713281-c986-48e2-b274-1430d7f2c408",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I assume adding `stride` keeps he alignment.\n",
        "createdAt" : "2013-05-29T17:18:12Z",
        "updatedAt" : "2013-05-29T17:58:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "04a58ebe-132c-4bb1-98be-663036a94bf8",
        "parentId" : "b4713281-c986-48e2-b274-1430d7f2c408",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "I'm assuming that, if it doesn't the old code would have garbled the input as it was still swapping two/four/eight byte elements\n",
        "createdAt" : "2013-05-29T17:21:16Z",
        "updatedAt" : "2013-05-29T17:58:59Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "0258a3e65ba9fea8892aaa9761bf7e37c999c8fd",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +313,317 @@    case 4:\n        if (npy_is_aligned(p, sizeof(npy_uint32))) {\n            for (a = (char*)p; n > 0; n--, a += stride) {\n                npy_uint32 * a_ = (npy_uint32 *)a;\n                *a_ = npy_bswap4(*a_);"
  },
  {
    "id" : "00595d32-7e71-44b5-9285-4af0f433a71d",
    "prId" : 3491,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc9ecdcb-ac17-41bd-9c77-989866fec691",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like there should be more indentation of the logical expression part.\n",
        "createdAt" : "2013-07-07T23:27:47Z",
        "updatedAt" : "2013-07-08T18:44:49Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "bf463eb7-d82f-42c8-8a8f-4f99289a7969",
        "parentId" : "fc9ecdcb-ac17-41bd-9c77-989866fec691",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yeah, the preceding logical parts need an extra indent. Basically:\n\n```\nif (log1 ||\n        log2 ||\n        log3) {\n    blah;\n}\n```\n",
        "createdAt" : "2013-07-08T17:55:40Z",
        "updatedAt" : "2013-07-08T18:44:49Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "97372dbe877f19ae73a070b05c380cfea0871dc0",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +537,541 @@            PyBuffer_Check(s) ||\n#endif\n            PyUnicode_Check(s)) {\n\n        /* If an object has no length, leave it be */"
  },
  {
    "id" : "aac468bc-ca0e-4e57-a92c-b5003fdf24c2",
    "prId" : 3509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fe67176-ad58-4602-b002-156a61addaea",
        "parentId" : null,
        "authorId" : "dd0b7ee8-4e17-4855-aa9e-6c7c9ddba53b",
        "body" : "@charris you were right. It also work for multi-dimensional arrays when (newtype == NULL && flags == 0).\n",
        "createdAt" : "2013-07-08T17:41:17Z",
        "updatedAt" : "2013-07-10T15:28:45Z",
        "lastEditedBy" : "dd0b7ee8-4e17-4855-aa9e-6c7c9ddba53b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6815f865678e88dab68c00c34fb1c9e7166f8f3c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1803,1807 @@         * If so return it directly instead of checking for casting.\n         */\n        if (flags == 0) {\n            Py_INCREF(arr);\n            return (PyObject *)arr;"
  },
  {
    "id" : "a1a30b27-3ab6-4f0b-b311-3a327947714d",
    "prId" : 3590,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a90bff0-6abb-4456-912d-24ef08caf9e3",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "This is really ugly. Can't we use the `NewFromDescr` `flags` argument instead?\n",
        "createdAt" : "2013-08-10T16:19:42Z",
        "updatedAt" : "2013-08-16T08:20:25Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "723517b8-91f5-40c5-917e-2928cbbdf1e9",
        "parentId" : "7a90bff0-6abb-4456-912d-24ef08caf9e3",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "if I read the code correctly flags of NewFromDescr is not used as flags, its just a boolean for c or fortran order if data is NULL\n\none could also add a static wrapper for NewFromDescr that takes an extra argument which is used from zeros which would be more explicit than this hack.\n",
        "createdAt" : "2013-08-12T12:49:49Z",
        "updatedAt" : "2013-08-16T08:20:25Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "409e9e6f-574e-4afc-9db4-84293193b7f7",
        "parentId" : "7a90bff0-6abb-4456-912d-24ef08caf9e3",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "It's a bit ugly, but at least understandable ;) Might be the easiest thing to do here.\n",
        "createdAt" : "2013-08-13T15:25:36Z",
        "updatedAt" : "2013-08-16T08:20:25Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d271d977bdfb977959db1ff26956666f3836b56b",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +2695,2699 @@    PyArray_DESCR_REPLACE(type);\n    need_init = PyDataType_FLAGCHK(type, NPY_NEEDS_INIT);\n    type->flags |= NPY_NEEDS_INIT;\n\n    ret = (PyArrayObject *)PyArray_NewFromDescr(&PyArray_Type,"
  }
]