[
  {
    "id" : "59bca374-5959-4c53-bb4c-f879752000f0",
    "prId" : 87,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4513fe49-7191-4edc-bf07-96fb58941138",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What is the reason for the underscore in _datetime.h ?\n",
        "createdAt" : "2011-06-15T05:11:55Z",
        "updatedAt" : "2011-06-16T19:50:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a2640017-ac1b-491d-befc-e4c11258472e",
        "parentId" : "4513fe49-7191-4edc-bf07-96fb58941138",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "That's historical, and seems to be because datetime.h is the CPython header for accessing the Python datetime library objects.\n",
        "createdAt" : "2011-06-15T15:14:47Z",
        "updatedAt" : "2011-06-16T19:50:36Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7d59aef203ebf25b268ceaccfa1be45237b0df",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +20,24 @@#include \"numpymemoryview.h\"\n#include \"lowlevel_strided_loops.h\"\n#include \"_datetime.h\"\n\n/*"
  },
  {
    "id" : "2a018ed6-9b1b-467d-80cd-e4020f64f9f9",
    "prId" : 444,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "146cc9da-105b-41ca-bd6b-484597d74770",
        "parentId" : null,
        "authorId" : "1b526ef0-1c83-44be-b2b5-41cf1ee854e2",
        "body" : "This check is causing np.ndindex() to fail in master which I didn't catch earlier.   Why is this check here?   We needed to remove this check to get code that used np.ndindex() working against master.  \n",
        "createdAt" : "2013-01-09T05:26:12Z",
        "updatedAt" : "2013-01-09T05:26:12Z",
        "lastEditedBy" : "1b526ef0-1c83-44be-b2b5-41cf1ee854e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "92ecbdde33f6f61712d7d1a0e4500c76a65aac7a",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +2081,2085 @@        PyObject *dataptr;\n        if (n == 0) {\n            PyErr_SetString(PyExc_ValueError,\n                    \"__array_interface__ shape must be at least size 1\");\n            goto fail;"
  },
  {
    "id" : "a96990be-fed7-4a0a-9760-a2b250fb5d22",
    "prId" : 3376,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4713281-c986-48e2-b274-1430d7f2c408",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I assume adding `stride` keeps he alignment.\n",
        "createdAt" : "2013-05-29T17:18:12Z",
        "updatedAt" : "2013-05-29T17:58:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "04a58ebe-132c-4bb1-98be-663036a94bf8",
        "parentId" : "b4713281-c986-48e2-b274-1430d7f2c408",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "I'm assuming that, if it doesn't the old code would have garbled the input as it was still swapping two/four/eight byte elements\n",
        "createdAt" : "2013-05-29T17:21:16Z",
        "updatedAt" : "2013-05-29T17:58:59Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "0258a3e65ba9fea8892aaa9761bf7e37c999c8fd",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +313,317 @@    case 4:\n        if (npy_is_aligned(p, sizeof(npy_uint32))) {\n            for (a = (char*)p; n > 0; n--, a += stride) {\n                npy_uint32 * a_ = (npy_uint32 *)a;\n                *a_ = npy_bswap4(*a_);"
  },
  {
    "id" : "00595d32-7e71-44b5-9285-4af0f433a71d",
    "prId" : 3491,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc9ecdcb-ac17-41bd-9c77-989866fec691",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like there should be more indentation of the logical expression part.\n",
        "createdAt" : "2013-07-07T23:27:47Z",
        "updatedAt" : "2013-07-08T18:44:49Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "bf463eb7-d82f-42c8-8a8f-4f99289a7969",
        "parentId" : "fc9ecdcb-ac17-41bd-9c77-989866fec691",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yeah, the preceding logical parts need an extra indent. Basically:\n\n```\nif (log1 ||\n        log2 ||\n        log3) {\n    blah;\n}\n```\n",
        "createdAt" : "2013-07-08T17:55:40Z",
        "updatedAt" : "2013-07-08T18:44:49Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "97372dbe877f19ae73a070b05c380cfea0871dc0",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +537,541 @@            PyBuffer_Check(s) ||\n#endif\n            PyUnicode_Check(s)) {\n\n        /* If an object has no length, leave it be */"
  },
  {
    "id" : "aac468bc-ca0e-4e57-a92c-b5003fdf24c2",
    "prId" : 3509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fe67176-ad58-4602-b002-156a61addaea",
        "parentId" : null,
        "authorId" : "dd0b7ee8-4e17-4855-aa9e-6c7c9ddba53b",
        "body" : "@charris you were right. It also work for multi-dimensional arrays when (newtype == NULL && flags == 0).\n",
        "createdAt" : "2013-07-08T17:41:17Z",
        "updatedAt" : "2013-07-10T15:28:45Z",
        "lastEditedBy" : "dd0b7ee8-4e17-4855-aa9e-6c7c9ddba53b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6815f865678e88dab68c00c34fb1c9e7166f8f3c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1803,1807 @@         * If so return it directly instead of checking for casting.\n         */\n        if (flags == 0) {\n            Py_INCREF(arr);\n            return (PyObject *)arr;"
  },
  {
    "id" : "a1a30b27-3ab6-4f0b-b311-3a327947714d",
    "prId" : 3590,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a90bff0-6abb-4456-912d-24ef08caf9e3",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "This is really ugly. Can't we use the `NewFromDescr` `flags` argument instead?\n",
        "createdAt" : "2013-08-10T16:19:42Z",
        "updatedAt" : "2013-08-16T08:20:25Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "723517b8-91f5-40c5-917e-2928cbbdf1e9",
        "parentId" : "7a90bff0-6abb-4456-912d-24ef08caf9e3",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "if I read the code correctly flags of NewFromDescr is not used as flags, its just a boolean for c or fortran order if data is NULL\n\none could also add a static wrapper for NewFromDescr that takes an extra argument which is used from zeros which would be more explicit than this hack.\n",
        "createdAt" : "2013-08-12T12:49:49Z",
        "updatedAt" : "2013-08-16T08:20:25Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "409e9e6f-574e-4afc-9db4-84293193b7f7",
        "parentId" : "7a90bff0-6abb-4456-912d-24ef08caf9e3",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "It's a bit ugly, but at least understandable ;) Might be the easiest thing to do here.\n",
        "createdAt" : "2013-08-13T15:25:36Z",
        "updatedAt" : "2013-08-16T08:20:25Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d271d977bdfb977959db1ff26956666f3836b56b",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +2695,2699 @@    PyArray_DESCR_REPLACE(type);\n    need_init = PyDataType_FLAGCHK(type, NPY_NEEDS_INIT);\n    type->flags |= NPY_NEEDS_INIT;\n\n    ret = (PyArrayObject *)PyArray_NewFromDescr(&PyArray_Type,"
  },
  {
    "id" : "3cc3454c-73da-4a14-ba99-6502019bd678",
    "prId" : 3761,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d1adc87-ade5-4193-8a5d-cd8143c3bb47",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I think PyObject_Unicode should be good for both Python 2 and 3.\n",
        "createdAt" : "2013-09-19T16:09:19Z",
        "updatedAt" : "2013-09-19T16:09:19Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "fa1900bb-3b19-4db3-b928-81a90c249354",
        "parentId" : "8d1adc87-ade5-4193-8a5d-cd8143c3bb47",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "In fact, since you are only trying to find the length, maybe unicode would work for all cases?\n",
        "createdAt" : "2013-09-19T16:38:16Z",
        "updatedAt" : "2013-09-19T16:38:16Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "8619fa90-54ad-4ca6-9bd4-fc80950ba2e5",
        "parentId" : "8d1adc87-ade5-4193-8a5d-cd8143c3bb47",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "In which case `stringtype` may not matter.\n",
        "createdAt" : "2013-09-19T16:39:36Z",
        "updatedAt" : "2013-09-19T16:39:36Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e41d8e95-c4bc-4b75-ad6c-6c9f9d9b0ce6",
        "parentId" : "8d1adc87-ade5-4193-8a5d-cd8143c3bb47",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Nah, PyObject_Unicode is gone in 3.\n",
        "createdAt" : "2013-09-19T16:48:48Z",
        "updatedAt" : "2013-09-19T16:48:48Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ee105ff1-48fe-456d-a36b-da8985da2afc",
        "parentId" : "8d1adc87-ade5-4193-8a5d-cd8143c3bb47",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could add it to `npy_3kcompat`, but this is good as it.\n",
        "createdAt" : "2013-09-19T16:54:22Z",
        "updatedAt" : "2013-09-19T16:54:22Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f200034eee16a97348400a0daa694870c703d2d9",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +550,554 @@                s_string = PyObject_Str(s);\n#else\n                s_string = PyObject_Unicode(s);\n#endif\n            }"
  },
  {
    "id" : "f6f30f3a-728b-418f-977f-77f37291b6a8",
    "prId" : 3761,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4403b19d-bb4a-41fa-afdb-4ef3a4316560",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Probably want `PyObject_Bytes` here to match with `NPY_STRING`, good for both Python 2, 3.\n",
        "createdAt" : "2013-09-19T16:23:14Z",
        "updatedAt" : "2013-09-19T16:23:14Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "1250f302-5ce1-4df1-905d-0c5f5464b085",
        "parentId" : "4403b19d-bb4a-41fa-afdb-4ef3a4316560",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Or maybe not, `PyObject_Bytes` will fail for integers.\n",
        "createdAt" : "2013-09-19T16:32:27Z",
        "updatedAt" : "2013-09-19T16:32:27Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "3e73e76f-91fe-4665-aa29-703d9ddcd9f4",
        "parentId" : "4403b19d-bb4a-41fa-afdb-4ef3a4316560",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "nvm, I think this is good.\n",
        "createdAt" : "2013-09-19T16:34:05Z",
        "updatedAt" : "2013-09-19T16:34:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f200034eee16a97348400a0daa694870c703d2d9",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +544,548 @@            PyObject *s_string = NULL;\n            if (string_type == NPY_STRING) {\n                s_string = PyObject_Str(s);\n            }\n            else {"
  },
  {
    "id" : "b9bd6ff2-443d-4d29-a8bd-547a716f88d8",
    "prId" : 4244,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b3bd628-dbf3-474a-9055-5ddda0f5e04b",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "@juliantaylor Have you noticed this line? It's related with https://github.com/numpy/numpy/issues/4254, which I opened yesterday. Am I getting this right, or am I missing something?\n",
        "createdAt" : "2014-02-03T05:31:52Z",
        "updatedAt" : "2014-02-13T08:25:44Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "3485a1ab-4522-46ec-9d07-4c4dcc147daa",
        "parentId" : "7b3bd628-dbf3-474a-9055-5ddda0f5e04b",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "I think this is a correct solution, I didn't even know NPY_IGNORE exists :/\nnice work.\n",
        "createdAt" : "2014-02-04T01:01:00Z",
        "updatedAt" : "2014-02-13T08:25:44Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "9350d4dc9cc5a8288c965008c8dd6034c991289a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1840,1844 @@            PyArray_DESCR_REPLACE(descr);\n        }\n        if (descr && descr->byteorder != NPY_IGNORE) {\n            descr->byteorder = NPY_NATIVE;\n        }"
  },
  {
    "id" : "5b81fbb8-4761-4b28-8d30-0fe1bc85cfd4",
    "prId" : 4777,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b5f1d48-62c0-4ada-9214-7fcdba095bd3",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "How does the `|` work here, is it always safe?\n",
        "createdAt" : "2014-06-04T19:27:52Z",
        "updatedAt" : "2014-06-04T19:27:52Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "503db334-76b1-4325-80f8-4befee17aa6d",
        "parentId" : "5b5f1d48-62c0-4ada-9214-7fcdba095bd3",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "stride is always added to p so if it is aligned the alignment of p will never be lost\n`is_aligned(a) && is_aligned(b)` is the same as `is_aligned(a | b)` as we are only interested in the low bits which must all be zero for it to be true.\nall alignment checks involving strides in numpy already work this way (e.g. _IsAligned)\n",
        "createdAt" : "2014-06-04T20:25:22Z",
        "updatedAt" : "2014-06-04T20:25:22Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "937325ef-5883-44d1-83e8-bff9286c2e0c",
        "parentId" : "5b5f1d48-62c0-4ada-9214-7fcdba095bd3",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So safe for powers of two alignment, but not in general, i.e., 2 | 4 modulo 3. Hmm... \n",
        "createdAt" : "2014-06-04T20:52:32Z",
        "updatedAt" : "2014-06-04T20:52:32Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "14eb63e9-fe8d-4abd-9007-de07fa34a033",
        "parentId" : "5b5f1d48-62c0-4ada-9214-7fcdba095bd3",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "are cpus which have alignment requirements that are not powers of two still in existance (if they ever existed)?\n",
        "createdAt" : "2014-06-04T21:17:19Z",
        "updatedAt" : "2014-06-04T21:17:19Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "646f0125-1b83-4cff-b80b-09c43a300ec3",
        "parentId" : "5b5f1d48-62c0-4ada-9214-7fcdba095bd3",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Don't know of any, although Burroughs built a machine with 51 bit words, 48 + 3 type bits. The 48 was in order to contain both 6 and 8 bit characters.  `npy_is_aligned` handles the not power of 2 case too, so the potential for error is there.\n",
        "createdAt" : "2014-06-04T21:30:06Z",
        "updatedAt" : "2014-06-04T21:30:06Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "d5e3698b-8736-43f9-9197-fee24fdc3756",
        "parentId" : "5b5f1d48-62c0-4ada-9214-7fcdba095bd3",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Oh, and the PDP-8 had twelve bit words, hence the popularity of octal. Memory was split into 128 word pages with the lowest page acting as common memory for the rest.\n",
        "createdAt" : "2014-06-04T21:39:59Z",
        "updatedAt" : "2014-06-04T21:39:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9749fa92683ceeeac918b369da2824f756e931e8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +319,323 @@        break;\n    case 4:\n        if (npy_is_aligned((void*)((npy_intp)p | stride), sizeof(npy_uint32))) {\n            for (a = (char*)p; n > 0; n--, a += stride) {\n                npy_uint32 * a_ = (npy_uint32 *)a;"
  },
  {
    "id" : "f93ee2f4-dabc-46aa-912b-2acd31092fbb",
    "prId" : 5519,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b4e226b-1368-4882-b5ee-d67881d9c06b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like tmp can be NULL, assuming that the string cannot be converted to ascii. I'm not sure what the policy for this codec is.\n",
        "createdAt" : "2015-02-11T02:38:28Z",
        "updatedAt" : "2015-03-09T06:12:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0808ae8fc5e3d539989aeceb74cbac35bb55598e",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +2097,2101 @@    /* Allow unicode type strings */\n    if (PyUnicode_Check(typestr2)) {\n        tmp = PyUnicode_AsASCIIString(typestr2);\n        if (tmp == NULL) {\n            return 0;"
  },
  {
    "id" : "9863494c-8650-4818-9c8b-6b70b5fd5303",
    "prId" : 5519,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "654b4c99-ee77-4639-8c80-57de11a55cca",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I like the way this condition is expressed better than the one above ;)\n",
        "createdAt" : "2015-03-12T22:37:13Z",
        "updatedAt" : "2015-03-12T22:37:13Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0808ae8fc5e3d539989aeceb74cbac35bb55598e",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +2086,2090 @@    }\n    tuple = PyList_GET_ITEM(descr, 0);\n    if (!(PyTuple_Check(tuple) && PyTuple_GET_SIZE(tuple) == 2)) {\n        return 0;\n    }"
  },
  {
    "id" : "700e4fa7-1a87-411a-b65c-a683feb34d0b",
    "prId" : 6430,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee4b5f11-7e9b-4203-b212-9b925c74482b",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "from my other comment, I think these lines might be changed to \n\n```\n        if (!PyDataType_ISFLEXIBLE(descr)) {\n            PyErr_SetString(PyExc_TypeError, \"Empty data-type\");\n            Py_DECREF(descr);\n            return NULL;\n        } else if (PyDataType_ISSTRING(descr) && !allow_emptystring) {\n```\n",
        "createdAt" : "2016-05-06T04:37:36Z",
        "updatedAt" : "2016-05-31T14:35:07Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd95d10f4d7ed8f3cb66e4f7e73c184be13f395e",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +935,939 @@    if (nbytes == 0) {\n        if (!PyDataType_ISFLEXIBLE(descr)) {\n            PyErr_SetString(PyExc_TypeError, \"Empty data-type\");\n            Py_DECREF(descr);\n            return NULL;"
  },
  {
    "id" : "eb1d7027-fffd-4ebc-ba27-9b4f3901cf8a",
    "prId" : 6988,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "453942dd-baeb-471a-b013-692de47c1607",
        "parentId" : null,
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "After some more debugging with `gdb` apparently the segmentation fault is occurring at this line. The real line responsible is in `PyArray_EquivTypes`. Somehow `PyArray_EquivTypes` is getting `NULL` for its first type, which is the cause of the problem.\n",
        "createdAt" : "2016-01-10T23:32:15Z",
        "updatedAt" : "2016-01-12T00:42:41Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "bab118da49f051aecf35296bb9d8a00edd5b4198",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +1925,1929 @@\n    /* Raise an error if the casting rule isn't followed */\n    if (!PyArray_CanCastArrayTo(arr, newtype, casting)) {\n        PyObject *errmsg;\n        PyArray_Descr *arr_descr = NULL;"
  },
  {
    "id" : "adf787b3-2ac5-48c6-b232-4d5b76ae0ca1",
    "prId" : 6988,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cc613da-7961-4d1a-a82d-41dd425a2bff",
        "parentId" : null,
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "I think calling `Py_DECREF(arr_descr);` may have been the cause of the segmentation faults. At the time, I didn't realize `PyArray_DESCR` returned a borrowed reference. So, I was effectively deleting part of the array, but leaving the rest of the array around. As a result, we saw some weird behavior due to this.\n",
        "createdAt" : "2016-01-11T00:15:54Z",
        "updatedAt" : "2016-01-12T00:42:41Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "bab118da49f051aecf35296bb9d8a00edd5b4198",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1933,1937 @@        PyErr_Clear();\n        errmsg = PyUString_FromString(\"Cannot cast array data from \");\n        arr_descr = PyArray_DESCR(arr);\n        if (arr_descr == NULL) {\n            Py_DECREF(newtype);"
  },
  {
    "id" : "48cf7901-2451-4c32-b5de-3524cb855341",
    "prId" : 8977,
    "prUrl" : "https://github.com/numpy/numpy/pull/8977#pullrequestreview-34173825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "919d7eb0-4f32-43e4-a9d0-653d531e45a6",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "the else clause and the `new_data` variable can be removed",
        "createdAt" : "2017-04-22T15:16:39Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "be518177-e0f1-407a-a56b-422fe575b70d",
        "parentId" : "919d7eb0-4f32-43e4-a9d0-653d531e45a6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "What do you mean by removing the variable?\r\n\r\nFixing that feels kinda out of scope for this patch",
        "createdAt" : "2017-04-22T15:45:52Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "6a0df2ee-2879-466d-a41f-a053c67efd63",
        "parentId" : "919d7eb0-4f32-43e4-a9d0-653d531e45a6",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "IIRC, realloc will free the memory if size is zero, which we don't want to do. Worth checking, normally we keep a minimum of 1 byte to avoid problems.",
        "createdAt" : "2017-04-23T00:04:48Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "575eef8a-9e4a-417e-8d2c-fbae6934781c",
        "parentId" : "919d7eb0-4f32-43e4-a9d0-653d531e45a6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Sometimes, yes - but we don't actually care. All that matters is if `realloc` returns NULL, (which `realloc(..., 0)` does on some platforms, in which case we fail with a memory error.\r\n\r\nEither way, we don't need to worry about this yet - this function has a check for elsize == 0, which we shouldn't remove unless #8970 is merged.\r\n\r\nSo yes, technically, this file didn't need a patch at all - but I'd argue that `npy_mul_with_overflow_intp` does a better job of communicating the intention (which is why this change is in a `MAINT` commit)\r\n",
        "createdAt" : "2017-04-23T07:57:14Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6d2cd3870ba832973f85057d8d4735c99f18baa",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +3717,3721 @@            elcount = (i >> 1) + (i < 4 ? 4 : 2) + i;\n            if (!npy_mul_with_overflow_intp(&nbytes, elcount, elsize)) {\n                new_data = PyDataMem_RENEW(PyArray_DATA(ret), nbytes);\n            }\n            else {"
  },
  {
    "id" : "ce2aca05-2820-4f9b-91f2-1ce86e57574c",
    "prId" : 10263,
    "prUrl" : "https://github.com/numpy/numpy/pull/10263#pullrequestreview-85700550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90783737-c7da-4caa-a4d0-cf862ffb976e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Need to `DECREF` `zero` here too - or better yet, just allocate it further down.",
        "createdAt" : "2017-12-27T16:33:46Z",
        "updatedAt" : "2018-05-31T06:34:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "04a85b4559de69e99471c66f8138994cff36920a",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +3095,3099 @@                            \"instead of a tuple.\");\n        }\n        return -1;\n    }\n"
  },
  {
    "id" : "05913a81-7669-4b13-a171-b5af8999091d",
    "prId" : 10263,
    "prUrl" : "https://github.com/numpy/numpy/pull/10263#pullrequestreview-117137443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b50459c-78a1-4767-ad32-0de89c4a1f03",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "You need to check that this doesn't return -1, indicating an error occurred. Same above.",
        "createdAt" : "2018-05-03T05:00:08Z",
        "updatedAt" : "2018-05-31T06:34:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "04a85b4559de69e99471c66f8138994cff36920a",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +3121,3125 @@    }\n\n    val_is_zero = PyObject_RichCompareBool(val, zero, Py_EQ);\n    Py_DECREF(zero);\n    if (val_is_zero == -1) {"
  },
  {
    "id" : "6d9ebd60-01a4-4398-8b28-79257b9678a0",
    "prId" : 10740,
    "prUrl" : "https://github.com/numpy/numpy/pull/10740#pullrequestreview-104825418",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a10ae8b3-1b2a-44f3-b47f-7fd52b6e6edb",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Same remark about scoping this to where it's used, to remove an `#if defined`",
        "createdAt" : "2018-03-17T01:09:35Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "7b5ef4d2-4a8f-4865-87d4-b887ef973d2a",
        "parentId" : "a10ae8b3-1b2a-44f3-b47f-7fd52b6e6edb",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I considered that, but some of the places would require free floating blocks, which I really don't like.  I don't see much gain here, especially as this will all get cleaned up later when 2.7 is dropped.",
        "createdAt" : "2018-03-17T01:42:16Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "de7d71fc-62bd-4b85-bfaf-c5992c5fa3a8",
        "parentId" : "a10ae8b3-1b2a-44f3-b47f-7fd52b6e6edb",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Note that we will also be moving to C99 at some point after Python 2.7 and 3.4 are dropped, and it allows declarations after statements. Although, in cases like this, that probably just makes the code more difficult to understand as one never knows where to find the declaration...",
        "createdAt" : "2018-03-17T01:59:15Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4b668a9d-4a1a-4e03-a1bf-61f67e94c2eb",
        "parentId" : "a10ae8b3-1b2a-44f3-b47f-7fd52b6e6edb",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Some advantages of floating blocks:\r\n* They rule out places where the variable can be used\r\n* When we switch to C99, the braces around them can be removed\r\n* They reduce stack usage, as the variable does not consume the stack for the whole function\r\n\r\n",
        "createdAt" : "2018-03-17T16:46:33Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "01c059ee-d37f-4ad2-ae2a-70bfefc60e25",
        "parentId" : "a10ae8b3-1b2a-44f3-b47f-7fd52b6e6edb",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Still don't like floating blocks, haven't since Algol-68. If you really need them, you probably need a subroutine.",
        "createdAt" : "2018-03-17T17:54:46Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "22ce77b9-3244-4c7b-9da7-9f54b71bf539",
        "parentId" : "a10ae8b3-1b2a-44f3-b47f-7fd52b6e6edb",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Fair enough",
        "createdAt" : "2018-03-19T02:08:35Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9c53d73b80b52b36dd2f71e1e47aeaf682742ec",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +2193,2197 @@    char *data = NULL;\n#if defined(NPY_PY3K)\n    Py_buffer view;\n#else\n    Py_ssize_t buffer_len;"
  },
  {
    "id" : "7dc8480b-c096-440b-9939-239e3ddaedad",
    "prId" : 11277,
    "prUrl" : "https://github.com/numpy/numpy/pull/11277#pullrequestreview-127252622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edf6ed31-6332-45b9-909c-ac18c7ce2085",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Is it safe to assume that `memoryview` is actually a memoryview?",
        "createdAt" : "2018-06-08T17:04:49Z",
        "updatedAt" : "2018-06-08T18:27:04Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2594a83d-ddef-4187-9792-0d21d95f3644",
        "parentId" : "edf6ed31-6332-45b9-909c-ac18c7ce2085",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yes, because this function is only ever called with one, I think",
        "createdAt" : "2018-06-08T17:39:01Z",
        "updatedAt" : "2018-06-08T18:27:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e5df66c4ca420fc1afd736120e6d01449a4ba8f",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +1360,1364 @@    npy_intp shape[NPY_MAXDIMS], strides[NPY_MAXDIMS];\n\n    view = PyMemoryView_GET_BUFFER(memoryview);\n    nd = view->ndim;\n    descr = _dtype_from_buffer_3118(memoryview);"
  },
  {
    "id" : "3ada11c2-60df-4d48-896b-f03bf14d3e97",
    "prId" : 11277,
    "prUrl" : "https://github.com/numpy/numpy/pull/11277#pullrequestreview-127254101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48b35e7c-150b-47b5-9525-998a4fb03365",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'm confused here as `view->len` should be the total size of the memory. What am I missing?",
        "createdAt" : "2018-06-08T17:19:04Z",
        "updatedAt" : "2018-06-08T18:27:04Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "346aafe0-1624-4188-bd14-954b435ebc2b",
        "parentId" : "48b35e7c-150b-47b5-9525-998a4fb03365",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "We're creating an 0d array below with one (compound) element - so the dtype should span the total size of the memory",
        "createdAt" : "2018-06-08T17:38:37Z",
        "updatedAt" : "2018-06-08T18:27:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5b3c9b04-ef2c-44a6-9dee-9a654b6f70f8",
        "parentId" : "48b35e7c-150b-47b5-9525-998a4fb03365",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "A comment somewhere would help, as that is a bit unexpected. At least, I didn't expect it :)",
        "createdAt" : "2018-06-08T17:43:36Z",
        "updatedAt" : "2018-06-08T18:27:04Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e5df66c4ca420fc1afd736120e6d01449a4ba8f",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +1418,1422 @@            return NULL;\n        }\n        if (descr->elsize != view->len) {\n            PyErr_SetString(\n                    PyExc_RuntimeError,"
  },
  {
    "id" : "29db7575-09e2-4a80-bd6a-ca51fe73b671",
    "prId" : 12234,
    "prUrl" : "https://github.com/numpy/numpy/pull/12234#pullrequestreview-192089938",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0003a7b-c15f-4e7a-a49c-35fde8a0349c",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "There is no need for an error check here?",
        "createdAt" : "2019-01-04T10:54:18Z",
        "updatedAt" : "2019-01-14T13:08:29Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "b2984cd2-e1f5-401c-93c9-4a8095ae1948",
        "parentId" : "f0003a7b-c15f-4e7a-a49c-35fde8a0349c",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "yes, fixed",
        "createdAt" : "2019-01-14T10:34:36Z",
        "updatedAt" : "2019-01-14T13:08:30Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "5db21b862ac7637a2eaeff9c57256fea4874e44a",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1820,1824 @@        newtype = PyArray_AdaptFlexibleDType(op,\n                    (dtype == NULL) ? PyArray_DESCR(arr) : dtype,\n                    newtype);\n        if (newtype == NULL) {\n            return NULL;"
  },
  {
    "id" : "fa5686a3-580d-4f5c-85b8-49b94e627f68",
    "prId" : 12572,
    "prUrl" : "https://github.com/numpy/numpy/pull/12572#pullrequestreview-185612615",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "560198b7-7874-4bea-9396-1a68dc716789",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This bug manifested itself as `typestr=\"|V0\"` causing the resulting array to be a copy rather than a view",
        "createdAt" : "2018-12-17T06:02:02Z",
        "updatedAt" : "2018-12-17T06:02:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e8331982-c88e-43e2-966f-5cc612c8960f",
        "parentId" : "560198b7-7874-4bea-9396-1a68dc716789",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm... does look to make more sense.",
        "createdAt" : "2018-12-17T14:25:35Z",
        "updatedAt" : "2018-12-17T14:25:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e0d024d0c2e1f4967172d3c1d6004dd9d967b47",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2025,2029 @@        Py_INCREF(oldtype);\n    }\n    else if (PyDataType_ISUNSIZED(newtype)) {\n        PyArray_DESCR_REPLACE(newtype);\n        if (newtype == NULL) {"
  },
  {
    "id" : "2bbb67ec-dea1-4131-91ea-491ee6931289",
    "prId" : 12805,
    "prUrl" : "https://github.com/numpy/numpy/pull/12805#pullrequestreview-194391282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7c578aa-9fa2-47da-a77c-6b68a916e334",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Thanks, this should go before the error check, since in that case the goto fail also happens.",
        "createdAt" : "2019-01-20T11:00:21Z",
        "updatedAt" : "2019-01-20T14:28:49Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "a6330d18-60be-4fd9-99d5-d2bfc771dbaf",
        "parentId" : "b7c578aa-9fa2-47da-a77c-6b68a916e334",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "fixed",
        "createdAt" : "2019-01-20T12:32:32Z",
        "updatedAt" : "2019-01-20T14:28:49Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "3d0c24dc-b1d4-4937-9b04-1fa24aecd434",
        "parentId" : "b7c578aa-9fa2-47da-a77c-6b68a916e334",
        "authorId" : "4d247404-3edc-44db-9c1a-e6671fa3608e",
        "body" : "But does `PyArray_NewFromDescrAndBase` steal a reference to the dtype when it fails allocating the array? That sounds unlikely to me.",
        "createdAt" : "2019-01-20T12:33:47Z",
        "updatedAt" : "2019-01-20T14:28:49Z",
        "lastEditedBy" : "4d247404-3edc-44db-9c1a-e6671fa3608e",
        "tags" : [
        ]
      },
      {
        "id" : "33069fe0-a2f5-4d29-b742-236fa7c73e7b",
        "parentId" : "b7c578aa-9fa2-47da-a77c-6b68a916e334",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "In any of the paths where `PyArray_NewFromDescrAndBase` fails (returns `NULL`) it `DECREF`s the dtype.",
        "createdAt" : "2019-01-20T12:44:46Z",
        "updatedAt" : "2019-01-20T14:28:49Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "adfaafba9f45cea66a344d0d67916bee38b79ce2",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2500,2504 @@     * Prevent DECREFing dtype in fail codepath by setting to NULL\n     */\n    dtype = NULL;\n    if (ret == NULL) {\n        goto fail;"
  },
  {
    "id" : "0ccc3b6d-2d27-45cb-b80a-51f59bf9f8e8",
    "prId" : 13046,
    "prUrl" : "https://github.com/numpy/numpy/pull/13046#pullrequestreview-208407538",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "868b6d38-3f05-4885-8ccc-b12d32a2cf4d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "What if prototype.ndim != len(shape)?",
        "createdAt" : "2019-02-26T20:28:07Z",
        "updatedAt" : "2019-04-19T16:40:22Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "62e3a9e4-e800-41fa-83bc-63908ae41908",
        "parentId" : "868b6d38-3f05-4885-8ccc-b12d32a2cf4d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is still broken - the strides array is off a different length to ndim. This isn't just an implementation bug, this is a design problem. What does it mean to say \"create an Nd array matching the order of this Md one\" when M != N\r\n\r\nMy hunch would be to say \"it's meaningless, require the caller to insert dimensions to match by erroring\"",
        "createdAt" : "2019-02-27T04:03:33Z",
        "updatedAt" : "2019-04-19T16:40:22Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c7778502-eac3-4c54-a108-025771ab7ffd",
        "parentId" : "868b6d38-3f05-4885-8ccc-b12d32a2cf4d",
        "authorId" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "body" : "I guess you're talking exclusively about the new case, creating an array with a different shape, right? In that case you're right, looking at the strides of the original array makes no sense, I will change it such that arrays with new shapes will always fall into the simpler `order != NPY_KEEPORDER` condition, where strides are ignored.",
        "createdAt" : "2019-02-27T09:14:44Z",
        "updatedAt" : "2019-04-19T16:40:22Z",
        "lastEditedBy" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "tags" : [
        ]
      }
    ],
    "commit" : "695b836eb5d1e25363795ceed35b142d062c9056",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +1260,1264 @@\n        PyArray_CreateSortedStridePerm(ndim,\n                                        PyArray_STRIDES(prototype),\n                                        strideperm);\n"
  },
  {
    "id" : "2502e6e4-732f-4cbc-8413-bfa0b40e9057",
    "prId" : 13046,
    "prUrl" : "https://github.com/numpy/numpy/pull/13046#pullrequestreview-230477027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "472d6d92-e350-4618-9ab1-df8f19d80aff",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "My 1.ii proposal would look like changing everything between the new line 1261 and here to:\r\n```C\r\nif (PyArray_NDIM(prototype) >= ndim) {\r\n    int leading_dims = PyArray_NDIM(prototype) - ndim;\r\n\r\n    /* Use only the trailing strides */\r\n    PyArray_CreateSortedStridePerm(ndim,\r\n                                   PyArray_STRIDES(prototype) + leading_dims,\r\n                                   strideperm);\r\n    /* Build the new strides */\r\n    stride = dtype->elsize;\r\n    for (idim = ndim-1; idim >= 0; --idim) {\r\n        npy_intp i_perm = strideperm[idim].perm;\r\n        strides[i_perm] = stride;\r\n        stride *= shape[i_perm];\r\n    }\r\n}\r\nelse {\r\n    int leading_dims = ndim - PyArray_NDIM(prototype);\r\n    /* Use all the strides */\r\n    PyArray_CreateSortedStridePerm(PyArray_NDIM(prototype),\r\n                                   PyArray_STRIDES(prototype),\r\n                                   strideperm);\r\n\r\n    /* Build the new trailing strides */\r\n    stride = dtype->elsize;\r\n    for (idim = PyArray_NDIM(prototype)-1; idim >= 0; --idim) {\r\n        npy_intp i_perm = strideperm[idim].perm + leading_dims;\r\n        strides[i_perm] = stride;\r\n        stride *= shape[i_perm];\r\n    }\r\n\r\n    /* Create remaining leading strides as C order */\r\n    for (idim = leading_dims; idim >= 0; --idim) {\r\n        strides[idim] = stride;\r\n        stride *= shape[idim];\r\n    }\r\n}\r\n```",
        "createdAt" : "2019-04-25T06:33:16Z",
        "updatedAt" : "2019-04-25T06:39:53Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5f90d9ba-b47c-4d18-9bb5-87e6dc4850e2",
        "parentId" : "472d6d92-e350-4618-9ab1-df8f19d80aff",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Or trading branching for state:\r\n```C\r\n/* not sure if this is clearer via min/max */\r\nint leading_src_dims = 0;  // max(src.ndim - dst.ndim, 0)\r\nint leading_dst_dims = 0;  // max(dst.ndim - src.ndim, 0)\r\nint shared_dims;  // min(src.ndim, dst.ndim\r\nif (PyArray_NDIM(prototype) >= ndim) {\r\n    shared_dims = ndim;\r\n    leading_src_dims = PyArray_NDIM(prototype) - ndim;\r\n}\r\nelse {\r\n    shared_dims = PyArray_NDIM(prototype);\r\n    leading_dst_dims = ndim - PyArray_NDIM(prototype);\r\n}\r\n\r\n/* Use only the trailing strides from the source */\r\nPyArray_CreateSortedStridePerm(shared_dims,\r\n                               PyArray_STRIDES(prototype) + leading_src_dims,\r\n                               strideperm);\r\n\r\n/* Build the destrination trailing strides */\r\nstride = dtype->elsize;\r\nfor (idim = ndim-1; idim >= 0; --idim) {\r\n    npy_intp i_perm = strideperm[idim].perm + leading_dst_dims;\r\n    strides[i_perm] = stride;\r\n    stride *= shape[i_perm];\r\n}\r\n\r\n/* Create remaining leading strides as C order */\r\nfor (idim = leading_dst_dims; idim >= 0; --idim) {\r\n    strides[idim] = stride;\r\n    stride *= shape[idim];\r\n}\r\n```",
        "createdAt" : "2019-04-25T07:01:45Z",
        "updatedAt" : "2019-04-25T07:03:30Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "695b836eb5d1e25363795ceed35b142d062c9056",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +1269,1273 @@            strides[i_perm] = stride;\n            stride *= dims[i_perm];\n        }\n\n        /* Finally, allocate the array */"
  },
  {
    "id" : "174a9bcd-711d-4f09-ab24-ea540c3dd0af",
    "prId" : 13399,
    "prUrl" : "https://github.com/numpy/numpy/pull/13399#pullrequestreview-231414086",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb248e99-9e72-4990-b026-89c5ebf04052",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "The function should be marked ~`static` or~ `NPY_NO_EXPORT`",
        "createdAt" : "2019-04-26T22:04:57Z",
        "updatedAt" : "2019-05-19T19:06:09Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "f686b5ca-45cf-4995-8de4-6b8ef17bf92a",
        "parentId" : "bb248e99-9e72-4990-b026-89c5ebf04052",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think static is correct for file-local functions",
        "createdAt" : "2019-04-27T00:45:47Z",
        "updatedAt" : "2019-05-19T19:06:09Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5554fc46-2aac-46b6-84c7-2f7d985f3c0f",
        "parentId" : "bb248e99-9e72-4990-b026-89c5ebf04052",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "`git grep 'static PyObject'` certainly returns a lot of results",
        "createdAt" : "2019-04-27T01:40:31Z",
        "updatedAt" : "2019-05-19T19:06:09Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "c890fe0a-7d57-47a6-9596-d2d929d9e85b",
        "parentId" : "bb248e99-9e72-4990-b026-89c5ebf04052",
        "authorId" : "71cfe442-b489-4b2e-8349-5d87e42c3ad9",
        "body" : "Done.",
        "createdAt" : "2019-04-27T08:08:14Z",
        "updatedAt" : "2019-05-19T19:06:09Z",
        "lastEditedBy" : "71cfe442-b489-4b2e-8349-5d87e42c3ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "71fc59d587016d6f36007ba06e074d4d4a6b483d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +426,430 @@_array_from_array_like(PyObject *op, PyArray_Descr *requested_dtype,\n                       npy_bool writeable, PyObject *context);\n\n/*\n * adapted from Numarray,"
  },
  {
    "id" : "6114daa5-8ddc-48c3-841a-4b4171aed437",
    "prId" : 13399,
    "prUrl" : "https://github.com/numpy/numpy/pull/13399#pullrequestreview-231381303",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83b2ed53-cca5-470c-88c1-93cd736bf959",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "For reviewers: the original code had a check clause at this point `if (tmp != Py_NotImplemented){ }` which has been folded into the logic below instead",
        "createdAt" : "2019-04-26T22:23:04Z",
        "updatedAt" : "2019-05-19T19:06:09Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "71fc59d587016d6f36007ba06e074d4d4a6b483d",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +1555,1559 @@        }\n    }\n\n    /*\n     * If op supplies the __array__ function."
  },
  {
    "id" : "dcda0a51-844e-4702-8840-0a5d66751bc1",
    "prId" : 13399,
    "prUrl" : "https://github.com/numpy/numpy/pull/13399#pullrequestreview-232546523",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06b53aa3-29e1-439d-9878-3687dac91753",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "`static` is fine, but then the implementation should also have the `static` attribute, and might need to move before any use of the function, depending on compiler. We usually use `static` for functions in the same file, and `NPY_NO_EXPORT` for functions that will be used across different files but not exported from the `*.so`",
        "createdAt" : "2019-04-27T16:57:37Z",
        "updatedAt" : "2019-05-19T19:06:09Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "4da0216a-6d56-4900-8058-9187f7824cd4",
        "parentId" : "06b53aa3-29e1-439d-9878-3687dac91753",
        "authorId" : "71cfe442-b489-4b2e-8349-5d87e42c3ad9",
        "body" : "I've changed `static` to `NPY_NO_EXPORT` to match `_array_from_buffer_3118`. I understand that this does not match the \"used across different files\" convention but at least it's consistent between similar function. ",
        "createdAt" : "2019-05-01T11:39:17Z",
        "updatedAt" : "2019-05-19T19:06:09Z",
        "lastEditedBy" : "71cfe442-b489-4b2e-8349-5d87e42c3ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "71fc59d587016d6f36007ba06e074d4d4a6b483d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +426,430 @@_array_from_array_like(PyObject *op, PyArray_Descr *requested_dtype,\n                       npy_bool writeable, PyObject *context);\n\n/*\n * adapted from Numarray,"
  },
  {
    "id" : "315d0d9d-bacb-41f2-a241-fae9917d6796",
    "prId" : 13399,
    "prUrl" : "https://github.com/numpy/numpy/pull/13399#pullrequestreview-239250568",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2761a4f4-3eee-4a92-935a-e84af8389960",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Worth noting that if it returns `Py_NotImplemented` the caller should _not_ decref it.",
        "createdAt" : "2019-05-06T00:21:15Z",
        "updatedAt" : "2019-05-19T19:06:09Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "95d64aec-1b6c-47bd-b933-86216260d32b",
        "parentId" : "2761a4f4-3eee-4a92-935a-e84af8389960",
        "authorId" : "71cfe442-b489-4b2e-8349-5d87e42c3ad9",
        "body" : "Is this a reasonable thing to do (i.e. is it common within NumPy internals)? I could instead just incref `Py_NotImplemented`.",
        "createdAt" : "2019-05-06T20:24:15Z",
        "updatedAt" : "2019-05-19T19:06:09Z",
        "lastEditedBy" : "71cfe442-b489-4b2e-8349-5d87e42c3ad9",
        "tags" : [
        ]
      },
      {
        "id" : "c60240e8-0b11-4c11-a93a-e0416f740fa1",
        "parentId" : "2761a4f4-3eee-4a92-935a-e84af8389960",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "incref ing would be better",
        "createdAt" : "2019-05-16T05:16:19Z",
        "updatedAt" : "2019-05-19T19:06:09Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "a5238bb2-a850-49c1-a306-78f53301a706",
        "parentId" : "2761a4f4-3eee-4a92-935a-e84af8389960",
        "authorId" : "71cfe442-b489-4b2e-8349-5d87e42c3ad9",
        "body" : "Done.",
        "createdAt" : "2019-05-19T19:04:40Z",
        "updatedAt" : "2019-05-19T19:06:09Z",
        "lastEditedBy" : "71cfe442-b489-4b2e-8349-5d87e42c3ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "71fc59d587016d6f36007ba06e074d4d4a6b483d",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +1514,1518 @@ *\n * Returns Py_NotImplemented if a given object is not array-like;\n * PyArrayObject* in case of success and NULL in case of failure.\n */\nNPY_NO_EXPORT PyObject *"
  },
  {
    "id" : "31bcea98-21d5-4b8f-bff7-5d04440b6f61",
    "prId" : 13399,
    "prUrl" : "https://github.com/numpy/numpy/pull/13399#pullrequestreview-238180910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5068b757-2293-4468-9c46-df40c970ee91",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Should this appear above the `if` on line 480? Does it make any difference?",
        "createdAt" : "2019-05-06T00:36:38Z",
        "updatedAt" : "2019-05-19T19:06:09Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f4f09dbb-0ba5-440c-8c36-002e52a501ed",
        "parentId" : "5068b757-2293-4468-9c46-df40c970ee91",
        "authorId" : "71cfe442-b489-4b2e-8349-5d87e42c3ad9",
        "body" : "I think the check on line 480 should precede both array and array-like cases. I'm not sure why it is done after `PyArray_Check`.",
        "createdAt" : "2019-05-07T10:15:28Z",
        "updatedAt" : "2019-05-19T19:06:09Z",
        "lastEditedBy" : "71cfe442-b489-4b2e-8349-5d87e42c3ad9",
        "tags" : [
        ]
      },
      {
        "id" : "57d5f871-4510-4c45-a0cf-0e17b14eb995",
        "parentId" : "5068b757-2293-4468-9c46-df40c970ee91",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "I think this is fine here. Both `a` and `s` need to be verified, the order is not all that important. Note that `dim` is not used in the branch in 458-478, so the check should not be before those lines.",
        "createdAt" : "2019-05-16T05:12:42Z",
        "updatedAt" : "2019-05-19T19:06:09Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "71fc59d587016d6f36007ba06e074d4d4a6b483d",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +484,488 @@    }\n\n    tmp = _array_from_array_like(s, /*dtype*/NULL, /*writeable*/0, /*context*/NULL);\n    if (tmp == NULL) {\n        goto fail;"
  },
  {
    "id" : "1686d770-591b-45c9-85ca-3a7552189570",
    "prId" : 13663,
    "prUrl" : "https://github.com/numpy/numpy/pull/13663#pullrequestreview-244011955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f89eadc-488e-4e06-a33e-7de4a0950fcf",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n                Py_DECREF(tmp);\r\n                goto fail;\r\n```\r\nSomething is still off here with the reference counting. Also the return 0 below needs it. Which probably means the whether or not the else clause is there did not matter much. Or we make `tmp = NULL;` one scope up to make the fail paths nicer.",
        "createdAt" : "2019-05-29T21:04:32Z",
        "updatedAt" : "2019-05-30T19:57:33Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "3ad5e6e2-dd25-4d86-8a28-b809a4bb11de",
        "parentId" : "8f89eadc-488e-4e06-a33e-7de4a0950fcf",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "refactored",
        "createdAt" : "2019-05-30T19:57:54Z",
        "updatedAt" : "2019-05-30T19:57:54Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "7b7d8c28-6826-40c8-a096-db339855753d",
        "parentId" : "8f89eadc-488e-4e06-a33e-7de4a0950fcf",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Thanks, looks right now. Will merge as soon as tests finish (or squash merge).",
        "createdAt" : "2019-05-30T20:26:59Z",
        "updatedAt" : "2019-05-30T20:26:59Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "114068142491e5ef457da61867c92513e71d1458",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +501,505 @@            Py_DECREF(tmp);\n            if (r < 0) {\n                goto fail;\n            }\n            Py_DECREF(s);"
  },
  {
    "id" : "fa7eb8b8-9d32-44ee-b9ca-6d5c697691d8",
    "prId" : 13691,
    "prUrl" : "https://github.com/numpy/numpy/pull/13691#pullrequestreview-247968942",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9425a6c-0509-4eea-9b0b-7df8b5843a0f",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think this `MAX` was actually a previous failed attempt to prevent this.",
        "createdAt" : "2019-06-11T06:17:29Z",
        "updatedAt" : "2019-06-11T06:17:29Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "03052b72ba39e2f1cd1994cec470f6be818f06a6",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +3702,3706 @@    }\n    if (num < 0) {\n        const size_t nsize = PyArray_MAX(*nread,1)*dtype->elsize;\n\n        if (nsize != 0) {"
  },
  {
    "id" : "d0f500d3-7e48-4e9a-b05d-d5ea0bf3f38b",
    "prId" : 14100,
    "prUrl" : "https://github.com/numpy/numpy/pull/14100#pullrequestreview-266173861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3eee8ee-2db0-488a-a505-1c2128872d3f",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "This is fine. In principle (what I mentioned with the reference counts). This needs the additional line\r\n```\r\nPy_DECREF(descr);\r\n```\r\n(it was missing in the `DEPRECATE` path before). This is because the reference to `descr` is normally \"stolen\" by `PyArray_NewFromDescr`.",
        "createdAt" : "2019-07-24T17:31:30Z",
        "updatedAt" : "2019-07-29T11:19:25Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "a533f106-8f7a-4fb2-b097-db3890fa6407",
        "parentId" : "e3eee8ee-2db0-488a-a505-1c2128872d3f",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "(the same applies below).",
        "createdAt" : "2019-07-24T17:37:33Z",
        "updatedAt" : "2019-07-29T11:19:25Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d9183c39a5d12eaf98ad7ce2cd2be926ef0e5ac",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +2782,2786 @@                                char *data)\n{\n    PyErr_SetString(PyExc_NotImplementedError,\n                \"PyArray_FromDimsAndDataAndDescr: use PyArray_NewFromDescr.\");\n    Py_DECREF(descr);"
  },
  {
    "id" : "35983281-62f1-438e-a73e-d35578b7a78b",
    "prId" : 14477,
    "prUrl" : "https://github.com/numpy/numpy/pull/14477#pullrequestreview-287128145",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6212bfa-38a8-4b8c-ab9a-51aab9d1e48b",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n            return raise_memory_error(fa->nd, fa->dimensions, (PyObject *)descr);\r\n```\r\nTravis/gcc is unhappy about the missing cast unfortunately. Otherwise looks perfect to me.",
        "createdAt" : "2019-09-11T23:35:48Z",
        "updatedAt" : "2019-09-13T07:26:36Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2814838355a8a58e381f400d284f7e2cef17f55a",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +1147,1151 @@        }\n        if (data == NULL) {\n            return raise_memory_error(fa->nd, fa->dimensions, descr);\n        }\n        fa->flags |= NPY_ARRAY_OWNDATA;"
  },
  {
    "id" : "d722f36d-0705-44c3-bc94-98c7e7087e2d",
    "prId" : 14586,
    "prUrl" : "https://github.com/numpy/numpy/pull/14586#pullrequestreview-297798404",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07753e48-3e9d-4484-b30c-3b01247d36c2",
        "parentId" : null,
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "This I think breaks reading sub-array dtypes:\r\n```\r\n# After this PR\r\n>>> import numpy as np\r\n>>> with open('/dev/zero', 'rb') as f:\r\n...     a = np.fromfile(f, dtype='(8,8)u8', count=1)\r\n... \r\n>>> (a == 0).all()\r\nFalse\r\n```\r\nThe reason I guess is that creating an array with sub-array dtype moves the array dimensions from the dtype to the array itself, so the number of bytes to read becomes incorrect.",
        "createdAt" : "2019-10-05T14:45:15Z",
        "updatedAt" : "2019-10-05T14:48:52Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "4b987b53-97ef-41f6-917f-3d9be6238bc8",
        "parentId" : "07753e48-3e9d-4484-b30c-3b01247d36c2",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Oh should have thought of that. Yeah, if I do it like that, I also have to update the `num` from the actual array...",
        "createdAt" : "2019-10-05T16:26:46Z",
        "updatedAt" : "2019-10-05T16:26:47Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a78e465caee322b2b7e67e41cdc7a96b587130f4",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +3613,3617 @@    }\n    /* In some cases NewFromDescr can replace the dtype, so fetch new one */\n    dtype = PyArray_DESCR(r);\n\n    NPY_BEGIN_ALLOW_THREADS;"
  },
  {
    "id" : "a5eff4d3-d588-44a1-8756-5fd0310a9f4d",
    "prId" : 14745,
    "prUrl" : "https://github.com/numpy/numpy/pull/14745#pullrequestreview-308883717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f32cbaa-98e5-4daa-9e59-b4f0c67139c8",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Why don't you need to now change all the places `PyArray_LookupSpecial_OnInstance` and `PyArray_LookupSpecial_OnInstance` are called to check for errors?",
        "createdAt" : "2019-10-21T18:19:22Z",
        "updatedAt" : "2019-10-29T23:22:05Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "efa588ea-e775-4702-b275-46da86e7009c",
        "parentId" : "6f32cbaa-98e5-4daa-9e59-b4f0c67139c8",
        "authorId" : "e5afe0f2-9e12-4e7c-9645-4a1617473dcf",
        "body" : "I don't know. This change was enough to make my tests pass, so I stopped with this. If you would like me to also change this for every other code path, I would need examples for triggering these paths to verify that my changes actually do something.",
        "createdAt" : "2019-10-21T19:25:29Z",
        "updatedAt" : "2019-10-29T23:22:05Z",
        "lastEditedBy" : "e5afe0f2-9e12-4e7c-9645-4a1617473dcf",
        "tags" : [
        ]
      },
      {
        "id" : "52fcefac-f3a3-4f2c-989e-6127e2ee913a",
        "parentId" : "6f32cbaa-98e5-4daa-9e59-b4f0c67139c8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Unfortunately we do now need to change every call site to either handle it or call `PyErr_Clear()`, else you risk a `SystemError` occurring.",
        "createdAt" : "2019-10-29T21:20:14Z",
        "updatedAt" : "2019-10-29T23:22:05Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e901b275-1821-45a1-af19-d0ddf2a18488",
        "parentId" : "6f32cbaa-98e5-4daa-9e59-b4f0c67139c8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "In the interest of speed, I suggest you:\r\n* Create a new tracking issue, \"propagate errors where appropriate from PyArray_LookupSpecial\"\r\n* Find every occurence of `PyArray_LookupSpecial` and `PyArray_LookupSpecial_OnInstance`, and in the `if (ret == NULL)` branch, add `PyErr_Clear();  // TODO[gh-XYZ]: propagate this?\r\n\r\nThis will be consistent with the behavior on master, with the benefit of marking all the places that someone else can come back to.",
        "createdAt" : "2019-10-29T21:22:40Z",
        "updatedAt" : "2019-10-29T23:22:05Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "77800591-ec88-4e38-8e63-f88476d3fdb7",
        "parentId" : "6f32cbaa-98e5-4daa-9e59-b4f0c67139c8",
        "authorId" : "e5afe0f2-9e12-4e7c-9645-4a1617473dcf",
        "body" : "done, see #14801.\r\n\r\nCould you look over the changes in `binop_override.h` and `arrayfunction_override.c`? I'm not sure about those, especially the change from `if (attr)` to `if (attr != NULL)`.",
        "createdAt" : "2019-10-29T22:25:26Z",
        "updatedAt" : "2019-10-29T23:22:05Z",
        "lastEditedBy" : "e5afe0f2-9e12-4e7c-9645-4a1617473dcf",
        "tags" : [
        ]
      },
      {
        "id" : "298dd77e-ed70-4efe-89d1-d2821252a51f",
        "parentId" : "6f32cbaa-98e5-4daa-9e59-b4f0c67139c8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Those changes are fine, thanks for checking. I think we could make the comments a little less cryptic, see my new comment thread below, marking this one as resolved.",
        "createdAt" : "2019-10-29T22:58:49Z",
        "updatedAt" : "2019-10-29T23:22:05Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1559be204d374017b2b9f1f25b719ac67737183a",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +2363,2367 @@        } else {\n            return Py_NotImplemented;\n        }\n    }\n    if (!NpyCapsule_Check(attr)) {"
  },
  {
    "id" : "b29bf1bd-8c07-42bb-9958-388013fcd7c5",
    "prId" : 14794,
    "prUrl" : "https://github.com/numpy/numpy/pull/14794#pullrequestreview-322497753",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c88a8503-9829-4334-b0e8-2fafc2fc1a06",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm a little confused - does a dictionary actually take this path?",
        "createdAt" : "2019-11-07T16:55:30Z",
        "updatedAt" : "2019-11-29T11:32:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1f81eb93-3aca-464c-8a49-6c2f70353872",
        "parentId" : "c88a8503-9829-4334-b0e8-2fafc2fc1a06",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "changed to `DISCOVERED_OBJECT`",
        "createdAt" : "2019-11-07T21:37:29Z",
        "updatedAt" : "2019-11-29T11:32:32Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "3298a18b-c2cc-4d4a-a273-a2183cce4b89",
        "parentId" : "c88a8503-9829-4334-b0e8-2fafc2fc1a06",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Ok, I now understand this now. For dictionary-like objects that implement `__getitem__` but not `__iter__`, this path is taken, as the default `iter(thing_with_getitem)` will call `__getitem__(0)`.\r\n\r\nI'd argue that user code that hits this path is itself broken, but that's out of scope for this patch.",
        "createdAt" : "2019-11-25T18:44:31Z",
        "updatedAt" : "2019-11-29T11:32:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b4d0ac95d178409d030a4c77651f8ed1d305dea",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +910,914 @@         * error back up the call chain.\n         */\n        if (PyErr_ExceptionMatches(PyExc_KeyError)) {\n            PyErr_Clear();\n            *maxndim = 0;"
  },
  {
    "id" : "f12fc1ff-2b6c-48b7-9223-428f9194dabe",
    "prId" : 14794,
    "prUrl" : "https://github.com/numpy/numpy/pull/14794#pullrequestreview-322524732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4af9709-e98f-47e2-9b19-51d2dca087cd",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Is there precedent for a `_t` suffixin numpy? In principle, this is reserved by POSIX.",
        "createdAt" : "2019-11-25T18:45:14Z",
        "updatedAt" : "2019-11-29T11:32:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "dabdc200-9b18-4167-b3e8-afafe834e2c5",
        "parentId" : "f4af9709-e98f-47e2-9b19-51d2dca087cd",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "For enums, `mem_overlap.h` has `mem_overlap_t`. There are many sructs that use `_t`. It is easy enough to change, what would you prefer?",
        "createdAt" : "2019-11-25T19:28:17Z",
        "updatedAt" : "2019-11-29T11:32:32Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "f954e713-b36f-42b3-8004-7e330034a3a0",
        "parentId" : "f4af9709-e98f-47e2-9b19-51d2dca087cd",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "If we already do it, then we've already crossed the posix-compliant line, so there's no point worrying here - fine as is, we could consider fixing them all if anyone complains.",
        "createdAt" : "2019-11-25T19:30:04Z",
        "updatedAt" : "2019-11-29T11:32:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b4d0ac95d178409d030a4c77651f8ed1d305dea",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +718,722 @@    DISCOVERED_RAGGED = 1,\n    DISCOVERED_OBJECT = 2\n} discovered_t;\n\n/*"
  },
  {
    "id" : "455d9b62-b51b-4cea-b559-57a47f5acd2c",
    "prId" : 14794,
    "prUrl" : "https://github.com/numpy/numpy/pull/14794#pullrequestreview-324611335",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a64d771c-c5f5-46b3-afca-3036efc3871e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "If this isn't making the release...\r\n```suggestion\r\n                /* NumPy 1.19, 2019-11-01 */\r\n```",
        "createdAt" : "2019-11-29T09:32:53Z",
        "updatedAt" : "2019-11-29T11:32:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c92f44cc-67c0-4b19-8e15-dfe853f8c303",
        "parentId" : "a64d771c-c5f5-46b3-afca-3036efc3871e",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "It is waiting on your review. It can be in the release if ~you approve it~ it gets merged soon, but is not a blocker.",
        "createdAt" : "2019-11-29T09:34:46Z",
        "updatedAt" : "2019-11-29T11:32:32Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "ecbc1da0-0967-4f05-9b63-e170ef38519f",
        "parentId" : "a64d771c-c5f5-46b3-afca-3036efc3871e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Added a comment above - a single test in `test_deprecation.py` is enough to make me happy, no need to rewrite all the other tests.",
        "createdAt" : "2019-11-29T09:43:10Z",
        "updatedAt" : "2019-11-29T11:32:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b4d0ac95d178409d030a4c77651f8ed1d305dea",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +1885,1889 @@        if (is_object != DISCOVERED_OK) {\n            if (is_object == DISCOVERED_RAGGED && requested_dtype == NULL) {\n                /* NumPy 1.18, 2019-11-01 */\n                if (DEPRECATE(\"Creating an ndarray with automatic object \"\n                    \"dtype is deprecated, use dtype=object if you intended \""
  },
  {
    "id" : "ee246c31-527d-4997-9dac-87720d4a05b2",
    "prId" : 14794,
    "prUrl" : "https://github.com/numpy/numpy/pull/14794#pullrequestreview-325984514",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6c122c9-4957-4707-a776-05fb42053596",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "could style nit, that the indentation should be deeper, but please ignore if you want.",
        "createdAt" : "2019-12-02T20:27:47Z",
        "updatedAt" : "2019-12-02T20:33:35Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "47b5d10d-f6f6-4802-9634-0addf74bf58d",
        "parentId" : "e6c122c9-4957-4707-a776-05fb42053596",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Will try to sneak it into another PR",
        "createdAt" : "2019-12-03T09:10:55Z",
        "updatedAt" : "2019-12-03T09:10:55Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b4d0ac95d178409d030a4c77651f8ed1d305dea",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +1888,1892 @@                if (DEPRECATE(\"Creating an ndarray with automatic object \"\n                    \"dtype is deprecated, use dtype=object if you intended \"\n                    \"it, otherwise specify an exact dtype\") < 0)\n                {\n                    return -1;"
  },
  {
    "id" : "8d9b8b86-8b52-4bcb-b64e-9acf61ee7bb4",
    "prId" : 14995,
    "prUrl" : "https://github.com/numpy/numpy/pull/14995#pullrequestreview-350508761",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9aa4f0ad-0d50-4fa5-afd9-9d304c7b984e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Is this not a new reference? If it's not, a comment would be good. If it is, please add a `Py_DECREF`!",
        "createdAt" : "2020-01-29T23:22:44Z",
        "updatedAt" : "2020-02-06T01:46:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "fedb7058-6f0d-4bb4-a6fe-b3784b48e61d",
        "parentId" : "9aa4f0ad-0d50-4fa5-afd9-9d304c7b984e",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "No, it is a new reference. Could be an old bug, most likely it just broke during the merge.",
        "createdAt" : "2020-01-29T23:23:32Z",
        "updatedAt" : "2020-02-06T01:46:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "9ecb194e-27ac-4559-899e-851721619a72",
        "parentId" : "9aa4f0ad-0d50-4fa5-afd9-9d304c7b984e",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Hmmm, I guess its not a new reference.. . that code predates my changes (it was reverted), so had not checked too carefully, but annoyingly enough:\r\n * `PyArray_FromStructInterface`\r\n * `PyArray_FromInterface`\r\n * `PyArray_HasArrayInterface`\r\n * `PyArray_HasArrayInterfaceType `\r\n\r\n returns `NotImplemented` **without** adding a reference :(.\r\n\r\nAn evil thought: Deprecate all of them later :).",
        "createdAt" : "2020-01-30T00:04:15Z",
        "updatedAt" : "2020-02-06T01:46:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "48dbe8453d6dcbf22e49f0080b364d7f0e642f50",
    "line" : 284,
    "diffHunk" : "@@ -1,1 +1570,1574 @@        return NULL;\n    }\n    if (tmp == Py_NotImplemented) {\n        /* Until the return, NotImplemented is always a borrowed reference*/\n        tmp = PyArray_FromInterface(op);"
  },
  {
    "id" : "e376bd80-659f-4e23-9757-0798c82e907e",
    "prId" : 14995,
    "prUrl" : "https://github.com/numpy/numpy/pull/14995#pullrequestreview-350495921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "781ffe9b-db88-4c7a-8445-9600db8cde4d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "~~Can we remove this now? It's already NULL at all the call-sites~~ nevermind",
        "createdAt" : "2020-01-29T23:27:34Z",
        "updatedAt" : "2020-02-06T01:46:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "48dbe8453d6dcbf22e49f0080b364d7f0e642f50",
    "line" : 238,
    "diffHunk" : "@@ -1,1 +1524,1528 @@ *                       DType may be used, but is not enforced.\n * @param writeable whether the result must be writeable.\n * @param context Unused parameter, must be NULL (should be removed later).\n *\n * @returns The array object, Py_NotImplemented if op is not array-like,"
  },
  {
    "id" : "cc339265-f45f-4d5a-b843-edb9f9aaa0b3",
    "prId" : 14995,
    "prUrl" : "https://github.com/numpy/numpy/pull/14995#pullrequestreview-350496851",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "323051be-c374-4827-8479-02355f1e3af8",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Possible leak of `NotImplemented` here too.",
        "createdAt" : "2020-01-29T23:30:04Z",
        "updatedAt" : "2020-02-06T01:46:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "48dbe8453d6dcbf22e49f0080b364d7f0e642f50",
    "line" : 302,
    "diffHunk" : "@@ -1,1 +1588,1592 @@     */\n    if (!writeable && tmp == Py_NotImplemented) {\n        tmp = PyArray_FromArrayAttr(op, requested_dtype, context);\n        if (tmp == NULL) {\n            return NULL;"
  },
  {
    "id" : "259cc207-44f1-44a1-89d6-3dce8663f120",
    "prId" : 15119,
    "prUrl" : "https://github.com/numpy/numpy/pull/15119#pullrequestreview-344216719",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bbb8983-3cd9-4bde-88f6-92e87afa1737",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "`npy_cache_import` includes this if (and is guaranteed to be inlined)",
        "createdAt" : "2020-01-16T20:36:21Z",
        "updatedAt" : "2020-01-21T18:17:19Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "a777de56-0f74-4950-a520-93228cc50461",
        "parentId" : "5bbb8983-3cd9-4bde-88f6-92e87afa1737",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "fixing",
        "createdAt" : "2020-01-16T21:08:20Z",
        "updatedAt" : "2020-01-21T18:17:19Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ff45dc8fabcc0ab54dd5d2db7170ad82a23d1fb",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +1818,1822 @@                \"numpy\", \"VisibleDeprecationWarning\",\n                &visibleDeprecationWarning);\n            if (visibleDeprecationWarning == NULL) {\n                return -1;\n            }"
  },
  {
    "id" : "0816b8ae-9249-4e9f-bc28-ede0c82d41e6",
    "prId" : 15427,
    "prUrl" : "https://github.com/numpy/numpy/pull/15427#pullrequestreview-349789438",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7148a401-165a-406d-b662-1ae682995303",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Can you drop the NULL context argument?",
        "createdAt" : "2020-01-26T11:03:04Z",
        "updatedAt" : "2020-02-01T23:51:30Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "a7ae8cf5-6ff6-4704-9333-86cceb1e259c",
        "parentId" : "7148a401-165a-406d-b662-1ae682995303",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Hmmm, although, then I need to move the error to the `PyArray_GetArrayParamsFromObject`. But I guess that is fine.",
        "createdAt" : "2020-01-27T20:05:10Z",
        "updatedAt" : "2020-02-01T23:51:30Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "3336641b-836f-4b44-8c25-39aa9a3ab642",
        "parentId" : "7148a401-165a-406d-b662-1ae682995303",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK, fixed this, and expanded Erics comment. I think I will look into array coercion replacement (with the idea that I can write this so that when we get new DTypes the code changes there will be small).\r\n\r\nHopefully, that will likely include simply moving this whole function onto a \"will be deleted later\" pile.",
        "createdAt" : "2020-01-29T00:04:09Z",
        "updatedAt" : "2020-02-01T23:51:30Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ee5012fbf7be3cf081407d5666a8733d965907d",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1632,1636 @@ */\nNPY_NO_EXPORT int\nPyArray_GetArrayParamsFromObject_int(PyObject *op,\n                        PyArray_Descr *requested_dtype,\n                        npy_bool writeable,"
  },
  {
    "id" : "d7d8820e-1ea0-41ec-9e95-bb873581b684",
    "prId" : 15427,
    "prUrl" : "https://github.com/numpy/numpy/pull/15427#pullrequestreview-349892347",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02e2a24e-8e35-4dcf-88fe-04d2cd487814",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "line 1739: context no longer is defined, the call should replace `context` with `NULL`",
        "createdAt" : "2020-01-29T06:56:08Z",
        "updatedAt" : "2020-02-01T23:51:30Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ee5012fbf7be3cf081407d5666a8733d965907d",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1637,1641 @@                        PyArray_Descr **out_dtype,\n                        int *out_ndim, npy_intp *out_dims,\n                        PyArrayObject **out_arr)\n{\n    PyObject *tmp;"
  },
  {
    "id" : "59f5c28b-12f6-420e-a39b-010b096295fb",
    "prId" : 16133,
    "prUrl" : "https://github.com/numpy/numpy/pull/16133#pullrequestreview-410414840",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b4e9f02-dcfe-44cf-8120-4e3b09ca786a",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Doesn't this now describe a 0d array as a scalar?",
        "createdAt" : "2020-05-03T10:18:56Z",
        "updatedAt" : "2020-05-12T20:46:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d9387b9a-5574-4efb-9f29-06aa3d877f3d",
        "parentId" : "1b4e9f02-dcfe-44cf-8120-4e3b09ca786a",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yes, but maybe no... that is what `PyArray_CanCastArrayTo` does. Its a bit annoying, it can be incorrect from the user-input perspective, but more correct due to value based casting of 0-D arrays. I.e. the 0-D array uses \"scalar casting\" rules right now, but the original input typically could have been either a scalar or an array.",
        "createdAt" : "2020-05-03T14:29:04Z",
        "updatedAt" : "2020-05-12T20:46:17Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "cc97cfef-be8b-4a5f-a7fe-8d8d9492d40c",
        "parentId" : "1b4e9f02-dcfe-44cf-8120-4e3b09ca786a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "What's the code path that hits this error?",
        "createdAt" : "2020-05-06T06:20:11Z",
        "updatedAt" : "2020-05-12T20:46:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b464fd50-a8ac-4ee5-8cb8-ebc1de2b44ad",
        "parentId" : "1b4e9f02-dcfe-44cf-8120-4e3b09ca786a",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Pretty much none... The only paths that should hit this, are arguably nonsense:\r\n```\r\nnp.take([2], [1], out=np.array([1], dtype=np.uint64))\r\n```\r\nbut even that example cannot get a \"scalar\" case.\r\n```\r\nfrom numpy.core import _rational_tests as rt                                                                   \r\nnp.array(np.array(rt.rational(2)), dtype=\"M8\")  \r\n```\r\nshould hit it IMO, but we currently consider all unsafe casts as possible, and in this case error when we notice that there is no way defined to do the actual casts. That is: In almost all cases we use force-casting, so it just doesn't matter.",
        "createdAt" : "2020-05-06T14:50:57Z",
        "updatedAt" : "2020-05-12T20:46:17Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "41793165-a161-4d88-aabb-59eb6c1e25e4",
        "parentId" : "1b4e9f02-dcfe-44cf-8120-4e3b09ca786a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Presumably `np.array(rt.rational(2), dtype=\"M8\")` is a case when the scalar message _is_ justified?\r\n",
        "createdAt" : "2020-05-12T20:09:30Z",
        "updatedAt" : "2020-05-12T20:46:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d3669337-d1d8-4b95-991b-43200da1fb7f",
        "parentId" : "1b4e9f02-dcfe-44cf-8120-4e3b09ca786a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Mind adding one of these as a test?",
        "createdAt" : "2020-05-12T20:11:02Z",
        "updatedAt" : "2020-05-12T20:46:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "4f0708a9-ddf4-4a18-9e11-2b523ebba5c6",
        "parentId" : "1b4e9f02-dcfe-44cf-8120-4e3b09ca786a",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I can add the test, but it is basically adding it for the future (or excersizing a different error). Because \"unsafe\" casts are currently always considered possible, it errors later with:\r\n```\r\nValueError: No cast function available\r\n```",
        "createdAt" : "2020-05-12T20:17:33Z",
        "updatedAt" : "2020-05-12T20:46:17Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "7471091b-00e3-4e6c-ae9e-0f780b3dd485",
        "parentId" : "1b4e9f02-dcfe-44cf-8120-4e3b09ca786a",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I added a test for a value error, I am not sure its useful here to be honest. But likely enough we never had a test for that in any case...",
        "createdAt" : "2020-05-12T20:46:45Z",
        "updatedAt" : "2020-05-12T20:46:45Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "567182e1-8dbd-496f-9aaf-a89b65b34b2c",
        "parentId" : "1b4e9f02-dcfe-44cf-8120-4e3b09ca786a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Coverage is always useful!",
        "createdAt" : "2020-05-12T20:55:18Z",
        "updatedAt" : "2020-05-12T20:55:18Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cc3af7abf8728534939d37dcda07c66d68381a3",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +2183,2187 @@        PyErr_Clear();\n        npy_set_invalid_cast_error(\n                PyArray_DESCR(arr), newtype, casting, PyArray_NDIM(arr) == 0);\n        return NULL;\n    }"
  }
]