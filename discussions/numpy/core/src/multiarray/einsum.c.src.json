[
  {
    "id" : "352f954f-657b-4299-a99d-9c8956e56a28",
    "prId" : 3341,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90eb9535-0609-4aed-8f74-1f2718898592",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I  believe this comes in indirectly with `numpy/arrayobject.h`\n",
        "createdAt" : "2013-05-22T01:28:38Z",
        "updatedAt" : "2013-05-25T15:36:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "95b1ca9f-106b-4132-aa93-b85e1b3d913e",
        "parentId" : "90eb9535-0609-4aed-8f74-1f2718898592",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "nvm, it only gets `numpyconfig.h`.\n",
        "createdAt" : "2013-05-22T01:33:33Z",
        "updatedAt" : "2013-05-25T15:36:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ea0c3578-065e-4b10-bf49-8ff1a52da76c",
        "parentId" : "90eb9535-0609-4aed-8f74-1f2718898592",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "even if it would, its better to include what you use directly (HAVE_EMMINTRIN_H), else you risk it silently reverting due to a removed include in another header\n",
        "createdAt" : "2013-05-22T17:29:41Z",
        "updatedAt" : "2013-05-25T15:36:50Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe69102dd34619ce18cf074ef0e6e46611bc17e7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +18,22 @@#include <numpy/halffloat.h>\n#include <npy_pycompat.h>\n#include <npy_config.h>\n\n#include <ctype.h>"
  },
  {
    "id" : "f7b0aaac-2a28-4dd2-afc0-59d329188757",
    "prId" : 3772,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2cbccda-0061-4c7d-9674-05464c15cba9",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "`npy_common.h` his comes in with `arrayobject.h`.\n",
        "createdAt" : "2013-09-21T21:04:31Z",
        "updatedAt" : "2013-09-21T21:04:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "09e7b7e6-c5a5-4a01-8566-024ca69c03c9",
        "parentId" : "a2cbccda-0061-4c7d-9674-05464c15cba9",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "we want a direct include, if for some reason it is dropped from arrayobject we don't want the define to disappear from this file.\n",
        "createdAt" : "2013-09-21T21:21:59Z",
        "updatedAt" : "2013-09-21T21:21:59Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd2e1104718490be8504f8d6665205ca594a37e7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +15,19 @@#define NPY_NO_DEPRECATED_API NPY_API_VERSION\n#define _MULTIARRAYMODULE\n#include <numpy/npy_common.h>\n#include <numpy/arrayobject.h>\n#include <numpy/halffloat.h>"
  },
  {
    "id" : "eff6babd-490f-48c9-9130-eaf61b6cce01",
    "prId" : 10798,
    "prUrl" : "https://github.com/numpy/numpy/pull/10798#pullrequestreview-106747445",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18d68f07-21bc-42af-aaee-3e406029b535",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Should this `combineoffset` check come first?",
        "createdAt" : "2018-03-25T22:49:33Z",
        "updatedAt" : "2018-03-25T22:49:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "dc236df7-e716-4792-bc34-04828aa42753",
        "parentId" : "18d68f07-21bc-42af-aaee-3e406029b535",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "Not really. `i` has to be mapped to the value of `icombine` (which is only advanced when a label is seen for the first time) of the first time this label was found, which was in dimension `idim + combineoffset`, and this has to be done regardless of whether this is the first time we see this label or not.",
        "createdAt" : "2018-03-25T22:54:48Z",
        "updatedAt" : "2018-03-25T22:54:48Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "73427d71-cb34-41e0-99b1-0882a43c01bd",
        "parentId" : "18d68f07-21bc-42af-aaee-3e406029b535",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "My thinking is that this could index out of range if `combineoffset` is negative",
        "createdAt" : "2018-03-25T23:06:54Z",
        "updatedAt" : "2018-03-25T23:06:54Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1146a9a473b7dc229fe457a383afd5394cd5cf2",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +2227,2231 @@            /* Update the combined axis dimensions and strides */\n            int i = icombinemap[idim + combineoffset];\n            if (combineoffset < 0 && new_dims[i] != 0 &&\n                        new_dims[i] != PyArray_DIM(op, idim)) {\n                PyErr_Format(PyExc_ValueError,"
  },
  {
    "id" : "5eb83919-2182-45db-8a61-399b8667c149",
    "prId" : 11095,
    "prUrl" : "https://github.com/numpy/numpy/pull/11095#pullrequestreview-120476522",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50d7a7c0-3ad1-4920-bb6a-2167442d542e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Why the cast from `char` to `int`?",
        "createdAt" : "2018-05-15T00:44:24Z",
        "updatedAt" : "2018-05-18T07:16:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "8e95154e-5278-4edb-8b1f-8f3718f40115",
        "parentId" : "50d7a7c0-3ad1-4920-bb6a-2167442d542e",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "It seems unnecessary here. Elsewhere I guess `label` is made an int because negative values are relevant and it's shorter than `signed char`. I guess it makes sense to keep a consistent typing, even if it is not strictly needed?",
        "createdAt" : "2018-05-15T23:15:26Z",
        "updatedAt" : "2018-05-18T07:16:55Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "4f57e6b5-3876-44a1-aa55-1e83b083b96b",
        "parentId" : "50d7a7c0-3ad1-4920-bb6a-2167442d542e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "The behavior of `signed char` and `int` is very different here - once will correctly store signed values whatever the system `char` is, whereas the other may end up storing an int in `[0, 256)`",
        "createdAt" : "2018-05-16T02:34:41Z",
        "updatedAt" : "2018-05-18T07:16:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2d59257b0d5e24d9f3811df5c314d525acfc0cb",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +1801,1805 @@    /* Process all labels for this operand */\n    for (i = 0; i < length; ++i) {\n        int label = subscripts[i];\n\n        /* A proper label for an axis. */"
  },
  {
    "id" : "f0a89c12-9abb-424b-aa9b-1e6e03ca2674",
    "prId" : 11095,
    "prUrl" : "https://github.com/numpy/numpy/pull/11095#pullrequestreview-120448591",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72b45a07-ef05-49d5-8ec4-c33977bb061c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`label > 0` is always true on platforms with an unsigned char",
        "createdAt" : "2018-05-15T00:44:50Z",
        "updatedAt" : "2018-05-18T07:16:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2ee7e6ff-9c9a-4af6-837d-01571d64dc8d",
        "parentId" : "72b45a07-ef05-49d5-8ec4-c33977bb061c",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "Even if the char is signed, all the values for which `isalpha` would return true are < 128, so it seems like a redundant check indeed...",
        "createdAt" : "2018-05-15T23:19:36Z",
        "updatedAt" : "2018-05-18T07:16:55Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2d59257b0d5e24d9f3811df5c314d525acfc0cb",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +1804,1808 @@\n        /* A proper label for an axis. */\n        if (label > 0 && isalpha(label)) {\n            /* Check we don't exceed the operator dimensions. */\n            if (idim >= ndim) {"
  },
  {
    "id" : "5dde4713-1d89-421a-a298-2425f45916f6",
    "prId" : 11095,
    "prUrl" : "https://github.com/numpy/numpy/pull/11095#pullrequestreview-120056627",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78a367e0-e453-4df7-a2a8-437a79dcfac3",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I agree with @mhvk here: these should return `-1`, but that can come in a later PR if needed",
        "createdAt" : "2018-05-15T00:49:05Z",
        "updatedAt" : "2018-05-18T07:16:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2d59257b0d5e24d9f3811df5c314d525acfc0cb",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +1831,1835 @@                             \"'.' that is not part of an ellipsis ('...') \"\n                             \"in operand %d\", iop);\n                return 0;\n            }\n"
  },
  {
    "id" : "f7b3a0e3-ccdd-4629-a9b8-2f9764f985c3",
    "prId" : 11230,
    "prUrl" : "https://github.com/numpy/numpy/pull/11230#pullrequestreview-126667269",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3b8f5f0-77ad-4d0d-866a-ccbd5738c900",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Any chance you could comment `icombinemap`, assuming you've worked out what it does?",
        "createdAt" : "2018-06-07T07:49:58Z",
        "updatedAt" : "2018-06-13T20:30:46Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d914234ba39db75b7158c950d2739a9d3013de4",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +2118,2122 @@    npy_intp new_dims[NPY_MAXDIMS];\n    int idim, icombine;\n    int icombinemap[NPY_MAXDIMS];\n    int ndim = PyArray_NDIM(op);\n    PyArrayObject *ret = NULL;"
  },
  {
    "id" : "1dab1b1d-7c08-42c4-9414-a7de371f4835",
    "prId" : 11230,
    "prUrl" : "https://github.com/numpy/numpy/pull/11230#pullrequestreview-192498903",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bd70d4c-b4f4-49f0-b26f-ceedc973cd5a",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Does this change the result of `x = np.eye(2); np.einsum('ij', x) is x`?",
        "createdAt" : "2018-06-26T03:20:56Z",
        "updatedAt" : "2018-06-26T03:21:05Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "dfa86719-d1eb-4b2f-9100-40248c1b25f9",
        "parentId" : "0bd70d4c-b4f4-49f0-b26f-ceedc973cd5a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "(which is currently `False`)",
        "createdAt" : "2019-01-15T06:22:31Z",
        "updatedAt" : "2019-01-15T06:22:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d914234ba39db75b7158c950d2739a9d3013de4",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +2123,2127 @@\n    /* A fast path to avoid unnecessary calculations. */\n    if (!_any_labels_are_negative((signed char *)labels, ndim)) {\n        Py_INCREF(op);\n"
  },
  {
    "id" : "11befce0-00f5-4619-865d-4666bd0753f9",
    "prId" : 11230,
    "prUrl" : "https://github.com/numpy/numpy/pull/11230#pullrequestreview-131853449",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2dd51eff-2085-4379-b9b8-f7f82140db25",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Could change to `i >= idim` for a marginal gain in efficiency",
        "createdAt" : "2018-06-26T03:21:31Z",
        "updatedAt" : "2018-06-26T03:21:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d914234ba39db75b7158c950d2739a9d3013de4",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +2171,2175 @@        int i = icombinemap[idim];\n\n        if (i >= 0) {\n            labels[i] = labels[idim];\n        }"
  },
  {
    "id" : "7b97517f-17c3-4bd3-90bd-2f95b4aa33a3",
    "prId" : 11286,
    "prUrl" : "https://github.com/numpy/numpy/pull/11286#pullrequestreview-128137283",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51c4550f-4c3d-4c47-a2c5-b1365551ead3",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Would be clearer to move `((dtype != NULL) ? 0 : NPY_ITER_COMMON_DTYPE)` out of the ternary and into a similar if",
        "createdAt" : "2018-06-08T23:44:47Z",
        "updatedAt" : "2018-06-12T20:33:00Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c9079181-e977-4e0d-96d3-f7d9087123f8",
        "parentId" : "51c4550f-4c3d-4c47-a2c5-b1365551ead3",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I think once that minor change has been made, this is ready to go in.",
        "createdAt" : "2018-06-10T17:50:13Z",
        "updatedAt" : "2018-06-12T20:33:00Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "6b2be694-74e1-4a80-93ab-d33bcf29b154",
        "parentId" : "51c4550f-4c3d-4c47-a2c5-b1365551ead3",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "changed",
        "createdAt" : "2018-06-12T20:33:59Z",
        "updatedAt" : "2018-06-12T20:33:59Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "01a0971afc00b5ab610d3cb72d1111452c663bf2",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +2755,2759 @@    if (out != NULL) {\n        iter_flags |= NPY_ITER_COPY_IF_OVERLAP;\n    }\n    if (dtype == NULL) {\n        iter_flags |= NPY_ITER_COMMON_DTYPE;"
  },
  {
    "id" : "f046c703-cbf0-44c0-bdc9-95a2daacc4a5",
    "prId" : 11406,
    "prUrl" : "https://github.com/numpy/numpy/pull/11406#pullrequestreview-132592704",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94d5a2bd-f7ed-4058-9bda-b4228edc83e5",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Out of curiousity, a couple of questions.\r\n\r\n- The iterator iterates over `out` if present?\r\n- The writeback to `out` or the new output array happens in iter deallocation?\r\n- I assume deallocation also decrefs the `out` or new array?",
        "createdAt" : "2018-06-27T20:06:27Z",
        "updatedAt" : "2018-06-27T20:06:27Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "1f79b3c4-6030-47a2-838f-cb1d6ac1ac3e",
        "parentId" : "94d5a2bd-f7ed-4058-9bda-b4228edc83e5",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "I need to incref the output before `NpyIterDeallocate` so it stays alive through that call.\r\n- The assignment `op[nop] = out` near the beginning ensures `out`, if present is used in iteration, possibly with writeback semantics. Note that `nop` is the number of inputs, but actually `op` uses `nop +1` entries, one additional for the output.\r\n- The writeback happens in `NpyIterDeallocate`, which also decrefs all operands including the output (which were increfed in `NpyIter_AdvancedNew`.\r\n- In addition, `einsum` itself increfed all the inputs while deciding whether to create views or not, around `get_combined_dims_view`. So whether fail or finish, at the end the function decrefs the inputs, (not the output).",
        "createdAt" : "2018-06-27T20:20:34Z",
        "updatedAt" : "2018-06-27T20:20:35Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae5000f4787fcc99f27e55a171f14cc8405e8ed9",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +2869,2873 @@finish:\n    if (out != NULL) {\n        ret = out;\n    }\n    Py_INCREF(ret);"
  },
  {
    "id" : "ba07ad6f-25c3-425f-907e-343aed9b160a",
    "prId" : 15162,
    "prUrl" : "https://github.com/numpy/numpy/pull/15162#pullrequestreview-421433398",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcc0f8b8-b861-4532-98c4-6afde00c6ecc",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Will this change make `np.einsum(\"...i,...i->...i\", np.arange(3), np.array([1]))` an error? That is, should named dimensions in einsum be viewed as non-broadcastable?",
        "createdAt" : "2020-05-30T09:26:41Z",
        "updatedAt" : "2020-05-30T19:11:46Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "28f634d9-9c5f-4805-9e40-1330dae91d31",
        "parentId" : "fcc0f8b8-b861-4532-98c4-6afde00c6ecc",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yes, it changes that. I can undo. But einsum does not really have `keepdims` semantics nor is that notation einsum notation AFAIK.\r\nCompletely changing the resul behaviour by providing (a potentially wrong) output array seems undesirable to me?",
        "createdAt" : "2020-05-30T13:53:31Z",
        "updatedAt" : "2020-05-30T19:11:46Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "4d80360b-6607-4375-a534-ba42a6eaa70a",
        "parentId" : "fcc0f8b8-b861-4532-98c4-6afde00c6ecc",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "What's the resulting error look like with this branch?\r\n\r\nNot sure what you mean by that not being einsum notation - that notation works for me",
        "createdAt" : "2020-05-30T14:04:29Z",
        "updatedAt" : "2020-05-30T19:11:46Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b7e691c3-b2a2-4af2-9734-e58bea02c6f7",
        "parentId" : "fcc0f8b8-b861-4532-98c4-6afde00c6ecc",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Sorry, this is unchanged, I thought you had `np.einsum(\"...i->...i\", np.arange(3), out=np.array([1]))`\r\n\r\nIf you do not provide an out array, no semantics are ever changed here.",
        "createdAt" : "2020-05-30T14:11:18Z",
        "updatedAt" : "2020-05-30T19:11:46Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "5111e3fa-4514-4ed6-be95-43a8cb0fb79f",
        "parentId" : "fcc0f8b8-b861-4532-98c4-6afde00c6ecc",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK, sorry... I do not think anything changed at all. Since opposite broadcasting should be the only thing that changed (since only `np.newaxis` is marked here). But einsum specifically checks for `out` having too many dimensions.",
        "createdAt" : "2020-05-30T14:17:00Z",
        "updatedAt" : "2020-05-30T19:11:46Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "a441e238-f5d4-4456-bdd6-9ec9b52e69e9",
        "parentId" : "fcc0f8b8-b861-4532-98c4-6afde00c6ecc",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I.e. this is really just because I like this way better to specify the axes. The only thing where it makes a real difference currently would be reductions with `keepdims=True`, but there I think we may have had an additional check recently. Making the only actual bug fix/change in behaviour gufuncs...",
        "createdAt" : "2020-05-30T14:20:09Z",
        "updatedAt" : "2020-05-30T19:11:46Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "8d1480ff-7d2a-42fa-90de-8708ccddec20",
        "parentId" : "fcc0f8b8-b861-4532-98c4-6afde00c6ecc",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "So what threw me off a bit, is that this does *not* address the fact that the output can cause normal expand the final result shape through broadcasting:\r\n```\r\nnp.sum(arr, out=np.empty((3, 1)), axis=1, keepdims=True)\r\n```\r\nthe output (writeable) array can modify the broadcast dimensions. That is actually a small regression here right now.",
        "createdAt" : "2020-05-30T15:38:32Z",
        "updatedAt" : "2020-05-30T19:11:46Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "d10d4d1c-7194-420e-9012-f7b57ed1beac",
        "parentId" : "fcc0f8b8-b861-4532-98c4-6afde00c6ecc",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "For reductions, I can fix this trivially by using the no-broadcast flags on the input, which is obviously correct. slightly less nice error:\r\n```\r\nValueError: non-broadcastable operand with shape (1,100) doesn't match the broadcast shape (3,100)\r\n```\r\nbut it seems OK for me for now. For einsum its more complicated, since what we really want is the output to not have any say in the final shape, but there is no nice way to do that currently. However, there is also no change in behaviour here, so I think it does not matter for this PR.",
        "createdAt" : "2020-05-30T15:49:52Z",
        "updatedAt" : "2020-05-30T19:11:46Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "0d29fbf3-a46d-43b8-8ffa-ef2f00f7e0e5",
        "parentId" : "fcc0f8b8-b861-4532-98c4-6afde00c6ecc",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "That sounds good. But as a check, would one or the other solve the no-input-but-have-output case discussed in https://github.com/numpy/numpy/issues/15140?",
        "createdAt" : "2020-05-30T16:20:56Z",
        "updatedAt" : "2020-05-30T19:11:46Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "ead71c97-5f46-45ee-855d-a30d7d7f604b",
        "parentId" : "fcc0f8b8-b861-4532-98c4-6afde00c6ecc",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "OK, I had a quick look and this PR does not address #15140, so no worries about it!",
        "createdAt" : "2020-05-30T16:35:49Z",
        "updatedAt" : "2020-05-30T19:11:46Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "acb9d1df-9074-421e-9518-592ef205d9d1",
        "parentId" : "fcc0f8b8-b861-4532-98c4-6afde00c6ecc",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Hmmmm. I am wondering if we could mark an operand as output to indicate that it should not affect shape (or maybe using the WRITABLE flag is OK, but I fear that is a bit of a potential regression).\r\n\r\nI suppose when there is no shape, the shape is just should be `()` (and if there are reduce, but keepdims, axis, they are always inserted with size 1 right now).\r\n\r\nWith your gufunc the question is whether you actually *want* the output to define the size in that case. Technically, that could be nice in some cases, unless you argue that the user should somehow provide `shape=...` in that case.\r\nAlthough, for the iterator maybe that would be the same, and the gufunc machinery would just not pass the flag if there are no inputs?",
        "createdAt" : "2020-05-30T16:42:39Z",
        "updatedAt" : "2020-05-30T19:11:46Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "b9a4b7e0-dadf-4778-9885-de0b1b550c89",
        "parentId" : "fcc0f8b8-b861-4532-98c4-6afde00c6ecc",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Oh, I am conflating two issues there. With no arguments we could already simply default to a 0-D iterator without much hassle probably...\r\nHow/if the output argument can affect the iterator shape is another issue.\r\n\r\n(edit, but for another PR.)",
        "createdAt" : "2020-05-30T16:47:45Z",
        "updatedAt" : "2020-05-30T19:11:46Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "24bf73fb-1f43-4349-917c-ad05d9ae631c",
        "parentId" : "fcc0f8b8-b861-4532-98c4-6afde00c6ecc",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Indeed, for my strange case I do not think the output shape has to affect the iterator; it was about automatically allocating gufunc dimensions if needed, even if there are no inputs.",
        "createdAt" : "2020-05-30T18:23:56Z",
        "updatedAt" : "2020-05-30T19:11:46Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "8da4fba24c193807555dfcbc0e67834cae9185ea",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2741,2745 @@    }\n    for (idim = ndim_output; idim < ndim_iter; ++idim) {\n        op_axes[nop][idim] = NPY_ITER_REDUCTION_AXIS(-1);\n    }\n"
  },
  {
    "id" : "bfde1156-8c61-4ec2-a1bf-a691497effa6",
    "prId" : 17109,
    "prUrl" : "https://github.com/numpy/numpy/pull/17109#pullrequestreview-471358885",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86d25084-ce01-44ef-851f-1d114670da83",
        "parentId" : null,
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "```suggestion\r\n#include \"einsum_debug.h\"\r\n\r\nstatic sum_of_products_fn\r\nget_sum_of_products_function(int nop, int type_num, npy_intp itemsize, npy_intp const *fixed_strides)\r\n{\r\n    #ifndef NPY_DISABLE_OPTIMIZATION\r\n        /**\r\n         * Auto-generated config headers '*.dispatch.h' are overriding each other,\r\n         * which allows the possibility of 'race condition' if another config\r\n         * header has been involved in the scope.\r\n         * Therefore we tend to include the desired header close from the\r\n         * dispatching macros.\r\n         */\r\n        #include \"einsum.dispatch.h\"\r\n    #endif\r\n    NPY_CPU_DISPATCH_CALL(return simd_get_sum_of_products_function,\r\n        (nop, type_num, itemsize, fixed_strides))\r\n}\r\n```",
        "createdAt" : "2020-08-20T00:34:27Z",
        "updatedAt" : "2020-08-20T09:34:02Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      },
      {
        "id" : "72de1cfd-9e82-47a0-928c-f4234ccbd997",
        "parentId" : "86d25084-ce01-44ef-851f-1d114670da83",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "These changes are good, but they change the scope of this PR in a way I was deliberately avoiding. Let's put them in as part of #17049.",
        "createdAt" : "2020-08-20T07:12:34Z",
        "updatedAt" : "2020-08-20T09:34:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "477ab1de-36c6-45f0-87bb-244c7dc73a08",
        "parentId" : "86d25084-ce01-44ef-851f-1d114670da83",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "I was trying to reduce the rebasing burden, what do you think @Qiyu8?",
        "createdAt" : "2020-08-20T07:28:52Z",
        "updatedAt" : "2020-08-20T09:34:02Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      },
      {
        "id" : "dc7593ca-bd72-450f-a9f7-f6f950396878",
        "parentId" : "86d25084-ce01-44ef-851f-1d114670da83",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Frankly, if the rebasing is tricky you can just paste all the code from #17049 on top of my changes, and we'll deal with differences in review. What matters is understanding what changed in #17049, which merging this will solve.",
        "createdAt" : "2020-08-20T07:39:29Z",
        "updatedAt" : "2020-08-20T09:34:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "6366d4cb-d726-4646-b270-8d7a0f7581d6",
        "parentId" : "86d25084-ce01-44ef-851f-1d114670da83",
        "authorId" : "16f8768b-62bb-468a-bef5-f7adfae4fef5",
        "body" : "IMO, the rebasing is not a hard task, I will make a copy of all the code in #17049, Thanks @eric-wieser @seiko2plus  ,The split task should be my job.",
        "createdAt" : "2020-08-20T08:05:48Z",
        "updatedAt" : "2020-08-20T09:34:02Z",
        "lastEditedBy" : "16f8768b-62bb-468a-bef5-f7adfae4fef5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7df11c52b48a7dd22cb4fc968d8af7cce4a2c5f",
    "line" : 1905,
    "diffHunk" : "@@ -1,1 +26,30 @@\n#include \"einsum_sumprod.h\"\n#include \"einsum_debug.h\"\n\n"
  },
  {
    "id" : "a4c3f015-b8e7-447a-afdb-7ab580d3b3f4",
    "prId" : 17109,
    "prUrl" : "https://github.com/numpy/numpy/pull/17109#pullrequestreview-471303302",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a13ffcd-60ec-41ef-85a3-a79ca881ea4f",
        "parentId" : null,
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "just combine the two headers into a one\r\nEDIT: it's okay to keep them as-is I just don't see a reason for it.",
        "createdAt" : "2020-08-20T00:37:56Z",
        "updatedAt" : "2020-08-20T09:34:02Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      },
      {
        "id" : "8808ad18-e149-4c4f-88ae-b25b1b1365fa",
        "parentId" : "4a13ffcd-60ec-41ef-85a3-a79ca881ea4f",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "One header describes what is in the `sumprod.c` file, the other is unrelated debug macros that we should probably just remove in future.",
        "createdAt" : "2020-08-20T07:11:22Z",
        "updatedAt" : "2020-08-20T09:34:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7df11c52b48a7dd22cb4fc968d8af7cce4a2c5f",
    "line" : 1904,
    "diffHunk" : "@@ -1,1 +25,29 @@#include \"ctors.h\"\n\n#include \"einsum_sumprod.h\"\n#include \"einsum_debug.h\"\n"
  },
  {
    "id" : "e3972272-2686-45f2-8925-f50004bc51b8",
    "prId" : 18450,
    "prUrl" : "https://github.com/numpy/numpy/pull/18450#pullrequestreview-595617169",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3d961bd-5b91-460a-a459-03b1111bff46",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "This is technically not necessary for backport, since NumPy (also master), does currently not even support object einsum or unsafe casts I think.",
        "createdAt" : "2021-02-21T21:42:17Z",
        "updatedAt" : "2021-02-22T04:10:56Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "0fb761c8-4c91-4f6b-ada9-d73a989556c0",
        "parentId" : "b3d961bd-5b91-460a-a459-03b1111bff46",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Won't hurt. Remaining more or less in sync with master is sometimes helpful for future backports.",
        "createdAt" : "2021-02-22T17:48:49Z",
        "updatedAt" : "2021-02-22T17:48:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d864e872060c37308c2fd3ca75508838161061e",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1118,1122 @@        do {\n            sop(nop, dataptr, stride, *countptr);\n        } while (!(needs_api && PyErr_Occurred()) && iternext(iter));\n        NPY_END_THREADS;\n"
  }
]