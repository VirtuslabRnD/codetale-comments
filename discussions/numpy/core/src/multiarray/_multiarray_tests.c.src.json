[
  {
    "id" : "0a2455ea-0001-44d2-a19d-5bd23433530d",
    "prId" : 13463,
    "prUrl" : "https://github.com/numpy/numpy/pull/13463#pullrequestreview-238183635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a29d365c-0d77-4692-a3b1-3d6e73bca02f",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Needs a comment what is the purpose of this function, it is a bit obscure at first glance.",
        "createdAt" : "2019-05-16T05:27:49Z",
        "updatedAt" : "2019-05-16T20:25:34Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc5b7515b9b7a4973b7ba443cd903590d2c5a1b5",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +871,875 @@}\n\n\n/*\n * Test C-api level item getting."
  },
  {
    "id" : "4089b15c-a9e5-4900-879d-546578312d04",
    "prId" : 13605,
    "prUrl" : "https://github.com/numpy/numpy/pull/13605#pullrequestreview-242047766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5c07653-cb18-4c68-b813-e7cac8aa2bcf",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "nit: I'd probably just make this two separate functions",
        "createdAt" : "2019-05-26T17:02:26Z",
        "updatedAt" : "2019-09-12T23:43:54Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf6809a63238dd50b2a42a7d62824f1e438a222a",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +610,614 @@    return PyArray_FromString(\n                    string, -1, PyArray_DescrFromType(NPY_FLOAT64), -1, \" \");\n}\n\n"
  },
  {
    "id" : "4e53655d-20e5-4d3c-8820-99db5f56dbb5",
    "prId" : 14223,
    "prUrl" : "https://github.com/numpy/numpy/pull/14223#pullrequestreview-276485527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7e2636b-bd9d-44df-aa40-3d88b84d237d",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "the compiler is complaining that you never use `temp`. Either return it or call `Py_DECREF(temp)`",
        "createdAt" : "2019-08-08T10:51:41Z",
        "updatedAt" : "2019-09-18T22:42:45Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "9d448a93-6b27-4e63-9889-8b6a801ee58d",
        "parentId" : "f7e2636b-bd9d-44df-aa40-3d88b84d237d",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "The interface to `PyArray_AsCArray` is very strange - it modifies the first argument, replacing it with the result of `PyArray_FromAny` but only if it returns success. In the tests this doesn't matter, since the first argument is a valid ndarray so the value returned from `PyArray_FromAny` is the same as the input, but in these tests (if successful) it would have changed `result`.\r\n\r\nAll that is irrelevant since the deprecated functions fail, but I tried to use a correct approach for the unused branch anyway.",
        "createdAt" : "2019-08-19T11:03:51Z",
        "updatedAt" : "2019-09-18T22:42:45Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "49a66ce40fc73c4296cdf4ad6c3d63c06b0a7c69",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +693,697 @@    return result;\n}\n\n/* used to create array with WRITEBACKIFCOPY flag */\nstatic PyObject*"
  },
  {
    "id" : "f7383f61-fc78-49c3-9bbf-107f7d419040",
    "prId" : 14586,
    "prUrl" : "https://github.com/numpy/numpy/pull/14586#pullrequestreview-292867276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04a8dedc-e54f-4260-8a67-40bf67f5d745",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "May as well put this on line 610, unless the plan is to backport",
        "createdAt" : "2019-09-25T07:08:30Z",
        "updatedAt" : "2019-10-02T19:08:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a78e465caee322b2b7e67e41cdc7a96b587130f4",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +602,606 @@{\n    char *string;\n    PyArray_Descr *descr;\n\n    string = PyBytes_AsString(byte_obj);"
  },
  {
    "id" : "de7111d1-08b0-4bb5-833c-91064d7c7035",
    "prId" : 16454,
    "prUrl" : "https://github.com/numpy/numpy/pull/16454#pullrequestreview-421507589",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "686ce317-0fe1-4466-b490-b78cfc4b5d24",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Just in case for your (or anyone else's) info, we also have a `npy_free_cache_dims_obj()` which puts the dims back into a cache. But I like this here, since its public API and documented like this anway.",
        "createdAt" : "2020-05-31T16:05:44Z",
        "updatedAt" : "2020-05-31T16:06:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "94d6cbd5-a046-461e-9603-2b2f49fd9312",
        "parentId" : "686ce317-0fe1-4466-b490-b78cfc4b5d24",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I tried that, but this is compiled as a separate module so isn't available",
        "createdAt" : "2020-05-31T16:07:34Z",
        "updatedAt" : "2020-05-31T16:07:34Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f2fb0bca79f50ecff708562ccad90a175c7783b",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +2058,2062 @@\n    PyObject *tup = PyArray_IntTupleFromIntp(dims.len, dims.ptr);\n    PyDimMem_FREE(dims.ptr);\n    return tup;\n}"
  },
  {
    "id" : "692a4d67-785e-493b-aa0b-2dd483bf1348",
    "prId" : 17364,
    "prUrl" : "https://github.com/numpy/numpy/pull/17364#pullrequestreview-495768114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81910f82-dc9b-4a94-a507-f9def1661476",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Since this is just test code, I'd be inclined to throw out this custom error handling and just propagate the exception that is already set",
        "createdAt" : "2020-09-22T21:57:52Z",
        "updatedAt" : "2020-09-24T17:21:28Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "4c809adf-76a1-4ee3-9e04-a32a961bd799",
        "parentId" : "81910f82-dc9b-4a94-a507-f9def1661476",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Seems reasonable.",
        "createdAt" : "2020-09-22T23:21:47Z",
        "updatedAt" : "2020-09-24T17:21:28Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "9ce13c65-119e-43d9-8c32-432f2b1fa5cd",
        "parentId" : "81910f82-dc9b-4a94-a507-f9def1661476",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I remembered that I kept this error handling in case some other test was relying on it, so I think leaving it alone is the best option. Given this is just testing stuff, it probably doesn't matter otherwise.",
        "createdAt" : "2020-09-24T16:52:53Z",
        "updatedAt" : "2020-09-24T17:21:28Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "976d1b3845dcc3f9116dec09501d036304dabe42",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +185,189 @@        bounds[i] = PyLong_AsSsize_t(bound);\n        if (error_converting(bounds[i])) {\n            PyErr_Clear();\n            PyErr_SetString(PyExc_ValueError,\n                    \"bound is invalid\");"
  },
  {
    "id" : "563e6704-6f77-4924-bc52-8ab080bfa51d",
    "prId" : 17401,
    "prUrl" : "https://github.com/numpy/numpy/pull/17401#pullrequestreview-523070969",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f2f54e9-e2cc-4fa6-8e73-625c1da8764c",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Ahah. So `castingimpls` is a dictionary. I don't see how it is filled in, did I miss something?",
        "createdAt" : "2020-11-04T06:40:07Z",
        "updatedAt" : "2020-11-25T05:20:55Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "a806c21f787132525316002926e4780243d948cc",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +1011,1015 @@        Py_ssize_t pos = 0;\n\n        while (PyDict_Next(from_dtype->castingimpls, &pos, &to_dtype, &cast_obj)) {\n            if (cast_obj == Py_None) {\n                continue;"
  },
  {
    "id" : "b5c415c4-ca97-4f6c-b5c9-bf0fb7388988",
    "prId" : 17877,
    "prUrl" : "https://github.com/numpy/numpy/pull/17877#pullrequestreview-540533585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffdb88cd-4bc9-46a4-ab27-ef6582a0f24e",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "> (leaks a reference)\r\n\r\n?",
        "createdAt" : "2020-11-29T23:15:28Z",
        "updatedAt" : "2020-11-29T23:15:29Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8464940ca4f591f4aca2416e2e6173d68251131",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +683,687 @@        return NULL;\n    }\n    Py_INCREF(dtype);  /* hold on to the original (leaks a reference) */\n    return (PyObject *)dtype;\n}"
  }
]