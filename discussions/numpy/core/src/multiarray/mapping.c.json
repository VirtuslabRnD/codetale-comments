[
  {
    "id" : "0091d828-a303-4686-81ff-255ca544f17b",
    "prId" : 2710,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e70b8c33-f933-4a2b-b360-376f02f32bb7",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "This is just a simple bug fix right, not really related to the 1-d iteration issues?\n\nIf PyArray_MapIterBind can fail, then shouldn't it return an error code? This is a really obscure way to check for errors.\n",
        "createdAt" : "2012-11-12T08:51:45Z",
        "updatedAt" : "2012-12-02T18:24:49Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "e32f7c43-c459-4f9d-9fd1-c255306db597",
        "parentId" : "e70b8c33-f933-4a2b-b360-376f02f32bb7",
        "authorId" : "75b78747-e55f-483a-bf57-630e261038df",
        "body" : "Yes, you're right, I should figure out what the error conditions are and error code. I've had PyArray_MapIterBind fail when I had oned=1, but I'm still not sure what the error condition was.\n",
        "createdAt" : "2012-11-14T05:46:54Z",
        "updatedAt" : "2012-12-02T18:24:49Z",
        "lastEditedBy" : "75b78747-e55f-483a-bf57-630e261038df",
        "tags" : [
        ]
      }
    ],
    "commit" : "7887c16fcceb995a6416cf32bb4a0702bf08a7bb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2055,2059 @@    if (PyArray_MapIterBind(mit, a) != 0) {\n        return NULL;\n    }\n    PyArray_MapIterReset(mit);\n    return mit;"
  },
  {
    "id" : "04f69207-a791-44c9-9aef-03b79aa36350",
    "prId" : 2907,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a40bb76-039d-4147-9279-02f0a4a7e42b",
        "parentId" : null,
        "authorId" : "041ba948-3afd-44ae-9741-f412d7673058",
        "body" : "Why is this INCREF needed here but was not needed before?\n",
        "createdAt" : "2013-01-12T22:03:06Z",
        "updatedAt" : "2013-01-13T00:21:39Z",
        "lastEditedBy" : "041ba948-3afd-44ae-9741-f412d7673058",
        "tags" : [
        ]
      },
      {
        "id" : "1d376b54-246a-42ce-b95b-4b2fb6d4ba77",
        "parentId" : "5a40bb76-039d-4147-9279-02f0a4a7e42b",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "To be honest, would make sense to check how this changed between 1.6. and 1.7. But dtype was always NULL, that is why there was no incref (there was no need to define dtype in the first place like that). In the next line I put FORCECAST, I am somewhat guessing it makes no difference at all, but if it does, I am not sure if it is closer to 1.6. or not. I don't think it matters honestly (it would only matter for non array, array likes -- ie `__array_interface__`, but that seems unaffected -- if at all), but I have no time to investigate anyway right now.\n",
        "createdAt" : "2013-01-12T23:14:42Z",
        "updatedAt" : "2013-01-13T00:21:39Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "4c4880e6-5e09-414e-bb5d-548e861f707c",
        "parentId" : "5a40bb76-039d-4147-9279-02f0a4a7e42b",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "The INCREF is needed because PyArray_FromAny steals a reference to the dtype -- right?\n",
        "createdAt" : "2013-01-12T23:27:22Z",
        "updatedAt" : "2013-01-13T00:21:39Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "24615f4c7744ff4a924b9488ea3b9bb7df3665f0",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1309,1313 @@        if (!PyArray_Check(op)) {\n            dtype = PyArray_DTYPE(self);\n            Py_INCREF(dtype);\n            op_arr = (PyArrayObject *)PyArray_FromAny(op, dtype, 0, 0, 0, NULL);\n            if (op_arr == NULL) {"
  },
  {
    "id" : "12a0f2a4-df99-400b-aae8-138734a200b2",
    "prId" : 3628,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d1c4713-ea57-4142-9b18-dc3b3df8dbf0",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Are all these replacements safe? This looks OK, but further on I worry about DECREFing `mit->ait` and `mit->subspace`. It's not clear to me that deallocating the `mit` will do that.\n",
        "createdAt" : "2013-08-17T14:13:13Z",
        "updatedAt" : "2013-08-17T14:13:13Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "60e75f04-21f6-4364-b811-629c5204ce5a",
        "parentId" : "0d1c4713-ea57-4142-9b18-dc3b3df8dbf0",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "It should do all that:\n\n```\nstatic void\narraymapiter_dealloc(PyArrayMapIterObject *mit)\n{\n    int i;\n    Py_XDECREF(mit->indexobj);\n    Py_XDECREF(mit->ait);\n    Py_XDECREF(mit->subspace);\n    for (i = 0; i < mit->numiter; i++) {\n        Py_XDECREF(mit->iters[i]);\n    }\n    PyArray_free(mit);\n}\n```\n",
        "createdAt" : "2013-08-17T14:15:38Z",
        "updatedAt" : "2013-08-17T14:15:38Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "281458be347a574b8d4d28ddf49c02e2f9cf0930",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1779,1783 @@        PyErr_SetString(PyExc_IndexError,\n                        \"too many indices for array\");\n        return -1;\n    }\n"
  },
  {
    "id" : "a13b0cf6-b973-4af3-b3ae-a78c85170cac",
    "prId" : 3931,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5743e734-9e9a-483f-adc7-23cf36975edd",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "stransfer checks if past end of array?\n",
        "createdAt" : "2013-10-16T22:06:50Z",
        "updatedAt" : "2013-10-16T23:02:07Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "348d3f8f-4c52-493d-a20b-8f19f4e307fa",
        "parentId" : "5743e734-9e9a-483f-adc7-23cf36975edd",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "the transfer functions only use the size, the return is only used in the next loop iteration which will then have size 0 so not check anything beyong boundary.\n",
        "createdAt" : "2013-10-16T22:32:13Z",
        "updatedAt" : "2013-10-16T23:02:07Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d4ea165817fc613c79bb92ccb3844df94d1beed",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +733,737 @@                bmask_data = npy_memchr(bmask_data, 0, bmask_stride, innersize,\n                                        &subloopsize, 0);\n                stransfer(ret_data, itemsize, self_data, self_stride,\n                            subloopsize, itemsize, transferdata);\n                innersize -= subloopsize;"
  },
  {
    "id" : "ac62318e-8bea-4d60-a343-cac7d77a2e89",
    "prId" : 4570,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a39efc63-96dd-4238-951c-3dcf66f8e701",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Almost seems that this check could be part of the `NPY_BEGIN_THREADS` macro.\n",
        "createdAt" : "2014-03-30T21:42:32Z",
        "updatedAt" : "2014-03-30T21:42:32Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b22d6ce6-ac37-4a27-bf3f-0bca49d5c9ec",
        "parentId" : "a39efc63-96dd-4238-951c-3dcf66f8e701",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Or maybe not ;) Would it make sense for `_save`. Too bad C doesn't have a passed by reference option, it would make passing `_save` to functions a bit more useful.\n",
        "createdAt" : "2014-03-30T21:48:26Z",
        "updatedAt" : "2014-03-30T21:48:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "92f499ad70c67c9f41fcedc942861dc7f89f8736",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +2380,2384 @@            npy_intp stride;\n            /* release GIL if it was taken by nditer below */\n            if (_save == NULL) {\n                NPY_BEGIN_THREADS;\n            }"
  },
  {
    "id" : "a69c05d4-c62b-432d-b7c8-f1263298e3c5",
    "prId" : 4804,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ec92f1c-1927-4eda-a662-629eff436bf9",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The message needs some `\\n`, otherwise it prints as one really long line. I noted that in some of the error messages in the failing tests, so those messages should also be broken into lines\n",
        "createdAt" : "2014-06-17T03:59:23Z",
        "updatedAt" : "2014-07-05T20:08:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c4d48c3c27584e8a555b5e55d1634089db7a01a",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +1685,1689 @@\n    if (DEPRECATE(\n            \"assignment will raise an error in the future, most likely \"\n            \"because your index result shape does not match the value array \"\n            \"shape. You can use `arr.flat[index] = values` to keep the old \""
  },
  {
    "id" : "5cfdef3d-e679-4402-934e-50f19a82d131",
    "prId" : 4804,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33c09477-cf28-49ad-9063-52f2476f7954",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Might mention what it changes to.\n",
        "createdAt" : "2014-06-17T04:00:54Z",
        "updatedAt" : "2014-07-05T20:08:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "802ee26c-466c-4f4e-9c6c-84bfb7e11ed0",
        "parentId" : "33c09477-cf28-49ad-9063-52f2476f7954",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yeah, should... I was tired of C String formatting. I don't actually know what it is, but can get the error type of course. (Could be either IndexError or ValueError)\n",
        "createdAt" : "2014-06-17T07:06:23Z",
        "updatedAt" : "2014-07-05T20:08:34Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c4d48c3c27584e8a555b5e55d1634089db7a01a",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +1698,1702 @@        PyErr_Fetch(&err, &val, &tb);\n        DEPRECATE_FUTUREWARNING(\n            \"assignment exception type will change in the future\");\n        PyErr_Restore(err, val, tb);\n    }"
  },
  {
    "id" : "a97674a4-458e-4a72-ac3d-e9529abd1c56",
    "prId" : 4804,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1001c9ca-0b43-492a-9134-a939134bddbf",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "\"different\" <- \"differently\". \n",
        "createdAt" : "2014-06-17T04:01:44Z",
        "updatedAt" : "2014-07-05T20:08:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c4d48c3c27584e8a555b5e55d1634089db7a01a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1659,1663 @@ * This fallback takes the old route of `arr.flat[index] = values`\n * for one dimensional `arr`. The route can sometimes fail slightly\n * different (ValueError instead of IndexError), in which case we\n * warn users about the change. But since it does not actually care *at all*\n * about shapes, it should only fail for out of bound indexes or"
  },
  {
    "id" : "f9c6b325-ea86-4565-8f82-ce57c5780b10",
    "prId" : 4804,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd84a121-8a49-43be-a574-f0a8c51e1fd8",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Can these `goto success;` statements be move out the `if`? I note that the next `if` here could be an `else if`.\n",
        "createdAt" : "2014-06-17T04:05:40Z",
        "updatedAt" : "2014-07-05T20:08:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c4d48c3c27584e8a555b5e55d1634089db7a01a",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +1974,1978 @@            goto fail;\n        }\n        goto success;\n    }\n"
  },
  {
    "id" : "2e5fdf74-d5f5-40d7-a318-7f1d21359b73",
    "prId" : 4804,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45a9598a-ab4e-4b23-9de0-5fae394736e8",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Will fail if `err` is NULL.\n",
        "createdAt" : "2014-07-05T20:14:06Z",
        "updatedAt" : "2014-07-05T20:14:06Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "55865f94-580e-4d5b-9e75-d3b4f5ddde4c",
        "parentId" : "45a9598a-ab4e-4b23-9de0-5fae394736e8",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "If this occurs, there would be a bug elsewhere. But I am not sure if such a bug could not be even outside numpy, so I suppose we should do the sanity check...\n",
        "createdAt" : "2014-07-05T20:22:42Z",
        "updatedAt" : "2014-07-05T20:22:42Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c4d48c3c27584e8a555b5e55d1634089db7a01a",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1682,1686 @@    \n    Py_XDECREF((PyObject *)self_iter);\n    Py_DECREF(err);\n\n    if (DEPRECATE("
  },
  {
    "id" : "50721f50-be0a-4c81-91eb-0e9ecb8d4e78",
    "prId" : 6053,
    "prUrl" : "https://github.com/numpy/numpy/pull/6053#pullrequestreview-89528374",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e8bd089-5389-48d3-ace1-84e38bdc7338",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "These are new error messages, right? So we're free to change their type in 1.14?",
        "createdAt" : "2018-01-17T17:29:33Z",
        "updatedAt" : "2018-01-17T17:29:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "6098c737-73d4-4cb1-9a07-804123cb1f39",
        "parentId" : "4e8bd089-5389-48d3-ace1-84e38bdc7338",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Yes, that's true. Maybe it should have been ValueError here though, because of user's preexisting code like\r\n```\r\ntry:\r\n    a[['a', 'c']]\r\nexcept ValueError:\r\n    return\r\n```\r\nwon't work properly. We used to raise ValueError in similar cases, as discussed in #5636.",
        "createdAt" : "2018-01-17T17:37:07Z",
        "updatedAt" : "2018-01-17T17:37:07Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "5a4d18d2-565c-4c52-ade9-2bc6a79b5bad",
        "parentId" : "4e8bd089-5389-48d3-ace1-84e38bdc7338",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think `ValueError` is actually more appropriate for the second case anyway - `KeyError` implies \"key not found\" to me, not \"that's an invalid value to lookup with\"",
        "createdAt" : "2018-01-17T17:40:33Z",
        "updatedAt" : "2018-01-17T17:40:38Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f27418f48ada95a1cf19c98a8d1116f97f86ec5",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +1527,1531 @@                Py_DECREF(names);\n                return 0;\n            }\n            if (PyDict_SetItem(fields, name, tup) < 0) {\n                Py_DECREF(name);"
  },
  {
    "id" : "83440fd9-d3e6-4663-8c99-a9bd13d20106",
    "prId" : 6662,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d2110c3-059a-4b6c-b474-028ae41784c3",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "`PyArray_Bytes` is a bti nicer here, since that is exactly what it is good for (instead of the cast).\n",
        "createdAt" : "2015-11-20T16:00:07Z",
        "updatedAt" : "2015-11-20T16:00:07Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d2d360fd75301d4a3cb9914872f90fbef689667",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1294,1298 @@                                    PyArray_SHAPE(arr),\n                                    PyArray_STRIDES(arr),\n                                    ((char *)PyArray_DATA(arr)) + offset,\n                                    PyArray_FLAGS(arr),\n                                    (PyObject *)arr);"
  },
  {
    "id" : "d59a7e50-98bc-4ad8-919b-82029e6f0269",
    "prId" : 6702,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eda1e929-4845-4317-9a33-2de25215f93c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Blank line after.\n",
        "createdAt" : "2015-11-23T03:11:57Z",
        "updatedAt" : "2015-11-24T03:14:39Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a47ffc477fc72e2bc59341e1debac2096d10499",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +350,354 @@            if (PyLong_CheckExact(obj) || !PyArray_Check(obj)) {\n#endif\n                npy_intp ind = PyArray_PyIntAsIntp(obj);\n\n                if ((ind == -1) && PyErr_Occurred()) {"
  },
  {
    "id" : "e131f3b0-8ee2-4e1d-8e5f-ab3a1f2289d4",
    "prId" : 6702,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c75885c-b9c1-4e88-b1fa-34449dce05d3",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Blank line after.\n",
        "createdAt" : "2015-11-23T03:12:04Z",
        "updatedAt" : "2015-11-24T03:14:39Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a47ffc477fc72e2bc59341e1debac2096d10499",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +530,534 @@                 * handled right.\n                 */\n                npy_intp ind = PyArray_PyIntAsIntp((PyObject *)arr);\n\n                Py_DECREF(arr);"
  },
  {
    "id" : "78571ac7-a381-4d66-b5ca-38740cdcb4da",
    "prId" : 8043,
    "prUrl" : "https://github.com/numpy/numpy/pull/8043#pullrequestreview-16012305",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d49ce258-b07c-48d5-9640-b6d70ae04831",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, so you are actually checking indexes rather than the resulting view?",
        "createdAt" : "2016-12-06T19:57:18Z",
        "updatedAt" : "2017-02-10T19:53:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "34b1997e-e000-4a54-9590-bcc0d9809fd2",
        "parentId" : "d49ce258-b07c-48d5-9640-b6d70ae04831",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "It's used to checking the overlap between the array operated on, and the index array used in `ufunc.at`, for example\r\n```\r\nx = np.arange(100)\r\nnp.invert.at(x[::-1], x)  # <- crazy stuff if no x.copy() of the second argument\r\n```\r\nIt doesn't look at the content of the indices, so it's a somewhat conservative check.",
        "createdAt" : "2017-01-10T21:05:34Z",
        "updatedAt" : "2017-02-10T19:53:34Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e8ce442e8449916a93951093cdce16cec006bcc",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +711,715 @@ */\nNPY_NO_EXPORT int\nindex_has_memory_overlap(PyArrayObject *self,\n                         int index_type, npy_index_info *indices, int num,\n                         PyObject *extra_op)"
  },
  {
    "id" : "3af45abb-53a6-4e92-901d-a5056c972755",
    "prId" : 8278,
    "prUrl" : "https://github.com/numpy/numpy/pull/8278#pullrequestreview-50210208",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c192119d-c3e1-4594-9586-46ff9df8fe4e",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "First wasn't sure I like this, but it seems harmless :).",
        "createdAt" : "2017-07-16T12:39:23Z",
        "updatedAt" : "2017-07-16T15:34:38Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "105e0b4939a02ceda46ceb92f2978383cdc2b377",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +141,145 @@\nNPY_NO_EXPORT NPY_INLINE void\nmulti_DECREF(PyObject **objects, npy_intp n)\n{\n    npy_intp i;"
  },
  {
    "id" : "67ec8e73-5c80-4687-9b41-52a9f906e361",
    "prId" : 8278,
    "prUrl" : "https://github.com/numpy/numpy/pull/8278#pullrequestreview-50210208",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0f3a569-5130-40e7-804d-1db4488ab1ef",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "brackets?",
        "createdAt" : "2017-07-16T12:43:27Z",
        "updatedAt" : "2017-07-16T15:34:38Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "105e0b4939a02ceda46ceb92f2978383cdc2b377",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +231,235 @@            || PyLong_CheckExact(index)\n#endif\n            || index == Py_None\n            || PySlice_Check(index)\n            || PyArray_Check(index)"
  },
  {
    "id" : "38cd3d6c-79b1-4dbd-8573-5ed8ed33d452",
    "prId" : 8278,
    "prUrl" : "https://github.com/numpy/numpy/pull/8278#pullrequestreview-50211026",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f4f3189-da34-4015-87ba-bb0ae08c3117",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Again, I think we usually put brackets, but no big deal",
        "createdAt" : "2017-07-16T12:55:22Z",
        "updatedAt" : "2017-07-16T15:34:38Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "8519db44-8311-4873-85ec-24f3231bf82b",
        "parentId" : "7f4f3189-da34-4015-87ba-bb0ae08c3117",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Don't agree - we use brackets to make precedence of `||` and `&&` obvious, but a quick grep shows it faily uncommon to use them to aid reading precedence of `||`, `&&` and `==`, `>=`, ...",
        "createdAt" : "2017-07-16T13:12:52Z",
        "updatedAt" : "2017-07-16T15:34:38Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0b63aaa6-9744-49bd-a133-b4a0e010e1a2",
        "parentId" : "7f4f3189-da34-4015-87ba-bb0ae08c3117",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Ok, frankly don't care much, its not `*a++` or something...",
        "createdAt" : "2017-07-16T13:18:49Z",
        "updatedAt" : "2017-07-16T15:34:38Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "105e0b4939a02ceda46ceb92f2978383cdc2b377",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +313,317 @@                    || PySlice_Check(tmp_obj)\n                    || tmp_obj == Py_Ellipsis\n                    || tmp_obj == Py_None) {\n                commit_to_unpack = 1;\n            }"
  },
  {
    "id" : "e7adf4dd-09b8-483d-946d-6d41fca35293",
    "prId" : 9998,
    "prUrl" : "https://github.com/numpy/numpy/pull/9998#pullrequestreview-105882678",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af15842e-5217-4cd1-94ff-9cdccaf823ab",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I am slightly uneasy about putting this here, but I guess it's OK.\r\n\r\nThe problem is that we are once again tying writeback to a dealloc, which is what caused u problems in PyPy before. But I think it's probably OK here because mapiter objects are only created and managed in C code, internally in numpy, so I think they are always deallocated immediately when no longer needed.",
        "createdAt" : "2018-03-21T19:49:15Z",
        "updatedAt" : "2018-04-21T19:57:31Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "1693da37-a402-4d2c-9908-fbbb8e09c4e9",
        "parentId" : "af15842e-5217-4cd1-94ff-9cdccaf823ab",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "However, I remember reading some comments here that one or two downstream projects use mapiters, even though they're not supposed to. May need to warn about this in the release note. I'll address it in a comment later about documentation.",
        "createdAt" : "2018-03-21T19:54:09Z",
        "updatedAt" : "2018-04-21T19:57:31Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa9a74165479142e2c1671f871fe7c860146cd52",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3375,3379 @@arraymapiter_dealloc(PyArrayMapIterObject *mit)\n{\n    PyArray_ResolveWritebackIfCopy(mit->array);\n    Py_XDECREF(mit->array);\n    Py_XDECREF(mit->ait);"
  }
]