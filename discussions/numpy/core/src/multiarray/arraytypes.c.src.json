[
  {
    "id" : "3b9fa94b-d90b-4be7-a7a2-108b417e2f03",
    "prId" : 3788,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7dfbee88-30a6-457f-8719-aaafe6036203",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I don't know if this can even be plausible triggered... in all other cases there is just no point in not turning the logic around.\n",
        "createdAt" : "2013-09-23T18:13:23Z",
        "updatedAt" : "2013-09-23T18:13:23Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed7e9ab53a43188268cd8ddd7e8eb125fb32e495",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1162,1166 @@    PyObject *tmp;\n    for (i = 0; i < n; i++, ip +=skip, op++) {\n        tmp = *op;\n        *op = @FROMTYPE@_getitem((char *)ip, aip);\n        Py_XDECREF(tmp);"
  },
  {
    "id" : "258e9010-13dc-449e-9bf4-c81333b249e2",
    "prId" : 4572,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b17c350-ea29-45ec-a303-f1e0e94799e5",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Looks good to me, I think it is correct that we compare all bytes, since only trailing 0-bytes are stripped (`as\\x00d\\x00\\x00` is 'as\\x00d`). Probably doesn't matter, but`elsize` actually is int I think\n",
        "createdAt" : "2014-05-26T14:37:08Z",
        "updatedAt" : "2014-05-26T14:37:08Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "53b785cd-1b84-4623-9670-cbd77f45ab92",
        "parentId" : "8b17c350-ea29-45ec-a303-f1e0e94799e5",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Oh, heh, in my mind I combined the old and new usage of `i`, so nvm.\n",
        "createdAt" : "2014-05-26T14:51:46Z",
        "updatedAt" : "2014-05-26T14:51:46Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f6da63938e516bb653b95f1de7b59b33c05a2fc",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +2599,2603 @@    const unsigned char *c1 = (unsigned char *)ip1;\n    const unsigned char *c2 = (unsigned char *)ip2;\n    const size_t len = PyArray_DESCR(ap)->elsize;\n    int i;\n"
  },
  {
    "id" : "3beb26f8-7da5-41a6-83b4-0ab0c97f7866",
    "prId" : 4712,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33bb5f96-c21f-41f9-9359-22d498aac69b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This returns `__int64`, which is more specific than `long long`. Any reason that strtoll won't be available for MSC? It is in at least VS2013. \n",
        "createdAt" : "2014-05-14T23:55:27Z",
        "updatedAt" : "2014-05-14T23:55:27Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "79734f51-019c-4e35-bf37-0cc684c76e93",
        "parentId" : "33bb5f96-c21f-41f9-9359-22d498aac69b",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "I'm hoping int64 and long long is the same in VC\nif it has strtoll it will use it even with VC (assuming setup.py detects it)\n",
        "createdAt" : "2014-05-14T23:56:53Z",
        "updatedAt" : "2014-05-14T23:56:53Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "ceffd0443e548b728708e50a2e1ffc5591c0161b",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +112,116 @@    return strtoll(str, endptr, base);\n#elif defined _MSC_VER\n    return _strtoi64(str, endptr, base);\n#else\n    /* ok on 64 bit posix */"
  },
  {
    "id" : "350332fc-4969-49c9-b42e-1d1e1d85aa17",
    "prId" : 4712,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "476f10ab-500f-4696-8e52-a7d441b0ca01",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Is it safe to fall through here? What about 32 bit posix?\n",
        "createdAt" : "2014-05-14T23:56:22Z",
        "updatedAt" : "2014-05-14T23:56:22Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2771c45b-718e-4469-9c47-a37d358f2f90",
        "parentId" : "476f10ab-500f-4696-8e52-a7d441b0ca01",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "the only other option I see is reimplementing strtoll, this should only trigger on obsolete platforms, if someone has one of these and cares they need to provide a patch\n",
        "createdAt" : "2014-05-14T23:57:53Z",
        "updatedAt" : "2014-05-14T23:57:53Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "ddc8a242-8aed-4b89-8f50-0ce360098a53",
        "parentId" : "476f10ab-500f-4696-8e52-a7d441b0ca01",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK, I guess it isn't any worse than it was ;)\n",
        "createdAt" : "2014-05-15T00:06:13Z",
        "updatedAt" : "2014-05-15T00:06:13Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ceffd0443e548b728708e50a2e1ffc5591c0161b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +115,119 @@#else\n    /* ok on 64 bit posix */\n    return PyOS_strtol(str, endptr, base);\n#endif\n}"
  }
]