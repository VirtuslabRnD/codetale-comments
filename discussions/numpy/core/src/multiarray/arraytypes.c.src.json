[
  {
    "id" : "3b9fa94b-d90b-4be7-a7a2-108b417e2f03",
    "prId" : 3788,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7dfbee88-30a6-457f-8719-aaafe6036203",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I don't know if this can even be plausible triggered... in all other cases there is just no point in not turning the logic around.\n",
        "createdAt" : "2013-09-23T18:13:23Z",
        "updatedAt" : "2013-09-23T18:13:23Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed7e9ab53a43188268cd8ddd7e8eb125fb32e495",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1162,1166 @@    PyObject *tmp;\n    for (i = 0; i < n; i++, ip +=skip, op++) {\n        tmp = *op;\n        *op = @FROMTYPE@_getitem((char *)ip, aip);\n        Py_XDECREF(tmp);"
  },
  {
    "id" : "258e9010-13dc-449e-9bf4-c81333b249e2",
    "prId" : 4572,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b17c350-ea29-45ec-a303-f1e0e94799e5",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Looks good to me, I think it is correct that we compare all bytes, since only trailing 0-bytes are stripped (`as\\x00d\\x00\\x00` is 'as\\x00d`). Probably doesn't matter, but`elsize` actually is int I think\n",
        "createdAt" : "2014-05-26T14:37:08Z",
        "updatedAt" : "2014-05-26T14:37:08Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "53b785cd-1b84-4623-9670-cbd77f45ab92",
        "parentId" : "8b17c350-ea29-45ec-a303-f1e0e94799e5",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Oh, heh, in my mind I combined the old and new usage of `i`, so nvm.\n",
        "createdAt" : "2014-05-26T14:51:46Z",
        "updatedAt" : "2014-05-26T14:51:46Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f6da63938e516bb653b95f1de7b59b33c05a2fc",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +2599,2603 @@    const unsigned char *c1 = (unsigned char *)ip1;\n    const unsigned char *c2 = (unsigned char *)ip2;\n    const size_t len = PyArray_DESCR(ap)->elsize;\n    int i;\n"
  },
  {
    "id" : "3beb26f8-7da5-41a6-83b4-0ab0c97f7866",
    "prId" : 4712,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33bb5f96-c21f-41f9-9359-22d498aac69b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This returns `__int64`, which is more specific than `long long`. Any reason that strtoll won't be available for MSC? It is in at least VS2013. \n",
        "createdAt" : "2014-05-14T23:55:27Z",
        "updatedAt" : "2014-05-14T23:55:27Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "79734f51-019c-4e35-bf37-0cc684c76e93",
        "parentId" : "33bb5f96-c21f-41f9-9359-22d498aac69b",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "I'm hoping int64 and long long is the same in VC\nif it has strtoll it will use it even with VC (assuming setup.py detects it)\n",
        "createdAt" : "2014-05-14T23:56:53Z",
        "updatedAt" : "2014-05-14T23:56:53Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "ceffd0443e548b728708e50a2e1ffc5591c0161b",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +112,116 @@    return strtoll(str, endptr, base);\n#elif defined _MSC_VER\n    return _strtoi64(str, endptr, base);\n#else\n    /* ok on 64 bit posix */"
  },
  {
    "id" : "350332fc-4969-49c9-b42e-1d1e1d85aa17",
    "prId" : 4712,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "476f10ab-500f-4696-8e52-a7d441b0ca01",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Is it safe to fall through here? What about 32 bit posix?\n",
        "createdAt" : "2014-05-14T23:56:22Z",
        "updatedAt" : "2014-05-14T23:56:22Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2771c45b-718e-4469-9c47-a37d358f2f90",
        "parentId" : "476f10ab-500f-4696-8e52-a7d441b0ca01",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "the only other option I see is reimplementing strtoll, this should only trigger on obsolete platforms, if someone has one of these and cares they need to provide a patch\n",
        "createdAt" : "2014-05-14T23:57:53Z",
        "updatedAt" : "2014-05-14T23:57:53Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "ddc8a242-8aed-4b89-8f50-0ce360098a53",
        "parentId" : "476f10ab-500f-4696-8e52-a7d441b0ca01",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK, I guess it isn't any worse than it was ;)\n",
        "createdAt" : "2014-05-15T00:06:13Z",
        "updatedAt" : "2014-05-15T00:06:13Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ceffd0443e548b728708e50a2e1ffc5591c0161b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +115,119 @@#else\n    /* ok on 64 bit posix */\n    return PyOS_strtol(str, endptr, base);\n#endif\n}"
  },
  {
    "id" : "0fad9a82-466d-4bf9-aa25-5f33a6175b72",
    "prId" : 5135,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fa8647d-3184-445e-8475-9aeeb4689893",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "this loop could be merged with the inner one if we add restrict qualifiers, then the compiler can do this by itself.\n",
        "createdAt" : "2014-09-29T17:49:18Z",
        "updatedAt" : "2014-09-29T17:49:18Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "ff75382d-7916-4ddb-8ab0-ebadc6d5ae40",
        "parentId" : "4fa8647d-3184-445e-8475-9aeeb4689893",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "hmm if one additionally to the restricts adds NPY_GCC_UNROLL_LOOPS we don't even need the inner loop at all.\n",
        "createdAt" : "2014-09-29T18:10:38Z",
        "updatedAt" : "2014-09-29T18:10:38Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3470b7351358e7d34141a818a6f71e81e0172ef",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +3863,3867 @@                        const @type@ k@ksz@ = k[(@ksz@ - 1) * kstride];\n#endif\n/**end repeat2**/\n                        for (i = 0; i < nd; i++) {\n                            @type@ s = 0;"
  },
  {
    "id" : "ed79d493-28d5-4ab8-88fe-5759f9b02ebf",
    "prId" : 5501,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f56e6ea-01d6-4195-a7d7-6df44a4f4ba3",
        "parentId" : null,
        "authorId" : "acce7360-5cef-46f0-ab05-4fb0ffdffe3a",
        "body" : "Speaking of branch prediction and code bumming, `gcc -O2` generates a loop with three conditional jumps, but if this conditional block is replaced with\n\n``` c\nj *= (j < nv);\n```\n\nthere's only two of them. Might be worth a try to see if multiplication is faster than modulo.\n",
        "createdAt" : "2015-01-26T22:54:38Z",
        "updatedAt" : "2015-01-26T22:59:58Z",
        "lastEditedBy" : "acce7360-5cef-46f0-ab05-4fb0ffdffe3a",
        "tags" : [
        ]
      },
      {
        "id" : "6718aa46-2e43-4751-a353-e1288fc7582d",
        "parentId" : "6f56e6ea-01d6-4195-a7d7-6df44a4f4ba3",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "maybe worth a try, though a predicted near branch has among the best low latency/throughput of all instructions, multiplication is I think in the range of latency 4 throughout 1 cycle, likely the reason why the compiler does not do this transformation.\n",
        "createdAt" : "2015-01-27T01:23:18Z",
        "updatedAt" : "2015-01-27T01:23:18Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "eac2a985-bdbb-40d3-ba40-c37ed5fdf8fa",
        "parentId" : "6f56e6ea-01d6-4195-a7d7-6df44a4f4ba3",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "With the single benchmark I have been using, multiplying clocks in at 2.36 us, slightly better than current master, but noticeably slower than the single if in this PR, that takes 1.56 us.\n\n~~Playing the \"minimize branch misprediction\" game, my best effort so far, clocking in at 1.25 us and outperforming the current code in this PR is the following:~~\n\n```\ni = 0;\nwhile (i < ni) {\n    for (j = 0; j < nv; ++j, ++i) {\n        if (i >= ni) {\n            break;\n        }\n        in[i] = vals[j];\n    }\n}\n```\n\n~~I suppose this is capitalizing on the ability to smartly predict loops. I am not fully sure that it is worth uglying the code like this, neither would I bet any money on the result being consistent across processor architectures. My timings come from a Sandy Bridge Intel i5, FWIW.~~\n",
        "createdAt" : "2015-01-27T06:04:12Z",
        "updatedAt" : "2015-01-27T06:28:00Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "d058c161-f2d8-46f0-bda8-08fc5d2d02d2",
        "parentId" : "6f56e6ea-01d6-4195-a7d7-6df44a4f4ba3",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "The extra performance was of course coming from leaving the mask check out... Putting it back in the following takes the same time (1.55 us) as the much more readable single if in the current PR:\n\n```\nfor (i = 0; i < ni;) {\n    for (j = 0; j < nv && i < ni; ++j, ++i) {\n        if (mask[i]) {\n            in[i] = vals[j];\n        }\n    }\n}\n```\n",
        "createdAt" : "2015-01-27T06:23:19Z",
        "updatedAt" : "2015-01-27T06:23:19Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc8db7395f51311e4856eaae25c4b3aa62bd9164",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +3695,3699 @@            if (j >= nv) {\n                j = 0;\n            }\n            if (mask[i]) {\n                in[i] = vals[j];"
  },
  {
    "id" : "a0c13ce6-c6fa-412b-b447-754ffaf9b9fe",
    "prId" : 6053,
    "prUrl" : "https://github.com/numpy/numpy/pull/6053#pullrequestreview-33507581",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76293c76-10d9-49cd-bf55-14a4f6818e44",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "What type of cast is even allowed here?",
        "createdAt" : "2017-04-19T11:01:45Z",
        "updatedAt" : "2017-09-07T21:54:14Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "8d78b302-fa3a-411b-beb7-2be89d870cb5",
        "parentId" : "76293c76-10d9-49cd-bf55-14a4f6818e44",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "This accounts for assigning between structures with different field types, eg ''f4,f4' to 'i4,i4'.",
        "createdAt" : "2017-04-19T14:05:33Z",
        "updatedAt" : "2017-09-07T21:54:14Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f27418f48ada95a1cf19c98a8d1116f97f86ec5",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +839,843 @@    /* Slow path */\n    ret = PyArray_CastRawArrays(1, srcdata, dstdata, 0, 0,\n                                srcdescr, dstdescr, 0);\n    if (ret != NPY_SUCCEED) {\n        return -1;"
  },
  {
    "id" : "b6c317c3-16a1-4bbf-8921-829f380fbe70",
    "prId" : 6199,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28370de4-6a49-4c4a-aad2-e5ed7741eecd",
        "parentId" : null,
        "authorId" : "893309f4-990a-4044-a151-a4db234ccb11",
        "body" : "Checking here (as opposed to a duck-typed conversion) saves a string->unicode->string conversion on python 2. But given the error handling and the need to convert to a C string, it's easier to just convert the bytes to a C string and fall back to python conversion if that fails. EAFAP.\n",
        "createdAt" : "2015-08-24T21:27:25Z",
        "updatedAt" : "2015-08-28T18:04:14Z",
        "lastEditedBy" : "893309f4-990a-4044-a151-a4db234ccb11",
        "tags" : [
        ]
      },
      {
        "id" : "1ccfd98b-1da6-4b16-9205-97a5680124d9",
        "parentId" : "28370de4-6a49-4c4a-aad2-e5ed7741eecd",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Mostly I think it makes it easier to follow the code, otherwise six of one, half dozen of the other.\n",
        "createdAt" : "2015-08-27T16:43:53Z",
        "updatedAt" : "2015-08-28T18:04:14Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "815fee6ac12764362ad62e12840bf3723b1e2330",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +317,321 @@    PyObject* b;\n\n    if (PyUnicode_Check(op)) {\n        b = PyUnicode_AsUTF8String(op);\n        if (!b) {"
  },
  {
    "id" : "e1bc29cb-5f17-4e99-bec6-2f51fda9d162",
    "prId" : 7678,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30d19d45-bdd1-42bc-861b-f53875c18013",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Need to fix the C++ comments. I'll do that.\n",
        "createdAt" : "2016-05-26T14:00:58Z",
        "updatedAt" : "2016-05-26T14:00:58Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4df1d32180937ba652e7d89d6833942e22f3be47",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +3764,3768 @@    }\n    else {\n// Visual Studio 2015 loop vectorizer handles NaN in an unexpected manner, see:\n// https://github.com/numpy/numpy/issues/7601\n// https://connect.microsoft.com/VisualStudio/feedback/details/2723801/unexpected-nan-handling-in-vectorized-loop"
  },
  {
    "id" : "d61b5440-550d-43b4-8b80-07bcece1f347",
    "prId" : 8948,
    "prUrl" : "https://github.com/numpy/numpy/pull/8948#pullrequestreview-34608134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f8d3346-4604-4073-8fbe-21c14ec6528b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Puzzled by the distinction between `CHAR` and `CHARLTR` - and why this patch seems to translate `CHAR` into `CHARLTR` now",
        "createdAt" : "2017-04-22T10:47:24Z",
        "updatedAt" : "2017-05-03T16:58:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "9b3c06cc-36e6-47f2-866d-9762c23d00dc",
        "parentId" : "1f8d3346-4604-4073-8fbe-21c14ec6528b",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "It triggers some old numarray compatibility code. It probably doesn't work as f2py might very well be the only remaining user.\r\nBut this patch doesn't change anything in this regard.",
        "createdAt" : "2017-04-22T10:53:16Z",
        "updatedAt" : "2017-05-03T16:58:27Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "cb524bd0-4d94-467e-b6c4-2448b5f73708",
        "parentId" : "1f8d3346-4604-4073-8fbe-21c14ec6528b",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The `CHAR_LTR` refers to the `dtype(...).char` attribute, which is the only difference from the string type.\r\n```\r\nIn [1]: dtype('c') == dtype('S1')\r\nOut[1]: True\r\n```",
        "createdAt" : "2017-04-25T15:56:39Z",
        "updatedAt" : "2017-05-03T16:58:27Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7dbdbfaaa19c84ffcfa2987a05ca603483dfa54f",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +4416,4420 @@        return NULL;\n    }\n    else if ((type == NPY_CHAR) || (type == NPY_CHARLTR)) {\n        if (type == NPY_CHAR) {\n            /*"
  },
  {
    "id" : "21a3c306-a6c6-4769-a0da-7d1ec264aaf4",
    "prId" : 10723,
    "prUrl" : "https://github.com/numpy/numpy/pull/10723#pullrequestreview-231968634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5074063-53cc-422a-b82d-2c68f38835ff",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "without this, adding `printf` or even calling code multiple times caused stability issues; I think we should just make it an error if the function prototype isn't available",
        "createdAt" : "2019-04-29T23:43:04Z",
        "updatedAt" : "2019-05-11T17:25:37Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "7b4b36de-e429-4670-9a29-ee1697bb08bd",
        "parentId" : "f5074063-53cc-422a-b82d-2c68f38835ff",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Good catch! Please do make this a compilation error!",
        "createdAt" : "2019-04-30T01:25:49Z",
        "updatedAt" : "2019-05-11T17:25:37Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7e6cbe72818f24d9de7c6cd7b6a8ed0e49b97c0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +31,35 @@#endif\n\n#include \"npy_longdouble.h\"\n#include \"numpyos.h\"\n#include <string.h>"
  },
  {
    "id" : "488782a9-b4b4-4d86-a2f2-87fb7873ce33",
    "prId" : 10723,
    "prUrl" : "https://github.com/numpy/numpy/pull/10723#pullrequestreview-232426549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "867130b7-78ad-45b2-9aa7-757bc4d36152",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think we just need to avoid running this code-path for booleans (and adding a test for `np.longdouble(True)`)",
        "createdAt" : "2019-04-30T01:24:09Z",
        "updatedAt" : "2019-05-11T17:25:37Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "eb09186a-1d5b-4c58-8ec3-9041722813fa",
        "parentId" : "867130b7-78ad-45b2-9aa7-757bc4d36152",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "yes! that worked! I guess because of bools in masked arrays or something like that!",
        "createdAt" : "2019-04-30T21:57:00Z",
        "updatedAt" : "2019-05-11T17:25:37Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7e6cbe72818f24d9de7c6cd7b6a8ed0e49b97c0",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +336,340 @@#if !defined(NPY_PY3K)\n        || (PyInt_Check(op) && !PyBool_Check(op))\n#endif\n    ) {\n        return npy_longdouble_from_PyLong(op);"
  },
  {
    "id" : "2688d066-d17c-4455-9a6e-dab0786d8160",
    "prId" : 10740,
    "prUrl" : "https://github.com/numpy/numpy/pull/10740#pullrequestreview-104771715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa60a378-2eb2-4ce3-86cd-ac38a7b39a3d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm a little worried about the meaning of `len` here. Can you add a test for setting a `(np.void, 7)` with a `ctypes.c_uint16.__ctype_le__ * 2 * 2` array?",
        "createdAt" : "2018-03-17T01:07:00Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "4bbc3f72-7450-44ce-9996-57a898d5de19",
        "parentId" : "fa60a378-2eb2-4ce3-86cd-ac38a7b39a3d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I believe it is the same as it was before, just differently expressed. I'm going off the Python3.7 implementation of the previous functions.  What are your concerns?",
        "createdAt" : "2018-03-17T01:36:48Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "3dfaf859-188e-4b4c-a7d0-0ce712e9d03b",
        "parentId" : "fa60a378-2eb2-4ce3-86cd-ac38a7b39a3d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I incorrectly assumed that `len` was `shape[0]`. It would still be nice to add the ctypes test, but I guess out of scope.",
        "createdAt" : "2018-03-17T16:47:42Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9c53d73b80b52b36dd2f71e1e47aeaf682742ec",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1006,1010 @@            return -1;\n        }\n        memcpy(ip, view.buf, PyArray_MIN(view.len, itemsize));\n        if (itemsize > view.len) {\n            memset(ip + view.len, 0, itemsize - view.len);"
  },
  {
    "id" : "8086d349-697e-43f9-a072-fc40d5767b18",
    "prId" : 12437,
    "prUrl" : "https://github.com/numpy/numpy/pull/12437#pullrequestreview-177678179",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "578eadcc-5b80-4897-bb53-2f4fd20d6112",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Any idea why this one is static, and the other is NPY_NO_EXPORT?",
        "createdAt" : "2018-11-22T13:14:51Z",
        "updatedAt" : "2018-11-25T06:24:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f1404d10-392a-4ef3-894b-62e5b9d889b1",
        "parentId" : "578eadcc-5b80-4897-bb53-2f4fd20d6112",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Something about an old compiler version, looking at the referenced issue #5163. We can try to make the changed function static and see if we get crash reports. I thought marking it with `NPY_NO_EXPORT` would not export, but see issue #12438, it seems that macro turns into the empty sting",
        "createdAt" : "2018-11-22T14:10:38Z",
        "updatedAt" : "2018-11-25T06:24:43Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "127256a6-4be6-4f7f-a91a-0cc7d4f4ed49",
        "parentId" : "578eadcc-5b80-4897-bb53-2f4fd20d6112",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Oh, I hadn't realized that comment was describing the function itself - I though it was a remark about allocating the metadata statically. Fine to leave as is, and revisit some other time.",
        "createdAt" : "2018-11-22T14:14:11Z",
        "updatedAt" : "2018-11-25T06:24:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f3114a09-dae3-4316-bc58-3b01cf9af63b",
        "parentId" : "578eadcc-5b80-4897-bb53-2f4fd20d6112",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "changed to static",
        "createdAt" : "2018-11-22T14:23:32Z",
        "updatedAt" : "2018-11-25T06:24:43Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "2552e57af3ff60e96dfcd48d3f46f8507378c8e1",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +4171,4175 @@\n/* A clone function for the datetime dtype c_metadata */\nstatic NpyAuxData *\n_datetime_dtype_metadata_clone(NpyAuxData *data)\n{"
  },
  {
    "id" : "9480ae2d-8374-4174-b9dc-b761a3703714",
    "prId" : 12437,
    "prUrl" : "https://github.com/numpy/numpy/pull/12437#pullrequestreview-177673861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dc552bd-4df1-4bb0-9585-065e517065fb",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think this path needs a `PyErr_NoMemory()`",
        "createdAt" : "2018-11-22T13:16:34Z",
        "updatedAt" : "2018-11-25T06:24:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "55d759c4-809f-43ab-902d-c614636d9d25",
        "parentId" : "1dc552bd-4df1-4bb0-9585-065e517065fb",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "added",
        "createdAt" : "2018-11-22T14:12:14Z",
        "updatedAt" : "2018-11-25T06:24:43Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "2552e57af3ff60e96dfcd48d3f46f8507378c8e1",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +4199,4203 @@    if (data == NULL) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n"
  },
  {
    "id" : "d2312068-d9b7-484c-948a-95693ee4228b",
    "prId" : 12437,
    "prUrl" : "https://github.com/numpy/numpy/pull/12437#pullrequestreview-178036102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea4c8b59-78f9-4e16-befc-bb3e73fda5d1",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`return PyErr_NoMemory()` for good measure here too. Assuming that this is only called while we hold the GIL, which I'd guess it is.",
        "createdAt" : "2018-11-22T13:19:35Z",
        "updatedAt" : "2018-11-25T06:24:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "08bd5a30-868e-4e56-ae28-197abbdd20c1",
        "parentId" : "ea4c8b59-78f9-4e16-befc-bb3e73fda5d1",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "added",
        "createdAt" : "2018-11-22T14:15:58Z",
        "updatedAt" : "2018-11-25T06:24:43Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "e1375751-b109-4740-9517-fd12b0a19a7f",
        "parentId" : "ea4c8b59-78f9-4e16-befc-bb3e73fda5d1",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Note that `PyErr_NoMemory` is designed to return NULL specifically so that you can combine these lines",
        "createdAt" : "2018-11-22T14:23:36Z",
        "updatedAt" : "2018-11-25T06:24:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ad5f32c4-850c-4636-ab86-e192c149d060",
        "parentId" : "ea4c8b59-78f9-4e16-befc-bb3e73fda5d1",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "But its signature is to return `PyObject*`. Couldn't chaining the return cause a warning?",
        "createdAt" : "2018-11-22T14:38:28Z",
        "updatedAt" : "2018-11-25T06:24:43Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "79232861-fa6f-4571-8539-8ec3324990da",
        "parentId" : "ea4c8b59-78f9-4e16-befc-bb3e73fda5d1",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "You're correct, good point",
        "createdAt" : "2018-11-24T00:58:17Z",
        "updatedAt" : "2018-11-25T06:24:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "2552e57af3ff60e96dfcd48d3f46f8507378c8e1",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +4179,4183 @@    if (newdata == NULL) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n"
  },
  {
    "id" : "204639b6-ba7a-48b0-baa4-bd27571b3a2e",
    "prId" : 12437,
    "prUrl" : "https://github.com/numpy/numpy/pull/12437#pullrequestreview-178069618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c70e068e-9e2e-4cf4-ba0f-36d83f58ec0d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Probably best to leave as `NPY_NO_EXPORT`, given we have no idea if https://github.com/numpy/numpy/issues/5163 is fixed. If you think the issue is now gone, then remove the comment above.",
        "createdAt" : "2018-11-24T00:57:50Z",
        "updatedAt" : "2018-11-25T06:24:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d70c1b02-23fe-485c-81da-d9777dd6f908",
        "parentId" : "c70e068e-9e2e-4cf4-ba0f-36d83f58ec0d",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "removing comment",
        "createdAt" : "2018-11-25T05:18:13Z",
        "updatedAt" : "2018-11-25T06:24:43Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "2552e57af3ff60e96dfcd48d3f46f8507378c8e1",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +4190,4194 @@ * Allcoate and initialize a PyArray_DatetimeDTypeMetaData object\n */\nstatic NpyAuxData*\n_create_datetime_metadata(NPY_DATETIMEUNIT base, int num)\n{"
  },
  {
    "id" : "4426c52f-b56e-4745-a248-a3835dc6f87c",
    "prId" : 12650,
    "prUrl" : "https://github.com/numpy/numpy/pull/12650#pullrequestreview-189650976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b7bbe63-a620-4fc6-b3e9-8f6133100478",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This misses the case when the subarray contains another subarray, ie `PyDataType_HASSUBARRAY(descr->subarray->base)`.",
        "createdAt" : "2019-01-06T23:22:29Z",
        "updatedAt" : "2019-01-14T19:55:38Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c5109299-564d-468c-adb6-3581ab442617",
        "parentId" : "1b7bbe63-a620-4fc6-b3e9-8f6133100478",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Grrrrr, yeah true. Bad idea to \"quickly\" do things when you are already tired :) (well more generally, not this one that issue is well hidden).",
        "createdAt" : "2019-01-06T23:52:33Z",
        "updatedAt" : "2019-01-14T19:55:38Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9963a9b854e6e33dd15a927fd865619e18e8a7b8",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +2256,2260 @@                !PyDataType_HASSUBARRAY(descr->subarray->base) &&\n                !PyDataType_REFCHK(descr->subarray->base) &&\n                (descr->subarray->base->type_num < NPY_NTYPES));\n\n        if (can_optimize_subarray) {"
  },
  {
    "id" : "715f4a88-4620-4f09-ad94-cab97bc7eee6",
    "prId" : 13907,
    "prUrl" : "https://github.com/numpy/numpy/pull/13907#pullrequestreview-258604602",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9f146eb-87a7-44b2-a656-a2da536b12ca",
        "parentId" : null,
        "authorId" : "66cf8d07-fcff-451f-b32f-b0c2758e6946",
        "body" : "I tried a simple inline check in the if(type < NPY_NTYPES) branch, but then other branches tried to get in on the action, so..",
        "createdAt" : "2019-07-03T22:13:33Z",
        "updatedAt" : "2019-07-07T12:03:18Z",
        "lastEditedBy" : "66cf8d07-fcff-451f-b32f-b0c2758e6946",
        "tags" : [
        ]
      },
      {
        "id" : "bccf92c3-b811-41f4-ba38-580110ac3513",
        "parentId" : "d9f146eb-87a7-44b2-a656-a2da536b12ca",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "This seems like a good sanity check to add since `PyArray_DescrFromType(int type)` is an API function",
        "createdAt" : "2019-07-06T23:36:22Z",
        "updatedAt" : "2019-07-07T12:03:18Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "f723325b6f36868dfa483ff777e0447c229ffc42",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4415,4419 @@    PyArray_Descr *ret = NULL;\n\n    if (type < 0) {\n        /*\n         * It's not valid for type to be less than 0."
  },
  {
    "id" : "ff89e184-6490-4808-9671-574365e3c8bf",
    "prId" : 14227,
    "prUrl" : "https://github.com/numpy/numpy/pull/14227#pullrequestreview-297902603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa45ead6-bfba-4afb-9d11-e8d1d381a143",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "This is to indicate an error by not reading everything? I think it could even return a negative value in this case, in any case, I think I would like a comment explaining this path.",
        "createdAt" : "2019-10-03T23:18:06Z",
        "updatedAt" : "2019-10-17T05:10:14Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "51fde6de-bde1-4b8d-8c97-90facba3af69",
        "parentId" : "aa45ead6-bfba-4afb-9d11-e8d1d381a143",
        "authorId" : "c67f1991-6665-4c40-8559-42fd43a13fc3",
        "body" : "Yeap. This is to trigger the error. I'm adding a comment on that. \r\n\r\nI'm fine with changing the imaginary part to -1 but can you explain why returning a negative is preferred since a negative number is equally likely as any other number? Thanks.",
        "createdAt" : "2019-10-07T04:45:22Z",
        "updatedAt" : "2019-10-17T05:10:14Z",
        "lastEditedBy" : "c67f1991-6665-4c40-8559-42fd43a13fc3",
        "tags" : [
        ]
      },
      {
        "id" : "e6e9e1aa-b94e-41b5-969f-124106ed6582",
        "parentId" : "aa45ead6-bfba-4afb-9d11-e8d1d381a143",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I meant the integer return of the function, would have to check mysefl, but IIRC certain return values may also be accepted to signal error.",
        "createdAt" : "2019-10-07T04:50:48Z",
        "updatedAt" : "2019-10-17T05:10:14Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "880acfeba83309607908249fc6dcdf83c8fe410a",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +1880,1884 @@             * read error\n             */\n            endptr = prev;\n            output.imag = 0;\n        }"
  },
  {
    "id" : "9f86f0fb-1f2e-45a7-a4e1-55a5e70d34f2",
    "prId" : 14227,
    "prUrl" : "https://github.com/numpy/numpy/pull/14227#pullrequestreview-307946877",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be2c4c56-fc6f-489e-ab3c-f6e685777982",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can we handle `CLONGDOUBLE` here too? I think we have an `NumPyOS_ascii_strtold` available.",
        "createdAt" : "2019-10-28T15:41:59Z",
        "updatedAt" : "2019-10-28T15:41:59Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "880acfeba83309607908249fc6dcdf83c8fe410a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1850,1854 @@\n/**begin repeat\n * #fname = CFLOAT, CDOUBLE#\n * #type = npy_cfloat, npy_cdouble#\n */"
  },
  {
    "id" : "30ed95cd-473a-4426-b1e9-91a8751f9aaf",
    "prId" : 14669,
    "prUrl" : "https://github.com/numpy/numpy/pull/14669#pullrequestreview-300174879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fd7c2e1-9941-482c-8fe1-9a96ebb38642",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "An alternative trick you could use here is add a `supports_nat` to the loop template, and then use `#if @supports_nat@` here, which would make the patch shorter.",
        "createdAt" : "2019-10-10T14:25:32Z",
        "updatedAt" : "2019-10-15T20:22:38Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "cd02b8e7-778f-4e12-857b-d0b06e90f575",
        "parentId" : "8fd7c2e1-9941-482c-8fe1-9a96ebb38642",
        "authorId" : "958760d3-2d51-4791-8238-8c54bd499666",
        "body" : "Thanks for the tip, I've used this.",
        "createdAt" : "2019-10-10T15:51:36Z",
        "updatedAt" : "2019-10-15T20:22:38Z",
        "lastEditedBy" : "958760d3-2d51-4791-8238-8c54bd499666",
        "tags" : [
        ]
      }
    ],
    "commit" : "744a2ac0fab372c8ef633ffa15702387a24db204",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1108,1112 @@#if @supports_nat@ && @floatingpoint@\n        /* Avoid undefined behaviour for NaN -> NaT */\n        if (npy_isnan(f)) {\n            t = (@totype@)NPY_DATETIME_NAT;\n        }"
  },
  {
    "id" : "8f407db9-9ca8-453d-8552-a3dae384a1c5",
    "prId" : 15283,
    "prUrl" : "https://github.com/numpy/numpy/pull/15283#pullrequestreview-339523939",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5a20446-bd4b-4208-8b9a-39da8f64bd05",
        "parentId" : null,
        "authorId" : "90f9383b-5a2e-49ad-a731-13e6f7332b32",
        "body" : "#define PyInt_type PyLong_type changes these Int's to Long's\r\n\r\ntook me a second to understand this logic (also to see if I could remove IS_STRING)",
        "createdAt" : "2020-01-07T21:39:51Z",
        "updatedAt" : "2020-01-07T22:03:08Z",
        "lastEditedBy" : "90f9383b-5a2e-49ad-a731-13e6f7332b32",
        "tags" : [
        ]
      }
    ],
    "commit" : "9711da17b1c6e8347c4c41d83d2216447ceace4e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1531,1535 @@ *            1*18, 0*3, 1*2,\n *            0*23#\n * #convstr = (Long*9, Long*2, Float*4, Complex*3, Tuple*3, Long*2)*3#\n */\n"
  },
  {
    "id" : "ec4a6ee8-82c6-4ce2-916d-fe16760e3271",
    "prId" : 15392,
    "prUrl" : "https://github.com/numpy/numpy/pull/15392#pullrequestreview-347071839",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66b42fe3-d19b-4013-a1c9-9734211bbfa2",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK, this got more complex, but for now seemed like the easiest. The third point is only necessary for `VOID_getitem` recursion, so it would be plausible to create two versions for creating the stack array... ",
        "createdAt" : "2020-01-23T05:50:06Z",
        "updatedAt" : "2021-02-18T05:06:58Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "1f233b70-5e7c-42b3-bdb2-ff26e239a794",
        "parentId" : "66b42fe3-d19b-4013-a1c9-9734211bbfa2",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I initially thought that the base iteration is handled implicitly in the normal base setting code, but, there are always cases that do not work (when subclasses are involved).\r\n\r\nThis is probably better anyway, keep the strangeness confined to a single place...",
        "createdAt" : "2020-01-23T05:52:00Z",
        "updatedAt" : "2021-02-18T05:06:58Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e01d89471b0c4a69f7d1e868af31af7220f90318",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +50,54 @@ *   3. The type is set to NULL and the base is the original array, if this\n *      is used within a subarray getitem to create a new view, the base\n *      must be walked until the type is not NULL.\n *\n * The following should create errors in debug mode (if deallocated"
  },
  {
    "id" : "09370568-095b-44d8-95e0-a0b573435e85",
    "prId" : 15392,
    "prUrl" : "https://github.com/numpy/numpy/pull/15392#pullrequestreview-347071548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2db3b330-f3c6-4804-b2dd-3473ad79d233",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I think this is really fine, as the note says, it is strange, but localized...",
        "createdAt" : "2020-01-23T05:50:41Z",
        "updatedAt" : "2021-02-18T05:06:58Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e01d89471b0c4a69f7d1e868af31af7220f90318",
    "line" : 255,
    "diffHunk" : "@@ -1,1 +975,979 @@                &PyArray_Type, descr->subarray->base,\n                shape.len, shape.ptr, NULL, ip,\n                PyArray_FLAGS(ap), NULL, NULL);\n        npy_free_cache_dim_obj(shape);\n        if (!ret) {"
  },
  {
    "id" : "22fa1fe8-e3ee-4cd9-9c1d-45eb320f77dd",
    "prId" : 15392,
    "prUrl" : "https://github.com/numpy/numpy/pull/15392#pullrequestreview-370777392",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53caebdd-32b2-4bb2-835b-42a17eea1e29",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "How hard would it be to change `vap` to be a `dtype` instead of an `ndarray`? Would that remove the need for these hacks?",
        "createdAt" : "2020-02-04T13:02:13Z",
        "updatedAt" : "2021-02-18T05:06:58Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "11b841e3-eb06-4819-8f0d-4ea0c6b1d286",
        "parentId" : "53caebdd-32b2-4bb2-835b-42a17eea1e29",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "That is my vision for the future. For many we may also need to pass in `aligned`. But at least in principle this is visible/public API through `descriptor->f->getitem`.\r\nWhile visible API, the SciPy uses `copyswap`, I am not sure anyone else uses anything.",
        "createdAt" : "2020-02-04T15:49:24Z",
        "updatedAt" : "2021-02-18T05:06:58Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "d34146f5-266a-44f8-98fe-d1433fc32da4",
        "parentId" : "53caebdd-32b2-4bb2-835b-42a17eea1e29",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Does scipy call or implement copyswap? If we loosened the spec to \"pass either an array or dtype\", then the callers wouldn't notice - only the implementers, which I suspect is just us and `quaternion`.",
        "createdAt" : "2020-02-04T16:13:45Z",
        "updatedAt" : "2021-02-18T05:06:58Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ad0a6f78-4dd2-45a8-84c0-d3306643e358",
        "parentId" : "53caebdd-32b2-4bb2-835b-42a17eea1e29",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "It calls `descr->f->copyswap(..., NULL)`...",
        "createdAt" : "2020-02-04T16:20:31Z",
        "updatedAt" : "2021-02-18T05:06:58Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "0de0b22c-f399-4112-a646-1a2b4af4c90c",
        "parentId" : "53caebdd-32b2-4bb2-835b-42a17eea1e29",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "If that's all it does, then scipy won't even notice if we change that from a null array to a null dtype.",
        "createdAt" : "2020-02-04T16:28:26Z",
        "updatedAt" : "2021-02-18T05:06:58Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5a7383e3-bbf5-4290-81d0-6cc6d4af8f52",
        "parentId" : "53caebdd-32b2-4bb2-835b-42a17eea1e29",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "True, the question is whether we want to be so bold and mess with this \"public\" API. The thing about it is mostly:\r\n`descr->f->method` is a lot on the`descr`, I currently enivision `Py_TYPE(descr)->method` (or maybe one more indirection, similar to pythons `nb_...` slots). At which point we can deprecate/hide `->f` completely, and finally remove it.\r\n\r\nThe downside being that even after replacing, we have to keep supporting them with these types of hacks for a (fairly long) time.",
        "createdAt" : "2020-02-04T17:15:38Z",
        "updatedAt" : "2021-02-18T05:06:58Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "7c2faccf-f202-4d1b-a0a0-e49f00ea1ec7",
        "parentId" : "53caebdd-32b2-4bb2-835b-42a17eea1e29",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "What is the resolution: are we leaving this for later?",
        "createdAt" : "2020-03-07T16:58:35Z",
        "updatedAt" : "2021-02-18T05:06:58Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "e9abf23d-f180-4eb7-aa85-c13b315c6089",
        "parentId" : "53caebdd-32b2-4bb2-835b-42a17eea1e29",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I do not think I want to go there right now.",
        "createdAt" : "2020-03-07T17:07:39Z",
        "updatedAt" : "2021-02-18T05:06:58Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e01d89471b0c4a69f7d1e868af31af7220f90318",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +705,709 @@\nstatic PyObject *\nVOID_getitem(void *input, void *vap)\n{\n    PyArrayObject *ap = vap;"
  },
  {
    "id" : "7e1a91a1-fcd3-4033-b4c7-ed1acc5c66bf",
    "prId" : 15392,
    "prUrl" : "https://github.com/numpy/numpy/pull/15392#pullrequestreview-367881831",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25c0d760-4368-40f9-a2ca-336341e3ca4a",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "```suggestion\r\n *   1. The descr, which is the point of this whole exercise.\r\n```",
        "createdAt" : "2020-03-03T10:56:30Z",
        "updatedAt" : "2021-02-18T05:06:58Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "e01d89471b0c4a69f7d1e868af31af7220f90318",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +46,50 @@/*\n * Define a stack allocated dummy array with only the minimum information set:\n *   1. The descr, the main field interesting here.\n *   2. The flags, which are needed for alignment;.\n *   3. The type is set to NULL and the base is the original array, if this"
  },
  {
    "id" : "4b33fbfd-1907-4b52-8e70-078a9eaeee9d",
    "prId" : 15392,
    "prUrl" : "https://github.com/numpy/numpy/pull/15392#pullrequestreview-537099030",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12a6529f-7fbf-402d-b215-55879f32531a",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "```suggestion\r\n    /* Set to NULL so the dummy object can be distinguished from the real one */\r\n    Py_TYPE(&new_fields) = NULL;\r\n```",
        "createdAt" : "2020-11-24T06:05:01Z",
        "updatedAt" : "2021-02-18T05:06:58Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "e01d89471b0c4a69f7d1e868af31af7220f90318",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +63,67 @@    new_fields.flags = PyArray_FLAGS(orig);\n    /* Set to NULL so the dummy object can be distinguished from the real one */\n    Py_TYPE(&new_fields) = NULL;\n    new_fields.base = (PyObject *)orig;\n    return new_fields;"
  },
  {
    "id" : "ef557cf4-95c8-48c0-9b20-00f383afc071",
    "prId" : 15392,
    "prUrl" : "https://github.com/numpy/numpy/pull/15392#pullrequestreview-594226765",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73ea468c-9a88-4a71-b90d-8b33bd768cb2",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "If this singleton can be used with the GIL released, it can be modified by other threads, no?",
        "createdAt" : "2021-02-18T21:25:08Z",
        "updatedAt" : "2021-02-18T21:25:08Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "7e35c282-d9da-422a-82b4-85d1a20d8125",
        "parentId" : "73ea468c-9a88-4a71-b90d-8b33bd768cb2",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "No, it is stack local to the function call using it.",
        "createdAt" : "2021-02-18T21:42:15Z",
        "updatedAt" : "2021-02-18T21:42:15Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "f8430a4c-425c-4261-a49a-9c3f04ca3226",
        "parentId" : "73ea468c-9a88-4a71-b90d-8b33bd768cb2",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Ahh, right, not `static PyArrayObject_fields`, just `PyArrayObject_fields`.",
        "createdAt" : "2021-02-19T14:15:17Z",
        "updatedAt" : "2021-02-19T14:15:17Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "e01d89471b0c4a69f7d1e868af31af7220f90318",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +55,59 @@ * incorrectly), since base would be incorrectly decref'd as well.\n * This is especially important for nonzero and copyswap, which may run with\n * the GIL released.\n */\nstatic NPY_INLINE PyArrayObject_fields"
  },
  {
    "id" : "ccfa388f-3adc-496a-a7ec-39295e88feab",
    "prId" : 15508,
    "prUrl" : "https://github.com/numpy/numpy/pull/15508#pullrequestreview-433757105",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3de89ba0-c616-4807-983d-a2ec6c47c04e",
        "parentId" : null,
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "nit: looks like NPY_NTYPES seems to be the upper limit here. For example, if we were to add a new builtin type that would be added after NPY_HALF? doubt, if this even happens to even worry about ?",
        "createdAt" : "2020-06-19T02:05:19Z",
        "updatedAt" : "2020-06-19T20:01:15Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ea745b41e093fa4c100a074be9392a1b44d1f6f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +4365,4369 @@     * (NPY_HALF is the largest builtin one.)\n     */\n    for (i = 0; i <= NPY_HALF; i++) {\n        if (dtypemeta_wrap_legacy_descriptor(_builtin_descrs[i]) < 0) {\n            return -1;"
  },
  {
    "id" : "9e5e14c0-53e7-4747-b7d2-41960ab54858",
    "prId" : 16109,
    "prUrl" : "https://github.com/numpy/numpy/pull/16109#pullrequestreview-402961548",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90805771-4c0a-4897-bb0f-cd1c5ddbe0c7",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "@charris, this reverts the commit (except the tests). With this only `longdouble` is affected by the fixup, for which it fixes a bug, and is not just a bit of a jumping through hoops.\r\n\r\nThe two lines above should be the only change remaining from the original backport., i.e. the original fix effectively set `convert = 0` for *all* types. This one only does it for `longdouble`.",
        "createdAt" : "2020-04-29T19:12:30Z",
        "updatedAt" : "2020-04-29T19:12:31Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6cdbfa1fcd65d9a24fc802090181e6c1199a9fa",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1529,1533 @@ *          1*18,(PyArray_DESCR(aop)->elsize)*3,1*2#\n * #convert = 1*14, 0, 1*3, 0*3, 1*2,\n *            1*14, 0, 1*3, 0*3, 1*2,\n *            0*23#\n * #convstr = (Int*9, Long*2, Float*4, Complex*3, Tuple*3, Long*2)*3#"
  }
]