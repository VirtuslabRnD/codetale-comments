[
  {
    "id" : "899657d0-dcce-4974-83bb-36f518f1d518",
    "prId" : 3188,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "644caffb-e815-4ac1-adca-fc1064008686",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Need C comment, not C++\n",
        "createdAt" : "2013-04-02T06:57:49Z",
        "updatedAt" : "2013-04-07T02:41:41Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0a2e3cda794d3119f8534c13d031e0de5130b3f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +803,807 @@            }\n            vobj->obval = destptr;\n\n            /*\n             * No base available for copyswp and no swap required."
  },
  {
    "id" : "3b14b14d-beb1-4c7d-b075-995839191dfe",
    "prId" : 7141,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2edd149-ac43-42bf-b532-e4c641bf025c",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "what is the reason you removed `NPY_ARRAY_BEHAVED`? (aligned and writeable)\n",
        "createdAt" : "2016-01-29T15:22:32Z",
        "updatedAt" : "2016-01-29T15:56:46Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "120fa44d-60ee-478d-82b5-21a926a8804e",
        "parentId" : "d2edd149-ac43-42bf-b532-e4c641bf025c",
        "authorId" : "db62fcb3-01c1-4da3-91c5-094afc111947",
        "body" : "`NPY_ARRAY_CARRAY` is C-contiguous and behaved: https://github.com/numpy/numpy/blob/master/numpy/core/include/numpy/ndarraytypes.h#L861\n",
        "createdAt" : "2016-01-29T15:32:28Z",
        "updatedAt" : "2016-01-29T15:56:46Z",
        "lastEditedBy" : "db62fcb3-01c1-4da3-91c5-094afc111947",
        "tags" : [
        ]
      },
      {
        "id" : "729347c5-7198-4ef8-8cf3-906c8fd799c8",
        "parentId" : "d2edd149-ac43-42bf-b532-e4c641bf025c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK, can you please make sure there is a test for this as well though, or add one if there is not?\n",
        "createdAt" : "2016-01-29T15:40:20Z",
        "updatedAt" : "2016-01-29T15:56:46Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "50d83e2c-0d56-49c1-b47c-8af2ce930099",
        "parentId" : "d2edd149-ac43-42bf-b532-e4c641bf025c",
        "authorId" : "db62fcb3-01c1-4da3-91c5-094afc111947",
        "body" : "I can - I will look at this now.\n",
        "createdAt" : "2016-01-29T15:44:33Z",
        "updatedAt" : "2016-01-29T15:56:46Z",
        "lastEditedBy" : "db62fcb3-01c1-4da3-91c5-094afc111947",
        "tags" : [
        ]
      },
      {
        "id" : "2a7335eb-9e99-4a30-83a6-12be31ff08fe",
        "parentId" : "d2edd149-ac43-42bf-b532-e4c641bf025c",
        "authorId" : "db62fcb3-01c1-4da3-91c5-094afc111947",
        "body" : "Removing the aligned and writeable flags didn't cause any test failures, so I've added checks for both of them to the `test_pickle_3` test as well.\n",
        "createdAt" : "2016-01-29T16:34:44Z",
        "updatedAt" : "2016-01-29T16:34:44Z",
        "lastEditedBy" : "db62fcb3-01c1-4da3-91c5-094afc111947",
        "tags" : [
        ]
      },
      {
        "id" : "cd1adf71-ab43-4ba6-96fc-48d6674e0f55",
        "parentId" : "d2edd149-ac43-42bf-b532-e4c641bf025c",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Some alignment features only matter on Sun hardware. I don't know if that affects this or not.\n",
        "createdAt" : "2016-01-29T18:00:47Z",
        "updatedAt" : "2016-01-29T18:00:47Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "1b9ccc2e-985a-4220-8baf-2b3a4884606f",
        "parentId" : "d2edd149-ac43-42bf-b532-e4c641bf025c",
        "authorId" : "db62fcb3-01c1-4da3-91c5-094afc111947",
        "body" : "I don't have access to any Sun hardware (I presume SPARC machines?) but I think I've avoided changing the aligned flag here - is there anything else I can look into related to this?\n",
        "createdAt" : "2016-01-29T18:39:37Z",
        "updatedAt" : "2016-01-29T18:39:37Z",
        "lastEditedBy" : "db62fcb3-01c1-4da3-91c5-094afc111947",
        "tags" : [
        ]
      },
      {
        "id" : "5228298e-ef3c-465c-a34e-99e97a93c2c4",
        "parentId" : "d2edd149-ac43-42bf-b532-e4c641bf025c",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "that should't be necessary, alignment should be handled correctly and if not well deal with it when it causes a problem\nmost platforms don't care about alignment anyway, at worst you have software handling on those and some slowdown which is irrelevant for scalars.\n",
        "createdAt" : "2016-01-29T18:50:44Z",
        "updatedAt" : "2016-01-29T18:51:26Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c03f21a133aae86f661c1dc57d71fa06eca9979",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +800,804 @@            vobj->obval = NULL;\n            Py_SIZE(vobj) = itemsize;\n            vobj->flags = NPY_ARRAY_CARRAY | NPY_ARRAY_F_CONTIGUOUS | NPY_ARRAY_OWNDATA;\n            swap = 0;\n            if (PyDataType_HASFIELDS(descr)) {"
  },
  {
    "id" : "4616a8cb-c58b-41dc-ba69-26d0e54942d8",
    "prId" : 13003,
    "prUrl" : "https://github.com/numpy/numpy/pull/13003#pullrequestreview-207476041",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54950088-b06c-4a92-be80-151b78184c6e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Is this a bug fix?",
        "createdAt" : "2019-02-24T08:14:55Z",
        "updatedAt" : "2019-05-26T04:57:56Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b54b4fa8-f01f-4251-9ee1-d8665612dafd",
        "parentId" : "54950088-b06c-4a92-be80-151b78184c6e",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yes, although it might be that the bug it fixes is in paths that normal code should not reach.",
        "createdAt" : "2019-02-25T15:57:34Z",
        "updatedAt" : "2019-05-26T04:57:56Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "65da9049eb34db40343edc3e24059944b354d918",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +483,487 @@            Py_XINCREF(new->fields);\n            new->names = conv->names;\n            Py_XINCREF(new->names);\n            new->elsize = conv->elsize;\n            new->subarray = conv->subarray;"
  },
  {
    "id" : "a95d99ea-1688-4f0a-a485-9dcfc8ccd6ba",
    "prId" : 15300,
    "prUrl" : "https://github.com/numpy/numpy/pull/15300#pullrequestreview-341323213",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0ad8970-d229-4043-99c5-c001156296b3",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is probably quite a good argument for why I'm `INCREF`ing `Py_NotImplemented` before returning it.",
        "createdAt" : "2020-01-09T22:24:39Z",
        "updatedAt" : "2020-01-10T15:27:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c690821f-c144-408c-bb95-871333ca3c5b",
        "parentId" : "d0ad8970-d229-4043-99c5-c001156296b3",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : ":+1: Not incrementing is just too smart anyway...",
        "createdAt" : "2020-01-10T17:49:26Z",
        "updatedAt" : "2020-01-10T17:49:26Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "74df40540001011fc0cad5c2a1a14947cba037f8",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +485,489 @@            conv->subarray = NULL;\n        }\n        Py_DECREF(conv);\n        Py_XDECREF(new->typeobj);\n        new->typeobj = (PyTypeObject *)type;"
  },
  {
    "id" : "3f09245f-e8cc-4461-9112-0bdcccdc3988",
    "prId" : 15471,
    "prUrl" : "https://github.com/numpy/numpy/pull/15471#pullrequestreview-434437745",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4dfa239-3630-498b-8ad2-8cd66ec1a908",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Jeesh, that can happen here...? Ah well, its good in either case.",
        "createdAt" : "2020-06-19T17:52:49Z",
        "updatedAt" : "2020-06-19T18:13:49Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "d4afdc27-b3d9-4830-8203-1df9192f187c",
        "parentId" : "e4dfa239-3630-498b-8ad2-8cd66ec1a908",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I don't actually know whether it can happen _here_, but it can at least happen sometimes.",
        "createdAt" : "2020-06-20T16:05:10Z",
        "updatedAt" : "2020-06-20T16:05:10Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "f33a002366f3d02dd6662ad31595b8ae1877dfde",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +313,317 @@    }\n    /* the dtype used by the array may be different to the one requested */\n    typecode = PyArray_DESCR(r);\n    if (PyDataType_FLAGCHK(typecode, NPY_USE_SETITEM)) {\n        if (typecode->f->setitem(scalar, PyArray_DATA(r), r) < 0) {"
  },
  {
    "id" : "356ec0ba-3cef-4b0f-a8c7-c1619ccea20c",
    "prId" : 15471,
    "prUrl" : "https://github.com/numpy/numpy/pull/15471#pullrequestreview-434438747",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f1e96bc-a9ce-47fe-9934-2fd78dc1b132",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "This seems incorrect to me. If the above typecode got replaced, I think you have use either `PyArray_NBYTES` or maybe nicer, the `elsize` of the original `dtype`.",
        "createdAt" : "2020-06-19T17:55:37Z",
        "updatedAt" : "2020-06-19T18:13:49Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "b3f526b3-b1f3-4a1f-87c6-38c34e0cc859",
        "parentId" : "3f1e96bc-a9ce-47fe-9934-2fd78dc1b132",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OTOH, I cannot think a way of doing it, the only thing would be a void with a subarray field, and that seems to not be possible to construct...",
        "createdAt" : "2020-06-19T18:02:21Z",
        "updatedAt" : "2020-06-19T18:13:49Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "f4b413a5-a27e-48b9-91c1-cdfb9e97cb8f",
        "parentId" : "3f1e96bc-a9ce-47fe-9934-2fd78dc1b132",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This code is unchanged from what was here before, it just got moved to within an `else` to avoid needing a `goto`.",
        "createdAt" : "2020-06-20T16:04:46Z",
        "updatedAt" : "2020-06-20T16:04:46Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "04829019-7357-432b-b279-4e365d5d7473",
        "parentId" : "3f1e96bc-a9ce-47fe-9934-2fd78dc1b132",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK, I added it to my tracking issue in the other capacity already.  I am happy to just put it in as is and declare it a bug from dawn of time.  (One which actually proofs that nobody does crazy stuff and the above safety hatch should not be necessary. So its actually good that it is there.)",
        "createdAt" : "2020-06-20T16:22:43Z",
        "updatedAt" : "2020-06-20T16:22:43Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f33a002366f3d02dd6662ad31595b8ae1877dfde",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +324,328 @@        char *memptr = scalar_value(scalar, typecode);\n\n        memcpy(PyArray_DATA(r), memptr, PyArray_ITEMSIZE(r));\n        if (PyDataType_FLAGCHK(typecode, NPY_ITEM_HASOBJECT)) {\n            /* Need to INCREF just the PyObject portion */"
  },
  {
    "id" : "61e64861-17cc-4f9a-910d-a9eda05bf247",
    "prId" : 16771,
    "prUrl" : "https://github.com/numpy/numpy/pull/16771#pullrequestreview-443957932",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7dd1b0a-2a17-4e13-912c-10a96d233c5b",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "This is the same code as used above (line 74 or so) so the stanza itself is OK. The only other thing I could think of is to refactor `scalar_value()` to move the function itself onto the descriptor as a `__getscalar__` slot in the dtype refactoring.",
        "createdAt" : "2020-07-07T06:25:21Z",
        "updatedAt" : "2020-07-07T06:25:22Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "c1486550-de9f-450b-87ef-39e74fbb3c43",
        "parentId" : "d7dd1b0a-2a17-4e13-912c-10a96d233c5b",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yeah, we could do that and probably even should. I do not like `scalar_value()` as a requirement for scalars in general though.  And, I do not like flexible dtypes being special here, so would rather if we just return a `void *`.  In either case, Chuck probably wants to backport this, so we should put this in as is.\r\n\r\n`scalar_value` (or something similar) is a neat idea.  But ultimately, it is mainly a slightly faster access to the value compared to `setitem` (i.e. one less copy).  The main problem for me is, that I do not really like it as a requirement on scalars (it technically is not even now), even if most scalars should be able to provide it easily.",
        "createdAt" : "2020-07-07T14:39:18Z",
        "updatedAt" : "2020-07-07T14:39:19Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7324a459243e515a4f53f72bb70f696f8414b23f",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +153,157 @@                return (void *)raw_data;\n            }\n            return PyArrayScalar_VAL(scalar, Unicode);\n        }\n        if (_CHK(Void)) {"
  },
  {
    "id" : "daae0ba8-5dc8-4f99-905e-f33ce1de78eb",
    "prId" : 17295,
    "prUrl" : "https://github.com/numpy/numpy/pull/17295#pullrequestreview-515083452",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "baed633b-10f8-404e-bd61-2e5a6e2b5584",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Seems like this casting to signed was the problem (and I first thought it can't be because the denominator is stored as a `denom - 1` here making the `2` a `1`...\r\n\r\nIf the value is too large, it would be a negative which breaks the rounding (and also means that a previously aligned value looks unaligned).",
        "createdAt" : "2020-10-22T20:13:28Z",
        "updatedAt" : "2020-10-22T20:13:28Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d02ca96090ea2fed97b7789a855668c1ddc98294",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +169,173 @@     * after a PyObject_HEAD\n     */\n    memloc = (uintptr_t)scalar;\n    memloc += sizeof(PyObject);\n    /* now round-up to the nearest alignment value */"
  }
]