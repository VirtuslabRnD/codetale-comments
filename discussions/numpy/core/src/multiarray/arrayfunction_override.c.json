[
  {
    "id" : "32bdcf5e-db62-43ff-8382-4bf2d57660fb",
    "prId" : 12317,
    "prUrl" : "https://github.com/numpy/numpy/pull/12317#pullrequestreview-181962797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ac5e83a-162f-467a-a2bd-31319f1f2b2d",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "nitpick: maybe combine with `PyObject` definition above.",
        "createdAt" : "2018-12-05T19:50:22Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "c049dfc0-1633-428d-bc67-b62d64948f30",
        "parentId" : "2ac5e83a-162f-467a-a2bd-31319f1f2b2d",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "This wraps over 80 characters if you combine it",
        "createdAt" : "2018-12-05T21:02:18Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "7104a3e9fe989f43f20765d740cf22dabae563d4",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +106,110 @@                for (j = 0; j < num_implementing_args; j++) {\n                    PyObject *other_type;\n                    other_type = (PyObject *)Py_TYPE(implementing_args[j]);\n                    if (PyObject_IsInstance(argument, other_type)) {\n                        arg_index = j;"
  },
  {
    "id" : "6e3f26fa-d05d-42bb-8f0e-11abe154aa03",
    "prId" : 12317,
    "prUrl" : "https://github.com/numpy/numpy/pull/12317#pullrequestreview-182443220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01f29748-ac3b-4107-86c5-597890fc3c4e",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Why a list here and a tuple in the main routine above?",
        "createdAt" : "2018-12-06T19:08:36Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "147dfb25-48c4-4385-9ed9-1a20ef114167",
        "parentId" : "01f29748-ac3b-4107-86c5-597890fc3c4e",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "No particular reason. Above I used a tuple because it's slightly faster and immutable. Here speed doesn't matter (for a testing function) and a list felt slightly more idiomatic for a homogeneous sequence of unknown length.",
        "createdAt" : "2018-12-06T20:55:30Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "7104a3e9fe989f43f20765d740cf22dabae563d4",
    "line" : 359,
    "diffHunk" : "@@ -1,1 +357,361 @@\n    /* create a Python object for implementing_args */\n    result = PyList_New(num_implementing_args);\n    if (result == NULL) {\n        goto cleanup;"
  },
  {
    "id" : "da1785d3-d29a-4498-97ac-cac367ad4182",
    "prId" : 12317,
    "prUrl" : "https://github.com/numpy/numpy/pull/12317#pullrequestreview-182539579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "020c9456-7cbb-440f-bd05-dd9b2fb6de64",
        "parentId" : null,
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "`PyArg_UnpackTuple` is slightly faster than `PyArg_ParseTuple` (~100 ns?) because it doesn't require parsing the format string.",
        "createdAt" : "2018-12-07T03:24:13Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "7104a3e9fe989f43f20765d740cf22dabae563d4",
    "line" : 225,
    "diffHunk" : "@@ -1,1 +223,227 @@    static PyObject *errmsg_formatter = NULL;\n\n    if (!PyArg_UnpackTuple(\n            positional_args, \"implement_array_function\", 5, 5,\n            &implementation, &public_api, &relevant_args, &args, &kwargs)) {"
  },
  {
    "id" : "d319b50c-daa7-4dd4-b2a5-5855fb55f6fd",
    "prId" : 12317,
    "prUrl" : "https://github.com/numpy/numpy/pull/12317#pullrequestreview-182952006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1832654e-1cfb-4431-86bd-1d4b373bce28",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This isn't really the place for this discussion, but - why are we providing a `self` argument to `__array_function__`?",
        "createdAt" : "2018-12-08T05:58:06Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b83f556f-3ca0-4061-bd19-e6af33e4e651",
        "parentId" : "1832654e-1cfb-4431-86bd-1d4b373bce28",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "I think we talked about this in one of the NEP pull requests.\r\n\r\nBasically, it's for symmetry with `__array_ufunc__`. Also, static methods are a little weird/unexpected.",
        "createdAt" : "2018-12-08T18:03:47Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "7104a3e9fe989f43f20765d740cf22dabae563d4",
    "line" : 200,
    "diffHunk" : "@@ -1,1 +198,202 @@    else {\n        return PyObject_CallFunctionObjArgs(\n            method, argument, public_api, types, args, kwargs, NULL);\n    }\n}"
  },
  {
    "id" : "2963d017-a949-4ce3-9074-6a28e4b0d773",
    "prId" : 12317,
    "prUrl" : "https://github.com/numpy/numpy/pull/12317#pullrequestreview-184523944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fe99ba1-f924-4a9e-92e0-989c07a66914",
        "parentId" : null,
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Should I be using `Py_CLEAR` here?",
        "createdAt" : "2018-12-13T07:01:38Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "902b1f35-fe5d-42f1-8076-a45c48143605",
        "parentId" : "0fe99ba1-f924-4a9e-92e0-989c07a66914",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "nit. In principle yes, but practically you know it is `Py_NotImplemented`, so the decref will not trigger further actions.",
        "createdAt" : "2018-12-13T07:06:23Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "7104a3e9fe989f43f20765d740cf22dabae563d4",
    "line" : 294,
    "diffHunk" : "@@ -1,1 +292,296 @@            /* Try the next one */\n            Py_DECREF(result);\n            result = NULL;\n        }\n        else {"
  },
  {
    "id" : "bb883888-6196-4aaa-a9cf-909f614f0e67",
    "prId" : 12317,
    "prUrl" : "https://github.com/numpy/numpy/pull/12317#pullrequestreview-185904940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44d766b7-fbe5-4e3b-9f03-9642791bd82c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Why is there any cleanup to do here?",
        "createdAt" : "2018-12-18T04:34:35Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ef8ad0c2-c720-4e84-8273-f3d705a7125e",
        "parentId" : "44d766b7-fbe5-4e3b-9f03-9642791bd82c",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "nevermind",
        "createdAt" : "2018-12-18T04:42:45Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "7104a3e9fe989f43f20765d740cf22dabae563d4",
    "line" : 242,
    "diffHunk" : "@@ -1,1 +240,244 @@        relevant_args, implementing_args, array_function_methods);\n    if (num_implementing_args == -1) {\n        goto cleanup;\n    }\n"
  },
  {
    "id" : "b9e41b8c-d643-4ad8-9d0f-d6ac74e2851c",
    "prId" : 12317,
    "prUrl" : "https://github.com/numpy/numpy/pull/12317#pullrequestreview-185910200",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df80f12c-7e81-4bab-bf48-978e0fd34697",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you extend this comment to explain what a `NULL` means (ie, will an exception never / sometimes / always be set)",
        "createdAt" : "2018-12-18T04:38:40Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0e66e91e-c849-49fd-9c18-99f13027bc5e",
        "parentId" : "df80f12c-7e81-4bab-bf48-978e0fd34697",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "done",
        "createdAt" : "2018-12-18T05:50:18Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "7104a3e9fe989f43f20765d740cf22dabae563d4",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +20,24 @@\n/*\n * Get an object's __array_function__ method in the fastest way possible.\n * Never raises an exception. Returns NULL if the method doesn't exist.\n */"
  },
  {
    "id" : "19708a3b-fca9-4fab-93e0-6dd7b9879a1e",
    "prId" : 12317,
    "prUrl" : "https://github.com/numpy/numpy/pull/12317#pullrequestreview-185910200",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b40c745e-1d12-4e60-9337-ae0dae2349fa",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you extract everything from here down to a helper function? It would eliminate the need for most of the `goto cleanup`s. Perhaps:\r\n```C\r\n/**\r\n * Having discovered all of the __array_function__ implementations, invoke the until a result is produced.\r\n */\r\nstatic PyObject *\r\ninvoke_array_function(\r\n    PyObject *implementation,\r\n    PyObject *args,\r\n    PyObject *kwargs,\r\n    PyObject **implementing_args,\r\n    PyObject **array_function_methods,\r\n    int num_implementing_args\r\n) {\r\n   // return result\r\n}\r\n```",
        "createdAt" : "2018-12-18T04:45:11Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2f529cef-7dd2-4a81-97ae-20a9c05663b3",
        "parentId" : "b40c745e-1d12-4e60-9337-ae0dae2349fa",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "I'm sympathetic to removing `goto`, but I still need to decref `types`. I guess I end up saving one or two goto statements by adding the helper function? That doesn't really seem to be worth it to me.\r\n\r\nI've already broken out most of the logical sub-components, so `array_implement_array_function` is pretty high level (for C code). I don't think `invoke_array_function()` is a particularly useful sub-component from a modularity perspective.",
        "createdAt" : "2018-12-18T05:19:04Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "7104a3e9fe989f43f20765d740cf22dabae563d4",
    "line" : 245,
    "diffHunk" : "@@ -1,1 +243,247 @@    }\n\n    /*\n     * Handle the typical case of no overrides. This is merely an optimization\n     * if some arguments are ndarray objects, but is also necessary if no"
  },
  {
    "id" : "0858b906-8226-46b8-bcc2-d754e11739f7",
    "prId" : 16935,
    "prUrl" : "https://github.com/numpy/numpy/pull/16935#pullrequestreview-455235494",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ab4b356-b93c-4dc5-9f52-89accd7b1872",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "All of these calls can fail",
        "createdAt" : "2020-07-24T13:10:56Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e3cef2f0-adb2-45a6-9fcd-7236eac12179",
        "parentId" : "4ab4b356-b93c-4dc5-9f52-89accd7b1872",
        "authorId" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "body" : "Yup, I didn't spend much time on error-checking yet as I wanted to get the discussion started, I'll do that soon. :)",
        "createdAt" : "2020-07-24T13:12:17Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "tags" : [
        ]
      },
      {
        "id" : "b58e986b-18c5-4037-b088-81e4f02363b0",
        "parentId" : "4ab4b356-b93c-4dc5-9f52-89accd7b1872",
        "authorId" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "body" : "Done.",
        "createdAt" : "2020-07-24T23:42:34Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "tags" : [
        ]
      }
    ],
    "commit" : "458e8646107fff28c07b2b458961f1095e2e255c",
    "line" : 284,
    "diffHunk" : "@@ -1,1 +403,407 @@                            function_name);\n    }\n\n    PyObject* result = array_implement_array_function_internal(\n            public_api, relevant_args, args, kwargs);"
  },
  {
    "id" : "bdd03c79-03ef-4fa3-8431-53ff42a6e096",
    "prId" : 16935,
    "prUrl" : "https://github.com/numpy/numpy/pull/16935#pullrequestreview-462056655",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "deb75762-1a84-495c-96c9-1368a90b33e3",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n    /* \r\n     * Remove `like=` kwarg, which is NumPy-exclusive and thus not present\r\n```",
        "createdAt" : "2020-08-05T16:43:03Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "91cf9f1e-93a5-4baf-a8c6-4d6770c44f38",
        "parentId" : "deb75762-1a84-495c-96c9-1368a90b33e3",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Maybe this comment should note that this is currently done indiscriminately.  I guess the assumption that we can always discard `like=` is good, but in most cases it cannot even be present.",
        "createdAt" : "2020-08-05T17:44:21Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "482819bc-3929-4ccf-b07c-c0d60ad5323d",
        "parentId" : "deb75762-1a84-495c-96c9-1368a90b33e3",
        "authorId" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "body" : "I'm not sure what you mean by that, what are \"most cases\"? Note that removing the `like=` keyword is part of [NEP-35](https://numpy.org/neps/nep-0035-array-creation-dispatch-with-array-function.html#implementation), if we intend not to do that, we should probably discuss it and change the NEP as well.",
        "createdAt" : "2020-08-05T21:02:35Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "tags" : [
        ]
      },
      {
        "id" : "f722b9fa-56ef-4137-a877-64cfb08268a3",
        "parentId" : "deb75762-1a84-495c-96c9-1368a90b33e3",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Well, this also removes `like=` from `np.concatenate((arr1, arr2), out=out)` which clearly doesn't support `like` I think? I do agree that it is unlikely it is speed relevant though.",
        "createdAt" : "2020-08-05T21:08:42Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "b33769a8-bd75-4392-a88e-79eab4d96195",
        "parentId" : "deb75762-1a84-495c-96c9-1368a90b33e3",
        "authorId" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "body" : "I see your point now. On your previous comment you mentioned \"it cannot even be present\", are you referring that `like=` cannot be present or that this code block cannot be present?",
        "createdAt" : "2020-08-05T21:51:46Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "tags" : [
        ]
      },
      {
        "id" : "fec50cb4-9def-4490-a681-c1305d6352b4",
        "parentId" : "deb75762-1a84-495c-96c9-1368a90b33e3",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Sorry, yeah, I just meant that many functions will never have a `like` kwarg, since they do not support it. Maybe would be good to just have a comment that we currently remove it even for examples like concatenate.",
        "createdAt" : "2020-08-05T22:05:41Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "458e8646107fff28c07b2b458961f1095e2e255c",
    "line" : 223,
    "diffHunk" : "@@ -1,1 +342,346 @@    }\n\n    /* Remove `like=` kwarg, which is NumPy-exclusive and thus not present\n     * in downstream libraries.\n     */"
  },
  {
    "id" : "f2e307d1-3947-42b8-b23a-310d6fa51ceb",
    "prId" : 16935,
    "prUrl" : "https://github.com/numpy/numpy/pull/16935#pullrequestreview-463602371",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d835ae0b-1af4-4049-b5ab-d1f6d4b94528",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think this (vs extra recounting) is fine as long as it's documented and internal. At some point, we should probably make this type of thing consistent, but I don't feel strongly about it.",
        "createdAt" : "2020-08-07T19:55:35Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ecaca6f7-4602-41d1-8b8a-c7311faab7cc",
        "parentId" : "d835ae0b-1af4-4049-b5ab-d1f6d4b94528",
        "authorId" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "body" : "@seberg would you like to comment here given this was your idea? I don't feel strongly either way.",
        "createdAt" : "2020-08-07T20:44:52Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "tags" : [
        ]
      },
      {
        "id" : "4760d0df-e914-43df-a7da-ec63a729f051",
        "parentId" : "d835ae0b-1af4-4049-b5ab-d1f6d4b94528",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "No action needed, just expressing agreement :)",
        "createdAt" : "2020-08-07T20:48:36Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "458e8646107fff28c07b2b458961f1095e2e255c",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +203,207 @@/**\n * Internal handler for the array-function dispatching. The helper returns\n * either the result, or NotImplemented (as a borrowed reference).\n *\n * @param public_api The public API symbol used for dispatching"
  },
  {
    "id" : "d9f4127e-b0df-49ab-b1cc-0d999069a9f4",
    "prId" : 16935,
    "prUrl" : "https://github.com/numpy/numpy/pull/16935#pullrequestreview-464436824",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a0f8ef8-b6de-4c54-9456-657d16a6b7e0",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "In this case, you're forced to put this at the top because `goto cleanup` could have skipped the initialization below.",
        "createdAt" : "2020-08-10T17:04:02Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "8e7a43a1-171e-4d34-882d-a0ed0747723e",
        "parentId" : "6a0f8ef8-b6de-4c54-9456-657d16a6b7e0",
        "authorId" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "body" : "Exactly, that's why I did it like that now, I missed it the first time though.",
        "createdAt" : "2020-08-10T17:37:12Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "tags" : [
        ]
      }
    ],
    "commit" : "458e8646107fff28c07b2b458961f1095e2e255c",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +221,225 @@    PyObject *implementing_args[NPY_MAXARGS];\n    PyObject *array_function_methods[NPY_MAXARGS];\n    PyObject *types = NULL;\n\n    PyObject *result = NULL;"
  },
  {
    "id" : "dbfabe53-918f-42c1-874f-3f21f44db99e",
    "prId" : 18671,
    "prUrl" : "https://github.com/numpy/numpy/pull/18671#pullrequestreview-619158853",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed77eb13-7de6-4358-a4b1-56b02a2bf23b",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "This is the larger difference. The code path looks different on `main`.  This is much like the diff just above.",
        "createdAt" : "2021-03-23T23:00:02Z",
        "updatedAt" : "2021-03-23T23:00:03Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "afc861e4f3fbc653a3094fb50d6309b7816c7adf",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +404,408 @@                    \"implements the `__array_function__` protocol.\");\n        }\n        Py_DECREF(tmp_has_override);\n    }\n    PyObject *relevant_args = PyTuple_Pack(1, like_arg);"
  }
]