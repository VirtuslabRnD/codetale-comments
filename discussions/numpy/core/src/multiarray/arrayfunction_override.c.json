[
  {
    "id" : "32bdcf5e-db62-43ff-8382-4bf2d57660fb",
    "prId" : 12317,
    "prUrl" : "https://github.com/numpy/numpy/pull/12317#pullrequestreview-181962797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ac5e83a-162f-467a-a2bd-31319f1f2b2d",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "nitpick: maybe combine with `PyObject` definition above.",
        "createdAt" : "2018-12-05T19:50:22Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "c049dfc0-1633-428d-bc67-b62d64948f30",
        "parentId" : "2ac5e83a-162f-467a-a2bd-31319f1f2b2d",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "This wraps over 80 characters if you combine it",
        "createdAt" : "2018-12-05T21:02:18Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "7104a3e9fe989f43f20765d740cf22dabae563d4",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +106,110 @@                for (j = 0; j < num_implementing_args; j++) {\n                    PyObject *other_type;\n                    other_type = (PyObject *)Py_TYPE(implementing_args[j]);\n                    if (PyObject_IsInstance(argument, other_type)) {\n                        arg_index = j;"
  },
  {
    "id" : "6e3f26fa-d05d-42bb-8f0e-11abe154aa03",
    "prId" : 12317,
    "prUrl" : "https://github.com/numpy/numpy/pull/12317#pullrequestreview-182443220",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01f29748-ac3b-4107-86c5-597890fc3c4e",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Why a list here and a tuple in the main routine above?",
        "createdAt" : "2018-12-06T19:08:36Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "147dfb25-48c4-4385-9ed9-1a20ef114167",
        "parentId" : "01f29748-ac3b-4107-86c5-597890fc3c4e",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "No particular reason. Above I used a tuple because it's slightly faster and immutable. Here speed doesn't matter (for a testing function) and a list felt slightly more idiomatic for a homogeneous sequence of unknown length.",
        "createdAt" : "2018-12-06T20:55:30Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "7104a3e9fe989f43f20765d740cf22dabae563d4",
    "line" : 359,
    "diffHunk" : "@@ -1,1 +357,361 @@\n    /* create a Python object for implementing_args */\n    result = PyList_New(num_implementing_args);\n    if (result == NULL) {\n        goto cleanup;"
  },
  {
    "id" : "da1785d3-d29a-4498-97ac-cac367ad4182",
    "prId" : 12317,
    "prUrl" : "https://github.com/numpy/numpy/pull/12317#pullrequestreview-182539579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "020c9456-7cbb-440f-bd05-dd9b2fb6de64",
        "parentId" : null,
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "`PyArg_UnpackTuple` is slightly faster than `PyArg_ParseTuple` (~100 ns?) because it doesn't require parsing the format string.",
        "createdAt" : "2018-12-07T03:24:13Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "7104a3e9fe989f43f20765d740cf22dabae563d4",
    "line" : 225,
    "diffHunk" : "@@ -1,1 +223,227 @@    static PyObject *errmsg_formatter = NULL;\n\n    if (!PyArg_UnpackTuple(\n            positional_args, \"implement_array_function\", 5, 5,\n            &implementation, &public_api, &relevant_args, &args, &kwargs)) {"
  },
  {
    "id" : "d319b50c-daa7-4dd4-b2a5-5855fb55f6fd",
    "prId" : 12317,
    "prUrl" : "https://github.com/numpy/numpy/pull/12317#pullrequestreview-182952006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1832654e-1cfb-4431-86bd-1d4b373bce28",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This isn't really the place for this discussion, but - why are we providing a `self` argument to `__array_function__`?",
        "createdAt" : "2018-12-08T05:58:06Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b83f556f-3ca0-4061-bd19-e6af33e4e651",
        "parentId" : "1832654e-1cfb-4431-86bd-1d4b373bce28",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "I think we talked about this in one of the NEP pull requests.\r\n\r\nBasically, it's for symmetry with `__array_ufunc__`. Also, static methods are a little weird/unexpected.",
        "createdAt" : "2018-12-08T18:03:47Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "7104a3e9fe989f43f20765d740cf22dabae563d4",
    "line" : 200,
    "diffHunk" : "@@ -1,1 +198,202 @@    else {\n        return PyObject_CallFunctionObjArgs(\n            method, argument, public_api, types, args, kwargs, NULL);\n    }\n}"
  },
  {
    "id" : "2963d017-a949-4ce3-9074-6a28e4b0d773",
    "prId" : 12317,
    "prUrl" : "https://github.com/numpy/numpy/pull/12317#pullrequestreview-184523944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fe99ba1-f924-4a9e-92e0-989c07a66914",
        "parentId" : null,
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Should I be using `Py_CLEAR` here?",
        "createdAt" : "2018-12-13T07:01:38Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "902b1f35-fe5d-42f1-8076-a45c48143605",
        "parentId" : "0fe99ba1-f924-4a9e-92e0-989c07a66914",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "nit. In principle yes, but practically you know it is `Py_NotImplemented`, so the decref will not trigger further actions.",
        "createdAt" : "2018-12-13T07:06:23Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "7104a3e9fe989f43f20765d740cf22dabae563d4",
    "line" : 294,
    "diffHunk" : "@@ -1,1 +292,296 @@            /* Try the next one */\n            Py_DECREF(result);\n            result = NULL;\n        }\n        else {"
  },
  {
    "id" : "bb883888-6196-4aaa-a9cf-909f614f0e67",
    "prId" : 12317,
    "prUrl" : "https://github.com/numpy/numpy/pull/12317#pullrequestreview-185904940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44d766b7-fbe5-4e3b-9f03-9642791bd82c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Why is there any cleanup to do here?",
        "createdAt" : "2018-12-18T04:34:35Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ef8ad0c2-c720-4e84-8273-f3d705a7125e",
        "parentId" : "44d766b7-fbe5-4e3b-9f03-9642791bd82c",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "nevermind",
        "createdAt" : "2018-12-18T04:42:45Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "7104a3e9fe989f43f20765d740cf22dabae563d4",
    "line" : 242,
    "diffHunk" : "@@ -1,1 +240,244 @@        relevant_args, implementing_args, array_function_methods);\n    if (num_implementing_args == -1) {\n        goto cleanup;\n    }\n"
  },
  {
    "id" : "b9e41b8c-d643-4ad8-9d0f-d6ac74e2851c",
    "prId" : 12317,
    "prUrl" : "https://github.com/numpy/numpy/pull/12317#pullrequestreview-185910200",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df80f12c-7e81-4bab-bf48-978e0fd34697",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you extend this comment to explain what a `NULL` means (ie, will an exception never / sometimes / always be set)",
        "createdAt" : "2018-12-18T04:38:40Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0e66e91e-c849-49fd-9c18-99f13027bc5e",
        "parentId" : "df80f12c-7e81-4bab-bf48-978e0fd34697",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "done",
        "createdAt" : "2018-12-18T05:50:18Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "7104a3e9fe989f43f20765d740cf22dabae563d4",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +20,24 @@\n/*\n * Get an object's __array_function__ method in the fastest way possible.\n * Never raises an exception. Returns NULL if the method doesn't exist.\n */"
  },
  {
    "id" : "19708a3b-fca9-4fab-93e0-6dd7b9879a1e",
    "prId" : 12317,
    "prUrl" : "https://github.com/numpy/numpy/pull/12317#pullrequestreview-185910200",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b40c745e-1d12-4e60-9337-ae0dae2349fa",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you extract everything from here down to a helper function? It would eliminate the need for most of the `goto cleanup`s. Perhaps:\r\n```C\r\n/**\r\n * Having discovered all of the __array_function__ implementations, invoke the until a result is produced.\r\n */\r\nstatic PyObject *\r\ninvoke_array_function(\r\n    PyObject *implementation,\r\n    PyObject *args,\r\n    PyObject *kwargs,\r\n    PyObject **implementing_args,\r\n    PyObject **array_function_methods,\r\n    int num_implementing_args\r\n) {\r\n   // return result\r\n}\r\n```",
        "createdAt" : "2018-12-18T04:45:11Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2f529cef-7dd2-4a81-97ae-20a9c05663b3",
        "parentId" : "b40c745e-1d12-4e60-9337-ae0dae2349fa",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "I'm sympathetic to removing `goto`, but I still need to decref `types`. I guess I end up saving one or two goto statements by adding the helper function? That doesn't really seem to be worth it to me.\r\n\r\nI've already broken out most of the logical sub-components, so `array_implement_array_function` is pretty high level (for C code). I don't think `invoke_array_function()` is a particularly useful sub-component from a modularity perspective.",
        "createdAt" : "2018-12-18T05:19:04Z",
        "updatedAt" : "2018-12-19T19:23:31Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "7104a3e9fe989f43f20765d740cf22dabae563d4",
    "line" : 245,
    "diffHunk" : "@@ -1,1 +243,247 @@    }\n\n    /*\n     * Handle the typical case of no overrides. This is merely an optimization\n     * if some arguments are ndarray objects, but is also necessary if no"
  }
]