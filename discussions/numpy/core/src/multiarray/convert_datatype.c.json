[
  {
    "id" : "dfa40527-8033-4ce1-8e37-9a0250ad82bc",
    "prId" : 93,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8628af30-f129-439e-9164-b3a2aef47dd8",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Sure you don't want to check if an error was actually set?\n",
        "createdAt" : "2011-06-21T03:48:11Z",
        "updatedAt" : "2011-06-21T15:22:22Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "f98f3aba-2b84-460e-828f-10daa61333f4",
        "parentId" : "8628af30-f129-439e-9164-b3a2aef47dd8",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "sure\n",
        "createdAt" : "2011-06-21T14:40:17Z",
        "updatedAt" : "2011-06-21T15:22:23Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c1c7a86057e72490268f084a4e77d857997312b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +148,152 @@                    \"but no error set\");\n        }\n        return;\n    }\n"
  },
  {
    "id" : "8f488fcf-5a56-4d1e-a6be-f3826804ad0c",
    "prId" : 451,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b117b32e-def4-495a-9750-df818d2f8f32",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'm a bit concerned because the GIL now needs to be held in case of the deprecation message. We should really be returning an int instead of npy_bool, but it is probably too late to change that.\n",
        "createdAt" : "2012-09-20T23:27:30Z",
        "updatedAt" : "2012-09-20T23:27:30Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "16c27fdc-3e23-4086-8c98-bf06cb1fef34",
        "parentId" : "b117b32e-def4-495a-9750-df818d2f8f32",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "PyArray_CanCastTypeTo already requires the GIL -- it allocates and DECREFs dtype objects.\n",
        "createdAt" : "2012-09-21T13:32:12Z",
        "updatedAt" : "2012-09-21T13:32:12Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "c038fe59a8c355fee50a6c2ac236e750e0ad0ad5",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +520,524 @@NPY_NO_EXPORT npy_bool\nPyArray_CanCastTypeTo(PyArray_Descr *from, PyArray_Descr *to,\n                      NPY_CASTING casting)\n{\n    if (casting == NPY_INTERNAL_UNSAFE_CASTING_BUT_WARN_UNLESS_SAME_KIND) {"
  },
  {
    "id" : "5c8dfdd8-c18a-41d3-b7a9-48719ae26f79",
    "prId" : 3270,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6953067-adb7-474f-8dc8-f4c82ab691ba",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "To bad there isn't a cleaner way to do this.\n",
        "createdAt" : "2013-04-25T21:34:08Z",
        "updatedAt" : "2013-04-25T22:13:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "496f68336f8a434062f61725ca22025895185cd4",
    "line" : null,
    "diffHunk" : "@@ -1,1 +240,244 @@                         * items in an array.\n                         */\n                        list = PyArray_ToList(data_obj);\n                        if (list != NULL) {\n                            result = PyArray_GetArrayParamsFromObject("
  },
  {
    "id" : "4186ebeb-d00a-4835-b23a-4ea9fc008587",
    "prId" : 3270,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5695279-531b-43ea-87a5-c5fc119c0279",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I assume the division by 4 is correct here? Does this work if Python is built with 16 bit unicode?\n",
        "createdAt" : "2013-04-25T21:36:57Z",
        "updatedAt" : "2013-04-25T22:13:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ba67cfaf-3b1e-4309-8036-465a4c6e0ab2",
        "parentId" : "f5695279-531b-43ea-87a5-c5fc119c0279",
        "authorId" : "b0e7e584-a9be-4737-9003-4922807a34eb",
        "body" : "Not sure, but I think the same assumption is made about 15 lines further down after the 'case NPY_UNICODE' line.\n",
        "createdAt" : "2013-04-25T21:58:49Z",
        "updatedAt" : "2013-04-25T22:13:05Z",
        "lastEditedBy" : "b0e7e584-a9be-4737-9003-4922807a34eb",
        "tags" : [
        ]
      },
      {
        "id" : "46956073-94e7-4a0a-a745-3b313a47f1d2",
        "parentId" : "f5695279-531b-43ea-87a5-c5fc119c0279",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "It's hard to tell without context, I just recall another spot where there is a check on the python unicode size, which may even be different for python 3.3. Hmm, I've got a 2 byte version of 2.7 somewhere, I'll see what happens...\n",
        "createdAt" : "2013-04-25T22:49:24Z",
        "updatedAt" : "2013-04-25T22:49:24Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "333a3443-23b8-4270-b371-b017fe9b4f12",
        "parentId" : "f5695279-531b-43ea-87a5-c5fc119c0279",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Oh, man, total disaster. Not your fault though, happens in master too.\n\n```\nFAILED (KNOWNFAIL=5, SKIP=13, errors=2, failures=47)\n```\n\nLooks like an error slipped in somewhere along the line.\n",
        "createdAt" : "2013-04-25T23:00:26Z",
        "updatedAt" : "2013-04-25T23:00:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e4994192-92bc-4800-86aa-364c2503925c",
        "parentId" : "f5695279-531b-43ea-87a5-c5fc119c0279",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "nvm, clean install turned up two unrelated errors in master and your PR does the same, so this looks good.\n",
        "createdAt" : "2013-04-25T23:20:48Z",
        "updatedAt" : "2013-04-25T23:20:48Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "496f68336f8a434062f61725ca22025895185cd4",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +249,253 @@                            if (result == 0 && dtype != NULL) {\n                                if (flex_type_num == NPY_UNICODE) {\n                                    size = dtype->elsize / 4;\n                                }\n                                else {"
  },
  {
    "id" : "f83b69c0-2d6a-41c3-aa20-585d78263a04",
    "prId" : 3491,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bab35e3c-b473-4e07-a0ed-4cd27b7175df",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "`flex_dtype` type changed or was this a previous error?\n",
        "createdAt" : "2013-07-07T23:24:45Z",
        "updatedAt" : "2013-07-08T18:44:49Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "8649c077-0af8-4148-b5c2-343ad86cca34",
        "parentId" : "bab35e3c-b473-4e07-a0ed-4cd27b7175df",
        "authorId" : "b0e7e584-a9be-4737-9003-4922807a34eb",
        "body" : "This was a previous error that my first set of tests didn't catch.\n",
        "createdAt" : "2013-07-08T17:42:08Z",
        "updatedAt" : "2013-07-08T18:44:49Z",
        "lastEditedBy" : "b0e7e584-a9be-4737-9003-4922807a34eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "97372dbe877f19ae73a070b05c380cfea0871dc0",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +256,260 @@                            result = PyArray_GetArrayParamsFromObject(\n                                    list,\n                                    *flex_dtype,\n                                    0, &dtype,\n                                    &ndim, dims, &arr, NULL);"
  },
  {
    "id" : "45093929-20e2-475e-ad8b-7389d2345f65",
    "prId" : 8862,
    "prUrl" : "https://github.com/numpy/numpy/pull/8862#pullrequestreview-29839225",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "732df183-bb7d-420f-b592-fdc7a1dc99b3",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "nitpick: I think I'd prefer the static variable to be first",
        "createdAt" : "2017-03-29T20:50:09Z",
        "updatedAt" : "2017-03-29T20:50:09Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "388487206b39dac3da66fb8d2d8daabf5524f57c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1917,1921 @@    char *zeroval;\n    int ret, storeflags;\n    static PyObject * zero_obj = NULL;\n\n    if (_check_object_rec(PyArray_DESCR(arr)) < 0) {"
  },
  {
    "id" : "313d858d-64b4-4fad-a180-5754281798c4",
    "prId" : 8862,
    "prUrl" : "https://github.com/numpy/numpy/pull/8862#pullrequestreview-30080695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7eb876c8-87f4-408c-bb5a-666fa5004780",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Same question as before - what goes wrong if we remove this special case?",
        "createdAt" : "2017-03-29T20:52:37Z",
        "updatedAt" : "2017-03-29T20:52:53Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "43ce9d6f-8145-4905-957f-d8d27040e76f",
        "parentId" : "7eb876c8-87f4-408c-bb5a-666fa5004780",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "we ignore the fact that we could not allocate a PyIntOjbect? That seems dangerous, and bad practice. OTOH, if this even occurs we have bigger problems than just this allocation ...",
        "createdAt" : "2017-03-29T21:11:38Z",
        "updatedAt" : "2017-03-29T21:11:38Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "9e138035-70d7-4c89-bbb5-100d67343656",
        "parentId" : "7eb876c8-87f4-408c-bb5a-666fa5004780",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "That comment was directed at `if (PyArray_ISOBJECT(arr)) {`, not the lines above it. What's special about `OBJECT_setitem` that means we don't want to call it below?",
        "createdAt" : "2017-03-29T21:13:08Z",
        "updatedAt" : "2017-03-29T21:16:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ec1133ec-2700-40f6-9262-936a49167c70",
        "parentId" : "7eb876c8-87f4-408c-bb5a-666fa5004780",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "I'm not sure I follow. AFAIK ``PyArray_DESCR(arr)->f->setitem(one_obj, oneval, arr)`` will assume ``oneval`` is a valid pointer to a block of memory large enough to hold sizeof(PyIntObject), but it is actually a ``void* NULL`` at this point, with no valid content. So ``setitem`` will effectively call  ``memcpy(oneval, one_obj, sizeof(PyIntObject)`` which will attempt to copy around 32 bytes into a NULL pointer.",
        "createdAt" : "2017-03-29T21:24:42Z",
        "updatedAt" : "2017-03-29T21:24:42Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "43207ea3-0d03-475f-b1ee-d007593869e9",
        "parentId" : "7eb876c8-87f4-408c-bb5a-666fa5004780",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> `[zero]val` is a valid pointer to a block of memory large enough to hold `sizeof(PyIntObject)`, but it is actually a `void* NULL`\r\n\r\ncitation needed. I see a `zeroval = PyDataMem_NEW(PyArray_DESCR(arr)->elsize);` on one of the lines above. Obviously it's not NULL, else the memcpy here would fail.",
        "createdAt" : "2017-03-29T21:54:33Z",
        "updatedAt" : "2017-03-29T21:55:11Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3c03385d-5a19-4d7d-86c6-52ec9f118528",
        "parentId" : "7eb876c8-87f4-408c-bb5a-666fa5004780",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "My analysis was wrong, yours was more correct. But in the end, we cannot use ``setitem``, when I tried I got a segfault in ``test_simple_object`` from ``test_multiarray``.\r\n\r\nTheoretically ``PyArray_DESCR(arr)->f->setitem(one_obj, oneval, arr)``, which ends up on ``OBJECT_setitem``, should work, although it would call ``Py_INCREF`` on the ``PyObject*`` so we would need a matching ``Py_DECREF`` after the call, who would do it and when?\r\n\r\nUnfortunately the current implementation crashes since ``OBJECT_setitem`` calls ``Py_XDECREF`` on ``oneval`` (or ``zeroval``) and since the memory was allocated with ``malloc`` via ``PyDataMem_New`` it is not zeroed out, so the ``Py_XDECREF`` crashes the interpreter. Perhaps this is why the original implementer did not call ``setitem``, in addition to the concern about the extra ``Py_INCREF`` needing a matching call somewhere.\r\n\r\n ",
        "createdAt" : "2017-03-30T18:49:42Z",
        "updatedAt" : "2017-03-30T18:49:42Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "388487206b39dac3da66fb8d2d8daabf5524f57c",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1934,1938 @@        }\n    }\n    if (PyArray_ISOBJECT(arr)) {\n        /* XXX this is dangerous, the caller probably is not\n           aware that zeroval is actually a static PyObject*"
  },
  {
    "id" : "c6d9c6c5-03aa-4961-b802-ef7adc9c192c",
    "prId" : 10553,
    "prUrl" : "https://github.com/numpy/numpy/pull/10553#pullrequestreview-95668295",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d002b40a-16fa-40cf-a3f4-1b3d1a1dbcfa",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I don't think this NULL check is needed.",
        "createdAt" : "2018-02-11T20:23:56Z",
        "updatedAt" : "2018-02-11T20:23:56Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "e74c7166-ba31-443f-822c-12de9acbec70",
        "parentId" : "d002b40a-16fa-40cf-a3f4-1b3d1a1dbcfa",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "oh wait it is, I forgot this is a loop\r\n",
        "createdAt" : "2018-02-11T20:24:56Z",
        "updatedAt" : "2018-02-11T20:24:56Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "860cc39dbf1e1b40004c7a128c9c83bf7671b278",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +1327,1331 @@        ret = tmp;\n        if (ret == NULL) {\n            return NULL;\n        }\n    }"
  },
  {
    "id" : "392619de-9602-42dc-9d07-290b5adce30b",
    "prId" : 10555,
    "prUrl" : "https://github.com/numpy/numpy/pull/10555#pullrequestreview-95624733",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82f7fd09-1851-410d-b167-c998f850f4d3",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Oops, this is causing travis to fail - guess I should have left these on separate lines (my local build doesn't emit the warnings travis does)",
        "createdAt" : "2018-02-10T06:33:25Z",
        "updatedAt" : "2018-02-10T06:33:26Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d25e85f3-3955-4f7c-ab81-32118ff8645c",
        "parentId" : "82f7fd09-1851-410d-b167-c998f850f4d3",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "oh I misread, I thought circleci failed",
        "createdAt" : "2018-02-10T15:17:41Z",
        "updatedAt" : "2018-02-10T15:17:41Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bce2be74f228684ca2895ad02b63953f37e2a9d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1766,1770 @@            sizeof(*all_dtypes) * (narrs + ndtypes));\n        if (all_dtypes == NULL) {\n            return PyErr_NoMemory();\n        }\n        for (i = 0; i < narrs; ++i) {"
  },
  {
    "id" : "eb992e59-bfa1-45e7-8e06-d5bbdcb06bf3",
    "prId" : 12032,
    "prUrl" : "https://github.com/numpy/numpy/pull/12032#pullrequestreview-159171517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e57695f7-966f-4bc1-ba35-060cb60b0ff8",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Put the decref on this line, and then you can omit it below.",
        "createdAt" : "2018-09-26T07:27:58Z",
        "updatedAt" : "2018-09-26T17:24:24Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "fcacb7b6-b8e9-4a04-bd7f-076d8714ef50",
        "parentId" : "e57695f7-966f-4bc1-ba35-060cb60b0ff8",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "done",
        "createdAt" : "2018-09-26T19:55:25Z",
        "updatedAt" : "2018-09-26T19:55:25Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "df68e6485e8a9cedb784293ca5d704aba0cf3dbc",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +2074,2078 @@            newtype = PyArray_DescrFromObject(otmp, intype);\n            Py_DECREF(otmp);\n            Py_XDECREF(intype);\n            if (newtype == NULL) {\n                goto fail;"
  },
  {
    "id" : "c3fc7768-dc54-456f-b7c9-52fc12ade16d",
    "prId" : 12032,
    "prUrl" : "https://github.com/numpy/numpy/pull/12032#pullrequestreview-159171467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b2d9da4-5b93-45e1-9da5-66fa9edbf967",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Same again - you're done with the object already by this line, so can decref it immediately",
        "createdAt" : "2018-09-26T07:28:21Z",
        "updatedAt" : "2018-09-26T17:24:24Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "cf12d521-fbfe-4fc5-bda9-f06887254900",
        "parentId" : "0b2d9da4-5b93-45e1-9da5-66fa9edbf967",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "done",
        "createdAt" : "2018-09-26T19:55:17Z",
        "updatedAt" : "2018-09-26T19:55:17Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "df68e6485e8a9cedb784293ca5d704aba0cf3dbc",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +2084,2088 @@            newtype = PyArray_DescrFromObject(otmp, stype);\n            Py_DECREF(otmp);\n            Py_XDECREF(stype);\n            if (newtype == NULL) {\n                goto fail;"
  },
  {
    "id" : "499ce513-e33f-4d6c-9af0-02297695deae",
    "prId" : 12234,
    "prUrl" : "https://github.com/numpy/numpy/pull/12234#pullrequestreview-192143867",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d72f27fc-c2cc-41f2-9e0d-40cc0fc0192e",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Look like there should be a DECREF right aftr this call. Also removes the need for the decref's later.",
        "createdAt" : "2019-01-04T10:50:26Z",
        "updatedAt" : "2019-01-14T13:08:29Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "b5713eaf-7978-45be-9185-9f7516c44afb",
        "parentId" : "d72f27fc-c2cc-41f2-9e0d-40cc0fc0192e",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "adopted",
        "createdAt" : "2019-01-14T10:19:50Z",
        "updatedAt" : "2019-01-14T13:08:30Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "7733ac9e-6ddb-4c52-accc-83b4a0cea813",
        "parentId" : "d72f27fc-c2cc-41f2-9e0d-40cc0fc0192e",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I am confused what I had thought here, but the code looks right...",
        "createdAt" : "2019-01-14T12:47:08Z",
        "updatedAt" : "2019-01-14T13:08:30Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "34a4bce4-35a0-437c-8f40-08a5ca44496c",
        "parentId" : "d72f27fc-c2cc-41f2-9e0d-40cc0fc0192e",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "This was the segfault. When removing the `retval = flex_dtype` at the top of the function and moving it to an else clause at the end, I didn't take into account the implied `else` cases in this block. You had suggested moving the `Py_DECREF(flex_type)` out to here, but instead I moved `retval = flex_type` here and left the `Py_DECREF`s in place.",
        "createdAt" : "2019-01-14T13:12:36Z",
        "updatedAt" : "2019-01-14T13:12:36Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "5db21b862ac7637a2eaeff9c57256fea4874e44a",
    "line" : 176,
    "diffHunk" : "@@ -1,1 +332,336 @@    else if (flex_type_num == NPY_DATETIME ||\n                flex_type_num == NPY_TIMEDELTA) {\n        meta = get_datetime_metadata_from_dtype(flex_dtype);\n        retval = flex_dtype;\n        if (meta == NULL) {"
  }
]