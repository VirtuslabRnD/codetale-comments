[
  {
    "id" : "c9fc827d-a1fc-4ee9-b60d-008fc46f9114",
    "prId" : 372,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6073978-34d3-4bc0-86f5-853495a3a976",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Can't say I'm happy with PyUnicode_Kind being changed to be a size, but that is a Python issue...\n",
        "createdAt" : "2012-08-03T16:22:41Z",
        "updatedAt" : "2012-08-03T18:46:46Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2ac38f09ff258339ef44572a3abba02019e1f55",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2594,2598 @@    if (itemsize == 0) { /* unicode */\n#if PY_VERSION_HEX >= 0x03030000\n        itemsize = PyUnicode_GetLength(robj) * PyUnicode_KIND(robj);\n#else\n        itemsize = ((PyUnicodeObject *)robj)->length * sizeof(Py_UNICODE);"
  },
  {
    "id" : "00107def-db2e-4cf6-b826-2bffafc569c5",
    "prId" : 4177,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66848e29-4eef-4934-84dc-f4189264fcde",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Where does this get freed?\n",
        "createdAt" : "2014-01-09T03:06:22Z",
        "updatedAt" : "2014-01-09T03:06:22Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a07cb587-2a87-489f-b323-f1b34b64c2f1",
        "parentId" : "66848e29-4eef-4934-84dc-f4189264fcde",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "via the tp_free slot in gentype_dealloc\n",
        "createdAt" : "2014-01-09T18:24:33Z",
        "updatedAt" : "2014-01-09T18:24:33Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "6834b3a2da002eccc279a9e9a594713a467cc483",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +112,116 @@    const size_t size = _PyObject_VAR_SIZE(type, nitems + 1);\n\n    obj = (PyObject *)PyObject_Malloc(size);\n    memset(obj, 0, size);\n    if (type->tp_itemsize == 0) {"
  },
  {
    "id" : "66785096-5e49-4c15-88dd-1962c26d30b3",
    "prId" : 4248,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67c75a6b-bc33-4c3b-ad3a-39407c81224c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Does this inherit `tp_free`?\n",
        "createdAt" : "2014-02-02T05:18:08Z",
        "updatedAt" : "2014-02-02T05:18:08Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "fc873711-9f9f-48da-864d-6377b11772e8",
        "parentId" : "67c75a6b-bc33-4c3b-ad3a-39407c81224c",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "`tp_alloc` is `NULL` so `tp_free` should be too so it inherits from whatever pair of alloc/free functions was used\nI think this was actually a hunk accidentally left in from testing my original patch.\n",
        "createdAt" : "2014-02-02T15:40:42Z",
        "updatedAt" : "2014-02-02T15:40:42Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9ebefec819ec3c193d4763d9f995c053fee58a3",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +4022,4026 @@\n    PyStringArrType_Type.tp_alloc = NULL;\n    PyStringArrType_Type.tp_free = NULL;\n\n    PyStringArrType_Type.tp_repr = stringtype_repr;"
  },
  {
    "id" : "b495d385-37fd-4976-a6d9-8387222f9644",
    "prId" : 4349,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f2029bd-d03e-4a1d-99ac-3564bdc274c7",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Bit surprising gentype_free hasn't the right type.\n",
        "createdAt" : "2014-02-22T15:30:57Z",
        "updatedAt" : "2014-02-22T15:30:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "d1e4e772-9403-48ae-bcb6-ab7983742902",
        "parentId" : "5f2029bd-d03e-4a1d-99ac-3564bdc274c7",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "its PyObject\\* vs void*, we can move the cast into the function too, but its only used in these two spots so it doesn't matter\n",
        "createdAt" : "2014-02-22T15:32:08Z",
        "updatedAt" : "2014-02-22T15:32:08Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "a5fe308c-e668-4ab1-9611-3ef1ad5487ca",
        "parentId" : "5f2029bd-d03e-4a1d-99ac-3564bdc274c7",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Would be cleaner though...\n",
        "createdAt" : "2014-02-22T16:10:03Z",
        "updatedAt" : "2014-02-22T16:10:03Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4dcfcc5f58140c5f09fde8fae90720e32f7d3096",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +3989,3993 @@    PyGenericArrType_Type.tp_new = NULL;\n    PyGenericArrType_Type.tp_alloc = gentype_alloc;\n    PyGenericArrType_Type.tp_free = (freefunc)gentype_free;\n    PyGenericArrType_Type.tp_repr = gentype_repr;\n    PyGenericArrType_Type.tp_str = gentype_str;"
  },
  {
    "id" : "882cb6ae-8d40-4949-b2eb-f8be6a58545a",
    "prId" : 5056,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55ecfd14-cddc-4da2-a087-c5233472d97a",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I guess a hash table wouldn't be any faster here.\n",
        "createdAt" : "2014-09-07T14:02:09Z",
        "updatedAt" : "2014-09-07T14:02:09Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f550591567b6643c7e7d0c897683f8319032ed1",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +4288,4292 @@\nNPY_NO_EXPORT int\nget_typeobj_idx(PyTypeObject * obj)\n{\n    npy_intp imin = 0, imax = sizeof(typeobjects) / sizeof(typeobjects[0]) - 1;"
  },
  {
    "id" : "6fbea245-6732-4bcc-937f-8b7b226ea870",
    "prId" : 5947,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db7af53c-9155-4ee8-8087-a4d0582677b8",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could cache the empty tuple in an static variable. Probably does not make much difference in this function, so perhaps better to leave it to a later micro-opimizatiion.\n",
        "createdAt" : "2015-06-10T18:10:18Z",
        "updatedAt" : "2015-06-11T03:02:18Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "df959ed7c45a923c59b6bb3ebbb4bc0b7c73df58",
    "line" : 145,
    "diffHunk" : "@@ -1,1 +1728,1732 @@\n    /* 2. Fill the resulting array using setitem */\n    emptytuple = PyTuple_New(0);\n    if (PyObject_SetItem(arr_field, emptytuple, value) < 0) {\n        Py_DECREF(arr_field);"
  },
  {
    "id" : "b663205d-e0ae-46cf-b373-4f44c7e749c6",
    "prId" : 7439,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "532367eb-f4b1-47fb-ba27-f2896f5a2e25",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Note that `__repeat__` has been deprecated since 2.7.\n",
        "createdAt" : "2016-03-24T18:39:53Z",
        "updatedAt" : "2016-03-24T18:39:53Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "582600415d966dbfb7abafd3151415f59c6c422d",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +269,273 @@    /*\n     * If the other object supports sequence repeat and not number multiply\n     * we should call sequence repeat to support e.g. list repeat by numpy\n     * scalars (they may be converted to ndarray otherwise).\n     * A python defined class will always only have the nb_multiply slot and"
  },
  {
    "id" : "7c4bda55-2e30-46ea-9fed-f3cac9dbf81d",
    "prId" : 7839,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1299878f-342a-49b6-9a90-e8771664b0a1",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "On my phone so haven't looked at the context here, but do I infer correctly from the commit message that this is just filling in some arbitrary pointer here that will be overwritten later? If so then there should be a comment to that effect here, because otherwise to a naive reader it looks like there's some actual reason why gentype_as_number will work.\n",
        "createdAt" : "2016-07-15T14:16:23Z",
        "updatedAt" : "2016-07-18T16:31:16Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "049c7506-3fd7-4bf4-9e0c-db80f08edbe0",
        "parentId" : "1299878f-342a-49b6-9a90-e8771664b0a1",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "On 15/07/16 09:16, Nathaniel J. Smith wrote:\n\n> In numpy/core/src/multiarray/scalartypes.c.src \n> https://github.com/numpy/numpy/pull/7839#discussion_r70979857:\n> \n> > @@ -4088,6 +4088,7 @@ initialize_numeric_types(void)\n> >       \\* #NAME = Byte, Short, Int, Long, LongLong, UByte, UShort,\n> >       \\*         UInt, ULong, ULongLong#\n> >       */\n> > -    @name@_arrtype_as_number = gentype_as_number;\n> \n> On my phone so haven't looked at the context here, but do I infer \n> correctly from the commit message that this is just filling in some \n> arbitrary pointer here that will be overwritten later? If so then \n> there should be a comment to that effect here, because otherwise to a \n> naive reader it looks like there's some actual reason why \n> gentype_as_number will work.\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub \n> https://github.com/numpy/numpy/pull/7839/files/a4087dad3b1f1c7dcfb9db33dd8ff53612ec468a#r70979857, \n> or mute the thread \n> https://github.com/notifications/unsubscribe-auth/AAySZ4-nEEUPH1vCV3_KCtn2fQ4ZDGnwks5qV5Y_gaJpZM4JNa6j.\n> \n> It is not arbitrary, the pointer is from the base class, i.e. until the \n> NULL functions are overloaded, the gentype functions  be called.\n> So indeed, they will work and are exactly the functions called until \n> overloaded.\n> Note later in the same function, tp_richcompare is likewise set to \n> gentype_richcompare.\n\nMatti\n",
        "createdAt" : "2016-07-15T14:42:27Z",
        "updatedAt" : "2016-07-18T16:31:16Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "f0943870-6e53-41ba-b2ee-85feb5a8e4c3",
        "parentId" : "1299878f-342a-49b6-9a90-e8771664b0a1",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "FYI as a rule of thumb, when replying to github messages from your email client then you're best off top-posting, because github's email parser is kinda terrible. (See the github post that this is replying to for an example.)\n",
        "createdAt" : "2016-07-19T01:50:03Z",
        "updatedAt" : "2016-07-19T01:50:03Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab4f8284086a74c372802b62bb276fabb05308c7",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +4090,4094 @@     *         UInt, ULong, ULongLong#\n     */\n    @name@_arrtype_as_number = gentype_as_number;\n    Py@NAME@ArrType_Type.tp_as_number = &@name@_arrtype_as_number;\n    Py@NAME@ArrType_Type.tp_as_number->nb_index = (unaryfunc)@name@_index;"
  },
  {
    "id" : "d66d5733-cee2-4efd-aa72-24fc0e3d4eb9",
    "prId" : 8806,
    "prUrl" : "https://github.com/numpy/numpy/pull/8806#pullrequestreview-28110009",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c45fd90b-9aee-405b-aa2a-b2adae0ca1f3",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "It's not entirely clear why this function exists - it seems to re-implement the op/rop dispatch that `PyNumber_Power` handles?",
        "createdAt" : "2017-03-21T13:39:36Z",
        "updatedAt" : "2017-03-21T13:39:37Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7203f964a5a8f9b311ea633678362d782702472",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +151,155 @@static PyObject *\ngentype_power(PyObject *m1, PyObject *m2, PyObject *modulo)\n{\n    PyObject *arr, *ret, *arg2;\n    char *msg=\"unsupported operand type(s) for ** or pow()\";"
  },
  {
    "id" : "eb0fa670-d578-4103-8a1a-e8bf05172dd0",
    "prId" : 8983,
    "prUrl" : "https://github.com/numpy/numpy/pull/8983#pullrequestreview-38495262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2100613-3ccc-40bd-a418-9183ef89059e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Now that this is much simpler, can we add a `genint_type_repr` that does the same thing but calls `PyObject_Repr`, for completeness?",
        "createdAt" : "2017-05-16T19:13:38Z",
        "updatedAt" : "2017-05-17T03:35:40Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b49a8f8a-153b-49e6-8428-972aa1e445e4",
        "parentId" : "b2100613-3ccc-40bd-a418-9183ef89059e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Oops, I forgot this was for all types, not just int types types. Guess it doesn't do any harm though (and on python 2, makes a distinction between longs and ints)",
        "createdAt" : "2017-05-16T19:28:34Z",
        "updatedAt" : "2017-05-17T03:35:40Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3b853d79-ac64-4178-8328-573231284efc",
        "parentId" : "b2100613-3ccc-40bd-a418-9183ef89059e",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Hmm maybe that's bad though. I want to preserve the old int-printing behavior as much as possible.\r\n\r\nI don't have a 32-bit system to test on, but this means `repr(np.int64(2**63-1))` will now have an extra `L` on that arch, right ?",
        "createdAt" : "2017-05-16T19:38:15Z",
        "updatedAt" : "2017-05-17T03:35:40Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "a5593b67-b009-423a-b6c4-e1a285e7bd45",
        "parentId" : "b2100613-3ccc-40bd-a418-9183ef89059e",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "OK, yeah it does. I'd like to to remove the `genint_repr` here, if you agree.",
        "createdAt" : "2017-05-16T19:42:12Z",
        "updatedAt" : "2017-05-17T03:35:40Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "e2a2bf3f-09b4-4b60-8ae2-9203a96c1530",
        "parentId" : "b2100613-3ccc-40bd-a418-9183ef89059e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yep, it will show that `L`, which you already see with `np.int64(1).item()`.\r\n\r\nSo yeah, undo that suggestion - sorry. Probably worth adding a comment to where `repr` is set then, indicating that we stick with str to avoid the trailing `L`.\r\n\r\nAlso, re commit message - we're not really \"fixing\" int scalars here, are we?",
        "createdAt" : "2017-05-16T19:55:58Z",
        "updatedAt" : "2017-05-17T03:35:40Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2b06fe879f5b2b14de3dad0f517561a0c815df0",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +362,366 @@    }\n\n    item_str = PyObject_Str(item);\n    Py_DECREF(item);\n    return item_str;"
  },
  {
    "id" : "e19ca46c-5c08-4c69-b135-62c70a6ef9a7",
    "prId" : 9941,
    "prUrl" : "https://github.com/numpy/numpy/pull/9941#pullrequestreview-74272767",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7c4e2e1-0177-49cc-b1a8-f1a557a6a004",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Could do with a comment explaining what this function is for - \"either\" isn't super clear",
        "createdAt" : "2017-11-05T05:33:00Z",
        "updatedAt" : "2017-11-05T05:33:11Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50f4725c8a0c2e8b71dd9c64c5fb103f5d6c987",
    "line" : 211,
    "diffHunk" : "@@ -1,1 +730,734 @@\nstatic PyObject *\n@name@type_@kind@_either(npy_@name@ val, TrimMode trim_pos, TrimMode trim_sci,\n                         npy_bool sign)\n{"
  },
  {
    "id" : "beda1689-96b9-431f-a478-dda4f9f65c6f",
    "prId" : 9941,
    "prUrl" : "https://github.com/numpy/numpy/pull/9941#pullrequestreview-74272780",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "840e43b0-2fe2-4330-a1bb-44e21d59666c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Is this special compared to the other ones? Why?",
        "createdAt" : "2017-11-05T05:34:29Z",
        "updatedAt" : "2017-11-05T05:34:29Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50f4725c8a0c2e8b71dd9c64c5fb103f5d6c987",
    "line" : 325,
    "diffHunk" : "@@ -1,1 +806,810 @@\nstatic PyObject *\nhalftype_@kind@(PyObject *self)\n{\n    npy_half val = ((PyHalfScalarObject *)self)->obval;"
  },
  {
    "id" : "4a354d14-a298-4cc5-8056-8722c8c323fe",
    "prId" : 9967,
    "prUrl" : "https://github.com/numpy/numpy/pull/9967#pullrequestreview-74296366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf2006de-deac-4ef4-9167-c04043ca5c9e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This repeat is way clearer expressed as two repeats",
        "createdAt" : "2017-11-05T22:29:33Z",
        "updatedAt" : "2017-11-05T23:26:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b4ec2aa559cdd8b838844893efa56442132e1ab",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +821,825 @@ * #CHAR = ,C#\n * #POST = ,.real#\n */\nstatic PyObject *\n@char@longdoubletype_float(PyObject *self)"
  },
  {
    "id" : "d1ea2508-4d40-43c9-8708-12190e5c9c15",
    "prId" : 9967,
    "prUrl" : "https://github.com/numpy/numpy/pull/9967#pullrequestreview-74296366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4768f2a-d464-422c-87c7-7a58720e9200",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is where things need to change to fix #9964, but lets leave that to a future PR.",
        "createdAt" : "2017-11-05T22:30:19Z",
        "updatedAt" : "2017-11-05T23:26:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b4ec2aa559cdd8b838844893efa56442132e1ab",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +840,844 @@     * but this would need some more work...\n     */\n    return PyLong_FromDouble((double) val);\n}\n"
  },
  {
    "id" : "dcca6f8f-f435-4124-8fc6-5d5bef714c59",
    "prId" : 9967,
    "prUrl" : "https://github.com/numpy/numpy/pull/9967#pullrequestreview-74296366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9791f2a-3813-4d68-8ac5-594e258abde7",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is deliberate, as nb_int should try to return `int` on py2, but `long` on py3. I'm not sure it makes a difference externaly (I suspect python deals with either return value), but it's more consistent with how `longobject` is implemented.",
        "createdAt" : "2017-11-05T22:32:13Z",
        "updatedAt" : "2017-11-06T01:44:30Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b4ec2aa559cdd8b838844893efa56442132e1ab",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +4113,4117 @@    @char@longdoubletype_as_number.nb_float = @char@longdoubletype_float;\n#if defined(NPY_PY3K)\n    @char@longdoubletype_as_number.nb_int  = @char@longdoubletype_long;\n#else\n    @char@longdoubletype_as_number.nb_int  = @char@longdoubletype_int;"
  },
  {
    "id" : "07dcc6a5-9f6c-4014-8301-61b02e4e1556",
    "prId" : 9967,
    "prUrl" : "https://github.com/numpy/numpy/pull/9967#pullrequestreview-74296366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9832ba2-2b5b-48b8-bf9b-ecc1635707f2",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "It's far more readable and concise to iterate over the types here, rather than the members.",
        "createdAt" : "2017-11-05T22:32:51Z",
        "updatedAt" : "2017-11-05T23:26:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b4ec2aa559cdd8b838844893efa56442132e1ab",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +4123,4127 @@    Py@CHAR@LongDoubleArrType_Type.tp_as_number = &@char@longdoubletype_as_number;\n    Py@CHAR@LongDoubleArrType_Type.tp_repr = @char@longdoubletype_repr;\n    Py@CHAR@LongDoubleArrType_Type.tp_str = @char@longdoubletype_str;\n\n    /**end repeat**/"
  },
  {
    "id" : "756adbfa-1d6b-4b44-87ff-1ba67b8410c8",
    "prId" : 10034,
    "prUrl" : "https://github.com/numpy/numpy/pull/10034#pullrequestreview-77630253",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "feb2ff45-2405-4057-948c-01b635b9b6dd",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Four space indents. Did some hard tabs slip in?",
        "createdAt" : "2017-11-19T00:55:24Z",
        "updatedAt" : "2017-11-19T00:55:24Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f539150a455069e54da838373d2e5254ad1e946c",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +844,848 @@    else {\n        char re[64], im[64];\n        if (npy_isfinite(val.real)) {\n                PyOS_snprintf(format, sizeof(format), _FMT1, @NAME@PREC_@KIND@);\n                res = NumPyOS_ascii_format@suff@(re, sizeof(re), format,"
  }
]