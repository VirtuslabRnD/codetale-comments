[
  {
    "id" : "c9fc827d-a1fc-4ee9-b60d-008fc46f9114",
    "prId" : 372,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6073978-34d3-4bc0-86f5-853495a3a976",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Can't say I'm happy with PyUnicode_Kind being changed to be a size, but that is a Python issue...\n",
        "createdAt" : "2012-08-03T16:22:41Z",
        "updatedAt" : "2012-08-03T18:46:46Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2ac38f09ff258339ef44572a3abba02019e1f55",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2594,2598 @@    if (itemsize == 0) { /* unicode */\n#if PY_VERSION_HEX >= 0x03030000\n        itemsize = PyUnicode_GetLength(robj) * PyUnicode_KIND(robj);\n#else\n        itemsize = ((PyUnicodeObject *)robj)->length * sizeof(Py_UNICODE);"
  },
  {
    "id" : "00107def-db2e-4cf6-b826-2bffafc569c5",
    "prId" : 4177,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66848e29-4eef-4934-84dc-f4189264fcde",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Where does this get freed?\n",
        "createdAt" : "2014-01-09T03:06:22Z",
        "updatedAt" : "2014-01-09T03:06:22Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a07cb587-2a87-489f-b323-f1b34b64c2f1",
        "parentId" : "66848e29-4eef-4934-84dc-f4189264fcde",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "via the tp_free slot in gentype_dealloc\n",
        "createdAt" : "2014-01-09T18:24:33Z",
        "updatedAt" : "2014-01-09T18:24:33Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "6834b3a2da002eccc279a9e9a594713a467cc483",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +112,116 @@    const size_t size = _PyObject_VAR_SIZE(type, nitems + 1);\n\n    obj = (PyObject *)PyObject_Malloc(size);\n    memset(obj, 0, size);\n    if (type->tp_itemsize == 0) {"
  },
  {
    "id" : "66785096-5e49-4c15-88dd-1962c26d30b3",
    "prId" : 4248,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67c75a6b-bc33-4c3b-ad3a-39407c81224c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Does this inherit `tp_free`?\n",
        "createdAt" : "2014-02-02T05:18:08Z",
        "updatedAt" : "2014-02-02T05:18:08Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "fc873711-9f9f-48da-864d-6377b11772e8",
        "parentId" : "67c75a6b-bc33-4c3b-ad3a-39407c81224c",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "`tp_alloc` is `NULL` so `tp_free` should be too so it inherits from whatever pair of alloc/free functions was used\nI think this was actually a hunk accidentally left in from testing my original patch.\n",
        "createdAt" : "2014-02-02T15:40:42Z",
        "updatedAt" : "2014-02-02T15:40:42Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9ebefec819ec3c193d4763d9f995c053fee58a3",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +4022,4026 @@\n    PyStringArrType_Type.tp_alloc = NULL;\n    PyStringArrType_Type.tp_free = NULL;\n\n    PyStringArrType_Type.tp_repr = stringtype_repr;"
  },
  {
    "id" : "b495d385-37fd-4976-a6d9-8387222f9644",
    "prId" : 4349,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f2029bd-d03e-4a1d-99ac-3564bdc274c7",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Bit surprising gentype_free hasn't the right type.\n",
        "createdAt" : "2014-02-22T15:30:57Z",
        "updatedAt" : "2014-02-22T15:30:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "d1e4e772-9403-48ae-bcb6-ab7983742902",
        "parentId" : "5f2029bd-d03e-4a1d-99ac-3564bdc274c7",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "its PyObject\\* vs void*, we can move the cast into the function too, but its only used in these two spots so it doesn't matter\n",
        "createdAt" : "2014-02-22T15:32:08Z",
        "updatedAt" : "2014-02-22T15:32:08Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "a5fe308c-e668-4ab1-9611-3ef1ad5487ca",
        "parentId" : "5f2029bd-d03e-4a1d-99ac-3564bdc274c7",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Would be cleaner though...\n",
        "createdAt" : "2014-02-22T16:10:03Z",
        "updatedAt" : "2014-02-22T16:10:03Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4dcfcc5f58140c5f09fde8fae90720e32f7d3096",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +3989,3993 @@    PyGenericArrType_Type.tp_new = NULL;\n    PyGenericArrType_Type.tp_alloc = gentype_alloc;\n    PyGenericArrType_Type.tp_free = (freefunc)gentype_free;\n    PyGenericArrType_Type.tp_repr = gentype_repr;\n    PyGenericArrType_Type.tp_str = gentype_str;"
  },
  {
    "id" : "882cb6ae-8d40-4949-b2eb-f8be6a58545a",
    "prId" : 5056,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55ecfd14-cddc-4da2-a087-c5233472d97a",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I guess a hash table wouldn't be any faster here.\n",
        "createdAt" : "2014-09-07T14:02:09Z",
        "updatedAt" : "2014-09-07T14:02:09Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f550591567b6643c7e7d0c897683f8319032ed1",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +4288,4292 @@\nNPY_NO_EXPORT int\nget_typeobj_idx(PyTypeObject * obj)\n{\n    npy_intp imin = 0, imax = sizeof(typeobjects) / sizeof(typeobjects[0]) - 1;"
  },
  {
    "id" : "6fbea245-6732-4bcc-937f-8b7b226ea870",
    "prId" : 5947,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db7af53c-9155-4ee8-8087-a4d0582677b8",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could cache the empty tuple in an static variable. Probably does not make much difference in this function, so perhaps better to leave it to a later micro-opimizatiion.\n",
        "createdAt" : "2015-06-10T18:10:18Z",
        "updatedAt" : "2015-06-11T03:02:18Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "df959ed7c45a923c59b6bb3ebbb4bc0b7c73df58",
    "line" : 145,
    "diffHunk" : "@@ -1,1 +1728,1732 @@\n    /* 2. Fill the resulting array using setitem */\n    emptytuple = PyTuple_New(0);\n    if (PyObject_SetItem(arr_field, emptytuple, value) < 0) {\n        Py_DECREF(arr_field);"
  },
  {
    "id" : "b663205d-e0ae-46cf-b373-4f44c7e749c6",
    "prId" : 7439,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "532367eb-f4b1-47fb-ba27-f2896f5a2e25",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Note that `__repeat__` has been deprecated since 2.7.\n",
        "createdAt" : "2016-03-24T18:39:53Z",
        "updatedAt" : "2016-03-24T18:39:53Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "582600415d966dbfb7abafd3151415f59c6c422d",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +269,273 @@    /*\n     * If the other object supports sequence repeat and not number multiply\n     * we should call sequence repeat to support e.g. list repeat by numpy\n     * scalars (they may be converted to ndarray otherwise).\n     * A python defined class will always only have the nb_multiply slot and"
  },
  {
    "id" : "7c4bda55-2e30-46ea-9fed-f3cac9dbf81d",
    "prId" : 7839,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1299878f-342a-49b6-9a90-e8771664b0a1",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "On my phone so haven't looked at the context here, but do I infer correctly from the commit message that this is just filling in some arbitrary pointer here that will be overwritten later? If so then there should be a comment to that effect here, because otherwise to a naive reader it looks like there's some actual reason why gentype_as_number will work.\n",
        "createdAt" : "2016-07-15T14:16:23Z",
        "updatedAt" : "2016-07-18T16:31:16Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "049c7506-3fd7-4bf4-9e0c-db80f08edbe0",
        "parentId" : "1299878f-342a-49b6-9a90-e8771664b0a1",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "On 15/07/16 09:16, Nathaniel J. Smith wrote:\n\n> In numpy/core/src/multiarray/scalartypes.c.src \n> https://github.com/numpy/numpy/pull/7839#discussion_r70979857:\n> \n> > @@ -4088,6 +4088,7 @@ initialize_numeric_types(void)\n> >       \\* #NAME = Byte, Short, Int, Long, LongLong, UByte, UShort,\n> >       \\*         UInt, ULong, ULongLong#\n> >       */\n> > -    @name@_arrtype_as_number = gentype_as_number;\n> \n> On my phone so haven't looked at the context here, but do I infer \n> correctly from the commit message that this is just filling in some \n> arbitrary pointer here that will be overwritten later? If so then \n> there should be a comment to that effect here, because otherwise to a \n> naive reader it looks like there's some actual reason why \n> gentype_as_number will work.\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub \n> https://github.com/numpy/numpy/pull/7839/files/a4087dad3b1f1c7dcfb9db33dd8ff53612ec468a#r70979857, \n> or mute the thread \n> https://github.com/notifications/unsubscribe-auth/AAySZ4-nEEUPH1vCV3_KCtn2fQ4ZDGnwks5qV5Y_gaJpZM4JNa6j.\n> \n> It is not arbitrary, the pointer is from the base class, i.e. until the \n> NULL functions are overloaded, the gentype functions  be called.\n> So indeed, they will work and are exactly the functions called until \n> overloaded.\n> Note later in the same function, tp_richcompare is likewise set to \n> gentype_richcompare.\n\nMatti\n",
        "createdAt" : "2016-07-15T14:42:27Z",
        "updatedAt" : "2016-07-18T16:31:16Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "f0943870-6e53-41ba-b2ee-85feb5a8e4c3",
        "parentId" : "1299878f-342a-49b6-9a90-e8771664b0a1",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "FYI as a rule of thumb, when replying to github messages from your email client then you're best off top-posting, because github's email parser is kinda terrible. (See the github post that this is replying to for an example.)\n",
        "createdAt" : "2016-07-19T01:50:03Z",
        "updatedAt" : "2016-07-19T01:50:03Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab4f8284086a74c372802b62bb276fabb05308c7",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +4090,4094 @@     *         UInt, ULong, ULongLong#\n     */\n    @name@_arrtype_as_number = gentype_as_number;\n    Py@NAME@ArrType_Type.tp_as_number = &@name@_arrtype_as_number;\n    Py@NAME@ArrType_Type.tp_as_number->nb_index = (unaryfunc)@name@_index;"
  },
  {
    "id" : "d66d5733-cee2-4efd-aa72-24fc0e3d4eb9",
    "prId" : 8806,
    "prUrl" : "https://github.com/numpy/numpy/pull/8806#pullrequestreview-28110009",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c45fd90b-9aee-405b-aa2a-b2adae0ca1f3",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "It's not entirely clear why this function exists - it seems to re-implement the op/rop dispatch that `PyNumber_Power` handles?",
        "createdAt" : "2017-03-21T13:39:36Z",
        "updatedAt" : "2017-03-21T13:39:37Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7203f964a5a8f9b311ea633678362d782702472",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +151,155 @@static PyObject *\ngentype_power(PyObject *m1, PyObject *m2, PyObject *modulo)\n{\n    PyObject *arr, *ret, *arg2;\n    char *msg=\"unsupported operand type(s) for ** or pow()\";"
  },
  {
    "id" : "eb0fa670-d578-4103-8a1a-e8bf05172dd0",
    "prId" : 8983,
    "prUrl" : "https://github.com/numpy/numpy/pull/8983#pullrequestreview-38495262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2100613-3ccc-40bd-a418-9183ef89059e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Now that this is much simpler, can we add a `genint_type_repr` that does the same thing but calls `PyObject_Repr`, for completeness?",
        "createdAt" : "2017-05-16T19:13:38Z",
        "updatedAt" : "2017-05-17T03:35:40Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b49a8f8a-153b-49e6-8428-972aa1e445e4",
        "parentId" : "b2100613-3ccc-40bd-a418-9183ef89059e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Oops, I forgot this was for all types, not just int types types. Guess it doesn't do any harm though (and on python 2, makes a distinction between longs and ints)",
        "createdAt" : "2017-05-16T19:28:34Z",
        "updatedAt" : "2017-05-17T03:35:40Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3b853d79-ac64-4178-8328-573231284efc",
        "parentId" : "b2100613-3ccc-40bd-a418-9183ef89059e",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Hmm maybe that's bad though. I want to preserve the old int-printing behavior as much as possible.\r\n\r\nI don't have a 32-bit system to test on, but this means `repr(np.int64(2**63-1))` will now have an extra `L` on that arch, right ?",
        "createdAt" : "2017-05-16T19:38:15Z",
        "updatedAt" : "2017-05-17T03:35:40Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "a5593b67-b009-423a-b6c4-e1a285e7bd45",
        "parentId" : "b2100613-3ccc-40bd-a418-9183ef89059e",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "OK, yeah it does. I'd like to to remove the `genint_repr` here, if you agree.",
        "createdAt" : "2017-05-16T19:42:12Z",
        "updatedAt" : "2017-05-17T03:35:40Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "e2a2bf3f-09b4-4b60-8ae2-9203a96c1530",
        "parentId" : "b2100613-3ccc-40bd-a418-9183ef89059e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yep, it will show that `L`, which you already see with `np.int64(1).item()`.\r\n\r\nSo yeah, undo that suggestion - sorry. Probably worth adding a comment to where `repr` is set then, indicating that we stick with str to avoid the trailing `L`.\r\n\r\nAlso, re commit message - we're not really \"fixing\" int scalars here, are we?",
        "createdAt" : "2017-05-16T19:55:58Z",
        "updatedAt" : "2017-05-17T03:35:40Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2b06fe879f5b2b14de3dad0f517561a0c815df0",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +362,366 @@    }\n\n    item_str = PyObject_Str(item);\n    Py_DECREF(item);\n    return item_str;"
  },
  {
    "id" : "e19ca46c-5c08-4c69-b135-62c70a6ef9a7",
    "prId" : 9941,
    "prUrl" : "https://github.com/numpy/numpy/pull/9941#pullrequestreview-74272767",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7c4e2e1-0177-49cc-b1a8-f1a557a6a004",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Could do with a comment explaining what this function is for - \"either\" isn't super clear",
        "createdAt" : "2017-11-05T05:33:00Z",
        "updatedAt" : "2017-11-05T05:33:11Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50f4725c8a0c2e8b71dd9c64c5fb103f5d6c987",
    "line" : 211,
    "diffHunk" : "@@ -1,1 +730,734 @@\nstatic PyObject *\n@name@type_@kind@_either(npy_@name@ val, TrimMode trim_pos, TrimMode trim_sci,\n                         npy_bool sign)\n{"
  },
  {
    "id" : "beda1689-96b9-431f-a478-dda4f9f65c6f",
    "prId" : 9941,
    "prUrl" : "https://github.com/numpy/numpy/pull/9941#pullrequestreview-74272780",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "840e43b0-2fe2-4330-a1bb-44e21d59666c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Is this special compared to the other ones? Why?",
        "createdAt" : "2017-11-05T05:34:29Z",
        "updatedAt" : "2017-11-05T05:34:29Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50f4725c8a0c2e8b71dd9c64c5fb103f5d6c987",
    "line" : 325,
    "diffHunk" : "@@ -1,1 +806,810 @@\nstatic PyObject *\nhalftype_@kind@(PyObject *self)\n{\n    npy_half val = ((PyHalfScalarObject *)self)->obval;"
  },
  {
    "id" : "4a354d14-a298-4cc5-8056-8722c8c323fe",
    "prId" : 9967,
    "prUrl" : "https://github.com/numpy/numpy/pull/9967#pullrequestreview-74296366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf2006de-deac-4ef4-9167-c04043ca5c9e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This repeat is way clearer expressed as two repeats",
        "createdAt" : "2017-11-05T22:29:33Z",
        "updatedAt" : "2017-11-05T23:26:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b4ec2aa559cdd8b838844893efa56442132e1ab",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +821,825 @@ * #CHAR = ,C#\n * #POST = ,.real#\n */\nstatic PyObject *\n@char@longdoubletype_float(PyObject *self)"
  },
  {
    "id" : "d1ea2508-4d40-43c9-8708-12190e5c9c15",
    "prId" : 9967,
    "prUrl" : "https://github.com/numpy/numpy/pull/9967#pullrequestreview-74296366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4768f2a-d464-422c-87c7-7a58720e9200",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is where things need to change to fix #9964, but lets leave that to a future PR.",
        "createdAt" : "2017-11-05T22:30:19Z",
        "updatedAt" : "2017-11-05T23:26:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b4ec2aa559cdd8b838844893efa56442132e1ab",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +840,844 @@     * but this would need some more work...\n     */\n    return PyLong_FromDouble((double) val);\n}\n"
  },
  {
    "id" : "dcca6f8f-f435-4124-8fc6-5d5bef714c59",
    "prId" : 9967,
    "prUrl" : "https://github.com/numpy/numpy/pull/9967#pullrequestreview-74296366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9791f2a-3813-4d68-8ac5-594e258abde7",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is deliberate, as nb_int should try to return `int` on py2, but `long` on py3. I'm not sure it makes a difference externaly (I suspect python deals with either return value), but it's more consistent with how `longobject` is implemented.",
        "createdAt" : "2017-11-05T22:32:13Z",
        "updatedAt" : "2017-11-06T01:44:30Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b4ec2aa559cdd8b838844893efa56442132e1ab",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +4113,4117 @@    @char@longdoubletype_as_number.nb_float = @char@longdoubletype_float;\n#if defined(NPY_PY3K)\n    @char@longdoubletype_as_number.nb_int  = @char@longdoubletype_long;\n#else\n    @char@longdoubletype_as_number.nb_int  = @char@longdoubletype_int;"
  },
  {
    "id" : "07dcc6a5-9f6c-4014-8301-61b02e4e1556",
    "prId" : 9967,
    "prUrl" : "https://github.com/numpy/numpy/pull/9967#pullrequestreview-74296366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9832ba2-2b5b-48b8-bf9b-ecc1635707f2",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "It's far more readable and concise to iterate over the types here, rather than the members.",
        "createdAt" : "2017-11-05T22:32:51Z",
        "updatedAt" : "2017-11-05T23:26:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b4ec2aa559cdd8b838844893efa56442132e1ab",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +4123,4127 @@    Py@CHAR@LongDoubleArrType_Type.tp_as_number = &@char@longdoubletype_as_number;\n    Py@CHAR@LongDoubleArrType_Type.tp_repr = @char@longdoubletype_repr;\n    Py@CHAR@LongDoubleArrType_Type.tp_str = @char@longdoubletype_str;\n\n    /**end repeat**/"
  },
  {
    "id" : "756adbfa-1d6b-4b44-87ff-1ba67b8410c8",
    "prId" : 10034,
    "prUrl" : "https://github.com/numpy/numpy/pull/10034#pullrequestreview-77630253",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "feb2ff45-2405-4057-948c-01b635b9b6dd",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Four space indents. Did some hard tabs slip in?",
        "createdAt" : "2017-11-19T00:55:24Z",
        "updatedAt" : "2017-11-19T00:55:24Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f539150a455069e54da838373d2e5254ad1e946c",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +844,848 @@    else {\n        char re[64], im[64];\n        if (npy_isfinite(val.real)) {\n                PyOS_snprintf(format, sizeof(format), _FMT1, @NAME@PREC_@KIND@);\n                res = NumPyOS_ascii_format@suff@(re, sizeof(re), format,"
  },
  {
    "id" : "6dd51674-506a-44bf-89ca-2f3a5389d1e1",
    "prId" : 10763,
    "prUrl" : "https://github.com/numpy/numpy/pull/10763#pullrequestreview-116775169",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fe2c7ff-11a8-41f3-aabd-4c831a298ef9",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is wrong, and adds extra quotes.\r\n\r\nShould be  `PyObject_Print(to_print, fp, Py_PRINT_RAW);`",
        "createdAt" : "2018-05-02T05:38:26Z",
        "updatedAt" : "2018-05-02T05:38:26Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d6296a660b2b05a8b364fbdf7c5c290de957b8c",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +4196,4200 @@    }\n\n    ret = PyObject_Print(to_print, fp, flags);\n    Py_DECREF(to_print);\n    return ret;"
  },
  {
    "id" : "93db13d4-a1fc-4686-9cd2-7bd479068e48",
    "prId" : 10921,
    "prUrl" : "https://github.com/numpy/numpy/pull/10921#pullrequestreview-112972886",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08c7bf50-309d-4f23-9e48-bd3b30c89019",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Changed content",
        "createdAt" : "2018-04-17T20:11:48Z",
        "updatedAt" : "2018-04-17T21:57:06Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "953fbda6c22af1ea0269ed533265268b805e324c",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1609,1613 @@\nstatic char doc_getarray[] = \"sc.__array__(dtype) return 0-dim array from \"\n                             \"scalar with specified dtype\";\n\nstatic PyObject *"
  },
  {
    "id" : "491aac92-6cc3-47ba-8ecc-946665b881b0",
    "prId" : 14718,
    "prUrl" : "https://github.com/numpy/numpy/pull/14718#pullrequestreview-307306943",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34834ac7-3bb0-4e72-91f9-268db8f84896",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "To clarify, this isn't a value-based assessment--it is based on the size of the type, right?\r\n\r\nIn other words, `uint32` is automatically allowed to cast to `m8`, but NumPy won't be performing judgements as to whether any given `uint64` would cause problems if it were to be converted to an m8? That's up to the user to check & use `same_kind` casting for, at their own peril?",
        "createdAt" : "2019-10-25T03:10:55Z",
        "updatedAt" : "2019-10-25T03:22:52Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "869ef7ed-6290-4fad-9cc4-7cd2acfa7edc",
        "parentId" : "34834ac7-3bb0-4e72-91f9-268db8f84896",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Exactly - this is just emulating the logic used below for comparisons between integer types.",
        "createdAt" : "2019-10-25T16:08:00Z",
        "updatedAt" : "2019-10-25T16:08:00Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac757b50edbbdb49cf0c1804d7f6273e16d269a4",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +4065,4069 @@    _npy_can_cast_safely_table[_FROM_NUM][NPY_TIMEDELTA] = 1;\n#elif @from_isuint@ && NPY_SIZEOF_TIMEDELTA > _FROM_BSIZE\n    /* Allow casts from smaller unsigned integers to the TIMEDELTA type */\n    _npy_can_cast_safely_table[_FROM_NUM][NPY_TIMEDELTA] = 1;\n#endif"
  },
  {
    "id" : "db1bed17-42ee-4063-96ab-7e4589d89f57",
    "prId" : 14940,
    "prUrl" : "https://github.com/numpy/numpy/pull/14940#pullrequestreview-319518141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7e15cdd-6c16-4f93-88b3-5d711d24c4ec",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Does this work properly or did I miss a refcount in the call to `Py_BuildValue` by using `N` ? I copied what is done below.",
        "createdAt" : "2019-11-19T19:59:22Z",
        "updatedAt" : "2019-12-11T11:51:58Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "8e131235-a304-4aa1-805d-9b3ca8ed6b5a",
        "parentId" : "d7e15cdd-6c16-4f93-88b3-5d711d24c4ec",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "N is correct, `obj` is a new reference that you want to destroy.\r\n\r\nHaving said that, you ought to check the return value of `Py_BuildValue` in case it runs out of memory, and propagate the error.",
        "createdAt" : "2019-11-19T20:07:54Z",
        "updatedAt" : "2019-12-11T11:51:58Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b26715a2-b76c-4fda-968f-d7245cf98163",
        "parentId" : "d7e15cdd-6c16-4f93-88b3-5d711d24c4ec",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "ok, will modify it above as well",
        "createdAt" : "2019-11-20T05:34:45Z",
        "updatedAt" : "2019-12-11T11:51:58Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "838c0e45ecc08b41ccbe538115e3f432eeda958b",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1909,1913 @@        }\n        PyTuple_SET_ITEM(ret, 1, tup);\n    }\n    else {\n#ifndef Py_UNICODE_WIDE"
  },
  {
    "id" : "acfa0b76-5e0b-409a-b535-029851d4d7ab",
    "prId" : 14940,
    "prUrl" : "https://github.com/numpy/numpy/pull/14940#pullrequestreview-326831587",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2fb5dd4-e952-4420-9791-786ff40e2581",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Unless `PyArray_IterNew` has very weird semantics, \r\n```suggestion\r\n            Py_DECREF(arr);\r\n            return NULL;\r\n```",
        "createdAt" : "2019-11-29T10:26:11Z",
        "updatedAt" : "2019-12-11T11:51:58Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c64522a2-2c60-4af3-9219-82a1e9fefaf3",
        "parentId" : "a2fb5dd4-e952-4420-9791-786ff40e2581",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "nice. Fixing",
        "createdAt" : "2019-12-04T13:07:06Z",
        "updatedAt" : "2019-12-11T11:51:58Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "838c0e45ecc08b41ccbe538115e3f432eeda958b",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1902,1906 @@        Py_DECREF(arr);\n        if (val == NULL) {\n            return NULL;\n        }\n        PyObject *tup = Py_BuildValue(\"NN\", obj, val);"
  },
  {
    "id" : "9ca4e11f-a660-4e21-9ddc-e6662953c337",
    "prId" : 15385,
    "prUrl" : "https://github.com/numpy/numpy/pull/15385#pullrequestreview-350963348",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b14652c-14e7-4600-bd3f-23da7a5fcc47",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "See #15477",
        "createdAt" : "2020-01-30T16:29:56Z",
        "updatedAt" : "2020-02-08T21:23:59Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0b7b6638fe7496d25a488a179d79879748075fa",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +349,353 @@ * FIXME:\n *   is this really a good idea?\n *   stop using Py_UNICODE here.\n */\n"
  },
  {
    "id" : "62bf741e-69bd-4506-8144-b790a2f0f531",
    "prId" : 15422,
    "prUrl" : "https://github.com/numpy/numpy/pull/15422#pullrequestreview-348183347",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "724ac2c7-86e3-46f1-83be-c30cd9bc8873",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "This line is repeated now, maybe we can merge them",
        "createdAt" : "2020-01-24T18:40:03Z",
        "updatedAt" : "2020-01-24T19:44:12Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "0fe6e4a2-f1c8-4f68-b991-58db95d3eb51",
        "parentId" : "724ac2c7-86e3-46f1-83be-c30cd9bc8873",
        "authorId" : "90f9383b-5a2e-49ad-a731-13e6f7332b32",
        "body" : "I'm less comfortable in python c code, and I consolidated two Py_DECREF to one place which felt better but made me question why they were seperated before. Can you give my update a through inspection.",
        "createdAt" : "2020-01-24T19:09:24Z",
        "updatedAt" : "2020-01-24T19:44:12Z",
        "lastEditedBy" : "90f9383b-5a2e-49ad-a731-13e6f7332b32",
        "tags" : [
        ]
      },
      {
        "id" : "a42659d4-9846-46b9-8fe0-2c234566c90c",
        "parentId" : "724ac2c7-86e3-46f1-83be-c30cd9bc8873",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "You missed that `descr` is still being used further down in `new = ...`",
        "createdAt" : "2020-01-24T19:11:53Z",
        "updatedAt" : "2020-01-24T19:44:12Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "a2855dbb-9d3c-4bab-b0cc-cf6e5f4e2831",
        "parentId" : "724ac2c7-86e3-46f1-83be-c30cd9bc8873",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "descr is a better name than outcode anyway",
        "createdAt" : "2020-01-24T19:23:26Z",
        "updatedAt" : "2020-01-24T19:44:12Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "28183881-55fc-453e-931b-cf88c0ace4bb",
        "parentId" : "724ac2c7-86e3-46f1-83be-c30cd9bc8873",
        "authorId" : "90f9383b-5a2e-49ad-a731-13e6f7332b32",
        "body" : "> You missed that `descr` is still being used further down in `new = ...`\r\n\r\nI'm not sure what you're implying by this? I dropped `outcode` so I think desc should still be used in the `new = ...`.",
        "createdAt" : "2020-01-24T19:34:05Z",
        "updatedAt" : "2020-01-24T19:44:12Z",
        "lastEditedBy" : "90f9383b-5a2e-49ad-a731-13e6f7332b32",
        "tags" : [
        ]
      },
      {
        "id" : "015e0e02-1811-4dc7-8a25-97172caf3671",
        "parentId" : "724ac2c7-86e3-46f1-83be-c30cd9bc8873",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yes, but as long as you are using `descr` you must hold a reference to it. If you call `DECREF` you lose that reference (i.e. if you wanted to be super clean, at least in this case, you might even do `descr = NULL` or similar incarnations to point out that it is not anymore valid to use).",
        "createdAt" : "2020-01-24T19:41:07Z",
        "updatedAt" : "2020-01-24T19:44:12Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "e3999d8f-c679-4476-99b8-d6b230733b10",
        "parentId" : "724ac2c7-86e3-46f1-83be-c30cd9bc8873",
        "authorId" : "90f9383b-5a2e-49ad-a731-13e6f7332b32",
        "body" : "Thanks, I was being silly and only making sure the count was right at the end of the function. Fixed now.",
        "createdAt" : "2020-01-24T19:44:14Z",
        "updatedAt" : "2020-01-24T19:44:14Z",
        "lastEditedBy" : "90f9383b-5a2e-49ad-a731-13e6f7332b32",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e8c0d65958013ac00c2efdfed0a388ac740ac6d",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1574,1578 @@        char *newmem;\n\n        descr = PyArray_DescrFromScalar(self);\n        data = (void *)scalar_value(self, descr);\n"
  },
  {
    "id" : "573cfa3c-16dd-432a-b963-559cd7cadb82",
    "prId" : 15451,
    "prUrl" : "https://github.com/numpy/numpy/pull/15451#pullrequestreview-349034697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8a6156c-d326-4823-8ab9-c5c166770d4e",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "The comment (even for Object Data Type) can be removed above",
        "createdAt" : "2020-01-27T22:58:37Z",
        "updatedAt" : "2020-01-27T23:17:21Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "df1347dba08a7c67a38bd1dfcd180342e579195f",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +2612,2616 @@    /* 0-d array */\n    robj = PyArray_ToScalar(PyArray_DATA(arr), arr);\n    Py_DECREF(arr);\n\nfinish:"
  },
  {
    "id" : "e19c28f9-faba-42aa-9c01-a09549dec9a2",
    "prId" : 15451,
    "prUrl" : "https://github.com/numpy/numpy/pull/15451#pullrequestreview-349041772",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eee4e0c6-7720-4922-a56d-5085a5e4e396",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Adding an assert after the below comment might be nice, since only float, string and unicode can reach it I guess? (but no priority)",
        "createdAt" : "2020-01-27T23:01:18Z",
        "updatedAt" : "2020-01-27T23:17:21Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "0d1a278d-1ce1-4795-8891-ee47486a8d4b",
        "parentId" : "eee4e0c6-7720-4922-a56d-5085a5e4e396",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "A good idea, but something I want to leave till after this patch.\r\n\r\nIf you want to take a stab at cleaning this up further in a follow-up, please do!",
        "createdAt" : "2020-01-27T23:15:11Z",
        "updatedAt" : "2020-01-27T23:17:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "df1347dba08a7c67a38bd1dfcd180342e579195f",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +2617,2621 @@    /* Normal return */\n    if ((robj == NULL) || (Py_TYPE(robj) == type)) {\n        return robj;\n    }\n"
  },
  {
    "id" : "20347cfb-e273-41c4-bcae-2f839df2ae10",
    "prId" : 15451,
    "prUrl" : "https://github.com/numpy/numpy/pull/15451#pullrequestreview-349771935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78f284ed-0cad-4006-831d-82a01e11df89",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "The old code optimized things more like `*obj = NULL` and then `if (obj == NULL) Py_RETURN_NONE;` that is probably not necessary, but seems also OK?",
        "createdAt" : "2020-01-27T23:06:37Z",
        "updatedAt" : "2020-01-27T23:17:21Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "67997e91-2574-4523-8ebd-266a41597ea5",
        "parentId" : "78f284ed-0cad-4006-831d-82a01e11df89",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "It didn't seem particularly worthy of optimization to me, but I suppose someone might be calling `some_dtype.type()` in generic code to default-construct something. It's unlikely they're calling it more than a couple times though, as `zeros` would be more appropriate for that.",
        "createdAt" : "2020-01-27T23:12:24Z",
        "updatedAt" : "2020-01-27T23:17:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "db6730c0-897a-446d-bcb6-b68379245d35",
        "parentId" : "78f284ed-0cad-4006-831d-82a01e11df89",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "No, I guess I agree, these are scalars. Creating a scalar with not obviously well defined data does indeed seem like a useless pattern.",
        "createdAt" : "2020-01-28T23:15:53Z",
        "updatedAt" : "2020-01-28T23:15:54Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "df1347dba08a7c67a38bd1dfcd180342e579195f",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +2666,2670 @@    PyObject *obj = Py_None;\n    char *kwnames[] = {\"\", NULL};  /* positional-only */\n    if (!PyArg_ParseTupleAndKeywords(args, kwds, \"|O:object_\", kwnames, &obj)) {\n        return NULL;\n    }"
  },
  {
    "id" : "35b8a328-53c1-40c8-b6fb-a31dbba13ffe",
    "prId" : 15451,
    "prUrl" : "https://github.com/numpy/numpy/pull/15451#pullrequestreview-349041522",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "798c516e-a4c3-448e-ae41-cff7f0db7f4a",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I feel like this can also be used in the above case. The `finish:` path really is only sensible in the case where `PyArray_FromAny` is not called.",
        "createdAt" : "2020-01-27T23:08:38Z",
        "updatedAt" : "2020-01-27T23:17:21Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "58664df9-b9d7-4e94-8dc8-1cfa8a2ed2f8",
        "parentId" : "798c516e-a4c3-448e-ae41-cff7f0db7f4a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Probably true - I was struggling to piece together what was going on in the above case, so decided to split this part out first.\r\n\r\nFor some context - my eventual goal is to add a `Py_UCS4 *` member to `PyUnicodeScalarObject`, which needs to be populated during initialization - instead of using the deprecated `Py_UNICODE` APIs.",
        "createdAt" : "2020-01-27T23:14:37Z",
        "updatedAt" : "2020-01-27T23:17:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "df1347dba08a7c67a38bd1dfcd180342e579195f",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +2675,2679 @@    PyArrayObject *arr = (PyArrayObject *)PyArray_FromAny(obj, typecode,\n                                    0, 0, NPY_ARRAY_FORCECAST, NULL);\n    return PyArray_Return(arr);\n}\n"
  },
  {
    "id" : "337f661c-3a1f-4493-9a52-d8a8e6ce593b",
    "prId" : 15840,
    "prUrl" : "https://github.com/numpy/numpy/pull/15840#pullrequestreview-382742397",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cf0bcbd-719a-43dc-8f22-3e48aa91a2c9",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```suggestion\r\n    }\r\n    Py_DECREF(obj);\r\n```",
        "createdAt" : "2020-03-27T10:34:27Z",
        "updatedAt" : "2020-04-04T09:24:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed22eb26215e5d07ab1ca2b274844a0b352d6f8b",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +1595,1599 @@        Py_DECREF(obj);\n        return ret;\n    }\n#endif\n    "
  },
  {
    "id" : "c29c17fb-c195-44b8-9698-6f17ef662aeb",
    "prId" : 15840,
    "prUrl" : "https://github.com/numpy/numpy/pull/15840#pullrequestreview-386235503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b52dea9-4a19-4f69-bfff-60fc9e0d0135",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I am wondering if we should just add support for `None` to `gentype_round`... OTOH, since we do not have the \"integer result\" meaning, maybe it is nicer not to.\r\nI am OK with this dance, although it does not seem ideal... Would probably make sense to create an internal helper that does not include the argument parsing and use it in both functions, though.",
        "createdAt" : "2020-04-01T14:52:24Z",
        "updatedAt" : "2020-04-04T09:24:17Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "ed7037dc-df80-4729-a283-3ce129396648",
        "parentId" : "0b52dea9-4a19-4f69-bfff-60fc9e0d0135",
        "authorId" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "body" : "Another PR sometime, maybe? It'd require adding it to `ndarray.round`, which this dispatches to.",
        "createdAt" : "2020-04-02T09:03:37Z",
        "updatedAt" : "2020-04-04T09:24:17Z",
        "lastEditedBy" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed22eb26215e5d07ab1ca2b274844a0b352d6f8b",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +1578,1582 @@    else {\n        tup = PyTuple_Pack(1, ndigits);\n    }\n\n    if (tup == NULL) {"
  },
  {
    "id" : "634a6e60-2b3c-4fd5-9ec4-31e764159b0d",
    "prId" : 16389,
    "prUrl" : "https://github.com/numpy/numpy/pull/16389#pullrequestreview-419632747",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97bc42cd-2113-41fc-b9ef-05b12b8fbfa0",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Does this do the right thing on platforms with unusually-sized ints?",
        "createdAt" : "2020-05-27T07:11:18Z",
        "updatedAt" : "2020-05-31T17:32:40Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "04a68975-19b3-4d6e-aeb0-d8dc7e05c4c7",
        "parentId" : "97bc42cd-2113-41fc-b9ef-05b12b8fbfa0",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I think the tests here should actually be pretty good:\r\n\r\nhttps://github.com/numpy/numpy/blob/d0b7b6638fe7496d25a488a179d79879748075fa/numpy/core/tests/test_scalarbuffer.py#L9-L30",
        "createdAt" : "2020-05-27T13:41:05Z",
        "updatedAt" : "2020-05-31T17:32:40Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "1ca7f7e0-5041-4ec5-8b25-0a645a6824c6",
        "parentId" : "97bc42cd-2113-41fc-b9ef-05b12b8fbfa0",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I need to reread the buffer protocol I think. My fear is platforms that we don't test on, like those with 16-bit char.",
        "createdAt" : "2020-05-27T21:24:39Z",
        "updatedAt" : "2020-05-31T17:32:40Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b4f844e4-07e0-489c-accf-389281768a5e",
        "parentId" : "97bc42cd-2113-41fc-b9ef-05b12b8fbfa0",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "The buffer protocol uses the struct definitions: https://docs.python.org/3.8/library/struct.html",
        "createdAt" : "2020-05-27T21:29:29Z",
        "updatedAt" : "2020-05-31T17:32:40Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "152be131-9683-4352-a983-0a6e3b948a6b",
        "parentId" : "97bc42cd-2113-41fc-b9ef-05b12b8fbfa0",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Looks like my concern was only for non-native formats, but scalars are always fixed endianness so this is safe",
        "createdAt" : "2020-05-27T21:47:12Z",
        "updatedAt" : "2020-05-31T17:32:40Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebb4e48f83bbbc6cea3c5781a838b032e120663d",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +2375,2379 @@ *         ULONGLONG, HALF, FLOAT, DOUBLE, LONGDOUBLE, CFLOAT, CDOUBLE,\n *         CLONGDOUBLE#\n * #fmt = ?, b, h, i, l, q, B, H, I, L, Q, e, f, d, g, Zf, Zd, Zg#\n */\n"
  }
]