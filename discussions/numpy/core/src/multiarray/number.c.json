[
  {
    "id" : "f712f7da-2ce6-4955-b653-21ac6fc1a1d7",
    "prId" : 3501,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3959dcd4-9fd9-4196-9603-219b8eb816cb",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "`float(17)` isn't an array so I guess there's a mistake in the comment?\n",
        "createdAt" : "2013-07-08T14:46:11Z",
        "updatedAt" : "2013-07-09T03:12:32Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "e9a516f2-fcaa-4dce-ab43-c78dd05ccb93",
        "parentId" : "3959dcd4-9fd9-4196-9603-219b8eb816cb",
        "authorId" : "f887aabc-b71a-4b6b-a38a-1237f570ea8b",
        "body" : "Nope, that's correct. `float(17) * np.matrix(...)` first ends up in `np.matrix.__rmul__`, which calls `np.dot`, which calls `PyArray_MatrixProduct2`, which casts `float(17)` into an array scalar an then calls this place. :)\n",
        "createdAt" : "2013-07-08T15:05:53Z",
        "updatedAt" : "2013-07-09T03:12:32Z",
        "lastEditedBy" : "f887aabc-b71a-4b6b-a38a-1237f570ea8b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4441bdd95197ba10651eee8366e67176fb3b5b51",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +216,220 @@           * that we were called through m1 and the other guy is not an array\n           * at all. Note that some arrays need to pass through here even\n           * with priorities inverted, for example: float(17) * np.matrix(...)\n           *\n           * See also:"
  },
  {
    "id" : "06dc7914-4945-448d-b0f5-65df9b09e881",
    "prId" : 3965,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a56f464a-585f-42b0-a3ce-2d913fb4f323",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "if its decrefd here, shouldn't the NULL return paths above also decrev pv?\n",
        "createdAt" : "2013-10-24T17:13:27Z",
        "updatedAt" : "2013-10-24T21:26:53Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "ff24702a-0f25-4b8e-9ec0-02cd06ae0b2c",
        "parentId" : "a56f464a-585f-42b0-a3ce-2d913fb4f323",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "indeed, seems they are missing for some but not all of these.\n",
        "createdAt" : "2013-10-24T17:38:11Z",
        "updatedAt" : "2013-10-24T21:26:53Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a01f4e11874be9db17fb24fa17c649fd45a8aff",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +814,818 @@        PyErr_SetString(PyExc_TypeError,\n                \"object array may be self-referencing\");\n        Py_DECREF(pv);\n        return NULL;\n    }"
  },
  {
    "id" : "d5b2e29a-92c0-4a97-a71a-d760d0cfd4a9",
    "prId" : 8806,
    "prUrl" : "https://github.com/numpy/numpy/pull/8806#pullrequestreview-28126826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "802b48cd-4047-401b-af70-86fc457bd2f0",
        "parentId" : null,
        "authorId" : "4b0602db-f9ac-4b54-b200-2e79d0cfb7c3",
        "body" : "why not just [`Py_RETURN_NOTIMPLEMENTED`](https://docs.python.org/3/c-api/object.html#c.Py_RETURN_NOTIMPLEMENTED)?",
        "createdAt" : "2017-03-21T14:03:58Z",
        "updatedAt" : "2017-03-21T14:04:05Z",
        "lastEditedBy" : "4b0602db-f9ac-4b54-b200-2e79d0cfb7c3",
        "tags" : [
        ]
      },
      {
        "id" : "a0189536-c020-43a2-a82a-c7a290cc209e",
        "parentId" : "802b48cd-4047-401b-af70-86fc457bd2f0",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Because right now we don't use that anywhere in numpy, so there's probably a consistency argument.\r\n\r\nDo you want to make a PR that fixes this numpy-wide? Alternatively, I could just add another commit to the PR that makes this change everywhere. Let me know which.",
        "createdAt" : "2017-03-21T14:26:27Z",
        "updatedAt" : "2017-03-21T14:31:12Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "92d30e76-6a7d-47c9-9b9e-15858772f099",
        "parentId" : "802b48cd-4047-401b-af70-86fc457bd2f0",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "There's some strange code in `ctors.c` which does't `Py_INCREF` Py_NotImplemented, but I guess that's ok because the things that consume it don't `DECREF` in those cases either",
        "createdAt" : "2017-03-21T14:30:09Z",
        "updatedAt" : "2017-03-21T14:30:10Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ffb38c01-3513-46b7-91c8-8e5ba4821c58",
        "parentId" : "802b48cd-4047-401b-af70-86fc457bd2f0",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Better answer - [`Py_RETURN_NOTIMPLEMENTED` is not available in 2.7](https://bugs.python.org/issue12724)",
        "createdAt" : "2017-03-21T14:32:42Z",
        "updatedAt" : "2017-03-21T14:32:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "fc31fc14-5485-49ce-9d5a-efc600cf9391",
        "parentId" : "802b48cd-4047-401b-af70-86fc457bd2f0",
        "authorId" : "4b0602db-f9ac-4b54-b200-2e79d0cfb7c3",
        "body" : "oups, that's a good argument ðŸ˜… ",
        "createdAt" : "2017-03-21T14:36:56Z",
        "updatedAt" : "2017-03-21T14:36:56Z",
        "lastEditedBy" : "4b0602db-f9ac-4b54-b200-2e79d0cfb7c3",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7203f964a5a8f9b311ea633678362d782702472",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +621,625 @@        /* modular exponentiation is not implemented (gh-8804) */\n        Py_INCREF(Py_NotImplemented);\n        return Py_NotImplemented;\n    }\n    GIVE_UP_IF_HAS_RIGHT_BINOP(a1, o2, \"__pow__\", \"__rpow__\", 0, nb_power);"
  },
  {
    "id" : "8ab44f2b-1563-424c-93ce-ffd4fb8869e1",
    "prId" : 9110,
    "prUrl" : "https://github.com/numpy/numpy/pull/9110#pullrequestreview-37885349",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3287f365-8b3b-41b5-a7b3-093ffc7763e3",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Isn't this also going to fail for any user type that overrides `abs` too? #4730 comes to mind, and problems with a `quaternion` type.",
        "createdAt" : "2017-05-12T16:17:01Z",
        "updatedAt" : "2017-05-15T17:04:24Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "9bdedf21-8a6c-4bb2-b63c-1913cd4cabcc",
        "parentId" : "3287f365-8b3b-41b5-a7b3-093ffc7763e3",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "hm right, it shouldn't elide object arrays at all it only does that for unary not bianry probably I forgot to update both places.",
        "createdAt" : "2017-05-12T16:27:10Z",
        "updatedAt" : "2017-05-15T17:04:24Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "7a399b25-6594-447d-82c9-f043c3ac5918",
        "parentId" : "3287f365-8b3b-41b5-a7b3-093ffc7763e3",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "though abs(object-array) is again an object array regardless of what `__abs__` does",
        "createdAt" : "2017-05-12T16:29:08Z",
        "updatedAt" : "2017-05-15T17:04:24Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "d54ed58c-e4ae-4ef8-88a4-a81191fb5583",
        "parentId" : "3287f365-8b3b-41b5-a7b3-093ffc7763e3",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm referring to registering custom ufunc loops for new `dtype`s",
        "createdAt" : "2017-05-12T16:29:37Z",
        "updatedAt" : "2017-05-15T17:04:24Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e0def5e5-e595-4bf5-84c7-7b668fb18849",
        "parentId" : "3287f365-8b3b-41b5-a7b3-093ffc7763e3",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Issue number should have been #9003",
        "createdAt" : "2017-05-12T16:30:07Z",
        "updatedAt" : "2017-05-15T17:04:24Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "af01744a3ff4de72ef994bd445967b52262c96cc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +566,570 @@array_absolute(PyArrayObject *m1)\n{\n    if (can_elide_temp_unary(m1) && !PyArray_ISCOMPLEX(m1)) {\n        return PyArray_GenericInplaceUnaryFunction(m1, n_ops.absolute);\n    }"
  },
  {
    "id" : "110814cd-b515-4838-b4db-57863f5ba2a1",
    "prId" : 10042,
    "prUrl" : "https://github.com/numpy/numpy/pull/10042#pullrequestreview-77363424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f46233e2-bdbc-48b7-b43a-7d41bf9c1c56",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "In principle we could use templating instead of function pointers, but we don't really care about speed here.",
        "createdAt" : "2017-11-17T08:19:59Z",
        "updatedAt" : "2017-11-17T17:00:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "bcec12b441ec5b775c833e419a9042c6d06eaf70",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +832,836 @@array_scalar_forward(PyArrayObject *v,\n                     PyObject *(*builtin_func)(PyObject *),\n                     const char *where)\n{\n    PyObject *scalar;"
  },
  {
    "id" : "a2ef51bd-8a64-453b-b3d3-0dad6a314696",
    "prId" : 11916,
    "prUrl" : "https://github.com/numpy/numpy/pull/11916#pullrequestreview-154347592",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91ec5f6b-27f1-49e8-9854-8961c61219ac",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "nit: weird indent on the line above",
        "createdAt" : "2018-09-10T06:51:36Z",
        "updatedAt" : "2018-11-10T00:44:47Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "91a30b76-dfc7-4b49-a17f-10a3e56a4268",
        "parentId" : "91ec5f6b-27f1-49e8-9854-8961c61219ac",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "fixed",
        "createdAt" : "2018-09-11T18:56:21Z",
        "updatedAt" : "2018-11-10T00:44:47Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "08a2e4503de155f2e202bc154287b34220ad1025",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +140,144 @@{\n    PyObject *dict;\n    if ((dict = PyDict_New())==NULL)\n        return NULL;\n    GET(add);"
  },
  {
    "id" : "72af2146-8cf4-45e4-a3d0-b45ba6beb9e8",
    "prId" : 11916,
    "prUrl" : "https://github.com/numpy/numpy/pull/11916#pullrequestreview-165204583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3e2b2c7-2673-4740-b341-bff0806e9a8e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Should be wrapped in\r\n```\r\n#if !defined(NPY_NO_DEPRECATED_API) || \\\r\n    (NPY_NO_DEPRECATED_API < NPY_1_16_API_VERSION)\r\n\r\n#endif\r\n```",
        "createdAt" : "2018-10-16T13:14:26Z",
        "updatedAt" : "2018-11-10T00:44:47Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "eb402ebf-0491-4a10-8ffe-5aedb7572146",
        "parentId" : "c3e2b2c7-2673-4740-b341-bff0806e9a8e",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "That is only for headers, to allow access to old API macros. The C files always start with this define, which will defeat the check you suggest\r\n[`#define NPY_NO_DEPRECATED_API NPY_API_VERSION`](https://github.com/numpy/numpy/blob/v1.15.2/numpy/core/src/multiarray/number.c#L6). `NPY_API_VERSION` is hard-coded from `C_API_VERSION` in [`core/setup_common.py`](https://github.com/numpy/numpy/blob/v1.15.2/numpy/core/setup_common.py#L44) , see [`core/setup.py`](https://github.com/numpy/numpy/blob/v1.15.2/numpy/core/setup.py#L561) where the magic happens.\r\n\r\nWe don't really have a way to actually remove or disable deprecated API functions, since the convention is that the PyArray_API structure built in `__multiarray_api.h` by [`core/code_generators/generate_array_api.py`](https://github.com/numpy/numpy/blob/v1.15.2/numpy/core/code_generators/generate_numpy_api.py) from the list in [`core.code_generators/numpy_api.py`](https://github.com/numpy/numpy/blob/v1.15.2/numpy/core/code_generators/numpy_api.py#L32) can only grow, never shrink, to allow backward compatibility.\r\n\r\nThis is somewhat talked about in the [documentation](http://www.numpy.org/devdocs/reference/c-api.array.html?highlight=pyarray_api#miscellaneous) from the user's perspective and in the ['VERSIONING SUPPORT'](https://github.com/numpy/numpy/blob/v1.15.2/numpy/core/setup_common.py#L12) docstring in `setup_common.py`, but if you think of hook where I can hang more documentation let me know.",
        "createdAt" : "2018-10-16T14:04:56Z",
        "updatedAt" : "2018-11-10T00:44:47Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "00bc6638-4913-40d1-b80e-f6324fe51892",
        "parentId" : "c3e2b2c7-2673-4740-b341-bff0806e9a8e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Oops, good point.\r\n\r\nCan we move `PyArray_GetNumericOps` to a macro that hides the C api macro?",
        "createdAt" : "2018-10-16T14:23:05Z",
        "updatedAt" : "2018-11-10T00:44:47Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "bd122aff-b31d-4f5a-b204-2b996d5a7de4",
        "parentId" : "c3e2b2c7-2673-4740-b341-bff0806e9a8e",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "We could eventually turn the warning into an exception. Not sure if I understand which \"C api macro\" you mean, there are so many.\r\n\r\nAt some point we could remove things from the `PyArray_API` structure by changing our major version, which would infer no backward API compatibility.",
        "createdAt" : "2018-10-16T14:39:18Z",
        "updatedAt" : "2018-11-10T00:44:47Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "ff114fef-0130-4f9c-bc33-fa99fd6cee5c",
        "parentId" : "c3e2b2c7-2673-4740-b341-bff0806e9a8e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I mean this macro:\r\n```\r\n#define PyArray_GetNumericOps \\\r\n        (*(PyObject * (*)(void)) \\\r\n         PyArray_API[41])\r\n```\r\n\r\nPerhaps we should leave this as an open question, and just take this PR as it currently stands ",
        "createdAt" : "2018-10-16T14:52:43Z",
        "updatedAt" : "2018-11-10T00:44:47Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "08a2e4503de155f2e202bc154287b34220ad1025",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +189,193 @@*/\nNPY_NO_EXPORT PyObject *\nPyArray_GetNumericOps(void)\n{\n    /* 2018-09-09, 1.16 */"
  },
  {
    "id" : "ca4b2042-bca8-4b00-8f50-841be990ee62",
    "prId" : 15482,
    "prUrl" : "https://github.com/numpy/numpy/pull/15482#pullrequestreview-351875032",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "046cded2-fcc9-46d2-b764-ddf6a25270ea",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "This on struct is slightly reordered, (`.nb_index` together with int and float), may make sense for others, but as a follow-u[",
        "createdAt" : "2020-02-01T09:31:42Z",
        "updatedAt" : "2020-02-01T16:56:47Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "35bfd4846d17f1eedd0bcc4a6b47fcf8688c48e2",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +962,966 @@\n    .nb_matrix_multiply = (binaryfunc)array_matrix_multiply,\n    .nb_inplace_matrix_multiply = (binaryfunc)array_inplace_matrix_multiply,\n};"
  },
  {
    "id" : "81303628-2945-40db-8ecc-e7c6bc478420",
    "prId" : 17364,
    "prUrl" : "https://github.com/numpy/numpy/pull/17364#pullrequestreview-495765159",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73fb9338-d528-4424-85b0-2d2e06ea3506",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This looks like a bug to me - should this not have been long long from the beginning?",
        "createdAt" : "2020-09-22T22:03:23Z",
        "updatedAt" : "2020-09-24T17:21:28Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "fdc4fc6a-60b7-4693-8414-581c8ea1c1de",
        "parentId" : "73fb9338-d528-4424-85b0-2d2e06ea3506",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Ah, it doesn't matter much anyway, it's only checked against tiny integers.",
        "createdAt" : "2020-09-22T22:17:50Z",
        "updatedAt" : "2020-09-24T17:21:28Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "447d0b7f-3a72-4a29-94ae-2f3d91c98410",
        "parentId" : "73fb9338-d528-4424-85b0-2d2e06ea3506",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yeah, I considered that too, but came to the same conclusion. I'll take another look just to be sure.",
        "createdAt" : "2020-09-22T22:32:09Z",
        "updatedAt" : "2020-09-24T17:21:28Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "eddb2b9c-7fc8-4279-b950-049975e00477",
        "parentId" : "73fb9338-d528-4424-85b0-2d2e06ea3506",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yes, this looks OK.",
        "createdAt" : "2020-09-24T16:49:01Z",
        "updatedAt" : "2020-09-24T17:21:28Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "976d1b3845dcc3f9116dec09501d036304dabe42",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +399,403 @@\n    if (PyLong_Check(o2)) {\n        long tmp = PyLong_AsLong(o2);\n        if (error_converting(tmp)) {\n            PyErr_Clear();"
  },
  {
    "id" : "5761d6c5-98c0-4b97-b69d-1b133739ce54",
    "prId" : 18593,
    "prUrl" : "https://github.com/numpy/numpy/pull/18593#pullrequestreview-615895551",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fbc6f1a-4042-4a6b-9129-0420fd573130",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Was removing the cast here the motivation for this PR?",
        "createdAt" : "2021-03-18T20:56:00Z",
        "updatedAt" : "2021-03-18T21:36:16Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "77d24769-37ce-434f-aae0-609498b3bee1",
        "parentId" : "6fbc6f1a-4042-4a6b-9129-0420fd573130",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "This was just a side effect.   The reason for this was that I got a bit confused by it when I was trying how to add special handling for Python scalars (for the discussion about making `np.array(1, dtype=uint8) + 100` return `uint8` no matter the value).\r\n(Since there you have to check for both the first and second argument being a Python scalar)",
        "createdAt" : "2021-03-18T21:39:18Z",
        "updatedAt" : "2021-03-18T21:39:19Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7af05a849b3b81922ec3da988494a70a875ca91",
    "line" : 200,
    "diffHunk" : "@@ -1,1 +948,952 @@    .nb_and = array_bitwise_and,\n    .nb_xor = array_bitwise_xor,\n    .nb_or = array_bitwise_or,\n\n    .nb_int = (unaryfunc)array_int,"
  }
]