[
  {
    "id" : "5d932a34-9094-4c2c-9336-ac15f297b76f",
    "prId" : 93,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1db2565-88d8-4bb2-80c7-c6a8fd601864",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Heh!\n",
        "createdAt" : "2011-06-21T04:08:59Z",
        "updatedAt" : "2011-06-21T15:22:22Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c1c7a86057e72490268f084a4e77d857997312b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +84,88 @@     */\n    if (len <= 0 || (len == 3 &&\n                        tolower(str[0]) == 'n' &&\n                        tolower(str[1]) == 'a' &&\n                        tolower(str[2]) == 't')) {"
  },
  {
    "id" : "e99924f8-c7ed-4fe5-9841-9319dfdc7a37",
    "prId" : 93,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e4dfcc3-f938-419e-b039-2a367922b06b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Triple heh. Would it be worth making a function for these sorts of string comparsions?\n",
        "createdAt" : "2011-06-21T04:14:17Z",
        "updatedAt" : "2011-06-21T15:22:22Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "743488bd-a9ae-4474-947e-3d6dd303136e",
        "parentId" : "4e4dfcc3-f938-419e-b039-2a367922b06b",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "Perhaps, it might be worth putting in the standard C library while we're at it. ;)\n\nLots of implementations have POSIX stricmp or strcmpi, but they're not standard. I did it this way because there are just a few cases and it seemed readable enough to me...\n\nOk, there is PyOS_stricmp to use.\n",
        "createdAt" : "2011-06-21T14:51:10Z",
        "updatedAt" : "2011-06-21T15:22:23Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      },
      {
        "id" : "f2af9171-5bc5-47ef-8403-be4b940c1ddd",
        "parentId" : "4e4dfcc3-f938-419e-b039-2a367922b06b",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "Further correction: PyOS_stricmp appears to be broken, it doesn't even match the signature of strcmp. Reverting to the element by element comparison.\n",
        "createdAt" : "2011-06-21T15:20:07Z",
        "updatedAt" : "2011-06-21T15:22:23Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c1c7a86057e72490268f084a4e77d857997312b",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +179,183 @@\n    /* The string \"now\" resolves to the current UTC time */\n    if (len == 3 && tolower(str[0]) == 'n' &&\n                    tolower(str[1]) == 'o' &&\n                    tolower(str[2]) == 'w') {"
  },
  {
    "id" : "949e5465-3831-4dc2-86b7-6c179426e0a1",
    "prId" : 93,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f159773c-ac9f-4669-82aa-82bc7b943b3b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could go with a for statement. I don't feel much inclination one way or the other.\n\nDoes look like it matches with the rest of the statements, which is good.\n",
        "createdAt" : "2011-06-21T04:15:46Z",
        "updatedAt" : "2011-06-21T15:22:22Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c1c7a86057e72490268f084a4e77d857997312b",
    "line" : 232,
    "diffHunk" : "@@ -1,1 +230,234 @@\n    /* Skip leading whitespace */\n    while (sublen > 0 && isspace(*substr)) {\n        ++substr;\n        --sublen;"
  },
  {
    "id" : "11fdb862-f491-4e61-a7e7-d12c5d128989",
    "prId" : 93,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c4722f2-6b42-4ca5-95e6-c0a6fe387c8c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What are the differences?\n",
        "createdAt" : "2011-06-21T04:20:46Z",
        "updatedAt" : "2011-06-21T15:22:22Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "96e90e59-d6e9-4aa7-aa03-c65ea23dc935",
        "parentId" : "5c4722f2-6b42-4ca5-95e6-c0a6fe387c8c",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "added a comment for that\n",
        "createdAt" : "2011-06-21T14:53:03Z",
        "updatedAt" : "2011-06-21T15:22:23Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c1c7a86057e72490268f084a4e77d857997312b",
    "line" : 789,
    "diffHunk" : "@@ -1,1 +787,791 @@\n/*\n * Converts an npy_datetimestruct to an (almost) ISO 8601\n * NULL-terminated string. If the string fits in the space exactly,\n * it leaves out the NULL terminator and returns success."
  },
  {
    "id" : "de9ba6a8-1170-4195-8f79-a97a2273b792",
    "prId" : 93,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "265bc20a-f7bc-471b-bcc3-b36ca0b12384",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Are you sure the extra seconds don't matter?\n",
        "createdAt" : "2011-06-21T04:24:34Z",
        "updatedAt" : "2011-06-21T15:22:22Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ae2ecfb2-6489-4510-9a8c-908165b78a34",
        "parentId" : "265bc20a-f7bc-471b-bcc3-b36ca0b12384",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "Yeah, time zone offsets are always in minutes.\n",
        "createdAt" : "2011-06-21T14:55:57Z",
        "updatedAt" : "2011-06-21T15:22:23Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c1c7a86057e72490268f084a4e77d857997312b",
    "line" : 879,
    "diffHunk" : "@@ -1,1 +877,881 @@         * This is POSIX time, which skips leap-seconds, but because\n         * we drop the seconds value from the npy_datetimestruct, everything\n         * is ok for this operation.\n         */\n        rawtime = (time_t)get_datetimestruct_days(dts) * 24 * 60 * 60;"
  },
  {
    "id" : "2440c390-a38d-49e9-8cb5-4d7a15f6ab5a",
    "prId" : 93,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02ecfa3a-8c4d-4d51-8053-99df0763fbd3",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The snprintf thing should probably be handled in the initial configuration somewhere. Or maybe npy_config.h?\n",
        "createdAt" : "2011-06-21T04:28:13Z",
        "updatedAt" : "2011-06-21T15:22:22Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "64e2c9d4-6d6d-4110-b82e-2ed4df210433",
        "parentId" : "02ecfa3a-8c4d-4d51-8053-99df0763fbd3",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "There is PyOS_snprintf, but it ensures that the last character of the buffer is always '\\0', something which I'd like to avoid since NumPy strings allow the value to fill up everything with no NULL terminator.\n",
        "createdAt" : "2011-06-21T15:03:05Z",
        "updatedAt" : "2011-06-21T15:22:23Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c1c7a86057e72490268f084a4e77d857997312b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +968,972 @@     */\n#ifdef _WIN32\n    tmplen = _snprintf(substr, sublen, \"%04\" NPY_INT64_FMT, dts->year);\n#else\n    tmplen = snprintf(substr, sublen, \"%04\" NPY_INT64_FMT, dts->year);"
  },
  {
    "id" : "26853ab5-f0f4-455d-aa68-93d9ec762e78",
    "prId" : 93,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd3c59f0-2035-4528-9551-35bba4a8726d",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Is '0' safe in this context? Maybe a subroutine for the string conversion? Looks like a micro-optimization.\n",
        "createdAt" : "2011-06-21T04:31:27Z",
        "updatedAt" : "2011-06-21T15:22:22Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2c9c7375-e843-4e12-8dc9-a5b93230dfae",
        "parentId" : "cd3c59f0-2035-4528-9551-35bba4a8726d",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "Yeah, '0' is just a number. I wasn't trying to optimize it, it was just shorter to write and looks pretty clear to my eyes. If you really think it needs a function I could change it I suppose.\n",
        "createdAt" : "2011-06-21T15:06:16Z",
        "updatedAt" : "2011-06-21T15:22:23Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      },
      {
        "id" : "86095a1b-71ca-4b23-8992-2d93c9a198fc",
        "parentId" : "cd3c59f0-2035-4528-9551-35bba4a8726d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I was mostly concerned that it could depend on the character set, although that is probably unlikely.\n",
        "createdAt" : "2011-06-22T03:18:24Z",
        "updatedAt" : "2011-06-22T03:18:24Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c1c7a86057e72490268f084a4e77d857997312b",
    "line" : 1245,
    "diffHunk" : "@@ -1,1 +1243,1247 @@            goto string_too_short;\n        }\n        substr[0] = (char)((timezone_offset / (10*60)) % 10 + '0');\n        if (sublen < 2 ) {\n            goto string_too_short;"
  },
  {
    "id" : "da8747d7-0903-4c99-b3ca-5412bed55ca5",
    "prId" : 2858,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4de4e51-beb6-4727-ac0b-70391054b007",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "64 bit linux allow negative time, it seems it is windows where it is unsigned. That's not to say the comment is incorrect for the code ;)\n",
        "createdAt" : "2012-12-27T22:27:14Z",
        "updatedAt" : "2012-12-27T23:30:41Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "bed42de0-fd0a-46be-b296-bc151ea17f3b",
        "parentId" : "f4de4e51-beb6-4727-ac0b-70391054b007",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK, I see the following text clarifies this.\n",
        "createdAt" : "2012-12-27T22:28:53Z",
        "updatedAt" : "2012-12-27T23:30:41Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "1071f3d6-784a-401a-96f0-32208bbc2cf6",
        "parentId" : "f4de4e51-beb6-4727-ac0b-70391054b007",
        "authorId" : "041ba948-3afd-44ae-9741-f412d7673058",
        "body" : "Yes. If you know a better formulation, let me know.\n",
        "createdAt" : "2012-12-27T23:22:16Z",
        "updatedAt" : "2012-12-27T23:30:41Z",
        "lastEditedBy" : "041ba948-3afd-44ae-9741-f412d7673058",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a99edc3c6ae2c48c0f21d1bce5553a8540b85e0",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +43,47 @@ * converts a time value to a time structure in the local timezone.\n * If size(NPY_TIME_T) == 4, then years must be between 1970 and 2038. If\n * size(NPY_TIME_T) == 8, then years must be later than 1970. If the years are\n * not in this range, then get_localtime() will fail on some platforms.\n *"
  },
  {
    "id" : "ecf45e26-5595-4705-82cc-be66376d760e",
    "prId" : 6453,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad1c597d-cd43-4b99-abc6-c028a160a178",
        "parentId" : null,
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "Probably would be good to add information about the `utc` parameter to the doc comment.\n",
        "createdAt" : "2016-01-12T21:02:40Z",
        "updatedAt" : "2016-01-17T00:35:46Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      },
      {
        "id" : "01538aac-2b4a-4a38-807e-5f8946e4251f",
        "parentId" : "ad1c597d-cd43-4b99-abc6-c028a160a178",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Added a note.\n\nI'm not really happy with defining a new variable `utc` here -- I'd rather use a string or some sort of enum type as the function parameter -- but this was the easiest thing to do (given my poor knowledge of C).\n",
        "createdAt" : "2016-01-13T05:10:48Z",
        "updatedAt" : "2016-01-17T00:35:46Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "da98bbc030c272edb1a8548a458b3957e29ce346",
    "line" : 314,
    "diffHunk" : "@@ -1,1 +887,891 @@NPY_NO_EXPORT int\nmake_iso_8601_datetime(npy_datetimestruct *dts, char *outstr, int outlen,\n                    int local, int utc, NPY_DATETIMEUNIT base, int tzoffset,\n                    NPY_CASTING casting)\n{"
  }
]