[
  {
    "id" : "4943dda2-6aa3-4be3-b0cb-92be8ca2343f",
    "prId" : 5594,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e485676-95c3-476e-be2b-c0a04cddc2cb",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, might be better to move this section up before line:513 as the more likely case. Some redundant computations also. Might be possible to make this a loop of some sort. Just sayin' might be worth a second look.\n",
        "createdAt" : "2015-03-09T03:41:00Z",
        "updatedAt" : "2015-03-09T03:41:00Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6b558e27-b8fb-482d-8a57-142df2ea8a7f",
        "parentId" : "5e485676-95c3-476e-be2b-c0a04cddc2cb",
        "authorId" : "0e6bf86e-4d40-42bd-9fe4-3d493f6e043b",
        "body" : "@charris  I don't understand the comment about \"before line:513\" -- \nThe code between line 513:518 ensures `guess` is in range.\n\nRe: redundancies (I think only access of `arr[guess]`, `arr[guess + 1]` and `arr[guess - 1]`).  I thought this did not warrant making local variables, and to let the compiler optimize this.\n\nThe code between line 532:538 could be removed -- it's probably too machine-dependent, and seems to help only for a limited kind of \"not well-ordered\" data.   Otherwise, it's not likely to do any harm, but that might be faint praise.\n",
        "createdAt" : "2015-03-09T04:09:03Z",
        "updatedAt" : "2015-03-09T04:09:03Z",
        "lastEditedBy" : "0e6bf86e-4d40-42bd-9fe4-3d493f6e043b",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb21e7d5769ba705d02cca196acf8e3e8f15eef3",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +518,522 @@    }\n\n    /* check most likely values: guess, guess + 1, guess - 1 */\n    if ((key > arr[guess]) && (key <= arr[guess + 1])) {\n        return guess;"
  },
  {
    "id" : "ea9b3a9b-b148-47d6-acdc-e632c5fd89c4",
    "prId" : 5594,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46d2f032-0a27-4693-8f29-3a2cfca9fae8",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "With `len == 1` or `len == 2` you can go into this branch with `guess == 0` or `guess == 1`, which will leave `guess` pointing outside the array, and cause a segmentation fault in the next few lines.\n\nNot sure what the best solution is. I think the ideal situation would be to special-case anything with `len < 4` (I would suggest a linear search ignoring `guess`), and for the larger arrays make sure in this normalization that `guess >= 1` and `guess <= len - 3`, so that the testing of the three most likely intervals can be done with no extra checking with a couple of nested branches, e.g.:\n\n```\nassert(guess >=1 && guess <= len-3);\n\nif (key > arr[guess]) {\n    if (key <= arr[guess + 1]) {\n        return guess;\n    }\n    else if (key <= arr[guess + 2]) {\n        return guess + 1;\n    }\n    imin = guess + 2;\n}\nelse if (key > arr[guess - 1]) {\n    return guess - 1;\n}\nelse {\n    imax = guess - 1;\n}\n```\n",
        "createdAt" : "2015-03-09T23:44:58Z",
        "updatedAt" : "2015-03-09T23:44:58Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "ab051fdb-f669-4c19-abe9-69317ba9e11f",
        "parentId" : "46d2f032-0a27-4693-8f29-3a2cfca9fae8",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "nice catch, swapping the if's and making the else if an if should work too, I'll do some testing with avoiding range checks in an followup\n",
        "createdAt" : "2015-03-09T23:49:20Z",
        "updatedAt" : "2015-03-09T23:49:20Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "0c00b3b4-7ec4-4376-b6e2-154b8686e663",
        "parentId" : "46d2f032-0a27-4693-8f29-3a2cfca9fae8",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Oops.\n\nI like your solution though, it is more in line with what I was thinking.\n",
        "createdAt" : "2015-03-09T23:50:15Z",
        "updatedAt" : "2015-03-09T23:50:15Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "761b6e1f-28c7-42d2-a03b-e28f48ca8a47",
        "parentId" : "46d2f032-0a27-4693-8f29-3a2cfca9fae8",
        "authorId" : "0e6bf86e-4d40-42bd-9fe4-3d493f6e043b",
        "body" : "Sorry that I hadn't consider very short arrays. I would just put a `if (len > 16){  }` test around the whole set of tests involving the value of guess, and not bother trying to optimize for very small arrays.\n",
        "createdAt" : "2015-03-10T02:34:31Z",
        "updatedAt" : "2015-03-10T02:48:44Z",
        "lastEditedBy" : "0e6bf86e-4d40-42bd-9fe4-3d493f6e043b",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb21e7d5769ba705d02cca196acf8e3e8f15eef3",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +515,519 @@    }\n    else if (guess >= len - 1) {\n        guess = len - 2;\n    }\n"
  },
  {
    "id" : "4bc85790-f108-4f4d-9e8c-910cc480810e",
    "prId" : 6872,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6775e17-2866-4aa1-8d1b-692aa384f793",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "also, add a blank line here between functions\n",
        "createdAt" : "2016-05-10T22:14:12Z",
        "updatedAt" : "2016-05-12T20:59:08Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "6aa21ad951e8334ba3d3ac677390f7afe76cd242",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +839,843 @@    Py_XDECREF(af);\n    return NULL;\n}\n\n/*"
  },
  {
    "id" : "ef5355d3-81d7-41d9-bf7d-d5c54f82c5d8",
    "prId" : 7003,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "567a7699-3d02-4699-813f-46c9639cb184",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "You could make this check part of the main loop, and spare yourself an extra iteration over mask.  It would be (the main loop) something like:\n\n``` C\nnpy_bool empty_values = 0;\nfor (i = 0; i < ni; i++) {\n    if (mask_data[i]) {\n        if (j >= nv) {\n            if (nv == 0) {\n                empty_values = 1;\n                break;\n            }\n            j = 0\n        }\n        copyswap(dest + i*chunk, src + j*chunk, 0, array);\n        j++;\n    }\n}\nif (empty_values) {\n    PyErr_SetString(PyExc_ValueError,\n                    \"Cannot insert from an empty array!\");\n}\n```\n\nEven if you decide to keep the emptiness check separate, testing for `j >= nv` only when a value is actually needed is probably a good idea.\n",
        "createdAt" : "2016-01-29T06:36:39Z",
        "updatedAt" : "2016-03-15T14:05:10Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "506f4846-c240-4783-8ff8-800c8b2336cd",
        "parentId" : "567a7699-3d02-4699-813f-46c9639cb184",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "Agreed.  I moved the `j >= nv` check inside.\n",
        "createdAt" : "2016-01-29T21:32:07Z",
        "updatedAt" : "2016-03-15T14:05:10Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      }
    ],
    "commit" : "9128ed5198cc8544406467a00824e5fe6791f090",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +360,364 @@\n    nv = PyArray_SIZE(values); /* zero if null array */\n    if (nv <= 0) {\n        npy_bool allFalse = 1;\n        i = 0;"
  },
  {
    "id" : "40c2a6da-90a7-476e-bb07-88c184540492",
    "prId" : 8326,
    "prUrl" : "https://github.com/numpy/numpy/pull/8326#pullrequestreview-12786580",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43ca9741-480b-47e5-ab61-74f87515459f",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I wonder if it might be faster to use a local buffer and the lookup table, then copy the result to the destination?",
        "createdAt" : "2016-12-05T18:51:18Z",
        "updatedAt" : "2017-01-12T16:26:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6ba060db-3bea-4e95-a0a7-da36f667cfd7",
        "parentId" : "43ca9741-480b-47e5-ab61-74f87515459f",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Or just copy from the table directly with the stride for the output pointer.",
        "createdAt" : "2016-12-05T20:13:54Z",
        "updatedAt" : "2017-01-12T16:26:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "962413f4-5543-4d36-9895-73d5d43995e2",
        "parentId" : "43ca9741-480b-47e5-ab61-74f87515459f",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "I don't think this would be faster, you need a 8 element loop anyway and the original one is pretty fast already.",
        "createdAt" : "2016-12-13T21:46:57Z",
        "updatedAt" : "2017-01-12T16:26:40Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2a47486a4ccaa141ceeb585e24b2be17b359998",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +1773,1777 @@                unsigned char mask = 128;\n\n                for (i = 0; i < 8; i++) {\n                    *outptr = ((mask & (*inptr)) != 0);\n                    outptr += out_stride;"
  },
  {
    "id" : "37d274b9-2cbf-48e1-96a2-8d2388726c01",
    "prId" : 8348,
    "prUrl" : "https://github.com/numpy/numpy/pull/8348#pullrequestreview-29037020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dfe5e6a9-ee9f-4bea-9a1d-32c49c69dbee",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "I suppose we can't do it because backwards compatibility... But the temptation is strong to change the `PyArg_ParseTupleAndKeywords` format string to `\"O|On\"` and get rid of the `mlength` variable and the `None` handling logic altogether...",
        "createdAt" : "2016-12-06T09:32:15Z",
        "updatedAt" : "2017-03-25T06:51:07Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "5f287fc6-2346-4ee7-9c32-5195db74e7d9",
        "parentId" : "dfe5e6a9-ee9f-4bea-9a1d-32c49c69dbee",
        "authorId" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "body" : "It is very strong.  Note that I did change the docstring to pretend this is the case...",
        "createdAt" : "2016-12-06T18:51:19Z",
        "updatedAt" : "2017-03-25T06:51:07Z",
        "lastEditedBy" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "tags" : [
        ]
      },
      {
        "id" : "9ae44a2c-eeac-4102-9e79-bb528068ed74",
        "parentId" : "dfe5e6a9-ee9f-4bea-9a1d-32c49c69dbee",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "Yes, I did notice, much better default if you ask me.",
        "createdAt" : "2016-12-07T09:48:14Z",
        "updatedAt" : "2017-03-25T06:51:07Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "16f73836-1045-4b77-b5c4-7b6e35ba6d50",
        "parentId" : "dfe5e6a9-ee9f-4bea-9a1d-32c49c69dbee",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Would be great to add a deprecation warning for passing `None` here, so that down the line we have an option to remove it",
        "createdAt" : "2017-03-25T01:50:08Z",
        "updatedAt" : "2017-03-25T06:51:07Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec6d4295a80e5df235d3f5445e6425581309c930",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +116,120 @@    }\n    else {\n        minlength = PyArray_PyIntAsIntp(mlength);\n        if (minlength < 0) {\n            if (!PyErr_Occurred()) {"
  },
  {
    "id" : "5ea81dd5-c2be-4616-a066-d36f3ea06ff8",
    "prId" : 9065,
    "prUrl" : "https://github.com/numpy/numpy/pull/9065#pullrequestreview-47538117",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d2c5678-4d72-49b7-a87c-b7730ae8d457",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Documentation calls this argument 'x', but `bincount(x=1)` complains that no `list` argument was passed.\r\n\r\nDo we change the docs, or the real kwarg name?",
        "createdAt" : "2017-07-01T22:29:09Z",
        "updatedAt" : "2017-10-18T02:46:53Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9b99715be1844ce4c612dc66275f1bc662a0af8",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +154,158 @@    if (mn < 0) {\n        PyErr_SetString(PyExc_ValueError,\n                \"'list' argument must have no negative elements\");\n        goto fail;\n    }"
  },
  {
    "id" : "ba0aa088-6458-44cd-a264-69ca49170601",
    "prId" : 10740,
    "prUrl" : "https://github.com/numpy/numpy/pull/10740#pullrequestreview-104771692",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58166f44-8253-4ca8-a626-28d3967ddb45",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "What happens if you just always declare this `const`?",
        "createdAt" : "2018-03-17T01:08:58Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "da905e9d-1cb8-4de8-9d59-b3a0b6b164c7",
        "parentId" : "58166f44-8253-4ca8-a626-28d3967ddb45",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Fails. I tried that earlier, and `const char *` warns on assignment to the docstring. The type of the latter seems to have also been changed in Python 3.7 with the addition of `const`.",
        "createdAt" : "2018-03-17T01:39:33Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6a17d2e3-1358-460e-b541-8133f19a227a",
        "parentId" : "58166f44-8253-4ca8-a626-28d3967ddb45",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Could also fix this with a cast at the assignment location, but I guess fine to leave it.\r\n",
        "createdAt" : "2018-03-17T16:46:59Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9c53d73b80b52b36dd2f71e1e47aeaf682742ec",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1407,1411 @@    #else\n    char *docstr;\n    #endif\n    static char *msg = \"already has a docstring\";\n    PyObject *tp_dict = PyArrayDescr_Type.tp_dict;"
  },
  {
    "id" : "a2162e18-3712-47f7-8da7-e336631fb94c",
    "prId" : 10797,
    "prUrl" : "https://github.com/numpy/numpy/pull/10797#pullrequestreview-108536413",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "388921ed-4230-4da9-a37a-5d38fddd29b0",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "This is not so bad for a function for which speed is probably not of the essence, but wouldn't you rather look for `dims` only if the parsing failed with the newer order?",
        "createdAt" : "2018-04-02T00:12:20Z",
        "updatedAt" : "2018-10-16T17:07:24Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "a127aa63-4523-48bd-aa43-7d5d3e8af4fe",
        "parentId" : "388921ed-4230-4da9-a37a-5d38fddd29b0",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "Is it unambiguously clear that there's a substantially faster alternative implementation that both works and maintains code clarity? Obviously, I'll switch if there is.\r\n\r\nThe primary reasoning behind my strategy here was to avoid touching the presumably solid keyword Error handling code to the extent possible & just swap the new keyword in at the C API level if the old one is used.",
        "createdAt" : "2018-04-02T00:49:20Z",
        "updatedAt" : "2018-10-16T17:07:24Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "73e5ea24-53f5-4b03-9ac7-af03093acbdf",
        "parentId" : "388921ed-4230-4da9-a37a-5d38fddd29b0",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "It is not a big deal. My main logic was not to hinder the \"standard\" code path at all.",
        "createdAt" : "2018-04-02T01:47:34Z",
        "updatedAt" : "2018-10-16T17:07:24Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "11b9f6c4c477c0778080820ef36cfd61ef70abb6",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1165,1169 @@\n\n    if (kwds) {\n        PyObject *dims_item, *shape_item;\n        dims_item = PyDict_GetItemString(kwds, \"dims\");"
  },
  {
    "id" : "c5e61754-b1f2-42bc-95dc-4ada0d62005f",
    "prId" : 10797,
    "prUrl" : "https://github.com/numpy/numpy/pull/10797#pullrequestreview-165277923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0a00763-49cd-421a-8f58-9d369ef3a3a7",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "Strictly speaking, this comment is slightly out of line with NumPy formatting standards -- I think this was one of my first C level NumPy PRs.",
        "createdAt" : "2018-10-16T17:12:13Z",
        "updatedAt" : "2018-10-16T17:12:14Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "f931e727-2594-41b0-96e7-996241b63944",
        "parentId" : "f0a00763-49cd-421a-8f58-9d369ef3a3a7",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "Maybe not a big deal though",
        "createdAt" : "2018-10-16T17:13:41Z",
        "updatedAt" : "2018-10-16T17:13:42Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "92da7825-7ea9-49c3-b731-1dc36f0fc48d",
        "parentId" : "f0a00763-49cd-421a-8f58-9d369ef3a3a7",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I noticed but didn't comment on it, I think we need to automate some of these style fixups. But if you do another push on this PR, go ahead and fix it up.",
        "createdAt" : "2018-10-16T17:26:21Z",
        "updatedAt" : "2018-10-16T17:26:22Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "11b9f6c4c477c0778080820ef36cfd61ef70abb6",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1162,1166 @@     * of the \"shape\" argument. Issue an appropriate warning\n     * if \"dims\" is detected in keywords, then replace it with\n     * the new \"shape\" argument and continue processing as usual */\n\n"
  },
  {
    "id" : "e8190b69-d735-4363-b09a-4350e5f3386a",
    "prId" : 10797,
    "prUrl" : "https://github.com/numpy/numpy/pull/10797#pullrequestreview-165286978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "260c7a85-1b3c-449f-b44e-c8ad720faa6d",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "```suggestion\r\n    /*\r\n     * Continue to support the older \"dims\" argument in place\r\n```",
        "createdAt" : "2018-10-16T17:47:34Z",
        "updatedAt" : "2018-10-16T17:48:27Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "11b9f6c4c477c0778080820ef36cfd61ef70abb6",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1159,1163 @@    char *kwlist[] = {\"indices\", \"shape\", \"order\", NULL};\n\n    /* Continue to support the older \"dims\" argument in place\n     * of the \"shape\" argument. Issue an appropriate warning\n     * if \"dims\" is detected in keywords, then replace it with"
  },
  {
    "id" : "4d869dff-abc9-403a-8423-016b047f972c",
    "prId" : 10797,
    "prUrl" : "https://github.com/numpy/numpy/pull/10797#pullrequestreview-165286978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "412ddd74-51f3-4d8c-b96d-692965fdc0ed",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "```suggestion\r\n     * the new \"shape\" argument and continue processing as usual\r\n     */\r\n```",
        "createdAt" : "2018-10-16T17:47:41Z",
        "updatedAt" : "2018-10-16T17:48:27Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "11b9f6c4c477c0778080820ef36cfd61ef70abb6",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1162,1166 @@     * of the \"shape\" argument. Issue an appropriate warning\n     * if \"dims\" is detected in keywords, then replace it with\n     * the new \"shape\" argument and continue processing as usual */\n\n"
  },
  {
    "id" : "2a9a5bc8-7fd1-4966-b904-5be1ab7f100f",
    "prId" : 10855,
    "prUrl" : "https://github.com/numpy/numpy/pull/10855#pullrequestreview-191943116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0a34004-4809-487b-a066-0297674eaf20",
        "parentId" : null,
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "For review: `count_obj` is a borrowed reference up to this point. Is that going to be OK here?",
        "createdAt" : "2018-04-08T06:41:34Z",
        "updatedAt" : "2019-02-25T15:22:35Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "27bc3342-0915-44bc-a654-f7e25d25cfc0",
        "parentId" : "e0a34004-4809-487b-a066-0297674eaf20",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "As I said on the other place, I think this would be much better moved into the origial parsing and count passed in as an `int`. (otherwise yes, it would be completely fine as a borrowed reference)",
        "createdAt" : "2019-01-12T16:29:17Z",
        "updatedAt" : "2019-02-25T15:22:35Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "df00dbf6e5d2c4957da9f3e0c171bda292009c2f",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +1722,1726 @@    outdims[axis] *= 8;\n    if (count_obj != Py_None) {\n        count = PyArray_PyIntAsIntp(count_obj);\n        if (error_converting(count)) {\n            goto fail;"
  },
  {
    "id" : "5993b788-b037-4688-9571-02f86fd4ffac",
    "prId" : 10855,
    "prUrl" : "https://github.com/numpy/numpy/pull/10855#pullrequestreview-192398236",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "faea1ad2-a320-46f4-973e-402d555d606a",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Since you use PyErr_Format, maybe use it ;). Should be OK though, could likely be more clear, but can't think of something right away.",
        "createdAt" : "2019-01-12T16:31:36Z",
        "updatedAt" : "2019-02-25T15:22:35Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "8e2bd82c-60b0-4fb4-8d6f-a089250da55f",
        "parentId" : "faea1ad2-a320-46f4-973e-402d555d606a",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "I will leave this as-is for now.",
        "createdAt" : "2019-01-14T22:37:56Z",
        "updatedAt" : "2019-02-25T15:22:35Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      }
    ],
    "commit" : "df00dbf6e5d2c4957da9f3e0c171bda292009c2f",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +1730,1734 @@            if (outdims[axis] < 0) {\n                PyErr_Format(PyExc_ValueError,\n                             \"-count larger than number of elements\");\n                goto fail;\n            }"
  },
  {
    "id" : "977c2c15-9f18-4b70-98fd-370528d590e8",
    "prId" : 10855,
    "prUrl" : "https://github.com/numpy/numpy/pull/10855#pullrequestreview-192427101",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d1ee036-a112-40bb-8de9-9f7a080bc5de",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I think I would change the logic here. Why do you defer parsing `count` to the helper function, much easier to convert it here?",
        "createdAt" : "2019-01-12T16:34:31Z",
        "updatedAt" : "2019-02-25T15:22:35Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "b6fe3f40-661b-4110-8958-142df2ac2c9f",
        "parentId" : "5d1ee036-a112-40bb-8de9-9f7a080bc5de",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "To convert `count` when it is `Py_None`, you need to first process `in` and `axis` to get the size along that axis. I'll look into it.",
        "createdAt" : "2019-01-14T22:11:17Z",
        "updatedAt" : "2019-02-25T15:22:35Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "62250eb9-488b-4979-a2fc-4be67fab861b",
        "parentId" : "5d1ee036-a112-40bb-8de9-9f7a080bc5de",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "Having looked into this, I really don't think it's worth doing the conversion in the wrapper function. I will have to pass in an `int *`, to allow it to be NULL, at which point why even bother? I think the conversion and usage are complicated enough to leave here.",
        "createdAt" : "2019-01-14T22:43:44Z",
        "updatedAt" : "2019-02-25T15:22:35Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "538158da-ae1a-4850-860d-73fd09d47033",
        "parentId" : "5d1ee036-a112-40bb-8de9-9f7a080bc5de",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yeah, I am sure that is right, was just a thought.",
        "createdAt" : "2019-01-14T23:54:02Z",
        "updatedAt" : "2019-02-25T15:22:35Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "df00dbf6e5d2c4957da9f3e0c171bda292009c2f",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +1883,1887 @@    if (!PyArg_ParseTupleAndKeywords(args, kwds, \"O|O&O:unpack\" , kwlist,\n                                     &obj, PyArray_AxisConverter, &axis,\n                                     &count)) {\n        return NULL;\n    }"
  },
  {
    "id" : "1c5b5337-afba-4386-a0d5-c84c1d648adb",
    "prId" : 10855,
    "prUrl" : "https://github.com/numpy/numpy/pull/10855#pullrequestreview-203925689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fcf4b95-bd8a-4c42-8481-7e43afca8ab4",
        "parentId" : null,
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "@seberg. As you can see here, `myarray` was never an option to begin with. The documented keyword name never actually what the function was parsing, and the name being parsed was an illegal name. Although I suppose you could do\r\n\r\n```\r\nkw = {'in': ...}\r\nunpackbits(**kw)\r\n```",
        "createdAt" : "2019-02-07T23:23:06Z",
        "updatedAt" : "2019-02-25T15:22:36Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "cceb1391-e7a4-426b-8697-77cc896cab84",
        "parentId" : "7fcf4b95-bd8a-4c42-8481-7e43afca8ab4",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Fair enough. `a` is better anyway. I wonder if we should at some point work on unifying most of these names (basically a backward incompatible change that would in practice probably hit almost no-one).",
        "createdAt" : "2019-02-14T19:23:21Z",
        "updatedAt" : "2019-02-25T15:22:36Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "df00dbf6e5d2c4957da9f3e0c171bda292009c2f",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +1863,1867 @@    PyObject *obj;\n    int axis = NPY_MAXDIMS;\n    static char *kwlist[] = {\"a\", \"axis\", NULL};\n\n    if (!PyArg_ParseTupleAndKeywords(args, kwds, \"O|O&:pack\" , kwlist,"
  },
  {
    "id" : "66e50cde-0251-4293-9c44-7cedb84bb855",
    "prId" : 11684,
    "prUrl" : "https://github.com/numpy/numpy/pull/11684#pullrequestreview-220835965",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f69060b-4757-46a7-8422-c368ea3b41f8",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Missing decref of `ret`",
        "createdAt" : "2019-03-29T16:40:30Z",
        "updatedAt" : "2019-03-30T20:16:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "4290370a-7e5b-4df9-97a0-d7a91e225540",
        "parentId" : "2f69060b-4757-46a7-8422-c368ea3b41f8",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "fixed",
        "createdAt" : "2019-03-30T20:15:26Z",
        "updatedAt" : "2019-03-30T20:16:32Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ed097bbd6c07af9a81f310a10654f73a2a19d9c",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +868,872 @@    if (!(PyArray_ISINTEGER(ret) || PyArray_ISBOOL(ret))) {\n        /* ensure dtype is int-based */\n        PyErr_SetString(PyExc_TypeError, NON_INTEGRAL_ERROR_MSG);\n        Py_DECREF(ret);\n        return NULL;"
  },
  {
    "id" : "4337b847-2696-4cfc-a6b4-370873cd5acd",
    "prId" : 12989,
    "prUrl" : "https://github.com/numpy/numpy/pull/12989#pullrequestreview-205874953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a047db3-5caa-4364-861f-f7c6aa45156e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Perhaps instead of `_subtract_not_nan`, I should add one more clause here:\r\n```\r\nif (NPY_UNLIKELY(npy_isnan(dres[i])) && dy[j+1] == d[y]) {\r\n    dres[i] = dy[j];\r\n}\r\n```",
        "createdAt" : "2019-02-20T08:28:20Z",
        "updatedAt" : "2019-02-24T23:48:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ed54d8cb-9f09-401e-b441-f15f3334be1b",
        "parentId" : "5a047db3-5caa-4364-861f-f7c6aa45156e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Done, this helps significantly, and catches a case I missed too.",
        "createdAt" : "2019-02-20T16:49:51Z",
        "updatedAt" : "2019-02-24T23:48:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0139a2d118ddfcff5a0139a016be826dbc44854f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +615,619 @@                        dres[i] = dy[j];\n                    }\n                }\n            }\n        }"
  },
  {
    "id" : "ee207931-57d4-49cb-81ac-32b25f81b0d7",
    "prId" : 12989,
    "prUrl" : "https://github.com/numpy/numpy/pull/12989#pullrequestreview-207514084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55a8c6e8-f10c-40f7-ac1f-441e637d47e1",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Looking over it a last time. I think this should be `dx[j+1] - x_val`. It probably never matters, because the only possible way it can normally make a difference is when the slope is 0. But, to be sure about wonky edge-cases...",
        "createdAt" : "2019-02-25T15:49:16Z",
        "updatedAt" : "2019-02-25T15:49:16Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "117a9524-1a98-41d9-bee1-43458559a505",
        "parentId" : "55a8c6e8-f10c-40f7-ac1f-441e637d47e1",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This branch is the one where slope is maybe non-zero (most likely inf). I'm pretty sure this is correct as is. As written, that term will be negative, which is necessary to interpolate the slope backwards rather than forward.",
        "createdAt" : "2019-02-25T16:33:05Z",
        "updatedAt" : "2019-02-25T16:33:05Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "4aa42651-d812-460f-8276-285d16fd5ce8",
        "parentId" : "55a8c6e8-f10c-40f7-ac1f-441e637d47e1",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Ooops, messed that one up sorry.",
        "createdAt" : "2019-02-25T16:59:47Z",
        "updatedAt" : "2019-02-25T16:59:47Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0139a2d118ddfcff5a0139a016be826dbc44854f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +611,615 @@                dres[i] = slope*(x_val - dx[j]) + dy[j];\n                if (NPY_UNLIKELY(npy_isnan(dres[i]))) {\n                    dres[i] = slope*(x_val - dx[j+1]) + dy[j+1];\n                    if (NPY_UNLIKELY(npy_isnan(dres[i])) && dy[j] == dy[j+1]) {\n                        dres[i] = dy[j];"
  },
  {
    "id" : "41d4135b-74f4-449f-b18e-3415b8f5eedb",
    "prId" : 13446,
    "prUrl" : "https://github.com/numpy/numpy/pull/13446#pullrequestreview-232473354",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2803d014-7712-4c55-b6f4-52d9d6045e9c",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "This was the bit @charris pointed out could be [optimized](https://godbolt.org/z/tP-qwq) nicely by putting the divide first and using a temporary variable",
        "createdAt" : "2019-05-01T01:31:12Z",
        "updatedAt" : "2019-05-01T17:59:16Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cb33740a22ca898d84ea36be25e142707057485",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +1171,1175 @@            coords[idx] = val % unravel_dims[idx];\n            val = tmp;\n            idx += idx_step;\n        }\n        coords += unravel_ndim;"
  },
  {
    "id" : "97d496d3-a85c-436e-9597-ca7713d8312f",
    "prId" : 13541,
    "prUrl" : "https://github.com/numpy/numpy/pull/13541#pullrequestreview-237401230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "225239ce-9cd6-4aa7-ae22-8ad5eafb2b42",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Aside: If you're feeling adventurous - you might be able to make a similar optimization for `out_stride == -1`",
        "createdAt" : "2019-05-13T02:04:39Z",
        "updatedAt" : "2019-05-14T17:40:07Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "78490259-f8a3-480d-ab83-3f56e9bb2b7f",
        "parentId" : "225239ce-9cd6-4aa7-ae22-8ad5eafb2b42",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "I'm not sure that can even happen as the output is allocated by the same function and should not have negative strides\r\nbut even if its probably unnecessary to have that little extra in the code, use cases are unlikely",
        "createdAt" : "2019-05-14T17:42:17Z",
        "updatedAt" : "2019-05-14T17:42:17Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "82eab1c0ad35c5e91ec50e74609763fa7367e4d7",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +1836,1840 @@        char *outptr = PyArray_ITER_DATA(ot);\n\n        if (out_stride == 1) {\n            /* for unity stride we can just copy out of the lookup table */\n            if (order == 'b') {"
  },
  {
    "id" : "3b504b54-6e59-4c7f-a426-bafba2bdce56",
    "prId" : 13541,
    "prUrl" : "https://github.com/numpy/numpy/pull/13541#pullrequestreview-240238370",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "480b699d-f91b-4dcf-9132-81b4a39b7f4c",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Wouldn't it make sense to still use the lookup table even for stride != 1 (i.e., replace the `memcpy`, not the table reading).",
        "createdAt" : "2019-05-15T17:24:19Z",
        "updatedAt" : "2019-05-15T17:24:20Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "a03b03fa-3c43-4267-af52-8bbd8f3c0226",
        "parentId" : "480b699d-f91b-4dcf-9132-81b4a39b7f4c",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "probably, I never bothered testing as it is probably an edge case, though as we are updating it we might as well go all the way",
        "createdAt" : "2019-05-15T18:11:33Z",
        "updatedAt" : "2019-05-15T18:11:34Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "5ff61148-a625-4d89-ba66-064857b06925",
        "parentId" : "480b699d-f91b-4dcf-9132-81b4a39b7f4c",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "If the proposed changes will take more than a day or two, perhaps we should merge this as-is with a comment for future improvements, since the deadline for 1.17 is soon",
        "createdAt" : "2019-05-16T07:09:07Z",
        "updatedAt" : "2019-05-16T07:09:07Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "a13296a6-7dd7-4fbc-8eb0-44b2a6481e94",
        "parentId" : "480b699d-f91b-4dcf-9132-81b4a39b7f4c",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "I probably won't get to do it, imo this can be merged now",
        "createdAt" : "2019-05-19T17:27:20Z",
        "updatedAt" : "2019-05-19T17:27:21Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "38c6d114-893d-421f-a579-7ee54a58c74b",
        "parentId" : "480b699d-f91b-4dcf-9132-81b4a39b7f4c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Anything holding this up? Otherwise I will make a pass and merge soon (or probably Matti beats me to it ;)).",
        "createdAt" : "2019-05-21T18:39:10Z",
        "updatedAt" : "2019-05-21T18:39:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "de6cc7f0-c2a1-4cea-a914-7a7b7807da31",
        "parentId" : "480b699d-f91b-4dcf-9132-81b4a39b7f4c",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "LGTM. The suggestion to use the table for the strided case is good, but can go in later, we need the fix for 1.17.",
        "createdAt" : "2019-05-21T18:55:51Z",
        "updatedAt" : "2019-05-21T18:55:51Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "82eab1c0ad35c5e91ec50e74609763fa7367e4d7",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +1873,1877 @@            if (order == 'b') {\n                for (index = 0; index < in_n; index++) {\n                    for (i = 0; i < 8; i++) {\n                        *outptr = ((*inptr & (128 >> i)) != 0);\n                        outptr += out_stride;"
  },
  {
    "id" : "928a555b-2101-4a6b-8a07-83852deb4ba7",
    "prId" : 15262,
    "prUrl" : "https://github.com/numpy/numpy/pull/15262#pullrequestreview-338867453",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90a6abee-745d-47cd-9473-e09083ed25cc",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I suppose I could add `NPY_UNLIKELY` to all these, but that makes things rather verbose. I could also add:\r\n```\r\n#define error_converting_obj(x) NPY_UNLIKELY(x == NULL && PyErr_Occurred()\r\n```\r\nto complement the existing `error_converting(x_numeric)` macro.",
        "createdAt" : "2020-01-06T19:22:11Z",
        "updatedAt" : "2020-01-14T15:07:24Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b6d30e99-1c99-4ac6-bb91-d9ef5f26c2ac",
        "parentId" : "90a6abee-745d-47cd-9473-e09083ed25cc",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Don't worry about the `NPY_UNLIKELY` first of all, it optimizes things at the level of 0.2% probably, or less... Second of all. If you care about speed, you should probably intern the string to begin with and not use `GetItemString` at all.\r\n\r\nI am good with the helper function/macro if you feel it makes things a bit more readable though.",
        "createdAt" : "2020-01-06T19:28:26Z",
        "updatedAt" : "2020-01-14T15:07:24Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "d2d95e29-0f47-4c88-acc6-76ca409db7d1",
        "parentId" : "90a6abee-745d-47cd-9473-e09083ed25cc",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "And actually, I think it only optimizes things in any case if there is a bunch of code. But there is only a return or maybe goto there, so it there is no code flow optimization possible to begin with (i.e. much a bunch of code that does not get executed to the back of the function and jump there, so that the normal code flow is contiguous instead of having to jump the bunch of code)",
        "createdAt" : "2020-01-06T19:30:41Z",
        "updatedAt" : "2020-01-14T15:07:24Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "26d974e5-7ba1-4e3f-b9e4-7b4b6e9462a1",
        "parentId" : "90a6abee-745d-47cd-9473-e09083ed25cc",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm happy to leave as is if you are",
        "createdAt" : "2020-01-06T20:10:02Z",
        "updatedAt" : "2020-01-14T15:07:24Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2921434a07c22714bbf242be5389c3056449863",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1446,1450 @@    if (PyMemberDescr_TypePtr == NULL) {\n        myobj = _PyDict_GetItemStringWithError(tp_dict, \"alignment\");\n        if (myobj == NULL && PyErr_Occurred()) {\n            return NULL;\n        }"
  }
]