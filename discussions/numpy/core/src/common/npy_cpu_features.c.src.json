[
  {
    "id" : "5182766e-9f30-4453-8179-850025649d88",
    "prId" : 13421,
    "prUrl" : "https://github.com/numpy/numpy/pull/13421#pullrequestreview-334344817",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec8e72da-fa34-4715-a16b-6a2e1302100d",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "What other compilers are commonly used? Is there an IBM one that is not `__gcc__`?",
        "createdAt" : "2019-12-18T08:18:50Z",
        "updatedAt" : "2020-02-05T04:50:00Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "8f996709-aa98-420e-b3fd-5dc77337646a",
        "parentId" : "ec8e72da-fa34-4715-a16b-6a2e1302100d",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "honestly, I'm not sure but maybe c/c++builder(broland). IBM/XLC doesn't support x86 and it based on clang. ",
        "createdAt" : "2019-12-19T00:20:49Z",
        "updatedAt" : "2020-02-05T04:50:00Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "64f7074d243f72e33bfc74bdbc9fec1d85b117a1",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +106,110 @@#else\n    // TODO: handle other x86 compilers\n    reg[0] = 0;\n#endif\n}"
  },
  {
    "id" : "6a7054e8-cef1-4af6-aa50-b9be6ff4f80f",
    "prId" : 13421,
    "prUrl" : "https://github.com/numpy/numpy/pull/13421#pullrequestreview-333793658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c18cec4-d2f8-46fa-94e3-d5ceac616de6",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "styling small tweak: we prefer\r\n```\r\nNPY_VISIBILITY_HIDDEN int \r\nnpy_cpu_have(int feature_id)\r\n{\r\n```\r\n\r\nIt is then easy to grep for function declarations/definitions since the name is at the beginning of the line",
        "createdAt" : "2019-12-18T08:25:33Z",
        "updatedAt" : "2020-02-05T04:50:00Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "64f7074d243f72e33bfc74bdbc9fec1d85b117a1",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +18,22 @@NPY_VISIBILITY_HIDDEN int\nnpy_cpu_have(int feature_id)\n{\n    if (feature_id <= NPY_CPU_FEATURE_NONE || feature_id >= NPY_CPU_FEATURE_MAX)\n        return 0;"
  },
  {
    "id" : "c91bf13a-a1ed-469e-a723-4fd008e75f03",
    "prId" : 16297,
    "prUrl" : "https://github.com/numpy/numpy/pull/16297#pullrequestreview-417442303",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86e76d54-9e8f-4854-90f0-41c4d576e387",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Why wasn't this tripping CI previously? Is this code never called currently?",
        "createdAt" : "2020-05-24T07:39:04Z",
        "updatedAt" : "2020-05-25T07:46:47Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "d7786120-92c7-4a26-9ce3-99cf64146d12",
        "parentId" : "86e76d54-9e8f-4854-90f0-41c4d576e387",
        "authorId" : "16f8768b-62bb-468a-bef5-f7adfae4fef5",
        "body" : "The tripping CI is succeed again, This code will called if compiled in X86 machine.",
        "createdAt" : "2020-05-25T01:09:18Z",
        "updatedAt" : "2020-05-25T07:46:47Z",
        "lastEditedBy" : "16f8768b-62bb-468a-bef5-f7adfae4fef5",
        "tags" : [
        ]
      },
      {
        "id" : "19be3d42-8117-4254-9822-9e66f0c1b23c",
        "parentId" : "86e76d54-9e8f-4854-90f0-41c4d576e387",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "@matip, by default GCC use macOS assembler (/usr/bin/as) that validating instructions during compile time, so to tripping it we need GCC with an old version of macOS. back in days, I used to replace it with clang assembler to avoid such issues like this. [see this one.](https://gist.github.com/xianyi/2957847)",
        "createdAt" : "2020-05-25T03:46:39Z",
        "updatedAt" : "2020-05-25T07:46:47Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "81c14845e9d731ff4fb3d1d6eeae8795b598e8a0",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +81,85 @@    */\n    unsigned int eax, edx;\n    __asm(\".byte 0x0F, 0x01, 0xd0\" : \"=a\"(eax), \"=d\"(edx) : \"c\"(0));\n    return eax;\n#else"
  },
  {
    "id" : "a3d3d463-9c39-4dfd-a158-c8e7fbf33c8e",
    "prId" : 16321,
    "prUrl" : "https://github.com/numpy/numpy/pull/16321#pullrequestreview-416635969",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a489870-5e8f-4aaa-a729-6dd5bf1e5ef0",
        "parentId" : null,
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "No need for duplicate parsing.  You can fill `hwcap` and `hwcap2` bits from `/proc/cpuinfo` in here, only when parsing `auxv` fail.",
        "createdAt" : "2020-05-22T01:52:37Z",
        "updatedAt" : "2020-06-08T04:04:14Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      },
      {
        "id" : "463d2e79-bcfe-469d-aa09-0181f0401615",
        "parentId" : "8a489870-5e8f-4aaa-a729-6dd5bf1e5ef0",
        "authorId" : "16f8768b-62bb-468a-bef5-f7adfae4fef5",
        "body" : "reordered to getauxval  --> auxv --> cpuinfo.",
        "createdAt" : "2020-05-22T04:10:24Z",
        "updatedAt" : "2020-06-08T04:04:14Z",
        "lastEditedBy" : "16f8768b-62bb-468a-bef5-f7adfae4fef5",
        "tags" : [
        ]
      }
    ],
    "commit" : "fef3e0158cfb464c375aaa731b21c34a018e545a",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +320,324 @@        /*\n         * try parsing with /proc/cpuinfo, if sandboxed\n         * failback to compiler definitions\n        */\n        if(!get_feature_from_proc_cpuinfo(&hwcap, &hwcap2)) {"
  },
  {
    "id" : "be67ff8c-5bcb-47c6-b888-cfa3a428d9de",
    "prId" : 16395,
    "prUrl" : "https://github.com/numpy/numpy/pull/16395#pullrequestreview-442179483",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0db72db0-5337-4b9d-bcc6-dd0d7ba31aee",
        "parentId" : null,
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "@mattip, I added extra separators, comma, and ascii2 special characters to make it more friendly with POSIX",
        "createdAt" : "2020-07-03T06:42:02Z",
        "updatedAt" : "2020-07-08T13:16:11Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "28d8b1790763c28ad4f53a1e31a3adba0d7ccb75",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +200,204 @@\n    //comma and space including (htab, vtab, CR, LF, FF)\n    const char *delim = \", \\t\\v\\r\\n\\f\";\n    char *feature = strtok(disable_features, delim);\n    while (feature) {"
  },
  {
    "id" : "24306aaa-7fee-410d-ab93-78673c44f47b",
    "prId" : 16395,
    "prUrl" : "https://github.com/numpy/numpy/pull/16395#pullrequestreview-444755784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2fcd4f19-fa7b-4286-bfe9-cfd766919f9e",
        "parentId" : null,
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "@mattip, sorry but I changed again the format of error/warn messages. please check it again. thank you.",
        "createdAt" : "2020-07-08T13:19:47Z",
        "updatedAt" : "2020-07-08T13:19:47Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "28d8b1790763c28ad4f53a1e31a3adba0d7ccb75",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +178,182 @@    }\n    #define NPY__CPU_ENV_ERR_HEAD \\\n        \"During parsing environment variable 'NPY_DISABLE_CPU_FEATURES':\\n\"\n\n#if !defined(NPY_DISABLE_OPTIMIZATION) && NPY_WITH_CPU_DISPATCH_N > 0"
  }
]