[
  {
    "id" : "249a3245-796d-4d74-a8d0-fc30db37786d",
    "prId" : 3567,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06354cf8-a444-4ae2-91b4-1ef314bd7cbc",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This check result may change long term. Hmm... depends on the casting table, should be safe between integer types.\n",
        "createdAt" : "2013-08-05T04:36:40Z",
        "updatedAt" : "2013-08-30T21:35:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "79e47d18-39aa-4a40-a82a-26ba91653897",
        "parentId" : "06354cf8-a444-4ae2-91b4-1ef314bd7cbc",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I need to check this again to convince myself.\n",
        "createdAt" : "2013-08-28T02:29:49Z",
        "updatedAt" : "2013-08-30T21:35:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ed2c9bfdcd2eded4c42ec485cce8e6e3a69308c",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +815,819 @@        }\n        descr1 = PyArray_DescrFromTypeObject((PyObject *)Py_TYPE(a));\n        if (PyArray_CanCastSafely(descr1->type_num, @TYPE@)) {\n            PyArray_CastScalarDirect(a, descr1, arg1, @TYPE@);\n            Py_DECREF(descr1);"
  },
  {
    "id" : "82d64ff5-91eb-4f21-a845-c9ea289e3a5f",
    "prId" : 3567,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "991a161c-0a57-492c-a015-3c338333f189",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Might be interesting to see how much time is spent in this function. It can call `_typenum_fromtypeobj` which in turn loops through all the types trying to match addresses. With 24 types that might not be the most efficient way. Unfortunately, the addresses aren't necessarily in the same order as the types. But doing anything about that function will depend on if it takes a lot of time.\n",
        "createdAt" : "2013-08-05T05:02:30Z",
        "updatedAt" : "2013-08-30T21:35:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "26bf3bd2-308f-4892-86ee-6509d73ac651",
        "parentId" : "991a161c-0a57-492c-a015-3c338333f189",
        "authorId" : "dd0b7ee8-4e17-4855-aa9e-6c7c9ddba53b",
        "body" : "Just to check the possible improvement, I tried to repalce it with <code>descr1 = PyArray_DescrFromType(@type_num@);</code> where type_num is index number of respective dtype. \n\nI got all similar speedup, but in some place no improvements.\n",
        "createdAt" : "2013-08-19T23:03:13Z",
        "updatedAt" : "2013-08-30T21:35:05Z",
        "lastEditedBy" : "dd0b7ee8-4e17-4855-aa9e-6c7c9ddba53b",
        "tags" : [
        ]
      },
      {
        "id" : "12d5f053-6977-4450-935c-3949c0468f67",
        "parentId" : "991a161c-0a57-492c-a015-3c338333f189",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Similar speedup compared to what?\n",
        "createdAt" : "2013-09-02T15:57:31Z",
        "updatedAt" : "2013-09-02T15:57:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ed2c9bfdcd2eded4c42ec485cce8e6e3a69308c",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +814,818 @@            return -1;\n        }\n        descr1 = PyArray_DescrFromTypeObject((PyObject *)Py_TYPE(a));\n        if (PyArray_CanCastSafely(descr1->type_num, @TYPE@)) {\n            PyArray_CastScalarDirect(a, descr1, arg1, @TYPE@);"
  },
  {
    "id" : "a2bb6add-5846-4a36-a3fe-eb17ce7726f3",
    "prId" : 3567,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba7d2b5d-99ae-4006-be79-b2d228b6b750",
        "parentId" : null,
        "authorId" : "dd0b7ee8-4e17-4855-aa9e-6c7c9ddba53b",
        "body" : "Using PyInt_AsLong, instead of PyInt_As_Long, as it check for error.\n",
        "createdAt" : "2013-08-29T20:51:26Z",
        "updatedAt" : "2013-08-30T21:35:05Z",
        "lastEditedBy" : "dd0b7ee8-4e17-4855-aa9e-6c7c9ddba53b",
        "tags" : [
        ]
      },
      {
        "id" : "c3a9b0e2-e0f5-4020-aa2c-cdc2594aad00",
        "parentId" : "ba7d2b5d-99ae-4006-be79-b2d228b6b750",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "`PyInt_AS_LONG` would be fine here after `PyInt_CheckExact` and should be a bit faster, but if there is no noticeable difference in timings then it doesn't matter. Other overhead may dominate.\n",
        "createdAt" : "2013-09-02T16:06:41Z",
        "updatedAt" : "2013-09-02T16:07:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ed2c9bfdcd2eded4c42ec485cce8e6e3a69308c",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +784,788 @@#if PY_VERSION_HEX < 0x03000000\n    if (PyInt_CheckExact(a)) {\n        *arg1 = PyInt_AsLong(a);\n        if (*arg1 == -1 && PyErr_Occurred()) {\n            return -1;"
  },
  {
    "id" : "a68d9320-b19c-4faa-a4d8-35fcfc512f77",
    "prId" : 3567,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dde1246e-ea29-44d0-98b0-091e7691ace4",
        "parentId" : null,
        "authorId" : "dd0b7ee8-4e17-4855-aa9e-6c7c9ddba53b",
        "body" : "Not sure, if it return -1 on error. \nhttp://docs.python.org/2/c-api/long.html\n",
        "createdAt" : "2013-08-29T20:55:30Z",
        "updatedAt" : "2013-08-30T21:35:05Z",
        "lastEditedBy" : "dd0b7ee8-4e17-4855-aa9e-6c7c9ddba53b",
        "tags" : [
        ]
      },
      {
        "id" : "6321e6f2-7f7c-4c24-b041-485adaa1ec09",
        "parentId" : "dde1246e-ea29-44d0-98b0-091e7691ace4",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Sometimes you have to go to the source ;)\n\n```\nunsigned long\nPyLong_AsUnsignedLong(PyObject *vv)\n{\n    register PyLongObject *v;\n    unsigned long x, prev;\n    Py_ssize_t i;\n\n    if (vv == NULL || !PyLong_Check(vv)) {\n        if (vv != NULL && PyInt_Check(vv)) {\n            long val = PyInt_AsLong(vv);\n            if (val < 0) {\n                PyErr_SetString(PyExc_OverflowError,\n                \"can't convert negative value to unsigned long\");\n                return (unsigned long) -1;\n            }\n            return val;\n        }\n        PyErr_BadInternalCall();\n        return (unsigned long) -1;\n    }\n    v = (PyLongObject *)vv;\n    i = Py_SIZE(v);\n    x = 0;\n    if (i < 0) {\n        PyErr_SetString(PyExc_OverflowError,\n               \"can't convert negative value to unsigned long\");\n        return (unsigned long) -1;\n    }\n    while (--i >= 0) {\n        prev = x;\n        x = (x << PyLong_SHIFT) + v->ob_digit[i];\n        if ((x >> PyLong_SHIFT) != prev) {\n            PyErr_SetString(PyExc_OverflowError,\n                \"long int too large to convert\");\n            return (unsigned long) -1;\n        }\n    }\n    return x;\n}\n```\n\nLooks like it returns `(unsigned long) -1` in case of error.\n",
        "createdAt" : "2013-08-29T21:30:30Z",
        "updatedAt" : "2013-08-30T21:35:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b4e60387-cd4e-44a5-9d59-88ac35ea284d",
        "parentId" : "dde1246e-ea29-44d0-98b0-091e7691ace4",
        "authorId" : "dd0b7ee8-4e17-4855-aa9e-6c7c9ddba53b",
        "body" : "added casting -1 as (unsigned long)\n",
        "createdAt" : "2013-08-30T21:36:35Z",
        "updatedAt" : "2013-08-30T21:36:35Z",
        "lastEditedBy" : "dd0b7ee8-4e17-4855-aa9e-6c7c9ddba53b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ed2c9bfdcd2eded4c42ec485cce8e6e3a69308c",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +795,799 @@\n    if(PyLong_CheckExact(a)) {\n        *arg1 = PyLong_AsUnsignedLong(a);\n        if (*arg1 == (unsigned long)-1 && PyErr_Occurred()) {\n            return -1;"
  }
]