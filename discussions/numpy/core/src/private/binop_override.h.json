[
  {
    "id" : "51cc7b62-d018-46ac-80cf-4db74c9b1a4a",
    "prId" : 8247,
    "prUrl" : "https://github.com/numpy/numpy/pull/8247#pullrequestreview-31734152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0be65af-5f91-4ace-b3dd-18b031a11cab",
        "parentId" : null,
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Is it clear that you don't need to defer inside `__rmul__` et al.?\r\n\r\nI would expect that when `__array_ufunc__ = None`, an ufunc will not be called at all.\r\nHowever, currently it is called so the TypeError comes from the ufunc and not Python.",
        "createdAt" : "2017-04-09T17:23:32Z",
        "updatedAt" : "2017-04-27T19:38:49Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "ba29f8a2-9a07-4410-803d-2749197d1d8b",
        "parentId" : "c0be65af-5f91-4ace-b3dd-18b031a11cab",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I think you're right that with `__array_ufunc__ = None`, the reverse binop might as well return `NotImplemented` immediately, although in practice the result is the same; see the comments at https://github.com/numpy/numpy/pull/8247/files#diff-a76a87b213692b2a554a63aebea985caR65\r\n\r\nIt does make me whether we're not better off calling into `ndarray.__array_ufunc__` -- we seem to be duplicating logic in multiple places.",
        "createdAt" : "2017-04-09T20:48:45Z",
        "updatedAt" : "2017-04-27T19:38:49Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "32221dfb553980e34a398c71891c7dcdfaf2f477",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +172,176 @@    do {                                                                \\\n        if (BINOP_IS_FORWARD(m1, m2, slot_expr, test_func) &&           \\\n            binop_override_forward_binop_should_defer((PyObject*)m1, (PyObject*)m2)) { \\\n            Py_INCREF(Py_NotImplemented);                               \\\n            return Py_NotImplemented;                                   \\"
  }
]