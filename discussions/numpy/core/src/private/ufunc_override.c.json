[
  {
    "id" : "6822bc4d-e206-4a18-b807-9977c89d566c",
    "prId" : 9092,
    "prUrl" : "https://github.com/numpy/numpy/pull/9092#pullrequestreview-37420139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "618f6b77-c503-4b55-9acc-f91c355a5a5a",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Seems this is only needed if obj can be destroyed before used. Is that the case?",
        "createdAt" : "2017-05-10T19:52:57Z",
        "updatedAt" : "2017-05-10T19:52:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "da4b038a-da08-4860-b8b1-46caa746c38e",
        "parentId" : "618f6b77-c503-4b55-9acc-f91c355a5a5a",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "It was just a question of where the `Py_INCREF` happens -- in @eric-wieser's initial attempt it happened just before being inserted in a tuple. Also, I thought it was annoying to pass back new references to the `__array_ufunc__` methods and borrowed references to `obj`. But I can change it if you think it is better.",
        "createdAt" : "2017-05-10T20:31:46Z",
        "updatedAt" : "2017-05-10T20:31:46Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d7e4224d5f9dbb872ac7c59a8ce43fa3523976d",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +135,139 @@            }\n            if (with_override != NULL) {\n                Py_INCREF(obj);\n                with_override[num_override_args] = obj;\n            }"
  },
  {
    "id" : "862331a7-9278-464e-aaed-c6295f2ffe28",
    "prId" : 11338,
    "prUrl" : "https://github.com/numpy/numpy/pull/11338#pullrequestreview-132685028",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2aae1eba-3c1a-4af0-a3a8-96ce8b35427b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I don't think you need `out_kwd_obj` as an argument - you don't seem to use it",
        "createdAt" : "2018-06-21T05:41:49Z",
        "updatedAt" : "2018-06-28T13:52:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "9f9b0f3d-a40e-4d3a-8968-54a34885ff1a",
        "parentId" : "2aae1eba-3c1a-4af0-a3a8-96ce8b35427b",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "But I need a place to store the reference - at least, I think I do, and when I tried initially without it, it definitely had random segfaults (I considered initializing `out_objs` with a NULL reference in its first slot, but I felt that it was better not to write a function that expected such initialized array was a bit much). But perhaps I am just missing something? (C remains not one of my strengths...)",
        "createdAt" : "2018-06-21T12:26:10Z",
        "updatedAt" : "2018-06-28T13:52:33Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "c052dc8a-2390-4458-8379-20347fcf0b35",
        "parentId" : "2aae1eba-3c1a-4af0-a3a8-96ce8b35427b",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Oh, I get it now - otherwise you end up returning a reference to a local variable. That's pretty unfortunate.",
        "createdAt" : "2018-06-28T04:43:53Z",
        "updatedAt" : "2018-06-28T13:52:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b700ae439c4a83ba3bc37eae8198fcfe7792cbf",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +84,88 @@ */\nstatic int\nget_out_objects(PyObject *kwds, PyObject **out_kwd_obj, PyObject ***out_objs)\n{\n    if (kwds == NULL) {"
  },
  {
    "id" : "748f64ee-5cac-4d7c-ac8b-212dfd67e8ca",
    "prId" : 11338,
    "prUrl" : "https://github.com/numpy/numpy/pull/11338#pullrequestreview-132713779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0523a50-b832-4161-a0d3-62fc5950439d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "nit: `PySequence_FAST_SIZE` would be more consistent",
        "createdAt" : "2018-06-28T07:22:29Z",
        "updatedAt" : "2018-06-28T13:52:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f0e1d901-cfba-45dc-adc7-86b44d1a8171",
        "parentId" : "f0523a50-b832-4161-a0d3-62fc5950439d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Nevermind, what you have behaves a little better in the face of bad input",
        "createdAt" : "2018-06-28T07:26:01Z",
        "updatedAt" : "2018-06-28T13:52:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b700ae439c4a83ba3bc37eae8198fcfe7792cbf",
    "line" : 231,
    "diffHunk" : "@@ -1,1 +218,222 @@\n    /* check inputs */\n    nin = PyTuple_Size(args);\n    if (nin < 0) {\n        return -1;"
  },
  {
    "id" : "4466b4fe-f7b2-46e3-8fb1-437ab4b61dbb",
    "prId" : 11450,
    "prUrl" : "https://github.com/numpy/numpy/pull/11450#pullrequestreview-133412895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2e53e67-5664-434c-91fc-050acede201f",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "nit: This doesn't belong in this PR",
        "createdAt" : "2018-06-30T02:35:59Z",
        "updatedAt" : "2018-07-26T14:04:36Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ccfa3bdf-48f5-47ba-888b-7a902250774c",
        "parentId" : "f2e53e67-5664-434c-91fc-050acede201f",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "edit: nevermind",
        "createdAt" : "2018-06-30T02:36:18Z",
        "updatedAt" : "2018-07-26T14:04:36Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "3207785400cdd8ecbee9d7e18c1e164d747c2ec7",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +62,66 @@ */\n\nNPY_NO_EXPORT int\nhas_non_default_array_ufunc(PyObject * obj)\n{"
  }
]