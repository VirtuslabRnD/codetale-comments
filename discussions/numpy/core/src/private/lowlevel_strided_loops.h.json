[
  {
    "id" : "140ef126-4849-4966-b820-c249a86bb079",
    "prId" : 3341,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "defb6525-f719-4b88-9da1-300f1df119af",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Don't use C++ comment style. \n",
        "createdAt" : "2013-05-23T16:08:03Z",
        "updatedAt" : "2013-05-25T15:36:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ef5c7698-9131-452f-83d3-4e4a02444e35",
        "parentId" : "defb6525-f719-4b88-9da1-300f1df119af",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "nvm. \n",
        "createdAt" : "2013-05-23T16:08:44Z",
        "updatedAt" : "2013-05-25T15:36:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe69102dd34619ce18cf074ef0e6e46611bc17e7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +424,428 @@ * npy_intp esize = sizeof(v[0]);\n * npy_intp peel = npy_aligned_block_offset(v, esize, 16, n);\n * // peel to alignment 16\n * for (i = 0; i < peel; i++)\n *   <scalar-op>"
  },
  {
    "id" : "44130327-c473-4e4a-83e0-734c7bdf2bc2",
    "prId" : 3376,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06369854-c881-45e5-bfa6-14e162ac8cb8",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, haven't seen that before. I assume the `u` prefix means unsigned. Is it portable?\n",
        "createdAt" : "2013-05-29T17:24:12Z",
        "updatedAt" : "2013-05-29T17:58:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ccf97011-79d5-4f03-bcd9-14244ff84a4f",
        "parentId" : "06369854-c881-45e5-bfa6-14e162ac8cb8",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'm curious, what does the generated assembly look like for these constructs? Any reason not to use byte addressing?\n",
        "createdAt" : "2013-05-29T17:26:30Z",
        "updatedAt" : "2013-05-29T17:58:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "97d6127a-a22e-414c-aa14-2411dce841e1",
        "parentId" : "06369854-c881-45e5-bfa6-14e162ac8cb8",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "yes it means unsigned, its the same code from lowlevel_strided_loops.c.src so if it worked before it still works now.\n\nthe LLU used for 8 bytes is C99 but its backported to gnu89 numpy uses with gcc.\nIts also just moved old code so it should work.\n",
        "createdAt" : "2013-05-29T17:27:31Z",
        "updatedAt" : "2013-05-29T17:58:59Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "176a6418-f754-46cc-81e8-a25dd3875914",
        "parentId" : "06369854-c881-45e5-bfa6-14e162ac8cb8",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK, probably the only worry would be MSVC and it doesn't seem to have been a problem. \n",
        "createdAt" : "2013-05-29T17:38:38Z",
        "updatedAt" : "2013-05-29T17:58:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6750112e-c2e3-4187-826b-a61823455531",
        "parentId" : "06369854-c881-45e5-bfa6-14e162ac8cb8",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "on x86 a newish gcc will replace that with a bswap instruction (or movbe if available on target). if neither is available (i386) a bunch of ror (rotate).\nit does not do the same if you use byte addressing variant, it probably could if someone provides an appropriate pattern matcher to gcc.\n",
        "createdAt" : "2013-05-29T17:39:29Z",
        "updatedAt" : "2013-05-29T17:58:59Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "0258a3e65ba9fea8892aaa9761bf7e37c999c8fd",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +476,480 @@    return __builtin_bswap32(x);\n#else\n    return ((x & 0xffu) << 24) | ((x & 0xff00u) << 8) |\n           ((x & 0xff0000u) >> 8) | (x >> 24);\n#endif"
  },
  {
    "id" : "5cc854f2-c08f-48a8-831c-7db45be23b41",
    "prId" : 8043,
    "prUrl" : "https://github.com/numpy/numpy/pull/8043#pullrequestreview-21176683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "070bf4e2-2257-479f-8a50-254d9fa3b7e1",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Seems rather large for inline ;)\n",
        "createdAt" : "2016-11-06T16:56:24Z",
        "updatedAt" : "2017-02-10T19:53:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "f8db8ac4-4908-4266-8b87-8d4be54205da",
        "parentId" : "070bf4e2-2257-479f-8a50-254d9fa3b7e1",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "OTOH, I don't really want to put it in a .c file since the logic is tightly coupled to the macros here (and I suspect the multiarray/umath split adds to the mess). Removing the inline makes it emit compiler warnings. I could write this as a macro, but that's messy.",
        "createdAt" : "2017-01-22T02:17:04Z",
        "updatedAt" : "2017-02-10T19:53:34Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "f88eaf69-dc8a-40ff-af16-3ea74ebc37d3",
        "parentId" : "070bf4e2-2257-479f-8a50-254d9fa3b7e1",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "C++ beckons ;)",
        "createdAt" : "2017-02-10T04:12:55Z",
        "updatedAt" : "2017-02-10T19:53:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e8ce442e8449916a93951093cdce16cec006bcc",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +698,702 @@\nstatic NPY_INLINE int\nPyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK(PyArrayObject *arr1, PyArrayObject *arr2,\n                                         int arr1_read, int arr2_read)\n{"
  },
  {
    "id" : "aca3da9a-1b92-4e84-a6db-177f8372b8d2",
    "prId" : 11468,
    "prUrl" : "https://github.com/numpy/numpy/pull/11468#pullrequestreview-133686682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48133818-282c-4c36-b3b9-c1296aad2fac",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Just a nit: would normally write these as\r\n```\r\nsize == 1              ? 0 :\r\nPyArray_NDIM(arr) == 1 ? PyArray_STRIDE(arr, 0) :\r\n                         PyArray_ITEMSIZE(arr)\r\n",
        "createdAt" : "2018-07-02T16:04:20Z",
        "updatedAt" : "2018-07-02T16:04:20Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b680c2311246f2d78f8b7786284336b92ef74a3",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +699,703 @@        assert(PyArray_TRIVIALLY_ITERABLE(arr)), \\\n        size == 1 ? 0 : ((PyArray_NDIM(arr) == 1) ? \\\n                             PyArray_STRIDE(arr, 0) : PyArray_ITEMSIZE(arr)))\n\nstatic NPY_INLINE int"
  },
  {
    "id" : "1968621f-4df6-4740-a0c7-f030dacbff01",
    "prId" : 11468,
    "prUrl" : "https://github.com/numpy/numpy/pull/11468#pullrequestreview-134067788",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd5efaaf-b00b-47f9-88e0-cd3b698f08a6",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "`&` <- `&&` ?",
        "createdAt" : "2018-07-02T19:09:24Z",
        "updatedAt" : "2018-07-02T19:09:24Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "077d187f-c794-40ae-804d-c0b0d60f7be2",
        "parentId" : "bd5efaaf-b00b-47f9-88e0-cd3b698f08a6",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "You mean to make it an `&&`? The current version is correct though tricky, since the contiguity has to be identical, frankly would be better to read something like\r\n```\r\nPyArray_FLAGS(arr1) & PyArray_FLAGS(arr2) &\r\n    (NPY_ARRAY_C_CONTIGUOUS|NPY_ARRAY_F_CONTIGUOUS)\r\n```\r\nto be more obvious probably",
        "createdAt" : "2018-07-02T19:42:22Z",
        "updatedAt" : "2018-07-02T19:42:22Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "ae20df97-70dd-409d-b5a1-7768690d1da4",
        "parentId" : "bd5efaaf-b00b-47f9-88e0-cd3b698f08a6",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Or maybe not, can't make up my mind :)",
        "createdAt" : "2018-07-02T19:49:54Z",
        "updatedAt" : "2018-07-02T19:49:54Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "88aec3c4-8b3b-4ea5-99c7-29f7b822d6da",
        "parentId" : "bd5efaaf-b00b-47f9-88e0-cd3b698f08a6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Right now, I think this means that they need to share at least one contiguity - that sounds plausibly correct to me",
        "createdAt" : "2018-07-02T22:40:40Z",
        "updatedAt" : "2018-07-02T22:40:41Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d92b91be-739d-4d81-be8c-51aa0fa155f4",
        "parentId" : "bd5efaaf-b00b-47f9-88e0-cd3b698f08a6",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Ah, OK, make sense.",
        "createdAt" : "2018-07-03T16:06:19Z",
        "updatedAt" : "2018-07-03T16:06:20Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b680c2311246f2d78f8b7786284336b92ef74a3",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +759,763 @@                                             PyArray_NDIM(arr1)) && \\\n                        (PyArray_FLAGS(arr1)&(NPY_ARRAY_C_CONTIGUOUS| \\\n                                      NPY_ARRAY_F_CONTIGUOUS)) & \\\n                                (PyArray_FLAGS(arr2)&(NPY_ARRAY_C_CONTIGUOUS| \\\n                                              NPY_ARRAY_F_CONTIGUOUS)) \\"
  }
]