[
  {
    "id" : "90f485e0-71cc-488a-85b8-395122b0c826",
    "prId" : 9971,
    "prUrl" : "https://github.com/numpy/numpy/pull/9971#pullrequestreview-74631443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d6e1d56-90e5-4431-bfa0-0a9080c0323f",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "There is a funny character here. ~Windows newline?~ OK, it says \"No newline at end of file\", so no problem.",
        "createdAt" : "2017-11-06T23:30:36Z",
        "updatedAt" : "2017-11-08T03:19:55Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "9a58e9d1-c004-410a-91f2-5214a8292a26",
        "parentId" : "6d6e1d56-90e5-4431-bfa0-0a9080c0323f",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Newline added",
        "createdAt" : "2017-11-07T03:24:10Z",
        "updatedAt" : "2017-11-08T03:19:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0fb73953a4ed36503e72ec5764be5443688ab24",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +97,101 @@    Py_DECREF(l_chunk_size);\n    return v;\n}"
  },
  {
    "id" : "b1d94e83-ccf7-42bc-8936-2f09aa22518e",
    "prId" : 9971,
    "prUrl" : "https://github.com/numpy/numpy/pull/9971#pullrequestreview-74920084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9061c3de-52d8-4408-a29e-82f0d63cc81b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This would probably be generally handy throughout the codebase.\r\n\r\nA job for another PR: would there be a better place to put it, and do we want to cal lit `Py_SETREF` and `#ifndef Py_SETREF` it?",
        "createdAt" : "2017-11-07T03:43:04Z",
        "updatedAt" : "2017-11-08T03:19:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "cf82c817-0ca5-4e04-96c4-a72e0d3c7c4d",
        "parentId" : "9061c3de-52d8-4408-a29e-82f0d63cc81b",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "If we decide to use it I agree that doing and `#ifndef` seems reasonable.\r\n\r\nFor anyone else reading, it looks like this python macro was created in python3.4, and there are a lot of discussions of it on the python mailing list and on the python issue tracker. It is still going through some changes as of april 2016, I think they decided to split it into two macros `Py_SETREF` and `Py_XSETREF`.\r\n\r\nOne motivation for it is to avoid a certain kind of bug, according to the [comment in CPython](https://github.com/python/cpython/blob/master/Include/object.h#L856). On the other hand it's not part of the \"stable api\", so there are some risks in using it.",
        "createdAt" : "2017-11-07T21:47:45Z",
        "updatedAt" : "2017-11-08T03:19:55Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0fb73953a4ed36503e72ec5764be5443688ab24",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +11,15 @@        (op) = (op2);                           \\\n        Py_DECREF(_py_tmp);                     \\\n    } while (0)\n\n"
  },
  {
    "id" : "e0bb76f8-75a6-4a64-8409-a8eea3e59fa5",
    "prId" : 9971,
    "prUrl" : "https://github.com/numpy/numpy/pull/9971#pullrequestreview-75877112",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a87e2867-b9f7-457c-9c39-65ae5f7b837a",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, should be C style comment.",
        "createdAt" : "2017-11-10T17:36:40Z",
        "updatedAt" : "2017-11-10T17:36:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b2e713aa-c845-4486-bb2c-2dd83dccecf2",
        "parentId" : "a87e2867-b9f7-457c-9c39-65ae5f7b837a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Careless, good spot. This is the reason for the Mac failure?\r\n",
        "createdAt" : "2017-11-10T18:05:37Z",
        "updatedAt" : "2017-11-10T18:05:38Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5239278c-18d1-45a7-b7ac-a1f326edc5d0",
        "parentId" : "a87e2867-b9f7-457c-9c39-65ae5f7b837a",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "No. At the moment I'm suspecting the power function.",
        "createdAt" : "2017-11-10T18:09:40Z",
        "updatedAt" : "2017-11-10T18:09:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ca359155-b667-4e12-99d1-0e8476d2615a",
        "parentId" : "a87e2867-b9f7-457c-9c39-65ae5f7b837a",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The problem is this line: `huge_ld = 1234 * np.longdouble(2) ** exp`. We need someone running on a Mac to check this out. Maybe a fallback double function is being used somewhere.",
        "createdAt" : "2017-11-10T18:17:55Z",
        "updatedAt" : "2017-11-10T18:17:55Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "3a00d552-f9da-40fe-ae0a-4c7fc42d46f3",
        "parentId" : "a87e2867-b9f7-457c-9c39-65ae5f7b837a",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Here it is, `powl` is blacklisted on the Mac\r\n```\r\n/* powl gives zero division warning on OS X, see gh-8307 */\r\n#if defined(HAVE_POWL) && defined(NPY_OS_DARWIN)\r\n#undef HAVE_POWL\r\n#endif\r\n```",
        "createdAt" : "2017-11-10T18:20:37Z",
        "updatedAt" : "2017-11-10T18:20:37Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "222f4c5d-9107-48fa-95e2-82fe27b3640f",
        "parentId" : "a87e2867-b9f7-457c-9c39-65ae5f7b837a",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Although I don't see why that should be a problem, the double value of the fallback function should be OK with result cast to `long double`, so the multiplication should work. Maybe inlining is failing somewhere ...",
        "createdAt" : "2017-11-10T18:40:34Z",
        "updatedAt" : "2017-11-10T18:40:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4cd56b95-0a27-4e8f-aa27-6385c47f0d49",
        "parentId" : "a87e2867-b9f7-457c-9c39-65ae5f7b837a",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Fired up the old Mac. The Mac double `pow` function errors with `exp == 1024`, Linux works with that. I'm simply going to use `exp = 1023` as a fix in this case.",
        "createdAt" : "2017-11-10T20:22:12Z",
        "updatedAt" : "2017-11-10T20:22:12Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "0413ceb5-f61f-4896-84e6-9434eb16752b",
        "parentId" : "a87e2867-b9f7-457c-9c39-65ae5f7b837a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "exp=1023 doesn't work, because then the result fits in `double` - the goal here is to produce a longdouble that exceeds the limits for a double.\r\n\r\nI suppose using exp=1023 and multiplying by 2 would work",
        "createdAt" : "2017-11-10T20:23:36Z",
        "updatedAt" : "2017-11-10T20:24:39Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d82a1a46-1126-485e-9647-83fd3b69e598",
        "parentId" : "a87e2867-b9f7-457c-9c39-65ae5f7b837a",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yes, that is what I did. See #10000 . Oh, looky there, issue 10000, it's like watching the odometer turn over ...",
        "createdAt" : "2017-11-10T20:42:02Z",
        "updatedAt" : "2017-11-10T20:42:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "be54bfd7-fea6-4c23-8d7c-e22e933133f9",
        "parentId" : "a87e2867-b9f7-457c-9c39-65ae5f7b837a",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Guess we will eventually find out if this all works for IBM double double.",
        "createdAt" : "2017-11-10T20:48:23Z",
        "updatedAt" : "2017-11-10T20:48:23Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0fb73953a4ed36503e72ec5764be5443688ab24",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +22,26 @@    PyObject *v;\n    PyObject *l_chunk_size;\n    // number of bits to extract at a time. CPython uses 30, but that's because\n    // it's tied to the internal long representation\n    const int chunk_size = NPY_BITSOF_LONGLONG;"
  }
]