[
  {
    "id" : "1227ba53-4996-4aa3-8e3f-8604e2cbceb5",
    "prId" : 3411,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b542e09-de6e-4bdc-a70e-7a20498c8c8c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Dispatcher handles `longdouble`? Is this to simplify things so that `longdouble` doesn't need to be special cased?\n",
        "createdAt" : "2013-06-08T19:25:57Z",
        "updatedAt" : "2013-06-08T21:19:09Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "55fc4fc3-2b75-47a7-8abf-dce6937d3c81",
        "parentId" : "6b542e09-de6e-4bdc-a70e-7a20498c8c8c",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "previously I solved this via ifdef macros but with the files split we need a (nop) longdouble dispatcher to keep the logic out of loops .c.src\nalternative I see would be to keep the old macros (NPY_HAVE_SIMD_TYPE) and preprocessor guard the run_simd dispatcher in loops.c.src.\n\nhaving it a separate repeat block is just to save on #ifdefs in the actual vectorized repeat block.\n",
        "createdAt" : "2013-06-08T19:32:08Z",
        "updatedAt" : "2013-06-08T21:19:09Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "88341dee-a785-4b49-88f9-cd0b94902bec",
        "parentId" : "6b542e09-de6e-4bdc-a70e-7a20498c8c8c",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Makes sense.\n",
        "createdAt" : "2013-06-08T19:39:08Z",
        "updatedAt" : "2013-06-08T21:19:09Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fb8b714906a92516905cc0f03e45511bd1ac1ed",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +54,58 @@ * Float types\n *  #type = npy_float, npy_double, npy_longdouble#\n *  #TYPE = FLOAT, DOUBLE, LONGDOUBLE#\n *  #vector = 1, 1, 0#\n */"
  },
  {
    "id" : "7b5a7bd8-dc68-47be-a63b-dc2a6e5ff070",
    "prId" : 3436,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d056cea5-55f6-48a1-ae14-7afd5de33a5b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I think you mean 0 or 1 only, right? That is the right thing to do, especially as adding up the booleans is a common operation used to count the number of True values.\n",
        "createdAt" : "2013-06-15T17:12:06Z",
        "updatedAt" : "2013-06-15T17:12:06Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c7d0f89b-6010-4db4-bd17-f2297bb6df56",
        "parentId" : "d056cea5-55f6-48a1-ae14-7afd5de33a5b",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "I don't think the C standard guarantees 0 or 1, so I'm actually using whatever the compiler outputs for 1 == 1 as true (see line 539)\n",
        "createdAt" : "2013-06-15T17:17:49Z",
        "updatedAt" : "2013-06-15T17:17:49Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "c55d4359-d514-4c02-a86c-993cbdef7d51",
        "parentId" : "d056cea5-55f6-48a1-ae14-7afd5de33a5b",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "You sent me to the standard to check ;) It does specify 0 or 1, but you should be good:\n\n3 The == (equal to) and != (not equal to) operators are analogous to the relational\noperators except for their lower precedence.91) Each of the operators yields 1 if the\nspecified relation is true and 0 if it is false. The result has type int. For any pair of\noperands, exactly one of the relations is true.\n",
        "createdAt" : "2013-06-15T17:58:16Z",
        "updatedAt" : "2013-06-15T17:58:16Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b4a7365aeff3dfd19d4b72765db5358963614e9",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +532,536 @@ * consistent, should not be required if bool is used correctly everywhere but\n * you never know\n */\n#if !@and@\nstatic NPY_INLINE @vtype@ byte_to_true(@vtype@ v)"
  },
  {
    "id" : "f9d15163-5df8-4a56-ae0c-f905dd27b031",
    "prId" : 3466,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60e20e8a-6c15-42e8-9577-532952882f5f",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like you could have another substitution string for `0` and `0xFFFF` to avoid the `#if`.\n",
        "createdAt" : "2013-06-23T13:36:39Z",
        "updatedAt" : "2013-06-23T13:36:39Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a20edc7b-8fdb-42b4-b46a-85e5d0499c62",
        "parentId" : "60e20e8a-6c15-42e8-9577-532952882f5f",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Out of curiosity, what type is the result of `@vpre@_movemask_epi8(v)`?\n",
        "createdAt" : "2013-06-23T13:54:51Z",
        "updatedAt" : "2013-06-23T13:54:51Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "7a4fa941-b95d-4a20-bce5-37493c20567d",
        "parentId" : "60e20e8a-6c15-42e8-9577-532952882f5f",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "one could use a substitution, but I think it makes the code harder to read.\n\nmovemask_epi8 returns an integer with 16 bit set to the most significant bit of each of the 16 bytes in the vector.\ncmpeq_epi8 sets true to 0xFF\nfor all/and it checks that all significant bits are zero, meaning no element was zero/false, if not it stops\nfor any/or it checks if any significant bit was zero and stops, if all 16 bits are set all elements are zero/false and it continues\n",
        "createdAt" : "2013-06-23T14:37:01Z",
        "updatedAt" : "2013-06-23T14:40:11Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ae0622fe120b9da4df32525c3fb6970217e4cb4",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +603,607 @@        v = @vpre@_cmpeq_epi8(v, zero);\n#if @and@\n        if ((@vpre@_movemask_epi8(v) != 0)) {\n            *op = 0;\n#else"
  },
  {
    "id" : "7e611ab6-364e-47d9-b8af-f101cc376a73",
    "prId" : 3466,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbf93e2f-2fc5-4265-94c6-964fed8a9148",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could this be simplified to look like the blocked loop? The `@op@=`  form might also be an option here.\n",
        "createdAt" : "2013-06-23T13:38:54Z",
        "updatedAt" : "2013-06-23T13:38:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "bbb0655b-479e-4acb-a324-8f05da8998fb",
        "parentId" : "dbf93e2f-2fc5-4265-94c6-964fed8a9148",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "NVM, no &&= etc. operators ;) I suppose bitwise could be used instead since booleans are supposed to be 0 or 1.\n",
        "createdAt" : "2013-06-23T13:43:07Z",
        "updatedAt" : "2013-06-23T13:43:07Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ae0622fe120b9da4df32525c3fb6970217e4cb4",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +594,598 @@    const @vtype@ zero = @vpre@_setzero_@vsuf@();\n    LOOP_BLOCK_ALIGN_VAR(ip, npy_bool, 16) {\n        *op = *op @op@ ip[i];\n        if (*op @sc@ 0) {\n            return;"
  }
]