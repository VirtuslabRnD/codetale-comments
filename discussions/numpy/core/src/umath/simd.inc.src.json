[
  {
    "id" : "1227ba53-4996-4aa3-8e3f-8604e2cbceb5",
    "prId" : 3411,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b542e09-de6e-4bdc-a70e-7a20498c8c8c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Dispatcher handles `longdouble`? Is this to simplify things so that `longdouble` doesn't need to be special cased?\n",
        "createdAt" : "2013-06-08T19:25:57Z",
        "updatedAt" : "2013-06-08T21:19:09Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "55fc4fc3-2b75-47a7-8abf-dce6937d3c81",
        "parentId" : "6b542e09-de6e-4bdc-a70e-7a20498c8c8c",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "previously I solved this via ifdef macros but with the files split we need a (nop) longdouble dispatcher to keep the logic out of loops .c.src\nalternative I see would be to keep the old macros (NPY_HAVE_SIMD_TYPE) and preprocessor guard the run_simd dispatcher in loops.c.src.\n\nhaving it a separate repeat block is just to save on #ifdefs in the actual vectorized repeat block.\n",
        "createdAt" : "2013-06-08T19:32:08Z",
        "updatedAt" : "2013-06-08T21:19:09Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "88341dee-a785-4b49-88f9-cd0b94902bec",
        "parentId" : "6b542e09-de6e-4bdc-a70e-7a20498c8c8c",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Makes sense.\n",
        "createdAt" : "2013-06-08T19:39:08Z",
        "updatedAt" : "2013-06-08T21:19:09Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fb8b714906a92516905cc0f03e45511bd1ac1ed",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +54,58 @@ * Float types\n *  #type = npy_float, npy_double, npy_longdouble#\n *  #TYPE = FLOAT, DOUBLE, LONGDOUBLE#\n *  #vector = 1, 1, 0#\n */"
  }
]