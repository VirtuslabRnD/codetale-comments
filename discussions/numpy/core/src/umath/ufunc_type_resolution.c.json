[
  {
    "id" : "63ce97cf-703c-41b3-a656-7f80738f1f6c",
    "prId" : 8083,
    "prUrl" : "https://github.com/numpy/numpy/pull/8083#pullrequestreview-2170506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "303d24a1-f615-4d06-a51f-4dbf11983ad2",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "One space missing before the `*` ;).\n",
        "createdAt" : "2016-09-29T15:56:57Z",
        "updatedAt" : "2016-11-01T01:58:43Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f685f1a83de2d8fc1e0f48167a204248b6656a63",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1218,1222 @@ * This function will not be hit for py3 or when __future__ imports division. \n * See generate_umath.py for reason\n*/\nNPY_NO_EXPORT int\nPyUFunc_MixedDivisionTypeResolver(PyUFuncObject *ufunc,"
  },
  {
    "id" : "62a9b3aa-164e-4b24-8272-b907397af33d",
    "prId" : 9354,
    "prUrl" : "https://github.com/numpy/numpy/pull/9354#pullrequestreview-48185898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bd2ab78-cb5b-4b8f-ab7c-ea7bc3bd23f2",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'm thinking we actually want to indent these more, like we do with extended if conditions. Should probably put it in the style guide. Anyway, I'm not going to worry about that now.",
        "createdAt" : "2017-07-05T21:39:54Z",
        "updatedAt" : "2017-07-05T21:39:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "13978dd80c152ca53c8a8b344f59be86a4bd9f44",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1306,1310 @@                continue;\n            }\n            for (funcdata = (PyUFunc_Loop1d *)NpyCapsule_AsVoidPtr(obj);\n                 funcdata != NULL;\n                 funcdata = funcdata->next) {"
  },
  {
    "id" : "74e156c2-1e7e-4d78-aeed-487af186226f",
    "prId" : 12120,
    "prUrl" : "https://github.com/numpy/numpy/pull/12120#pullrequestreview-163895629",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0c73ce0-3aa6-4de1-a1db-dab745969714",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Why not just write this:\r\n\r\n```\r\nif  (type_num1 == NPY_TIMEDELTA && type_num2 == NPY_TIMEDELTA) {\r\n    // your code\r\n}\r\nelse {\r\n    return PyUFunc_DefaultTypeResolver(...)\r\n}\r\n```\r\n\r\nThat saves you from having to produce an error message for datetime, making all my above comments moot",
        "createdAt" : "2018-10-11T13:49:48Z",
        "updatedAt" : "2018-10-15T17:30:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2cec53c5-ff03-4f4e-8373-68e7bba5e42c",
        "parentId" : "d0c73ce0-3aa6-4de1-a1db-dab745969714",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "It is all just copy-paste from other type resolvers. I was planning to leave room for implementing `mq` and `md` remainders, where there would be other switches to handle `type_num2` on a case by case basis, so check `type_num1` but multiple checks on `type_num2`.",
        "createdAt" : "2018-10-11T16:06:07Z",
        "updatedAt" : "2018-10-15T17:30:14Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9a6b02c347960f016ef28088ca8c63e0f2fe2f5",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1193,1197 @@    }\n    if (type_num1 == NPY_TIMEDELTA) {\n        if (type_num2 == NPY_TIMEDELTA) {\n            out_dtypes[0] = PyArray_PromoteTypes(PyArray_DESCR(operands[0]),\n                                                PyArray_DESCR(operands[1]));"
  },
  {
    "id" : "4167b69a-27fa-44b0-82fa-0edaa6e81fd2",
    "prId" : 12120,
    "prUrl" : "https://github.com/numpy/numpy/pull/12120#pullrequestreview-164537639",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7112620a-6893-4fe8-a9fa-cb6035073595",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Coverage never hits this line. Is it actually reachable?",
        "createdAt" : "2018-10-15T02:36:52Z",
        "updatedAt" : "2018-10-15T17:30:14Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "366a1f43-cea5-48ab-bb2b-a7d7b231e59a",
        "parentId" : "7112620a-6893-4fe8-a9fa-cb6035073595",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "I'm not sure -- I couldn't think of an easy way to probe it offhand. It has been migrated from the other type resolvers, but maybe we can just try removing?",
        "createdAt" : "2018-10-15T02:50:58Z",
        "updatedAt" : "2018-10-15T17:30:14Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "4b0bd830-9d10-4c17-af5f-07de06c5eb8c",
        "parentId" : "7112620a-6893-4fe8-a9fa-cb6035073595",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think it's fine to leave in, since your proposed extensions will hit it. Just curious if you could think of a case.",
        "createdAt" : "2018-10-15T03:03:06Z",
        "updatedAt" : "2018-10-15T17:30:14Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9a6b02c347960f016ef28088ca8c63e0f2fe2f5",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +1214,1218 @@    /* Check against the casting rules */\n    if (PyUFunc_ValidateCasting(ufunc, casting, operands, out_dtypes) < 0) {\n        for (i = 0; i < 3; ++i) {\n            Py_DECREF(out_dtypes[i]);\n            out_dtypes[i] = NULL;"
  },
  {
    "id" : "57240fba-d9d9-41db-8fd9-1ce494ba3423",
    "prId" : 12308,
    "prUrl" : "https://github.com/numpy/numpy/pull/12308#pullrequestreview-182389674",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3493aa5d-e8e7-42d8-9200-e186aea54556",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Ideally you'd split the function into a floordiv resolver and a truediv resolver, and extract the common pieces to helper functions. I can't think of any issues this will cause right now though. Maybe just stick a todo here.",
        "createdAt" : "2018-12-06T06:00:43Z",
        "updatedAt" : "2018-12-07T21:22:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "8d7a2c92-b777-4a41-b514-b6c67a78d96d",
        "parentId" : "3493aa5d-e8e7-42d8-9200-e186aea54556",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "added the todo",
        "createdAt" : "2018-12-06T18:45:35Z",
        "updatedAt" : "2018-12-07T21:22:13Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2494d11c4450b4a745b5dc1e7aed389da2f31773",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1119,1123 @@             * TODO: split function into truediv and floordiv resolvers\n             */\n            if (strcmp(ufunc->name, \"floor_divide\") == 0) {\n                out_dtypes[2] = PyArray_DescrFromType(NPY_LONGLONG);\n            }"
  }
]