[
  {
    "id" : "63ce97cf-703c-41b3-a656-7f80738f1f6c",
    "prId" : 8083,
    "prUrl" : "https://github.com/numpy/numpy/pull/8083#pullrequestreview-2170506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "303d24a1-f615-4d06-a51f-4dbf11983ad2",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "One space missing before the `*` ;).\n",
        "createdAt" : "2016-09-29T15:56:57Z",
        "updatedAt" : "2016-11-01T01:58:43Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f685f1a83de2d8fc1e0f48167a204248b6656a63",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1218,1222 @@ * This function will not be hit for py3 or when __future__ imports division. \n * See generate_umath.py for reason\n*/\nNPY_NO_EXPORT int\nPyUFunc_MixedDivisionTypeResolver(PyUFuncObject *ufunc,"
  },
  {
    "id" : "62a9b3aa-164e-4b24-8272-b907397af33d",
    "prId" : 9354,
    "prUrl" : "https://github.com/numpy/numpy/pull/9354#pullrequestreview-48185898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bd2ab78-cb5b-4b8f-ab7c-ea7bc3bd23f2",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'm thinking we actually want to indent these more, like we do with extended if conditions. Should probably put it in the style guide. Anyway, I'm not going to worry about that now.",
        "createdAt" : "2017-07-05T21:39:54Z",
        "updatedAt" : "2017-07-05T21:39:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "13978dd80c152ca53c8a8b344f59be86a4bd9f44",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1306,1310 @@                continue;\n            }\n            for (funcdata = (PyUFunc_Loop1d *)NpyCapsule_AsVoidPtr(obj);\n                 funcdata != NULL;\n                 funcdata = funcdata->next) {"
  },
  {
    "id" : "74e156c2-1e7e-4d78-aeed-487af186226f",
    "prId" : 12120,
    "prUrl" : "https://github.com/numpy/numpy/pull/12120#pullrequestreview-163895629",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0c73ce0-3aa6-4de1-a1db-dab745969714",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Why not just write this:\r\n\r\n```\r\nif  (type_num1 == NPY_TIMEDELTA && type_num2 == NPY_TIMEDELTA) {\r\n    // your code\r\n}\r\nelse {\r\n    return PyUFunc_DefaultTypeResolver(...)\r\n}\r\n```\r\n\r\nThat saves you from having to produce an error message for datetime, making all my above comments moot",
        "createdAt" : "2018-10-11T13:49:48Z",
        "updatedAt" : "2018-10-15T17:30:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2cec53c5-ff03-4f4e-8373-68e7bba5e42c",
        "parentId" : "d0c73ce0-3aa6-4de1-a1db-dab745969714",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "It is all just copy-paste from other type resolvers. I was planning to leave room for implementing `mq` and `md` remainders, where there would be other switches to handle `type_num2` on a case by case basis, so check `type_num1` but multiple checks on `type_num2`.",
        "createdAt" : "2018-10-11T16:06:07Z",
        "updatedAt" : "2018-10-15T17:30:14Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9a6b02c347960f016ef28088ca8c63e0f2fe2f5",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1193,1197 @@    }\n    if (type_num1 == NPY_TIMEDELTA) {\n        if (type_num2 == NPY_TIMEDELTA) {\n            out_dtypes[0] = PyArray_PromoteTypes(PyArray_DESCR(operands[0]),\n                                                PyArray_DESCR(operands[1]));"
  },
  {
    "id" : "4167b69a-27fa-44b0-82fa-0edaa6e81fd2",
    "prId" : 12120,
    "prUrl" : "https://github.com/numpy/numpy/pull/12120#pullrequestreview-164537639",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7112620a-6893-4fe8-a9fa-cb6035073595",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Coverage never hits this line. Is it actually reachable?",
        "createdAt" : "2018-10-15T02:36:52Z",
        "updatedAt" : "2018-10-15T17:30:14Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "366a1f43-cea5-48ab-bb2b-a7d7b231e59a",
        "parentId" : "7112620a-6893-4fe8-a9fa-cb6035073595",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "I'm not sure -- I couldn't think of an easy way to probe it offhand. It has been migrated from the other type resolvers, but maybe we can just try removing?",
        "createdAt" : "2018-10-15T02:50:58Z",
        "updatedAt" : "2018-10-15T17:30:14Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "4b0bd830-9d10-4c17-af5f-07de06c5eb8c",
        "parentId" : "7112620a-6893-4fe8-a9fa-cb6035073595",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think it's fine to leave in, since your proposed extensions will hit it. Just curious if you could think of a case.",
        "createdAt" : "2018-10-15T03:03:06Z",
        "updatedAt" : "2018-10-15T17:30:14Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9a6b02c347960f016ef28088ca8c63e0f2fe2f5",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +1214,1218 @@    /* Check against the casting rules */\n    if (PyUFunc_ValidateCasting(ufunc, casting, operands, out_dtypes) < 0) {\n        for (i = 0; i < 3; ++i) {\n            Py_DECREF(out_dtypes[i]);\n            out_dtypes[i] = NULL;"
  },
  {
    "id" : "57240fba-d9d9-41db-8fd9-1ce494ba3423",
    "prId" : 12308,
    "prUrl" : "https://github.com/numpy/numpy/pull/12308#pullrequestreview-182389674",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3493aa5d-e8e7-42d8-9200-e186aea54556",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Ideally you'd split the function into a floordiv resolver and a truediv resolver, and extract the common pieces to helper functions. I can't think of any issues this will cause right now though. Maybe just stick a todo here.",
        "createdAt" : "2018-12-06T06:00:43Z",
        "updatedAt" : "2018-12-07T21:22:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "8d7a2c92-b777-4a41-b514-b6c67a78d96d",
        "parentId" : "3493aa5d-e8e7-42d8-9200-e186aea54556",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "added the todo",
        "createdAt" : "2018-12-06T18:45:35Z",
        "updatedAt" : "2018-12-07T21:22:13Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2494d11c4450b4a745b5dc1e7aed389da2f31773",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1119,1123 @@             * TODO: split function into truediv and floordiv resolvers\n             */\n            if (strcmp(ufunc->name, \"floor_divide\") == 0) {\n                out_dtypes[2] = PyArray_DescrFromType(NPY_LONGLONG);\n            }"
  },
  {
    "id" : "45276073-d9d8-451e-a896-9cd9d42c9b54",
    "prId" : 12593,
    "prUrl" : "https://github.com/numpy/numpy/pull/12593#pullrequestreview-189416807",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d39ec5a4-2bb9-4563-a061-7e9c7c267109",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Should probably intern these strings and use them in `PyArray_CastingConverter` (`conversion_utils.c`), but that can be for another PR which maybe more generally tackles string comparisons.",
        "createdAt" : "2018-12-19T15:50:31Z",
        "updatedAt" : "2019-01-20T00:59:29Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "6defb568-0b51-4030-84f2-d6147faa3825",
        "parentId" : "d39ec5a4-2bb9-4563-a061-7e9c7c267109",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yeah, would like to leave that one for later. Might be neat to do something clever with enums here, now that the `enum` module is available.",
        "createdAt" : "2019-01-04T15:46:20Z",
        "updatedAt" : "2019-01-20T00:59:29Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c2296b242be4fe2fce46daf06a1e360ec267a08",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +34,38 @@    switch (casting) {\n        case NPY_NO_CASTING:\n            return PyUString_FromString(\"no\");\n        case NPY_EQUIV_CASTING:\n            return PyUString_FromString(\"equiv\");"
  },
  {
    "id" : "036dacfe-b509-4d23-aebd-fdf221f2a3e4",
    "prId" : 12593,
    "prUrl" : "https://github.com/numpy/numpy/pull/12593#pullrequestreview-189583271",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e97104c6-71a4-4cb8-a507-37129fd956f4",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Oddly, I feel this should return 0, as it successfully raised the error. And then in the main code, just ignore the return value, and return -1.\r\n\r\nPartially this is for later expansion: other functions need to return `NULL` when they do not succeed, so the exception should not presume what the right value is.",
        "createdAt" : "2019-01-04T17:47:19Z",
        "updatedAt" : "2019-01-20T00:59:29Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "231f5870-a0aa-487f-8642-145971cc231a",
        "parentId" : "e97104c6-71a4-4cb8-a507-37129fd956f4",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is consistent with the `raise_binary_type_reso_error` that already existed.",
        "createdAt" : "2019-01-05T03:18:57Z",
        "updatedAt" : "2019-01-20T00:59:29Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c2296b242be4fe2fce46daf06a1e360ec267a08",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +160,164 @@    Py_DECREF(exc_value);\n\n    return -1;\n}\n"
  },
  {
    "id" : "fd4d4405-5c3e-4902-873b-ab0f21fc8e6e",
    "prId" : 12593,
    "prUrl" : "https://github.com/numpy/numpy/pull/12593#pullrequestreview-189460202",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c17e701-9d68-4cbb-891d-6994753b6a74",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "See argument below for returning `0`",
        "createdAt" : "2019-01-04T17:48:35Z",
        "updatedAt" : "2019-01-20T00:59:29Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c2296b242be4fe2fce46daf06a1e360ec267a08",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +126,130 @@    Py_DECREF(exc_value);\n\n    return -1;\n}\n"
  },
  {
    "id" : "6be53b02-0f2a-4b84-a3f1-2ea3a37ec750",
    "prId" : 12928,
    "prUrl" : "https://github.com/numpy/numpy/pull/12928#pullrequestreview-201346629",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "342d1bbd-d06d-49a7-9e8f-13229ba44974",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This has the worrying consequence that `np.result_type(dt)` and `np.positive(np.empty((), dt)).dtype` give different results - but not something this patch affects",
        "createdAt" : "2019-02-04T08:22:16Z",
        "updatedAt" : "2019-02-04T08:22:16Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "25408efe-71f8-4611-9957-af7fd3df4a36",
        "parentId" : "342d1bbd-d06d-49a7-9e8f-13229ba44974",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Ah, I guess the strange thing seems to me that `np.result_type` for a single item is no-op, while it is not for binary ones. Could consider changing that for result type, but not directly important here.",
        "createdAt" : "2019-02-07T22:03:16Z",
        "updatedAt" : "2019-02-07T22:07:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "efc9ff3a8a22d20fdce7df07fcca74cd028ddcf0",
    "line" : 195,
    "diffHunk" : "@@ -1,1 +502,506 @@\n    if (type_tup == NULL) {\n        /* PyArray_ResultType forgets to force a byte order when n == 1 */\n        if (ufunc->nin == 1){\n            out_dtypes[0] = ensure_dtype_nbo(PyArray_DESCR(operands[0]));"
  },
  {
    "id" : "94282644-aa46-4bff-8e5d-c13ccb164c97",
    "prId" : 12928,
    "prUrl" : "https://github.com/numpy/numpy/pull/12928#pullrequestreview-201346629",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f06d144-7ebc-433a-a59f-20e6ce42cce0",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Guess we can use that more now with C99.",
        "createdAt" : "2019-02-07T22:05:36Z",
        "updatedAt" : "2019-02-07T22:07:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "efc9ff3a8a22d20fdce7df07fcca74cd028ddcf0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +13,17 @@#define NPY_NO_DEPRECATED_API NPY_API_VERSION\n\n#include <stdbool.h>\n\n#include \"Python.h\""
  },
  {
    "id" : "f54edd5b-6e34-4bee-bb35-224d5d2cf3bb",
    "prId" : 18880,
    "prUrl" : "https://github.com/numpy/numpy/pull/18880#pullrequestreview-649804755",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "562a4a8b-e545-4f96-a1a3-e155abe8d392",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I'm confused - I see `input_casting` added to two functions, but not used!?",
        "createdAt" : "2021-05-01T15:15:28Z",
        "updatedAt" : "2021-05-06T14:55:42Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "7cc6f68a-9732-4926-8287-2cf8571c7dba",
        "parentId" : "562a4a8b-e545-4f96-a1a3-e155abe8d392",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Its passed on to `ufunc_loop_matches` where before `casting, casting` was passed on its, not `input_casting, casting`.",
        "createdAt" : "2021-05-01T15:29:29Z",
        "updatedAt" : "2021-05-06T14:55:42Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "1a18764c-0983-47ba-8d3a-33b1db0141fe",
        "parentId" : "562a4a8b-e545-4f96-a1a3-e155abe8d392",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "OK, makes sense, thanks!",
        "createdAt" : "2021-05-01T17:37:37Z",
        "updatedAt" : "2021-05-06T14:55:42Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2f2fa0849836d1b2e16686b5833c650a1574e8b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +289,293 @@        /* Find the specified ufunc inner loop, and fill in the dtypes */\n        retval = type_tuple_type_resolver(ufunc, type_tup,\n                        operands, input_casting, casting, any_object, out_dtypes);\n    }\n"
  },
  {
    "id" : "bec4975c-a6d0-4bbc-84d4-e6159af67c5b",
    "prId" : 18880,
    "prUrl" : "https://github.com/numpy/numpy/pull/18880#pullrequestreview-653591007",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "558fc266-6ecb-4970-a2dc-00fcd030c576",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Does this mean that in future we could simplify this? If so maybe add \"TODO\" in front?",
        "createdAt" : "2021-05-06T01:01:55Z",
        "updatedAt" : "2021-05-06T14:55:42Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "79c3635d-2bda-4ded-9698-d1e5dff572c9",
        "parentId" : "558fc266-6ecb-4970-a2dc-00fcd030c576",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "My TODO here is \"replace practically everything in this file and then delete it\". It is a bit unfortunate, but to get there, I have to fix it first...",
        "createdAt" : "2021-05-06T14:28:04Z",
        "updatedAt" : "2021-05-06T14:55:42Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "e9c0ac02-5a77-408d-8d57-49cde4a75f58",
        "parentId" : "558fc266-6ecb-4970-a2dc-00fcd030c576",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : ":smile: Yes, better to evolve using small steps...",
        "createdAt" : "2021-05-06T15:39:45Z",
        "updatedAt" : "2021-05-06T15:39:45Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2f2fa0849836d1b2e16686b5833c650a1574e8b",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +1955,1959 @@                            out_dtype, orig_types, NULL);\n                        /*\n                         * In principle, we only need to validate the\n                         * NPY_NOTYPE ones\n                         */"
  },
  {
    "id" : "3c275d8d-54e8-4ab3-8978-3faf12c4c7e8",
    "prId" : 18880,
    "prUrl" : "https://github.com/numpy/numpy/pull/18880#pullrequestreview-652865892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6a0d2f5-70cb-4a13-9304-3fd31991d3bf",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "As above, is this meant to be a TODO?",
        "createdAt" : "2021-05-06T01:05:02Z",
        "updatedAt" : "2021-05-06T14:55:42Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2f2fa0849836d1b2e16686b5833c650a1574e8b",
    "line" : 225,
    "diffHunk" : "@@ -1,1 +2172,2176 @@                }\n                set_ufunc_loop_data_types(self, op, out_dtype, types, NULL);\n                /* In principle, we only need to validate the NPY_NOTYPE ones */\n                if (PyUFunc_ValidateCasting(self, casting, op, out_dtype) < 0) {\n                    for (j = 0; j < self->nargs; j++) {"
  },
  {
    "id" : "beb7c102-6732-411a-9c18-80c712f308a4",
    "prId" : 18931,
    "prUrl" : "https://github.com/numpy/numpy/pull/18931#pullrequestreview-654719724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19c96287-6c6a-4f8e-8e32-58135be495ad",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "The same happens again at l.603. Is it worth combining those into a `fail:` branch?",
        "createdAt" : "2021-05-07T17:25:28Z",
        "updatedAt" : "2021-05-07T17:25:45Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "779db4cd-8e3f-401b-84fa-255fbfa32d7b",
        "parentId" : "19c96287-6c6a-4f8e-8e32-58135be495ad",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Fair point, probably might as well.",
        "createdAt" : "2021-05-07T17:34:35Z",
        "updatedAt" : "2021-05-07T17:34:35Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "f5ee44b7-aa0a-4b4e-8836-cb48f1aa1352",
        "parentId" : "19c96287-6c6a-4f8e-8e32-58135be495ad",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Oh, turns out there is at least a bit of a point. This place only goes up to `nin` not `nop`.",
        "createdAt" : "2021-05-07T17:42:52Z",
        "updatedAt" : "2021-05-07T17:42:53Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2430c7614ac04f4a70840836cd58ba09ce20a690",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +542,546 @@                }\n                raise_no_loop_found_error(ufunc, out_dtypes);\n                for (iop = 0; iop < ufunc->nin; iop++) {\n                    Py_DECREF(out_dtypes[iop]);\n                    out_dtypes[iop] = NULL;"
  },
  {
    "id" : "5fa5057b-5107-4238-8610-0f9d776f3f37",
    "prId" : 19259,
    "prUrl" : "https://github.com/numpy/numpy/pull/19259#pullrequestreview-693434907",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acf170cd-c8c5-4a82-ab54-87f186d23874",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "What do you mean here? That when that happens the inner-loop signature can become flexible?",
        "createdAt" : "2021-06-27T14:47:00Z",
        "updatedAt" : "2021-06-27T15:18:33Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "83e8a3e2-7df3-4871-a990-323d2448b8da",
        "parentId" : "acf170cd-c8c5-4a82-ab54-87f186d23874",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Oh, what I meant is: It can make sense to make this a customizable method of `ArrayMethod`, so users can set it for an individual `ArrayMethod`.\r\n\r\nThat would be clearer (and the comment would make more sense if it was in the `array_method.c` file, but I thought I would move the code separately).",
        "createdAt" : "2021-06-27T16:28:46Z",
        "updatedAt" : "2021-06-27T16:28:46Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "510dbf8b-dcfc-4172-893b-53d1a912ff2a",
        "parentId" : "acf170cd-c8c5-4a82-ab54-87f186d23874",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "I assume @seberg will revisit the comment in a future PR.",
        "createdAt" : "2021-06-27T16:40:12Z",
        "updatedAt" : "2021-06-27T16:40:13Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "061ac77a06edbc503bb552e4d4ca6729d524c861",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1514,1518 @@ * for normal ufuncs, and only a generic loop getter exists.\n * It may make sense to generalize this in the future or allow specialization.\n * Until then, the inner-loop signature is flexible.\n */\ntypedef struct {"
  },
  {
    "id" : "0cd7a130-68ac-4ff7-82ff-4f03ae997e38",
    "prId" : 19259,
    "prUrl" : "https://github.com/numpy/numpy/pull/19259#pullrequestreview-693436149",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7778c695-888a-4ff1-9396-f749fd44cf68",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Gosh, never knew about this `memchr` stuff; should have used it for the reductions too - https://github.com/numpy/numpy/blob/cbec2c8054ea6150490b9e72eb051848b79344d1/numpy/core/src/umath/ufunc_object.c#L2956-L2959\r\n\r\nThough if I look at source code of the `glibc` version, I have *no* idea why one would roll one's own - that is one heck of an optimized function! EDIT: though obviously we need to deal with strides...",
        "createdAt" : "2021-06-27T15:03:55Z",
        "updatedAt" : "2021-06-27T15:52:57Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "f8a0cb4f-65b4-48d0-93b9-c99274df6f2b",
        "parentId" : "7778c695-888a-4ff1-9396-f749fd44cf68",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "The followup deletes the whole chunk from the reductions to re-use this.  It might make sense to re-add a broadcasted special case eventually though.  Your reduce code has such a special case, the normal ufunc code does not.",
        "createdAt" : "2021-06-27T16:32:27Z",
        "updatedAt" : "2021-06-27T16:32:27Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "da452575-5f5a-4a0d-8b42-ead1017a59a4",
        "parentId" : "7778c695-888a-4ff1-9396-f749fd44cf68",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Nice! Quite happy to go for simpler first and then see whether speed can be improved for special cases.",
        "createdAt" : "2021-06-27T16:56:47Z",
        "updatedAt" : "2021-06-27T16:56:47Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "061ac77a06edbc503bb552e4d4ca6729d524c861",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +1565,1569 @@        N -= subloopsize;\n\n        /* Process unmasked values */\n        mask = npy_memchr(mask, 0, mask_stride, N, &subloopsize, 0);\n        strided_loop(dataptrs, &subloopsize, strides, innerloopdata);"
  }
]