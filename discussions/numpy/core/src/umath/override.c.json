[
  {
    "id" : "922045c2-720a-4310-8555-b4530c800f48",
    "prId" : 8247,
    "prUrl" : "https://github.com/numpy/numpy/pull/8247#pullrequestreview-34151739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9adad9d-96eb-403a-8be9-2609da74f1b2",
        "parentId" : null,
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Is this a good place to use `NPY_UNLIKELY`?",
        "createdAt" : "2017-04-22T06:32:54Z",
        "updatedAt" : "2017-04-27T19:38:49Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "32221dfb553980e34a398c71891c7dcdfaf2f477",
    "line" : 529,
    "diffHunk" : "@@ -1,1 +527,531 @@\n        /* Check if there is a method left to call */\n        if (!override_obj) {\n            /* No acceptable override found. */\n            static PyObject *errmsg_formatter = NULL;"
  },
  {
    "id" : "8c508132-3739-4cff-8d7f-d68d53977785",
    "prId" : 9087,
    "prUrl" : "https://github.com/numpy/numpy/pull/9087#pullrequestreview-37319192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2aca259-8e24-453f-ade2-c25bba2cb4d2",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "why this change?",
        "createdAt" : "2017-05-10T14:08:07Z",
        "updatedAt" : "2017-05-10T15:58:13Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "97548a1f-fd7c-4ad4-ae81-21ca870f13dd",
        "parentId" : "e2aca259-8e24-453f-ade2-c25bba2cb4d2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Because `PyArray_LookupSpecial` returns an unbound method. Arguably it should return a bound one, but that's wasteful to construct, and I wasn't able to make it work",
        "createdAt" : "2017-05-10T14:17:31Z",
        "updatedAt" : "2017-05-10T15:58:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "82eaec2c-bb5b-4eea-a868-30ae1a8db9b4",
        "parentId" : "e2aca259-8e24-453f-ade2-c25bba2cb4d2",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "`PyObject_GetAttrString` should have done that too, was it buggy before?",
        "createdAt" : "2017-05-10T14:19:39Z",
        "updatedAt" : "2017-05-10T15:58:13Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "0368dbe2-97bc-463f-afb3-1ab8ae57d4db",
        "parentId" : "e2aca259-8e24-453f-ade2-c25bba2cb4d2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yes, it was buggy because it did `PyObject_GetAttrString(obj, ...)` not `PyObject_GetAttrString(Py_TYPE(obj), ...)`",
        "createdAt" : "2017-05-10T14:22:18Z",
        "updatedAt" : "2017-05-10T15:58:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f9eeef2abde02f03249c3ddfcce68bcdf0ee644",
    "line" : 252,
    "diffHunk" : "@@ -1,1 +557,561 @@        /* Set the self argument, since we have an unbound method */\n        Py_INCREF(override_obj);\n        PyTuple_SetItem(override_args, 0, override_obj);\n\n        /* Call the method */"
  },
  {
    "id" : "668095f8-556e-4da5-a093-5149b58d8183",
    "prId" : 9087,
    "prUrl" : "https://github.com/numpy/numpy/pull/9087#pullrequestreview-37347976",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0aefb8d9-0ca6-4e0d-a525-71e7e851f5d8",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "changing this will emit warnings in the following format functions, they use `%d`\r\nfor intp you have to use `NPY_INTP_FMT` or cast them to int again",
        "createdAt" : "2017-05-10T15:05:41Z",
        "updatedAt" : "2017-05-10T15:58:13Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "9aa9faac-2973-43ad-a018-492b3f23ea66",
        "parentId" : "0aefb8d9-0ca6-4e0d-a525-71e7e851f5d8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Maybe I should just add casts to `PyTuple_GET_SIZE` instead?",
        "createdAt" : "2017-05-10T15:09:31Z",
        "updatedAt" : "2017-05-10T15:58:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "dcfa66b0-1ae4-4618-a886-92a4ae39495f",
        "parentId" : "0aefb8d9-0ca6-4e0d-a525-71e7e851f5d8",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "just leaving it int is probably fine, I'm not too worried about stuff crashing when you pass more than 32 bit arguments.",
        "createdAt" : "2017-05-10T15:15:55Z",
        "updatedAt" : "2017-05-10T15:58:13Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "49144b4e-ce74-43e4-8a8b-8d3d94472f59",
        "parentId" : "0aefb8d9-0ca6-4e0d-a525-71e7e851f5d8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Also, it seems like either travis does not catch this type of warning, or `int == intp` on travis",
        "createdAt" : "2017-05-10T15:17:54Z",
        "updatedAt" : "2017-05-10T15:58:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "76c35f2a-b97c-4aa0-979f-9c8d901fdd52",
        "parentId" : "0aefb8d9-0ca6-4e0d-a525-71e7e851f5d8",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "the warning check is only done on 32 bit where int == intp, I wanted to fix that at some point ...",
        "createdAt" : "2017-05-10T15:18:34Z",
        "updatedAt" : "2017-05-10T15:58:13Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "b13940d4-91cf-41a0-8c6e-48252e50efe9",
        "parentId" : "0aefb8d9-0ca6-4e0d-a525-71e7e851f5d8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can we leave fixing these remaining warnings until that time then? With this change, I get fewer warnings on MSVC, which insists on only showing warnings when an error is elsewhere",
        "createdAt" : "2017-05-10T15:24:35Z",
        "updatedAt" : "2017-05-10T15:58:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "fba6df97-79b6-4f0e-b74b-cde7e0bd82ee",
        "parentId" : "0aefb8d9-0ca6-4e0d-a525-71e7e851f5d8",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "I'd rather have them fixed. I can push a commit doing so when you are otherwise done.",
        "createdAt" : "2017-05-10T15:26:55Z",
        "updatedAt" : "2017-05-10T15:58:13Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "1ede69bd-9d0b-4caa-ae48-31fa0053d740",
        "parentId" : "0aefb8d9-0ca6-4e0d-a525-71e7e851f5d8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Ok, I think I'm otherwise done here. I've given up on making `PyArray_LookupSpecial` behave more like `_PyObject_LookupSpecial`, because it messes with our `if (override == ndarray.__array_ufunc__)` check in ways that I can't debug (probably comparing bound/unbound methods, or a copy being made of the function object at some level)",
        "createdAt" : "2017-05-10T15:51:25Z",
        "updatedAt" : "2017-05-10T15:58:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f9eeef2abde02f03249c3ddfcce68bcdf0ee644",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +48,52 @@    npy_intp nin = ufunc->nin;\n    npy_intp nout = ufunc->nout;\n    npy_intp nargs = PyTuple_GET_SIZE(args);\n    PyObject *obj;\n"
  },
  {
    "id" : "fbcefe67-1fcb-4e63-be24-ddf43cfb0275",
    "prId" : 9087,
    "prUrl" : "https://github.com/numpy/numpy/pull/9087#pullrequestreview-37459114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17c3e928-6b35-4415-9c75-02b63f48a5bd",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Overall, thanks for putting this together. Much better! But why set override_args 0 here? It is just overwritten below anyway (and if you keep this write, wouldn't you have to write to decref None below)?",
        "createdAt" : "2017-05-10T17:14:13Z",
        "updatedAt" : "2017-05-10T17:14:13Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "465ade26-ba06-47ee-9299-3f500b469858",
        "parentId" : "17c3e928-6b35-4415-9c75-02b63f48a5bd",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I was worried about the behaviour of `PyTuple_SetItem` with a NULL in its target position.\r\n\r\nI do not need to decref `None`, because unlike `SETITEM`, `SetItem` handles the decref",
        "createdAt" : "2017-05-10T17:15:42Z",
        "updatedAt" : "2017-05-10T17:15:42Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ef4a6de5-767a-40d2-900a-9dea37c43018",
        "parentId" : "17c3e928-6b35-4415-9c75-02b63f48a5bd",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Why not just use `SET_ITEM` below too?",
        "createdAt" : "2017-05-10T18:11:27Z",
        "updatedAt" : "2017-05-10T18:11:27Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "7ae04399-d0d3-48a9-ba47-1bff4bdf5b48",
        "parentId" : "17c3e928-6b35-4415-9c75-02b63f48a5bd",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Because that doesn't free the reference of the object previously in the tuple. To be honest, the reference counting design here was based on the case that I was sure I had reasoned correctly about, rather than picking a strategy that would require me to read the tuple source code again.",
        "createdAt" : "2017-05-10T23:52:32Z",
        "updatedAt" : "2017-05-10T23:52:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ab824816-1f23-48b2-bf73-eb2dfab96fa9",
        "parentId" : "17c3e928-6b35-4415-9c75-02b63f48a5bd",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Fair enough! Indeed, while correcting, I played with changing it to `SET_ITEM`, and realised it became a convoluted pain of now having to decref things oneself.",
        "createdAt" : "2017-05-11T00:09:26Z",
        "updatedAt" : "2017-05-11T00:09:26Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f9eeef2abde02f03249c3ddfcce68bcdf0ee644",
    "line" : 204,
    "diffHunk" : "@@ -1,1 +478,482 @@\n    /* PyTuple_SET_ITEM steals reference */\n    Py_INCREF(Py_None);\n    PyTuple_SET_ITEM(override_args, 0, Py_None);\n    Py_INCREF(ufunc);"
  },
  {
    "id" : "bf314bc8-2dce-4c06-9566-875c86528be2",
    "prId" : 9087,
    "prUrl" : "https://github.com/numpy/numpy/pull/9087#pullrequestreview-37370258",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "779de913-4eeb-4baf-8bf4-0fc5f3f44d20",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I think you need to DECREF `override_array_ufunc` after this, no?",
        "createdAt" : "2017-05-10T17:15:36Z",
        "updatedAt" : "2017-05-10T17:15:37Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "ce2b6984-993e-4931-a701-ae25a65b1967",
        "parentId" : "779de913-4eeb-4baf-8bf4-0fc5f3f44d20",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Nope, they all <s>get</s> _should have been_ cleaned up at the bottom. Wanna patch that quick?",
        "createdAt" : "2017-05-10T17:15:53Z",
        "updatedAt" : "2017-05-10T17:16:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f9eeef2abde02f03249c3ddfcce68bcdf0ee644",
    "line" : 258,
    "diffHunk" : "@@ -1,1 +561,565 @@        /* Call the method */\n        *result = PyObject_Call(\n            override_array_ufunc, override_args, normal_kwds);\n\n        if (*result == NULL) {"
  },
  {
    "id" : "18b9cf40-be34-4eec-9c13-2711d7cc51ff",
    "prId" : 9087,
    "prUrl" : "https://github.com/numpy/numpy/pull/9087#pullrequestreview-37371004",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e350fde7-9bf8-4e76-b942-69cd735a9f72",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Ah, mistake here - this path needs to be run under both failure and success",
        "createdAt" : "2017-05-10T17:16:22Z",
        "updatedAt" : "2017-05-10T17:16:26Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "057710c7-67ef-41ae-bd4d-8d493e57349a",
        "parentId" : "e350fde7-9bf8-4e76-b942-69cd735a9f72",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Yes, that is probably the easiest solution...",
        "createdAt" : "2017-05-10T17:18:48Z",
        "updatedAt" : "2017-05-10T17:18:48Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f9eeef2abde02f03249c3ddfcce68bcdf0ee644",
    "line" : 268,
    "diffHunk" : "@@ -1,1 +587,591 @@    for (i = 0; i < num_override_args; i++) {\n        Py_XDECREF(array_ufunc_methods[i]);\n    }\n    Py_XDECREF(method_name);\n    Py_XDECREF(normal_kwds);"
  },
  {
    "id" : "36101a74-0c26-4936-9991-5bb4f657e6dc",
    "prId" : 9092,
    "prUrl" : "https://github.com/numpy/numpy/pull/9092#pullrequestreview-37429916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7e91bf9-7663-48b3-bad8-e4e708e64796",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Kind of ugly. Why not get rid of `fail` and just set `status = -1; goto cleanup;`? Maybe replace `status` with `retval` or something else more informative.",
        "createdAt" : "2017-05-10T19:59:03Z",
        "updatedAt" : "2017-05-10T19:59:03Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4e85abc1-c80a-41c5-8a10-96f8ce87c632",
        "parentId" : "f7e91bf9-7663-48b3-bad8-e4e708e64796",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Or you could initialize the return value to -1 and set it to 0 on success.",
        "createdAt" : "2017-05-10T20:16:16Z",
        "updatedAt" : "2017-05-10T20:16:16Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "99fd9a44-8373-49c4-90be-5a80dd200608",
        "parentId" : "f7e91bf9-7663-48b3-bad8-e4e708e64796",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I had started with that but then realised there are 10 `goto fail` in the script, only 2 of which would not need to set `status`. And I couldn't initialize `status` to invalid since it is used half-way through and would be set to OK there.... Overall, I felt the ugliness of this was outweighed by the clarity of having `goto fail`.",
        "createdAt" : "2017-05-10T20:36:35Z",
        "updatedAt" : "2017-05-10T20:36:35Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "1d21c29d-054d-4b97-9ea1-20cda40c7f07",
        "parentId" : "f7e91bf9-7663-48b3-bad8-e4e708e64796",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK, good enough for now. ",
        "createdAt" : "2017-05-10T21:10:32Z",
        "updatedAt" : "2017-05-10T21:10:32Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d7e4224d5f9dbb872ac7c59a8ce43fa3523976d",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +586,590 @@    status = 0;\n    /* Override found, return it. */\n    goto cleanup;\nfail:\n    status = -1;"
  },
  {
    "id" : "a3ea4cd0-7e41-44ce-8496-6d36b1f46ef5",
    "prId" : 9092,
    "prUrl" : "https://github.com/numpy/numpy/pull/9092#pullrequestreview-37447569",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d519130-2f24-4568-833e-3b4ef94d02b7",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "is this correct?\r\nThis is decrefed again later via array_ufunc_methods",
        "createdAt" : "2017-05-10T21:52:55Z",
        "updatedAt" : "2017-05-10T21:52:55Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "f81d3873-da6e-4335-85e8-39241bf1761f",
        "parentId" : "5d519130-2f24-4568-833e-3b4ef94d02b7",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "ah no it is set to NULL in there beforehand",
        "createdAt" : "2017-05-10T22:03:15Z",
        "updatedAt" : "2017-05-10T22:03:15Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "3e9c40c3-68e1-46f2-a322-50c61ebcfebb",
        "parentId" : "5d519130-2f24-4568-833e-3b4ef94d02b7",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Hopefully I got them all -- would it be possible to have, at the end of the whole test suite, a forced garbage collection and then a check whether anything in the environment survives?",
        "createdAt" : "2017-05-10T22:41:41Z",
        "updatedAt" : "2017-05-10T22:41:41Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d7e4224d5f9dbb872ac7c59a8ce43fa3523976d",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +569,573 @@        *result = PyObject_Call(\n            override_array_ufunc, override_args, normal_kwds);\n        Py_DECREF(override_array_ufunc);\n        if (*result == NULL) {\n            /* Exception occurred */"
  },
  {
    "id" : "cf915367-a8d3-4885-a10b-bd0a66a8d44f",
    "prId" : 9106,
    "prUrl" : "https://github.com/numpy/numpy/pull/9106#pullrequestreview-38826284",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5015e1db-31d6-4f6d-81e3-fc7e820f4f2b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This needs a release note - we already have a section for changed exceptions",
        "createdAt" : "2017-05-18T01:17:48Z",
        "updatedAt" : "2017-05-18T01:17:56Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "9fa4dcf7-867a-4354-a69f-8c7efb5aac25",
        "parentId" : "5015e1db-31d6-4f6d-81e3-fc7e820f4f2b",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "This one has actually not been released yet (it is used in `__array_ufunc__`), and it now becomes consistent with the regular ufuncs, so I think it is OK.",
        "createdAt" : "2017-05-18T01:28:58Z",
        "updatedAt" : "2017-05-18T01:28:58Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "f9f30f0c-c13e-4059-a243-618364fc6bd3",
        "parentId" : "5015e1db-31d6-4f6d-81e3-fc7e820f4f2b",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "You're right - testing `ufunc.__call__` on 1.12 gives me `ValueError`, as you have here.",
        "createdAt" : "2017-05-18T01:32:31Z",
        "updatedAt" : "2017-05-18T01:32:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca49f0b11bc88056bf4767ac439b298cfda16fed",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +371,375 @@\n                if (PyTuple_GET_SIZE(out) != nout) {\n                    PyErr_Format(PyExc_ValueError,\n                                 \"The 'out' tuple must have exactly \"\n                                 \"%d entries: one per ufunc output\", nout);"
  }
]