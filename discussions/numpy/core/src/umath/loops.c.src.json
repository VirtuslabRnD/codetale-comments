[
  {
    "id" : "4590c4be-4b4d-459f-aab3-f2e4c0847e9c",
    "prId" : 197,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0c6ed3e-62c6-475e-8c05-5441693d8ace",
        "parentId" : null,
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "I see you slipping in a consistency-improving change here, did you add a corresponding test?\n",
        "createdAt" : "2012-02-05T22:04:50Z",
        "updatedAt" : "2012-02-07T23:36:46Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      },
      {
        "id" : "14e58d54-44ff-4afe-87b3-59f72ae1bdfa",
        "parentId" : "d0c6ed3e-62c6-475e-8c05-5441693d8ace",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "Ah, I see the diff may just be confused - it's diffing _divide with _remainder. Sorry!\n",
        "createdAt" : "2012-02-05T22:12:24Z",
        "updatedAt" : "2012-02-07T23:36:46Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      },
      {
        "id" : "554fe193-748d-4933-bbee-c793857d0b23",
        "parentId" : "d0c6ed3e-62c6-475e-8c05-5441693d8ace",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yeah, I didn't change the code here, just split the single template into two, one for signed and the other for unsigned.\n",
        "createdAt" : "2012-02-05T22:46:24Z",
        "updatedAt" : "2012-02-07T23:36:46Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "87214fbfb095664e70702da421bc0df4cddd26c5",
    "line" : 572,
    "diffHunk" : "@@ -1,1 +888,892 @@            else {\n                *((@type@ *)op1) = rem + in2;\n            }\n        }\n    }"
  },
  {
    "id" : "91fe888b-c071-4c98-a91e-cb5036c84728",
    "prId" : 3341,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2743d01b-c918-417e-89ef-7660d727dda2",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Multiline comment style is\n\n```\n/*\n * blah\n */\n```\n",
        "createdAt" : "2013-05-23T16:18:34Z",
        "updatedAt" : "2013-05-25T15:36:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe69102dd34619ce18cf074ef0e6e46611bc17e7",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +44,48 @@        && (steps[0] == 0))\n\n/*\n * stride is equal to element size and input and destination are equal or\n * don't overlap within one register"
  },
  {
    "id" : "ba40a754-8e83-46c0-980d-34afbedc8a7c",
    "prId" : 3411,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b49f22fd-87f4-411d-8df7-6d1647f21f7f",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, from your earlier comments I had the impression that you were including the source so as to use the gcc multiversioning. Is that not the case? \n",
        "createdAt" : "2013-06-08T20:32:04Z",
        "updatedAt" : "2013-06-08T21:19:09Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b6246667-b6f8-470e-934c-e4c7c8c65d72",
        "parentId" : "b49f22fd-87f4-411d-8df7-6d1647f21f7f",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "with GCC multiversioning can be done with any file scheme, you don't need to split it into multiple files. You would have to with compiler that have no function specific option pragmas/attributes.\n\nIts not done now as the main reason to do it is AVX, and I don't have the hardware to actually test that.\nAlso it would require a quite new GCC (+ more setup.py configure checks for this)\n",
        "createdAt" : "2013-06-08T20:37:33Z",
        "updatedAt" : "2013-06-08T21:19:09Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "62c95716-e1a1-41f7-a631-ef8015a3764b",
        "parentId" : "b49f22fd-87f4-411d-8df7-6d1647f21f7f",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "That sounds sort of like what I was thinking, that is, a very new GCC would be required in order to use a file that was linked in rather than compiled in. Or am I still missing something.\n",
        "createdAt" : "2013-06-08T20:48:54Z",
        "updatedAt" : "2013-06-08T21:19:09Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "f6726850-3d45-4e4f-a597-7ac22f1e9ef5",
        "parentId" : "b49f22fd-87f4-411d-8df7-6d1647f21f7f",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "in order to use a linked file you have no special compiler requirements. You just need to adapt your buildsystem to treat this file specially.\nGCC just allows you to do it more conveniently by having inline annotations so no special buildsystem treatment of the file is required.\n",
        "createdAt" : "2013-06-08T20:51:48Z",
        "updatedAt" : "2013-06-08T21:19:09Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "68aa2e0e-8698-4587-a83f-76235e1421aa",
        "parentId" : "b49f22fd-87f4-411d-8df7-6d1647f21f7f",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So basically this is just easier than messing with the build system?\n",
        "createdAt" : "2013-06-08T20:54:08Z",
        "updatedAt" : "2013-06-08T21:19:09Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6cc0f0d7-7464-4f8c-b6e6-c571f642b84c",
        "parentId" : "b49f22fd-87f4-411d-8df7-6d1647f21f7f",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "yes\n",
        "createdAt" : "2013-06-08T20:54:57Z",
        "updatedAt" : "2013-06-08T21:19:09Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "0beb9964-8549-402e-acad-e0600c5d65e1",
        "parentId" : "b49f22fd-87f4-411d-8df7-6d1647f21f7f",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "note that nothing special is used in this PR, the split just for organizational reasons.\n",
        "createdAt" : "2013-06-08T20:58:18Z",
        "updatedAt" : "2013-06-08T21:19:09Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fb8b714906a92516905cc0f03e45511bd1ac1ed",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +27,31 @@ * platform specific instructions are either masked via the proprocessor or\n * runtime detected\n */\n#include \"simd.inc\"\n"
  },
  {
    "id" : "5a7dcd0c-be62-4869-9c96-5a03f07099d6",
    "prId" : 3419,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ff2ad7c-538d-402b-a882-3a4ac092e470",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'm wondering if this is portable? Some compilers (SUN) would only allow initialization of struct with constants. SUN is history, but I'm not sure it's ancient history. Is it possible to just pass args and steps?\n\nI also looks like this pattern would be a candidate for a macro, maybe something like `SIMD_UNARY_LOOP`?\n",
        "createdAt" : "2013-06-09T20:11:15Z",
        "updatedAt" : "2013-06-11T17:17:56Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "53b6fb91-4792-4dbf-bf67-6798fb9c3aaf",
        "parentId" : "4ff2ad7c-538d-402b-a882-3a4ac092e470",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "do we really need to support pre C89 compilers?\nits no problem to do this in three steps, but at some point you have to draw the line what you want to support.\n\ncurrently its only used twice and I don't see the need to do it more often. Its just so square and reciprocal are not slower than their explicit counter parts which do the same if the input pointers are equal.\nThe functions are obsolete on amd64 now.\n",
        "createdAt" : "2013-06-09T20:17:06Z",
        "updatedAt" : "2013-06-11T17:17:56Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "db9a5833-c5f5-4315-888c-81df83cda7e5",
        "parentId" : "4ff2ad7c-538d-402b-a882-3a4ac092e470",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "We could just give it a try and wait for complaints, if any. As you say, it isn't worth supported obsolete stuff and C89 isn't that new ;) \n",
        "createdAt" : "2013-06-09T20:26:36Z",
        "updatedAt" : "2013-06-11T17:17:56Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ffa0130774242fb1b35a5f5a36366968d489d729",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1495,1499 @@@TYPE@_square(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(data))\n{\n    char * margs[] = {args[0], args[0], args[1]};\n    npy_intp msteps[] = {steps[0], steps[0], steps[1]};\n    if (run_binary_simd_multiply_@TYPE@(margs, dimensions, msteps)) {"
  },
  {
    "id" : "348e9bf6-7742-4541-817e-b9cbeef1fa3d",
    "prId" : 3514,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a195a4b2-222b-4372-8643-0987abd7bf12",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, is this GIL safe? Do any of the ufuncs release the GIL?\n",
        "createdAt" : "2014-05-04T19:42:41Z",
        "updatedAt" : "2014-05-04T19:42:41Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "3e4a5336-5545-438a-9916-6146f759472b",
        "parentId" : "a195a4b2-222b-4372-8643-0987abd7bf12",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK, these are all for object arrays.\n",
        "createdAt" : "2014-05-04T19:51:16Z",
        "updatedAt" : "2014-05-04T19:51:16Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f40831a53ff2d572f338b1445e40bc88a1167ce7",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +2586,2590 @@#if @identity@ != -1\n            if (in1 == in2) {\n                PyErr_Clear();\n                if (DEPRECATE(\"numpy @kind@ will not check object identity \"\n                              \"in the future. The comparison error will \""
  },
  {
    "id" : "c0c55397-ee18-415f-bff4-bdb21c3798b0",
    "prId" : 3772,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "413c6cce-17f8-49b9-bb4c-de3197657fd8",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "See previous comment.\n",
        "createdAt" : "2013-09-21T21:05:37Z",
        "updatedAt" : "2013-09-21T21:05:37Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd2e1104718490be8504f8d6665205ca594a37e7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +11,15 @@#endif\n\n#include \"numpy/npy_common.h\"\n#include \"numpy/arrayobject.h\"\n#include \"numpy/ufuncobject.h\""
  },
  {
    "id" : "d9e2f92f-7ad0-46fd-9f28-cf8167eeff0a",
    "prId" : 4449,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53d353dc-9864-41f4-8499-352e9691b846",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Bit curious why you are defining margs and msteps. How does this function differ from the usual?\n",
        "createdAt" : "2014-03-05T20:54:58Z",
        "updatedAt" : "2014-03-05T20:54:58Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6c7b1f26-1aa0-49d7-b251-f6b540ba57b6",
        "parentId" : "53d353dc-9864-41f4-8499-352e9691b846",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "its required so we can use the binary dispatcher for with unary loop, the dispatcher will check all three arguments which are uninitialized for unary loops.\nOne could probably also modify the dispatcher to take another argument defining if binary or unary but I this works fine (the same method is already used for _square and _reciprocal)\n",
        "createdAt" : "2014-03-05T21:06:05Z",
        "updatedAt" : "2014-03-05T21:06:05Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "37967930e05700af8ee3b66bdb35c5b8a02d17dd",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1521,1525 @@{\n    char * margs[] = {args[0], args[0], args[1]};\n    npy_intp msteps[] = {steps[0], steps[0], steps[1]};\n    if (!@isnan@ || !run_binary_simd_not_equal_@TYPE@(margs, dimensions, msteps)) {\n        UNARY_LOOP {"
  },
  {
    "id" : "5dbef4a4-4591-40d5-a38d-c02e48413f16",
    "prId" : 5144,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0f81c7f-ab0d-45f2-9dee-a51a67a98343",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The two loops look identical. What am I missing?\n",
        "createdAt" : "2014-10-11T16:18:00Z",
        "updatedAt" : "2014-10-11T17:03:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "5099f8fd-1f5e-48b4-bbd5-ccd708ca7393",
        "parentId" : "f0f81c7f-ab0d-45f2-9dee-a51a67a98343",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "in the first case the compiler has extra information from the if clause and will remove the stride computations for us so we don't need another loop macro.\n",
        "createdAt" : "2014-10-11T16:21:46Z",
        "updatedAt" : "2014-10-11T17:03:02Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "110aff77-c6a7-4cb4-875a-46a254c4a2c6",
        "parentId" : "f0f81c7f-ab0d-45f2-9dee-a51a67a98343",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "I am again assuming a somewhat smart compiler, works fine with gcc, but we could also make it explicit for less capable ones.\n",
        "createdAt" : "2014-10-11T16:23:48Z",
        "updatedAt" : "2014-10-11T17:03:02Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "0fa383c8-ef29-4fe0-8ce3-abd3e47b309c",
        "parentId" : "f0f81c7f-ab0d-45f2-9dee-a51a67a98343",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The compilers are smarter than me ;) Explicit is better, but at least a note in the comments would be helpful.\n",
        "createdAt" : "2014-10-11T16:34:45Z",
        "updatedAt" : "2014-10-11T17:03:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "59d7206c-73c5-41b7-85fe-49ebf0a3868f",
        "parentId" : "f0f81c7f-ab0d-45f2-9dee-a51a67a98343",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "fyi, tested it with gcc-4.4 which is the one on rh6, so we should be fine on that front. clang 3.5 can't vectorize this even with explicit help.\nI'll add a comment\n",
        "createdAt" : "2014-10-11T16:46:16Z",
        "updatedAt" : "2014-10-11T17:03:02Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "485c415c-80f9-4a81-8e42-0c7eb8831281",
        "parentId" : "f0f81c7f-ab0d-45f2-9dee-a51a67a98343",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "added\n",
        "createdAt" : "2014-10-11T17:03:56Z",
        "updatedAt" : "2014-10-11T17:03:56Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e1ff063751461f7c4287933b88554f4d44d7ee5",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +102,106 @@    else { \\\n        UNARY_LOOP { \\\n            const tin in = *(tin *)ip1; \\\n            tout * out = (tout *)op1; \\\n            op; \\"
  },
  {
    "id" : "1a63e82b-fe16-4cef-a2f4-c003f91b3344",
    "prId" : 5144,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7abdedb4-1c75-442d-8301-41ec47b82b99",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This loop is a repeat of the first. ?\n",
        "createdAt" : "2014-10-11T16:26:01Z",
        "updatedAt" : "2014-10-11T17:03:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4ed169e7-8356-4895-8d9e-568c9a022def",
        "parentId" : "7abdedb4-1c75-442d-8301-41ec47b82b99",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "yes same reasoning as before, by using NPY_RESTRICT technically all three loops could be the same, but it wouldn't save any lines of code.\n",
        "createdAt" : "2014-10-11T16:27:34Z",
        "updatedAt" : "2014-10-11T17:03:02Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e1ff063751461f7c4287933b88554f4d44d7ee5",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +160,164 @@    else { \\\n        BINARY_LOOP { \\\n            const tin in1 = *(tin *)ip1; \\\n            const tin in2 = *(tin *)ip2; \\\n            tout * out = (tout *)op1; \\"
  },
  {
    "id" : "bbebc9a3-15b8-4351-be5a-a734bebc8713",
    "prId" : 6269,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77ed26db-151b-44fe-b5a9-8b374b5d3793",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I doesn't look like zero is used anymore.\n",
        "createdAt" : "2015-09-27T01:05:05Z",
        "updatedAt" : "2015-09-28T20:16:20Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ab331cd8-7cf7-44b2-bae0-102a7b051ee9",
        "parentId" : "77ed26db-151b-44fe-b5a9-8b374b5d3793",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Oops, nevermind.\n",
        "createdAt" : "2015-09-27T01:12:13Z",
        "updatedAt" : "2015-09-28T20:16:20Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "00edb2b6a96b7189be91d16cb84981a60c5961e8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2619,2623 @@OBJECT_sign(char **args, npy_intp *dimensions, npy_intp *steps, void *NPY_UNUSED(func))\n{\n    PyObject *zero = PyLong_FromLong(0);\n\n    UNARY_LOOP {"
  },
  {
    "id" : "6bc848df-d97d-41f9-954b-208e989d4f66",
    "prId" : 7057,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e32f3ee-4d29-4925-9863-67286c83fc78",
        "parentId" : null,
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Is there a reason for DEPRECATE_FUTUREWARNING rather than just DEPRECATE? Do we have a rule for when to choose which?\n",
        "createdAt" : "2016-01-19T02:10:35Z",
        "updatedAt" : "2016-01-19T02:10:35Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "edf4b5ac-3128-424a-8aec-48663d59bbf0",
        "parentId" : "4e32f3ee-4d29-4925-9863-67286c83fc78",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@shoyer My understanding of the differences is this. A `DeprecationWarning` means that in the future either the feature will be removed or an exception will be raised. OTOH, a `FutureWarning` means that the feature will remain but its behavior will change.\n\nI suppose the macro name `DEPRECATE_FUTUREWARNING` is a bit misleading, it just issues a `FutureWarning`.\n",
        "createdAt" : "2016-01-19T02:31:37Z",
        "updatedAt" : "2016-01-19T02:32:15Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "31dbc05d86c4018c76562466de0ea569eb1f8a62",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1134,1138 @@            NPY_ALLOW_C_API;\n            /* 2016-01-18, 1.11 */\n            if (DEPRECATE_FUTUREWARNING(\n                    \"In the future, 'NAT @OP@ x' and 'x @OP@ NAT' \"\n                    \"will always be False.\") < 0) {"
  },
  {
    "id" : "11891948-b0a7-4605-a819-22744711b98f",
    "prId" : 7057,
    "prUrl" : "https://github.com/numpy/numpy/pull/7057#pullrequestreview-16862109",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be34853f-869f-4642-8fbb-73d613070b84",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "I assume this should be in2 in the second case?\r\nthis was not detected by our CI because apparently a change removed our compiler warning check ...",
        "createdAt" : "2017-01-16T17:48:48Z",
        "updatedAt" : "2017-01-16T17:48:48Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "9c90a06c-91d3-4fdf-bc7b-365e71f4783c",
        "parentId" : "be34853f-869f-4642-8fbb-73d613070b84",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yep, looks like a bug.",
        "createdAt" : "2017-01-16T18:22:13Z",
        "updatedAt" : "2017-01-16T18:22:13Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2ff1e56e-9b0f-4118-b0b1-f10a1b883d12",
        "parentId" : "be34853f-869f-4642-8fbb-73d613070b84",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "However, it still issues the required warning (which is why the test passed), it just issues it too often, even when the current comparison is already false.",
        "createdAt" : "2017-01-16T18:25:38Z",
        "updatedAt" : "2017-01-16T18:25:38Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "1a18b5aa-8e35-465d-8015-f47ba8d907ab",
        "parentId" : "be34853f-869f-4642-8fbb-73d613070b84",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@juliantaylor Could you open is issue or PR for this, milestone 1.12.1",
        "createdAt" : "2017-01-16T18:28:45Z",
        "updatedAt" : "2017-01-16T18:28:45Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4abc9c32-0b5b-4bad-80dd-4287bc2e3929",
        "parentId" : "be34853f-869f-4642-8fbb-73d613070b84",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "see gh-8483",
        "createdAt" : "2017-01-16T18:30:29Z",
        "updatedAt" : "2017-01-16T18:30:29Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "31dbc05d86c4018c76562466de0ea569eb1f8a62",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +1154,1158 @@        *((npy_bool *)op1) = in1 != in2;\n\n        if (in1 == NPY_DATETIME_NAT && in1 == NPY_DATETIME_NAT) {\n            NPY_ALLOW_C_API_DEF\n            NPY_ALLOW_C_API;"
  },
  {
    "id" : "d433d37c-9307-4309-9e8f-0a1fe725f775",
    "prId" : 7651,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0614de9e-905d-4924-a9c2-ef5eebe894c1",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "How about drop the previous if and\n\n```\nif (in2 < 0 && (in1 > 1 || in1 < -1)) {\n```\n\nAnd a special check for divide by zero.\n",
        "createdAt" : "2016-05-20T02:17:46Z",
        "updatedAt" : "2016-05-20T02:17:46Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cde31bad1b1e698010fa2801255b5bd8ba3de90",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +926,930 @@            continue;\n        }\n        if (in2 < 0 || in1 == 0) {\n            *((@type@ *)op1) = 0;\n            continue;"
  },
  {
    "id" : "28dc5168-a773-4d68-b9f5-f60a69d25c74",
    "prId" : 7999,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9003c8ee-2bc1-4c55-a2fc-43f2c5a8ae2a",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Jeesh, this macro argument passing is starting to give me the creeps ;). By now I think its correct, but could maybe use a comment here to explain things a bit more in depth, I am not used to such macros, but took me a bit to figure out that `in1` always ends up pointing to the correct `args[0]`, etc.\n",
        "createdAt" : "2016-08-31T22:47:55Z",
        "updatedAt" : "2016-09-01T14:12:29Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "702f4c25-02b5-46d8-b493-6fdb06ecf8cb",
        "parentId" : "9003c8ee-2bc1-4c55-a2fc-43f2c5a8ae2a",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Or maybe it is just one of those things you have to stare at until it makes sense...\n",
        "createdAt" : "2016-08-31T22:54:03Z",
        "updatedAt" : "2016-09-01T14:12:29Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d555a0ad0f1191daf8ae83e10933da5556b2510e",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +139,143 @@        op; \\\n    }\n#define BASE_BINARY_LOOP_S(tin, tout, cin, cinp, vin, vinp, op) \\\n    const tin cin = *(tin *)cinp; \\\n    BINARY_LOOP { \\"
  }
]