[
  {
    "id" : "c7fb5f56-0777-491b-9c01-a1d3c5e51ca0",
    "prId" : 12219,
    "prUrl" : "https://github.com/numpy/numpy/pull/12219#pullrequestreview-173682330",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fab769a7-42a1-4244-9995-f06fd73bd20f",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "An inner loop selector might be useful. For now, I think it would make sense to calculate some bool outside the loops that have clearer names (say, `int vecvec = (dm == 1 && dp == 1);`)",
        "createdAt" : "2018-11-07T14:06:14Z",
        "updatedAt" : "2018-12-03T17:44:03Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "cfb0928c-df6b-4c48-9a9d-a6bb43d8de97",
        "parentId" : "fab769a7-42a1-4244-9995-f06fd73bd20f",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "The definitions are helpful, but maybe still move them outside of the loop? Their values cannot change...",
        "createdAt" : "2018-11-10T18:53:16Z",
        "updatedAt" : "2018-12-03T17:44:03Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "8801fc10-93a1-40d5-ba71-500cc5edc90d",
        "parentId" : "fab769a7-42a1-4244-9995-f06fd73bd20f",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "moved",
        "createdAt" : "2018-11-11T02:28:26Z",
        "updatedAt" : "2018-12-03T17:44:03Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "18476f5285bdd3f1405086e37240a9bd2640ff16",
    "line" : 324,
    "diffHunk" : "@@ -1,1 +322,326 @@#if @USEBLAS@ && defined(HAVE_CBLAS)\n        /*\n         * TODO: refactor this out to a inner_loop_selector, in\n         * PyUFunc_MatmulLoopSelector. But that call does not have access to\n         * n, m, p and strides."
  },
  {
    "id" : "ea351710-988f-4422-ad04-91ec66ca92d7",
    "prId" : 12219,
    "prUrl" : "https://github.com/numpy/numpy/pull/12219#pullrequestreview-176428369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3684bbfa-932f-494e-acfb-125f67801c68",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "If it should not happen it should raise an error.\r\nPerhaps easier: rewrite the branch above this one as\r\n```\r\nelse {\r\n    /* If not ColMajor, caller should have ensured we are RowMajor */\r\n    assert(is1_m == sizeof(@type@) * m);\r\n    order = CblasRowMajor;\r\n    lda = m;\r\n}\r\n```",
        "createdAt" : "2018-11-10T18:32:44Z",
        "updatedAt" : "2018-12-03T17:44:03Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "052fac6e-85f6-4b09-ae12-23600fd489d6",
        "parentId" : "3684bbfa-932f-494e-acfb-125f67801c68",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "changed comment. There is no error escape path for inner loops, and assert is fatal in debug and a no-op in release.",
        "createdAt" : "2018-11-11T01:26:35Z",
        "updatedAt" : "2018-12-03T17:44:03Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "2fe1aff0-5d60-4783-b92c-90e4dc77fc41",
        "parentId" : "3684bbfa-932f-494e-acfb-125f67801c68",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Added a check before calling gemv, othewise will not use BLAS",
        "createdAt" : "2018-11-11T01:36:55Z",
        "updatedAt" : "2018-12-03T17:44:03Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "697e8be0-3a9f-4ea3-8e31-10c235302542",
        "parentId" : "3684bbfa-932f-494e-acfb-125f67801c68",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I think the point of the assert would indeed be for it to be fatal in debug mode (i.e., we'd have a failing test in CI if we somehow mess this up) and ignored otherwise. It also makes clear what the expectation is.",
        "createdAt" : "2018-11-11T01:52:25Z",
        "updatedAt" : "2018-12-03T17:44:03Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "83d70fac-c42e-4e97-87b8-8b44148db5f7",
        "parentId" : "3684bbfa-932f-494e-acfb-125f67801c68",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "ok, adding asserts for all these",
        "createdAt" : "2018-11-11T02:06:23Z",
        "updatedAt" : "2018-12-03T17:44:03Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "5263c2c3-6f76-4286-ae02-b1455631844c",
        "parentId" : "3684bbfa-932f-494e-acfb-125f67801c68",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I still think my initial suggestion is a bit better and more consistent with how we do things elsewhere, as it expresses most concisely our understanding that something should never happen (which will get tested in development mode).",
        "createdAt" : "2018-11-19T16:43:03Z",
        "updatedAt" : "2018-12-03T17:44:03Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "a3ff6502-bb85-4824-978d-ba41ec7064b7",
        "parentId" : "3684bbfa-932f-494e-acfb-125f67801c68",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "adopted your suggestion",
        "createdAt" : "2018-11-19T18:09:57Z",
        "updatedAt" : "2018-12-03T17:44:03Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "18476f5285bdd3f1405086e37240a9bd2640ff16",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +99,103 @@        /* If not ColMajor, caller should have ensured we are RowMajor */\n        /* will not assert in release mode */\n        order = CblasRowMajor;\n        assert(is_blasable2d(is1_n, is1_m, n, m, sizeof(@typ@)));\n        lda = (int)(is1_n / sizeof(@typ@));"
  },
  {
    "id" : "375d358b-f324-49a2-bf7c-db7fb80d4956",
    "prId" : 12219,
    "prUrl" : "https://github.com/numpy/numpy/pull/12219#pullrequestreview-173682005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48e987fb-3d1b-4b9b-805c-2ddbf862a87d",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Logically, there should be a `cblas` routine to do this (since there are optimizations for large matrices...), but I cannot find it easily.",
        "createdAt" : "2018-11-10T18:45:43Z",
        "updatedAt" : "2018-12-03T17:44:03Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "04a26e5a-e26a-41c6-89e7-cff763cc4003",
        "parentId" : "48e987fb-3d1b-4b9b-805c-2ddbf862a87d",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "`dot` also copies in a loop.",
        "createdAt" : "2018-11-11T02:07:39Z",
        "updatedAt" : "2018-12-03T17:44:03Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "18476f5285bdd3f1405086e37240a9bd2640ff16",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +170,174 @@                               ip1, ldb, @step0@, op, ldc);\n        }\n        /* Copy the triangle */\n        for (i = 0; i < P; i++) {\n            for (j = i + 1; j < P; j++) {"
  },
  {
    "id" : "2d77e9f9-ec27-4f45-b623-928f90797b03",
    "prId" : 12219,
    "prUrl" : "https://github.com/numpy/numpy/pull/12219#pullrequestreview-173670420",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d669e00e-553c-4405-8950-bce3cabdb1ca",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Sometimes I realize again why I like fortran better than C - really, no good complex number support?",
        "createdAt" : "2018-11-10T18:49:43Z",
        "updatedAt" : "2018-12-03T17:44:03Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "18476f5285bdd3f1405086e37240a9bd2640ff16",
    "line" : 230,
    "diffHunk" : "@@ -1,1 +228,232 @@        for (p = 0; p < dp; p++) {\n#if @IS_COMPLEX@ == 1\n            (*(@typ@ *)op).real = 0;\n            (*(@typ@ *)op).imag = 0;\n#elif @IS_HALF@"
  },
  {
    "id" : "389b98dc-cf56-4465-bff8-3bd2a1669938",
    "prId" : 12219,
    "prUrl" : "https://github.com/numpy/numpy/pull/12219#pullrequestreview-176428915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e8f11c6-1cfe-4ac9-8465-10a7f425379e",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "As above",
        "createdAt" : "2018-11-19T16:46:08Z",
        "updatedAt" : "2018-12-03T17:44:03Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "e12a0555-1db1-49cb-84a1-837025c5b78f",
        "parentId" : "0e8f11c6-1cfe-4ac9-8465-10a7f425379e",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "adopted your suggested logic",
        "createdAt" : "2018-11-19T18:11:28Z",
        "updatedAt" : "2018-12-03T17:44:03Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "18476f5285bdd3f1405086e37240a9bd2640ff16",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +133,137 @@    else {\n        /* If not ColMajor, caller should have ensured we are RowMajor */\n        /* will not assert in release mode */\n        assert(is_blasable2d(is1_n, is1_m, n, m, sizeof(@typ@)));\n        trans1 = CblasTrans;"
  },
  {
    "id" : "942950da-6d3d-4fec-b830-c3c001fe984e",
    "prId" : 12219,
    "prUrl" : "https://github.com/numpy/numpy/pull/12219#pullrequestreview-176453731",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e8c9c04-e164-435d-a955-c64b05bd96b1",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Didn't point this one out, but might as well change this too...",
        "createdAt" : "2018-11-19T18:47:47Z",
        "updatedAt" : "2018-12-03T17:44:03Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "8ada757b-afbc-4a07-b333-8fa3670fe90a",
        "parentId" : "5e8c9c04-e164-435d-a955-c64b05bd96b1",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "fixed, sorry to have missed it",
        "createdAt" : "2018-11-19T19:12:37Z",
        "updatedAt" : "2018-12-03T17:44:03Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "18476f5285bdd3f1405086e37240a9bd2640ff16",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +145,149 @@    else {\n        /* If not ColMajor, caller should have ensured we are RowMajor */\n        /* will not assert in release mode */\n        assert(is_blasable2d(is2_p, is2_n, p, n, sizeof(@typ@)));\n        trans2 = CblasTrans;"
  },
  {
    "id" : "0b3d37cf-6715-45ab-bb9a-0aa3b0a99ae8",
    "prId" : 12219,
    "prUrl" : "https://github.com/numpy/numpy/pull/12219#pullrequestreview-178579106",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bbc15f2-1340-4d7a-af90-b92cf4a79665",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I don't think we use these markers in our other c.src files, although doing so isn't super harmful.",
        "createdAt" : "2018-11-27T00:35:41Z",
        "updatedAt" : "2018-12-03T17:44:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "4d25caff-35d5-4653-b2a6-f2df5716b851",
        "parentId" : "4bbc15f2-1340-4d7a-af90-b92cf4a79665",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "`loops.c.src` has the markers",
        "createdAt" : "2018-11-27T01:37:30Z",
        "updatedAt" : "2018-12-03T17:44:04Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "10544a42-2ca8-47c4-a6f9-ee70c4c49dc3",
        "parentId" : "4bbc15f2-1340-4d7a-af90-b92cf4a79665",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Sounds like a convincing argument to me.",
        "createdAt" : "2018-11-27T01:42:56Z",
        "updatedAt" : "2018-12-03T17:44:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "18476f5285bdd3f1405086e37240a9bd2640ff16",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@/* -*- c -*- */\n\n#define _UMATHMODULE"
  },
  {
    "id" : "8e7d0da8-1096-4438-a29b-6196b3df011c",
    "prId" : 12219,
    "prUrl" : "https://github.com/numpy/numpy/pull/12219#pullrequestreview-178578156",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c233a2b4-5792-47bc-a4c8-7bd84f9ed00b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Is this the only file that defines both?",
        "createdAt" : "2018-11-27T00:35:59Z",
        "updatedAt" : "2018-12-03T17:44:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "da1cd2f3-6da1-45a2-8d30-ad8b66328e09",
        "parentId" : "c233a2b4-5792-47bc-a4c8-7bd84f9ed00b",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "`loops.c.src` defines both",
        "createdAt" : "2018-11-27T01:37:49Z",
        "updatedAt" : "2018-12-03T17:44:04Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "18476f5285bdd3f1405086e37240a9bd2640ff16",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2,6 @@\n#define _UMATHMODULE\n#define _MULTIARRAYMODULE\n#define NPY_NO_DEPRECATED_API NPY_API_VERSION\n"
  },
  {
    "id" : "7cdf24d7-df08-4c68-925c-293db48a4f9b",
    "prId" : 12219,
    "prUrl" : "https://github.com/numpy/numpy/pull/12219#pullrequestreview-179412759",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfb140e6-679f-4cea-a525-6bb08ce307b8",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "You could save a lot of branching by transposing this loop with the if statements - but the compiler is probably smart enough to do this anyway.  Something to try in future I think",
        "createdAt" : "2018-11-27T19:42:14Z",
        "updatedAt" : "2018-12-03T17:44:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a931795e-9dca-4496-bcad-f0126d1aded1",
        "parentId" : "bfb140e6-679f-4cea-a525-6bb08ce307b8",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "ok, will try this. It will be cleanest if I unify all the inner function signatures and make a `typedef func*`",
        "createdAt" : "2018-11-27T23:44:06Z",
        "updatedAt" : "2018-12-03T17:44:04Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "90ee081b-ff54-4531-97eb-e6b5995addb6",
        "parentId" : "bfb140e6-679f-4cea-a525-6bb08ce307b8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Sure you don't want to leave this to a follow-up PR? Indirecting via a function pointer will lead to branching just like you have here, so probably isn't worthwhile.",
        "createdAt" : "2018-11-27T23:47:27Z",
        "updatedAt" : "2018-12-03T17:44:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "121e433b-7a6e-4c7a-abbd-9094a2ef5f21",
        "parentId" : "bfb140e6-679f-4cea-a525-6bb08ce307b8",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "ok, will stop with last *pushed* commit\r\n\r\nEdit: add \"pushed\"",
        "createdAt" : "2018-11-28T00:19:20Z",
        "updatedAt" : "2018-12-03T17:44:04Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "47eb4231-e715-4798-ab1a-9d56338b7a12",
        "parentId" : "bfb140e6-679f-4cea-a525-6bb08ce307b8",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "> Indirecting via a function pointer will lead to branching just like you have here\r\n\r\nMy intention was to do all the logic, then the loop so something like\r\n```\r\nif .... :\r\n  func = f1\r\nelif ... :\r\n    func = f2\r\n/* Done with logic, now enter the loop */\r\nfor ...\r\n    func(args)\r\n```\r\nbut I will leave this for now.\r\n\r\nAnything else (other than the last rename) need fixing?",
        "createdAt" : "2018-11-28T17:07:03Z",
        "updatedAt" : "2018-12-03T17:44:04Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "18476f5285bdd3f1405086e37240a9bd2640ff16",
    "line" : 320,
    "diffHunk" : "@@ -1,1 +318,322 @@\n    for (iOuter = 0; iOuter < dOuter; iOuter++,\n                         args[0] += s0, args[1] += s1, args[2] += s2) {\n        void *ip1=args[0], *ip2=args[1], *op=args[2];\n#if @USEBLAS@ && defined(HAVE_CBLAS)"
  },
  {
    "id" : "814e7073-2dc3-4555-b8e1-21eda9841f0f",
    "prId" : 12219,
    "prUrl" : "https://github.com/numpy/numpy/pull/12219#pullrequestreview-179065909",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c389fb3-0d0f-463c-b02b-018cfca8bf83",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This comment is not true - you can end up here also with a non-blasable `matrix @ vector`",
        "createdAt" : "2018-11-27T23:05:12Z",
        "updatedAt" : "2018-12-03T17:44:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e731d278-4435-4d53-b7c5-e5db5214fc07",
        "parentId" : "4c389fb3-0d0f-463c-b02b-018cfca8bf83",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "non-blasable special cases (n ==1 || m ==1 || p==1) end up in the previous block",
        "createdAt" : "2018-11-27T23:47:26Z",
        "updatedAt" : "2018-12-03T17:44:04Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "18476f5285bdd3f1405086e37240a9bd2640ff16",
    "line" : 363,
    "diffHunk" : "@@ -1,1 +361,365 @@            }\n        } else {\n            /* matrix @ matrix */\n            if (i1blasable && i2blasable && o_c_blasable) {\n                @TYPE@_matmul_matrixmatrix(ip1, is1_m, is1_n,"
  },
  {
    "id" : "16df3542-954b-4f56-b4d4-80a8ba537de5",
    "prId" : 12219,
    "prUrl" : "https://github.com/numpy/numpy/pull/12219#pullrequestreview-180359936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3aac9efc-f849-42d1-ad9e-81cc64d6e0de",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Perhaps rename to `blasable_matrix_vector`, and `vector_blasable_matrix` above?",
        "createdAt" : "2018-11-27T23:50:00Z",
        "updatedAt" : "2018-12-03T17:44:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b5c17b56-ff7f-433f-9c5c-49712bb09853",
        "parentId" : "3aac9efc-f849-42d1-ad9e-81cc64d6e0de",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "will do if there are more fixes",
        "createdAt" : "2018-11-28T00:20:51Z",
        "updatedAt" : "2018-12-03T17:44:04Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "99eadb76-2bf1-4dc3-b3c3-b9f9a533b87a",
        "parentId" : "3aac9efc-f849-42d1-ad9e-81cc64d6e0de",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "done",
        "createdAt" : "2018-11-30T17:05:24Z",
        "updatedAt" : "2018-12-03T17:44:04Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "18476f5285bdd3f1405086e37240a9bd2640ff16",
    "line" : 351,
    "diffHunk" : "@@ -1,1 +349,353 @@                @TYPE@_gemv(ip2, is2_p, is2_n, ip1, is1_n, is1_m,\n                            op, os_p, os_m, dp, dn, dm);\n            } else if  (matrix_vector) {\n                /* matrix @ vector */\n                @TYPE@_gemv(ip1, is1_m, is1_n, ip2, is2_n, is2_p,"
  },
  {
    "id" : "b940fe9f-b0c5-470f-a042-98acca0f9dde",
    "prId" : 13503,
    "prUrl" : "https://github.com/numpy/numpy/pull/13503#pullrequestreview-236388793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb9b0e1d-0dc0-4639-b07e-ba3387750956",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Better to replace `NULL` with `Py_None`, i.e. (plus minus typos)\r\n```\r\nPyObject *obj1=*(PyObject**)ip1, *obj2=*(PyObject**)ip2;\r\nif (obj1 == NULL) {\r\n    ip1 = Py_None;\r\n}\r\nif (obj2 == NULL) {\r\n    ip2 = Py_None;\r\n}\r\ntmp1 = PyNumber_Multiply(obj1, obj2)\r\nif (tmp1 == NULL)\r\n{\r\n    Py_XDECREF(tmp);\r\n}\r\n```\r\nwhich assumes `Py_None` can safely be used (refcount > 1)",
        "createdAt" : "2019-05-11T18:56:16Z",
        "updatedAt" : "2019-05-14T04:56:00Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "1be0e6862196ce92f4b8a2257bad2e890c398cc1",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +306,310 @@                    Py_XDECREF(sum_of_products);\n                    return;\n                }\n\n                if (n == 0) {"
  },
  {
    "id" : "de3e2212-1b34-4807-a442-4e95c024468e",
    "prId" : 13503,
    "prUrl" : "https://github.com/numpy/numpy/pull/13503#pullrequestreview-236450691",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb5a6664-321c-40b8-b210-d25757090f5c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I know it \"should never happen\", but you ought to check that this is not `NULL` too.",
        "createdAt" : "2019-05-13T01:37:37Z",
        "updatedAt" : "2019-05-14T04:56:00Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1be0e6862196ce92f4b8a2257bad2e890c398cc1",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +287,291 @@        for (npy_intp p = 0; p < dp; p++) {\n            if ( 0 == dn ) {\n                sum_of_products = PyLong_FromLong(0);\n                if (sum_of_products == NULL) {\n                    return;"
  },
  {
    "id" : "74e5b056-c0ad-455f-ab90-a280dc8a4d8c",
    "prId" : 14464,
    "prUrl" : "https://github.com/numpy/numpy/pull/14464#pullrequestreview-287132705",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a35b8bce-2691-4021-8375-9b949fa98ad2",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "in [`BOOL_dot`](https://github.com/numpy/numpy/blob/v1.17.2/numpy/core/src/multiarray/arraytypes.c.src#L3527) there is a break here since we do not need to traverse more of the inner (`dn`) loop once `op` is set to `NPY_TRUE`. However this would require a different style of inner-loop pointer incrementing. Is it worth the effort?",
        "createdAt" : "2019-09-09T14:14:26Z",
        "updatedAt" : "2019-09-10T05:07:08Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "7c98555f-cf27-4836-9293-6548a70e190f",
        "parentId" : "a35b8bce-2691-4021-8375-9b949fa98ad2",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Not sure, my guess is that it could might a difference, but boolean matmul is probably super rare. So I do not think it is high priority, and we could wait for someone to complain about the difference in speed. But can't you do:\r\n```\r\n                ip2 += is2_n * (dn - n);\r\n\t        ip1 += is1_n * (dn - n);\r\n                break;\r\n```\r\nWhich seems OK?\r\n\r\nAbout the tests: My personal opinion is that the regression tests are never the best place to put things. Just the lazy place for bug fixes, and even that is more of a historic thing and we do not use it much anymore.",
        "createdAt" : "2019-09-09T15:57:56Z",
        "updatedAt" : "2019-09-10T05:07:08Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "d0dc7830-16ed-4c42-bac6-a5e1a2734119",
        "parentId" : "a35b8bce-2691-4021-8375-9b949fa98ad2",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "added temporary pointer variables to allow early break out of inner loop.",
        "createdAt" : "2019-09-09T19:57:23Z",
        "updatedAt" : "2019-09-10T05:07:08Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "6c00608f-1428-4b5e-805c-99df48cb06af",
        "parentId" : "a35b8bce-2691-4021-8375-9b949fa98ad2",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK, looks good to me. I think it is ready to merge, could try to nitpick, but not worth it ;). To be honest, I think the temp version is maybe clearer anyway.",
        "createdAt" : "2019-09-11T23:53:41Z",
        "updatedAt" : "2019-09-11T23:53:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ff2f96b711c380eb39eaff2d3ac776f4d55c324",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +288,292 @@                npy_bool val2 = (*(npy_bool *)ip2tmp);\n                if (val1 != 0 && val2 != 0) {\n                    *(npy_bool *)op = NPY_TRUE;\n                    break;\n                }"
  }
]