[
  {
    "id" : "f1ec2599-1c03-4ce8-92bd-e32522f88519",
    "prId" : 16247,
    "prUrl" : "https://github.com/numpy/numpy/pull/16247#pullrequestreview-492924095",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffe17665-dc40-4404-bdf5-858453e31847",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Remind me what the macro `NPY_CPUT_DISPATCH_CURFX` does ? The only reference in the docs is [here] (https://numpy.org/devdocs/reference/simd/simd-optimizations.html?highlight=npy_cpu_dispatch_curfx). I thought we do all the necessary dispatching in `numpy/core/code_generators/generate_umath.py`, here we should only create the baseline and dispatch versions of the loops.",
        "createdAt" : "2020-09-21T18:38:26Z",
        "updatedAt" : "2020-11-03T13:20:28Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "bd40944b-7234-45d1-ae7d-e3c552218f12",
        "parentId" : "ffe17665-dc40-4404-bdf5-858453e31847",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "The dispatching mechanism is divided into three steps:\r\n 1. forward declarations for the dispatched functions, that can be done via `NPY_CPU_DISPATCH_DECLARE`\r\n 2. defining the dispatched functions, that require a dispatch-able source and `NPY_CPU_DISPATCH_CURFX`\r\n 3. runtime dispatching call, according to the highest available feature, that can be done via `NPY_CPU_DISPATCH_CALL`\r\n   or `NPY_CPU_DISPATCH_CALL_XB`\r\n\r\nall the above-mentiond macros are defined and explained in [npy_cpu_dispatch.h](https://github.com/numpy/numpy/blob/master/numpy/core/src/common/npy_cpu_dispatch.h).\r\n\r\n> Remind me what the macro NPY_CPU_DISPATCH_CURFX does ?\r\n\r\n**CURFX** stands for \"Current suffix\", and this macro is used to appends the current suffix of the target\r\nfeature to a ceratin token, since dispatch-able sources are compiled multiple times according to\r\nthe required targets which lead to duplicate the exported symbols if there's no such macro\r\nlike `NPY_CPU_DISPATCH_CURFX`.\r\n\r\n> we do all the necessary dispatching in numpy/core/code_generators/generate_umath.py, here we should only create the baseline and dispatch versions of the loops.\r\n\r\n`numpy/core/code_generators/generate_umath.py` only contains the third step (runtime dispatching call), which happens during the initializing of umath module.\r\n\r\n\r\n\r\n",
        "createdAt" : "2020-09-21T19:40:30Z",
        "updatedAt" : "2020-11-03T13:20:28Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c811166c4ff425ffe9f6452484388897fceada03",
    "line" : 169,
    "diffHunk" : "@@ -1,1 +167,171 @@ * #intr  = sqrt, abs,      square, recip#\n * #clear = 0,    1,        0,      0#\n */\nNPY_NO_EXPORT void NPY_CPU_DISPATCH_CURFX(@TYPE@_@kind@)\n(char **args, npy_intp const *dimensions, npy_intp const *steps, void *NPY_UNUSED(func))"
  },
  {
    "id" : "8c94c5af-dd72-4767-889a-389a2122fc14",
    "prId" : 16247,
    "prUrl" : "https://github.com/numpy/numpy/pull/16247#pullrequestreview-521168964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea9ded2d-2c12-4dfc-a209-c4324d4e8947",
        "parentId" : null,
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "@r-devulap, I only enabled `SSE` and dropped `AVX2` and `AVX512F` since there's no performance gain for contiguous arrays,\r\nalso, the emulated version of partial and non-contiguous memory load/store intrinsics show better performance\r\ncomparing with the gather/scatter(AVX512F) intrinsics, especially when I unroll by x2/x4.",
        "createdAt" : "2020-10-31T20:50:58Z",
        "updatedAt" : "2020-11-03T13:20:28Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c811166c4ff425ffe9f6452484388897fceada03",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +9,13 @@ * such small operations that this file covers.\n*/\n#define NPY_SIMD_FORCE_128\n#include \"numpy/npy_math.h\"\n#include \"simd/simd.h\""
  }
]