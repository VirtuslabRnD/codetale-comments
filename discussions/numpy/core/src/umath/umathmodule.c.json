[
  {
    "id" : "411ae113-0a1d-471d-bb19-81b53e674eb8",
    "prId" : 359,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "233484cd-d0b3-457f-ac5c-cc862f14d3ef",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Success of memory allocation needs checking.\n",
        "createdAt" : "2013-04-01T18:14:49Z",
        "updatedAt" : "2013-05-10T16:48:13Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ca16c821-61f3-4892-ae38-d28ebad5a5bc",
        "parentId" : "233484cd-d0b3-457f-ac5c-cc862f14d3ef",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Still needed.\n",
        "createdAt" : "2013-05-03T23:28:42Z",
        "updatedAt" : "2013-05-10T16:48:13Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "1feb5336-554f-400d-ba31-cd46a46d9477",
        "parentId" : "233484cd-d0b3-457f-ac5c-cc862f14d3ef",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Notice that there is no matching `PyArray_free` as for the previous allocation of this type. Is that OK?\n",
        "createdAt" : "2013-05-03T23:30:52Z",
        "updatedAt" : "2013-05-10T16:48:13Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ed8effdc-9d69-4e24-b53c-559857202dc1",
        "parentId" : "233484cd-d0b3-457f-ac5c-cc862f14d3ef",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Does the allocated memory need to be freed?\n",
        "createdAt" : "2013-05-09T16:19:05Z",
        "updatedAt" : "2013-05-10T16:48:13Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "03a1f555-32ad-4567-b07d-c7f7a8e1ebd3",
        "parentId" : "233484cd-d0b3-457f-ac5c-cc862f14d3ef",
        "authorId" : "b0e7e584-a9be-4737-9003-4922807a34eb",
        "body" : "Missed these comments too somehow. op_flags get freed in ufunc_dealloc(). Adding null check now.\n",
        "createdAt" : "2013-05-09T16:58:14Z",
        "updatedAt" : "2013-05-10T16:48:13Z",
        "lastEditedBy" : "b0e7e584-a9be-4737-9003-4922807a34eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec23d01d9c333f95db5d9349354766b38d37cae7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +124,128 @@    self->core_offsets = NULL;\n    self->core_signature = NULL;\n    self->op_flags = PyArray_malloc(sizeof(npy_uint32)*self->nargs);\n    if (self->op_flags == NULL) {\n        return PyErr_NoMemory();"
  },
  {
    "id" : "17c99ba8-ad71-4e49-b287-cd1de9d0020a",
    "prId" : 4839,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55332fa1-d0b9-48fd-b017-59331f0f2836",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "static data is zero initialized\n",
        "createdAt" : "2014-07-05T13:23:35Z",
        "updatedAt" : "2014-07-05T13:23:35Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b8c9fd2f6d0df786b31d8e235ccc6c087e9a98c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +225,229 @@#endif\n};\nstatic void * blank_data[12];\n\n#if NPY_SIZEOF_LONG == NPY_SIZEOF_INT"
  },
  {
    "id" : "9a6f2a36-d755-4f52-b6e4-4f7cdf28a190",
    "prId" : 4839,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74676c47-37e2-409d-8674-994056bb0f36",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "Wouldn't it be simpler to just call `malloc` here?\n",
        "createdAt" : "2014-07-05T14:19:40Z",
        "updatedAt" : "2014-07-05T14:19:40Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "41e715d9-025a-4052-b866-f5707a75f3c7",
        "parentId" : "74676c47-37e2-409d-8674-994056bb0f36",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "would work too, I guess it would be even better to fix the function to accept NULL data like its documentation says it does. If you pass NULL here it crashes :/\n",
        "createdAt" : "2014-07-05T14:24:37Z",
        "updatedAt" : "2014-07-05T14:24:37Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b8c9fd2f6d0df786b31d8e235ccc6c087e9a98c",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +357,361 @@    num = sizeof(frexp_functions) / sizeof(frexp_functions[0]);\n    assert(sizeof(blank_data) / sizeof(blank_data[0]) >= num);\n    f = PyUFunc_FromFuncAndData(frexp_functions, blank_data,\n                                frexp_signatures, num,\n                                1, 2, PyUFunc_None, \"frexp\", frdoc, 0);"
  },
  {
    "id" : "44a5c3f4-34c3-4837-acf7-31ef855fea99",
    "prId" : 5673,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de9c1f7b-b09b-414f-b35f-339c41139bf1",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "See above.\n",
        "createdAt" : "2015-03-12T18:59:59Z",
        "updatedAt" : "2015-03-13T04:26:49Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4db04b6d75eafd99e692027c1391eebf88454e9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +105,109 @@    }\n    if (nin + nout > NPY_MAXARGS) {\n        PyErr_Format(PyExc_ValueError,\n                     \"Cannot construct a ufunc with more than %d operands \"\n                     \"(requested number were: inputs = %d and outputs = %d)\","
  },
  {
    "id" : "b64434d2-6efe-4d7d-b4b7-a1d3f8241130",
    "prId" : 8255,
    "prUrl" : "https://github.com/numpy/numpy/pull/8255#pullrequestreview-326824484",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "002e2a31-1c78-480c-8abe-6bd67cf8fcb1",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "A future PR could add `signature`, which would help `vectorize`",
        "createdAt" : "2019-12-04T12:54:51Z",
        "updatedAt" : "2019-12-06T10:59:14Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e43d9d6638401b3dd8bc40a63b08602271c772c",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +152,156 @@            (PyUFuncGenericFunction *)pyfunc_functions, data,\n            types, /* ntypes */ 1, nin, nout, identity ? PyUFunc_IdentityValue : PyUFunc_None,\n            str, doc, /* unused */ 0, NULL, identity);\n\n    if (self == NULL) {"
  },
  {
    "id" : "15c4108c-6704-4fe3-9d79-ef5ee5faab60",
    "prId" : 10915,
    "prUrl" : "https://github.com/numpy/numpy/pull/10915#pullrequestreview-142231458",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd91ae30-df31-4051-a06e-a598ec585f62",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "Is there a specific reason we no longer want to raise a `RuntimeError` here?",
        "createdAt" : "2018-07-31T23:39:35Z",
        "updatedAt" : "2018-08-21T17:07:18Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "bdc42f82-dc5b-46e0-a8c4-55bb010046f7",
        "parentId" : "cd91ae30-df31-4051-a06e-a598ec585f62",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "Similar blocks in `multiarraymodule.c` also seem to flip-flop between a straight return of `-1` and dispatching to an `err` block with `goto`.",
        "createdAt" : "2018-07-31T23:41:06Z",
        "updatedAt" : "2018-08-21T17:07:18Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "1209d6fa-e216-4f6a-bffe-b5538687cd1f",
        "parentId" : "cd91ae30-df31-4051-a06e-a598ec585f62",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Returning -1 will trigger a python-level exception. the `goto error` will set a generic exception, but we can sometimes do better by passing on the exception set by other c-api functions and simply returning -1 immediately.",
        "createdAt" : "2018-08-01T05:26:45Z",
        "updatedAt" : "2018-08-21T17:07:18Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "03e08148eb303c7799a18db78b8087f78e5cc2fc",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +270,274 @@    /* Initialize the types */\n    if (PyType_Ready(&PyUFunc_Type) < 0)\n        return -1;\n\n    /* Add some symbolic constants to the module */"
  },
  {
    "id" : "a4e119d2-9a2d-469d-bb25-a64f9a91e80b",
    "prId" : 11026,
    "prUrl" : "https://github.com/numpy/numpy/pull/11026#pullrequestreview-121285523",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c307eed0-951d-4b7e-93db-02c4f7fa0c9a",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This reuse of the variable `i` is pretty gross, as are the extra parens - but out of scope for this change I suppose.",
        "createdAt" : "2018-05-18T03:14:57Z",
        "updatedAt" : "2018-05-18T04:20:58Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "9e5e909e-69f2-4172-9818-9367c3d58ea8",
        "parentId" : "c307eed0-951d-4b7e-93db-02c4f7fa0c9a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Would probably go for\r\n```\r\nnpy_intp _align_to(npy_intp size, npy_intp alignment) {\r\n    return (size + alignment - 1) / alignment * alignment;\r\n}\r\n```\r\n\r\nthen\r\n\r\n```C\r\nnpy_intp size = 0;\r\nsize = _align_to(size + sizeof(PyUFunc_PyFuncData), sizeof(void *));\r\nsize = _align_to(size + nargs, sizeof(void *));\r\nPyArray_malloc(size);\r\n```\r\n\r\nwhich also generalizes better to objects with different alignment requirements.",
        "createdAt" : "2018-05-18T03:22:48Z",
        "updatedAt" : "2018-05-18T04:20:58Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0e5f657d-014f-4baa-9cb4-444bc5de6323",
        "parentId" : "c307eed0-951d-4b7e-93db-02c4f7fa0c9a",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "~adopted~\r\n\r\nEdit: changed to not adopted",
        "createdAt" : "2018-05-18T03:56:28Z",
        "updatedAt" : "2018-05-18T04:20:58Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "56e1ae86-a5eb-47c3-b15d-d41dd8fd7244",
        "parentId" : "c307eed0-951d-4b7e-93db-02c4f7fa0c9a",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "We need the offsets for each piece of the allocated data, not just the overall size. Let's leave this for a future cleanup.",
        "createdAt" : "2018-05-18T04:16:01Z",
        "updatedAt" : "2018-05-18T04:20:58Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ec36c24924fe3b55a13c266b18715a9c373134e",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +134,138 @@    if (i) {\n        offset[1] += (sizeof(void *)-i);\n    }\n    ptr = PyArray_malloc(offset[0] + offset[1] + sizeof(void *) +\n                            (fname_len + 14));"
  },
  {
    "id" : "c8852cd3-747e-4415-bd44-26655c1eebe6",
    "prId" : 17014,
    "prUrl" : "https://github.com/numpy/numpy/pull/17014#pullrequestreview-462110042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ba1b7b7-76e9-46bf-bf3c-e88098ed1bef",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n        Py_DECREF(tmp);\r\n        return PyErr_NoMemory();\r\n```\r\nnot that it really matters.",
        "createdAt" : "2020-08-06T00:29:43Z",
        "updatedAt" : "2020-08-06T14:10:50Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf5ee83ec4001eb50af27f3b8bc4eef5d8698bd7",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +200,204 @@    if (!newdocstr) {\n        Py_DECREF(tmp);\n        return PyErr_NoMemory();\n    }\n    strcpy(newdocstr, docstr);"
  }
]