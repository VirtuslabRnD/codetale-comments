[
  {
    "id" : "4b20ef04-09bb-44c2-a194-1231bbbeac3f",
    "prId" : 89,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f84c894-a9e8-4d22-8ea9-6f23a748f593",
        "parentId" : null,
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "Is there a reason INTP needs its own methods? I thought it was just an alias for the appropriate int type.\n\nnm, I think I answered my own question - it's for the argsort methods. Might be worth a comment though.\n",
        "createdAt" : "2011-06-20T17:33:29Z",
        "updatedAt" : "2011-06-20T17:34:39Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4d790f005331e5ff59d54b9954ab56ec847bafc",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +35,39 @@#define CDOUBLE_SWAP(a,b) {npy_cdouble tmp = (b); (b)=(a); (a) = tmp;}\n#define CLONGDOUBLE_SWAP(a,b) {npy_clongdouble tmp = (b); (b)=(a); (a) = tmp;}\n#define INTP_SWAP(a,b) {npy_intp tmp = (b); (b)=(a); (a) = tmp;}\n\n/*"
  },
  {
    "id" : "615afbc9-9863-460c-80eb-bee0919bae09",
    "prId" : 12658,
    "prUrl" : "https://github.com/numpy/numpy/pull/12658#pullrequestreview-191693809",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a0ff53f-f8dc-42c8-b563-874ceaa25459",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Also, while I like the clarity of your version, the whole lot could just be\r\n```\r\nreturn a < b ? a != NPY_DATETIME_NAT : b == NPY_DATETIME_NAT\r\n```\r\nThis ensures that the most common comparison gets done, and the comparison with `NaT` only for the argument where it matters.\r\n\r\nActually, I guess we do not care how `NaT < NaT` evaluates (or perhaps it should be false since it does not include equal). Hence, this could just be\r\n```\r\nreturn a < b && a != NPY_DATETIME_NAT\r\n```\r\n",
        "createdAt" : "2019-01-05T01:23:38Z",
        "updatedAt" : "2019-11-22T19:33:04Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "e7bb76fb-8a05-447b-9c65-d23f7e6d14ad",
        "parentId" : "7a0ff53f-f8dc-42c8-b563-874ceaa25459",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Hmm, the last version would make `argsort` unstable for NaT, though. Doesn't sound awfully bad, maybe depends on how much worth the gain is.\r\nEDIT: I am not actually quite sure it makes things unstable, but looks a bit like it might",
        "createdAt" : "2019-01-05T10:59:51Z",
        "updatedAt" : "2019-11-22T19:33:04Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "5773af7b-b762-4a61-8d62-a7b62edfdab3",
        "parentId" : "7a0ff53f-f8dc-42c8-b563-874ceaa25459",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "It is `LT`, so I guess to keep sort order equal should evaluate to false; possibly in sorting, it gets called as `LT(next, prev)`?",
        "createdAt" : "2019-01-05T14:57:38Z",
        "updatedAt" : "2019-11-22T19:33:04Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "dea86afa-2d51-428d-ba29-059c71b97506",
        "parentId" : "7a0ff53f-f8dc-42c8-b563-874ceaa25459",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I think I was just imagining things. This looks good, and I think we should use it.\r\n\r\nAbout argmin/argmax, I would tend to not worry too much about it and also change the sort order? As for min/max, change it to return NaT if it exists. We won't find out if anyones code is broken by such changes before trying probably, and now is the perfect time ;).",
        "createdAt" : "2019-01-11T14:51:41Z",
        "updatedAt" : "2019-11-22T19:33:04Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc99245b05163dd4f723c886c04174e98650c11b",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +338,342 @@    }\n\n    return a < b;\n}\n"
  }
]