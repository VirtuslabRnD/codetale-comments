[
  {
    "id" : "63e12b4b-0801-4eb0-bc7e-ceb4cc179a7e",
    "prId" : 8795,
    "prUrl" : "https://github.com/numpy/numpy/pull/8795#pullrequestreview-28712754",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0af792b7-53e2-43f1-8ccd-52f1d7d22927",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I like to use integer values for these, but I expect the compiler can also optimize the cast away just as easily for the double values.",
        "createdAt" : "2017-03-23T16:53:14Z",
        "updatedAt" : "2017-03-23T16:53:14Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf833455c419b5905f898fc16e0bb4bd37e73bb5",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +551,555 @@    }\n    else if (x < 0) {\n        return (@type@) 0.0;\n    }\n    else {"
  },
  {
    "id" : "c847d45b-91ef-424a-9ab9-e8f8620e3238",
    "prId" : 12846,
    "prUrl" : "https://github.com/numpy/numpy/pull/12846#pullrequestreview-202892544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "743cdc1c-b4b8-4f6f-9b10-8004fe748e6c",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I guess this effectively does not matter (since the result will always be NaN if b is 0). Would be nice to add a test for this path anyway (I assume it is missing right now).\r\nI suppose this might be marginally slower, but I guess it should be very little and it is nicer to read/uniform.",
        "createdAt" : "2019-02-12T18:14:42Z",
        "updatedAt" : "2019-02-18T16:28:06Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "27cb2c3e-074a-4a58-a172-6058424633f8",
        "parentId" : "743cdc1c-b4b8-4f6f-9b10-8004fe748e6c",
        "authorId" : "04124eda-e1f9-4bbb-84f7-525cfe0626db",
        "body" : "Can you elaborate on what path you are referring to? The `b == 0` case is handled at the top of the function.",
        "createdAt" : "2019-02-12T19:52:02Z",
        "updatedAt" : "2019-02-18T16:28:06Z",
        "lastEditedBy" : "04124eda-e1f9-4bbb-84f7-525cfe0626db",
        "tags" : [
        ]
      },
      {
        "id" : "7ad370b3-fdc2-4b31-a383-1a94293295a0",
        "parentId" : "743cdc1c-b4b8-4f6f-9b10-8004fe748e6c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Sorry, was just a silly comment. `b != 0` is guaranteed here I think, so the old comparison was OK.",
        "createdAt" : "2019-02-12T19:57:42Z",
        "updatedAt" : "2019-02-18T16:28:06Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "a12eda57-53d1-4dce-8511-adf67790802f",
        "parentId" : "743cdc1c-b4b8-4f6f-9b10-8004fe748e6c",
        "authorId" : "04124eda-e1f9-4bbb-84f7-525cfe0626db",
        "body" : "Oh I see what you mean. Yeah, I think you're right. Do you think it's ok to keep this for consistency with the cpython version here https://github.com/python/cpython/blob/6d43f6f081023b680d9db4542d19b9e382149f0a/Objects/floatobject.c#L648 or should I revert it?",
        "createdAt" : "2019-02-12T20:28:53Z",
        "updatedAt" : "2019-02-18T16:28:06Z",
        "lastEditedBy" : "04124eda-e1f9-4bbb-84f7-525cfe0626db",
        "tags" : [
        ]
      },
      {
        "id" : "e853bd03-ba7b-487f-ab58-e0b8c4a89d42",
        "parentId" : "743cdc1c-b4b8-4f6f-9b10-8004fe748e6c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yes, I think it is OK. If it was much slower that would be an argument, but I cannot imagine it. I just stumbled on it, because I tried to make a test related to this change.",
        "createdAt" : "2019-02-12T20:32:26Z",
        "updatedAt" : "2019-02-18T16:28:06Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "56bf38b018160471dfe88cb6f2a6dc0a5e93c087",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +655,659 @@    else {\n        /* if mod is zero ensure correct sign */\n        mod = npy_copysign@c@(0, b);\n    }\n"
  },
  {
    "id" : "779f0112-f3df-4b67-995d-d9f052d2eca3",
    "prId" : 13739,
    "prUrl" : "https://github.com/numpy/numpy/pull/13739#pullrequestreview-257223271",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "083e9faf-7a10-4af3-beb3-7f908f104483",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Do we want to deal with the possibility that `b` is negative?",
        "createdAt" : "2019-06-28T16:55:29Z",
        "updatedAt" : "2019-09-13T07:58:06Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "43a9b71a-4249-41c0-b933-9494b2edcbc0",
        "parentId" : "083e9faf-7a10-4af3-beb3-7f908f104483",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Not that currently the shift value is cast to unsigned and masked, at least on my hardware.\r\n```\r\nIn [1]: a = array([1,2,3,4])                                                    \r\n\r\nIn [2]: a << -1                                                                 \r\nOut[2]: \r\narray([-9223372036854775808,                    0, -9223372036854775808,\r\n                          0])\r\n```",
        "createdAt" : "2019-06-28T17:00:03Z",
        "updatedAt" : "2019-09-13T07:58:06Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "63348b70-269c-41b7-9963-f4115f8d355b",
        "parentId" : "083e9faf-7a10-4af3-beb3-7f908f104483",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I think there was a comment in the old/new code about that as well. Maybe we can push it off to another PR? That seems the easiest way forward? We can ignore the codecov failures.",
        "createdAt" : "2019-07-02T22:43:47Z",
        "updatedAt" : "2019-09-13T07:58:06Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "01123844-d777-4bfa-9d57-03cadb0d78a3",
        "parentId" : "083e9faf-7a10-4af3-beb3-7f908f104483",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "xref gh-13898",
        "createdAt" : "2019-07-03T01:33:20Z",
        "updatedAt" : "2019-09-13T07:58:06Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cf6ece43589670a28b765fd03402cc08ada61f0",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +744,748 @@npy_rshift@u@@c@(npy_@u@@type@ a, npy_@u@@type@ b)\n{\n    if (NPY_LIKELY((size_t)b < sizeof(a) * CHAR_BIT)) {\n        return a >> b;\n    }"
  },
  {
    "id" : "0fcf6f2b-b4ec-47b6-97d2-d1eb434ac914",
    "prId" : 13739,
    "prUrl" : "https://github.com/numpy/numpy/pull/13739#pullrequestreview-288305209",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "314214a5-7d91-4b5c-8646-094d4ce51bb5",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Based on our learnings in #14121, it sounds like these need to end up in the header too.",
        "createdAt" : "2019-07-28T23:56:01Z",
        "updatedAt" : "2019-09-13T07:58:06Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c4ecaae6-b45d-40b0-b061-02e672dd778e",
        "parentId" : "314214a5-7d91-4b5c-8646-094d4ce51bb5",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "this is the last piece so the PR can be merged. ",
        "createdAt" : "2019-09-12T23:28:50Z",
        "updatedAt" : "2019-09-13T07:58:06Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "8f55ea1c-4e2d-4e51-be4b-b4b9dffb67b0",
        "parentId" : "314214a5-7d91-4b5c-8646-094d4ce51bb5",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Done",
        "createdAt" : "2019-09-14T03:28:11Z",
        "updatedAt" : "2019-09-14T03:28:12Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cf6ece43589670a28b765fd03402cc08ada61f0",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +732,736 @@ */\nNPY_INPLACE npy_@u@@type@\nnpy_lshift@u@@c@(npy_@u@@type@ a, npy_@u@@type@ b)\n{\n    if (NPY_LIKELY((size_t)b < sizeof(a) * CHAR_BIT)) {"
  },
  {
    "id" : "1d121cc3-6742-4f9f-9560-b923c68fe2fe",
    "prId" : 16161,
    "prUrl" : "https://github.com/numpy/numpy/pull/16161#pullrequestreview-425544043",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6778788d-47e4-4c9c-8623-81a9cfd43aa1",
        "parentId" : null,
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "The current failures in CI are because of this line. The CI in windows seems to be using GCC-8. I tried with GCC-8 and GCC-9 and on both, this line sets the invalid flag and raises error on python side. on GCC-5.4 (which was my default) it didnt set a flag and just set the result to nan. Looking for advice here, should we try to workaround the compiler behavior for GCC-8 and GCC-9, to stick to existing numpy behavior which we have for earlier compiler versions ? CON: Makes code slightly more convoluted. PRO: Will provide uniform behavior across different numpy builds.\r\n( We already went down this path since we are trying to make it consistent on clang with the npy_set_floatstatus_divbyzero changes)\r\n\r\nEDIT: This happens when a is nan, b is one or vice versa.",
        "createdAt" : "2020-05-28T23:29:23Z",
        "updatedAt" : "2020-06-05T18:46:32Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "54f88071-a3af-475d-8508-47f4e54ed3f2",
        "parentId" : "6778788d-47e4-4c9c-8623-81a9cfd43aa1",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "i have added nan checks, so that this provides uniform builds, atleast for the CI.",
        "createdAt" : "2020-06-05T18:48:19Z",
        "updatedAt" : "2020-06-05T18:48:19Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      }
    ],
    "commit" : "f527a570b7ec9b7c26e3a79601ca19cc989de244",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +720,724 @@        npy_set_floatstatus_invalid();\n    }\n    mod = npy_fmod@c@(a, b);\n    if (NPY_UNLIKELY(!b)) {\n        div = a / b;"
  }
]