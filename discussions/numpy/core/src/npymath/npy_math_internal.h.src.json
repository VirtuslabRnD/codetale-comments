[
  {
    "id" : "63e12b4b-0801-4eb0-bc7e-ceb4cc179a7e",
    "prId" : 8795,
    "prUrl" : "https://github.com/numpy/numpy/pull/8795#pullrequestreview-28712754",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0af792b7-53e2-43f1-8ccd-52f1d7d22927",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I like to use integer values for these, but I expect the compiler can also optimize the cast away just as easily for the double values.",
        "createdAt" : "2017-03-23T16:53:14Z",
        "updatedAt" : "2017-03-23T16:53:14Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf833455c419b5905f898fc16e0bb4bd37e73bb5",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +551,555 @@    }\n    else if (x < 0) {\n        return (@type@) 0.0;\n    }\n    else {"
  },
  {
    "id" : "c847d45b-91ef-424a-9ab9-e8f8620e3238",
    "prId" : 12846,
    "prUrl" : "https://github.com/numpy/numpy/pull/12846#pullrequestreview-202892544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "743cdc1c-b4b8-4f6f-9b10-8004fe748e6c",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I guess this effectively does not matter (since the result will always be NaN if b is 0). Would be nice to add a test for this path anyway (I assume it is missing right now).\r\nI suppose this might be marginally slower, but I guess it should be very little and it is nicer to read/uniform.",
        "createdAt" : "2019-02-12T18:14:42Z",
        "updatedAt" : "2019-02-18T16:28:06Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "27cb2c3e-074a-4a58-a172-6058424633f8",
        "parentId" : "743cdc1c-b4b8-4f6f-9b10-8004fe748e6c",
        "authorId" : "04124eda-e1f9-4bbb-84f7-525cfe0626db",
        "body" : "Can you elaborate on what path you are referring to? The `b == 0` case is handled at the top of the function.",
        "createdAt" : "2019-02-12T19:52:02Z",
        "updatedAt" : "2019-02-18T16:28:06Z",
        "lastEditedBy" : "04124eda-e1f9-4bbb-84f7-525cfe0626db",
        "tags" : [
        ]
      },
      {
        "id" : "7ad370b3-fdc2-4b31-a383-1a94293295a0",
        "parentId" : "743cdc1c-b4b8-4f6f-9b10-8004fe748e6c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Sorry, was just a silly comment. `b != 0` is guaranteed here I think, so the old comparison was OK.",
        "createdAt" : "2019-02-12T19:57:42Z",
        "updatedAt" : "2019-02-18T16:28:06Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "a12eda57-53d1-4dce-8511-adf67790802f",
        "parentId" : "743cdc1c-b4b8-4f6f-9b10-8004fe748e6c",
        "authorId" : "04124eda-e1f9-4bbb-84f7-525cfe0626db",
        "body" : "Oh I see what you mean. Yeah, I think you're right. Do you think it's ok to keep this for consistency with the cpython version here https://github.com/python/cpython/blob/6d43f6f081023b680d9db4542d19b9e382149f0a/Objects/floatobject.c#L648 or should I revert it?",
        "createdAt" : "2019-02-12T20:28:53Z",
        "updatedAt" : "2019-02-18T16:28:06Z",
        "lastEditedBy" : "04124eda-e1f9-4bbb-84f7-525cfe0626db",
        "tags" : [
        ]
      },
      {
        "id" : "e853bd03-ba7b-487f-ab58-e0b8c4a89d42",
        "parentId" : "743cdc1c-b4b8-4f6f-9b10-8004fe748e6c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yes, I think it is OK. If it was much slower that would be an argument, but I cannot imagine it. I just stumbled on it, because I tried to make a test related to this change.",
        "createdAt" : "2019-02-12T20:32:26Z",
        "updatedAt" : "2019-02-18T16:28:06Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "56bf38b018160471dfe88cb6f2a6dc0a5e93c087",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +655,659 @@    else {\n        /* if mod is zero ensure correct sign */\n        mod = npy_copysign@c@(0, b);\n    }\n"
  }
]