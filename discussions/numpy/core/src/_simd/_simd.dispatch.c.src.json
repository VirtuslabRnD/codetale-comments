[
  {
    "id" : "77f15b3c-68ed-4270-85ab-4f0aafaab67a",
    "prId" : 16782,
    "prUrl" : "https://github.com/numpy/numpy/pull/16782#pullrequestreview-506165901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb041f2d-0913-4430-8ebf-4883966bc115",
        "parentId" : null,
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "@mattip, this an example of how the C method looks like without C macros",
        "createdAt" : "2020-08-23T12:43:27Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      },
      {
        "id" : "7b17c66f-9398-4360-8e13-f72ee5b46fdd",
        "parentId" : "bb041f2d-0913-4430-8ebf-4883966bc115",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "I tried to avoid use C macros but what I got a large amount of code very complicated to manage, what I'm seeking for is replacing the C macros with python functions via pyas template",
        "createdAt" : "2020-08-23T12:47:53Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      },
      {
        "id" : "f4299827-1bb2-4887-97d0-f062a3e88983",
        "parentId" : "bb041f2d-0913-4430-8ebf-4883966bc115",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> what I'm seeking for is replacing the C macros with python functions via pyas template\r\n\r\nI think if you want to explore this, you should do it in the context of existing templated code, rather than try and introduce it and new SIMD stuff at the same time. It would be very helpful to see a draft PR that rewrites a currently messy bit of `.c.src` code into simpler `c.pyas` code.",
        "createdAt" : "2020-08-23T13:08:24Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f08bd97e-12a1-4556-9467-bc12a1ee9a13",
        "parentId" : "bb041f2d-0913-4430-8ebf-4883966bc115",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "> I think if you want to explore this, you should do it in the context of existing templated code, rather than try and introduce it and new SIMD stuff at the same time.\r\n\r\nI did already that in #16960, I tried `c.src` in the beginning [loops_cmp.dispatch.c.src](https://github.com/numpy/numpy/blob/83104cfde94ecadc3bd1bdadffc438b92abe5c49/numpy/core/src/umath/loops_cmp.dispatch.c.src) then I found my self committing so many silly mistakes and the code itself became hard to read, also the generated code was slowing down the compiler, the same issue already exists with einsum.\r\n\r\n> It would be very helpful to see a draft PR that rewrites a currently messy bit of .c.src code into simpler c.pyas code.\r\n\r\nI agree another draft will clarify our situation. \r\n\r\n",
        "createdAt" : "2020-08-23T13:38:21Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      },
      {
        "id" : "9f4bf71c-f650-4913-9a0c-a3730eb759ba",
        "parentId" : "bb041f2d-0913-4430-8ebf-4883966bc115",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "@eric-wieser, I tend to merge this module with the current C  macros later I will improve by using `pyas` template in a separate due to lake of time and necessity to have this module to test the upcoming intrinsics. ",
        "createdAt" : "2020-09-15T13:25:20Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      },
      {
        "id" : "7200f166-e738-4c86-851a-c51d33c36ecb",
        "parentId" : "bb041f2d-0913-4430-8ebf-4883966bc115",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm going to mark this as resolved, since it's not really relevant to the content of this PR right now. I recommend you paste a link to this conversation in whichever PR your `pyas` templating came up in.",
        "createdAt" : "2020-10-11T10:32:11Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac4ffe1d39d9cc845948079a24facf7057effb24",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +39,43 @@// special definition due to the nature of @intrin@\nstatic PyObject *\nsimd__intrin_@intrin@_@sfx@(PyObject* NPY_UNUSED(self), PyObject *args)\n{\n    simd_arg seq_arg = {.dtype = simd_data_q@sfx@};"
  },
  {
    "id" : "4b23379f-8610-4a4c-9a25-f968214aba73",
    "prId" : 16782,
    "prUrl" : "https://github.com/numpy/numpy/pull/16782#pullrequestreview-473008247",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0af0b99e-7df0-47f3-967b-514174dfd0f0",
        "parentId" : null,
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "@mattip, another one here.",
        "createdAt" : "2020-08-23T12:44:22Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac4ffe1d39d9cc845948079a24facf7057effb24",
    "line" : 254,
    "diffHunk" : "@@ -1,1 +252,256 @@static PyObject *\nsimd__intrin_@intrin@_@sfx@(PyObject* NPY_UNUSED(self), PyObject *args)\n{\n    npyv_lanetype_@sfx@ *data = simd_sequence_from_iterable(args, simd_data_q@sfx@, npyv_nlanes_@sfx@);\n    if (data == NULL) {"
  }
]