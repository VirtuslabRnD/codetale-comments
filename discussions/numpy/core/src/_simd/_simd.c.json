[
  {
    "id" : "76cc59a1-e590-4152-a3e4-c04936915f35",
    "prId" : 16782,
    "prUrl" : "https://github.com/numpy/numpy/pull/16782#pullrequestreview-517966586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35241b6c-1d4d-47f2-99d1-aadccb8696d6",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Tempting to make `targets` just a list, which can be done with:\r\n```suggestion\r\n    PyObject *targets = PyList_New(0);\r\n    if (targets == NULL) {\r\n        goto err;\r\n    }\r\n    if (PyModule_AddObject(m, \"targets\", targets) < 0) {\r\n        Py_DECREF(targets);\r\n        goto err;\r\n    }\r\n    // add keys for non-supported optimizations with None value\r\n    #define ATTACH_MODULE(TESTED_FEATURES, TARGET_NAME, MAKE_MSVC_HAPPY)       \\\r\n        {                                                                      \\\r\n            PyObject *simd_mod;                                                \\\r\n            if (!TESTED_FEATURES) {                                            \\\r\n                Py_INCREF(Py_None);                                            \\\r\n                simd_mod = Py_None;                                            \\\r\n            } else {                                                           \\\r\n                simd_mod = NPY_CAT(simd_create_module_, TARGET_NAME)();        \\\r\n                if (simd_mod == NULL) {                                        \\\r\n                    goto err;                                                  \\\r\n                }                                                              \\\r\n            }                                                                  \\\r\n            if (PyList_Append(targets, simd_mod) < 0) {    \\\r\n```\r\nThen you can just us `targets[i].__name__`, or maybe add your own `targets[i].pretty_name` if `__name__` is too ugly for you.",
        "createdAt" : "2020-10-27T16:43:04Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "4acfa91e-159a-42da-ad6f-c6db0de035d4",
        "parentId" : "35241b6c-1d4d-47f2-99d1-aadccb8696d6",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "I guess there's a miss understanding here, why do we need a dictionary instead of a list?\r\n\r\n1- we need to verify the enabled targets through infrastructure, `--simd-test`\r\n2- we need to verify the CPU support.\r\n\r\nfor example:\r\n```Python3\r\n\r\nfrom numpy.core._simd import targets\r\nfor target_name, npyv in targets.items(): # get all enabled SIMD targets\r\n    if npyv is None:\r\n        # a module is compiled for this target but the running CPU doesn't support it\r\n        print(f\"your CPU doesn't support {target_name}, try Intel SDE or QEMU\")\r\n        continue\r\n    if not npyv.simd: # equivlent to C macro \"NPY_SIMD\"\r\n        # now we got the module and CPU support the target but our NPYV don't\r\n        print(\"why did you compile it via --simd-test?\")\r\n        continue\r\n    a = npyv.load_f32(range(npyv.nlanes_f32))\r\n    print(f\"load a f32 vector for target {target_name}\", a)\r\n\r\n````\r\n",
        "createdAt" : "2020-10-27T17:09:13Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      },
      {
        "id" : "4e85dbe2-b830-4f76-8b94-a4273e7dfd2b",
        "parentId" : "35241b6c-1d4d-47f2-99d1-aadccb8696d6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Sure, but if `targets` were a list you could still do that with:\r\n```python\r\nfrom numpy.core._simd import targets\r\nfor npyv in targets: # get all enabled SIMD targets\r\n    if npyv is None:\r\n        # a module is compiled for this target but the running CPU doesn't support it\r\n        print(f\"your CPU doesn't support {target_name}, try Intel SDE or QEMU\")\r\n        continue\r\n    if not npyv.simd: # equivlent to C macro \"NPY_SIMD\"\r\n        # now we got the module and CPU support the target but our NPYV don't\r\n        print(\"why did you compile it via --simd-test?\")\r\n        continue\r\n    a = npyv.load_f32(range(npyv.nlanes_f32))\r\n    print(f\"load a f32 vector for target {npyv.__name__}\", a)  # or `npyv.pretty_name`, etc\r\n```",
        "createdAt" : "2020-10-27T17:14:53Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f4a1e0cc-0fb5-4a0b-a8b9-f06d65e28216",
        "parentId" : "35241b6c-1d4d-47f2-99d1-aadccb8696d6",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "How can I get the target name for None value? check the first case in the loop",
        "createdAt" : "2020-10-27T17:22:55Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      },
      {
        "id" : "9b2cc7ec-0605-4dc5-a0ea-fe540484a334",
        "parentId" : "35241b6c-1d4d-47f2-99d1-aadccb8696d6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Thank you, that was what I missed - your point is that you want to explicitly loop over the targets that are absent too. In that case, a dict is probably sensible after all.",
        "createdAt" : "2020-10-27T17:26:24Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac4ffe1d39d9cc845948079a24facf7057effb24",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +37,41 @@            }                                                                  \\\n            const char *target_name = NPY_TOSTRING(TARGET_NAME);               \\\n            if (PyDict_SetItemString(targets, target_name, simd_mod) < 0) {    \\\n                Py_DECREF(simd_mod);                                           \\\n                goto err;                                                      \\"
  }
]