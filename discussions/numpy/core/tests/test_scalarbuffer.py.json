[
  {
    "id" : "91b22f8e-8d6b-4c70-8eed-f2a32a36707d",
    "prId" : 10564,
    "prUrl" : "https://github.com/numpy/numpy/pull/10564#pullrequestreview-106393555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fe1a74a-e9c0-43c3-8fa6-9d3b455bacab",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Deliberately not using `expected_size = dt.itemsize`?",
        "createdAt" : "2018-03-20T00:32:12Z",
        "updatedAt" : "2018-03-20T00:32:12Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ddbd9b5a-2eb6-4638-9449-e97ad3964231",
        "parentId" : "3fe1a74a-e9c0-43c3-8fa6-9d3b455bacab",
        "authorId" : "53d74d7d-b09c-4dae-a949-494a20d10d46",
        "body" : "Yes. I'd like to test against an explicit values, rather than trusting that dt.itemsize is correct.\r\nI do use dtype.itemsize of `unicode_` and `float64` when calculating `expected_size` because of platform dependant sizes of `unicode_`. But this is still one step more explicit than testing scalar void.itemsize ==  dtype void.itemsize",
        "createdAt" : "2018-03-20T12:20:41Z",
        "updatedAt" : "2018-03-20T12:20:42Z",
        "lastEditedBy" : "53d74d7d-b09c-4dae-a949-494a20d10d46",
        "tags" : [
        ]
      },
      {
        "id" : "27136cbc-b197-46e6-b98b-6f148d165b38",
        "parentId" : "3fe1a74a-e9c0-43c3-8fa6-9d3b455bacab",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "The assertion memoryview of void itemsize, not scalar void itemsize - arguably all we care about is that the the `itemsize` of a memoryview and dtype match.\r\n\r\nI don't feel too strongly about this though.",
        "createdAt" : "2018-03-20T17:08:29Z",
        "updatedAt" : "2018-03-20T17:08:29Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "9954236c-5a46-4c8d-a730-6bb7acfef78f",
        "parentId" : "3fe1a74a-e9c0-43c3-8fa6-9d3b455bacab",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> because of platform dependant sizes of unicode_\r\n\r\nNote that `unicode` as a dtype is always 4 byte-characters - you're thinking of `unicode_` scalars, which are sometimes 2-byte, due to subclassing the builtin `unicode`.",
        "createdAt" : "2018-03-23T07:04:26Z",
        "updatedAt" : "2018-03-23T07:04:26Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "f81d64173de284db012b8da5012151a5db1fd3e0",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +67,71 @@        mv_x = memoryview(x)\n        expected_size = 16 * np.dtype((np.unicode_, 1)).itemsize\n        expected_size += 2 * np.dtype((np.float64, 1)).itemsize\n        assert_equal(mv_x.itemsize, expected_size)\n        assert_equal(mv_x.ndim, 0)"
  }
]