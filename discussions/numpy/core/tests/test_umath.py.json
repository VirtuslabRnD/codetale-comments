[
  {
    "id" : "76d0d4fb-77d4-40b8-8281-0b9fabcd992a",
    "prId" : 3790,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c245c8ec-5941-45e1-b597-1707fc8c5142",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Are the sizes right way around?\n",
        "createdAt" : "2013-09-23T22:59:26Z",
        "updatedAt" : "2013-09-23T22:59:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "bdc12b9b-bace-45b7-a713-933f24ee03eb",
        "parentId" : "c245c8ec-5941-45e1-b597-1707fc8c5142",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "an sse vector can hold 4 floats and 2 doubles so one needs to test more cases with floats, e.g. 0 1, 2, 3 elements must be peeled vs 0, 1 elements.\nIts a little paranoid as if 1 unaligned work the rest probably does too (especially as they all use the same loop primitives). Might be one of the improvements for _gen_alignment_data later.\n",
        "createdAt" : "2013-09-23T23:02:30Z",
        "updatedAt" : "2013-09-23T23:02:30Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "66f135f1-e70c-4517-bdd0-7857aea67889",
        "parentId" : "c245c8ec-5941-45e1-b597-1707fc8c5142",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "its + 1 because I think gen_alignment_data does not always return the right size, I should fix that too at some point :)\n",
        "createdAt" : "2013-09-23T23:03:07Z",
        "updatedAt" : "2013-09-23T23:03:07Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "79d3a94f41b7e3c661eceed2f26ba6cce362ba4f",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +673,677 @@        # simd tests on max/min, test all alignments, slow but important\n        # for 2 * vz + 2 * (vs - 1) + 1 (unrolled once)\n        for dt, sz in [(np.float32, 15), (np.float64, 7)]:\n            for out, inp, msg in _gen_alignment_data(dtype=dt, type='unary',\n                                                     max_size=sz):"
  },
  {
    "id" : "c5213bc1-7395-4cd8-b930-21eaad369905",
    "prId" : 3790,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a173a40-3c2e-4a93-8df6-e84375af2cd8",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Same question about sizes. What am I missing?\n",
        "createdAt" : "2013-09-23T23:00:15Z",
        "updatedAt" : "2013-09-23T23:00:15Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "79d3a94f41b7e3c661eceed2f26ba6cce362ba4f",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +693,697 @@    def test_abs_blocked(self):\n        # simd tests on abs, test all alignments for vz + 2 * (vs - 1) + 1\n        for dt, sz in [(np.float32, 11), (np.float64, 5)]:\n            for out, inp, msg in _gen_alignment_data(dtype=dt, type='unary',\n                                                     max_size=sz):"
  },
  {
    "id" : "2896720c-9e48-4d6b-8cb9-1f608bf502c3",
    "prId" : 6269,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43edcb73-5e71-4b43-9192-518b9008d67d",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "We typically add a comment back to the relevant issue, e.g. `# gh-6229` in this case.\n",
        "createdAt" : "2015-08-30T04:21:10Z",
        "updatedAt" : "2015-09-28T20:16:20Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "00edb2b6a96b7189be91d16cb84981a60c5961e8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +936,940 @@            assert_equal(out, tgt)\n\n    def test_sign_dtype_object(self):\n        # In reference to github issue #6229\n"
  },
  {
    "id" : "b6a16e24-c45e-4e39-839b-64f00203de3d",
    "prId" : 8658,
    "prUrl" : "https://github.com/numpy/numpy/pull/8658#pullrequestreview-24635567",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5e0aaf6-23b1-4e72-8c0b-9bc6734e59a8",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "is `tiny` guaranteed not to be equal to `nextafter(0, 1)`?",
        "createdAt" : "2017-02-22T01:09:04Z",
        "updatedAt" : "2017-02-22T01:15:14Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0f5233bc-a967-41d1-8a02-1efec7250600",
        "parentId" : "c5e0aaf6-23b1-4e72-8c0b-9bc6734e59a8",
        "authorId" : "7ff2710f-0a12-46fb-a54a-d405dab78cf7",
        "body" : "Yes, for all floats we support, because they all support denormal numbers.  `tiny` is the smallest not-denormal number the type supports.",
        "createdAt" : "2017-02-22T01:14:19Z",
        "updatedAt" : "2017-02-22T01:15:14Z",
        "lastEditedBy" : "7ff2710f-0a12-46fb-a54a-d405dab78cf7",
        "tags" : [
        ]
      },
      {
        "id" : "a7b506f9-9ab8-44b2-a0bc-bc3ab551d67a",
        "parentId" : "c5e0aaf6-23b1-4e72-8c0b-9bc6734e59a8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This test fails on window subsystem for linux",
        "createdAt" : "2017-03-02T01:08:35Z",
        "updatedAt" : "2017-03-02T01:08:41Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "82a1da0f-c750-4613-a450-717768fe2b14",
        "parentId" : "c5e0aaf6-23b1-4e72-8c0b-9bc6734e59a8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Because `1*np.nextafter(t(0), t(direction))` is `0`!",
        "createdAt" : "2017-03-02T01:29:11Z",
        "updatedAt" : "2017-03-02T01:29:11Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ce889864-c0de-4691-ae39-a7ea5ec4e528",
        "parentId" : "c5e0aaf6-23b1-4e72-8c0b-9bc6734e59a8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "#8726",
        "createdAt" : "2017-03-02T01:33:49Z",
        "updatedAt" : "2017-03-02T01:33:49Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "78df10f58d8963829865515f98695f04a1f76e00",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2130,2134 @@    for t, direction in itertools.product(np.sctypes['float'], (1, -1)):\n        tiny = np.finfo(t).tiny\n        assert_(0. < direction * np.nextafter(t(0), t(direction)) < tiny)\n        assert_equal(np.nextafter(t(0), t(direction)) / t(2.1), direction * 0.0)\n"
  }
]