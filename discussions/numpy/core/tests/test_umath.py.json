[
  {
    "id" : "76d0d4fb-77d4-40b8-8281-0b9fabcd992a",
    "prId" : 3790,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c245c8ec-5941-45e1-b597-1707fc8c5142",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Are the sizes right way around?\n",
        "createdAt" : "2013-09-23T22:59:26Z",
        "updatedAt" : "2013-09-23T22:59:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "bdc12b9b-bace-45b7-a713-933f24ee03eb",
        "parentId" : "c245c8ec-5941-45e1-b597-1707fc8c5142",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "an sse vector can hold 4 floats and 2 doubles so one needs to test more cases with floats, e.g. 0 1, 2, 3 elements must be peeled vs 0, 1 elements.\nIts a little paranoid as if 1 unaligned work the rest probably does too (especially as they all use the same loop primitives). Might be one of the improvements for _gen_alignment_data later.\n",
        "createdAt" : "2013-09-23T23:02:30Z",
        "updatedAt" : "2013-09-23T23:02:30Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "66f135f1-e70c-4517-bdd0-7857aea67889",
        "parentId" : "c245c8ec-5941-45e1-b597-1707fc8c5142",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "its + 1 because I think gen_alignment_data does not always return the right size, I should fix that too at some point :)\n",
        "createdAt" : "2013-09-23T23:03:07Z",
        "updatedAt" : "2013-09-23T23:03:07Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "79d3a94f41b7e3c661eceed2f26ba6cce362ba4f",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +673,677 @@        # simd tests on max/min, test all alignments, slow but important\n        # for 2 * vz + 2 * (vs - 1) + 1 (unrolled once)\n        for dt, sz in [(np.float32, 15), (np.float64, 7)]:\n            for out, inp, msg in _gen_alignment_data(dtype=dt, type='unary',\n                                                     max_size=sz):"
  },
  {
    "id" : "c5213bc1-7395-4cd8-b930-21eaad369905",
    "prId" : 3790,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a173a40-3c2e-4a93-8df6-e84375af2cd8",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Same question about sizes. What am I missing?\n",
        "createdAt" : "2013-09-23T23:00:15Z",
        "updatedAt" : "2013-09-23T23:00:15Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "79d3a94f41b7e3c661eceed2f26ba6cce362ba4f",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +693,697 @@    def test_abs_blocked(self):\n        # simd tests on abs, test all alignments for vz + 2 * (vs - 1) + 1\n        for dt, sz in [(np.float32, 11), (np.float64, 5)]:\n            for out, inp, msg in _gen_alignment_data(dtype=dt, type='unary',\n                                                     max_size=sz):"
  },
  {
    "id" : "2896720c-9e48-4d6b-8cb9-1f608bf502c3",
    "prId" : 6269,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43edcb73-5e71-4b43-9192-518b9008d67d",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "We typically add a comment back to the relevant issue, e.g. `# gh-6229` in this case.\n",
        "createdAt" : "2015-08-30T04:21:10Z",
        "updatedAt" : "2015-09-28T20:16:20Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "00edb2b6a96b7189be91d16cb84981a60c5961e8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +936,940 @@            assert_equal(out, tgt)\n\n    def test_sign_dtype_object(self):\n        # In reference to github issue #6229\n"
  },
  {
    "id" : "b6a16e24-c45e-4e39-839b-64f00203de3d",
    "prId" : 8658,
    "prUrl" : "https://github.com/numpy/numpy/pull/8658#pullrequestreview-24635567",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5e0aaf6-23b1-4e72-8c0b-9bc6734e59a8",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "is `tiny` guaranteed not to be equal to `nextafter(0, 1)`?",
        "createdAt" : "2017-02-22T01:09:04Z",
        "updatedAt" : "2017-02-22T01:15:14Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0f5233bc-a967-41d1-8a02-1efec7250600",
        "parentId" : "c5e0aaf6-23b1-4e72-8c0b-9bc6734e59a8",
        "authorId" : "7ff2710f-0a12-46fb-a54a-d405dab78cf7",
        "body" : "Yes, for all floats we support, because they all support denormal numbers.  `tiny` is the smallest not-denormal number the type supports.",
        "createdAt" : "2017-02-22T01:14:19Z",
        "updatedAt" : "2017-02-22T01:15:14Z",
        "lastEditedBy" : "7ff2710f-0a12-46fb-a54a-d405dab78cf7",
        "tags" : [
        ]
      },
      {
        "id" : "a7b506f9-9ab8-44b2-a0bc-bc3ab551d67a",
        "parentId" : "c5e0aaf6-23b1-4e72-8c0b-9bc6734e59a8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This test fails on window subsystem for linux",
        "createdAt" : "2017-03-02T01:08:35Z",
        "updatedAt" : "2017-03-02T01:08:41Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "82a1da0f-c750-4613-a450-717768fe2b14",
        "parentId" : "c5e0aaf6-23b1-4e72-8c0b-9bc6734e59a8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Because `1*np.nextafter(t(0), t(direction))` is `0`!",
        "createdAt" : "2017-03-02T01:29:11Z",
        "updatedAt" : "2017-03-02T01:29:11Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ce889864-c0de-4691-ae39-a7ea5ec4e528",
        "parentId" : "c5e0aaf6-23b1-4e72-8c0b-9bc6734e59a8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "#8726",
        "createdAt" : "2017-03-02T01:33:49Z",
        "updatedAt" : "2017-03-02T01:33:49Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "78df10f58d8963829865515f98695f04a1f76e00",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2130,2134 @@    for t, direction in itertools.product(np.sctypes['float'], (1, -1)):\n        tiny = np.finfo(t).tiny\n        assert_(0. < direction * np.nextafter(t(0), t(direction)) < tiny)\n        assert_equal(np.nextafter(t(0), t(direction)) / t(2.1), direction * 0.0)\n"
  },
  {
    "id" : "d1912798-564c-4e0a-a7e7-f7583bb5f136",
    "prId" : 8955,
    "prUrl" : "https://github.com/numpy/numpy/pull/8955#pullrequestreview-173674246",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a18f7f18-caaa-4641-9f2c-621ea4b686ae",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "@mhvk: Updated with a slightly longer testcase",
        "createdAt" : "2018-11-10T20:26:04Z",
        "updatedAt" : "2018-11-12T17:16:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "e044ae30ad80250ad9add0ff6e56ab972e1ec3d5",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +688,692 @@    def test_reduce(self):\n        assert_equal(np.logaddexp.identity, -np.inf)\n        assert_equal(np.logaddexp.reduce([]), -np.inf)\n\n"
  },
  {
    "id" : "5e4da19b-9787-4f36-a48d-4040ac75d168",
    "prId" : 9063,
    "prUrl" : "https://github.com/numpy/numpy/pull/9063#pullrequestreview-36671546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db8ed0a4-7ff2-4722-9c10-b94a4937eae0",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Darn, I'd missed that this was in two different files, which makes extracting it a little less useful.  I guess this is still a minor improvement though",
        "createdAt" : "2017-05-07T19:29:42Z",
        "updatedAt" : "2017-05-08T00:04:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fbf75e499196c05da46302f035909897c9ec272",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +273,277 @@        return (+1,)\n    else:\n        return (+1, -1)\n\n"
  },
  {
    "id" : "b8bcb707-b248-426a-8c39-e0b85d58b5f1",
    "prId" : 9106,
    "prUrl" : "https://github.com/numpy/numpy/pull/9106#pullrequestreview-37840316",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97d367a3-58d4-441e-ad14-ef1ed1ed079d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Theres some documentation that should be kept in sync with this, isn't there?",
        "createdAt" : "2017-05-12T10:18:01Z",
        "updatedAt" : "2017-05-18T01:13:14Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "bc15ab94-0ffa-44d1-9c69-29a0ef597c51",
        "parentId" : "97d367a3-58d4-441e-ad14-ef1ed1ed079d",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I *think* this PR makes the code consistent with the documentation... Unless you think we should explicitly mention in the reduce, accumulate, reduceat documentation that a tuple of 1 is allowed?",
        "createdAt" : "2017-05-12T13:27:07Z",
        "updatedAt" : "2017-05-18T01:13:14Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "e3fe548f-c0c8-423e-aa54-cf8d9a960699",
        "parentId" : "97d367a3-58d4-441e-ad14-ef1ed1ed079d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I was thinking about the `__array_ufunc__` example in the docs, which I thought was kept synced with one of the tests. Maybe it was not that one.\r\n\r\nYes, I think we should document that a tuple is allowed for `out` in those functions too.",
        "createdAt" : "2017-05-12T13:38:41Z",
        "updatedAt" : "2017-05-18T01:13:14Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca49f0b11bc88056bf4767ac439b298cfda16fed",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +2051,2055 @@                if method == 'at':\n                    if isinstance(inputs[0], A):\n                        inputs[0].info = info\n                    return\n"
  },
  {
    "id" : "d88bc3cf-0c11-4555-8f3a-259677ff76ae",
    "prId" : 13371,
    "prUrl" : "https://github.com/numpy/numpy/pull/13371#pullrequestreview-229311360",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a39d7f31-885a-40fa-8783-8e5c5d3f539e",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I think pytest is OK with normal docstrings, they were a problem for nose. @rgommers Anyone know?",
        "createdAt" : "2019-04-23T00:01:11Z",
        "updatedAt" : "2019-04-23T00:01:11Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a15f323a-c391-4d1c-adeb-590ab7c4b0d1",
        "parentId" : "a39d7f31-885a-40fa-8783-8e5c5d3f539e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I've not seen any problem with them. I know nose produced confusing output with them, but I think pytest is more useful.",
        "createdAt" : "2019-04-23T00:46:25Z",
        "updatedAt" : "2019-04-23T00:46:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "14b30ba6-20e0-4cab-8621-41924746a3ba",
        "parentId" : "a39d7f31-885a-40fa-8783-8e5c5d3f539e",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "IIRC, the nose problems were mostly when using the `yield` testing option, which pytest doesn't support.",
        "createdAt" : "2019-04-23T01:04:25Z",
        "updatedAt" : "2019-04-23T01:04:25Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "55c7ed2c6822b5a5b30db7472c863dc1fa0c338f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +2465,2469 @@\n    def test_object_direct(self):\n        \"\"\" test direct implementation of these magic methods \"\"\"\n        class C:\n            def __floor__(self):"
  },
  {
    "id" : "8a3442fb-7809-44fd-8f03-22ccea63560f",
    "prId" : 13415,
    "prUrl" : "https://github.com/numpy/numpy/pull/13415#pullrequestreview-237540618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dda38739-9cde-462a-9683-4ea17494a131",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "This is prone to failure on my mac locally:\r\n\r\n```\r\n__________________________________________________________________________________ TestSpecialFloats.test_exp_values ___________________________________________________________________________________\r\n[gw0] darwin -- Python 3.6.5 /Users/treddy/miniconda3/envs/numpy_dev_py36/bin/python\r\n\r\nself = <numpy.core.tests.test_umath.TestSpecialFloats object at 0x11ef99ba8>\r\n\r\n    def test_exp_values(self):\r\n        x = [np.nan,  np.nan, np.inf, 0.]\r\n        y = [np.nan, -np.nan, np.inf, -np.inf]\r\n        for dt in ['f', 'd', 'g']:\r\n            xf = np.array(x, dtype=dt)\r\n            yf = np.array(y, dtype=dt)\r\n>           assert_equal(np.exp(yf), xf)\r\nE           RuntimeWarning: invalid value encountered in exp\r\n\r\ndt         = 'f'\r\nself       = <numpy.core.tests.test_umath.TestSpecialFloats object at 0x11ef99ba8>\r\nx          = [nan, nan, inf, 0.0]\r\nxf         = array([nan, nan, inf,  0.], dtype=float32)\r\ny          = [nan, nan, inf, -inf]\r\nyf         = array([ nan,  nan,  inf, -inf], dtype=float32)\r\n\r\nnumpy/core/tests/test_umath.py:659: RuntimeWarning\r\n1 failed, 8142 passed, 63 skipped, 13 xfailed, 3 xpassed in 131.72 seconds\r\n```",
        "createdAt" : "2019-04-30T20:33:17Z",
        "updatedAt" : "2019-04-30T20:33:18Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "da6e213c-3b98-4a32-b7f2-9a92aeffa280",
        "parentId" : "dda38739-9cde-462a-9683-4ea17494a131",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Is your macos setup significantly different to the azure CI one (clang/OS version)?",
        "createdAt" : "2019-04-30T20:37:15Z",
        "updatedAt" : "2019-04-30T20:37:15Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "bceef26d-2276-41d9-906b-95170d322597",
        "parentId" : "dda38739-9cde-462a-9683-4ea17494a131",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "`gcc --version`\r\n```\r\nConfigured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1\r\nApple LLVM version 10.0.1 (clang-1001.0.46.4)\r\nTarget: x86_64-apple-darwin18.5.0\r\nThread model: posix\r\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\r\n```\r\nThat means `Xcode 10.2.1` according to [these tables](https://en.wikipedia.org/wiki/Xcode)\r\n\r\n`sw_vers -productVersion`\r\n`10.14.4`\r\n\r\nBy contrast, Azure is `10.13` series OS and perhaps slightly different Xcode 10 minor version? \r\n\r\nThere is apparently now an option to bump Azure Mac CI to `macOS-10.14`--not sure we want to deal with that right now, but easy experiment I suppose. It may be the Xcode version--there are docs about switching these things on Azure, depending on availability.\r\n",
        "createdAt" : "2019-04-30T20:55:14Z",
        "updatedAt" : "2019-04-30T20:55:14Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "8e0e2cca-d1a6-4b0a-afc1-3dda1ba6274e",
        "parentId" : "dda38739-9cde-462a-9683-4ea17494a131",
        "authorId" : "bcfc9a54-7a4c-4326-b6cb-aee294b5cf32",
        "body" : "do we know a fix for this? I am unable to reproduce this on my ubuntu and gcc/clang. one possible solution is: since that portion of test `test_exp_values `only cares about verifying the output of exp, I can may be ignore floating point errors by updating the test with `np.errstate(all='ignore')`. Would that be acceptable?",
        "createdAt" : "2019-05-07T22:40:05Z",
        "updatedAt" : "2019-05-07T22:40:05Z",
        "lastEditedBy" : "bcfc9a54-7a4c-4326-b6cb-aee294b5cf32",
        "tags" : [
        ]
      },
      {
        "id" : "c7da1e8b-8f9c-492b-849f-0b91af74cc62",
        "parentId" : "dda38739-9cde-462a-9683-4ea17494a131",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "I would suggest the code explicitly mask the warnings after the call to the new functions via `npy_clear_floatstatus_barrier((char*)dimensions)`, see the other uses in `loops.c.src`. @tylerjereddy could you test that on your machine? If it helps, we could put it into a #ifdef WHATEVER_CLANG_WE_NEED block",
        "createdAt" : "2019-05-08T14:49:41Z",
        "updatedAt" : "2019-05-08T14:49:41Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "f0d0469f-d0f9-4081-a1e8-c764ea55b884",
        "parentId" : "dda38739-9cde-462a-9683-4ea17494a131",
        "authorId" : "bcfc9a54-7a4c-4326-b6cb-aee294b5cf32",
        "body" : "But that would lead to these portions of the tests failing though, right?  \r\n```\r\nassert_raises(FloatingPointError, np.exp, np.float32(100.)) #overflow \r\nassert_raises(FloatingPointError, np.exp, np.float32(1E19)) #overflow \r\nassert_raises(FloatingPointError, np.log, np.float32(-np.inf)) #invalid \r\nassert_raises(FloatingPointError, np.log, np.float32(-1.0)) #invalid \r\nassert_raises(FloatingPointError, np.log, np.float32(0.)) #divide by zero \r\n```",
        "createdAt" : "2019-05-08T17:28:57Z",
        "updatedAt" : "2019-05-08T17:28:57Z",
        "lastEditedBy" : "bcfc9a54-7a4c-4326-b6cb-aee294b5cf32",
        "tags" : [
        ]
      },
      {
        "id" : "855dc1b1-d7e2-4476-b2e8-f95a55014acd",
        "parentId" : "dda38739-9cde-462a-9683-4ea17494a131",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "If you provide a `git diff` on the patch you want me to try I can do that; probably even better to try reproducing in Azure MacOS on a fork or something, but in my experience that can take a few hours at least to iterate / get right. \r\n\r\nI tried a quick bump of the Azure MacOS version alone to `10.14`, which is documented to use the same Xcode version I describe, but it didn't reproduce immediately. Probably needs playing around with some flags, clang version, or something else I haven't thought of yet..",
        "createdAt" : "2019-05-14T22:56:25Z",
        "updatedAt" : "2019-05-14T22:56:25Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a916c38d9f36c7800d9c6dcaef51fe84432ddff3",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +657,661 @@            xf = np.array(x, dtype=dt)\n            yf = np.array(y, dtype=dt)\n            assert_equal(np.exp(yf), xf)\n\n        with np.errstate(over='raise'):"
  }
]