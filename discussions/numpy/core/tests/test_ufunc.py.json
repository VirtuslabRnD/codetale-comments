[
  {
    "id" : "f895ced0-9b05-4371-8742-e15a262002a2",
    "prId" : 2821,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55f810d9-aedb-4cb4-958a-177c3ed401f8",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@seberg Are there any issues with boolean indexing. ISTR you will be making some mods there.\n",
        "createdAt" : "2013-04-28T01:37:01Z",
        "updatedAt" : "2013-08-16T21:44:21Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "f4389e7c-926e-43d8-a73f-762e1233d0a2",
        "parentId" : "55f810d9-aedb-4cb4-958a-177c3ed401f8",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "No, they just go through the typical fancy indexing stuff, i.e. get converted to normal fancy indexes first. The issues are that purely non-fancy indices will not work.\n",
        "createdAt" : "2013-04-28T08:18:50Z",
        "updatedAt" : "2013-08-16T21:44:21Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "acef718f40a30188c1379c13cc49c920d9e7c303",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +973,977 @@        assert_equal(a, np.array([0, 1, 4414, 46, 4, 5, 6, 7, 8, 9]))\n\n        # Test boolean indexing and boolean ufuncs\n        a = np.arange(10)\n        index = a % 2 == 0"
  },
  {
    "id" : "324cdcee-bfa6-451d-941b-8041b4d51573",
    "prId" : 3325,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2642d0e0-fd6c-4ae7-a690-d4ba5dffd8b2",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, interesting...\n",
        "createdAt" : "2013-05-10T22:06:10Z",
        "updatedAt" : "2013-05-10T22:06:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a0700d5c-6757-4f74-b7ee-6634440dd4e9",
        "parentId" : "2642d0e0-fd6c-4ae7-a690-d4ba5dffd8b2",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Ehhh, you are right I didn't think about it, this is probably too weird, such a read-write operand should probably set the no broadcast flag to forbid this. (such as np.add([1, 1], [2, 2], out=np.array([0])) does not work)\n",
        "createdAt" : "2013-05-10T22:23:27Z",
        "updatedAt" : "2013-05-10T22:23:27Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "133d9484-1bf3-463f-9d38-8df8d7e586d2",
        "parentId" : "2642d0e0-fd6c-4ae7-a690-d4ba5dffd8b2",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Ah well, but maybe it should be documented, since it would be the user of the functionality to take care to set this flag to disallow such things.\n",
        "createdAt" : "2013-05-10T22:35:20Z",
        "updatedAt" : "2013-05-10T22:35:20Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a2f91f3b9f28abfb5c065502fbdfffa5afbdd9f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +799,803 @@        opflag_tests.inplace_add(a, 3)\n        assert_equal(a, 3)\n        opflag_tests.inplace_add(a, [3, 4])\n        assert_equal(a, 10)\n"
  },
  {
    "id" : "743defa8-5415-460a-8ac2-06c83d6de33f",
    "prId" : 5077,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f4b5900-1edf-4fac-b5b7-3d953f958643",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "We should probably also have a testcase that would previously invoked the prepend-1 behaviour. I guess `inner1d(scalar, scalar)` would work.\n",
        "createdAt" : "2014-10-16T19:43:37Z",
        "updatedAt" : "2014-10-21T06:07:25Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "0c5f59a6-27ad-493a-a353-3f1dede9c1aa",
        "parentId" : "9f4b5900-1edf-4fac-b5b7-3d953f958643",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "That's what the next test (Extend core dimensions) does.\n",
        "createdAt" : "2014-10-21T05:38:36Z",
        "updatedAt" : "2014-10-21T06:07:25Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "528bac1380c782772b9de207bb8466b03117b96d",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +392,396 @@        a = np.arange(8).reshape((4, 2))\n        b = np.arange(4).reshape((4, 1))\n        assert_raises(ValueError, umt.inner1d, a, b)\n        # Extend core dimensions should fail\n        a = np.arange(8).reshape((4, 2))"
  },
  {
    "id" : "aea97a20-e84b-40ae-9567-2105660af5c2",
    "prId" : 11175,
    "prUrl" : "https://github.com/numpy/numpy/pull/11175#pullrequestreview-143789784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52fc1c67-a5e4-42a2-9339-b45e0fe6dda0",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "some of the comments like this might be suitable locations for sudivision into new tests if you go that route",
        "createdAt" : "2018-08-07T00:26:52Z",
        "updatedAt" : "2018-10-15T16:45:15Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8e15bafb0d811d8dd805ddf521d102eaac08079",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +340,344 @@\n    def test_signature5(self):\n        # matmul signature from _umath_tests\n        enabled, num_dims, ixs, flags, sizes = umt.test_signature(\n            2, 1, \"(n?,k),(k,m?)->(n?,m?)\")"
  },
  {
    "id" : "1863a6f0-d58d-48b0-a77e-faf4ba3b33b7",
    "prId" : 11175,
    "prUrl" : "https://github.com/numpy/numpy/pull/11175#pullrequestreview-155732427",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "870bd9de-665d-4dac-befc-6ab5c535e689",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "Similar thought to above re: potential advantage of splitting into at least a few more specialized smaller tests and / or using some parametrization.",
        "createdAt" : "2018-08-07T00:28:56Z",
        "updatedAt" : "2018-10-15T16:45:15Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "3bbce7cd-8e8c-4e5c-8b41-3b7b0804a0d8",
        "parentId" : "870bd9de-665d-4dac-befc-6ab5c535e689",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "This one is more difficult since each one does something slightly different and there is a natural progression from the simple to the complex, mangling the input differently at each step. Can we leave it for later?",
        "createdAt" : "2018-09-12T20:04:10Z",
        "updatedAt" : "2018-10-15T16:45:15Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "f05122d6-77f8-4d6d-b9d5-826ce1c8005e",
        "parentId" : "870bd9de-665d-4dac-befc-6ab5c535e689",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I also think this would be clearer as separate tests. You'd end up with a handful more array initialization, but it would make it much clearer what is being tested.",
        "createdAt" : "2018-09-15T20:57:38Z",
        "updatedAt" : "2018-10-15T16:45:15Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "625398b2-7d83-428d-b8fd-1665602b95e4",
        "parentId" : "870bd9de-665d-4dac-befc-6ab5c535e689",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Opened issue #11960 for splitting working tests into smaller units, and other things that should be done after this PR is accepted. We are already up to 25 commits for something around 20 chunks of code changes, and I am beginning to loose track of what is finished and what still needs work.",
        "createdAt" : "2018-09-16T05:25:38Z",
        "updatedAt" : "2018-10-15T16:45:15Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8e15bafb0d811d8dd805ddf521d102eaac08079",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +954,958 @@        assert_raises(ValueError, umt.cross1d, a, np.arange(3.), np.zeros((3, 4)))\n\n    def test_can_ignore_signature(self):\n        # Comparing the effects of ? in signature:\n        # matrix_multiply: (m,n),(n,p)->(m,p)    # all must be there."
  },
  {
    "id" : "2c9e7b0b-7dcc-4146-badb-036498e43518",
    "prId" : 11178,
    "prUrl" : "https://github.com/numpy/numpy/pull/11178#pullrequestreview-123785318",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f49e607-95f3-49ba-b3d8-bdec1f24b756",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Might be nicer to build a nested tuple here, and I don't envisage it being any harder",
        "createdAt" : "2018-05-28T17:27:04Z",
        "updatedAt" : "2018-05-28T17:41:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0e5e394d9174d3d5651aacc98b1cb6fcdcc75b2",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +337,341 @@        assert_equal(enabled, 1)\n        assert_equal(num_dims, (2, 1, 1))\n        assert_equal(ixs, (0, 1, 2, 3))\n\n    def test_get_signature(self):"
  },
  {
    "id" : "3c076ed2-5fa9-4298-bbaa-a20b006f6814",
    "prId" : 11257,
    "prUrl" : "https://github.com/numpy/numpy/pull/11257#pullrequestreview-126457888",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04e1ded1-7040-4789-9442-f9db2542ebbf",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`invalid_keyword_arg` would be a little clearer than `parrot`",
        "createdAt" : "2018-06-06T15:54:51Z",
        "updatedAt" : "2018-06-06T15:54:51Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f5d14e9f-968f-4990-953a-643e86f42494",
        "parentId" : "04e1ded1-7040-4789-9442-f9db2542ebbf",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Hey, I finally got a Monty-Python reference in!",
        "createdAt" : "2018-06-06T16:36:41Z",
        "updatedAt" : "2018-06-06T16:36:41Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "aae239cff42720ed4353acebf32c6d9310e824c6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +39,43 @@    def test_extobj_refcount(self):\n        # Should not segfault with USE_DEBUG.\n        assert_raises(TypeError, np.add, 1, 2, extobj=[4096], parrot=True)\n\n"
  },
  {
    "id" : "729f441e-f4e5-401a-a876-1eb56bf9a953",
    "prId" : 12644,
    "prUrl" : "https://github.com/numpy/numpy/pull/12644#pullrequestreview-188748556",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e231d385-0e8e-49f9-9377-9d50c71f0b4e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think these arguments are swapped",
        "createdAt" : "2019-01-02T05:42:56Z",
        "updatedAt" : "2019-01-03T22:33:15Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "74df5388-fb92-4b87-b604-7049a54f738d",
        "parentId" : "e231d385-0e8e-49f9-9377-9d50c71f0b4e",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "It was for \"too many arguments\" which didn't work any more. But if we go with keyword only, I can revert this...",
        "createdAt" : "2019-01-02T13:51:46Z",
        "updatedAt" : "2019-01-03T22:33:15Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "caacc4a6-549a-4fd6-91e3-cb9baad66956",
        "parentId" : "e231d385-0e8e-49f9-9377-9d50c71f0b4e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Oh, I see - the `1` is the extra. You're right, what you have is correct.",
        "createdAt" : "2019-01-02T16:53:20Z",
        "updatedAt" : "2019-01-03T22:33:15Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "5afe650403bdb3aa1a3189c1b8c3233501208521",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +1810,1814 @@        assert_raises(TypeError, f)\n        # too much\n        assert_raises(TypeError, f, d, 0, None, None, False, 0, True, 1)\n        # invalid axis\n        assert_raises(TypeError, f, d, \"invalid\")"
  },
  {
    "id" : "1531a367-a015-460d-9b5f-2be650905469",
    "prId" : 13495,
    "prUrl" : "https://github.com/numpy/numpy/pull/13495#pullrequestreview-235199915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b28797e3-faec-4ef5-9bf2-a7e502cd5fc2",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What happens to all the recorded warnings?",
        "createdAt" : "2019-05-08T01:56:35Z",
        "updatedAt" : "2019-05-08T15:06:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "958234bf-8c05-4e2b-a962-2ccab81e5c27",
        "parentId" : "b28797e3-faec-4ef5-9bf2-a7e502cd5fc2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could get the same effect by just ignoring them :)",
        "createdAt" : "2019-05-08T02:00:34Z",
        "updatedAt" : "2019-05-08T15:06:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b0fe47d1-7d07-46f7-a8da-d34a1eeeae7a",
        "parentId" : "b28797e3-faec-4ef5-9bf2-a7e502cd5fc2",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "made the ignore explicit in the next line. Without `record=True` the test passes but all the warnings are printed out",
        "createdAt" : "2019-05-08T14:38:09Z",
        "updatedAt" : "2019-05-08T15:06:50Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "a818f443-b8e7-432b-ac87-eed97173b9c3",
        "parentId" : "b28797e3-faec-4ef5-9bf2-a7e502cd5fc2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Shouldn't be printed out if they are ignored.",
        "createdAt" : "2019-05-08T15:05:25Z",
        "updatedAt" : "2019-05-08T15:06:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c8765231-9828-4279-9ff4-ff6280b4d227",
        "parentId" : "b28797e3-faec-4ef5-9bf2-a7e502cd5fc2",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "hmm, filterwarnings('ignore') is not supported by pytest. @charris what change are you suggesting?",
        "createdAt" : "2019-05-08T15:08:26Z",
        "updatedAt" : "2019-05-08T15:08:27Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "e49ba0a0-a38c-4c83-8539-cc3896937538",
        "parentId" : "b28797e3-faec-4ef5-9bf2-a7e502cd5fc2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Need to use `suppress_warnings`. @seberg Do you know if we still need that for Python >= 3.5?",
        "createdAt" : "2019-05-08T15:10:05Z",
        "updatedAt" : "2019-05-08T15:10:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "78a99e5b-65f1-48d8-af18-b4b211b230b5",
        "parentId" : "b28797e3-faec-4ef5-9bf2-a7e502cd5fc2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The failing test is one of ours that looks for \"ignore\" because using that used to mess up the warnings module.",
        "createdAt" : "2019-05-08T15:13:03Z",
        "updatedAt" : "2019-05-08T15:13:03Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ffc0e7ca-de1d-432c-9a75-b3708aad7272",
        "parentId" : "b28797e3-faec-4ef5-9bf2-a7e502cd5fc2",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "The code in this PR follows the pattern in [other places in the tests](https://github.com/numpy/numpy/blob/v1.16.3/numpy/core/tests/test_multiarray.py#L6980). Maybe we can accept this PR as-is and explore best practices for warnings in a separate issue/PR",
        "createdAt" : "2019-05-08T15:23:05Z",
        "updatedAt" : "2019-05-08T15:23:05Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "d929ff76-64a7-43cc-ae8e-ac4b96959067",
        "parentId" : "b28797e3-faec-4ef5-9bf2-a7e502cd5fc2",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Catch warnings is OK, it just catches all warnings, which is not ideal (and `suppress_warnings` can be nested and works reasonable then). Should double check, but the doc I put on `suppress_warnings` indeed suggests that `\"ignore\"` filters should be fine in numpy 1.17. I remember there were still some oddities, but I do not think they were relevant for this.",
        "createdAt" : "2019-05-08T15:40:48Z",
        "updatedAt" : "2019-05-08T15:40:49Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "b110024f-cbe0-4048-8538-a59feb588054",
        "parentId" : "b28797e3-faec-4ef5-9bf2-a7e502cd5fc2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@seberg Sounds like we can disable the test and clean things up after we drop 1.16 support.",
        "createdAt" : "2019-05-08T17:32:58Z",
        "updatedAt" : "2019-05-08T17:32:58Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "5c0b291c-3870-49ce-9ba1-8d5ea58fb002",
        "parentId" : "b28797e3-faec-4ef5-9bf2-a7e502cd5fc2",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "@charris do you mean the \"no ignore warnings test\"? This here should work in any case, maybe not the prettiest, but `suppress_warnings` is also not perfect.",
        "createdAt" : "2019-05-08T17:51:33Z",
        "updatedAt" : "2019-05-08T17:51:33Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "de32873dcab42c6a6b12eae73bbb0fefb1252212",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1955,1959 @@        inp, out = typ.split('->')\n        args = [np.ones((3, 3), t) for t in inp]\n        with warnings.catch_warnings(record=True):\n            warnings.filterwarnings(\"always\")\n            res = ufunc(*args)"
  },
  {
    "id" : "6a707797-2236-48e2-8436-e29af8920aba",
    "prId" : 15040,
    "prUrl" : "https://github.com/numpy/numpy/pull/15040#pullrequestreview-326325258",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b449c80-4b27-47d3-a095-f10a61b2cdb6",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n```",
        "createdAt" : "2019-12-03T17:37:19Z",
        "updatedAt" : "2019-12-04T03:18:43Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7fbbdc50967f1d7ab4dec6b89702170e4eb0120",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +179,183 @@                assert_array_equal(res_num.astype(\"O\"), res_obj)\n\n\nclass TestUfunc(object):\n    def test_pickle(self):"
  }
]