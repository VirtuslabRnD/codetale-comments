[
  {
    "id" : "a0cceb90-b3f1-4eac-9506-9e7d6d9e557f",
    "prId" : 9434,
    "prUrl" : "https://github.com/numpy/numpy/pull/9434#pullrequestreview-51780267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07494b96-673a-4a42-8831-29d673862487",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Above here, I did not check that the classes are named `Test...` not sure it is important.",
        "createdAt" : "2017-07-24T14:12:03Z",
        "updatedAt" : "2017-07-24T19:00:48Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "bbe5e716-4f3f-4514-aae5-f72e38b5695e",
        "parentId" : "07494b96-673a-4a42-8831-29d673862487",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK, went over it to check for this quickly.",
        "createdAt" : "2017-07-24T14:48:08Z",
        "updatedAt" : "2017-07-24T19:00:48Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "69bc7b19d2a665c8301c3df07aee61fc469ff4e3",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +135,139 @@        # A small check that data is ok\n        assert_equal(h['z'], np.zeros((2, 3), dtype='u1'))\n\n\nclass TestCreateZerosPlain(CreateZeros):"
  },
  {
    "id" : "913114e3-64d3-428b-b184-a85c5c94f976",
    "prId" : 10151,
    "prUrl" : "https://github.com/numpy/numpy/pull/10151#pullrequestreview-287143189",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b93fc56-5468-4b29-af77-15796943a939",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK, this may be silly, but can we add to the test:\r\n```\r\nfor t in numeric_types:\r\n    assert np.dtype(t.__name__).type is t\r\n```\r\nSince I think this is true with your changes (also then I do not have to check the above list manually for correctness).",
        "createdAt" : "2019-09-12T00:26:50Z",
        "updatedAt" : "2019-09-12T05:41:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "c499faa6-2293-44c8-b003-a2edfbdf7a03",
        "parentId" : "0b93fc56-5468-4b29-af77-15796943a939",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "That sounds like a good idea to me",
        "createdAt" : "2019-09-12T00:38:44Z",
        "updatedAt" : "2019-09-12T05:41:41Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa09f5efb9c067bb4a62ae7ac79d8d6afd39652e",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +523,527 @@    def test_names_reflect_attributes(self, t):\n        \"\"\" Test that names correspond to where the type is under ``np.`` \"\"\"\n        assert getattr(np, t.__name__) is t\n\n    @pytest.mark.parametrize('t', numeric_types)"
  },
  {
    "id" : "f6ee2dc8-275d-4e6b-a03f-fc1a432331ed",
    "prId" : 11340,
    "prUrl" : "https://github.com/numpy/numpy/pull/11340#pullrequestreview-129241980",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "762c768d-bedb-4dee-8148-8086cd32ab0c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This latter test fails for me in 2.7",
        "createdAt" : "2018-06-15T06:54:48Z",
        "updatedAt" : "2018-06-15T06:54:48Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "6f0c581f-c086-4de6-8135-32f757a5f56e",
        "parentId" : "762c768d-bedb-4dee-8148-8086cd32ab0c",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "In current master, right?",
        "createdAt" : "2018-06-15T12:51:16Z",
        "updatedAt" : "2018-06-15T12:51:35Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "1773f42d-1297-4a59-a5f7-c3a153b6daa5",
        "parentId" : "762c768d-bedb-4dee-8148-8086cd32ab0c",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yes",
        "createdAt" : "2018-06-15T16:44:33Z",
        "updatedAt" : "2018-06-15T16:44:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "97a29506db51a900abf1634c932e598969010ca0",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +412,416 @@    def test_longdouble(self):\n        assert_(np.sctypeDict['f8'] is not np.longdouble)\n        assert_(np.sctypeDict['c16'] is not np.clongdouble)"
  },
  {
    "id" : "24dad3f6-d74a-4a56-b199-811424eecfb8",
    "prId" : 12020,
    "prUrl" : "https://github.com/numpy/numpy/pull/12020#pullrequestreview-157929335",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc2ded77-53a7-4b23-ad67-7dc8e8bf4114",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "These results are dumb, but IMO the existence of this function is also dumb. Using `np.dtype(rational).char` would give `'r'` here, which is more sensible - but ultimately I can't think of a reason you'd want the char in the first place.",
        "createdAt" : "2018-09-23T05:38:45Z",
        "updatedAt" : "2018-09-23T05:38:46Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0412b2a59cd94ff58da5631f373526f36c4fef60",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +465,469 @@        from numpy.core._rational_tests import rational\n        assert_raises(KeyError, np.sctype2char, rational)\n        assert_raises(KeyError, np.sctype2char, rational(1))\n\n    def test_array_instance(self):"
  },
  {
    "id" : "b22e57cb-d3a1-406c-8356-5640e193d4ad",
    "prId" : 12109,
    "prUrl" : "https://github.com/numpy/numpy/pull/12109#pullrequestreview-162767017",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48997ee8-8bbd-4141-89f9-bb56a1ec085f",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you add a test where `rep` is `np.dtype(np.float64)`, `np.dtype((np.int16, (3, 4)))`, and `np.dtype([('a', np.int8)])` too?",
        "createdAt" : "2018-10-09T08:26:28Z",
        "updatedAt" : "2018-10-09T08:26:38Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1fb17ab7c4e6479bd4632a2407930019ca4877e",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +480,484 @@    (list, False),\n    (1.1, False),\n    (str, True),\n    ])\ndef test_issctype(rep, expected):"
  },
  {
    "id" : "87b8ab1f-d76b-4b7f-b72e-19de7bfde0c1",
    "prId" : 12445,
    "prUrl" : "https://github.com/numpy/numpy/pull/12445#pullrequestreview-178529868",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fefa1eaa-eaed-452f-9aad-70edddd28db3",
        "parentId" : null,
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Are you sure this is equivalent? Previously we iterated through each element of `dtype` -- now we don't.",
        "createdAt" : "2018-11-26T20:52:35Z",
        "updatedAt" : "2018-11-29T23:02:59Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "faa1f353-400a-446b-90a7-a174f769c37f",
        "parentId" : "fefa1eaa-eaed-452f-9aad-70edddd28db3",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yes, this is equivalent.\r\n\r\nWe're iterating through each item of `descr`. `dtype` is the name being used for the elements within the `descr`, set on line 77.",
        "createdAt" : "2018-11-26T22:22:27Z",
        "updatedAt" : "2018-11-29T23:02:59Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a20cfbafebfac92787d304bca568d069e74348c6",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +89,93 @@            out.append(nitem)\n        elif isinstance(dtype, list):\n            l = normalize_descr(dtype)\n            out.append((item[0], l))\n        else:"
  }
]