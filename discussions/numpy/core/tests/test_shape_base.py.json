[
  {
    "id" : "72a56ccb-e71c-4fb8-9625-851f61990238",
    "prId" : 440,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a25df356-f23d-4d4c-b82e-a2e85047ea3d",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "Great tests, these really leave this corner of numpy better than you found it...\n\nTo be _totally_ comprehensive, they should also check that the warning is in fact being issued by these last calls to concatenate -- see numpy/core/tests/test_multiarray.py : test_diagonal_deprecation for an example of how to do this\n",
        "createdAt" : "2012-09-13T13:26:49Z",
        "updatedAt" : "2012-09-16T11:52:12Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "3a40ee1c-13c4-4850-b812-1063d3029669",
        "parentId" : "a25df356-f23d-4d4c-b82e-a2e85047ea3d",
        "authorId" : "7ff2710f-0a12-46fb-a54a-d405dab78cf7",
        "body" : "Thanks - I tried another solution, baulking somewhat at the amount of copy / paste I would need to use your context manager.  Maybe that could go into numpy somewhere so it could be imported? - it looks useful. \n",
        "createdAt" : "2012-09-13T18:33:33Z",
        "updatedAt" : "2012-09-16T11:52:12Z",
        "lastEditedBy" : "7ff2710f-0a12-46fb-a54a-d405dab78cf7",
        "tags" : [
        ]
      }
    ],
    "commit" : "69afd27b870cd85f06c4409fcffd0734ddb2fe76",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +218,222 @@        assert_array_equal(concatenate((r4, r3), 10), r4 + r3)\n    finally:\n        warnings.filters.pop(0)\n    # Confurm DepractionWarning raised\n    warnings.simplefilter('always', DeprecationWarning)"
  },
  {
    "id" : "56099ad5-290d-49ed-b9ac-cfe3852f4695",
    "prId" : 8886,
    "prUrl" : "https://github.com/numpy/numpy/pull/8886#pullrequestreview-31080447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e698587-cc47-466c-bed2-817b86e475ef",
        "parentId" : null,
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "It is odd that there is no way to do this without the explicit nested call, but I suppose you are right, this would be a 3D array if you did `[[[[one], [three], [four]], two], ...`",
        "createdAt" : "2017-04-04T18:43:43Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "ee799b53-4025-48fd-9e9f-5a6bfc4b360b",
        "parentId" : "8e698587-cc47-466c-bed2-817b86e475ef",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "That would be 4D, as that is how deep the brackets nest.\r\n\r\nWhat you seem to be asking for there is a separate syntax where `[` alternatively means \"stack vertically\" and \"stack horizontally\". As an ND generalisation, you could introduce `[` meaning _\"stack in the next dimension\"_ and `(` meaning _\"stack in the previous dimension\"_ - but that would be pretty cryptic.",
        "createdAt" : "2017-04-04T20:28:48Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1f554e7e-1c72-4c67-8ad3-cf515c7014c8",
        "parentId" : "8e698587-cc47-466c-bed2-817b86e475ef",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "I agree that the current syntax is best for now. It would be possible to avoid the nesting pretty easily in 2D (like MATLAB's `;` vs `,`), but it would not generalize well to higher dimensions. Concatenating along successive axes really does seem like the optimal approach here.",
        "createdAt" : "2017-04-05T15:07:09Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "d0d47936-cd11-4834-9169-df896a0ac530",
        "parentId" : "8e698587-cc47-466c-bed2-817b86e475ef",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm pretty sure that matlab provides no way to do this either - you still have to nest `[`",
        "createdAt" : "2017-04-05T15:14:30Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2cb27e9a-e4ec-4c32-85f6-344eee88b909",
        "parentId" : "8e698587-cc47-466c-bed2-817b86e475ef",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "All the more reason to keep things as they are :)",
        "createdAt" : "2017-04-05T15:17:39Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      }
    ],
    "commit" : "642f7e841d2f9900b3793c9b140f8c1adc56b899",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +422,426 @@        result = np.block([\n            [\n                np.block([\n                   [one],\n                   [three],"
  }
]