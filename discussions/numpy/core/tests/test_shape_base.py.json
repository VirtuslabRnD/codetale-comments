[
  {
    "id" : "72a56ccb-e71c-4fb8-9625-851f61990238",
    "prId" : 440,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a25df356-f23d-4d4c-b82e-a2e85047ea3d",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "Great tests, these really leave this corner of numpy better than you found it...\n\nTo be _totally_ comprehensive, they should also check that the warning is in fact being issued by these last calls to concatenate -- see numpy/core/tests/test_multiarray.py : test_diagonal_deprecation for an example of how to do this\n",
        "createdAt" : "2012-09-13T13:26:49Z",
        "updatedAt" : "2012-09-16T11:52:12Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "3a40ee1c-13c4-4850-b812-1063d3029669",
        "parentId" : "a25df356-f23d-4d4c-b82e-a2e85047ea3d",
        "authorId" : "7ff2710f-0a12-46fb-a54a-d405dab78cf7",
        "body" : "Thanks - I tried another solution, baulking somewhat at the amount of copy / paste I would need to use your context manager.  Maybe that could go into numpy somewhere so it could be imported? - it looks useful. \n",
        "createdAt" : "2012-09-13T18:33:33Z",
        "updatedAt" : "2012-09-16T11:52:12Z",
        "lastEditedBy" : "7ff2710f-0a12-46fb-a54a-d405dab78cf7",
        "tags" : [
        ]
      }
    ],
    "commit" : "69afd27b870cd85f06c4409fcffd0734ddb2fe76",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +218,222 @@        assert_array_equal(concatenate((r4, r3), 10), r4 + r3)\n    finally:\n        warnings.filters.pop(0)\n    # Confurm DepractionWarning raised\n    warnings.simplefilter('always', DeprecationWarning)"
  },
  {
    "id" : "56099ad5-290d-49ed-b9ac-cfe3852f4695",
    "prId" : 8886,
    "prUrl" : "https://github.com/numpy/numpy/pull/8886#pullrequestreview-31080447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e698587-cc47-466c-bed2-817b86e475ef",
        "parentId" : null,
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "It is odd that there is no way to do this without the explicit nested call, but I suppose you are right, this would be a 3D array if you did `[[[[one], [three], [four]], two], ...`",
        "createdAt" : "2017-04-04T18:43:43Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "ee799b53-4025-48fd-9e9f-5a6bfc4b360b",
        "parentId" : "8e698587-cc47-466c-bed2-817b86e475ef",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "That would be 4D, as that is how deep the brackets nest.\r\n\r\nWhat you seem to be asking for there is a separate syntax where `[` alternatively means \"stack vertically\" and \"stack horizontally\". As an ND generalisation, you could introduce `[` meaning _\"stack in the next dimension\"_ and `(` meaning _\"stack in the previous dimension\"_ - but that would be pretty cryptic.",
        "createdAt" : "2017-04-04T20:28:48Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1f554e7e-1c72-4c67-8ad3-cf515c7014c8",
        "parentId" : "8e698587-cc47-466c-bed2-817b86e475ef",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "I agree that the current syntax is best for now. It would be possible to avoid the nesting pretty easily in 2D (like MATLAB's `;` vs `,`), but it would not generalize well to higher dimensions. Concatenating along successive axes really does seem like the optimal approach here.",
        "createdAt" : "2017-04-05T15:07:09Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "d0d47936-cd11-4834-9169-df896a0ac530",
        "parentId" : "8e698587-cc47-466c-bed2-817b86e475ef",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm pretty sure that matlab provides no way to do this either - you still have to nest `[`",
        "createdAt" : "2017-04-05T15:14:30Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2cb27e9a-e4ec-4c32-85f6-344eee88b909",
        "parentId" : "8e698587-cc47-466c-bed2-817b86e475ef",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "All the more reason to keep things as they are :)",
        "createdAt" : "2017-04-05T15:17:39Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      }
    ],
    "commit" : "642f7e841d2f9900b3793c9b140f8c1adc56b899",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +422,426 @@        result = np.block([\n            [\n                np.block([\n                   [one],\n                   [three],"
  },
  {
    "id" : "057b1fc4-4d3c-4131-8c32-28239064c913",
    "prId" : 11971,
    "prUrl" : "https://github.com/numpy/numpy/pull/11971#pullrequestreview-167993924",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c33265b-cd96-4424-a6fc-8bcb95cbb04b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This seems like a lot of magic for something that can be achieved with a parametrized fixture",
        "createdAt" : "2018-10-24T04:44:10Z",
        "updatedAt" : "2018-10-24T04:44:10Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5d438bf6-5563-4754-b3e9-38cadd1ecb2a",
        "parentId" : "2c33265b-cd96-4424-a6fc-8bcb95cbb04b",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Off the top of my head, I think something like:\r\n```\r\nclass Tests:\r\n    @pytest.fixture(params=[block1, block2, ...])\r\n    def block(request): # maybe needs self, not sure\r\n        return request.param\r\n\r\n    def method(self, block): ...\r\n```",
        "createdAt" : "2018-10-24T04:46:47Z",
        "updatedAt" : "2018-10-24T04:46:48Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f19cdcd9-6dbc-47f0-b6a1-007ae9881a9e",
        "parentId" : "2c33265b-cd96-4424-a6fc-8bcb95cbb04b",
        "authorId" : "7714a86d-e4db-41f5-8928-d91402bb82aa",
        "body" : "do you have a working example of a fixture i can build off?",
        "createdAt" : "2018-10-24T10:55:43Z",
        "updatedAt" : "2018-10-24T10:55:43Z",
        "lastEditedBy" : "7714a86d-e4db-41f5-8928-d91402bb82aa",
        "tags" : [
        ]
      },
      {
        "id" : "caf4cc0b-107a-495d-9fa8-ef696485cf67",
        "parentId" : "2c33265b-cd96-4424-a6fc-8bcb95cbb04b",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Does the one above not work?",
        "createdAt" : "2018-10-24T16:07:40Z",
        "updatedAt" : "2018-10-24T16:07:40Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "f164d2e90cce62d901c1cce881684863fefde91f",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +385,389 @@        metafunc.parametrize(argnames,\n                             [[funcargs[name] for name in argnames]\n                              for funcargs in arglist])\n\n"
  },
  {
    "id" : "24169ccf-7e4d-432a-b6eb-8df28c419e71",
    "prId" : 12259,
    "prUrl" : "https://github.com/numpy/numpy/pull/12259#pullrequestreview-171559530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6603fd13-b7c8-4edb-b62f-6909c57b1ac1",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Note you could also achieve this via the `ids` parameter to `fixture`:\r\n```\r\n@pytest.fixture(\r\n    params=[block, _block_force_concatenate, _block_force_slicing],\r\n    ids=['block', 'force_concatenate', 'force_slicing']\r\n)\r\n```\r\nWhich has the benefit of not needing the final `else`.\r\nNot really a big deal either way.",
        "createdAt" : "2018-11-05T06:35:13Z",
        "updatedAt" : "2018-11-05T06:35:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "eb9d0712-6bbe-467c-ae9c-c7b1f0fd6194",
        "parentId" : "6603fd13-b7c8-4edb-b62f-6909c57b1ac1",
        "authorId" : "7714a86d-e4db-41f5-8928-d91402bb82aa",
        "body" : "that else statement is more a test on the test. It checks that I know how to use request (which I didn't).",
        "createdAt" : "2018-11-05T13:45:13Z",
        "updatedAt" : "2018-11-05T13:45:14Z",
        "lastEditedBy" : "7714a86d-e4db-41f5-8928-d91402bb82aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce55462abe93ee16ae941c5e5973269ded0e96e0",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +416,420 @@            return _block_force_slicing\n        elif request.param == 'block':\n            return block\n        else:\n            raise ValueError('Unknown blocking request. There is a typo in the tests.')"
  },
  {
    "id" : "c2b71563-2bee-40a6-92c9-e238c88b2279",
    "prId" : 12668,
    "prUrl" : "https://github.com/numpy/numpy/pull/12668#pullrequestreview-190847538",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "086fdac2-ac67-4465-9e6e-c00dfbc6fe12",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "The produced message has `along dimension 0` ",
        "createdAt" : "2019-01-06T15:42:18Z",
        "updatedAt" : "2019-01-09T17:41:29Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "5bc84465-0fa3-4983-b319-856826fbfee7",
        "parentId" : "086fdac2-ac67-4465-9e6e-c00dfbc6fe12",
        "authorId" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "body" : "Now fixed (the single test failure is unrelated).\r\n\r\nAs a side note, the test is written in a rather convoluted manner, as the loop over `i` only matters because `a` and `b` are being replaced by moveaxis'ed versions of themselves below :/",
        "createdAt" : "2019-01-06T17:33:56Z",
        "updatedAt" : "2019-01-09T17:41:29Z",
        "lastEditedBy" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "tags" : [
        ]
      },
      {
        "id" : "63b53012-7077-43c3-a971-b254471e25ea",
        "parentId" : "086fdac2-ac67-4465-9e6e-c00dfbc6fe12",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Why is it unrelated? The azure test failure is in this test. ",
        "createdAt" : "2019-01-06T17:51:31Z",
        "updatedAt" : "2019-01-09T17:41:29Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "7dd9584f-63ff-4522-b55c-660e90689118",
        "parentId" : "086fdac2-ac67-4465-9e6e-c00dfbc6fe12",
        "authorId" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "body" : "Oh, sorry, was looking at the travis failure.  Let's see whether this fixes it...",
        "createdAt" : "2019-01-06T19:32:26Z",
        "updatedAt" : "2019-01-09T17:41:29Z",
        "lastEditedBy" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "tags" : [
        ]
      },
      {
        "id" : "2fca4032-91d0-422f-be7e-421717b7780a",
        "parentId" : "086fdac2-ac67-4465-9e6e-c00dfbc6fe12",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Something is overflowing, the azure failure message ends with \"but the array at index 0 has 1 dimension(s) and the array at index 1 has 140733193388034 dimension(s)\"",
        "createdAt" : "2019-01-09T13:10:07Z",
        "updatedAt" : "2019-01-09T17:41:29Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "1ba21f90-f9ef-49ed-9fa0-d57c60fc02dd",
        "parentId" : "086fdac2-ac67-4465-9e6e-c00dfbc6fe12",
        "authorId" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "body" : "Looks like I need to use %d instead of %zd.",
        "createdAt" : "2019-01-09T17:41:33Z",
        "updatedAt" : "2019-01-09T17:41:34Z",
        "lastEditedBy" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "70a15c1740f21ba53e54e9d8ab35a013688b3203",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +245,249 @@                \"index 0 has size 1 and the array at index 1 has size 2\"\n                .format(i),\n                np.concatenate, (a, b), axis=axis[1])\n            assert_raises(ValueError, np.concatenate, (a, b), axis=axis[2])\n            a = np.moveaxis(a, -1, 0)"
  }
]