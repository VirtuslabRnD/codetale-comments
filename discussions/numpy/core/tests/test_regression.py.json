[
  {
    "id" : "edcee95e-422c-4de7-bdf1-676a97846d5b",
    "prId" : 395,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebb05491-908f-4680-bcad-5b0287fa7be0",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Not sure if it matters or is the case. But it may be necessary to test both '>' and '<' for big-endian machines where I guess the singletons should be big endian? would be just a second net here and a second test below (unless there is a way to make net non-native).\n",
        "createdAt" : "2012-08-31T17:10:16Z",
        "updatedAt" : "2012-08-31T17:10:16Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "efe5d70f-bf6f-4c83-922b-31e7dfcd740c",
        "parentId" : "ebb05491-908f-4680-bcad-5b0287fa7be0",
        "authorId" : "041ba948-3afd-44ae-9741-f412d7673058",
        "body" : "Would you mind sending a PR for this please? I am going to merge this issue now.\n",
        "createdAt" : "2012-08-31T22:03:49Z",
        "updatedAt" : "2012-08-31T22:03:49Z",
        "lastEditedBy" : "041ba948-3afd-44ae-9741-f412d7673058",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecbd938adb1a370017a5ff8ca20b2c66141f48fe",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +172,176 @@    def test_endian_where(self,level=rlevel):\n        \"\"\"GitHuB issue #369\"\"\"\n        net = np.zeros(3, dtype='>f4')\n        net[1] = 0.00458849\n        net[2] = 0.605202"
  },
  {
    "id" : "4e304417-ce34-4c62-a139-fc6b855bec4f",
    "prId" : 397,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b349ef0-8cdf-4b36-8343-28c359066765",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "The use of format_parser is pretty pointless here, it's equivalent to just writing `a = np.recarray((2,), \"i4, i4\")` or `a = np.recarray((2,), [(\"\", \"i4\"), (\"\", \"i4\")])`... doesn't really matter much though.\n",
        "createdAt" : "2012-09-01T07:58:00Z",
        "updatedAt" : "2012-09-01T07:58:00Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "0713354fa282f096e30886e7617d84ee2938390d",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +1745,1749 @@        # Ticket #2066, similar problem:\n        dtype = np.format_parser(['i4', 'i4'], [], [])\n        a = np.recarray((2, ), dtype)\n        assert_raises(TypeError, np.searchsorted, a, 1)\n"
  },
  {
    "id" : "9b3b46a7-cf0e-4351-9c01-38c29a46405c",
    "prId" : 477,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67985410-ac1a-4f56-8fa6-225aa51df9ae",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Might as well test the astype method too.\n",
        "createdAt" : "2012-10-02T01:23:09Z",
        "updatedAt" : "2012-10-02T01:23:09Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a72bb40c-5a95-4b50-acd3-b08ec092df02",
        "parentId" : "67985410-ac1a-4f56-8fa6-225aa51df9ae",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "And maybe logical_or.reduce and logical_and.reduce as well.\n\n```\nIn [1]: a = ones(3)*1j\n\nIn [2]: logical_or.reduce(a)\nOut[2]: True\n\nIn [3]: logical_and.reduce(a)\nOut[3]: True\n```\n\nYou could maybe put those tests in numpy/core/test_ufunc. If you want to go for completeness, you could do it for all numeric types. The easy way to do that is to use the typecodes in np.typecodes\n\n```\nIn [4]: np.typecodes\nOut[4]: \n{'All': '?bhilqpBHILQPefdgFDGSUVOMm',\n 'AllFloat': 'efdgFDG',\n 'AllInteger': 'bBhHiIlLqQpP',\n 'Character': 'c',\n 'Complex': 'FDG',\n 'Datetime': 'Mm',\n 'Float': 'efdg',\n 'Integer': 'bhilqp',\n 'UnsignedInteger': 'BHILQP'}\n```\n",
        "createdAt" : "2012-10-02T02:19:05Z",
        "updatedAt" : "2012-10-02T02:19:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "44633bc4-cef9-4831-bd9f-3330948b8fbd",
        "parentId" : "67985410-ac1a-4f56-8fa6-225aa51df9ae",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "And if you do that and are working in the test directory you can run those tests by doing\n\n```\ncharris@f16 [tests (pull-477)]$ python test_ufunc.py\n```\n",
        "createdAt" : "2012-10-02T02:22:22Z",
        "updatedAt" : "2012-10-02T02:22:22Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8ffb486a825104362698f9738d1759a63251724",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1460,1464 @@            assert_equal(complex(x), 1+2j)\n\n    def test_complex_boolean_cast(self):\n        \"\"\"Ticket #2218\"\"\"\n        for tp in [np.csingle, np.cdouble, np.clongdouble]:"
  },
  {
    "id" : "3052cf17-9c82-426e-b498-662c35e7fb58",
    "prId" : 2886,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "886eb3eb-c885-43ab-b960-3a28de677d0c",
        "parentId" : null,
        "authorId" : "041ba948-3afd-44ae-9741-f412d7673058",
        "body" : "Well, `t` is one of:\n\n```\nIn [2]: np.typecodes['Complex']                                                \nOut[2]: 'FDG'\n```\n\nbut the original test was testing with `t=\"c8\"` (effectively). So why was testing for \"c8\" removed?\n",
        "createdAt" : "2013-01-05T19:21:48Z",
        "updatedAt" : "2013-01-05T19:21:48Z",
        "lastEditedBy" : "041ba948-3afd-44ae-9741-f412d7673058",
        "tags" : [
        ]
      },
      {
        "id" : "214d225e-6f6e-4fee-b876-90e462afaf0a",
        "parentId" : "886eb3eb-c885-43ab-b960-3a28de677d0c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Its not removed `np.dtype('F') == np.dtype('c8')`.\n",
        "createdAt" : "2013-01-05T19:32:35Z",
        "updatedAt" : "2013-01-05T19:32:35Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "6c40cd53-80b3-4198-9f60-982ebadafd1a",
        "parentId" : "886eb3eb-c885-43ab-b960-3a28de677d0c",
        "authorId" : "041ba948-3afd-44ae-9741-f412d7673058",
        "body" : "Ah I see. All is ok then. Thanks!\n",
        "createdAt" : "2013-01-05T19:54:26Z",
        "updatedAt" : "2013-01-05T19:54:26Z",
        "lastEditedBy" : "041ba948-3afd-44ae-9741-f412d7673058",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2ca91791024f74dd4754fa9b811228abd1ce613",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1298,1302 @@    def test_byteswap_complex_scalar(self):\n        \"\"\"Ticket #1259 and gh-441\"\"\"\n        for dtype in [np.dtype('<'+t) for t in np.typecodes['Complex']]:\n            z = np.array([2.2-1.1j], dtype)\n            x = z[0] # always native-endian"
  },
  {
    "id" : "d2609641-9b91-4686-99b7-0d83833b1353",
    "prId" : 2886,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57a6e424-6ebf-4174-8146-d128b1d8d9fc",
        "parentId" : null,
        "authorId" : "041ba948-3afd-44ae-9741-f412d7673058",
        "body" : "So you changed `-1j` to `2.2-1.1j`, which seems ok to me.\n",
        "createdAt" : "2013-01-05T19:22:42Z",
        "updatedAt" : "2013-01-05T19:22:42Z",
        "lastEditedBy" : "041ba948-3afd-44ae-9741-f412d7673058",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2ca91791024f74dd4754fa9b811228abd1ce613",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1299,1303 @@        \"\"\"Ticket #1259 and gh-441\"\"\"\n        for dtype in [np.dtype('<'+t) for t in np.typecodes['Complex']]:\n            z = np.array([2.2-1.1j], dtype)\n            x = z[0] # always native-endian\n            y = x.byteswap()"
  },
  {
    "id" : "b05d430a-106b-48bf-b510-5461c31d4834",
    "prId" : 2886,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f2d52e5-f75c-4765-94c2-c81f857a9b62",
        "parentId" : null,
        "authorId" : "041ba948-3afd-44ae-9741-f412d7673058",
        "body" : "The rest of the changes here look ok to me.\n",
        "createdAt" : "2013-01-05T19:25:37Z",
        "updatedAt" : "2013-01-05T19:25:37Z",
        "lastEditedBy" : "041ba948-3afd-44ae-9741-f412d7673058",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2ca91791024f74dd4754fa9b811228abd1ce613",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1310,1314 @@            # double check real and imaginary parts:\n            assert_equal(x.real, y.real.byteswap())\n            assert_equal(x.imag, y.imag.byteswap())\n\n    def test_structured_arrays_with_objects1(self):"
  },
  {
    "id" : "d39e7078-b445-4dc6-807d-8177c3494c76",
    "prId" : 4804,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4a9a505-5d79-4121-a031-562b8e181622",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Extra `is`.\n",
        "createdAt" : "2014-06-17T04:06:50Z",
        "updatedAt" : "2014-07-05T20:08:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c4d48c3c27584e8a555b5e55d1634089db7a01a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +757,761 @@        x = np.array((15,), dtype=float)\n        def ia(x, s, v): x[(s>0)]=v\n        # After removing deprecation, the following is are ValueErrors.\n        # This might seem odd as compared to the value error below. This\n        # is due to the fact that the new code always use \"nonzero\" logic"
  },
  {
    "id" : "ed2f7884-5efc-494c-a6c9-1b19a4d86777",
    "prId" : 4804,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d37663f9-24c7-4cc2-b46b-ac33496ed549",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "\"use\" <- \"uses\"\n",
        "createdAt" : "2014-06-17T04:07:21Z",
        "updatedAt" : "2014-07-05T20:08:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c4d48c3c27584e8a555b5e55d1634089db7a01a",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +759,763 @@        # After removing deprecation, the following is are ValueErrors.\n        # This might seem odd as compared to the value error below. This\n        # is due to the fact that the new code always use \"nonzero\" logic\n        # and the boolean special case is not taken.\n        self.assertRaises(IndexError, ia, x, s, np.zeros(9, dtype=float))"
  },
  {
    "id" : "ed1ce6b0-504a-45f9-a901-00a5db5f2e3d",
    "prId" : 5386,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abd1cc80-6c02-46d3-bf8e-0a8ca85c7e02",
        "parentId" : null,
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Last nitpick, need an extra blank line here to adhere to PEP8.\n",
        "createdAt" : "2014-12-22T20:29:40Z",
        "updatedAt" : "2014-12-30T10:46:35Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "61f3b10a4fe6a2e5061230bf15d6afb7d6c442d1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2104,2108 @@        assert_equal(np.array([10]) == x, \"OK\")\n\n\nif __name__ == \"__main__\":\n    run_module_suite()"
  },
  {
    "id" : "b5ca7d72-56c5-4b1d-8894-9aeaae9aa758",
    "prId" : 8050,
    "prUrl" : "https://github.com/numpy/numpy/pull/8050#pullrequestreview-477727",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80ca6822-7bc2-4896-b12b-d1842579ba53",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Space missing, but will merge without a fix ;).\n",
        "createdAt" : "2016-09-18T15:51:45Z",
        "updatedAt" : "2016-09-18T15:51:45Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c1ca4cb5662a80110fd2020634b4deea7717661",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1300,1304 @@                    y = np.array([123456789e199], dtype=np.float64)\n                    if IS_PYPY:\n                        y.resize((0, n),refcheck=False)\n                    else:\n                        y.resize((0, n))"
  },
  {
    "id" : "5120f566-ea34-4b3b-9396-624d7aa38e1f",
    "prId" : 8083,
    "prUrl" : "https://github.com/numpy/numpy/pull/8083#pullrequestreview-2450315",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d485a224-8542-4e97-9df8-d1cba08fe7cf",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "A bit confused what warning this is, but OK.\n",
        "createdAt" : "2016-09-29T16:03:08Z",
        "updatedAt" : "2016-11-01T01:58:43Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "58057a29-e497-4dc5-8501-8d6f275afb42",
        "parentId" : "d485a224-8542-4e97-9df8-d1cba08fe7cf",
        "authorId" : "59b92944-d854-4f9d-a312-414cbb6b19d3",
        "body" : "I could not add a warning context here as you commented last time. So the idea was to skip this test under -3 switch.\n",
        "createdAt" : "2016-10-02T15:16:31Z",
        "updatedAt" : "2016-11-01T01:58:43Z",
        "lastEditedBy" : "59b92944-d854-4f9d-a312-414cbb6b19d3",
        "tags" : [
        ]
      }
    ],
    "commit" : "f685f1a83de2d8fc1e0f48167a204248b6656a63",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2121,2125 @@            elif not sys.py3kwarning:\n                # With -3 switch in python 2, DeprecationWarning is raised\n                # which we are not interested in\n                f(lhs, rhs)\n        assert_(not op.eq(lhs, rhs))"
  },
  {
    "id" : "05075457-d16f-42d6-9911-99a60c942a53",
    "prId" : 11385,
    "prUrl" : "https://github.com/numpy/numpy/pull/11385#pullrequestreview-130456099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20b63f93-886b-4a76-b6d8-35eab106441b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Could add `0` and `-1` here too - surprisingly they're supported",
        "createdAt" : "2018-06-20T07:16:58Z",
        "updatedAt" : "2018-06-20T15:46:48Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "898dc1ba-9d0a-4038-9523-195afabfa589",
        "parentId" : "20b63f93-886b-4a76-b6d8-35eab106441b",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "I think there's a good case that supporting 0 and -1 on 0d arrays/scalars is a bug.",
        "createdAt" : "2018-06-20T15:28:17Z",
        "updatedAt" : "2018-06-20T15:46:48Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "875acd15-9c8e-45e4-87da-d5ea2e13bbda",
        "parentId" : "20b63f93-886b-4a76-b6d8-35eab106441b",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "True, but most likely the issue should be deprecated separately.",
        "createdAt" : "2018-06-20T15:33:15Z",
        "updatedAt" : "2018-06-20T15:46:48Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "f9c9d3e1-fc21-4317-83c2-4a144927d1d5",
        "parentId" : "20b63f93-886b-4a76-b6d8-35eab106441b",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "But, still could add it here really. Just also add a comment that we may want to deprecate it (just so that someone who does it is not scared away by a test).",
        "createdAt" : "2018-06-20T15:34:01Z",
        "updatedAt" : "2018-06-20T15:46:48Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a166a20989a28a4336b233c2ebfd2527f669cac",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +2388,2392 @@            sctype = np.dtype(ch).type\n            scvalue = sctype(values.get(ch, 3))\n            for axis in [None, ()]:\n                squeezed = scvalue.squeeze(axis=axis)\n                assert_equal(squeezed, scvalue)"
  },
  {
    "id" : "b3d7da94-414c-498b-8a94-709b57497613",
    "prId" : 12133,
    "prUrl" : "https://github.com/numpy/numpy/pull/12133#pullrequestreview-163467695",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f00e1d5-ef11-4b84-831c-262402156bd3",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I think most of these types of tests should be changed to use `BytesIO` as a context manager, but that is out of scope for this PR.",
        "createdAt" : "2018-10-10T17:14:30Z",
        "updatedAt" : "2018-10-10T17:14:30Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7372f8dcc6af4446e502c0daec3199dace27e863",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +41,45 @@        a = np.transpose(np.array([[2, 9], [7, 0], [3, 8]]))\n        for proto in range(2, pickle.HIGHEST_PROTOCOL + 1):\n            f = BytesIO()\n            pickle.dump(a, f, protocol=proto)\n            f.seek(0)"
  },
  {
    "id" : "cc03e7a2-7693-4dcb-9130-ec96f5dd70f1",
    "prId" : 13663,
    "prUrl" : "https://github.com/numpy/numpy/pull/13663#pullrequestreview-244312525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a0d7d0d-aa8c-45f0-bae1-a24bf62c2204",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can we add a test here for the shape?",
        "createdAt" : "2019-05-31T01:32:54Z",
        "updatedAt" : "2019-05-31T01:32:54Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2c561312-1530-49f1-b6d3-e15c4dc96662",
        "parentId" : "2a0d7d0d-aa8c-45f0-bae1-a24bf62c2204",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "xref #13671",
        "createdAt" : "2019-05-31T13:39:53Z",
        "updatedAt" : "2019-05-31T13:39:53Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "114068142491e5ef457da61867c92513e71d1458",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +2474,2478 @@        t = T()\n        #gh-13659, would raise in broadcasting [x=t for x in result]\n        np.array([t])"
  }
]