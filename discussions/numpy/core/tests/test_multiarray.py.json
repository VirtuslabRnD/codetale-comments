[
  {
    "id" : "1e00b5f4-fc57-4095-9a0f-9e963ea37204",
    "prId" : 3107,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa458d4c-ced9-4d34-a0cb-562c608b4b10",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "It would really help readability if there were blank lines between the various sub-tests.\n",
        "createdAt" : "2013-03-13T04:27:09Z",
        "updatedAt" : "2013-08-17T16:30:32Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ea9399fb-3068-4f1d-9e28-5e214802b83d",
        "parentId" : "aa458d4c-ced9-4d34-a0cb-562c608b4b10",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "And so on down the line.\n",
        "createdAt" : "2013-03-13T04:27:43Z",
        "updatedAt" : "2013-08-17T16:30:32Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4674b9ee89a641f3b9da2296079a6ed2167e1d8c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +901,905 @@        b = a.searchsorted([0, 1, 2], 'l')\n        assert_equal(b, [0, 0, 0])\n        b = a.searchsorted([0, 1, 2], 'r')\n        assert_equal(b, [0, 0, 0])\n        a = np.ones(1)"
  },
  {
    "id" : "39d82867-61a7-4652-b3f0-15f7c97640e3",
    "prId" : 3415,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc4c58da-2fc5-4be9-9ced-e3be8444466c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@seberg With your work, the mutual exclusion of `f_contiguous` and `c_contiguous` looks wrong here. Thoughts?\n",
        "createdAt" : "2013-06-09T00:21:37Z",
        "updatedAt" : "2013-06-09T00:21:37Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "9b76d04f-f3e5-422c-9703-8945a6749be7",
        "parentId" : "cc4c58da-2fc5-4be9-9ced-e3be8444466c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Doesn't matter here really, the arrays being tested cannot be both.\n",
        "createdAt" : "2013-06-09T10:32:21Z",
        "updatedAt" : "2013-06-09T10:32:21Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "c1506b7d-7db1-426b-bc61-b0b8f4d43692",
        "parentId" : "cc4c58da-2fc5-4be9-9ced-e3be8444466c",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Doh! Thanks.\n",
        "createdAt" : "2013-06-09T14:35:41Z",
        "updatedAt" : "2013-06-09T14:35:41Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "18e7f40e97cae555f0446da99180525a8d259d81",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +647,651 @@            assert_(arr.flags.fortran)\n            assert_(arr.flags.f_contiguous)\n            assert_(not arr.flags.c_contiguous)\n\n        def assert_c(arr):"
  },
  {
    "id" : "b116fccc-fc39-4567-9d65-dd3e714a368c",
    "prId" : 3790,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6bbe978-5625-4abc-a8e3-7a016e1fe438",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Do we still need `d.sum()` and `count_non_zero(d)` ?\n",
        "createdAt" : "2013-09-23T23:02:43Z",
        "updatedAt" : "2013-09-23T23:02:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e5038a89-f297-4b11-96c7-bbd773596bc8",
        "parentId" : "e6bbe978-5625-4abc-a8e3-7a016e1fe438",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "not really, but in this case its fast so I though why not.\n",
        "createdAt" : "2013-09-23T23:03:46Z",
        "updatedAt" : "2013-09-23T23:03:46Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "79d3a94f41b7e3c661eceed2f26ba6cce362ba4f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +449,453 @@            assert_equal(np.count_nonzero(d), 0)\n            assert_equal(d.sum(), 0)\n            assert_(not d.any())\n\n            d = np.zeros(2, dtype='4i4')"
  },
  {
    "id" : "ce80e1b6-f312-41d3-ad49-6c0d0c779e58",
    "prId" : 4178,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d802424e-61b7-4db3-b0ed-b1dae5563198",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Need to break these lines at some point.\n",
        "createdAt" : "2014-01-09T03:42:01Z",
        "updatedAt" : "2014-01-09T03:42:01Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "73f376209737f131b7361fe0be925cca0dae78b5",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +3371,3375 @@        sz = sum([dtype(b).itemsize for a, b in dt])\n        if dtype('l').itemsize == 4:\n            assert_equal(y.format, 'T{b:a:=h:b:i:c:l:d:q:dx:B:e:@H:f:=I:g:L:h:Q:hx:f:i:d:j:^g:k:=Zf:ix:Zd:jx:^Zg:kx:4s:l:=4w:m:3x:n:?:o:@e:p:}')\n        else:\n            assert_equal(y.format, 'T{b:a:=h:b:i:c:q:d:q:dx:B:e:@H:f:=I:g:Q:h:Q:hx:f:i:d:j:^g:k:=Zf:ix:Zd:jx:^Zg:kx:4s:l:=4w:m:3x:n:?:o:@e:p:}')"
  },
  {
    "id" : "2add5a6f-fc14-45a7-9304-26e988df371c",
    "prId" : 5636,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9110d433-708f-47d5-83cc-0b796d066359",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "assert_warns is probably a bit nicer (no need for the local collect warnings), but we can put that off to another time.\n",
        "createdAt" : "2015-06-13T10:29:07Z",
        "updatedAt" : "2015-06-17T17:51:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "2ed3fe2a-91fb-4dc0-a9e4-40d35c21de4d",
        "parentId" : "9110d433-708f-47d5-83cc-0b796d066359",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I'll leave it for another time. I was just fixing >80 char lines that were bugging me here.\n",
        "createdAt" : "2015-06-13T17:09:15Z",
        "updatedAt" : "2015-06-17T17:51:55Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c1a13dea6a7e189675977ad65ea230ce4816061",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +3586,3590 @@        # All the different functions raise a warning, but not an error, and\n        # 'a' is not modified:\n        assert_equal(collect_warnings(a[['f1', 'f2']].__setitem__, 0, (10, 20)),\n                     [FutureWarning])\n        assert_equal(a, b)"
  },
  {
    "id" : "3fc34e78-9df1-4435-9220-490afee80fb3",
    "prId" : 5636,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17baa02d-5304-425e-b597-a180e637b07e",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Wow, but it makes sense, why not have no fields if you have a size.... Spaces after \":\" though ;).\n",
        "createdAt" : "2015-06-13T10:29:14Z",
        "updatedAt" : "2015-06-17T17:51:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c1a13dea6a7e189675977ad65ea230ce4816061",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +3617,3621 @@\n    def test_empty_structure_creation(self):\n        # make sure these do not raise errors (gh-5631)\n        array([()], dtype={'names': [], 'formats': [],\n                           'offsets': [], 'itemsize': 12})"
  },
  {
    "id" : "5b3f661a-900e-4e77-9d40-b6a5b0dc757b",
    "prId" : 5704,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9949e83-4309-4ff7-935e-8690f61b30df",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I like the `msg =` form better, but this is OK. \n",
        "createdAt" : "2015-03-21T18:53:01Z",
        "updatedAt" : "2015-03-21T18:53:01Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd30b50a5125da8fa037220e0161ce1ce3ddec0c",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +1216,1220 @@            assert_equal(np.argsort(a, axis=axis),\n                         np.zeros_like(a, dtype=np.intp),\n                         'test empty array argsort with axis={}'.format(axis))\n        assert_equal(np.argsort(a, axis=None),\n                     np.zeros_like(a.ravel(), dtype=np.intp),"
  },
  {
    "id" : "24d03e7c-5a75-42d3-b05b-fdfc572e477e",
    "prId" : 6242,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc6711d8-6dbe-470e-a0ec-ae940ea3b178",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "Could you add the unicode test you showed in the comments here, for Python 3 versions only?\n",
        "createdAt" : "2015-08-25T13:52:01Z",
        "updatedAt" : "2015-08-25T14:45:23Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbca4cb6ecbec22fba097ad0d6dfb1e1f39f8ef6",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +3563,3567 @@\n    if sys.version_info[0] >= 3:\n        def test_bytes_fields(self):\n            # Bytes are not allowed in field names and not recognized in titles\n            # on Py3"
  },
  {
    "id" : "0702a5f6-2cd5-46d7-b8b4-9ca1b4da253b",
    "prId" : 6988,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed3e51e4-2b0a-4726-af32-db2442685ed0",
        "parentId" : null,
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "So, I managed to get this built so I can debug with `python3-dbg` interactively and discovered this line will cause the strange exception. However, the line before does not cause the exception.\n",
        "createdAt" : "2016-01-10T20:25:48Z",
        "updatedAt" : "2016-01-12T00:42:41Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "bab118da49f051aecf35296bb9d8a00edd5b4198",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +2047,2051 @@\n        assert_raises(ValueError, np.dot, c, A)\n        assert_raises(TypeError, np.dot, A, c)\n\n    def test_diagonal(self):"
  },
  {
    "id" : "5fae6cb6-815d-422b-88d3-e7160c3df6dd",
    "prId" : 6988,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58e631dd-5901-4c43-b147-10a277e5c8ee",
        "parentId" : null,
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "Same story as above. This line will cause the exception, as well.\n",
        "createdAt" : "2016-01-10T20:25:52Z",
        "updatedAt" : "2016-01-12T00:42:41Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      },
      {
        "id" : "7558edbf-90d4-4805-9b0f-662fec0571dc",
        "parentId" : "58e631dd-5901-4c43-b147-10a277e5c8ee",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Just to add that this error occurs with python 3.5 debug also.\n",
        "createdAt" : "2016-01-10T20:44:13Z",
        "updatedAt" : "2016-01-12T00:42:41Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bab118da49f051aecf35296bb9d8a00edd5b4198",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +4838,4842 @@\n        assert_raises(TypeError, np.inner, c, A)\n        assert_raises(TypeError, np.inner, A, c)\n\n    def test_inner_scalar_and_vector(self):"
  },
  {
    "id" : "494a402b-7afc-4568-86a5-1b68d823e8af",
    "prId" : 7912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b0f2fa1-4b8a-4c3d-934b-92b6515e1a52",
        "parentId" : null,
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Another way to do this in Nose is probably to `raise SkipTest` in `def setup(self): ...`\n",
        "createdAt" : "2016-08-15T13:01:07Z",
        "updatedAt" : "2016-08-15T16:47:04Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "53c2ab86-1f51-4e33-8138-00323c336091",
        "parentId" : "5b0f2fa1-4b8a-4c3d-934b-92b6515e1a52",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Interesting suggestion. Probably not as obvious in reading the code, but otherwise cleaner, at least until we drop the now abandoned Nose.\n",
        "createdAt" : "2016-08-15T15:55:04Z",
        "updatedAt" : "2016-08-15T16:47:04Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4d737696-30c2-48c7-bdd9-df1c383dd629",
        "parentId" : "5b0f2fa1-4b8a-4c3d-934b-92b6515e1a52",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Using dec.skip() in a setup() class method did not skip the class. It seems to skip one or more tests but not all. I could not find documentation or examples of how to do this in the 10 minutes I tried.\n",
        "createdAt" : "2016-08-15T16:14:37Z",
        "updatedAt" : "2016-08-15T16:47:04Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "76eff9ca4648e96ba1f560e83f40383f68805493",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +6361,6365 @@\n\nif not IS_PYPY:\n    # sys.getsizeof() is not valid on PyPy\n    class TestSizeOf(TestCase):"
  },
  {
    "id" : "b1be5530-6081-42ea-a790-6bb04bf05366",
    "prId" : 8050,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bf9e070-ec6d-40c6-a9cf-6a43111d6be2",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Out of curiousity, I noticed the import also defines `HAS_REFCOUNT`, is this reflected in the C-api so that this could be not PyPy specific but in principle good for all non-refcounted pythons?\n",
        "createdAt" : "2016-09-12T20:56:17Z",
        "updatedAt" : "2016-09-17T19:54:09Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "93be1d2f-116b-4b8b-b129-50ba59b138e3",
        "parentId" : "4bf9e070-ec6d-40c6-a9cf-6a43111d6be2",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "HAS_REFCOUNT reflects sys.getrefcount() where this pull request deals with pyobj->ob_refcnt not being incremented at the same places in CPython and PyPy. I'm not sure the two concepts are equivalent, I could imagine a garbage collection strategy that cannot count overall refcounts but can track single-item assignments, or visa-versa\n",
        "createdAt" : "2016-09-13T15:51:04Z",
        "updatedAt" : "2016-09-17T19:54:09Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c1ca4cb5662a80110fd2020634b4deea7717661",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +4082,4086 @@    def test_basic(self):\n        x = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n        if IS_PYPY:\n            x.resize((5, 5), refcheck=False)\n        else:"
  },
  {
    "id" : "fcd62917-1c62-48b8-add5-f0164cdb8f23",
    "prId" : 8222,
    "prUrl" : "https://github.com/numpy/numpy/pull/8222#pullrequestreview-6355684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21fc6804-69e9-48eb-8023-2d92044a17d2",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Should check that using explicit `dtype` or `out` gives the correct type unless that is checked elsewhere. In fact, it should be checked elsewhere, but may not be.\n",
        "createdAt" : "2016-10-29T23:24:11Z",
        "updatedAt" : "2016-11-04T01:07:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "af818b08edc30d04cb56de0429a35ca82458e326",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +4534,4538 @@        # This fail if the sum inside mean is done in float16 instead\n        # of float32.\n        assert _mean(np.ones(100000, dtype='float16')) == 1\n\n    def test_var_values(self):"
  },
  {
    "id" : "095ae05b-0138-469b-bf31-45a25abbeaca",
    "prId" : 8524,
    "prUrl" : "https://github.com/numpy/numpy/pull/8524#pullrequestreview-18219642",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94e1fff8-5892-4c12-893d-aee13ce46414",
        "parentId" : null,
        "authorId" : "e55414fd-c999-4a2b-83b3-6dea56ea8ee4",
        "body" : "To have a test that triggers the bug fixed in this PR, you may want to add `[np.float16(1.)]` to this tuple (i.e., a float16 wrapped in a list). The others don't run into the `is_float16_result` and `not hasattr(a, \"dtype\")` case.",
        "createdAt" : "2017-01-24T15:36:45Z",
        "updatedAt" : "2017-01-24T15:39:58Z",
        "lastEditedBy" : "e55414fd-c999-4a2b-83b3-6dea56ea8ee4",
        "tags" : [
        ]
      },
      {
        "id" : "ade56c0f-4b11-412f-9e31-6279c700e2ed",
        "parentId" : "94e1fff8-5892-4c12-893d-aee13ce46414",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "all tests are scalars wrapped into a list, though just scalars might be useful too",
        "createdAt" : "2017-01-24T15:49:35Z",
        "updatedAt" : "2017-01-24T15:49:35Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "56decc43-86af-4ea8-9f2a-7be7f2095b1b",
        "parentId" : "94e1fff8-5892-4c12-893d-aee13ce46414",
        "authorId" : "e55414fd-c999-4a2b-83b3-6dea56ea8ee4",
        "body" : "> all tests are scalars wrapped into a list\r\n\r\nOoops, right. Great then! Good to merge from my perspective. Thank you for taking this!",
        "createdAt" : "2017-01-24T17:35:44Z",
        "updatedAt" : "2017-01-24T17:35:44Z",
        "lastEditedBy" : "e55414fd-c999-4a2b-83b3-6dea56ea8ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ae84854d9c48a751e57c5cd0e9636678a6d2359",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4382,4386 @@\n    def test_python_type(self):\n        for x in (np.float16(1.), 1, 1., 1+0j):\n            assert_equal(np.mean([x]), 1.)\n            assert_equal(np.std([x]), 0.)"
  },
  {
    "id" : "05b3d1e2-a230-4b1a-8bc3-19f5fff2fe85",
    "prId" : 8898,
    "prUrl" : "https://github.com/numpy/numpy/pull/8898#pullrequestreview-31929577",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1561b588-2af6-4fc0-aee5-60a28c7afebd",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Debatable whether testing implementation details like this (and the one above) makes any sense",
        "createdAt" : "2017-04-07T21:45:50Z",
        "updatedAt" : "2017-04-07T22:09:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "8f6c6525-6b0b-4ccd-b989-f9fe9a0353e5",
        "parentId" : "1561b588-2af6-4fc0-aee5-60a28c7afebd",
        "authorId" : "19c1a92e-ecda-44f8-a318-d36d0435dbbe",
        "body" : "If you feel strongly, I'll remove it. I think its a good check to keep. For instance, if someone decides to add an \"import ctypes\" statement into one of these methods in the future, this assertion will catch that. Otherwise, the test will continue to pass.",
        "createdAt" : "2017-04-07T21:54:14Z",
        "updatedAt" : "2017-04-07T22:09:52Z",
        "lastEditedBy" : "19c1a92e-ecda-44f8-a318-d36d0435dbbe",
        "tags" : [
        ]
      },
      {
        "id" : "b3853a89-77eb-49a6-9156-92ad40d52638",
        "parentId" : "1561b588-2af6-4fc0-aee5-60a28c7afebd",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yeah, my concernt is that that's somewhat artificial, and doesn't really catch us doing `import ctypes` anywhere else - these tests wouldn't catch the bug that caused you to patch this in the first place, for instance.\r\n\r\nI don't feel strongly about it, but would appreciate input from someone else on a better way to test this.",
        "createdAt" : "2017-04-07T22:04:40Z",
        "updatedAt" : "2017-04-07T22:09:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d63eb4ea-bd2e-464b-8020-616e15f16590",
        "parentId" : "1561b588-2af6-4fc0-aee5-60a28c7afebd",
        "authorId" : "19c1a92e-ecda-44f8-a318-d36d0435dbbe",
        "body" : "Fair enough. Will wait for additional input.",
        "createdAt" : "2017-04-07T22:08:28Z",
        "updatedAt" : "2017-04-07T22:09:52Z",
        "lastEditedBy" : "19c1a92e-ecda-44f8-a318-d36d0435dbbe",
        "tags" : [
        ]
      },
      {
        "id" : "773e8325-ba29-40e2-bb25-7752abd96745",
        "parentId" : "1561b588-2af6-4fc0-aee5-60a28c7afebd",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm almost tempted to spin off a new python interpreter without ctypes to run the test, to ensure it can't break anything else\r\n\r\nYou might also be able to get your `sys.modules` hackery to work if you try to put everything back together again, but also a little risky.",
        "createdAt" : "2017-04-07T22:19:27Z",
        "updatedAt" : "2017-04-07T22:19:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "7f47eeb9-c5e0-4fe6-a8a2-9444070da296",
        "parentId" : "1561b588-2af6-4fc0-aee5-60a28c7afebd",
        "authorId" : "19c1a92e-ecda-44f8-a318-d36d0435dbbe",
        "body" : "Hey Eric,\r\n\r\nI tried again with the sys.modules hackery, and trying to put things back together again with the try/finally block. Unfortunately, other tests continue to fail. I guess this is because tests are run in parallel. With the current setup (setting ctypes = None), we will have similar cross-test side effects, but I guess we are getting lucky in that it isn't causing any errant failures.\r\n\r\nBy \"spin off a new python interpreter\", are you suggesting to execute the test with python's subprocess?\r\n\r\nEg (?):\r\ndef some_test(self):\r\n    self.assertEqual(0, subprocess.call(sys.executable, \"-c\", test_code)",
        "createdAt" : "2017-04-10T18:54:02Z",
        "updatedAt" : "2017-04-10T18:54:02Z",
        "lastEditedBy" : "19c1a92e-ecda-44f8-a318-d36d0435dbbe",
        "tags" : [
        ]
      },
      {
        "id" : "72c20286-16a2-4e39-b62f-a8bbd94f7304",
        "parentId" : "1561b588-2af6-4fc0-aee5-60a28c7afebd",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> Suggesting to execute the test with python's subprocess?\r\n\r\nYes, that is what I mean. I'm not actually sure that's a good idea though, and I don't think you should risk wasting time trying it until someone else weighs in.",
        "createdAt" : "2017-04-10T18:56:04Z",
        "updatedAt" : "2017-04-10T18:56:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "2652a1eab5c6288307ed94f2d0a0a7939a61b6cc",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +6743,6747 @@\n            self.assertIsInstance(\n                test_arr.ctypes._ctypes, _internal._missing_ctypes)\n            assert_equal(tuple(test_arr.ctypes.shape), (2, 3))\n        finally:"
  },
  {
    "id" : "273fe001-9845-40f1-b399-42c5c91e04ba",
    "prId" : 8964,
    "prUrl" : "https://github.com/numpy/numpy/pull/8964#pullrequestreview-33742447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90ebfbba-21ab-4761-865d-bf726aad515d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Isn't the real bug here that data is being read from an empty array?",
        "createdAt" : "2017-04-20T11:22:24Z",
        "updatedAt" : "2017-04-20T11:37:29Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b950905b-2146-4e61-ad6b-7b8f1c85092d",
        "parentId" : "90ebfbba-21ab-4761-865d-bf726aad515d",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "arguably yes, but doing so helps finding these bugs",
        "createdAt" : "2017-04-20T11:25:13Z",
        "updatedAt" : "2017-04-20T11:37:29Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "a16f16b94b61fc35b887d9e9f2e12c817c2819b6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +6622,6626 @@    def test_empty_result(self):\n        # pass empty where result through an assignment which reads the data of\n        # empty arrays, error detectable with valgrind, see gh-8922\n        x = np.zeros((1, 1))\n        ibad = np.vstack(np.where(x == 99.))"
  },
  {
    "id" : "828f433c-5827-4c59-a422-b02a621079b2",
    "prId" : 8977,
    "prUrl" : "https://github.com/numpy/numpy/pull/8977#pullrequestreview-66352461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29501e69-7460-47e5-876f-1ece382f9d2d",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Is there an advantage to making this a staticmethod?",
        "createdAt" : "2017-10-01T20:41:44Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b56eb290-2ff8-414c-b7fc-3497d00fba5d",
        "parentId" : "29501e69-7460-47e5-876f-1ece382f9d2d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "To document that it doesn't use `self`?",
        "createdAt" : "2017-10-01T20:44:06Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1c9c235b-5e57-413b-a603-b73f4103a14e",
        "parentId" : "29501e69-7460-47e5-876f-1ece382f9d2d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Well, it does that, don't know if it is worth it as the normal impulse would be to use it only if needed. Then again, my Python experience started when Python 21 was the newest and greatest, so programming conventions may have changed. In fact, it is the latter possibility that interests me. Do you know if it is the case that this sort of programming style is being taught or encouraged?",
        "createdAt" : "2017-10-01T21:16:54Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "11592a1c-eb52-4eac-8591-f3931b73f69b",
        "parentId" : "29501e69-7460-47e5-876f-1ece382f9d2d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`TestCase` objects (or the inferred use of them by pytest) are pretty weird anyway, because an new one is instantiated for each method call by the test runner. I can change this if you feel strongly.",
        "createdAt" : "2017-10-01T23:00:34Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "084e00a4-619b-4167-b828-09f4c0fc2edf",
        "parentId" : "29501e69-7460-47e5-876f-1ece382f9d2d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I don't feel strongly about it. On occasion I find your coding style a bit unusual, but not wrong. Just trying to figure out if it is a personal style, or the future of python coding ;)",
        "createdAt" : "2017-10-01T23:12:12Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "bbca620f-0dd1-48ab-b8f0-68587077de7d",
        "parentId" : "29501e69-7460-47e5-876f-1ece382f9d2d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Could easily be personal style. I guess it probably comes from my java background, but even there it might just have been personal style.",
        "createdAt" : "2017-10-02T00:48:02Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6d2cd3870ba832973f85057d8d4735c99f18baa",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1206,1210 @@\nclass TestZeroSizeFlexible(object):\n    @staticmethod\n    def _zeros(shape, dtype=str):\n        dtype = np.dtype(dtype)"
  },
  {
    "id" : "38167cd3-cca5-4ea6-b596-14755345d506",
    "prId" : 9112,
    "prUrl" : "https://github.com/numpy/numpy/pull/9112#pullrequestreview-37956290",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f660c91b-a1bc-4e53-8146-4f8a32afa552",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can we add another test for what happens if we return `NotImplemented` here? I feel like in that case, we should just not take the fast path, rather than throw `TypeError`",
        "createdAt" : "2017-05-12T21:53:54Z",
        "updatedAt" : "2017-05-14T20:30:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ffdbb4e7-f331-41a2-b3e8-8196f745d4cb",
        "parentId" : "f660c91b-a1bc-4e53-8146-4f8a32afa552",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "How would we detect that? We could need to actually call the `np.power` ufunc, which the code currently does not do.",
        "createdAt" : "2017-05-12T22:29:02Z",
        "updatedAt" : "2017-05-14T20:30:55Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1df000d940d2367c6e86f754be5201c2051ba99",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +3145,3149 @@            def __array_ufunc__(self, ufunc, method, *inputs, **kw):\n                if ufunc is not np.power:\n                    raise NotImplementedError\n                return \"POWER!\"\n        # explicit cast to float, to ensure the fast power path is taken."
  },
  {
    "id" : "2bf905a9-99fd-495a-9388-ead1e9170ecb",
    "prId" : 9217,
    "prUrl" : "https://github.com/numpy/numpy/pull/9217#pullrequestreview-41921425",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86b5472d-dd9f-4296-bb89-2386156e369a",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you add a test in the other direction too, from `()` to `(1,)`?",
        "createdAt" : "2017-06-03T14:47:37Z",
        "updatedAt" : "2017-06-03T15:06:09Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "c02f1ed4d649e65eb8e3caf2bcf0a1e2f46a16fa",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +4277,4281 @@            x.resize(())\n            assert_equal(x.shape, ())\n            assert_equal(x.size, 1)\n            x = np.empty(())\n            x.resize((1,))"
  },
  {
    "id" : "867f559d-93d2-4e2d-90ca-fc5c88d0d36e",
    "prId" : 9856,
    "prUrl" : "https://github.com/numpy/numpy/pull/9856#pullrequestreview-69379864",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "919a1e33-e3c7-47a7-aaa8-33c509730c15",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Might want to document that this only tests scalars and scalar arrays.",
        "createdAt" : "2017-10-14T01:39:17Z",
        "updatedAt" : "2017-10-14T04:13:23Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "931758e2e25e9a2628c0dc953744fa4db9ca657a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1204,1208 @@            assert_equal(np.count_nonzero(a), builtins.sum(a.tolist()))\n\n    def _test_cast_from_flexible(self, dtype):\n        # empty string -> false\n        for n in range(3):"
  },
  {
    "id" : "be5941d2-1132-48a3-957a-52aa4dc14ff4",
    "prId" : 9883,
    "prUrl" : "https://github.com/numpy/numpy/pull/9883#pullrequestreview-70286388",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5314e7e5-4b61-495c-b6aa-c69428f00a8d",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Is `assert_equal` the best way to compare strings? Maybe just `assert_(str1 == str2)` would be a bit cleaner.",
        "createdAt" : "2017-10-18T16:38:42Z",
        "updatedAt" : "2017-10-18T19:39:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "52810b7c-c1ee-4e5a-b2bc-ca25f9e19d5e",
        "parentId" : "5314e7e5-4b61-495c-b6aa-c69428f00a8d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yes, because then it shows the two values if they differ.",
        "createdAt" : "2017-10-18T16:40:23Z",
        "updatedAt" : "2017-10-18T19:39:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "07582386-7963-4a7a-a280-3f3bc9595aff",
        "parentId" : "5314e7e5-4b61-495c-b6aa-c69428f00a8d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK.",
        "createdAt" : "2017-10-18T16:53:06Z",
        "updatedAt" : "2017-10-18T19:39:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2152677b-92bd-4f45-98aa-493fd36057d1",
        "parentId" : "5314e7e5-4b61-495c-b6aa-c69428f00a8d",
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "In pytest you can just `assert str1 == str2` and you will get values if there is a failure. \r\n\r\n```\r\n\r\ndef test_failure():\r\n    a = 'apple'\r\n    b = 'banana'\r\n    assert a == b\r\n```\r\n\r\nOutput is \r\n\r\n```\r\n================================== FAILURES ===================================\r\n________________________________ test_failure _________________________________\r\n\r\n    def test_failure():\r\n        a = 'apple'\r\n        b = 'banana'\r\n>       assert a == b\r\nE       AssertionError: assert 'apple' == 'banana'\r\nE         - apple\r\nE         + banana\r\n\r\ntest_util.py:20: AssertionError\r\n========================== 1 failed in 0.24 seconds ===========================\r\n```",
        "createdAt" : "2017-10-18T16:57:29Z",
        "updatedAt" : "2017-10-18T19:39:02Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "cd3f2665-88fa-4524-8043-3b6d58243b05",
        "parentId" : "5314e7e5-4b61-495c-b6aa-c69428f00a8d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "For consistency, we should probably use the same form we use in most of the test suite, which gives:\r\n\r\n```\r\n>>> np.testing.assert_equal('a', 'b')\r\nAssertionError: \r\nItems are not equal:\r\n ACTUAL: 'a'\r\n DESIRED: 'b'\r\n```\r\n\r\nAFAIK, the switch to `pytest` was recent, and we were previously using `nose`",
        "createdAt" : "2017-10-18T17:00:19Z",
        "updatedAt" : "2017-10-18T19:39:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "16c97b21-8dfd-4535-9bba-ce01ed3ff892",
        "parentId" : "5314e7e5-4b61-495c-b6aa-c69428f00a8d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "We are still using nose, the pytest conversion is still in progress and I don't think I will get back to it until 1.15.",
        "createdAt" : "2017-10-18T17:06:24Z",
        "updatedAt" : "2017-10-18T19:39:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "86a7ac621b1b78c66b4be1c959a3b5c74511b124",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +7018,7022 @@    def test_0d(self):\n        a = np.array(np.pi)\n        assert_equal('{:0.3g}'.format(a), '3.14')\n        assert_equal('{:0.3g}'.format(a[()]), '3.14')\n"
  },
  {
    "id" : "07790733-ad33-4d51-8c87-35f729ac9192",
    "prId" : 9883,
    "prUrl" : "https://github.com/numpy/numpy/pull/9883#pullrequestreview-82357958",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fbe4311-396e-45c3-b9d6-f805d11b56ba",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I suppose we should silence warnings in `ret_and_exc`, or return a third tuple item which is the warning",
        "createdAt" : "2017-12-09T23:46:36Z",
        "updatedAt" : "2017-12-09T23:46:36Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3ad04b42-efd3-4c33-8379-905e605d8ed8",
        "parentId" : "9fbe4311-396e-45c3-b9d6-f805d11b56ba",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Maybe just figure out what the result should be and use that? Eventually `object.__format__` is going to fail with non-empty argument.",
        "createdAt" : "2017-12-10T00:13:46Z",
        "updatedAt" : "2017-12-10T00:13:46Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "f6c20156-1ac8-43af-b19f-5e1021e96793",
        "parentId" : "9fbe4311-396e-45c3-b9d6-f805d11b56ba",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Right, and I think that `ndarray.__format__` should start failing at the same time. Maybe we should just make `ndarray.__format__` fail with an empty argument right now...",
        "createdAt" : "2017-12-10T00:37:27Z",
        "updatedAt" : "2017-12-10T00:37:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "bf99f95b-c077-41a1-b331-853ef8fc75c2",
        "parentId" : "9fbe4311-396e-45c3-b9d6-f805d11b56ba",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like it went away in Python 3.4.\r\n```\r\n* :meth:`object.__format__` no longer accepts non-empty format strings, it now\r\n  raises a :exc:`TypeError` instead.  Using a non-empty string has been\r\n  deprecated since Python 3.2.  This change has been made to prevent a\r\n  situation where previously working (but incorrect) code would start failing\r\n  if an object gained a __format__ method, which means that your code may now\r\n  raise a :exc:`TypeError` if you are using an ``'s'`` format code with objects\r\n  that do not have a __format__ method that handles it.  See :issue:`7994` for\r\n  background.\r\n```\r\nShould ours work if an empty string is passed?",
        "createdAt" : "2017-12-10T01:33:02Z",
        "updatedAt" : "2017-12-10T01:33:03Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "36c15343-8f0a-423d-acf1-3576c36e06ff",
        "parentId" : "9fbe4311-396e-45c3-b9d6-f805d11b56ba",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I fixed this by making the test Python version dependent.",
        "createdAt" : "2017-12-10T18:20:13Z",
        "updatedAt" : "2017-12-10T18:20:13Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "86a7ac621b1b78c66b4be1c959a3b5c74511b124",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +7040,7044 @@        # that the behaviour hasn't changed\n        assert_equal(\n            ret_and_exc(object.__format__, a, '30'),\n            ret_and_exc('{:30}'.format, a)\n        )"
  },
  {
    "id" : "f3720ad0-8df1-460a-baa5-5e5fa905e0cd",
    "prId" : 9978,
    "prUrl" : "https://github.com/numpy/numpy/pull/9978#pullrequestreview-74810580",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7439d03f-8da2-41f4-8920-d86eb02e70d7",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you add another test for `S10` too?\r\n\r\nIt would be good to record what happens when the float str is too long. I'm not sure whether letting the string truncate is OK, or if it should round.",
        "createdAt" : "2017-11-07T03:49:18Z",
        "updatedAt" : "2017-11-07T03:49:18Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ea5e23d9-1bfd-4c68-8fa7-f2d74530f18b",
        "parentId" : "7439d03f-8da2-41f4-8920-d86eb02e70d7",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Also might be tidier to use a 0d array here and `.astype`, but up to you",
        "createdAt" : "2017-11-07T03:50:59Z",
        "updatedAt" : "2017-11-07T03:50:59Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a3530a9b-a24b-4164-bfcf-0205953bed90",
        "parentId" : "7439d03f-8da2-41f4-8920-d86eb02e70d7",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "For all types (not just floats) there is a fairly well established precedent that strings get simply truncated if the dtype is too short, so I don't think we should round. Integers don't round.\r\n\r\nAlso, I'm a bit hesitant to add a test for `S10` because I didn't touch any string truncation code here, and getting the truncation right seems like a separate issue, to be examined and discussed on its own. This PR's purpose is to test string casting intermediates, not to test the arguably unrelated string truncation.",
        "createdAt" : "2017-11-07T16:13:15Z",
        "updatedAt" : "2017-11-07T16:13:16Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a1a2b42ed64cb76acfad7bd71835b8b3484a3d2",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +458,462 @@        a = np.zeros(1, dtype='S20')\n        a[:] = np.array(['1.12345678901234567890'], dtype='f8')\n        assert_equal(a[0], b\"1.1234567890123457\")\n\n"
  },
  {
    "id" : "6d73e8e1-c8c3-4b1e-8290-89c72cfb6d6a",
    "prId" : 10205,
    "prUrl" : "https://github.com/numpy/numpy/pull/10205#pullrequestreview-82969563",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5105fdff-b772-41f7-ba50-5c9690a228b4",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "It would be more conventional to keep the closing parenthesis on the previous line.",
        "createdAt" : "2017-12-12T20:21:55Z",
        "updatedAt" : "2017-12-12T20:21:55Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c28f1ae597dac17353ef0f3f2d466305cdbc9305",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +7204,7208 @@            ValueError, \"size exceeded\",\n            np.arange, 0, np.inf\n        )\n\n    def test_nan_step(self):"
  },
  {
    "id" : "9189dd6a-c11b-4aa6-b0f6-56751e9d0790",
    "prId" : 10502,
    "prUrl" : "https://github.com/numpy/numpy/pull/10502#pullrequestreview-93737191",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b8ff6b3-3007-41c6-99d6-c9fdd58e2eed",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "These were found by temporarily removing the base classes from `AxisError`. They don't actually represent a compatibility problem, unless someone is doing something bizarre like `type(exc) is ValueError`.",
        "createdAt" : "2018-02-01T07:18:11Z",
        "updatedAt" : "2018-02-04T20:07:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "4ed95735-178a-4a5f-a9c5-62f600f95683",
        "parentId" : "1b8ff6b3-3007-41c6-99d6-c9fdd58e2eed",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Agreed, this looks good to me.",
        "createdAt" : "2018-02-02T19:52:30Z",
        "updatedAt" : "2018-02-04T20:07:04Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "74e8690a2ee1b4b5c5ca4b0c505cbf44298b7fe8",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +2873,2877 @@        assert_raises(np.AxisError, a.swapaxes, 4, 0)\n        assert_raises(np.AxisError, a.swapaxes, 0, -5)\n        assert_raises(np.AxisError, a.swapaxes, 0, 4)\n\n        for i in range(-4, 4):"
  },
  {
    "id" : "9927ff65-494b-455f-b784-addf90be34c6",
    "prId" : 10529,
    "prUrl" : "https://github.com/numpy/numpy/pull/10529#pullrequestreview-94525102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29f060aa-ed56-4ca8-855b-043fc4e76313",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "These would look better on the previous line. Python indentation isn't like C blocks.",
        "createdAt" : "2018-02-06T21:23:44Z",
        "updatedAt" : "2018-02-06T21:23:45Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ca3c2927-1aa1-4c45-b3cd-aff6df2f61d6",
        "parentId" : "29f060aa-ed56-4ca8-855b-043fc4e76313",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Used to writing things like this from javascript - for deeply nested parens, it makes things a lot clearer. Here you're right, it adds little value.",
        "createdAt" : "2018-02-06T22:14:27Z",
        "updatedAt" : "2018-02-06T22:14:28Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2592e092a076bb0c87f5588dbffee4a6844dc08",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +6460,6464 @@            offsets=[4, 0],\n            itemsize=8\n        ))\n\n        # overlapping fields cannot be represented by PEP3118"
  },
  {
    "id" : "e0f8012d-0482-4857-a1cb-cd4476df6c43",
    "prId" : 11159,
    "prUrl" : "https://github.com/numpy/numpy/pull/11159#pullrequestreview-123385999",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63f35913-4590-4a4a-b6db-223c098563d9",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'd prefer either:\r\n* `relies on bpo-10744 being fixed`\r\n* `relies on https://bugs.python.org/issue10744 being fixed`\r\n\r\nAt any rate, we can just refer to the python issue here - the github one is not interesting",
        "createdAt" : "2018-05-25T04:52:45Z",
        "updatedAt" : "2018-05-25T04:54:01Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "8bc99aa3-6b51-46f6-b2d3-b7a3e4c34007",
        "parentId" : "63f35913-4590-4a4a-b6db-223c098563d9",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@eric-wieser The Python issue seems a bit less discoverable and the numpy reference has a fair amount of useful discussion. Given that we will drop 2.7 support at the end of the year, probably not worth spending much time on this. If nothing else, git blame will lead back here. ",
        "createdAt" : "2018-05-25T14:08:20Z",
        "updatedAt" : "2018-05-25T14:08:20Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4813a966d627577f0b2b1e9d106d5fd9c6a3d0d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +6518,6522 @@        self._check_roundtrip(a)\n\n    @pytest.mark.skipif(sys.version_info < (2, 7, 7), reason=\"See gh-11115\")\n    def test_error_too_many_dims(self):\n        def make_ctype(shape, scalar_type):"
  },
  {
    "id" : "a1219d64-07a8-4621-9e9b-7ae8daafd72e",
    "prId" : 11249,
    "prUrl" : "https://github.com/numpy/numpy/pull/11249#pullrequestreview-126161063",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "beeef412-25e5-4790-aa1f-36fd6042813f",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "`c_contiguous` is preferred.",
        "createdAt" : "2018-06-05T21:30:38Z",
        "updatedAt" : "2018-06-05T21:30:39Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "024cfe13767ad8a5e6a2693ed9ff56df1d122437",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +582,586 @@        assert_equal(xr, np.array(0))\n        assert_(type(xr) is np.ndarray)\n        assert_equal(xr.flags.contiguous, True)\n        assert_equal(xr.flags.f_contiguous, True)\n"
  },
  {
    "id" : "679ab89b-e217-47ad-b816-cde4656cf699",
    "prId" : 11273,
    "prUrl" : "https://github.com/numpy/numpy/pull/11273#pullrequestreview-127218699",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "032b80c7-b680-4343-a9a6-aad1eecbfbd3",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "What would happen if you constructed the empty array once here, and reused it?",
        "createdAt" : "2018-06-08T04:32:50Z",
        "updatedAt" : "2018-06-08T15:53:14Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0b5f01de-e32b-4bb5-b4b3-837e49d78924",
        "parentId" : "032b80c7-b680-4343-a9a6-aad1eecbfbd3",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "True, that is just as good I am sure. The only thing was to use a specific buffer to avoid the array cache.",
        "createdAt" : "2018-06-08T07:22:26Z",
        "updatedAt" : "2018-06-08T15:53:14Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "e032c4b8-a7d6-4dfa-90d4-a8d3aa0b0897",
        "parentId" : "032b80c7-b680-4343-a9a6-aad1eecbfbd3",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I've gone ahead and changed that - it makes the test substantially easier to read",
        "createdAt" : "2018-06-08T15:53:42Z",
        "updatedAt" : "2018-06-08T15:53:42Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "235e58d51d27a9f8665f43050d485d3d23f7288f",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +2099,2103 @@            b = a.searchsorted(a, 'r', s)\n            assert_equal(b, out + 1)\n            # Test empty array, use a fresh array to get warnings in\n            # valgrind if access happens.\n            e = np.ndarray(shape=0, buffer=b'', dtype=dt)"
  },
  {
    "id" : "001c7186-23f6-4bf2-a505-f2fbf291cb8d",
    "prId" : 11694,
    "prUrl" : "https://github.com/numpy/numpy/pull/11694#pullrequestreview-147449805",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "787e4f0b-2cbe-4762-97bb-cb65fb64a775",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "super-nit: too many blank lines. Not worth fixing though - something to pick up if / when we apply a PEP8-checker",
        "createdAt" : "2018-08-19T07:23:39Z",
        "updatedAt" : "2018-08-19T07:23:39Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "c94d1c757b1d1423acb28c94fd1497305432ccbb",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +6496,6500 @@        assert_raises((ValueError, BufferError), memoryview, np.array((3), 'M8[D]'))\n\n\n    def test_export_simple_1d(self):\n        x = np.array([1, 2, 3, 4, 5], dtype='i')"
  },
  {
    "id" : "e1e1d4cc-285c-4846-bb3c-e66c46fa58de",
    "prId" : 11739,
    "prUrl" : "https://github.com/numpy/numpy/pull/11739#pullrequestreview-146669277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "390244d5-589b-43c2-a42c-a12d465d9e47",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you add a second test using `writeable_data = bytearray(data)`, which shouldn't throw any exceptions",
        "createdAt" : "2018-08-15T04:27:13Z",
        "updatedAt" : "2018-11-26T18:01:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "84f58f14-fbfc-48a0-a996-3ec5bfa27cf5",
        "parentId" : "390244d5-589b-43c2-a42c-a12d465d9e47",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "added",
        "createdAt" : "2018-08-16T00:52:58Z",
        "updatedAt" : "2018-11-26T18:01:25Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2202b9446628db2484ca7028f5472123682f4b3",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +102,106 @@        values = np.core.records.fromstring(data, types)\n        vals = values['vals']\n        assert_raises(ValueError, vals.setflags, write=True)\n\n    def test_writeable_from_buffer(self):"
  },
  {
    "id" : "bc5d2fcf-6199-42ee-9183-36b7ad2c5bb6",
    "prId" : 11739,
    "prUrl" : "https://github.com/numpy/numpy/pull/11739#pullrequestreview-146328320",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72456b13-6a18-4875-939e-494a6ff8f071",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Looks like we ought to rename this to `frombuffer` at some point, especially once we only support python 3 and `fromstring(str)` fails but `fromstr(bytes)` succeeds.",
        "createdAt" : "2018-08-15T04:38:34Z",
        "updatedAt" : "2018-11-26T18:01:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2202b9446628db2484ca7028f5472123682f4b3",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +100,104 @@        assert_raises(ValueError, vals.setflags, write=True)\n        types = np.dtype( [('vals', 'u1'), ('res3', 'S4')] )\n        values = np.core.records.fromstring(data, types)\n        vals = values['vals']\n        assert_raises(ValueError, vals.setflags, write=True)"
  },
  {
    "id" : "eaef1f4b-401d-4f97-888d-8a2e0acf4247",
    "prId" : 11739,
    "prUrl" : "https://github.com/numpy/numpy/pull/11739#pullrequestreview-150863861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7268e3b-1e3f-438e-874b-3acd99f301cd",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This needs a comment - there's something special about 1000 here - using anything below 251 (dtype=np.int32 on my machine) does not set `.base` for me",
        "createdAt" : "2018-08-30T06:27:19Z",
        "updatedAt" : "2018-11-26T18:01:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f18cc930-e3c4-47b7-b849-57c098b3de4d",
        "parentId" : "f7268e3b-1e3f-438e-874b-3acd99f301cd",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "added comment. The condition is in `array_setstate`, to decide to use `PyArray_SetBaseObject`",
        "createdAt" : "2018-08-30T07:17:32Z",
        "updatedAt" : "2018-11-26T18:01:25Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2202b9446628db2484ca7028f5472123682f4b3",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +127,131 @@        # See condition for using PyArray_SetBaseObject in\n        # array_setstate.\n        a = np.arange(1000)\n        for v in range(pickle.HIGHEST_PROTOCOL):\n            vals = pickle.loads(pickle.dumps(a, v))"
  },
  {
    "id" : "e335556d-a996-4c07-8b14-6178b45cede4",
    "prId" : 11739,
    "prUrl" : "https://github.com/numpy/numpy/pull/11739#pullrequestreview-178387271",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5974f84-f65a-46fd-902c-3823b5c9742b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Out of scope for this patch, but this looks like a pretty scary violation of assumptions in cpython, such as caching of hashes",
        "createdAt" : "2018-08-30T08:25:27Z",
        "updatedAt" : "2018-11-26T18:01:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "8af3d36c-d955-4fc3-b921-c0027d64804c",
        "parentId" : "e5974f84-f65a-46fd-902c-3823b5c9742b",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think this comment must refer to something that was resolved",
        "createdAt" : "2018-11-26T16:43:00Z",
        "updatedAt" : "2018-11-26T18:01:26Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2202b9446628db2484ca7028f5472123682f4b3",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +131,135 @@            vals = pickle.loads(pickle.dumps(a, v))\n            assert_(vals.flags.writeable)\n            assert_(isinstance(vals.base, bytes))\n\n    def test_otherflags(self):"
  },
  {
    "id" : "25546c7e-48ee-4978-b22c-c71f6e85e176",
    "prId" : 11739,
    "prUrl" : "https://github.com/numpy/numpy/pull/11739#pullrequestreview-178424127",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7bba287-4117-4b43-9469-3da4debadb83",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you add `def test_writeable_from_readonly` here to split the tests up a little?",
        "createdAt" : "2018-11-26T16:44:44Z",
        "updatedAt" : "2018-11-26T18:01:26Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "018c3b54-a5bb-4359-8040-04c90992018b",
        "parentId" : "b7bba287-4117-4b43-9469-3da4debadb83",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "done",
        "createdAt" : "2018-11-26T18:01:33Z",
        "updatedAt" : "2018-11-26T18:01:33Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2202b9446628db2484ca7028f5472123682f4b3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +94,98 @@\n    def test_writeable_from_readonly(self):\n        # gh-9440 - make sure fromstring, from buffer on readonly buffers\n        # set writeable False\n        data = b'\\x00' * 100"
  },
  {
    "id" : "f2e01cf9-f662-48f7-b01f-faf1ceafd4ad",
    "prId" : 11739,
    "prUrl" : "https://github.com/numpy/numpy/pull/11739#pullrequestreview-178424087",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d52f41de-40a3-41d9-82bd-c5299319f8ac",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "And perhaps add `def test_writeable_from_buffer` as a test name here",
        "createdAt" : "2018-11-26T16:45:31Z",
        "updatedAt" : "2018-11-26T18:01:26Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ae2c3d85-e147-4939-99b3-1f60d41c9452",
        "parentId" : "d52f41de-40a3-41d9-82bd-c5299319f8ac",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "done",
        "createdAt" : "2018-11-26T18:01:28Z",
        "updatedAt" : "2018-11-26T18:01:28Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2202b9446628db2484ca7028f5472123682f4b3",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +105,109 @@\n    def test_writeable_from_buffer(self):\n        data = bytearray(b'\\x00' * 100)\n        vals = np.frombuffer(data, 'B')\n        assert_(vals.flags.writeable)"
  },
  {
    "id" : "df3ab9da-194a-4187-8ce3-1c5902d8cbd9",
    "prId" : 12011,
    "prUrl" : "https://github.com/numpy/numpy/pull/12011#pullrequestreview-163769309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac6a4226-aa75-466a-ab4a-802ae09ce048",
        "parentId" : null,
        "authorId" : "f7082bc1-eeb4-4ec1-a138-c6937d6df333",
        "body" : "@pitrou in the current draft of the PEP states that `buffer_callback` the [example](https://www.python.org/dev/peps/pep-0574/#data-sharing) can accept a list of buffers with `buffer_callback=buffers.extend`. However, the implementation we test here only accepts a single buffer at a time. This is in line with this section of the PEP: https://www.python.org/dev/peps/pep-0574/#passing-a-sequence-of-buffers-in-buffer-callback\r\n\r\nI think the example of the PEP should be fixed.",
        "createdAt" : "2018-10-11T11:09:32Z",
        "updatedAt" : "2018-10-11T11:35:51Z",
        "lastEditedBy" : "f7082bc1-eeb4-4ec1-a138-c6937d6df333",
        "tags" : [
        ]
      },
      {
        "id" : "b0e44ef9-6a5b-4862-b65e-625e7237d141",
        "parentId" : "ac6a4226-aa75-466a-ab4a-802ae09ce048",
        "authorId" : "4d247404-3edc-44db-9c1a-e6671fa3608e",
        "body" : "Thanks! You're right, I forgot to fix this.",
        "createdAt" : "2018-10-11T11:31:46Z",
        "updatedAt" : "2018-10-11T11:31:46Z",
        "lastEditedBy" : "4d247404-3edc-44db-9c1a-e6671fa3608e",
        "tags" : [
        ]
      }
    ],
    "commit" : "97d2b97bc071f6148a0e7e5b5836d267693b35da",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1389,1393 @@        buffers = []\n        bytes_string = pickle.dumps(array, buffer_callback=buffers.append,\n                                    protocol=5)\n        array_from_buffer = pickle.loads(bytes_string, buffers=buffers)\n        # when using pickle protocol 5 with buffer callbacks,"
  },
  {
    "id" : "17448f9a-3949-49ab-9768-35d72e84410f",
    "prId" : 12133,
    "prUrl" : "https://github.com/numpy/numpy/pull/12133#pullrequestreview-163483469",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "229b0e22-5c81-4a38-bc4d-0474e52ea73f",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This test is a bit strange, why is it needed?",
        "createdAt" : "2018-10-10T17:07:56Z",
        "updatedAt" : "2018-10-10T17:07:56Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "fe45c0cb-67dd-4878-a595-f87a0c89f5f7",
        "parentId" : "229b0e22-5c81-4a38-bc4d-0474e52ea73f",
        "authorId" : "0e636c9e-07b3-4df7-80f4-dea4e72d6cd9",
        "body" : "By the time I started writing this set of PRs, it was a sort of meta-test that made sure all pickle protocol test loops were actually including protocol 5 if possible (e.g if `pickle5` was installed), especially for the `ndarray` class.\r\nNow things have a bit changed: we loop over protocols in plenty of other test files, yet this test is only ran here. I agree that this test is less relevant now, and it can actually be removed for the sake of clarity and consistency. ",
        "createdAt" : "2018-10-10T17:51:43Z",
        "updatedAt" : "2018-10-10T17:52:16Z",
        "lastEditedBy" : "0e636c9e-07b3-4df7-80f4-dea4e72d6cd9",
        "tags" : [
        ]
      }
    ],
    "commit" : "7372f8dcc6af4446e502c0daec3199dace27e863",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +3552,3556 @@\nclass TestPickling(object):\n    def test_highest_available_pickle_protocol(self):\n        try:\n            import pickle5"
  },
  {
    "id" : "c9748757-ecaa-40e7-91e0-4dbf825175f6",
    "prId" : 12219,
    "prUrl" : "https://github.com/numpy/numpy/pull/12219#pullrequestreview-176430607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76fc9b2f-301e-4a75-bee2-f5cbea4fe927",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "It is annoying, but we probably should test the  matrix times vector case as well (where of course only the axes of the matrices make any sense).",
        "createdAt" : "2018-11-19T16:59:28Z",
        "updatedAt" : "2018-12-03T17:44:03Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "d980a5dd-62af-4684-a848-31c9305e4d77",
        "parentId" : "76fc9b2f-301e-4a75-bee2-f5cbea4fe927",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "added test",
        "createdAt" : "2018-11-19T18:15:49Z",
        "updatedAt" : "2018-12-03T17:44:03Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "18476f5285bdd3f1405086e37240a9bd2640ff16",
    "line" : 335,
    "diffHunk" : "@@ -1,1 +6019,6023 @@        f = np.matmul(a, np.arange(3), axes=[(1, 0), (0), (0)])\n        assert f.shape == (4, 5)\n\n\nclass TestInner(object):"
  },
  {
    "id" : "f5a6a131-8add-4281-a6e6-b047b8d3cee7",
    "prId" : 12219,
    "prUrl" : "https://github.com/numpy/numpy/pull/12219#pullrequestreview-180361277",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "985d3088-4a2d-471f-9e8f-45faaca7daba",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Since this is testing contiguity, you might want to check that `np.matmul(a, b)` matches `np.matmul(a.copy(), b.copy()`, which will show that contiguity does not affect the result.",
        "createdAt" : "2018-11-30T06:24:19Z",
        "updatedAt" : "2018-12-03T17:44:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "23879fd7-ce94-4925-a7e7-9363c02bb303",
        "parentId" : "985d3088-4a2d-471f-9e8f-45faaca7daba",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "added",
        "createdAt" : "2018-11-30T17:08:26Z",
        "updatedAt" : "2018-12-03T17:44:04Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "18476f5285bdd3f1405086e37240a9bd2640ff16",
    "line" : 301,
    "diffHunk" : "@@ -1,1 +5962,5966 @@        r1 = np.matmul(*args)\n        r2 = np.dot(*args)\n        assert_equal(r1, r2)\n\n        r3 = np.matmul(args[0].copy(), args[1].copy())"
  },
  {
    "id" : "66d738b8-d227-4435-9747-7511a2937a13",
    "prId" : 12448,
    "prUrl" : "https://github.com/numpy/numpy/pull/12448#pullrequestreview-178086249",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1263680c-39c8-49f6-ba23-b746600298bd",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Test name should be changed here any below to not include the word `assign`, since it no longer does an assignment",
        "createdAt" : "2018-11-25T15:35:06Z",
        "updatedAt" : "2018-12-04T15:23:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "118746f5194d6ae44c465528a7b0d10955b72698",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +4908,4912 @@    def test_multiple_field_name_occurrence(self):\n        def test_dtype_init():\n            np.dtype([(\"A\", \"f8\"), (\"B\", \"f8\"), (\"A\", \"f8\")])\n\n        # Error raised when multiple fields have the same name"
  },
  {
    "id" : "c30c12d2-6820-432c-8fd3-877cf7db6588",
    "prId" : 12448,
    "prUrl" : "https://github.com/numpy/numpy/pull/12448#pullrequestreview-178086281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6209bbd9-e31c-4560-8104-78dbfa29a857",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Would be better to add `assert_(res is out)` here instead",
        "createdAt" : "2018-11-25T15:35:45Z",
        "updatedAt" : "2018-12-04T15:23:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "118746f5194d6ae44c465528a7b0d10955b72698",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +7557,7561 @@        res = np.clip(mat, a_min=-10, a_max=0, out=out)\n        assert_(res is out)\n        assert_equal(np.sum(out), 0)\n\n    def test_insert_noncontiguous(self):"
  },
  {
    "id" : "39f7f7ff-f469-4d7d-996e-70a31d78f2a9",
    "prId" : 12519,
    "prUrl" : "https://github.com/numpy/numpy/pull/12519#pullrequestreview-208128509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86c7932f-2653-41f1-8dbd-c9bb761c0223",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Is this still necessary with the change from int to float that you made below?",
        "createdAt" : "2019-02-26T15:10:28Z",
        "updatedAt" : "2019-05-15T17:09:02Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "d18add3e-13ad-4649-9a25-b25813f8a4f9",
        "parentId" : "86c7932f-2653-41f1-8dbd-c9bb761c0223",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yes, this still causes problems on signed / unsigned integer promotion",
        "createdAt" : "2019-02-26T16:51:30Z",
        "updatedAt" : "2019-05-15T17:09:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "229a769b-6920-4aec-85b1-e79eb99a4b7a",
        "parentId" : "86c7932f-2653-41f1-8dbd-c9bb761c0223",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Maybe add a comment...",
        "createdAt" : "2019-02-26T18:25:28Z",
        "updatedAt" : "2019-05-15T17:09:02Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "31f0bb1dc7611e5401a52103623d15ea4b3dd00f",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +4292,4296 @@                    # assuming the previous unsafe casting, which now must be\n                    # passed explicitly to avoid a warning.\n                    x.clip(clip_min, clip_max, x, casting='unsafe')\n                else:\n                    x = x.clip(clip_min, clip_max)"
  },
  {
    "id" : "a9729d14-f156-45d6-bc4d-9180c3715bb5",
    "prId" : 12572,
    "prUrl" : "https://github.com/numpy/numpy/pull/12572#pullrequestreview-185608931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ada5174-208f-43ab-a546-861e1e232962",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'd tend to indent and break into two lines for this construction\r\n```\r\n        ],\r\n    ids=[\r\n        ...\r\n```\r\nHaving everything indented keeps it together in the Python way.",
        "createdAt" : "2018-12-17T14:17:44Z",
        "updatedAt" : "2018-12-17T14:17:45Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e0d024d0c2e1f4967172d3c1d6004dd9d967b47",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +7647,7651 @@        np.empty((0, 0)),\n        _make_readonly(np.array([1, 2, 3])),\n    ], ids=[\n        '1d',\n        '2d',"
  },
  {
    "id" : "c02aa1ff-7421-4740-9668-1b110f6b5028",
    "prId" : 12572,
    "prUrl" : "https://github.com/numpy/numpy/pull/12572#pullrequestreview-185609384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d34cbbcc-4325-4810-9ff5-89383b326fd1",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'd also indent this line.",
        "createdAt" : "2018-12-17T14:18:46Z",
        "updatedAt" : "2018-12-17T14:18:46Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e0d024d0c2e1f4967172d3c1d6004dd9d967b47",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +7656,7660 @@        'empty-2d',\n        'readonly'\n    ])\n    def test_ctypes_data_as_holds_reference(self, arr):\n        # gh-9647"
  },
  {
    "id" : "f1938c2a-09b8-416b-a851-0d83c0df31e3",
    "prId" : 12609,
    "prUrl" : "https://github.com/numpy/numpy/pull/12609#pullrequestreview-254290094",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9add5961-4816-48f6-b132-5b23cb9606fc",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```suggestion\r\n```",
        "createdAt" : "2019-06-25T22:03:56Z",
        "updatedAt" : "2019-06-28T01:02:22Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7559f864dc0237a002d9dbf6ce1f4630aa7857a",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +234,238 @@            # only warn once\n            assert_(len(w) == 1)\n\n    def test_otherflags(self):\n        assert_equal(self.a.flags.carray, True)"
  },
  {
    "id" : "e9f3b411-08dd-4bc0-8210-5e4189675312",
    "prId" : 12618,
    "prUrl" : "https://github.com/numpy/numpy/pull/12618#pullrequestreview-187941672",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f00b7cf-1fad-44de-aa0d-7f0f9c992f0f",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Why is this needed? ",
        "createdAt" : "2018-12-26T18:21:23Z",
        "updatedAt" : "2018-12-26T18:21:23Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "196ca520-20b7-4be7-94f2-797ae025da13",
        "parentId" : "8f00b7cf-1fad-44de-aa0d-7f0f9c992f0f",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I thought it would be good to throw in a 12-byte-equivalence type, and `i4,i4,i4` is 12 bytes.\r\n\r\n(if a 12-byte-uint existed it would be uint-aligned to 12 bytes. But actually it is not uint-alignable).",
        "createdAt" : "2018-12-26T18:35:56Z",
        "updatedAt" : "2018-12-26T18:37:34Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3beaaacb3d28dbc4c6bcf8709857b561b37a8cc",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +8004,8008 @@            for n in [0, 1, 3, 11]:\n                for order in [\"C\", \"F\", None]:\n                    for dtype in list(np.typecodes[\"All\"]) + ['i4,i4,i4']:\n                        if dtype == 'O':\n                            # object dtype can't be misaligned"
  },
  {
    "id" : "de96e74a-be6c-4ae7-bc3a-9a5e8d87edcc",
    "prId" : 12626,
    "prUrl" : "https://github.com/numpy/numpy/pull/12626#pullrequestreview-189043494",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bdb61dfe-eacb-4593-be4f-9f88cd492349",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Nice.",
        "createdAt" : "2019-01-03T06:02:36Z",
        "updatedAt" : "2019-01-03T16:27:09Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "494ab226-0f8a-4f06-a018-8148b6a85b1d",
        "parentId" : "bdb61dfe-eacb-4593-be4f-9f88cd492349",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "\"guranteed\" spelling.",
        "createdAt" : "2019-01-03T14:59:14Z",
        "updatedAt" : "2019-01-03T16:27:09Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "812e359b50919fb99942c674098ce8b8c506ab5d",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +60,64 @@    The ndarray is guaranteed *not* aligned to twice the requested alignment.\n    Eg, if align=4, guarantees it is not aligned to 8. If align=None uses\n    dtype.alignment.\"\"\"\n    dtype = np.dtype(dtype)\n    if dtype == np.dtype(object):"
  },
  {
    "id" : "f1c38572-66fb-47f1-8cf7-6dc3f96ab053",
    "prId" : 12748,
    "prUrl" : "https://github.com/numpy/numpy/pull/12748#pullrequestreview-194823947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b2b2076-71f6-4fea-ae08-b461bf4266bf",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "@mattip, this type of test will fail on pypy, right?",
        "createdAt" : "2019-01-19T22:13:33Z",
        "updatedAt" : "2019-01-22T09:17:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "dea0a5b0-0ab6-4348-b2b2-f5ff81d9e3ae",
        "parentId" : "6b2b2076-71f6-4fea-ae08-b461bf4266bf",
        "authorId" : "4d247404-3edc-44db-9c1a-e6671fa3608e",
        "body" : "Hmm, yes, I should call `gc.collect`.",
        "createdAt" : "2019-01-19T22:19:57Z",
        "updatedAt" : "2019-01-22T09:17:43Z",
        "lastEditedBy" : "4d247404-3edc-44db-9c1a-e6671fa3608e",
        "tags" : [
        ]
      },
      {
        "id" : "cfcb3234-d3c8-450d-bfd5-795616ad78c2",
        "parentId" : "6b2b2076-71f6-4fea-ae08-b461bf4266bf",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could skip for pypy. These sorts of tests do tend to be fragile.",
        "createdAt" : "2019-01-22T03:20:45Z",
        "updatedAt" : "2019-01-22T09:17:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7801e07b8fe3e28b12136302b0c6556adbf990ae",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +3779,3783 @@            # check for reference leaks (gh-12793)\n            for ref in refs:\n                assert ref() is None\n\n    def _loads(self, obj):"
  },
  {
    "id" : "03f54a08-9c3d-43f7-8474-a210b5f2c46f",
    "prId" : 12805,
    "prUrl" : "https://github.com/numpy/numpy/pull/12805#pullrequestreview-194382933",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0810b6c-310e-4fc5-9b8b-c545a47ecf1c",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Needed to reset and update the `iface` of the singleton `self.f`. There may be a cleaner way to use `f` in the parameters, but this seemed the easiest",
        "createdAt" : "2019-01-20T08:33:11Z",
        "updatedAt" : "2019-01-20T14:28:49Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "adfaafba9f45cea66a344d0d67916bee38b79ce2",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +7031,7035 @@        # Test scalar coercion within the array interface\n        self.f.iface = {'typestr': 'f8'}\n        self.f.iface.update(iface)\n        if HAS_REFCOUNT:\n            pre_cnt = sys.getrefcount(np.dtype('f8'))"
  },
  {
    "id" : "f26a3f8d-d677-4fe6-a2ad-a7e11fbbb0d4",
    "prId" : 12805,
    "prUrl" : "https://github.com/numpy/numpy/pull/12805#pullrequestreview-194394752",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80ba59e7-b257-49bb-9bd2-44afa4a01850",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "`issubclass(..., Exception)` is probably clearer, but I don't care much.",
        "createdAt" : "2019-01-20T14:00:15Z",
        "updatedAt" : "2019-01-20T14:28:49Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "387494e6-a0ac-4508-aae6-db2e25f61bcd",
        "parentId" : "80ba59e7-b257-49bb-9bd2-44afa4a01850",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "I tried that, it fails since `issubclass` expects a class as a first argument, and `expected` is sometimes a non-class instance",
        "createdAt" : "2019-01-20T14:06:53Z",
        "updatedAt" : "2019-01-20T14:28:49Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "b285e358-418e-48c0-b451-cfbec4fcbdb5",
        "parentId" : "80ba59e7-b257-49bb-9bd2-44afa4a01850",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "ahh, right...",
        "createdAt" : "2019-01-20T14:18:55Z",
        "updatedAt" : "2019-01-20T14:28:49Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "adfaafba9f45cea66a344d0d67916bee38b79ce2",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +7034,7038 @@        if HAS_REFCOUNT:\n            pre_cnt = sys.getrefcount(np.dtype('f8'))\n        if isinstance(expected, type):\n            assert_raises(expected, np.array, val)\n        else:"
  },
  {
    "id" : "6d2a226d-feff-4d34-895b-354f9b4d0b61",
    "prId" : 12915,
    "prUrl" : "https://github.com/numpy/numpy/pull/12915#pullrequestreview-244106672",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61e768d5-e4a4-4fe8-972f-6257b458a9c4",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm not actually sure our stuff works on pathlib2, or whether our CI exercises this code path.\r\n\r\nEither way, if it turns out this test fails on systems using pathlib2, at least with the test present we'll likely get a bug report.",
        "createdAt" : "2019-05-31T02:08:11Z",
        "updatedAt" : "2019-06-04T03:02:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c618a3b5cff29e84353bbdd6886e0732eb232a5",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +28,32 @@except ImportError:\n    try:\n        import pathlib2 as pathlib\n    except ImportError:\n        pathlib = None"
  },
  {
    "id" : "18265e47-3575-4d59-946f-08b4e8226f9a",
    "prId" : 12915,
    "prUrl" : "https://github.com/numpy/numpy/pull/12915#pullrequestreview-244596058",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d555419-3273-4002-9bd7-9a52c6b96dab",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "`self.x.dump(p)` is failing to write to the file on PyPy, while `self.x.tofile(p)` is working fine. Is there a call to `flush` missing somewhere, or a missing `close` to trigger the write?",
        "createdAt" : "2019-05-31T14:57:42Z",
        "updatedAt" : "2019-06-04T03:02:02Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "213a244c-edb5-4a1a-a10c-a34098293545",
        "parentId" : "8d555419-3273-4002-9bd7-9a52c6b96dab",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Good catch, #13684.\r\n\r\n",
        "createdAt" : "2019-06-01T17:57:25Z",
        "updatedAt" : "2019-06-04T03:02:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c618a3b5cff29e84353bbdd6886e0732eb232a5",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +4661,4665 @@        y = np.load(p, allow_pickle=True)\n        assert_array_equal(y, self.x)\n\n    def test_roundtrip_binary_str(self):\n        s = self.x.tobytes()"
  },
  {
    "id" : "e787b172-03fe-4b1f-9739-c5411eaec53c",
    "prId" : 12971,
    "prUrl" : "https://github.com/numpy/numpy/pull/12971#pullrequestreview-221455933",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a866ba7-95ed-47cb-90a2-a6b4590eb718",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "nit: I think it would be clearer to distinguish `offset_items` and `count_item` here, rather than using the same variable for both.",
        "createdAt" : "2019-04-02T05:33:57Z",
        "updatedAt" : "2019-05-31T13:36:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad6394c9965197bbf594191e2ae6656bbef15395",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +4779,4783 @@            count_items = len(self.x.flat) // 8\n            offset_items = len(self.x.flat) // 4\n            offset_bytes = self.dtype.itemsize * offset_items\n            y = np.fromfile(f, dtype=self.dtype, count=count_items, offset=offset_bytes)\n            assert_array_equal(y, self.x.flat[offset_items:offset_items+count_items])"
  },
  {
    "id" : "977bad45-c924-4a98-b2fc-e00b1271efb2",
    "prId" : 13503,
    "prUrl" : "https://github.com/numpy/numpy/pull/13503#pullrequestreview-236437974",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4cd982a-26ad-4134-8e1e-ffc24d170de5",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Can you make sure you have a test for something like:\r\n\r\n```\r\nnp.matmul(np.empty((3, 0), dtype=object), np.empty((0, 3), dtype=object))\r\n```\r\nIt probably should return an array filled with `False` (different then `np.dot`, but `np.dot` seems broken currently).\r\n\r\nIt would also be good to test both error path. The multiply path is simple, since you can just put a `None` or so inside. The `add` error path we probably have to create a dummy object:\r\n```\r\nclass multiply_not_add(object):\r\n    def __multiply__(self, other):\r\n        return self\r\n    def __add__(self, other):\r\n        raise ValueError(\"this object cannot be added\")\r\n```\r\nshould work.",
        "createdAt" : "2019-05-11T19:44:35Z",
        "updatedAt" : "2019-05-14T04:56:00Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "023cff90-96ba-49eb-b438-7ee145b26ecd",
        "parentId" : "b4cd982a-26ad-4134-8e1e-ffc24d170de5",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK, just checked `np.sum(np.array([], dtype=object))` returns `0` Integer, so I guess we could go that way. (I thought that one was `False`)",
        "createdAt" : "2019-05-11T19:45:57Z",
        "updatedAt" : "2019-05-14T04:56:00Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "28739c80-951d-4c50-b7d0-903507d52c83",
        "parentId" : "b4cd982a-26ad-4134-8e1e-ffc24d170de5",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think it should be full of the integer `0` which matches `np.sum` - not `False`",
        "createdAt" : "2019-05-11T19:46:49Z",
        "updatedAt" : "2019-05-14T04:56:00Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f7555cb7-760f-405f-9cb3-ffcff61f15ae",
        "parentId" : "b4cd982a-26ad-4134-8e1e-ffc24d170de5",
        "authorId" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "body" : "I agree it should be `0`.",
        "createdAt" : "2019-05-12T21:50:31Z",
        "updatedAt" : "2019-05-14T04:56:00Z",
        "lastEditedBy" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "tags" : [
        ]
      }
    ],
    "commit" : "1be0e6862196ce92f4b8a2257bad2e890c398cc1",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +6044,6048 @@        res = self.matmul(v, v)\n        assert_(type(res) is F)\n\n    def test_matmul_empty(self):\n        a = np.empty((3, 0), dtype=object)"
  },
  {
    "id" : "ca350770-29b2-4189-8106-d8ae29b1c3aa",
    "prId" : 13503,
    "prUrl" : "https://github.com/numpy/numpy/pull/13503#pullrequestreview-236450778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebca2ac3-3349-44ce-ac62-83ad6516e8e5",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "One line comment saying \"None cannot be multiplied\" would be good here",
        "createdAt" : "2019-05-13T01:41:30Z",
        "updatedAt" : "2019-05-14T04:56:00Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1be0e6862196ce92f4b8a2257bad2e890c398cc1",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +6051,6055 @@        assert_array_equal(np.matmul(a, b), c)\n\n    def test_matmul_exception_multiply(self):\n        # test that matmul fails if `__mul__` is missing\n        class add_not_multiply():"
  },
  {
    "id" : "a6ab61de-f8e6-480b-a573-97b7b4cfa3ed",
    "prId" : 13503,
    "prUrl" : "https://github.com/numpy/numpy/pull/13503#pullrequestreview-236455717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee366456-c85e-48fd-a562-b8aca26039e9",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "You should `assert_equal(res, F(2, 3)**2 + F(5, 7)**2)` here too. I don't think you need to expand that expression.",
        "createdAt" : "2019-05-13T02:18:45Z",
        "updatedAt" : "2019-05-14T04:56:00Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "76ddbdee-8842-42b3-8571-95080ac8b2a0",
        "parentId" : "ee366456-c85e-48fd-a562-b8aca26039e9",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Ah, nevermind, you test that above",
        "createdAt" : "2019-05-13T02:19:23Z",
        "updatedAt" : "2019-05-14T04:56:00Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1be0e6862196ce92f4b8a2257bad2e890c398cc1",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +6043,6047 @@        v = np.array([F(2,3), F(5,7)])\n        res = self.matmul(v, v)\n        assert_(type(res) is F)\n\n    def test_matmul_empty(self):"
  },
  {
    "id" : "e75544db-1222-4254-92ac-4b12df86524c",
    "prId" : 13860,
    "prUrl" : "https://github.com/numpy/numpy/pull/13860#pullrequestreview-256025919",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6eaf69fb-064c-442a-b827-5f339b63e28f",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Ideally this would go in a `try` / `finally` too",
        "createdAt" : "2019-06-29T06:17:17Z",
        "updatedAt" : "2019-07-03T00:53:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "b18b76f6d00c7b710753d0a35fc490beb1cbd643",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +7208,7212 @@        for i in range(33):\n            if gc.collect() == 0:\n                break\n\n    def test_error_pointer_type(self):"
  },
  {
    "id" : "a15245c2-6731-4d7a-b2d2-4a11c1a2176f",
    "prId" : 14417,
    "prUrl" : "https://github.com/numpy/numpy/pull/14417#pullrequestreview-283467359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b56ab5e-0aee-40fe-9ce3-4b91e53220cb",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Nice touch changing to the non-string names, thanks",
        "createdAt" : "2019-09-04T08:51:33Z",
        "updatedAt" : "2019-09-04T08:51:34Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "003a3d4c5056d698e62f24c392c101bf687e00bd",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +4591,4595 @@        np.uint8, np.uint16, np.uint32, np.uint64,\n        np.int8, np.int16, np.int32, np.int64,\n        np.float16, np.float32, np.float64\n    ])\n    def test_basic(self, dtype):"
  },
  {
    "id" : "ff4eb66a-cf9d-4523-baae-de6d90782dc6",
    "prId" : 14596,
    "prUrl" : "https://github.com/numpy/numpy/pull/14596#pullrequestreview-395702211",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81ad991d-e72f-41d2-9958-aa90dddbfed9",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This test is unfortunately nonsense, this passes a dict as the order argument.",
        "createdAt" : "2020-04-17T19:01:47Z",
        "updatedAt" : "2020-04-17T19:01:47Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "61774458477d0761ddd76aaf84f4b063c7e57029",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +2794,2798 @@        for order in ['Z', 'c', False, True, 0, 8]:\n            x = np.array([[1, 2, 3], [4, 5, 6]], np.int32)\n            assert_raises(ValueError, x.flatten, {\"order\": order})\n\n    @pytest.mark.parametrize('func', (np.dot, np.matmul))"
  },
  {
    "id" : "5757ec9b-1c81-4d40-93c5-6fb147131f6f",
    "prId" : 14794,
    "prUrl" : "https://github.com/numpy/numpy/pull/14794#pullrequestreview-324618809",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44357821-61ad-41af-84cc-74650fcfdf21",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Since this is a C deprecation, you should put this test in `test_deprecated`, where it has access to `assert_deprecated` which tests for both warnings and exceptions",
        "createdAt" : "2019-11-25T18:48:00Z",
        "updatedAt" : "2019-11-29T11:32:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a5b6dd5f-1177-4227-9b52-93c73fd64bbd",
        "parentId" : "44357821-61ad-41af-84cc-74650fcfdf21",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "some of this is testing the deprecation, but the original tests checked functionality. Should I duplicate the new tests of the current functionality, or move the whole lot of them, old and new, to `test_deprecations`?",
        "createdAt" : "2019-11-25T22:03:05Z",
        "updatedAt" : "2019-11-29T11:32:32Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "3e0868e0-c49d-4c61-8768-13057568d875",
        "parentId" : "44357821-61ad-41af-84cc-74650fcfdf21",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Ah, I hadn't noticed this is a helper function not a test.\r\n\r\nI think a single test in `test_deprecation` would suffice, possibly with a comment pointing to this function as something that needs changing when the deprecation is removed.",
        "createdAt" : "2019-11-29T09:34:03Z",
        "updatedAt" : "2019-11-29T11:32:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "89bdb4d0-f81d-4e47-b691-a89ee44be1e0",
        "parentId" : "44357821-61ad-41af-84cc-74650fcfdf21",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "added",
        "createdAt" : "2019-11-29T09:56:52Z",
        "updatedAt" : "2019-11-29T11:32:32Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b4d0ac95d178409d030a4c77651f8ed1d305dea",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1080,1084 @@        b = np.array(seq, dtype=object)\n        assert_equal(a, b)\n        return b\n\n    def test_ragged_ndim_object(self):"
  },
  {
    "id" : "6a0d4cf9-1420-4dc1-8d3d-a0a4417afd7d",
    "prId" : 14794,
    "prUrl" : "https://github.com/numpy/numpy/pull/14794#pullrequestreview-325984353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f5560d7-e2e6-4761-8ac8-d69c8280698d",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "In principle could be nice to add that similar cases (also None) such as `[None, [None, None]]` _do_ correctly warn. (although maybe I missed a test that checks this already)",
        "createdAt" : "2019-12-02T20:26:36Z",
        "updatedAt" : "2019-12-02T20:26:54Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "aad35c77-d342-4473-9ea6-8547cdf3bc93",
        "parentId" : "6f5560d7-e2e6-4761-8ac8-d69c8280698d",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Do you mean specifically ragged lists of objects? In the tests above this ragged arrays of integers are checked.",
        "createdAt" : "2019-12-03T09:10:35Z",
        "updatedAt" : "2019-12-03T09:10:35Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b4d0ac95d178409d030a4c77651f8ed1d305dea",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +1127,1131 @@        a = np.array([[[Decimal(1)]]])\n        a = np.array([1, Decimal(1)])\n        a = np.array([[1], [Decimal(1)]])\n\nclass TestStructured(object):"
  },
  {
    "id" : "5f30baf6-6bbc-4288-81f1-b87bc6ddacaf",
    "prId" : 15085,
    "prUrl" : "https://github.com/numpy/numpy/pull/15085#pullrequestreview-329871154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd460ba7-02d5-479c-923e-40e26c74bff0",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Re parameterization: seems a little wasteful to compute these each test. Not a big deal, but I'm not sure how useful this type of parameterization is.",
        "createdAt" : "2019-12-10T14:07:01Z",
        "updatedAt" : "2020-01-14T21:15:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "4a549144-f555-4a21-8a7d-663def9766c8",
        "parentId" : "bd460ba7-02d5-479c-923e-40e26c74bff0",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "ok, will undo the parameterization",
        "createdAt" : "2019-12-10T14:24:26Z",
        "updatedAt" : "2020-01-14T21:15:52Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "66a1e497a9e19cac1a0b84a99081136f6646ee68",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2259,2263 @@    def test_searchsorted_with_invalid_sorter(self):\n        a = np.array([5, 2, 1, 3, 4])\n        s = np.argsort(a)\n        assert_raises(TypeError, np.searchsorted, a, 0,\n                      sorter=np.array((1, (2, 3)), dtype=object))"
  },
  {
    "id" : "e4f1e714-2143-4551-b294-2dc00333b70e",
    "prId" : 15307,
    "prUrl" : "https://github.com/numpy/numpy/pull/15307#pullrequestreview-343096497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59dbcdb1-fd1a-4c99-89a6-ddf3960ad0df",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```suggestion\r\n        fn2 = 'f2'\r\n```\r\nSame for the ones up to line 5288.",
        "createdAt" : "2020-01-15T09:50:07Z",
        "updatedAt" : "2020-01-15T09:50:07Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "addf86ba5ec6d0038993f00d782101f365ddeb6d",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +5305,5309 @@        assert_raises(ValueError, b[fn3].__getitem__, fnn)\n        # multiple subfields\n        fn2 = str('f2')\n        b[fn2] = 3\n"
  }
]