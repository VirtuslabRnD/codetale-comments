[
  {
    "id" : "1e00b5f4-fc57-4095-9a0f-9e963ea37204",
    "prId" : 3107,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa458d4c-ced9-4d34-a0cb-562c608b4b10",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "It would really help readability if there were blank lines between the various sub-tests.\n",
        "createdAt" : "2013-03-13T04:27:09Z",
        "updatedAt" : "2013-08-17T16:30:32Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ea9399fb-3068-4f1d-9e28-5e214802b83d",
        "parentId" : "aa458d4c-ced9-4d34-a0cb-562c608b4b10",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "And so on down the line.\n",
        "createdAt" : "2013-03-13T04:27:43Z",
        "updatedAt" : "2013-08-17T16:30:32Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4674b9ee89a641f3b9da2296079a6ed2167e1d8c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +901,905 @@        b = a.searchsorted([0, 1, 2], 'l')\n        assert_equal(b, [0, 0, 0])\n        b = a.searchsorted([0, 1, 2], 'r')\n        assert_equal(b, [0, 0, 0])\n        a = np.ones(1)"
  },
  {
    "id" : "39d82867-61a7-4652-b3f0-15f7c97640e3",
    "prId" : 3415,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc4c58da-2fc5-4be9-9ced-e3be8444466c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@seberg With your work, the mutual exclusion of `f_contiguous` and `c_contiguous` looks wrong here. Thoughts?\n",
        "createdAt" : "2013-06-09T00:21:37Z",
        "updatedAt" : "2013-06-09T00:21:37Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "9b76d04f-f3e5-422c-9703-8945a6749be7",
        "parentId" : "cc4c58da-2fc5-4be9-9ced-e3be8444466c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Doesn't matter here really, the arrays being tested cannot be both.\n",
        "createdAt" : "2013-06-09T10:32:21Z",
        "updatedAt" : "2013-06-09T10:32:21Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "c1506b7d-7db1-426b-bc61-b0b8f4d43692",
        "parentId" : "cc4c58da-2fc5-4be9-9ced-e3be8444466c",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Doh! Thanks.\n",
        "createdAt" : "2013-06-09T14:35:41Z",
        "updatedAt" : "2013-06-09T14:35:41Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "18e7f40e97cae555f0446da99180525a8d259d81",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +647,651 @@            assert_(arr.flags.fortran)\n            assert_(arr.flags.f_contiguous)\n            assert_(not arr.flags.c_contiguous)\n\n        def assert_c(arr):"
  },
  {
    "id" : "b116fccc-fc39-4567-9d65-dd3e714a368c",
    "prId" : 3790,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6bbe978-5625-4abc-a8e3-7a016e1fe438",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Do we still need `d.sum()` and `count_non_zero(d)` ?\n",
        "createdAt" : "2013-09-23T23:02:43Z",
        "updatedAt" : "2013-09-23T23:02:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e5038a89-f297-4b11-96c7-bbd773596bc8",
        "parentId" : "e6bbe978-5625-4abc-a8e3-7a016e1fe438",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "not really, but in this case its fast so I though why not.\n",
        "createdAt" : "2013-09-23T23:03:46Z",
        "updatedAt" : "2013-09-23T23:03:46Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "79d3a94f41b7e3c661eceed2f26ba6cce362ba4f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +449,453 @@            assert_equal(np.count_nonzero(d), 0)\n            assert_equal(d.sum(), 0)\n            assert_(not d.any())\n\n            d = np.zeros(2, dtype='4i4')"
  },
  {
    "id" : "ce80e1b6-f312-41d3-ad49-6c0d0c779e58",
    "prId" : 4178,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d802424e-61b7-4db3-b0ed-b1dae5563198",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Need to break these lines at some point.\n",
        "createdAt" : "2014-01-09T03:42:01Z",
        "updatedAt" : "2014-01-09T03:42:01Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "73f376209737f131b7361fe0be925cca0dae78b5",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +3371,3375 @@        sz = sum([dtype(b).itemsize for a, b in dt])\n        if dtype('l').itemsize == 4:\n            assert_equal(y.format, 'T{b:a:=h:b:i:c:l:d:q:dx:B:e:@H:f:=I:g:L:h:Q:hx:f:i:d:j:^g:k:=Zf:ix:Zd:jx:^Zg:kx:4s:l:=4w:m:3x:n:?:o:@e:p:}')\n        else:\n            assert_equal(y.format, 'T{b:a:=h:b:i:c:q:d:q:dx:B:e:@H:f:=I:g:Q:h:Q:hx:f:i:d:j:^g:k:=Zf:ix:Zd:jx:^Zg:kx:4s:l:=4w:m:3x:n:?:o:@e:p:}')"
  },
  {
    "id" : "2add5a6f-fc14-45a7-9304-26e988df371c",
    "prId" : 5636,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9110d433-708f-47d5-83cc-0b796d066359",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "assert_warns is probably a bit nicer (no need for the local collect warnings), but we can put that off to another time.\n",
        "createdAt" : "2015-06-13T10:29:07Z",
        "updatedAt" : "2015-06-17T17:51:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "2ed3fe2a-91fb-4dc0-a9e4-40d35c21de4d",
        "parentId" : "9110d433-708f-47d5-83cc-0b796d066359",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I'll leave it for another time. I was just fixing >80 char lines that were bugging me here.\n",
        "createdAt" : "2015-06-13T17:09:15Z",
        "updatedAt" : "2015-06-17T17:51:55Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c1a13dea6a7e189675977ad65ea230ce4816061",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +3586,3590 @@        # All the different functions raise a warning, but not an error, and\n        # 'a' is not modified:\n        assert_equal(collect_warnings(a[['f1', 'f2']].__setitem__, 0, (10, 20)),\n                     [FutureWarning])\n        assert_equal(a, b)"
  },
  {
    "id" : "3fc34e78-9df1-4435-9220-490afee80fb3",
    "prId" : 5636,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17baa02d-5304-425e-b597-a180e637b07e",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Wow, but it makes sense, why not have no fields if you have a size.... Spaces after \":\" though ;).\n",
        "createdAt" : "2015-06-13T10:29:14Z",
        "updatedAt" : "2015-06-17T17:51:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c1a13dea6a7e189675977ad65ea230ce4816061",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +3617,3621 @@\n    def test_empty_structure_creation(self):\n        # make sure these do not raise errors (gh-5631)\n        array([()], dtype={'names': [], 'formats': [],\n                           'offsets': [], 'itemsize': 12})"
  },
  {
    "id" : "5b3f661a-900e-4e77-9d40-b6a5b0dc757b",
    "prId" : 5704,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9949e83-4309-4ff7-935e-8690f61b30df",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I like the `msg =` form better, but this is OK. \n",
        "createdAt" : "2015-03-21T18:53:01Z",
        "updatedAt" : "2015-03-21T18:53:01Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd30b50a5125da8fa037220e0161ce1ce3ddec0c",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +1216,1220 @@            assert_equal(np.argsort(a, axis=axis),\n                         np.zeros_like(a, dtype=np.intp),\n                         'test empty array argsort with axis={}'.format(axis))\n        assert_equal(np.argsort(a, axis=None),\n                     np.zeros_like(a.ravel(), dtype=np.intp),"
  },
  {
    "id" : "24d03e7c-5a75-42d3-b05b-fdfc572e477e",
    "prId" : 6242,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc6711d8-6dbe-470e-a0ec-ae940ea3b178",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "Could you add the unicode test you showed in the comments here, for Python 3 versions only?\n",
        "createdAt" : "2015-08-25T13:52:01Z",
        "updatedAt" : "2015-08-25T14:45:23Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbca4cb6ecbec22fba097ad0d6dfb1e1f39f8ef6",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +3563,3567 @@\n    if sys.version_info[0] >= 3:\n        def test_bytes_fields(self):\n            # Bytes are not allowed in field names and not recognized in titles\n            # on Py3"
  },
  {
    "id" : "0702a5f6-2cd5-46d7-b8b4-9ca1b4da253b",
    "prId" : 6988,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed3e51e4-2b0a-4726-af32-db2442685ed0",
        "parentId" : null,
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "So, I managed to get this built so I can debug with `python3-dbg` interactively and discovered this line will cause the strange exception. However, the line before does not cause the exception.\n",
        "createdAt" : "2016-01-10T20:25:48Z",
        "updatedAt" : "2016-01-12T00:42:41Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "bab118da49f051aecf35296bb9d8a00edd5b4198",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +2047,2051 @@\n        assert_raises(ValueError, np.dot, c, A)\n        assert_raises(TypeError, np.dot, A, c)\n\n    def test_diagonal(self):"
  },
  {
    "id" : "5fae6cb6-815d-422b-88d3-e7160c3df6dd",
    "prId" : 6988,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58e631dd-5901-4c43-b147-10a277e5c8ee",
        "parentId" : null,
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "Same story as above. This line will cause the exception, as well.\n",
        "createdAt" : "2016-01-10T20:25:52Z",
        "updatedAt" : "2016-01-12T00:42:41Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      },
      {
        "id" : "7558edbf-90d4-4805-9b0f-662fec0571dc",
        "parentId" : "58e631dd-5901-4c43-b147-10a277e5c8ee",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Just to add that this error occurs with python 3.5 debug also.\n",
        "createdAt" : "2016-01-10T20:44:13Z",
        "updatedAt" : "2016-01-12T00:42:41Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bab118da49f051aecf35296bb9d8a00edd5b4198",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +4838,4842 @@\n        assert_raises(TypeError, np.inner, c, A)\n        assert_raises(TypeError, np.inner, A, c)\n\n    def test_inner_scalar_and_vector(self):"
  },
  {
    "id" : "494a402b-7afc-4568-86a5-1b68d823e8af",
    "prId" : 7912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b0f2fa1-4b8a-4c3d-934b-92b6515e1a52",
        "parentId" : null,
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Another way to do this in Nose is probably to `raise SkipTest` in `def setup(self): ...`\n",
        "createdAt" : "2016-08-15T13:01:07Z",
        "updatedAt" : "2016-08-15T16:47:04Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "53c2ab86-1f51-4e33-8138-00323c336091",
        "parentId" : "5b0f2fa1-4b8a-4c3d-934b-92b6515e1a52",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Interesting suggestion. Probably not as obvious in reading the code, but otherwise cleaner, at least until we drop the now abandoned Nose.\n",
        "createdAt" : "2016-08-15T15:55:04Z",
        "updatedAt" : "2016-08-15T16:47:04Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4d737696-30c2-48c7-bdd9-df1c383dd629",
        "parentId" : "5b0f2fa1-4b8a-4c3d-934b-92b6515e1a52",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Using dec.skip() in a setup() class method did not skip the class. It seems to skip one or more tests but not all. I could not find documentation or examples of how to do this in the 10 minutes I tried.\n",
        "createdAt" : "2016-08-15T16:14:37Z",
        "updatedAt" : "2016-08-15T16:47:04Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "76eff9ca4648e96ba1f560e83f40383f68805493",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +6361,6365 @@\n\nif not IS_PYPY:\n    # sys.getsizeof() is not valid on PyPy\n    class TestSizeOf(TestCase):"
  },
  {
    "id" : "b1be5530-6081-42ea-a790-6bb04bf05366",
    "prId" : 8050,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bf9e070-ec6d-40c6-a9cf-6a43111d6be2",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Out of curiousity, I noticed the import also defines `HAS_REFCOUNT`, is this reflected in the C-api so that this could be not PyPy specific but in principle good for all non-refcounted pythons?\n",
        "createdAt" : "2016-09-12T20:56:17Z",
        "updatedAt" : "2016-09-17T19:54:09Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "93be1d2f-116b-4b8b-b129-50ba59b138e3",
        "parentId" : "4bf9e070-ec6d-40c6-a9cf-6a43111d6be2",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "HAS_REFCOUNT reflects sys.getrefcount() where this pull request deals with pyobj->ob_refcnt not being incremented at the same places in CPython and PyPy. I'm not sure the two concepts are equivalent, I could imagine a garbage collection strategy that cannot count overall refcounts but can track single-item assignments, or visa-versa\n",
        "createdAt" : "2016-09-13T15:51:04Z",
        "updatedAt" : "2016-09-17T19:54:09Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c1ca4cb5662a80110fd2020634b4deea7717661",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +4082,4086 @@    def test_basic(self):\n        x = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n        if IS_PYPY:\n            x.resize((5, 5), refcheck=False)\n        else:"
  },
  {
    "id" : "fcd62917-1c62-48b8-add5-f0164cdb8f23",
    "prId" : 8222,
    "prUrl" : "https://github.com/numpy/numpy/pull/8222#pullrequestreview-6355684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21fc6804-69e9-48eb-8023-2d92044a17d2",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Should check that using explicit `dtype` or `out` gives the correct type unless that is checked elsewhere. In fact, it should be checked elsewhere, but may not be.\n",
        "createdAt" : "2016-10-29T23:24:11Z",
        "updatedAt" : "2016-11-04T01:07:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "af818b08edc30d04cb56de0429a35ca82458e326",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +4534,4538 @@        # This fail if the sum inside mean is done in float16 instead\n        # of float32.\n        assert _mean(np.ones(100000, dtype='float16')) == 1\n\n    def test_var_values(self):"
  },
  {
    "id" : "095ae05b-0138-469b-bf31-45a25abbeaca",
    "prId" : 8524,
    "prUrl" : "https://github.com/numpy/numpy/pull/8524#pullrequestreview-18219642",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94e1fff8-5892-4c12-893d-aee13ce46414",
        "parentId" : null,
        "authorId" : "e55414fd-c999-4a2b-83b3-6dea56ea8ee4",
        "body" : "To have a test that triggers the bug fixed in this PR, you may want to add `[np.float16(1.)]` to this tuple (i.e., a float16 wrapped in a list). The others don't run into the `is_float16_result` and `not hasattr(a, \"dtype\")` case.",
        "createdAt" : "2017-01-24T15:36:45Z",
        "updatedAt" : "2017-01-24T15:39:58Z",
        "lastEditedBy" : "e55414fd-c999-4a2b-83b3-6dea56ea8ee4",
        "tags" : [
        ]
      },
      {
        "id" : "ade56c0f-4b11-412f-9e31-6279c700e2ed",
        "parentId" : "94e1fff8-5892-4c12-893d-aee13ce46414",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "all tests are scalars wrapped into a list, though just scalars might be useful too",
        "createdAt" : "2017-01-24T15:49:35Z",
        "updatedAt" : "2017-01-24T15:49:35Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "56decc43-86af-4ea8-9f2a-7be7f2095b1b",
        "parentId" : "94e1fff8-5892-4c12-893d-aee13ce46414",
        "authorId" : "e55414fd-c999-4a2b-83b3-6dea56ea8ee4",
        "body" : "> all tests are scalars wrapped into a list\r\n\r\nOoops, right. Great then! Good to merge from my perspective. Thank you for taking this!",
        "createdAt" : "2017-01-24T17:35:44Z",
        "updatedAt" : "2017-01-24T17:35:44Z",
        "lastEditedBy" : "e55414fd-c999-4a2b-83b3-6dea56ea8ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ae84854d9c48a751e57c5cd0e9636678a6d2359",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4382,4386 @@\n    def test_python_type(self):\n        for x in (np.float16(1.), 1, 1., 1+0j):\n            assert_equal(np.mean([x]), 1.)\n            assert_equal(np.std([x]), 0.)"
  },
  {
    "id" : "05b3d1e2-a230-4b1a-8bc3-19f5fff2fe85",
    "prId" : 8898,
    "prUrl" : "https://github.com/numpy/numpy/pull/8898#pullrequestreview-31929577",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1561b588-2af6-4fc0-aee5-60a28c7afebd",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Debatable whether testing implementation details like this (and the one above) makes any sense",
        "createdAt" : "2017-04-07T21:45:50Z",
        "updatedAt" : "2017-04-07T22:09:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "8f6c6525-6b0b-4ccd-b989-f9fe9a0353e5",
        "parentId" : "1561b588-2af6-4fc0-aee5-60a28c7afebd",
        "authorId" : "19c1a92e-ecda-44f8-a318-d36d0435dbbe",
        "body" : "If you feel strongly, I'll remove it. I think its a good check to keep. For instance, if someone decides to add an \"import ctypes\" statement into one of these methods in the future, this assertion will catch that. Otherwise, the test will continue to pass.",
        "createdAt" : "2017-04-07T21:54:14Z",
        "updatedAt" : "2017-04-07T22:09:52Z",
        "lastEditedBy" : "19c1a92e-ecda-44f8-a318-d36d0435dbbe",
        "tags" : [
        ]
      },
      {
        "id" : "b3853a89-77eb-49a6-9156-92ad40d52638",
        "parentId" : "1561b588-2af6-4fc0-aee5-60a28c7afebd",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yeah, my concernt is that that's somewhat artificial, and doesn't really catch us doing `import ctypes` anywhere else - these tests wouldn't catch the bug that caused you to patch this in the first place, for instance.\r\n\r\nI don't feel strongly about it, but would appreciate input from someone else on a better way to test this.",
        "createdAt" : "2017-04-07T22:04:40Z",
        "updatedAt" : "2017-04-07T22:09:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d63eb4ea-bd2e-464b-8020-616e15f16590",
        "parentId" : "1561b588-2af6-4fc0-aee5-60a28c7afebd",
        "authorId" : "19c1a92e-ecda-44f8-a318-d36d0435dbbe",
        "body" : "Fair enough. Will wait for additional input.",
        "createdAt" : "2017-04-07T22:08:28Z",
        "updatedAt" : "2017-04-07T22:09:52Z",
        "lastEditedBy" : "19c1a92e-ecda-44f8-a318-d36d0435dbbe",
        "tags" : [
        ]
      },
      {
        "id" : "773e8325-ba29-40e2-bb25-7752abd96745",
        "parentId" : "1561b588-2af6-4fc0-aee5-60a28c7afebd",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm almost tempted to spin off a new python interpreter without ctypes to run the test, to ensure it can't break anything else\r\n\r\nYou might also be able to get your `sys.modules` hackery to work if you try to put everything back together again, but also a little risky.",
        "createdAt" : "2017-04-07T22:19:27Z",
        "updatedAt" : "2017-04-07T22:19:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "7f47eeb9-c5e0-4fe6-a8a2-9444070da296",
        "parentId" : "1561b588-2af6-4fc0-aee5-60a28c7afebd",
        "authorId" : "19c1a92e-ecda-44f8-a318-d36d0435dbbe",
        "body" : "Hey Eric,\r\n\r\nI tried again with the sys.modules hackery, and trying to put things back together again with the try/finally block. Unfortunately, other tests continue to fail. I guess this is because tests are run in parallel. With the current setup (setting ctypes = None), we will have similar cross-test side effects, but I guess we are getting lucky in that it isn't causing any errant failures.\r\n\r\nBy \"spin off a new python interpreter\", are you suggesting to execute the test with python's subprocess?\r\n\r\nEg (?):\r\ndef some_test(self):\r\n    self.assertEqual(0, subprocess.call(sys.executable, \"-c\", test_code)",
        "createdAt" : "2017-04-10T18:54:02Z",
        "updatedAt" : "2017-04-10T18:54:02Z",
        "lastEditedBy" : "19c1a92e-ecda-44f8-a318-d36d0435dbbe",
        "tags" : [
        ]
      },
      {
        "id" : "72c20286-16a2-4e39-b62f-a8bbd94f7304",
        "parentId" : "1561b588-2af6-4fc0-aee5-60a28c7afebd",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> Suggesting to execute the test with python's subprocess?\r\n\r\nYes, that is what I mean. I'm not actually sure that's a good idea though, and I don't think you should risk wasting time trying it until someone else weighs in.",
        "createdAt" : "2017-04-10T18:56:04Z",
        "updatedAt" : "2017-04-10T18:56:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "2652a1eab5c6288307ed94f2d0a0a7939a61b6cc",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +6743,6747 @@\n            self.assertIsInstance(\n                test_arr.ctypes._ctypes, _internal._missing_ctypes)\n            assert_equal(tuple(test_arr.ctypes.shape), (2, 3))\n        finally:"
  },
  {
    "id" : "273fe001-9845-40f1-b399-42c5c91e04ba",
    "prId" : 8964,
    "prUrl" : "https://github.com/numpy/numpy/pull/8964#pullrequestreview-33742447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90ebfbba-21ab-4761-865d-bf726aad515d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Isn't the real bug here that data is being read from an empty array?",
        "createdAt" : "2017-04-20T11:22:24Z",
        "updatedAt" : "2017-04-20T11:37:29Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b950905b-2146-4e61-ad6b-7b8f1c85092d",
        "parentId" : "90ebfbba-21ab-4761-865d-bf726aad515d",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "arguably yes, but doing so helps finding these bugs",
        "createdAt" : "2017-04-20T11:25:13Z",
        "updatedAt" : "2017-04-20T11:37:29Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "a16f16b94b61fc35b887d9e9f2e12c817c2819b6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +6622,6626 @@    def test_empty_result(self):\n        # pass empty where result through an assignment which reads the data of\n        # empty arrays, error detectable with valgrind, see gh-8922\n        x = np.zeros((1, 1))\n        ibad = np.vstack(np.where(x == 99.))"
  },
  {
    "id" : "828f433c-5827-4c59-a422-b02a621079b2",
    "prId" : 8977,
    "prUrl" : "https://github.com/numpy/numpy/pull/8977#pullrequestreview-66352461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29501e69-7460-47e5-876f-1ece382f9d2d",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Is there an advantage to making this a staticmethod?",
        "createdAt" : "2017-10-01T20:41:44Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b56eb290-2ff8-414c-b7fc-3497d00fba5d",
        "parentId" : "29501e69-7460-47e5-876f-1ece382f9d2d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "To document that it doesn't use `self`?",
        "createdAt" : "2017-10-01T20:44:06Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1c9c235b-5e57-413b-a603-b73f4103a14e",
        "parentId" : "29501e69-7460-47e5-876f-1ece382f9d2d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Well, it does that, don't know if it is worth it as the normal impulse would be to use it only if needed. Then again, my Python experience started when Python 21 was the newest and greatest, so programming conventions may have changed. In fact, it is the latter possibility that interests me. Do you know if it is the case that this sort of programming style is being taught or encouraged?",
        "createdAt" : "2017-10-01T21:16:54Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "11592a1c-eb52-4eac-8591-f3931b73f69b",
        "parentId" : "29501e69-7460-47e5-876f-1ece382f9d2d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`TestCase` objects (or the inferred use of them by pytest) are pretty weird anyway, because an new one is instantiated for each method call by the test runner. I can change this if you feel strongly.",
        "createdAt" : "2017-10-01T23:00:34Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "084e00a4-619b-4167-b828-09f4c0fc2edf",
        "parentId" : "29501e69-7460-47e5-876f-1ece382f9d2d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I don't feel strongly about it. On occasion I find your coding style a bit unusual, but not wrong. Just trying to figure out if it is a personal style, or the future of python coding ;)",
        "createdAt" : "2017-10-01T23:12:12Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "bbca620f-0dd1-48ab-b8f0-68587077de7d",
        "parentId" : "29501e69-7460-47e5-876f-1ece382f9d2d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Could easily be personal style. I guess it probably comes from my java background, but even there it might just have been personal style.",
        "createdAt" : "2017-10-02T00:48:02Z",
        "updatedAt" : "2017-10-02T02:00:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6d2cd3870ba832973f85057d8d4735c99f18baa",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1206,1210 @@\nclass TestZeroSizeFlexible(object):\n    @staticmethod\n    def _zeros(shape, dtype=str):\n        dtype = np.dtype(dtype)"
  },
  {
    "id" : "38167cd3-cca5-4ea6-b596-14755345d506",
    "prId" : 9112,
    "prUrl" : "https://github.com/numpy/numpy/pull/9112#pullrequestreview-37956290",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f660c91b-a1bc-4e53-8146-4f8a32afa552",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can we add another test for what happens if we return `NotImplemented` here? I feel like in that case, we should just not take the fast path, rather than throw `TypeError`",
        "createdAt" : "2017-05-12T21:53:54Z",
        "updatedAt" : "2017-05-14T20:30:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ffdbb4e7-f331-41a2-b3e8-8196f745d4cb",
        "parentId" : "f660c91b-a1bc-4e53-8146-4f8a32afa552",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "How would we detect that? We could need to actually call the `np.power` ufunc, which the code currently does not do.",
        "createdAt" : "2017-05-12T22:29:02Z",
        "updatedAt" : "2017-05-14T20:30:55Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1df000d940d2367c6e86f754be5201c2051ba99",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +3145,3149 @@            def __array_ufunc__(self, ufunc, method, *inputs, **kw):\n                if ufunc is not np.power:\n                    raise NotImplementedError\n                return \"POWER!\"\n        # explicit cast to float, to ensure the fast power path is taken."
  },
  {
    "id" : "2bf905a9-99fd-495a-9388-ead1e9170ecb",
    "prId" : 9217,
    "prUrl" : "https://github.com/numpy/numpy/pull/9217#pullrequestreview-41921425",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86b5472d-dd9f-4296-bb89-2386156e369a",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you add a test in the other direction too, from `()` to `(1,)`?",
        "createdAt" : "2017-06-03T14:47:37Z",
        "updatedAt" : "2017-06-03T15:06:09Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "c02f1ed4d649e65eb8e3caf2bcf0a1e2f46a16fa",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +4277,4281 @@            x.resize(())\n            assert_equal(x.shape, ())\n            assert_equal(x.size, 1)\n            x = np.empty(())\n            x.resize((1,))"
  },
  {
    "id" : "867f559d-93d2-4e2d-90ca-fc5c88d0d36e",
    "prId" : 9856,
    "prUrl" : "https://github.com/numpy/numpy/pull/9856#pullrequestreview-69379864",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "919a1e33-e3c7-47a7-aaa8-33c509730c15",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Might want to document that this only tests scalars and scalar arrays.",
        "createdAt" : "2017-10-14T01:39:17Z",
        "updatedAt" : "2017-10-14T04:13:23Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "931758e2e25e9a2628c0dc953744fa4db9ca657a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1204,1208 @@            assert_equal(np.count_nonzero(a), builtins.sum(a.tolist()))\n\n    def _test_cast_from_flexible(self, dtype):\n        # empty string -> false\n        for n in range(3):"
  },
  {
    "id" : "be5941d2-1132-48a3-957a-52aa4dc14ff4",
    "prId" : 9883,
    "prUrl" : "https://github.com/numpy/numpy/pull/9883#pullrequestreview-70286388",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5314e7e5-4b61-495c-b6aa-c69428f00a8d",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Is `assert_equal` the best way to compare strings? Maybe just `assert_(str1 == str2)` would be a bit cleaner.",
        "createdAt" : "2017-10-18T16:38:42Z",
        "updatedAt" : "2017-10-18T19:39:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "52810b7c-c1ee-4e5a-b2bc-ca25f9e19d5e",
        "parentId" : "5314e7e5-4b61-495c-b6aa-c69428f00a8d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yes, because then it shows the two values if they differ.",
        "createdAt" : "2017-10-18T16:40:23Z",
        "updatedAt" : "2017-10-18T19:39:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "07582386-7963-4a7a-a280-3f3bc9595aff",
        "parentId" : "5314e7e5-4b61-495c-b6aa-c69428f00a8d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK.",
        "createdAt" : "2017-10-18T16:53:06Z",
        "updatedAt" : "2017-10-18T19:39:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2152677b-92bd-4f45-98aa-493fd36057d1",
        "parentId" : "5314e7e5-4b61-495c-b6aa-c69428f00a8d",
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "In pytest you can just `assert str1 == str2` and you will get values if there is a failure. \r\n\r\n```\r\n\r\ndef test_failure():\r\n    a = 'apple'\r\n    b = 'banana'\r\n    assert a == b\r\n```\r\n\r\nOutput is \r\n\r\n```\r\n================================== FAILURES ===================================\r\n________________________________ test_failure _________________________________\r\n\r\n    def test_failure():\r\n        a = 'apple'\r\n        b = 'banana'\r\n>       assert a == b\r\nE       AssertionError: assert 'apple' == 'banana'\r\nE         - apple\r\nE         + banana\r\n\r\ntest_util.py:20: AssertionError\r\n========================== 1 failed in 0.24 seconds ===========================\r\n```",
        "createdAt" : "2017-10-18T16:57:29Z",
        "updatedAt" : "2017-10-18T19:39:02Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "cd3f2665-88fa-4524-8043-3b6d58243b05",
        "parentId" : "5314e7e5-4b61-495c-b6aa-c69428f00a8d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "For consistency, we should probably use the same form we use in most of the test suite, which gives:\r\n\r\n```\r\n>>> np.testing.assert_equal('a', 'b')\r\nAssertionError: \r\nItems are not equal:\r\n ACTUAL: 'a'\r\n DESIRED: 'b'\r\n```\r\n\r\nAFAIK, the switch to `pytest` was recent, and we were previously using `nose`",
        "createdAt" : "2017-10-18T17:00:19Z",
        "updatedAt" : "2017-10-18T19:39:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "16c97b21-8dfd-4535-9bba-ce01ed3ff892",
        "parentId" : "5314e7e5-4b61-495c-b6aa-c69428f00a8d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "We are still using nose, the pytest conversion is still in progress and I don't think I will get back to it until 1.15.",
        "createdAt" : "2017-10-18T17:06:24Z",
        "updatedAt" : "2017-10-18T19:39:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "86a7ac621b1b78c66b4be1c959a3b5c74511b124",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +7018,7022 @@    def test_0d(self):\n        a = np.array(np.pi)\n        assert_equal('{:0.3g}'.format(a), '3.14')\n        assert_equal('{:0.3g}'.format(a[()]), '3.14')\n"
  },
  {
    "id" : "07790733-ad33-4d51-8c87-35f729ac9192",
    "prId" : 9883,
    "prUrl" : "https://github.com/numpy/numpy/pull/9883#pullrequestreview-82357958",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fbe4311-396e-45c3-b9d6-f805d11b56ba",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I suppose we should silence warnings in `ret_and_exc`, or return a third tuple item which is the warning",
        "createdAt" : "2017-12-09T23:46:36Z",
        "updatedAt" : "2017-12-09T23:46:36Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3ad04b42-efd3-4c33-8379-905e605d8ed8",
        "parentId" : "9fbe4311-396e-45c3-b9d6-f805d11b56ba",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Maybe just figure out what the result should be and use that? Eventually `object.__format__` is going to fail with non-empty argument.",
        "createdAt" : "2017-12-10T00:13:46Z",
        "updatedAt" : "2017-12-10T00:13:46Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "f6c20156-1ac8-43af-b19f-5e1021e96793",
        "parentId" : "9fbe4311-396e-45c3-b9d6-f805d11b56ba",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Right, and I think that `ndarray.__format__` should start failing at the same time. Maybe we should just make `ndarray.__format__` fail with an empty argument right now...",
        "createdAt" : "2017-12-10T00:37:27Z",
        "updatedAt" : "2017-12-10T00:37:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "bf99f95b-c077-41a1-b331-853ef8fc75c2",
        "parentId" : "9fbe4311-396e-45c3-b9d6-f805d11b56ba",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like it went away in Python 3.4.\r\n```\r\n* :meth:`object.__format__` no longer accepts non-empty format strings, it now\r\n  raises a :exc:`TypeError` instead.  Using a non-empty string has been\r\n  deprecated since Python 3.2.  This change has been made to prevent a\r\n  situation where previously working (but incorrect) code would start failing\r\n  if an object gained a __format__ method, which means that your code may now\r\n  raise a :exc:`TypeError` if you are using an ``'s'`` format code with objects\r\n  that do not have a __format__ method that handles it.  See :issue:`7994` for\r\n  background.\r\n```\r\nShould ours work if an empty string is passed?",
        "createdAt" : "2017-12-10T01:33:02Z",
        "updatedAt" : "2017-12-10T01:33:03Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "36c15343-8f0a-423d-acf1-3576c36e06ff",
        "parentId" : "9fbe4311-396e-45c3-b9d6-f805d11b56ba",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I fixed this by making the test Python version dependent.",
        "createdAt" : "2017-12-10T18:20:13Z",
        "updatedAt" : "2017-12-10T18:20:13Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "86a7ac621b1b78c66b4be1c959a3b5c74511b124",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +7040,7044 @@        # that the behaviour hasn't changed\n        assert_equal(\n            ret_and_exc(object.__format__, a, '30'),\n            ret_and_exc('{:30}'.format, a)\n        )"
  },
  {
    "id" : "f3720ad0-8df1-460a-baa5-5e5fa905e0cd",
    "prId" : 9978,
    "prUrl" : "https://github.com/numpy/numpy/pull/9978#pullrequestreview-74810580",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7439d03f-8da2-41f4-8920-d86eb02e70d7",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you add another test for `S10` too?\r\n\r\nIt would be good to record what happens when the float str is too long. I'm not sure whether letting the string truncate is OK, or if it should round.",
        "createdAt" : "2017-11-07T03:49:18Z",
        "updatedAt" : "2017-11-07T03:49:18Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ea5e23d9-1bfd-4c68-8fa7-f2d74530f18b",
        "parentId" : "7439d03f-8da2-41f4-8920-d86eb02e70d7",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Also might be tidier to use a 0d array here and `.astype`, but up to you",
        "createdAt" : "2017-11-07T03:50:59Z",
        "updatedAt" : "2017-11-07T03:50:59Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a3530a9b-a24b-4164-bfcf-0205953bed90",
        "parentId" : "7439d03f-8da2-41f4-8920-d86eb02e70d7",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "For all types (not just floats) there is a fairly well established precedent that strings get simply truncated if the dtype is too short, so I don't think we should round. Integers don't round.\r\n\r\nAlso, I'm a bit hesitant to add a test for `S10` because I didn't touch any string truncation code here, and getting the truncation right seems like a separate issue, to be examined and discussed on its own. This PR's purpose is to test string casting intermediates, not to test the arguably unrelated string truncation.",
        "createdAt" : "2017-11-07T16:13:15Z",
        "updatedAt" : "2017-11-07T16:13:16Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a1a2b42ed64cb76acfad7bd71835b8b3484a3d2",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +458,462 @@        a = np.zeros(1, dtype='S20')\n        a[:] = np.array(['1.12345678901234567890'], dtype='f8')\n        assert_equal(a[0], b\"1.1234567890123457\")\n\n"
  },
  {
    "id" : "6d73e8e1-c8c3-4b1e-8290-89c72cfb6d6a",
    "prId" : 10205,
    "prUrl" : "https://github.com/numpy/numpy/pull/10205#pullrequestreview-82969563",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5105fdff-b772-41f7-ba50-5c9690a228b4",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "It would be more conventional to keep the closing parenthesis on the previous line.",
        "createdAt" : "2017-12-12T20:21:55Z",
        "updatedAt" : "2017-12-12T20:21:55Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c28f1ae597dac17353ef0f3f2d466305cdbc9305",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +7204,7208 @@            ValueError, \"size exceeded\",\n            np.arange, 0, np.inf\n        )\n\n    def test_nan_step(self):"
  },
  {
    "id" : "9189dd6a-c11b-4aa6-b0f6-56751e9d0790",
    "prId" : 10502,
    "prUrl" : "https://github.com/numpy/numpy/pull/10502#pullrequestreview-93737191",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b8ff6b3-3007-41c6-99d6-c9fdd58e2eed",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "These were found by temporarily removing the base classes from `AxisError`. They don't actually represent a compatibility problem, unless someone is doing something bizarre like `type(exc) is ValueError`.",
        "createdAt" : "2018-02-01T07:18:11Z",
        "updatedAt" : "2018-02-04T20:07:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "4ed95735-178a-4a5f-a9c5-62f600f95683",
        "parentId" : "1b8ff6b3-3007-41c6-99d6-c9fdd58e2eed",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Agreed, this looks good to me.",
        "createdAt" : "2018-02-02T19:52:30Z",
        "updatedAt" : "2018-02-04T20:07:04Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "74e8690a2ee1b4b5c5ca4b0c505cbf44298b7fe8",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +2873,2877 @@        assert_raises(np.AxisError, a.swapaxes, 4, 0)\n        assert_raises(np.AxisError, a.swapaxes, 0, -5)\n        assert_raises(np.AxisError, a.swapaxes, 0, 4)\n\n        for i in range(-4, 4):"
  },
  {
    "id" : "9927ff65-494b-455f-b784-addf90be34c6",
    "prId" : 10529,
    "prUrl" : "https://github.com/numpy/numpy/pull/10529#pullrequestreview-94525102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29f060aa-ed56-4ca8-855b-043fc4e76313",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "These would look better on the previous line. Python indentation isn't like C blocks.",
        "createdAt" : "2018-02-06T21:23:44Z",
        "updatedAt" : "2018-02-06T21:23:45Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ca3c2927-1aa1-4c45-b3cd-aff6df2f61d6",
        "parentId" : "29f060aa-ed56-4ca8-855b-043fc4e76313",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Used to writing things like this from javascript - for deeply nested parens, it makes things a lot clearer. Here you're right, it adds little value.",
        "createdAt" : "2018-02-06T22:14:27Z",
        "updatedAt" : "2018-02-06T22:14:28Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2592e092a076bb0c87f5588dbffee4a6844dc08",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +6460,6464 @@            offsets=[4, 0],\n            itemsize=8\n        ))\n\n        # overlapping fields cannot be represented by PEP3118"
  }
]