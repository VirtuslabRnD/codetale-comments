[
  {
    "id" : "1e00b5f4-fc57-4095-9a0f-9e963ea37204",
    "prId" : 3107,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa458d4c-ced9-4d34-a0cb-562c608b4b10",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "It would really help readability if there were blank lines between the various sub-tests.\n",
        "createdAt" : "2013-03-13T04:27:09Z",
        "updatedAt" : "2013-08-17T16:30:32Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ea9399fb-3068-4f1d-9e28-5e214802b83d",
        "parentId" : "aa458d4c-ced9-4d34-a0cb-562c608b4b10",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "And so on down the line.\n",
        "createdAt" : "2013-03-13T04:27:43Z",
        "updatedAt" : "2013-08-17T16:30:32Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4674b9ee89a641f3b9da2296079a6ed2167e1d8c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +901,905 @@        b = a.searchsorted([0, 1, 2], 'l')\n        assert_equal(b, [0, 0, 0])\n        b = a.searchsorted([0, 1, 2], 'r')\n        assert_equal(b, [0, 0, 0])\n        a = np.ones(1)"
  },
  {
    "id" : "39d82867-61a7-4652-b3f0-15f7c97640e3",
    "prId" : 3415,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc4c58da-2fc5-4be9-9ced-e3be8444466c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@seberg With your work, the mutual exclusion of `f_contiguous` and `c_contiguous` looks wrong here. Thoughts?\n",
        "createdAt" : "2013-06-09T00:21:37Z",
        "updatedAt" : "2013-06-09T00:21:37Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "9b76d04f-f3e5-422c-9703-8945a6749be7",
        "parentId" : "cc4c58da-2fc5-4be9-9ced-e3be8444466c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Doesn't matter here really, the arrays being tested cannot be both.\n",
        "createdAt" : "2013-06-09T10:32:21Z",
        "updatedAt" : "2013-06-09T10:32:21Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "c1506b7d-7db1-426b-bc61-b0b8f4d43692",
        "parentId" : "cc4c58da-2fc5-4be9-9ced-e3be8444466c",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Doh! Thanks.\n",
        "createdAt" : "2013-06-09T14:35:41Z",
        "updatedAt" : "2013-06-09T14:35:41Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "18e7f40e97cae555f0446da99180525a8d259d81",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +647,651 @@            assert_(arr.flags.fortran)\n            assert_(arr.flags.f_contiguous)\n            assert_(not arr.flags.c_contiguous)\n\n        def assert_c(arr):"
  },
  {
    "id" : "b116fccc-fc39-4567-9d65-dd3e714a368c",
    "prId" : 3790,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6bbe978-5625-4abc-a8e3-7a016e1fe438",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Do we still need `d.sum()` and `count_non_zero(d)` ?\n",
        "createdAt" : "2013-09-23T23:02:43Z",
        "updatedAt" : "2013-09-23T23:02:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e5038a89-f297-4b11-96c7-bbd773596bc8",
        "parentId" : "e6bbe978-5625-4abc-a8e3-7a016e1fe438",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "not really, but in this case its fast so I though why not.\n",
        "createdAt" : "2013-09-23T23:03:46Z",
        "updatedAt" : "2013-09-23T23:03:46Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "79d3a94f41b7e3c661eceed2f26ba6cce362ba4f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +449,453 @@            assert_equal(np.count_nonzero(d), 0)\n            assert_equal(d.sum(), 0)\n            assert_(not d.any())\n\n            d = np.zeros(2, dtype='4i4')"
  },
  {
    "id" : "ce80e1b6-f312-41d3-ad49-6c0d0c779e58",
    "prId" : 4178,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d802424e-61b7-4db3-b0ed-b1dae5563198",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Need to break these lines at some point.\n",
        "createdAt" : "2014-01-09T03:42:01Z",
        "updatedAt" : "2014-01-09T03:42:01Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "73f376209737f131b7361fe0be925cca0dae78b5",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +3371,3375 @@        sz = sum([dtype(b).itemsize for a, b in dt])\n        if dtype('l').itemsize == 4:\n            assert_equal(y.format, 'T{b:a:=h:b:i:c:l:d:q:dx:B:e:@H:f:=I:g:L:h:Q:hx:f:i:d:j:^g:k:=Zf:ix:Zd:jx:^Zg:kx:4s:l:=4w:m:3x:n:?:o:@e:p:}')\n        else:\n            assert_equal(y.format, 'T{b:a:=h:b:i:c:q:d:q:dx:B:e:@H:f:=I:g:Q:h:Q:hx:f:i:d:j:^g:k:=Zf:ix:Zd:jx:^Zg:kx:4s:l:=4w:m:3x:n:?:o:@e:p:}')"
  },
  {
    "id" : "2add5a6f-fc14-45a7-9304-26e988df371c",
    "prId" : 5636,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9110d433-708f-47d5-83cc-0b796d066359",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "assert_warns is probably a bit nicer (no need for the local collect warnings), but we can put that off to another time.\n",
        "createdAt" : "2015-06-13T10:29:07Z",
        "updatedAt" : "2015-06-17T17:51:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "2ed3fe2a-91fb-4dc0-a9e4-40d35c21de4d",
        "parentId" : "9110d433-708f-47d5-83cc-0b796d066359",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I'll leave it for another time. I was just fixing >80 char lines that were bugging me here.\n",
        "createdAt" : "2015-06-13T17:09:15Z",
        "updatedAt" : "2015-06-17T17:51:55Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c1a13dea6a7e189675977ad65ea230ce4816061",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +3586,3590 @@        # All the different functions raise a warning, but not an error, and\n        # 'a' is not modified:\n        assert_equal(collect_warnings(a[['f1', 'f2']].__setitem__, 0, (10, 20)),\n                     [FutureWarning])\n        assert_equal(a, b)"
  },
  {
    "id" : "3fc34e78-9df1-4435-9220-490afee80fb3",
    "prId" : 5636,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17baa02d-5304-425e-b597-a180e637b07e",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Wow, but it makes sense, why not have no fields if you have a size.... Spaces after \":\" though ;).\n",
        "createdAt" : "2015-06-13T10:29:14Z",
        "updatedAt" : "2015-06-17T17:51:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c1a13dea6a7e189675977ad65ea230ce4816061",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +3617,3621 @@\n    def test_empty_structure_creation(self):\n        # make sure these do not raise errors (gh-5631)\n        array([()], dtype={'names': [], 'formats': [],\n                           'offsets': [], 'itemsize': 12})"
  },
  {
    "id" : "5b3f661a-900e-4e77-9d40-b6a5b0dc757b",
    "prId" : 5704,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9949e83-4309-4ff7-935e-8690f61b30df",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I like the `msg =` form better, but this is OK. \n",
        "createdAt" : "2015-03-21T18:53:01Z",
        "updatedAt" : "2015-03-21T18:53:01Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd30b50a5125da8fa037220e0161ce1ce3ddec0c",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +1216,1220 @@            assert_equal(np.argsort(a, axis=axis),\n                         np.zeros_like(a, dtype=np.intp),\n                         'test empty array argsort with axis={}'.format(axis))\n        assert_equal(np.argsort(a, axis=None),\n                     np.zeros_like(a.ravel(), dtype=np.intp),"
  },
  {
    "id" : "24d03e7c-5a75-42d3-b05b-fdfc572e477e",
    "prId" : 6242,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc6711d8-6dbe-470e-a0ec-ae940ea3b178",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "Could you add the unicode test you showed in the comments here, for Python 3 versions only?\n",
        "createdAt" : "2015-08-25T13:52:01Z",
        "updatedAt" : "2015-08-25T14:45:23Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbca4cb6ecbec22fba097ad0d6dfb1e1f39f8ef6",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +3563,3567 @@\n    if sys.version_info[0] >= 3:\n        def test_bytes_fields(self):\n            # Bytes are not allowed in field names and not recognized in titles\n            # on Py3"
  },
  {
    "id" : "0702a5f6-2cd5-46d7-b8b4-9ca1b4da253b",
    "prId" : 6988,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed3e51e4-2b0a-4726-af32-db2442685ed0",
        "parentId" : null,
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "So, I managed to get this built so I can debug with `python3-dbg` interactively and discovered this line will cause the strange exception. However, the line before does not cause the exception.\n",
        "createdAt" : "2016-01-10T20:25:48Z",
        "updatedAt" : "2016-01-12T00:42:41Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "bab118da49f051aecf35296bb9d8a00edd5b4198",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +2047,2051 @@\n        assert_raises(ValueError, np.dot, c, A)\n        assert_raises(TypeError, np.dot, A, c)\n\n    def test_diagonal(self):"
  },
  {
    "id" : "5fae6cb6-815d-422b-88d3-e7160c3df6dd",
    "prId" : 6988,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58e631dd-5901-4c43-b147-10a277e5c8ee",
        "parentId" : null,
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "Same story as above. This line will cause the exception, as well.\n",
        "createdAt" : "2016-01-10T20:25:52Z",
        "updatedAt" : "2016-01-12T00:42:41Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      },
      {
        "id" : "7558edbf-90d4-4805-9b0f-662fec0571dc",
        "parentId" : "58e631dd-5901-4c43-b147-10a277e5c8ee",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Just to add that this error occurs with python 3.5 debug also.\n",
        "createdAt" : "2016-01-10T20:44:13Z",
        "updatedAt" : "2016-01-12T00:42:41Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bab118da49f051aecf35296bb9d8a00edd5b4198",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +4838,4842 @@\n        assert_raises(TypeError, np.inner, c, A)\n        assert_raises(TypeError, np.inner, A, c)\n\n    def test_inner_scalar_and_vector(self):"
  },
  {
    "id" : "494a402b-7afc-4568-86a5-1b68d823e8af",
    "prId" : 7912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b0f2fa1-4b8a-4c3d-934b-92b6515e1a52",
        "parentId" : null,
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Another way to do this in Nose is probably to `raise SkipTest` in `def setup(self): ...`\n",
        "createdAt" : "2016-08-15T13:01:07Z",
        "updatedAt" : "2016-08-15T16:47:04Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "53c2ab86-1f51-4e33-8138-00323c336091",
        "parentId" : "5b0f2fa1-4b8a-4c3d-934b-92b6515e1a52",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Interesting suggestion. Probably not as obvious in reading the code, but otherwise cleaner, at least until we drop the now abandoned Nose.\n",
        "createdAt" : "2016-08-15T15:55:04Z",
        "updatedAt" : "2016-08-15T16:47:04Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4d737696-30c2-48c7-bdd9-df1c383dd629",
        "parentId" : "5b0f2fa1-4b8a-4c3d-934b-92b6515e1a52",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Using dec.skip() in a setup() class method did not skip the class. It seems to skip one or more tests but not all. I could not find documentation or examples of how to do this in the 10 minutes I tried.\n",
        "createdAt" : "2016-08-15T16:14:37Z",
        "updatedAt" : "2016-08-15T16:47:04Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "76eff9ca4648e96ba1f560e83f40383f68805493",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +6361,6365 @@\n\nif not IS_PYPY:\n    # sys.getsizeof() is not valid on PyPy\n    class TestSizeOf(TestCase):"
  },
  {
    "id" : "b1be5530-6081-42ea-a790-6bb04bf05366",
    "prId" : 8050,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bf9e070-ec6d-40c6-a9cf-6a43111d6be2",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Out of curiousity, I noticed the import also defines `HAS_REFCOUNT`, is this reflected in the C-api so that this could be not PyPy specific but in principle good for all non-refcounted pythons?\n",
        "createdAt" : "2016-09-12T20:56:17Z",
        "updatedAt" : "2016-09-17T19:54:09Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "93be1d2f-116b-4b8b-b129-50ba59b138e3",
        "parentId" : "4bf9e070-ec6d-40c6-a9cf-6a43111d6be2",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "HAS_REFCOUNT reflects sys.getrefcount() where this pull request deals with pyobj->ob_refcnt not being incremented at the same places in CPython and PyPy. I'm not sure the two concepts are equivalent, I could imagine a garbage collection strategy that cannot count overall refcounts but can track single-item assignments, or visa-versa\n",
        "createdAt" : "2016-09-13T15:51:04Z",
        "updatedAt" : "2016-09-17T19:54:09Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c1ca4cb5662a80110fd2020634b4deea7717661",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +4082,4086 @@    def test_basic(self):\n        x = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\n        if IS_PYPY:\n            x.resize((5, 5), refcheck=False)\n        else:"
  },
  {
    "id" : "fcd62917-1c62-48b8-add5-f0164cdb8f23",
    "prId" : 8222,
    "prUrl" : "https://github.com/numpy/numpy/pull/8222#pullrequestreview-6355684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21fc6804-69e9-48eb-8023-2d92044a17d2",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Should check that using explicit `dtype` or `out` gives the correct type unless that is checked elsewhere. In fact, it should be checked elsewhere, but may not be.\n",
        "createdAt" : "2016-10-29T23:24:11Z",
        "updatedAt" : "2016-11-04T01:07:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "af818b08edc30d04cb56de0429a35ca82458e326",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +4534,4538 @@        # This fail if the sum inside mean is done in float16 instead\n        # of float32.\n        assert _mean(np.ones(100000, dtype='float16')) == 1\n\n    def test_var_values(self):"
  },
  {
    "id" : "095ae05b-0138-469b-bf31-45a25abbeaca",
    "prId" : 8524,
    "prUrl" : "https://github.com/numpy/numpy/pull/8524#pullrequestreview-18219642",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94e1fff8-5892-4c12-893d-aee13ce46414",
        "parentId" : null,
        "authorId" : "e55414fd-c999-4a2b-83b3-6dea56ea8ee4",
        "body" : "To have a test that triggers the bug fixed in this PR, you may want to add `[np.float16(1.)]` to this tuple (i.e., a float16 wrapped in a list). The others don't run into the `is_float16_result` and `not hasattr(a, \"dtype\")` case.",
        "createdAt" : "2017-01-24T15:36:45Z",
        "updatedAt" : "2017-01-24T15:39:58Z",
        "lastEditedBy" : "e55414fd-c999-4a2b-83b3-6dea56ea8ee4",
        "tags" : [
        ]
      },
      {
        "id" : "ade56c0f-4b11-412f-9e31-6279c700e2ed",
        "parentId" : "94e1fff8-5892-4c12-893d-aee13ce46414",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "all tests are scalars wrapped into a list, though just scalars might be useful too",
        "createdAt" : "2017-01-24T15:49:35Z",
        "updatedAt" : "2017-01-24T15:49:35Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "56decc43-86af-4ea8-9f2a-7be7f2095b1b",
        "parentId" : "94e1fff8-5892-4c12-893d-aee13ce46414",
        "authorId" : "e55414fd-c999-4a2b-83b3-6dea56ea8ee4",
        "body" : "> all tests are scalars wrapped into a list\r\n\r\nOoops, right. Great then! Good to merge from my perspective. Thank you for taking this!",
        "createdAt" : "2017-01-24T17:35:44Z",
        "updatedAt" : "2017-01-24T17:35:44Z",
        "lastEditedBy" : "e55414fd-c999-4a2b-83b3-6dea56ea8ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ae84854d9c48a751e57c5cd0e9636678a6d2359",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +4382,4386 @@\n    def test_python_type(self):\n        for x in (np.float16(1.), 1, 1., 1+0j):\n            assert_equal(np.mean([x]), 1.)\n            assert_equal(np.std([x]), 0.)"
  }
]