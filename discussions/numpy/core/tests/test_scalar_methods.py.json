[
  {
    "id" : "7cf5052d-f23e-4551-b964-e6cbfb3fe9a6",
    "prId" : 10741,
    "prUrl" : "https://github.com/numpy/numpy/pull/10741#pullrequestreview-226320529",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1afb5c79-e9d8-451b-bce8-92c79373eadb",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "The nesting makes the tests below a little hard to follow -- only need `ftype` iteration / parametrization here I think?",
        "createdAt" : "2019-04-12T23:25:42Z",
        "updatedAt" : "2019-04-18T07:18:46Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bebf05532f466ffe81b95c8b25c23dd00867f30",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +34,38 @@        np.half, np.single, np.double, np.longdouble])\n    def test_simple_fractions(self, ftype):\n        R = fractions.Fraction\n        assert_equal(R(0, 1),\n                     R(*ftype(0.0).as_integer_ratio()))"
  },
  {
    "id" : "66eb7b23-75b0-4594-9c6f-ae64913243ee",
    "prId" : 10741,
    "prUrl" : "https://github.com/numpy/numpy/pull/10741#pullrequestreview-227381684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "787c5552-5bed-4540-a295-848f96c201fc",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "These three lines would work well as a `test_errors` test",
        "createdAt" : "2019-04-16T06:43:27Z",
        "updatedAt" : "2019-04-18T07:18:46Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1cd299ce-4f16-431f-8b5d-e6484e474da6",
        "parentId" : "787c5552-5bed-4540-a295-848f96c201fc",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "Ok, I made a separate test for that",
        "createdAt" : "2019-04-16T18:51:07Z",
        "updatedAt" : "2019-04-18T07:18:46Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bebf05532f466ffe81b95c8b25c23dd00867f30",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +49,53 @@        assert_raises(OverflowError, ftype('inf').as_integer_ratio)\n        assert_raises(OverflowError, ftype('-inf').as_integer_ratio)\n        assert_raises(ValueError, ftype('nan').as_integer_ratio)\n\n    def test_against_known_values(self):"
  },
  {
    "id" : "cc1e9e34-9610-4fb4-8c40-fcd6ec96d7a6",
    "prId" : 10741,
    "prUrl" : "https://github.com/numpy/numpy/pull/10741#pullrequestreview-228141157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2403cb2-918d-4135-ba92-06e76160ad98",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "this fails on ppc64_le for `f = np.ldexp(0.4277180662199366, 14266, dtype='float128')`",
        "createdAt" : "2019-04-17T05:16:05Z",
        "updatedAt" : "2019-04-18T07:18:46Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "be968996-9cf2-4b72-a187-6336b0018686",
        "parentId" : "f2403cb2-918d-4135-ba92-06e76160ad98",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Elsewhere I've seen us use the following to work around this:\r\n```python\r\n@pytest.mark.skipif(np.finfo(np.double) == np.finfo(np.longdouble), reason=\"long double is same as double\")\r\n@pytest.mark.skipif(platform.machine().startswith(\"ppc\"), reason=\"IBM double double\")\r\n```\r\n\r\nSo in this case,\r\n```\r\nmarks=[\r\n    pytest.mark.skipif(\r\n        np.finfo(np.double) == np.finfo(np.longdouble),\r\n        reason=\"long double is same as double\"),\r\n    pytest.mark.skipif(\r\n        platform.machine().startswith(\"ppc\"),\r\n        reason=\"IBM double double\"),\r\n]\r\n```",
        "createdAt" : "2019-04-18T06:38:47Z",
        "updatedAt" : "2019-04-18T07:18:46Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a79f6dd7-8ca2-407e-82a3-ad36dc023067",
        "parentId" : "f2403cb2-918d-4135-ba92-06e76160ad98",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "CI passing with the above",
        "createdAt" : "2019-04-18T07:44:59Z",
        "updatedAt" : "2019-04-18T07:44:59Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bebf05532f466ffe81b95c8b25c23dd00867f30",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +96,100 @@    def test_roundtrip(self, ftype, frac_vals, exp_vals):\n        for frac, exp in zip(frac_vals, exp_vals):\n            f = np.ldexp(frac, exp, dtype=ftype)\n            n, d = f.as_integer_ratio()\n"
  }
]