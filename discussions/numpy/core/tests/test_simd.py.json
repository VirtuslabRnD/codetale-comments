[
  {
    "id" : "1c0f010c-a908-4848-93ae-39fd2b7e2f60",
    "prId" : 16247,
    "prUrl" : "https://github.com/numpy/numpy/pull/16247#pullrequestreview-521275738",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81bb0a7c-a9c2-4ea9-85bd-3ae8a1556cb6",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "nice, the power of `_simd` to show the intrinsics are correct is compelling.",
        "createdAt" : "2020-11-01T22:34:36Z",
        "updatedAt" : "2020-11-03T13:20:28Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "637ad817-575a-4ee6-b2e7-872e63daef36",
        "parentId" : "81bb0a7c-a9c2-4ea9-85bd-3ae8a1556cb6",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "it should be very helpful for the upcoming architectures.",
        "createdAt" : "2020-11-01T23:49:17Z",
        "updatedAt" : "2020-11-03T13:20:28Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c811166c4ff425ffe9f6452484388897fceada03",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +221,225 @@        recip = self.recip(vdata)\n        assert recip == data_recip\n\nclass _SIMD_ALL(_Test_Utility):\n    \"\"\""
  },
  {
    "id" : "987a6f85-9d0b-4d99-af1b-f7f9df5d6b56",
    "prId" : 16782,
    "prUrl" : "https://github.com/numpy/numpy/pull/16782#pullrequestreview-519350255",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5015f1e5-f12c-44b2-b997-f95f0f7adb76",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Instead of the `globals()` manipulation below, you could do something like\r\n```suggestion\r\n@pytest.mark.parametrize('sfx', (\"u8\", \"s8\", \"u16\", \"s16\", \"u32\", \"s32\", \"u64\", \"s64\"))\r\nclass _SIMD_INT(_Test_Utility):\r\n    \"\"\"\r\n    To test all integer vector types at once\r\n    \"\"\"\r\n    def test_operators_shift(self, sfx):\r\n        if sfx in (\"u8\", \"s8\"):\r\n            return\r\n```\r\nalthough I'm not certain how to fold in the `npv` stuff there too.",
        "createdAt" : "2020-10-26T12:36:58Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "67d4fa38-b303-4cf0-b8ae-ba1328d4cf91",
        "parentId" : "5015f1e5-f12c-44b2-b997-f95f0f7adb76",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Ah ok, here's the trick:\r\n\r\n* Make the `SuffixInfo` class I suggest below\r\n* Change these classes to use `sfx` as an argument instead of `self.sfx`\r\n* Instead of the `globals()` mangling, do\r\n```python\r\nfor sfxes, cls in tests_registry.items():\r\n    params = []\r\n    for target_name, npyv in targets.items():\r\n        simd_width = npyv.simd if npyv else ''\r\n        pretty_name = target_name.split('__') # multi-target separator\r\n        if len(pretty_name) > 1:\r\n            # multi-target\r\n            pretty_name = f\"({' '.join(pretty_name)})\"\r\n        else:\r\n            pretty_name = pretty_name[0]\r\n\r\n        mark = None\r\n        skip_sfx = dict()\r\n\r\n        for sfx in sfxes:\r\n            if not npyv:\r\n                mark = pytest.mark.skip(f\"target '{pretty_name}' isn't supported by current machine\")\r\n            elif not npyv.simd:\r\n                mark = pytest.mark.skip(f\"target '{pretty_name}' isn't supported by NPYV\")\r\n            elif sfx == \"f64\" and not npyv.simd_f64:\r\n                mark = pytest.mark.skip(f\"target '{pretty_name}' doesn't support double-precision\")\r\n            else:\r\n                mark = None\r\n\r\n            params += [pytest.param(SuffixInfo(sfx=sfx, npyv=npyv, marks=mark, id=pretty_name))]\r\n\r\n    pytest.mark.parametrize('sfx', params)(cls)\r\n```\r\n* Rename the classes to be called `TestInt` so that pytest finds them",
        "createdAt" : "2020-10-26T12:53:21Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "21f78115-8b60-4260-af71-081d442cef65",
        "parentId" : "5015f1e5-f12c-44b2-b997-f95f0f7adb76",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "I tried to use `pytest.mark.parametrize ()` before and it was totaly anoying and it doesn't provide a clean traceback\r\nas the current implmention does.\r\n",
        "createdAt" : "2020-10-26T21:05:05Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      },
      {
        "id" : "bd794202-56a5-4da8-b97b-e285552ce3c7",
        "parentId" : "5015f1e5-f12c-44b2-b997-f95f0f7adb76",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "What was unclean about the traceback?",
        "createdAt" : "2020-10-26T21:26:14Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "6b2b3f88-2d1c-41bd-96ec-6d302a8c3b9b",
        "parentId" : "5015f1e5-f12c-44b2-b997-f95f0f7adb76",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "that an example of how it looks when I use \r\n<details>\r\n<summary>`pytest.mark.parametrize()`</summary>\r\n\r\n```Bash\r\n_____________________________________________________________________________________ TestSIMD_INT2.test_memory_load[npyv23] ______________________________________________________________________________________\r\n\r\nself = <numpy.core.tests.test_simd.TestSIMD_INT2 object at 0x7fb33ec08e10>, npyv = <module 'NPYV_BASELINE'>\r\n\r\n    def test_memory_load(self, npyv):\r\n        # unaligned load\r\n        load_data = npyv.load(npyv._data())\r\n>       assert load_data == 0\r\nE       assert <npyv_s64 of [1, 2]> == 0\r\n\r\nload_data  = <npyv_s64 of [1, 2]>\r\nnpyv       = <module 'NPYV_BASELINE'>\r\nself       = <numpy.core.tests.test_simd.TestSIMD_INT2 object at 0x7fb33ec08e10>\r\n\r\nnumpy/core/tests/test_simd.py:408: AssertionError\r\n============================================================================================= short test summary info =============================================================================================\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv0] - assert <npyv_u8 of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30...\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv1] - assert <npyv_s8 of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30...\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv2] - assert <npyv_u16 of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv3] - assert <npyv_s16 of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv4] - assert <npyv_u32 of [1, 2, 3, 4, 5, 6, 7, 8]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv5] - assert <npyv_s32 of [1, 2, 3, 4, 5, 6, 7, 8]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv6] - assert <npyv_u64 of [1, 2, 3, 4]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv7] - assert <npyv_s64 of [1, 2, 3, 4]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv8] - assert <npyv_u8 of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv9] - assert <npyv_s8 of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv10] - assert <npyv_u16 of [1, 2, 3, 4, 5, 6, 7, 8]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv11] - assert <npyv_s16 of [1, 2, 3, 4, 5, 6, 7, 8]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv12] - assert <npyv_u32 of [1, 2, 3, 4]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv13] - assert <npyv_s32 of [1, 2, 3, 4]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv14] - assert <npyv_u64 of [1, 2]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv15] - assert <npyv_s64 of [1, 2]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv16] - assert <npyv_u8 of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv17] - assert <npyv_s8 of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv18] - assert <npyv_u16 of [1, 2, 3, 4, 5, 6, 7, 8]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv19] - assert <npyv_s16 of [1, 2, 3, 4, 5, 6, 7, 8]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv20] - assert <npyv_u32 of [1, 2, 3, 4]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv21] - assert <npyv_s32 of [1, 2, 3, 4]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv22] - assert <npyv_u64 of [1, 2]> == 0\r\nFAILED numpy/core/tests/test_simd.py::TestSIMD_INT2::test_memory_load[npyv23] - assert <npyv_s64 of [1, 2]> == 0\r\n````\r\n</details>\r\n\r\n\r\n<details>\r\n<summary>the current implementation</summary>\r\n\r\n```Bash\r\n________________________________________________________________________________ Test_SIMD_INT2_128_baseline_u64.test_memory_load _________________________________________________________________________________\r\n\r\nself = <numpy.core.tests.test_simd.Test_SIMD_INT2_128_baseline_u64 object at 0x7f897486d240>\r\n\r\n    def test_memory_load(self):\r\n        # unaligned load\r\n        load_data = self.load(self._data())\r\n>       assert load_data == 0\r\nE       assert <npyv_u64 of [1, 2]> == 0\r\n\r\nload_data  = <npyv_u64 of [1, 2]>\r\nself       = <numpy.core.tests.test_simd.Test_SIMD_INT2_128_baseline_u64 object at 0x7f897486d240>\r\n\r\nnumpy/core/tests/test_simd.py:408: AssertionError\r\n________________________________________________________________________________ Test_SIMD_INT2_128_baseline_s64.test_memory_load _________________________________________________________________________________\r\n\r\nself = <numpy.core.tests.test_simd.Test_SIMD_INT2_128_baseline_s64 object at 0x7f8974840c50>\r\n\r\n    def test_memory_load(self):\r\n        # unaligned load\r\n        load_data = self.load(self._data())\r\n>       assert load_data == 0\r\nE       assert <npyv_s64 of [1, 2]> == 0\r\n\r\nload_data  = <npyv_s64 of [1, 2]>\r\nself       = <numpy.core.tests.test_simd.Test_SIMD_INT2_128_baseline_s64 object at 0x7f8974840c50>\r\n\r\nnumpy/core/tests/test_simd.py:408: AssertionError\r\n============================================================================================= short test summary info =============================================================================================\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_256_FMA3__AVX2_u8::test_memory_load - assert <npyv_u8 of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27...\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_256_FMA3__AVX2_s8::test_memory_load - assert <npyv_s8 of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27...\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_256_FMA3__AVX2_u16::test_memory_load - assert <npyv_u16 of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_256_FMA3__AVX2_s16::test_memory_load - assert <npyv_s16 of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_256_FMA3__AVX2_u32::test_memory_load - assert <npyv_u32 of [1, 2, 3, 4, 5, 6, 7, 8]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_256_FMA3__AVX2_s32::test_memory_load - assert <npyv_s32 of [1, 2, 3, 4, 5, 6, 7, 8]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_256_FMA3__AVX2_u64::test_memory_load - assert <npyv_u64 of [1, 2, 3, 4]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_256_FMA3__AVX2_s64::test_memory_load - assert <npyv_s64 of [1, 2, 3, 4]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_128_SSE42_u8::test_memory_load - assert <npyv_u8 of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_128_SSE42_s8::test_memory_load - assert <npyv_s8 of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_128_SSE42_u16::test_memory_load - assert <npyv_u16 of [1, 2, 3, 4, 5, 6, 7, 8]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_128_SSE42_s16::test_memory_load - assert <npyv_s16 of [1, 2, 3, 4, 5, 6, 7, 8]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_128_SSE42_u32::test_memory_load - assert <npyv_u32 of [1, 2, 3, 4]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_128_SSE42_s32::test_memory_load - assert <npyv_s32 of [1, 2, 3, 4]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_128_SSE42_u64::test_memory_load - assert <npyv_u64 of [1, 2]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_128_SSE42_s64::test_memory_load - assert <npyv_s64 of [1, 2]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_128_baseline_u8::test_memory_load - assert <npyv_u8 of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_128_baseline_s8::test_memory_load - assert <npyv_s8 of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_128_baseline_u16::test_memory_load - assert <npyv_u16 of [1, 2, 3, 4, 5, 6, 7, 8]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_128_baseline_s16::test_memory_load - assert <npyv_s16 of [1, 2, 3, 4, 5, 6, 7, 8]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_128_baseline_u32::test_memory_load - assert <npyv_u32 of [1, 2, 3, 4]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_128_baseline_s32::test_memory_load - assert <npyv_s32 of [1, 2, 3, 4]> == 0\r\nFAILED numpy/core/tests/test_simd.py::Test_SIMD_INT2_128_baseline_u64::test_memory_load - assert <npyv_u64 of [1, 2]> == 0\r\n\r\n````\r\n</details>",
        "createdAt" : "2020-10-26T22:45:20Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      },
      {
        "id" : "38c2470d-4756-445b-9242-8bd35205f26e",
        "parentId" : "5015f1e5-f12c-44b2-b997-f95f0f7adb76",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "> What was unclean about the traceback?\r\n\r\nthe summary",
        "createdAt" : "2020-10-26T22:47:43Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      },
      {
        "id" : "bb571722-50fb-47e0-b67f-7c97bc31736c",
        "parentId" : "5015f1e5-f12c-44b2-b997-f95f0f7adb76",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Thanks for the log outputs. The trick is the use of `pytest.param(x,  id=\"some text\")` instead of `x` in the list of values, which overrides what appears in the `[]` - That's how you avoid the useless \"npyv17\"",
        "createdAt" : "2020-10-27T00:22:10Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "9ffb6094-bbd5-4751-9109-d90b1c82cf02",
        "parentId" : "5015f1e5-f12c-44b2-b997-f95f0f7adb76",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "Aaaah nice trick, now my second issue was the ability to override certain function in utility(`_Test_Utility`) which made me consider `parametrize()` \"annoying\", for example:\r\n```Python\r\nclass _SIMD_BOOL(_Test_Utility):\r\n    \"\"\"\r\n    To test all boolean vector types at once\r\n    \"\"\"\r\n    # override data generator without the need to introduce a new class \r\n    def _data(self, n=None, reverse=False):\r\n        nlanes = getattr(self.npyv, \"nlanes_u\" + self.sfx[1:])\r\n        true_mask = self._true_mask()\r\n        rng = range(nlanes)\r\n        if reverse:\r\n            rng = reversed(rng)\r\n        return [true_mask if x % 2 else 0 for x in rng]\r\n\r\n    def _load(self, data):\r\n        len_str = self.sfx[1:]\r\n        load = getattr(self.npyv, \"load_u\" + len_str)\r\n        cvt = getattr(self.npyv, f\"cvt_b{len_str}_u{len_str}\")\r\n        return cvt(load(data))\r\n\r\n    def test_tobits(self):\r\n        if self.sfx in (\"b8\", \"b16\"):\r\n            return\r\n        for data in (self._data(), self._data(reverse=True)):\r\n            vdata = self._load(data)\r\n            data_bits = sum([x & (1 << i) for i, x in enumerate(data, 0)])\r\n            tobits = self.tobits(vdata)\r\n            assert tobits == data_bits\r\n````\r\n",
        "createdAt" : "2020-10-27T00:51:47Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      },
      {
        "id" : "6325608d-9d8b-46e1-a0d5-1dddd6ed00d1",
        "parentId" : "5015f1e5-f12c-44b2-b997-f95f0f7adb76",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "@mattip, I need to hear your opinion here, since it seems I gonna have to follow @eric-wieser suggestion.",
        "createdAt" : "2020-10-27T01:17:55Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      },
      {
        "id" : "a098fefe-779d-43b7-a403-7ab5cc0873e0",
        "parentId" : "5015f1e5-f12c-44b2-b997-f95f0f7adb76",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "If @mattip thinks we should just put this in as is, then I won't object.",
        "createdAt" : "2020-10-27T01:39:24Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3b6beb7f-d597-44bd-95f0-e77e2290bd6f",
        "parentId" : "5015f1e5-f12c-44b2-b997-f95f0f7adb76",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "We could leave it for a follow-on clean up. As new intrinsics are added the tests will expand anyway. @seiko2plus if you choose to go that route please open an issue to review the tests here with a summary of the comments. This will also allow other people to contribute by refactoring the tests. ",
        "createdAt" : "2020-10-27T04:06:47Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "a9cf5036-d6e6-4672-badf-747283707711",
        "parentId" : "5015f1e5-f12c-44b2-b997-f95f0f7adb76",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "The current implementation looks fine to me since using `parametrize()` instead of the inheritance technique reduces the flexibility, therefore I would like to keep the current route.\r\nI believe the current status of this work deserves the purple color, I don't mind going to second round of discussion but that may lead to slow down the SIMD progress.",
        "createdAt" : "2020-10-28T12:44:44Z",
        "updatedAt" : "2020-10-28T12:45:49Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      },
      {
        "id" : "4b3a6493-f5fd-4031-8b56-108f2c4a152e",
        "parentId" : "5015f1e5-f12c-44b2-b997-f95f0f7adb76",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "I opened an issue gh-17667",
        "createdAt" : "2020-10-29T05:54:07Z",
        "updatedAt" : "2020-10-29T05:54:07Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac4ffe1d39d9cc845948079a24facf7057effb24",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +87,91 @@    def test_operators_shift(self):\n        if self.sfx in (\"u8\", \"s8\"):\n            return\n\n        data_a = self._data(self._int_max() - self.nlanes)"
  },
  {
    "id" : "b77debc2-d12f-4524-8105-fb95d9baa96f",
    "prId" : 16782,
    "prUrl" : "https://github.com/numpy/numpy/pull/16782#pullrequestreview-517232391",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6348d465-ec90-4e26-865b-ba4bce20a193",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think this would make more sense as an object rather than a base class:\r\n```suggestion\r\nclass SuffixInfo:\r\n    def __init__(self, npyv, sfx):\r\n        self.sfx = sfx  # the current data type suffix e.g. 's8'\r\n        self.npyv = npyv  # submodule of the desired SIMD extention, e.g. targets[\"AVX512F\"]\r\n\r\n    def __getattr__(self, attr):\r\n        \"\"\"\r\n        To call NPV intrinsics without the prefix 'npyv_' and\r\n        auto suffixing intrinsics according to class attribute 'sfx'\r\n        \"\"\"\r\n        return getattr(self.npyv, attr + \"_\" + self.sfx)\r\n```",
        "createdAt" : "2020-10-26T12:40:28Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "8d22aa08-8be3-4537-91ca-71f3fce98192",
        "parentId" : "6348d465-ec90-4e26-865b-ba4bce20a193",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "`_Test_Utility` is sharing common functions that affected by the tested vector data type and SIMD extension module\r\nso I would like to keep it with the current name instead of \"SuffixInfo\",  plus using it as seprate object will requires using `parametrize()`\r\n",
        "createdAt" : "2020-10-26T22:51:45Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac4ffe1d39d9cc845948079a24facf7057effb24",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +8,12 @@    npyv = None\n    # the current data type suffix e.g. 's8'\n    sfx  = None\n\n    def __getattr__(self, attr):"
  },
  {
    "id" : "38eebe2e-e0f7-4aca-8977-c034336ff082",
    "prId" : 16782,
    "prUrl" : "https://github.com/numpy/numpy/pull/16782#pullrequestreview-519928281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c69248b3-e9b6-4710-8259-022ea6e1576b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```suggestion\r\nclass _SIMD_INT:\r\n```",
        "createdAt" : "2020-10-26T12:40:44Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "6c186267-517a-4276-9e8f-e76ee598dbdf",
        "parentId" : "c69248b3-e9b6-4710-8259-022ea6e1576b",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "I considered resovled since this suggestion isn't applicable without `parametrize()`'s suggestion https://github.com/numpy/numpy/pull/16782#discussion_r511936247",
        "createdAt" : "2020-10-29T17:50:46Z",
        "updatedAt" : "2020-10-29T17:50:46Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac4ffe1d39d9cc845948079a24facf7057effb24",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +81,85 @@            return getattr(self.npyv, cvt_intrin.format(sfx[1:], sfx))(vector)\n\nclass _SIMD_INT(_Test_Utility):\n    \"\"\"\n    To test all integer vector types at once"
  },
  {
    "id" : "735e659c-a2b8-496f-9ddb-7c42705dc5ac",
    "prId" : 16782,
    "prUrl" : "https://github.com/numpy/numpy/pull/16782#pullrequestreview-519933674",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1b1ed72-dd7a-4d44-82a4-0ea4eae6a647",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```suggestion\r\n        data_a = self.sfx._data(self.sfx._int_max() - self.nlanes)\r\n```",
        "createdAt" : "2020-10-26T12:41:54Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d67bb124-7c90-41db-8c99-3b2fae0d12e1",
        "parentId" : "b1b1ed72-dd7a-4d44-82a4-0ea4eae6a647",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "I didn't understand this suggestion but I guess it related to `parametrize()`'s suggestion https://github.com/numpy/numpy/pull/16782#discussion_r511936247.\r\nHowever, with the use of `parametrize()`, the suggestion should be as following where `sfx` parameterized.\r\n```diff\r\n- data_a = self._data(self._int_max() - self.nlanes)\r\n+ data_a = sfx._data(sfx._int_max() - sfx.nlanes)\r\n```",
        "createdAt" : "2020-10-29T17:56:53Z",
        "updatedAt" : "2020-10-29T17:56:54Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac4ffe1d39d9cc845948079a24facf7057effb24",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +115,119 @@            return\n\n        data_a = self._data(self._int_max() - self.nlanes)\n        data_b = self._data(self._int_min(), reverse=True)\n        vdata_a, vdata_b = self.load(data_a), self.load(data_b)"
  },
  {
    "id" : "57a97e0d-672d-4e82-897b-3513352d525b",
    "prId" : 17681,
    "prUrl" : "https://github.com/numpy/numpy/pull/17681#pullrequestreview-522405788",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d2bd552-c4ba-4bcf-be32-9d24c9ba3116",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "nice!",
        "createdAt" : "2020-11-03T11:28:53Z",
        "updatedAt" : "2020-11-03T11:28:54Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f0298d62853e5233b0b829b08a11c160f0b6597",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +522,526 @@        data_sum = sum(data)\n        vsum = self.sum(vdata)\n        assert vsum == data_sum\n\nint_sfx = (\"u8\", \"s8\", \"u16\", \"s16\", \"u32\", \"s32\", \"u64\", \"s64\")"
  },
  {
    "id" : "a5d39459-271f-45be-a2aa-3da6a144ed8c",
    "prId" : 17958,
    "prUrl" : "https://github.com/numpy/numpy/pull/17958#pullrequestreview-557735933",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b11c836-039a-4995-a6bf-be838c2fabd2",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "```suggestion\r\n    def test_conversion_expand(self):\r\n        \"\"\"Test npyv_expand_u16_u8, npyv_expand_u32_u16\"\"\"\r\n```",
        "createdAt" : "2020-12-23T08:41:34Z",
        "updatedAt" : "2020-12-23T09:08:17Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "5b1cded7-195b-47df-970e-9bd3db771710",
        "parentId" : "2b11c836-039a-4995-a6bf-be838c2fabd2",
        "authorId" : "16f8768b-62bb-468a-bef5-f7adfae4fef5",
        "body" : "docstring added.",
        "createdAt" : "2020-12-23T09:09:11Z",
        "updatedAt" : "2020-12-23T09:09:11Z",
        "lastEditedBy" : "16f8768b-62bb-468a-bef5-f7adfae4fef5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3681b6af3be4220a6f380c0f34f63f77aaf4b07",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +664,668 @@        assert false_vsfx != true_vsfx\n\n    def test_conversion_expand(self):\n        \"\"\"\n        Test expand intrinics:"
  },
  {
    "id" : "68314db4-7f5a-4967-b4e3-a3a3e617d279",
    "prId" : 18086,
    "prUrl" : "https://github.com/numpy/numpy/pull/18086#pullrequestreview-559968168",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca8096b1-54f3-4079-a81e-b2a117091687",
        "parentId" : null,
        "authorId" : "16f8768b-62bb-468a-bef5-f7adfae4fef5",
        "body" : "shift by zero vector is meaningless too. why not apply this rule to `shl/shr  `?",
        "createdAt" : "2020-12-30T08:37:39Z",
        "updatedAt" : "2020-12-30T08:38:30Z",
        "lastEditedBy" : "16f8768b-62bb-468a-bef5-f7adfae4fef5",
        "tags" : [
        ]
      },
      {
        "id" : "f24023f1-32b5-473a-a640-6482982fbd0d",
        "parentId" : "ca8096b1-54f3-4079-a81e-b2a117091687",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "`shl/shr` shift the vector by a constant too. the difference here is `shli/shri` take an \"immediate\" constant which mean the operand loaded during compile time while the shift operand in `shl/shr` can be a register loaded from memory.\r\nfor example:\r\n```C\r\nunsigned shift_me = *ptr; // it can be zero who know?\r\nnpyv_shri_u32(a, 5); // applicable\r\nnpyv_shri_u32(a, shift_me); // not applicable\r\n\r\nnpyv_shr_u32(a, 5); // applicable\r\nnpyv_shr_u32(a, shift_me); // applicable\r\n```",
        "createdAt" : "2020-12-30T09:18:57Z",
        "updatedAt" : "2020-12-30T09:21:08Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "14385cdb4186c0636ad44532afa953473597dab8",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +180,184 @@            assert shr == data_shr_a\n\n        # shift by zero or max or out-range immediate constant is not applicable and illogical\n        for count in range(1, self._scalar_size()):\n            # load to cast"
  },
  {
    "id" : "5d337477-6bdf-4002-8d3f-2bd0ab58438f",
    "prId" : 18882,
    "prUrl" : "https://github.com/numpy/numpy/pull/18882#pullrequestreview-649937307",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fea2e74-8dfe-4f51-b7c5-800e661030e6",
        "parentId" : null,
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "the following are missing too\r\n```python\r\n\"\"\"\r\nTest intrinics:\r\n    npyv_min_##SFX\r\n    npyv_minp_##SFX\r\n\"\"\"\r\n````\r\nI think these changes made during your latest push",
        "createdAt" : "2021-05-02T17:40:05Z",
        "updatedAt" : "2021-05-02T17:40:10Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "238f4e5984a4e668dac70a05b6b4f49dabf239ba",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +342,346 @@            assert _max == data_max\n\n    def test_min(self):\n        data_a = self._data()\n        data_b = self._data(self.nlanes)"
  }
]