[
  {
    "id" : "a084ba78-d09a-4ed5-bc1b-a56e696dd077",
    "prId" : 8483,
    "prUrl" : "https://github.com/numpy/numpy/pull/8483#pullrequestreview-16864297",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4f434aa-93fe-4ad3-b4ff-d188f730f9bc",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, looking at this, it looks like we are only testing scalars, although calling the ufunc turns them into 0-D arrays, so strictly speaking I suppose we don't test scalars. Would probably need to use the `==` and `!=` operators. I note that those operators also appear to call the ufunc, so probably not worth a lot of trouble as the behavior will change in the future.",
        "createdAt" : "2017-01-16T18:46:35Z",
        "updatedAt" : "2017-01-16T18:46:36Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0cf8393d3b7e8bb6ae9f7c9871bf0a90e3b4896",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1118,1122 @@                    assert_warns(FutureWarning, op, td_other, td_nat)\n\n            assert_warns(FutureWarning, np.not_equal, dt_nat, dt_nat)\n            assert_warns(FutureWarning, np.not_equal, td_nat, td_nat)\n"
  },
  {
    "id" : "c8f7e8bc-ed77-4120-ac78-8118978e1212",
    "prId" : 11097,
    "prUrl" : "https://github.com/numpy/numpy/pull/11097#pullrequestreview-122851732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14aee3b5-fd6e-4247-be26-597a7c704bb2",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This test doesn't fail for me on master",
        "createdAt" : "2018-05-24T05:42:57Z",
        "updatedAt" : "2018-05-24T16:35:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1b040b74-a2c0-4216-94dd-b1b851982b31",
        "parentId" : "14aee3b5-fd6e-4247-be26-597a7c704bb2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Ah, I remember now that this was transient",
        "createdAt" : "2018-05-24T05:45:18Z",
        "updatedAt" : "2018-05-24T16:35:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ceb49b3d2ea827add5676476720e12b1794bc48",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +342,346 @@        expected = np.array([28, 30, 31], dtype='timedelta64[D]')\n        actual = np.array(inputs, dtype='timedelta64[D]')\n        assert_equal(expected, actual)\n\n    def test_timedelta_scalar_construction_units(self):"
  },
  {
    "id" : "9b07dbb4-f49e-4d62-a2f9-64ee809a04dd",
    "prId" : 11852,
    "prUrl" : "https://github.com/numpy/numpy/pull/11852#pullrequestreview-153067935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a159adb2-5f7a-4b9c-b776-f1f7a8d5cd40",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm not sure allowing default units to be implied is a good idea. Is there precedent for this in `datetime64`?",
        "createdAt" : "2018-09-06T16:55:33Z",
        "updatedAt" : "2018-09-06T16:55:39Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "7b5da167-5c32-4862-8a27-5b273914153c",
        "parentId" : "a159adb2-5f7a-4b9c-b776-f1f7a8d5cd40",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "Can you clarify? `np.timedelta64(123)` already casts to the default `m8` in the master branch; the code to handle a `np.int64(123)` in the same way is just duplicating that logic for another kind of integer input--it is an actual copy-paste of code for regular Python integer handling farther up.",
        "createdAt" : "2018-09-06T18:40:14Z",
        "updatedAt" : "2018-09-06T18:40:14Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a71482c93c586bbf751f073604fc0e23b106f0d",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +274,278 @@        else:\n            assert_equal(np.timedelta64(np.int64(123)),\n                         np.timedelta64(123))\n\n    def test_timedelta_scalar_construction(self):"
  },
  {
    "id" : "6c5b7fae-7a58-4188-b253-ae259fe2fa99",
    "prId" : 12683,
    "prUrl" : "https://github.com/numpy/numpy/pull/12683#pullrequestreview-194384666",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba5c4c6a-ecbd-47c1-ba83-205098a4bbb2",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you reuse them in the source by creating a global variable with these cases?",
        "createdAt" : "2019-01-20T01:01:47Z",
        "updatedAt" : "2019-01-20T01:01:47Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "897aa217-7ccf-405d-a6b3-61869e9c301f",
        "parentId" : "ba5c4c6a-ecbd-47c1-ba83-205098a4bbb2",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "or a class (same thing, just makes the global state local to the class)",
        "createdAt" : "2019-01-20T09:28:42Z",
        "updatedAt" : "2019-01-20T09:28:42Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b81a240a4ffffea8a502afbdea43d8bf2991228",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +1190,1194 @@\n    @pytest.mark.parametrize(\"op1, op2\", [\n        # reuse cases from floordiv\n        # div by 0\n        (np.timedelta64(10, 'us'),"
  },
  {
    "id" : "e009cee2-480b-4b72-bed8-1005a8ce1724",
    "prId" : 13218,
    "prUrl" : "https://github.com/numpy/numpy/pull/13218#pullrequestreview-221452359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "186b8290-c48f-42be-8824-fefc3150f317",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "An amusing test :)",
        "createdAt" : "2019-04-02T05:14:35Z",
        "updatedAt" : "2019-04-10T05:36:56Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "3837444977aaa207c0ce031ad0167ea0e2400506",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2212,2216 @@        assert_(not np.isfinite(np.datetime64('NaT', 'ms')))\n        assert_(not np.isfinite(np.datetime64('NaT', 'ns')))\n        assert_(np.isfinite(np.datetime64('2038-01-19T03:14:07')))\n\n        assert_(not np.isfinite(np.timedelta64('NaT', \"ms\")))"
  },
  {
    "id" : "98c0378a-0484-4949-b1b4-6f85213f96e1",
    "prId" : 14718,
    "prUrl" : "https://github.com/numpy/numpy/pull/14718#pullrequestreview-306960324",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b3d7d9f-b035-4c90-8eae-737f7671ae88",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "Yes, these tests are very clean/nice. Seems pretty clear that this is type-size, not value-size.",
        "createdAt" : "2019-10-25T03:22:04Z",
        "updatedAt" : "2019-10-25T03:22:52Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac757b50edbbdb49cf0c1804d7f6273e16d269a4",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +84,88 @@        # could overflow\n        assert_(np.can_cast('u8', 'm8', casting='same_kind'))\n        assert_(not np.can_cast('u8', 'm8', casting='safe'))\n\n        # Cannot cast safely/same_kind from float to timedelta"
  }
]