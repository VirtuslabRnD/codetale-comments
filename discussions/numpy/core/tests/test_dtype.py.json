[
  {
    "id" : "7ec1a30b-5961-4103-a4a8-5a0a9e924826",
    "prId" : 4095,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abb16894-038d-4cb7-8403-1c810b453a86",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The 'l' looks a lot like '1', might want to use a different variable name.\n",
        "createdAt" : "2013-12-19T15:57:35Z",
        "updatedAt" : "2013-12-19T15:57:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1951d3d4c1011132560ae4326f636e5cef01d918",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +296,300 @@        # should be a tuple (immutable) of base type integers.\n        a = np.array([1, 2, 3], dtype=np.int16)\n        l = [1, 2, 3]\n        # Array gets converted\n        dt = np.dtype([('a', 'f4', a)])"
  },
  {
    "id" : "724abdd5-40ea-440e-a9c6-0407c073fb5e",
    "prId" : 4095,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3744f9a-04d0-4c46-a51e-0051856051be",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So 'l' is the shape of the subarray?\n",
        "createdAt" : "2013-12-19T15:59:02Z",
        "updatedAt" : "2013-12-19T15:59:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1951d3d4c1011132560ae4326f636e5cef01d918",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +302,306 @@        assert_(isinstance(dt['a'].shape[0], int))\n        # List gets converted\n        dt = np.dtype([('a', 'f4', l)])\n        assert_(isinstance(dt['a'].shape, tuple))\n        # "
  },
  {
    "id" : "abc37d35-2bf2-4863-a835-7f202be372c6",
    "prId" : 12254,
    "prUrl" : "https://github.com/numpy/numpy/pull/12254#pullrequestreview-168453175",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b72fb30-d4e6-4366-82bb-5cd141ccaabe",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Previously this produced `dtype([('a', 'u1', (7,)), ('b', 'u1')], align=True)`, which was garbage.",
        "createdAt" : "2018-10-25T15:43:06Z",
        "updatedAt" : "2018-10-26T04:24:36Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0709d92f78cc6e78ba79da9a25627db87059b31d",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +800,804 @@                ('a', ctypes.c_uint8, 7),\n                ('b', ctypes.c_uint8, 1)\n            ]\n        assert_raises(TypeError, np.dtype, BitfieldStruct)\n        assert_raises(TypeError, np.dtype, BitfieldStruct())"
  },
  {
    "id" : "1290c751-a507-4435-83b9-7c5fd46d18c6",
    "prId" : 12254,
    "prUrl" : "https://github.com/numpy/numpy/pull/12254#pullrequestreview-168454069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62ec9c56-a6f2-4eeb-a3c2-aa8140ea2b23",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "And this one produced `dtype({'names':['a','b'], 'formats':['u1','<u2'], 'offsets':[0,2], 'itemsize':4}, align=True)`, which is not a union",
        "createdAt" : "2018-10-25T15:44:46Z",
        "updatedAt" : "2018-10-26T04:24:36Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0709d92f78cc6e78ba79da9a25627db87059b31d",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +816,820 @@                ('a', ctypes.c_uint8),\n                ('b', ctypes.c_uint16),\n            ]\n        expected = np.dtype(dict(\n            names=['a', 'b'],"
  },
  {
    "id" : "4e0cb39c-2215-4908-bf65-d7512826f9cf",
    "prId" : 12380,
    "prUrl" : "https://github.com/numpy/numpy/pull/12380#pullrequestreview-174784629",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe1d085f-9e21-41c0-a944-4906c550afa0",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you add a test with a packed LittleEndianStructure too?",
        "createdAt" : "2018-11-14T08:59:07Z",
        "updatedAt" : "2018-11-14T12:12:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "31c54cbe-bb86-4185-928d-6af916451836",
        "parentId" : "fe1d085f-9e21-41c0-a944-4906c550afa0",
        "authorId" : "bf879167-0234-478d-94d9-47021289f4b6",
        "body" : "Added. ",
        "createdAt" : "2018-11-14T10:14:46Z",
        "updatedAt" : "2018-11-14T12:12:31Z",
        "lastEditedBy" : "bf879167-0234-478d-94d9-47021289f4b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "05ed2e036450eca177588d5be632e1a472dda30b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +858,862 @@\n    def test_big_endian_structure_packed(self):\n        class BigEndStruct(ctypes.BigEndianStructure):\n            _fields_ = [\n                ('one', ctypes.c_uint8),"
  },
  {
    "id" : "5950ffeb-56f9-44bc-b5b7-21cd7cae0c77",
    "prId" : 12405,
    "prUrl" : "https://github.com/numpy/numpy/pull/12405#pullrequestreview-176048241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37c3389b-6747-4bba-9538-2cf97218d817",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Needs a test where the `Union` is packed too",
        "createdAt" : "2018-11-17T03:07:40Z",
        "updatedAt" : "2018-11-18T11:07:49Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "435d7c1a-342e-431d-bde5-865d8883d282",
        "parentId" : "37c3389b-6747-4bba-9538-2cf97218d817",
        "authorId" : "bf879167-0234-478d-94d9-47021289f4b6",
        "body" : "Added it. ",
        "createdAt" : "2018-11-17T09:56:22Z",
        "updatedAt" : "2018-11-18T11:07:49Z",
        "lastEditedBy" : "bf879167-0234-478d-94d9-47021289f4b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "bec0cbe1c1e029e0eadfe92d407421a4be7b2d41",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +830,834 @@            ]\n\n        class Union(ctypes.Union):\n            _fields_ = [\n                ('a', ctypes.c_uint8),"
  },
  {
    "id" : "265e8d6e-edd7-4683-9576-84169a1deb1b",
    "prId" : 12405,
    "prUrl" : "https://github.com/numpy/numpy/pull/12405#pullrequestreview-176084599",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "feda32b3-f2b2-481e-b70c-4ab8ca04fe93",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "nit: methods should be separated by one blank line, not two",
        "createdAt" : "2018-11-17T21:32:24Z",
        "updatedAt" : "2018-11-18T11:07:49Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "16933ec1-50d9-4354-b427-a6734c414e4b",
        "parentId" : "feda32b3-f2b2-481e-b70c-4ab8ca04fe93",
        "authorId" : "bf879167-0234-478d-94d9-47021289f4b6",
        "body" : "Fixed. ",
        "createdAt" : "2018-11-18T11:02:51Z",
        "updatedAt" : "2018-11-18T11:07:49Z",
        "lastEditedBy" : "bf879167-0234-478d-94d9-47021289f4b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "bec0cbe1c1e029e0eadfe92d407421a4be7b2d41",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +845,849 @@        self.check(Union, expected)\n\n    def test_union_packed(self):\n        class Struct(ctypes.Structure):\n            _fields_ = ["
  },
  {
    "id" : "6ec68001-20c8-4edc-88e4-3a1be9efe005",
    "prId" : 12650,
    "prUrl" : "https://github.com/numpy/numpy/pull/12650#pullrequestreview-189653124",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c1b7c1e-fa35-4912-beac-a4337e77f8c6",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Turns out the better way to write this is `pytest.param(dt, p, 12, obj, id=\"<structured subarray 2>\")`, which eliminate the need for the label` arguments below.",
        "createdAt" : "2019-01-06T23:16:39Z",
        "updatedAt" : "2019-01-14T19:55:38Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0b26fe03-6568-41c7-baa1-acfe610cc153",
        "parentId" : "0c1b7c1e-fa35-4912-beac-a4337e77f8c6",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "oh. The pytest doc could really use a bit more example on the parameterize ref. Or maybe I just missed it.",
        "createdAt" : "2019-01-06T23:36:26Z",
        "updatedAt" : "2019-01-14T19:55:38Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "99f199dc-d787-42df-baa3-f21ed1bef9dc",
        "parentId" : "0c1b7c1e-fa35-4912-beac-a4337e77f8c6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "No not your fault, the docs are very hard to find here.",
        "createdAt" : "2019-01-07T00:38:19Z",
        "updatedAt" : "2019-01-14T19:55:38Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9963a9b854e6e33dd15a927fd865619e18e8a7b8",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +484,488 @@    p = (0, [[(obj, obj)] * 3] * 2)\n    yield pytest.param(dt, p, 12, obj, id=\"<structured subarray 2>\")\n\n\n@pytest.mark.skipif(not HAS_REFCOUNT, reason=\"Python lacks refcounts\")"
  },
  {
    "id" : "d8ec2514-d2ca-4a7f-aae3-d386a5059991",
    "prId" : 12650,
    "prUrl" : "https://github.com/numpy/numpy/pull/12650#pullrequestreview-192335391",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a890c238-7036-47f4-bda3-5850584e69ec",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Have to think about it. This test is good, but it spams valgrind, because uninitialized buffers are copied around. Maybe for now that is good. In the longer run – if we want to continue with such effort here – could add valgrind detection to the tests, which may be an option to skip it.",
        "createdAt" : "2019-01-09T14:33:43Z",
        "updatedAt" : "2019-01-14T19:55:38Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "745e54d4-332d-4466-b16f-5025c1951aab",
        "parentId" : "a890c238-7036-47f4-bda3-5850584e69ec",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Could add a `@pytest.mark.confuses_valgrind` [custom mark](https://docs.pytest.org/en/latest/example/markers.html#mark-examples), which will run the test by default, but if run as `valgrind python runtest.py -- -m \"not confuses_valgrind\"` will skip it ",
        "createdAt" : "2019-01-13T06:15:48Z",
        "updatedAt" : "2019-01-14T19:55:38Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "b713de9a-6e43-4529-b800-76489fb57ab8",
        "parentId" : "a890c238-7036-47f4-bda3-5850584e69ec",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Added `pytest.mark.valgrind_error` (it is a true error, not just confusion) and rebased.",
        "createdAt" : "2019-01-14T19:57:49Z",
        "updatedAt" : "2019-01-14T19:57:49Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9963a9b854e6e33dd15a927fd865619e18e8a7b8",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +596,600 @@                                    'offsets':[4]}, (2, 3))])\n\n    @pytest.mark.xfail(reason=\"inaccessible data is changed see gh-12686.\")\n    @pytest.mark.valgrind_error(reason=\"reads from unitialized buffers.\")\n    def test_sparse_field_assignment(self):"
  },
  {
    "id" : "9eebc2b7-902d-4644-a20d-8991d5d9b91a",
    "prId" : 13003,
    "prUrl" : "https://github.com/numpy/numpy/pull/13003#pullrequestreview-206116724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af72930f-a99c-4a9d-8e1f-0cfd0475837c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "nit: drop this",
        "createdAt" : "2019-02-21T04:12:39Z",
        "updatedAt" : "2019-05-26T04:57:56Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "65da9049eb34db40343edc3e24059944b354d918",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +967,971 @@            # numpy will think we are deallocating a base type [1.17, 2019-02].\n            dtype = np.dtype(\"f,f\")\n            pass\n\n        np.dtype(dt)"
  },
  {
    "id" : "6ed1f3e5-ca6a-4ed1-9432-1a6eff7cd55c",
    "prId" : 13326,
    "prUrl" : "https://github.com/numpy/numpy/pull/13326#pullrequestreview-239690973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fdb2c0a-04c8-4c84-bf21-91b183ec4d46",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Does changing this to (1)i4 fix the warning? We should try to write our tests to not rely on deprecated behavior for anything other than testing the deprecation itself.",
        "createdAt" : "2019-05-20T12:27:21Z",
        "updatedAt" : "2019-05-24T21:46:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "74c30a75-714c-4a3e-8d31-c10ef6c61725",
        "parentId" : "3fdb2c0a-04c8-4c84-bf21-91b183ec4d46",
        "authorId" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "body" : "No, right now `\"(1)i4\"` is treated as `1i4` (both return a scalar i4 type).  IOW when specifying dtypes as strings there's no way to generate a shape-(1,) field.",
        "createdAt" : "2019-05-20T13:28:14Z",
        "updatedAt" : "2019-05-24T21:46:57Z",
        "lastEditedBy" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "tags" : [
        ]
      },
      {
        "id" : "f886eadb-065c-4152-b6a0-e4c7a51e23b7",
        "parentId" : "3fdb2c0a-04c8-4c84-bf21-91b183ec4d46",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "(1,)i4 is also no good?",
        "createdAt" : "2019-05-20T16:17:21Z",
        "updatedAt" : "2019-05-24T21:46:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "da08753f-9be3-4e56-ace4-9a369b145a7a",
        "parentId" : "3fdb2c0a-04c8-4c84-bf21-91b183ec4d46",
        "authorId" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "body" : "Ah, (1,)i4 works, edited.",
        "createdAt" : "2019-05-20T19:50:06Z",
        "updatedAt" : "2019-05-24T21:46:57Z",
        "lastEditedBy" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad1e0600e45b9fa71096d0a0f10c1474e003f373",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +452,456 @@        #Check that subarrays are aligned\n        t1 = np.dtype('(1,)i4', align=True)\n        t2 = np.dtype('2i4', align=True)\n        assert_equal(t1.alignment, t2.alignment)\n"
  },
  {
    "id" : "1d524fb9-645e-48ad-961c-ab9c78eb9adb",
    "prId" : 13326,
    "prUrl" : "https://github.com/numpy/numpy/pull/13326#pullrequestreview-239551343",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83927365-e815-45d2-a5a3-53fc96c0ef09",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Let's just fix the test here too. It's not trying to test the dtype construction here.",
        "createdAt" : "2019-05-20T12:29:26Z",
        "updatedAt" : "2019-05-24T21:46:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "79400d0b-6854-457e-a05a-ec31cfc362e4",
        "parentId" : "83927365-e815-45d2-a5a3-53fc96c0ef09",
        "authorId" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "body" : "what dtype equality do you want to check here?  this checks that (dtype) is equivalent to (dtype, 1) which is exactly what this PR modifies.  we can't test that (dtype, 1) is equivalent to (dtype, (1,)) given that, well, that's simply not true yet.",
        "createdAt" : "2019-05-20T13:29:54Z",
        "updatedAt" : "2019-05-24T21:46:57Z",
        "lastEditedBy" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "tags" : [
        ]
      },
      {
        "id" : "c4a01b4b-81cc-448a-8fb7-4d6f3463ec47",
        "parentId" : "83927365-e815-45d2-a5a3-53fc96c0ef09",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "You're right, my comment is misplaced here. I think I'd keep this test but with a comment explaining what the behavior will be once the deprecation expires.",
        "createdAt" : "2019-05-20T14:47:33Z",
        "updatedAt" : "2019-05-24T21:46:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1430ea73-dd69-43e3-ada2-d35a072ee376",
        "parentId" : "83927365-e815-45d2-a5a3-53fc96c0ef09",
        "authorId" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "body" : "done",
        "createdAt" : "2019-05-20T14:53:28Z",
        "updatedAt" : "2019-05-24T21:46:57Z",
        "lastEditedBy" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad1e0600e45b9fa71096d0a0f10c1474e003f373",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +361,365 @@        # FutureWarning during deprecation period; after it is passed this\n        # should instead check that \"(1)f8\" == \"1f8\" == (\"f8\", 1).\n        with pytest.warns(FutureWarning):\n            assert_dtype_equal(np.dtype('f8'), np.dtype(('f8', 1)))\n        assert_dtype_equal(np.dtype((int, 2)), np.dtype((int, (2,))))"
  }
]