[
  {
    "id" : "ded57c0b-265d-4202-858b-ef7e7abc5570",
    "prId" : 459,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90ede68f-5a82-40a4-b014-dbf1d7f2a8bc",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "Not sure whether we care, but if it's desireable to keep the source files as ascii, I think this line could be written\n\n```\nexpected = u\"array(['\\xe9'], dtype=object)\"\n```\n\nand work on both py2 and py3.\n",
        "createdAt" : "2012-09-26T13:45:21Z",
        "updatedAt" : "2012-09-26T13:45:21Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "be033403-547e-49ee-8867-492ece0a06ce",
        "parentId" : "90ede68f-5a82-40a4-b014-dbf1d7f2a8bc",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "Err, that's if we're running stuff through 2to3. If not then we can leave off the `u` at the beginning and I believe it should still work (though be slightly more confusing).\n",
        "createdAt" : "2012-09-26T13:47:02Z",
        "updatedAt" : "2012-09-26T13:47:02Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f5bbfaec635de96892e003457a1d638bf0c3786",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +153,157 @@    import sys\n    if sys.version_info[0] >= 3:\n        expected = \"array(['é'], dtype=object)\"\n    else:\n        expected = \"array([u'\\\\xe9'], dtype=object)\""
  },
  {
    "id" : "50636867-76eb-4731-b81c-8f53e163583c",
    "prId" : 8981,
    "prUrl" : "https://github.com/numpy/numpy/pull/8981#pullrequestreview-39015427",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad0e830d-362c-4959-8154-005dc41153f8",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can we add an `eval(repr(x), vars(np)) == x` test, like we have elsewhere, for both scalars and arrays? That's one of the features of this patch too",
        "createdAt" : "2017-05-18T18:13:36Z",
        "updatedAt" : "2017-11-12T16:29:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fdfdd6a52fc0761c0d45931247c5ed2480224eb",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +196,200 @@            r\"       b'\\x1B\\x5B\\x33\\x31\\x6D\\x52\\x65\\x64'],\" \"\\n\"\n            r\"      dtype='|V8')\")\n\n        assert_equal(eval(repr(a), vars(np)), a)\n        assert_equal(eval(repr(a[0]), vars(np)), a[0])"
  },
  {
    "id" : "863db73f-ad49-4397-9f60-46903eeba37f",
    "prId" : 9332,
    "prUrl" : "https://github.com/numpy/numpy/pull/9332#pullrequestreview-47439525",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f25279d-e5c2-4c00-ba55-d90f1e5f5b3d",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Your comment below got lost on github, but I see it in the email.\r\n\r\nThis test class implements `tearDown` which resets the printoptions, so we don't need to worry about pollution. Will add the str test.",
        "createdAt" : "2017-06-30T16:40:47Z",
        "updatedAt" : "2017-11-09T17:28:12Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbf543801589270834f270f4bae3e21926a4321a",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +260,264 @@        x = np.array(1)\n        np.set_printoptions(formatter={'all':lambda x: \"test\"})\n        assert_equal(repr(x), \"array(test)\")\n        # str is unaffected\n        assert_equal(str(x), \"1\")"
  },
  {
    "id" : "0d3971ca-dcfb-4743-82db-3a252556632a",
    "prId" : 9332,
    "prUrl" : "https://github.com/numpy/numpy/pull/9332#pullrequestreview-65382864",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd04cc0f-b661-443d-ba8f-8ee6cfe7c933",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This has an issue number, right?",
        "createdAt" : "2017-09-26T05:59:09Z",
        "updatedAt" : "2017-11-09T17:28:12Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "6c6c2252-d502-4381-9aca-3022bf5549d1",
        "parentId" : "bd04cc0f-b661-443d-ba8f-8ee6cfe7c933",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I don't think so... I think we came up with this one in #9143.",
        "createdAt" : "2017-09-26T22:35:54Z",
        "updatedAt" : "2017-11-09T17:28:12Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbf543801589270834f270f4bae3e21926a4321a",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +245,249 @@            assert_equal(str(np.array('café', np.unicode_)), 'café')\n            assert_equal(repr(np.array('café', np.unicode_)),\n                         \"array('café',\\n      dtype='<U4')\")\n        else:\n            assert_equal(repr(np.array(u'café', np.unicode_)),"
  },
  {
    "id" : "c9fe47de-7c1b-458f-8639-d90c97df93ae",
    "prId" : 9332,
    "prUrl" : "https://github.com/numpy/numpy/pull/9332#pullrequestreview-75510966",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6987294-da0f-436c-ba4e-f9bdc7c819e1",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Would be nice to have a test that `style` is not deprecated in legacy mode.",
        "createdAt" : "2017-11-09T16:58:06Z",
        "updatedAt" : "2017-11-09T17:28:12Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbf543801589270834f270f4bae3e21926a4321a",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +325,329 @@        assert_equal(repr(b), 'array([+1.234e+09])')\n\n        np.set_printoptions(legacy=True)\n        assert_equal(repr(a), 'array([ 0.,  1.,  2.,  3.])')\n        assert_equal(repr(b),  'array([  1.23400000e+09])')"
  },
  {
    "id" : "745c365c-9d9a-4f97-a1b9-cc159d9e4dc2",
    "prId" : 10032,
    "prUrl" : "https://github.com/numpy/numpy/pull/10032#pullrequestreview-77673335",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "728dc4c5-f181-48e3-8a2e-0338651fbffc",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Since you touched it anyway, this test might be a lot clearer with `textwrap.dedent(r\"\"\"\\` ... `\"\"\")` to handle the multiline indented string",
        "createdAt" : "2017-11-19T23:27:46Z",
        "updatedAt" : "2017-11-20T05:18:09Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "9016083d-1e48-4f6e-bee7-d38b6ec5b026",
        "parentId" : "728dc4c5-f181-48e3-8a2e-0338651fbffc",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Yeah I didn't know about that until I saw you use it in the maskedarray PR. Good idea!",
        "createdAt" : "2017-11-20T00:09:01Z",
        "updatedAt" : "2017-11-20T05:18:09Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "5afcad4c-e3d8-47d4-8072-19441a6f9a75",
        "parentId" : "728dc4c5-f181-48e3-8a2e-0338651fbffc",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I think this line is better without dedent because it uses the `r` raw mode, which prevents me from starting the string with `\"\"\"\\`.\r\n\r\nThe lines below are better with dedent, I'll change those.",
        "createdAt" : "2017-11-20T01:16:32Z",
        "updatedAt" : "2017-11-20T05:18:09Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "ed019e07-891f-4d1f-83b4-889b43048369",
        "parentId" : "728dc4c5-f181-48e3-8a2e-0338651fbffc",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Raw should work with `\"\"\"`, some of the docstrings are raw strings.",
        "createdAt" : "2017-11-20T01:58:14Z",
        "updatedAt" : "2017-11-20T05:18:09Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e581c368-5c25-4f94-ac1b-3c603fe6ef88",
        "parentId" : "728dc4c5-f181-48e3-8a2e-0338651fbffc",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "The problem I'm having is that `textwrap.dedent` needs the starting newline to be escaped, ie the arg should start with `\"\"\"\\` (escaped newline). But in a raw string I can't escape the newline.\r\n\r\nFor instance the following script:\r\n```python\r\nfrom __future__ import print_function\r\nimport textwrap\r\nprint(textwrap.dedent(r\"\"\"\\\r\n    aaa\r\n    bbb\r\n    ccc\"\"\"))\r\n```\r\nprints\r\n```\r\n\\\r\n    aaa\r\n    bbb\r\n    ccc\r\n```\r\n(curiously the ipython shell seems to correctly escape the newline, but not the plain python shell nor scripts. Edit: That's actually an ipython bug: https://github.com/ipython/ipython/issues/5828)",
        "createdAt" : "2017-11-20T02:49:03Z",
        "updatedAt" : "2017-11-20T05:18:09Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "3a89bf22-b0ac-462f-889e-88956fa4b5ea",
        "parentId" : "728dc4c5-f181-48e3-8a2e-0338651fbffc",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "~~But anyway, I can fix it by just avoiding the newline... will fix.~~ sorry I got confused.. I still don't see a better solution than what's there.",
        "createdAt" : "2017-11-20T02:50:51Z",
        "updatedAt" : "2017-11-20T05:18:09Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "bd8133fd-eede-4be1-aa93-e93ea15d3469",
        "parentId" : "728dc4c5-f181-48e3-8a2e-0338651fbffc",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "You're right, I hadn't though about the raw string interfering with the initial newline, Thanks for pointing that out to me before I run into it elsewhere! `textwrap.dedent(...).strip()` would do the job, but it's not so clear an improvement.",
        "createdAt" : "2017-11-20T03:05:22Z",
        "updatedAt" : "2017-11-20T05:18:09Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "25bc65dcf576d021a2d1c53219a15960d5f6804c",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +200,204 @@        assert_equal(repr(a),\n            r\"array([b'\\x1B\\x5B\\x32\\x4B\\x07\\x41\\x0A\\x08',\" \"\\n\"\n            r\"       b'\\x1B\\x5B\\x33\\x31\\x6D\\x52\\x65\\x64'], dtype='|V8')\")\n\n        assert_equal(eval(repr(a), vars(np)), a)"
  },
  {
    "id" : "80223d31-77e1-4b0b-8a9a-3275b53f9054",
    "prId" : 10120,
    "prUrl" : "https://github.com/numpy/numpy/pull/10120#pullrequestreview-79744763",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f19c5a4-d355-441e-9e21-a955c888e86d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Needs a try-finally, maybe? Or does this have cleanup?",
        "createdAt" : "2017-11-29T06:11:21Z",
        "updatedAt" : "2017-11-29T06:11:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "b49b20ff5c5154114eb41254cf449e195b5ba45e",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +490,494 @@    def test_legacy_stray_comma(self):\n        np.set_printoptions(legacy='1.13')\n        assert_equal(str(np.arange(10000)), '[   0    1    2 ..., 9997 9998 9999]')\n\n        np.set_printoptions(legacy=False)"
  },
  {
    "id" : "a78906b4-c66d-4ba2-8d11-751b899b84ec",
    "prId" : 10175,
    "prUrl" : "https://github.com/numpy/numpy/pull/10175#pullrequestreview-82070764",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ffb3d3a-806d-4264-8177-100738a7157e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "These are all extra tests from #10172",
        "createdAt" : "2017-12-08T05:43:24Z",
        "updatedAt" : "2017-12-08T05:43:24Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "528c8c8d8a06116ac2786279a4228290c158a1ab",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +274,278 @@                                     ' 1]')\n        assert_equal(make_str(a, 5), '[111\\n'\n                                     ' 111]')\n\n        b = a[None,None,:]"
  },
  {
    "id" : "80cef467-017b-42f6-9670-5197528d9315",
    "prId" : 10176,
    "prUrl" : "https://github.com/numpy/numpy/pull/10176#pullrequestreview-82074666",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b08cdabe-cc8c-4cc4-8d6f-596e99b671b5",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm guessing we prefer this output to the following:\r\n```\r\narray([2, 2, 2, 2,\r\n       2, 2, 2, 2\r\n       ])\r\n```",
        "createdAt" : "2017-12-08T06:21:11Z",
        "updatedAt" : "2017-12-08T06:28:20Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3c977223-8d31-40a4-96fb-62199a565f85",
        "parentId" : "b08cdabe-cc8c-4cc4-8d6f-596e99b671b5",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I say yes !",
        "createdAt" : "2017-12-08T06:23:55Z",
        "updatedAt" : "2017-12-08T06:28:20Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "3694c17f670a2682bf4347982146c532657a1c03",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +564,568 @@            array([2, 2, 2,\n                   2, 2, 2,\n                   2, 2])\"\"\")\n        )\n"
  },
  {
    "id" : "3910fddc-62ae-4f50-8277-564219d8ac9b",
    "prId" : 10361,
    "prUrl" : "https://github.com/numpy/numpy/pull/10361#pullrequestreview-88978110",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4af4055-8342-466a-8b98-d8af5203d539",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "The legacy output was just bad!",
        "createdAt" : "2018-01-16T03:29:43Z",
        "updatedAt" : "2018-01-29T00:19:01Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "652892bf387344db6cd729fd5acbe4ac0c15b69c",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +466,470 @@        assert_equal(repr(np.array([0.])), 'array([ 0.])')\n        assert_equal(repr(c),\n            \"array([ 1.00000000+1.j        ,  1.12345679+1.12345679j])\")\n        # gh-10383\n        assert_equal(str(np.array([-1., 10])), \"[ -1.  10.]\")"
  },
  {
    "id" : "734e8d07-517c-4596-b075-9d45f521c3aa",
    "prId" : 10367,
    "prUrl" : "https://github.com/numpy/numpy/pull/10367#pullrequestreview-88072688",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d52efbc8-5f38-4444-954d-8d881813c36f",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Previously: `array([), ), ), )], dtype='[]')`",
        "createdAt" : "2018-01-11T07:11:53Z",
        "updatedAt" : "2018-01-11T16:56:24Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "087619a78dedb3f491654d727d279c1dcb4fb480",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +69,73 @@        no_fields = np.dtype([])\n        arr_no_fields = np.empty(4, dtype=no_fields)\n        assert_equal(repr(arr_no_fields), 'array([(), (), (), ()], dtype=[])')\n\n"
  },
  {
    "id" : "9b55da88-29b3-4843-80f2-bce859131b62",
    "prId" : 10698,
    "prUrl" : "https://github.com/numpy/numpy/pull/10698#pullrequestreview-106713212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6ac9ec1-0f96-41aa-a571-56d400cfa2ba",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So this test is supposed to fail? I'm updating this for pytest to `xfail`, does that make sense? Wouldn't it make more sense to write a test that succeeds?",
        "createdAt" : "2018-03-24T22:33:41Z",
        "updatedAt" : "2018-03-24T22:33:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "04478336-eb05-4145-b27b-8e1ac8c54e66",
        "parentId" : "d6ac9ec1-0f96-41aa-a571-56d400cfa2ba",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "It is expected to fail, I think `xfail` makes sense.\r\n\r\nWe had previously fixed it so it worked,, but then had to revert those changes because the fix caused a different back-compat bug. I left the test in because it would be nice to one day have it work, in which case we can just re-enable the test.",
        "createdAt" : "2018-03-24T23:21:31Z",
        "updatedAt" : "2018-03-24T23:22:10Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "04d2f0494f0fef2ede1461053b6cfc9bd37aaf2f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +35,39 @@        )\n\n    @dec.knownfailureif(True, \"See gh-10544\")\n    def test_object_subclass(self):\n        class sub(np.ndarray):"
  },
  {
    "id" : "8a77fd10-cdde-4471-b6ca-137bb207382e",
    "prId" : 15189,
    "prUrl" : "https://github.com/numpy/numpy/pull/15189#pullrequestreview-340940088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82b46a82-13fc-4068-a556-e9f515c58c9f",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "A comment with an example of what `text` is and what the test is about might help clarify what is going on here",
        "createdAt" : "2020-01-10T03:06:24Z",
        "updatedAt" : "2020-02-05T10:43:29Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "c1f140b1-a867-4a9e-850a-52edb2601cad",
        "parentId" : "82b46a82-13fc-4068-a556-e9f515c58c9f",
        "authorId" : "3382adc4-d687-48c2-aca2-3bd941d38e92",
        "body" : "Done.",
        "createdAt" : "2020-01-10T03:37:47Z",
        "updatedAt" : "2020-02-05T10:43:29Z",
        "lastEditedBy" : "3382adc4-d687-48c2-aca2-3bd941d38e92",
        "tags" : [
        ]
      }
    ],
    "commit" : "8eb9cfcd064a412f5757622d1da343b1730c034d",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +407,411 @@        result = np.array2string(a, max_line_width=len(repr(text)) * 2 + 3)\n        assert_equal(result, expected_repr)\n\n    @pytest.mark.skipif(not HAS_REFCOUNT, reason=\"Python lacks refcounts\")\n    def test_refcount(self):"
  }
]