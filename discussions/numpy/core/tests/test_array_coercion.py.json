[
  {
    "id" : "66f1e60f-8cdd-4ddf-8386-c4d2f301971c",
    "prId" : 16200,
    "prUrl" : "https://github.com/numpy/numpy/pull/16200#pullrequestreview-445187756",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98df8a0e-0474-486e-87bf-7a3a7447e3bf",
        "parentId" : null,
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "maybe its already tested somewhere, but if not, would be nice to have an array   \r\n```\r\nx = np.array([\"qwwqwd\", \"qwdqwdwdqdqdwq\"], dtype=object)\r\nz = x.astype(\"S\")\r\n```\r\nand make sure it finds the right dtype obj ?\r\n\r\nsimilarly, since we are supporting it in the code:\r\n\r\n```\r\n x = np.array([\"2020-03-03\", \"2020-03-04\"], dtype=\"S\")\r\n z = x.astype(np.datetime64)\r\n```\r\n\r\nalso a test for assigning np.datetime64 obj to an element of string array, to test the behavior before this PR.",
        "createdAt" : "2020-06-25T02:11:09Z",
        "updatedAt" : "2020-07-08T23:39:29Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "d96358e4-a564-4119-b588-63b196d15d65",
        "parentId" : "98df8a0e-0474-486e-87bf-7a3a7447e3bf",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Hmmm, the datetime test seemed to cover these reasonably well, so I did not add a new one. I am pretty sure we already have tests for the `astype` case, at least simple ones. Probably in `test_api` or `test_multiarray`, but I can look it up later.",
        "createdAt" : "2020-06-25T02:55:29Z",
        "updatedAt" : "2020-07-08T23:39:29Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "d392c5d2-2cf4-42c5-83b7-67294d833fc0",
        "parentId" : "98df8a0e-0474-486e-87bf-7a3a7447e3bf",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "did you find the test?",
        "createdAt" : "2020-06-29T13:53:01Z",
        "updatedAt" : "2020-07-08T23:39:29Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "82e6d995-b697-452d-b126-44d9e339edd1",
        "parentId" : "98df8a0e-0474-486e-87bf-7a3a7447e3bf",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "ping @seberg, not sure if you were able to find this test already.",
        "createdAt" : "2020-07-08T22:20:01Z",
        "updatedAt" : "2020-07-08T23:39:29Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "1cfed3af-8eb7-42ab-8c95-d1671b8f41cb",
        "parentId" : "98df8a0e-0474-486e-87bf-7a3a7447e3bf",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Oh, here I guess: https://github.com/numpy/numpy/blob/2990d6e9102e4d7c3ff6cb1b69702c42bddaa738/numpy/core/tests/test_datetime.py#L646",
        "createdAt" : "2020-07-08T22:33:37Z",
        "updatedAt" : "2020-07-08T23:39:29Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "79af6248-3633-4e68-be6d-399ae7025e04",
        "parentId" : "98df8a0e-0474-486e-87bf-7a3a7447e3bf",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "yes got it. i was thinking more about this one :\r\n```\r\nx = np.array([\"qwwqwd\", \"qwdqwdwdqdqdwq\"], dtype=object)\r\nz = x.astype(\"S\")\r\n```",
        "createdAt" : "2020-07-08T22:39:45Z",
        "updatedAt" : "2020-07-08T23:39:29Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "3d098ed5-2f99-4204-bee1-ec387570f3d0",
        "parentId" : "98df8a0e-0474-486e-87bf-7a3a7447e3bf",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "You mean a test which has more than one nested elements?",
        "createdAt" : "2020-07-08T22:50:18Z",
        "updatedAt" : "2020-07-08T23:39:29Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "4b879c8f-e02c-41fb-b870-bacf1e03b1f9",
        "parentId" : "98df8a0e-0474-486e-87bf-7a3a7447e3bf",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "sorry for not being clear. i mean an array of string with dtype=object and after that astype called on the array. The test would be to make sure it finds the right dtype object which in this case is z.dtype == '|S14'.",
        "createdAt" : "2020-07-08T23:00:13Z",
        "updatedAt" : "2020-07-08T23:39:29Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "75776db4-9122-4a43-ad45-491842929062",
        "parentId" : "98df8a0e-0474-486e-87bf-7a3a7447e3bf",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Ahh, I suppose there also tests here: https://github.com/numpy/numpy/blob/14d3173931cd958495bf592e0078213a6a66ab1d/numpy/core/tests/test_api.py#L238\r\n\r\nbut true, maybe including `.astype()` here is just as well, I did it in most of the other tests after all...",
        "createdAt" : "2020-07-08T23:06:02Z",
        "updatedAt" : "2020-07-08T23:39:29Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "db562679-ac55-419d-b690-3827788cf988",
        "parentId" : "98df8a0e-0474-486e-87bf-7a3a7447e3bf",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "cool ! thanks for the link, i think thats enough as long as its tested. I am fine either way w.r.t adding it to array coercion tests.",
        "createdAt" : "2020-07-08T23:09:35Z",
        "updatedAt" : "2020-07-08T23:39:29Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      }
    ],
    "commit" : "22ee97190db0e2432e21d3d830e04776feb0f0a6",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +139,143 @@class TestStringDiscovery:\n    @pytest.mark.parametrize(\"obj\",\n            [object(), 1.2, 10**43, None, \"string\"],\n            ids=[\"object\", \"1.2\", \"10**43\", \"None\", \"string\"])\n    def test_basic_stringlength(self, obj):"
  }
]