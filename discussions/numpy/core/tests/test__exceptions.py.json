[
  {
    "id" : "0c85294c-3b98-4cc9-945c-0bb9abe0e554",
    "prId" : 17377,
    "prUrl" : "https://github.com/numpy/numpy/pull/17377#pullrequestreview-499012884",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "221c2bb3-9066-4a25-8c7f-6612d50700a6",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Thanks for looking into this, looks good to me.  If you have some time, maybe you can extend the test to also loading and the error instance and not just the error class?\r\n\r\nIt may be easier for memory error (either seems enough to me for now). Could you add a test that round-tripping works, maybe something like:\r\n```\r\nerror = _ArrayMemoryError((1023,), np.dtype(np.uint8))\r\nres = pickle.loads(pickle.dumps(error))\r\n\r\nassert res._total_size == error._total_size\r\n```\r\nI would mostly like a test that the error (instances) can also be unpickled again.  I admit, they clearly can here.",
        "createdAt" : "2020-09-28T16:20:46Z",
        "updatedAt" : "2020-09-30T00:31:27Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "256dc68b-2665-4390-992e-bd7b3e7f8b20",
        "parentId" : "221c2bb3-9066-4a25-8c7f-6612d50700a6",
        "authorId" : "0fcd8953-40da-4e0d-a707-5be48b75dbe1",
        "body" : "done in 866b39e8217eb1b7d2215a9a462bdfd86f4f516e",
        "createdAt" : "2020-09-29T00:39:38Z",
        "updatedAt" : "2020-09-30T00:31:27Z",
        "lastEditedBy" : "0fcd8953-40da-4e0d-a707-5be48b75dbe1",
        "tags" : [
        ]
      },
      {
        "id" : "72a077e8-2608-4f90-a48c-ce439a28570e",
        "parentId" : "221c2bb3-9066-4a25-8c7f-6612d50700a6",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Thanks. One more nitpick: test would make more sense as a `test_pickling` in the `TestArrayMemoryError` class.",
        "createdAt" : "2020-09-30T00:05:40Z",
        "updatedAt" : "2020-09-30T00:31:27Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "5a7f1bfd-43e1-4fdf-96ef-f3d9e95e97a9",
        "parentId" : "221c2bb3-9066-4a25-8c7f-6612d50700a6",
        "authorId" : "0fcd8953-40da-4e0d-a707-5be48b75dbe1",
        "body" : "fixed in ea0c5f5295650ee99856133565b98b3e99396fb2",
        "createdAt" : "2020-09-30T00:32:08Z",
        "updatedAt" : "2020-09-30T00:32:09Z",
        "lastEditedBy" : "0fcd8953-40da-4e0d-a707-5be48b75dbe1",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea0c5f5295650ee99856133565b98b3e99396fb2",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +56,60 @@    def test_pickling(self):\n        \"\"\" Test that _UFuncNoLoopError can be pickled \"\"\"\n        assert isinstance(pickle.dumps(_UFuncNoLoopError), bytes)"
  },
  {
    "id" : "6f38b0ee-72ae-479e-8659-93249a5d1f22",
    "prId" : 19459,
    "prUrl" : "https://github.com/numpy/numpy/pull/19459#pullrequestreview-709855065",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "306e2343-7e29-4a50-8074-e8848c53b86a",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "@eric-wieser there is already a similar test in place for testing pickling in general.\r\nI'd say that this test already adequately covers pickle use cases, would you agree?\r\n",
        "createdAt" : "2021-07-19T18:00:27Z",
        "updatedAt" : "2021-07-19T18:00:27Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "513fcfc6-7380-4006-a03c-98af34d90717",
        "parentId" : "306e2343-7e29-4a50-8074-e8848c53b86a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This test is adequate for checking pickling works, but not for checking that any future changes are backwards compatible.\n\nOn the other hand, I think there is little reason to promise exceptions pickled in one version of numpy can be correctly loaded from another, so the test could be argued as unecessary.\n\nI'll let you make the call - if we do add the test, it at least acts as a canary to prevent us breaking compatibility by accident and make us do it consciously; but it likely also makes the test fragile to changes in pickle itself which isn't our problem.\n",
        "createdAt" : "2021-07-19T18:04:20Z",
        "updatedAt" : "2021-07-19T18:04:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "467cab72-6cb3-4470-888f-d5600fbb2ff2",
        "parentId" : "306e2343-7e29-4a50-8074-e8848c53b86a",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "I'm a bit wary of the additional fragility that this would add.\r\n\r\nPreviously `__reduce__` would always return the `np.AxisError` type as reconstructor and a 1-tuple with error message as parameter. As this type of signature is already tested with the last `pytest.mark.parametrize` parameter, we should be fine with leaving things as they are.",
        "createdAt" : "2021-07-19T18:27:27Z",
        "updatedAt" : "2021-07-19T18:27:27Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e27e0ccd839f3f60832cf7f07f3dfce0fbc3af5",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +86,90 @@            attr1 = getattr(exc, name)\n            attr2 = getattr(exc2, name)\n            assert attr1 == attr2, name"
  }
]