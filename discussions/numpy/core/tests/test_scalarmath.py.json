[
  {
    "id" : "4b6e37f9-ac21-44ff-88f9-b2634d43c50f",
    "prId" : 9063,
    "prUrl" : "https://github.com/numpy/numpy/pull/9063#pullrequestreview-36669605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc831583-4f5e-4735-9655-91e12663e00d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Perhaps before this loop, or even at the file level:\r\n```\r\nsigns = {\r\n    d: (+1,) if dt in np.typecodes['UnsignedInteger'] else (+1, -1)\r\n    for d in dt\r\n}\r\n```\r\n\r\nAnd then `itertools.product(signs[dt1], signs[dt2])` below, which removes the `continue`s",
        "createdAt" : "2017-05-06T23:10:52Z",
        "updatedAt" : "2017-05-08T00:04:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "07397d81-e1e1-4de5-9427-ee6de85d6054",
        "parentId" : "dc831583-4f5e-4735-9655-91e12663e00d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Actually, better would be, in the class level:\r\n\r\n```\r\ndef _signs(self, dt):\r\n    if dt in np.typecodes['UnsignedInteger']:\r\n        return (+1,)\r\n    else:\r\n        return (+1, -1)\r\n```\r\n\r\nConstructing that dict is kinda clunky, and you'd end up repeating it over multiple tests",
        "createdAt" : "2017-05-06T23:21:38Z",
        "updatedAt" : "2017-05-08T00:04:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f9b96b95-13a3-4834-ad81-b04662054903",
        "parentId" : "dc831583-4f5e-4735-9655-91e12663e00d",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "done",
        "createdAt" : "2017-05-07T18:00:41Z",
        "updatedAt" : "2017-05-08T00:04:02Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fbf75e499196c05da46302f035909897c9ec272",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +205,209 @@    def test_modulus_basic(self):\n        dt = np.typecodes['AllInteger'] + np.typecodes['Float']\n        for op in [floordiv_and_mod, divmod]:\n            for dt1, dt2 in itertools.product(dt, dt):\n                for sg1, sg2 in itertools.product(_signs(dt1), _signs(dt2)):"
  }
]