[
  {
    "id" : "5aeca4b2-6171-4f1e-8533-57116b93c580",
    "prId" : 3360,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de034c87-1751-43bb-bf3b-ac1053cd4fb1",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I think it would be more accurate to say that the values `a[i]` partition the array. The indices themselves are likely to be not unique when there are repeated values.\n",
        "createdAt" : "2013-08-02T22:38:13Z",
        "updatedAt" : "2013-08-12T12:26:07Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4d9cd695486fa095c6bff3238341a85cbdb47d0e",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +654,658 @@    -------\n    index_array : ndarray, int\n        Array of indices that partition`a` along the specified axis.\n        In other words, ``a[index_array]`` yields a sorted `a`.\n"
  },
  {
    "id" : "6e14869d-0fbd-42a3-9206-28e2cc9e1c2b",
    "prId" : 5264,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "001f9e83-b47c-4662-b7c1-54927fa7a745",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Might say that `axes` is the same as in the original transposition.\n",
        "createdAt" : "2014-11-11T22:39:47Z",
        "updatedAt" : "2014-11-11T22:39:47Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b1f8e2723c7611803b0341987b544d42706d0f7",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +519,523 @@    -----\n    Use `transpose(a, argsort(axes))` to invert the transposition of tensors\n    when using the `axes` keyword argument.\n\n    Examples"
  },
  {
    "id" : "2ee610da-6553-4a78-8c5c-d2c1a8f2386c",
    "prId" : 8850,
    "prUrl" : "https://github.com/numpy/numpy/pull/8850#pullrequestreview-29996913",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6dc3e839-b6ab-4df0-ab76-2fb82a5b3e50",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Where did `>>> np.nonzero(x)` go?",
        "createdAt" : "2017-03-30T13:50:13Z",
        "updatedAt" : "2017-03-30T13:50:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "da2736704dea1a68160effe5565b385609484dcf",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1515,1519 @@           [0, 2, 0],\n           [1, 1, 0]])\n    >>> (array([0, 1, 2, 2], dtype=int64), array([0, 1, 0, 1], dtype=int64))\n\n    >>> x[np.nonzero(x)]"
  },
  {
    "id" : "d18f78aa-256f-4911-a525-156f16eb9166",
    "prId" : 9946,
    "prUrl" : "https://github.com/numpy/numpy/pull/9946#pullrequestreview-78340440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "534b9ee5-ca7a-4771-949b-6096619db91c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Alternatively:\r\n\r\n```python\r\nout[(*ii, *jj, *kk)] = a[(*ii, indices[jj], *kk)]\r\n```\r\n\r\nIt's a shame the unpacking generalizations don't apply to tuples within indexing brackets",
        "createdAt" : "2017-11-21T09:55:30Z",
        "updatedAt" : "2017-11-22T05:44:29Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "de28e829-3273-46ee-933b-849d25cbc4ab",
        "parentId" : "534b9ee5-ca7a-4771-949b-6096619db91c",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Also, while we are using `s_`, another way to express take is \r\n\r\n```\r\narr[(s_[:],)*axis + (indices, Ellipsis)]\r\n```\r\n\r\nwhich is essentially what my comment in the intro of the docstring was saying about `a[:,:,:,indices,...]`. \r\n\r\nWhat about adding something like this to the docstring? :\r\n```\r\n     This function does the same thing as \"fancy\" indexing (indexing arrays\r\n     using arrays); however, it can be easier to use if you need elements\r\n     along a given axis and supports `out` and `mode` arguments.\r\n\r\n     That is, a call such as ``np.take(arr, indices, axis=3)`` is equivalent to\r\n     ``arr[:,:,:,indices,...]``. More explicitly, `take` is equivalent to the \r\n     following use of `ndindex` which sets each of ``ii``, ``jj``, and ``kk``\r\n     to a tuple of indices::\r\n```",
        "createdAt" : "2017-11-21T18:10:11Z",
        "updatedAt" : "2017-11-22T05:44:29Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "4f341b8c-eefe-4749-88f0-50dde764b740",
        "parentId" : "534b9ee5-ca7a-4771-949b-6096619db91c",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Added, with some rephrasing",
        "createdAt" : "2017-11-22T05:44:20Z",
        "updatedAt" : "2017-11-22T05:44:29Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "21ef1383cb4f6e27af188a6da5cdca93cff1bd07",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +82,86 @@            for jj in ndindex(Nj):\n                for kk in ndindex(Nk):\n                    out[ii + jj + kk] = a[ii + (indices[jj],) + kk]\n\n    Parameters"
  },
  {
    "id" : "2a838580-34dd-47d9-aeca-b2215e564612",
    "prId" : 9946,
    "prUrl" : "https://github.com/numpy/numpy/pull/9946#pullrequestreview-78203287",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cfe310f-0c30-479a-9a57-8da4c42b6f8e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "As in the above comment, could be:\r\n```python\r\nout[(*ii, ..., *kk)] = a[(*ii, s_[:], *kk)]\r\n```",
        "createdAt" : "2017-11-21T09:56:25Z",
        "updatedAt" : "2017-11-22T05:44:29Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "bc9b36eb-e14f-41d7-a434-708003cf1b3b",
        "parentId" : "2cfe310f-0c30-479a-9a57-8da4c42b6f8e",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I think there is a little less mental overhead for tuple-addition than for tuple-unpacking, especially for people new to python.",
        "createdAt" : "2017-11-21T17:54:14Z",
        "updatedAt" : "2017-11-22T05:44:29Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "21ef1383cb4f6e27af188a6da5cdca93cff1bd07",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +131,135 @@        for ii in ndindex(Ni):\n            for kk in ndindex(Nj):\n                out[ii + s_[...,] + kk] = a[ii + s_[:,] + kk][indices]\n\n    For this reason, it is equivalent to (but faster than) the following use"
  },
  {
    "id" : "8801a705-9989-4c52-9485-40e27f4cab38",
    "prId" : 10072,
    "prUrl" : "https://github.com/numpy/numpy/pull/10072#pullrequestreview-79648515",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1469070-d66e-4b57-abc7-d1cfe8eaed88",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, that isn't right, probably goes way back to when there was contiguous and fcontiguos. A transpose changes C contiguous arrays into F contiguous arrays and vice versa.\r\n```\r\nIn [1]: a = np.zeros((10, 2))\r\n\r\nIn [2]: a.flags\r\nOut[2]: \r\n  C_CONTIGUOUS : True\r\n  F_CONTIGUOUS : False\r\n  OWNDATA : True\r\n  WRITEABLE : True\r\n  ALIGNED : True\r\n  WRITEBACKIFCOPY : False\r\n  UPDATEIFCOPY : False\r\n\r\nIn [3]: a.T.flags\r\nOut[3]: \r\n  C_CONTIGUOUS : False\r\n  F_CONTIGUOUS : True\r\n  OWNDATA : False\r\n  WRITEABLE : True\r\n  ALIGNED : True\r\n  WRITEBACKIFCOPY : False\r\n  UPDATEIFCOPY : False\r\n```",
        "createdAt" : "2017-11-25T16:24:05Z",
        "updatedAt" : "2017-11-28T20:38:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "65145bc1-a924-4c6e-9c05-dee8fd3386ec",
        "parentId" : "b1469070-d66e-4b57-abc7-d1cfe8eaed88",
        "authorId" : "0b26c330-f021-4b8b-9165-e9135e37c5bc",
        "body" : "Updated the line to reflect this. However, it might be better to just remove the explanation entirely. This isn't information the user needs if they want to raise an error if data is copied when reshaping an array.",
        "createdAt" : "2017-11-27T15:44:34Z",
        "updatedAt" : "2017-11-28T20:38:40Z",
        "lastEditedBy" : "0b26c330-f021-4b8b-9165-e9135e37c5bc",
        "tags" : [
        ]
      },
      {
        "id" : "ccfb4dd2-d60d-4c17-beb0-1a4bdaa930ba",
        "parentId" : "b1469070-d66e-4b57-abc7-d1cfe8eaed88",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think this was correct before - the point is that the error message also says \"contiguous\", not `C-contiguous'. I suppose both could be updated, but that seems out of scope for a typo fix!\r\n\r\nRevert this to just the typo fixes, and I'll merge it.",
        "createdAt" : "2017-11-28T05:18:18Z",
        "updatedAt" : "2017-11-28T20:38:40Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ecdd028b-9528-449a-8bfb-50601fc3c380",
        "parentId" : "b1469070-d66e-4b57-abc7-d1cfe8eaed88",
        "authorId" : "0b26c330-f021-4b8b-9165-e9135e37c5bc",
        "body" : "Ah, got it. Reverted!",
        "createdAt" : "2017-11-28T20:38:46Z",
        "updatedAt" : "2017-11-28T20:38:46Z",
        "lastEditedBy" : "0b26c330-f021-4b8b-9165-e9135e37c5bc",
        "tags" : [
        ]
      }
    ],
    "commit" : "efc24aed261acc78435223123d9ca8078fc61c04",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +176,180 @@\n     >>> a = np.zeros((10, 2))\n     # A transpose makes the array non-contiguous\n     >>> b = a.T\n     # Taking a view makes it possible to modify the shape without modifying"
  },
  {
    "id" : "9b358b9c-bd88-48a1-baba-ad7318395e0a",
    "prId" : 10653,
    "prUrl" : "https://github.com/numpy/numpy/pull/10653#pullrequestreview-98893630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1589dd13-8b44-4df2-8c8a-cf1b2f2c3fd8",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I wonder if we should just drop all of this docstring after this line",
        "createdAt" : "2018-02-23T10:44:53Z",
        "updatedAt" : "2018-02-25T02:35:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "cf347912-7b88-4729-b9b8-9f86c0cb7d1b",
        "parentId" : "1589dd13-8b44-4df2-8c8a-cf1b2f2c3fd8",
        "authorId" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "body" : "I'm +1 on that. Just maybe put an equivalent to in see also?",
        "createdAt" : "2018-02-23T10:46:52Z",
        "updatedAt" : "2018-02-25T02:35:43Z",
        "lastEditedBy" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "tags" : [
        ]
      },
      {
        "id" : "1921b4ff-8e53-4a72-b786-1253f0a4f9e7",
        "parentId" : "1589dd13-8b44-4df2-8c8a-cf1b2f2c3fd8",
        "authorId" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "body" : "Actually, it would be better to make it mirror the definition of the other aliases, but with that note. ",
        "createdAt" : "2018-02-23T12:10:59Z",
        "updatedAt" : "2018-02-25T02:35:43Z",
        "lastEditedBy" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a0aef18318a07d46e9313e8a07dd4deacc0e2e8",
    "line" : 200,
    "diffHunk" : "@@ -1,1 +3174,3178 @@        This function is deprecated in NumPy 1.9 to avoid confusion with\n        `numpy.linalg.matrix_rank`. The ``ndim`` attribute or function\n        should be used instead.\n\n    See Also"
  },
  {
    "id" : "4f5a68c4-88b1-43c9-af3f-a64bc757e885",
    "prId" : 10661,
    "prUrl" : "https://github.com/numpy/numpy/pull/10661#pullrequestreview-99156851",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b96c0127-6614-4d27-bd25-85c24b8ce1df",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "For consistency either this should be `um.multiply` or the other ones should be `np.minimum` etc. I'd be inclined to go with the `np.` form for clarity",
        "createdAt" : "2018-02-25T19:17:40Z",
        "updatedAt" : "2018-02-27T05:34:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "aefc69e7-60a8-49f5-b701-626283c6d87d",
        "parentId" : "b96c0127-6614-4d27-bd25-85c24b8ce1df",
        "authorId" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "body" : "Done!",
        "createdAt" : "2018-02-25T21:26:19Z",
        "updatedAt" : "2018-02-27T05:34:02Z",
        "lastEditedBy" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "tags" : [
        ]
      },
      {
        "id" : "c1bbd070-4557-4954-a1eb-0bf922a4ba87",
        "parentId" : "b96c0127-6614-4d27-bd25-85c24b8ce1df",
        "authorId" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "body" : "Done!",
        "createdAt" : "2018-02-25T21:28:21Z",
        "updatedAt" : "2018-02-27T05:34:02Z",
        "lastEditedBy" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "tags" : [
        ]
      }
    ],
    "commit" : "b344da928f06d867b0a4f41746c1bcb759a2fd8f",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +2510,2514 @@\n    \"\"\"\n    return _wrapreduction(a, np.multiply, 'prod', axis, dtype, out, keepdims=keepdims)\n\n"
  },
  {
    "id" : "c9939e1f-2c44-4f95-9c14-1131956cbc54",
    "prId" : 11010,
    "prUrl" : "https://github.com/numpy/numpy/pull/11010#pullrequestreview-120019267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a97c915e-de5d-4003-8354-1eb6e8078f3b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "`type`, `subtype`, or both?",
        "createdAt" : "2018-05-14T21:14:27Z",
        "updatedAt" : "2018-05-14T21:14:28Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "36498ba2-74c3-47e1-94b5-7020db3a8d05",
        "parentId" : "a97c915e-de5d-4003-8354-1eb6e8078f3b",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "the test is with `isinstance`",
        "createdAt" : "2018-05-14T21:36:27Z",
        "updatedAt" : "2018-05-14T21:36:28Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e74c991d1336bd51e71dc492544223055c130f4",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1338,1342 @@    array_of_diagonals : ndarray\n        If `a` is 2-D, then a 1-D array containing the diagonal and of the\n        same type as `a` is returned unless `a` is a `matrix`, in which case\n        a 1-D array rather than a (2-D) `matrix` is returned in order to\n        maintain backward compatibility."
  },
  {
    "id" : "98427973-4463-427e-bb37-94e60a19cc7e",
    "prId" : 11425,
    "prUrl" : "https://github.com/numpy/numpy/pull/11425#pullrequestreview-131886406",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc9d1893-ab84-4568-a43f-0dd74b7fe711",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Changing these valeus makes them not be the same as the indices, which made things hard to follow",
        "createdAt" : "2018-06-26T07:00:18Z",
        "updatedAt" : "2018-06-29T09:15:22Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "917b0794e8e68a443f94299a80c51491cdc1c6cb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1616,1620 @@    Examples\n    --------\n    >>> x = np.array([[3, 0, 0], [0, 4, 0], [5, 6, 0]])\n    >>> x\n    array([[3, 0, 0],"
  },
  {
    "id" : "5503c4be-263d-4784-a37b-dbf385822121",
    "prId" : 12418,
    "prUrl" : "https://github.com/numpy/numpy/pull/12418#pullrequestreview-197654458",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9222ebd3-d3ea-4ef1-a13e-5f12340639f1",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Add a comment that timsort is used for stable sort, while quicksort is the default sort if none is chosen",
        "createdAt" : "2019-01-29T16:34:00Z",
        "updatedAt" : "2019-01-30T05:45:01Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "317d13bf31798448588c670e6ce175f0abf15dff",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +905,909 @@    `CPython listsort.txt <https://github.com/python/cpython/blob/3.7/Objects/listsort.txt>`_.\n\n\n    Examples\n    --------"
  },
  {
    "id" : "c446acdc-a631-4ede-9e15-2b76cd4c169c",
    "prId" : 12519,
    "prUrl" : "https://github.com/numpy/numpy/pull/12519#pullrequestreview-208304530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39beb755-c99d-4d6c-9707-e2f156823d6d",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I think that by becoming a `ufunc`, we should remove the `__array_function__` override. I feel the NEP was clear enough that no deprecation is necessary, but cc @shoyer just in case.",
        "createdAt" : "2019-02-26T14:45:55Z",
        "updatedAt" : "2019-05-15T17:09:02Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "baddae00-1cb7-49bc-b9e6-7eae721ffb5f",
        "parentId" : "39beb755-c99d-4d6c-9707-e2f156823d6d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I agree - what's left of clip is just a ufunc selector based on argument presence, there's no reason to allow customization of that.",
        "createdAt" : "2019-02-26T16:46:02Z",
        "updatedAt" : "2019-05-15T17:09:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0ca6185f-7a2a-4aa4-8bf3-f1e1f409ae12",
        "parentId" : "39beb755-c99d-4d6c-9707-e2f156823d6d",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Well, the current promise is that *everything* directly exposed by NumPy [gets its own dispatcher](http://www.numpy.org/neps/nep-0018-array-function-protocol.html#implementations-in-terms-of-a-limited-core-api), either via `__array_function__` or `__array_ufunc__`. This PR means that `np.clip` now uses one of three ufuncs, one of which (`um.clip`) isn't even publicly exposed. So I don't think we can get rid of this dispatcher yet.",
        "createdAt" : "2019-02-26T17:12:12Z",
        "updatedAt" : "2019-05-15T17:09:02Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "974083d1-a5fe-4c13-8bca-4714949fc913",
        "parentId" : "39beb755-c99d-4d6c-9707-e2f156823d6d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Should we consider `np.core.umath.clip` sufficient exposure? It can never replace `np.clip` in the top namespace and IMO there's no clearer name available",
        "createdAt" : "2019-02-26T17:18:43Z",
        "updatedAt" : "2019-05-15T17:09:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "38ec6a9b-2fa4-4a8d-98a8-277aef1d586c",
        "parentId" : "39beb755-c99d-4d6c-9707-e2f156823d6d",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I'd think that `np.core.umath` is sufficient exposure (indeed, in astropy we check our ufunc coverage by enumerating what is in there). The larger question might be whether this multi-dispatch would still need an override. To me, that seems a bit odd, and counter to the idea that `__array_function__` is only meant to cover what isn't covered by better matched overrides.\r\n\r\np.s.  An analogy here may be `ndarra.__pow__`, which gives different `ufuncs` depending on the argument (though of course subclasses can override that...).\r\n\r\n",
        "createdAt" : "2019-02-26T18:49:23Z",
        "updatedAt" : "2019-05-15T17:09:02Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "5f6ecbbd-829f-4c1c-8cbe-8ea8a8f6cc0e",
        "parentId" : "39beb755-c99d-4d6c-9707-e2f156823d6d",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "The rest of `np.core` is not considered public API so I don't think that's enough exposure. Maybe we could put it as an attribute on the function, e.g., `np.clip.ufunc`?\r\n\r\nI'm also reluctant to do this on an ad-hoc basis. I don't think it's worth the complexity of having exactly *one* special function that is neither a ufunc nor with a direct override via `__array_function__`. We don't need to change this all at once but at least we should have a rule for going forward that clearly applies to more than only a few functions.",
        "createdAt" : "2019-02-27T01:23:03Z",
        "updatedAt" : "2019-05-15T17:09:02Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "e64cf458-25b4-4d7d-8067-7ff3d66bedfd",
        "parentId" : "39beb755-c99d-4d6c-9707-e2f156823d6d",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "OK, perhaps not that simple. Maybe for now best to finish this PR without removing the `__array_function__` override?",
        "createdAt" : "2019-02-27T02:08:30Z",
        "updatedAt" : "2019-05-15T17:09:02Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "31f0bb1dc7611e5401a52103623d15ea4b3dd00f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1962,1966 @@\n\ndef _clip_dispatcher(a, a_min, a_max, out=None, **kwargs):\n    return (a, a_min, a_max)\n"
  },
  {
    "id" : "bb318c73-571c-4dac-a369-1f20bb0efad0",
    "prId" : 12519,
    "prUrl" : "https://github.com/numpy/numpy/pull/12519#pullrequestreview-207993892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "270afdc6-41f0-45dd-b591-ec602cfb69fe",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I was about to similarly suggest we remove `_wrapfunc`, but that would break people defining their own `.clip` method.\r\n\r\nI guess the question then becomes whether having such a `.clip` method should start raising a `FutureWarning` - maybe good to at least have an issue about this.",
        "createdAt" : "2019-02-26T14:48:04Z",
        "updatedAt" : "2019-05-15T17:09:02Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "31f0bb1dc7611e5401a52103623d15ea4b3dd00f",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +2029,2033 @@\n    \"\"\"\n    return _wrapfunc(a, 'clip', a_min, a_max, out=out, **kwargs)\n\n"
  },
  {
    "id" : "d2eb40bd-6ae4-4ea9-9442-c707d30bfc98",
    "prId" : 12658,
    "prUrl" : "https://github.com/numpy/numpy/pull/12658#pullrequestreview-328558040",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24efc16d-c752-4e66-ace5-6a599bece383",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "Minor point -- I forgot to bump this for `1.18.0`?",
        "createdAt" : "2019-12-07T14:01:00Z",
        "updatedAt" : "2019-12-07T14:01:01Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc99245b05163dd4f723c886c04174e98650c11b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +945,949 @@    O(n) sort instead of O(n log n).\n\n    .. versionchanged:: 1.17.0\n\n    NaT now sorts to the end of arrays for consistency with NaN."
  }
]