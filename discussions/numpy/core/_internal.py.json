[
  {
    "id" : "15dad349-b85c-4d53-ac72-4595bcdacb49",
    "prId" : 401,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e19d5935-d029-4425-bf6f-2538912874b5",
        "parentId" : null,
        "authorId" : "041ba948-3afd-44ae-9741-f412d7673058",
        "body" : "This \"array\" should be imported from the line `from multiarray import empty, dtype, array` in the same function. I'll fix it in the next patch.\n",
        "createdAt" : "2012-08-31T21:45:24Z",
        "updatedAt" : "2012-08-31T21:45:24Z",
        "lastEditedBy" : "041ba948-3afd-44ae-9741-f412d7673058",
        "tags" : [
        ]
      },
      {
        "id" : "c7272e77-5cb6-4806-a0c4-c9dc7e58ed02",
        "parentId" : "e19d5935-d029-4425-bf6f-2538912874b5",
        "authorId" : "041ba948-3afd-44ae-9741-f412d7673058",
        "body" : "See #404.\n",
        "createdAt" : "2012-08-31T21:49:27Z",
        "updatedAt" : "2012-08-31T21:49:27Z",
        "lastEditedBy" : "041ba948-3afd-44ae-9741-f412d7673058",
        "tags" : [
        ]
      }
    ],
    "commit" : "93100c92b57dd9663b688fdd94efc7d05ef7ff38",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +299,303 @@    # in favor of returning view\n    copy_dtype = {'names':view_dtype['names'], 'formats':view_dtype['formats']}\n    from numpy import array\n    return array(view, dtype=copy_dtype, copy=True)\n"
  },
  {
    "id" : "9abe06f1-eab7-4eca-bbbd-1fcaa27e34e1",
    "prId" : 5548,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4496c6f-cc14-4b6c-9ec9-e6cb808b1e73",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "There are smarter ways of going about this check, but we probably shouldn't let micro-optimizations distract us from the larger goal.\n",
        "createdAt" : "2015-03-14T18:29:58Z",
        "updatedAt" : "2015-06-05T05:14:57Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2cd6fa869cec6d92062fb687d8e6952c1202017",
    "line" : null,
    "diffHunk" : "@@ -1,1 +367,371 @@    from .multiarray import dtype\n\n    #first go byte by byte and check we do not access bytes not in old_fields\n    new_bytes = set()\n    for tp, off in new_fields:"
  },
  {
    "id" : "e32dc654-24d4-40b1-aa19-002728ce4726",
    "prId" : 8843,
    "prUrl" : "https://github.com/numpy/numpy/pull/8843#pullrequestreview-29550371",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Now with a docstring, which Ipython shows when you type an exception name. This is in a similar style to the builtin ones.",
        "createdAt" : "2017-03-27T01:27:22Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "9f0cd79a-7aac-4a3a-b6cb-0982829fb91f",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This should be in `numpy/_globals.py`.",
        "createdAt" : "2017-03-28T17:29:55Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "cdc42c4d-987d-4443-8000-e46f5b0b76dd",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "And imported into `numpy/__init__.py`.",
        "createdAt" : "2017-03-28T17:31:59Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "77965ac2-2fdb-4f39-afbb-8e838fa61622",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I put it here in #8584 because it needs to be imported from C code, and that's what `_internals` seems to be used for. Is it safe to load `_globals.py` from C?\r\n\r\n`AxisError` is already visible at the global scope as `np.AxisError`, as it goes through the `__all__` chain.",
        "createdAt" : "2017-03-28T18:01:13Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "562aa48d-3972-4d02-8675-9f65bf8f409e",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "You can import from practically anything. We also import from multiarray itself into C code. I'd import this from '\"numpy\"', The `_globals` is for singletons that may also be used by python code.",
        "createdAt" : "2017-03-28T18:27:14Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "511d0bfd-7ca8-4db5-a116-7579f139e4a0",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Python code should not be importing from `_internal.py`.",
        "createdAt" : "2017-03-28T18:40:17Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e56d0d6d-2deb-4720-9694-90f34919a8c5",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Should `TooHardError` move there too?\r\n",
        "createdAt" : "2017-03-28T18:46:26Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a34e4874-45d2-4cee-b343-0e170a207422",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "right now, `numeric.py` has `from ._internal import TooHardError, AxisError`\r\n\r\n`core/__init__.py` also contains `from . import _internal  # for freeze programs`, for some reason\r\n",
        "createdAt" : "2017-03-28T18:49:25Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d11c524f-decf-41f0-b191-db6d90141f15",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Probably, but it can be done in a separate PR as the imports also need to be changed. Maybe `_globals.py` should be renamed `_global_singletons` or `_global_exceptions` ;) There are other errors scattered about that maybe we should move at some point.",
        "createdAt" : "2017-03-28T18:54:50Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c80cb7a0-c5be-4414-b5d0-7f662f4d32f5",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Or maybe `_numpy_exceptions`",
        "createdAt" : "2017-03-28T19:01:24Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a7ed4454-9ba2-4787-8fe0-75e939e6c580",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Do you want me to do both in a separate PR? `AxisError` being in that file is not new to this PR.\r\n\r\n(either way, fix coming for something else, so don't merge yet!)",
        "createdAt" : "2017-03-28T19:24:03Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "17466ad1839718c091c629bb647e881b7922a148",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +632,636 @@\nclass AxisError(ValueError, IndexError):\n    \"\"\" Axis supplied was invalid. \"\"\"\n    def __init__(self, axis, ndim=None, msg_prefix=None):\n        # single-argument form just delegates to base class"
  },
  {
    "id" : "bb06bf87-567b-4efe-86d5-bb37065dece4",
    "prId" : 11721,
    "prUrl" : "https://github.com/numpy/numpy/pull/11721#pullrequestreview-147464007",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13db2e65-e85a-4e0d-a519-7cbd19875c9c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I wish `ctypes` would provide a low-level API to save us from doing this dance",
        "createdAt" : "2018-08-19T16:26:49Z",
        "updatedAt" : "2018-11-05T01:24:18Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "79baef7a80769842f1c7f14e31056e4750a122e8",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +248,252 @@def _get_void_ptr(arr):\n    \"\"\"\n    Get a `ctypes.c_void_p` to arr.data, that keeps a reference to the array\n    \"\"\"\n    import numpy as np"
  },
  {
    "id" : "01d13124-8919-4520-bff8-18cb6adceed3",
    "prId" : 11910,
    "prUrl" : "https://github.com/numpy/numpy/pull/11910#pullrequestreview-154421732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a72d4b66-0844-4653-b5ac-d112b8a2c4ec",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This could do with a comment about why it is needed",
        "createdAt" : "2018-09-11T22:24:13Z",
        "updatedAt" : "2018-09-12T05:38:34Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cf6759e3b48cc9b0dcfbf8537ba61b95a0d4844",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +811,815 @@\n\nclass recursive(object):\n    '''\n    A decorator class for recursive nested functions."
  },
  {
    "id" : "0abcd6e7-465d-47a5-b0e9-64810e5d2783",
    "prId" : 11910,
    "prUrl" : "https://github.com/numpy/numpy/pull/11910#pullrequestreview-155172793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "413e7b2f-8900-4109-9d97-abb83afba15b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "nit: this should probably call `functools.update_wrapper`",
        "createdAt" : "2018-09-13T16:45:47Z",
        "updatedAt" : "2018-09-13T16:45:48Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cf6759e3b48cc9b0dcfbf8537ba61b95a0d4844",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +837,841 @@    '''\n    def __init__(self, func):\n        self.func = func\n    def __call__(self, *args, **kwargs):\n        return self.func(self, *args, **kwargs)"
  },
  {
    "id" : "0355bc77-78cd-4371-a90d-5fa26ba44d4b",
    "prId" : 12254,
    "prUrl" : "https://github.com/numpy/numpy/pull/12254#pullrequestreview-168533531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc143c26-536c-4e1c-b5f5-26ef32f0182a",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK, I see that the static type is checked in the C code.",
        "createdAt" : "2018-10-25T18:48:39Z",
        "updatedAt" : "2018-10-26T04:24:36Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0709d92f78cc6e78ba79da9a25627db87059b31d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +797,801 @@\n\ndef npy_ctypes_check(cls):\n    # determine if a class comes from ctypes, in order to work around\n    # a bug in the buffer protocol for those objects, bpo-10746"
  },
  {
    "id" : "e7140cd2-f7fd-4034-8505-de78f776ff2f",
    "prId" : 12594,
    "prUrl" : "https://github.com/numpy/numpy/pull/12594#pullrequestreview-228889937",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f12dc3aa-8816-4755-84d8-36d5c153f031",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you add a brief comment here showing what the mro looks like in each case? Something like `# (..., _ctypes._CData, object)` for cpython",
        "createdAt" : "2019-04-20T19:46:40Z",
        "updatedAt" : "2019-04-21T08:07:16Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1561fef8-3895-474b-aa38-54cec4f8bf13",
        "parentId" : "f12dc3aa-8816-4755-84d8-36d5c153f031",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "In PyPy, `_ctypes` is implemented in pure python over an internal `_rawffi` module.\r\nThe mro is `# (..., <class '_ctypes.basics._CData'>, <class 'Bufferable'>, <class 'object'>)`, the [`Bufferable`](file:///home/matti/pypy_stuff/pypy/pypy/doc/_build/html/__pypy__-module.html#generally-available-functionality) class allows pure python support for PEP-3118 via an overridable `__buffer__` class method when calling `tp_as_buffer. bf_getbuffer` and using the `__pypy__.newmemoryview` function.\r\n\r\nAdding the requested comment",
        "createdAt" : "2019-04-20T20:07:48Z",
        "updatedAt" : "2019-04-21T08:07:16Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "66b06798-07e0-4c21-a2f5-e4a384028ead",
        "parentId" : "f12dc3aa-8816-4755-84d8-36d5c153f031",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "documentation for PyPy-specific `bufferable` and `__buffer__` is in the [`__pypy__`](http://doc.pypy.org/en/latest/__pypy__-module.html) module",
        "createdAt" : "2019-04-20T20:16:42Z",
        "updatedAt" : "2019-04-21T08:07:16Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "d3ea0ede-3cac-4c50-a3d3-463d4e350101",
        "parentId" : "f12dc3aa-8816-4755-84d8-36d5c153f031",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Nit: would probably abbreviate to `(..., _ctypes.basics._CData, Bufferable, object)` to match the CPython comment",
        "createdAt" : "2019-04-20T20:27:11Z",
        "updatedAt" : "2019-04-21T08:07:16Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "7b9a3d99-b10f-4ea2-862f-9e1095bf1b48",
        "parentId" : "f12dc3aa-8816-4755-84d8-36d5c153f031",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "ok",
        "createdAt" : "2019-04-20T20:30:03Z",
        "updatedAt" : "2019-04-21T08:07:16Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "f402a691a9c99e0ba2e090d4f8269ea81aac1a50",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +874,878 @@        else:\n            # # (..., _ctypes._CData, object)\n            ctype_base = cls.__mro__[-2]\n        # right now, they're part of the _ctypes module\n        return 'ctypes' in ctype_base.__module__"
  },
  {
    "id" : "903a87c1-2bc8-49a0-a7ad-d8ce939ffb0c",
    "prId" : 14469,
    "prUrl" : "https://github.com/numpy/numpy/pull/14469#pullrequestreview-288392538",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2240eda-f0ed-4981-a226-66d517778d5c",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Does the branch below still need the `_data._objects = array` path in this case?",
        "createdAt" : "2019-09-10T19:19:17Z",
        "updatedAt" : "2019-10-05T21:09:21Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "e6b0a741-093c-4173-8200-88cd62848914",
        "parentId" : "a2240eda-f0ed-4981-a226-66d517778d5c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "The `_get_void_ptr ` is not used anymore here, I have to look at it closer to be sure if this is quite right.",
        "createdAt" : "2019-09-10T19:21:17Z",
        "updatedAt" : "2019-10-05T21:09:21Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "f4be5f2a-2b14-4373-8e9e-baab3e2aa11f",
        "parentId" : "a2240eda-f0ed-4981-a226-66d517778d5c",
        "authorId" : "b7ce9faa-1440-4dfc-8c69-fd880a794a94",
        "body" : "_data._objects is not needed. Here _data is not a casted pointer, it does not need to save the original pointer type.\r\n\r\n_get_void_ptr is not needed by _ctypes class. I think it can be removed but I leave it there in case it is need by other functions.",
        "createdAt" : "2019-09-10T20:35:41Z",
        "updatedAt" : "2019-10-05T21:09:21Z",
        "lastEditedBy" : "b7ce9faa-1440-4dfc-8c69-fd880a794a94",
        "tags" : [
        ]
      },
      {
        "id" : "8d82a362-4de9-4029-9dd5-a0afc6b81d88",
        "parentId" : "a2240eda-f0ed-4981-a226-66d517778d5c",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`_ctypes` was the only user of `_get_void_ptr` - it sounds like it can be removed too.",
        "createdAt" : "2019-09-14T22:02:11Z",
        "updatedAt" : "2019-10-05T21:09:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "52057f4a-fd42-48e5-b446-fb8d4b654378",
        "parentId" : "a2240eda-f0ed-4981-a226-66d517778d5c",
        "authorId" : "b7ce9faa-1440-4dfc-8c69-fd880a794a94",
        "body" : "Should I remove it or leave it to you if there are other places of the PR that may need to be cleaned up?",
        "createdAt" : "2019-09-16T00:55:33Z",
        "updatedAt" : "2019-10-05T21:09:21Z",
        "lastEditedBy" : "b7ce9faa-1440-4dfc-8c69-fd880a794a94",
        "tags" : [
        ]
      },
      {
        "id" : "76c7d3ab-c658-4edb-b380-41b993b58d6f",
        "parentId" : "a2240eda-f0ed-4981-a226-66d517778d5c",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Go ahead and remove it, along with the functions it calls",
        "createdAt" : "2019-09-16T00:56:43Z",
        "updatedAt" : "2019-10-05T21:09:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "53dd7d6a706f5d9e93b41f714b46c6d32b085aec",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +257,261 @@        else:\n            # fake a pointer-like object that holds onto the reference\n            self._ctypes = _missing_ctypes()\n            self._data = self._ctypes.c_void_p(ptr)\n            self._data._objects = array"
  },
  {
    "id" : "fc0a3829-79a3-4c1c-a1b2-6f85d3a15779",
    "prId" : 14469,
    "prUrl" : "https://github.com/numpy/numpy/pull/14469#pullrequestreview-288404113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0132f0fc-47a4-43fe-be1c-a5103279c5cc",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you do this on line 298 instead?",
        "createdAt" : "2019-09-16T01:17:24Z",
        "updatedAt" : "2019-10-05T21:09:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b6be9b9c-0dd2-498c-b7c9-09ca3ab0e838",
        "parentId" : "0132f0fc-47a4-43fe-be1c-a5103279c5cc",
        "authorId" : "b7ce9faa-1440-4dfc-8c69-fd880a794a94",
        "body" : "No. If _arr is assigned to ._data at L298, ctypes.cast will create a reference to ._data in ._data._objects when calling .ctypes.data_as(...) . This causes the circular reference to ._data. All attributes of ._data cannot be released automatically. ._arr has to be assigned lazily.",
        "createdAt" : "2019-09-16T01:29:47Z",
        "updatedAt" : "2019-10-05T21:09:21Z",
        "lastEditedBy" : "b7ce9faa-1440-4dfc-8c69-fd880a794a94",
        "tags" : [
        ]
      },
      {
        "id" : "e46cb8e8-6ddf-4eb1-b64f-578637bbd86f",
        "parentId" : "0132f0fc-47a4-43fe-be1c-a5103279c5cc",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "So to be clear, even if we take this patch as is, `arr.ctypes.data_as(c_void_p).cast(something_else)` creates a circular reference?\r\n\r\nI'm wondering whether it would make more sense to focus on an upstream patch.",
        "createdAt" : "2019-09-16T01:33:45Z",
        "updatedAt" : "2019-10-05T21:09:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3e75c1ca-845e-42a8-92d9-e4c1686fcc22",
        "parentId" : "0132f0fc-47a4-43fe-be1c-a5103279c5cc",
        "authorId" : "b7ce9faa-1440-4dfc-8c69-fd880a794a94",
        "body" : "Yes, call .cast() again creates another circular reference.\r\n\r\nI doubt whether this bug of CPython can be fixed soon. https://bugs.python.org/issue12836. It was noticed in 2011. Except for a few discussion around 2013, no updates since then.",
        "createdAt" : "2019-09-16T03:06:02Z",
        "updatedAt" : "2019-10-05T21:09:21Z",
        "lastEditedBy" : "b7ce9faa-1440-4dfc-8c69-fd880a794a94",
        "tags" : [
        ]
      }
    ],
    "commit" : "53dd7d6a706f5d9e93b41f714b46c6d32b085aec",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +282,286 @@        # CPython bug https://bugs.python.org/issue12836\n        ptr = self._ctypes.cast(self._data, obj)\n        ptr._arr = self._arr\n        return ptr\n"
  },
  {
    "id" : "272d11bd-401d-4d6e-8452-d581a896acba",
    "prId" : 14469,
    "prUrl" : "https://github.com/numpy/numpy/pull/14469#pullrequestreview-297808790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b256f21-2990-4eb3-9373-9d0baf787782",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This comment should reference the upstream python bug.",
        "createdAt" : "2019-10-03T08:17:56Z",
        "updatedAt" : "2019-10-05T21:09:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d1c62612-4451-4707-b651-24df71685331",
        "parentId" : "5b256f21-2990-4eb3-9373-9d0baf787782",
        "authorId" : "b7ce9faa-1440-4dfc-8c69-fd880a794a94",
        "body" : "Sure. The upstream CPython bug https://bugs.python.org/issue12836 was added in the comment.",
        "createdAt" : "2019-10-05T21:10:09Z",
        "updatedAt" : "2019-10-05T21:10:09Z",
        "lastEditedBy" : "b7ce9faa-1440-4dfc-8c69-fd880a794a94",
        "tags" : [
        ]
      }
    ],
    "commit" : "53dd7d6a706f5d9e93b41f714b46c6d32b085aec",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +277,281 @@        \"\"\"\n        # _ctypes.cast function causes a circular reference of self._data in\n        # self._data._objects. Attributes of self._data cannot be released\n        # until gc.collect is called. Make a copy of the pointer first then let\n        # it hold the array reference. This is a workaround to circumvent the"
  },
  {
    "id" : "e9dd531e-076f-4e84-9510-fa0a6a5ecde2",
    "prId" : 15119,
    "prUrl" : "https://github.com/numpy/numpy/pull/15119#pullrequestreview-342504121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70395e77-794e-4934-a4be-3990bae593c8",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Is this (still) necessary? I am not sure how it is related.",
        "createdAt" : "2020-01-14T03:41:58Z",
        "updatedAt" : "2020-01-21T18:17:19Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "1c5c141d-8142-46e0-b4bb-4e5203e249f4",
        "parentId" : "70395e77-794e-4934-a4be-3990bae593c8",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "it is only tangentially related, in that `ctypes` is not very specific and so can be confused, especially since we have a `numerictypes` module. I would like to leave the change even though it is not needed by this PR, since it may prevent someone in the future spending too much time staring at an error. Although `_ctypes` is only marginally better. This is all a hack around a cpython issue.",
        "createdAt" : "2020-01-14T06:03:11Z",
        "updatedAt" : "2020-01-21T18:17:19Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "cd8167a5-5644-47a4-b166-3ceec587cf26",
        "parentId" : "70395e77-794e-4934-a4be-3990bae593c8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Whoops, I hadnt considered numeri**ctypes\"\"",
        "createdAt" : "2020-01-14T12:44:30Z",
        "updatedAt" : "2020-01-21T18:17:19Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ff45dc8fabcc0ab54dd5d2db7170ad82a23d1fb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +839,843 @@            ctype_base = cls.__mro__[-2]\n        # right now, they're part of the _ctypes module\n        return '_ctypes' in ctype_base.__module__\n    except Exception:\n        return False"
  },
  {
    "id" : "93504051-0e83-4015-9bfb-efde4e8687f7",
    "prId" : 19052,
    "prUrl" : "https://github.com/numpy/numpy/pull/19052#pullrequestreview-664714412",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01fcfda0-28bf-4995-b03d-39e2c79a55c4",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Apparently the `axis` parameter is only available to gufuncs with a \"single shared core dimension\".\r\nIt's not 100% clear to me what exactly this means and how to extract this info from the gufuncs signature.\r\n\r\nIf anyone could provide some insight here, then this could help with conditionally removing `axis`.",
        "createdAt" : "2021-05-20T15:15:53Z",
        "updatedAt" : "2021-05-20T15:36:32Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "0c826ad1-77ad-4339-96d2-87ba41945a62",
        "parentId" : "01fcfda0-28bf-4995-b03d-39e2c79a55c4",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@seberg Thoughts?",
        "createdAt" : "2021-05-20T17:35:37Z",
        "updatedAt" : "2021-05-20T17:35:38Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "63e09a36-aad0-49c1-b212-78945fa1111b",
        "parentId" : "01fcfda0-28bf-4995-b03d-39e2c79a55c4",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "In theory... you could parse the signature to see if there is only a single distinct letter included.  The ufunc does store the number (that has to be 1) explicitly on the C-side, but doens't expose it.\r\n\r\nBut I guess you don't have access to that runtime information, so probably just have to allow this.  An example that fails is `matmul`.",
        "createdAt" : "2021-05-20T18:07:26Z",
        "updatedAt" : "2021-05-20T18:07:27Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "4af22e0b-8b26-4ab5-9518-1b7fe0f500f2",
        "parentId" : "01fcfda0-28bf-4995-b03d-39e2c79a55c4",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Ah so be it, false negatives are generally less disruptive than false positives anyway.",
        "createdAt" : "2021-05-20T18:11:41Z",
        "updatedAt" : "2021-05-20T18:11:41Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "81f528ae968830fc837543b2741786ba699a2d3c",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +850,854 @@        kwargs = f\", where=True{kwargs}[, signature, extobj]\"\n    else:\n        kwargs += \"[, signature, extobj, axes, axis]\"\n\n    # join all the parts together"
  }
]