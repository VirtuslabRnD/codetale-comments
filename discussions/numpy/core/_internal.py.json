[
  {
    "id" : "15dad349-b85c-4d53-ac72-4595bcdacb49",
    "prId" : 401,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e19d5935-d029-4425-bf6f-2538912874b5",
        "parentId" : null,
        "authorId" : "041ba948-3afd-44ae-9741-f412d7673058",
        "body" : "This \"array\" should be imported from the line `from multiarray import empty, dtype, array` in the same function. I'll fix it in the next patch.\n",
        "createdAt" : "2012-08-31T21:45:24Z",
        "updatedAt" : "2012-08-31T21:45:24Z",
        "lastEditedBy" : "041ba948-3afd-44ae-9741-f412d7673058",
        "tags" : [
        ]
      },
      {
        "id" : "c7272e77-5cb6-4806-a0c4-c9dc7e58ed02",
        "parentId" : "e19d5935-d029-4425-bf6f-2538912874b5",
        "authorId" : "041ba948-3afd-44ae-9741-f412d7673058",
        "body" : "See #404.\n",
        "createdAt" : "2012-08-31T21:49:27Z",
        "updatedAt" : "2012-08-31T21:49:27Z",
        "lastEditedBy" : "041ba948-3afd-44ae-9741-f412d7673058",
        "tags" : [
        ]
      }
    ],
    "commit" : "93100c92b57dd9663b688fdd94efc7d05ef7ff38",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +299,303 @@    # in favor of returning view\n    copy_dtype = {'names':view_dtype['names'], 'formats':view_dtype['formats']}\n    from numpy import array\n    return array(view, dtype=copy_dtype, copy=True)\n"
  },
  {
    "id" : "9abe06f1-eab7-4eca-bbbd-1fcaa27e34e1",
    "prId" : 5548,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4496c6f-cc14-4b6c-9ec9-e6cb808b1e73",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "There are smarter ways of going about this check, but we probably shouldn't let micro-optimizations distract us from the larger goal.\n",
        "createdAt" : "2015-03-14T18:29:58Z",
        "updatedAt" : "2015-06-05T05:14:57Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2cd6fa869cec6d92062fb687d8e6952c1202017",
    "line" : null,
    "diffHunk" : "@@ -1,1 +367,371 @@    from .multiarray import dtype\n\n    #first go byte by byte and check we do not access bytes not in old_fields\n    new_bytes = set()\n    for tp, off in new_fields:"
  },
  {
    "id" : "e32dc654-24d4-40b1-aa19-002728ce4726",
    "prId" : 8843,
    "prUrl" : "https://github.com/numpy/numpy/pull/8843#pullrequestreview-29550371",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Now with a docstring, which Ipython shows when you type an exception name. This is in a similar style to the builtin ones.",
        "createdAt" : "2017-03-27T01:27:22Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "9f0cd79a-7aac-4a3a-b6cb-0982829fb91f",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This should be in `numpy/_globals.py`.",
        "createdAt" : "2017-03-28T17:29:55Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "cdc42c4d-987d-4443-8000-e46f5b0b76dd",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "And imported into `numpy/__init__.py`.",
        "createdAt" : "2017-03-28T17:31:59Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "77965ac2-2fdb-4f39-afbb-8e838fa61622",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I put it here in #8584 because it needs to be imported from C code, and that's what `_internals` seems to be used for. Is it safe to load `_globals.py` from C?\r\n\r\n`AxisError` is already visible at the global scope as `np.AxisError`, as it goes through the `__all__` chain.",
        "createdAt" : "2017-03-28T18:01:13Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "562aa48d-3972-4d02-8675-9f65bf8f409e",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "You can import from practically anything. We also import from multiarray itself into C code. I'd import this from '\"numpy\"', The `_globals` is for singletons that may also be used by python code.",
        "createdAt" : "2017-03-28T18:27:14Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "511d0bfd-7ca8-4db5-a116-7579f139e4a0",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Python code should not be importing from `_internal.py`.",
        "createdAt" : "2017-03-28T18:40:17Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e56d0d6d-2deb-4720-9694-90f34919a8c5",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Should `TooHardError` move there too?\r\n",
        "createdAt" : "2017-03-28T18:46:26Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a34e4874-45d2-4cee-b343-0e170a207422",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "right now, `numeric.py` has `from ._internal import TooHardError, AxisError`\r\n\r\n`core/__init__.py` also contains `from . import _internal  # for freeze programs`, for some reason\r\n",
        "createdAt" : "2017-03-28T18:49:25Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d11c524f-decf-41f0-b191-db6d90141f15",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Probably, but it can be done in a separate PR as the imports also need to be changed. Maybe `_globals.py` should be renamed `_global_singletons` or `_global_exceptions` ;) There are other errors scattered about that maybe we should move at some point.",
        "createdAt" : "2017-03-28T18:54:50Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c80cb7a0-c5be-4414-b5d0-7f662f4d32f5",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Or maybe `_numpy_exceptions`",
        "createdAt" : "2017-03-28T19:01:24Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a7ed4454-9ba2-4787-8fe0-75e939e6c580",
        "parentId" : "9853d455-c720-4e13-85dd-0190f9e9f5f2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Do you want me to do both in a separate PR? `AxisError` being in that file is not new to this PR.\r\n\r\n(either way, fix coming for something else, so don't merge yet!)",
        "createdAt" : "2017-03-28T19:24:03Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "17466ad1839718c091c629bb647e881b7922a148",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +632,636 @@\nclass AxisError(ValueError, IndexError):\n    \"\"\" Axis supplied was invalid. \"\"\"\n    def __init__(self, axis, ndim=None, msg_prefix=None):\n        # single-argument form just delegates to base class"
  },
  {
    "id" : "bb06bf87-567b-4efe-86d5-bb37065dece4",
    "prId" : 11721,
    "prUrl" : "https://github.com/numpy/numpy/pull/11721#pullrequestreview-147464007",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13db2e65-e85a-4e0d-a519-7cbd19875c9c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I wish `ctypes` would provide a low-level API to save us from doing this dance",
        "createdAt" : "2018-08-19T16:26:49Z",
        "updatedAt" : "2018-11-05T01:24:18Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "79baef7a80769842f1c7f14e31056e4750a122e8",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +248,252 @@def _get_void_ptr(arr):\n    \"\"\"\n    Get a `ctypes.c_void_p` to arr.data, that keeps a reference to the array\n    \"\"\"\n    import numpy as np"
  },
  {
    "id" : "01d13124-8919-4520-bff8-18cb6adceed3",
    "prId" : 11910,
    "prUrl" : "https://github.com/numpy/numpy/pull/11910#pullrequestreview-154421732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a72d4b66-0844-4653-b5ac-d112b8a2c4ec",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This could do with a comment about why it is needed",
        "createdAt" : "2018-09-11T22:24:13Z",
        "updatedAt" : "2018-09-12T05:38:34Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cf6759e3b48cc9b0dcfbf8537ba61b95a0d4844",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +811,815 @@\n\nclass recursive(object):\n    '''\n    A decorator class for recursive nested functions."
  },
  {
    "id" : "0abcd6e7-465d-47a5-b0e9-64810e5d2783",
    "prId" : 11910,
    "prUrl" : "https://github.com/numpy/numpy/pull/11910#pullrequestreview-155172793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "413e7b2f-8900-4109-9d97-abb83afba15b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "nit: this should probably call `functools.update_wrapper`",
        "createdAt" : "2018-09-13T16:45:47Z",
        "updatedAt" : "2018-09-13T16:45:48Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cf6759e3b48cc9b0dcfbf8537ba61b95a0d4844",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +837,841 @@    '''\n    def __init__(self, func):\n        self.func = func\n    def __call__(self, *args, **kwargs):\n        return self.func(self, *args, **kwargs)"
  },
  {
    "id" : "0355bc77-78cd-4371-a90d-5fa26ba44d4b",
    "prId" : 12254,
    "prUrl" : "https://github.com/numpy/numpy/pull/12254#pullrequestreview-168533531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc143c26-536c-4e1c-b5f5-26ef32f0182a",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK, I see that the static type is checked in the C code.",
        "createdAt" : "2018-10-25T18:48:39Z",
        "updatedAt" : "2018-10-26T04:24:36Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0709d92f78cc6e78ba79da9a25627db87059b31d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +797,801 @@\n\ndef npy_ctypes_check(cls):\n    # determine if a class comes from ctypes, in order to work around\n    # a bug in the buffer protocol for those objects, bpo-10746"
  }
]