[
  {
    "id" : "7705bdbd-2d09-4de3-9961-b8f0e6a1dd7b",
    "prId" : 3482,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca00b1f0-ff64-458c-89ab-de4b598340b3",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "After double checking, this seems not quite right. `dtype(None) == np.float64` in other words, this casts to float no matter what the input is if `None` is given, which disagrees with the documentation.\n",
        "createdAt" : "2013-06-28T20:33:51Z",
        "updatedAt" : "2013-09-13T21:28:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8cdbbaee1967011d98aa454b14232488df451d3",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +95,99 @@        y = _nx.arange(0, num, dtype=dtype) * step + start\n    if retstep:\n        return y.astype(dtype), step\n    else:\n        return y.astype(dtype)"
  },
  {
    "id" : "0c9ae198-9b9b-44ef-8d18-42ce63a318ba",
    "prId" : 5446,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a2ee573-5429-4a65-8eee-92334ea0d22f",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Shouldn't 1 item long sequences raise an error if `start != stop` and `endpoint == True`?\n",
        "createdAt" : "2015-01-14T18:40:34Z",
        "updatedAt" : "2015-01-14T18:40:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c9461bc6-aae8-4ca6-affb-793b9a3da5e2",
        "parentId" : "7a2ee573-5429-4a65-8eee-92334ea0d22f",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "It could, but it doesn't right now. A negative `num` is also a good candidate for a `ValueError`, but it also never has.\n\nThere was some minimal discussion on the list between Chris Barker and Ben Root, on whether to return whatever or raise an error. I have no opinion either way, but in the absence of a strong argument, I would go with the principle of least surprise and leave things as they are.\n",
        "createdAt" : "2015-01-14T18:48:37Z",
        "updatedAt" : "2015-01-14T18:48:37Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "5834d4b1-7e53-4d75-9c6b-911e30eadd2f",
        "parentId" : "7a2ee573-5429-4a65-8eee-92334ea0d22f",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Seems to me that both those cases are actually errors. Hmm, I'd even be inclined to require `num` at least two if `endpoint=True`, and at least one if not, but would be pushing things...\n",
        "createdAt" : "2015-01-14T19:08:30Z",
        "updatedAt" : "2015-01-14T19:08:30Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2aab65415843c8a8c662ddb5d33536dc95671076",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +105,109 @@            y *= step\n    else:\n        # 0 and 1 item long sequences have an undefined step\n        step = NaN\n"
  },
  {
    "id" : "2ae6cf90-513e-43b5-8e1e-3a5358baacb4",
    "prId" : 5446,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad56ab2f-b688-43e6-8e15-6d3909b93b5f",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could as easily be `0`, any special reason for `NaN`?\n",
        "createdAt" : "2015-01-14T18:44:28Z",
        "updatedAt" : "2015-01-14T18:44:28Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2aab65415843c8a8c662ddb5d33536dc95671076",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +106,110 @@    else:\n        # 0 and 1 item long sequences have an undefined step\n        step = NaN\n\n    y += start"
  },
  {
    "id" : "599d7f91-4a48-44ef-9ec1-b196e06960b9",
    "prId" : 7328,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7acfac79-6c2f-480b-9175-62787d37c245",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Why use stack level 3?\n",
        "createdAt" : "2016-03-08T21:24:37Z",
        "updatedAt" : "2016-03-09T08:28:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c2019ea7-389c-4494-ae0f-8d8e5525283f",
        "parentId" : "7acfac79-6c2f-480b-9175-62787d37c245",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "That's correct -- the +1 corrects for the helper function's stack frame, and then stacklevel 2 means to warn the caller of linspace (rather than warning linspace itself).\n",
        "createdAt" : "2016-03-08T21:40:31Z",
        "updatedAt" : "2016-03-09T08:28:10Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "3af411b270c8ec57ca9ced6fb69029cd86a8e417",
    "line" : null,
    "diffHunk" : "@@ -1,1 +16,20 @@               \"an integer.\".format(type(i)))\n        i = int(i)\n        stacklevel += 1\n        warnings.warn(msg, DeprecationWarning, stacklevel=stacklevel)\n    return i"
  },
  {
    "id" : "40a620d1-07c5-470f-a2a5-8a5487d3b610",
    "prId" : 7328,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fabf496-e6d7-4411-b79f-a495f02d5d52",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Don't use a function for this and using the `try ... except` construct seems unwieldy. I suspect you could either check for the `__index__` attribute, or use the `numbers` module\n\n```\nif not isinstance(i, numbers.Integral):\n    deprecate...\ni = int(i)\n```\n",
        "createdAt" : "2016-03-08T21:34:24Z",
        "updatedAt" : "2016-03-09T08:28:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "774ad4f5-feb9-43f4-bc32-d07005c384c3",
        "parentId" : "7fabf496-e6d7-4411-b79f-a495f02d5d52",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "Hmm, try/except seems simple and obviously correct to me. I think checking for `__index__` is probably correct but am not as confident, and I'm pretty sure checking for `Integral` is subtly wrong. So I'd vote for the current implementation, on the ground that we should only use style as a tie breaker when we're version that all the options being considered are correct :-).\n\nIt doesn't much matter whether we have a helper function here or write the same code inline, but I think the helper function got added at someone (@seberg's?) request in an earlier round of review, and I do agree that it makes things easier to read. I think the original motivation was that we have a similar helper at the C level and it's useful to use in multiple places; here we only have one user so it doesn't matter as much, but potentially there will be other users in the future.\n",
        "createdAt" : "2016-03-08T21:47:49Z",
        "updatedAt" : "2016-03-09T08:28:10Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "69738e60-7dc8-49f0-8bbc-e68493609694",
        "parentId" : "7fabf496-e6d7-4411-b79f-a495f02d5d52",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yeah, I thought it was a good idea. Of course, it basically only makes sense if we also use it elsewhere, I somewhat expected we have enough other places. Tthough, of course it is also possible that nobody will bother to do similar fixes elsewhere for a long while....\n\nI like using try/except. Try except seems nice to me, since it tries to use the final version we would like to be using at some point. If the final version wasn't what we try first, I would agree that the check might be better (though it also safes me from worrying about weird corner cases).\n",
        "createdAt" : "2016-03-08T21:58:33Z",
        "updatedAt" : "2016-03-09T08:28:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "37f71ad1-c61f-48c6-a46c-f4e03c6adf30",
        "parentId" : "7fabf496-e6d7-4411-b79f-a495f02d5d52",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "> I'm pretty sure checking for Integral is subtly wrong.\n\nCould you explain? It gets all the numpy and python integers and their subclasses and can't be worse than calling `__index__` to see what happens. It also guarantees int conversions, and ints are what we want, not indexes.\n",
        "createdAt" : "2016-03-08T23:14:15Z",
        "updatedAt" : "2016-03-09T08:28:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ba3c89ac-01da-4b6c-8014-640c50ff49da",
        "parentId" : "7fabf496-e6d7-4411-b79f-a495f02d5d52",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "`__index__` is the standard Python protocol for \"you should support silently coercing me to an integer\", and what we use universally everywhere else (or have been migrating towards using). For the particular types you list either approach will give the same answer, but in general there's no rule that everyone who implements `__index__` has to also subclass `Integral`.\n\nAlso:\n\n```\nIn [4]: isinstance(np.int8, numbers.Integral)\nOut[4]: False\n```\n",
        "createdAt" : "2016-03-08T23:25:00Z",
        "updatedAt" : "2016-03-09T08:28:10Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "56c80c21-4453-417a-8104-146ae6367b60",
        "parentId" : "7fabf496-e6d7-4411-b79f-a495f02d5d52",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Note that using index passes numpy booleans, although python booleans always pass as subclasses of int. Also, we are counting (integers) not indexing. If we check for indexes we should change the documentation and warning to reflect that requirement.\n",
        "createdAt" : "2016-03-08T23:48:52Z",
        "updatedAt" : "2016-03-09T08:28:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e5530c79-8c0e-4d7c-9c64-df70e63ee458",
        "parentId" : "7fabf496-e6d7-4411-b79f-a495f02d5d52",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "> Note that using index passes numpy booleans, although python booleans always pass as subclasses of int\n\nGood catch :-) gh-7395\n\n> Also, we are counting (integers) not indexing. If we check for indexes we should change the documentation and warning to reflect that requirement.\n\nSome other built-in python functions that are not indexing, but that nonetheless call `__index__`: `hex/oct/bin`, `int(x, base=b)` (calls `x.__int__` but `b.__index__`), `list.__mul__`, `range(...)`, `struct.pack` (when packing an integer), ...\n\nOfficial documentation of `__index__`: \"Called [...] whenever Python needs to losslessly convert the numeric object to an integer object\"\n\nThe name `__index__` is a historical artifact -- indexing is one place where it's used, but that's not really what it's about. `__index__` is very much the standard Python way to do safe casting to `int` (as opposed to `__int__`, which is for unsafe casting).\n",
        "createdAt" : "2016-03-09T00:25:05Z",
        "updatedAt" : "2016-03-09T08:28:10Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "3af411b270c8ec57ca9ced6fb69029cd86a8e417",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +9,13 @@from .numeric import result_type, NaN, shares_memory, MAY_SHARE_BOUNDS, TooHardError\n\ndef _index_deprecate(i, stacklevel=2):\n    try:\n        i = operator.index(i)"
  },
  {
    "id" : "af06a942-3238-48a6-87c8-d89f6187fd76",
    "prId" : 12253,
    "prUrl" : "https://github.com/numpy/numpy/pull/12253#pullrequestreview-182004360",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb3be4c7-2437-4210-a24e-9a2beaf7ddf4",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Does this still render?",
        "createdAt" : "2018-12-02T00:38:06Z",
        "updatedAt" : "2018-12-14T18:23:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "fbab1dc4-abcf-419f-98ee-1d14f58b9fea",
        "parentId" : "bb3be4c7-2437-4210-a24e-9a2beaf7ddf4",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "I added an example of `agg` backend still working in circleci doc artifacts below",
        "createdAt" : "2018-12-05T21:49:11Z",
        "updatedAt" : "2018-12-14T18:23:52Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "208e6620-b252-4286-affd-55f8b357d6f7",
        "parentId" : "bb3be4c7-2437-4210-a24e-9a2beaf7ddf4",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Can you at least open a separate issue for this. `matplotlib.use(...)` really should not be present in our docs",
        "createdAt" : "2018-12-05T22:27:02Z",
        "updatedAt" : "2018-12-14T18:23:52Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "28f8a85b9ece5773a8ac75ffcd2502fc93612eff",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +381,385 @@\n    >>> import matplotlib\n    >>> matplotlib.use('agg')\n    >>> import matplotlib.pyplot as plt\n    >>> N = 10"
  },
  {
    "id" : "537e5675-e08d-414f-816f-3e79d2a1c959",
    "prId" : 12388,
    "prUrl" : "https://github.com/numpy/numpy/pull/12388#pullrequestreview-181773681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af60a74d-4328-4b89-a785-4df83ad688f2",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Does this behave differently than just passing `dtype` in directly?",
        "createdAt" : "2018-12-05T06:34:29Z",
        "updatedAt" : "2018-12-06T18:10:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ce6c7857-b897-4f07-8275-ce91c7f35439",
        "parentId" : "af60a74d-4328-4b89-a785-4df83ad688f2",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "`dtype` can be `None` - I actually tried thinking of a quicker way.",
        "createdAt" : "2018-12-05T14:12:18Z",
        "updatedAt" : "2018-12-06T18:10:04Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "abf62624f7e2ea41029c0dbaeef9c2851429a07a",
    "line" : 191,
    "diffHunk" : "@@ -1,1 +389,393 @@        raise ValueError('Geometric sequence cannot include zero')\n\n    dt = result_type(start, stop, float(num), _nx.zeros((), dtype))\n    if dtype is None:\n        dtype = dt"
  },
  {
    "id" : "5875c03f-9df4-41b4-8f7b-83caec4b157e",
    "prId" : 13092,
    "prUrl" : "https://github.com/numpy/numpy/pull/13092#pullrequestreview-211249461",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81ed9fa4-dc10-4746-867a-3cdb3d76eac0",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Ideally you'd do this computation while forcing the result to be an array and not a scalar, which would work better for nested object arrays. Perhaps ufuncs should gain a `keeparray` argument for this...",
        "createdAt" : "2019-03-05T03:31:48Z",
        "updatedAt" : "2019-03-05T03:31:49Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "4c381425-a0a8-4273-bf6f-b4fcffab5d06",
        "parentId" : "81ed9fa4-dc10-4746-867a-3cdb3d76eac0",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "It may be simpler to change the current behaviour of ufuncs: array scalar plus array scalar should not decay to a regular scalar.",
        "createdAt" : "2019-03-05T13:49:22Z",
        "updatedAt" : "2019-03-05T13:49:23Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "7d603ee3-f82b-4134-a401-e41111f496cc",
        "parentId" : "81ed9fa4-dc10-4746-867a-3cdb3d76eac0",
        "authorId" : "67a9acb3-5471-4a28-a6e6-c8cf20d248cd",
        "body" : "Isn't the problem in line 135 and 136.\r\n\r\n```\r\nIn [21]: type(np.asanyarray(np.array(1))*1.0)\r\nOut[21]: numpy.float64\r\n\r\nIn [22]: type(np.asanyarray(np.array(1, dtype='O'))*1.0)\r\nOut[22]: float\r\n```\r\n",
        "createdAt" : "2019-03-06T08:40:05Z",
        "updatedAt" : "2019-03-06T08:40:05Z",
        "lastEditedBy" : "67a9acb3-5471-4a28-a6e6-c8cf20d248cd",
        "tags" : [
        ]
      },
      {
        "id" : "041b314f-6546-470a-96b7-fece1e6dca3e",
        "parentId" : "81ed9fa4-dc10-4746-867a-3cdb3d76eac0",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "@jenshnielsen - indeed, you are right. the problem is earlier, though it is the same issue: that an array scalar is allowed to decay to a regular one.",
        "createdAt" : "2019-03-06T14:11:13Z",
        "updatedAt" : "2019-03-06T14:11:13Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3fdef08b5c586fff50fdabb0967e53ccaaab3c4",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +140,144 @@        dtype = dt\n\n    delta = stop - start\n    y = _nx.arange(0, num, dtype=dt).reshape((-1,) + (1,) * ndim(delta))\n    # In-place multiplication y *= delta/div is faster, but prevents the multiplicant"
  },
  {
    "id" : "5270a7ce-fb9c-4b3b-9ad2-77ee70d1691e",
    "prId" : 13935,
    "prUrl" : "https://github.com/numpy/numpy/pull/13935#pullrequestreview-261580774",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "462e1784-50ce-4e3d-9e49-5d03c7529ea0",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The tests are complaining about the stack level of the warning.",
        "createdAt" : "2019-07-14T12:44:59Z",
        "updatedAt" : "2019-07-14T18:32:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d14632c603fc290207e38a10c2d9716ef1567666",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +448,452 @@\ndef _add_docstring(obj, doc, warn_on_python):\n    if warn_on_python and not _needs_add_docstring(obj):\n        warnings.warn(\n            \"add_newdoc was used on a pure-python object {}. \""
  },
  {
    "id" : "a2753503-8537-445c-b7be-f69ac2f34e4b",
    "prId" : 13946,
    "prUrl" : "https://github.com/numpy/numpy/pull/13946#pullrequestreview-259856306",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5786ed78-2066-4d16-9821-9364bab59996",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Fixed the typo, and changed to `PyType_Ready` too",
        "createdAt" : "2019-07-10T03:37:12Z",
        "updatedAt" : "2019-07-10T03:37:12Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "45c4a8dc09ecaff6352a2e17cb242f7ae5ca11a9",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +474,478 @@\n    - modifying a `PyTypeObject` after calling `PyType_Ready`\n    - calling `Py_INCREF` on the str and losing the reference, so the str\n      will never be released\n"
  },
  {
    "id" : "1cc01e94-6b75-4fc6-9d37-a0e2c96f7d38",
    "prId" : 16411,
    "prUrl" : "https://github.com/numpy/numpy/pull/16411#pullrequestreview-420137964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0c6c9c1-529e-441e-ba0d-b0d016342cca",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This code isn't correct if `axis != 0` unfortunately",
        "createdAt" : "2020-05-28T12:31:48Z",
        "updatedAt" : "2020-06-04T10:22:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d4c02861-e099-466a-aec9-ebe63ebbd612",
        "parentId" : "e0c6c9c1-529e-441e-ba0d-b0d016342cca",
        "authorId" : "e48d9695-21e5-4a2d-96a8-f1a1d677df7f",
        "body" : "Happy to fix if you can tell me what's wrong, because all tests are green, including the ones where `axis != 0`. (There is an Azure pipeline check that fails, but that seems to be caused by [quay.io being down](https://dev.azure.com/numpy/27346c6a-2774-4eac-bf85-e068127c0ccc/_apis/build/builds/10403/logs/44).)\r\n",
        "createdAt" : "2020-05-28T12:57:07Z",
        "updatedAt" : "2020-06-04T10:22:25Z",
        "lastEditedBy" : "e48d9695-21e5-4a2d-96a8-f1a1d677df7f",
        "tags" : [
        ]
      },
      {
        "id" : "0926c310-9e76-4ffd-be7e-e4404b05ba7d",
        "parentId" : "e0c6c9c1-529e-441e-ba0d-b0d016342cca",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Sure, happy to elaborate, was on mobile so I thought I'd leave a breadcrumb in case other reviewers got back to it.\r\n\r\nI think the following case fails with this patch:\r\n```\r\nnp.geomspace(np.array([1, 2]), np.array([100, 200]), 3, axis=1)\r\n```",
        "createdAt" : "2020-05-28T13:15:51Z",
        "updatedAt" : "2020-06-04T10:22:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "83cdf57c-31df-45ad-a269-432fcc9797f0",
        "parentId" : "e0c6c9c1-529e-441e-ba0d-b0d016342cca",
        "authorId" : "e48d9695-21e5-4a2d-96a8-f1a1d677df7f",
        "body" : "That results in\r\n\r\n```\r\n[[  1.  10. 100.]\r\n [  2.  20. 200.]]\r\n```\r\nindependently of whether my patch is applied or not. Note that the `moveaxis()` call is still there - *after* my code change.\r\n\r\n",
        "createdAt" : "2020-05-28T13:53:22Z",
        "updatedAt" : "2020-06-04T10:22:25Z",
        "lastEditedBy" : "e48d9695-21e5-4a2d-96a8-f1a1d677df7f",
        "tags" : [
        ]
      },
      {
        "id" : "33b908e3-727d-45ed-82d3-68408b9c2079",
        "parentId" : "e0c6c9c1-529e-441e-ba0d-b0d016342cca",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Apologies, you're correct - this function doesn't work how I thought it did.",
        "createdAt" : "2020-05-28T14:01:24Z",
        "updatedAt" : "2020-06-04T10:22:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "8cdbe30377c806cef30b0c5c9d54370e8deed4b7",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +417,421 @@        result[0] = start\n        if num > 1 and endpoint:\n            result[-1] = stop\n\n    result = out_sign * result"
  },
  {
    "id" : "e5576e20-87c9-4280-bba9-f1bee137183a",
    "prId" : 16841,
    "prUrl" : "https://github.com/numpy/numpy/pull/16841#pullrequestreview-466678412",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1864d1e-cda3-4c4f-88cd-8b5932694172",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Docstring mention of the way to preserve the old behaviour. ",
        "createdAt" : "2020-08-13T11:35:13Z",
        "updatedAt" : "2020-08-13T11:35:13Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd2ddde2a22b80ad8fee815276065f417bdd2177",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +39,43 @@        integer ``dtype`` is specified. The old behavior can\n        still be obtained with ``np.linspace(start, stop, num).astype(int)``\n\n    Parameters\n    ----------"
  }
]