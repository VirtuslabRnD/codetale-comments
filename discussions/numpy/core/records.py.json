[
  {
    "id" : "46837d69-be02-4a7c-91e9-7c83232f75a3",
    "prId" : 5505,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4abc5737-82f3-41bc-8ccd-58a60dbe759e",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Other way around? `a.view(dtype=None, type=None)`.  Are the parenthesis needed?\n",
        "createdAt" : "2015-01-26T21:59:28Z",
        "updatedAt" : "2015-01-27T01:20:51Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "71592aab-49d5-4e7d-ae10-dbbac205b921",
        "parentId" : "4abc5737-82f3-41bc-8ccd-58a60dbe759e",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "No, it's right. This is actually a _type_ view (`np.void.view`) , not an _ndarray_ view (`np.ndarray.view`). The argument is a dtype format in tuple form `(base_type, descr)`  (ie, it would go in the `dtype=` argument of `np.ndarray.view`).\n\nAs an aside, `np.void.view` only accepts a single unnamed argument, while `np.ndarray.view` has named `dtype` and `type` arguments. Yet the dosctring for `np.void.view` says\n\n> Not implemented (virtual attribute)\n> Class generic exists solely to derive numpy scalars from, and possesses,\n> albeit unimplemented, all the attributes of the ndarray class\n> so as to provide a uniform API.\n\nI am not sure what is going on there. It _is_ implemented, and it has a different method signature from `ndarray.view`.\n",
        "createdAt" : "2015-01-26T23:03:16Z",
        "updatedAt" : "2015-01-27T01:20:51Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "ea77d7a3-91ca-4604-9596-9710bf287b69",
        "parentId" : "4abc5737-82f3-41bc-8ccd-58a60dbe759e",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Oh, and to clarify what this line does: It makes nested types behave like records too.\n\nDemostration:\n\n```\n>>> rec = np.rec.array([('abc ', (1,1), 1), ('abc', (2,3), 1)],\n... dtype=[('foo', 'S4'), ('bar', [('A', int), ('B', int)]), ('baz', int)])\n```\n\nOld behavior:\n\n```\n>>> rec[0].bar.A\nAttributeError: 'numpy.void' object has no attribute 'A'\n```\n\nNew behavior:\n\n```\n>>> rec[0].bar.A\n1\n```\n",
        "createdAt" : "2015-01-26T23:19:51Z",
        "updatedAt" : "2015-01-27T01:20:51Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd9e7339c37880cff0a2f381e881e0e612c4948",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +246,250 @@                return obj\n            if dt.fields:\n                return obj.view((record, obj.dtype.descr))\n            return obj\n        else:"
  },
  {
    "id" : "6d5b49b8-383c-4076-86df-b588dd231018",
    "prId" : 9372,
    "prUrl" : "https://github.com/numpy/numpy/pull/9372#pullrequestreview-48386517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd2a5c9f-2abd-46d3-a775-a3f53385862c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Should we be checking here that the remainder is 0 too?",
        "createdAt" : "2017-07-06T16:15:56Z",
        "updatedAt" : "2017-07-06T16:15:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "42cc08fe293baa3cfe16cf6500212bf7121d4583",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +705,709 @@    itemsize = descr.itemsize\n    if (shape is None or shape == 0 or shape == -1):\n        shape = (len(datastring) - offset) // itemsize\n\n    _array = recarray(shape, descr, buf=datastring, offset=offset)"
  },
  {
    "id" : "6a193d6a-320d-4f21-bb8f-6a5a49f9ef8b",
    "prId" : 12253,
    "prUrl" : "https://github.com/numpy/numpy/pull/12253#pullrequestreview-180543539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1051b129-e08e-4a2a-af24-d2ae9163bf71",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This assumes system endianness. Line 130 needs the `<`s too.",
        "createdAt" : "2018-12-02T00:46:26Z",
        "updatedAt" : "2018-12-14T18:23:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "28f8a85b9ece5773a8ac75ffcd2502fc93612eff",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +130,134 @@    >>> np.format_parser(['<f8', '<i4', '<a5'], ['col1', 'col2', 'col3'],\n    ...                  ['T1', 'T2', 'T3']).dtype\n    dtype([(('T1', 'col1'), '<f8'), (('T2', 'col2'), '<i4'), (('T3', 'col3'), 'S5')])\n\n    `names` and/or `titles` can be empty lists. If `titles` is an empty list,"
  },
  {
    "id" : "499e2479-da33-4341-b87d-3a7a9959c999",
    "prId" : 12253,
    "prUrl" : "https://github.com/numpy/numpy/pull/12253#pullrequestreview-180543596",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22b8edd1-e122-49cd-8ef4-09624317f93f",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Endian problems here again",
        "createdAt" : "2018-12-02T00:50:10Z",
        "updatedAt" : "2018-12-14T18:23:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "28f8a85b9ece5773a8ac75ffcd2502fc93612eff",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +381,385 @@    >>> x = np.array([(1.0, 2), (3.0, 4)], dtype=[('x', '<f8'), ('y', '<i8')])\n    >>> x\n    array([(1., 2), (3., 4)], dtype=[('x', '<f8'), ('y', '<i8')])\n\n    >>> x['x']"
  },
  {
    "id" : "6cae5676-ca47-4f5c-8300-eb6860535c0f",
    "prId" : 12887,
    "prUrl" : "https://github.com/numpy/numpy/pull/12887#pullrequestreview-201866676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7bbb606-d82b-4449-a42c-82ebf213aef5",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Thinking again, I think this might fix a bug. Can you add a test that calls `fromarrays([some_int_array, some_structured_array])` and see if it behaves as you expect before and after this patch?",
        "createdAt" : "2019-02-09T13:00:03Z",
        "updatedAt" : "2019-02-24T09:06:39Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "8fe888f7-4acc-4e43-ae89-c84091f28924",
        "parentId" : "a7bbb606-d82b-4449-a42c-82ebf213aef5",
        "authorId" : "0c9da94d-0cb0-4a21-ae2d-a5f175943ba3",
        "body" : "@eric-wieser \r\n\r\n```python\r\nimport numpy as np\r\n\r\nx = np.arange(10)\r\n\r\ny = np.ones(10, dtype=[('a', '<u2'), ('b', '<i4')])\r\n\r\ny['a'] = np.arange(10, 20, dtype='<u2')\r\ny['b'] = np.arange(-10, -20, -1, dtype='<i4')\r\n\r\nz = np.core.records.fromarrays([x, y])\r\n\r\nprint(z)\r\n```\r\n\r\nwith the patch the snippet works (as I expected)\r\n\r\n```\r\n[(0, (10, -10)) (1, (11, -11)) (2, (12, -12)) (3, (13, -13))\r\n (4, (14, -14)) (5, (15, -15)) (6, (16, -16)) (7, (17, -17))\r\n (8, (18, -18)) (9, (19, -19))]\r\n```\r\n\r\nwithout the patch I get an exception\r\n\r\n```\r\nTraceback (most recent call last):\r\n\r\n  File \"<ipython-input-7-a0bf5895bdf5>\", line 1, in <module>\r\n    runfile('/home/daniel/Documents/python/profiling.py', wdir='/home/daniel/Documents/python')\r\n\r\n  File \"/home/daniel/Documents/python/venvs/v_asammdf/lib/python3.6/site-packages/spyder_kernels/customize/spydercustomize.py\", line 709, in runfile\r\n    execfile(filename, namespace)\r\n\r\n  File \"/home/daniel/Documents/python/venvs/v_asammdf/lib/python3.6/site-packages/spyder_kernels/customize/spydercustomize.py\", line 108, in execfile\r\n    exec(compile(f.read(), filename, 'exec'), namespace)\r\n\r\n  File \"/home/daniel/Documents/python/profiling.py\", line 10, in <module>\r\n    z = np.core.records.fromarrays([x, y])\r\n\r\n  File \"/home/daniel/Documents/python/venvs/v_asammdf/lib/python3.6/site-packages/numpy/core/records.py\", line 644, in fromarrays\r\n    _array[_names[i]] = arrayList[i]\r\n\r\nValueError: Can't cast from structure to non-structure, except if the structure only has a single field.\r\n```\r\n\r\n\r\n\r\n",
        "createdAt" : "2019-02-09T14:45:33Z",
        "updatedAt" : "2019-02-24T09:06:39Z",
        "lastEditedBy" : "0c9da94d-0cb0-4a21-ae2d-a5f175943ba3",
        "tags" : [
        ]
      },
      {
        "id" : "36b88589-eb31-4ccf-883c-d1deddc34058",
        "parentId" : "a7bbb606-d82b-4449-a42c-82ebf213aef5",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Great news! Could you commit a regression test for that?",
        "createdAt" : "2019-02-09T15:11:13Z",
        "updatedAt" : "2019-02-24T09:06:39Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "99e0869b-c988-421c-a199-26a5040175ec",
        "parentId" : "a7bbb606-d82b-4449-a42c-82ebf213aef5",
        "authorId" : "0c9da94d-0cb0-4a21-ae2d-a5f175943ba3",
        "body" : "Is the last commit what you had in mind?",
        "createdAt" : "2019-02-09T15:34:26Z",
        "updatedAt" : "2019-02-24T09:06:39Z",
        "lastEditedBy" : "0c9da94d-0cb0-4a21-ae2d-a5f175943ba3",
        "tags" : [
        ]
      }
    ],
    "commit" : "27bdbca05bff798dceb397d7e9e3beecb19fcc90",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +611,615 @@        formats = []\n        for obj in arrayList:\n            formats.append(obj.dtype)\n\n    if dtype is not None:"
  }
]