[
  {
    "id" : "39a4352b-1b04-4df8-841a-742c2fbf832c",
    "prId" : 3429,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b52cda1b-5f13-4a3f-8c51-ccb00187ce5e",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@cournape Looks like the bento script might need updating also.\n",
        "createdAt" : "2013-06-15T17:03:12Z",
        "updatedAt" : "2013-06-15T17:03:12Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c74315cf-605f-4d86-9aab-51fd8ea04196",
        "parentId" : "b52cda1b-5f13-4a3f-8c51-ccb00187ce5e",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@cournape Can you do this for bento? It's not clear to me the bento won't run without this, it just may not generate the optimized code.\n\nAlso see the changes in `setup_common.py`, although bento may already use that.\n",
        "createdAt" : "2013-07-08T23:17:06Z",
        "updatedAt" : "2013-07-08T23:17:06Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "75df68b5ca238eabc2de144dce08d481c59ffcaf",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +170,174 @@            moredefs.append((fname2def(f), 1))\n\n    for dec, fn in OPTIONAL_GCC_ATTRIBUTES:\n        if config.check_funcs_once([fn],\n                                   decl=dict((('%s %s' % (dec, fn), True),)),"
  },
  {
    "id" : "d2395c94-3940-46e8-a3a7-99d58cfa3a0c",
    "prId" : 3772,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69e050aa-9ade-4fd9-a105-1fc87c5c93e8",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This version probably needs to go into the bento fix. @cournape I pinged you about these additions twice before, but I probably was not specific enough about the problem.\n",
        "createdAt" : "2013-09-21T21:21:34Z",
        "updatedAt" : "2013-09-21T21:21:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd2e1104718490be8504f8d6665205ca594a37e7",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +166,170 @@            moredefs.append((fname2def(h).replace(\".\", \"_\"), 1))\n\n    for tup in OPTIONAL_INTRINSICS:\n        headers = None\n        if len(tup) == 2:"
  },
  {
    "id" : "fb9d0b93-85a6-4c4f-9c1e-3f0ae397e921",
    "prId" : 4692,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab405e09-8378-40ce-8b8c-b2598b9dfb89",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Did you intend a tuple here `(fn)`?\n",
        "createdAt" : "2014-05-15T02:21:04Z",
        "updatedAt" : "2014-05-22T18:17:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "423acfdd-064e-41ef-b91f-b85e40463500",
        "parentId" : "ab405e09-8378-40ce-8b8c-b2598b9dfb89",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, looks like bscript is starting to bitrot.\n\n```\n    # TODO: add OPTIONAL_HEADERS, OPTIONAL_INTRINSICS and\n    # OPTIONAL_GCC_ATTRIBUTES (see setup.py and gh-3766).  These are\n    # performance optimizations for GCC.\n```\n\nIt's already missing stuff. Adding the new stuff to `setup_common.py` would be a place to start, but looks like more needs to be done. Hmm, @cournape Why is `bscript` not `bscript.py`?\n\nI'm beginning to think bento isn't worth worrying about until it comes up to speed. Might be worth adding `[\"__thread\", \"__declspec(thread)\"]` to `setup_common.py` though, just as a start. What would be a good name for that list?\n",
        "createdAt" : "2014-05-15T02:49:51Z",
        "updatedAt" : "2014-05-22T18:17:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "595a3845-a5b5-461a-ba70-e9f6a3395dfc",
        "parentId" : "ab405e09-8378-40ce-8b8c-b2598b9dfb89",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "moved it into a common variable, OPTIONAL_VARIABLE_ATTRIBUTES, also renamed GCC_ATTRIBUTES to FUNCTION_ATTRIBUTES as not only gcc supports them\n",
        "createdAt" : "2014-05-22T18:16:27Z",
        "updatedAt" : "2014-05-22T18:17:57Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "848cd10bcc4b46be599de9cd3bd46d6b8859152e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +182,186 @@\n    for fn in OPTIONAL_VARIABLE_ATTRIBUTES:\n        if config.check_func(fn, decl='int %s a;' % (fn), call=False):\n            m = fn.replace(\"(\", \"_\").replace(\")\", \"_\")\n            moredefs.append((fname2def(m), 1))"
  },
  {
    "id" : "0bae58ea-5a5f-4809-a4d0-6e509647754f",
    "prId" : 9965,
    "prUrl" : "https://github.com/numpy/numpy/pull/9965#pullrequestreview-75223413",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52d5c8a5-a412-4578-9273-5913d25d4946",
        "parentId" : null,
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Won't this break mingw/cygwin builds?",
        "createdAt" : "2017-11-05T21:11:14Z",
        "updatedAt" : "2017-11-05T21:11:14Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "8747389a-7799-4f5b-b133-59f84778d652",
        "parentId" : "52d5c8a5-a412-4578-9273-5913d25d4946",
        "authorId" : null,
        "body" : "`sys.platform` should be `cygwin` for a cygwin build.",
        "createdAt" : "2017-11-05T21:15:23Z",
        "updatedAt" : "2017-11-05T21:15:23Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "6df85449-7ee7-43af-a69b-c8eb530012b2",
        "parentId" : "52d5c8a5-a412-4578-9273-5913d25d4946",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "For mingw builds it is win32 afaik. But I'm not 100% sure mingw build on windows even work currently.",
        "createdAt" : "2017-11-05T21:54:15Z",
        "updatedAt" : "2017-11-05T21:54:15Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "7f35e4e2-92bf-4aa1-9b99-2ab3ca9bfbd7",
        "parentId" : "52d5c8a5-a412-4578-9273-5913d25d4946",
        "authorId" : null,
        "body" : "The `win32` platform is supposed to indicate a CRT ABI. So if mingw is setting that variable to `win32`, it's a mingw bug.",
        "createdAt" : "2017-11-05T21:57:02Z",
        "updatedAt" : "2017-11-05T21:57:02Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "0f2c29f2-34d8-4cb8-a3d7-e44891dbd91f",
        "parentId" : "52d5c8a5-a412-4578-9273-5913d25d4946",
        "authorId" : null,
        "body" : "Although technically, you're correct in that it would be better to check `c.compiler_type`. Is it worth another PR?\r\n\r\n```\r\n        c = distutils.ccompiler.new_compiler()\r\n        c.customize('')\r\n        static_exts = []\r\n        if c.compiler_type != 'msvc':\r\n```",
        "createdAt" : "2017-11-05T22:00:35Z",
        "updatedAt" : "2017-11-05T22:01:00Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "1f21156d-a93a-4685-8670-40787d50d86b",
        "parentId" : "52d5c8a5-a412-4578-9273-5913d25d4946",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "From `numpy/distutils/fcompiler/gnu.py` it seems that cygwin returns \"win32\" for platform, or at least did. I have now idea what it does these days. Maybe we should use the `platform` module: https://stackoverflow.com/questions/1387222/reliably-detect-windows-in-python.  Note that the platform module was new in Python 2.3, so probably after most of distutils was written.",
        "createdAt" : "2017-11-08T19:00:54Z",
        "updatedAt" : "2017-11-08T19:00:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "91ba78c4-9990-4b7c-9d9d-92168e11c41b",
        "parentId" : "52d5c8a5-a412-4578-9273-5913d25d4946",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Or rather, we were still supporting earlier Python versions, so could not rely on the platform module being available.",
        "createdAt" : "2017-11-08T19:06:31Z",
        "updatedAt" : "2017-11-08T19:06:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "3c878a7d-ec1d-49b9-b02b-65820b9bd4be",
        "parentId" : "52d5c8a5-a412-4578-9273-5913d25d4946",
        "authorId" : null,
        "body" : "@charris #9977 resolves this.",
        "createdAt" : "2017-11-08T19:38:11Z",
        "updatedAt" : "2017-11-08T19:38:11Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "94f32f9819af9d6afdb05fb8938ee5dd1c0c65cc",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +691,695 @@            build_info={\n                'include_dirs' : [],\n                'extra_compiler_args' : (['/GL-'] if sys.platform == 'win32' else []),\n            })  # empty list required for creating npy_math_internal.h\n    config.add_npy_pkg_config(\"npymath.ini.in\", \"lib/npy-pkg-config\","
  },
  {
    "id" : "c2e3afdb-35d0-462e-a1c5-186c58187517",
    "prId" : 9977,
    "prUrl" : "https://github.com/numpy/numpy/pull/9977#pullrequestreview-75276270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b70e1034-832c-4e25-bdef-5d9fb7bf6ac1",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This looks like a bugfix, not just cleanup, to me",
        "createdAt" : "2017-11-06T22:11:32Z",
        "updatedAt" : "2017-11-09T00:58:59Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "69339e12-a494-4bfd-b559-040585e3b575",
        "parentId" : "b70e1034-832c-4e25-bdef-5d9fb7bf6ac1",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Is the flag also needed for the Intel compiler? <searches> Looks like Intel has this flag also, so we might want to disable it for that also if Python 3.5 enables it and we use that by default. @cgohlke Thoughts? Clang may be a future concern.",
        "createdAt" : "2017-11-08T22:20:31Z",
        "updatedAt" : "2017-11-09T00:58:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b56f9094-3ac8-4573-931c-3288b5a87312",
        "parentId" : "b70e1034-832c-4e25-bdef-5d9fb7bf6ac1",
        "authorId" : null,
        "body" : "Would it be okay to just add them? I am genuinely open to any solution.",
        "createdAt" : "2017-11-08T22:43:05Z",
        "updatedAt" : "2017-11-09T00:58:59Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "2a26477c67bf319428ddcb78a5b6a8777754b845",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +695,699 @@            build_info={\n                'include_dirs' : [],  # empty list required for creating npy_math_internal.h\n                'extra_compiler_args' : (['/GL-'] if is_msvc else []),\n            })\n    config.add_npy_pkg_config(\"npymath.ini.in\", \"lib/npy-pkg-config\","
  }
]