[
  {
    "id" : "39a4352b-1b04-4df8-841a-742c2fbf832c",
    "prId" : 3429,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b52cda1b-5f13-4a3f-8c51-ccb00187ce5e",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@cournape Looks like the bento script might need updating also.\n",
        "createdAt" : "2013-06-15T17:03:12Z",
        "updatedAt" : "2013-06-15T17:03:12Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c74315cf-605f-4d86-9aab-51fd8ea04196",
        "parentId" : "b52cda1b-5f13-4a3f-8c51-ccb00187ce5e",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@cournape Can you do this for bento? It's not clear to me the bento won't run without this, it just may not generate the optimized code.\n\nAlso see the changes in `setup_common.py`, although bento may already use that.\n",
        "createdAt" : "2013-07-08T23:17:06Z",
        "updatedAt" : "2013-07-08T23:17:06Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "75df68b5ca238eabc2de144dce08d481c59ffcaf",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +170,174 @@            moredefs.append((fname2def(f), 1))\n\n    for dec, fn in OPTIONAL_GCC_ATTRIBUTES:\n        if config.check_funcs_once([fn],\n                                   decl=dict((('%s %s' % (dec, fn), True),)),"
  },
  {
    "id" : "d2395c94-3940-46e8-a3a7-99d58cfa3a0c",
    "prId" : 3772,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69e050aa-9ade-4fd9-a105-1fc87c5c93e8",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This version probably needs to go into the bento fix. @cournape I pinged you about these additions twice before, but I probably was not specific enough about the problem.\n",
        "createdAt" : "2013-09-21T21:21:34Z",
        "updatedAt" : "2013-09-21T21:21:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd2e1104718490be8504f8d6665205ca594a37e7",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +166,170 @@            moredefs.append((fname2def(h).replace(\".\", \"_\"), 1))\n\n    for tup in OPTIONAL_INTRINSICS:\n        headers = None\n        if len(tup) == 2:"
  },
  {
    "id" : "fb9d0b93-85a6-4c4f-9c1e-3f0ae397e921",
    "prId" : 4692,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab405e09-8378-40ce-8b8c-b2598b9dfb89",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Did you intend a tuple here `(fn)`?\n",
        "createdAt" : "2014-05-15T02:21:04Z",
        "updatedAt" : "2014-05-22T18:17:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "423acfdd-064e-41ef-b91f-b85e40463500",
        "parentId" : "ab405e09-8378-40ce-8b8c-b2598b9dfb89",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, looks like bscript is starting to bitrot.\n\n```\n    # TODO: add OPTIONAL_HEADERS, OPTIONAL_INTRINSICS and\n    # OPTIONAL_GCC_ATTRIBUTES (see setup.py and gh-3766).  These are\n    # performance optimizations for GCC.\n```\n\nIt's already missing stuff. Adding the new stuff to `setup_common.py` would be a place to start, but looks like more needs to be done. Hmm, @cournape Why is `bscript` not `bscript.py`?\n\nI'm beginning to think bento isn't worth worrying about until it comes up to speed. Might be worth adding `[\"__thread\", \"__declspec(thread)\"]` to `setup_common.py` though, just as a start. What would be a good name for that list?\n",
        "createdAt" : "2014-05-15T02:49:51Z",
        "updatedAt" : "2014-05-22T18:17:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "595a3845-a5b5-461a-ba70-e9f6a3395dfc",
        "parentId" : "ab405e09-8378-40ce-8b8c-b2598b9dfb89",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "moved it into a common variable, OPTIONAL_VARIABLE_ATTRIBUTES, also renamed GCC_ATTRIBUTES to FUNCTION_ATTRIBUTES as not only gcc supports them\n",
        "createdAt" : "2014-05-22T18:16:27Z",
        "updatedAt" : "2014-05-22T18:17:57Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "848cd10bcc4b46be599de9cd3bd46d6b8859152e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +182,186 @@\n    for fn in OPTIONAL_VARIABLE_ATTRIBUTES:\n        if config.check_func(fn, decl='int %s a;' % (fn), call=False):\n            m = fn.replace(\"(\", \"_\").replace(\")\", \"_\")\n            moredefs.append((fname2def(m), 1))"
  },
  {
    "id" : "0bae58ea-5a5f-4809-a4d0-6e509647754f",
    "prId" : 9965,
    "prUrl" : "https://github.com/numpy/numpy/pull/9965#pullrequestreview-75223413",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52d5c8a5-a412-4578-9273-5913d25d4946",
        "parentId" : null,
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Won't this break mingw/cygwin builds?",
        "createdAt" : "2017-11-05T21:11:14Z",
        "updatedAt" : "2017-11-05T21:11:14Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "8747389a-7799-4f5b-b133-59f84778d652",
        "parentId" : "52d5c8a5-a412-4578-9273-5913d25d4946",
        "authorId" : null,
        "body" : "`sys.platform` should be `cygwin` for a cygwin build.",
        "createdAt" : "2017-11-05T21:15:23Z",
        "updatedAt" : "2017-11-05T21:15:23Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "6df85449-7ee7-43af-a69b-c8eb530012b2",
        "parentId" : "52d5c8a5-a412-4578-9273-5913d25d4946",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "For mingw builds it is win32 afaik. But I'm not 100% sure mingw build on windows even work currently.",
        "createdAt" : "2017-11-05T21:54:15Z",
        "updatedAt" : "2017-11-05T21:54:15Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "7f35e4e2-92bf-4aa1-9b99-2ab3ca9bfbd7",
        "parentId" : "52d5c8a5-a412-4578-9273-5913d25d4946",
        "authorId" : null,
        "body" : "The `win32` platform is supposed to indicate a CRT ABI. So if mingw is setting that variable to `win32`, it's a mingw bug.",
        "createdAt" : "2017-11-05T21:57:02Z",
        "updatedAt" : "2017-11-05T21:57:02Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "0f2c29f2-34d8-4cb8-a3d7-e44891dbd91f",
        "parentId" : "52d5c8a5-a412-4578-9273-5913d25d4946",
        "authorId" : null,
        "body" : "Although technically, you're correct in that it would be better to check `c.compiler_type`. Is it worth another PR?\r\n\r\n```\r\n        c = distutils.ccompiler.new_compiler()\r\n        c.customize('')\r\n        static_exts = []\r\n        if c.compiler_type != 'msvc':\r\n```",
        "createdAt" : "2017-11-05T22:00:35Z",
        "updatedAt" : "2017-11-05T22:01:00Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "1f21156d-a93a-4685-8670-40787d50d86b",
        "parentId" : "52d5c8a5-a412-4578-9273-5913d25d4946",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "From `numpy/distutils/fcompiler/gnu.py` it seems that cygwin returns \"win32\" for platform, or at least did. I have now idea what it does these days. Maybe we should use the `platform` module: https://stackoverflow.com/questions/1387222/reliably-detect-windows-in-python.  Note that the platform module was new in Python 2.3, so probably after most of distutils was written.",
        "createdAt" : "2017-11-08T19:00:54Z",
        "updatedAt" : "2017-11-08T19:00:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "91ba78c4-9990-4b7c-9d9d-92168e11c41b",
        "parentId" : "52d5c8a5-a412-4578-9273-5913d25d4946",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Or rather, we were still supporting earlier Python versions, so could not rely on the platform module being available.",
        "createdAt" : "2017-11-08T19:06:31Z",
        "updatedAt" : "2017-11-08T19:06:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "3c878a7d-ec1d-49b9-b02b-65820b9bd4be",
        "parentId" : "52d5c8a5-a412-4578-9273-5913d25d4946",
        "authorId" : null,
        "body" : "@charris #9977 resolves this.",
        "createdAt" : "2017-11-08T19:38:11Z",
        "updatedAt" : "2017-11-08T19:38:11Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "94f32f9819af9d6afdb05fb8938ee5dd1c0c65cc",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +691,695 @@            build_info={\n                'include_dirs' : [],\n                'extra_compiler_args' : (['/GL-'] if sys.platform == 'win32' else []),\n            })  # empty list required for creating npy_math_internal.h\n    config.add_npy_pkg_config(\"npymath.ini.in\", \"lib/npy-pkg-config\","
  },
  {
    "id" : "c2e3afdb-35d0-462e-a1c5-186c58187517",
    "prId" : 9977,
    "prUrl" : "https://github.com/numpy/numpy/pull/9977#pullrequestreview-75276270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b70e1034-832c-4e25-bdef-5d9fb7bf6ac1",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This looks like a bugfix, not just cleanup, to me",
        "createdAt" : "2017-11-06T22:11:32Z",
        "updatedAt" : "2017-11-09T00:58:59Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "69339e12-a494-4bfd-b559-040585e3b575",
        "parentId" : "b70e1034-832c-4e25-bdef-5d9fb7bf6ac1",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Is the flag also needed for the Intel compiler? <searches> Looks like Intel has this flag also, so we might want to disable it for that also if Python 3.5 enables it and we use that by default. @cgohlke Thoughts? Clang may be a future concern.",
        "createdAt" : "2017-11-08T22:20:31Z",
        "updatedAt" : "2017-11-09T00:58:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b56f9094-3ac8-4573-931c-3288b5a87312",
        "parentId" : "b70e1034-832c-4e25-bdef-5d9fb7bf6ac1",
        "authorId" : null,
        "body" : "Would it be okay to just add them? I am genuinely open to any solution.",
        "createdAt" : "2017-11-08T22:43:05Z",
        "updatedAt" : "2017-11-09T00:58:59Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "2a26477c67bf319428ddcb78a5b6a8777754b845",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +695,699 @@            build_info={\n                'include_dirs' : [],  # empty list required for creating npy_math_internal.h\n                'extra_compiler_args' : (['/GL-'] if is_msvc else []),\n            })\n    config.add_npy_pkg_config(\"npymath.ini.in\", \"lib/npy-pkg-config\","
  },
  {
    "id" : "55399dcd-d9e4-408b-a199-9f11a54156e7",
    "prId" : 10915,
    "prUrl" : "https://github.com/numpy/numpy/pull/10915#pullrequestreview-148211535",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e4fa5a3-16a9-4393-b380-29479e1a8a39",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "I'm able to reproduce the [`gcov` issue](https://github.com/numpy/numpy/issues/11790) locally on linux & moving this extension addition block up above ` _multiarray_umath module` prevents `mem_overlap.c` from being excluded from the C coverage report.\r\n\r\nThe diff is below and build / unit tests still seem fine locally for me:\r\n\r\n```diff\r\ndiff --git a/numpy/core/setup.py b/numpy/core/setup.py\r\nindex b306aa4..1588a26 100644\r\n--- a/numpy/core/setup.py\r\n+++ b/numpy/core/setup.py\r\n@@ -710,6 +710,17 @@ def configuration(parent_package='',top_path=None):\r\n                        include_dirs=[])\r\n\r\n     #######################################################################\r\n+    #                     multiarray_tests module                         #\r\n+    #######################################################################\r\n+\r\n+    config.add_extension('_multiarray_tests',\r\n+                    sources=[join('src', 'multiarray', '_multiarray_tests.c.src'),\r\n+                             join('src', 'common', 'mem_overlap.c')],\r\n+                    depends=[join('src', 'common', 'mem_overlap.h'),\r\n+                             join('src', 'common', 'npy_extint128.h')],\r\n+                    libraries=['npymath'])\r\n+\r\n+    #######################################################################\r\n     #             _multiarray_umath module - common part                  #\r\n     #######################################################################\r\n\r\n@@ -933,16 +944,6 @@ def configuration(parent_package='',top_path=None):\r\n     config.add_extension('_struct_ufunc_tests',\r\n                     sources=[join('src', 'umath', '_struct_ufunc_tests.c.src')])\r\n\r\n-    #######################################################################\r\n-    #                     multiarray_tests module                         #\r\n-    #######################################################################\r\n-\r\n-    config.add_extension('_multiarray_tests',\r\n-                    sources=[join('src', 'multiarray', '_multiarray_tests.c.src'),\r\n-                             join('src', 'common', 'mem_overlap.c')],\r\n-                    depends=[join('src', 'common', 'mem_overlap.h'),\r\n-                             join('src', 'common', 'npy_extint128.h')],\r\n-                    libraries=['npymath'])\r\n```\r\n\r\nI could open a PR to do this on master, but since @mattip has been working on this code for a while I'll let him judge if this might be suitable & avoids merged conflicts if we change here, etc.",
        "createdAt" : "2018-08-21T19:21:12Z",
        "updatedAt" : "2018-08-21T19:21:19Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "03e08148eb303c7799a18db78b8087f78e5cc2fc",
    "line" : 222,
    "diffHunk" : "@@ -1,1 +942,946 @@                             join('src', 'common', 'mem_overlap.c')],\n                    depends=[join('src', 'common', 'mem_overlap.h'),\n                             join('src', 'common', 'npy_extint128.h')],\n                    libraries=['npymath'])\n"
  },
  {
    "id" : "fab464d1-b013-4be3-8dde-4a0cc564fd1e",
    "prId" : 13856,
    "prUrl" : "https://github.com/numpy/numpy/pull/13856#pullrequestreview-255527310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76083462-1dd0-4b71-ac80-d5909ff19c66",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "This will recursively add all the contents of the directory, which currently only holds `*.h` files (including the new `random/bitgen.h`",
        "createdAt" : "2019-06-27T23:30:27Z",
        "updatedAt" : "2019-06-27T23:30:27Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "14c333972d64fce85d06d74bc673045f32da7b5f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +611,615 @@    config.add_include_dirs(join(local_dir))\n\n    config.add_data_dir('include/numpy')\n    config.add_include_dirs(join('src', 'npymath'))\n    config.add_include_dirs(join('src', 'multiarray'))"
  },
  {
    "id" : "d33f9430-339f-4b04-a87d-e8d26fc1f1b7",
    "prId" : 15366,
    "prUrl" : "https://github.com/numpy/numpy/pull/15366#pullrequestreview-346133204",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd21b417-9d88-416c-973d-1bd992acdbbf",
        "parentId" : null,
        "authorId" : "97808352-e691-4fd2-aa10-6dd2dc8a499a",
        "body" : "For the record, I had difficulties making this into either a relative or absolute import. I can't recall exactly, but I think I tried `from .setup_common import *` and `from numpy.core.setup_common import *`, but both bombed Travis CI tests. If anyone knows why, I'd be interested.",
        "createdAt" : "2020-01-21T19:27:59Z",
        "updatedAt" : "2020-01-22T19:46:50Z",
        "lastEditedBy" : "97808352-e691-4fd2-aa10-6dd2dc8a499a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9c5bd5ed1c241b189cea6cf5aef750526194708",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +15,19 @@    )\nfrom numpy.compat import npy_load_module\nfrom setup_common import *  # noqa: F403\n\n# Set to True to enable relaxed strides checking. This (mostly) means"
  },
  {
    "id" : "9892ec92-a8aa-47bb-b79d-f3bfb63f34df",
    "prId" : 15759,
    "prUrl" : "https://github.com/numpy/numpy/pull/15759#pullrequestreview-379294865",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "485b3244-b151-4303-a590-652b675f8416",
        "parentId" : null,
        "authorId" : "605dc99f-e6a8-4691-8567-69df7bedb615",
        "body" : "Is there a reason we don't simply remove `accelerate_info` ? From a backward compatibility perspective, I don't think it would make sense to continue using `accelerate_info` in any other package ?",
        "createdAt" : "2020-03-23T06:47:33Z",
        "updatedAt" : "2020-04-28T13:38:08Z",
        "lastEditedBy" : "605dc99f-e6a8-4691-8567-69df7bedb615",
        "tags" : [
        ]
      },
      {
        "id" : "6a9169c0-0e83-46cf-99e0-e95c9fa2b912",
        "parentId" : "485b3244-b151-4303-a590-652b675f8416",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "There used to be quite a few packages using `blas_opt` or `lapack_opt`. Accelerate is actually less buggy and easier to use that picking a random version of OpenBLAS, hence keeping `accelerate_info` for a while longer could make sense.\r\n\r\nThat said, a code search of the likes of Statsmodels and PyAMG shows that they've stopped using `*_opt`, so the impact of doing it now is likely to be very limited.",
        "createdAt" : "2020-03-23T09:43:40Z",
        "updatedAt" : "2020-04-28T13:38:08Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "1bf62ea1-da06-45e1-a1f5-e7351c23549d",
        "parentId" : "485b3244-b151-4303-a590-652b675f8416",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "I would be happy to remove it, but then we might need to do a 19.1 to revert the change. Perhaps it should be a separate PR to make reverting easier?",
        "createdAt" : "2020-03-23T10:21:10Z",
        "updatedAt" : "2020-04-28T13:38:08Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "82398b3abf3c76b781945cd086327fb4c964492a",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +396,400 @@    for opt_order in (blas_opt_info.blas_order, lapack_opt_info.lapack_order):\n        if 'accelerate' in opt_order:\n            opt_order.remove('accelerate')\n\n    config = Configuration('core', parent_package, top_path)"
  },
  {
    "id" : "3eebee06-fb94-4dd8-b66f-904e3dd946f2",
    "prId" : 16266,
    "prUrl" : "https://github.com/numpy/numpy/pull/16266#pullrequestreview-416676825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1df4a2f-3b19-4091-9b7b-a0d3deb99f35",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "This was the missing piece to get tests going. I also checked that the new files are included in the sdist, we do not need to change `MANIFEST.in`",
        "createdAt" : "2020-05-22T06:39:11Z",
        "updatedAt" : "2020-05-22T21:17:54Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e3cfd83fb778b03c8bd1537a6d9437461c48584",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +964,968 @@    config.add_subpackage('tests')\n    config.add_data_dir('tests/data')\n    config.add_data_dir('tests/examples')\n\n    config.make_svn_version_py()"
  },
  {
    "id" : "7e1903d3-3b7e-433a-85f2-b59de4eb7c63",
    "prId" : 16782,
    "prUrl" : "https://github.com/numpy/numpy/pull/16782#pullrequestreview-509547986",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93e640e8-96b4-4eeb-b3a4-9bf4c181318b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```suggestion\r\n        join('src', '_simd', '_simd.dispatch.c.src'),\r\n        join('src', '_simd', '_simd_arg.dispatch.c'),\r\n```",
        "createdAt" : "2020-10-15T16:15:33Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac4ffe1d39d9cc845948079a24facf7057effb24",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +985,989 @@        join('src', '_simd', '_simd_inc.h.src'),\n        join('src', '_simd', '_simd_data.inc.src'),\n        join('src', '_simd', '_simd.dispatch.c.src'),\n    ], depends=[\n        join('src', 'common', 'npy_cpu_dispatch.h'),"
  },
  {
    "id" : "125097b3-83be-4914-ab14-e8e9d3c8d75c",
    "prId" : 17109,
    "prUrl" : "https://github.com/numpy/numpy/pull/17109#pullrequestreview-472261856",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2be65be6-c226-4a58-8fd3-68ff733db4e1",
        "parentId" : null,
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "```suggestion\r\n            join('src', 'multiarray', 'einsum.dispatch.c.src'),\r\n```",
        "createdAt" : "2020-08-20T00:09:37Z",
        "updatedAt" : "2020-08-20T09:34:02Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      },
      {
        "id" : "98facdc3-c15c-47a0-b5f2-24ba0d031235",
        "parentId" : "2be65be6-c226-4a58-8fd3-68ff733db4e1",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "using `einsum.dispatch.c.src` instead of `einsum_prod.dispatch.c.src`",
        "createdAt" : "2020-08-20T00:36:21Z",
        "updatedAt" : "2020-08-20T09:34:02Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      },
      {
        "id" : "c5454b6d-a968-4038-a6bb-b869946bf1a3",
        "parentId" : "2be65be6-c226-4a58-8fd3-68ff733db4e1",
        "authorId" : "16f8768b-62bb-468a-bef5-f7adfae4fef5",
        "body" : "yes, the rename is important because the review process is count on it.(all of the main code that changed is lied in `einsum.dispatch.c.src` )",
        "createdAt" : "2020-08-21T06:47:40Z",
        "updatedAt" : "2020-08-21T06:47:40Z",
        "lastEditedBy" : "16f8768b-62bb-468a-bef5-f7adfae4fef5",
        "tags" : [
        ]
      },
      {
        "id" : "58bd1187-7741-4716-8c3c-b421168361d1",
        "parentId" : "2be65be6-c226-4a58-8fd3-68ff733db4e1",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "There is no need to rename in this PR. Git can track renames just fine, what it struggles with is files that split in two.\r\n\r\nYou can rename this in your follow up (when it actually becomes a dispatch file), and the diff will still be reviewable.",
        "createdAt" : "2020-08-21T07:22:19Z",
        "updatedAt" : "2020-08-21T07:23:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7df11c52b48a7dd22cb4fc968d8af7cce4a2c5f",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +856,860 @@            join('src', 'multiarray', 'dtype_transfer.c'),\n            join('src', 'multiarray', 'einsum.c.src'),\n            join('src', 'multiarray', 'einsum_sumprod.c.src'),\n            join('src', 'multiarray', 'flagsobject.c'),\n            join('src', 'multiarray', 'getset.c'),"
  }
]