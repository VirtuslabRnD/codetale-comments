[
  {
    "id" : "6968a20e-4a4f-40ce-90c4-92a01151f0cc",
    "prId" : 5605,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c7679d6-3a52-4f17-80cd-9a0daff41cc6",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "`len(arrays) == 0` might be clearer.\n",
        "createdAt" : "2015-05-06T19:28:58Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "de67cd93-1a18-4447-b895-c179237fc7d6",
        "parentId" : "5c7679d6-3a52-4f17-80cd-9a0daff41cc6",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "IMO this is idiomatic way to write this in Python (but I don't care too much either way)\n",
        "createdAt" : "2015-05-06T20:08:23Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "93d3b8dedc5cd602c867a234f07188fe5bd5479b",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +332,336 @@    \"\"\"\n    arrays = [asanyarray(arr) for arr in arrays]\n    if not arrays:\n        raise ValueError('need at least one array to stack')\n"
  },
  {
    "id" : "ccfdd7d8-cce2-4f80-a743-45ed63aefe92",
    "prId" : 5605,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5264540-230c-47da-8fd4-0b7086c3af02",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Need more explanation here. For instance, in the examples, it isn't clear why `np.stack((a, b))` is not the same as `np.stack((a, b), axis=-1)`.\n",
        "createdAt" : "2015-05-06T19:45:43Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "34ad1881-92de-4ea3-ba94-07cc5c52d3cc",
        "parentId" : "e5264540-230c-47da-8fd4-0b7086c3af02",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "I think the missing explanation is that the `axis` argument refers to the axis position in the _result_ array, not in the input arrays.\n",
        "createdAt" : "2015-05-06T20:04:22Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "b1d8a4c3-921e-48f5-88ea-8c723e93b707",
        "parentId" : "e5264540-230c-47da-8fd4-0b7086c3af02",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Still needs a better explanation of where the new axis is located. It might also be better to follow the list insertion protocol.\n\n```\nIn [7]: a = [1]*4\n\nIn [8]: a.insert(4, 2)\n\nIn [9]: a\nOut[9]: [1, 1, 1, 1, 2]\n\nIn [10]: a = [1]*4\n\nIn [11]: a.insert(-1, 2)\n\nIn [12]: a\nOut[12]: [1, 1, 1, 2, 1]\n```\n",
        "createdAt" : "2015-05-08T18:27:13Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a75f5c1c-6b25-4b2d-97b7-7d43991e5ab2",
        "parentId" : "e5264540-230c-47da-8fd4-0b7086c3af02",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Although it is nice to indicate appending the axis with a simple `-1`. In the current case, an explanation of how negative axis values are handled would help.  For the list version you  could do something like\n\n```\nIn [26]: a = ones((2,2,3))\n\nIn [27]: newshape = list(a.shape)\n\nIn [28]: newshape.insert(-1, 1)\n\nIn [29]: a.reshape(newshape).shape\nOut[29]: (2, 2, 1, 3)\n```\n",
        "createdAt" : "2015-05-08T18:45:19Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "63e0ea0d-dd52-419c-a631-be7ebd4149d5",
        "parentId" : "e5264540-230c-47da-8fd4-0b7086c3af02",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "How about\n\n```\ndef stack(arrays, axis=0):\n    \"\"\"\n    Join a sequence of arrays along a new axis.\n\n    The `axis` parameter specifies the index of the new axis in the\n    dimensions of the result. For instance, if ``axis=0`` it will be the\n    first dimension and if ``axis=-1`` it will be the last dimension.\n\n    etc...\n```\n",
        "createdAt" : "2015-05-09T00:07:48Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "93d3b8dedc5cd602c867a234f07188fe5bd5479b",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +282,286 @@def stack(arrays, axis=0):\n    \"\"\"\n    Join a sequence of arrays along a new axis.\n\n    The `axis` parameter specifies the index of the new axis in the dimensions"
  },
  {
    "id" : "0ffcc607-b9e2-4017-bbe8-f3f6d63b2160",
    "prId" : 5605,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43c5e646-ae86-4266-ba97-bfcdc25e5e73",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What happens with mixed subtypes?\n",
        "createdAt" : "2015-05-06T19:51:59Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "fb0446a8-559a-4516-b68c-756ca96b1c1f",
        "parentId" : "43c5e646-ae86-4266-ba97-bfcdc25e5e73",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could maybe check that all types are the same.\n",
        "createdAt" : "2015-05-06T19:52:56Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "26af1751-b07a-4f11-8f5b-aa36969fdc78",
        "parentId" : "43c5e646-ae86-4266-ba97-bfcdc25e5e73",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could do that by checking that  `set(type(a) for a in arrays)` has one member.\n",
        "createdAt" : "2015-05-06T19:55:48Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b9141f03-f7fa-492e-965e-2c676a123d11",
        "parentId" : "43c5e646-ae86-4266-ba97-bfcdc25e5e73",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "What happens for subtypes is mostly dictated by the behavior of `np.concatenate`. I don't see much advantage in explicitly checking for consistent types here when none of the logic in this function relies on that.\n",
        "createdAt" : "2015-05-06T20:00:49Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "bef20002-034e-45dd-86ec-dfbe94f6ff77",
        "parentId" : "43c5e646-ae86-4266-ba97-bfcdc25e5e73",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I think the type checking should be left for `concatenate` (which does not currently do this all that well, but could be rewritten, e.g., using `insert` methods if present on the first member or so).\n",
        "createdAt" : "2015-05-06T20:06:12Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "651073b2-3f4c-4029-ac73-da415ad082d1",
        "parentId" : "43c5e646-ae86-4266-ba97-bfcdc25e5e73",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK.\n",
        "createdAt" : "2015-05-07T00:32:54Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "93d3b8dedc5cd602c867a234f07188fe5bd5479b",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +331,335 @@\n    \"\"\"\n    arrays = [asanyarray(arr) for arr in arrays]\n    if not arrays:\n        raise ValueError('need at least one array to stack')"
  },
  {
    "id" : "6f521fad-88ae-4c92-b821-e5e23b9ac645",
    "prId" : 5605,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "555f9a1a-f379-4978-8a13-f91bf0be28d2",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "An alternative method, once you have the shape of the arrays, is\n\n```\nnewshape = shape[:axis] + (1,) + shape[axis:]\nexpanded_arrays = [a.reshape(newshape) for a in arrays]\n```\n",
        "createdAt" : "2015-05-06T20:17:07Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "03d086f4-c3e3-4ca7-bee7-17c4291fce0f",
        "parentId" : "555f9a1a-f379-4978-8a13-f91bf0be28d2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Or, getting rid of `expanded_arrays`\n\n```\n_nx.concatenate([a.reshape(newshape) for a in arrays], axis=axis)\n```\n",
        "createdAt" : "2015-05-06T20:28:56Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "eccd6372-d1f6-4a22-9097-508a76add363",
        "parentId" : "555f9a1a-f379-4978-8a13-f91bf0be28d2",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "I like using slicing for this operation rather than reshape because I _know_ that slicing will always using a view rather than a copy. Though I suppose `reshape` is probably also safe when used in this way.\n",
        "createdAt" : "2015-05-06T20:36:30Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "93d3b8dedc5cd602c867a234f07188fe5bd5479b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +346,350 @@        axis += result_ndim\n\n    sl = (slice(None),) * axis + (_nx.newaxis,)\n    expanded_arrays = [arr[sl] for arr in arrays]\n    return _nx.concatenate(expanded_arrays, axis=axis)"
  },
  {
    "id" : "6fd09087-b4eb-43ca-bf9c-6dfe80727418",
    "prId" : 8886,
    "prUrl" : "https://github.com/numpy/numpy/pull/8886#pullrequestreview-31398294",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f425f655-fd5f-4a10-bd91-b90829239be5",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "This is not necessary: by the time `atleast_nd` is called below, all input has already been through `asanyarray`.\r\n(Similarly, `x.ndim <= ndim` is guaranteed to be true, but that seems a bit less relevant.)",
        "createdAt" : "2017-04-06T18:22:47Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "45aada4f-3292-4b6b-ae19-8bd94427e952",
        "parentId" : "f425f655-fd5f-4a10-bd91-b90829239be5",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "True, but this is what an implementation of an `atleast_nd` (#8550) function would be, and I was assuming this would be removed if that gets merged.",
        "createdAt" : "2017-04-06T18:24:53Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1973364d-b235-4551-b068-4da76287ca68",
        "parentId" : "f425f655-fd5f-4a10-bd91-b90829239be5",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "Also, as I pointed out in a previous revision, `atleast_nd` can be rewritten as `np.array(x, subok=True, copy=False, ndmin=ndim)`.",
        "createdAt" : "2017-04-06T18:25:57Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "2722d6ca-8aa0-465f-8663-48ba5c6510fa",
        "parentId" : "f425f655-fd5f-4a10-bd91-b90829239be5",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> np.array(x, subok=True, copy=False, ndmin=ndim)\r\n\r\nI was thinking from a subclass perspective, this is marginally harder to propagate data through than `newaxis` indexing?",
        "createdAt" : "2017-04-06T18:28:07Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "19953314-ad1d-4d44-ac8b-becc8c31af5b",
        "parentId" : "f425f655-fd5f-4a10-bd91-b90829239be5",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Yes, I remember pointing that out in #8550, but forgot it here. Agreed one might as well use that directly in the recurse call.",
        "createdAt" : "2017-04-06T18:28:21Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "ef893ccd-6a04-42f4-b29b-71974a0eaed6",
        "parentId" : "f425f655-fd5f-4a10-bd91-b90829239be5",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I think any subclass should be able to go through `np.array(..., subok=True, ...)` -- it may well just do the same thing inside anyway...",
        "createdAt" : "2017-04-06T18:46:55Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "642f7e841d2f9900b3793c9b140f8c1adc56b899",
    "line" : 276,
    "diffHunk" : "@@ -1,1 +585,589 @@    \"\"\"\n    def atleast_nd(x, ndim):\n        x = asanyarray(x)\n        diff = max(ndim - x.ndim, 0)\n        return x[(None,)*diff + (Ellipsis,)]"
  },
  {
    "id" : "15fb1f05-a253-42af-8282-5d4d533cb637",
    "prId" : 8981,
    "prUrl" : "https://github.com/numpy/numpy/pull/8981#pullrequestreview-76008755",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4999e289-a873-4102-bfff-61811fcd5a0b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Uh oh - bad merge / rebase - this just reverted #9667 ",
        "createdAt" : "2017-11-13T06:52:51Z",
        "updatedAt" : "2017-11-13T06:53:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fdfdd6a52fc0761c0d45931247c5ed2480224eb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +366,370 @@\n\nclass _Recurser(object):\n    \"\"\"\n    Utility class for recursing over nested iterables"
  },
  {
    "id" : "fa4cac7e-5b57-4231-8f4d-2531c680ae54",
    "prId" : 9667,
    "prUrl" : "https://github.com/numpy/numpy/pull/9667#pullrequestreview-73507741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d979953e-6bf9-4624-9fc0-a3c65e93c089",
        "parentId" : null,
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "Wouldn't `-(max_depth-depth)` just be `(depth-max_depth)`?",
        "createdAt" : "2017-10-31T19:06:58Z",
        "updatedAt" : "2017-11-09T12:57:46Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      },
      {
        "id" : "8585d2ac-c372-4ca4-bdee-fcd79bc527ff",
        "parentId" : "d979953e-6bf9-4624-9fc0-a3c65e93c089",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "Also slight personal preference to having spaces around binary operators for readability.",
        "createdAt" : "2017-10-31T19:07:33Z",
        "updatedAt" : "2017-11-09T12:57:46Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      },
      {
        "id" : "5ad9f2d0-bad8-4555-8576-54aca2fd17f0",
        "parentId" : "d979953e-6bf9-4624-9fc0-a3c65e93c089",
        "authorId" : "62eb5019-b87e-4827-b09a-a9f71c6c8994",
        "body" : ">Wouldn't `-(max_depth-depth)` just be `(depth-max_depth)`?\r\n\r\nIt would, yeah. The reason I wrote it that way round was because I wanted to match the docstring as closely as possible (my original motivation for this pr was to make it a bit clearer to people reading the code how block actually worked). The docstring says:\r\n>Blocks in the innermost lists are concatenated (see `concatenate`) along the last dimension (-1), then these are concatenated along the second-last dimension (-2), and so on until the outermost list is reached.\r\n\r\nTo me the correspondence between the docstring and the code is ever-so-slightly clearer with the expression the way round that it currently is, and I think the effect on performance is probably negligable.",
        "createdAt" : "2017-10-31T23:06:37Z",
        "updatedAt" : "2017-11-09T12:57:46Z",
        "lastEditedBy" : "62eb5019-b87e-4827-b09a-a9f71c6c8994",
        "tags" : [
        ]
      },
      {
        "id" : "89e6ca6a-988e-4e13-840c-5343308ce2f1",
        "parentId" : "d979953e-6bf9-4624-9fc0-a3c65e93c089",
        "authorId" : "62eb5019-b87e-4827-b09a-a9f71c6c8994",
        "body" : ">Also slight personal preference to having spaces around binary operators for readability.\r\n\r\nI often instinctively shorten things when they're being fed to a keyword argument, because you don't normally put spaces around the `=` sign. Don't\r\n```python\r\naxis=-(max_depth - depth)\r\n```\r\nand\r\n```python\r\naxis=depth - max_depth\r\n```\r\nlook a bit weird?",
        "createdAt" : "2017-10-31T23:11:33Z",
        "updatedAt" : "2017-11-09T12:57:46Z",
        "lastEditedBy" : "62eb5019-b87e-4827-b09a-a9f71c6c8994",
        "tags" : [
        ]
      },
      {
        "id" : "3438e033-c973-4d4d-ac34-f2c19b69e3b5",
        "parentId" : "d979953e-6bf9-4624-9fc0-a3c65e93c089",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "The style point is minor. Though there are many tools (e.g. `flake8`) that consider not having spaces around binary operators an error regardless of context. Normally this is argued from the standpoint of readability (including in PEP8 when it was introduced). Hence why I mentioned it. Adding parentheses around the keyword argument's value help guide the eye when following these style tools' recommendations. Not strongly attached to this styling nit though.",
        "createdAt" : "2017-11-01T15:17:27Z",
        "updatedAt" : "2017-11-09T12:57:46Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a691f2deb055f4ebfd60f742d816980c6893871f",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +446,450 @@                raise ValueError('Lists cannot be empty')\n            arrs = [block_recursion(arr, depth+1) for arr in arrays]\n            return _nx.concatenate(arrs, axis=-(max_depth-depth))\n        else:\n            # We've 'bottomed out' - arrays is either a scalar or an array"
  },
  {
    "id" : "3c603e76-8432-41c3-a61b-5a041440b145",
    "prId" : 11971,
    "prUrl" : "https://github.com/numpy/numpy/pull/11971#pullrequestreview-156193643",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e04f9ff-e573-4b11-b9b3-bf0be1c84ca7",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "typo: missing word \"[with] the recursive case\"",
        "createdAt" : "2018-09-18T03:31:50Z",
        "updatedAt" : "2018-10-23T20:42:56Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "f164d2e90cce62d901c1cce881684863fefde91f",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +608,612 @@        # type(arrays) is not list\n        # Return the slice and the array inside a list to be consistent with\n        # the recursive case.\n        arr = _atleast_nd(arrays, result_ndim)\n        return arr.shape, [()], [arr]"
  },
  {
    "id" : "7647de87-c18f-49e2-ba5a-72ffe3fec8c2",
    "prId" : 11971,
    "prUrl" : "https://github.com/numpy/numpy/pull/11971#pullrequestreview-161011160",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46dd7137-ae06-49d3-a543-691a81f381cd",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Micro-optimization I tried here:\r\n```python\r\n    ax_size = zip(*shapes)\r\n    \r\n    for i in range(axis):\r\n        sizes = next(ax_size)\r\n        if sizes.count(sizes[0]) != len(sizes):\r\n            raise ValueError('Mismatched array shapes in block.')\r\n\r\n    d = sum(next(ax_size))        \r\n    first_shape = shapes[0]\r\n    shape = (first_shape[:axis] + (d,) + first_shape[axis+1:])\r\n```\r\n\r\nNot sure if it's worth it, I think it is only slighlty faster? And less clear.",
        "createdAt" : "2018-10-01T17:57:59Z",
        "updatedAt" : "2018-10-23T20:42:56Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "ed23461c-9c45-4ea1-8bd9-c8418e2a14fe",
        "parentId" : "46dd7137-ae06-49d3-a543-691a81f381cd",
        "authorId" : "7714a86d-e4db-41f5-8928-d91402bb82aa",
        "body" : "I'll have to try it out. I'll try to have a few different options in the \"history\" of this PR and a command to compare them.",
        "createdAt" : "2018-10-01T18:23:56Z",
        "updatedAt" : "2018-10-23T20:42:56Z",
        "lastEditedBy" : "7714a86d-e4db-41f5-8928-d91402bb82aa",
        "tags" : [
        ]
      },
      {
        "id" : "99692571-7453-48b3-8ca2-b95b0a3412b2",
        "parentId" : "46dd7137-ae06-49d3-a543-691a81f381cd",
        "authorId" : "7714a86d-e4db-41f5-8928-d91402bb82aa",
        "body" : "Thanks it didn't seem to help much. Good try",
        "createdAt" : "2018-10-03T05:32:55Z",
        "updatedAt" : "2018-10-23T20:42:56Z",
        "lastEditedBy" : "7714a86d-e4db-41f5-8928-d91402bb82aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "f164d2e90cce62d901c1cce881684863fefde91f",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +557,561 @@                      for start, end in zip([0] + offsets_at_axis,\n                                            offsets_at_axis)]\n    return shape, slice_prefixes\n\n"
  },
  {
    "id" : "cb1b8969-c9db-4901-9fd7-bde172b3f141",
    "prId" : 11971,
    "prUrl" : "https://github.com/numpy/numpy/pull/11971#pullrequestreview-161222128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c921e1ab-c18f-46e5-b733-db35d877e2a0",
        "parentId" : null,
        "authorId" : "7714a86d-e4db-41f5-8928-d91402bb82aa",
        "body" : "All test are small (to run fast) and go to the `else` statement. I'm not sure how to test the code path chosen during a call to `np.block`. I think I've mostly isolated  to this single line though, so maybe that is OK?",
        "createdAt" : "2018-10-03T13:22:15Z",
        "updatedAt" : "2018-10-23T20:42:56Z",
        "lastEditedBy" : "7714a86d-e4db-41f5-8928-d91402bb82aa",
        "tags" : [
        ]
      },
      {
        "id" : "aad04d5c-b751-4765-b27d-af2ead907aa6",
        "parentId" : "c921e1ab-c18f-46e5-b733-db35d877e2a0",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "That seems fine to me as long as both branches are tested, which they are below.",
        "createdAt" : "2018-10-03T15:25:25Z",
        "updatedAt" : "2018-10-23T20:42:56Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "f164d2e90cce62d901c1cce881684863fefde91f",
    "line" : 208,
    "diffHunk" : "@@ -1,1 +799,803 @@    if list_ndim * final_size > (2 * 512 * 512):\n        return _block_slicing(arrays, list_ndim, result_ndim)\n    else:\n        return _block_concatenate(arrays, list_ndim, result_ndim)\n"
  },
  {
    "id" : "c8630dd1-17fa-4cc2-8c7a-1c9f9d104dec",
    "prId" : 12163,
    "prUrl" : "https://github.com/numpy/numpy/pull/12163#pullrequestreview-166597017",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e3f03ab-d293-471d-a1c7-3be77e469271",
        "parentId" : null,
        "authorId" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "body" : "I'm not sure if we'll be breaking backward compatibility by doing this. Maybe `isinstance(arrays, collections.Iterable) and not hasattr(arrays, '__array_function__')`?",
        "createdAt" : "2018-10-19T15:45:36Z",
        "updatedAt" : "2018-10-25T20:35:38Z",
        "lastEditedBy" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "tags" : [
        ]
      },
      {
        "id" : "69ee9ddb-bfe2-409e-a419-ebd2537a0401",
        "parentId" : "2e3f03ab-d293-471d-a1c7-3be77e469271",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "My reasoning for picking `type(arrays) is list` is that it matches `np.block()`, which hard codes `list` (not even `tuple`). And we know that `list.__array_function__` will never exist.",
        "createdAt" : "2018-10-19T16:07:10Z",
        "updatedAt" : "2018-10-25T20:35:38Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "fc6fdd50-194e-468d-836d-1f1e235d25b6",
        "parentId" : "2e3f03ab-d293-471d-a1c7-3be77e469271",
        "authorId" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "body" : "Okay, in that case ignore my comment. I was worried about the case where we might be inadvertently supporting other kinds of containers in the function but not the dispatcher. A comment would be nice, in any case.",
        "createdAt" : "2018-10-19T16:11:06Z",
        "updatedAt" : "2018-10-25T20:35:38Z",
        "lastEditedBy" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "tags" : [
        ]
      },
      {
        "id" : "bff987b1-df36-4e10-8abc-6d63b298a5ec",
        "parentId" : "2e3f03ab-d293-471d-a1c7-3be77e469271",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Yes, a comment is definitely a good idea here. Done!",
        "createdAt" : "2018-10-19T16:16:42Z",
        "updatedAt" : "2018-10-25T20:35:38Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9a13b5203bd01c0158fee78460de608eee97573",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +636,640 @@    # cases list specifically rather than allowing for generic iterables or\n    # tuple. Also, we know that list.__array_function__ will never exist.\n    if type(arrays) is list:\n        for subarrays in arrays:\n            for subarray in _block_dispatcher(subarrays):"
  },
  {
    "id" : "2d815e5b-067c-460b-ab68-0005b529e974",
    "prId" : 12280,
    "prUrl" : "https://github.com/numpy/numpy/pull/12280#pullrequestreview-169388309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cec7b27-eef8-4ffb-9a73-a46ee192d705",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This raises an interesting point - is wrapping everything in `array_function_dispatch` going to make all our warnings be emitted within the `__array_function__` dispatcher?",
        "createdAt" : "2018-10-29T16:05:12Z",
        "updatedAt" : "2018-10-29T16:05:30Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a845502a-3168-4644-876a-70e54ab76cc9",
        "parentId" : "4cec7b27-eef8-4ffb-9a73-a46ee192d705",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "In this case, yes.\r\n\r\nIn general: warnings about changed functions arguments/signatures should go in the dispatcher, since they are relevant whether you are using NumPy or not. Warnings about changed function behavior should remain in the implementations.",
        "createdAt" : "2018-10-29T16:12:43Z",
        "updatedAt" : "2018-10-29T16:12:44Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "00640218fcbc5d71f22550a9368da92358c8de96",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +213,217 @@                      'iterables such as generators is deprecated as of '\n                      'NumPy 1.16 and will raise an error in the future.',\n                      FutureWarning, stacklevel=stacklevel)\n        return ()\n    return arrays"
  },
  {
    "id" : "32401349-25ab-412d-830f-29150ad802f6",
    "prId" : 13002,
    "prUrl" : "https://github.com/numpy/numpy/pull/13002#pullrequestreview-206402806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fd90525-8734-43a6-b35b-47b558167b5b",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Adding these lines quieted a warning \"Block quote ends without a blank line; unexpected unindent.\" but I don't really understand why",
        "createdAt" : "2019-02-21T08:43:08Z",
        "updatedAt" : "2019-02-28T09:46:48Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "62380d5d-8a64-4ecd-b810-169d477bd8b2",
        "parentId" : "3fd90525-8734-43a6-b35b-47b558167b5b",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "yeah that doesn't make a lot of sense; probably a numpydoc or sphinx bug",
        "createdAt" : "2019-02-21T16:22:55Z",
        "updatedAt" : "2019-02-28T09:46:48Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "76099ada3cca1d815e1b32f5d0c9786e1c5e0481",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +361,365 @@    axis : int, optional\n        The axis in the result array along which the input arrays are stacked.\n\n    out : ndarray, optional\n        If provided, the destination to place the result. The shape must be"
  }
]