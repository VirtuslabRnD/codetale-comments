[
  {
    "id" : "6968a20e-4a4f-40ce-90c4-92a01151f0cc",
    "prId" : 5605,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c7679d6-3a52-4f17-80cd-9a0daff41cc6",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "`len(arrays) == 0` might be clearer.\n",
        "createdAt" : "2015-05-06T19:28:58Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "de67cd93-1a18-4447-b895-c179237fc7d6",
        "parentId" : "5c7679d6-3a52-4f17-80cd-9a0daff41cc6",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "IMO this is idiomatic way to write this in Python (but I don't care too much either way)\n",
        "createdAt" : "2015-05-06T20:08:23Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "93d3b8dedc5cd602c867a234f07188fe5bd5479b",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +332,336 @@    \"\"\"\n    arrays = [asanyarray(arr) for arr in arrays]\n    if not arrays:\n        raise ValueError('need at least one array to stack')\n"
  },
  {
    "id" : "ccfdd7d8-cce2-4f80-a743-45ed63aefe92",
    "prId" : 5605,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5264540-230c-47da-8fd4-0b7086c3af02",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Need more explanation here. For instance, in the examples, it isn't clear why `np.stack((a, b))` is not the same as `np.stack((a, b), axis=-1)`.\n",
        "createdAt" : "2015-05-06T19:45:43Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "34ad1881-92de-4ea3-ba94-07cc5c52d3cc",
        "parentId" : "e5264540-230c-47da-8fd4-0b7086c3af02",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "I think the missing explanation is that the `axis` argument refers to the axis position in the _result_ array, not in the input arrays.\n",
        "createdAt" : "2015-05-06T20:04:22Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "b1d8a4c3-921e-48f5-88ea-8c723e93b707",
        "parentId" : "e5264540-230c-47da-8fd4-0b7086c3af02",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Still needs a better explanation of where the new axis is located. It might also be better to follow the list insertion protocol.\n\n```\nIn [7]: a = [1]*4\n\nIn [8]: a.insert(4, 2)\n\nIn [9]: a\nOut[9]: [1, 1, 1, 1, 2]\n\nIn [10]: a = [1]*4\n\nIn [11]: a.insert(-1, 2)\n\nIn [12]: a\nOut[12]: [1, 1, 1, 2, 1]\n```\n",
        "createdAt" : "2015-05-08T18:27:13Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a75f5c1c-6b25-4b2d-97b7-7d43991e5ab2",
        "parentId" : "e5264540-230c-47da-8fd4-0b7086c3af02",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Although it is nice to indicate appending the axis with a simple `-1`. In the current case, an explanation of how negative axis values are handled would help.  For the list version you  could do something like\n\n```\nIn [26]: a = ones((2,2,3))\n\nIn [27]: newshape = list(a.shape)\n\nIn [28]: newshape.insert(-1, 1)\n\nIn [29]: a.reshape(newshape).shape\nOut[29]: (2, 2, 1, 3)\n```\n",
        "createdAt" : "2015-05-08T18:45:19Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "63e0ea0d-dd52-419c-a631-be7ebd4149d5",
        "parentId" : "e5264540-230c-47da-8fd4-0b7086c3af02",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "How about\n\n```\ndef stack(arrays, axis=0):\n    \"\"\"\n    Join a sequence of arrays along a new axis.\n\n    The `axis` parameter specifies the index of the new axis in the\n    dimensions of the result. For instance, if ``axis=0`` it will be the\n    first dimension and if ``axis=-1`` it will be the last dimension.\n\n    etc...\n```\n",
        "createdAt" : "2015-05-09T00:07:48Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "93d3b8dedc5cd602c867a234f07188fe5bd5479b",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +282,286 @@def stack(arrays, axis=0):\n    \"\"\"\n    Join a sequence of arrays along a new axis.\n\n    The `axis` parameter specifies the index of the new axis in the dimensions"
  },
  {
    "id" : "0ffcc607-b9e2-4017-bbe8-f3f6d63b2160",
    "prId" : 5605,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43c5e646-ae86-4266-ba97-bfcdc25e5e73",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What happens with mixed subtypes?\n",
        "createdAt" : "2015-05-06T19:51:59Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "fb0446a8-559a-4516-b68c-756ca96b1c1f",
        "parentId" : "43c5e646-ae86-4266-ba97-bfcdc25e5e73",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could maybe check that all types are the same.\n",
        "createdAt" : "2015-05-06T19:52:56Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "26af1751-b07a-4f11-8f5b-aa36969fdc78",
        "parentId" : "43c5e646-ae86-4266-ba97-bfcdc25e5e73",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could do that by checking that  `set(type(a) for a in arrays)` has one member.\n",
        "createdAt" : "2015-05-06T19:55:48Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b9141f03-f7fa-492e-965e-2c676a123d11",
        "parentId" : "43c5e646-ae86-4266-ba97-bfcdc25e5e73",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "What happens for subtypes is mostly dictated by the behavior of `np.concatenate`. I don't see much advantage in explicitly checking for consistent types here when none of the logic in this function relies on that.\n",
        "createdAt" : "2015-05-06T20:00:49Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "bef20002-034e-45dd-86ec-dfbe94f6ff77",
        "parentId" : "43c5e646-ae86-4266-ba97-bfcdc25e5e73",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I think the type checking should be left for `concatenate` (which does not currently do this all that well, but could be rewritten, e.g., using `insert` methods if present on the first member or so).\n",
        "createdAt" : "2015-05-06T20:06:12Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "651073b2-3f4c-4029-ac73-da415ad082d1",
        "parentId" : "43c5e646-ae86-4266-ba97-bfcdc25e5e73",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK.\n",
        "createdAt" : "2015-05-07T00:32:54Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "93d3b8dedc5cd602c867a234f07188fe5bd5479b",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +331,335 @@\n    \"\"\"\n    arrays = [asanyarray(arr) for arr in arrays]\n    if not arrays:\n        raise ValueError('need at least one array to stack')"
  },
  {
    "id" : "6f521fad-88ae-4c92-b821-e5e23b9ac645",
    "prId" : 5605,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "555f9a1a-f379-4978-8a13-f91bf0be28d2",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "An alternative method, once you have the shape of the arrays, is\n\n```\nnewshape = shape[:axis] + (1,) + shape[axis:]\nexpanded_arrays = [a.reshape(newshape) for a in arrays]\n```\n",
        "createdAt" : "2015-05-06T20:17:07Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "03d086f4-c3e3-4ca7-bee7-17c4291fce0f",
        "parentId" : "555f9a1a-f379-4978-8a13-f91bf0be28d2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Or, getting rid of `expanded_arrays`\n\n```\n_nx.concatenate([a.reshape(newshape) for a in arrays], axis=axis)\n```\n",
        "createdAt" : "2015-05-06T20:28:56Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "eccd6372-d1f6-4a22-9097-508a76add363",
        "parentId" : "555f9a1a-f379-4978-8a13-f91bf0be28d2",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "I like using slicing for this operation rather than reshape because I _know_ that slicing will always using a view rather than a copy. Though I suppose `reshape` is probably also safe when used in this way.\n",
        "createdAt" : "2015-05-06T20:36:30Z",
        "updatedAt" : "2015-05-12T04:18:26Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "93d3b8dedc5cd602c867a234f07188fe5bd5479b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +346,350 @@        axis += result_ndim\n\n    sl = (slice(None),) * axis + (_nx.newaxis,)\n    expanded_arrays = [arr[sl] for arr in arrays]\n    return _nx.concatenate(expanded_arrays, axis=axis)"
  },
  {
    "id" : "6fd09087-b4eb-43ca-bf9c-6dfe80727418",
    "prId" : 8886,
    "prUrl" : "https://github.com/numpy/numpy/pull/8886#pullrequestreview-31398294",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f425f655-fd5f-4a10-bd91-b90829239be5",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "This is not necessary: by the time `atleast_nd` is called below, all input has already been through `asanyarray`.\r\n(Similarly, `x.ndim <= ndim` is guaranteed to be true, but that seems a bit less relevant.)",
        "createdAt" : "2017-04-06T18:22:47Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "45aada4f-3292-4b6b-ae19-8bd94427e952",
        "parentId" : "f425f655-fd5f-4a10-bd91-b90829239be5",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "True, but this is what an implementation of an `atleast_nd` (#8550) function would be, and I was assuming this would be removed if that gets merged.",
        "createdAt" : "2017-04-06T18:24:53Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1973364d-b235-4551-b068-4da76287ca68",
        "parentId" : "f425f655-fd5f-4a10-bd91-b90829239be5",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "Also, as I pointed out in a previous revision, `atleast_nd` can be rewritten as `np.array(x, subok=True, copy=False, ndmin=ndim)`.",
        "createdAt" : "2017-04-06T18:25:57Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "2722d6ca-8aa0-465f-8663-48ba5c6510fa",
        "parentId" : "f425f655-fd5f-4a10-bd91-b90829239be5",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> np.array(x, subok=True, copy=False, ndmin=ndim)\r\n\r\nI was thinking from a subclass perspective, this is marginally harder to propagate data through than `newaxis` indexing?",
        "createdAt" : "2017-04-06T18:28:07Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "19953314-ad1d-4d44-ac8b-becc8c31af5b",
        "parentId" : "f425f655-fd5f-4a10-bd91-b90829239be5",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Yes, I remember pointing that out in #8550, but forgot it here. Agreed one might as well use that directly in the recurse call.",
        "createdAt" : "2017-04-06T18:28:21Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "ef893ccd-6a04-42f4-b29b-71974a0eaed6",
        "parentId" : "f425f655-fd5f-4a10-bd91-b90829239be5",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I think any subclass should be able to go through `np.array(..., subok=True, ...)` -- it may well just do the same thing inside anyway...",
        "createdAt" : "2017-04-06T18:46:55Z",
        "updatedAt" : "2017-04-20T21:25:20Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "642f7e841d2f9900b3793c9b140f8c1adc56b899",
    "line" : 276,
    "diffHunk" : "@@ -1,1 +585,589 @@    \"\"\"\n    def atleast_nd(x, ndim):\n        x = asanyarray(x)\n        diff = max(ndim - x.ndim, 0)\n        return x[(None,)*diff + (Ellipsis,)]"
  },
  {
    "id" : "15fb1f05-a253-42af-8282-5d4d533cb637",
    "prId" : 8981,
    "prUrl" : "https://github.com/numpy/numpy/pull/8981#pullrequestreview-76008755",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4999e289-a873-4102-bfff-61811fcd5a0b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Uh oh - bad merge / rebase - this just reverted #9667 ",
        "createdAt" : "2017-11-13T06:52:51Z",
        "updatedAt" : "2017-11-13T06:53:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "7fdfdd6a52fc0761c0d45931247c5ed2480224eb",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +366,370 @@\n\nclass _Recurser(object):\n    \"\"\"\n    Utility class for recursing over nested iterables"
  }
]