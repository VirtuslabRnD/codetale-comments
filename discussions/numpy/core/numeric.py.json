[
  {
    "id" : "f12251c2-73c3-4f00-92eb-3077b4c19750",
    "prId" : 2694,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e310f59-d934-44b5-973c-8b43e750c87d",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "The changes here look correct, but I wanted to note that this function is really strange and confusing. IMO we should deprecate isfortran (and ISFORTRAN) altogether.\n",
        "createdAt" : "2012-10-22T15:27:32Z",
        "updatedAt" : "2012-10-23T12:39:59Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "02ebf8b3e7674a6b8a06636feaa6c761fcdf4e2d",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +585,589 @@    True\n\n    C-ordered arrays evaluate as False even if they are also FORTRAN-ordered.\n\n    >>> np.isfortran(np.array([1, 2], order='FORTRAN'))"
  },
  {
    "id" : "0927fefb-a8f4-401b-8bd8-3338b9dea850",
    "prId" : 3322,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a724c15-cfcd-4e77-9b12-817cff42d78b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Is it OK to have asarray applied after the the `==` operator rather than applying it to the operands?\n",
        "createdAt" : "2013-05-10T22:00:13Z",
        "updatedAt" : "2013-05-13T15:25:13Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "bae64e60-3603-4e4b-b7d2-29aeab4285c5",
        "parentId" : "6a724c15-cfcd-4e77-9b12-817cff42d78b",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yeah, but the asarray can be just removed here, since in both functions a1 and a2 are already converted to arrays before this line.\n",
        "createdAt" : "2013-05-11T17:21:48Z",
        "updatedAt" : "2013-05-13T15:25:14Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "71b9b840-bb84-4f92-be40-d4723b778968",
        "parentId" : "6a724c15-cfcd-4e77-9b12-817cff42d78b",
        "authorId" : "b0e7e584-a9be-4737-9003-4922807a34eb",
        "body" : "@seberg If the two operands are 0d arrays, the == operator will return a bool object instead of an array, in which case the call to all() will fail. I could add a special case for this though, if unnecessarily calling asarray() is too costly.\n\nJust realized I need to handle this properly in array_equal() too.\n",
        "createdAt" : "2013-05-11T17:56:37Z",
        "updatedAt" : "2013-05-13T15:25:14Z",
        "lastEditedBy" : "b0e7e584-a9be-4737-9003-4922807a34eb",
        "tags" : [
        ]
      },
      {
        "id" : "0f40fa44-8161-4053-a86d-69d079c4b623",
        "parentId" : "6a724c15-cfcd-4e77-9b12-817cff42d78b",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Ah, right. The performance of asarray is no worry to me (it just returns immediately since it is already an array anyway). It might be that all works on the np.bool_ object, but I don't care either way then.\n",
        "createdAt" : "2013-05-11T18:05:55Z",
        "updatedAt" : "2013-05-13T15:25:14Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "4792edb0-9935-4912-8bae-2cb68eb21f2d",
        "parentId" : "6a724c15-cfcd-4e77-9b12-817cff42d78b",
        "authorId" : "b0e7e584-a9be-4737-9003-4922807a34eb",
        "body" : "I added asarray call to array_equal too. My reasoning that I stated earlier wasn't quite correct. The == operator actually returns a np.bool_ object for 0d arrays, but returns a False object for two arrays that don't broadcast.\n",
        "createdAt" : "2013-05-13T15:30:22Z",
        "updatedAt" : "2013-05-13T15:30:22Z",
        "lastEditedBy" : "b0e7e584-a9be-4737-9003-4922807a34eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "92503a5cb8bf52321043294b3b8b8811dd1eaee8",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2180,2184 @@        return False\n    try:\n        return bool(asarray(a1 == a2).all())\n    except ValueError:\n        return False"
  },
  {
    "id" : "074485f3-1b76-46b3-9f16-7026bf9c5d2b",
    "prId" : 4338,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40e968d2-42fa-4012-8366-768797dca7b7",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Could also use `axisa = axisb = axisc = axis` but not important (not sure what PEP8 says about it).\n",
        "createdAt" : "2014-02-21T15:14:12Z",
        "updatedAt" : "2014-02-24T19:33:26Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d152aff963cc325a32c65e4dd1b0e2e87fba4b2",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1496,1500 @@    \"\"\"\n    if axis is not None:\n        axisa, axisb, axisc = (axis,) * 3\n    a = asarray(a)\n    b = asarray(b)"
  },
  {
    "id" : "e8f0ed7e-aad5-47f2-8ae9-7e6292e12c9c",
    "prId" : 4338,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18ef6c57-f4fc-41c6-b60f-d253e772ea50",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "This is fine, just to make sure. negative axes are supported, right?\n",
        "createdAt" : "2014-02-21T15:19:10Z",
        "updatedAt" : "2014-02-24T19:33:26Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "e11c80fb-e10a-437c-8fb2-cf0f3e36f847",
        "parentId" : "18ef6c57-f4fc-41c6-b60f-d253e772ea50",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "Yes, this code works fine with reasonable inputs. What I haven't tried are out of bounds axes. And I am afraid that, for `axisc` at least, they will be silently clipped to the end of the array. Will test it and add something to the tests.\n",
        "createdAt" : "2014-02-21T15:26:01Z",
        "updatedAt" : "2014-02-24T19:33:26Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "ddf26130-901e-4977-aefe-570c9e3b81c5",
        "parentId" : "18ef6c57-f4fc-41c6-b60f-d253e772ea50",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Why clipped? rollaxis seems to throw an error?\n",
        "createdAt" : "2014-02-21T15:28:33Z",
        "updatedAt" : "2014-02-24T19:33:26Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "0dba547c-601c-483b-ae5e-d95b9643dcb3",
        "parentId" : "18ef6c57-f4fc-41c6-b60f-d253e772ea50",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "Yes, you are right... I got confused by the fact that the condition for the `start` (i.e the second) axis is `<= ndim`, not the typical `< ndim`. Is it worth adding a check in the tests.\n",
        "createdAt" : "2014-02-21T15:33:17Z",
        "updatedAt" : "2014-02-24T19:33:26Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d152aff963cc325a32c65e4dd1b0e2e87fba4b2",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +1522,1526 @@                return cp\n            else:\n                # This works because we are moving the last axis\n                return rollaxis(cp, -1, axisc)\n        else:"
  },
  {
    "id" : "3bbf6efb-7891-4761-9c25-68b3295961c8",
    "prId" : 4459,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4f22e0d-82a1-43ae-bad5-a1ec3bc196b8",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "this still needs a `.. versionadded:: 1.9.0` tag\nsee e.g. the np.percentile interpolation argument in 1.9 for an example\n",
        "createdAt" : "2014-03-07T17:49:19Z",
        "updatedAt" : "2014-03-07T18:09:44Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "51fc048a0eb6be3c1a9226b46ece0346e9cb54e4",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1014,1018 @@        not already 1-dimensional.\n    out : (M, N) ndarray, optional\n          A location where the result is stored\n\n        .. versionadded:: 1.9.0"
  },
  {
    "id" : "fbf90f92-ffc3-4165-88a4-3238c7fb4e60",
    "prId" : 5590,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a94322e-c441-4cbb-87a1-e78b86d57c30",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Need a `.. versionadded:: 1.10` here, either before the first line (I'm tending that way), of after a blank line at the end.\n",
        "createdAt" : "2015-02-22T23:57:13Z",
        "updatedAt" : "2015-02-23T00:25:00Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "1ddf2ab6-3261-4fec-96f1-afd6d5822b1b",
        "parentId" : "0a94322e-c441-4cbb-87a1-e78b86d57c30",
        "authorId" : "4b043a42-af78-4815-bcb6-48d9c89e2325",
        "body" : "What is the appropriate indentation level?  With the docstring, or aligned with \"Whether\". And should I have a blank line after the versionadded line?\n",
        "createdAt" : "2015-02-23T00:04:14Z",
        "updatedAt" : "2015-02-23T00:25:00Z",
        "lastEditedBy" : "4b043a42-af78-4815-bcb6-48d9c89e2325",
        "tags" : [
        ]
      },
      {
        "id" : "211c7405-adbc-4462-a5a5-84c4e1ad8132",
        "parentId" : "0a94322e-c441-4cbb-87a1-e78b86d57c30",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Same as the text. You can see plenty of examples if you `grep -r versionadded numpy`.\n",
        "createdAt" : "2015-02-23T00:11:24Z",
        "updatedAt" : "2015-02-23T00:25:00Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "61c339f8-a362-4ac5-9021-428f78a5665e",
        "parentId" : "0a94322e-c441-4cbb-87a1-e78b86d57c30",
        "authorId" : "4b043a42-af78-4815-bcb6-48d9c89e2325",
        "body" : "Well, that is odd....the change appears in e7b3a0c, but not under \"Files changed\" for this PR.\n",
        "createdAt" : "2015-02-23T00:22:53Z",
        "updatedAt" : "2015-02-23T00:25:00Z",
        "lastEditedBy" : "4b043a42-af78-4815-bcb6-48d9c89e2325",
        "tags" : [
        ]
      }
    ],
    "commit" : "e59c6220dda253ff5e94251384aef3ebf605942f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2230,2234 @@        .. versionadded:: 1.10.0\n        Whether to compare NaN's as equal.  If True, NaN's in `a` will be\n        considered equal to NaN's in `b` in the output array.\n\n    Returns"
  },
  {
    "id" : "941893f9-c6a0-46d1-b360-d769066b9779",
    "prId" : 5991,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7468c599-e923-4c08-9d98-e5e28a6f4717",
        "parentId" : null,
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "`multiarray` isn't a public submodule, so this isn't right. Either we add `np.cross_correlate` or we just don't offer this behavior at all anymore.\n",
        "createdAt" : "2015-06-21T21:02:08Z",
        "updatedAt" : "2015-06-21T21:02:08Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "bac2fdf7c02b4bc07b9c05dbb6551004903279ca",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +863,867 @@    --------\n    convolve : Discrete, linear convolution of two one-dimensional sequences.\n    multiarray.correlate : Old, no conjugate, version of correlate.\n\n    Notes"
  },
  {
    "id" : "3df6c646-0f69-427a-9384-f600d4812850",
    "prId" : 6630,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d14ce87-242f-4029-8179-dc6ba8d63dac",
        "parentId" : null,
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Note that it's currently possible to call moveaxis with one of `source`/`destination` a scalar and the other a list of length one without getting any errors (e.g., `np.moveaxis(a, 0, [-1])`). I considered catching this explicitly, but it didn't seem worth the trouble. Others may disagree, though, in which case it's not hard to add a check.\n",
        "createdAt" : "2015-11-09T04:29:15Z",
        "updatedAt" : "2016-01-09T23:56:28Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "bb79d0f1-44d2-41d6-900d-f911d948827a",
        "parentId" : "4d14ce87-242f-4029-8179-dc6ba8d63dac",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Sounds fine to me for an `int or sequence of int` type of argument.\n",
        "createdAt" : "2016-01-02T18:21:41Z",
        "updatedAt" : "2016-01-09T23:56:28Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ffde7f488eb583ed2a200702e85a6518c4f94ec",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +1534,1538 @@    source = _validate_axis(source, a.ndim, 'source')\n    destination = _validate_axis(destination, a.ndim, 'destination')\n    if len(source) != len(destination):\n        raise ValueError('`source` and `destination` arguments must have '\n                         'the same number of elements')"
  },
  {
    "id" : "351c8f84-7473-453f-a81d-a6a31f2b49db",
    "prId" : 6630,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28218167-60b0-424c-a31c-6fbd2cbb4013",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Just noticed this is still open, sorry for forgetting about it (dunno if it was me who reviewed it first). Mostly some thoughts left.\nI think we might want to mention the word \"view\" here (and/or in the Result section). It should be somewhat obvious to most users (and seems also missing for transpose), but I think it is quite an important word in general.\n",
        "createdAt" : "2016-01-02T18:16:52Z",
        "updatedAt" : "2016-01-09T23:56:28Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "30560fb3-ef43-47c9-a06d-477c7d5dd2c7",
        "parentId" : "28218167-60b0-424c-a31c-6fbd2cbb4013",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "On the other hand, it somewhat depends on the types `transpose` implementation. I suppose it is not guaranteed to be a view for non-ndarray types.\n",
        "createdAt" : "2016-01-02T18:26:14Z",
        "updatedAt" : "2016-01-09T23:56:28Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "00528dbe-345a-4368-8ec4-9bd1a0495443",
        "parentId" : "28218167-60b0-424c-a31c-6fbd2cbb4013",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "I agree, we should mention that this creates a view.\n",
        "createdAt" : "2016-01-04T06:31:32Z",
        "updatedAt" : "2016-01-09T23:56:28Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "323c16e9-6519-49b5-8684-8706bed4b70b",
        "parentId" : "28218167-60b0-424c-a31c-6fbd2cbb4013",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "done\n",
        "createdAt" : "2016-01-08T06:47:19Z",
        "updatedAt" : "2016-01-09T23:56:28Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ffde7f488eb583ed2a200702e85a6518c4f94ec",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +1478,1482 @@def moveaxis(a, source, destination):\n    \"\"\"\n    Move axes of an array to new positions.\n\n    Other axes remain in their original order."
  },
  {
    "id" : "76294bc4-384d-4586-a6b3-75849cf802e6",
    "prId" : 6630,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15465a9e-3dd9-4908-97dd-741d505247b1",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Question (seriously, and annoying ;)). `np.transpose` uses the `wrapit` logic. You are basically explicitly circumventing it here (otherwise could just call np.transpose after all?). Is that intentional? Do we still like `wrapit` at all?\n",
        "createdAt" : "2016-01-02T18:20:17Z",
        "updatedAt" : "2016-01-09T23:56:28Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "940f2f16-0b02-4169-b090-f10009dd6536",
        "parentId" : "15465a9e-3dd9-4908-97dd-741d505247b1",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "I also need `a.ndim` to be valid, so I need to do the coercion to ndarray before the transpose.\n",
        "createdAt" : "2016-01-04T06:30:12Z",
        "updatedAt" : "2016-01-09T23:56:28Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "7307ad97-530c-490e-824d-2f8a59e29667",
        "parentId" : "15465a9e-3dd9-4908-97dd-741d505247b1",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I agree with @seberg that one might as well try to remain consistent with previous logic. Why not simply duck type and remove the whole clause and call `np.transpose` at the end? I do think it is fine for `numpy` functions to assume that whatever is passed in will have an `ndim` attribute (and `rollaxis` does the same).\n",
        "createdAt" : "2016-01-04T15:39:31Z",
        "updatedAt" : "2016-01-09T23:56:28Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "bb02c921-f270-48df-87e4-2199b7cd9c9d",
        "parentId" : "15465a9e-3dd9-4908-97dd-741d505247b1",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Well, `np.transpose` can handle (lists of) lists, e.g.,\n\n```\nIn [2]: np.transpose([[0, 1], [2, 3]])\nOut[2]:\narray([[0, 2],\n       [1, 3]])\n```\n\nSo it seems somewhat logical to be able to handle nested lists in `moveaxis` as well. I even have a unit test verifying this. I don't feel too strongly about this, but I do think it's a bit more consistent.\n",
        "createdAt" : "2016-01-08T06:45:22Z",
        "updatedAt" : "2016-01-09T23:56:28Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "f4952afc-457a-4997-bbc7-d3f8fb1acc55",
        "parentId" : "15465a9e-3dd9-4908-97dd-741d505247b1",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Well, I guess you are right, it was a bit silly. I thought transpose was better about preserving subclasses. But since a subclass must have the `.transpose` attribute it should never go into the second branch (where the \"wrap\" could be missing for some subclass support).\nSo on first sight I think it is good, but will ponder it a bit more.\n",
        "createdAt" : "2016-01-08T08:09:26Z",
        "updatedAt" : "2016-01-09T23:56:28Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ffde7f488eb583ed2a200702e85a6518c4f94ec",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +1530,1534 @@    except AttributeError:\n        a = asarray(a)\n        transpose = a.transpose\n\n    source = _validate_axis(source, a.ndim, 'source')"
  },
  {
    "id" : "8435def1-e38c-4b62-94dc-fff314936533",
    "prId" : 6630,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23594bfe-e739-4e2f-b71a-9a5fe3aa2be1",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I should just merge it, that way I can't find ever more things I missed before ;).\n\nCould you add the `..versionadded::` thingy? After that I will merge unless someone speaks up first :).\n",
        "createdAt" : "2016-01-09T15:08:11Z",
        "updatedAt" : "2016-01-09T23:56:28Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "4fc8db96-9c31-478e-9cdb-e1a80ddcbc75",
        "parentId" : "23594bfe-e739-4e2f-b71a-9a5fe3aa2be1",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "good call -- done!\n",
        "createdAt" : "2016-01-09T23:57:02Z",
        "updatedAt" : "2016-01-09T23:57:02Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ffde7f488eb583ed2a200702e85a6518c4f94ec",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +1499,1503 @@        Array with moved axes. This array is a view of the input array.\n\n    See Also\n    --------\n    transpose: Permute the dimensions of an array."
  },
  {
    "id" : "57eaae16-c74b-4448-9451-d49217e9fbae",
    "prId" : 7177,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b3794cb-203e-4984-adfc-3db9ce411f7a",
        "parentId" : null,
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "This allocates a new boolean array of the same shape as the original. I thought the whole point was to avoid doing that...\n",
        "createdAt" : "2016-07-07T18:33:35Z",
        "updatedAt" : "2016-08-05T02:20:47Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "a147505f-d3e1-455b-b7ae-8f61a77ffdaa",
        "parentId" : "3b3794cb-203e-4984-adfc-3db9ce411f7a",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "@madphysicist: When was that the whole point?  \n",
        "createdAt" : "2016-07-07T18:36:59Z",
        "updatedAt" : "2016-08-05T02:20:47Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      },
      {
        "id" : "ca758f07-7270-4cf2-ba5e-d8bb7e21ec2f",
        "parentId" : "3b3794cb-203e-4984-adfc-3db9ce411f7a",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "I thought wrong apparently. It just seems a bit hacky to do that with a function that is implemented in C exactly to avoid such an operation.\n",
        "createdAt" : "2016-07-07T18:44:58Z",
        "updatedAt" : "2016-08-05T02:20:47Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "ec08fbbf-e300-44ab-aeab-6328698ab81a",
        "parentId" : "3b3794cb-203e-4984-adfc-3db9ce411f7a",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "Hacky, a bit, but it does get the job done without too much sadness.\n",
        "createdAt" : "2016-07-07T18:47:39Z",
        "updatedAt" : "2016-08-05T02:20:47Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fc9e4520b1d00b58a77f28936da2fec2672de83",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +435,439 @@\n    if issubdtype(a.dtype, np.number):\n        return (a != 0).sum(axis=axis, dtype=np.intp)\n\n    if (issubdtype(a.dtype, np.string_) or"
  },
  {
    "id" : "71c7f42f-493d-4117-925a-d404359f88ca",
    "prId" : 7177,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11d3b87d-a8d3-476b-a60a-e96189c0738b",
        "parentId" : null,
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "This allocates as well...\n",
        "createdAt" : "2016-07-07T18:33:56Z",
        "updatedAt" : "2016-08-05T02:20:47Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "a4243dd1-0a51-4ff1-be37-fe9f1c3d4c50",
        "parentId" : "11d3b87d-a8d3-476b-a60a-e96189c0738b",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "For future reference: see conversation <a href=\"https://github.com/numpy/numpy/pull/7177#discussion_r69961479\">above</a>\n",
        "createdAt" : "2016-07-08T02:40:29Z",
        "updatedAt" : "2016-08-05T02:20:47Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fc9e4520b1d00b58a77f28936da2fec2672de83",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +440,444 @@            issubdtype(a.dtype, np.unicode_)):\n        nullstr = a.dtype.type('')\n        return (a != nullstr).sum(axis=axis, dtype=np.intp)\n\n    axis = asarray(_validate_axis(axis, a.ndim, 'axis'))"
  },
  {
    "id" : "b521289c-3fb7-485a-a04f-e43eeabf81b6",
    "prId" : 7177,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "537ccae9-6a44-4055-b713-0fe9ff35bb6e",
        "parentId" : null,
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "Not sure if this is what you want, but have you considered just applying `np.lib.function_base._ureduce` on top of `np.apply_along_axis` above instead of doing sums?\n",
        "createdAt" : "2016-07-07T18:36:36Z",
        "updatedAt" : "2016-08-05T02:20:47Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "c12386f3-b5c0-4b17-8b56-202a361cbf17",
        "parentId" : "537ccae9-6a44-4055-b713-0fe9ff35bb6e",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "I have, and unfortunately, it doesn't quite do what I want (i.e. I get test failures).  My other objection is that it would make things difficult for expansion (e.g. add an `out` or `keepdims` arg, which is what @juliantaylor had proposed should be added later).\n",
        "createdAt" : "2016-07-08T03:02:13Z",
        "updatedAt" : "2016-08-05T02:20:47Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      },
      {
        "id" : "b80e0f33-2c0c-4486-b2f4-073c7d2a5dce",
        "parentId" : "537ccae9-6a44-4055-b713-0fe9ff35bb6e",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "That may be the way to go now that I think about it. Perhaps writing this as a ufunc will be easier since the existing infrastructure will provide all the `axis`, `out` and `keepdims` parameters.\n",
        "createdAt" : "2016-07-08T15:36:59Z",
        "updatedAt" : "2016-08-05T02:20:47Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "18482e4c-f204-4557-9998-6c5ac72b86a0",
        "parentId" : "537ccae9-6a44-4055-b713-0fe9ff35bb6e",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "Although on second thought a reduction function may not be appropriate as a ufunc...\n",
        "createdAt" : "2016-07-08T15:39:37Z",
        "updatedAt" : "2016-08-05T02:20:47Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "ebb5c5a8-0aa7-466a-a09d-ac3c87f9009f",
        "parentId" : "537ccae9-6a44-4055-b713-0fe9ff35bb6e",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "Exactly, though additional `ufunc` behaviour is best saved for another PR :smile:\n",
        "createdAt" : "2016-07-08T15:40:26Z",
        "updatedAt" : "2016-08-05T02:20:47Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fc9e4520b1d00b58a77f28936da2fec2672de83",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +458,462 @@        # addition is very well optimized\n        return counts.sum(axis=tuple(axis[1:] - (\n            axis[1:] > axis[0])), dtype=np.intp)\n\n"
  },
  {
    "id" : "1fbd7f09-2775-4970-aff3-dcef835ee0f0",
    "prId" : 7177,
    "prUrl" : "https://github.com/numpy/numpy/pull/7177#pullrequestreview-68516379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68278386-6767-4238-9c94-ac5798c99133",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'd consider this a bug, described in #9728.",
        "createdAt" : "2017-10-11T07:48:43Z",
        "updatedAt" : "2017-10-18T03:43:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fc9e4520b1d00b58a77f28936da2fec2672de83",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +426,430 @@\n    \"\"\"\n    if axis is None or axis == ():\n        return multiarray.count_nonzero(a)\n"
  },
  {
    "id" : "9ed80ae4-46f6-44fc-ae35-75949422d6b9",
    "prId" : 7178,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97e085a8-b4f2-4fb2-b672-4e23def49003",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Can't we just error out already in this branch? I am not sure, will let you pick.\n",
        "createdAt" : "2016-03-06T11:59:45Z",
        "updatedAt" : "2016-03-13T21:23:49Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "bc62f2eb-1d4f-4eb0-afa3-6e404d062d7d",
        "parentId" : "97e085a8-b4f2-4fb2-b672-4e23def49003",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "I feel more comfortable leaving it as a warning to keep the behaviour consistent for both positive and negative numbers.  That was one of the problems brought up in the issue was the response was inconsistent between the two sides.\n",
        "createdAt" : "2016-03-06T12:03:16Z",
        "updatedAt" : "2016-03-13T21:23:49Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      }
    ],
    "commit" : "b03527ded99dd7f6e2c6dd85ca3fdd043398d8bc",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +2191,2195 @@            binwidth = len(binary)\n            outwidth = max(binwidth, width)\n            warn_if_insufficient(width, binwidth)\n            return '1' * (outwidth - binwidth) + binary\n"
  },
  {
    "id" : "5246095e-3fe3-4b04-a450-467d99d2adbb",
    "prId" : 7437,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca2e86be-fc21-4be7-92d5-4126279a5284",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I wonder about stupid objects, but I guess we just shouldn't care, anyone who wants to do `np.full(3, (1, 2))` should be prepared to give `dtype=object`. (could make it `copy=False` just for the kicks)\n",
        "createdAt" : "2016-03-20T14:36:59Z",
        "updatedAt" : "2016-03-20T16:02:48Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "3006a215-9506-4ab2-8626-dfcc43cbda0b",
        "parentId" : "ca2e86be-fc21-4be7-92d5-4126279a5284",
        "authorId" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "body" : "Well, `np.full(3, (1, 2))` (with or without passing `dtype=object`) didn't work and still doesn't work.  The real fun happens when someone write `np.full(3, (1, 2, 3))` though (it used to, and still, returns `array([1, 2, 3])`).\n\nIs there a function equivalent to `array(fill_value).dtype`, but that would actually return `object` when a non-scalar is passed in?  I thought `np.obj2sctype(..., default=object)` would work, but it returns the dtype of a ndarray when a ndarray is passed in (so `np.full(3, np.array([1, 2, 3]))` would still \"fail\").  (By the way I find `obj2sctype's` \"return None if everything fails\" somewhat unpythonic.)\n",
        "createdAt" : "2016-03-20T15:12:42Z",
        "updatedAt" : "2016-03-20T16:02:48Z",
        "lastEditedBy" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "tags" : [
        ]
      },
      {
        "id" : "598d6ca5-1a57-4340-aa12-883205d52703",
        "parentId" : "ca2e86be-fc21-4be7-92d5-4126279a5284",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Forget about this, I guess.... object dtype is funny, and you just have to do it manually. Even noticed we had talked about it before, heh. I guess you are right about `obj2sctype`, it might be trying to recreate the corresponding C-function, no idea....\n",
        "createdAt" : "2016-03-20T15:17:17Z",
        "updatedAt" : "2016-03-20T16:02:48Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "35e8b861-0a3b-453e-a35e-e4ea08bdecfe",
        "parentId" : "ca2e86be-fc21-4be7-92d5-4126279a5284",
        "authorId" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "body" : "So should we consider that `np.full(3, (1, 2, 3)) ==> np.array([1, 2, 3])` (the old behavior, kept in this patch) is not a stopper?  I feel like there should be a way to at least error out there.\n",
        "createdAt" : "2016-03-20T15:24:19Z",
        "updatedAt" : "2016-03-20T16:02:48Z",
        "lastEditedBy" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "tags" : [
        ]
      },
      {
        "id" : "03fc6059-db1c-4ecf-8933-58f725e05902",
        "parentId" : "ca2e86be-fc21-4be7-92d5-4126279a5284",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Maybe there should be an error. `arr.fill` kind of tries this, not sure about all the logic it uses.\n\nIn any case, this is an orthogonal issue, so I think we should ignore it here.\n",
        "createdAt" : "2016-03-20T15:30:57Z",
        "updatedAt" : "2016-03-20T16:02:48Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "dde87e7e-faa2-4e84-bba1-c4f371eaecf7",
        "parentId" : "ca2e86be-fc21-4be7-92d5-4126279a5284",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Really, the only reason I didn't merge it yet, was that I liked our special tag, like ENH:, or actually I guess here MAINT: is better, in the commit message ;).\n",
        "createdAt" : "2016-03-20T15:44:48Z",
        "updatedAt" : "2016-03-20T16:02:48Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a073198864e18dab7fc78653a69175fa6c76e345",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +295,299 @@    \"\"\"\n    if dtype is None:\n        dtype = array(fill_value).dtype\n    a = empty(shape, dtype, order)\n    multiarray.copyto(a, fill_value, casting='unsafe')"
  },
  {
    "id" : "2893d8b4-06de-4258-b85c-427339217526",
    "prId" : 7438,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3aa63547-be15-43d8-a0cd-800061988b21",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Would be good to add a ..versionadded:: thingy here for the sequence of ints (also slightly prefer sequence over tuple).\n",
        "createdAt" : "2016-03-20T11:58:27Z",
        "updatedAt" : "2016-04-02T19:23:25Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "35727753-5d92-4c50-9e3d-2bac499e57e9",
        "parentId" : "3aa63547-be15-43d8-a0cd-800061988b21",
        "authorId" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "body" : "I guess it should really be \"array-like of ints\"?  I kept tuple mostly for consistency with e.g. `np.sum`.\n",
        "createdAt" : "2016-03-20T14:53:45Z",
        "updatedAt" : "2016-04-02T19:23:25Z",
        "lastEditedBy" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "tags" : [
        ]
      },
      {
        "id" : "8dc48c7d-ed58-4ef4-84d8-53117ef40a75",
        "parentId" : "3aa63547-be15-43d8-a0cd-800061988b21",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Oh, OK, no I prefer tuple or sequence of ints. Thought we used sequence mostly, but if we use tuple as well, just keep it as it is. It currently is more an \"array-like of ints\" in implementation, but I don't like that too much to be honest (you could put in a 2x2 array...).\n",
        "createdAt" : "2016-03-20T14:57:03Z",
        "updatedAt" : "2016-04-02T19:23:25Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "91e35d10-59af-4d91-8250-04e36a3a5bf2",
        "parentId" : "3aa63547-be15-43d8-a0cd-800061988b21",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "So to be clear. If you don't mind just ignoring the broadcasting for now, I think I would prefer something like:\n\n```\ntry:\n     axes = tuple(axis)\nexcept:\n    axes = (axis,)\n```\n\nor the inverted `try: operator.index(axis)`. But if the broadcasting is important to you, maybe as is, is just simpler, hmmm.\n",
        "createdAt" : "2016-03-20T15:02:21Z",
        "updatedAt" : "2016-04-02T19:23:25Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "1a2f4b50-d0cb-4b7d-acd4-a3c774c78ae9",
        "parentId" : "3aa63547-be15-43d8-a0cd-800061988b21",
        "authorId" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "body" : "Well, I did not know that iterating over a broadcast object would result in nd-iteration (i.e. a 2x2 axis would get flattened out at that point).\nI still like the broadcasting behavior, though.\n",
        "createdAt" : "2016-03-20T15:29:47Z",
        "updatedAt" : "2016-04-02T19:23:25Z",
        "lastEditedBy" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "tags" : [
        ]
      },
      {
        "id" : "c31d8f40-5fc1-4f5d-8849-7b2a96fc5f30",
        "parentId" : "3aa63547-be15-43d8-a0cd-800061988b21",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I guess you could just check `broadcast(...).shape` to be 0 or 1D and raise an error otherwise, that would seem acceptable to me. Or multiply the length of the tuples manually if they are length 1, but probably that gets annoying.\n",
        "createdAt" : "2016-03-20T15:35:19Z",
        "updatedAt" : "2016-04-02T19:23:25Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "9ea9e542-0208-43de-b421-9d707a7eb59b",
        "parentId" : "3aa63547-be15-43d8-a0cd-800061988b21",
        "authorId" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "body" : "Coming back to the tuple-vs-sequence issue, I just noticed that `sum`, for example, would error out if a non-tuple sequence is passed as the `axis` argument.  Not sure if that means `sum` should be improved or we should only accept tuples to avoid weird edge cases...\n",
        "createdAt" : "2016-03-20T15:57:12Z",
        "updatedAt" : "2016-04-02T19:23:25Z",
        "lastEditedBy" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "tags" : [
        ]
      },
      {
        "id" : "3cd98c5d-a4fc-4798-a05e-f3e5d6386b0c",
        "parentId" : "3aa63547-be15-43d8-a0cd-800061988b21",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I think it does not matter. In most of the python side stuff, we will allow any sequence and sometimes iterable (tuple(iterable) works). I don't think we have to strife for perfect consistency when it comes to tuples vs. sequences vs. iterables for the this type of arguments.\n\nIf you prefer, you can make it a strict tuple here as well, but basically I would pick whatever is easiest.\n",
        "createdAt" : "2016-03-20T16:01:24Z",
        "updatedAt" : "2016-04-02T19:23:25Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "3f40007d-a7fb-4e4d-bb4b-9ce265059410",
        "parentId" : "3aa63547-be15-43d8-a0cd-800061988b21",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "It seems we got side tracked here and forgot about the versionadded tag. It would be good to mention somewhere that roll along multiple axes was added with this tag. IIRC it could either go here, or also into the Notes section.\n",
        "createdAt" : "2016-04-02T18:57:16Z",
        "updatedAt" : "2016-04-02T19:23:25Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "612caca61f82e3e20117ec5917d71fd0f48c42ea",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +1346,1350 @@        The number of places by which elements are shifted.  If a tuple,\n        then `axis` must be a tuple of the same size, and each of the\n        given axes is shifted by the corresponding number.  If an int\n        while `axis` is a tuple of ints, then the same value is used for\n        all given axes."
  }
]