[
  {
    "id" : "f12251c2-73c3-4f00-92eb-3077b4c19750",
    "prId" : 2694,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e310f59-d934-44b5-973c-8b43e750c87d",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "The changes here look correct, but I wanted to note that this function is really strange and confusing. IMO we should deprecate isfortran (and ISFORTRAN) altogether.\n",
        "createdAt" : "2012-10-22T15:27:32Z",
        "updatedAt" : "2012-10-23T12:39:59Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "02ebf8b3e7674a6b8a06636feaa6c761fcdf4e2d",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +585,589 @@    True\n\n    C-ordered arrays evaluate as False even if they are also FORTRAN-ordered.\n\n    >>> np.isfortran(np.array([1, 2], order='FORTRAN'))"
  },
  {
    "id" : "0927fefb-a8f4-401b-8bd8-3338b9dea850",
    "prId" : 3322,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a724c15-cfcd-4e77-9b12-817cff42d78b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Is it OK to have asarray applied after the the `==` operator rather than applying it to the operands?\n",
        "createdAt" : "2013-05-10T22:00:13Z",
        "updatedAt" : "2013-05-13T15:25:13Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "bae64e60-3603-4e4b-b7d2-29aeab4285c5",
        "parentId" : "6a724c15-cfcd-4e77-9b12-817cff42d78b",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yeah, but the asarray can be just removed here, since in both functions a1 and a2 are already converted to arrays before this line.\n",
        "createdAt" : "2013-05-11T17:21:48Z",
        "updatedAt" : "2013-05-13T15:25:14Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "71b9b840-bb84-4f92-be40-d4723b778968",
        "parentId" : "6a724c15-cfcd-4e77-9b12-817cff42d78b",
        "authorId" : "b0e7e584-a9be-4737-9003-4922807a34eb",
        "body" : "@seberg If the two operands are 0d arrays, the == operator will return a bool object instead of an array, in which case the call to all() will fail. I could add a special case for this though, if unnecessarily calling asarray() is too costly.\n\nJust realized I need to handle this properly in array_equal() too.\n",
        "createdAt" : "2013-05-11T17:56:37Z",
        "updatedAt" : "2013-05-13T15:25:14Z",
        "lastEditedBy" : "b0e7e584-a9be-4737-9003-4922807a34eb",
        "tags" : [
        ]
      },
      {
        "id" : "0f40fa44-8161-4053-a86d-69d079c4b623",
        "parentId" : "6a724c15-cfcd-4e77-9b12-817cff42d78b",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Ah, right. The performance of asarray is no worry to me (it just returns immediately since it is already an array anyway). It might be that all works on the np.bool_ object, but I don't care either way then.\n",
        "createdAt" : "2013-05-11T18:05:55Z",
        "updatedAt" : "2013-05-13T15:25:14Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "4792edb0-9935-4912-8bae-2cb68eb21f2d",
        "parentId" : "6a724c15-cfcd-4e77-9b12-817cff42d78b",
        "authorId" : "b0e7e584-a9be-4737-9003-4922807a34eb",
        "body" : "I added asarray call to array_equal too. My reasoning that I stated earlier wasn't quite correct. The == operator actually returns a np.bool_ object for 0d arrays, but returns a False object for two arrays that don't broadcast.\n",
        "createdAt" : "2013-05-13T15:30:22Z",
        "updatedAt" : "2013-05-13T15:30:22Z",
        "lastEditedBy" : "b0e7e584-a9be-4737-9003-4922807a34eb",
        "tags" : [
        ]
      }
    ],
    "commit" : "92503a5cb8bf52321043294b3b8b8811dd1eaee8",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +2180,2184 @@        return False\n    try:\n        return bool(asarray(a1 == a2).all())\n    except ValueError:\n        return False"
  },
  {
    "id" : "074485f3-1b76-46b3-9f16-7026bf9c5d2b",
    "prId" : 4338,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40e968d2-42fa-4012-8366-768797dca7b7",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Could also use `axisa = axisb = axisc = axis` but not important (not sure what PEP8 says about it).\n",
        "createdAt" : "2014-02-21T15:14:12Z",
        "updatedAt" : "2014-02-24T19:33:26Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d152aff963cc325a32c65e4dd1b0e2e87fba4b2",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1496,1500 @@    \"\"\"\n    if axis is not None:\n        axisa, axisb, axisc = (axis,) * 3\n    a = asarray(a)\n    b = asarray(b)"
  },
  {
    "id" : "e8f0ed7e-aad5-47f2-8ae9-7e6292e12c9c",
    "prId" : 4338,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18ef6c57-f4fc-41c6-b60f-d253e772ea50",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "This is fine, just to make sure. negative axes are supported, right?\n",
        "createdAt" : "2014-02-21T15:19:10Z",
        "updatedAt" : "2014-02-24T19:33:26Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "e11c80fb-e10a-437c-8fb2-cf0f3e36f847",
        "parentId" : "18ef6c57-f4fc-41c6-b60f-d253e772ea50",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "Yes, this code works fine with reasonable inputs. What I haven't tried are out of bounds axes. And I am afraid that, for `axisc` at least, they will be silently clipped to the end of the array. Will test it and add something to the tests.\n",
        "createdAt" : "2014-02-21T15:26:01Z",
        "updatedAt" : "2014-02-24T19:33:26Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "ddf26130-901e-4977-aefe-570c9e3b81c5",
        "parentId" : "18ef6c57-f4fc-41c6-b60f-d253e772ea50",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Why clipped? rollaxis seems to throw an error?\n",
        "createdAt" : "2014-02-21T15:28:33Z",
        "updatedAt" : "2014-02-24T19:33:26Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "0dba547c-601c-483b-ae5e-d95b9643dcb3",
        "parentId" : "18ef6c57-f4fc-41c6-b60f-d253e772ea50",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "Yes, you are right... I got confused by the fact that the condition for the `start` (i.e the second) axis is `<= ndim`, not the typical `< ndim`. Is it worth adding a check in the tests.\n",
        "createdAt" : "2014-02-21T15:33:17Z",
        "updatedAt" : "2014-02-24T19:33:26Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d152aff963cc325a32c65e4dd1b0e2e87fba4b2",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +1522,1526 @@                return cp\n            else:\n                # This works because we are moving the last axis\n                return rollaxis(cp, -1, axisc)\n        else:"
  }
]