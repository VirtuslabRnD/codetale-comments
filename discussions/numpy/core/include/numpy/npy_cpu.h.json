[
  {
    "id" : "8d5f0b41-3eef-4112-a73a-4afcb53ef921",
    "prId" : 18065,
    "prUrl" : "https://github.com/numpy/numpy/pull/18065#pullrequestreview-562062840",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47b3e686-6acf-4bc0-95c5-7cd84ace7b12",
        "parentId" : null,
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "@Qiyu8, Its should be a simple comment not a case study, and the current one not accurate enough. the comment can be simple as following:\r\n```C\r\n// Except for the following architectures, memory access is limited to the natural\r\n// alignment of data types otherwise it may lead to bus error or performance regression.\r\n```\r\nthe new #def `NPY_STRONG_ALIGNMENT_REQUIRED` is too long, three words is enough `NPY_ALIGNMENT_REQUIRED` or `NPY_STRONG_ALIGNMENT`",
        "createdAt" : "2021-01-02T07:35:39Z",
        "updatedAt" : "2021-01-05T02:35:09Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      },
      {
        "id" : "b04fd893-2680-440a-a97c-89b8435d48a7",
        "parentId" : "47b3e686-6acf-4bc0-95c5-7cd84ace7b12",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Sorry, I tried to shut down a bit over the break. I agree with Sayed, we don't need a list of how things can go wrong or how specific CPUs behave (it is interesting though!).\r\n\r\nThe more important thing is to write a short comment about where it is *safe* to do unaligned access (i.e. if you put a `if (!NPY_STRONG_ALIGNMENT_REQUIRED) {code}` what are you allowed to do in `code`? Are there remaining constraints about unaligned access?\r\n\r\nEDIT: You could include the URL to this PR so that someone interested can find it!",
        "createdAt" : "2021-01-03T20:03:49Z",
        "updatedAt" : "2021-01-05T02:35:09Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "3718b2dc-a5b8-4bc1-ab99-9479b88fc780",
        "parentId" : "47b3e686-6acf-4bc0-95c5-7cd84ace7b12",
        "authorId" : "16f8768b-62bb-468a-bef5-f7adfae4fef5",
        "body" : "I will choose the name `NPY_ALIGNMENT_REQUIRED`,  which represents only aligned memory is allowed to access. ",
        "createdAt" : "2021-01-05T02:27:57Z",
        "updatedAt" : "2021-01-05T02:35:09Z",
        "lastEditedBy" : "16f8768b-62bb-468a-bef5-f7adfae4fef5",
        "tags" : [
        ]
      },
      {
        "id" : "aa5e754f-4cc5-430f-9417-10d4a2d2dc44",
        "parentId" : "47b3e686-6acf-4bc0-95c5-7cd84ace7b12",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Thanks. About that auto vectorization note in the comment? I do not have to be worried about it?",
        "createdAt" : "2021-01-05T04:09:30Z",
        "updatedAt" : "2021-01-05T04:09:30Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "bd64663b-bfcc-4fe3-88a5-696ecbdd2a71",
        "parentId" : "47b3e686-6acf-4bc0-95c5-7cd84ace7b12",
        "authorId" : "16f8768b-62bb-468a-bef5-f7adfae4fef5",
        "body" : "`NPY_USE_UNALIGNED_ACCESS` already disabled no matter auto-vectorization is enabled or not, I will reconstruct [lowlevel_strided_loops.c.src](https://github.com/numpy/numpy/blob/master/numpy/core/src/multiarray/lowlevel_strided_loops.c.src) by using universal intrinsics so that `NPY_USE_UNALIGNED_ACCESS ` can enabled when -O3 is specifiled, but that's not the point of this PR.",
        "createdAt" : "2021-01-05T08:05:44Z",
        "updatedAt" : "2021-01-05T08:05:44Z",
        "lastEditedBy" : "16f8768b-62bb-468a-bef5-f7adfae4fef5",
        "tags" : [
        ]
      },
      {
        "id" : "5f8bb10b-66d9-4cc3-b78b-ae9ed13cb454",
        "parentId" : "47b3e686-6acf-4bc0-95c5-7cd84ace7b12",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I realize that it is disabled, my question was just to make sure that the comment doesn't somehow apply to the new code as well, since I am not quite sure how it would differ from the one in `lowlevel_strided_loops.c.src`.\r\n\r\nBtw. don't let it stop you, but that file will need at least two times bigger maintenance (one already open, the other is fixing most function signatures).  That should be pretty orthogonal to anything you do though, making sure casts are vectorized seems definitely worth it.",
        "createdAt" : "2021-01-05T16:54:45Z",
        "updatedAt" : "2021-01-05T16:54:45Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "92bbfcff-b73e-4b05-93d8-1ae4406a9e8b",
        "parentId" : "47b3e686-6acf-4bc0-95c5-7cd84ace7b12",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Anyway, I am happy with this, feel free to merge. I just still don't quite understand the autovectorization comment unless it is specific to using `NPY_GCC_UNROLL_LOOPS`.",
        "createdAt" : "2021-01-05T19:18:04Z",
        "updatedAt" : "2021-01-05T19:18:04Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f60217f1b9c34c6c8e268f91e428bab8c2bbbd55",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +116,120 @@ * For more details about unaligned access, see https://www.kernel.org/doc/Documentation/unaligned-memory-access.txt.\n*/\n#if defined(NPY_CPU_X86) || defined(NPY_CPU_AMD64) || defined(__aarch64__) || defined(__powerpc64__)\n    #define NPY_ALIGNMENT_REQUIRED 0\n#endif"
  },
  {
    "id" : "11ab05cd-e9bd-48da-89f4-0c28d6e39629",
    "prId" : 19513,
    "prUrl" : "https://github.com/numpy/numpy/pull/19513#pullrequestreview-714299716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbc953e1-97f7-46f5-97cd-b063de49140f",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "```suggestion\r\n#elif defined(__arm__) || defined(__aarch64__) || defined(_M_ARM64)\r\n    /* _M_ARM64 is defined in MSVC for ARM64 compilation on Windows */\r\n```",
        "createdAt" : "2021-07-25T07:16:17Z",
        "updatedAt" : "2021-07-25T07:16:18Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "1c95c100-a26c-4af8-bba4-206ef2e80730",
        "parentId" : "fbc953e1-97f7-46f5-97cd-b063de49140f",
        "authorId" : "f4d424a4-4522-42ee-8164-887ef03f9498",
        "body" : "Committed suggestion",
        "createdAt" : "2021-07-25T10:07:31Z",
        "updatedAt" : "2021-07-25T10:07:31Z",
        "lastEditedBy" : "f4d424a4-4522-42ee-8164-887ef03f9498",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ab6a59e793af0388675f9f76610344687b4f2f1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +64,68 @@#elif defined(__alpha__)\n    #define NPY_CPU_ALPHA\n#elif defined(__arm__) || defined(__aarch64__) || defined(_M_ARM64)\n    /* _M_ARM64 is defined in MSVC for ARM64 compilation on Windows */\n    #if defined(__ARMEB__) || defined(__AARCH64EB__)"
  }
]