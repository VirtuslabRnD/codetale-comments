[
  {
    "id" : "40864a97-bf20-4ba7-b661-91b9ed551bf2",
    "prId" : 3594,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebbb4676-dc6d-4bbd-a10d-52dac9ca2227",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Does MSVC have something equivalent?\n",
        "createdAt" : "2013-08-10T02:04:48Z",
        "updatedAt" : "2013-08-10T02:04:48Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "02bf6e13-4acf-467e-b727-0750a3fcb850",
        "parentId" : "ebbb4676-dc6d-4bbd-a10d-52dac9ca2227",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "I do not care about that platform enough to check ;)\n",
        "createdAt" : "2013-08-10T16:09:29Z",
        "updatedAt" : "2013-08-10T16:09:29Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "0b34d12f-7bef-4af6-a29a-a6d9085c2046",
        "parentId" : "ebbb4676-dc6d-4bbd-a10d-52dac9ca2227",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like no, but the first block in the `if` is treated as 'likely'. http://stackoverflow.com/questions/5075164/how-to-hint-to-visual-c-compiler-optimizer-that-a-specific-branch-of-an-if-sta\n",
        "createdAt" : "2013-08-10T16:46:15Z",
        "updatedAt" : "2013-08-10T16:46:15Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e91acdb17b2a9c65a0fb9b7a97764aa375819784",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +29,33 @@ * the intrinsic\n */\n#ifdef HAVE___BUILTIN_EXPECT\n#define NPY_LIKELY(x) __builtin_expect(!!(x), 1)\n#define NPY_UNLIKELY(x) __builtin_expect(!!(x), 0)"
  },
  {
    "id" : "d2ec95e7-7077-4877-9a66-1c002333b5aa",
    "prId" : 4637,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "240b0fed-9fe2-443e-9007-4a20bf5ede56",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Why does the compiler remove the check?\n",
        "createdAt" : "2014-04-24T20:54:03Z",
        "updatedAt" : "2014-05-01T13:40:12Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "d69baf6a-b06c-4d13-81b1-f9b239435d38",
        "parentId" : "240b0fed-9fe2-443e-9007-4a20bf5ede56",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "its just the way gcc behaves, you kind of declare a null input as undefined behavior and gcc is allowed to optimize that away. The problem is gcc does not tell you that the check contradicts the attribute, I bet you can find plenty gcc bug reports about that.\n",
        "createdAt" : "2014-04-24T21:08:34Z",
        "updatedAt" : "2014-05-01T13:40:12Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "64af3fdd0fac08e01877a56faff5f3c6d4ac3a1b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +29,33 @@ * mark an argument (starting from 1) that must not be NULL and is not checked\n * DO NOT USE IF FUNCTION CHECKS FOR NULL!! the compiler will remove the check\n */\n#ifdef HAVE_ATTRIBUTE_NONNULL\n#define NPY_GCC_NONNULL(n) __attribute__((nonnull(n)))"
  },
  {
    "id" : "c6cb8501-dcea-4689-b911-23f255d91d62",
    "prId" : 17102,
    "prUrl" : "https://github.com/numpy/numpy/pull/17102#pullrequestreview-558294894",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0133529-d78e-427c-8233-2d1f9ba3b062",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I just noticed this addition. Is this the same (idea) as `NPY_CPU_HAVE_UNALIGNED_ACCESS`, which we do already use in a handful of places?  I am a bit worried of duplicating this logic, especially since this seems to assume that all CPUs have unaligned access instead of the opposite of assuming x86 and amd64 always supporting unaligned access?",
        "createdAt" : "2020-12-24T00:02:57Z",
        "updatedAt" : "2020-12-24T00:02:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "12ee60d5-8d64-427a-b8c5-2d0b850641fd",
        "parentId" : "f0133529-d78e-427c-8233-2d1f9ba3b062",
        "authorId" : "16f8768b-62bb-468a-bef5-f7adfae4fef5",
        "body" : "Thanks for pointing this out, in this case, only `armv7 `needs aligned access, which assume that other CPUs supporting unaligned access, so `NPY_CPU_HAVE_UNALIGNED_ACCESS ` and `NPY_STRONG_ALIGNMENT ` are like two sides of a coin, you are right about the duplicating logic, will integrate together in follow-up PR.",
        "createdAt" : "2020-12-24T01:28:10Z",
        "updatedAt" : "2020-12-24T01:28:10Z",
        "lastEditedBy" : "16f8768b-62bb-468a-bef5-f7adfae4fef5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b156231e40e280658dd1d6582d1d9734e0f56b09",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +17,21 @@#if !defined(NPY_STRONG_ALIGNMENT)\n#define NPY_STRONG_ALIGNMENT 0\n#endif\n\n// compile time environment variables"
  },
  {
    "id" : "9e6c658c-369c-46c6-b1fd-1505e2c6563c",
    "prId" : 17791,
    "prUrl" : "https://github.com/numpy/numpy/pull/17791#pullrequestreview-540382540",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "094e5624-424a-4999-bb0b-4f224b78c8ac",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I added `NPY_USE_NEW_CASTINGIMPL` in the meantime. We could probably also include it in `numpy/core/setup.py` so that it is all in one place (although it doesn't matter, easy enough to figure out if CI fails).",
        "createdAt" : "2020-11-28T15:34:49Z",
        "updatedAt" : "2020-11-28T15:34:49Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "cba1d6f1cab31b1dca0e7ec7e6ee40ead786ca08",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +17,21 @@#ifndef NPY_RELAXED_STRIDES_DEBUG\n    #define NPY_RELAXED_STRIDES_DEBUG 0\n#endif\n\n/*"
  }
]