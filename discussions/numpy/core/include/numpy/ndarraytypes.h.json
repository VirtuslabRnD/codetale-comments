[
  {
    "id" : "7c8e5173-4b54-4333-b4ac-976b4dac0e45",
    "prId" : 87,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "900e45d1-9032-4fe8-9d31-61f13dd8e864",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could these go in npy_common.h?\n",
        "createdAt" : "2011-06-15T05:04:07Z",
        "updatedAt" : "2011-06-16T19:50:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "7c20fdc4-f550-436b-8e73-b32186e35fad",
        "parentId" : "900e45d1-9032-4fe8-9d31-61f13dd8e864",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "Yeah, that sounds fine. I'm wanting to rename away from the 'frequency' nomenclature as well.\n",
        "createdAt" : "2011-06-15T15:07:58Z",
        "updatedAt" : "2011-06-16T19:50:36Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7d59aef203ebf25b268ceaccfa1be45237b0df",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +231,235 @@\ntypedef enum {\n        NPY_FR_Y, /* Years */\n        NPY_FR_M, /* Months */\n        NPY_FR_W, /* Weeks */"
  },
  {
    "id" : "6bbc44bc-e490-4d60-857f-03c180cee019",
    "prId" : 87,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0870359d-250b-41e4-a9f2-62f9536c32a9",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I've moved that into npy_common for the sort library. Looks like I'll need to do some merging ;)\n",
        "createdAt" : "2011-06-15T05:05:34Z",
        "updatedAt" : "2011-06-16T19:50:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b54f8db6-acbf-47fc-bc83-8920e6219a65",
        "parentId" : "0870359d-250b-41e4-a9f2-62f9536c32a9",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "I want to do a relatively invasive header shuffle at some point towards managing future ABI compatibility, we'll have to make sure not to step on each others toes with that.\n",
        "createdAt" : "2011-06-15T15:10:40Z",
        "updatedAt" : "2011-06-16T19:50:36Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d7d59aef203ebf25b268ceaccfa1be45237b0df",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +292,296 @@\n/*\n * This is to typedef npy_intp to the appropriate pointer size for\n * this platform.  Py_intptr_t, Py_uintptr_t are defined in pyport.h.\n */"
  },
  {
    "id" : "26e2c28f-cd37-476a-817d-2755d83f69a8",
    "prId" : 116,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "263911b7-ed64-4ab9-b30d-72098baaff3b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I believe tags are in their own namespace, so the tag prefix isn't really needed. Adding '_t' to the typedef is more commonly done.\n",
        "createdAt" : "2011-07-20T02:24:52Z",
        "updatedAt" : "2011-07-26T17:12:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c1e3894d-b21b-459a-a949-64a6662efc4d",
        "parentId" : "263911b7-ed64-4ab9-b30d-72098baaff3b",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "I haven't noticed any consistent convention in NumPy with regards to this. I agree that typedefs like npy_int32 should be npy_int32_t as you suggest, but there are lots of things to change to make it consistent. This is the kind of thing that would go in a NumPy coding standards document somewhere...\n",
        "createdAt" : "2011-07-20T14:36:27Z",
        "updatedAt" : "2011-07-26T17:12:40Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "affea42d886e8233fdd6f3c5760708e3a9e9b1b8",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +617,621 @@ */\n#ifdef NPY_NO_DEPRECATED_API\ntypedef struct tagPyArrayObject {\n        PyObject_HEAD\n} PyArrayObject;"
  },
  {
    "id" : "8cf433ad-3370-41c1-9cdf-5e8b703ce08d",
    "prId" : 116,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06a23291-64e1-4fcb-b84d-a5ed48f790b0",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Now I contradict myself and wonder if these should be inline functions. Having a typecheck on the 'it' variable could be helpful.\n",
        "createdAt" : "2011-07-20T02:27:46Z",
        "updatedAt" : "2011-07-26T17:12:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "21f48f51-0a31-4b77-b4a4-87e13627068a",
        "parentId" : "06a23291-64e1-4fcb-b84d-a5ed48f790b0",
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "It's unfortunate that all the NumPy array creation functions return PyObject\\* instead of PyArrayObject*.\n",
        "createdAt" : "2011-07-20T14:38:41Z",
        "updatedAt" : "2011-07-26T17:12:40Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "affea42d886e8233fdd6f3c5760708e3a9e9b1b8",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +971,975 @@}\n\n#define _PyArray_ITER_NEXT2(it) { \\\n        if ((it)->coordinates[1] < (it)->dims_m1[1]) { \\\n                (it)->coordinates[1]++; \\"
  },
  {
    "id" : "9745460c-74e9-4b1d-9de0-571206b3161b",
    "prId" : 451,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f74ab02f-1d74-4dd3-86e5-b4d79703b67b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Maybe NPY_UNSAFE_CASTING_WARN ?\n\nAlso the comment formatting should be\n\n```\n/*\n * blah\n */\n```\n",
        "createdAt" : "2012-09-20T22:17:10Z",
        "updatedAt" : "2012-09-20T23:25:38Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f18987a69c297b5602b00c22b9759d2ece4a7bf1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +206,210 @@         * release, see below\n         * */\n        NPY_INTERNAL_UNSAFE_CASTING_BUT_WARN_UNLESS_SAME_KIND = 100,\n} NPY_CASTING;\n"
  },
  {
    "id" : "7d5a1379-be0c-4cd5-9d7b-b4096acc08dd",
    "prId" : 3527,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee81f261-8fb9-40f9-a58a-07879f6e4611",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This is harmless, but I'd probably omit it on grounds of overkill.\n",
        "createdAt" : "2013-08-01T00:34:48Z",
        "updatedAt" : "2013-08-01T22:23:25Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "f21c6745-cada-4d72-8d50-304e046da014",
        "parentId" : "ee81f261-8fb9-40f9-a58a-07879f6e4611",
        "authorId" : "3e976b32-2704-45fd-84e7-9d4b44e1e692",
        "body" : "Maybe it's not overkill if the code rests for a while, someone else defines NPY_DEPRECATED_INCLUDES for whatever reason and is then puzzled why it doesn't work. As this is really a minor question (no difference in the compiled code), I don't change this â€“ unless more people comment and form a majority vote, of course.\n",
        "createdAt" : "2013-08-01T22:21:42Z",
        "updatedAt" : "2013-08-01T22:23:25Z",
        "lastEditedBy" : "3e976b32-2704-45fd-84e7-9d4b44e1e692",
        "tags" : [
        ]
      }
    ],
    "commit" : "62282a90424f1643ea50375e53c326af48fee898",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1738,1742 @@ * npy_*_*_deprecated_api.h are only included from here and nowhere else.\n */\n#ifdef NPY_DEPRECATED_INCLUDES\n#error \"Do not use the reserved keyword NPY_DEPRECATED_INCLUDES.\"\n#endif"
  },
  {
    "id" : "d8c19735-c4b5-4b5f-a94f-ad037a5248de",
    "prId" : 3527,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7320cfba-7996-4ac8-987b-1b1874867ce6",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I short comment before this line would be appropriate.\n",
        "createdAt" : "2013-08-01T00:35:16Z",
        "updatedAt" : "2013-08-01T22:23:25Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "62282a90424f1643ea50375e53c326af48fee898",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1741,1745 @@#error \"Do not use the reserved keyword NPY_DEPRECATED_INCLUDES.\"\n#endif\n#define NPY_DEPRECATED_INCLUDES\n#if !defined(NPY_NO_DEPRECATED_API) || \\\n    (NPY_NO_DEPRECATED_API < NPY_1_7_API_VERSION)"
  },
  {
    "id" : "488e58bd-0cf4-40a9-8c80-421414500b8d",
    "prId" : 3798,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2dfbfa39-b423-4138-b353-4517f6efb6c9",
        "parentId" : null,
        "authorId" : "605dc99f-e6a8-4691-8567-69df7bedb615",
        "body" : "@seberg can you try to keep the existing struct ABI ? If possible, we'd like to keep ABI compatibility in the 1.x branch.\n",
        "createdAt" : "2013-10-28T14:18:07Z",
        "updatedAt" : "2014-02-07T14:07:27Z",
        "lastEditedBy" : "605dc99f-e6a8-4691-8567-69df7bedb615",
        "tags" : [
        ]
      },
      {
        "id" : "e054c8c0-a22e-4ef9-aade-4b595a546510",
        "parentId" : "2dfbfa39-b423-4138-b353-4517f6efb6c9",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I hope I did keep everything ABI compatible (well everything that is reasonably to use). This is used in two different tests for `ufunc.at` and another one more specific, but as of yet not tested for ABI, only for API compatibility. I am aware it still needs checking. I think Thaeno is probably the only project using this API (it was only exposed in 1.8. and that is not even officially released yet).\n",
        "createdAt" : "2013-10-28T14:25:33Z",
        "updatedAt" : "2014-02-07T14:07:27Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "9858e9af-84e5-4ea2-81a8-d0ec423c514a",
        "parentId" : "2dfbfa39-b423-4138-b353-4517f6efb6c9",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "this structure was already exposed in at least 1.7 possibly much earlier.\n",
        "createdAt" : "2013-10-28T14:51:46Z",
        "updatedAt" : "2014-02-07T14:07:27Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "9ae66391-e9a5-46b7-98a3-ebb1844b2002",
        "parentId" : "2dfbfa39-b423-4138-b353-4517f6efb6c9",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Maybe the structure, but MapIterArray was not. So nobody could have possibly used it before 1.8.x (though I admit in master it has been possibly a year).\n",
        "createdAt" : "2013-10-28T14:58:52Z",
        "updatedAt" : "2014-02-07T14:07:27Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "09360dfb-26e0-4913-bc67-cc6f77a8d497",
        "parentId" : "2dfbfa39-b423-4138-b353-4517f6efb6c9",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "over which functions is it used in 1.8? I could only find PyArray_MapIterNew which is not exposed.\n\nif it is private we should move it out of the public header into a private one.\n",
        "createdAt" : "2013-10-28T15:08:31Z",
        "updatedAt" : "2014-02-07T14:07:27Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "30838cef-8edb-44e7-84d9-a806545316e3",
        "parentId" : "2dfbfa39-b423-4138-b353-4517f6efb6c9",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "It can be used via `PyArray_MapIterArray`, `PyArray_MapIterNext`, `PyArray_MapIterReset` (maybe) and `PyArray_MapIterSwapAxes`. It is used for `ufunc.at` and the `inplace_add` test in `multiarray_tests.c.src`. The fields that are used there, should be compatible, so unless someone is naughty enough to not use `PyArray_MapIterNext` to iterate, ABI compatibility should be there.\n",
        "createdAt" : "2013-10-28T15:15:21Z",
        "updatedAt" : "2014-02-07T14:07:27Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "626adaf6-a7bc-490c-8241-3c423574d1f4",
        "parentId" : "2dfbfa39-b423-4138-b353-4517f6efb6c9",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "@charris should we still make the structure private for 1.8 to be on the safe side?\n",
        "createdAt" : "2013-10-28T15:21:15Z",
        "updatedAt" : "2014-02-07T14:07:27Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "71bf91f7-8af7-4891-8cca-4969c64e72f5",
        "parentId" : "2dfbfa39-b423-4138-b353-4517f6efb6c9",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "The problem is that multiarray and ufunc are different modules, and only\nallowed to communicate via the public api.\n\nIMHO this creates all kinds of ugly distortions of the public api, and\nsooner or later we should merge these modules together so they can\ncollaborate more directly. But that's not happening in 1.8 ;-)\nOn 28 Oct 2013 15:21, \"Julian Taylor\" notifications@github.com wrote:\n\n> In numpy/core/include/numpy/ndarraytypes.h:\n> \n> > @@ -1270,33 +1291,71 @@ struct PyArrayIterObject_tag {\n> >          npy_intp              index;                   /\\* current index _/\n> >          int                   nd;                      /_ number of dims _/\n> >          npy_intp              dimensions[NPY_MAXDIMS]; /_ dimensions */\n> > -        PyArrayIterObject     _iters[NPY_MAXDIMS];     /_ index object\n> > -                                                          iterators */\n> > -        PyArrayIterObject     _ait;                    /_ flat Iterator for\n> > -                                                          underlying array */\n> > -        NpyIter               _outer;                  /_ index objects\n> \n> @charris https://github.com/charris should we still make the structure\n> private for 1.8 to be on the safe side?\n> \n> â€”\n> Reply to this email directly or view it on GitHubhttps://github.com/numpy/numpy/pull/3798/files#r7251223\n> .\n",
        "createdAt" : "2013-10-28T15:42:38Z",
        "updatedAt" : "2014-02-07T14:07:27Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "4a1c26c2-0383-4df0-bbd1-a4d678600eb2",
        "parentId" : "2dfbfa39-b423-4138-b353-4517f6efb6c9",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@juliantaylor That would make me nervous and another rc would probably be indicated. The problem with changes in the C code is that it can be difficult to predict the consequences. In this case, did anyone use this structure? Sebastian mentions theano as one possibility. OTOH, if there is good reason to believe that no one depends on direct access to the structure, we could probably move it or even deprecate direct access in 1.9. The latter might be the best way to go if the structure has really been public since 1.7.\n",
        "createdAt" : "2013-10-28T16:18:56Z",
        "updatedAt" : "2014-02-07T14:07:27Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "27d1e1e7-cca7-4f70-a209-fa0115959984",
        "parentId" : "2dfbfa39-b423-4138-b353-4517f6efb6c9",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "That said, there are enough changes in 1.8.x that I'm on the edge of thinking another rc is needed in any case, this would push me over that edge.\n",
        "createdAt" : "2013-10-28T16:24:45Z",
        "updatedAt" : "2014-02-07T14:07:27Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c41cfabe-3cfa-45ae-bcbf-27cfb00131fd",
        "parentId" : "2dfbfa39-b423-4138-b353-4517f6efb6c9",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Well, at this point the whole \"public api\" is not even documented... Flagging it as experimental might be best and should mean that thaeno doesn't need to worry about anything (I don't know what they use it for).\n",
        "createdAt" : "2013-10-28T16:55:43Z",
        "updatedAt" : "2014-02-07T14:07:27Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "30b078e5-26e5-496d-83e4-93a0219a2f25",
        "parentId" : "2dfbfa39-b423-4138-b353-4517f6efb6c9",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Sounds like we should leave 1.8 alone and figure out what to do for 1.9. That will provide more time and the deprecation mechanism provides a way to hide the structure in the future if that seems appropriate. At a minimum we should ping theano to see what they need.\n",
        "createdAt" : "2013-10-28T17:04:06Z",
        "updatedAt" : "2014-02-07T14:07:27Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "febe6617-0ce1-479b-87ea-c997d149cedb",
        "parentId" : "2dfbfa39-b423-4138-b353-4517f6efb6c9",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "for 1.8 we could at least deprecate PyArrayMapIterObject via comments in the code to avoid that we get new code using it:\nWhat about these:\nPyArrayIterObject\nPyArrayMultiIterObject\nPyArrayNeighborhoodIterObject\ncan they be deprecated? the first two are probably more commonly used so deprecation of direct access might be premature without existing get/set methods.\n",
        "createdAt" : "2013-10-29T18:27:48Z",
        "updatedAt" : "2014-02-07T14:07:27Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "d931df7b-4893-4cac-8f1d-d2663021f135",
        "parentId" : "2dfbfa39-b423-4138-b353-4517f6efb6c9",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I've already tagged 1.8 and am waiting for Ralf to do the binaries. If we get this figured out, we could maybe do a 1.8.1, but I'd rather figure out something for 1.9. This doesn't fall into the category of a bug fix and it isn't clear to me that we yet have a consensus on what should be done, or for that matter, what has already been done. For instance, IIRC, PyArrayNeighborhoodIterObject goes back several releases. All that makes me loathe to stop the 1.8 process at this point.\n",
        "createdAt" : "2013-10-29T18:44:58Z",
        "updatedAt" : "2014-02-07T14:07:27Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "0a0aa68f-73a5-44cf-a4e4-1907393b6196",
        "parentId" : "2dfbfa39-b423-4138-b353-4517f6efb6c9",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "yes lets figure something out for 1.9 and not delay 1.8 any longer.\n",
        "createdAt" : "2013-10-29T19:01:13Z",
        "updatedAt" : "2014-02-07T14:07:27Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "3b8ef730-ca59-4a32-aa57-6060ad3dfb09",
        "parentId" : "2dfbfa39-b423-4138-b353-4517f6efb6c9",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I know, nobody has really time for this probably :). But I just tested the `multiarray_tests.test_inplace_add` compiled with master and ran it with this branch and it works. So I am pretty confident that it is binary compatible for the usage which makes sense, unless there may be some subtleties on other architectures or compilers or so.\n",
        "createdAt" : "2013-12-18T12:46:34Z",
        "updatedAt" : "2014-02-07T14:07:27Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "32a27cb3-9c2f-4780-b43f-080a503266ba",
        "parentId" : "2dfbfa39-b423-4138-b353-4517f6efb6c9",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@juliantaylor @seberg \n\n```\nPyArrayIterObject\nPyArrayMultiIterObject\nPyArrayNeighborhoodIterObject\n```\n\nI haven't checked the others yet, but it looks like PyArrayNeighborhoodIterObject already has functions for accesses, so we could move it into a deprecated file I think. That should not break anyone's code unless we start moving the internals around, at which point folks will probably need to recompile as the functions are inline, i.e., the accesses to struct internals will still be there. So we can guarantee API but not ABI. That is already the case for PyArrayObject, but I don't know if that is widely publicised. It may be that we need to make that a policy, because otherwise we are frozen.\n",
        "createdAt" : "2014-02-02T06:22:59Z",
        "updatedAt" : "2014-02-07T14:07:27Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d554c2954b82b120ce77c1fd9a74c4deb85503a3",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1276,1280 @@        int                   nd;                      /* number of dims */\n        npy_intp              dimensions[NPY_MAXDIMS]; /* dimensions */\n        NpyIter               *outer;                  /* index objects\n                                                          iterator */\n        void                  *unused[NPY_MAXDIMS - 2];"
  }
]