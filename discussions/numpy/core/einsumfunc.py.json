[
  {
    "id" : "df29493a-baf9-4055-b596-048b4de73b86",
    "prId" : 5488,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8313918-8674-490d-a28f-a18706a08da5",
        "parentId" : null,
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "An example would be very helpful for this function\n",
        "createdAt" : "2015-11-28T02:57:34Z",
        "updatedAt" : "2016-09-26T16:22:08Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "92b2ecb5-7715-4f56-8089-2b3a0dc13c9d",
        "parentId" : "b8313918-8674-490d-a28f-a18706a08da5",
        "authorId" : "a39dcf66-f9ef-4c36-b512-5a93e1896cdf",
        "body" : "Can do; however, this is simply a helper function. From reading the numpy code these types of functions typically do not have any documentation associated with them. Is there a good example I can view?\n",
        "createdAt" : "2015-11-28T16:01:45Z",
        "updatedAt" : "2016-09-26T16:22:08Z",
        "lastEditedBy" : "a39dcf66-f9ef-4c36-b512-5a93e1896cdf",
        "tags" : [
        ]
      },
      {
        "id" : "8bdcd56e-2ac8-4d0a-82f8-ca24dad7f001",
        "parentId" : "b8313918-8674-490d-a28f-a18706a08da5",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "This is just my personal preference style. I like what @mrocklin does in dask, e.g., https://github.com/blaze/dask/blob/c4df983f03eeac02b5b99ba0628b2ead84b42a17/dask/array/core.py#L1204\n\nIn my opinion, examples can actually be better than full numpydoc style documentation of arguments. I was scratching my head a little bit to understand the difference between the \"resulting\" and \"current\" contraction :).\n",
        "createdAt" : "2015-11-30T05:21:51Z",
        "updatedAt" : "2016-09-26T16:22:08Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c788f4e7f6f5af6b1c3cda98388768912349b46",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +43,47 @@\n\ndef _find_contraction(positions, input_sets, output_set):\n    \"\"\"\n    Finds the contraction for a given set of input and output sets."
  },
  {
    "id" : "9c4865af-79ca-49b9-a1b6-f5e3a8a3e127",
    "prId" : 5488,
    "prUrl" : "https://github.com/numpy/numpy/pull/5488#pullrequestreview-1754348",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae4c0fb0-27a3-4f5d-aff9-e53c3ffe46ae",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Need default documented.\n",
        "createdAt" : "2016-09-25T20:12:34Z",
        "updatedAt" : "2016-09-26T16:22:08Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "cd4cd8c7-ac35-4c9c-b9c4-8e8940587665",
        "parentId" : "ae4c0fb0-27a3-4f5d-aff9-e53c3ffe46ae",
        "authorId" : "a39dcf66-f9ef-4c36-b512-5a93e1896cdf",
        "body" : "@charris I could not find another place were casting had a default or where there was extra text after a list. So I hope the following is parsed correctly. Should the default be added to other casting descriptions as well?\n",
        "createdAt" : "2016-09-26T16:25:40Z",
        "updatedAt" : "2016-09-26T16:25:40Z",
        "lastEditedBy" : "a39dcf66-f9ef-4c36-b512-5a93e1896cdf",
        "tags" : [
        ]
      },
      {
        "id" : "de5a9864-5aa7-4536-ab09-c3105996d31c",
        "parentId" : "ae4c0fb0-27a3-4f5d-aff9-e53c3ffe46ae",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The default is `'safe'`, implemented in `array_einsum`. Not sure what to say for the `dtype` argument, maybe smallest common type compatible with safe casting.\n\nWe try to document the default values of all optional arguments, although we evidently haven't been perfect about that. So the answer to the last guestion is \"yes\".\n",
        "createdAt" : "2016-09-26T17:32:49Z",
        "updatedAt" : "2016-09-26T17:38:38Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4a896cf1-6cff-4b22-afd1-7243c85ae224",
        "parentId" : "ae4c0fb0-27a3-4f5d-aff9-e53c3ffe46ae",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "In my opinion it's actually a cleaner style to document default values only in function signatures. Otherwise, it's easy to get out of sync.\n",
        "createdAt" : "2016-09-26T17:34:17Z",
        "updatedAt" : "2016-09-26T17:34:17Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "00faff95-85b1-48ff-b8eb-78fcb36ec7b1",
        "parentId" : "ae4c0fb0-27a3-4f5d-aff9-e53c3ffe46ae",
        "authorId" : "a39dcf66-f9ef-4c36-b512-5a93e1896cdf",
        "body" : "If we added defaults to the text for `dtype`, it would probably best to add them for all signatures. Might be simpler to skip the defaults for now and open a new issue to decide either way so that it can be applied evenly.\n",
        "createdAt" : "2016-09-27T15:16:42Z",
        "updatedAt" : "2016-09-27T15:16:42Z",
        "lastEditedBy" : "a39dcf66-f9ef-4c36-b512-5a93e1896cdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c788f4e7f6f5af6b1c3cda98388768912349b46",
    "line" : 744,
    "diffHunk" : "@@ -1,1 +742,746 @@          * 'same_kind' means only safe casts or casts within a kind,\n            like float64 to float32, are allowed.\n          * 'unsafe' means any data conversions may be done.\n\n        Default is 'safe'."
  },
  {
    "id" : "70280da2-112d-4cf9-a936-df0986e9a3d7",
    "prId" : 10352,
    "prUrl" : "https://github.com/numpy/numpy/pull/10352#pullrequestreview-89868734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22fb475a-5378-4fc7-b7e4-08ea2129bdbd",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Why not use `idx_rm` here? The other entries in this dict are being ignored",
        "createdAt" : "2018-01-18T17:18:30Z",
        "updatedAt" : "2018-01-18T18:13:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a96150fc-7fe3-4c9a-b5fe-57120b575665",
        "parentId" : "22fb475a-5378-4fc7-b7e4-08ea2129bdbd",
        "authorId" : "20a4dce5-4fa9-421e-9218-a73ea9b567b8",
        "body" : "Here `input_left` is e.g. `'ik'`, so this seems like a straightforward / quick way to get the indices to line up. Are you thinking something like this should be done instead?\r\n```\r\nif any(tmp_operands[0].shape[input_left.index(ind)] != tmp_operands[1].shape[input_right.index(ind)] for ind in idx_rm)\r\n```",
        "createdAt" : "2018-01-18T17:26:47Z",
        "updatedAt" : "2018-01-18T18:13:31Z",
        "lastEditedBy" : "20a4dce5-4fa9-421e-9218-a73ea9b567b8",
        "tags" : [
        ]
      },
      {
        "id" : "a8ce083d-abd7-492d-a9af-40c47e8574fc",
        "parentId" : "22fb475a-5378-4fc7-b7e4-08ea2129bdbd",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "You're right, what you had was better and probably faster too",
        "createdAt" : "2018-01-18T17:34:09Z",
        "updatedAt" : "2018-01-18T18:13:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "6348345b3885dfbee6286eff79e7feccc21e8f41",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +1114,1118 @@                             zip(input_left, tmp_operands[0].shape)}\n                right_dims = {dim: size for dim, size in\n                              zip(input_right, tmp_operands[1].shape)}\n                # If dims do not match we are broadcasting, BLAS off\n                if any(left_dims[ind] != right_dims[ind] for ind in idx_rm):"
  },
  {
    "id" : "3278e7b6-26e8-4cbd-832e-663c59ee2202",
    "prId" : 10359,
    "prUrl" : "https://github.com/numpy/numpy/pull/10359#pullrequestreview-87944029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4035af28-7aca-4cc2-8ffc-474395596cbb",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Do we want a stronger condition than this, and completely ignore the `optimize` arg with two arguments, rather than only change its default?",
        "createdAt" : "2018-01-10T16:43:33Z",
        "updatedAt" : "2018-01-10T16:43:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a6979c96-3d0e-4023-b9bc-114af17960bd",
        "parentId" : "4035af28-7aca-4cc2-8ffc-474395596cbb",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "It seems that it would make sense. Things are probably more complicated, as optimization could depend on the dimensions and specific contractions, but I think we do have data that it isn't a trivial problem. For 1.14 I'd be tempted to just change the optimization default back to False.\r\n\r\nI won't be making 1.14.1 before Feb, as it usually takes a couple of weeks for all the initial problems to trickle in. 1.14.0 has been unusual in that regard. Anyway, time enough for @dgasmith to chime in after the holidays.",
        "createdAt" : "2018-01-10T17:07:31Z",
        "updatedAt" : "2018-01-10T17:07:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "0c508d49-3511-40f3-9b7a-b55e0f3920c5",
        "parentId" : "4035af28-7aca-4cc2-8ffc-474395596cbb",
        "authorId" : "a39dcf66-f9ef-4c36-b512-5a93e1896cdf",
        "body" : "The `optimize` flag also allows usage of the various `dot` functions which can greatly reduce the cost of many other types of expressions. So while you do occur a static overhead, it is typically well worth it for problems that are non-trivial in size. I believe there was quite a bit of discussion on this originally and it was decided (guessed) that the distribution of use cases would err away from small problems.\r\n\r\nAs @charris mentioned it's difficult to figure out an even faster way to examine the expression to see if the optimization is worth it. One original suggestion was to have a simple input size cutoff where binary expressions would either go through optimization or not. This can go awry in a number of ways, but it is a possible heuristic.\r\n\r\nBinding the current einsum parsing tech to Python would be good, but it is fairly intricately tied to the main `c_einsum` function at the moment.",
        "createdAt" : "2018-01-10T17:48:06Z",
        "updatedAt" : "2018-01-10T17:48:06Z",
        "lastEditedBy" : "a39dcf66-f9ef-4c36-b512-5a93e1896cdf",
        "tags" : [
        ]
      },
      {
        "id" : "7c6e807e-7e0e-46d6-a50e-1716690cbc57",
        "parentId" : "4035af28-7aca-4cc2-8ffc-474395596cbb",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I would be quite surprised if there isn't a *lot* of code that uses `einsum` for, say, actual einstein summations, i.e., matrices with dimensions of just 3 or 4, where the static overhead is large. The reason we ran into the problems in astropy is that we used `einsum` as a work-around for not having `matmul` for coordinate transformations (i.e., we deal with 3x3 matrices operating on 3-element vectors, broadcast over the other dimensions).",
        "createdAt" : "2018-01-10T19:00:21Z",
        "updatedAt" : "2018-01-10T19:00:21Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "720cb5693fd2ed388d86057679f8dbf1757be799",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1058,1062 @@\n    # Grab non-einsum kwargs; never optimize 2-argument case.\n    optimize_arg = kwargs.pop('optimize', len(operands) > 3)\n\n    # If no optimization, run pure einsum"
  }
]