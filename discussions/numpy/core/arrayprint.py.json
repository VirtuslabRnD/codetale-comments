[
  {
    "id" : "21304ff2-e678-4f75-ac4f-a2395754eb82",
    "prId" : 5398,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d6e2eb0-97a2-44e7-aca5-d5f7384a558b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, does this need to be a 1-d array?\n",
        "createdAt" : "2015-01-01T02:06:11Z",
        "updatedAt" : "2015-01-02T05:22:17Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "9369c611-94c8-4f66-b774-8e41b72798de",
        "parentId" : "9d6e2eb0-97a2-44e7-aca5-d5f7384a558b",
        "authorId" : "2551cf46-0e77-4684-8b9f-194b74eae28d",
        "body" : "@charris, are you asking if we even need to use ravel here?  I just tried replacing `data = ravel(asarray(a))` with `data = a`, but running the command:\n\n```\npython3 runtests.py -t numpy/core/tests/test_multiarray.py:TestBinop\n```\n\ncauses an infinite loop throwing up a max recursion depth error.  \n\nIn fact, an infinite loop also happens if you call `asanyarray(a)`, and since `ravel` now calls `asanyarray` instead of `asarray`, I had to add `asarray` here.\n",
        "createdAt" : "2015-01-01T12:22:36Z",
        "updatedAt" : "2015-01-02T05:22:17Z",
        "lastEditedBy" : "2551cf46-0e77-4684-8b9f-194b74eae28d",
        "tags" : [
        ]
      },
      {
        "id" : "086c0bc9-2130-4f41-9841-45cbab9c97ca",
        "parentId" : "9d6e2eb0-97a2-44e7-aca5-d5f7384a558b",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I was just curious about the reason for the `asarray`, I was sure there was one.  Was there a problem for matrices? I was thinking we might want to do something about printing subtypes, but that is probably a problem for another day.\n",
        "createdAt" : "2015-01-01T16:02:22Z",
        "updatedAt" : "2015-01-02T05:22:17Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "9a5f5c87-59e0-4fa5-a931-492a64c608e8",
        "parentId" : "9d6e2eb0-97a2-44e7-aca5-d5f7384a558b",
        "authorId" : "2551cf46-0e77-4684-8b9f-194b74eae28d",
        "body" : "There was no problem for matrices.  I only noticed that `ravel(a)` failed for when `a` is of type `<class 'test_multiarray.Rop__radd__'>`.  And `numpy/core/tests/test_multiarray.py:TestBinop` is the only test that fails with `ravel(a)`.  I figured that instead of changing the test, I should change `ravel(a)` to `ravel(asarray(a))` since then the `_array2string` function would have the same exact effect as before this PR (`ravel` used to call `asarray` anyway).\n",
        "createdAt" : "2015-01-02T07:51:00Z",
        "updatedAt" : "2015-01-02T07:51:00Z",
        "lastEditedBy" : "2551cf46-0e77-4684-8b9f-194b74eae28d",
        "tags" : [
        ]
      }
    ],
    "commit" : "78f69df28acd80654705a43bcf1e977b9c423b53",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +252,256 @@    else:\n        summary_insert = \"\"\n        data = ravel(asarray(a))\n\n    formatdict = {'bool' : _boolFormatter,"
  },
  {
    "id" : "497c583d-09f6-48fe-a347-f2db7e993200",
    "prId" : 7099,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7aac39a5-eafa-4719-9e09-e78bd9e38345",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I assume the original was issuing a warning or some such?\n",
        "createdAt" : "2016-08-30T00:01:40Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "7a9d4f96-9024-4870-8042-fd9629f3467d",
        "parentId" : "7aac39a5-eafa-4719-9e09-e78bd9e38345",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yes, same, NAT Future Warning (NAT equality, could add more comments maybe).\n",
        "createdAt" : "2016-08-30T07:21:22Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "514d13679a55a82a96689679002c4ddc514641ce",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +737,741 @@            int_dtype = dtype(data.dtype.byteorder + 'i8')\n            int_view = data.view(int_dtype)\n            v = int_view[not_equal(int_view, nat_value.view(int_dtype))]\n            if len(v) > 0:\n                # Max str length of non-NaT elements"
  },
  {
    "id" : "87d420c6-fe5d-4255-a7f5-e1baf12ffc5d",
    "prId" : 7099,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12aad5be-a558-4b3a-a687-895925e1fb4b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Needed to avoid warning?\n",
        "createdAt" : "2016-08-30T00:02:01Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c6898a97-24a7-42e1-b8d6-38469ec84f44",
        "parentId" : "12aad5be-a558-4b3a-a687-895925e1fb4b",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "NAT comparisons give a warning, and they should not while printing in any case. Actually, I am not 100% if you can simplify it currently easily, we may need `np.isnat` or `np.isnan` to support datetimes. \n",
        "createdAt" : "2016-08-30T07:20:30Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "514d13679a55a82a96689679002c4ddc514641ce",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +752,756 @@    def __call__(self, x):\n        # TODO: After NAT == NAT deprecation should be simplified:\n        if (x + 1).view('i8') == x.view('i8'):\n            return self._nat\n        else:"
  },
  {
    "id" : "d21c2fe5-3a3b-4066-8bd2-0c9ccaab71b2",
    "prId" : 8200,
    "prUrl" : "https://github.com/numpy/numpy/pull/8200#pullrequestreview-6559024",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f106ac95-7948-44d8-b8c7-1d07cd163fab",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Just a note: `SubarrayFormat` here does not take into account `precision`, `suppress_small`, `formatter`. Maybe it should, but if so let's leave that for a future PR. Current numpy master doesn't take them into account either.\n",
        "createdAt" : "2016-11-01T03:11:28Z",
        "updatedAt" : "2016-11-01T14:25:11Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1326c31526a607cc981b309a3a092b1cbbc9b9c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +283,287 @@                    ravel(field_values), precision, suppress_small, formatter)\n            if dtype_[field_name].shape != ():\n                format_function = SubArrayFormat(format_function)\n            format_functions.append(format_function)\n        return StructureFormat(format_functions)"
  },
  {
    "id" : "66d1f96a-29da-4951-be07-b230c10a3bc9",
    "prId" : 8200,
    "prUrl" : "https://github.com/numpy/numpy/pull/8200#pullrequestreview-6627223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25c4d8f9-6193-49a6-a067-e4aa0137a1d2",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Just just to note,  probably a more exhaustive solution would recursively call `array2string` somehow (but with very large `max_line_width`?). But this looks fine for this PR.\n",
        "createdAt" : "2016-11-01T03:17:38Z",
        "updatedAt" : "2016-11-01T14:25:11Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "9aa04cfa-2e56-4ac8-9f24-17091424cdfb",
        "parentId" : "25c4d8f9-6193-49a6-a067-e4aa0137a1d2",
        "authorId" : "1c1bcac1-5e80-4ef4-9afe-dea984d978ea",
        "body" : "I think so too. First, I tried it a little and found it's not easy. So, I made `SubArrayFormat` class as the second way.\n",
        "createdAt" : "2016-11-01T14:48:25Z",
        "updatedAt" : "2016-11-01T14:48:25Z",
        "lastEditedBy" : "1c1bcac1-5e80-4ef4-9afe-dea984d978ea",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1326c31526a607cc981b309a3a092b1cbbc9b9c",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +782,786 @@        if arr.ndim <= 1:\n            return \"[\" + \", \".join(self.format_function(a) for a in arr) + \"]\"\n        return \"[\" + \", \".join(self.__call__(a) for a in arr) + \"]\"\n\n"
  },
  {
    "id" : "c2aeb097-cb5a-4b4a-904b-a137b30d59d6",
    "prId" : 8963,
    "prUrl" : "https://github.com/numpy/numpy/pull/8963#pullrequestreview-34428582",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c40c07e-6ef7-4c96-8796-4d651f652b7f",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "What's the point of this? (forgive my ignorance)",
        "createdAt" : "2017-04-24T21:38:44Z",
        "updatedAt" : "2017-04-25T09:28:52Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "22406732-1265-472b-a8bb-e1f67d9c99e1",
        "parentId" : "2c40c07e-6ef7-4c96-8796-4d651f652b7f",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Not polluting the global namespace. Previously there was also `from functools import reduce`.\r\n\r\nAs for why _that_'s there - `reduce` is no longer a global in python 3",
        "createdAt" : "2017-04-24T21:58:56Z",
        "updatedAt" : "2017-04-25T09:28:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e65a2af062012ab4fd4f9954b45a608a915e56d",
    "line" : 164,
    "diffHunk" : "@@ -1,1 +505,509 @@        else:\n            lst = style(x)\n    elif functools.reduce(product, a.shape) == 0:\n        # treat as a null array if any of shape elements == 0\n        lst = \"[]\""
  },
  {
    "id" : "1e6bc260-60ad-43c9-aa22-045584911eb6",
    "prId" : 8963,
    "prUrl" : "https://github.com/numpy/numpy/pull/8963#pullrequestreview-34431685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0547333a-736c-477a-a599-a59029d3301e",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I think it would be good to add a comment here that this is to account for (for example) self-containing object arrays.",
        "createdAt" : "2017-04-24T21:42:31Z",
        "updatedAt" : "2017-04-25T09:28:52Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "219f54e3-381b-4db2-8974-3aafda70dadd",
        "parentId" : "0547333a-736c-477a-a599-a59029d3301e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Good point - I'll fix that up when I find the time (or else, you can if you don't want to wait - this PR is editable)",
        "createdAt" : "2017-04-24T22:02:06Z",
        "updatedAt" : "2017-04-25T09:28:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "753d7584-668d-4344-9325-fe50efdfd2a6",
        "parentId" : "0547333a-736c-477a-a599-a59029d3301e",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "All right, I will wait. Otherwise it looks good to merge to me.",
        "createdAt" : "2017-04-24T22:17:09Z",
        "updatedAt" : "2017-04-25T09:28:52Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e65a2af062012ab4fd4f9954b45a608a915e56d",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +355,359 @@\n\ndef _recursive_guard(fillvalue='...'):\n    \"\"\"\n    Like the python 3.2 reprlib.recursive_repr, but forwards *args and **kwargs"
  },
  {
    "id" : "59bd2f30-e78e-4b41-ae6d-d33f40e9e56a",
    "prId" : 8963,
    "prUrl" : "https://github.com/numpy/numpy/pull/8963#pullrequestreview-34510613",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "494b1b46-b2e9-49c2-88b7-01402ba27b7e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "@ahaldane: Done - seemed more appropriate to comment \"why\" at the call-site",
        "createdAt" : "2017-04-25T09:29:43Z",
        "updatedAt" : "2017-04-25T09:29:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e65a2af062012ab4fd4f9954b45a608a915e56d",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +385,389 @@\n# gracefully handle recursive calls - this comes up when object arrays contain\n# themselves\n@_recursive_guard()\ndef array2string(a, max_line_width=None, precision=None,"
  },
  {
    "id" : "46836e40-5051-4de0-8b68-6dc8b61c34b9",
    "prId" : 8963,
    "prUrl" : "https://github.com/numpy/numpy/pull/8963#pullrequestreview-34510720",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35daaee7-5253-40b3-94c2-b7956df88916",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Docstring improved too.",
        "createdAt" : "2017-04-25T09:30:08Z",
        "updatedAt" : "2017-04-25T09:30:08Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e65a2af062012ab4fd4f9954b45a608a915e56d",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +363,367 @@\n    Largely copied from reprlib.recursive_repr\n    \"\"\"\n\n    def decorating_function(f):"
  },
  {
    "id" : "e15310bf-c1dd-4021-bb3a-9b2002a4b3a3",
    "prId" : 8983,
    "prUrl" : "https://github.com/numpy/numpy/pull/8983#pullrequestreview-38568940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44c72441-bb9c-4581-82f8-c3fa2df96798",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This import seems iffy...  Is this sensible from a cyclic import perspective?",
        "createdAt" : "2017-05-16T22:54:29Z",
        "updatedAt" : "2017-05-17T03:35:40Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "bc3c6a78-e801-4d59-8b39-6bb46e6fc1fc",
        "parentId" : "44c72441-bb9c-4581-82f8-c3fa2df96798",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I assumed it was OK since `fromnumeric.py` does it too, but I agree `from .._globals import _NoValue` seems less risky.",
        "createdAt" : "2017-05-16T23:07:25Z",
        "updatedAt" : "2017-05-17T03:35:40Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "b2d5beda-cbe3-424d-a0f8-22b90f9da10f",
        "parentId" : "44c72441-bb9c-4581-82f8-c3fa2df96798",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "You're right, there's definitely precedent for how you had this before. Maybe leave it as it was, and we can deal with `_globals` in general at a later point (it needs the new exception types too).",
        "createdAt" : "2017-05-16T23:49:20Z",
        "updatedAt" : "2017-05-17T03:35:40Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d5dfc45d-609a-45ab-9ee9-56d4bc6f95ec",
        "parentId" : "44c72441-bb9c-4581-82f8-c3fa2df96798",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Fair enough, done.",
        "createdAt" : "2017-05-17T04:44:39Z",
        "updatedAt" : "2017-05-17T04:44:39Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2b06fe879f5b2b14de3dad0f517561a0c815df0",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +36,40 @@        from dummy_thread import get_ident\n\nimport numpy as np\nfrom . import numerictypes as _nt\nfrom .umath import maximum, minimum, absolute, not_equal, isnan, isinf"
  }
]