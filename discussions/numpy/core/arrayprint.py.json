[
  {
    "id" : "21304ff2-e678-4f75-ac4f-a2395754eb82",
    "prId" : 5398,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d6e2eb0-97a2-44e7-aca5-d5f7384a558b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, does this need to be a 1-d array?\n",
        "createdAt" : "2015-01-01T02:06:11Z",
        "updatedAt" : "2015-01-02T05:22:17Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "9369c611-94c8-4f66-b774-8e41b72798de",
        "parentId" : "9d6e2eb0-97a2-44e7-aca5-d5f7384a558b",
        "authorId" : "2551cf46-0e77-4684-8b9f-194b74eae28d",
        "body" : "@charris, are you asking if we even need to use ravel here?  I just tried replacing `data = ravel(asarray(a))` with `data = a`, but running the command:\n\n```\npython3 runtests.py -t numpy/core/tests/test_multiarray.py:TestBinop\n```\n\ncauses an infinite loop throwing up a max recursion depth error.  \n\nIn fact, an infinite loop also happens if you call `asanyarray(a)`, and since `ravel` now calls `asanyarray` instead of `asarray`, I had to add `asarray` here.\n",
        "createdAt" : "2015-01-01T12:22:36Z",
        "updatedAt" : "2015-01-02T05:22:17Z",
        "lastEditedBy" : "2551cf46-0e77-4684-8b9f-194b74eae28d",
        "tags" : [
        ]
      },
      {
        "id" : "086c0bc9-2130-4f41-9841-45cbab9c97ca",
        "parentId" : "9d6e2eb0-97a2-44e7-aca5-d5f7384a558b",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I was just curious about the reason for the `asarray`, I was sure there was one.  Was there a problem for matrices? I was thinking we might want to do something about printing subtypes, but that is probably a problem for another day.\n",
        "createdAt" : "2015-01-01T16:02:22Z",
        "updatedAt" : "2015-01-02T05:22:17Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "9a5f5c87-59e0-4fa5-a931-492a64c608e8",
        "parentId" : "9d6e2eb0-97a2-44e7-aca5-d5f7384a558b",
        "authorId" : "2551cf46-0e77-4684-8b9f-194b74eae28d",
        "body" : "There was no problem for matrices.  I only noticed that `ravel(a)` failed for when `a` is of type `<class 'test_multiarray.Rop__radd__'>`.  And `numpy/core/tests/test_multiarray.py:TestBinop` is the only test that fails with `ravel(a)`.  I figured that instead of changing the test, I should change `ravel(a)` to `ravel(asarray(a))` since then the `_array2string` function would have the same exact effect as before this PR (`ravel` used to call `asarray` anyway).\n",
        "createdAt" : "2015-01-02T07:51:00Z",
        "updatedAt" : "2015-01-02T07:51:00Z",
        "lastEditedBy" : "2551cf46-0e77-4684-8b9f-194b74eae28d",
        "tags" : [
        ]
      }
    ],
    "commit" : "78f69df28acd80654705a43bcf1e977b9c423b53",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +252,256 @@    else:\n        summary_insert = \"\"\n        data = ravel(asarray(a))\n\n    formatdict = {'bool' : _boolFormatter,"
  },
  {
    "id" : "497c583d-09f6-48fe-a347-f2db7e993200",
    "prId" : 7099,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7aac39a5-eafa-4719-9e09-e78bd9e38345",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I assume the original was issuing a warning or some such?\n",
        "createdAt" : "2016-08-30T00:01:40Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "7a9d4f96-9024-4870-8042-fd9629f3467d",
        "parentId" : "7aac39a5-eafa-4719-9e09-e78bd9e38345",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yes, same, NAT Future Warning (NAT equality, could add more comments maybe).\n",
        "createdAt" : "2016-08-30T07:21:22Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "514d13679a55a82a96689679002c4ddc514641ce",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +737,741 @@            int_dtype = dtype(data.dtype.byteorder + 'i8')\n            int_view = data.view(int_dtype)\n            v = int_view[not_equal(int_view, nat_value.view(int_dtype))]\n            if len(v) > 0:\n                # Max str length of non-NaT elements"
  },
  {
    "id" : "87d420c6-fe5d-4255-a7f5-e1baf12ffc5d",
    "prId" : 7099,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12aad5be-a558-4b3a-a687-895925e1fb4b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Needed to avoid warning?\n",
        "createdAt" : "2016-08-30T00:02:01Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c6898a97-24a7-42e1-b8d6-38469ec84f44",
        "parentId" : "12aad5be-a558-4b3a-a687-895925e1fb4b",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "NAT comparisons give a warning, and they should not while printing in any case. Actually, I am not 100% if you can simplify it currently easily, we may need `np.isnat` or `np.isnan` to support datetimes. \n",
        "createdAt" : "2016-08-30T07:20:30Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "514d13679a55a82a96689679002c4ddc514641ce",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +752,756 @@    def __call__(self, x):\n        # TODO: After NAT == NAT deprecation should be simplified:\n        if (x + 1).view('i8') == x.view('i8'):\n            return self._nat\n        else:"
  },
  {
    "id" : "d21c2fe5-3a3b-4066-8bd2-0c9ccaab71b2",
    "prId" : 8200,
    "prUrl" : "https://github.com/numpy/numpy/pull/8200#pullrequestreview-6559024",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f106ac95-7948-44d8-b8c7-1d07cd163fab",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Just a note: `SubarrayFormat` here does not take into account `precision`, `suppress_small`, `formatter`. Maybe it should, but if so let's leave that for a future PR. Current numpy master doesn't take them into account either.\n",
        "createdAt" : "2016-11-01T03:11:28Z",
        "updatedAt" : "2016-11-01T14:25:11Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1326c31526a607cc981b309a3a092b1cbbc9b9c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +283,287 @@                    ravel(field_values), precision, suppress_small, formatter)\n            if dtype_[field_name].shape != ():\n                format_function = SubArrayFormat(format_function)\n            format_functions.append(format_function)\n        return StructureFormat(format_functions)"
  },
  {
    "id" : "66d1f96a-29da-4951-be07-b230c10a3bc9",
    "prId" : 8200,
    "prUrl" : "https://github.com/numpy/numpy/pull/8200#pullrequestreview-6627223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25c4d8f9-6193-49a6-a067-e4aa0137a1d2",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Just just to note,  probably a more exhaustive solution would recursively call `array2string` somehow (but with very large `max_line_width`?). But this looks fine for this PR.\n",
        "createdAt" : "2016-11-01T03:17:38Z",
        "updatedAt" : "2016-11-01T14:25:11Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "9aa04cfa-2e56-4ac8-9f24-17091424cdfb",
        "parentId" : "25c4d8f9-6193-49a6-a067-e4aa0137a1d2",
        "authorId" : "1c1bcac1-5e80-4ef4-9afe-dea984d978ea",
        "body" : "I think so too. First, I tried it a little and found it's not easy. So, I made `SubArrayFormat` class as the second way.\n",
        "createdAt" : "2016-11-01T14:48:25Z",
        "updatedAt" : "2016-11-01T14:48:25Z",
        "lastEditedBy" : "1c1bcac1-5e80-4ef4-9afe-dea984d978ea",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1326c31526a607cc981b309a3a092b1cbbc9b9c",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +782,786 @@        if arr.ndim <= 1:\n            return \"[\" + \", \".join(self.format_function(a) for a in arr) + \"]\"\n        return \"[\" + \", \".join(self.__call__(a) for a in arr) + \"]\"\n\n"
  },
  {
    "id" : "c2aeb097-cb5a-4b4a-904b-a137b30d59d6",
    "prId" : 8963,
    "prUrl" : "https://github.com/numpy/numpy/pull/8963#pullrequestreview-34428582",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c40c07e-6ef7-4c96-8796-4d651f652b7f",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "What's the point of this? (forgive my ignorance)",
        "createdAt" : "2017-04-24T21:38:44Z",
        "updatedAt" : "2017-04-25T09:28:52Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "22406732-1265-472b-a8bb-e1f67d9c99e1",
        "parentId" : "2c40c07e-6ef7-4c96-8796-4d651f652b7f",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Not polluting the global namespace. Previously there was also `from functools import reduce`.\r\n\r\nAs for why _that_'s there - `reduce` is no longer a global in python 3",
        "createdAt" : "2017-04-24T21:58:56Z",
        "updatedAt" : "2017-04-25T09:28:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e65a2af062012ab4fd4f9954b45a608a915e56d",
    "line" : 164,
    "diffHunk" : "@@ -1,1 +505,509 @@        else:\n            lst = style(x)\n    elif functools.reduce(product, a.shape) == 0:\n        # treat as a null array if any of shape elements == 0\n        lst = \"[]\""
  },
  {
    "id" : "1e6bc260-60ad-43c9-aa22-045584911eb6",
    "prId" : 8963,
    "prUrl" : "https://github.com/numpy/numpy/pull/8963#pullrequestreview-34431685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0547333a-736c-477a-a599-a59029d3301e",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I think it would be good to add a comment here that this is to account for (for example) self-containing object arrays.",
        "createdAt" : "2017-04-24T21:42:31Z",
        "updatedAt" : "2017-04-25T09:28:52Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "219f54e3-381b-4db2-8974-3aafda70dadd",
        "parentId" : "0547333a-736c-477a-a599-a59029d3301e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Good point - I'll fix that up when I find the time (or else, you can if you don't want to wait - this PR is editable)",
        "createdAt" : "2017-04-24T22:02:06Z",
        "updatedAt" : "2017-04-25T09:28:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "753d7584-668d-4344-9325-fe50efdfd2a6",
        "parentId" : "0547333a-736c-477a-a599-a59029d3301e",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "All right, I will wait. Otherwise it looks good to merge to me.",
        "createdAt" : "2017-04-24T22:17:09Z",
        "updatedAt" : "2017-04-25T09:28:52Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e65a2af062012ab4fd4f9954b45a608a915e56d",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +355,359 @@\n\ndef _recursive_guard(fillvalue='...'):\n    \"\"\"\n    Like the python 3.2 reprlib.recursive_repr, but forwards *args and **kwargs"
  },
  {
    "id" : "59bd2f30-e78e-4b41-ae6d-d33f40e9e56a",
    "prId" : 8963,
    "prUrl" : "https://github.com/numpy/numpy/pull/8963#pullrequestreview-34510613",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "494b1b46-b2e9-49c2-88b7-01402ba27b7e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "@ahaldane: Done - seemed more appropriate to comment \"why\" at the call-site",
        "createdAt" : "2017-04-25T09:29:43Z",
        "updatedAt" : "2017-04-25T09:29:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e65a2af062012ab4fd4f9954b45a608a915e56d",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +385,389 @@\n# gracefully handle recursive calls - this comes up when object arrays contain\n# themselves\n@_recursive_guard()\ndef array2string(a, max_line_width=None, precision=None,"
  },
  {
    "id" : "46836e40-5051-4de0-8b68-6dc8b61c34b9",
    "prId" : 8963,
    "prUrl" : "https://github.com/numpy/numpy/pull/8963#pullrequestreview-34510720",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35daaee7-5253-40b3-94c2-b7956df88916",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Docstring improved too.",
        "createdAt" : "2017-04-25T09:30:08Z",
        "updatedAt" : "2017-04-25T09:30:08Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e65a2af062012ab4fd4f9954b45a608a915e56d",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +363,367 @@\n    Largely copied from reprlib.recursive_repr\n    \"\"\"\n\n    def decorating_function(f):"
  },
  {
    "id" : "e15310bf-c1dd-4021-bb3a-9b2002a4b3a3",
    "prId" : 8983,
    "prUrl" : "https://github.com/numpy/numpy/pull/8983#pullrequestreview-38568940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44c72441-bb9c-4581-82f8-c3fa2df96798",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This import seems iffy...  Is this sensible from a cyclic import perspective?",
        "createdAt" : "2017-05-16T22:54:29Z",
        "updatedAt" : "2017-05-17T03:35:40Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "bc3c6a78-e801-4d59-8b39-6bb46e6fc1fc",
        "parentId" : "44c72441-bb9c-4581-82f8-c3fa2df96798",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I assumed it was OK since `fromnumeric.py` does it too, but I agree `from .._globals import _NoValue` seems less risky.",
        "createdAt" : "2017-05-16T23:07:25Z",
        "updatedAt" : "2017-05-17T03:35:40Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "b2d5beda-cbe3-424d-a0f8-22b90f9da10f",
        "parentId" : "44c72441-bb9c-4581-82f8-c3fa2df96798",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "You're right, there's definitely precedent for how you had this before. Maybe leave it as it was, and we can deal with `_globals` in general at a later point (it needs the new exception types too).",
        "createdAt" : "2017-05-16T23:49:20Z",
        "updatedAt" : "2017-05-17T03:35:40Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d5dfc45d-609a-45ab-9ee9-56d4bc6f95ec",
        "parentId" : "44c72441-bb9c-4581-82f8-c3fa2df96798",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Fair enough, done.",
        "createdAt" : "2017-05-17T04:44:39Z",
        "updatedAt" : "2017-05-17T04:44:39Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2b06fe879f5b2b14de3dad0f517561a0c815df0",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +36,40 @@        from dummy_thread import get_ident\n\nimport numpy as np\nfrom . import numerictypes as _nt\nfrom .umath import maximum, minimum, absolute, not_equal, isnan, isinf"
  },
  {
    "id" : "8b479562-8f5d-4632-bf7f-98b76efb3847",
    "prId" : 8989,
    "prUrl" : "https://github.com/numpy/numpy/pull/8989#pullrequestreview-34949218",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "139563f9-96e8-4203-aef2-7fc519d172f3",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Interesting fact - this is never nor was ever used...",
        "createdAt" : "2017-04-26T20:10:18Z",
        "updatedAt" : "2017-05-01T10:01:41Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "89d7d1d51337bdfad1123f18b9fdb126240cf000",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +267,271 @@                  'object': lambda: _object_format,\n                  'numpystr': lambda: repr_format,\n                  'str': lambda: str}\n\n    # we need to wrap values in `formatter` in a lambda, so that the interface"
  },
  {
    "id" : "d6092f7e-b160-4a3c-9511-0cc68cee2f43",
    "prId" : 9139,
    "prUrl" : "https://github.com/numpy/numpy/pull/9139#pullrequestreview-62132610",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf8234c8-4534-4332-a0e5-2630297bec7a",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This overlaps with the changes in #9605. Which should we prefer?",
        "createdAt" : "2017-09-11T06:42:35Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0d1c9bc1-6eaa-4cb8-bfca-148caae7d6a9",
        "parentId" : "bf8234c8-4534-4332-a0e5-2630297bec7a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "<s>I think I prefer the use of `dict(edgeitems=)` in that implementation, but</s> `_make_options_dict` is nice in this one\r\nEdit: Yeah, I think this should supercede #9605. Sorry, @srinivasreddy!",
        "createdAt" : "2017-09-11T06:44:57Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b9dc5b9d-90ec-464e-80e6-042f494c7fac",
        "parentId" : "bf8234c8-4534-4332-a0e5-2630297bec7a",
        "authorId" : "69686cb1-71e5-4aeb-a7c7-c337f46b152a",
        "body" : "NP @eric-wieser.  I am closing the PR.  😄 ",
        "createdAt" : "2017-09-12T13:40:33Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "69686cb1-71e5-4aeb-a7c7-c337f46b152a",
        "tags" : [
        ]
      }
    ],
    "commit" : "710e0327687b9f7653e5ac02d222ba62c657a718",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +65,69 @@    'infstr': 'inf',\n    'sign': '-',\n    'formatter': None }\n\ndef _make_options_dict(precision=None, threshold=None, edgeitems=None,"
  },
  {
    "id" : "c558bcbc-6e93-4fbb-ac01-f1c09c8fedca",
    "prId" : 9139,
    "prUrl" : "https://github.com/numpy/numpy/pull/9139#pullrequestreview-61948333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eaecdd65-0916-4ec5-9c8d-bb66f01eaedd",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Passing these by keyword might be clearer",
        "createdAt" : "2017-09-11T06:54:26Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5b2be4e5-0565-425f-936d-e27cf6a46bea",
        "parentId" : "eaecdd65-0916-4ec5-9c8d-bb66f01eaedd",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Agreed (and could just be `**options` if one goes with the above.",
        "createdAt" : "2017-09-11T20:57:37Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "710e0327687b9f7653e5ac02d222ba62c657a718",
    "line" : 299,
    "diffHunk" : "@@ -1,1 +517,521 @@    overrides = _make_options_dict(precision, threshold, edgeitems,\n                                   max_line_width, suppress_small, None, None,\n                                   sign, formatter)\n    options = _format_options.copy()\n    options.update(overrides)"
  },
  {
    "id" : "9ae51d9c-4794-4c51-ac8b-bdb06bf313af",
    "prId" : 9139,
    "prUrl" : "https://github.com/numpy/numpy/pull/9139#pullrequestreview-62019414",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2783e50a-41c1-41f4-96d4-6fe6652a6019",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can we add these extra arguments via **kwargs**, rather than supporting them positionally? It makes things a little easier if we expose yet more arguments",
        "createdAt" : "2017-09-11T07:06:38Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e5ac58e2-7188-4aee-950f-91f842a96bc1",
        "parentId" : "2783e50a-41c1-41f4-96d4-6fe6652a6019",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Going with my suggestion above, might even call it `**options`...",
        "createdAt" : "2017-09-11T20:56:40Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "66439be8-4738-47ea-9f40-cee993f67831",
        "parentId" : "2783e50a-41c1-41f4-96d4-6fe6652a6019",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Might be nice to deprecate passing these positionally too",
        "createdAt" : "2017-09-12T04:50:25Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "710e0327687b9f7653e5ac02d222ba62c657a718",
    "line" : 259,
    "diffHunk" : "@@ -1,1 +403,407 @@                 suppress_small=None, separator=' ', prefix=\"\",\n                 style=np._NoValue, formatter=None, threshold=None,\n                 edgeitems=None, sign=None):\n    \"\"\"\n    Return a string representation of an array."
  },
  {
    "id" : "8e70cd2b-7e61-4646-a8c3-189591c25ca5",
    "prId" : 9139,
    "prUrl" : "https://github.com/numpy/numpy/pull/9139#pullrequestreview-62426035",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6d19eff-1d6c-4772-a784-3a087c6f5ddd",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Not your fault, but yikes, since when is `nan` known to be positive? Can we omit this?",
        "createdAt" : "2017-09-11T21:09:03Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "80d0c842-8fac-4f4d-b80f-aa89a9830477",
        "parentId" : "b6d19eff-1d6c-4772-a784-3a087c6f5ddd",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Hmm removing this actuallt breaks tests, because complex types require a sign in the imag part: `0.+nanj`",
        "createdAt" : "2017-09-13T12:48:46Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "b7566cd1-e15b-4c9f-9406-64d998b0414d",
        "parentId" : "b6d19eff-1d6c-4772-a784-3a087c6f5ddd",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I guess to avoid that one would need yet another special-case for \"really, I always want a sign\", which is used for complex. But that seems overly cumbersome for a case where there is no confusion, so let's just let it be.",
        "createdAt" : "2017-09-13T12:53:44Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "710e0327687b9f7653e5ac02d222ba62c657a718",
    "line" : 431,
    "diffHunk" : "@@ -1,1 +685,689 @@                nan_str = _format_options['nanstr']\n                if self.sign == '+':\n                    return self.special_fmt % ('+' + nan_str,)\n                else:\n                    return self.special_fmt % (nan_str,)"
  },
  {
    "id" : "b190545a-f99f-47c5-978a-55c269adde88",
    "prId" : 9139,
    "prUrl" : "https://github.com/numpy/numpy/pull/9139#pullrequestreview-61948333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9341e33b-55d4-4b95-a776-a3b15bde8875",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "As above.",
        "createdAt" : "2017-09-11T21:10:06Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "710e0327687b9f7653e5ac02d222ba62c657a718",
    "line" : 506,
    "diffHunk" : "@@ -1,1 +758,762 @@            nan_str = _format_options['nanstr']\n            if self.sign == '+':\n                return '+' + nan_str\n            else:\n                return ' ' + nan_str"
  },
  {
    "id" : "7878499b-79cb-408b-a166-d526af4ac53b",
    "prId" : 9139,
    "prUrl" : "https://github.com/numpy/numpy/pull/9139#pullrequestreview-62331608",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff7f2496-d15e-4908-8974-446ab23b1a91",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Again not your change, but this is not the same as for regular float (where no space is added)",
        "createdAt" : "2017-09-11T21:11:05Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "f77fe15f-fc23-4e14-a7e9-a1f4ec82eab2",
        "parentId" : "ff7f2496-d15e-4908-8974-446ab23b1a91",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Yes we discussed this. I haven't updated LongFloat because it needs a total rewrite. (see the 3rd column in the big set of changed tests below).",
        "createdAt" : "2017-09-13T05:17:55Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "710e0327687b9f7653e5ac02d222ba62c657a718",
    "line" : 509,
    "diffHunk" : "@@ -1,1 +760,764 @@                return '+' + nan_str\n            else:\n                return ' ' + nan_str\n        elif isinf(x):\n            inf_str = _format_options['infstr']"
  },
  {
    "id" : "e215218d-d924-47f8-8d92-7e2b52689cc2",
    "prId" : 9139,
    "prUrl" : "https://github.com/numpy/numpy/pull/9139#pullrequestreview-61948333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ca39fd7-e1e1-4d1d-9256-14ad2fc10bc4",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Should we not omit the space for `sign=='-'`? Solution might be the same as the one suggested for float above. Or was this part of the \"let's not touch long yet...\"?",
        "createdAt" : "2017-09-11T21:11:46Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "710e0327687b9f7653e5ac02d222ba62c657a718",
    "line" : 519,
    "diffHunk" : "@@ -1,1 +767,771 @@                    return '+' + inf_str\n                else:\n                    return ' ' + inf_str\n            else:\n                return '-' + inf_str"
  },
  {
    "id" : "e07794f7-75b5-425e-9c67-d3e5cbf9d2da",
    "prId" : 9139,
    "prUrl" : "https://github.com/numpy/numpy/pull/9139#pullrequestreview-62331420",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "451e2426-37b1-4a66-8658-608864f4b6f5",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Should we not include a space for `sign==' '`? I.e., maybe\r\n```\r\nreturn self.special_fmt % (('' if self.sign == '-' else self.sign) + inf_str,)\r\n```",
        "createdAt" : "2017-09-11T21:12:12Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "73a4787e-36ce-438e-add3-b4282dbaeb1b",
        "parentId" : "451e2426-37b1-4a66-8658-608864f4b6f5",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I think we are OK because of the way `special_fmt` is defined. If `sign=' '` then the `max_str_len` will be one longer, so we will get the necessary prefix space.",
        "createdAt" : "2017-09-13T05:15:40Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "710e0327687b9f7653e5ac02d222ba62c657a718",
    "line" : 444,
    "diffHunk" : "@@ -1,1 +694,698 @@                        return self.special_fmt % ('+' + inf_str,)\n                    else:\n                        return self.special_fmt % (inf_str,)\n                else:\n                    return self.special_fmt % ('-' + inf_str,)"
  },
  {
    "id" : "2af5b998-9a47-4d41-8fb9-64ac54361822",
    "prId" : 9139,
    "prUrl" : "https://github.com/numpy/numpy/pull/9139#pullrequestreview-61948333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20d6f790-39f4-4555-bb15-6c319fe1afbd",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I'd do all three signs here...",
        "createdAt" : "2017-09-11T21:15:25Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "710e0327687b9f7653e5ac02d222ba62c657a718",
    "line" : 525,
    "diffHunk" : "@@ -1,1 +771,775 @@                return '-' + inf_str\n        elif x >= 0:\n            if self.sign == '+':\n                return '+' + format_longfloat(x, self.precision)\n            else:"
  },
  {
    "id" : "5afa7732-9054-49eb-986f-3dceaa2cab29",
    "prId" : 9139,
    "prUrl" : "https://github.com/numpy/numpy/pull/9139#pullrequestreview-64346082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "626bad6b-791d-41d9-bd0f-f25bffbe71ad",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Seems a bit odd that we're importing `np` directly for these, yet importing other stuff indirectly. Not something you need to fix in this PR though",
        "createdAt" : "2017-09-21T07:02:24Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e43acfcf-48bf-4201-8a15-84b0fa914a9b",
        "parentId" : "626bad6b-791d-41d9-bd0f-f25bffbe71ad",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Yes, looks like all the indirect imports can be replaced by the single `np` import - I just tried it, seems fine.\r\n\r\nI won't do that in this PR though.",
        "createdAt" : "2017-09-21T14:36:16Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "e1df4a81-2859-408b-883d-122840658c67",
        "parentId" : "626bad6b-791d-41d9-bd0f-f25bffbe71ad",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I've never understood quite how, or why, that worked. But it generally does. ",
        "createdAt" : "2017-09-21T15:59:23Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4eb499ac-33e0-44ae-b1ef-bb3170394737",
        "parentId" : "626bad6b-791d-41d9-bd0f-f25bffbe71ad",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I think it works because we never use or call any numpy functions or variables in this file at import time, only at runtime. \r\n\r\nAt the moment `arrayprint` is imported from the main`__init__` file, the `numpy` module has been created but not populated, so we are allowed to import numpy, but not allowed refer to any of its functions or variables. However, we can use it inside of function definitions since by the time they are called the numpy module will have been populated.\r\n\r\n(Actually, I see a few exceptions: At module import time we call `multiarray.set_string_function` and we refer to `int_`, `float_`, `complex_`, `intc` and `longlong`. Therefore these will still need to be directly imported).",
        "createdAt" : "2017-09-21T16:26:30Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "640272f7-0ccf-4bfb-a8e4-d6df005f6610",
        "parentId" : "626bad6b-791d-41d9-bd0f-f25bffbe71ad",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Hmm, but it might be safer to leave these all the way they are: What if another module calls arrayprint functions at import time? Then we would have a problem. Ideally no other modules would, though.\r\n\r\n(And this isn't theoretical: We recently had a problem because `getlimits.py`was calling `array2string` at module import time, though we've now fixed it so it no longer does (#9113))",
        "createdAt" : "2017-09-21T16:33:12Z",
        "updatedAt" : "2017-09-26T01:25:42Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "710e0327687b9f7653e5ac02d222ba62c657a718",
    "line" : 359,
    "diffHunk" : "@@ -1,1 +637,641 @@                max_val = np.max(abs_non_zero)\n                min_val = np.min(abs_non_zero)\n                min_val_sgn = np.min(non_zero)\n                if max_val >= 1.e8:\n                    self.exp_format = True"
  },
  {
    "id" : "76ee845c-b314-4bba-9fe1-94f4b0a5e07c",
    "prId" : 9332,
    "prUrl" : "https://github.com/numpy/numpy/pull/9332#pullrequestreview-75954507",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6aab29df-7cd3-439b-a356-c9db5df54852",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can we make this `2017-11-09` please (like we do elsewhere)? As a European, this format is silly ;)\r\n\r\n(yes, I realized that I missed it the first round)",
        "createdAt" : "2017-11-12T10:04:13Z",
        "updatedAt" : "2017-11-12T10:04:14Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbf543801589270834f270f4bae3e21926a4321a",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +569,573 @@            return style(a.item())\n    elif style is not np._NoValue:\n        # Deprecation 11-9-2017  v1.14\n        warnings.warn(\"'style' argument is deprecated and no longer functional\"\n                      \" except in 'legacy' mode\","
  },
  {
    "id" : "9d896d88-3e5d-41bb-85df-db55d0e1eeab",
    "prId" : 9688,
    "prUrl" : "https://github.com/numpy/numpy/pull/9688#pullrequestreview-64984535",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c72c9fda-8f63-4c6f-81ae-6dbf98036bce",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Nit: PEP8 wants two newlines here (and above the function)",
        "createdAt" : "2017-09-25T18:05:53Z",
        "updatedAt" : "2017-09-25T18:11:16Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ecae5ee158b9600c207b4c42e2ed531c8f385e9",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +405,409 @@                       _summaryEdgeItems, summary_insert)[:-1]\n    return lst\n\n\ndef array2string(a, max_line_width=None, precision=None,"
  },
  {
    "id" : "16802d26-8c38-4565-836a-2dfff0b16cdb",
    "prId" : 9725,
    "prUrl" : "https://github.com/numpy/numpy/pull/9725#pullrequestreview-64135107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "163c6dcf-c98e-436d-895e-d3cc91501c74",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "The rest of these additions are straight copied from numeric.py",
        "createdAt" : "2017-09-20T22:27:27Z",
        "updatedAt" : "2017-09-20T22:27:27Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ad345e0e8f11ca68e21f20eed71df97a9fb70a4",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +859,863 @@            s += format_function(field) + \", \"\n        return (s[:-2] if 1 < self.num_fields else s[:-1]) + \")\"\n\n\n_typelessdata = [int_, float_, complex_]"
  },
  {
    "id" : "9f92439d-5c67-4b7c-bcef-05d6d36939a8",
    "prId" : 9792,
    "prUrl" : "https://github.com/numpy/numpy/pull/9792#pullrequestreview-77836325",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29468404-3b35-47a8-a53d-fabfe225365d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This feels like it might belong at `dtype.__format__` in future, but for now I just wanted to avoid code duplication",
        "createdAt" : "2017-11-19T09:38:20Z",
        "updatedAt" : "2017-11-20T09:03:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c1b05a61-ea44-4bf4-86cb-77532436029b",
        "parentId" : "29468404-3b35-47a8-a53d-fabfe225365d",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "This code is also duplicate from arrayprint.py, I was just modifying it in #10032. Maybe I can rebase than on this PR and we can move the function.",
        "createdAt" : "2017-11-19T16:27:14Z",
        "updatedAt" : "2017-11-20T09:03:04Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "bfbd9c40-3f8d-460c-95b1-31a458420a21",
        "parentId" : "29468404-3b35-47a8-a53d-fabfe225365d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm confused - this file _is_ `arrayprint` - where is the other duplicate?",
        "createdAt" : "2017-11-19T20:11:45Z",
        "updatedAt" : "2017-11-20T09:03:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "55d4d7f5-5676-4ee0-946a-26d3b3ee420d",
        "parentId" : "29468404-3b35-47a8-a53d-fabfe225365d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Do you want me to split off a PR with just the first two commits, which we can merge first?",
        "createdAt" : "2017-11-19T20:20:13Z",
        "updatedAt" : "2017-11-20T09:03:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "12df83f0-d1aa-4323-a629-725346982562",
        "parentId" : "29468404-3b35-47a8-a53d-fabfe225365d",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Oh sorry I thought this was `ma/core.py`.  This change is fine.",
        "createdAt" : "2017-11-20T16:13:38Z",
        "updatedAt" : "2017-11-20T16:13:38Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bac6eed123c68560ffdb5d7f7093ad4015a9d85",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1183,1187 @@\n\ndef dtype_short_repr(dtype):\n    \"\"\"\n    Convert a dtype to a short form which evaluates to the same dtype."
  },
  {
    "id" : "dd437cb4-7229-4a80-abff-dc22ddfe697d",
    "prId" : 9941,
    "prUrl" : "https://github.com/numpy/numpy/pull/9941#pullrequestreview-74272709",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9194d97b-ce87-4898-a545-b96d74eaeef8",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Are we sure we don't want `float_mode` for consistency with `suppress_small`?",
        "createdAt" : "2017-11-05T05:27:39Z",
        "updatedAt" : "2017-11-05T05:27:39Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50f4725c8a0c2e8b71dd9c64c5fb103f5d6c987",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +484,488 @@        '-', omit the sign character of positive values. If 'legacy', print a\n        space for positive values except in 0d arrays.\n    floatmode : str, optional\n        Controls the interpretation of the `precision` option for\n        floating-point types. Can take the following values:"
  },
  {
    "id" : "b5b8b5b4-f792-434b-ae98-802f3dd6e4e5",
    "prId" : 9941,
    "prUrl" : "https://github.com/numpy/numpy/pull/9941#pullrequestreview-74272737",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72354573-f887-46fd-899e-d98c4d71297b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Same comment about leaving a public `FloatFormat` object visible, assuming we're considering this public API.\r\n\r\nDocstring saying `For np.floating objects` or something would be nice too",
        "createdAt" : "2017-11-05T05:30:07Z",
        "updatedAt" : "2017-11-05T05:31:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50f4725c8a0c2e8b71dd9c64c5fb103f5d6c987",
    "line" : 188,
    "diffHunk" : "@@ -1,1 +635,639 @@    return s\n\nclass FloatingFormat(object):\n    def __init__(self, data, precision, floatmode, suppress_small, sign=False):\n        # for backcompatibility, accept bools"
  },
  {
    "id" : "99a8d2ff-dbe3-4d1c-a96e-2a1e53170e55",
    "prId" : 9941,
    "prUrl" : "https://github.com/numpy/numpy/pull/9941#pullrequestreview-74272741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ea64dd2-2ab7-47e0-882c-3292b832e44e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Maybe `ComplexFloatingFormat` to match `np.complexfloating`? (#9962)",
        "createdAt" : "2017-11-05T05:30:35Z",
        "updatedAt" : "2017-11-05T06:51:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50f4725c8a0c2e8b71dd9c64c5fb103f5d6c987",
    "line" : 522,
    "diffHunk" : "@@ -1,1 +938,942 @@\n\nclass ComplexFormat(object):\n    def __init__(self, x, precision, floatmode, suppress_small, sign=False):\n        # for backcompatibility, accept bools"
  },
  {
    "id" : "83f426f8-ad58-4eae-9a88-2bb97fabb0bb",
    "prId" : 10030,
    "prUrl" : "https://github.com/numpy/numpy/pull/10030#pullrequestreview-77566028",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f7f5bd3-3e6c-420f-befc-aad4f633c200",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "this is an unrelated small doc tweak I am piggybacking on this PR",
        "createdAt" : "2017-11-17T21:27:28Z",
        "updatedAt" : "2017-11-18T03:53:53Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "47a12f148cd481af89a199f33ba3106a21dc53ae",
    "line" : 207,
    "diffHunk" : "@@ -1,1 +842,846 @@                            sign=False, pad_left=None, exp_digits=None):\n    \"\"\"\n    Format a floating-point scalar as a decimal string in scientific notation.\n\n    Provides control over rounding, trimming and padding. Uses and assumes"
  },
  {
    "id" : "a868e78c-fb99-4b10-ab21-988849471205",
    "prId" : 10030,
    "prUrl" : "https://github.com/numpy/numpy/pull/10030#pullrequestreview-77602611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04d1598a-322f-4726-8b69-58a16e40bbd8",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Way clearer now :)",
        "createdAt" : "2017-11-18T01:36:22Z",
        "updatedAt" : "2017-11-18T03:53:53Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a42394ed-8a34-4ee5-8cbb-c1b544f8315d",
        "parentId" : "04d1598a-322f-4726-8b69-58a16e40bbd8",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@eric-wieser If you are good with this, I'll make the fix and merge.",
        "createdAt" : "2017-11-18T01:48:29Z",
        "updatedAt" : "2017-11-18T03:53:53Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "47a12f148cd481af89a199f33ba3106a21dc53ae",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +718,722 @@\n        # choose exponential mode based on the non-zero finite values:\n        abs_non_zero = absolute(finite_vals[finite_vals != 0])\n        if len(abs_non_zero) != 0:\n            max_val = np.max(abs_non_zero)"
  },
  {
    "id" : "3ddd63f5-e722-4217-9277-25438d21ba05",
    "prId" : 10120,
    "prUrl" : "https://github.com/numpy/numpy/pull/10120#pullrequestreview-79744617",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "355b4b5c-c696-49f0-a8f5-e2b12d28c5c7",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Maybe default to `=False`, just in case anyone is relying on these internals? Not that we have to support them, but it's easy to do so.",
        "createdAt" : "2017-11-29T06:05:24Z",
        "updatedAt" : "2017-11-29T06:05:24Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "01a093a3-acb6-4490-92c7-1d67cf2add00",
        "parentId" : "355b4b5c-c696-49f0-a8f5-e2b12d28c5c7",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Actually, I want to gut this whole function to fix #9816, so let's leave this as is",
        "createdAt" : "2017-11-29T06:10:05Z",
        "updatedAt" : "2017-11-29T06:10:05Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "b49b20ff5c5154114eb41254cf449e195b5ba45e",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +619,623 @@\ndef _formatArray(a, format_function, rank, max_line_len, next_line_prefix,\n                 separator, edge_items, summary_insert, legacy):\n    \"\"\"formatArray is designed for two modes of operation:\n"
  },
  {
    "id" : "8cad655a-44ac-4da2-b180-37d204b30c96",
    "prId" : 10164,
    "prUrl" : "https://github.com/numpy/numpy/pull/10164#pullrequestreview-81457514",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60b18c74-971a-4bb1-bffc-5d7d1ca839e5",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Something for another PR - also pass `next_line_len = line_len - 2`, which solves the problem of `np.zeros((1,)*30 + (100,))` being far wider than `max_line_len` (guarded by `legacy`)",
        "createdAt" : "2017-12-06T09:24:31Z",
        "updatedAt" : "2017-12-06T16:54:14Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "d542d141f0667abd3501b48b38de245d5bbba4e1",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +646,650 @@\n        # when recursing, add a space to align with the [ added\n        next_hanging_indent = hanging_indent + ' '\n\n        a_len = a.shape[axis]"
  },
  {
    "id" : "7b23c2d4-28bb-4c50-9e1b-98d6f1ae94a3",
    "prId" : 10164,
    "prUrl" : "https://github.com/numpy/numpy/pull/10164#pullrequestreview-81596473",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de75f4a3-8a16-4ee7-9b76-2979a59e67d8",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Stripping `line` made no sense here. We remain compatible by also fixing the comparison, since in practice `line` had exactly one trailing space (`<snip>, '` or `<snip> '`), except when a custom separator was passed. ",
        "createdAt" : "2017-12-06T17:09:24Z",
        "updatedAt" : "2017-12-06T17:09:24Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "d542d141f0667abd3501b48b38de245d5bbba4e1",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +617,621 @@\ndef _extendLine(s, line, word, max_line_len, next_line_prefix):\n    if len((line + word).rstrip()) > max_line_len:\n        s += line.rstrip() + \"\\n\"\n        line = next_line_prefix"
  },
  {
    "id" : "c9f849c0-18af-482a-9028-fa2987d7de10",
    "prId" : 10164,
    "prUrl" : "https://github.com/numpy/numpy/pull/10164#pullrequestreview-81887060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6296e6cd-5bad-4def-bdaf-1c83e3356952",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Trivial, but while you are at it, could you flip: `a_len > 2*edge_items` (unless for you that gives cognitive dissonance; for me, one just calculated `a_len`, so it is obvious it should be compared to something)",
        "createdAt" : "2017-12-07T15:18:46Z",
        "updatedAt" : "2017-12-07T15:26:39Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "d542d141f0667abd3501b48b38de245d5bbba4e1",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +649,653 @@\n        a_len = a.shape[axis]\n        show_summary = summary_insert and 2*edge_items < a_len\n        if show_summary:\n            leading_items = edge_items"
  },
  {
    "id" : "d42cc0f9-0771-4499-a970-7cb5aecd5ae9",
    "prId" : 10172,
    "prUrl" : "https://github.com/numpy/numpy/pull/10172#pullrequestreview-82067111",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "884b4d93-3225-4c91-8a92-8701c4d963d5",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "We're not passing the separator in any more, so trailing spaces are \"real\"",
        "createdAt" : "2017-12-08T04:59:24Z",
        "updatedAt" : "2017-12-08T04:59:24Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7f84cdf526f872d797eba5786bd16e580212f4f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +617,621 @@\ndef _extendLine(s, line, word, line_width, next_line_prefix):\n    if len(line) + len(word) > line_width:\n        s += line.rstrip() + \"\\n\"\n        line = next_line_prefix"
  },
  {
    "id" : "3ed83feb-a67f-4b71-a9ea-49e9a9a9190e",
    "prId" : 10175,
    "prUrl" : "https://github.com/numpy/numpy/pull/10175#pullrequestreview-82070624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68d70753-7b78-4b01-9789-2c4defb7be9c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Not strictly needed here, but in future this could be passed to the format function for printing, say, line-wrapped strings, or nested ndarrays.",
        "createdAt" : "2017-12-08T05:41:57Z",
        "updatedAt" : "2017-12-08T05:41:58Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "528c8c8d8a06116ac2786279a4228290c158a1ab",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +687,691 @@\n            for i in range(trailing_items, 1, -1):\n                word = recurser(index + (-i,), next_hanging_indent, next_width)\n                s, line = _extendLine(s, line, word, elem_width, hanging_indent)\n                line += separator"
  },
  {
    "id" : "5e934d77-20a3-4059-b89d-dfd58c6d7881",
    "prId" : 10175,
    "prUrl" : "https://github.com/numpy/numpy/pull/10175#pullrequestreview-82070697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78b2dbdb-734b-4324-bac2-73b95bedf952",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Lines were getting long...",
        "createdAt" : "2017-12-08T05:42:31Z",
        "updatedAt" : "2017-12-08T05:42:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "528c8c8d8a06116ac2786279a4228290c158a1ab",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +720,724 @@\n            nested = recurser(index + (-1,), next_hanging_indent, next_width)\n            s += hanging_indent + nested\n\n        # remove the hanging indent, and wrap in []"
  },
  {
    "id" : "a8e47fc6-cfe5-4397-bf3e-51c509bb1928",
    "prId" : 10361,
    "prUrl" : "https://github.com/numpy/numpy/pull/10361#pullrequestreview-88969610",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28f5009c-e9fe-4d11-a2c9-9fef8e231a65",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Could also use `(i.rstrip() + 'j').ljust(len(i) + 1)`, but what you have is fine",
        "createdAt" : "2018-01-16T02:04:09Z",
        "updatedAt" : "2018-01-29T00:19:01Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "652892bf387344db6cd729fd5acbe4ac0c15b69c",
    "line" : 191,
    "diffHunk" : "@@ -1,1 +1138,1142 @@        # add the 'j' before the terminal whitespace in i\n        sp = len(i.rstrip())\n        i = i[:sp] + 'j' + i[sp:]\n\n        return r + i"
  },
  {
    "id" : "797be851-a739-4d2e-b364-c1f930ff8bc6",
    "prId" : 10367,
    "prUrl" : "https://github.com/numpy/numpy/pull/10367#pullrequestreview-88072616",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc993edc-9624-4afb-b6bc-7fe05ed1967a",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "There's the wider implication that this is not a good test for structured types, although since it fails only in case that don't matter, perhaps not worth investing time into.",
        "createdAt" : "2018-01-11T07:11:20Z",
        "updatedAt" : "2018-01-11T16:56:24Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "087619a78dedb3f491654d727d279c1dcb4fb480",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1251,1255 @@    # handle these separately so they don't give garbage like str256\n    if issubclass(dtype.type, flexible):\n        if dtype.names is not None:\n            return \"%s\" % str(dtype)\n        else:"
  },
  {
    "id" : "acf091c5-5cbe-4fec-8bbb-83e2265610c6",
    "prId" : 10544,
    "prUrl" : "https://github.com/numpy/numpy/pull/10544#pullrequestreview-99126162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1824ed8-561e-4255-99a8-38b3f4b3a97a",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "The change here is the underlying cause for the astropy failure https://github.com/astropy/astropy/issues/7214 -- but reverting it causes the recursion guard to fail.",
        "createdAt" : "2018-02-24T21:49:23Z",
        "updatedAt" : "2018-02-24T21:49:23Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "ac53221d-fde8-4f96-a027-851352317695",
        "parentId" : "f1824ed8-561e-4255-99a8-38b3f4b3a97a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think the better fix is to move the `asarray` inside the formatters, but that breaks users who decide to pass `str` as a formatter.",
        "createdAt" : "2018-02-24T22:58:14Z",
        "updatedAt" : "2018-02-24T22:58:14Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff12de3f3dead7f522ab5a1076fcef4fbbdf3314",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +472,476 @@    # subclasses yet, and we also need to avoid recursion issues in\n    # _formatArray with subclasses which return 0d arrays in place of scalars\n    a = asarray(a)\n\n    if a.size > options['threshold']:"
  },
  {
    "id" : "1f19f286-22e1-465a-be26-1fc9116a0d9d",
    "prId" : 10621,
    "prUrl" : "https://github.com/numpy/numpy/pull/10621#pullrequestreview-97423302",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12c0d03b-ca2f-416a-9c02-acf57d35874f",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Also to avoid `UPDATE_IF_COPY` interactions, but no need to mention that here",
        "createdAt" : "2018-02-19T00:25:40Z",
        "updatedAt" : "2018-02-19T04:22:14Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "50fde71f1ac0528f40ee216136b33fde41205ef2",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +792,796 @@        # recursive closures have a cyclic reference to themselves, which\n        # requires gc to collect (gh-10620). To avoid this problem, for\n        # performance and PyPy friendliness, we break the cycle:\n        recurser = None\n"
  },
  {
    "id" : "82e11b52-98f8-4acf-9bed-41d2a449bc69",
    "prId" : 10674,
    "prUrl" : "https://github.com/numpy/numpy/pull/10674#pullrequestreview-100805352",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd9588a4-edc5-4503-9d0d-1d216eb09e62",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What if `a` doesn't have `shape`? Should this be a try?",
        "createdAt" : "2018-03-02T01:35:15Z",
        "updatedAt" : "2018-03-02T01:35:15Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "9609db62-2806-4889-bb3e-0382cb2b5d2b",
        "parentId" : "fd9588a4-edc5-4503-9d0d-1d216eb09e62",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I assume this is checked somewhere up above?",
        "createdAt" : "2018-03-02T01:35:54Z",
        "updatedAt" : "2018-03-02T01:35:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "262edbe1-1878-4706-bac0-803dadb3cd3c",
        "parentId" : "fd9588a4-edc5-4503-9d0d-1d216eb09e62",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like `arraystring` requires an `ndarray`, or subclass thereof, as `a`, but that is not checked for. The documentation says `array_like`, which looks incorrect.",
        "createdAt" : "2018-03-02T15:13:09Z",
        "updatedAt" : "2018-03-02T15:13:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a30eceddee3bea889528d6961ff8282b6c166e5f",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +440,444 @@    # _formatArray with subclasses which return 0d arrays in place of scalars\n    data = asarray(a)\n    if a.shape == ():\n        a = data\n"
  },
  {
    "id" : "979417ec-cdd6-4626-b0e9-8d8dc4e25826",
    "prId" : 12115,
    "prUrl" : "https://github.com/numpy/numpy/pull/12115#pullrequestreview-162920369",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1ad9db5-7753-4bc6-8f53-dc1c9b7e2c3e",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Could the dispatcher be written\r\n```\r\ndef default1_dispatcher(*args, **kwargs):\r\n    return args[:1]\r\n```\r\nThen maybe a few of those could be put into overrides, imported, and reused. Of course there may be cases for a different dispatcher in special cases.",
        "createdAt" : "2018-10-08T23:49:42Z",
        "updatedAt" : "2018-10-08T23:49:43Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "b92b315e-b8db-4d27-96d1-dea19ef3dacf",
        "parentId" : "c1ad9db5-7753-4bc6-8f53-dc1c9b7e2c3e",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "This is a good idea, but even though most numpy functions have a meaningless first argument name, technically you can still use them as a keyword argument, e.g., `numpy.sum(a=array)`, in which `args` would be empty. So we need to have an exactly matching function signature, including the same argument names.",
        "createdAt" : "2018-10-09T00:00:18Z",
        "updatedAt" : "2018-10-09T00:00:38Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "2fffa01f-ca55-497b-901b-512a0dbbcfd3",
        "parentId" : "c1ad9db5-7753-4bc6-8f53-dc1c9b7e2c3e",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "At least for python 3.3+, we could use `inspect.signature` and set the `dispatcher.__signature__` as in this [stack overflow answer](https://stackoverflow.com/questions/1409295/set-function-signature-in-python), or is that too magical?\r\n\r\nEdit: formatting",
        "createdAt" : "2018-10-09T12:41:19Z",
        "updatedAt" : "2018-10-09T12:41:47Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "94e43509-b426-41a3-a4af-4884a5d1284f",
        "parentId" : "c1ad9db5-7753-4bc6-8f53-dc1c9b7e2c3e",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "I wonder if signature rewriting would let us restore the original traceback when the wrong arguments are supplied. With the current version of NumPy:\r\n```\r\nIn [2]: np.argmax(x=[1, 2, 3])\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-2-d25c18244167> in <module>()\r\n----> 1 np.argmax(x=[1, 2, 3])\r\n\r\nTypeError: argmax() got an unexpected keyword argument 'x'\r\n```\r\nbut after this PR:\r\n```\r\nIn [2]: np.argmax(x=[1, 2, 3])\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-2-d25c18244167> in <module>()\r\n----> 1 np.argmax(x=[1, 2, 3])\r\n\r\n~/dev/numpy/numpy/core/overrides.py in public_api(*args, **kwargs)\r\n    147         @functools.wraps(implementation)\r\n    148         def public_api(*args, **kwargs):\r\n--> 149             relevant_args = dispatcher(*args, **kwargs)\r\n    150             return array_function_implementation_or_override(\r\n    151                 implementation, public_api, relevant_args, args, kwargs)\r\n\r\nTypeError: _argmax_dispatcher() got an unexpected keyword argument 'x'\r\n```",
        "createdAt" : "2018-10-09T13:56:40Z",
        "updatedAt" : "2018-10-09T13:56:40Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "774e27f5-7301-4735-b355-05854cd017fc",
        "parentId" : "c1ad9db5-7753-4bc6-8f53-dc1c9b7e2c3e",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Replacing `public_api.__signature__` doesn't effect the error message, but it looks like this is something that the [decorator library](https://pypi.org/project/decorator/) would fix. So maybe that's worth doing after all...",
        "createdAt" : "2018-10-09T14:27:54Z",
        "updatedAt" : "2018-10-09T14:27:54Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "607842ab59b0479c485eb6fa30778f47dccc224a",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +507,511 @@\n\n@array_function_dispatch(_array2string_dispatcher)\ndef array2string(a, max_line_width=None, precision=None,\n                 suppress_small=None, separator=' ', prefix=\"\","
  },
  {
    "id" : "aed86646-9816-4a37-b65f-71559481cdc3",
    "prId" : 12253,
    "prUrl" : "https://github.com/numpy/numpy/pull/12253#pullrequestreview-173607491",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09f72ac4-5340-42e5-849d-bd89fd0e927c",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "`print()` will produce `random` here and elsewhere when handling an array",
        "createdAt" : "2018-11-09T22:01:15Z",
        "updatedAt" : "2018-12-14T18:23:52Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "28f8a85b9ece5773a8ac75ffcd2502fc93612eff",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +1600,1604 @@    >>> a\n    HA! - What are you going to do now?\n    >>> _ = a\n    >>> # [0 1 2 3 4 5 6 7 8 9]\n"
  }
]