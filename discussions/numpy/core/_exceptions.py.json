[
  {
    "id" : "52dcacbb-5166-43c2-b76c-50a09f495384",
    "prId" : 12593,
    "prUrl" : "https://github.com/numpy/numpy/pull/12593#pullrequestreview-186612439",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7840762-ee1e-4213-8a3a-a6ac89d0f93a",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Might it make sense to have this as `UFuncError(Exception)` and then inherit from `TypeError` in the cases below? That would leave us free to also use this class for errors that need to inherit from `ValueError` later.\r\n\r\nThough, thinking again, perhaps that is just as easily done by later doing:\r\n```\r\nclass UFuncError(Exception):\r\n    <what you have now>\r\n\r\nclass UFuncTypeError(UFuncError, TypeError):\r\n    pass\r\n\r\nclass UFuncValueError(UFuncError, ValueError):\r\n    pass\r\n```",
        "createdAt" : "2018-12-19T15:56:43Z",
        "updatedAt" : "2019-01-20T00:59:29Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c2296b242be4fe2fce46daf06a1e360ec267a08",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +32,36 @@\n\nclass UFuncTypeError(TypeError):\n    \"\"\" Base class for all ufunc exceptions \"\"\"\n    def __init__(self, ufunc):"
  },
  {
    "id" : "d265768e-f18f-413a-9129-289d7f582c38",
    "prId" : 13321,
    "prUrl" : "https://github.com/numpy/numpy/pull/13321#pullrequestreview-226366742",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2751be2e-4d22-4b27-a2ee-d193814a60fa",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Perhaps we should find a better place for set_module?",
        "createdAt" : "2019-04-13T19:41:15Z",
        "updatedAt" : "2019-04-13T19:41:16Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2ee06eed-d927-4ba6-a843-0146a38a96be",
        "parentId" : "2751be2e-4d22-4b27-a2ee-d193814a60fa",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Probably. At least `overrides.py` does not create any circular imports yet.",
        "createdAt" : "2019-04-13T19:46:06Z",
        "updatedAt" : "2019-04-13T19:46:07Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b8bcc33e1fb75c7fed4cc0d83fd2640da5e1e77",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +6,10 @@users who silence the exceptions.\n\"\"\"\nfrom numpy.core.overrides import set_module\n\ndef _unpack_tuple(tup):"
  }
]