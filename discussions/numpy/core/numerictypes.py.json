[
  {
    "id" : "58bcd7f4-0254-4550-a712-5bc349c50f40",
    "prId" : 4547,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3f16762-f0b3-4bd1-a541-47c5d8721885",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Not sure about this. Integral subtypes Rational and should have numerator and denominator properties. I don't think we have those (yet).\n",
        "createdAt" : "2014-03-25T14:08:16Z",
        "updatedAt" : "2014-03-25T15:49:19Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "44be277a858c7ac466cc82d2acff8df075d914af",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +963,967 @@\ndef _register_types():\n    numbers.Integral.register(integer)\n    numbers.Complex.register(inexact)\n    numbers.Real.register(floating)"
  },
  {
    "id" : "a616d085-fc11-4e2a-80a7-0d94105d9d1c",
    "prId" : 9505,
    "prUrl" : "https://github.com/numpy/numpy/pull/9505#pullrequestreview-53584893",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e69beec-650a-4748-8563-b01b996f68d3",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Note the only way that `len(mro) == 1` is if `arg2 is object`, which should never happen - but we had it before too, so...",
        "createdAt" : "2017-08-01T18:01:56Z",
        "updatedAt" : "2017-08-06T02:57:20Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "091b8c3b16d39d18f6921f9a17d06c1652b40dca",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +763,767 @@            # basestring\n            mro = arg2.mro()\n            arg2 = mro[1] if len(mro) > 1 else mro[0]\n\n            def type_repr(x):"
  },
  {
    "id" : "879848b4-4cdf-4370-bbdd-11fe5b92a9f6",
    "prId" : 11328,
    "prUrl" : "https://github.com/numpy/numpy/pull/11328#pullrequestreview-128935099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5485579-b71e-4290-853c-78da1780c173",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Total nitpick, but just `['u' + t for t in _int_ctypes]` is faster (and clearer)",
        "createdAt" : "2018-06-14T14:53:10Z",
        "updatedAt" : "2018-06-14T14:56:07Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "7e30b643-48fe-4927-a446-9f3c47d580cd",
        "parentId" : "c5485579-b71e-4290-853c-78da1780c173",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "A list comprehension would leak `t` into the module scope, unlike the above which does not.",
        "createdAt" : "2018-06-14T15:48:12Z",
        "updatedAt" : "2018-06-14T15:48:12Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e87daa44-5c36-484b-806c-c3faaf7b2323",
        "parentId" : "c5485579-b71e-4290-853c-78da1780c173",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Ah, had not thought about that - OK, would seem all good to go then!",
        "createdAt" : "2018-06-14T16:29:11Z",
        "updatedAt" : "2018-06-14T16:29:11Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "d167bc8b-4c33-42dc-9725-90418b1d4744",
        "parentId" : "c5485579-b71e-4290-853c-78da1780c173",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Although I think that is fixed in recent Python",
        "createdAt" : "2018-06-14T19:25:45Z",
        "updatedAt" : "2018-06-14T19:25:45Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "515215d23c1647c5ae3734502b629cf94c7e2249",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +314,318 @@# as the sized name.\n_int_ctypes = ['long', 'longlong', 'int', 'short', 'byte']\n_uint_ctypes = list('u' + t for t in _int_ctypes)\n\ndef _add_aliases():"
  },
  {
    "id" : "cdf40251-de35-4a58-9252-59eb71e3ba80",
    "prId" : 11340,
    "prUrl" : "https://github.com/numpy/numpy/pull/11340#pullrequestreview-129249844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "838ba9d1-b26d-4c75-98fb-2b102870a351",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "A bug for a later PR: These two lines should be run unconditionally.",
        "createdAt" : "2018-06-15T17:06:22Z",
        "updatedAt" : "2018-06-15T17:06:22Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "97a29506db51a900abf1634c932e598969010ca0",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +350,354 @@        sctypeNA[na_name] = info.type\n        sctypeNA[info.type] = na_name\n        sctypeNA[info.char] = na_name\n\n        assert char != ''"
  },
  {
    "id" : "efb81392-efd6-405f-8d55-cd963b0532ee",
    "prId" : 11921,
    "prUrl" : "https://github.com/numpy/numpy/pull/11921#pullrequestreview-154268974",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fb16da6-a0f0-4287-bee5-f72c4b9d57e0",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Strictly speaking, bytes might not be 8 bits, but I expect much else would break in that situation, starting with unrecognized types.",
        "createdAt" : "2018-09-11T14:52:48Z",
        "updatedAt" : "2018-09-11T14:52:48Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "abf3f9bb-7487-44c4-844b-01552fb516bf",
        "parentId" : "7fb16da6-a0f0-4287-bee5-f72c4b9d57e0",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Good point - I doubt this is the only place that `8` is used though. At any rate, I'd hope that no one else ever calls this function.",
        "createdAt" : "2018-09-11T15:48:19Z",
        "updatedAt" : "2018-09-11T15:48:20Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfead64385e5ffb95b3053d5f955117fd81d4705",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +270,274 @@\n        # some third-party type - make a best-guess\n        return dtype(obj).itemsize * 8\n    else:\n        return info.bits"
  },
  {
    "id" : "71a8e630-e556-4747-960a-403474ac5d97",
    "prId" : 12179,
    "prUrl" : "https://github.com/numpy/numpy/pull/12179#pullrequestreview-165151915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "956b0904-24fd-4105-a3cf-e6c0318b0874",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Same remark about this now raising `RuntimeError` instead of `KeyError` for weird dtypes.",
        "createdAt" : "2018-10-16T13:17:40Z",
        "updatedAt" : "2018-10-16T13:17:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "823431cb61233693f3ffebf15bf7ec350872638c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +182,186 @@        return t\n    t = g\n    base = _kind_name(dtype(t))\n    if base in sctypes:\n        return sctypes[base][-1]"
  },
  {
    "id" : "386d6d3e-262c-4e62-9313-8a3d27100296",
    "prId" : 13054,
    "prUrl" : "https://github.com/numpy/numpy/pull/13054#pullrequestreview-208547399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7bc02e6-0273-4ebe-8145-ddf6615abb11",
        "parentId" : null,
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "Added for consistency with all the other exported functions in the module",
        "createdAt" : "2019-02-27T14:20:36Z",
        "updatedAt" : "2019-02-27T14:58:25Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      }
    ],
    "commit" : "194927d5aa993f6b68248b24d374a29d26a261dd",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +141,145 @@                   'complex192', 'complex256', 'complex512', 'object']\n\n@set_module('numpy')\ndef maximum_sctype(t):\n    \"\"\""
  }
]