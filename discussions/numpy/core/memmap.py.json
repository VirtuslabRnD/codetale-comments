[
  {
    "id" : "9b81e8f7-0398-483b-b6bd-aba0f6d570cd",
    "prId" : 3890,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f404999d-b069-4afb-8c19-eb6964218d2c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Interesting. You have tested that?\n",
        "createdAt" : "2013-10-10T16:24:34Z",
        "updatedAt" : "2013-10-10T16:24:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "19b04dd7-a480-48f4-8a55-793abe31306f",
        "parentId" : "f404999d-b069-4afb-8c19-eb6964218d2c",
        "authorId" : "d681f6df-7cf2-484e-bbc0-ea3839eafa73",
        "body" : "Yes, see here:\n\n   http://mail.scipy.org/pipermail/numpy-discussion/2013-October/068020.html\n",
        "createdAt" : "2013-10-10T16:43:22Z",
        "updatedAt" : "2013-10-10T17:17:21Z",
        "lastEditedBy" : "d681f6df-7cf2-484e-bbc0-ea3839eafa73",
        "tags" : [
        ]
      },
      {
        "id" : "94a457b8-75d7-4cec-beda-95d0e07f3f28",
        "parentId" : "f404999d-b069-4afb-8c19-eb6964218d2c",
        "authorId" : "d681f6df-7cf2-484e-bbc0-ea3839eafa73",
        "body" : "To be more specific:\n\nThe `offset` argument to _numpy.memmap_ gets (more or less directly) passed to Python's _mmap.mmap_. In the _mmap_ docstring, it says\n\n> offset may be specified as a non-negative integer offset. mmap references will be relative to the offset from the beginning of the file. offset defaults to 0. offset must be a multiple of the ALLOCATIONGRANULARITY.\n",
        "createdAt" : "2013-10-10T17:20:48Z",
        "updatedAt" : "2013-10-10T17:20:48Z",
        "lastEditedBy" : "d681f6df-7cf2-484e-bbc0-ea3839eafa73",
        "tags" : [
        ]
      }
    ],
    "commit" : "86f956a0e8c37acbb00850fb28b2bebc826048f3",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +69,73 @@        additional data. By default, ``memmap`` will start at the beginning of\n        the file, even if ``filename`` is a file pointer ``fp`` and\n        ``fp.tell() != 0``.\n    shape : tuple, optional\n        The desired shape of the array. If ``mode == 'r'`` and the number"
  },
  {
    "id" : "f910fc91-28cf-4a61-9deb-918bd58e7709",
    "prId" : 10551,
    "prUrl" : "https://github.com/numpy/numpy/pull/10551#pullrequestreview-95783924",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5ba6a19-04bf-46ff-adae-d9fae5a09a52",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Strange indentation.",
        "createdAt" : "2018-02-12T13:16:21Z",
        "updatedAt" : "2018-09-23T16:42:39Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "149c8e892e51251e9e3bbc8585f6b887db72f2e9",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +234,238 @@                if bytes % _dbytes:\n                    raise ValueError(\"Size of available data is not a \"\n                            \"multiple of the data-type size.\")\n                size = bytes // _dbytes\n                shape = (size,)"
  },
  {
    "id" : "78b147c9-8758-4d7d-a277-8c2f73968e0d",
    "prId" : 12157,
    "prUrl" : "https://github.com/numpy/numpy/pull/12157#pullrequestreview-164477281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd56530b-6d46-4dca-bf21-5920443bb5a9",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is the only remaining use of `is_pathlib_path`, which is needed for a weird special case.",
        "createdAt" : "2018-10-12T14:28:15Z",
        "updatedAt" : "2018-10-12T15:39:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "9d61740f-61e6-4cbf-9fcb-bdcc9fac6eef",
        "parentId" : "dd56530b-6d46-4dca-bf21-5920443bb5a9",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Since we need `is_pathlib_path` anyway, PR #11348 more straight-forward and simpler.",
        "createdAt" : "2018-10-13T21:10:26Z",
        "updatedAt" : "2018-10-13T21:10:26Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "dc009438-2c60-4dcc-8141-eeb7307b8f8a",
        "parentId" : "dd56530b-6d46-4dca-bf21-5920443bb5a9",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is orthogonal to PR #11348 - this makes numpy work with backports of pathlib too / third-party objects implementing `__fspath__` too.",
        "createdAt" : "2018-10-13T21:34:35Z",
        "updatedAt" : "2018-10-13T21:34:35Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "489362c0779bd60c688ce87baf9ecd6ac9ccf938",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +270,274 @@                # special case - if we were constructed with a pathlib.path,\n                # then filename is a path object, not a string\n                self.filename = filename.resolve()\n            elif hasattr(fid, \"name\") and isinstance(fid.name, basestring):\n                # py3 returns int for TemporaryFile().name"
  }
]