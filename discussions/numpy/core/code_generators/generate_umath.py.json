[
  {
    "id" : "12e02fe1-2244-4cac-aebe-5906b1de4db7",
    "prId" : 4852,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31a85d4d-afc8-4ac7-8124-e91741bb4ecc",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Would it not be better to put this if first?  I think this if block can be cleaned up a bit.\n",
        "createdAt" : "2014-07-09T19:37:28Z",
        "updatedAt" : "2014-07-09T19:37:28Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ee56eb6f5cf60a4a1910faf0f1d4c494eefedfc",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +911,915 @@                datalist.append('(void *)NULL')\n                funclist.append('%s_%s_%s_%s' % (tname, t.in_, t.out, name))\n            elif isinstance(t.func_data, FuncNameSuffix):\n                datalist.append('(void *)NULL')\n                tname = english_upper(chartoname[t.type])"
  },
  {
    "id" : "ad3ba575-c263-4441-a624-8c0488b7f89b",
    "prId" : 5512,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36662243-d08e-49a6-9cba-9163ed35de58",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "I know PEP 8 is kind of fuzzy around this, but why the extra indent? It can hardly be confused with the next line.\n",
        "createdAt" : "2015-01-27T23:46:25Z",
        "updatedAt" : "2015-01-28T00:01:37Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "de97b8a8-a110-4fbe-8bbb-c75921a7b863",
        "parentId" : "36662243-d08e-49a6-9cba-9163ed35de58",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Because `%s_functions[%d] = PyUFunc_%s%s;' % (name, k, thedict[t.type], astype)` is just one statement broken at `%`, which is sort of like a binary operator. I don't feel strongly about it, and could easily go either way as there seems to be nothing in PEP8 about that specific case.\n",
        "createdAt" : "2015-01-28T00:13:08Z",
        "updatedAt" : "2015-01-28T00:13:08Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4b352442-5d06-4ae2-a56a-3226421320cf",
        "parentId" : "36662243-d08e-49a6-9cba-9163ed35de58",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Probably the rule in this case should be `least surprise`, and you have been surprised ;)\n",
        "createdAt" : "2015-01-28T00:35:38Z",
        "updatedAt" : "2015-01-28T00:35:38Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "eb9dcc25-869b-443b-b363-4e25cb716d3c",
        "parentId" : "36662243-d08e-49a6-9cba-9163ed35de58",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "I think  that, with time, I'll eventually learn to live with having been surprised by this... ;-)\n\nI was just curious what your rationale was, leave it as it is, you probably have a thing or two more pressing than iterating whitespace choices.\n",
        "createdAt" : "2015-01-28T00:55:05Z",
        "updatedAt" : "2015-01-28T00:55:05Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "50cd57cc5c9375c7c925dc9bd7924e7184dfb92e",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +901,905 @@                    astype = '_As_%s' % thedict[t.astype]\n                astr = ('%s_functions[%d] = PyUFunc_%s%s;' %\n                           (name, k, thedict[t.type], astype))\n                code2list.append(astr)\n                if t.type == 'O':"
  },
  {
    "id" : "52bb91f3-74b5-43c6-8b39-458b145e9a35",
    "prId" : 8774,
    "prUrl" : "https://github.com/numpy/numpy/pull/8774#pullrequestreview-36633395",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34a67b4b-d97d-40be-ad69-00a3dc06bb0d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Got this wrong until now. The identity of gcd is `0` since  by definition, `gcd(a, 0) == a`.\r\n\r\nThe identity for `lcm` is some kind of epsilon. For the integers, that epsilon is simply `1` (`lcm(a, 1) = a`). However, for the rationals, (ie `decimal.Decimal`), this is incorrect (`lcm(0.2, 1) != 0.2`), nor is such an epsilon really representable anyway.",
        "createdAt" : "2017-05-06T01:04:41Z",
        "updatedAt" : "2017-12-13T04:58:26Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "58998a87f4231ea7ede6352df949c8b746830df6",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +885,889 @@          ),\n'lcm' :\n    Ufunc(2, 1, None,\n          docstrings.get('numpy.core.umath.lcm'),\n          \"PyUFunc_SimpleBinaryOperationTypeResolver\","
  },
  {
    "id" : "63638c35-8880-4466-9248-8765ac41cb74",
    "prId" : 8955,
    "prUrl" : "https://github.com/numpy/numpy/pull/8955#pullrequestreview-33108445",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c1b6fdf-743a-4699-8280-ebfc69a1fbf7",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Previously we never did any error checking here, which seems wrong",
        "createdAt" : "2017-04-17T22:47:41Z",
        "updatedAt" : "2018-11-12T17:16:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "e044ae30ad80250ad9add0ff6e56ab972e1ec3d5",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +1064,1068 @@                Py_DECREF(identity);\n            }}\n            if (f == NULL) {{\n                return -1;\n            }}"
  },
  {
    "id" : "6cbfbb92-2b44-464f-b3c5-6dbc8d5fb835",
    "prId" : 8955,
    "prUrl" : "https://github.com/numpy/numpy/pull/8955#pullrequestreview-33108771",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "172195bb-cd85-4e91-89c3-19be414b7df2",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`Zero` wasn't really correct, but there was previously no way to specify `False`",
        "createdAt" : "2017-04-17T22:49:55Z",
        "updatedAt" : "2018-11-12T17:16:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "e044ae30ad80250ad9add0ff6e56ab972e1ec3d5",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +483,487 @@          ),\n'logical_xor':\n    Ufunc(2, 1, False_,\n          docstrings.get('numpy.core.umath.logical_xor'),\n          'PyUFunc_SimpleBinaryComparisonTypeResolver',"
  },
  {
    "id" : "e93930a2-f679-4e92-91e4-852007f6da27",
    "prId" : 13031,
    "prUrl" : "https://github.com/numpy/numpy/pull/13031#pullrequestreview-207191422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f83faaf0-01e8-47bb-a8be-8c1efcf48c16",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This isn't really relevent, but I think it is a little clearer",
        "createdAt" : "2019-02-25T02:01:30Z",
        "updatedAt" : "2019-02-25T02:01:30Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "3186cc54f55827006096c3d33430a077e4bc8c79",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +83,87 @@    D='nc_%s',\n    G='nc_%sl'\n)\n\ndef build_func_data(types, f):"
  },
  {
    "id" : "1cd372ef-6c74-4051-be10-1a8b90d530f7",
    "prId" : 14554,
    "prUrl" : "https://github.com/numpy/numpy/pull/14554#pullrequestreview-290967925",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d41a97ee-55aa-4035-932d-f15276600b2b",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Are you sure this works with/without the simd variants now?",
        "createdAt" : "2019-09-20T05:40:28Z",
        "updatedAt" : "2019-09-20T05:40:29Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "a62a8e7e-8df9-44c4-a301-f628384a5757",
        "parentId" : "d41a97ee-55aa-4035-932d-f15276600b2b",
        "authorId" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "body" : "The simd variants are only generated for type f.  This change removes the duplicated signature ee->e.",
        "createdAt" : "2019-09-20T06:05:00Z",
        "updatedAt" : "2019-09-20T06:05:13Z",
        "lastEditedBy" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "tags" : [
        ]
      }
    ],
    "commit" : "055f8f297797867d9e9b8b84d51b76bb8d5a29ac",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +665,669 @@          TD('e', f='cos', astype={'e':'f'}),\n          TD('f', simd=[('fma', 'f'), ('avx512f', 'f')]),\n          TD('fdg' + cmplx, f='cos'),\n          TD(P, f='cos'),\n          ),"
  },
  {
    "id" : "86e03bb1-3222-44ce-8248-a03119da399b",
    "prId" : 16247,
    "prUrl" : "https://github.com/numpy/numpy/pull/16247#pullrequestreview-521166117",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bc605af-3905-414b-b488-f11aab669744",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "This will fix the failing 32-bit wheel build?",
        "createdAt" : "2020-10-31T16:31:57Z",
        "updatedAt" : "2020-11-03T13:20:28Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "7eee6881-cba3-4737-b133-426b700f123a",
        "parentId" : "8bc605af-3905-414b-b488-f11aab669744",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "This change activates the new dispatcher.\r\n32-bit wheel build fails due to aggressive optimization gcc made that doesn't respect zero division,\r\nthis issue was exist also on 64-bit when AVX2 and AVX512F aren't enabled.\r\n\r\nthe fix mainly here:\r\nhttps://github.com/numpy/numpy/blob/1f872658984b2f8b0fda7022e72ad333a62864f3/numpy/core/src/umath/loops_unary_fp.dispatch.c.src#L129-L133\r\n\r\nwhere partial load intrinsic `npyv_load_till_*` and `npyv_loadn_till_*` guarantee adding \"one\" to the tail of the vector.\r\n\r\nI also made a slight change in the last push to generate using NPYV version for overlapped arrays, also to guarantee the same precsion on armhf.\r\n\r\nhttps://github.com/numpy/numpy/blob/1f872658984b2f8b0fda7022e72ad333a62864f3/numpy/core/src/umath/loops_unary_fp.dispatch.c.src#L202-L206",
        "createdAt" : "2020-10-31T20:08:24Z",
        "updatedAt" : "2020-11-03T13:20:28Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c811166c4ff425ffe9f6452484388897fceada03",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +360,364 @@          docstrings.get('numpy.core.umath.reciprocal'),\n          None,\n          TD(ints+inexact, simd=[('avx2', ints)], dispatch=[('loops_unary_fp', 'fd')]),\n          TD(O, f='Py_reciprocal'),\n          ),"
  }
]