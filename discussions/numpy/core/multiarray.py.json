[
  {
    "id" : "30b6d404-cc34-4615-a6f1-b09b358bde0a",
    "prId" : 10855,
    "prUrl" : "https://github.com/numpy/numpy/pull/10855#pullrequestreview-201363209",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d30e053e-29ae-46af-8df9-0d44dbeb6fc2",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Wait, did I miss this before. Not that I think anyone would use `myarray=...` here, but passing as a kwarg was supported, so there is a tiny chance of a regression?",
        "createdAt" : "2019-02-07T21:44:57Z",
        "updatedAt" : "2019-02-25T15:22:35Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "5e413772-5ece-441e-bf72-2301c8f69c93",
        "parentId" : "d30e053e-29ae-46af-8df9-0d44dbeb6fc2",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "The issue was that originally the kwarg wasn't being unpacked with the documented name. I think the chance of regression is effectively zero.",
        "createdAt" : "2019-02-07T22:50:26Z",
        "updatedAt" : "2019-02-25T15:22:35Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      }
    ],
    "commit" : "df00dbf6e5d2c4957da9f3e0c171bda292009c2f",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1159,1163 @@\n@array_function_from_c_func_and_dispatcher(_multiarray_umath.unpackbits)\ndef unpackbits(a, axis=None, count=None):\n    \"\"\"\n    unpackbits(a, axis=None, count=None)"
  },
  {
    "id" : "a9b41f14-7b85-4f8f-8514-d1d937c8229b",
    "prId" : 10855,
    "prUrl" : "https://github.com/numpy/numpy/pull/10855#pullrequestreview-207454429",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af50c8e3-f4c5-4fa1-b627-78742c0fb01d",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Single quotes are a shortcut for :py:`value` and are meant to be linked to python documentation. When creating the link fails, the text is rendered in italics. Since the intention here is for code formatting, they should all be two quotes. You can see the difference in the way the default axis argument `None` used to be rendered [here](https://docs.scipy.org/doc/numpy-1.15.4/reference/generated/numpy.unpackbits.html?highlight=unpackbits#numpy.unpackbits) vs this PR [here](https://5920-908607-gh.circle-artifacts.com/0/home/circleci/repo/doc/build/html/reference/generated/numpy.unpackbits.html?highlight=unpackbits#numpy.unpackbits)",
        "createdAt" : "2019-02-17T09:35:49Z",
        "updatedAt" : "2019-02-25T15:22:36Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "13090502-f868-4904-836d-32629e5deac1",
        "parentId" : "af50c8e3-f4c5-4fa1-b627-78742c0fb01d",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "@mattip. Most of the docs I see have single quotes. I prefer the aesthetic of the italicized version to the code formatted one, and technically None is a python object. However, I don't care much one way or the other, so will fix as you request ASAP.",
        "createdAt" : "2019-02-17T17:09:48Z",
        "updatedAt" : "2019-02-25T15:22:36Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "09f146c5-133f-495e-9dfa-ce9ab20fed95",
        "parentId" : "af50c8e3-f4c5-4fa1-b627-78742c0fb01d",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "It is strange that with single quotes, it wouldn't link to the python documentation of `None` already. Indeed, that seems a bug...",
        "createdAt" : "2019-02-18T02:43:19Z",
        "updatedAt" : "2019-02-25T15:22:36Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "7ed3e271-4ca6-4fd7-b7fd-e4fd1aef9180",
        "parentId" : "af50c8e3-f4c5-4fa1-b627-78742c0fb01d",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I think I  slightly prefer the double backticks for None (there is no point in linking it to the python docs anyway).\r\n\r\nhttps://docs.scipy.org/doc/numpy/docs/howto_document.html has some examples using single ticks for the kwargs, and actually nothing for `None`. Could be nice to just decide for once, not sure I care though.",
        "createdAt" : "2019-02-21T21:17:15Z",
        "updatedAt" : "2019-02-25T15:22:36Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "9e41577b-75e7-4f28-a06a-7c8303e533b7",
        "parentId" : "af50c8e3-f4c5-4fa1-b627-78742c0fb01d",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "I'll grep and count both versions in the existing code. My intuition tells me that single ticks dominate, but I'm not sure. Majority rules? :)",
        "createdAt" : "2019-02-22T04:00:24Z",
        "updatedAt" : "2019-02-25T15:22:36Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "542e2bd1-a25b-4b85-9e3d-9cac257ebc95",
        "parentId" : "af50c8e3-f4c5-4fa1-b627-78742c0fb01d",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "`None` is just an example here. There are other single-ticked words in the documentation change: a, count, index, ",
        "createdAt" : "2019-02-22T10:13:40Z",
        "updatedAt" : "2019-02-25T15:22:36Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "abf3f9df-629a-4420-ac21-0c5204ad81f0",
        "parentId" : "af50c8e3-f4c5-4fa1-b627-78742c0fb01d",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yeah, although for a, count and axis at least, they are arguments, and the howto document examples use single backticks for those. However, while I would guess a lot of people somewhat use that document, I doubt it is applied consistently with respect to these examples in any case.",
        "createdAt" : "2019-02-22T14:59:05Z",
        "updatedAt" : "2019-02-25T15:22:36Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "86c77ecf-68ee-4d88-aad1-902d24c89d86",
        "parentId" : "af50c8e3-f4c5-4fa1-b627-78742c0fb01d",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Let's call it a niggling nit and ignore it, is this ready for merge otherwise?",
        "createdAt" : "2019-02-23T17:18:32Z",
        "updatedAt" : "2019-02-25T15:22:36Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "e28fdc04-f39d-4adc-ba76-23701951eaf0",
        "parentId" : "af50c8e3-f4c5-4fa1-b627-78742c0fb01d",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "There were 145 occurrences of None with single quotes and 147 occurrences with double quotes until this PR came along. I will change back to double. Sorry for the holdup.",
        "createdAt" : "2019-02-25T15:19:04Z",
        "updatedAt" : "2019-02-25T15:22:36Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "c1903fc6-7661-4a46-bdb4-a5d65bac9734",
        "parentId" : "af50c8e3-f4c5-4fa1-b627-78742c0fb01d",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "@mattip If you want me to go through and normalize all the other occurences, I can do that fairly quickly, since I have the full list and a script that can do it right in front of me.",
        "createdAt" : "2019-02-25T15:23:52Z",
        "updatedAt" : "2019-02-25T15:23:53Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      }
    ],
    "commit" : "df00dbf6e5d2c4957da9f3e0c171bda292009c2f",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +1187,1191 @@        exceed the available number of bits.\n\n        .. versionadded:: 1.17.0\n\n    Returns"
  },
  {
    "id" : "4f6f636a-ea7a-43b6-9ca2-d8d5eb14eb50",
    "prId" : 10915,
    "prUrl" : "https://github.com/numpy/numpy/pull/10915#pullrequestreview-142247157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0187c1d8-b4e0-4b5e-aaec-66dd53050104",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think this file could do with either a docstring or a comment, explaining why it exists and is just a bunch of imports",
        "createdAt" : "2018-08-01T06:54:28Z",
        "updatedAt" : "2018-08-21T17:07:18Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "03e08148eb303c7799a18db78b8087f78e5cc2fc",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +6,10 @@\"\"\"\n\nfrom . import _multiarray_umath\nfrom numpy.core._multiarray_umath import *\nfrom numpy.core._multiarray_umath import (_fastCopyAndTranspose, _flagdict, _insert,"
  },
  {
    "id" : "cd811430-c08d-46cb-9ccf-4a3a502c43ce",
    "prId" : 11880,
    "prUrl" : "https://github.com/numpy/numpy/pull/11880#pullrequestreview-152316417",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9463f35-5a0d-4d43-a809-7a4700830ad7",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "~Is the extra blank line on purpose ( also appears in the other file)~\r\n\r\nEdit: nevermind, no extra line.",
        "createdAt" : "2018-09-05T02:28:16Z",
        "updatedAt" : "2018-09-05T02:29:14Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "4834bb96f43c1a2e864d7d46b838c3029bcffc5a",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +12,16 @@    _fastCopyAndTranspose, _flagdict, _insert, _reconstruct, _vec_string,\n    _ARRAY_API, _monotonicity\n    )\n\n__all__ = ["
  },
  {
    "id" : "4292512d-9529-4179-8d86-94171cd7072e",
    "prId" : 12175,
    "prUrl" : "https://github.com/numpy/numpy/pull/12175#pullrequestreview-164787829",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec12f02c-aac1-4f12-a6b1-048b6e1d2c55",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "This is risky: `None` is a valid and possibly useful value for `x` or `y`:\r\n```\r\nIn [2]: np.where(np.arange(4) > 1, True, None)\r\nOut[2]: array([None, None, True, True], dtype=object)\r\n```",
        "createdAt" : "2018-10-15T14:57:59Z",
        "updatedAt" : "2018-10-16T16:00:34Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "002ca06c-da6d-4501-9cfb-5b3368ce23d5",
        "parentId" : "ec12f02c-aac1-4f12-a6b1-048b6e1d2c55",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Yes, but the keyword arguments that are actually used by the function are defined by `where` as `np._NoValue`, not the dispatcher function (which uses `None` as enforced by verification in `array_function_dispatch).\r\n\r\nI know there's unit test for this behavior, since I got a test failure with my first version of `where`.",
        "createdAt" : "2018-10-15T15:30:11Z",
        "updatedAt" : "2018-10-16T16:00:34Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "328aa34f-d4fd-4c39-b908-dcddbe134651",
        "parentId" : "ec12f02c-aac1-4f12-a6b1-048b6e1d2c55",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "OK, I was confused and looking closer I recall why this works: the dispatcher signature is not really used beyond just giving the relevant names of the arguments; the original `args, kwargs` are passed on to any implementation.",
        "createdAt" : "2018-10-15T16:23:50Z",
        "updatedAt" : "2018-10-16T16:00:34Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "3efa38c4ec4970c95ac4b481f4f3671d409749f5",
    "line" : 248,
    "diffHunk" : "@@ -1,1 +273,277 @@\n\ndef _where_dispatcher(condition, x=None, y=None):\n    return (condition, x, y)\n"
  },
  {
    "id" : "e9c326c5-924d-4080-983d-87b35f919fbb",
    "prId" : 12646,
    "prUrl" : "https://github.com/numpy/numpy/pull/12646#pullrequestreview-188887536",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "145a1fb1-474d-467d-ab07-ff0f5a533069",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Unfortunately, this error message is platform-dependent, and depends on the `np.dtype(np.intp).itemsize`",
        "createdAt" : "2019-01-02T06:41:14Z",
        "updatedAt" : "2019-01-02T06:41:35Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0a89a286-785a-4c3f-88be-c608dd20a67a",
        "parentId" : "145a1fb1-474d-467d-ab07-ff0f5a533069",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "We could potentially use `...` here to satisfy doctest on Windows. But if we're happy with the refguide check passing on only on Linux (which is all we need for CI) then this might be be enough.",
        "createdAt" : "2019-01-02T06:47:39Z",
        "updatedAt" : "2019-01-02T06:47:39Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "ef5a5130-bc5c-4bf1-b59f-04d6a2357ac9",
        "parentId" : "145a1fb1-474d-467d-ab07-ff0f5a533069",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Perhaps we should assert that before running refguide?",
        "createdAt" : "2019-01-02T07:02:17Z",
        "updatedAt" : "2019-01-02T07:02:18Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f481b234-cfa5-4f68-be16-becc1334abac",
        "parentId" : "145a1fb1-474d-467d-ab07-ff0f5a533069",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Then anyone running the refguide tests on windows would fail, is that really what we want? How often do users actually depend on the exact text in an error messge?",
        "createdAt" : "2019-01-02T17:05:59Z",
        "updatedAt" : "2019-01-02T17:05:59Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "eec3939f-e302-4746-ae3a-31b6e3361bbb",
        "parentId" : "145a1fb1-474d-467d-ab07-ff0f5a533069",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "I wouldn't assert anything, preventing running the checker completely won't be helpful. Instead, I would document that it is only required to fully pass with the config of TravisCI; other Linux systems will likely pass too; other OSes may show some failures.",
        "createdAt" : "2019-01-03T02:11:56Z",
        "updatedAt" : "2019-01-03T02:11:57Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "70f97a5040e20642b68e45d30e030a89ac89e665",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +896,900 @@      ...\n    TypeError: Cannot cast array data from dtype('float64') to dtype('int64')\n    according to the rule 'safe'\n\n    A possible use of ``bincount`` is to perform sums over"
  },
  {
    "id" : "ab623495-1056-4278-8ace-c34a95b2d4d9",
    "prId" : 13046,
    "prUrl" : "https://github.com/numpy/numpy/pull/13046#pullrequestreview-214170423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf534f40-2cf7-487f-8117-b1d4e4bb8577",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "The versionadded goes below the parameter, [here](https://6247-908607-gh.circle-artifacts.com/0/home/circleci/repo/doc/build/html/reference/generated/numpy.empty_like.html?highlight=empty_like) is how this is rendered. The *New in version 1.17.0.* is showing in the previous parameter",
        "createdAt" : "2019-03-13T18:39:45Z",
        "updatedAt" : "2019-04-19T16:40:22Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "3cb58b7e-ee34-4866-81f1-24fa820ff4e2",
        "parentId" : "bf534f40-2cf7-487f-8117-b1d4e4bb8577",
        "authorId" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "body" : "I see it now, the format of linespaces is a bit misleading there. I'll fix it now.",
        "createdAt" : "2019-03-13T19:37:00Z",
        "updatedAt" : "2019-04-19T16:40:22Z",
        "lastEditedBy" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "tags" : [
        ]
      }
    ],
    "commit" : "695b836eb5d1e25363795ceed35b142d062c9056",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +104,108 @@\n        .. versionadded:: 1.17.0\n\n    Returns\n    -------"
  },
  {
    "id" : "2a67a781-5823-4a45-b4e3-8a0f52b5c4bf",
    "prId" : 13046,
    "prUrl" : "https://github.com/numpy/numpy/pull/13046#pullrequestreview-216042996",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aca1f06d-e003-4f6b-8bdc-e5ac8c626663",
        "parentId" : null,
        "authorId" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "body" : "I just noticed order and subok both default to None rather than the ('K' and True) values documentation proposes and other _like() functions have. Which one is the correct? It seems to me that the function definition should be order='K' and subok=True, am I correct?",
        "createdAt" : "2019-03-18T17:06:54Z",
        "updatedAt" : "2019-04-19T16:40:22Z",
        "lastEditedBy" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "tags" : [
        ]
      },
      {
        "id" : "82398126-23a6-4097-a057-ebafe2b0946b",
        "parentId" : "aca1f06d-e003-4f6b-8bdc-e5ac8c626663",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "It's a little confusing, but the arguments for this function (the dispatcher) need to default to None. We actually have a test that verifies this.",
        "createdAt" : "2019-03-19T04:51:41Z",
        "updatedAt" : "2019-04-19T16:40:22Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "ceaf882c-45c0-4c3c-8a38-4bb0f3f9a376",
        "parentId" : "aca1f06d-e003-4f6b-8bdc-e5ac8c626663",
        "authorId" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "body" : "Should we then update the documentation to reflect the real defaults?",
        "createdAt" : "2019-03-19T09:35:46Z",
        "updatedAt" : "2019-04-19T16:40:22Z",
        "lastEditedBy" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "tags" : [
        ]
      }
    ],
    "commit" : "695b836eb5d1e25363795ceed35b142d062c9056",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +74,78 @@def empty_like(prototype, dtype=None, order=None, subok=None, shape=None):\n    \"\"\"\n    empty_like(prototype, dtype=None, order='K', subok=True, shape=None)\n\n    Return a new array with the same shape and type as a given array."
  }
]