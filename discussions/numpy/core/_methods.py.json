[
  {
    "id" : "b52c264f-f9cd-4ad3-908f-b98781b135ce",
    "prId" : 8222,
    "prUrl" : "https://github.com/numpy/numpy/pull/8222#pullrequestreview-6354297",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0a2b8bf-ef96-4ccd-83e2-c8d46df19fbf",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, I think we may have a problem here as `ret` will be a reference to `out` if given. I believe that the casting will be safe, so that should not be a problem, however you probably don't want to override the `out` dtype.\n",
        "createdAt" : "2016-10-29T21:19:21Z",
        "updatedAt" : "2016-11-04T01:07:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "af818b08edc30d04cb56de0429a35ca82458e326",
    "line" : null,
    "diffHunk" : "@@ -1,1 +68,72 @@            is_float16_result = True\n\n    ret = umr_sum(arr, axis, dtype, out, keepdims)\n    if isinstance(ret, mu.ndarray):\n        ret = um.true_divide("
  },
  {
    "id" : "7e52daab-3d38-4904-9f3c-14429b6d235e",
    "prId" : 8222,
    "prUrl" : "https://github.com/numpy/numpy/pull/8222#pullrequestreview-6354979",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03707d93-6b67-4566-a78b-38b2cccb30c6",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Or possibly you could do the type conversions just before the return.\n",
        "createdAt" : "2016-10-29T22:10:18Z",
        "updatedAt" : "2016-11-04T01:07:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "af818b08edc30d04cb56de0429a35ca82458e326",
    "line" : null,
    "diffHunk" : "@@ -1,1 +78,82 @@            ret = a.dtype.type(ret / rcount)\n        else:\n            ret = ret.dtype.type(ret / rcount)\n    else:\n        ret = ret / rcount"
  },
  {
    "id" : "f827f5a8-60ab-4f43-8df6-c739b0ce4a89",
    "prId" : 8222,
    "prUrl" : "https://github.com/numpy/numpy/pull/8222#pullrequestreview-18181832",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "787ac2e2-c451-4dfd-b79d-5ad5878ad39c",
        "parentId" : null,
        "authorId" : "e55414fd-c999-4a2b-83b3-6dea56ea8ee4",
        "body" : "Sorry I'm late to the party, but this should be `arr`, not `a`. `a` might not have a `dtype`. I've checked that this is still wrong in master. I'm afraid I don't have the time to do this myself (which would involve an additional test, I assume?), I just came here by chance. (Same for the `a` a few lines below.)",
        "createdAt" : "2017-01-24T14:20:00Z",
        "updatedAt" : "2017-01-24T14:20:00Z",
        "lastEditedBy" : "e55414fd-c999-4a2b-83b3-6dea56ea8ee4",
        "tags" : [
        ]
      },
      {
        "id" : "3450914a-bc92-4c15-b1bd-627fcc5f37cb",
        "parentId" : "787ac2e2-c451-4dfd-b79d-5ad5878ad39c",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "thanks, should be fixed by gh-8524",
        "createdAt" : "2017-01-24T15:16:34Z",
        "updatedAt" : "2017-01-24T15:16:34Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "af818b08edc30d04cb56de0429a35ca82458e326",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +73,77 @@                ret, rcount, out=ret, casting='unsafe', subok=False)\n        if is_float16_result and out is None:\n            ret = a.dtype.type(ret)\n    elif hasattr(ret, 'dtype'):\n        if is_float16_result:"
  },
  {
    "id" : "4cb8d30e-caaf-43e9-875f-6ae243271225",
    "prId" : 12519,
    "prUrl" : "https://github.com/numpy/numpy/pull/12519#pullrequestreview-228143544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc5959ae-e0e1-48a0-92a1-20870f57b2fa",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "The infinity substitutions above on scalar `np.nan` clip limits would seem to preclude the `npy_isnan()` checks in `clip.c.src` MIN and MAX preprocessor directives aimed at propagating nans.",
        "createdAt" : "2019-03-12T18:31:42Z",
        "updatedAt" : "2019-05-15T17:09:02Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "9c8ebd0b-b540-42e1-bd88-d214559f2642",
        "parentId" : "cc5959ae-e0e1-48a0-92a1-20870f57b2fa",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Correct - but these substitutions only occur in the scalar case, not the array case. Unfortunately this was explicitly tested-for behavior, so I felt I had to preserve it.",
        "createdAt" : "2019-04-18T07:51:05Z",
        "updatedAt" : "2019-05-15T17:09:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "31f0bb1dc7611e5401a52103623d15ea4b3dd00f",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +113,117 @@                \"Passing `np.nan` to mean no clipping in np.clip has always \"\n                \"been unreliable, and is now deprecated. \"\n                \"In future, this will always return nan, like it already does \"\n                \"when min or max are arrays that contain nan. \"\n                \"To skip a bound, pass either None or an np.inf of an \""
  },
  {
    "id" : "d64ebb22-e0d1-479b-9d22-1a4b3ec1275b",
    "prId" : 13684,
    "prUrl" : "https://github.com/numpy/numpy/pull/13684#pullrequestreview-244599146",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f101a33-ecea-49dd-8aa0-a74fd2b10abb",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm. File might be closed.",
        "createdAt" : "2019-06-01T19:25:08Z",
        "updatedAt" : "2019-06-03T05:05:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6ad7824e-93cb-4716-be63-229076279be2",
        "parentId" : "0f101a33-ecea-49dd-8aa0-a74fd2b10abb",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like that just raises a ValueError.",
        "createdAt" : "2019-06-01T19:41:41Z",
        "updatedAt" : "2019-06-03T05:05:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c275a1120363121457a164b05c5385be2d47718",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +235,239 @@def _dump(self, file, protocol=2):\n    if hasattr(file, 'write'):\n        ctx = contextlib_nullcontext(file)\n    else:\n        ctx = open(os_fspath(file), \"wb\")"
  },
  {
    "id" : "10be09e0-1a7d-4a01-afd0-be4acb31ea0b",
    "prId" : 13684,
    "prUrl" : "https://github.com/numpy/numpy/pull/13684#pullrequestreview-244600864",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebb8f426-bf5c-4368-8a91-8b64c598897c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Windows has readonly files, will this overwrite the file?\r\n\r\nEDIT: I see this is the same as previously, but still curious.",
        "createdAt" : "2019-06-01T19:36:24Z",
        "updatedAt" : "2019-06-03T05:05:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e57ebe56-0bd2-4fa7-b9de-bb84bc9058cf",
        "parentId" : "ebb8f426-bf5c-4368-8a91-8b64c598897c",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "No idea - but this is exactly what the pickle examples tell you to do when opening files.",
        "createdAt" : "2019-06-01T20:47:01Z",
        "updatedAt" : "2019-06-03T05:05:05Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c275a1120363121457a164b05c5385be2d47718",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +237,241 @@        ctx = contextlib_nullcontext(file)\n    else:\n        ctx = open(os_fspath(file), \"wb\")\n    with ctx as f:\n        pickle.dump(self, f, protocol=protocol)"
  }
]