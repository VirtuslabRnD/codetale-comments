[
  {
    "id" : "b52c264f-f9cd-4ad3-908f-b98781b135ce",
    "prId" : 8222,
    "prUrl" : "https://github.com/numpy/numpy/pull/8222#pullrequestreview-6354297",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0a2b8bf-ef96-4ccd-83e2-c8d46df19fbf",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, I think we may have a problem here as `ret` will be a reference to `out` if given. I believe that the casting will be safe, so that should not be a problem, however you probably don't want to override the `out` dtype.\n",
        "createdAt" : "2016-10-29T21:19:21Z",
        "updatedAt" : "2016-11-04T01:07:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "af818b08edc30d04cb56de0429a35ca82458e326",
    "line" : null,
    "diffHunk" : "@@ -1,1 +68,72 @@            is_float16_result = True\n\n    ret = umr_sum(arr, axis, dtype, out, keepdims)\n    if isinstance(ret, mu.ndarray):\n        ret = um.true_divide("
  },
  {
    "id" : "7e52daab-3d38-4904-9f3c-14429b6d235e",
    "prId" : 8222,
    "prUrl" : "https://github.com/numpy/numpy/pull/8222#pullrequestreview-6354979",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03707d93-6b67-4566-a78b-38b2cccb30c6",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Or possibly you could do the type conversions just before the return.\n",
        "createdAt" : "2016-10-29T22:10:18Z",
        "updatedAt" : "2016-11-04T01:07:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "af818b08edc30d04cb56de0429a35ca82458e326",
    "line" : null,
    "diffHunk" : "@@ -1,1 +78,82 @@            ret = a.dtype.type(ret / rcount)\n        else:\n            ret = ret.dtype.type(ret / rcount)\n    else:\n        ret = ret / rcount"
  },
  {
    "id" : "f827f5a8-60ab-4f43-8df6-c739b0ce4a89",
    "prId" : 8222,
    "prUrl" : "https://github.com/numpy/numpy/pull/8222#pullrequestreview-18181832",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "787ac2e2-c451-4dfd-b79d-5ad5878ad39c",
        "parentId" : null,
        "authorId" : "e55414fd-c999-4a2b-83b3-6dea56ea8ee4",
        "body" : "Sorry I'm late to the party, but this should be `arr`, not `a`. `a` might not have a `dtype`. I've checked that this is still wrong in master. I'm afraid I don't have the time to do this myself (which would involve an additional test, I assume?), I just came here by chance. (Same for the `a` a few lines below.)",
        "createdAt" : "2017-01-24T14:20:00Z",
        "updatedAt" : "2017-01-24T14:20:00Z",
        "lastEditedBy" : "e55414fd-c999-4a2b-83b3-6dea56ea8ee4",
        "tags" : [
        ]
      },
      {
        "id" : "3450914a-bc92-4c15-b1bd-627fcc5f37cb",
        "parentId" : "787ac2e2-c451-4dfd-b79d-5ad5878ad39c",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "thanks, should be fixed by gh-8524",
        "createdAt" : "2017-01-24T15:16:34Z",
        "updatedAt" : "2017-01-24T15:16:34Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "af818b08edc30d04cb56de0429a35ca82458e326",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +73,77 @@                ret, rcount, out=ret, casting='unsafe', subok=False)\n        if is_float16_result and out is None:\n            ret = a.dtype.type(ret)\n    elif hasattr(ret, 'dtype'):\n        if is_float16_result:"
  },
  {
    "id" : "4cb8d30e-caaf-43e9-875f-6ae243271225",
    "prId" : 12519,
    "prUrl" : "https://github.com/numpy/numpy/pull/12519#pullrequestreview-228143544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc5959ae-e0e1-48a0-92a1-20870f57b2fa",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "The infinity substitutions above on scalar `np.nan` clip limits would seem to preclude the `npy_isnan()` checks in `clip.c.src` MIN and MAX preprocessor directives aimed at propagating nans.",
        "createdAt" : "2019-03-12T18:31:42Z",
        "updatedAt" : "2019-05-15T17:09:02Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "9c8ebd0b-b540-42e1-bd88-d214559f2642",
        "parentId" : "cc5959ae-e0e1-48a0-92a1-20870f57b2fa",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Correct - but these substitutions only occur in the scalar case, not the array case. Unfortunately this was explicitly tested-for behavior, so I felt I had to preserve it.",
        "createdAt" : "2019-04-18T07:51:05Z",
        "updatedAt" : "2019-05-15T17:09:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "31f0bb1dc7611e5401a52103623d15ea4b3dd00f",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +113,117 @@                \"Passing `np.nan` to mean no clipping in np.clip has always \"\n                \"been unreliable, and is now deprecated. \"\n                \"In future, this will always return nan, like it already does \"\n                \"when min or max are arrays that contain nan. \"\n                \"To skip a bound, pass either None or an np.inf of an \""
  },
  {
    "id" : "d64ebb22-e0d1-479b-9d22-1a4b3ec1275b",
    "prId" : 13684,
    "prUrl" : "https://github.com/numpy/numpy/pull/13684#pullrequestreview-244599146",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f101a33-ecea-49dd-8aa0-a74fd2b10abb",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm. File might be closed.",
        "createdAt" : "2019-06-01T19:25:08Z",
        "updatedAt" : "2019-06-03T05:05:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6ad7824e-93cb-4716-be63-229076279be2",
        "parentId" : "0f101a33-ecea-49dd-8aa0-a74fd2b10abb",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like that just raises a ValueError.",
        "createdAt" : "2019-06-01T19:41:41Z",
        "updatedAt" : "2019-06-03T05:05:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c275a1120363121457a164b05c5385be2d47718",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +235,239 @@def _dump(self, file, protocol=2):\n    if hasattr(file, 'write'):\n        ctx = contextlib_nullcontext(file)\n    else:\n        ctx = open(os_fspath(file), \"wb\")"
  },
  {
    "id" : "10be09e0-1a7d-4a01-afd0-be4acb31ea0b",
    "prId" : 13684,
    "prUrl" : "https://github.com/numpy/numpy/pull/13684#pullrequestreview-244600864",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebb8f426-bf5c-4368-8a91-8b64c598897c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Windows has readonly files, will this overwrite the file?\r\n\r\nEDIT: I see this is the same as previously, but still curious.",
        "createdAt" : "2019-06-01T19:36:24Z",
        "updatedAt" : "2019-06-03T05:05:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e57ebe56-0bd2-4fa7-b9de-bb84bc9058cf",
        "parentId" : "ebb8f426-bf5c-4368-8a91-8b64c598897c",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "No idea - but this is exactly what the pickle examples tell you to do when opening files.",
        "createdAt" : "2019-06-01T20:47:01Z",
        "updatedAt" : "2019-06-03T05:05:05Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c275a1120363121457a164b05c5385be2d47718",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +237,241 @@        ctx = contextlib_nullcontext(file)\n    else:\n        ctx = open(os_fspath(file), \"wb\")\n    with ctx as f:\n        pickle.dump(self, f, protocol=protocol)"
  },
  {
    "id" : "5854239b-7c18-48e8-989e-0b1348f275cd",
    "prId" : 15852,
    "prUrl" : "https://github.com/numpy/numpy/pull/15852#pullrequestreview-395898253",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a81d518-fb1b-49f2-af7c-754053a2006e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This doesn't handle `mask = False` correctly.",
        "createdAt" : "2020-03-28T20:55:53Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1f4c9cee-1cfb-49fd-a039-de76e30f37de",
        "parentId" : "7a81d518-fb1b-49f2-af7c-754053a2006e",
        "authorId" : "a4813bf7-a373-4bef-963a-f8cf42f0a199",
        "body" : "I first thought about leaving it out because setting `where=False` would basically mean to intentionally calculate the mean or variance of an empty slice. But you are right, I should return zero in this case. The update is in the next version.",
        "createdAt" : "2020-03-28T22:15:26Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "a4813bf7-a373-4bef-963a-f8cf42f0a199",
        "tags" : [
        ]
      },
      {
        "id" : "8f60939a-1f8a-4d15-b743-db33a7dbe0a7",
        "parentId" : "7a81d518-fb1b-49f2-af7c-754053a2006e",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "This comment confused me a bit, is this still required. What if `where=True` is provided when calling np.mean.",
        "createdAt" : "2020-04-14T03:08:32Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "bda6910d-5848-4094-8cb2-1014f47c53fe",
        "parentId" : "7a81d518-fb1b-49f2-af7c-754053a2006e",
        "authorId" : "a4813bf7-a373-4bef-963a-f8cf42f0a199",
        "body" : "The default would be to have `where=True`, however in this earlier version, I did not handle `where=False` specifically, because I thought using `where=False` would not make sense in general. However to ensure correct behavior even for this case (`where=False` means attempting to calculate the mean of an empty slice), I added a branch.\r\nDoes this make it clearer, @anirudh2290 ?",
        "createdAt" : "2020-04-15T19:00:29Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "a4813bf7-a373-4bef-963a-f8cf42f0a199",
        "tags" : [
        ]
      },
      {
        "id" : "db98c170-51b4-40f8-9179-ab0ec72be245",
        "parentId" : "7a81d518-fb1b-49f2-af7c-754053a2006e",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "okay, thanks @sgasse ! i guess i got confused probably because I didnt first understand that \"no boolean mask given\" is same as \"where=True has the same behavior as when no boolean mask is given\". This also makes me think if this will cause a failure when where=None (probably a not so common use case). ",
        "createdAt" : "2020-04-16T03:17:11Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "969e871b-dd90-431a-b4fd-848f4310427d",
        "parentId" : "7a81d518-fb1b-49f2-af7c-754053a2006e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I don't think where=None is legal anyway, but perhaps worth checking",
        "createdAt" : "2020-04-16T06:34:38Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "edf19893-fe63-40f9-9793-8aaaf53ff506",
        "parentId" : "7a81d518-fb1b-49f2-af7c-754053a2006e",
        "authorId" : "a4813bf7-a373-4bef-963a-f8cf42f0a199",
        "body" : "@anirudh2290 `where=None` and `where=False` indeed lead to the divide-by-zero warning and `nan` as result. I am not sure this is how it should be, e.g. `arr.sum(where=None)` returns zero without any warning. Should I adapt `mean` in that way or would it clutter the function too much for catching an illegal input?",
        "createdAt" : "2020-04-18T09:16:26Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "a4813bf7-a373-4bef-963a-f8cf42f0a199",
        "tags" : [
        ]
      },
      {
        "id" : "ee1ef623-180a-4052-a869-bfb80eeff8df",
        "parentId" : "7a81d518-fb1b-49f2-af7c-754053a2006e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "That behavior sounds correct to me. Mean is different to sum because it has to divide by the number of non-masked elements.",
        "createdAt" : "2020-04-18T09:28:45Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ec1dbd8864363f77902d77e3d044a26eead31be",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +60,64 @@    # fast-path for the default case\n    if where is True:\n        # no boolean mask given, calculate items according to axis\n        if axis is None:\n            axis = tuple(range(arr.ndim))"
  },
  {
    "id" : "f7479c5d-a42d-4d40-a363-9252ca4567e4",
    "prId" : 15852,
    "prUrl" : "https://github.com/numpy/numpy/pull/15852#pullrequestreview-383387810",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95213850-2ed9-4180-b80d-9c6dc41843c3",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you just pass `keepdims=True` here to save needing the reshape below?",
        "createdAt" : "2020-03-28T22:40:39Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a41a4ba2-ea1c-4d7c-8bec-98c80238c85b",
        "parentId" : "95213850-2ed9-4180-b80d-9c6dc41843c3",
        "authorId" : "a4813bf7-a373-4bef-963a-f8cf42f0a199",
        "body" : "I think not, let me try to explain:\r\n- `arrmean` in line 204 has to be calculated with `keepdims=True`, otherwise the substraction from the array can be faulty.\r\n- If the user specifies `keepdims=False` for `var`, `rcount` is thus calculated with it. The broadcasting of `arrmean` e.g. shape `(N, 1)` and `rcount` e.g. shape `(N, )` in line 208 at `true_divide` leads to an array of shape `(N, N)` that can no longer be stored in `out`.\r\n- This means that the division in line 208 should definitely happen with a _shaped_ `rcount`.\r\n- However if we would set `keepdims=True` in line 191 at the calculation of `rcount`, we would not be able to use `true_divide` with `ret` and `rcount` in line 238. Let's say `ret` is of shape `(N, )` because the user wants `keepdims=False` and `rcount` would be of shape `(N, 1)`, the result would be an array of shape `(N, N)` which could not be stored in the `out` target.\r\n\r\nYesterday, I was going back and forth with this 'dependency tree'. The proposed solution seemed the least intrusive and most efficient to me. However if you see a better solution given the above mentioned limitations, I am happy to try it out :smiley: ",
        "createdAt" : "2020-03-29T08:52:42Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "a4813bf7-a373-4bef-963a-f8cf42f0a199",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ec1dbd8864363f77902d77e3d044a26eead31be",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +190,194 @@    arr = asanyarray(a)\n\n    rcount = _count_reduce_items(arr, axis, keepdims=keepdims, where=where)\n    # Make this warning show up on top.\n    if umr_any(ddof >= rcount, axis=None):"
  },
  {
    "id" : "d58bf503-c515-4fc7-bade-d5fc92583a27",
    "prId" : 15852,
    "prUrl" : "https://github.com/numpy/numpy/pull/15852#pullrequestreview-383401576",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "581dd60c-d1ec-405a-b874-500ec388bcd1",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Worth a TODO here about this sum bring more expensive than needed for when where is broadcast along a non-reduction axis.",
        "createdAt" : "2020-03-29T09:11:53Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5646cd4f-c3aa-4ece-a1c3-763054d24ca3",
        "parentId" : "581dd60c-d1ec-405a-b874-500ec388bcd1",
        "authorId" : "a4813bf7-a373-4bef-963a-f8cf42f0a199",
        "body" : "Good point, added a TODO note.",
        "createdAt" : "2020-03-29T11:44:18Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "a4813bf7-a373-4bef-963a-f8cf42f0a199",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ec1dbd8864363f77902d77e3d044a26eead31be",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +72,76 @@        # axis and full sum is more excessive than needed.\n\n        # guarded to protect circular imports\n        from numpy.lib.stride_tricks import broadcast_to\n        # count True values in (potentially broadcasted) boolean mask"
  },
  {
    "id" : "00ac0470-5243-4bb8-a9c4-b6e80b596880",
    "prId" : 15852,
    "prUrl" : "https://github.com/numpy/numpy/pull/15852#pullrequestreview-383401810",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bc66430-b7b4-4180-810c-5430990d6326",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Isn't none the default?",
        "createdAt" : "2020-03-29T09:12:24Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "713a8769-40bb-4d5c-b6fa-0fb22312f48f",
        "parentId" : "5bc66430-b7b4-4180-810c-5430990d6326",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Nevermind, see you mention that above.",
        "createdAt" : "2020-03-29T11:45:55Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f8e48fd4-a211-4129-a3ad-5c132d4c85fa",
        "parentId" : "5bc66430-b7b4-4180-810c-5430990d6326",
        "authorId" : "a4813bf7-a373-4bef-963a-f8cf42f0a199",
        "body" : "This is what I thought, because for `np.any`, the default is `axis=None`. However when the checks failed, I investigated it and found that for `numpy.ufunc.reduce`, the default is `axis=0`\r\n[Version 1.19.0 `numpy.ufunc.reduce` doc](https://numpy.org/devdocs/reference/generated/numpy.ufunc.reduce.html)",
        "createdAt" : "2020-03-29T11:46:14Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "a4813bf7-a373-4bef-963a-f8cf42f0a199",
        "tags" : [
        ]
      },
      {
        "id" : "abff5853-d9ca-4ee0-bb35-4439e1e54c0e",
        "parentId" : "5bc66430-b7b4-4180-810c-5430990d6326",
        "authorId" : "a4813bf7-a373-4bef-963a-f8cf42f0a199",
        "body" : "I don't know if this difference is intentional. Maybe it would make sense to harmonize this in another issue in the future to increase the consistency.",
        "createdAt" : "2020-03-29T11:47:08Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "a4813bf7-a373-4bef-963a-f8cf42f0a199",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ec1dbd8864363f77902d77e3d044a26eead31be",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +159,163 @@\n    rcount = _count_reduce_items(arr, axis, keepdims=keepdims, where=where)\n    if umr_any(rcount == 0, axis=None):\n        warnings.warn(\"Mean of empty slice.\", RuntimeWarning, stacklevel=2)\n"
  },
  {
    "id" : "b018b094-d627-4575-abe5-aea222a14361",
    "prId" : 15852,
    "prUrl" : "https://github.com/numpy/numpy/pull/15852#pullrequestreview-395898844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d0a8677-0cfc-48f3-8652-6aacdf6390b8",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "My recommendation would be to add\r\n```\r\n    if not keepdims:\r\n        rcount = rcount.squeeze(axis=axis)\r\n```\r\nhere",
        "createdAt" : "2020-03-29T09:24:13Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "7b9a35d3-7c85-4c2c-9bd9-f0e0758b152e",
        "parentId" : "0d0a8677-0cfc-48f3-8652-6aacdf6390b8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Ugh, I see this doesn't work either.",
        "createdAt" : "2020-03-29T09:25:01Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "fee4b414-74c0-46a1-b0e1-22a0b442015e",
        "parentId" : "0d0a8677-0cfc-48f3-8652-6aacdf6390b8",
        "authorId" : "a4813bf7-a373-4bef-963a-f8cf42f0a199",
        "body" : "So should I maybe leave it as is?",
        "createdAt" : "2020-03-31T18:56:06Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "a4813bf7-a373-4bef-963a-f8cf42f0a199",
        "tags" : [
        ]
      },
      {
        "id" : "d4af26de-5605-409a-bfa6-4342949a562d",
        "parentId" : "0d0a8677-0cfc-48f3-8652-6aacdf6390b8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Probably best",
        "createdAt" : "2020-04-18T09:38:51Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ec1dbd8864363f77902d77e3d044a26eead31be",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +235,239 @@        x = um.multiply(x, um.conjugate(x), out=x).real\n\n    ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)\n\n    # Compute degrees of freedom and make sure it is not negative."
  },
  {
    "id" : "78fa0143-0b05-429f-933a-1d8f30d408c7",
    "prId" : 15852,
    "prUrl" : "https://github.com/numpy/numpy/pull/15852#pullrequestreview-383402384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8095e4ab-aa60-46c2-ad16-785bb0fe6f02",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "For consistency, I'd recommend:\r\n```suggestion\r\n            items *= arr.shape[mu.normalize_axis_index(ax, arr.ndim)]\r\n        items = np.intp(items)\r\n```",
        "createdAt" : "2020-03-29T09:25:52Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0545f79f-d92d-4930-98d4-22a94832192c",
        "parentId" : "8095e4ab-aa60-46c2-ad16-785bb0fe6f02",
        "authorId" : "a4813bf7-a373-4bef-963a-f8cf42f0a199",
        "body" : "Thanks, good idea! I now initialize `items = nt.intp(1)` above to save the line and also return `nt.intp(0)` in the scenario above.",
        "createdAt" : "2020-03-29T11:48:41Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "a4813bf7-a373-4bef-963a-f8cf42f0a199",
        "tags" : [
        ]
      },
      {
        "id" : "f634ac4c-f168-4b3f-8156-2344e69278fd",
        "parentId" : "8095e4ab-aa60-46c2-ad16-785bb0fe6f02",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "While saving a line, it's possible it's very marginally slower. Unlikely to be an issue though.",
        "createdAt" : "2020-03-29T11:53:38Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ec1dbd8864363f77902d77e3d044a26eead31be",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +67,71 @@        items = nt.intp(1)\n        for ax in axis:\n            items *= arr.shape[mu.normalize_axis_index(ax, arr.ndim)]\n    else:\n        # TODO: Optimize case when `where` is broadcast along a non-reduction"
  },
  {
    "id" : "4a5e9c7a-b025-442c-9140-dd2866ce059d",
    "prId" : 15852,
    "prUrl" : "https://github.com/numpy/numpy/pull/15852#pullrequestreview-412203413",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1727b4fe-f18c-4b2e-8a2b-a1e67ccc3a08",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "The kwarg will have some performance implications for small arrays <1000 elements or so, until my parsing improvements would be merged. But just a note, to be honest there is not much we can do about it. It seems passing by position is thwarted by the `initial` argument (though that could possibly be changed).\r\n\r\n@eric-wieser do you want to persue this for 1.19? I will push it off for now.",
        "createdAt" : "2020-05-14T21:37:01Z",
        "updatedAt" : "2020-07-18T11:15:35Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ec1dbd8864363f77902d77e3d044a26eead31be",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +52,56 @@\ndef _any(a, axis=None, dtype=None, out=None, keepdims=False, *, where=True):\n    return umr_any(a, axis, dtype, out, keepdims, where=where)\n\ndef _all(a, axis=None, dtype=None, out=None, keepdims=False, *, where=True):"
  }
]