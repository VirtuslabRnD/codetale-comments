[
  {
    "id" : "fb36e92b-94cd-404d-a87e-7631fab1906a",
    "prId" : 8410,
    "prUrl" : "https://github.com/numpy/numpy/pull/8410#pullrequestreview-15195837",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a01829a-7d92-45b7-b1c2-ae5c663751be",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Not much reason for this unless there is some form of inheritance somewhere, but if you like it...",
        "createdAt" : "2017-01-04T19:20:55Z",
        "updatedAt" : "2017-01-04T21:38:44Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "2e8efbda-444d-4d7d-83be-785fe2c417ce",
        "parentId" : "1a01829a-7d92-45b7-b1c2-ae5c663751be",
        "authorId" : "f5954f7f-6679-4ca7-9920-3c73950e035e",
        "body" : "I don't have any strong opinion concerning this. I was just trying to follow the surrounding style as `TestApproxEqual` is also using it without inheriting from anywhere and not being inherited from. As it doesn't make the code less understandable I would tend to leave it in, but if you feel that it should be dropped, I can also do that.",
        "createdAt" : "2017-01-04T20:45:50Z",
        "updatedAt" : "2017-01-04T21:38:44Z",
        "lastEditedBy" : "f5954f7f-6679-4ca7-9920-3c73950e035e",
        "tags" : [
        ]
      },
      {
        "id" : "fff301b5-4fc3-4f10-8006-8ad99acc82b8",
        "parentId" : "1a01829a-7d92-45b7-b1c2-ae5c663751be",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Have a slight preference only, so whichever you like. Makes me a bit wonder whether TestApproxEqual probably should inherit from `_GenericTest`, though, hehe.",
        "createdAt" : "2017-01-04T20:54:44Z",
        "updatedAt" : "2017-01-04T21:38:44Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "58fe985d-f070-49de-923b-d77507195522",
        "parentId" : "1a01829a-7d92-45b7-b1c2-ae5c663751be",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Really, release notes, and maybe double check if the tests cover all important and it should be good.",
        "createdAt" : "2017-01-04T20:55:34Z",
        "updatedAt" : "2017-01-04T21:38:44Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6312db5be6bc3bb35c999f10cb7db1cacacb4cbf",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +441,445 @@\n    def setUp(self):\n        self._assert_func = assert_array_less\n\n    def test_simple_arrays(self):"
  },
  {
    "id" : "dd91fce2-d0f2-47b7-a65a-9df762333d48",
    "prId" : 8421,
    "prUrl" : "https://github.com/numpy/numpy/pull/8421#pullrequestreview-36650276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3ff7cb8-5068-4754-92b6-65ebdbcd9654",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Unrelated fixup?",
        "createdAt" : "2017-05-06T17:50:05Z",
        "updatedAt" : "2017-05-07T14:21:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "8b189d38-cfbc-4ebd-b38d-e118b1258756",
        "parentId" : "b3ff7cb8-5068-4754-92b6-65ebdbcd9654",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "The safe comparison/suppression in the test filtered a bit more then just the NaT stuff (actually may have been there originally not for NaT, but for `==` operator warnings), so (not actually remembering it) removing it, the tests need to filter these warnings explicitly now. Not sure why this is the only one specifically though.",
        "createdAt" : "2017-05-06T18:05:44Z",
        "updatedAt" : "2017-05-07T14:21:40Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "d33a40b5-df5f-4045-b045-386bcf6c8fb4",
        "parentId" : "b3ff7cb8-5068-4754-92b6-65ebdbcd9654",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So this might cause some problems downstream? I'm not terribly concerned, the only way to find out is to try.",
        "createdAt" : "2017-05-06T18:37:17Z",
        "updatedAt" : "2017-05-07T14:21:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2b3020f2-3c3d-4d2b-8b0b-842665476bd3",
        "parentId" : "b3ff7cb8-5068-4754-92b6-65ebdbcd9654",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, looks like the `FutureWarning` will be gone in the 1.14 release.",
        "createdAt" : "2017-05-06T18:46:44Z",
        "updatedAt" : "2017-05-07T14:21:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "5156384a-7cb6-49a6-ab7a-28031a6e9c8e",
        "parentId" : "b3ff7cb8-5068-4754-92b6-65ebdbcd9654",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "It might cause problems, but maybe its also good, since maybe some project might run into the future warning and did not notice because of this....",
        "createdAt" : "2017-05-06T19:00:22Z",
        "updatedAt" : "2017-05-07T14:21:40Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "868aa751ceb229465d626a7fd7083544afc96ed2",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +146,150 @@        c['floupa'] = a['floupa'].copy()\n\n        with suppress_warnings() as sup:\n            l = sup.record(FutureWarning, message=\"elementwise == \")\n            self._test_not_equal(c, b)"
  },
  {
    "id" : "3c6e9196-b642-4f83-bf3c-8f0b3cc50979",
    "prId" : 9645,
    "prUrl" : "https://github.com/numpy/numpy/pull/9645#pullrequestreview-61664966",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8399539f-a7eb-4765-8cd2-ade873505097",
        "parentId" : null,
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "The try: except is not needed. You can make it simpler via `msg = msg.replace(...)`",
        "createdAt" : "2017-09-09T15:29:58Z",
        "updatedAt" : "2017-09-10T15:00:18Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "448bb82e6f6ad5d6ff98705a55fe34ccd938446c",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +279,283 @@                self.assertEqual(msg, msg_reference)\n            except AssertionError:\n                self.assertEqual(msg2, msg_reference)\n\nclass TestArrayAlmostEqual(_GenericTest, unittest.TestCase):"
  },
  {
    "id" : "eb4fc052-ca22-4e18-b37f-fd4033cb8db4",
    "prId" : 10112,
    "prUrl" : "https://github.com/numpy/numpy/pull/10112#pullrequestreview-79610972",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7572fc58-10f0-445a-b41d-12fb6c937478",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Nothing like having tests that require things to fail in a very specific way...",
        "createdAt" : "2017-11-28T17:07:00Z",
        "updatedAt" : "2017-11-28T17:07:00Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "4371ee12-a59e-420c-af72-ff76a3ba1be2",
        "parentId" : "7572fc58-10f0-445a-b41d-12fb6c937478",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "This test is a bit weird also. It should really say `y: matrix([[1,2]])`.\r\n\r\nThe repr fails because `build_err_msg` uses `np.array_repr(mat))` instead of just `repr(mat)`. Not sure if the bug is in `build_err_msg` or in `np.matrix`.\r\n\r\nIn any case that's unrelated to this PR.",
        "createdAt" : "2017-11-28T18:17:18Z",
        "updatedAt" : "2017-11-28T18:17:18Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "390aed9a-d396-4b2b-996b-9a4fb6e91601",
        "parentId" : "7572fc58-10f0-445a-b41d-12fb6c937478",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Right, this is #8442. I think the easiest fix would be to rewrite `array_repr` to use full-indices, `[i, j, k]`, rather than recursive `[i][j][k]`.",
        "createdAt" : "2017-11-28T18:37:00Z",
        "updatedAt" : "2017-11-28T18:37:00Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "7693f9df2dab9dd5f27e9d2bb89c6f80341c6e61",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +297,301 @@            (shapes (2,), (1, 2) mismatch)\n             x: array([1, 2])\n             y: [repr failed for <matrix>: %d format: a number is required, not matrix]\"\"\")\n            try:\n                self.assertEqual(msg, msg_reference)"
  },
  {
    "id" : "081adba2-ba58-4bd8-aa7e-cbd708f75b67",
    "prId" : 10718,
    "prUrl" : "https://github.com/numpy/numpy/pull/10718#pullrequestreview-103572908",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bb5ed82-08d5-41ca-ae24-44c52e165ec2",
        "parentId" : null,
        "authorId" : "1030c47d-0da4-427d-8ae1-217de3b58cfd",
        "body" : "This is just copied over from `test_float32_pass / test_float32_fail`, with the `**` removed to prevent any overflow issues.",
        "createdAt" : "2018-03-10T00:21:50Z",
        "updatedAt" : "2018-03-13T17:42:45Z",
        "lastEditedBy" : "1030c47d-0da4-427d-8ae1-217de3b58cfd",
        "tags" : [
        ]
      },
      {
        "id" : "b6395bd6-932f-4204-a647-168922a0b945",
        "parentId" : "1bb5ed82-08d5-41ca-ae24-44c52e165ec2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "```\r\n        x = np.linspace(-4, 4, 9, dtype=np.float16)\r\n        x = 10**x\r\n```\r\nseems to work. See https://en.wikipedia.org/wiki/Half-precision_floating-point_format .",
        "createdAt" : "2018-03-10T19:19:52Z",
        "updatedAt" : "2018-03-13T17:42:45Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "7f0917a8-a656-4e5d-b113-cafefa79884f",
        "parentId" : "1bb5ed82-08d5-41ca-ae24-44c52e165ec2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I suppose we could use powers of 2 for more precise exponent ranges.",
        "createdAt" : "2018-03-10T19:21:02Z",
        "updatedAt" : "2018-03-13T17:42:45Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "5efbb2c8-010d-4967-944a-33136502acae",
        "parentId" : "1bb5ed82-08d5-41ca-ae24-44c52e165ec2",
        "authorId" : "1030c47d-0da4-427d-8ae1-217de3b58cfd",
        "body" : "Thanks so much for committing this, was super busy and didn't get time, appreciate your help.",
        "createdAt" : "2018-03-13T19:07:21Z",
        "updatedAt" : "2018-03-13T19:07:21Z",
        "lastEditedBy" : "1030c47d-0da4-427d-8ae1-217de3b58cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f84b380f3708e94196582e427356cc38d76b977",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +912,916 @@                          x, y, nulp)\n\n    def test_float16_pass(self):\n        nulp = 5\n        x = np.linspace(-4, 4, 10, dtype=np.float16)"
  },
  {
    "id" : "e59b7099-3e6e-49a4-816e-ea4cab207a56",
    "prId" : 10740,
    "prUrl" : "https://github.com/numpy/numpy/pull/10740#pullrequestreview-104825296",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4a3f954-2088-4200-bba8-ebbc06a45b55",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Is this comment still in the right place?",
        "createdAt" : "2018-03-18T23:56:05Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0f3bccc8-43e6-4522-8b8b-a62ff21937a3",
        "parentId" : "e4a3f954-2088-4200-bba8-ebbc06a45b55",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Beats me, it's not my comment and I don't really know what it means :-)",
        "createdAt" : "2018-03-19T02:01:26Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "880b2fcb-7118-4d4f-919f-66e3ef0717c3",
        "parentId" : "e4a3f954-2088-4200-bba8-ebbc06a45b55",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I don't know what it means either, but hoped you might :)",
        "createdAt" : "2018-03-19T02:06:59Z",
        "updatedAt" : "2018-03-19T16:54:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9c53d73b80b52b36dd2f71e1e47aeaf682742ec",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1118,1122 @@    mod_warns = mod.__warningregistry__\n    num_warns = len(mod_warns)\n    # Python 3.4 appears to clear any pre-existing warnings of the same type,\n    # when raising warnings inside a catch_warnings block. So, there is a\n    # warning generated by the tests within the context manager, but no"
  },
  {
    "id" : "30f8dc9d-258f-4849-ba28-09fe477e031e",
    "prId" : 11556,
    "prUrl" : "https://github.com/numpy/numpy/pull/11556#pullrequestreview-137247879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b5a5d85-8cfd-4d76-840d-c76e65155a6c",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "I wonder if it is worth using a parametrized test (from pytest) to probe a few more of the regular expression special characters used in Python. On the other hand, if I'm not mistaken, there may not be much drive for this kind of support in `numpy.testing` moving forward with increased adoption of pytest. ",
        "createdAt" : "2018-07-13T21:09:57Z",
        "updatedAt" : "2018-07-13T21:20:10Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "2cf2bc64-e1f6-4c15-9d2e-1d1a104ef6b3",
        "parentId" : "3b5a5d85-8cfd-4d76-840d-c76e65155a6c",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "> there may not be much drive for this kind of support in numpy.testing\r\n\r\nHow so? Does pytest offer an equivalent for the function being tested?",
        "createdAt" : "2018-07-14T18:56:57Z",
        "updatedAt" : "2018-07-14T18:56:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "26c01f42-a416-4b4a-931b-9e61b8e6556f",
        "parentId" : "3b5a5d85-8cfd-4d76-840d-c76e65155a6c",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Probably OK to skip complete coverage here unless there is a return to regular expressions.\r\n\r\n@tylerjereddy Now that you are working a BIDS, do you need commit privileges?",
        "createdAt" : "2018-07-14T19:07:09Z",
        "updatedAt" : "2018-07-14T19:07:09Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "aa7c4691-f0be-476b-8fac-4dd74d07e685",
        "parentId" : "3b5a5d85-8cfd-4d76-840d-c76e65155a6c",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "I guess that's up to the team, but I'm happy to continue without for now. I don't think `pytest` has a replacement functionality for what NumPy does here.\r\n\r\n",
        "createdAt" : "2018-07-14T20:29:00Z",
        "updatedAt" : "2018-07-14T20:29:00Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "37e4d58f2ec36de226917d215f3dbe4c893da752",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1084,1088 @@        \n    def test_regex(self):\n        assert_string_equal(\"a+*b\", \"a+*b\")\n\n        assert_raises(AssertionError,"
  },
  {
    "id" : "953280cd-ff4e-4950-9a13-9e8302a8be99",
    "prId" : 11556,
    "prUrl" : "https://github.com/numpy/numpy/pull/11556#pullrequestreview-137246179",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee254e9d-87de-4223-bfd9-4c9c6d3de081",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "Might be a bit less awkward to use a context manager (available from assert_raises or the pytest equivalent) instead of using `lambda` for a callable. The docstring for `assert_string_equal` also claims to return the `diff` between strings--not sure if we need to test that case with special regex chars.",
        "createdAt" : "2018-07-13T21:22:11Z",
        "updatedAt" : "2018-07-13T21:23:42Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "8a964b19-bc4c-45a4-86f2-8fe0a98d3d4e",
        "parentId" : "ee254e9d-87de-4223-bfd9-4c9c6d3de081",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "That said, the `lambda` form used here is consistent with the rest of the file.",
        "createdAt" : "2018-07-13T21:22:35Z",
        "updatedAt" : "2018-07-13T21:22:35Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "fb237808-6272-4b29-8851-0514627c719c",
        "parentId" : "ee254e9d-87de-4223-bfd9-4c9c6d3de081",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The tests function is pretty old (2009), so could use a rewrite sometime in the future. The fixed code dates back to 2007 ...",
        "createdAt" : "2018-07-14T19:05:21Z",
        "updatedAt" : "2018-07-14T19:05:21Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "37e4d58f2ec36de226917d215f3dbe4c893da752",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1087,1091 @@\n        assert_raises(AssertionError,\n                      lambda: assert_string_equal(\"aaa\", \"a+b\"))\n\n"
  }
]