[
  {
    "id" : "9c11c7d8-ff99-4b3a-8451-57701f624385",
    "prId" : 11122,
    "prUrl" : "https://github.com/numpy/numpy/pull/11122#pullrequestreview-125647565",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed4ae7ef-16b4-4da7-bdd1-9f29deaac40c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Not sure I agree with this - what if `x` and `y` are quantities of different dimensions? The test should still compare the empty arrays so that the correct error is raised, right?",
        "createdAt" : "2018-06-04T08:11:52Z",
        "updatedAt" : "2018-06-04T13:38:18Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e2cb0e8a-97b9-4154-afde-662a232ac147",
        "parentId" : "ed4ae7ef-16b4-4da7-bdd1-9f29deaac40c",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "It is the same case as the `if x.size == 0` stanza above, but for the case where `x` and `y` are both scalar. In principle, I agree the comparison should work for empty elements, but in practice, this is not the case (e.g., `matrix` changing its shape being one problem...)\r\n\r\nSince this was here before, I propose to leave it as is.",
        "createdAt" : "2018-06-04T13:36:11Z",
        "updatedAt" : "2018-06-04T13:38:18Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "bc0979b7-b2f4-4527-ac96-9bbaed82e43b",
        "parentId" : "ed4ae7ef-16b4-4da7-bdd1-9f29deaac40c",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Sure, i agree this is out of scope for the patch",
        "createdAt" : "2018-06-04T16:19:33Z",
        "updatedAt" : "2018-06-04T16:19:34Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3c016407-1f24-4f01-af23-aa82e68c8370",
        "parentId" : "ed4ae7ef-16b4-4da7-bdd1-9f29deaac40c",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Overall, it sadly remains a chunk of rather fragile code...",
        "createdAt" : "2018-06-04T16:23:23Z",
        "updatedAt" : "2018-06-04T16:23:23Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ad49aaaf497c6daadb9b66f295f58a315476e01",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +754,758 @@                return\n        elif flagged:\n            # no sense doing comparison if everything is flagged.\n            return\n"
  },
  {
    "id" : "e51d437e-a1e1-45ad-ace2-7605e6afd962",
    "prId" : 11122,
    "prUrl" : "https://github.com/numpy/numpy/pull/11122#pullrequestreview-147348149",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69e4a72f-1f4b-4d64-9a89-301b2b4ae90e",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm,\r\n```\r\nIn [10]: ma.masked != True\r\nOut[10]: masked\r\n\r\nIn [11]: ma.masked == True\r\nOut[11]: masked\r\n\r\nIn [12]: bool(ma.masked)\r\nOut[12]: False\r\n```\r\n@mhvk The camparison to True seems to achieve nothing here.",
        "createdAt" : "2018-08-17T18:58:08Z",
        "updatedAt" : "2018-08-17T18:59:48Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "42d5ac52-8c0b-401a-9218-160f7d20b3e4",
        "parentId" : "69e4a72f-1f4b-4d64-9a89-301b2b4ae90e",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "The purpose is to ensure that the stanza is *not* executed if `x_id` or `y_id` is `masked`, yet is executed if they are different.",
        "createdAt" : "2018-08-17T19:09:25Z",
        "updatedAt" : "2018-08-17T19:09:26Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ad49aaaf497c6daadb9b66f295f58a315476e01",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +704,708 @@        x_id = func(x)\n        y_id = func(y)\n        if (x_id == y_id).all() != True:\n            msg = build_err_msg([x, y],\n                                err_msg + '\\nx and y %s location mismatch:'"
  },
  {
    "id" : "3cedce5f-b9ac-4f64-9068-eee27e6742d9",
    "prId" : 12243,
    "prUrl" : "https://github.com/numpy/numpy/pull/12243#pullrequestreview-167226937",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab9f7a8f-3c0e-4fab-88e6-f576bafa6285",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Why did you change the calculation here? Can you show this is more correct?",
        "createdAt" : "2018-10-23T05:50:35Z",
        "updatedAt" : "2018-10-23T08:30:22Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "13d1a134-fb9e-4e32-8bde-1bf63dcd59d9",
        "parentId" : "ab9f7a8f-3c0e-4fab-88e6-f576bafa6285",
        "authorId" : "84f821fb-7447-4379-ac03-d07baea8a0a4",
        "body" : "Sure. First of all, the variable name `match` is misleading, because what it actually means is `mismatch`, which you can tell from the string the variable tries to format.\r\nThe original way to calculate `match` (which is actually mismatch) is firstly calculate match percentage and then subtract it from 100. This logic is verbose and not compatible with this bug fix, because in this bug fix we are trying to count NaN's as matched result, which is not taken into account in the NaN-free `reduced`. So here it's not feasible to count results that matched (`1`), however results that are not matched (`0`) are stil meaningful here.",
        "createdAt" : "2018-10-23T06:01:08Z",
        "updatedAt" : "2018-10-23T08:30:22Z",
        "lastEditedBy" : "84f821fb-7447-4379-ac03-d07baea8a0a4",
        "tags" : [
        ]
      }
    ],
    "commit" : "be5ea7d92d542e7c7eb055c5831a79850f4bfbee",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +787,791 @@            msg = build_err_msg([ox, oy],\n                                err_msg\n                                + '\\n(mismatch %s%%)' % (mismatch,),\n                                verbose=verbose, header=header,\n                                names=('x', 'y'), precision=precision)"
  },
  {
    "id" : "d116ea74-a3b2-4a2b-8087-779a10a1b26a",
    "prId" : 12591,
    "prUrl" : "https://github.com/numpy/numpy/pull/12591#pullrequestreview-188543447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c07cd85-d0c4-4110-bfb3-9dc8b5d51752",
        "parentId" : null,
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Do I get a prize for using the first Python 3 only feature in NumPy? :)",
        "createdAt" : "2018-12-20T16:56:13Z",
        "updatedAt" : "2019-01-02T05:49:46Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "94c556b4-7f71-4a35-a9c5-e42a660f0877",
        "parentId" : "1c07cd85-d0c4-4110-bfb3-9dc8b5d51752",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Why not use a 2.7 feature here too, and combine both `with`s into a single `with`?",
        "createdAt" : "2018-12-23T21:23:14Z",
        "updatedAt" : "2019-01-02T05:49:46Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1d1df5bf-5a5f-449d-be37-0ea8c05cbb99",
        "parentId" : "1c07cd85-d0c4-4110-bfb3-9dc8b5d51752",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "I could, but then I need an ugly explicit continuation character `\\`, e.g.,\r\n```python\r\n            with errstate(invalid='ignore', divide='ignore'), \\\r\n                    contextlib.suppress(TypeError):\r\n                # ignore errors for non-numeric types\r\n```",
        "createdAt" : "2018-12-31T23:56:42Z",
        "updatedAt" : "2019-01-02T05:49:46Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "d13123d85cfb1a85e985debb991601bd0dd6ab2e",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +799,803 @@            with errstate(invalid='ignore', divide='ignore'):\n                # ignore errors for non-numeric types\n                with contextlib.suppress(TypeError):\n                    error = abs(x - y)\n                    max_abs_error = error.max()"
  },
  {
    "id" : "23646660-8354-426f-a4ee-ed0b0bfd97df",
    "prId" : 12594,
    "prUrl" : "https://github.com/numpy/numpy/pull/12594#pullrequestreview-186461457",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9bc66a32-09db-41c5-a0c1-b1a077b93d78",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Nice catch",
        "createdAt" : "2018-12-19T09:49:29Z",
        "updatedAt" : "2019-04-21T08:07:16Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "f402a691a9c99e0ba2e090d4f8269ea81aac1a50",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +2248,2252 @@    # not meaningful to test if there is no refcounting\n    if not HAS_REFCOUNT:\n        yield\n        return\n"
  },
  {
    "id" : "a3032c01-bb7d-4733-b0ee-16f479192adb",
    "prId" : 13802,
    "prUrl" : "https://github.com/numpy/numpy/pull/13802#pullrequestreview-271798879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "774645a1-88c9-4944-875f-85d283f8efe2",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK, I guess this seems right if `y` happens to be all zero. I believe the result here should be just `inf` and not an array with `inf` inside, `max` also returns a scalar. (Although this is probably just printed, so it may not even make a difference.",
        "createdAt" : "2019-08-06T21:09:13Z",
        "updatedAt" : "2019-08-25T16:22:02Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "74140b0c-4f7b-42bf-a07f-5b3f0cc40986",
        "parentId" : "774645a1-88c9-4944-875f-85d283f8efe2",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Could you add a test for this branch (assuming it does not exist)?",
        "createdAt" : "2019-08-06T21:09:37Z",
        "updatedAt" : "2019-08-25T16:22:02Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "fc5416b7-ea4e-48d3-a452-d49e1a3d83d1",
        "parentId" : "774645a1-88c9-4944-875f-85d283f8efe2",
        "authorId" : "e1cdb3b2-ab59-4e4e-a20c-d31926a44bf8",
        "body" : "```max_rel_error``` is passed to ```array2string``` and then printed, that's why I made it an array (although I guess ```float_(inf)``` would also work, but it makes no difference)\r\nFor the ```inf``` branch there is already a test: ```testing.tests.test_utils.TestAlmostEqual.test_error_message``` which tests this exact scenario of y being all zeros.\r\nI've also written a test for the original issue ```TestAssertAllclose.test_report_max_relative_error```",
        "createdAt" : "2019-08-07T08:19:48Z",
        "updatedAt" : "2019-08-25T16:22:02Z",
        "lastEditedBy" : "e1cdb3b2-ab59-4e4e-a20c-d31926a44bf8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5cad8c098e39a9091b9cf22d5a9890250e90b79",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +825,829 @@                    nonzero = bool_(y != 0)\n                    if all(~nonzero):\n                        max_rel_error = array(inf)\n                    else:\n                        max_rel_error = (error[nonzero] / abs(y[nonzero])).max()"
  },
  {
    "id" : "27e84ba8-cb7f-4205-a707-28d76d88463d",
    "prId" : 13802,
    "prUrl" : "https://github.com/numpy/numpy/pull/13802#pullrequestreview-279341972",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "759f2440-101a-4bd5-9cfb-1c48febc0260",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "`nonzero` is guaranteed to be an array here I think, so it would be better to use `nonzero.all()` (the other one may be pythons `all`). Other than that, seems all fine to me.",
        "createdAt" : "2019-08-24T18:43:06Z",
        "updatedAt" : "2019-08-25T16:22:02Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "a9b9cdb7-0fb3-4bf1-981b-3975bd7ddfc4",
        "parentId" : "759f2440-101a-4bd5-9cfb-1c48febc0260",
        "authorId" : "e1cdb3b2-ab59-4e4e-a20c-d31926a44bf8",
        "body" : "```nonzero``` isn't necessarily an array, for example in test ```TestArrayEqual.test_subclass_that_overrides_eq``` the not equal operator returns a single bool - calling ```.all()``` on it would raise an ```AttributeError```. You're right about ```all``` being python's ```all``` - I'll import the function from numpy to fix that.\r\n\r\nAlso, applying operator ```~``` to a bool wouldn't work as intended, so I think it would be better to use ```any```:\r\n```python\r\nnonzero = y != 0\r\nif not any(nonzero):\r\n\tmax_rel_error = array(inf)\r\nelse:\r\n\tmax_rel_error = (error[nonzero] / abs(y[nonzero])).max()\r\n```\r\nThat would work even if the not equal operator returns a single bool, but it's kind of hard to read, so we could also invert the if statement.\r\nThoughts?",
        "createdAt" : "2019-08-25T10:47:10Z",
        "updatedAt" : "2019-08-25T16:22:02Z",
        "lastEditedBy" : "e1cdb3b2-ab59-4e4e-a20c-d31926a44bf8",
        "tags" : [
        ]
      },
      {
        "id" : "b94d2fe4-73ff-450c-8d32-cc672394ec14",
        "parentId" : "759f2440-101a-4bd5-9cfb-1c48febc0260",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "A numpy bool woul dbe good enough and considering that indexing works below it should do. But `np.all` is fine as well.",
        "createdAt" : "2019-08-25T14:48:45Z",
        "updatedAt" : "2019-08-25T16:22:02Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "76bbf086-b390-485d-9efb-9def0cb4693f",
        "parentId" : "759f2440-101a-4bd5-9cfb-1c48febc0260",
        "authorId" : "e1cdb3b2-ab59-4e4e-a20c-d31926a44bf8",
        "body" : "So, simply this?\r\n```python\r\nnonzero = bool_(y != 0)\r\nif all(~nonzero):\r\n\tmax_rel_error = array(inf)\r\nelse:\r\n\tmax_rel_error = (error[nonzero] / abs(y[nonzero])).max()\r\n```",
        "createdAt" : "2019-08-25T15:17:25Z",
        "updatedAt" : "2019-08-25T16:22:02Z",
        "lastEditedBy" : "e1cdb3b2-ab59-4e4e-a20c-d31926a44bf8",
        "tags" : [
        ]
      },
      {
        "id" : "e49e84da-edc9-4e56-9b62-372beaed9391",
        "parentId" : "759f2440-101a-4bd5-9cfb-1c48febc0260",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Just make it `np.any` and I will be happy (or tell me that it already uses `np.any`).",
        "createdAt" : "2019-08-25T15:34:36Z",
        "updatedAt" : "2019-08-25T16:22:02Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "74963311-8b3d-4793-bfc4-5b7c0775b438",
        "parentId" : "759f2440-101a-4bd5-9cfb-1c48febc0260",
        "authorId" : "e1cdb3b2-ab59-4e4e-a20c-d31926a44bf8",
        "body" : "Do you mean ```np.all``` here? Yes, ```all``` is imported at the top of the function.",
        "createdAt" : "2019-08-25T15:37:23Z",
        "updatedAt" : "2019-08-25T16:22:02Z",
        "lastEditedBy" : "e1cdb3b2-ab59-4e4e-a20c-d31926a44bf8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5cad8c098e39a9091b9cf22d5a9890250e90b79",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +824,828 @@                    # Filter values where the divisor would be zero\n                    nonzero = bool_(y != 0)\n                    if all(~nonzero):\n                        max_rel_error = array(inf)\n                    else:"
  },
  {
    "id" : "34b21500-d74e-47c7-b4a7-7c417a86d183",
    "prId" : 14841,
    "prUrl" : "https://github.com/numpy/numpy/pull/14841#pullrequestreview-315230273",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "687ed594-0bbd-459b-bb54-98d5fc7dcbf6",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "The assertion error on line 402/408 below is now unreachable - `assert_equal(datetime64('nat'), timedelta64('nat'))` used to assert and no longer does.",
        "createdAt" : "2019-11-11T14:21:16Z",
        "updatedAt" : "2019-11-21T22:48:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "63eac51d-0bc8-42cc-a45e-d712bb7c5cb9",
        "parentId" : "687ed594-0bbd-459b-bb54-98d5fc7dcbf6",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "The logic on lines 379-382 now fails, since `gisnan` returns True for Nat as well as Nan. Adding a test and rearranging the logic to test for NaT before Nan.",
        "createdAt" : "2019-11-12T00:17:41Z",
        "updatedAt" : "2019-11-21T22:48:17Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a056ded3f3c936a2c06416642e63e6d1c21ef88",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +376,380 @@\n    try:\n        isdesnat = isnat(desired)\n        isactnat = isnat(actual)\n        dtypes_match = array(desired).dtype.type == array(actual).dtype.type"
  },
  {
    "id" : "720d8b82-fb47-4e04-8583-fb6c146c72a6",
    "prId" : 14841,
    "prUrl" : "https://github.com/numpy/numpy/pull/14841#pullrequestreview-317629781",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "befc5142-2f3f-4e33-b1a0-e9445ca24287",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "You only want `M` here, not `m`",
        "createdAt" : "2019-11-12T00:31:58Z",
        "updatedAt" : "2019-11-21T22:48:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "8ab3a4ac-fd0f-4b08-8ec8-adf8f7a1630c",
        "parentId" : "befc5142-2f3f-4e33-b1a0-e9445ca24287",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "It doesn't really matter, the test just below this is only for things that will have a signbit on a 0 value, so timedelta64 might as well never go to the next clause",
        "createdAt" : "2019-11-12T01:07:28Z",
        "updatedAt" : "2019-11-21T22:48:17Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "9c48891f-8480-4630-b7b4-3fc6cc84d2a4",
        "parentId" : "befc5142-2f3f-4e33-b1a0-e9445ca24287",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Well at that point you may as well add integers here too - at any rate, the comment is saying \"this won't work\", not \"this is a shortcut to save time\".",
        "createdAt" : "2019-11-12T01:36:31Z",
        "updatedAt" : "2019-11-21T22:48:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "45b5eff5-24a5-4f79-8ce8-b961b2005ed6",
        "parentId" : "befc5142-2f3f-4e33-b1a0-e9445ca24287",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "ok, fixing",
        "createdAt" : "2019-11-12T02:09:23Z",
        "updatedAt" : "2019-11-21T22:48:17Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "c8625fbc-7e0d-4f4d-8cad-48802d38bba2",
        "parentId" : "befc5142-2f3f-4e33-b1a0-e9445ca24287",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "actually, `np.timedelta64(7, 's') == 0` emits a DeprecationWarning, so we need both 'Mm', and the comment is wrong",
        "createdAt" : "2019-11-12T02:15:13Z",
        "updatedAt" : "2019-11-21T22:48:17Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "df40f685-efbb-4935-bf0b-ef9a4851f690",
        "parentId" : "befc5142-2f3f-4e33-b1a0-e9445ca24287",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Seems weird that `td[s] == td` is deprecated yet `td[s] + td` is not - perhaps worth opening a new issue about",
        "createdAt" : "2019-11-15T13:54:48Z",
        "updatedAt" : "2019-11-21T22:48:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a056ded3f3c936a2c06416642e63e6d1c21ef88",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +401,405 @@        array_desired = array(desired)\n        if (array_actual.dtype.char in 'Mm' or\n                array_desired.dtype.char in 'Mm'):\n            # version 1.18\n            # until this version, gisnan failed for datetime64 and timedelta64."
  },
  {
    "id" : "e9f41814-d65c-4d6b-b610-a85b198f8d76",
    "prId" : 14841,
    "prUrl" : "https://github.com/numpy/numpy/pull/14841#pullrequestreview-317692583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01958b04-cd15-43c1-8464-01947c51fa62",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "nit: maybe `asarray`?",
        "createdAt" : "2019-11-15T13:57:06Z",
        "updatedAt" : "2019-11-21T22:48:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ae81dd2d-cc70-43d3-bb2a-0145969c5883",
        "parentId" : "01958b04-cd15-43c1-8464-01947c51fa62",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "There is a check above for `isinstance(actual, ndarray) or isinstance(desired, ndarray): return assert_array_equal(actual, desired, ...`. I copied the pattern from (after the changes) line 380 in the clause above this one, should I change them both?",
        "createdAt" : "2019-11-15T14:29:34Z",
        "updatedAt" : "2019-11-21T22:48:17Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "13a73b63-2eb1-4a56-9a94-610a717f0229",
        "parentId" : "01958b04-cd15-43c1-8464-01947c51fa62",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Fair enough, I suppose that means there's no point using asarray.",
        "createdAt" : "2019-11-15T15:31:31Z",
        "updatedAt" : "2019-11-21T22:48:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a056ded3f3c936a2c06416642e63e6d1c21ef88",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +399,403 @@        # handle signed zero specially for floats\n        array_actual = array(actual)\n        array_desired = array(desired)\n        if (array_actual.dtype.char in 'Mm' or\n                array_desired.dtype.char in 'Mm'):"
  },
  {
    "id" : "5406ce26-661e-40c6-80f5-7aaa91a5225f",
    "prId" : 15021,
    "prUrl" : "https://github.com/numpy/numpy/pull/15021#pullrequestreview-327083036",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8aa1108f-489d-40fa-a7ab-be2ee2c46cb0",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "\r\n```suggestion\r\n                info[p[0].strip(':').lower()] = int(p[1]) * 1024\r\n```\r\nBased on https://lore.kernel.org/patchwork/patch/666444/, this measurement is in KiB",
        "createdAt" : "2019-12-02T18:07:27Z",
        "updatedAt" : "2019-12-02T18:13:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e2934755-be95-44eb-9157-dbbbfc9ad16e",
        "parentId" : "8aa1108f-489d-40fa-a7ab-be2ee2c46cb0",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Ok, thanks. (follow-up in gh-15052)",
        "createdAt" : "2019-12-04T19:06:05Z",
        "updatedAt" : "2019-12-04T19:06:06Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "d57739d3152c366a43f0d17694e2ea8d5db142d7",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +2444,2448 @@            for line in f:\n                p = line.split()\n                info[p[0].strip(':').lower()] = float(p[1]) * 1e3\n\n        if 'memavailable' in info:"
  },
  {
    "id" : "d9b27ed3-88b7-46c1-b07d-486bd39ec1c0",
    "prId" : 15021,
    "prUrl" : "https://github.com/numpy/numpy/pull/15021#pullrequestreview-327083074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8dc3851-5e7b-4153-b6a9-9328bf849c96",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "nit: consider including `kib`, `MiB`, etc",
        "createdAt" : "2019-12-02T18:09:13Z",
        "updatedAt" : "2019-12-02T18:13:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "53ceb875-7504-4c9e-8831-ce8ce7e9b208",
        "parentId" : "e8dc3851-5e7b-4153-b6a9-9328bf849c96",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Added",
        "createdAt" : "2019-12-04T19:06:10Z",
        "updatedAt" : "2019-12-04T19:06:10Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "d57739d3152c366a43f0d17694e2ea8d5db142d7",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +2420,2424 @@    suffixes = {'': 1.0, 'b': 1.0,\n                'k': 1e3, 'm': 1e6, 'g': 1e9, 't': 1e12,\n                'kb': 1e3, 'mb': 1e6, 'gb': 1e9, 'tb': 1e12}\n\n    size_re = re.compile(r'^\\s*(\\d+|\\d+\\.\\d+)\\s*({0})\\s*$'.format("
  },
  {
    "id" : "1108cacf-2be8-492b-928a-63b110b6fba4",
    "prId" : 15021,
    "prUrl" : "https://github.com/numpy/numpy/pull/15021#pullrequestreview-327083319",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89a08c4b-2ed4-4198-9b37-5ef1b2dc8a5f",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "nit: Perhaps for brevity:\r\n```\r\nsuffixes = {'': 1.0, 'k': 1e3, 'm': 1e6, 'g': 1e9, 't': 1e12}\r\nsuffixes.update({k + 'b': v for k, v in suffixes.items()})  # allow a trailing b",
        "createdAt" : "2019-12-02T18:09:47Z",
        "updatedAt" : "2019-12-02T18:13:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "9cba2a1a-62a4-4605-9002-583d6d3ea020",
        "parentId" : "89a08c4b-2ed4-4198-9b37-5ef1b2dc8a5f",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "After adding kib/et al, it seemed cleaner to not do this.",
        "createdAt" : "2019-12-04T19:06:36Z",
        "updatedAt" : "2019-12-04T19:06:42Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "d57739d3152c366a43f0d17694e2ea8d5db142d7",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +2418,2422 @@def _parse_size(size_str):\n    \"\"\"Convert memory size strings ('12 GB' etc.) to float\"\"\"\n    suffixes = {'': 1.0, 'b': 1.0,\n                'k': 1e3, 'm': 1e6, 'g': 1e9, 't': 1e12,\n                'kb': 1e3, 'mb': 1e6, 'gb': 1e9, 'tb': 1e12}"
  },
  {
    "id" : "e1311cf1-0178-4217-a871-eadd038a3f76",
    "prId" : 15021,
    "prUrl" : "https://github.com/numpy/numpy/pull/15021#pullrequestreview-327105342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6175504f-ff3f-4584-8461-a67b228a025c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "nit: could use [`_ArrayMemoryError._size_to_string`](https://github.com/numpy/numpy/blob/master/numpy/core/_exceptions.py#L158) here to format numbers as prefixed bytes. ",
        "createdAt" : "2019-12-02T18:11:10Z",
        "updatedAt" : "2019-12-02T18:13:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ea958d4d-ebad-43b7-b47a-ffefa746c651",
        "parentId" : "6175504f-ff3f-4584-8461-a67b228a025c",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Didn't change this: corner-case message in test suite, and probably would have involved refactoring the utility function out from `_ArrayMemoryError`.",
        "createdAt" : "2019-12-04T19:11:02Z",
        "updatedAt" : "2019-12-04T19:11:02Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "45aac509-fc24-43f9-83ac-61589184a012",
        "parentId" : "6175504f-ff3f-4584-8461-a67b228a025c",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Fair",
        "createdAt" : "2019-12-04T19:43:16Z",
        "updatedAt" : "2019-12-04T19:43:16Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "d57739d3152c366a43f0d17694e2ea8d5db142d7",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +2411,2415 @@        else:\n            msg = '{0} GB memory required, but {1} GB available'.format(\n                free_bytes/1e9, mem_free/1e9)\n\n    return pytest.mark.skipif(mem_free < free_bytes, reason=msg)"
  },
  {
    "id" : "d2350432-053b-49cc-9a53-4c72db3c4c50",
    "prId" : 15021,
    "prUrl" : "https://github.com/numpy/numpy/pull/15021#pullrequestreview-327083778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "057399a8-07f2-402e-ba2a-7ff5cb9be551",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```suggestion\r\n               'NPY_AVAILABLE_MEM=\"{1} GB\" set'.format(\r\n```",
        "createdAt" : "2019-12-02T18:11:26Z",
        "updatedAt" : "2019-12-02T18:13:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a6182284-ff7a-4c81-a840-c9fa04368745",
        "parentId" : "057399a8-07f2-402e-ba2a-7ff5cb9be551",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "{1} is the string value of the env var here",
        "createdAt" : "2019-12-04T19:07:23Z",
        "updatedAt" : "2019-12-04T19:07:24Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "d57739d3152c366a43f0d17694e2ea8d5db142d7",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +2399,2403 @@\n        msg = ('{0} GB memory required, but environment variable '\n               'NPY_AVAILABLE_MEM={1} set'.format(\n                   free_bytes/1e9, env_value))\n    else:"
  },
  {
    "id" : "7cbc155c-0b48-41c0-96f9-ffa1d76b197a",
    "prId" : 15021,
    "prUrl" : "https://github.com/numpy/numpy/pull/15021#pullrequestreview-327083816",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd4803a8-0cb8-426a-9b82-7014fa854f2e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "nit: sizes are ints,\r\n```suggestion\r\n    return int(float(m.group(1)) * suffixes[m.group(2)])\r\n```",
        "createdAt" : "2019-12-02T18:12:09Z",
        "updatedAt" : "2019-12-02T18:13:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "152420d3-60e4-4d7c-884d-f03ee8b750b2",
        "parentId" : "cd4803a8-0cb8-426a-9b82-7014fa854f2e",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "ok",
        "createdAt" : "2019-12-04T19:07:27Z",
        "updatedAt" : "2019-12-04T19:07:27Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "d57739d3152c366a43f0d17694e2ea8d5db142d7",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +2428,2432 @@    if not m or m.group(2) not in suffixes:\n        raise ValueError(\"value {!r} not a valid size\".format(size_str))\n    return float(m.group(1)) * suffixes[m.group(2)]\n\n"
  },
  {
    "id" : "7a0a8345-00a8-46c1-a090-858d502d415c",
    "prId" : 15072,
    "prUrl" : "https://github.com/numpy/numpy/pull/15072#pullrequestreview-328600020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4323adf4-c394-4b9c-8620-461f884bf8ec",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Be good to put a blank line after the function definitions, i.e. before both return statements.",
        "createdAt" : "2019-12-07T23:16:07Z",
        "updatedAt" : "2019-12-08T10:32:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "88fc47c9-f1f6-4fcd-af0a-661c04b32924",
        "parentId" : "4323adf4-c394-4b9c-8620-461f884bf8ec",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "ok",
        "createdAt" : "2019-12-08T10:31:28Z",
        "updatedAt" : "2019-12-08T10:32:26Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f845cee31a385c187f1a5637f06e3b4587f2691",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +2402,2406 @@                pytest.xfail(\"MemoryError raised\")\n\n        return wrapper\n\n    return decorator"
  }
]