[
  {
    "id" : "9c11c7d8-ff99-4b3a-8451-57701f624385",
    "prId" : 11122,
    "prUrl" : "https://github.com/numpy/numpy/pull/11122#pullrequestreview-125647565",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed4ae7ef-16b4-4da7-bdd1-9f29deaac40c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Not sure I agree with this - what if `x` and `y` are quantities of different dimensions? The test should still compare the empty arrays so that the correct error is raised, right?",
        "createdAt" : "2018-06-04T08:11:52Z",
        "updatedAt" : "2018-06-04T13:38:18Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e2cb0e8a-97b9-4154-afde-662a232ac147",
        "parentId" : "ed4ae7ef-16b4-4da7-bdd1-9f29deaac40c",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "It is the same case as the `if x.size == 0` stanza above, but for the case where `x` and `y` are both scalar. In principle, I agree the comparison should work for empty elements, but in practice, this is not the case (e.g., `matrix` changing its shape being one problem...)\r\n\r\nSince this was here before, I propose to leave it as is.",
        "createdAt" : "2018-06-04T13:36:11Z",
        "updatedAt" : "2018-06-04T13:38:18Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "bc0979b7-b2f4-4527-ac96-9bbaed82e43b",
        "parentId" : "ed4ae7ef-16b4-4da7-bdd1-9f29deaac40c",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Sure, i agree this is out of scope for the patch",
        "createdAt" : "2018-06-04T16:19:33Z",
        "updatedAt" : "2018-06-04T16:19:34Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3c016407-1f24-4f01-af23-aa82e68c8370",
        "parentId" : "ed4ae7ef-16b4-4da7-bdd1-9f29deaac40c",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Overall, it sadly remains a chunk of rather fragile code...",
        "createdAt" : "2018-06-04T16:23:23Z",
        "updatedAt" : "2018-06-04T16:23:23Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ad49aaaf497c6daadb9b66f295f58a315476e01",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +754,758 @@                return\n        elif flagged:\n            # no sense doing comparison if everything is flagged.\n            return\n"
  },
  {
    "id" : "e51d437e-a1e1-45ad-ace2-7605e6afd962",
    "prId" : 11122,
    "prUrl" : "https://github.com/numpy/numpy/pull/11122#pullrequestreview-147348149",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69e4a72f-1f4b-4d64-9a89-301b2b4ae90e",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm,\r\n```\r\nIn [10]: ma.masked != True\r\nOut[10]: masked\r\n\r\nIn [11]: ma.masked == True\r\nOut[11]: masked\r\n\r\nIn [12]: bool(ma.masked)\r\nOut[12]: False\r\n```\r\n@mhvk The camparison to True seems to achieve nothing here.",
        "createdAt" : "2018-08-17T18:58:08Z",
        "updatedAt" : "2018-08-17T18:59:48Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "42d5ac52-8c0b-401a-9218-160f7d20b3e4",
        "parentId" : "69e4a72f-1f4b-4d64-9a89-301b2b4ae90e",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "The purpose is to ensure that the stanza is *not* executed if `x_id` or `y_id` is `masked`, yet is executed if they are different.",
        "createdAt" : "2018-08-17T19:09:25Z",
        "updatedAt" : "2018-08-17T19:09:26Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ad49aaaf497c6daadb9b66f295f58a315476e01",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +704,708 @@        x_id = func(x)\n        y_id = func(y)\n        if (x_id == y_id).all() != True:\n            msg = build_err_msg([x, y],\n                                err_msg + '\\nx and y %s location mismatch:'"
  },
  {
    "id" : "3cedce5f-b9ac-4f64-9068-eee27e6742d9",
    "prId" : 12243,
    "prUrl" : "https://github.com/numpy/numpy/pull/12243#pullrequestreview-167226937",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab9f7a8f-3c0e-4fab-88e6-f576bafa6285",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Why did you change the calculation here? Can you show this is more correct?",
        "createdAt" : "2018-10-23T05:50:35Z",
        "updatedAt" : "2018-10-23T08:30:22Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "13d1a134-fb9e-4e32-8bde-1bf63dcd59d9",
        "parentId" : "ab9f7a8f-3c0e-4fab-88e6-f576bafa6285",
        "authorId" : "84f821fb-7447-4379-ac03-d07baea8a0a4",
        "body" : "Sure. First of all, the variable name `match` is misleading, because what it actually means is `mismatch`, which you can tell from the string the variable tries to format.\r\nThe original way to calculate `match` (which is actually mismatch) is firstly calculate match percentage and then subtract it from 100. This logic is verbose and not compatible with this bug fix, because in this bug fix we are trying to count NaN's as matched result, which is not taken into account in the NaN-free `reduced`. So here it's not feasible to count results that matched (`1`), however results that are not matched (`0`) are stil meaningful here.",
        "createdAt" : "2018-10-23T06:01:08Z",
        "updatedAt" : "2018-10-23T08:30:22Z",
        "lastEditedBy" : "84f821fb-7447-4379-ac03-d07baea8a0a4",
        "tags" : [
        ]
      }
    ],
    "commit" : "be5ea7d92d542e7c7eb055c5831a79850f4bfbee",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +787,791 @@            msg = build_err_msg([ox, oy],\n                                err_msg\n                                + '\\n(mismatch %s%%)' % (mismatch,),\n                                verbose=verbose, header=header,\n                                names=('x', 'y'), precision=precision)"
  },
  {
    "id" : "d116ea74-a3b2-4a2b-8087-779a10a1b26a",
    "prId" : 12591,
    "prUrl" : "https://github.com/numpy/numpy/pull/12591#pullrequestreview-188543447",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c07cd85-d0c4-4110-bfb3-9dc8b5d51752",
        "parentId" : null,
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Do I get a prize for using the first Python 3 only feature in NumPy? :)",
        "createdAt" : "2018-12-20T16:56:13Z",
        "updatedAt" : "2019-01-02T05:49:46Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "94c556b4-7f71-4a35-a9c5-e42a660f0877",
        "parentId" : "1c07cd85-d0c4-4110-bfb3-9dc8b5d51752",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Why not use a 2.7 feature here too, and combine both `with`s into a single `with`?",
        "createdAt" : "2018-12-23T21:23:14Z",
        "updatedAt" : "2019-01-02T05:49:46Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1d1df5bf-5a5f-449d-be37-0ea8c05cbb99",
        "parentId" : "1c07cd85-d0c4-4110-bfb3-9dc8b5d51752",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "I could, but then I need an ugly explicit continuation character `\\`, e.g.,\r\n```python\r\n            with errstate(invalid='ignore', divide='ignore'), \\\r\n                    contextlib.suppress(TypeError):\r\n                # ignore errors for non-numeric types\r\n```",
        "createdAt" : "2018-12-31T23:56:42Z",
        "updatedAt" : "2019-01-02T05:49:46Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "d13123d85cfb1a85e985debb991601bd0dd6ab2e",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +799,803 @@            with errstate(invalid='ignore', divide='ignore'):\n                # ignore errors for non-numeric types\n                with contextlib.suppress(TypeError):\n                    error = abs(x - y)\n                    max_abs_error = error.max()"
  },
  {
    "id" : "23646660-8354-426f-a4ee-ed0b0bfd97df",
    "prId" : 12594,
    "prUrl" : "https://github.com/numpy/numpy/pull/12594#pullrequestreview-186461457",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9bc66a32-09db-41c5-a0c1-b1a077b93d78",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Nice catch",
        "createdAt" : "2018-12-19T09:49:29Z",
        "updatedAt" : "2019-04-21T08:07:16Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "f402a691a9c99e0ba2e090d4f8269ea81aac1a50",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +2248,2252 @@    # not meaningful to test if there is no refcounting\n    if not HAS_REFCOUNT:\n        yield\n        return\n"
  }
]