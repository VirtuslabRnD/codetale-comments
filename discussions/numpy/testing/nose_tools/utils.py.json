[
  {
    "id" : "535a328e-deb3-4bb2-82ed-409ee5f33826",
    "prId" : 10193,
    "prUrl" : "https://github.com/numpy/numpy/pull/10193#pullrequestreview-82570725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a167174-f9fc-4c61-a064-6df248ddc38a",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is at best a workaround. It doesn't solve the underlying problem, so the following still has the warning-swallowing problems:\r\n```\r\nassert_equal(np.void(b'test'), np.datetime64('2017'))\r\n```",
        "createdAt" : "2017-12-10T20:11:06Z",
        "updatedAt" : "2017-12-10T20:16:23Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e389efee-5a8a-4c98-8d37-80924c9e0dd6",
        "parentId" : "5a167174-f9fc-4c61-a064-6df248ddc38a",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "It may be incomplete, but I don't think it is a workaround, differing types should be handled with the NaT stuff, not passed on to \"==\". For the rest, I'm thinking that we should not intercept any of the warning exceptions, just raise all of them. It is only in development mode that they are raised, and those errors should also be fixed in development mode.",
        "createdAt" : "2017-12-10T20:24:15Z",
        "updatedAt" : "2017-12-10T20:24:16Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e1bafa07-b197-4a97-a0f8-06dd3f9f4c1f",
        "parentId" : "5a167174-f9fc-4c61-a064-6df248ddc38a",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I see two approaches here for the `==` fallback,\r\n\r\n- Suppress deprecation warnings, assert_equal should do its thing regardless.\r\n- Let deprecation warnings raise without conversion to `AssertionError`\r\n\r\nThe first can lead to unexpected changes when deprecations expire, the second will generally require fixes or rewrites that could conceivably be difficult before the deprecation expires.",
        "createdAt" : "2017-12-11T17:23:03Z",
        "updatedAt" : "2017-12-11T17:23:03Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b98e5984c2c74c61b5ee452ce7553640622b46e7",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +401,405 @@                return\n            else:\n                raise AssertionError(msg)\n\n    except (TypeError, ValueError, NotImplementedError):"
  }
]