[
  {
    "id" : "1f4a6f5b-3814-4740-abaa-d9fbdb028fe6",
    "prId" : 16729,
    "prUrl" : "https://github.com/numpy/numpy/pull/16729#pullrequestreview-441773005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efed1937-acc0-4884-8c1f-0b3f6113b3c6",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is legal for suitable a:\r\n```\r\n>>> a = np.array([], dtype=object)\r\n>>> np.prod(a, initial=int)\r\nint\r\n```\r\nOr for an almost plausible use:\r\n```python\r\n>>> from ctypes import c_uint8\r\n>>> shape = np.array([1, 2, 3])\r\n>>> np.prod(shape.astype(object), initial=c_uint8)\r\n# a ctypes array type\r\nnumpy.core.fromnumeric.c_ubyte_Array_1_Array_2_Array_3\r\n```",
        "createdAt" : "2020-07-02T13:04:10Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c7674803-2cd6-4b95-addb-b518d0c080a3",
        "parentId" : "efed1937-acc0-4884-8c1f-0b3f6113b3c6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Incidentally, this also proves that the return type of `np.prod` can be anything, not just `number`.",
        "createdAt" : "2020-07-02T13:07:16Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "077345e1-6254-44f2-82eb-9eafeaec7813",
        "parentId" : "efed1937-acc0-4884-8c1f-0b3f6113b3c6",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "> Incidentally, this also proves that the return type of `np.prod` can be anything, not just `number`.\r\n\r\nIf I'm not mistaken this is limited to, the notoriously difficult to type, object arrays.\r\nIf so I feel it'd be better to leave things as they are for now, especially since this appears to be a very specific (seemingly undocumented?) situation.\r\n\r\nThe alternative would be to set `number` and the return type to `Any`, \r\nwhich is practically useless from a typing standpoint.\r\n",
        "createdAt" : "2020-07-02T13:25:12Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "f9a47cd1-51b2-441f-b4c1-374d17dd7439",
        "parentId" : "efed1937-acc0-4884-8c1f-0b3f6113b3c6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> especially since this appears to be a very specific (seemingly undocumented?) situation.\r\n\r\nHow so? `initial` is documented as a \"scalar\", not as a number.\r\n\r\nPerhaps the compromise is to stick `# TODO: This is actually legal` or similar by each test case that currently expects and results in an error, but should not.",
        "createdAt" : "2020-07-02T14:19:29Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d0d02699-d508-4a9d-86ac-cf1c75b90993",
        "parentId" : "efed1937-acc0-4884-8c1f-0b3f6113b3c6",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "> How so? `initial` is documented as a \"scalar\", not as a number.\r\n\r\nThat's actually a good point; I more or less conflated scalar with numerical scalar here.\r\n\r\n> Perhaps the compromise is to stick # TODO: This is actually legal or similar by each test case that currently expects and results in an error, but should not.\r\n\r\nI agree, I'll push an update in a bit.\r\n\r\nAs for the future: \r\n\r\nWhat I've gathered is, in the case of object arrays, that `np.prod()` simply falls back to the `.__mult__()` method of the passed arrays individual elements and hence all that's required of `initial` is that its type is compatible with aforementioned elements. \r\nFor object arrays we may or may not be able to easily express this with a `__mult__` Protocol once ndarray is generic over its dtype, though this will depend on the exact implementation details.",
        "createdAt" : "2020-07-02T15:02:27Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "05ffdfa0-ba7b-441f-8d17-a98db0c88b93",
        "parentId" : "efed1937-acc0-4884-8c1f-0b3f6113b3c6",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "> Perhaps the compromise is to stick `# TODO: This is actually legal` or similar by each test case that currently expects and results in an error, but should not.\r\n\r\nAdded in https://github.com/numpy/numpy/pull/16729/commits/3bc51b8f1c3af1dbf17d6b84084ce6b914b97c52.",
        "createdAt" : "2020-07-02T15:09:41Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "65518160-40c8-454c-a7b9-e5a2d3f59e39",
        "parentId" : "efed1937-acc0-4884-8c1f-0b3f6113b3c6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> For object arrays we may or may not be able to easily express this with a `__mult__` Protocol once ndarray is generic over its dtype, though this will depend on the exact implementation details.\r\n\r\nI wouldn't personally bother. Simply having `prod(ndarray[int], initial: int) -> int`,  `prod(ndarray[object], initial: object) -> object` etc is all that's really needed. The details of exactly what the object loops of ufuncs do and do not support is not really interesting.",
        "createdAt" : "2020-07-02T15:10:00Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2e27c26c00993660c87944a271e5e11846f0285",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +129,133 @@np.prod(a, out=False)  # E: No overload variant of \"prod\" matches argument type\nnp.prod(a, keepdims=1.0)  # E: No overload variant of \"prod\" matches argument type\nnp.prod(a, initial=int)  # E: No overload variant of \"prod\" matches argument type\nnp.prod(a, where=1.0)  # E: No overload variant of \"prod\" matches argument type\n"
  }
]