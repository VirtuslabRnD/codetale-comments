[
  {
    "id" : "c025fdb9-a84c-4345-863f-8f10955d04f8",
    "prId" : 2703,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b5cb4dc-8c4a-45b1-84c8-3831b9b4c528",
        "parentId" : null,
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "This doesn't look right, `MaskedArray` isn't a dtype.\n",
        "createdAt" : "2012-11-21T20:20:12Z",
        "updatedAt" : "2012-11-22T19:56:43Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "dadf5b992802edc6d286b2ea3fd8e446759ad998",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1567,1571 @@        # Check that fill_value is preserved if dtype is specified and the\n        # dtype is an ndarray sub-class and has a _fill_value attribute\n        y = x.view(MaskedArray)\n        assert_(y.fill_value==1)\n"
  },
  {
    "id" : "81670fdd-f051-4c7c-99b5-326e3af1bf49",
    "prId" : 2703,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f51db930-9e4d-4b1e-848a-05b59fd3bfd0",
        "parentId" : null,
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Same here, `ndarray` isn't a dtype.\n",
        "createdAt" : "2012-11-21T20:20:28Z",
        "updatedAt" : "2012-11-22T19:56:43Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "dadf5b992802edc6d286b2ea3fd8e446759ad998",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1578,1582 @@        # Check that code does not crash if passed an ndarray sub-class that\n        # does not have a _fill_value attribute\n        y = x.view(np.ndarray)\n        y = x.view(type=np.ndarray)\n"
  },
  {
    "id" : "1a2628bf-0446-4b41-bcaf-35932d091a0d",
    "prId" : 3906,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99c4720a-5b9a-425c-9def-0eef48737a2f",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "@charris - this is the test that would now fail if commented in; I'm not sure how it was ever supposed to have worked.\n\nNote also that the test above has been rewritten somewhat: I would not know how to get a single-object array out of a tuple with a single `nd.array` invocation.\n",
        "createdAt" : "2013-10-13T02:08:59Z",
        "updatedAt" : "2013-10-13T03:40:10Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "75414d3f-d505-4e8f-8e68-948c7fdba62e",
        "parentId" : "99c4720a-5b9a-425c-9def-0eef48737a2f",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yeah, this one needs a close look. \n",
        "createdAt" : "2013-10-13T02:26:01Z",
        "updatedAt" : "2013-10-13T03:40:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d9d9aa60adf788567a888f0419a4155bcab8693",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1345,1349 @@        self.assertTrue(isinstance(fval, ndarray))\n        assert_equal(fval.item(), [-999, -12345678.9, asbytes(\"???\")])\n        # NOTE: This test was never run properly as \"fill_value\" rather than\n        # \"fill_val\" was assigned.  Written properly, it fails.\n        #fill_val = np.array((-999, -12345678.9, \"???\"))"
  },
  {
    "id" : "cf3f1cb2-dc75-4b71-985c-a8c7f306eca1",
    "prId" : 3906,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55d660a2-3227-4540-b1e2-eb54716e0d4e",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "@charris - This was another set where the wrong variable was tested.\n\nEDIT -- again found by PEP8 checks -- I certainly did not go through all the tests in any detail!\n",
        "createdAt" : "2013-10-13T02:11:15Z",
        "updatedAt" : "2013-10-13T03:40:10Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "ede0b361-ad4f-4e20-8047-bf511da268af",
        "parentId" : "55d660a2-3227-4540-b1e2-eb54716e0d4e",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm... One is left wondering which version is correct ;) I think you got it right.\n",
        "createdAt" : "2013-10-13T02:33:33Z",
        "updatedAt" : "2013-10-13T03:40:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d9d9aa60adf788567a888f0419a4155bcab8693",
    "line" : 1536,
    "diffHunk" : "@@ -1,1 +2239,2243 @@        a = array([[1, 2, 3, 4, 5]], mask=[[0, 1, 0, 0, 0]])\n        aravel = a.ravel()\n        assert_equal(aravel._mask.shape, aravel.shape)\n        a = array([0, 0], mask=[1, 1])\n        aravel = a.ravel()"
  },
  {
    "id" : "3b468f57-fcc3-4eee-b552-13080096ffc9",
    "prId" : 3906,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c507642-49ec-460e-95a1-0db7f691cb1a",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I don't think this array is big enough, see above.\n",
        "createdAt" : "2013-10-13T02:25:53Z",
        "updatedAt" : "2013-10-13T03:40:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "df4ea4b2-4349-40af-99a7-9db29910d3f8",
        "parentId" : "9c507642-49ec-460e-95a1-0db7f691cb1a",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "The rewrite is correct, I think.  The original,\n\n```\nfill_value = np.array((-999, -12345678.9, \"???\"), dtype=object) \n```\n\nindeed produces an array with three objects, but that does not pass the test. By first creating an array to hold objects, I can fill the first entry with a single tuple holding all three values. I did not know how to invoke `nd.array` such that it treats the tuple as a single object....\n",
        "createdAt" : "2013-10-13T02:48:39Z",
        "updatedAt" : "2013-10-13T03:40:10Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "105ea8c9-f01e-46da-9701-800f4db548a1",
        "parentId" : "9c507642-49ec-460e-95a1-0db7f691cb1a",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Hmm, I noticed this fails on Travis for python 3.2 and 3.3 (but is OK for 2.7) -- since this test never ran properly anyway, shall I comment it out for now? It might be best not to start debugging too much here.\n",
        "createdAt" : "2013-10-13T03:04:31Z",
        "updatedAt" : "2013-10-13T03:40:10Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "babfb559-27a0-4e45-8ddf-d5113b16b962",
        "parentId" : "9c507642-49ec-460e-95a1-0db7f691cb1a",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The original test failed? Was it run?\n",
        "createdAt" : "2013-10-13T03:16:53Z",
        "updatedAt" : "2013-10-13T03:40:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "06d809a2-9a9d-4ed5-93f9-b02ecd0f4c58",
        "parentId" : "9c507642-49ec-460e-95a1-0db7f691cb1a",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "The original test (1384-1385 of original) did\n\n```\nfill_value = np.array((-999, -12345678.9, \"???\"), dtype=object)\nfval = _check_fill_value(fill_val, ndtype) \n```\n\ni.e., it checked the wrong variable, `fill_val` (which was set several lines above and had already been checked).\n",
        "createdAt" : "2013-10-13T03:31:26Z",
        "updatedAt" : "2013-10-13T03:40:10Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d9d9aa60adf788567a888f0419a4155bcab8693",
    "line" : 881,
    "diffHunk" : "@@ -1,1 +1340,1344 @@\n        #.....Using an object-array shouldn't matter either\n        fill_val = np.ndarray(shape=(1,), dtype=object)\n        fill_val[0] = (-999, -12345678.9, asbytes(\"???\"))\n        fval = _check_fill_value(fill_val, object)"
  },
  {
    "id" : "da27db92-fad4-4b1a-99a7-343b62c9ebe1",
    "prId" : 3906,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b15e3527-ecfe-495a-a9d3-0f06b8fda75f",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Umm, the dtype here looks different from the original. \n",
        "createdAt" : "2013-10-13T02:27:52Z",
        "updatedAt" : "2013-10-13T03:40:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "d39158b9-b49c-4a14-ac26-a33f56d197eb",
        "parentId" : "b15e3527-ecfe-495a-a9d3-0f06b8fda75f",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Sorry, my dislike of line breaks got the better of me -- though ndtype is defined identically just above, i.e., the test remains the same.\n",
        "createdAt" : "2013-10-13T02:59:58Z",
        "updatedAt" : "2013-10-13T03:40:10Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d9d9aa60adf788567a888f0419a4155bcab8693",
    "line" : 970,
    "diffHunk" : "@@ -1,1 +1466,1470 @@        assert_equal(tuple(a.fill_value), (10, -10))\n        # Implicit fill_value\n        t = array(list(zip([1, 2, 3], [4, 5, 6])), dtype=ndtype)\n        tt = t['a']\n        tt.set_fill_value(10)"
  },
  {
    "id" : "a50a53d0-ffd4-41f8-b29e-8915e774a4b6",
    "prId" : 3906,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7743d40d-6b2b-45c2-ad1d-0fbf3e5a7727",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I think what the test probably wanted to do is:\n\n```\nfill_value = np.ndarray(shape=(), dtype=object)\nfill_value[()] = (-999, -12345678.9, \"???\")\n```\n",
        "createdAt" : "2013-10-13T12:12:57Z",
        "updatedAt" : "2013-10-13T12:12:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "e60d02c5-8d71-45fa-acdd-87079163b667",
        "parentId" : "7743d40d-6b2b-45c2-ad1d-0fbf3e5a7727",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "@seberg - that would make sense, except that it is what I already turned the test above into... (if written a bit more clumsily).\n\nShall I just remove it?\n",
        "createdAt" : "2013-10-13T16:03:20Z",
        "updatedAt" : "2013-10-13T16:03:20Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "e47e9f30-d456-49c0-afd3-7583d1a5613c",
        "parentId" : "7743d40d-6b2b-45c2-ad1d-0fbf3e5a7727",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Ah, didn't realize there were two tests here. Can't figure out what the other version would be supposed to mean either right now.\n",
        "createdAt" : "2013-10-13T17:02:10Z",
        "updatedAt" : "2013-10-13T17:02:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "2a584cad-5fec-4a85-938a-95b6c261f477",
        "parentId" : "7743d40d-6b2b-45c2-ad1d-0fbf3e5a7727",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@seberg I think this looks OK.\n",
        "createdAt" : "2013-10-13T20:13:41Z",
        "updatedAt" : "2013-10-13T20:13:41Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "36f3880c-31f7-48ea-ad40-f2f2178dbfa7",
        "parentId" : "7743d40d-6b2b-45c2-ad1d-0fbf3e5a7727",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "yeah, sure.\n",
        "createdAt" : "2013-10-13T20:45:55Z",
        "updatedAt" : "2013-10-13T20:45:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d9d9aa60adf788567a888f0419a4155bcab8693",
    "line" : 888,
    "diffHunk" : "@@ -1,1 +1347,1351 @@        # NOTE: This test was never run properly as \"fill_value\" rather than\n        # \"fill_val\" was assigned.  Written properly, it fails.\n        #fill_val = np.array((-999, -12345678.9, \"???\"))\n        #fval = _check_fill_value(fill_val, ndtype)\n        #self.assertTrue(isinstance(fval, ndarray))"
  },
  {
    "id" : "0cc4ff89-4858-44ef-b4cc-ec299cfb75e2",
    "prId" : 4339,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98aff1de-6ab3-4873-9364-43f0681956ab",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "I'd still like an axis=None and default axis (also None) test for multidimensional append\n",
        "createdAt" : "2014-02-24T17:57:28Z",
        "updatedAt" : "2014-03-11T19:39:05Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "cc86a581-c541-4335-8c2f-88e375840485",
        "parentId" : "98aff1de-6ab3-4873-9364-43f0681956ab",
        "authorId" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "body" : "OK, I'll add a few more tests tonight.\n",
        "createdAt" : "2014-02-24T18:26:45Z",
        "updatedAt" : "2014-03-11T19:39:05Z",
        "lastEditedBy" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f8c7a711fb8b86b0f2a81c802efab3984ff61bc",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +3623,3627 @@    assert_array_equal(result.data, expected.data)\n    assert_array_equal(result.mask, expected.mask)\n    \n\n###############################################################################"
  },
  {
    "id" : "ad73494e-672e-47fb-b30b-836e62bc0695",
    "prId" : 5563,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03dd6412-965c-443b-877a-a08c7858ce7e",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'd be inclined to have a double loop, something like\n\n```\nimport itertools\n...\nfor lhs_dt, rhs_dt in itertools.product(self.othertypes, self.othertypes):\n```\n",
        "createdAt" : "2015-02-18T18:30:52Z",
        "updatedAt" : "2015-02-19T01:16:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "172cd293-4596-4f8b-951c-cfc691010363",
        "parentId" : "03dd6412-965c-443b-877a-a08c7858ce7e",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "This would likely generate a `DeprecationWarning` or `TypeError` as the types will mismatch. This is exactly what we want to avoid. So, I don't follow your suggestion here.\n",
        "createdAt" : "2015-02-18T18:36:50Z",
        "updatedAt" : "2015-02-19T01:16:40Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      },
      {
        "id" : "97541035-7413-4fb0-a2cc-ce1ed4f0caf3",
        "parentId" : "03dd6412-965c-443b-877a-a08c7858ce7e",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Well, you would need to separate out the valid from the invalid. Note that testing for appropriate warnings and errors is also part of testing. That would make for complete tests, although that may be pushing the scope of this PR...\n",
        "createdAt" : "2015-02-18T18:41:33Z",
        "updatedAt" : "2015-02-19T01:16:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c75d4256-9cc1-4028-92ef-ae50437a0c74",
        "parentId" : "03dd6412-965c-443b-877a-a08c7858ce7e",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "I see your point. I will think about how to go about this.\n",
        "createdAt" : "2015-02-18T19:01:45Z",
        "updatedAt" : "2015-02-19T01:16:40Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      },
      {
        "id" : "ba4c8551-addc-47c0-8965-509c2de96406",
        "parentId" : "03dd6412-965c-443b-877a-a08c7858ce7e",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "Maybe as a pointer, could you please let me know if there is a good way to verify the casting? Would `numpy.can_cast` work in this case? If so, how strict of a setting would I need to use to reproduce the correct behavior.\n",
        "createdAt" : "2015-02-18T19:21:26Z",
        "updatedAt" : "2015-02-19T01:16:40Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      },
      {
        "id" : "6c8dab3d-7d22-4de5-9356-5670e8d8d01b",
        "parentId" : "03dd6412-965c-443b-877a-a08c7858ce7e",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I think so. You can see the TypeError with, e.g.\n\n```\nn [8]: a = ones(3, int8)\n\nIn [9]: true_divide(a, 1, a, casting='same_kind')\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-9-c3a7900a40e1> in <module>()\n----> 1 true_divide(a, 1, a, casting='same_kind')\n\nTypeError: ufunc 'true_divide' output (typecode 'd') could not be coerced to provided output parameter (typecode 'b') according to the casting rule ''same_kind''\n```\n\nI think in numpy 1.10 this is always an error.\n",
        "createdAt" : "2015-02-18T22:54:34Z",
        "updatedAt" : "2015-02-19T01:16:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8af02f701cb94cbfad3b7972d6d106a66fee4f62",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +2000,2004 @@    def test_inplace_addition_scalar_type(self):\n        # Test of inplace additions\n        for t in self.othertypes:\n            with warnings.catch_warnings(record=True) as w:\n                warnings.filterwarnings(\"always\")"
  },
  {
    "id" : "e6b2ac88-f774-46d0-93f4-4447d794d4ff",
    "prId" : 5563,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd88cc72-7fad-48eb-9313-5700e9daa944",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Explanation could be clearer as to which types cause which warnings/errors. Note this only needs to be correct of numpy 1.10.\n",
        "createdAt" : "2015-02-18T18:32:50Z",
        "updatedAt" : "2015-02-19T01:16:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6da91663-5724-4995-aacd-c147778200c8",
        "parentId" : "bd88cc72-7fad-48eb-9313-5700e9daa944",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "I'm not completely clear on what you are wanting to see here, but I can explain the problem I was running into and then maybe you could point me in the right direction. On my machine (Mac OS 10.9.5), I installed Python (2.7.5) and then installed NumPy (1.9.1) from PyPI. When I ran the true division test, I got 2 `DeprecationWarning`s. However, when I ran this on Travis (some kind of Ubuntu I believe), I got 2 `TypeError`s instead. Maybe there is some change upstream of the NumPy that I installed that makes this a `TypeError` going forward. However, I did not feel comfortable making that assumption and wanted to make sure that these changes were backwards compatible. So, I went ahead and made the `TypeError` behave as a warning. Given this, please let me know what you would like me to do?\n",
        "createdAt" : "2015-02-18T18:51:30Z",
        "updatedAt" : "2015-02-19T01:16:40Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      },
      {
        "id" : "79622e2c-6931-4fd4-8b40-aa03ce3975ea",
        "parentId" : "bd88cc72-7fad-48eb-9313-5700e9daa944",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "In a release environment the warnings are warnings, in development (travis ci) they are errors. The release status is determined in `./setup.py`, so normally you should see errors if you do `python runtests.py` or on travis. I assume you aren't doing that ;) That would be `python runtests.py -t numpy/ma/tests/test_core.py` tto just run the tests in `test_core.py`.\n",
        "createdAt" : "2015-02-18T19:15:19Z",
        "updatedAt" : "2015-02-19T01:16:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "51a2abcb-15fc-4a5d-9e6b-a2b0dfcdfecc",
        "parentId" : "bd88cc72-7fad-48eb-9313-5700e9daa944",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "Ah ok. Yeah, you're right I went an unusual path and used [numpy.testing.run_module_suite](http://docs.scipy.org/doc/numpy/reference/generated/numpy.testing.run_module_suite.html#numpy.testing.run_module_suite) with the full path to `test_core.py`. Could I have added an argument to force errors here? I'm guessing `argv=(\"-t\",)`?\n\nAs for explaining this situation, should I just add a better comment or is there something more here that you would like to see?\n",
        "createdAt" : "2015-02-18T19:26:16Z",
        "updatedAt" : "2015-02-19T01:16:40Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      },
      {
        "id" : "2fa36cb0-3546-4c41-8795-d3b552cd0e73",
        "parentId" : "bd88cc72-7fad-48eb-9313-5700e9daa944",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "If you went that route, you need to make sure to install numpy first to get the development version. You could just explain the casting rule. However, I think you should always get a TypeError with inplace division of integer arrays or integer array scalars. Scalars themselves are immutable, so there are no true inplace operations.\n",
        "createdAt" : "2015-02-18T23:11:44Z",
        "updatedAt" : "2015-02-19T01:16:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8af02f701cb94cbfad3b7972d6d106a66fee4f62",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +2136,2140 @@                xm[2] = masked\n\n                # May get a DeprecationWarning or a TypeError.\n                #\n                # This is a consequence of the fact that this is true divide"
  },
  {
    "id" : "749b7b94-204c-4ba0-b421-6af2407deb3f",
    "prId" : 5563,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4330012-1bcf-4e68-a611-89225ec21995",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "`t` is a typestring here and below. You need something like `dtype(t).type(1)`\n",
        "createdAt" : "2015-02-19T02:34:09Z",
        "updatedAt" : "2015-02-19T02:34:09Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c037f139-967a-4765-97fe-29d3f14180f5",
        "parentId" : "d4330012-1bcf-4e68-a611-89225ec21995",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Don't see how it is passing the tests, actually ;)\n",
        "createdAt" : "2015-02-19T02:36:19Z",
        "updatedAt" : "2015-02-19T02:36:19Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "87845b5d-b8b0-4a73-a896-5edf1167270f",
        "parentId" : "d4330012-1bcf-4e68-a611-89225ec21995",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "Yeah, so I had snuck in [1727](https://github.com/numpy/numpy/pull/5563/files#diff-14bc57103bf08898d2d8008d3baa765eR1727). I added a line note in the diff just in case it got lost. This should make sure they are types. Unless, I am not understanding what you are meaning.\n",
        "createdAt" : "2015-02-19T02:47:02Z",
        "updatedAt" : "2015-02-19T02:47:21Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      },
      {
        "id" : "3b11d8a1-99cc-45dd-a87a-f57f277061fa",
        "parentId" : "d4330012-1bcf-4e68-a611-89225ec21995",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Oh, sneaky, I missed that.\n",
        "createdAt" : "2015-02-19T02:49:44Z",
        "updatedAt" : "2015-02-19T02:49:44Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8af02f701cb94cbfad3b7972d6d106a66fee4f62",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +2005,2009 @@                (x, y, xm) = (_.astype(t) for _ in self.uint8data)\n                xm[2] = masked\n                x += t(1)\n                assert_equal(x, y + t(1))\n                xm += t(1)"
  },
  {
    "id" : "e2529b4b-0665-436b-8464-c5bb2340e421",
    "prId" : 5563,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75ecfa84-fe55-4736-abeb-169b99ab62cb",
        "parentId" : null,
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "This line should ensure that they are not typestrings, but actual types (i.e `numpy.uint8`).\n",
        "createdAt" : "2015-02-19T02:44:39Z",
        "updatedAt" : "2015-02-19T02:44:39Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "8af02f701cb94cbfad3b7972d6d106a66fee4f62",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1725,1729 @@        self.floatdata = (x.astype(float), y.astype(float), xm.astype(float))\n        self.othertypes = np.typecodes['AllInteger'] + np.typecodes['AllFloat']\n        self.othertypes = [np.dtype(_).type for _ in self.othertypes]\n        self.uint8data = (\n            x.astype(np.uint8),"
  },
  {
    "id" : "21383824-93c7-471f-b7d7-da33f59f9586",
    "prId" : 5580,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ff9299b-671f-4b43-9eed-b2ebc8cf6009",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What does this test? `m3` is a copy of `m`. A note of explanation would help.\n",
        "createdAt" : "2015-06-12T02:46:04Z",
        "updatedAt" : "2017-01-17T14:48:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4aa7e334-cf3a-431b-972c-c2f5754e4474",
        "parentId" : "6ff9299b-671f-4b43-9eed-b2ebc8cf6009",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "Sure, the point is that we have generated a masked array in two different ways first using `y2 = array(x1, mask=m)` and then `y2a = array(x1, mask=m, copy=1)`. In short, we are testing whether the keyword argument `copy` worked as intended. My understanding was this is to make sure the data and the mask used were copied when it was made true, but would remain the same array if not. By default, `copy` is false.\n",
        "createdAt" : "2015-06-15T13:30:50Z",
        "updatedAt" : "2017-01-17T14:48:57Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      },
      {
        "id" : "1acb731c-cc35-4cdf-80c1-f4797287d7f7",
        "parentId" : "6ff9299b-671f-4b43-9eed-b2ebc8cf6009",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "Also, what kind of explanation would you like here? Are we looking for just a comment explaining the two use cases? Should I break them into two separate tests?\n",
        "createdAt" : "2015-06-15T14:31:28Z",
        "updatedAt" : "2017-01-17T14:48:57Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      },
      {
        "id" : "8ec63a1c-d4ea-4d4a-8b50-41835194a6d1",
        "parentId" : "6ff9299b-671f-4b43-9eed-b2ebc8cf6009",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK.\n",
        "createdAt" : "2015-06-18T02:12:21Z",
        "updatedAt" : "2017-01-17T14:48:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b060fd90f116fbf5b199603a11a4ce9e20c21c1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +395,399 @@        self.assertTrue(y1a.mask is y1.mask)\n\n        y2 = array(x1, mask=m3)\n        self.assertTrue(y2._data.__array_interface__ == x1.__array_interface__)\n        self.assertTrue(y2._mask.__array_interface__ == m3.__array_interface__)"
  },
  {
    "id" : "f01451d6-31e5-471b-b660-5c9ecdfed2c2",
    "prId" : 5706,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aab248c3-1dfd-400a-875e-fea464ebc2d9",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Not documented I guess, but min and max do support keepdims in numpy. But that does not mean you have to do it here.\n",
        "createdAt" : "2016-03-05T13:54:30Z",
        "updatedAt" : "2016-04-04T17:20:25Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "798dd4f22af98facd5113cbbf1b62fd27ad420e3",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +4291,4295 @@\n        for f in ['min', 'max']:\n            testaxis(f, a, d)\n\n        d = (np.arange(24).reshape((2,3,4))%2 == 0)"
  },
  {
    "id" : "1d861239-84d2-4f2d-b6dd-0271097c73ed",
    "prId" : 6094,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9be0f3a-5844-453f-a21c-431ce30e30e4",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "While this PR does fix the str and repr of this array, the array still doesn't seem very useable. \n\n```\n>>> 1/t_ma\nTypeError: ufunc 'divide' not supported for the input types, ....\n```\n\nBut that can be left for another time.\n",
        "createdAt" : "2015-10-03T18:30:48Z",
        "updatedAt" : "2015-10-04T13:50:06Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "954ae6f2-ddb7-4f6e-befd-9e24386e6575",
        "parentId" : "c9be0f3a-5844-453f-a21c-431ce30e30e4",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Oh never mind, this is OK. Structured types do not support many ufuncs.\n",
        "createdAt" : "2015-10-03T18:37:56Z",
        "updatedAt" : "2015-10-04T13:50:06Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "13dd162c498391fbfd108f00ebeae060ed438f8a",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +694,698 @@                            dtype = [('a', '<i8', (3,))])\n        assert str(t_ma[0]) == \"([1, --, 3],)\"\n        assert repr(t_ma[0]) == \"([1, --, 3],)\"\n\n        # additonal tests with structured arrays"
  },
  {
    "id" : "88534f7f-741a-4bf1-b79e-ffaed1291ac8",
    "prId" : 7099,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d04e40e-a5c0-4b4a-85d6-6d42b4d5d902",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "You know, I have no idea what that `MaskedArrayFutureWarning` means. \n\nEDIT: OK, found it.\n",
        "createdAt" : "2016-08-30T00:44:19Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "42861808-1b3d-4255-ae74-875b24c0efc1",
        "parentId" : "0d04e40e-a5c0-4b4a-85d6-6d42b4d5d902",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I think it could use rewording.\n",
        "createdAt" : "2016-08-30T00:48:06Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "514d13679a55a82a96689679002c4ddc514641ce",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +54,58 @@    numpy.ma.core.MaskedArrayFutureWarning,\n    \"setting an item on a masked array which has a shared mask will not copy\")\n\n\nclass TestMaskedArray(TestCase):"
  },
  {
    "id" : "c59894c2-85b9-453a-a293-ec0fae440718",
    "prId" : 7099,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65e4d324-1373-4f06-9d0a-ba291cccd4ef",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Any particular reason to move these into the context?\n",
        "createdAt" : "2016-08-30T00:49:44Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "59d1ba43-0b4f-4253-9bb8-db15b6a81ed2",
        "parentId" : "65e4d324-1373-4f06-9d0a-ba291cccd4ef",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "At least the last of these lines also gives the warning, could only put in that one specificily I guess.\n",
        "createdAt" : "2016-08-30T07:52:32Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "1d5eeea1-6ae1-4a9b-bf94-c1cc9ce9eebb",
        "parentId" : "65e4d324-1373-4f06-9d0a-ba291cccd4ef",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So `isnan` is raising a warning?\n",
        "createdAt" : "2016-08-30T18:57:44Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "f10a8551-61db-4b13-9021-f73e29e55379",
        "parentId" : "65e4d324-1373-4f06-9d0a-ba291cccd4ef",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "the `a[0]` is giving the warning, as it should be (since the element is masked).\n",
        "createdAt" : "2016-08-31T06:48:26Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "514d13679a55a82a96689679002c4ddc514641ce",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +537,541 @@            assert_(np.isnan(float(array([1], mask=[1]))))\n\n            a = array([1, 2, 3], mask=[1, 0, 0])\n            self.assertRaises(TypeError, lambda: float(a))\n            assert_equal(float(a[-1]), 3.)"
  },
  {
    "id" : "0979e481-8d90-41eb-a332-b3c6d173c9f8",
    "prId" : 7586,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc9663a6-5e38-485c-89aa-48edac67fa01",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This raises the question of whether any of these tests are actually verifying things, since `assert_equal` will ignore the mask\n",
        "createdAt" : "2016-04-28T23:32:36Z",
        "updatedAt" : "2016-04-29T21:50:00Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "090bbdd8f3debe0b6a6c4aa542937edf250f9443",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +2999,3003 @@                     masked_array([[10, 20], [10, 20]], [[0, 1], [0, 1]]))\n\n        # assert_equal crashes when passed np.ma.mask\n        self.assertIs(x[1], np.ma.masked)\n        self.assertIs(x.take(1), np.ma.masked)"
  },
  {
    "id" : "4de0c091-47a6-41c3-8378-0f03716a019c",
    "prId" : 8122,
    "prUrl" : "https://github.com/numpy/numpy/pull/8122#pullrequestreview-3090691",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83fc9211-6726-444a-96f1-50a0716be415",
        "parentId" : null,
        "authorId" : "a5a69d97-d7c2-4f15-86c7-ebee69125473",
        "body" : "is there a reason not to test this for object?\n",
        "createdAt" : "2016-10-05T23:36:21Z",
        "updatedAt" : "2016-10-06T11:15:15Z",
        "lastEditedBy" : "a5a69d97-d7c2-4f15-86c7-ebee69125473",
        "tags" : [
        ]
      },
      {
        "id" : "8cae2911-e90f-4b7d-9bd6-23776ffc866a",
        "parentId" : "83fc9211-6726-444a-96f1-50a0716be415",
        "authorId" : "61dfc843-a707-42c9-b2ec-b58219480bb2",
        "body" : "Thanks for the catch... I missed an else here :( Fixed it in the recent commit...\n",
        "createdAt" : "2016-10-06T11:15:17Z",
        "updatedAt" : "2016-10-06T11:15:17Z",
        "lastEditedBy" : "61dfc843-a707-42c9-b2ec-b58219480bb2",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fa49f8d102048f327287e51f44b8414d4dfbd6e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +493,497 @@                    assert_equal(a_pickled.fill_value, 999)\n                else:\n                    assert_equal(a_pickled.fill_value, dtype(999))\n                assert_array_equal(a_pickled.mask, mask)\n"
  },
  {
    "id" : "b41d755c-b00d-46aa-a9dd-c945794b0fb0",
    "prId" : 8297,
    "prUrl" : "https://github.com/numpy/numpy/pull/8297#pullrequestreview-95314517",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37303245-d134-47b4-a3c8-758a101a0376",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Was this still needed?",
        "createdAt" : "2018-02-09T04:24:41Z",
        "updatedAt" : "2018-02-09T04:24:41Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3f9268f4-9a40-44c9-a9fa-2aa2401b0f0f",
        "parentId" : "37303245-d134-47b4-a3c8-758a101a0376",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like it may not be now, could try removing it. Which reminds me that there are a lot of expired deprecations in 1.15 that we should deal with soon.",
        "createdAt" : "2018-02-09T04:38:27Z",
        "updatedAt" : "2018-02-09T04:38:27Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f562e5bcf699d3e30c204107c8e843290ac797d0",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1361,1365 @@        # With partial mask\n        with suppress_warnings() as sup:\n            sup.filter(FutureWarning, \"Comparison to `None`\")\n            a = array([None, 1], mask=[0, 1])\n            assert_equal(a == None, array([True, False], mask=[0, 1]))"
  },
  {
    "id" : "14e25317-dfda-4840-bf90-4b9d071b62b1",
    "prId" : 8590,
    "prUrl" : "https://github.com/numpy/numpy/pull/8590#pullrequestreview-22861116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56b31047-9d31-4b7c-a89b-dcb10b128559",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Do we have any tests of equality against normal (non-masked) arrays?",
        "createdAt" : "2017-02-21T01:12:51Z",
        "updatedAt" : "2017-02-27T16:24:23Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "3435dd9881d84ba2b91faa478555a3c58e7921af",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +1425,1429 @@                assert_equal(ma1 != ma2, ne_expected)\n                el_by_el = [m1[name] != m2[name] for name in dt.names]\n                assert_equal(array(el_by_el, dtype=bool).any(), ne_expected)\n\n    def test_eq_with_None(self):"
  }
]