[
  {
    "id" : "220234d5-fd43-456a-a2df-35888f459d2b",
    "prId" : 3440,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9b46769-304c-4efb-a857-459b9e1affc6",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Probably don't need float for the sum over `w` either. I wonder what happens if `weights` is integer when `filled` is called with a float fill value.\n",
        "createdAt" : "2013-06-15T16:52:44Z",
        "updatedAt" : "2013-06-15T16:52:44Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ace8ee7b4b81af7600c53e093e104ef53d54482c",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +534,538 @@                    w = eval (\"w[\" + repr(tuple(r)) + \"] * ones(ash, float)\")\n                    n = add.reduce(a * w, axis)\n                    d = add.reduce(w, axis, dtype=float)\n                    del w, r\n                else:"
  },
  {
    "id" : "b532fbba-6254-4409-89b3-81f74760e38a",
    "prId" : 4463,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0bfa03b-6af8-446e-926e-6d8fd5f2ddcf",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Please clean that up a bit by putting `axis = N + axis` on the next line. I know it wasn't yours to begin with ;)\n",
        "createdAt" : "2014-03-09T23:59:28Z",
        "updatedAt" : "2014-04-02T02:05:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2ee7067f-6b47-431b-8265-5c4a0c7bda55",
        "parentId" : "c0bfa03b-6af8-446e-926e-6d8fd5f2ddcf",
        "authorId" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "body" : "I copied the entire body of this function from np.apply_over_axes.  I don't mind cleaning it up a bit, but I don't want to introduce spurious differences between the two functions.  Should I reformat np.apply_over_axes as well?\n",
        "createdAt" : "2014-03-10T00:35:40Z",
        "updatedAt" : "2014-04-02T02:05:02Z",
        "lastEditedBy" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "tags" : [
        ]
      },
      {
        "id" : "74358cbc-bf59-44ad-94af-bf150b9721f5",
        "parentId" : "c0bfa03b-6af8-446e-926e-6d8fd5f2ddcf",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Sure, make it a different commit though.The message prefix would be `STY:`.\n",
        "createdAt" : "2014-03-13T16:42:41Z",
        "updatedAt" : "2014-04-02T02:05:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "76c9bb336f77aa406c62ab5f3077517dec133d30",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +422,426 @@        axes = (axes,)\n    for axis in axes:\n        if axis < 0: axis = N + axis\n        args = (val, axis)\n        res = func(*args)"
  },
  {
    "id" : "2327003b-571e-4322-9c45-42cd5608c9ca",
    "prId" : 4463,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "beb48b21-e347-42c9-975e-825c5891e891",
        "parentId" : null,
        "authorId" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "body" : "This is another place that could use a clean-up.  I would simply write `func(val, axis)` in the line above.\n",
        "createdAt" : "2014-03-10T00:37:01Z",
        "updatedAt" : "2014-04-02T02:05:02Z",
        "lastEditedBy" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "tags" : [
        ]
      },
      {
        "id" : "731dcc87-2274-4982-90d6-7c1f9cf262d6",
        "parentId" : "beb48b21-e347-42c9-975e-825c5891e891",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What about the `mask=func(*(msk, axis))`? That is what concerned me. The original does something with the mask, the new version doesn't.\n",
        "createdAt" : "2014-03-10T19:16:05Z",
        "updatedAt" : "2014-04-02T02:05:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "be313213-5bdc-4128-8612-fe3ca9330943",
        "parentId" : "beb48b21-e347-42c9-975e-825c5891e891",
        "authorId" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "body" : "This made no sense to me.  And neither did `f(*(a, b))` instead of `f(a, b)`.  Looks like a bit of overengineering.\n\nma.apply_over_axes inherits docstring from np.apply_over_axes, so it should work the same way and delegate mask handling to `func`.  This is what the OP issue was about.\n",
        "createdAt" : "2014-03-10T19:25:45Z",
        "updatedAt" : "2014-04-02T02:05:02Z",
        "lastEditedBy" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "tags" : [
        ]
      },
      {
        "id" : "dd5325c6-b2c4-4753-b302-1f5617147724",
        "parentId" : "beb48b21-e347-42c9-975e-825c5891e891",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK. Agree about the `f(*(a, b))` function call. Can that be cleaned up without too much trouble? Also, even though the docstring is currently inherited, it might make sense to have one where you can mention that the mask handling is left to `func`.\n",
        "createdAt" : "2014-03-10T20:41:46Z",
        "updatedAt" : "2014-04-02T02:05:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "76c9bb336f77aa406c62ab5f3077517dec133d30",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +424,428 @@        if axis < 0: axis = N + axis\n        args = (val, axis)\n        res = func(*args)\n        if res.ndim == val.ndim:\n            val = res"
  },
  {
    "id" : "7bfb61ff-aea9-43af-851f-92fa6a3a6afe",
    "prId" : 4463,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1517f2ed-7b65-44c7-acef-0c6d0683c9b3",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "PEP8, but this will get fixed later when we pepify these files.\n",
        "createdAt" : "2014-03-24T16:27:22Z",
        "updatedAt" : "2014-04-02T02:05:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "5415c2d9-c6a0-42a9-8e99-992a36cc7e05",
        "parentId" : "1517f2ed-7b65-44c7-acef-0c6d0683c9b3",
        "authorId" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "body" : "This was copied from np.apply_over_axes.  I assume \"pepify\" will fix this in both places.\n",
        "createdAt" : "2014-03-24T17:05:38Z",
        "updatedAt" : "2014-04-02T02:05:02Z",
        "lastEditedBy" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "tags" : [
        ]
      },
      {
        "id" : "d02f221d-be9f-4787-afe0-2790d5eca7cd",
        "parentId" : "1517f2ed-7b65-44c7-acef-0c6d0683c9b3",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "In particular, the indent should be\n\n```\n                raise ValueError(\"function is not returning\"\n                                 \" an array of the correct shape\")\n\n```\n\nor\n\n```\n                raise ValueError(\n                    \"function is not returning an array of the correct shape\")\n```\n",
        "createdAt" : "2014-03-24T17:05:54Z",
        "updatedAt" : "2014-04-02T02:05:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "76c9bb336f77aa406c62ab5f3077517dec133d30",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +433,437 @@            else:\n                raise ValueError(\"function is not returning \"\n                        \"an array of the correct shape\")\n    return val\napply_over_axes.__doc__ = np.apply_over_axes.__doc__["
  },
  {
    "id" : "86caa236-4bde-4113-a355-6d53c5e305c6",
    "prId" : 4760,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "117528ec-a31c-408c-9d70-2cdf45813fb8",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So this has a mask when called from nanmedian, right?\n",
        "createdAt" : "2014-06-02T20:31:11Z",
        "updatedAt" : "2014-06-02T21:47:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6561c2f0-6c56-40a9-a71f-e547b5fc82d4",
        "parentId" : "117528ec-a31c-408c-9d70-2cdf45813fb8",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "yes but ma.median should also work on unmasked arrays, some existing testcases do test this.\n",
        "createdAt" : "2014-06-02T20:39:19Z",
        "updatedAt" : "2014-06-02T21:47:35Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "99ff7a7cad36fcb5ba239bccd87a4f01ad25a1c1",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +669,673 @@\n    \"\"\"\n    if not hasattr(a, 'mask') or np.count_nonzero(a.mask) == 0:\n        return masked_array(np.median(a, axis=axis, out=out,\n                                  overwrite_input=overwrite_input), copy=False)"
  },
  {
    "id" : "b54f9203-cf54-445b-aa56-7f6e4b5cb01a",
    "prId" : 4760,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c828d64-071d-49a2-9db3-49ae8a1d5675",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This is for the astropy guys?\n",
        "createdAt" : "2014-06-02T20:33:32Z",
        "updatedAt" : "2014-06-02T21:47:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "d7d9b1f2-f98c-4711-85e9-2918bcee8e44",
        "parentId" : "1c828d64-071d-49a2-9db3-49ae8a1d5675",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "If so, might add a comment.\n",
        "createdAt" : "2014-06-02T20:33:46Z",
        "updatedAt" : "2014-06-02T21:47:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c9f0ba53-ba27-46b1-a60a-24f65d7c6861",
        "parentId" : "1c828d64-071d-49a2-9db3-49ae8a1d5675",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "no the mean us used for even elements medians like in the normal median but in the case of masked median some entries may be odd some even, to get them into one output array I always select two elements and if the input was odd I make those pairs the same so the mean is essentially a no-op, you do have an additional small numerical error on the odd elements but I couldn't come up with a better way to do it.\n",
        "createdAt" : "2014-06-02T20:45:06Z",
        "updatedAt" : "2014-06-02T21:47:35Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "e5b5c5f8-13f4-4e4c-8f71-4f3b0a42552e",
        "parentId" : "1c828d64-071d-49a2-9db3-49ae8a1d5675",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Ah, makes sense.\n",
        "createdAt" : "2014-06-02T20:46:53Z",
        "updatedAt" : "2014-06-02T21:47:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "99ff7a7cad36fcb5ba239bccd87a4f01ad25a1c1",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +697,701 @@    ind[axis] = h\n    high = asorted[ind]\n    # duplicate high if odd number of elements so mean does nothing\n    odd = counts % 2 == 1\n    if asorted.ndim == 1:"
  },
  {
    "id" : "cb42462f-ca58-42bd-89e8-9b62effb9900",
    "prId" : 5703,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3df4bebc-557c-46d4-872b-66a1c2bbfc87",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "This test will never fail, because you have taken the modulo `x.ndim` of all the entries in `axis` right before. Typically, only axis such that `-x.ndim <= ax < x.ndim` are accepted, and negative axes are converted to positive by adding `x.ndim` to them. But an array of e.g. 3 dimensions should not accept an axis of -4 or +3...\n",
        "createdAt" : "2015-04-06T03:23:00Z",
        "updatedAt" : "2015-05-04T02:21:06Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "883d052e3eb9b45a4bb87e7e84f487e0c9e5c882",
    "line" : null,
    "diffHunk" : "@@ -1,1 +751,755 @@    # Check axis input\n    for ax in axis:\n        if not (0 <= ax < x.ndim):\n            raise ValueError('axis %d is out of range' % ax)\n    if not len(axis) == len(set(axis)):"
  },
  {
    "id" : "43233091-6570-4a19-8081-60382eab3552",
    "prId" : 5703,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb1e942c-f61e-4769-97c0-232a7b0808c2",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "dupli**c**ate, not dupliate\n",
        "createdAt" : "2015-04-06T03:23:34Z",
        "updatedAt" : "2015-05-04T02:21:06Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "883d052e3eb9b45a4bb87e7e84f487e0c9e5c882",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +754,758 @@            raise ValueError('axis %d is out of range' % ax)\n    if not len(axis) == len(set(axis)):\n        raise ValueError('axis cannot have dupliate entries')\n    # Nothing is masked: return x\n    if m is nomask or not m.any():"
  },
  {
    "id" : "1b04b07d-9d35-4b9b-b62a-90ca725a0541",
    "prId" : 7823,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebccee41-531b-4246-ab98-ecd6f5ba664c",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "the list should not be needed, you can create a tuple from a generator (though it doesn't really make a significant difference here)\n",
        "createdAt" : "2016-08-17T13:47:17Z",
        "updatedAt" : "2016-08-24T16:40:08Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "be0e8259-d04a-4c86-a4a1-7a64d8c984cc",
        "parentId" : "ebccee41-531b-4246-ab98-ecd6f5ba664c",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "This is a direct copy of old version line ~272. I thought there were some issues with using a generator expression in older versions of Python, so I kept it this way. Could be wrong though.\n",
        "createdAt" : "2016-08-17T15:27:46Z",
        "updatedAt" : "2016-08-24T16:40:08Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "12e8b8da-8ef3-4546-9beb-051c18f74334",
        "parentId" : "ebccee41-531b-4246-ab98-ecd6f5ba664c",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "we only support 2.6 (or even 2.7 now?) so that should not be an issue\nbut its also not necessary to change it, more of a keep in mind that you can do that comment :)\n",
        "createdAt" : "2016-08-17T15:38:16Z",
        "updatedAt" : "2016-08-24T16:40:08Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "54b68dda8b29e3745b6b0da5f1d6a2b53f29e291",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +296,300 @@        func = getattr(np, self.__name__)\n        _d = func(tuple([np.asarray(a) for a in x]), *args, **params)\n        _m = func(tuple([getmaskarray(a) for a in x]), *args, **params)\n        return masked_array(_d, mask=_m)\n"
  },
  {
    "id" : "223aa418-bf56-4ec5-86b2-b5eb7b5ad4b3",
    "prId" : 7823,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de847fed-d1f0-4b8f-a01f-4f9a1a713e92",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "this one is not actually used, is it for the other PR?\n",
        "createdAt" : "2016-08-17T13:47:43Z",
        "updatedAt" : "2016-08-24T16:40:08Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "5e410683-d7ab-4f95-801c-7daed66c5381",
        "parentId" : "de847fed-d1f0-4b8f-a01f-4f9a1a713e92",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "Apparently I do not. Would you like me to remove it?\n",
        "createdAt" : "2016-08-17T15:31:10Z",
        "updatedAt" : "2016-08-24T16:40:08Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "090ceed1-a09f-40b3-bce4-d6c98289c4eb",
        "parentId" : "de847fed-d1f0-4b8f-a01f-4f9a1a713e92",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "if its not needed please remove it, also update the reference to it in the comment of the following variant\n",
        "createdAt" : "2016-08-17T15:38:53Z",
        "updatedAt" : "2016-08-24T16:40:08Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "3a90cfc0-2cf5-444c-8d79-0a267851a762",
        "parentId" : "de847fed-d1f0-4b8f-a01f-4f9a1a713e92",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "Part of the reason I left this in is because I think it was provided in the original functionality. This is not by itself a reason to keep this variant, but I think that there are some numpy functions that follow this sort of prototype. If we decide to add them to `ma`, it will be worth having this around. This code is private, so not a huge maintenance burden. If you still think I should delete it, I will.\n",
        "createdAt" : "2016-08-17T17:23:32Z",
        "updatedAt" : "2016-08-24T16:40:08Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      }
    ],
    "commit" : "54b68dda8b29e3745b6b0da5f1d6a2b53f29e291",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +300,304 @@\n\nclass _fromnxfunction_args(_fromnxfunction):\n    \"\"\"\n    A version of `_fromnxfunction` that is called with multiple array"
  },
  {
    "id" : "5e931869-b431-49be-8619-d99bb0869ae4",
    "prId" : 7911,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8748a43e-b865-414b-9017-038d04e31d1f",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "why was the count_nonzero removed?\nits performance impact is practically zero but the gain on empty mask is huge\n",
        "createdAt" : "2016-08-17T14:56:47Z",
        "updatedAt" : "2016-08-17T14:56:47Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "b3bacc14-5e05-47f1-a25b-5c68f1ede336",
        "parentId" : "8748a43e-b865-414b-9017-038d04e31d1f",
        "authorId" : "1c1bcac1-5e80-4ef4-9afe-dea984d978ea",
        "body" : "I would like to have simplified the if-condition (that is, MaskedArray or others), and I just didn't know that `np.median` is much faster than `np.ma.extras._median`.\nSo, we should add `or np.count_nonzero(a.mask) == 0` here.\nShould I make pull request?\n",
        "createdAt" : "2016-08-20T07:13:26Z",
        "updatedAt" : "2016-08-21T12:44:43Z",
        "lastEditedBy" : "1c1bcac1-5e80-4ef4-9afe-dea984d978ea",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee42d25974471f5873ff05ad13519405a5a5b49d",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +627,631 @@\n    \"\"\"\n    if not hasattr(a, 'mask'):\n        m = np.median(getdata(a, subok=True), axis=axis,\n                      out=out, overwrite_input=overwrite_input,"
  }
]