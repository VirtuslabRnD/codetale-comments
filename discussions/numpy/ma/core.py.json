[
  {
    "id" : "25872534-53a8-4300-ac8a-d022da0f8448",
    "prId" : 4229,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bbe40f3-0462-4a17-a409-07faa94fdb49",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Please replace this by `np.sum(m, axis=axis, dtype=np.intp)` or equivalent...\n",
        "createdAt" : "2014-01-24T11:08:57Z",
        "updatedAt" : "2014-01-25T16:09:54Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cdf911c3308e55558ca191e91e703305ab46197",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3991,3995 @@                return np.ones(t) * n\n        n1 = np.size(m, axis)\n        n2 = m.astype(int).sum(axis)\n        if axis is None:\n            return (n1 - n2)"
  },
  {
    "id" : "ed1e44f5-de53-4c7b-93b7-5c1f510c5e70",
    "prId" : 4339,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4649003d-515a-48f5-9202-23c34dc99d11",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "this needs a docstring, see other numpy functions for the formatting\n",
        "createdAt" : "2014-02-21T17:49:01Z",
        "updatedAt" : "2014-03-11T19:39:05Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "5c0ebc49-8c5a-4f5d-8b11-b37828542cff",
        "parentId" : "4649003d-515a-48f5-9202-23c34dc99d11",
        "authorId" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "body" : "Done in b134494.\n",
        "createdAt" : "2014-02-22T04:44:18Z",
        "updatedAt" : "2014-03-11T19:39:05Z",
        "lastEditedBy" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "tags" : [
        ]
      },
      {
        "id" : "dc6664ec-e391-4ded-b86b-07534ba8223b",
        "parentId" : "4649003d-515a-48f5-9202-23c34dc99d11",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "still needs \n\n```\n.. versionadded:: 1.9.0\n```\n\non  line of its own above Parameters, see e.g. np.partition\n",
        "createdAt" : "2014-02-22T10:31:51Z",
        "updatedAt" : "2014-03-11T19:39:05Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f8c7a711fb8b86b0f2a81c802efab3984ff61bc",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +7259,7263 @@\n###############################################################################\ndef append(a, b, axis=None):\n    \"\"\"Append values to the end of an array.\n"
  },
  {
    "id" : "336bb669-bc28-412b-b648-5d18b25a7f7d",
    "prId" : 4437,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d80e089-20c1-497d-8a1e-d885671899d3",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like raising an error would actually be more appropriate than using the default fill value here. Just a note, not part of this PR.\n",
        "createdAt" : "2014-03-05T19:40:09Z",
        "updatedAt" : "2014-03-05T19:40:22Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "787fbff92bef3940dc8e10ca657cc983f8cdbbb9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +418,422 @@    else:\n        if isinstance(fill_value, basestring) and (ndtype.char not in 'OSVU'):\n            fill_value = default_fill_value(ndtype)\n        else:\n            # In case we want to convert 1e+20 to int..."
  },
  {
    "id" : "38e6c1b7-05ed-4da2-ac34-8d34602766e9",
    "prId" : 4585,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58b3e5f0-a1c4-47be-946d-a18c8a455c7d",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "`masked` is masked scalar, right? Why is that the right thing here?\n",
        "createdAt" : "2014-04-04T22:37:02Z",
        "updatedAt" : "2014-04-11T00:56:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e27bb6d0-41e7-4c92-baaf-c4b55b6a0d45",
        "parentId" : "58b3e5f0-a1c4-47be-946d-a18c8a455c7d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Or perhaps a better question is, does `isinstance(_mask, ndarray)` catch all the alternatives.\n",
        "createdAt" : "2014-04-04T22:39:22Z",
        "updatedAt" : "2014-04-11T00:56:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "34790dea-e593-46dd-8b50-33a61dda1a7d",
        "parentId" : "58b3e5f0-a1c4-47be-946d-a18c8a455c7d",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I just tried `ma.flat.maskiter[1]`, `[:1]`, and `.next()` and it would seem `isinstance(_mask, ndarray)` catches all the alternatives. Of course, I could also put it in a try/except, or turn the if statement around, `if isinstance(_mask, np.bool_)`; perhaps the latter is clearest?\n",
        "createdAt" : "2014-04-05T01:08:30Z",
        "updatedAt" : "2014-04-11T00:56:59Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "648e1074-c16b-4dcf-b2fe-f5dc2d8d978b",
        "parentId" : "58b3e5f0-a1c4-47be-946d-a18c8a455c7d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The latter might be better, it's sort of six of one, half dozen of the other. The underlying type of `masked` is `float64`, does that change the previous output type?\n",
        "createdAt" : "2014-04-05T01:17:49Z",
        "updatedAt" : "2014-04-11T00:56:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "37bf09bf-eddb-4aca-a8f8-e49639a458bf",
        "parentId" : "58b3e5f0-a1c4-47be-946d-a18c8a455c7d",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I think the advantage of testing for `np.bool_` is mostly that it is clearer why one has to do something special. As for previous output type, there was none -- one would get an exception! Of course, not so odd this wasn't caught, as most people would use `flat` only for the iterator. \n",
        "createdAt" : "2014-04-05T01:23:02Z",
        "updatedAt" : "2014-04-11T00:56:59Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "5cdd830b-de55-4c2c-bad6-ff214998d57f",
        "parentId" : "58b3e5f0-a1c4-47be-946d-a18c8a455c7d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I confess I don't really understand what is going on here, particularly this bit `_mask.shape = result.shape`. Is this some sort of broadcasting? What is the relation of the two iterators? I could study the code, but the easier route is to ask you ;) Maybe a comment would be helpful.\n",
        "createdAt" : "2014-04-05T02:15:37Z",
        "updatedAt" : "2014-04-11T00:56:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e89399e4-2958-4639-a6e8-f3393e843813",
        "parentId" : "58b3e5f0-a1c4-47be-946d-a18c8a455c7d",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I do not really understand either how the two iterators could return something with a different shape, but worry there is a good reason, but one not necessarily covered by the relatively sparse tests. I checked who last changed the lines with `git blame` and it seems to be @pierregm - Pierre: this is about `MaskedIterator.__getitem__`; could you comment?\n",
        "createdAt" : "2014-04-05T13:14:22Z",
        "updatedAt" : "2014-04-11T00:56:59Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7eef2de430edd3ee066da6194e6a38d58f9eec2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2539,2543 @@                return mvoid(result, mask=_mask, hardmask=self.ma._hardmask)\n            elif _mask:  # Just a scalar, masked\n                return masked\n        return result\n"
  },
  {
    "id" : "6758f3c2-0eda-497c-b7fa-06b10f5bb799",
    "prId" : 4586,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78ee5511-4950-4b32-babd-f700d371b962",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'm thinking this should be\n\n```\ndout = self.view(type=ndarray)[indx]\n```\n\nbecause it is possible that the `_baseclass` overrides the indexing.\n",
        "createdAt" : "2014-04-21T03:47:36Z",
        "updatedAt" : "2015-04-22T23:09:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6dcac870-0f10-47c1-a0d8-5311c337f9d7",
        "parentId" : "78ee5511-4950-4b32-babd-f700d371b962",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I see you logic (especially after the troubles with masked matrices for `.flat`...; indeed, cc @seberg) but one of the main points of this PR is actually that, to allow the baseclass to have its say in getting and setting. For astropy's `Quantity`, getting a proper slice would work fine, since that gets turned back into a `MaskedArray` and is updated (which is important as it copies the `Quantity`'s unit). But if one gets a single item, ndarray's `__getitem__` leaves one with an `np.float64` object, which, if not masked, will be returned as is, i.e., one has lost the unit (or, more generally, removed the baseclass aspect of the item).\n\nIndeed, the above is why we have a `Quantity.__getitem__` : we return a single item as a a̶r̶r̶a̶y̶ ̶s̶c̶a̶l̶a̶r̶ 0-dimensional array instead (and have an internal property that remembers that this is a scalar).\n",
        "createdAt" : "2014-04-21T15:12:31Z",
        "updatedAt" : "2015-04-22T23:09:54Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "495eeae4-d397-44c5-a767-6a64c1457f0b",
        "parentId" : "78ee5511-4950-4b32-babd-f700d371b962",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Not sure what to think of this, except that it seems like this \"masked matrix\" stuff was always broken with indexing... It likely makes sense to actually change this, the finalization stage should attempt to fix the mask shape (needs test with matrix). But shape fixing in the data array and not having the same thing in the mask array, still seems like asking for trouble to me in any case (i.e. the whole reason why the .flat was needed)\n",
        "createdAt" : "2014-04-21T16:00:56Z",
        "updatedAt" : "2015-04-22T23:09:54Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "dc087f9b-0034-402c-9794-b9e9506a2b9d",
        "parentId" : "78ee5511-4950-4b32-babd-f700d371b962",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "It does seem to make sense to allow the `_baseclass` to override the indexing. I did check scipy with your changes and didn't see anything the looked related to this. Hmm... could you add a note here and we'll give this a try.\n\nLooks like the code in `MaskedArray` could use a cleanup, if only for clarity.\n\nCurious that `_data` and `data` are the same thing, likewise `_mask` and `mask`. I wonder why that was done? Backward compatibility? Intent to deprecate one?\n",
        "createdAt" : "2014-04-21T16:12:22Z",
        "updatedAt" : "2015-04-22T23:09:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "f3ad9d68-8cc1-4d53-bebe-e75718e0a708",
        "parentId" : "78ee5511-4950-4b32-babd-f700d371b962",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Masked array could probably use a rewrite using `__numpy_ufunc__` anyway when it is time...\n\nIsn't `data` a property and `_data` the real array? Though I think you are probably right and it is identical. If it doesn't, it would be better if `.data` would return a view on `_data` and not the object itself.\n\nAbout the matrix stuff/subclasses that change the shape... This makes enough trouble in numpy, getting it to work right in ma is probably hell and buggy at best at this time (just my guess on things, I never even used masked arrays ^^). For what I care, I would be fine with deprecating all that `.flat` usage. Do we really need to support subclasses that mess with the shape inside masked arrays?\n",
        "createdAt" : "2014-04-21T16:28:02Z",
        "updatedAt" : "2015-04-22T23:09:54Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "fbab405d-7472-4985-adfc-289ef6ef2e75",
        "parentId" : "78ee5511-4950-4b32-babd-f700d371b962",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "@charris - It is indeed odd that `_data` and `data` are the same thing. For `_mask` and `mask` it looks more like the usual private property shielded by a getter and setter.\n@seberg - definitely would be great to move to `__numpy_ufunc__`... but it does need someone to sit down and be careful...\n",
        "createdAt" : "2014-04-21T16:46:11Z",
        "updatedAt" : "2015-04-22T23:09:54Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "6f8277b7-8d1a-4776-8e6d-09d9e4b0f5fb",
        "parentId" : "78ee5511-4950-4b32-babd-f700d371b962",
        "authorId" : "383426bf-4bac-4f20-8fee-a85df487b07f",
        "body" : "Y'all, sorry for not being able to be more responsive on all these problems. The `_data` is indeed the private property accessing the underlying `ndarray` (just like `_mask` stores the boolean `ndarray` corresponding to, you guessed it). Neither `_data` or `_mask` are supposed to be accessible to the lay person, hence the `data` and `mask` properties. Well, hence the `mask`: the `data` was introduced to give a quick access to the `ndarray` in cases where you'd want to drop the `MaskedArray` part for a while, perform faster computations and pull the mask back at the end. \nIn the problem at hand, the objective is to get the underlying data in its 'least-adulterated' form: @charris is right, it should be `dout=self.view(...)[indx]. \n",
        "createdAt" : "2014-04-21T17:05:18Z",
        "updatedAt" : "2015-04-22T23:09:54Z",
        "lastEditedBy" : "383426bf-4bac-4f20-8fee-a85df487b07f",
        "tags" : [
        ]
      },
      {
        "id" : "cadd49db-4889-4a3d-a1bc-78459361f1e1",
        "parentId" : "78ee5511-4950-4b32-babd-f700d371b962",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "@pierregm - the problem with doing `dout=self.view(np.ndarray)[indx]` is that, as mentioned above, this _presumes_ that a single item from a subclass can be represented as a `np.float64` scalar. This, however, is false at least for astropy's `Quantity`, where one does need to keep the unit.\nNote that the problem is worse for `__setitem__`: the baseclass may not allow one to set parts to just anything, it may need to check that, e.g., the data put in has the same class (or, for `Quantity`, that the units are consistent, and convert if necessary).\n",
        "createdAt" : "2014-04-21T17:15:44Z",
        "updatedAt" : "2015-04-22T23:09:54Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a84c5660539bb210746ba6b9b8e38d82d9fd330",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +3044,3048 @@#            msg = \"Masked arrays must be filled before they can be used as indices!\"\n#            raise IndexError(msg)\n        dout = self.data[indx]\n        # We could directly use ndarray.__getitem__ on self...\n        # But then we would have to modify __array_finalize__ to prevent the"
  },
  {
    "id" : "a3b72425-e980-444c-bbb0-a7a7678354d3",
    "prId" : 4822,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02de8536-3e09-45c7-8c99-e6fb69a368ac",
        "parentId" : null,
        "authorId" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "body" : "Sorry for not catching it before this was pulled, but `nomask` is defined in this module, so `np.ma.` round-trip is redundant: the line above should be just\n\n```\nif m is not nomask:\n```\n",
        "createdAt" : "2014-06-30T02:02:33Z",
        "updatedAt" : "2014-06-30T02:02:33Z",
        "lastEditedBy" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "tags" : [
        ]
      },
      {
        "id" : "90917adc-8d6d-48cc-bcfd-713399587362",
        "parentId" : "02de8536-3e09-45c7-8c99-e6fb69a368ac",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Submit a PR and I'll put it in.\n",
        "createdAt" : "2014-06-30T02:47:12Z",
        "updatedAt" : "2014-06-30T02:47:12Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4cdc9cef-6d2e-4be6-b9ca-d50ca2949443",
        "parentId" : "02de8536-3e09-45c7-8c99-e6fb69a368ac",
        "authorId" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "body" : "See gh-4832.\n",
        "createdAt" : "2014-06-30T12:54:40Z",
        "updatedAt" : "2014-06-30T12:55:26Z",
        "lastEditedBy" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "tags" : [
        ]
      }
    ],
    "commit" : "305b26bfc96cdd7c3f5be4f5bba011186e061910",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +944,948 @@        # Case 2. : array\n        # Revert result to da where masked\n        if m is not np.ma.nomask:\n            np.copyto(result, da, casting='unsafe', where=m)\n        # Transforms to a (subclass of) MaskedArray"
  }
]