[
  {
    "id" : "25872534-53a8-4300-ac8a-d022da0f8448",
    "prId" : 4229,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3bbe40f3-0462-4a17-a409-07faa94fdb49",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Please replace this by `np.sum(m, axis=axis, dtype=np.intp)` or equivalent...\n",
        "createdAt" : "2014-01-24T11:08:57Z",
        "updatedAt" : "2014-01-25T16:09:54Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cdf911c3308e55558ca191e91e703305ab46197",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3991,3995 @@                return np.ones(t) * n\n        n1 = np.size(m, axis)\n        n2 = m.astype(int).sum(axis)\n        if axis is None:\n            return (n1 - n2)"
  },
  {
    "id" : "ed1e44f5-de53-4c7b-93b7-5c1f510c5e70",
    "prId" : 4339,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4649003d-515a-48f5-9202-23c34dc99d11",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "this needs a docstring, see other numpy functions for the formatting\n",
        "createdAt" : "2014-02-21T17:49:01Z",
        "updatedAt" : "2014-03-11T19:39:05Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "5c0ebc49-8c5a-4f5d-8b11-b37828542cff",
        "parentId" : "4649003d-515a-48f5-9202-23c34dc99d11",
        "authorId" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "body" : "Done in b134494.\n",
        "createdAt" : "2014-02-22T04:44:18Z",
        "updatedAt" : "2014-03-11T19:39:05Z",
        "lastEditedBy" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "tags" : [
        ]
      },
      {
        "id" : "dc6664ec-e391-4ded-b86b-07534ba8223b",
        "parentId" : "4649003d-515a-48f5-9202-23c34dc99d11",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "still needs \n\n```\n.. versionadded:: 1.9.0\n```\n\non  line of its own above Parameters, see e.g. np.partition\n",
        "createdAt" : "2014-02-22T10:31:51Z",
        "updatedAt" : "2014-03-11T19:39:05Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f8c7a711fb8b86b0f2a81c802efab3984ff61bc",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +7259,7263 @@\n###############################################################################\ndef append(a, b, axis=None):\n    \"\"\"Append values to the end of an array.\n"
  },
  {
    "id" : "336bb669-bc28-412b-b648-5d18b25a7f7d",
    "prId" : 4437,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d80e089-20c1-497d-8a1e-d885671899d3",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like raising an error would actually be more appropriate than using the default fill value here. Just a note, not part of this PR.\n",
        "createdAt" : "2014-03-05T19:40:09Z",
        "updatedAt" : "2014-03-05T19:40:22Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "787fbff92bef3940dc8e10ca657cc983f8cdbbb9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +418,422 @@    else:\n        if isinstance(fill_value, basestring) and (ndtype.char not in 'OSVU'):\n            fill_value = default_fill_value(ndtype)\n        else:\n            # In case we want to convert 1e+20 to int..."
  },
  {
    "id" : "38e6c1b7-05ed-4da2-ac34-8d34602766e9",
    "prId" : 4585,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58b3e5f0-a1c4-47be-946d-a18c8a455c7d",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "`masked` is masked scalar, right? Why is that the right thing here?\n",
        "createdAt" : "2014-04-04T22:37:02Z",
        "updatedAt" : "2014-04-11T00:56:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e27bb6d0-41e7-4c92-baaf-c4b55b6a0d45",
        "parentId" : "58b3e5f0-a1c4-47be-946d-a18c8a455c7d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Or perhaps a better question is, does `isinstance(_mask, ndarray)` catch all the alternatives.\n",
        "createdAt" : "2014-04-04T22:39:22Z",
        "updatedAt" : "2014-04-11T00:56:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "34790dea-e593-46dd-8b50-33a61dda1a7d",
        "parentId" : "58b3e5f0-a1c4-47be-946d-a18c8a455c7d",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I just tried `ma.flat.maskiter[1]`, `[:1]`, and `.next()` and it would seem `isinstance(_mask, ndarray)` catches all the alternatives. Of course, I could also put it in a try/except, or turn the if statement around, `if isinstance(_mask, np.bool_)`; perhaps the latter is clearest?\n",
        "createdAt" : "2014-04-05T01:08:30Z",
        "updatedAt" : "2014-04-11T00:56:59Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "648e1074-c16b-4dcf-b2fe-f5dc2d8d978b",
        "parentId" : "58b3e5f0-a1c4-47be-946d-a18c8a455c7d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The latter might be better, it's sort of six of one, half dozen of the other. The underlying type of `masked` is `float64`, does that change the previous output type?\n",
        "createdAt" : "2014-04-05T01:17:49Z",
        "updatedAt" : "2014-04-11T00:56:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "37bf09bf-eddb-4aca-a8f8-e49639a458bf",
        "parentId" : "58b3e5f0-a1c4-47be-946d-a18c8a455c7d",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I think the advantage of testing for `np.bool_` is mostly that it is clearer why one has to do something special. As for previous output type, there was none -- one would get an exception! Of course, not so odd this wasn't caught, as most people would use `flat` only for the iterator. \n",
        "createdAt" : "2014-04-05T01:23:02Z",
        "updatedAt" : "2014-04-11T00:56:59Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "5cdd830b-de55-4c2c-bad6-ff214998d57f",
        "parentId" : "58b3e5f0-a1c4-47be-946d-a18c8a455c7d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I confess I don't really understand what is going on here, particularly this bit `_mask.shape = result.shape`. Is this some sort of broadcasting? What is the relation of the two iterators? I could study the code, but the easier route is to ask you ;) Maybe a comment would be helpful.\n",
        "createdAt" : "2014-04-05T02:15:37Z",
        "updatedAt" : "2014-04-11T00:56:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e89399e4-2958-4639-a6e8-f3393e843813",
        "parentId" : "58b3e5f0-a1c4-47be-946d-a18c8a455c7d",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I do not really understand either how the two iterators could return something with a different shape, but worry there is a good reason, but one not necessarily covered by the relatively sparse tests. I checked who last changed the lines with `git blame` and it seems to be @pierregm - Pierre: this is about `MaskedIterator.__getitem__`; could you comment?\n",
        "createdAt" : "2014-04-05T13:14:22Z",
        "updatedAt" : "2014-04-11T00:56:59Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7eef2de430edd3ee066da6194e6a38d58f9eec2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2539,2543 @@                return mvoid(result, mask=_mask, hardmask=self.ma._hardmask)\n            elif _mask:  # Just a scalar, masked\n                return masked\n        return result\n"
  },
  {
    "id" : "6758f3c2-0eda-497c-b7fa-06b10f5bb799",
    "prId" : 4586,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78ee5511-4950-4b32-babd-f700d371b962",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'm thinking this should be\n\n```\ndout = self.view(type=ndarray)[indx]\n```\n\nbecause it is possible that the `_baseclass` overrides the indexing.\n",
        "createdAt" : "2014-04-21T03:47:36Z",
        "updatedAt" : "2015-04-22T23:09:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6dcac870-0f10-47c1-a0d8-5311c337f9d7",
        "parentId" : "78ee5511-4950-4b32-babd-f700d371b962",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I see you logic (especially after the troubles with masked matrices for `.flat`...; indeed, cc @seberg) but one of the main points of this PR is actually that, to allow the baseclass to have its say in getting and setting. For astropy's `Quantity`, getting a proper slice would work fine, since that gets turned back into a `MaskedArray` and is updated (which is important as it copies the `Quantity`'s unit). But if one gets a single item, ndarray's `__getitem__` leaves one with an `np.float64` object, which, if not masked, will be returned as is, i.e., one has lost the unit (or, more generally, removed the baseclass aspect of the item).\n\nIndeed, the above is why we have a `Quantity.__getitem__` : we return a single item as a a̶r̶r̶a̶y̶ ̶s̶c̶a̶l̶a̶r̶ 0-dimensional array instead (and have an internal property that remembers that this is a scalar).\n",
        "createdAt" : "2014-04-21T15:12:31Z",
        "updatedAt" : "2015-04-22T23:09:54Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "495eeae4-d397-44c5-a767-6a64c1457f0b",
        "parentId" : "78ee5511-4950-4b32-babd-f700d371b962",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Not sure what to think of this, except that it seems like this \"masked matrix\" stuff was always broken with indexing... It likely makes sense to actually change this, the finalization stage should attempt to fix the mask shape (needs test with matrix). But shape fixing in the data array and not having the same thing in the mask array, still seems like asking for trouble to me in any case (i.e. the whole reason why the .flat was needed)\n",
        "createdAt" : "2014-04-21T16:00:56Z",
        "updatedAt" : "2015-04-22T23:09:54Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "dc087f9b-0034-402c-9794-b9e9506a2b9d",
        "parentId" : "78ee5511-4950-4b32-babd-f700d371b962",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "It does seem to make sense to allow the `_baseclass` to override the indexing. I did check scipy with your changes and didn't see anything the looked related to this. Hmm... could you add a note here and we'll give this a try.\n\nLooks like the code in `MaskedArray` could use a cleanup, if only for clarity.\n\nCurious that `_data` and `data` are the same thing, likewise `_mask` and `mask`. I wonder why that was done? Backward compatibility? Intent to deprecate one?\n",
        "createdAt" : "2014-04-21T16:12:22Z",
        "updatedAt" : "2015-04-22T23:09:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "f3ad9d68-8cc1-4d53-bebe-e75718e0a708",
        "parentId" : "78ee5511-4950-4b32-babd-f700d371b962",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Masked array could probably use a rewrite using `__numpy_ufunc__` anyway when it is time...\n\nIsn't `data` a property and `_data` the real array? Though I think you are probably right and it is identical. If it doesn't, it would be better if `.data` would return a view on `_data` and not the object itself.\n\nAbout the matrix stuff/subclasses that change the shape... This makes enough trouble in numpy, getting it to work right in ma is probably hell and buggy at best at this time (just my guess on things, I never even used masked arrays ^^). For what I care, I would be fine with deprecating all that `.flat` usage. Do we really need to support subclasses that mess with the shape inside masked arrays?\n",
        "createdAt" : "2014-04-21T16:28:02Z",
        "updatedAt" : "2015-04-22T23:09:54Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "fbab405d-7472-4985-adfc-289ef6ef2e75",
        "parentId" : "78ee5511-4950-4b32-babd-f700d371b962",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "@charris - It is indeed odd that `_data` and `data` are the same thing. For `_mask` and `mask` it looks more like the usual private property shielded by a getter and setter.\n@seberg - definitely would be great to move to `__numpy_ufunc__`... but it does need someone to sit down and be careful...\n",
        "createdAt" : "2014-04-21T16:46:11Z",
        "updatedAt" : "2015-04-22T23:09:54Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "6f8277b7-8d1a-4776-8e6d-09d9e4b0f5fb",
        "parentId" : "78ee5511-4950-4b32-babd-f700d371b962",
        "authorId" : "383426bf-4bac-4f20-8fee-a85df487b07f",
        "body" : "Y'all, sorry for not being able to be more responsive on all these problems. The `_data` is indeed the private property accessing the underlying `ndarray` (just like `_mask` stores the boolean `ndarray` corresponding to, you guessed it). Neither `_data` or `_mask` are supposed to be accessible to the lay person, hence the `data` and `mask` properties. Well, hence the `mask`: the `data` was introduced to give a quick access to the `ndarray` in cases where you'd want to drop the `MaskedArray` part for a while, perform faster computations and pull the mask back at the end. \nIn the problem at hand, the objective is to get the underlying data in its 'least-adulterated' form: @charris is right, it should be `dout=self.view(...)[indx]. \n",
        "createdAt" : "2014-04-21T17:05:18Z",
        "updatedAt" : "2015-04-22T23:09:54Z",
        "lastEditedBy" : "383426bf-4bac-4f20-8fee-a85df487b07f",
        "tags" : [
        ]
      },
      {
        "id" : "cadd49db-4889-4a3d-a1bc-78459361f1e1",
        "parentId" : "78ee5511-4950-4b32-babd-f700d371b962",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "@pierregm - the problem with doing `dout=self.view(np.ndarray)[indx]` is that, as mentioned above, this _presumes_ that a single item from a subclass can be represented as a `np.float64` scalar. This, however, is false at least for astropy's `Quantity`, where one does need to keep the unit.\nNote that the problem is worse for `__setitem__`: the baseclass may not allow one to set parts to just anything, it may need to check that, e.g., the data put in has the same class (or, for `Quantity`, that the units are consistent, and convert if necessary).\n",
        "createdAt" : "2014-04-21T17:15:44Z",
        "updatedAt" : "2015-04-22T23:09:54Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a84c5660539bb210746ba6b9b8e38d82d9fd330",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +3044,3048 @@#            msg = \"Masked arrays must be filled before they can be used as indices!\"\n#            raise IndexError(msg)\n        dout = self.data[indx]\n        # We could directly use ndarray.__getitem__ on self...\n        # But then we would have to modify __array_finalize__ to prevent the"
  },
  {
    "id" : "a3b72425-e980-444c-bbb0-a7a7678354d3",
    "prId" : 4822,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02de8536-3e09-45c7-8c99-e6fb69a368ac",
        "parentId" : null,
        "authorId" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "body" : "Sorry for not catching it before this was pulled, but `nomask` is defined in this module, so `np.ma.` round-trip is redundant: the line above should be just\n\n```\nif m is not nomask:\n```\n",
        "createdAt" : "2014-06-30T02:02:33Z",
        "updatedAt" : "2014-06-30T02:02:33Z",
        "lastEditedBy" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "tags" : [
        ]
      },
      {
        "id" : "90917adc-8d6d-48cc-bcfd-713399587362",
        "parentId" : "02de8536-3e09-45c7-8c99-e6fb69a368ac",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Submit a PR and I'll put it in.\n",
        "createdAt" : "2014-06-30T02:47:12Z",
        "updatedAt" : "2014-06-30T02:47:12Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4cdc9cef-6d2e-4be6-b9ca-d50ca2949443",
        "parentId" : "02de8536-3e09-45c7-8c99-e6fb69a368ac",
        "authorId" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "body" : "See gh-4832.\n",
        "createdAt" : "2014-06-30T12:54:40Z",
        "updatedAt" : "2014-06-30T12:55:26Z",
        "lastEditedBy" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "tags" : [
        ]
      }
    ],
    "commit" : "305b26bfc96cdd7c3f5be4f5bba011186e061910",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +944,948 @@        # Case 2. : array\n        # Revert result to da where masked\n        if m is not np.ma.nomask:\n            np.copyto(result, da, casting='unsafe', where=m)\n        # Transforms to a (subclass of) MaskedArray"
  },
  {
    "id" : "fd90e2e7-4b5c-4549-a20f-d2615a1847b7",
    "prId" : 5182,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea8dec6f-3edb-4b91-a2a0-709f7fb52294",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This won't work with complex, might want `np.inexact` here.\n",
        "createdAt" : "2014-10-16T16:05:47Z",
        "updatedAt" : "2014-10-16T16:05:47Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "eaebb8ab-8103-412c-a159-c38fbc8013b2",
        "parentId" : "ea8dec6f-3edb-4b91-a2a0-709f7fb52294",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "complex does not seem supported by masked arrays sorting\n",
        "createdAt" : "2014-10-16T17:21:38Z",
        "updatedAt" : "2014-10-16T17:21:38Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "483dabc3-f0fd-46ca-9f66-0c628a9613a5",
        "parentId" : "ea8dec6f-3edb-4b91-a2a0-709f7fb52294",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK. Probably should at some point...\n",
        "createdAt" : "2014-10-16T17:28:42Z",
        "updatedAt" : "2014-10-16T17:28:42Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "5f13b024-3549-4629-9311-aa6c648358d2",
        "parentId" : "ea8dec6f-3edb-4b91-a2a0-709f7fb52294",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "we should probably skip the fastpath for complex from nanmedian or fix ma, hm\n",
        "createdAt" : "2014-10-16T17:29:42Z",
        "updatedAt" : "2014-10-16T17:29:42Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f1e27610453f901e81cd892b2aa3b3a2ac30819",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +5079,5083 @@                if endwith:\n                    # nan > inf\n                    if np.issubdtype(self.dtype, np.floating):\n                        filler = np.nan\n                    else:"
  },
  {
    "id" : "8f1e6c38-67ed-4e05-aa4c-04b73538c2f4",
    "prId" : 5203,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0cd5b45-0916-4593-84c8-edb93f91bb2d",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could use a comment to explain the check here.\n",
        "createdAt" : "2014-10-19T17:20:03Z",
        "updatedAt" : "2014-10-21T01:48:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3205c89ad3090c26fef8fd060117ee468c1b6c97",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2832,2836 @@            # the mask, so that future modifications to 'self' do not end up\n            # side-effecting 'obj' as well.\n            if (obj.__array_interface__[\"data\"][0]\n                    != self.__array_interface__[\"data\"][0]):\n                _mask = _mask.copy()"
  },
  {
    "id" : "50df3c1f-efde-4e70-95b1-7289d925eb87",
    "prId" : 5563,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "335baaca-6143-42ef-892f-a49e85706db0",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Some other things to try. First, I think you can do\n\n```\nself._data += ...\n```\n\nAnother posibility is to use the `np.add` ufunc with the `out` argument, which allows you to set `casting='unsafe'`. The difference of doing this directly as opposed to ndarray.**iadd**, is that the ndarray functions can be set dynamically after loading the module. However, we set them to ufuncs on umath load, and I don't know of anyone else who uses that feature.\n",
        "createdAt" : "2015-02-15T04:47:21Z",
        "updatedAt" : "2015-02-19T01:16:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "f0439fa0-edfe-43f9-86db-f8e582448240",
        "parentId" : "335baaca-6143-42ef-892f-a49e85706db0",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "As it was already using `ndarray.__iadd__` (or equivalent), I thought I would leave it as I figured there had to be a good reason it was here at all. This seems to be true of a number of other methods in `MaskedArray`. Should we really be changing this?\n",
        "createdAt" : "2015-02-17T23:50:18Z",
        "updatedAt" : "2015-02-19T01:16:40Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      },
      {
        "id" : "7b378490-4302-4172-9081-f26c97a28db8",
        "parentId" : "335baaca-6143-42ef-892f-a49e85706db0",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Maybe not, but I do think the `self._data +=` form should do the same and be easier to read. Masked array is old, unmaintained, and has some subtleties that are easy to get wrong, but I don't think this is one of them. But maybe I'm missing something... \n",
        "createdAt" : "2015-02-18T00:18:12Z",
        "updatedAt" : "2015-02-19T01:16:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a0f97db5-dfc8-483a-8f70-7c7c0ed39801",
        "parentId" : "335baaca-6143-42ef-892f-a49e85706db0",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yeah, it doesn't work.\n\n```\nIn [12]: a = ma.masked_array(matrix(eye(3)))\n\nIn [13]: a._data += 1\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n<ipython-input-13-e93b03f9a4cb> in <module>()\n----> 1 a._data += 1\n\nAttributeError: can't set attribute\n```\n\nApparently the `_data` attribute is not separately useable.\n",
        "createdAt" : "2015-02-18T00:24:15Z",
        "updatedAt" : "2015-02-19T01:16:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "52103a20-37fa-4de0-96ab-cba1cdb6f188",
        "parentId" : "335baaca-6143-42ef-892f-a49e85706db0",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "That's right. I forgot about this, `_data` is defined as readonly [numpy/ma/core.py#L3365](https://github.com/numpy/numpy/blob/4bfcf4801ceedd0563e3648154fc49985729c442/numpy/ma/core.py#L3365). For some reason, I only thought this was true of `data` not `_data`, as well. It still seems a bit weird. Maybe, it is determining that `__iadd__` doesn't exist for the property and goes with `__add__` followed by assignment, which fails as there is no `fset` specified.\n",
        "createdAt" : "2015-02-18T01:10:59Z",
        "updatedAt" : "2015-02-19T01:16:40Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      },
      {
        "id" : "6eed3f5f-bf91-4763-b17b-c3f32360a1a1",
        "parentId" : "335baaca-6143-42ef-892f-a49e85706db0",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "Another way we might be able to get around the ugliness of those expressions, is to do something like `self._data[~self._mask] += ...`. I have not checked the performance, but that sort of expression does seem to work without raising an `AttributeError`.\n",
        "createdAt" : "2015-02-18T04:42:58Z",
        "updatedAt" : "2015-02-19T01:16:40Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      },
      {
        "id" : "242be1ea-4b0a-49a8-827d-454b24c624a3",
        "parentId" : "335baaca-6143-42ef-892f-a49e85706db0",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "For that matter, `self._data[Ellipsis] += ...` works, as well. Of course, we can replace `Ellipsis` with `...`, I didn't do so here to avoid unnecessary confusion. However, I would want to avoid this to remain consistent with the following constraint. \"As much as possible, invalid entries of a masked array are not processed, meaning that the corresponding data entries should be the same before and after the operation.\" ( http://docs.scipy.org/doc/numpy/reference/maskedarray.generic.html#operations-on-masked-arrays )\n",
        "createdAt" : "2015-02-18T05:01:32Z",
        "updatedAt" : "2015-02-19T01:16:40Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "8af02f701cb94cbfad3b7972d6d106a66fee4f62",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3803,3807 @@            if m is not nomask:\n                self._mask += m\n        ndarray.__iadd__(\n            self._data,\n            np.where(self._mask, self.dtype.type(0), getdata(other))"
  },
  {
    "id" : "441c8f79-8ac8-4f8d-b146-41400b752b9e",
    "prId" : 5706,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d94397f5-6616-410e-87ad-dc2df36290fc",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I honestly hope this is good, it would make life so much easier ;). But at assuming it at least within MA, seems like a reasonable choice to me and I am for giving it a shot.\n",
        "createdAt" : "2016-04-02T14:05:44Z",
        "updatedAt" : "2016-04-04T17:20:25Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "798dd4f22af98facd5113cbbf1b62fd27ad420e3",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +4303,4307 @@        m = self._mask\n        # special case for matrices (we assume no other subclasses modify\n        # their dimensions)\n        if isinstance(self.data, np.matrix):\n            if m is nomask:"
  },
  {
    "id" : "c1ac46bf-2ebc-443b-8a4c-09197691d290",
    "prId" : 5706,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ced83046-2f12-4d96-b2b6-19448f5d0ba1",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "might have to be numpy.ma.masked or double ticks as well?\n",
        "createdAt" : "2016-04-02T14:11:21Z",
        "updatedAt" : "2016-04-04T17:20:25Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "1c0a3145-42a5-4690-8d08-551f61274c4e",
        "parentId" : "ced83046-2f12-4d96-b2b6-19448f5d0ba1",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Maybe I should look it up myself and not ask you :).\n",
        "createdAt" : "2016-04-02T14:11:35Z",
        "updatedAt" : "2016-04-04T17:20:25Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "798dd4f22af98facd5113cbbf1b62fd27ad420e3",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +4592,4596 @@        The output array is masked where all the values along the given axis\n        are masked: if the output would have been a scalar and that all the\n        values are masked, then the output is `masked`.\n\n        Refer to `numpy.all` for full documentation."
  },
  {
    "id" : "c9f9b95d-34e0-49a4-8983-7a80fa25b651",
    "prId" : 5709,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8aafb4f8-481f-4a2f-93e2-e98fc637e924",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I think we need to test if out is a maskedarray (other functions do this):\n\n```\n        if isinstance(out, MaskedArray):\n           ...\n```\n",
        "createdAt" : "2015-03-23T03:14:58Z",
        "updatedAt" : "2015-03-30T17:40:13Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf8d3329d43bf534e45cb8182a6d712138566cdc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +4535,4539 @@            return r\n        d = self.filled(0).dot(other.filled(0), out._data)\n        if out.mask.shape != d.shape:\n            out._mask = numpy.empty(d.shape, MaskType)\n        np.dot(am, bm, out._mask)"
  },
  {
    "id" : "867b944a-fdd0-4dd9-86fd-3a99f140c60c",
    "prId" : 5709,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8400e3ca-a2e0-466c-956c-ed1cc4c50981",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I'm a little worried the doc might get out of sync, but I think you've thought about that more than I have.\n",
        "createdAt" : "2015-03-23T03:31:19Z",
        "updatedAt" : "2015-03-30T17:40:13Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "55a5d904-25f8-4dfa-af6e-f0501dabd522",
        "parentId" : "8400e3ca-a2e0-466c-956c-ed1cc4c50981",
        "authorId" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "body" : "I have not thought much about this, but what's good for trace above is good for dot.   And if doc gets out of sync we will have a bigger problem because that would mean that the code got out of sync as well.\n\nWhat I would like to add, though is a section explaining mask handling.\n",
        "createdAt" : "2015-03-26T02:35:25Z",
        "updatedAt" : "2015-03-30T17:40:13Z",
        "lastEditedBy" : "69446047-08ee-467e-b1ce-c12cc7cc8376",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf8d3329d43bf534e45cb8182a6d712138566cdc",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +4540,4544 @@        np.logical_not(out._mask, out._mask)\n        return out\n    dot.__doc__ = ndarray.dot.__doc__\n\n"
  },
  {
    "id" : "1e910bda-39a5-47fc-ba97-eb284365df74",
    "prId" : 6094,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff0b89b2-368f-490e-afd7-5f858fad20f2",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, doesn't this lose something? What is thinking here?\n",
        "createdAt" : "2015-09-10T16:26:44Z",
        "updatedAt" : "2015-10-04T13:50:06Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "92eea4fc-8693-4a1c-90e6-1f5286ae66ab",
        "parentId" : "ff0b89b2-368f-490e-afd7-5f858fad20f2",
        "authorId" : "3c0a8102-3ad5-4f4a-9deb-148e8660e2cc",
        "body" : "@charris - well, the output was basically the same before between the two. This is backward-compatible for the cases that did work.\n",
        "createdAt" : "2015-09-10T16:34:12Z",
        "updatedAt" : "2015-10-04T13:50:06Z",
        "lastEditedBy" : "3c0a8102-3ad5-4f4a-9deb-148e8660e2cc",
        "tags" : [
        ]
      },
      {
        "id" : "80259728-c990-4b9f-b0c7-ac6a1ec412d0",
        "parentId" : "ff0b89b2-368f-490e-afd7-5f858fad20f2",
        "authorId" : "3c0a8102-3ad5-4f4a-9deb-148e8660e2cc",
        "body" : "@charris - would you prefer to see this behave differently? If so, do you have suggestions for expected behavior?\n",
        "createdAt" : "2015-10-03T15:12:37Z",
        "updatedAt" : "2015-10-04T13:50:06Z",
        "lastEditedBy" : "3c0a8102-3ad5-4f4a-9deb-148e8660e2cc",
        "tags" : [
        ]
      },
      {
        "id" : "b7ed3e19-303e-4c64-b7c5-3de68e36328a",
        "parentId" : "ff0b89b2-368f-490e-afd7-5f858fad20f2",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "It seems OK to me, since it looks like what normal void-scalars do too (repr is the same as str).  \n\n```\n>>> a = np.array([([1, 2, 3],)], dtype=[('a', '<i8', (3,))])\n>>> repr(a[0])\n'([1, 2, 3],)'\n```\n",
        "createdAt" : "2015-10-03T18:07:00Z",
        "updatedAt" : "2015-10-04T13:50:06Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "13dd162c498391fbfd108f00ebeae060ed438f8a",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +5776,5780 @@        return str(res[0])\n\n    __repr__ = __str__\n\n    def __iter__(self):"
  },
  {
    "id" : "09368600-e107-4471-80f1-4089c15a0c7e",
    "prId" : 6734,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b09dd15b-0aad-4f58-9236-2f949076bdcd",
        "parentId" : null,
        "authorId" : "14cdabcf-1a05-4e93-8e41-63b39556b926",
        "body" : "Maybe I should also check here that mdtype is dtype('bool') ? \nIf I understand correctly mdtype can be a list for record arrays, in which case `mask = np.array(mask, copy=copy, dtype=mdtype)` throws a TypeError, then we go to the except below which suppose that mask is a list.\nSo in theory one should not use mask = True or False with a record array, or a list this case is not handled ?\n",
        "createdAt" : "2015-11-26T14:34:29Z",
        "updatedAt" : "2015-12-01T21:12:20Z",
        "lastEditedBy" : "14cdabcf-1a05-4e93-8e41-63b39556b926",
        "tags" : [
        ]
      },
      {
        "id" : "1f29d7e2-c234-4d0d-9ad8-82acbbd03f0d",
        "parentId" : "b09dd15b-0aad-4f58-9236-2f949076bdcd",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I don't know, but a check on `mdtype` sounds good if the wrong type raises an error. A try block isn't the best sort of flow control.\n",
        "createdAt" : "2015-12-01T17:51:08Z",
        "updatedAt" : "2015-12-01T21:12:20Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "55a88a62-712e-49ed-8f02-e23b5b1d4df6",
        "parentId" : "b09dd15b-0aad-4f58-9236-2f949076bdcd",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Are these cases currently covered by tests?\n",
        "createdAt" : "2015-12-01T17:51:32Z",
        "updatedAt" : "2015-12-01T21:12:20Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6a9cdf66-f041-4251-98e8-74739264d8b6",
        "parentId" : "b09dd15b-0aad-4f58-9236-2f949076bdcd",
        "authorId" : "14cdabcf-1a05-4e93-8e41-63b39556b926",
        "body" : "Ok, I will a test for `mdtype`. For the unit tests it is covered by tests which use mask=True or False in the constructor, but maybe I can a test specific to the constructor.\n",
        "createdAt" : "2015-12-01T18:41:26Z",
        "updatedAt" : "2015-12-01T21:12:20Z",
        "lastEditedBy" : "14cdabcf-1a05-4e93-8e41-63b39556b926",
        "tags" : [
        ]
      },
      {
        "id" : "13e50260-8bc4-4982-8ccc-82b1b04d2a26",
        "parentId" : "b09dd15b-0aad-4f58-9236-2f949076bdcd",
        "authorId" : "14cdabcf-1a05-4e93-8e41-63b39556b926",
        "body" : "@charris done ! I have added a small test for mask=True/False, so this is explicitly tested.\n",
        "createdAt" : "2015-12-01T21:15:45Z",
        "updatedAt" : "2015-12-01T21:15:45Z",
        "lastEditedBy" : "14cdabcf-1a05-4e93-8e41-63b39556b926",
        "tags" : [
        ]
      }
    ],
    "commit" : "511dab48438dcc9470b5632e206eeef74f5ad6bc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2761,2765 @@                mask = np.ones(_data.shape, dtype=mdtype)\n            elif mask is False and mdtype == MaskType:\n                mask = np.zeros(_data.shape, dtype=mdtype)\n            else:\n                # Read the mask with the current mdtype"
  },
  {
    "id" : "da909f77-ae66-477e-b0a3-6b761d39d3e7",
    "prId" : 6761,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "021a8b8b-2b73-461e-9759-629c92516a9b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Out of curiosity, why always the `0` index?\n",
        "createdAt" : "2015-12-03T17:14:43Z",
        "updatedAt" : "2015-12-03T17:14:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "98c7b4af-3940-4313-a16d-5bb70486e278",
        "parentId" : "021a8b8b-2b73-461e-9759-629c92516a9b",
        "authorId" : "b6680b99-335c-4a15-92fd-eadcef58ae30",
        "body" : "@charris Because a [subdtype](http://docs.scipy.org/doc/numpy/reference/generated/numpy.dtype.subdtype.html) is a tuple `(item_dtype, shape)`.  The shape does not change, but the `item_dtype` does.\n",
        "createdAt" : "2015-12-03T17:40:34Z",
        "updatedAt" : "2015-12-03T17:40:34Z",
        "lastEditedBy" : "b6680b99-335c-4a15-92fd-eadcef58ae30",
        "tags" : [
        ]
      },
      {
        "id" : "8a2205d4-dfa3-4d1e-a0eb-f88407114406",
        "parentId" : "021a8b8b-2b73-461e-9759-629c92516a9b",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Thanks for the explanation.\n",
        "createdAt" : "2015-12-03T17:42:26Z",
        "updatedAt" : "2015-12-03T17:42:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8a09822c707f320d8c8ac242a8628de690a5899",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1249,1253 @@    elif datatype.subdtype:\n        mdescr = list(datatype.subdtype)\n        mdescr[0] = _recursive_make_descr(datatype.subdtype[0], newtype)\n        return tuple(mdescr)\n    else:"
  },
  {
    "id" : "ac406290-b95f-4069-94f0-0c4542e38126",
    "prId" : 6763,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "614e7ea1-572a-4fa6-81e8-b7270cc8b976",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I think this line is good now.\n\nBut for any future reference, another possibility which you reminded me of in another PR is `if m.dtype[indx].subdtype is not None`, which checks specifically for subarrays. But I think a check for `ndarray` is better because there might be other ways of getting an ndarray when indexing - for instance, multifield indices like `marr[['f0', 'f1']]` could return an ndarray, which we would want to convert to a masked array. (Currently void scalars to not support multifield indices though, but I think that is an oversight which we might want to fix soon, eg in #6053)\n",
        "createdAt" : "2015-12-04T18:00:30Z",
        "updatedAt" : "2015-12-04T18:00:30Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "53facf327c7b2949a5f31c308fd66b0b1f24b615",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +5870,5874 @@        \"\"\"\n        m = self._mask\n        if isinstance(m[indx], ndarray):\n            # Can happen when indx is a multi-dimensional field:\n            # A = ma.masked_array(data=[([0,1],)], mask=[([True,"
  },
  {
    "id" : "683835dc-290c-4cfa-aa60-fbc826b9326b",
    "prId" : 6912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82db1953-12ce-43f7-b24e-b75c2b5d48e5",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Likewise.\n",
        "createdAt" : "2016-01-12T18:19:41Z",
        "updatedAt" : "2016-01-15T01:16:32Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ad1a021e-c6a1-4d8c-9837-f7af5c4ef2ed",
        "parentId" : "82db1953-12ce-43f7-b24e-b75c2b5d48e5",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "Actually, I'm just changing the default value of `order` here (for some reason it was defaulted to `False` before).  I don't think I have to put it at the end in this case?\n",
        "createdAt" : "2016-01-12T22:01:16Z",
        "updatedAt" : "2016-01-15T01:16:32Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      },
      {
        "id" : "cd3bc585-89c4-4b75-8c30-ffc2ed8f5c2d",
        "parentId" : "82db1953-12ce-43f7-b24e-b75c2b5d48e5",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Ah, right. So was it used before? We don't want to change defaults.\n",
        "createdAt" : "2016-01-12T22:25:49Z",
        "updatedAt" : "2016-01-15T01:16:32Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4b8fbaa5-d42c-4b5e-ac61-d2006ccb3dc5",
        "parentId" : "82db1953-12ce-43f7-b24e-b75c2b5d48e5",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "But what does a default of `False` mean though?  Also, the `order` parameter was not being respected in the `MaskedArray` construction beforehand, so the default was moot in that case.\n",
        "createdAt" : "2016-01-12T22:26:43Z",
        "updatedAt" : "2016-01-15T01:16:32Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      },
      {
        "id" : "dab6acf3-9b90-420a-bc8c-8e873ecaf8db",
        "parentId" : "82db1953-12ce-43f7-b24e-b75c2b5d48e5",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Point taken.\n",
        "createdAt" : "2016-01-12T22:44:32Z",
        "updatedAt" : "2016-01-15T01:16:32Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "01046460ddc1bef7aa5d3a6ce2e10202a3c954c5",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +6095,6099 @@\n\ndef array(data, dtype=None, copy=False, order=None,\n          mask=nomask, fill_value=None, keep_mask=True,\n          hard_mask=False, shrink=True, subok=True, ndmin=0):"
  },
  {
    "id" : "332246de-152c-4b30-8e66-869fe4f0ab46",
    "prId" : 7020,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f8ecb1d-18f9-45d7-be75-b56316cce981",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Minor comment: Do we need warnings in `__getitem__`? The proposed change shouldn't have any effect on someone who never modifies the mask, right? It's only in `__setitem__` that code might break.\n\nAlso, perhaps we can be even fancier and only show the warning if we know `self.data` is a view: In `__setitem__` do `if not self.data.owndata: warnings.warn('...')`.\n",
        "createdAt" : "2016-01-16T00:18:12Z",
        "updatedAt" : "2016-01-16T00:18:34Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "73bf1d6d-7501-43af-b8ec-758cef37b32e",
        "parentId" : "4f8ecb1d-18f9-45d7-be75-b56316cce981",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "> Do we need warnings in `__getitem__`?\n\nThe return value is changing. Personally, I think that merits a warning.\n\n> The proposed change shouldn't have any effect on someone who never modifies the mask, right?\n\nCould the change not effect them? Maybe, but I'd rather they start thinking about it now instead of leaving them in the dark until the breaking release; then have them discover some behavior is broken.\n\n> It's only in `__setitem__` that code might break.\n\nThat's supposing they are following the rules and not using some hack. We should still warn them even when they are doing the wrong thing. Hence why I like the `__getitem__` warning. Though I thought really hard about adding a warning in `__new__` as well, but decided that might be too much.\n\n> Also, perhaps we can be even fancier and only show the warning if we know `self.data` is a view...\n\nI suppose, but I think we have just as much of a chance getting this wrong by being too tricky. Namely, not emitting a warning when we should. The current behavior is straightforward. If the user calls `__setitem__`, they are always warned about the breaking change that is pending.\n",
        "createdAt" : "2016-01-16T00:32:42Z",
        "updatedAt" : "2016-01-16T00:43:07Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "4989360f6bb57e45e1a6f624144117bfd3511313",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +3113,3117 @@            FutureWarning\n        )\n\n        dout = self.data[indx]\n        # We could directly use ndarray.__getitem__ on self."
  },
  {
    "id" : "140ad8a5-3ed1-4f01-a603-2190cc5e2092",
    "prId" : 7020,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d57936ca-9f24-4019-9ca9-bdbeab2cf392",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Don't need the `+`, although it doesn't hurt.\n",
        "createdAt" : "2016-01-16T00:58:20Z",
        "updatedAt" : "2016-01-16T00:58:20Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "783beab0-d9b6-42b5-9da5-470a8b0bbf38",
        "parentId" : "d57936ca-9f24-4019-9ca9-bdbeab2cf392",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "And this will be deleted in the future.\n",
        "createdAt" : "2016-01-16T00:59:29Z",
        "updatedAt" : "2016-01-16T00:59:29Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ad24a19b-bac4-4dbb-b378-91b4dd045212",
        "parentId" : "d57936ca-9f24-4019-9ca9-bdbeab2cf392",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "Sure, would you rather the `+`s be removed?\n",
        "createdAt" : "2016-01-16T00:59:48Z",
        "updatedAt" : "2016-01-16T01:01:27Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "4989360f6bb57e45e1a6f624144117bfd3511313",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +3108,3112 @@        # 2016.01.15 -- v1.11.0\n        warnings.warn(\n            \"Currently, slicing will try to return a view of the data,\" +\n            \" but will return a copy of the mask. In the future, it will try\" +\n            \" to return both as views.\","
  },
  {
    "id" : "4d9c7302-eee6-47b2-9253-b6d3e49f0ca2",
    "prId" : 7194,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8e81730-c8b9-424e-886b-af94d1b947b9",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I guess the idea here is that `_oldsharedmask` propagates, but `_sharedmask` doesn't for now.\n",
        "createdAt" : "2016-02-08T22:42:24Z",
        "updatedAt" : "2016-02-08T23:51:01Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "78fda749-ec13-4b4b-b6b0-2838965b20e2",
        "parentId" : "b8e81730-c8b9-424e-886b-af94d1b947b9",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "Right, it was what I figured out to handle this case.\n\n```\nimport numpy as np\n\na = np.ma.masked_array(np.zeros((2,3)), mask=np.zeros((2,3)))\nb = a[0:1]\n\nb[0] = np.ma.masked      # raises the warning (mask gets copied)\nb[0,1] = np.ma.masked    # doesn't raise a warning\n```\n\nBy making this change, the warning is now raised in the second case.\n",
        "createdAt" : "2016-02-08T23:26:45Z",
        "updatedAt" : "2016-02-08T23:51:01Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e46c6c86c66f422fa7b53714b81f872733c34d9",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +3182,3186 @@        # 2016.01.15 -- v1.11.0\n        self._oldsharedmask = getattr(self, \"_oldsharedmask\", False)\n        self._oldsharedmask = self._oldsharedmask or self._sharedmask\n        if (self._mask is not nomask) and self._oldsharedmask:\n            warnings.warn("
  },
  {
    "id" : "2a91af35-9980-4a9d-8048-dfacffc71107",
    "prId" : 7194,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5b4fc54-2186-4b37-b8b3-fab987cad8ff",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This is to make the message always show? If so, it won't work because derived classes of `FutureWarning` will also be ignored if `FutureWarnins` is.\n\n```\nIn [1]: import warnings\n\nIn [2]: warnings.simplefilter('always')\n\nIn [3]: warnings.simplefilter('ignore', FutureWarning)\n\nIn [4]: class MyWarn(FutureWarning):   \n    pass\n   ...: \n\nIn [5]: warnings.warn('hi', FutureWarning)\n\nIn [6]: warnings.warn('hi', MyWarn)\n\nIn [7]: warnings.warn('hi', RuntimeWarning)\n/home/charris/.local/bin/ipython:1: RuntimeWarning: hi\n  #!/usr/bin/python\n```\n",
        "createdAt" : "2016-02-08T22:55:52Z",
        "updatedAt" : "2016-02-08T23:51:01Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "007691b3-c84e-42c9-a298-8354ef6d6a52",
        "parentId" : "f5b4fc54-2186-4b37-b8b3-fab987cad8ff",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "Would you like me to change the inheritance then or drop it completely?\n\nThe point was to make sure that this special case of `MaskedArrayFutureWarning` could be dealt with separately from `FutureWarning`s in general. So one would not need to filter out all `FutureWarning`s, but could just filter out `MaskedArrayFutureWarning`s. Also one could just as easily promote only `MaskedArrayFutureWarning` to errors to check and see where they are assuming the old behavior, but not correcting for it.\n",
        "createdAt" : "2016-02-08T23:25:11Z",
        "updatedAt" : "2016-02-08T23:51:01Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      },
      {
        "id" : "b90438a7-3831-4f38-8654-00f39d2636a8",
        "parentId" : "f5b4fc54-2186-4b37-b8b3-fab987cad8ff",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Oh, OK, it should work for that.\n",
        "createdAt" : "2016-02-08T23:48:17Z",
        "updatedAt" : "2016-02-08T23:51:01Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "104fadef-ea9a-4c0b-acde-ce7461aa2435",
        "parentId" : "f5b4fc54-2186-4b37-b8b3-fab987cad8ff",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "I briefly considered subclassing this another time (e.g. `MaskedArraySetitemFutureWarning`) for this case as it seems that this module is always going through some level of cleanup and it may be nice to keep this available for other deprecations.\n",
        "createdAt" : "2016-02-09T00:11:07Z",
        "updatedAt" : "2016-02-09T00:11:07Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "8e46c6c86c66f422fa7b53714b81f872733c34d9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +83,87 @@nomask = MaskType(0)\n\nclass MaskedArrayFutureWarning(FutureWarning):\n    pass\n"
  },
  {
    "id" : "be4510a6-095e-4f37-8f32-571fc9f1d3b0",
    "prId" : 7349,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4913680a-c4f3-4aca-9983-4f73909cf246",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This change seems radical. What is the intent?\n",
        "createdAt" : "2016-02-26T18:25:39Z",
        "updatedAt" : "2016-02-26T19:26:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "474cac35-b2a1-4d40-b90c-a4ea54b28222",
        "parentId" : "4913680a-c4f3-4aca-9983-4f73909cf246",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "The call to `filled` has no effect since da and db have no masked values (they are just the data arrays of a and b).\n",
        "createdAt" : "2016-02-26T19:14:25Z",
        "updatedAt" : "2016-02-26T19:26:02Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd19bf398ad716cb36476b4fbe3df1ae75466fe9",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +1134,1138 @@        domain = ufunc_domain.get(self.f, None)\n        if domain is not None:\n            m |= domain(da, db)\n        # Take care of the scalar case first\n        if (not m.ndim):"
  },
  {
    "id" : "6a46b671-eb12-4409-bf6b-842c8eb26b47",
    "prId" : 7349,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fd63383-d7c9-434f-8f24-d7741dca151d",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This is masked version of `less_equal`?\n",
        "createdAt" : "2016-02-26T18:27:37Z",
        "updatedAt" : "2016-02-26T19:26:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "8c12fcdf-544c-4fa3-868f-3723d3bf3c8b",
        "parentId" : "3fd63383-d7c9-434f-8f24-d7741dca151d",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "That's right. This way it goes through the masked ufuncs, which suppress warnings for nan at masked positions.\n",
        "createdAt" : "2016-02-26T19:28:48Z",
        "updatedAt" : "2016-02-26T19:28:48Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd19bf398ad716cb36476b4fbe3df1ae75466fe9",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +7518,7522 @@    # No infs at all\n    if not np.any(xinf):\n        d = filled(less_equal(absolute(x - y), atol + rtol * absolute(y)),\n                   masked_equal)\n        return np.all(d)"
  },
  {
    "id" : "e1063683-f295-4015-ba3e-a54ddb2d52a5",
    "prId" : 7515,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33f885de-1b7a-426a-a382-bbc80a2e42fa",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Maybe `IndexError`?\n\n> exception IndexError\n> \n>    Raised when a sequence subscript is out of range. (Slice indices are silently truncated to fall in the allowed range; if an index is not an integer, TypeError is raised.)\n",
        "createdAt" : "2016-04-05T21:25:37Z",
        "updatedAt" : "2016-04-05T21:25:37Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4213f27d-fcaa-4613-923d-b3e28799ae77",
        "parentId" : "33f885de-1b7a-426a-a382-bbc80a2e42fa",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I'm just copying ufunc behavior here:\n\n```\n>>> np.ones((2,3)).all(axis=8)\nValueError: 'axis' entry is out of bounds\n```\n",
        "createdAt" : "2016-04-05T21:29:55Z",
        "updatedAt" : "2016-04-05T21:29:55Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ba2007c0b4cbe0bfb66f5a7e1928785c9449800",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +4324,4328 @@                raise ValueError(\"duplicate value in 'axis'\")\n            if np.any([a < 0 or a >= self.ndim for a in axes]):\n                raise ValueError(\"'axis' entry is out of bounds\")\n            items = 1\n            for ax in axes:"
  },
  {
    "id" : "b3021cd6-3956-4d9c-a0df-e36f84965e91",
    "prId" : 8018,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e006988e-7c1b-4b2e-95b8-a52625594a0b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Does not look right, as the default value of `keepdims` is `np._NoValue`, which evaluates as true. Because `keepdims` will always have a value, maybe just `keepdims is True`\n",
        "createdAt" : "2016-09-05T16:05:56Z",
        "updatedAt" : "2016-09-05T16:05:56Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "52806d4d-fce6-485b-a846-bd2a1a36009b",
        "parentId" : "e006988e-7c1b-4b2e-95b8-a52625594a0b",
        "authorId" : "4b0602db-f9ac-4b54-b200-2e79d0cfb7c3",
        "body" : "@charris The `np._NoValue` is discarded [a few lines earlier](https://github.com/numpy/numpy/blob/master/numpy/ma/core.py#L4341) and the same expression is used [a few lines later](https://github.com/numpy/numpy/blob/master/numpy/ma/core.py#L4371).\n\nIt's a bit weird to use `kwargs` if the only `kwarg` is `keepdims` but I _guess_ that's more easily extendable if one ever wants to allow additional `kwargs`. :sweat_smile: \n",
        "createdAt" : "2016-09-05T16:15:40Z",
        "updatedAt" : "2016-09-05T16:17:46Z",
        "lastEditedBy" : "4b0602db-f9ac-4b54-b200-2e79d0cfb7c3",
        "tags" : [
        ]
      },
      {
        "id" : "7829ad5f-893a-4b07-af30-307ca745f681",
        "parentId" : "e006988e-7c1b-4b2e-95b8-a52625594a0b",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Oh, good point.\n",
        "createdAt" : "2016-09-05T16:18:33Z",
        "updatedAt" : "2016-09-05T16:18:33Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bcae47040aeef1127cc0d056f950f00d3d9e197",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +4362,4366 @@                return 1\n            elif axis is None:\n                if kwargs.get('keepdims', False):\n                    return np.array(self.size, dtype=np.intp, ndmin=self.ndim)\n                return self.size"
  },
  {
    "id" : "cabd321e-e224-427d-9763-43c5b336a270",
    "prId" : 8122,
    "prUrl" : "https://github.com/numpy/numpy/pull/8122#pullrequestreview-3151052",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64b6c192-66a4-474d-b173-75159bddc025",
        "parentId" : null,
        "authorId" : "a5a69d97-d7c2-4f15-86c7-ebee69125473",
        "body" : "@shoyer, does this really make more sense given that we're making assumptions about `super.__reduce__`'s return value, and discarding all elements but one?\n",
        "createdAt" : "2016-10-06T11:26:34Z",
        "updatedAt" : "2016-10-06T11:26:34Z",
        "lastEditedBy" : "a5a69d97-d7c2-4f15-86c7-ebee69125473",
        "tags" : [
        ]
      },
      {
        "id" : "b7ce042d-2e52-43e7-889a-6d5da3c5891a",
        "parentId" : "64b6c192-66a4-474d-b173-75159bddc025",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "I'm pretty comfortable with this, given that (1) the spec of `__reduce__` is mostly [prescribed by Python](https://docs.python.org/3/library/pickle.html#object.__reduce__) and this MaskedArray is defined in NumPy itself, which means that if any ever changes how `ndarray.__reduce__` works our unit tests will catch the issue for MaskedArray.\n",
        "createdAt" : "2016-10-06T16:29:38Z",
        "updatedAt" : "2016-10-06T16:29:38Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fa49f8d102048f327287e51f44b8414d4dfbd6e",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +5861,5865 @@        \"\"\"\n        cf = 'CF'[self.flags.fnc]\n        data_state = super(MaskedArray, self).__reduce__()[2]\n        return data_state + (getmaskarray(self).tobytes(cf), self._fill_value)\n"
  },
  {
    "id" : "e7b961ad-5f54-4f24-b07f-eb8bb542ebe2",
    "prId" : 8142,
    "prUrl" : "https://github.com/numpy/numpy/pull/8142#pullrequestreview-24301860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ae875ed-1c22-4ab7-976a-c1f474658979",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I assume the super mean returns a 0-d array scalar for relevant cases. I note the following odd behavior of ordinary arrays that is new to me.\n\n```\n>>> np.float64(1)\n1.0\n>>> np.float64(1)[()]\narray(1.0)\n>>> np.float64(1)[()][()]\n1.0\n```\n\nThat is, the `[()]` construct flips the result back and forth between arrays and scalars.\n",
        "createdAt" : "2016-10-14T16:07:02Z",
        "updatedAt" : "2016-10-14T16:07:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "794c1e14-614b-48ba-8648-0d7d5dba3542",
        "parentId" : "4ae875ed-1c22-4ab7-976a-c1f474658979",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "For anyone coming here in future, the above is no longer (1.11.1) the case. `[()]` does not promote scalars to 0d-arrays",
        "createdAt" : "2017-02-28T17:44:05Z",
        "updatedAt" : "2017-02-28T17:49:58Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8d7c2528b99094358a57e53bb7a67bcacb679ae",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +5059,5063 @@            result = super(MaskedArray, self).mean(axis=axis,\n                                                   dtype=dtype, **kwargs)[()]\n        else:\n            dsum = self.sum(axis=axis, dtype=dtype, **kwargs)\n            cnt = self.count(axis=axis, **kwargs)"
  },
  {
    "id" : "17e8af45-c36b-42e5-aa39-6395a91e5246",
    "prId" : 8416,
    "prUrl" : "https://github.com/numpy/numpy/pull/8416#pullrequestreview-17818286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bd39d00-a3b0-4b56-9411-610507ac5f15",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Note: probably this is better done in `__array_prepare__`, but given that we hopefully soon have `__array_func__` to work with, I felt it not quite worth it to try to define that...",
        "createdAt" : "2017-01-22T01:38:06Z",
        "updatedAt" : "2017-02-01T19:39:48Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "7927b3cb4b57e79bf6b1b8a723583295fc0398eb",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2989,2993 @@\n        \"\"\"\n        if obj is self:  # for in-place operations\n            result = obj\n        else:"
  },
  {
    "id" : "22fdff39-2dd8-4952-973a-22e03835ab34",
    "prId" : 8590,
    "prUrl" : "https://github.com/numpy/numpy/pull/8590#pullrequestreview-22964251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2811842b-49d1-4d44-b9b6-59252eb746a8",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Does this need broadcasting too? Perhaps we should just broadcast `mask` at the top, since we do so later anyway",
        "createdAt" : "2017-02-20T22:37:41Z",
        "updatedAt" : "2017-02-27T16:24:23Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "82c68729-b742-43ab-9590-5b57bc3e1691",
        "parentId" : "2811842b-49d1-4d44-b9b6-59252eb746a8",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "No, `filled` does the broadcasting correctly. I went back and forth about putting the broadcasting at the top, but decided against it, since usually it will not be needed.",
        "createdAt" : "2017-02-20T23:48:59Z",
        "updatedAt" : "2017-02-27T16:24:23Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "7af9bfa2-43a8-46bc-8e0a-75d59d1a8931",
        "parentId" : "2811842b-49d1-4d44-b9b6-59252eb746a8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I guess my point is more whether it's even valid to have a mask that doesn't match the data shape, which I don't believe is guaranteed here",
        "createdAt" : "2017-02-21T00:54:49Z",
        "updatedAt" : "2017-02-27T16:24:23Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "08ae83a2-c3c0-4c3c-b6ed-986776dc910d",
        "parentId" : "2811842b-49d1-4d44-b9b6-59252eb746a8",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "In general, no, it isn't, but `filled` does broadcast correctly (and the mask is only used for that purpose; ideally, the filled function would just take a `mask` argument, using `self.mask` by default; but that's for yet another PR...)",
        "createdAt" : "2017-02-21T14:14:59Z",
        "updatedAt" : "2017-02-27T16:24:23Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "3435dd9881d84ba2b91faa478555a3c58e7921af",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +3890,3894 @@            broadcast_shape = np.broadcast(self, odata).shape\n            sbroadcast = np.broadcast_to(self, broadcast_shape, subok=True)\n            sbroadcast._mask = mask\n            sdata = sbroadcast.filled(odata)\n            # Now take care of the mask; the merged mask should have an item"
  },
  {
    "id" : "9e6b8f50-9095-4c7b-9ddb-9c129c15ac1d",
    "prId" : 8590,
    "prUrl" : "https://github.com/numpy/numpy/pull/8590#pullrequestreview-22977812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8abaf84f-2dd3-4290-a82a-38d7f1c20b02",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Went back to `view(type(self))` here, since python will already have ensured that, if `other` is a subclass of `self`, that this would be called as `other.__eq__(self)`.",
        "createdAt" : "2017-02-21T15:06:24Z",
        "updatedAt" : "2017-02-27T16:24:23Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "3435dd9881d84ba2b91faa478555a3c58e7921af",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +3915,3919 @@                mask = np.broadcast_to(mask, check.shape).copy()\n\n        check = check.view(type(self))\n        check._mask = mask\n        return check"
  },
  {
    "id" : "62be2f5a-fcc9-4cff-aabd-c401bd6121ab",
    "prId" : 8590,
    "prUrl" : "https://github.com/numpy/numpy/pull/8590#pullrequestreview-23245922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2da8610-992f-4ef1-be93-cb11918ddb6f",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Are there any tests of this underlying bool data?",
        "createdAt" : "2017-02-22T15:11:23Z",
        "updatedAt" : "2017-02-27T16:24:23Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e53ff8f5-9369-495a-a371-b74790083cbb",
        "parentId" : "a2da8610-992f-4ef1-be93-cb11918ddb6f",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Yes, note how the tests all do something like `test = (?? != ??)` and then test both the values and the mask.",
        "createdAt" : "2017-02-22T15:28:39Z",
        "updatedAt" : "2017-02-27T16:24:23Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "3435dd9881d84ba2b91faa478555a3c58e7921af",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +3936,3940 @@\n        When either of the elements is masked, the result is masked as well,\n        but the underlying boolean data are still set, with self and other\n        considered equal if both are masked, and unequal otherwise.\n"
  },
  {
    "id" : "075ac860-bc79-468b-9daf-5fee028c91a8",
    "prId" : 8665,
    "prUrl" : "https://github.com/numpy/numpy/pull/8665#pullrequestreview-23249305",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ab3749e-46d9-4e19-964b-98945d157c59",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Why look up the method on the class rather than just `getattr(marr, method_name, None)`?",
        "createdAt" : "2017-02-22T15:10:54Z",
        "updatedAt" : "2017-02-22T15:10:54Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "68448422-48e5-424d-83c0-a60ae24c19f9",
        "parentId" : "0ab3749e-46d9-4e19-964b-98945d157c59",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Seems tidier I guess (and closed to how dunder lookup works), and makes it work on masked record arrays.\r\n\r\nYou've actually made me notice a bug here, in that `reversed` should only apply to the method call. Either way, that bug was here all along, and can wait for another PR.",
        "createdAt" : "2017-02-22T15:18:52Z",
        "updatedAt" : "2017-02-22T15:24:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "593bb9c4-daac-4fee-9681-c102263686e3",
        "parentId" : "0ab3749e-46d9-4e19-964b-98945d157c59",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "It does look really weird to me to look it up on the class! But of course if one looks up on `marr`, one cannot pass `marr` as first argument below. If I were to write this, I'd probably do:\r\n```\r\nmethod = getattr(marr, 'method_name', None)\r\nif method is not None:\r\n    return method(*args, **params)\r\nelse:\r\n    return getattr(np, method_name)(marr, *args, **params)\r\n```\r\nAnyway, no big deal either way.",
        "createdAt" : "2017-02-22T15:40:08Z",
        "updatedAt" : "2017-02-22T15:40:08Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bc42fc2194c4a7cbc8fa77165e25365e3e46012",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +6377,6381 @@        marr = asanyarray(a)\n        method_name = self.__name__\n        method = getattr(type(marr), method_name, None)\n        if method is None:\n            # use the corresponding np function"
  },
  {
    "id" : "420df703-5b20-4a5f-8361-f9789c8247c5",
    "prId" : 8665,
    "prUrl" : "https://github.com/numpy/numpy/pull/8665#pullrequestreview-23261681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5247cffd-453a-44a3-b72e-791a04c9045a",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "One could change `MaskedArray.__new__`, though perhaps calling a class constructor and not getting back a new instance might also be surprising... Perhaps best might have been to have had a logical distinction between the `np.ma.MaskedArray` class and a `np.ma.masked_array`/`np.ma.array` function...\r\n\r\nOverall, this is probably the best solution.",
        "createdAt" : "2017-02-22T15:18:32Z",
        "updatedAt" : "2017-02-22T15:18:32Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "152e714a-f0b4-4629-8288-f21fb3350c04",
        "parentId" : "5247cffd-453a-44a3-b72e-791a04c9045a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> One could change `MaskedArray.__new__`\r\n\r\nThis is the correct approach, and already how `ndarray.__new__` behaves. Now take a look at `MaskedArray.__new__`, and tell me how easy that changes looks. That's why I'm calling this a workaround!",
        "createdAt" : "2017-02-22T15:24:12Z",
        "updatedAt" : "2017-02-22T15:24:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f68ed7b3-feaa-4860-9cf3-4e3e0698d540",
        "parentId" : "5247cffd-453a-44a3-b72e-791a04c9045a",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I think one would add right after the [first line](https://github.com/numpy/numpy/blob/master/numpy/ma/core.py#L2766):\r\n```\r\nif _data is data and (type(_data) is cls or subok and isinstance(_data, cls)):\r\n    return _data\r\n```",
        "createdAt" : "2017-02-22T15:48:18Z",
        "updatedAt" : "2017-02-22T15:48:18Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "6c50705b-77c1-4e6b-b689-b900b78ad072",
        "parentId" : "5247cffd-453a-44a3-b72e-791a04c9045a",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Just to be sure: I think for a bug fix you're current approach is preferable!",
        "createdAt" : "2017-02-22T15:48:56Z",
        "updatedAt" : "2017-02-22T15:48:57Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "836301bb-4209-4307-b21c-6c5cdb02eff5",
        "parentId" : "5247cffd-453a-44a3-b72e-791a04c9045a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "@mhkv: Not enough. I think you also need to check that all of the other arguments are their default value, or more difficultly, compatible values",
        "createdAt" : "2017-02-22T15:50:12Z",
        "updatedAt" : "2017-02-22T15:50:30Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2b585809-f281-497d-8771-cae1de80aec5",
        "parentId" : "5247cffd-453a-44a3-b72e-791a04c9045a",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Yes, makes sense.",
        "createdAt" : "2017-02-22T16:20:59Z",
        "updatedAt" : "2017-02-22T16:20:59Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bc42fc2194c4a7cbc8fa77165e25365e3e46012",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +7677,7681 @@\n    \"\"\"\n    # workaround for #8666, to preserve identity. Ideally the bottom line\n    # would handle this for us.\n    if isinstance(a, MaskedArray) and (dtype is None or dtype == a.dtype):"
  },
  {
    "id" : "1779bfee-3d95-49b1-9efa-cbe25b360c99",
    "prId" : 8665,
    "prUrl" : "https://github.com/numpy/numpy/pull/8665#pullrequestreview-23271187",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3d8e70f-3f51-4cd8-b986-07e7eb7a2932",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I think with your other change it is now safe (and shorter though a bit slower) to just do \r\n```\r\ncompressed = _frommethod('compressed')\r\n```",
        "createdAt" : "2017-02-22T15:23:26Z",
        "updatedAt" : "2017-02-22T15:23:26Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "3862ce57-4e2f-43b5-a18b-56eec653dae3",
        "parentId" : "e3d8e70f-3f51-4cd8-b986-07e7eb7a2932",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I agree. Until just now, I thought that this was only for methods that exist in `np`, but it is not",
        "createdAt" : "2017-02-22T15:25:11Z",
        "updatedAt" : "2017-02-22T15:25:11Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "027b8658-e96a-477a-9225-b2293e733ddd",
        "parentId" : "e3d8e70f-3f51-4cd8-b986-07e7eb7a2932",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'll add another commit for this that fixes a bunch of other methods as well, that were out of scope for the original PR\r\n",
        "createdAt" : "2017-02-22T15:26:47Z",
        "updatedAt" : "2017-02-22T15:26:47Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0023e1b3-20f4-4fc7-b1b3-7433670492d5",
        "parentId" : "e3d8e70f-3f51-4cd8-b986-07e7eb7a2932",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "@mhvk: actually, can I bump that method cleanup to another PR?",
        "createdAt" : "2017-02-22T15:31:36Z",
        "updatedAt" : "2017-02-22T15:31:36Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "074b0f16-20f9-41af-a6c3-374ab0949be4",
        "parentId" : "e3d8e70f-3f51-4cd8-b986-07e7eb7a2932",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Yes, better in another PR. As is, this is a bug fix, but that would be maintenance.",
        "createdAt" : "2017-02-22T15:41:43Z",
        "updatedAt" : "2017-02-22T15:41:43Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "e5c0ff01-042d-408e-a1d1-e7235950d5db",
        "parentId" : "e3d8e70f-3f51-4cd8-b986-07e7eb7a2932",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Happy for me to leave this line in then, or do you want me to remove it?",
        "createdAt" : "2017-02-22T16:00:24Z",
        "updatedAt" : "2017-02-22T16:00:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "aa005439-9008-43d2-9df5-f30001bc6a4d",
        "parentId" : "e3d8e70f-3f51-4cd8-b986-07e7eb7a2932",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "In another PR is slightly better, but really this is making work, so whatever you feel like!",
        "createdAt" : "2017-02-22T16:22:15Z",
        "updatedAt" : "2017-02-22T16:22:15Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "986366c6-ce81-4455-bdc1-eb515a0f3681",
        "parentId" : "e3d8e70f-3f51-4cd8-b986-07e7eb7a2932",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'd rather this just be merged as is, to be honest",
        "createdAt" : "2017-02-22T16:29:55Z",
        "updatedAt" : "2017-02-22T16:29:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "24706123-eeeb-4377-abee-2a839e2eda62",
        "parentId" : "e3d8e70f-3f51-4cd8-b986-07e7eb7a2932",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "No problem.",
        "createdAt" : "2017-02-22T16:53:01Z",
        "updatedAt" : "2017-02-22T16:53:01Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "0bc42fc2194c4a7cbc8fa77165e25365e3e46012",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +6531,6535 @@\n    \"\"\"\n    return asanyarray(x).compressed()\n\n"
  },
  {
    "id" : "cfd06558-83d0-458b-a713-7cad902ac733",
    "prId" : 8667,
    "prUrl" : "https://github.com/numpy/numpy/pull/8667#pullrequestreview-23372499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a90691b-dfba-43c9-bbf5-187bab21fbd8",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`_make_descr` was a pretty bad name",
        "createdAt" : "2017-02-23T00:35:49Z",
        "updatedAt" : "2017-03-03T12:49:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1a70570c2110734ed6a371df2224a34aa20b9ec",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1287,1291 @@\n\ndef _replace_dtype_fields_recursive(dtype, primitive_dtype):\n    \"Private function allowing recursion in _replace_dtype_fields.\"\n    _recurse = _replace_dtype_fields_recursive"
  },
  {
    "id" : "3b604104-f874-4df1-8315-b086ff451472",
    "prId" : 8667,
    "prUrl" : "https://github.com/numpy/numpy/pull/8667#pullrequestreview-23372499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62352e2d-9eee-44c6-99be-406a4c99cc79",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Now do the dtype conversions just once, so we don't need to again",
        "createdAt" : "2017-02-23T00:36:04Z",
        "updatedAt" : "2017-03-03T12:49:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1a70570c2110734ed6a371df2224a34aa20b9ec",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +1330,1334 @@    dtype = np.dtype(dtype)\n    primitive_dtype = np.dtype(primitive_dtype)\n    return _replace_dtype_fields_recursive(dtype, primitive_dtype)\n\n"
  },
  {
    "id" : "8dfa1ca2-3591-41c0-a343-d0c31148db65",
    "prId" : 8667,
    "prUrl" : "https://github.com/numpy/numpy/pull/8667#pullrequestreview-23372499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "545d4718-17c1-47d6-9252-7079c4b90af2",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Possible scope for public visibility? I can see \"convert all fields to object/bool\" being marginally desirable elsewhere",
        "createdAt" : "2017-02-23T00:36:50Z",
        "updatedAt" : "2017-03-03T12:49:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1a70570c2110734ed6a371df2224a34aa20b9ec",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +1319,1323 @@\n\ndef _replace_dtype_fields(dtype, primitive_dtype):\n    \"\"\"\n    Construct a dtype description list from a given dtype."
  },
  {
    "id" : "85572f73-780f-405e-925d-2bc6cd22cb1a",
    "prId" : 8667,
    "prUrl" : "https://github.com/numpy/numpy/pull/8667#pullrequestreview-23372499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7449317-d865-4ad3-b209-057998c1168a",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Implementation details of `mask_make_descr` shouldn't be used elsewhere!",
        "createdAt" : "2017-02-23T00:37:22Z",
        "updatedAt" : "2017-03-03T12:49:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1a70570c2110734ed6a371df2224a34aa20b9ec",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +3849,3853 @@                    res.view(ndarray)[mask] = f\n                else:\n                    rdtype = _replace_dtype_fields(self.dtype, \"O\")\n                    res = self._data.astype(rdtype)\n                    _recursive_printoption(res, m, f)"
  },
  {
    "id" : "fcc51bf9-f9ba-4e96-bb09-2374f8aa12be",
    "prId" : 8667,
    "prUrl" : "https://github.com/numpy/numpy/pull/8667#pullrequestreview-23372499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6921dd8-665c-4af5-bee3-9ee483ea40de",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Ideally I'd rename this to `make_mask_dtype` or `mask_dtype_for`, but that's for another PR.",
        "createdAt" : "2017-02-23T00:38:09Z",
        "updatedAt" : "2017-03-03T12:49:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1a70570c2110734ed6a371df2224a34aa20b9ec",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +1333,1337 @@\n\ndef make_mask_descr(ndtype):\n    \"\"\"\n    Construct a dtype description list from a given dtype."
  },
  {
    "id" : "536a943c-2be9-4433-820e-3c14df7d7d10",
    "prId" : 8667,
    "prUrl" : "https://github.com/numpy/numpy/pull/8667#pullrequestreview-24966365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "310c052e-9671-45f3-928b-cf471b6114fb",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This was already the behaviour before the PR - the docs were just wrong",
        "createdAt" : "2017-03-03T12:51:12Z",
        "updatedAt" : "2017-03-03T12:51:12Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1a70570c2110734ed6a371df2224a34aa20b9ec",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +1360,1364 @@    dtype([('foo', '|b1'), ('bar', '|b1')])\n    >>> ma.make_mask_descr(np.float32)\n    dtype('bool')\n\n    \"\"\""
  },
  {
    "id" : "b2b7fa4e-2915-44c7-b037-69e36504377d",
    "prId" : 8669,
    "prUrl" : "https://github.com/numpy/numpy/pull/8669#pullrequestreview-24138059",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7025c8b-3fe3-4b48-83aa-8728c287ef54",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Wait, why level 2?",
        "createdAt" : "2017-02-28T00:57:17Z",
        "updatedAt" : "2017-02-28T00:57:22Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2ad6f8d2-aa39-4201-871b-9010b6aa04bc",
        "parentId" : "c7025c8b-3fe3-4b48-83aa-8728c287ef54",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Nevermind, this is consistent with everything else",
        "createdAt" : "2017-02-28T01:01:11Z",
        "updatedAt" : "2017-02-28T01:01:11Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2c9b2c75-13f8-43a0-a17f-e1d9379ea55c",
        "parentId" : "c7025c8b-3fe3-4b48-83aa-8728c287ef54",
        "authorId" : "4b0602db-f9ac-4b54-b200-2e79d0cfb7c3",
        "body" : "Yep, that was simply copied from another warning.",
        "createdAt" : "2017-02-28T01:04:09Z",
        "updatedAt" : "2017-02-28T01:04:09Z",
        "lastEditedBy" : "4b0602db-f9ac-4b54-b200-2e79d0cfb7c3",
        "tags" : [
        ]
      },
      {
        "id" : "586dac03-5019-45d0-8c13-d2205b04e4e9",
        "parentId" : "c7025c8b-3fe3-4b48-83aa-8728c287ef54",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Python docs seemed to suggest that `stacklevel=2` is what you should use in a warning helper function. But yeah, this is better for consistency",
        "createdAt" : "2017-02-28T01:12:01Z",
        "updatedAt" : "2017-02-28T01:12:01Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0bf15d1b99dd239530b25a0d939ee4475f85af5",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +5645,5649 @@        warnings.warn(\"Warning: 'argpartition' will ignore the 'mask' \"\n                      \"of the {}.\".format(self.__class__.__name__),\n                      stacklevel=2)\n        return super(MaskedArray, self).argpartition(*args, **kwargs)\n"
  },
  {
    "id" : "66301476-75d2-4bd8-98ec-dbfd294102c3",
    "prId" : 8678,
    "prUrl" : "https://github.com/numpy/numpy/pull/8678#pullrequestreview-23506950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9ea8db7-90b6-40e4-b177-e898e8eaa167",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "There's a choice we need to make here. Right now (and before this patch), `np.ma.sort` sometimes returns an `ma.array`, and sometimes an `ndarray`.\r\n\r\nShould we change it to always promote to `ma.array`, for consistency with the other functions? (Which do this as of #8665 )",
        "createdAt" : "2017-02-23T15:40:50Z",
        "updatedAt" : "2017-03-07T17:35:22Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee90efce354c8af73e17331d3977121d438bb294",
    "line" : 196,
    "diffHunk" : "@@ -1,1 +6528,6532 @@               endwith=endwith, fill_value=fill_value)\n    else:\n        a.sort(axis=axis, kind=kind, order=order)\n    return a\nsort.__doc__ = MaskedArray.sort.__doc__"
  },
  {
    "id" : "74abb7ff-1610-477d-bba0-42445c5441d4",
    "prId" : 8678,
    "prUrl" : "https://github.com/numpy/numpy/pull/8678#pullrequestreview-23509928",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37525548-d51f-435a-9880-1d398f3149db",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "In theory we could do a little better here, by implementing the in-place sort in terms of the non-in place. Right now (and before this patch), the latter does a redundant copy. So either way, best left for another PR, I think",
        "createdAt" : "2017-02-23T15:51:01Z",
        "updatedAt" : "2017-03-07T17:35:22Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee90efce354c8af73e17331d3977121d438bb294",
    "line" : 131,
    "diffHunk" : "@@ -1,1 +5460,5464 @@            idx[axis] = sidx\n\n        self[...] = self[idx]\n\n    def min(self, axis=None, out=None, fill_value=None, keepdims=np._NoValue):"
  },
  {
    "id" : "b4b426ff-3db9-4217-b87a-a856857ff655",
    "prId" : 8678,
    "prUrl" : "https://github.com/numpy/numpy/pull/8678#pullrequestreview-23883223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f73cd0e-5c18-49ee-aadc-97f124894719",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "I don't really like these shortcuts very much, the explicit meshgrid is easier to read imo\r\nthere isn't really an advantage to using `ix_` is there?",
        "createdAt" : "2017-02-26T14:34:32Z",
        "updatedAt" : "2017-03-07T17:35:22Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "a747f5dc-647a-4068-98b8-edf73fd15b38",
        "parentId" : "2f73cd0e-5c18-49ee-aadc-97f124894719",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Is this really a shortcut though? The two functions are independant, with neither calling the other. Meshgrid doesn't do what we need by default, but `ix_` does.\r\n\r\nFurthermore, `ix_` is used as an indexer in its examples, whereas meshgrid is used to evaluate functions. The former use is what we want here.",
        "createdAt" : "2017-02-26T14:39:09Z",
        "updatedAt" : "2017-03-07T17:35:22Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee90efce354c8af73e17331d3977121d438bb294",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +5457,5461 @@            idx = sidx\n        else:\n            idx = list(np.ix_(*[np.arange(x) for x in self.shape]))\n            idx[axis] = sidx\n"
  },
  {
    "id" : "6b26dba2-2ed6-4b01-a832-5f23f35deb55",
    "prId" : 8905,
    "prUrl" : "https://github.com/numpy/numpy/pull/8905#pullrequestreview-33564554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6330567-12ff-475b-9065-dac234c00cd7",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "#5962. This `elif` could be removed to fix #8906, but that might have backwards-compatibility implications",
        "createdAt" : "2017-04-19T10:16:53Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "653af81e-515c-42d0-86ee-ce603d193dd8",
        "parentId" : "c6330567-12ff-475b-9065-dac234c00cd7",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "So, the test failure can be avoided by having here\r\n```\r\nelif self.dtype.type is np.object_ and dout is not masked and isinstance(dout, np.ndarray):\r\n```\r\n\r\n(And, yes, having a different `.data` property is more than a little annoying. But it probably was a logical choice for the original `Column` class, and then what do you do for `MaskedColumn`...)",
        "createdAt" : "2017-04-19T16:49:47Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "f0db9907-50e4-4b49-b4db-65fe8f9b26ac",
        "parentId" : "c6330567-12ff-475b-9065-dac234c00cd7",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Overall, this is probably yet another argument to not have a special case for object arrays holding `ndarray` and just return `masked`...\r\n\r\nDo note, that #5962 didn't quite introduce this -- it just ensured that the pre-existing behaviour continued...",
        "createdAt" : "2017-04-19T16:52:05Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "081cf161-27a8-4eda-a65a-f058777bd21b",
        "parentId" : "c6330567-12ff-475b-9065-dac234c00cd7",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I still don't see where the `MaskedConstant` is being `__new__`'d from, causing the problem you described below",
        "createdAt" : "2017-04-19T16:54:27Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "64bc5b3f-5673-434d-b41d-6681e072a0dc",
        "parentId" : "c6330567-12ff-475b-9065-dac234c00cd7",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Oh wait, yes I do - this is #8679 rearing its head. `np.ma.array(np.ma.masked, copy=False)` creates a new `masked` constant!",
        "createdAt" : "2017-04-19T16:56:54Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d2d6424d-692d-453f-9b60-5dd839ba7ff9",
        "parentId" : "c6330567-12ff-475b-9065-dac234c00cd7",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Ah, yes, that closes the loop...",
        "createdAt" : "2017-04-19T17:10:18Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "ed2df428-f9f2-4e61-bd15-5e9c0773826a",
        "parentId" : "c6330567-12ff-475b-9065-dac234c00cd7",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Added a commit to fix that - but I need your fix as well",
        "createdAt" : "2017-04-19T17:22:09Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "73c15f7b30658cbedc9c42e59b818b3d77dbc2c3",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +3245,3249 @@                return mvoid(dout, mask=mout, hardmask=self._hardmask)\n\n            # special case introduced in gh-5962\n            elif (self.dtype.type is np.object_ and\n                  isinstance(dout, np.ndarray) and"
  },
  {
    "id" : "e1736719-33cf-4a30-b51c-da45e4dedac7",
    "prId" : 8905,
    "prUrl" : "https://github.com/numpy/numpy/pull/8905#pullrequestreview-33581567",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6184d596-ca1d-4950-9cb8-de8bb20c0f6d",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "This PR breaks a test in astropy in a very strange way, in that what is returned here fails a test where `masked_column[0] is np.ma.masked` (even though both seem to be `masked`). I'm utterly confused and this may just be a build issue, but I don't get the same problem with current master.",
        "createdAt" : "2017-04-19T14:15:28Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "61fe5cd2-1a7a-422e-a03a-a71f607586ec",
        "parentId" : "6184d596-ca1d-4950-9cb8-de8bb20c0f6d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you construct a minimal example, or at least point me to that test?",
        "createdAt" : "2017-04-19T14:19:45Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "38fa95d0-0bd3-44ce-8abc-0a7d9504693b",
        "parentId" : "6184d596-ca1d-4950-9cb8-de8bb20c0f6d",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "@eric-wieser - it is this [test](https://github.com/astropy/astropy/blob/master/astropy/table/tests/test_row.py#L23)\r\nA more minimal example:\r\n```\r\nfrom astropy.table import MaskedColumn\r\nimport numpy as np\r\nma = MaskedColumn([1], dtype='O')\r\nma.mask = True\r\nma[0]\r\n# masked\r\nma[0] is np.ma.masked\r\n# False\r\ntype(ma[0]) is type(np.ma.masked)\r\n# True\r\n```\r\n\r\nSince we overwrite `__getitem__` with a CPython shim (for speed with `ndarray`, I also checked that:\r\n```\r\nnp.ma.MaskedArray.__getitem__(ma, 0) is np.ma.masked\r\n# False\r\n```\r\nBut it has something to do with our subclass:\r\n```\r\nnp.ma.MaskedArray.__getitem__(ma.view(np.ma.MaskedArray), 0) is np.ma.masked\r\n# True\r\n```",
        "createdAt" : "2017-04-19T16:17:57Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "0c6ac2f5-86ad-4306-bf8c-48e4088edc16",
        "parentId" : "6184d596-ca1d-4950-9cb8-de8bb20c0f6d",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "For completeness, I added just before this return in `core.py`:\r\n```\r\nprint(mout, dout, masked is np.ma.masked)\r\n```\r\nand the output always is `True 1 True`.",
        "createdAt" : "2017-04-19T16:20:15Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "98a20be9-fd96-4091-9213-188c814e8539",
        "parentId" : "6184d596-ca1d-4950-9cb8-de8bb20c0f6d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Presumably, `np.ma.MaskedArray.__getitem__(ma, 0)` still looks like `ma.masked`?",
        "createdAt" : "2017-04-19T16:24:21Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "febfd680-98bf-41bf-a71a-a9dc3f31c6dc",
        "parentId" : "6184d596-ca1d-4950-9cb8-de8bb20c0f6d",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Yes, it looks like it, but seems to be a different instance of the same thing.",
        "createdAt" : "2017-04-19T16:31:57Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "1b9f25ad-b250-4e05-83de-710ebf8c20ba",
        "parentId" : "6184d596-ca1d-4950-9cb8-de8bb20c0f6d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "What does `ma.data` contain? <s>Is `np.ma.core.masked is np.ma.masked` true?</s> edit: yes, you already told me that",
        "createdAt" : "2017-04-19T16:34:34Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "9e166d2c-863a-476a-b507-e7027d70fef1",
        "parentId" : "6184d596-ca1d-4950-9cb8-de8bb20c0f6d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "If you do it twice, does it return the same `ma.masked`ish thing, or different again?",
        "createdAt" : "2017-04-19T16:36:54Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "9bbfe5a1-cae4-41f4-b7fa-89d5ffc2fd34",
        "parentId" : "6184d596-ca1d-4950-9cb8-de8bb20c0f6d",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Sorry, this is very weird, while a print statement here prints stuff, the actual return is not here but from the `np.object_` statement above.",
        "createdAt" : "2017-04-19T16:41:33Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "fa4638f2-3805-4f15-9a47-ec6e986a8883",
        "parentId" : "6184d596-ca1d-4950-9cb8-de8bb20c0f6d",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Finally understand at least the sequence: for our `MaskedColumn` class, the `data` atttribute actually returns a `MaskedArray`, so in `__getitem__`, `dout` is `masked`",
        "createdAt" : "2017-04-19T16:44:48Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "ea4f8521-67a6-48a9-b5a5-6548b28d50b0",
        "parentId" : "6184d596-ca1d-4950-9cb8-de8bb20c0f6d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`dout is masked`, or `dout` looks like `masked` but upon closer inspection is not?",
        "createdAt" : "2017-04-19T16:51:10Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "080b084a-430a-4e87-85ca-da5faff0eb1f",
        "parentId" : "6184d596-ca1d-4950-9cb8-de8bb20c0f6d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Would using `_data` instead of `data` work, or would that break other bits of `MaskedColumn`?",
        "createdAt" : "2017-04-19T17:02:05Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "37d716a9-d6da-46ab-8d19-325900b770ee",
        "parentId" : "6184d596-ca1d-4950-9cb8-de8bb20c0f6d",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Yes, using `_data` would work -- that is not used in `MaskedColumn`. But it needs some thought whether that is the right approach, i.e., to what extent one *wants* subclasses to be able to override how `data` is interpreted. Though on the other hand arguably this is so integral to how `MaskedArray` works that it would be reasonable to use a private property, which indicates more clearly that \"if you override this, expect breakage\".",
        "createdAt" : "2017-04-19T17:36:26Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "d30c558b-f37f-4c3e-ba75-dd7bbb7227f7",
        "parentId" : "6184d596-ca1d-4950-9cb8-de8bb20c0f6d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Either way, I managed to reproduce this problem without touching the data attribute at all, so I'm inclined to leave it as is for now (see the added tests)",
        "createdAt" : "2017-04-19T17:44:37Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "97752db1-f76a-4215-919a-40a6faaa4665",
        "parentId" : "6184d596-ca1d-4950-9cb8-de8bb20c0f6d",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Agreed.",
        "createdAt" : "2017-04-19T18:26:02Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "73c15f7b30658cbedc9c42e59b818b3d77dbc2c3",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +3258,3262 @@            else:\n                if mout:\n                    return masked\n                else:\n                    return dout"
  },
  {
    "id" : "2ff73ab7-54d8-4cdf-97c9-2d5a8db84d36",
    "prId" : 8905,
    "prUrl" : "https://github.com/numpy/numpy/pull/8905#pullrequestreview-33622221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5289da96-a77e-4b5f-9bb9-77d3285f3682",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "To me, it is not all that helpful to have these as helper functions, and I wonder a bit about the additional hit in performance.",
        "createdAt" : "2017-04-19T18:37:28Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "942ca353-d87e-4bc2-a204-9cb11f17984d",
        "parentId" : "5289da96-a77e-4b5f-9bb9-77d3285f3682",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think the other one has to be a helper function in order for the flow control to work. I made this one a helper function because we need it twice, and it makes the lower-down code generally nicer.\r\n\r\nI could move these to be free functions, if you think they'd be better outside the method",
        "createdAt" : "2017-04-19T20:22:28Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "910310da-acfd-46c5-9fa9-06928d70651a",
        "parentId" : "5289da96-a77e-4b5f-9bb9-77d3285f3682",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I'm heavily biased by having used in-method functions only in cases where I want access to some of the local variables; as this is not the case here, moving it outside might be better indeed. But this is not a strong preference, so don't worry about -- my main preference would be not to have them at all, but I can see that the code flow would be a bit odd (probably would need to start by assigning `scalar_expected = None`, and then at the end check whether it has change; not great either).",
        "createdAt" : "2017-04-19T20:50:36Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "bccfb93a-cb22-463c-a629-2083fa895715",
        "parentId" : "5289da96-a77e-4b5f-9bb9-77d3285f3682",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "The only concern with moving it outside, is that it becomes distant compared to the rest of the logic. On the other hand, there's a good chance there's a bug waiting in `__setitem__` that will need the same code",
        "createdAt" : "2017-04-19T20:55:21Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a2a78fb2-e75e-4173-a92d-28e937b737f6",
        "parentId" : "5289da96-a77e-4b5f-9bb9-77d3285f3682",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> in cases where I want access to some of the local variables\r\n\r\nNote that the original implementation did exactly that, but I realized it was pretty trivial to convert them into parameters, as there were only two",
        "createdAt" : "2017-04-19T20:56:01Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c341200d-2b4b-4d78-8fee-c7157dd109d0",
        "parentId" : "5289da96-a77e-4b5f-9bb9-77d3285f3682",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Maybe best to leave as is -- this is substantially clearer than it was!",
        "createdAt" : "2017-04-19T20:58:13Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "1ac091b9-614c-4e2f-b0d1-d78794d93d22",
        "parentId" : "5289da96-a77e-4b5f-9bb9-77d3285f3682",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Leaving it as is sounds good to me!\r\n\r\nI think I've addressed your other concerns too - and I reckon we leave any kind of rollback of #5962 to another PR, since it's not needed to fix the bug.",
        "createdAt" : "2017-04-19T21:17:29Z",
        "updatedAt" : "2017-04-19T22:07:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "73c15f7b30658cbedc9c42e59b818b3d77dbc2c3",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +3194,3198 @@        _mask = self._mask\n\n        def _is_scalar(m):\n            return not isinstance(m, np.ndarray)\n"
  },
  {
    "id" : "65595ebf-affa-4849-b19e-e5ea05f6a62d",
    "prId" : 8918,
    "prUrl" : "https://github.com/numpy/numpy/pull/8918#pullrequestreview-32532658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9549b519-9573-4750-ac16-38c39965d335",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This level needed to be `3`, not `2`, as it is not directly in the deprecated function",
        "createdAt" : "2017-04-13T01:54:50Z",
        "updatedAt" : "2017-05-05T21:27:56Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a8ee4c52f5cecae999904f98a8a30ef81d52f7c",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +118,122 @@            \"current None, to match its documentation and np.argsort. \"\n            \"Explicitly pass -1 or None to silence this warning.\",\n            MaskedArrayFutureWarning, stacklevel=3)\n        return None\n"
  },
  {
    "id" : "0d41190b-a095-45e4-a82c-9f99b74ab164",
    "prId" : 8918,
    "prUrl" : "https://github.com/numpy/numpy/pull/8918#pullrequestreview-32532849",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4322aecb-eb16-4fcd-a444-0e7dfb9720f3",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Doing the test here makes it more obvious that this only affects default arguments",
        "createdAt" : "2017-04-13T01:56:52Z",
        "updatedAt" : "2017-05-05T21:27:56Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a8ee4c52f5cecae999904f98a8a30ef81d52f7c",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +5378,5382 @@        # 2017-04-11, Numpy 1.13.0, gh-8701: warn on axis default\n        if axis is np._NoValue:\n            axis = _deprecate_argsort_axis(self)\n\n        if fill_value is None:"
  },
  {
    "id" : "8e23e1af-1c44-49b2-b160-ee1c96260a99",
    "prId" : 8918,
    "prUrl" : "https://github.com/numpy/numpy/pull/8918#pullrequestreview-32594876",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "961a54d2-806c-437a-9313-c903a366d9a0",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Added the comment to the axis argument",
        "createdAt" : "2017-04-13T10:16:44Z",
        "updatedAt" : "2017-05-05T21:27:56Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a8ee4c52f5cecae999904f98a8a30ef81d52f7c",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +5331,5335 @@                originally intended.\n                Until then, the axis should be given explicitly when\n                ``arr.ndim > 1``, to avoid a FutureWarning.\n        kind : {'quicksort', 'mergesort', 'heapsort'}, optional\n            Sorting algorithm."
  },
  {
    "id" : "7a1582b7-4463-404f-8f71-ef9befcd7843",
    "prId" : 9302,
    "prUrl" : "https://github.com/numpy/numpy/pull/9302#pullrequestreview-46625804",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "544a7cb5-1055-4b3d-bef9-3825cd884338",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Just for comment: I think it's bad form to use `dtype.str` because it seems to be documented to relate to the PEP3118 interface, for use specifically in serialization operations. \r\n\r\nHowever, I accept that it is used this way in other places in numpy and that this is a pre-existing line which is hard to change, so I'm not asking you to change it.",
        "createdAt" : "2017-06-27T17:39:06Z",
        "updatedAt" : "2017-06-27T17:49:53Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "bd0723f2-b68e-4b69-8a0d-aa92e4e53c28",
        "parentId" : "544a7cb5-1055-4b3d-bef9-3825cd884338",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yeah, this strikes me as a bad idea as well. It seems like we should just be able to look up the dtype directly in the dictionary anyway.\r\n\r\nEither way, I'd like to leave that for a later PR, as like you say, it's a pre-existing line",
        "createdAt" : "2017-06-27T17:40:59Z",
        "updatedAt" : "2017-06-27T17:49:53Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "64b0e54ce6ebf6bb16b9305f4d7f22b943c26b84",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +278,282 @@    def _scalar_fill_value(dtype):\n        if dtype.kind in 'Mm':\n            return default_filler.get(dtype.str[1:], '?')\n        else:\n            return default_filler.get(dtype.kind, '?')"
  },
  {
    "id" : "a511f8cb-2f25-452b-8b52-0b048cff11ad",
    "prId" : 9302,
    "prUrl" : "https://github.com/numpy/numpy/pull/9302#pullrequestreview-46635232",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b036903-1b99-43c5-8dd6-16d951b6c697",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is a pretty weird overload, but we're stuck with it (as it was here before this patch). In particular, `default_fill_value('i')` and `default_fill_value(np.dtype('i'))` do not mean the same thing.\r\n\r\nThis PR changes the behaviour of `...([1, 2, 3])`, which previously used `np.object_`, but now builds the array and returns `np.int32`.",
        "createdAt" : "2017-06-27T17:53:06Z",
        "updatedAt" : "2017-06-27T17:53:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "82aeaaee-823d-4b2f-ae96-ac024e287aa5",
        "parentId" : "8b036903-1b99-43c5-8dd6-16d951b6c697",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Also, `default_fill_value(int)` does not work here for the same reason - so this only accepts `np.dtype` objects, which is not how most other functions accepting dtypes in numpy work. Again, unchanged by this PR",
        "createdAt" : "2017-06-27T18:13:42Z",
        "updatedAt" : "2017-06-27T18:13:54Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "64b0e54ce6ebf6bb16b9305f4d7f22b943c26b84",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +222,226 @@\ndef _get_dtype_of(obj):\n    \"\"\" Convert the argument for *_fill_value into a dtype \"\"\"\n    if isinstance(obj, np.dtype):\n        return obj"
  },
  {
    "id" : "7c72ac99-fc7c-4f26-8885-1ad06dcc13b4",
    "prId" : 9336,
    "prUrl" : "https://github.com/numpy/numpy/pull/9336#pullrequestreview-50624932",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "643d1bac-b749-47a5-97de-f9ee03e857f2",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So this is OK because the singleton can never be unmasked? Might be cleaner stylewise to just assign the function rather than have all the line continuations.",
        "createdAt" : "2017-07-18T12:56:20Z",
        "updatedAt" : "2017-09-13T08:03:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "8ed4890f-058a-4ff5-9110-92da3cf147d2",
        "parentId" : "643d1bac-b749-47a5-97de-f9ee03e857f2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Correct, if the singleton is unmasked there are much bigger problems.",
        "createdAt" : "2017-07-18T12:58:23Z",
        "updatedAt" : "2017-09-13T08:03:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "141acff7-bf14-4f27-a6f5-2ef5ecdd106a",
        "parentId" : "643d1bac-b749-47a5-97de-f9ee03e857f2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think I prefer the continuations, as they ensure that `__iop__` doesn't get mispelt as one of the other methods",
        "createdAt" : "2017-07-18T14:18:22Z",
        "updatedAt" : "2017-09-13T08:03:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4509fc5e46708e047fb8de98b6eb88d53a9bc74",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +6245,6249 @@    def __iop__(self, other):\n        return self\n    __iadd__ = \\\n    __isub__ = \\\n    __imul__ = \\"
  },
  {
    "id" : "58a5c8e1-81a0-4301-af56-8fe848f3d17d",
    "prId" : 9432,
    "prUrl" : "https://github.com/numpy/numpy/pull/9432#pullrequestreview-50475074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48b68e55-3388-4eeb-b4c2-2b54b799dbaa",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This was here twice!",
        "createdAt" : "2017-07-17T23:22:34Z",
        "updatedAt" : "2017-08-13T18:42:10Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "e1ccca947a297deb90301acc14b1e13e8dd0b816",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +5738,5742 @@    # Array methods\n    clip = _arraymethod('clip', onmask=False)\n    copy = _arraymethod('copy')\n    diagonal = _arraymethod('diagonal')\n    flatten = _arraymethod('flatten')"
  },
  {
    "id" : "7348e102-cca7-4815-8543-b9564ee06388",
    "prId" : 9457,
    "prUrl" : "https://github.com/numpy/numpy/pull/9457#pullrequestreview-51915555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0391f8de-cfcc-4a0a-8a85-8edcdac7723e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "No idea why this isn't `__repr__`, but this at least maintains the old behaviour",
        "createdAt" : "2017-07-24T22:24:05Z",
        "updatedAt" : "2017-07-24T22:24:05Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a12c0cc88eada544eb98620dfc87c29e4f981526",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +888,892 @@\n    def __str__(self):\n        return \"Masked version of {}\".format(self.f)\n\n"
  },
  {
    "id" : "3948fcbd-00e5-484e-9482-68c2889b45ae",
    "prId" : 9768,
    "prUrl" : "https://github.com/numpy/numpy/pull/9768#pullrequestreview-65341749",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a40348b6-bff1-4cce-ba3d-4396e405e0d4",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "technically not necessary since this function is always called with names (or else the old code would fail). Fine to leave it.",
        "createdAt" : "2017-09-26T19:53:56Z",
        "updatedAt" : "2017-09-26T19:53:56Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "f6b1ddaf-12c5-4e96-a6b2-66a42db020a2",
        "parentId" : "a40348b6-bff1-4cce-ba3d-4396e405e0d4",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "OK, I get that this was intentional based on reorganization below.",
        "createdAt" : "2017-09-26T19:58:33Z",
        "updatedAt" : "2017-09-26T19:58:33Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "25c808cc2e359acf9688d33c24f4c6c51938356f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2419,2423 @@    \"\"\"\n    names = result.dtype.names\n    if names:\n        for name in names:\n            curdata = result[name]"
  },
  {
    "id" : "368e2b78-f849-49a8-b6aa-40cf0c13ac3e",
    "prId" : 9785,
    "prUrl" : "https://github.com/numpy/numpy/pull/9785#pullrequestreview-65781931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ebd7d1f-10fb-4db6-91c1-ed6f0425c58a",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "No idea why this is needed, but it was here before too, and changing that is out of scope for this fix...",
        "createdAt" : "2017-09-28T08:15:40Z",
        "updatedAt" : "2017-09-28T08:15:46Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd86461e045557d87a487d1edab9617f0ed4b58f",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +6667,6671 @@    # OK, so we have to concatenate the masks\n    dm = np.concatenate([getmaskarray(a) for a in arrays], axis)\n    dm = dm.reshape(d.shape)\n\n    # If we decide to keep a '_shrinkmask' option, we want to check that"
  },
  {
    "id" : "3a13cc2f-246b-40de-8448-843e56434bc4",
    "prId" : 9785,
    "prUrl" : "https://github.com/numpy/numpy/pull/9785#pullrequestreview-66006295",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4836ce4-0eb8-4c5c-be5a-6a0b81b3f46f",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "So this function is the only real changed behavior, all the other changes are a factorization.\r\n\r\nLGTM.",
        "createdAt" : "2017-09-28T21:32:52Z",
        "updatedAt" : "2017-09-28T21:32:52Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd86461e045557d87a487d1edab9617f0ed4b58f",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +1935,1939 @@    result = a.view(cls)\n    # Assign to *.mask so that structured masks are handled correctly.\n    result.mask = _shrink_mask(cond)\n    return result\n"
  },
  {
    "id" : "bfc1fd66-be4f-42b0-9d1a-b6d4af154fc9",
    "prId" : 9792,
    "prUrl" : "https://github.com/numpy/numpy/pull/9792#pullrequestreview-77684207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2dbf8e8-76a6-46a8-a452-84d3677ed9ce",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Plain ndarrays also have a special case for size-0, more than 1 dimension:\r\n```python\r\n>>> np.empty((0,1))\r\narray([], shape=(0, 1), dtype=float64)\r\n```\r\nBut I'm a bit ambivalent about that behavior since shape isn't a valid `array` keyword. But I don't have a better way of signalling that the shape is >1d.\r\n\r\nCompare to `np.ma.empty((0,1))`.",
        "createdAt" : "2017-11-19T16:48:20Z",
        "updatedAt" : "2017-11-20T09:03:04Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "145d97d0-b983-4803-bd3a-9c78ba5e6cf7",
        "parentId" : "c2dbf8e8-76a6-46a8-a452-84d3677ed9ce",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I just checked, that behavior goes back to [before numpy existed](https://github.com/numpy/numpy/commit/618a8d472a36506eb5848009f10585f7c63da799#diff-da963b1dd9ccb384fce15478f5b49764R150)!",
        "createdAt" : "2017-11-19T17:03:24Z",
        "updatedAt" : "2017-11-20T09:03:04Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "7dc5742d-d345-46e4-b159-040e87eb8752",
        "parentId" : "c2dbf8e8-76a6-46a8-a452-84d3677ed9ce",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "An idea: Maybe print `np.empty((0, 1))` as `empty((0, 1), dtype=float64)`?",
        "createdAt" : "2017-11-19T20:08:55Z",
        "updatedAt" : "2017-11-20T09:03:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "291d31a9-0c7f-421c-bff0-3ef73ec38aac",
        "parentId" : "c2dbf8e8-76a6-46a8-a452-84d3677ed9ce",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "That's pretty neat. I'm on board.\r\n\r\nI'll try it out as an extra commit in the newline PR.",
        "createdAt" : "2017-11-20T05:10:49Z",
        "updatedAt" : "2017-11-20T09:03:04Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "7c40715a-44f1-4c00-bda1-aa22c402f6ee",
        "parentId" : "c2dbf8e8-76a6-46a8-a452-84d3677ed9ce",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Please don't - I want to get the newline PR in as is so that I can rebase this and `dtype_short_repr`",
        "createdAt" : "2017-11-20T05:11:36Z",
        "updatedAt" : "2017-11-20T09:03:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3e833201-40ec-4465-ae5e-2a887dec68a2",
        "parentId" : "c2dbf8e8-76a6-46a8-a452-84d3677ed9ce",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Or actually, we can try in a new PR to avoid cluttering things.",
        "createdAt" : "2017-11-20T05:18:29Z",
        "updatedAt" : "2017-11-20T09:03:04Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "8311d3d1-fda4-4746-9940-96dedbfb934b",
        "parentId" : "c2dbf8e8-76a6-46a8-a452-84d3677ed9ce",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Oh ok I didn't see your reply. Agreed.",
        "createdAt" : "2017-11-20T05:19:02Z",
        "updatedAt" : "2017-11-20T09:03:04Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "2627ae83-2fdd-4a4f-8c99-81e47c63f98b",
        "parentId" : "c2dbf8e8-76a6-46a8-a452-84d3677ed9ce",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "You can always create a new PR with common commits with the old PR - if you do that, and the old PR is merged, then you can avoid having to rebase by switching the \"base branch\" twice in the github UI.",
        "createdAt" : "2017-11-20T05:19:34Z",
        "updatedAt" : "2017-11-20T09:03:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "783c8f36-c51e-481a-b7e8-dfffa1b5de9e",
        "parentId" : "c2dbf8e8-76a6-46a8-a452-84d3677ed9ce",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I suspect that some rebasing will be needed anyway since you'll touch the typename code... we'll see.",
        "createdAt" : "2017-11-20T05:21:49Z",
        "updatedAt" : "2017-11-20T09:03:04Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bac6eed123c68560ffdb5d7f7093ad4015a9d85",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +3906,3910 @@            not np.core.arrayprint.dtype_is_implied(self.dtype) or\n            np.all(self.mask) or\n            self.size == 0\n        )\n"
  },
  {
    "id" : "161a3859-de65-4f02-8fb7-b4eb1bf2d80f",
    "prId" : 9817,
    "prUrl" : "https://github.com/numpy/numpy/pull/9817#pullrequestreview-66977959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "443fa1d8-3a12-4c3d-9f29-9b9e49f66050",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "The fix itself looks fine, by the way :)",
        "createdAt" : "2017-10-04T07:24:51Z",
        "updatedAt" : "2017-10-04T23:21:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa7b339d6172775db71834677d68ec89da1aaf4e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +4241,4245 @@        elif self._mask:\n            raise MaskError('Cannot convert masked element to a Python long.')\n        return long(self.item())\n      \n"
  }
]