[
  {
    "id" : "516dc714-a39d-4eae-997c-f7f70131b902",
    "prId" : 13780,
    "prUrl" : "https://github.com/numpy/numpy/pull/13780#pullrequestreview-250199845",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56b82274-dd10-48ed-9039-1c4fa254036e",
        "parentId" : null,
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "This is redundant with `common.int_to_array(n, 32)`",
        "createdAt" : "2019-06-14T15:10:35Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "dd3c9ba9-ad89-4f60-9bc4-36ab500bb201",
        "parentId" : "56b82274-dd10-48ed-9039-1c4fa254036e",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "`int_to_array(n, 32)` doesn't exist. `int_to_array(n, 'dummy_name', bits, 32)` does exist, but the `bits` shows the difference in functionality. This function takes an arbitrary-sized integer and returns a `uint32` array of the minimal size to represent it, not a fixed size. You could build this function with `int_to_array()` if one wished, but there isn't a pressing need to, in my mind.",
        "createdAt" : "2019-06-14T19:20:12Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      },
      {
        "id" : "6af5fe8b-4fc1-459d-ac7c-3a1743f76c26",
        "parentId" : "56b82274-dd10-48ed-9039-1c4fa254036e",
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "Thanks, I see the difference. ",
        "createdAt" : "2019-06-15T16:57:03Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a0c54ac0442dd1bf7d60f3ea5e2c578ae71959f",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +74,78 @@cdef uint32_t MASK32 = 0xFFFFFFFF\n\ndef _int_to_uint32_array(n):\n    arr = []\n    if n < 0:"
  },
  {
    "id" : "43377c7d-ccb3-462e-91fb-85b975a284e1",
    "prId" : 13780,
    "prUrl" : "https://github.com/numpy/numpy/pull/13780#pullrequestreview-249961427",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e469b089-6f02-415e-a1ce-02092f732e36",
        "parentId" : null,
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "Can you use an ABC in cython?",
        "createdAt" : "2019-06-14T15:11:44Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "ab0ff63d-b87a-44a0-91fb-49d494080cc3",
        "parentId" : "e469b089-6f02-415e-a1ce-02092f732e36",
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "Probably a bad idea.",
        "createdAt" : "2019-06-14T15:12:06Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a0c54ac0442dd1bf7d60f3ea5e2c578ae71959f",
    "line" : 468,
    "diffHunk" : "@@ -1,1 +466,470 @@\n\ncdef class BitGenerator():\n    \"\"\"\n    BitGenerator(seed_seq=None)"
  },
  {
    "id" : "dff9cea7-354b-4444-87e5-c27ebab7b6d9",
    "prId" : 13780,
    "prUrl" : "https://github.com/numpy/numpy/pull/13780#pullrequestreview-250200229",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09f6d280-37f8-4968-9095-53e790258947",
        "parentId" : null,
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "This is the output from a MT, so probably not a good idea. ",
        "createdAt" : "2019-06-14T15:57:23Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "cd499a37-1539-4201-a6b5-589915348aad",
        "parentId" : "09f6d280-37f8-4968-9095-53e790258947",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "`SystemRandom` gets its bits from `os.urandom()`, not MT.",
        "createdAt" : "2019-06-14T18:52:21Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      },
      {
        "id" : "c0fcb36d-b247-4aa9-a646-e95d0c7f9865",
        "parentId" : "09f6d280-37f8-4968-9095-53e790258947",
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "Ah.  I was looking at the getrandbit, not SystemRandom.getrandbits.",
        "createdAt" : "2019-06-15T17:09:07Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a0c54ac0442dd1bf7d60f3ea5e2c578ae71959f",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +42,46 @@    # secrets unavailable on python 3.5 and before\n    from random import SystemRandom\n    randbits = SystemRandom().getrandbits\n\ntry:"
  },
  {
    "id" : "9342628a-fa30-4229-87d8-246ae3dd6726",
    "prId" : 13780,
    "prUrl" : "https://github.com/numpy/numpy/pull/13780#pullrequestreview-250215241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47c7dbb5-e405-48c2-9bd6-8a0f624ad4b0",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "`self.n_children_spawned` needs to be incremented.",
        "createdAt" : "2019-06-16T04:32:14Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "6fed2249-e573-4492-937e-02d4e3ec09a7",
        "parentId" : "47c7dbb5-e405-48c2-9bd6-8a0f624ad4b0",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "good catch, fixing",
        "createdAt" : "2019-06-16T04:36:16Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a0c54ac0442dd1bf7d60f3ea5e2c578ae71959f",
    "line" : 462,
    "diffHunk" : "@@ -1,1 +460,464 @@            ))\n        self.n_children_spawned += n_children\n        return seqs\n\n"
  },
  {
    "id" : "5cc936f4-507a-494e-8494-f5f1a26e319b",
    "prId" : 13780,
    "prUrl" : "https://github.com/numpy/numpy/pull/13780#pullrequestreview-252475550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed57c92d-d4df-40a2-97f9-2755b4b7ea93",
        "parentId" : null,
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "Are there any advantages to supporting `'0x123456789ABCDEF123456789ABCDEF'` instead of `0x123456789ABCDEF123456789ABCDEF`, which is fine in Python 3.",
        "createdAt" : "2019-06-19T22:39:16Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "368bbcf5-c548-48b9-9409-6988160bb526",
        "parentId" : "ed57c92d-d4df-40a2-97f9-2755b4b7ea93",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "To more easily handle text inputs from command line arguments/configuration files and such. It's not hugely important, however.",
        "createdAt" : "2019-06-19T23:14:55Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      },
      {
        "id" : "babe7915-1816-48a7-9561-ebc9586e6778",
        "parentId" : "ed57c92d-d4df-40a2-97f9-2755b4b7ea93",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "we support both `str` and `int`. Is there action needed here?",
        "createdAt" : "2019-06-20T18:59:37Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a0c54ac0442dd1bf7d60f3ea5e2c578ae71959f",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +141,145 @@    elif isinstance(x, str):\n        if x.startswith('0x'):\n            x = int(x, base=16)\n        elif DECIMAL_RE.match(x):\n            x = int(x)"
  },
  {
    "id" : "6c849f1b-7140-4244-b347-21b040ed8619",
    "prId" : 13780,
    "prUrl" : "https://github.com/numpy/numpy/pull/13780#pullrequestreview-252319969",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8795982-7774-45f0-9d42-bb5d0ec54aa5",
        "parentId" : null,
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "Missing pool_size doc string.  I think elements should not be separated by blank lines.",
        "createdAt" : "2019-06-19T22:42:41Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "ad774a8f-aba3-4951-9775-ed5d43866a54",
        "parentId" : "e8795982-7774-45f0-9d42-bb5d0ec54aa5",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "add docstring and removed blank lines",
        "createdAt" : "2019-06-20T14:18:45Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a0c54ac0442dd1bf7d60f3ea5e2c578ae71959f",
    "line" : 294,
    "diffHunk" : "@@ -1,1 +292,296 @@    True\n    \"\"\"\n\n    def __init__(self, entropy=None, *, spawn_key=(),\n                 pool_size=DEFAULT_POOL_SIZE, n_children_spawned=0):"
  },
  {
    "id" : "16886094-7700-4d92-bbc4-69637ad0a0b4",
    "prId" : 13780,
    "prUrl" : "https://github.com/numpy/numpy/pull/13780#pullrequestreview-252319360",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af61082f-e760-462d-980c-bbf218a7aa51",
        "parentId" : null,
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "Typed?  Probably not performance sensitive.",
        "createdAt" : "2019-06-19T22:47:31Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "0b3cf1cd-268d-4feb-977d-69b86e409230",
        "parentId" : "af61082f-e760-462d-980c-bbf218a7aa51",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Looking at the C code, Cython handles this for us: `i_src` is a `size_t`\r\n\r\nEdit: i -> i_src",
        "createdAt" : "2019-06-20T14:17:47Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a0c54ac0442dd1bf7d60f3ea5e2c578ae71959f",
    "line" : 360,
    "diffHunk" : "@@ -1,1 +358,362 @@\n        # Mix all bits together so late bits can affect earlier bits.\n        for i_src in range(len(mixer)):\n            for i_dst in range(len(mixer)):\n                if i_src != i_dst:"
  },
  {
    "id" : "386e9cda-53ff-430c-8d6c-bb6b9a64189b",
    "prId" : 13780,
    "prUrl" : "https://github.com/numpy/numpy/pull/13780#pullrequestreview-252319302",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed1e490e-e8a3-4de4-96c5-bb87183eaa1e",
        "parentId" : null,
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "Should i be typed?",
        "createdAt" : "2019-06-19T22:47:34Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "f4e0f6fc-ab05-49d7-920d-2d6f4c70507d",
        "parentId" : "ed1e490e-e8a3-4de4-96c5-bb87183eaa1e",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Looking at the C code, Cython handles this for us: `i` is a `size_t`",
        "createdAt" : "2019-06-20T14:17:41Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a0c54ac0442dd1bf7d60f3ea5e2c578ae71959f",
    "line" : 351,
    "diffHunk" : "@@ -1,1 +349,353 @@\n        # Add in the entropy up to the pool size.\n        for i in range(len(mixer)):\n            if i < len(entropy_array):\n                mixer[i] = hashmix(entropy_array[i], hash_const)"
  },
  {
    "id" : "5a2002f2-c1a6-44f4-ac44-96b987a68703",
    "prId" : 13780,
    "prUrl" : "https://github.com/numpy/numpy/pull/13780#pullrequestreview-252321535",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eeb64221-5e3b-4516-8ab2-188cfc695900",
        "parentId" : null,
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "Blank line.",
        "createdAt" : "2019-06-19T22:48:29Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "06c86caf-693f-4ff2-afbd-d3ca6ff5b907",
        "parentId" : "eeb64221-5e3b-4516-8ab2-188cfc695900",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "added",
        "createdAt" : "2019-06-20T14:21:09Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a0c54ac0442dd1bf7d60f3ea5e2c578ae71959f",
    "line" : 449,
    "diffHunk" : "@@ -1,1 +447,451 @@        n_children : int\n\n        Returns\n        -------\n        seqs : list of `SeedSequence` s"
  },
  {
    "id" : "d5265da1-9cfe-41ce-b141-59302a7ebce4",
    "prId" : 13780,
    "prUrl" : "https://github.com/numpy/numpy/pull/13780#pullrequestreview-252246755",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70e7f6f9-8c10-4a9c-849c-bbc20a1a3d02",
        "parentId" : null,
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "If you want to stop instantizations, you could add\r\n\r\n```\r\nif type(self) is BitGenerator:\r\n    raise NotImplementedError('BitGenerator if a base class and cannot be instantized')\r\n```\r\n\r\n",
        "createdAt" : "2019-06-19T22:52:12Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "84f12df2-08bf-427f-8015-70be66b7015e",
        "parentId" : "70e7f6f9-8c10-4a9c-849c-bbc20a1a3d02",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "adopted",
        "createdAt" : "2019-06-20T12:01:43Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a0c54ac0442dd1bf7d60f3ea5e2c578ae71959f",
    "line" : 508,
    "diffHunk" : "@@ -1,1 +506,510 @@        if not isinstance(seed_seq, ISeedSequence):\n            seed_seq = SeedSequence(seed_seq)\n        self._seed_seq = seed_seq\n\n    # Pickling support:"
  },
  {
    "id" : "642a2704-3973-4359-b9cf-436dc2d46ba7",
    "prId" : 13780,
    "prUrl" : "https://github.com/numpy/numpy/pull/13780#pullrequestreview-252483736",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2911856b-36f7-4d87-8d95-0cf3e5012f91",
        "parentId" : null,
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "While a repr is useful for humans, it would also be useful to know to how recreate the precise node in a SeedSequence programmatically, which would require something like `state`  from a `BitGenerator`. Essentially repr for machines (returning a dict?)\r\n ",
        "createdAt" : "2019-06-20T09:13:47Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "4ca9d909-2d68-438f-b239-e1e1b9b750d3",
        "parentId" : "2911856b-36f7-4d87-8d95-0cf3e5012f91",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "added `state` property and test that it can be used `SeedSequence(**s.state)`",
        "createdAt" : "2019-06-20T15:09:00Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "71d9a4f3-6b98-4a8f-b4ec-c3e97dc635b5",
        "parentId" : "2911856b-36f7-4d87-8d95-0cf3e5012f91",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "`n_children_spawned` is also required.",
        "createdAt" : "2019-06-20T19:16:13Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a0c54ac0442dd1bf7d60f3ea5e2c578ae71959f",
    "line" : 314,
    "diffHunk" : "@@ -1,1 +312,316 @@        self.mix_entropy(self.pool, self.get_assembled_entropy())\n\n    def __repr__(self):\n        lines = [\n            f'{type(self).__name__}(',"
  },
  {
    "id" : "3bc81aef-6614-459a-a9a7-6e35744ec560",
    "prId" : 13780,
    "prUrl" : "https://github.com/numpy/numpy/pull/13780#pullrequestreview-252504455",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c332a0b8-30be-4142-8450-fff566bd152f",
        "parentId" : null,
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "Does SeedSequence need any customized support for pickling?  ",
        "createdAt" : "2019-06-20T12:02:21Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "a1055d3e-4d30-4862-919a-622a941cdae3",
        "parentId" : "c332a0b8-30be-4142-8450-fff566bd152f",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "Well, it's a requirement that it be pickleable, of course. I don't know if Cython is providing that out-of-box correctly. Should be tested, of course.",
        "createdAt" : "2019-06-20T17:11:07Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      },
      {
        "id" : "02f343dc-ff5c-499d-b001-8287df416d4e",
        "parentId" : "c332a0b8-30be-4142-8450-fff566bd152f",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Nope, it just works:\r\n```\r\n>>> ss = np.random.SeedSequence(entropy=range(10), \r\n...        program_entropy=range(20), spawn_key=(2,), pool_size=10)\r\n>>> aa = pickle.loads(pickle.dumps(ss))\r\n>>> aa.state\r\n{'entropy': range(0, 10), 'program_entropy': range(0, 20),\r\n   'spawn_key': (2,), 'pool_size': 10}\r\n>>> aa.state == ss.state\r\nTrue\r\n```",
        "createdAt" : "2019-06-20T18:58:05Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "4a2664a5-12c5-4ac2-8db7-3d766bfbe206",
        "parentId" : "c332a0b8-30be-4142-8450-fff566bd152f",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "test added",
        "createdAt" : "2019-06-20T20:04:03Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a0c54ac0442dd1bf7d60f3ea5e2c578ae71959f",
    "line" : 251,
    "diffHunk" : "@@ -1,1 +249,253 @@\n\ncdef class SeedSequence():\n    \"\"\"\n    SeedSequence(entropy=None, *, spawn_key=(), pool_size=4)"
  },
  {
    "id" : "b604bbf1-d574-4afb-9c1b-558fa4726368",
    "prId" : 13780,
    "prUrl" : "https://github.com/numpy/numpy/pull/13780#pullrequestreview-253187775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd4168a8-d356-45d1-8da7-9e6cb821da8a",
        "parentId" : null,
        "authorId" : "ed5564b3-30de-4cde-83d3-042942f7203d",
        "body" : "O’Neil’s documentation in the original gist says that you get the best behavior from this algorithm if the number of seed words is at least the pool size. Is this worth documenting? Because of the `_coerce_to_uint32_array` function, users can just consider pick seeds as `int`s larger than `2**(8*pool_size)`, I think. ",
        "createdAt" : "2019-06-22T13:41:15Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "ed5564b3-30de-4cde-83d3-042942f7203d",
        "tags" : [
        ]
      },
      {
        "id" : "d73dfc06-6adc-41cf-b23e-2b1b6ea3b5a6",
        "parentId" : "fd4168a8-d356-45d1-8da7-9e6cb821da8a",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "I thought the point of SeedSequence is that `mix_entropy` mixes things up enough that even small integer seeds will now be \"well behaved\".",
        "createdAt" : "2019-06-23T20:57:58Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "35a540c8-63aa-4b89-8443-b20336019d02",
        "parentId" : "fd4168a8-d356-45d1-8da7-9e6cb821da8a",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I am still struggling with the whole \"picking a good entropy\". I would love to nudge users to good habits, and if just with documentation. E.g. saying: A good way to use as `entropy` is to use what `np.random.print_entropy()` prints out. The name `entropy` itself is a step up from `seed` though...",
        "createdAt" : "2019-06-23T21:15:40Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "7cffdece-92a5-4eab-9d00-00913bd61f07",
        "parentId" : "fd4168a8-d356-45d1-8da7-9e6cb821da8a",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "There are multiple ways that small seeds can have bad effects. `SeedSequence` takes care of most of the ones that naive seeding might generate (e.g. mostly avoiding zero-land states from those PRNGs that are affected by that problem). But some are just intrinsic to small seeds. There are some possible initializations that you just won't be able to reach, and that can cause some biases over the ensemble of small-seed runs.\r\n\r\nFor many cases, that doesn't matter. If you just want to hold things in place while you debug something, biases aren't a concern.\r\n\r\nFor actual simulations whose results you care about, my recommendation is to let `SeedSequence(None)` do its thing and then log/print the `.entropy` that it sampled to initialize itself. That will be of a matching size to the pool. My advice if one wants to pick a seed \"manually\" \"offline\" is just to do `secrets.getrandbits(128)` (anyone mucking around with adjusting `pool_size` already knows what adjustment to make to that). ",
        "createdAt" : "2019-06-23T21:25:55Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      },
      {
        "id" : "c6eea605-50d3-4b96-bb4f-41fbc7c00ec8",
        "parentId" : "fd4168a8-d356-45d1-8da7-9e6cb821da8a",
        "authorId" : "ed5564b3-30de-4cde-83d3-042942f7203d",
        "body" : "Maybe a brief version of the second and third paragraphs of https://github.com/numpy/numpy/pull/13780#discussion_r296498703 could go in the documentation for the `numpy.random` module. It would succinctly answer the question most users will have: How do I pick a seed?",
        "createdAt" : "2019-06-23T21:32:06Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "ed5564b3-30de-4cde-83d3-042942f7203d",
        "tags" : [
        ]
      },
      {
        "id" : "1826d721-a938-4a73-a31b-9373cc08cba3",
        "parentId" : "fd4168a8-d356-45d1-8da7-9e6cb821da8a",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "expanded rationale and example use in 3b0cd7015\r\n\r\n",
        "createdAt" : "2019-06-24T03:35:47Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a0c54ac0442dd1bf7d60f3ea5e2c578ae71959f",
    "line" : 267,
    "diffHunk" : "@@ -1,1 +265,269 @@    ----------\n    entropy : {None, int, sequence[int]}, optional\n        The entropy for creating a `SeedSequence`.\n    spawn_key : {(), sequence[int]}, optional\n        A third source of entropy, used internally when calling"
  },
  {
    "id" : "6ed79d89-3cf8-4c69-bce2-eec8c8582c65",
    "prId" : 13780,
    "prUrl" : "https://github.com/numpy/numpy/pull/13780#pullrequestreview-254311421",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54a55b69-50c1-4535-82c7-3b14c901ef1c",
        "parentId" : null,
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "Does this need an Attributes section for `program_entropy` and `pool`? If these are private should they be _ed?\r\n",
        "createdAt" : "2019-06-25T23:19:49Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a0c54ac0442dd1bf7d60f3ea5e2c578ae71959f",
    "line" : 279,
    "diffHunk" : "@@ -1,1 +277,281 @@        The number of children already spawned. Only pass this if\n        reconstructing a `SeedSequence` from a serialized form.\n\n    Notes\n    -----"
  },
  {
    "id" : "dda775b1-c174-4378-a933-7cfbd4b393c0",
    "prId" : 14303,
    "prUrl" : "https://github.com/numpy/numpy/pull/14303#pullrequestreview-277318308",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c19aee59-11c3-4478-b889-adb4e8f70a05",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Why is this needed? The line above should make the old code work ...",
        "createdAt" : "2019-08-20T13:52:39Z",
        "updatedAt" : "2019-08-20T13:52:39Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "320f835f-514d-44b7-9740-73fd2508fa36",
        "parentId" : "c19aee59-11c3-4478-b889-adb4e8f70a05",
        "authorId" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "body" : "> Why is this needed?\r\n\r\nI'm not sure which part of the change \"this\" refers to.  The import statement is needed so we can use `_coerce_to_uint32_array` without giving the fully qualified name.  The change from `np` to `numpy` is needed because a Python variable can't be used as part of the module in an import statement.",
        "createdAt" : "2019-08-20T14:09:56Z",
        "updatedAt" : "2019-08-20T14:09:57Z",
        "lastEditedBy" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "tags" : [
        ]
      },
      {
        "id" : "9b498b41-f7af-4069-83b6-887f5d3da353",
        "parentId" : "c19aee59-11c3-4478-b889-adb4e8f70a05",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I don't think the `import numpy as np` is needed for examples, but that is extraneous to this PR.",
        "createdAt" : "2019-08-20T17:18:39Z",
        "updatedAt" : "2019-08-20T17:18:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "62b239a00b94a6dbcddafbd05d4169ccc0611a24",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +117,121 @@    --------\n    >>> import numpy as np\n    >>> from numpy.random.bit_generator import _coerce_to_uint32_array\n    >>> _coerce_to_uint32_array(12345)\n    array([12345], dtype=uint32)"
  }
]