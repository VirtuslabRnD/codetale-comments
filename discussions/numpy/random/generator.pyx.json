[
  {
    "id" : "a9ab9642-6da2-4f94-a0f4-e0fcc976a8f5",
    "prId" : 13163,
    "prUrl" : "https://github.com/numpy/numpy/pull/13163#pullrequestreview-248548570",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a96b3682-e838-4164-9819-37c3214e95b6",
        "parentId" : null,
        "authorId" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "body" : "Why is the actual output not shown here?  Is it because the indeterminate value causes problems with doctests?",
        "createdAt" : "2019-06-12T05:10:33Z",
        "updatedAt" : "2019-06-12T05:10:33Z",
        "lastEditedBy" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "tags" : [
        ]
      }
    ],
    "commit" : "70d6293bf8ae48e68844d34def56e9fb59027433",
    "line" : 3169,
    "diffHunk" : "@@ -1,1 +3167,3171 @@        >>> s = np.random.Generator().hypergeometric(15, 15, 15, 100000)\n        >>> sum(s>=12)/100000. + sum(s<=3)/100000.\n        #   answer = 0.003 ... pretty unlikely!\n\n        \"\"\""
  },
  {
    "id" : "f6607b61-6c70-4a19-97b8-e3efeab75cae",
    "prId" : 13761,
    "prUrl" : "https://github.com/numpy/numpy/pull/13761#pullrequestreview-250069151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "633b280b-2bd0-4b41-a7ff-af3da3edf903",
        "parentId" : null,
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "Is there a reparameterization that can be suggested for larger values?  I woud presum that as long ngood/ntotal and nbad/ntotal are both moderaely far from 0, when ntotal is large than a N(nsample*p, nsample*p*(1-p))*(ntotal-nsample)/(ntotal-1)) is a good approx.  \r\n\r\nNot sure this is worth it.",
        "createdAt" : "2019-06-14T15:30:43Z",
        "updatedAt" : "2019-06-14T20:14:47Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "f1ecc2ab-93c4-4df6-a33e-9c716f758a72",
        "parentId" : "633b280b-2bd0-4b41-a7ff-af3da3edf903",
        "authorId" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "body" : "I don't think it is worthwhile to do this now.   Let's wait for someone with a legitimate need for such an enhancement before spending time implementing it.",
        "createdAt" : "2019-06-14T16:20:18Z",
        "updatedAt" : "2019-06-14T20:14:47Z",
        "lastEditedBy" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "tags" : [
        ]
      },
      {
        "id" : "4b28d212-7c18-4feb-8fa8-37e79152301f",
        "parentId" : "633b280b-2bd0-4b41-a7ff-af3da3edf903",
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "Yes. I wasn't actually suggesting code to do this -- rather telling users to use a normal approximation if they really want to sample in this region. \r\n\r\nThis is a very minor point, and probably not worth making. \r\n\r\nA related pioint is that the strict check against HYPERGEOM_MAX should be written into the doc string for ngood and nbad as requirements, .e.g, ngood must be less than 1e9.",
        "createdAt" : "2019-06-14T17:13:06Z",
        "updatedAt" : "2019-06-14T20:14:47Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "b199f6e5-0914-40e1-815c-0224fde8e66c",
        "parentId" : "633b280b-2bd0-4b41-a7ff-af3da3edf903",
        "authorId" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "body" : "The requirement that the arguments be less then `10**9` is well-hidden at the end of the Notes section. ðŸ˜„   I'll add that requirement to the description of the parameters in the Parameters section. ",
        "createdAt" : "2019-06-14T17:25:20Z",
        "updatedAt" : "2019-06-14T20:14:47Z",
        "lastEditedBy" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "tags" : [
        ]
      },
      {
        "id" : "8e32c50f-8d9c-4a02-b164-76bb503af103",
        "parentId" : "633b280b-2bd0-4b41-a7ff-af3da3edf903",
        "authorId" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "body" : "> ... telling users to use a normal approximation if they really want to sample in this region.\r\n\r\nThe binomial distribution is probably a simpler approximation in this case.  I'll add a note suggesting `binomial(n=nsample, p=ngood/(ngood + nbad))` as an alternative.",
        "createdAt" : "2019-06-14T18:52:40Z",
        "updatedAt" : "2019-06-14T20:14:47Z",
        "lastEditedBy" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2d2b677c26c8da7052bbc653b20ad9717f078fe",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +3145,3149 @@        becomes large, this distribution approaches the binomial.\n\n        The arguments `ngood` and `nbad` each must be less than `10**9`. For\n        extremely large arguments, the algorithm that is used to compute the\n        samples [4]_ breaks down because of loss of precision in floating point"
  },
  {
    "id" : "75ee4b44-40a8-4fa7-b77e-0367e5d8ca83",
    "prId" : 13812,
    "prUrl" : "https://github.com/numpy/numpy/pull/13812#pullrequestreview-260840107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f203487d-e34f-4fce-9254-2897e5ed5654",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Is there a reason not to reuse the existing `shuffle` or `_shuffle_raw` ?",
        "createdAt" : "2019-07-11T04:12:58Z",
        "updatedAt" : "2019-07-11T17:41:52Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "5c407017-36f8-4921-996b-570424c5512f",
        "parentId" : "f203487d-e34f-4fce-9254-2897e5ed5654",
        "authorId" : "687286db-0b77-4674-8126-7050bbcc81ed",
        "body" : "I've added _shuffle_int as a specialized version of _shuffle_raw because it's ~30% faster for integers.",
        "createdAt" : "2019-07-11T17:13:16Z",
        "updatedAt" : "2019-07-11T17:41:52Z",
        "lastEditedBy" : "687286db-0b77-4674-8126-7050bbcc81ed",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e44812c32b6702dc76411c94000bc4ff461890c",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +727,731 @@                                idx_data[j - pop_size_i + size_i] = j\n                        if shuffle:\n                            self._shuffle_int(size_i, 1, idx_data)\n                if shape is not None:\n                    idx.shape = shape"
  },
  {
    "id" : "9394da76-1714-4439-bce4-4140133331bc",
    "prId" : 13829,
    "prUrl" : "https://github.com/numpy/numpy/pull/13829#pullrequestreview-254139109",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7af473e-eefe-48eb-8a48-258190b3fe28",
        "parentId" : null,
        "authorId" : "ed5564b3-30de-4cde-83d3-042942f7203d",
        "body" : "Should there be some input validation in case `axis` is a slice or something weird?",
        "createdAt" : "2019-06-25T04:31:27Z",
        "updatedAt" : "2019-09-14T23:56:04Z",
        "lastEditedBy" : "ed5564b3-30de-4cde-83d3-042942f7203d",
        "tags" : [
        ]
      },
      {
        "id" : "7778bc19-856e-4691-8995-c197b88a0473",
        "parentId" : "e7af473e-eefe-48eb-8a48-258190b3fe28",
        "authorId" : "3fddad62-6c15-4b8b-9e0e-182f39fa3e96",
        "body" : "Thanks for your reply! I added codes for error handling and updated the documentation :)",
        "createdAt" : "2019-06-25T06:05:56Z",
        "updatedAt" : "2019-09-14T23:56:04Z",
        "lastEditedBy" : "3fddad62-6c15-4b8b-9e0e-182f39fa3e96",
        "tags" : [
        ]
      },
      {
        "id" : "dc7ff858-d88d-40fa-88c2-672d2b61a466",
        "parentId" : "e7af473e-eefe-48eb-8a48-258190b3fe28",
        "authorId" : "ed5564b3-30de-4cde-83d3-042942f7203d",
        "body" : "I think what you want is `numpy.core.mulitarray.normalize_axis_index`, documented here https://github.com/numpy/numpy/blob/5a08e209863038b411bc506893093c5a4b8377c9/numpy/add_newdocs.py#L6739",
        "createdAt" : "2019-06-25T12:26:44Z",
        "updatedAt" : "2019-09-14T23:56:04Z",
        "lastEditedBy" : "ed5564b3-30de-4cde-83d3-042942f7203d",
        "tags" : [
        ]
      },
      {
        "id" : "b9f0247b-5d85-4540-82f6-3bc26c73fb6a",
        "parentId" : "e7af473e-eefe-48eb-8a48-258190b3fe28",
        "authorId" : "3fddad62-6c15-4b8b-9e0e-182f39fa3e96",
        "body" : "I didn't know this function! Thanks! Updated it.",
        "createdAt" : "2019-06-25T16:14:48Z",
        "updatedAt" : "2019-09-14T23:56:04Z",
        "lastEditedBy" : "3fddad62-6c15-4b8b-9e0e-182f39fa3e96",
        "tags" : [
        ]
      },
      {
        "id" : "d1a29a6b-6dd7-41f4-8a72-a25954956db3",
        "parentId" : "e7af473e-eefe-48eb-8a48-258190b3fe28",
        "authorId" : "ed5564b3-30de-4cde-83d3-042942f7203d",
        "body" : "`normalize_axis_index` is all you need. You can remove the `isinstance` check and raising the error.\r\n\r\n```python console\r\n>>> import numpy\r\n>>> numpy.__version__\r\n'1.16.0'\r\n>>> numpy.core.multiarray.normalize_axis_index(slice(1, 4, 2), 3)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: an integer is required (got type slice)\r\n>>> numpy.core.multiarray.normalize_axis_index((slice(1, 4, 2),), 3)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: an integer is required (got type tuple)\r\n>>> numpy.core.multiarray.normalize_axis_index((1, 2, None), 3)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: an integer is required (got type tuple)\r\n>>> numpy.core.multiarray.normalize_axis_index(-1, 3)\r\n2\r\n>>> numpy.core.multiarray.normalize_axis_index(1, 3)\r\n1\r\n```",
        "createdAt" : "2019-06-25T16:49:26Z",
        "updatedAt" : "2019-09-14T23:56:04Z",
        "lastEditedBy" : "ed5564b3-30de-4cde-83d3-042942f7203d",
        "tags" : [
        ]
      },
      {
        "id" : "c281e379-22e2-4cde-b67a-f71d26ef48c6",
        "parentId" : "e7af473e-eefe-48eb-8a48-258190b3fe28",
        "authorId" : "3fddad62-6c15-4b8b-9e0e-182f39fa3e96",
        "body" : "I didn't remove `isinstance` because the input of `normalize_axis_index` is an `int`. But if it can also correctly raise the error, I can remove it.",
        "createdAt" : "2019-06-25T16:52:36Z",
        "updatedAt" : "2019-09-14T23:56:04Z",
        "lastEditedBy" : "3fddad62-6c15-4b8b-9e0e-182f39fa3e96",
        "tags" : [
        ]
      }
    ],
    "commit" : "c99a16677bf72073af52ac0e028bd0f1487cc338",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +3992,3996 @@\n        # Shuffle index array, dtype to ensure fast path\n        idx = np.arange(arr.shape[axis], dtype=np.intp)\n        self.shuffle(idx)\n        slices = [slice(None)]*arr.ndim"
  },
  {
    "id" : "b9c79e15-e8d5-410e-b9d7-66068c02414b",
    "prId" : 13829,
    "prUrl" : "https://github.com/numpy/numpy/pull/13829#pullrequestreview-288338001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40007d94-74a4-438d-92ac-abe4637a97bf",
        "parentId" : null,
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "This needs some thought.  Perpahs you should raise TypeError here since it isn't really possible to use axis with things that aren't ndarray or subclasses. \r\n\r\n",
        "createdAt" : "2019-06-27T10:36:35Z",
        "updatedAt" : "2019-09-14T23:56:04Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "da255ffa-9819-4f0d-b3cf-274c71ae065c",
        "parentId" : "40007d94-74a4-438d-92ac-abe4637a97bf",
        "authorId" : "ed5564b3-30de-4cde-83d3-042942f7203d",
        "body" : "Maybe there should also be a `numpy.AxisError` in the \"fast path\" above if `axis` is neither 0 nor -1.",
        "createdAt" : "2019-06-27T12:26:16Z",
        "updatedAt" : "2019-09-14T23:56:04Z",
        "lastEditedBy" : "ed5564b3-30de-4cde-83d3-042942f7203d",
        "tags" : [
        ]
      },
      {
        "id" : "4a7b1d75-a55d-4072-9512-1f2d4eec11a1",
        "parentId" : "40007d94-74a4-438d-92ac-abe4637a97bf",
        "authorId" : "3fddad62-6c15-4b8b-9e0e-182f39fa3e96",
        "body" : "@bashtage Do you mean raising `TypeError` for `# Untyped path`? Because `x` has already been confirmed as a `ndarray` in the other two cases. ",
        "createdAt" : "2019-06-27T19:34:33Z",
        "updatedAt" : "2019-09-14T23:56:04Z",
        "lastEditedBy" : "3fddad62-6c15-4b8b-9e0e-182f39fa3e96",
        "tags" : [
        ]
      },
      {
        "id" : "267c74d1-af2d-42de-93dc-e0f7377a78ad",
        "parentId" : "40007d94-74a4-438d-92ac-abe4637a97bf",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This probably isn't going to handle array_likes well. Perhaps we should use something like:\r\n```\r\naxis = normalize_axis_index(axis, np.ndim(x))\r\nif axis != 0:\r\n    # let swapaxes fail only if its needed\r\n    x = np.swapaxes(x, 0, axis)\r\n```",
        "createdAt" : "2019-09-13T06:48:35Z",
        "updatedAt" : "2019-09-14T23:56:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "4940a154-446f-4a5d-8bbb-57369aaeffdf",
        "parentId" : "40007d94-74a4-438d-92ac-abe4637a97bf",
        "authorId" : "3fddad62-6c15-4b8b-9e0e-182f39fa3e96",
        "body" : "@eric-wieser In this case, we can make sure it is an `ndarray`, do we still need to check `if axis != 0`? I am just wondering when will it fail.",
        "createdAt" : "2019-09-13T16:48:29Z",
        "updatedAt" : "2019-09-14T23:56:04Z",
        "lastEditedBy" : "3fddad62-6c15-4b8b-9e0e-182f39fa3e96",
        "tags" : [
        ]
      },
      {
        "id" : "5ac5d608-f217-4b8a-8793-e6d194f5cff4",
        "parentId" : "40007d94-74a4-438d-92ac-abe4637a97bf",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "@kianasun: I am talking about the `# Untyped path` which this comment chain is in response to.",
        "createdAt" : "2019-09-13T16:56:33Z",
        "updatedAt" : "2019-09-14T23:56:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "64699303-ba14-4363-9c24-42bf65b661af",
        "parentId" : "40007d94-74a4-438d-92ac-abe4637a97bf",
        "authorId" : "3fddad62-6c15-4b8b-9e0e-182f39fa3e96",
        "body" : "@eric-wieser I see. I will add this for `Untyped path`",
        "createdAt" : "2019-09-13T17:02:29Z",
        "updatedAt" : "2019-09-14T23:56:04Z",
        "lastEditedBy" : "3fddad62-6c15-4b8b-9e0e-182f39fa3e96",
        "tags" : [
        ]
      },
      {
        "id" : "2ad286b1-aa9a-4be7-9a78-72105521ef11",
        "parentId" : "40007d94-74a4-438d-92ac-abe4637a97bf",
        "authorId" : "ed5564b3-30de-4cde-83d3-042942f7203d",
        "body" : "Should there be a test case with axis != 0 that hits the untyped path?",
        "createdAt" : "2019-09-14T17:42:17Z",
        "updatedAt" : "2019-09-14T23:56:04Z",
        "lastEditedBy" : "ed5564b3-30de-4cde-83d3-042942f7203d",
        "tags" : [
        ]
      },
      {
        "id" : "481bef51-1248-4d03-850b-f8341e2666df",
        "parentId" : "40007d94-74a4-438d-92ac-abe4637a97bf",
        "authorId" : "3fddad62-6c15-4b8b-9e0e-182f39fa3e96",
        "body" : "@wkschwartz I added one for `random.shuffle`.",
        "createdAt" : "2019-09-14T22:26:18Z",
        "updatedAt" : "2019-09-14T23:56:04Z",
        "lastEditedBy" : "3fddad62-6c15-4b8b-9e0e-182f39fa3e96",
        "tags" : [
        ]
      }
    ],
    "commit" : "c99a16677bf72073af52ac0e028bd0f1487cc338",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +3868,3872 @@                    x[i] = buf\n        else:\n            # Untyped path.\n            if axis != 0:\n                raise NotImplementedError(\"Axis argument is only supported \""
  },
  {
    "id" : "54b23c51-5a5a-47c5-a246-63f89f7a9ae4",
    "prId" : 13829,
    "prUrl" : "https://github.com/numpy/numpy/pull/13829#pullrequestreview-255142441",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b78b692-50a2-436e-b967-10ed3c8b756a",
        "parentId" : null,
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "Example below would also be a good idea. ",
        "createdAt" : "2019-06-27T10:37:47Z",
        "updatedAt" : "2019-09-14T23:56:04Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c99a16677bf72073af52ac0e028bd0f1487cc338",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +3943,3947 @@\n        Returns\n        -------\n        out : ndarray\n            Permuted sequence or array range."
  },
  {
    "id" : "a5730471-d3b5-4523-b760-9634cbcca37e",
    "prId" : 13829,
    "prUrl" : "https://github.com/numpy/numpy/pull/13829#pullrequestreview-288339818",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5488203-ee78-41d7-982a-c39e2af64935",
        "parentId" : null,
        "authorId" : "ed5564b3-30de-4cde-83d3-042942f7203d",
        "body" : "Should this be documented here and/or for permutation?",
        "createdAt" : "2019-09-14T23:18:14Z",
        "updatedAt" : "2019-09-14T23:56:04Z",
        "lastEditedBy" : "ed5564b3-30de-4cde-83d3-042942f7203d",
        "tags" : [
        ]
      },
      {
        "id" : "fb5431a7-4f77-458e-b451-9b68d27f8ac3",
        "parentId" : "c5488203-ee78-41d7-982a-c39e2af64935",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This doesn't apply to `permutation`, but would indeed be worth mentioning for `shuffle`",
        "createdAt" : "2019-09-14T23:42:48Z",
        "updatedAt" : "2019-09-14T23:56:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0c2a26b7-cd2c-40d2-a87c-e8a352cafa36",
        "parentId" : "c5488203-ee78-41d7-982a-c39e2af64935",
        "authorId" : "3fddad62-6c15-4b8b-9e0e-182f39fa3e96",
        "body" : "@wkschwartz @eric-wieser Added one sentence in the doc of `axis`.",
        "createdAt" : "2019-09-14T23:57:58Z",
        "updatedAt" : "2019-09-14T23:57:58Z",
        "lastEditedBy" : "3fddad62-6c15-4b8b-9e0e-182f39fa3e96",
        "tags" : [
        ]
      }
    ],
    "commit" : "c99a16677bf72073af52ac0e028bd0f1487cc338",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +3870,3874 @@            # Untyped path.\n            if axis != 0:\n                raise NotImplementedError(\"Axis argument is only supported \"\n                                          \"on ndarray objects\")\n            with self.lock:"
  },
  {
    "id" : "c5643d93-e833-413b-a831-127bc9b373de",
    "prId" : 14241,
    "prUrl" : "https://github.com/numpy/numpy/pull/14241#pullrequestreview-278582511",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6a5bef3-21b7-4a42-a870-34f842809df9",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Please revert the whitespace additions",
        "createdAt" : "2019-08-15T08:07:06Z",
        "updatedAt" : "2019-08-19T21:01:44Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "004fb5e2-1fc4-4d38-9e00-badb997da4f1",
        "parentId" : "a6a5bef3-21b7-4a42-a870-34f842809df9",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "The spurious space is still there.",
        "createdAt" : "2019-08-19T19:39:41Z",
        "updatedAt" : "2019-08-19T21:01:44Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "047d0db7-c061-41c8-96d5-a487d48a8487",
        "parentId" : "a6a5bef3-21b7-4a42-a870-34f842809df9",
        "authorId" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "body" : "Still there.  @maxwell-aladago, the space added at the end of this line should not be there.",
        "createdAt" : "2019-08-22T17:44:12Z",
        "updatedAt" : "2019-08-22T17:44:12Z",
        "lastEditedBy" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cb88048391a992f9942df42e4aaf4a0df53e494",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +3921,3925 @@        Randomly permute a sequence, or return a permuted range.\n        If `x` is a multi-dimensional array, it is only shuffled along its\n        first index. \n\n        Parameters"
  },
  {
    "id" : "b5036629-cc91-44cf-bf7b-bb28a9336cd6",
    "prId" : 14241,
    "prUrl" : "https://github.com/numpy/numpy/pull/14241#pullrequestreview-276771896",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f4dccc9-82b3-4792-81bc-18c94bd31e17",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Not sure an error example helps too much here, but maybe if someone thinks they can shuffle strings or similar objects.",
        "createdAt" : "2019-08-19T19:40:58Z",
        "updatedAt" : "2019-08-19T21:01:44Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cb88048391a992f9942df42e4aaf4a0df53e494",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +3953,3957 @@        Traceback (most recent call last):\n            ...\n        numpy.AxisError: x must be an integer or at least 1-dimensional\n        \"\"\"\n"
  },
  {
    "id" : "78a0b35a-6fff-4653-bb85-0bb6c77fd464",
    "prId" : 14662,
    "prUrl" : "https://github.com/numpy/numpy/pull/14662#pullrequestreview-299890798",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4144d643-86b8-4570-ac73-72a4c9534f4b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm surprised these are needed at all - does cython not work with `inspect.signature`?",
        "createdAt" : "2019-10-08T16:04:41Z",
        "updatedAt" : "2019-10-08T16:04:41Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "87925c84-b1df-4066-8485-85e2b1a6a563",
        "parentId" : "4144d643-86b8-4570-ac73-72a4c9534f4b",
        "authorId" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "body" : "I haven't looked into it. I only noticed that the axis was missing when I used `rng.shuffle?` in ipython.  It shows only the docstring, with no separate line for the signature.",
        "createdAt" : "2019-10-08T16:13:13Z",
        "updatedAt" : "2019-10-08T16:13:14Z",
        "lastEditedBy" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "tags" : [
        ]
      },
      {
        "id" : "19bd6827-639a-481c-99ce-afd60d1645e8",
        "parentId" : "4144d643-86b8-4570-ac73-72a4c9534f4b",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Perhaps I'll take a look at this at some point",
        "createdAt" : "2019-10-10T08:18:46Z",
        "updatedAt" : "2019-10-10T08:18:47Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e9b5ec6352bee4b96cd4bbedfa17413111462b3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3787,3791 @@    def shuffle(self, object x, axis=0):\n        \"\"\"\n        shuffle(x, axis=0)\n\n        Modify a sequence in-place by shuffling its contents."
  }
]