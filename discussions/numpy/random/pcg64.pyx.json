[
  {
    "id" : "4fe8939d-a8d6-4c77-92ed-6b0ef235c4ca",
    "prId" : 13726,
    "prUrl" : "https://github.com/numpy/numpy/pull/13726#pullrequestreview-246941785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "774e700b-559a-49d0-a4f0-57b13d93437d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Isn't this `step = wrap_int(step, 128)` or `step % (2**128)`?",
        "createdAt" : "2019-06-07T07:06:04Z",
        "updatedAt" : "2019-06-07T07:07:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "f9f277da4ddb99d9b104289cf5c3df4b419c4f0d",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +274,278 @@        step *= int(iter)\n        divisor = step // 2**128\n        step -= 2**128 * divisor\n        self.advance(step)\n"
  },
  {
    "id" : "2e182313-d262-4aae-8eab-fb38770e196e",
    "prId" : 13780,
    "prUrl" : "https://github.com/numpy/numpy/pull/13780#pullrequestreview-254531109",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd7ba745-3154-4094-b338-8e244765864c",
        "parentId" : null,
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "Not related to this specifically, but I think\r\n\r\nhttps://github.com/numpy/numpy/blob/03069a156103c6db175afa9112d0cfebe882d91b/numpy/random/src/pcg64/pcg64.h#L175\r\n\r\nhas a bug.  Shouldn't it be 0x8000000000000000ULL not 0x800000000000ULL to get the top bit?\r\n\r\nI don't think the tests do not push this value out of the lower 62 bits  so it doesn't catch.",
        "createdAt" : "2019-06-25T23:05:13Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "58f914ab-4c7f-407b-8949-c66c56617844",
        "parentId" : "fd7ba745-3154-4094-b338-8e244765864c",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yeah, probably needs fixing. Keep it in mind.",
        "createdAt" : "2019-06-25T23:26:52Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "eab002a9-4d70-4bca-8ae2-f6b48bdc3d7c",
        "parentId" : "fd7ba745-3154-4094-b338-8e244765864c",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "Ugh. Yuck. Must have miscounted the 0s. Even with the right constant, it's wrong. The RHS should just be `initseq.low >> 63u`, I think. We want a result of `0` or `1` here, not `0` or `0x8000000000000000ULL`",
        "createdAt" : "2019-06-25T23:52:37Z",
        "updatedAt" : "2019-06-25T23:56:49Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      },
      {
        "id" : "774288bf-84a6-49c7-9d7a-5170777bd20b",
        "parentId" : "fd7ba745-3154-4094-b338-8e244765864c",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Just to be sure, just `initseq.low >> 63u`",
        "createdAt" : "2019-06-25T23:59:35Z",
        "updatedAt" : "2019-06-25T23:59:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ddd6c5b7-7edb-4bf3-8f90-4a2586e3af6d",
        "parentId" : "fd7ba745-3154-4094-b338-8e244765864c",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Tests are passing now, so once this is fixed we can put it in and review for nits without working with a mega set of files.",
        "createdAt" : "2019-06-26T00:14:28Z",
        "updatedAt" : "2019-06-26T00:14:28Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4972b2e6-956d-4c8a-bd83-9bdfc85f7a7c",
        "parentId" : "fd7ba745-3154-4094-b338-8e244765864c",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "see #13837",
        "createdAt" : "2019-06-26T10:48:25Z",
        "updatedAt" : "2019-06-26T10:48:26Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a0c54ac0442dd1bf7d60f3ea5e2c578ae71959f",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +36,40 @@\n\ncdef class PCG64(BitGenerator):\n    \"\"\"\n    PCG64(seed_seq=None)"
  },
  {
    "id" : "ca438f52-f768-4828-9991-632034511a4c",
    "prId" : 13849,
    "prUrl" : "https://github.com/numpy/numpy/pull/13849#pullrequestreview-255534901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5d4de93-2c7c-4532-8732-2dd439a36a50",
        "parentId" : null,
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "I need a LGTM on this one last non-trivial bit, then we can merge this. @bashtage ?",
        "createdAt" : "2019-06-27T23:49:35Z",
        "updatedAt" : "2019-06-28T01:07:06Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      },
      {
        "id" : "761c7bca-1c00-411e-9c09-8cece824785c",
        "parentId" : "a5d4de93-2c7c-4532-8732-2dd439a36a50",
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "Feel free to round it which ever way that you prefer. LGTM.",
        "createdAt" : "2019-06-27T23:51:06Z",
        "updatedAt" : "2019-06-28T01:07:06Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "7ebe35fd-2459-4a21-9ad9-52e4850a3dff",
        "parentId" : "a5d4de93-2c7c-4532-8732-2dd439a36a50",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "Thank you for your indulgence. :-)",
        "createdAt" : "2019-06-28T00:04:15Z",
        "updatedAt" : "2019-06-28T01:07:06Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "49450483628d96d0bdf9caf18e627f05ab9a3431",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +135,139 @@        golden ratio.\n        \"\"\"\n        step = 0x9e3779b97f4a7c15f39cc0605cedc835\n        self.advance(step * int(jumps))\n"
  }
]