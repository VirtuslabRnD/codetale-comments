[
  {
    "id" : "834359ff-b497-4b48-83d9-15ba61a55a2a",
    "prId" : 18395,
    "prUrl" : "https://github.com/numpy/numpy/pull/18395#pullrequestreview-590249476",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c57c7d54-e5e5-4f96-9e77-bb9960643be8",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "I'd actually suggest marking them as abstractmethods.\r\nThis is not quite true at runtime, but seems to be very much in the spirit of their implementation:\r\nhttps://github.com/numpy/numpy/blob/7a18e4ac4f0b9f0933a190ac25cd75729bcdd146/numpy/random/bit_generator.pyx#L537-L554",
        "createdAt" : "2021-02-14T12:40:59Z",
        "updatedAt" : "2021-02-16T17:55:58Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "9f71f158-86ed-41b8-881a-39509f2af933",
        "parentId" : "c57c7d54-e5e5-4f96-9e77-bb9960643be8",
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "> spawn_key is still annotated as Tuple[int, ...] here (should be Sequence[int]).\r\n\r\nWhile the external API accepts `Sequence[int]`, it is always stored on the attribute as a `Tuple[int,...]`.\r\n\r\n> I'd actually suggest marking them as abstractmethods.\r\n\r\nI've done this, and marked BitGenerator as `ABC`.  IIRC the only reason is isn't ABC is a limitation of Cython.\r\n\r\n> Considering SeedSequence is not an abstractbaseclass I'd annotate either with a custom TypedDict or Dict[str, Any].\r\n\r\nI have replaced with a TypedDict.",
        "createdAt" : "2021-02-15T08:30:03Z",
        "updatedAt" : "2021-02-16T17:55:58Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b46d6abe5e030b46d98c139b6fd858e6ef089c1",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +111,115 @@    def state(self) -> Mapping[str, Any]: ...\n    @state.setter\n    def state(self, value: Mapping[str, Any]) -> None: ...\n    @overload\n    def random_raw(self, size: None = ..., output: Literal[True] = ...) -> int: ...  # type: ignore[misc]"
  },
  {
    "id" : "5465344e-230e-4421-89aa-d5c719fc2299",
    "prId" : 18395,
    "prUrl" : "https://github.com/numpy/numpy/pull/18395#pullrequestreview-590249946",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "378ac899-db26-4842-9155-4d02f0d3f91c",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Just checking: should this be typed, considering it's private? ",
        "createdAt" : "2021-02-14T12:41:45Z",
        "updatedAt" : "2021-02-16T17:55:58Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "111e18cc-eefc-47d7-b26f-b7b547e3a2ae",
        "parentId" : "378ac899-db26-4842-9155-4d02f0d3f91c",
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "It is there for anyone who wishes to test a bit generator, so it has some general utility.",
        "createdAt" : "2021-02-15T08:30:45Z",
        "updatedAt" : "2021-02-16T17:55:58Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b46d6abe5e030b46d98c139b6fd858e6ef089c1",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +118,122 @@    @overload\n    def random_raw(self, size: Optional[_ShapeLike] = ..., output: Literal[False] = ...) -> None: ...  # type: ignore[misc]\n    def _benchmark(self, cnt: int, method: str = ...) -> None: ...\n    @property\n    def ctypes(self) -> _Interface: ..."
  }
]