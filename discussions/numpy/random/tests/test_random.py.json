[
  {
    "id" : "4094a626-af5d-4660-82f1-17509a8432f0",
    "prId" : 4286,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5450be9-770a-4c93-aebf-2362e8f0783c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Tricky to figure out how to test this.\n",
        "createdAt" : "2014-02-12T19:35:00Z",
        "updatedAt" : "2014-02-13T18:45:37Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0981867cf1d7b5adab4db46d601365400ed52892",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +240,244 @@            np.random.shuffle(nparr)\n            assert_(a in nparr)\n            assert_(b in nparr)\n\n    def test_shuffle_masked(self):"
  },
  {
    "id" : "1b393892-bd9b-414d-90cc-5bbec9931e04",
    "prId" : 6885,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "757b4795-78c2-4a7a-b780-0b2da40b63b1",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The test looks iffy. Since we are just testing if the maximum is obtainable and the range is closed, maybe make both `high` and `low` equal to `np.iinfo('l').max`. Also needs a comment as to what is being tested for.\n",
        "createdAt" : "2015-12-28T19:09:58Z",
        "updatedAt" : "2015-12-28T21:48:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "af2c656b-48d5-47cd-8687-43deaa6b17eb",
        "parentId" : "757b4795-78c2-4a7a-b780-0b2da40b63b1",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "Right, of course!  That's much simpler!  Will do.\n",
        "createdAt" : "2015-12-28T19:11:47Z",
        "updatedAt" : "2015-12-28T21:48:35Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7a68afd3dddb65bd8edad0d484e1333daafa631",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +168,172 @@        np.testing.assert_array_equal(actual, desired)\n\n    def test_random_integers_max_int(self):\n        # Tests whether random_integers can generate the\n        # maximum allowed Python int that can be converted"
  },
  {
    "id" : "299ad43b-1f8a-43d5-af58-94118f5b16f6",
    "prId" : 6931,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85d6db14-2db2-47fa-a9da-152252da1b08",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Because Deprecation warnings are error for development testing and only raised once from a giving location by default, some care needs to be taken here. There is a `_DeprecationTestCase` in `numpy/core/tests/test_deprecations.py` that can be used as a base class and perhaps should be moved into `numpy.testing`, another, somewhat simpler option is\n\n```\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"error\", DeprecationWarning)\n            assert_raises(DeprecationWarning, ...)\n```\n\n@seberg Thoughts about moving the `_DeprecationTestCase`?\n",
        "createdAt" : "2016-01-09T22:54:36Z",
        "updatedAt" : "2016-01-10T18:34:04Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "f49505d7-c61a-44f3-8cfe-2c0005978f99",
        "parentId" : "85d6db14-2db2-47fa-a9da-152252da1b08",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "@charris : Could you clarify your comment?  There seems to be a mixture of suggestions for this actual PR and suggestions of a greater infrastructural change.  Should I move my test into `test_deprecations.py` as a derived class of `_DeprecationTestCase`?\n",
        "createdAt" : "2016-01-09T23:32:31Z",
        "updatedAt" : "2016-01-10T18:34:04Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      },
      {
        "id" : "dc1ad5b0-4e73-4db7-b4e0-087db764e124",
        "parentId" : "85d6db14-2db2-47fa-a9da-152252da1b08",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yep, one is a more invasive change than the other. Quick and dirty is the simple option, the move is somewhat more complicated, but maybe provides functionality other spots would like. The idea isn't to move these tests, but rather put `_DeprecationTestCase`, without the underscore, someplace where you can get at it. Let's wait a bit and see if we get a second opinion.\n",
        "createdAt" : "2016-01-10T00:49:43Z",
        "updatedAt" : "2016-01-10T18:34:04Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "15a0d871-523d-443d-9fbd-dd70f71d4bb4",
        "parentId" : "85d6db14-2db2-47fa-a9da-152252da1b08",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "I'm -0 on adding `_DeprecationTestCase` to the _public_ API, because it feels a bit underbaked (`assert_deprecated`'s calling convention is super complicated!), so probably we shouldn't set it in stone as-is.\n\nNo objections to refactoring our test suite to have more useful internal tools though. Or maybe `assert_warns` should be clever enough to set up the warning context properly, if it isn't already.\n",
        "createdAt" : "2016-01-10T01:05:57Z",
        "updatedAt" : "2016-01-10T18:34:04Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "6a7b1da1-861a-4d83-918f-d2c39991eadf",
        "parentId" : "85d6db14-2db2-47fa-a9da-152252da1b08",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Sounds like quick and dirty for now.\n",
        "createdAt" : "2016-01-10T02:15:40Z",
        "updatedAt" : "2016-01-10T18:34:04Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "3197f4c0-091d-4af1-9b47-d48db151fc3e",
        "parentId" : "85d6db14-2db2-47fa-a9da-152252da1b08",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "@charris : \"quick and dirty\" = move test into `test_deprecations.py` or that `with warnings.catch_warnings()` block?  Both seem to fit the criterion.\n",
        "createdAt" : "2016-01-10T02:19:11Z",
        "updatedAt" : "2016-01-10T18:34:04Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      },
      {
        "id" : "be2c4e87-aa98-4cad-afa4-a5b033067d3c",
        "parentId" : "85d6db14-2db2-47fa-a9da-152252da1b08",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Q&D would be least work, e.g., with the `catch_warnings` environment.\n",
        "createdAt" : "2016-01-10T02:22:55Z",
        "updatedAt" : "2016-01-10T18:34:04Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "72a6a2c3-44d7-47d4-9342-1534ed6dbf71",
        "parentId" : "85d6db14-2db2-47fa-a9da-152252da1b08",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "We have this new thing that clears the warning registry? It might go far enough. It is definetely half backed, it was backed by me getting desperate with avoid warning registry corruption.\n\nIf you do an `assert_warns` with \"always\" in the catch_warnings context, and then an `assert_raises` when putting DeprecationWarning to \"error\" you have it I think. I think we also have some new stuff (forgot where), which attempts to clear the warning registry.\n",
        "createdAt" : "2016-01-10T09:18:46Z",
        "updatedAt" : "2016-01-10T18:34:04Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "1083fc15-16f1-4761-8600-0de1c867542b",
        "parentId" : "85d6db14-2db2-47fa-a9da-152252da1b08",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yep, clearing the registry is a good safety measure to ensure that the warning is alway enabled despite previous errors/bad code.\n",
        "createdAt" : "2016-01-10T17:26:51Z",
        "updatedAt" : "2016-01-10T18:34:04Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "9ffb9a1f-a999-468b-a2ee-d400e0550e4c",
        "parentId" : "85d6db14-2db2-47fa-a9da-152252da1b08",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Only that you have to know where the error originates from to do that, which makes it a bit annoying. Actually, did we ever consider setting the warning to \"always\" for all warnings in the tests? That could decrease the probability of running in those kind of issues.... Next time I will run into it, which as far as I see is as soon as I want to waste more time on `oindex` related deprecations, hehe.\n",
        "createdAt" : "2016-01-10T17:39:31Z",
        "updatedAt" : "2016-01-10T18:34:04Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b23ec897fcbf1a0279a599c1ba301a2b01c09c88",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +258,262 @@        np.testing.assert_equal(actual, desired)\n\n    def test_random_integers_deprecated(self):\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"error\", DeprecationWarning)"
  },
  {
    "id" : "b1474add-26da-4bc7-85d4-13c4a77c915f",
    "prId" : 6933,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "faf0e13c-d351-4f69-8820-48d138e896b1",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "ISTR that we don't like generators like this for testing. @rgommers Do you remember what that was about?\n",
        "createdAt" : "2016-01-12T17:58:50Z",
        "updatedAt" : "2016-01-17T04:57:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "61af2ed0-b787-469f-b6e2-63b35c5335ee",
        "parentId" : "faf0e13c-d351-4f69-8820-48d138e896b1",
        "authorId" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "body" : "From a comment by @pv https://github.com/scipy/scipy/pull/3719#discussion_r13781425 one reason is that it's harder to debug failing tests, for example\n\n``` python\nimport numpy as np\nfrom numpy.testing import assert_allclose\n\ndef test_foo():\n    A = np.arange(100)\n    B = np.concatenate([A, A])\n    yield assert_allclose, A, B\n```\n\ngives a failing test result that looks like this:\n\n```\n$ nosetests                           \nF\n======================================================================\nFAIL: test.test_foo(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n----------------------------------------------------------------------\nTraceback (most recent call last):\n[snip]\n```\n\nwhich looks messy.\n",
        "createdAt" : "2016-01-12T18:56:51Z",
        "updatedAt" : "2016-01-17T04:57:35Z",
        "lastEditedBy" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "tags" : [
        ]
      },
      {
        "id" : "ab843a46-b38b-4c75-94ee-8f685748c911",
        "parentId" : "faf0e13c-d351-4f69-8820-48d138e896b1",
        "authorId" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "body" : "You can set the `description` attribute of the yielded test to improve the output, e.g.\n\n```\nimport numpy as np\nfrom numpy.testing import assert_allclose\n\ndef test_foo():\n\n    def allclose(description):\n        f = lambda x, y: assert_allclose(x, y)\n        f.description = description\n        return f\n\n    for i in range(100):\n        A = np.arange(100)\n        if i != 50:\n            B = A\n        else:\n            B = np.arange(200)\n        yield allclose(\"test_foo:test #{}\".format(i)), A, B\n\ndef test_bar():\n    for i in range(100):\n        A = np.arange(100)\n        if i != 50:\n            B = A\n        else:\n            B = np.arange(200)\n        assert_allclose(A, B)\n```\n\ngives, IMO, a nice output:\n\n```\n..................................................F.................................................F\n======================================================================\nFAIL: test_foo:test #50\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/lib/python3.5/site-packages/nose/case.py\", line 198, in runTest\n    self.test(*self.arg)\n  File \"/tmp/test_foo.py\", line 7, in <lambda>\n    f = lambda x, y: assert_allclose(x, y)\n  File \"/usr/lib/python3.5/site-packages/numpy/testing/utils.py\", line 1347, in assert_allclose\n    verbose=verbose, header=header)\n  File \"/usr/lib/python3.5/site-packages/numpy/testing/utils.py\", line 663, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=1e-07, atol=0\n\n(shapes (100,), (200,) mismatch)\n x: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,...\n y: array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,\n        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,\n        26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,...\n\n======================================================================\nFAIL: test_foo.test_bar\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/lib/python3.5/site-packages/nose/case.py\", line 198, in runTest\n    self.test(*self.arg)\n  File \"/tmp/test_foo.py\", line 26, in test_bar\n    assert_allclose(A, B)\n  File \"/usr/lib/python3.5/site-packages/numpy/testing/utils.py\", line 1347, in assert_allclose\n    verbose=verbose, header=header)\n  File \"/usr/lib/python3.5/site-packages/numpy/testing/utils.py\", line 663, in assert_array_compare\n    raise AssertionError(msg)\nAssertionError: \nNot equal to tolerance rtol=1e-07, atol=0\n\n(shapes (100,), (200,) mismatch)\n x: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,...\n y: array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,\n        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,\n        26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,...\n\n----------------------------------------------------------------------\nRan 101 tests in 0.056s\n\nFAILED (failures=2)\n```\n",
        "createdAt" : "2016-01-12T19:39:05Z",
        "updatedAt" : "2016-01-17T04:57:35Z",
        "lastEditedBy" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "tags" : [
        ]
      },
      {
        "id" : "0a8fa521-3be6-44df-afdd-6abab2d753db",
        "parentId" : "faf0e13c-d351-4f69-8820-48d138e896b1",
        "authorId" : "7ff2710f-0a12-46fb-a54a-d405dab78cf7",
        "body" : "The description is not the issue with debugging, it's the context when you enable `--pdb-failure` or `--ipdb-failure` - this is what many of us use for debugging failed tests.\n",
        "createdAt" : "2016-01-12T19:42:00Z",
        "updatedAt" : "2016-01-17T04:57:35Z",
        "lastEditedBy" : "7ff2710f-0a12-46fb-a54a-d405dab78cf7",
        "tags" : [
        ]
      },
      {
        "id" : "abd1c694-a2ec-4ab8-8412-70dceab102d7",
        "parentId" : "faf0e13c-d351-4f69-8820-48d138e896b1",
        "authorId" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "body" : "I don't see any context using either `--pdb-failure` or `--ipdb-failure` (not that I knew about these options, thanks for pointing them out).\n",
        "createdAt" : "2016-01-12T19:54:45Z",
        "updatedAt" : "2016-01-17T04:57:35Z",
        "lastEditedBy" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "tags" : [
        ]
      },
      {
        "id" : "adbe63f5-6fc6-430d-a729-042e271c496d",
        "parentId" : "faf0e13c-d351-4f69-8820-48d138e896b1",
        "authorId" : "7ff2710f-0a12-46fb-a54a-d405dab78cf7",
        "body" : "I'm not sure what you mean, but I think you'll find that non-generator tests will drop you into the errored test, and you can `u` you way to the enclosing test function to inspect the stack, but you can't do that with the `yield` test functions.\n",
        "createdAt" : "2016-01-12T22:27:12Z",
        "updatedAt" : "2016-01-17T04:57:35Z",
        "lastEditedBy" : "7ff2710f-0a12-46fb-a54a-d405dab78cf7",
        "tags" : [
        ]
      },
      {
        "id" : "e160649f-7570-40e0-9034-15e500df52f8",
        "parentId" : "faf0e13c-d351-4f69-8820-48d138e896b1",
        "authorId" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "body" : "Oh, I see.  I'll switch this out then.\nI guess nose should try to stitch in a traceback to the still running generator (`gen.gi_frame` anyone?).\nSee nose-devs/nose2#260.\n",
        "createdAt" : "2016-01-13T01:35:48Z",
        "updatedAt" : "2016-01-17T04:57:35Z",
        "lastEditedBy" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "309fdd4cd1400fc392acfa418226bd7f8b10073d",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +371,375 @@        np.testing.assert_equal(actual, desired)\n\n    def test_shuffle(self):\n        # Test lists, arrays (of various dtypes), and multidimensional versions\n        # of both, c-contiguous or not:"
  },
  {
    "id" : "0ca4d827-25c3-4c3f-8757-9d341fa1334b",
    "prId" : 8846,
    "prUrl" : "https://github.com/numpy/numpy/pull/8846#pullrequestreview-29086582",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe4e1b81-6a9a-45ed-91b4-8ed2138c491e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Would `np.iinfo(np.bool_)` be a reasonable thing for numpy to contain? (EDIT: #8849)",
        "createdAt" : "2017-03-27T01:02:32Z",
        "updatedAt" : "2017-05-09T07:12:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3ca5ccf9-6537-41f1-9c25-6d3320fc1dfd",
        "parentId" : "fe4e1b81-6a9a-45ed-91b4-8ed2138c491e",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "Perhaps, as it does not work for the moment:\r\n~~~python\r\n>>> np.iinfo(np.bool_)\r\n...\r\nValueError: Invalid integer data type.\r\n~~~",
        "createdAt" : "2017-03-27T01:09:47Z",
        "updatedAt" : "2017-05-09T07:12:55Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f88730b3140af1efb7d2e789d21078ad66c8eee",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +173,177 @@        for dt in self.itype:\n            lbnd = 0 if dt is np.bool_ else np.iinfo(dt).min\n            ubnd = 2 if dt is np.bool_ else np.iinfo(dt).max + 1\n\n            try:"
  },
  {
    "id" : "dfc70b22-1eba-476b-8aa4-089da2876d97",
    "prId" : 8846,
    "prUrl" : "https://github.com/numpy/numpy/pull/8846#pullrequestreview-37012252",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a868b504-2da8-4877-ade9-c2038a3637d2",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is a little weird - better to leave the raw exception so that the tests produce a useful stack trace, I think",
        "createdAt" : "2017-04-27T09:09:15Z",
        "updatedAt" : "2017-05-09T07:12:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "7c4f82a2-5946-40ee-8ca6-38cc58a9ed55",
        "parentId" : "a868b504-2da8-4877-ade9-c2038a3637d2",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "I did this because I wanted to know which element in the `for`-loop, if any, failed.  No stack-trace is going to tell you that AFAICT.",
        "createdAt" : "2017-04-27T09:11:15Z",
        "updatedAt" : "2017-05-09T07:12:55Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      },
      {
        "id" : "78d574c9-f8cd-4e30-90c7-d8a83d561a67",
        "parentId" : "a868b504-2da8-4877-ade9-c2038a3637d2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Maybe we need an `assert_no_exception` or some such.",
        "createdAt" : "2017-05-08T18:36:49Z",
        "updatedAt" : "2017-05-09T07:12:55Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6f68dcd8-0d57-48ad-b1c7-830ced871daf",
        "parentId" : "a868b504-2da8-4877-ade9-c2038a3637d2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I don't think `assert_no_exception` would be all the useful - wouldn't that go on every single function call otherwise? Based on @gfyoung's reasining, parameterized test cases would solve this.\r\n\r\n> I did this because I wanted to know which element in the for-loop, if any, failed.\r\n\r\nIn what way does this do a better job of doing that, given that `dt` is not used in the message?",
        "createdAt" : "2017-05-09T12:16:16Z",
        "updatedAt" : "2017-05-09T12:17:46Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f88730b3140af1efb7d2e789d21078ad66c8eee",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +180,184 @@                raise AssertionError(\"No error should have been raised, \"\n                                     \"but one was with the following \"\n                                     \"message:\\n\\n%s\" % str(e))\n\n    def test_in_bounds_fuzz(self):"
  },
  {
    "id" : "3623ca37-e389-43b7-aa33-e77cea2209d3",
    "prId" : 11383,
    "prUrl" : "https://github.com/numpy/numpy/pull/11383#pullrequestreview-130898568",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7903203-1ff2-4985-a16d-ae963c917357",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "A test for `randint(10, 10, size=0)` might be good too - just to check that we didn't special case 0 somehow",
        "createdAt" : "2018-06-21T06:54:01Z",
        "updatedAt" : "2018-06-21T16:36:22Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "67e0d555-5d9c-4a05-a2d8-b3e505bf2833",
        "parentId" : "f7903203-1ff2-4985-a16d-ae963c917357",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "done",
        "createdAt" : "2018-06-21T16:36:17Z",
        "updatedAt" : "2018-06-21T16:36:22Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "9013b0f60d9bc93f3c433df66757ac7589ec450b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +442,446 @@\n        # Check zero-size\n        assert_equal(np.random.randint(0, 0, size=(3, 0, 4)).shape, (3, 0, 4))\n        assert_equal(np.random.randint(0, -10, size=0).shape, (0,))\n        assert_equal(np.random.randint(10, 10, size=0).shape, (0,))"
  },
  {
    "id" : "3476ad16-fa1d-4305-8eb0-80d1a198b4c3",
    "prId" : 13093,
    "prUrl" : "https://github.com/numpy/numpy/pull/13093#pullrequestreview-210599057",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad759fca-7575-4a3c-9bd4-6368bdeabd18",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you test with `(-1,)` and `(-1, 1)` too?",
        "createdAt" : "2019-03-05T08:58:03Z",
        "updatedAt" : "2019-03-05T10:20:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e2cc6105-1efe-437e-bc8a-ba912e178d9c",
        "parentId" : "ad759fca-7575-4a3c-9bd4-6368bdeabd18",
        "authorId" : "82f68155-8062-43d2-b457-007e9e7d97cf",
        "body" : "@eric-wieser You mean `size=(-1,1)`? Shouldn't it be a 1D array (is that what we're checking here)?",
        "createdAt" : "2019-03-05T09:13:55Z",
        "updatedAt" : "2019-03-05T10:20:52Z",
        "lastEditedBy" : "82f68155-8062-43d2-b457-007e9e7d97cf",
        "tags" : [
        ]
      },
      {
        "id" : "6747afdc-db00-4f09-b07b-a858efb3a7c1",
        "parentId" : "ad759fca-7575-4a3c-9bd4-6368bdeabd18",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yes, I do mean that. The first argument is a 1d array, but the output shape can be any dimension. Your new tests look good, although you might want to reference the issue number as `# gh-NNNNN` in a comment",
        "createdAt" : "2019-03-05T09:40:03Z",
        "updatedAt" : "2019-03-05T10:20:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2ea64872-4d87-4c15-9d82-efa1e519f028",
        "parentId" : "ad759fca-7575-4a3c-9bd4-6368bdeabd18",
        "authorId" : "82f68155-8062-43d2-b457-007e9e7d97cf",
        "body" : "Added `# gh-<issueno>`\r\n@eric-wieser Thanks for patiently reviewing this PR! Is there anything more?",
        "createdAt" : "2019-03-05T10:22:24Z",
        "updatedAt" : "2019-03-05T10:22:24Z",
        "lastEditedBy" : "82f68155-8062-43d2-b457-007e9e7d97cf",
        "tags" : [
        ]
      }
    ],
    "commit" : "74c68ee162f47cc2b01f83f113dc6571d18f2d6d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +402,406 @@        assert_raises(ValueError, sample, [1, 2, 3], 4, replace=False)\n        # gh-13087\n        assert_raises(ValueError, sample, [1, 2, 3], -2, replace=False)\n        assert_raises(ValueError, sample, [1, 2, 3], (-1,), replace=False)\n        assert_raises(ValueError, sample, [1, 2, 3], (-1, 1), replace=False)"
  },
  {
    "id" : "725d05f4-660a-42cb-ad6e-6913404ca9d8",
    "prId" : 18438,
    "prUrl" : "https://github.com/numpy/numpy/pull/18438#pullrequestreview-592907241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45f4adf7-8357-42c8-a930-35fc91e57f2d",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I am not sure that this is how we do things (I don't think it is right now), should we do this more, maybe aim from a more generic fixture when it comes up?",
        "createdAt" : "2021-02-17T23:00:10Z",
        "updatedAt" : "2021-03-17T15:58:09Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "fa9362ab-505c-4d02-b609-7e19d080c4b7",
        "parentId" : "45f4adf7-8357-42c8-a930-35fc91e57f2d",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "This seems like a better way to test. For instance, there are tests called `test_beta` (two functions down in this file) reveals exact copies of the same test in `numpy/random/tests/test_generator_mt19937.py`. Using a fixture/parametrize could reduce the repeats.",
        "createdAt" : "2021-02-18T07:13:48Z",
        "updatedAt" : "2021-03-17T15:58:09Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "14583921acf39ccf1f40ceda40af325adeba81ad",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +524,528 @@\n    @pytest.mark.parametrize(\"random\",\n        [np.random, np.random.RandomState(), np.random.default_rng()])\n    @pytest.mark.parametrize(\"use_array_like\", [True, False])\n    def test_shuffle_no_object_unpacking(self, random, use_array_like):"
  },
  {
    "id" : "bcbdd471-e1ea-4e67-803a-78e818fd0069",
    "prId" : 18438,
    "prUrl" : "https://github.com/numpy/numpy/pull/18438#pullrequestreview-594395693",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e01cca08-f514-456e-a0af-1d412274ec42",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```suggestion\r\n            # The old API gives incorrect results (duplicating and mutating \r\n            # elements), but warns about it.\r\n```",
        "createdAt" : "2021-02-19T09:10:15Z",
        "updatedAt" : "2021-03-17T15:58:09Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "7a4564e9-6638-4a7e-8ccb-aa4741e3e969",
        "parentId" : "e01cca08-f514-456e-a0af-1d412274ec42",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I wonder whether it's worth including the failure in a comment - I got:\r\n```python\r\n>>> orig_arr\r\narray([None, np.array([3]), np.float64(3), np.array(10), np.float64(7)], dtype=object)\r\n>>> arr\r\nMyArr([7.0, MyArr(None, dtype=object), 3.0, array(10), MyArr(None, dtype=object)], dtype=object)\r\n```\r\nwhich is frankly totally broken.",
        "createdAt" : "2021-02-19T09:12:17Z",
        "updatedAt" : "2021-03-17T15:58:09Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "4c6ab064-43df-4fcd-9f5d-58a371bd5f54",
        "parentId" : "e01cca08-f514-456e-a0af-1d412274ec42",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "commited your suggestions (with added line breaks).  Well, the code in the test is a (simple) example, or did you mean in the warning?",
        "createdAt" : "2021-02-19T17:15:22Z",
        "updatedAt" : "2021-03-17T15:58:09Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "14583921acf39ccf1f40ceda40af325adeba81ad",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +542,546 @@\n        if use_array_like and not isinstance(random, np.random.Generator):\n            # The old API gives incorrect results, but warns about it.\n            with pytest.warns(UserWarning,\n                    match=\"Shuffling a one dimensional array.*\"):"
  }
]