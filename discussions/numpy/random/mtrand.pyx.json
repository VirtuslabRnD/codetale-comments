[
  {
    "id" : "cf706da4-8897-471f-9884-14fa6499dd2a",
    "prId" : 14490,
    "prUrl" : "https://github.com/numpy/numpy/pull/14490#pullrequestreview-287219323",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da2f97c4-3cb0-45a7-ae9c-54b3dbf15ef5",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Nice catch",
        "createdAt" : "2019-09-12T06:43:43Z",
        "updatedAt" : "2019-09-12T06:43:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "e389beef0ef96ad0f3c968f1796368c06a31df64",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +3518,3522 @@        ongood = ongood.astype(np.int64)\n        onbad = onbad.astype(np.int64)\n        onsample = onsample.astype(np.int64)\n        out = discrete_broadcast_iii(&legacy_random_hypergeometric,&self._bitgen, size, self.lock,\n                                     ongood, 'ngood', CONS_NON_NEGATIVE,"
  },
  {
    "id" : "a729ff73-182c-4881-81d1-b259222f2f9a",
    "prId" : 14490,
    "prUrl" : "https://github.com/numpy/numpy/pull/14490#pullrequestreview-287219846",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f07ed57d-1b74-462d-994b-21418b72a74c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you remind me why we're using `long` here instead of `int64`?",
        "createdAt" : "2019-09-12T06:44:17Z",
        "updatedAt" : "2019-09-12T06:44:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f72429a2-76d6-4961-ab05-a84d9bb1e00a",
        "parentId" : "f07ed57d-1b74-462d-994b-21418b72a74c",
        "authorId" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "body" : "Legacy.  The original random code was written using C long integers.  This code is supposed to preserve the old behavior.",
        "createdAt" : "2019-09-12T06:45:11Z",
        "updatedAt" : "2019-09-12T06:45:11Z",
        "lastEditedBy" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "tags" : [
        ]
      }
    ],
    "commit" : "e389beef0ef96ad0f3c968f1796368c06a31df64",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +3496,3500 @@        ongood = <np.ndarray>np.PyArray_FROM_OTF(ngood, np.NPY_LONG, np.NPY_ALIGNED)\n        onbad = <np.ndarray>np.PyArray_FROM_OTF(nbad, np.NPY_LONG, np.NPY_ALIGNED)\n        onsample = <np.ndarray>np.PyArray_FROM_OTF(nsample, np.NPY_LONG, np.NPY_ALIGNED)\n\n        if np.PyArray_NDIM(ongood) == np.PyArray_NDIM(onbad) == np.PyArray_NDIM(onsample) == 0:"
  },
  {
    "id" : "23c400fb-1add-43bc-a5b9-dd370037348b",
    "prId" : 14948,
    "prUrl" : "https://github.com/numpy/numpy/pull/14948#pullrequestreview-321191238",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "798fc9c1-2483-47bb-b3ef-5057d18f9254",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Add this `note` and the `See Also` fragment to each of the exposed functions",
        "createdAt" : "2019-11-21T06:22:52Z",
        "updatedAt" : "2019-11-22T00:47:45Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "24a45e88-a312-4022-b78c-dbc230513ebd",
        "parentId" : "798fc9c1-2483-47bb-b3ef-5057d18f9254",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Makes sense, short and to the point.",
        "createdAt" : "2019-11-21T06:56:52Z",
        "updatedAt" : "2019-11-22T00:47:45Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "6d3a5c1a-6789-41ee-b2f7-dc03ab25f98b",
        "parentId" : "798fc9c1-2483-47bb-b3ef-5057d18f9254",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "Per my comment in the `random-quick-start`, I really don't like the `default_rng().whatever()` construction. People should _not_ be making a new `Generator` every line. If it's really important that people have a replacement for the `np.random.whatever()` calls that fits on one line, make those module-level aliases against a global `Generator`.",
        "createdAt" : "2019-11-21T14:11:14Z",
        "updatedAt" : "2019-11-22T00:47:46Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      },
      {
        "id" : "c8c44d34-3af0-4947-939f-3a319df25b35",
        "parentId" : "798fc9c1-2483-47bb-b3ef-5057d18f9254",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "1. Instantiating a new `Generator` each time means more reading of `/dev/urandom`. While we don't pull a lot of data from it, it's still a system call, which is slow, and is going to block other processes trying to read it at the same time. If someone is mechanically replacing `np.random.whatever()` with `np.random.default_rng().whatever()`, that could be a lot of calls in tight loops.\r\n\r\n2. I fear that this usage, especially when presented in this context, is going to engrain the idea that `default_rng()` returns _the_ default `Generator` instance rather than creating a new one each time since that was the mental model of `np.random.whatever()`.",
        "createdAt" : "2019-11-21T14:17:38Z",
        "updatedAt" : "2019-11-22T00:47:46Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      },
      {
        "id" : "f1c1bec2-4950-4fda-bbf4-59d6ab9c1142",
        "parentId" : "798fc9c1-2483-47bb-b3ef-5057d18f9254",
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "+1 on these comments. Perhaps just note the new name of the function when using the default_rng rather than suggesting a specific function call?\r\n\r\nPerhaps something along the lines of \r\n\r\nNew code should use the `random` method of a `default_rng()` instance (see `random-quick-start` for more detail). ",
        "createdAt" : "2019-11-21T14:31:26Z",
        "updatedAt" : "2019-11-22T00:47:46Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "0ff6a8a8-22ac-4a67-bc8f-eb2b4f6ea3d7",
        "parentId" : "798fc9c1-2483-47bb-b3ef-5057d18f9254",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "\r\n>  is going to engrain the idea that `default_rng()` returns _the_ default `Generator`\r\n\r\nPerhaps we got the name wrong, and should call this `make_default_rng`?\r\n\r\nAt the very least, this sounds like something that needs to be drawn attention to in the docstring of `default_rng`.\r\n\r\n",
        "createdAt" : "2019-11-21T15:38:41Z",
        "updatedAt" : "2019-11-22T00:47:46Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "99412055-c86d-4a2d-b2a6-260b8f1e798a",
        "parentId" : "798fc9c1-2483-47bb-b3ef-5057d18f9254",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "It is. https://docs.scipy.org/doc/numpy/reference/random/generator.html#numpy.random.default_rng",
        "createdAt" : "2019-11-21T16:00:37Z",
        "updatedAt" : "2019-11-22T00:47:46Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      },
      {
        "id" : "8dccc80c-8f20-4144-b54c-1fd18d36689e",
        "parentId" : "798fc9c1-2483-47bb-b3ef-5057d18f9254",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "I like the \"Use the *** method of a default_rng() instance ...\" text. Any other alternatives?",
        "createdAt" : "2019-11-21T16:05:12Z",
        "updatedAt" : "2019-11-22T00:47:46Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "6796ba15-f44b-4b69-9064-4a08803a0baa",
        "parentId" : "798fc9c1-2483-47bb-b3ef-5057d18f9254",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "changed",
        "createdAt" : "2019-11-21T21:14:07Z",
        "updatedAt" : "2019-11-22T00:47:46Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a5e42873095af920a5ba1df59cf156ddb5d03f4",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +383,387 @@            New code should use the ``random`` method of a ``default_rng()``\n            instance instead; see `random-quick-start`.\n\n        Parameters\n        ----------"
  },
  {
    "id" : "ae7d60e8-94c4-48b3-aaec-8c4c83499b0f",
    "prId" : 15511,
    "prUrl" : "https://github.com/numpy/numpy/pull/15511#pullrequestreview-354401653",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "219c7921-daa4-486f-93c9-c88042da98cc",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```suggestion\r\n        randint(low, high=None, size=None, dtype=np.int_)\r\n```\r\nAs written this is a behavior change",
        "createdAt" : "2020-02-06T10:39:57Z",
        "updatedAt" : "2020-02-06T14:06:22Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "8998a679-9ea7-4ab0-8c4f-eadd956d2bfe",
        "parentId" : "219c7921-daa4-486f-93c9-c88042da98cc",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Oh wait, this was actually correct before. Sorry, I confused the docstring with the function def.",
        "createdAt" : "2020-02-06T12:08:47Z",
        "updatedAt" : "2020-02-06T14:06:22Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "deb857157159400fbc74f2f4035ec78918429f1d",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +643,647 @@    def randint(self, low, high=None, size=None, dtype=int):\n        \"\"\"\n        randint(low, high=None, size=None, dtype=int)\n\n        Return random integers from `low` (inclusive) to `high` (exclusive)."
  },
  {
    "id" : "1b0950c8-6715-4389-b09e-be1dbbc0453e",
    "prId" : 15511,
    "prUrl" : "https://github.com/numpy/numpy/pull/15511#pullrequestreview-354351821",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e79a5952-e733-4d88-b1d6-4219a19138b5",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```suggestion\r\n            The default value is ``np.int_``.\r\n```",
        "createdAt" : "2020-02-06T10:40:44Z",
        "updatedAt" : "2020-02-06T14:06:22Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "deb857157159400fbc74f2f4035ec78918429f1d",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +671,675 @@        dtype : dtype, optional\n            Desired dtype of the result. Byteorder must be native.\n            The default value is int.\n\n            .. versionadded:: 1.11.0"
  },
  {
    "id" : "753e0fd0-3f8d-4f7f-8e6d-1bcfd6de28d7",
    "prId" : 18211,
    "prUrl" : "https://github.com/numpy/numpy/pull/18211#pullrequestreview-574958154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77c990b1-0caf-4d25-abeb-02d4ad6b228e",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could this be `x.size < 2`? Also below.",
        "createdAt" : "2021-01-24T17:26:55Z",
        "updatedAt" : "2021-01-24T17:26:55Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "be00c31a-89fd-4a6b-8d57-8a2f1641dc5f",
        "parentId" : "77c990b1-0caf-4d25-abeb-02d4ad6b228e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Could that change the random stream? I don't think it's particularly worth optimizing for.",
        "createdAt" : "2021-01-24T18:07:41Z",
        "updatedAt" : "2021-01-24T18:07:41Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b3931234-9c47-4ecd-9394-3f0f69e268ab",
        "parentId" : "77c990b1-0caf-4d25-abeb-02d4ad6b228e",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "It shouldn't. If `x.size == 1`, then `n == 1`, so the loop that draws from `random_interval()` will not actually execute because `range(1, n)` is empty. But also not especially worth optimizing for.",
        "createdAt" : "2021-01-24T18:49:18Z",
        "updatedAt" : "2021-01-24T18:49:18Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cbfefb4c69b130f8b01408615e9f7b42b707beb",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +4459,4463 @@                    self._shuffle_raw(n, itemsize, stride, x_ptr, buf_ptr)\n        elif isinstance(x, np.ndarray):\n            if x.size == 0:\n                # shuffling is a no-op\n                return"
  }
]