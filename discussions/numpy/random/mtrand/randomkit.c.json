[
  {
    "id" : "90e658b8-dd72-469a-99ea-a51397015ce0",
    "prId" : 6910,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a3623c9-e459-403f-ba03-ee573985b202",
        "parentId" : null,
        "authorId" : "761f7d93-791b-43d6-b8b6-695bb6fd132d",
        "body" : "`rk_random` returns a random `uint32` stored in an `unsigned long`, so shouldn't we mask out the upper bits?\n\n``` C\nnpy_uint64 lower = (npy_uint64)(rk_random(state) & 0xffffffffUL);\n```\n",
        "createdAt" : "2015-12-31T05:42:54Z",
        "updatedAt" : "2016-01-03T03:05:39Z",
        "lastEditedBy" : "761f7d93-791b-43d6-b8b6-695bb6fd132d",
        "tags" : [
        ]
      },
      {
        "id" : "644564cf-b5d5-46e2-aca1-3dff83eef8cc",
        "parentId" : "0a3623c9-e459-403f-ba03-ee573985b202",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Upper bits are zero, `rk_random` is always a 32 bit number stored in a long. Masking won't hurt, but shouldn't be needed.\n",
        "createdAt" : "2015-12-31T05:55:20Z",
        "updatedAt" : "2016-01-03T03:05:39Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "d854f87e-6026-4833-81b9-80b4689ea597",
        "parentId" : "0a3623c9-e459-403f-ba03-ee573985b202",
        "authorId" : "761f7d93-791b-43d6-b8b6-695bb6fd132d",
        "body" : "If we know they are zero it is ok. I was worried they might have junk bits which could interfere with the distribution and the determinism.\n",
        "createdAt" : "2015-12-31T05:59:04Z",
        "updatedAt" : "2016-01-03T03:05:39Z",
        "lastEditedBy" : "761f7d93-791b-43d6-b8b6-695bb6fd132d",
        "tags" : [
        ]
      },
      {
        "id" : "7b0c0c4b-ccaf-4ff1-b266-a596d4c73698",
        "parentId" : "0a3623c9-e459-403f-ba03-ee573985b202",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I understand ;) The Mersenne twister would be in big trouble if it weren't true, as the output would depend on the size of long. It is hard to trace all the way through, but one must have faith. Sometimes. In any case, the current `rk_ulong` function makes the same assumption, although it uses a `|` instead of a `+`. Hmm, might be a trifle faster.\n",
        "createdAt" : "2015-12-31T06:25:49Z",
        "updatedAt" : "2016-01-03T03:05:39Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc2a97bde26a026e75adec7ec70566be3005c47c",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +258,262 @@{\n    npy_uint64 upper = (npy_uint64)rk_random(state) << 32;\n    npy_uint64 lower = (npy_uint64)rk_random(state);\n    return upper | lower;\n}"
  },
  {
    "id" : "8cb70483-d74d-48b6-b8eb-35ae12684915",
    "prId" : 6910,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d68e195-ec61-43ba-9d61-310492f3a17d",
        "parentId" : null,
        "authorId" : "761f7d93-791b-43d6-b8b6-695bb6fd132d",
        "body" : "``` C\nreturn (npy_uint32)(rk_random(state) & 0xffffffffUL);\n```\n",
        "createdAt" : "2015-12-31T05:55:21Z",
        "updatedAt" : "2016-01-03T03:05:39Z",
        "lastEditedBy" : "761f7d93-791b-43d6-b8b6-695bb6fd132d",
        "tags" : [
        ]
      },
      {
        "id" : "97d5dfdb-7cdc-4f16-85ab-3f95fb226228",
        "parentId" : "9d68e195-ec61-43ba-9d61-310492f3a17d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Not needed, the cast is defined to discard the higher bits by the C standard.\n",
        "createdAt" : "2015-12-31T06:15:28Z",
        "updatedAt" : "2016-01-03T03:05:39Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc2a97bde26a026e75adec7ec70566be3005c47c",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +269,273 @@rk_uint32(rk_state *state)\n{\n    return (npy_uint32)rk_random(state);\n}\n"
  },
  {
    "id" : "eeefbb01-0406-4f65-ae1e-9d6458a243f8",
    "prId" : 6910,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62761f57-5988-434e-857e-0595ade94d9c",
        "parentId" : null,
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "I think you meant `npy_uint32` here?\n",
        "createdAt" : "2016-01-01T07:39:04Z",
        "updatedAt" : "2016-01-03T03:05:39Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      },
      {
        "id" : "5424b87a-7c45-4338-b6a2-210bae580d5e",
        "parentId" : "62761f57-5988-434e-857e-0595ade94d9c",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "For some reason that fix doesn't show up here.\n",
        "createdAt" : "2016-01-02T04:22:50Z",
        "updatedAt" : "2016-01-03T03:05:39Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "13427b92-fbef-4442-ad42-f2337a8aa33b",
        "parentId" : "62761f57-5988-434e-857e-0595ade94d9c",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "Ah, yes, I see.  You did indeed make the fix.  Congratulations on breaking GitHub :smile: \n",
        "createdAt" : "2016-01-02T04:27:27Z",
        "updatedAt" : "2016-01-03T03:05:39Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc2a97bde26a026e75adec7ec70566be3005c47c",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +274,278 @@\n/*\n * Fills an array with cnt random npy_uint64 between off and off + rng\n * inclusive. The numbers wrap if rng is sufficiently large.\n */"
  }
]