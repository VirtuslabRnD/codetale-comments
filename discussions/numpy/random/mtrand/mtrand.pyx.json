[
  {
    "id" : "8c8792a4-f8c0-45ad-a417-45f6a9404585",
    "prId" : 348,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f68a159-897f-4513-8bef-f904870ce0c4",
        "parentId" : null,
        "authorId" : "cbe4f83e-1941-49a4-9a3f-c8f37d127487",
        "body" : "Will this copy the whole slice of the array to the temp buffer? It seems that if so it would not be in-place.  Also this won't shuffle individual items in the dimensions of the array, only the outer array, is this intended?\n",
        "createdAt" : "2012-07-12T18:22:07Z",
        "updatedAt" : "2012-07-17T15:52:05Z",
        "lastEditedBy" : "cbe4f83e-1941-49a4-9a3f-c8f37d127487",
        "tags" : [
        ]
      },
      {
        "id" : "9026713a-76b6-4f76-b66e-093cef21acc7",
        "parentId" : "7f68a159-897f-4513-8bef-f904870ce0c4",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "(1) Yes, unfortunately numpy doesn't have an in-place swap function, so the temp buffer is used to accomplish that. The array is still modified in place -- two lines down the buffer gets written back to it. (2) And yes, this only shuffles items in the outer array, which is what the function is documented to do. I'd have thought shuffling along an axis made more sense, but the API was made 5+ years ago so...\n",
        "createdAt" : "2012-07-13T00:47:09Z",
        "updatedAt" : "2012-07-17T15:52:05Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "b26c675e2a91e1042f8f8d634763942c87fbbb6e",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +4404,4408 @@            while i > 0:\n                j = rk_interval(i, self.internal_state)\n                buf[...] = x[j]\n                x[j] = x[i]\n                x[i] = buf"
  },
  {
    "id" : "aa9a54dd-1a12-44db-8828-beea4e69e724",
    "prId" : 2992,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cb8869e-a838-4f87-87e3-ab9c02b913a9",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Maybe I can just skip this completly... would cause floats, etc. to work at least the for the time being, but...\n",
        "createdAt" : "2013-02-15T21:42:49Z",
        "updatedAt" : "2013-03-04T13:13:53Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "66ffc58fb390c3953f9e3047ed9da54329af6baf",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1000,1004 @@            try:\n                # __index__ must return an integer by python rules.\n                pop_size = operator.index(a.item())\n            except TypeError:\n                raise ValueError(\"a must be 1-dimensional or an integer\")"
  },
  {
    "id" : "ad012173-f776-436e-bbaf-51407866621c",
    "prId" : 4286,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e57f7e1c-f006-45a5-b0f5-c4a998dfae6b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK.\n",
        "createdAt" : "2014-02-12T19:35:13Z",
        "updatedAt" : "2014-02-13T18:45:37Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0981867cf1d7b5adab4db46d601365400ed52892",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +4432,4436 @@        # Logic adapted from random.shuffle()\n        if isinstance(x, np.ndarray) and \\\n           (x.ndim > 1 or x.dtype.fields is not None):\n            # For a multi-dimensional ndarray, indexing returns a view onto\n            # each row. So we can't just use ordinary assignment to swap the"
  },
  {
    "id" : "4d70973a-4344-4164-ba35-c2a7ae7e5110",
    "prId" : 4348,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "890787f1-236b-4b0f-a360-28a0506aa9b1",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What does `operator.index` do here?\n",
        "createdAt" : "2014-02-22T15:44:44Z",
        "updatedAt" : "2014-02-22T15:44:44Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "8641ed33-3309-4be4-80ef-238aadf513aa",
        "parentId" : "890787f1-236b-4b0f-a360-28a0506aa9b1",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "get an integer, though I guess it could be skipped as the float cases is already handled below\n",
        "createdAt" : "2014-02-22T16:03:31Z",
        "updatedAt" : "2014-02-22T16:03:31Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "fdb219f58740748229c2142c5643e79ae1c27d69",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +604,608 @@                errcode = rk_randomseed(self.internal_state)\n            else:\n                rk_seed(operator.index(seed), self.internal_state)\n        except TypeError:\n            obj = <ndarray>PyArray_ContiguousFromObject(seed, NPY_LONG, 1, 1)"
  },
  {
    "id" : "fb662b15-e052-4724-ad9b-a4eb018de57a",
    "prId" : 4640,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab0e65ea-21d1-4d5a-9441-490923ac6f07",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Should also be a ',' after given ;)\n",
        "createdAt" : "2014-04-25T16:53:47Z",
        "updatedAt" : "2014-04-25T16:53:47Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d3c3bd6cfe72b6999e14860722837d8a29e02ce",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +947,951 @@        p : 1-D array-like, optional\n            The probabilities associated with each entry in a.\n            If not given the sample assumes a uniform distribution over all\n            entries in a.\n"
  },
  {
    "id" : "cfc78464-39d0-4b11-9388-215e527641d5",
    "prId" : 5131,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "829338d4-5b00-47ba-a897-3dd1de3e2406",
        "parentId" : null,
        "authorId" : "0923ca4e-59cb-4f09-b99d-f64f4ecb143c",
        "body" : "Addressed review feedback.\n",
        "createdAt" : "2014-09-28T04:40:43Z",
        "updatedAt" : "2014-09-28T04:40:43Z",
        "lastEditedBy" : "0923ca4e-59cb-4f09-b99d-f64f4ecb143c",
        "tags" : [
        ]
      }
    ],
    "commit" : "74ae35de25f8e1d490e0c8c8bfa7572a3ebad76b",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1231,1235 @@\n        fscale = fhigh - flow\n        if not npy_isfinite(fscale):\n            raise OverflowError('Range exceeds valid bounds')\n"
  },
  {
    "id" : "3d70513b-4a0a-4b2c-a3f2-56713ed505ca",
    "prId" : 5726,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6978fc09-c1a0-4d56-8cc1-0cd71aba541a",
        "parentId" : null,
        "authorId" : "b45c88f5-7e2c-4755-bcc5-e61278ccac1d",
        "body" : "I would be the entire next part under\n`if check_valid != 'ignore':`\n\nno reason to check if we `'ignore'`\n",
        "createdAt" : "2015-05-10T23:28:33Z",
        "updatedAt" : "2017-01-03T21:37:20Z",
        "lastEditedBy" : "b45c88f5-7e2c-4755-bcc5-e61278ccac1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c85d199df3da21d5f92b75424c2b3c84327528f0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +4499,4503 @@\n        (u, s, v) = svd(cov)\n\n        if check_valid != 'ignore':\n            if check_valid != 'warn' and check_valid != 'raise':"
  },
  {
    "id" : "2c629b34-d106-4650-b154-d9c2165a28f6",
    "prId" : 5726,
    "prUrl" : "https://github.com/numpy/numpy/pull/5726#pullrequestreview-15013177",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b515b47a-591e-4094-882a-61018e355c0b",
        "parentId" : null,
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Can you add a check for ``check_valid`` being one of the 3 accepted strings?",
        "createdAt" : "2017-01-03T20:49:51Z",
        "updatedAt" : "2017-01-03T21:37:20Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "2ca35e69-4ba7-4069-b1a1-35495dc92871",
        "parentId" : "b515b47a-591e-4094-882a-61018e355c0b",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "actually, move it from line 4511 up here. It's misplaced there; only checked for when ``not psd``.",
        "createdAt" : "2017-01-03T20:52:06Z",
        "updatedAt" : "2017-01-03T21:37:20Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "d8700075-7429-47ff-b73c-c8c9f915f501",
        "parentId" : "b515b47a-591e-4094-882a-61018e355c0b",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "that looks good now",
        "createdAt" : "2017-01-03T21:11:14Z",
        "updatedAt" : "2017-01-03T21:37:20Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "3f52c8e2-9406-41d9-86fc-0ca2e9ff1004",
        "parentId" : "b515b47a-591e-4094-882a-61018e355c0b",
        "authorId" : "176bcdb4-5a9d-4143-8382-4426a2858fdd",
        "body" : "note that the check is itself later in the code, when checking. However, it may go unchecked when the psd passes, so I have rearranged the logic so it is always checked.",
        "createdAt" : "2017-01-03T21:14:23Z",
        "updatedAt" : "2017-01-03T21:37:20Z",
        "lastEditedBy" : "176bcdb4-5a9d-4143-8382-4426a2858fdd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c85d199df3da21d5f92b75424c2b3c84327528f0",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +4475,4479 @@        if mean.shape[0] != cov.shape[0]:\n            raise ValueError(\"mean and cov must have same length\")\n\n        # Compute shape of output and create a matrix of independent\n        # standard normally distributed random numbers. The matrix has rows"
  },
  {
    "id" : "d1543ec7-3d6d-4773-9c73-117d22cb7444",
    "prId" : 5814,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e319304-c7b4-4dbc-8f8c-a6429a31b14d",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Tested? I note that `y` is no longer normalized.\n",
        "createdAt" : "2015-04-29T19:51:52Z",
        "updatedAt" : "2015-04-29T19:51:52Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c3df3771-8302-4edd-b4cd-b4ba2b7b00cc",
        "parentId" : "4e319304-c7b4-4dbc-8f8c-a6429a31b14d",
        "authorId" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "body" : "Right, `y` is not divided by its maximum value anymore.  But why were they doing that originally?  I think that with this change, both the histogram and pdf should integrate to ~1.0.\n",
        "createdAt" : "2015-04-29T19:59:04Z",
        "updatedAt" : "2015-04-29T19:59:04Z",
        "lastEditedBy" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "tags" : [
        ]
      },
      {
        "id" : "7c9f82e2-b30d-4f8e-8076-0702def09bdd",
        "parentId" : "4e319304-c7b4-4dbc-8f8c-a6429a31b14d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'm guessing that the curve was supposed to pass through the tops of the histogram bars. Might be worth running a check...\n",
        "createdAt" : "2015-04-29T20:56:25Z",
        "updatedAt" : "2015-04-29T20:56:25Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "48965cd8-6e9e-43a0-9ad9-3a8b1660e771",
        "parentId" : "4e319304-c7b4-4dbc-8f8c-a6429a31b14d",
        "authorId" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "body" : "No, the `normed` argument of [`hist`](http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.hist) normalizes the area not the maximum.  So in http://docs.scipy.org/doc/numpy/reference/generated/numpy.random.vonmises.html the histogram has area 1.0 but the density curve has maximum 1.0, and it's mostly a coincidence that the maximum of the histogram is also near 1.0. If not for this coincidence, the problems mentioned in https://github.com/numpy/numpy/issues/5811 probably would have been found sooner.\n",
        "createdAt" : "2015-04-29T21:14:11Z",
        "updatedAt" : "2015-04-29T21:14:11Z",
        "lastEditedBy" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "tags" : [
        ]
      },
      {
        "id" : "70a2daba-c134-497b-bd83-6ab26ad33324",
        "parentId" : "4e319304-c7b4-4dbc-8f8c-a6429a31b14d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'm not arguing at this point ;) I'd just like to see the plot...\n",
        "createdAt" : "2015-04-29T21:51:54Z",
        "updatedAt" : "2015-04-29T21:51:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8206e8df495e0bd050e57cd74f6177058a61dc2b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +2529,2533 @@        >>> x = np.linspace(-np.pi, np.pi, num=51)\n        >>> y = np.exp(kappa*np.cos(x-mu))/(2*np.pi*i0(kappa))\n        >>> plt.plot(x, y, linewidth=2, color='r')\n        >>> plt.show()\n"
  },
  {
    "id" : "cd7e8b2a-9a22-4182-81cd-103e95a8f37c",
    "prId" : 5822,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a632252-67ce-4b1d-8ffc-0d0e1b7280af",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "This is calling `rk_standard_gamma` with `shape = 0`. If you go to [the source code of that function](https://github.com/numpy/numpy/blob/master/numpy/random/mtrand/distributions.c#L125) in `distributions.c`, you will find that, with `shape = 0`, you are computing things like `X = pow(U, 1./shape))`. I think we should handle that particular case directly there, not rely on the behavior of `pow` for corner cases.\n",
        "createdAt" : "2015-05-02T12:08:36Z",
        "updatedAt" : "2016-06-09T15:58:43Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "0319d0ce3436d39a739b2537e60c1eaced80a6ca",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2151,2155 @@        if np.any(np.signbit(oshape)):\n            raise ValueError(\"shape < 0\")\n        return cont1_array(self.internal_state, rk_standard_gamma, size,\n                           oshape, self.lock)\n"
  },
  {
    "id" : "bc5864d1-336e-4004-91e1-e969b9d9184c",
    "prId" : 5822,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9d37c11-e1a6-4703-badb-8185225a4854",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "Similarly here, [`rk_pareto`](https://github.com/numpy/numpy/blob/master/numpy/random/mtrand/distributions.c#L624) will be doing a division by zero.\n",
        "createdAt" : "2015-05-02T12:11:46Z",
        "updatedAt" : "2016-06-09T15:58:43Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "0319d0ce3436d39a739b2537e60c1eaced80a6ca",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3010,3014 @@            if fa <= 0:\n                raise ValueError(\"a <= 0\")\n            return cont1_array_sc(self.internal_state, rk_pareto, size, fa,\n                                  self.lock)\n"
  },
  {
    "id" : "7a202637-a5fc-4a97-b6a1-0b9fbfb1f7bb",
    "prId" : 5822,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "772ac1e2-db0e-453a-a565-f924a7f365f8",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "[Another division by zero](https://github.com/numpy/numpy/blob/master/numpy/random/mtrand/distributions.c#L629).\n",
        "createdAt" : "2015-05-02T12:12:48Z",
        "updatedAt" : "2016-06-09T15:58:43Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "0319d0ce3436d39a739b2537e60c1eaced80a6ca",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3124,3128 @@        if np.any(np.signbit(oa)):\n            raise ValueError(\"a < 0\")\n        return cont1_array(self.internal_state, rk_weibull, size, oa,\n                           self.lock)\n"
  },
  {
    "id" : "aff1ff1c-fd55-4a6e-9914-b77984baa310",
    "prId" : 5822,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e89d959-1f02-4b37-b03a-dd2fdd17687f",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "[And another](https://github.com/numpy/numpy/blob/master/numpy/random/mtrand/distributions.c#L629).\n",
        "createdAt" : "2015-05-02T12:13:44Z",
        "updatedAt" : "2016-06-09T15:58:43Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "0319d0ce3436d39a739b2537e60c1eaced80a6ca",
    "line" : null,
    "diffHunk" : "@@ -1,1 +3236,3240 @@        if np.any(np.signbit(oa)):\n            raise ValueError(\"a < 0\")\n        return cont1_array(self.internal_state, rk_power, size, oa, self.lock)\n\n    def laplace(self, loc=0.0, scale=1.0, size=None):"
  },
  {
    "id" : "bcde622c-6c93-427f-9cde-8283850d6605",
    "prId" : 6131,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2e144b9-6aa3-452f-b03a-71b170512a8c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Here I think we could check if `p` can be cast to double with `NPY_SAME_KIND_CASTING`, then use `PyArray_FromAny` with `NPY_ARRAY_FORCECAST`. I wonder if Cython has a simple way to specify that?\n",
        "createdAt" : "2015-07-30T00:23:09Z",
        "updatedAt" : "2015-07-30T00:23:09Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "831e2516-49d3-4afd-b9ed-275bffad0226",
        "parentId" : "b2e144b9-6aa3-452f-b03a-71b170512a8c",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like we could just import `array` and use that. We would still need to check casting.\n",
        "createdAt" : "2015-07-30T00:28:06Z",
        "updatedAt" : "2015-07-30T00:28:06Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "32d21a60-639e-4316-a1af-63c777b858d2",
        "parentId" : "b2e144b9-6aa3-452f-b03a-71b170512a8c",
        "authorId" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "body" : "Sorry I don't understand these comments, because I'm not too familiar with the C-level Python interface and its flags. Are these comments intended to address https://github.com/numpy/numpy/issues/6132? The scope of this PR doesn't currently include fixing that.\n",
        "createdAt" : "2015-07-30T15:50:14Z",
        "updatedAt" : "2015-07-30T15:50:14Z",
        "lastEditedBy" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "tags" : [
        ]
      },
      {
        "id" : "9f921034-441d-4067-a2bd-b52961f8f6f7",
        "parentId" : "b2e144b9-6aa3-452f-b03a-71b170512a8c",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yes, this just seemed a good place to make a comment ;)\n",
        "createdAt" : "2015-07-30T15:59:07Z",
        "updatedAt" : "2015-07-30T15:59:07Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6d0263239926e8b14ebc26a0d7b9469fa7866d4",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +1091,1095 @@                    atol = max(atol, np.sqrt(np.finfo(p.dtype).eps))\n\n            p = <ndarray>PyArray_ContiguousFromObject(p, NPY_DOUBLE, 1, 1)\n            pix = <double*>PyArray_DATA(p)\n"
  },
  {
    "id" : "18601ded-c323-4b41-a04d-26bbd83ec146",
    "prId" : 6910,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d33ba627-032f-4b81-bbf1-3e556f14e3e5",
        "parentId" : null,
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "Ah, this is how you got around the issue that I was addressing in #6885.  Cool.\n",
        "createdAt" : "2016-01-01T04:27:28Z",
        "updatedAt" : "2016-01-03T03:05:39Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc2a97bde26a026e75adec7ec70566be3005c47c",
    "line" : 406,
    "diffHunk" : "@@ -1,1 +1273,1277 @@        with self.lock:\n            return randfunc(low, high - 1, size, self.state_address)\n\n    def bytes(self, npy_intp length):\n        \"\"\""
  },
  {
    "id" : "0bfbc738-ad71-4f36-ad6f-2586158a0adf",
    "prId" : 6910,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2f74ede-4486-45c0-a64f-c7a7052e408b",
        "parentId" : null,
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "Question: why is everything in the `else` block (save `array`) being casted as `np.uint32` when we are returning a random array of `np.int32`?  Similar question for `rand_int64`.\n",
        "createdAt" : "2016-01-01T07:43:13Z",
        "updatedAt" : "2016-01-03T03:05:39Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      },
      {
        "id" : "0b83f198-7932-4e1a-8c47-eac1003d41f9",
        "parentId" : "c2f74ede-4486-45c0-a64f-c7a7052e408b",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "Because it works, the magic of two's complement I guess... Say you pass in a range of -5 to 5, and for brevity let's pretend this was an 8 bit version. The range is properly converted to a uint8 10, but low gets converted to uint8 251, 11111011 in binary. When the `rk_random_uint32` function e.g. adds 6, 00000110 in binary, to low, the result would be 257, 100000001 in binary, but because we have fixed width integers, and unsigned addition overflow is not undefined, the high bit is discarded, and you get the correct 1 value.\n\nPerhaps it is worth a comment somewhere: it wasn't obvious to me either.\n",
        "createdAt" : "2016-01-01T12:46:49Z",
        "updatedAt" : "2016-01-03T03:05:39Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "9d07c1d5-b21d-42e1-a3f2-f39939a9139b",
        "parentId" : "c2f74ede-4486-45c0-a64f-c7a7052e408b",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "Ah, okay, that's fair.  I think @charris made comments about numbers wrapping in `randomkit.c` in the case that `off` is large.  Though it would seem useful to make a minor comment somewhere in `mtrand.pyx` too as you suggested.\n",
        "createdAt" : "2016-01-01T13:13:53Z",
        "updatedAt" : "2016-01-03T03:05:39Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      },
      {
        "id" : "bea42263-fdb6-4040-8c3f-7cbd529c0b72",
        "parentId" : "c2f74ede-4486-45c0-a64f-c7a7052e408b",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "At the bit level, there is no difference between signed/unsigned addition and subtraction on two's complement machines. However, unsigned arithmetic is specified to be modular, so overflow is always ignored. For signed integers the behavior may be undefined. Here we need to be careful to convert signed integers to two's complement signed binary integers and then treat those integers as unsigned, hence the double cast in some cases. The difference needs to be a positive so the generated random offsets can the added to the offset. To see how this works in practice, think of the unsigned numbers a located on a circle, increasing clockwise, with 0 just after the largest, and call 0 the wrapping point. Signed arithmetic is on the same circle, but the wrapping point is chosen to be at the most negative value represented by `0x100....0` on the circle. Addition of positive numbers moves a point clockwise around the circle in both cases. To make sure every thing works as expected the low and high bounds are checked before the call so that proceeding clockwise from the lowest to the highest never crosses the chosen wrapping point.\n\nNote that another option for representing signed numbers is offset binary, which can be advantageous in some circuit designs and DSP.\n",
        "createdAt" : "2016-01-03T18:24:11Z",
        "updatedAt" : "2016-01-03T18:24:11Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e9e70a78-b205-4439-96d1-a0aab7dceb03",
        "parentId" : "c2f74ede-4486-45c0-a64f-c7a7052e408b",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "Right, that is true.  What you did is perfectly fine.  I was just confused initially because the return type and castings were slightly different.  Thanks @charris and @jaimefrio for clarifying!\n",
        "createdAt" : "2016-01-03T21:07:54Z",
        "updatedAt" : "2016-01-03T21:07:54Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc2a97bde26a026e75adec7ec70566be3005c47c",
    "line" : 175,
    "diffHunk" : "@@ -1,1 +732,736 @@        with nogil:\n            rk_random_uint32(off, rng, cnt, out, state)\n        return array\n\n"
  },
  {
    "id" : "40e49753-7684-434a-86bb-92b6f19bf698",
    "prId" : 6910,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be6bfdd7-859e-4b38-b432-6402a8466d02",
        "parentId" : null,
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "Just curious: in light of the recent discussion surrounding half-open and closed intervals, is it worth deprecating this function in this release (or rather, this PR)?\n",
        "createdAt" : "2016-01-01T22:00:04Z",
        "updatedAt" : "2016-01-03T03:05:39Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc2a97bde26a026e75adec7ec70566be3005c47c",
    "line" : 346,
    "diffHunk" : "@@ -1,1 +1194,1198 @@                [ True,  True]]], dtype=bool)\n\n        \"\"\"\n        return disc0_array(self.internal_state, rk_long, size, self.lock)\n"
  },
  {
    "id" : "d2768d7f-62c8-4a55-bb8e-990067b7bdf8",
    "prId" : 6910,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d4d54d3-a26a-4a09-aa98-667bac74c4b8",
        "parentId" : null,
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "Quotes.\n",
        "createdAt" : "2016-01-03T22:30:56Z",
        "updatedAt" : "2016-01-03T22:30:56Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc2a97bde26a026e75adec7ec70566be3005c47c",
    "line" : 372,
    "diffHunk" : "@@ -1,1 +1222,1226 @@        dtype : dtype, optional\n            Desired dtype of the result. All dtypes are determined by their\n            name, i.e., 'int64', 'int`, etc, so byteorder is not available\n            and a specific precision may have different C types depending\n            on the platform. The default value is 'l' (C long)."
  },
  {
    "id" : "17160b66-0eb3-473e-abec-25db9dafe89a",
    "prId" : 6933,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4959f1d-4048-4c3c-a5de-7a7b76f46aff",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Why the cast to `size_t`?\n",
        "createdAt" : "2016-01-12T17:44:20Z",
        "updatedAt" : "2016-01-17T04:57:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "258a7c49-14c3-4161-8cc9-abbe6cb6f714",
        "parentId" : "d4959f1d-4048-4c3c-a5de-7a7b76f46aff",
        "authorId" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "body" : "Because Cython interprets `<char*>python_object` as casting a bytes object (_not_ an object supporting the buffer protocol) to a `char*`, but `<char*>c_object` as a C-style cast.  (If you try it you'll get \"TypeError: expected bytes, int (or whatever you pass in) found\")\n",
        "createdAt" : "2016-01-12T18:18:43Z",
        "updatedAt" : "2016-01-17T04:57:35Z",
        "lastEditedBy" : "4b199d8d-ad49-4d20-ac90-89741ac9c7bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "309fdd4cd1400fc392acfa418226bd7f8b10073d",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +4991,4995 @@            # Only for non-empty, 1d objects of class ndarray (subclasses such\n            # as MaskedArrays may not support this approach).\n            x_ptr = <char*><size_t>x.ctypes.data\n            stride = x.strides[0]\n            itemsize = x.dtype.itemsize"
  },
  {
    "id" : "2b44c728-df15-4044-8275-8c0cca56fda4",
    "prId" : 6997,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c32fa25c-083a-400e-b820-9315f6bd1602",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "Is `dtype=int` the correct value to always get a C `long`? Hopefully Appveyor will tell us if this breaks for 64 bit Windows and its 32 bit longs...\n",
        "createdAt" : "2016-01-20T09:09:37Z",
        "updatedAt" : "2016-01-20T11:47:56Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "f3ed2ba5-6eb8-44ee-a786-cc911b92e8b3",
        "parentId" : "c32fa25c-083a-400e-b820-9315f6bd1602",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "I was following what had been done in the `else` block, but now I suddenly see that there is a gap in the testing there because the `test_binomial` function (and I suspect other functions as well) never tests broadcasting and hence the `else` block is not reached in the tests.\n\nIs there perhaps a safer `dtype` we could use?  Perhaps `np.long`?\n",
        "createdAt" : "2016-01-20T09:16:47Z",
        "updatedAt" : "2016-01-20T11:47:56Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      },
      {
        "id" : "a83aee7e-8c2a-478d-8bf7-f9db127d427d",
        "parentId" : "c32fa25c-083a-400e-b820-9315f6bd1602",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "`int` always translates to `np.int_` which always translates to long (since ths is the python object, not some Cython stuff).That said, np.long is much more clear and I agree we should prefer that if we mean a C long equivalent.\n",
        "createdAt" : "2016-01-20T09:36:05Z",
        "updatedAt" : "2016-01-20T11:47:56Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "435a79de-b1cd-4a26-be1b-923ce9320444",
        "parentId" : "c32fa25c-083a-400e-b820-9315f6bd1602",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : ":+1: - done.\n",
        "createdAt" : "2016-01-20T11:16:56Z",
        "updatedAt" : "2016-01-20T11:47:56Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      },
      {
        "id" : "2e40e814-6c3f-4b81-bdf7-6a0718500660",
        "parentId" : "c32fa25c-083a-400e-b820-9315f6bd1602",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "Hmm...apparently `np.long` is <b>not</b> the way to go, as Travis failed on the 32-bit build <a href=\"https://travis-ci.org/numpy/numpy/builds/103579150\">here</a>.  Reverting to `np.int`.\n",
        "createdAt" : "2016-01-20T11:36:40Z",
        "updatedAt" : "2016-01-20T11:47:56Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      },
      {
        "id" : "5b18d0ee-fa87-40f1-87c6-7de87e7fed47",
        "parentId" : "c32fa25c-083a-400e-b820-9315f6bd1602",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "Just use `int`. `np.int` is an unnecessary alias.\n",
        "createdAt" : "2016-01-20T11:44:43Z",
        "updatedAt" : "2016-01-20T11:47:56Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      },
      {
        "id" : "731b6bb7-72e9-4da0-917a-4d67834d2027",
        "parentId" : "c32fa25c-083a-400e-b820-9315f6bd1602",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "Fair enough.  Done.\n",
        "createdAt" : "2016-01-20T11:48:17Z",
        "updatedAt" : "2016-01-20T11:48:17Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b150b8cfafa4d8c75e47e6e9c8b3b23d7c0a2b6",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +367,371 @@    if size is None:\n        multi = <broadcast>np.broadcast(on, op)\n        array = <ndarray>np.empty(multi.shape, dtype=int)\n    else:\n        array = <ndarray>np.empty(size, dtype=int)"
  },
  {
    "id" : "98ca0fe6-d949-4293-a18e-0fbf2d08be87",
    "prId" : 7082,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "271e7f85-9cbc-48eb-ae85-e6de1de7a48d",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "I guess we should modify the description of `low` to `float or array-like of floats, optional`, shouldn't we?\n\nThe same of course applies to all other broadcastable arguments.\n",
        "createdAt" : "2016-01-23T11:19:26Z",
        "updatedAt" : "2016-01-23T15:20:29Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "17175dbf-cd4e-4a35-b398-9fb38c418f0c",
        "parentId" : "271e7f85-9cbc-48eb-ae85-e6de1de7a48d",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "Fair enough.  Done.\n",
        "createdAt" : "2016-01-23T17:00:26Z",
        "updatedAt" : "2016-01-23T17:00:26Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0980ff9d32e690b13b8d3c6b0a797771ee33b57",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1469,1473 @@        size : int or tuple of ints, optional\n            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then\n            ``m * n * k`` samples are drawn.  If size is ``None`` (default),\n            a single value is returned if ``low`` and ``high`` are both scalars.\n            Otherwise, ``np.broadcast(low, high).size`` samples are drawn."
  },
  {
    "id" : "d588faa4-c668-4d1d-aaad-e9eee948d7bf",
    "prId" : 7305,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33ec244f-4695-4949-8dfd-555d01a285a3",
        "parentId" : null,
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "Any reason not to just do\n\n```\nwith lock, nogil:\n    return func(state)\n```\n\n? Ditto for the other nine or so cases?\n",
        "createdAt" : "2016-02-22T16:28:23Z",
        "updatedAt" : "2016-02-22T16:29:01Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "6efce39b-f11a-4574-80ee-0514bdf4d0ad",
        "parentId" : "33ec244f-4695-4949-8dfd-555d01a285a3",
        "authorId" : "5b4b2987-0e91-4ef4-9979-c7429bac44c4",
        "body" : "That's what I wrote at first, but Cython forbids returning a PyObject without the GIL, apparently. (Seems like a bug in Cython, but whatever).\n",
        "createdAt" : "2016-02-22T16:45:51Z",
        "updatedAt" : "2016-02-22T16:46:52Z",
        "lastEditedBy" : "5b4b2987-0e91-4ef4-9979-c7429bac44c4",
        "tags" : [
        ]
      },
      {
        "id" : "f3f0aee7-a386-4ce7-976a-0a4710d57278",
        "parentId" : "33ec244f-4695-4949-8dfd-555d01a285a3",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "I think that's a deliberate choice, not a bug. Either way, it's certainly a good reason to write the code the way you did. LGTM\n",
        "createdAt" : "2016-02-22T16:53:33Z",
        "updatedAt" : "2016-02-22T16:53:33Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cdff27107b5feb0f6bfe5c408970716b19aa93d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +160,164 @@    if size is None:\n        with lock, nogil:\n            rv = func(state)\n        return rv\n    else:"
  },
  {
    "id" : "44739352-bcd8-49ae-8ab6-210e20b2f1b9",
    "prId" : 7536,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63ee7c1c-3b55-42c3-adb7-f26cbb82adbc",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'm curious to see if this path is portable to Windows. I suspect not and wonder why the path isn't in the normal cython search path.\n",
        "createdAt" : "2016-04-10T16:57:12Z",
        "updatedAt" : "2016-04-10T16:57:12Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "e6381100-d06c-4354-8056-63889ead1692",
        "parentId" : "63ee7c1c-3b55-42c3-adb7-f26cbb82adbc",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like it isn't a problem.\n",
        "createdAt" : "2016-04-10T17:51:59Z",
        "updatedAt" : "2016-04-10T17:51:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "38dabadd-adaa-48e1-b441-f9608c5c2013",
        "parentId" : "63ee7c1c-3b55-42c3-adb7-f26cbb82adbc",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "Yeah, windows is totally happy to accept `/` as a path separator.\n",
        "createdAt" : "2016-04-10T18:33:28Z",
        "updatedAt" : "2016-04-10T18:33:28Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2c4c117478b34a0761a98a9e5c474ab5c4f5490",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +24,28 @@include \"Python.pxi\"\ninclude \"numpy.pxd\"\ninclude \"cpython/pycapsule.pxd\"\n\nfrom libc cimport string"
  },
  {
    "id" : "f4a3e463-d95c-4e57-bfb0-2c8d1183038b",
    "prId" : 8846,
    "prUrl" : "https://github.com/numpy/numpy/pull/8846#pullrequestreview-35504348",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b739dafd-cf71-47e8-9b69-43d3364aac12",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "If we claim that everything should work if comparisons get fixed, then this line doesn't need to change - right?",
        "createdAt" : "2017-04-27T10:33:19Z",
        "updatedAt" : "2017-05-09T07:12:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a9d98b46-eb30-48dd-b2de-a758dfb6e7e3",
        "parentId" : "b739dafd-cf71-47e8-9b69-43d3364aac12",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "That is correct.  The following lines will not be needed:\r\n~~~python\r\nilow = int(ilow)\r\nihigh = int(high)\r\n~~~",
        "createdAt" : "2017-04-29T09:13:22Z",
        "updatedAt" : "2017-05-09T07:12:55Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      },
      {
        "id" : "fee25e3d-6542-4a82-80cb-997ea340a9ce",
        "parentId" : "b739dafd-cf71-47e8-9b69-43d3364aac12",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Let me be more clear: I think we should continue to pass `low` and `high` on this line - there is no reason to change to `ilow` and `ihigh` here.",
        "createdAt" : "2017-04-29T09:55:49Z",
        "updatedAt" : "2017-05-09T07:12:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ad54ea32-de22-48bf-9c73-460f82e1b18a",
        "parentId" : "b739dafd-cf71-47e8-9b69-43d3364aac12",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "That's not the case:\r\n\r\n~~~python\r\n>>> uint64_max = np.uint64(np.iinfo(np.uint64).max)\r\n>>> uint64_max - 1\r\n1.8446744073709552e+19\r\n~~~\r\n\r\nThis PR cannot demonstrate any clearer just how fragile `numpy`'s operators are when handling large `uint64` numbers.",
        "createdAt" : "2017-04-29T16:06:37Z",
        "updatedAt" : "2017-05-09T07:12:55Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      },
      {
        "id" : "0e3f9b28-a362-495b-b2ed-d19f8c25184f",
        "parentId" : "b739dafd-cf71-47e8-9b69-43d3364aac12",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Darn, you're right. In that case, the comment above saying \"remove these lines\" should also point out that we need them to work around subtraction as well. Or just a comment to that effect next to the subtraction\r\n\r\nAlternatively, `np.subtract(high, 1, dtype=dtype)` would probably be safe here too.",
        "createdAt" : "2017-04-29T19:40:51Z",
        "updatedAt" : "2017-05-09T07:12:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "366bc97d-df1e-4f63-9dc2-d947588e26a7",
        "parentId" : "b739dafd-cf71-47e8-9b69-43d3364aac12",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "Fair enough.  In fact, even your suggestion is not safe:\r\n~~~python\r\n>>> uint64_max = np.uint64(np.iinfo(np.uint64).max)\r\n>>>\r\n# correct but bad for randint\r\n>>> np.subtract(uint64_max, 1, dtype=np.int64)\r\n-2\r\n>>>\r\n>>> np.subtract(uint64_max, 1, dtype=None)   # oops\r\n1.8446744073709552e+19\r\n~~~",
        "createdAt" : "2017-04-29T19:44:00Z",
        "updatedAt" : "2017-05-09T07:12:55Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      },
      {
        "id" : "bd9a9ad9-1af1-48c8-ba84-243aaee12761",
        "parentId" : "b739dafd-cf71-47e8-9b69-43d3364aac12",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Not sure what you meant by `# correct but bad for randint`. You're in for a bad time if you ask for an upper bound that doesn't come close to fitting in the container type. What does passing `dtype=None` into randint do normally?",
        "createdAt" : "2017-04-29T19:47:42Z",
        "updatedAt" : "2017-05-09T07:12:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "6fef5205-c646-4812-8e08-43b79efa7cb6",
        "parentId" : "b739dafd-cf71-47e8-9b69-43d3364aac12",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "Actually, looking at those examples again, I realize that those aren't valid in the context of `randint`.  The only time that we could do this subtraction is if `dtype=np.uint64`, in which case the subtraction actually works correctly.\r\n\r\nSo ignore everything I just said in the previous comment above.  I still would rather prefer to use `high - 1` (as the current workaround) over `np.subtract`, as that will make it clear to us later that we need to patch this once #8851 is fixed.\r\n\r\n`dtype=None` is not valid (per the docs) and will error as an invalid `dtype`.",
        "createdAt" : "2017-04-29T20:21:07Z",
        "updatedAt" : "2017-05-09T07:12:55Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      },
      {
        "id" : "cd548c01-d418-44ae-a6fd-9f3e8ed4c668",
        "parentId" : "b739dafd-cf71-47e8-9b69-43d3364aac12",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`np.subtract` has the benefit of extending to broadcasting more naturally.\r\n\r\nI'm happy with the current workaround, provided there's a comment indicating that the subtraction too is a workaround",
        "createdAt" : "2017-04-29T20:27:24Z",
        "updatedAt" : "2017-05-09T07:12:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "6966cf24-16b3-42fd-98f8-65b425d1d91a",
        "parentId" : "b739dafd-cf71-47e8-9b69-43d3364aac12",
        "authorId" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "body" : "Comment has been appended to the `TODO` I wrote earlier.",
        "createdAt" : "2017-04-29T20:50:26Z",
        "updatedAt" : "2017-05-09T07:12:55Z",
        "lastEditedBy" : "11f18e00-52bd-4b68-b13d-17d0c3237df0",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f88730b3140af1efb7d2e789d21078ad66c8eee",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +989,993 @@\n        with self.lock:\n            ret = randfunc(ilow, ihigh - 1, size, self.state_address)\n\n            if size is None:"
  },
  {
    "id" : "25cf846a-6ffb-439e-984e-5c936765d4a2",
    "prId" : 8921,
    "prUrl" : "https://github.com/numpy/numpy/pull/8921#pullrequestreview-31924256",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "248d7d79-57c5-4537-89e7-e78846bc3097",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "just changing the rk_interval i to i -1 should be enough",
        "createdAt" : "2017-04-10T18:12:35Z",
        "updatedAt" : "2017-04-10T18:12:35Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "153810bb-da12-41c1-a8bb-0fc9dd805be0",
        "parentId" : "248d7d79-57c5-4537-89e7-e78846bc3097",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "no that is wrong, disregard",
        "createdAt" : "2017-04-10T18:13:28Z",
        "updatedAt" : "2017-04-10T18:13:28Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "424b78ce-2556-4892-87d1-2e2d86295b23",
        "parentId" : "248d7d79-57c5-4537-89e7-e78846bc3097",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "That would work, but would change the behaviour of a given random seed, right?",
        "createdAt" : "2017-04-10T18:27:50Z",
        "updatedAt" : "2017-04-10T18:27:51Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b0ac1933-d51a-4cf7-a5a1-6483a7d279b2",
        "parentId" : "248d7d79-57c5-4537-89e7-e78846bc3097",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "worse it would mean a datapoint cannot stay in the same position after a shuffle which biases the result",
        "createdAt" : "2017-04-10T18:35:59Z",
        "updatedAt" : "2017-04-10T18:35:59Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "44f2a623e177606a2d5c27b7b26d5d8d3af8a0da",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +4829,4833 @@        for i in reversed(range(1, n)):\n            j = rk_interval(i, self.internal_state)\n            if i == j : continue # i == j is not needed and memcpy is undefined.\n            string.memcpy(buf, data + j * stride, itemsize)\n            string.memcpy(data + j * stride, data + i * stride, itemsize)"
  },
  {
    "id" : "b34af449-6a0c-4757-b43b-1a8554541ca3",
    "prId" : 9577,
    "prUrl" : "https://github.com/numpy/numpy/pull/9577#pullrequestreview-56961973",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34ba6b97-7eeb-43f9-807a-90791e13c72a",
        "parentId" : null,
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Out of curiosity, is there something in the documentation or some other resource that promotes using `less_equal`, `logical_not`, `logical_or`, etc. functions over the operators (the above can also be written `np.any(alpha_arr <= 0)`), or leads to believe these functions are the only way to do things like this?",
        "createdAt" : "2017-08-17T15:23:46Z",
        "updatedAt" : "2017-08-17T15:23:59Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "633b11ca28e0c740215c4797db27363cde5246ba",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +4737,4741 @@        k           = len(alpha)\n        alpha_arr   = <ndarray>PyArray_ContiguousFromObject(alpha, NPY_DOUBLE, 1, 1)\n        if np.any(np.less_equal(alpha_arr, 0)):\n            raise ValueError('alpha <= 0')\n        alpha_data  = <double*>PyArray_DATA(alpha_arr)"
  },
  {
    "id" : "e416c299-ec33-457a-8498-c1b35e65fc2a",
    "prId" : 9842,
    "prUrl" : "https://github.com/numpy/numpy/pull/9842#pullrequestreview-69280620",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eacf4638-f4b6-43a9-8fcc-f2d5832fc0af",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Sorry, just spotted that making this `2**32` makes this inconsistent with the `if` above - can you change the other one too? (or change this one back)",
        "createdAt" : "2017-10-13T16:21:56Z",
        "updatedAt" : "2017-10-18T10:44:00Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad8a4c72321dcdde4ead76a0dc2b67071e75326a",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +688,692 @@            if obj.ndim != 1:\n                raise ValueError(\"Seed array must be 1-d\")\n            if ((obj >= 2**32) | (obj < 0)).any():\n                raise ValueError(\"Seed values must be between 0 and 2**32 - 1\")\n            obj = obj.astype('L', casting='unsafe')"
  }
]