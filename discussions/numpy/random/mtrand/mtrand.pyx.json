[
  {
    "id" : "8c8792a4-f8c0-45ad-a417-45f6a9404585",
    "prId" : 348,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f68a159-897f-4513-8bef-f904870ce0c4",
        "parentId" : null,
        "authorId" : "cbe4f83e-1941-49a4-9a3f-c8f37d127487",
        "body" : "Will this copy the whole slice of the array to the temp buffer? It seems that if so it would not be in-place.  Also this won't shuffle individual items in the dimensions of the array, only the outer array, is this intended?\n",
        "createdAt" : "2012-07-12T18:22:07Z",
        "updatedAt" : "2012-07-17T15:52:05Z",
        "lastEditedBy" : "cbe4f83e-1941-49a4-9a3f-c8f37d127487",
        "tags" : [
        ]
      },
      {
        "id" : "9026713a-76b6-4f76-b66e-093cef21acc7",
        "parentId" : "7f68a159-897f-4513-8bef-f904870ce0c4",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "(1) Yes, unfortunately numpy doesn't have an in-place swap function, so the temp buffer is used to accomplish that. The array is still modified in place -- two lines down the buffer gets written back to it. (2) And yes, this only shuffles items in the outer array, which is what the function is documented to do. I'd have thought shuffling along an axis made more sense, but the API was made 5+ years ago so...\n",
        "createdAt" : "2012-07-13T00:47:09Z",
        "updatedAt" : "2012-07-17T15:52:05Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "b26c675e2a91e1042f8f8d634763942c87fbbb6e",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +4404,4408 @@            while i > 0:\n                j = rk_interval(i, self.internal_state)\n                buf[...] = x[j]\n                x[j] = x[i]\n                x[i] = buf"
  },
  {
    "id" : "aa9a54dd-1a12-44db-8828-beea4e69e724",
    "prId" : 2992,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cb8869e-a838-4f87-87e3-ab9c02b913a9",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Maybe I can just skip this completly... would cause floats, etc. to work at least the for the time being, but...\n",
        "createdAt" : "2013-02-15T21:42:49Z",
        "updatedAt" : "2013-03-04T13:13:53Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "66ffc58fb390c3953f9e3047ed9da54329af6baf",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +1000,1004 @@            try:\n                # __index__ must return an integer by python rules.\n                pop_size = operator.index(a.item())\n            except TypeError:\n                raise ValueError(\"a must be 1-dimensional or an integer\")"
  },
  {
    "id" : "ad012173-f776-436e-bbaf-51407866621c",
    "prId" : 4286,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e57f7e1c-f006-45a5-b0f5-c4a998dfae6b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK.\n",
        "createdAt" : "2014-02-12T19:35:13Z",
        "updatedAt" : "2014-02-13T18:45:37Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0981867cf1d7b5adab4db46d601365400ed52892",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +4432,4436 @@        # Logic adapted from random.shuffle()\n        if isinstance(x, np.ndarray) and \\\n           (x.ndim > 1 or x.dtype.fields is not None):\n            # For a multi-dimensional ndarray, indexing returns a view onto\n            # each row. So we can't just use ordinary assignment to swap the"
  },
  {
    "id" : "4d70973a-4344-4164-ba35-c2a7ae7e5110",
    "prId" : 4348,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "890787f1-236b-4b0f-a360-28a0506aa9b1",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What does `operator.index` do here?\n",
        "createdAt" : "2014-02-22T15:44:44Z",
        "updatedAt" : "2014-02-22T15:44:44Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "8641ed33-3309-4be4-80ef-238aadf513aa",
        "parentId" : "890787f1-236b-4b0f-a360-28a0506aa9b1",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "get an integer, though I guess it could be skipped as the float cases is already handled below\n",
        "createdAt" : "2014-02-22T16:03:31Z",
        "updatedAt" : "2014-02-22T16:03:31Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "fdb219f58740748229c2142c5643e79ae1c27d69",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +604,608 @@                errcode = rk_randomseed(self.internal_state)\n            else:\n                rk_seed(operator.index(seed), self.internal_state)\n        except TypeError:\n            obj = <ndarray>PyArray_ContiguousFromObject(seed, NPY_LONG, 1, 1)"
  },
  {
    "id" : "fb662b15-e052-4724-ad9b-a4eb018de57a",
    "prId" : 4640,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab0e65ea-21d1-4d5a-9441-490923ac6f07",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Should also be a ',' after given ;)\n",
        "createdAt" : "2014-04-25T16:53:47Z",
        "updatedAt" : "2014-04-25T16:53:47Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d3c3bd6cfe72b6999e14860722837d8a29e02ce",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +947,951 @@        p : 1-D array-like, optional\n            The probabilities associated with each entry in a.\n            If not given the sample assumes a uniform distribution over all\n            entries in a.\n"
  },
  {
    "id" : "cfc78464-39d0-4b11-9388-215e527641d5",
    "prId" : 5131,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "829338d4-5b00-47ba-a897-3dd1de3e2406",
        "parentId" : null,
        "authorId" : "0923ca4e-59cb-4f09-b99d-f64f4ecb143c",
        "body" : "Addressed review feedback.\n",
        "createdAt" : "2014-09-28T04:40:43Z",
        "updatedAt" : "2014-09-28T04:40:43Z",
        "lastEditedBy" : "0923ca4e-59cb-4f09-b99d-f64f4ecb143c",
        "tags" : [
        ]
      }
    ],
    "commit" : "74ae35de25f8e1d490e0c8c8bfa7572a3ebad76b",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1231,1235 @@\n        fscale = fhigh - flow\n        if not npy_isfinite(fscale):\n            raise OverflowError('Range exceeds valid bounds')\n"
  },
  {
    "id" : "3d70513b-4a0a-4b2c-a3f2-56713ed505ca",
    "prId" : 5726,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6978fc09-c1a0-4d56-8cc1-0cd71aba541a",
        "parentId" : null,
        "authorId" : "b45c88f5-7e2c-4755-bcc5-e61278ccac1d",
        "body" : "I would be the entire next part under\n`if check_valid != 'ignore':`\n\nno reason to check if we `'ignore'`\n",
        "createdAt" : "2015-05-10T23:28:33Z",
        "updatedAt" : "2017-01-03T21:37:20Z",
        "lastEditedBy" : "b45c88f5-7e2c-4755-bcc5-e61278ccac1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "c85d199df3da21d5f92b75424c2b3c84327528f0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +4499,4503 @@\n        (u, s, v) = svd(cov)\n\n        if check_valid != 'ignore':\n            if check_valid != 'warn' and check_valid != 'raise':"
  },
  {
    "id" : "2c629b34-d106-4650-b154-d9c2165a28f6",
    "prId" : 5726,
    "prUrl" : "https://github.com/numpy/numpy/pull/5726#pullrequestreview-15013177",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b515b47a-591e-4094-882a-61018e355c0b",
        "parentId" : null,
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Can you add a check for ``check_valid`` being one of the 3 accepted strings?",
        "createdAt" : "2017-01-03T20:49:51Z",
        "updatedAt" : "2017-01-03T21:37:20Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "2ca35e69-4ba7-4069-b1a1-35495dc92871",
        "parentId" : "b515b47a-591e-4094-882a-61018e355c0b",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "actually, move it from line 4511 up here. It's misplaced there; only checked for when ``not psd``.",
        "createdAt" : "2017-01-03T20:52:06Z",
        "updatedAt" : "2017-01-03T21:37:20Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "d8700075-7429-47ff-b73c-c8c9f915f501",
        "parentId" : "b515b47a-591e-4094-882a-61018e355c0b",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "that looks good now",
        "createdAt" : "2017-01-03T21:11:14Z",
        "updatedAt" : "2017-01-03T21:37:20Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "3f52c8e2-9406-41d9-86fc-0ca2e9ff1004",
        "parentId" : "b515b47a-591e-4094-882a-61018e355c0b",
        "authorId" : "176bcdb4-5a9d-4143-8382-4426a2858fdd",
        "body" : "note that the check is itself later in the code, when checking. However, it may go unchecked when the psd passes, so I have rearranged the logic so it is always checked.",
        "createdAt" : "2017-01-03T21:14:23Z",
        "updatedAt" : "2017-01-03T21:37:20Z",
        "lastEditedBy" : "176bcdb4-5a9d-4143-8382-4426a2858fdd",
        "tags" : [
        ]
      }
    ],
    "commit" : "c85d199df3da21d5f92b75424c2b3c84327528f0",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +4475,4479 @@        if mean.shape[0] != cov.shape[0]:\n            raise ValueError(\"mean and cov must have same length\")\n\n        # Compute shape of output and create a matrix of independent\n        # standard normally distributed random numbers. The matrix has rows"
  }
]