[
  {
    "id" : "1b6cdb90-ae98-4564-94b8-9af602098822",
    "prId" : 8756,
    "prUrl" : "https://github.com/numpy/numpy/pull/8756#pullrequestreview-29002047",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ab0e6eb-4e55-46c8-a7fa-323f3f21cb91",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Any reason not to keep these declaration up top and remove the block? I think it would read better...",
        "createdAt" : "2017-03-24T20:12:43Z",
        "updatedAt" : "2017-03-24T21:02:58Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a3b5930c-8944-4043-b17f-5c2be9477dd5",
        "parentId" : "1ab0e6eb-4e55-46c8-a7fa-323f3f21cb91",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "We already used [a block further down the file for this](https://github.com/numpy/numpy/pull/8756/files#diff-a7b89b86bed09822472a1300f5f9feefL2496), so one reason is just consistency.\r\n\r\nBut I also think it's more clear this way it makes it obvious which things are only used as temporaries for the work size.",
        "createdAt" : "2017-03-24T20:23:05Z",
        "updatedAt" : "2017-03-24T21:02:58Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "c000e129b1521e7b9b89e178d011d25582fdbb08",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +1306,1310 @@    /* Work size query */\n    {\n        @typ@ query_work_size;\n        fortran_int query_iwork_size;\n"
  },
  {
    "id" : "12d0ba21-cca9-4ab6-9c66-085bf0e73da4",
    "prId" : 8756,
    "prUrl" : "https://github.com/numpy/numpy/pull/8756#pullrequestreview-29002652",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "833744f4-ddef-48a4-86c2-aa98fbbdf954",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Spaces around `=` would look better.",
        "createdAt" : "2017-03-24T20:13:46Z",
        "updatedAt" : "2017-03-24T21:02:58Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "662b301d-f9f3-4ea7-82ba-877f0158e816",
        "parentId" : "833744f4-ddef-48a4-86c2-aa98fbbdf954",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "And after `,`.",
        "createdAt" : "2017-03-24T20:15:52Z",
        "updatedAt" : "2017-03-24T21:02:58Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "5a0653d9-62b0-41c4-8f8e-82dd0025ba2a",
        "parentId" : "833744f4-ddef-48a4-86c2-aa98fbbdf954",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Wasn't sure that was legal. Will do",
        "createdAt" : "2017-03-24T20:16:55Z",
        "updatedAt" : "2017-03-24T21:02:58Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0a4cd576-6354-401a-be05-7c390aebd962",
        "parentId" : "833744f4-ddef-48a4-86c2-aa98fbbdf954",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Actually, these are like this because they're unmodified, and git has decided to produce a diff to suggest they have been. The actual change was just to move init_@lapack_func@ after call_@lapack_func@, but one of these functions looks very much like another\r\n\r\nDo you want me to add a STY commit adding spacing on top of everything else?",
        "createdAt" : "2017-03-24T20:26:06Z",
        "updatedAt" : "2017-03-24T21:02:58Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "c000e129b1521e7b9b89e178d011d25582fdbb08",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +1346,1350 @@\n\n/**begin repeat\n   #TYPE=CFLOAT,CDOUBLE#\n   #typ=npy_cfloat,npy_cdouble#"
  },
  {
    "id" : "9d9781b9-82a0-48c1-804e-77538f8c717e",
    "prId" : 8756,
    "prUrl" : "https://github.com/numpy/numpy/pull/8756#pullrequestreview-29005697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5a8561f-10af-4a92-aa89-f2568923fb92",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "All if entries should be blocks\r\n```\r\nif (...) {\r\n    single line;\r\n}\r\n```",
        "createdAt" : "2017-03-24T20:17:50Z",
        "updatedAt" : "2017-03-24T21:02:58Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "9ad10fb3-1378-4aef-9e34-b07f997f3851",
        "parentId" : "b5a8561f-10af-4a92-aa89-f2568923fb92",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Even this is an inherited style violation",
        "createdAt" : "2017-03-24T20:42:04Z",
        "updatedAt" : "2017-03-24T21:02:58Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "c000e129b1521e7b9b89e178d011d25582fdbb08",
    "line" : 238,
    "diffHunk" : "@@ -1,1 +1413,1417 @@        params->IWORK = &query_iwork_size;\n\n        if (call_@lapack_func@(params) != 0)\n            goto error;\n"
  },
  {
    "id" : "35ad3671-ee8d-45e6-865e-ff97376bd3db",
    "prId" : 8756,
    "prUrl" : "https://github.com/numpy/numpy/pull/8756#pullrequestreview-29001172",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "472ad1e1-23ac-4b62-95e8-3a71a103a787",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "See above on `if`",
        "createdAt" : "2017-03-24T20:18:35Z",
        "updatedAt" : "2017-03-24T21:02:58Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c000e129b1521e7b9b89e178d011d25582fdbb08",
    "line" : 252,
    "diffHunk" : "@@ -1,1 +1424,1428 @@                       lrwork*sizeof(@basetyp@) +\n                       liwork*sizeof(fortran_int));\n    if (!mem_buff2)\n        goto error;\n"
  },
  {
    "id" : "bdf5eb4b-39ce-46ee-9a56-cfb7cc24b953",
    "prId" : 8825,
    "prUrl" : "https://github.com/numpy/numpy/pull/8825#pullrequestreview-29034749",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45a1cb02-cbb7-41e2-b8ff-57521964a579",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Need blank line after declaration.",
        "createdAt" : "2017-03-25T00:47:41Z",
        "updatedAt" : "2017-03-25T14:38:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fec205345679d7a8d17bb1895f5b43298cebc7c",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +378,382 @@get_fp_invalid_and_clear(void)\n{\n    int status;\n    status = npy_clear_floatstatus();\n    return !!(status & NPY_FPE_INVALID);"
  },
  {
    "id" : "bcd2fa5e-dec8-49a3-aefc-ee1373c7df4c",
    "prId" : 8825,
    "prUrl" : "https://github.com/numpy/numpy/pull/8825#pullrequestreview-29036310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dee7b24e-22f9-4b8d-b208-1ea94f20a99c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Blank line after declaration. Also in other spots.",
        "createdAt" : "2017-03-25T00:48:54Z",
        "updatedAt" : "2017-03-25T14:38:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "21a21cfb-40a3-409b-a594-a6b19ea91938",
        "parentId" : "dee7b24e-22f9-4b8d-b208-1ea94f20a99c",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Too much work to find, I think. If we really care about that, then something like `astyle` might be a good plan",
        "createdAt" : "2017-03-25T00:59:08Z",
        "updatedAt" : "2017-03-25T14:38:34Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "4b608175-8c1a-40e5-a527-ba9803cd0670",
        "parentId" : "dee7b24e-22f9-4b8d-b208-1ea94f20a99c",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yes, we should be able to automate things to some extent. There are some decent tools out there. However, once done it isn't too difficult to keep things from sliding.",
        "createdAt" : "2017-03-25T01:08:10Z",
        "updatedAt" : "2017-03-25T14:38:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "86780245-7f24-411c-bd46-050f85b66fc4",
        "parentId" : "dee7b24e-22f9-4b8d-b208-1ea94f20a99c",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Either way, I think I plan to leave this PR at this point (modulo a squash, perhaps). If someone else wants to push some extra cleanup to this branch, they're welcome to. Or maybe it's worth merging as is.",
        "createdAt" : "2017-03-25T01:26:22Z",
        "updatedAt" : "2017-03-25T14:38:34Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fec205345679d7a8d17bb1895f5b43298cebc7c",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +665,669 @@print_CFLOAT(npy_cfloat c)\n{\n    float* c_parts = (float*)&c;\n    TRACE_TXT(\"(%8.4f, %8.4fj)\", c_parts[0], c_parts[1]);\n}"
  },
  {
    "id" : "bc49a071-36c8-4372-a391-f0b9438ae830",
    "prId" : 8825,
    "prUrl" : "https://github.com/numpy/numpy/pull/8825#pullrequestreview-29035463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9813342-2ac0-4478-a94d-26744a6da8e1",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Copy and paste error. The rule is that the single letter in `()` is the minimum of `m` and `n`",
        "createdAt" : "2017-03-25T01:01:34Z",
        "updatedAt" : "2017-03-25T14:38:34Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fec205345679d7a8d17bb1895f5b43298cebc7c",
    "line" : 1307,
    "diffHunk" : "@@ -1,1 +3174,3178 @@        \"svd_m_f\",\n        \"(m,n)->(m,m),(m),(n,n)\",\n        \"svd when m<=n\",\n        4, 1, 3,\n        FUNC_ARRAY_NAME(svd_A),"
  },
  {
    "id" : "cbf08b65-4265-4143-ab51-e59a819f7317",
    "prId" : 10775,
    "prUrl" : "https://github.com/numpy/numpy/pull/10775#pullrequestreview-106719479",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c810f973-0aed-423a-b9e1-8797bbb46073",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "missing `RETVAL(NULL)` in this `if`",
        "createdAt" : "2018-03-25T05:43:59Z",
        "updatedAt" : "2018-03-30T15:43:10Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a6565c6432c682c2798e75d48adc587da661822",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +3288,3292 @@    if (PyErr_Occurred()) {\n        PyErr_SetString(PyExc_RuntimeError,\n                        \"cannot load _umath_linalg module.\");\n        return RETVAL(NULL);\n    }"
  },
  {
    "id" : "6871d50e-504d-40b9-b119-9cf7b03323b7",
    "prId" : 10890,
    "prUrl" : "https://github.com/numpy/numpy/pull/10890#pullrequestreview-113974424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7660721f-cd81-49e0-bf0b-b926b9b3fcb0",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Am not sure this is worth splitting out as a function: it feels to me like it just becomes less readable.",
        "createdAt" : "2018-04-17T21:08:31Z",
        "updatedAt" : "2018-04-17T21:12:28Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "6148849e-6e53-4e66-8337-1630cb273bf3",
        "parentId" : "7660721f-cd81-49e0-bf0b-b926b9b3fcb0",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "We're already at 5 levels of indentation here - I didn't want to introduce a 6th as well as `#ifdefs`.\r\n\r\nTo me, it seems clearer to try and fold the `#ifdefs` into the function definitions as much as possible.",
        "createdAt" : "2018-04-20T06:26:04Z",
        "updatedAt" : "2018-04-20T06:26:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e63e0ed0-812c-465a-ad1a-45e49f91176f",
        "parentId" : "7660721f-cd81-49e0-bf0b-b926b9b3fcb0",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Splitting the function also makes it easier to drop in a lapack/blas implementation of them if someone finds that's faster (and cares)",
        "createdAt" : "2018-04-20T06:30:32Z",
        "updatedAt" : "2018-04-20T06:30:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1857e5b4-5e99-4ec7-b4b7-722a64f5c73c",
        "parentId" : "7660721f-cd81-49e0-bf0b-b926b9b3fcb0",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "OK, it was not a big deal.",
        "createdAt" : "2018-04-20T13:23:19Z",
        "updatedAt" : "2018-04-20T13:23:19Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "12114c720566e53e42fdc3bec3fedefdc628383d",
    "line" : 147,
    "diffHunk" : "@@ -1,1 +3308,3312 @@                        /* Numpy and fortran floating types are the same size,\n                         * so this case is safe */\n                        @basetyp@ abs2 = @TYPE@_abs2((@typ@ *)vector, excess);\n                        memcpy(\n                            resid + i*r_out.column_strides,"
  },
  {
    "id" : "0f0eba86-738b-4c09-91ba-2c839bb55848",
    "prId" : 10890,
    "prUrl" : "https://github.com/numpy/numpy/pull/10890#pullrequestreview-114071769",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76fb3d67-7646-4b6b-84af-b47ce167f035",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "My poor knowledge of C does not really help here, but `memcpy` feels very odd. Can one not just assign?",
        "createdAt" : "2018-04-17T21:09:36Z",
        "updatedAt" : "2018-04-17T21:12:28Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "6588fa6e-358b-406e-9fb4-03da03cd6dd8",
        "parentId" : "76fb3d67-7646-4b6b-84af-b47ce167f035",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "If `resid + i*r_out.column_strides` is not aligned, there's no guarantee that the write will succeed. Unless there's some gufunc magic wrapping us that ensures this is the case, `memcpy` is safer.\r\n\r\n`delinearize_@TYPE@_matrix` uses `memcpy`, which is where we copy between numpy and the other lapack buffers - so `memcpy` is at least consistent.\r\n\r\nAlso, something-something-strict-aliasing.",
        "createdAt" : "2018-04-20T06:29:43Z",
        "updatedAt" : "2018-04-20T06:29:54Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "bc9599ad-46c0-4bab-a4ec-9d03ee3b5eb2",
        "parentId" : "76fb3d67-7646-4b6b-84af-b47ce167f035",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I fear I remain confused, but fine to go with something that works!",
        "createdAt" : "2018-04-20T13:23:37Z",
        "updatedAt" : "2018-04-20T13:23:37Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "1a34b8c6-d27f-4418-b956-8a0ec6ac2df2",
        "parentId" : "76fb3d67-7646-4b6b-84af-b47ce167f035",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "A simple example: This will not work on some platforms:\r\n\r\n```\r\nchar bytes[8] = {0};\r\n(uint32_t *)&bytes[1] = 0x12345678;  // unaligned 32-bit write may fail\r\nassert((uint32_t *)&bytes[0] == 0x00123456);  // assuming big endian\r\n```\r\n\r\nBut using `memcpy` would work every time\r\n\r\nRelatedly: https://www.alfonsobeato.net/arm/how-to-access-safely-unaligned-data/",
        "createdAt" : "2018-04-20T17:10:01Z",
        "updatedAt" : "2018-04-20T17:11:19Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d0e57533-b386-40b6-b12b-956892502b96",
        "parentId" : "76fb3d67-7646-4b6b-84af-b47ce167f035",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Ah, thanks that makes it clearer (link is a good one too)",
        "createdAt" : "2018-04-20T17:56:44Z",
        "updatedAt" : "2018-04-20T17:56:45Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "12114c720566e53e42fdc3bec3fedefdc628383d",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +3309,3313 @@                         * so this case is safe */\n                        @basetyp@ abs2 = @TYPE@_abs2((@typ@ *)vector, excess);\n                        memcpy(\n                            resid + i*r_out.column_strides,\n                            &abs2, sizeof(abs2));"
  },
  {
    "id" : "e2fed39b-7f95-4e1a-bd43-edbfcc98746c",
    "prId" : 11424,
    "prUrl" : "https://github.com/numpy/numpy/pull/11424#pullrequestreview-132518167",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ca0b05a-2658-4df5-9541-1fbd9954bcc1",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "NIT: comment should start on the next line.",
        "createdAt" : "2018-06-27T16:51:24Z",
        "updatedAt" : "2018-06-27T16:51:24Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "b80d360e2b82cd52ad69548cc292c2bab95de6ce",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +2772,2776 @@                } else {\n                    if ('A' == params.JOBZ && min_m_n == 0) {\n                        /* Lapack has betrayed us and left these uninitialized,\n                         * so produce an identity matrix for whichever of u\n                         * and v is not empty."
  }
]