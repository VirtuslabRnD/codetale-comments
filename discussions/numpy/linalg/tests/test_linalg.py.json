[
  {
    "id" : "1ababc29-4417-4e1c-a160-ebd4f7e3e5f9",
    "prId" : 3880,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac2424ce-11ea-4345-927d-32ffae5d45d1",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Some explanation of the choice of `.1` and `sqrt` would be helpful.\n",
        "createdAt" : "2013-10-07T21:11:41Z",
        "updatedAt" : "2013-10-07T21:20:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "dbc2dc10-8828-4000-bc54-8e9ad5ba1884",
        "parentId" : "ac2424ce-11ea-4345-927d-32ffae5d45d1",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Added.\n",
        "createdAt" : "2013-10-07T21:17:20Z",
        "updatedAt" : "2013-10-07T21:20:31Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "1718a07b-486b-4816-beaf-ac748abdae73",
        "parentId" : "ac2424ce-11ea-4345-927d-32ffae5d45d1",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Ok, wrote down the tolerances explicitly. It's a matter of choosing something so that esp SVD doesn't accrue too much rounding error\n",
        "createdAt" : "2013-10-07T21:21:21Z",
        "updatedAt" : "2013-10-07T21:21:21Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "2fa1c9d150398cc52a2752604e24bde9e762a43c",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +49,53 @@            csingle: csingle, cdouble: cdouble}[dtype]\n\ndef get_rtol(dtype):\n    # Choose a safe rtol\n    if dtype in (np.single, csingle):"
  },
  {
    "id" : "2218842a-3667-48d9-9529-3a60c7538cdb",
    "prId" : 3880,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce2e15b7-f81f-42fb-a6ca-76d39e4d0e17",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Some documentation of what follows and its intention would be nice.\n",
        "createdAt" : "2013-10-07T21:17:56Z",
        "updatedAt" : "2013-10-07T21:20:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2fa1c9d150398cc52a2752604e24bde9e762a43c",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +208,212 @@        a = np.array([case.a]*2*3).reshape((3, 2) + case.a.shape)\n        if case.b is None:\n            b = None\n        else:\n            b = np.array([case.b]*2*3).reshape((3, 2) + case.b.shape)"
  },
  {
    "id" : "c500e465-fb49-4dc0-9407-6848d4000277",
    "prId" : 3880,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c52d6800-0a03-4e1c-ab45-2150ee3d3245",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Would help to say what the stride combinations will be.\n",
        "createdAt" : "2013-10-07T21:18:43Z",
        "updatedAt" : "2013-10-07T21:20:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2fa1c9d150398cc52a2752604e24bde9e762a43c",
    "line" : 216,
    "diffHunk" : "@@ -1,1 +240,244 @@\n        # new array with different strides, but same data\n        xi = np.empty(new_shape, dtype=x.dtype)\n        xi.view(np.uint32).fill(0xdeadbeef)\n        xi = xi[slices]"
  },
  {
    "id" : "2e6fc770-a521-4fc5-b586-e086e32921db",
    "prId" : 5383,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e468392-056f-40cc-a3c4-52e8a090ed1e",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "is this a valid return code?\naren't those limited to 127 on some systems?\n",
        "createdAt" : "2014-12-24T12:31:09Z",
        "updatedAt" : "2014-12-24T17:38:57Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "17b530b4-82f2-4486-b091-42c65976ec31",
        "parentId" : "4e468392-056f-40cc-a3c4-52e8a090ed1e",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I don't know, it's valid on Linux, and windows returns 16 bit values. It can be anything that is not common.\n",
        "createdAt" : "2014-12-24T13:57:11Z",
        "updatedAt" : "2014-12-24T17:38:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "75666e3abce678b4ddaee1c9f65ea497a234fae0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1153,1157 @@    from nose import SkipTest\n\n    XERBLA_OK = 255\n\n    try:"
  },
  {
    "id" : "9bfbd9a3-b74f-402b-8a1e-09588728dd3f",
    "prId" : 7903,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba10328d-0e13-47f3-8648-a1563ba41e93",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Out of curiousity, is this because of accuracy, or some other reason.\n",
        "createdAt" : "2016-08-05T00:00:39Z",
        "updatedAt" : "2016-08-05T00:00:39Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "07800e53ea335bc64514e9b4b0a5e5711fd39684",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +878,882 @@            an = norm(at, 2)\n            assert_(issubclass(an.dtype.type, np.floating))\n            assert_almost_equal(an, an.dtype.type(2.0)**an.dtype.type(1.0/2.0))\n\n            an = norm(at, 4)"
  },
  {
    "id" : "df3428a1-ab5e-4b34-a4a6-df074216eaee",
    "prId" : 8369,
    "prUrl" : "https://github.com/numpy/numpy/pull/8369#pullrequestreview-23034879",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1787d06b-e816-4ff6-a56c-962f41ccbc63",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Is there really an advantage in having a function with no arguments that operates on a global and is called once? I think the original is cleaner and easier to follow.",
        "createdAt" : "2017-02-21T17:36:03Z",
        "updatedAt" : "2017-02-21T17:36:04Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "fb16aa5a-118a-4d12-a7cd-ff8d6eb1b69b",
        "parentId" : "1787d06b-e816-4ff6-a56c-962f41ccbc63",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Avoiding global namespace pollution - stops anything accidentally using these local variables in a test. Also handy for code folding, sort of",
        "createdAt" : "2017-02-21T17:52:27Z",
        "updatedAt" : "2017-02-21T17:52:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2f4623af-ee42-4cbf-8525-98b25037d81e",
        "parentId" : "1787d06b-e816-4ff6-a56c-962f41ccbc63",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Fair enough.",
        "createdAt" : "2017-02-21T18:35:12Z",
        "updatedAt" : "2017-02-21T18:35:12Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6d81d991fafb7e57306ee784491f7913589756a",
    "line" : 170,
    "diffHunk" : "@@ -1,1 +240,244 @@# Gufunc test cases\n#\ndef _make_generalized_cases():\n    new_cases = []\n"
  },
  {
    "id" : "5095468e-24fe-44ba-99cd-f78a4ca8504a",
    "prId" : 8369,
    "prUrl" : "https://github.com/numpy/numpy/pull/8369#pullrequestreview-23021255",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ef2ed15-4c42-401b-8d36-246e4ebb9cd4",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "See above. I don't see the use in making this a function.",
        "createdAt" : "2017-02-21T17:37:15Z",
        "updatedAt" : "2017-02-21T17:37:15Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6d81d991fafb7e57306ee784491f7913589756a",
    "line" : 228,
    "diffHunk" : "@@ -1,1 +320,324 @@            yield xi, \"stride_xxx_0_0\"\n\ndef _make_strided_cases():\n    new_cases = []\n    for case in CASES:"
  },
  {
    "id" : "bffe7a6b-c5ca-4c86-bab5-2cb7a4d06be6",
    "prId" : 8369,
    "prUrl" : "https://github.com/numpy/numpy/pull/8369#pullrequestreview-23022474",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cafb6f2e-52c4-40a3-b30a-21abaefa1b2c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, this is a bit clumsy for a lookup, although I suspect it would require a redesign to improve it. Probably not worth the effort.",
        "createdAt" : "2017-02-21T17:42:33Z",
        "updatedAt" : "2017-02-21T17:42:33Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6d81d991fafb7e57306ee784491f7913589756a",
    "line" : 260,
    "diffHunk" : "@@ -1,1 +344,348 @@    for case in CASES:\n        # filter by require and exclude\n        if case.tags & require != require:\n            continue\n        if case.tags & exclude:"
  },
  {
    "id" : "d1bde2e1-c889-435b-abc2-17e7ee893956",
    "prId" : 9796,
    "prUrl" : "https://github.com/numpy/numpy/pull/9796#pullrequestreview-66317346",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e7f4881-37f2-4baf-87c9-116a1b46810a",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Out of curiousity, is the `dtype` actually needed here?",
        "createdAt" : "2017-09-30T16:47:49Z",
        "updatedAt" : "2017-09-30T16:47:49Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "274da78e-5ca7-44e7-b4d0-2214b4732256",
        "parentId" : "8e7f4881-37f2-4baf-87c9-116a1b46810a",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Of course, numpy.linalg doesn't do anything apart from double precision, but better still to test all combinations.",
        "createdAt" : "2017-09-30T16:53:09Z",
        "updatedAt" : "2017-09-30T16:53:09Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "77c873d55c3de5ee62664090727a84a7ebeebc2c",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +1523,1527 @@\n            a = np.matmul(a.transpose(t).conj(), a)\n            a = np.asarray(a, dtype=dtype)\n\n            c = np.linalg.cholesky(a)"
  },
  {
    "id" : "54d8469c-bc62-4fab-9349-cb9cca264a67",
    "prId" : 11168,
    "prUrl" : "https://github.com/numpy/numpy/pull/11168#pullrequestreview-123588810",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d30e4900-87c2-4e1b-8d97-6443b2553770",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Don't you need the sqrt here to trigger the error, based on the comments in the issue?",
        "createdAt" : "2018-05-27T15:32:36Z",
        "updatedAt" : "2018-05-27T15:32:42Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5660fc79-1dd4-48f2-b5a2-5ff77a7977d8",
        "parentId" : "d30e4900-87c2-4e1b-8d97-6443b2553770",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "At least for #8577 sqrt wasn't mentioned.",
        "createdAt" : "2018-05-27T15:33:37Z",
        "updatedAt" : "2018-05-27T15:43:48Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "808e2115-812f-42ce-996e-717d0eeab628",
        "parentId" : "d30e4900-87c2-4e1b-8d97-6443b2553770",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Also #11166 reports it fails for just `dot`, so I think the test as it is now catches those reported cases.",
        "createdAt" : "2018-05-27T15:44:18Z",
        "updatedAt" : "2018-05-27T15:44:18Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "6a9e7b7a-f828-4d97-910b-61ef28ddc5e3",
        "parentId" : "d30e4900-87c2-4e1b-8d97-6443b2553770",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Thanks for checking\r\n",
        "createdAt" : "2018-05-27T16:16:39Z",
        "updatedAt" : "2018-05-27T16:16:39Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0350facf1a89103cfab3605e8c67967a650aa704",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1784,1788 @@    {after}\n    x = np.ones(2, dtype=np.float32)\n    sys.exit(0 if np.allclose(x.dot(x), 2.0) else 1)\n    \"\"\")\n"
  },
  {
    "id" : "f468b1d6-5e10-4f37-8996-47c79995fa2e",
    "prId" : 11594,
    "prUrl" : "https://github.com/numpy/numpy/pull/11594#pullrequestreview-142650396",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78428e2e-8f08-4f85-aa48-c8647c7ac765",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "How much of this block could be replaced with `self.do`? It seems there's a fair amount of repetition between this test and the one that was used before",
        "createdAt" : "2018-08-01T15:57:46Z",
        "updatedAt" : "2018-08-02T16:24:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0afbc26c-97eb-4b49-b18a-a61ef97902a8",
        "parentId" : "78428e2e-8f08-4f85-aa48-c8647c7ac765",
        "authorId" : "fcc8b868-d46d-454e-b132-0c020490505e",
        "body" : "I think that part can be left to another enhancement.\r\n\r\nBecause I would have to add test cases that apply to everything. That's fine, and it would be great.\r\n\r\n`cond` (around L1566) still has `_assertNoEmpty2d`... and we can just have `cond(m)=0` for empty matrix `m` (because sup_x (|Ax| / |x|) = 0 when |Ax| = 0 for all x).\r\n\r\nCurrently, the `qr` code is in master but not in this branch. I could cherry pick it over, but I'm not sure if things might get ugly.\r\n\r\nOnce the two are in, we won't have any more `_assertNoEmpty2d`'s running about.",
        "createdAt" : "2018-08-02T02:41:59Z",
        "updatedAt" : "2018-08-02T16:24:21Z",
        "lastEditedBy" : "fcc8b868-d46d-454e-b132-0c020490505e",
        "tags" : [
        ]
      },
      {
        "id" : "4c82cde1-6113-484a-9cbe-caf5ec2bc518",
        "parentId" : "78428e2e-8f08-4f85-aa48-c8647c7ac765",
        "authorId" : "fcc8b868-d46d-454e-b132-0c020490505e",
        "body" : "Wait... that's the norm...",
        "createdAt" : "2018-08-02T03:20:34Z",
        "updatedAt" : "2018-08-02T16:24:21Z",
        "lastEditedBy" : "fcc8b868-d46d-454e-b132-0c020490505e",
        "tags" : [
        ]
      },
      {
        "id" : "365b7918-df1d-4cbb-9163-b28532c81de5",
        "parentId" : "78428e2e-8f08-4f85-aa48-c8647c7ac765",
        "authorId" : "fcc8b868-d46d-454e-b132-0c020490505e",
        "body" : "Then I'm conflicted because there is no inverse of an empty matrix. Maybe that bit with `cond` should be left as is. `LinAlgError` is as good an output as any.",
        "createdAt" : "2018-08-02T03:23:14Z",
        "updatedAt" : "2018-08-02T16:24:21Z",
        "lastEditedBy" : "fcc8b868-d46d-454e-b132-0c020490505e",
        "tags" : [
        ]
      },
      {
        "id" : "ab1d4f8f-53de-4693-b95f-38f40c243d21",
        "parentId" : "78428e2e-8f08-4f85-aa48-c8647c7ac765",
        "authorId" : "fcc8b868-d46d-454e-b132-0c020490505e",
        "body" : "The whole `test_empty_a_b_1d` bit can be exactly performed with `self.do` but as for the other, `test_empty_a_b` has `b` which is 2d. So I'd keep that.",
        "createdAt" : "2018-08-02T03:35:08Z",
        "updatedAt" : "2018-08-02T16:24:21Z",
        "lastEditedBy" : "fcc8b868-d46d-454e-b132-0c020490505e",
        "tags" : [
        ]
      },
      {
        "id" : "61b9f4d3-10c8-4afe-a36a-f0d01ba2734c",
        "parentId" : "78428e2e-8f08-4f85-aa48-c8647c7ac765",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'd leave `cond` as is for now. Keeping `test_empty_a_b` sounds fine to me - just wanted to make sure you'd considered using `.do`. Switching to using it or hearing an argument why you didn't (`b` being 2d) are both good responses.",
        "createdAt" : "2018-08-02T05:44:30Z",
        "updatedAt" : "2018-08-02T16:24:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "3abfc054ace330926ba3f099791588088801d85b",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +944,948 @@            assert_almost_equal(residuals, (r * r).sum(axis=-2))\n        assert_equal(rank, min(m, n))\n        assert_equal(s.shape, (min(m, n),))\n\n"
  },
  {
    "id" : "7fadf3ac-aa13-4714-b95f-b1d1eee63964",
    "prId" : 12215,
    "prUrl" : "https://github.com/numpy/numpy/pull/12215#pullrequestreview-166381428",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10c89014-6776-49ab-9468-9785b5ae6491",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm somewhat tempted to change this (and the docstring) to `np.stack([x, np.ones(len(x))], axis=-1)`",
        "createdAt" : "2018-10-19T05:13:01Z",
        "updatedAt" : "2018-10-19T05:13:05Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c8ecbf355c45b6ffacf8ff1c1cf2f21a3636370",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +937,941 @@        x = np.array([0, 1, 2, 3])\n        y = np.array([-1, 0.2, 0.9, 2.1, 3.3])\n        A = np.vstack([x, np.ones(len(x))]).T\n        with assert_raises_regex(LinAlgError, \"Incompatible dimensions\"):\n            linalg.lstsq(A, y, rcond=None)"
  },
  {
    "id" : "552c4c34-0f88-41fd-aec4-3e5c69fff5ea",
    "prId" : 15715,
    "prUrl" : "https://github.com/numpy/numpy/pull/15715#pullrequestreview-391596842",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f023abbf-4a23-47d1-874f-41ef8b2b4f40",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "comment seems cut off: \"separate test\"\r\n\r\nThese test name are quite long. Rather than `test_basic_function_with` can we have `test_multidot_`, and drop the `_argument`, so this would become `test_multidot_with_dynamic_programming_and_out`. ",
        "createdAt" : "2020-03-26T18:28:17Z",
        "updatedAt" : "2020-04-13T16:26:36Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "aafbedc6-d3e8-44ed-b221-245fafe1f5e5",
        "parentId" : "f023abbf-4a23-47d1-874f-41ef8b2b4f40",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I will commit your suggestion, but also removed the `multidot_with` part, this is already in the `TestMultidot` class, so that should be implicit.\r\n\r\nI will then merge this later today or tomorrow.",
        "createdAt" : "2020-04-10T18:37:14Z",
        "updatedAt" : "2020-04-13T16:26:36Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "478fed4191c66e55ca4e9dbac69c520959e314e5",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1956,1960 @@        # multi_dot with four or more arguments uses the dynamic programing\n        # optimization and therefore deserve a separate test\n        A = np.random.random((6, 2))\n        B = np.random.random((2, 6))\n        C = np.random.random((6, 2))"
  }
]