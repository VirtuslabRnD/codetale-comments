[
  {
    "id" : "1508ccdf-9485-49f4-aa67-8c62e4c36094",
    "prId" : 2721,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d465f16e-0738-498b-9e18-dcdb15043066",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Just `dot(a, v[:, i] = w[i] *  v[:, i]` should do here. With broadcasting the simpler form `dot(a, v) = v * w` also works.but may be more confusing.\n",
        "createdAt" : "2013-07-10T02:30:57Z",
        "updatedAt" : "2013-07-10T02:30:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6f27b0742a34f6215fcfd42541b9e9696796682",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +947,951 @@    The number `w` is an eigenvalue of `a` if there exists a vector\n    `v` such that ``dot(a,v) = w * v``. Thus, the arrays `a`, `w`, and\n    `v` satisfy the equations ``dot(a[:,:], v[:,i]) = w[i] * v[:,i]``\n    for :math:`i \\\\in \\\\{0,...,M-1\\\\}`.\n"
  },
  {
    "id" : "3aeeeb6f-bf3d-4338-b30b-cfd9de980b75",
    "prId" : 3978,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81c4d7fe-ad38-4a6e-b387-5215b0bda2a9",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This can be cleaned up more now that we only support 2.6-2.7 as the comparison can be done as\n\n```\nUPLO == b'L'\n```\n\nBut that cleanup can wait.\n",
        "createdAt" : "2013-10-25T17:33:34Z",
        "updatedAt" : "2013-10-25T18:07:28Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8e07275f05e95a4d0af098b06d37925602f7861",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +957,961 @@    extobj = get_linalg_error_extobj(\n        _raise_linalgerror_eigenvalues_nonconvergence)\n    if UPLO == _L:\n        gufunc = _umath_linalg.eigvalsh_lo\n    else:"
  },
  {
    "id" : "c8678180-fcdb-432c-99ad-f32cc8252d63",
    "prId" : 4977,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08b89835-63da-4ea8-88e1-3d81414475ea",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "this comment is not really needed\n",
        "createdAt" : "2014-09-13T12:31:51Z",
        "updatedAt" : "2014-11-10T10:57:26Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "5283bbed-c143-463c-8474-69888c08783a",
        "parentId" : "08b89835-63da-4ea8-88e1-3d81414475ea",
        "authorId" : "f350d0bd-bc3e-4982-b4da-24c15ea04c96",
        "body" : "Many functions/groups of functions have this kind of prefix in linalg.py.\n",
        "createdAt" : "2014-10-20T15:00:31Z",
        "updatedAt" : "2014-11-10T10:57:26Z",
        "lastEditedBy" : "f350d0bd-bc3e-4982-b4da-24c15ea04c96",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b12c394548e2d23bba83c0eccda958a28998293",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +2156,2160 @@\n\n# multi_dot\n\ndef multi_dot(arrays):"
  },
  {
    "id" : "5f02d724-723f-40ed-9545-d0b8d2690405",
    "prId" : 5196,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f064db39-34e1-4f57-8c5e-3e786c2bcb05",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "That's interesting, I wasn't aware it operated that way for `axis=None`.\n",
        "createdAt" : "2014-10-16T20:19:30Z",
        "updatedAt" : "2014-10-17T14:51:00Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a0ec693b-c4ac-498c-9a17-d85bdaaf58a2",
        "parentId" : "f064db39-34e1-4f57-8c5e-3e786c2bcb05",
        "authorId" : "08d28fd4-23d7-47ff-96d3-656eaa8635f1",
        "body" : "not sure it's the most useful thing it could be doing, but I don't think its worth trying to change.\n",
        "createdAt" : "2014-10-16T21:06:54Z",
        "updatedAt" : "2014-10-17T14:51:00Z",
        "lastEditedBy" : "08d28fd4-23d7-47ff-96d3-656eaa8635f1",
        "tags" : [
        ]
      },
      {
        "id" : "c14e827b-5a28-4d92-84fe-96135846e849",
        "parentId" : "f064db39-34e1-4f57-8c5e-3e786c2bcb05",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Wasn't suggesting a change, I learned something.\n",
        "createdAt" : "2014-10-16T21:15:08Z",
        "updatedAt" : "2014-10-17T14:51:00Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f88eea024448b913cea881efad405e5d4ece195",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +2067,2071 @@        ret = sqrt(sqnorm)\n        if keepdims:\n            ret = ret.reshape(ndim*[1])\n        return ret\n"
  },
  {
    "id" : "f523e1be-9357-4493-adb3-352f5e2acf27",
    "prId" : 6362,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7a15c1c-c112-49d1-9eed-60d3ec43089c",
        "parentId" : null,
        "authorId" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "body" : "Should this be changed to `M, M` as in the matrix inverse docs?\n",
        "createdAt" : "2015-09-25T16:20:18Z",
        "updatedAt" : "2015-09-25T16:20:18Z",
        "lastEditedBy" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "tags" : [
        ]
      },
      {
        "id" : "69bbf688-9569-48cf-8511-7890bbd2f13c",
        "parentId" : "c7a15c1c-c112-49d1-9eed-60d3ec43089c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "The SVD cond is defined even for non-square matrices, no? (frankly, did not try to put on my math brain for this)\n",
        "createdAt" : "2015-09-25T16:21:41Z",
        "updatedAt" : "2015-09-25T16:21:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "65671f72-4db5-4b86-a6f7-248f21f8749b",
        "parentId" : "c7a15c1c-c112-49d1-9eed-60d3ec43089c",
        "authorId" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "body" : "Yes it's true that part of the implementation of `cond` uses `svd` and that `svd` works on non-square matrices. But `cond` is the condition number of a particular function (matrix inversion, or `inv`) with respect to x, and it does not make sense to me that the condition number would be defined for x when x is not in the domain of the function.\nhttps://en.wikipedia.org/wiki/Condition_number\n",
        "createdAt" : "2015-09-25T16:26:14Z",
        "updatedAt" : "2015-09-25T16:26:14Z",
        "lastEditedBy" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "tags" : [
        ]
      },
      {
        "id" : "3206cdbd-b842-474a-814d-a5f64b19729f",
        "parentId" : "c7a15c1c-c112-49d1-9eed-60d3ec43089c",
        "authorId" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "body" : "But I guess this is a nitpicky point that could be addressed in a different PR if at all..\n",
        "createdAt" : "2015-09-25T16:27:23Z",
        "updatedAt" : "2015-09-25T16:27:23Z",
        "lastEditedBy" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "tags" : [
        ]
      },
      {
        "id" : "ae04c55a-0154-49e4-b756-33eef5c440af",
        "parentId" : "c7a15c1c-c112-49d1-9eed-60d3ec43089c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Google it ;), I think it is well defined with the pseudo inverse as well, since it has to do with how well the solution of the system of linear equations are, which also has a well defined solution for non-square matrices. At least in a least square sense.\n",
        "createdAt" : "2015-09-25T16:28:43Z",
        "updatedAt" : "2015-09-25T16:28:43Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "cb491a18-3bdf-48cb-b89b-be7c6dbe5ff6",
        "parentId" : "c7a15c1c-c112-49d1-9eed-60d3ec43089c",
        "authorId" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "body" : "> Google it ;)\n\nI'm not sure what you're suggesting to google...\n\nThe numpy.linalg.cond function is documented as \"The condition number of x is defined as the norm of x times the norm of the inverse of x.\" so should this be updated if `cond` is defined in some other way for nonsquare matrices?\n",
        "createdAt" : "2015-09-25T16:32:44Z",
        "updatedAt" : "2015-09-25T16:49:07Z",
        "lastEditedBy" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "tags" : [
        ]
      },
      {
        "id" : "d5efe170-018c-4808-8364-4600b61b43ce",
        "parentId" : "c7a15c1c-c112-49d1-9eed-60d3ec43089c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Sorry. But things like: http://icl.cs.utk.edu/lapack-forum/archives/lapack/msg00311.html\n\nIt seems to me that the definition with the pseudo inverse is definitely useful. So maybe we should add another sentence or two to the Notes to say that. Frankly, I am not quite sure what to write, but I can think about it later.\n",
        "createdAt" : "2015-09-25T17:28:54Z",
        "updatedAt" : "2015-09-25T17:29:09Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "c5f74f6a-b156-422e-80be-2f130fa612cb",
        "parentId" : "c7a15c1c-c112-49d1-9eed-60d3ec43089c",
        "authorId" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "body" : "@seberg Thanks, I'll open a separate issue.\n",
        "createdAt" : "2015-09-25T18:13:29Z",
        "updatedAt" : "2015-09-25T18:13:29Z",
        "lastEditedBy" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "tags" : [
        ]
      },
      {
        "id" : "8bdcf161-ae4f-41b3-a40f-b16ad12c3f43",
        "parentId" : "c7a15c1c-c112-49d1-9eed-60d3ec43089c",
        "authorId" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "body" : "Opened https://github.com/numpy/numpy/issues/6364, although I'm not confident that I've phrased that issue correctly.\n",
        "createdAt" : "2015-09-25T18:20:02Z",
        "updatedAt" : "2015-09-25T18:20:02Z",
        "lastEditedBy" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae56c58db4207bd11100a9d24c9edf7694e34d67",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1383,1387 @@    Parameters\n    ----------\n    x : (..., M, N) array_like\n        The matrix whose condition number is sought.\n    p : {None, 1, -1, 2, -2, inf, -inf, 'fro'}, optional"
  },
  {
    "id" : "49d384ee-d324-47e9-8603-93a1d27fa3b9",
    "prId" : 7088,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "828fc1a7-e5d6-4bb7-9add-eba05e8b32dd",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'd just add `0.0` here.\n",
        "createdAt" : "2016-01-21T20:25:37Z",
        "updatedAt" : "2016-01-22T23:16:19Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "68778d28-6a21-42d1-b8d7-b4d6456f9475",
        "parentId" : "828fc1a7-e5d6-4bb7-9add-eba05e8b32dd",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "That is `x = asarray(x) + 0.0`. it's a bit ugly, but there you go. I had a proposal to add a `mintype` keyword to `asarray` that would also have solved this problem.\n",
        "createdAt" : "2016-01-21T20:30:42Z",
        "updatedAt" : "2016-01-22T23:16:19Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "eefdb28e-dfc6-4d67-9ecc-511a7a0563fc",
        "parentId" : "828fc1a7-e5d6-4bb7-9add-eba05e8b32dd",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "Personally, I'm not a fan. I think that adding or multiplying is performing an otherwise needless element operation especially for arrays of the right type. Also, if we need to cast to a preferred type, we should just do that explicitly.\n",
        "createdAt" : "2016-01-21T22:42:22Z",
        "updatedAt" : "2016-01-22T23:16:19Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "75d5b59bca181ee7e5ba872999014006c4b6c3f3",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +2111,2115 @@\n    \"\"\"\n    x = asarray(x)\n\n    if not issubclass(x.dtype.type, inexact):"
  },
  {
    "id" : "b2d2c911-f29e-4f6c-8c8e-1c104c42863c",
    "prId" : 7088,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06e82164-006d-447c-9e82-dae5fa962d7f",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Still need to handle the complex case if this stays.\n",
        "createdAt" : "2016-01-21T20:28:22Z",
        "updatedAt" : "2016-01-22T23:16:19Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "f6cc3aba-9a4d-4a98-b9f5-1d28551112e5",
        "parentId" : "06e82164-006d-447c-9e82-dae5fa962d7f",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "Not sure if I follow what you mean. I believe they are already handled. For instance, the following holds.\n\n```\n>>> issubclass(np.complexfloating, np.inexact)\nTrue\n```\n\nSimilarly this is true for specific types of complex types as they all subclass `np.complexfloating`. Personally, this is why I liked and went with your `np.inexact` suggestion.\n",
        "createdAt" : "2016-01-21T22:45:15Z",
        "updatedAt" : "2016-01-22T23:16:19Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      },
      {
        "id" : "510c6785-07af-4f4d-91dd-c324cd4ba60c",
        "parentId" : "06e82164-006d-447c-9e82-dae5fa962d7f",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yep, it works. I should probably knock off for the day...\n",
        "createdAt" : "2016-01-21T23:07:14Z",
        "updatedAt" : "2016-01-22T23:16:19Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "d8694a65-d064-4564-83b0-14ae220c6444",
        "parentId" : "06e82164-006d-447c-9e82-dae5fa962d7f",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "No worries.\n",
        "createdAt" : "2016-01-21T23:09:05Z",
        "updatedAt" : "2016-01-22T23:16:19Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "75d5b59bca181ee7e5ba872999014006c4b6c3f3",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +2114,2118 @@\n    if not issubclass(x.dtype.type, inexact):\n        x = x.astype(float)\n\n    # Immediately handle some default, simple, fast, and common cases."
  },
  {
    "id" : "f74a3337-6524-4893-8933-0ccd34a67d73",
    "prId" : 8368,
    "prUrl" : "https://github.com/numpy/numpy/pull/8368#pullrequestreview-25120108",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46c80f75-1202-41b8-9e02-77927ec93f58",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`eig` would previously produce a cryptic `ValueError: cannot remove a zero-sized axis from an iterator`, since it omitted the check in other places.\r\n\r\nIt's not clear to me why `NpyIter_RemoveAxis` does not allow a zero-sized axis to be removed. At the very least, it should allow all but the last zero-sized axis to be removed, I think?",
        "createdAt" : "2016-12-12T14:11:11Z",
        "updatedAt" : "2017-03-04T00:42:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "7fe142c1-b3e5-4ae1-be99-55701176145b",
        "parentId" : "46c80f75-1202-41b8-9e02-77927ec93f58",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I have an old PR, which would remove this error, but mostly was never merged, because it required cleaning up of all linalg functions to make sure they don't crash within lapack....",
        "createdAt" : "2016-12-12T14:45:12Z",
        "updatedAt" : "2017-03-04T00:42:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "8528cdcc-1dee-45d7-aa2f-cac3160775b4",
        "parentId" : "46c80f75-1202-41b8-9e02-77927ec93f58",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Mind digging it out? Presumably it required cleaning them up C-side, so this PR is not a substitute\r\n",
        "createdAt" : "2016-12-12T15:06:00Z",
        "updatedAt" : "2017-03-04T00:42:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d3063bec-52da-4691-90ba-1a996dfa69ae",
        "parentId" : "46c80f75-1202-41b8-9e02-77927ec93f58",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Only takes a search of open PRs by me: https://github.com/numpy/numpy/pull/3861",
        "createdAt" : "2016-12-12T15:53:52Z",
        "updatedAt" : "2017-03-04T00:42:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "77bb3ba9-259c-4da5-b7af-e285e6307b44",
        "parentId" : "46c80f75-1202-41b8-9e02-77927ec93f58",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Eric, is my PR removing that weird error in some way useful here, or is it orthogonal. Frankly, I am not sure myself whether or not it helps here, considering that lapack probably cannot handle 0d anyway.",
        "createdAt" : "2017-01-05T19:17:40Z",
        "updatedAt" : "2017-03-04T00:42:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "00e64c3a-9768-489f-94cf-c179f51a810c",
        "parentId" : "46c80f75-1202-41b8-9e02-77927ec93f58",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "My guess is rather: Once we put this one in, I can reactivate my old one....",
        "createdAt" : "2017-01-05T19:18:02Z",
        "updatedAt" : "2017-03-04T00:42:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "c474af78-4152-4eb4-9baf-57b3a43bff22",
        "parentId" : "46c80f75-1202-41b8-9e02-77927ec93f58",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Lapack actually seems able to handle 0x0 (not 0d) in a lot of cases, but needs more careful argument preparation, that we are not doing. In particular, I think I can make `lstsq` work with it. I think your pr removing that weird error would become useful for the vectorized ops though.",
        "createdAt" : "2017-01-05T19:31:18Z",
        "updatedAt" : "2017-03-04T00:42:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "54f69c7a-d6ed-4b79-a4fc-8491381fcad7",
        "parentId" : "46c80f75-1202-41b8-9e02-77927ec93f58",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "@seberg: Ok, this is in - time to revisit #3861?",
        "createdAt" : "2017-03-04T02:52:51Z",
        "updatedAt" : "2017-03-04T02:52:51Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "86e71cbb-db20-4f52-bd43-4853cc37babd",
        "parentId" : "46c80f75-1202-41b8-9e02-77927ec93f58",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "jup, and I guess we can reduce it to those deletions....",
        "createdAt" : "2017-03-04T10:32:26Z",
        "updatedAt" : "2017-03-04T10:32:26Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "662744904a5f248a83f28ad3a7a791c817eaf140",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +904,908 @@    a, wrap = _makearray(a)\n    _assertRankAtLeast2(a)\n    _assertNdSquareness(a)\n    _assertFinite(a)\n    t, result_t = _commonType(a)"
  },
  {
    "id" : "5a7b1fb1-01aa-4f55-bbdc-8e239ad56d1a",
    "prId" : 8369,
    "prUrl" : "https://github.com/numpy/numpy/pull/8369#pullrequestreview-15375267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c3e084e-f432-44f1-80e8-834d9f090d41",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "According to LAPACK, this should be:\r\n\r\n> SMLSIZ is returned by ILAENV and is equal to the maximum\r\n> size of the subproblems at the bottom of the computation\r\n> tree (usually about 25), and\r\n>    NLVL = MAX( 0, INT( **LOG_2**( MIN( M,N )/(**SMLSIZ**+1) ) ) + 1 )\r\n\r\nFor whatever reason, we seem to have decided that `log(2) = SMLSIZ = 1`, which seems best described as \"false\". Either way, this is a can of worms, and not one that I think this PR should be opening.",
        "createdAt" : "2016-12-19T14:07:33Z",
        "updatedAt" : "2017-02-09T18:06:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "211ef23c-6b75-4e42-8505-147b5fc61687",
        "parentId" : "4c3e084e-f432-44f1-80e8-834d9f090d41",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Should we open an issue about this? Is there some example for when this goes bad? (I really hate bugs that might silently create incorrect results, and if this is the case, we should give it some priority)",
        "createdAt" : "2017-01-05T19:20:19Z",
        "updatedAt" : "2017-02-09T18:06:27Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "5a8bf5b7-45bd-4baf-a073-e5f4b773f630",
        "parentId" : "4c3e084e-f432-44f1-80e8-834d9f090d41",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I have a patch in the works that uses lapack's internal mechanism to calculate this correctly. Unfortunately, there's a bug in the modified version of lapack bundled with numpy that makes this work. We'd need to regenerate the lapack c code from a newer-but-not-so-new-to-break-f2c release of lapack  (#8376). The next step of fixing this is to actually get the generator running again ( #8381 ).",
        "createdAt" : "2017-01-05T19:28:45Z",
        "updatedAt" : "2017-02-09T18:06:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "17bbf7db-2464-47bb-8945-8ddb8d523578",
        "parentId" : "4c3e084e-f432-44f1-80e8-834d9f090d41",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Great, I have no idea of these things, was just worried this might be forgotten :)",
        "createdAt" : "2017-01-05T19:29:42Z",
        "updatedAt" : "2017-02-09T18:06:27Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "a0a60abf-f099-43a3-9ce8-1dd3ea53b780",
        "parentId" : "4c3e084e-f432-44f1-80e8-834d9f090d41",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Guess it would do no harm to open an issue. My working tree was branching way too much for a bunch of problems discovered while trying to fix the problems, and I think the best call is to sit tight and wait for PR merge/rejection, rather than increasing the amount of rebases I need to do each time!",
        "createdAt" : "2017-01-05T19:34:31Z",
        "updatedAt" : "2017-02-09T18:06:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6d81d991fafb7e57306ee784491f7913589756a",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +1944,1948 @@    #      http://icl.cs.utk.edu/lapack-forum/archives/lapack/msg00899.html\n    #    Lapack_lite does have that bug...\n    nlvl = max( 0, int( math.log( float(min(m, n))/2. ) ) + 1 )\n    iwork = zeros((3*min(m, n)*nlvl+11*min(m, n),), fortran_int)\n    if isComplexType(t):"
  }
]