[
  {
    "id" : "1508ccdf-9485-49f4-aa67-8c62e4c36094",
    "prId" : 2721,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d465f16e-0738-498b-9e18-dcdb15043066",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Just `dot(a, v[:, i] = w[i] *  v[:, i]` should do here. With broadcasting the simpler form `dot(a, v) = v * w` also works.but may be more confusing.\n",
        "createdAt" : "2013-07-10T02:30:57Z",
        "updatedAt" : "2013-07-10T02:30:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c6f27b0742a34f6215fcfd42541b9e9696796682",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +947,951 @@    The number `w` is an eigenvalue of `a` if there exists a vector\n    `v` such that ``dot(a,v) = w * v``. Thus, the arrays `a`, `w`, and\n    `v` satisfy the equations ``dot(a[:,:], v[:,i]) = w[i] * v[:,i]``\n    for :math:`i \\\\in \\\\{0,...,M-1\\\\}`.\n"
  },
  {
    "id" : "3aeeeb6f-bf3d-4338-b30b-cfd9de980b75",
    "prId" : 3978,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81c4d7fe-ad38-4a6e-b387-5215b0bda2a9",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This can be cleaned up more now that we only support 2.6-2.7 as the comparison can be done as\n\n```\nUPLO == b'L'\n```\n\nBut that cleanup can wait.\n",
        "createdAt" : "2013-10-25T17:33:34Z",
        "updatedAt" : "2013-10-25T18:07:28Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8e07275f05e95a4d0af098b06d37925602f7861",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +957,961 @@    extobj = get_linalg_error_extobj(\n        _raise_linalgerror_eigenvalues_nonconvergence)\n    if UPLO == _L:\n        gufunc = _umath_linalg.eigvalsh_lo\n    else:"
  },
  {
    "id" : "c8678180-fcdb-432c-99ad-f32cc8252d63",
    "prId" : 4977,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08b89835-63da-4ea8-88e1-3d81414475ea",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "this comment is not really needed\n",
        "createdAt" : "2014-09-13T12:31:51Z",
        "updatedAt" : "2014-11-10T10:57:26Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "5283bbed-c143-463c-8474-69888c08783a",
        "parentId" : "08b89835-63da-4ea8-88e1-3d81414475ea",
        "authorId" : "f350d0bd-bc3e-4982-b4da-24c15ea04c96",
        "body" : "Many functions/groups of functions have this kind of prefix in linalg.py.\n",
        "createdAt" : "2014-10-20T15:00:31Z",
        "updatedAt" : "2014-11-10T10:57:26Z",
        "lastEditedBy" : "f350d0bd-bc3e-4982-b4da-24c15ea04c96",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b12c394548e2d23bba83c0eccda958a28998293",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +2156,2160 @@\n\n# multi_dot\n\ndef multi_dot(arrays):"
  },
  {
    "id" : "5f02d724-723f-40ed-9545-d0b8d2690405",
    "prId" : 5196,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f064db39-34e1-4f57-8c5e-3e786c2bcb05",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "That's interesting, I wasn't aware it operated that way for `axis=None`.\n",
        "createdAt" : "2014-10-16T20:19:30Z",
        "updatedAt" : "2014-10-17T14:51:00Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a0ec693b-c4ac-498c-9a17-d85bdaaf58a2",
        "parentId" : "f064db39-34e1-4f57-8c5e-3e786c2bcb05",
        "authorId" : "08d28fd4-23d7-47ff-96d3-656eaa8635f1",
        "body" : "not sure it's the most useful thing it could be doing, but I don't think its worth trying to change.\n",
        "createdAt" : "2014-10-16T21:06:54Z",
        "updatedAt" : "2014-10-17T14:51:00Z",
        "lastEditedBy" : "08d28fd4-23d7-47ff-96d3-656eaa8635f1",
        "tags" : [
        ]
      },
      {
        "id" : "c14e827b-5a28-4d92-84fe-96135846e849",
        "parentId" : "f064db39-34e1-4f57-8c5e-3e786c2bcb05",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Wasn't suggesting a change, I learned something.\n",
        "createdAt" : "2014-10-16T21:15:08Z",
        "updatedAt" : "2014-10-17T14:51:00Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f88eea024448b913cea881efad405e5d4ece195",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +2067,2071 @@        ret = sqrt(sqnorm)\n        if keepdims:\n            ret = ret.reshape(ndim*[1])\n        return ret\n"
  },
  {
    "id" : "f523e1be-9357-4493-adb3-352f5e2acf27",
    "prId" : 6362,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7a15c1c-c112-49d1-9eed-60d3ec43089c",
        "parentId" : null,
        "authorId" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "body" : "Should this be changed to `M, M` as in the matrix inverse docs?\n",
        "createdAt" : "2015-09-25T16:20:18Z",
        "updatedAt" : "2015-09-25T16:20:18Z",
        "lastEditedBy" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "tags" : [
        ]
      },
      {
        "id" : "69bbf688-9569-48cf-8511-7890bbd2f13c",
        "parentId" : "c7a15c1c-c112-49d1-9eed-60d3ec43089c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "The SVD cond is defined even for non-square matrices, no? (frankly, did not try to put on my math brain for this)\n",
        "createdAt" : "2015-09-25T16:21:41Z",
        "updatedAt" : "2015-09-25T16:21:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "65671f72-4db5-4b86-a6f7-248f21f8749b",
        "parentId" : "c7a15c1c-c112-49d1-9eed-60d3ec43089c",
        "authorId" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "body" : "Yes it's true that part of the implementation of `cond` uses `svd` and that `svd` works on non-square matrices. But `cond` is the condition number of a particular function (matrix inversion, or `inv`) with respect to x, and it does not make sense to me that the condition number would be defined for x when x is not in the domain of the function.\nhttps://en.wikipedia.org/wiki/Condition_number\n",
        "createdAt" : "2015-09-25T16:26:14Z",
        "updatedAt" : "2015-09-25T16:26:14Z",
        "lastEditedBy" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "tags" : [
        ]
      },
      {
        "id" : "3206cdbd-b842-474a-814d-a5f64b19729f",
        "parentId" : "c7a15c1c-c112-49d1-9eed-60d3ec43089c",
        "authorId" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "body" : "But I guess this is a nitpicky point that could be addressed in a different PR if at all..\n",
        "createdAt" : "2015-09-25T16:27:23Z",
        "updatedAt" : "2015-09-25T16:27:23Z",
        "lastEditedBy" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "tags" : [
        ]
      },
      {
        "id" : "ae04c55a-0154-49e4-b756-33eef5c440af",
        "parentId" : "c7a15c1c-c112-49d1-9eed-60d3ec43089c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Google it ;), I think it is well defined with the pseudo inverse as well, since it has to do with how well the solution of the system of linear equations are, which also has a well defined solution for non-square matrices. At least in a least square sense.\n",
        "createdAt" : "2015-09-25T16:28:43Z",
        "updatedAt" : "2015-09-25T16:28:43Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "cb491a18-3bdf-48cb-b89b-be7c6dbe5ff6",
        "parentId" : "c7a15c1c-c112-49d1-9eed-60d3ec43089c",
        "authorId" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "body" : "> Google it ;)\n\nI'm not sure what you're suggesting to google...\n\nThe numpy.linalg.cond function is documented as \"The condition number of x is defined as the norm of x times the norm of the inverse of x.\" so should this be updated if `cond` is defined in some other way for nonsquare matrices?\n",
        "createdAt" : "2015-09-25T16:32:44Z",
        "updatedAt" : "2015-09-25T16:49:07Z",
        "lastEditedBy" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "tags" : [
        ]
      },
      {
        "id" : "d5efe170-018c-4808-8364-4600b61b43ce",
        "parentId" : "c7a15c1c-c112-49d1-9eed-60d3ec43089c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Sorry. But things like: http://icl.cs.utk.edu/lapack-forum/archives/lapack/msg00311.html\n\nIt seems to me that the definition with the pseudo inverse is definitely useful. So maybe we should add another sentence or two to the Notes to say that. Frankly, I am not quite sure what to write, but I can think about it later.\n",
        "createdAt" : "2015-09-25T17:28:54Z",
        "updatedAt" : "2015-09-25T17:29:09Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "c5f74f6a-b156-422e-80be-2f130fa612cb",
        "parentId" : "c7a15c1c-c112-49d1-9eed-60d3ec43089c",
        "authorId" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "body" : "@seberg Thanks, I'll open a separate issue.\n",
        "createdAt" : "2015-09-25T18:13:29Z",
        "updatedAt" : "2015-09-25T18:13:29Z",
        "lastEditedBy" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "tags" : [
        ]
      },
      {
        "id" : "8bdcf161-ae4f-41b3-a40f-b16ad12c3f43",
        "parentId" : "c7a15c1c-c112-49d1-9eed-60d3ec43089c",
        "authorId" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "body" : "Opened https://github.com/numpy/numpy/issues/6364, although I'm not confident that I've phrased that issue correctly.\n",
        "createdAt" : "2015-09-25T18:20:02Z",
        "updatedAt" : "2015-09-25T18:20:02Z",
        "lastEditedBy" : "ca95d614-21fc-41d3-bdbd-9aa4d803669f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae56c58db4207bd11100a9d24c9edf7694e34d67",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1383,1387 @@    Parameters\n    ----------\n    x : (..., M, N) array_like\n        The matrix whose condition number is sought.\n    p : {None, 1, -1, 2, -2, inf, -inf, 'fro'}, optional"
  },
  {
    "id" : "49d384ee-d324-47e9-8603-93a1d27fa3b9",
    "prId" : 7088,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "828fc1a7-e5d6-4bb7-9add-eba05e8b32dd",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'd just add `0.0` here.\n",
        "createdAt" : "2016-01-21T20:25:37Z",
        "updatedAt" : "2016-01-22T23:16:19Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "68778d28-6a21-42d1-b8d7-b4d6456f9475",
        "parentId" : "828fc1a7-e5d6-4bb7-9add-eba05e8b32dd",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "That is `x = asarray(x) + 0.0`. it's a bit ugly, but there you go. I had a proposal to add a `mintype` keyword to `asarray` that would also have solved this problem.\n",
        "createdAt" : "2016-01-21T20:30:42Z",
        "updatedAt" : "2016-01-22T23:16:19Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "eefdb28e-dfc6-4d67-9ecc-511a7a0563fc",
        "parentId" : "828fc1a7-e5d6-4bb7-9add-eba05e8b32dd",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "Personally, I'm not a fan. I think that adding or multiplying is performing an otherwise needless element operation especially for arrays of the right type. Also, if we need to cast to a preferred type, we should just do that explicitly.\n",
        "createdAt" : "2016-01-21T22:42:22Z",
        "updatedAt" : "2016-01-22T23:16:19Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "75d5b59bca181ee7e5ba872999014006c4b6c3f3",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +2111,2115 @@\n    \"\"\"\n    x = asarray(x)\n\n    if not issubclass(x.dtype.type, inexact):"
  },
  {
    "id" : "b2d2c911-f29e-4f6c-8c8e-1c104c42863c",
    "prId" : 7088,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06e82164-006d-447c-9e82-dae5fa962d7f",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Still need to handle the complex case if this stays.\n",
        "createdAt" : "2016-01-21T20:28:22Z",
        "updatedAt" : "2016-01-22T23:16:19Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "f6cc3aba-9a4d-4a98-b9f5-1d28551112e5",
        "parentId" : "06e82164-006d-447c-9e82-dae5fa962d7f",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "Not sure if I follow what you mean. I believe they are already handled. For instance, the following holds.\n\n```\n>>> issubclass(np.complexfloating, np.inexact)\nTrue\n```\n\nSimilarly this is true for specific types of complex types as they all subclass `np.complexfloating`. Personally, this is why I liked and went with your `np.inexact` suggestion.\n",
        "createdAt" : "2016-01-21T22:45:15Z",
        "updatedAt" : "2016-01-22T23:16:19Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      },
      {
        "id" : "510c6785-07af-4f4d-91dd-c324cd4ba60c",
        "parentId" : "06e82164-006d-447c-9e82-dae5fa962d7f",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yep, it works. I should probably knock off for the day...\n",
        "createdAt" : "2016-01-21T23:07:14Z",
        "updatedAt" : "2016-01-22T23:16:19Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "d8694a65-d064-4564-83b0-14ae220c6444",
        "parentId" : "06e82164-006d-447c-9e82-dae5fa962d7f",
        "authorId" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "body" : "No worries.\n",
        "createdAt" : "2016-01-21T23:09:05Z",
        "updatedAt" : "2016-01-22T23:16:19Z",
        "lastEditedBy" : "5b1b830f-f632-422e-a2fc-f6d019a6f5d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "75d5b59bca181ee7e5ba872999014006c4b6c3f3",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +2114,2118 @@\n    if not issubclass(x.dtype.type, inexact):\n        x = x.astype(float)\n\n    # Immediately handle some default, simple, fast, and common cases."
  },
  {
    "id" : "f74a3337-6524-4893-8933-0ccd34a67d73",
    "prId" : 8368,
    "prUrl" : "https://github.com/numpy/numpy/pull/8368#pullrequestreview-25120108",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46c80f75-1202-41b8-9e02-77927ec93f58",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`eig` would previously produce a cryptic `ValueError: cannot remove a zero-sized axis from an iterator`, since it omitted the check in other places.\r\n\r\nIt's not clear to me why `NpyIter_RemoveAxis` does not allow a zero-sized axis to be removed. At the very least, it should allow all but the last zero-sized axis to be removed, I think?",
        "createdAt" : "2016-12-12T14:11:11Z",
        "updatedAt" : "2017-03-04T00:42:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "7fe142c1-b3e5-4ae1-be99-55701176145b",
        "parentId" : "46c80f75-1202-41b8-9e02-77927ec93f58",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I have an old PR, which would remove this error, but mostly was never merged, because it required cleaning up of all linalg functions to make sure they don't crash within lapack....",
        "createdAt" : "2016-12-12T14:45:12Z",
        "updatedAt" : "2017-03-04T00:42:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "8528cdcc-1dee-45d7-aa2f-cac3160775b4",
        "parentId" : "46c80f75-1202-41b8-9e02-77927ec93f58",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Mind digging it out? Presumably it required cleaning them up C-side, so this PR is not a substitute\r\n",
        "createdAt" : "2016-12-12T15:06:00Z",
        "updatedAt" : "2017-03-04T00:42:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d3063bec-52da-4691-90ba-1a996dfa69ae",
        "parentId" : "46c80f75-1202-41b8-9e02-77927ec93f58",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Only takes a search of open PRs by me: https://github.com/numpy/numpy/pull/3861",
        "createdAt" : "2016-12-12T15:53:52Z",
        "updatedAt" : "2017-03-04T00:42:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "77bb3ba9-259c-4da5-b7af-e285e6307b44",
        "parentId" : "46c80f75-1202-41b8-9e02-77927ec93f58",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Eric, is my PR removing that weird error in some way useful here, or is it orthogonal. Frankly, I am not sure myself whether or not it helps here, considering that lapack probably cannot handle 0d anyway.",
        "createdAt" : "2017-01-05T19:17:40Z",
        "updatedAt" : "2017-03-04T00:42:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "00e64c3a-9768-489f-94cf-c179f51a810c",
        "parentId" : "46c80f75-1202-41b8-9e02-77927ec93f58",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "My guess is rather: Once we put this one in, I can reactivate my old one....",
        "createdAt" : "2017-01-05T19:18:02Z",
        "updatedAt" : "2017-03-04T00:42:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "c474af78-4152-4eb4-9baf-57b3a43bff22",
        "parentId" : "46c80f75-1202-41b8-9e02-77927ec93f58",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Lapack actually seems able to handle 0x0 (not 0d) in a lot of cases, but needs more careful argument preparation, that we are not doing. In particular, I think I can make `lstsq` work with it. I think your pr removing that weird error would become useful for the vectorized ops though.",
        "createdAt" : "2017-01-05T19:31:18Z",
        "updatedAt" : "2017-03-04T00:42:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "54f69c7a-d6ed-4b79-a4fc-8491381fcad7",
        "parentId" : "46c80f75-1202-41b8-9e02-77927ec93f58",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "@seberg: Ok, this is in - time to revisit #3861?",
        "createdAt" : "2017-03-04T02:52:51Z",
        "updatedAt" : "2017-03-04T02:52:51Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "86e71cbb-db20-4f52-bd43-4853cc37babd",
        "parentId" : "46c80f75-1202-41b8-9e02-77927ec93f58",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "jup, and I guess we can reduce it to those deletions....",
        "createdAt" : "2017-03-04T10:32:26Z",
        "updatedAt" : "2017-03-04T10:32:26Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "662744904a5f248a83f28ad3a7a791c817eaf140",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +904,908 @@    a, wrap = _makearray(a)\n    _assertRankAtLeast2(a)\n    _assertNdSquareness(a)\n    _assertFinite(a)\n    t, result_t = _commonType(a)"
  },
  {
    "id" : "5a7b1fb1-01aa-4f55-bbdc-8e239ad56d1a",
    "prId" : 8369,
    "prUrl" : "https://github.com/numpy/numpy/pull/8369#pullrequestreview-15375267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c3e084e-f432-44f1-80e8-834d9f090d41",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "According to LAPACK, this should be:\r\n\r\n> SMLSIZ is returned by ILAENV and is equal to the maximum\r\n> size of the subproblems at the bottom of the computation\r\n> tree (usually about 25), and\r\n>    NLVL = MAX( 0, INT( **LOG_2**( MIN( M,N )/(**SMLSIZ**+1) ) ) + 1 )\r\n\r\nFor whatever reason, we seem to have decided that `log(2) = SMLSIZ = 1`, which seems best described as \"false\". Either way, this is a can of worms, and not one that I think this PR should be opening.",
        "createdAt" : "2016-12-19T14:07:33Z",
        "updatedAt" : "2017-02-09T18:06:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "211ef23c-6b75-4e42-8505-147b5fc61687",
        "parentId" : "4c3e084e-f432-44f1-80e8-834d9f090d41",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Should we open an issue about this? Is there some example for when this goes bad? (I really hate bugs that might silently create incorrect results, and if this is the case, we should give it some priority)",
        "createdAt" : "2017-01-05T19:20:19Z",
        "updatedAt" : "2017-02-09T18:06:27Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "5a8bf5b7-45bd-4baf-a073-e5f4b773f630",
        "parentId" : "4c3e084e-f432-44f1-80e8-834d9f090d41",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I have a patch in the works that uses lapack's internal mechanism to calculate this correctly. Unfortunately, there's a bug in the modified version of lapack bundled with numpy that makes this work. We'd need to regenerate the lapack c code from a newer-but-not-so-new-to-break-f2c release of lapack  (#8376). The next step of fixing this is to actually get the generator running again ( #8381 ).",
        "createdAt" : "2017-01-05T19:28:45Z",
        "updatedAt" : "2017-02-09T18:06:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "17bbf7db-2464-47bb-8945-8ddb8d523578",
        "parentId" : "4c3e084e-f432-44f1-80e8-834d9f090d41",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Great, I have no idea of these things, was just worried this might be forgotten :)",
        "createdAt" : "2017-01-05T19:29:42Z",
        "updatedAt" : "2017-02-09T18:06:27Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "a0a60abf-f099-43a3-9ce8-1dd3ea53b780",
        "parentId" : "4c3e084e-f432-44f1-80e8-834d9f090d41",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Guess it would do no harm to open an issue. My working tree was branching way too much for a bunch of problems discovered while trying to fix the problems, and I think the best call is to sit tight and wait for PR merge/rejection, rather than increasing the amount of rebases I need to do each time!",
        "createdAt" : "2017-01-05T19:34:31Z",
        "updatedAt" : "2017-02-09T18:06:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6d81d991fafb7e57306ee784491f7913589756a",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +1944,1948 @@    #      http://icl.cs.utk.edu/lapack-forum/archives/lapack/msg00899.html\n    #    Lapack_lite does have that bug...\n    nlvl = max( 0, int( math.log( float(min(m, n))/2. ) ) + 1 )\n    iwork = zeros((3*min(m, n)*nlvl+11*min(m, n),), fortran_int)\n    if isComplexType(t):"
  },
  {
    "id" : "b405f097-272d-48cc-a241-3252016f1953",
    "prId" : 8827,
    "prUrl" : "https://github.com/numpy/numpy/pull/8827#pullrequestreview-62603912",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c8157e2-b704-4745-a4fb-478d44db5012",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "TODO: expose this publicly? (#7495)",
        "createdAt" : "2017-03-25T00:08:58Z",
        "updatedAt" : "2017-09-13T17:03:44Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0b4255cd-dd6b-48cd-b42f-afb5c5b8cff4",
        "parentId" : "5c8157e2-b704-4745-a4fb-478d44db5012",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Well, there is at least one implementation that could (eventually) be abandoned if this is exposed: https://github.com/astropy/astropy/blob/master/astropy/coordinates/matrix_utilities.py#L32",
        "createdAt" : "2017-03-25T00:57:17Z",
        "updatedAt" : "2017-09-13T17:03:44Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "527b7782-e5a2-4453-b101-794ecd8cf4d4",
        "parentId" : "5c8157e2-b704-4745-a4fb-478d44db5012",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Any reason for calling the method and not the free function?\r\n\r\nAlso, i'm increasingly considering using astropy for completely non-astrophysics related things in future - your units sounds more actively-developed than `Pint`, and rotation matrices are something I end up writing too often.\r\n\r\nRegarding the function before the one you link - #8719",
        "createdAt" : "2017-03-25T01:00:12Z",
        "updatedAt" : "2017-09-13T17:03:44Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "65f5693b-3b66-4662-8689-c6dca3361417",
        "parentId" : "5c8157e2-b704-4745-a4fb-478d44db5012",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "The method is the real thing; the function just turns the input into an array if needed and then calls the method. https://github.com/numpy/numpy/blob/master/numpy/core/fromnumeric.py#L458",
        "createdAt" : "2017-03-25T01:18:48Z",
        "updatedAt" : "2017-09-13T17:03:44Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "77a63c36-5e19-4344-9df3-81e33aa35336",
        "parentId" : "5c8157e2-b704-4745-a4fb-478d44db5012",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yep, I know :). Guess people are unlikely to pass around lists of lists",
        "createdAt" : "2017-03-25T01:20:32Z",
        "updatedAt" : "2017-09-13T17:03:44Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c8726a44-560d-4c81-b566-51117b59912b",
        "parentId" : "5c8157e2-b704-4745-a4fb-478d44db5012",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "p.s. In the astropy case this is only used internally in cases where I *know* the inputs are arrays; if we exposed this publically in numpy, I think using the function makes more sense.",
        "createdAt" : "2017-03-25T01:20:46Z",
        "updatedAt" : "2017-09-13T17:03:44Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "5c4075a3-88d7-4827-9158-eddea5c9e3a5",
        "parentId" : "5c8157e2-b704-4745-a4fb-478d44db5012",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "We need something like this, but I think it should be an array method as well. Maybe something like `a.M(atrix)T(ranspose`. When the `*.T` method was proposed there was discussion of what it should do, transposing matrices in a stack was one of ideas. I could also see a vector transpose, `a.VT` which just appends 1 to the dimensions. These ideas need discussion on the list.",
        "createdAt" : "2017-09-13T17:13:22Z",
        "updatedAt" : "2017-09-13T17:13:23Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "5790e38c-140b-431e-806f-7de48286b81e",
        "parentId" : "5c8157e2-b704-4745-a4fb-478d44db5012",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Should I add a leading underscore to the name for now?",
        "createdAt" : "2017-09-13T17:39:32Z",
        "updatedAt" : "2017-09-13T17:39:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f2af0984-15dc-4fe4-81e3-10c6cfd5812b",
        "parentId" : "5c8157e2-b704-4745-a4fb-478d44db5012",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@eric-wieser That would help distinguish it from `np.transpose` and avoid some confusion. Long term, it probably needs a different name.",
        "createdAt" : "2017-09-13T18:04:53Z",
        "updatedAt" : "2017-09-13T18:04:53Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "767379ae-e782-4d8e-a980-8e93f8dfa9f0",
        "parentId" : "5c8157e2-b704-4745-a4fb-478d44db5012",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "At any rate, this isn't going to appear in the docs at the moment, so isn't really public API yet.\r\n\r\nI'll send something around the mailing list requesting a name at some point. I think we can start off with the conservative `assert ndim >= 2` semantics initially, and put off the decision in #7495 and #9530",
        "createdAt" : "2017-09-13T23:17:53Z",
        "updatedAt" : "2017-09-13T23:17:53Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebe2cfb68586208bb096a575a603d00da5ee3887",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +227,231 @@def transpose(a):\n    \"\"\"\n    Transpose each matrix in a stack of matrices.\n\n    Unlike np.transpose, this only swaps the last two axes, rather than all of"
  },
  {
    "id" : "f5782c90-6fcf-41f7-9f38-926fb83ab78b",
    "prId" : 8836,
    "prUrl" : "https://github.com/numpy/numpy/pull/8836#pullrequestreview-29314918",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d26036f9-d326-42f4-bc6b-c96cd14a1d71",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "We already have a notes section higher up. Best not to have two of them.\r\n\r\nAlso, the changes to this file kinda feel different to all the rest - maybe put them in their own PR?",
        "createdAt" : "2017-03-27T21:15:52Z",
        "updatedAt" : "2017-03-27T23:31:16Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b4629f59-bcb8-42ac-a90d-06c87fb65291",
        "parentId" : "d26036f9-d326-42f4-bc6b-c96cd14a1d71",
        "authorId" : "4b0602db-f9ac-4b54-b200-2e79d0cfb7c3",
        "body" : "maybe I'm blind but I can't find the other `Notes`-section.",
        "createdAt" : "2017-03-27T21:20:45Z",
        "updatedAt" : "2017-03-27T23:31:16Z",
        "lastEditedBy" : "4b0602db-f9ac-4b54-b200-2e79d0cfb7c3",
        "tags" : [
        ]
      },
      {
        "id" : "81564784-3c7c-477a-959a-6dc96f035339",
        "parentId" : "d26036f9-d326-42f4-bc6b-c96cd14a1d71",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "No, it is I who is blind...",
        "createdAt" : "2017-03-27T21:54:43Z",
        "updatedAt" : "2017-03-27T23:31:16Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c51f1532-702a-4771-b71b-ffc3ab105bba",
        "parentId" : "d26036f9-d326-42f4-bc6b-c96cd14a1d71",
        "authorId" : "4b0602db-f9ac-4b54-b200-2e79d0cfb7c3",
        "body" : "I will open another PR for this change then :)",
        "createdAt" : "2017-03-27T21:57:52Z",
        "updatedAt" : "2017-03-27T23:31:16Z",
        "lastEditedBy" : "4b0602db-f9ac-4b54-b200-2e79d0cfb7c3",
        "tags" : [
        ]
      },
      {
        "id" : "dadbb411-326c-4ea4-97ad-f812965c7560",
        "parentId" : "d26036f9-d326-42f4-bc6b-c96cd14a1d71",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Feel free to leave this in, since it's correct. Just add the backslashes on the lines you unwrapped, and this'll be good to merge",
        "createdAt" : "2017-03-27T22:06:40Z",
        "updatedAt" : "2017-03-27T23:31:16Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b0e3aa11ac5ae7b16ae6c2d72bb5624d3c124bc",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +2358,2362 @@    >>> A.dot(B).dot(C).dot(D)\n\n    Notes\n    -----\n    The cost for a matrix multiplication can be calculated with the"
  },
  {
    "id" : "fbe4bd07-0dc9-42c0-b942-216f14ac2e09",
    "prId" : 9522,
    "prUrl" : "https://github.com/numpy/numpy/pull/9522#pullrequestreview-54544245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed6aab22-5a0f-47ef-8695-6678845a1ae7",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This is not quite the same as `asfarray` casts to float64 type but `abs` does not. In particular this will affect float16 type.  OTOH, float16 is preserved by the other norms. Hmm... IIRC, this function has had various type problems over the years. So the change may be justified, but might be worth something in the release notes.",
        "createdAt" : "2017-08-06T18:33:02Z",
        "updatedAt" : "2017-08-06T21:20:32Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "8d47206d-434a-4781-b0f8-0908f2a1f2cd",
        "parentId" : "ed6aab22-5a0f-47ef-8695-6678845a1ae7",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "The comment stated this was done for integer types. Without conversion, those now would seem to have a bigger risk of overflow in the `.reduce` below. I guess converting to float is not unreasonable since the `**(1/ord)` at the end will do that anyway. On the other hand, I prefer the simplicity of this change, and it is also what is done above for `ord=2` (surely, the most common case).",
        "createdAt" : "2017-08-06T20:32:35Z",
        "updatedAt" : "2017-08-06T21:20:32Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "8fd818e6-8686-419b-8497-09a097066dfd",
        "parentId" : "ed6aab22-5a0f-47ef-8695-6678845a1ae7",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Integer types are already gone by the time we get here.",
        "createdAt" : "2017-08-06T20:38:37Z",
        "updatedAt" : "2017-08-06T21:20:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "99083f7c-beac-49e0-a5aa-8abc7e323170",
        "parentId" : "ed6aab22-5a0f-47ef-8695-6678845a1ae7",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Ah, you're right, there is an `asfloat` above (at least for integer arrays - but special-casing object definitely feels bad). So, the comment was out of date, then, and there would seem to be no reason not to go with your simplification.",
        "createdAt" : "2017-08-06T20:57:38Z",
        "updatedAt" : "2017-08-06T21:20:32Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "2030965a-af7d-4e04-a8c3-81def508f62e",
        "parentId" : "ed6aab22-5a0f-47ef-8695-6678845a1ae7",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yep, as mentioned in the commit, #7088 made this essentially dead code, but didn't notice.",
        "createdAt" : "2017-08-06T21:20:05Z",
        "updatedAt" : "2017-08-06T21:20:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "6c7683e2-0d9c-44b6-ada3-1ac32c226013",
        "parentId" : "ed6aab22-5a0f-47ef-8695-6678845a1ae7",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "@charris: Good catch on the behaviour change - release notes updated",
        "createdAt" : "2017-08-06T21:20:22Z",
        "updatedAt" : "2017-08-06T21:20:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "bf13eced-6bef-440b-a1e2-41529c6e211f",
        "parentId" : "ed6aab22-5a0f-47ef-8695-6678845a1ae7",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "The old behaviour was particularly weird because `norm(complex64) -> float32` but `norm(float32) -> float64`",
        "createdAt" : "2017-08-06T21:22:13Z",
        "updatedAt" : "2017-08-06T21:22:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "351fe979580ab842cc5c04e1b616d3a64936a695",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +2202,2206 @@            except TypeError:\n                raise ValueError(\"Invalid norm order for vectors.\")\n            absx = abs(x)\n            absx **= ord\n            return add.reduce(absx, axis=axis, keepdims=keepdims) ** (1.0 / ord)"
  },
  {
    "id" : "494bc1e0-163b-4e07-bd89-a4be66c4bfff",
    "prId" : 9582,
    "prUrl" : "https://github.com/numpy/numpy/pull/9582#pullrequestreview-57357181",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "476ba57d-4145-4b59-843b-e31886bc54ad",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This would be better as `np.NoValue_`<, I think",
        "createdAt" : "2017-08-19T15:47:07Z",
        "updatedAt" : "2017-08-19T15:48:47Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1a8adbf8-8a9e-4230-b2d6-c5aea708a058",
        "parentId" : "476ba57d-4145-4b59-843b-e31886bc54ad",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "At least, that's consistent with how I implemented this kind of thing for the axis argument to MaskedArray.argmin",
        "createdAt" : "2017-08-19T15:51:39Z",
        "updatedAt" : "2017-08-19T15:51:39Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "66be5d49-3bc0-43f6-b316-45c6f6863fa4",
        "parentId" : "476ba57d-4145-4b59-843b-e31886bc54ad",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Thought about that at some point, but then decided that the NoValue thingy actually has a very specific purpose for functions dispatching to methods, and \"warn\" gives a much clearer idea when looking at the signature.",
        "createdAt" : "2017-08-19T15:59:50Z",
        "updatedAt" : "2017-08-19T15:59:50Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "ac60d201-f9e3-4110-acce-c7cfe1ec36d5",
        "parentId" : "476ba57d-4145-4b59-843b-e31886bc54ad",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "You could argue, NoValue means the same in the sense of \"not passed in\", but I just don't think we need a singleton like this here when a meaningful string will do. Just my opinion though.",
        "createdAt" : "2017-08-19T16:01:02Z",
        "updatedAt" : "2017-08-19T16:01:02Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "550e8b04-8ad0-4cd3-82e2-8093bc40774b",
        "parentId" : "476ba57d-4145-4b59-843b-e31886bc54ad",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I think @eric-wieser has a point. The original motivation for `_NoValue` was\r\n\r\n> The idea is to make it an implementation detail and minimize the API\r\nsurface area - people can't intentionally pass _NotGiven, so we don't find\r\nourselves down the line having to specially support people explicitly\r\npassing None.\r\n\r\nSo the argument here is that if someone passes `'warn'` on purpose we will break their code if we drop it a some point.",
        "createdAt" : "2017-08-19T17:10:59Z",
        "updatedAt" : "2017-08-19T17:10:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "fd195678-1ef9-4ad5-8159-8d7c18448097",
        "parentId" : "476ba57d-4145-4b59-843b-e31886bc54ad",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "True, I don't feel much either way. Thought the main point of NoValue was for thing like `keepdims` where there is no other option, but its a fair point that it hinders someone from thinking that it is permanent API. Do we use this consistently now also for this use case?",
        "createdAt" : "2017-08-19T19:00:00Z",
        "updatedAt" : "2017-08-19T19:00:00Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "ab3e899f-5427-42f7-aa23-d699fc3fc9c7",
        "parentId" : "476ba57d-4145-4b59-843b-e31886bc54ad",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "It was invented mostly for \"keepdims\", so I don't know that we really have a tradition yet. I don't feel strongly either way about using it in this case. I thought \"warn\" was a bit unusual, but not particularly problematic. I confess to a certain weakness for things that are just a bit different, and this was one of them.",
        "createdAt" : "2017-08-19T19:45:08Z",
        "updatedAt" : "2017-08-19T19:45:08Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd3a2c580e2d5f0a7a958b3e7d942c230648f2e3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1811,1815 @@# Linear Least Squares\n\ndef lstsq(a, b, rcond=\"warn\"):\n    \"\"\"\n    Return the least-squares solution to a linear matrix equation."
  },
  {
    "id" : "81c5d02d-aaab-4e20-81e6-a55789eb3786",
    "prId" : 9980,
    "prUrl" : "https://github.com/numpy/numpy/pull/9980#pullrequestreview-75825351",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d974fe8-8639-42e9-ad0c-7da1317627b5",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Is this necessary given that the inputs are coerced already?",
        "createdAt" : "2017-11-10T15:02:21Z",
        "updatedAt" : "2018-04-11T06:33:22Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "ce564bd6-4424-4347-9745-93d143c631ee",
        "parentId" : "5d974fe8-8639-42e9-ad0c-7da1317627b5",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "The inputs don't look coerced already to me",
        "createdAt" : "2017-11-10T16:59:32Z",
        "updatedAt" : "2018-04-11T06:33:22Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "6a14c7ca-9775-40df-8a2b-ab6e9568b3a2",
        "parentId" : "5d974fe8-8639-42e9-ad0c-7da1317627b5",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Ah, yes, above one just gets the types for later conversion. Should have noticed that.",
        "createdAt" : "2017-11-10T17:16:33Z",
        "updatedAt" : "2018-04-11T06:33:22Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ef55be846bc8e6e21515787b29608fec7e1fad0",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +2037,2041 @@        gufunc = _umath_linalg.lstsq_n\n\n    signature = 'DDd->Did' if isComplexType(t) else 'ddd->did'\n    extobj = get_linalg_error_extobj(_raise_linalgerror_lstsq)\n    b_out, rank, s = gufunc(a, b, rcond, signature=signature, extobj=extobj)"
  },
  {
    "id" : "0231495a-52c7-466e-8ccb-d7bb7c68c528",
    "prId" : 9986,
    "prUrl" : "https://github.com/numpy/numpy/pull/9986#pullrequestreview-74985800",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b11f1b3-9f7f-4cea-9af0-6aa3a06139c6",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is a bizarre interface, and `resids` already contains `0` in the `m <= n` case, which is a more meaningful way to say \"no residual\" than `[]`. But we're stuck with it, because that's how it's documented.",
        "createdAt" : "2017-11-08T04:12:24Z",
        "updatedAt" : "2017-11-09T16:10:46Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "3402dcf9b4acd32e66a9b8a02ec34a0e02052a5d",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +2064,2068 @@    # as documented\n    if rank != n or m <= n:\n        resids = array([], result_real_t)\n\n    # coerce output arrays"
  },
  {
    "id" : "8bac0f3f-768c-4832-8b2f-af4631786250",
    "prId" : 10571,
    "prUrl" : "https://github.com/numpy/numpy/pull/10571#pullrequestreview-96252650",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd1bc40a-6f7c-44a9-952f-f1c00a20c3c7",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "You don't need this special case, do you? Assigning a mask works just fine for 0d as well",
        "createdAt" : "2018-02-13T18:37:43Z",
        "updatedAt" : "2018-02-13T18:37:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab8603e5594c22cc69326089cce0deea38f01c40",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +1566,1570 @@            r[nan_mask] = Inf\n        elif nan_mask:\n            r[()] = Inf\n\n    # Convention is to return scalars instead of 0d arrays"
  },
  {
    "id" : "4cfd0bd8-9f11-41df-83ab-73f0a9d1df51",
    "prId" : 10938,
    "prUrl" : "https://github.com/numpy/numpy/pull/10938#pullrequestreview-114179262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1642a9ed-71b8-49fb-b02a-989373e8950b",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Total nitpick, but I would just write this as\r\n```\r\nif a.shape[-2] != a.shape[-1]:\r\n```\r\ngiven the error message I think that is clearer than defining `m, n` (and certainly than the min/max thingy there now!).",
        "createdAt" : "2018-04-21T18:05:40Z",
        "updatedAt" : "2018-04-21T18:14:06Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a43ccbba5cbeec40dee708fc8f56a593d84272b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +211,215 @@def _assertNdSquareness(*arrays):\n    for a in arrays:\n        m, n = a.shape[-2:]\n        if m != n:\n            raise LinAlgError('Last 2 dimensions of the array must be square')"
  },
  {
    "id" : "0b4f078d-9fdb-4d0c-95d5-7213ee9c8f5b",
    "prId" : 10938,
    "prUrl" : "https://github.com/numpy/numpy/pull/10938#pullrequestreview-114179262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9438daad-8502-40e8-82af-85981b704252",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Here, the assignments make the code a lot clearer (and of course now broadcastable); nice.",
        "createdAt" : "2018-04-21T18:06:35Z",
        "updatedAt" : "2018-04-21T18:14:06Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a43ccbba5cbeec40dee708fc8f56a593d84272b",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +2009,2013 @@    _assertRank2(a, b)\n    _assertNoEmpty2d(a, b)  # TODO: relax this constraint\n    m, n = a.shape[-2:]\n    m2, n_rhs = b.shape[-2:]\n    if m != m2:"
  },
  {
    "id" : "e76fcad1-0796-4f91-a0ec-67af6b19352c",
    "prId" : 11593,
    "prUrl" : "https://github.com/numpy/numpy/pull/11593#pullrequestreview-141355719",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb2acb8e-e187-4f44-b73a-e8bbac79578a",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is exactly the fix I was expecting :)",
        "createdAt" : "2018-07-29T17:50:52Z",
        "updatedAt" : "2018-07-31T07:20:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "9fc44c28-06be-4bc8-b63d-7723d6d2576c",
        "parentId" : "bb2acb8e-e187-4f44-b73a-e8bbac79578a",
        "authorId" : "fcc8b868-d46d-454e-b132-0c020490505e",
        "body" : "... yes... and (the late) Gene Golub is not going to tell me to give back my e-mail account. (I got my gmail invite from him.)",
        "createdAt" : "2018-07-29T18:01:27Z",
        "updatedAt" : "2018-07-31T07:20:43Z",
        "lastEditedBy" : "fcc8b868-d46d-454e-b132-0c020490505e",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff9063c9f2572205164f42e72f307809be297986",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +876,880 @@    lwork = 1\n    work = zeros((lwork,), t)\n    results = lapack_routine(m, n, a, max(1, m), tau, work, -1, 0)\n    if results['info'] != 0:\n        raise LinAlgError('%s returns %d' % (routine_name, results['info']))"
  },
  {
    "id" : "d68b41b6-41a2-4649-9eb0-81b786031382",
    "prId" : 11593,
    "prUrl" : "https://github.com/numpy/numpy/pull/11593#pullrequestreview-141356682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae34dc0d-42a4-44ae-b82f-9e7c27443cd9",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "So, looking at the source code - `work[0]` is populated as `N*NB`, and `NB = 32`` - so strictly speaking the `n` is not needed here, Arguably, lapack ought to be setting `work[0]` to `max(1, N*NB)`, so I'd consider this a bug in lapack.\r\n\r\nEither way, what you have here is definitely correct, and it doesn't really do any harm to be extra safe.",
        "createdAt" : "2018-07-29T18:42:32Z",
        "updatedAt" : "2018-07-31T07:20:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff9063c9f2572205164f42e72f307809be297986",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +924,928 @@\n    # compute q\n    lwork = max(1, n, int(abs(work[0])))\n    work = zeros((lwork,), t)\n    results = lapack_routine(m, mc, mn, q, max(1, m), tau, work, lwork, 0)"
  },
  {
    "id" : "124b1d57-bdff-4e86-8444-3e8fef760ce5",
    "prId" : 11594,
    "prUrl" : "https://github.com/numpy/numpy/pull/11594#pullrequestreview-142655736",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac7c84e6-e728-4ba7-bb07-29b650fc7b5f",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "One of the tests should be checking for this case",
        "createdAt" : "2018-08-02T05:45:33Z",
        "updatedAt" : "2018-08-02T16:24:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "9414fc10-df5b-4907-9657-fc5d164daffd",
        "parentId" : "ac7c84e6-e728-4ba7-bb07-29b650fc7b5f",
        "authorId" : "fcc8b868-d46d-454e-b132-0c020490505e",
        "body" : "adding that...",
        "createdAt" : "2018-08-02T06:16:18Z",
        "updatedAt" : "2018-08-02T16:24:21Z",
        "lastEditedBy" : "fcc8b868-d46d-454e-b132-0c020490505e",
        "tags" : [
        ]
      }
    ],
    "commit" : "3abfc054ace330926ba3f099791588088801d85b",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +2151,2155 @@    x, resids, rank, s = gufunc(a, b, rcond, signature=signature, extobj=extobj)\n    if m == 0:\n        x[...] = 0\n    if n_rhs == 0:\n        # remove the item we added"
  },
  {
    "id" : "f25da975-7fce-4bee-aa9b-d85ea6dde741",
    "prId" : 11691,
    "prUrl" : "https://github.com/numpy/numpy/pull/11691#pullrequestreview-144604645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63359057-f220-4a81-af38-a9b37b63b63b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Possibly `<= 2` - what does this do for 1d arrays?",
        "createdAt" : "2018-08-08T20:43:48Z",
        "updatedAt" : "2018-08-08T20:59:08Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "23557ba5-3eaf-46a2-86ff-c90700d65c86",
        "parentId" : "63359057-f220-4a81-af38-a9b37b63b63b",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "1d arrays error. That is tested for.",
        "createdAt" : "2018-08-08T20:54:40Z",
        "updatedAt" : "2018-08-08T20:59:08Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b080c5b7a7cf1c0da91e6c0ecb1fdd490b45ce5c",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +611,615 @@    if a.dtype != object:\n        fmatmul = matmul\n    elif a.ndim == 2:\n        fmatmul = dot\n    else:"
  },
  {
    "id" : "b492a20c-abb0-48bb-9845-2d888bf154d5",
    "prId" : 12693,
    "prUrl" : "https://github.com/numpy/numpy/pull/12693#pullrequestreview-190127169",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82b2d3af-20d3-46c8-aa1c-e333cf8388fc",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "When called through `pinv`, these lines are a waste of time because the terms get multiplied anyway. I suspect that's not worth optimizing though.",
        "createdAt" : "2019-01-08T08:11:03Z",
        "updatedAt" : "2019-01-08T16:53:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d8681b69020f1f8d63cdacc178bc858069abd4f",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +1607,1611 @@            # singular values are unsigned, move the sign into v\n            vt = transpose(u * sign(s)[..., None, :]).conjugate()\n            s = abs(s)\n            return wrap(u), s, wrap(vt)\n        else:"
  },
  {
    "id" : "6914d80f-e630-4b81-9f21-621677fbe69e",
    "prId" : 13116,
    "prUrl" : "https://github.com/numpy/numpy/pull/13116#pullrequestreview-215619516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90627f3e-43b8-4e0f-a2b4-1cd8de4d8fdb",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "There are more single->double changes needed on lines 1033-1035",
        "createdAt" : "2019-03-18T14:09:23Z",
        "updatedAt" : "2019-03-18T14:09:23Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "1872427bb86ab192d2e93311e9a38a409e1d6efa",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +1042,1046 @@    (1.0, 1.0, 0.0)\n\n    Now multiply a diagonal matrix by ``Q`` on one side and by ``Q.T`` on the other:\n\n    >>> D = np.diag((-1,1))"
  },
  {
    "id" : "9c75154c-b384-4e48-a292-f35cd696a66a",
    "prId" : 14988,
    "prUrl" : "https://github.com/numpy/numpy/pull/14988#pullrequestreview-324408618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eeacb319-26c8-46d1-b09a-4948bd289972",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "In other places you align the second line to the `:`. Here you do not. Just wondering if we have a standard? Not worth another commit, but I always wonder how to indent a continuation line.",
        "createdAt" : "2019-11-28T10:07:42Z",
        "updatedAt" : "2019-11-28T17:19:40Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "3fb55575-9336-41de-9ed0-4b72570df078",
        "parentId" : "eeacb319-26c8-46d1-b09a-4948bd289972",
        "authorId" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "body" : "I'll fix this.  These are the first lines that I added in the PR.  Later I noticed alignment on the colon used in other docstrings, so I started following that precedent, but I forgot to go back and fix this one.\r\n",
        "createdAt" : "2019-11-28T15:45:49Z",
        "updatedAt" : "2019-11-28T17:19:40Z",
        "lastEditedBy" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "tags" : [
        ]
      },
      {
        "id" : "c342c279-1606-4c97-aa88-156e15d1da9f",
        "parentId" : "eeacb319-26c8-46d1-b09a-4948bd289972",
        "authorId" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "body" : "Fixed in the latest update.",
        "createdAt" : "2019-11-28T17:20:39Z",
        "updatedAt" : "2019-11-28T17:20:39Z",
        "lastEditedBy" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "tags" : [
        ]
      }
    ],
    "commit" : "741ac38ca595dd3e7c5603ee797fb3624695a3e6",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +716,720 @@    scipy.linalg.cho_factor : Cholesky decomposition of a matrix, to use in\n                              `scipy.linalg.cho_solve`.\n\n    Notes\n    -----"
  },
  {
    "id" : "ebe48621-8879-4cc1-bbf1-668475484756",
    "prId" : 15468,
    "prUrl" : "https://github.com/numpy/numpy/pull/15468#pullrequestreview-350118081",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4443f8e6-235c-4cdb-8b7d-342b158c2574",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm not convinced whether this is the right way around (`None, :` vs `:, None`). \r\n\r\nDo tests fail if you swap them?",
        "createdAt" : "2020-01-29T13:45:25Z",
        "updatedAt" : "2020-02-05T10:47:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "48898142-448b-4021-baed-10c3803b2924",
        "parentId" : "4443f8e6-235c-4cdb-8b7d-342b158c2574",
        "authorId" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "body" : "> Do tests fail if you swap them?\r\n\r\nI just checked, and they do. Reason about it this way: The last dimension (columns) is the one that has to be sorted, so we have to place the last axis of `sidx` parallel to it.\r\n\r\nThis is matching with the `None, :` below. If you like I could add a comment.",
        "createdAt" : "2020-01-29T13:50:26Z",
        "updatedAt" : "2020-02-05T10:47:52Z",
        "lastEditedBy" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "tags" : [
        ]
      }
    ],
    "commit" : "b202aad8d8e138d4c4cb8ccc590b87e1173f45bc",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1623,1627 @@            sgn = _nx.take_along_axis(sgn, sidx, axis=-1)\n            s = _nx.take_along_axis(s, sidx, axis=-1)\n            u = _nx.take_along_axis(u, sidx[..., None, :], axis=-1)\n            # singular values are unsigned, move the sign into v\n            vt = transpose(u * sgn[..., None, :]).conjugate()"
  },
  {
    "id" : "09532cc0-3a5b-45d5-be88-19064baa3719",
    "prId" : 15715,
    "prUrl" : "https://github.com/numpy/numpy/pull/15715#pullrequestreview-372305814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ae51b83-caa7-49d8-9843-5c609f8406e5",
        "parentId" : null,
        "authorId" : "ed5564b3-30de-4cde-83d3-042942f7203d",
        "body" : "Should the recursive calls to `_multi_dot` get the `out` argument? What about in the `i == j` case?",
        "createdAt" : "2020-03-06T06:43:29Z",
        "updatedAt" : "2020-04-13T16:26:36Z",
        "lastEditedBy" : "ed5564b3-30de-4cde-83d3-042942f7203d",
        "tags" : [
        ]
      },
      {
        "id" : "566b7b4d-364c-45d1-bee4-afb55158a7a3",
        "parentId" : "5ae51b83-caa7-49d8-9843-5c609f8406e5",
        "authorId" : "29597efe-a1a3-4249-a8c7-a556f1f490ac",
        "body" : "`out` should be used only by the final call to `np.dot`. The intermediate products before the final product might be a different shape from `out`. So only the first call to `_multi_dot` from `multi_dot` should get `out`, and the recursive `_multi_dot` calls will just get `out=None` and behave as before\r\n\r\n`i == j` is only used as the terminating case of the recursive `_multi_dot` calls. The initial call to `_multi_dot` from `multi_dot` is `_multi_dot(arrays, order, 0, n - 1, out=out)`, so it will never have `i == j` because `n` cannot equal 1 at that point. The first call will always go down the `np.dot` code path and use the `out` for the final output",
        "createdAt" : "2020-03-06T08:01:21Z",
        "updatedAt" : "2020-04-13T16:26:36Z",
        "lastEditedBy" : "29597efe-a1a3-4249-a8c7-a556f1f490ac",
        "tags" : [
        ]
      },
      {
        "id" : "13f0ab15-7e4a-4439-9684-9f60c4f28972",
        "parentId" : "5ae51b83-caa7-49d8-9843-5c609f8406e5",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "A very brief comment next to `return arrays[i]` to that effect would be helpful to future readers, perhaps:\r\n```\r\n# The initial call to _multi_dot will never have i == j, so we needn't handle `out` here\r\n```\r\nperhaps combined with\r\n```\r\nassert out is None\r\n```",
        "createdAt" : "2020-03-06T13:37:51Z",
        "updatedAt" : "2020-04-13T16:26:36Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "533176c2-5f0e-4d17-b47c-5b05eb95fc0c",
        "parentId" : "5ae51b83-caa7-49d8-9843-5c609f8406e5",
        "authorId" : "29597efe-a1a3-4249-a8c7-a556f1f490ac",
        "body" : "added in 80c3034cff020f4c6af542f6c9f7a3bcea598319",
        "createdAt" : "2020-03-10T20:42:00Z",
        "updatedAt" : "2020-04-13T16:26:36Z",
        "lastEditedBy" : "29597efe-a1a3-4249-a8c7-a556f1f490ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "478fed4191c66e55ca4e9dbac69c520959e314e5",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +2808,2812 @@    else:\n        return dot(_multi_dot(arrays, order, i, order[i, j]),\n                   _multi_dot(arrays, order, order[i, j] + 1, j),\n                   out=out)"
  },
  {
    "id" : "0d72c495-de38-482b-81b6-c4184f803f1b",
    "prId" : 15715,
    "prUrl" : "https://github.com/numpy/numpy/pull/15715#pullrequestreview-372306201",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4f5b99c-f769-4da6-995a-13e47895f428",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```suggestion\r\n        assert out is None  # the initial call should never get here\r\n        return arrays[i]\r\n```",
        "createdAt" : "2020-03-06T13:39:24Z",
        "updatedAt" : "2020-04-13T16:26:36Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5129603e-5950-40a9-a431-96b14bc7cd6d",
        "parentId" : "f4f5b99c-f769-4da6-995a-13e47895f428",
        "authorId" : "29597efe-a1a3-4249-a8c7-a556f1f490ac",
        "body" : "added in 80c3034cff020f4c6af542f6c9f7a3bcea598319",
        "createdAt" : "2020-03-10T20:42:38Z",
        "updatedAt" : "2020-04-13T16:26:36Z",
        "lastEditedBy" : "29597efe-a1a3-4249-a8c7-a556f1f490ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "478fed4191c66e55ca4e9dbac69c520959e314e5",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +2805,2809 @@        assert out is None\n\n        return arrays[i]\n    else:\n        return dot(_multi_dot(arrays, order, i, order[i, j]),"
  },
  {
    "id" : "77fd67ce-4d31-42d6-8afd-8f6e03eb28be",
    "prId" : 15715,
    "prUrl" : "https://github.com/numpy/numpy/pull/15715#pullrequestreview-374614953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c34d1b2-9f31-45a0-a74c-f0fc152e306b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```suggestion\r\n        to be flexible.\r\n        \r\n        .. versionadded:: 1.19.0\r\n```",
        "createdAt" : "2020-03-13T07:36:19Z",
        "updatedAt" : "2020-04-13T16:26:36Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d72db05e-94ef-4900-8039-dab5d7c41f1e",
        "parentId" : "6c34d1b2-9f31-45a0-a74c-f0fc152e306b",
        "authorId" : "29597efe-a1a3-4249-a8c7-a556f1f490ac",
        "body" : "@eric-wieser added in 8abeaba46a5fbf24b2c249cf5c9dbd8880f8231c",
        "createdAt" : "2020-03-13T20:56:07Z",
        "updatedAt" : "2020-04-13T16:26:36Z",
        "lastEditedBy" : "29597efe-a1a3-4249-a8c7-a556f1f490ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "478fed4191c66e55ca4e9dbac69c520959e314e5",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +2647,2651 @@        for `dot(a, b)`. This is a performance feature. Therefore, if these\n        conditions are not met, an exception is raised, instead of attempting\n        to be flexible.\n\n        .. versionadded:: 1.19.0"
  },
  {
    "id" : "7f0ce510-90d8-447d-950f-ac51953b9ab7",
    "prId" : 19151,
    "prUrl" : "https://github.com/numpy/numpy/pull/19151#pullrequestreview-677496059",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0e1a743-20db-4478-8157-bd5d5ff32da7",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you add a comment explaining `mc`?",
        "createdAt" : "2021-06-07T14:37:35Z",
        "updatedAt" : "2021-06-07T14:37:35Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e405d53a504d6f97c8b1227d7f4d3c3c1aa2834",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +968,972 @@    extobj = get_linalg_error_extobj(_raise_linalgerror_qr)\n    q = gufunc(a, tau, signature=signature, extobj=extobj)\n    r = triu(a[..., :mc, :])\n\n    q = q.astype(result_t, copy=False)"
  },
  {
    "id" : "82962c79-990f-41d6-8cd9-4594f11f73ea",
    "prId" : 19151,
    "prUrl" : "https://github.com/numpy/numpy/pull/19151#pullrequestreview-693763863",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e1c7f41-f31a-4519-824f-47dd3272e936",
        "parentId" : null,
        "authorId" : "39f9fbb1-8b84-4716-a414-9f57db5fc2a5",
        "body" : "Is this signature the same thing as defined by https://numpy.org/devdocs/reference/c-api/generalized-ufuncs.html ?\r\nIf so, then\r\n- it does not seem to follow the gufunc signature rules\r\n- why the signatures include type information (complex vs real)? If `d` means `double` then why single precision float cases are not handled?",
        "createdAt" : "2021-06-23T08:34:42Z",
        "updatedAt" : "2021-06-23T09:15:57Z",
        "lastEditedBy" : "39f9fbb1-8b84-4716-a414-9f57db5fc2a5",
        "tags" : [
        ]
      },
      {
        "id" : "7e64b387-72d4-4cb1-b3eb-4b841e471463",
        "parentId" : "6e1c7f41-f31a-4519-824f-47dd3272e936",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "No, this is not a gufunc signature, this is a type signature. The terminology is confusing, but this is consistent with the rest of the file.\r\n\r\nFor reasons lost to time, all of the linalg functions promote single precision to double precision. However, the underlying gufuncs do support single precision.",
        "createdAt" : "2021-06-23T09:18:44Z",
        "updatedAt" : "2021-06-23T09:18:44Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c602f53a-92f9-48de-9266-51f9c7851bea",
        "parentId" : "6e1c7f41-f31a-4519-824f-47dd3272e936",
        "authorId" : "0f22f62d-88ab-4820-aa32-ea85d896b487",
        "body" : "I found out that we can do `F->f` for single precision floating point numbers. The problem is that, `_commonType` always sets `t = double` and hence, the input array always gets converted to `double` type (no matter whether the original input is `float` or `double` type). Let me know, if I should include separate signatures for `float` type arrays. The max we will be required to do is to keep `t` and `result_t` as same inside the definition of `np.linalg.qr`.\r\n\r\nThough I feel that this is a more of a broader problem and might not be specific to this function only. May be a separate PR can be made to solve such type problems in all those functions under `np.linalg` where the input type is always promoted to `double`.",
        "createdAt" : "2021-06-28T09:48:12Z",
        "updatedAt" : "2021-06-28T09:52:55Z",
        "lastEditedBy" : "0f22f62d-88ab-4820-aa32-ea85d896b487",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e405d53a504d6f97c8b1227d7f4d3c3c1aa2834",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +934,938 @@        gufunc = _umath_linalg.qr_r_raw_n\n\n    signature = 'D->D' if isComplexType(t) else 'd->d'\n    extobj = get_linalg_error_extobj(_raise_linalgerror_qr)\n    tau = gufunc(a, signature=signature, extobj=extobj)"
  },
  {
    "id" : "1d9f174f-4dca-42b3-87d6-0a6c2affc5ab",
    "prId" : 19225,
    "prUrl" : "https://github.com/numpy/numpy/pull/19225#pullrequestreview-682342295",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "009a8f2e-50bc-4a7e-bbe8-ab0ccb7141f1",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Can't say I'm happy about accepting 1-D vectors . . .",
        "createdAt" : "2021-06-12T17:54:34Z",
        "updatedAt" : "2021-06-12T17:54:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebb1600bdc9a8266ba239bc9f8c7b6bd2779f249",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +1815,1819 @@    Parameters\n    ----------\n    A : {(M,), (..., M, N)} array_like\n        Input vector or stack of matrices.\n    tol : (...) array_like, float, optional"
  }
]