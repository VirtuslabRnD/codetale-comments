[
  {
    "id" : "cf87ae4a-45e0-4c6f-a110-15135ae14927",
    "prId" : 192,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Maybe explain this with a connection to image plots, where the 'x' typically runs left to right and is the 'fast' index. Or is that what this is about. Where would one use 'ij' ?\n",
        "createdAt" : "2012-02-01T03:58:04Z",
        "updatedAt" : "2012-02-05T14:57:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b4c44beb-644c-4493-92f0-3e614530a6b8",
        "parentId" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "authorId" : "1b526ef0-1c83-44be-b2b5-41cf1ee854e2",
        "body" : "I agree.  I find the \"matrix indexing\" versus \"Cartesian indexing\" description hard to understand.   I think you are talking about \"image\" conventions versus \"plotting\" conventions.  Is that correct? \n",
        "createdAt" : "2012-02-01T07:38:10Z",
        "updatedAt" : "2012-02-05T14:57:50Z",
        "lastEditedBy" : "1b526ef0-1c83-44be-b2b5-41cf1ee854e2",
        "tags" : [
        ]
      },
      {
        "id" : "f750562d-0fd1-47b4-a56d-4ffab4a207b8",
        "parentId" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Correct, image convention vs. just standard array/matrix indexing. Since this is the most confusing part apparently (see also discussion on this point at http://projects.scipy.org/numpy/ticket/966), I'm tempted to just leave out the `indexing` keyword after all. This seems to be confusing for Matlab users too, see for example the comments at http://blogs.mathworks.com/loren/2007/06/21/indexing-terminology/.\n\nThere really isn't an ideal solution here. \n\nNote that `mgrid` and `ogrid` use 'ij', while currently meshgrid uses 'xy':\n\n```\nIn [35]: mgrid[0:2, 3:5]\nOut[35]: \narray([[[0, 0],\n        [1, 1]],\n\n       [[3, 4],\n        [3, 4]]])\n\nIn [36]: meshgrid([0, 1], [3, 4])\nOut[36]: \n[array([[0, 1],\n       [0, 1]]), array([[3, 3],\n       [4, 4]])]\n```\n",
        "createdAt" : "2012-02-05T15:06:11Z",
        "updatedAt" : "2012-02-05T15:06:11Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "780b6501-0bad-47fa-b853-957dee86302e",
        "parentId" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Maybe call ir 'image' indexing? I find in practice it is easier to settle on a single convention ('ij'), always put x in the first index, and just transpose for showing images. Mixing the conventions leads to all sorts of confusion.\n",
        "createdAt" : "2012-02-05T15:38:28Z",
        "updatedAt" : "2012-02-05T15:38:28Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4e6d6cf4-4877-445f-8cc6-0bd3f618f999",
        "parentId" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Only using 'ij' would be best probably, but since currently `meshgrid` uses 'xy' we can't do that.\n",
        "createdAt" : "2012-02-05T15:41:00Z",
        "updatedAt" : "2012-02-05T15:41:00Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "8fc3775d-77ff-4a3b-b887-d53bbea3652b",
        "parentId" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Oops, see, I already got confused ;) I think a different choice of names would clarify things, 'xy' seems ok, 'standard' would be another option, and then maybe 'image' for the second choice, with a short explanation (images are displayed left-right, top-bottom) and a translation for Matlab users.\n",
        "createdAt" : "2012-02-05T15:50:50Z",
        "updatedAt" : "2012-02-05T15:50:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "1deb66fe-aade-4ac3-a252-d70c7743088c",
        "parentId" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "`ij` --> `image` sounds OK to me. Although I forgot the details by now. With added explanation it should work.\n",
        "createdAt" : "2012-05-28T17:39:56Z",
        "updatedAt" : "2012-05-28T17:39:56Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "d48b756b232c99b6624d76db3188090052e0db60",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +3242,3246 @@    argument.  Giving the string 'ij' returns a meshgrid with matrix indexing,\n    while 'xy' returns a meshgrid with Cartesian indexing.  In the 2-D case\n    with inputs of length M and N, the outputs are of shape (N, M) for 'xy'\n    indexing and (M, N) for 'ij' indexing.  In the 3-D case with inputs of\n    length M, N and P, outputs are of shape (N, M, P) for 'xy' indexing and (M,"
  },
  {
    "id" : "ac7a7823-986c-49ab-aae1-5a20a6bc85bf",
    "prId" : 192,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fda19608-5e4b-4b4b-afa0-f2aabcbea531",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So 'xy' indexing only affects the first two axis?\n",
        "createdAt" : "2012-02-01T04:01:06Z",
        "updatedAt" : "2012-02-05T14:57:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ba07668d-a0fe-490c-8a1e-925be52e3be7",
        "parentId" : "fda19608-5e4b-4b4b-afa0-f2aabcbea531",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "yes\n",
        "createdAt" : "2012-02-05T15:07:06Z",
        "updatedAt" : "2012-02-05T15:07:06Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "d48b756b232c99b6624d76db3188090052e0db60",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +3316,3320 @@        output[1].shape = (-1, 1) + (1,)*(ndim - 2)\n        shape[0], shape[1] = shape[1], shape[0]\n\n    if sparse:\n        if copy_:"
  },
  {
    "id" : "f94b8f19-9044-4ea3-8e96-394c0aec7f9c",
    "prId" : 3658,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0bc2ea4-ad9f-4e46-a231-5329cba74c14",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "midpoint is not implemented\n\nshouldn't there be also be lowhigh, highlow and closest to be complete?\n",
        "createdAt" : "2013-08-29T15:47:09Z",
        "updatedAt" : "2013-09-16T16:47:13Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "a14a2bd3-1afb-4c71-8465-931baa9fcae0",
        "parentId" : "e0bc2ea4-ad9f-4e46-a231-5329cba74c14",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "forget highlow and lowhigh I was thinking only in terms of percentile with len(q) = 2 \n",
        "createdAt" : "2013-08-29T15:48:42Z",
        "updatedAt" : "2013-09-16T16:47:13Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "8ff3fe5e-c540-444f-9b7d-240d10a919e9",
        "parentId" : "e0bc2ea4-ad9f-4e46-a231-5329cba74c14",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "maybe 'nearest' is a better choice than closest?\nwould be more similar with matplotlibs imshow(interpolation='nearest')\n",
        "createdAt" : "2013-09-06T17:01:39Z",
        "updatedAt" : "2013-09-16T16:47:13Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "0e156aed-683b-4b46-8491-701fa7b7bd4b",
        "parentId" : "e0bc2ea4-ad9f-4e46-a231-5329cba74c14",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "Yeah, I agree on `\"nearest\"` -- the idiom is \"nearest neighbor\", not \"closest neighbor\".\n",
        "createdAt" : "2013-09-14T11:36:42Z",
        "updatedAt" : "2013-09-16T16:47:13Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "9316110a42c370616cbb80ae3e1769534d04de10",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +2787,2791 @@              fractional part of the index surrounded by `i` and `j`.\n            * lower: `i`.\n            * higher: `j`.\n            * nearest: `i` or `j` whichever is nearest.\n            * midpoint: (`i` + `j`) / 2."
  },
  {
    "id" : "d4d71cf7-89d0-495b-b251-1cf993480a4d",
    "prId" : 3775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88b59b8f-543a-4ce0-9477-c55d0c4ff856",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Can this line be broken after `not`?\n",
        "createdAt" : "2013-09-22T16:57:56Z",
        "updatedAt" : "2013-09-24T06:50:33Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b55297be-67a2-4e56-88c5-806382bcc444",
        "parentId" : "88b59b8f-543a-4ce0-9477-c55d0c4ff856",
        "authorId" : "83f4e38e-88e6-4696-b8d1-477d2db3e891",
        "body" : "Then we'll need to break it to three lines.\n",
        "createdAt" : "2013-09-24T06:45:27Z",
        "updatedAt" : "2013-09-24T06:50:33Z",
        "lastEditedBy" : "83f4e38e-88e6-4696-b8d1-477d2db3e891",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec50fb1b7683c44d065914b946d250dbe01aae9f",
    "line" : 274,
    "diffHunk" : "@@ -1,1 +690,694 @@    x = asanyarray(x)\n    n2 = len(funclist)\n    if (isscalar(condlist) or not (isinstance(condlist[0], list) or\n                                   isinstance(condlist[0], ndarray))):\n        condlist = [condlist]"
  },
  {
    "id" : "3905e09c-8ce8-44df-8d92-8bcfcc880745",
    "prId" : 3775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7112c930-5645-4c4d-b393-46f21d65f6e3",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "keep is an array, so can remove `,` in the indexing.\n",
        "createdAt" : "2013-09-27T03:05:29Z",
        "updatedAt" : "2013-09-27T03:05:29Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec50fb1b7683c44d065914b946d250dbe01aae9f",
    "line" : 1004,
    "diffHunk" : "@@ -1,1 +3413,3417 @@            obj = obj[positive_indices]\n\n        keep[obj, ] = False\n        slobj[axis] = keep\n        new = arr[slobj]"
  },
  {
    "id" : "8d4357ab-f071-4196-acb4-cbf3ab759d4f",
    "prId" : 3908,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf035c93-25a6-44dd-8f4c-8ce3a0d01928",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could maybe simplify this, as `axis=tuple(...)` is currently the only alternative to a single integer.\n",
        "createdAt" : "2014-03-13T00:31:05Z",
        "updatedAt" : "2014-03-13T20:10:53Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "1cce771c-e4da-44ad-a553-23a20220d9bb",
        "parentId" : "bf035c93-25a6-44dd-8f4c-8ce3a0d01928",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "can you elaborate? I don't understand what you mean\n",
        "createdAt" : "2014-03-13T18:11:22Z",
        "updatedAt" : "2014-03-13T20:10:53Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "076f40b7-7c9a-4cf0-acb9-f0ac4a3d70fc",
        "parentId" : "bf035c93-25a6-44dd-8f4c-8ce3a0d01928",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I was thinking just check for tuple instead of the try...except construct. But that is minor and the current approach might be safer.\n",
        "createdAt" : "2014-03-13T19:05:54Z",
        "updatedAt" : "2014-03-13T20:10:53Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d53c812d3e68ff28320ee7e32bc9816937b4142",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +2727,2731 @@        keepdim = list(a.shape)\n        nd = a.ndim\n        try:\n            axis = operator.index(axis)\n            if axis >= nd or axis < -nd:"
  },
  {
    "id" : "9579ad26-5d58-4bb2-aebb-d4dc0ec9ea80",
    "prId" : 3908,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e95181f-ac94-4939-8bc8-c26d0596d5e0",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Curious note, the result of `a.sum()` is not writeable, but the reshaped view is. That only seems to happen for 0-D arrays. Hmm...\n",
        "createdAt" : "2014-03-13T00:41:15Z",
        "updatedAt" : "2014-03-13T20:10:53Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d53c812d3e68ff28320ee7e32bc9816937b4142",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +2841,2845 @@                    overwrite_input=overwrite_input)\n    if keepdims:\n        return r.reshape(k)\n    else:\n        return r"
  },
  {
    "id" : "d4e35dcd-035d-41ea-85e9-57db05aa4ec0",
    "prId" : 4089,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62e45d74-ee7e-4da6-a826-1d91bfdb8428",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Do we check for `values.ndim == 0`?\n",
        "createdAt" : "2013-12-02T16:22:33Z",
        "updatedAt" : "2013-12-02T16:22:33Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "34bf0358-f734-479a-ae45-bf4714df863e",
        "parentId" : "62e45d74-ee7e-4da6-a826-1d91bfdb8428",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "It is safe, inserting into a 0-dim array does not make sense (it errors out/special cased before this).\n",
        "createdAt" : "2013-12-02T17:39:51Z",
        "updatedAt" : "2013-12-02T17:39:51Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d6caf9710e98af2a99cc72650b95dd7ea0727ee",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +3608,3612 @@            # very different from a[:,[0],:] = ...! This changes values so that\n            # it works likes the second case. (here a[:,0:1,:])\n            values = np.rollaxis(values, 0, (axis % values.ndim) + 1)\n        numnew = values.shape[axis]\n        newshape[axis] += numnew"
  },
  {
    "id" : "2f7c7647-b351-4063-8415-5a136453d1e5",
    "prId" : 4358,
    "prUrl" : "https://github.com/numpy/numpy/pull/4358#pullrequestreview-92009684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f38168fd-9a57-478f-8337-a26fd2d3712d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "What's the rationale for deprecating this?",
        "createdAt" : "2017-10-22T23:50:44Z",
        "updatedAt" : "2017-10-22T23:51:22Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2ab149e9-643b-41be-be2f-d2b7e4e30917",
        "parentId" : "f38168fd-9a57-478f-8337-a26fd2d3712d",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Don't remember, maybe you would not know the result shape?",
        "createdAt" : "2017-10-23T18:26:53Z",
        "updatedAt" : "2017-10-23T18:26:54Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "a91c5363-5d38-41bd-a2eb-bb53f9ff3530",
        "parentId" : "f38168fd-9a57-478f-8337-a26fd2d3712d",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Or the correct dtype, the comment above seems like an oversight that should be removed",
        "createdAt" : "2017-10-23T18:28:19Z",
        "updatedAt" : "2017-10-23T18:28:19Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "030293f9-13ec-47af-9291-af0ba9e92455",
        "parentId" : "f38168fd-9a57-478f-8337-a26fd2d3712d",
        "authorId" : "0424b539-8828-4e4b-b0c7-8a8f1726b0f0",
        "body" : "@eric-wieser \r\n\r\nWhat would be the semantic meaning of numpy.select without any basis for selecting?\r\n\r\nby analogy:    1+    <--- what is the meaning of + without a thing to add?",
        "createdAt" : "2018-01-26T21:15:18Z",
        "updatedAt" : "2018-01-26T21:15:18Z",
        "lastEditedBy" : "0424b539-8828-4e4b-b0c7-8a8f1726b0f0",
        "tags" : [
        ]
      },
      {
        "id" : "433ca3dd-6f4a-43c5-909c-038408c5428a",
        "parentId" : "f38168fd-9a57-478f-8337-a26fd2d3712d",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "The problem is not the basis of selecting, but the shape of what is \"inside\" choicelist being unknown. I think this was actually about choicelist being empty more then condlist being empty probably.\r\n\r\nTo be honest, it would somewhat make sense to allow it if default is passed in and can be used to get the shape. That seems dubious though (and even if, it seems like this needs to be deprecated first).\r\n\r\nAnyway, I am starting to have memories of a similar discussion, so nvm. if Eric is still curious will look at it again.",
        "createdAt" : "2018-01-26T21:38:40Z",
        "updatedAt" : "2018-01-26T21:38:40Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "fd941e25-772f-4f74-919d-6c039a17470c",
        "parentId" : "f38168fd-9a57-478f-8337-a26fd2d3712d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> To be honest, it would somewhat make sense to allow it if default is passed in and can be used to get the shape. \r\n\r\nThis is the point I was making. By having a default, the operation becomes well-defined - in the same way that `max([])` is an error in python, but `max([], default=0)` is not",
        "createdAt" : "2018-01-27T01:08:39Z",
        "updatedAt" : "2018-01-27T01:08:39Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c221389f-14d8-4978-9843-5108a6896b40",
        "parentId" : "f38168fd-9a57-478f-8337-a26fd2d3712d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> What would be the semantic meaning of numpy.select without any basis for selecting?\r\n\r\nPhrase it as _\"choose `choicelist[i]` if `condlist[i]` is `True`. If not any of `condlist[i]` are `True`, choose `default`\"_, and the semantic meaning is clear, because `not any([])` is defined as True",
        "createdAt" : "2018-01-27T01:12:28Z",
        "updatedAt" : "2018-01-27T01:12:54Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "123b319be37f01e3c4f2e42552d4ca121b27ca38",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +781,785 @@                      \"and will be deprecated\",\n                      DeprecationWarning)\n        return np.asarray(default)[()]\n\n    choicelist = [np.asarray(choice) for choice in choicelist]"
  },
  {
    "id" : "97414216-3996-4a7c-b2c6-2af496b4789e",
    "prId" : 4405,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee8c46f0-a763-4a87-a46e-0386468a09c4",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Probably not the simplest fix, but OK.\n",
        "createdAt" : "2014-03-01T14:57:35Z",
        "updatedAt" : "2014-03-01T14:57:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f7022c70b4ec64611ff311abe8779e4a2deda58",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +366,370 @@            on_edge = (around(sample[:, i], decimal) == around(edges[i][-1], decimal))\n            # Shift these points one bin to the left.\n            Ncount[i][where(on_edge & not_smaller_than_edge)[0]] -= 1\n\n    # Flattened histogram matrix (1D)"
  },
  {
    "id" : "19226555-ff81-481c-b35f-09504a5472f5",
    "prId" : 4792,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc04d4c7-4f19-4e55-abef-316e36ebfef2",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "do we need to define the value?\nif not I think it would be better to leave it undefined for now. Just to keep options open to use the ufunc `where=` argument in future for some things\n",
        "createdAt" : "2014-06-08T12:38:51Z",
        "updatedAt" : "2014-06-08T13:41:05Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "69172261-273d-40ee-8cf8-9429510875a5",
        "parentId" : "cc04d4c7-4f19-4e55-abef-316e36ebfef2",
        "authorId" : "2a53bb37-068e-4640-a89e-6420b778e916",
        "body" : "I also think it would be better to leave it `nan` but that changes the behaviour of the function. I have no problem in addressing that if you devs agree.\n",
        "createdAt" : "2014-06-08T12:57:23Z",
        "updatedAt" : "2014-06-08T13:41:05Z",
        "lastEditedBy" : "2a53bb37-068e-4640-a89e-6420b778e916",
        "tags" : [
        ]
      },
      {
        "id" : "09ea1bdc-c245-49a7-9c0b-c727c4aab95a",
        "parentId" : "cc04d4c7-4f19-4e55-abef-316e36ebfef2",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "yes nan would make more sense but we want to release 1.9 soon and I don't want to rush in a change that might bite us later\nleaving the status quo of undefined is safer, we can revisit for 1.10\n",
        "createdAt" : "2014-06-08T13:12:04Z",
        "updatedAt" : "2014-06-08T13:41:05Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "12b0c530-34eb-48bc-8fca-0113e2fb1e43",
        "parentId" : "cc04d4c7-4f19-4e55-abef-316e36ebfef2",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "not fixed yet\n",
        "createdAt" : "2014-06-08T13:27:04Z",
        "updatedAt" : "2014-06-08T13:41:05Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "cdd2934c-b6c3-4a43-8ae5-1f312a887528",
        "parentId" : "cc04d4c7-4f19-4e55-abef-316e36ebfef2",
        "authorId" : "2a53bb37-068e-4640-a89e-6420b778e916",
        "body" : "Excuse me, the status quo now is not undefined, but 0 as a default: that's what I kept in these changes. In fact most of the tests rely on this, see https://github.com/Juanlu001/numpy/blob/292b9ff538ea4950c7380c76cf65d1a5b108b75c/numpy/lib/tests/test_function_base.py#L1466. Either I set this to `nan` or leave it as it is now, but in this case the docs were wrong.\n",
        "createdAt" : "2014-06-08T13:48:32Z",
        "updatedAt" : "2014-06-08T13:48:32Z",
        "lastEditedBy" : "2a53bb37-068e-4640-a89e-6420b778e916",
        "tags" : [
        ]
      },
      {
        "id" : "bb952aff-b069-4be4-a0a2-de12f71c8ace",
        "parentId" : "cc04d4c7-4f19-4e55-abef-316e36ebfef2",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "in principle the documentation defines the interface but if our tets rely on it maybe also third party software\n\nusing 0 has the advantages that it is defined for all types (including integers) and the memory can be sparsely allocated on capable operating systems, so I guess it is fine to keep it.\nthanks, merging\n",
        "createdAt" : "2014-06-08T14:01:30Z",
        "updatedAt" : "2014-06-08T14:01:30Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "292b9ff538ea4950c7380c76cf65d1a5b108b75c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +652,656 @@        calling the functions in `funclist` on the appropriate portions of `x`,\n        as defined by the boolean arrays in `condlist`.  Portions not covered\n        by any condition have a default value of 0.\n\n"
  },
  {
    "id" : "cdf3231b-eebd-420a-9e3f-d41173af5aad",
    "prId" : 4792,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc3020c0-ba8e-40ca-b370-38296d6405b6",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "not something for this PR but the following part could maybe use np.select somehow, just to reduce the optimization targets, e.g. select uses copyto instead of indexing as its a little faster.\n",
        "createdAt" : "2014-06-08T12:40:54Z",
        "updatedAt" : "2014-06-08T13:41:05Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "d0c47b61-c7e4-4d3d-bab6-8c9c1ed8ad3a",
        "parentId" : "dc3020c0-ba8e-40ca-b370-38296d6405b6",
        "authorId" : "2a53bb37-068e-4640-a89e-6420b778e916",
        "body" : "Actually I tend to use `select` myself and avoid `piecewise` because of these little annoyances. I can quickly try it or leave it for the next version.\n",
        "createdAt" : "2014-06-08T12:59:18Z",
        "updatedAt" : "2014-06-08T13:41:05Z",
        "lastEditedBy" : "2a53bb37-068e-4640-a89e-6420b778e916",
        "tags" : [
        ]
      },
      {
        "id" : "76bf8c5b-7f8e-4db6-bb33-32a20285a531",
        "parentId" : "dc3020c0-ba8e-40ca-b370-38296d6405b6",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "lets leave that to the next version\n",
        "createdAt" : "2014-06-08T13:12:43Z",
        "updatedAt" : "2014-06-08T13:41:05Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "292b9ff538ea4950c7380c76cf65d1a5b108b75c",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +714,718 @@\n    y = zeros(x.shape, x.dtype)\n    for k in range(n):\n        item = funclist[k]\n        if not isinstance(item, collections.Callable):"
  },
  {
    "id" : "e3bfa868-e716-48de-9494-f43780548178",
    "prId" : 4960,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47940521-3c35-4244-86b8-7c017ec7ca8c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK.\n",
        "createdAt" : "2015-05-12T19:03:25Z",
        "updatedAt" : "2015-05-13T09:00:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d87d2ca584b888bcc48fd2fd25c07eb0c08c0939",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2006,2010 @@    # Determine the normalization\n    if w is None:\n        fact = float(X.shape[1] - ddof)\n    else:\n        if ddof == 0:"
  },
  {
    "id" : "3d99cdce-0213-47e4-b35f-4e33e8d0ba1d",
    "prId" : 4960,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2af6cf22-e8cb-41fd-b310-35a9921dcc15",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK.\n",
        "createdAt" : "2015-05-12T19:04:16Z",
        "updatedAt" : "2015-05-13T09:00:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d87d2ca584b888bcc48fd2fd25c07eb0c08c0939",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2014,2018 @@        else:\n            fact = w_sum - ddof*sum(w*aweights)/w_sum\n\n    if fact <= 0:\n        warnings.warn(\"Degrees of freedom <= 0 for slice\", RuntimeWarning)"
  },
  {
    "id" : "11de1278-8bd1-4faa-8fb5-74bbcb777339",
    "prId" : 4960,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0457d13-6d39-4a65-a166-7becbb64013e",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, I see this is inherited, `X.shape[0] == 1]` always overrode `rowvar == 0`. Doesn't seem right, but that is how it was...\n",
        "createdAt" : "2015-05-12T22:25:33Z",
        "updatedAt" : "2015-05-13T09:00:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d87d2ca584b888bcc48fd2fd25c07eb0c08c0939",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +1952,1956 @@        dtype = np.result_type(m, y, np.float64)\n    X = array(m, ndmin=2, dtype=dtype)\n    if rowvar == 0 and X.shape[0] != 1:\n        X = X.T\n    if X.shape[0] == 0:"
  },
  {
    "id" : "9c033edc-aae6-4e56-89aa-a910731a7421",
    "prId" : 5117,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbedcb76-6c9b-4660-9369-ab18d2512726",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "I don't like this code repetition... You could integrate all this first branch into the code below, have a common code base for handling the array checks, branch only to do the modulo, sorting, appending and prepending if `period` is not `None`, and finish with a single call to `compiled_interp`. I think it would be cleaner.\n",
        "createdAt" : "2014-09-26T05:40:51Z",
        "updatedAt" : "2014-10-17T06:16:15Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "1d684816-935c-4285-8465-24f71950f8fe",
        "parentId" : "bbedcb76-6c9b-4660-9369-ab18d2512726",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "What happens if `period <= 0`? Is the behavior well defined? Or should an error be raised?\n",
        "createdAt" : "2014-09-26T05:41:52Z",
        "updatedAt" : "2014-10-17T06:16:15Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "15471224-b040-42df-b8e0-09193cc39d2d",
        "parentId" : "bbedcb76-6c9b-4660-9369-ab18d2512726",
        "authorId" : "bbf79ef1-9dc7-4be3-914e-a2ad60fdf617",
        "body" : "@jaimefrio I liked to keep the two branches because the additional overhead cost of this enhancement will be only a `is None` check... if I had to perform the other checks for all cases there would be a higher overhead...\n\nSecond question about `period <= 0`... being checked\n",
        "createdAt" : "2014-09-26T06:03:53Z",
        "updatedAt" : "2014-10-17T06:16:15Z",
        "lastEditedBy" : "bbf79ef1-9dc7-4be3-914e-a2ad60fdf617",
        "tags" : [
        ]
      },
      {
        "id" : "7eed27ec-01be-4dc8-8fe2-cf2a7807049c",
        "parentId" : "bbedcb76-6c9b-4660-9369-ab18d2512726",
        "authorId" : "bbf79ef1-9dc7-4be3-914e-a2ad60fdf617",
        "body" : "@jaimefrio an error should be raised only for `period==0`... and do `period = abs(period)` to guarantee a positive period.... otherwise I would have to change this:\n\n```\n        xp = np.concatenate((xp[-1:]-abs(period), xp, xp[0:1]+abs(period)))\n```\n\ni.e. adding two times `abs()`\n",
        "createdAt" : "2014-09-26T06:13:53Z",
        "updatedAt" : "2014-10-17T06:16:15Z",
        "lastEditedBy" : "bbf79ef1-9dc7-4be3-914e-a2ad60fdf617",
        "tags" : [
        ]
      }
    ],
    "commit" : "498b84a35da66bceb1b08e49ee4dcd02c870e5fe",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +1200,1204 @@\n    \"\"\"\n    if period is None:\n        if isinstance(x, (float, int, number)):\n            return compiled_interp([x], xp, fp, left, right).item()"
  }
]