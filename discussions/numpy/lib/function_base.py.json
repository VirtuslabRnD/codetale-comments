[
  {
    "id" : "cf87ae4a-45e0-4c6f-a110-15135ae14927",
    "prId" : 192,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Maybe explain this with a connection to image plots, where the 'x' typically runs left to right and is the 'fast' index. Or is that what this is about. Where would one use 'ij' ?\n",
        "createdAt" : "2012-02-01T03:58:04Z",
        "updatedAt" : "2012-02-05T14:57:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b4c44beb-644c-4493-92f0-3e614530a6b8",
        "parentId" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "authorId" : "1b526ef0-1c83-44be-b2b5-41cf1ee854e2",
        "body" : "I agree.  I find the \"matrix indexing\" versus \"Cartesian indexing\" description hard to understand.   I think you are talking about \"image\" conventions versus \"plotting\" conventions.  Is that correct? \n",
        "createdAt" : "2012-02-01T07:38:10Z",
        "updatedAt" : "2012-02-05T14:57:50Z",
        "lastEditedBy" : "1b526ef0-1c83-44be-b2b5-41cf1ee854e2",
        "tags" : [
        ]
      },
      {
        "id" : "f750562d-0fd1-47b4-a56d-4ffab4a207b8",
        "parentId" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Correct, image convention vs. just standard array/matrix indexing. Since this is the most confusing part apparently (see also discussion on this point at http://projects.scipy.org/numpy/ticket/966), I'm tempted to just leave out the `indexing` keyword after all. This seems to be confusing for Matlab users too, see for example the comments at http://blogs.mathworks.com/loren/2007/06/21/indexing-terminology/.\n\nThere really isn't an ideal solution here. \n\nNote that `mgrid` and `ogrid` use 'ij', while currently meshgrid uses 'xy':\n\n```\nIn [35]: mgrid[0:2, 3:5]\nOut[35]: \narray([[[0, 0],\n        [1, 1]],\n\n       [[3, 4],\n        [3, 4]]])\n\nIn [36]: meshgrid([0, 1], [3, 4])\nOut[36]: \n[array([[0, 1],\n       [0, 1]]), array([[3, 3],\n       [4, 4]])]\n```\n",
        "createdAt" : "2012-02-05T15:06:11Z",
        "updatedAt" : "2012-02-05T15:06:11Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "780b6501-0bad-47fa-b853-957dee86302e",
        "parentId" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Maybe call ir 'image' indexing? I find in practice it is easier to settle on a single convention ('ij'), always put x in the first index, and just transpose for showing images. Mixing the conventions leads to all sorts of confusion.\n",
        "createdAt" : "2012-02-05T15:38:28Z",
        "updatedAt" : "2012-02-05T15:38:28Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4e6d6cf4-4877-445f-8cc6-0bd3f618f999",
        "parentId" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Only using 'ij' would be best probably, but since currently `meshgrid` uses 'xy' we can't do that.\n",
        "createdAt" : "2012-02-05T15:41:00Z",
        "updatedAt" : "2012-02-05T15:41:00Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "8fc3775d-77ff-4a3b-b887-d53bbea3652b",
        "parentId" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Oops, see, I already got confused ;) I think a different choice of names would clarify things, 'xy' seems ok, 'standard' would be another option, and then maybe 'image' for the second choice, with a short explanation (images are displayed left-right, top-bottom) and a translation for Matlab users.\n",
        "createdAt" : "2012-02-05T15:50:50Z",
        "updatedAt" : "2012-02-05T15:50:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "1deb66fe-aade-4ac3-a252-d70c7743088c",
        "parentId" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "`ij` --> `image` sounds OK to me. Although I forgot the details by now. With added explanation it should work.\n",
        "createdAt" : "2012-05-28T17:39:56Z",
        "updatedAt" : "2012-05-28T17:39:56Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "d48b756b232c99b6624d76db3188090052e0db60",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +3242,3246 @@    argument.  Giving the string 'ij' returns a meshgrid with matrix indexing,\n    while 'xy' returns a meshgrid with Cartesian indexing.  In the 2-D case\n    with inputs of length M and N, the outputs are of shape (N, M) for 'xy'\n    indexing and (M, N) for 'ij' indexing.  In the 3-D case with inputs of\n    length M, N and P, outputs are of shape (N, M, P) for 'xy' indexing and (M,"
  },
  {
    "id" : "ac7a7823-986c-49ab-aae1-5a20a6bc85bf",
    "prId" : 192,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fda19608-5e4b-4b4b-afa0-f2aabcbea531",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So 'xy' indexing only affects the first two axis?\n",
        "createdAt" : "2012-02-01T04:01:06Z",
        "updatedAt" : "2012-02-05T14:57:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ba07668d-a0fe-490c-8a1e-925be52e3be7",
        "parentId" : "fda19608-5e4b-4b4b-afa0-f2aabcbea531",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "yes\n",
        "createdAt" : "2012-02-05T15:07:06Z",
        "updatedAt" : "2012-02-05T15:07:06Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "d48b756b232c99b6624d76db3188090052e0db60",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +3316,3320 @@        output[1].shape = (-1, 1) + (1,)*(ndim - 2)\n        shape[0], shape[1] = shape[1], shape[0]\n\n    if sparse:\n        if copy_:"
  },
  {
    "id" : "f94b8f19-9044-4ea3-8e96-394c0aec7f9c",
    "prId" : 3658,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0bc2ea4-ad9f-4e46-a231-5329cba74c14",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "midpoint is not implemented\n\nshouldn't there be also be lowhigh, highlow and closest to be complete?\n",
        "createdAt" : "2013-08-29T15:47:09Z",
        "updatedAt" : "2013-09-16T16:47:13Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "a14a2bd3-1afb-4c71-8465-931baa9fcae0",
        "parentId" : "e0bc2ea4-ad9f-4e46-a231-5329cba74c14",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "forget highlow and lowhigh I was thinking only in terms of percentile with len(q) = 2 \n",
        "createdAt" : "2013-08-29T15:48:42Z",
        "updatedAt" : "2013-09-16T16:47:13Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "8ff3fe5e-c540-444f-9b7d-240d10a919e9",
        "parentId" : "e0bc2ea4-ad9f-4e46-a231-5329cba74c14",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "maybe 'nearest' is a better choice than closest?\nwould be more similar with matplotlibs imshow(interpolation='nearest')\n",
        "createdAt" : "2013-09-06T17:01:39Z",
        "updatedAt" : "2013-09-16T16:47:13Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "0e156aed-683b-4b46-8491-701fa7b7bd4b",
        "parentId" : "e0bc2ea4-ad9f-4e46-a231-5329cba74c14",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "Yeah, I agree on `\"nearest\"` -- the idiom is \"nearest neighbor\", not \"closest neighbor\".\n",
        "createdAt" : "2013-09-14T11:36:42Z",
        "updatedAt" : "2013-09-16T16:47:13Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "9316110a42c370616cbb80ae3e1769534d04de10",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +2787,2791 @@              fractional part of the index surrounded by `i` and `j`.\n            * lower: `i`.\n            * higher: `j`.\n            * nearest: `i` or `j` whichever is nearest.\n            * midpoint: (`i` + `j`) / 2."
  },
  {
    "id" : "d4d71cf7-89d0-495b-b251-1cf993480a4d",
    "prId" : 3775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88b59b8f-543a-4ce0-9477-c55d0c4ff856",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Can this line be broken after `not`?\n",
        "createdAt" : "2013-09-22T16:57:56Z",
        "updatedAt" : "2013-09-24T06:50:33Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b55297be-67a2-4e56-88c5-806382bcc444",
        "parentId" : "88b59b8f-543a-4ce0-9477-c55d0c4ff856",
        "authorId" : "83f4e38e-88e6-4696-b8d1-477d2db3e891",
        "body" : "Then we'll need to break it to three lines.\n",
        "createdAt" : "2013-09-24T06:45:27Z",
        "updatedAt" : "2013-09-24T06:50:33Z",
        "lastEditedBy" : "83f4e38e-88e6-4696-b8d1-477d2db3e891",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec50fb1b7683c44d065914b946d250dbe01aae9f",
    "line" : 274,
    "diffHunk" : "@@ -1,1 +690,694 @@    x = asanyarray(x)\n    n2 = len(funclist)\n    if (isscalar(condlist) or not (isinstance(condlist[0], list) or\n                                   isinstance(condlist[0], ndarray))):\n        condlist = [condlist]"
  },
  {
    "id" : "3905e09c-8ce8-44df-8d92-8bcfcc880745",
    "prId" : 3775,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7112c930-5645-4c4d-b393-46f21d65f6e3",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "keep is an array, so can remove `,` in the indexing.\n",
        "createdAt" : "2013-09-27T03:05:29Z",
        "updatedAt" : "2013-09-27T03:05:29Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec50fb1b7683c44d065914b946d250dbe01aae9f",
    "line" : 1004,
    "diffHunk" : "@@ -1,1 +3413,3417 @@            obj = obj[positive_indices]\n\n        keep[obj, ] = False\n        slobj[axis] = keep\n        new = arr[slobj]"
  },
  {
    "id" : "8d4357ab-f071-4196-acb4-cbf3ab759d4f",
    "prId" : 3908,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf035c93-25a6-44dd-8f4c-8ce3a0d01928",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could maybe simplify this, as `axis=tuple(...)` is currently the only alternative to a single integer.\n",
        "createdAt" : "2014-03-13T00:31:05Z",
        "updatedAt" : "2014-03-13T20:10:53Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "1cce771c-e4da-44ad-a553-23a20220d9bb",
        "parentId" : "bf035c93-25a6-44dd-8f4c-8ce3a0d01928",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "can you elaborate? I don't understand what you mean\n",
        "createdAt" : "2014-03-13T18:11:22Z",
        "updatedAt" : "2014-03-13T20:10:53Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "076f40b7-7c9a-4cf0-acb9-f0ac4a3d70fc",
        "parentId" : "bf035c93-25a6-44dd-8f4c-8ce3a0d01928",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I was thinking just check for tuple instead of the try...except construct. But that is minor and the current approach might be safer.\n",
        "createdAt" : "2014-03-13T19:05:54Z",
        "updatedAt" : "2014-03-13T20:10:53Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d53c812d3e68ff28320ee7e32bc9816937b4142",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +2727,2731 @@        keepdim = list(a.shape)\n        nd = a.ndim\n        try:\n            axis = operator.index(axis)\n            if axis >= nd or axis < -nd:"
  },
  {
    "id" : "9579ad26-5d58-4bb2-aebb-d4dc0ec9ea80",
    "prId" : 3908,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e95181f-ac94-4939-8bc8-c26d0596d5e0",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Curious note, the result of `a.sum()` is not writeable, but the reshaped view is. That only seems to happen for 0-D arrays. Hmm...\n",
        "createdAt" : "2014-03-13T00:41:15Z",
        "updatedAt" : "2014-03-13T20:10:53Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d53c812d3e68ff28320ee7e32bc9816937b4142",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +2841,2845 @@                    overwrite_input=overwrite_input)\n    if keepdims:\n        return r.reshape(k)\n    else:\n        return r"
  }
]