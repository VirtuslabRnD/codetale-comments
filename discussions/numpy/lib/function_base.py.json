[
  {
    "id" : "cf87ae4a-45e0-4c6f-a110-15135ae14927",
    "prId" : 192,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Maybe explain this with a connection to image plots, where the 'x' typically runs left to right and is the 'fast' index. Or is that what this is about. Where would one use 'ij' ?\n",
        "createdAt" : "2012-02-01T03:58:04Z",
        "updatedAt" : "2012-02-05T14:57:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b4c44beb-644c-4493-92f0-3e614530a6b8",
        "parentId" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "authorId" : "1b526ef0-1c83-44be-b2b5-41cf1ee854e2",
        "body" : "I agree.  I find the \"matrix indexing\" versus \"Cartesian indexing\" description hard to understand.   I think you are talking about \"image\" conventions versus \"plotting\" conventions.  Is that correct? \n",
        "createdAt" : "2012-02-01T07:38:10Z",
        "updatedAt" : "2012-02-05T14:57:50Z",
        "lastEditedBy" : "1b526ef0-1c83-44be-b2b5-41cf1ee854e2",
        "tags" : [
        ]
      },
      {
        "id" : "f750562d-0fd1-47b4-a56d-4ffab4a207b8",
        "parentId" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Correct, image convention vs. just standard array/matrix indexing. Since this is the most confusing part apparently (see also discussion on this point at http://projects.scipy.org/numpy/ticket/966), I'm tempted to just leave out the `indexing` keyword after all. This seems to be confusing for Matlab users too, see for example the comments at http://blogs.mathworks.com/loren/2007/06/21/indexing-terminology/.\n\nThere really isn't an ideal solution here. \n\nNote that `mgrid` and `ogrid` use 'ij', while currently meshgrid uses 'xy':\n\n```\nIn [35]: mgrid[0:2, 3:5]\nOut[35]: \narray([[[0, 0],\n        [1, 1]],\n\n       [[3, 4],\n        [3, 4]]])\n\nIn [36]: meshgrid([0, 1], [3, 4])\nOut[36]: \n[array([[0, 1],\n       [0, 1]]), array([[3, 3],\n       [4, 4]])]\n```\n",
        "createdAt" : "2012-02-05T15:06:11Z",
        "updatedAt" : "2012-02-05T15:06:11Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "780b6501-0bad-47fa-b853-957dee86302e",
        "parentId" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Maybe call ir 'image' indexing? I find in practice it is easier to settle on a single convention ('ij'), always put x in the first index, and just transpose for showing images. Mixing the conventions leads to all sorts of confusion.\n",
        "createdAt" : "2012-02-05T15:38:28Z",
        "updatedAt" : "2012-02-05T15:38:28Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4e6d6cf4-4877-445f-8cc6-0bd3f618f999",
        "parentId" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Only using 'ij' would be best probably, but since currently `meshgrid` uses 'xy' we can't do that.\n",
        "createdAt" : "2012-02-05T15:41:00Z",
        "updatedAt" : "2012-02-05T15:41:00Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "8fc3775d-77ff-4a3b-b887-d53bbea3652b",
        "parentId" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Oops, see, I already got confused ;) I think a different choice of names would clarify things, 'xy' seems ok, 'standard' would be another option, and then maybe 'image' for the second choice, with a short explanation (images are displayed left-right, top-bottom) and a translation for Matlab users.\n",
        "createdAt" : "2012-02-05T15:50:50Z",
        "updatedAt" : "2012-02-05T15:50:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "1deb66fe-aade-4ac3-a252-d70c7743088c",
        "parentId" : "eeb8e6a7-800f-4d5a-a927-b5ee7b18f347",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "`ij` --> `image` sounds OK to me. Although I forgot the details by now. With added explanation it should work.\n",
        "createdAt" : "2012-05-28T17:39:56Z",
        "updatedAt" : "2012-05-28T17:39:56Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "d48b756b232c99b6624d76db3188090052e0db60",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +3242,3246 @@    argument.  Giving the string 'ij' returns a meshgrid with matrix indexing,\n    while 'xy' returns a meshgrid with Cartesian indexing.  In the 2-D case\n    with inputs of length M and N, the outputs are of shape (N, M) for 'xy'\n    indexing and (M, N) for 'ij' indexing.  In the 3-D case with inputs of\n    length M, N and P, outputs are of shape (N, M, P) for 'xy' indexing and (M,"
  },
  {
    "id" : "ac7a7823-986c-49ab-aae1-5a20a6bc85bf",
    "prId" : 192,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fda19608-5e4b-4b4b-afa0-f2aabcbea531",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So 'xy' indexing only affects the first two axis?\n",
        "createdAt" : "2012-02-01T04:01:06Z",
        "updatedAt" : "2012-02-05T14:57:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ba07668d-a0fe-490c-8a1e-925be52e3be7",
        "parentId" : "fda19608-5e4b-4b4b-afa0-f2aabcbea531",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "yes\n",
        "createdAt" : "2012-02-05T15:07:06Z",
        "updatedAt" : "2012-02-05T15:07:06Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "d48b756b232c99b6624d76db3188090052e0db60",
    "line" : 149,
    "diffHunk" : "@@ -1,1 +3316,3320 @@        output[1].shape = (-1, 1) + (1,)*(ndim - 2)\n        shape[0], shape[1] = shape[1], shape[0]\n\n    if sparse:\n        if copy_:"
  }
]