[
  {
    "id" : "8b87bbc8-6876-4128-8a41-cd40f9db573e",
    "prId" : 7742,
    "prUrl" : "https://github.com/numpy/numpy/pull/7742#pullrequestreview-17809817",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f1002b7-bb06-47b1-bc2b-0e0732e83f08",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Fixed in #8514 ",
        "createdAt" : "2017-01-21T16:30:29Z",
        "updatedAt" : "2017-01-21T16:30:29Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f764dbff7c496d6636dc0430f083ada9ff4e4be",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +229,233 @@        consolidated = ar.view(dtype)\n    except TypeError:\n        # There's no good way to do this for object arrays, etc...\n        msg = 'The axis argument to unique is not supported for dtype {dt}'\n        raise TypeError(msg.format(dt=ar.dtype))"
  },
  {
    "id" : "4c8bf9f0-f6d9-44e1-8e2f-46361602277e",
    "prId" : 8183,
    "prUrl" : "https://github.com/numpy/numpy/pull/8183#pullrequestreview-5811688",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e660bad-5856-4e8c-818d-c74ceb03fa20",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Surely this is wrong? It always writes only one element of the output!\n",
        "createdAt" : "2016-10-26T08:50:59Z",
        "updatedAt" : "2016-10-26T08:50:59Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "484827189756d45e6231bfd2cd3cf6db9c2993df",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +103,107 @@    result[:len(to_begin)] = to_begin\n    result[len(to_begin) + l:] = to_end\n    np.subtract(ary[1:], ary[:-1], result[len(to_begin):len(to_begin) + l])\n    return result\n"
  },
  {
    "id" : "db484105-48c9-4ca4-ab37-ca8987f88c3c",
    "prId" : 8423,
    "prUrl" : "https://github.com/numpy/numpy/pull/8423#pullrequestreview-32519896",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72482147-f8ee-41c5-a9e6-dedeed31f6d0",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "\"See also: The module you're looking at right now\" is a little weird. @brsr, you don't need to worry about it in this PR though.",
        "createdAt" : "2017-04-12T23:54:12Z",
        "updatedAt" : "2017-04-28T18:36:45Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "d22cafc162441b128a96754d8b3d196793e7d5d8",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +418,422 @@    isin                  : Version of this function that preserves the\n                            shape of ar1.\n    numpy.lib.arraysetops : Module with a number of other functions for\n                            performing set operations on arrays.\n"
  },
  {
    "id" : "fc45f71c-0d62-4212-87ee-d58e095d49ae",
    "prId" : 9142,
    "prUrl" : "https://github.com/numpy/numpy/pull/9142#pullrequestreview-39333108",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2314188b-e0fc-42fa-9795-99b30586f7d2",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Do we actually need this special casing at all? Seems to me that the below code could handle it by replacing\r\n\r\n```python\r\nflag = np.concatenate(([True], aux[1:] != aux[:-1]))\r\n```\r\nwith\r\n```python\r\nflag = np.empty(aux.shape, dtype=np.bool)\r\nflag[:1] = True\r\nnp.not_equal(aux[1:], aux[:-1], out=flag[1:])\r\n# flag[1:] = aux[1:] != aux[:-1]  would work above too, but be slower\r\n```\r\nWhich I would expect to be faster",
        "createdAt" : "2017-05-19T16:11:08Z",
        "updatedAt" : "2017-05-20T10:36:59Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d26d64f1-cdbd-4e70-ad0f-1e7726ab3fe0",
        "parentId" : "2314188b-e0fc-42fa-9795-99b30586f7d2",
        "authorId" : "590be2df-9459-4379-84fe-75d2ba8e7786",
        "body" : "You mean the block where arr.size == 0? Your suggestion is definitely more elegant, and it looks like it will work, but I'm not sure it would be faster per se, since there would not be less instructions executed if arr.size == 0, unless I'm missing something here. I guess it is also easier to read in its current form (but more effort to maintain).",
        "createdAt" : "2017-05-20T10:09:22Z",
        "updatedAt" : "2017-05-20T10:14:12Z",
        "lastEditedBy" : "590be2df-9459-4379-84fe-75d2ba8e7786",
        "tags" : [
        ]
      },
      {
        "id" : "0fb1ba77-c962-42af-a101-d33ccdabeb68",
        "parentId" : "2314188b-e0fc-42fa-9795-99b30586f7d2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I don't think speed is something we need to worry about for `size == 0` - there's definitely no reason to make that case faster than the other cases.\r\n\r\nMy remark about speed is regarding the normal use case",
        "createdAt" : "2017-05-20T10:36:14Z",
        "updatedAt" : "2017-05-20T10:36:19Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "cc8126c3-82ce-4e1f-b665-98076c5a795d",
        "parentId" : "2314188b-e0fc-42fa-9795-99b30586f7d2",
        "authorId" : "590be2df-9459-4379-84fe-75d2ba8e7786",
        "body" : "Ah ok, I suppose you are right. Should I just modify the current pull request, or will you merge this one, then I make a new pull request with this modification?",
        "createdAt" : "2017-05-20T10:45:41Z",
        "updatedAt" : "2017-05-20T10:45:41Z",
        "lastEditedBy" : "590be2df-9459-4379-84fe-75d2ba8e7786",
        "tags" : [
        ]
      },
      {
        "id" : "732d07aa-06a5-4d28-b66c-ede2e003a306",
        "parentId" : "2314188b-e0fc-42fa-9795-99b30586f7d2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I guess I may as well merge this one first, since it's definitely correct, and is a nice and contained bugfix",
        "createdAt" : "2017-05-20T10:47:35Z",
        "updatedAt" : "2017-05-20T10:47:35Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "eff18a97-d9eb-4331-998b-96ab4a80b6b6",
        "parentId" : "2314188b-e0fc-42fa-9795-99b30586f7d2",
        "authorId" : "590be2df-9459-4379-84fe-75d2ba8e7786",
        "body" : "Ok, sure. Should I make a separate issue for it too?",
        "createdAt" : "2017-05-20T10:48:47Z",
        "updatedAt" : "2017-05-20T10:48:47Z",
        "lastEditedBy" : "590be2df-9459-4379-84fe-75d2ba8e7786",
        "tags" : [
        ]
      },
      {
        "id" : "2a08a556-b1fc-4d24-aa79-2e8b30f99945",
        "parentId" : "2314188b-e0fc-42fa-9795-99b30586f7d2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "No need to file an issue for something that isn't a bug - just go straight to the PR",
        "createdAt" : "2017-05-20T10:53:06Z",
        "updatedAt" : "2017-05-20T10:53:07Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "64a2068d9163943b4adbae615642d38e533cf578",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +269,273 @@            if return_counts:\n                ret += (np.empty(0, np.intp),)\n        return ret\n\n    if optional_indices:"
  },
  {
    "id" : "7161d05d-99d4-4660-8abb-ba5bae8ed1dd",
    "prId" : 10498,
    "prUrl" : "https://github.com/numpy/numpy/pull/10498#pullrequestreview-92941058",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2a9c2194-de3f-49c2-a303-8cb81f474148",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Doing this makes the size match for empty arrays too",
        "createdAt" : "2018-01-31T09:00:51Z",
        "updatedAt" : "2018-01-31T09:13:14Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a946f8b0-c0ba-459c-8b41-fe7fe1f7e098",
        "parentId" : "2a9c2194-de3f-49c2-a303-8cb81f474148",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "Clever! But maybe it's worth adding a comment? The `mask[:1] = True` is a little puzzling until you understand it works with empty arrays.",
        "createdAt" : "2018-01-31T14:31:09Z",
        "updatedAt" : "2018-01-31T14:34:30Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "f80e20cfcf0728e068933cd5de9575db8ac3f803",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +278,282 @@    mask = np.empty(aux.shape, dtype=np.bool_)\n    mask[:1] = True\n    mask[1:] = aux[1:] != aux[:-1]\n\n    ret = (aux[mask],)"
  },
  {
    "id" : "f2ed9462-7c1b-463b-9fca-0248880cc0d5",
    "prId" : 10498,
    "prUrl" : "https://github.com/numpy/numpy/pull/10498#pullrequestreview-92941058",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "963f83f4-2220-4e57-87b4-31493204dd21",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "I'm surprised that the `- 1` works for an empty array. But it does work!",
        "createdAt" : "2018-01-31T14:31:21Z",
        "updatedAt" : "2018-01-31T14:34:30Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "f80e20cfcf0728e068933cd5de9575db8ac3f803",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +284,288 @@        ret += (perm[mask],)\n    if return_inverse:\n        imask = np.cumsum(mask) - 1\n        inv_idx = np.empty(mask.shape, dtype=np.intp)\n        inv_idx[perm] = imask"
  },
  {
    "id" : "9a091a1e-4be2-48ae-a6a1-53b1e942f943",
    "prId" : 10684,
    "prUrl" : "https://github.com/numpy/numpy/pull/10684#pullrequestreview-111109796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8362c62a-fab4-46c6-99e5-647f6119af3e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think you want an\r\n\r\n```\r\nelse:\r\n    # do the flattening that unique does\r\n    ar1 = ar1.ravel()\r\n    ar2 = ar2.ravel()\r\n```\r\n\r\non `if not assume_unique`\r\n\r\nEdit: This is out of scope, and should be left for a later CR",
        "createdAt" : "2018-04-11T07:12:38Z",
        "updatedAt" : "2018-05-18T07:37:45Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e8b7dfcf15601ba9bbb350d1a7ec55bde229db4",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +364,368 @@        else:\n            ar1 = unique(ar1)\n            ar2 = unique(ar2)\n    else:\n        ar1 = ar1.ravel()"
  },
  {
    "id" : "92277c5b-91bf-4d78-b9ee-5af27c837e40",
    "prId" : 10684,
    "prUrl" : "https://github.com/numpy/numpy/pull/10684#pullrequestreview-111110265",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e603507-910f-4970-a165-2cdd394a8812",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "On the line above, add \"this will be flattened if it is not already 1D\"",
        "createdAt" : "2018-04-11T07:14:43Z",
        "updatedAt" : "2018-05-18T07:37:45Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e8b7dfcf15601ba9bbb350d1a7ec55bde229db4",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +309,313 @@    ar1, ar2 : array_like\n        Input arrays. Will be flattened if not already 1D.\n    assume_unique : bool\n        If True, the input arrays are both assumed to be unique, which\n        can speed up the calculation.  Default is False."
  },
  {
    "id" : "171bcbcc-967f-4256-a699-e51bc59638a0",
    "prId" : 10684,
    "prUrl" : "https://github.com/numpy/numpy/pull/10684#pullrequestreview-112675990",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ef288b6-e834-49b8-ba74-4263d0d980c5",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "These lines need a test that hit them.",
        "createdAt" : "2018-04-17T06:10:12Z",
        "updatedAt" : "2018-05-18T07:37:45Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e8b7dfcf15601ba9bbb350d1a7ec55bde229db4",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +367,371 @@    else:\n        ar1 = ar1.ravel()\n        ar2 = ar2.ravel()\n        \n    aux = np.concatenate((ar1, ar2))"
  },
  {
    "id" : "edad9034-1ca0-4a56-a693-dba3a7210200",
    "prId" : 12116,
    "prUrl" : "https://github.com/numpy/numpy/pull/12116#pullrequestreview-162845953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1970ff2b-2eea-4a74-8ed7-cb1fae30117e",
        "parentId" : null,
        "authorId" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "body" : "Needs a `is not None` check.",
        "createdAt" : "2018-10-09T11:48:22Z",
        "updatedAt" : "2018-10-09T11:55:31Z",
        "lastEditedBy" : "48239ed9-0e9e-4f16-80c7-12419f1efd99",
        "tags" : [
        ]
      }
    ],
    "commit" : "4141e24fc201f8cf76180ca69eaa2d89eafaee58",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +39,43 @@\ndef _ediff1d_dispatcher(ary, to_end=None, to_begin=None):\n    return (ary, to_end, to_begin)\n\n"
  },
  {
    "id" : "8dfdd790-fa6d-46a8-b845-75fe2a540f41",
    "prId" : 12153,
    "prUrl" : "https://github.com/numpy/numpy/pull/12153#pullrequestreview-165844241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59f06c81-b1fa-4165-b041-b818272b85c1",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Nice wording, thanks",
        "createdAt" : "2018-10-17T21:27:23Z",
        "updatedAt" : "2018-10-17T21:27:24Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ddba2a474a673131c67d011cfcb76a47b869072",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +756,760 @@        1D array of values in `ar1` that are not in `ar2`. The result\n        is sorted when `assume_unique=False`, but otherwise only sorted\n        if the input is sorted.\n\n    See Also"
  },
  {
    "id" : "2bfd8103-a5c2-45b1-82da-d7e62e84523b",
    "prId" : 15747,
    "prUrl" : "https://github.com/numpy/numpy/pull/15747#pullrequestreview-374751266",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d90c30f-935b-4f86-802d-427a7bdbced6",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This `if` could probably do with a brief comment explaining why the special case is needed",
        "createdAt" : "2020-03-13T07:11:01Z",
        "updatedAt" : "2020-03-15T15:36:08Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "21741335-55a3-45da-891f-66808ff9fbe1",
        "parentId" : "8d90c30f-935b-4f86-802d-427a7bdbced6",
        "authorId" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "body" : "I pushed an update that added comments about this `if` statement.  Copy-editing suggestions are welcome!",
        "createdAt" : "2020-03-14T20:15:41Z",
        "updatedAt" : "2020-03-15T15:36:08Z",
        "lastEditedBy" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "tags" : [
        ]
      }
    ],
    "commit" : "30689433982597fa89f7f27fcf031ec77eec250a",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +289,293 @@            # itemsize 0, the total size of the result is still 0 bytes.\n            consolidated = np.empty(len(ar), dtype=dtype)\n    except TypeError:\n        # There's no good way to do this for object arrays, etc...\n        msg = 'The axis argument to unique is not supported for dtype {dt}'"
  }
]