[
  {
    "id" : "7a8e3c4e-4c06-4104-b7d0-5f8690bd1f12",
    "prId" : 7918,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5491e4be-2331-431e-b66d-2766c51f598d",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Again, for this minimal function where the output is not itself an `ndarray` subclass, I don't quite see why the result should be an `ndarray` subclass.\n",
        "createdAt" : "2016-08-08T16:10:43Z",
        "updatedAt" : "2016-10-11T02:29:51Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "242da4168588dc9431077f67c8f5309ac986e3fc",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +43,47 @@\n        def minimal_function(array):\n            return array.data\n\n        a = np.zeros((6, 3)).view(MinimalSubclass)"
  },
  {
    "id" : "31e9f675-f440-47c8-b731-158c0ae8cafa",
    "prId" : 9132,
    "prUrl" : "https://github.com/numpy/numpy/pull/9132#pullrequestreview-38823824",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8404bc4c-924b-4a7d-ad33-5b42b8db2d02",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This should have a `1.13 ...` comment, right?",
        "createdAt" : "2017-05-18T00:26:39Z",
        "updatedAt" : "2017-05-18T01:03:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f3166d20-50b6-46c3-9ef5-c0eef1d4b17e",
        "parentId" : "8404bc4c-924b-4a7d-ad33-5b42b8db2d02",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "fixed.",
        "createdAt" : "2017-05-18T01:06:14Z",
        "updatedAt" : "2017-05-18T01:06:14Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "beac50cf98f450539dcdeee0273cfe5175d45d26",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +194,198 @@            assert_(np.squeeze(b).shape == s)\n\n    def test_deprecations(self):\n        # 2017-05-17, 1.13.0\n        s = (2, 3, 4, 5)"
  },
  {
    "id" : "e2b84c06-c10e-4ece-a6ac-984730ff333d",
    "prId" : 11105,
    "prUrl" : "https://github.com/numpy/numpy/pull/11105#pullrequestreview-120713256",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f56dfc4a-a867-48c3-a9d3-1b662c117c72",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Total nitpick, but replace `dict()` by `{}` (and `{kth: 2}` further down)",
        "createdAt" : "2018-05-16T14:28:16Z",
        "updatedAt" : "2018-05-26T05:56:31Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "5ad4c3ad-4df9-47c2-95ab-1cb2ba6b84f6",
        "parentId" : "f56dfc4a-a867-48c3-a9d3-1b662c117c72",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This was a deliberate choice, because `dict(kth=2)` looks more like `some_func(kth=2)`",
        "createdAt" : "2018-05-16T16:08:54Z",
        "updatedAt" : "2018-05-26T05:56:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c187dcc4-5414-4fa6-b4ef-f2b7cff93c38",
        "parentId" : "f56dfc4a-a867-48c3-a9d3-1b662c117c72",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Definitely fine to leave as is.",
        "createdAt" : "2018-05-16T16:10:37Z",
        "updatedAt" : "2018-05-26T05:56:31Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a3c50ab427cd9c4f3125a8e72d31f9141bd558a",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@\n        funcs = [\n            (np.sort, np.argsort, dict()),\n            (_add_keepdims(np.min), _add_keepdims(np.argmin), dict()),\n            (_add_keepdims(np.max), _add_keepdims(np.argmax), dict()),"
  },
  {
    "id" : "80497714-51c4-4e74-aace-7b6fda19e9b4",
    "prId" : 11813,
    "prUrl" : "https://github.com/numpy/numpy/pull/11813#pullrequestreview-149543251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "054698a4-c0c8-49b4-9e93-8bff47b2784c",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Sorry, forgot about it, but the test needs a decorator similar to:\r\n```\r\n@pytest.mark.skipif(not IS_64BIT, reason=\"Needs 64bit platform\")\r\n```\r\n(the `IS_64BIT` is just from `test_io` and simply `sys.maxsize > 2**32`, otherwise it crashes on 32bit systems.\r\n\r\nIf you can, it would also be nice if you sqash the test fixups into a single commit (or all into one), but we can also do that when merging. Thanks!",
        "createdAt" : "2018-08-25T11:30:24Z",
        "updatedAt" : "2018-08-25T12:36:50Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "aae5edfb-b7a4-4344-ba0f-e13d749779d3",
        "parentId" : "054698a4-c0c8-49b4-9e93-8bff47b2784c",
        "authorId" : "1742f1ed-08f0-475e-97d1-0ccf950f0f28",
        "body" : "@seberg \r\nThank you for the tip!\r\n\r\nI've commited decorator fix with `--amend`, so all test fixes are in the one commit.",
        "createdAt" : "2018-08-25T12:47:37Z",
        "updatedAt" : "2018-08-25T12:47:37Z",
        "lastEditedBy" : "1742f1ed-08f0-475e-97d1-0ccf950f0f28",
        "tags" : [
        ]
      },
      {
        "id" : "5868dfde-4494-474d-b2b2-b789f56ad41e",
        "parentId" : "054698a4-c0c8-49b4-9e93-8bff47b2784c",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Didn't manage to squash the commits, but good enough.",
        "createdAt" : "2018-08-26T16:13:42Z",
        "updatedAt" : "2018-08-26T16:13:42Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "219504b9c3b05d5ecb3e65cb2fe667b79fc7712a",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +408,412 @@        assert_(a.dtype.type is res[-1].dtype.type)\n        # perhaps should check higher dimensions\n\n    @pytest.mark.skipif(not IS_64BIT, reason=\"Needs 64bit platform\")\n    def test_integer_split_2D_rows_greater_max_int32(self):"
  },
  {
    "id" : "dbb6116f-3eb7-407e-b509-05271dacf4f7",
    "prId" : 12222,
    "prUrl" : "https://github.com/numpy/numpy/pull/12222#pullrequestreview-166771978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d078b8f8-553b-4763-b488-a0ff1dd45b18",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Rather than copying from docstrings, should we start investigating doctests?",
        "createdAt" : "2018-10-20T04:47:09Z",
        "updatedAt" : "2018-10-20T04:47:09Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1fe56577-8f33-484d-9e0e-37b9c9717aad",
        "parentId" : "d078b8f8-553b-4763-b488-a0ff1dd45b18",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Marked as a possible task on the [BIDS Trello board](https://trello.com/c/xZBjDYjp)",
        "createdAt" : "2018-10-21T05:59:03Z",
        "updatedAt" : "2018-10-21T05:59:03Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb3a67b0f20b45f12f6d95dd3b5f82b6377899ae",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +473,477 @@\n    def test_2D_arrays(self):\n        # same as hstack 2D docstring example\n        a = np.array([[1], [2], [3]])\n        b = np.array([[2], [3], [4]])"
  },
  {
    "id" : "a61bc502-9a2e-4776-b621-229606591c79",
    "prId" : 14051,
    "prUrl" : "https://github.com/numpy/numpy/pull/14051#pullrequestreview-263709987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ec5b03b-13b1-4ed6-9e68-a29df45c9ac3",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Please add a test for the same axis being repeated. Is that supported?",
        "createdAt" : "2019-07-18T02:53:02Z",
        "updatedAt" : "2019-12-02T19:53:05Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0cfcdda1-ec80-4d85-b631-0f74edb60374",
        "parentId" : "8ec5b03b-13b1-4ed6-9e68-a29df45c9ac3",
        "authorId" : "69a13262-3a0d-4fcd-ad1d-c0264c34730d",
        "body" : "Repeated axes are not allowed.  `axis` refers to the output dimensions.",
        "createdAt" : "2019-07-18T14:14:53Z",
        "updatedAt" : "2019-12-02T19:53:05Z",
        "lastEditedBy" : "69a13262-3a0d-4fcd-ad1d-c0264c34730d",
        "tags" : [
        ]
      },
      {
        "id" : "6f1c195e-0ecb-460f-a35d-d58f9533cdce",
        "parentId" : "8ec5b03b-13b1-4ed6-9e68-a29df45c9ac3",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Then please add a test showing that it is not allowed",
        "createdAt" : "2019-07-18T14:39:52Z",
        "updatedAt" : "2019-12-02T19:53:05Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f4f5bcf7-ea79-49c0-84d4-09cc88d402f7",
        "parentId" : "8ec5b03b-13b1-4ed6-9e68-a29df45c9ac3",
        "authorId" : "69a13262-3a0d-4fcd-ad1d-c0264c34730d",
        "body" : "I added that test, thanks.",
        "createdAt" : "2019-07-18T14:50:12Z",
        "updatedAt" : "2019-12-02T19:53:05Z",
        "lastEditedBy" : "69a13262-3a0d-4fcd-ad1d-c0264c34730d",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcc1ec067d9558a0228c536debc4c5318ecc98e6",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +295,299 @@        assert np.expand_dims(a, axis=(0, -1, -2)).shape == (1, 3, 3, 3, 1, 1)\n        assert np.expand_dims(a, axis=(0, 3, 5)).shape == (1, 3, 3, 1, 3, 1)\n        assert np.expand_dims(a, axis=(0, -3, -5)).shape == (1, 1, 3, 1, 3, 3)\n\n    def test_axis_out_of_range(self):"
  },
  {
    "id" : "725a93ed-e898-445a-8fd1-fa90a107fea3",
    "prId" : 14051,
    "prUrl" : "https://github.com/numpy/numpy/pull/14051#pullrequestreview-325463137",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cc739cb-2f26-4daa-88a8-97ed9994464f",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I would like a test for well defined behaviour if an axis is repeated. Likely, that is simple an additional `len(shape)` check above. Although I may be missing something.",
        "createdAt" : "2019-12-02T18:51:37Z",
        "updatedAt" : "2019-12-02T19:53:05Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "f1b28de2-d789-48af-9ade-fe6bbde03411",
        "parentId" : "9cc739cb-2f26-4daa-88a8-97ed9994464f",
        "authorId" : "69a13262-3a0d-4fcd-ad1d-c0264c34730d",
        "body" : "If an axis is repeated, a `ValueError` is raised.  There's a test for that here:\r\nhttps://github.com/numpy/numpy/pull/14051/files#diff-054e272f56fd4778417dcb8731d51476R309",
        "createdAt" : "2019-12-02T19:05:02Z",
        "updatedAt" : "2019-12-02T19:53:05Z",
        "lastEditedBy" : "69a13262-3a0d-4fcd-ad1d-c0264c34730d",
        "tags" : [
        ]
      },
      {
        "id" : "95f499e4-c625-4466-856a-6db946129375",
        "parentId" : "9cc739cb-2f26-4daa-88a8-97ed9994464f",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Sorry, yeah, just realized that normalize axis tuple does this. Thanks for pointing it out!",
        "createdAt" : "2019-12-02T19:06:42Z",
        "updatedAt" : "2019-12-02T19:53:05Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcc1ec067d9558a0228c536debc4c5318ecc98e6",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +295,299 @@        assert np.expand_dims(a, axis=(0, -1, -2)).shape == (1, 3, 3, 3, 1, 1)\n        assert np.expand_dims(a, axis=(0, 3, 5)).shape == (1, 3, 3, 1, 3, 1)\n        assert np.expand_dims(a, axis=(0, -3, -5)).shape == (1, 1, 3, 1, 3, 3)\n\n    def test_axis_out_of_range(self):"
  }
]