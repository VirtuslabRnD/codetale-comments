[
  {
    "id" : "0f9ae9ee-c40b-4618-96cc-fbfc22a16283",
    "prId" : 5319,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "551f3f26-d3ff-48eb-8aff-9cfca05c5052",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'd probably run through all integer types and booleans, but this probably suffices. An easy way to get them is\n\n```\nIn [3]: np.typecodes\nOut[3]: \n{'All': '?bhilqpBHILQPefdgFDGSUVOMm',\n 'AllFloat': 'efdgFDG',\n 'AllInteger': 'bBhHiIlLqQpP',\n 'Character': 'c',\n 'Complex': 'FDG',\n 'Datetime': 'Mm',\n 'Float': 'efdg',\n 'Integer': 'bhilqp',\n 'UnsignedInteger': 'BHILQP'}\n```\n",
        "createdAt" : "2014-11-30T23:20:24Z",
        "updatedAt" : "2014-11-30T23:20:24Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "24effb6b7a075e23d85ea0b60ed8a607fe218c14",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +8,12 @@    a = [[[1, 0, 1], [0, 1, 0]],\n         [[1, 1, 0], [0, 0, 1]]]\n    for dtype in [np.bool, np.uint8, np.int]:\n        arr = np.array(a, dtype=dtype)\n        b = np.packbits(arr, axis=-1)"
  },
  {
    "id" : "15a0b063-ed0c-45a7-9ca4-f4493310dc30",
    "prId" : 5319,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d22eefd-4222-40d6-aab5-58d607c49b72",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Be nice to check for something other than `1`, but that gets complicated when checking all the types. Hmm, could generate a string of random (nonzero) bytes and view them as the different types in order to have them of the right precision. Conversion of integer types to boolean would provide the boolean equivalent (0 or 1).\n",
        "createdAt" : "2014-11-30T23:34:40Z",
        "updatedAt" : "2014-11-30T23:34:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2aa55b8c-0621-4000-8300-581060289246",
        "parentId" : "9d22eefd-4222-40d6-aab5-58d607c49b72",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "But that would not normally force searching all the bytes, because most would be non-zeros. Darn.\n",
        "createdAt" : "2014-11-30T23:36:17Z",
        "updatedAt" : "2014-11-30T23:36:17Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "24effb6b7a075e23d85ea0b60ed8a607fe218c14",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +6,10 @@def test_packbits():\n    # Copied from the docstring.\n    a = [[[1, 0, 1], [0, 1, 0]],\n         [[1, 1, 0], [0, 0, 1]]]\n    for dtype in [np.bool, np.uint8, np.int]:"
  },
  {
    "id" : "ac93b9fb-cd62-4372-bcc1-372eb4cf7731",
    "prId" : 8326,
    "prUrl" : "https://github.com/numpy/numpy/pull/8326#pullrequestreview-11444340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a5076aa-4f63-4df6-aedb-77d458df0b04",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK.",
        "createdAt" : "2016-12-05T18:55:36Z",
        "updatedAt" : "2017-01-12T16:26:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2a47486a4ccaa141ceeb585e24b2be17b359998",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +252,256 @@\ndef test_unpackbits_large():\n    # test all possible numbers via comparison to already tested packbits\n    d = np.arange(277, dtype=np.uint8)\n    assert_array_equal(np.packbits(np.unpackbits(d)), d)"
  }
]