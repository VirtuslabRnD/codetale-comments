[
  {
    "id" : "bfd34383-06c1-4393-aa66-fad8b20c2345",
    "prId" : 5805,
    "prUrl" : "https://github.com/numpy/numpy/pull/5805#pullrequestreview-22659144",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb6bfdb0-1119-4324-8498-a1d36bc34d93",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Wait, why is it desirable that `np.arange(0, dtype=float)` is converted to `dtype=intp`? If the user is explicit about what they asked for, it seems wrong to override them",
        "createdAt" : "2017-02-19T12:53:30Z",
        "updatedAt" : "2017-02-19T12:53:34Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "c01165f43068fea96722c172eb23efed4ca99763",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +174,178 @@        # Test empty inputs create ouputs of indexing type, gh-5804\n        # Test both lists and arrays\n        for func in (range, np.arange):\n            a, = np.ix_(func(0))\n            assert_equal(a.dtype, np.intp)"
  },
  {
    "id" : "46af47e7-2f9e-4c86-8124-2fee2d58d446",
    "prId" : 10797,
    "prUrl" : "https://github.com/numpy/numpy/pull/10797#pullrequestreview-126076472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2134a0f-7c34-4aa9-9453-09fadf2459c9",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "We should still use the test-framework agnostic suppress_warnings, assert_raises instead of pytest-specific tests",
        "createdAt" : "2018-05-22T17:09:39Z",
        "updatedAt" : "2018-10-16T17:07:24Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "87f0e964-25a7-49fc-b60c-b767e31d37ac",
        "parentId" : "a2134a0f-7c34-4aa9-9453-09fadf2459c9",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "Is there a specific reason for that? Still trying to retain compatibility with other frameworks at this point or just want to maintain thematic consistency across the testsuite for now?",
        "createdAt" : "2018-05-22T19:48:55Z",
        "updatedAt" : "2018-10-16T17:07:24Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "7616d0fc-7651-4e3f-83f1-d0b97baa9b01",
        "parentId" : "a2134a0f-7c34-4aa9-9453-09fadf2459c9",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "@charris - should we be preferring `assert_raises` or are we ready to commit to pytest?",
        "createdAt" : "2018-06-05T17:36:06Z",
        "updatedAt" : "2018-10-16T17:07:24Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "11b9f6c4c477c0778080820ef36cfd61ef70abb6",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +44,48 @@        with assert_raises(TypeError):\n            np.unravel_index(254, ims=(17, 94))\n\n        assert_equal(np.ravel_multi_index((1, 0), (2, 2)), 2)\n        assert_equal(np.unravel_index(254, (17, 94)), (2, 66))"
  },
  {
    "id" : "c4b57895-f929-452d-a825-cc1e00e0f823",
    "prId" : 12102,
    "prUrl" : "https://github.com/numpy/numpy/pull/12102#pullrequestreview-162271923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8da54192-8e40-44e1-ab8c-7392fb81ff3c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "You could leave out these two lines, we just need to know what is being tested. I'd also omit the \"regression\". ",
        "createdAt" : "2018-10-06T22:23:25Z",
        "updatedAt" : "2018-10-06T22:23:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "18a0fab98ffe4f11fbeb2c3db60bbd69b3b957e5",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +174,178 @@        # regression test None value handling for\n        # start and step values used by mgrid;\n        # internally, this aims to cover previously\n        # unexplored code paths in nd_grid()\n        grid = mgrid[start:stop:step, start:stop:step]"
  },
  {
    "id" : "236bd762-9ca5-40b7-bddf-05d92d121dc3",
    "prId" : 14585,
    "prUrl" : "https://github.com/numpy/numpy/pull/14585#pullrequestreview-292188260",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8274ac66-28e6-4929-a867-9de7bc55e619",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "all these tests pass before the fix. Can you write a test that fails before/passes after?",
        "createdAt" : "2019-09-24T05:40:23Z",
        "updatedAt" : "2019-09-24T05:55:58Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "17626ce3-9a16-4b42-b6ae-8b9f0a4bc534",
        "parentId" : "8274ac66-28e6-4929-a867-9de7bc55e619",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "No, I just added those for symmetry with the other function.",
        "createdAt" : "2019-09-24T05:54:51Z",
        "updatedAt" : "2019-09-24T05:55:58Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "522af9dcccdd16c4bdfeab26d78a85d8a56369a9",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +193,197 @@\n        with assert_raises(ValueError):\n            np.unravel_index([1], (2, 1, 0))\n\nclass TestGrid(object):"
  },
  {
    "id" : "1cf9e524-dc87-4d43-a3eb-e9be55ffd394",
    "prId" : 14585,
    "prUrl" : "https://github.com/numpy/numpy/pull/14585#pullrequestreview-292188518",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ebdc7138-5fce-4b9c-b3d1-10a79bbf5015",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Does this change the error message for `mode=\"raise\"`?",
        "createdAt" : "2019-09-24T05:44:27Z",
        "updatedAt" : "2019-09-24T05:55:58Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f00603b4-8e4a-43cf-8d05-22a323bde39a",
        "parentId" : "ebdc7138-5fce-4b9c-b3d1-10a79bbf5015",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "The original error (non empty) is: \"invalid entry in coordinates array\", which is fair. Could just use that, neither is great to be honest.",
        "createdAt" : "2019-09-24T05:55:53Z",
        "updatedAt" : "2019-09-24T05:55:58Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "522af9dcccdd16c4bdfeab26d78a85d8a56369a9",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +184,188 @@        with assert_raises(ValueError):\n            np.ravel_multi_index(\n                    np.zeros((3, 1), dtype=np.intp), (2, 1, 0), mode=mode)\n\n    def test_empty_array_unravel(self):"
  },
  {
    "id" : "299f5645-8034-498a-a26a-3c362da26aa6",
    "prId" : 16815,
    "prUrl" : "https://github.com/numpy/numpy/pull/16815#pullrequestreview-447547211",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16a87ec5-c429-4581-b58b-a91491cd9247",
        "parentId" : null,
        "authorId" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "body" : "Maybe a comment here on which issue this addresses",
        "createdAt" : "2020-07-13T19:43:52Z",
        "updatedAt" : "2020-07-24T21:43:14Z",
        "lastEditedBy" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe708577504f590d1c51f8505296686ea0106efa",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +295,299 @@\n        # Related to #16466\n        g = r_[0:36:np.complex64(100j)]\n        assert_(g.shape == (100,))\n"
  }
]