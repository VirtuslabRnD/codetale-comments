[
  {
    "id" : "20114a3b-cfbb-4074-97ce-588e07ffe10e",
    "prId" : 192,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ecc1726-73fa-4701-ba83-5cda216ade67",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Any reason not to put that on a single line?\n",
        "createdAt" : "2012-02-01T04:05:45Z",
        "updatedAt" : "2012-02-05T14:57:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c69f073d-a1b7-4a67-89ad-4381e20825a1",
        "parentId" : "7ecc1726-73fa-4701-ba83-5cda216ade67",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "not really, changed that now.\n",
        "createdAt" : "2012-02-05T14:58:36Z",
        "updatedAt" : "2012-02-05T14:58:36Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "d48b756b232c99b6624d76db3188090052e0db60",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1054,1058 @@        assert_(all(X == array([[1, 2, 3]])))\n        assert_(all(Y == array([[4], [5], [6], [7]])))\n\n\nclass TestPiecewise(TestCase):"
  },
  {
    "id" : "32659559-023f-4a8d-a8b1-c249ac1843fb",
    "prId" : 3658,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a41237d-3277-430d-9584-c62dd90a4fd5",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "There should probably also be a test that the input is not overwritten when `overwrite_input` is unspecified, as opposed to specified to be `False`.\n",
        "createdAt" : "2013-09-06T13:18:15Z",
        "updatedAt" : "2013-09-16T16:47:13Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "9316110a42c370616cbb80ae3e1769534d04de10",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +1529,1533 @@        a = np.array([2, 3, 4, 1])\n        np.percentile(a, [50], overwrite_input=False)\n        assert_equal(a, np.array([2, 3, 4, 1]))\n\n        a = np.array([2, 3, 4, 1])"
  },
  {
    "id" : "d6593c91-e5c7-4584-8181-061fa23fdb3c",
    "prId" : 4358,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3027b10-81e1-4233-89d8-0e2cc0a88a03",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "seems to work with this variant but I'd like an explicit test for https://github.com/numpy/numpy/pull/3537#issuecomment-25486031 to make sure this does not get introduced by future changes\n",
        "createdAt" : "2014-02-24T17:28:26Z",
        "updatedAt" : "2014-03-23T19:33:34Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "4c3b482e-eaae-4f34-a3aa-67ff9ca1a5bb",
        "parentId" : "b3027b10-81e1-4233-89d8-0e2cc0a88a03",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yeah, I will add that test and maybe some more after training probably ;). (btw. sorry but some of the code changed a little while you reviewed basically, it just the broadcast_arrays calls being now single for both lists since it includes asarray anyway... probably premature optimization, too, but I don't think it hurts readibility)\n",
        "createdAt" : "2014-02-24T18:43:59Z",
        "updatedAt" : "2014-03-23T19:33:34Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "537bdae4-c570-4e94-95a0-71d59a243c87",
        "parentId" : "b3027b10-81e1-4233-89d8-0e2cc0a88a03",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK, updated and that test added. I had to reorganize things a bit unfortunately. Because the result type should treat scalars differently, I cannot move the `asarray` to `braodcast_arrays`.\nJust noticed, that this function has no support whatsoever of structured types. But the old one didn't have either, so I think this is for another day.\n",
        "createdAt" : "2014-02-24T22:09:40Z",
        "updatedAt" : "2014-03-23T19:33:34Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "123b319be37f01e3c4f2e42552d4ca121b27ca38",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +172,176 @@        assert_equal(len(choices), 3)\n        assert_equal(len(conditions), 3)\n\n    def test_broadcasting(self):\n        conditions = [np.array(True), np.array([False, True, False])]"
  },
  {
    "id" : "8656f7c6-3916-4f85-9357-c86b6c612b6a",
    "prId" : 4792,
    "prUrl" : "https://github.com/numpy/numpy/pull/4792#pullrequestreview-71017802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d1615b6-a6e8-4bb4-8291-07f226735142",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This doesn't make any sense. If `x` is 0d, the conditions should be 0d too, as `[True, False]`",
        "createdAt" : "2017-10-21T21:37:55Z",
        "updatedAt" : "2017-10-21T21:37:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "292b9ff538ea4950c7380c76cf65d1a5b108b75c",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1508,1512 @@\n        x = 5\n        y = piecewise(x, [[True], [False]], [1, 0])\n        assert_(y.ndim == 0)\n        assert_(y == 1)"
  }
]