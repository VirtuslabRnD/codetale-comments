[
  {
    "id" : "20114a3b-cfbb-4074-97ce-588e07ffe10e",
    "prId" : 192,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ecc1726-73fa-4701-ba83-5cda216ade67",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Any reason not to put that on a single line?\n",
        "createdAt" : "2012-02-01T04:05:45Z",
        "updatedAt" : "2012-02-05T14:57:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c69f073d-a1b7-4a67-89ad-4381e20825a1",
        "parentId" : "7ecc1726-73fa-4701-ba83-5cda216ade67",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "not really, changed that now.\n",
        "createdAt" : "2012-02-05T14:58:36Z",
        "updatedAt" : "2012-02-05T14:58:36Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "d48b756b232c99b6624d76db3188090052e0db60",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1054,1058 @@        assert_(all(X == array([[1, 2, 3]])))\n        assert_(all(Y == array([[4], [5], [6], [7]])))\n\n\nclass TestPiecewise(TestCase):"
  },
  {
    "id" : "32659559-023f-4a8d-a8b1-c249ac1843fb",
    "prId" : 3658,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a41237d-3277-430d-9584-c62dd90a4fd5",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "There should probably also be a test that the input is not overwritten when `overwrite_input` is unspecified, as opposed to specified to be `False`.\n",
        "createdAt" : "2013-09-06T13:18:15Z",
        "updatedAt" : "2013-09-16T16:47:13Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "9316110a42c370616cbb80ae3e1769534d04de10",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +1529,1533 @@        a = np.array([2, 3, 4, 1])\n        np.percentile(a, [50], overwrite_input=False)\n        assert_equal(a, np.array([2, 3, 4, 1]))\n\n        a = np.array([2, 3, 4, 1])"
  },
  {
    "id" : "d6593c91-e5c7-4584-8181-061fa23fdb3c",
    "prId" : 4358,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3027b10-81e1-4233-89d8-0e2cc0a88a03",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "seems to work with this variant but I'd like an explicit test for https://github.com/numpy/numpy/pull/3537#issuecomment-25486031 to make sure this does not get introduced by future changes\n",
        "createdAt" : "2014-02-24T17:28:26Z",
        "updatedAt" : "2014-03-23T19:33:34Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "4c3b482e-eaae-4f34-a3aa-67ff9ca1a5bb",
        "parentId" : "b3027b10-81e1-4233-89d8-0e2cc0a88a03",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yeah, I will add that test and maybe some more after training probably ;). (btw. sorry but some of the code changed a little while you reviewed basically, it just the broadcast_arrays calls being now single for both lists since it includes asarray anyway... probably premature optimization, too, but I don't think it hurts readibility)\n",
        "createdAt" : "2014-02-24T18:43:59Z",
        "updatedAt" : "2014-03-23T19:33:34Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "537bdae4-c570-4e94-95a0-71d59a243c87",
        "parentId" : "b3027b10-81e1-4233-89d8-0e2cc0a88a03",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK, updated and that test added. I had to reorganize things a bit unfortunately. Because the result type should treat scalars differently, I cannot move the `asarray` to `braodcast_arrays`.\nJust noticed, that this function has no support whatsoever of structured types. But the old one didn't have either, so I think this is for another day.\n",
        "createdAt" : "2014-02-24T22:09:40Z",
        "updatedAt" : "2014-03-23T19:33:34Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "123b319be37f01e3c4f2e42552d4ca121b27ca38",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +172,176 @@        assert_equal(len(choices), 3)\n        assert_equal(len(conditions), 3)\n\n    def test_broadcasting(self):\n        conditions = [np.array(True), np.array([False, True, False])]"
  },
  {
    "id" : "8656f7c6-3916-4f85-9357-c86b6c612b6a",
    "prId" : 4792,
    "prUrl" : "https://github.com/numpy/numpy/pull/4792#pullrequestreview-71017802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d1615b6-a6e8-4bb4-8291-07f226735142",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This doesn't make any sense. If `x` is 0d, the conditions should be 0d too, as `[True, False]`",
        "createdAt" : "2017-10-21T21:37:55Z",
        "updatedAt" : "2017-10-21T21:37:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "292b9ff538ea4950c7380c76cf65d1a5b108b75c",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1508,1512 @@\n        x = 5\n        y = piecewise(x, [[True], [False]], [1, 0])\n        assert_(y.ndim == 0)\n        assert_(y == 1)"
  },
  {
    "id" : "4d3e2934-a8e3-47e1-8433-bf109c58ab02",
    "prId" : 5614,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddde40e9-d68f-4e0d-805c-5f7e1e7d5106",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "almost equal? shouldn't those be exactly equal?\n",
        "createdAt" : "2015-02-27T17:59:13Z",
        "updatedAt" : "2015-02-27T17:59:13Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "b4e90666-dfad-49aa-8923-47fe9f95cb00",
        "parentId" : "ddde40e9-d68f-4e0d-805c-5f7e1e7d5106",
        "authorId" : "c4c04c9e-519b-4e97-b79a-9f5cb25a523a",
        "body" : "Just a guess, but maybe it has to do with differences between the C standard libraries in MSVC vs the ones in MinGW. I can verify that they are different on my machine though. Only on the order of about 1E-21.\n",
        "createdAt" : "2015-02-27T18:39:33Z",
        "updatedAt" : "2015-02-27T18:40:53Z",
        "lastEditedBy" : "c4c04c9e-519b-4e97-b79a-9f5cb25a523a",
        "tags" : [
        ]
      },
      {
        "id" : "5f376ed4-cc9c-46cf-bc5a-945ab485da07",
        "parentId" : "ddde40e9-d68f-4e0d-805c-5f7e1e7d5106",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "probably.\n",
        "createdAt" : "2015-02-27T18:40:04Z",
        "updatedAt" : "2015-02-27T18:40:04Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "d3a93ec0-9afe-4ecb-b321-6c62baef2b8d",
        "parentId" : "ddde40e9-d68f-4e0d-805c-5f7e1e7d5106",
        "authorId" : "c4c04c9e-519b-4e97-b79a-9f5cb25a523a",
        "body" : "Just a small follow up on this one, I think this is actually the [intel bug](https://randomascii.wordpress.com/2014/10/09/intel-underestimates-error-bounds-by-1-3-quintillion/) in fsin and fcos.\nIn the coments for that article there is some discussion about how msvc does not exibit this bug (though some other rounding inconsistencies are present). AFAICT, the sin/cos instructions in mingw are still just wrappers around fsin though, so they do exhibit the intel bug. This can be seen at the Python level by doing:\n\n```\nimport numpy as np\nimport sympy as sy\nimport math as ma\nprint sy.Float(np.pi, 100) + sy.Float(ma.sin(np.pi), 100)\nprint sy.Float(np.pi, 100) + sy.Float(np.sin(np.pi), 100)\n```\n\nThe first number printed is a much better approximation of pi than the second.\nThis would cause the error in the tests here when compiling with mingw for a python installation compiled with msvc, since the sin and cos functions in the math library come from msvc while the ones in mingw just wrap fsin and fcos.\n",
        "createdAt" : "2015-03-13T16:39:56Z",
        "updatedAt" : "2015-03-13T16:39:56Z",
        "lastEditedBy" : "c4c04c9e-519b-4e97-b79a-9f5cb25a523a",
        "tags" : [
        ]
      }
    ],
    "commit" : "444b5ac1eb8d0e2bfe548770af3ab8e6af846832",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +669,673 @@        r1 = f(args)\n        r2 = np.cos(args)\n        assert_array_almost_equal(r1, r2)\n\n    def test_keywords(self):"
  },
  {
    "id" : "e3974776-35d7-43ae-be2a-ab68928867f1",
    "prId" : 6129,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b22aa0a2-a2ef-48b4-bb02-fc6fd4a9cb62",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "Would like to have a test checking that `axis=None` does the same as `axis` not being provided.\n",
        "createdAt" : "2015-08-17T15:10:30Z",
        "updatedAt" : "2015-09-06T12:42:54Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc1990e770966535d188785cafaa3230c0a0377e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +602,606 @@        assert_(np.all(num_error < 0.03) == True)\n\n    def test_specific_axes(self):\n        # Testing that gradient can work on a given axis only\n        v = [[1, 1], [3, 4]]"
  },
  {
    "id" : "aef896cf-19d9-4cce-80f8-906954286454",
    "prId" : 7129,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43238672-7cd0-4d90-a875-7bdc918a493f",
        "parentId" : null,
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "There does not appear to be any good reason to name the test otherwise than with the name of the function being tested in this case. Perhaps the function name changed at some point and the test was updated?\n",
        "createdAt" : "2016-01-27T16:06:19Z",
        "updatedAt" : "2016-02-01T01:04:15Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "2cc88886-d357-4e7d-bf5b-10f3b1f0bc19",
        "parentId" : "43238672-7cd0-4d90-a875-7bdc918a493f",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Yes,I think this was ported from a scipy function with that name.\n",
        "createdAt" : "2016-01-27T16:30:39Z",
        "updatedAt" : "2016-02-01T01:04:15Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ec694b69a231a8de43032711c657d253edbed9d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2056,2060 @@\n\nclass TestPercentile(TestCase):\n\n    def test_basic(self):"
  }
]