[
  {
    "id" : "20114a3b-cfbb-4074-97ce-588e07ffe10e",
    "prId" : 192,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ecc1726-73fa-4701-ba83-5cda216ade67",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Any reason not to put that on a single line?\n",
        "createdAt" : "2012-02-01T04:05:45Z",
        "updatedAt" : "2012-02-05T14:57:50Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c69f073d-a1b7-4a67-89ad-4381e20825a1",
        "parentId" : "7ecc1726-73fa-4701-ba83-5cda216ade67",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "not really, changed that now.\n",
        "createdAt" : "2012-02-05T14:58:36Z",
        "updatedAt" : "2012-02-05T14:58:36Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "d48b756b232c99b6624d76db3188090052e0db60",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1054,1058 @@        assert_(all(X == array([[1, 2, 3]])))\n        assert_(all(Y == array([[4], [5], [6], [7]])))\n\n\nclass TestPiecewise(TestCase):"
  },
  {
    "id" : "32659559-023f-4a8d-a8b1-c249ac1843fb",
    "prId" : 3658,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a41237d-3277-430d-9584-c62dd90a4fd5",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "There should probably also be a test that the input is not overwritten when `overwrite_input` is unspecified, as opposed to specified to be `False`.\n",
        "createdAt" : "2013-09-06T13:18:15Z",
        "updatedAt" : "2013-09-16T16:47:13Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "9316110a42c370616cbb80ae3e1769534d04de10",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +1529,1533 @@        a = np.array([2, 3, 4, 1])\n        np.percentile(a, [50], overwrite_input=False)\n        assert_equal(a, np.array([2, 3, 4, 1]))\n\n        a = np.array([2, 3, 4, 1])"
  },
  {
    "id" : "d6593c91-e5c7-4584-8181-061fa23fdb3c",
    "prId" : 4358,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3027b10-81e1-4233-89d8-0e2cc0a88a03",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "seems to work with this variant but I'd like an explicit test for https://github.com/numpy/numpy/pull/3537#issuecomment-25486031 to make sure this does not get introduced by future changes\n",
        "createdAt" : "2014-02-24T17:28:26Z",
        "updatedAt" : "2014-03-23T19:33:34Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "4c3b482e-eaae-4f34-a3aa-67ff9ca1a5bb",
        "parentId" : "b3027b10-81e1-4233-89d8-0e2cc0a88a03",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yeah, I will add that test and maybe some more after training probably ;). (btw. sorry but some of the code changed a little while you reviewed basically, it just the broadcast_arrays calls being now single for both lists since it includes asarray anyway... probably premature optimization, too, but I don't think it hurts readibility)\n",
        "createdAt" : "2014-02-24T18:43:59Z",
        "updatedAt" : "2014-03-23T19:33:34Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "537bdae4-c570-4e94-95a0-71d59a243c87",
        "parentId" : "b3027b10-81e1-4233-89d8-0e2cc0a88a03",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK, updated and that test added. I had to reorganize things a bit unfortunately. Because the result type should treat scalars differently, I cannot move the `asarray` to `braodcast_arrays`.\nJust noticed, that this function has no support whatsoever of structured types. But the old one didn't have either, so I think this is for another day.\n",
        "createdAt" : "2014-02-24T22:09:40Z",
        "updatedAt" : "2014-03-23T19:33:34Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "123b319be37f01e3c4f2e42552d4ca121b27ca38",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +172,176 @@        assert_equal(len(choices), 3)\n        assert_equal(len(conditions), 3)\n\n    def test_broadcasting(self):\n        conditions = [np.array(True), np.array([False, True, False])]"
  },
  {
    "id" : "8656f7c6-3916-4f85-9357-c86b6c612b6a",
    "prId" : 4792,
    "prUrl" : "https://github.com/numpy/numpy/pull/4792#pullrequestreview-71017802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d1615b6-a6e8-4bb4-8291-07f226735142",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This doesn't make any sense. If `x` is 0d, the conditions should be 0d too, as `[True, False]`",
        "createdAt" : "2017-10-21T21:37:55Z",
        "updatedAt" : "2017-10-21T21:37:55Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "292b9ff538ea4950c7380c76cf65d1a5b108b75c",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1508,1512 @@\n        x = 5\n        y = piecewise(x, [[True], [False]], [1, 0])\n        assert_(y.ndim == 0)\n        assert_(y == 1)"
  },
  {
    "id" : "4d3e2934-a8e3-47e1-8433-bf109c58ab02",
    "prId" : 5614,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddde40e9-d68f-4e0d-805c-5f7e1e7d5106",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "almost equal? shouldn't those be exactly equal?\n",
        "createdAt" : "2015-02-27T17:59:13Z",
        "updatedAt" : "2015-02-27T17:59:13Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "b4e90666-dfad-49aa-8923-47fe9f95cb00",
        "parentId" : "ddde40e9-d68f-4e0d-805c-5f7e1e7d5106",
        "authorId" : "c4c04c9e-519b-4e97-b79a-9f5cb25a523a",
        "body" : "Just a guess, but maybe it has to do with differences between the C standard libraries in MSVC vs the ones in MinGW. I can verify that they are different on my machine though. Only on the order of about 1E-21.\n",
        "createdAt" : "2015-02-27T18:39:33Z",
        "updatedAt" : "2015-02-27T18:40:53Z",
        "lastEditedBy" : "c4c04c9e-519b-4e97-b79a-9f5cb25a523a",
        "tags" : [
        ]
      },
      {
        "id" : "5f376ed4-cc9c-46cf-bc5a-945ab485da07",
        "parentId" : "ddde40e9-d68f-4e0d-805c-5f7e1e7d5106",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "probably.\n",
        "createdAt" : "2015-02-27T18:40:04Z",
        "updatedAt" : "2015-02-27T18:40:04Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "d3a93ec0-9afe-4ecb-b321-6c62baef2b8d",
        "parentId" : "ddde40e9-d68f-4e0d-805c-5f7e1e7d5106",
        "authorId" : "c4c04c9e-519b-4e97-b79a-9f5cb25a523a",
        "body" : "Just a small follow up on this one, I think this is actually the [intel bug](https://randomascii.wordpress.com/2014/10/09/intel-underestimates-error-bounds-by-1-3-quintillion/) in fsin and fcos.\nIn the coments for that article there is some discussion about how msvc does not exibit this bug (though some other rounding inconsistencies are present). AFAICT, the sin/cos instructions in mingw are still just wrappers around fsin though, so they do exhibit the intel bug. This can be seen at the Python level by doing:\n\n```\nimport numpy as np\nimport sympy as sy\nimport math as ma\nprint sy.Float(np.pi, 100) + sy.Float(ma.sin(np.pi), 100)\nprint sy.Float(np.pi, 100) + sy.Float(np.sin(np.pi), 100)\n```\n\nThe first number printed is a much better approximation of pi than the second.\nThis would cause the error in the tests here when compiling with mingw for a python installation compiled with msvc, since the sin and cos functions in the math library come from msvc while the ones in mingw just wrap fsin and fcos.\n",
        "createdAt" : "2015-03-13T16:39:56Z",
        "updatedAt" : "2015-03-13T16:39:56Z",
        "lastEditedBy" : "c4c04c9e-519b-4e97-b79a-9f5cb25a523a",
        "tags" : [
        ]
      }
    ],
    "commit" : "444b5ac1eb8d0e2bfe548770af3ab8e6af846832",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +669,673 @@        r1 = f(args)\n        r2 = np.cos(args)\n        assert_array_almost_equal(r1, r2)\n\n    def test_keywords(self):"
  },
  {
    "id" : "e3974776-35d7-43ae-be2a-ab68928867f1",
    "prId" : 6129,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b22aa0a2-a2ef-48b4-bb02-fc6fd4a9cb62",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "Would like to have a test checking that `axis=None` does the same as `axis` not being provided.\n",
        "createdAt" : "2015-08-17T15:10:30Z",
        "updatedAt" : "2015-09-06T12:42:54Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc1990e770966535d188785cafaa3230c0a0377e",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +602,606 @@        assert_(np.all(num_error < 0.03) == True)\n\n    def test_specific_axes(self):\n        # Testing that gradient can work on a given axis only\n        v = [[1, 1], [3, 4]]"
  },
  {
    "id" : "aef896cf-19d9-4cce-80f8-906954286454",
    "prId" : 7129,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43238672-7cd0-4d90-a875-7bdc918a493f",
        "parentId" : null,
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "There does not appear to be any good reason to name the test otherwise than with the name of the function being tested in this case. Perhaps the function name changed at some point and the test was updated?\n",
        "createdAt" : "2016-01-27T16:06:19Z",
        "updatedAt" : "2016-02-01T01:04:15Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      },
      {
        "id" : "2cc88886-d357-4e7d-bf5b-10f3b1f0bc19",
        "parentId" : "43238672-7cd0-4d90-a875-7bdc918a493f",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Yes,I think this was ported from a scipy function with that name.\n",
        "createdAt" : "2016-01-27T16:30:39Z",
        "updatedAt" : "2016-02-01T01:04:15Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ec694b69a231a8de43032711c657d253edbed9d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2056,2060 @@\n\nclass TestPercentile(TestCase):\n\n    def test_basic(self):"
  },
  {
    "id" : "b3a018bb-cc20-44f8-93b0-a5e238d007ea",
    "prId" : 7346,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8612440-f310-4c63-b61c-64e5fea215f6",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Can leave out the blank lines.\n",
        "createdAt" : "2016-03-12T19:34:23Z",
        "updatedAt" : "2016-03-12T19:34:23Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7de401f5c9634a2a63eb8f44f2193be1a946191",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +59,63 @@        a = np.array([[[0, 1],\n                       [2, 3]],\n\n                      [[4, 5],\n                       [6, 7]]])"
  },
  {
    "id" : "53402ed3-3951-4608-8fac-3adba0a6be26",
    "prId" : 7346,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "952c4f84-796e-436f-a569-e06ba6829b8f",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "indentation off here and below in `b`.\n",
        "createdAt" : "2016-03-12T19:35:00Z",
        "updatedAt" : "2016-03-12T19:35:00Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7de401f5c9634a2a63eb8f44f2193be1a946191",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +89,93 @@        a = np.array([[[0, 1],\n                      [2, 3]],\n\n                     [[4, 5],\n                      [6, 7]]])"
  },
  {
    "id" : "05cf5dd3-124b-4363-957c-ac07a2fb2cc5",
    "prId" : 7382,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "852e25e8-97a8-486e-88ac-4b683a20b8fa",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Should that not be better as `assert_(type(np.average(a, weights=w)) is subclass)`?\n\nEDIT: Although that only works for new style classes. Hmm, assert_equal does seem to work properly there.\nEDIT: But not for old style classes either.\n",
        "createdAt" : "2016-03-07T20:00:00Z",
        "updatedAt" : "2016-03-07T20:10:07Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "3bd6aefa-b3db-424e-a503-1beb483b5052",
        "parentId" : "852e25e8-97a8-486e-88ac-4b683a20b8fa",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "It's not clear to me what `assert_equal` does for types, so maybe is ok, if not obvious.\n",
        "createdAt" : "2016-03-07T20:01:25Z",
        "updatedAt" : "2016-03-07T20:01:25Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ceab8f982d80c68b3b5e90697cd20df51f4a3e8",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +174,178 @@        w = np.array([[1,2],[3,4]]).view(subclass)\n\n        assert_equal(type(np.average(a, weights=w)), subclass)\n\n        # also test matrices"
  },
  {
    "id" : "b4ad9939-bcbd-4aaf-8fe5-260ea477bdb1",
    "prId" : 8348,
    "prUrl" : "https://github.com/numpy/numpy/pull/8348#pullrequestreview-29036920",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "543e9ec6-d6c9-4022-91e5-9b898e45dbb5",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Needs a test that `np.bincount([], minlength=0)` actually returns an empty list",
        "createdAt" : "2017-03-25T01:45:39Z",
        "updatedAt" : "2017-03-25T06:51:07Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec6d4295a80e5df235d3f5445e6425581309c930",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +2379,2383 @@        assert_array_equal(y, np.array([1, 2, 2, 2]))\n        y = np.bincount(x, minlength=0)\n        assert_array_equal(y, np.array([1, 2, 2, 2]))\n\n    def test_with_minlength_and_weights(self):"
  },
  {
    "id" : "6081c6b0-68f5-45c7-bb07-0a1ae160a218",
    "prId" : 8446,
    "prUrl" : "https://github.com/numpy/numpy/pull/8446#pullrequestreview-23266159",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61f126f8-54a3-4cfe-bbb4-b43c4a28dae3",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Not a fan of this heavy indentation. Why not:\r\n\r\n```\r\nbasic_test = {\r\n    50:   {'fd': 8,  'scott': 8,  'rice': 15, 'sturges': 14,\r\n           'auto': 14},\r\n    500:  {'fd': 15, 'scott': 16, 'rice': 32, 'sturges': 20,\r\n           'auto': 20},\r\n    5000: {'fd': 33, 'scott': 33, 'rice': 69, 'sturges': 27,\r\n           'auto': 33}\r\n}\r\n```",
        "createdAt" : "2017-02-22T10:34:53Z",
        "updatedAt" : "2017-02-22T10:34:53Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "aa6ec4f4-4f6e-4fa9-92de-d860a0b665ab",
        "parentId" : "61f126f8-54a3-4cfe-bbb4-b43c4a28dae3",
        "authorId" : "1a3779d3-314a-481f-b8f0-2fbed43338d0",
        "body" : "I believe it's just personal preference. If the point of splitting is not excessively reducing the space left before the EOL, I usually prefer to visually align to brackets since I believe it improves readability.\r\n\r\np.s. In my own code I would have kept the original despite the line length for readability",
        "createdAt" : "2017-02-22T11:12:09Z",
        "updatedAt" : "2017-02-22T11:12:09Z",
        "lastEditedBy" : "1a3779d3-314a-481f-b8f0-2fbed43338d0",
        "tags" : [
        ]
      },
      {
        "id" : "d2d87a5a-e995-45a2-84a1-f1f93402ad74",
        "parentId" : "61f126f8-54a3-4cfe-bbb4-b43c4a28dae3",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Alignment is actually not PEP8, but for test data it is often useful so we aren't quite as strict about it. That said, the non-aligned versions aren't as bad as one might think and one gets used to them.",
        "createdAt" : "2017-02-22T15:06:47Z",
        "updatedAt" : "2017-02-22T15:06:47Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "fa74d46c-26d4-426d-89d5-0640a099781f",
        "parentId" : "61f126f8-54a3-4cfe-bbb4-b43c4a28dae3",
        "authorId" : "1a3779d3-314a-481f-b8f0-2fbed43338d0",
        "body" : "@charris If I am not wrong, the alignment I used IS pep8 (https://www.python.org/dev/peps/pep-0008/#id17) (it is the first one presented).  \r\n",
        "createdAt" : "2017-02-22T15:46:53Z",
        "updatedAt" : "2017-02-22T15:46:53Z",
        "lastEditedBy" : "1a3779d3-314a-481f-b8f0-2fbed43338d0",
        "tags" : [
        ]
      },
      {
        "id" : "234b4fc7-4aa1-4c1d-8599-5fb2d9373bac",
        "parentId" : "61f126f8-54a3-4cfe-bbb4-b43c4a28dae3",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I was referring to the multiple spaces after the `:` to align the opening brackets. There isn't an example, but aligning on `=` and multiple spaces are both discouraged, so by extension...\r\n\r\nOT: I note on rereading PEP8 that breaking before binary operators is now preferred for new code. I don't recall that from before, but that would be my own preference. Unfortunately, the after recommendation remains for C code...",
        "createdAt" : "2017-02-22T16:27:23Z",
        "updatedAt" : "2017-02-22T16:27:23Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ea3d4972-7aad-43db-9e4b-89fd982702af",
        "parentId" : "61f126f8-54a3-4cfe-bbb4-b43c4a28dae3",
        "authorId" : "1a3779d3-314a-481f-b8f0-2fbed43338d0",
        "body" : "oh, I see now... sorry... I misinterpreted...  you are totally right on multiple spaces.\r\n\r\np.s. I like the before breaking too ;)",
        "createdAt" : "2017-02-22T16:35:51Z",
        "updatedAt" : "2017-02-22T16:35:51Z",
        "lastEditedBy" : "1a3779d3-314a-481f-b8f0-2fbed43338d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "9520de90837d0afaac3d1612047f4b952563b3d5",
    "line" : 262,
    "diffHunk" : "@@ -1,1 +1875,1879 @@                      5000: {'fd': 33, 'scott': 33, 'rice': 69,\n                             'sturges': 27, 'auto': 33}\n                     }\n\n        for testlen, expectedResults in basic_test.items():"
  },
  {
    "id" : "78487e49-ca31-4bc2-b602-e193f511fe41",
    "prId" : 8843,
    "prUrl" : "https://github.com/numpy/numpy/pull/8843#pullrequestreview-29067192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05ea76db-ef64-4599-83ed-9f292ad0f053",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "These test the better duplicate-axis detection",
        "createdAt" : "2017-03-26T10:46:53Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "17466ad1839718c091c629bb647e881b7922a148",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +2981,2985 @@        assert_raises(ValueError, np.percentile, d, axis=(1, 1), q=25)\n        assert_raises(ValueError, np.percentile, d, axis=(-1, -1), q=25)\n        assert_raises(ValueError, np.percentile, d, axis=(3, -1), q=25)\n\n    def test_keepdims(self):"
  },
  {
    "id" : "af5a5cd9-e734-4afb-b761-87ede4a89d27",
    "prId" : 8843,
    "prUrl" : "https://github.com/numpy/numpy/pull/8843#pullrequestreview-29067208",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "514717f8-c668-4dfd-8d89-bb9a245d8ccf",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "These exceptions were found by temporarily removing the base classes from `AxisError`, so that tests for `ValueError` and `IndexError` would not catch them.",
        "createdAt" : "2017-03-26T10:47:33Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "17466ad1839718c091c629bb647e881b7922a148",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +903,907 @@        assert_raises(TypeError, gradient, x, 1, 2, axis=1)\n\n        assert_raises(np.AxisError, gradient, x, axis=3)\n        assert_raises(np.AxisError, gradient, x, axis=-3)\n        # assert_raises(TypeError, gradient, x, axis=[1,])"
  },
  {
    "id" : "8bd31ab2-b7c5-426a-9416-ff43e8fa3cf3",
    "prId" : 8843,
    "prUrl" : "https://github.com/numpy/numpy/pull/8843#pullrequestreview-29071547",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10725229-7148-4f01-a72a-ef440c34ed08",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This used to error, and ideally it would still error for consistency with `ufunc.reduce`. But all the functions using `_ureduce` do not error in this situation, so we've already failed at consistency.\r\n\r\nPerhaps we should add a deprecation warning (in a future commit) about passing lists of axes?",
        "createdAt" : "2017-03-26T14:45:49Z",
        "updatedAt" : "2017-03-28T21:23:31Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "17466ad1839718c091c629bb647e881b7922a148",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +905,909 @@        assert_raises(np.AxisError, gradient, x, axis=3)\n        assert_raises(np.AxisError, gradient, x, axis=-3)\n        # assert_raises(TypeError, gradient, x, axis=[1,])\n        \n    def test_timedelta64(self):"
  },
  {
    "id" : "54c912ac-e3f9-4fc6-a3b8-37f17d32d240",
    "prId" : 9482,
    "prUrl" : "https://github.com/numpy/numpy/pull/9482#pullrequestreview-52930311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0e74c2e-9516-43f9-81b3-ef375215ec50",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Seems to me that this should maybe return a copy for consistency, but that's not relevant to this pr",
        "createdAt" : "2017-07-28T11:32:01Z",
        "updatedAt" : "2017-07-31T18:08:24Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "4e1ceae9-74e2-4f6f-8fca-c07fa1eec6a4",
        "parentId" : "d0e74c2e-9516-43f9-81b3-ef375215ec50",
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "The previous behavior is to return the object itself. I documented that and added a test, but I want to avoid making an API change. Instead of a copy, I would probably go with at least an application of `asanyarray`.",
        "createdAt" : "2017-07-28T13:31:42Z",
        "updatedAt" : "2017-07-31T18:08:24Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      }
    ],
    "commit" : "01fd010c6fd29a38b8013ba87c2fb89e8c4c7706",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +678,682 @@        output = [diff(x, n=n) for n in range(1, 5)]\n        expected = [[1, 1], [0], [], []]\n        assert_(diff(x, n=0) is x)\n        for n, (expected, out) in enumerate(zip(expected, output), start=1):\n            assert_(type(out) is np.ndarray)"
  },
  {
    "id" : "f3673687-7e7d-483c-9f15-707794f190b0",
    "prId" : 10872,
    "prUrl" : "https://github.com/numpy/numpy/pull/10872#pullrequestreview-110743240",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "077e0f62-d634-4d5b-9f18-9d62e45269fb",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Add a test for `axis=()`, which does no flips?\r\n\r\nedit: Thanks, looks good :)",
        "createdAt" : "2018-04-10T08:48:56Z",
        "updatedAt" : "2018-04-17T20:51:23Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d1d44fc120c451a4925720027e85c70e13c26f2",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +182,186 @@        assert_equal(np.flip(a), b)\n\n    def test_multiple_axes(self):\n        a = np.array([[[0, 1],\n                       [2, 3]],"
  },
  {
    "id" : "aae0cf2b-a476-4527-89d2-52302f7a2fc6",
    "prId" : 11977,
    "prUrl" : "https://github.com/numpy/numpy/pull/11977#pullrequestreview-185940135",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f86d1af0-1b27-42b2-875b-8c249e82332d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Any reason for this change?",
        "createdAt" : "2018-12-18T07:51:33Z",
        "updatedAt" : "2019-01-09T12:58:01Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f0afe875-e7bb-4ec0-bef6-d7b5a4a90993",
        "parentId" : "f86d1af0-1b27-42b2-875b-8c249e82332d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Nevermind, I see you imported `types` below",
        "createdAt" : "2018-12-18T07:52:25Z",
        "updatedAt" : "2019-01-09T12:58:01Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "82419c00ed41899990d8a0d332535d246edc4147",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +358,362 @@        typs = [('i4', 'i4', 'f8'), ('i4', 'f4', 'f8'), ('f4', 'i4', 'f8'),\n                 ('f4', 'f4', 'f4'), ('f4', 'f8', 'f8')]\n        for at, wt, rt in typs:\n            a = np.array([[1,2],[3,4]], dtype=at)\n            w = np.array([[1,2],[3,4]], dtype=wt)"
  },
  {
    "id" : "5732be6c-3a9c-4f7a-b809-a0634a4d9c8a",
    "prId" : 12679,
    "prUrl" : "https://github.com/numpy/numpy/pull/12679#pullrequestreview-189643177",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa7d800e-2f0c-4026-bfc0-cf3f774efa1e",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "@seberg this test uses an empty array",
        "createdAt" : "2019-01-06T20:31:49Z",
        "updatedAt" : "2019-01-06T20:31:49Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "bd249136-bf3a-4de0-ab72-99456ed68d6b",
        "parentId" : "fa7d800e-2f0c-4026-bfc0-cf3f774efa1e",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Sorry, nvm. had thought about it a bit earlier and forgot again ;). All fine for sure length 0 would still have a division by zero. And things such as `+inf - inf` already warn during the `sum` step I would assume at least.",
        "createdAt" : "2019-01-06T20:33:16Z",
        "updatedAt" : "2019-01-06T20:33:17Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "217f13b955df24ba3314802071dd04b1262e1320",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +2963,2967 @@\n    def test_empty(self):\n        # mean(empty array) emits two warnings: empty slice and divide by 0\n        a = np.array([], dtype=float)\n        with warnings.catch_warnings(record=True) as w:"
  },
  {
    "id" : "b960238b-1ec1-4bb7-a545-e12788062b5b",
    "prId" : 12989,
    "prUrl" : "https://github.com/numpy/numpy/pull/12989#pullrequestreview-206876659",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea474b8c-0901-4309-a931-18cd27591804",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This test is the new one that failed on the other branch",
        "createdAt" : "2019-02-20T16:50:07Z",
        "updatedAt" : "2019-02-24T23:48:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "155d8f0f-ddd4-468f-b8a2-09e646883241",
        "parentId" : "ea474b8c-0901-4309-a931-18cd27591804",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "That was similar to some of the things I was considering, but overall I am not sure I am too worried. At some point floating point ranges get wonky anyway. E.g. as soon as the distance of both sides are infinite (and not exactly one of them is finite), things get awkward unless the numbers are identical. I do not think there is a way around this, so I was starting to think there are simply some things we should accept as floating point precision errors.",
        "createdAt" : "2019-02-20T18:45:21Z",
        "updatedAt" : "2019-02-24T23:48:13Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "ab7961f9-fd78-4061-8e3c-31f1dc95b3ac",
        "parentId" : "ea474b8c-0901-4309-a931-18cd27591804",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> things get awkward unless the numbers are identical.\r\n\r\nCorrect. My original strategy was to try and reason about this awkwardness, which missed this case, and probably some others.\r\n\r\nThe new strategy is based on the assumption that floating point math will never give a finite result if the operation is not well defined, and so there's no harm in trying a bunch of different formulations until we find a finite one.",
        "createdAt" : "2019-02-21T06:05:00Z",
        "updatedAt" : "2019-02-24T23:48:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "bce91901-ca61-49fb-bc16-130248e6b45a",
        "parentId" : "ea474b8c-0901-4309-a931-18cd27591804",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yeah, this is good, thanks for keeping poking it. If there are remaining holes, I do not think they can be avoided, and these changes make all things with infinities correct as far as I can see.\r\n\r\nShould we short release notes? I can do that as well though.",
        "createdAt" : "2019-02-21T14:38:46Z",
        "updatedAt" : "2019-02-24T23:48:13Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "5be749e8-6486-4c56-a501-b3e47ffeb196",
        "parentId" : "ea474b8c-0901-4309-a931-18cd27591804",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Release notes wouldn't be a bad idea. \"better handling of non-finite values in `interp`\" or something under improvements.\r\n\r\nI'm not really sure whether to consider this a bug fix or an enhancement.",
        "createdAt" : "2019-02-22T08:11:16Z",
        "updatedAt" : "2019-02-24T23:48:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5c47d98f-8af3-44ff-9205-f00f294c2a0e",
        "parentId" : "ea474b8c-0901-4309-a931-18cd27591804",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Hmm, good point. That sounds good for the notes. Now that you are asking, my gut feeling is a slight preference for enhancement.",
        "createdAt" : "2019-02-22T15:27:59Z",
        "updatedAt" : "2019-02-24T23:48:13Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0139a2d118ddfcff5a0139a016be826dbc44854f",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +2403,2407 @@\n        # unless the y values are equal\n        assert_equal(np.interp(0.5, [-np.inf, +np.inf], sc([     10,      10])), sc(10))\n\n    def test_non_finite_half_inf_xf(self, sc):"
  },
  {
    "id" : "8a38483f-ad71-410b-8543-b525bec0abdb",
    "prId" : 15804,
    "prUrl" : "https://github.com/numpy/numpy/pull/15804#pullrequestreview-379591717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11a08377-a1cf-414b-9fb9-da68fba3210a",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm pretty sure I made a mistake in this patch, I'd expect this to produce one fewer warning, yet it appears to pass.",
        "createdAt" : "2020-03-23T16:01:43Z",
        "updatedAt" : "2020-03-23T16:01:44Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3af52126-032c-402a-9110-05166b954d15",
        "parentId" : "11a08377-a1cf-414b-9fb9-da68fba3210a",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Hmmm, strange, then why did this not fail? There are two `delete` calls in there, but the FutureWarning that is being detected here must not be the one that you deleted. Maybe something completely unrelated?",
        "createdAt" : "2020-03-23T16:16:45Z",
        "updatedAt" : "2020-03-23T16:16:46Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "58fa38a7-5206-49d0-a909-10c499dd0dc1",
        "parentId" : "11a08377-a1cf-414b-9fb9-da68fba3210a",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Wait, below the boolean index still gives a futurewarning right? And there are two calls of `delete`. So I guess it should have checked the warnings 4 times, or reset in between the two checks simply. Seems fair enough, the boolean fixup just needs to delete it all.\r\n\r\nEDIT: Nvm. I see you already opened a PR to that effect.",
        "createdAt" : "2020-03-23T16:19:24Z",
        "updatedAt" : "2020-03-23T16:20:39Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "68563e997aab1208c71efec5698c24214d840cda",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +831,835 @@        with warnings.catch_warnings(record=True) as w:\n            warnings.filterwarnings('always', category=FutureWarning)\n            self._check_inverse_of_slicing([0, -1, 2, 2])\n            obj = np.array([True, False, False], dtype=bool)\n            self._check_inverse_of_slicing(obj)"
  },
  {
    "id" : "e9edc5cc-5734-4762-8d17-c3329505d370",
    "prId" : 16239,
    "prUrl" : "https://github.com/numpy/numpy/pull/16239#pullrequestreview-415361859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5213c4f-18dd-4780-9e14-95fc95c1c959",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "This fails on PyPy since `np.ndarray.flat.__doc__` is None. Skipping would be the easiest fix I guess",
        "createdAt" : "2020-05-20T12:35:04Z",
        "updatedAt" : "2020-05-20T13:55:57Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "18c6537e-d3f4-4872-9238-e55702f42a26",
        "parentId" : "b5213c4f-18dd-4780-9e14-95fc95c1c959",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Thanks... dang, I had lost the fixups for this file in the rebase and forgot about this one...",
        "createdAt" : "2020-05-20T13:56:22Z",
        "updatedAt" : "2020-05-20T13:56:22Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ffdce8b4ddf725d9f4329a745d6bfad9b5716774",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +3371,3375 @@    @pytest.mark.skipif(sys.flags.optimize == 2, reason=\"Python running -OO\")\n    @pytest.mark.skipif(IS_PYPY, reason=\"PyPy does not modify tp_doc\")\n    def test_add_same_docstring(self):\n        # test for attributes (which are C-level defined)\n        np.add_docstring(np.ndarray.flat, np.ndarray.flat.__doc__)"
  },
  {
    "id" : "e2282a43-b0b3-4e66-bb4b-73b04f0f886c",
    "prId" : 16248,
    "prUrl" : "https://github.com/numpy/numpy/pull/16248#pullrequestreview-453585358",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe8b2c6a-ebad-43f8-90ad-ba297e9ed0e3",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "At least one of these should use kwargs to make the use clear\r\n```suggestion\r\n        assert_array_equal(digitize(x, bins, right=False, edge=True), [1, 2, 3, 3])\r\n```",
        "createdAt" : "2020-07-22T17:53:39Z",
        "updatedAt" : "2020-07-22T19:00:03Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "f9193ae8-b002-4d2f-ac3b-b6d79de86003",
        "parentId" : "fe8b2c6a-ebad-43f8-90ad-ba297e9ed0e3",
        "authorId" : "d70f184b-e65a-4e08-9161-1298fccd0c39",
        "body" : "The way it is now is stylistically consistent, I would put that in another PR that addresses style if you want it to look like that.",
        "createdAt" : "2020-07-22T18:39:17Z",
        "updatedAt" : "2020-07-22T19:00:03Z",
        "lastEditedBy" : "d70f184b-e65a-4e08-9161-1298fccd0c39",
        "tags" : [
        ]
      }
    ],
    "commit" : "325fbe4c90b0f499ccbd7750bd628dc8cebbcfbc",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1714,1718 @@        assert_array_equal(digitize(x, bins, True), [3, 3, 2, 0])\n        bins = [-1, 0, 1, 2]\n        assert_array_equal(digitize(x, bins, False, True), [1, 2, 3, 3])\n        assert_array_equal(digitize(x, bins, True, True), [1, 1, 2, 3])\n        bins = [2, 1, 0, -1]"
  },
  {
    "id" : "76cb439d-625b-4c7a-aa74-63e1dc9cb85f",
    "prId" : 16273,
    "prUrl" : "https://github.com/numpy/numpy/pull/16273#pullrequestreview-418617739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a19b2798-562f-4cf0-b8f3-dd022f70da83",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```suggestion\r\n        # double subtraction is needed to remove the extra precision that t < 0.5 has\r\n        assert np.lib.function_base._lerp(a, b, 1 - (1 - t)) == np.lib.function_base._lerp(b, a, 1 - t)\r\n```",
        "createdAt" : "2020-05-26T19:33:19Z",
        "updatedAt" : "2020-06-12T21:36:44Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "88acbc852eeb73edd0d09c773f125725c8a0587b",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +3168,3172 @@    def test_lerp_symmetric(self, t, a, b):\n        # double subtraction is needed to remove the extra precision that t < 0.5 has\n        assert np.lib.function_base._lerp(a, b, 1 - (1 - t)) == np.lib.function_base._lerp(b, a, 1 - t)\n\n    def test_lerp_0d_inputs(self):"
  },
  {
    "id" : "236486f6-2b55-4879-9473-164e5321574b",
    "prId" : 16699,
    "prUrl" : "https://github.com/numpy/numpy/pull/16699#pullrequestreview-438724420",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbeceee9-c906-41d6-bd20-1fee67b46801",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "The main fix, `np.float` is making tests trip on master currently.",
        "createdAt" : "2020-06-27T20:58:24Z",
        "updatedAt" : "2020-06-27T20:58:24Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae09a5291ffc052b4444fba6f353c5020af6661e",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +3118,3122 @@\n    @hypothesis.given(\n            arr=arrays(dtype=np.float64,\n                       shape=st.integers(min_value=3, max_value=1000),\n                       elements=st.floats(allow_infinity=False, allow_nan=False,"
  },
  {
    "id" : "58dce397-68e2-4341-8c81-cf08bd053eae",
    "prId" : 16987,
    "prUrl" : "https://github.com/numpy/numpy/pull/16987#pullrequestreview-487686043",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab2f28ed-0323-4f34-a877-d9fc057723aa",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Isn't this diff allowed to be `= 255`? In general I'd be wary of tests using `rand`, because a badly written test causes CI failures at an unknown point in the future, rather than immediately.",
        "createdAt" : "2020-09-11T16:22:35Z",
        "updatedAt" : "2021-02-16T09:25:44Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3b52d7eb-b703-4385-b64b-cddd91bf9ad8",
        "parentId" : "ab2f28ed-0323-4f34-a877-d9fc057723aa",
        "authorId" : "cf119eca-4ec8-4a65-841c-55565e365f41",
        "body" : "This is a test I copy-and-pasted from the old PR and just adopted it to the new parameter names. I have to say, I don't really like it. Let's change that maybe.\r\n\r\nMy understanding was that this test should ensure that the correction is not too large, e.g. if a correction of 4 pi is needed, there should not be a correction of 6 pi, or so. But not so sure.\r\nRegarding your question of the diff being `=255`, I think, that should not be the case. Let's say the period is `2 pi`, after unwrapping there must not be a jump larger than `pi`. So jumps of `2 pi` are not allowed.",
        "createdAt" : "2020-09-14T12:07:09Z",
        "updatedAt" : "2021-02-16T09:25:44Z",
        "lastEditedBy" : "cf119eca-4ec8-4a65-841c-55565e365f41",
        "tags" : [
        ]
      }
    ],
    "commit" : "8bdeaebe0c82590a135d5b815fa41ffda0b9a9dd",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +1762,1766 @@        assert_array_equal(unwrap([1, 1 + 256], period=255), [1, 2])\n        # check that unwrap maintains continuity\n        assert_(np.all(diff(unwrap(rand(10) * 1000, period=255)) < 255))\n        # check simple case\n        simple_seq = np.array([0, 75, 150, 225, 300])"
  },
  {
    "id" : "ee24bd33-d095-42de-91d6-d065fcf3fecc",
    "prId" : 17062,
    "prUrl" : "https://github.com/numpy/numpy/pull/17062#pullrequestreview-465474971",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c286f14-5537-4dae-854f-8d3eb0496674",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```suggestion\r\n        # need at least one test above 8, as the implementation is piecewise\r\n        A = np.array([0.49842636, 0.6969809, 0.22011976, 0.0155549, 10.0])\r\n```",
        "createdAt" : "2020-08-11T22:36:41Z",
        "updatedAt" : "2020-08-11T22:40:45Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a480539b136d6654b602d548cbc4d12cdf67c933",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2098,2102 @@\n        # need at least one test above 8, as the implementation is piecewise\n        A = np.array([0.49842636, 0.6969809, 0.22011976, 0.0155549, 10.0])\n        expected = np.array([1.06307822, 1.12518299, 1.01214991, 1.00006049, 2815.71662847])\n        assert_almost_equal(i0(A), expected)"
  },
  {
    "id" : "51e55ea0-cf54-4c6e-90bf-82ae59141d2d",
    "prId" : 17171,
    "prUrl" : "https://github.com/numpy/numpy/pull/17171#pullrequestreview-476988809",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2e6e953-8e3d-4f0f-8448-a53fb7a2961c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I assume this test does not pass on master?",
        "createdAt" : "2020-08-27T17:12:38Z",
        "updatedAt" : "2020-08-27T17:12:38Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "709e46c7-5cf3-4a4b-8281-b4f9c1c51a37",
        "parentId" : "f2e6e953-8e3d-4f0f-8448-a53fb7a2961c",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "It does as `self.a` is just a normal 1D array of integers.\r\n\r\nHowever, there is currently no test which checks the return type so I feel this is a nice addition.",
        "createdAt" : "2020-08-27T17:18:26Z",
        "updatedAt" : "2020-08-27T17:18:27Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "40ad39ff-50cf-4d83-a8f3-950282b2eb0b",
        "parentId" : "f2e6e953-8e3d-4f0f-8448-a53fb7a2961c",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm trying to work out whether this is a case of @mattip generally wishing to reseal the can of worms, or if there was a specific worm that we knew was an incompatibility.",
        "createdAt" : "2020-08-27T17:21:53Z",
        "updatedAt" : "2020-08-27T17:21:53Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "de430261-1af5-4cdf-84fe-09832836efe1",
        "parentId" : "f2e6e953-8e3d-4f0f-8448-a53fb7a2961c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Mainly seal the can of worms.  I am a bit dubious if the new implementation actually achieves what it promises, personally.  (Depending on the use-case, you may be stripping only one value from a very large array, making the old code much faster. OTOH, maybe that use-case doesn't actually matter since in almost all cases the work done on the result will be much slower anyway.)\r\n\r\nIf you are fairly certain the updated version seals it well, I think we can go with that as well.  I had never looked very carefully, but it seemed a bit hard to be sure previously, and `trim_zeros` seemed a bit niche to worry about much...",
        "createdAt" : "2020-08-27T17:33:59Z",
        "updatedAt" : "2020-08-27T17:34:00Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "e7ed14b9-a9e0-4330-858a-aa9f6df56b58",
        "parentId" : "f2e6e953-8e3d-4f0f-8448-a53fb7a2961c",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "The PR reverts the code to its state before the first PR gh-16911. I added the passing test to cover a use case that previously was not tested.",
        "createdAt" : "2020-08-27T18:44:55Z",
        "updatedAt" : "2020-08-27T18:44:55Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "051198414ba1e2c3e56919013d4d4372c34aa994",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1228,1232 @@    def test_list_to_list(self):\n        res = trim_zeros(self.a.tolist())\n        assert isinstance(res, list)\n\nclass TestExtins:"
  }
]