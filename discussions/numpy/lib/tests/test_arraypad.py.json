[
  {
    "id" : "22874eed-54cc-4873-8115-638414a5be1b",
    "prId" : 3329,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76a266ce-f829-43df-a8cb-38e4c372a6f1",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, was the previous result incorrect?\n",
        "createdAt" : "2013-05-12T15:04:01Z",
        "updatedAt" : "2013-05-19T19:38:27Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "41c118f0-3b7c-4c31-9e1b-555139adc3c4",
        "parentId" : "76a266ce-f829-43df-a8cb-38e4c372a6f1",
        "authorId" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "body" : "In the changed regions, the mean of 5 and 6 was calculated thanks to `stat_length=2`. In IEEE correct rounding (NumPy standard), 5.5 should round to 6, however, in the prior function the calculations were carried out and immediately _cast_ into the original dtype (akin to `arr.astype(np.int32)`). The casting operation truncates like `np.floor` instead of rounding properly, resulting in systematic error in the rounded regions. It's pure luck that more didn't need to be changed; the block of 4s on the left is rounded down from 4.5 in the IEEE standard, thus truncation is equivalent there.\n\nI believe this is the correct way to do it, but if truncating/direct casting was _desired_ for some reason the previous version could be considered correct in its own way.\n",
        "createdAt" : "2013-05-12T18:45:42Z",
        "updatedAt" : "2013-05-19T19:38:27Z",
        "lastEditedBy" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "tags" : [
        ]
      }
    ],
    "commit" : "246c06d2475718ec36ba193494444464e497c69a",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +179,183 @@        a = pad(a, (5, 7), 'mean', stat_length=2)\n        b = np.array([\n                   [4, 4, 4, 4, 4,   4, 5, 6,   6, 6, 6, 6, 6, 6, 6],\n                   [4, 4, 4, 4, 4,   4, 5, 6,   6, 6, 6, 6, 6, 6, 6],\n                   [4, 4, 4, 4, 4,   4, 5, 6,   6, 6, 6, 6, 6, 6, 6],"
  },
  {
    "id" : "484202f5-1341-409a-8ad4-976f3e41a8e6",
    "prId" : 5361,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The formatting of the test results is clear, but it is going to make for a lot of PEP8 violations.\n\n```\n36      E201 whitespace after '['\n30      E203 whitespace before ','\n499     E241 multiple spaces after ','\n```\n\nI wonder if there is another way to express the results that is as clear but doesn't have this problem? For instance, this could be\n\n```\nb = np.array([10]*25 + list(range(1,101)) + [100]*20)\n```\n",
        "createdAt" : "2015-01-05T19:37:29Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "39c41a09-7c59-46b9-bb62-aa878b387aa6",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Or even\n\n```\nb = np.array([10]*25 + list(a) + [100]*20)\n```\n",
        "createdAt" : "2015-01-05T19:40:25Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c0b5d450-e3f5-45ae-b6d8-220550ed856c",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "body" : "This entire file has been a PEP8 disaster since before I started working with `pad`. That said, I maintained the format for consistency and because PEP8 says to ignore itself judiciously.\n\nSome of the simpler rank-1 examples could be collapsed, but others (e.g., linear ramp mode and the corners for all 2D tests) will be challenging to simplify. For those I fear changes might harm maintainability by making the expected changes unclear...\n\nWithout 'fixing' all of them there will still be PEP8 exceptions. Is it worth changing the easy targets vs. maintaining a consistent syntax throughout the tests?\n",
        "createdAt" : "2015-01-05T20:01:01Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "tags" : [
        ]
      },
      {
        "id" : "193cbdfc-0b35-4d4f-8208-853184d8d758",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Agree about the 2-D cases. Might get a start with the easy ones and we can take a longer look at the others after. It would be nice if there was an easy way to tell PEP8 to just ignore some functions. Something to think about. In this particular case I think the alternative is actually clearer, as I had to count the number of repetitions of the fill values to check what was going on. Another alternative is to simply collapse the arrays to PEP8 form once we are sure that they are correct. It isn't as bad in practice as it sounds.\n",
        "createdAt" : "2015-01-05T20:19:26Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "821ea8a7-caad-490d-b6be-ab50c04f669f",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "body" : "Judicious ignorance is _exactly_ what PEP8 needs!\n\nRank 2+ arrays with variable precision / significant figures just can't be displayed in a way that makes PEP8 happy and is human-readable.\n",
        "createdAt" : "2015-01-07T01:55:08Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "tags" : [
        ]
      },
      {
        "id" : "76220161-f41a-494f-b901-077fce0996c1",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "body" : "@charris I feel obliged to point out that the recommended\n\n``` python\nb = np.array([10]*25 + list(a) + [100]*20)\n```\n\nactually violates PEP8 by lacking spaces around the `*` operators. That said, I believe the grouping without spaces is clearer...\n",
        "createdAt" : "2015-01-07T01:58:43Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "tags" : [
        ]
      },
      {
        "id" : "a0cf6556-a3d7-4185-97a4-db8dc99431ed",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "body" : "Fully PEP8 compliant options\n\n``` python\nb = np.array([10] * 25 + list(a) + [100] * 20)\n```\n\n``` python\nb = np.array([10] * 25 + \n             list(a) + \n             [100] * 20)\n```\n",
        "createdAt" : "2015-01-07T02:02:20Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "tags" : [
        ]
      },
      {
        "id" : "6f75e4fd-f14b-465d-ad6b-3b7b2b891e48",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "body" : "It seems to be a common misconception, but spaces around _all_ binary operators is not in PEP 8.  Take a look at https://www.python.org/dev/peps/pep-0008/#other-recommendations, and note the examples under \"Yes\".\n",
        "createdAt" : "2015-01-07T02:15:55Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "tags" : [
        ]
      },
      {
        "id" : "4515c6c3-9414-474e-92e8-bc4b24691ecc",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "body" : "I favor the latter, because later on you end up with stuff like this\n\n``` python\nb = np.array((a[25:0:-1] * -1).tolist() +\n             list(a) +\n             (99 + 100 - a[-2:-22:-1]).tolist())\n```\n\nfrom `TestReflect.test_check_odd_method`.\n\nI'm really not sure that's better than spelling out the array, and it's only 1D.\n",
        "createdAt" : "2015-01-07T02:24:25Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "tags" : [
        ]
      },
      {
        "id" : "2319e35a-ded0-4e83-9e4c-58f5e9262fb8",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "We ignore a lot of things turned up by running pep8\n\n```\ncharris@localhost [~]$ cat .config/pep8\n[pep8]\nmax_line_length=79\nstatistics = True\nignore = E121,E122,E123,E125,E126,E127,E128,E226,E231,E265,E302,E501,E712,W291,W293,W391\n```\n",
        "createdAt" : "2015-01-07T02:33:02Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2217af91-5b7d-45c6-861b-726de80ad227",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "You don't need to do the PEP8 stuff, it's just that I know that someday I'll need to figure out how to deal with it ;)\n",
        "createdAt" : "2015-01-07T02:40:27Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "1d108073-69c6-4ba1-9a33-49e30a34e831",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "body" : "@WarrenWeckesser Holy smokes, you're right! I need to find a PEP8 checker that's smart enough to handle those cases, because the one I've been using flags them all.\n",
        "createdAt" : "2015-01-07T03:03:49Z",
        "updatedAt" : "2015-01-07T03:03:49Z",
        "lastEditedBy" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "tags" : [
        ]
      }
    ],
    "commit" : "29464a96941b61b91d703dc20c3f426466df0c2a",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +126,130 @@        assert_array_equal(a, b)\n\n    def test_check_maximum_stat_length(self):\n        a = np.arange(100) + 1\n        a = pad(a, (25, 20), 'maximum', stat_length=10)"
  },
  {
    "id" : "f9b8b9ce-9e1e-4bec-86fa-fccf06296c19",
    "prId" : 9640,
    "prUrl" : "https://github.com/numpy/numpy/pull/9640#pullrequestreview-60160925",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee8c00f5-c1cd-45df-ba31-f9a01283227e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you add a test of the allowed case too?",
        "createdAt" : "2017-09-01T14:33:43Z",
        "updatedAt" : "2017-09-01T16:53:45Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c46e1077-6261-4981-8038-027e3a643d41",
        "parentId" : "ee8c00f5-c1cd-45df-ba31-f9a01283227e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`pad(np.zeros((0, 3)), ((0,), (1,)), mode='reflect')` would do, I think?",
        "createdAt" : "2017-09-01T14:50:55Z",
        "updatedAt" : "2017-09-01T16:53:45Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "53282a15-7a94-462d-b791-187f0a4b398d",
        "parentId" : "ee8c00f5-c1cd-45df-ba31-f9a01283227e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Might want to assert the new shape too.",
        "createdAt" : "2017-09-01T14:54:10Z",
        "updatedAt" : "2017-09-01T16:53:45Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "00eaf9b2-2968-43d9-afe4-342bfaa98365",
        "parentId" : "ee8c00f5-c1cd-45df-ba31-f9a01283227e",
        "authorId" : "724da59f-009b-4586-9396-830b3bb3c27b",
        "body" : "I do not think it should go into `TestValueError` test suite, so I have added this exact case to `TestReflect` .",
        "createdAt" : "2017-09-01T15:02:03Z",
        "updatedAt" : "2017-09-01T16:53:45Z",
        "lastEditedBy" : "724da59f-009b-4586-9396-830b3bb3c27b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6bbd74bc1158a59eaa0c2e20fe2f66c52f07fb6",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1023,1027 @@        assert_raises(ValueError, pad, np.ndarray(0), 4, mode='reflect')\n        assert_raises(ValueError, pad, np.zeros((0, 3)), ((1,), (0,)),\n                      mode='reflect')\n\n"
  },
  {
    "id" : "af15e441-f4f6-47f2-8fb8-a5206dc0d8a4",
    "prId" : 11358,
    "prUrl" : "https://github.com/numpy/numpy/pull/11358#pullrequestreview-205475978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72b29598-b828-4d9c-a1c8-cbf36ce0fa97",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Hmmm, the difference seems to be due to the order of tests/parameterization. I am not sure that is an actual issue, and I am a bit confused as to why it should only show up here, since I would think the dictionary keys are always random order. My guess is that adding a `sorted(...)` would fix it, I am not sure that is nice though.\r\n\r\nEDIT: this is the shippable test failure.",
        "createdAt" : "2019-02-19T16:35:57Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "7b7d1c2d-018f-478a-8797-e3d072257bfb",
        "parentId" : "72b29598-b828-4d9c-a1c8-cbf36ce0fa97",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "Please change the parametrization on the test(s) to have a sorted order, yes. The Shippable tests are running on more than 1 core & the parallel orchestration mechanism used by xdist doesn't like the lack of ordering.\r\n\r\nThere are a bunch of pytest-xdist issues floating around about this, and maybe someday pytest-xdist will be able to handle this, but not yet.",
        "createdAt" : "2019-02-19T17:36:29Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "7705de15-0987-4826-9950-2eb749af7d36",
        "parentId" : "72b29598-b828-4d9c-a1c8-cbf36ce0fa97",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "@lagru, I realize that it only was an issue here, but to me it seems like this should also occur for the other uses of `_all_modes`, so maybe we should make `_all_modes` a `collection.OrderedDict`, or is that one fine @tylerjereddy? I am a bit surprised this doesn't occur elsewhere, but...",
        "createdAt" : "2019-02-19T19:51:13Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "df58748c-3ec0-4244-a616-eca1bf842ee4",
        "parentId" : "72b29598-b828-4d9c-a1c8-cbf36ce0fa97",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "@seberg That's indeed strange. On the danger of saying something stupid or obvious: the shippable configuration seems to use Python 3.7 [which guarantees that dictionaries are ordered](https://mail.python.org/pipermail/python-dev/2017-December/151283.html) (and likely their key-views as well?). If that assumption is correct, not using an OrderedDict would only be an issue for a CI-setup that uses an older Python version (3.5, I think 3.6 was ordered as well but not yet official) together with pytest-xdist...",
        "createdAt" : "2019-02-19T20:06:21Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      },
      {
        "id" : "b1078839-ff98-4b98-9166-d4c46320f770",
        "parentId" : "72b29598-b828-4d9c-a1c8-cbf36ce0fa97",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Ah, might be going back and forth with python versions whether or not it works, so maybe if 3.7 is fine and we are using 3.7 we are unlikely to go to an older version which might create issues.",
        "createdAt" : "2019-02-19T20:39:14Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "851fdf94-bef0-4b49-9abf-3583427cdb18",
        "parentId" : "72b29598-b828-4d9c-a1c8-cbf36ce0fa97",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "`_all_modes.keys()` returns a `dict_keys` object (view) which allows set operations. Subtracting the set `{\"constant\", \"empty\"}` seems to produce a `set` object. My guess is that because `set` is not an ordered type, `pytest-xdist`detects the inconsistency for the parallell workflow.\r\n\r\nThe dictionary was probably already \"sorted\" according to insertion order since it was tested in Python 3.7, so it is really the sorting of the `set` object (and its conversion to a `list` which retains the sorting) that likely solves the issue here.\r\n\r\nThat's probably also why the other `_all_modes` uses are just fine -- those are just iterators that preserve the original dictionary insertion order.\r\n\r\nOf course, there have been arguments that I shouldn't have used `xdist` in the CI--if it becomes a big issue we can turn off parallel tests. I think this has been done for some platforms / CI infrastructures, but has mostly worked quite well on Shippable for some time now, so maybe this set parametrization thing is rare enough that we can live with converting to a sorted list in the those rare cases where we do that.",
        "createdAt" : "2019-02-19T21:53:00Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "08176a0b-cf6f-477c-9bfe-c8bbbd314afe",
        "parentId" : "72b29598-b828-4d9c-a1c8-cbf36ce0fa97",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Sounds like this is all good with the `sorted` in this one place then.",
        "createdAt" : "2019-02-19T22:02:07Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a94a398a751ab6e55a01a6e23f2649ea08f1f0",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +835,839 @@        \"mode\", sorted(_all_modes.keys() - {\"constant\", \"empty\"})\n    )\n    def test_pad_empty_dimension(self, mode):\n        match = (\"can't extend empty axis 0 using modes other than 'constant' \"\n                 \"or 'empty'\")"
  },
  {
    "id" : "f389252f-a636-439b-be27-33a20827f6f4",
    "prId" : 11396,
    "prUrl" : "https://github.com/numpy/numpy/pull/11396#pullrequestreview-133414136",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb5c5ec0-d697-43a1-99b9-ac059a4bc96a",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Deeply weird style, but I can't fault you for copying what was already in this file",
        "createdAt" : "2018-06-30T03:32:27Z",
        "updatedAt" : "2018-06-30T03:32:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "626210fb67bb6cc92ca4d25d90bea5110ba3a026",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1020,1024 @@                 'reflect',\n                 'wrap',\n                 ]\n        for mode in modes:\n            assert_array_equal(pad(a, pad_amt, mode=mode), b)"
  },
  {
    "id" : "5a253fab-a5a7-4b62-b9c9-09fd5460beb2",
    "prId" : 12789,
    "prUrl" : "https://github.com/numpy/numpy/pull/12789#pullrequestreview-193895342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd33122a-9b06-464f-8179-524f10d03a0b",
        "parentId" : null,
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "At some point it made sense to introduce this global variable to avoid duplication. ",
        "createdAt" : "2019-01-17T23:44:17Z",
        "updatedAt" : "2019-02-14T14:35:07Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ac67e768b940e4733a6085fa5ba34af385f1b93",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +11,15 @@\n\n_all_modes = {\n    'constant': {'constant_values': 0},\n    'edge': {},"
  },
  {
    "id" : "f96ce32c-e291-4522-9aa2-7ab64c28da53",
    "prId" : 12789,
    "prUrl" : "https://github.com/numpy/numpy/pull/12789#pullrequestreview-202873380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "788c187d-6606-451d-a761-c00affa6478a",
        "parentId" : null,
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "Using `parametrize` instead of for loops makes the code more readable but really bloats the number of unit tests and thus the output of pytest. What's the general preference here?",
        "createdAt" : "2019-01-17T23:48:07Z",
        "updatedAt" : "2019-02-14T14:35:07Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      },
      {
        "id" : "7253f9e4-30d7-4753-b0aa-bf1368409d55",
        "parentId" : "788c187d-6606-451d-a761-c00affa6478a",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I think we tend to use parameterize now. If it really does bloat output too much, maybe we can also ask pytest to add some nobs to help.",
        "createdAt" : "2019-02-12T19:21:41Z",
        "updatedAt" : "2019-02-14T14:35:07Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "e019594c-e4f8-40c0-a1af-431c4b27eaca",
        "parentId" : "788c187d-6606-451d-a761-c00affa6478a",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "Okay, good to know. ",
        "createdAt" : "2019-02-12T19:49:49Z",
        "updatedAt" : "2019-02-14T14:35:07Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ac67e768b940e4733a6085fa5ba34af385f1b93",
    "line" : 582,
    "diffHunk" : "@@ -1,1 +1164,1168 @@        ((3, 4, 5), (0, 1, 2)),\n    ])\n    @pytest.mark.parametrize(\"mode\", _all_modes.keys())\n    def test_misshaped_pad_width(self, pad_width, mode):\n        arr = np.arange(30).reshape((6, 5))"
  },
  {
    "id" : "c0c3efe3-2724-4f9c-9243-4e7661b840ec",
    "prId" : 12789,
    "prUrl" : "https://github.com/numpy/numpy/pull/12789#pullrequestreview-204411079",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cde56b7-26f3-4d3b-b5dc-1af5b0bddf98",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "tests are failing, it seems the message or exception is different?",
        "createdAt" : "2019-02-14T14:08:56Z",
        "updatedAt" : "2019-02-14T14:35:07Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "938ca7eb-9ee0-44a9-a78a-d96fd5fca00f",
        "parentId" : "7cde56b7-26f3-4d3b-b5dc-1af5b0bddf98",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "That's actually intended with this test. The problem seems to be that `match` doesn't match because the returned message leads with `_pad_dispatcher() missing 1 required positional [...]` instead of `pad()`. Should I simply change the match-string or is this actually a bug (e.g. `_pad_dispatcher` not correctly wrapping)? When I try this in my console the returned error leads with `pad()`.",
        "createdAt" : "2019-02-14T14:13:22Z",
        "updatedAt" : "2019-02-14T14:35:07Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      },
      {
        "id" : "006e748e-c53e-4c24-a309-d3fa0d57ab3d",
        "parentId" : "7cde56b7-26f3-4d3b-b5dc-1af5b0bddf98",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Just start the match with \"missing 1 ...\". The `_pad_dispatcher` is another problem, but out of scope for this PR, pinging @shoyer to take a look",
        "createdAt" : "2019-02-14T14:27:04Z",
        "updatedAt" : "2019-02-14T14:35:07Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "aa071b82-9e49-43a3-ab89-0fcd7ea4b8be",
        "parentId" : "7cde56b7-26f3-4d3b-b5dc-1af5b0bddf98",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "See https://github.com/numpy/numpy/issues/12028#issuecomment-464176722",
        "createdAt" : "2019-02-15T19:48:36Z",
        "updatedAt" : "2019-02-15T19:48:36Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ac67e768b940e4733a6085fa5ba34af385f1b93",
    "line" : 782,
    "diffHunk" : "@@ -1,1 +1253,1257 @@    match = \"missing 1 required positional argument: 'mode'\"\n    with pytest.raises(TypeError, match=match):\n        np.pad(np.ones((5, 6)), 4)\n\n"
  }
]