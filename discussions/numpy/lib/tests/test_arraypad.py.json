[
  {
    "id" : "22874eed-54cc-4873-8115-638414a5be1b",
    "prId" : 3329,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76a266ce-f829-43df-a8cb-38e4c372a6f1",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, was the previous result incorrect?\n",
        "createdAt" : "2013-05-12T15:04:01Z",
        "updatedAt" : "2013-05-19T19:38:27Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "41c118f0-3b7c-4c31-9e1b-555139adc3c4",
        "parentId" : "76a266ce-f829-43df-a8cb-38e4c372a6f1",
        "authorId" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "body" : "In the changed regions, the mean of 5 and 6 was calculated thanks to `stat_length=2`. In IEEE correct rounding (NumPy standard), 5.5 should round to 6, however, in the prior function the calculations were carried out and immediately _cast_ into the original dtype (akin to `arr.astype(np.int32)`). The casting operation truncates like `np.floor` instead of rounding properly, resulting in systematic error in the rounded regions. It's pure luck that more didn't need to be changed; the block of 4s on the left is rounded down from 4.5 in the IEEE standard, thus truncation is equivalent there.\n\nI believe this is the correct way to do it, but if truncating/direct casting was _desired_ for some reason the previous version could be considered correct in its own way.\n",
        "createdAt" : "2013-05-12T18:45:42Z",
        "updatedAt" : "2013-05-19T19:38:27Z",
        "lastEditedBy" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "tags" : [
        ]
      }
    ],
    "commit" : "246c06d2475718ec36ba193494444464e497c69a",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +179,183 @@        a = pad(a, (5, 7), 'mean', stat_length=2)\n        b = np.array([\n                   [4, 4, 4, 4, 4,   4, 5, 6,   6, 6, 6, 6, 6, 6, 6],\n                   [4, 4, 4, 4, 4,   4, 5, 6,   6, 6, 6, 6, 6, 6, 6],\n                   [4, 4, 4, 4, 4,   4, 5, 6,   6, 6, 6, 6, 6, 6, 6],"
  },
  {
    "id" : "484202f5-1341-409a-8ad4-976f3e41a8e6",
    "prId" : 5361,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The formatting of the test results is clear, but it is going to make for a lot of PEP8 violations.\n\n```\n36      E201 whitespace after '['\n30      E203 whitespace before ','\n499     E241 multiple spaces after ','\n```\n\nI wonder if there is another way to express the results that is as clear but doesn't have this problem? For instance, this could be\n\n```\nb = np.array([10]*25 + list(range(1,101)) + [100]*20)\n```\n",
        "createdAt" : "2015-01-05T19:37:29Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "39c41a09-7c59-46b9-bb62-aa878b387aa6",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Or even\n\n```\nb = np.array([10]*25 + list(a) + [100]*20)\n```\n",
        "createdAt" : "2015-01-05T19:40:25Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c0b5d450-e3f5-45ae-b6d8-220550ed856c",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "body" : "This entire file has been a PEP8 disaster since before I started working with `pad`. That said, I maintained the format for consistency and because PEP8 says to ignore itself judiciously.\n\nSome of the simpler rank-1 examples could be collapsed, but others (e.g., linear ramp mode and the corners for all 2D tests) will be challenging to simplify. For those I fear changes might harm maintainability by making the expected changes unclear...\n\nWithout 'fixing' all of them there will still be PEP8 exceptions. Is it worth changing the easy targets vs. maintaining a consistent syntax throughout the tests?\n",
        "createdAt" : "2015-01-05T20:01:01Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "tags" : [
        ]
      },
      {
        "id" : "193cbdfc-0b35-4d4f-8208-853184d8d758",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Agree about the 2-D cases. Might get a start with the easy ones and we can take a longer look at the others after. It would be nice if there was an easy way to tell PEP8 to just ignore some functions. Something to think about. In this particular case I think the alternative is actually clearer, as I had to count the number of repetitions of the fill values to check what was going on. Another alternative is to simply collapse the arrays to PEP8 form once we are sure that they are correct. It isn't as bad in practice as it sounds.\n",
        "createdAt" : "2015-01-05T20:19:26Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "821ea8a7-caad-490d-b6be-ab50c04f669f",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "body" : "Judicious ignorance is _exactly_ what PEP8 needs!\n\nRank 2+ arrays with variable precision / significant figures just can't be displayed in a way that makes PEP8 happy and is human-readable.\n",
        "createdAt" : "2015-01-07T01:55:08Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "tags" : [
        ]
      },
      {
        "id" : "76220161-f41a-494f-b901-077fce0996c1",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "body" : "@charris I feel obliged to point out that the recommended\n\n``` python\nb = np.array([10]*25 + list(a) + [100]*20)\n```\n\nactually violates PEP8 by lacking spaces around the `*` operators. That said, I believe the grouping without spaces is clearer...\n",
        "createdAt" : "2015-01-07T01:58:43Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "tags" : [
        ]
      },
      {
        "id" : "a0cf6556-a3d7-4185-97a4-db8dc99431ed",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "body" : "Fully PEP8 compliant options\n\n``` python\nb = np.array([10] * 25 + list(a) + [100] * 20)\n```\n\n``` python\nb = np.array([10] * 25 + \n             list(a) + \n             [100] * 20)\n```\n",
        "createdAt" : "2015-01-07T02:02:20Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "tags" : [
        ]
      },
      {
        "id" : "6f75e4fd-f14b-465d-ad6b-3b7b2b891e48",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "body" : "It seems to be a common misconception, but spaces around _all_ binary operators is not in PEP 8.  Take a look at https://www.python.org/dev/peps/pep-0008/#other-recommendations, and note the examples under \"Yes\".\n",
        "createdAt" : "2015-01-07T02:15:55Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "tags" : [
        ]
      },
      {
        "id" : "4515c6c3-9414-474e-92e8-bc4b24691ecc",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "body" : "I favor the latter, because later on you end up with stuff like this\n\n``` python\nb = np.array((a[25:0:-1] * -1).tolist() +\n             list(a) +\n             (99 + 100 - a[-2:-22:-1]).tolist())\n```\n\nfrom `TestReflect.test_check_odd_method`.\n\nI'm really not sure that's better than spelling out the array, and it's only 1D.\n",
        "createdAt" : "2015-01-07T02:24:25Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "tags" : [
        ]
      },
      {
        "id" : "2319e35a-ded0-4e83-9e4c-58f5e9262fb8",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "We ignore a lot of things turned up by running pep8\n\n```\ncharris@localhost [~]$ cat .config/pep8\n[pep8]\nmax_line_length=79\nstatistics = True\nignore = E121,E122,E123,E125,E126,E127,E128,E226,E231,E265,E302,E501,E712,W291,W293,W391\n```\n",
        "createdAt" : "2015-01-07T02:33:02Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2217af91-5b7d-45c6-861b-726de80ad227",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "You don't need to do the PEP8 stuff, it's just that I know that someday I'll need to figure out how to deal with it ;)\n",
        "createdAt" : "2015-01-07T02:40:27Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "1d108073-69c6-4ba1-9a33-49e30a34e831",
        "parentId" : "6edb44ba-e9a1-4831-98d6-64ffbed6f439",
        "authorId" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "body" : "@WarrenWeckesser Holy smokes, you're right! I need to find a PEP8 checker that's smart enough to handle those cases, because the one I've been using flags them all.\n",
        "createdAt" : "2015-01-07T03:03:49Z",
        "updatedAt" : "2015-01-07T03:03:49Z",
        "lastEditedBy" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "tags" : [
        ]
      }
    ],
    "commit" : "29464a96941b61b91d703dc20c3f426466df0c2a",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +126,130 @@        assert_array_equal(a, b)\n\n    def test_check_maximum_stat_length(self):\n        a = np.arange(100) + 1\n        a = pad(a, (25, 20), 'maximum', stat_length=10)"
  },
  {
    "id" : "f9b8b9ce-9e1e-4bec-86fa-fccf06296c19",
    "prId" : 9640,
    "prUrl" : "https://github.com/numpy/numpy/pull/9640#pullrequestreview-60160925",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee8c00f5-c1cd-45df-ba31-f9a01283227e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you add a test of the allowed case too?",
        "createdAt" : "2017-09-01T14:33:43Z",
        "updatedAt" : "2017-09-01T16:53:45Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c46e1077-6261-4981-8038-027e3a643d41",
        "parentId" : "ee8c00f5-c1cd-45df-ba31-f9a01283227e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`pad(np.zeros((0, 3)), ((0,), (1,)), mode='reflect')` would do, I think?",
        "createdAt" : "2017-09-01T14:50:55Z",
        "updatedAt" : "2017-09-01T16:53:45Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "53282a15-7a94-462d-b791-187f0a4b398d",
        "parentId" : "ee8c00f5-c1cd-45df-ba31-f9a01283227e",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Might want to assert the new shape too.",
        "createdAt" : "2017-09-01T14:54:10Z",
        "updatedAt" : "2017-09-01T16:53:45Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "00eaf9b2-2968-43d9-afe4-342bfaa98365",
        "parentId" : "ee8c00f5-c1cd-45df-ba31-f9a01283227e",
        "authorId" : "724da59f-009b-4586-9396-830b3bb3c27b",
        "body" : "I do not think it should go into `TestValueError` test suite, so I have added this exact case to `TestReflect` .",
        "createdAt" : "2017-09-01T15:02:03Z",
        "updatedAt" : "2017-09-01T16:53:45Z",
        "lastEditedBy" : "724da59f-009b-4586-9396-830b3bb3c27b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6bbd74bc1158a59eaa0c2e20fe2f66c52f07fb6",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +1023,1027 @@        assert_raises(ValueError, pad, np.ndarray(0), 4, mode='reflect')\n        assert_raises(ValueError, pad, np.zeros((0, 3)), ((1,), (0,)),\n                      mode='reflect')\n\n"
  }
]