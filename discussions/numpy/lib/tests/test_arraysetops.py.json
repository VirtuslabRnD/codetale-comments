[
  {
    "id" : "6bc4ca2a-9564-48b9-9329-9307992d91df",
    "prId" : 10342,
    "prUrl" : "https://github.com/numpy/numpy/pull/10342#pullrequestreview-87620134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31287f1d-161e-48bf-a729-b318d4d9ec55",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "A comment above this block linking to the issue with `gh-10340`, and a remark about flattening, might be nice.\r\n",
        "createdAt" : "2018-01-09T18:29:39Z",
        "updatedAt" : "2018-01-19T01:08:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e45f5180-25b7-4485-aed0-9ba23cc5e580",
        "parentId" : "31287f1d-161e-48bf-a729-b318d4d9ec55",
        "authorId" : "5fbb4dae-32f5-4421-be4e-b2a3d6aadcc4",
        "body" : "Comment added.",
        "createdAt" : "2018-01-09T18:49:02Z",
        "updatedAt" : "2018-01-19T01:08:27Z",
        "lastEditedBy" : "5fbb4dae-32f5-4421-be4e-b2a3d6aadcc4",
        "tags" : [
        ]
      }
    ],
    "commit" : "70e34252dc224ace1192cb8534fd55442afe3dfe",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +254,258 @@        ez = np.array([0, 1, 2, 3, 4, 5])\n        z = union1d(x, y)\n        assert_array_equal(z, ez)\n\n        assert_array_equal([], union1d([], []))"
  },
  {
    "id" : "81806be9-2cd0-4431-854a-b13c95a39d6d",
    "prId" : 10588,
    "prUrl" : "https://github.com/numpy/numpy/pull/10588#pullrequestreview-96661917",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70773313-ef58-4d8d-b820-570f0dae4ac2",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'd prefer to use the more explicit `[np.byte, np.short, np.cint, np.int_, np.longlong]` here",
        "createdAt" : "2018-02-14T20:17:23Z",
        "updatedAt" : "2018-02-14T20:17:23Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "58c81866-b2c1-49c4-b7d1-0dc17c5e5739",
        "parentId" : "70773313-ef58-4d8d-b820-570f0dae4ac2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I like the letters for this sort of test because they are short and map directly C types.",
        "createdAt" : "2018-02-14T20:53:55Z",
        "updatedAt" : "2018-02-14T20:53:55Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "eaa8ff7a-8d49-41e0-ad3c-c2e205376e41",
        "parentId" : "70773313-ef58-4d8d-b820-570f0dae4ac2",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "#9642 and the different interpretations of these letter codes dependent on context makes me want to eliminate internal uses of them as much as possible - but I guess for this test that doesn't really matter.",
        "createdAt" : "2018-02-14T21:00:56Z",
        "updatedAt" : "2018-02-14T21:00:56Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2f01dd66-cdd1-46c1-89c5-866a8bc7b644",
        "parentId" : "70773313-ef58-4d8d-b820-570f0dae4ac2",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I don't think we have a good policy as yet, names based on type sizes depend on alignment, aren't unique, and don't map directly to C types, etc., and the long type is a continuing pain. Once we drop support for Python 2.7 we can probably eliminate the long type everywhere, which will at least simplify the integers.",
        "createdAt" : "2018-02-14T21:23:48Z",
        "updatedAt" : "2018-02-14T21:23:49Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f28615092d6cd7f849dd09d0dc57471af7def143",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +460,464 @@        # as unsigned byte strings.  See gh-10495.\n        fmt = \"sort order incorrect for integer type '%s'\"\n        for dt in 'bhilq':\n            a = np.array([[-1],[0]], dt)\n            b = np.unique(a, axis=0)"
  },
  {
    "id" : "1ae34d25-0290-4f18-aba0-5ffa3a074a98",
    "prId" : 11774,
    "prUrl" : "https://github.com/numpy/numpy/pull/11774#pullrequestreview-147379154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3aee1961-1641-4db5-ac2a-1264767b211b",
        "parentId" : null,
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "`a = [0, 1, 2]` might be a simpler test case.",
        "createdAt" : "2018-08-17T20:58:38Z",
        "updatedAt" : "2018-08-17T22:43:22Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc2df52313c6db5ba4ccbd10b233cee6b4acec2c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +39,43 @@                return np.arange(3)\n\n        a = Test()\n        res = intersect1d(a, a)\n        assert_array_equal(res, a)"
  }
]