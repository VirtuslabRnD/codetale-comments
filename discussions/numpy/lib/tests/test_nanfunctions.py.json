[
  {
    "id" : "b00ebfc4-5b5c-4979-a79a-ef521f580945",
    "prId" : 5418,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce503596-d5ac-4bcf-9c76-29b08f3a078a",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Interesting approach.\n",
        "createdAt" : "2015-01-05T17:58:06Z",
        "updatedAt" : "2015-01-05T19:08:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b2d2e977d51414121548d4454afdf02d9def3b3",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +266,270 @@\n\nclass SharedNanFunctionsTestsMixin(object):\n    def test_mutation(self):\n        # Check that passed array is not modified."
  },
  {
    "id" : "c00613ca-be18-4f8b-9601-6b197dbabca6",
    "prId" : 7099,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25abb1de-b5d4-4a57-9f06-ff6b89b5e363",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So this was not needed before. I assume that it is needed now because the lower level warning is no longer caught. Is that what we want?\n",
        "createdAt" : "2016-08-30T00:14:57Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "23e4fb22-2b9d-4254-a96b-14131f87e9c4",
        "parentId" : "25abb1de-b5d4-4a57-9f06-ff6b89b5e363",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Did we used to have a `once` filter maybe, or did we even listen to these warnings at all?\n\nI am not quite sure what you mean here, sorry. I guess the outer level does not catch the warning anymore, you could argue about it, but this is very explicit (i.e. someone writing a new test realizes there is a warning going on).\n",
        "createdAt" : "2016-08-30T07:30:43Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "78cda4a8-3375-441e-8679-5b854107d2b4",
        "parentId" : "25abb1de-b5d4-4a57-9f06-ff6b89b5e363",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Ah, it is `np.nanstd` issuing a warning. Funnily `np.std` does not issue it (I guess this is a slight bug).\n",
        "createdAt" : "2016-08-30T07:41:12Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "c8adf7b5-0de3-4431-9f39-010667271e6e",
        "parentId" : "25abb1de-b5d4-4a57-9f06-ff6b89b5e363",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Maybe open an issue for `nanstd` with a reference to this line so we can fix it.\n",
        "createdAt" : "2016-08-30T18:39:16Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "cb8d3907-a2fa-4199-a297-3108b3c28bb2",
        "parentId" : "25abb1de-b5d4-4a57-9f06-ff6b89b5e363",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I don't think this is the correct fix. The class is a mixin, and fails for one specific function, so suppressing the warning for all functions is over kill. We should either fix the test or fix the function.\n",
        "createdAt" : "2016-08-31T17:39:21Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2aa31925-deb8-428f-b2da-7a223a9c7775",
        "parentId" : "25abb1de-b5d4-4a57-9f06-ff6b89b5e363",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Well, I think emitting the warning is likely the correct thing (and the plain std function is incorrect). Will think about how to make the test more specific.\n",
        "createdAt" : "2016-08-31T18:29:40Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "6665e3e6-06f0-4c6f-a069-a2dab8f399c1",
        "parentId" : "25abb1de-b5d4-4a57-9f06-ff6b89b5e363",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Hmmm, yeah I got something wrong. The nanstd seems to be the incorrect version of course, not sure how easy it is to fix (its a rather funny thing, with real input + cast to non-real, but still).\n",
        "createdAt" : "2016-08-31T18:37:39Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "a6b1b986-a0f4-4782-94e1-7371a122bfdc",
        "parentId" : "25abb1de-b5d4-4a57-9f06-ff6b89b5e363",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Hmmm, funny. The `nanstd/nanvar` code uses:\n\n```\nnp.subtract(arr, avg, out=arr, casting='unsafe')\n```\n\nwhich uses the original arr's dtype, but `avg` already uses the new dtype. I think the spurious complex warning is the only thing that can go really bad though, because only inexact types use this code branch. So the worst that can happen is this warning and a less precise type to store the subtraction result in. If you got a nice idea how to avoid the warning, I am all ears.\n",
        "createdAt" : "2016-08-31T18:47:50Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "095ac79c-6366-4bd0-b33c-d365202f911e",
        "parentId" : "25abb1de-b5d4-4a57-9f06-ff6b89b5e363",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Or maybe I will add a bit non-pretty `if rf in {nanstd, nanvar}: sup.filter(...)` with a comment + new issue....\n",
        "createdAt" : "2016-08-31T19:05:04Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "75e63cf4-8464-4658-ba49-5cf18a70d19a",
        "parentId" : "25abb1de-b5d4-4a57-9f06-ff6b89b5e363",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I made the test specific with this hack (also fixed the other things like removing the full stuff and used more suppress_warnings, though for now only in the nanfunc tests.... Probably lots of places where we could do it more and I am willing to work a bit more on it later. But for the sake of keeping this not too long, maybe it is better to wait.\n",
        "createdAt" : "2016-08-31T19:24:34Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "524db3b9-aac5-496c-9e6b-3814a664f84b",
        "parentId" : "25abb1de-b5d4-4a57-9f06-ff6b89b5e363",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Did not have a quick idea how to fix the spurious warning bug in a very \"obvious\" way, but can think about it some more....\n",
        "createdAt" : "2016-08-31T19:25:35Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "50eeeba7-8f2e-4c95-b7d9-d4af1d8ae188",
        "parentId" : "25abb1de-b5d4-4a57-9f06-ff6b89b5e363",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yeah, the quick hack was the first thing to occur to me also. Not pretty, but at least it is documented.\n",
        "createdAt" : "2016-08-31T21:02:08Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "fb65d35d-0116-4a04-b179-d5c480714cf4",
        "parentId" : "25abb1de-b5d4-4a57-9f06-ff6b89b5e363",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "> But for the sake of keeping this not too long, maybe it is better to wait.\n\nYeah, as long as we have a good idea as to what needs fixing, I'd like to get this in as soon as possible.\n",
        "createdAt" : "2016-08-31T21:09:08Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "514d13679a55a82a96689679002c4ddc514641ce",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +318,322 @@        for nf, rf in zip(self.nanfuncs, self.stdfuncs):\n            for c in codes:\n                with suppress_warnings() as sup:\n                    if nf in {np.nanstd, np.nanvar} and c in 'FDG':\n                        # Giving the warning is a small bug, see gh-8000"
  },
  {
    "id" : "b3ac5a5f-4bda-42ee-992a-a0a65a5ddcdd",
    "prId" : 7099,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42725a65-4b3e-4d16-bc77-b6c52d500c4c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "See previous comment.\n",
        "createdAt" : "2016-08-30T00:16:06Z",
        "updatedAt" : "2016-09-02T08:11:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "514d13679a55a82a96689679002c4ddc514641ce",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +335,339 @@        for nf, rf in zip(self.nanfuncs, self.stdfuncs):\n            for c in codes:\n                with suppress_warnings() as sup:\n                    if nf in {np.nanstd, np.nanvar} and c in 'FDG':\n                        # Giving the warning is a small bug, see gh-8000"
  },
  {
    "id" : "cf42d51d-322c-4465-882b-6bbe50e9f98c",
    "prId" : 7180,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e15b8f9f-f35c-467f-8dab-53be6713a7bb",
        "parentId" : null,
        "authorId" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "body" : "Result before change was `(2, 6, 3)`.\n",
        "createdAt" : "2016-02-03T21:16:13Z",
        "updatedAt" : "2016-02-05T19:37:48Z",
        "lastEditedBy" : "0d70c244-f732-4a44-9ae8-c3f6de7e9b40",
        "tags" : [
        ]
      }
    ],
    "commit" : "e30d80266d476841e51d36432d1640f278a5fa05",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +729,733 @@\n        megamat = np.ones((3, 4, 5, 6))\n        assert_equal(np.nanpercentile(megamat, perc, axis=(1, 2)).shape, (2, 3, 6))\n\n"
  }
]