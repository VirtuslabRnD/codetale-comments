[
  {
    "id" : "73632b5c-1ac7-4030-ac58-34f1a9771a05",
    "prId" : 3310,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bdb991f-4b58-4190-8444-309cc8f6ff3f",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'd put another tab in here and break the line if you need to.\n",
        "createdAt" : "2013-05-07T03:45:35Z",
        "updatedAt" : "2013-05-07T15:06:24Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "bb6e0dc8-dfdb-402b-892d-bf80aa067bff",
        "parentId" : "4bdb991f-4b58-4190-8444-309cc8f6ff3f",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "As I mentioned elsewhere, that is a misreading of PEP8. This indentation is fine.\n",
        "createdAt" : "2013-05-07T09:57:09Z",
        "updatedAt" : "2013-05-07T15:06:24Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcd9ef96455b433f07d85aca55e37aa95d17e74f",
    "line" : 310,
    "diffHunk" : "@@ -1,1 +400,404 @@\n    before_vector = np.resize(\n        np.concatenate((after_vector[1:-1], reverse)), pad_tuple[0])[::-1]\n    after_vector = np.resize(\n        np.concatenate((reverse[1:-1], after_vector)), pad_tuple[1])"
  },
  {
    "id" : "83c43934-491d-4097-8a86-4a87c65fbd11",
    "prId" : 3310,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86938cc8-f922-4db8-badb-f054010e8613",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Same extra tab here.\n",
        "createdAt" : "2013-05-07T03:45:53Z",
        "updatedAt" : "2013-05-07T15:06:24Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcd9ef96455b433f07d85aca55e37aa95d17e74f",
    "line" : 314,
    "diffHunk" : "@@ -1,1 +402,406 @@        np.concatenate((after_vector[1:-1], reverse)), pad_tuple[0])[::-1]\n    after_vector = np.resize(\n        np.concatenate((reverse[1:-1], after_vector)), pad_tuple[1])\n\n    if kwargs['reflect_type'] == 'even':"
  },
  {
    "id" : "512d6e00-9f43-420f-9a2d-188088b190b7",
    "prId" : 5361,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b502fad-ae69-4bbd-8764-21ecc80398ed",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'm not happy about overloading `shape` this way, it is confusing. Would it make sense to have different functions for the various ways of padding? I'm not that happy with the orginal overloading either :0. Just fishing for alternative ideas here.\n",
        "createdAt" : "2015-01-05T19:55:34Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6c3df7f0-7c3d-4b4f-a774-b34459b63f21",
        "parentId" : "4b502fad-ae69-4bbd-8764-21ecc80398ed",
        "authorId" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "body" : "Hmm, I'm definitely not sure it is a great idea to encourage a user to use `float` here (even though the function will sanitize it, it's asking for trouble).\n\nOtherwise these changes really just harmonize inputs which logically seemed like they should have worked. Would `{iterable of ints, int}` be clearer?\n",
        "createdAt" : "2015-01-05T20:07:51Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "tags" : [
        ]
      },
      {
        "id" : "02e3e637-3021-49e4-a7f8-9697eed16b73",
        "parentId" : "4b502fad-ae69-4bbd-8764-21ecc80398ed",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'd actually like some more input on this aspect. It should be easier to determine what the function is going to do without poring over the docstring. Maybe @njsmith or @jaimefrio  would have some ideas.\n",
        "createdAt" : "2015-01-05T20:13:46Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "42c1072e-c90c-4878-9326-710ed9d2239c",
        "parentId" : "4b502fad-ae69-4bbd-8764-21ecc80398ed",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@njsmith Thoughts?\n",
        "createdAt" : "2015-01-11T19:38:14Z",
        "updatedAt" : "2015-01-11T19:38:14Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ffd225c4-5d19-472d-8014-bb95a15eb858",
        "parentId" : "4b502fad-ae69-4bbd-8764-21ecc80398ed",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "I'm not super-worried either way b/c this function is an internal implementation detail, but maybe the right thing is just to rename the function and argument? like make it `_normalize_edge_argument(ndarray, edge_argument, cast_to_int=True)`? AFAICT the functionality is fine, all the different things that get passed in really do want the same handling, it's just that that handling is not really normalizing a \"shape\".\n",
        "createdAt" : "2015-01-13T16:47:29Z",
        "updatedAt" : "2015-01-13T16:47:29Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "1a4c60e2-01a3-4ffa-af5c-27505df9c655",
        "parentId" : "4b502fad-ae69-4bbd-8764-21ecc80398ed",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@njsmith Thanks. I going to just merge this as is.\n",
        "createdAt" : "2015-01-13T17:08:13Z",
        "updatedAt" : "2015-01-13T17:08:13Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "29464a96941b61b91d703dc20c3f426466df0c2a",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +997,1001 @@    narray : ndarray\n        Input ndarray\n    shape : {sequence, array_like, float, int}, optional\n        The width of padding (pad_width), the number of elements on the\n        edge of the narray used for statistics (stat_length), the constant"
  }
]