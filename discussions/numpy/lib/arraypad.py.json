[
  {
    "id" : "73632b5c-1ac7-4030-ac58-34f1a9771a05",
    "prId" : 3310,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bdb991f-4b58-4190-8444-309cc8f6ff3f",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'd put another tab in here and break the line if you need to.\n",
        "createdAt" : "2013-05-07T03:45:35Z",
        "updatedAt" : "2013-05-07T15:06:24Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "bb6e0dc8-dfdb-402b-892d-bf80aa067bff",
        "parentId" : "4bdb991f-4b58-4190-8444-309cc8f6ff3f",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "As I mentioned elsewhere, that is a misreading of PEP8. This indentation is fine.\n",
        "createdAt" : "2013-05-07T09:57:09Z",
        "updatedAt" : "2013-05-07T15:06:24Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcd9ef96455b433f07d85aca55e37aa95d17e74f",
    "line" : 310,
    "diffHunk" : "@@ -1,1 +400,404 @@\n    before_vector = np.resize(\n        np.concatenate((after_vector[1:-1], reverse)), pad_tuple[0])[::-1]\n    after_vector = np.resize(\n        np.concatenate((reverse[1:-1], after_vector)), pad_tuple[1])"
  },
  {
    "id" : "83c43934-491d-4097-8a86-4a87c65fbd11",
    "prId" : 3310,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86938cc8-f922-4db8-badb-f054010e8613",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Same extra tab here.\n",
        "createdAt" : "2013-05-07T03:45:53Z",
        "updatedAt" : "2013-05-07T15:06:24Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcd9ef96455b433f07d85aca55e37aa95d17e74f",
    "line" : 314,
    "diffHunk" : "@@ -1,1 +402,406 @@        np.concatenate((after_vector[1:-1], reverse)), pad_tuple[0])[::-1]\n    after_vector = np.resize(\n        np.concatenate((reverse[1:-1], after_vector)), pad_tuple[1])\n\n    if kwargs['reflect_type'] == 'even':"
  },
  {
    "id" : "512d6e00-9f43-420f-9a2d-188088b190b7",
    "prId" : 5361,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b502fad-ae69-4bbd-8764-21ecc80398ed",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'm not happy about overloading `shape` this way, it is confusing. Would it make sense to have different functions for the various ways of padding? I'm not that happy with the orginal overloading either :0. Just fishing for alternative ideas here.\n",
        "createdAt" : "2015-01-05T19:55:34Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6c3df7f0-7c3d-4b4f-a774-b34459b63f21",
        "parentId" : "4b502fad-ae69-4bbd-8764-21ecc80398ed",
        "authorId" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "body" : "Hmm, I'm definitely not sure it is a great idea to encourage a user to use `float` here (even though the function will sanitize it, it's asking for trouble).\n\nOtherwise these changes really just harmonize inputs which logically seemed like they should have worked. Would `{iterable of ints, int}` be clearer?\n",
        "createdAt" : "2015-01-05T20:07:51Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "6c37ccde-17f1-4ddd-bcb8-e1ec973ce177",
        "tags" : [
        ]
      },
      {
        "id" : "02e3e637-3021-49e4-a7f8-9697eed16b73",
        "parentId" : "4b502fad-ae69-4bbd-8764-21ecc80398ed",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'd actually like some more input on this aspect. It should be easier to determine what the function is going to do without poring over the docstring. Maybe @njsmith or @jaimefrio  would have some ideas.\n",
        "createdAt" : "2015-01-05T20:13:46Z",
        "updatedAt" : "2015-01-07T02:49:52Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "42c1072e-c90c-4878-9326-710ed9d2239c",
        "parentId" : "4b502fad-ae69-4bbd-8764-21ecc80398ed",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@njsmith Thoughts?\n",
        "createdAt" : "2015-01-11T19:38:14Z",
        "updatedAt" : "2015-01-11T19:38:14Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ffd225c4-5d19-472d-8014-bb95a15eb858",
        "parentId" : "4b502fad-ae69-4bbd-8764-21ecc80398ed",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "I'm not super-worried either way b/c this function is an internal implementation detail, but maybe the right thing is just to rename the function and argument? like make it `_normalize_edge_argument(ndarray, edge_argument, cast_to_int=True)`? AFAICT the functionality is fine, all the different things that get passed in really do want the same handling, it's just that that handling is not really normalizing a \"shape\".\n",
        "createdAt" : "2015-01-13T16:47:29Z",
        "updatedAt" : "2015-01-13T16:47:29Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "1a4c60e2-01a3-4ffa-af5c-27505df9c655",
        "parentId" : "4b502fad-ae69-4bbd-8764-21ecc80398ed",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@njsmith Thanks. I going to just merge this as is.\n",
        "createdAt" : "2015-01-13T17:08:13Z",
        "updatedAt" : "2015-01-13T17:08:13Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "29464a96941b61b91d703dc20c3f426466df0c2a",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +997,1001 @@    narray : ndarray\n        Input ndarray\n    shape : {sequence, array_like, float, int}, optional\n        The width of padding (pad_width), the number of elements on the\n        edge of the narray used for statistics (stat_length), the constant"
  },
  {
    "id" : "7553baa7-b8bc-49ec-9e98-97cee00e7496",
    "prId" : 11012,
    "prUrl" : "https://github.com/numpy/numpy/pull/11012#pullrequestreview-122053632",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e750ad88-8262-4ce7-8c84-1ac318042a17",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yes, the last half is redundant - but it produces the same slices as we did before, and I see little reason to change that.",
        "createdAt" : "2018-05-22T07:53:02Z",
        "updatedAt" : "2018-05-22T07:59:05Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "5608636c360050e865abe4fcbe3511f84db9591b",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +80,84 @@    \"\"\"\n    slice_tup = (slice(None),)\n    return slice_tup * axis + (sl,) + slice_tup * (len(shape) - axis - 1)\n\n"
  },
  {
    "id" : "259f02ab-8d0d-4fd8-ac22-40e433398bc5",
    "prId" : 11358,
    "prUrl" : "https://github.com/numpy/numpy/pull/11358#pullrequestreview-194195623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfbdacab-b90a-4bb3-8579-cd51b5947543",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Any reason you cut this docstring? Leaving it in would result in a more easy to read diff",
        "createdAt" : "2018-06-16T19:21:32Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2254cad2-da81-4223-9c1f-c0e65e30857a",
        "parentId" : "bfbdacab-b90a-4bb3-8579-cd51b5947543",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "Can you explain what you mean by that? This is a new docstring for the new function `_get_stats`. Were did I cut something?",
        "createdAt" : "2018-12-16T12:46:15Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      },
      {
        "id" : "7f3a17d3-843f-4b6f-86b9-3c7d0b2ed908",
        "parentId" : "bfbdacab-b90a-4bb3-8579-cd51b5947543",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "Ah, sorry, the way GitHub displayed the diff confused me. I see your point now. I'll have a look if I can salvage something of `_arange_ndarray`s old docstring. ",
        "createdAt" : "2018-12-16T23:52:00Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      },
      {
        "id" : "74b27004-ebb5-4e56-9ece-2638c094cdc6",
        "parentId" : "bfbdacab-b90a-4bb3-8579-cd51b5947543",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "I don't think there is much so salvage as this isn't really the same function anymore. While the old function behaved more like `np.arange` the new one includes arguments like `start` and `stop` and is closer to `linspace`...",
        "createdAt" : "2019-01-18T17:09:02Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a94a398a751ab6e55a01a6e23f2649ea08f1f0",
    "line" : 429,
    "diffHunk" : "@@ -1,1 +214,218 @@\ndef _get_edges(padded, axis, width_pair):\n    \"\"\"\n    Retrieve edge values from empty-padded array in given dimension.\n"
  },
  {
    "id" : "f9f539c7-7751-490d-8d2a-ad89bc7eb372",
    "prId" : 11358,
    "prUrl" : "https://github.com/numpy/numpy/pull/11358#pullrequestreview-155750932",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "191abe08-955f-4637-be15-ed0ce5493fec",
        "parentId" : null,
        "authorId" : "7714a86d-e4db-41f5-8928-d91402bb82aa",
        "body" : "I'm not sure what is faster. Recursively calling this function with \r\n```\r\n        newmat = pad(narray, pad_width=pad_width,\r\n                     mode='constant', constant_values= 0)\r\n```\r\nor using `np.fill`. It probably depends a little bit on the array.",
        "createdAt" : "2018-09-15T15:06:59Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "7714a86d-e4db-41f5-8928-d91402bb82aa",
        "tags" : [
        ]
      },
      {
        "id" : "e7b1410a-b25d-4977-b19d-3dc1ebd43521",
        "parentId" : "191abe08-955f-4637-be15-ed0ce5493fec",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "Do you mean translating `pad(array, pad_width=..., mode=\"constant\", constant_values=0)` to either\r\n\r\n* `_pad_simple(array, pad_width, fill_value=constant_values)`\r\n* vs `_pad_simple(array, pad_width)` + the iterative approach?\r\n\r\nYeah, that's a thought I had as well. However that is only possible if `constant_values` is a scalar otherwise we may need to pad with different values which is not possible with `_pad_simple` / `np.fill`. I think expect the fill approach to be significantly faster than the iterative one. So it might be worth catching and accelerating this (I think) really common case. Will investigate.",
        "createdAt" : "2018-09-16T16:00:28Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      },
      {
        "id" : "43dc541e-4bf6-428b-a003-13f92e696ef0",
        "parentId" : "191abe08-955f-4637-be15-ed0ce5493fec",
        "authorId" : "7714a86d-e4db-41f5-8928-d91402bb82aa",
        "body" : "hmm ok. I wouldn't worry too much about it. It was just one of the places where your code and mine had conceptually differed.",
        "createdAt" : "2018-09-16T16:40:57Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "7714a86d-e4db-41f5-8928-d91402bb82aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a94a398a751ab6e55a01a6e23f2649ea08f1f0",
    "line" : 1296,
    "diffHunk" : "@@ -1,1 +798,802 @@        function = mode\n        # Create a new zero padded array\n        padded, _ = _pad_simple(array, pad_width, fill_value=0)\n        # And apply along each axis\n        for axis in range(padded.ndim):"
  },
  {
    "id" : "ef8d44b7-f1e1-4abe-88a4-ce8b2c59efc7",
    "prId" : 11358,
    "prUrl" : "https://github.com/numpy/numpy/pull/11358#pullrequestreview-185383962",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ef1d20c-4fef-42b6-8e16-7767cbea4d43",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Needs a ..versionadded:: tag unfortunately.",
        "createdAt" : "2018-12-15T15:53:58Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "a35c13f7-34d3-4bc7-9d71-76ca0f4477e6",
        "parentId" : "1ef1d20c-4fef-42b6-8e16-7767cbea4d43",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "Good catch!",
        "createdAt" : "2018-12-16T23:42:48Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a94a398a751ab6e55a01a6e23f2649ea08f1f0",
    "line" : 1259,
    "diffHunk" : "@@ -1,1 +626,630 @@            end values are used to pad the beginning.\n        'empty'\n            Pads with undefined values.\n\n            .. versionadded:: 1.17"
  },
  {
    "id" : "ec1dd096-7869-46df-a2cc-b80a3ec1707d",
    "prId" : 11358,
    "prUrl" : "https://github.com/numpy/numpy/pull/11358#pullrequestreview-185696090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea19e372-54dd-450b-9b3b-b4be9dd52b92",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I would prefer `operator.index` here to convert. But maybe leave it for the sake of not changing too much at once.",
        "createdAt" : "2018-12-15T15:55:57Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "3d9ce0f9-bc7e-459b-a767-5cecb682d3a8",
        "parentId" : "ea19e372-54dd-450b-9b3b-b4be9dd52b92",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Sorry, nvm. this is an array input. I think this check is nicer in `_as_pairs` though probably, since `as_pairs` and `as_pairs` has an unnecessary round right now (probably some left over from old code).",
        "createdAt" : "2018-12-16T12:16:44Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "a7b26d72-fb75-43d6-8c0f-c074cba60b45",
        "parentId" : "ea19e372-54dd-450b-9b3b-b4be9dd52b92",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "I see what you mean but its not that easy. Moving the `dtype.kind == 'i'` check into `_as_pairs` would require another keyword telling `_as_pairs` when to convert (see `as_index` parameter) and when to raise an exception. I think that's the more complicated option. And it would only be used once anyway.\r\n\r\nOr do I misunderstand you intention? Which round is unnecessary? The requirement for how `_as_pairs` behaves was quite strict in order to fit into the old implementation (see #11966). A good example for some of the disadvantages of the incremental approach. ;) However there may be some streamlining possible now. I'll think on it. ",
        "createdAt" : "2018-12-16T23:42:31Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      },
      {
        "id" : "d11eb1d1-477f-482e-8c1c-d77e02ecaa74",
        "parentId" : "ea19e372-54dd-450b-9b3b-b4be9dd52b92",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Well, arguably, the `stat_length` input should also array when it is not an integer, I did not see it actually used that round there.\r\n\r\nArguably, that should should get a DeprecationWarning and be removed in the long run. But I am OK with leaving that for later. If you keep it as is, it does not matter much.",
        "createdAt" : "2018-12-17T17:02:32Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a94a398a751ab6e55a01a6e23f2649ea08f1f0",
    "line" : 1281,
    "diffHunk" : "@@ -1,1 +786,790 @@    \"\"\"\n    array = np.asarray(array)\n    pad_width = np.asarray(pad_width)\n\n    if not pad_width.dtype.kind == 'i':"
  },
  {
    "id" : "7b9eaf88-b4a6-4806-9305-29e2b0f958ff",
    "prId" : 11358,
    "prUrl" : "https://github.com/numpy/numpy/pull/11358#pullrequestreview-185383962",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bf6bc9d-99d4-4427-872a-29ac68170d4d",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I don't quite like this, but I have to think about it. The thing is that a lot of arrays are neither C or F. For example if I work with a large video dataset, I may have the time axis along a certain dimension and want to keep it that way.\r\n\r\nBut getting this \"right\" is annoying, even more so on the python side. However, lets change the logic to:\r\n```\r\norder = \"F\" if arr.flags.fnc else \"C\"  # Fortan and not also C-order\r\n```\r\nfor now, since numpy should give C order when in doubt.",
        "createdAt" : "2018-12-15T16:28:26Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "6cb00dcc-f194-4c7f-a943-d33b7dbf12e4",
        "parentId" : "2bf6bc9d-99d4-4427-872a-29ac68170d4d",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "Sounds convincing. And thanks for making me lookup the documentation on `ndarray.flags`. I didn't even know one could access those as attributes as well. :)",
        "createdAt" : "2018-12-16T12:33:13Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a94a398a751ab6e55a01a6e23f2649ea08f1f0",
    "line" : 299,
    "diffHunk" : "@@ -1,1 +173,177 @@    )\n    order = 'F' if array.flags.fnc else 'C'  # Fortran and not also C-order\n    padded = np.empty(new_shape, dtype=array.dtype, order=order)\n\n    if fill_value is not None:"
  },
  {
    "id" : "2dacf497-4ac9-4d88-aaa5-8ffcd69beac5",
    "prId" : 11358,
    "prUrl" : "https://github.com/numpy/numpy/pull/11358#pullrequestreview-188441005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9be7f84-46dc-4e0e-b661-6ccca671536a",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Unlike the previous version, your version correctly guarantees the `end_values` are exact. We might want to add a test for it. Silly one:\r\n```\r\nnp.all(np.pad(np.ones(10).reshape(2, 5), (223, 123), mode=\"linear_ramp\")[:, 0] == 0)\r\n```",
        "createdAt" : "2018-12-17T18:06:16Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "31b00ef4-1855-4f0d-8e65-6356f0342cb3",
        "parentId" : "a9be7f84-46dc-4e0e-b661-6ccca671536a",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "Added those tests. See cb7a60c.",
        "createdAt" : "2018-12-30T14:20:39Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a94a398a751ab6e55a01a6e23f2649ea08f1f0",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +60,64 @@    \"\"\"\n    # Create initial ramp\n    ramp = np.arange(size, dtype=np.float64)\n    if reverse:\n        ramp = ramp[::-1]"
  },
  {
    "id" : "40a99faa-f682-4a7d-a2fe-1b56ef691bb2",
    "prId" : 11358,
    "prUrl" : "https://github.com/numpy/numpy/pull/11358#pullrequestreview-187595658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c56fa20-c86f-46d3-a382-229a54fb1558",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Was wondering for a bit here if it can be done using common `kwargs.pop()` and then seeing if it is empty. But since that would move the error check at the very end of the function here, not sure if it helps.",
        "createdAt" : "2018-12-17T18:12:45Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "38e2cf49-df81-48f1-adf5-0c4097bbb961",
        "parentId" : "6c56fa20-c86f-46d3-a382-229a54fb1558",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "Yeah, that works nicely. The advantage is that it's kind of elegant, less verbose and saves a microsecond but it also makes it less clear to the developer which kwargs are supported for which modes. Maybe that behavior is better defined through the test suite anyway...\r\n\r\nI'm undecided. Is there a scenario where raising the error after wasting some computation time hurts the user? If not I think I'll go with your suggestion.",
        "createdAt" : "2018-12-21T21:53:39Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      },
      {
        "id" : "8aa72919-9165-45cd-945e-059cfe92e15b",
        "parentId" : "6c56fa20-c86f-46d3-a382-229a54fb1558",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Users might use `try/except`, but it seems unlikely here, so I guess it would be fine, it would still be nicer to raise early. For the devs, I don't really see much of an issue, since the kwargs are with the specific branch handling the case.\r\n\r\nOne small annoying thing: If we ever add an `out` kwarg, raising the error in hindsight is a big no-go. Raising early when possible is really much cleaner...",
        "createdAt" : "2018-12-22T12:38:29Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "b60dec25-de00-49c1-8572-2b753683c70b",
        "parentId" : "6c56fa20-c86f-46d3-a382-229a54fb1558",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "Okay, I'll keep it like this then.",
        "createdAt" : "2018-12-22T13:19:39Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      },
      {
        "id" : "c38ca5ef-de4a-4246-a549-7ddb0e335449",
        "parentId" : "6c56fa20-c86f-46d3-a382-229a54fb1558",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yeah, the only thing that might also work would be factoring out the error throwing to a helper function and just call that in all the branches I think. Like `_check_kwargs_empty`, but not sure that is nice, never saw anyone doing that.",
        "createdAt" : "2018-12-22T15:47:26Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a94a398a751ab6e55a01a6e23f2649ea08f1f0",
    "line" : 1437,
    "diffHunk" : "@@ -1,1 +823,827 @@    if unsupported_kwargs:\n        raise ValueError(\"unsupported keyword arguments for mode '{}': {}\"\n                         .format(mode, unsupported_kwargs))\n\n    stat_functions = {\"maximum\": np.max, \"minimum\": np.min,"
  },
  {
    "id" : "da34960b-6637-4675-8f9b-1d0827539492",
    "prId" : 11358,
    "prUrl" : "https://github.com/numpy/numpy/pull/11358#pullrequestreview-187017244",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "709c5db2-94f7-47be-b4cc-5ca34bae5fff",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Since you guys discussed that before IIRC. The `fill` should be faster for cache sized arrays. For out of cache arrays, not using fill may quickly become faster.",
        "createdAt" : "2018-12-17T18:18:58Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "0459fbbf-75b0-4a66-94e1-e5c296e5ed37",
        "parentId" : "709c5db2-94f7-47be-b4cc-5ca34bae5fff",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "See discussion in https://github.com/lagru/numpy/pull/3#issuecomment-448793268.",
        "createdAt" : "2018-12-20T14:22:45Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a94a398a751ab6e55a01a6e23f2649ea08f1f0",
    "line" : 302,
    "diffHunk" : "@@ -1,1 +176,180 @@\n    if fill_value is not None:\n        padded.fill(fill_value)\n\n    # Copy old array into correct space"
  },
  {
    "id" : "800b425b-822b-4b5a-b03f-9b0884e53f5f",
    "prId" : 11358,
    "prUrl" : "https://github.com/numpy/numpy/pull/11358#pullrequestreview-186237118",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f3f0949-444d-4aa7-9cd4-cd5726b219f0",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Might be nice to keep this code the same as the one above (without `new_left_pad` and `slice(left_pad, left_pad+period)`. Although, it is also nice to use `new_left_pad` name to avoid changing the meaning of `left_pad`, so maybe changing it the other way around is also nice. (or `pad_start_left` or so).",
        "createdAt" : "2018-12-18T17:57:59Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "39c42df3-80cd-444c-9529-f28b23dab854",
        "parentId" : "7f3f0949-444d-4aa7-9cd4-cd5726b219f0",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "other question. Can't you cram this into the above function, by just introducing a \"flip\" argument, that does a `[::-1]` operation?",
        "createdAt" : "2018-12-18T17:59:09Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "a1d3b353-e07e-4921-a384-cd96ba17bfd1",
        "parentId" : "7f3f0949-444d-4aa7-9cd4-cd5726b219f0",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Nevermind, the slices are from different sides, so itw ould probably be ugly.",
        "createdAt" : "2018-12-18T19:16:30Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a94a398a751ab6e55a01a6e23f2649ea08f1f0",
    "line" : 1195,
    "diffHunk" : "@@ -1,1 +473,477 @@            # Chunk is smaller than pad area\n            pad_area = _slice_at_axis(slice(left_pad - period, left_pad), axis)\n            new_left_pad = left_pad - period\n        else:\n            # Chunk matches pad area"
  },
  {
    "id" : "8a4e401e-67f9-432a-a842-b75ccccdabb0",
    "prId" : 11358,
    "prUrl" : "https://github.com/numpy/numpy/pull/11358#pullrequestreview-204564560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20b530a3-2377-4d8b-887a-3df56c43d3f4",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Wait, this is OK if the mode is \"odd\" right? I am wondering if we should add deprecation warnings here. Also I am wondering if all of those repeat modes should really exist. But for now maybe lets not touch it.",
        "createdAt" : "2018-12-18T18:30:19Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "600f72ba-c38a-43c0-b1e9-fd90b6972472",
        "parentId" : "20b530a3-2377-4d8b-887a-3df56c43d3f4",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "sorry, I meant \"symmetric\" of course.",
        "createdAt" : "2018-12-18T23:03:58Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "2902bcd9-483f-4a3f-9b1f-b244bd18e4fb",
        "parentId" : "20b530a3-2377-4d8b-887a-3df56c43d3f4",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "Yeah. This extra code path for singleton dimensions is only necessary for the mode \"reflect\". That mode excludes the edge from the reflection and would (for a singleton) dimension try to extend with an empty array. When I comment this block out, `np.pad([1], 2, \"reflect\")` will run endlessly. In the case of \"symmetric\" it doesn't hurt as the singleton dimension is always the same value.",
        "createdAt" : "2019-02-17T14:45:02Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a94a398a751ab6e55a01a6e23f2649ea08f1f0",
    "line" : 1499,
    "diffHunk" : "@@ -1,1 +885,889 @@        include_edge = True if mode == \"symmetric\" else False\n        for axis, (left_index, right_index) in zip(axes, pad_width):\n            if array.shape[axis] == 1 and (left_index > 0 or right_index > 0):\n                # Extending singleton dimension for 'reflect' is legacy\n                # behavior; it really should raise an error."
  },
  {
    "id" : "2e7effcd-a710-41d4-b523-2d61cc8aee63",
    "prId" : 11358,
    "prUrl" : "https://github.com/numpy/numpy/pull/11358#pullrequestreview-191662844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05ce9c6d-24d0-41df-8e49-a16e1c6c7e17",
        "parentId" : null,
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "A thought: If `length_pair` is None `left_stat` and `right_stat` will be the same. This means we could save some computation time here. ",
        "createdAt" : "2018-12-30T14:50:51Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      },
      {
        "id" : "381fbadb-7fd5-44d9-9cb8-1160fb71332f",
        "parentId" : "05ce9c6d-24d0-41df-8e49-a16e1c6c7e17",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "That is not a bad point. Maybe just do if `right_slice == left_slice` below? Should be good enough and is pretty obvious. But just an idea.\r\n\r\nI guess you are ready for a new iteration? Will try to get to it on the weekend probably, but not sure I will have a lot of time.",
        "createdAt" : "2019-01-03T13:41:24Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "1100585f-ccdb-4d4f-a122-97d2dac02a9d",
        "parentId" : "05ce9c6d-24d0-41df-8e49-a16e1c6c7e17",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "Okay, I'll look into it. And please don't feel obligated to work on this if you don't have the time. I'm sure I can keep myself busy with the yet pending feedback and with work on the test suite. :wink: ",
        "createdAt" : "2019-01-03T15:34:53Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      },
      {
        "id" : "59032532-9fb4-40d1-b515-644f683c80c2",
        "parentId" : "05ce9c6d-24d0-41df-8e49-a16e1c6c7e17",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "@lagru sorry, I am losing a bit track of this. IIRC, it should be pretty far along. Please just give me a ping when you think you got it covered from your side. Then we can do one more quick iteration and be done with it probably.",
        "createdAt" : "2019-01-11T13:34:59Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "3c6eee97-a9e6-4116-951e-be3641084958",
        "parentId" : "05ce9c6d-24d0-41df-8e49-a16e1c6c7e17",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "Will do. But first I plan to add some changes / restructuring to the unit tests in another PR. I'll try to open that one over the weekend. ",
        "createdAt" : "2019-01-11T13:38:57Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a94a398a751ab6e55a01a6e23f2649ea08f1f0",
    "line" : 637,
    "diffHunk" : "@@ -1,1 +300,304 @@        Gives the number of values in valid area from each side that is\n        taken into account when calculating the statistic. If None the entire\n        valid area in `padded` is considered.\n    stat_func : function\n        Function to compute statistic. The expected signature is"
  },
  {
    "id" : "d01cdf1a-3508-4875-be40-abe9495c7dc6",
    "prId" : 11358,
    "prUrl" : "https://github.com/numpy/numpy/pull/11358#pullrequestreview-204342080",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd6c8f0c-fa38-4d45-ae0c-8ecfd5b4b103",
        "parentId" : null,
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "@hmaarrfk suggested (see  https://github.com/lagru/numpy/pull/2) removing the parameter `fill_value` which is currently not used. However it may be useful for an optimization (see https://github.com/lagru/numpy/pull/3) in the future. I'm +0 on just leaving this.",
        "createdAt" : "2019-02-15T14:23:12Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      },
      {
        "id" : "5f874f8d-ff4d-4911-80fc-bef9e259d926",
        "parentId" : "dd6c8f0c-fa38-4d45-ae0c-8ecfd5b4b103",
        "authorId" : "7714a86d-e4db-41f5-8928-d91402bb82aa",
        "body" : "This is such a minor nit to an internal function, I don't think it should hinder the larger discussion, that is, that this PR will improve performance in many scenarios.",
        "createdAt" : "2019-02-15T16:25:32Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "7714a86d-e4db-41f5-8928-d91402bb82aa",
        "tags" : [
        ]
      },
      {
        "id" : "3100eb0f-0de0-45a6-b4b8-b24c5f0a7564",
        "parentId" : "dd6c8f0c-fa38-4d45-ae0c-8ecfd5b4b103",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "Fine by me, just wanted to make your feedback more visible. :wink: ",
        "createdAt" : "2019-02-15T16:35:36Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      },
      {
        "id" : "909bdca3-6bdb-4602-b618-bee9a464e631",
        "parentId" : "dd6c8f0c-fa38-4d45-ae0c-8ecfd5b4b103",
        "authorId" : "7714a86d-e4db-41f5-8928-d91402bb82aa",
        "body" : "Thanks! I would rather see this PR go through. You've done enough on this front!",
        "createdAt" : "2019-02-15T16:44:41Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "7714a86d-e4db-41f5-8928-d91402bb82aa",
        "tags" : [
        ]
      },
      {
        "id" : "9bf39df8-432d-420b-a3e2-976d7e20c9b6",
        "parentId" : "dd6c8f0c-fa38-4d45-ae0c-8ecfd5b4b103",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I agree we should probably try to get it through and then if more improvements come up great! There is for example also an existing PR which we could revive afterwards thinking about making constant mode the default.",
        "createdAt" : "2019-02-15T17:01:46Z",
        "updatedAt" : "2019-03-24T20:27:41Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0a94a398a751ab6e55a01a6e23f2649ea08f1f0",
    "line" : 254,
    "diffHunk" : "@@ -1,1 +145,149 @@\n\ndef _pad_simple(array, pad_width, fill_value=None):\n    \"\"\"\n    Pad array on all sides with either a single value or undefined values."
  },
  {
    "id" : "f446d1e6-456b-4c79-8e8e-19c8e379e4dc",
    "prId" : 11966,
    "prUrl" : "https://github.com/numpy/numpy/pull/11966#pullrequestreview-155755253",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ffba55c-8985-4576-ba2e-52e1651d3a40",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think these lines are the important part of the patch",
        "createdAt" : "2018-09-16T19:19:13Z",
        "updatedAt" : "2018-11-15T19:33:51Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "c318afb66fc7e1be924280c4ca0ad98e0d471696",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +946,950 @@\n    if as_index and x.min() < 0:\n        raise ValueError(\"index can't contain negative values\")\n\n    # Converting the array with `tolist` seems to improve performance"
  },
  {
    "id" : "393d0cb4-e666-4823-bb51-e61b7a4677ba",
    "prId" : 11966,
    "prUrl" : "https://github.com/numpy/numpy/pull/11966#pullrequestreview-169054427",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c54231e-0a60-4578-94ed-21c2818b9b7d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Is there any point converting to `list` here?",
        "createdAt" : "2018-09-16T23:39:47Z",
        "updatedAt" : "2018-11-15T19:33:51Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3600e4c8-9688-423a-baa2-89c70d5e07f4",
        "parentId" : "6c54231e-0a60-4578-94ed-21c2818b9b7d",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "That's was a relic from the old implementation and no longer necessary.",
        "createdAt" : "2018-09-17T13:04:04Z",
        "updatedAt" : "2018-11-15T19:33:51Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      },
      {
        "id" : "c50c84bc-0af1-4922-bbc3-63c0936b74d5",
        "parentId" : "6c54231e-0a60-4578-94ed-21c2818b9b7d",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Following up on this - if we decided that `.tolist()` was more performant, we should add a comment on this line to that effect.",
        "createdAt" : "2018-10-25T15:54:18Z",
        "updatedAt" : "2018-11-15T19:33:51Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "9ca5da9b-3232-4018-8a17-1ce3f5033c00",
        "parentId" : "6c54231e-0a60-4578-94ed-21c2818b9b7d",
        "authorId" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "body" : "Good idea. Will do.",
        "createdAt" : "2018-10-27T12:47:41Z",
        "updatedAt" : "2018-11-15T19:33:51Z",
        "lastEditedBy" : "db3d18fd-e9e4-4707-af89-22e05f9c60bf",
        "tags" : [
        ]
      }
    ],
    "commit" : "c318afb66fc7e1be924280c4ca0ad98e0d471696",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +950,954 @@    # Converting the array with `tolist` seems to improve performance\n    # when iterating and indexing the result (see usage in `pad`)\n    return np.broadcast_to(x, (ndim, 2)).tolist()\n\n"
  },
  {
    "id" : "99e9ec3e-d859-49a0-9a5b-7626aaeb6e91",
    "prId" : 11966,
    "prUrl" : "https://github.com/numpy/numpy/pull/11966#pullrequestreview-157964702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70bbe64d-1565-484c-8438-454017b7adfe",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Nit: can move this `if` inside the previous one.",
        "createdAt" : "2018-09-24T02:42:50Z",
        "updatedAt" : "2018-11-15T19:33:51Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "c318afb66fc7e1be924280c4ca0ad98e0d471696",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +946,950 @@\n    if as_index and x.min() < 0:\n        raise ValueError(\"index can't contain negative values\")\n\n    # Converting the array with `tolist` seems to improve performance"
  }
]