[
  {
    "id" : "8484360d-3238-41c0-a615-062a6d6030f6",
    "prId" : 3999,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea45cac0-7636-431c-8db3-f3e507f38e87",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Might add a `See Also` mentioning `numpy.polynomial.polyvander`.\n",
        "createdAt" : "2013-11-02T17:26:56Z",
        "updatedAt" : "2013-11-02T20:19:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "18e5202a-760b-48a2-92f0-d675d5ba2b54",
        "parentId" : "ea45cac0-7636-431c-8db3-f3e507f38e87",
        "authorId" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "body" : "Will do, but it looks like the only exposed name is `numpy.polynomial.polynomial.polyvander`.\n",
        "createdAt" : "2013-11-02T18:05:38Z",
        "updatedAt" : "2013-11-02T20:19:40Z",
        "lastEditedBy" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "tags" : [
        ]
      },
      {
        "id" : "19553ac2-4092-4d19-945a-6a07476dbf1a",
        "parentId" : "ea45cac0-7636-431c-8db3-f3e507f38e87",
        "authorId" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "body" : "Done.\n",
        "createdAt" : "2013-11-02T18:11:25Z",
        "updatedAt" : "2013-11-02T20:19:40Z",
        "lastEditedBy" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "tags" : [
        ]
      }
    ],
    "commit" : "253cff04bb83e0338755863653267c19856f79d4",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +533,537 @@    >>> (5-3)*(5-2)*(5-1)*(3-2)*(3-1)*(2-1)\n    48\n\n    \"\"\"\n    if order not in ['decreasing', 'increasing']:"
  },
  {
    "id" : "f9569dd7-1047-4732-be85-fa7862376c94",
    "prId" : 3999,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf488e30-52ea-4437-ab1d-0c0b533e278b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yep, needs the `numpy....` prefix as it is not normally imported.\n",
        "createdAt" : "2013-11-02T19:00:14Z",
        "updatedAt" : "2013-11-02T20:19:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c3cefa16-019a-49a0-aadc-de96132d8f4e",
        "parentId" : "bf488e30-52ea-4437-ab1d-0c0b533e278b",
        "authorId" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "body" : "So the `numpy` prefix should be included here?  Is that the convention for anything that is not available at the top level?  I thought it was implicit. Of course,  \"explicit is better...\" and all that, but I don't see too many cases where the fully qualified name is used in a See Also section.  I built the html docs, and as it is, it correctly creates a link to the polyvander documentation.\n",
        "createdAt" : "2013-11-02T19:11:24Z",
        "updatedAt" : "2013-11-02T20:19:40Z",
        "lastEditedBy" : "8de63a41-1bc1-4e93-a2df-4f2f940433cf",
        "tags" : [
        ]
      },
      {
        "id" : "0008137e-cbca-42b9-a4f3-6352cec46cfa",
        "parentId" : "bf488e30-52ea-4437-ab1d-0c0b533e278b",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Well, I was wondering about that ;) If the documentation links correctly, let's go with what you had.\n",
        "createdAt" : "2013-11-02T20:39:26Z",
        "updatedAt" : "2013-11-02T20:39:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "253cff04bb83e0338755863653267c19856f79d4",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +496,500 @@    See Also\n    --------\n    polynomial.polynomial.polyvander\n\n    Examples"
  },
  {
    "id" : "87620fc7-2461-4935-9253-581e2e5dae70",
    "prId" : 9996,
    "prUrl" : "https://github.com/numpy/numpy/pull/9996#pullrequestreview-75888746",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27debe84-d9d1-41ba-9874-d1527698b176",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "The versionadded :: tag would be good (grep the code for examples).",
        "createdAt" : "2017-11-10T10:31:16Z",
        "updatedAt" : "2017-11-10T22:55:35Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "eb045fd1-689d-4671-ba68-dc446c5e5e4e",
        "parentId" : "27debe84-d9d1-41ba-9874-d1527698b176",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Ah, also, please format the commit message according to our contribution guide, such as \"ENH: ...\"",
        "createdAt" : "2017-11-10T10:44:04Z",
        "updatedAt" : "2017-11-10T22:55:35Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "13e5e86c-38f8-4109-b539-715429fd6a43",
        "parentId" : "27debe84-d9d1-41ba-9874-d1527698b176",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "(Then again, I guess nowadays, we can also do that during merging in the squashing, didn't really get used to that yet, heh)",
        "createdAt" : "2017-11-10T10:44:32Z",
        "updatedAt" : "2017-11-10T22:55:35Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "062072a0-a9ef-4065-b1ca-dc4b26b54624",
        "parentId" : "27debe84-d9d1-41ba-9874-d1527698b176",
        "authorId" : "fbe1dedf-887d-4cbf-a677-a17a9afe38f5",
        "body" : "1. I said `1.13.4` but feel like that isn't quite the right version?\r\n1. I just read the [commit guide][1], thanks!\r\n\r\n[1]: https://docs.scipy.org/doc/numpy-dev/dev/gitwash/development_workflow.html#writing-the-commit-message",
        "createdAt" : "2017-11-10T21:41:48Z",
        "updatedAt" : "2017-11-10T22:55:35Z",
        "lastEditedBy" : "fbe1dedf-887d-4cbf-a677-a17a9afe38f5",
        "tags" : [
        ]
      }
    ],
    "commit" : "59f7302e13e9b5e2eaa4c885fc606e53327f4266",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +156,160 @@    order : {'C', 'F'}, optional\n        Whether the output should be stored in row-major (C-style) or\n        column-major (Fortran-style) order in memory.\n\n        .. versionadded:: 1.14.0"
  },
  {
    "id" : "013aff11-4ccf-4bdc-907c-08426ce0b57e",
    "prId" : 13757,
    "prUrl" : "https://github.com/numpy/numpy/pull/13757#pullrequestreview-248813892",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d91f6325-0908-4dc4-ad99-9b51f0858c69",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I think this should be `if N == 2:`, no? For `N>2`, presumably `bins` is already a single array_like, which will be used for both axes.\r\n\r\nI wonder if it makes sense to port my test cases from astropy to numpy... see https://github.com/astropy/astropy/blob/11f12aae9b41395281dc4910dc6a7ec67c604dc8/astropy/units/tests/test_quantity_non_ufuncs.py from https://github.com/astropy/astropy/pull/8808",
        "createdAt" : "2019-06-12T13:06:02Z",
        "updatedAt" : "2019-06-12T13:06:02Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "e25f46f8-42d4-481c-854c-63378ec9d25c",
        "parentId" : "d91f6325-0908-4dc4-ad99-9b51f0858c69",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "(Though `histogram2d` has no coverage for `bins` yet - that was the reason for the issue...)",
        "createdAt" : "2019-06-12T13:06:44Z",
        "updatedAt" : "2019-06-12T13:06:44Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "a68ea9f0-8dc9-4d2c-960c-6c6cd35695b8",
        "parentId" : "d91f6325-0908-4dc4-ad99-9b51f0858c69",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "The new code shows up green in the coverage check. Do you mean the [TestHistogramFunctions](https://github.com/astropy/astropy/blob/11f12aae9b41395281dc4910dc6a7ec67c604dc8/astropy/units/tests/test_quantity_non_ufuncs.py#L1209) ?",
        "createdAt" : "2019-06-12T14:22:04Z",
        "updatedAt" : "2019-06-12T14:22:04Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "321518b2-992b-4ad7-b4e4-b233d7450439",
        "parentId" : "d91f6325-0908-4dc4-ad99-9b51f0858c69",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I meant the whole lot...  Adapting it to a more minimal subclass (perhaps a fake `Quantity`). \r\n\r\nBut it may well be much easier to rely on astropy and other projects that use `__array_function__` to do the testing.\r\n\r\n",
        "createdAt" : "2019-06-12T14:31:07Z",
        "updatedAt" : "2019-06-12T14:31:08Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "5df30449-1cc7-45d9-b0f0-66386b4e32fa",
        "parentId" : "d91f6325-0908-4dc4-ad99-9b51f0858c69",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "There are tests in astropy that failed before this PR and pass now?",
        "createdAt" : "2019-06-12T14:43:10Z",
        "updatedAt" : "2019-06-12T14:43:10Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "a00d630c-4940-4017-83db-9ef2d1b8b016",
        "parentId" : "d91f6325-0908-4dc4-ad99-9b51f0858c69",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "No, not yet, while writing tests I realized that there was a problem for `histogram*`, but I'm focussing on first getting the majority in. Adding further test cases is meant to be done as follow-up: https://github.com/astropy/astropy/issues/8825",
        "createdAt" : "2019-06-12T14:48:26Z",
        "updatedAt" : "2019-06-12T14:48:26Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8b3091c3bfd406bd9d40303960f6461afe65fc6",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +574,578 @@    except TypeError:\n        N = 1\n    if N != 1 and N != 2:\n        yield from bins  # bins=[x, y]\n    else:"
  },
  {
    "id" : "27c907e7-5b01-44bf-b1a3-f83e84173a5d",
    "prId" : 13813,
    "prUrl" : "https://github.com/numpy/numpy/pull/13813#pullrequestreview-253501011",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6e2d80b-a1a1-4f03-9a88-a657c03e6137",
        "parentId" : null,
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Let me suggest an alternative fix:\r\n```python\r\n    if N != 1 and N != 2:\r\n        yield bins\r\n    else:\r\n        yield from bins  # bins=[x, y]\r\n```\r\n\r\nI like this better because the logic still matches up line for line with the function, which should make this easier to modify in the future.",
        "createdAt" : "2019-06-23T18:05:36Z",
        "updatedAt" : "2019-06-23T18:09:53Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "7f8293be-79be-4187-aaa8-5d2dc4ff7caa",
        "parentId" : "a6e2d80b-a1a1-4f03-9a88-a657c03e6137",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Looked at this again, and I think my implementation is right: for the `N=1` case we should just `yield bins` rather than `from bins`, since bins could very well just be a single integer (i.e., not iterable); only for a 2-element iterable does it contain separate items that could be overwritten).",
        "createdAt" : "2019-06-24T15:48:37Z",
        "updatedAt" : "2019-06-24T15:48:37Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "22d5415f4e5e2e7009ccd86ac7915ba43a0b7d97",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +574,578 @@    except TypeError:\n        N = 1\n    if N == 2:\n        yield from bins  # bins=[x, y]\n    else:"
  },
  {
    "id" : "f9aef8a6-59bd-4fb8-bf39-3c6c3431fe1a",
    "prId" : 18176,
    "prUrl" : "https://github.com/numpy/numpy/pull/18176#pullrequestreview-575482559",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e27536d-69e0-4d39-bd87-2a3d15036924",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "style nit: \r\n```suggestion\r\n    tri_ = not tri(n, m, k=k - 1, dtype=bool)\r\n```",
        "createdAt" : "2021-01-25T07:26:37Z",
        "updatedAt" : "2021-01-25T07:26:58Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "6f6b09db-9d1f-451c-9769-313b8d200b04",
        "parentId" : "7e27536d-69e0-4d39-bd87-2a3d15036924",
        "authorId" : "cd72ca54-ff99-4b34-9924-944e16c11559",
        "body" : "Did this work for you? \r\n\r\n`not` does not seem to be elementwise so I think we'll stick to `~`:\r\n```python\r\nnot np.tri(2, 2, k=0, dtype=bool)\r\nTraceback (most recent call last):\r\n\r\n  File \"<ipython-input-15-170be892b154>\", line 1, in <module>\r\n    not np.tri(2, 2, k=0, dtype=bool)\r\n\r\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\r\n```",
        "createdAt" : "2021-01-25T09:21:20Z",
        "updatedAt" : "2021-01-25T09:21:21Z",
        "lastEditedBy" : "cd72ca54-ff99-4b34-9924-944e16c11559",
        "tags" : [
        ]
      },
      {
        "id" : "5e45972c-e9e2-4915-bb28-9323d968c100",
        "parentId" : "7e27536d-69e0-4d39-bd87-2a3d15036924",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Yeah, @mattip's suggestion is incorrect here, I assume they misread `tri_` as being a scalar.",
        "createdAt" : "2021-01-25T10:37:59Z",
        "updatedAt" : "2021-01-25T10:37:59Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "57b4ba2d-37e2-4a15-a560-d98546b1444e",
        "parentId" : "7e27536d-69e0-4d39-bd87-2a3d15036924",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "sorry.",
        "createdAt" : "2021-01-25T15:01:07Z",
        "updatedAt" : "2021-01-25T15:01:07Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "2951e733d9ffa03276d6859721b57209234bea12",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1015,1019 @@\n    \"\"\"\n    tri_ = ~tri(n, m, k=k - 1, dtype=bool)\n\n    return tuple(broadcast_to(inds, tri_.shape)[tri_]"
  },
  {
    "id" : "4c9de0c4-7eb9-4707-b6c7-50f8096b8779",
    "prId" : 18959,
    "prUrl" : "https://github.com/numpy/numpy/pull/18959#pullrequestreview-655094131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b046d33-d701-4f06-81b8-cc625a85b70d",
        "parentId" : null,
        "authorId" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "body" : "Just a very minor suggestion, but you can pull the explanatory text outside of executable prompts to make it stand out a little more:\r\n\r\n```suggestion\r\n\r\n    Histogram does not follow Cartesian convention (see Notes),\r\n    therefore transpose H for visualization purposes.\r\n    \r\n    >>> H = H.T\r\n```\r\n\r\nOne thing to be aware for this is that there must be blank lines between the executable prompts and the text.",
        "createdAt" : "2021-05-09T16:34:23Z",
        "updatedAt" : "2021-05-09T16:34:30Z",
        "lastEditedBy" : "2bbfef14-ac5b-44ae-a2a6-925f6f5b619a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fa54380655f964f3d7d15c4e8adf71169f2dc58",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +708,712 @@    >>> # Histogram does not follow Cartesian convention (see Notes),\n    >>> # therefore transpose H for visualization purposes.\n    >>> H = H.T\n\n    :func:`imshow <matplotlib.pyplot.imshow>` can only display square bins:"
  }
]