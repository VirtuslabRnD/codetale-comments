[
  {
    "id" : "3c97d8f0-b537-4f86-8d49-fb7b41d7d538",
    "prId" : 3534,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f11c668-5f3c-4ce4-92ee-8687835590d4",
        "parentId" : null,
        "authorId" : "2035b7cb-d7e4-423a-a3b4-2c5117021872",
        "body" : "shouldn't there be a check if any(mask) and if not just return a, None to avoid any custom operations in functions using _replace_nan and comparing against None?\n",
        "createdAt" : "2013-07-19T17:00:52Z",
        "updatedAt" : "2013-08-14T22:00:55Z",
        "lastEditedBy" : "2035b7cb-d7e4-423a-a3b4-2c5117021872",
        "tags" : [
        ]
      },
      {
        "id" : "b11ca615-1def-4a76-aa7b-684657b3405c",
        "parentId" : "3f11c668-5f3c-4ce4-92ee-8687835590d4",
        "authorId" : "2035b7cb-d7e4-423a-a3b4-2c5117021872",
        "body" : "and do that before copying possibly?\n",
        "createdAt" : "2013-07-19T17:03:14Z",
        "updatedAt" : "2013-08-14T22:00:55Z",
        "lastEditedBy" : "2035b7cb-d7e4-423a-a3b4-2c5117021872",
        "tags" : [
        ]
      },
      {
        "id" : "a4aacd65-7811-4527-bc5d-fdb355d674ca",
        "parentId" : "3f11c668-5f3c-4ce4-92ee-8687835590d4",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "That adds an extra mask.any() while perhaps avoiding a copy. The savings would depend on how often a copy is made. My assumption was that making a copy would be the usual thing when calling the nan-functions, but in the absence of actual data that is just speculation.\n",
        "createdAt" : "2013-08-01T20:12:54Z",
        "updatedAt" : "2013-08-14T22:00:55Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc73e1b104cf59f936e3c2bb5cfc3c0e147f99de",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +65,69 @@        a = np.array(a, subok=True)\n\n    mask = np.isnan(a)\n    np.copyto(a, val, where=mask)\n    return a, mask"
  },
  {
    "id" : "302f7e5e-0a47-4213-88cf-6791ec414118",
    "prId" : 3534,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a512afce-d9f9-4095-9eb7-1d4e09f2f7d8",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK, I know this is a damn tiny corner cases... If we already have inf in this kind of function, the argmax may return the index to the NaN instead of the inf. Getting around it is likely tedious (would require getting the `mask.all(axis=axis)` by looking at the value of the mask `ind` points to instead), but should we note it in the docs?\n",
        "createdAt" : "2013-08-11T11:07:30Z",
        "updatedAt" : "2013-08-14T22:00:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "1063f5c0-2b1a-4f61-826a-22715711f405",
        "parentId" : "a512afce-d9f9-4095-9eb7-1d4e09f2f7d8",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Ah, it would require both... first checking mask value and then a further inspection of `mask.all(axis=axis)`...\n",
        "createdAt" : "2013-08-11T11:09:36Z",
        "updatedAt" : "2013-08-14T22:00:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "d85ebc81-a963-42c3-9fb5-141fd3731a7f",
        "parentId" : "a512afce-d9f9-4095-9eb7-1d4e09f2f7d8",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, good point. I think doing this can be made to depend on a having an inf value, so that should make most cases reasonable efficient.\n",
        "createdAt" : "2013-08-13T00:35:11Z",
        "updatedAt" : "2013-08-14T22:00:56Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c643bf45-57f3-41e1-98e6-e9b3f906ce1c",
        "parentId" : "a512afce-d9f9-4095-9eb7-1d4e09f2f7d8",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Or maybe not :(. Hmm...\n",
        "createdAt" : "2013-08-13T00:53:19Z",
        "updatedAt" : "2013-08-14T22:00:56Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ec6e9758-c4d1-4e1e-9d63-e564f134e8c9",
        "parentId" : "a512afce-d9f9-4095-9eb7-1d4e09f2f7d8",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I'm inclined to just document that is might be a problem. Because this stuff is much easier to do in C, the best solution is probably to have a C module of stat functions. The stat functions in _methods.py aren't that great either, and could use a C implementation. Maybe it is time to look at adapting and merging @kwgoodman work.\n",
        "createdAt" : "2013-08-13T04:03:56Z",
        "updatedAt" : "2013-08-14T22:00:56Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc73e1b104cf59f936e3c2bb5cfc3c0e147f99de",
    "line" : 343,
    "diffHunk" : "@@ -1,1 +341,345 @@    # May later want to do something special for all nan slices.\n    mask = mask.all(axis=axis)\n    ind = np.argmin(a, axis)\n    if mask.any():\n        warnings.warn(\"All NaN axis detected.\", NanWarning)"
  },
  {
    "id" : "82ed728e-32e3-4de0-88a2-ab390ba2a0d3",
    "prId" : 4734,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da68eaf8-a699-4671-acd9-d3e32de71295",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Could use `a.size == 0`.\n",
        "createdAt" : "2014-05-26T14:22:37Z",
        "updatedAt" : "2014-05-26T14:22:37Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "19aa50901e96a8428950da062d0d60c760232395",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +853,857 @@    # apply_along_axis in _nanpercentile doesn't handle empty arrays well,\n    # so deal them upfront\n    if 0 in a.shape:\n        return np.nanmean(a, axis, out=out, keepdims=keepdims)\n"
  },
  {
    "id" : "69badc58-0a6e-4934-9162-c88916570a60",
    "prId" : 4734,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "defa191d-8f37-4c08-a2dd-b7821e806c07",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Out can be 0d, no? Then it should be `out[...] = result`.\n",
        "createdAt" : "2014-05-26T14:24:16Z",
        "updatedAt" : "2014-05-26T14:24:16Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "d8d7005d-7dd9-4d29-9ed9-5a5844ad4be1",
        "parentId" : "defa191d-8f37-4c08-a2dd-b7821e806c07",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "0d arrays are caught before this function and thrown into nanmeans so the logic does not need to be duplicated\n",
        "createdAt" : "2014-05-26T16:29:11Z",
        "updatedAt" : "2014-05-26T16:29:11Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "19aa50901e96a8428950da062d0d60c760232395",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +884,888 @@\n    if out is not None:\n        out[:] = result\n    return result\n"
  },
  {
    "id" : "305b5c66-44f6-4d10-b470-2dd8ebb890e2",
    "prId" : 4760,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2657cbd9-bce5-4f89-952a-828acfcef036",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Might mention nanmedian for parameter documentation.\n",
        "createdAt" : "2014-06-02T20:24:08Z",
        "updatedAt" : "2014-06-02T21:47:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "99ff7a7cad36fcb5ba239bccd87a4f01ad25a1c1",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +656,660 @@    \"\"\"\n    sort + indexing median, faster for small medians along multiple dimensions\n    due to the high overhead of apply_along_axis\n    see nanmedian for parameter usage\n    \"\"\""
  },
  {
    "id" : "a836a90e-ee30-445f-b9ed-bd83373b993b",
    "prId" : 5981,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59204040-c982-4e83-a3df-8d29b3757fb6",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Just to make sure, but `q` may only be 0-D or 1-D at this point?! Could you maybe add a test for the higher dimensional case.\n",
        "createdAt" : "2015-06-29T23:41:36Z",
        "updatedAt" : "2016-01-12T22:46:12Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "b0e2e831-8426-4a45-8e3d-24cf285f5a89",
        "parentId" : "59204040-c982-4e83-a3df-8d29b3757fb6",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Or maybe we do just don't support the higher dim case for nanpercentile.\n",
        "createdAt" : "2015-06-29T23:42:31Z",
        "updatedAt" : "2016-01-12T22:46:12Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "b678c4e5-a97e-4e01-8600-230aeb12b49b",
        "parentId" : "59204040-c982-4e83-a3df-8d29b3757fb6",
        "authorId" : "762511cd-89b9-4cd9-99b4-b1c164a554b3",
        "body" : "I didn't consider that because it doesn't appear that percentile supports the higher dimensional case either.  The following results in a ValueError being raised.\n\n``` python\nimport numpy as np\ndata = np.eye(5, dtype=np.float64)\nnp.percentile(data, [[60, 80], [90, 100]], keepdims=True, axis=1)\n```\n",
        "createdAt" : "2015-06-30T00:02:32Z",
        "updatedAt" : "2016-01-12T22:46:12Z",
        "lastEditedBy" : "762511cd-89b9-4cd9-99b4-b1c164a554b3",
        "tags" : [
        ]
      },
      {
        "id" : "a8501b92-f4a8-4368-a757-4625b45ada66",
        "parentId" : "59204040-c982-4e83-a3df-8d29b3757fb6",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Right, thought we had added that, but must have been some other thing (maybe it was just how q is interpreted if 1-d).\n",
        "createdAt" : "2015-06-30T07:51:28Z",
        "updatedAt" : "2016-01-12T22:46:12Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e699948c2b6098ec1a6e135241bc24e4df9a4d1",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +999,1003 @@            return np.nan\n        else:\n            return np.nan * np.ones((len(q),))\n    elif s.size == 0:\n        return np.percentile(arr1d, q, overwrite_input=overwrite_input,"
  }
]