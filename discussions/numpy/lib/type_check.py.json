[
  {
    "id" : "7116f6ee-7940-42de-944d-dff2549b2b32",
    "prId" : 6004,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8899cd9-c59f-4a15-a9e7-a088dbdbbe72",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Is the `None` needed?\n",
        "createdAt" : "2015-06-22T16:46:55Z",
        "updatedAt" : "2015-06-22T16:46:55Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "3bd52f2d-ce8a-4110-bfb8-0211053cc4e8",
        "parentId" : "d8899cd9-c59f-4a15-a9e7-a088dbdbbe72",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Yes, since the number for complex and float has to be the same; e.g., important for\n\n```\nnp.common_type(<some complex256 array>, <some float32 array>)\n```\n\n(And also, if someone ever implements `complex32`, we're ready for it!).\n",
        "createdAt" : "2015-06-22T17:22:11Z",
        "updatedAt" : "2015-06-22T17:22:11Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "157e396673c4992e97a522dd9f350b480c4cb6c6",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +534,538 @@#determine the \"minimum common type\" for a group of arrays.\narray_type = [[_nx.half, _nx.single, _nx.double, _nx.longdouble],\n              [None, _nx.csingle, _nx.cdouble, _nx.clongdouble]]\narray_precision = {_nx.half: 0,\n                   _nx.single: 1,"
  },
  {
    "id" : "e6857349-5ee5-4e43-9384-0a04f3936585",
    "prId" : 7936,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef94e956-3cb6-43b4-9b48-b5f9dc264ac9",
        "parentId" : null,
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "If an exception does not get raised here, I'm pretty sure nothing gets returned from this function.\n\nThis is good example of why we insist on unit tests :)\n",
        "createdAt" : "2016-08-14T23:10:15Z",
        "updatedAt" : "2016-08-15T04:38:19Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      }
    ],
    "commit" : "60b3727e6937891a9b91bac4ffb097bb3b5bd25d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +268,272 @@    \"\"\"\n    try:\n        dtype = x.dtype\n    except AttributeError:\n        dtype = asarray(x).dtype"
  },
  {
    "id" : "f116dcf0-21c3-4b3d-9401-5d73a2845faf",
    "prId" : 8602,
    "prUrl" : "https://github.com/numpy/numpy/pull/8602#pullrequestreview-21310897",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca94c435-77d9-425d-9864-88352d36e8e8",
        "parentId" : null,
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "How about instead making this `type_ = x.dtype.type` and reusing `type_` below?",
        "createdAt" : "2017-02-10T18:26:53Z",
        "updatedAt" : "2017-02-10T22:15:13Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "592ce15b-0085-4ac0-b32a-8d10477afa48",
        "parentId" : "ca94c435-77d9-425d-9864-88352d36e8e8",
        "authorId" : "60f9dccf-36d1-4227-b134-14eeecea953a",
        "body" : "Will do.",
        "createdAt" : "2017-02-10T18:28:56Z",
        "updatedAt" : "2017-02-10T22:15:13Z",
        "lastEditedBy" : "60f9dccf-36d1-4227-b134-14eeecea953a",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb1c471a299c0118d890988f4bfb7df8eca6595d",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +268,272 @@    \"\"\"\n    try:\n        dtype = x.dtype\n        type_ = dtype.type\n    except AttributeError:"
  },
  {
    "id" : "cd37f4f0-def7-4091-8a4d-e5a675635de3",
    "prId" : 10441,
    "prUrl" : "https://github.com/numpy/numpy/pull/10441#pullrequestreview-93539271",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e880ff1-c3a3-4c37-84fd-d40a16003a59",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Scalars are effectively already considered array_like, I think?",
        "createdAt" : "2018-01-20T01:01:21Z",
        "updatedAt" : "2018-02-02T07:51:11Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1243c29b-2ffe-4d41-a813-3a7cd2e803e0",
        "parentId" : "4e880ff1-c3a3-4c37-84fd-d40a16003a59",
        "authorId" : "db330ada-3b3d-48c4-9417-1d1f39e1e756",
        "body" : "I found 13 occurrences of `scalar or array_like` in the docs, so I decided to place it here as well to make it clearer. I can remove it if you think it is redundant though.",
        "createdAt" : "2018-01-20T02:13:14Z",
        "updatedAt" : "2018-02-02T07:51:11Z",
        "lastEditedBy" : "db330ada-3b3d-48c4-9417-1d1f39e1e756",
        "tags" : [
        ]
      },
      {
        "id" : "0dcba5df-3fc0-470c-adb7-19e9d7a829dd",
        "parentId" : "4e880ff1-c3a3-4c37-84fd-d40a16003a59",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Sounds like a fair argument",
        "createdAt" : "2018-02-02T07:44:07Z",
        "updatedAt" : "2018-02-02T07:51:11Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "30ebcce3609e835ce7b8b9cc0c64f6fe184eba7b",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +344,348 @@    Parameters\n    ----------\n    x : scalar or array_like\n        Input data.\n    copy : bool, optional"
  },
  {
    "id" : "5df8260e-df4e-451d-bcf0-c1f9ecefac19",
    "prId" : 10441,
    "prUrl" : "https://github.com/numpy/numpy/pull/10441#pullrequestreview-90300800",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f5d55d2-aa02-4c0a-afa9-3d5395b6eb70",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "No need to even check `isscalar` - `x[()]` works in all cases",
        "createdAt" : "2018-01-20T02:42:24Z",
        "updatedAt" : "2018-02-02T07:51:11Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5ae84ed7-7a4e-466e-a588-6ee1534b9f23",
        "parentId" : "0f5d55d2-aa02-4c0a-afa9-3d5395b6eb70",
        "authorId" : "db330ada-3b3d-48c4-9417-1d1f39e1e756",
        "body" : "Well, removing `if isscalar else x` broke `test_type_check.py:369` by copying instead of replacing in-place :x",
        "createdAt" : "2018-01-20T02:52:18Z",
        "updatedAt" : "2018-02-02T07:51:11Z",
        "lastEditedBy" : "db330ada-3b3d-48c4-9417-1d1f39e1e756",
        "tags" : [
        ]
      },
      {
        "id" : "b3c76aa5-f7c2-41ab-8454-be7e3404c554",
        "parentId" : "0f5d55d2-aa02-4c0a-afa9-3d5395b6eb70",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> by copying instead of replacing in-place\r\n\r\nThat's not true - it did replace in-place, but it created a new view into the original before returning. I suppose that's still a mostly-unjustifiable compatibility change though, so what you have is fine.",
        "createdAt" : "2018-01-20T10:54:43Z",
        "updatedAt" : "2018-02-02T07:51:11Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "30ebcce3609e835ce7b8b9cc0c64f6fe184eba7b",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +397,401 @@\n    if not issubclass(xtype, _nx.inexact):\n        return x[()] if isscalar else x\n\n    iscomplex = issubclass(xtype, _nx.complexfloating)"
  },
  {
    "id" : "af661a1d-7819-4af7-8ccc-2cca1ef907ec",
    "prId" : 13219,
    "prUrl" : "https://github.com/numpy/numpy/pull/13219#pullrequestreview-224669420",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8274e8a-15b2-48a3-bc56-7640668f6153",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I don't see the point of splitting these 3 lines into 6?",
        "createdAt" : "2019-04-08T15:38:39Z",
        "updatedAt" : "2019-04-09T16:49:44Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "d09f1e59-e347-488d-9a47-5ce36b0c611f",
        "parentId" : "c8274e8a-15b2-48a3-bc56-7640668f6153",
        "authorId" : "8dc420f2-7350-4daa-a8d6-23c61ce13573",
        "body" : "This is to maintain what the user has chosen. If there is only this:\r\n\r\n```\r\n        _nx.copyto(d, nan, where=idx_nan)\r\n        _nx.copyto(d, maxf, where=idx_posinf)\r\n        _nx.copyto(d, minf, where=idx_neginf)\r\n```\r\n\r\nIf in the keywords one chooses `nan=np.inf` and `posinf=-999` the following array:\r\n`a = [np.nan, 10, np.inf]`\r\n\r\nwould be converted to:\r\n\r\n`a = [-999, 10, -999]`\r\n\r\nSo the `nan` keyword would be overwritten as it is the first being executed. I think this wouldn't be the expected behavior. I would expect:\r\n\r\n`a = [np.inf, 10, -999]`\r\n\r\nThis way it is necessary to create temporary boolean arrays but I think it makes more sense.",
        "createdAt" : "2019-04-09T06:11:01Z",
        "updatedAt" : "2019-04-09T16:49:44Z",
        "lastEditedBy" : "8dc420f2-7350-4daa-a8d6-23c61ce13573",
        "tags" : [
        ]
      },
      {
        "id" : "49ba5f3f-5138-4454-aa41-d2864493918a",
        "parentId" : "c8274e8a-15b2-48a3-bc56-7640668f6153",
        "authorId" : "8dc420f2-7350-4daa-a8d6-23c61ce13573",
        "body" : "Also, this is why I've added these tests:\r\n\r\nhttps://github.com/numpy/numpy/pull/13219/files/f486ca24f20ca5d4de43191ef2d647c87c37ac1a#diff-c04fcf6a62bc1bda31fd3a1486786567R450",
        "createdAt" : "2019-04-09T06:18:01Z",
        "updatedAt" : "2019-04-09T16:49:44Z",
        "lastEditedBy" : "8dc420f2-7350-4daa-a8d6-23c61ce13573",
        "tags" : [
        ]
      },
      {
        "id" : "5c6a840b-ab0d-4648-99a4-73dd49b09b24",
        "parentId" : "c8274e8a-15b2-48a3-bc56-7640668f6153",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Oh right, that makes sense, thanks",
        "createdAt" : "2019-04-09T21:40:32Z",
        "updatedAt" : "2019-04-09T21:40:32Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "000939ad2d6ec57ca1ab173243ae56350cd3b97f",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +476,480 @@        _nx.copyto(d, nan, where=idx_nan)\n        _nx.copyto(d, maxf, where=idx_posinf)\n        _nx.copyto(d, minf, where=idx_neginf)\n    return x[()] if isscalar else x\n"
  },
  {
    "id" : "810b410e-01b3-4728-acdd-a0640f001eab",
    "prId" : 14219,
    "prUrl" : "https://github.com/numpy/numpy/pull/14219#pullrequestreview-272400159",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dea7457c-fa1e-4e11-a074-88a97f19c404",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, you need blank lines before these. Wonder why circleCI is not complaining? @mattip.",
        "createdAt" : "2019-08-07T19:48:05Z",
        "updatedAt" : "2019-08-08T07:58:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "49086c03-fa81-465d-a6ee-59cadff62c03",
        "parentId" : "dea7457c-fa1e-4e11-a074-88a97f19c404",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "The directive is interpreted as text, with no special formatting. See the [rendered result](https://8640-908607-gh.circle-artifacts.com/0/home/circleci/repo/doc/build/html/reference/generated/numpy.nan_to_num.html?highlight=nan_to_num#numpy.nan_to_num)",
        "createdAt" : "2019-08-08T02:29:32Z",
        "updatedAt" : "2019-08-08T07:58:02Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "5603da1e-fc93-4fc6-a16e-cac5890840b0",
        "parentId" : "dea7457c-fa1e-4e11-a074-88a97f19c404",
        "authorId" : "70f90e3b-5082-4af3-82bc-c5abe1bdfa0c",
        "body" : "I wasn't sure, thanks for pointing out @charris ",
        "createdAt" : "2019-08-08T07:58:24Z",
        "updatedAt" : "2019-08-08T07:58:24Z",
        "lastEditedBy" : "70f90e3b-5082-4af3-82bc-c5abe1bdfa0c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9d635706820890ebaca2d299f1cbea209c122d5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +397,401 @@        Default is True.\n        \n        .. versionadded:: 1.13\n    nan : int, float, optional\n        Value to be used to fill NaN values. If no value is passed "
  },
  {
    "id" : "9d4ec648-82d4-4d33-b511-e1a751dadb32",
    "prId" : 14967,
    "prUrl" : "https://github.com/numpy/numpy/pull/14967#pullrequestreview-321953510",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0392235d-79fc-4753-b0ff-40f237cff9d9",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Better as:\r\n`return min(intersection, key=_typecodes_by_elsize.index)`",
        "createdAt" : "2019-11-24T10:33:15Z",
        "updatedAt" : "2019-11-24T10:33:15Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b83bf91b2e4f943ba02d000f2a6fb7d51394197",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +76,80 @@    if 'F' in intersection and 'd' in intersection:\n        return 'D'\n    return min((_typecodes_by_elsize.index(t), t) for t in intersection)[1]\n\n"
  }
]