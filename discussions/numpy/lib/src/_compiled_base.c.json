[
  {
    "id" : "3c4c5be2-0e6e-433c-a24b-8a9cb1e23f44",
    "prId" : 163,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ca018e5-369b-4d48-ae4a-c791aa71d9b7",
        "parentId" : null,
        "authorId" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "body" : "It would be good to put a descriptive comment before this function. The comment should describe what the function's purpose is, and what it does at a very high level. The comment at the start of the function body is too low level, and reads more like a program itself than is good.\n",
        "createdAt" : "2012-01-24T22:55:08Z",
        "updatedAt" : "2012-01-25T16:50:37Z",
        "lastEditedBy" : "95359633-f0b0-4899-8e46-e2146fd11511",
        "tags" : [
        ]
      }
    ],
    "commit" : "67ba2871d104513e8c25aded9fb47a99108d8688",
    "line" : null,
    "diffHunk" : "@@ -1,1 +312,316 @@ */\nstatic void\narr_insert_loop(char *mptr, char *vptr, char *input_data, char *zero,\n                char *avals_data, int melsize, int delsize, int objarray,\n                int totmask, int numvals, int nd, npy_intp *instrides,"
  },
  {
    "id" : "0f8b0d4c-dd0a-42de-b65f-c1b0b40ca49e",
    "prId" : 4247,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c831309-4e7b-406a-ae56-a795518b0d03",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks OK. The amount of indexing can be decreased by a factor of two though. How about something like\n\n```\n    last = a[0];\n    for (i = 1; (i < lena) && (a[i] == last); i++);\n    if (i == lena) {\n        return 1;\n    }\n    next = a[i];\n    if (next > last) {\n        for (i = i + 1; i < lena; i++) {\n            last = next;\n            next = a[i];\n            if (next < last) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n    else {\n        for (i = i + 1; i < lena; i++) {\n            last = next;\n            next = a[i];\n            if (next > last) {\n                return 0;\n            }\n        }\n        return -1;\n    }\n```\n",
        "createdAt" : "2014-02-11T05:19:32Z",
        "updatedAt" : "2014-02-12T00:38:45Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "71b09668-1341-4bca-a8bd-2cdb6ed48db2",
        "parentId" : "5c831309-4e7b-406a-ae56-a795518b0d03",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "while I'd say its a compiler issue this code optimizes worse than jaime's with gcc, though it probably makes no real difference in performance (just one extra pipelineable mov)\n",
        "createdAt" : "2014-02-11T17:43:49Z",
        "updatedAt" : "2014-02-12T00:38:45Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "85212e0a-29a2-4ac6-ba86-91ce671f9453",
        "parentId" : "5c831309-4e7b-406a-ae56-a795518b0d03",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "Excuse my ignorance, but what's the source of the \"extra pipelineable mov\"?\n",
        "createdAt" : "2014-02-11T18:17:33Z",
        "updatedAt" : "2014-02-12T00:38:45Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "5d36c180-b4a2-4800-b884-d87337ddd3d3",
        "parentId" : "5c831309-4e7b-406a-ae56-a795518b0d03",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I've been tempted to look at the generated code. The one with less indexing should have more register operations and fewer loads into the fpu registers, but much depends on how clever the compiler is in dealing with the indexing. What optimization level did you use?\n",
        "createdAt" : "2014-02-11T18:23:31Z",
        "updatedAt" : "2014-02-12T00:38:45Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "051c54c8-9d28-4361-8df7-dad8d23e19a6",
        "parentId" : "5c831309-4e7b-406a-ae56-a795518b0d03",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "don't know, the code is semantically identical I think, maybe integer overflow flags or some details concerning sequence points could cause the difference.\nWhat counts is readability in which respect I'm fine with both approaches.\n",
        "createdAt" : "2014-02-11T18:25:15Z",
        "updatedAt" : "2014-02-12T00:38:45Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "32e2db65-de5e-4616-bf60-d19e39906aa1",
        "parentId" : "5c831309-4e7b-406a-ae56-a795518b0d03",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "For instance, here is the third loop with `-O3`\n\n```\n.L15:\n    addq    $8, %rdx\n    movsd   -8(%rdx), %xmm0\n    ucomisd %xmm1, %xmm0\n    ja  .L24\n    movapd  %xmm0, %xmm1\n.L14:\n    cmpq    %rax, %rdx\n    jne .L15\n```\n\nCompare to\n\n```\n.L55:\n    xorl    %eax, %eax\n.L41:\n    rep ret\n    .p2align 4,,10\n    .p2align 3\n.L60:\n    cmpl    %edx, %esi\n    jle .L54\n    addl    $1, %edx\n    movslq  %edx, %rax\n    leaq    (%rdi,%rax,8), %rax\n    ucomisd (%rax), %xmm1\n    jbe .L48\n    jmp .L55\n    .p2align 4,,10\n    .p2align 3\n.L47:\n    movsd   (%rax), %xmm0\n    addq    $8, %rax\n    addl    $1, %edx\n    ucomisd (%rax), %xmm0\n    ja  .L55\n```\n\nThis with gcc version 4.8.2 20131212 (Red Hat 4.8.2-7) (GCC) .\n\n@jaimefrio Don't worry, we're just playing here, although there is much to learn be reading way too much generated assembly ;)\n",
        "createdAt" : "2014-02-11T18:52:59Z",
        "updatedAt" : "2014-02-12T00:38:45Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "eae6d8e8-d144-4095-afd6-592cefa0432d",
        "parentId" : "5c831309-4e7b-406a-ae56-a795518b0d03",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "I got this using minimal loop:\n\n```\n  70:   f2 0f 10 07             movsd  (%rdi),%xmm0\n  74:   48 83 c7 08             add    $0x8,%rdi\n  78:   66 0f 2e 07             ucomisd (%rdi),%xmm0\n  7c:   77 12                   ja     90 <g+0x40>\n  7e:   48 39 c7                cmp    %rax,%rdi\n  81:   75 ed                   jne    70 <g+0x20>\n```\n\nvs yours:\n\n```\n  20:   48 83 c7 08             add    $0x8,%rdi\n  24:   f2 0f 10 47 f8          movsd  -0x8(%rdi),%xmm0\n  29:   66 0f 2e c1             ucomisd %xmm1,%xmm0\n  2d:   77 11                   ja     40 <f+0x40>\n  2f:   66 0f 28 c8             movapd %xmm0,%xmm1\n  33:   48 39 c7                cmp    %rax,%rdi\n  36:   75 e8                   jne    20 <f+0x20>\n```\n\nthough the longer code is probably faster as avoids a memory to register move for a register register move the latter has lower latency even if its in the L1 cache. So you win :)\n",
        "createdAt" : "2014-02-11T19:01:33Z",
        "updatedAt" : "2014-02-12T00:38:45Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "0189c85f-8cf8-47ae-b3ee-a802b475ebac",
        "parentId" : "5c831309-4e7b-406a-ae56-a795518b0d03",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The compare register to memory `ucomisd (%rdi),%xmm0` in the first example is also probably slower than the register to register  `ucomisd %xmm1,%xmm0` in the second.\n",
        "createdAt" : "2014-02-11T19:10:17Z",
        "updatedAt" : "2014-02-12T00:38:45Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8975ff262292d760b533bb433de50b686b15f9e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +104,108 @@        return -1;\n    }\n}\n\n/* find the index of the maximum element of an integer array */"
  },
  {
    "id" : "ec06612d-21d4-4402-b6e6-c77d57c01118",
    "prId" : 5101,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4011907e-406b-41ab-83b3-ffd3838a7637",
        "parentId" : null,
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "`PyArray_SearchSorted` will release the GIL for the heavy lifting of this function. The other potentially lengthy operation is this subtraction from the array length for decreasing `bins` arrays. Is it worth releasing the GIL here?\n",
        "createdAt" : "2014-09-23T06:33:33Z",
        "updatedAt" : "2014-09-26T01:34:26Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "40176fec-cf73-4060-b23f-84c664885a21",
        "parentId" : "4011907e-406b-41ab-83b3-ffd3838a7637",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "probably not really significant but also does no harm, there is a macro that only releases it if a counter is higher than 500 to avoid unnecessary overheads, that can be used here.\n",
        "createdAt" : "2014-09-23T07:32:50Z",
        "updatedAt" : "2014-09-26T01:34:26Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "0730abe10fb88e73f5acea63d69f3b771bdde223",
    "line" : 266,
    "diffHunk" : "@@ -1,1 +281,285 @@\n    /* If bins is decreasing, ret has bins from end, not start */\n    if (monotonic == -1) {\n        npy_intp *ret_data =\n                        (npy_intp *)PyArray_DATA((PyArrayObject *)ret);"
  },
  {
    "id" : "3cdb0cad-0964-4570-847e-5d48c3e5508a",
    "prId" : 5101,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a450c98-09ed-42c6-8dea-b56471837ef8",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "your new searchsorted is typed, so do we still need to cast to double?\n",
        "createdAt" : "2014-09-23T07:39:55Z",
        "updatedAt" : "2014-09-26T01:34:26Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "43cf961c-a2eb-4e95-abfd-e0035a2feec8",
        "parentId" : "8a450c98-09ed-42c6-8dea-b56471837ef8",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "hm would also need a typed `check_array_monotonic` probably not worth the effort, btw that check could possibly also release the GIL\n",
        "createdAt" : "2014-09-23T07:43:48Z",
        "updatedAt" : "2014-09-26T01:34:26Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "0730abe10fb88e73f5acea63d69f3b771bdde223",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +223,227 @@    /* PyArray_SearchSorted will make `x` contiguous even if we don't */\n    arr_x = (PyArrayObject *)PyArray_FROMANY(obj_x, NPY_DOUBLE, 0, 0,\n                                             NPY_ARRAY_CARRAY_RO);\n    if (arr_x == NULL) {\n        goto fail;"
  },
  {
    "id" : "1a82470d-e2c7-4baa-85ce-94b52e63c1f7",
    "prId" : 5319,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2c2ee5a-7573-483f-821d-80304d4796df",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Note it doesn't handle negative values of `axis`.\n",
        "createdAt" : "2014-11-29T20:08:23Z",
        "updatedAt" : "2014-11-30T21:20:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c64a1aec-3e27-471a-b678-6e0d8d9ea8db",
        "parentId" : "c2c2ee5a-7573-483f-821d-80304d4796df",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "I think that gets handled by `PyArray_CheckAxis`.\n",
        "createdAt" : "2014-11-29T21:14:58Z",
        "updatedAt" : "2014-11-30T21:20:43Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "24effb6b7a075e23d85ea0b60ed8a607fe218c14",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +1362,1366 @@\nstatic PyObject *\npack_bits(PyObject *input, int axis)\n{\n    PyArrayObject *inp;"
  },
  {
    "id" : "cd028a41-3639-4633-a613-51139924a894",
    "prId" : 5319,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e39dc8d-d422-4613-a6ac-bafc7c8e08ff",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Why is both this and `pack_inner` needed. I note that this function has a slightly improved method of determining the truth value of the elements.\n",
        "createdAt" : "2014-11-29T20:11:37Z",
        "updatedAt" : "2014-11-30T21:20:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "24effb6b7a075e23d85ea0b60ed8a607fe218c14",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +1361,1365 @@}\n\nstatic PyObject *\npack_bits(PyObject *input, int axis)\n{"
  },
  {
    "id" : "14c1d0e3-5504-4b6f-86a7-39cd29d7995e",
    "prId" : 5319,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a6690fd3-89f3-4362-88bd-edce8625a708",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So this is a bit less general? Or did the previous version work with integer types?\n",
        "createdAt" : "2014-11-29T20:17:26Z",
        "updatedAt" : "2014-11-30T21:20:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "429fa30c-0c45-43af-b9f6-792e7cba6a5d",
        "parentId" : "a6690fd3-89f3-4362-88bd-edce8625a708",
        "authorId" : "acce7360-5cef-46f0-ab05-4fb0ffdffe3a",
        "body" : "The diff is confusing; this is actually the old line 1432 in the `if (unpack)` block above.\n",
        "createdAt" : "2014-11-30T11:45:53Z",
        "updatedAt" : "2014-11-30T21:20:43Z",
        "lastEditedBy" : "acce7360-5cef-46f0-ab05-4fb0ffdffe3a",
        "tags" : [
        ]
      },
      {
        "id" : "a5542332-737e-4443-bd8b-405070f12951",
        "parentId" : "a6690fd3-89f3-4362-88bd-edce8625a708",
        "authorId" : "c0296efc-111e-4571-a9d8-86ae9182caff",
        "body" : "An obvious use of packbits is to pack Boolean arrays (e.g., graphs).  Please ensure this is an acceptable input.\n",
        "createdAt" : "2014-11-30T14:44:20Z",
        "updatedAt" : "2014-11-30T21:20:43Z",
        "lastEditedBy" : "c0296efc-111e-4571-a9d8-86ae9182caff",
        "tags" : [
        ]
      },
      {
        "id" : "b2e3c4f0-5f1f-4caa-8214-36c4cc67bfc0",
        "parentId" : "a6690fd3-89f3-4362-88bd-edce8625a708",
        "authorId" : "acce7360-5cef-46f0-ab05-4fb0ffdffe3a",
        "body" : "See the unit test. Feel free to suggest further tests, since it is rather minimal.\n",
        "createdAt" : "2014-11-30T17:30:34Z",
        "updatedAt" : "2014-11-30T21:20:43Z",
        "lastEditedBy" : "acce7360-5cef-46f0-ab05-4fb0ffdffe3a",
        "tags" : [
        ]
      },
      {
        "id" : "943a72f4-87d5-42d2-a0f9-18248928f77f",
        "parentId" : "a6690fd3-89f3-4362-88bd-edce8625a708",
        "authorId" : "c0296efc-111e-4571-a9d8-86ae9182caff",
        "body" : "The unit test does not input a Boolean array.  Just run the same test with `a.astype(np.bool_)`.\n",
        "createdAt" : "2014-11-30T18:14:28Z",
        "updatedAt" : "2014-11-30T21:20:43Z",
        "lastEditedBy" : "c0296efc-111e-4571-a9d8-86ae9182caff",
        "tags" : [
        ]
      }
    ],
    "commit" : "24effb6b7a075e23d85ea0b60ed8a607fe218c14",
    "line" : 271,
    "diffHunk" : "@@ -1,1 +1485,1489 @@    if (PyArray_TYPE(inp) != NPY_UBYTE) {\n        PyErr_SetString(PyExc_TypeError,\n                \"Expected an input array of unsigned byte data type\");\n        goto fail;\n    }"
  },
  {
    "id" : "757071be-03be-4d5d-8d52-2f496b6a1f96",
    "prId" : 5319,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a87289f1-0aa8-4193-940b-9543705c6a45",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Makes me wonder what happens to the extra bits that may be present in the packed version.\n",
        "createdAt" : "2014-11-30T23:10:14Z",
        "updatedAt" : "2014-11-30T23:10:14Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "24effb6b7a075e23d85ea0b60ed8a607fe218c14",
    "line" : 243,
    "diffHunk" : "@@ -1,1 +1467,1471 @@\nstatic PyObject *\nunpack_bits(PyObject *input, int axis)\n{\n    PyArrayObject *inp;"
  },
  {
    "id" : "fac8ccda-7a35-4aa0-bd61-9ad115910510",
    "prId" : 5355,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36876024-2a69-49c3-b9b9-96a165837d2a",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "If leaving this, could remove `Py_DECREF` at 271, or alternatively, do the `Py_DECREF`s before 280 and return `NULL`.  instead of jumping to fail. The first seems a bit cleaner, although `fail` isn't quite right then, but nothing else seems quite right either. The refs can also be unrolled with a sequence of labels, fail1, fail2, fail3, etc. I don't think we have any sort of policy for these things. Hmmm..., just doing the first is probably best.\n",
        "createdAt" : "2014-12-08T04:03:24Z",
        "updatedAt" : "2014-12-08T04:03:24Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "fb4ab297-da4f-4aac-9397-d9a4126b3f80",
        "parentId" : "36876024-2a69-49c3-b9b9-96a165837d2a",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "They array being `Py_DECREF`'ed in 271 only exists in the `if (monotonic == -1)` scope, hence the specific call to `Py_DECREF` right there. You think it should be declared at the beginning of the function so that it can be `Py_XDECREF`'ed with the others?\n\nJust to be clear, the error this fixes was being triggered when going to fail from lines 228 or 235\n",
        "createdAt" : "2014-12-08T06:54:19Z",
        "updatedAt" : "2014-12-08T06:54:19Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      },
      {
        "id" : "5a88eab7-c792-44fb-b38e-105d2e142018",
        "parentId" : "36876024-2a69-49c3-b9b9-96a165837d2a",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Ahh, it is.\n",
        "createdAt" : "2014-12-08T15:08:43Z",
        "updatedAt" : "2014-12-08T15:08:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e8edab421e3b20ff2f4085e06040101c2d9865f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +297,301 @@    fail:\n        Py_XDECREF(arr_x);\n        Py_XDECREF(arr_bins);\n        return ret;\n}"
  }
]