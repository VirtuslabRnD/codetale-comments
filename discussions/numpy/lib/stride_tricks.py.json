[
  {
    "id" : "df645e14-e006-4e14-968e-e299b77a5af7",
    "prId" : 4377,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "882aff34-ae6f-4f2a-b160-53c0c05c4697",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "What about the custom dtypes mentioned in the comment?\n",
        "createdAt" : "2014-02-27T01:07:57Z",
        "updatedAt" : "2014-02-27T01:07:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "84e06f68-b5a7-4acd-be5b-53cf60703b81",
        "parentId" : "882aff34-ae6f-4f2a-b160-53c0c05c4697",
        "authorId" : "b0e7e584-a9be-4737-9003-4922807a34eb",
        "body" : "setting array.dtype = x.dtype is only needed for custom dtypes, but throws an exception for object dtypes. I added a check to only set array.dtype for custom dtypes. I think every other dtype should be okay. Now that I think about it though, maybe the real issue is that np.asarray returns an array with a raw byte dtype, requiring the setting of array.dtype in the first place?\n",
        "createdAt" : "2014-02-27T01:49:50Z",
        "updatedAt" : "2014-02-27T01:49:50Z",
        "lastEditedBy" : "b0e7e584-a9be-4737-9003-4922807a34eb",
        "tags" : [
        ]
      },
      {
        "id" : "bf0cdaa4-331f-4949-94b2-6b8c0ebe66bc",
        "parentId" : "882aff34-ae6f-4f2a-b160-53c0c05c4697",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Ah, that may be. np.asarray is just array with `copy=0`, so the problem would be in array. Hmm, this is a tricky problem, how _can_ array detect custom dtypes? It needs to be able to look them up somewhere, or at least get hold of the descriptor if they come with one.\n",
        "createdAt" : "2014-02-27T02:03:10Z",
        "updatedAt" : "2014-02-27T02:03:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a57924a7-1dc8-4cce-b256-ea7ecc634357",
        "parentId" : "882aff34-ae6f-4f2a-b160-53c0c05c4697",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "We do have the rational dtype to fool with, an np.asarray seems to work\n\n```\nIn [6]: import numpy.core.test_rational as rat\n\nIn [7]: r = rat.rational(1,2)\n\nIn [8]: asarray(r)\nOut[8]: array(rational(1,2), dtype=rational)\n```\n",
        "createdAt" : "2014-02-27T02:08:56Z",
        "updatedAt" : "2014-02-27T02:08:56Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "fba2a28c-d14c-465e-ade0-1c5cd5d7be6b",
        "parentId" : "882aff34-ae6f-4f2a-b160-53c0c05c4697",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "```\nif array.dtype.type is np.void:\n```\n\nmay be preferable to\n\n```\nif array.dtype.kind == 'V':\n```\n\nThe assigning of a dtype is just ugly. Maybe a view can be used instead.\n",
        "createdAt" : "2014-02-27T02:40:52Z",
        "updatedAt" : "2014-02-27T02:41:08Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "dbac5026-60e4-40c4-b63a-98928fcfaefa",
        "parentId" : "882aff34-ae6f-4f2a-b160-53c0c05c4697",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Hmmmm, checking `is void` does not seems to work:\n\n```\nIn [36]: a\nOut[36]: array(rational(1,2), dtype=rational)\n\nIn [37]: a.dtype.type is np.void\nOut[37]: False\n\nIn [38]: a.dtype.kind == 'V'\nOut[38]: True\n```\n\nThis is indeed identical to another PR, which tried the opposite. Instead of assigning the dtype where necessary, it didn't do it for object arrays where it is known it is not necessary ;).\n",
        "createdAt" : "2014-02-28T19:21:14Z",
        "updatedAt" : "2014-02-28T19:21:14Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a98b6b4ef12d09c51e5c9f015992c5b2ae164607",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +30,34 @@    array = np.asarray(DummyArray(interface, base=x))\n    # Make sure dtype is correct in case of custom dtype\n    if array.dtype.kind == 'V':\n        array.dtype = x.dtype\n    return array"
  },
  {
    "id" : "5a3295ba-424d-424e-92e8-a68efb528249",
    "prId" : 4622,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92a6e640-4677-4bfb-a6b2-caf44e075c05",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "What I meant was this. `__array_interface__` is basically just one way to define an \"array-like\". So this function currently does not support most array likes out there at all (for example memoryviews, etc.), since they implement the buffer interface instead. To really support this, I think we should (first thing), call:\n\n```\nx = np.asanyarray(x)\n```\n\nhere. After you have done that, `__array_finalize__` is guaranteed to be defined. We will guarantee to return an array and not some array-like, which can be seen as an advantage or disadvantage. But I think I am fine with returning always an array (or array subclass here). On the other hand, the pandas guys might disagree?\n",
        "createdAt" : "2014-08-27T10:00:16Z",
        "updatedAt" : "2014-08-27T21:04:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "7bcfa0c1-1f4d-4aaf-bbcf-d46b5d92a873",
        "parentId" : "92a6e640-4677-4bfb-a6b2-caf44e075c05",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Hmmm, pandas implements array wrap but not array finalize. I kind of think it is fine to say that `as_strided`  will always return an array, like `np.asanyarray`, but honestly this is a jungle, so if someone disagrees....\n",
        "createdAt" : "2014-08-27T10:03:16Z",
        "updatedAt" : "2014-08-27T21:04:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "1d3a2c7e-a07e-46bd-b63b-5ff63bad9346",
        "parentId" : "92a6e640-4677-4bfb-a6b2-caf44e075c05",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "@seberg - I guess adding `x = np.asanyarray(x)` deals with a somewhat separate issue, but obviously it is good to ensure the code is as general as possible, and this would allow one at least to remove the `isinstance(x, np.ndarray)` stanza from the if statement below. \n\nI'll do that, but also a question: since with this change, we know that x is an `ndarray` subclass, might this also allow one to change the strides and shape more easily than through the `DummyArray` mechanism, so that the `dtype` and `subclass` issues get handled more elegantly as well?\n",
        "createdAt" : "2014-08-27T18:08:32Z",
        "updatedAt" : "2014-08-27T21:04:55Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "e61ce7c9-958c-4a2e-b118-a9fb18509b90",
        "parentId" : "92a6e640-4677-4bfb-a6b2-caf44e075c05",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "From C, you could do that very easily, but from python there is no other way really.\n",
        "createdAt" : "2014-08-27T20:21:55Z",
        "updatedAt" : "2014-08-27T21:04:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "3cc01850-9dee-4440-8b1b-16ea746b33f5",
        "parentId" : "92a6e640-4677-4bfb-a6b2-caf44e075c05",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "And yeah, you are right, it deals with a seperate issue... I somewhat thought it might make this one simpler, too, but that doesn't change much.\n",
        "createdAt" : "2014-08-27T20:32:46Z",
        "updatedAt" : "2014-08-27T21:04:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "0ae8b00c-1a31-46fe-a587-e93da83d5c85",
        "parentId" : "92a6e640-4677-4bfb-a6b2-caf44e075c05",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Oh, actually if you really hate DummyArray, you can also use the `np.ndarray` class constructor. You still will have to manually call finalize, etc. since that does not allow to set a parent.\n",
        "createdAt" : "2014-08-27T20:39:12Z",
        "updatedAt" : "2014-08-27T21:04:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8590311a7b312711c7a4f40c1a15496e34d0ee6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +26,30 @@    # first convert input to array, possibly keeping subclass\n    x = np.array(x, copy=False, subok=subok)\n    interface = dict(x.__array_interface__)\n    if shape is not None:\n        interface['shape'] = tuple(shape)"
  },
  {
    "id" : "2d0a9e8d-8036-4dc5-80e1-a0c2638ba1ac",
    "prId" : 4622,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d9c71f6-0ab9-4c41-9576-0a9bce4eb545",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I think the `.view` call already results in an `__array_finalize__`.\n",
        "createdAt" : "2014-08-27T10:01:39Z",
        "updatedAt" : "2014-08-27T21:04:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "0d8fe270-ac69-47d5-b192-49f6f0d7f8e4",
        "parentId" : "1d9c71f6-0ab9-4c41-9576-0a9bce4eb545",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Taking `array.view(...)` does indeed result in a call to `__array_finalize__`, but with `array` passed on, not `x` as in the call below, and hence one does not have access to possible attributes of `x` that one might want to copy.\n",
        "createdAt" : "2014-08-27T15:59:39Z",
        "updatedAt" : "2014-08-27T21:04:55Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "3be5022f-6d92-4fcf-8d7d-0dca5d736128",
        "parentId" : "1d9c71f6-0ab9-4c41-9576-0a9bce4eb545",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "right, so its fine as is I guess. Still think i would prefere the early `asanyarray` call in any case.\n",
        "createdAt" : "2014-08-27T16:27:57Z",
        "updatedAt" : "2014-08-27T21:04:55Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e8590311a7b312711c7a4f40c1a15496e34d0ee6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +38,42 @@        # if input was an ndarray subclass and subclasses were OK,\n        # then view the result as that subclass.\n        array = array.view(type=type(x))\n        # Since we have done something akin to a view from x, we should let\n        # the subclass finalize (if it has it implemented, i.e., is not None)."
  },
  {
    "id" : "206f033b-d21b-4265-afbb-fd36f9bef87b",
    "prId" : 7609,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edefabc9-6c26-449f-ae86-22b6e930db06",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Any particular reason for `!r` instead of `!s`?\n",
        "createdAt" : "2016-05-09T03:03:22Z",
        "updatedAt" : "2016-05-09T03:03:22Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "699cf79b-0dd0-4a2b-9e75-1f39eed37649",
        "parentId" : "edefabc9-6c26-449f-ae86-22b6e930db06",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "`!r` (= repr) will put quotes around the key and escape any weird junk that might be in it, both of which seem like good things to me in this context\n",
        "createdAt" : "2016-05-09T03:06:47Z",
        "updatedAt" : "2016-05-09T03:06:47Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "a29b9c0a-aae3-4d56-a660-e34eac5233f2",
        "parentId" : "edefabc9-6c26-449f-ae86-22b6e930db06",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`!r` is what a normal `TypeError` due to extra kwargs seems to do\n",
        "createdAt" : "2016-05-09T03:56:24Z",
        "updatedAt" : "2016-05-09T03:56:24Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "8894b81b166f6b0c200dde77a70fb360e95b0f7c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +245,249 @@    if kwargs:\n        raise TypeError('broadcast_arrays() got an unexpected keyword '\n                        'argument {!r}'.format(kwargs.keys()[0]))\n    args = [np.array(_m, copy=False, subok=subok) for _m in args]\n"
  },
  {
    "id" : "98527427-c1e4-4ada-b789-f800f076077e",
    "prId" : 8617,
    "prUrl" : "https://github.com/numpy/numpy/pull/8617#pullrequestreview-21867190",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9991980a-1984-4970-a97e-e9f4815fd4c8",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Is there any reason that `np.broadcast()` is forbidden? Seems to work just fine with the check for `ndim >= 1` removed.",
        "createdAt" : "2017-02-13T21:26:43Z",
        "updatedAt" : "2017-02-13T22:52:05Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "44e3e52c-a06f-4ffa-8836-6d208bb79376",
        "parentId" : "9991980a-1984-4970-a97e-e9f4815fd4c8",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Agreed.",
        "createdAt" : "2017-02-14T18:50:32Z",
        "updatedAt" : "2017-02-14T18:50:32Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "b3283838-ea43-4609-a49b-227265fd541e",
        "parentId" : "9991980a-1984-4970-a97e-e9f4815fd4c8",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "@mhvk: So you'd be in favor of a separate PR that removes that restriction from the C code?",
        "createdAt" : "2017-02-14T19:40:03Z",
        "updatedAt" : "2017-02-14T19:40:03Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "75552ef6-6bbb-4e3f-9d92-771398bae76c",
        "parentId" : "9991980a-1984-4970-a97e-e9f4815fd4c8",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "I slightly misunderstood -- I agreed with your change here for sure. I'm less sure about messing with the C code, but this is mostly because quite a while ago, on earlier changes in `stride_tricks`, there was the following https://github.com/numpy/numpy/pull/5371#issuecomment-67233157",
        "createdAt" : "2017-02-14T21:22:10Z",
        "updatedAt" : "2017-02-14T21:22:10Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9b26f804117ebc1f591dff33d06ce2339af9339",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +183,187 @@    # use the old-iterator because np.nditer does not handle size 0 arrays\n    # consistently\n    b = np.broadcast(*args[:32])\n    # unfortunately, it cannot handle 32 or more arguments directly\n    for pos in range(32, len(args), 31):"
  }
]