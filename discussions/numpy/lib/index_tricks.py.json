[
  {
    "id" : "65864789-811d-4cab-aba6-7eea09a8675a",
    "prId" : 2897,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c9e92f8-dd2b-485c-b136-991a817d0022",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "This line is probably clearer as `if shape == () or shape == ((),)`? Or even\n\n```\nif len(shape) == 1 and isinstance(shape[0], tuple):\n    shape = shape[0]\nif shape == ():\n```\n",
        "createdAt" : "2013-01-12T23:38:08Z",
        "updatedAt" : "2013-01-12T23:38:08Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "52002bf6-900c-4fcd-a3bd-852cd645b3d8",
        "parentId" : "5c9e92f8-dd2b-485c-b136-991a817d0022",
        "authorId" : "1b526ef0-1c83-44be-b2b5-41cf1ee854e2",
        "body" : "Perhaps so.  But I'm pretty sure the previous behavior would accept lists as shapes as well and therefore we should probably mimic that behavior.   I thought about testing explicitly for the empty tuple, but decided against it because the empty list should be acceptable as well. \n\nI do like the first test to convert shape to the expected form followed by the test on shape.   That's nice.  \n'''\nif len(shape) == 1 and isinstance(shape[0], tuple):\n    shape = shape[0]\nif not shape:\n   ...\n'''\nBut, I would rather test explicitly for the length of shape and still allow any sequence for the shape.\n",
        "createdAt" : "2013-01-14T00:01:07Z",
        "updatedAt" : "2013-01-14T00:01:07Z",
        "lastEditedBy" : "1b526ef0-1c83-44be-b2b5-41cf1ee854e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1a055b0cd5ad82106901a274d58563df4cd5070",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +536,540 @@    #  and then this entire __new__ method can be removed.\n    def __new__(cls, *shape):\n        if len(shape) == 0 or (len(shape) == 1 and len(shape[0]) == 0):\n            class zero_dim_iter(object):\n                def __init__(self):"
  },
  {
    "id" : "8aa3be83-77ed-4a51-b960-2d485a424c08",
    "prId" : 8816,
    "prUrl" : "https://github.com/numpy/numpy/pull/8816#pullrequestreview-36595046",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ef80e8e-5bc8-454d-aae4-6ffc38278e65",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This is different. What is the explanation?",
        "createdAt" : "2017-05-05T19:38:42Z",
        "updatedAt" : "2017-05-05T20:47:37Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "250bf2ed-bb42-4286-a631-ef0ea265ded0",
        "parentId" : "2ef80e8e-5bc8-454d-aae4-6ffc38278e65",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This fixes the test case added in 42ea3b54d8f852c9545f826548e198fafea127b9 (`np.r_['r', [1, 2], 3]`) - `k` was not the number of objects, but the number of arguments, which could include the string configuration argument.",
        "createdAt" : "2017-05-05T19:46:19Z",
        "updatedAt" : "2017-05-05T20:47:37Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "393a5317-654d-443c-91cc-f86fe7fc98fe",
        "parentId" : "2ef80e8e-5bc8-454d-aae4-6ffc38278e65",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "On [this line](https://github.com/numpy/numpy/pull/8816/commits/42ea3b54d8f852c9545f826548e198fafea127b9#diff-1bd953557a98073031ce66d05dbde3c8R337), we index `objs` with a value from `scalars`. Previously, there was an off-by-one error that at best resulting in incorrect casting, and at worse an AttributeError or IndexError",
        "createdAt" : "2017-05-05T19:50:50Z",
        "updatedAt" : "2017-05-05T20:47:37Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "36e7513edd1114c3f928be66953d4349273122c0",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +309,313 @@            elif type(item) in ScalarType:\n                newobj = array(item, ndmin=ndmin)\n                scalars.append(len(objs))\n                scalar = True\n                scalartypes.append(newobj.dtype)"
  },
  {
    "id" : "a306964e-7ec8-4dec-bb6e-fdfb519589bd",
    "prId" : 10207,
    "prUrl" : "https://github.com/numpy/numpy/pull/10207#pullrequestreview-82931509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23885245-d3d5-43fe-8016-d935e42592ce",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "So the big difference is that `trans1d` is not updated? That seems like a big change.",
        "createdAt" : "2017-12-12T18:19:36Z",
        "updatedAt" : "2017-12-12T18:19:36Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "1dfadd25-caae-4bd8-b220-1b56ef7cab9a",
        "parentId" : "23885245-d3d5-43fe-8016-d935e42592ce",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "The big difference is the `array(..., ndmin=)` is unconditional.\r\n\r\nThe change you see here is just in the second commit, and looks like a clear bug to me. I also suspect that no one ever used this code path anyway, based on that",
        "createdAt" : "2017-12-12T18:21:48Z",
        "updatedAt" : "2017-12-12T18:21:48Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7d571396e92b670a0e8de6e50366ba1dbee3c6e",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +317,321 @@                if trans1d != -1 and item_ndim < ndmin:\n                    k2 = ndmin - item_ndim\n                    k1 = trans1d\n                    if k1 < 0:\n                        k1 += k2 + 1"
  },
  {
    "id" : "6e4e4971-a4bc-4761-995d-0b7c4098fd2f",
    "prId" : 12965,
    "prUrl" : "https://github.com/numpy/numpy/pull/12965#pullrequestreview-203521626",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "787f2305-62fd-45da-8f02-d34c7e5834c7",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Class documentation should not have a `Return` section. ~Might document the constant instances `ogrid` and `mgrid`.~\r\n\r\nEDIT: With only single instances, just document the class: https://numpydoc.readthedocs.io/en/latest/format.html#id12",
        "createdAt" : "2019-02-14T00:42:58Z",
        "updatedAt" : "2019-02-14T03:52:19Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fceb77518f857fa17cf4c27000508b0bbe528167",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +271,275 @@    Returns\n    -------\n    mesh-grid\n        `ndarrays` with only one dimension not equal to 1\n"
  },
  {
    "id" : "7bf82c0d-a96a-4595-acdf-c41beb362a1f",
    "prId" : 16806,
    "prUrl" : "https://github.com/numpy/numpy/pull/16806#pullrequestreview-446822130",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4907089b-bb86-410e-b9cc-9e296e58b76a",
        "parentId" : null,
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "since this looks very close to the above example on a quick look, you can add a few words above saying you can pass the shape as a tuple.",
        "createdAt" : "2020-07-11T18:57:45Z",
        "updatedAt" : "2020-07-11T19:01:03Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d1e6545c09dbab3face92c0cab95cbdf6012ae1",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +633,637 @@\n    # same dimensions - but in a tuple (3, 2, 1)\n    >>> for index in np.ndindex((3, 2, 1)):\n    ...     print(index)\n    (0, 0, 0)"
  }
]