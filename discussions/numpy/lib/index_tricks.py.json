[
  {
    "id" : "65864789-811d-4cab-aba6-7eea09a8675a",
    "prId" : 2897,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c9e92f8-dd2b-485c-b136-991a817d0022",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "This line is probably clearer as `if shape == () or shape == ((),)`? Or even\n\n```\nif len(shape) == 1 and isinstance(shape[0], tuple):\n    shape = shape[0]\nif shape == ():\n```\n",
        "createdAt" : "2013-01-12T23:38:08Z",
        "updatedAt" : "2013-01-12T23:38:08Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "52002bf6-900c-4fcd-a3bd-852cd645b3d8",
        "parentId" : "5c9e92f8-dd2b-485c-b136-991a817d0022",
        "authorId" : "1b526ef0-1c83-44be-b2b5-41cf1ee854e2",
        "body" : "Perhaps so.  But I'm pretty sure the previous behavior would accept lists as shapes as well and therefore we should probably mimic that behavior.   I thought about testing explicitly for the empty tuple, but decided against it because the empty list should be acceptable as well. \n\nI do like the first test to convert shape to the expected form followed by the test on shape.   That's nice.  \n'''\nif len(shape) == 1 and isinstance(shape[0], tuple):\n    shape = shape[0]\nif not shape:\n   ...\n'''\nBut, I would rather test explicitly for the length of shape and still allow any sequence for the shape.\n",
        "createdAt" : "2013-01-14T00:01:07Z",
        "updatedAt" : "2013-01-14T00:01:07Z",
        "lastEditedBy" : "1b526ef0-1c83-44be-b2b5-41cf1ee854e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1a055b0cd5ad82106901a274d58563df4cd5070",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +536,540 @@    #  and then this entire __new__ method can be removed.\n    def __new__(cls, *shape):\n        if len(shape) == 0 or (len(shape) == 1 and len(shape[0]) == 0):\n            class zero_dim_iter(object):\n                def __init__(self):"
  }
]