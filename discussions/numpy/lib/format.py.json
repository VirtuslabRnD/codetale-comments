[
  {
    "id" : "a41fef5b-75d8-4c14-aa34-321581d1097f",
    "prId" : 4765,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c00c5d4-4d3e-4f0b-b0a1-ab9c17c365f6",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Should have a \"Returns\" section.\n",
        "createdAt" : "2014-06-02T01:37:33Z",
        "updatedAt" : "2014-06-02T19:27:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc50d27b4e125052d44b0643bc344e4c5062316a",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +280,284 @@        None means use oldest that works\n        explicit version will raise a ValueError if the format does not\n        allow saving this data.  Default: None\n    Returns\n    -------"
  },
  {
    "id" : "9027bdf9-9a7a-45e6-90ec-36d2067f7a3d",
    "prId" : 5178,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90146ccd-decd-41f8-a9ca-d6569d151279",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "whitespace here is weird, though it doesn't really matter\n",
        "createdAt" : "2014-10-12T23:21:30Z",
        "updatedAt" : "2014-10-12T23:40:54Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "0c37e2c5-56b0-42f1-9097-e4646469b468",
        "parentId" : "90146ccd-decd-41f8-a9ca-d6569d151279",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "My feeling is that the condition should be easily distinguished from the body. See also PEP8, indentation. The other option is a (useless) comment ;)\n",
        "createdAt" : "2014-10-12T23:30:11Z",
        "updatedAt" : "2014-10-12T23:40:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "1bc134c9-f74e-475f-93b1-a4adb217fdd5",
        "parentId" : "90146ccd-decd-41f8-a9ca-d6569d151279",
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "Fair enough! It's totally readable as is so IMO it doesn't matter at all.\n\nOn Mon, Oct 13, 2014 at 12:30 AM, Charles Harris notifications@github.com\nwrote:\n\n> In numpy/lib/format.py:\n> \n> > -    \"\"\"\n> > -    import tokenize\n> > -    if sys.version_info[0] >= 3:\n> > -        # In Python3 stderr, stdout are text files.\n> > -        from io import StringIO\n> > -    else:\n> > -        from StringIO import StringIO\n> >   +\n> > -    tokens = []\n> > -    last_token_was_number = False\n> > -    for token in tokenize.generate_tokens(StringIO(asstr(s)).read):\n> > -        token_type = token[0]\n> > -        token_string = token[1]\n> > -        if (last_token_was_number and\n> > -                token_type == tokenize.NAME and\n> > -                token_string == \"L\"):\n> \n> My feeling is that the condition should be easily distinguished from the\n> body. See also PEP8, indentation. The other option is a (useless) comment ;)\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/numpy/numpy/pull/5178/files#r18751104.\n\n## \n\nNathaniel J. Smith\nPostdoctoral researcher - Informatics - University of Edinburgh\nhttp://vorpus.org\n",
        "createdAt" : "2014-10-12T23:32:13Z",
        "updatedAt" : "2014-10-12T23:40:54Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b1f90a227b5fcf2a481c973e522693758c9f20f",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +442,446 @@        if (last_token_was_number and\n                token_type == tokenize.NAME and\n                token_string == \"L\"):\n            continue\n        else:"
  },
  {
    "id" : "7653740d-6e1f-4511-abd5-38c63ce8f796",
    "prId" : 5713,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b2a7da6-ef1d-4066-8aed-5d3bcaf507c8",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Note that this is not really in place, as strings are immutable. The more standard way to express this would be\n\n```\nfmt = \"Header length %s too big for version=%s\"\nraise ValueError(fmt % (hlen, version))\n```\n\nConvention has the advantage that it takes little thought to comprehend.\n",
        "createdAt" : "2015-04-06T02:25:58Z",
        "updatedAt" : "2015-04-06T02:25:58Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "475a6403f9b10d2c4fa30fa0ad807b9ca1d2d0d6",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +324,328 @@    else:\n        msg = \"Header length %s too big for version=%s\"\n        msg %= (hlen, version)\n        raise ValueError(msg)\n"
  },
  {
    "id" : "16b81e27-d36e-45c2-b620-75ca77516c98",
    "prId" : 9025,
    "prUrl" : "https://github.com/numpy/numpy/pull/9025#pullrequestreview-57346231",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffdef30b-c4b8-4b20-96b0-32c247093478",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Using `struct.Struct` might buy a little brevity further down, but now I'm nit-picking",
        "createdAt" : "2017-08-19T08:34:14Z",
        "updatedAt" : "2017-09-11T14:07:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "16e66353-e76a-4356-99ab-67a7846124fd",
        "parentId" : "ffdef30b-c4b8-4b20-96b0-32c247093478",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Dogfooding by using `dtype('<H')` might also be neat, and then `np.frombuffer(hlength_str, dtype=...)`",
        "createdAt" : "2017-08-19T09:25:48Z",
        "updatedAt" : "2017-09-13T07:43:47Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "76afdc457470c6b6c7c294999333908e170573be",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +476,480 @@    import struct\n    if version == (1, 0):\n        hlength_type = '<H'\n    elif version == (2, 0):\n        hlength_type = '<I'"
  },
  {
    "id" : "cec9c11f-730c-4c9a-934b-6601dd186c16",
    "prId" : 9025,
    "prUrl" : "https://github.com/numpy/numpy/pull/9025#pullrequestreview-57373555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3dbecb2b-e951-49b8-a2b7-0339ce82acb4",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is only true when a version is not specified explicitly",
        "createdAt" : "2017-08-20T14:22:25Z",
        "updatedAt" : "2017-09-11T14:07:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "76afdc457470c6b6c7c294999333908e170573be",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +312,316 @@    padlen_v2 = ARRAY_ALIGN - ((MAGIC_LEN + struct.calcsize('<I') + hlen) % ARRAY_ALIGN)\n\n    # Which version(s) we write depends on the total header size; v1 has a max of 65535\n    if hlen + padlen_v1 < 2**16 and version in (None, (1, 0)):\n        version = (1, 0)"
  },
  {
    "id" : "0924957c-a49f-471e-b2a4-ab925de20959",
    "prId" : 9025,
    "prUrl" : "https://github.com/numpy/numpy/pull/9025#pullrequestreview-60474589",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87f015ac-faa1-4ad1-a31e-bb7919a13f49",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Alternative suggestion: should we allow the user to pass this into np.save?",
        "createdAt" : "2017-08-20T14:29:54Z",
        "updatedAt" : "2017-09-11T14:07:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "0dd81a9c-11b7-46da-a9c6-fb6844417835",
        "parentId" : "87f015ac-faa1-4ad1-a31e-bb7919a13f49",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Also curious as to why 4096 is the limit (although clearly arbitrarily large numbers are not desirable)",
        "createdAt" : "2017-09-04T23:29:24Z",
        "updatedAt" : "2017-09-11T14:07:33Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "58274311-e7eb-4d98-be7b-b6a3fdcf83e8",
        "parentId" : "87f015ac-faa1-4ad1-a31e-bb7919a13f49",
        "authorId" : "f7d8f3b2-0a48-4127-9cea-90777f4917b7",
        "body" : "Letting the user pass in the alignment is not a bad enhancement idea, but that's probably a 0.1% use case.  64 bytes is a good minimum alignment not only due to AVX-512 but also because it is one cache line on x86.  There's virtually no benefit to less than 64, and as of 2017 virtually no motivation for more either.  Letting the user specify a larger value might be handy a few years from now.\r\n\r\n4096 is the upper limit of \"plausible\" because it is one entire page on Linux, and mmap() can be offset at page boundaries on Linux, so on the platforms I know about, padding to more aligned than 4096 bytes would be useless (of course there must be some exceptional case lurking somewhere, but that's 0.001%).",
        "createdAt" : "2017-09-04T23:40:22Z",
        "updatedAt" : "2017-09-11T14:07:33Z",
        "lastEditedBy" : "f7d8f3b2-0a48-4127-9cea-90777f4917b7",
        "tags" : [
        ]
      }
    ],
    "commit" : "76afdc457470c6b6c7c294999333908e170573be",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +164,168 @@MAGIC_PREFIX = b'\\x93NUMPY'\nMAGIC_LEN = len(MAGIC_PREFIX) + 2\nARRAY_ALIGN = 64 # plausible values are powers of 2 between 16 and 4096\nBUFFER_SIZE = 2**18  # size of buffer for reading npz files in bytes\n"
  },
  {
    "id" : "23213162-ff51-4a89-88d7-c263b44215e9",
    "prId" : 12358,
    "prUrl" : "https://github.com/numpy/numpy/pull/12358#pullrequestreview-174531046",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11d58b0e-3ba8-40ca-989e-9323555bed2f",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Could do with a short docstring explaining how this is different from `np.dtype(descr)`",
        "createdAt" : "2018-11-13T18:08:44Z",
        "updatedAt" : "2018-11-14T18:42:18Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2bc2f8c9-ee12-4def-b81d-830bec5799f8",
        "parentId" : "11d58b0e-3ba8-40ca-989e-9323555bed2f",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "added",
        "createdAt" : "2018-11-13T18:54:39Z",
        "updatedAt" : "2018-11-14T18:42:18Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2227556885c3b68a33285ae3ddb4a65d71b4497",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +260,264 @@        return dtype.str\n\ndef descr_to_dtype(descr):\n    '''\n    descr may be stored as dtype.descr, which is a list of"
  },
  {
    "id" : "8c862187-d561-4efb-a883-39506c19a7ec",
    "prId" : 13433,
    "prUrl" : "https://github.com/numpy/numpy/pull/13433#pullrequestreview-232858120",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c44064d-1549-4a41-aaac-1e9a5094125b",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "What happens if this is a subarray of structured types?",
        "createdAt" : "2019-05-01T16:04:23Z",
        "updatedAt" : "2019-05-11T23:37:47Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e115486b-71de-421a-b8aa-3fb75f91ec6d",
        "parentId" : "3c44064d-1549-4a41-aaac-1e9a5094125b",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```\r\ns = np.dtype([('a', np.int8), ('b', np.int16), ('c', np.int32)], align=True)\r\ns_sub = np.dtype((s, (3,)))\r\n```",
        "createdAt" : "2019-05-01T16:05:58Z",
        "updatedAt" : "2019-05-11T23:37:47Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ad1384b4-c66a-4470-a9f9-01c5ac3ef05d",
        "parentId" : "3c44064d-1549-4a41-aaac-1e9a5094125b",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think you need to recurse for subarray types",
        "createdAt" : "2019-05-01T16:06:41Z",
        "updatedAt" : "2019-05-11T23:37:47Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "41957330-517a-46a4-8ee7-0a5db5fc5d6e",
        "parentId" : "3c44064d-1549-4a41-aaac-1e9a5094125b",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "That is an interesting case. Top level subarrays are degenerated on arrays (they are added to the dimensions of the array), cannot quickly find a way to create an array with such a dtype, but it somewhat feels like there may have been strange ways to do it.",
        "createdAt" : "2019-05-01T16:11:57Z",
        "updatedAt" : "2019-05-11T23:37:47Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "72facb4a-ab39-498d-bc32-58f8562d0304",
        "parentId" : "3c44064d-1549-4a41-aaac-1e9a5094125b",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "```python\r\ns = np.dtype([('a', np.int8), ('b', np.int16), ('c', np.int32)], align=True)\r\ns_sub = np.dtype((s, (1,1)))\r\narr = np.zeros(3, s_sub)\r\nprint(arr.shape, arr.dtype)\r\narr = np.ndarray(shape=3, buffer=arr, dtype=s_sub)\r\nprint(arr.shape, arr.dtype)\r\n```",
        "createdAt" : "2019-05-01T16:13:57Z",
        "updatedAt" : "2019-05-11T23:37:47Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "59a50f0f-5fb3-4a81-8133-7b1517159dc8",
        "parentId" : "3c44064d-1549-4a41-aaac-1e9a5094125b",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Also, watch out for structured types like `(int, [('fields', int)])` which have a non-void base",
        "createdAt" : "2019-05-01T16:19:11Z",
        "updatedAt" : "2019-05-11T23:37:47Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "20916931-7eb5-48aa-9de5-934343f39afb",
        "parentId" : "3c44064d-1549-4a41-aaac-1e9a5094125b",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Yeah, this one is still broken (although maybe the original issue is solved and this is just another issue). Had a too shallow look at this probably, though :/.",
        "createdAt" : "2019-05-01T16:54:31Z",
        "updatedAt" : "2019-05-11T23:37:47Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "0b073b14-fe47-41a0-9d70-15ec4d304b4d",
        "parentId" : "3c44064d-1549-4a41-aaac-1e9a5094125b",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "No need for the subarray to be at the top level to hit this code-path - nest it inside a structured one.",
        "createdAt" : "2019-05-01T17:03:06Z",
        "updatedAt" : "2019-05-11T23:37:47Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3ebf9eee-c638-4329-a74c-78d8061574f8",
        "parentId" : "3c44064d-1549-4a41-aaac-1e9a5094125b",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "No need for the subarray to be at the top level to hit this code-path - nest it inside a structured one.",
        "createdAt" : "2019-05-02T06:44:12Z",
        "updatedAt" : "2019-05-11T23:37:47Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd73a15363295658e150754edf6d1073cbdb3975",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +269,273 @@    '''\n    if isinstance(descr, str):\n        # No padding removal needed\n        return numpy.dtype(descr)\n    elif isinstance(descr, tuple):"
  },
  {
    "id" : "5a039a60-87fa-43b2-bd5e-6af284c8899f",
    "prId" : 13491,
    "prUrl" : "https://github.com/numpy/numpy/pull/13491#pullrequestreview-239250045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3cf5168-db00-49bd-8823-27bcdb16da3f",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think I'd argue that every occurrence of `asbytes` and `asstr` is probably a bug, especially once we drop py2",
        "createdAt" : "2019-05-07T08:17:50Z",
        "updatedAt" : "2019-05-19T06:35:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f5790b7b-b9e8-4305-85a8-5ec71abfa9e4",
        "parentId" : "f3cf5168-db00-49bd-8823-27bcdb16da3f",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Doesn't backport.",
        "createdAt" : "2019-05-19T18:50:12Z",
        "updatedAt" : "2019-05-19T18:50:12Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "58b0466b-2f75-4a6b-8fb4-413cd6bedd00",
        "parentId" : "f3cf5168-db00-49bd-8823-27bcdb16da3f",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "There is a reason we are putting off those cleanups.",
        "createdAt" : "2019-05-19T18:50:37Z",
        "updatedAt" : "2019-05-19T18:50:38Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecb402499dba2d105b2714a55259352c31a62bd5",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +170,174 @@from numpy.lib.utils import safe_eval\nfrom numpy.compat import (\n    isfileobj, long, os_fspath, pickle\n    )\n"
  },
  {
    "id" : "7967d53b-da52-4b22-9631-5c8a1af080cc",
    "prId" : 13491,
    "prUrl" : "https://github.com/numpy/numpy/pull/13491#pullrequestreview-234377424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "529cfb14-6939-420e-961c-401fe86ddc71",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Previously this decode happened within `_filter_header`",
        "createdAt" : "2019-05-07T08:28:02Z",
        "updatedAt" : "2019-05-19T06:35:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecb402499dba2d105b2714a55259352c31a62bd5",
    "line" : 187,
    "diffHunk" : "@@ -1,1 +566,570 @@    header_length = struct.unpack(hlength_type, hlength_str)[0]\n    header = _read_bytes(fp, header_length, \"array header\")\n    header = header.decode(encoding)\n\n    # The header is a pretty-printed string representation of a literal"
  },
  {
    "id" : "98a4afb1-22a6-4761-89eb-726505ad0a9c",
    "prId" : 14994,
    "prUrl" : "https://github.com/numpy/numpy/pull/14994#pullrequestreview-324904418",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a68b778-6563-4e27-b240-b5c916fb562c",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This is a subarray dtype, such as `np.dtype((int, 3), metadata={})`",
        "createdAt" : "2019-11-28T11:09:39Z",
        "updatedAt" : "2019-12-01T16:50:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "9b41072a-617a-4c10-a7a3-1e3136165b59",
        "parentId" : "7a68b778-6563-4e27-b240-b5c916fb562c",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "~Where is the metadata in `xxx = np.dtype((int, 3), metadata={'some': 'stuff'})` stored? It is neither in `xxx.metadata` nor in `xxx.subdtype[0].metadata`~\r\n\r\nEdit: it is in `xxx.metadata`",
        "createdAt" : "2019-11-29T04:03:40Z",
        "updatedAt" : "2019-12-01T16:50:27Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "181540b1-4a41-49f6-a834-b064d2821e8f",
        "parentId" : "7a68b778-6563-4e27-b240-b5c916fb562c",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "The meta data is not preserved in creating an array with that dtype:\r\n```python\r\n>>> dt=np.dtype((int, 3), metadata={'some': 'stuff'})\r\n>>> dt.metadata\r\nmappingproxy({'some': 'stuff'})\r\n>>> arr = np.ones(10, dtype=dt)\r\n>>> arr.dtype.metadata\r\nNone\r\n```",
        "createdAt" : "2019-11-29T04:10:11Z",
        "updatedAt" : "2019-12-01T16:50:27Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "ad729fbd-1860-4f3f-a612-120d7ead92d7",
        "parentId" : "7a68b778-6563-4e27-b240-b5c916fb562c",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Subarray types have a short half-life unless protected by a containing structured type :)",
        "createdAt" : "2019-11-30T19:00:56Z",
        "updatedAt" : "2019-12-01T16:50:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "a91c2828abd65e8a20173f2fd460708070f8cab9",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +249,253 @@        return any(_has_metadata(dt[k]) for k in dt.names)\n    elif dt.subdtype is not None:\n        return _has_metadata(dt.base)\n    else:\n        return False"
  },
  {
    "id" : "c3c86c91-31ac-4825-93f1-4188d1c003de",
    "prId" : 14994,
    "prUrl" : "https://github.com/numpy/numpy/pull/14994#pullrequestreview-325305014",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23e64739-313f-454a-ba62-3edb5df5a0d5",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Do we have a tracking issue we can reference regarding making this work properly?",
        "createdAt" : "2019-11-30T19:02:20Z",
        "updatedAt" : "2019-12-01T16:50:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e8f2d74a-5146-4869-8325-927bad241cf8",
        "parentId" : "23e64739-313f-454a-ba62-3edb5df5a0d5",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "I opened gh-15017",
        "createdAt" : "2019-11-30T19:45:41Z",
        "updatedAt" : "2019-12-01T16:50:27Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "1eb4d5c2-4496-473a-98e6-f13092d5a901",
        "parentId" : "23e64739-313f-454a-ba62-3edb5df5a0d5",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Last question - do we want to reference that issue in the warning message?",
        "createdAt" : "2019-12-01T17:06:57Z",
        "updatedAt" : "2019-12-01T17:06:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "6518c429-26a2-47e3-aca6-201402277bbe",
        "parentId" : "23e64739-313f-454a-ba62-3edb5df5a0d5",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "When we fix the issue the test will fail, which should bring us back to the warning. I think that is sufficient for this corner case.",
        "createdAt" : "2019-12-01T17:50:39Z",
        "updatedAt" : "2019-12-01T17:50:40Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "28b08a22-b248-4a3f-ba88-b2e6f65bb970",
        "parentId" : "23e64739-313f-454a-ba62-3edb5df5a0d5",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I meant more for pointing users to more information. Fine as is, just curious if putting issue numbers in warnings is a path we should look at going down.",
        "createdAt" : "2019-12-01T17:51:51Z",
        "updatedAt" : "2019-12-01T17:51:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5d1999a2-91d6-4c4c-a380-840d5cee3e11",
        "parentId" : "23e64739-313f-454a-ba62-3edb5df5a0d5",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "It is a good point, for now I think I will just copy the full warning text into the issue. Search engines will probably pick it up well.",
        "createdAt" : "2019-12-02T15:09:22Z",
        "updatedAt" : "2019-12-02T15:09:22Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a91c2828abd65e8a20173f2fd460708070f8cab9",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +278,282 @@    if _has_metadata(dtype):\n        warnings.warn(\"metadata on a dtype may be saved or ignored, but will \"\n                      \"raise if saved when read. Use another form of storage.\",\n                      UserWarning, stacklevel=2)\n    if dtype.names is not None:"
  },
  {
    "id" : "83cbb1ec-00fd-43f5-9a55-77737b3e76d9",
    "prId" : 18657,
    "prUrl" : "https://github.com/numpy/numpy/pull/18657#pullrequestreview-619734989",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e53164de-092a-43b8-92d6-d30c5fa6063f",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "OK, I doubt it is very useful, but its simple enough.  If you are enthusiastic, maybe add a comment why we only do this on older \"versions\", though?\r\n(Would be happy to just skip as well).",
        "createdAt" : "2021-03-23T18:17:41Z",
        "updatedAt" : "2021-03-24T09:07:12Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "b002ffd2-6762-4bf2-a507-5de5385f0eac",
        "parentId" : "e53164de-092a-43b8-92d6-d30c5fa6063f",
        "authorId" : "d581f441-2a93-4806-9cab-52d0a7fc334c",
        "body" : "It's useful because it lets me pair a `write_array(..., version=(3,0)` with `read_array(..., version=(3,0))` and get the nice perf boost ðŸ˜Ž ",
        "createdAt" : "2021-03-24T09:00:31Z",
        "updatedAt" : "2021-03-24T09:07:12Z",
        "lastEditedBy" : "d581f441-2a93-4806-9cab-52d0a7fc334c",
        "tags" : [
        ]
      },
      {
        "id" : "649ed8d0-b025-4cd9-9eb6-5ab649584f26",
        "parentId" : "e53164de-092a-43b8-92d6-d30c5fa6063f",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Hah, fair enough :). Thanks @ohadravid!",
        "createdAt" : "2021-03-24T13:44:57Z",
        "updatedAt" : "2021-03-24T13:44:57Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6fc8d442d61a4000b6b6861f3ee3707dab23d7db",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +594,598 @@    # implementation before header filtering was implemented.\n    if version <= (2, 0):\n        header = _filter_header(header)\n    try:\n        d = safe_eval(header)"
  },
  {
    "id" : "a72d7343-2c71-40a4-b30d-53673ce28ef7",
    "prId" : 18657,
    "prUrl" : "https://github.com/numpy/numpy/pull/18657#pullrequestreview-619466237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f16faab-dc2e-4bc3-89e7-26dbeef3bda8",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Removing the `sorted` above looks correct to me. But I think `d.keys()` now prints slightly less nice?  OTOH, this is de-facto an internal error so I am OK with that.",
        "createdAt" : "2021-03-23T18:21:22Z",
        "updatedAt" : "2021-03-24T09:07:12Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "069ce8cb-83b8-4e72-b9b6-54800928cbc8",
        "parentId" : "3f16faab-dc2e-4bc3-89e7-26dbeef3bda8",
        "authorId" : "d581f441-2a93-4806-9cab-52d0a7fc334c",
        "body" : "Added the `sorted` bash when generating the error :)",
        "createdAt" : "2021-03-24T08:59:42Z",
        "updatedAt" : "2021-03-24T09:07:12Z",
        "lastEditedBy" : "d581f441-2a93-4806-9cab-52d0a7fc334c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6fc8d442d61a4000b6b6861f3ee3707dab23d7db",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +607,611 @@        keys = sorted(d.keys())\n        msg = \"Header does not contain the correct keys: {!r}\"\n        raise ValueError(msg.format(d.keys()))\n\n    # Sanity-check the values."
  }
]