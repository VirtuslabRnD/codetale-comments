[
  {
    "id" : "f986bcd8-7cf3-4c91-9d8a-075b119e145d",
    "prId" : 5116,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6372cbe2-7ff3-4323-aac6-d7110ca67cfd",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "You always keep learning funky functions :). I was wondering once whether I should finish off a function which was something like `prepare_arrays(*arrs)` and if you give it `inexact=True` it would return the common dtype with `result_type(0., *arrs)` basically, plus `array_wrap` if you want it to...\n",
        "createdAt" : "2014-09-25T07:08:02Z",
        "updatedAt" : "2014-09-25T17:50:38Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "1bffce92-12cc-457f-88e6-bcef41b39423",
        "parentId" : "6372cbe2-7ff3-4323-aac6-d7110ca67cfd",
        "authorId" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "body" : "There are way too many of those: I am pretty sure if I rewrote this same code 10 times from scratch, I would not use the same function all the time...\n",
        "createdAt" : "2014-09-25T16:36:22Z",
        "updatedAt" : "2014-09-25T17:50:38Z",
        "lastEditedBy" : "34105ae0-9fd2-4403-be9b-7c550a729828",
        "tags" : [
        ]
      }
    ],
    "commit" : "3a0587e545e959747d9b501dbf029a4cd6576547",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +131,135 @@        # Let object arrays slip through, e.g. for arbitrary precision\n        if dt != object:\n            seq_of_zeros = seq_of_zeros.astype(mintypecode(dt.char))\n    else:\n        raise ValueError(\"input must be 1d or non-empty square 2d array.\")"
  },
  {
    "id" : "276ae5bc-7b52-4722-8b32-3f6464f9883d",
    "prId" : 8788,
    "prUrl" : "https://github.com/numpy/numpy/pull/8788#pullrequestreview-28257138",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a053caa7-960b-46a4-802e-2be44e04ec72",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This comment is false",
        "createdAt" : "2017-03-21T21:55:00Z",
        "updatedAt" : "2017-03-21T21:55:05Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d9c063fc-4198-441b-b2fa-e338def0fa34",
        "parentId" : "a053caa7-960b-46a4-802e-2be44e04ec72",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Sorry to have been out of the loop, but indeed the second sentence is incorrect.",
        "createdAt" : "2017-03-21T22:25:57Z",
        "updatedAt" : "2017-03-21T22:25:57Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "ff5bf52a-979f-4257-bde9-76a28ac26015",
        "parentId" : "a053caa7-960b-46a4-802e-2be44e04ec72",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Fixed in #8807 ",
        "createdAt" : "2017-03-21T22:37:52Z",
        "updatedAt" : "2017-03-21T22:37:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ea21d1092c9154d72d50b04ba2c8025704c679f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1062,1066 @@    # our internal _coeffs property need to be backed by __dict__['coeffs'] for\n    # scipy to work correctly. Note that as a result, the getter for .coeffs\n    # does not run unless accessed through one of its aliases.\n    @property\n    def _coeffs(self):"
  },
  {
    "id" : "c581bf0b-319b-44f7-b8e0-59c7ec4b5587",
    "prId" : 11197,
    "prUrl" : "https://github.com/numpy/numpy/pull/11197#pullrequestreview-176339065",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c8633b5-97b8-4dcb-8ee9-81db3ea87c01",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Add \"(see gh-<number-of-issue> and gh-11197)\"",
        "createdAt" : "2018-06-06T14:05:51Z",
        "updatedAt" : "2018-11-21T20:24:06Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "397e781a-999d-456d-a903-4ca7ca0dccca",
        "parentId" : "7c8633b5-97b8-4dcb-8ee9-81db3ea87c01",
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "For some reason my comment was weird here: should have been \"gh-11196 and gh-11197\"",
        "createdAt" : "2018-11-19T15:08:39Z",
        "updatedAt" : "2018-11-21T20:24:06Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "1837df75469d908c15434d97c15d9af4424ca897",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +647,651 @@            # note, this used to be: fac = resids / (len(x) - order - 2.0)\n            # it was deciced that the \"- 2\" (originally justified by \"Bayesian\n            # uncertainty analysis\") is not was the user expects\n            # (see gh-11196 and gh-11197)\n            fac = resids / (len(x) - order)"
  },
  {
    "id" : "e2269e18-4ec7-4f65-8977-3b5b82ac80fc",
    "prId" : 11197,
    "prUrl" : "https://github.com/numpy/numpy/pull/11197#pullrequestreview-176339065",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90647894-4726-43d1-84c0-76f0246ed7d1",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Very clear, thanks!",
        "createdAt" : "2018-11-19T15:05:50Z",
        "updatedAt" : "2018-11-21T20:24:06Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "1837df75469d908c15434d97c15d9af4424ca897",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +471,475 @@        reduced chi2 is unity. This scaling is omitted if ``cov='unscaled'``,\n        as is relevant for the case that the weights are 1/sigma**2, with\n        sigma known to be a reliable estimate of the uncertainty.\n\n    Returns"
  },
  {
    "id" : "6c622d84-d835-4ac7-a8d3-80eb3bcbaee9",
    "prId" : 11733,
    "prUrl" : "https://github.com/numpy/numpy/pull/11733#pullrequestreview-146307180",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eabac12e-50a9-42d5-8537-039a6247950d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Is the free function actual any more stable? I thought the stability came from the windowing used by the class method",
        "createdAt" : "2018-08-15T01:20:25Z",
        "updatedAt" : "2018-08-15T01:20:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "7dd49bc1-7773-4d8d-9d7f-d25a5c4adfec",
        "parentId" : "eabac12e-50a9-42d5-8537-039a6247950d",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Oops, no, it isn't. That last clause came out of the blue and needs to be removed, as the implementation function `polyfit` doesn't have documentation useful for the class function.",
        "createdAt" : "2018-08-15T01:30:09Z",
        "updatedAt" : "2018-08-15T01:30:10Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "03acc16a97392aef4206843012e8b52f2c3f03e1",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +402,406 @@    method is recommended for new code as it is more stable numerically. See\n    the documentation for the method for more information, or the convenience\n    function `polynomial.polyfit <numpy.polynomial.polynomial.polyfit>`.\n\n    Parameters"
  }
]