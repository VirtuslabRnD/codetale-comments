[
  {
    "id" : "312aeacb-217a-4a6d-91b5-d17f0c00e39e",
    "prId" : 3830,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df9896a1-8cfd-403d-9135-8e0b11e7466b",
        "parentId" : null,
        "authorId" : "95b0c1de-07f0-4542-85d6-e2f6fa86032a",
        "body" : "Add:\n    Notes\n    -----\n    By default, `dtype` is None, which means that the data-type of the output\n    array will be determined from the data.\n",
        "createdAt" : "2013-11-24T23:27:33Z",
        "updatedAt" : "2014-03-12T06:57:55Z",
        "lastEditedBy" : "95b0c1de-07f0-4542-85d6-e2f6fa86032a",
        "tags" : [
        ]
      },
      {
        "id" : "a56a5f6c-10bd-4772-884f-ba4cee28f74f",
        "parentId" : "df9896a1-8cfd-403d-9135-8e0b11e7466b",
        "authorId" : "83f4e38e-88e6-4696-b8d1-477d2db3e891",
        "body" : "Hi.\n\nI think we should consider the state of the io documentation as a whole. The four functions `ndfromtxt`,\n`mafromtxt`, `recfromtxt` and `recfromcsv`  exist online only as remarks in the user guide : http://docs.scipy.org/doc/numpy/user/basics.io.genfromtxt.html . They are not mentioned in http://docs.scipy.org/doc/numpy/reference/routines.io.html and therefore have no sphinx docs in the reference. Of-course they do appear in the python help() system.\n\nNot only `dtype` is given a default, but also `case_sensitive`, `names` and `delimiter`,\nso they should be addressed together. Any ideas on how to do that?\n\nThanks,\nYaron\n",
        "createdAt" : "2013-11-25T13:57:03Z",
        "updatedAt" : "2014-03-12T06:57:55Z",
        "lastEditedBy" : "83f4e38e-88e6-4696-b8d1-477d2db3e891",
        "tags" : [
        ]
      },
      {
        "id" : "0b625da1-fd11-45b6-81b3-64efb35c7bfa",
        "parentId" : "df9896a1-8cfd-403d-9135-8e0b11e7466b",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Sounds like it would be a good idea to add them. The appropriate spot looks to be `doc/source/reference/routines.io.rst`. You can open a new PR for that.\n",
        "createdAt" : "2014-02-27T19:47:38Z",
        "updatedAt" : "2014-03-12T06:57:55Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2003f3ed-6f1f-4fba-85e4-4b71267c9141",
        "parentId" : "df9896a1-8cfd-403d-9135-8e0b11e7466b",
        "authorId" : "83f4e38e-88e6-4696-b8d1-477d2db3e891",
        "body" : "Yeah, I'll open another PR for that.\n",
        "createdAt" : "2014-02-28T07:45:03Z",
        "updatedAt" : "2014-03-12T06:57:55Z",
        "lastEditedBy" : "83f4e38e-88e6-4696-b8d1-477d2db3e891",
        "tags" : [
        ]
      }
    ],
    "commit" : "aff43c0cb10796de7d6dfcc23bc27607ad2aacba",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1871,1875 @@    --------\n    numpy.genfromtxt : generic function to load ASCII data.\n\n    Notes\n    -----"
  },
  {
    "id" : "b925a304-8434-43aa-8fac-8fc964da4028",
    "prId" : 4141,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db33ef2e-f131-4b78-8911-ad4bee61e9d5",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "IIRC, getting the flags working was a pain and not intuitive. Hopefully this won't cause any problems.\n",
        "createdAt" : "2013-12-24T22:45:20Z",
        "updatedAt" : "2013-12-24T22:45:20Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e836c2c5cc0911269ac692a25fc4ec42273354b",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1334,1338 @@        if isinstance(fname, basestring):\n            if sys.version_info[0] == 2:\n                fhd = iter(np.lib._datasource.open(fname, 'rbU'))\n            else:\n                fhd = iter(np.lib._datasource.open(fname, 'rb'))"
  },
  {
    "id" : "69219d37-3ebc-4054-9247-09e6d381f359",
    "prId" : 4574,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af7db462-e047-4345-a156-acb0a987c19c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could be more than one character, for instance on windows. Perhaps \"line temination string\" would be better with a mention of the default '\\n'.\n",
        "createdAt" : "2014-04-01T16:00:00Z",
        "updatedAt" : "2014-04-01T16:00:00Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6c6bef0a-3389-4966-ac24-916253656464",
        "parentId" : "af7db462-e047-4345-a156-acb0a987c19c",
        "authorId" : "7579e378-cc88-408a-a943-fb30f63be03e",
        "body" : "You have a valid point, in my opinion.\n\nThat said, I do believe this is off-topic in this context though. What this\npull request is about is moving an existing text line in the docstring to\nthe place where it would be relevant.\n\nNo new content is introduced.\n\nGV\n\nOn Tue, Apr 1, 2014 at 6:00 PM, Charles Harris notifications@github.comwrote:\n\n> In numpy/lib/npyio.py:\n> \n> > @@ -913,6 +913,8 @@ def savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\\n', header='',\n> >      delimiter : str, optional\n> >          Character separating columns.\n> >      newline : str, optional\n> > -        Character separating lines.\n> \n> Could be more than one character, for instance on windows. Perhaps \"line\n> temination string\" would be better with a mention of the default '\\n'.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/numpy/numpy/pull/4574/files#r11166924\n> .\n",
        "createdAt" : "2014-04-01T16:03:12Z",
        "updatedAt" : "2014-04-01T16:03:12Z",
        "lastEditedBy" : "7579e378-cc88-408a-a943-fb30f63be03e",
        "tags" : [
        ]
      },
      {
        "id" : "073bc65d-df34-408b-9c5e-907a919dc1f0",
        "parentId" : "af7db462-e047-4345-a156-acb0a987c19c",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Well, but \"Character\" is wrong ;)\n",
        "createdAt" : "2014-04-01T17:27:27Z",
        "updatedAt" : "2014-04-01T17:27:27Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "39de3c865538ac4d32e6fffddb76f6892e7289c8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +914,918 @@        Character separating columns.\n    newline : str, optional\n        Character separating lines.\n\n        .. versionadded:: 1.5.0"
  },
  {
    "id" : "53ef3357-2a2f-4261-baba-03ddb982401c",
    "prId" : 6656,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d33048a-0e8a-4b94-8588-204ecc492ec1",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Actually, I think there is no reason to create usecols_as_list at all. Also the comment is rather unnecessary \"existing code\" is not existing code anymore as soon as we put this in ;).\n",
        "createdAt" : "2016-01-04T12:09:40Z",
        "updatedAt" : "2016-02-01T11:13:12Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "38d968d7-02c1-4bc5-aa98-d0448a12520b",
        "parentId" : "3d33048a-0e8a-4b94-8588-204ecc492ec1",
        "authorId" : "9f6d9174-f098-4e1f-b739-e4ee25717b5d",
        "body" : "By existing code I meant all the lines below this one where usecols is used.\nYou're right I can use usecols and avoid the creation of usecols_as_list. I wished to make this easier to read, I hate code like foo=some_fancy_type(foo) buried deep in some code and then waste time trying to understand why foo is not any more what it was at the beginning.\n",
        "createdAt" : "2016-01-04T13:32:29Z",
        "updatedAt" : "2016-02-01T11:13:12Z",
        "lastEditedBy" : "9f6d9174-f098-4e1f-b739-e4ee25717b5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "849b81804fb7a11dc80821dbd166562225c8450f",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +813,817 @@                raise\n        # Fall back to existing code\n        usecols = usecols_as_list\n\n    fown = False"
  },
  {
    "id" : "3600b1fd-2640-4fce-b93e-f3f16e21d732",
    "prId" : 6660,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "928647ba-a7ca-4dfe-b353-09a0af0b1a49",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Should be OK, looks like zipfile_factory is effectively private.\n",
        "createdAt" : "2016-04-06T23:21:56Z",
        "updatedAt" : "2016-04-07T02:17:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "5449f596-61aa-4925-bdd4-f3ab236e6d88",
        "parentId" : "928647ba-a7ca-4dfe-b353-09a0af0b1a49",
        "authorId" : "e4508f48-9350-4589-ad55-7fd6710b9677",
        "body" : "This is not changing the effective signature - `*args` was being passed to `zipfile.ZipFile` before, and `zipfile.ZipFile` takes `file` as its first argument, so anything that worked before should continue to work.\n",
        "createdAt" : "2016-04-06T23:26:45Z",
        "updatedAt" : "2016-04-07T02:17:43Z",
        "lastEditedBy" : "e4508f48-9350-4589-ad55-7fd6710b9677",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ac270b06e411dd0e13108ed5dafad31d5ab589d",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +87,91 @@\n\ndef zipfile_factory(file, *args, **kwargs):\n    \"\"\"\n    Create a ZipFile."
  },
  {
    "id" : "bf76d605-a41d-48f1-a9c5-8ba8bf976e81",
    "prId" : 9863,
    "prUrl" : "https://github.com/numpy/numpy/pull/9863#pullrequestreview-69425088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efb67a6a-7fe9-4947-8f04-075650d92451",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Might add a comment that since Python 3.6 it is possible to write directly to a zipfile.",
        "createdAt" : "2017-10-15T18:09:38Z",
        "updatedAt" : "2017-10-15T20:41:47Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "52c1ef6ff7cfc697930f9bf4f1eebc59ee7f538e",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +685,689 @@    zipf = zipfile_factory(file, mode=\"w\", compression=compression)\n\n    if sys.version_info >= (3, 6):\n        # Since Python 3.6 it is possible to write directly to a ZIP file.\n        for key, val in namedict.items():"
  },
  {
    "id" : "6f3093aa-7ea1-43bd-b98b-8211f607c45c",
    "prId" : 9863,
    "prUrl" : "https://github.com/numpy/numpy/pull/9863#pullrequestreview-69432918",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6ed924f-16f1-475e-b6c2-7ff9802988f3",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Is `force_zip64` an unrelated fix here?",
        "createdAt" : "2017-10-15T21:08:38Z",
        "updatedAt" : "2017-10-15T21:08:42Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "36ecebde-d2df-473d-ba48-014798abaa5e",
        "parentId" : "d6ed924f-16f1-475e-b6c2-7ff9802988f3",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "and should this be `wb` to match the one below?",
        "createdAt" : "2017-10-15T21:09:43Z",
        "updatedAt" : "2017-10-15T21:09:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5f9fccf1-336d-4ac4-b872-9200173380f4",
        "parentId" : "d6ed924f-16f1-475e-b6c2-7ff9802988f3",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "> The mode parameter, if included, must be 'r' (the default) or 'w'\r\n\r\nI suspect the zipped files are automatically binary.",
        "createdAt" : "2017-10-15T21:28:22Z",
        "updatedAt" : "2017-10-15T21:41:58Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2fb0edb0-4f4e-4009-8ef3-98c8ecff2fe6",
        "parentId" : "d6ed924f-16f1-475e-b6c2-7ff9802988f3",
        "authorId" : "3636a0cf-db78-4f5a-ac7f-e1a6005ed167",
        "body" : "`force_zip64` is needed when write a stream. Tests are failed without this option.\r\n\r\n`'r'` and `'w'` are the only supported options. Opened file-like objects are binary.",
        "createdAt" : "2017-10-15T21:32:27Z",
        "updatedAt" : "2017-10-15T21:32:27Z",
        "lastEditedBy" : "3636a0cf-db78-4f5a-ac7f-e1a6005ed167",
        "tags" : [
        ]
      },
      {
        "id" : "0c3545cc-251e-4212-8f6f-b03faa0e17e8",
        "parentId" : "d6ed924f-16f1-475e-b6c2-7ff9802988f3",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like zip64 has been available since 2.7, but the `force_zip64` keyword is new. It is used for files of unknown size that may exceed 2 GiB. As we are formatting the array, I suppose it qualifies as of unknown size, but probably not by much. ",
        "createdAt" : "2017-10-15T21:41:15Z",
        "updatedAt" : "2017-10-15T21:41:15Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "d2c8c15e-b60a-4e33-b5f9-918067e03849",
        "parentId" : "d6ed924f-16f1-475e-b6c2-7ff9802988f3",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Should we be using `force_zip64` on all version of python 3, not just 3.6?",
        "createdAt" : "2017-10-15T22:48:16Z",
        "updatedAt" : "2017-10-15T22:48:16Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d2f057aa-70aa-484e-b2e7-9ef0f91cd818",
        "parentId" : "d6ed924f-16f1-475e-b6c2-7ff9802988f3",
        "authorId" : "3636a0cf-db78-4f5a-ac7f-e1a6005ed167",
        "body" : "`force_zip64` doesn't exist in earlier versions.",
        "createdAt" : "2017-10-15T23:01:11Z",
        "updatedAt" : "2017-10-15T23:01:11Z",
        "lastEditedBy" : "3636a0cf-db78-4f5a-ac7f-e1a6005ed167",
        "tags" : [
        ]
      }
    ],
    "commit" : "52c1ef6ff7cfc697930f9bf4f1eebc59ee7f538e",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +691,695 @@            val = np.asanyarray(val)\n            force_zip64 = val.nbytes >= 2**30\n            with zipf.open(fname, 'w', force_zip64=force_zip64) as fid:\n                format.write_array(fid, val,\n                                   allow_pickle=allow_pickle,"
  },
  {
    "id" : "7cdedebd-2d29-4c8a-9cee-377c8a7a72cf",
    "prId" : 10054,
    "prUrl" : "https://github.com/numpy/numpy/pull/10054#pullrequestreview-77652927",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3caef6ea-8999-4a50-84c1-ae062b4738c5",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Is this really true? It seems like we should now allow and encourage utf8.",
        "createdAt" : "2017-11-19T19:42:38Z",
        "updatedAt" : "2017-11-24T23:52:18Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "52688add-d261-4325-b9af-7375cc63274a",
        "parentId" : "3caef6ea-8999-4a50-84c1-ae062b4738c5",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I wondered about that too, but the problem is the pickled case.\r\n```\r\n    if encoding not in ('ASCII', 'latin1', 'bytes'):\r\n        # The 'encoding' value for pickle also affects what encoding\r\n        # the serialized binary data of NumPy arrays is loaded\r\n        # in. Pickle does not pass on the encoding information to\r\n        # NumPy. The unpickling code in numpy.core.multiarray is\r\n        # written to assume that unicode data appearing where binary\r\n        # should be is in 'latin1'. 'bytes' is also safe, as is 'ASCII'.\r\n        #\r\n        # Other encoding values can corrupt binary data, and we\r\n        # purposefully disallow them. For the same reason, the errors=\r\n        # argument is not exposed, as values other than 'strict'\r\n        # result can similarly silently corrupt numerical data.\r\n```",
        "createdAt" : "2017-11-19T19:49:23Z",
        "updatedAt" : "2017-11-24T23:52:18Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d97b3aafdca2722bbe2f0c10a96544121c8f78b",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +299,303 @@        loading Python 2 generated pickled files in Python 3, which includes\n        npy/npz files containing object arrays. Values other than 'latin1',\n        'ASCII', and 'bytes' are not allowed, as they can corrupt numerical\n        data. Default: 'ASCII'\n"
  },
  {
    "id" : "03e284f8-8433-4bcb-be9a-df8b0fc13270",
    "prId" : 10054,
    "prUrl" : "https://github.com/numpy/numpy/pull/10054#pullrequestreview-88672871",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62ce4b88-1b49-4c87-8acf-20dbebe0373e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This chunk needs to run for `bytes` too",
        "createdAt" : "2018-01-14T04:01:14Z",
        "updatedAt" : "2018-01-14T04:01:14Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d97b3aafdca2722bbe2f0c10a96544121c8f78b",
    "line" : 667,
    "diffHunk" : "@@ -1,1 +2067,2071 @@        for i in strcolidx:\n            max_line_length = max(len(row[i]) for row in data)\n            column_types[i] = np.dtype((type_str, max_line_length))\n        #\n        if names is None:"
  },
  {
    "id" : "8c119b8d-1150-4cb5-aed7-987994f52c1a",
    "prId" : 10737,
    "prUrl" : "https://github.com/numpy/numpy/pull/10737#pullrequestreview-103226181",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd54811a-bb88-429e-ba58-ef7f0a41eec7",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "This code looks very dubious to me -- the comment claims that the overhead from `resize` should be small compared to the cost of reading the data, but reading the data is O(n) and resizing is O(n**2), so for large enough arrays it will always dominate, right? I guess for large arrays we'll usually get lucky with the memory allocator, but still...\r\n\r\nAnyway, that's not this PR's fault, and the actual change looks correct.",
        "createdAt" : "2018-03-12T20:58:32Z",
        "updatedAt" : "2018-03-12T21:34:59Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "9262da5b-9997-4f82-abe6-bbee3c7c7fdb",
        "parentId" : "cd54811a-bb88-429e-ba58-ef7f0a41eec7",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Right, it should probably just do the standard exponential overallocation here.",
        "createdAt" : "2018-03-12T21:27:23Z",
        "updatedAt" : "2018-03-12T21:34:59Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "9af7d06e57f8593030a4819de3698a429352b950",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1106,1110 @@                nshape[0] += len(x)\n                X.resize(nshape, refcheck=False)\n                X[pos:, ...] = x\n    finally:\n        if fown:"
  },
  {
    "id" : "446b155a-1959-40d5-9277-caa7786de26f",
    "prId" : 11082,
    "prUrl" : "https://github.com/numpy/numpy/pull/11082#pullrequestreview-119656171",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14a9096a-43c1-48d5-82a9-1d9903348b72",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Does this actually render as a link to the documentation?",
        "createdAt" : "2018-05-13T13:56:05Z",
        "updatedAt" : "2018-05-13T13:56:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "af8c9df8-fda9-46d2-8845-30c6f730b6f3",
        "parentId" : "14a9096a-43c1-48d5-82a9-1d9903348b72",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "it did for me when I built locally, this was the only way I **could** get a link to render. I expected that I could have used `:ref:something` but I couldn't figure out the `something`",
        "createdAt" : "2018-05-13T14:17:46Z",
        "updatedAt" : "2018-05-13T14:17:46Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "85282a5dac927ed731655e0a58fb67d2483f18b9",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +476,480 @@    Notes\n    -----\n    For a description of the ``.npy`` format, see :py:mod:`numpy.lib.format`\n\n    Examples"
  }
]