[
  {
    "id" : "312aeacb-217a-4a6d-91b5-d17f0c00e39e",
    "prId" : 3830,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df9896a1-8cfd-403d-9135-8e0b11e7466b",
        "parentId" : null,
        "authorId" : "95b0c1de-07f0-4542-85d6-e2f6fa86032a",
        "body" : "Add:\n    Notes\n    -----\n    By default, `dtype` is None, which means that the data-type of the output\n    array will be determined from the data.\n",
        "createdAt" : "2013-11-24T23:27:33Z",
        "updatedAt" : "2014-03-12T06:57:55Z",
        "lastEditedBy" : "95b0c1de-07f0-4542-85d6-e2f6fa86032a",
        "tags" : [
        ]
      },
      {
        "id" : "a56a5f6c-10bd-4772-884f-ba4cee28f74f",
        "parentId" : "df9896a1-8cfd-403d-9135-8e0b11e7466b",
        "authorId" : "83f4e38e-88e6-4696-b8d1-477d2db3e891",
        "body" : "Hi.\n\nI think we should consider the state of the io documentation as a whole. The four functions `ndfromtxt`,\n`mafromtxt`, `recfromtxt` and `recfromcsv`  exist online only as remarks in the user guide : http://docs.scipy.org/doc/numpy/user/basics.io.genfromtxt.html . They are not mentioned in http://docs.scipy.org/doc/numpy/reference/routines.io.html and therefore have no sphinx docs in the reference. Of-course they do appear in the python help() system.\n\nNot only `dtype` is given a default, but also `case_sensitive`, `names` and `delimiter`,\nso they should be addressed together. Any ideas on how to do that?\n\nThanks,\nYaron\n",
        "createdAt" : "2013-11-25T13:57:03Z",
        "updatedAt" : "2014-03-12T06:57:55Z",
        "lastEditedBy" : "83f4e38e-88e6-4696-b8d1-477d2db3e891",
        "tags" : [
        ]
      },
      {
        "id" : "0b625da1-fd11-45b6-81b3-64efb35c7bfa",
        "parentId" : "df9896a1-8cfd-403d-9135-8e0b11e7466b",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Sounds like it would be a good idea to add them. The appropriate spot looks to be `doc/source/reference/routines.io.rst`. You can open a new PR for that.\n",
        "createdAt" : "2014-02-27T19:47:38Z",
        "updatedAt" : "2014-03-12T06:57:55Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2003f3ed-6f1f-4fba-85e4-4b71267c9141",
        "parentId" : "df9896a1-8cfd-403d-9135-8e0b11e7466b",
        "authorId" : "83f4e38e-88e6-4696-b8d1-477d2db3e891",
        "body" : "Yeah, I'll open another PR for that.\n",
        "createdAt" : "2014-02-28T07:45:03Z",
        "updatedAt" : "2014-03-12T06:57:55Z",
        "lastEditedBy" : "83f4e38e-88e6-4696-b8d1-477d2db3e891",
        "tags" : [
        ]
      }
    ],
    "commit" : "aff43c0cb10796de7d6dfcc23bc27607ad2aacba",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1871,1875 @@    --------\n    numpy.genfromtxt : generic function to load ASCII data.\n\n    Notes\n    -----"
  },
  {
    "id" : "b925a304-8434-43aa-8fac-8fc964da4028",
    "prId" : 4141,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db33ef2e-f131-4b78-8911-ad4bee61e9d5",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "IIRC, getting the flags working was a pain and not intuitive. Hopefully this won't cause any problems.\n",
        "createdAt" : "2013-12-24T22:45:20Z",
        "updatedAt" : "2013-12-24T22:45:20Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e836c2c5cc0911269ac692a25fc4ec42273354b",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1334,1338 @@        if isinstance(fname, basestring):\n            if sys.version_info[0] == 2:\n                fhd = iter(np.lib._datasource.open(fname, 'rbU'))\n            else:\n                fhd = iter(np.lib._datasource.open(fname, 'rb'))"
  },
  {
    "id" : "69219d37-3ebc-4054-9247-09e6d381f359",
    "prId" : 4574,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af7db462-e047-4345-a156-acb0a987c19c",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could be more than one character, for instance on windows. Perhaps \"line temination string\" would be better with a mention of the default '\\n'.\n",
        "createdAt" : "2014-04-01T16:00:00Z",
        "updatedAt" : "2014-04-01T16:00:00Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6c6bef0a-3389-4966-ac24-916253656464",
        "parentId" : "af7db462-e047-4345-a156-acb0a987c19c",
        "authorId" : "7579e378-cc88-408a-a943-fb30f63be03e",
        "body" : "You have a valid point, in my opinion.\n\nThat said, I do believe this is off-topic in this context though. What this\npull request is about is moving an existing text line in the docstring to\nthe place where it would be relevant.\n\nNo new content is introduced.\n\nGV\n\nOn Tue, Apr 1, 2014 at 6:00 PM, Charles Harris notifications@github.comwrote:\n\n> In numpy/lib/npyio.py:\n> \n> > @@ -913,6 +913,8 @@ def savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\\n', header='',\n> >      delimiter : str, optional\n> >          Character separating columns.\n> >      newline : str, optional\n> > -        Character separating lines.\n> \n> Could be more than one character, for instance on windows. Perhaps \"line\n> temination string\" would be better with a mention of the default '\\n'.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/numpy/numpy/pull/4574/files#r11166924\n> .\n",
        "createdAt" : "2014-04-01T16:03:12Z",
        "updatedAt" : "2014-04-01T16:03:12Z",
        "lastEditedBy" : "7579e378-cc88-408a-a943-fb30f63be03e",
        "tags" : [
        ]
      },
      {
        "id" : "073bc65d-df34-408b-9c5e-907a919dc1f0",
        "parentId" : "af7db462-e047-4345-a156-acb0a987c19c",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Well, but \"Character\" is wrong ;)\n",
        "createdAt" : "2014-04-01T17:27:27Z",
        "updatedAt" : "2014-04-01T17:27:27Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "39de3c865538ac4d32e6fffddb76f6892e7289c8",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +914,918 @@        Character separating columns.\n    newline : str, optional\n        Character separating lines.\n\n        .. versionadded:: 1.5.0"
  },
  {
    "id" : "53ef3357-2a2f-4261-baba-03ddb982401c",
    "prId" : 6656,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d33048a-0e8a-4b94-8588-204ecc492ec1",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Actually, I think there is no reason to create usecols_as_list at all. Also the comment is rather unnecessary \"existing code\" is not existing code anymore as soon as we put this in ;).\n",
        "createdAt" : "2016-01-04T12:09:40Z",
        "updatedAt" : "2016-02-01T11:13:12Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "38d968d7-02c1-4bc5-aa98-d0448a12520b",
        "parentId" : "3d33048a-0e8a-4b94-8588-204ecc492ec1",
        "authorId" : "9f6d9174-f098-4e1f-b739-e4ee25717b5d",
        "body" : "By existing code I meant all the lines below this one where usecols is used.\nYou're right I can use usecols and avoid the creation of usecols_as_list. I wished to make this easier to read, I hate code like foo=some_fancy_type(foo) buried deep in some code and then waste time trying to understand why foo is not any more what it was at the beginning.\n",
        "createdAt" : "2016-01-04T13:32:29Z",
        "updatedAt" : "2016-02-01T11:13:12Z",
        "lastEditedBy" : "9f6d9174-f098-4e1f-b739-e4ee25717b5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "849b81804fb7a11dc80821dbd166562225c8450f",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +813,817 @@                raise\n        # Fall back to existing code\n        usecols = usecols_as_list\n\n    fown = False"
  },
  {
    "id" : "3600b1fd-2640-4fce-b93e-f3f16e21d732",
    "prId" : 6660,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "928647ba-a7ca-4dfe-b353-09a0af0b1a49",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Should be OK, looks like zipfile_factory is effectively private.\n",
        "createdAt" : "2016-04-06T23:21:56Z",
        "updatedAt" : "2016-04-07T02:17:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "5449f596-61aa-4925-bdd4-f3ab236e6d88",
        "parentId" : "928647ba-a7ca-4dfe-b353-09a0af0b1a49",
        "authorId" : "e4508f48-9350-4589-ad55-7fd6710b9677",
        "body" : "This is not changing the effective signature - `*args` was being passed to `zipfile.ZipFile` before, and `zipfile.ZipFile` takes `file` as its first argument, so anything that worked before should continue to work.\n",
        "createdAt" : "2016-04-06T23:26:45Z",
        "updatedAt" : "2016-04-07T02:17:43Z",
        "lastEditedBy" : "e4508f48-9350-4589-ad55-7fd6710b9677",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ac270b06e411dd0e13108ed5dafad31d5ab589d",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +87,91 @@\n\ndef zipfile_factory(file, *args, **kwargs):\n    \"\"\"\n    Create a ZipFile."
  },
  {
    "id" : "bf76d605-a41d-48f1-a9c5-8ba8bf976e81",
    "prId" : 9863,
    "prUrl" : "https://github.com/numpy/numpy/pull/9863#pullrequestreview-69425088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efb67a6a-7fe9-4947-8f04-075650d92451",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Might add a comment that since Python 3.6 it is possible to write directly to a zipfile.",
        "createdAt" : "2017-10-15T18:09:38Z",
        "updatedAt" : "2017-10-15T20:41:47Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "52c1ef6ff7cfc697930f9bf4f1eebc59ee7f538e",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +685,689 @@    zipf = zipfile_factory(file, mode=\"w\", compression=compression)\n\n    if sys.version_info >= (3, 6):\n        # Since Python 3.6 it is possible to write directly to a ZIP file.\n        for key, val in namedict.items():"
  },
  {
    "id" : "6f3093aa-7ea1-43bd-b98b-8211f607c45c",
    "prId" : 9863,
    "prUrl" : "https://github.com/numpy/numpy/pull/9863#pullrequestreview-69432918",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6ed924f-16f1-475e-b6c2-7ff9802988f3",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Is `force_zip64` an unrelated fix here?",
        "createdAt" : "2017-10-15T21:08:38Z",
        "updatedAt" : "2017-10-15T21:08:42Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "36ecebde-d2df-473d-ba48-014798abaa5e",
        "parentId" : "d6ed924f-16f1-475e-b6c2-7ff9802988f3",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "and should this be `wb` to match the one below?",
        "createdAt" : "2017-10-15T21:09:43Z",
        "updatedAt" : "2017-10-15T21:09:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5f9fccf1-336d-4ac4-b872-9200173380f4",
        "parentId" : "d6ed924f-16f1-475e-b6c2-7ff9802988f3",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "> The mode parameter, if included, must be 'r' (the default) or 'w'\r\n\r\nI suspect the zipped files are automatically binary.",
        "createdAt" : "2017-10-15T21:28:22Z",
        "updatedAt" : "2017-10-15T21:41:58Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2fb0edb0-4f4e-4009-8ef3-98c8ecff2fe6",
        "parentId" : "d6ed924f-16f1-475e-b6c2-7ff9802988f3",
        "authorId" : "3636a0cf-db78-4f5a-ac7f-e1a6005ed167",
        "body" : "`force_zip64` is needed when write a stream. Tests are failed without this option.\r\n\r\n`'r'` and `'w'` are the only supported options. Opened file-like objects are binary.",
        "createdAt" : "2017-10-15T21:32:27Z",
        "updatedAt" : "2017-10-15T21:32:27Z",
        "lastEditedBy" : "3636a0cf-db78-4f5a-ac7f-e1a6005ed167",
        "tags" : [
        ]
      },
      {
        "id" : "0c3545cc-251e-4212-8f6f-b03faa0e17e8",
        "parentId" : "d6ed924f-16f1-475e-b6c2-7ff9802988f3",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like zip64 has been available since 2.7, but the `force_zip64` keyword is new. It is used for files of unknown size that may exceed 2 GiB. As we are formatting the array, I suppose it qualifies as of unknown size, but probably not by much. ",
        "createdAt" : "2017-10-15T21:41:15Z",
        "updatedAt" : "2017-10-15T21:41:15Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "d2c8c15e-b60a-4e33-b5f9-918067e03849",
        "parentId" : "d6ed924f-16f1-475e-b6c2-7ff9802988f3",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Should we be using `force_zip64` on all version of python 3, not just 3.6?",
        "createdAt" : "2017-10-15T22:48:16Z",
        "updatedAt" : "2017-10-15T22:48:16Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d2f057aa-70aa-484e-b2e7-9ef0f91cd818",
        "parentId" : "d6ed924f-16f1-475e-b6c2-7ff9802988f3",
        "authorId" : "3636a0cf-db78-4f5a-ac7f-e1a6005ed167",
        "body" : "`force_zip64` doesn't exist in earlier versions.",
        "createdAt" : "2017-10-15T23:01:11Z",
        "updatedAt" : "2017-10-15T23:01:11Z",
        "lastEditedBy" : "3636a0cf-db78-4f5a-ac7f-e1a6005ed167",
        "tags" : [
        ]
      }
    ],
    "commit" : "52c1ef6ff7cfc697930f9bf4f1eebc59ee7f538e",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +691,695 @@            val = np.asanyarray(val)\n            force_zip64 = val.nbytes >= 2**30\n            with zipf.open(fname, 'w', force_zip64=force_zip64) as fid:\n                format.write_array(fid, val,\n                                   allow_pickle=allow_pickle,"
  },
  {
    "id" : "7cdedebd-2d29-4c8a-9cee-377c8a7a72cf",
    "prId" : 10054,
    "prUrl" : "https://github.com/numpy/numpy/pull/10054#pullrequestreview-77652927",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3caef6ea-8999-4a50-84c1-ae062b4738c5",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Is this really true? It seems like we should now allow and encourage utf8.",
        "createdAt" : "2017-11-19T19:42:38Z",
        "updatedAt" : "2017-11-24T23:52:18Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "52688add-d261-4325-b9af-7375cc63274a",
        "parentId" : "3caef6ea-8999-4a50-84c1-ae062b4738c5",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I wondered about that too, but the problem is the pickled case.\r\n```\r\n    if encoding not in ('ASCII', 'latin1', 'bytes'):\r\n        # The 'encoding' value for pickle also affects what encoding\r\n        # the serialized binary data of NumPy arrays is loaded\r\n        # in. Pickle does not pass on the encoding information to\r\n        # NumPy. The unpickling code in numpy.core.multiarray is\r\n        # written to assume that unicode data appearing where binary\r\n        # should be is in 'latin1'. 'bytes' is also safe, as is 'ASCII'.\r\n        #\r\n        # Other encoding values can corrupt binary data, and we\r\n        # purposefully disallow them. For the same reason, the errors=\r\n        # argument is not exposed, as values other than 'strict'\r\n        # result can similarly silently corrupt numerical data.\r\n```",
        "createdAt" : "2017-11-19T19:49:23Z",
        "updatedAt" : "2017-11-24T23:52:18Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d97b3aafdca2722bbe2f0c10a96544121c8f78b",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +299,303 @@        loading Python 2 generated pickled files in Python 3, which includes\n        npy/npz files containing object arrays. Values other than 'latin1',\n        'ASCII', and 'bytes' are not allowed, as they can corrupt numerical\n        data. Default: 'ASCII'\n"
  },
  {
    "id" : "03e284f8-8433-4bcb-be9a-df8b0fc13270",
    "prId" : 10054,
    "prUrl" : "https://github.com/numpy/numpy/pull/10054#pullrequestreview-88672871",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62ce4b88-1b49-4c87-8acf-20dbebe0373e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This chunk needs to run for `bytes` too",
        "createdAt" : "2018-01-14T04:01:14Z",
        "updatedAt" : "2018-01-14T04:01:14Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d97b3aafdca2722bbe2f0c10a96544121c8f78b",
    "line" : 667,
    "diffHunk" : "@@ -1,1 +2067,2071 @@        for i in strcolidx:\n            max_line_length = max(len(row[i]) for row in data)\n            column_types[i] = np.dtype((type_str, max_line_length))\n        #\n        if names is None:"
  },
  {
    "id" : "8c119b8d-1150-4cb5-aed7-987994f52c1a",
    "prId" : 10737,
    "prUrl" : "https://github.com/numpy/numpy/pull/10737#pullrequestreview-103226181",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd54811a-bb88-429e-ba58-ef7f0a41eec7",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "This code looks very dubious to me -- the comment claims that the overhead from `resize` should be small compared to the cost of reading the data, but reading the data is O(n) and resizing is O(n**2), so for large enough arrays it will always dominate, right? I guess for large arrays we'll usually get lucky with the memory allocator, but still...\r\n\r\nAnyway, that's not this PR's fault, and the actual change looks correct.",
        "createdAt" : "2018-03-12T20:58:32Z",
        "updatedAt" : "2018-03-12T21:34:59Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      },
      {
        "id" : "9262da5b-9997-4f82-abe6-bbee3c7c7fdb",
        "parentId" : "cd54811a-bb88-429e-ba58-ef7f0a41eec7",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Right, it should probably just do the standard exponential overallocation here.",
        "createdAt" : "2018-03-12T21:27:23Z",
        "updatedAt" : "2018-03-12T21:34:59Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "9af7d06e57f8593030a4819de3698a429352b950",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1106,1110 @@                nshape[0] += len(x)\n                X.resize(nshape, refcheck=False)\n                X[pos:, ...] = x\n    finally:\n        if fown:"
  },
  {
    "id" : "446b155a-1959-40d5-9277-caa7786de26f",
    "prId" : 11082,
    "prUrl" : "https://github.com/numpy/numpy/pull/11082#pullrequestreview-119656171",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14a9096a-43c1-48d5-82a9-1d9903348b72",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Does this actually render as a link to the documentation?",
        "createdAt" : "2018-05-13T13:56:05Z",
        "updatedAt" : "2018-05-13T13:56:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "af8c9df8-fda9-46d2-8845-30c6f730b6f3",
        "parentId" : "14a9096a-43c1-48d5-82a9-1d9903348b72",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "it did for me when I built locally, this was the only way I **could** get a link to render. I expected that I could have used `:ref:something` but I couldn't figure out the `something`",
        "createdAt" : "2018-05-13T14:17:46Z",
        "updatedAt" : "2018-05-13T14:17:46Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "85282a5dac927ed731655e0a58fb67d2483f18b9",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +476,480 @@    Notes\n    -----\n    For a description of the ``.npy`` format, see :py:mod:`numpy.lib.format`\n\n    Examples"
  },
  {
    "id" : "1fa7a771-a9bb-4599-b1f4-59a0f82cfe1c",
    "prId" : 11522,
    "prUrl" : "https://github.com/numpy/numpy/pull/11522#pullrequestreview-137396425",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6b225d2-bbe4-41e5-b0f6-33d8d00d5b50",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "Perhaps worth noting that when `np.loadtxt` receives an empty input file it emits:\r\n`UserWarning: loadtxt: Empty input file`\r\n\r\nI'm not necessarily saying that should happen here, but just thought I'd bring that up in case some consistency with empty file loading is desired across functions. If we did want to do that, one could presumably just adjust the unit test to check for the appropriate warning (and still not allow an exception, obviously).",
        "createdAt" : "2018-07-12T12:21:04Z",
        "updatedAt" : "2018-07-12T12:23:48Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "d935d678-3af2-4969-abae-fc1581f1fdc4",
        "parentId" : "d6b225d2-bbe4-41e5-b0f6-33d8d00d5b50",
        "authorId" : "f7d8f3b2-0a48-4127-9cea-90777f4917b7",
        "body" : "@tylerjereddy Loading an empty text file is fundamentally not the same as loading an empty archive.  Note that `np.load()` of a `npy` file containing a single empty array does not warn.  Loading an empty text file is different, because there is really no way to guess what the `dtype` is supposed to be.  Here there's no such problem.",
        "createdAt" : "2018-07-16T12:05:17Z",
        "updatedAt" : "2018-07-16T12:06:07Z",
        "lastEditedBy" : "f7d8f3b2-0a48-4127-9cea-90777f4917b7",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c74e384a7ec961d171b7d6a0fbf20b2bc831c28",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +419,423 @@        # to seek past the beginning of the file\n        fid.seek(-min(N, len(magic)), 1)  # back-up\n        if magic.startswith(_ZIP_PREFIX) or magic.startswith(_ZIP_SUFFIX):\n            # zip-file (assume .npz)\n            # Transfer file ownership to NpzFile"
  },
  {
    "id" : "72a5459d-e3f1-4ffb-9d0d-e1aec325c46f",
    "prId" : 11962,
    "prUrl" : "https://github.com/numpy/numpy/pull/11962#pullrequestreview-155756963",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f9215a7-10d4-4e4b-bef1-d8cdd552bc13",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Needs an explanation of interaction of `skiprows` and `maxlines`, \"Read `maxlines` lines of content after `skiplines`. The default (`None`) is to ...\"",
        "createdAt" : "2018-09-16T10:45:03Z",
        "updatedAt" : "2018-09-30T15:47:50Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "3b76ff05-6157-4b98-ac3e-51cf13f94969",
        "parentId" : "8f9215a7-10d4-4e4b-bef1-d8cdd552bc13",
        "authorId" : "b5bdf83b-d342-48d8-8e0a-f43393020903",
        "body" : "Resolved in the latest commit.",
        "createdAt" : "2018-09-16T20:22:31Z",
        "updatedAt" : "2018-09-30T15:47:50Z",
        "lastEditedBy" : "b5bdf83b-d342-48d8-8e0a-f43393020903",
        "tags" : [
        ]
      }
    ],
    "commit" : "4577a69516bcc0406aaaa48304c8a2cbd82c58c9",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +840,844 @@        is to read all the lines.\n\n        .. versionadded:: 1.16.0\n\n    Returns"
  },
  {
    "id" : "5629b420-1c3d-45d2-ab64-b4dc5e10e3b3",
    "prId" : 12157,
    "prUrl" : "https://github.com/numpy/numpy/pull/12157#pullrequestreview-164262261",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc839d00-ddae-4b4d-814c-ee13cf2cd7bb",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Some alternatives to this block, and the similar ones below\r\n\r\nThis patch:\r\n```python\r\nif hasattr(file, 'read'):\r\n    fid = file\r\n    own_fid = False\r\nelse:\r\n    fid = open(os_fspath(file), \"rb\")\r\n    own_fid = True\r\n```\r\n\r\nAlternative 1 (smaller diff);\r\n```python\r\nif isinstance(file, os_PathLike):\r\n    file = os_fspath(file)\r\nif isinstance(file, basestring):\r\n    fid = open(file, \"rb\")\r\n    own_fid = True\r\nelse:\r\n    fid = file\r\n    own_fid = False\r\n```\r\n\r\nAlternative 2 (no duck-typing):\r\n```python\r\nif isinstance(file, io.IOBase):\r\n    fid = file\r\n    own_fid = False\r\nelse:\r\n    fid = open(os_fspath(file), \"rb\")\r\n    own_fid = True\r\n```",
        "createdAt" : "2018-10-12T14:18:16Z",
        "updatedAt" : "2018-10-12T15:39:57Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "489362c0779bd60c688ce87baf9ecd6ac9ccf938",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +402,406 @@    if hasattr(file, 'read'):\n        fid = file\n        own_fid = False\n    else:\n        fid = open(os_fspath(file), \"rb\")"
  },
  {
    "id" : "64fb95c1-d1f0-4b6f-9de1-fb13af25c52b",
    "prId" : 12253,
    "prUrl" : "https://github.com/numpy/numpy/pull/12253#pullrequestreview-180543863",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99d625db-f023-4fda-8669-5c933002396e",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I suspect this may be a random ordering. Perhaps add `sorted'?",
        "createdAt" : "2018-12-02T01:05:01Z",
        "updatedAt" : "2018-12-14T18:23:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "28f8a85b9ece5773a8ac75ffcd2502fc93612eff",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +175,179 @@    True\n    >>> sorted(npz.files)\n    ['x', 'y']\n    >>> npz['x']  # getitem access\n    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
  },
  {
    "id" : "5b395eb0-de51-43b4-881d-520da23e3d01",
    "prId" : 12253,
    "prUrl" : "https://github.com/numpy/numpy/pull/12253#pullrequestreview-180543870",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8402be9-9b5d-4a4f-a4c2-bbc76a1d630d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "ordering again",
        "createdAt" : "2018-12-02T01:05:16Z",
        "updatedAt" : "2018-12-14T18:23:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "28f8a85b9ece5773a8ac75ffcd2502fc93612eff",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +612,616 @@    >>> npzfile = np.load(outfile)\n    >>> sorted(npzfile.files)\n    ['x', 'y']\n    >>> npzfile['x']\n    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
  },
  {
    "id" : "211c839b-de9f-4e36-b6e3-9cf5cd7e28f1",
    "prId" : 13222,
    "prUrl" : "https://github.com/numpy/numpy/pull/13222#pullrequestreview-222395594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35b28f29-a5b2-4d76-b2cc-59f5bc02d6dc",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "needs a version number, see the other deprecation notices",
        "createdAt" : "2019-04-03T18:58:05Z",
        "updatedAt" : "2019-06-07T17:01:02Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "0ebb7345-d583-4f07-8dec-ed74e0cf92ac",
        "parentId" : "35b28f29-a5b2-4d76-b2cc-59f5bc02d6dc",
        "authorId" : "6756fac1-4207-49c0-a957-2b66a2f01b1e",
        "body" : "I was wondering if it should be 1.17?",
        "createdAt" : "2019-04-03T19:00:35Z",
        "updatedAt" : "2019-06-07T17:01:02Z",
        "lastEditedBy" : "6756fac1-4207-49c0-a957-2b66a2f01b1e",
        "tags" : [
        ]
      }
    ],
    "commit" : "13561bd89d67bd101cdb195f003ae1e34c6a5b52",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +2231,2235 @@        explicitly called as ``ndfromtxt(..., usemask=True)``.\n        Use `genfromtxt` instead.\n\n    Parameters\n    ----------"
  },
  {
    "id" : "f0dfebef-e897-4bf7-8f72-289802711ebb",
    "prId" : 13222,
    "prUrl" : "https://github.com/numpy/numpy/pull/13222#pullrequestreview-246956284",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca57de86-c71d-41d7-973e-2f8ae2b7c56b",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Needs a comment above the warning with the date, version, gh-issue format",
        "createdAt" : "2019-04-03T18:58:52Z",
        "updatedAt" : "2019-06-07T17:01:02Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "a956e222-56a6-4807-9457-c224d423643c",
        "parentId" : "ca57de86-c71d-41d7-973e-2f8ae2b7c56b",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Should also recommend a replacement, perhaps `` `ndfromtxt` is a deprecated alias of `genfromtxt`, prefer the latter ``",
        "createdAt" : "2019-06-07T07:50:07Z",
        "updatedAt" : "2019-06-07T17:01:02Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "13561bd89d67bd101cdb195f003ae1e34c6a5b52",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +2246,2250 @@        \"np.ndfromtxt is a deprecated alias of np.genfromtxt, \"\n        \"prefer the latter.\",\n        DeprecationWarning, stacklevel=2)\n    return genfromtxt(fname, **kwargs)\n"
  },
  {
    "id" : "cf00bec7-3e77-4744-993a-7631a0d28c2f",
    "prId" : 13312,
    "prUrl" : "https://github.com/numpy/numpy/pull/13312#pullrequestreview-226336420",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c6593d1-62eb-4338-bfb9-dfe15b0b10f3",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "is this the generator codepath?",
        "createdAt" : "2019-04-12T21:11:26Z",
        "updatedAt" : "2019-04-13T18:34:46Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "cb052dc2-6c89-4c0d-b2fb-f04e1e85582a",
        "parentId" : "0c6593d1-62eb-4338-bfb9-dfe15b0b10f3",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Any iterable of strings, including lists and files",
        "createdAt" : "2019-04-13T03:08:29Z",
        "updatedAt" : "2019-04-13T18:34:46Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "e88d0196568863ef03869b393e619ec89e85f93a",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +1743,1747 @@        else:\n            fid = fname\n            fid_ctx = contextlib_nullcontext(fid)\n        fhd = iter(fid)\n    except TypeError:"
  },
  {
    "id" : "23d40046-6718-458a-881b-1b6645a1a1ea",
    "prId" : 13312,
    "prUrl" : "https://github.com/numpy/numpy/pull/13312#pullrequestreview-226366866",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4dbd1247-b465-42e6-8a02-a4858f763eab",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Line is a bit long.",
        "createdAt" : "2019-04-13T19:49:54Z",
        "updatedAt" : "2019-04-13T19:49:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e88d0196568863ef03869b393e619ec89e85f93a",
    "line" : 459,
    "diffHunk" : "@@ -1,1 +1972,1976 @@            elif byte_converters:\n                # converters may use decode to workaround numpy's old behaviour,\n                # so encode the string again before passing to the user converter\n                def tobytes_first(x, conv):\n                    if type(x) is bytes:"
  },
  {
    "id" : "21c85ed1-8674-4f58-b52f-08425a01ebf1",
    "prId" : 13312,
    "prUrl" : "https://github.com/numpy/numpy/pull/13312#pullrequestreview-226367724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "216e9d8f-732f-4f6f-8238-bc4f9569b218",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Interesting way to do this.",
        "createdAt" : "2019-04-13T19:58:31Z",
        "updatedAt" : "2019-04-13T19:58:31Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "96513543-4b86-41c3-b148-cef06cf6c9bd",
        "parentId" : "216e9d8f-732f-4f6f-8238-bc4f9569b218",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Using `closing` to be on the safe side, since I have no idea if all possible results of `_datasouce.open` are context managers themselves.",
        "createdAt" : "2019-04-13T20:13:50Z",
        "updatedAt" : "2019-04-13T20:13:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "e88d0196568863ef03869b393e619ec89e85f93a",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1740,1744 @@        if isinstance(fname, basestring):\n            fid = np.lib._datasource.open(fname, 'rt', encoding=encoding)\n            fid_ctx = contextlib.closing(fid)\n        else:\n            fid = fname"
  },
  {
    "id" : "c16168fa-b9fb-4611-84d2-e4b331806ca7",
    "prId" : 13397,
    "prUrl" : "https://github.com/numpy/numpy/pull/13397#pullrequestreview-238229015",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e1eaf29-904e-4408-b84e-ac4d79546855",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "The example I was asking for was one that shows how to handle the field name '# of chars`, which is what this issue was about in the first place?",
        "createdAt" : "2019-05-12T18:28:48Z",
        "updatedAt" : "2019-05-16T07:14:53Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f88bb887-f7e1-4947-8b08-59bcf97ee89c",
        "parentId" : "2e1eaf29-904e-4408-b84e-ac4d79546855",
        "authorId" : "82f68155-8062-43d2-b457-007e9e7d97cf",
        "body" : "Since the comments param is '#', it gets discarded from output in the example. Should that be made more explicit since there is already a docstring for comments?",
        "createdAt" : "2019-05-16T07:18:40Z",
        "updatedAt" : "2019-05-16T07:18:40Z",
        "lastEditedBy" : "82f68155-8062-43d2-b457-007e9e7d97cf",
        "tags" : [
        ]
      },
      {
        "id" : "5186f61b-56d6-4add-ba75-0876e7938099",
        "parentId" : "2e1eaf29-904e-4408-b84e-ac4d79546855",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Right, but the original question was \"what do I do if I do _not_ want the # to be treated as a comment",
        "createdAt" : "2019-05-16T07:53:06Z",
        "updatedAt" : "2019-05-16T07:53:07Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "6879dcd5041a64327d0245263347a91f35e96a95",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1721,1725 @@\n    >>> f = StringIO('''\n    ... text,# of chars\n    ... hello world,11\n    ... numpy,5''')"
  },
  {
    "id" : "0e482e9f-b208-4049-a5cd-e514f7943bec",
    "prId" : 14070,
    "prUrl" : "https://github.com/numpy/numpy/pull/14070#pullrequestreview-275298522",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f240d892-00aa-40b5-946c-9d2431c30801",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "This example should be merged with the `Examples` section below, only one examples section is allowed. I also think the doctest will fail, since the `print(a, b)` will expect the exact output of `print(a, b)`. You should try it before pushing to github with `python3 runtests.py --refguide-check` ",
        "createdAt" : "2019-08-15T07:45:28Z",
        "updatedAt" : "2019-08-16T00:46:54Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "1db4e64cb9d64a4adbcdc2804c9aab403fc99b10",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +509,513 @@        \n    Any data saved to the file is appended to the end of the file. \n    \n    Examples\n    --------"
  },
  {
    "id" : "4cb63bbd-580a-406e-8107-cddad1a02a52",
    "prId" : 15335,
    "prUrl" : "https://github.com/numpy/numpy/pull/15335#pullrequestreview-345027395",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae43561d-58ea-43ba-a49c-cfdc01ef56ae",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Two years has not passed for the deprecation to expire, otherwise we could just remove these",
        "createdAt" : "2020-01-16T05:05:24Z",
        "updatedAt" : "2020-01-20T23:42:30Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "cfe80de6-345f-4d2d-81a6-05c462b5fa30",
        "parentId" : "ae43561d-58ea-43ba-a49c-cfdc01ef56ae",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Will have passed by the time 1.19 is released? I think we can just remove these. But maybe also easier in its own PR.",
        "createdAt" : "2020-01-16T19:58:29Z",
        "updatedAt" : "2020-01-20T23:42:30Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "5c99444c-5dff-4850-9be9-893969b6442f",
        "parentId" : "ae43561d-58ea-43ba-a49c-cfdc01ef56ae",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Let's leave this till its own PR.",
        "createdAt" : "2020-01-19T21:25:45Z",
        "updatedAt" : "2020-01-20T23:42:30Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a21ec857b22ff0140a7f71a12f2cc943f163404",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +278,282 @@            \"removal of dict.iterkeys. Use .keys() instead.\",\n            DeprecationWarning, stacklevel=2)\n        return self.keys()\n\n"
  },
  {
    "id" : "8da13fac-c0b1-4f33-b68b-cfd79b24723a",
    "prId" : 15335,
    "prUrl" : "https://github.com/numpy/numpy/pull/15335#pullrequestreview-343777969",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f58ae081-7071-4675-a223-0e18350f7b5f",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Is a cleanup here on your list of things still TODO?",
        "createdAt" : "2020-01-16T05:06:43Z",
        "updatedAt" : "2020-01-20T23:42:30Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "6a2ee15b-94ee-4e76-9627-e6118a5bf760",
        "parentId" : "f58ae081-7071-4675-a223-0e18350f7b5f",
        "authorId" : "90f9383b-5a2e-49ad-a731-13e6f7332b32",
        "body" : "The other one gets used three times and I thought shouldn't be cleaned up, but this one should be. Fixed now and added a note to cleanup some other parts of this file.",
        "createdAt" : "2020-01-16T09:34:47Z",
        "updatedAt" : "2020-01-20T23:42:30Z",
        "lastEditedBy" : "90f9383b-5a2e-49ad-a731-13e6f7332b32",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a21ec857b22ff0140a7f71a12f2cc943f163404",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +409,413 @@    pickle_kwargs = dict(encoding=encoding, fix_imports=fix_imports)\n\n    # TODO: Use contextlib.ExitStack once we drop Python 2\n    if hasattr(file, 'read'):\n        fid = file"
  },
  {
    "id" : "4cf0d88f-9ecb-4efd-83af-a840dce2668b",
    "prId" : 15421,
    "prUrl" : "https://github.com/numpy/numpy/pull/15421#pullrequestreview-348266538",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a757895-ab9f-441a-9107-9515773b8e71",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Ideally we could pass the result of `stack.pop_all` directly into `NpzFile`, but perhaps best left to a follow-up PR",
        "createdAt" : "2020-01-24T09:44:59Z",
        "updatedAt" : "2020-01-24T23:25:22Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c0ad376a-b6f7-4cb4-81ae-1a43c48efff4",
        "parentId" : "4a757895-ab9f-441a-9107-9515773b8e71",
        "authorId" : "90f9383b-5a2e-49ad-a731-13e6f7332b32",
        "body" : "ideally yes, but I, maybe someone else does, don't see how to do that without changing NpzFile's signature.",
        "createdAt" : "2020-01-24T18:44:03Z",
        "updatedAt" : "2020-01-24T23:25:22Z",
        "lastEditedBy" : "90f9383b-5a2e-49ad-a731-13e6f7332b32",
        "tags" : [
        ]
      },
      {
        "id" : "56379d9d-a179-40ff-bcb0-4e9e010788e1",
        "parentId" : "4a757895-ab9f-441a-9107-9515773b8e71",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Let's not worry about it here",
        "createdAt" : "2020-01-24T22:45:21Z",
        "updatedAt" : "2020-01-24T23:25:22Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa276641d0943d17432d4ba02f8a00fdd6572237",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +430,434 @@            stack.pop_all()\n            ret = NpzFile(fid, own_fid=own_fid, allow_pickle=allow_pickle,\n                          pickle_kwargs=pickle_kwargs)\n            return ret\n        elif magic == format.MAGIC_PREFIX:"
  }
]