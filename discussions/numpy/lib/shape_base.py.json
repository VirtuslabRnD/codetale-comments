[
  {
    "id" : "62c441f2-3045-48ac-9181-a2a9c55a4a1f",
    "prId" : 4454,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b84f1043-14ee-43b2-8b95-4a2335b3b39c",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "needs `.. versionadded:: 1.9.0` see e.g. np.percentile\n",
        "createdAt" : "2014-05-30T12:01:20Z",
        "updatedAt" : "2014-06-06T08:40:51Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f8aae032a218ed609e23068d5aec128b0d6fe8e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +32,36 @@        Additional arguments to `func1d`.\n    kwargs: any\n        Additional named arguments to `func1d`.\n\n        .. versionadded:: 1.9.0"
  },
  {
    "id" : "e3b4761c-2ae7-4625-8499-d61314f20e58",
    "prId" : 7918,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a298e9f-4168-49bd-a95c-c8f425afe510",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "So, for this branch, I would suggest to run\n\n```\nres.__array_wrap__(outarr)\n```\n\njust after creating `outarr`.\n",
        "createdAt" : "2016-08-08T16:03:30Z",
        "updatedAt" : "2016-10-11T02:29:51Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "242da4168588dc9431077f67c8f5309ac986e3fc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +111,115 @@    else:\n        res = asanyarray(res)\n        Ntot = product(outshape)\n        holdshape = outshape\n        outshape = list(arr.shape)"
  },
  {
    "id" : "55672938-dafb-415e-9888-a0936672a5c7",
    "prId" : 7918,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1be64ed3-e4a2-4700-a094-d2f67cd44fe8",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "Somewhat of an aside, but suppose one uses `func1d=np.mean`, then at least for astropy's `Quantity` class, what one gets is an `Quantity` array scalar as output. For any array scalar, `np.isscalar` returns `False`, so one ends up in this branch, but with an object that has `shape=()` and for which trying `len(a)` gives a `TypeError`:\n\n```\na = np.array(1)\na.shape\n# ()\nlen(a)\n# TypeError(...)\n```\n\nTo catch this, one has to make this branch aware of the possibility that `res.shape == ()`.\n",
        "createdAt" : "2016-08-08T16:07:46Z",
        "updatedAt" : "2016-10-11T02:29:51Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      }
    ],
    "commit" : "242da4168588dc9431077f67c8f5309ac986e3fc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +112,116 @@        res = asanyarray(res)\n        Ntot = product(outshape)\n        holdshape = outshape\n        outshape = list(arr.shape)\n        outshape[axis] = res.size"
  },
  {
    "id" : "0ae2169d-265e-4034-94ca-0efb63329104",
    "prId" : 8441,
    "prUrl" : "https://github.com/numpy/numpy/pull/8441#pullrequestreview-20726302",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b69f3ce-b235-4ab3-ad83-12aab859c115",
        "parentId" : null,
        "authorId" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "body" : "When I looked at this first, I thought you might consider using the (relatively new) `np.moveaxis`, i.e.,\r\n```\r\ninarr_view = moveaxis(inarr, axis, -1)\r\n```\r\nThis will not be any faster (as it just sets up a `transpose`, like here), but is perhaps clearer. As a side benefit, you can remove above the checks on the validity of `axis`, as `moveaxis` does those anyway.\r\n\r\nHowever, looking further down, it is not obvious `moveaxis` would work there, since `res.ndim` could in principle be >1-d (for which your code adds support, which I think is very nice!). But one could steal a bit from the `moveaxis` code and write here\r\n```\r\nin_permute = [n for n in range(nd) if n != axis] + [axis]\r\ninarr_view = transpose(arr, in_permute)\r\n```",
        "createdAt" : "2017-01-21T16:56:22Z",
        "updatedAt" : "2017-02-11T21:13:32Z",
        "lastEditedBy" : "1794b506-aeff-4fdc-9354-7fd193f97b33",
        "tags" : [
        ]
      },
      {
        "id" : "07d5041b-a310-4abe-b0d9-aebe1fb27416",
        "parentId" : "8b69f3ce-b235-4ab3-ad83-12aab859c115",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Oh, good point. `moveaxis` works with multiple axes too, so should work in both cases.",
        "createdAt" : "2017-01-21T19:26:42Z",
        "updatedAt" : "2017-02-11T21:13:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "c0216cff-dbd2-4a03-9149-62960850be06",
        "parentId" : "8b69f3ce-b235-4ab3-ad83-12aab859c115",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "For restoring axes, you could maybe write something like:\r\n```python\r\nmoveaxis(pre_arr, [i + nd - 1 for i in range(res.ndim)],\r\n         [i + axis for i in range(res.ndim)])\r\n```\r\n\r\nI think this is a slight improvement in clarity over building up the permutation axes for transpose directly.",
        "createdAt" : "2017-01-21T21:49:33Z",
        "updatedAt" : "2017-02-11T21:13:32Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "299951d2-af6d-48cd-b075-9331e471453f",
        "parentId" : "8b69f3ce-b235-4ab3-ad83-12aab859c115",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think `moveaxis` should learn a shorthand for dest such that this would work:\r\n```\r\nmoveaxis(pre_arr, [i + nd - 1 for i in range(res.ndim)], axis)\r\n```\r\n\r\nIe, if dest is a scalar, move all the source axes to that location, in the order they were passed in src\r\n",
        "createdAt" : "2017-01-22T03:00:30Z",
        "updatedAt" : "2017-02-11T21:13:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "44432874-670d-40b0-b989-6b09750fe0f2",
        "parentId" : "8b69f3ce-b235-4ab3-ad83-12aab859c115",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "@shoyer: Based on @mhvk's revised opinion, are you happy for this to remain as it is? Any further pain-points blocking this being merged?",
        "createdAt" : "2017-02-08T10:31:20Z",
        "updatedAt" : "2017-02-11T21:13:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4bce016f19dd8c8e2761818741d1c4024a34f21",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +103,107 @@\n    # arr, with the iteration axis at the end\n    in_dims = list(range(nd))\n    inarr_view = transpose(arr, in_dims[:axis] + in_dims[axis+1:] + [axis])\n"
  },
  {
    "id" : "9aa263ef-8b8f-4a44-a4e2-7b7a765c9983",
    "prId" : 8737,
    "prUrl" : "https://github.com/numpy/numpy/pull/8737#pullrequestreview-25241890",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b36f020b-f332-4283-83c5-9bde663dd209",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Maybe, \"removes all singleton dimensions\".",
        "createdAt" : "2017-03-04T15:52:05Z",
        "updatedAt" : "2017-03-06T12:55:07Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "212cbaf4-bd95-4aae-a736-b3a95b1692e7",
        "parentId" : "b36f020b-f332-4283-83c5-9bde663dd209",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "What I mean here is that `np.squeeze(arr, axis=a)` and `np.expand_dims(arr, axis=a)` are inverses. I guess this only applies to one of the two overloads",
        "createdAt" : "2017-03-04T16:44:58Z",
        "updatedAt" : "2017-03-06T12:55:07Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "cd371712-2998-4f0f-be5b-2bf0a160b90e",
        "parentId" : "b36f020b-f332-4283-83c5-9bde663dd209",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Might also mention `reshape` in both contexts as it allows adding and removing axis.",
        "createdAt" : "2017-03-04T17:21:42Z",
        "updatedAt" : "2017-03-06T12:55:07Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "43e7551f-35d0-4e0d-acff-6b31d8141af3",
        "parentId" : "b36f020b-f332-4283-83c5-9bde663dd209",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I personally like indexing a lot for this both of this too, unless it gets very clunky with counting `:`. EDIT: Though I guess I admit that for squeezing, indexing does not give the information that there really is only one element.",
        "createdAt" : "2017-03-05T12:51:52Z",
        "updatedAt" : "2017-03-06T12:55:07Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "1efb4d4d-c2df-41b6-9d6b-7a7c56ffd6de",
        "parentId" : "b36f020b-f332-4283-83c5-9bde663dd209",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "@charris: Added comments about reshape",
        "createdAt" : "2017-03-06T12:55:21Z",
        "updatedAt" : "2017-03-06T12:55:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2b27fb90809bdf464e66b9f3be8037e9a72c0f7",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +256,260 @@    See Also\n    --------\n    squeeze : The inverse operation, removing singleton dimensions\n    reshape : Insert, remove, and combine dimensions, and resize existing ones\n    doc.indexing, atleast_1d, atleast_2d, atleast_3d"
  },
  {
    "id" : "91254d6d-9f37-4217-830d-20a4b8bca3f6",
    "prId" : 9132,
    "prUrl" : "https://github.com/numpy/numpy/pull/9132#pullrequestreview-38819442",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a575f5e-6353-4179-9626-6acaf687ffb0",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'd be tempted to go with\r\n\r\n```\r\ntry:\r\n    axis = normalize_axis_index(axis, a.ndim + 1)\r\nexcept AxisError:\r\n    warnings.warn(...)\r\n```",
        "createdAt" : "2017-05-17T23:57:44Z",
        "updatedAt" : "2017-05-18T01:03:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "6268ae1d-5b20-46c7-b36a-59b4e5bb52e1",
        "parentId" : "3a575f5e-6353-4179-9626-6acaf687ffb0",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I think the current code is an easier way to preserve the current behavior.",
        "createdAt" : "2017-05-18T00:08:23Z",
        "updatedAt" : "2017-05-18T01:03:25Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "06db850b-4def-4864-8d06-f73b387b723a",
        "parentId" : "3a575f5e-6353-4179-9626-6acaf687ffb0",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "It's a balance between being sure not to introduce a regression now vs when we remove this deprecation.",
        "createdAt" : "2017-05-18T00:20:29Z",
        "updatedAt" : "2017-05-18T01:03:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "beac50cf98f450539dcdeee0273cfe5175d45d26",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +307,311 @@        axis = axis + a.ndim + 1\n    # and uncomment the following line.\n    # axis = normalize_axis_index(axis, a.ndim + 1)\n    return a.reshape(shape[:axis] + (1,) + shape[axis:])\n"
  },
  {
    "id" : "138f124f-cd7c-4ba0-9f72-4384cb712016",
    "prId" : 9946,
    "prUrl" : "https://github.com/numpy/numpy/pull/9946#pullrequestreview-78241007",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba347843-0110-4a8b-ac7e-3294e9e644c1",
        "parentId" : null,
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "I am tempted to skip the first longer version, and only leave this one, which I think is clearer.",
        "createdAt" : "2017-11-21T17:58:31Z",
        "updatedAt" : "2017-11-22T05:44:29Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      },
      {
        "id" : "74cbb534-48c7-4d45-b714-8b72f5ee5548",
        "parentId" : "ba347843-0110-4a8b-ac7e-3294e9e644c1",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "The longer version is more explicit, and is easier to compare to `take` IMO. I'd be happy to switch the order of these though.",
        "createdAt" : "2017-11-21T20:02:28Z",
        "updatedAt" : "2017-11-22T05:44:29Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "21ef1383cb4f6e27af188a6da5cdca93cff1bd07",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +44,48 @@        for ii in ndindex(Ni):\n            for kk in ndindex(Nk):\n                out[ii + s_[...,] + kk] = func1d(arr[ii + s_[:,] + kk])\n\n    Parameters"
  }
]