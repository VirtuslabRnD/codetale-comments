[
  {
    "id" : "6d81ce00-86bc-4fe3-b169-1871bd8e1582",
    "prId" : 3741,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1cef2c4-ba9d-4211-8771-fb32c7a3bca9",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Just `sort` should work. `Full sort` only makes sense in contrast to `partition`.\n",
        "createdAt" : "2013-09-14T13:43:54Z",
        "updatedAt" : "2013-09-14T14:01:25Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "f84c5438-2307-4b4e-b11a-f67f4f488900",
        "parentId" : "b1cef2c4-ba9d-4211-8771-fb32c7a3bca9",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "this is in the partition docstring?\n",
        "createdAt" : "2013-09-14T13:59:35Z",
        "updatedAt" : "2013-09-14T14:01:25Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "40391d93-7d1f-41c0-983f-ad8ce8223897",
        "parentId" : "b1cef2c4-ba9d-4211-8771-fb32c7a3bca9",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK.\n",
        "createdAt" : "2013-09-14T14:01:39Z",
        "updatedAt" : "2013-09-14T14:01:39Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4ef9b119f0954123de9acf5cf1fcb5358d99110",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +4257,4261 @@    numpy.partition : Return a parititioned copy of an array.\n    argpartition : Indirect partition.\n    sort : Full sort.\n\n    Notes"
  },
  {
    "id" : "eddb3ffc-77ab-47ac-aba4-79f364fdcf90",
    "prId" : 5101,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66c0b190-bec4-489f-ab96-0ddb3fead162",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This doesn't look like the right place. Hmm, I'll make a comment up above.\n",
        "createdAt" : "2014-09-25T15:05:12Z",
        "updatedAt" : "2014-09-26T01:34:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "0730abe10fb88e73f5acea63d69f3b771bdde223",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +4871,4875 @@    will result in an IndexError.\n\n    .. versionadded:: 1.10.0\n\n    `np.digitize` is  implemented in terms of `np.searchsorted`. This means"
  },
  {
    "id" : "d2b28de4-d4bd-45bd-9304-f90a21208571",
    "prId" : 5488,
    "prUrl" : "https://github.com/numpy/numpy/pull/5488#pullrequestreview-1977691",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "984641c5-5fee-465c-90c8-0e3eed1d2476",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "IIRC, the examples need changing, but I can do that later. I expect this function might be changing a bit down the line in any case.\n",
        "createdAt" : "2016-09-28T16:37:46Z",
        "updatedAt" : "2016-09-28T16:37:54Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c788f4e7f6f5af6b1c3cda98388768912349b46",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +2165,2169 @@\n    Notes\n    -----\n    .. versionadded:: 1.6.0\n"
  },
  {
    "id" : "66ce1154-a468-4d16-9f7b-f29d82d9ee42",
    "prId" : 8174,
    "prUrl" : "https://github.com/numpy/numpy/pull/8174#pullrequestreview-176077507",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89f3a72e-0dc1-4a83-a5d3-bf3c42fa92dd",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`__array_interface__` is defined as part of https://docs.scipy.org/doc/numpy-1.15.1/reference/arrays.interface.html, not PEP3118.",
        "createdAt" : "2018-11-18T06:12:46Z",
        "updatedAt" : "2018-11-18T06:12:46Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "cdb7359a-e3f1-405b-a222-d507bbb14e20",
        "parentId" : "89f3a72e-0dc1-4a83-a5d3-bf3c42fa92dd",
        "authorId" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "body" : "Hmm, OK, I may have misunderstood.",
        "createdAt" : "2018-11-18T06:42:04Z",
        "updatedAt" : "2018-11-18T06:42:04Z",
        "lastEditedBy" : "a4f03a99-2e43-482b-a9bc-5a9e359abb03",
        "tags" : [
        ]
      }
    ],
    "commit" : "4733b0047c04e15b69d359fa347378a6399fd10b",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +6175,6179 @@\n    The format is that required by the 'descr' key in the\n    PEP3118 `__array_interface__` attribute.\n\n    Warning: This attribute exists specifically for PEP3118 compliance, and"
  },
  {
    "id" : "e0f32607-1b97-4623-9ad2-b889a9a518f6",
    "prId" : 8685,
    "prUrl" : "https://github.com/numpy/numpy/pull/8685#pullrequestreview-23855735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "605b89be-4097-4f0e-a5aa-469c8266c83e",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "needs `.. versionadded:: 1.13.0`",
        "createdAt" : "2017-02-25T10:33:18Z",
        "updatedAt" : "2017-02-25T13:58:37Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "38ce8097749ad69494926036250ed5b2de66184c",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +6360,6364 @@    Number of dimensions of the sub-array if this data type describes a\n    sub-array, and ``0`` otherwise.\n\n    .. versionadded:: 1.13.0\n"
  },
  {
    "id" : "11822f82-543c-4496-be61-a10fb4941996",
    "prId" : 9026,
    "prUrl" : "https://github.com/numpy/numpy/pull/9026#pullrequestreview-36916295",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adc12258-9dd1-4f99-b4dd-b61be7b9c4d6",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Each of the  `*` need escaping like so `\\\\*` for sphinx.  If you make it a raw string you can use a single `\\`.",
        "createdAt" : "2017-05-08T17:54:02Z",
        "updatedAt" : "2017-05-08T18:47:04Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c7368269-af1a-40ba-9731-4d5b39f4e08f",
        "parentId" : "adc12258-9dd1-4f99-b4dd-b61be7b9c4d6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This file never actually reaches sphinx anyway, but I was under the impression that this worked correctly due to the transformation that the `Parameters` section undergoes",
        "createdAt" : "2017-05-08T18:18:50Z",
        "updatedAt" : "2017-05-08T18:47:04Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "db37340c-0d0f-4644-92b9-5d9edc90227d",
        "parentId" : "adc12258-9dd1-4f99-b4dd-b61be7b9c4d6",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I've had to fix other uses before as the docs didn't render correctly.",
        "createdAt" : "2017-05-08T18:45:59Z",
        "updatedAt" : "2017-05-08T18:47:04Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "42e4b04c-9ce4-4ac0-82e1-436e54388582",
        "parentId" : "adc12258-9dd1-4f99-b4dd-b61be7b9c4d6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Well, this doesn't even get rendered, so no danger of it getting rendered incorrectly!\r\n\r\nSince the only place this is ever seen is in the terminal, I'd argue it's better without backslashes.\r\n\r\nI'd also argue that to keep the terminal tidy, the fix should go in the numpy sphinx extension, not here",
        "createdAt" : "2017-05-08T18:51:26Z",
        "updatedAt" : "2017-05-08T18:51:26Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e1371894-665c-4553-9466-fd6c91fb55a8",
        "parentId" : "adc12258-9dd1-4f99-b4dd-b61be7b9c4d6",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I agree that having numpydoc escape the `*`'s when generating the sphinx input would be nice, but it doesn't at this time. If this never showed up in the documentation, that would not be a problem, but I assume you would like it to eventually show up.",
        "createdAt" : "2017-05-08T20:11:46Z",
        "updatedAt" : "2017-05-08T20:11:46Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "d0d30311-03c0-4c56-bc9f-a1ee22f8c9a8",
        "parentId" : "adc12258-9dd1-4f99-b4dd-b61be7b9c4d6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "> but I assume you would like it to eventually show up.\r\n\r\nNot really - AFAICT, the sole purposed of this page is to redirect the user to `np.info` or the ufunc docs. if `ufunc.__doc__` is made visible in the web docs, then IMO, it should be the contents of `ufuncs.rst`.\r\n\r\nThis docstring aside - I was pretty sure that `**kwargs` was parsed correctly in the other docstring modified by this changeset - does the issue only exist for single asterisks?",
        "createdAt" : "2017-05-09T00:08:43Z",
        "updatedAt" : "2017-05-09T00:08:44Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e3202649692815e973f0e72820d25d5e536910d",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +5443,5447 @@    Parameters\n    ----------\n    *x : array_like\n        Input arrays.\n    out : ndarray or tuple of ndarray, optional"
  },
  {
    "id" : "2a10a48d-20f3-4eb3-bcef-2225eecda237",
    "prId" : 9096,
    "prUrl" : "https://github.com/numpy/numpy/pull/9096#pullrequestreview-37461640",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6444488f-19f1-4e04-a6f0-d985bf8720d6",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "While we're here, can we update the signature to include the default value of the argument?",
        "createdAt" : "2017-05-11T00:31:10Z",
        "updatedAt" : "2017-05-11T09:48:45Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "28e7cd9f488e260b2a6d153bbcf8d83e8685fe69",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +3316,3320 @@    >>> map(hex, A)\n    ['0x1', '0x100', '0x2233']\n    >>> A.byteswap(inplace=True)\n    array([  256,     1, 13090], dtype=int16)\n    >>> map(hex, A)"
  },
  {
    "id" : "f96747d6-3038-41ce-8e3f-6a656fc2ba5f",
    "prId" : 9810,
    "prUrl" : "https://github.com/numpy/numpy/pull/9810#pullrequestreview-67146677",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bb360a8-2b7c-4b59-b400-d8b61c560ad6",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can we add an example here for reshaping a non-contiguous array? Something a little less contrived than:\r\n\r\n```\r\n>>> np.eye(3)[:2,:2].shape = (-1,)\r\nAttributeError: incompatible shape for a non-contiguous array\r\n```",
        "createdAt" : "2017-10-04T05:51:11Z",
        "updatedAt" : "2017-10-04T18:26:36Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "88823178-7a96-4d82-9d4d-9ff4cdf1a73e",
        "parentId" : "7bb360a8-2b7c-4b59-b400-d8b61c560ad6",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "With or without error?",
        "createdAt" : "2017-10-04T16:44:54Z",
        "updatedAt" : "2017-10-04T18:26:36Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "0cce244c-1777-4950-81de-2b06dfcfa9a6",
        "parentId" : "7bb360a8-2b7c-4b59-b400-d8b61c560ad6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "With error. We already have an example of a without-error case. Should have said _\"non-contiguous array with an incompatible shape\"_.",
        "createdAt" : "2017-10-04T16:59:13Z",
        "updatedAt" : "2017-10-04T18:26:36Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "41c1a93e-cc59-450d-a78b-7aba95ba774a",
        "parentId" : "7bb360a8-2b7c-4b59-b400-d8b61c560ad6",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "All non-contiguos examples are a bit contrived. Here's another\r\n```\r\n>>> np.zeros((4,2))[::2].shape = (-1,)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nAttributeError: incompatible shape for a non-contiguous array\r\n```\r\nChanging the error message is a bit out of scope, but the current one seems OK to me, it is the `(-1,)` that is the incompatible shape.",
        "createdAt" : "2017-10-04T17:39:58Z",
        "updatedAt" : "2017-10-04T18:26:36Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a5e6188d938091ca1c335ae5f736b563bdca245",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +2950,2954 @@    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    ValueError: total size of new array must be unchanged\n    >>> np.zeros((4,2))[::2].shape = (-1,)\n    Traceback (most recent call last):"
  },
  {
    "id" : "dd12ea90-14fa-4c4b-98fc-e651b9dd6139",
    "prId" : 9920,
    "prUrl" : "https://github.com/numpy/numpy/pull/9920#pullrequestreview-74271662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08d8e330-304e-469a-978a-361eb718e106",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "One more case needed - if either of `a` or `b` are 0-D/scalars, then elementwise multiplication is used (`np.multiply`)",
        "createdAt" : "2017-10-26T16:55:53Z",
        "updatedAt" : "2017-11-06T02:52:38Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "50989b1c-b101-43bf-98c4-2cabc3378af6",
        "parentId" : "08d8e330-304e-469a-978a-361eb718e106",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Is this behavior that we want to legitimitize by documenting?\r\n\r\nObviously, we won't change it at this point, but I would still encourage users to use `*` over dot in every circumstance.",
        "createdAt" : "2017-11-02T07:45:11Z",
        "updatedAt" : "2017-11-06T02:52:38Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "d555d54d-863b-4841-8e5d-1a5023d4fa75",
        "parentId" : "08d8e330-304e-469a-978a-361eb718e106",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "@shoyer: Isn't that true of this whole list? Isn't `*` or `@` always preferable over dot?",
        "createdAt" : "2017-11-02T07:47:56Z",
        "updatedAt" : "2017-11-06T02:52:38Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2bbce121-9d6c-4b63-ad82-3475c6cd3c20",
        "parentId" : "08d8e330-304e-469a-978a-361eb718e106",
        "authorId" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "body" : "Hmm. Can we explicitly recommend using matmul or times instead of dot in the docstring here then?",
        "createdAt" : "2017-11-05T03:10:18Z",
        "updatedAt" : "2017-11-06T02:52:38Z",
        "lastEditedBy" : "576cec6e-8071-43f8-bce9-351a2589f050",
        "tags" : [
        ]
      },
      {
        "id" : "14750bb5-976b-43c5-bc62-ce9cad61b2ff",
        "parentId" : "08d8e330-304e-469a-978a-361eb718e106",
        "authorId" : "9d357af5-9cc0-440b-a0c7-b01b30f6e12c",
        "body" : "@shoyer Please see my updates. Thanks!",
        "createdAt" : "2017-11-05T03:47:51Z",
        "updatedAt" : "2017-11-06T02:52:38Z",
        "lastEditedBy" : "9d357af5-9cc0-440b-a0c7-b01b30f6e12c",
        "tags" : [
        ]
      }
    ],
    "commit" : "de72522cdf5d350a4686cba6c39c3171bfd303ee",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1929,1933 @@    dot(a, b, out=None)\n\n    Dot product of two arrays. Specifically,\n\n    - If both `a` and `b` are 1-D arrays, it is inner product of vectors"
  },
  {
    "id" : "45bb97fc-ccbf-4d62-9945-775631f09bd5",
    "prId" : 9998,
    "prUrl" : "https://github.com/numpy/numpy/pull/9998#pullrequestreview-114183304",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc62134e-0268-4a98-b0ed-c44247a99f06",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Perhaps reference the `with` statement here.",
        "createdAt" : "2018-04-21T20:56:34Z",
        "updatedAt" : "2018-04-21T20:56:34Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "f2e7cf68-1e91-4e32-b4da-e84f5d365949",
        "parentId" : "fc62134e-0268-4a98-b0ed-c44247a99f06",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "fixed (in doc-nditer PR)",
        "createdAt" : "2018-04-21T21:09:48Z",
        "updatedAt" : "2018-04-21T21:09:48Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa9a74165479142e2c1671f871fe7c860146cd52",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +555,559 @@    close()\n\n    Resolve all writeback semantics in writeable operands.\n\n    \"\"\"))"
  },
  {
    "id" : "4097b652-5d77-4ef8-8b54-6593f7eefa08",
    "prId" : 10079,
    "prUrl" : "https://github.com/numpy/numpy/pull/10079#pullrequestreview-79268779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89901564-a761-456e-b5ff-3bbb49c27ae6",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Probably worth noting somewhere that `ufunc.__call__(..., signature='dd->d')` is a completely different meaning of signature to the `ufunc.signature` property",
        "createdAt" : "2017-11-27T17:52:51Z",
        "updatedAt" : "2017-11-27T18:39:39Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5c4808cb-fdc4-4cb4-afb2-d6c01b2d47c6",
        "parentId" : "89901564-a761-456e-b5ff-3bbb49c27ae6",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I added a note to the `signature` entry.",
        "createdAt" : "2017-11-27T18:40:19Z",
        "updatedAt" : "2017-11-27T18:40:19Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "05b6505f53cf326cfd57f7113a7361475715617c",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +5683,5687 @@    the testing suite; the examples below are taken from these.\n    For ufuncs that operate on scalars, the signature is `None`, which is\n    equivalent to '()' for every argument.\n\n    Examples"
  }
]