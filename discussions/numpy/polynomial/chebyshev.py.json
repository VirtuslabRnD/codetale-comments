[
  {
    "id" : "fd8b235f-0c9a-415b-823c-d003232c36fd",
    "prId" : 9899,
    "prUrl" : "https://github.com/numpy/numpy/pull/9899#pullrequestreview-71018252",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4899eac1-7482-432c-96b9-65d36e6524bd",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, looking at the code, I notice that it is not checked that `lbnd` is scalar for any of the polynomial types. Seems to have slipped by somehow ...\r\n\r\nThe suggested check should work.\r\n\r\n ",
        "createdAt" : "2017-10-21T21:51:34Z",
        "updatedAt" : "2017-10-21T21:51:34Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4d4593c2-b528-4745-bb0f-380b00088d60",
        "parentId" : "4899eac1-7482-432c-96b9-65d36e6524bd",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "If you want to make the fix, go ahead, otherwise I'll do it after this goes in.",
        "createdAt" : "2017-10-21T21:52:35Z",
        "updatedAt" : "2017-10-21T21:52:35Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c7cf566f-ffea-4641-97f9-ab47ff1407ad",
        "parentId" : "4899eac1-7482-432c-96b9-65d36e6524bd",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think we get away with it because there as `coeffs[i] = lbd` assignment at some point, that enforces the constraint. There's no such test for `scl` - indeed, you can pass an array and get a (probably meaningless) result.\r\n\r\nEither way, this documentation is still _more_ correct than it was, but perhaps an issue should be opened to deal with `scl` properly",
        "createdAt" : "2017-10-21T21:53:19Z",
        "updatedAt" : "2017-10-21T21:53:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2b3688d6-d7b9-4926-bbc1-fc60980e1896",
        "parentId" : "4899eac1-7482-432c-96b9-65d36e6524bd",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'll let you make the fix - I'm just trying to eliminate occurrences of `isscalar`",
        "createdAt" : "2017-10-21T21:54:40Z",
        "updatedAt" : "2017-10-21T21:54:40Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "106d7da5-17d6-4ce5-869b-b59b1edbc243",
        "parentId" : "4899eac1-7482-432c-96b9-65d36e6524bd",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK.",
        "createdAt" : "2017-10-21T22:00:47Z",
        "updatedAt" : "2017-10-21T22:00:47Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc56467ff89bd797e11bc56b49c89e3aa632ebfe",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1014,1018 @@    ValueError\n        If ``m < 1``, ``len(k) > m``, ``np.ndim(lbnd) != 0``, or\n         ``np.ndim(scl) != 0``.\n\n    See Also"
  },
  {
    "id" : "45b897a2-f27c-4493-b7f1-032f7ebb1ca1",
    "prId" : 13146,
    "prUrl" : "https://github.com/numpy/numpy/pull/13146#pullrequestreview-215369622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b09e501-28c2-44fc-91dd-9c26ee72af7f",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The `_zseries_mul` is just convolution and `chebmul` converts to zseries and calls the former. So after the conversion to zseries you could call with convolution as you do for power series. Or maybe add a `_zseries_pow` function.",
        "createdAt" : "2019-03-17T17:36:32Z",
        "updatedAt" : "2019-03-17T17:49:18Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "7745c719-a0ce-455d-ae50-885ca1cf4045",
        "parentId" : "0b09e501-28c2-44fc-91dd-9c26ee72af7f",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Right, but calling `chebmul` in power results in:\r\n```\r\nc = c_in\r\nz = ctoz(c)\r\nz = zmul(z, c_in)\r\nc = ztoc(z)\r\nz = ctoz(c)\r\nz = zmul(z, c_in)\r\nc = ztoc(z)\r\n```\r\ninstead of\r\n```\r\nc = c_in\r\nz = ctoz(c)\r\nz = zmul(z, c_in)\r\nz = zmul(z, c_in)\r\nc = ztoc(z)\r\n```",
        "createdAt" : "2019-03-17T17:45:17Z",
        "updatedAt" : "2019-03-17T17:45:28Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d8aaf33e-c270-4ab0-ad22-f43f6773b245",
        "parentId" : "0b09e501-28c2-44fc-91dd-9c26ee72af7f",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Don't call `chebmul` :) Convert to zseries and use `convolve`.",
        "createdAt" : "2019-03-17T17:52:00Z",
        "updatedAt" : "2019-03-17T17:52:00Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "3215a6ce-3ef6-4671-8e7f-7c727d4b48e7",
        "parentId" : "0b09e501-28c2-44fc-91dd-9c26ee72af7f",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "If I do that, `as_series` gets called twice, which is something I was trying to avoid",
        "createdAt" : "2019-03-17T18:00:43Z",
        "updatedAt" : "2019-03-17T18:00:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "58ba864e-1a28-4566-882a-d3f4e1f956a5",
        "parentId" : "0b09e501-28c2-44fc-91dd-9c26ee72af7f",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "```\r\n        zs = _cseries_to_zseries(c)\r\n        prd = pu._pow(np.convolve, zs, pow, maxpow)\r\n        return _zseries_to_cseries(prd)\r\n```",
        "createdAt" : "2019-03-17T18:12:00Z",
        "updatedAt" : "2019-03-17T18:12:00Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "20203355-2fd0-44e7-bde3-729d43122c9b",
        "parentId" : "0b09e501-28c2-44fc-91dd-9c26ee72af7f",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`_cseries_to_zseries(c)` will fail if `c` is not already an array. You need:\r\n```\r\n        [c] = pu.as_series([c])\r\n        zs = _cseries_to_zseries(c)\r\n        prd = pu._pow(np.convolve, zs, pow, maxpow)   # calls as_series a second time\r\n        return _zseries_to_cseries(prd)\r\n```\r\nIn the long run, the fix is to only call `as_series` in the convenience functions, but that sounds like work for a later CR.",
        "createdAt" : "2019-03-17T18:16:38Z",
        "updatedAt" : "2019-03-17T18:16:38Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "7cabf98b-8543-4ce5-98a8-55025525b1de",
        "parentId" : "0b09e501-28c2-44fc-91dd-9c26ee72af7f",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Hmm, `as_series` should not be too slow for a single array of valid type.  That function could maybe use a look to see if it could be sped up, the single argument version could follow a fast path. Be interesting to see what timing shows, but speed was not big consideration for the polynomial package, especially as it was designed so it would work with object coefficients (Decimal, Rational, etc.).",
        "createdAt" : "2019-03-17T18:34:42Z",
        "updatedAt" : "2019-03-17T18:34:43Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "bfcc7808-de6e-4a8e-a356-cadd37917bb8",
        "parentId" : "0b09e501-28c2-44fc-91dd-9c26ee72af7f",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`as_series` still makes a pointless copy. If efficiency isn't a concern, then maybe we should just merge #11816",
        "createdAt" : "2019-03-17T18:41:55Z",
        "updatedAt" : "2019-03-17T18:41:56Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3c85f3f0-9c84-4fa2-b937-5e4253a12408",
        "parentId" : "0b09e501-28c2-44fc-91dd-9c26ee72af7f",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I don't feel it matters much one way or the other, just arguing for the extra simplification. Probably the biggest speedup would be to improve the algorithm with divide and conquer, at least for the bigger powers. The whole `as_series` thing could probably use a rethink as it gets called in all the functions.",
        "createdAt" : "2019-03-17T18:56:40Z",
        "updatedAt" : "2019-03-17T18:56:40Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddbc31c2d71285f426dc16fab8ac2e00ffe6c1f8",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +829,833 @@    # note: this is more efficient than `pu._pow(chebmul, c1, c2)`, as it\n    # avoids converting between z and c series repeatedly\n\n    # c is a trimmed copy\n    [c] = pu.as_series([c])"
  }
]