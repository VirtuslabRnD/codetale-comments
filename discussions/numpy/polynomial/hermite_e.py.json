[
  {
    "id" : "c3e78ff1-361a-4c88-b2df-976aa1cbbf48",
    "prId" : 2947,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "384e944e-8444-4400-accb-cc83fd31c9df",
        "parentId" : null,
        "authorId" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "body" : "Is there really no better way to write this? It really seems like there ought to be (like, in the sense of, if it isn't possible then this seems like a flaw in numpy, given that mathematically you're doing exactly the same thing in both branches). I guess the obvious thing would be `np.sqrt((lhs * lhs.conj()).sum(1))`, or `np.sqrt(np.square(np.abs(lhs)).sum(1))`, but I suppose that both of those require making two temporaries instead of just one.\n",
        "createdAt" : "2013-01-24T04:03:57Z",
        "updatedAt" : "2013-01-24T16:23:29Z",
        "lastEditedBy" : "762e53b3-7c6a-4fbb-8098-a2c522dd50a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c1435c11d8bc0d1a3a380bc541a46f75749dc52",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1520,1524 @@        scl = np.sqrt((np.square(lhs.real) + np.square(lhs.imag)).sum(1))\n    else:\n        scl = np.sqrt(np.square(lhs).sum(1))\n    scl[scl == 0] = 1\n"
  }
]