[
  {
    "id" : "7962697b-5524-41af-823c-9dc5ab1bd67f",
    "prId" : 16476,
    "prUrl" : "https://github.com/numpy/numpy/pull/16476#pullrequestreview-438720940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d20da7ec-729b-4f61-a301-8604bae43d71",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "The first versionadded is about the `norm` kwarg itself. The second is about `\"forward\"` (inverse). So I think we should put this at the very end of the paragraph as:\r\n```\r\n.. versionadded:: 1.20\r\n    The \"forward\" option was added\r\n```\r\n(or similar, not quite sure how that renders).  I guess the order does not matter too much, depending on how it renders.",
        "createdAt" : "2020-06-27T14:46:24Z",
        "updatedAt" : "2020-07-12T17:45:20Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "20f83bc0-04a3-4753-84b7-c8dabe166635",
        "parentId" : "d20da7ec-729b-4f61-a301-8604bae43d71",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "The CI is failing here, because there needs to be a blank line after the tag.",
        "createdAt" : "2020-06-27T14:48:36Z",
        "updatedAt" : "2020-07-12T17:45:20Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "2fab57a8-ee13-463a-87b0-67a036fbf5bf",
        "parentId" : "d20da7ec-729b-4f61-a301-8604bae43d71",
        "authorId" : "0cb40e20-8dcb-4cb4-b8bf-baee366a82e1",
        "body" : "done",
        "createdAt" : "2020-06-27T17:11:09Z",
        "updatedAt" : "2020-07-12T17:45:20Z",
        "lastEditedBy" : "0cb40e20-8dcb-4cb4-b8bf-baee366a82e1",
        "tags" : [
        ]
      },
      {
        "id" : "654cf2ff-bced-4a69-8a38-4c49b0b0a145",
        "parentId" : "d20da7ec-729b-4f61-a301-8604bae43d71",
        "authorId" : "0cb40e20-8dcb-4cb4-b8bf-baee366a82e1",
        "body" : "the CI is still failing, but I don't know if it's still because of some issue here; I did add blank lines and the new `versionadded` as suggested, let me know if more changes are needed",
        "createdAt" : "2020-06-27T19:49:52Z",
        "updatedAt" : "2020-07-12T17:45:20Z",
        "lastEditedBy" : "0cb40e20-8dcb-4cb4-b8bf-baee366a82e1",
        "tags" : [
        ]
      },
      {
        "id" : "de797248-df80-48bc-913f-e72d974a65b4",
        "parentId" : "d20da7ec-729b-4f61-a301-8604bae43d71",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Ah, damn, no the test failure is unrelated. I merged another PR earlier today, which clashed with a deprecation introduced after that PRs tests ran. I will fix that later, sorry about that.  For documentation mainly CircleCI matters (It does not show up right now, not sure whats going on there).",
        "createdAt" : "2020-06-27T19:53:53Z",
        "updatedAt" : "2020-07-12T17:45:20Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "29149dac41596ed3d191769a1609f37595be33a8",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +148,152 @@        is scaled and with what normalization factor.\n\n        .. versionadded:: 1.20.0\n\n            The \"backward\", \"forward\" values were added."
  },
  {
    "id" : "a867712d-c721-4700-a3ea-9483de04aea0",
    "prId" : 16476,
    "prUrl" : "https://github.com/numpy/numpy/pull/16476#pullrequestreview-440995742",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8be05914-f577-4ea9-a44c-0094cd95416b",
        "parentId" : null,
        "authorId" : "0cb40e20-8dcb-4cb4-b8bf-baee366a82e1",
        "body" : "you might notice that the hermitian FFTs `hfft` and `ihfft` both use the `_go_back` function, and in a slightly different way; that's just because of the way these transforms are calculated using the corresponding real FFTs, so the scaling factors are also modified accordingly",
        "createdAt" : "2020-06-30T23:28:14Z",
        "updatedAt" : "2020-07-12T17:45:20Z",
        "lastEditedBy" : "0cb40e20-8dcb-4cb4-b8bf-baee366a82e1",
        "tags" : [
        ]
      },
      {
        "id" : "a6dab577-86cb-47ff-8d14-3f0d86ded96c",
        "parentId" : "8be05914-f577-4ea9-a44c-0094cd95416b",
        "authorId" : "3d662ecc-ff21-4f34-b3c6-b800d65daac9",
        "body" : "You could also exchange \"backward\" <-> \"forward\" and just pass the normalization mode down to `rfft`/`irfft`. Then the normalization is only applied once.",
        "createdAt" : "2020-06-30T23:57:44Z",
        "updatedAt" : "2020-07-12T17:45:20Z",
        "lastEditedBy" : "3d662ecc-ff21-4f34-b3c6-b800d65daac9",
        "tags" : [
        ]
      },
      {
        "id" : "7e81f5a8-dea5-4d16-b794-b0ac4fc4be26",
        "parentId" : "8be05914-f577-4ea9-a44c-0094cd95416b",
        "authorId" : "0cb40e20-8dcb-4cb4-b8bf-baee366a82e1",
        "body" : "yes that'd certainly work but I'd need a 4-case `if` clause: two cases to check if `norm` is `backward` or `forward` so that I can exchange between them as you point out, another case to check if it's `ortho` so that I call the real FFTs with `ortho` (since its \"opposite\" is itself), and a final `else` to raise a `ValueError` in case `norm` was none of the above. \r\n\r\nEssentially I would do the checks done at `_go_back()`, which would save me one scaling operation as you rightly say. The caveat is that the computation would completely bypass `_go_back()` so all checks must be done within the `hfft`/`ihfft` functions, which would become quite large. Additionally, I thought I'd stay close to the way the computations were done until now. In a nutshell, my thinking was to keep `hfft` & `ihfft` calling `_go_back()` which makes the necessary checks, so that the module is consistent as a whole (easier to maintain & read). \r\n\r\nDo you think that makes sense, or making the checks and saving one array scaling operation sounds like the best way to go here?\r\n\r\n**EDIT**: by saying that \"`_go_back()` would be bypassed\" I mean that it wouldn't be called with the `norm` value as received by the `hfft`/`ihfft` functions; `norm` would have to be checked first and then sent to `irfft`/`rfft` resp., which would of course then call `_go_back()`/`_go_forw()` with the appropriate `norm` value.",
        "createdAt" : "2020-07-01T04:04:23Z",
        "updatedAt" : "2020-07-12T17:45:20Z",
        "lastEditedBy" : "0cb40e20-8dcb-4cb4-b8bf-baee366a82e1",
        "tags" : [
        ]
      },
      {
        "id" : "c41532e1-e213-4bbc-9163-7161510dc9c4",
        "parentId" : "8be05914-f577-4ea9-a44c-0094cd95416b",
        "authorId" : "3d662ecc-ff21-4f34-b3c6-b800d65daac9",
        "body" : "I guess it's a matter of taste, but I don't think it's really that much code at all:\r\n```python\r\ndef _swap_direction(norm):\r\n  try:\r\n    return {\"backward\": \"forward\", None: \"forward\",\r\n            \"forward\": \"backward\", \"ortho\": \"ortho\"}[norm]\r\n  except KeyError:\r\n    raise ValueError(\r\n      f'Invalid norm value {norm}; should be \"backward\"'\r\n       '\"ortho\" or \"forward\".')\r\n```",
        "createdAt" : "2020-07-01T15:37:56Z",
        "updatedAt" : "2020-07-12T17:45:20Z",
        "lastEditedBy" : "3d662ecc-ff21-4f34-b3c6-b800d65daac9",
        "tags" : [
        ]
      },
      {
        "id" : "dd649bf3-4980-44af-8bac-c18d177d5498",
        "parentId" : "8be05914-f577-4ea9-a44c-0094cd95416b",
        "authorId" : "0cb40e20-8dcb-4cb4-b8bf-baee366a82e1",
        "body" : "thanks that's really good! :) \r\nI didn't think I could write that in such a compact way, I'll make sure to add it ",
        "createdAt" : "2020-07-01T15:51:02Z",
        "updatedAt" : "2020-07-12T17:45:20Z",
        "lastEditedBy" : "0cb40e20-8dcb-4cb4-b8bf-baee366a82e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "29149dac41596ed3d191769a1609f37595be33a8",
    "line" : 261,
    "diffHunk" : "@@ -1,1 +608,612 @@    new_norm = _swap_direction(norm)\n    output = irfft(conjugate(a), n, axis, norm=new_norm)\n    return output\n\n"
  },
  {
    "id" : "3137fe93-09e5-4e71-9ef8-ffd1ffd52be1",
    "prId" : 16476,
    "prUrl" : "https://github.com/numpy/numpy/pull/16476#pullrequestreview-440476353",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42eef4c0-ff77-4210-af71-8170baf64778",
        "parentId" : null,
        "authorId" : "0cb40e20-8dcb-4cb4-b8bf-baee366a82e1",
        "body" : "one question I have is whether the option `norm=None` should also be listed here or not; personally I think that it's better not to list it anymore, even thought it's accepted internally, because it would confuse someone reading through the docs; \r\n\r\na few lines later we list that `backward` works as an alias for `None`, so codes with `norm=None` will still work, but having both `None` and `backward` in the kwarg values list could confuse ppl and make it look like `None` accounts to no normalization, which is what we're actually trying to resolve by introducing `norm=backward`",
        "createdAt" : "2020-06-30T23:34:18Z",
        "updatedAt" : "2020-07-12T17:45:20Z",
        "lastEditedBy" : "0cb40e20-8dcb-4cb4-b8bf-baee366a82e1",
        "tags" : [
        ]
      },
      {
        "id" : "d5d2fb57-92b6-47d3-89b4-e1824c414cb6",
        "parentId" : "42eef4c0-ff77-4210-af71-8170baf64778",
        "authorId" : "3d662ecc-ff21-4f34-b3c6-b800d65daac9",
        "body" : "I think it's a fairly common pattern that `=None` means the default option. So, instead of mentioning `None` explicitly I would just say that `\"backward\"` is the default.",
        "createdAt" : "2020-06-30T23:59:41Z",
        "updatedAt" : "2020-07-12T17:45:20Z",
        "lastEditedBy" : "3d662ecc-ff21-4f34-b3c6-b800d65daac9",
        "tags" : [
        ]
      },
      {
        "id" : "9939f5cf-ff64-4991-ba6f-f931ab317bc9",
        "parentId" : "42eef4c0-ff77-4210-af71-8170baf64778",
        "authorId" : "0cb40e20-8dcb-4cb4-b8bf-baee366a82e1",
        "body" : "ok sounds good; you think I should also remove it from line 135 below, where it's explicitly said that `backward` is a `None` alias?",
        "createdAt" : "2020-07-01T00:11:15Z",
        "updatedAt" : "2020-07-12T17:45:20Z",
        "lastEditedBy" : "0cb40e20-8dcb-4cb4-b8bf-baee366a82e1",
        "tags" : [
        ]
      },
      {
        "id" : "33a881b5-7b04-4fd9-b1a9-894805867d5d",
        "parentId" : "42eef4c0-ff77-4210-af71-8170baf64778",
        "authorId" : "3d662ecc-ff21-4f34-b3c6-b800d65daac9",
        "body" : "Yes, I would say remove it.",
        "createdAt" : "2020-07-01T00:24:53Z",
        "updatedAt" : "2020-07-12T17:45:20Z",
        "lastEditedBy" : "3d662ecc-ff21-4f34-b3c6-b800d65daac9",
        "tags" : [
        ]
      },
      {
        "id" : "ddfbb2a4-6eeb-46b0-8972-f3b5f5e9c6a4",
        "parentId" : "42eef4c0-ff77-4210-af71-8170baf64778",
        "authorId" : "0cb40e20-8dcb-4cb4-b8bf-baee366a82e1",
        "body" : "ok will do",
        "createdAt" : "2020-07-01T00:45:09Z",
        "updatedAt" : "2020-07-12T17:45:20Z",
        "lastEditedBy" : "0cb40e20-8dcb-4cb4-b8bf-baee366a82e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "29149dac41596ed3d191769a1609f37595be33a8",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +141,145 @@        Axis over which to compute the FFT.  If not given, the last axis is\n        used.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        .. versionadded:: 1.10.0\n"
  },
  {
    "id" : "1eb04316-a47f-4674-85f8-f1414c7f64fe",
    "prId" : 16476,
    "prUrl" : "https://github.com/numpy/numpy/pull/16476#pullrequestreview-446895787",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38bcce97-938a-47ed-a98f-a2f8fc883864",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "It would be great to have 1-2 sentences here pointing out that the normalization signals where the normalization occurs in the fft-ifft pair.  And/or just making this slightly longer to provide some of the info from the general docs.",
        "createdAt" : "2020-07-09T13:18:03Z",
        "updatedAt" : "2020-07-12T17:45:20Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "ca62ae28-3c90-47e8-91a3-d6efbbd034c7",
        "parentId" : "38bcce97-938a-47ed-a98f-a2f8fc883864",
        "authorId" : "0cb40e20-8dcb-4cb4-b8bf-baee366a82e1",
        "body" : "ok",
        "createdAt" : "2020-07-12T17:16:18Z",
        "updatedAt" : "2020-07-12T17:45:20Z",
        "lastEditedBy" : "0cb40e20-8dcb-4cb4-b8bf-baee366a82e1",
        "tags" : [
        ]
      }
    ],
    "commit" : "29149dac41596ed3d191769a1609f37595be33a8",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +144,148 @@        .. versionadded:: 1.10.0\n\n        Normalization mode (see `numpy.fft`). Default is \"backward\".\n        Indicates which direction of the forward/backward pair of transforms\n        is scaled and with what normalization factor."
  }
]