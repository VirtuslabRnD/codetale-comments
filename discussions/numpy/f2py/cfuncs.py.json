[
  {
    "id" : "6d772f06-9478-4fed-a300-659594516e81",
    "prId" : 8948,
    "prUrl" : "https://github.com/numpy/numpy/pull/8948#pullrequestreview-34586925",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7582c9b8-7ca8-4c3e-b8d2-d2b396212254",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Be good to break this string into shorter lines. Breaking the index bracket to get a continuation line is just weird, but that is for another day.",
        "createdAt" : "2017-04-25T14:49:10Z",
        "updatedAt" : "2017-05-03T16:58:27Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7dbdbfaaa19c84ffcfa2987a05ca603483dfa54f",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1156,1160 @@    # NPY_CHAR compatibility, NPY_STRING with itemsize 1\n    cppmacros[\n        m] = '#define %s(v,dims) (PyArray_New(&PyArray_Type, 1, dims, NPY_STRING, NULL, v, 1, NPY_ARRAY_CARRAY, NULL))' % (m)\n\n"
  },
  {
    "id" : "a1278aac-2436-4587-9661-299edea57fff",
    "prId" : 9762,
    "prUrl" : "https://github.com/numpy/numpy/pull/9762#pullrequestreview-64748324",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27bb4fcc-ce21-4327-8232-e2c11713b245",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This macro was previously a compile error, as it forgot the last argument of `setitem`. Ditto for the complex version.",
        "createdAt" : "2017-09-23T21:20:32Z",
        "updatedAt" : "2017-09-23T22:10:01Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c24bd30f105331034ffcadfeb2e74c8630fd917",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +332,336 @@#define TRYPYARRAYTEMPLATECHAR case NPY_STRING: *(char *)(PyArray_DATA(arr))=*v; break;\n#define TRYPYARRAYTEMPLATELONG case NPY_LONG: *(long *)(PyArray_DATA(arr))=*v; break;\n#define TRYPYARRAYTEMPLATEOBJECT case NPY_OBJECT: PyArray_SETITEM(arr,PyArray_DATA(arr),pyobj_from_ ## ctype ## 1(*v)); break;\n\n#define TRYPYARRAYTEMPLATE(ctype,typecode) \\\\"
  },
  {
    "id" : "3254a7d3-6123-4d43-8e2a-370a4be587f0",
    "prId" : 14231,
    "prUrl" : "https://github.com/numpy/numpy/pull/14231#pullrequestreview-272671132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab8ba9d0-9279-48be-a1db-3aa666a145e8",
        "parentId" : null,
        "authorId" : "0c395d53-dd9c-4d75-b429-1143fac6ce0d",
        "body" : "NumPy version 13? Was that supposed to be 0.13? @mattip ",
        "createdAt" : "2019-08-08T15:52:27Z",
        "updatedAt" : "2019-08-08T15:52:27Z",
        "lastEditedBy" : "0c395d53-dd9c-4d75-b429-1143fac6ce0d",
        "tags" : [
        ]
      }
    ],
    "commit" : "3bfdd314c2f759568049cd6eed39439fc462b8e9",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +543,547 @@cppmacros['OLDPYNUM'] = \"\"\"\\\n#ifdef OLDPYNUM\n#error You need to install NumPy version 13 or higher. See https://scipy.org/install.html\n#endif\n\"\"\""
  },
  {
    "id" : "1efafed5-a1c4-43ba-aa38-e35b5b974307",
    "prId" : 15035,
    "prUrl" : "https://github.com/numpy/numpy/pull/15035#pullrequestreview-325931221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7653c7aa-5cba-4326-a4eb-f84f0d243b47",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "This was left over from a [comment](https://github.com/numpy/numpy/pull/14231#discussion_r312112493) on gh-14231",
        "createdAt" : "2019-12-03T07:12:56Z",
        "updatedAt" : "2019-12-03T10:27:14Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6ab00eb61d3db15522f373462d8984e792edeb8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +543,547 @@cppmacros['OLDPYNUM'] = \"\"\"\\\n#ifdef OLDPYNUM\n#error You need to install NumPy version 0.13 or higher. See https://scipy.org/install.html\n#endif\n\"\"\""
  },
  {
    "id" : "b4b43b37-f2b8-4d9d-ac62-a9dd59e42050",
    "prId" : 15750,
    "prUrl" : "https://github.com/numpy/numpy/pull/15750#pullrequestreview-377068173",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a83bab9-324d-4506-9acc-a64f1cd56b9a",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "For other reviewers: this is used again on https://github.com/numpy/numpy/pull/15750/files#diff-57556f4d2e5b2a68017772da1827d14cR1100, although I don't really understand what's going on there.",
        "createdAt" : "2020-03-13T13:14:53Z",
        "updatedAt" : "2020-03-18T20:53:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "2ff2497a-8828-43fe-bf0c-a92521b5694b",
        "parentId" : "7a83bab9-324d-4506-9acc-a64f1cd56b9a",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "that link seems to point here?",
        "createdAt" : "2020-03-13T13:31:35Z",
        "updatedAt" : "2020-03-18T20:53:50Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "ebe83689-3bc1-44bd-8bb6-b9a6e7d36527",
        "parentId" : "7a83bab9-324d-4506-9acc-a64f1cd56b9a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "GitHub bug. It points to line 1100, but only if it's already expanded",
        "createdAt" : "2020-03-13T14:31:45Z",
        "updatedAt" : "2020-03-18T20:53:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ffb7ad1d-c93b-46ad-8739-0c17bbbf2ff8",
        "parentId" : "7a83bab9-324d-4506-9acc-a64f1cd56b9a",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "I think the intention is to reduce the argument count by 1 for methods, but rather than check \"isinstance(method)\" the check is \"not a function\". Since CFunctions (builtin functions) are not functions, but also do not have `co_argcount` on CPython, it works for CPython but fails for PyPy.",
        "createdAt" : "2020-03-14T23:26:29Z",
        "updatedAt" : "2020-03-18T20:53:50Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "b40a7673-c607-4a98-bad4-a8b847545bb4",
        "parentId" : "7a83bab9-324d-4506-9acc-a64f1cd56b9a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "If you've managed to work out what this `create_cb_arglist` function even does, can you add a comment on line 1034?\r\n\r\nIn the long run, it seems much of this could be resolved by just calling `inspect.signature`, either directly or within `numpy.core._internal.py`.\r\n",
        "createdAt" : "2020-03-18T15:57:34Z",
        "updatedAt" : "2020-03-18T20:53:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d1482405-4ebe-43ed-ade5-4534749f2d21",
        "parentId" : "7a83bab9-324d-4506-9acc-a64f1cd56b9a",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Adding a comment to the best of my understanding. ",
        "createdAt" : "2020-03-18T16:32:37Z",
        "updatedAt" : "2020-03-18T20:53:50Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "1990cf12-d260-4589-809b-b457e323c746",
        "parentId" : "7a83bab9-324d-4506-9acc-a64f1cd56b9a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "If you have an understanding of what any of the arguments mean, that would be great in a comment too.",
        "createdAt" : "2020-03-18T16:40:58Z",
        "updatedAt" : "2020-03-18T20:53:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "66b7b7a6-3168-4c4a-aafa-60c1fa929abb",
        "parentId" : "7a83bab9-324d-4506-9acc-a64f1cd56b9a",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "I don't really understand the code. It seems to have grown organically as a set of patches over the years, each time fixing one thing with no comments.",
        "createdAt" : "2020-03-18T16:50:39Z",
        "updatedAt" : "2020-03-18T20:53:50Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "eab150b6-c290-4ef4-ba24-8d68229d33e3",
        "parentId" : "7a83bab9-324d-4506-9acc-a64f1cd56b9a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Fair enough, let's leave this comment as is.",
        "createdAt" : "2020-03-18T17:08:19Z",
        "updatedAt" : "2020-03-18T20:53:50Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef1a776d012be221a317358a1272208279a6060f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1063,1067 @@                if (PyCFunction_Check(fun)) {\n                    /* In case the function has a co_argcount (like on PyPy) */\n                    di = 0;\n                }\n                if (xa != NULL)"
  },
  {
    "id" : "a23b7dba-63fc-42b5-9978-18fa50afd221",
    "prId" : 17315,
    "prUrl" : "https://github.com/numpy/numpy/pull/17315#pullrequestreview-492204345",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7eb5c00-75ce-40e3-a400-e28c7fe7facb",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Is this legal? Shouldn't this be\r\n```suggestion\r\n        PyErr_SetString(Py_TYPE(err), errmess);\r\n```\r\nor similar?",
        "createdAt" : "2020-09-20T05:26:37Z",
        "updatedAt" : "2020-09-21T17:19:19Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "39e9c303-0bb8-4592-b875-11182305e4fa",
        "parentId" : "e7eb5c00-75ce-40e3-a400-e28c7fe7facb",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I wondered about that too, but it turns out that `#modulename#_error` is a variable pointing to an exception object. It is set in `numpy/f2py/rules.py`.\r\n```\r\n\\t#modulename#_error = PyErr_NewException (\\\"#modulename#.error\\\", NULL, NULL);\r\n```\r\nThat's another file that could use a cleanup. The intent of this PR was just to replace some compatibility macros, the reformatting was so that I could read it :) It could use more...\r\n\r\n",
        "createdAt" : "2020-09-20T11:47:47Z",
        "updatedAt" : "2020-09-21T17:19:19Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "46f0e032-d990-4f72-be03-b38923165556",
        "parentId" : "e7eb5c00-75ce-40e3-a400-e28c7fe7facb",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Oh, I guess my suggestion was wrong too. I meant for the case when `err != NULL`, and holds the currently active exception.",
        "createdAt" : "2020-09-20T12:03:15Z",
        "updatedAt" : "2020-09-21T17:19:19Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5316c7e1-1391-485e-8737-374fef874c2f",
        "parentId" : "e7eb5c00-75ce-40e3-a400-e28c7fe7facb",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "`PyErr_Occurred` returns the error type.\r\n\r\n>Test whether the error indicator is set. If set, return the exception type \r\n",
        "createdAt" : "2020-09-20T14:36:52Z",
        "updatedAt" : "2020-09-21T17:19:19Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ed382883-b9ad-4e4b-8fb3-3a877799d965",
        "parentId" : "e7eb5c00-75ce-40e3-a400-e28c7fe7facb",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I think what is wanted here is a chained error, but that is for another PR.",
        "createdAt" : "2020-09-20T16:04:38Z",
        "updatedAt" : "2020-09-21T17:19:19Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec565addec836ea0fe88f8766eec6168db3211f7",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +690,694 @@            err = #modulename#_error;\n        }\n        PyErr_SetString(err, errmess);\n    }\n    return 0;"
  },
  {
    "id" : "a75a155c-5c14-4cdc-970e-47b0356ffea8",
    "prId" : 18180,
    "prUrl" : "https://github.com/numpy/numpy/pull/18180#pullrequestreview-666920954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f60e5d7-99f0-442d-ac3a-a47bf6d0e49f",
        "parentId" : null,
        "authorId" : "65adf8ad-a5c3-4f7a-87dc-c50406b47f55",
        "body" : "This would fix the `#include <threads.h>` on Haiku too (ticket has been filed for this upstream: https://dev.haiku-os.org/ticket/16965 )\r\n```diff\r\n-       && (!defined(__GLIBC__) || __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 12))\r\n+       && (!defined(__GLIBC__) || __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 12)) \\\\\r\n+       && !defined(__HAIKU__)\r\n```",
        "createdAt" : "2021-05-24T16:03:45Z",
        "updatedAt" : "2021-05-24T16:03:45Z",
        "lastEditedBy" : "65adf8ad-a5c3-4f7a-87dc-c50406b47f55",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fe615958ac14edd93d3f3f09422300f694352d5",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +551,555 @@      && (__STDC_VERSION__ >= 201112L) \\\\\n      && !defined(__STDC_NO_THREADS__) \\\\\n      && (!defined(__GLIBC__) || __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 12))\n/* __STDC_NO_THREADS__ was first defined in a maintenance release of glibc 2.12,\n   see https://lists.gnu.org/archive/html/commit-hurd/2012-07/msg00180.html,"
  },
  {
    "id" : "56559f02-3d9b-4ead-8691-b009190b6d15",
    "prId" : 18759,
    "prUrl" : "https://github.com/numpy/numpy/pull/18759#pullrequestreview-634829991",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "618e7b47-a27f-4ca8-ad4b-3b40cda5a181",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```suggestion\r\n        /- TODO: change the type of `len` so that we can remove this -/\r\n        if (n > NPY_MAX_INT) {\r\n            PyError_SetString(PyExc_OverflowError, \"object too larger for a 32-bit int\");\r\n            goto capi_fail;\r\n        }\r\n        *len = n;\r\n```",
        "createdAt" : "2021-04-13T15:34:43Z",
        "updatedAt" : "2021-05-10T14:48:25Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "259ecd28-5c91-42ce-8ae3-2fb765b96431",
        "parentId" : "618e7b47-a27f-4ca8-ad4b-3b40cda5a181",
        "authorId" : "39f9fbb1-8b84-4716-a414-9f57db5fc2a5",
        "body" : "Applied with minor fixes.",
        "createdAt" : "2021-04-13T17:02:28Z",
        "updatedAt" : "2021-05-10T14:48:25Z",
        "lastEditedBy" : "39f9fbb1-8b84-4716-a414-9f57db5fc2a5",
        "tags" : [
        ]
      }
    ],
    "commit" : "09856eca90f63e73bd1b1feebe764539ea6e0db0",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +723,727 @@            goto capi_fail;\n        }\n        *len = n;\n    }\n    else if (*len < n) {"
  },
  {
    "id" : "2efad666-5603-42b6-9880-7288cef6e8e5",
    "prId" : 18759,
    "prUrl" : "https://github.com/numpy/numpy/pull/18759#pullrequestreview-668932087",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76177944-5874-46a2-a4f2-c26c0c22ef82",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "This check isn't enough; the array `np.arange(4, dtype=np.uint8)[::-1]` has a `data` pointer that points to the `3`, and writing four bytes from that point will result in three of them being written out of range.",
        "createdAt" : "2021-05-19T09:27:36Z",
        "updatedAt" : "2021-05-19T09:27:42Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "592a00de-13f4-46d5-b1f7-b7de5db32c86",
        "parentId" : "76177944-5874-46a2-a4f2-c26c0c22ef82",
        "authorId" : "39f9fbb1-8b84-4716-a414-9f57db5fc2a5",
        "body" : "`try_pyarr_from_string` is used only for `intent(inout)` arguments. Such arguments must be contiguous. Hence, at this point, we can rely on not having negative strides. Added the following line to the function doc:\r\n```\r\n  If obj is an ndarray, it is assumed to be contiguous.\r\n```",
        "createdAt" : "2021-05-23T19:44:59Z",
        "updatedAt" : "2021-05-23T20:03:52Z",
        "lastEditedBy" : "39f9fbb1-8b84-4716-a414-9f57db5fc2a5",
        "tags" : [
        ]
      },
      {
        "id" : "3139b085-00f1-40c7-a77d-4bc80d550d81",
        "parentId" : "76177944-5874-46a2-a4f2-c26c0c22ef82",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Can you add an `assert` that the array is contiguous just to be on the safe side?",
        "createdAt" : "2021-05-23T20:23:23Z",
        "updatedAt" : "2021-05-23T20:23:23Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "feac0019-a58d-43cc-96b0-0a5ab288106e",
        "parentId" : "76177944-5874-46a2-a4f2-c26c0c22ef82",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "(or perhaps throw an error, as we do if `(!ISCONTIGUOUS(arr))` in some other code visible in this PR",
        "createdAt" : "2021-05-23T20:25:43Z",
        "updatedAt" : "2021-05-23T20:25:43Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d05d70cc-d569-48b8-a544-a760c8428db7",
        "parentId" : "76177944-5874-46a2-a4f2-c26c0c22ef82",
        "authorId" : "39f9fbb1-8b84-4716-a414-9f57db5fc2a5",
        "body" : "Handling of non-contiguous array input to `intent(inout)` string argument is implemented in `string_from_pyobj`, see\r\nhttps://github.com/numpy/numpy/blob/3dcd9248d1f77cd2b0f97a5e9adb8e3cdcb3421f/numpy/f2py/cfuncs.py#L654-L660\r\n\r\nThe usage of all relevant functions can be seen here:\r\nhttps://github.com/numpy/numpy/blob/3dcd9248d1f77cd2b0f97a5e9adb8e3cdcb3421f/numpy/f2py/rules.py#L949-L971\r\n\r\nHence there is no need to duplicate checking invalid user inputs in `try_pyarr_from_string`. Moreover, `try_pyarr_from_string` is not an user-facing function.",
        "createdAt" : "2021-05-23T20:54:33Z",
        "updatedAt" : "2021-05-23T20:54:33Z",
        "lastEditedBy" : "39f9fbb1-8b84-4716-a414-9f57db5fc2a5",
        "tags" : [
        ]
      },
      {
        "id" : "c3be4081-9417-4cf0-b305-24631f9a8713",
        "parentId" : "76177944-5874-46a2-a4f2-c26c0c22ef82",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "That's a convincing argument for not bothering to check and throw an exception, but I think it's still worth adding a `assert(ISCONTIGUOUS(arr))` to ensure that no one changes the contract of that function by accident in future.",
        "createdAt" : "2021-05-26T11:26:11Z",
        "updatedAt" : "2021-05-26T11:26:11Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a0c1e0dc-241f-4316-b400-26772b30a860",
        "parentId" : "76177944-5874-46a2-a4f2-c26c0c22ef82",
        "authorId" : "39f9fbb1-8b84-4716-a414-9f57db5fc2a5",
        "body" : "Added the assert statement.",
        "createdAt" : "2021-05-26T12:05:09Z",
        "updatedAt" : "2021-05-26T12:05:09Z",
        "lastEditedBy" : "39f9fbb1-8b84-4716-a414-9f57db5fc2a5",
        "tags" : [
        ]
      }
    ],
    "commit" : "09856eca90f63e73bd1b1feebe764539ea6e0db0",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +648,652 @@        if (n > PyArray_NBYTES(arr)) {\n            n = PyArray_NBYTES(arr);\n        }\n        STRINGCOPYN(buf, str, n);\n        return 1;"
  },
  {
    "id" : "0c12a845-00ae-4386-b85b-7c171c1e5a6e",
    "prId" : 18759,
    "prUrl" : "https://github.com/numpy/numpy/pull/18759#pullrequestreview-668978061",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7991aba9-d42d-41f1-8ced-de05d9e6eb50",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "While you're here, we could clean this up using Python 3 CAPI features to\r\n```\r\n   PyErr_SetFormat(#modulename#_error, \\\"try_pyarr_from_string failed: %R\\\", obj);\r\n```\r\nbut maybe cleaning up all the `PRINTPYOBJERR` calls is best left to another PR",
        "createdAt" : "2021-05-26T12:34:41Z",
        "updatedAt" : "2021-05-26T12:36:54Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "d413ab36-b98d-47e2-bca7-af288e8933f2",
        "parentId" : "7991aba9-d42d-41f1-8ced-de05d9e6eb50",
        "authorId" : "39f9fbb1-8b84-4716-a414-9f57db5fc2a5",
        "body" : "Resolving via https://github.com/numpy/numpy/issues/19106",
        "createdAt" : "2021-05-26T12:52:32Z",
        "updatedAt" : "2021-05-26T12:52:33Z",
        "lastEditedBy" : "39f9fbb1-8b84-4716-a414-9f57db5fc2a5",
        "tags" : [
        ]
      }
    ],
    "commit" : "09856eca90f63e73bd1b1feebe764539ea6e0db0",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +654,658 @@capi_fail:\n    PRINTPYOBJERR(obj);\n    PyErr_SetString(#modulename#_error, \\\"try_pyarr_from_string failed\\\");\n    return 0;\n}"
  }
]