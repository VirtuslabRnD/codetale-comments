[
  {
    "id" : "877e9394-2efd-464f-98a3-6bfc00412cef",
    "prId" : 7134,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4996821e-02ca-4d96-a11a-e3e58cdfc472",
        "parentId" : null,
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "This one shouldn't be changed I think - `callfortran` is used a lot in the rest of this file.\n",
        "createdAt" : "2016-01-28T13:37:52Z",
        "updatedAt" : "2016-01-28T13:37:52Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "73a2fd11a74eedb97201fc8d54ea193e810ea9d3",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +16,20 @@    if (successful) {\n\n      call_fortran\n      if (successful) {\n"
  },
  {
    "id" : "7546462e-f705-440d-a48e-79e3dbe90ba8",
    "prId" : 12633,
    "prUrl" : "https://github.com/numpy/numpy/pull/12633#pullrequestreview-188499768",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e564af5-30ff-4d84-9897-4b9d2760502c",
        "parentId" : null,
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Hmm, this is the only thing that I am not quite sure of on first sight. I guess have to run it through a debugger/valgrind with python 3.5, but do not have a 3.5 on my arch laptop available right now.",
        "createdAt" : "2018-12-31T14:05:10Z",
        "updatedAt" : "2019-09-22T16:07:12Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "4e16ef9a-6141-42d5-b920-c253af676825",
        "parentId" : "6e564af5-30ff-4d84-9897-4b9d2760502c",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Does not really smell wrong though, so really need to run through a debugger on py3.5...",
        "createdAt" : "2018-12-31T14:06:48Z",
        "updatedAt" : "2019-09-22T16:07:12Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "c091779f63521e13d9f7af4ff113dde8cc5f6a7f",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +811,815 @@        if (capi_tmp) {\n          #varname#_xa_capi = (PyTupleObject *)PySequence_Tuple(capi_tmp);\n          Py_DECREF(capi_tmp);\n        }\n        else {"
  },
  {
    "id" : "f4fdb42f-ad29-48ea-98ff-3f4448af35d2",
    "prId" : 12633,
    "prUrl" : "https://github.com/numpy/numpy/pull/12633#pullrequestreview-272408543",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "060a50cf-a2cb-4779-98d7-ea23c91588a8",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "This is the source of the double free on Python3.5. When I remove it I still get a segfault, but not a `double free` and abort",
        "createdAt" : "2018-12-31T16:16:42Z",
        "updatedAt" : "2019-09-22T16:07:12Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "10854e0d-7589-4054-829a-d4a9afb7a019",
        "parentId" : "060a50cf-a2cb-4779-98d7-ea23c91588a8",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Seems strange that this should be so bad, it seems obviously right, no? Don't really have time to look into it though.",
        "createdAt" : "2018-12-31T16:35:42Z",
        "updatedAt" : "2019-09-22T16:07:12Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "e88c3fd4-02d0-4475-8361-68118181763d",
        "parentId" : "060a50cf-a2cb-4779-98d7-ea23c91588a8",
        "authorId" : "71cfe442-b489-4b2e-8349-5d87e42c3ad9",
        "body" : "I have observed the double free with Python 3.5 as well, and the fix (counter-intuitively) is to use `PyObject_Del` instead of `PyMem_Free` in `fortran_dealloc` (see gh-14217).",
        "createdAt" : "2019-08-07T16:54:44Z",
        "updatedAt" : "2019-09-22T16:07:12Z",
        "lastEditedBy" : "71cfe442-b489-4b2e-8349-5d87e42c3ad9",
        "tags" : [
        ]
      },
      {
        "id" : "b45da1fc-3688-4267-a654-c75dbc8388a9",
        "parentId" : "060a50cf-a2cb-4779-98d7-ea23c91588a8",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Hmmm,` PyObject_Free` is the correct thing in any case I think. Although, I am a bit puzzle why it ends up crashing things so hard, but then I do not know how the python memory management works internally. I think I will rebase your `PyObject_Free` fix as a first commit into my PR?",
        "createdAt" : "2019-08-07T19:35:19Z",
        "updatedAt" : "2019-09-22T16:07:12Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "d9be6809-8925-45ea-b1c0-ca56b2f3bc13",
        "parentId" : "060a50cf-a2cb-4779-98d7-ea23c91588a8",
        "authorId" : "71cfe442-b489-4b2e-8349-5d87e42c3ad9",
        "body" : "Sgtm!",
        "createdAt" : "2019-08-08T08:15:36Z",
        "updatedAt" : "2019-09-22T16:07:12Z",
        "lastEditedBy" : "71cfe442-b489-4b2e-8349-5d87e42c3ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "c091779f63521e13d9f7af4ff113dde8cc5f6a7f",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +216,220 @@\\ts = PyString_FromString(\\\"$R\"\"\" + \"\"\"evision: $\\\");\n\\tPyDict_SetItemString(d, \\\"__version__\\\", s);\n\\tPy_DECREF(s);\n#if PY_VERSION_HEX >= 0x03000000\n\\ts = PyUnicode_FromString("
  }
]