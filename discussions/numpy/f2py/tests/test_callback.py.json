[
  {
    "id" : "c8288943-d388-45fb-9a5c-743a5a8085c4",
    "prId" : 2749,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46b38bc9-3635-4d86-bdb3-6fecf57c638b",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This would probably look better as a \"\"\"...\"\"\" string. Hmm, maybe you could define a dummy test function and use its docstring in the comparison, that would avoid the indentation problem and make any future modifications easier.\n",
        "createdAt" : "2012-11-17T18:26:29Z",
        "updatedAt" : "2012-11-17T18:52:36Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "a07fde8c-5439-46af-8950-eb64d9fdf43e",
        "parentId" : "46b38bc9-3635-4d86-bdb3-6fecf57c638b",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Using a docstring doesn't avoid the indentation problem, I'd need to call textwrap.dedent also in that case\n",
        "createdAt" : "2012-11-17T18:47:05Z",
        "updatedAt" : "2012-11-17T18:52:36Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "0c65cb32-bcc5-4317-b062-ebf9d65469ad",
        "parentId" : "46b38bc9-3635-4d86-bdb3-6fecf57c638b",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Looks like the dummy function trick doesn't help with the indents, they are still there. The help function must do some formatting.\n",
        "createdAt" : "2012-11-17T18:52:49Z",
        "updatedAt" : "2012-11-17T18:52:49Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b3e6fa5c8eb92eeab20bfbb6f4298d97396e103",
    "line" : null,
    "diffHunk" : "@@ -1,1 +69,73 @@        \"\"\"\n        assert_equal(self.module.t.__doc__, textwrap.dedent(expected).lstrip())\n\n    def check_function(self, name):\n        t = getattr(self.module, name)"
  },
  {
    "id" : "a5e74ab3-17d2-40c7-ac9a-b313698d6efb",
    "prId" : 10031,
    "prUrl" : "https://github.com/numpy/numpy/pull/10031#pullrequestreview-76997270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "feca2a98-ce68-44cd-be72-4835c9fcb472",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I'm curious - what happens if you use `assert` in here directly? Can f2py forward the exception?",
        "createdAt" : "2017-11-16T02:16:31Z",
        "updatedAt" : "2017-11-16T02:16:53Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5ee25264-2214-4a44-b570-a3c9e8e7f1a2",
        "parentId" : "feca2a98-ce68-44cd-be72-4835c9fcb472",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Don't know, I was tempted but figured to play safe ... <tries> Yes, that works.  The fortran subroutine doesn't catch the error, rather the call wrapper does a `longjmp` to an error return from the fortran subroutine C wrapper. ",
        "createdAt" : "2017-11-16T02:51:38Z",
        "updatedAt" : "2017-11-16T02:51:38Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "012ad9fac3015f52951c5a27c03b8e8bc49713a4",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +158,162 @@            if not np.all(cu == b''):\n                return 3\n            return 0\n\n        f = getattr(self.module, 'string_callback_array')"
  },
  {
    "id" : "cb625964-d7d2-40c7-a67f-9d8111019eb7",
    "prId" : 11894,
    "prUrl" : "https://github.com/numpy/numpy/pull/11894#pullrequestreview-153587011",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3dfd63ab-448a-4b60-9045-9c30fe79ae1a",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Here, and below, it would be clearer to use a list to start with rather than splitting a string.",
        "createdAt" : "2018-09-09T15:24:48Z",
        "updatedAt" : "2018-09-09T15:24:48Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "02a7a989-8b7e-4057-bfd1-c88770a18bfb",
        "parentId" : "3dfd63ab-448a-4b60-9045-9c30fe79ae1a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "In @QuLogic's defense, this `split` expression is inherited, so arguably out of scope for this patch",
        "createdAt" : "2018-09-09T17:13:15Z",
        "updatedAt" : "2018-09-09T17:13:15Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb7dca7c3c963ff14c4f58507d3672536c441921",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +63,67 @@\n    @pytest.mark.slow\n    @pytest.mark.parametrize('name', 't,t2'.split(','))\n    def test_all(self, name):\n        self.check_function(name)"
  }
]