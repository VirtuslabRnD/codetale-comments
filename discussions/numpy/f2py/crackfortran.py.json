[
  {
    "id" : "66913a28-fbaf-4342-b3bc-89aa36084354",
    "prId" : 4158,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de4f3313-df16-4029-98d8-da7908020ca3",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Does this also work if the identifiers are in a tuple? That would be preferable to the line continuations if so.\n",
        "createdAt" : "2014-01-03T00:18:59Z",
        "updatedAt" : "2014-01-03T00:18:59Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "bf9ff4fd-32a4-4d12-a55f-c67d504ad43f",
        "parentId" : "de4f3313-df16-4029-98d8-da7908020ca3",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "OK, that doesn't work :-(\n",
        "createdAt" : "2014-01-03T00:23:24Z",
        "updatedAt" : "2014-01-03T00:23:24Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "bbe29b1b-8910-4003-94cf-fc5e7effd81d",
        "parentId" : "de4f3313-df16-4029-98d8-da7908020ca3",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Multiple global statements is another option here.\n",
        "createdAt" : "2014-01-03T00:26:27Z",
        "updatedAt" : "2014-01-03T00:26:27Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "9dbeb2ef07c0afadbe368a7e73baa428b3760816",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +187,191 @@\ndef reset_global_f2py_vars():\n    global groupcounter, grouplist, neededmodule, expectbegin, \\\n        skipblocksuntil, usermodules, f90modulevars, gotnextfile, \\\n        filepositiontext, currentfilename, skipfunctions, skipfuncs, \\"
  },
  {
    "id" : "92b3b7d9-8a73-47cf-880f-2a0db4f10179",
    "prId" : 11725,
    "prUrl" : "https://github.com/numpy/numpy/pull/11725#pullrequestreview-146104608",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08625063-baa6-4165-b753-4b89ba4e2bb4",
        "parentId" : null,
        "authorId" : "5cca4c05-5ba8-4d36-b097-080312a417bd",
        "body" : "Also, not sure if this should be a strict check for the new ones instead of `startswith`.",
        "createdAt" : "2018-08-13T19:20:42Z",
        "updatedAt" : "2018-08-13T19:20:42Z",
        "lastEditedBy" : "5cca4c05-5ba8-4d36-b097-080312a417bd",
        "tags" : [
        ]
      },
      {
        "id" : "38bcf6b2-b731-4fd1-b530-0ca96c225124",
        "parentId" : "08625063-baa6-4165-b753-4b89ba4e2bb4",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Probably more compiler dependent, I'd guess. Let's put this in and fix it up if problems ensue.",
        "createdAt" : "2018-08-14T14:55:36Z",
        "updatedAt" : "2018-08-14T14:55:37Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0c126dfc7b19f7681380b413e4793e94a85b065",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2404,2408 @@        return 8\n    machine = platform.machine().lower()\n    if machine.startswith(('aarch64', 'power', 'ppc64', 's390x')):\n        if p <= 20:\n            return 16"
  },
  {
    "id" : "2b22a651-3731-4e2f-842e-a17aae11b0d4",
    "prId" : 12056,
    "prUrl" : "https://github.com/numpy/numpy/pull/12056#pullrequestreview-160102769",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eba1ad60-c24e-4258-ab1c-3aaa1c154340",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "The module documentation fot `crackfortran` also needs fixing.",
        "createdAt" : "2018-09-29T22:51:56Z",
        "updatedAt" : "2018-09-30T05:38:15Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "2528d5f6-952b-4102-b81f-8ee915941b9b",
        "parentId" : "eba1ad60-c24e-4258-ab1c-3aaa1c154340",
        "authorId" : "811a9dad-6228-4e84-9482-b847833bcd1d",
        "body" : "Updated.",
        "createdAt" : "2018-09-30T05:38:27Z",
        "updatedAt" : "2018-09-30T05:38:27Z",
        "lastEditedBy" : "811a9dad-6228-4e84-9482-b847833bcd1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "9da665c87ef0601be8434d1b215756712088778d",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +3342,3346 @@\"\"\", 0)\n\n    postlist = crackfortran(files)\n    if pyffilename:\n        outmess('Writing fortran code to file %s\\n' % repr(pyffilename), 0)"
  },
  {
    "id" : "0d2b4c1e-7402-4b1a-b020-acaf4d7a3d87",
    "prId" : 17654,
    "prUrl" : "https://github.com/numpy/numpy/pull/17654#pullrequestreview-519133861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37567c76-77a4-4849-88e6-6cc04317c9c3",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Bare `except` is an antipattern, as this means that f2py now not only swallows `Ctrl+C` but give different compilation results depending on whether it was pressed. This should be `except ValueError` or at least `except Exception`?\r\n\r\nWould you mind making a follow-up PR?",
        "createdAt" : "2020-10-28T11:29:45Z",
        "updatedAt" : "2020-10-28T14:04:03Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "7ba64186-4a0c-47e1-8478-2e8ab240fc2d",
        "parentId" : "37567c76-77a4-4849-88e6-6cc04317c9c3",
        "authorId" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "body" : "Sorry, that was my oversight. I can do a follow up if @ianthomas23 prefers.",
        "createdAt" : "2020-10-28T13:53:42Z",
        "updatedAt" : "2020-10-28T13:53:42Z",
        "lastEditedBy" : "3dfefa71-8cc3-4b12-b820-eddb864c3569",
        "tags" : [
        ]
      },
      {
        "id" : "c65726f0-f838-4903-abd6-7daaac0c96bf",
        "parentId" : "37567c76-77a4-4849-88e6-6cc04317c9c3",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "For reasons I don't understand, LGTM caught this, but decided to give a CI tick anyway.",
        "createdAt" : "2020-10-28T14:02:54Z",
        "updatedAt" : "2020-10-28T14:02:54Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "600c1698-3bb6-41df-af8a-24ca55ed0c1e",
        "parentId" : "37567c76-77a4-4849-88e6-6cc04317c9c3",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "@jhelie, I think we might have discussed this before - have we forgotten a config option, or is this working as intended?",
        "createdAt" : "2020-10-28T14:06:20Z",
        "updatedAt" : "2020-10-28T14:06:21Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "24f5034f-089f-4b79-ac9b-254f886632ee",
        "parentId" : "37567c76-77a4-4849-88e6-6cc04317c9c3",
        "authorId" : "30d7644f-5a62-4ab2-8401-28f43910e7ed",
        "body" : "@eric-wieser, @melissawm: My apologies, I will submit a follow-up PR to change `except` to `except ValueError`. I'll wait until gh-17662 is accepted to avoid having to rebase.",
        "createdAt" : "2020-10-28T22:08:23Z",
        "updatedAt" : "2020-10-28T22:08:23Z",
        "lastEditedBy" : "30d7644f-5a62-4ab2-8401-28f43910e7ed",
        "tags" : [
        ]
      },
      {
        "id" : "61eb628c-96da-4da3-aabc-fcbb5e098036",
        "parentId" : "37567c76-77a4-4849-88e6-6cc04317c9c3",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "You shouldn't need to rebase on that PR, since the lines aren't next to each other - github will sort out the merge automatically I'd expect",
        "createdAt" : "2020-10-28T22:16:06Z",
        "updatedAt" : "2020-10-28T22:16:06Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "3252e7a9-e0ef-4d03-a573-206239ec203b",
        "parentId" : "37567c76-77a4-4849-88e6-6cc04317c9c3",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Say, aren't both `try` / `except` clauses redundant here?\r\nThe original values of `a` and `b` are created by `myeval()`, which raises an exception if the return type is not a `float` or `int`:\r\n\r\nhttps://github.com/numpy/numpy/blob/ab22e0076608f4825bf9a3ca1b6a0a6a7a670d14/numpy/f2py/crackfortran.py#L2105-L2109",
        "createdAt" : "2020-10-28T22:31:28Z",
        "updatedAt" : "2020-10-28T22:31:28Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "4f28b5fa-39c2-4eb3-bcd7-f8d7047d66e9",
        "parentId" : "37567c76-77a4-4849-88e6-6cc04317c9c3",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Nice catch",
        "createdAt" : "2020-10-28T22:32:51Z",
        "updatedAt" : "2020-10-28T22:32:52Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      }
    ],
    "commit" : "2a7d75712cdbbe9969b385df748e0c024ea7a1b7",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +2165,2169 @@                        b = int(b)\n                    except:\n                        pass\n                    return a, b, x\n            except Exception:"
  },
  {
    "id" : "39ea511e-dca1-421a-8fbd-e0623f0c3fa9",
    "prId" : 18074,
    "prUrl" : "https://github.com/numpy/numpy/pull/18074#pullrequestreview-558897637",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9c0076e-a9d4-4c05-b03a-4b8a7fa7521a",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "I argue that moving `-` to be beginning of the set is marginally less readable, one more thing to remember :) But OK.",
        "createdAt" : "2020-12-27T00:44:26Z",
        "updatedAt" : "2020-12-27T00:44:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb7b26d4e18583d7b010425264b9a9a379554606",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +2992,2996 @@determineexprtype_re_2 = re.compile(r'\\A[+-]?\\d+(_(?P<name>\\w+)|)\\Z', re.I)\ndetermineexprtype_re_3 = re.compile(\n    r'\\A[+-]?[\\d.]+[-\\d+de.]*(_(?P<name>\\w+)|)\\Z', re.I)\ndetermineexprtype_re_4 = re.compile(r'\\A\\(.*\\)\\Z', re.I)\ndetermineexprtype_re_5 = re.compile(r'\\A(?P<name>\\w+)\\s*\\(.*?\\)\\s*\\Z', re.I)"
  }
]