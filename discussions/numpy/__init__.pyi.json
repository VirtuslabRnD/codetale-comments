[
  {
    "id" : "6bdb9bed-3085-4181-92cf-4bbdd6946a36",
    "prId" : 16515,
    "prUrl" : "https://github.com/numpy/numpy/pull/16515#pullrequestreview-425774002",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0322099b-faa3-4120-a271-da3d7efb78d4",
        "parentId" : null,
        "authorId" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "body" : "Big copy-paste from https://github.com/numpy/numpy-stubs/blob/master/numpy-stubs/__init__.pyi.",
        "createdAt" : "2020-06-06T22:52:28Z",
        "updatedAt" : "2020-06-08T05:44:47Z",
        "lastEditedBy" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e238e411a4875d470a40cd0c351056ca30882ed",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@import builtins\nimport sys\nimport datetime as dt"
  },
  {
    "id" : "47f64a7f-1f03-40c1-9547-9dbb1c127859",
    "prId" : 16556,
    "prUrl" : "https://github.com/numpy/numpy/pull/16556#pullrequestreview-428203099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "492b67ba-f861-4fb1-949a-5f3fe352dd99",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```suggestion\r\n    choices: Sequence[ArrayLike],\r\n```\r\nI think it's important to emphasize that this input is _not_ an array, as it means shapes like `(0, 3)` are not handled sensibly.",
        "createdAt" : "2020-06-10T15:37:41Z",
        "updatedAt" : "2020-06-10T15:37:42Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1b40bd04-c65e-4ab2-9881-51b765b2ff80",
        "parentId" : "492b67ba-f861-4fb1-949a-5f3fe352dd99",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Same for the other overload",
        "createdAt" : "2020-06-10T15:38:49Z",
        "updatedAt" : "2020-06-10T15:38:49Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e961041d-dc79-4b69-99e3-689cbd3a1c9a",
        "parentId" : "492b67ba-f861-4fb1-949a-5f3fe352dd99",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "The tricky part is that, without proper shape support, expressing this will be either very difficult and/or verbose. \r\nFor example even `Sequence[ArrayLike]` does not include the likes of `np.ndarray` or `pd.DataFrane`, both of which are (strictly speaking) not proper sequences.",
        "createdAt" : "2020-06-10T15:58:19Z",
        "updatedAt" : "2020-06-10T15:58:19Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f7f6a97ba65ef605793c241837f3b993c65866a",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +948,952 @@def choose(\n    a: _ArrayLikeIntOrBool,\n    choices: ArrayLike,\n    out: Optional[ndarray] = ...,\n    mode: _Mode = ...,"
  },
  {
    "id" : "4157bb61-cb60-4f00-b9b3-7f5ce99b9ef2",
    "prId" : 16583,
    "prUrl" : "https://github.com/numpy/numpy/pull/16583#pullrequestreview-429674743",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "800ef93f-3367-4967-a6a6-ecfb6b3a526f",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Is it possible to use positional-only argument syntax here instead, as\r\n\r\n```suggestion\r\n        self, value: Union[datetime64, str, dt.datetime] = ..., format: str = ..., /\r\n```\r\n\r\nI can't tell if this syntax is allowed in pyi files prior to python 3.8,",
        "createdAt" : "2020-06-12T11:37:40Z",
        "updatedAt" : "2020-06-12T13:40:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "901b90d5-a577-4395-bae4-c67ee32c93e5",
        "parentId" : "800ef93f-3367-4967-a6a6-ecfb6b3a526f",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "> I can't tell if this syntax is allowed in pyi files prior to python 3.8,\r\n\r\nUnfortunately it isn't; mypy and the likes will start raising all sorts of alarm bells with such syntaxes.",
        "createdAt" : "2020-06-12T11:43:10Z",
        "updatedAt" : "2020-06-12T13:40:13Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b039e15f78904062760a4594eea2fab8c4de53d",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +391,395 @@    @overload\n    def __init__(\n        self, __value: Union[datetime64, str, dt.datetime] = ..., __format: str = ...\n    ) -> None: ...\n    @overload"
  },
  {
    "id" : "8b9adbd1-1819-406a-a2ca-888d96ebd083",
    "prId" : 16647,
    "prUrl" : "https://github.com/numpy/numpy/pull/16647#pullrequestreview-434451009",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be1f2236-3e4a-4eba-bea3-0a8b866f0386",
        "parentId" : null,
        "authorId" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "body" : "Soon we will have ndarray generic over dtype...",
        "createdAt" : "2020-06-20T19:28:30Z",
        "updatedAt" : "2020-06-20T21:10:38Z",
        "lastEditedBy" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "tags" : [
        ]
      },
      {
        "id" : "59f6bd76-d64a-4060-bf6b-279e7699a049",
        "parentId" : "be1f2236-3e4a-4eba-bea3-0a8b866f0386",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Yeah, I feel this is gona be a *biiiiiig* help.",
        "createdAt" : "2020-06-20T20:10:36Z",
        "updatedAt" : "2020-06-20T21:10:38Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e59f5745bebc92817c87bd4b57bf49fb8581f34",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +906,910 @@    _Bool,\n    Sequence[_Bool],\n    ndarray\n]\n"
  },
  {
    "id" : "23a6598a-4b70-4c63-b0f8-565566b248f3",
    "prId" : 16729,
    "prUrl" : "https://github.com/numpy/numpy/pull/16729#pullrequestreview-450094948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cf21362-3185-4238-b8dc-66616bae18a4",
        "parentId" : null,
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "I am assuming we are allowing number subtypes for one but not the other why is that ?\r\nIn other words, why is there a difference in return types of the above two overloads ?",
        "createdAt" : "2020-07-16T01:23:27Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "429661c9-6095-4a4c-92cf-540078782538",
        "parentId" : "6cf21362-3185-4238-b8dc-66616bae18a4",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "The key difference is that the first one is a `TypeVar` while the latter is not.\r\n\r\nTo illustrate, in the first overload an arbitrary `number` subclass (denoted by `_Number`) \r\nis provided as input and a value of the same type is returned.\r\n\r\nIn the second overload we know that an instance of `np.int_` is returned, \r\nbut there is a catch: `np.int_` is a platform-dependent alias for one of the `number` subclasses, \r\nwhich is not something we've been able to easily express as of yet.\r\n\r\nhttps://github.com/numpy/numpy/blob/92665ab229a2426db33bcfaa65cd73493acbad95/numpy/__init__.pyi#L511-L517\r\n\r\nAs a workaround the latter case is now simply annotated as returning _a_ `number` instance and\r\nwhile correct, this is obviously not as specific as it could be.\r\n",
        "createdAt" : "2020-07-16T12:03:20Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "5a642d4c-4853-4af6-8361-d106214fdcb5",
        "parentId" : "6cf21362-3185-4238-b8dc-66616bae18a4",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "okay got it, if my understanding is correct, the functionality is exactly the same if we use number of _Number here (second overload), but it is something we want to change in the future ?",
        "createdAt" : "2020-07-16T17:28:17Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "80213a9a-7bd0-4edc-9745-aa0551faf1d7",
        "parentId" : "6cf21362-3185-4238-b8dc-66616bae18a4",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "> ..., but it is something we want to change in the future ?\r\n\r\n~Correct, once we've dealt with these platform-dependent `generic` subclasses.~",
        "createdAt" : "2020-07-16T18:00:06Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "bcacb75d-9b04-43eb-af7a-1b1862ff7e9a",
        "parentId" : "6cf21362-3185-4238-b8dc-66616bae18a4",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Oh hang on, I'm actually confusing the issues pertaining `int_` and `number` here, sorry.\r\n\r\nThe problem with returning`number` is more straightforward.\r\nAs `ArrayLike` is not yet `Generic` with respect to the data type we don't have a way yet to correlate the input and output types. \r\nIn the future we should be able to use expressions such as the one below (or at least something similar):\r\n```python\r\n>>> from typing import TypeVar\r\n>>> import numpy as np\r\n>>> from numpy.typing import ArrayLike\r\n\r\n>>> T = TypeVar('T', bound=np.number)\r\n\r\n>>> def func(a: ArrayLike[T]) -> T:\r\n...     pass\r\n\r\n```\r\n\r\nIf you're interested, see https://github.com/numpy/numpy/pull/16759 for more details.",
        "createdAt" : "2020-07-16T18:11:35Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2e27c26c00993660c87944a271e5e11846f0285",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +1260,1264 @@    initial: _NumberLike = ...,\n    where: _ArrayLikeBool = ...,\n) -> number: ...\n@overload\ndef prod("
  },
  {
    "id" : "0fb9a32b-972e-463b-bf11-37358cf7a522",
    "prId" : 16729,
    "prUrl" : "https://github.com/numpy/numpy/pull/16729#pullrequestreview-450052863",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4133299-721f-4802-8d1c-de0d717794eb",
        "parentId" : null,
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "should dtype also be optional since dtype=None is also valid ?",
        "createdAt" : "2020-07-16T01:30:27Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "aae28778-5a1b-4c21-952c-542d10ca4479",
        "parentId" : "c4133299-721f-4802-8d1c-de0d717794eb",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "As `None` is a valid argument for `np.dtype` it is already included in the union defining `DtypeLike`:\r\n\r\n``` python\r\nIn [1]: import numpy as np                                                                    \r\n\r\nIn [2]: np.dtype(None)                                                                        \r\nOut[2]: dtype('float64')\r\n```",
        "createdAt" : "2020-07-16T11:46:30Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "b78626f6-a9b5-4900-b33f-acc56dd16c69",
        "parentId" : "c4133299-721f-4802-8d1c-de0d717794eb",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "Yep thats true, not sure I can explain the below:\r\n```\r\nreveal_type(np.prod(d, dtype=None))\r\n```\r\nerrors out as\r\n\r\nerror: No overload variant of \"prod\" matches argument types \"ndarray\", \"None\". Maybe also worth adding it to the tests.\r\n",
        "createdAt" : "2020-07-16T16:29:57Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "5d63862e-0fc8-4cf4-b8fb-14fcb7a36542",
        "parentId" : "c4133299-721f-4802-8d1c-de0d717794eb",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "> error: No overload variant of \"prod\" matches argument types \"ndarray\", \"None\".\r\n\r\nOdd, are you sure you've got the correct branch checked out?\r\nI can't seem to reproduce the issue over here:\r\n``` python\r\nimport numpy as np      \r\n\r\na = np.array(1)\r\nb = np.prod(a, dtype=None)\r\n\r\nreveal_type(b)\r\n```\r\n\r\n``` shell\r\n>>> mypy ./test.py\r\ntest.py:6: note: Revealed type is 'numpy.number'\r\n```",
        "createdAt" : "2020-07-16T16:57:38Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "f1b78948-2a3c-4299-b884-9eae01e68a97",
        "parentId" : "c4133299-721f-4802-8d1c-de0d717794eb",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "oops, yes it was something to do with my env (had a modified test elsewhere). thanks for the clarification. ",
        "createdAt" : "2020-07-16T17:15:31Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2e27c26c00993660c87944a271e5e11846f0285",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1265,1269 @@    a: ArrayLike,\n    axis: Optional[_ShapeLike] = ...,\n    dtype: DtypeLike = ...,\n    out: Optional[ndarray] = ...,\n    keepdims: bool = ...,"
  },
  {
    "id" : "d9b6be1d-e887-4f33-b636-01d53f208ea6",
    "prId" : 16729,
    "prUrl" : "https://github.com/numpy/numpy/pull/16729#pullrequestreview-449445578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74849d94-3e92-434d-9d2a-b18ae32b909e",
        "parentId" : null,
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "same question as above and at other places ?",
        "createdAt" : "2020-07-16T01:31:07Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2e27c26c00993660c87944a271e5e11846f0285",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +1274,1278 @@    a: ArrayLike,\n    axis: Optional[int] = ...,\n    dtype: DtypeLike = ...,\n    out: Optional[ndarray] = ...,\n) -> ndarray: ..."
  },
  {
    "id" : "d430b438-bcf6-4e2b-bafc-dacbe8aa9944",
    "prId" : 16759,
    "prUrl" : "https://github.com/numpy/numpy/pull/16759#pullrequestreview-442715705",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78439144-3e3c-4c75-a77d-e79b24b097d8",
        "parentId" : null,
        "authorId" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "body" : "In reality this is done by the `_DTypeMeta` metaclass.",
        "createdAt" : "2020-07-05T23:36:17Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b81ab444c0e56011e96c8895a19e18906ab4e731",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +537,541 @@    # Overload for subclass of generic\n    @overload\n    def __new__(\n        cls,\n        dtype: Type[_DTypeScalar],"
  },
  {
    "id" : "1b747838-50b7-4c28-a05d-cdbdfaaf4cca",
    "prId" : 16759,
    "prUrl" : "https://github.com/numpy/numpy/pull/16759#pullrequestreview-502993748",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "195a853f-9d0c-4b88-9bf1-efeb9228eaaa",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "```suggestion\r\n    ) -> Union[dtype[int64], dtype[int32]]: ...\r\n```\r\nAlso an option. At least this narrows it down to the particular `signedinteger` subclasses.",
        "createdAt" : "2020-10-06T09:47:03Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "ec175b17-bda1-4f1d-ada0-c0063595527e",
        "parentId" : "195a853f-9d0c-4b88-9bf1-efeb9228eaaa",
        "authorId" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "body" : "This actually doesn’t work-I did it the way it is on purpose. `__new__` is special in that it _must_ return a subclass, which the union is not.",
        "createdAt" : "2020-10-06T13:55:00Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "tags" : [
        ]
      },
      {
        "id" : "c7f4f3df-acff-4fa1-9820-19b0204216a7",
        "parentId" : "195a853f-9d0c-4b88-9bf1-efeb9228eaaa",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Hm, that's a shame. Ah well, `dtype` it is.",
        "createdAt" : "2020-10-06T13:58:48Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "b81ab444c0e56011e96c8895a19e18906ab4e731",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +680,684 @@        align: bool = ...,\n        copy: bool = ...,\n    ) -> dtype: ...\n    @overload\n    def __new__("
  },
  {
    "id" : "7f99a521-9e72-4c3b-b8c6-c39773ce8a97",
    "prId" : 16759,
    "prUrl" : "https://github.com/numpy/numpy/pull/16759#pullrequestreview-503011079",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38dda23b-e163-4edd-9ee3-c84b0e2d05e7",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "```suggestion\r\n        dtype: Union[str, _SupportsDtype],\r\n```\r\nThere are many kind of literal string were we can't statically infer the dtype.\r\n\r\nMost notably among them are `\"S<x>\"`- and `\"U<x>\"`-based strings (with `<x>` being an integer) for `np.bytes_` and `np.str_`.",
        "createdAt" : "2020-10-06T09:49:38Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "d9a5e0f5-b404-4cd2-92e8-ebb6d21fb73f",
        "parentId" : "38dda23b-e163-4edd-9ee3-c84b0e2d05e7",
        "authorId" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "body" : "That should more likely be covered in `_SupportsDtype` than here.",
        "createdAt" : "2020-10-06T13:56:46Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "tags" : [
        ]
      },
      {
        "id" : "08f3e08b-7f8f-4b1e-923c-e5cf8cd2ab31",
        "parentId" : "38dda23b-e163-4edd-9ee3-c84b0e2d05e7",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Could you ellaborate? \r\n`_SupportsDtype` describes objects with `dtype` attribute so I don't see how this includes builtin strings such as `\"S<x>\"`.",
        "createdAt" : "2020-10-06T14:01:40Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "5db38bfb-8573-4d9b-a82b-8efa26f6f2ad",
        "parentId" : "38dda23b-e163-4edd-9ee3-c84b0e2d05e7",
        "authorId" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "body" : "Oops meant to say `_DtypeLike`, but I have of course removed that overload.\r\n\r\nSo yes, a `str` overload is needed, not sure that is should be a part of this overload though because we can make `_SupportsDtype` work better by making it generic over dtype.",
        "createdAt" : "2020-10-06T14:14:20Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b81ab444c0e56011e96c8895a19e18906ab4e731",
    "line" : 314,
    "diffHunk" : "@@ -1,1 +826,830 @@    def __new__(\n        cls,\n        dtype: _SupportsDtype,\n        align: bool = ...,\n        copy: bool = ...,"
  },
  {
    "id" : "47d65b7d-fd92-4c32-b468-159bbcd2840a",
    "prId" : 16759,
    "prUrl" : "https://github.com/numpy/numpy/pull/16759#pullrequestreview-504414020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbdb15d7-202c-4852-81b9-bf3838e12df8",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "```suggestion\r\n                \"str_\",\r\n                \"str0\",\r\n```",
        "createdAt" : "2020-10-07T10:01:17Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "111391cc-41ad-4a27-9a17-3e2edbfc56df",
        "parentId" : "bbdb15d7-202c-4852-81b9-bf3838e12df8",
        "authorId" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "body" : "Added.",
        "createdAt" : "2020-10-08T04:04:34Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b81ab444c0e56011e96c8895a19e18906ab4e731",
    "line" : 295,
    "diffHunk" : "@@ -1,1 +807,811 @@                # to is platform-dependent.\n                \"str\",\n                \"str_\",\n                \"str0\",\n            ],"
  },
  {
    "id" : "b9352c18-161a-4511-b81b-ba3d78d000eb",
    "prId" : 16759,
    "prUrl" : "https://github.com/numpy/numpy/pull/16759#pullrequestreview-504414056",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca9c4e83-fbcd-4d01-bed7-6a865e25d27a",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "```suggestion\r\n                \"bytes_\",\r\n                \"bytes0\",\r\n```",
        "createdAt" : "2020-10-07T10:01:43Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "c3a73ecb-d60c-417a-a2d4-8afbc3553276",
        "parentId" : "ca9c4e83-fbcd-4d01-bed7-6a865e25d27a",
        "authorId" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "body" : "Added.",
        "createdAt" : "2020-10-08T04:04:41Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b81ab444c0e56011e96c8895a19e18906ab4e731",
    "line" : 276,
    "diffHunk" : "@@ -1,1 +788,792 @@                \">S\",\n                \"bytes\",\n                \"bytes_\",\n                \"bytes0\",\n            ],"
  },
  {
    "id" : "904de373-3b39-4205-870d-ea6859dda78d",
    "prId" : 16935,
    "prUrl" : "https://github.com/numpy/numpy/pull/16935#pullrequestreview-461157590",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df97b57a-f273-4cae-ac11-fa1b9544aa83",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "```suggestion\r\n    *,\r\n    like: ArrayLike = ...,\r\n```",
        "createdAt" : "2020-08-04T20:28:02Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "df35266f-7a5b-4abf-b412-111045582c4e",
        "parentId" : "df97b57a-f273-4cae-ac11-fa1b9544aa83",
        "authorId" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "body" : "Thanks @BvB93 , I couldn't find whether the keyword-only marker is supported in `.pyi` files, so I assumed it wasn't, but now I see `reshape` and `resize` had it, my mistake, but it's fixed now. ",
        "createdAt" : "2020-08-04T20:41:29Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "tags" : [
        ]
      }
    ],
    "commit" : "458e8646107fff28c07b2b458961f1095e2e255c",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +532,536 @@    order: Optional[str] = ...,\n    *,\n    like: ArrayLike = ...,\n) -> ndarray: ...\ndef ones("
  },
  {
    "id" : "70a6d5e4-4a80-42f6-b48a-27131b26091c",
    "prId" : 16935,
    "prUrl" : "https://github.com/numpy/numpy/pull/16935#pullrequestreview-461148796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c423b53-bfe8-4986-99e1-5f4958cf7861",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "```suggestion\r\n    *,\r\n    like: ArrayLike = ...,\r\n```",
        "createdAt" : "2020-08-04T20:28:10Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "458e8646107fff28c07b2b458961f1095e2e255c",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +539,543 @@    order: Optional[str] = ...,\n    *,\n    like: ArrayLike = ...,\n) -> ndarray: ...\ndef empty("
  },
  {
    "id" : "2725d26f-dc0f-4bfe-9e7d-7071b64a36da",
    "prId" : 16935,
    "prUrl" : "https://github.com/numpy/numpy/pull/16935#pullrequestreview-461148796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "152bc497-a9b1-487a-9116-d43d0942fb87",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "```suggestion\r\n    *,\r\n    like: ArrayLike = ...,\r\n```",
        "createdAt" : "2020-08-04T20:28:18Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "458e8646107fff28c07b2b458961f1095e2e255c",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +546,550 @@    order: Optional[str] = ...,\n    *,\n    like: ArrayLike = ...,\n) -> ndarray: ...\ndef zeros_like("
  },
  {
    "id" : "765097d8-6bd9-4c23-987f-1bc76ea7de37",
    "prId" : 16935,
    "prUrl" : "https://github.com/numpy/numpy/pull/16935#pullrequestreview-463574662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d0ce552-2e58-43ea-9350-71bf733c56b6",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "```suggestion\r\n    *,\r\n    like: ArrayLike = ...,\r\n```",
        "createdAt" : "2020-08-04T20:28:27Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "8ae7648d-bc57-43c3-b33d-7d8634804a8f",
        "parentId" : "5d0ce552-2e58-43ea-9350-71bf733c56b6",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "The asterix is still missing here.\r\nAlso it seems that a trailing comma is missing from, among others, `order: str = ...` (hence the typing-related CI failures).",
        "createdAt" : "2020-08-04T22:15:01Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "f65aacae-9f6c-41f4-9094-479a13aac71a",
        "parentId" : "5d0ce552-2e58-43ea-9350-71bf733c56b6",
        "authorId" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "body" : "You're right, thanks for pointing it out. Should be fixed now (hopefully).",
        "createdAt" : "2020-08-04T22:41:14Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "tags" : [
        ]
      },
      {
        "id" : "2ef5be31-8b34-47d0-9bea-c01e4dbe3efb",
        "parentId" : "5d0ce552-2e58-43ea-9350-71bf733c56b6",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Was this resolved? Also the `order: str = ...` has no trailing comma? Or am I missing something?",
        "createdAt" : "2020-08-07T19:51:15Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "05364057-45ad-4da0-a240-bd7ed27e67cd",
        "parentId" : "5d0ce552-2e58-43ea-9350-71bf733c56b6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "The comma is there. This is resolved.",
        "createdAt" : "2020-08-07T19:52:45Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a9e07ac1-977b-430d-bafa-a1880342770f",
        "parentId" : "5d0ce552-2e58-43ea-9350-71bf733c56b6",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Strange, must have been looking at some outdated diff. Thanks.",
        "createdAt" : "2020-08-07T19:54:03Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "458e8646107fff28c07b2b458961f1095e2e255c",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +575,579 @@    order: str = ...,\n    *,\n    like: ArrayLike = ...,\n) -> ndarray: ...\ndef full_like("
  },
  {
    "id" : "b1446bd3-1ad8-4417-a56c-6a71ec79a6df",
    "prId" : 16935,
    "prUrl" : "https://github.com/numpy/numpy/pull/16935#pullrequestreview-461148796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dff03e75-509f-4bc3-9bba-d6d09fafc5c3",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "```suggestion\r\n    *,\r\n    like: ArrayLike = ...,\r\n```",
        "createdAt" : "2020-08-04T20:29:58Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "458e8646107fff28c07b2b458961f1095e2e255c",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +627,631 @@    shape: Tuple[int, int],\n    *,\n    like: ArrayLike = ...,\n    **kwargs,\n) -> Any: ..."
  },
  {
    "id" : "fb4829b7-c94c-44a5-b49f-0652fd049a55",
    "prId" : 17104,
    "prUrl" : "https://github.com/numpy/numpy/pull/17104#pullrequestreview-471519031",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28a77d0a-9654-4e4c-a03b-b62e6c7c19f9",
        "parentId" : null,
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "missing `distutils` and `f2py` here",
        "createdAt" : "2020-08-19T21:58:54Z",
        "updatedAt" : "2020-08-20T12:17:31Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "e781629b-759b-4925-a1c3-ee38dd183715",
        "parentId" : "28a77d0a-9654-4e4c-a03b-b62e6c7c19f9",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Done as of https://github.com/numpy/numpy/pull/17104/commits/1a3efc43575434509fb968cbe42701094d9a0dee.\r\n\r\nI had some issues identifying the `distutils` public namespace, so for now it's still annotated as a module-level `__getattr__()`.",
        "createdAt" : "2020-08-20T11:54:59Z",
        "updatedAt" : "2020-08-20T12:17:31Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c7c0f081711654095023a984978cd812ac94fb6",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +50,54 @@    compat,\n    core,\n    ctypeslib,\n    emath,\n    fft,"
  },
  {
    "id" : "dc9f22f0-f2c8-4347-8662-3869399609eb",
    "prId" : 17104,
    "prUrl" : "https://github.com/numpy/numpy/pull/17104#pullrequestreview-471518216",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e433168-e09b-4ebe-b416-3b4fc135abfc",
        "parentId" : null,
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "I'd prefer to leave `compat` and `core` out.",
        "createdAt" : "2020-08-19T21:59:22Z",
        "updatedAt" : "2020-08-20T12:17:31Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "d1ac5339-3ba2-4b48-9cfb-14599fd99618",
        "parentId" : "4e433168-e09b-4ebe-b416-3b4fc135abfc",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Done as of https://github.com/numpy/numpy/pull/17104/commits/6d33a659b493b43b393e2ce58cbb9e8e40e2f583.",
        "createdAt" : "2020-08-20T11:53:38Z",
        "updatedAt" : "2020-08-20T12:17:31Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c7c0f081711654095023a984978cd812ac94fb6",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +49,53 @@    char,\n    compat,\n    core,\n    ctypeslib,\n    emath,"
  }
]