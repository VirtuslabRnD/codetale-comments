[
  {
    "id" : "6bdb9bed-3085-4181-92cf-4bbdd6946a36",
    "prId" : 16515,
    "prUrl" : "https://github.com/numpy/numpy/pull/16515#pullrequestreview-425774002",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0322099b-faa3-4120-a271-da3d7efb78d4",
        "parentId" : null,
        "authorId" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "body" : "Big copy-paste from https://github.com/numpy/numpy-stubs/blob/master/numpy-stubs/__init__.pyi.",
        "createdAt" : "2020-06-06T22:52:28Z",
        "updatedAt" : "2020-06-08T05:44:47Z",
        "lastEditedBy" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e238e411a4875d470a40cd0c351056ca30882ed",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@import builtins\nimport sys\nimport datetime as dt"
  },
  {
    "id" : "47f64a7f-1f03-40c1-9547-9dbb1c127859",
    "prId" : 16556,
    "prUrl" : "https://github.com/numpy/numpy/pull/16556#pullrequestreview-428203099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "492b67ba-f861-4fb1-949a-5f3fe352dd99",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "```suggestion\r\n    choices: Sequence[ArrayLike],\r\n```\r\nI think it's important to emphasize that this input is _not_ an array, as it means shapes like `(0, 3)` are not handled sensibly.",
        "createdAt" : "2020-06-10T15:37:41Z",
        "updatedAt" : "2020-06-10T15:37:42Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "1b40bd04-c65e-4ab2-9881-51b765b2ff80",
        "parentId" : "492b67ba-f861-4fb1-949a-5f3fe352dd99",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Same for the other overload",
        "createdAt" : "2020-06-10T15:38:49Z",
        "updatedAt" : "2020-06-10T15:38:49Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "e961041d-dc79-4b69-99e3-689cbd3a1c9a",
        "parentId" : "492b67ba-f861-4fb1-949a-5f3fe352dd99",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "The tricky part is that, without proper shape support, expressing this will be either very difficult and/or verbose. \r\nFor example even `Sequence[ArrayLike]` does not include the likes of `np.ndarray` or `pd.DataFrane`, both of which are (strictly speaking) not proper sequences.",
        "createdAt" : "2020-06-10T15:58:19Z",
        "updatedAt" : "2020-06-10T15:58:19Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f7f6a97ba65ef605793c241837f3b993c65866a",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +948,952 @@def choose(\n    a: _ArrayLikeIntOrBool,\n    choices: ArrayLike,\n    out: Optional[ndarray] = ...,\n    mode: _Mode = ...,"
  },
  {
    "id" : "4157bb61-cb60-4f00-b9b3-7f5ce99b9ef2",
    "prId" : 16583,
    "prUrl" : "https://github.com/numpy/numpy/pull/16583#pullrequestreview-429674743",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "800ef93f-3367-4967-a6a6-ecfb6b3a526f",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Is it possible to use positional-only argument syntax here instead, as\r\n\r\n```suggestion\r\n        self, value: Union[datetime64, str, dt.datetime] = ..., format: str = ..., /\r\n```\r\n\r\nI can't tell if this syntax is allowed in pyi files prior to python 3.8,",
        "createdAt" : "2020-06-12T11:37:40Z",
        "updatedAt" : "2020-06-12T13:40:13Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "901b90d5-a577-4395-bae4-c67ee32c93e5",
        "parentId" : "800ef93f-3367-4967-a6a6-ecfb6b3a526f",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "> I can't tell if this syntax is allowed in pyi files prior to python 3.8,\r\n\r\nUnfortunately it isn't; mypy and the likes will start raising all sorts of alarm bells with such syntaxes.",
        "createdAt" : "2020-06-12T11:43:10Z",
        "updatedAt" : "2020-06-12T13:40:13Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b039e15f78904062760a4594eea2fab8c4de53d",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +391,395 @@    @overload\n    def __init__(\n        self, __value: Union[datetime64, str, dt.datetime] = ..., __format: str = ...\n    ) -> None: ...\n    @overload"
  },
  {
    "id" : "8b9adbd1-1819-406a-a2ca-888d96ebd083",
    "prId" : 16647,
    "prUrl" : "https://github.com/numpy/numpy/pull/16647#pullrequestreview-434451009",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "be1f2236-3e4a-4eba-bea3-0a8b866f0386",
        "parentId" : null,
        "authorId" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "body" : "Soon we will have ndarray generic over dtype...",
        "createdAt" : "2020-06-20T19:28:30Z",
        "updatedAt" : "2020-06-20T21:10:38Z",
        "lastEditedBy" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "tags" : [
        ]
      },
      {
        "id" : "59f6bd76-d64a-4060-bf6b-279e7699a049",
        "parentId" : "be1f2236-3e4a-4eba-bea3-0a8b866f0386",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Yeah, I feel this is gona be a *biiiiiig* help.",
        "createdAt" : "2020-06-20T20:10:36Z",
        "updatedAt" : "2020-06-20T21:10:38Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "9e59f5745bebc92817c87bd4b57bf49fb8581f34",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +906,910 @@    _Bool,\n    Sequence[_Bool],\n    ndarray\n]\n"
  },
  {
    "id" : "23a6598a-4b70-4c63-b0f8-565566b248f3",
    "prId" : 16729,
    "prUrl" : "https://github.com/numpy/numpy/pull/16729#pullrequestreview-450094948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cf21362-3185-4238-b8dc-66616bae18a4",
        "parentId" : null,
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "I am assuming we are allowing number subtypes for one but not the other why is that ?\r\nIn other words, why is there a difference in return types of the above two overloads ?",
        "createdAt" : "2020-07-16T01:23:27Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "429661c9-6095-4a4c-92cf-540078782538",
        "parentId" : "6cf21362-3185-4238-b8dc-66616bae18a4",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "The key difference is that the first one is a `TypeVar` while the latter is not.\r\n\r\nTo illustrate, in the first overload an arbitrary `number` subclass (denoted by `_Number`) \r\nis provided as input and a value of the same type is returned.\r\n\r\nIn the second overload we know that an instance of `np.int_` is returned, \r\nbut there is a catch: `np.int_` is a platform-dependent alias for one of the `number` subclasses, \r\nwhich is not something we've been able to easily express as of yet.\r\n\r\nhttps://github.com/numpy/numpy/blob/92665ab229a2426db33bcfaa65cd73493acbad95/numpy/__init__.pyi#L511-L517\r\n\r\nAs a workaround the latter case is now simply annotated as returning _a_ `number` instance and\r\nwhile correct, this is obviously not as specific as it could be.\r\n",
        "createdAt" : "2020-07-16T12:03:20Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "5a642d4c-4853-4af6-8361-d106214fdcb5",
        "parentId" : "6cf21362-3185-4238-b8dc-66616bae18a4",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "okay got it, if my understanding is correct, the functionality is exactly the same if we use number of _Number here (second overload), but it is something we want to change in the future ?",
        "createdAt" : "2020-07-16T17:28:17Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "80213a9a-7bd0-4edc-9745-aa0551faf1d7",
        "parentId" : "6cf21362-3185-4238-b8dc-66616bae18a4",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "> ..., but it is something we want to change in the future ?\r\n\r\n~Correct, once we've dealt with these platform-dependent `generic` subclasses.~",
        "createdAt" : "2020-07-16T18:00:06Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "bcacb75d-9b04-43eb-af7a-1b1862ff7e9a",
        "parentId" : "6cf21362-3185-4238-b8dc-66616bae18a4",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Oh hang on, I'm actually confusing the issues pertaining `int_` and `number` here, sorry.\r\n\r\nThe problem with returning`number` is more straightforward.\r\nAs `ArrayLike` is not yet `Generic` with respect to the data type we don't have a way yet to correlate the input and output types. \r\nIn the future we should be able to use expressions such as the one below (or at least something similar):\r\n```python\r\n>>> from typing import TypeVar\r\n>>> import numpy as np\r\n>>> from numpy.typing import ArrayLike\r\n\r\n>>> T = TypeVar('T', bound=np.number)\r\n\r\n>>> def func(a: ArrayLike[T]) -> T:\r\n...     pass\r\n\r\n```\r\n\r\nIf you're interested, see https://github.com/numpy/numpy/pull/16759 for more details.",
        "createdAt" : "2020-07-16T18:11:35Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2e27c26c00993660c87944a271e5e11846f0285",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +1260,1264 @@    initial: _NumberLike = ...,\n    where: _ArrayLikeBool = ...,\n) -> number: ...\n@overload\ndef prod("
  },
  {
    "id" : "0fb9a32b-972e-463b-bf11-37358cf7a522",
    "prId" : 16729,
    "prUrl" : "https://github.com/numpy/numpy/pull/16729#pullrequestreview-450052863",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4133299-721f-4802-8d1c-de0d717794eb",
        "parentId" : null,
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "should dtype also be optional since dtype=None is also valid ?",
        "createdAt" : "2020-07-16T01:30:27Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "aae28778-5a1b-4c21-952c-542d10ca4479",
        "parentId" : "c4133299-721f-4802-8d1c-de0d717794eb",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "As `None` is a valid argument for `np.dtype` it is already included in the union defining `DtypeLike`:\r\n\r\n``` python\r\nIn [1]: import numpy as np                                                                    \r\n\r\nIn [2]: np.dtype(None)                                                                        \r\nOut[2]: dtype('float64')\r\n```",
        "createdAt" : "2020-07-16T11:46:30Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "b78626f6-a9b5-4900-b33f-acc56dd16c69",
        "parentId" : "c4133299-721f-4802-8d1c-de0d717794eb",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "Yep thats true, not sure I can explain the below:\r\n```\r\nreveal_type(np.prod(d, dtype=None))\r\n```\r\nerrors out as\r\n\r\nerror: No overload variant of \"prod\" matches argument types \"ndarray\", \"None\". Maybe also worth adding it to the tests.\r\n",
        "createdAt" : "2020-07-16T16:29:57Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      },
      {
        "id" : "5d63862e-0fc8-4cf4-b8fb-14fcb7a36542",
        "parentId" : "c4133299-721f-4802-8d1c-de0d717794eb",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "> error: No overload variant of \"prod\" matches argument types \"ndarray\", \"None\".\r\n\r\nOdd, are you sure you've got the correct branch checked out?\r\nI can't seem to reproduce the issue over here:\r\n``` python\r\nimport numpy as np      \r\n\r\na = np.array(1)\r\nb = np.prod(a, dtype=None)\r\n\r\nreveal_type(b)\r\n```\r\n\r\n``` shell\r\n>>> mypy ./test.py\r\ntest.py:6: note: Revealed type is 'numpy.number'\r\n```",
        "createdAt" : "2020-07-16T16:57:38Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "f1b78948-2a3c-4299-b884-9eae01e68a97",
        "parentId" : "c4133299-721f-4802-8d1c-de0d717794eb",
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "oops, yes it was something to do with my env (had a modified test elsewhere). thanks for the clarification. ",
        "createdAt" : "2020-07-16T17:15:31Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2e27c26c00993660c87944a271e5e11846f0285",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1265,1269 @@    a: ArrayLike,\n    axis: Optional[_ShapeLike] = ...,\n    dtype: DtypeLike = ...,\n    out: Optional[ndarray] = ...,\n    keepdims: bool = ...,"
  },
  {
    "id" : "d9b6be1d-e887-4f33-b636-01d53f208ea6",
    "prId" : 16729,
    "prUrl" : "https://github.com/numpy/numpy/pull/16729#pullrequestreview-449445578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74849d94-3e92-434d-9d2a-b18ae32b909e",
        "parentId" : null,
        "authorId" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "body" : "same question as above and at other places ?",
        "createdAt" : "2020-07-16T01:31:07Z",
        "updatedAt" : "2020-08-06T10:43:21Z",
        "lastEditedBy" : "fe664d20-2239-4242-9bd1-2c7a4f010863",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2e27c26c00993660c87944a271e5e11846f0285",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +1274,1278 @@    a: ArrayLike,\n    axis: Optional[int] = ...,\n    dtype: DtypeLike = ...,\n    out: Optional[ndarray] = ...,\n) -> ndarray: ..."
  },
  {
    "id" : "d430b438-bcf6-4e2b-bafc-dacbe8aa9944",
    "prId" : 16759,
    "prUrl" : "https://github.com/numpy/numpy/pull/16759#pullrequestreview-442715705",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78439144-3e3c-4c75-a77d-e79b24b097d8",
        "parentId" : null,
        "authorId" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "body" : "In reality this is done by the `_DTypeMeta` metaclass.",
        "createdAt" : "2020-07-05T23:36:17Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b81ab444c0e56011e96c8895a19e18906ab4e731",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +537,541 @@    # Overload for subclass of generic\n    @overload\n    def __new__(\n        cls,\n        dtype: Type[_DTypeScalar],"
  },
  {
    "id" : "1b747838-50b7-4c28-a05d-cdbdfaaf4cca",
    "prId" : 16759,
    "prUrl" : "https://github.com/numpy/numpy/pull/16759#pullrequestreview-502993748",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "195a853f-9d0c-4b88-9bf1-efeb9228eaaa",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "```suggestion\r\n    ) -> Union[dtype[int64], dtype[int32]]: ...\r\n```\r\nAlso an option. At least this narrows it down to the particular `signedinteger` subclasses.",
        "createdAt" : "2020-10-06T09:47:03Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "ec175b17-bda1-4f1d-ada0-c0063595527e",
        "parentId" : "195a853f-9d0c-4b88-9bf1-efeb9228eaaa",
        "authorId" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "body" : "This actually doesn’t work-I did it the way it is on purpose. `__new__` is special in that it _must_ return a subclass, which the union is not.",
        "createdAt" : "2020-10-06T13:55:00Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "tags" : [
        ]
      },
      {
        "id" : "c7f4f3df-acff-4fa1-9820-19b0204216a7",
        "parentId" : "195a853f-9d0c-4b88-9bf1-efeb9228eaaa",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Hm, that's a shame. Ah well, `dtype` it is.",
        "createdAt" : "2020-10-06T13:58:48Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "b81ab444c0e56011e96c8895a19e18906ab4e731",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +680,684 @@        align: bool = ...,\n        copy: bool = ...,\n    ) -> dtype: ...\n    @overload\n    def __new__("
  },
  {
    "id" : "7f99a521-9e72-4c3b-b8c6-c39773ce8a97",
    "prId" : 16759,
    "prUrl" : "https://github.com/numpy/numpy/pull/16759#pullrequestreview-503011079",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38dda23b-e163-4edd-9ee3-c84b0e2d05e7",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "```suggestion\r\n        dtype: Union[str, _SupportsDtype],\r\n```\r\nThere are many kind of literal string were we can't statically infer the dtype.\r\n\r\nMost notably among them are `\"S<x>\"`- and `\"U<x>\"`-based strings (with `<x>` being an integer) for `np.bytes_` and `np.str_`.",
        "createdAt" : "2020-10-06T09:49:38Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "d9a5e0f5-b404-4cd2-92e8-ebb6d21fb73f",
        "parentId" : "38dda23b-e163-4edd-9ee3-c84b0e2d05e7",
        "authorId" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "body" : "That should more likely be covered in `_SupportsDtype` than here.",
        "createdAt" : "2020-10-06T13:56:46Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "tags" : [
        ]
      },
      {
        "id" : "08f3e08b-7f8f-4b1e-923c-e5cf8cd2ab31",
        "parentId" : "38dda23b-e163-4edd-9ee3-c84b0e2d05e7",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Could you ellaborate? \r\n`_SupportsDtype` describes objects with `dtype` attribute so I don't see how this includes builtin strings such as `\"S<x>\"`.",
        "createdAt" : "2020-10-06T14:01:40Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "5db38bfb-8573-4d9b-a82b-8efa26f6f2ad",
        "parentId" : "38dda23b-e163-4edd-9ee3-c84b0e2d05e7",
        "authorId" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "body" : "Oops meant to say `_DtypeLike`, but I have of course removed that overload.\r\n\r\nSo yes, a `str` overload is needed, not sure that is should be a part of this overload though because we can make `_SupportsDtype` work better by making it generic over dtype.",
        "createdAt" : "2020-10-06T14:14:20Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b81ab444c0e56011e96c8895a19e18906ab4e731",
    "line" : 314,
    "diffHunk" : "@@ -1,1 +826,830 @@    def __new__(\n        cls,\n        dtype: _SupportsDtype,\n        align: bool = ...,\n        copy: bool = ...,"
  },
  {
    "id" : "47d65b7d-fd92-4c32-b468-159bbcd2840a",
    "prId" : 16759,
    "prUrl" : "https://github.com/numpy/numpy/pull/16759#pullrequestreview-504414020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbdb15d7-202c-4852-81b9-bf3838e12df8",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "```suggestion\r\n                \"str_\",\r\n                \"str0\",\r\n```",
        "createdAt" : "2020-10-07T10:01:17Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "111391cc-41ad-4a27-9a17-3e2edbfc56df",
        "parentId" : "bbdb15d7-202c-4852-81b9-bf3838e12df8",
        "authorId" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "body" : "Added.",
        "createdAt" : "2020-10-08T04:04:34Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b81ab444c0e56011e96c8895a19e18906ab4e731",
    "line" : 295,
    "diffHunk" : "@@ -1,1 +807,811 @@                # to is platform-dependent.\n                \"str\",\n                \"str_\",\n                \"str0\",\n            ],"
  },
  {
    "id" : "b9352c18-161a-4511-b81b-ba3d78d000eb",
    "prId" : 16759,
    "prUrl" : "https://github.com/numpy/numpy/pull/16759#pullrequestreview-504414056",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca9c4e83-fbcd-4d01-bed7-6a865e25d27a",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "```suggestion\r\n                \"bytes_\",\r\n                \"bytes0\",\r\n```",
        "createdAt" : "2020-10-07T10:01:43Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "c3a73ecb-d60c-417a-a2d4-8afbc3553276",
        "parentId" : "ca9c4e83-fbcd-4d01-bed7-6a865e25d27a",
        "authorId" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "body" : "Added.",
        "createdAt" : "2020-10-08T04:04:41Z",
        "updatedAt" : "2020-10-11T21:31:46Z",
        "lastEditedBy" : "0354b9b7-8a89-4c8d-85d2-b0f4bcddce0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b81ab444c0e56011e96c8895a19e18906ab4e731",
    "line" : 276,
    "diffHunk" : "@@ -1,1 +788,792 @@                \">S\",\n                \"bytes\",\n                \"bytes_\",\n                \"bytes0\",\n            ],"
  },
  {
    "id" : "904de373-3b39-4205-870d-ea6859dda78d",
    "prId" : 16935,
    "prUrl" : "https://github.com/numpy/numpy/pull/16935#pullrequestreview-461157590",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df97b57a-f273-4cae-ac11-fa1b9544aa83",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "```suggestion\r\n    *,\r\n    like: ArrayLike = ...,\r\n```",
        "createdAt" : "2020-08-04T20:28:02Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "df35266f-7a5b-4abf-b412-111045582c4e",
        "parentId" : "df97b57a-f273-4cae-ac11-fa1b9544aa83",
        "authorId" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "body" : "Thanks @BvB93 , I couldn't find whether the keyword-only marker is supported in `.pyi` files, so I assumed it wasn't, but now I see `reshape` and `resize` had it, my mistake, but it's fixed now. ",
        "createdAt" : "2020-08-04T20:41:29Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "tags" : [
        ]
      }
    ],
    "commit" : "458e8646107fff28c07b2b458961f1095e2e255c",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +532,536 @@    order: Optional[str] = ...,\n    *,\n    like: ArrayLike = ...,\n) -> ndarray: ...\ndef ones("
  },
  {
    "id" : "70a6d5e4-4a80-42f6-b48a-27131b26091c",
    "prId" : 16935,
    "prUrl" : "https://github.com/numpy/numpy/pull/16935#pullrequestreview-461148796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c423b53-bfe8-4986-99e1-5f4958cf7861",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "```suggestion\r\n    *,\r\n    like: ArrayLike = ...,\r\n```",
        "createdAt" : "2020-08-04T20:28:10Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "458e8646107fff28c07b2b458961f1095e2e255c",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +539,543 @@    order: Optional[str] = ...,\n    *,\n    like: ArrayLike = ...,\n) -> ndarray: ...\ndef empty("
  },
  {
    "id" : "2725d26f-dc0f-4bfe-9e7d-7071b64a36da",
    "prId" : 16935,
    "prUrl" : "https://github.com/numpy/numpy/pull/16935#pullrequestreview-461148796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "152bc497-a9b1-487a-9116-d43d0942fb87",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "```suggestion\r\n    *,\r\n    like: ArrayLike = ...,\r\n```",
        "createdAt" : "2020-08-04T20:28:18Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "458e8646107fff28c07b2b458961f1095e2e255c",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +546,550 @@    order: Optional[str] = ...,\n    *,\n    like: ArrayLike = ...,\n) -> ndarray: ...\ndef zeros_like("
  },
  {
    "id" : "765097d8-6bd9-4c23-987f-1bc76ea7de37",
    "prId" : 16935,
    "prUrl" : "https://github.com/numpy/numpy/pull/16935#pullrequestreview-463574662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d0ce552-2e58-43ea-9350-71bf733c56b6",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "```suggestion\r\n    *,\r\n    like: ArrayLike = ...,\r\n```",
        "createdAt" : "2020-08-04T20:28:27Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "8ae7648d-bc57-43c3-b33d-7d8634804a8f",
        "parentId" : "5d0ce552-2e58-43ea-9350-71bf733c56b6",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "The asterix is still missing here.\r\nAlso it seems that a trailing comma is missing from, among others, `order: str = ...` (hence the typing-related CI failures).",
        "createdAt" : "2020-08-04T22:15:01Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "f65aacae-9f6c-41f4-9094-479a13aac71a",
        "parentId" : "5d0ce552-2e58-43ea-9350-71bf733c56b6",
        "authorId" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "body" : "You're right, thanks for pointing it out. Should be fixed now (hopefully).",
        "createdAt" : "2020-08-04T22:41:14Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "6e17f0b6-e8c6-47b6-83f4-6aa30f051dc0",
        "tags" : [
        ]
      },
      {
        "id" : "2ef5be31-8b34-47d0-9bea-c01e4dbe3efb",
        "parentId" : "5d0ce552-2e58-43ea-9350-71bf733c56b6",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Was this resolved? Also the `order: str = ...` has no trailing comma? Or am I missing something?",
        "createdAt" : "2020-08-07T19:51:15Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "05364057-45ad-4da0-a240-bd7ed27e67cd",
        "parentId" : "5d0ce552-2e58-43ea-9350-71bf733c56b6",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "The comma is there. This is resolved.",
        "createdAt" : "2020-08-07T19:52:45Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a9e07ac1-977b-430d-bafa-a1880342770f",
        "parentId" : "5d0ce552-2e58-43ea-9350-71bf733c56b6",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "Strange, must have been looking at some outdated diff. Thanks.",
        "createdAt" : "2020-08-07T19:54:03Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      }
    ],
    "commit" : "458e8646107fff28c07b2b458961f1095e2e255c",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +575,579 @@    order: str = ...,\n    *,\n    like: ArrayLike = ...,\n) -> ndarray: ...\ndef full_like("
  },
  {
    "id" : "b1446bd3-1ad8-4417-a56c-6a71ec79a6df",
    "prId" : 16935,
    "prUrl" : "https://github.com/numpy/numpy/pull/16935#pullrequestreview-461148796",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dff03e75-509f-4bc3-9bba-d6d09fafc5c3",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "```suggestion\r\n    *,\r\n    like: ArrayLike = ...,\r\n```",
        "createdAt" : "2020-08-04T20:29:58Z",
        "updatedAt" : "2020-08-28T16:36:17Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "458e8646107fff28c07b2b458961f1095e2e255c",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +627,631 @@    shape: Tuple[int, int],\n    *,\n    like: ArrayLike = ...,\n    **kwargs,\n) -> Any: ..."
  },
  {
    "id" : "fb4829b7-c94c-44a5-b49f-0652fd049a55",
    "prId" : 17104,
    "prUrl" : "https://github.com/numpy/numpy/pull/17104#pullrequestreview-471519031",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28a77d0a-9654-4e4c-a03b-b62e6c7c19f9",
        "parentId" : null,
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "missing `distutils` and `f2py` here",
        "createdAt" : "2020-08-19T21:58:54Z",
        "updatedAt" : "2020-08-20T12:17:31Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "e781629b-759b-4925-a1c3-ee38dd183715",
        "parentId" : "28a77d0a-9654-4e4c-a03b-b62e6c7c19f9",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Done as of https://github.com/numpy/numpy/pull/17104/commits/1a3efc43575434509fb968cbe42701094d9a0dee.\r\n\r\nI had some issues identifying the `distutils` public namespace, so for now it's still annotated as a module-level `__getattr__()`.",
        "createdAt" : "2020-08-20T11:54:59Z",
        "updatedAt" : "2020-08-20T12:17:31Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c7c0f081711654095023a984978cd812ac94fb6",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +50,54 @@    compat,\n    core,\n    ctypeslib,\n    emath,\n    fft,"
  },
  {
    "id" : "dc9f22f0-f2c8-4347-8662-3869399609eb",
    "prId" : 17104,
    "prUrl" : "https://github.com/numpy/numpy/pull/17104#pullrequestreview-471518216",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e433168-e09b-4ebe-b416-3b4fc135abfc",
        "parentId" : null,
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "I'd prefer to leave `compat` and `core` out.",
        "createdAt" : "2020-08-19T21:59:22Z",
        "updatedAt" : "2020-08-20T12:17:31Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "d1ac5339-3ba2-4b48-9cfb-14599fd99618",
        "parentId" : "4e433168-e09b-4ebe-b416-3b4fc135abfc",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Done as of https://github.com/numpy/numpy/pull/17104/commits/6d33a659b493b43b393e2ce58cbb9e8e40e2f583.",
        "createdAt" : "2020-08-20T11:53:38Z",
        "updatedAt" : "2020-08-20T12:17:31Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "1c7c0f081711654095023a984978cd812ac94fb6",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +49,53 @@    char,\n    compat,\n    core,\n    ctypeslib,\n    emath,"
  },
  {
    "id" : "c9911a15-e23b-4e98-997c-cf5fc88bfae3",
    "prId" : 17172,
    "prUrl" : "https://github.com/numpy/numpy/pull/17172#pullrequestreview-477168906",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ce5a136-109d-4acf-be06-567c1dce594a",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Aren't these properties of `np.number` anyway?",
        "createdAt" : "2020-08-27T22:10:39Z",
        "updatedAt" : "2020-08-27T22:10:39Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "b7df8452-0d41-4dec-ba3a-c87550371e50",
        "parentId" : "3ce5a136-109d-4acf-be06-567c1dce594a",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "~~They are and they were already defined for `np.number` some time ago~~\r\n\r\nHang on, for some reason this `_real_generic` mixing is subclassed in a number of `np.number` sub-classes but not `np.number` itself. This doesn't seem right.\r\n\r\nhttps://github.com/numpy/numpy/blob/32b3f82e4862d85c5aebba2b2b82a931038cd103/numpy/__init__.pyi#L381-L387\r\n\r\nWhat makes `np.complexfloating` somewhat unique is that the return type of \r\n`.real` and `.imag` is not `type(self)`; it's one of the `np.floating` subclasses.",
        "createdAt" : "2020-08-27T22:20:35Z",
        "updatedAt" : "2020-08-27T22:23:22Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "0cf04c5b-31c1-4455-82c1-dc5d3a94d989",
        "parentId" : "3ce5a136-109d-4acf-be06-567c1dce594a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think we forgot that integers support real and imag too, to match python",
        "createdAt" : "2020-08-27T22:35:15Z",
        "updatedAt" : "2020-08-27T22:35:15Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "5388be09-957b-4ec3-bbc8-08841609ff23",
        "parentId" : "3ce5a136-109d-4acf-be06-567c1dce594a",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "> I think we forgot that integers support real and imag too, to match python\r\n\r\nI think we're safe here actually, as `_real_generic` is included in the definition of `integer`:\r\n\r\nhttps://github.com/numpy/numpy/blob/32b3f82e4862d85c5aebba2b2b82a931038cd103/numpy/__init__.pyi#L407\r\n\r\nStill, it would in my opinion be cleaner to just move `real` and `imag` to the `np.generic` superclass.\r\nAs both properties have to be redefined for `np.complexfloating` anyway (due to their distinct return type) \r\nthe original concern should not be an issue (https://github.com/numpy/numpy-stubs/pull/14#discussion_r175656159).",
        "createdAt" : "2020-08-27T22:50:18Z",
        "updatedAt" : "2020-08-27T22:50:18Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "2a634143-42c2-4f8f-b9b7-b588a17cabbc",
        "parentId" : "3ce5a136-109d-4acf-be06-567c1dce594a",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think number makes more sense than generic, as the result of str_.real is nonsense",
        "createdAt" : "2020-08-27T22:56:49Z",
        "updatedAt" : "2020-08-27T22:56:49Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ff8ec848-9dae-4c66-ba51-184dd4a2419a",
        "parentId" : "3ce5a136-109d-4acf-be06-567c1dce594a",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "That might for the better, yes.\r\nI had to double check but `real` and `imag` will apparently be deprecated for non-numeric types anyway (https://github.com/numpy/numpy/issues/10818).\r\n\r\nIn any case, I'm planning to save this for a future maintenance pull request as there are also a few other issues I'd like to fix in one go (_e.g._ `str` and `bytes` are missing from a couple of `__init__()`s).",
        "createdAt" : "2020-08-28T00:34:52Z",
        "updatedAt" : "2020-08-28T00:34:52Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "48372af1c98dabf9c6949994623b133b41272f53",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +470,474 @@    def real(self) -> _FloatType: ...\n    @property\n    def imag(self) -> _FloatType: ...\n    def __abs__(self) -> _FloatType: ...  # type: ignore[override]\n"
  },
  {
    "id" : "ed179f8f-5efb-4ce5-b87d-31c6b7c4e05e",
    "prId" : 17172,
    "prUrl" : "https://github.com/numpy/numpy/pull/17172#pullrequestreview-477724554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4b106c2-3cfd-4677-b2ca-b55be561c27d",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Why is `ignore` needed here but not on the others?",
        "createdAt" : "2020-08-28T10:40:03Z",
        "updatedAt" : "2020-08-28T10:40:03Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "100fa4c7-3bcf-48e2-b9bf-f28c7829ba40",
        "parentId" : "f4b106c2-3cfd-4677-b2ca-b55be561c27d",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "`__abs__()` is already defined a super-class while the other two are not (as per our previous `real`/`imag` discussion):\r\n\r\nhttps://github.com/numpy/numpy/blob/32b3f82e4862d85c5aebba2b2b82a931038cd103/numpy/__init__.pyi#L256\r\n\r\nMypy will complain due to incompatibilities between the super- and sub-types' signatures, \r\ncomplaints which are silenced by `# type: ignore[override]`.\r\n\r\nFor more details: https://mypy.readthedocs.io/en/stable/common_issues.html#incompatible-overrides",
        "createdAt" : "2020-08-28T13:24:07Z",
        "updatedAt" : "2020-08-28T13:24:08Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "48372af1c98dabf9c6949994623b133b41272f53",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +471,475 @@    @property\n    def imag(self) -> _FloatType: ...\n    def __abs__(self) -> _FloatType: ...  # type: ignore[override]\n\nclass complex64(complexfloating[float32]):"
  },
  {
    "id" : "9a0db2e0-826a-451e-80b8-80cd3e69e681",
    "prId" : 17180,
    "prUrl" : "https://github.com/numpy/numpy/pull/17180#pullrequestreview-477793970",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae26bf41-0dd2-4ebe-be2a-7f8e34a1e3a5",
        "parentId" : null,
        "authorId" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "body" : "Does [`int`, `integer`] include `bool`?",
        "createdAt" : "2020-08-28T14:48:02Z",
        "updatedAt" : "2020-08-28T14:48:02Z",
        "lastEditedBy" : "b15cf1a1-ba9d-47aa-b157-e0c1f40c5c5c",
        "tags" : [
        ]
      },
      {
        "id" : "e204b1d9-b9c5-4353-922c-50cea59e7467",
        "parentId" : "ae26bf41-0dd2-4ebe-be2a-7f8e34a1e3a5",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "It does as `bool` is a subclass of `int`.\r\n\r\nThere is, as far as I'm aware, no convenient way of annotating a function which accepts integers but rejects booleans.",
        "createdAt" : "2020-08-28T14:51:08Z",
        "updatedAt" : "2020-08-28T14:51:08Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "edcf0ea581546eb8c29ba34b7576f2a8d81b4eec",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +145,149 @@\n_ArrayLikeInt = Union[\n    int,\n    integer,\n    Sequence[Union[int, integer]],"
  },
  {
    "id" : "a411ad87-99d2-4e85-8a66-4f887245a3a1",
    "prId" : 17188,
    "prUrl" : "https://github.com/numpy/numpy/pull/17188#pullrequestreview-478223613",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d940d16e-2819-482e-9458-f5370c7ac756",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "`__matmul__` and the likes are only defined for `np.ndarray`; not for `np.generic`",
        "createdAt" : "2020-08-30T17:38:27Z",
        "updatedAt" : "2020-09-07T18:21:29Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "ae80d0c1-491f-43a8-b873-063f3cda8772",
        "parentId" : "d940d16e-2819-482e-9458-f5370c7ac756",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "If you're doing this type of cleanup... All the `__i<op>__` methods are also present only on arrays.",
        "createdAt" : "2020-08-30T17:44:45Z",
        "updatedAt" : "2020-09-07T18:21:29Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "16dc2d57-98f1-43da-82e6-87ef0faa718b",
        "parentId" : "d940d16e-2819-482e-9458-f5370c7ac756",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Might as well while we're at it; done as of https://github.com/numpy/numpy/pull/17188/commits/478c3f4ba320e580673da8a97b57ef45d96dac4a.",
        "createdAt" : "2020-08-30T18:11:21Z",
        "updatedAt" : "2020-09-07T18:21:29Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "599b5af0bc62e0e2be188e03eaeef357b901bf93",
    "line" : 246,
    "diffHunk" : "@@ -1,1 +433,437 @@    def __contains__(self, key) -> bool: ...\n    def __index__(self) -> int: ...\n    def __matmul__(self, other): ...\n    def __imatmul__(self, other): ...\n    def __rmatmul__(self, other): ..."
  },
  {
    "id" : "75e9ebd1-2109-4f9f-ab2b-e2f9179a3fec",
    "prId" : 17235,
    "prUrl" : "https://github.com/numpy/numpy/pull/17235#pullrequestreview-481790289",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18247fdd-f314-4911-b8c0-ab79c78efade",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I think these changes conflict with an open PR",
        "createdAt" : "2020-09-03T12:24:27Z",
        "updatedAt" : "2020-09-03T12:24:27Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "cc6df20a-bf8c-4c46-a78d-41883caefb2c",
        "parentId" : "18247fdd-f314-4911-b8c0-ab79c78efade",
        "authorId" : "7a51d4aa-1b22-44ec-b6d7-f63f852f52fe",
        "body" : "PR https://github.com/numpy/numpy/pull/17188 includes some but not all of these.\r\n\r\nWould you prefer that's merged first?\r\n\r\nOr remove these changes from this PR?",
        "createdAt" : "2020-09-03T12:32:13Z",
        "updatedAt" : "2020-09-03T12:32:14Z",
        "lastEditedBy" : "7a51d4aa-1b22-44ec-b6d7-f63f852f52fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "d09e192f05fae7d2e13735c82714b0bc140a0d9f",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +419,423 @@    def __add__(self, other: datetime64) -> datetime64: ...\n    def __sub__(self, other: Union[timedelta64, int]) -> timedelta64: ...\n    @overload\n    def __truediv__(self, other: timedelta64) -> float: ...\n    @overload"
  },
  {
    "id" : "73ced95d-5822-4b03-b867-590e7e18b0c6",
    "prId" : 17981,
    "prUrl" : "https://github.com/numpy/numpy/pull/17981#pullrequestreview-550080198",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1699e2f-de83-4018-ae6d-b554a5256845",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Adding overloads for all `DTypeLike` objects is quite frankly too much work. \r\nFor now just return `dtype[Any]`  if a dtype-like object (besides `None`) is provided.",
        "createdAt" : "2020-12-11T13:08:08Z",
        "updatedAt" : "2020-12-11T16:33:44Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "6139ed42af271d37234320e83a41000d93bdeae1",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +979,983 @@    def __array__(self: flatiter[ndarray[Any, _DType]], __dtype: None = ...) -> ndarray[Any, _DType]: ...\n    @overload\n    def __array__(self, __dtype: DTypeLike) -> ndarray[Any, dtype[Any]]: ...\n\n_OrderKACF = Optional[Literal[\"K\", \"A\", \"C\", \"F\"]]"
  },
  {
    "id" : "473252d3-a8b5-46bd-a37c-7bfb8b70dfcf",
    "prId" : 18128,
    "prUrl" : "https://github.com/numpy/numpy/pull/18128#pullrequestreview-562150043",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59399037-52f2-4fc1-be23-936f6511eacd",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "To summarize the various overloads:\r\n1. Overload for filtering out any `str`/`bytes`-based array-likes. This is needed as `bytes` would otherwise be recognized as a `Sequence[int]` sub-type (which is bad) and `str` would otherwise be caught by overload 6. (as `str` is a sequence of strings, which is a sequence of strings, _etc._).\r\n2. Number-based overload\r\n3. Timedelta-based overload\r\n4. Datetime-based overload\r\n5. Object-based overload. `other` is typed as `Any` here as object arrays can be extremely flexible (depending on the actual underlying objects).\r\n6. A final overload to handle all sequences whose nesting level is too deep for the previous overloads.",
        "createdAt" : "2021-01-05T21:28:38Z",
        "updatedAt" : "2021-01-19T19:15:39Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e848559be8a927411795669ec891603bd01b0d3",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +1482,1486 @@    # strings, it will pass through the final overload otherwise\n\n    @overload\n    def __lt__(self: _ArrayND[Any], other: _NestedSequence[Union[str, bytes]]) -> NoReturn: ...\n    @overload"
  },
  {
    "id" : "c2b2905e-8811-4123-b057-8cdc62531f43",
    "prId" : 18229,
    "prUrl" : "https://github.com/numpy/numpy/pull/18229#pullrequestreview-577549358",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c30c6c2c-e862-483f-9a43-7c4231a2c281",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "I'm not 100% sure if all these dunders are considered public or not (especially the bottom three). Are there any about annotating them?\r\n\r\nSecondly, they could be marked with `Final` if they should be considered read-only.",
        "createdAt" : "2021-01-25T15:32:17Z",
        "updatedAt" : "2021-01-27T16:01:47Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "efcf551b-ebac-4688-a6af-e68fc93af85a",
        "parentId" : "c30c6c2c-e862-483f-9a43-7c4231a2c281",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "`__path__` is a python builtin that's added to all packages, like `__name__`.",
        "createdAt" : "2021-01-25T15:35:01Z",
        "updatedAt" : "2021-01-27T16:01:47Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "019b6894-33f5-4291-87f5-9d578673089a",
        "parentId" : "c30c6c2c-e862-483f-9a43-7c4231a2c281",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "The annoying thing it is not defined for [`types.ModuleType`](https://github.com/python/typeshed/blob/a1a51f5aace0989301576c7f7edc7432bef6f5c9/stdlib/3/_importlib_modulespec.pyi#L35-L42) (as not all modules are packages), and by extension for `numpy`.\r\nThis is arguably an issue that should be solved in mypy though (or perhaps even typeshed).",
        "createdAt" : "2021-01-25T15:40:58Z",
        "updatedAt" : "2021-01-27T16:01:47Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "2bd0f042-8c5b-417b-afa1-3a86fb80bd55",
        "parentId" : "c30c6c2c-e862-483f-9a43-7c4231a2c281",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "How about the likes of `np.__NUMPY_SETUP__`, `np.__deprecated_attrs__` and `np.__expired_functions__` though?\r\nThey're not (clearly) marked as private, but I'm not 100% sure whether or they're considered public.",
        "createdAt" : "2021-01-26T12:58:40Z",
        "updatedAt" : "2021-01-27T16:01:47Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      },
      {
        "id" : "84fcd758-7e06-42d3-b8bc-4fab8c6b22f3",
        "parentId" : "c30c6c2c-e862-483f-9a43-7c4231a2c281",
        "authorId" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "body" : "I would consider them private, maybe they should never have been a dunder as such.  I am least sure about `__NUMPY_SETUP__`, but frankly, I wonder if that will matter in a typing context.",
        "createdAt" : "2021-01-26T15:11:54Z",
        "updatedAt" : "2021-01-27T16:01:47Z",
        "lastEditedBy" : "b0342685-bd89-441f-a04f-0e75db24c07f",
        "tags" : [
        ]
      },
      {
        "id" : "b66c5a0d-6c8f-4bda-b25d-17e64f3d2107",
        "parentId" : "c30c6c2c-e862-483f-9a43-7c4231a2c281",
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Yeah, for now I've just removed them (https://github.com/numpy/numpy/pull/18229/commits/7060d5e28f735199df6b465755ddd1d3bc7ed07e).\r\nWe can always consider revisiting this subject if the need arises.",
        "createdAt" : "2021-01-27T16:52:15Z",
        "updatedAt" : "2021-01-27T16:52:15Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "7060d5e28f735199df6b465755ddd1d3bc7ed07e",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +315,319 @@__path__: List[str]\n__version__: str\n__git_version__: str\n\nDataSource: Any"
  },
  {
    "id" : "abde3f60-a0bc-4aad-a3a7-87770f1e8ffb",
    "prId" : 18322,
    "prUrl" : "https://github.com/numpy/numpy/pull/18322#pullrequestreview-583483421",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca7e592b-42dd-4f6c-b354-ba06e7bdb3c0",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Effectively the plugin removes all import statements that are invalid for the platform in question.\r\n\r\nThe full list of (potential) extended-precision types was taken from [`numpy/__init__.pxd`](https://github.com/numpy/numpy/blob/9f12028b9453c17b72b26355fd503e512af96a5d/numpy/__init__.pxd#L54-L79).",
        "createdAt" : "2021-02-04T15:00:46Z",
        "updatedAt" : "2021-02-05T16:55:33Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "53496cdf82d6c9a3ddb40c12746d3257d9e09396",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +143,147 @@    complex192 as complex192,\n    complex256 as complex256,\n    complex512 as complex512,\n)\n"
  },
  {
    "id" : "f505a478-a9a1-4d21-96a1-17925b548134",
    "prId" : 18598,
    "prUrl" : "https://github.com/numpy/numpy/pull/18598#pullrequestreview-609718959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b863fa42-2195-49ba-9ae4-1fb98e335b41",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "This is rather unfortunate, but it's something that we'll have to deal with.",
        "createdAt" : "2021-03-11T12:44:09Z",
        "updatedAt" : "2021-03-11T12:44:09Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "2fad7d21fa0d38368f345e5483f7e4594bff9723",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +753,757 @@    # NOTE: `__rmul__` seems to be broken when used in combination with\n    # literals as of mypy 0.800. Set the return-type to `Any` for now.\n    def __rmul__(self, value: int) -> Any: ...\n\n    def __eq__(self, other: DTypeLike) -> bool: ..."
  },
  {
    "id" : "139c382e-22cc-4f5c-a5d7-d2c5147adfac",
    "prId" : 18780,
    "prUrl" : "https://github.com/numpy/numpy/pull/18780#pullrequestreview-636592427",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "218e816e-ed10-461b-afa3-514781ea3350",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "The double leading underscore is used for denoting position-only arguments per [PEP 484](https://www.python.org/dev/peps/pep-0484/#positional-only-arguments). The newer `/`-based syntax introduced in [PEP 570](https://www.python.org/dev/peps/pep-0570/) is, unfortunatelly, not yet supported by mypy for python versions prior to python 3.8.",
        "createdAt" : "2021-04-15T11:50:36Z",
        "updatedAt" : "2021-04-15T11:50:36Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "5258da3790a1904efe5043b822835e5ad583534b",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +601,605 @@def copyto(dst, src, casting=..., where=...): ...\ndef datetime_as_string(arr, unit=..., timezone=..., casting=...): ...\ndef datetime_data(__dtype): ...\ndef dot(a, b, out=...): ...\ndef frombuffer(buffer, dtype=..., count=..., offset=..., *, like=...): ..."
  },
  {
    "id" : "5ec87458-b5d0-4916-87db-8301a18ab97f",
    "prId" : 18998,
    "prUrl" : "https://github.com/numpy/numpy/pull/18998#pullrequestreview-657946632",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6efd67a9-0174-4bdb-b54a-5dea7bef2d8f",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "There are a couple of cases where the return-type is dependant on the unit (`datetime64` and `timedelta64`) or some other underlying object (`void` and `object_`). \r\nIn the long term, it might be worthwhile to make these classes [generic](https://docs.python.org/dev/glossary.html#term-generic-type) w.r.t. a suitable parameter (_e.g._ the unit) to sort this out.",
        "createdAt" : "2021-05-12T14:18:30Z",
        "updatedAt" : "2021-05-12T17:20:31Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb28af241185586467f145d4c986e8f315b3d940",
    "line" : 331,
    "diffHunk" : "@@ -1,1 +3037,3041 @@\n# TODO: `item`/`tolist` returns either `dt.timedelta` or `int`\n# depending on the unit\nclass timedelta64(generic):\n    def __init__("
  },
  {
    "id" : "a21799c4-e14e-413a-92ec-2d7f54c005bf",
    "prId" : 19002,
    "prUrl" : "https://github.com/numpy/numpy/pull/19002#pullrequestreview-658832531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffe08387-2152-42a2-9afd-584d08c22acc",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "It might be worthwhile to add support for the `__fspath__` protocol at some point, \r\nso one can also pass the likes of `pathlib.Path`.",
        "createdAt" : "2021-05-13T11:58:45Z",
        "updatedAt" : "2021-05-13T12:01:17Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "8f05c61cdbed9b5bc832e727293951945303113a",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +3550,3554 @@    ) -> None: ...\n    def __del__(self) -> None: ...\n    def abspath(self, path: str) -> str: ...\n    def exists(self, path: str) -> bool: ...\n"
  },
  {
    "id" : "40e3c9af-2cf4-4bf3-8f31-2ea845b7f077",
    "prId" : 19140,
    "prUrl" : "https://github.com/numpy/numpy/pull/19140#pullrequestreview-672119541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "844ee189-0e22-4904-9182-5983389c51dd",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "dtype-support is, for now, limited to dtype-likes that can be parametrized w.r.t. `np.generic`. \r\nFor all others the dtype will be set to `Any`.",
        "createdAt" : "2021-05-31T09:12:51Z",
        "updatedAt" : "2021-05-31T09:20:03Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "912ce767b968cc7a8db4bdb1ac982b9c004d3a49",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +1879,1883 @@        subok: bool = ...,\n        copy: bool = ...,\n    ) -> NDArray[Any]: ...\n\n    @overload"
  },
  {
    "id" : "6cb3a777-b416-4f5b-a350-067a041c8ea8",
    "prId" : 19140,
    "prUrl" : "https://github.com/numpy/numpy/pull/19140#pullrequestreview-672119541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46db427b-9025-4950-a70a-f04228a9af38",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Unfortunately we can't express the return of an `ndarray`-subclass with a specific dtype \r\n(_e.g._ `ndarray[float64] -> matrix[int64]`). This would require higher-kinded TypeVars, which we don't have.",
        "createdAt" : "2021-05-31T09:14:48Z",
        "updatedAt" : "2021-05-31T09:19:52Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "912ce767b968cc7a8db4bdb1ac982b9c004d3a49",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +1894,1898 @@        dtype: DTypeLike,\n        type: Type[_NdArraySubClass],\n    ) -> _NdArraySubClass: ...\n\n    @overload"
  },
  {
    "id" : "1e2cb362-2219-4287-94e4-d5ff4c41430c",
    "prId" : 19211,
    "prUrl" : "https://github.com/numpy/numpy/pull/19211#pullrequestreview-688078381",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e46390b2-f9f6-4267-86f2-2f3f5ff38b94",
        "parentId" : null,
        "authorId" : "0f22f62d-88ab-4820-aa32-ea85d896b487",
        "body" : "```suggestion\r\n         out: None = ...,\r\n```",
        "createdAt" : "2021-06-21T06:45:32Z",
        "updatedAt" : "2021-06-21T06:45:33Z",
        "lastEditedBy" : "0f22f62d-88ab-4820-aa32-ea85d896b487",
        "tags" : [
        ]
      }
    ],
    "commit" : "c55aaeabcbad491d6280fd890fae2efb0ef76714",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1332,1336 @@        self,\n        axis: _ShapeLike = ...,\n        out: None = ...,\n        *,\n        keepdims: bool = ...,"
  },
  {
    "id" : "62f8d798-253f-431c-9979-598f2001146a",
    "prId" : 19275,
    "prUrl" : "https://github.com/numpy/numpy/pull/19275#pullrequestreview-687326950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2ee3b6b-4bc4-4c60-ab45-83ed7415fd36",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "Multiplying a fixed-size dtype with 1 currently issues a `FutureWarning` and returns the passed dtype unaltered.\r\nOut of curiosity, how long has this warning been in place and when is the switch to this new behavior planned?\r\n\r\n``` python\r\nIn [1]: import numpy as np\r\n\r\nIn [2]: dtype_i8 = np.dtype(np.int64)\r\n   ...: dtype_i8 * 1\r\n<ipython-input-2-b3084159de63>:2: FutureWarning: Passing (type, 1) or '1type' as a synonym of type is deprecated; in a future version of numpy, it will be understood as (type, (1,)) / '(1,)type'.\r\n  dtype_i8 * 1\r\nOut[2]: dtype('int64')\r\n```",
        "createdAt" : "2021-06-18T11:54:18Z",
        "updatedAt" : "2021-06-18T11:54:18Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "961f0129cc67d5782be6833c72d83f7bfaec4524",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +1060,1064 @@    def __mul__(self: _FlexDType, value: SupportsIndex) -> _FlexDType: ...\n    @overload\n    def __mul__(self, value: SupportsIndex) -> dtype[void]: ...\n\n    # NOTE: `__rmul__` seems to be broken when used in combination with"
  },
  {
    "id" : "ff18d6cc-0f3c-4cf9-b043-11941be6bbe2",
    "prId" : 19344,
    "prUrl" : "https://github.com/numpy/numpy/pull/19344#pullrequestreview-693017852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b7c9afa-3add-4723-9dd6-1a6d8973bf00",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "A number of these methods are only available to `np.float64` (xref https://github.com/numpy/numpy/issues/13375).",
        "createdAt" : "2021-06-25T16:48:10Z",
        "updatedAt" : "2021-06-25T16:48:11Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0c37b8ef3f9536608ad78ee94bcb5d8c87d2242",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +3328,3332 @@    ) -> float: ...\n    def tolist(self) -> float: ...\n    def is_integer(self: float64) -> bool: ...\n    def hex(self: float64) -> str: ...\n    @classmethod"
  },
  {
    "id" : "661d58ed-172e-4f73-935b-2d4bce43ec4b",
    "prId" : 19344,
    "prUrl" : "https://github.com/numpy/numpy/pull/19344#pullrequestreview-693022612",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd4d99b3-0c0f-4c4a-a94a-2d928dc60b8f",
        "parentId" : null,
        "authorId" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "body" : "I'd argue that `denominator` returning a `builtins.int` instance is somewhat concerning, especially for `np.uint64`.",
        "createdAt" : "2021-06-25T16:54:21Z",
        "updatedAt" : "2021-06-25T16:54:21Z",
        "lastEditedBy" : "ebbd559e-4e98-4695-a417-e4a6bc303d63",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0c37b8ef3f9536608ad78ee94bcb5d8c87d2242",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +3163,3167 @@    def numerator(self: _ScalarType) -> _ScalarType: ...\n    @property\n    def denominator(self) -> L[1]: ...\n    @overload\n    def __round__(self, ndigits: None = ...) -> int: ..."
  }
]