[
  {
    "id" : "3993ab7f-1394-4fcc-8609-d1fe747c31b8",
    "prId" : 3342,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96d2cd2d-2e1e-4959-b2d2-98db7d7b5dc8",
        "parentId" : null,
        "authorId" : "76432b2e-5b3e-421c-b16c-2ba7b842d9c9",
        "body" : "Um, isn't this going to mask bugs?  Why wouldn't you fix the cause of the `SandboxViolation`???\n",
        "createdAt" : "2013-05-21T00:31:52Z",
        "updatedAt" : "2013-05-21T00:31:52Z",
        "lastEditedBy" : "76432b2e-5b3e-421c-b16c-2ba7b842d9c9",
        "tags" : [
        ]
      },
      {
        "id" : "2075e9f2-9df7-422b-9f20-f5b171bed4dd",
        "parentId" : "96d2cd2d-2e1e-4959-b2d2-98db7d7b5dc8",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "It's an upstream bug that has been fixed in newer versions of setuptools/distribute. Writing to `/dev/null` should not trigger a `SandboxViolation`. While we could make an effort to only catch a `SandboxViolation` rather than `DistutilsError` (e.g. get the exception object and check if the name of its type is exactly `'SandboxViolation'`), but given the code inside the `try:` block, I think that `SandboxViolation` is the only subclass of `DistutilsError` that could be raised.\n",
        "createdAt" : "2013-05-21T10:10:22Z",
        "updatedAt" : "2013-05-21T10:10:22Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      },
      {
        "id" : "18774a80-68a0-42c4-bfc9-adce74462adf",
        "parentId" : "96d2cd2d-2e1e-4959-b2d2-98db7d7b5dc8",
        "authorId" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "body" : "FWIW, this was only fixed in distribute at the time I wrote this. However, setuptools 0.7, which merges in distribute, has been released, and it contains the fix.\n",
        "createdAt" : "2013-06-04T21:46:56Z",
        "updatedAt" : "2013-06-04T21:46:56Z",
        "lastEditedBy" : "85b881e8-d8a0-43d4-81d3-7e233dc5f1ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "eec5e489778764bb80bcb900ae88e8abc7db1ff3",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +224,228 @@        p = sp.Popen([\"gcc\", \"-print-multiarch\"], stdout=sp.PIPE,\n                stderr=tmp)\n    except (OSError, DistutilsError):\n        # OSError if gcc is not installed, or SandboxViolation (DistutilsError\n        # subclass) if an old setuptools bug is triggered (see gh-3160)."
  },
  {
    "id" : "2c56ac28-8d7b-4433-b21a-563c7c6f3e25",
    "prId" : 5597,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a26d65cd-fc0d-4774-9257-e19a2a0115bb",
        "parentId" : null,
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "The above looks correct, but it took me a couple of minutes to understand the comment and the use of `del`. How about replacing the whole if clause with:\n\n```\n# From `check_libs` we get keys \"libraries\" and \"library_dirs\",\n# while we need only key \"runtime_library_dirs\" with those paths\ndict_append(info, runtime_library_dirs=i['library_dirs'])\n```\n",
        "createdAt" : "2015-02-25T08:52:56Z",
        "updatedAt" : "2015-02-27T07:14:30Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "a104ccd5-8f9b-42c1-bd7c-39703e616c34",
        "parentId" : "a26d65cd-fc0d-4774-9257-e19a2a0115bb",
        "authorId" : "dc16bbfe-41d1-4206-8e4e-13e63320eda1",
        "body" : "It was more to be consistent in that if later revisions of check_libs\nreturns more than the two keys (libraries and library_dirs). In that\n_future_ case would any additional keys also get passed. Hence the obscure\ndelete, pop sequence.\nIt may be overkill?\n\n2015-02-25 9:53 GMT+01:00 Ralf Gommers notifications@github.com:\n\n> In numpy/distutils/system_info.py\n> https://github.com/numpy/numpy/pull/5597#discussion_r25325312:\n> \n> > @@ -498,17 +505,46 @@ def calc_libraries_info(self):\n> >                  dict_append(info, **i)\n> >              else:\n> >                  log.info('Library %s was not found. Ignoring' % (lib))\n> > -            i = self.check_libs(r_dirs, [lib])\n> > -            if i is not None:\n> > -                # Swap library keywords found to runtime_library_dirs\n> > -                # the libraries are insisting on the user having defined\n> > -                # them using the library_dirs, and not necessarily by\n> > -                # runtime_library_dirs\n> > -                del i['libraries']\n> > -                i['runtime_library_dirs'] = i.pop('library_dirs')\n> > -                dict_append(info, **i)\n> \n> The above looks correct, but it took me a couple of minutes to understand\n> the comment and the use of del. How about replacing the whole if clause\n> with:\n> \n> # From `check_libs` we get keys \"libraries\" and \"library_dirs\",\n> \n> # while we need only key \"runtime_library_dirs\" with those paths\n> \n> dict_append(info, runtime_library_dirs=i['library_dirs'])\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/numpy/numpy/pull/5597/files#r25325312.\n\n## \n\nKind regards Nick\n",
        "createdAt" : "2015-02-25T08:57:18Z",
        "updatedAt" : "2015-02-27T07:14:30Z",
        "lastEditedBy" : "dc16bbfe-41d1-4206-8e4e-13e63320eda1",
        "tags" : [
        ]
      },
      {
        "id" : "9e755735-a16f-4179-9aca-950dc22010ac",
        "parentId" : "a26d65cd-fc0d-4774-9257-e19a2a0115bb",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "Then all those extra keys would already be updated by this code above right?\n\n```\n        i = self.check_libs(dirs, [lib])\n        if i is not None:\n            dict_append(info, **i)\n```\n",
        "createdAt" : "2015-02-25T09:00:43Z",
        "updatedAt" : "2015-02-27T07:14:30Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "ac89d3f9-3bbb-4508-a035-465782e8a9f6",
        "parentId" : "a26d65cd-fc0d-4774-9257-e19a2a0115bb",
        "authorId" : "dc16bbfe-41d1-4206-8e4e-13e63320eda1",
        "body" : "Yes, but that would also add the libraries key, which should be provided by the library key and library_dirs, not intrinsically by runtime_library_dirs. I did this so that library_dirs has precedence for actual libraries, and runtime_library_dirs only works for those directories listed.\nSo it is a \"hack\" to not re-create a check_libs routine only for the runtime libs.\nThe way I did it it will only allow runtime_library_dirs to be added iff the libraries also exists in those paths (this is what check_libs does).\n\nIf your above code would be used, all libraries would be added twice to the list. Also we need to transfer library_dirs to runtime_library_dirs, hence the pop to the other key.\n\n###### site1.cfg\n\n```\n[lapack]\nlibraries = lapack\nlibrary_dirs = /opt/lapack\n```\n\nLinking command: `... -L/opt/lapack -llapack`.  \nHere `LD_LIBRARY_PATH` is needed if shared lapack is shared.\n\n###### site2.cfg\n\n```\n[lapack]\nlibraries = lapack\nlibrary_dirs = /opt/lapack\nruntime_library_dirs = /opt/lapack\n```\n\nLinking command: `... -L/opt/lapack -Wl,-rpath=/opt/lapack -llapack`.  \nHere the runtime library directory will be set, `LD_LIBRARY_PATH` not needed any more.\n\n###### site3.cfg\n\n```\n[lapack]\nlibraries = lapack\nruntime_library_dirs = /opt/lapack\n```\n\nLinking command: `... -Wl,-rpath=/opt/lapack -llapack`.  \n",
        "createdAt" : "2015-02-25T10:32:14Z",
        "updatedAt" : "2015-02-27T07:14:30Z",
        "lastEditedBy" : "dc16bbfe-41d1-4206-8e4e-13e63320eda1",
        "tags" : [
        ]
      }
    ],
    "commit" : "525f0cd85fa270ee0fb843a8cfdd21dfe98238cd",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +519,523 @@                del i['libraries']\n                i['runtime_library_dirs'] = i.pop('library_dirs')\n                dict_append(info, **i)\n            else:\n                log.info('Runtime library %s was not found. Ignoring' % (lib))"
  },
  {
    "id" : "9a4dbf39-ae4c-4932-b66e-246965ca87c4",
    "prId" : 6757,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa12a2b1-f3c9-4cf8-9127-1abd6ad0e407",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This doesn't seem right, cblas is not blas and up above `HAS_CBLAS` is set on non-None return.\n",
        "createdAt" : "2015-12-02T21:52:13Z",
        "updatedAt" : "2015-12-04T17:37:57Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "488e3700-d2b7-408c-98b1-60a3ef9ce20f",
        "parentId" : "fa12a2b1-f3c9-4cf8-9127-1abd6ad0e407",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "on debian blas == cblas and thats what is being checked here\na comment for why we accept blas as cblas should be added\n",
        "createdAt" : "2015-12-02T21:58:40Z",
        "updatedAt" : "2015-12-04T17:37:57Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      }
    ],
    "commit" : "2fb84baca65c23006612be4bb2b92b1738a3aba2",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +1730,1734 @@                                      library_dirs=info['library_dirs'],\n                                      extra_postargs=info.get('extra_link_args', []))\n                    res = \"blas\"\n            except distutils.ccompiler.CompileError:\n                res = None"
  },
  {
    "id" : "194dfdb7-0841-4f00-b2bc-eb7aefc78815",
    "prId" : 7699,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93a7bf21-7477-4fd8-ab07-228e32c3e9c2",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Return `None` would also work.\n",
        "createdAt" : "2016-06-29T18:14:05Z",
        "updatedAt" : "2016-06-29T18:14:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c84c87552f87683f90b11c52245681498a4f2e69",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +751,755 @@                return lib\n\n        return False\n\n    def _find_libs(self, lib_dirs, libs, exts):"
  },
  {
    "id" : "86071b44-3bfe-4dd1-a31e-dba87f33ba3c",
    "prId" : 7699,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f65c9e9-9ff0-4ec7-ab4c-4d49a6b71b08",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Be good to document exactly the procedure in finding the libraries here.\n",
        "createdAt" : "2016-06-29T18:15:58Z",
        "updatedAt" : "2016-06-29T18:15:58Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c84c87552f87683f90b11c52245681498a4f2e69",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +768,772 @@    def _check_libs(self, lib_dirs, libs, opt_libs, exts):\n        \"\"\"Find mandatory and optional libs in expected paths.\n\n        Missing optional libraries are silently forgotten.\n        \"\"\""
  },
  {
    "id" : "41fd6941-ac76-463b-960f-c72b9141db50",
    "prId" : 7699,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e26fffec-3557-4795-904c-4350e1e24521",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could just be `return l` as below?\n",
        "createdAt" : "2016-06-29T18:18:28Z",
        "updatedAt" : "2016-06-29T18:18:28Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "4c5f426b-db4a-4846-8942-36f8dd7a689b",
        "parentId" : "e26fffec-3557-4795-904c-4350e1e24521",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "You break on `p`, then immediately after the loop, return on `p`. So why not just return in the first place?\n",
        "createdAt" : "2016-06-29T19:28:26Z",
        "updatedAt" : "2016-06-29T19:28:26Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c84c87552f87683f90b11c52245681498a4f2e69",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +742,746 @@                p = self.combine_paths(lib_dir, prefix + lib + ext)\n                if p:\n                    break\n            if p:\n                assert len(p) == 1"
  },
  {
    "id" : "50ec9641-9d5f-4604-9aac-7ea0b39c5529",
    "prId" : 11066,
    "prUrl" : "https://github.com/numpy/numpy/pull/11066#pullrequestreview-118859546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6540366-e8ad-4fac-bc97-f5e0e5741dc8",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Doesn't `accelerate_info` shadow the class below of the same name?",
        "createdAt" : "2018-05-08T23:59:07Z",
        "updatedAt" : "2018-05-08T23:59:07Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "284c0e51-0394-4637-af21-afc315aae866",
        "parentId" : "b6540366-e8ad-4fac-bc97-f5e0e5741dc8",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "This seemed to be the convention here...",
        "createdAt" : "2018-05-09T18:47:42Z",
        "updatedAt" : "2018-05-09T18:47:42Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      }
    ],
    "commit" : "98e6ecf1195f7eb54045d0b66933bbc33a061f5f",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +1632,1636 @@            atlas_info = get_info('atlas_blas')\n\n        accelerate_info = get_info('accelerate')\n        if accelerate_info and not atlas_info:\n            self.set_info(**accelerate_info)"
  },
  {
    "id" : "d09bf7c6-f131-41d1-933f-a19ada3f40c7",
    "prId" : 11066,
    "prUrl" : "https://github.com/numpy/numpy/pull/11066#pullrequestreview-118864040",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0097da4-1e5c-4d9c-808b-cd6a04d65454",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Maybe `OSX_AccelerateInfo`?",
        "createdAt" : "2018-05-09T00:00:28Z",
        "updatedAt" : "2018-05-09T00:00:28Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "c7346fbb-758b-4d32-9c95-6f50ae9d57ae",
        "parentId" : "a0097da4-1e5c-4d9c-808b-cd6a04d65454",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Assuming it isn't currently used publicly.",
        "createdAt" : "2018-05-09T00:02:16Z",
        "updatedAt" : "2018-05-09T00:02:16Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "7ce7d5a9-670f-4da9-becd-e93868bffb19",
        "parentId" : "a0097da4-1e5c-4d9c-808b-cd6a04d65454",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Note that this would be a break from the naming convention in the file.\r\nShould I follow the usual CamelCase regardless?",
        "createdAt" : "2018-05-09T18:48:30Z",
        "updatedAt" : "2018-05-09T18:48:30Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "05925553-e4f5-4f84-ba0f-189f1017fa9b",
        "parentId" : "a0097da4-1e5c-4d9c-808b-cd6a04d65454",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Nah, let's not worry about it. Someday this will all need to be rewritten for clarity, but we can live with it a bit longer.",
        "createdAt" : "2018-05-09T19:00:45Z",
        "updatedAt" : "2018-05-09T19:00:45Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "98e6ecf1195f7eb54045d0b66933bbc33a061f5f",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +1879,1883 @@        self.set_info(**info)\n\nclass accelerate_info(system_info):\n    section = 'accelerate'\n    notfounderror = BlasNotFoundError"
  },
  {
    "id" : "473250d9-4e40-4daa-8431-5838f7499985",
    "prId" : 13157,
    "prUrl" : "https://github.com/numpy/numpy/pull/13157#pullrequestreview-218758624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ada7239-53d8-4887-98f4-37a5366b3831",
        "parentId" : null,
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Why is `lapack_libs` still used as the `x_libs` format, but `atlas_libs` aliased to `libraries`?",
        "createdAt" : "2019-03-23T18:48:47Z",
        "updatedAt" : "2019-04-29T17:16:32Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "755a5a84-4a45-43fb-9d74-95f71db5e76c",
        "parentId" : "5ada7239-53d8-4887-98f4-37a5366b3831",
        "authorId" : "dc16bbfe-41d1-4206-8e4e-13e63320eda1",
        "body" : "Yes, this is a bit problematic with ATLAS. ATLAS can provide either BLAS or BLAS+LAPACK(sub) or BLAS+LAPACK, with the middle option being only a subset of routines which are optimized.\r\nI would suggest *any* user to put all libraries (both BLAS and LAPACK) in a single library entry, however it seems that the dev of the `atlas_info` class recommended LAPACK and BLAS libraries to be split. The only case where this would be troublesome is to use ATLAS BLAS but another LAPACK lib.\r\n\r\nBasically I think this is why there is an abstraction of another key for only the LAPACK libraries.\r\n\r\nSo the final atlas section would look like:\r\n```bash\r\n[atlas]\r\nlibraries = f77blas,cblas,atlas\r\nlapack_libs = lapack_atlas\r\n```\r\nAnd then a user could do `get_info('blas_opt').update(get_info('lapack_mkl'))` for instance (dummy example ;) )",
        "createdAt" : "2019-03-26T08:46:26Z",
        "updatedAt" : "2019-04-29T17:16:32Z",
        "lastEditedBy" : "dc16bbfe-41d1-4206-8e4e-13e63320eda1",
        "tags" : [
        ]
      },
      {
        "id" : "2ef705de-4459-45be-b99f-a9947a94b7d8",
        "parentId" : "5ada7239-53d8-4887-98f4-37a5366b3831",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "I think splits are possible, they're different libraries (e.g. BLIS + Flame).\r\n\r\n> ATLAS can provide either BLAS or BLAS+LAPACK(sub) or BLAS+LAPACK, with the middle option being only a subset of routines which are optimized.\r\n\r\nI have never seen ATLAS used with numpy/scipy as anything other than \"all of BLAS + LAPACK\". ",
        "createdAt" : "2019-03-26T08:56:43Z",
        "updatedAt" : "2019-04-29T17:16:32Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "14628247-0209-4ba0-b1a8-ecf7ade9f213",
        "parentId" : "5ada7239-53d8-4887-98f4-37a5366b3831",
        "authorId" : "dc16bbfe-41d1-4206-8e4e-13e63320eda1",
        "body" : "@rgommers agreed, me neither. But the possibility *is* there.",
        "createdAt" : "2019-03-26T08:58:38Z",
        "updatedAt" : "2019-04-29T17:16:32Z",
        "lastEditedBy" : "dc16bbfe-41d1-4206-8e4e-13e63320eda1",
        "tags" : [
        ]
      }
    ],
    "commit" : "515c2a30d23a99fc878faac27296090f0bf80941",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +1174,1178 @@        opt = self.get_option_single('atlas_libs', 'libraries')\n        atlas_libs = self.get_libs(opt, self._lib_names + self._lib_atlas)\n        lapack_libs = self.get_libs('lapack_libs', self._lib_lapack)\n        atlas = None\n        lapack = None"
  },
  {
    "id" : "3ca1b7bf-c72b-4f83-ad46-6471d93e9ee9",
    "prId" : 13157,
    "prUrl" : "https://github.com/numpy/numpy/pull/13157#pullrequestreview-219308549",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7e0187c-84a3-4fea-82c2-cb39fade68e5",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Needs reformat to 80 column width. Also \"mulitple of options\" might be better as \"multiple appearances of option\"",
        "createdAt" : "2019-03-27T07:56:20Z",
        "updatedAt" : "2019-04-29T17:16:32Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "515c2a30d23a99fc878faac27296090f0bf80941",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +455,459 @@    In section '{section}' we found multiple appearances of options {options}.\"\"\"\n\n\nclass AtlasNotFoundError(NotFoundError):\n    \"\"\""
  },
  {
    "id" : "cbd18dbd-c80f-46e4-ba00-421db1a401f6",
    "prId" : 14771,
    "prUrl" : "https://github.com/numpy/numpy/pull/14771#pullrequestreview-306688258",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a279d8c6-9f85-4392-b2c3-8effa922bc5a",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Before this change, building locally with a broken compiler would result in the call to `_c_string_literal` below erroring out \r\n```\r\n  File \"/home/matti/pypy_stuff/numpy/numpy/distutils/system_info.py\", line 1587, in get_atlas_version\r\n    'ATLAS_INFO', _c_string_literal(atlas_version))\r\n  File \"/home/matti/pypy_stuff/numpy/numpy/distutils/system_info.py\", line 177, in _c_string_literal\r\n    s = s.replace('\\\\', r'\\\\')\r\nAttributeError: 'NoneType' object has no attribute 'replace'\r\n\r\n```\r\n",
        "createdAt" : "2019-10-24T15:57:41Z",
        "updatedAt" : "2019-10-26T07:31:25Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "955b2906c6da37844b0ee54b8a53850cf5df199f",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1590,1594 @@            log.info('Output: %s', o)\n\n    elif atlas_version == '3.2.1_pre3.3.6':\n        dict_append(info, define_macros=[('NO_ATLAS_INFO', -2)])\n    else:"
  }
]