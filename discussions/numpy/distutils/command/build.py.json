[
  {
    "id" : "86f4020d-da49-4a39-a049-21b0179da73d",
    "prId" : 13516,
    "prUrl" : "https://github.com/numpy/numpy/pull/13516#pullrequestreview-430263129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36627bb6-1ee1-4905-b14b-cce0589671f2",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "These flags are added 3 times: in `build.py`, `build_clib.py` and `build_ext.py`. There should be a way to refactor them to only be defined once. Although I see this is the way it is done for `fcompiler=`, which is also added 3 times. So maybe there is no way around it? @rgommers any thoughts? In any case, the defaults should always be the same: here they are changed. Is that on purpose?\r\n\r\nThe extensive comment at the top of the pull request should be part of some documentation for these options. Either in a docstring or as part of the `doc/source/*.rst` documentation.",
        "createdAt" : "2020-05-28T12:20:18Z",
        "updatedAt" : "2020-06-16T16:44:58Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "c429cfc6-79e4-4fcf-904e-f93e4d174088",
        "parentId" : "36627bb6-1ee1-4905-b14b-cce0589671f2",
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "I can only enable it within 'build.py' but the I idea behind adding three of them is to allow separate configuring for C libs building and extensions building.\r\n\r\nfor example, the user can disable the optimizations for `npyrandom`,  `npymath`,  and at the same allow it only for NumPy extensions.\r\n```Bash\r\npython3 setup.py build_clib --disable_optimization build install\r\n````\r\n",
        "createdAt" : "2020-06-14T23:55:35Z",
        "updatedAt" : "2020-06-16T16:44:58Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "e72653810f470415f4d78c8a9ea874370a526126",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +36,40 @@        self.cpu_baseline = \"min\"\n        self.cpu_dispatch = \"max -xop -fma4\" # drop AMD legacy features by default\n        self.disable_optimization = False\n\n    def finalize_options(self):"
  },
  {
    "id" : "4f7f7022-652a-4119-998f-6916106e56cb",
    "prId" : 16782,
    "prUrl" : "https://github.com/numpy/numpy/pull/16782#pullrequestreview-511017194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6dff6a86-87bc-4315-affe-f09562a11509",
        "parentId" : null,
        "authorId" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "body" : "@mattip, @rgommers,\r\nDuring the last rework, I took into account the size over the performance which lead to massively reduce the size, comparing with the old patch in #13516.\r\n```C\r\n$ strip -g _simd.cpython-36m-x86_64-linux-gnu.so\r\n$ du _simd.cpython-36m-x86_64-linux-gnu.so\r\n1656\t_simd.cpython-36m-x86_64-linux-gnu.so\r\n$ gzip _simd.cpython-36m-x86_64-linux-gnu.so\r\n$ du _simd.cpython-36m-x86_64-linux-gnu.so.gz\r\n236\t_simd.cpython-36m-x86_64-linux-gnu.so.gz\r\n```\r\nstill, large comparing with the other test modules, especially we still in the beginning, and a large number of intrinsics are expected to be added within the upcoming pull-requests.\r\n",
        "createdAt" : "2020-10-17T21:44:37Z",
        "updatedAt" : "2020-10-27T19:13:02Z",
        "lastEditedBy" : "23ffb2ec-0278-4386-95f5-84cc15ce2cfd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac4ffe1d39d9cc845948079a24facf7057effb24",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +40,44 @@        self.disable_optimization = False\n        \"\"\"\n        the '_simd' module is a very large. Adding more dispatched features\n        will increase binary size and compile time. By default we minimize\n        the targeted features to those most commonly used by the NumPy SIMD interface(NPYV),"
  }
]