[
  {
    "id" : "65bb9b13-a7b0-4ccd-83c4-ed981f52c463",
    "prId" : 5614,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63cb30d6-1bd5-477d-b77d-2e3e2a10fee1",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "don't we have this somewhere else already? using -dumpversion as its easier to parse\n",
        "createdAt" : "2015-02-27T17:57:18Z",
        "updatedAt" : "2015-02-27T17:57:18Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "a28f4ef3-7c08-4dda-b30f-bacd305112b5",
        "parentId" : "63cb30d6-1bd5-477d-b77d-2e3e2a10fee1",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Yeah, should be `-dumpversion`. I don't know if it is somewhere else. I can fix that in the style fixups.\n",
        "createdAt" : "2015-02-27T18:38:05Z",
        "updatedAt" : "2015-02-27T18:38:05Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "6a2dd4d5-671d-47f0-bcd8-50ca2eee1b04",
        "parentId" : "63cb30d6-1bd5-477d-b77d-2e3e2a10fee1",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Doesn't look like that will work here without other modifications. In particular there is\n\n```\nif 'MinGW-W64' not in str(out_string):\n```\n\nAnd `-dump-version` might not deliver that. I'd rather not fool with this without having windows to check the work with.\n",
        "createdAt" : "2015-02-27T19:27:36Z",
        "updatedAt" : "2015-02-27T19:27:36Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "8b80c1eb-1ece-4f2f-a774-9d1f4da053c2",
        "parentId" : "63cb30d6-1bd5-477d-b77d-2e3e2a10fee1",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@carlkl Can you check if `-dumpversion` works here?\n",
        "createdAt" : "2015-02-27T19:31:27Z",
        "updatedAt" : "2015-02-27T19:31:27Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "444b5ac1eb8d0e2bfe548770af3ab8e6af846832",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +87,91 @@\n        p = subprocess.Popen(['gcc', '--version'], shell=True,\n                             stdout=subprocess.PIPE)\n        out_string = p.stdout.read()\n        p.stdout.close()"
  },
  {
    "id" : "d1a1eb94-8100-4771-bffc-9f507135ee47",
    "prId" : 5614,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1194a3b1-f8aa-4bf6-bcbf-c66a3835cf75",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "shouldn't harm, though I don't know why those flags are needed, they should all be default on 64 bit\n",
        "createdAt" : "2015-02-27T17:58:21Z",
        "updatedAt" : "2015-02-27T17:58:21Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "599bf41d-89d9-4118-972d-7a51f630eb90",
        "parentId" : "1194a3b1-f8aa-4bf6-bcbf-c66a3835cf75",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Could you look at #5615 and indicate which flags can go? There is a `core2` arch flag floating around also which looks suspicious to me. \n",
        "createdAt" : "2015-02-27T18:39:28Z",
        "updatedAt" : "2015-02-27T18:39:28Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "17624eaa-3b91-425a-a242-5941214e23c2",
        "parentId" : "1194a3b1-f8aa-4bf6-bcbf-c66a3835cf75",
        "authorId" : "1fe7fd54-b162-47df-bf12-2c7ad3cd88d3",
        "body" : "I guess the `-march` flags can go away, as the gcc-4.9 defaults should do. I will do some more testing. I will also try to remove the patch on system_info.py, as it seems to be a configuration issue. I needed this after install of `Visual C++ for Python`.\n",
        "createdAt" : "2015-03-02T15:00:21Z",
        "updatedAt" : "2015-03-02T15:00:21Z",
        "lastEditedBy" : "1fe7fd54-b162-47df-bf12-2c7ad3cd88d3",
        "tags" : [
        ]
      },
      {
        "id" : "7a248ecb-cf08-4c9b-96fc-174225722f90",
        "parentId" : "1194a3b1-f8aa-4bf6-bcbf-c66a3835cf75",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "@carlkl I'll put in the cleanups in #5615 so that you can make further fixups on top of that.\n",
        "createdAt" : "2015-03-02T16:01:30Z",
        "updatedAt" : "2015-03-02T16:01:30Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "5dafe2ef-2f67-4cf8-b75b-2a85f55c48f3",
        "parentId" : "1194a3b1-f8aa-4bf6-bcbf-c66a3835cf75",
        "authorId" : "1fe7fd54-b162-47df-bf12-2c7ad3cd88d3",
        "body" : "After numerous tests with different combinations of gcc flags I came to the conclusion, that the settings for the gcc flags in the PR seems to be almost correct. `-march=x86-64 -mtune=generic` is recommended for amd64 usage. `-march=core2 -mtune=generic` could be changed to `-march=pentium4 -mtune=generic`.\n",
        "createdAt" : "2015-03-09T15:19:48Z",
        "updatedAt" : "2015-03-09T15:19:48Z",
        "lastEditedBy" : "1fe7fd54-b162-47df-bf12-2c7ad3cd88d3",
        "tags" : [
        ]
      }
    ],
    "commit" : "444b5ac1eb8d0e2bfe548770af3ab8e6af846832",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +137,141 @@                self.set_executables(\n                    compiler='gcc -march=x86-64 -mtune=generic -DMS_WIN64 -O2 -msse2 -Wall',\n                    compiler_so='gcc -march=x86-64 -mtune=generic -DMS_WIN64 -O2 -msse2 -Wall -Wstrict-prototypes',\n                    linker_exe='gcc',\n                    linker_so='gcc -shared -Wl,-gc-sections -Wl,-s')"
  },
  {
    "id" : "2a5fadee-bd9c-43c7-9c7c-8a2855db8d44",
    "prId" : 6354,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90592203-4b98-4a17-96e9-e08b62e9b818",
        "parentId" : null,
        "authorId" : "7ff2710f-0a12-46fb-a54a-d405dab78cf7",
        "body" : "Comment here about when each of these strings appear? \n",
        "createdAt" : "2015-09-24T23:18:38Z",
        "updatedAt" : "2015-09-24T23:18:38Z",
        "lastEditedBy" : "7ff2710f-0a12-46fb-a54a-d405dab78cf7",
        "tags" : [
        ]
      },
      {
        "id" : "58beff55-b9ef-4d5b-aa7f-1e4db6b94d86",
        "parentId" : "90592203-4b98-4a17-96e9-e08b62e9b818",
        "authorId" : "c4c04c9e-519b-4e97-b79a-9f5cb25a523a",
        "body" : "It would be nice if we could warn rather than fail when an different mingw is used.\n",
        "createdAt" : "2015-09-25T01:07:36Z",
        "updatedAt" : "2015-09-25T01:15:51Z",
        "lastEditedBy" : "c4c04c9e-519b-4e97-b79a-9f5cb25a523a",
        "tags" : [
        ]
      },
      {
        "id" : "a37d24f9-ea27-47ef-9b42-1b3ed0338437",
        "parentId" : "90592203-4b98-4a17-96e9-e08b62e9b818",
        "authorId" : "1fe7fd54-b162-47df-bf12-2c7ad3cd88d3",
        "body" : "The strings appear with either vanilla mingw-w64: `MinGW-W64` or with mingwpy: `mingwpy`. In both cases `build_import_library()` shouldn't be called, see comment above in the code.\n",
        "createdAt" : "2015-09-25T07:58:45Z",
        "updatedAt" : "2015-09-25T12:43:01Z",
        "lastEditedBy" : "1fe7fd54-b162-47df-bf12-2c7ad3cd88d3",
        "tags" : [
        ]
      },
      {
        "id" : "d33eb943-3a85-42a7-a5e8-f3598d9e7c92",
        "parentId" : "90592203-4b98-4a17-96e9-e08b62e9b818",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Line may also be too long. You can put the expression in `(...)` and split it over two lines if needed. \n",
        "createdAt" : "2015-09-25T17:36:03Z",
        "updatedAt" : "2015-09-25T17:36:03Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b354c005ccfe961e793ec4567e9cf6bbdca1b5f2",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +99,103 @@        # Don't call build_import_library() and build_msvcr_library.\n\n        if 'MinGW-W64' not in str(out_string) and 'mingwpy' not in str(out_string):\n\n            # **changes: eric jones 4/11/01"
  },
  {
    "id" : "0f5fd779-6535-47a8-8fe7-3189cd82f475",
    "prId" : 6354,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3b24466-871a-4e6d-bc78-2685d356bb3e",
        "parentId" : null,
        "authorId" : "c4c04c9e-519b-4e97-b79a-9f5cb25a523a",
        "body" : "Why `-march=pentium4`?\n",
        "createdAt" : "2015-09-25T01:15:31Z",
        "updatedAt" : "2015-09-25T01:15:31Z",
        "lastEditedBy" : "c4c04c9e-519b-4e97-b79a-9f5cb25a523a",
        "tags" : [
        ]
      },
      {
        "id" : "b75b226d-5851-4b5b-9954-ca44f6fe817d",
        "parentId" : "c3b24466-871a-4e6d-bc78-2685d356bb3e",
        "authorId" : "1fe7fd54-b162-47df-bf12-2c7ad3cd88d3",
        "body" : "`-march=pentium4` garantuees that no SSE3 instructions or higher will be created. This is not the case with `core2`. Thus it is the most generic option to compile numpy. \nPlease keep in mind, that the most performance critical part of numpy is handled by the OpenBLAS library. This library chooses at runtime the best availabe instruction set according to the CPU type and supports multithreaded execution of BLAS functions as well.\n",
        "createdAt" : "2015-09-25T08:03:51Z",
        "updatedAt" : "2015-09-25T12:42:26Z",
        "lastEditedBy" : "1fe7fd54-b162-47df-bf12-2c7ad3cd88d3",
        "tags" : [
        ]
      }
    ],
    "commit" : "b354c005ccfe961e793ec4567e9cf6bbdca1b5f2",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +160,164 @@                # incompatibility to Win32 ABI\n                self.set_executables(\n                    compiler='gcc -O2 -march=pentium4 -mtune=generic'\n                             ' -mfpmath=sse -msse2 -mlong-double-64'\n                             ' -mincoming-stack-boundary=2 -Wall',"
  },
  {
    "id" : "0739cd94-c696-4b66-8fe7-3147f69dcc6d",
    "prId" : 8355,
    "prUrl" : "https://github.com/numpy/numpy/pull/8355#pullrequestreview-12184457",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "230d2d49-fc70-4e60-9914-6649689a8839",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Is cygwin still a thing?",
        "createdAt" : "2016-12-09T03:43:58Z",
        "updatedAt" : "2016-12-12T11:51:00Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "df246aca-4c2b-4085-9093-e86d4d2e1ff3",
        "parentId" : "230d2d49-fc70-4e60-9914-6649689a8839",
        "authorId" : "08e4396b-6d44-418f-88ac-e8b7f6afd136",
        "body" : "It has been a long time since I've seen something relevant in that area, but the MinGW adapter uses the CygWin adapter as a base, so in this regard it is more like a shackle that needs to be dusted and polished. (I'll try to submit these changes upstream to CPython as well, but it'll take some time until those changes can be relied upon to be in the base distribution)",
        "createdAt" : "2016-12-09T08:21:06Z",
        "updatedAt" : "2016-12-12T11:51:00Z",
        "lastEditedBy" : "08e4396b-6d44-418f-88ac-e8b7f6afd136",
        "tags" : [
        ]
      }
    ],
    "commit" : "21eeac2ebffd88461ae95e9d0dd487b12fab993e",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +47,51 @@# monkey-patch cygwinccompiler with our updated version from misc_util\n# to avoid getting an exception raised on Python 3.5\ndistutils.cygwinccompiler.get_msvcr = get_msvcr_replacement\n\n# Useful to generate table of symbols from a dll"
  },
  {
    "id" : "33f39dc4-d600-4655-985a-411b47c68be1",
    "prId" : 13762,
    "prUrl" : "https://github.com/numpy/numpy/pull/13762#pullrequestreview-248588990",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "139f1336-0e8e-42b8-a3fc-ddaef0fb0733",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Are you sure `dedent` does the right thing here? That warning is scary. \r\n\r\nIf so, can the extremely long line be broken up  (as long as we are changing this)? I am a bit worried that since this is in mingw32compiler, this code is not well tested.",
        "createdAt" : "2019-06-12T07:29:05Z",
        "updatedAt" : "2019-06-12T07:29:05Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "e4b48aab-f967-43be-b7ad-dc569d3d8d33",
        "parentId" : "139f1336-0e8e-42b8-a3fc-ddaef0fb0733",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "I missed the warning, but yes, they're identical:\r\n\r\n```\r\nimport textwrap\r\nafter = textwrap.dedent(\"\"\"\\\r\n        <assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\">\r\n          <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\">\r\n            <security>\r\n              <requestedPrivileges>\r\n                <requestedExecutionLevel level=\"asInvoker\" uiAccess=\"false\"></requestedExecutionLevel>\r\n              </requestedPrivileges>\r\n            </security>\r\n          </trustInfo>\r\n          <dependency>\r\n            <dependentAssembly>\r\n              <assemblyIdentity type=\"win32\" name=\"Microsoft.VC%(maj)d%(min)d.CRT\" version=\"%(fullver)s\" processorArchitecture=\"*\" publicKeyToken=\"1fc8b3b9a1e18e3b\"></assemblyIdentity>\r\n            </dependentAssembly>\r\n          </dependency>\r\n        </assembly>\"\"\")\r\n\r\nbefore = \"\"\"\\\r\n<assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\">\r\n  <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\">\r\n    <security>\r\n      <requestedPrivileges>\r\n        <requestedExecutionLevel level=\"asInvoker\" uiAccess=\"false\"></requestedExecutionLevel>\r\n      </requestedPrivileges>\r\n    </security>\r\n  </trustInfo>\r\n  <dependency>\r\n    <dependentAssembly>\r\n      <assemblyIdentity type=\"win32\" name=\"Microsoft.VC%(maj)d%(min)d.CRT\" version=\"%(fullver)s\" processorArchitecture=\"*\" publicKeyToken=\"1fc8b3b9a1e18e3b\"></assemblyIdentity>\r\n    </dependentAssembly>\r\n  </dependency>\r\n</assembly>\"\"\"\r\n\r\nassert after == before\r\n```\r\n\r\nBreaking up the line is a fair bit harder without either changing its contents or undoing the benefit of the textwrap",
        "createdAt" : "2019-06-12T07:32:08Z",
        "updatedAt" : "2019-06-12T07:33:48Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "ba54a4ea-12d5-4050-9540-d4661bfef36d",
        "parentId" : "139f1336-0e8e-42b8-a3fc-ddaef0fb0733",
        "authorId" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "body" : "Also happy to revert this piece if you're worried.",
        "createdAt" : "2019-06-12T07:34:15Z",
        "updatedAt" : "2019-06-12T07:34:16Z",
        "lastEditedBy" : "ab55dc5f-f626-43b1-ba83-3d8843d79a45",
        "tags" : [
        ]
      },
      {
        "id" : "a94d3a4c-4d08-4d3b-9a7e-a123d3086a7e",
        "parentId" : "139f1336-0e8e-42b8-a3fc-ddaef0fb0733",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "ok, nevermind then",
        "createdAt" : "2019-06-12T07:34:34Z",
        "updatedAt" : "2019-06-12T07:34:35Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "f89414564743495ca9104400e9ab1a6ba0963e2e",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +587,591 @@            </dependentAssembly>\n          </dependency>\n        </assembly>\"\"\")\n\n    return template % {'fullver': fullver, 'maj': maj, 'min': min}"
  },
  {
    "id" : "391c59a3-fbba-46df-bde1-e37a41537ffd",
    "prId" : 15335,
    "prUrl" : "https://github.com/numpy/numpy/pull/15335#pullrequestreview-344171887",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cee7c8b6-8be5-44c3-9298-c468c1f3455b",
        "parentId" : null,
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "Why not prefer the relative import?",
        "createdAt" : "2020-01-16T04:55:18Z",
        "updatedAt" : "2020-01-20T23:42:30Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "09c3ccfe-ca55-42ca-86e0-7b02e253c5f4",
        "parentId" : "cee7c8b6-8be5-44c3-9298-c468c1f3455b",
        "authorId" : "90f9383b-5a2e-49ad-a731-13e6f7332b32",
        "body" : "I'm faithfully reproducing what the code simplifies to.\r\nlet's discuss this in the other comment.",
        "createdAt" : "2020-01-16T19:48:05Z",
        "updatedAt" : "2020-01-20T23:42:30Z",
        "lastEditedBy" : "90f9383b-5a2e-49ad-a731-13e6f7332b32",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a21ec857b22ff0140a7f71a12f2cc943f163404",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +16,20 @@# Overwrite certain distutils.ccompiler functions:\nimport numpy.distutils.ccompiler\nfrom numpy.distutils import log\n# NT stuff\n# 1. Make sure libpython<version>.a exists for gcc.  If not, build it."
  }
]