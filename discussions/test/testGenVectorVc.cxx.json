[
  {
    "id" : "b24a0f93-910a-4ded-a1a5-666ca0212e5b",
    "prId" : 394,
    "prUrl" : "https://github.com/root-project/root/pull/394#pullrequestreview-26853499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da1ec840-8761-4fb4-98cd-584872ebf9d3",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "I am wondering if we could assert if the performance of the vectorized code is not better from the non-vectorized (of course in some margins)?\r\n\r\nOut of curiosity: how much did the vectorized code gain here?",
        "createdAt" : "2017-03-14T14:50:01Z",
        "updatedAt" : "2017-03-14T21:53:45Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "90020e0a-1c97-4765-b646-f6f5041f494c",
        "parentId" : "da1ec840-8761-4fb4-98cd-584872ebf9d3",
        "authorId" : "cf191428-9992-4975-b348-0858da11a417",
        "body" : "The point of that test was not to check CPU performance, but to assert that the same results are obtained in both cases. Note in that test the two containers have exactly the same number of entries, so the time to compute each should be more or less the same. The advantage from Vc comes from the fact each entry in  the Vc container is infact a vector type, so has internally `Vc::double_v::Size` data entries in it, that are being processed in parallel. So the effective speed up is a factor of this vector size. I guess if you like some sort of speed check could be added.\r\n\r\nI actually gave a talk on this to a small LHCb meeting last week. I'll happily upload the sides here. The bottom line is for the nice idealised case I get effectively the perfect speed up from the SIMD address sizes (so 2,4 or 8 depending on the SIMD instruction set used and double or float).\r\n\r\n[VectorRayTracing-06032017.pdf](https://github.com/root-project/root/files/841721/VectorRayTracing-06032017.pdf)",
        "createdAt" : "2017-03-14T14:57:28Z",
        "updatedAt" : "2017-03-14T21:53:45Z",
        "lastEditedBy" : "cf191428-9992-4975-b348-0858da11a417",
        "tags" : [
        ]
      },
      {
        "id" : "31ebc7b1-ca7e-41e3-b4ce-db4c638029e6",
        "parentId" : "da1ec840-8761-4fb4-98cd-584872ebf9d3",
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Thanks for explaining! Nice slides! I'd appreciate it if you could add a speed check. Makes me much more comfortable and makes it clear (from history point of view) what is the value of this PR.",
        "createdAt" : "2017-03-14T15:01:59Z",
        "updatedAt" : "2017-03-14T21:53:45Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "c9c5f4b7-8553-4af7-bc10-5d3eadca9ceb",
        "parentId" : "da1ec840-8761-4fb4-98cd-584872ebf9d3",
        "authorId" : "cf191428-9992-4975-b348-0858da11a417",
        "body" : "OK. It will probably make sense to do it as separate test, as to properly measure the time gain needs a different setup to that test. Can you point me at examples of how you measure execution time in the root tests, are there examples where this is done ?",
        "createdAt" : "2017-03-14T16:07:24Z",
        "updatedAt" : "2017-03-14T21:53:45Z",
        "lastEditedBy" : "cf191428-9992-4975-b348-0858da11a417",
        "tags" : [
        ]
      }
    ],
    "commit" : "1786383c4665cd6b1325d961139f0e4e3531afa4",
    "line" : 363,
    "diffHunk" : "@@ -1,1 +361,365 @@      std::cerr << \"test FAILED !!! \" << std::endl;\n   else\n      std::cout << \"test OK \" << std::endl;\n   return ret;\n}"
  },
  {
    "id" : "5eb9d6ba-1d23-476e-a95a-984a4a2e6bd7",
    "prId" : 394,
    "prUrl" : "https://github.com/root-project/root/pull/394#pullrequestreview-27055168",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16d04269-36f8-4bc4-ab0c-f9a732951ae2",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "@cjones051073 it seems that we omitted transforming this code here as a default template parameter.",
        "createdAt" : "2017-03-15T11:08:17Z",
        "updatedAt" : "2017-03-15T11:09:47Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "b7df10c6-f1a9-4ff2-aca1-c1417351bec3",
        "parentId" : "16d04269-36f8-4bc4-ab0c-f9a732951ae2",
        "authorId" : "cf191428-9992-4975-b348-0858da11a417",
        "body" : "Indeed, I over looked these instances of enable_if. will change them.",
        "createdAt" : "2017-03-15T11:34:35Z",
        "updatedAt" : "2017-03-15T11:34:35Z",
        "lastEditedBy" : "cf191428-9992-4975-b348-0858da11a417",
        "tags" : [
        ]
      },
      {
        "id" : "5328f0c5-3f5f-425f-9cc5-7ea548d4be46",
        "parentId" : "16d04269-36f8-4bc4-ab0c-f9a732951ae2",
        "authorId" : "cf191428-9992-4975-b348-0858da11a417",
        "body" : "Done. I guess I should open a new PR for this small fix, as this one is closed.",
        "createdAt" : "2017-03-15T11:53:06Z",
        "updatedAt" : "2017-03-15T11:53:06Z",
        "lastEditedBy" : "cf191428-9992-4975-b348-0858da11a417",
        "tags" : [
        ]
      },
      {
        "id" : "671b78f6-7e8c-4a5e-8bf9-6d151e631fc8",
        "parentId" : "16d04269-36f8-4bc4-ab0c-f9a732951ae2",
        "authorId" : "cf191428-9992-4975-b348-0858da11a417",
        "body" : "Done. see PR #427.",
        "createdAt" : "2017-03-15T12:02:24Z",
        "updatedAt" : "2017-03-15T12:02:24Z",
        "lastEditedBy" : "cf191428-9992-4975-b348-0858da11a417",
        "tags" : [
        ]
      }
    ],
    "commit" : "1786383c4665cd6b1325d961139f0e4e3531afa4",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +101,105 @@template <typename POINT, typename VECTOR, typename FTYPE>\ninline\n   typename std::enable_if<std::is_arithmetic<typename POINT::Scalar>::value &&\n                              std::is_arithmetic<typename VECTOR::Scalar>::value && std::is_arithmetic<FTYPE>::value,\n                           bool>::type"
  },
  {
    "id" : "bc0881dc-fff7-494e-bdde-21deb308790f",
    "prId" : 394,
    "prUrl" : "https://github.com/root-project/root/pull/394#pullrequestreview-27045959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd0a8383-caa6-4cdc-98d2-bbca3da5a6b9",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "And here.",
        "createdAt" : "2017-03-15T11:08:31Z",
        "updatedAt" : "2017-03-15T11:09:47Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "1786383c4665cd6b1325d961139f0e4e3531afa4",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +127,131 @@template <typename POINT, typename VECTOR, typename FTYPE>\ninline\n   typename std::enable_if<!std::is_arithmetic<typename POINT::Scalar>::value &&\n                              !std::is_arithmetic<typename VECTOR::Scalar>::value && !std::is_arithmetic<FTYPE>::value,\n                           typename FTYPE::mask_type>::type"
  },
  {
    "id" : "51a31553-8770-40fb-bf4f-a5620dc0cece",
    "prId" : 394,
    "prUrl" : "https://github.com/root-project/root/pull/394#pullrequestreview-27045959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe499c34-1b07-4d93-b68c-bf5ec80b0abd",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "And here.",
        "createdAt" : "2017-03-15T11:08:41Z",
        "updatedAt" : "2017-03-15T11:09:47Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "1786383c4665cd6b1325d961139f0e4e3531afa4",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +156,160 @@\ntemplate <typename POINT, typename VECTOR, typename PLANE>\ninline typename std::enable_if<std::is_arithmetic<typename POINT::Scalar>::value &&\n                                  std::is_arithmetic<typename VECTOR::Scalar>::value &&\n                                  std::is_arithmetic<typename PLANE::Scalar>::value,"
  },
  {
    "id" : "edae831d-6c11-4812-b62c-f55d6a016778",
    "prId" : 394,
    "prUrl" : "https://github.com/root-project/root/pull/394#pullrequestreview-27045959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea8323f9-fe5e-48fa-8cda-f45d3bd0c95e",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "And here.",
        "createdAt" : "2017-03-15T11:08:50Z",
        "updatedAt" : "2017-03-15T11:09:47Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      }
    ],
    "commit" : "1786383c4665cd6b1325d961139f0e4e3531afa4",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +176,180 @@\ntemplate <typename POINT, typename VECTOR, typename PLANE, typename FTYPE = typename POINT::Scalar>\ninline typename std::enable_if<!std::is_arithmetic<typename POINT::Scalar>::value &&\n                                  !std::is_arithmetic<typename VECTOR::Scalar>::value &&\n                                  !std::is_arithmetic<typename PLANE::Scalar>::value,"
  }
]