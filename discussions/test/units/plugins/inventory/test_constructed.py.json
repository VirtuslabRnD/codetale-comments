[
  {
    "id" : "8602d4e0-00ab-4772-bf75-ec0841540c70",
    "prId" : 52045,
    "prUrl" : "https://github.com/ansible/ansible/pull/52045#pullrequestreview-210474516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "911787f0-acdb-4e0c-88ef-0235b5420c36",
        "parentId" : null,
        "authorId" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "body" : "I'm not testing use of \"unsafe\" separators anymore, but I still thought there was value in testing separators in general within the unit tests.\r\n\r\nIt was tough coming up with examples of separators that make sense without using special characters. So this is what you get.",
        "createdAt" : "2019-03-05T03:00:42Z",
        "updatedAt" : "2019-03-05T12:06:14Z",
        "lastEditedBy" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "tags" : [
        ]
      },
      {
        "id" : "d22db7d9-a81c-4f29-8aca-b1775e25b4fc",
        "parentId" : "911787f0-acdb-4e0c-88ef-0235b5420c36",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "cow puns welcome!",
        "createdAt" : "2019-03-05T03:08:52Z",
        "updatedAt" : "2019-03-05T12:06:14Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "aae44a9a484315b9a9685ac616ca6b6a9f093027",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +73,77 @@        keyed_groups, host.vars, host.name, strict=False\n    )\n    for group_name in ('farmer_old_mcdonald', 'mmmmmmmmmmcowmmmmmmmmmmbetsy'):\n        assert group_name in inventory_module.inventory.groups\n        group = inventory_module.inventory.groups[group_name]"
  },
  {
    "id" : "d086caca-06a9-4a3b-a3de-8ee6021e2003",
    "prId" : 53649,
    "prUrl" : "https://github.com/ansible/ansible/pull/53649#pullrequestreview-213538787",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf7570bc-3bba-4cc1-bf9a-5d4c8e5dd82b",
        "parentId" : null,
        "authorId" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "body" : "Given the location where the exception is raised, I don't think you should need to call `_add_host_to_keyed_groups` a second time.\r\n\r\nIn the event of the template error, the group `betsy` should still be created, but without any parent groups, because `{{ location.barn-yard }}` couldn't be evaluated. I think this behavior is ideal.\r\n\r\nSometimes, a key will only be present for some hosts, but not others. In that case, you may still want to apply the first level of grouping, but no apply the grandparent group.",
        "createdAt" : "2019-03-12T14:32:10Z",
        "updatedAt" : "2019-03-12T17:15:50Z",
        "lastEditedBy" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "tags" : [
        ]
      },
      {
        "id" : "59586ad1-fc04-4bc8-9453-e42ce74ff2ce",
        "parentId" : "cf7570bc-3bba-4cc1-bf9a-5d4c8e5dd82b",
        "authorId" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "body" : "I'm not really sure what the harm is in checking that strict=False allows parent groups that can't be templated to be ignored.",
        "createdAt" : "2019-03-12T15:39:58Z",
        "updatedAt" : "2019-03-12T17:15:50Z",
        "lastEditedBy" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "tags" : [
        ]
      },
      {
        "id" : "a1e211e1-9311-4819-a081-7d7a1def40cd",
        "parentId" : "cf7570bc-3bba-4cc1-bf9a-5d4c8e5dd82b",
        "authorId" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "body" : "> I'm not really sure what the harm is in checking that strict=False allows parent groups that can't be templated to be ignored.\r\n\r\nYes, I agree, what I'm saying is that L164-L166 is not doing this.\r\n\r\nI would say that you could do that as a separate test without loss of meaning, but other things are broken... `inventory_module` really shouldn't be module scope, since multiple tests are using the same names. If that scope was taken away, then you could meaningfully test the strict=False case in another isolated test.\r\n\r\nI'm just saying that the way you've written this test, running with strict=False creates the same stuff as running with strict=True. It's just distracting that an exception is being caught. Just because the exception was caught doesn't mean the inventory content wasn't created.",
        "createdAt" : "2019-03-12T16:14:56Z",
        "updatedAt" : "2019-03-12T17:15:50Z",
        "lastEditedBy" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "tags" : [
        ]
      },
      {
        "id" : "0e7cc39d-6ff1-48c3-8948-07e7caf474af",
        "parentId" : "cf7570bc-3bba-4cc1-bf9a-5d4c8e5dd82b",
        "authorId" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "body" : "I also don't think you necessary need to test that separately, just deleting those lines would effectively test it, but wouldn't have this confusion.",
        "createdAt" : "2019-03-12T16:22:10Z",
        "updatedAt" : "2019-03-12T17:15:50Z",
        "lastEditedBy" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "tags" : [
        ]
      },
      {
        "id" : "b54f4774-1d08-4f66-84f1-386c6f95bfe6",
        "parentId" : "cf7570bc-3bba-4cc1-bf9a-5d4c8e5dd82b",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "I'm not sure i agree, if the definition of the compose clause is wrong, all the actions of that clause should be skipped (when strict is false, if true the whole plugin output should be reverted).",
        "createdAt" : "2019-03-12T16:54:38Z",
        "updatedAt" : "2019-03-12T17:15:50Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      },
      {
        "id" : "64db98b1-805b-4557-95d3-ee69308a39bc",
        "parentId" : "cf7570bc-3bba-4cc1-bf9a-5d4c8e5dd82b",
        "authorId" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "body" : "Hm... Ok, I've moved it so the failure happens before adding any groups and test that the group is never added.",
        "createdAt" : "2019-03-12T17:16:10Z",
        "updatedAt" : "2019-03-12T17:16:11Z",
        "lastEditedBy" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "tags" : [
        ]
      },
      {
        "id" : "00802e7c-8379-4cb2-a68e-405f7046482f",
        "parentId" : "cf7570bc-3bba-4cc1-bf9a-5d4c8e5dd82b",
        "authorId" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "body" : "> if true the whole plugin output should be reverted\r\n\r\nI was aware of a RFE to have the inventory loader revert its work for a particular source in the list if an error occurs. The last I knew of this, it was not yet a thing.\r\n\r\nIf this was a thing, then I would expect an assertion after the try-except block which establishes that the \"betsy\" group does not exist.\r\n\r\nFor these tests, it's easier to avoid the question of the existence or non-existence of that feature, either by testing only 1 scenario, or breaking it out into 2 mutually isolated tests.",
        "createdAt" : "2019-03-12T17:16:36Z",
        "updatedAt" : "2019-03-12T17:16:36Z",
        "lastEditedBy" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "tags" : [
        ]
      },
      {
        "id" : "63a76446-e283-48ef-a969-0d4a75581b88",
        "parentId" : "cf7570bc-3bba-4cc1-bf9a-5d4c8e5dd82b",
        "authorId" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "body" : "the global revert is a bug, which we have to fix, but the general behaviour should always be the same, if you have an incorrect definition, fail the whole grouping, don't do partials ... strict=false allows for other definitions to continue but the user must explicitly ask for that.",
        "createdAt" : "2019-03-12T17:26:32Z",
        "updatedAt" : "2019-03-12T17:26:33Z",
        "lastEditedBy" : "30fc1801-f8f1-4cc4-9690-e31e203f4f6d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d50718383763f34e961ec8818b1ae01b5e8981cf",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +165,169 @@    inventory_module._add_host_to_keyed_groups(\n        keyed_groups, host.vars, host.name, strict=False\n    )\n    # assert group was never added with invalid parent\n    assert 'betsy' not in inventory_module.inventory.groups"
  }
]