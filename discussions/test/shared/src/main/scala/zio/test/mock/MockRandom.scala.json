[
  {
    "id" : "64bdcb41-340a-4b4f-84df-ed6c5d6d413f",
    "prId" : 1306,
    "prUrl" : "https://github.com/zio/zio/pull/1306#pullrequestreview-269776057",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac5b8279-b389-4788-bd23-3a723d4fa0c9",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Is this code original or derived? If derived, we should include credit, copyright notice, and make sure the license is Apache 2 compliant.",
        "createdAt" : "2019-08-01T02:01:05Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "3bbf73f2-4769-4928-98a3-a382897e93c1",
        "parentId" : "ac5b8279-b389-4788-bd23-3a723d4fa0c9",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "It is based on `java.util.Random`. It looks like that is available under the GNU General Public License version 2. Does that work? Is there an example of including that information somewhere else in the project I could work off of?",
        "createdAt" : "2019-08-01T02:28:38Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "3fc53ce5-561a-4fb2-ac3a-cf1204c5e481",
        "parentId" : "ac5b8279-b389-4788-bd23-3a723d4fa0c9",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Unfortunately, we cannot include any GPL code. BSD/MIT/Apache 2 are all good licenses and we can incorporate that code with proper attribution and copyright notices.\r\n\r\nZIO is mostly original but there is some derived stuff here:\r\n\r\n<https://github.com/zio/zio/blob/master/core/shared/src/main/scala/zio/Semaphore.scala>",
        "createdAt" : "2019-08-01T14:04:09Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "1e07d4b7-56bd-477f-8178-1532ee0882ae",
        "parentId" : "ac5b8279-b389-4788-bd23-3a723d4fa0c9",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Okay, I could use some guidance on how to proceed here. Right now I'm trying to generate the same sequence of random numbers as `scala.util.Random` for a given seed, which is great for testing to make sure we don't have subtle bugs in our random number generator but means there are necessarily going to be significant similarities between our implementations. The underlying random number generator is a linear congruential generator based on Knuth's The Art of Computer Programming and the algorithm for generating random Gaussians is the polar method from Box and Muller also described in Knuth. Is it sufficient to describe that or do we need to go back to the drawing board here?",
        "createdAt" : "2019-08-01T14:22:33Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "db6e5d00-5f78-4af9-9859-5a9ff7821ed3",
        "parentId" : "ac5b8279-b389-4788-bd23-3a723d4fa0c9",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Hmm, tough situation. Here are the options I see:\r\n\r\n1. A clean room implementation following `Knuth`, without reference to the JDK source code.\r\n2. Possibly another project like [Apache RNG](http://commons.apache.org/proper/commons-math/javadocs/api-3.6.1/org/apache/commons/math3/random/package-summary.html) has something already pre-written (also [here](https://github.com/encog/encog-java-core/blob/master/src/main/java/org/encog/mathutil/randomize/generate/LinearCongruentialRandom.java), [here](https://www.rosettacode.org/wiki/Knuth_shuffle), [here](https://typelevel.org/cats/datatypes/state.html))\r\n\r\n",
        "createdAt" : "2019-08-01T14:33:17Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "0f099241-3fc1-4f60-8441-fb2be2c43a7a",
        "parentId" : "ac5b8279-b389-4788-bd23-3a723d4fa0c9",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "What if we wrap `java.util.Random` in a `private` `Ref`? I think I can give us the same interface and hide the mutability. Otherwise I can do the second option.",
        "createdAt" : "2019-08-01T14:36:43Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "b2a14f58-0c5f-4f43-a3db-679035f40919",
        "parentId" : "ac5b8279-b389-4788-bd23-3a723d4fa0c9",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "That should work!",
        "createdAt" : "2019-08-01T14:37:34Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "1f9adc68-ced1-4317-91d4-30c8603fd95b",
        "parentId" : "ac5b8279-b389-4788-bd23-3a723d4fa0c9",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Oh wait, it will not be purely functional. Let me see if there's a hook we can use to get access into the (deterministic) random generator inside `java.util.Random`.",
        "createdAt" : "2019-08-01T14:38:16Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "8017b9f2-b9fe-4a83-8340-315ab77d3f18",
        "parentId" : "ac5b8279-b389-4788-bd23-3a723d4fa0c9",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Oh, I just found this:\r\n\r\n<https://github.com/scala-js/scala-js/blob/master/javalib/src/main/scala/java/util/Random.scala>\r\n\r\nStill looking though...",
        "createdAt" : "2019-08-01T14:40:42Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "476c70de-1ece-4b33-ace8-194ce11b1bb4",
        "parentId" : "ac5b8279-b389-4788-bd23-3a723d4fa0c9",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "All right, we can [get the seed](https://gist.github.com/wookietreiber/cb9117c9fb747be3fa270242302bd073) on the JVM using reflection.\r\n\r\nThis means we could construct a `new Random(seed)`, get the next random, get the new seed, and update the seed, all atomically inside a `Ref`.\r\n\r\nSo the `Ref` approach (delegating to `java.util.Random`) would be viable for JVM.\r\n\r\nIt would not work for Scala.js, though. \r\n\r\nI think our best option may be basing our work off the Scala.js implementation, which is Apache 2 licensed, and then providing proper attribution and copyright notice on that file. \r\n\r\nWhat do you think?",
        "createdAt" : "2019-08-01T14:44:58Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "cec95778-6439-487b-b576-71015c2be455",
        "parentId" : "ac5b8279-b389-4788-bd23-3a723d4fa0c9",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Yes I think that makes sense. The Scala.js implementation is very similar to our existing one. The main difference is they break the seed down into two 24 bit parts instead of storing the seed as a 48 bit long, but the code for methods like `nextBytes` and `nextGaussian` is the same.\r\n",
        "createdAt" : "2019-08-01T14:56:01Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "3cb706e4-addd-45fc-9fa0-ec2e364d3929",
        "parentId" : "ac5b8279-b389-4788-bd23-3a723d4fa0c9",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Looking from [the history](https://github.com/scala-js/scala-js/commit/4053f3a18fc7efc6c96b117bfc9fff6c7852dec6#diff-29a10fbf90dbeb23b7016d48d5411d99) it looks to be an original implementation; and if it's licensed with Apache 2, then it cannot be derived from the GPL implementation. Of course the math is the same, no way around that, but previous rulings of courts have decided in cases where there is only one \"obvious\" way to produce a desired result, a novel implementation is not subject to copyright infringement.",
        "createdAt" : "2019-08-01T15:48:22Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "b013ec4f-53b4-4eff-9a1d-5b9a05b9c6f6",
        "parentId" : "ac5b8279-b389-4788-bd23-3a723d4fa0c9",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Thanks for your guidance on this!",
        "createdAt" : "2019-08-01T17:17:43Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "42683d0b-190c-4eb7-894a-8c4d0268cd2b",
        "parentId" : "ac5b8279-b389-4788-bd23-3a723d4fa0c9",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Happy to help!",
        "createdAt" : "2019-08-01T17:42:12Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9ce5584f0d0bca75a4127812e4accd5fa9a729c",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +49,53 @@\n    def nextBytes(length: Int): UIO[Chunk[Byte]] = {\n      //  Our RNG generates 32 bit integers so to maximize efficieny we want to\n      //  pull 8 bit bytes from the current integer until it is exhausted\n      //  before generating another random integer"
  },
  {
    "id" : "70b3ce30-9513-4c46-9f37-3f9f876019f3",
    "prId" : 1306,
    "prUrl" : "https://github.com/zio/zio/pull/1306#pullrequestreview-269369865",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5b79676-88cf-4bd6-b1f9-ca9cc1e392df",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "We have no `nextLong(n: Long)`. Do you think that would be hard to add?",
        "createdAt" : "2019-08-01T02:04:23Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "8af212ce-d57f-44c3-9e54-5333b81ae167",
        "parentId" : "b5b79676-88cf-4bd6-b1f9-ca9cc1e392df",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Shouldn't be a problem at all.",
        "createdAt" : "2019-08-01T02:29:03Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9ce5584f0d0bca75a4127812e4accd5fa9a729c",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +99,103 @@      next(32)\n\n    def nextInt(n: Int): UIO[Int] =\n      if (n <= 0)\n        UIO.die(new IllegalArgumentException(\"n must be positive\"))"
  },
  {
    "id" : "aadfe84b-6e8f-4f26-b873-20f4f5f0cc3a",
    "prId" : 1306,
    "prUrl" : "https://github.com/zio/zio/pull/1306#pullrequestreview-269835279",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d5c2886-f547-4486-beb6-8739b0dcc8ca",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "👍 ",
        "createdAt" : "2019-08-01T19:36:20Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9ce5584f0d0bca75a4127812e4accd5fa9a729c",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1,5 @@/*\n * Copyright 2017-2019 John A. De Goes and the ZIO Contributors\n * Copyright 2014-2019 EPFL\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");"
  },
  {
    "id" : "d73c6b7c-8403-4539-b010-05344fb7d84f",
    "prId" : 1306,
    "prUrl" : "https://github.com/zio/zio/pull/1306#pullrequestreview-269835581",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccbc2064-b3b5-46c8-b8e6-c26313fc9bc2",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "👍 ",
        "createdAt" : "2019-08-01T19:36:56Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9ce5584f0d0bca75a4127812e4accd5fa9a729c",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +35,39 @@\n  /**\n   * Adapted from @gzmo work in Scala.js (https://github.com/scala-js/scala-js/pull/780)\n   */\n  case class Mock(randomState: Ref[Data]) extends MockRandom.Service[Any] {"
  },
  {
    "id" : "a86b381f-4de6-4858-bdf1-88f3f1c0408b",
    "prId" : 1306,
    "prUrl" : "https://github.com/zio/zio/pull/1306#pullrequestreview-269874861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e01852e-e946-4955-ae4f-84770b893cea",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Did you push this up into `Random.Service`?",
        "createdAt" : "2019-08-01T19:39:16Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "32bd53d8-2b29-4b1a-b96e-4f0e333b934c",
        "parentId" : "7e01852e-e946-4955-ae4f-84770b893cea",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "No. Shall I do that?",
        "createdAt" : "2019-08-01T19:40:44Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "791751b4-dd71-46b8-9067-9c4b05003c12",
        "parentId" : "7e01852e-e946-4955-ae4f-84770b893cea",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Yes, please! 🙏 ",
        "createdAt" : "2019-08-01T19:42:33Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "9d3cad51-5880-46d3-897d-57ba587daeb8",
        "parentId" : "7e01852e-e946-4955-ae4f-84770b893cea",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Done!",
        "createdAt" : "2019-08-01T20:57:03Z",
        "updatedAt" : "2019-08-01T21:06:42Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9ce5584f0d0bca75a4127812e4accd5fa9a729c",
    "line" : 190,
    "diffHunk" : "@@ -1,1 +114,118 @@      }\n\n    val nextLong: UIO[Long] =\n      for {\n        i1 <- next(32)"
  }
]