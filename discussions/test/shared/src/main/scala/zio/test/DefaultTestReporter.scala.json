[
  {
    "id" : "d8e9f04d-b282-4762-8ce6-ee310444ffb0",
    "prId" : 2923,
    "prUrl" : "https://github.com/zio/zio/pull/2923#pullrequestreview-367789067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2360952e-df9c-40fe-aea9-3fa4d8ebd2f3",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "It would be nice to push more of the logic in this file into the `diff` package so the test reporter is really just handing over an actual and expected value and getting back what it should render.",
        "createdAt" : "2020-02-20T16:15:00Z",
        "updatedAt" : "2020-03-03T16:44:29Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "c77cdbb0-96e8-42fc-9565-f9170526adcf",
        "parentId" : "2360952e-df9c-40fe-aea9-3fa4d8ebd2f3",
        "authorId" : "1ca841ad-cf41-4d4d-ab0f-56c3559e6a2f",
        "body" : "I would love to split `DefaultTestReporter` into to parts, where one translates test results into a simple (ish) domain model representing notions like assertion failures and diffs but without any markup stuff like lines, offsets and ANSI colors.\r\nThis would be useful for JUnitRunner and IDE integration @hmemcpy is working on, I think. \r\nAnd rendering with colors and offsets would be done by a different class.\r\n\r\nBut I think this should probably be a separate PR \r\n",
        "createdAt" : "2020-03-03T08:41:18Z",
        "updatedAt" : "2020-03-03T16:44:29Z",
        "lastEditedBy" : "1ca841ad-cf41-4d4d-ab0f-56c3559e6a2f",
        "tags" : [
        ]
      },
      {
        "id" : "e0399a34-bb9c-4637-91f1-591c8203bf7e",
        "parentId" : "2360952e-df9c-40fe-aea9-3fa4d8ebd2f3",
        "authorId" : "1ca841ad-cf41-4d4d-ab0f-56c3559e6a2f",
        "body" : "I did move `FailureRenderer`, `MessageMarkup` and `DiffRenderer` out into their own files.",
        "createdAt" : "2020-03-03T08:44:30Z",
        "updatedAt" : "2020-03-03T16:44:29Z",
        "lastEditedBy" : "1ca841ad-cf41-4d4d-ab0f-56c3559e6a2f",
        "tags" : [
        ]
      }
    ],
    "commit" : "47da27be3be48c233c917b5301b306d022c9bc6d",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +18,22 @@\nimport scala.io.AnsiColor\n\nimport zio.duration.Duration\nimport zio.test.ConsoleUtils.{ cyan, red, _ }"
  },
  {
    "id" : "8c835ac8-c4b3-49ef-93d0-844c0cb0da2e",
    "prId" : 1918,
    "prUrl" : "https://github.com/zio/zio/pull/1918#pullrequestreview-298227623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "179b3728-4577-4614-89ab-5d5c39174063",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Is it possible for `specs` to be empty? Aren't we defaulting to running all the tests if the filter predicate isn't matching any tests? I don't think we need to make any changes to this file, though I could be wrong.",
        "createdAt" : "2019-10-07T13:32:39Z",
        "updatedAt" : "2019-10-07T18:46:53Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "d50dd37b-b1ac-4a8b-9196-bb2c25445bc5",
        "parentId" : "179b3728-4577-4614-89ab-5d5c39174063",
        "authorId" : "0676ff00-bbe5-4a0f-8ff4-791926933b92",
        "body" : "This addition isn't really for when the root Suite's specs are empty. It's more for the nested Suites below that. If we don't have this, then you get output like:\r\n\r\n```\r\n+ ZScheduleSpec\r\n  + Repeat on success according to a provided strategy\r\n  + Collect all inputs into a list\r\n  + Repeat an action 2 times and call `ensuring` should\r\n  + Retry on failure according to a provided strategy\r\n    + retry 0 time for `once` when first time succeeds\r\n  + Retry according to a provided strategy\r\n  + Return the result of the fallback after failing and no more retries left\r\n  + Return the result after successful retry\r\n  + Retry a failed action 2 times and call `ensuring` should\r\n```\r\n\r\nas opposed to:\r\n\r\n```\r\n+ ZScheduleSpec\r\n  + Retry on failure according to a provided strategy\r\n    + retry 0 time for `once` when first time succeeds\r\n```\r\n\r\nI much prefer the latter (only show the selected nodes). Well, you could color the ignored specs gray or something, but it's still a lot of noise in my opinion. Especially for large specs where you would have to scroll to see the part you care about.",
        "createdAt" : "2019-10-07T15:38:41Z",
        "updatedAt" : "2019-10-07T18:46:53Z",
        "lastEditedBy" : "0676ff00-bbe5-4a0f-8ff4-791926933b92",
        "tags" : [
        ]
      },
      {
        "id" : "dbb43c64-697c-487d-b0d7-9c30af77ef16",
        "parentId" : "179b3728-4577-4614-89ab-5d5c39174063",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Got it. That makes sense.",
        "createdAt" : "2019-10-07T15:45:21Z",
        "updatedAt" : "2019-10-07T18:46:53Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbb64efea13e92d36f2df8d550609e730405f2d3",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +41,45 @@            hasFailures = failures.exists(identity)\n            status      = if (hasFailures) Failed else Passed\n            renderedLabel = if (specs.isEmpty) \"\"\n            else if (hasFailures) renderFailureLabel(label, depth)\n            else renderSuccessLabel(label, depth)"
  },
  {
    "id" : "53a8774e-b42c-4ee1-a57c-d6f021a695f7",
    "prId" : 1830,
    "prUrl" : "https://github.com/zio/zio/pull/1830#pullrequestreview-295963285",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "586068bc-cf26-4282-862a-f18ca7a813b0",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Now that we have #1706 merged I would suggest using `dieOption` here.",
        "createdAt" : "2019-10-02T00:48:17Z",
        "updatedAt" : "2019-10-03T09:53:52Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd97ec4e77d31441e6fcd174abf36cbafa3dbe55",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +145,149 @@    else \" did not satisfy \"\n\n  private def renderCause(cause: Cause[Any], offset: Int): String =\n    cause.dieOption match {\n      case Some(TestTimeoutException(message)) => message"
  },
  {
    "id" : "e7965ba3-eab5-41c6-a55f-f4e660c12b2f",
    "prId" : 1664,
    "prUrl" : "https://github.com/zio/zio/pull/1664#pullrequestreview-296715237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6904f646-f0d9-47ac-85e3-4c7465b653ca",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Fixed to sequential here",
        "createdAt" : "2019-10-02T23:19:01Z",
        "updatedAt" : "2019-10-03T14:25:53Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "c35925cf-1910-41e7-92b2-6bd48c83a140",
        "parentId" : "6904f646-f0d9-47ac-85e3-4c7465b653ca",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Similar thought to the above that since we've already run the tests we don't need parallelism in rendering the results.",
        "createdAt" : "2019-10-03T08:31:50Z",
        "updatedAt" : "2019-10-03T14:25:53Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "575f2a3e67704b91d7e3cf8e6a227fd7ba625d6f",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +42,46 @@            status        = if (hasFailures) Failed else Passed\n            renderedLabel = if (hasFailures) renderFailureLabel(label, depth) else renderSuccessLabel(label, depth)\n            rest          <- UIO.foreach(specs)(loop(_, depth + tabSize)).map(_.flatten)\n          } yield rendered(Suite, label, status, depth, renderedLabel) +: rest\n        case Spec.TestCase(label, result) =>"
  },
  {
    "id" : "90f9bc2c-7ca7-4249-af96-c6c9b33c1b31",
    "prId" : 1664,
    "prUrl" : "https://github.com/zio/zio/pull/1664#pullrequestreview-296715473",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87a3a936-5d0d-46fb-89f2-0ae13a6dab43",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Fixed to sequential here",
        "createdAt" : "2019-10-02T23:19:08Z",
        "updatedAt" : "2019-10-03T14:25:53Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "9ac88265-f7d9-425f-829c-56c332c489ea",
        "parentId" : "87a3a936-5d0d-46fb-89f2-0ae13a6dab43",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Same as above.",
        "createdAt" : "2019-10-03T08:32:20Z",
        "updatedAt" : "2019-10-03T14:25:53Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "575f2a3e67704b91d7e3cf8e6a227fd7ba625d6f",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +35,39 @@          for {\n            specs <- executedSpecs\n            failures <- UIO.foreach(specs)(_.exists {\n                         case Spec.TestCase(_, test) => test.map(_.isLeft);\n                         case _                      => UIO.succeed(false)"
  },
  {
    "id" : "a69cb88d-f6bb-48ba-a5a1-805bd951a556",
    "prId" : 1438,
    "prUrl" : "https://github.com/zio/zio/pull/1438#pullrequestreview-280157579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3665b004-f577-49db-8a9b-4e3dfe317b3f",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I think we can keep these `E` and `S` for now, although they could be `Any`, with the idea that eventually our test reporter may require something that can do something with an `E` or `S`.",
        "createdAt" : "2019-08-27T13:10:55Z",
        "updatedAt" : "2019-08-31T01:34:31Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "655bd32fcc5c8743fdc7579c8c386e81985d7a51",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +26,30 @@object DefaultTestReporter {\n\n  def render[E, S](executedSpec: ExecutedSpec[String, E, S]): Seq[RenderedResult] = {\n    def loop(executedSpec: ExecutedSpec[String, E, S], depth: Int): Seq[RenderedResult] =\n      executedSpec.caseValue match {"
  }
]