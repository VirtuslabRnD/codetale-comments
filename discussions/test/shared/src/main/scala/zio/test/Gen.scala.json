[
  {
    "id" : "0b477d66-5c46-41bf-92c2-124ec81fcbb9",
    "prId" : 5144,
    "prUrl" : "https://github.com/zio/zio/pull/5144#pullrequestreview-668551674",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89df1b0f-aac2-4061-af89-987c4425fe44",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Stray change?",
        "createdAt" : "2021-05-25T16:11:16Z",
        "updatedAt" : "2021-05-25T16:12:43Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "9f21f04d-156a-45ae-b19d-353703ca8cac",
        "parentId" : "89df1b0f-aac2-4061-af89-987c4425fe44",
        "authorId" : "9d77fce2-77f9-4dce-a4a0-2f8dbb2256aa",
        "body" : "Minor refactoring.\r\nShouldn't I commit this change in this PR?",
        "createdAt" : "2021-05-26T01:51:07Z",
        "updatedAt" : "2021-05-26T01:51:07Z",
        "lastEditedBy" : "9d77fce2-77f9-4dce-a4a0-2f8dbb2256aa",
        "tags" : [
        ]
      },
      {
        "id" : "3e036dd6-4e59-4523-ad6b-dcd562ccca42",
        "parentId" : "89df1b0f-aac2-4061-af89-987c4425fe44",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "No need to add additional parentheses to code that is already compiling.",
        "createdAt" : "2021-05-26T01:53:28Z",
        "updatedAt" : "2021-05-26T01:53:28Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "f2b33a79-5bcc-4d1f-aed7-71f0c01613c7",
        "parentId" : "89df1b0f-aac2-4061-af89-987c4425fe44",
        "authorId" : "9d77fce2-77f9-4dce-a4a0-2f8dbb2256aa",
        "body" : "Yeah, I removed unnecessary parentheses.",
        "createdAt" : "2021-05-26T02:25:04Z",
        "updatedAt" : "2021-05-26T02:25:04Z",
        "lastEditedBy" : "9d77fce2-77f9-4dce-a4a0-2f8dbb2256aa",
        "tags" : [
        ]
      },
      {
        "id" : "c513a1ba-f801-4cba-8dfa-22b9ccc2ba71",
        "parentId" : "89df1b0f-aac2-4061-af89-987c4425fe44",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "👍 ",
        "createdAt" : "2021-05-26T02:43:34Z",
        "updatedAt" : "2021-05-26T02:43:34Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbda9a60c00997bd26e7db35c7b84ed8e6c2df59",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +87,91 @@   */\n  def filterNot(f: A => Boolean): Gen[R, A] =\n    filter(a => !f(a))\n\n  def withFilter(f: A => Boolean): Gen[R, A] = filter(f)"
  },
  {
    "id" : "aebb921f-0f41-4966-86aa-1d8ef687ce8f",
    "prId" : 5144,
    "prUrl" : "https://github.com/zio/zio/pull/5144#pullrequestreview-668533422",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8fb7f54-96d9-4d6b-b80a-3d134790f6d0",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Stray change?",
        "createdAt" : "2021-05-25T16:11:39Z",
        "updatedAt" : "2021-05-25T16:12:43Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "0f3ef658-c462-4bf2-aa48-dc3f5a5dd5e0",
        "parentId" : "f8fb7f54-96d9-4d6b-b80a-3d134790f6d0",
        "authorId" : "9d77fce2-77f9-4dce-a4a0-2f8dbb2256aa",
        "body" : "Minor refactoring.\r\nShouldn't I commit this change in this PR?",
        "createdAt" : "2021-05-26T01:51:27Z",
        "updatedAt" : "2021-05-26T01:51:27Z",
        "lastEditedBy" : "9d77fce2-77f9-4dce-a4a0-2f8dbb2256aa",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbda9a60c00997bd26e7db35c7b84ed8e6c2df59",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +502,506 @@  def fromIterable[R, A](\n    as: Iterable[A],\n    shrinker: A => ZStream[R, Nothing, A] = defaultShrinker\n  ): Gen[R, A] =\n    Gen(ZStream.fromIterable(as).map(a => Sample.unfold(a)(a => (a, shrinker(a)))))"
  },
  {
    "id" : "51a17a3a-365a-4687-8a56-032c4763feee",
    "prId" : 4723,
    "prUrl" : "https://github.com/zio/zio/pull/4723#pullrequestreview-600086527",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47685d9e-c8f1-4154-8237-8c3ca8699000",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Can we alphabetize please? Otherwise looks great!",
        "createdAt" : "2021-02-25T01:44:27Z",
        "updatedAt" : "2021-02-26T07:20:48Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "2f156a78-f32a-4d94-977c-e935a33e3ce5",
        "parentId" : "47685d9e-c8f1-4154-8237-8c3ca8699000",
        "authorId" : "e0600056-f078-4af3-9a0e-ae36d218d13d",
        "body" : "Sorry, didn't get what you mean.\r\nAlphabetize random char generator? ",
        "createdAt" : "2021-02-25T20:32:47Z",
        "updatedAt" : "2021-02-26T07:20:48Z",
        "lastEditedBy" : "e0600056-f078-4af3-9a0e-ae36d218d13d",
        "tags" : [
        ]
      },
      {
        "id" : "022f55fa-c6ad-4f2d-aa40-df9c8785ccde",
        "parentId" : "47685d9e-c8f1-4154-8237-8c3ca8699000",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Oh sorry. Just put the constructors in alphabetical order with all the existing constructors. So like right now `whiteSpaceChars` is near the top of the file above the existing `alphaNumericString` generator but it should be towards the end of the file after the `weighted` constructor. It doesn't actually change the logic of your implementation but just makes it easier for users and contributors to find things in the file, especially when it is a large one like this one.",
        "createdAt" : "2021-02-25T20:56:07Z",
        "updatedAt" : "2021-02-26T07:20:48Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "239bd030-b949-44e2-8a41-71286f91b64f",
        "parentId" : "47685d9e-c8f1-4154-8237-8c3ca8699000",
        "authorId" : "e0600056-f078-4af3-9a0e-ae36d218d13d",
        "body" : "Ok, I think now they are alphabetized:)",
        "createdAt" : "2021-02-27T06:16:34Z",
        "updatedAt" : "2021-02-27T06:16:34Z",
        "lastEditedBy" : "e0600056-f078-4af3-9a0e-ae36d218d13d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b48b74a8e6a2127bb111d58baa4b357c3c5d74cd",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +179,183 @@   * A generator of alpha characters.\n   */\n  val alphaChar: Gen[Random, Char] =\n    weighted(char(65, 90) -> 26, char(97, 122) -> 26)\n"
  },
  {
    "id" : "96420391-d317-44ff-8b4c-c8b2e61e28e1",
    "prId" : 3079,
    "prUrl" : "https://github.com/zio/zio/pull/3079#pullrequestreview-400433884",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1759eead-171d-4367-8cf3-1ccc3fe9c81e",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "@adamgfraser Please double-check this",
        "createdAt" : "2020-04-25T21:42:40Z",
        "updatedAt" : "2020-04-29T14:59:48Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4670a4bd36299d913393472199b238ce8371a07",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +152,156 @@    val left  = self.sample.map(Right(_)) ++ self.sample.map(Left(_)).forever\n    val right = that.sample.map(Right(_)) ++ that.sample.map(Left(_)).forever\n    left.zipAllWith(right)(l => (Some(l), None), r => (None, Some(r)))((l, r) => (Some(l), Some(r))).collectWhile {\n      case (Some(Right(l)), Some(Right(r))) => l.zipWith(r)(f)\n      case (Some(Right(l)), Some(Left(r)))  => l.zipWith(r)(f)"
  },
  {
    "id" : "8eeaf461-3018-4368-b989-a78fd5ff8a38",
    "prId" : 2582,
    "prUrl" : "https://github.com/zio/zio/pull/2582#pullrequestreview-338531902",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34c23a7d-99aa-4348-8d4e-4af5d4772456",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Another name I've seen in the wild is `range`, but this is as good as any.",
        "createdAt" : "2020-01-06T09:08:17Z",
        "updatedAt" : "2020-01-07T15:46:53Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "397bcf5ea4fb88289588a72344451119ec764107",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +259,263 @@   * A generator whose size falls within the specified bounds.\n   */\n  def bounded[R <: Random, A](min: Int, max: Int)(f: Int => Gen[R, A]): Gen[R, A] =\n    int(min, max).flatMap(f)\n"
  },
  {
    "id" : "e200a348-f78d-4114-9f5d-26159e30f23a",
    "prId" : 1901,
    "prUrl" : "https://github.com/zio/zio/pull/1901#pullrequestreview-297326275",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8648372-e546-4af3-9b0c-66338e8ba7ea",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Turned into a `def` to avoid initialisation failures.",
        "createdAt" : "2019-10-04T08:23:10Z",
        "updatedAt" : "2019-10-04T08:23:10Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "57f11536fb2dfe70a3c6ea14b37814e91a4284f0",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +144,148 @@   * A generator of strings. Shrinks towards the empty string.\n   */\n  final def anyString: Gen[Random with Sized, String] =\n    Gen.string(Gen.anyUnicodeChar)\n"
  },
  {
    "id" : "9aa636b8-7b5e-4d0d-9fcd-eed011fe1fc7",
    "prId" : 1901,
    "prUrl" : "https://github.com/zio/zio/pull/1901#pullrequestreview-297392120",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa562bec-ed1e-4454-8380-526d87472bd3",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "This definitely works but in the future could be simplified to `Gen.char`.",
        "createdAt" : "2019-10-04T09:50:10Z",
        "updatedAt" : "2019-10-04T09:50:10Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "fcb5ed62-0162-4d1d-9713-231c5c24fdac",
        "parentId" : "fa562bec-ed1e-4454-8380-526d87472bd3",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Oh, I didn't see that. Yeah that's much better and safer.",
        "createdAt" : "2019-10-04T10:35:45Z",
        "updatedAt" : "2019-10-04T10:35:45Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "57f11536fb2dfe70a3c6ea14b37814e91a4284f0",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +153,157 @@   */\n  final val anyUnicodeChar: Gen[Random, Char] = {\n    def unicodeRange(min: Int, max: Int): Gen[Random, Char] =\n      fromEffectSample {\n        // 0xFFFF and 0xFFFE are not characters in the Unicode standard."
  },
  {
    "id" : "d22978cf-968e-41fd-a841-b40a86e3908b",
    "prId" : 1901,
    "prUrl" : "https://github.com/zio/zio/pull/1901#pullrequestreview-297391202",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8015fc79-2275-4208-8497-d91fc1e98cf1",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Be careful about shrinking logic here. We want to make sure that shrinks obey the invariants of the generator. Here we would shrink to `0` even if the minimum value in the range is not equal to `0`. It doesn't matter in this case because this is a `private` method and it is being called with a `0` minimum value but just a heads up.",
        "createdAt" : "2019-10-04T09:55:00Z",
        "updatedAt" : "2019-10-04T09:55:01Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "4ae69630-542d-4cdf-9c57-89d2eb634a64",
        "parentId" : "8015fc79-2275-4208-8497-d91fc1e98cf1",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "ah that makes sense, I should use `min` instead here. Will update 👍 ",
        "createdAt" : "2019-10-04T10:33:33Z",
        "updatedAt" : "2019-10-04T10:33:33Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "57f11536fb2dfe70a3c6ea14b37814e91a4284f0",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +159,163 @@        nextInt(max - min + 1)\n          .map(r => (min + r).toChar)\n          .map(Sample.shrinkIntegral(0))\n      }\n"
  },
  {
    "id" : "3cd4833d-1149-4b62-b78b-c17b031be160",
    "prId" : 1640,
    "prUrl" : "https://github.com/zio/zio/pull/1640#pullrequestreview-287633045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f72f53d-9d10-456f-9898-fbdd15a75f3a",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Perfect default for the common case...",
        "createdAt" : "2019-09-12T18:47:08Z",
        "updatedAt" : "2019-09-12T18:47:09Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "6838dc845c81c15be9420c51ece88ecc750f8b15",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +289,293 @@\n  final def listOf[R <: Random with Sized, A](g: Gen[R, A]): Gen[R, List[A]] =\n    small(listOfN(_)(g))\n\n  final def listOf1[R <: Random with Sized, A](g: Gen[R, A]): Gen[R, List[A]] ="
  },
  {
    "id" : "94e862d8-584d-426b-bd0a-39bcb09175c0",
    "prId" : 1625,
    "prUrl" : "https://github.com/zio/zio/pull/1625#pullrequestreview-285242819",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62eea7da-1041-42fb-98e7-7fff8d737cf9",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Nice thinking. 👍 ",
        "createdAt" : "2019-09-09T00:03:15Z",
        "updatedAt" : "2019-09-09T00:52:42Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "355ec658a8ff327966b6b1bd2e70f889679742fd",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +76,80 @@   * to generate it.\n   */\n  final def reshrink[R1 <: R, B](f: A => Sample[R1, B]): Gen[R1, B] =\n    Gen(sample.map(sample => f(sample.value)))\n"
  },
  {
    "id" : "efd07aaf-0d03-4c34-84bc-b96f56b99648",
    "prId" : 1356,
    "prUrl" : "https://github.com/zio/zio/pull/1356#pullrequestreview-273303468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e01955ed-8a39-4ced-b224-6c39a64f8174",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Useful to add `float`, `short`, `long`, etc. Maybe the bounded variants, but also: `anyDouble`, `anyChar`, `anyShort`, `anyLong`, `anyFloat`, etc.",
        "createdAt" : "2019-08-07T09:37:22Z",
        "updatedAt" : "2019-08-15T01:04:25Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "c2a12b03-5752-424e-9d03-667154d5fd43",
        "parentId" : "e01955ed-8a39-4ced-b224-6c39a64f8174",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Yes. One potential issue with the bounded variants for types like `Long` and `Double` is that they are \"bigger\" than the `Int` that underlies range. I wonder if we should roll our own simple range for this so we can be consistent across numeric types or just use something like `min`, `max`, `step`.",
        "createdAt" : "2019-08-09T18:44:16Z",
        "updatedAt" : "2019-08-15T01:04:25Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1cdaeef05487990444f3c426ca7c279d9befa53d",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +145,149 @@   * The shrinker will shrink toward the lower end of the range (\"smallest\").\n   */\n  final def double(min: Double, max: Double): Gen[Random, Double] =\n    uniform.map { r =>\n      val n = min + r * (max - min)"
  },
  {
    "id" : "7e9ddfde-b94b-418c-983c-081468d893eb",
    "prId" : 1356,
    "prUrl" : "https://github.com/zio/zio/pull/1356#pullrequestreview-273303616",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3333e7d5-9dad-4110-b335-d9840701d37b",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Probably you can refactor the `min: Int, max: Int` to be a `Range` like the other combinators you introduced.",
        "createdAt" : "2019-08-07T09:38:07Z",
        "updatedAt" : "2019-08-15T01:04:25Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "15830919-11d3-4985-9fd9-231bafd0fea9",
        "parentId" : "3333e7d5-9dad-4110-b335-d9840701d37b",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Yes.",
        "createdAt" : "2019-08-09T18:44:32Z",
        "updatedAt" : "2019-08-15T01:04:25Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1cdaeef05487990444f3c426ca7c279d9befa53d",
    "line" : 251,
    "diffHunk" : "@@ -1,1 +247,251 @@   * A sized generator, whose size falls within the specified bounds.\n   */\n  final def sized[R <: Random, A](min: Int, max: Int)(f: Int => Gen[R, A]): Gen[R, A] =\n    int(min, max).flatMap(f)\n"
  }
]