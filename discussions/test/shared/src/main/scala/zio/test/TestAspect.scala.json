[
  {
    "id" : "c8cdd44c-52b9-4e27-84ed-ded060566517",
    "prId" : 2513,
    "prUrl" : "https://github.com/zio/zio/pull/2513#pullrequestreview-335833985",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f0e5208-9fbc-425c-8bc4-c18b74d6da7d",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Do we need the second `Restorable` here? I thought this would be written as \"An aspect that restores a given [[zio.test.environment.Restorable]]'s state to its start state after the test is run.\", but I could be wrong. Similar question for the changes below.",
        "createdAt" : "2019-12-22T21:53:04Z",
        "updatedAt" : "2019-12-23T13:55:08Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "f91ac891-4677-46e5-8edf-83db0e21125e",
        "parentId" : "9f0e5208-9fbc-425c-8bc4-c18b74d6da7d",
        "authorId" : "c1fa4691-a9ec-468f-aa7a-8ece92d03a06",
        "body" : "[[zio.test.environment.Restorable]] is rendered as `zio.test.environment.Restorable` in the scaladoc html, [[zio.test.environment.Restorable Restorable]] is rendered as `Restorable`, which makes the text flow a bit better",
        "createdAt" : "2019-12-23T10:57:37Z",
        "updatedAt" : "2019-12-23T13:55:08Z",
        "lastEditedBy" : "c1fa4691-a9ec-468f-aa7a-8ece92d03a06",
        "tags" : [
        ]
      },
      {
        "id" : "d183fc11-0dc1-4907-a473-117487dfd337",
        "parentId" : "9f0e5208-9fbc-425c-8bc4-c18b74d6da7d",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Ah, great.",
        "createdAt" : "2019-12-23T12:06:55Z",
        "updatedAt" : "2019-12-23T13:55:08Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9857dda8fe0c0a24941b3ad11e138ae8ab79c0a6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +405,409 @@\n  /**\n   * An aspect that restores a given [[zio.test.environment.Restorable Restorable]]'s state to its starting state\n   * after the test is run.\n   * Note that this is only useful when repeating tests."
  },
  {
    "id" : "3e87c2b0-f4d9-49a6-9d12-5fee43020679",
    "prId" : 2335,
    "prUrl" : "https://github.com/zio/zio/pull/2335#pullrequestreview-323465152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02c0f8af-b7a0-49c1-a798-ef0ac3c5154e",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "can be removed",
        "createdAt" : "2019-11-27T07:12:49Z",
        "updatedAt" : "2019-11-27T07:12:49Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "660f3d597830ba51299e4392892bd2fc4361ed89",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +301,305 @@              }\n          }\n          //value\n          //.filter(assertion.test)\n          x.flatMap { y =>"
  },
  {
    "id" : "c8400e21-ed27-4b6e-8061-9292e070fa22",
    "prId" : 2170,
    "prUrl" : "https://github.com/zio/zio/pull/2170#pullrequestreview-313411996",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "703b15fa-c134-485f-99f7-f0c58fc077f8",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "I'd add `def flaky(n: Int)` and then define `val flaky = flaky(100)`.",
        "createdAt" : "2019-11-07T15:02:44Z",
        "updatedAt" : "2019-11-07T15:12:28Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "d5c86008-0065-47b2-b6b5-4bba90e147b8",
        "parentId" : "703b15fa-c134-485f-99f7-f0c58fc077f8",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Good idea!",
        "createdAt" : "2019-11-07T15:14:42Z",
        "updatedAt" : "2019-11-07T15:14:43Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0877f18d5e64cf32accc81f5ed58b94f860cfd6a",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +274,278 @@   * with flaky tests.\n   */\n  val flaky: TestAspectPoly =\n    flaky(100)\n"
  },
  {
    "id" : "bf39ece2-73c3-4c38-a9a2-9c1da8403972",
    "prId" : 2145,
    "prUrl" : "https://github.com/zio/zio/pull/2145#pullrequestreview-310875232",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f77940b2-efc6-4d5a-833d-76eb44a6369e",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Looks cleaner and more symmetrical now. ‚ù§Ô∏è ",
        "createdAt" : "2019-11-04T04:20:46Z",
        "updatedAt" : "2019-11-04T05:11:05Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "9741c4916a2c2eb6452e3498df56bcee7afc14ac",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +109,113 @@    new TestAspect.PerTest[Nothing, Any, Nothing, Any, Nothing, Any] {\n      def perTest[R >: Nothing <: Any, E >: Nothing <: Any, S >: Nothing <: Any](\n        test: ZIO[R, TestFailure[E], TestSuccess[S]]\n      ): ZIO[R, TestFailure[E], TestSuccess[S]] =\n        ZIO.succeed(TestSuccess.Ignored)"
  },
  {
    "id" : "2ef0d423-6257-48dd-8241-c4fc5c8033f4",
    "prId" : 2145,
    "prUrl" : "https://github.com/zio/zio/pull/2145#pullrequestreview-310875435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05beb168-6a8c-443f-ad61-af6d03f0cb2a",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Looks much simpler.",
        "createdAt" : "2019-11-04T04:22:37Z",
        "updatedAt" : "2019-11-04T05:11:05Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "9741c4916a2c2eb6452e3498df56bcee7afc14ac",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +241,245 @@              )\n          },\n          _ => ZIO.fail(TestFailure.Runtime(zio.Cause.die(new RuntimeException(\"did not fail as expected\"))))\n        )\n      }"
  },
  {
    "id" : "ebfc9064-040d-4f85-8f9d-52f83e80dff5",
    "prId" : 2145,
    "prUrl" : "https://github.com/zio/zio/pull/2145#pullrequestreview-310875487",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2b3bd9d-e49f-4256-af4e-219c4e8aa020",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "‚ù§Ô∏è ‚ù§Ô∏è ‚ù§Ô∏è ",
        "createdAt" : "2019-11-04T04:23:03Z",
        "updatedAt" : "2019-11-04T05:11:05Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "9741c4916a2c2eb6452e3498df56bcee7afc14ac",
    "line" : 231,
    "diffHunk" : "@@ -1,1 +370,374 @@        test: ZIO[R, TestFailure[E], TestSuccess[S]]\n      ): ZIO[R, TestFailure[E], TestSuccess[S]] =\n        test.retry(schedule)\n    }\n"
  },
  {
    "id" : "86cc0704-f944-457d-a637-31901e056439",
    "prId" : 2140,
    "prUrl" : "https://github.com/zio/zio/pull/2140#pullrequestreview-310918064",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4a0ed47-ded7-4b2b-ad20-4609e8f54e02",
        "parentId" : null,
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Not that I don't appreciate this change, far from it, but why didn't you use default arguments, of course, in the original function declaration, like so:\r\n\r\n`def nonFlaky(n0: Int = 100): TestAspectPoly = ???`",
        "createdAt" : "2019-11-04T07:44:21Z",
        "updatedAt" : "2019-11-04T07:44:26Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      },
      {
        "id" : "98873368-1db5-4731-8775-bd7ad3276bdb",
        "parentId" : "b4a0ed47-ded7-4b2b-ad20-4609e8f54e02",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "If you do that then you would need to call the method as `nonFlaky()` instead of `nonFlaky`. That is somewhat irregular (no other test aspect is called that way and it gives the impression that it is possibly an impure method) so I think it is nicer to do it this way, especially when it is only a few extra lines of code.",
        "createdAt" : "2019-11-04T07:59:06Z",
        "updatedAt" : "2019-11-04T07:59:06Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "c5ebf798-ed15-45b6-bc5d-783c17b02b7c",
        "parentId" : "b4a0ed47-ded7-4b2b-ad20-4609e8f54e02",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Well, you answered my question üòÑ ",
        "createdAt" : "2019-11-04T08:17:42Z",
        "updatedAt" : "2019-11-04T08:17:42Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ea05eba7312156f678446e2fff17c855ae0a531",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +345,349 @@   */\n  val nonFlaky: TestAspectPoly =\n    nonFlaky(100)\n\n  /**"
  },
  {
    "id" : "9d6a737d-ba5b-4379-9218-9efadb5ef59f",
    "prId" : 2095,
    "prUrl" : "https://github.com/zio/zio/pull/2095#pullrequestreview-310791911",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c37077c-1315-4339-8a0c-a500d5257ef9",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Nice. ‚ù§Ô∏è ",
        "createdAt" : "2019-11-02T22:47:52Z",
        "updatedAt" : "2019-11-02T22:47:53Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9a0aeb4140e48f6d933542b280ec4f39284e824",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +193,197 @@   * An aspect that only runs tests on Dotty.\n   */\n  val dottyOnly: TestAspectPoly =\n    if (TestVersion.isDotty) identity else ignore\n"
  },
  {
    "id" : "38d42061-b2f6-4f2d-aa54-e1929ff5a31b",
    "prId" : 1824,
    "prUrl" : "https://github.com/zio/zio/pull/1824#pullrequestreview-293128430",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90695da0-9ad3-4da5-b9d0-da753bfc83ec",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Nice documentation!",
        "createdAt" : "2019-09-25T14:37:33Z",
        "updatedAt" : "2019-10-01T18:37:55Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d42e26996767f7ae8cac70a6a9aedfd2630a4396",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +309,313 @@\n  /**\n   * An aspect that times out tests using the specified duration.\n   * @param duration maximum test duration\n   * @param interruptDuration after test timeout will wait given duration for successful interruption"
  },
  {
    "id" : "4e144c00-be3f-4bae-8da9-4859526dd05b",
    "prId" : 1539,
    "prUrl" : "https://github.com/zio/zio/pull/1539#pullrequestreview-282337906",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a6f26c8-2c04-4157-a7c3-4d9fa00e0e77",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Beautiful",
        "createdAt" : "2019-09-01T10:38:42Z",
        "updatedAt" : "2019-09-02T10:45:44Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "47cac58e411fa300c027673df6e62ca75ea98447",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +236,240 @@   */\n  val jvmOnly: TestAspectPoly =\n    if (TestPlatform.isJVM) identity else ignore\n\n  /**"
  },
  {
    "id" : "585b38eb-cfe3-4101-88e0-325723230c6d",
    "prId" : 1488,
    "prUrl" : "https://github.com/zio/zio/pull/1488#pullrequestreview-279448076",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4512721-2f5f-41ef-b7a6-1e7e7591d2f7",
        "parentId" : null,
        "authorId" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "body" : "How about getting the live clock with `access` or `environment`, then `provide` it, so that we reuse the implementation of `retry`?",
        "createdAt" : "2019-08-26T07:35:30Z",
        "updatedAt" : "2019-08-26T08:28:42Z",
        "lastEditedBy" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "tags" : [
        ]
      },
      {
        "id" : "514a824c-7683-4df6-8075-843f0ba0b5b8",
        "parentId" : "b4512721-2f5f-41ef-b7a6-1e7e7591d2f7",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "I tried that but was struggling to make it work. The issue is that the schedule also has a `R` parameter other than `Clock` but as far as I am aware there isn't a method like `provide` to eliminate that requirement. So between not being able to eliminate the `R` requirements by providing them and the limitations on `provideSome` this was the best I could come up with.",
        "createdAt" : "2019-08-26T07:41:15Z",
        "updatedAt" : "2019-08-26T08:28:42Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "39a23a67-a608-476a-98d0-44432625126e",
        "parentId" : "b4512721-2f5f-41ef-b7a6-1e7e7591d2f7",
        "authorId" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "body" : "Oh yeah I see, there's no way to rebuild the R in `provideSome`...",
        "createdAt" : "2019-08-26T07:51:34Z",
        "updatedAt" : "2019-08-26T08:28:42Z",
        "lastEditedBy" : "73db9f28-01ba-4a29-946b-7a2ae5ac5350",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e6b1d4928ba8796f9e8dd0097441521895c8bd1",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +204,208 @@          )\n\n        schedule.initial.flatMap(loop)\n      }\n    }"
  },
  {
    "id" : "962997f2-0134-48e4-882c-0cb7f1732ee2",
    "prId" : 1488,
    "prUrl" : "https://github.com/zio/zio/pull/1488#pullrequestreview-279587283",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07207b86-99fc-4ad9-a23b-f633457f7e3b",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This is really interesting (get the environment, provide it on the inside, do an outside effect, lift that up to `Live`). \r\n\r\nIt makes me think we can have a combinator:\r\n\r\n```scala\r\ndef mockLive[R, R1, E, A](zio: ZIO[R, E, A])(f: IO[E, A] => ZIO[R with Live[R1], E, B]): ZIO[R, E, B] = \r\n  ZIO.environment[R].flatMap(r => Live.live(f(zio.provide(r))))\r\n```\r\n\r\nThen use it like so:\r\n\r\n```scala\r\nLive.mockLive(test, _timeout(duration))\r\n```\r\n\r\nI don't like the name and there may be an even more generic combinator for this....",
        "createdAt" : "2019-08-26T08:08:17Z",
        "updatedAt" : "2019-08-26T08:28:42Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "15751835-bfab-491c-b448-14ceaf14ed98",
        "parentId" : "07207b86-99fc-4ad9-a23b-f633457f7e3b",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Maybe something like?\r\n\r\n```scala\r\ndef withLive[R, R1, E, A, B](zio: ZIO[R, E, A])(f: IO[E, A] => ZIO[R1, E, B]): ZIO[R with Live[R1], E, B] =\r\n  ZIO.environment[R].flatMap(r => live(f(zio.provide(r))))\r\n```\r\n\r\nThe type inference on the second parameter seems to be pretty poor. I don't know if there is anything we can do about that.",
        "createdAt" : "2019-08-26T08:51:46Z",
        "updatedAt" : "2019-08-26T08:51:46Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "2dc9bf08-bb56-451a-9ce3-464dea2a254a",
        "parentId" : "07207b86-99fc-4ad9-a23b-f633457f7e3b",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "We can improve type inference.\r\n\r\nThere are a few options.\r\n\r\n### Option 1\r\n\r\nUse one parameter list and require that `R <: Live[R1]`.\r\n\r\n```scala\r\ndef withLive[R1, R <: Live[R1], E, A, B](zio: ZIO[R, E, A], f: IO[E, A] => ZIO[R1, E, B]): ZIO[R, E, B] =\r\n```\r\n\r\n### Option 2\r\n\r\nCreate a temporary class to allow incrementally introducing type parameters for each parameter list:\r\n\r\n```scala\r\ndef withLive[R, E, A](zio: ZIO[R, E, A]): WithLive[R, E, A] = \r\n  WithLive[R, E, A](zio)\r\n\r\nfinal case class WithLive[R, E, A](zio: ZIO[R, E, A]) {\r\n  def apply[R1, B](f: IO[E, A] => ZIO[R1, E, B]): ZIO[R with Live[R1], E, B] =\r\n    ZIO.environment[R].flatMap(r => live(f(zio.provide(r))))\r\n}\r\n```\r\n\r\n### Option 3\r\n\r\nFlip order so we can get `R1` before `R`. I don't think this will infer well so I won't right it (well, some parts of it will infer better, but overall worse).",
        "createdAt" : "2019-08-26T13:23:39Z",
        "updatedAt" : "2019-08-26T13:23:39Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e6b1d4928ba8796f9e8dd0097441521895c8bd1",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +222,226 @@      ): ZIO[R, E, TestResult] =\n        ZIO.environment[R].flatMap { r =>\n          Live.live(test.provide(r).timeout(duration)).map {\n            case None =>\n              Assertion"
  },
  {
    "id" : "f4f53f7b-724a-4dad-b489-001839bc6c3b",
    "prId" : 1488,
    "prUrl" : "https://github.com/zio/zio/pull/1488#pullrequestreview-280341656",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e07894f-0392-41d7-944a-ebb689503e42",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "It will be easier to eliminate this after #14 ",
        "createdAt" : "2019-08-27T17:05:17Z",
        "updatedAt" : "2019-08-27T17:05:17Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e6b1d4928ba8796f9e8dd0097441521895c8bd1",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +196,200 @@              schedule\n                .update(err, state)\n                .flatMap(\n                  decision =>\n                    if (decision.cont) Live.live(clock.sleep(decision.delay)) *> loop(decision.state)"
  },
  {
    "id" : "4e9e2560-8904-4490-9ec7-74ac900c463a",
    "prId" : 1438,
    "prUrl" : "https://github.com/zio/zio/pull/1438#pullrequestreview-280157579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d8fce7f-6763-41b7-b373-5c8632c02992",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This must have been fun. üòÜ ",
        "createdAt" : "2019-08-27T13:15:56Z",
        "updatedAt" : "2019-08-31T01:34:31Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "655bd32fcc5c8743fdc7579c8c386e81985d7a51",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +29,33 @@ * another, possibly enlarging the environment, error, or success type.\n */\ntrait TestAspect[+LowerR, -UpperR, +LowerE, -UpperE, +LowerS, -UpperS] { self =>\n\n  /**"
  },
  {
    "id" : "b362a432-92b1-4df3-8159-873da46bbcb3",
    "prId" : 1247,
    "prUrl" : "https://github.com/zio/zio/pull/1247#pullrequestreview-267190468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7b3d6ec-eac4-4869-a4d7-385196a28be5",
        "parentId" : null,
        "authorId" : "de89a48e-13a7-4516-a51d-dd4027b753b0",
        "body" : "I can compose this with a limit?",
        "createdAt" : "2019-07-26T13:29:18Z",
        "updatedAt" : "2019-07-27T12:49:28Z",
        "lastEditedBy" : "de89a48e-13a7-4516-a51d-dd4027b753b0",
        "tags" : [
        ]
      },
      {
        "id" : "b35b97c4-e40d-451b-be8e-4b183eba4658",
        "parentId" : "f7b3d6ec-eac4-4869-a4d7-385196a28be5",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Sure, e.g. `retry >>> timeout(60.seconds)`, but if you want something fancier, you're better off using `retry(schedule)`.",
        "createdAt" : "2019-07-26T13:31:31Z",
        "updatedAt" : "2019-07-27T12:49:28Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "4f494355-2065-4d1c-a073-26a1e39c4e55",
        "parentId" : "f7b3d6ec-eac4-4869-a4d7-385196a28be5",
        "authorId" : "de89a48e-13a7-4516-a51d-dd4027b753b0",
        "body" : "What I figured, just wanted to make sure :)",
        "createdAt" : "2019-07-26T13:31:59Z",
        "updatedAt" : "2019-07-27T12:49:28Z",
        "lastEditedBy" : "de89a48e-13a7-4516-a51d-dd4027b753b0",
        "tags" : [
        ]
      },
      {
        "id" : "8a337d7d-038f-414e-9074-070434f8e0cc",
        "parentId" : "f7b3d6ec-eac4-4869-a4d7-385196a28be5",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "You know how I _LOVE_ composability. üòâ ",
        "createdAt" : "2019-07-26T13:36:36Z",
        "updatedAt" : "2019-07-27T12:49:28Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "c517e4e5b96f63e3b899ef8bc7b3f25a0a418d3f",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +84,88 @@\n  /**\n   * An aspect that retries a test until success, without limit.\n   */\n  val eventually: TestAspectPoly ="
  },
  {
    "id" : "6505da01-62e8-4af2-bc3d-9e699eefa419",
    "prId" : 1247,
    "prUrl" : "https://github.com/zio/zio/pull/1247#pullrequestreview-267435691",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5483fd08-362e-4e6d-8fd6-087e0586bddd",
        "parentId" : null,
        "authorId" : "de89a48e-13a7-4516-a51d-dd4027b753b0",
        "body" : "You should be able to put a `@tailrec` here, no?",
        "createdAt" : "2019-07-26T13:48:41Z",
        "updatedAt" : "2019-07-27T12:49:28Z",
        "lastEditedBy" : "de89a48e-13a7-4516-a51d-dd4027b753b0",
        "tags" : [
        ]
      },
      {
        "id" : "a4b5b09d-660a-43fe-badd-db85813de98d",
        "parentId" : "5483fd08-362e-4e6d-8fd6-087e0586bddd",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "It's monadically tail recursive, so the compiler can't accept that as `@tailrec`.",
        "createdAt" : "2019-07-26T18:44:22Z",
        "updatedAt" : "2019-07-27T12:49:28Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "a3030ab8-2f22-4720-aaa4-e8d7447efa6a",
        "parentId" : "5483fd08-362e-4e6d-8fd6-087e0586bddd",
        "authorId" : "de89a48e-13a7-4516-a51d-dd4027b753b0",
        "body" : "Ah, that's true... ",
        "createdAt" : "2019-07-26T23:11:11Z",
        "updatedAt" : "2019-07-27T12:49:28Z",
        "lastEditedBy" : "de89a48e-13a7-4516-a51d-dd4027b753b0",
        "tags" : [
        ]
      }
    ],
    "commit" : "c517e4e5b96f63e3b899ef8bc7b3f25a0a418d3f",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +103,107 @@    new TestAspectPoly {\n      def apply[R >: Nothing <: Any, E >: Nothing <: Any](test: ZIO[R, E, TestResult]): ZIO[R, E, TestResult] = {\n        def repeat(n: Int): ZIO[R, E, TestResult] =\n          if (n <= 1) test\n          else"
  }
]