[
  {
    "id" : "3085fe0e-cea8-47b8-8c21-32472f2ff77c",
    "prId" : 2335,
    "prUrl" : "https://github.com/zio/zio/pull/2335#pullrequestreview-324195775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f5784f9-d455-477a-a179-2b2f35d1465d",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "👍 ",
        "createdAt" : "2019-11-28T10:36:42Z",
        "updatedAt" : "2019-11-28T10:36:42Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "660f3d597830ba51299e4392892bd2fc4361ed89",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +104,108 @@   * specified effectual function.\n   */\n  final def flatMapM[R, E, B](f: A => ZIO[R, E, BoolAlgebra[B]]): ZIO[R, E, BoolAlgebra[B]] =\n    fold(a => f(a))(_.zipWith(_)(_ && _), _.zipWith(_)(_ || _), _.map(!_))\n"
  },
  {
    "id" : "3c43c48b-6845-4903-a081-9b4740bddda4",
    "prId" : 2335,
    "prUrl" : "https://github.com/zio/zio/pull/2335#pullrequestreview-324195826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b286a90-0349-44fc-a169-f8b2de96c8ef",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "👍 ",
        "createdAt" : "2019-11-28T10:36:47Z",
        "updatedAt" : "2019-11-28T10:36:47Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "660f3d597830ba51299e4392892bd2fc4361ed89",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +162,166 @@   * function.\n   */\n  final def mapM[R, E, B](f: A => ZIO[R, E, B]): ZIO[R, E, BoolAlgebra[B]] =\n    flatMapM(a => f(a).map(success))\n"
  },
  {
    "id" : "c5fd9e56-ebd8-43e0-9a64-bb897e932ce3",
    "prId" : 1662,
    "prUrl" : "https://github.com/zio/zio/pull/1662#pullrequestreview-287768595",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c677b8e-0ff5-4a1a-916c-d6fca88ca0a8",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Nice. 😄 ",
        "createdAt" : "2019-09-13T00:30:06Z",
        "updatedAt" : "2019-09-13T00:30:06Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "9beea932713369f0edfe80903f1e98be8f0b6d55",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +120,124 @@   */\n  final def implies[A1 >: A](that: BoolAlgebra[A1]): BoolAlgebra[A1] =\n    !self || that\n\n  /**"
  },
  {
    "id" : "3592c684-0002-469b-8c80-a055cbcc14c0",
    "prId" : 1582,
    "prUrl" : "https://github.com/zio/zio/pull/1582#pullrequestreview-284748909",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "840a748f-58fe-4008-a3d5-efe7168193a0",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Do you need to go through `Either` here?",
        "createdAt" : "2019-09-06T09:08:04Z",
        "updatedAt" : "2019-09-12T09:47:41Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "a6196693-34ba-4320-97cb-2642284a16c4",
        "parentId" : "840a748f-58fe-4008-a3d5-efe7168193a0",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "I think we do to deal with the `not` case. If we don't use `Either` then `notCase` turns `Some` into `None`, but what does it do with `None`? We've lost information by only using the option so for example if we had `not(not(a))` we could't recover the original value, whereas `a.swap.swap == a`. Open to more elegant ways for achieving that but I think we definitely need some intermediate structure and `Either` seems to work relatively well.",
        "createdAt" : "2019-09-06T09:16:53Z",
        "updatedAt" : "2019-09-12T09:47:41Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "1ee26150-3462-4382-a22e-9177cd38e5a4",
        "parentId" : "840a748f-58fe-4008-a3d5-efe7168193a0",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Of course 👍 ",
        "createdAt" : "2019-09-06T09:18:10Z",
        "updatedAt" : "2019-09-12T09:47:41Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "aac7d007d1799ae41280d96fc6a753a6969d78c1",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +68,72 @@   */\n  final def failures: Option[BoolAlgebra[A]] =\n    fold[Either[BoolAlgebra[A], BoolAlgebra[A]]](a => Right(success(a)))(\n      {\n        case (Right(l), Right(r)) => Right(l && r)"
  },
  {
    "id" : "5b6bae89-ac08-485d-b231-88e62099012f",
    "prId" : 1582,
    "prUrl" : "https://github.com/zio/zio/pull/1582#pullrequestreview-284745438",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72695168-7c60-4595-8efa-17a5c4da8ac8",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "I think the empty case does not disprove the assumption, so should be true by default.",
        "createdAt" : "2019-09-06T09:11:14Z",
        "updatedAt" : "2019-09-12T09:47:41Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "aac7d007d1799ae41280d96fc6a753a6969d78c1",
    "line" : 259,
    "diffHunk" : "@@ -1,1 +257,261 @@   */\n  final def all[A](as: Iterable[BoolAlgebra[A]]): Option[BoolAlgebra[A]] =\n    if (as.isEmpty) None else Some(as.reduce(_ && _))\n\n  /**"
  },
  {
    "id" : "128d11fe-5dc5-4119-87e0-12e33bc13eae",
    "prId" : 1582,
    "prUrl" : "https://github.com/zio/zio/pull/1582#pullrequestreview-284789358",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4278b1ea-1262-41dd-9f04-9af07db759f8",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "same here, there is nothing to prove so the empty case is failure.",
        "createdAt" : "2019-09-06T09:11:52Z",
        "updatedAt" : "2019-09-12T09:47:41Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "3447b6d6-cba3-4862-aa49-390b430ec839",
        "parentId" : "4278b1ea-1262-41dd-9f04-9af07db759f8",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "ha, same thing as before, you need an `A` for the failure. ok scratch that then.",
        "createdAt" : "2019-09-06T09:12:35Z",
        "updatedAt" : "2019-09-12T09:47:41Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "fc834c78-29c5-4c08-80b1-551aa5abdf9f",
        "parentId" : "4278b1ea-1262-41dd-9f04-9af07db759f8",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Yeah, exactly.",
        "createdAt" : "2019-09-06T09:17:37Z",
        "updatedAt" : "2019-09-12T09:47:41Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "5ad1000a-f9ab-4601-b7dd-2acaf2807fd1",
        "parentId" : "4278b1ea-1262-41dd-9f04-9af07db759f8",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "if I'm correct, it's not strictly a bool algebra though, as there should be one and only one \"`false`\" element.",
        "createdAt" : "2019-09-06T09:20:55Z",
        "updatedAt" : "2019-09-12T09:47:41Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "e60e1599-ab77-49f6-aa02-9ac661328126",
        "parentId" : "4278b1ea-1262-41dd-9f04-9af07db759f8",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Yeah, I'm definitely not an expert on this. I think in boolean algebra as a branch of mathematics there is only one `true` and one `false` element. I was more trying to go for the idea that it is a reification, an \"algebra\", of boolean operations. I'm not committed to the name though not sure about a better one. Any ideas?",
        "createdAt" : "2019-09-06T09:28:16Z",
        "updatedAt" : "2019-09-12T09:47:41Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "06ec939f-dbba-449e-874b-0e6ada339fd4",
        "parentId" : "4278b1ea-1262-41dd-9f04-9af07db759f8",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "oooh yeah, that makes sense. I don't have a better proposition either way 😆 ",
        "createdAt" : "2019-09-06T10:45:45Z",
        "updatedAt" : "2019-09-12T09:47:41Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "aac7d007d1799ae41280d96fc6a753a6969d78c1",
    "line" : 272,
    "diffHunk" : "@@ -1,1 +270,274 @@   */\n  final def any[A](as: Iterable[BoolAlgebra[A]]): Option[BoolAlgebra[A]] =\n    if (as.isEmpty) None else Some(as.reduce(_ || _))\n\n  /**"
  }
]