[
  {
    "id" : "80037601-3bd5-417d-bbf0-269de581f66f",
    "prId" : 2937,
    "prUrl" : "https://github.com/zio/zio/pull/2937#pullrequestreview-362882003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f91c56cc-6e20-4f33-a70a-f98a4b0cd09d",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Nice cleanup and emphasizes this was the right default choice!",
        "createdAt" : "2020-02-21T19:59:33Z",
        "updatedAt" : "2020-02-21T20:35:51Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "4448be6cb3f8f3b66a177f37f5cb2948db5a6744",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +454,458 @@    def live(size: Int): ZLayer.NoDeps[Nothing, Sized] =\n      ZLayer.fromEffect(FiberRef.make(size).map { fiberRef =>\n        new Sized.Service {\n          val size: UIO[Int] =\n            fiberRef.get"
  },
  {
    "id" : "faba0752-ad7a-47e0-b7dd-8d7ed7b7e409",
    "prId" : 2769,
    "prUrl" : "https://github.com/zio/zio/pull/2769#pullrequestreview-351981778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43207480-78b0-42b4-b55f-f1460dfd4500",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This is a nice simplification.",
        "createdAt" : "2020-02-03T00:42:31Z",
        "updatedAt" : "2020-02-03T00:42:32Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "e31cbb3e9984cbf963f08c9df088669f1f5a0ed3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +111,115 @@   * An `ExecutedSpec` is a spec that has been run to produce test results.\n   */\n  type ExecutedSpec[+E, +L, +S] = Spec[Any, Nothing, L, ExecutedResult[E, S]]\n\n  /**"
  },
  {
    "id" : "e3fcde71-a5d3-4d3f-a69c-6ad4a283a9be",
    "prId" : 2553,
    "prUrl" : "https://github.com/zio/zio/pull/2553#pullrequestreview-337517776",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2b26f6d-e686-47a8-8091-65ba7d798584",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Maybe wildcard import at this point?",
        "createdAt" : "2020-01-02T01:07:14Z",
        "updatedAt" : "2020-01-02T01:09:12Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "f09e41a4-d537-4962-a04f-a038832afbd5",
        "parentId" : "f2b26f6d-e686-47a8-8091-65ba7d798584",
        "authorId" : "de0bc6c7-e62a-427d-8426-7cca7227a8f1",
        "body" : "I am not a big fan of wildcard. This sounds like something to add to scalafix, if it is doable. I typically put wildcard when it passes the line limit. Scalafmt can also just put one import per line. ",
        "createdAt" : "2020-01-02T01:11:30Z",
        "updatedAt" : "2020-01-02T01:11:30Z",
        "lastEditedBy" : "de0bc6c7-e62a-427d-8426-7cca7227a8f1",
        "tags" : [
        ]
      },
      {
        "id" : "fc88cf71-d8b5-49f9-9cbc-2100cf1b4c6f",
        "parentId" : "f2b26f6d-e686-47a8-8091-65ba7d798584",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Sounds good.",
        "createdAt" : "2020-01-02T02:17:54Z",
        "updatedAt" : "2020-01-02T02:17:54Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cc43eced0379bb99d26998d28c40db792d85351",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +21,25 @@import zio.duration.Duration\nimport zio.stream.{ ZSink, ZStream }\nimport zio.test.environment.{ testEnvironmentManaged, TestClock, TestConsole, TestEnvironment, TestRandom, TestSystem }\n\n/**"
  },
  {
    "id" : "94e0a27b-26a2-4cd1-a303-a68376a565e6",
    "prId" : 2464,
    "prUrl" : "https://github.com/zio/zio/pull/2464#pullrequestreview-331684067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a670ff92-e442-4659-9d16-19314915281f",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Coming back to this, it's not part of the type inference issue, is it? I was just wondering if it made the API more usable.",
        "createdAt" : "2019-12-12T20:33:34Z",
        "updatedAt" : "2019-12-18T13:23:46Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "bf35e636-b4e9-41d8-bb32-8def14cb362f",
        "parentId" : "a670ff92-e442-4659-9d16-19314915281f",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Actually it is related to the type inference issue. We need to curry `assert` to \"lock in\" in the type of `A` so that the compiler properly widens the right hand side if it is a subtype of the left hand side, for example `assert(List(1, 2, 3))(equalTo(List.empty))`. And then we need the implicit evidence to prevent it from widening the type to `Any` so nonsensical comparisons don't compile.",
        "createdAt" : "2019-12-12T23:19:31Z",
        "updatedAt" : "2019-12-18T13:23:46Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "6b5208fa-c141-4934-90b2-8ee777cba1e0",
        "parentId" : "a670ff92-e442-4659-9d16-19314915281f",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Brilliant!",
        "createdAt" : "2019-12-13T06:26:25Z",
        "updatedAt" : "2019-12-18T13:23:46Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b868f5f88e2d9cafda9857459b94ad0ee1023e7",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +112,116 @@   * Checks the assertion holds for the given value.\n   */\n  final def assert[A](value: => A)(assertion: Assertion[A]): TestResult =\n    assertion.run(value).flatMap { fragment =>\n      def loop(whole: AssertionValue, failureDetails: FailureDetails): TestResult ="
  },
  {
    "id" : "cd5f60a9-2f28-448e-83f7-db51fd006d0c",
    "prId" : 2025,
    "prUrl" : "https://github.com/zio/zio/pull/2025#pullrequestreview-328536993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d4aa279-8059-450c-a86b-f5a2a4d77859",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Great!",
        "createdAt" : "2019-12-07T03:52:07Z",
        "updatedAt" : "2019-12-07T19:31:56Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d542fc18b94b80ab55ab1bcb18800d76c200c6d",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +49,53 @@\n  /**\n   * A `TestAspectAtLeast[R]` is a `TestAspect` that requires at least an `R` in its environment.\n   */\n  type TestAspectAtLeastR[R] ="
  },
  {
    "id" : "3d3a0d23-b449-441b-a60a-e5fa60a444e4",
    "prId" : 1664,
    "prUrl" : "https://github.com/zio/zio/pull/1664#pullrequestreview-296581595",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce68f682-adc0-402e-a11d-a4ed65b251ff",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Nice simplification! 👍 ",
        "createdAt" : "2019-10-02T23:38:23Z",
        "updatedAt" : "2019-10-03T14:25:53Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "575f2a3e67704b91d7e3cf8e6a227fd7ba625d6f",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +111,115 @@   */\n  final def fail[E](cause: Cause[E]): ZTest[Any, E, Nothing] =\n    ZIO.halt(cause)\n\n  /**"
  },
  {
    "id" : "d7fc0d83-7623-457e-99f8-1f2ce35d0083",
    "prId" : 1356,
    "prUrl" : "https://github.com/zio/zio/pull/1356#pullrequestreview-274702156",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e914d79-38af-48c6-9adc-b2c388dcbb4a",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Beautiful simplification. ❤️ ",
        "createdAt" : "2019-08-14T07:10:50Z",
        "updatedAt" : "2019-08-15T01:04:25Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "1cdaeef05487990444f3c426ca7c279d9befa53d",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +161,165 @@      .dropWhile(!_.value.failure) // Drop until we get to a failure\n      .take(1)                     // Get the first failure\n      .flatMap(_.shrinkSearch(_.failure).take(maxShrinks))\n      .run(ZSink.collectAll[TestResult]) // Collect all the shrunken failures\n      .map { failures =>"
  },
  {
    "id" : "c25e39eb-3abb-4da4-a9be-3a07ce04992c",
    "prId" : 1292,
    "prUrl" : "https://github.com/zio/zio/pull/1292#pullrequestreview-268549512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c538b169-7031-4f3b-95b0-cdec56925ba0",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "If you're going to generalize `suite`, I'd do the same for `testM`, which will become identity. \r\n\r\nIt's a little strange that `testM` just passes through the test, which is not necessarily monadic, but it will work as expected for most users.",
        "createdAt" : "2019-07-30T17:17:07Z",
        "updatedAt" : "2019-07-30T17:27:23Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "9914e60d-ee26-4520-8e95-30712736613b",
        "parentId" : "c538b169-7031-4f3b-95b0-cdec56925ba0",
        "authorId" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "body" : "Right! Didn't notice that testM was identity through the type aliases D:",
        "createdAt" : "2019-07-30T17:27:49Z",
        "updatedAt" : "2019-07-30T17:27:50Z",
        "lastEditedBy" : "fe8c0309-9574-4c2c-a95a-2f54e9bd5411",
        "tags" : [
        ]
      }
    ],
    "commit" : "7c984cabcec72ac9ac8e58d71a41f44f697098da",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +85,89 @@   * Builds a suite containing a number of other specs.\n   */\n  final def suite[L, T](label: L)(specs: Spec[L, T]*): Spec[L, T] = Spec.suite(label, specs.toVector, None)\n\n  /**"
  },
  {
    "id" : "fc8de3b2-af9f-4044-ae26-2e837d3757cd",
    "prId" : 1247,
    "prUrl" : "https://github.com/zio/zio/pull/1247#pullrequestreview-267187951",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1eb9e522-49d2-4fac-bf00-83b9086c25fd",
        "parentId" : null,
        "authorId" : "de89a48e-13a7-4516-a51d-dd4027b753b0",
        "body" : "Should we introduce something that type-checks Scaladoc or move these examples into the microsite?",
        "createdAt" : "2019-07-26T13:30:08Z",
        "updatedAt" : "2019-07-27T12:49:28Z",
        "lastEditedBy" : "de89a48e-13a7-4516-a51d-dd4027b753b0",
        "tags" : [
        ]
      },
      {
        "id" : "137e06a0-8ec1-48fa-9f90-21d73eabc01e",
        "parentId" : "1eb9e522-49d2-4fac-bf00-83b9086c25fd",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "For sure, but let's wait till API stabilizes a bit, probably another week.",
        "createdAt" : "2019-07-26T13:31:59Z",
        "updatedAt" : "2019-07-27T12:49:28Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "c517e4e5b96f63e3b899ef8bc7b3f25a0a418d3f",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +26,30 @@ * combinators.\n *\n * {{{\n *  import zio.test._\n *  import zio.clock.nanoTime"
  }
]