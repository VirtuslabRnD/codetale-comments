[
  {
    "id" : "008ba403-c3af-4276-ba33-62080ed7b239",
    "prId" : 3326,
    "prUrl" : "https://github.com/zio/zio/pull/3326#pullrequestreview-391210516",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afa6b37a-0091-4701-b6b5-0b54822ac175",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This is really nice!",
        "createdAt" : "2020-04-10T00:21:29Z",
        "updatedAt" : "2020-04-10T09:52:35Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "dc466801-1e5d-4d88-901e-69565d2cf805",
        "parentId" : "afa6b37a-0091-4701-b6b5-0b54822ac175",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Possibly this is another place where we might need to propagate the instances required of `A`.\r\n\r\nNaively:\r\n\r\n```scala\r\ntrait GenF[-R, F[_], Caps[_]] {\r\n   def apply[R1 <: R, A: Caps](gen: Gen[R1, A]): Gen[R1, F[A]]\r\n```\r\n\r\nI'm thinking of the situations where, in order to create `F[A]`, the `A` itself must satisfy some properties. \r\n\r\nOr maybe there's a simpler way.",
        "createdAt" : "2020-04-10T00:29:58Z",
        "updatedAt" : "2020-04-10T09:52:35Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "104cede2bd4702bdd29aa82e4e0ece8f82f91bcb",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +20,24 @@\ntrait GenF[-R, F[_]] {\n  def apply[R1 <: R, A](gen: Gen[R1, A]): Gen[R1, F[A]]\n}"
  }
]