[
  {
    "id" : "84b7a58e-d850-48df-b82a-604e5cd5084e",
    "prId" : 3824,
    "prUrl" : "https://github.com/zio/zio/pull/3824#pullrequestreview-431906018",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc025621-f14c-4709-8755-b474c2ff565f",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Hard to judge if this will work (but master is failing now).\r\n\r\nWhat do we need to solve this for \"real\"?",
        "createdAt" : "2020-06-16T20:36:20Z",
        "updatedAt" : "2020-06-16T20:36:20Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "ef7b8cf0-cf74-4923-93f1-ba5c0c6ca142",
        "parentId" : "fc025621-f14c-4709-8755-b474c2ff565f",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "I agree. As far as I can tell the CI failure was unrelated to this so I think given the flakiness is rare (we're only seeing it occasionally even when many of the tests at issue already have `nonFlaky`) I think this has at least a chance to work.\r\n\r\nTo fix it \"for real\" I think we need a way to supervise a set of fibers and wait for them all to be done or suspended in a way that is concurrency safe (e.g. it can't be the case that both are suspended but one is \"about to be woken up\", or we observe them at slightly different times so one is suspended but then starts running again by the time we observe the other). That seems like a hard problem so thought it made sense at least to try the brute force approach.",
        "createdAt" : "2020-06-16T21:29:51Z",
        "updatedAt" : "2020-06-16T21:29:51Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccafb6241179be9bf2834bf1679cd41b1e750baa",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +361,365 @@        live.provide {\n          suspended.repeat {\n            Schedule.doUntilEquals(true) && Schedule.fixed(5.milliseconds)\n          }\n        }.unit"
  }
]