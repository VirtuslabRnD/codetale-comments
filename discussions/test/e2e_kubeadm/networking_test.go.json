[
  {
    "id" : "4d70417a-d9d8-4b84-9f7f-de48df706a54",
    "prId" : 80259,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80259#pullrequestreview-263864188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6fe29c8-5588-4267-99a7-4ebf93c8cfb4",
        "parentId" : null,
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "what happens when we cannot parse the cidr",
        "createdAt" : "2019-07-17T19:28:24Z",
        "updatedAt" : "2019-07-27T14:56:13Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      },
      {
        "id" : "0816e2c5-95fc-4558-a84d-71937208bb9f",
        "parentId" : "c6fe29c8-5588-4267-99a7-4ebf93c8cfb4",
        "authorId" : "c892e350-ac78-4a0c-a13f-d0b4b7842b18",
        "body" : "These funcs are only used here. The two parameters passed in are both checked in other places and are pulled from a deployed cluster. If they are somehow not in correct CIDR format, then there is likely something terribly wrong that goes beyond just these tests :)",
        "createdAt" : "2019-07-18T19:46:40Z",
        "updatedAt" : "2019-07-27T14:56:13Z",
        "lastEditedBy" : "c892e350-ac78-4a0c-a13f-d0b4b7842b18",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca3bdfd79397230841fac822b0102fcdf7e3c9ea",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +127,131 @@// ipWithinSubnet returns true if an IP (targetIP) falls within the reference subnet (refIPNet)\nfunc ipWithinSubnet(refIPNet, targetIP string) bool {\n\t_, rNet, _ := net.ParseCIDR(refIPNet)\n\ttIP := net.ParseIP(targetIP)\n\treturn rNet.Contains(tIP)"
  },
  {
    "id" : "e2394795-db15-4788-922e-07cf9aa1efac",
    "prId" : 80259,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80259#pullrequestreview-263864188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58a46096-44b7-4021-a392-58cc1d8083a3",
        "parentId" : null,
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "same",
        "createdAt" : "2019-07-17T19:28:33Z",
        "updatedAt" : "2019-07-27T14:56:13Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      },
      {
        "id" : "f03b01ed-59ba-449d-8cb7-3595bf8938b9",
        "parentId" : "58a46096-44b7-4021-a392-58cc1d8083a3",
        "authorId" : "c892e350-ac78-4a0c-a13f-d0b4b7842b18",
        "body" : "Please see above comment. ",
        "createdAt" : "2019-07-18T19:46:50Z",
        "updatedAt" : "2019-07-27T14:56:13Z",
        "lastEditedBy" : "c892e350-ac78-4a0c-a13f-d0b4b7842b18",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca3bdfd79397230841fac822b0102fcdf7e3c9ea",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +134,138 @@// subnetWithinSubnet returns true if a subnet (targetNet) falls within the reference subnet (refIPNet)\nfunc subnetWithinSubnet(refIPNet, targetNet string) bool {\n\t_, rNet, _ := net.ParseCIDR(refIPNet)\n\ttNet, _, _ := net.ParseCIDR(targetNet)\n\treturn rNet.Contains(tNet)"
  },
  {
    "id" : "615ca5f3-bc95-4572-8159-e32c1583f20f",
    "prId" : 80259,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80259#pullrequestreview-270436554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ee6b4a9-0b1f-4921-b71a-5da3a5f7909a",
        "parentId" : null,
        "authorId" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "body" : "wdyt about testing against default podSubnet instead of skipping the test when the value in kubeadm is empty?",
        "createdAt" : "2019-07-18T09:10:18Z",
        "updatedAt" : "2019-07-27T14:56:13Z",
        "lastEditedBy" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "tags" : [
        ]
      },
      {
        "id" : "a76e4b69-6ff7-4d32-a308-925f101f8038",
        "parentId" : "9ee6b4a9-0b1f-4921-b71a-5da3a5f7909a",
        "authorId" : "c892e350-ac78-4a0c-a13f-d0b4b7842b18",
        "body" : "There is a default `DefaultServicesSubnet = \"10.96.0.0/12\"` but I don't see a default PodSubnet in kubeadm. I suspect the controller-manager has a default pod subnet, but should we be checking default values outside of kubeadm?",
        "createdAt" : "2019-07-18T19:38:50Z",
        "updatedAt" : "2019-07-27T14:56:13Z",
        "lastEditedBy" : "c892e350-ac78-4a0c-a13f-d0b4b7842b18",
        "tags" : [
        ]
      },
      {
        "id" : "5420a3d1-42ac-4fa5-8f5d-4e93f3816e09",
        "parentId" : "9ee6b4a9-0b1f-4921-b71a-5da3a5f7909a",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "podSubnet is an open topic without a clear conclusion as you can see in this open issue https://github.com/kubernetes/kubeadm/issues/1011\r\n\r\nI suggest to skip it, at least until kubeadm take a decision on how to treat it. Maybe adding a TODO comment referencing the issue",
        "createdAt" : "2019-07-18T20:02:17Z",
        "updatedAt" : "2019-07-27T14:56:13Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "37a188fa-c729-4eaa-b6f1-7737df8276d2",
        "parentId" : "9ee6b4a9-0b1f-4921-b71a-5da3a5f7909a",
        "authorId" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "body" : "ok for skipping and adding a comment\r\n\"kubeadm does not apply defaults for PodSubnet, so we are skipping this test because there are no kubeadm settings to be verified in this case\"",
        "createdAt" : "2019-07-22T07:50:23Z",
        "updatedAt" : "2019-07-27T14:56:13Z",
        "lastEditedBy" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "tags" : [
        ]
      },
      {
        "id" : "3cf054c9-1e38-4862-b83a-dfb8dbd0a6c2",
        "parentId" : "9ee6b4a9-0b1f-4921-b71a-5da3a5f7909a",
        "authorId" : "c892e350-ac78-4a0c-a13f-d0b4b7842b18",
        "body" : "I added the comment.",
        "createdAt" : "2019-07-23T14:10:15Z",
        "updatedAt" : "2019-07-27T14:56:13Z",
        "lastEditedBy" : "c892e350-ac78-4a0c-a13f-d0b4b7842b18",
        "tags" : [
        ]
      },
      {
        "id" : "0585079f-4ced-4360-a91a-44ddeb3b09ee",
        "parentId" : "9ee6b4a9-0b1f-4921-b71a-5da3a5f7909a",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "note: i closed https://github.com/kubernetes/kubeadm/issues/1011\r\ngiven a warning about not passing a CIDR different from the default is not something we want to show and also given the CNI plugin step is outside of the kubeadm workflow.\r\n",
        "createdAt" : "2019-08-03T00:26:22Z",
        "updatedAt" : "2019-08-03T00:26:22Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca3bdfd79397230841fac822b0102fcdf7e3c9ea",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +61,65 @@\t\t\t\t// If podSubnet is not specified, podSubnet cases will be skipped.\n\t\t\t\t// Note that kubeadm does not currently apply defaults for PodSubnet, so we skip.\n\t\t\t\tpodSubnetInKubeadmConfig = true\n\t\t\t\tcidrs := strings.Split(ps.(string), \",\")\n\t\t\t\tif len(cidrs) > 1 {"
  },
  {
    "id" : "1a086fb2-2499-41cc-a4e3-db349c86f413",
    "prId" : 80259,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80259#pullrequestreview-263864188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5180cc7-00f9-4917-b669-04af547b2c5d",
        "parentId" : null,
        "authorId" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "body" : "While the `networking` object in the kubeadm config is a convenient way to setup networking across all the control plane components, nothing prevents the user to alter control plane settings using `extraArgs`.\r\n\r\nI'm either fine in documenting this with something like \"please note that this test assumes that the user does not alter .... with extraArgs\" or in changing the detection logic above using `--cluster-cidr` flag in the ControllerManager Pod as a authoritive as the authoritative source for this info",
        "createdAt" : "2019-07-18T09:18:26Z",
        "updatedAt" : "2019-07-27T14:56:13Z",
        "lastEditedBy" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "tags" : [
        ]
      },
      {
        "id" : "62fc0308-ef5a-457f-bd6b-d4b87e932d95",
        "parentId" : "e5180cc7-00f9-4917-b669-04af547b2c5d",
        "authorId" : "c892e350-ac78-4a0c-a13f-d0b4b7842b18",
        "body" : "I have added the note you mentioned. ",
        "createdAt" : "2019-07-18T19:33:29Z",
        "updatedAt" : "2019-07-27T14:56:13Z",
        "lastEditedBy" : "c892e350-ac78-4a0c-a13f-d0b4b7842b18",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca3bdfd79397230841fac822b0102fcdf7e3c9ea",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +56,60 @@\t\t// Please note that this test assumes that the user does not alter network configs\n\t\t// using the extraArgs option.\n\t\tif _, ok := cc[\"networking\"]; ok {\n\t\t\tnetCC := cc[\"networking\"].(map[interface{}]interface{})\n\t\t\tif ps, ok := netCC[\"podSubnet\"]; ok {"
  },
  {
    "id" : "840547bc-fba8-4b69-b4ee-22ba5b3d7867",
    "prId" : 80259,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80259#pullrequestreview-266584622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33966485-203a-4a37-bca2-b1a2bc8a15f2",
        "parentId" : null,
        "authorId" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "body" : "This test is checking kubeadm behaviour indirectly, and I'm wondering if instead we should test the kubeadm bit more specifically\r\n\r\nKubeadm only responsibility for networking is to pass the settings to the control plane components (in this case, to translate `podSubnet` into `cluster-cidr`, `allocate-node-cidrs` and `node-cidr-mask-size` flags for the controller manager)",
        "createdAt" : "2019-07-18T09:25:03Z",
        "updatedAt" : "2019-07-27T14:56:13Z",
        "lastEditedBy" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "tags" : [
        ]
      },
      {
        "id" : "7771e780-7d67-407e-9a4e-39d318eae9ec",
        "parentId" : "33966485-203a-4a37-bca2-b1a2bc8a15f2",
        "authorId" : "c892e350-ac78-4a0c-a13f-d0b4b7842b18",
        "body" : "What do you have in mind? \r\nI followed this approach based on what I saw in other tests. ",
        "createdAt" : "2019-07-18T19:43:46Z",
        "updatedAt" : "2019-07-27T14:56:13Z",
        "lastEditedBy" : "c892e350-ac78-4a0c-a13f-d0b4b7842b18",
        "tags" : [
        ]
      },
      {
        "id" : "000eabf9-28e9-4fc3-b0b3-72f84de98e81",
        "parentId" : "33966485-203a-4a37-bca2-b1a2bc8a15f2",
        "authorId" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "body" : "Sorry for not being clear.\r\nI think we should have a test that checks kubeadm assigns the expected value to cluster-cidr, allocate-node-cidrs and node-cidr-mask-size (in addition or in replacement to the current test)",
        "createdAt" : "2019-07-22T07:53:01Z",
        "updatedAt" : "2019-07-27T14:56:13Z",
        "lastEditedBy" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "tags" : [
        ]
      },
      {
        "id" : "39a5e98e-2153-4933-bc0f-9f49c20751c0",
        "parentId" : "33966485-203a-4a37-bca2-b1a2bc8a15f2",
        "authorId" : "c892e350-ac78-4a0c-a13f-d0b4b7842b18",
        "body" : "@fabriziopandini \r\n`allocate-node-cidrs` is internal to controller-manager and is not exposed, so I don't see any way to verify that. \r\n`node-cidr-mask-size` is calcuated by kubeadm (see func calcNodeCidrSize). There are some issues with verifying it: \r\n1. This func currently assumes IPv4 (assigns /24 to IPv6 -- a known problem). \r\n2. We'll need to change this func to support dual-stack, so  `node-cidr-mask-size` will actually become a slice. \r\n3. `node-cidr-mask-size` is not written to kubeadm config, so we'll have to duplicate this func in the e2e tests in order to verify it. \r\n4. calcNodeCidrSize is unit tested already. \r\nBecause of these reasons, I would prefer not to add e2e tests for this. Perhaps when dual-stack changes land, we can revisit this. \r\n",
        "createdAt" : "2019-07-23T14:27:01Z",
        "updatedAt" : "2019-07-27T14:56:13Z",
        "lastEditedBy" : "c892e350-ac78-4a0c-a13f-d0b4b7842b18",
        "tags" : [
        ]
      },
      {
        "id" : "f639489b-7b8a-4600-bee0-b472067a3991",
        "parentId" : "33966485-203a-4a37-bca2-b1a2bc8a15f2",
        "authorId" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "body" : "Ok, I got your point and I don't want to block on this.\r\nHowever, I think this test is useful and doable reading the args in the controller-manager pod, so please add an item on the umbrella issue: \"implement a test that checks kubeadm assigns the expected value to cluster-cidr, allocate-node-cidrs and node-cidr-mask-size (in addition or in replacement to the current test\"\r\n",
        "createdAt" : "2019-07-25T12:16:31Z",
        "updatedAt" : "2019-07-27T14:56:13Z",
        "lastEditedBy" : "8a27151d-3530-4221-90e8-48b3a85cba37",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca3bdfd79397230841fac822b0102fcdf7e3c9ea",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +88,92 @@\t\t\t\t\tif ps, ok := netCC[\"podSubnet\"]; ok {\n\t\t\t\t\t\t// Check that the pod CIDR allocated to the node(s) is within the kubeadm-config podCIDR.\n\t\t\t\t\t\tnodes, err := f.ClientSet.CoreV1().Nodes().List(metav1.ListOptions{})\n\t\t\t\t\t\tframework.ExpectNoError(err)\n\t\t\t\t\t\tfor _, node := range nodes.Items {"
  }
]