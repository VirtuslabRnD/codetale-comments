[
  {
    "id" : "7e6fd384-221b-4840-93c4-b47970cd9123",
    "prId" : 93179,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93179#pullrequestreview-572281554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a285d54c-ba68-41c5-9402-6b1f2ebb1f98",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "The node1 is empty, why would this trigger preemption?",
        "createdAt" : "2021-01-19T14:50:46Z",
        "updatedAt" : "2021-01-26T01:59:45Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "18ee2d1a-a43d-4e75-bdfc-5a8f62ae8690",
        "parentId" : "a285d54c-ba68-41c5-9402-6b1f2ebb1f98",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "I think we needn't test the logic of preemption, as it is already covered in the \"TestPreemption\", `initPreemptorTest` and `wrapNext` will set the `.Pod.Status.NominatedNodeName` for the pod so that this testcase will focus on the code change in this PR instead.\r\n\r\nI have added some comments on this testcase to explain what this testcase want to cover, please see is there anything need to be updated there too.",
        "createdAt" : "2021-01-20T04:36:34Z",
        "updatedAt" : "2021-01-26T01:59:45Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "0e995e24-f677-4c14-9b80-3a780de2f98d",
        "parentId" : "a285d54c-ba68-41c5-9402-6b1f2ebb1f98",
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "node1 is empty and `.Pod.Status.NominatedNodeName` is set to \"node1\", this is simulating that the resource on node1 has been released, so it's good to be assigned for the pod.",
        "createdAt" : "2021-01-20T04:38:24Z",
        "updatedAt" : "2021-01-26T01:59:45Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      },
      {
        "id" : "e7986322-8a9b-4327-827c-159bcb9b0db4",
        "parentId" : "a285d54c-ba68-41c5-9402-6b1f2ebb1f98",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Oh, I missed the `wrapNext`. Can you put explain the test is simulating the nominatedNode in the comment for TestPreferNominatedNode",
        "createdAt" : "2021-01-20T14:35:42Z",
        "updatedAt" : "2021-01-26T01:59:45Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d800ffe0704c58865ec2a1cb611209f6d5731d8",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +1380,1384 @@\t\t\t},\n\t\t\tpod: initPausePod(&pausePodConfig{\n\t\t\t\tName:      \"preemptor-pod\",\n\t\t\t\tNamespace: testCtx.NS.Name,\n\t\t\t\tPriority:  &highPriority,"
  },
  {
    "id" : "3ba214cc-fa17-4b31-9628-b878b5143b81",
    "prId" : 93179,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93179#pullrequestreview-571866005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ffcce91-d49b-46f5-8f2c-115f063a5223",
        "parentId" : null,
        "authorId" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "body" : "please checkout the comments here.",
        "createdAt" : "2021-01-20T04:40:35Z",
        "updatedAt" : "2021-01-26T01:59:45Z",
        "lastEditedBy" : "1fde46ca-8fae-4b82-9978-f266fdae6ffe",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d800ffe0704c58865ec2a1cb611209f6d5731d8",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +1334,1338 @@// to another node in the cluster that ables to pass all the filters.\n// NOTE: This integration test is not intending to check the logic of preemption, but rather a sanity check when the feature is\n// enabled.\nfunc TestPreferNominatedNode(t *testing.T) {\n\tdefer featuregatetesting.SetFeatureGateDuringTest(t, utilfeature.DefaultFeatureGate, features.PreferNominatedNode, true)()"
  },
  {
    "id" : "ea40b03e-2966-44ed-bd0b-bd6b16b76604",
    "prId" : 91750,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91750#pullrequestreview-424030881",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6852af07-ae70-4db5-80d0-46309cb9572c",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "This test can be merged with existing `TestNominatedNodeCleanUp` using table-test style.",
        "createdAt" : "2020-06-04T00:54:25Z",
        "updatedAt" : "2020-06-04T00:54:25Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "369a9001c6f7192eaef6cc4460aeb4b4373f25e5",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1025,1029 @@}\n\nfunc TestNominatedNodeCleanUpUponNodeDeletion(t *testing.T) {\n\t// Initialize scheduler.\n\ttestCtx := initTest(t, \"preemption\")"
  },
  {
    "id" : "70c37164-9d32-4eaf-bf3c-d9dde79a8c8b",
    "prId" : 91191,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91191#pullrequestreview-415654062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0207a7ea-5de3-4590-8d30-bb2f4c5a4c49",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "`Fatalf` this b/c if this fails, it doesn't make sense to continue.",
        "createdAt" : "2020-05-20T19:37:15Z",
        "updatedAt" : "2020-05-29T03:54:16Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "505ae6930f84c24a65fa8e66528b3989ea464cfc",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +496,500 @@\t\t\tvictimPod, err := createPausePod(cs, victim)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatalf(\"Error while creating victim: %v\", err)\n\t\t\t}\n\t\t\tif err := waitForPodToScheduleWithTimeout(cs, victimPod, 5*time.Second); err != nil {"
  },
  {
    "id" : "0e420855-cb55-4e33-87a7-414073089beb",
    "prId" : 91191,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91191#pullrequestreview-420032884",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fb00bc5-9382-4cfc-be37-37e3258cd3a3",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "As we assign a 0 terminationSecond to each Pod, the victim will be physically deleted. So either remove setting 0 termination period and keep the logic here; or keep the 0 termination period and verify whether the Pod gets scheduled here.",
        "createdAt" : "2020-05-20T19:45:27Z",
        "updatedAt" : "2020-05-29T03:54:16Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "b5924f8e-3b3d-4a05-9e56-e840f8a156f9",
        "parentId" : "1fb00bc5-9382-4cfc-be37-37e3258cd3a3",
        "authorId" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "body" : "Done. I remove the terminationSecond",
        "createdAt" : "2020-05-28T11:54:44Z",
        "updatedAt" : "2020-05-29T03:54:16Z",
        "lastEditedBy" : "89bff7d0-c420-41e1-9e5e-db63c4cccd93",
        "tags" : [
        ]
      }
    ],
    "commit" : "505ae6930f84c24a65fa8e66528b3989ea464cfc",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +507,511 @@\t\t\t}\n\n\t\t\terr = waitForNominatedNodeNameWithTimeout(cs, preemptorPod, 5*time.Second)\n\t\t\t// test.PreemptionPolicy == nil means we expect the preemptor to be nominated.\n\t\t\texpect := test.PreemptionPolicy == nil"
  },
  {
    "id" : "ea208530-6fa3-4955-a324-d31de6a95038",
    "prId" : 80824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80824#pullrequestreview-281662635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee8eeed4-0f87-4b23-97f3-ef22f1ded0da",
        "parentId" : null,
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "What about nodes? Do you want to clean them up?",
        "createdAt" : "2019-08-29T17:03:13Z",
        "updatedAt" : "2019-09-20T00:25:15Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      },
      {
        "id" : "00c9bdf0-851a-4b0c-85d7-f3d69be06e0b",
        "parentId" : "ee8eeed4-0f87-4b23-97f3-ef22f1ded0da",
        "authorId" : "0e2b7889-1224-444e-a36d-475f9edd0703",
        "body" : "Good catch, updated",
        "createdAt" : "2019-08-29T19:03:39Z",
        "updatedAt" : "2019-09-20T00:25:15Z",
        "lastEditedBy" : "0e2b7889-1224-444e-a36d-475f9edd0703",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca18b48151ae4ce241d6b8d51818e86b007508c9",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +465,469 @@\t\t})\n\t}\n\tcleanupPods(cs, t, pods)\n\tcleanupNodes(cs, t)\n}"
  },
  {
    "id" : "c21081ba-a3c5-45a8-8246-6eb387eb629e",
    "prId" : 80824,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80824#pullrequestreview-290899645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9cf1c25-c2b9-4259-bf5d-40184e591295",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Add a negative case? one for an unknown priority, and expect the scheduler to fail?",
        "createdAt" : "2019-09-18T17:56:31Z",
        "updatedAt" : "2019-09-20T00:25:15Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "9e1bdf4c-514c-4fac-bf61-88aa2df1fa75",
        "parentId" : "c9cf1c25-c2b9-4259-bf5d-40184e591295",
        "authorId" : "0e2b7889-1224-444e-a36d-475f9edd0703",
        "body" : "Similar to my above reply, we're not setting integer values, we are setting a string and checking that it resolves to an integer, so I can't add a negative value check but I can add one for an unknown string and check that it resolves to nothing if you want. What do you think?",
        "createdAt" : "2019-09-19T18:47:25Z",
        "updatedAt" : "2019-09-20T00:25:15Z",
        "lastEditedBy" : "0e2b7889-1224-444e-a36d-475f9edd0703",
        "tags" : [
        ]
      },
      {
        "id" : "5fd4c777-b8c6-47f3-97f8-bfcc3acb4a32",
        "parentId" : "c9cf1c25-c2b9-4259-bf5d-40184e591295",
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "Sorry, I didn't mean a negative number, just a negative case, i.e. a case that should be rejected.",
        "createdAt" : "2019-09-19T19:16:42Z",
        "updatedAt" : "2019-09-20T00:25:15Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      },
      {
        "id" : "c6d1ec68-d86f-41e3-9e99-704875081279",
        "parentId" : "c9cf1c25-c2b9-4259-bf5d-40184e591295",
        "authorId" : "0e2b7889-1224-444e-a36d-475f9edd0703",
        "body" : "Ah, I see then I misunderstood. I added a case for an invalid priority that should be rejected",
        "createdAt" : "2019-09-19T23:57:50Z",
        "updatedAt" : "2019-09-20T00:25:15Z",
        "lastEditedBy" : "0e2b7889-1224-444e-a36d-475f9edd0703",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca18b48151ae4ce241d6b8d51818e86b007508c9",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +417,421 @@\t\t\t\tPriorityClassName: scheduling.SystemClusterCritical,\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tName:             \"Invalid priority class should result in error\","
  },
  {
    "id" : "fd3b0104-00b0-4e19-85e3-fe355c0a06ae",
    "prId" : 72259,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/72259#pullrequestreview-187242497",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "89693a6a-4841-4372-9353-4a1be2c9a04e",
        "parentId" : null,
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "Did you succeed to run this test with an expected error? I mean without other code fixes.\r\n\r\nI tried several times and they all passed without errors.",
        "createdAt" : "2018-12-21T00:57:36Z",
        "updatedAt" : "2018-12-30T06:55:06Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      },
      {
        "id" : "abcc2cdd-94c4-4729-aa27-2d0549c0e664",
        "parentId" : "89693a6a-4841-4372-9353-4a1be2c9a04e",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "I have managed to get it to fail, but given that there is race condition that is hard to reproduce, you need to set numRepitions high (100) and still sometimes run several times.\r\nI tried finding a way to simulate late arrival of events, but I didn't find a reasonable way to do so.",
        "createdAt" : "2018-12-21T01:02:54Z",
        "updatedAt" : "2018-12-30T06:55:06Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      },
      {
        "id" : "63849b72-0979-40fe-b3be-a7c2fc758483",
        "parentId" : "89693a6a-4841-4372-9353-4a1be2c9a04e",
        "authorId" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "body" : "I should add that my reasons for adding it was to at least see a flaky test if a race condition exists.",
        "createdAt" : "2018-12-21T01:05:06Z",
        "updatedAt" : "2018-12-30T06:55:06Z",
        "lastEditedBy" : "15fb535e-c5be-47ce-a304-1cb5da5aca90",
        "tags" : [
        ]
      }
    ],
    "commit" : "b75672c4bae487c4b3e2dd7db7692864368ed68a",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +494,498 @@// TestPreemptionRaces tests that other scheduling events and operations do not\n// race with the preemption process.\nfunc TestPreemptionRaces(t *testing.T) {\n\t// Initialize scheduler.\n\tcontext := initTest(t, \"preemption-race\")"
  }
]