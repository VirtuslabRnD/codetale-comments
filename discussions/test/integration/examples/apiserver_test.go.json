[
  {
    "id" : "348936c7-10b0-4a06-a3a8-92f33d50e584",
    "prId" : 66932,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66932#pullrequestreview-144089115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65c27428-48ec-4fbd-a728-2750ec35eae7",
        "parentId" : null,
        "authorId" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "body" : "The wardle `APIService` was never available, because `Service` object is missing, which is referenced in the `APIService` object above:\r\n```go\r\n \t\t\tService: &apiregistrationv1beta1.ServiceReference{\r\n \t\t\t\tNamespace: \"kube-wardle\",\r\n \t\t\t\tName:      \"api\",\r\n},\r\n```\r\nKube-aggregator previously silently skipped unavailable API services in the `/apis` endpoint. With the new change, there is an error with details that are asserted in the `assertWardleUnavailableDiscoveryError` function (since `.Discovery().ServerResources()` now invokes `/apis/wardle.k8s.io/v1alpha1` endpoint that returns `503` error). ",
        "createdAt" : "2018-08-03T08:54:22Z",
        "updatedAt" : "2018-08-08T04:27:18Z",
        "lastEditedBy" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "tags" : [
        ]
      },
      {
        "id" : "451eb937-692a-4692-9473-67fe6bfb7965",
        "parentId" : "65c27428-48ec-4fbd-a728-2750ec35eae7",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I think it's good to verify this error this way to make sure discovery reports it is incomplete in this case. once we verify this way, can we create the service pointing at `127.0.0.1:<wardlePort>` and make sure we get a successful discovery?",
        "createdAt" : "2018-08-06T14:08:52Z",
        "updatedAt" : "2018-08-08T04:27:18Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "7c11920d-6acb-4aae-8d63-66fe30f07d19",
        "parentId" : "65c27428-48ec-4fbd-a728-2750ec35eae7",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "actually, I'm not sure we have the network infrastructure here to use services",
        "createdAt" : "2018-08-07T15:00:44Z",
        "updatedAt" : "2018-08-08T04:27:18Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "3deb9a51-425c-4821-812a-b377d24a730a",
        "parentId" : "65c27428-48ec-4fbd-a728-2750ec35eae7",
        "authorId" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "body" : "heh, your initial suggestion made me wonder if there was some magic trick to make such Service",
        "createdAt" : "2018-08-07T16:53:22Z",
        "updatedAt" : "2018-08-08T04:27:18Z",
        "lastEditedBy" : "fbb90de5-459e-43f3-969b-110ed8a91f5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4690f4aecc2f135f7b504c401dd3237ccff4c33",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +339,343 @@\ttime.Sleep(100 * time.Millisecond)\n\t_, err = aggregatorDiscoveryClient.Discovery().ServerResources()\n\tassertWardleUnavailableDiscoveryError(t, err)\n\n\t_, err = aggregatorClient.ApiregistrationV1beta1().APIServices().Create(&apiregistrationv1beta1.APIService{"
  },
  {
    "id" : "160b9b1c-92a7-4db3-8eca-0b7084d7a9a9",
    "prId" : 66932,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66932#pullrequestreview-143608213",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81e99f79-d75b-4ce3-a38c-52d27e782b96",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "call `t.Helper()` at the top of this method to make sure failures report the line number where this was called",
        "createdAt" : "2018-08-06T14:09:43Z",
        "updatedAt" : "2018-08-08T04:27:18Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4690f4aecc2f135f7b504c401dd3237ccff4c33",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +366,370 @@\nfunc assertWardleUnavailableDiscoveryError(t *testing.T, err error) {\n\tif err == nil {\n\t\tt.Fatal(\"Discovery call expected to return failed unavailable service\")\n\t}"
  },
  {
    "id" : "c4b33cdc-055a-4035-bddb-114e0a86b661",
    "prId" : 66932,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66932#pullrequestreview-143608735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66926910-58b3-4114-bf4b-3e36345fd745",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "should be able to drop this if we create a Service object above",
        "createdAt" : "2018-08-06T14:10:58Z",
        "updatedAt" : "2018-08-08T04:27:18Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4690f4aecc2f135f7b504c401dd3237ccff4c33",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +360,364 @@\ttime.Sleep(100 * time.Millisecond)\n\t_, err = aggregatorDiscoveryClient.Discovery().ServerResources()\n\tassertWardleUnavailableDiscoveryError(t, err)\n\n\t// TODO figure out how to turn on enough of services and dns to run more"
  },
  {
    "id" : "14b72853-b903-4a22-be43-4d87e821a557",
    "prId" : 62659,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62659#pullrequestreview-112529390",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13e3cd45-66ef-44cc-95b5-ae082be6c23b",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Why the change?",
        "createdAt" : "2018-04-16T18:02:55Z",
        "updatedAt" : "2018-04-17T14:00:55Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "6e274dca-fc8f-4a16-ab18-ccbf13fe20db",
        "parentId" : "13e3cd45-66ef-44cc-95b5-ae082be6c23b",
        "authorId" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "body" : "It was flaking on my machine when it was under load (so I synced it with the values in the ETCD test).",
        "createdAt" : "2018-04-16T18:10:03Z",
        "updatedAt" : "2018-04-17T14:00:55Z",
        "lastEditedBy" : "e58080d6-2177-419f-a546-b51075d7bcb8",
        "tags" : [
        ]
      }
    ],
    "commit" : "300751393b4d47c3c5522a4812db9414c4234f96",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +136,140 @@\n\t// just use json because everyone speaks it\n\terr = wait.PollImmediate(time.Second, time.Minute, func() (done bool, err error) {\n\t\tobj := kubeClientConfigValue.Load()\n\t\tif obj == nil {"
  },
  {
    "id" : "a32f9b9d-4ab2-43b9-83c6-139715c68f74",
    "prId" : 58937,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58937#pullrequestreview-92601204",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d77ec763-852d-45a7-8968-f7eef6459de1",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "why this change?",
        "createdAt" : "2018-01-30T13:39:45Z",
        "updatedAt" : "2018-02-13T12:47:16Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "9d5a5146-16db-4cb8-93a5-39d709120cf9",
        "parentId" : "d77ec763-852d-45a7-8968-f7eef6459de1",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Just because it is more strict? (as the listener will be active here already)",
        "createdAt" : "2018-01-30T13:40:11Z",
        "updatedAt" : "2018-02-13T12:47:16Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "e4559469-546f-4dbc-9856-56288244eebb",
        "parentId" : "d77ec763-852d-45a7-8968-f7eef6459de1",
        "authorId" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "body" : "Yes",
        "createdAt" : "2018-01-30T13:59:56Z",
        "updatedAt" : "2018-02-13T12:47:16Z",
        "lastEditedBy" : "c29e1906-5f0b-4d7b-af8b-d664805e8c8e",
        "tags" : [
        ]
      },
      {
        "id" : "356f3a3f-e605-4458-9516-ffeaaca97a7b",
        "parentId" : "d77ec763-852d-45a7-8968-f7eef6459de1",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "ok",
        "createdAt" : "2018-01-30T15:29:33Z",
        "updatedAt" : "2018-02-13T12:47:16Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "468b8bf021cc6488ce16cfad1f471c47021ce78d",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +154,158 @@\n\t\thealthStatus := 0\n\t\tkubeClient.Discovery().RESTClient().Get().AbsPath(\"/healthz\").Do().StatusCode(&healthStatus)\n\t\tif healthStatus != http.StatusOK {\n\t\t\treturn false, nil"
  },
  {
    "id" : "8edb6fa8-47e7-4c83-b659-903c5d9fcc65",
    "prId" : 48444,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48444#pullrequestreview-47710530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a311dd2b-abf9-40e4-9985-c4263a72ba7e",
        "parentId" : null,
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "I think that the returned resources are ordered. Optionally we could assert against a list of expected resources.",
        "createdAt" : "2017-07-03T17:07:25Z",
        "updatedAt" : "2017-07-04T13:44:16Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      }
    ],
    "commit" : "113e9ba1d3ea8806ec59c6c5cf527cf057415bf2",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +450,454 @@\tassert.Equal(t, groupVersion.String(), apiResourceList.GroupVersion)\n\tassert.Equal(t, 2, len(apiResourceList.APIResources))\n\tassert.Equal(t, \"fischers\", apiResourceList.APIResources[0].Name)\n\tassert.False(t, apiResourceList.APIResources[0].Namespaced)\n\tassert.Equal(t, \"flunders\", apiResourceList.APIResources[1].Name)"
  },
  {
    "id" : "62ebd3ca-1d3b-40a1-93c9-409aa207a6cd",
    "prId" : 42328,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42328#pullrequestreview-24572812",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbd402c5-8b19-47fc-87ac-26aa3dea1fb4",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "This probably could have read from obj, right?",
        "createdAt" : "2017-03-01T19:49:19Z",
        "updatedAt" : "2017-03-01T19:49:19Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "5370bc73-dd3c-47fe-8ec2-0ec136bd1da1",
        "parentId" : "bbd402c5-8b19-47fc-87ac-26aa3dea1fb4",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "But no need to hold this up for that",
        "createdAt" : "2017-03-01T19:50:28Z",
        "updatedAt" : "2017-03-01T19:50:28Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "037f51ae891050c2187394dc7a824300572dd013",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +146,150 @@\t\t\treturn false, nil\n\t\t}\n\t\tkubeClientConfig := kubeClientConfigValue.Load().(*rest.Config)\n\t\tkubeClientConfig.ContentType = \"\"\n\t\tkubeClientConfig.AcceptContentTypes = \"\""
  },
  {
    "id" : "64750070-32d2-41b9-87b8-2ea12a677f53",
    "prId" : 42059,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42059#pullrequestreview-23975607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fdfa3cbb-85b1-487a-98da-26c3a8537881",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "it is!",
        "createdAt" : "2017-02-27T08:43:55Z",
        "updatedAt" : "2017-02-28T13:42:10Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "9200f564-4916-40d5-be82-e7c721dd4a83",
        "parentId" : "fdfa3cbb-85b1-487a-98da-26c3a8537881",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Can this flake?",
        "createdAt" : "2017-02-27T08:44:20Z",
        "updatedAt" : "2017-02-28T13:42:10Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "4369659c-a16f-49fd-8698-c1f20280ba45",
        "parentId" : "fdfa3cbb-85b1-487a-98da-26c3a8537881",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Can this flake?\r\n\r\nNot unless the discovery request path is actually broken.",
        "createdAt" : "2017-02-27T12:43:20Z",
        "updatedAt" : "2017-02-28T13:42:10Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cfe26dece13c77bd17fd10e47d2c00bf5da9b6d",
    "line" : 331,
    "diffHunk" : "@@ -1,1 +294,298 @@\t}\n\n\t// this is ugly, but sleep just a little bit so that the watch is probably observed.  Since nothing will actually be added to discovery\n\t// (the service is missing), we don't have an external signal.\n\ttime.Sleep(100 * time.Millisecond)"
  },
  {
    "id" : "7228813f-2a30-4fa7-8ae4-5dcb44f6a779",
    "prId" : 42059,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42059#pullrequestreview-24004412",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32914a13-adce-47ed-9eb3-fb6f9528dba2",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Why don't we `defer os.Delete` here? We are inside the test function, aren't we?",
        "createdAt" : "2017-02-27T14:59:09Z",
        "updatedAt" : "2017-02-28T13:42:10Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "4f4ebb45-e531-438b-b3be-c50fd2ede8ab",
        "parentId" : "32914a13-adce-47ed-9eb3-fb6f9528dba2",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Disregard, inside of temp dir. All fine.",
        "createdAt" : "2017-02-27T14:59:44Z",
        "updatedAt" : "2017-02-28T13:42:10Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cfe26dece13c77bd17fd10e47d2c00bf5da9b6d",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +90,94 @@\t\tt.Fatal(err)\n\t}\n\tproxyCACertFile, _ := ioutil.TempFile(certDir, \"proxy-ca.crt\")\n\tif err := ioutil.WriteFile(proxyCACertFile.Name(), cert.EncodeCertPEM(proxySigningCert), 0644); err != nil {\n\t\tt.Fatal(err)"
  },
  {
    "id" : "dfc55944-75a1-4734-963f-12823d6b4a52",
    "prId" : 42059,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42059#pullrequestreview-24163657",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d34e99f-41e2-4ae9-9429-42a7ba4b2c2b",
        "parentId" : null,
        "authorId" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "body" : "There's a non-zero chance that ~~binding to~~ selection of an ephemeral local port will fail.  There's also a non-zero chance that the chosen ephemeral port will be bound by another process before the server has a chance to start.  To ensure against flakes, please consider the following strategies:\r\n\r\n - wrap port ~~selection~~ and server start in a function that can be invoked in a loop.  Lightning may strike, but is unlikely to strike multiple times in a row.\r\n - add a startChan parameter to preparedGenericAPIServer.Run that can be closed before waiting for stopChan.  Wait with a timeout on startChan before attempting to verify that the server is up with a client.  This would ensure against the ephemeral port being bound unexpectedly by another process and the client falsely indicating that the server had come up.",
        "createdAt" : "2017-02-27T15:28:14Z",
        "updatedAt" : "2017-02-28T13:42:10Z",
        "lastEditedBy" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "tags" : [
        ]
      },
      {
        "id" : "569217f7-649c-4ab9-ba31-4fbc3ea372be",
        "parentId" : "6d34e99f-41e2-4ae9-9429-42a7ba4b2c2b",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> There's a non-zero chance that binding to selection of an ephemeral local port will fail. There's also a non-zero chance that the chosen ephemeral port will be bound by another process before the server has a chance to start. To ensure against flakes, please consider the following strategies:\r\n\r\nWe don't seem to have a problem with it in origin.  If it becomes a problem, we can add that.",
        "createdAt" : "2017-02-27T16:01:57Z",
        "updatedAt" : "2017-02-28T13:42:10Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "8b6831ba-6ba9-48e5-9ecf-ff5bc0c363bf",
        "parentId" : "6d34e99f-41e2-4ae9-9429-42a7ba4b2c2b",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> This would ensure against the ephemeral port being bound unexpectedly by another process and the client falsely indicating that the server had come up.\r\n\r\nUnless a process stole the generated serving cert (possible, but not very likely), that won't happen.  They'd have to be actively attacking the test and I can't think of reason why someone would do that.",
        "createdAt" : "2017-02-27T16:02:46Z",
        "updatedAt" : "2017-02-28T13:42:10Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "c492cd1f-3ee1-45df-8f7b-76bbbf58238f",
        "parentId" : "6d34e99f-41e2-4ae9-9429-42a7ba4b2c2b",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "In fact, I would like to see that a zero port works with the informer logic. But this is future work. Fine for me as it is.",
        "createdAt" : "2017-02-27T16:09:16Z",
        "updatedAt" : "2017-02-28T13:42:10Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "bae6f622-09fc-4fb7-91fc-81977258774f",
        "parentId" : "6d34e99f-41e2-4ae9-9429-42a7ba4b2c2b",
        "authorId" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "body" : "Ah, you're right regarding the port being bound by another process.  I saw that you were using tls but it didn't fully register.  I've been working on an integration test that uses an insecure port, where certs can't be used to ensure the identity of the server.\r\n\r\nI don't think the absence of a problem in origin thus far is a good indication that a problem won't occur.  Fair enough that it's not critical to this test, but I'm contemplating a general-purpose pattern for managing an apiserver for integration testing and I think that will require more rigor.",
        "createdAt" : "2017-02-27T16:28:51Z",
        "updatedAt" : "2017-02-28T13:42:10Z",
        "lastEditedBy" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "tags" : [
        ]
      },
      {
        "id" : "a3e7942f-a478-41ac-88e2-4f5c0e64bccf",
        "parentId" : "6d34e99f-41e2-4ae9-9429-42a7ba4b2c2b",
        "authorId" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "body" : "@sttts Are you thinking that it should be possible to use a zero port in starting a server?  I originally thought that might be possible, since ``runServer`` appears to return the effective port, but got tripped up by the informer initialization.  \r\n\r\nTaking a look at ``runServer`` again, it looks like the returned port is not guaranteed to be the same as the port that is bound to if the zero port is specified.  Why is the effective port determined in runServer at all?  The way it's written it seems like parsing the address would be simpler.",
        "createdAt" : "2017-02-27T16:41:31Z",
        "updatedAt" : "2017-02-28T13:42:10Z",
        "lastEditedBy" : "e36c9d4f-8037-4359-bd9a-80d5b6c08379",
        "tags" : [
        ]
      },
      {
        "id" : "8761bfaf-865d-436a-8f53-ac0f12578de1",
        "parentId" : "6d34e99f-41e2-4ae9-9429-42a7ba4b2c2b",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "I fear the bootstrap wiring of kube-apiserver doesn't allow this right now. We have to restructure quite a bit to fix it, nothing doable here.",
        "createdAt" : "2017-02-27T16:46:23Z",
        "updatedAt" : "2017-02-28T13:42:10Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "6f99b977-8a8f-4099-8419-2e9b6f8e00bc",
        "parentId" : "6d34e99f-41e2-4ae9-9429-42a7ba4b2c2b",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "@marun which line do you refer to in runServer?",
        "createdAt" : "2017-02-27T16:48:00Z",
        "updatedAt" : "2017-02-28T13:42:10Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "aaf8479c-52c5-4e95-8921-c9df2a069faa",
        "parentId" : "6d34e99f-41e2-4ae9-9429-42a7ba4b2c2b",
        "authorId" : "698f4eb2-501b-44f5-9ff2-a2d82e9ac4f7",
        "body" : "Is there an issue to track this? I would also like to be able to get a random port for testing purposes.",
        "createdAt" : "2017-02-27T22:01:21Z",
        "updatedAt" : "2017-02-28T13:42:10Z",
        "lastEditedBy" : "698f4eb2-501b-44f5-9ff2-a2d82e9ac4f7",
        "tags" : [
        ]
      },
      {
        "id" : "e3323a6a-f0d6-4ec7-bbd1-74cef390196b",
        "parentId" : "6d34e99f-41e2-4ae9-9429-42a7ba4b2c2b",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "https://github.com/kubernetes/kubernetes/issues/42224",
        "createdAt" : "2017-02-28T05:41:46Z",
        "updatedAt" : "2017-02-28T13:42:10Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "5cfe26dece13c77bd17fd10e47d2c00bf5da9b6d",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +74,78 @@\tdefer close(stopCh)\n\n\tkubePort, err := localPort()\n\tif err != nil {\n\t\tt.Fatal(err)"
  }
]