[
  {
    "id" : "e01e0001-04e4-40ce-bf79-7f45eb20150c",
    "prId" : 100496,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100496#pullrequestreview-639247152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c83caf04-116b-4c70-9f2c-82157bdef633",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "You forgot to uncomment the test in this file, probably a mix-up during rebase?",
        "createdAt" : "2021-04-19T18:56:32Z",
        "updatedAt" : "2021-04-22T22:32:59Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "d203ad39-c6af-4548-a438-8253c59abc36",
        "parentId" : "c83caf04-116b-4c70-9f2c-82157bdef633",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Good catch! Fixed. It's passing locally.",
        "createdAt" : "2021-04-19T19:45:57Z",
        "updatedAt" : "2021-04-22T22:32:59Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "acf06c36-490a-421f-8d17-9104842fc820",
        "parentId" : "c83caf04-116b-4c70-9f2c-82157bdef633",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "Awesome, thanks!",
        "createdAt" : "2021-04-19T19:46:22Z",
        "updatedAt" : "2021-04-22T22:32:59Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "d01788cd56629664afde8c1ad4f6ef8e9dcab658",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +1056,1060 @@\t\t\t\t\tt.Fatalf(\"Failed to apply extracted apply configuration to status: %v\", err)\n\t\t\t\t}\n\t\t\t\textractedResult, err := appsv1ac.ExtractDeploymentStatus(result, fieldMgr)\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatalf(\"Failed to extract: %v\", err)"
  },
  {
    "id" : "988be05a-c9c9-412a-8689-d99293b53ec4",
    "prId" : 99759,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99759#pullrequestreview-605901237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1e9d1e6-d5af-4983-8932-edc9815a9343",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "As mentioned in the slack, these tests should cover at least:\r\n1. changing single element, replicas, for example, my example from https://gist.github.com/soltysh/7f5e924e6dee5e69a1ab00c6a72012b1#file-test3-go-L82 fails with validation error b/c labels are removed.\r\n2. updating status (this is what majority of controllers does). ",
        "createdAt" : "2021-03-05T21:21:39Z",
        "updatedAt" : "2021-03-10T15:41:34Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "24374ede-db8d-4bac-ba8d-cccaa9b8cabc",
        "parentId" : "b1e9d1e6-d5af-4983-8932-edc9815a9343",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "I've added a bunch more test cases to both cover these cases and to improve how well the tests document the functionality.",
        "createdAt" : "2021-03-08T00:06:11Z",
        "updatedAt" : "2021-03-10T15:41:34Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5a98bba6144935279509ec4defbb120d387e3fb",
    "line" : 294,
    "diffHunk" : "@@ -1,1 +1164,1168 @@\t}\n\n\texpectedCreateExtracted := appsv1ac.Deployment(\"nginx-apply\", \"default\").\n\t\tWithSpec(appsv1ac.DeploymentSpec().\n\t\t\tWithSelector(metav1ac.LabelSelector()."
  },
  {
    "id" : "07b34cc1-8287-422c-916f-1077e4c2b77b",
    "prId" : 99214,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99214#pullrequestreview-599134490",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14be76fb-e68e-4f8b-aeb6-53e01ed35080",
        "parentId" : null,
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "It's really great to see a test :-)",
        "createdAt" : "2021-02-25T23:33:58Z",
        "updatedAt" : "2021-03-07T01:51:01Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b42cae1575066166d6e63e1f3f5364aeccb0ca3",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +809,813 @@}\n\nfunc TestApplyWithApplyConfiguration(t *testing.T) {\n\tdeployment := appsv1ac.Deployment(\"nginx-deployment-3\", \"default\").\n\t\tWithSpec(appsv1ac.DeploymentSpec()."
  },
  {
    "id" : "2e02bb5a-1660-42c5-963f-b9069c469cfa",
    "prId" : 99214,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/99214#pullrequestreview-605488169",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d652c7f-0685-41ba-8fd5-6c3c2f6186be",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah this is going to be great for controllers. Appending was clearly the right thing to do--imagine passing the status builder around to different parts of the controller. (just thinking out loud)\r\n\r\nWhat happens if I e.g. add the same condition twice? Will the server give an error? It seems like a plausible mistake.",
        "createdAt" : "2021-03-03T23:49:09Z",
        "updatedAt" : "2021-03-07T01:51:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "88f31760-dd98-4d31-898c-f60eede68f8e",
        "parentId" : "8d652c7f-0685-41ba-8fd5-6c3c2f6186be",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "Agreed. I think it's good we arrived at a builder pattern that is more clearly distinct from just \"setters that return the receiver\" since it opens up some additional usage patterns that can complement what would already be possible by directly manipulating the struct. It will be interesting to see what developers do with it in controllers for more complex cases.\r\n\r\n> What happens if I e.g. add the same condition twice? Will the server give an error? It seems like a plausible mistake.\r\n\r\nOh, so is kinda interesting to think about. The server does return a validation error. It's the same error a developer would receive if they passed a struct with the same condition twice:\r\n\r\n```\r\napiserver received an error that is not an metav1.Status: &errors.errorString{s:\"failed to create typed patch object: .status.conditions: duplicate entries for key [type=\\\"ReplicaFailure\\\"]\"}: failed to create typed patch object: .status.conditions: duplicate entries for key [type=\"ReplicaFailure\"]\r\n```\r\n\r\n\r\nSo this is roughly on par with go structs.  But maybe it could be better? I'm just thinking about this now, but it would be possible to generate the builders to be aware of the keys of associative lists and do something with that knowledge. I haven't thought enough about the implications of pushing that type of knowledge to the client-side, and if that's a good idea or not. But just to think about the implications, it would become possible to introduce \"Put<Field>\" builders (I don't know if we'd want to deprecate the \"With<Field>\" builder func if we had \"Put\")",
        "createdAt" : "2021-03-04T16:40:49Z",
        "updatedAt" : "2021-03-07T01:51:01Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      },
      {
        "id" : "f45e8608-a5ab-4053-b6b5-75b1841a7837",
        "parentId" : "8d652c7f-0685-41ba-8fd5-6c3c2f6186be",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "Yeah, we can possibly do that now that we're embedding the schema in the clients :-) Wouldn't have been an option without it.",
        "createdAt" : "2021-03-04T16:49:43Z",
        "updatedAt" : "2021-03-07T01:51:01Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "8e4f5539-d370-479c-8350-039982d40cd1",
        "parentId" : "8d652c7f-0685-41ba-8fd5-6c3c2f6186be",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I think the server message is clear enough and a client error wouldn't be better unless we could make it a compile time error, which I don't think we can?",
        "createdAt" : "2021-03-04T17:08:10Z",
        "updatedAt" : "2021-03-07T01:51:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "cc587a85-e9a7-4647-90ab-bd4638df5932",
        "parentId" : "8d652c7f-0685-41ba-8fd5-6c3c2f6186be",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "Yeah, server error is fine, I agree. I was referring to the ability to overwrite the entry (which we can do if we have schema knowledge)",
        "createdAt" : "2021-03-04T17:10:04Z",
        "updatedAt" : "2021-03-07T01:51:01Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "1e58f397-b032-40e1-8bd2-dbb6d3ae3371",
        "parentId" : "8d652c7f-0685-41ba-8fd5-6c3c2f6186be",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "oh, that's an interesting idea. But I think it might cover up a client bug that they would prefer to know about?",
        "createdAt" : "2021-03-04T17:13:24Z",
        "updatedAt" : "2021-03-07T01:51:01Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "20874472-ee43-49d4-866b-d878d2188ad3",
        "parentId" : "8d652c7f-0685-41ba-8fd5-6c3c2f6186be",
        "authorId" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "body" : "Yeah, I agree. The whole conflict thing is to help people realize that they overwrite values by accident.\r\nOn the other hand, it's a little challenging to find/remove/replace if that's really what you want to do. We could help them find possible duplicate entries, and/or remove by key in associative lists.  (not something we should do in that release).",
        "createdAt" : "2021-03-04T17:17:03Z",
        "updatedAt" : "2021-03-07T01:51:01Z",
        "lastEditedBy" : "a139439a-9f9e-4518-b4f3-9c602d956c57",
        "tags" : [
        ]
      },
      {
        "id" : "d33b3469-beb4-415e-90ad-b355dbef999e",
        "parentId" : "8d652c7f-0685-41ba-8fd5-6c3c2f6186be",
        "authorId" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "body" : "I'll added this to the list of things to discuss more post GA",
        "createdAt" : "2021-03-05T18:22:23Z",
        "updatedAt" : "2021-03-07T01:51:01Z",
        "lastEditedBy" : "d4f34d8f-5341-4ac1-b8b2-5e5f11e23a5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b42cae1575066166d6e63e1f3f5364aeccb0ca3",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +865,869 @@\t\t\t\t\tWithMessage(\"apply status test\").\n\t\t\t\t\tWithReason(\"TestApplyWithApplyConfiguration\"),\n\t\t\t),\n\t\t)\n\tobj, err = c.AppsV1().Deployments(\"default\").ApplyStatus(context.TODO(), statusApply, metav1.ApplyOptions{FieldManager: \"test-mgr\", Force: true})"
  },
  {
    "id" : "f0f1b7b3-d6cb-403e-82e6-6493f2b8a9a6",
    "prId" : 42327,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42327#pullrequestreview-24520112",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe630d93-c8e6-44b9-9105-6045614109ed",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "`result` is an error itself? This survives if result itself is nil?",
        "createdAt" : "2017-03-01T16:02:40Z",
        "updatedAt" : "2017-03-01T16:32:18Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "b6a066a0-cc8a-41d0-a634-d4122f942973",
        "parentId" : "fe630d93-c8e6-44b9-9105-6045614109ed",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> result is an error itself? This survives if result itself is nil?\r\n\r\nresult is never nil.",
        "createdAt" : "2017-03-01T16:03:10Z",
        "updatedAt" : "2017-03-01T16:32:18Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "d0f890c9-213f-42f9-85fa-e9996aa64706",
        "parentId" : "fe630d93-c8e6-44b9-9105-6045614109ed",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Misread the code. The Error call is removed.",
        "createdAt" : "2017-03-01T16:20:48Z",
        "updatedAt" : "2017-03-01T16:32:18Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea887557d36cec45744c11019aa3fd64d44f24f7",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +275,279 @@\t\t\tBody(body).\n\t\t\tDo()\n\t\tif result.Error() != nil {\n\t\t\treturn result.Error()\n\t\t}"
  },
  {
    "id" : "8f539cbf-d6c5-42c8-b617-72b3be72d074",
    "prId" : 27077,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65a4fdff-2a23-4738-959e-efb657403bef",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I can't comment on the above file, but shouldn't package in rbac_test.go be changed to auth ?\n",
        "createdAt" : "2016-07-07T07:02:41Z",
        "updatedAt" : "2016-07-07T07:54:43Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "8c9a61db-8b5f-4160-beb3-08a6edc72c4a",
        "parentId" : "65a4fdff-2a23-4738-959e-efb657403bef",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Fixed.\n",
        "createdAt" : "2016-07-07T07:56:16Z",
        "updatedAt" : "2016-07-07T07:56:16Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "81e67c04034f166913f459fa24478ee282099c7c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +17,21 @@*/\n\npackage client\n\nimport ("
  }
]