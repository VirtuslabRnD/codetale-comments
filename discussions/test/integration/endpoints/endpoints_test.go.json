[
  {
    "id" : "e412646b-19c4-46f2-86f7-28927039a43b",
    "prId" : 103645,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103645#pullrequestreview-704674365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5960df21-992b-4c2e-8713-557973958ef0",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "no need for a change in this PR, but noting that this and the err check in the API call bellow are dropping the underlying error.\r\n`t.Fatalf(\"error checking for no endpoints with terminating pods: %v\", err)` would always print \"timeout waiting for condition\".\r\n\r\nthis is a problem in a lot of places though.",
        "createdAt" : "2021-07-12T21:21:02Z",
        "updatedAt" : "2021-07-12T21:29:30Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "a01f3807-0ea3-4b09-92b8-56b3d9c23f72",
        "parentId" : "5960df21-992b-4c2e-8713-557973958ef0",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "you are right, but integration tests failures are easy to reproduce and is not a big issue like in the e2e tests,",
        "createdAt" : "2021-07-12T21:38:24Z",
        "updatedAt" : "2021-07-12T21:38:24Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "63d66dd3-9603-414a-af5f-01340435c096",
        "parentId" : "5960df21-992b-4c2e-8713-557973958ef0",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "> t.Fatalf(\"error checking for no endpoints with terminating pods: %v\", err) would always print \"timeout waiting for condition\".\r\n\r\n> this is a problem in a lot of places though.\r\n\r\nI've been mulling over this for a bit actually. If we return an error there, it cancels the poll which makes transient errors fail the test, leading to more flakes. Returning nil allows for retries but hides the error with just \"timed out waiting for condition\". \r\n\r\n",
        "createdAt" : "2021-07-13T01:16:31Z",
        "updatedAt" : "2021-07-13T01:16:31Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "cbfc8887-b13b-42f4-9240-3e209a75803a",
        "parentId" : "5960df21-992b-4c2e-8713-557973958ef0",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "i've seen it being stored as `lastError` in a few places.\r\n\r\n```\r\nlastError = nil // optionally reset on each iteration\r\n\r\n...\r\n\r\nif err != nil {\r\n\tlastError = err\r\n\treturn false, nil\r\n}\r\n\r\n...\r\n\r\nif err != nil {\r\n\tif lastError == nil {\r\n\t\tlastError = err\r\n\t}\r\n\t...\r\n}\r\n```\r\n",
        "createdAt" : "2021-07-13T01:35:25Z",
        "updatedAt" : "2021-07-13T01:36:53Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "68694c45-5caf-408c-a49a-e1dc95fc3323",
        "parentId" : "5960df21-992b-4c2e-8713-557973958ef0",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "yeah that's fair, but it would get so messy if we had to do that everytime we called wait.Poll :grimacing: ",
        "createdAt" : "2021-07-13T01:45:37Z",
        "updatedAt" : "2021-07-13T01:45:37Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fa641b9add3652c25b5120106571b49c40a98e2",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +303,307 @@\t\tif err != nil {\n\t\t\treturn false, nil\n\t\t}\n\n\t\tif pod.DeletionTimestamp == nil {"
  },
  {
    "id" : "4957c421-22d7-4fa2-b5ca-3339f9a118e3",
    "prId" : 103645,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103645#pullrequestreview-705453215",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d759d66a-5b9f-462d-938b-1ecf2fb2afc0",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "i think a question (that i have here) is whether two subsequent API calls - \"delete\" then quickly \"get\" would *always* result in the same behavior; i.e. would it always have the pod present for a while with a deletion timestamp.\r\n\r\npresumably yes, but can it flake if \"get\" gets delayed?\r\n",
        "createdAt" : "2021-07-12T21:28:51Z",
        "updatedAt" : "2021-07-12T21:28:51Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "8e804fb0-8f21-4390-b515-234d4d30368f",
        "parentId" : "d759d66a-5b9f-462d-938b-1ecf2fb2afc0",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "I think that Delete() set the deltion timestamp synchronously, if the pod object doesn't exist the test must fail",
        "createdAt" : "2021-07-12T21:40:06Z",
        "updatedAt" : "2021-07-12T21:40:06Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "a354c4a0-4dbb-48ba-8e91-6b06d3f669ad",
        "parentId" : "d759d66a-5b9f-462d-938b-1ecf2fb2afc0",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "If you want to guarantee that you observe the pod in a state of partial deletion, you *have* to set a finalizer on it.",
        "createdAt" : "2021-07-13T16:18:53Z",
        "updatedAt" : "2021-07-13T16:18:53Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "33e97ab7-7e8d-4645-a861-ac69ec630c8b",
        "parentId" : "d759d66a-5b9f-462d-938b-1ecf2fb2afc0",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It is easy to add on line 199 above. But then you'll have to remove it manually somewhere in this test.",
        "createdAt" : "2021-07-13T16:20:19Z",
        "updatedAt" : "2021-07-13T16:20:19Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9a2c82ad-2250-487a-8956-c6876f1f714c",
        "parentId" : "d759d66a-5b9f-462d-938b-1ecf2fb2afc0",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I think this test/check is relying on pod graceful deletion behavior running in an integration test without the node controller or kubelet",
        "createdAt" : "2021-07-13T16:23:41Z",
        "updatedAt" : "2021-07-13T16:23:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ff834546-d7cd-46f9-93c0-b6e3c6265a16",
        "parentId" : "d759d66a-5b9f-462d-938b-1ecf2fb2afc0",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "> I think this test/check is relying on pod graceful deletion behavior running in an integration test without the node controller or kubelet\r\n\r\nyes, and there was a longer discussion on it here https://github.com/kubernetes/kubernetes/pull/103621#discussion_r667214593. Do we think this is acceptable or should we be explicit and add a finalizer?",
        "createdAt" : "2021-07-13T16:33:43Z",
        "updatedAt" : "2021-07-13T16:33:43Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "ffdcdbf3-5fb0-4039-928a-6a298eaf3f6b",
        "parentId" : "d759d66a-5b9f-462d-938b-1ecf2fb2afc0",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Or turn this test into an e2e test so we can actually use `terminationGracePeriod`? ",
        "createdAt" : "2021-07-13T16:34:24Z",
        "updatedAt" : "2021-07-13T16:34:24Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "9afcbdee-3b30-4950-b5e1-9350b8645803",
        "parentId" : "d759d66a-5b9f-462d-938b-1ecf2fb2afc0",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Ah, there's no controllers? OK, maybe this won't be racy.",
        "createdAt" : "2021-07-13T16:49:43Z",
        "updatedAt" : "2021-07-13T16:49:43Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a7e86598-0445-4409-93a5-c842d3e5d73a",
        "parentId" : "d759d66a-5b9f-462d-938b-1ecf2fb2afc0",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "yeah, this test only runs an API server and the endpoint controller, nothing else that would delete a gracefully terminating pod",
        "createdAt" : "2021-07-13T17:16:22Z",
        "updatedAt" : "2021-07-13T17:16:22Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "9fa641b9add3652c25b5120106571b49c40a98e2",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +296,300 @@\tif err := wait.PollImmediate(1*time.Second, 10*time.Second, func() (bool, error) {\n\t\t// Ensure that the recently deleted Pod exists but with a deletion timestamp. If the Pod does not exist,\n\t\t// we should fail the test since it is no longer validating against a terminating pod.\n\t\tpod, err := client.CoreV1().Pods(ns.Name).Get(context.TODO(), pod.Name, metav1.GetOptions{})\n\t\tif apierrors.IsNotFound(err) {"
  },
  {
    "id" : "aa75cbdd-9fe9-481e-b65d-1105140b371f",
    "prId" : 103621,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103621#pullrequestreview-704416424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9aca9cf-8ee7-479e-b760-6f5ac6ccbc85",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "How do you differentiate between deleted and terminated here?\r\n\r\nShould you keep the pod in terminating state for a long time and check the address is not there during that time?",
        "createdAt" : "2021-07-09T21:14:21Z",
        "updatedAt" : "2021-07-09T21:14:21Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "7da8b817-2c28-48cb-8f6a-d4c2e9233656",
        "parentId" : "f9aca9cf-8ee7-479e-b760-6f5ac6ccbc85",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "I had the same question when writing this test. And in this particular integration test, a deleted pod is never actually removed from the system, I think it's because we're not running the garbage collector controller or kubelet but I'm not 100% sure about that. Either way the pod will exist with a deletion timestamp for the duration of this test at least. ",
        "createdAt" : "2021-07-09T21:17:27Z",
        "updatedAt" : "2021-07-13T16:35:10Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "a6b8d3e0-ac9b-4423-94bd-f63338cd860a",
        "parentId" : "f9aca9cf-8ee7-479e-b760-6f5ac6ccbc85",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "This is where a E2E test might add more value, because the termination grace period we set on the pod will define this behaviour. ",
        "createdAt" : "2021-07-09T21:21:22Z",
        "updatedAt" : "2021-07-09T21:21:22Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "c05f6125-2085-42cb-befd-1fa0bcfefabb",
        "parentId" : "f9aca9cf-8ee7-479e-b760-6f5ac6ccbc85",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "What happens if we add a finalizer to the pod? It won't be deleted but it won't be ready, right?\r\nI thnk there are others tests in integration that simulates this ... I'll take a look next week",
        "createdAt" : "2021-07-10T15:15:14Z",
        "updatedAt" : "2021-07-10T15:15:15Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "e8c53b78-685e-4d2a-959b-a82996a7dca3",
        "parentId" : "f9aca9cf-8ee7-479e-b760-6f5ac6ccbc85",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "> What happens if we add a finalizer to the pod? It won't be deleted but it won't be ready, right?\r\n\r\nIn this integration test specifically, the pod is never actually deleted. But trying to delete the pod sets the deletion timestamp which is what endpoints controller is watching to exclude terminating endpoints.",
        "createdAt" : "2021-07-10T16:48:16Z",
        "updatedAt" : "2021-07-10T16:48:16Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "163eef1a-d46d-43fb-86be-befe373da730",
        "parentId" : "f9aca9cf-8ee7-479e-b760-6f5ac6ccbc85",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "Is not what we want?\r\nTo ensure terminating endpoints are not present?",
        "createdAt" : "2021-07-10T17:47:20Z",
        "updatedAt" : "2021-07-10T17:47:20Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "cd2be37a-a82f-44ea-9f20-ace27eccf834",
        "parentId" : "f9aca9cf-8ee7-479e-b760-6f5ac6ccbc85",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "In this test we want pods to exist with a deletion timestamp, but its associated endpoint should not exist. And this is the current behavior of this test right now.",
        "createdAt" : "2021-07-11T01:33:47Z",
        "updatedAt" : "2021-07-11T01:33:48Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "7b54908f-7a6d-4bb6-8b33-819619de015b",
        "parentId" : "f9aca9cf-8ee7-479e-b760-6f5ac6ccbc85",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "ah, ok, so I thought the `client.CoreV1().Pods(ns.Name).Delete(context.TODO(), pod.Name, metav1.DeleteOptions{})` will delete the pod inmeditialy, but I see it is only setting the deletion timestamp.\r\nThat was the part I was missing, sorry",
        "createdAt" : "2021-07-11T17:31:49Z",
        "updatedAt" : "2021-07-11T17:31:49Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "f20e21be-9f06-4df8-836f-7fdb8329fdc3",
        "parentId" : "f9aca9cf-8ee7-479e-b760-6f5ac6ccbc85",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "fwiw I think it wouldn't hurt to assert the deletion timestamp behavior here so we know we're not testing against a fully deleted pod. Will try to circle back with that",
        "createdAt" : "2021-07-11T22:37:00Z",
        "updatedAt" : "2021-07-11T22:37:00Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "709f39fe-e731-4ca5-b162-3a94c31d8be0",
        "parentId" : "f9aca9cf-8ee7-479e-b760-6f5ac6ccbc85",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "heh, that is what I did to test it :smile: ",
        "createdAt" : "2021-07-11T22:51:24Z",
        "updatedAt" : "2021-07-11T22:51:24Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "0b4d0ef9-7046-4c0b-90ea-0070b6c78bb6",
        "parentId" : "f9aca9cf-8ee7-479e-b760-6f5ac6ccbc85",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Added an extra assertion here https://github.com/kubernetes/kubernetes/pull/103645",
        "createdAt" : "2021-07-12T18:24:38Z",
        "updatedAt" : "2021-07-12T18:24:39Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "2878e472ad7e8dbcd2730517a6f0a73e63002c52",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +290,294 @@\t}\n\n\t// poll until endpoint for deleted Pod is no longer in Endpoints.\n\tif err := wait.PollImmediate(1*time.Second, 10*time.Second, func() (bool, error) {\n\t\tendpoints, err := client.CoreV1().Endpoints(ns.Name).Get(context.TODO(), svc.Name, metav1.GetOptions{})"
  }
]