[
  {
    "id" : "5a355d6a-b668-4118-9332-dc9736e46688",
    "prId" : 53435,
    "prUrl" : "https://github.com/ansible/ansible/pull/53435#pullrequestreview-212385209",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2cadd1b-5bd3-40d7-ac1e-4c2baf2720e8",
        "parentId" : null,
        "authorId" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "body" : "There should also be a mocked instance that appears to be 'stopped' and filters option provided, since the contrib script can only collect running instances (which is actually a bug: https://github.com/ansible/ansible/issues/12233) but the inventory plugin collects all instances without the filter.\r\n```\r\nfilters:\r\n  instance-state-name: running\r\n```\r\nSince the script also doesn't use fallback hostnames there should be just the default script hostname for the plugin\r\n```\r\nhostnames:\r\n  - dns-name\r\n```",
        "createdAt" : "2019-03-08T17:16:20Z",
        "updatedAt" : "2019-03-21T12:43:31Z",
        "lastEditedBy" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3c84c782d25ee29f157084da01af72bd139c923",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +54,58 @@use_contrib_script_compatible_sanitization: True\nstrict: True\nregions:\n    - us-east-1\nhostnames:"
  },
  {
    "id" : "8401f4a3-6be9-4c7e-b337-783c0a69538a",
    "prId" : 53435,
    "prUrl" : "https://github.com/ansible/ansible/pull/53435#pullrequestreview-213927678",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2874bd64-cbe4-4706-a22c-75e7cd9082c1",
        "parentId" : null,
        "authorId" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "body" : "I had put in `ec2_tag_Name: tags.Name`. I don't know 100% for sure if this is correct. It matches in my testing, but that doesn't guarantee that it will always match. I didn't think that `ec2.py` returned `tags`.",
        "createdAt" : "2019-03-09T18:30:51Z",
        "updatedAt" : "2019-03-21T12:43:31Z",
        "lastEditedBy" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "tags" : [
        ]
      },
      {
        "id" : "4315a447-1fc5-4acb-b277-0c4dae128d3c",
        "parentId" : "2874bd64-cbe4-4706-a22c-75e7cd9082c1",
        "authorId" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "body" : "It doesn't return tags. This is actually being used to compare the host vars; ec2.py script returned safe keys and unsafe values. The corner cases like this are pretty interesting.",
        "createdAt" : "2019-03-11T14:06:37Z",
        "updatedAt" : "2019-03-21T12:43:31Z",
        "lastEditedBy" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "tags" : [
        ]
      },
      {
        "id" : "b345258b-53cf-40f9-8592-cb46df5b7af6",
        "parentId" : "2874bd64-cbe4-4706-a22c-75e7cd9082c1",
        "authorId" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "body" : "e.g. \"ec2_tag_key_with_hyphens\": \"value:with:colons\"\r\nIn this case hostvars are also influenced by replace_dash_in_groups = True.",
        "createdAt" : "2019-03-11T14:15:35Z",
        "updatedAt" : "2019-03-21T12:43:31Z",
        "lastEditedBy" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "tags" : [
        ]
      },
      {
        "id" : "5250751d-eef0-460e-96c5-057593901fbf",
        "parentId" : "2874bd64-cbe4-4706-a22c-75e7cd9082c1",
        "authorId" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "body" : "thanks, I can read that better now. So this takes the `tags` hostvar and scrubs non-ascii/underscore characters from the keys. Then it saves it back to the same `tags` key, and that's used elsewhere.",
        "createdAt" : "2019-03-13T12:47:52Z",
        "updatedAt" : "2019-03-21T12:43:31Z",
        "lastEditedBy" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3c84c782d25ee29f157084da01af72bd139c923",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +116,120 @@  ec2_virtualization_type: virtualization_type\n  ec2_vpc_id: vpc_id\n  tags: dict(tags.keys() | map('regex_replace', '[^A-Za-z0-9\\_]', '_') | list | zip(tags.values() | list))\n\nkeyed_groups:"
  },
  {
    "id" : "fa27dc4b-8fe0-42be-9336-4ffcc9e0f366",
    "prId" : 53435,
    "prUrl" : "https://github.com/ansible/ansible/pull/53435#pullrequestreview-215278682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9023bd72-3c83-4678-82ca-d149f5068cad",
        "parentId" : null,
        "authorId" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "body" : "I don't know how much you talked to Elijah about this, so I could be repeating things, but we were throwing around the idea that we would test the _current_ values that the plugin returns.\r\n\r\nI don't necessarily think there's value in testing this complex `compose` and `keyed_group` syntax, because if the source variables are there, there shouldn't be a problem.\r\n\r\nWe have a list of \"favorite variables\" that we are going to check for in integration testing. Those are in the old names now, but that set of variables can be trivially converted to a set of new variables.\r\n\r\nThe list of new variables we would want assertions on would include vars that keyed_groups sourced. So `security_groups[0]['name']`, for example, would be one. Meaning, we could assert that hostvars from the plugin has the security_groups list with at least 1 entry, which has a name.\r\n\r\nIdeally, those supported variables would go into Ansible core documentation, they would be copied over, and would be surfaced in the UI of AWX / Tower... eventually.",
        "createdAt" : "2019-03-09T18:47:05Z",
        "updatedAt" : "2019-03-21T12:43:31Z",
        "lastEditedBy" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "tags" : [
        ]
      },
      {
        "id" : "7ef6bd03-29f4-4fbf-9861-27299c2bb651",
        "parentId" : "9023bd72-3c83-4678-82ca-d149f5068cad",
        "authorId" : "02e74335-a6fd-48e7-acea-88529c13164d",
        "body" : "We have no guarantee that -any- source variables won't disappear or change with every future PR. This test asserts that doesn't happen.",
        "createdAt" : "2019-03-15T23:00:43Z",
        "updatedAt" : "2019-03-21T12:43:31Z",
        "lastEditedBy" : "02e74335-a6fd-48e7-acea-88529c13164d",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3c84c782d25ee29f157084da01af72bd139c923",
    "line" : 142,
    "diffHunk" : "@@ -1,1 +140,144 @@    separator: \"\"\n  - key: security_groups | map(attribute='group_name') | map(\"regex_replace\", \"-\", \"_\") | list\n    prefix: security_group\nEOF\n"
  },
  {
    "id" : "7823a976-8f71-44f8-977a-8affd9b89060",
    "prId" : 53435,
    "prUrl" : "https://github.com/ansible/ansible/pull/53435#pullrequestreview-214013858",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ad72203-0c5b-4a50-8009-11f8dd8d0b75",
        "parentId" : null,
        "authorId" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "body" : "The documented cache default is \"no\", so I intend to not provide the key when building syntax like this, let me know if I should change that practice.\r\n\r\nI commented elsewhere about how I think it would be an easier task for you to just assert on the modern variables.\r\n\r\nIf you _are_ going to use this, then I think you should add `strict: True`. Otherwise you don't really know if this is or isn't working, and there will probably be surprises later on.",
        "createdAt" : "2019-03-13T12:51:41Z",
        "updatedAt" : "2019-03-21T12:43:31Z",
        "lastEditedBy" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "tags" : [
        ]
      },
      {
        "id" : "3c4fcb85-593e-4b0a-b81c-26f97697013f",
        "parentId" : "6ad72203-0c5b-4a50-8009-11f8dd8d0b75",
        "authorId" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "body" : "Good point about `strict`, will fix that in my next commit.\r\n\r\nYes, cache will stay off by default.\r\n\r\nI think there's some security in specificity of testing and benefit to testing the output of the script since core has no tests for it. And it may be helpful to users if there is more than an implicit test for how to replicate script behavior. We would like to test for all the script hostvars. Since I'm just adding onto @jctanner's inspiration I'll leave that decision up to him though since it would be taking this PR in a new direction.",
        "createdAt" : "2019-03-13T15:07:09Z",
        "updatedAt" : "2019-03-21T12:43:31Z",
        "lastEditedBy" : "6b7e4265-ae86-4269-9bd7-f8ffa9085df6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3c84c782d25ee29f157084da01af72bd139c923",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +51,55 @@cat << EOF > \"$OUTPUT_DIR/test.aws_ec2.yml\"\nplugin: aws_ec2\ncache: False\nuse_contrib_script_compatible_sanitization: True\nstrict: True"
  }
]