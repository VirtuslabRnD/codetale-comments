[
  {
    "id" : "2dcd2d19-92e2-4908-938a-37a7122bc7d3",
    "prId" : 37520,
    "prUrl" : "https://github.com/ansible/ansible/pull/37520#pullrequestreview-105394309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ced2441-fd62-4ac6-a5ce-5035a43c009a",
        "parentId" : null,
        "authorId" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "body" : "Actually, I'm a little skeptical that this worked correctly. I can't easily recognize the pattern here, because the root-level keys should be resources like job templates, not either a dictionary of \"success\". Also, this is a string... which makes me wonder why Ansible accepted it when the arg spec gave dict.",
        "createdAt" : "2018-03-20T13:02:10Z",
        "updatedAt" : "2018-08-29T15:03:19Z",
        "lastEditedBy" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "tags" : [
        ]
      },
      {
        "id" : "8a34f576-c36a-4b35-934e-067a6d192b7f",
        "parentId" : "1ced2441-fd62-4ac6-a5ce-5035a43c009a",
        "authorId" : "c0426599-9364-40ee-a86c-212d6ba90394",
        "body" : "`'[{\"success\": [{\"job_template\": \"my-job-1\"}], \"job_template\": \"my-job-2\"}]'` creates a dummy workflow were the two jobs are linked to the starting point (that's how it appears in my AWX UI). I thought it was enough to test the workflow creation. I can write something more complex if needed.\r\n\r\nRegarding Ansible accepting that JSON as a string, I guess it's the normal behaviour as I'm not requesting any `type=` in my AnsibleModule.argument_spec call. Maybe I should specify `type='str'` in the code for it to be clearer but as it was done without it in many modules I checked, I did the same.",
        "createdAt" : "2018-03-20T14:37:04Z",
        "updatedAt" : "2018-08-29T15:03:19Z",
        "lastEditedBy" : "c0426599-9364-40ee-a86c-212d6ba90394",
        "tags" : [
        ]
      },
      {
        "id" : "ddc4012d-d4b8-44bc-8a69-76031c4413ad",
        "parentId" : "1ced2441-fd62-4ac6-a5ce-5035a43c009a",
        "authorId" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "body" : "I believe you, that probably does work, it's just that I got hung up on the syntax.\r\n\r\nConsider, for your description\r\n\r\n> dummy workflow were the two jobs are linked to the starting point\r\n\r\nI would expect just\r\n\r\n```yaml\r\n    schema: '[\"job_template\": \"my-job-1\", \"job_template\": \"my-job-2\"]'\r\n```\r\n\r\nThe root-level node doesn't need the success/failure distinction (they're root level, they always run).\r\n\r\nGranted, I see that this is not a dictionary, it's a list. Nonetheless, it's still accepted by the python JSON parser.\r\n\r\nhaving both \"success\" and \"job_template\" inside of the same dictionary strikes me as a little bit of type confusion. I'm not surprised that tower-cli gobbles that up without complaining, but maybe it does not do much (if any) validation, so maybe it should error in that case.",
        "createdAt" : "2018-03-20T15:13:44Z",
        "updatedAt" : "2018-08-29T15:03:19Z",
        "lastEditedBy" : "38b7d9c4-df1f-44d2-a0a2-539900170fbe",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f991c30dc77009e4c7fafbd3483a97e7688ee61",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +63,67 @@  tower_workflow_template:\n    name: my-workflow\n    schema: '[{\"success\": [{\"job_template\": \"my-job-1\"}], \"job_template\": \"my-job-2\"}]'\n  register: result\n"
  }
]