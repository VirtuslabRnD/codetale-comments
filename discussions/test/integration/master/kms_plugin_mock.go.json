[
  {
    "id" : "7e5411b3-2afb-4240-afe8-1aaaaf0ef055",
    "prId" : 64575,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64575#pullrequestreview-124988481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cf8aaa5-96cb-4dd2-a6cb-cb8849278979",
        "parentId" : null,
        "authorId" : "e81e699e-eb6c-4380-bfd5-16ab81ac51d6",
        "body" : "should this be `/@kms-provider.sock` ?",
        "createdAt" : "2018-05-31T21:25:18Z",
        "updatedAt" : "2018-06-25T16:46:52Z",
        "lastEditedBy" : "e81e699e-eb6c-4380-bfd5-16ab81ac51d6",
        "tags" : [
        ]
      },
      {
        "id" : "efefa073-cf78-44cd-b54f-9d453e8b5a50",
        "parentId" : "1cf8aaa5-96cb-4dd2-a6cb-cb8849278979",
        "authorId" : "6a76eaae-b750-44a3-afa5-0d64814ae70a",
        "body" : "This is actually correct, because sockFile goes into net.Listen which is fine the @ sign in the file name.\r\nIn K8S encryption config, the endpoint should be provided in the format of unix:///temp/socket.sock. This endpoint is parsed via url.Parse, which fails to extract the path when supplied unix://@kms-plugin.sock. Hence, need to provide an extra / and the need for extra logic in the parseEndpoint to remove this extra /.\r\nNot sure if there is a more elegant way to deal with this.\r\nNote: the decision to use unix:///socke.path format was somewhat arbitrary.\r\n\r\n\r\n",
        "createdAt" : "2018-05-31T21:47:42Z",
        "updatedAt" : "2018-06-25T16:46:52Z",
        "lastEditedBy" : "6a76eaae-b750-44a3-afa5-0d64814ae70a",
        "tags" : [
        ]
      }
    ],
    "commit" : "01008911687c27b15aee4766a70786684bdb3f01",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +33,37 @@const (\n\tkmsAPIVersion = \"v1beta1\"\n\tsockFile      = \"@kms-provider.sock\"\n\tunixProtocol  = \"unix\"\n)"
  },
  {
    "id" : "741765ef-1546-4145-9e24-1a14152093a5",
    "prId" : 60236,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60236#pullrequestreview-98974867",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ea08920-7448-4941-b278-ca6c784fd214",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "why are you using channels as opposed to a slice?",
        "createdAt" : "2018-02-23T03:58:50Z",
        "updatedAt" : "2018-02-27T23:53:50Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "fdd18a2f-f20a-4eda-a5fd-b440cb8ef9f7",
        "parentId" : "0ea08920-7448-4941-b278-ca6c784fd214",
        "authorId" : "6a76eaae-b750-44a3-afa5-0d64814ae70a",
        "body" : "It was suggested to me in the past that channels are preferred to direct memory access when it comes to communication between GO routines.\r\n\r\nOf course, a slice or even kmsapi.EncryptRequest would work just fine here.\r\n",
        "createdAt" : "2018-02-23T16:43:44Z",
        "updatedAt" : "2018-02-27T23:53:50Z",
        "lastEditedBy" : "6a76eaae-b750-44a3-afa5-0d64814ae70a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3be7e189a8b0abc3cc15a0c85e22f8c0edb246e",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +44,48 @@\t// Allow users of the plugin to sense requests that were passed to KMS.\n\tencryptRequest chan *kmsapi.EncryptRequest\n\tdecryptRequest chan *kmsapi.DecryptRequest\n}\n"
  },
  {
    "id" : "39b67a69-b976-4a5c-938c-6ba212da2c6a",
    "prId" : 60236,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60236#pullrequestreview-98976443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63e3259c-33a4-4c02-9da0-eabb78144f6d",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "this seems like it should be a private function.",
        "createdAt" : "2018-02-23T04:03:40Z",
        "updatedAt" : "2018-02-27T23:53:50Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "cc4e0ac5-66be-4ddf-b5c7-41f0c17d6d5a",
        "parentId" : "63e3259c-33a4-4c02-9da0-eabb78144f6d",
        "authorId" : "6a76eaae-b750-44a3-afa5-0d64814ae70a",
        "body" : "I plan to suggest the use of this mock in grpc_service_unix_test.go.",
        "createdAt" : "2018-02-23T16:48:19Z",
        "updatedAt" : "2018-02-27T23:53:50Z",
        "lastEditedBy" : "6a76eaae-b750-44a3-afa5-0d64814ae70a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3be7e189a8b0abc3cc15a0c85e22f8c0edb246e",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +47,51 @@}\n\nfunc NewBase64Plugin() (*base64Plugin, error) {\n\tif err := cleanSockFile(); err != nil {\n\t\treturn nil, err"
  }
]