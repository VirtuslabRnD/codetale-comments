[
  {
    "id" : "a099503a-9d50-4018-b79b-5f85899a634b",
    "prId" : 102597,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/102597#pullrequestreview-676599320",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75c65891-5914-472e-8656-0537bccdac04",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "i think a problem around the master->controlPlane rename for test/integration was that this is not really a \"control plane\" config, but rather \"apiserver config\".\r\n\r\nis that true?\r\n",
        "createdAt" : "2021-06-04T14:32:43Z",
        "updatedAt" : "2021-06-04T14:32:57Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "2bd62f3e-676a-4146-91cb-0ba368f7eb3e",
        "parentId" : "75c65891-5914-472e-8656-0537bccdac04",
        "authorId" : "000895b1-a34f-4e0b-8da3-6f818dfe1aab",
        "body" : "I refer to the PR of comment on https://github.com/kubernetes/kubernetes/pull/100181#issuecomment-799591531\r\n\r\nThe #100181 PR [finally rename](https://github.com/kubernetes/kubernetes/pull/100181/files#diff-9fcef3e29748edaefb383362b5894ea1d79178194e57adf0598ee0ad39840be8R155) `masterConfig` to `controlPlaneConfig`. @neolit123 \r\n",
        "createdAt" : "2021-06-04T14:56:26Z",
        "updatedAt" : "2021-06-04T15:27:16Z",
        "lastEditedBy" : "000895b1-a34f-4e0b-8da3-6f818dfe1aab",
        "tags" : [
        ]
      },
      {
        "id" : "0a47d571-8ef1-4c2b-8499-f92211a004be",
        "parentId" : "75c65891-5914-472e-8656-0537bccdac04",
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "https://github.com/kubernetes/kubernetes/pull/100181#discussion_r594825941 ? cc @pacoxu ",
        "createdAt" : "2021-06-04T19:18:16Z",
        "updatedAt" : "2021-06-04T19:18:17Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "0faba60e-703b-4fc0-94ea-ff49079316dc",
        "parentId" : "75c65891-5914-472e-8656-0537bccdac04",
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "I see that the other names in that comment didn't happen though. and that after a bit of deliberation https://github.com/kubernetes/kubernetes/pull/100181#issuecomment-799591531 suggests to just use controlPlane here.",
        "createdAt" : "2021-06-04T19:21:06Z",
        "updatedAt" : "2021-06-04T19:21:06Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      }
    ],
    "commit" : "6871b2b3c7363303e5e619d8b202653e910a3e7a",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +63,67 @@\tcontrolPlaneConfig.GenericConfig.OpenAPIConfig = framework.DefaultOpenAPIConfig()\n\tcontrolPlaneConfig.ExtraConfig.APIResourceConfigSource = resourceConfig\n\t_, s, closeFn := framework.RunAnAPIServer(controlPlaneConfig)\n\n\treturn s, controlPlaneConfig.GenericConfig.LoopbackClientConfig, closeFn"
  },
  {
    "id" : "0f162387-ecbd-4ebe-a2e6-e041d725e994",
    "prId" : 89256,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89256#pullrequestreview-380853096",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfa21bc4-9522-47c9-a591-c541a7f95115",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Could consider returning a `map[priority level name]int` instead of re-getting and searching each time?",
        "createdAt" : "2020-03-24T17:15:17Z",
        "updatedAt" : "2020-04-17T17:16:15Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "1465808b-32c3-4bf6-9b57-472d3fc1c327",
        "parentId" : "bfa21bc4-9522-47c9-a591-c541a7f95115",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "updated",
        "createdAt" : "2020-03-25T04:32:54Z",
        "updatedAt" : "2020-04-17T17:16:15Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "df5dfb46b78691d6e641f765c1a21a2eb554d60e",
    "line" : 156,
    "diffHunk" : "@@ -1,1 +154,158 @@\t\tRESTClient().\n\t\tGet().\n\t\tRequestURI(\"/metrics\").\n\t\tDoRaw(context.Background())\n\tif err != nil {"
  },
  {
    "id" : "8f4b6e6d-a165-4218-96b0-1586e7c1fd5f",
    "prId" : 89256,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89256#pullrequestreview-380854063",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "682f3b22-b114-4b47-aba8-45c7f9567d40",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "We should really get into the habit of writing objects in YAML and decoding them. Not asking for a change, since we do it wrong everywhere. But YAML is easier to copy/paste and reuse in other contexts.",
        "createdAt" : "2020-03-24T17:17:15Z",
        "updatedAt" : "2020-04-17T17:16:15Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "bf84c6f0-9b35-4fee-ae2e-1f49354e350a",
        "parentId" : "682f3b22-b114-4b47-aba8-45c7f9567d40",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "we've been writing tests in this way for a loooong time. and yes writing in YAML-then-decode will help those curious users trying to understand how it works by reading the tests. YAML is easier to copy/paste and verify in their own cluster.\r\n\r\n",
        "createdAt" : "2020-03-25T04:37:32Z",
        "updatedAt" : "2020-04-17T17:16:15Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "df5dfb46b78691d6e641f765c1a21a2eb554d60e",
    "line" : 249,
    "diffHunk" : "@@ -1,1 +247,251 @@\t\treturn nil, nil, err\n\t}\n\tfs, err := c.FlowcontrolV1alpha1().FlowSchemas().Create(context.TODO(), &flowcontrolv1alpha1.FlowSchema{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName: username,"
  },
  {
    "id" : "c8762a45-c338-44b8-b6ec-e633c64c0953",
    "prId" : 89256,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89256#pullrequestreview-392356696",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39d25dae-72c8-401e-a5f0-70ef5edf8672",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Why is `defer` correct here?  I would have expected to need to turn on the feature gate at the start of the test rather than at the end.",
        "createdAt" : "2020-03-25T05:37:29Z",
        "updatedAt" : "2020-04-17T17:16:15Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "6fdb7cfb-f268-4cce-abe2-3d89b7993428",
        "parentId" : "39d25dae-72c8-401e-a5f0-70ef5edf8672",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "note that it's a doubly nested function. `defer func()()` will execute `func()` and the defers the returning function.",
        "createdAt" : "2020-03-25T06:45:04Z",
        "updatedAt" : "2020-04-17T17:16:15Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "ed245aa2-c92d-4b46-9f72-80be457192bf",
        "parentId" : "39d25dae-72c8-401e-a5f0-70ef5edf8672",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Ah, right",
        "createdAt" : "2020-04-13T18:56:33Z",
        "updatedAt" : "2020-04-17T17:16:15Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "df5dfb46b78691d6e641f765c1a21a2eb554d60e",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +68,72 @@\nfunc TestPriorityLevelIsolation(t *testing.T) {\n\tdefer featuregatetesting.SetFeatureGateDuringTest(t, utilfeature.DefaultFeatureGate, genericfeatures.APIPriorityAndFairness, true)()\n\t// NOTE: disabling the feature should fail the test\n\t_, loopbackConfig, closeFn := setup(t)"
  },
  {
    "id" : "2056ed0d-1f2b-49cb-997d-5d49714cf003",
    "prId" : 89256,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89256#pullrequestreview-388791622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42f7bb0d-02cc-4adc-b9f3-20bf2c4f1d1a",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Add a comment stating what the actual expected value is and that we're deliberately lax to make flakes super rare.",
        "createdAt" : "2020-04-06T22:31:22Z",
        "updatedAt" : "2020-04-17T17:16:15Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "3237063e-381e-4543-80cb-d7a421f11a77",
        "parentId" : "42f7bb0d-02cc-4adc-b9f3-20bf2c4f1d1a",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "updated",
        "createdAt" : "2020-04-07T05:23:02Z",
        "updatedAt" : "2020-04-17T17:16:15Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "df5dfb46b78691d6e641f765c1a21a2eb554d60e",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +130,134 @@\tnoxu1RequestCount := reqCounts[priorityLevelNoxu1.Name]\n\tnoxu2RequestCount := reqCounts[priorityLevelNoxu2.Name]\n\n\t// Theoretically, the actual expected value of request counts upon the two priority-level should be\n\t// the equal. We're deliberately lax to make flakes super rare."
  },
  {
    "id" : "15fbc678-1702-4d57-8ba5-2a67fbe0bf17",
    "prId" : 89256,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89256#pullrequestreview-392357383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d95225b2-f274-4d2c-9d69-ddc1fb91624b",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "During the interim period before the suggested config objects are added, the concurrency limit for each of this test's two priority levels will be 4 (that is ceiling(10/3) ).  This test does not control the relative timing of the scrape here and the injection of the suggested config objects.  That makes this a potentially flaky test.\r\n\r\nI can see two easy ways to fix this.  One would be to give each of the priority levels here such a large number of concurrency shares that they will each get a concurrency limit of 4 regardless of whether the suggested config objects have been injected.  The other is to make the server's total concurrency limit 3 and leave these priority levels with 1 share each; this would make each priority level's concurrency limit 1 regardless of whether the suggested config objects have been injected.",
        "createdAt" : "2020-04-07T12:30:27Z",
        "updatedAt" : "2020-04-17T17:16:15Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "b516662d-c52e-4c90-837e-224ae029f392",
        "parentId" : "d95225b2-f274-4d2c-9d69-ddc1fb91624b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I expected this code to just be done in a loop N times, and fail if it takes longer than that to reach the right value.",
        "createdAt" : "2020-04-07T16:17:36Z",
        "updatedAt" : "2020-04-17T17:16:15Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6f6ec71c-066d-4a20-bd31-ad08ed685caf",
        "parentId" : "d95225b2-f274-4d2c-9d69-ddc1fb91624b",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : ">  This test does not control the relative timing of the scrape here and the injection of the suggested config objects\r\n\r\nthe function `framework.RunAMaster(masterConfig)` (in the `setup` function in this test file) only proceeds iff the apiserver's `/healthz` works, which already includes the healthiness of those registered post-start-hooks. so we can be sure that the suggested configs are injected before we checks the shared concurrency, am i missing anything?\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/6747678a396ada2f4761ff104495ddcc3ef050b3/test/integration/framework/master_utils.go#L219-L228\r\n",
        "createdAt" : "2020-04-08T04:00:22Z",
        "updatedAt" : "2020-04-17T17:16:15Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "4dde03e1-c8e4-4425-99a2-a0d97be6c745",
        "parentId" : "d95225b2-f274-4d2c-9d69-ddc1fb91624b",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I am not sure what health means for a webhook, but I see no connection from succcess of injecting suggested config out to anything.",
        "createdAt" : "2020-04-09T23:19:16Z",
        "updatedAt" : "2020-04-17T17:16:15Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "87c912ac-8e3b-445d-892a-77e02f805e39",
        "parentId" : "d95225b2-f274-4d2c-9d69-ddc1fb91624b",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The problem has been resolved by setting the server's total concurrency limit to 2.",
        "createdAt" : "2020-04-13T18:57:35Z",
        "updatedAt" : "2020-04-17T17:16:15Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "df5dfb46b78691d6e641f765c1a21a2eb554d60e",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +96,100 @@\t}\n\n\tif 1 != sharedConcurrency[priorityLevelNoxu1.Name] {\n\t\tt.Errorf(\"unexpected shared concurrency %v instead of %v\", sharedConcurrency[priorityLevelNoxu1.Name], 1)\n\t}"
  }
]