[
  {
    "id" : "db67b4ea-c51f-415f-8104-05f4c725f088",
    "prId" : 100644,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100644#pullrequestreview-624254685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5812a34-01f4-4872-b229-b7d920cba0bc",
        "parentId" : null,
        "authorId" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "body" : "These changes should be fine as external plugins can use them as a library",
        "createdAt" : "2021-03-30T13:32:48Z",
        "updatedAt" : "2021-03-30T18:55:35Z",
        "lastEditedBy" : "31fbce73-ef64-43f8-9faa-047479d8fc32",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7f67b1a63c048fac0b89c0f355206795a9767a7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +76,80 @@// StartScheduler configures and starts a scheduler given a handle to the clientSet interface\n// and event broadcaster. It returns the running scheduler, podInformer and the shutdown function to stop it.\nfunc StartScheduler(clientSet clientset.Interface, kubeConfig *restclient.Config, cfg *kubeschedulerconfig.KubeSchedulerConfiguration) (*scheduler.Scheduler, coreinformers.PodInformer, ShutdownFunc) {\n\tctx, cancel := context.WithCancel(context.Background())\n"
  },
  {
    "id" : "3d4c6b1b-7eba-40ef-947c-8f879838f195",
    "prId" : 88685,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88685#pullrequestreview-367079056",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cbe8510-3950-406c-a02a-d894f3100fb0",
        "parentId" : null,
        "authorId" : "e7b8fd7e-f93b-44b6-b6d0-4331207d901c",
        "body" : "SGTM! But different components have different `TestContext`, such as:\r\nhttps://github.com/kubernetes/kubernetes/blob/master/test/integration/garbagecollector/garbage_collector_test.go#L200-L210\r\n```go\r\ntype testContext struct {\r\n\ttearDown           func()\r\n\tgc                 *garbagecollector.GarbageCollector\r\n\tclientSet          clientset.Interface\r\n\tapiExtensionClient apiextensionsclientset.Interface\r\n\tdynamicClient      dynamic.Interface\r\n\tmetadataClient     metadata.Interface\r\n\tstartGC            func(workers int)\r\n\t// syncPeriod is how often the GC started with startGC will be resynced.\r\n\tsyncPeriod time.Duration\r\n}\r\n```\r\nhttps://github.com/kubernetes/kubernetes/blob/master/test/integration/apiserver/admissionwebhook/admission_test.go#L69-L80\r\n\r\n```go\r\ntype testContext struct {\r\n\tt *testing.T\r\n\r\n\tadmissionHolder *holder\r\n\r\n\tclient    dynamic.Interface\r\n\tclientset clientset.Interface\r\n\tverb      string\r\n\tgvr       schema.GroupVersionResource\r\n\tresource  metav1.APIResource\r\n\tresources map[schema.GroupVersionResource]metav1.APIResource\r\n}\r\n```\r\nhttps://github.com/kubernetes/kubernetes/blob/master/test/integration/volumescheduling/util.go#L42-L52\r\n\r\n```go\r\ntype testContext struct {\r\n\tcloseFn         framework.CloseFunc\r\n\thttpServer      *httptest.Server\r\n\tns              *v1.Namespace\r\n\tclientSet       *clientset.Clientset\r\n\tinformerFactory informers.SharedInformerFactory\r\n\tscheduler       *scheduler.Scheduler\r\n\r\n\tctx      context.Context\r\n\tcancelFn context.CancelFunc\r\n}\r\n```\r\n\r\nThese `testContext` are very different. I'm a little concerned about whether it's appropriate to make `TestContext` as a public dependency. \r\n\r\n\r\n\r\n\r\n\r\n",
        "createdAt" : "2020-03-02T09:53:37Z",
        "updatedAt" : "2020-03-02T09:53:38Z",
        "lastEditedBy" : "e7b8fd7e-f93b-44b6-b6d0-4331207d901c",
        "tags" : [
        ]
      },
      {
        "id" : "8b4ba1c2-070b-4fde-850a-6d25c284a400",
        "parentId" : "6cbe8510-3950-406c-a02a-d894f3100fb0",
        "authorId" : "f51dcd57-be84-4fe6-b939-2e43f488cd3b",
        "body" : "Actually, I am moving the util functions of sig-scheduling and sig-node integration test. For different definitions of `testContext`, we can permit different sig has their own definition. If they decide to move it into the util. They need to adjust the definition of `TestContext` on util to adapt.\r\n\r\nThis PR is just for adapting changes of moving TainBasedEviction test from sig-scheduling to sig-node. https://github.com/kubernetes/kubernetes/issues/87427",
        "createdAt" : "2020-03-02T10:08:43Z",
        "updatedAt" : "2020-03-02T10:13:08Z",
        "lastEditedBy" : "f51dcd57-be84-4fe6-b939-2e43f488cd3b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b67a033de22856752f829d3490732e1c8a629a68",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +149,153 @@\n// TestContext store necessary context info\ntype TestContext struct {\n\tCloseFn         framework.CloseFunc\n\tHTTPServer      *httptest.Server"
  },
  {
    "id" : "0ef7ef29-4757-4923-9d2d-0fd991dab8bb",
    "prId" : 80697,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80697#pullrequestreview-269960313",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06dbbed0-6323-4a26-b9b2-9466ff62b060",
        "parentId" : null,
        "authorId" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "body" : "Why would we prefer this vs. the previous `scheduler.NewFromConfig(config)`?",
        "createdAt" : "2019-08-01T15:32:44Z",
        "updatedAt" : "2019-08-21T11:55:07Z",
        "lastEditedBy" : "a650878f-0c10-41c7-b0fc-033031305d77",
        "tags" : [
        ]
      },
      {
        "id" : "fa0ece24-cf16-48f4-90e1-58bef87c176f",
        "parentId" : "06dbbed0-6323-4a26-b9b2-9466ff62b060",
        "authorId" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "body" : "Please take a look at #71859 which listed in the description.\r\n\r\n",
        "createdAt" : "2019-08-02T02:29:04Z",
        "updatedAt" : "2019-08-21T11:55:07Z",
        "lastEditedBy" : "9829b6c0-e54c-401b-8d97-73e5aa4e83c1",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cfec4d919e3354d86fc71bbe0582550cf60033b",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +107,111 @@\tdefaultProviderName := schedulerconfig.SchedulerDefaultProviderName\n\n\treturn scheduler.New(\n\t\tclientSet,\n\t\tinformerFactory.Core().V1().Nodes(),"
  },
  {
    "id" : "36a6e2b5-ab78-4149-b993-cf8ad7036d1e",
    "prId" : 80697,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80697#pullrequestreview-282192056",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52986e18-e4b4-4a10-8d9a-d3e41287ee01",
        "parentId" : null,
        "authorId" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "body" : "nit: s/create/creates/",
        "createdAt" : "2019-08-30T18:41:13Z",
        "updatedAt" : "2019-08-30T18:58:48Z",
        "lastEditedBy" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cfec4d919e3354d86fc71bbe0582550cf60033b",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +98,102 @@}\n\n// createScheduler create a scheduler with given informer factory and default name.\nfunc createScheduler(\n\tclientSet clientset.Interface,"
  },
  {
    "id" : "420233ec-67e3-4c36-a245-bd536814c1dd",
    "prId" : 78447,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78447#pullrequestreview-261128238",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22f5a0ec-59a4-4848-8d7b-370f8d353e0e",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Also, please squash the commits.",
        "createdAt" : "2019-07-12T06:12:26Z",
        "updatedAt" : "2019-07-12T09:39:11Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "79ee4859-ddcc-437a-a507-b14ad97cf446",
        "parentId" : "22f5a0ec-59a4-4848-8d7b-370f8d353e0e",
        "authorId" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "body" : "Done",
        "createdAt" : "2019-07-12T08:38:51Z",
        "updatedAt" : "2019-07-12T09:39:11Z",
        "lastEditedBy" : "e2ca6907-6765-444e-8bf6-1452233150d6",
        "tags" : [
        ]
      }
    ],
    "commit" : "08522f8e5a1e74ccd318e6f8e2c5acf3da19e264",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +74,78 @@\t\tklog.Fatalf(\"Error creating scheduler: %v\", err)\n\t}\n\tconfig.Recorder = evtBroadcaster.NewRecorder(legacyscheme.Scheme, \"scheduler\")\n\n\tsched := scheduler.NewFromConfig(config)"
  }
]