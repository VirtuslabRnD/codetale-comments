[
  {
    "id" : "43ff2b63-5b13-4b1e-aedd-a4fdcbfe9510",
    "prId" : 1494,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2333b6f-8609-4ef4-88c2-1bbd1349b69b",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Useless diff?\n",
        "createdAt" : "2016-09-11T09:39:32Z",
        "updatedAt" : "2016-09-11T09:39:32Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "46b325373c8ec516be2b6b1c6024ae1c783fbc8f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +415,419 @@\n    val difference = getExisting(dest).isDifferent(source, flags, nerr)\n    difference match {\n      case NotExists => copyFiles(source, dest, partestOutput, flags, nerr, kind)\n      case ExistsSame => // nothing else to do"
  },
  {
    "id" : "4b044766-2f70-4ddc-ba87-d82642a177fa",
    "prId" : 1494,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40820f94-46ee-4057-a765-3e31d5fd4293",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Useless diff?\n",
        "createdAt" : "2016-09-11T09:40:06Z",
        "updatedAt" : "2016-09-11T09:40:06Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "46b325373c8ec516be2b6b1c6024ae1c783fbc8f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +451,455 @@    * that aren't in extensionsToCopy. */\n  private def recCopyFiles(sourceFile: Path, dest: Path): Unit = {\n\n    def copyfile(file: SFile, bytewise: Boolean): Unit = {\n      if (bytewise) {"
  },
  {
    "id" : "4284c0d1-9f9e-4a7b-9043-0e4db41aa205",
    "prId" : 1494,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3a75eff-4e40-4fdf-8439-9f09b4930d26",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Indentation issue (tabs)\n",
        "createdAt" : "2016-09-11T09:41:43Z",
        "updatedAt" : "2016-09-11T09:41:43Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "46b325373c8ec516be2b6b1c6024ae1c783fbc8f",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +481,485 @@      if (extensionsToCopy.contains(sf.extension)) {\n        dest.parent.jfile.mkdirs\n\t      copyfile(sf, false)\n      } else {\n        log(s\"WARNING: ignoring $sf\")"
  },
  {
    "id" : "8a647b6c-e909-4028-92d1-e293dd6e0b20",
    "prId" : 1494,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b63fe704-5578-4387-b8ed-02c4138a6ba6",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "This ugly thing definitely need be factored out (also used a couple lines below).\n\nWhat does this do, anyway? Shouldn't `safeSlurp` be responsible of this safety net?\n",
        "createdAt" : "2016-09-11T09:43:12Z",
        "updatedAt" : "2016-09-11T09:43:12Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "4481a707-2a38-499e-945c-c15c818d970e",
        "parentId" : "b63fe704-5578-4387-b8ed-02c4138a6ba6",
        "authorId" : "9304c526-b1b6-4f2f-b897-8ae4333806a8",
        "body" : "`safeSlurp` is problematic in that it can't take an encoding as an argument, and uses the encoding when the `File` is created, and many ways to create a `File` don't have the opportunity to pass an encoding either (in this case `ifFile`).\n\nThat said, it can still go from this line.\n",
        "createdAt" : "2016-09-11T10:01:18Z",
        "updatedAt" : "2016-09-11T10:01:18Z",
        "lastEditedBy" : "9304c526-b1b6-4f2f-b897-8ae4333806a8",
        "tags" : [
        ]
      }
    ],
    "commit" : "46b325373c8ec516be2b6b1c6024ae1c783fbc8f",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +493,497 @@  /** Reads the existing files for the given test source if any. */\n  private def getExisting(dest: Path): ExistingFiles = {\n    val content: Option[Option[String]] = processFileDir(dest, f => try Some(f.slurp(\"UTF8\")) catch {case io: java.io.IOException => Some(io.toString())}, d => Some(\"\"))\n    if (content.isDefined && content.get.isDefined) {\n      val flags = (dest changeExtension \"flags\").toFile.safeSlurp"
  },
  {
    "id" : "2d416768-f358-48cd-b7cf-7b339bc78796",
    "prId" : 1494,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3ab2409-aea5-4783-90ac-d537e3003cce",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Should this change have been part of another commit?\n",
        "createdAt" : "2016-09-11T09:48:43Z",
        "updatedAt" : "2016-09-11T09:48:43Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "4dfec79f-1c32-471b-918f-7802e63647fc",
        "parentId" : "d3ab2409-aea5-4783-90ac-d537e3003cce",
        "authorId" : "9304c526-b1b6-4f2f-b897-8ae4333806a8",
        "body" : "https://github.com/lampepfl/dotty/pull/1494/commits/32819e2edc88dd06095704c04ed9c2dd0603386f should probably be broken up in just the part that fixes dotty not honoring default and passed in -encoding arguments (which is an actual bug in dotty) and the parts that get the tests running on Windows (which is \"just\" a set of test-suite bugs).  WDYT?\n",
        "createdAt" : "2016-09-11T10:12:59Z",
        "updatedAt" : "2016-09-11T10:12:59Z",
        "lastEditedBy" : "9304c526-b1b6-4f2f-b897-8ae4333806a8",
        "tags" : [
        ]
      },
      {
        "id" : "b42ab490-1872-44bc-8168-2a7b678bcadb",
        "parentId" : "d3ab2409-aea5-4783-90ac-d537e3003cce",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "That sounds good :)\n",
        "createdAt" : "2016-09-11T10:21:18Z",
        "updatedAt" : "2016-09-11T10:21:18Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "46b325373c8ec516be2b6b1c6024ae1c783fbc8f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +229,233 @@  private def expectedErrors(filePath: String): List[ErrorsInFile] = expectedErrors(List(filePath))\n\n  private def isNegTest(testPath: String) = testPath.contains(\"/neg/\")\n\n  private def compileArgs(args: Array[String], expectedErrorsPerFile: List[ErrorsInFile])"
  },
  {
    "id" : "954db82c-b81b-4029-8069-328a10a2ac26",
    "prId" : 1494,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aaa84c02-3368-4a13-8918-54838d6e2a30",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Instead of having a boolean param, you should have two separate `def`s: `copyfile` and `copyfileBytewise`.\n",
        "createdAt" : "2016-09-11T09:51:16Z",
        "updatedAt" : "2016-09-11T09:51:16Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "46b325373c8ec516be2b6b1c6024ae1c783fbc8f",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +453,457 @@\n    def copyfile(file: SFile, bytewise: Boolean): Unit = {\n      if (bytewise) {\n        val in = file.inputStream()\n        val out = SFile(dest).outputStream()"
  },
  {
    "id" : "a720b6ca-8bd2-403c-9d16-d05101582a3b",
    "prId" : 1494,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8725bd0-ce1f-45c1-8f50-3ee0683172ae",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Consider just `if (available >= 0) {`\n",
        "createdAt" : "2016-09-11T09:53:29Z",
        "updatedAt" : "2016-09-11T09:53:29Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "46b325373c8ec516be2b6b1c6024ae1c783fbc8f",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +459,463 @@        def loop(available: Int):Unit = {\n          if (available < 0) {()}\n          else {\n            out.write(buffer, 0, available)\n            val read = in.read(buffer)"
  },
  {
    "id" : "41902b8e-f3f3-4199-98f3-dfc25268fb2d",
    "prId" : 1494,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c461362a-fbf1-4afb-981f-889da6c61f2f",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Why the `.replace(\"\\\\\", \"/\")`?\n",
        "createdAt" : "2016-09-11T09:55:12Z",
        "updatedAt" : "2016-09-11T09:55:12Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "22916a52-a03a-4524-b01b-9b8d8695840b",
        "parentId" : "c461362a-fbf1-4afb-981f-889da6c61f2f",
        "authorId" : "9304c526-b1b6-4f2f-b897-8ae4333806a8",
        "body" : "some path parts start with `u`. Then comment then contains `\\u(something)`, which gets interpreted as an invalid unicode escape, failing compilation. \n",
        "createdAt" : "2016-09-11T10:03:59Z",
        "updatedAt" : "2016-09-11T10:03:59Z",
        "lastEditedBy" : "9304c526-b1b6-4f2f-b897-8ae4333806a8",
        "tags" : [
        ]
      },
      {
        "id" : "23aa6e1e-4de0-41a4-bdef-79e291b3404d",
        "parentId" : "c461362a-fbf1-4afb-981f-889da6c61f2f",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Ah ah!\nWell, that deserves to be written as a comment above this line, then, IMO.\n",
        "createdAt" : "2016-09-11T10:18:33Z",
        "updatedAt" : "2016-09-11T10:18:33Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "46b325373c8ec516be2b6b1c6024ae1c783fbc8f",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +470,474 @@      } else {\n        try {\n          SFile(dest)(scala.io.Codec.UTF8).writeAll((s\"/* !!!!! WARNING: DO NOT MODIFY. Original is at: $file !!!!! */\").replace(\"\\\\\", \"/\"), file.slurp(\"UTF-8\"))\n        } catch {\n          case unmappable: java.nio.charset.MalformedInputException => "
  },
  {
    "id" : "7e6b52ba-432d-4ea4-9e5a-36b1fcc52771",
    "prId" : 1494,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e7dff30-9db1-4b42-9f7a-82db825a9754",
        "parentId" : null,
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Why this whole thing anyway? Files should always be copied bytewise, shouldn't they? They have an encoding before, and they should have the exact same encoding after. There is no need to decode and re-encode them.\n\nThe comment should be pure-ASCII anyway, so it doesn't really matter what encoding is used. It could actually be encoded as such (with US_ASCII) using a `replacement` char `?` for characters of `$file` that are unmappable in US-ASCII.\n\nThat would be much simpler, not to mention faster.\n",
        "createdAt" : "2016-09-11T09:58:32Z",
        "updatedAt" : "2016-09-11T09:58:32Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "28c1eef7-6062-4f71-bc4c-b2f93de1d2b8",
        "parentId" : "8e7dff30-9db1-4b42-9f7a-82db825a9754",
        "authorId" : "9304c526-b1b6-4f2f-b897-8ae4333806a8",
        "body" : "the comment is pure-ASCII, but you can't write it to file if you don't know the encoding of the file; the encoding of the comment in UTF-16 or UTF-32 is unequal to the encoding in UTF-8.\n",
        "createdAt" : "2016-09-11T10:05:41Z",
        "updatedAt" : "2016-09-11T10:05:41Z",
        "lastEditedBy" : "9304c526-b1b6-4f2f-b897-8ae4333806a8",
        "tags" : [
        ]
      },
      {
        "id" : "b9318355-4f0d-4418-8258-7bdf59bd2fc2",
        "parentId" : "8e7dff30-9db1-4b42-9f7a-82db825a9754",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "True. I stupidly did not think about UTF-16.\n\nThat said, this code only applies to files in this repo, doesn't it? We shouldn't have UTF-16-encoded files in this repo, so it should be fine. It would be a different matter if this code were applied to arbitrary files in users' repositories, of course.\n",
        "createdAt" : "2016-09-11T10:20:41Z",
        "updatedAt" : "2016-09-11T10:20:41Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "bf168404-ecb5-415a-b91d-52ec5b4a9004",
        "parentId" : "8e7dff30-9db1-4b42-9f7a-82db825a9754",
        "authorId" : "9304c526-b1b6-4f2f-b897-8ae4333806a8",
        "body" : "There is one in there now, namely the UTF-16 test - which tests whether the passed in -encoding compiler flag is honored. I didn't see any way to test that other than this. I could see if I can resort to tricks, finding an encoding/file that is both valid UTF-8, but doesn't compile as UTF-8, but is also a valid different encoding and does compile as that encoding. A third alternative is not having a test for it. None of the alternatives (this ugly thing which is only needed for one test, unclear tricks with a polyglot file encoding, or not having a test) are really appealing IMO.\n",
        "createdAt" : "2016-09-11T10:51:08Z",
        "updatedAt" : "2016-09-11T10:51:08Z",
        "lastEditedBy" : "9304c526-b1b6-4f2f-b897-8ae4333806a8",
        "tags" : [
        ]
      },
      {
        "id" : "4537df1a-62dc-46d4-ae06-351b1a9162f3",
        "parentId" : "8e7dff30-9db1-4b42-9f7a-82db825a9754",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Easier: use a latin1 test instead of a UTF-16 test. Use a French `é` in some identifier, that's all it takes. It won't be valid UTF-8, but it will parse and compile as latin1. Besides, latin1 is a superset of US-ASCII, so the comment can stay US-ASCII.\n",
        "createdAt" : "2016-09-11T11:44:56Z",
        "updatedAt" : "2016-09-11T11:45:20Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "d45d2fb3-15a3-49cb-a6d7-25c9072d24a5",
        "parentId" : "8e7dff30-9db1-4b42-9f7a-82db825a9754",
        "authorId" : "9304c526-b1b6-4f2f-b897-8ae4333806a8",
        "body" : "If it won't be valid UTF-8, then the file can't be slurped with UTF-8, and the file copy fails\n",
        "createdAt" : "2016-09-11T11:48:07Z",
        "updatedAt" : "2016-09-11T11:48:07Z",
        "lastEditedBy" : "9304c526-b1b6-4f2f-b897-8ae4333806a8",
        "tags" : [
        ]
      },
      {
        "id" : "833d3bdb-72e5-4a51-acd0-187de0829acc",
        "parentId" : "8e7dff30-9db1-4b42-9f7a-82db825a9754",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "My comment was to use that in the potential variant where files are never slurped to being with. They are always copied byte-wise.\n",
        "createdAt" : "2016-09-11T11:55:10Z",
        "updatedAt" : "2016-09-11T11:55:11Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      },
      {
        "id" : "3d2d1c1d-6fab-4bc3-88ea-9cf5e5357bd1",
        "parentId" : "8e7dff30-9db1-4b42-9f7a-82db825a9754",
        "authorId" : "9304c526-b1b6-4f2f-b897-8ae4333806a8",
        "body" : "Ah, I _think_ I get what you mean: like this: https://github.com/martijnhoekstra/dotty/commit/42fc87a6c868b60a7b4545c9bd0a45c187f0a972 ?\n",
        "createdAt" : "2016-09-11T12:10:57Z",
        "updatedAt" : "2016-09-11T12:10:57Z",
        "lastEditedBy" : "9304c526-b1b6-4f2f-b897-8ae4333806a8",
        "tags" : [
        ]
      },
      {
        "id" : "ad93ec27-5543-4988-bfe6-64a0ecd80352",
        "parentId" : "8e7dff30-9db1-4b42-9f7a-82db825a9754",
        "authorId" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "body" : "Yes, like that.\n",
        "createdAt" : "2016-09-11T13:03:25Z",
        "updatedAt" : "2016-09-11T13:03:25Z",
        "lastEditedBy" : "5a9cd756-9120-4d5e-ac88-e9c636084f0e",
        "tags" : [
        ]
      }
    ],
    "commit" : "46b325373c8ec516be2b6b1c6024ae1c783fbc8f",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +475,479 @@            copyfile(file, true) //there are bytes that can't be mapped with UTF-8. Bail and just do a straight byte-wise copy without the warning header.\n        }\n      }\n    }\n"
  },
  {
    "id" : "1dec7391-a761-49c4-86f5-086d801a2a4d",
    "prId" : 1360,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8be79f35-ce0a-4bc7-8070-34fb69973a74",
        "parentId" : null,
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "Since last update I changed `.doReport(d)` with `.report(d)`.\n",
        "createdAt" : "2016-07-05T12:38:24Z",
        "updatedAt" : "2016-07-07T09:39:37Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b4511be11338f56feb79eb0fcd28fa6e642f775",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +242,246 @@          consoleReporter.report(d)\n        } else {\n          innerStoreReporter.report(d)\n          if (d.level == ERROR) {\n            innerStoreReporter.flush()"
  },
  {
    "id" : "5e0ede02-5ad8-4607-96ec-11dc3e63c800",
    "prId" : 1154,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f10895a-c40c-48bf-a2fc-da2ec1be0ce5",
        "parentId" : null,
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Instead of implicitly doing additional checks when one of the arg is `-rewrite`, I think it'd be better to ask for these checks explicitly, either have a `compileFileCheckRewrite` method or an additional argument `checkRewrite: Boolean = false` to `compileFile`.\n",
        "createdAt" : "2016-03-12T19:46:33Z",
        "updatedAt" : "2016-03-14T09:02:34Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c18e37886e90d217579112ccf867c22658273be",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +91,95 @@      if (runTest)\n        log(s\"WARNING: run tests can only be run by partest, JUnit just verifies compilation: $prefix$fileName$extension\")\n      if (args.contains(\"-rewrite\")) {\n        val file = new PlainFile(filePath)\n        val data = file.toByteArray"
  },
  {
    "id" : "b9b9bda6-896f-4e8b-b5b0-4e4649412f58",
    "prId" : 1106,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03f6e601-7e48-4522-bdce-d93017b74092",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "I propose we change all compiler errors to require a source position.\nThan neg tests will not need to take `xerrors` as arguments and keep it updated both in file and in test configuration.\nAdditionally, this would allow to have a neg-dir instead of test-per-neg-test, where every file specifies how many errors it should have with `// error` comments.\n",
        "createdAt" : "2016-02-19T11:04:47Z",
        "updatedAt" : "2016-02-19T12:12:32Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "7e1240dd-e846-4092-9ff9-6ae3b909e9d7",
        "parentId" : "03f6e601-7e48-4522-bdce-d93017b74092",
        "authorId" : "56761ef6-e75d-47dc-b05b-d3c457504b98",
        "body" : "@DarkDimius If we decide to do it I propose to open separate pull request for it. This pull request already has long history.\n",
        "createdAt" : "2016-02-19T11:38:04Z",
        "updatedAt" : "2016-02-19T12:12:32Z",
        "lastEditedBy" : "56761ef6-e75d-47dc-b05b-d3c457504b98",
        "tags" : [
        ]
      }
    ],
    "commit" : "70f5d93898095aa47b8f7bb33de00d415888dfcf",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +202,206 @@      val expectedErrorsPerFile = allFiles.map(getErrors(_))\n\n      // Some compiler errors have an associated source position. Each error\n      // needs to correspond to a \"// error\" marker on that line in the source\n      // file and vice versa."
  }
]