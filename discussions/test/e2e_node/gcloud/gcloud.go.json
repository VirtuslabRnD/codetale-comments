[
  {
    "id" : "ceab59f7-e9a0-4a3e-a211-5ca795334cea",
    "prId" : 19375,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "300e736f-f55a-4215-bb8c-b211c36e8546",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "This is ugly. Sigh :(\nShould we instead add ssh tokens and use ssh instead of gcloud?\n",
        "createdAt" : "2016-01-08T19:00:06Z",
        "updatedAt" : "2016-01-08T19:00:06Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "f5e266be-cedd-4dad-bc08-0eaa0b136186",
        "parentId" : "300e736f-f55a-4215-bb8c-b211c36e8546",
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "Yeah, maybe we will need to resort to ssh tokens, though the k8s e2e tests use gcloud and do not seem to encounter this.  I am hoping we may be able to debug the issue and continue to use gcoud.\n",
        "createdAt" : "2016-01-11T19:10:00Z",
        "updatedAt" : "2016-01-11T19:10:00Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      }
    ],
    "commit" : "4397bdedf3cedb3dd6e172e1013bc3c7dd712411",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +138,142 @@\t\tout, err := gc.Command(\"mkdir\", \"-p\", tDir)\n\n\t\t// Work around for gcloud flakiness - TODO: debug why gcloud sometimes cannot find credentials for some hosts\n\t\t// If there was an error about credentials, retry making the directory 6 times to see if it can be resolved\n\t\t// This is to help debug if the credential issues are persistent for a given host on a given run, or transient"
  },
  {
    "id" : "d8bc606f-0980-4f38-8948-ccf44556c222",
    "prId" : 17260,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b637ac3a-b245-46d4-8446-a2345e2c734c",
        "parentId" : null,
        "authorId" : "e207abea-b610-4808-be75-0ad08ef4a235",
        "body" : "Why not use `os.TempDir()` with `ioutil.TempDir()`?\n",
        "createdAt" : "2015-11-16T18:40:19Z",
        "updatedAt" : "2015-11-18T21:05:20Z",
        "lastEditedBy" : "e207abea-b610-4808-be75-0ad08ef4a235",
        "tags" : [
        ]
      },
      {
        "id" : "327b9821-974c-44eb-9e13-b4ee09226d59",
        "parentId" : "b637ac3a-b245-46d4-8446-a2345e2c734c",
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "The temporary directory must be created on the remote host where the binaries will be copied and the kubelet will be running.  afaict the os and ioutil functions create the directory locally.\n",
        "createdAt" : "2015-11-17T01:05:34Z",
        "updatedAt" : "2015-11-18T21:05:20Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      },
      {
        "id" : "c6559f53-2b9d-4afd-8b67-b490aa2df4ae",
        "parentId" : "b637ac3a-b245-46d4-8446-a2345e2c734c",
        "authorId" : "e207abea-b610-4808-be75-0ad08ef4a235",
        "body" : "Ah, I see. And using them would create local directory instances just to get a name to use remote. It then would require cleaning up the local system as well as the remote. Likely more trouble than it's worth. Thanks for the clarification.\n",
        "createdAt" : "2015-11-17T14:58:42Z",
        "updatedAt" : "2015-11-18T21:05:20Z",
        "lastEditedBy" : "e207abea-b610-4808-be75-0ad08ef4a235",
        "tags" : [
        ]
      }
    ],
    "commit" : "49e1baa313e46a67aba07db11abc2fe5c3123e1d",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +107,111 @@\n\t// Define where we will copy the temp binary\n\ttDir := fmt.Sprintf(\"/tmp/gcloud-e2e-%d\", rand.Int31())\n\t_, f := filepath.Split(bin)\n\tcmd := filepath.Join(tDir, f)"
  },
  {
    "id" : "45d04db4-081f-43f0-9413-3e5aac057de6",
    "prId" : 17260,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2d3fe5a-df1b-4ff4-a648-c5624caead0b",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Should this be a generic interface which can be used even on aws and on-prem in the future?\n",
        "createdAt" : "2015-11-16T18:46:09Z",
        "updatedAt" : "2015-11-18T21:05:20Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "6f1cbbb4-5b78-443f-b25f-6af53c8a337c",
        "parentId" : "e2d3fe5a-df1b-4ff4-a648-c5624caead0b",
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "Hadn't thought much about that.  I can rename the package if you think that would be better (just \"cloud\"?).  Thoughts?\n",
        "createdAt" : "2015-11-17T01:25:58Z",
        "updatedAt" : "2015-11-18T21:05:20Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      },
      {
        "id" : "6b0dcad5-2de4-4130-af1a-82c1e8238338",
        "parentId" : "e2d3fe5a-df1b-4ff4-a648-c5624caead0b",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "How about `infra`? \n",
        "createdAt" : "2015-11-18T18:26:19Z",
        "updatedAt" : "2015-11-18T21:05:20Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "c2c846cf-ef17-4875-bfe8-498b4547fc04",
        "parentId" : "e2d3fe5a-df1b-4ff4-a648-c5624caead0b",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "This package can include all testing infra utilities.\n",
        "createdAt" : "2015-11-18T18:26:37Z",
        "updatedAt" : "2015-11-18T21:05:20Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "49e1baa313e46a67aba07db11abc2fe5c3123e1d",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +37,41 @@type TearDown func()\n\ntype GCloudClient interface {\n\tCopyAndWaitTillHealthy(sudo bool, remotePort string, timeout time.Duration, healthUrl string, bin string, args ...string) (*CmdHandle, error)\n}"
  },
  {
    "id" : "aa447380-8575-4b91-95bb-3a6b5b1a64f3",
    "prId" : 17260,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07d5f5dc-8341-4cf5-ab75-bdc5b7955e90",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Should we use the default-zone and autodetect that ?\n",
        "createdAt" : "2015-11-16T18:47:20Z",
        "updatedAt" : "2015-11-18T21:05:20Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "7e10144f-bdad-4907-b1ab-1a73491baae5",
        "parentId" : "07d5f5dc-8341-4cf5-ab75-bdc5b7955e90",
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "Maybe.  I guess I don't have a default zone setup in my gce config because it always makes me supply one for gcloud compute commands\n",
        "createdAt" : "2015-11-17T04:17:41Z",
        "updatedAt" : "2015-11-18T21:05:20Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      },
      {
        "id" : "02430f95-ab4a-477f-a355-1aad405a9826",
        "parentId" : "07d5f5dc-8341-4cf5-ab75-bdc5b7955e90",
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "I think I have addressed this by making zone optional.  If it is not specified, zone should be picked up from the configuration.\n",
        "createdAt" : "2015-11-17T23:23:34Z",
        "updatedAt" : "2015-11-18T21:05:20Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      },
      {
        "id" : "0c56b039-6dfa-4b14-89fd-08f169a0f8a6",
        "parentId" : "07d5f5dc-8341-4cf5-ab75-bdc5b7955e90",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Acknowledged!\n",
        "createdAt" : "2015-11-18T18:26:50Z",
        "updatedAt" : "2015-11-18T21:05:20Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "49e1baa313e46a67aba07db11abc2fe5c3123e1d",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +43,47 @@type gCloudClientImpl struct {\n\thost string\n\tzone string\n}\n"
  },
  {
    "id" : "f5281cc1-ccc2-4a9e-9cc6-0c0c84ed861c",
    "prId" : 17260,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e41d010-b789-4100-8ae9-e070f67545ef",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "This seems to be a generic method. Can this be made independent of the cloud provider?\n",
        "createdAt" : "2015-11-16T18:56:12Z",
        "updatedAt" : "2015-11-18T21:05:20Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "909b21e3-6e0d-45f8-9c16-84ace7eb1382",
        "parentId" : "4e41d010-b789-4100-8ae9-e070f67545ef",
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "Yeah I am open to doing this.  Overall I am not sure if this is going to be the best way to boot strap the test environment 6 or 12 months down the road, so don't want to commit to this as the canonical way.  Thoughts?\n",
        "createdAt" : "2015-11-17T04:11:39Z",
        "updatedAt" : "2015-11-18T21:05:20Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      }
    ],
    "commit" : "49e1baa313e46a67aba07db11abc2fe5c3123e1d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +154,158 @@}\n\nfunc (gc *gCloudClientImpl) CopyAndWaitTillHealthy(\n\tsudo bool,\n\tremotePort string, timeout time.Duration, healthUrl string, bin string, args ...string) (*CmdHandle, error) {"
  },
  {
    "id" : "91cb1a6b-8805-47e9-874b-6ea4fe0f3177",
    "prId" : 17260,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79b7b912-876a-428a-8bb9-3a1a0332bc01",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Question: Once we close the connection, won't the port be freed?\n",
        "createdAt" : "2015-11-16T18:56:52Z",
        "updatedAt" : "2015-11-18T21:05:20Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "20814403-ef19-436f-804d-9c0c20eee3ee",
        "parentId" : "79b7b912-876a-428a-8bb9-3a1a0332bc01",
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "yeah there is a race condition here if something else allocates the port before we get to use it in ssh.  The goal is to give a free port to \"gcloud ssh\" to setup a tunnel so that we don't need to worry about firewall rules on the host running the kubelet and so requests come from \"localhost\".  I wasn't able to find a solution for reserving a free port so it can be used by another process so this is the closest thing:  Ask the OS to allocate a port for you and then immediately free it and tell the ssh process to use it.\n",
        "createdAt" : "2015-11-17T01:44:10Z",
        "updatedAt" : "2015-11-18T21:05:20Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      }
    ],
    "commit" : "49e1baa313e46a67aba07db11abc2fe5c3123e1d",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +182,186 @@// GetLocalPort returns a free local port that can be used for ssh tunneling\nfunc getLocalPort() string {\n\tl, _ := net.Listen(\"tcp\", \":0\")\n\tdefer l.Close()\n\treturn freePortRegexp.FindStringSubmatch(l.Addr().String())[1]"
  },
  {
    "id" : "0139d791-73e6-4fff-a532-04f605fc6f25",
    "prId" : 17260,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b0cb173-0612-4bdb-b286-6a9d70cb4622",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Add a TODO to run tests on the remote host.\n",
        "createdAt" : "2015-11-18T18:27:19Z",
        "updatedAt" : "2015-11-18T21:05:20Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "49e1baa313e46a67aba07db11abc2fe5c3123e1d",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +74,78 @@\nfunc (gc *gCloudClientImpl) TunnelCommand(sudo bool, lPort string, rPort string, cmd string, moreargs ...string) ([]byte, error) {\n\ttunnelStr := fmt.Sprintf(\"-L %s:localhost:%s\", lPort, rPort)\n\targs := []string{\"compute\", \"ssh\"}\n\tif gc.zone != \"\" {"
  }
]