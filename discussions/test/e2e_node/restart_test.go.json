[
  {
    "id" : "49df4317-e7cb-4b9f-932b-42084986a8f1",
    "prId" : 35572,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35572#pullrequestreview-5943107",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "166e79d1-4855-46fd-9118-7738ec0e7f19",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Shouldn't there always be terminated containers because of the docker restart?\n",
        "createdAt" : "2016-10-26T16:21:15Z",
        "updatedAt" : "2016-10-28T05:15:50Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "cc6b6012-a561-416c-bfd3-026b19883f64",
        "parentId" : "166e79d1-4855-46fd-9118-7738ec0e7f19",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "yeah that's lastState, im checking state which shouldn't be terminated at the end of this experiment (it is in step 3 below):    \n1. schedule new pods on a full ip node, they end up with state waiting (containerCreating, no available ips). \n2. If a pod gets a chance to run, we have state running (startedAt blah). \n3. If docker gets bounced and we end up with no available ips, we have state terminated (finishedAt blah), Ready=false.\n4. Now GC runs and frees up some ips (in fact with 100 pods gc keeps running after the 3rd restart).\n5. And we get state running (startedAt blah) with lastState terminated (finishedAt blah), Ready=true.\n\nIf GC hadn't run, we would be stuck at (3) a 100 containers with state terminated (finishedAt blah), ready=false.\n",
        "createdAt" : "2016-10-26T21:19:48Z",
        "updatedAt" : "2016-10-28T05:15:50Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "37bc34c567665f5c2a8e8478830acd1d0b3bba37",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +106,110 @@\t\t\t\t}\n\t\t\t\tBy(\"Confirm no containers have terminated\")\n\t\t\t\tfor _, pod := range postRestartRunningPods {\n\t\t\t\t\tif c := testutils.TerminatedContainers(pod); len(c) != 0 {\n\t\t\t\t\t\tframework.Failf(\"Pod %q has failed containers %+v after docker restart, this might indicate an IP leak\", pod.Name, c)"
  }
]