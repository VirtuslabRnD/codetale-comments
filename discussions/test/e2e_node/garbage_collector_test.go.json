[
  {
    "id" : "f4eb1892-d6bb-44e2-8cab-ca90599df315",
    "prId" : 57976,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57976#pullrequestreview-87337871",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5f50385-84b4-46dd-ba81-bd739e6278aa",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "+@dashpole for reviewing the GC test change",
        "createdAt" : "2018-01-08T21:26:53Z",
        "updatedAt" : "2018-01-09T22:59:33Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e05a5b9f7a9723c12a652a7e1ff7fb069d60f623",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +143,147 @@// \tonce pods are killed, all containers are eventually cleaned up\nfunc containerGCTest(f *framework.Framework, test testRun) {\n\tvar runtime internalapi.RuntimeService\n\tBeforeEach(func() {\n\t\tvar err error"
  },
  {
    "id" : "65fcd1bc-95e0-46b7-b77f-bc57eec67611",
    "prId" : 57976,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57976#pullrequestreview-87380159",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2c4f0db-436a-4f44-9ba0-32b5a6f5fae3",
        "parentId" : null,
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "Have you tested this?  I dont remember why I used `Contains` initially, but if it works the new way, I guess that is better.",
        "createdAt" : "2018-01-08T22:04:26Z",
        "updatedAt" : "2018-01-09T22:59:33Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      },
      {
        "id" : "64005e0d-a921-4208-86f8-437dfe746953",
        "parentId" : "d2c4f0db-436a-4f44-9ba0-32b5a6f5fae3",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Yeah, because container name in `docker ps` is pretty long, it's composed of a lot of things.",
        "createdAt" : "2018-01-08T22:51:18Z",
        "updatedAt" : "2018-01-09T22:59:33Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "3ffa284b-0c29-42b6-9d9b-e70425ce050d",
        "parentId" : "d2c4f0db-436a-4f44-9ba0-32b5a6f5fae3",
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "Oh, so because this is using `Labels[types.KubernetesContainerNameLabel]`, it should be exactly the name we gave it, rather than an element of the name.  I like it",
        "createdAt" : "2018-01-08T22:53:54Z",
        "updatedAt" : "2018-01-09T22:59:33Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      },
      {
        "id" : "38f25d4d-f1f5-47cb-b2b1-5e2f91adc77e",
        "parentId" : "d2c4f0db-436a-4f44-9ba0-32b5a6f5fae3",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Yeah",
        "createdAt" : "2018-01-09T00:11:48Z",
        "updatedAt" : "2018-01-09T22:59:33Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      }
    ],
    "commit" : "e05a5b9f7a9723c12a652a7e1ff7fb069d60f623",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +202,206 @@\t\t\t\t\t\tcontainerCount := 0\n\t\t\t\t\t\tfor _, containerName := range containerNames {\n\t\t\t\t\t\t\tif containerName == pod.getContainerName(i) {\n\t\t\t\t\t\t\t\tcontainerCount += 1\n\t\t\t\t\t\t\t}"
  },
  {
    "id" : "bd64207f-f7a1-4509-ad87-f309772a2a81",
    "prId" : 42661,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42661#pullrequestreview-25830915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4d19269-7a3f-42c8-bcb3-caceacb2c535",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "nit: The name is odd. Could it be `podDeletionTimeout`?",
        "createdAt" : "2017-03-07T21:03:13Z",
        "updatedAt" : "2017-03-07T21:03:14Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "0f0f7d03-228d-4262-84ce-d2ce20722c4c",
        "parentId" : "c4d19269-7a3f-42c8-bcb3-caceacb2c535",
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "The description is equally odd:\r\n`// podDisappearTimeout is the timeout to wait node disappear.`\r\n`podDisappearTimeout = time.Minute * 2`",
        "createdAt" : "2017-03-07T21:05:00Z",
        "updatedAt" : "2017-03-07T21:05:00Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      },
      {
        "id" : "bdb3a616-39fd-4504-95d2-253f8fc662a0",
        "parentId" : "c4d19269-7a3f-42c8-bcb3-caceacb2c535",
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "Might be worth just doing a quick pass over the e2e node suite and rename constants and move them to a single file",
        "createdAt" : "2017-03-07T21:06:46Z",
        "updatedAt" : "2017-03-07T21:06:46Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      },
      {
        "id" : "b170c316-7367-48f4-af8b-93013a92d687",
        "parentId" : "c4d19269-7a3f-42c8-bcb3-caceacb2c535",
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "There is also podWaitTimeout in lifecycle_hook_test.go, which is set to 3 minutes, and is used as a timeout for deletion.",
        "createdAt" : "2017-03-07T21:08:45Z",
        "updatedAt" : "2017-03-07T21:08:45Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      },
      {
        "id" : "c0660746-c82e-4b36-94cf-cdcaa3e4bccb",
        "parentId" : "c4d19269-7a3f-42c8-bcb3-caceacb2c535",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Yeah. I feel we can add default timeouts to DeleteSync() itself which can derive that from the framework. Less constants to deal with in such a workflow.\r\n\r\nif this PR is urgent, don't block on these comments.",
        "createdAt" : "2017-03-07T21:51:45Z",
        "updatedAt" : "2017-03-07T21:51:45Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "6d5a0c65-14b3-44aa-ae8d-46ba7e24c2a4",
        "parentId" : "c4d19269-7a3f-42c8-bcb3-caceacb2c535",
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "#42734 creates a default and addresses these comments",
        "createdAt" : "2017-03-08T17:25:32Z",
        "updatedAt" : "2017-03-08T17:25:32Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a0d5506c216ec1c179ed69d15754584b3f4b469",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +232,236 @@\t\t\tfor _, pod := range test.testPods {\n\t\t\t\tBy(fmt.Sprintf(\"Deleting Pod %v\", pod.podName))\n\t\t\t\tf.PodClient().DeleteSync(pod.podName, &metav1.DeleteOptions{}, podDisappearTimeout)\n\t\t\t}\n"
  },
  {
    "id" : "df167445-a034-40eb-a36f-2c3e5b7142b2",
    "prId" : 37392,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37392#pullrequestreview-9966888",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19c56c97-8f15-4429-b148-984ecd4e3898",
        "parentId" : null,
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "what happens if the tests are run in parallel? I'm wondering if this should just be moved into the getContainerNames function",
        "createdAt" : "2016-11-23T23:16:47Z",
        "updatedAt" : "2016-11-23T23:16:47Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "08a96bb2-d6cd-4621-a51a-215bf77bcb49",
        "parentId" : "19c56c97-8f15-4429-b148-984ecd4e3898",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Good question! It seems that they won't share the same variable, or else many of our tests will fail.\r\n\r\nHowever, I need to figure out why they don't share it. It should be golang syntax.",
        "createdAt" : "2016-11-23T23:37:02Z",
        "updatedAt" : "2016-11-23T23:37:16Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "3d156063-16db-4e0d-baf8-5ad9ccc99884",
        "parentId" : "19c56c97-8f15-4429-b148-984ecd4e3898",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "Yeah, as it stands I'm not convinced it won't be flaky... maybe try running many iterations i n parallel? I don't see why they wouldn't be sharing the variable based on my understanding of go. You could always use a `sync.Once` to initialize it once from within `getContainerNames`",
        "createdAt" : "2016-11-23T23:42:27Z",
        "updatedAt" : "2016-11-23T23:42:27Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "e7444473-ac1b-4e78-8d7c-6e9880afa367",
        "parentId" : "19c56c97-8f15-4429-b148-984ecd4e3898",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "@timstclair Yeah, good idea.\r\n\r\nBefore that, I need to figure out how ginkgo works, why our other tests don't flake, or they should just haven't flaked yet.",
        "createdAt" : "2016-11-23T23:44:09Z",
        "updatedAt" : "2016-11-23T23:44:09Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "7102c008-e809-4cd8-80ca-3e0294b9676b",
        "parentId" : "19c56c97-8f15-4429-b148-984ecd4e3898",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "Spoke offline. This is a common pattern in our tests, but neither of us understands why it works... I'll unblock this, but let's follow up.",
        "createdAt" : "2016-11-23T23:55:25Z",
        "updatedAt" : "2016-11-23T23:55:25Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "5323dd60-1801-4b85-b2a1-6172fc26647d",
        "parentId" : "19c56c97-8f15-4429-b148-984ecd4e3898",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "@timstclair I see.\r\n\r\nWhen run in parallel, ginkgo starts multiple **processes** to run all the test.\r\n\r\nIn each process, tests are running in serial. So:\r\n* If 2 tests are running in parallel, they won't share anything because they are in different processes.\r\n* If 2 tests are in the same process, they won't share anything at the same time because they run one after another.",
        "createdAt" : "2016-11-24T00:25:05Z",
        "updatedAt" : "2016-11-24T00:25:40Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "c9592962-5ae9-4043-ad39-5bd169c9f111",
        "parentId" : "19c56c97-8f15-4429-b148-984ecd4e3898",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "Got it. Thanks for clearing that up!",
        "createdAt" : "2016-11-24T00:50:09Z",
        "updatedAt" : "2016-11-24T00:50:09Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfbe7be5b52be689eb0fa8ab66cc383f37087733",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +260,264 @@\tvar runtime docker.DockerInterface\n\tBeforeEach(func() {\n\t\truntime = docker.ConnectToDockerOrDie(defaultDockerEndpoint, defaultRuntimeRequestTimeoutDuration)\n\t})\n\tfor _, pod := range test.testPods {"
  },
  {
    "id" : "94688182-cd38-49d1-8729-a7f65061b681",
    "prId" : 35811,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35811#pullrequestreview-6523036",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dac47ffd-45b2-4e11-89dc-f2eb9a7ca3f3",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Extra empty line.\n",
        "createdAt" : "2016-10-31T18:51:03Z",
        "updatedAt" : "2016-11-15T17:15:50Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "4a8a837c-48c9-4988-b60e-b79de056eacb",
        "parentId" : "dac47ffd-45b2-4e11-89dc-f2eb9a7ca3f3",
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "Done\n",
        "createdAt" : "2016-10-31T20:52:48Z",
        "updatedAt" : "2016-11-15T17:15:50Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6224590f7688c481bca9134ddd0512825e5f98a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +202,206 @@\t\t\t\treturn nil\n\t\t\t}, garbageCollectDuration, runtimePollInterval).Should(BeNil())\n\n\t\t\tif maxPerPodContainer >= 2 && maxTotalContainers < 0 { // make sure constraints wouldn't make us gc old containers\n\t\t\t\tBy(\"Making sure the kubelet consistently keeps around an extra copy of each container.\")"
  }
]