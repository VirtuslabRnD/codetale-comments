[
  {
    "id" : "2e8a0498-ccd9-4a8f-8623-3745587eb3db",
    "prId" : 82493,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82493#pullrequestreview-327185781",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c14f691-9d0c-4c58-a4eb-26790bf64589",
        "parentId" : null,
        "authorId" : "b7c04289-77b0-4d05-90b7-3bde23e2b0bf",
        "body" : "```suggestion\r\n\t\t\t\t\tframework.ExpectEqual(p.Status.Phase, v1.PodFailed, fmt.Sprintf(\"pod: %v should be preempted with status: %#v\", p.Name, p.Status))\r\n```\r\n\r\nThis one should keep verifying that status is `PodFailed`, since these pods should be preempted when the critical pod is admitted (because it requests all the resources). The typo has been present here too.",
        "createdAt" : "2019-12-04T12:58:09Z",
        "updatedAt" : "2020-01-14T01:43:30Z",
        "lastEditedBy" : "b7c04289-77b0-4d05-90b7-3bde23e2b0bf",
        "tags" : [
        ]
      },
      {
        "id" : "0e25e45e-5208-4211-8801-bbe55bbe10bf",
        "parentId" : "0c14f691-9d0c-4c58-a4eb-26790bf64589",
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "+1",
        "createdAt" : "2019-12-04T22:05:08Z",
        "updatedAt" : "2020-01-14T01:43:30Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      }
    ],
    "commit" : "c1de3d6e5b48b594370545b1f4eadbde3333f708",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +90,94 @@\t\t\tfor _, p := range updatedPodList.Items {\n\t\t\t\tif p.Name == nonCriticalBestEffort.Name {\n\t\t\t\t\tframework.ExpectEqual(p.Status.Phase, v1.PodRunning, fmt.Sprintf(\"pod: %v should not be preempted with status: %#v\", p.Name, p.Status))\n\t\t\t\t} else {\n\t\t\t\t\tframework.ExpectEqual(p.Status.Phase, v1.PodFailed, fmt.Sprintf(\"pod: %v should be preempted with status: %#v\", p.Name, p.Status))"
  },
  {
    "id" : "1cb19739-6b66-4a29-a45c-40422ad25de0",
    "prId" : 67781,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67781#pullrequestreview-149908690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d3c0d87-e8b7-4a9d-807b-386e42d5186d",
        "parentId" : null,
        "authorId" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "body" : "why change these two?  `IsCritical()` is called by `IsCriticalPod()` in the case that the `ExperimentalCriticalPodAnnotation` feature gate is enabled.",
        "createdAt" : "2018-08-27T14:08:38Z",
        "updatedAt" : "2018-09-08T00:44:03Z",
        "lastEditedBy" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "tags" : [
        ]
      },
      {
        "id" : "8ede6744-ecdc-4c56-9717-84119dc066dc",
        "parentId" : "8d3c0d87-e8b7-4a9d-807b-386e42d5186d",
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "It just means the test can be run without setting the `ExperimentalCriticalPodAnnotation` feature gate.  We use dynamic kubelet config above to set it on the kubelet.  It just removes a confusing failure scenario for people running the tests.  IMO we shouldn't require feature gates to be set in the test framework in general; we should use dynamic kubelet config everywhere that we need it.",
        "createdAt" : "2018-08-27T16:19:20Z",
        "updatedAt" : "2018-09-08T00:44:03Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      },
      {
        "id" : "2054e14c-2df0-4f4c-9f8f-9bde4440a5ae",
        "parentId" : "8d3c0d87-e8b7-4a9d-807b-386e42d5186d",
        "authorId" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "body" : "I see.  But... aren't you making the code tolerant of this situation with the change on line 48?  Seems like this is double fixing it.",
        "createdAt" : "2018-08-27T18:34:37Z",
        "updatedAt" : "2018-09-08T00:44:03Z",
        "lastEditedBy" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "tags" : [
        ]
      },
      {
        "id" : "191781f4-6c1a-4d0f-9a9f-5fe7770c82bf",
        "parentId" : "8d3c0d87-e8b7-4a9d-807b-386e42d5186d",
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "The code change on line 48 is for a different problem.  If you run the test without any additional feature-gates enabled, the test will panic, as the feature gates map is empty.\r\nUsing dynamic kubelet config to enable feature gates on the kubelet does not enable them in the test framework, so the change on line 48 won't affect the `IsCriticalPod` call during the test. Maybe the better change is to remove this check all-together, as it is something that should be done in a unit-test.",
        "createdAt" : "2018-08-27T19:43:41Z",
        "updatedAt" : "2018-09-08T00:44:03Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      },
      {
        "id" : "4bbe4c13-a355-4fa3-853a-2843e9fedf69",
        "parentId" : "8d3c0d87-e8b7-4a9d-807b-386e42d5186d",
        "authorId" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "body" : "or maybe add the check for a nil feature gate map in `IsCriticalPod()`?",
        "createdAt" : "2018-08-27T21:33:44Z",
        "updatedAt" : "2018-09-08T00:44:03Z",
        "lastEditedBy" : "8e9f49fc-1050-4601-b81c-83bf660c5eb8",
        "tags" : [
        ]
      },
      {
        "id" : "815f9fb1-a61b-4f56-a4ca-ece6c763f863",
        "parentId" : "8d3c0d87-e8b7-4a9d-807b-386e42d5186d",
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "The change on line 48 prevents a panic during the test if not supplying _any additional_ feature gates.  This is required regardless of the `IsCriticalPod` check on line 145, as tests shouldn't panic regardless of the feature gates initially set.\r\n\r\nThe change on line 145 (here) allows the test to succeed without specifying the `ExperimentalCriticalPodAnnotation` before running the test.  This removes a confusing test failure if the feature gate isn't specified.  Alternatively, we could either remove the check here entirely, or explicitly check that the feature gate is enabled to make the failure less confusing to track down.  The latter just makes the test more annoying for people to run.",
        "createdAt" : "2018-08-27T22:31:18Z",
        "updatedAt" : "2018-09-08T00:44:03Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      }
    ],
    "commit" : "90f58c11575efecbbe05d71340d43ed3400d6f1a",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +146,150 @@\t\t\tkubelettypes.CriticalPodAnnotationKey: \"\",\n\t\t}\n\t\tExpect(kubelettypes.IsCritical(pod.Namespace, pod.Annotations)).To(BeTrue(), \"pod should be a critical pod\")\n\t} else {\n\t\tExpect(kubelettypes.IsCritical(pod.Namespace, pod.Annotations)).To(BeFalse(), \"pod should not be a critical pod\")"
  }
]