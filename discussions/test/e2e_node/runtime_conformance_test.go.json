[
  {
    "id" : "63de2ddf-1f6a-40b9-b10f-bdb569811bbb",
    "prId" : 67084,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67084#pullrequestreview-144243546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a417ca75-542a-48bb-894a-e80829694fc4",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "this file should be ported. ",
        "createdAt" : "2018-08-07T18:43:48Z",
        "updatedAt" : "2018-08-07T18:44:45Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "b1a3ff3b-de74-4544-baa4-566859ad9b59",
        "parentId" : "a417ca75-542a-48bb-894a-e80829694fc4",
        "authorId" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "body" : "#67103 (this seems less obvious to me, but let's see how far we can gert)",
        "createdAt" : "2018-08-07T23:08:46Z",
        "updatedAt" : "2018-08-07T23:08:46Z",
        "lastEditedBy" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "tags" : [
        ]
      },
      {
        "id" : "90ea51d3-22cc-4601-8de1-c56fd3908d3e",
        "parentId" : "a417ca75-542a-48bb-894a-e80829694fc4",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Container restart behavior is a portable pod feature, so it should be covered by conformance.",
        "createdAt" : "2018-08-08T02:15:52Z",
        "updatedAt" : "2018-08-08T02:33:38Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "27d215c58f93e5576b8d15295a50522a769809c1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +52,56 @@\t\t\t\tDescription:  If the restart policy is set to ‘Always’, Pod MUST be started when terminated, If restart policy is ‘OnFailure’, Pod MUST be started only if it is terminated with non-zero exit code. If the restart policy is ‘Never’, Pod MUST never be restarted. All these three test cases MUST verify the restart counts accordingly.\n\t\t\t*/\n\t\t\tIt(\"it should run with the expected status [NodeConformance]\", func() {\n\t\t\t\trestartCountVolumeName := \"restart-count\"\n\t\t\t\trestartCountVolumePath := \"/restart-count\""
  },
  {
    "id" : "059147b0-07cc-4efe-8f0b-2e2778787574",
    "prId" : 67084,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67084#pullrequestreview-144243546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c94b5cd-9420-4da6-a421-5907f43e71bc",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "It's weird that this is a subpart of this test case, or sequence of test cases. I'm not sure it's right even for NodeConformance.",
        "createdAt" : "2018-08-08T02:29:13Z",
        "updatedAt" : "2018-08-08T02:33:38Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "27d215c58f93e5576b8d15295a50522a769809c1",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +133,137 @@\t\t\t\t\tExpect(GetContainerState(status.State)).To(Equal(testCase.State))\n\n\t\t\t\t\tBy(\"it should be possible to delete [NodeConformance]\")\n\t\t\t\t\tExpect(terminateContainer.Delete()).To(Succeed())\n\t\t\t\t\tEventually(terminateContainer.Present, retryTimeout, pollInterval).Should(BeFalse())"
  },
  {
    "id" : "31ef1091-607d-4366-b4b1-faa1c9d9a2b1",
    "prId" : 67084,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67084#pullrequestreview-144243546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51763b08-4827-4a32-b0a7-0ac1e86de473",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "TerminationMessagePath is a pod feature that should be covered by conformance.",
        "createdAt" : "2018-08-08T02:29:43Z",
        "updatedAt" : "2018-08-08T02:33:38Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "27d215c58f93e5576b8d15295a50522a769809c1",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +148,152 @@\t\t\t}{\n\t\t\t\t{\n\t\t\t\t\tname: \"if TerminationMessagePath is set [NodeConformance]\",\n\t\t\t\t\tcontainer: v1.Container{\n\t\t\t\t\t\tImage:   busyboxImage,"
  },
  {
    "id" : "3b4e35ea-f63e-4400-8be6-a1574a57940c",
    "prId" : 67084,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67084#pullrequestreview-144243546",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b5c9fcb-5c54-4d20-ac41-e8bd3db095e8",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "We'll want to test image pulling and image pull secrets (but not host-level secret configuration), but will need to make the registry pulled from configurable.",
        "createdAt" : "2018-08-08T02:32:24Z",
        "updatedAt" : "2018-08-08T02:33:38Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "27d215c58f93e5576b8d15295a50522a769809c1",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +319,323 @@\t\t\t} {\n\t\t\t\ttestCase := testCase\n\t\t\t\tIt(testCase.description+\" [NodeConformance]\", func() {\n\t\t\t\t\tname := \"image-pull-test\"\n\t\t\t\t\tcommand := []string{\"/bin/sh\", \"-c\", \"while true; do sleep 1; done\"}"
  },
  {
    "id" : "0aea9771-7b2f-4d7e-8198-34ec6a374a22",
    "prId" : 32990,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32990#pullrequestreview-599228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abb38e95-520c-4c29-ad06-7300408d9b1d",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Add a short comment explaining why retries are needed here.\n",
        "createdAt" : "2016-09-19T17:26:21Z",
        "updatedAt" : "2016-09-19T21:18:56Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "787f06b0-757b-4f83-aefc-66b8729507e2",
        "parentId" : "abb38e95-520c-4c29-ad06-7300408d9b1d",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "ACK\n",
        "createdAt" : "2016-09-19T17:39:05Z",
        "updatedAt" : "2016-09-19T21:18:56Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfcbdae178f5ce0e06496b30ae331731987f2015",
    "line" : null,
    "diffHunk" : "@@ -1,1 +293,297 @@\t\t\t\t\t// The image registry is not stable, which sometimes causes the test to fail. Add retry mechanism to make this\n\t\t\t\t\t// less flaky.\n\t\t\t\t\tconst flakeRetry = 3\n\t\t\t\t\tfor i := 1; i <= flakeRetry; i++ {\n\t\t\t\t\t\tvar err error"
  },
  {
    "id" : "62eac3fe-0b9d-4b7a-92db-98efd764df9c",
    "prId" : 26856,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0b83b80-bc84-4c6c-b6fc-822eb00b9af5",
        "parentId" : null,
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "Nice check that it stabilizes.\n",
        "createdAt" : "2016-06-06T23:31:30Z",
        "updatedAt" : "2016-06-07T00:26:12Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6ad652104599d5035a945b1967f2773abbbd09c",
    "line" : 291,
    "diffHunk" : "@@ -1,1 +162,166 @@\n\t\t\t\tEventually(invalidImageContainer.GetPhase, retryTimeout, pollInterval).Should(Equal(testCase.Phase))\n\t\t\t\tConsistently(invalidImageContainer.GetPhase, consistentCheckTimeout, pollInterval).Should(Equal(testCase.Phase))\n\n\t\t\t\tstatus, err := invalidImageContainer.GetStatus()"
  },
  {
    "id" : "b7a6e230-3f22-4bf0-926c-de1e05e17d78",
    "prId" : 24329,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e736203-2768-4499-bd7b-9054f5e7de3c",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Should use `Consistently` instead of `Eventually`. All pods are `Pending` after created, :)\n",
        "createdAt" : "2016-04-27T08:36:21Z",
        "updatedAt" : "2016-04-28T08:21:39Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "c7e8be31-c9ed-42a0-8fc3-f0660d590aa6",
        "parentId" : "3e736203-2768-4499-bd7b-9054f5e7de3c",
        "authorId" : "b163eb06-f462-45c5-9780-9117ec57f4da",
        "body" : "It works with the 'BeforeEach' codes.\n\n'BeforeEach' makes sure a pod has enough time to change its phase.\nIn every 'It' test, we just need to check if the status become terminated/succeed/running/pending.\n\nThe 'Pending' is a little special, we cannot tell if it means the pod scheduling is in progress or if it is the final phase. So I add extra timeout.\n",
        "createdAt" : "2016-04-27T10:40:05Z",
        "updatedAt" : "2016-04-28T08:21:39Z",
        "lastEditedBy" : "b163eb06-f462-45c5-9780-9117ec57f4da",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa3bf1faacead494b2fcf439c66f4d6eb5144f9a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +114,118 @@\t\t\t\t\tcontainer, err = containerCase.Get()\n\t\t\t\t\treturn container.Phase\n\t\t\t\t}, retryTimeout, pollInterval).Should(Equal(api.PodPending))\n\t\t\t\tExpect(err).NotTo(HaveOccurred())\n\t\t\t\tExpect(container).Should(CContainerEqual(containerCase))"
  },
  {
    "id" : "f4fca4c9-4e29-422e-ba8a-3102c04cae70",
    "prId" : 24191,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85464a34-5918-413b-b211-52dbf411190f",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "nits: Remove \"it\" from all the `It` description.\n",
        "createdAt" : "2016-04-13T18:40:16Z",
        "updatedAt" : "2016-05-12T07:30:41Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ddb160bd01ded13f9322ed28598251e098a1294",
    "line" : null,
    "diffHunk" : "@@ -1,1 +64,68 @@\n\t\tContext(\"when start a container that exits successfully\", func() {\n\t\t\tIt(\"it should run with the expected status [Conformance]\", func() {\n\t\t\t\ttestContainer := api.Container{\n\t\t\t\t\tImage: \"gcr.io/google_containers/busybox\","
  },
  {
    "id" : "8dd56eb1-577b-4f61-8e3a-1c38f9b2327d",
    "prId" : 24191,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00a0f1c0-ef9d-4b4e-8e76-79b7b01e07b9",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Looks like you are mainly testing container restart here, why this name? :)\n",
        "createdAt" : "2016-05-12T05:47:12Z",
        "updatedAt" : "2016-05-12T07:30:41Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "c83ed3d2-e688-4d16-8afa-044cff3f514e",
        "parentId" : "00a0f1c0-ef9d-4b4e-8e76-79b7b01e07b9",
        "authorId" : "b163eb06-f462-45c5-9780-9117ec57f4da",
        "body" : "It also checks other status. I'll change it to 'expected restart count and status'.\n",
        "createdAt" : "2016-05-12T06:20:29Z",
        "updatedAt" : "2016-05-12T07:30:41Z",
        "lastEditedBy" : "b163eb06-f462-45c5-9780-9117ec57f4da",
        "tags" : [
        ]
      },
      {
        "id" : "2e282dcc-ea53-4065-9da3-9718da215361",
        "parentId" : "00a0f1c0-ef9d-4b4e-8e76-79b7b01e07b9",
        "authorId" : "b163eb06-f462-45c5-9780-9117ec57f4da",
        "body" : "As replied in one of your other comments, retart count is tested in all the four cases, so I'll keep the current description.\n",
        "createdAt" : "2016-05-12T07:17:48Z",
        "updatedAt" : "2016-05-12T07:30:41Z",
        "lastEditedBy" : "b163eb06-f462-45c5-9780-9117ec57f4da",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ddb160bd01ded13f9322ed28598251e098a1294",
    "line" : null,
    "diffHunk" : "@@ -1,1 +64,68 @@\n\t\tContext(\"when start a container that exits successfully\", func() {\n\t\t\tIt(\"it should run with the expected status [Conformance]\", func() {\n\t\t\t\ttestContainer := api.Container{\n\t\t\t\t\tImage: \"gcr.io/google_containers/busybox\","
  },
  {
    "id" : "dc4d0362-79aa-455e-b5c6-a725f9cfa0c4",
    "prId" : 24191,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "027cc613-5d12-4435-903f-4300d1ac59f2",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Wow, I don't know this. Learned that! :)\n",
        "createdAt" : "2016-05-12T05:50:34Z",
        "updatedAt" : "2016-05-12T07:30:41Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ddb160bd01ded13f9322ed28598251e098a1294",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +123,127 @@\t\t\t\t\t\tstatus, _, _ = terminateContainer.GetStatus()\n\t\t\t\t\t\treturn status.RestartCount\n\t\t\t\t\t}, retryTimeout, pollInterval).Should(BeNumerically(testStatus.RestartCountOper, testStatus.RestartCount))\n\n\t\t\t\t\tBy(\"it should get the expected 'Ready' status\")"
  },
  {
    "id" : "1d3e3d68-0fd4-4dbc-814e-f8970d1694f9",
    "prId" : 24191,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a270c143-b6b6-4cc5-9dc0-7c18879ea19b",
        "parentId" : null,
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "I feel like that this is a subset of the first test. Why we need this?\n",
        "createdAt" : "2016-05-12T06:11:03Z",
        "updatedAt" : "2016-05-12T07:30:41Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "919d0feb-0e5b-4d65-93c6-835c980aeca5",
        "parentId" : "a270c143-b6b6-4cc5-9dc0-7c18879ea19b",
        "authorId" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "body" : "Nvm, I found that the pod phase is different.\n",
        "createdAt" : "2016-05-12T06:12:36Z",
        "updatedAt" : "2016-05-12T07:30:41Z",
        "lastEditedBy" : "4e418bc8-21fb-4523-80c1-9c751c193126",
        "tags" : [
        ]
      },
      {
        "id" : "3257cc41-42eb-4f5e-8c04-78aa3ee276f5",
        "parentId" : "a270c143-b6b6-4cc5-9dc0-7c18879ea19b",
        "authorId" : "b163eb06-f462-45c5-9780-9117ec57f4da",
        "body" : "Yes, 4 scenarios\nsuccess but terminated\nsuccess but running\nfail by false command (maybe I can just use /bin/false)\nfail by invalid image\n",
        "createdAt" : "2016-05-12T06:31:22Z",
        "updatedAt" : "2016-05-12T07:30:41Z",
        "lastEditedBy" : "b163eb06-f462-45c5-9780-9117ec57f4da",
        "tags" : [
        ]
      }
    ],
    "commit" : "4ddb160bd01ded13f9322ed28598251e098a1294",
    "line" : null,
    "diffHunk" : "@@ -1,1 +202,206 @@\t\tContext(\"when start a container that exits failure\", func() {\n\t\t\tIt(\"it should run with the expected status [Conformance]\", func() {\n\t\t\t\ttestContainer := api.Container{\n\t\t\t\t\tImage:           \"gcr.io/google_containers/busybox\",\n\t\t\t\t\tCommand:         []string{\"false\"},"
  }
]