[
  {
    "id" : "ce239bc5-1fdf-4c44-b41c-c68989563d92",
    "prId" : 97987,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97987#pullrequestreview-568724201",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5a456ca-c0c3-4c4a-83e7-81fd44103f75",
        "parentId" : null,
        "authorId" : "df90aa6f-4328-4d27-92eb-8f98c90bd8b0",
        "body" : "Since the default DNS for a pod is the `kube-dns` pod, if something isn't working with the custom DNS would these tests pass?",
        "createdAt" : "2021-01-13T16:18:39Z",
        "updatedAt" : "2021-01-14T01:58:17Z",
        "lastEditedBy" : "df90aa6f-4328-4d27-92eb-8f98c90bd8b0",
        "tags" : [
        ]
      },
      {
        "id" : "9fa85622-40c9-40f3-807b-81bf0a5a0f44",
        "parentId" : "b5a456ca-c0c3-4c4a-83e7-81fd44103f75",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "These tests will fail if there is no valid DNS service. I  figured thats actually a requirement - we can't test that we `support configurable pod DNS` unless we actually try to hit a named endpoint . ",
        "createdAt" : "2021-01-13T18:50:59Z",
        "updatedAt" : "2021-01-14T01:58:17Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "9505b0f4-9cc7-4502-830e-1720518b3545",
        "parentId" : "b5a456ca-c0c3-4c4a-83e7-81fd44103f75",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "Any other test, which scans an implementation detail, wont actually measure the functionality, but rather, will just be an guess based on a heurisitc.",
        "createdAt" : "2021-01-13T18:51:49Z",
        "updatedAt" : "2021-01-14T01:58:17Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "f43a634c-bcff-49e8-9576-a34f9d64d699",
        "parentId" : "b5a456ca-c0c3-4c4a-83e7-81fd44103f75",
        "authorId" : "df90aa6f-4328-4d27-92eb-8f98c90bd8b0",
        "body" : "I am wondering on the use of the `kube-dns` as the endpoint though.  If the configuration is a noop for CNI's that don't implement the dns plugin then the default dns would be the cluster DNS (`kube-dns`) wouldn't it?  That would mean they would pass the test even though they didn't really configure the DNS?    I think we would need to use something like `1.1.1.1` to make sure custom DNS is working.\r\n\r\nAgreed on actually hitting the endpoint. If the above is true then I think we should also keep the check that the DNS is actually set to what we expected and hit the endpoint (to make sure we are using the correct DNS).",
        "createdAt" : "2021-01-13T22:19:22Z",
        "updatedAt" : "2021-01-14T01:58:17Z",
        "lastEditedBy" : "df90aa6f-4328-4d27-92eb-8f98c90bd8b0",
        "tags" : [
        ]
      },
      {
        "id" : "104bce18-4110-46b3-956a-cd1d9430642e",
        "parentId" : "b5a456ca-c0c3-4c4a-83e7-81fd44103f75",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "oh, i see so you mean you could just 'get lucky' here, in cases where the dns isnt being overwritten ",
        "createdAt" : "2021-01-14T01:21:08Z",
        "updatedAt" : "2021-01-14T01:58:17Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "c4c79635-e4e3-4c2e-92c2-ec3736718ed8",
        "parentId" : "b5a456ca-c0c3-4c4a-83e7-81fd44103f75",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "# good idea ! \r\n\r\n- Confirmed that no-op CNIs, like EKS, indeed DO NOT by default resolve `kubernetes` on windows ....  So were all good there... but ANYWAY, i stole your idea just bc its good to be extra careful :) \r\n- SO.... , just to be double careful, added a failure case, where 1.1.1.1 not being injected directly leads to failed test as well, that will weed out no-op DNS systems early on.\r\n- So now we have **BOTH** the 1.1.1.1 verification, as well as the other one.  BTW the old regex seemed to not be restrictive enough, so i just did a regular string search, more readable and more precise. \r\n\r\n# results\r\n- On EKS, this test now FAILS FAST (because it notices that 1.1.1.1 is not injected)\r\n- On AKS w/ calico, the test passes . ",
        "createdAt" : "2021-01-14T02:00:36Z",
        "updatedAt" : "2021-01-14T02:03:46Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "f48ebb3e-2abb-4d12-9a3c-cc3c079d93fe",
        "parentId" : "b5a456ca-c0c3-4c4a-83e7-81fd44103f75",
        "authorId" : "df90aa6f-4328-4d27-92eb-8f98c90bd8b0",
        "body" : "> Confirmed that no-op CNIs, like EKS, indeed DO NOT by default resolve kubernetes on windows\r\n\r\nInteresting. What is the default DNS configuration for EKS if not using kube-dns?  On azure with flannel using no DNS pod spec I get:\r\n\r\n```\r\nipconfig /all\r\n  DNS Servers . . . . . . . . . . . : 10.96.0.10\r\n   NetBIOS over Tcpip. . . . . . . . : Disabled\r\n   Connection-specific DNS Suffix Search List :\r\n                                       default.svc.cluster.local\r\n                                       svc.cluster.local\r\n                                       cluster.local\r\n\r\ncurl.exe -k https://kubernetes:443\r\n{\r\n  \"kind\": \"Status\",\r\n  \"apiVersion\": \"v1\",\r\n  \"metadata\": {\r\n\r\n  },\r\n  \"status\": \"Failure\",\r\n  \"message\": \"forbidden: User \\\"system:anonymous\\\" cannot get path \\\"/\\\"\",\r\n  \"reason\": \"Forbidden\",\r\n  \"details\": {\r\n\r\n  },\r\n  \"code\": 403\r\n}\r\n```\r\n\r\nWhere 10.96.0.10 is the kube-dns ip:\r\n\r\n```\r\nk get svc -n kube-system kube-dns              \r\nNAME       TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE\r\nkube-dns   ClusterIP   10.96.0.10   <none>        53/UDP,53/TCP,9153/TCP   20h\r\n```",
        "createdAt" : "2021-01-14T19:53:01Z",
        "updatedAt" : "2021-01-14T19:53:01Z",
        "lastEditedBy" : "df90aa6f-4328-4d27-92eb-8f98c90bd8b0",
        "tags" : [
        ]
      },
      {
        "id" : "96516c24-d796-4f71-98fd-760e39c7de16",
        "parentId" : "b5a456ca-c0c3-4c4a-83e7-81fd44103f75",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "interestinggg\r\nin that case its goood we kept the 1.1.1.1 testcase ",
        "createdAt" : "2021-01-15T00:01:35Z",
        "updatedAt" : "2021-01-15T00:01:35Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "491204ed-48ae-4807-af90-940c660849aa",
        "parentId" : "b5a456ca-c0c3-4c4a-83e7-81fd44103f75",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "```PS C:\\> ipconfig /all\r\n\r\nWindows IP Configuration\r\n\r\n   Host Name . . . . . . . . . . . . : windows-server-iis-675f9744d7-dr2qv\r\n   Primary Dns Suffix  . . . . . . . :\r\n   Node Type . . . . . . . . . . . . : Hybrid\r\n   IP Routing Enabled. . . . . . . . : No\r\n   WINS Proxy Enabled. . . . . . . . : No\r\n   DNS Suffix Search List. . . . . . : omg.svc.cluster.local\r\n                                       svc.cluster.local\r\n                                       cluster.local\r\n\r\nEthernet adapter vEthernet (cid-5eae4daf98cf88ff695042b491c118892dcc853114f5353379c2b65c3e181d97):\r\n\r\n   Connection-specific DNS Suffix  . : omg.svc.cluster.local\r\n   Description . . . . . . . . . . . : Hyper-V Virtual Ethernet Adapter #5\r\n   Physical Address. . . . . . . . . : 00-15-5D-AC-88-C9\r\n   DHCP Enabled. . . . . . . . . . . : No\r\n   Autoconfiguration Enabled . . . . : Yes\r\n   Link-local IPv6 Address . . . . . : fe80::b131:bcb8:c3fa:96db%34(Preferred)\r\n   IPv4 Address. . . . . . . . . . . : 192.168.22.170(Preferred)\r\n   Subnet Mask . . . . . . . . . . . : 255.255.224.0\r\n   Default Gateway . . . . . . . . . : 192.168.0.1\r\n   DNS Servers . . . . . . . . . . . : 10.100.0.10\r\n   NetBIOS over Tcpip. . . . . . . . : Disabled\r\n   Connection-specific DNS Suffix Search List :\r\n                                       omg.svc.cluster.local\r\n                                       svc.cluster.local\r\n                                       cluster.local```\r\n\r\nthtas the default config of eks",
        "createdAt" : "2021-01-15T00:03:53Z",
        "updatedAt" : "2021-01-15T00:03:53Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "444f00a4-38e4-4903-9969-ac86484325b4",
        "parentId" : "b5a456ca-c0c3-4c4a-83e7-81fd44103f75",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "maybe its because your running in the `default` namespaces which is why you resolve `kubernetews` \r\n\r\notherwise, you wont be able to, hence why in general , the 2nd test is sufficient bc e2es allways run outside the default ns :) ",
        "createdAt" : "2021-01-15T00:04:45Z",
        "updatedAt" : "2021-01-15T00:04:45Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      }
    ],
    "commit" : "834ce35ba15c60328f568149acb5d935ebed72ca",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +46,50 @@\t\tginkgo.By(\"Preparing a test DNS service with injected DNS names...\")\n\t\t// the default service IP will vary from cluster to cluster, but will always be present and is a good DNS test target\n\t\ttestInjectedIP := svc.Spec.ClusterIP\n\t\ttestSearchPath := \"default.svc.cluster.local\"\n"
  },
  {
    "id" : "34a863bb-3bab-478b-9827-c733e27351cf",
    "prId" : 97987,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97987#pullrequestreview-568386151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58a2c5c8-e105-4cb1-a164-17f69cae80e0",
        "parentId" : null,
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "nit: Not sure if this is needed, considering pod won't be coming to running state if lands on a Linux node.",
        "createdAt" : "2021-01-14T16:08:33Z",
        "updatedAt" : "2021-01-14T17:11:03Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      }
    ],
    "commit" : "834ce35ba15c60328f568149acb5d935ebed72ca",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +62,66 @@\t\tframework.ExpectNoError(err)\n\n\t\tginkgo.By(\"confirming that the pod has a windows label\")\n\t\tframework.ExpectEqual(testPod.Spec.NodeSelector[\"kubernetes.io/os\"], \"windows\")\n\t\tframework.Logf(\"Created pod %v\", testPod)"
  },
  {
    "id" : "b04d883f-942d-4387-ae34-2b941bb13b08",
    "prId" : 97987,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/97987#pullrequestreview-568386151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ce0b324-0868-464c-ad7a-0d3ac6cc7a32",
        "parentId" : null,
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "nit: sentence incomplete?",
        "createdAt" : "2021-01-14T17:06:28Z",
        "updatedAt" : "2021-01-14T17:11:03Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      }
    ],
    "commit" : "834ce35ba15c60328f568149acb5d935ebed72ca",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +74,78 @@\n\t\t// This isn't the best 'test' but it is a great diagnostic, see later test for the 'real' test.\n\t\tginkgo.By(\"Calling ipconfig to get debugging info for this pod's DNS and confirm that a dns server 1.1.1.1 can be injected, along with \")\n\t\tcmd := []string{\"ipconfig\", \"/all\"}\n\t\tstdout, _, err := f.ExecWithOptions(framework.ExecOptions{"
  },
  {
    "id" : "b330a012-6a62-43d6-a9e8-e40f3b4d1459",
    "prId" : 74925,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74925#pullrequestreview-211959650",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dc531ae-6eb7-4e50-b5e5-d8e0c984c164",
        "parentId" : null,
        "authorId" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "body" : "shouldn't this also work for Linux? If so, then this test should be added to test/e2e/network/dns.go instead, and ideally, the test would also work on Linux.",
        "createdAt" : "2019-03-06T13:02:24Z",
        "updatedAt" : "2019-08-26T21:53:21Z",
        "lastEditedBy" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "tags" : [
        ]
      },
      {
        "id" : "e4aa67e9-40d6-4daa-b40f-0f8cce004472",
        "parentId" : "1dc531ae-6eb7-4e50-b5e5-d8e0c984c164",
        "authorId" : "af72c07f-3e8b-45b5-99c8-a6b06a2c1f08",
        "body" : "This is again Windows specific & is in response to #73414 ",
        "createdAt" : "2019-03-06T18:38:04Z",
        "updatedAt" : "2019-08-26T21:53:21Z",
        "lastEditedBy" : "af72c07f-3e8b-45b5-99c8-a6b06a2c1f08",
        "tags" : [
        ]
      },
      {
        "id" : "4e33721e-290d-46f6-b213-c31ea0b62b49",
        "parentId" : "1dc531ae-6eb7-4e50-b5e5-d8e0c984c164",
        "authorId" : "af72c07f-3e8b-45b5-99c8-a6b06a2c1f08",
        "body" : "Update, while the other test seems to be a duplicate, I don't believe this will work for Linux as it uses ipconfig instead of ifconfig. It is replacing a test that checks /etc/resolv.conf in linux containers",
        "createdAt" : "2019-03-06T20:32:23Z",
        "updatedAt" : "2019-08-26T21:53:21Z",
        "lastEditedBy" : "af72c07f-3e8b-45b5-99c8-a6b06a2c1f08",
        "tags" : [
        ]
      },
      {
        "id" : "cd38e6af-fc82-4d5d-ac2b-044de8ac0b0c",
        "parentId" : "1dc531ae-6eb7-4e50-b5e5-d8e0c984c164",
        "authorId" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "body" : "Out of curiosity, which is the ``/etc/resolv.conf`` test you're mentioning?\r\n",
        "createdAt" : "2019-03-07T12:39:33Z",
        "updatedAt" : "2019-08-26T21:53:21Z",
        "lastEditedBy" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "tags" : [
        ]
      },
      {
        "id" : "491322e6-4038-4f74-8708-5af63dfcbc3e",
        "parentId" : "1dc531ae-6eb7-4e50-b5e5-d8e0c984c164",
        "authorId" : "af72c07f-3e8b-45b5-99c8-a6b06a2c1f08",
        "body" : "[This test](https://github.com/kubernetes/kubernetes/blob/18cc11566f25b11c9fb1f2157a85bb40b410c8a7/test/e2e/network/dns.go#L316) which the \"should support configurable pod DNS servers\" is based on.",
        "createdAt" : "2019-03-07T18:54:39Z",
        "updatedAt" : "2019-08-26T21:53:21Z",
        "lastEditedBy" : "af72c07f-3e8b-45b5-99c8-a6b06a2c1f08",
        "tags" : [
        ]
      }
    ],
    "commit" : "0fd18fc06f0cf8d436e6dc120b9d7489f8ece176",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +41,45 @@\tf := framework.NewDefaultFramework(\"dns\")\n\n\tginkgo.It(\"should support configurable pod DNS servers\", func() {\n\t\tginkgo.By(\"Preparing a test DNS service with injected DNS names...\")\n\t\ttestInjectedIP := \"1.1.1.1\""
  }
]