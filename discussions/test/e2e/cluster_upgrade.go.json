[
  {
    "id" : "78bc9432-0655-40ac-b4a3-449b2b62c856",
    "prId" : 48895,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48895#pullrequestreview-49909093",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6be7530f-52b2-43dd-a716-86d72dc7aa41",
        "parentId" : null,
        "authorId" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "body" : "@foxish i believe i somehow modified BUILD files incorrectly. i have to put `apps` identifier. Otherwise, the compiler will treat `upgrades/apps` an import re-declaration of `upgrades`.",
        "createdAt" : "2017-07-13T19:58:05Z",
        "updatedAt" : "2017-07-13T20:53:45Z",
        "lastEditedBy" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "tags" : [
        ]
      },
      {
        "id" : "96e096f9-cfd9-4325-be4d-48b4cc3cc6b0",
        "parentId" : "6be7530f-52b2-43dd-a716-86d72dc7aa41",
        "authorId" : "a0299f5e-d293-4eaf-b600-44d80bb14e1f",
        "body" : "upgrades/apps should be imported as apps. I think this is a holdover from when it was upgrades/sigapps and you wanted to import it as apps.",
        "createdAt" : "2017-07-13T20:12:33Z",
        "updatedAt" : "2017-07-13T20:53:45Z",
        "lastEditedBy" : "a0299f5e-d293-4eaf-b600-44d80bb14e1f",
        "tags" : [
        ]
      },
      {
        "id" : "3f494d76-eb59-4254-b58c-0b5e533a8dd2",
        "parentId" : "6be7530f-52b2-43dd-a716-86d72dc7aa41",
        "authorId" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "body" : "i see! i will look into the BUILD files and run `hack/update-bazel.sh` to generate the correct binaries.",
        "createdAt" : "2017-07-13T20:24:22Z",
        "updatedAt" : "2017-07-13T20:58:32Z",
        "lastEditedBy" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "tags" : [
        ]
      },
      {
        "id" : "909dc8aa-4bd9-4d51-b451-8bd010284726",
        "parentId" : "6be7530f-52b2-43dd-a716-86d72dc7aa41",
        "authorId" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "body" : "@rmmh From my understanding, BUILD files should only be generated via `hack/update-bazel.sh` without manual modification. I did so, but the compiler still treats `upgrades/apps` an import re-declaration of `upgrades`.\r\n\r\nI compared the generated BUILD files with BUILD files of a similar nested directory. There were some discrepancies, but as i should not modify any BUILD file manually, i am not able to do anything regarding this.\r\n\r\nDo you mind to elaborate how to import `upgrades/apps` as `apps` _without_ modifying BUILD files?",
        "createdAt" : "2017-07-13T20:59:46Z",
        "updatedAt" : "2017-07-13T20:59:51Z",
        "lastEditedBy" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "tags" : [
        ]
      },
      {
        "id" : "08c81e09-6ffb-42ea-8b82-46413df40852",
        "parentId" : "6be7530f-52b2-43dd-a716-86d72dc7aa41",
        "authorId" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "body" : "@rmmh Sorry, i forgot to mention i have updated `sigapps` to `apps`, but the compiler still treats `upgrades/apps` an import re-declaration of `upgrades`.\r\n\r\nWhat i really meant was i wish to have:\r\n```\r\n\"k8s.io/kubernetes/test/e2e/upgrades/apps\"\r\n```\r\nNot:\r\n```\r\napps \"k8s.io/kubernetes/test/e2e/upgrades/apps\"\r\n```\r\nThis is in accord with `framework` imports that do not have any identifier in front:\r\n```\r\n\"k8s.io/kubernetes/test/e2e/framework\"\r\n\"k8s.io/kubernetes/test/e2e/framework/ginkgowrapper\"\r\n```\r\n\r\nI synced with @foxish offline, and we concluded that this is not important as long as it works. i will leave the comments here in case presubmit queue tests fail.",
        "createdAt" : "2017-07-13T21:18:23Z",
        "updatedAt" : "2017-07-13T21:22:20Z",
        "lastEditedBy" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b75093e0a3d80d8da48fd71cb6844ad9a90b3d4",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +31,35 @@\t\"k8s.io/kubernetes/test/e2e/framework/ginkgowrapper\"\n\t\"k8s.io/kubernetes/test/e2e/upgrades\"\n\tapps \"k8s.io/kubernetes/test/e2e/upgrades/apps\"\n\t\"k8s.io/kubernetes/test/utils/junit\"\n"
  },
  {
    "id" : "36045ebc-27ee-4321-94a9-b136fc1a82bc",
    "prId" : 35697,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35697#pullrequestreview-7362606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "607a32ad-3c77-4e3b-acce-04c0ea57f0af",
        "parentId" : null,
        "authorId" : null,
        "body" : "You'll either need to change the test description in the above \"It()\" clause, or split these into separate \"It()\" clauses, each with their own description.  I strongly prefer the latter option, as it makes things far more transparent as to what's failing.\n\nI realize that that will be difficult in practise, as we would need to figure out how best to avoid a separate cluster upgrade per test.  Happy to leave this change to a separate PR if that makes more sense.\n",
        "createdAt" : "2016-10-31T23:16:37Z",
        "updatedAt" : "2016-11-15T04:30:47Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "03b7905f-b58e-4d90-b3c4-36372b7335c7",
        "parentId" : "607a32ad-3c77-4e3b-acce-04c0ea57f0af",
        "authorId" : "15d1f4bd-5840-4fce-87f5-1f04ed7f10e5",
        "body" : "@quinton-hoole, had similar thoughts. ok lets keep all the upgrade tests under single upgrade as of now. I will change the \"It()\" clause to be generic.\n",
        "createdAt" : "2016-11-07T06:41:46Z",
        "updatedAt" : "2016-11-15T04:30:47Z",
        "lastEditedBy" : "15d1f4bd-5840-4fce-87f5-1f04ed7f10e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a779aca11dbc6edb696bd0200cc9725c375f221f",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +49,53 @@\t\t\t\t// Close over f.\n\t\t\t\ttestServiceRemainsUp(f, sem)\n\t\t\t\ttestSecretsDuringUpgrade(f, sem)\n\t\t\t\ttestConfigMapsDuringUpgrade(f, sem)\n\t\t\t\ttestGuestbookApplicationDuringUpgrade(f, sem)"
  },
  {
    "id" : "98df5af1-879a-4017-a4d7-a222d8184cd9",
    "prId" : 35697,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35697#pullrequestreview-7362628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fdd0b93-3146-4b25-ab38-9e4087bb7847",
        "parentId" : null,
        "authorId" : null,
        "body" : "As per above comment, you'll need to update the description in the \"It()\" clause above.\n",
        "createdAt" : "2016-10-31T23:18:16Z",
        "updatedAt" : "2016-11-15T04:30:47Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "b9ffb814-18e6-4fbc-8cda-fbef494081ee",
        "parentId" : "5fdd0b93-3146-4b25-ab38-9e4087bb7847",
        "authorId" : "15d1f4bd-5840-4fce-87f5-1f04ed7f10e5",
        "body" : "ok will change the \"It()\" clause.\n",
        "createdAt" : "2016-11-07T06:42:08Z",
        "updatedAt" : "2016-11-15T04:30:47Z",
        "lastEditedBy" : "15d1f4bd-5840-4fce-87f5-1f04ed7f10e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a779aca11dbc6edb696bd0200cc9725c375f221f",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +89,93 @@\t\t\t\t// Close over f.\n\t\t\t\ttestServiceRemainsUp(f, sem)\n\t\t\t\ttestSecretsDuringUpgrade(f, sem)\n\t\t\t\ttestConfigMapsDuringUpgrade(f, sem)\n\t\t\t\ttestGuestbookApplicationDuringUpgrade(f, sem)"
  },
  {
    "id" : "083f2431-deb5-44a9-aa35-44d097fd5e1b",
    "prId" : 35697,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35697#pullrequestreview-7362637",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7713638f-11d8-43b8-a051-a26b33aac209",
        "parentId" : null,
        "authorId" : null,
        "body" : "Same comment as above.\n",
        "createdAt" : "2016-10-31T23:18:51Z",
        "updatedAt" : "2016-11-15T04:30:47Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "b601fc1b-5f65-4c0f-982d-dacaec5c915c",
        "parentId" : "7713638f-11d8-43b8-a051-a26b33aac209",
        "authorId" : "15d1f4bd-5840-4fce-87f5-1f04ed7f10e5",
        "body" : "ok will change the \"It()\" clause.\n",
        "createdAt" : "2016-11-07T06:42:14Z",
        "updatedAt" : "2016-11-15T04:30:47Z",
        "lastEditedBy" : "15d1f4bd-5840-4fce-87f5-1f04ed7f10e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a779aca11dbc6edb696bd0200cc9725c375f221f",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +133,137 @@\t\t\t\t// Close over f.\n\t\t\t\ttestServiceRemainsUp(f, sem)\n\t\t\t\ttestSecretsDuringUpgrade(f, sem)\n\t\t\t\ttestConfigMapsDuringUpgrade(f, sem)\n\t\t\t\ttestGuestbookApplicationDuringUpgrade(f, sem)"
  },
  {
    "id" : "893c600e-fd6b-493f-b24b-65736fbb14c1",
    "prId" : 24014,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ce8561b-438a-491a-a45e-a25949be804c",
        "parentId" : null,
        "authorId" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "body" : "@thockin This seemed a bit weird to me; any comments from the `ServiceTestJig` side of things?\n",
        "createdAt" : "2016-04-14T22:18:12Z",
        "updatedAt" : "2016-05-03T16:53:44Z",
        "lastEditedBy" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "tags" : [
        ]
      },
      {
        "id" : "33e0b8fa-b0b4-4cc7-b576-d02462bfdfe5",
        "parentId" : "1ce8561b-438a-491a-a45e-a25949be804c",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "The initial create does not have the LB status block.  If you don't need the LB status (e.g. IP) then you don't have to wait.  I opted to not make the create also wait because it wasn't clear how long was \"long enough\" in all cases, and they seemed like distinct ideas\n",
        "createdAt" : "2016-04-15T00:02:54Z",
        "updatedAt" : "2016-05-03T16:53:44Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1e284fd55cfef8fce2a6d3c5f981d1e714609da",
    "line" : 320,
    "diffHunk" : "@@ -1,1 +279,283 @@\tBy(\"creating a TCP service \" + serviceName + \" with type=LoadBalancer in namespace \" + f.Namespace.Name)\n\t// TODO it's weird that we have to do this and then wait WaitForLoadBalancer which changes\n\t// tcpService.\n\ttcpService := jig.CreateTCPServiceOrFail(f.Namespace.Name, func(s *api.Service) {\n\t\ts.Spec.Type = api.ServiceTypeLoadBalancer"
  },
  {
    "id" : "6acbafee-a78a-43b6-9e52-be2830baef68",
    "prId" : 16084,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5285f2c-6647-4ffd-8a35-9ce2830d5ad6",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "Was going to ask if we really needed to split up the `BeforeEach`es like this, but this is code @mbforbes wrote. :\\\n\n@ihmccreery do you have any idea if we need to run `realVersion` before any of the Framework stuff starts?\n",
        "createdAt" : "2015-10-22T22:59:08Z",
        "updatedAt" : "2015-10-26T23:10:23Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50fbd663645beca60b66dda07f53131bc29eb31",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +163,167 @@\t\t})\n\n\t\tf := NewFramework(\"cluster-upgrade\")\n\t\tvar w *WebserverTest\n\t\tBeforeEach(func() {"
  },
  {
    "id" : "d95b89ab-1b2c-4db8-af00-1540874d2b0f",
    "prId" : 11791,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f47dedd9-1b8d-4139-b5d9-f157c42211ac",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "this seems a little fragile - is it likely to change?\n",
        "createdAt" : "2015-08-10T23:07:58Z",
        "updatedAt" : "2015-08-20T01:16:08Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "3be4639b-ba86-4c64-8605-f476095cda72",
        "parentId" : "f47dedd9-1b8d-4139-b5d9-f157c42211ac",
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "I think this is as fragile as shelling out to `gcloud` is. Changing it from combined output to standard error does not seem to make it more fragile based on my (admittedly unscientific) knowledge of what `gcloud` writes to stdout vs stderr for a handful of different commands. I do think that we should switch to calling the raw APIs Very Soon&trade;.\n",
        "createdAt" : "2015-08-13T16:50:20Z",
        "updatedAt" : "2015-08-20T01:16:08Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f71597ef6e5bfb59a3f61dcadd580ce4aa4fa446",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +560,564 @@\t\t// NOTE(mbforbes): If you are changing this gcloud command, update\n\t\t//                 cluster/gce/upgrade.sh to match this EXACTLY.\n\t\t// A `rolling-updates start` call outputs what we want to stderr.\n\t\t_, output, err := retryCmd(\"gcloud\", append(migUdpateCmdBase(),\n\t\t\t\"rolling-updates\","
  },
  {
    "id" : "ec42f7c3-5450-48ca-8813-9146a221d998",
    "prId" : 11025,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e8ffbf0-3177-45b9-b268-1bfde3a54f24",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "don't need to fix now, but migTemlate is a typo.\n",
        "createdAt" : "2015-07-10T03:24:45Z",
        "updatedAt" : "2015-07-10T03:24:45Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d9de02b78a54ea408c295c7b13a13e3cb2c971e",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +514,518 @@}\n\n// migTemlate (GCE/GKE-only) returns the name of the MIG template that the\n// nodes of the cluster use.\nfunc migTemplate() (string, error) {"
  },
  {
    "id" : "03f2472a-1131-49da-bb10-dd3638635d72",
    "prId" : 10273,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ad3bf6e-cb53-4583-a973-9492147e127e",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "should this be got?\n",
        "createdAt" : "2015-06-24T04:25:23Z",
        "updatedAt" : "2015-06-24T08:01:11Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "afe23641-1442-4b2a-99e2-0a60675773dd",
        "parentId" : "3ad3bf6e-cb53-4583-a973-9492147e127e",
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "Good question. I'm trying to be consistent about logging the shorter version. (They are really the same thing.)\n",
        "createdAt" : "2015-06-24T07:54:16Z",
        "updatedAt" : "2015-06-24T08:01:11Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "53179399e70e960a14168ecbd78b0e8a6af09856",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +391,395 @@\t\t\tgot, want)\n\t}\n\tLogf(\"Master is at version %s\", want)\n\treturn nil\n}"
  },
  {
    "id" : "d04d8967-0a16-4f9d-aba4-9b9a2efd7fb2",
    "prId" : 10273,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb5777aa-4f2e-4f67-bd1c-f5a80350a2e1",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "should you also add this check for the kube-push case?\n",
        "createdAt" : "2015-06-24T04:26:36Z",
        "updatedAt" : "2015-06-24T08:01:11Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "1fc6661d-1d59-4c34-a9a0-eed6223a0aa0",
        "parentId" : "fb5777aa-4f2e-4f67-bd1c-f5a80350a2e1",
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "Another good question. Kube-push uses local binaries, so I don't think the whole versioning situation is as well defined as passing an explicit version (as in all other non-kube-push cases). We might be able to shell out and check the latest git commit in the user's repo (assuming this test is running in a git repo), but I opted to just address only \"official\" upgrade paths in this PR. Is this OK?\n",
        "createdAt" : "2015-06-24T07:58:17Z",
        "updatedAt" : "2015-06-24T08:01:11Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "53179399e70e960a14168ecbd78b0e8a6af09856",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +265,269 @@\t\t\t\tBy(\"Performing a master upgrade\")\n\t\t\t\ttestMasterUpgrade(ip, v, masterUpgrade)\n\t\t\t\tBy(\"Checking master version\")\n\t\t\t\texpectNoError(checkMasterVersion(f.Client, v))\n\t\t\t\tBy(\"Validating cluster after master upgrade\")"
  },
  {
    "id" : "df551dac-e17f-4231-805a-91daf3d44e84",
    "prId" : 9987,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16d7db7c-1d5c-4b9a-bd5e-28e38fea578c",
        "parentId" : null,
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "Why is this doing a migrollingupdate directly instead of calling into the e2e-upgrade shell script (which does a mig rolling update)? This doesn't actually provide test coverage for that part of the shell script. \n",
        "createdAt" : "2015-06-18T20:34:31Z",
        "updatedAt" : "2015-06-18T22:59:55Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "2e06ad31-e0e5-41f1-a96c-94fdd998b8c1",
        "parentId" : "16d7db7c-1d5c-4b9a-bd5e-28e38fea578c",
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "This is a good point, and I was debating between the two options.\n\nIf you check out the shell script, we're only avoiding calling `do-node-upgrade`, which contains one line of bash, which is one gcloud command.\n\nI think given that we want retries and more controlled (timed) polling / waiting as part of the e2e test scripts for increased stability, I _think_ this is the better choice.\n",
        "createdAt" : "2015-06-18T22:06:33Z",
        "updatedAt" : "2015-06-18T22:59:55Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      },
      {
        "id" : "ceecf1bd-b170-49a1-86da-f44dd8206e8c",
        "parentId" : "16d7db7c-1d5c-4b9a-bd5e-28e38fea578c",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "But if the bash changes (or breaks) we won't notice because it isn't covered by the test. The point of the test isn't to replicate the upgrade functionality more reliably, but rather to exercise the functionality. \n\nI'm ok with this going in as-is if we a) add a big fat comment to the one line in the bash script saying not to change it without updating this test and b) we file an issue to replace the bash script with a go program that we can reasonably test. \n",
        "createdAt" : "2015-06-18T22:14:02Z",
        "updatedAt" : "2015-06-18T22:59:55Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "03f67050-bb20-4ecf-81ce-0ca586c9f4e8",
        "parentId" : "16d7db7c-1d5c-4b9a-bd5e-28e38fea578c",
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "Ack.\n\nI added a comment above the bash script and the go code both that when changing one you must change the other. (Not yet pushed.)\n\nRegarding the issue, is #6095 sufficient, or should I file another more specific one?\n",
        "createdAt" : "2015-06-18T22:29:09Z",
        "updatedAt" : "2015-06-18T22:59:55Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      },
      {
        "id" : "f16b28fc-d2fd-44ff-8767-e215ac922724",
        "parentId" : "16d7db7c-1d5c-4b9a-bd5e-28e38fea578c",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "That one is fine. I've added it to the v1-post milestone so that it gets attention sooner. \n",
        "createdAt" : "2015-06-18T22:33:58Z",
        "updatedAt" : "2015-06-18T22:59:55Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2803fbe3434b24a623a7714b0c34b2a81eefe096",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +61,65 @@\n\tLogf(\"Performing a node upgrade to %s; waiting at most %v per node\", tmpl, restartPerNodeTimeout)\n\tif err := migRollingUpdate(tmpl, restartPerNodeTimeout); err != nil {\n\t\treturn fmt.Errorf(\"error doing node upgrade via a migRollingUpdate to %s: %v\", tmpl, err)\n\t}"
  },
  {
    "id" : "f97ced35-edf5-43ad-af25-d90f377b9c31",
    "prId" : 9517,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff79af05-d660-46da-9c0f-9045d6329aa8",
        "parentId" : null,
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "Could you please add a bit more thorough validation of the existence of things? The service polling should generally take care of these assertions at a high level (i.e. if things are working, the backing objects probably exist), but I'd really like a bit more low-level checking that the following exist as we expect after an upgrade:\n- replication controllers\n- pods\n- services\n\nSome kind of `validate()` function would be awesome for this purpose.\n\nI guess this is getting at the broader notion that we don't just want to test that a service works during an upgrade, but that the objects we created before an upgrade are all running and healthy afterwards.\n",
        "createdAt" : "2015-06-10T21:02:25Z",
        "updatedAt" : "2015-06-11T22:11:01Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      },
      {
        "id" : "d3456fbb-bc68-4f95-9939-8fd76d0796c0",
        "parentId" : "ff79af05-d660-46da-9c0f-9045d6329aa8",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Added a validate step that checks that the pod and service i created in the test namespace still exist after the upgrade.\n",
        "createdAt" : "2015-06-10T23:40:42Z",
        "updatedAt" : "2015-06-11T22:11:01Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "de55e17f753009f8b6b79723c8a3e82d5077ae9a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +122,126 @@\tBy(\"Starting upgrade\")\n\tupgrade()\n\tdone <- struct{}{}\n\tLogf(\"Stopping async validation\")\n\twg.Wait()"
  },
  {
    "id" : "2f073d36-67cb-4664-84c6-3450fcf2859b",
    "prId" : 9517,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a6c0c56-efc3-4f2a-9733-57070e87b5d3",
        "parentId" : null,
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "I find that adding a bit more logging (I call this \"affirmative logging\") is really helpful when I'm viewing test output and seeing where things broke. Like \"starting X\" paried with \"X succeeded\" for all X we do or check.\n",
        "createdAt" : "2015-06-10T21:04:09Z",
        "updatedAt" : "2015-06-11T22:11:01Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      },
      {
        "id" : "b15f673e-2241-4f6d-9806-1eb4447c5f66",
        "parentId" : "8a6c0c56-efc3-4f2a-9733-57070e87b5d3",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Done.\n",
        "createdAt" : "2015-06-10T23:40:56Z",
        "updatedAt" : "2015-06-11T22:11:01Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "de55e17f753009f8b6b79723c8a3e82d5077ae9a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +129,133 @@\tBy(\"Validating post upgrade state\")\n\tvalidateClusterUpgrade(framework, svcName, podName)\n}\n\nfunc runUpgradeScript(scriptPath string, args ...string) {"
  },
  {
    "id" : "1e574275-543c-4db7-80aa-6ea8b04d79f6",
    "prId" : 9517,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "934c148b-ed2a-4d8c-a4c8-ff8f9f3a6954",
        "parentId" : null,
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "Can you log both when you start and stop doing the async service validation?\n",
        "createdAt" : "2015-06-11T00:22:35Z",
        "updatedAt" : "2015-06-11T22:11:01Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "de55e17f753009f8b6b79723c8a3e82d5077ae9a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +122,126 @@\tBy(\"Starting upgrade\")\n\tupgrade()\n\tdone <- struct{}{}\n\tLogf(\"Stopping async validation\")\n\twg.Wait()"
  }
]