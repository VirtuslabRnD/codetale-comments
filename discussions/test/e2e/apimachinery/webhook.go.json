[
  {
    "id" : "1334a449-218f-4c7c-a9b4-3c1c144b7e3b",
    "prId" : 86148,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86148#pullrequestreview-332750922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9029facb-c1a1-436c-be78-36f25f77e902",
        "parentId" : null,
        "authorId" : "d3b9ec12-6001-425a-940b-b74c57282ba6",
        "body" : "Nice catch!",
        "createdAt" : "2019-12-16T17:49:08Z",
        "updatedAt" : "2019-12-16T17:51:14Z",
        "lastEditedBy" : "d3b9ec12-6001-425a-940b-b74c57282ba6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f786cb07b792590a69cf3e580e828370fe577f20",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +996,1000 @@\tconfigMap := toBeMutatedConfigMap(f)\n\tmutatedConfigMap, err := client.CoreV1().ConfigMaps(f.Namespace.Name).Create(configMap)\n\tframework.ExpectNoError(err)\n\texpectedConfigMapData := map[string]string{\n\t\t\"mutation-start\":   \"yes\","
  },
  {
    "id" : "6f63394b-03dc-44db-9042-e395da5b5dab",
    "prId" : 81857,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81857#pullrequestreview-280487699",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76518d7a-7d34-4dc4-ad9f-51bcf46fa091",
        "parentId" : null,
        "authorId" : "580b4924-2623-4aee-8bbf-3e1735a9dc88",
        "body" : "What privs are needed to register the webhooks?",
        "createdAt" : "2019-08-27T18:11:42Z",
        "updatedAt" : "2019-08-29T20:50:27Z",
        "lastEditedBy" : "580b4924-2623-4aee-8bbf-3e1735a9dc88",
        "tags" : [
        ]
      },
      {
        "id" : "44db5959-4dda-4f0e-9f3b-578081b3e73c",
        "parentId" : "76518d7a-7d34-4dc4-ad9f-51bcf46fa091",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "I'm not aware of any by default. The RBAC privilege in e2e framework should work as-is. cc @liggitt",
        "createdAt" : "2019-08-27T21:39:31Z",
        "updatedAt" : "2019-08-29T20:50:27Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      }
    ],
    "commit" : "68bafe4404c7c877055f104e55af0d9a8b169cf1",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +193,197 @@\t\tnamespace based on the webhook namespace selector MUST be allowed.\n\t*/\n\tframework.ConformanceIt(\"should be able to deny pod and configmap creation\", func() {\n\t\twebhookCleanup := registerWebhook(f, f.UniqueName, context, servicePort)\n\t\tdefer webhookCleanup()"
  },
  {
    "id" : "e3f75775-494f-4477-8be4-d493a10ebd0d",
    "prId" : 81857,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81857#pullrequestreview-280487827",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "404f8539-23d5-4415-9aab-52d7ca0a57e2",
        "parentId" : null,
        "authorId" : "580b4924-2623-4aee-8bbf-3e1735a9dc88",
        "body" : "nit: in testMutatingPodWebhook your local variable name is configMap instead of pod\r\n",
        "createdAt" : "2019-08-27T18:41:21Z",
        "updatedAt" : "2019-08-29T20:50:27Z",
        "lastEditedBy" : "580b4924-2623-4aee-8bbf-3e1735a9dc88",
        "tags" : [
        ]
      },
      {
        "id" : "67948647-974d-4992-80df-cf69466cf3d8",
        "parentId" : "404f8539-23d5-4415-9aab-52d7ca0a57e2",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "updated",
        "createdAt" : "2019-08-27T21:39:48Z",
        "updatedAt" : "2019-08-29T20:50:27Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      }
    ],
    "commit" : "68bafe4404c7c877055f104e55af0d9a8b169cf1",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +260,264 @@\t\tthe InitContainer MUST be added the TerminationMessagePolicy MUST be defaulted.\n\t*/\n\tframework.ConformanceIt(\"should mutate pod and apply defaults after mutation\", func() {\n\t\twebhookCleanup := registerMutatingWebhookForPod(f, f.UniqueName, context, servicePort)\n\t\tdefer webhookCleanup()"
  },
  {
    "id" : "0cf07ad6-b32e-4953-9434-84c5ff90d104",
    "prId" : 81857,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81857#pullrequestreview-281225304",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5c43d0b-200d-43d6-bcde-f7a4e0b8020d",
        "parentId" : null,
        "authorId" : "580b4924-2623-4aee-8bbf-3e1735a9dc88",
        "body" : "The webhook config registers for update and create but this only tests create.",
        "createdAt" : "2019-08-27T18:49:03Z",
        "updatedAt" : "2019-08-29T20:50:27Z",
        "lastEditedBy" : "580b4924-2623-4aee-8bbf-3e1735a9dc88",
        "tags" : [
        ]
      },
      {
        "id" : "3cd11d36-8ad3-4a47-8e6a-2c193576a4e0",
        "parentId" : "c5c43d0b-200d-43d6-bcde-f7a4e0b8020d",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "this registration function is shared between multiple tests. The test `testMultiVersionCustomResourceWebhook` exercises the update operation",
        "createdAt" : "2019-08-27T21:40:01Z",
        "updatedAt" : "2019-08-29T20:50:27Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "920a242e-ffee-4b1b-84f2-fdbdab9419a1",
        "parentId" : "c5c43d0b-200d-43d6-bcde-f7a4e0b8020d",
        "authorId" : "580b4924-2623-4aee-8bbf-3e1735a9dc88",
        "body" : "ok",
        "createdAt" : "2019-08-29T05:26:33Z",
        "updatedAt" : "2019-08-29T20:50:27Z",
        "lastEditedBy" : "580b4924-2623-4aee-8bbf-3e1735a9dc88",
        "tags" : [
        ]
      }
    ],
    "commit" : "68bafe4404c7c877055f104e55af0d9a8b169cf1",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +295,299 @@\t\twebhookCleanup := registerMutatingWebhookForCustomResource(f, f.UniqueName, context, testcrd, servicePort)\n\t\tdefer webhookCleanup()\n\t\ttestMutatingCustomResourceWebhook(f, testcrd.Crd, testcrd.DynamicClients[\"v1\"], false)\n\t})\n"
  },
  {
    "id" : "8a3dca41-93d9-44cf-85c2-d2f325b3d0c7",
    "prId" : 81857,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81857#pullrequestreview-280487945",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b611f006-7d15-4e09-aab8-45e39b750678",
        "parentId" : null,
        "authorId" : "580b4924-2623-4aee-8bbf-3e1735a9dc88",
        "body" : "I don't see where this checks if the patch was applied and the mutation was applied. I guess the mutation was applied at create so would already be there. It checks that patch returned no error but doesn't check that the patch was applied, is that sufficient?",
        "createdAt" : "2019-08-27T19:11:36Z",
        "updatedAt" : "2019-08-29T20:50:27Z",
        "lastEditedBy" : "580b4924-2623-4aee-8bbf-3e1735a9dc88",
        "tags" : [
        ]
      },
      {
        "id" : "ef093eb5-391f-441a-8d39-1fc778952723",
        "parentId" : "b611f006-7d15-4e09-aab8-45e39b750678",
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "added checks for the patch and the mutation results",
        "createdAt" : "2019-08-27T21:40:07Z",
        "updatedAt" : "2019-08-29T20:50:27Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      }
    ],
    "commit" : "68bafe4404c7c877055f104e55af0d9a8b169cf1",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +327,331 @@\t\twebhookCleanup := registerMutatingWebhookForCustomResource(f, f.UniqueName, context, testcrd, servicePort)\n\t\tdefer webhookCleanup()\n\t\ttestMultiVersionCustomResourceWebhook(f, testcrd)\n\t})\n"
  },
  {
    "id" : "0e5cbe7a-4000-4049-a9a4-9f13dd9c5ab2",
    "prId" : 81857,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81857#pullrequestreview-280626440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b78ac366-702e-45e6-a93c-d2941c967f14",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "this is failing with IPv6, I trill try to check tomorrow why",
        "createdAt" : "2019-08-27T22:03:23Z",
        "updatedAt" : "2019-08-29T20:50:27Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "576c9593-7b2e-4bd3-a519-86f674658f29",
        "parentId" : "b78ac366-702e-45e6-a93c-d2941c967f14",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "it's passing now, we'll try to monitor it ðŸ¤” ",
        "createdAt" : "2019-08-28T07:06:53Z",
        "updatedAt" : "2019-08-29T20:50:27Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "68bafe4404c7c877055f104e55af0d9a8b169cf1",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +248,252 @@\t\tthe first webhook is present. Attempt to create a config map; both keys MUST be added to the config map.\n\t*/\n\tframework.ConformanceIt(\"should mutate configmap\", func() {\n\t\twebhookCleanup := registerMutatingWebhookForConfigMap(f, f.UniqueName, context, servicePort)\n\t\tdefer webhookCleanup()"
  },
  {
    "id" : "7fe32745-5d15-4da6-b466-fe0fc7da4390",
    "prId" : 81857,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81857#pullrequestreview-280626464",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b7a8db2-a155-49b5-a9b7-5a851c583dc0",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "this is failing with IPv6 too, will try to check why",
        "createdAt" : "2019-08-27T22:04:03Z",
        "updatedAt" : "2019-08-29T20:50:27Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "433ce2d5-b33a-4f08-b407-c8b4747ee91b",
        "parentId" : "4b7a8db2-a155-49b5-a9b7-5a851c583dc0",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "it's passing now, we'll try to monitor it ðŸ¤” ",
        "createdAt" : "2019-08-28T07:06:58Z",
        "updatedAt" : "2019-08-29T20:50:27Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "68bafe4404c7c877055f104e55af0d9a8b169cf1",
    "line" : 272,
    "diffHunk" : "@@ -1,1 +638,642 @@\t\tall webhook configurations MUST be deleted. Attempt to create an object; the object MUST NOT be mutated.\n\t*/\n\tframework.ConformanceIt(\"listing mutating webhooks should work\", func() {\n\t\ttestListSize := 10\n\t\ttestUUID := string(uuid.NewUUID())"
  },
  {
    "id" : "37f92383-f96d-42d0-b652-2d8b9613cd06",
    "prId" : 81381,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81381#pullrequestreview-274639647",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5d98452-9fbf-4273-ab03-61b44b05b840",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "before getting/updating, I'd expect to ensure the initial webhook was effective",
        "createdAt" : "2019-08-14T02:10:57Z",
        "updatedAt" : "2019-08-14T16:56:33Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3121773af796e1e40f07e4466e0851c37a493494",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +280,284 @@\t\t\treturn true, nil\n\t\t})\n\n\t\tginkgo.By(\"Updating a validating webhook configuration's rules to not include the create operation\")\n\t\terr = retry.RetryOnConflict(retry.DefaultRetry, func() error {"
  },
  {
    "id" : "76f68462-5fdb-4873-8377-92330efdeda2",
    "prId" : 81381,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81381#pullrequestreview-274640210",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ad26ef6-789f-4250-892a-1763ab9e7204",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "same comments apply to mutating",
        "createdAt" : "2019-08-14T02:14:04Z",
        "updatedAt" : "2019-08-14T16:56:33Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3121773af796e1e40f07e4466e0851c37a493494",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +331,335 @@\t})\n\n\tginkgo.It(\"patching/updating a mutating webhook should work\", func() {\n\t\tclient := f.ClientSet\n\t\tadmissionClient := client.AdmissionregistrationV1()"
  },
  {
    "id" : "13c2cb80-0ab5-47b2-925f-56a3265ab6d9",
    "prId" : 81381,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81381#pullrequestreview-275002707",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afee7f4c-836b-4436-a467-85f498ee93db",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "nit, attempt a delete of the configmap here (ignoring errors)? just so we don't accumulate a ton of configmaps while waiting for the webhook (same comment applies below while waiting for the patch `[\"CREATE\"]` to take affect, and to the mutating test)",
        "createdAt" : "2019-08-14T16:23:41Z",
        "updatedAt" : "2019-08-14T16:56:33Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "3121773af796e1e40f07e4466e0851c37a493494",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +273,277 @@\t\t\t\terr = client.CoreV1().ConfigMaps(f.Namespace.Name).Delete(cm.Name, nil)\n\t\t\t\tframework.ExpectNoError(err, \"Deleting successfully created configMap\")\n\t\t\t\treturn false, nil\n\t\t\t}\n\t\t\tif !strings.Contains(err.Error(), \"denied\") {"
  },
  {
    "id" : "4c0b48c9-cc7b-42a6-8743-8509a4163538",
    "prId" : 78765,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78765#pullrequestreview-246647961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23b069fd-e220-4110-8b55-bbbcbaed39f6",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "registerMutatingWebhookForCustomResource is called by three distinct tests, so must register a unique mutatingwebhookconfig for each",
        "createdAt" : "2019-06-06T15:30:24Z",
        "updatedAt" : "2019-06-06T15:35:40Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2b911dda651663b23a312d648aa44da335efaa4a",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1331,1335 @@}\n\nfunc registerMutatingWebhookForCustomResource(f *framework.Framework, context *certContext, testcrd *crd.TestCrd) func() {\n\tclient := f.ClientSet\n\tginkgo.By(fmt.Sprintf(\"Registering the mutating webhook for custom resource %s via the AdmissionRegistration API\", testcrd.Crd.Name))"
  },
  {
    "id" : "228be45f-9b52-43bb-8508-f1e8bbd86c76",
    "prId" : 78614,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78614#pullrequestreview-245052948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b053c172-9da0-4784-949f-2cadf26be6dd",
        "parentId" : null,
        "authorId" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "body" : "while we're here, `admissionregistrationv1beta1`?",
        "createdAt" : "2019-06-03T18:37:43Z",
        "updatedAt" : "2019-06-03T18:46:40Z",
        "lastEditedBy" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "8229af31d218f6106a7dd15d4cb37d20411a41cf",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +23,27 @@\t\"time\"\n\n\t\"k8s.io/api/admissionregistration/v1beta1\"\n\tapps \"k8s.io/api/apps/v1\"\n\tv1 \"k8s.io/api/core/v1\""
  },
  {
    "id" : "803c0095-54f8-4d21-8471-0f1e1a3863c8",
    "prId" : 76346,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76346#pullrequestreview-237931217",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcf183c5-f245-410d-b596-34d4c2013af3",
        "parentId" : null,
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "nit: I realized it's copied from existing method, but is 1 minute necessary?",
        "createdAt" : "2019-04-16T00:14:24Z",
        "updatedAt" : "2019-05-17T16:54:41Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      },
      {
        "id" : "8ec14996-16c3-4127-abb0-d977dbeff828",
        "parentId" : "bcf183c5-f245-410d-b596-34d4c2013af3",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I don't remember why we made it 1 minute in the first place. I prefer to fix them in a dedicated PR if necessary.",
        "createdAt" : "2019-04-17T18:25:03Z",
        "updatedAt" : "2019-05-17T16:54:41Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "2f1f12f7-0cea-49f1-9502-db7138811d22",
        "parentId" : "bcf183c5-f245-410d-b596-34d4c2013af3",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "it tries every 2 seconds up to a minute... the minute timeout is expected to be generous",
        "createdAt" : "2019-05-15T16:20:14Z",
        "updatedAt" : "2019-05-17T16:54:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d40e3c9e98ecade4a62d18f20163164d3e5e862",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +1272,1276 @@func updateCustomResource(c dynamic.ResourceInterface, ns, name string, update updateCustomResourceFn) (*unstructured.Unstructured, error) {\n\tvar cr *unstructured.Unstructured\n\tpollErr := wait.PollImmediate(2*time.Second, 1*time.Minute, func() (bool, error) {\n\t\tvar err error\n\t\tif cr, err = c.Get(name, metav1.GetOptions{}); err != nil {"
  },
  {
    "id" : "27dfe25a-3384-4f41-b4e2-760aeeff80a2",
    "prId" : 66807,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66807#pullrequestreview-143700252",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1116306d-a008-4d32-9a97-d4b121fb6adf",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "random thought (no action requested): our tests would be more readable, more concise, and make for better examples if we embedded yaml instead of constructing objects like this.",
        "createdAt" : "2018-08-06T17:36:53Z",
        "updatedAt" : "2018-08-07T02:00:13Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7d918947-525e-44b6-98b6-f565d8202576",
        "parentId" : "1116306d-a008-4d32-9a97-d4b121fb6adf",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Sounds good. Created https://github.com/kubernetes/kubernetes/issues/67029 to track.",
        "createdAt" : "2018-08-06T18:01:20Z",
        "updatedAt" : "2018-08-07T02:00:13Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "d89c8dd8c0bf1a7be84f50d1a0b9a9a47b6b5d69",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +426,430 @@\n\t_, err := client.AdmissionregistrationV1beta1().ValidatingWebhookConfigurations().Create(&v1beta1.ValidatingWebhookConfiguration{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName: configName,\n\t\t},"
  },
  {
    "id" : "61e6be6d-51d8-4602-aab0-f8c41b08d025",
    "prId" : 62143,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62143#pullrequestreview-141714859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a9ea5ff-b642-4c9b-a8a1-91444688ded0",
        "parentId" : null,
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "Might be nice to write a proper DeleteAndWaitForCleanup method. It can be built on the waitPool() method which should shorten the test run time.",
        "createdAt" : "2018-07-30T20:48:26Z",
        "updatedAt" : "2018-09-25T18:21:15Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "635e1836-7773-490a-a908-72c881cc2084",
        "parentId" : "6a9ea5ff-b642-4c9b-a8a1-91444688ded0",
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "Sure, that would be better. I think this was just copied from the other tests. ",
        "createdAt" : "2018-07-30T21:01:31Z",
        "updatedAt" : "2018-09-25T18:21:15Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ba644ef6b48377cb122e7c1b0487cbb913a8ee4",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +905,909 @@\t// The webhook configuration is honored in 10s.\n\ttime.Sleep(10 * time.Second)\n\treturn func() {\n\t\terr := client.AdmissionregistrationV1beta1().MutatingWebhookConfigurations().Delete(configName, nil)\n\t\tframework.ExpectNoError(err, \"deleting webhook config %s with namespace %s\", configName, namespace)"
  },
  {
    "id" : "44c7ced3-ea28-4805-9b55-9deaa7f5ebaf",
    "prId" : 62143,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62143#pullrequestreview-156656798",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e77ea5ed-81bb-432f-9ab9-9fbfe2a11576",
        "parentId" : null,
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "Should do a get to verify the config object has actually been deleted.",
        "createdAt" : "2018-09-19T04:59:48Z",
        "updatedAt" : "2018-09-25T18:21:15Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ba644ef6b48377cb122e7c1b0487cbb913a8ee4",
    "line" : 224,
    "diffHunk" : "@@ -1,1 +1012,1016 @@\n\terr = client.AdmissionregistrationV1beta1().MutatingWebhookConfigurations().Delete(dummyMutatingWebhookConfigName, nil)\n\tframework.ExpectNoError(err, \"deleting webhook config %s with namespace %s\", dummyMutatingWebhookConfigName, namespace)\n}\n"
  },
  {
    "id" : "a16790e3-1f4f-46c3-9768-e14a4e06ccbe",
    "prId" : 61609,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61609#pullrequestreview-109215810",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "900b4030-6c75-435d-928a-edbb44a170d5",
        "parentId" : null,
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "I am also adding a label selector on the deny-crd.k8s.io webhook so it won't accidentally deny crds created by other e2e tests run in parallel",
        "createdAt" : "2018-04-03T20:54:14Z",
        "updatedAt" : "2018-04-03T22:14:42Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      },
      {
        "id" : "5f9a500d-9baf-4511-807a-42f3340d5d0c",
        "parentId" : "900b4030-6c75-435d-928a-edbb44a170d5",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : ":+1:",
        "createdAt" : "2018-04-04T07:27:14Z",
        "updatedAt" : "2018-04-04T07:27:14Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fcc269733ae31c44642f20659125df39dd76a48",
    "line" : 206,
    "diffHunk" : "@@ -1,1 +1155,1159 @@\t\t\t\t\t},\n\t\t\t\t}},\n\t\t\t\tNamespaceSelector: &metav1.LabelSelector{\n\t\t\t\t\tMatchExpressions: []metav1.LabelSelectorRequirement{\n\t\t\t\t\t\t{"
  },
  {
    "id" : "0dc4ac27-6182-48f4-aff5-d471b814cc8c",
    "prId" : 61499,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61499#pullrequestreview-106210007",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24ccfcde-1dce-44f3-9591-4f7a5d80cece",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "If you want to make sure a failed hook can't prevent its own removal, you should match the webhook configuration resource and the delete operation, right?",
        "createdAt" : "2018-03-21T22:25:25Z",
        "updatedAt" : "2018-03-22T01:34:37Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ce13a29c-3445-48ec-9251-125b9822e2ab",
        "parentId" : "24ccfcde-1dce-44f3-9591-4f7a5d80cece",
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "There is actually one configuration already doing that, these ones are there to test if a hook can prevent deleting another hook's configuration (to prevent a cycle of hooks preventing each other's deletions)",
        "createdAt" : "2018-03-22T14:38:31Z",
        "updatedAt" : "2018-03-22T16:52:39Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      },
      {
        "id" : "dcb98aeb-2eaa-473b-9558-69006f7b5120",
        "parentId" : "24ccfcde-1dce-44f3-9591-4f7a5d80cece",
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : " https://github.com/jennybuckley/kubernetes/blob/cd06e4db1fa8c2eda0e08d8699964fa41fca3cfa/test/e2e/apimachinery/webhook.go#L737-L748",
        "createdAt" : "2018-03-22T14:42:19Z",
        "updatedAt" : "2018-03-22T14:43:35Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      },
      {
        "id" : "018136aa-7657-4c40-a81a-d9c7ccf70f6b",
        "parentId" : "24ccfcde-1dce-44f3-9591-4f7a5d80cece",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> these ones are there to test if a hook can prevent deleting another hook's configuration\r\n\r\nI don't see how selecting an invalid resource tests that case",
        "createdAt" : "2018-03-22T15:31:18Z",
        "updatedAt" : "2018-03-22T15:31:18Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "3e1a70bf-cb0e-4228-8495-4f5cf1901823",
        "parentId" : "24ccfcde-1dce-44f3-9591-4f7a5d80cece",
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "These webhook configurations should be able to be created and deleted without interference from the webhook I linked above. If webhooks are able to prevent deletion of other webhook configurations, the webhook I linked above will cause [this check](https://github.com/jennybuckley/kubernetes/blob/cd06e4db1fa8c2eda0e08d8699964fa41fca3cfa/test/e2e/apimachinery/webhook.go#L822) to fail, which it did, as shown in [this test result](https://k8s-gubernator.appspot.com/build/kubernetes-jenkins/pr-logs/pull/59840/pull-kubernetes-e2e-gce/23731/#sig-api-machinery-admissionwebhook-should-not-be-able-to-prevent-deleting-validating-webhook-configurations) from #59840 with just the test commit and not the fix:\r\n```\r\ntest/e2e/apimachinery/webhook.go:147\r\ndeleting webhook config e2e-test-should-be-removable-validating-webhook-config with namespace e2e-tests-webhook-qlmqf\r\nExpected error:\r\n    <*errors.StatusError | 0xc421454b40>: {\r\n        ErrStatus: {\r\n            TypeMeta: {Kind: \"\", APIVersion: \"\"},\r\n            ListMeta: {SelfLink: \"\", ResourceVersion: \"\", Continue: \"\"},\r\n            Status: \"Failure\",\r\n            Message: \"admission webhook \\\"deny-webhook-configuration-deletions.k8s.io\\\" denied the request: this webhook denies all requests\",\r\n            Reason: \"\",\r\n            Details: nil,\r\n            Code: 500,\r\n        },\r\n    }\r\n    admission webhook \"deny-webhook-configuration-deletions.k8s.io\" denied the request: this webhook denies all requests\r\nnot to have occurred\r\ntest/e2e/apimachinery/webhook.go:815\r\n```",
        "createdAt" : "2018-03-22T16:46:26Z",
        "updatedAt" : "2018-03-22T16:48:28Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      },
      {
        "id" : "e642dc34-144d-40f8-9214-28200fd9e1b5",
        "parentId" : "24ccfcde-1dce-44f3-9591-4f7a5d80cece",
        "authorId" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "body" : "The test goes like this:\r\n1. Create a [webhook](https://github.com/jennybuckley/kubernetes/blob/cd06e4db1fa8c2eda0e08d8699964fa41fca3cfa/test/e2e/apimachinery/webhook.go#L737-L748) which is configured to prevent deletion of ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects\r\n2. Attempt to create and delete a dummy [ValidatingWebhookConfiguration](https://github.com/jennybuckley/kubernetes/blob/cd06e4db1fa8c2eda0e08d8699964fa41fca3cfa/test/e2e/apimachinery/webhook.go#L782-L813)\r\n3. Attempt to create and delete a dummy [MutatingWebhookConfiguration](https://github.com/jennybuckley/kubernetes/blob/cd06e4db1fa8c2eda0e08d8699964fa41fca3cfa/test/e2e/apimachinery/webhook.go#L826-L857)\r\n4. Attempt to delete the webhook registered in (1) using [this cleanup function](https://github.com/jennybuckley/kubernetes/blob/cd06e4db1fa8c2eda0e08d8699964fa41fca3cfa/test/e2e/apimachinery/webhook.go#L767-L768) which is called [here](https://github.com/jennybuckley/kubernetes/blob/cd06e4db1fa8c2eda0e08d8699964fa41fca3cfa/test/e2e/apimachinery/webhook.go#L149)",
        "createdAt" : "2018-03-22T16:51:35Z",
        "updatedAt" : "2018-03-22T16:55:15Z",
        "lastEditedBy" : "37324129-fa96-456d-92ea-e5f9b41f8c7f",
        "tags" : [
        ]
      },
      {
        "id" : "85ba0c33-ed63-4b66-83b4-d82253abc768",
        "parentId" : "24ccfcde-1dce-44f3-9591-4f7a5d80cece",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I see, thanks.",
        "createdAt" : "2018-03-22T16:56:53Z",
        "updatedAt" : "2018-03-22T16:56:53Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd06e4db1fa8c2eda0e08d8699964fa41fca3cfa",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +793,797 @@\t\t\t\t\t\tAPIGroups:   []string{\"\"},\n\t\t\t\t\t\tAPIVersions: []string{\"v1\"},\n\t\t\t\t\t\tResources:   []string{\"invalid\"},\n\t\t\t\t\t},\n\t\t\t\t}},"
  },
  {
    "id" : "45caed84-c834-4a0d-b82c-2dcceaf87128",
    "prId" : 61499,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61499#pullrequestreview-105930889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a61e54b-1358-433a-8ea6-af7f47642622",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Same here",
        "createdAt" : "2018-03-21T22:25:37Z",
        "updatedAt" : "2018-03-22T01:34:37Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "cd06e4db1fa8c2eda0e08d8699964fa41fca3cfa",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +837,841 @@\t\t\t\t\t\tAPIGroups:   []string{\"\"},\n\t\t\t\t\t\tAPIVersions: []string{\"v1\"},\n\t\t\t\t\t\tResources:   []string{\"invalid\"},\n\t\t\t\t\t},\n\t\t\t\t}},"
  },
  {
    "id" : "f55ffb66-87de-48ba-af01-d926dce4f4a0",
    "prId" : 55525,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55525#pullrequestreview-77592896",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f07f4b7-7431-4495-acce-3e2a1cf007f6",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Oh, this fix is still not complete. The CleanupAction is called after the entire suite is done, but we need to call these cleanups after each `It` block. @cheftako has some code in his PR that's doing the right thing I think.",
        "createdAt" : "2017-11-17T21:46:44Z",
        "updatedAt" : "2017-11-17T21:46:44Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "3a3466c4-4f2c-4b45-97e8-ba0c0c33c483",
        "parentId" : "1f07f4b7-7431-4495-acce-3e2a1cf007f6",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "> we need to call these cleanups after each `It` block\r\n\r\nWhy not just use `AfterEach`?\r\n\r\n> @cheftako has some code in his PR that's doing the right thing I think.\r\n\r\nWould you provide the link to the PR?",
        "createdAt" : "2017-11-17T23:24:30Z",
        "updatedAt" : "2017-11-17T23:25:05Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "9edc40d3-6124-48cb-b40d-51c81a0b8183",
        "parentId" : "1f07f4b7-7431-4495-acce-3e2a1cf007f6",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "> Why not just use AfterEach?\r\n\r\nThat is what I meant :)\r\n\r\nhttps://github.com/kubernetes/kubernetes/pull/55829",
        "createdAt" : "2017-11-17T23:30:25Z",
        "updatedAt" : "2017-11-17T23:30:25Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "ab8b3ff0-8f11-48d5-b006-7670d5c91e06",
        "parentId" : "1f07f4b7-7431-4495-acce-3e2a1cf007f6",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thanks for fixing the CleanupAction! I'll go fix the webhook specific tests, that test shouldn't use CleanupAction from the beginning.",
        "createdAt" : "2017-11-17T23:50:31Z",
        "updatedAt" : "2017-11-17T23:50:31Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "b182721e-5f3c-449c-b0ec-97b8013e1f69",
        "parentId" : "1f07f4b7-7431-4495-acce-3e2a1cf007f6",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "This PR is not trying to modify any e2e test, but just keep those tests as-is and make `AddCleanupAction` work as intended (instead of noop).",
        "createdAt" : "2017-11-17T23:54:36Z",
        "updatedAt" : "2017-11-17T23:56:22Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "16aa5820fb0061462fbe21e0f7e69d8d9b18d71a",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +75,79 @@\tvar c clientset.Interface\n\tf := framework.NewDefaultFramework(\"webhook\")\n\tframework.AddCleanupAction(func() {\n\t\t// Cleanup actions will be called even when the tests are skipped and leaves namespace unset.\n\t\tif len(ns) > 0 {"
  },
  {
    "id" : "0a946a29-6951-4c28-832e-a0ebdda99397",
    "prId" : 55525,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55525#pullrequestreview-77589014",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c00f9a5-31f6-4fa7-a422-45237056b3c7",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I thought the namespace is set up during f.BeforeEach, so len(ns) won't be 0 even if the test is skipped.",
        "createdAt" : "2017-11-17T21:58:03Z",
        "updatedAt" : "2017-11-17T21:58:03Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "d6347a47-ab6a-4103-b323-f1262b45f1b5",
        "parentId" : "4c00f9a5-31f6-4fa7-a422-45237056b3c7",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "When e2e test is skipped (I meant `--ginkgo.skip`), namespace won't be created:\r\n\r\n```go\r\ntype Framework struct {\r\n\tNamespace                *v1.Namespace   // Every test has at least one namespace unless creation is skipped\r\n}\r\n```",
        "createdAt" : "2017-11-17T23:26:16Z",
        "updatedAt" : "2017-11-17T23:55:17Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "16aa5820fb0061462fbe21e0f7e69d8d9b18d71a",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +76,80 @@\tf := framework.NewDefaultFramework(\"webhook\")\n\tframework.AddCleanupAction(func() {\n\t\t// Cleanup actions will be called even when the tests are skipped and leaves namespace unset.\n\t\tif len(ns) > 0 {\n\t\t\tcleanWebhookTest(c, ns)"
  },
  {
    "id" : "5b7908a3-a367-476a-b259-d62c555ce2a8",
    "prId" : 55127,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55127#pullrequestreview-75648233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43e21e66-d3a1-45c2-9df1-b657dc0bc667",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@deads2k @sttts ptal the crd e2e test.",
        "createdAt" : "2017-11-10T02:14:00Z",
        "updatedAt" : "2017-11-13T20:55:47Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab053a224d27aa48ea4b34ba7591cfd72c3f567d",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +90,94 @@\t})\n\n\tIt(\"Should be able to deny custom resource creation\", func() {\n\t\t// Make sure the relevant provider supports admission webhook\n\t\tframework.SkipUnlessServerVersionGTE(serverWebhookVersion, f.ClientSet.Discovery())"
  },
  {
    "id" : "a510c04d-27b4-40e4-bff6-9167d33200a5",
    "prId" : 55127,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55127#pullrequestreview-76219224",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea1475ee-1574-46c1-9de1-625fdd195dc8",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "10s?",
        "createdAt" : "2017-11-13T19:23:46Z",
        "updatedAt" : "2017-11-13T20:55:47Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab053a224d27aa48ea4b34ba7591cfd72c3f567d",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +315,319 @@\tframework.ExpectNoError(err, \"registering webhook config %s with namespace %s\", webhookConfigName, namespace)\n\n\t// The webhook configuration is honored in 1s.\n\ttime.Sleep(10 * time.Second)\n}"
  },
  {
    "id" : "b3a7141b-8da6-4bb9-bcb7-5d5dd99ea9fd",
    "prId" : 54165,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54165#pullrequestreview-71664690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "628ff83e-226f-4708-a9a7-239bb4e5055d",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "does this need to be fixed before this can merge?",
        "createdAt" : "2017-10-23T23:42:59Z",
        "updatedAt" : "2017-10-27T22:59:09Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c24a4070-4cc9-4249-b7c3-419c2f393ab9",
        "parentId" : "628ff83e-226f-4708-a9a7-239bb4e5055d",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "No. We'll expand the test cases when the apiserver sends external objects.",
        "createdAt" : "2017-10-24T20:40:12Z",
        "updatedAt" : "2017-10-27T22:59:09Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f54fdb05950cfaec537dd74eb772f8ac5203e43",
    "line" : 264,
    "diffHunk" : "@@ -1,1 +262,266 @@\t// TODO: Test if webhook can detect pod with non-compliant metadata.\n\t// Currently metadata is lost because webhook uses the external version of\n\t// the objects, and the apiserver sends the internal objects.\n}\n"
  },
  {
    "id" : "204581f9-b91f-4cbb-9385-a62b85c86e31",
    "prId" : 54165,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54165#pullrequestreview-72593932",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80afd694-fc2f-416f-9f5b-f2e2e58c78a7",
        "parentId" : null,
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "It seems like this highlights the problem that we have no API to tell us which webhooks are enabled and functioning. I believe we are generally going to want that functionality and once we have it we can fix this sleep.",
        "createdAt" : "2017-10-27T00:30:57Z",
        "updatedAt" : "2017-10-27T22:59:09Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "b547fa73-1681-4b63-9dfe-75151b906413",
        "parentId" : "80afd694-fc2f-416f-9f5b-f2e2e58c78a7",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Tracked in https://github.com/kubernetes/kubernetes/issues/54712",
        "createdAt" : "2017-10-27T18:34:27Z",
        "updatedAt" : "2017-10-27T22:59:09Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f54fdb05950cfaec537dd74eb772f8ac5203e43",
    "line" : 248,
    "diffHunk" : "@@ -1,1 +246,250 @@\n\t// The webhook configuration is honored in 1s.\n\ttime.Sleep(2 * time.Second)\n}\n"
  }
]