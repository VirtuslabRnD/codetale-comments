[
  {
    "id" : "92a2c92a-b8c1-4aee-aac4-b1ad9c91b4d8",
    "prId" : 93487,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93487#pullrequestreview-457057752",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b210eacc-742a-4f0d-8297-2e1e368ab143",
        "parentId" : null,
        "authorId" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "body" : "nit: Can we get rid of the space between \"Release :\"?",
        "createdAt" : "2020-07-28T20:30:44Z",
        "updatedAt" : "2020-07-28T20:31:24Z",
        "lastEditedBy" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "tags" : [
        ]
      },
      {
        "id" : "ce032bba-51a4-4ef7-bc8c-bec33a0ab9ce",
        "parentId" : "b210eacc-742a-4f0d-8297-2e1e368ab143",
        "authorId" : "23d83a23-a06a-4542-a52f-6096ea5648ef",
        "body" : "Was following the format that's provided in the [community guide](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/conformance-tests.md#conformance-test-comment-metadata) as shown below.\r\n\r\n```\r\n/*\r\n  Release : v1.9\r\n  Testname: Kubelet: log output\r\n  Description: By default the stdout and stderr from the process being\r\n  executed in a pod MUST be sent to the pod's logs.\r\n*/\r\nframework.ConformanceIt(\"it should print the output to logs\", func() {\r\n  ...\r\n})\r\n```",
        "createdAt" : "2020-07-28T20:46:10Z",
        "updatedAt" : "2020-07-28T20:46:10Z",
        "lastEditedBy" : "23d83a23-a06a-4542-a52f-6096ea5648ef",
        "tags" : [
        ]
      },
      {
        "id" : "e3a8bf3f-ed56-468b-a8ad-555af59d72d8",
        "parentId" : "b210eacc-742a-4f0d-8297-2e1e368ab143",
        "authorId" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "body" : "ahh got it. It looks like our test for this uses the incorrect format (https://github.com/kubernetes/kubernetes/blob/master/test/conformance/walk_test.go#L153), but that's outside the scope of this PR.",
        "createdAt" : "2020-07-28T20:53:41Z",
        "updatedAt" : "2020-07-28T20:53:41Z",
        "lastEditedBy" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "tags" : [
        ]
      },
      {
        "id" : "5f22b56e-5236-4738-b6f4-4c94149e990c",
        "parentId" : "b210eacc-742a-4f0d-8297-2e1e368ab143",
        "authorId" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "body" : "I would argue the community guide has a typo in it, I don't think the space should be necessary",
        "createdAt" : "2020-07-28T21:57:25Z",
        "updatedAt" : "2020-07-28T21:57:26Z",
        "lastEditedBy" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "1077a9e862e93af3b1b4dbfbb404bed366b64855",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +91,95 @@\n\t/*\n\t\t    Release : v1.17\n\t\t    Testname: aggregator-supports-the-sample-apiserver\n\t\t    Description: Ensure that the sample-apiserver code from 1.17 and compiled against 1.17"
  },
  {
    "id" : "87fe3d0a-28b6-4687-8ea0-a05d966fcacb",
    "prId" : 84735,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84735#pullrequestreview-332094085",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43fd8519-c442-4d4e-a213-a150471135ac",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "with the 1.10 sample-apiserver image, this was getting a 200 response with status error text as the body (xref https://github.com/kubernetes/kubernetes/issues/50342, fixed in 1.12 in https://github.com/kubernetes/kubernetes/pull/67041)\r\n\r\nadded explicit Accept header like the other requests already being made in this test, and added checks below to verify we actually get the response back we expect",
        "createdAt" : "2019-12-13T20:15:50Z",
        "updatedAt" : "2019-12-16T16:06:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8111bb3d7718a10120f63a432f6278933234cb51",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +395,399 @@\t// Request Body: {\"apiVersion\":\"wardle.example.com/v1alpha1\",\"kind\":\"Flunder\",\"metadata\":{\"labels\":{\"sample-label\":\"true\"},\"name\":\"test-flunder\",\"namespace\":\"default\"}}\n\tflunder := `{\"apiVersion\":\"wardle.example.com/v1alpha1\",\"kind\":\"Flunder\",\"metadata\":{\"labels\":{\"sample-label\":\"true\"},\"name\":\"` + flunderName + `\",\"namespace\":\"default\"}}`\n\tresult := restClient.Post().AbsPath(\"/apis/wardle.example.com/v1alpha1/namespaces/default/flunders\").Body([]byte(flunder)).SetHeader(\"Accept\", \"application/json\").Do()\n\tframework.ExpectNoError(result.Error(), \"creating a new flunders resource\")\n\tvar statusCode int"
  },
  {
    "id" : "e2009b95-2a6b-4b8b-be67-8bdab90b0b5d",
    "prId" : 84735,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84735#pullrequestreview-332676915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a51b3561-2b9d-4608-a68c-b0d1367ad4ad",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "If we aren't going to bump this every time, we should say `Should be able to support the 1.17 Sample API Server`.  If we are, we should say `Should be able to support the current Sample API Server`.  Both are valuable, we probably should have two tests.",
        "createdAt" : "2019-12-16T15:58:56Z",
        "updatedAt" : "2019-12-16T16:06:41Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "bd3264aa-4ab6-443f-9ab4-fc383079d738",
        "parentId" : "a51b3561-2b9d-4608-a68c-b0d1367ad4ad",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Added 1.17 back into the test name. The 1.17 level of the sample-apiserver is significant because it relies only on v1 APIs.\r\n\r\nTesting the current level is trickier since it requires an image build.",
        "createdAt" : "2019-12-16T16:02:57Z",
        "updatedAt" : "2019-12-16T16:06:41Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8111bb3d7718a10120f63a432f6278933234cb51",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +94,98 @@\t*/\n\tframework.ConformanceIt(\"Should be able to support the 1.17 Sample API Server using the current Aggregator\", func() {\n\t\t// Testing a 1.17 version of the sample-apiserver\n\t\tTestSampleAPIServer(f, aggrclient, imageutils.GetE2EImage(imageutils.APIServer))\n\t})"
  },
  {
    "id" : "a2d15106-6117-4e45-b946-592fd1ce88dc",
    "prId" : 78780,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78780#pullrequestreview-248196931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "84816a40-a88b-41fc-8798-5b7bd8991e54",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "why?  unless there are conflicting imports, it's not really consistent in the codebase. ",
        "createdAt" : "2019-06-10T21:16:08Z",
        "updatedAt" : "2019-06-20T18:44:16Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "84f12684-4ecf-477d-9c2d-d67fe6471bcb",
        "parentId" : "84816a40-a88b-41fc-8798-5b7bd8991e54",
        "authorId" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "body" : "See the description, this particular color for the bikeshed is to explicitly include the version, all the time.  I'm not trying to suggest we enforce this for the whole k/k codebase, just anything that could potentially be promoted to conformance",
        "createdAt" : "2019-06-10T22:54:35Z",
        "updatedAt" : "2019-06-20T18:44:16Z",
        "lastEditedBy" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "tags" : [
        ]
      },
      {
        "id" : "d2d6a115-eb68-4840-969e-cd840aff3447",
        "parentId" : "84816a40-a88b-41fc-8798-5b7bd8991e54",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "¯\\_(ツ)_/¯  - we tried this with goimports and we ended on ... \"it's inconsistent and not enforced\".\r\n\r\nSo where do we draw the lines and is it worth it.   \r\n",
        "createdAt" : "2019-06-11T14:01:22Z",
        "updatedAt" : "2019-06-20T18:44:16Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "72093011c4d029f5f21f4a5c7357f4b5e54e1b65",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +25,29 @@\t\"time\"\n\n\tappsv1 \"k8s.io/api/apps/v1\"\n\tv1 \"k8s.io/api/core/v1\"\n\trbacv1 \"k8s.io/api/rbac/v1\""
  },
  {
    "id" : "1d34c659-657a-458c-9265-94320a867acf",
    "prId" : 75989,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75989#pullrequestreview-227258813",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a3a79e4-c4d6-4008-971b-3f697d719620",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "@timothysc i had to do this. ^\r\notherwise having the LoadConfig()/NewForConfig(config) outside of BeforeEach panics.\r\n",
        "createdAt" : "2019-04-16T15:06:59Z",
        "updatedAt" : "2019-04-16T15:07:07Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "760a825f7cbd071c5cf4fa5249fc311ec5a5d699",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +76,80 @@\t\tns = f.Namespace.Name\n\n\t\tif aggrclient == nil {\n\t\t\tconfig, err := framework.LoadConfig()\n\t\t\tif err != nil {"
  },
  {
    "id" : "bb873515-7169-40f9-82b7-29e14968b5ba",
    "prId" : 63624,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63624#pullrequestreview-118921730",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07df5df5-20d4-44ad-992d-3a775116549c",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "partial discovery is always a possibility, especially in the presence of rapidly changing API group registration (like in extension API / CRD tests). the thing we are about here is that our extension API group showed up",
        "createdAt" : "2018-05-09T22:07:22Z",
        "updatedAt" : "2018-05-09T22:07:25Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "adfe0ab52feea3898cf88f2d14f40fd0bd6e73a4",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +383,387 @@\n\t// Rerun the Create/List/Delete tests using the Dynamic client.\n\tresources, discoveryErr := client.Discovery().ServerPreferredNamespacedResources()\n\tgroupVersionResources, err := discovery.GroupVersionResources(resources)\n\tframework.ExpectNoError(err, \"getting group version resources for dynamic client\")"
  },
  {
    "id" : "693ff989-c225-44b9-9e57-bdba81c5cab7",
    "prId" : 58697,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58697#pullrequestreview-90861138",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23c5abe5-c2bd-44fa-bbaa-3a56f1203237",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "lgtm. Not sure it's the source for the flakes, but it could be.",
        "createdAt" : "2018-01-23T15:06:23Z",
        "updatedAt" : "2018-01-23T16:01:12Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "eff9e9d5-2f00-4aec-9239-1a4efd638e25",
        "parentId" : "23c5abe5-c2bd-44fa-bbaa-3a56f1203237",
        "authorId" : "af23851a-ce70-4b64-a465-5c938d2ad18e",
        "body" : "Do we need add a `framework.ExpectNoError` call to ensure `err` is nil?",
        "createdAt" : "2018-01-23T15:12:22Z",
        "updatedAt" : "2018-01-23T16:01:12Z",
        "lastEditedBy" : "af23851a-ce70-4b64-a465-5c938d2ad18e",
        "tags" : [
        ]
      },
      {
        "id" : "80fae521-d511-4374-8ece-e32528c9fd6e",
        "parentId" : "23c5abe5-c2bd-44fa-bbaa-3a56f1203237",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "yes, added",
        "createdAt" : "2018-01-23T15:20:43Z",
        "updatedAt" : "2018-01-23T16:01:12Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "91ba8c37d037510baed6e152dbd14cdf2367cf91",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +296,300 @@\t// NOTE: aggregated apis should generally be set up in there own namespace (<aggregated-api-namespace>). As the test framework\n\t// is setting up a new namespace, we are just using that.\n\terr = framework.WaitForDeploymentComplete(client, deployment)\n\tframework.ExpectNoError(err, \"deploying extension apiserver in namespace %s\", namespace)\n"
  },
  {
    "id" : "174b5ea4-5045-4d51-84ae-02026f8a5e14",
    "prId" : 53479,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53479#pullrequestreview-67551283",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2de6bd09-d8fc-4b1d-b370-309bf6f5c8e8",
        "parentId" : null,
        "authorId" : "695b6860-569c-4e63-a215-7342e2279a94",
        "body" : "Fix for compile failure: https://k8s-gubernator.appspot.com/build/kubernetes-jenkins/pr-logs/pull/53479/pull-kubernetes-e2e-gce-bazel/33539/",
        "createdAt" : "2017-10-06T00:41:40Z",
        "updatedAt" : "2017-10-19T22:42:49Z",
        "lastEditedBy" : "695b6860-569c-4e63-a215-7342e2279a94",
        "tags" : [
        ]
      }
    ],
    "commit" : "72dc762366d0891c20b77d73e98186e760112618",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +177,181 @@\t\t},\n\t}\n\t_, err := client.CoreV1().Secrets(namespace).Create(secret)\n\tframework.ExpectNoError(err, \"creating secret %q in namespace %q\", secretName, namespace)\n"
  },
  {
    "id" : "fc02ccb7-3646-4264-bddd-ecda95cec4c0",
    "prId" : 52816,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52816#pullrequestreview-64397238",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57143340-7125-47d6-a8b5-4a9fa9752512",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I thought the framework created a namespace?",
        "createdAt" : "2017-09-20T22:11:18Z",
        "updatedAt" : "2017-09-21T19:28:19Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5ac8df54-cda2-42c8-9429-776cfa3504fe",
        "parentId" : "57143340-7125-47d6-a8b5-4a9fa9752512",
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "It does. May have been a bad idea but I wanted to replicate the recommended workflow for a use case like sample-apiserver or service-catalog, which includes creating a namespace. So the test essentially follows those instructions including making its own namespace. Depending on what we find we may remove that step.",
        "createdAt" : "2017-09-20T22:20:09Z",
        "updatedAt" : "2017-09-21T19:28:19Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "53609711-74a7-48c3-b8e5-63a13cefcce2",
        "parentId" : "57143340-7125-47d6-a8b5-4a9fa9752512",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I see--need to make sure this is marked as serial if it does that. Uh, I don't know how one does that nowadays.",
        "createdAt" : "2017-09-20T22:23:42Z",
        "updatedAt" : "2017-09-21T19:28:19Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "9f40ddbd-1c39-4683-b4c7-f39d1f9c676d",
        "parentId" : "57143340-7125-47d6-a8b5-4a9fa9752512",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> the test essentially follows those instructions including making its own namespace\r\n\r\nI would just have it use the framework-created namespace, and do some opinionated clean up (APIService, primarily) at the end of the test before the framework-driven \"nuke the namespace\" kicks in",
        "createdAt" : "2017-09-21T17:56:03Z",
        "updatedAt" : "2017-09-21T19:28:19Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "07257294-b465-4eb0-8202-a87544b5e4c5",
        "parentId" : "57143340-7125-47d6-a8b5-4a9fa9752512",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "that sounds good, but I'm not going to block this PR on it, since we're trying to get debug signal here.",
        "createdAt" : "2017-09-21T19:30:39Z",
        "updatedAt" : "2017-09-21T19:30:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3a83daeb02eb2d86a924c669c80db1985ea808e",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +511,515 @@func validateErrorWithDebugInfo(f *framework.Framework, err error, pods *v1.PodList, msg string, fields ...interface{}) {\n\tif err != nil {\n\t\tnamespace := \"sample-system\"\n\t\tmsg := fmt.Sprintf(msg, fields...)\n\t\tmsg += fmt.Sprintf(\" but received unexpected error:\\n%v\", err)"
  },
  {
    "id" : "2cfc3c8a-e7ef-449a-a5e5-2790b2197753",
    "prId" : 52816,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52816#pullrequestreview-64369423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff9a4cef-5ea1-40e5-9236-5950cc2bbf0e",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "cleanTest deletes the namespace... if you're trying to allow this to run in parallel, you have to pass in what you want cleaned up",
        "createdAt" : "2017-09-21T17:54:09Z",
        "updatedAt" : "2017-09-21T19:28:19Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3a83daeb02eb2d86a924c669c80db1985ea808e",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +162,166 @@func TestSampleAPIServer(f *framework.Framework, image, namespaceName string) {\n\tBy(\"Registering the sample API server.\")\n\tcleanTest(f, true)\n\tclient := f.ClientSet\n\trestClient := client.Discovery().RESTClient()"
  },
  {
    "id" : "95612c42-cd70-494c-9ae3-104fc8205654",
    "prId" : 50347,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50347#pullrequestreview-55804599",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "582b40fc-aaf4-4a93-a0a0-ad710b5646aa",
        "parentId" : null,
        "authorId" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "body" : "To me it would be more readable to use a `dynamic.Client` and `Unstructured` instances to exercise the API, but maybe there's some advantage to using raw HTTP requests like this I'm not understanding. Thoughts? cc @caesarxuchao ",
        "createdAt" : "2017-08-10T17:49:41Z",
        "updatedAt" : "2017-08-17T17:57:17Z",
        "lastEditedBy" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "tags" : [
        ]
      },
      {
        "id" : "317c20fd-a583-4661-b9ae-199f2125cd08",
        "parentId" : "582b40fc-aaf4-4a93-a0a0-ad710b5646aa",
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "Added dynamic.Client requests in addition to the rest client requests. The latter seem to test just the protocol. The former test both the protocol and integration between aggregator and the dynamic client library. As such I think both are valuable.",
        "createdAt" : "2017-08-10T22:58:21Z",
        "updatedAt" : "2017-08-17T17:57:17Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      },
      {
        "id" : "32ee67d7-eec5-4993-b77c-0884b09aa754",
        "parentId" : "582b40fc-aaf4-4a93-a0a0-ad710b5646aa",
        "authorId" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "body" : "Makes sense, thanks!",
        "createdAt" : "2017-08-11T14:05:35Z",
        "updatedAt" : "2017-08-17T17:57:17Z",
        "lastEditedBy" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb28f0f34fabc7ee2ea280e4853eb0fdbaa4bd74",
    "line" : 401,
    "diffHunk" : "@@ -1,1 +399,403 @@\tflunder := `{\"apiVersion\":\"wardle.k8s.io/v1alpha1\",\"kind\":\"Flunder\",\"metadata\":{\"labels\":{\"sample-label\":\"true\"},\"name\":\"test-flunder\",\"namespace\":\"default\"}}`\n\tresult := client.Discovery().RESTClient().Post().AbsPath(\"/apis/wardle.k8s.io/v1alpha1/namespaces/default/flunders\").Body([]byte(flunder)).Do()\n\tframework.ExpectNoError(result.Error(), \"creating a new flunders resource\")\n\tvar statusCode int\n\tresult.StatusCode(&statusCode)"
  },
  {
    "id" : "78f1ba85-14ea-4e90-aed0-88a0ec959b5d",
    "prId" : 50347,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50347#pullrequestreview-55617445",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e39cb4a-6c92-4b43-bbde-ed593ac02c34",
        "parentId" : null,
        "authorId" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "body" : "Could you link to the source for this image for me to review?",
        "createdAt" : "2017-08-10T17:51:22Z",
        "updatedAt" : "2017-08-17T17:57:17Z",
        "lastEditedBy" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "tags" : [
        ]
      },
      {
        "id" : "f126f2b2-2938-491d-b115-2ef6021221ce",
        "parentId" : "7e39cb4a-6c92-4b43-bbde-ed593ac02c34",
        "authorId" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "body" : "https://github.com/kubernetes/kubernetes/tree/master/staging/src/k8s.io/sample-apiserver",
        "createdAt" : "2017-08-10T18:04:11Z",
        "updatedAt" : "2017-08-17T17:57:17Z",
        "lastEditedBy" : "7aca96c2-45d7-4567-99be-0323d7556c55",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb28f0f34fabc7ee2ea280e4853eb0fdbaa4bd74",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +62,66 @@\n\t\t// Testing a 1.7 version of the sample-apiserver\n\t\tTestSampleAPIServer(f, \"gcr.io/kubernetes-e2e-test-images/k8s-aggregator-sample-apiserver-amd64:1.7\", \"sample-system\")\n\t})\n})"
  }
]