[
  {
    "id" : "78b636ac-1b21-4a03-905a-ea718bff9790",
    "prId" : 96984,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96984#pullrequestreview-543151573",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3f0f16d-491e-44c8-86bd-4cae0797e0fb",
        "parentId" : null,
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "and when we find the `Dangling` condition, do we also want to check that its `status` is set to `False`?",
        "createdAt" : "2020-12-01T21:42:19Z",
        "updatedAt" : "2021-01-11T15:46:24Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      },
      {
        "id" : "19fc146a-94b2-4c06-9ec7-92092e8d4c3f",
        "parentId" : "e3f0f16d-491e-44c8-86bd-4cae0797e0fb",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "That would be a nice add, yes.",
        "createdAt" : "2020-12-01T22:50:30Z",
        "updatedAt" : "2021-01-11T15:46:24Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "e3edd73a-5346-4f9e-ab10-2ec1122e8dcc",
        "parentId" : "e3f0f16d-491e-44c8-86bd-4cae0797e0fb",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "Done.",
        "createdAt" : "2020-12-02T16:02:55Z",
        "updatedAt" : "2021-01-11T15:46:24Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      },
      {
        "id" : "f85f3f95-8c6c-427e-9443-8c652a9fd6c0",
        "parentId" : "e3f0f16d-491e-44c8-86bd-4cae0797e0fb",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "When the dangling Condition exists with the value \"true\" this means the apiserver has processed the FlowSchema object and _not_ found the corresponding PriorityLevelConfiguration object.  In this case this func should `return false, nil` to cause a pause and retry.\r\n\r\nWhen the dangling Condition exists with a value of \"false\", this func should proceed to look for the relevant priority level time series.",
        "createdAt" : "2020-12-02T19:06:12Z",
        "updatedAt" : "2021-01-11T15:46:24Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ae5ed9f6f90a255d05dbf478bbdfd7a539a653c",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +373,377 @@\t\t\t// course, the condition being anything but false means that steady state\n\t\t\t// hasn't been achieved.\n\t\t\treturn false, nil\n\t\t}\n\t\t_, err = getPriorityLevelConcurrency(f.ClientSet, priorityLevelName)"
  },
  {
    "id" : "77a86c8a-958b-416c-8d53-d76b12288d77",
    "prId" : 96984,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96984#pullrequestreview-554847188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8eb5d00-52c0-400c-9e2d-7d6d371c7e8e",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Returning an error from this function and letting callers to handle them as they want would be a bit cleaner.",
        "createdAt" : "2020-12-16T13:05:13Z",
        "updatedAt" : "2021-01-11T15:46:24Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "e034a922-6d63-44e9-9430-2a2d67c1a16e",
        "parentId" : "b8eb5d00-52c0-400c-9e2d-7d6d371c7e8e",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "What is meant by \"cleaner\" here?  The suggested change would make the code more complex.",
        "createdAt" : "2020-12-16T20:08:08Z",
        "updatedAt" : "2021-01-11T15:46:24Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "d45072ba-a7e9-40a3-bc43-e4dfc1432d30",
        "parentId" : "b8eb5d00-52c0-400c-9e2d-7d6d371c7e8e",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Will make it a bit longer - I don't agree it's more complex.\r\n\r\nI actually think that if something can return an error, I want to leave the decision to the called how they handle it, rather the hiding that behavior below.\r\nAs an example - the error returned FlowSchemas.Get() - I can easily imagine a caller may want to retry that in some cases. Another example is that I may want to completely differently handle the case of error from API call and differently a timeout from waiting for reconciliation.\r\nMaking a decision for the called how they should do that is not the best one.",
        "createdAt" : "2020-12-16T21:04:43Z",
        "updatedAt" : "2021-01-11T15:46:24Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "3165968a-28f2-42b1-9037-d3cb8c984a62",
        "parentId" : "b8eb5d00-52c0-400c-9e2d-7d6d371c7e8e",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I understand that kind of thinking for non-test code.  For test code, it seems like unnecessary generality to me --- we do not have an open world of code that will be calling the test code.\r\n\r\nI am not sure what complexity measure you are thinking of.  I think it is simpler to wrap up things as they are.  Returning an error requires duplicating the error-handling at all the call sites, and in this case they all want the same handling.  It is only test code; if some day we find the test code wants different error handling in different tests, we can refactor then.\r\n\r\nBut this is a pretty small detail; I can live with the suggested change.",
        "createdAt" : "2020-12-16T21:42:54Z",
        "updatedAt" : "2021-01-11T15:46:24Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "40743cac-1313-420e-8cfc-b8036f9700eb",
        "parentId" : "b8eb5d00-52c0-400c-9e2d-7d6d371c7e8e",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I think it's better to change, but it's not something I'm going to fight until death too :)",
        "createdAt" : "2020-12-17T14:14:49Z",
        "updatedAt" : "2021-01-11T15:46:24Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "8e16bb4f-91bc-4234-8127-8233457e71ed",
        "parentId" : "b8eb5d00-52c0-400c-9e2d-7d6d371c7e8e",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Another way to do this is to define the checking function, and let the caller invoke via the `framework.ExpectNoError(wait.Poll(...))` line. Given the number and uniformity of the invocations, though, I think that's not necessary yet.\r\n\r\nWe can always change it later, let's leave it for now.",
        "createdAt" : "2020-12-17T17:52:43Z",
        "updatedAt" : "2021-01-11T15:46:24Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ae5ed9f6f90a255d05dbf478bbdfd7a539a653c",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +361,365 @@// by checking: (1) the dangling priority level reference condition in the flow\n// schema status, and (2) metrics. The function times out after 30 seconds.\nfunc waitForSteadyState(f *framework.Framework, flowSchemaName string, priorityLevelName string) {\n\tframework.ExpectNoError(wait.Poll(time.Second, 30*time.Second, func() (bool, error) {\n\t\tfs, err := f.ClientSet.FlowcontrolV1beta1().FlowSchemas().Get(context.TODO(), flowSchemaName, metav1.GetOptions{})"
  },
  {
    "id" : "03a75a5e-73cc-4623-8c61-7127ca990367",
    "prId" : 96874,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96874#pullrequestreview-545174814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ada6772-2174-4026-bdc1-fdbe9932de81",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Isn't this .9 an increase over #96798's .75?",
        "createdAt" : "2020-12-04T17:47:02Z",
        "updatedAt" : "2020-12-04T17:47:03Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "5c2ecf1c-b112-4533-b6b5-7a293228b0af",
        "parentId" : "5ada6772-2174-4026-bdc1-fdbe9932de81",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "A recent failure:\r\n\r\n`Dec  4 15:38:28.824: client \"highqps-apf-8126\": got 36.6% completed requests, want at least 75.0%`\r\n\r\nSo I think we'll need a followup.\r\n\r\nPerhaps we need to use quite large share amounts to throttle the rest of the cluster.",
        "createdAt" : "2020-12-04T17:53:19Z",
        "updatedAt" : "2020-12-04T17:53:19Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7b0f582d5d635cf56fb6b96204f6841aafc787d",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +179,183 @@\t\tclients := []client{\n\t\t\t{username: highQPSClientName, qps: 90, concurrencyMultiplier: 2.0, expectedCompletedPercentage: 0.90},\n\t\t\t{username: lowQPSClientName, qps: 4, concurrencyMultiplier: 0.5, expectedCompletedPercentage: 0.90},\n\t\t}\n"
  },
  {
    "id" : "1a9bec09-08d0-4b07-9521-fd53758cdf5c",
    "prId" : 96798,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96798#pullrequestreview-540593440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "096e80ad-75e5-40e3-b069-eff557784c3c",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "Was there any quantitative reasoning for picking 100 here?  If not and we just want this test to stop flaking, why not try a lower number?",
        "createdAt" : "2020-11-25T21:58:08Z",
        "updatedAt" : "2020-11-26T10:38:57Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "d9a515b8-87d3-4da7-8953-5f8f862771ef",
        "parentId" : "096e80ad-75e5-40e3-b069-eff557784c3c",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "mmm i guess we chose 100 for the highqps client as a random number? @adtac ",
        "createdAt" : "2020-11-26T10:40:11Z",
        "updatedAt" : "2020-11-26T10:40:11Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      },
      {
        "id" : "6a38b11d-7fcb-4dcf-8416-55ff82031ca9",
        "parentId" : "096e80ad-75e5-40e3-b069-eff557784c3c",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "there isn't much reasoning behind 100 other than that it's a nice round number that's large enough -- I don't have any objections to reducing the QPS a bit (as long as the ratio between the two clients stays large enough)",
        "createdAt" : "2020-11-26T16:22:21Z",
        "updatedAt" : "2020-11-26T16:22:21Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      },
      {
        "id" : "57bdcfb9-06d8-441e-aa4b-bbc361394ee6",
        "parentId" : "096e80ad-75e5-40e3-b069-eff557784c3c",
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "So #96874 is mainly about reducing the expected as well as attempted throughput.",
        "createdAt" : "2020-11-30T04:34:31Z",
        "updatedAt" : "2020-11-30T04:34:32Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0c52fd3267e86e892381a8d7535af898a31c929",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +98,102 @@\t\t\t// Additionally, the \"highqps\" client also has a higher matching\n\t\t\t// precedence for its flow schema.\n\t\t\t{username: highQPSClientName, qps: 100.0, concurrencyMultiplier: 2.0, matchingPrecedence: 999, expectedCompletedPercentage: 0.75},\n\t\t\t{username: lowQPSClientName, qps: 5.0, concurrencyMultiplier: 0.5, matchingPrecedence: 1000, expectedCompletedPercentage: 0.75},\n\t\t}"
  },
  {
    "id" : "f117d4f2-30c7-4f5c-a65e-8976f6c6895b",
    "prId" : 96646,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96646#pullrequestreview-539443811",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0af7beb9-bba3-4e3e-ae95-a98a0b0ac2ac",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "I see that `getPriorityLevelConcurrency` just tries one scrape and fails if that scrape does not have the sought metric.  But I see no waiting to be sure the apiserver has digested the new PriorityLevelConfiguration object and started producing the concurrency metric for it.",
        "createdAt" : "2020-11-25T07:11:38Z",
        "updatedAt" : "2020-11-25T07:11:39Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      },
      {
        "id" : "34283f4f-c844-45d4-9206-c3b174352ab5",
        "parentId" : "0af7beb9-bba3-4e3e-ae95-a98a0b0ac2ac",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "created https://github.com/kubernetes/kubernetes/issues/96893 so that I don't forget",
        "createdAt" : "2020-11-26T16:20:36Z",
        "updatedAt" : "2020-11-26T16:20:36Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      }
    ],
    "commit" : "16fc690d3afc4757310cb9e1a4952bb16a3f5877",
    "line" : 207,
    "diffHunk" : "@@ -1,1 +113,117 @@\t\tginkgo.By(\"getting request concurrency from metrics\")\n\t\tfor i := range clients {\n\t\t\trealConcurrency := getPriorityLevelConcurrency(f, clients[i].priorityLevelName)\n\t\t\tclients[i].concurrency = int32(float64(realConcurrency) * clients[i].concurrencyMultiplier)\n\t\t\tif clients[i].concurrency < 1 {"
  },
  {
    "id" : "1f4f0506-4a06-4d5b-8329-4c6ce37e0c48",
    "prId" : 96646,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96646#pullrequestreview-538215349",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e889f4a1-50d3-4670-89b3-049a49de1aae",
        "parentId" : null,
        "authorId" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "body" : "The last quantity logged here is not a share, it is an absolute concurrency value.  \"shares\" are the relative values used to apportion the total allowed concurrency into absolute concurrency limits.",
        "createdAt" : "2020-11-25T07:26:22Z",
        "updatedAt" : "2020-11-25T07:26:22Z",
        "lastEditedBy" : "7a59a326-58b3-4590-b70a-297d2e27daa5",
        "tags" : [
        ]
      }
    ],
    "commit" : "16fc690d3afc4757310cb9e1a4952bb16a3f5877",
    "line" : 212,
    "diffHunk" : "@@ -1,1 +118,122 @@\t\t\t\tclients[i].concurrency = 1\n\t\t\t}\n\t\t\tframework.Logf(\"request concurrency for %q will be %d (concurrency share = %d)\", clients[i].username, clients[i].concurrency, realConcurrency)\n\t\t}\n"
  },
  {
    "id" : "dcb0a9e6-c6be-4833-9ef9-163af13cd03a",
    "prId" : 96527,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96527#pullrequestreview-530376994",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de3b7d48-70cf-43fa-bf83-9ccf7025f25a",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "where is this e2e test running? It has a `Feature:` tag, which excludes it from the default e2e job, and I don't see it opted into in the [alpha e2e job](https://testgrid.k8s.io/google-gce#gci-gce-alpha-enabled-default)",
        "createdAt" : "2020-11-13T15:03:56Z",
        "updatedAt" : "2020-11-13T23:21:24Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ebabc15d-9e3b-434b-afa3-25420a4acf4a",
        "parentId" : "de3b7d48-70cf-43fa-bf83-9ccf7025f25a",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "shouldn't we remove the feature tag as part of promotion to beta so this is exercised in the default e2e?",
        "createdAt" : "2020-11-13T15:04:16Z",
        "updatedAt" : "2020-11-13T23:21:24Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "fc758747-acff-48b1-baf9-240de9d560bc",
        "parentId" : "de3b7d48-70cf-43fa-bf83-9ccf7025f25a",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "it's available here: https://testgrid.k8s.io/google-gce#gce-cos-master-alpha-features",
        "createdAt" : "2020-11-13T15:41:11Z",
        "updatedAt" : "2020-11-13T23:21:24Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      },
      {
        "id" : "2c262d2c-c1d7-46a0-9400-54b62f7be699",
        "parentId" : "de3b7d48-70cf-43fa-bf83-9ccf7025f25a",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "ah, thanks. question about moving the test to the default e2e job remains.",
        "createdAt" : "2020-11-13T15:42:32Z",
        "updatedAt" : "2020-11-13T23:21:24Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "0297b975-f5f1-413b-867f-a5e5ca71f840",
        "parentId" : "de3b7d48-70cf-43fa-bf83-9ccf7025f25a",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "correct, we can expect this test to run through beta :+1: updating",
        "createdAt" : "2020-11-13T20:18:50Z",
        "updatedAt" : "2020-11-13T23:21:24Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      }
    ],
    "commit" : "642b11483030e5aedbd6f43aeac3cbe40255b3b6",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +50,54 @@\t\tmatchingUsername := \"noxu\"\n\t\tnonMatchingUsername := \"foo\"\n\n\t\tginkgo.By(\"creating a testing prioritylevel\")\n\t\tcreatedPriorityLevel, err := f.ClientSet.FlowcontrolV1beta1().PriorityLevelConfigurations().Create("
  },
  {
    "id" : "d7d74b7d-c32f-4608-9954-552999663b7f",
    "prId" : 96124,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96124#pullrequestreview-525310808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "839dda0d-9298-4129-aa0c-12622837f2dd",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Should we maybe consider latency? Like if a request takes 55 seconds to complete, should we count that? I guess I'd like comments to explain how it's supposed to interpret latency. Right now IIUC it reads as if we expect all requests to either instantly fail or succeed, which isn't how it'll actually work.",
        "createdAt" : "2020-11-04T22:44:02Z",
        "updatedAt" : "2020-11-06T17:35:24Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "4e23f005-9317-4da0-9382-7a3eaaa29329",
        "parentId" : "839dda0d-9298-4129-aa0c-12622837f2dd",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "Done.",
        "createdAt" : "2020-11-06T16:31:57Z",
        "updatedAt" : "2020-11-06T17:35:24Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      }
    ],
    "commit" : "f79e7cde68b91e89e9d2f18c57382a7b6e34b3dc",
    "line" : 235,
    "diffHunk" : "@@ -1,1 +324,328 @@\t\t\tgo func() {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tmakeRequest(f, username)\n\t\t\t\tatomic.AddInt32(&completed, 1)\n\t\t\t}()"
  },
  {
    "id" : "834f77cc-b925-42ba-835a-16bde1f8f89e",
    "prId" : 96124,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96124#pullrequestreview-526628611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0cf99b7-249a-4362-8963-048c33360c97",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Hm, this gives requests sent very soon before the time limit a different amount of time to complete in than requests sent early on.",
        "createdAt" : "2020-11-09T19:01:50Z",
        "updatedAt" : "2020-11-09T19:01:50Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7659669f-18e6-4402-87e9-1cd8d84847b1",
        "parentId" : "f0cf99b7-249a-4362-8963-048c33360c97",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Maybe this is OK for this test. Other approaches also have downsides.",
        "createdAt" : "2020-11-09T20:08:52Z",
        "updatedAt" : "2020-11-09T20:08:52Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "f81933b3-f79b-4a7a-96b9-4a5e140b11ae",
        "parentId" : "f0cf99b7-249a-4362-8963-048c33360c97",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "I don't think this makes much of a difference -- the only requests that would get missed are the ones that, as you said, get fired just before the timer ends. I guess the whole thing depends on how we define a \"completed\" request -- if we wait for such requests to finish, are we testing the system under load? For example, the high QPS client may have completed, so the low QPS client's requests would easily go through, but it shouldn't really be counted because there was no request drown out.",
        "createdAt" : "2020-11-09T20:29:09Z",
        "updatedAt" : "2020-11-09T20:29:09Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      }
    ],
    "commit" : "f79e7cde68b91e89e9d2f18c57382a7b6e34b3dc",
    "line" : 240,
    "diffHunk" : "@@ -1,1 +329,333 @@\t\tcase <-timer.C:\n\t\t\t// Still in-flight requests should not contribute to the completed count.\n\t\t\ttotalCompleted := atomic.LoadInt32(&completed)\n\t\t\twg.Wait() // do not leak goroutines\n\t\t\treturn totalCompleted"
  },
  {
    "id" : "2e871187-18e0-414a-85ce-f7b76a0d3e76",
    "prId" : 96124,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96124#pullrequestreview-526715499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2105710-e2da-4275-8007-2d7a28fa3e9c",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Sorry, I'm just now realizing that this makes separate priority levels for each. Usually we've been saying \"mouse\" and \"elephant\" to indicate users in the same priority level that we want to be fair to. If you're making separate priority levels, you're not really exercising the shuffle sharding.",
        "createdAt" : "2020-11-09T20:23:43Z",
        "updatedAt" : "2020-11-09T20:23:44Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "ad9cc8d8-7a45-4906-ada6-cf793987f74e",
        "parentId" : "d2105710-e2da-4275-8007-2d7a28fa3e9c",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "this tests the scenario described in the subsection titled \"Priority\" under request drownout here: https://github.com/kubernetes/kubernetes/issues/93757\r\n\r\nI do plan to add another test to test fairness within a single priority level later as well.",
        "createdAt" : "2020-11-09T20:25:35Z",
        "updatedAt" : "2020-11-09T20:25:35Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      },
      {
        "id" : "8e7c481e-39de-4681-91c9-6ace34a7b6f3",
        "parentId" : "d2105710-e2da-4275-8007-2d7a28fa3e9c",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "ah, perfect. \"elephant\" and \"mouse\" are confusing names in this context and would make more sense in the other. Can you fix in a followup?",
        "createdAt" : "2020-11-09T21:28:40Z",
        "updatedAt" : "2020-11-09T21:28:40Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b9c4814c-8224-41cd-b1b9-cd7863eb3c15",
        "parentId" : "d2105710-e2da-4275-8007-2d7a28fa3e9c",
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "Will do :+1: ",
        "createdAt" : "2020-11-09T22:45:02Z",
        "updatedAt" : "2020-11-09T22:45:03Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      }
    ],
    "commit" : "f79e7cde68b91e89e9d2f18c57382a7b6e34b3dc",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +155,159 @@\t\t\tclients[i].priorityLevelName = fmt.Sprintf(\"%s-%s\", priorityLevelNamePrefix, clients[i].username)\n\t\t\tframework.Logf(\"creating PriorityLevel %q\", clients[i].priorityLevelName)\n\t\t\t_, err := f.ClientSet.FlowcontrolV1alpha1().PriorityLevelConfigurations().Create(\n\t\t\t\tcontext.TODO(),\n\t\t\t\t&flowcontrolv1alpha1.PriorityLevelConfiguration{"
  },
  {
    "id" : "989eefa5-a286-4b41-af36-d657ae6c4b68",
    "prId" : 94925,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94925#pullrequestreview-520341128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9609de57-6a2d-42c8-8490-f0b138d28a55",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Also check that a non-matching request doesn't get the same headers?",
        "createdAt" : "2020-09-23T16:29:28Z",
        "updatedAt" : "2020-11-02T18:28:20Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "efb13c0d-5e79-4a85-8ff3-293ac23629b0",
        "parentId" : "9609de57-6a2d-42c8-8490-f0b138d28a55",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "done",
        "createdAt" : "2020-10-30T02:40:11Z",
        "updatedAt" : "2020-11-02T18:28:20Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "c28036efa5fcafdbd9d10014c9197bef42d05eaf",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +111,115 @@\t\tif testResponseHeaderMatches(f, nonMatchingUsername, string(createdPriorityLevel.UID), string(createdPriorityLevel.UID)) {\n\t\t\tframework.Failf(\"non-matching user unexpectedly received UID for the testing priority-level and flow-schema\")\n\t\t}\n\t})\n"
  },
  {
    "id" : "1a1a7b45-e154-403a-bad4-8fd6bfea8984",
    "prId" : 94925,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94925#pullrequestreview-520362559",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6340ca10-669e-442f-be7f-f3b715479487",
        "parentId" : null,
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "is this so that default flow schemas don't interfere?",
        "createdAt" : "2020-10-29T17:09:33Z",
        "updatedAt" : "2020-11-02T18:28:20Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      },
      {
        "id" : "7db2ea4e-ee88-4d3c-9cb6-ea5046c3f42c",
        "parentId" : "6340ca10-669e-442f-be7f-f3b715479487",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "exactly",
        "createdAt" : "2020-10-30T03:59:07Z",
        "updatedAt" : "2020-11-02T18:28:20Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "c28036efa5fcafdbd9d10014c9197bef42d05eaf",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +74,78 @@\t\t\t\t},\n\t\t\t\tSpec: flowcontrolv1alpha1.FlowSchemaSpec{\n\t\t\t\t\tMatchingPrecedence: 1000, // a rather higher precedence to ensure it make effect\n\t\t\t\t\tPriorityLevelConfiguration: flowcontrolv1alpha1.PriorityLevelConfigurationReference{\n\t\t\t\t\t\tName: testingPriorityLevelName,"
  },
  {
    "id" : "94989c24-86b1-499c-948c-22cb5fa28ef4",
    "prId" : 94925,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94925#pullrequestreview-521304223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c16c08e-fc6b-49eb-adfb-ba19b043dc3b",
        "parentId" : null,
        "authorId" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "body" : "can we clean up the PLs/flowschemas created at the end of the test?",
        "createdAt" : "2020-10-30T21:54:22Z",
        "updatedAt" : "2020-11-02T18:28:20Z",
        "lastEditedBy" : "521b6fc2-4b36-4594-8b5b-9d1e5bcc8759",
        "tags" : [
        ]
      },
      {
        "id" : "5195c166-f219-4829-b530-2e204d88b46f",
        "parentId" : "0c16c08e-fc6b-49eb-adfb-ba19b043dc3b",
        "authorId" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "body" : "added clean-up defer block",
        "createdAt" : "2020-11-02T02:49:58Z",
        "updatedAt" : "2020-11-02T18:28:20Z",
        "lastEditedBy" : "bc182326-9017-48d6-8ee0-4609046c1366",
        "tags" : [
        ]
      }
    ],
    "commit" : "c28036efa5fcafdbd9d10014c9197bef42d05eaf",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +67,71 @@\n\t\tginkgo.By(\"creating a testing flowschema\")\n\t\tcreatedFlowSchema, err := f.ClientSet.FlowcontrolV1alpha1().FlowSchemas().Create(\n\t\t\tcontext.TODO(),\n\t\t\t&flowcontrolv1alpha1.FlowSchema{"
  },
  {
    "id" : "ba21c8c9-a0d9-405a-826c-7c2a581ad075",
    "prId" : 94925,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94925#pullrequestreview-521967144",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "214afd17-ebee-4504-8532-a1bb55859f05",
        "parentId" : null,
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "Nit: if we decompose the `testResponseHeaderMatches` function, we can report on the specific header that does not match.\r\n\r\n```\r\n{\r\n        ginkgo.By(\"invoke API impersonating the matching user\")\r\n \r\n        response, err := invokeAPI(f, matchingUsername)\r\n\tif  err != nil {\r\n\t\tframework.Failf(\"Failed to invoke API with matching user impersonation\")\r\n\t}\r\n\r\n       ginkgo.By(\"response headers should contain flow-schema/priority-level uid for matching user\")\r\n       framework.ExpectEqual(fsUID, getMatchedFlowSchemaUID(response), \"FlowSchema UID does not match\")\r\n       framework.ExpectEqual(plUID, getMatchedPriorityLevelConfigurationUID(response), \"PriorityLevelConfiguration  UID does not match\")       \r\n\r\n       ginkgo.By(\"invoke API impersonating the non-matching user\")\r\n       //  non matching follows here.\r\n}\r\n\r\nfunc invokeAPI(f *framework.Framework, impersonatingUser string) (http.Response, error) {\r\n\tconfig := rest.CopyConfig(f.ClientConfig())\r\n\tconfig.Impersonate.UserName = impersonatingUser\r\n\troundTripper, err := rest.TransportFor(config)\r\n\tframework.ExpectNoError(err)\r\n\r\n\treq, err := http.NewRequest(http.MethodGet, f.ClientSet.CoreV1().RESTClient().Get().AbsPath(\"version\").URL().String(), nil)\t\r\n        framework.ExpectNoError(err)\r\n\r\n\treturn roundTripper.RoundTrip(req)\r\n}\r\n\r\nfunc getMatchedFlowSchemaUID(response *http.Response) string {\r\n        return response.Header.Get(flowcontrolv1alpha1.ResponseHeaderMatchedFlowSchemaUID)\r\n}\r\n\r\nfunc getMatchedPriorityLevelConfigurationUID(response *http.Response) string {\r\n        return response.Header.Get(flowcontrolv1alpha1.ResponseHeaderMatchedPriorityLevelConfigurationUID)\r\n}\r\n",
        "createdAt" : "2020-11-02T20:25:02Z",
        "updatedAt" : "2020-11-02T20:28:08Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      }
    ],
    "commit" : "c28036efa5fcafdbd9d10014c9197bef42d05eaf",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +111,115 @@\t\tif testResponseHeaderMatches(f, nonMatchingUsername, string(createdPriorityLevel.UID), string(createdPriorityLevel.UID)) {\n\t\t\tframework.Failf(\"non-matching user unexpectedly received UID for the testing priority-level and flow-schema\")\n\t\t}\n\t})\n"
  }
]