[
  {
    "id" : "d9de7ee5-fe13-4e86-adf9-dea306083cf5",
    "prId" : 90925,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90925#pullrequestreview-409183678",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2f686ab-177b-41bc-9425-e250488650b3",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "remove `var err error` above?",
        "createdAt" : "2020-05-11T13:14:37Z",
        "updatedAt" : "2020-05-11T14:46:48Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e12b17fa-3183-4a29-86a0-fd65a7421e69",
        "parentId" : "b2f686ab-177b-41bc-9425-e250488650b3",
        "authorId" : "b08d1703-f122-41b6-aec0-0e1960a51745",
        "body" : "Thanks for pointing out. Code changes done.",
        "createdAt" : "2020-05-11T13:42:39Z",
        "updatedAt" : "2020-05-11T14:46:48Z",
        "lastEditedBy" : "b08d1703-f122-41b6-aec0-0e1960a51745",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8a752ff72287009536e958355c2f69f33994ac3",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +48,52 @@\t\t\tdefer ginkgo.GinkgoRecover()\n\t\t\tns := fmt.Sprintf(\"nslifetest-%v\", n)\n\t\t\t_, err := f.CreateNamespace(ns, nil)\n\t\t\tframework.ExpectNoError(err, \"failed to create namespace: %s\", ns)\n\t\t}(n)"
  },
  {
    "id" : "730dd701-48a1-4c29-be43-04b850f3076e",
    "prId" : 86854,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86854#pullrequestreview-338888021",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0994797-40a7-40c2-a7a7-f86c2184bfc6",
        "parentId" : null,
        "authorId" : "73cba353-2317-4305-8981-830b29b34769",
        "body" : "If it failed here, wouldn't we orphan the new ns we made? I'm not exactly certain though how the `Expect...` works w.r.t. defers; even if you did a 'defer deleteNS(...)` would the namespace still be orphaned on failure?",
        "createdAt" : "2020-01-06T15:43:28Z",
        "updatedAt" : "2020-01-07T22:03:24Z",
        "lastEditedBy" : "73cba353-2317-4305-8981-830b29b34769",
        "tags" : [
        ]
      },
      {
        "id" : "be16b02f-abd7-4335-b261-4c0c4f6a4643",
        "parentId" : "c0994797-40a7-40c2-a7a7-f86c2184bfc6",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "@johnSchnake \r\ncleanup of failure (defer) is not a common pattern in this file and other tests.\r\nthe namespace will be orphaned, but essentially this is just a test, so it's fine.\r\n\r\n@BobyMCbobs \r\n`defer deleteNamespace(f, namespaceName)` will now do a second delete that will always fail on success, if the previous code passes:\r\n```\r\n\t\tginkgo.By(\"deleting the Namespace\")\r\n\t\terr = f.ClientSet.CoreV1().Namespaces().Delete(namespaceName, &metav1.DeleteOptions{})\r\n\t\tframework.ExpectNoError(err, \"failed to delete the test Namespace\")\r\n```\r\n\r\ni don't think we have to have the deferred delete.\r\n",
        "createdAt" : "2020-01-06T20:47:00Z",
        "updatedAt" : "2020-01-07T22:03:24Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "baf5b2db-b68b-41b6-9b1f-6a1a5456fb34",
        "parentId" : "c0994797-40a7-40c2-a7a7-f86c2184bfc6",
        "authorId" : "97f5510f-d2e4-4cef-b8eb-c4184feaff72",
        "body" : "Updated in https://github.com/kubernetes/kubernetes/pull/86854/commits/1fa8ddd8aa6e347fe6a6500f74dba6310dd68293",
        "createdAt" : "2020-01-06T20:52:40Z",
        "updatedAt" : "2020-01-07T22:03:24Z",
        "lastEditedBy" : "97f5510f-d2e4-4cef-b8eb-c4184feaff72",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ed55bc52031ef5e386c82757138ae171746c999",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +265,269 @@\t\tframework.ExpectNoError(err, \"failed to marshal JSON patch data\")\n\t\t_, err = f.ClientSet.CoreV1().Namespaces().Patch(namespaceName, types.StrategicMergePatchType, []byte(nspatch))\n\t\tframework.ExpectNoError(err, \"failed to patch Namespace\")\n\n\t\tginkgo.By(\"get the Namespace and ensuring it has the label\")"
  },
  {
    "id" : "82443cbb-bc5b-4156-88bd-811ceff14085",
    "prId" : 86854,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86854#pullrequestreview-338931064",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34178bc6-8011-400c-866d-56469c59c2b4",
        "parentId" : null,
        "authorId" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "body" : "This import line should be moved to line 33 before `\"k8s.io/apimachinery/pkg/util/uuid\"`",
        "createdAt" : "2020-01-06T21:54:11Z",
        "updatedAt" : "2020-01-07T22:03:24Z",
        "lastEditedBy" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "tags" : [
        ]
      },
      {
        "id" : "534c294d-2a84-48c6-9f39-0b2961676607",
        "parentId" : "34178bc6-8011-400c-866d-56469c59c2b4",
        "authorId" : "97f5510f-d2e4-4cef-b8eb-c4184feaff72",
        "body" : "Updated in bd6550fb349",
        "createdAt" : "2020-01-06T22:20:08Z",
        "updatedAt" : "2020-01-07T22:03:24Z",
        "lastEditedBy" : "97f5510f-d2e4-4cef-b8eb-c4184feaff72",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ed55bc52031ef5e386c82757138ae171746c999",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +35,39 @@\n\t\"github.com/onsi/ginkgo\"\n\t\"k8s.io/apimachinery/pkg/types\"\n)\n"
  },
  {
    "id" : "dd5188d8-5dca-447d-9855-40d792e51cad",
    "prId" : 86854,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86854#pullrequestreview-339536803",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c92378c-a90f-422c-bff3-9f05460afe9f",
        "parentId" : null,
        "authorId" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "body" : "need to add error check like `framework.ExpectNoError(err)` to pass the following staticcheck:\r\n```\r\nErrors from staticcheck:\r\ntest/e2e/apimachinery/namespace.go:260:12: this value of err is never used (SA4006)\r\n```\r\n",
        "createdAt" : "2020-01-07T21:58:35Z",
        "updatedAt" : "2020-01-07T22:03:24Z",
        "lastEditedBy" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "tags" : [
        ]
      },
      {
        "id" : "21b4e063-8fd5-4bda-a94b-f751275c21d8",
        "parentId" : "7c92378c-a90f-422c-bff3-9f05460afe9f",
        "authorId" : "97f5510f-d2e4-4cef-b8eb-c4184feaff72",
        "body" : "Updated in 9ed55bc5203",
        "createdAt" : "2020-01-07T22:03:32Z",
        "updatedAt" : "2020-01-07T22:03:33Z",
        "lastEditedBy" : "97f5510f-d2e4-4cef-b8eb-c4184feaff72",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ed55bc52031ef5e386c82757138ae171746c999",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +262,266 @@\t\t\t\t\"labels\": map[string]string{\"testLabel\": \"testValue\"},\n\t\t\t},\n\t\t})\n\t\tframework.ExpectNoError(err, \"failed to marshal JSON patch data\")\n\t\t_, err = f.ClientSet.CoreV1().Namespaces().Patch(namespaceName, types.StrategicMergePatchType, []byte(nspatch))"
  }
]