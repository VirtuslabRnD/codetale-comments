[
  {
    "id" : "b3bb02e2-36fa-4cae-a373-a98432f61b5e",
    "prId" : 103179,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103179#pullrequestreview-694513540",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7b91f70-a9dc-4fce-9747-5dbb7da6a008",
        "parentId" : null,
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "isn't it this call that actually makes the runtime class? why are we only deferring after creating the pod?",
        "createdAt" : "2021-06-28T22:45:14Z",
        "updatedAt" : "2021-06-28T22:45:14Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "e09326dd-38af-42ef-ba5c-16971f062d01",
        "parentId" : "c7b91f70-a9dc-4fce-9747-5dbb7da6a008",
        "authorId" : "be27de7b-e087-4bc3-9a9e-edeacaa9fcdf",
        "body" : "I have adjusted the position, please check again. Thanks.",
        "createdAt" : "2021-06-29T01:24:05Z",
        "updatedAt" : "2021-06-29T01:24:05Z",
        "lastEditedBy" : "be27de7b-e087-4bc3-9a9e-edeacaa9fcdf",
        "tags" : [
        ]
      }
    ],
    "commit" : "f80f9eeb6d0ebc5603cdee1eabe4adc5fadaee29",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +50,54 @@\tginkgo.It(\"should reject a Pod requesting a RuntimeClass with an unconfigured handler [NodeFeature:RuntimeHandler]\", func() {\n\t\thandler := f.Namespace.Name + \"-handler\"\n\t\trcName := createRuntimeClass(f, \"unconfigured-handler\", handler)\n\t\tdefer deleteRuntimeClass(f, rcName)\n\t\tpod := f.PodClient().Create(e2enode.NewRuntimeClassPod(rcName))"
  },
  {
    "id" : "171de296-25d0-4e54-ad27-a3e384c517f4",
    "prId" : 101464,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/101464#pullrequestreview-646011940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "495f1817-896c-4f01-8945-e8c93aa44188",
        "parentId" : null,
        "authorId" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "body" : "anything we can check on the pod? with this change any slow scheduling pod (more than 2 minutes) will pass. Ideally some validation of the fact that pod cannot run is needed.",
        "createdAt" : "2021-04-26T22:57:18Z",
        "updatedAt" : "2021-05-06T08:49:31Z",
        "lastEditedBy" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "tags" : [
        ]
      },
      {
        "id" : "83e6fdc2-d8f0-4fd8-b6f3-34bfb5c3657e",
        "parentId" : "495f1817-896c-4f01-8945-e8c93aa44188",
        "authorId" : "9b6aea04-37db-406e-a5bb-a2a7db0d9a2e",
        "body" : "Hi Sergey, I believe there is no good way to validate the pod can't run. I copied this pattern from other e2e tests that use `WaitTimeoutForEvent`, e. g. [here](https://github.com/kubernetes/kubernetes/blob/3f98b98c6944d0d2a9c945ffe547103151c0619f/test/e2e/storage/testsuites/volumemode.go#L243). There is no validation a pod can't run in any of them.\r\n\r\nWe could increase the timeout to reduce the likelihood slow scheduling leads to a passing test that should fail. However, 2 min feels like a reasonable value to me.\r\n\r\nAnother possibility might be to check kubelet logs. I am not sure if there is a clean way to implement this check. Also, I feel asserting on logs violates the black-box nature of e2e test.\r\n\r\nWhat do you think?",
        "createdAt" : "2021-04-27T07:29:18Z",
        "updatedAt" : "2021-05-06T08:49:31Z",
        "lastEditedBy" : "9b6aea04-37db-406e-a5bb-a2a7db0d9a2e",
        "tags" : [
        ]
      },
      {
        "id" : "475ca1ea-8ad1-41c7-98d6-deff9e15c10a",
        "parentId" : "495f1817-896c-4f01-8945-e8c93aa44188",
        "authorId" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "body" : "/lgtm",
        "createdAt" : "2021-04-27T15:30:43Z",
        "updatedAt" : "2021-05-06T08:49:31Z",
        "lastEditedBy" : "85d51570-e06e-4b3f-a869-f5f820e49119",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ea01629066d8d02582100f699c2300c7208e5eb",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +66,70 @@\t\tp, err := f.ClientSet.CoreV1().Pods(f.Namespace.Name).Get(context.TODO(), pod.Name, metav1.GetOptions{})\n\t\tframework.ExpectNoError(err, \"could not re-read the pod after event (or timeout)\")\n\t\tframework.ExpectEqual(p.Status.Phase, v1.PodPending, \"Pod phase isn't pending\")\n\t})\n"
  }
]