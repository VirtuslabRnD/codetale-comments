[
  {
    "id" : "8d45007f-f5f7-4806-a247-583e9ab2c350",
    "prId" : 86857,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86857#pullrequestreview-340845206",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7a397d4-f352-42cb-913e-b61007a51d00",
        "parentId" : null,
        "authorId" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "body" : "IMO once we've patched the secret, we should get the secret back and confirm the patch has taken effect.  As written this test could be satisfied by an endpoint that does nothing but return 200 OK.  So here I would once again locate the secret by name/namespace (might want to pull out into a helper func), and then verify its data",
        "createdAt" : "2020-01-08T18:32:55Z",
        "updatedAt" : "2020-01-10T02:39:24Z",
        "lastEditedBy" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "tags" : [
        ]
      },
      {
        "id" : "be9e03e8-acd0-484d-8069-8e76e4f15d78",
        "parentId" : "a7a397d4-f352-42cb-913e-b61007a51d00",
        "authorId" : "97f5510f-d2e4-4cef-b8eb-c4184feaff72",
        "body" : "I agree with this idea, I've updated the test to include the check in 07e3c46.",
        "createdAt" : "2020-01-09T22:06:30Z",
        "updatedAt" : "2020-01-10T02:39:24Z",
        "lastEditedBy" : "97f5510f-d2e4-4cef-b8eb-c4184feaff72",
        "tags" : [
        ]
      }
    ],
    "commit" : "dcd4dcdf2171fb40bd6187b526348733cbb4a9f8",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +189,193 @@\t\tframework.ExpectNoError(err, \"failed to marshal JSON\")\n\t\t_, err = f.ClientSet.CoreV1().Secrets(f.Namespace.Name).Patch(secretCreatedName, types.StrategicMergePatchType, []byte(secretPatch))\n\t\tframework.ExpectNoError(err, \"failed to patch secret\")\n\n\t\tsecret, err := f.ClientSet.CoreV1().Secrets(f.Namespace.Name).Get(secretCreatedName, metav1.GetOptions{})"
  },
  {
    "id" : "72f75642-8313-4d72-83f6-0903d22de04f",
    "prId" : 74702,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74702#pullrequestreview-219980801",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76a9702a-bd94-4247-8fcc-d95c9360d6f4",
        "parentId" : null,
        "authorId" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "body" : "it seems that the test name changed from the original name. I don't think that's normal or ok.\r\n\r\nFWIW, this test passes on Windows, so I'm ok with the promotion.",
        "createdAt" : "2019-03-28T12:11:22Z",
        "updatedAt" : "2019-03-28T12:11:22Z",
        "lastEditedBy" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5f3e24ab79ae57958da96d3f6dbaaf5e2672dfb",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +132,136 @@\t   Description: Attempt to create a Secret with an empty key. The creation MUST fail.\n\t*/\n\tframework.ConformanceIt(\"should fail to create secret due to empty secret key\", func() {\n\t\tsecret, err := createEmptyKeySecretForTest(f)\n\t\tExpect(err).To(HaveOccurred(), \"created secret %q with empty key in namespace %q\", secret.Name, f.Namespace.Name)"
  },
  {
    "id" : "adccea8f-559c-436a-8dd6-e90315e3d1aa",
    "prId" : 35587,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35587#pullrequestreview-8285722",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52ec48aa-0c1f-4893-a3d1-0b7e4f6513fe",
        "parentId" : null,
        "authorId" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "body" : "This is a test about two secrets. Not `doSecretE2EWithoutMapping(..)` that is being called\n",
        "createdAt" : "2016-11-12T00:16:19Z",
        "updatedAt" : "2016-11-14T18:52:26Z",
        "lastEditedBy" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0f62b2186d06925f1dc1881034ffbff6a52062b",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +49,53 @@\t})\n\n\tIt(\"should be able to mount in a volume regardless of a different secret existing with same name in different namespace\", func() {\n\t\tvar (\n\t\t\tnamespace2  *api.Namespace"
  },
  {
    "id" : "38be4e7d-59ef-416c-8813-8334a99b073d",
    "prId" : 35587,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35587#pullrequestreview-8294028",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "049e6b13-3968-44af-99cd-bfac0838cbc7",
        "parentId" : null,
        "authorId" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "body" : "no need for these if you use `:=` on the next `if`?\n",
        "createdAt" : "2016-11-12T05:08:29Z",
        "updatedAt" : "2016-11-14T18:52:26Z",
        "lastEditedBy" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "tags" : [
        ]
      },
      {
        "id" : "0f5f1008-5a8e-4589-b6ae-51bf3e70fa8b",
        "parentId" : "049e6b13-3968-44af-99cd-bfac0838cbc7",
        "authorId" : "3493bb4b-b4bb-4e5d-b6dc-7c87de7da51b",
        "body" : "That would limit the scope.\nI need namespace2 and err in the following lines.\n\nhttps://groups.google.com/forum/#!topic/golang-nuts/v6Xm9C7ENgc\n",
        "createdAt" : "2016-11-12T06:32:39Z",
        "updatedAt" : "2016-11-14T18:52:26Z",
        "lastEditedBy" : "3493bb4b-b4bb-4e5d-b6dc-7c87de7da51b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0f62b2186d06925f1dc1881034ffbff6a52062b",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +52,56 @@\t\tvar (\n\t\t\tnamespace2  *api.Namespace\n\t\t\terr         error\n\t\t\tsecret2Name = \"secret-test-\" + string(uuid.NewUUID())\n\t\t)"
  },
  {
    "id" : "8a5e81b4-4015-4aff-8236-2edb1bfccfc9",
    "prId" : 35587,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35587#pullrequestreview-8294034",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46ee84a3-f113-429e-accf-a0a17b46f05d",
        "parentId" : null,
        "authorId" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "body" : "Sorry, not sure I follow. Why add a namespace here? Why leaving it empty is not enough?\n",
        "createdAt" : "2016-11-12T05:10:29Z",
        "updatedAt" : "2016-11-14T18:52:26Z",
        "lastEditedBy" : "c06b2845-79d9-4151-8aa6-dc7c6eb52bbf",
        "tags" : [
        ]
      },
      {
        "id" : "e2313335-a43a-4405-b351-9dcb83eae433",
        "parentId" : "46ee84a3-f113-429e-accf-a0a17b46f05d",
        "authorId" : "3493bb4b-b4bb-4e5d-b6dc-7c87de7da51b",
        "body" : "To make it explicit\n",
        "createdAt" : "2016-11-12T06:33:21Z",
        "updatedAt" : "2016-11-14T18:52:26Z",
        "lastEditedBy" : "3493bb4b-b4bb-4e5d-b6dc-7c87de7da51b",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0f62b2186d06925f1dc1881034ffbff6a52062b",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +218,222 @@\t\tObjectMeta: api.ObjectMeta{\n\t\t\tName:      \"pod-secrets-\" + string(uuid.NewUUID()),\n\t\t\tNamespace: f.Namespace.Name,\n\t\t},\n\t\tSpec: api.PodSpec{"
  }
]