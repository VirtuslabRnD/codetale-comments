[
  {
    "id" : "1f4baa40-bd1b-4417-937d-758c0173d947",
    "prId" : 80787,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80787#pullrequestreview-271029104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9867732-2d4d-4310-b846-ff79faa54579",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "this should be using the framework on this call line vs. ginkgo. \r\n\r\nThis applies to everything here. ",
        "createdAt" : "2019-08-05T19:28:47Z",
        "updatedAt" : "2019-08-07T03:37:20Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "fd63c11d-fd72-4ecf-82c1-e8802962f1bc",
        "parentId" : "a9867732-2d4d-4310-b846-ff79faa54579",
        "authorId" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "body" : "I think this is correct as written\r\n\r\nwe don't have a `framework.It`; we do have a `framework.ConformanceIt` but explicitly disallow new tests from being added with ConformanceIt, they must be promoted into it",
        "createdAt" : "2019-08-05T21:45:58Z",
        "updatedAt" : "2019-08-07T03:37:20Z",
        "lastEditedBy" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "tags" : [
        ]
      },
      {
        "id" : "3ef9500d-d132-4a09-b06e-3b6789113dc2",
        "parentId" : "a9867732-2d4d-4310-b846-ff79faa54579",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Sorry retract, I'm brain fry, comment below still applies though. ",
        "createdAt" : "2019-08-05T22:05:31Z",
        "updatedAt" : "2019-08-07T03:37:20Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "7218182f119f5b6fe051393b1bd3e026dce63f0c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +136,140 @@\t})\n\n\tginkgo.It(\"should patch ConfigMap successfully\", func() {\n\t\tname := \"configmap-test-\" + string(uuid.NewUUID())\n\t\tconfigMap := newConfigMap(f, name)"
  },
  {
    "id" : "760972b8-089b-40ed-b023-c2bbf52ee9a8",
    "prId" : 80787,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80787#pullrequestreview-271025399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c0f258c-4018-4180-8a73-d8c65d0c8c7e",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Why do this vs. using the utility below?  ",
        "createdAt" : "2019-08-05T19:31:07Z",
        "updatedAt" : "2019-08-07T03:37:20Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "608fcb4a-8d4b-41f7-810f-58cdd95000ea",
        "parentId" : "5c0f258c-4018-4180-8a73-d8c65d0c8c7e",
        "authorId" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "body" : "this looks fine to me \r\n\r\nIf \"this\" refers to the `name :=` assignment, all of the other test cases in this file do the same thing, so I'm not sure what they should be doing instead?\r\n\r\nIf \"this\" refers to `newConfigMap(f,name)`, it looks like it lives in `e2e/configmap_volume` and does exactly the same thing as `newEnvFromConfigMap(...)` below.  I would argue `newEnvFromConfigMap(...)` is poorly named, because it's not an env, and should be removed in favor of `newConfigMap`.  \r\n\r\nIf you're suggesting all fixtures should be defined in this file, instead of relying on fixtures that happen to live within this package, I'm fine with that, but still think the function below should be renamed.",
        "createdAt" : "2019-08-05T21:59:58Z",
        "updatedAt" : "2019-08-07T03:37:20Z",
        "lastEditedBy" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "7218182f119f5b6fe051393b1bd3e026dce63f0c",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +137,141 @@\n\tginkgo.It(\"should patch ConfigMap successfully\", func() {\n\t\tname := \"configmap-test-\" + string(uuid.NewUUID())\n\t\tconfigMap := newConfigMap(f, name)\n\t\tginkgo.By(fmt.Sprintf(\"Creating configMap %v/%v\", f.Namespace.Name, configMap.Name))"
  },
  {
    "id" : "a73a9048-fa9a-43a5-9487-49cf393944de",
    "prId" : 70299,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70299#pullrequestreview-172064079",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e363471-57d6-4c57-b6ce-dfe6ad15569f",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I actually mean a test case where the configmap object has a valid key/value, however, the configmap volume configuration is asking for a key that doesn't exist in the configmap object.  For example, the configmap could contain \"foo\" => \"value\".  But the configmap volume is configured for key \"bar\".",
        "createdAt" : "2018-11-06T00:48:58Z",
        "updatedAt" : "2018-11-13T07:38:58Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "9d8c5303-d646-40c3-ab5e-1565faf65271",
        "parentId" : "5e363471-57d6-4c57-b6ce-dfe6ad15569f",
        "authorId" : "bc6c968e-9703-4f29-99ac-90bbfe09e25a",
        "body" : "@msau42 this test case for configMap. This test should fail because of empty key. \r\nAnd I added a new test case in\r\n > configMap_volume.go \r\n\r\n```\r\n//Slow (~5 mins)\r\n\tIt(\"Should fail non-optional pod creation due to the key in the configMap object does not exist [Slow]\", func() {\r\n\t\tvolumeMountPath := \"/etc/configmap-volumes\"\r\n\t\tpodName := \"pod-configmaps-\" + string(uuid.NewUUID())\r\n\t\terr := createNonOptionalConfigMapPodWithConfig(f, volumeMountPath, podName)\r\n\t\tExpect(err).To(HaveOccurred(), \"created pod %q with non-optional configMap in namespace %q\", podName, f.Namespace.Name)\r\n\t})\r\n```\r\n\r\nthe expected is resolved in the function \r\n> createNonOptionalConfigMapPodWithConfig\r\n\r\nCreated configMap with below keys\r\n\r\n```\r\nfunc newConfigMap(f *framework.Framework, name string) *v1.ConfigMap {\r\n\treturn &v1.ConfigMap{\r\n\t\tObjectMeta: metav1.ObjectMeta{\r\n\t\t\tNamespace: f.Namespace.Name,\r\n\t\t\tName:      name,\r\n\t\t},\r\n\t\tData: map[string]string{\r\n\t\t\t\"data-1\": \"value-1\",\r\n\t\t\t\"data-2\": \"value-2\",\r\n\t\t\t\"data-3\": \"value-3\",\r\n\t\t},\r\n\t}\r\n}\r\n```\r\n\r\nand trying yo create pod with the key which is doesn't  exist.\r\n\r\n```\r\nItems: []v1.KeyToPath{\r\n\t{\r\n\t\tKey:  \"data-4\",\r\n\t\tPath: \"path/to/data-4\",\r\n\t},\r\n}\r\n```",
        "createdAt" : "2018-11-06T15:08:03Z",
        "updatedAt" : "2018-11-13T07:38:58Z",
        "lastEditedBy" : "bc6c968e-9703-4f29-99ac-90bbfe09e25a",
        "tags" : [
        ]
      }
    ],
    "commit" : "6b9db24ed0c4424f3212b3e6b949cc12f17e1629",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +153,157 @@\t\t},\n\t\tData: map[string]string{\n\t\t\t\"\": \"value-1\",\n\t\t},\n\t}"
  },
  {
    "id" : "7fbdadbd-4d6d-4405-8b5e-9d6e633d01c8",
    "prId" : 39981,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39981#pullrequestreview-17839778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4ee4f5d-d3bb-4e27-a0f2-c5c36932e87d",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "do we want a short --retry_time (like 10 seconds) so the loop notices changes sooner after they happen, or am I misunderstanding what --retry_time does?",
        "createdAt" : "2017-01-22T14:54:43Z",
        "updatedAt" : "2017-01-24T03:12:34Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "3b569c08-8bb6-47bb-bb33-7cd524255d9b",
        "parentId" : "c4ee4f5d-d3bb-4e27-a0f2-c5c36932e87d",
        "authorId" : "6314844c-5310-477a-96a1-0fc838ec485f",
        "body" : "It threw me too.\r\nIt is how long to wait until it will stop. It retries every 2 seconds.\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/master/test/images/mount-tester/mt.go#L251-L252",
        "createdAt" : "2017-01-22T14:58:08Z",
        "updatedAt" : "2017-01-24T03:12:34Z",
        "lastEditedBy" : "6314844c-5310-477a-96a1-0fc838ec485f",
        "tags" : [
        ]
      },
      {
        "id" : "d80a1de1-a586-4a7f-a274-302e9d928227",
        "parentId" : "c4ee4f5d-d3bb-4e27-a0f2-c5c36932e87d",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "ah. best flag name ever. in that case, should it match the 300 second timeout?",
        "createdAt" : "2017-01-22T15:02:22Z",
        "updatedAt" : "2017-01-24T03:12:34Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "a8b1f5fa-ee9e-4f89-97d9-2ce350394a5e",
        "parentId" : "c4ee4f5d-d3bb-4e27-a0f2-c5c36932e87d",
        "authorId" : "6314844c-5310-477a-96a1-0fc838ec485f",
        "body" : "It as a copy paste from elsewhere which does the same. I think it is allowing time to poll + start the container. So it should be less than the 300s but as the comments say it is a fudge + 60s to the sync loop. The best way would be to also monitor the health of the pod and fail immediately but none of the tests do it.  Right now, worst case when it fails it waits 5min but if it succeeds it is pretty quick.",
        "createdAt" : "2017-01-22T15:30:06Z",
        "updatedAt" : "2017-01-24T03:12:34Z",
        "lastEditedBy" : "6314844c-5310-477a-96a1-0fc838ec485f",
        "tags" : [
        ]
      },
      {
        "id" : "53677659-939c-4ccb-b61a-07141dda3801",
        "parentId" : "c4ee4f5d-d3bb-4e27-a0f2-c5c36932e87d",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Ok, makes sense",
        "createdAt" : "2017-01-22T22:12:21Z",
        "updatedAt" : "2017-01-24T03:12:34Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca207be4a3d6f2aaf6b012a3eae0e306f4117566",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +261,265 @@\t\t\t\t\t\tName:    deleteContainerName,\n\t\t\t\t\t\tImage:   \"gcr.io/google_containers/mounttest:0.7\",\n\t\t\t\t\t\tCommand: []string{\"/mt\", \"--break_on_expected_content=false\", \"--retry_time=120\", \"--file_content_in_loop=/etc/configmap-volumes/delete/data-1\"},\n\t\t\t\t\t\tVolumeMounts: []v1.VolumeMount{\n\t\t\t\t\t\t\t{"
  },
  {
    "id" : "971e7a0c-a332-45e5-9d91-89e792f32e7e",
    "prId" : 36245,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36245#pullrequestreview-13551432",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3cab5c23-f84f-4912-8b84-134fa3273641",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "This should be a new test.  Keep the old test around and add a new one for `EnvFrom`",
        "createdAt" : "2016-12-19T13:47:35Z",
        "updatedAt" : "2017-01-03T16:45:52Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "94866b3beee16e9db416395be9e3b27b81da2902",
    "line" : null,
    "diffHunk" : "@@ -1,1 +154,158 @@\t})\n\n\tIt(\"should be consumable via environment variable [Conformance]\", func() {\n\t\tname := \"configmap-test-\" + string(uuid.NewUUID())\n\t\tconfigMap := newConfigMap(f, name)"
  }
]