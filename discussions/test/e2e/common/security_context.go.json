[
  {
    "id" : "b9e6ce20-66a1-46ae-8c27-65599221dd35",
    "prId" : 83368,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/83368#pullrequestreview-297128064",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e788eed-d673-4d5e-8944-7cff830ff2fe",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Is `[NodeFeature:HostAccess]` respected in the cluster sweet? I'm actually not sure why it's required though...",
        "createdAt" : "2019-10-03T17:56:07Z",
        "updatedAt" : "2019-10-03T17:56:07Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "697d0383-b614-4a3b-9b76-5268e323c28b",
        "parentId" : "0e788eed-d673-4d5e-8944-7cff830ff2fe",
        "authorId" : "580b4924-2623-4aee-8bbf-3e1735a9dc88",
        "body" : "As I understand it, those tags are just used for regex filtering. So it just depends on if there is some CI tooling that is looking for those tags for inclusion/exclusion.",
        "createdAt" : "2019-10-03T17:57:56Z",
        "updatedAt" : "2019-10-03T17:57:56Z",
        "lastEditedBy" : "580b4924-2623-4aee-8bbf-3e1735a9dc88",
        "tags" : [
        ]
      },
      {
        "id" : "982c5d1f-5283-4c78-9750-94ada88f40b6",
        "parentId" : "0e788eed-d673-4d5e-8944-7cff830ff2fe",
        "authorId" : "580b4924-2623-4aee-8bbf-3e1735a9dc88",
        "body" : "@jefftree can you look into that?",
        "createdAt" : "2019-10-03T18:10:35Z",
        "updatedAt" : "2019-10-03T18:10:35Z",
        "lastEditedBy" : "580b4924-2623-4aee-8bbf-3e1735a9dc88",
        "tags" : [
        ]
      },
      {
        "id" : "87ccfb1c-13df-4dff-bc9d-0da8f6df8acf",
        "parentId" : "0e788eed-d673-4d5e-8944-7cff830ff2fe",
        "authorId" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "body" : "@tallclair @johnbelamaric: The exact tag `[NodeFeature:HostAccess]` is not looked at in any of the CI tooling for the cluster suite, but there are a couple of matches for the  `[NodeFeature:.+]`regex (https://github.com/kubernetes/test-infra/search?q=nodefeature%3A.%2B&unscoped_q=nodefeature%3A.%2B).",
        "createdAt" : "2019-10-03T19:28:11Z",
        "updatedAt" : "2019-10-03T19:28:23Z",
        "lastEditedBy" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "tags" : [
        ]
      },
      {
        "id" : "8cdac599-62d6-4d56-a282-4b580903883c",
        "parentId" : "0e788eed-d673-4d5e-8944-7cff830ff2fe",
        "authorId" : "580b4924-2623-4aee-8bbf-3e1735a9dc88",
        "body" : "Ok, that looks fine, I don't see any issues there. There are many other `NodeFeature` tests in common already.",
        "createdAt" : "2019-10-03T20:23:20Z",
        "updatedAt" : "2019-10-03T20:23:20Z",
        "lastEditedBy" : "580b4924-2623-4aee-8bbf-3e1735a9dc88",
        "tags" : [
        ]
      }
    ],
    "commit" : "20ac24929b1d3bc4dd4fb757f6a9602e8cbd1b38",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +85,89 @@\t\t})\n\n\t\tginkgo.It(\"should show its pid in the host PID namespace [LinuxOnly] [NodeFeature:HostAccess]\", func() {\n\t\t\tbusyboxPodName := \"busybox-hostpid-\" + string(uuid.NewUUID())\n\t\t\tcreateAndWaitHostPidPod(busyboxPodName, true)"
  },
  {
    "id" : "74f4be52-4386-4078-8eab-e73a62864616",
    "prId" : 78264,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78264#pullrequestreview-242004135",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ea17e0d-2ad3-4fe0-88fa-44a4fe9e7e9f",
        "parentId" : null,
        "authorId" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "body" : "Just confirming that we still want to use `BusyBox` instead of `debian` here?\r\n\r\nAlso, is there a doc/issue I can read around the switch from `BusyBox` to `debian` base images? Just for my own curiosity :)",
        "createdAt" : "2019-05-25T14:08:38Z",
        "updatedAt" : "2019-05-25T14:08:57Z",
        "lastEditedBy" : "d7870cae-47b0-4c8e-8527-be8fc4be86de",
        "tags" : [
        ]
      }
    ],
    "commit" : "c851c480d32614ec5b311fbb837cd19fc46cfc60",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +97,101 @@\n\tContext(\"When creating a container with runAsNonRoot\", func() {\n\t\trootImage := imageutils.GetE2EImage(imageutils.BusyBox)\n\t\tnonRootImage := imageutils.GetE2EImage(imageutils.NonRoot)\n\t\tmakeNonRootPod := func(podName, image string, userid *int64) *v1.Pod {"
  },
  {
    "id" : "3c11547e-ab85-4df3-bc6d-f1cf078173c2",
    "prId" : 73204,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/73204#pullrequestreview-199554818",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03070cfe-5b7b-4a4e-8ab9-e3b1d1605feb",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "and does not support privilege escalation",
        "createdAt" : "2019-02-01T22:30:40Z",
        "updatedAt" : "2019-02-04T12:24:43Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "b676acfa-579d-4a2d-9c05-2b85dfd14d92",
        "parentId" : "03070cfe-5b7b-4a4e-8ab9-e3b1d1605feb",
        "authorId" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "body" : "Done",
        "createdAt" : "2019-02-04T12:15:10Z",
        "updatedAt" : "2019-02-04T12:24:43Z",
        "lastEditedBy" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "tags" : [
        ]
      }
    ],
    "commit" : "5daa08878f8cb1d077135b7b19d63c6acbaf4c42",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +261,265 @@\t\t  A container is configured with allowPrivilegeEscalation=true and a given uid (1000) which is not 0.\n\t\t  When the container is run, the container is run using uid=0 (making use of the privilege escalation).\n\t\t  This test is marked LinuxOnly since Windows does not support running as UID / GID.\n\t\t*/\n\t\tIt(\"should allow privilege escalation when true [LinuxOnly] [NodeConformance]\", func() {"
  },
  {
    "id" : "ce5e49b4-f1d0-4bed-bb73-ec0d0994c573",
    "prId" : 70639,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70639#pullrequestreview-225895712",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c118f0f-ef4e-408f-ba12-6e9e27dc89c1",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "I like how you indicated which field exactly is set to false here (`readOnlyRootFilesystem`), can we do the same for all the other test cases we're touching in this file?",
        "createdAt" : "2019-04-09T16:00:31Z",
        "updatedAt" : "2019-04-12T04:53:22Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "235f1aef-3efc-4651-92fe-58f7a9b1694a",
        "parentId" : "5c118f0f-ef4e-408f-ba12-6e9e27dc89c1",
        "authorId" : "0aee6f4f-d40c-4f7b-9383-7ec73a655652",
        "body" : "I have added this format in Conformance doc but not changed e2e name as this PR is intended to promote existing e2e to Conformance and would require another PR to change such e2e updates. \r\n\r\nSometimes it gives good readibity by either `readOnlyRootFilesystem` or ` when Filesystem is readOnly` based on Context(). IMO, both are good approach and such change would be good if it improves readability whereever required or if we are planning to enforce using `$propery=value` in e2e name.\r\n\r\nFYI, Many e2e names are not precisely defined based on their behavior so we are updating them i.e. https://github.com/kubernetes/kubernetes/pull/75544, #75632.",
        "createdAt" : "2019-04-12T04:53:58Z",
        "updatedAt" : "2019-04-12T04:53:58Z",
        "lastEditedBy" : "0aee6f4f-d40c-4f7b-9383-7ec73a655652",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7d8771dfe09addeb32fc7e8ae7129af87bd2c1a",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +147,151 @@\t\t\tWrite operation MUST be allowed and Pod MUST be in Succeeded state.\n\t\t*/\n\t\tframework.ConformanceIt(\"should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance]\", func() {\n\t\t\tcreateAndWaitUserPod(false)\n\t\t})"
  },
  {
    "id" : "b80fb877-6230-455e-ac59-e7793a76f997",
    "prId" : 70639,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70639#pullrequestreview-246839753",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb0e995b-ff7f-4c79-ba9f-21cb08d6b7a3",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "@spiffxp @timothysc @johnbelamaric \r\n\r\nHave we started to tag tests with the reasons that tests aren't included in conformance yet,  such as `[Privileged]`? I thought we had agreed to do that:\r\nhttps://github.com/kubernetes/community/blob/master/contributors/devel/sig-testing/e2e-tests.md#kinds-of-tests",
        "createdAt" : "2019-06-06T22:08:18Z",
        "updatedAt" : "2019-06-06T22:08:19Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7d8771dfe09addeb32fc7e8ae7129af87bd2c1a",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +83,87 @@\t\t\tTestname: Security Context, runAsUser=0\n\t\t\tDescription: Container is created with runAsUser option by passing uid 0 to run as root priviledged user. Pod MUST be in Succeeded phase.\n\t\t\tThis e2e can not be promoted to Conformance because a Conformant platform may not allow to run containers with 'uid 0' or running privileged operations.\n\t\t\t[LinuxOnly]: This test is marked as LinuxOnly since Windows does not support running as UID / GID.\n\t\t*/"
  }
]