[
  {
    "id" : "c7bf9731-98ab-4bf2-8427-1f49fa38fa8f",
    "prId" : 81231,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81231#pullrequestreview-273397450",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1f80b4f-2d88-4988-bf19-c37826b319c4",
        "parentId" : null,
        "authorId" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "body" : "nit: I don't think having this as a separate function is needed.  Can we just set the `NodeDumpFunc` and `ContainerDumpFunc` when we create the `testutils.DeploymentConfig` above, and do `framework.ExpectNoError(testutils.RunDeployment(dpConfig)))`?",
        "createdAt" : "2019-08-09T22:56:02Z",
        "updatedAt" : "2019-08-09T22:56:09Z",
        "lastEditedBy" : "d2b16581-e7e9-48b8-9f76-6f6bcb9ec300",
        "tags" : [
        ]
      },
      {
        "id" : "11a355ac-52f3-4fee-9ac0-7ab992c59e5b",
        "parentId" : "b1f80b4f-2d88-4988-bf19-c37826b319c4",
        "authorId" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "body" : "@dashpole Thanks for your review, that is a nice idea.\r\nI will do that with another follow-up PR.",
        "createdAt" : "2019-08-09T23:47:12Z",
        "updatedAt" : "2019-08-09T23:47:12Z",
        "lastEditedBy" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf221a09b5a978bab4d1f27fab7445a6e37020df",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +556,560 @@\n// runDeployment runs a delopyment with the specified config.\nfunc runDeployment(config testutils.DeploymentConfig) error {\n\tginkgo.By(fmt.Sprintf(\"creating deployment %s in namespace %s\", config.Name, config.Namespace))\n\tconfig.NodeDumpFunc = framework.DumpNodeDebugInfo"
  },
  {
    "id" : "b83eba7a-0987-4926-977f-f056b7dcf527",
    "prId" : 54586,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54586#pullrequestreview-73225899",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43701a76-caee-4004-9b0f-682e1667a3f6",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "`framework.DeleteResourceAndPods` calls `getRuntimeObjectForKind`, which only recognizes extensions.ReplicaSet and extensions.Deployment. Not sure whether you should add `apps` support to `getRuntimeObjectForKind` (would probably require other changes) or switch your types here to `extensions`",
        "createdAt" : "2017-10-31T16:02:48Z",
        "updatedAt" : "2017-11-03T02:20:45Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f915e4d0-76b5-4c7a-8f98-60b22dc97f52",
        "parentId" : "43701a76-caee-4004-9b0f-682e1667a3f6",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Probably need to exercise these types in both the extensions and apps groups, so maybe both :-/",
        "createdAt" : "2017-10-31T16:03:41Z",
        "updatedAt" : "2017-11-03T02:20:45Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c9fc432947bedb2fffc12faf7fc0ee1d0ceffd9",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +402,406 @@\ttime.Sleep(10 * time.Second)\n\tkind := rc.kind.GroupKind()\n\tframework.ExpectNoError(framework.DeleteResourceAndPods(rc.clientSet, rc.internalClientset, kind, rc.nsName, rc.name))\n\tframework.ExpectNoError(rc.clientSet.CoreV1().Services(rc.nsName).Delete(rc.name, nil))\n\tframework.ExpectNoError(framework.DeleteResourceAndPods(rc.clientSet, rc.internalClientset, api.Kind(\"ReplicationController\"), rc.nsName, rc.controllerName))"
  },
  {
    "id" : "210a742f-eb03-4307-a91d-fb61007accd1",
    "prId" : 51277,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51277#pullrequestreview-59045385",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf1e01c2-3b32-4713-bf29-010e40acfc5c",
        "parentId" : null,
        "authorId" : null,
        "body" : "I don't really like the idea of flattening the Framework parameter and passing the individual clientsets instead.  Can you convince me otherwise?",
        "createdAt" : "2017-08-24T23:47:00Z",
        "updatedAt" : "2017-08-24T23:47:00Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "0686918a-c5dd-4558-9f89-3d60ed39b085",
        "parentId" : "bf1e01c2-3b32-4713-bf29-010e40acfc5c",
        "authorId" : "cc7376b4-34cd-480b-ad10-0b4b879dde52",
        "body" : "The use of framework here is to consume only the cluster clientset, cluster internalclientset and namespace. The resource consumer, the controller rc that controls the resource consumer and communications across using local service discovery, need only these 3 for their correct functioning. The e2e framework, however has hell a lot many things, including loggers, piping/redirection of stuff, their own beforeeach/aftereach (and many more things I did not explore). The fw we create and use in fed e2e tests is the extention of the e2e fw with subtle differences (for example it stores fed clientset, and clientsets for all clusters). The easier way for me to reuse these rc utils to drive the fed test was to create the resource consumer directly into the specific cluster, I want the utilisation driven into and create a matching object (deployment/rs) in federation to control the distribution. I did explore creating a dummy fw with only the cluster clientset, cluster internalclientset and namespace for that particular cluster set, and use that instead (rather then flattening it); but was afraid of some inbuilt suff on that fw (for example beforeeach/aftereach) interfering with the actual fed e2e fw which is used to drive the fed e2e test.\r\nMeanwhile, I think using the dummy fw, as mentioned above might work here, however, this somehow felt the right way to make these utils not really depend on it.",
        "createdAt" : "2017-08-25T09:49:59Z",
        "updatedAt" : "2017-08-25T09:49:59Z",
        "lastEditedBy" : "cc7376b4-34cd-480b-ad10-0b4b879dde52",
        "tags" : [
        ]
      },
      {
        "id" : "60bdd4e1-b3a2-4f6a-83c7-3007c82f4411",
        "parentId" : "bf1e01c2-3b32-4713-bf29-010e40acfc5c",
        "authorId" : null,
        "body" : "OK, fair enough.  I accept your argument.  Given that, the rest of the PR LGTM.",
        "createdAt" : "2017-08-28T19:39:50Z",
        "updatedAt" : "2017-08-28T19:39:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "c3b06f3e0fa754e75c3a94d2208d3d986bbacb1d",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +102,106 @@}\n\nfunc NewDynamicResourceConsumer(name, nsName, kind string, replicas, initCPUTotal, initMemoryTotal, initCustomMetric int, cpuLimit, memLimit int64, clientset clientset.Interface, internalClientset *internalclientset.Clientset) *ResourceConsumer {\n\treturn newResourceConsumer(name, nsName, kind, replicas, initCPUTotal, initMemoryTotal, initCustomMetric, dynamicConsumptionTimeInSeconds,\n\t\tdynamicRequestSizeInMillicores, dynamicRequestSizeInMegabytes, dynamicRequestSizeCustomMetric, cpuLimit, memLimit, clientset, internalClientset)"
  },
  {
    "id" : "b4b8c80d-6ebb-4af0-9821-68f65c0dc5d3",
    "prId" : 51277,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/51277#pullrequestreview-59046448",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c474fd22-4ef4-43da-9646-140b267d2f27",
        "parentId" : null,
        "authorId" : null,
        "body" : "Can you explain why you decided to do this?  Is it because Federation e2e tests don't use Framework?  If that is the case, it seems better to fix that instead?",
        "createdAt" : "2017-08-24T23:48:27Z",
        "updatedAt" : "2017-08-24T23:48:27Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "db67b45f-8941-49a1-a4c6-6cc3065aeb56",
        "parentId" : "c474fd22-4ef4-43da-9646-140b267d2f27",
        "authorId" : "cc7376b4-34cd-480b-ad10-0b4b879dde52",
        "body" : "As above.",
        "createdAt" : "2017-08-25T09:50:11Z",
        "updatedAt" : "2017-08-25T09:50:11Z",
        "lastEditedBy" : "cc7376b4-34cd-480b-ad10-0b4b879dde52",
        "tags" : [
        ]
      },
      {
        "id" : "f5d5dfcf-86ce-44b6-b4df-5522baaf00fb",
        "parentId" : "c474fd22-4ef4-43da-9646-140b267d2f27",
        "authorId" : null,
        "body" : "OK.",
        "createdAt" : "2017-08-28T19:44:09Z",
        "updatedAt" : "2017-08-28T19:44:09Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "c3b06f3e0fa754e75c3a94d2208d3d986bbacb1d",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +128,132 @@\t\tcontrollerName:           name + \"-ctrl\",\n\t\tkind:                     kind,\n\t\tnsName:                   nsName,\n\t\tclientSet:                clientset,\n\t\tinternalClientset:        internalClientset,"
  },
  {
    "id" : "e52bba7b-8ae2-48ba-b906-f72935dd4a2b",
    "prId" : 46835,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46835#pullrequestreview-41740992",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f5fa412-e72e-49d0-a3c7-45e899e736ef",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "This should be just \"framework.ExpectNoError(...)\", right?",
        "createdAt" : "2017-06-02T10:14:03Z",
        "updatedAt" : "2017-06-06T17:53:07Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "9cbab399-6960-4923-ada7-55da859fecb8",
        "parentId" : "3f5fa412-e72e-49d0-a3c7-45e899e736ef",
        "authorId" : "f16005de-4946-4424-a20f-033d20946386",
        "body" : "No, because this will log the error at the level of this helper function, not its caller. This is why I have added helpers in the other commit.",
        "createdAt" : "2017-06-02T10:23:13Z",
        "updatedAt" : "2017-06-06T17:53:07Z",
        "lastEditedBy" : "f16005de-4946-4424-a20f-033d20946386",
        "tags" : [
        ]
      }
    ],
    "commit" : "c12f4978c28a61d5e1abe9f037722d87cdf45941",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +340,344 @@\t\treturn replicas == desiredReplicas, nil // Expected number of replicas found. Exit.\n\t})\n\tframework.ExpectNoErrorWithOffset(1, err, \"timeout waiting %v for %d replicas\", duration, desiredReplicas)\n}\n"
  },
  {
    "id" : "498434e3-65b5-4288-bab2-1a4fdb575e30",
    "prId" : 46833,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46833#pullrequestreview-41717920",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da2d92cc-f069-4afa-ad8c-a306ae88bc4b",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "How did it work before?",
        "createdAt" : "2017-06-02T08:19:51Z",
        "updatedAt" : "2017-06-02T08:38:06Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "04c20b13-46c5-432c-a1bb-76d33db838dc",
        "parentId" : "da2d92cc-f069-4afa-ad8c-a306ae88bc4b",
        "authorId" : "f16005de-4946-4424-a20f-033d20946386",
        "body" : "This worked because during resource creation these constants were only used in a switch to go to the correct case, which then did not rely on them for choosing the proper API call. This is no longer the case, because now I use api.Kind for deletion.",
        "createdAt" : "2017-06-02T08:28:06Z",
        "updatedAt" : "2017-06-02T08:38:06Z",
        "lastEditedBy" : "f16005de-4946-4424-a20f-033d20946386",
        "tags" : [
        ]
      }
    ],
    "commit" : "5678bcf224e1a694ded4d39347fad46aa3dac58a",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +62,66 @@\nconst (\n\tKindRC         = \"ReplicationController\"\n\tKindDeployment = \"Deployment\"\n\tKindReplicaSet = \"ReplicaSet\""
  }
]