[
  {
    "id" : "e1cb2d8a-2102-4197-99bb-d88cd3769290",
    "prId" : 88924,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88924#pullrequestreview-371559139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ae798db-9d3f-4ffa-9ffb-f2f7b25014ec",
        "parentId" : null,
        "authorId" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "body" : "Ideally this struct should be imported from a file in the conformance directory to prevent a yaml structure change from breaking this. Right now this seems to be the best option since the conformance `walk.go` file is in a main package.",
        "createdAt" : "2020-03-09T20:00:05Z",
        "updatedAt" : "2020-04-01T14:49:11Z",
        "lastEditedBy" : "3f579bf7-089d-41f0-abf9-3bf5462ec695",
        "tags" : [
        ]
      },
      {
        "id" : "6aa44665-16bb-4325-9014-3f75895fd443",
        "parentId" : "8ae798db-9d3f-4ffa-9ffb-f2f7b25014ec",
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "thanks @Jefftree ",
        "createdAt" : "2020-03-09T22:01:42Z",
        "updatedAt" : "2020-04-01T14:49:11Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1c948acdc93ef72683e6398c2a25c313ff5945c",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +103,107 @@\t})\n\tif framework.TestContext.ListConformanceTests {\n\t\tvar tests []struct {\n\t\t\tTestname    string `yaml:\"testname\"`\n\t\t\tCodename    string `yaml:\"codename\"`"
  },
  {
    "id" : "089139f6-d49f-4889-93f1-f91fd909eaba",
    "prId" : 71170,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71170#pullrequestreview-176042727",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec5274d9-085a-483e-a8c3-024e52a61a5d",
        "parentId" : null,
        "authorId" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "body" : "All e2e tests now have rand seeded IIUC.",
        "createdAt" : "2018-11-17T06:10:11Z",
        "updatedAt" : "2019-05-23T23:31:15Z",
        "lastEditedBy" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca38fba0af59e1193625a18002d0bf1408c4106c",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +95,99 @@}\n\nfunc TestMain(m *testing.M) {\n\trand.Seed(time.Now().UnixNano())\n\tos.Exit(m.Run())"
  },
  {
    "id" : "db7dc218-8aca-42e6-98b3-97c05cabcfa2",
    "prId" : 71170,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/71170#pullrequestreview-189207729",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9937e4c2-25d2-488d-b263-38b385e15543",
        "parentId" : null,
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Why not just move this into `init()`? How is TestMain used?",
        "createdAt" : "2019-01-03T19:50:48Z",
        "updatedAt" : "2019-05-23T23:31:15Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "4a9c1cb0-3e37-4fdf-9b8d-227527e9c147",
        "parentId" : "9937e4c2-25d2-488d-b263-38b385e15543",
        "authorId" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "body" : "Init is executed for each package when it is imported. That means if several packages have RNG seeding in their inits, all of them will be executed. This is not necessary.\r\nAlso, init methods with side effects that span packages doesn't feel right.\r\nSee https://golang.org/pkg/testing/#hdr-Main",
        "createdAt" : "2019-01-03T22:22:58Z",
        "updatedAt" : "2019-05-23T23:31:15Z",
        "lastEditedBy" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "tags" : [
        ]
      },
      {
        "id" : "0759bbd6-f1ef-481e-bfed-843d01b9d990",
        "parentId" : "9937e4c2-25d2-488d-b263-38b385e15543",
        "authorId" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "body" : "I think `rand.Seed()` should only ever be called in `main()` and in `TestMain()` i.e. at the program's entry point.",
        "createdAt" : "2019-01-03T22:24:04Z",
        "updatedAt" : "2019-05-23T23:31:15Z",
        "lastEditedBy" : "06a18a1b-6ca5-44b8-9cdc-5bb944ae4e29",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca38fba0af59e1193625a18002d0bf1408c4106c",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +96,100 @@\nfunc TestMain(m *testing.M) {\n\trand.Seed(time.Now().UnixNano())\n\tos.Exit(m.Run())\n}"
  },
  {
    "id" : "ddd0a8bc-a1e1-48d1-a600-b2de0524ddc1",
    "prId" : 69105,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69105#pullrequestreview-217621121",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23357622-9d44-4746-a309-44f1612cb0f9",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This sort of distributed registration makes it really hard to depend on packages because of conflicts.  It also makes it impossible to avoid stripping vendor.  And it prevents visibility to any other thing that wants access.  I don't think we should use a pattern like this and instead we could use the `kubectl` or `kube-apiserver/controller-manager` method of `Options` structs with `Bind` methods.",
        "createdAt" : "2019-03-20T19:47:01Z",
        "updatedAt" : "2019-03-20T19:47:01Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "2a8185bb-4c57-479e-aede-5da14c93e943",
        "parentId" : "23357622-9d44-4746-a309-44f1612cb0f9",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "The idea was to let each test own a certain parameter namespace (like 'storage' for test/e2e/storage). One of my earlier revisions of this PR described a naming scheme that would have avoided conflicts, but during review it was pointed out that this is too complex and therefore its now only a recommendation.\r\n\r\n`UpgradeTarget` and `UpgradeImage` are legacy options that for historic reasons are defined at the top level of the namespace and weren't renamed to avoid breaking jobs. They don't belong into the core framework because they only parametrize certain tests.\r\n\r\n\r\n",
        "createdAt" : "2019-03-20T20:15:02Z",
        "updatedAt" : "2019-03-20T20:15:03Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      },
      {
        "id" : "1f79e838-4cb8-4aa5-acc2-ec80625ae182",
        "parentId" : "23357622-9d44-4746-a309-44f1612cb0f9",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This has actually made it harder to build tests on top.  Instead of having a publicly exposed config struct that I can set any way I want and then use, I must have my executable called to set these registered flags. ",
        "createdAt" : "2019-03-20T21:11:57Z",
        "updatedAt" : "2019-03-20T21:11:57Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "e30612f2-4baf-4575-b827-e6e7f69db6bc",
        "parentId" : "23357622-9d44-4746-a309-44f1612cb0f9",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "i see viper as a temporary solution here.\r\nthe work that WG component standard are doing is planned to solve the flags vs config problem, hopefully.\r\nhttps://github.com/kubernetes/community/tree/master/wg-component-standard\r\n\r\none of the early steps in flight is a KEP for a fork/wrapper of pflag (kflag):\r\nhttps://github.com/kubernetes/enhancements/pull/764\r\n",
        "createdAt" : "2019-03-20T21:21:49Z",
        "updatedAt" : "2019-03-20T21:22:59Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "3edbfc98-6156-435d-a3f0-2742ee8530b5",
        "parentId" : "23357622-9d44-4746-a309-44f1612cb0f9",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "> This has actually made it harder to build tests on top. Instead of having a publicly exposed config struct that I can set any way I want and then use,\r\n\r\nI don't understand the part about \"harder to build tests\". Previously it was impossible to build tests on top of the framework without modifying the framework. Now that part works.\r\n\r\n> I must have my executable called to set these registered flags.\r\n\r\nYes, of course the executable must be called, because it is the one parsing flags and/or configuration. Can you explain how and where you want to set the flags without involving the test suite binary?\r\n\r\nI'm not trying to defend Viper here.  I've never liked it myself (no error messages when spelling an option wrong!) and if there is a better solution, then I'm sure that would be welcome.\r\n",
        "createdAt" : "2019-03-20T21:45:39Z",
        "updatedAt" : "2019-03-20T21:45:39Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      },
      {
        "id" : "44db9d4b-99b7-4ccb-92ab-ac7a274242e3",
        "parentId" : "23357622-9d44-4746-a309-44f1612cb0f9",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "For example, I could previously choose take the configuration any way I wanted and set a value like this: https://github.com/openshift/origin/blob/master/cmd/openshift-tests/openshift-tests.go#L251 and we cannot anymore.  \r\n\r\n",
        "createdAt" : "2019-03-21T13:05:13Z",
        "updatedAt" : "2019-03-21T13:05:14Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "e3907946-2e56-4c9d-b729-029ba2d8f17c",
        "parentId" : "23357622-9d44-4746-a309-44f1612cb0f9",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "You can see a similar example for the upgrade targets here: https://github.com/openshift/origin/blob/master/cmd/openshift-tests/upgrade.go#L57-L58 .  This pull has remove the logical separation of configuration from how that configuration is specified in a way that appears to be inconsistent with the direction of the rest of the project.\r\n\r\nSee patterns like this https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiserver/pkg/server/options/authentication.go#L39 and https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/cli-runtime/pkg/genericclioptions/builder_flags.go#L106 which allow separation, flexibility, and composition.",
        "createdAt" : "2019-03-21T13:12:57Z",
        "updatedAt" : "2019-03-21T13:12:58Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "880e2b05-796a-444b-8f56-e386f7e911aa",
        "parentId" : "23357622-9d44-4746-a309-44f1612cb0f9",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "> set a value like this: https://github.com/openshift/origin/blob/master/cmd/openshift-tests/openshift-tests.go#L251\r\n\r\nThat sets the viper configuration file and then expects some code to do something with it. In 1.12, that code looked like this: https://github.com/kubernetes/kubernetes/blob/609a4b9323a752fc0e9a51d310cc836baa037a20/test/e2e/framework/test_context.go#L325-L332\r\n\r\nIn master, Viper support is no longer part of the framework itself. That's exactly the flexibility that you are talking about: instead of mandating one particular config parser, let the caller decide. To get a similar effect, you now need to do something like this: https://github.com/kubernetes/kubernetes/blob/ad4727440cc4a5be5c9714ffc0baefc11ce6c7f6/test/e2e/e2e_test.go#L59-L67\r\n\r\nSo the API has changed, but I think you can still do what you want to do.\r\n\r\n> https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiserver/pkg/server/options/authentication.go#L39\r\n\r\nThat's exactly how I would also do it. I even wrote utility code that automatically registers struct fields as individual parameters:\r\nhttps://github.com/kubernetes/kubernetes/blob/ad4727440cc4a5be5c9714ffc0baefc11ce6c7f6/test/e2e/framework/config/config.go#L17-L34\r\n",
        "createdAt" : "2019-03-21T15:10:58Z",
        "updatedAt" : "2019-03-21T15:10:58Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      },
      {
        "id" : "fccad930-87f7-4d82-b306-26a4c834991d",
        "parentId" : "23357622-9d44-4746-a309-44f1612cb0f9",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I don't think this leads to clean composition.  I cannot import the `test/e2e/lifecycle` package without it claiming global flags.  Then, because the flag is treated as an internal global variable, it's impossible to set externally and embed the included tests.\r\n\r\nThis is substantively worse than the composition described above where it possible to create the options, then set  them based on a config of the composer's choosing, then execute.",
        "createdAt" : "2019-03-21T19:08:30Z",
        "updatedAt" : "2019-03-21T19:08:45Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "e18c1143-1901-49ab-b158-c9938b519cdc",
        "parentId" : "23357622-9d44-4746-a309-44f1612cb0f9",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I don't think this leads to clean composition. I cannot import the `test/e2e/lifecycle` package without it claiming global flags. Then, because the flag is treated as an internal global variable, it's impossible to set externally and embed the included tests.\r\n\r\nturns out you're hitting the same problem with klog: https://github.com/kubernetes/kubernetes/issues/75403 .  This pull created the same problem with the tests.  They're not importable anymore",
        "createdAt" : "2019-03-21T19:35:23Z",
        "updatedAt" : "2019-03-21T19:35:23Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "a883caa0-49ed-4b88-b220-a2b42af7e302",
        "parentId" : "23357622-9d44-4746-a309-44f1612cb0f9",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : ">  I cannot import the test/e2e/lifecycle package without it claiming global flags.\r\n\r\nYou also can't import the `e2e/framework` either without it claiming global flags. That's actually worse, because one always gets the flags even when not using the corresponding tests. My proposal (\"proposal\" because not completely implemented) makes that better by only defining flags when actually importing the tests that use them.\r\n\r\nAnyway, I thought that using `flag` and its default `FlagSet` was an acceptable mode of operation. That was fine for the Kubernetes E2E suite and no-one mentioned other usages where that might not be appropriate.\r\n\r\nIt's not hard to change. Instead of allowing tests to add to the default `FlagSet`, we define a `framework/config.FlagSet` that is to be used for test config options. Then the user of the framework can decide whether it wants to expose those as actual command line options or only wants to set them indirectly through some other mechanism, like `viperconfig`.",
        "createdAt" : "2019-03-21T19:42:48Z",
        "updatedAt" : "2019-03-21T19:42:49Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      },
      {
        "id" : "9793667a-12a4-4b91-a8d9-41c49c50b423",
        "parentId" : "23357622-9d44-4746-a309-44f1612cb0f9",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> You also can't import the `e2e/framework` either without it claiming global flags. That's actually worse, because one always gets the flags even when not using the corresponding tests. My proposal (\"proposal\" because not completely implemented) makes that better by only defining flags when actually importing the tests that use them.\r\n\r\nBefore I had to explicitly call a method to register the flags (`RegisterCommonFlags` as I recall).  Now you're doing it on import.  Before I could import a package and choose how to use it, now I can't import the package.",
        "createdAt" : "2019-03-21T21:16:36Z",
        "updatedAt" : "2019-03-21T21:16:36Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "b6486de3-50f3-4c7f-9ad9-0f83a8f70d50",
        "parentId" : "23357622-9d44-4746-a309-44f1612cb0f9",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "> Before I had to explicitly call a method to register the flags (RegisterCommonFlags as I recall). Now you're doing it on import.\r\n\r\nRight, I had forgotten that aspect. So you are asking for tests to register their flags only when called explicitly, right?\r\n\r\nWhat about the Ginkgo tests? They also get registered during init, unconditionally. It's perhaps less likely that one wants to import a test package without actually using the tests, but it could happen. Someone might want to have finer control over which tests get registered, based on command line flags. We actually do have this issue right now for CSI testing: we use the Kubernetes E2E suite, but run only 28 out of 6740 tests. Loading all those JUnit files with the Skip entries is noticable slow in Spyglass.\r\n\r\nLet me see whether I can come up with a solution...\r\n\r\n",
        "createdAt" : "2019-03-22T07:45:38Z",
        "updatedAt" : "2019-03-22T07:45:39Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      }
    ],
    "commit" : "4423735dc3afa69e4a550518fdef0f010fd365ae",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +47,51 @@)\n\nvar viperConfig = flag.String(\"viper-config\", \"\", \"The name of a viper config file (https://github.com/spf13/viper#what-is-viper). All e2e command line parameters can also be configured in such a file. May contain a path and may or may not contain the file suffix. The default is to look for an optional file with `e2e` as base name. If a file is specified explicitly, it must be present.\")\n\nfunc init() {"
  },
  {
    "id" : "c256d866-e9cd-432d-956d-6a8c6642cb1b",
    "prId" : 50324,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50324#pullrequestreview-54988415",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbec8ff2-2ff8-4d44-b6d2-19997cad7d82",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Should we also explicitly import \"test/e2e/common\" just in case?",
        "createdAt" : "2017-08-08T15:59:21Z",
        "updatedAt" : "2017-08-08T16:06:37Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "32e66749-b93a-40e7-9119-45a6073a1c04",
        "parentId" : "bbec8ff2-2ff8-4d44-b6d2-19997cad7d82",
        "authorId" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "body" : "Yes, that's a good idea.",
        "createdAt" : "2017-08-08T16:04:29Z",
        "updatedAt" : "2017-08-08T16:06:37Z",
        "lastEditedBy" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "tags" : [
        ]
      },
      {
        "id" : "956cbe0a-be22-420a-9639-3bab6e0b33b7",
        "parentId" : "bbec8ff2-2ff8-4d44-b6d2-19997cad7d82",
        "authorId" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "body" : "Done",
        "createdAt" : "2017-08-08T16:06:42Z",
        "updatedAt" : "2017-08-08T16:06:42Z",
        "lastEditedBy" : "881df817-68e6-43dd-b4ea-f0b973f7dc41",
        "tags" : [
        ]
      }
    ],
    "commit" : "20f68942d39d578a3dacd72abb488e0721981fe9",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +32,36 @@\t_ \"k8s.io/kubernetes/test/e2e/lifecycle/bootstrap\"\n\t_ \"k8s.io/kubernetes/test/e2e/network\"\n\t_ \"k8s.io/kubernetes/test/e2e/node\"\n\t_ \"k8s.io/kubernetes/test/e2e/scalability\"\n\t_ \"k8s.io/kubernetes/test/e2e/scheduling\""
  },
  {
    "id" : "e9bf1fe7-365d-470e-b49f-1eb519eebc65",
    "prId" : 42968,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42968#pullrequestreview-27345594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd0848a0-e60c-4b32-bf1b-e3e3622484ed",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "@davidopp this is the key that makes it all work, it's binary smashing the scheduling tests into it.  ",
        "createdAt" : "2017-03-16T14:06:38Z",
        "updatedAt" : "2017-03-16T14:06:38Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cc40678b6988124940f76b780657bfc46e14a7a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +21,25 @@\n\t\"k8s.io/kubernetes/test/e2e/framework\"\n\t_ \"k8s.io/kubernetes/test/e2e/scheduling\"\n)\n"
  },
  {
    "id" : "5502095c-f675-430c-9cc5-ef7d496f69ff",
    "prId" : 20049,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a57b3cc-2ff9-4f96-90bd-995a96dab7ca",
        "parentId" : null,
        "authorId" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "body" : "Public function should have a comment explaining what it does.\n",
        "createdAt" : "2016-01-26T19:54:10Z",
        "updatedAt" : "2016-01-28T21:24:50Z",
        "lastEditedBy" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cc7f9d3f73a115456a222b89f58eccadf3f5e14",
    "line" : null,
    "diffHunk" : "@@ -1,1 +206,210 @@// generated in this directory, and cluster logs will also be saved.\n// This function is called on each Ginkgo node in parallel mode.\nfunc TestE2E(t *testing.T) {\n\tutil.ReallyCrash = true\n\tutil.InitLogs()"
  },
  {
    "id" : "be5867d5-e430-46d6-a97d-7c4cb9effbb1",
    "prId" : 20049,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "baa86087-4c57-4988-b644-1e4125af812b",
        "parentId" : null,
        "authorId" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "body" : "This is a wonky enough syntax and procedure that I think it deserves a comment.  What are you doing here & why?\n",
        "createdAt" : "2016-01-26T19:58:08Z",
        "updatedAt" : "2016-01-28T21:24:50Z",
        "lastEditedBy" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cc7f9d3f73a115456a222b89f58eccadf3f5e14",
    "line" : null,
    "diffHunk" : "@@ -1,1 +152,156 @@// returning an opaque byte array, and then a second function which runs on all Ginkgo nodes,\n// accepting the byte array.\nvar _ = ginkgo.SynchronizedBeforeSuite(func() []byte {\n\t// Run only on Ginkgo node 1\n"
  },
  {
    "id" : "7a2876af-00b3-4c83-9741-5dc626420acf",
    "prId" : 19142,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f37e38a-bc09-4483-bb71-1142575c0153",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Does it make sense to pass both? I think it should be enough to pass either hr or json.\n",
        "createdAt" : "2015-12-29T08:46:42Z",
        "updatedAt" : "2015-12-29T09:26:55Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "b1f05dbf-a838-41b2-986a-d2d52a316ed0",
        "parentId" : "0f37e38a-bc09-4483-bb71-1142575c0153",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "I don't think there's a harm in allowing to pass a list, but I can make it exclusive if you want. The use case I had in mind is that for Jenkins runs we probably want to have both (similarily to what we have to top latency metrics and e2e startup latnecy), but when running localy json is probably unneeded.\n",
        "createdAt" : "2015-12-29T08:50:55Z",
        "updatedAt" : "2015-12-29T09:26:55Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "1df78a239879db73d6ca831e850c289e38393a8b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +92,96 @@\tflag.BoolVar(&testContext.GatherLogsSizes, \"gather-logs-sizes\", false, \"If set to true framework will be monitoring logs sizes on all machines running e2e tests.\")\n\tflag.BoolVar(&testContext.GatherMetricsAfterTest, \"gather-metrics-at-teardown\", false, \"If set to true framwork will gather metrics from all components after each test.\")\n\tflag.StringVar(&testContext.OutputPrintType, \"output-print-type\", \"hr\", \"Comma separated list: 'hr' for human readable summaries 'json' for JSON ones.\")\n}\n"
  },
  {
    "id" : "0a7ac3b8-20d2-4966-95a2-ef66cf049ae1",
    "prId" : 8442,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "703df54b-5a19-4243-85de-d82a7717dd4d",
        "parentId" : null,
        "authorId" : null,
        "body" : "I think that we should reduce this further.  Most e2e tests succeed or fail in about a minute.\n",
        "createdAt" : "2015-05-18T22:29:57Z",
        "updatedAt" : "2015-05-19T17:53:08Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "2b289af2-260c-4395-8e52-cd134a43e9b4",
        "parentId" : "703df54b-5a19-4243-85de-d82a7717dd4d",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "Pulling all of the initial pods can easily take 10 minutes.\n",
        "createdAt" : "2015-05-18T22:53:54Z",
        "updatedAt" : "2015-05-19T17:53:08Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      },
      {
        "id" : "0072c3aa-9bf9-480b-9f2a-0306f48a7c4a",
        "parentId" : "703df54b-5a19-4243-85de-d82a7717dd4d",
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "Yeah, this check is only run once, before the e2e suite starts; also ditto what Zach said.\n",
        "createdAt" : "2015-05-18T23:45:18Z",
        "updatedAt" : "2015-05-19T17:53:08Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "1da46ca3d0bb92feb5949d4c7bf7281c8ce1125c",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +40,44 @@\t// running and ready before any e2e tests run. It includes pulling all of\n\t// the pods (as of 5/18/15 this is 8 pods).\n\tpodStartupTimeout = 10 * time.Minute\n\n\t// minStartupPods is the minimum number of pods that will allow"
  },
  {
    "id" : "529043dc-ee28-4fd2-9c37-35cb98771a0c",
    "prId" : 8442,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2905c182-00b7-4983-abce-62e65ba84b09",
        "parentId" : null,
        "authorId" : null,
        "body" : "I find this rather confusing.  We say we're waiting for all pods to be ready, but in the current configuration we only wait for any one pod to be ready.  Also, should individual tests that require specific pods to be running in order to succeed not perform their own specific checks against the states of those pods?\n\nOtherwise stated, I don't understand how ensuring that one pod is running in the default namespace is good enough to be useful to any tests on a reliable basis?\n\nI'm coming in rather late here, so it's quite possible that I'm missing some context here, in which case please accept my apologies in advance.\n",
        "createdAt" : "2015-05-18T22:42:48Z",
        "updatedAt" : "2015-05-19T17:53:08Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "bd45e893-a8e1-418f-803f-db40069587f9",
        "parentId" : "2905c182-00b7-4983-abce-62e65ba84b09",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "We're waiting for the system pods to be created, pulled and running, but for paranoia you don't want to exit the check way too early and exit when there have been 0 pods created. In practice, `minStartupPods` closes a highly theoretical race, at the expense of increasing confusion.\n",
        "createdAt" : "2015-05-18T23:02:06Z",
        "updatedAt" : "2015-05-19T17:53:08Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      },
      {
        "id" : "2ede66a4-0f29-4acb-9bb3-e11447c97cdc",
        "parentId" : "2905c182-00b7-4983-abce-62e65ba84b09",
        "authorId" : null,
        "body" : "I still don't understand.  What race does it solve?  And how can checking that 1 system pod is ready be a sufficiently reliable proxy for all system pods being ready?  This seems very prone to flakyness, unless I'm misunderstanding something here.\n",
        "createdAt" : "2015-05-18T23:12:14Z",
        "updatedAt" : "2015-05-19T17:53:08Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "8cb6c9b7-2fc6-4c9d-8ba9-be7b207125e0",
        "parentId" : "2905c182-00b7-4983-abce-62e65ba84b09",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "The comment is a little confusing, but what this function checks is that\n- there is at least one pod\n- that all pods are running and ready\n\nThe first condition catches the race in which this function runs before any pods are created; in that case, the second condition would be vacuously true.\n",
        "createdAt" : "2015-05-18T23:29:44Z",
        "updatedAt" : "2015-05-19T17:53:08Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "2711ff14-6431-41a8-9024-e5c709bdd0d9",
        "parentId" : "2905c182-00b7-4983-abce-62e65ba84b09",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "It's a proxy to ensure that we've started starting any addons. Once they're actually being created, they're actually submitted to the system super fast, but **_in theory**_ `kube-addons` may not have run yet. In practice, it's basically run immediately after the apiserver comes up.\n",
        "createdAt" : "2015-05-18T23:33:34Z",
        "updatedAt" : "2015-05-19T17:53:08Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      },
      {
        "id" : "9bfc0f18-d50b-4f19-978f-97365ca48b39",
        "parentId" : "2905c182-00b7-4983-abce-62e65ba84b09",
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "Thanks for chiming in everyone. Would you prefer I update this comment?\n",
        "createdAt" : "2015-05-18T23:47:55Z",
        "updatedAt" : "2015-05-19T17:53:08Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      },
      {
        "id" : "8c06ca32-766e-468e-a55c-c05f058e0e2a",
        "parentId" : "2905c182-00b7-4983-abce-62e65ba84b09",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "I think this comment may be fine, but the comment before minStartupPods (L44-46) is very misleading.\n",
        "createdAt" : "2015-05-19T02:31:45Z",
        "updatedAt" : "2015-05-19T17:53:08Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "0dd214f7-4502-4e03-991f-553c296c57a5",
        "parentId" : "2905c182-00b7-4983-abce-62e65ba84b09",
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "Considerably lengthened that comment (not yet pushed).\n",
        "createdAt" : "2015-05-19T17:00:04Z",
        "updatedAt" : "2015-05-19T17:53:08Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "1da46ca3d0bb92feb5949d4c7bf7281c8ce1125c",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +122,126 @@\t// test pods from running, and tests that ensure all pods are running and\n\t// ready will fail).\n\tif err := waitForPodsRunningReady(api.NamespaceDefault, minStartupPods, podStartupTimeout); err != nil {\n\t\tglog.Fatalf(\"Error waiting for all pods to be running and ready: %v\", err)\n\t}"
  },
  {
    "id" : "9991b9e7-16ea-4cce-b3c8-ce80bd251d0f",
    "prId" : 7653,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03cd43f6-6ebf-496e-bd31-6d334fbbd704",
        "parentId" : null,
        "authorId" : null,
        "body" : "This is just horrible.  Can we replace it with something better?  Lets explicitly make them Pending rather?  Besides the code being ugly, I think that this might well be breaking Jenkins understanding of whether a test run succeeded or not, in the test results analyser.\n",
        "createdAt" : "2015-05-06T17:38:46Z",
        "updatedAt" : "2015-05-15T18:57:42Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "cfb36a27-dcaa-4052-bd54-da015b7cc7ee",
        "parentId" : "03cd43f6-6ebf-496e-bd31-6d334fbbd704",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "I agree, but I think it is out of scope of this PR, which is already going to be changing and (possibly) breaking a lot of things. I'm trying to maintain existing functionality as much as possible.\n",
        "createdAt" : "2015-05-06T17:48:37Z",
        "updatedAt" : "2015-05-15T18:57:42Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "961e0791-373e-47c0-be3a-d623be301834",
        "parentId" : "03cd43f6-6ebf-496e-bd31-6d334fbbd704",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "What this really wants is a proper tagging system so we can just select/deselect the density tests as desired.\n",
        "createdAt" : "2015-05-06T17:49:12Z",
        "updatedAt" : "2015-05-15T18:57:42Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "52060e92-71bb-4901-b9d0-cdbfba6f9c93",
        "parentId" : "03cd43f6-6ebf-496e-bd31-6d334fbbd704",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "punted for now.\n",
        "createdAt" : "2015-05-14T21:16:03Z",
        "updatedAt" : "2015-05-15T18:57:43Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      }
    ],
    "commit" : "86b023fdd6386a3c2a15d6bde38868b450647c6c",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +68,72 @@\tdefer util.FlushLogs()\n\n\t// Disable density test unless it's explicitly requested.\n\tif config.GinkgoConfig.FocusString == \"\" && config.GinkgoConfig.SkipString == \"\" {\n\t\tconfig.GinkgoConfig.SkipString = \"Skipped\""
  },
  {
    "id" : "642f057b-f2d5-4705-b20d-a404da778cdd",
    "prId" : 7653,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bfb2e59-072d-4194-a795-263db69b680f",
        "parentId" : null,
        "authorId" : null,
        "body" : "Any particular reason for this?  We should at least add a comment explaining why the default 1 is inappropriate.  It's not clear to me that over-riding the default here buys us anything.\n",
        "createdAt" : "2015-05-06T17:48:55Z",
        "updatedAt" : "2015-05-15T18:57:42Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "5103c78f-f950-4ab2-aab3-5606ec6b7694",
        "parentId" : "8bfb2e59-072d-4194-a795-263db69b680f",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "It's what cmd/e2e did. I don't know if it's still necessary.\n",
        "createdAt" : "2015-05-06T17:51:03Z",
        "updatedAt" : "2015-05-15T18:57:42Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "58f1a3bb-9fa3-4cb4-b8ed-cc6fa7c08712",
        "parentId" : "8bfb2e59-072d-4194-a795-263db69b680f",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "punted for now.\n",
        "createdAt" : "2015-05-14T21:16:08Z",
        "updatedAt" : "2015-05-15T18:57:43Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      }
    ],
    "commit" : "86b023fdd6386a3c2a15d6bde38868b450647c6c",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +86,90 @@\tutil.ReallyCrash = true\n\tutil.InitLogs()\n\tgoruntime.GOMAXPROCS(goruntime.NumCPU())\n\n\t// TODO: possibly clean up or refactor this functionality."
  },
  {
    "id" : "7ab4c3f7-f32c-4429-83ab-c5f8c3ed609f",
    "prId" : 7653,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77c80b71-bc36-45fd-ba6d-e02b91dac977",
        "parentId" : null,
        "authorId" : null,
        "body" : "This doesn't make sense to me.  What is a conformance test, and why do we exit here after logging that \"some test may not be run\".  Defininitely seems to need some cleanup as per comment above.\n",
        "createdAt" : "2015-05-06T17:52:36Z",
        "updatedAt" : "2015-05-15T18:57:42Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "748525f4-5dda-43ed-bbd1-d80fe8e2e606",
        "parentId" : "77c80b71-bc36-45fd-ba6d-e02b91dac977",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "again, this is just a copy of what was in cmd/e2e/e2e.go and test/e2e/driver.go. I am very intentionally trying not to change functionality in this PR. that can come in a follow-up. \n",
        "createdAt" : "2015-05-06T17:55:10Z",
        "updatedAt" : "2015-05-15T18:57:43Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "ea6bf420-a0c1-4a9d-9c54-a8e6d96cb19b",
        "parentId" : "77c80b71-bc36-45fd-ba6d-e02b91dac977",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "punted for now.\n",
        "createdAt" : "2015-05-14T21:16:16Z",
        "updatedAt" : "2015-05-15T18:57:43Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      }
    ],
    "commit" : "86b023fdd6386a3c2a15d6bde38868b450647c6c",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +89,93 @@\n\t// TODO: possibly clean up or refactor this functionality.\n\tif testContext.Provider == \"\" {\n\t\tglog.Info(\"The --provider flag is not set.  Treating as a conformance test.  Some tests may not be run.\")\n\t\tos.Exit(1)"
  },
  {
    "id" : "73cea880-50bf-4e09-8ef8-8eac09468d70",
    "prId" : 7462,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8e044185-58a6-4b45-9771-4e7c4aefa100",
        "parentId" : null,
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "I assume after this we can actually just split density off into its own directory and stop skipping it this BS way?\n",
        "createdAt" : "2015-04-29T23:37:41Z",
        "updatedAt" : "2015-04-30T00:00:10Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      },
      {
        "id" : "b339370f-c4c4-48f3-b348-10fc29a9ce82",
        "parentId" : "8e044185-58a6-4b45-9771-4e7c4aefa100",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "Yes, we should be easily able to split off tests into their own packages and then choose which tests to run via the cmdline - we could have test/e2e/density or whatever which will include only those tests. (Would need a separate density_test.go file, in that case, so we might need to refactor some of the code here in e2e_test.go, but very feasible.)\n",
        "createdAt" : "2015-04-29T23:44:58Z",
        "updatedAt" : "2015-04-30T00:00:10Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d85494220be82623584aaa81913bfce95cb2968a",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +73,77 @@\tdefer util.FlushLogs()\n\n\t// Disable density test unless it's explicitly requested.\n\tif config.GinkgoConfig.FocusString == \"\" && config.GinkgoConfig.SkipString == \"\" {\n\t\tconfig.GinkgoConfig.SkipString = \"Skipped\""
  }
]