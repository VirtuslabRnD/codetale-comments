[
  {
    "id" : "b6bb5038-8f81-42f1-9556-06054ae1d03e",
    "prId" : 22720,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09703a04-dbab-4cdd-a28b-f69a6a2af967",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "You can also use https://github.com/kubernetes/kubernetes/blob/master/test/e2e/util.go#L2176\n",
        "createdAt" : "2016-03-08T23:21:09Z",
        "updatedAt" : "2016-03-08T23:21:09Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "5de36f16-b903-4fd8-a7e2-e5e0c5ef7a95",
        "parentId" : "09703a04-dbab-4cdd-a28b-f69a6a2af967",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "I don't want to die since this function returns an error\n",
        "createdAt" : "2016-03-08T23:22:43Z",
        "updatedAt" : "2016-03-08T23:22:43Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6c8b9b23863889cc423c6ba59081855a798c447",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +3277,3281 @@\t\t}.AsSelector()})\n\t\treturn err == nil, nil\n\t}) != nil {\n\t\treturn \"\", err\n\t}"
  },
  {
    "id" : "9c56da6a-1f76-4791-a808-cf0006b7a83d",
    "prId" : 22312,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fec23618-241f-4f24-b2bd-179a6d3b4e7b",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I'd put a space after the colon\n",
        "createdAt" : "2016-03-02T07:04:29Z",
        "updatedAt" : "2016-03-03T19:44:45Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "87a240f828eeb7bbb04cffe9330c04b106571deb",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +3369,3373 @@\t\tif len(pod.Labels[extensions.DefaultDeploymentUniqueLabelKey]) == 0 {\n\t\t\tif len(invalidPod) == 0 {\n\t\t\t\tinvalidPod = \"unexpected pods missing required pod-hash-template:\"\n\t\t\t}\n\t\t\tinvalidPod = fmt.Sprintf(\"%s %+v;\", invalidPod, pod)"
  },
  {
    "id" : "cd021479-5e50-40f3-b863-80f2d3b806d8",
    "prId" : 22312,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "499ea601-1cac-480a-9846-edc31f364cd0",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I'd put a space after the semi-colon\n",
        "createdAt" : "2016-03-02T07:04:38Z",
        "updatedAt" : "2016-03-03T19:44:45Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "83209a2b-d4b7-49b2-b30a-b398c424c02d",
        "parentId" : "499ea601-1cac-480a-9846-edc31f364cd0",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "@bgrant0607 The space is already added, since we make `invalidPod = invalidPod + \" \" + pod`. It'd look like `unexpected pods missing required pod-hash-template: <pod1>; <pod2>; <pod3>;`\n",
        "createdAt" : "2016-03-02T07:08:52Z",
        "updatedAt" : "2016-03-03T19:44:45Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "87a240f828eeb7bbb04cffe9330c04b106571deb",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +3371,3375 @@\t\t\t\tinvalidPod = \"unexpected pods missing required pod-hash-template:\"\n\t\t\t}\n\t\t\tinvalidPod = fmt.Sprintf(\"%s %+v;\", invalidPod, pod)\n\t\t}\n\t}"
  },
  {
    "id" : "b6b934d4-b9b7-4b9c-9ab2-34ecc79730a4",
    "prId" : 22202,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "839bacd0-0f2d-4cc5-bd46-79b700fd3b70",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Please unify with waitForRollbackDone:\n\n```\nfunc waitForRollbackDone(c *clientset.Clientset, deployment *extensions.Deployment) (err error) {\n    deployments := c.Extensions().Deployments(deployment.Namespace)\n    name := deployment.Name\n    return wait.Poll(10*time.Millisecond, 1*time.Minute, func() (bool, error) {\n        if deployment, err = deployments.Get(name); err != nil {\n            return false, err\n        }\n        // When deployment's RollbackTo is empty, the rollback is done.\n        if deployment.Spec.RollbackTo == nil {\n            return true, nil\n        }\n        return false, nil\n    })\n```\n",
        "createdAt" : "2016-02-29T23:01:17Z",
        "updatedAt" : "2016-03-01T00:35:14Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "10af0799-127a-4788-a941-6aa1ba658e94",
        "parentId" : "839bacd0-0f2d-4cc5-bd46-79b700fd3b70",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Done\n",
        "createdAt" : "2016-03-01T00:11:44Z",
        "updatedAt" : "2016-03-01T00:35:14Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "50d43ef65c66d3bc7b5d4b198b95dbb31ebe7f92",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +2312,2316 @@\t\t}\n\t\t// Rollback not set or is kicked off\n\t\tif deployment.Spec.RollbackTo == nil {\n\t\t\treturn true, nil\n\t\t}"
  },
  {
    "id" : "63801295-268c-472d-adde-1ce8c8272379",
    "prId" : 22202,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d54d813-7969-411f-b427-fe10a4cdc182",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "What kind of error does this produce upon timeout? Something that includes the deployment name?\n",
        "createdAt" : "2016-02-29T23:09:15Z",
        "updatedAt" : "2016-03-01T00:35:14Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "f2d99c95-db76-4e40-800e-1d97e4108d32",
        "parentId" : "2d54d813-7969-411f-b427-fe10a4cdc182",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Done\n",
        "createdAt" : "2016-03-01T00:13:18Z",
        "updatedAt" : "2016-03-01T00:35:14Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "50d43ef65c66d3bc7b5d4b198b95dbb31ebe7f92",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2353,2357 @@\t}\n\treturn nil\n}\n\nfunc waitForPodsReady(c *clientset.Clientset, ns, name string, minReadySeconds int) error {"
  },
  {
    "id" : "c0131e73-197a-4aca-a891-3dce651a4235",
    "prId" : 22057,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "273e92ad-d3ff-488e-9e7f-3f0b73765e42",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "nit: typo - \"excludes\"\n",
        "createdAt" : "2016-02-26T20:37:08Z",
        "updatedAt" : "2016-02-26T20:37:08Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      }
    ],
    "commit" : "48fefd0f53a8b1ec208e1c34b231605ed9db9efc",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2498,2502 @@}\n\n// NodeSSHHosts returns SSH-able host names for all schedulable nodes - this exludes master node.\n// It returns an error if it can't find an external IP for every node, though it still returns all\n// hosts that it found in that case."
  },
  {
    "id" : "1273794d-ea71-4cec-b0ce-74c245fe9069",
    "prId" : 22021,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adadd277-605b-4b73-83e1-2ba7ea8417af",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "This will produce a lot of spam, especially in enormous cluster running 2k system pods. I'm not against it, but only if it's really needed.\n",
        "createdAt" : "2016-02-26T08:17:29Z",
        "updatedAt" : "2016-02-26T08:19:25Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5226bb0443303f93b2bac3bc7119d4f8c13bb8a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +511,515 @@\tfor _, pod := range podList.Items {\n\t\tif res, err := podRunningReady(&pod); res && err == nil {\n\t\t\tLogf(\"Ignoring Ready pod %v/%v\", pod.Namespace, pod.Name)\n\t\t} else {\n\t\t\tfor _, container := range pod.Spec.Containers {"
  },
  {
    "id" : "31a8a477-0f8e-4efb-920a-effdb155d68c",
    "prId" : 21730,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5024b2a7-2083-47aa-9eee-ace44aee8fed",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Don't we actually need to poll till Ready? Assuming if this method didn't know about readiness before it only polled till Running, but I haven't checked.\n",
        "createdAt" : "2016-02-23T18:00:06Z",
        "updatedAt" : "2016-02-23T18:00:06Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "f7647187-b1c3-42c6-9031-c6fb5390b97a",
        "parentId" : "5024b2a7-2083-47aa-9eee-ace44aee8fed",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "One might think so, but it actually already has separate runningButNotReady and runningAndReady states that it prints out in the logs.\n",
        "createdAt" : "2016-02-23T22:52:42Z",
        "updatedAt" : "2016-02-23T22:52:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d87b47d772bc4150e0eb42cbee8317f0b9d69bc",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +1619,1623 @@\t\t\t\t\t\t\tCommand:        config.Command,\n\t\t\t\t\t\t\tPorts:          []api.ContainerPort{{ContainerPort: 80}},\n\t\t\t\t\t\t\tReadinessProbe: config.ReadinessProbe,\n\t\t\t\t\t\t},\n\t\t\t\t\t},"
  },
  {
    "id" : "9a969c3e-f2eb-489d-958c-1a5b992c6c4e",
    "prId" : 21726,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "226e9588-2f71-47ba-8d25-337e69fd3248",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Did you test this by hand, such as by inserting a sleep to induce a timeout?\n",
        "createdAt" : "2016-02-23T03:07:26Z",
        "updatedAt" : "2016-02-23T03:07:26Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4369a21969e86620a2a090015fe1224f6f48995c",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +2149,2153 @@\n\tif err == wait.ErrWaitTimeout {\n\t\tlogReplicaSetsOfDeployment(deployment, oldRSs, newRS)\n\t\tlogPodsOfReplicaSets(c, allRSs, minReadySeconds)\n\t}"
  },
  {
    "id" : "0c22f2e4-99c1-4523-a08a-f360e31eb782",
    "prId" : 21598,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e85ef7c-60b1-4c5f-ad98-67b45d81aa79",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "How hard would it be to do that on every/any failure?\n",
        "createdAt" : "2016-02-19T23:48:31Z",
        "updatedAt" : "2016-02-19T23:58:56Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "4ec142ef-9797-431e-8b1c-79d06bd191aa",
        "parentId" : "5e85ef7c-60b1-4c5f-ad98-67b45d81aa79",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "At least please also add this in the totalCreated > maxCreated case.\n",
        "createdAt" : "2016-02-19T23:49:42Z",
        "updatedAt" : "2016-02-19T23:58:56Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "520dfe21-d235-4c5a-98d4-6db9a99c3637",
        "parentId" : "5e85ef7c-60b1-4c5f-ad98-67b45d81aa79",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "It's easy to add that test. Just didn't want to spread too many logs everywhere. Will log pods with RSs then. \n",
        "createdAt" : "2016-02-19T23:51:39Z",
        "updatedAt" : "2016-02-19T23:58:56Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "c6e8d7be-9bbc-491a-9ef4-6a541e19997b",
        "parentId" : "5e85ef7c-60b1-4c5f-ad98-67b45d81aa79",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Done\n",
        "createdAt" : "2016-02-20T00:00:21Z",
        "updatedAt" : "2016-02-20T00:00:21Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "b267ede42cad2d514caeee7fd49d6ce35c143f7d",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +2130,2134 @@\t\tif totalAvailable < minAvailable {\n\t\t\tlogReplicaSetsOfDeployment(deploymentName, oldRSs, newRS)\n\t\t\tlogPodsOfReplicaSets(c, allRSs, minReadySeconds)\n\t\t\treturn false, fmt.Errorf(\"total pods available: %d, less than the min required: %d\", totalAvailable, minAvailable)\n\t\t}"
  },
  {
    "id" : "c92fdbdb-096d-4347-a626-4c633376602b",
    "prId" : 21474,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbd79d2e-2c46-45b1-b530-7ccb4ea90fc2",
        "parentId" : null,
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "This seems a huge improvement for parallel tests over what we had before...\n",
        "createdAt" : "2016-02-18T21:53:26Z",
        "updatedAt" : "2016-02-25T00:59:52Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      },
      {
        "id" : "4a6f6007-1d9c-420b-9ee1-47686d13661c",
        "parentId" : "fbd79d2e-2c46-45b1-b530-7ccb4ea90fc2",
        "authorId" : null,
        "body" : "Why thank you :-)\n",
        "createdAt" : "2016-02-25T00:07:26Z",
        "updatedAt" : "2016-02-25T00:59:52Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "a9fd20714036dc754cd6ab443f2523fc36b0e35d",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +1857,1861 @@\t}\n\tif waitForRunning {\n\t\tlabel := labels.SelectorFromSet(labels.Set(map[string]string{\"startPodsID\": startPodsID}))\n\t\terr := waitForPodsWithLabelRunning(c, namespace, label)\n\t\texpectNoError(err, \"Error waiting for %d pods to be running - probably a timeout\", replicas)"
  },
  {
    "id" : "c7fa2719-20bc-44e3-9225-91bbbdd4ceea",
    "prId" : 21474,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81b45316-75e1-4b38-b768-c81b39b777eb",
        "parentId" : null,
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "I'm a little confused about the timeout here .... so we poll for 20 seconds max, but the inner poll function has a 10 minute timeout?\n",
        "createdAt" : "2016-02-18T21:58:26Z",
        "updatedAt" : "2016-02-25T00:59:52Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      },
      {
        "id" : "8e6779ae-006c-4107-9856-dbcdc5cf74ee",
        "parentId" : "81b45316-75e1-4b38-b768-c81b39b777eb",
        "authorId" : null,
        "body" : "Agreed - that's messed up.  Let me fix that now, and then I think we're ready for LGTM.\n",
        "createdAt" : "2016-02-25T00:27:20Z",
        "updatedAt" : "2016-02-25T00:59:52Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "d7332e09-8ee4-4065-a652-eab3b4d565b5",
        "parentId" : "81b45316-75e1-4b38-b768-c81b39b777eb",
        "authorId" : null,
        "body" : "The 10 minute timeout comment was rubbish - I fixed that.  The actual value is currently 1 minute. And I made podScheduledBeforeTimeout be podListTimout plus a scheduling delay.\n",
        "createdAt" : "2016-02-25T01:05:33Z",
        "updatedAt" : "2016-02-25T01:05:33Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "a9fd20714036dc754cd6ab443f2523fc36b0e35d",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +2076,2080 @@\terr = wait.PollImmediate(poll, podScheduledBeforeTimeout,\n\t\tfunc() (bool, error) {\n\t\t\tpods, err = waitForPodsWithLabel(c, ns, label)\n\t\t\tif err != nil {\n\t\t\t\treturn false, err"
  },
  {
    "id" : "58b9bddc-699a-4e5a-92c7-376f7916de3d",
    "prId" : 21307,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "daec5fd2-6727-4a47-89e5-7bf2c9feaf1a",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "`gke` should not have been in this list.\n",
        "createdAt" : "2016-03-02T00:54:07Z",
        "updatedAt" : "2016-03-02T00:54:07Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "fccc11de-5ab3-4244-a617-471832ab9f01",
        "parentId" : "daec5fd2-6727-4a47-89e5-7bf2c9feaf1a",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "So why it is with \"providerswithSSH\"? Previously we were using it also to access master.\n",
        "createdAt" : "2016-03-02T07:32:05Z",
        "updatedAt" : "2016-03-02T07:32:05Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "58b6eb7b-9714-472c-bfc4-f3f535450e2f",
        "parentId" : "daec5fd2-6727-4a47-89e5-7bf2c9feaf1a",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "it previously didn't differentiate between nodes and masters, but it probably should have. ssh to GKE masters has always been disallowed.\n",
        "createdAt" : "2016-03-03T18:02:58Z",
        "updatedAt" : "2016-03-03T18:02:58Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      }
    ],
    "commit" : "3509f80bf91e35fce354b692efd50a3f35a67bf1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +316,320 @@\n// providersWithMasterSSH are those providers where master node is accessible with SSH\nvar providersWithMasterSSH = []string{\"gce\", \"gke\", \"kubemark\", \"aws\"}\n\ntype podCondition func(pod *api.Pod) (bool, error)"
  },
  {
    "id" : "eb608be7-c0a5-4981-845a-a3ce0247a656",
    "prId" : 21152,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "530a0e08-0d0c-421e-9cf9-03aadfefd421",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "The reason why e2e never caught this\n",
        "createdAt" : "2016-02-12T17:50:51Z",
        "updatedAt" : "2016-02-12T18:14:24Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9839d0677b3b4d058d230f325c5f9304e55709f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +2118,2122 @@\t\t\treturn false, err\n\t\t}\n\t\t_, oldRSs, err := deploymentutil.GetOldReplicaSets(*deployment, c)\n\t\tif err != nil {\n\t\t\treturn false, err"
  },
  {
    "id" : "cb7e5828-bf2a-44a5-919b-555c590019d5",
    "prId" : 20833,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8178d173-264d-4b96-a1e9-818146488234",
        "parentId" : null,
        "authorId" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "body" : "could this be `api.DefaultSchedulerName` instead?\n",
        "createdAt" : "2016-02-08T22:17:01Z",
        "updatedAt" : "2016-02-17T21:14:39Z",
        "lastEditedBy" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "tags" : [
        ]
      },
      {
        "id" : "95059fb4-23dc-4db8-a136-f5fee3b7a2e6",
        "parentId" : "8178d173-264d-4b96-a1e9-818146488234",
        "authorId" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "body" : "`api.DefaultSchedulerName` doesn't exist in v1.1.\n",
        "createdAt" : "2016-02-08T22:27:51Z",
        "updatedAt" : "2016-02-17T21:14:39Z",
        "lastEditedBy" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "tags" : [
        ]
      },
      {
        "id" : "891c296d-913d-4280-a8d3-a9b36cbc3cf9",
        "parentId" : "8178d173-264d-4b96-a1e9-818146488234",
        "authorId" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "body" : "Also that's a diff from #20740, not really the core of this PR.\n",
        "createdAt" : "2016-02-08T22:28:37Z",
        "updatedAt" : "2016-02-17T21:14:39Z",
        "lastEditedBy" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "tags" : [
        ]
      },
      {
        "id" : "ea4dfac4-3f57-4725-aa93-092a3a2d62dc",
        "parentId" : "8178d173-264d-4b96-a1e9-818146488234",
        "authorId" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "body" : "make sense\n",
        "createdAt" : "2016-02-08T22:52:51Z",
        "updatedAt" : "2016-02-17T21:14:39Z",
        "lastEditedBy" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "d7a94ec3663e9af6638a13b1975dd342362e7130",
    "line" : null,
    "diffHunk" : "@@ -1,1 +907,911 @@\tserverVersionGTEMultiSchedulerVersion, err := serverVersionGTE(multiSchedulerVersion, c)\n\tif err == nil && serverVersionGTEMultiSchedulerVersion {\n\t\treturn \"default-scheduler\"\n\t}\n\treturn \"scheduler\""
  },
  {
    "id" : "fe7a045d-b9da-43d0-9ab1-444e8d952880",
    "prId" : 20808,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4aa5ba4d-969e-4ec7-a5d2-8a9a3c304663",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "are you intentionally exposing this?\n\nI'd really like to get rid of this function and fold it into `framework.CreateNamespace`.\n",
        "createdAt" : "2016-02-24T06:14:45Z",
        "updatedAt" : "2016-02-24T06:14:45Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "90798c8a-2b70-455d-a062-5ab86f72cf4a",
        "parentId" : "4aa5ba4d-969e-4ec7-a5d2-8a9a3c304663",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Yes, I was planning to use it inside OpenShift. I don't mind though if you plan to move it. In the worst case I'll duplicate it inside our codebase.\n",
        "createdAt" : "2016-02-24T12:15:06Z",
        "updatedAt" : "2016-02-24T12:15:06Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "8deebcc3-d5b8-4744-a08b-e5532722bccc",
        "parentId" : "4aa5ba4d-969e-4ec7-a5d2-8a9a3c304663",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "This is so innocuous that we can pull the trigger now, and is we need to revisit we can at a later date.  \n",
        "createdAt" : "2016-02-24T17:04:27Z",
        "updatedAt" : "2016-02-24T17:04:27Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "f39711c6-d117-482d-a13a-7349cd482358",
        "parentId" : "4aa5ba4d-969e-4ec7-a5d2-8a9a3c304663",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "well, what I've been wondering is whether we should always call `util.createTestingNS` from `framework.CreateNamespace`, but if the `testContext` ns func is set, call that first?\n\nit makes it a little clearer why you'd set the `testContext` one in the first place, I think.\n",
        "createdAt" : "2016-02-24T21:01:46Z",
        "updatedAt" : "2016-02-24T21:01:46Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f61f62ec2bd2c92b01e05d23a198139208168c7",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +661,665 @@// CreateTestingNS should be used by every test, note that we append a common prefix to the provided test name.\n// Please see NewFramework instead of using this directly.\nfunc CreateTestingNS(baseName string, c *client.Client, labels map[string]string) (*api.Namespace, error) {\n\tif labels == nil {\n\t\tlabels = map[string]string{}"
  },
  {
    "id" : "acaf1fc8-4b5f-4a9c-9617-1a533ccea0d5",
    "prId" : 20808,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8565cc73-5f9f-4ee0-b96f-374c4e3fb1f0",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "comment should probably specify that there's a default function if this isn't set\n",
        "createdAt" : "2016-02-24T22:39:44Z",
        "updatedAt" : "2016-02-24T22:39:44Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f61f62ec2bd2c92b01e05d23a198139208168c7",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +183,187 @@\t// CreateTestingNS is responsible for creating namespace used for executing e2e tests.\n\t// It accepts namespace base name, which will be prepended with e2e prefix, kube client\n\t// and labels to be applied to a namespace.\n\tCreateTestingNS CreateTestingNSFn\n}"
  },
  {
    "id" : "28c2b4e3-5677-414a-89ec-964ab12b3289",
    "prId" : 20740,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49adf345-a0dd-4f53-a53a-0bd015f8c684",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "const?\n",
        "createdAt" : "2016-02-05T23:53:45Z",
        "updatedAt" : "2016-02-08T17:06:45Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "04ae64da-f32a-4d1c-98ea-554fa795e230",
        "parentId" : "49adf345-a0dd-4f53-a53a-0bd015f8c684",
        "authorId" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "body" : "You can't assign a `const` a function call.\n",
        "createdAt" : "2016-02-08T17:04:01Z",
        "updatedAt" : "2016-02-08T17:06:45Z",
        "lastEditedBy" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "tags" : [
        ]
      }
    ],
    "commit" : "0511f52f2f2db74347f4fe2ebc5ac098c04a1e99",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +902,906 @@// \"default-scheduler\", breaking forward-compatibility with tests that rely on\n// finding events from the default scheduler.\nvar multiSchedulerVersion = version.MustParse(\"v1.2.0-alpha.6\")\n\nfunc getSchedulerName(c client.VersionInterface) string {"
  },
  {
    "id" : "83aac979-e6fe-4e69-b165-ab89400ef990",
    "prId" : 20595,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "321fcf9f-e147-424b-99a7-70ad8532fd33",
        "parentId" : null,
        "authorId" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "body" : "Can we gate this on serverVersion instead?  See:\n\nhttps://github.com/kubernetes/kubernetes/commit/a5d895ac49d5047f350f991de65076999b7e9d8f#diff-8349006db2c242fd7424e1dfb3295840R959\n",
        "createdAt" : "2016-02-03T22:57:44Z",
        "updatedAt" : "2016-02-03T22:57:44Z",
        "lastEditedBy" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fd63174e922dadbb6c8b17f729fd34b5cbed351",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +2043,2047 @@\t\treturn fmt.Errorf(\"unsupported provider: %s\", testContext.Provider)\n\t}\n\terr1 := restartKubeProxyByInitD(host)\n\tif err1 == nil {\n\t\treturn nil"
  },
  {
    "id" : "7c49b6be-d4be-4838-8fe8-32e816f97844",
    "prId" : 20458,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "232ac4d0-cdc3-44a5-99f8-cefdee0c7962",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "add a word of caution around using dns names?\n",
        "createdAt" : "2016-02-02T00:40:37Z",
        "updatedAt" : "2016-02-19T00:30:50Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7823d615e842f194c3bfb9e8097583b758109df5",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +2958,2962 @@// }\n//\nfunc blockNetwork(from string, to string) {\n\tLogf(\"block network traffic from %s to %s\", from, to)\n\tiptablesRule := fmt.Sprintf(\"OUTPUT --destination %s --jump REJECT\", to)"
  },
  {
    "id" : "9b00be8e-17ee-4109-92c4-82e3996b4030",
    "prId" : 20458,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2483b45c-3611-457f-b428-b0d0067d6a6f",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "nit: probably 100% of the people who use this are going to poll till node NotReady right after, and then poll till NodeReady after recovery, so maybe encapsulate that too?\n",
        "createdAt" : "2016-02-02T00:43:00Z",
        "updatedAt" : "2016-02-19T00:30:50Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7823d615e842f194c3bfb9e8097583b758109df5",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +2962,2966 @@\tiptablesRule := fmt.Sprintf(\"OUTPUT --destination %s --jump REJECT\", to)\n\tdropCmd := fmt.Sprintf(\"sudo iptables --insert %s\", iptablesRule)\n\tif result, err := SSH(dropCmd, from, testContext.Provider); result.Code != 0 || err != nil {\n\t\tLogSSHResult(result)\n\t\tFailf(\"Unexpected error: %v\", err)"
  },
  {
    "id" : "8a04b63b-10dc-484d-bfdd-01e2f1c5d331",
    "prId" : 20098,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4b248d0-e5dd-490e-be48-fba4a5240dab",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "nit: this should arguably have a docstring\n",
        "createdAt" : "2016-01-30T00:50:59Z",
        "updatedAt" : "2016-02-01T23:35:07Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2aa5dc317b91f4837f4dc0482cbe3d33d774394b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +2794,2798 @@// EnsureLoadBalancerResourcesDeleted ensures that cloud load balancer resources that were created\n// are actually cleaned up.  Currently only implemented for GCE/GKE.\nfunc EnsureLoadBalancerResourcesDeleted(ip, portRange string) error {\n\tif testContext.Provider == \"gce\" || testContext.Provider == \"gke\" {\n\t\treturn ensureGCELoadBalancerResourcesDeleted(ip, portRange)"
  },
  {
    "id" : "1ec47736-a081-4aac-b5c3-f1ca3ebdd5c8",
    "prId" : 19194,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6407e733-610b-4820-9fb8-03a45c2bdc68",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Can you please Log all the information if the node status is different than expected (when you return false)?\n",
        "createdAt" : "2015-12-30T08:42:03Z",
        "updatedAt" : "2015-12-30T10:01:13Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "d9ad24c1-8844-4134-aaac-8ba567e54b0f",
        "parentId" : "6407e733-610b-4820-9fb8-03a45c2bdc68",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "It actually is - there are retries. But you're right, I probably can do it here as well.\n",
        "createdAt" : "2015-12-30T08:45:46Z",
        "updatedAt" : "2015-12-30T10:01:13Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "48a0e5ac-12ce-4a12-ab09-2561220a1bc2",
        "parentId" : "6407e733-610b-4820-9fb8-03a45c2bdc68",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Done. @wojtek-t PTAL\n",
        "createdAt" : "2015-12-30T08:51:01Z",
        "updatedAt" : "2015-12-30T10:01:13Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd3dcabf72d9e0c55ee5cb4fdec65e39ce183392",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +2267,2271 @@func isNodeConditionSetAsExpected(node *api.Node, conditionType api.NodeConditionType, wantTrue bool) bool {\n\t// Check the node readiness condition (logging all).\n\tfor _, cond := range node.Status.Conditions {\n\t\t// Ensure that the condition type and the status matches as desired.\n\t\tif cond.Type == conditionType {"
  },
  {
    "id" : "97911134-e56a-4d3f-9cb6-0c174e296e77",
    "prId" : 18773,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f86fd9e-d8a7-4619-9786-787efc7d8bce",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "@caesarxuchao regarding people who need server version :)\n",
        "createdAt" : "2015-12-16T19:51:43Z",
        "updatedAt" : "2015-12-16T19:51:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5d895ac49d5047f350f991de65076999b7e9d8f",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +962,966 @@// TODO(18726): This should be incorporated into client.VersionInterface.\nfunc serverVersionGTE(v semver.Version, c client.VersionInterface) (bool, error) {\n\tserverVersion, err := c.ServerVersion()\n\tif err != nil {\n\t\treturn false, fmt.Errorf(\"Unable to get server version: %v\", err)"
  },
  {
    "id" : "d501f13e-2040-4a70-9302-a291ecb03917",
    "prId" : 17939,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2e34a6d-fe27-4129-abf8-c22e345c46e0",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "10 minutes might be an overkill, but better safe than sorry.\n",
        "createdAt" : "2015-11-30T13:47:54Z",
        "updatedAt" : "2015-11-30T13:55:32Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "0773eb034cbf0097eb6de6d4cd9b62cd41f69f02",
    "line" : null,
    "diffHunk" : "@@ -1,1 +772,776 @@\t// Additionally, there can be non-zero grace period, so we are setting 10 minutes\n\t// to be on the safe size.\n\treturn waitForPodToDisappear(c, ns, podName, label, 20*time.Second, 10*time.Minute)\n}\n"
  },
  {
    "id" : "41442cf3-c82f-4f38-818b-a792fc2cd91e",
    "prId" : 17392,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a28f570-bbfb-4a10-909b-dc053cfbda53",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "might be worth adding a short docstring\n",
        "createdAt" : "2015-11-17T23:11:03Z",
        "updatedAt" : "2015-11-18T17:58:07Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e95cf1d109c1473489d80ae5d3d548d0a7d7e04d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +412,416 @@// Filter is by simple strings.Contains; first skip filter, then delete filter.\n// Returns the list of deleted namespaces or an error.\nfunc deleteNamespaces(c *client.Client, deleteFilter, skipFilter []string) ([]string, error) {\n\tBy(\"Deleting namespaces\")\n\tnsList, err := c.Namespaces().List(labels.Everything(), fields.Everything())"
  },
  {
    "id" : "bcbd7213-daf5-40f0-9809-1b3095fbfc2b",
    "prId" : 17392,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06357bec-73d9-4787-a182-4e53bc99deaa",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "looking at this again, I think this logic is wrong.\n\nsuppose deleteFilter is `[\"a\", \"b\"]`, and the list of namespaces is `[\"b\"]`. this will incorrectly skip deleting `[\"b\"]`, since it only looks at the first element of `deleteFilter`.\n\nprobably this `continue` should be outside of the inner loop?\n",
        "createdAt" : "2015-11-18T00:40:19Z",
        "updatedAt" : "2015-11-18T17:58:07Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "7aa352fb-822c-42aa-9f69-7c87f81375fd",
        "parentId" : "06357bec-73d9-4787-a182-4e53bc99deaa",
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "Good catch, thanks. Fixed logic.\n",
        "createdAt" : "2015-11-18T00:46:29Z",
        "updatedAt" : "2015-11-18T17:58:07Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      }
    ],
    "commit" : "e95cf1d109c1473489d80ae5d3d548d0a7d7e04d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +436,440 @@\t\t\t}\n\t\t\tif !shouldDelete {\n\t\t\t\tcontinue OUTER\n\t\t\t}\n\t\t}"
  },
  {
    "id" : "f707790d-e21a-4f20-bbc8-007e2c474343",
    "prId" : 16814,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9401807b-73c2-4f98-8d23-85ef637ed802",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "maybe return after this too?\n",
        "createdAt" : "2015-11-11T19:11:41Z",
        "updatedAt" : "2015-11-12T06:07:49Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "0cfc2e17-e2dc-436a-b924-487be1670d7b",
        "parentId" : "9401807b-73c2-4f98-8d23-85ef637ed802",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "or maybe not. but does `List()` return [] or nil on error?\n",
        "createdAt" : "2015-11-11T19:13:10Z",
        "updatedAt" : "2015-11-12T06:07:49Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "dc31f24d-1762-49d8-ac93-b803e92d2d69",
        "parentId" : "9401807b-73c2-4f98-8d23-85ef637ed802",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "I agree with the original comment.  return added.\n",
        "createdAt" : "2015-11-12T06:07:57Z",
        "updatedAt" : "2015-11-12T06:07:57Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "b76fef7d48b34f9f1994c9eb8ac8fdedf5d55197",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1481,1485 @@\tnodes, err := c.Nodes().List(labels.Everything(), fields.Everything())\n\tif err != nil {\n\t\tLogf(\"unable to fetch node list: %v\", err)\n\t\treturn\n\t}"
  },
  {
    "id" : "ef8717fe-633e-489e-a43f-3b7a386a9d98",
    "prId" : 16048,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1413fec5-5e88-4296-b400-672b230d48eb",
        "parentId" : null,
        "authorId" : null,
        "body" : "I don't like that we're returning strings here.  Can we return something more strongly typed please?\n",
        "createdAt" : "2015-10-30T20:13:56Z",
        "updatedAt" : "2015-11-02T22:05:45Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "2f9f99a6-ba6a-41aa-9be1-eb60df25160b",
        "parentId" : "1413fec5-5e88-4296-b400-672b230d48eb",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "It's actually just returning whatever the loadbalancer status has, which is a string because it could either be an IP or hostname and there's no type that captures both properly https://github.com/kubernetes/kubernetes/blob/master/pkg/api/types.go#L1237\n",
        "createdAt" : "2015-10-31T00:07:40Z",
        "updatedAt" : "2015-11-02T22:05:45Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "308977dc-36b9-4524-92dd-556aca22aa02",
        "parentId" : "1413fec5-5e88-4296-b400-672b230d48eb",
        "authorId" : null,
        "body" : "I'd prefer even a relatively dumb wrapper, along the lines you mention.  Anything other than a vanilla string would be an improvement.\n",
        "createdAt" : "2015-11-02T20:18:23Z",
        "updatedAt" : "2015-11-02T22:05:45Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "a801dae5-32cd-4c38-abad-1c08119840f2",
        "parentId" : "1413fec5-5e88-4296-b400-672b230d48eb",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Hmm Why? a list of strings is simple no? IMO a type is useful if it adds value, either in the form of validation or type checking. Cloaking a string in a type isn't much of an improvement? \n",
        "createdAt" : "2015-11-02T21:59:32Z",
        "updatedAt" : "2015-11-02T22:05:45Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "3943c5afe202609356cd5dea0ca1ed768ee8ac00",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +2145,2149 @@\n// getIngressAddress returns the ips/hostnames associated with the Ingress.\nfunc getIngressAddress(client *client.Client, ns, name string) ([]string, error) {\n\ting, err := client.Extensions().Ingress(ns).Get(name)\n\tif err != nil {"
  },
  {
    "id" : "4ed7dbb2-40ae-4a5a-bdfd-81bf666d4ae9",
    "prId" : 16048,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f13eb0bb-f35b-4a3f-84b8-7e8c8ed5e4c1",
        "parentId" : null,
        "authorId" : null,
        "body" : "Good to note what it's return values are.  And not have them be a string :-)\n",
        "createdAt" : "2015-10-30T20:15:18Z",
        "updatedAt" : "2015-11-02T22:05:45Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "7e069cec-ccb0-48b4-80c6-6e2d032d4a7a",
        "parentId" : "f13eb0bb-f35b-4a3f-84b8-7e8c8ed5e4c1",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Yeah unless you want me to invent some adhoc type for this i think we're stuck with the string in the api object because of the reason mentioned above\n",
        "createdAt" : "2015-10-31T00:11:51Z",
        "updatedAt" : "2015-11-02T22:05:45Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "b8a12d63-c56e-448e-8fbe-03f482fe5d66",
        "parentId" : "f13eb0bb-f35b-4a3f-84b8-7e8c8ed5e4c1",
        "authorId" : null,
        "body" : "My point was that the return value of this function needs a name, and/or a non-string type.\n",
        "createdAt" : "2015-11-02T20:20:29Z",
        "updatedAt" : "2015-11-02T22:05:45Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "d0ac0ba7-f1ed-4025-8a4f-03424a2a69b8",
        "parentId" : "f13eb0bb-f35b-4a3f-84b8-7e8c8ed5e4c1",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Not sure i understand, can you suggest something concrete? I'm pulling out strings from the apitype, i feel like this is not what you're asking for:\n\n```\ntype addressStruct struct {\n    addresses []string\n}\n```\n\nbut that's what it sounds like you're asking for :)\n",
        "createdAt" : "2015-11-02T20:33:24Z",
        "updatedAt" : "2015-11-02T22:05:45Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "2684e08f-972f-43f3-b254-edc691248d3f",
        "parentId" : "f13eb0bb-f35b-4a3f-84b8-7e8c8ed5e4c1",
        "authorId" : null,
        "body" : "Someone reading the function header would have no idea what the string return value would contain, unless they read through the code.\n\nWhat I was suggesting is one of the following instead, approximately, in increasing order of my preference:\n\n```\nfunc waitForIngressAddress(c *client.Client, ns, ingName string, timeout time.Duration) (address string, error)\n```\n\n```\ntype address string\n...\nfunc waitForIngressAddress(c *client.Client, ns, ingName string, timeout time.Duration) (address, error)\n```\n",
        "createdAt" : "2015-11-02T22:35:23Z",
        "updatedAt" : "2015-11-02T22:35:23Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "3943c5afe202609356cd5dea0ca1ed768ee8ac00",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +2162,2166 @@}\n\n// waitForIngressAddress waits for the Ingress to acquire an address.\nfunc waitForIngressAddress(c *client.Client, ns, ingName string, timeout time.Duration) (string, error) {\n\tvar address string"
  },
  {
    "id" : "8a1ef629-b2c4-497f-ab97-0999ddbbd60f",
    "prId" : 14984,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0260f26-bbf0-4b47-a38d-6db2ef7e9b11",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "you never check whether an error occurred or not. so if the endpoint fails to startup, the error is lost and you continue anyway.\n\n(also nit: misspelled \"endpoint\")\n",
        "createdAt" : "2015-10-06T00:16:31Z",
        "updatedAt" : "2015-10-06T00:16:31Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d5c40479f1c528c15f208db40d56fed61cfccf8a",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +727,731 @@\t\t}\n\t}\n\treturn fmt.Errorf(\"Failed to get entpoints for %s/%s\", ns, name)\n}\n"
  },
  {
    "id" : "905b2455-31d8-4336-b97e-918e8e86e895",
    "prId" : 13885,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04593abd-e2f3-4671-b1b2-f34f02d1be1e",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "You can use `netutil.CanonicalAddr` for this\n",
        "createdAt" : "2015-09-22T15:48:29Z",
        "updatedAt" : "2015-10-09T18:31:43Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "4e83c03a-2f7c-4632-a71c-4311404b83a5",
        "parentId" : "04593abd-e2f3-4671-b1b2-f34f02d1be1e",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It doesn't support WSS\n",
        "createdAt" : "2015-09-23T20:47:47Z",
        "updatedAt" : "2015-10-09T18:31:43Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "cfad176e-1b2a-4af2-a5be-bbc66a6fee8e",
        "parentId" : "04593abd-e2f3-4671-b1b2-f34f02d1be1e",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Ah, gotcha\n",
        "createdAt" : "2015-09-24T13:05:42Z",
        "updatedAt" : "2015-10-09T18:31:43Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "9136d49dc9090142b7ad2838af91703666713d76",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +2058,2062 @@\tif tlsConfig != nil {\n\t\turl.Scheme = \"wss\"\n\t\tif !strings.Contains(url.Host, \":\") {\n\t\t\turl.Host += \":443\"\n\t\t}"
  },
  {
    "id" : "346a590d-a2aa-40c8-8a49-c29e38e70545",
    "prId" : 12408,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "573fff83-b4b2-41f4-9b4b-051fad696f49",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "if the poll times out, and thus some pods aren't deleted, the fact that it timed out won't be reported, which may be misleading when debugging failures. it'd probably be good to include this error + report any nondeleted pods? or maybe the timeout should take precedence?\n",
        "createdAt" : "2015-08-10T20:57:05Z",
        "updatedAt" : "2015-08-10T23:02:23Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "df5e1556-4aa1-4740-9337-d83da9ad5417",
        "parentId" : "573fff83-b4b2-41f4-9b4b-051fad696f49",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Err isn't shadowed - the poll error would be returned.\n",
        "createdAt" : "2015-08-10T21:18:06Z",
        "updatedAt" : "2015-08-10T23:02:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "02e0a0d1-1be6-4208-ac6c-cdec77ae36f9",
        "parentId" : "573fff83-b4b2-41f4-9b4b-051fad696f49",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Corrected the message so that it indicates it's a poll duration thing.\n",
        "createdAt" : "2015-08-10T21:41:14Z",
        "updatedAt" : "2015-08-10T23:02:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "e623d33343566abba9196652f3873488e20ee10d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +542,546 @@\n\t// a timeout occured\n\tif err != nil {\n\t\tif missingTimestamp {\n\t\t\treturn fmt.Errorf(\"namespace %s was not deleted within limit: %v, some pods were not marked with a deletion timestamp, pods remaining: %v\", namespace, err, remaining)"
  },
  {
    "id" : "0ea467a9-8edb-4a59-8f88-e67db4edd7c2",
    "prId" : 11056,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e908ae5-a99f-4f03-886e-73f350bea80c",
        "parentId" : null,
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "This won't work on GKE.\n",
        "createdAt" : "2015-07-23T13:10:50Z",
        "updatedAt" : "2015-07-23T14:16:59Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      },
      {
        "id" : "e952c2ac-ab58-4f94-ab02-fcb6adb44701",
        "parentId" : "0e908ae5-a99f-4f03-886e-73f350bea80c",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "How can I fix it?\n",
        "createdAt" : "2015-07-23T13:12:23Z",
        "updatedAt" : "2015-07-23T14:16:59Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "6720d6e1-c46f-46e7-8bd2-a7cda34e6f1a",
        "parentId" : "0e908ae5-a99f-4f03-886e-73f350bea80c",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "`getMasterHost()` is a bad pattern that snuck in with the `etcd_failure.go` test, and unfortunately, everything that uses it has to to be excluded from GKE. You'll note that `addon_update.go` and `etcd_failure.go` skip GKE as well.\n",
        "createdAt" : "2015-07-23T13:14:33Z",
        "updatedAt" : "2015-07-23T14:16:59Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      },
      {
        "id" : "5e7cec74-e95c-4a5d-9199-576aac6cae2c",
        "parentId" : "0e908ae5-a99f-4f03-886e-73f350bea80c",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "Just exclude it for now and we'll figure it out later.\n",
        "createdAt" : "2015-07-23T13:16:08Z",
        "updatedAt" : "2015-07-23T14:16:59Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      },
      {
        "id" : "49f7f414-39e7-4149-8a96-10b457b0dfc0",
        "parentId" : "0e908ae5-a99f-4f03-886e-73f350bea80c",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Thanks for info - I didn't know that (in fact I copied it from there).\n\nI added a skip for GKE and dropped a TODO to fix that.\n",
        "createdAt" : "2015-07-23T13:19:23Z",
        "updatedAt" : "2015-07-23T14:16:59Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "a6142aac-0404-4bb5-bed4-693e843dad80",
        "parentId" : "0e908ae5-a99f-4f03-886e-73f350bea80c",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "Thanks. I filed an internal bug as a reminder to clean this stuff up, given this is N=3.\n",
        "createdAt" : "2015-07-23T13:28:55Z",
        "updatedAt" : "2015-07-23T14:16:59Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      }
    ],
    "commit" : "fdd7f1e4b254e92dccfe4808f2057fc71e841c6e",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1765,1769 @@\t\tcommand = \"sudo /etc/init.d/kube-apiserver restart\"\n\t}\n\t_, _, code, err := SSH(command, getMasterHost()+\":22\", testContext.Provider)\n\tif err != nil || code != 0 {\n\t\treturn fmt.Errorf(\"couldn't restart apiserver: %v (code %v)\", err, code)"
  },
  {
    "id" : "42266566-bfc3-4ddd-8708-9ed5a1c611a8",
    "prId" : 11050,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c8944c0-7e79-4b47-8ba8-4a24d0cca6e3",
        "parentId" : null,
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "This definitely deserves a comment (and possibly a separate PR).\n",
        "createdAt" : "2015-07-13T12:04:34Z",
        "updatedAt" : "2015-07-28T06:35:05Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "860822431bf3d0eb633ddd68fe7d8f2a47d19d20",
    "line" : null,
    "diffHunk" : "@@ -1,1 +895,899 @@// kubectlBuilder is used to build, custimize and execute a kubectl Command.\n// Add more functions to customize the builder as needed.\ntype kubectlBuilder struct {\n\tcmd *exec.Cmd\n}"
  },
  {
    "id" : "9f6b6bb6-6640-4075-9d4c-3a725bde6c2f",
    "prId" : 11008,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ec20c03-4e7b-451e-94af-ff6913b6009e",
        "parentId" : null,
        "authorId" : null,
        "body" : "Surely you want to return an error on ErrWaitTimeout here?\n",
        "createdAt" : "2015-07-09T19:10:22Z",
        "updatedAt" : "2015-07-09T19:26:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "203ae639-18a7-4e65-90b8-2a42c1c755f9",
        "parentId" : "7ec20c03-4e7b-451e-94af-ff6913b6009e",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "In case of timeout, I want the error message below it to return.\n",
        "createdAt" : "2015-07-09T19:24:01Z",
        "updatedAt" : "2015-07-09T19:26:24Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "1cf2b946-8a20-4b1c-a941-9273a9fa989d",
        "parentId" : "7ec20c03-4e7b-451e-94af-ff6913b6009e",
        "authorId" : null,
        "body" : "Doh!  Gotcha.  LGTM.\n",
        "createdAt" : "2015-07-09T20:53:14Z",
        "updatedAt" : "2015-07-09T20:53:14Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "3058ddad195c0d842141a64bbb39a487ec3095db",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +1486,1490 @@\t})\n\n\tif err != nil && err != wait.ErrWaitTimeout {\n\t\treturn err\n\t}"
  },
  {
    "id" : "3a8a1e9d-5132-4d61-a833-f62b3a25dcf2",
    "prId" : 11008,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36d33365-c68f-4684-8b1f-d6838cf6e1e0",
        "parentId" : null,
        "authorId" : null,
        "body" : "Not your code, but the if statement below could be made a lot more understandable with a few brackets, rather than relying on implicit operator precedence.\n",
        "createdAt" : "2015-07-09T19:12:50Z",
        "updatedAt" : "2015-07-09T19:26:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "3058ddad195c0d842141a64bbb39a487ec3095db",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1435,1439 @@\t\tLogf(\"Node %s condition %d/%d: type: %v, status: %v, reason: %q, message: %q, last transistion time: %v\",\n\t\t\tnode.Name, i+1, len(node.Status.Conditions), cond.Type, cond.Status,\n\t\t\tcond.Reason, cond.Message, cond.LastTransitionTime)\n\t\t// Ensure that the condition type is readiness and the status\n\t\t// matches as desired."
  },
  {
    "id" : "752cc4ac-a8ab-47ad-9789-a86d0dd0a0e7",
    "prId" : 11006,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "050a3b29-9bf4-419d-821a-008f7e7206ce",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "I found the cause. Getting pods back based on label may fail due to timing issue. Therefore, I created `waitForPodsWithLabel()` to keep polling pods with label `run=<rc name>` for a certain time until it returns more than 0 pods. This seems to work and I'll test again just to make sure.\n\nThanks for your help! PTAL\n",
        "createdAt" : "2015-07-14T02:15:08Z",
        "updatedAt" : "2015-07-24T18:23:38Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "565a13e8db0a9e8d5571ddedb217a312f2e6b503",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1278,1282 @@func waitForPodsWithLabel(c *client.Client, ns string, label labels.Selector) (pods *api.PodList, err error) {\n\tfor t := time.Now(); time.Since(t) < podListTimeout; time.Sleep(poll) {\n\t\tpods, err = c.Pods(ns).List(label, fields.Everything())\n\t\tExpect(err).NotTo(HaveOccurred())\n\t\tif len(pods.Items) > 0 {"
  },
  {
    "id" : "4a5637ab-062c-4866-af86-b3eb506a06bf",
    "prId" : 10802,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bea9ff20-51d1-45cd-8cad-ee48c272714e",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "maybe store node name _and_ container name, and print both in dumpNodeDebugInfo() ?\n",
        "createdAt" : "2015-07-07T06:01:17Z",
        "updatedAt" : "2015-07-07T06:01:17Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "1a69e28c-0b13-4a71-82e0-5716e2abda05",
        "parentId" : "bea9ff20-51d1-45cd-8cad-ee48c272714e",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "It might be useful, but in my opinion it should block this PR (it's not that useful).\n",
        "createdAt" : "2015-07-07T06:22:08Z",
        "updatedAt" : "2015-07-07T06:22:08Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0bbd5b8d5094153af8c50625136c3ab79d9e817",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +1082,1086 @@\t\t\t\tfor _, v := range FailedContainers(p) {\n\t\t\t\t\tfailedContainers = failedContainers + v.restarts\n\t\t\t\t\tcontainerRestartNodes.Insert(p.Spec.NodeName)\n\t\t\t\t}\n\t\t\t} else if p.Status.Phase == api.PodPending {"
  },
  {
    "id" : "3b818224-cf18-430d-8d19-8634d5202c32",
    "prId" : 10802,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2be38fc3-5cf1-407b-b787-68fade3e8b4b",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "logNodeEvents -> getNodeEvents\n",
        "createdAt" : "2015-07-07T06:01:34Z",
        "updatedAt" : "2015-07-07T06:01:34Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0bbd5b8d5094153af8c50625136c3ab79d9e817",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +1177,1181 @@}\n\n// logNodeEvents logs kubelet events from the given node. This includes kubelet\n// restart and node unhealthy events. Note that listing events like this will mess\n// with latency metrics, beware of calling it during a test."
  },
  {
    "id" : "586d4d6f-6b40-420b-82c2-cd159adde9f6",
    "prId" : 10329,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50e7932f-4e1e-48c0-97b1-5f12b388e1da",
        "parentId" : null,
        "authorId" : null,
        "body" : "Just for the record, this function is now 128 lines long - over-ripe for a refactoring, but not necessarily in this PR.\n",
        "createdAt" : "2015-06-29T21:18:48Z",
        "updatedAt" : "2015-07-05T20:44:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "7bc32b5a4766dc89c1b122fd3e2a531b866fba1c",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1105,1109 @@\t\toldPods = pods\n\t\toldRunning = running\n\n\t\tif time.Since(lastChange) > timeout {\n\t\t\tdumpPodDebugInfo(config.Client, pods)"
  },
  {
    "id" : "9b0d09ea-9c47-4e13-8ecb-dab38dfe04b0",
    "prId" : 10215,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24b1d82a-ce8d-4266-968c-ad1a34438704",
        "parentId" : null,
        "authorId" : null,
        "body" : "I think that you want this inside the if statement, to avoid waiting for containers that you're not interested in.\n",
        "createdAt" : "2015-06-23T23:11:50Z",
        "updatedAt" : "2015-06-25T01:29:33Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "c1347595-e289-4a94-9113-a87de83e3599",
        "parentId" : "24b1d82a-ce8d-4266-968c-ad1a34438704",
        "authorId" : "95b7051f-0751-4088-8141-bc45a44ac5ca",
        "body" : "I dont think so. \nFrom where i stand, all of the containers should be running for test cases involved multiple ones. Only some of the output needs to be verified though.\n",
        "createdAt" : "2015-06-24T00:30:08Z",
        "updatedAt" : "2015-06-25T01:29:33Z",
        "lastEditedBy" : "95b7051f-0751-4088-8141-bc45a44ac5ca",
        "tags" : [
        ]
      },
      {
        "id" : "88a1ea68-9ade-48a2-8394-99a79b80c59d",
        "parentId" : "24b1d82a-ce8d-4266-968c-ad1a34438704",
        "authorId" : null,
        "body" : "Fair enough.  Makes sense.\n",
        "createdAt" : "2015-06-24T00:38:14Z",
        "updatedAt" : "2015-06-25T01:29:33Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "912e54789e508244da85c38fdf6b8fb45174513d",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +791,795 @@\tvar containerName string\n\tfor id, container := range pod.Spec.Containers {\n\t\texpectNoError(waitForPodSuccessInNamespace(c, pod.Name, container.Name, ns))\n\t\tif id == containerIndex {\n\t\t\tcontainerName = container.Name"
  },
  {
    "id" : "6f591c2d-4aa1-4e18-88d3-ce4db271af88",
    "prId" : 10215,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7ee4abb9-a02c-484a-b94e-7683027e6a24",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I still think you need to check that containerName is not empty here, to fail immediately and clearly if a test passes an invalid containerIndex.\n",
        "createdAt" : "2015-06-24T18:11:18Z",
        "updatedAt" : "2015-06-25T01:29:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "bf6f5f35-1621-4c35-b85d-cd4aaf74840c",
        "parentId" : "7ee4abb9-a02c-484a-b94e-7683027e6a24",
        "authorId" : "95b7051f-0751-4088-8141-bc45a44ac5ca",
        "body" : "Make sense. Fixed:)\n",
        "createdAt" : "2015-06-25T01:30:08Z",
        "updatedAt" : "2015-06-25T01:30:08Z",
        "lastEditedBy" : "95b7051f-0751-4088-8141-bc45a44ac5ca",
        "tags" : [
        ]
      }
    ],
    "commit" : "912e54789e508244da85c38fdf6b8fb45174513d",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +795,799 @@\t\t\tcontainerName = container.Name\n\t\t}\n\t}\n\tif containerName == \"\" {\n\t\tFailf(\"Invalid container index: %d\", containerIndex)"
  },
  {
    "id" : "5db5f751-5bb1-4ea8-913b-ce1f087d88b7",
    "prId" : 9676,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0037c879-bd35-44fd-9f9e-7636d4b271e5",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "suggest just \"isNodeReady\" and omit the wantReady parameter. YAGNI\n",
        "createdAt" : "2015-06-11T18:14:42Z",
        "updatedAt" : "2015-06-12T07:48:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "cb0bd22a-3559-4cd4-b6df-c66116ea188c",
        "parentId" : "0037c879-bd35-44fd-9f9e-7636d4b271e5",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "nvm I see it's used... sigh\n",
        "createdAt" : "2015-06-11T18:15:48Z",
        "updatedAt" : "2015-06-12T07:48:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "d89e1293a2455b7b413e42d7b42f028865fbad19",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1146,1150 @@}\n\nfunc isNodeReadySetAsExpected(node *api.Node, wantReady bool) bool {\n\t// Check the node readiness condition (logging all).\n\tfor i, cond := range node.Status.Conditions {"
  },
  {
    "id" : "9df3eb7c-0cb3-4d66-bca3-cb05929ec6be",
    "prId" : 9676,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a71f013-efa3-4340-baff-f04827782bdd",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Can you add a TODO: consider merging with pkg/client/cache.NodeLister\n\nhttps://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/client/cache/listers.go#L111\n",
        "createdAt" : "2015-06-11T18:17:46Z",
        "updatedAt" : "2015-06-12T07:48:25Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "d89e1293a2455b7b413e42d7b42f028865fbad19",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1185,1189 @@// satisfy the given condition\n// TODO: consider merging with pkg/client/cache.NodeLister\nfunc filterNodes(nodeList *api.NodeList, fn func(node api.Node) bool) {\n\tvar l []api.Node\n"
  },
  {
    "id" : "5bfa0b1c-dbac-4d96-9960-e85b5c4105a3",
    "prId" : 9571,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d37cd71-2411-40de-97aa-ac6b1f00b415",
        "parentId" : null,
        "authorId" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "body" : "This isn't guaranteed to scale.  300 might start in 10 minutes, but can you guarantee 10000 pods would?  This function is used in tests that run against a cluster that could be of any size and it should be able to pass.  The old looping mechanism didn't care about how long it took, only that there was progress.  Having a hard time limit makes this function less reliable for different pod counts.  I'd prefer going back to tracking progress vs arbitrary timeout\n",
        "createdAt" : "2015-06-10T13:58:57Z",
        "updatedAt" : "2015-06-11T12:23:04Z",
        "lastEditedBy" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "tags" : [
        ]
      },
      {
        "id" : "44568ec9-79cb-4707-a315-01bd16c6de50",
        "parentId" : "9d37cd71-2411-40de-97aa-ac6b1f00b415",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "I don't think we should worry about 10000 pods yet.\n",
        "createdAt" : "2015-06-10T14:07:07Z",
        "updatedAt" : "2015-06-11T12:23:04Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "1cc68ce5-6fd7-40b8-b87a-7a6415023083",
        "parentId" : "9d37cd71-2411-40de-97aa-ac6b1f00b415",
        "authorId" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "body" : "There's no reason to not allow for it. We run 100 pods/node on 23 physical nodes (2300 pods) and with performance regressions we've seen, only see about 3 pods start/sec (if the math in #8119 is correct).  That would be roughly 700 seconds, or >10 minutes, for all pods to start.  A hard time limit isn't the right path here.\n",
        "createdAt" : "2015-06-10T14:12:47Z",
        "updatedAt" : "2015-06-11T12:23:04Z",
        "lastEditedBy" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "tags" : [
        ]
      },
      {
        "id" : "8dfd9fa8-6160-49f3-9663-28ac584a7687",
        "parentId" : "9d37cd71-2411-40de-97aa-ac6b1f00b415",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "We're currently targeting 30 pods/node.\n",
        "createdAt" : "2015-06-10T14:22:27Z",
        "updatedAt" : "2015-06-11T12:23:04Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "b7ff90ae-1f11-480a-b55a-8fb9b607c0ab",
        "parentId" : "9d37cd71-2411-40de-97aa-ac6b1f00b415",
        "authorId" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "body" : "Again, no reason to prevent running at larger scale.\n",
        "createdAt" : "2015-06-10T14:30:44Z",
        "updatedAt" : "2015-06-11T12:23:04Z",
        "lastEditedBy" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "tags" : [
        ]
      },
      {
        "id" : "794cab3d-626d-4409-9a6b-4de976c7b4c5",
        "parentId" : "9d37cd71-2411-40de-97aa-ac6b1f00b415",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "+1 to rrati please **do not** put in a blind 10 minute time-out, we do indeed check much greater densities then 30 on our end. \n\n@fgrzadkowski, @gmarek \n",
        "createdAt" : "2015-06-10T14:38:06Z",
        "updatedAt" : "2015-06-11T12:23:04Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "23970811-fac2-41c9-93f2-a44d7ffc7577",
        "parentId" : "9d37cd71-2411-40de-97aa-ac6b1f00b415",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Suggestion for timeout: 30 seconds + 2 seconds per pod?\n",
        "createdAt" : "2015-06-10T22:23:20Z",
        "updatedAt" : "2015-06-11T12:23:04Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "6a78d165-ca09-4356-8ab5-ab1aea843d5e",
        "parentId" : "9d37cd71-2411-40de-97aa-ac6b1f00b415",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Done\n",
        "createdAt" : "2015-06-11T10:28:51Z",
        "updatedAt" : "2015-06-11T12:23:04Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "03f161def26a2502880cfff7d58f3250c851794e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +858,862 @@\tlastChange := time.Now()\n\tfor oldRunning != config.Replicas && time.Since(lastChange) < 5*time.Minute {\n\t\ttime.Sleep(interval)\n\n\t\trunning := 0"
  },
  {
    "id" : "33dc920c-4aab-4f78-ac69-5415363f5b52",
    "prId" : 9322,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d81c7c8a-45d3-43b3-ab45-103b28ae95c8",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "`nil, err`\n",
        "createdAt" : "2015-06-05T17:41:26Z",
        "updatedAt" : "2015-06-05T17:41:26Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "61c3d20f-2921-4965-9d62-e41148dfa951",
        "parentId" : "d81c7c8a-45d3-43b3-ab45-103b28ae95c8",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "agree, was keeping previous behavior in case tests were depending on it\n",
        "createdAt" : "2015-06-05T17:42:31Z",
        "updatedAt" : "2015-06-05T17:42:31Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "cddea4de-1b6d-4066-a08b-b1f04704d725",
        "parentId" : "d81c7c8a-45d3-43b3-ab45-103b28ae95c8",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "yeah, looks like tons of tests pull out the name from the returned namespace, then check for the error... would rather not sweep all tests in this PR\n",
        "createdAt" : "2015-06-05T17:48:03Z",
        "updatedAt" : "2015-06-05T17:48:03Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "3121b05a-7b50-46f0-a986-f0c44eee23fa",
        "parentId" : "d81c7c8a-45d3-43b3-ab45-103b28ae95c8",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "OK, that's unfortunate.\n",
        "createdAt" : "2015-06-05T18:00:40Z",
        "updatedAt" : "2015-06-05T18:00:40Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "4754a6aea189fc6c0a79df1c603c4c0f9484f878",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +313,317 @@\t_, err := c.Namespaces().Create(namespaceObj)\n\tif err != nil {\n\t\treturn namespaceObj, err\n\t}\n\tif err := waitForDefaultServiceAccountInNamespace(c, namespaceObj.Name); err != nil {"
  },
  {
    "id" : "c94d319c-7a29-46d4-9284-cbbff9e5da9d",
    "prId" : 9322,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88201dac-74ee-465c-9a73-0f345308fbce",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "delete the namespace, & `return nil, err`?\n",
        "createdAt" : "2015-06-05T17:42:17Z",
        "updatedAt" : "2015-06-05T17:42:17Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "02f767ac-ad1d-4637-b0e6-8823803a61c0",
        "parentId" : "88201dac-74ee-465c-9a73-0f345308fbce",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "it's a random uuid namespace... I'd rather leave it for later dumping/debugging\n",
        "createdAt" : "2015-06-05T17:46:00Z",
        "updatedAt" : "2015-06-05T17:46:00Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4754a6aea189fc6c0a79df1c603c4c0f9484f878",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +316,320 @@\t}\n\tif err := waitForDefaultServiceAccountInNamespace(c, namespaceObj.Name); err != nil {\n\t\treturn namespaceObj, err\n\t}\n\treturn namespaceObj, nil"
  },
  {
    "id" : "f758e809-43cc-4cd0-a6de-b7cd865c036a",
    "prId" : 9322,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb931e5b-8505-4a64-9958-cdefa21ef380",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "might as well combine w/ above line.\n",
        "createdAt" : "2015-06-05T17:43:03Z",
        "updatedAt" : "2015-06-05T17:43:03Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "4754a6aea189fc6c0a79df1c603c4c0f9484f878",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +312,316 @@\t}\n\t_, err := c.Namespaces().Create(namespaceObj)\n\tif err != nil {\n\t\treturn namespaceObj, err\n\t}"
  },
  {
    "id" : "1a5aa8f4-2a9f-40fa-a4f8-55bffdfc860c",
    "prId" : 9059,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44aebaf6-6612-4d9c-a5c7-fabe2d164d28",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Why this change? Only to make test faster?\n",
        "createdAt" : "2015-06-01T13:28:37Z",
        "updatedAt" : "2015-06-01T15:19:10Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "0ed373d0-677a-4aa7-8a24-c263e4344565",
        "parentId" : "44aebaf6-6612-4d9c-a5c7-fabe2d164d28",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Mostly because it was inconsistent, and with watch it's very cheap.\n",
        "createdAt" : "2015-06-01T13:39:59Z",
        "updatedAt" : "2015-06-01T15:19:10Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7814297acc089b587c79139b9978fcb2b0355b26",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +786,790 @@\t\tinactive := 0\n\t\tfailedContainers := 0\n\t\ttime.Sleep(5 * time.Second)\n\n\t\tcurrentPods := podStore.List()"
  },
  {
    "id" : "4ecb4473-4b31-4b0d-9d99-5370f0103dde",
    "prId" : 9059,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "56726b70-b35e-444a-8025-db2bad4f73fa",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "s/cache.Store/cache. Store/\n",
        "createdAt" : "2015-06-01T19:44:37Z",
        "updatedAt" : "2015-06-01T19:44:37Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "ac6cf247-5279-47f5-a330-15acd73fd834",
        "parentId" : "56726b70-b35e-444a-8025-db2bad4f73fa",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "\"cache.Store\" is a the name of a type (with package name) :)\n",
        "createdAt" : "2015-06-02T08:57:36Z",
        "updatedAt" : "2015-06-02T08:57:36Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "7814297acc089b587c79139b9978fcb2b0355b26",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +98,102 @@}\n\n// Convenient wrapper around cache.Store that returns list of api.Pod instead of interface{}.\ntype podStore struct {\n\tcache.Store"
  },
  {
    "id" : "b14cdbec-f410-4dac-8e81-a04e6320e15e",
    "prId" : 8974,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ba19ba5-cc80-492f-817b-4cdd8ee1f1af",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "optional nit: save the pod from a previous poll and invoked one of the ObjectDiff functions in util/diff\n",
        "createdAt" : "2015-05-29T00:16:30Z",
        "updatedAt" : "2015-05-29T00:21:00Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "d012b4e1-0869-46ad-b597-e344b6b29a9a",
        "parentId" : "0ba19ba5-cc80-492f-817b-4cdd8ee1f1af",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "What would that tell you? I'm actually interested in why it's in the failed state.\n",
        "createdAt" : "2015-05-29T00:18:01Z",
        "updatedAt" : "2015-05-29T00:21:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "42dced42-048e-46a5-a2f4-9655e06c3997",
        "parentId" : "0ba19ba5-cc80-492f-817b-4cdd8ee1f1af",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "I'm assuming it was in a non-failed state and flipped to failed, and more than one field of the pod status changed reflecting why it went to failed. Direct pod spew is sometimes hard to parse, especially with multiple containers. \n",
        "createdAt" : "2015-05-29T00:21:37Z",
        "updatedAt" : "2015-05-29T00:21:37Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "b8cddf97-1127-4d94-a0e3-9112664d9887",
        "parentId" : "0ba19ba5-cc80-492f-817b-4cdd8ee1f1af",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Fair enough, but I think in this case I actually want to slog through all that stuff, in case the diff obscures a detail I need.\n",
        "createdAt" : "2015-05-29T00:30:00Z",
        "updatedAt" : "2015-05-29T00:30:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "60e1f17e-28a6-4163-93b8-afa22d536cbd",
        "parentId" : "0ba19ba5-cc80-492f-817b-4cdd8ee1f1af",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Sure, was just anecdotal from my own debugging escapades :)\n",
        "createdAt" : "2015-05-29T00:31:44Z",
        "updatedAt" : "2015-05-29T00:31:44Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "02b13315129a9f4d510cd9c5a4414fe2d1f24999",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +244,248 @@\t\t}\n\t\tif pod.Status.Phase == api.PodFailed {\n\t\t\treturn true, fmt.Errorf(\"Giving up; pod went into failed status: \\n%s\", spew.Sprintf(\"%#v\", pod))\n\t\t}\n\t\treturn false, nil"
  },
  {
    "id" : "eebe96b7-f440-4727-babd-393c6222d06f",
    "prId" : 8837,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fcbb43e-46b7-490d-8d9d-c2ec69a50207",
        "parentId" : null,
        "authorId" : null,
        "body" : "Please use wait.Poll() below.\n",
        "createdAt" : "2015-05-27T04:54:09Z",
        "updatedAt" : "2015-06-04T00:06:01Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "37d56ea5-7020-4628-b78d-b7355910ea38",
        "parentId" : "3fcbb43e-46b7-490d-8d9d-c2ec69a50207",
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "Done (not yet pushed).\n",
        "createdAt" : "2015-06-03T22:22:25Z",
        "updatedAt" : "2015-06-04T00:06:01Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6c47a07de5c63d0f34591f2cb327222a15f3650",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +294,298 @@\nfunc waitForPodCondition(c *client.Client, ns, podName, desc string, timeout time.Duration, condition podCondition) error {\n\tLogf(\"Waiting up to %[1]v for pod %-[2]*[3]s status to be %[4]s\", timeout, podPrintWidth, podName, desc)\n\tfor start := time.Now(); time.Since(start) < timeout; time.Sleep(poll) {\n\t\tpod, err := c.Pods(ns).Get(podName)"
  },
  {
    "id" : "9ce538d8-b63c-40ef-b05f-3b57e107b1ea",
    "prId" : 8837,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "130a0a6d-73be-4fab-bc25-9503dea69196",
        "parentId" : null,
        "authorId" : null,
        "body" : "Please use wait.Poll()\n",
        "createdAt" : "2015-05-27T04:56:06Z",
        "updatedAt" : "2015-06-04T00:06:01Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "c72d59b8-9104-43eb-8ca1-d5a42b4cd8af",
        "parentId" : "130a0a6d-73be-4fab-bc25-9503dea69196",
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "Done (not yet pushed).\n",
        "createdAt" : "2015-06-03T22:22:34Z",
        "updatedAt" : "2015-06-04T00:06:01Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6c47a07de5c63d0f34591f2cb327222a15f3650",
    "line" : 223,
    "diffHunk" : "@@ -1,1 +1190,1194 @@func waitForNodeToBe(c *client.Client, name string, wantReady bool, timeout time.Duration) bool {\n\tLogf(\"Waiting up to %v for node %s readiness to be %t\", timeout, name, wantReady)\n\tfor start := time.Now(); time.Since(start) < timeout; time.Sleep(poll) {\n\t\tnode, err := c.Nodes().Get(name)\n\t\tif err != nil {"
  },
  {
    "id" : "a8f85f16-3a21-412c-8959-f1134bae421d",
    "prId" : 8809,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f29518b-9f02-4cbe-b4ee-2b72345545e9",
        "parentId" : null,
        "authorId" : null,
        "body" : "Why the magic number 1.1?\n",
        "createdAt" : "2015-06-01T17:19:18Z",
        "updatedAt" : "2015-06-03T19:00:39Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "9b24c404-4517-4d8b-ac27-b793b2c70a93",
        "parentId" : "0f29518b-9f02-4cbe-b4ee-2b72345545e9",
        "authorId" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "body" : "See #7573 for history of where that comes from.\n",
        "createdAt" : "2015-06-01T17:22:11Z",
        "updatedAt" : "2015-06-03T19:00:39Z",
        "lastEditedBy" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "tags" : [
        ]
      },
      {
        "id" : "4c613ec5-da89-45a0-ac11-d8b7ac8495d9",
        "parentId" : "0f29518b-9f02-4cbe-b4ee-2b72345545e9",
        "authorId" : null,
        "body" : "Again, you need to add sensibly named constants here, or at the very least a code comment explaining how the number was arrived at, so that people who need to change this in future know what's going on. \n",
        "createdAt" : "2015-06-01T18:06:01Z",
        "updatedAt" : "2015-06-03T19:00:39Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "a248d0ccf92d8204c77a539bbdee809a9e296985",
    "line" : null,
    "diffHunk" : "@@ -1,1 +797,801 @@\t\t// Wait just longer than an interval to allow processing\n\t\t// information in the queue quickly\n\t\ttime.Sleep(time.Duration(float32(interval)*1.1) * time.Second)\n\n\t\t// Greedily read all existing entries in the queue until"
  },
  {
    "id" : "ac03a567-690e-4173-83c2-94994584751e",
    "prId" : 8809,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9bb0968e-4383-4096-9809-de2ee5657a32",
        "parentId" : null,
        "authorId" : null,
        "body" : "Why call it a list if it's a queue?\n",
        "createdAt" : "2015-06-01T17:21:29Z",
        "updatedAt" : "2015-06-03T19:00:39Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "cca930b5-9ea8-4528-99fd-35f8aab90299",
        "parentId" : "9bb0968e-4383-4096-9809-de2ee5657a32",
        "authorId" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "body" : "It is a queue of podLists.  \n",
        "createdAt" : "2015-06-01T17:22:55Z",
        "updatedAt" : "2015-06-03T19:00:39Z",
        "lastEditedBy" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "tags" : [
        ]
      }
    ],
    "commit" : "a248d0ccf92d8204c77a539bbdee809a9e296985",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +728,732 @@\tsame := 0\n\tlabel := labels.SelectorFromSet(labels.Set(map[string]string{\"name\": name}))\n\tpodLists := newFifoQueue()\n\n\t// Default to 10 second polling/check interval"
  },
  {
    "id" : "51cd1ec4-95f4-4014-95fd-df6a471038a9",
    "prId" : 8809,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b571d3d4-2b57-4e71-aa38-04e41437ce81",
        "parentId" : null,
        "authorId" : null,
        "body" : "I find the logic of this loop and the enclosing one very difficult to follow.  Please add comments to explain what you're trying to do here, as it's not at all clear.\n",
        "createdAt" : "2015-06-01T17:27:17Z",
        "updatedAt" : "2015-06-03T19:00:39Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "a248d0ccf92d8204c77a539bbdee809a9e296985",
    "line" : null,
    "diffHunk" : "@@ -1,1 +803,807 @@\t\t// the queue is empty then we need to stop trying to process\n\t\t// entries until there is something or process in the queue\n\t\tfor podLists.Len() > 0 && current < replicas {\n\t\t\titem := podLists.Pop()\n\t\t\tpods := item.value.([]*api.Pod)"
  },
  {
    "id" : "167b7e79-b536-440b-aa6f-08a71d578713",
    "prId" : 8779,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a028797a-ebf6-4fb3-8194-56e5f6cc422f",
        "parentId" : null,
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Instead of adding new function, maybe it'd be enough to just write:\n\n```\nkubectl.ReplicationControllerReaper{c, kubectl.Interval, 10*time.Minute}\n```\n\nWDYT?\n",
        "createdAt" : "2015-05-25T10:09:07Z",
        "updatedAt" : "2015-05-25T10:09:07Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "cd34f1ac-71e5-4881-b6b5-5e4878f76505",
        "parentId" : "a028797a-ebf6-4fb3-8194-56e5f6cc422f",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "It's not enough, because pollInterval and timeout are private.\nHowever, I'm fine with making the public if you think it's better approach.\nWDYT?\n",
        "createdAt" : "2015-05-25T11:03:39Z",
        "updatedAt" : "2015-05-25T11:03:39Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "ca0e3786-53ff-4b36-848f-d7d882180276",
        "parentId" : "a028797a-ebf6-4fb3-8194-56e5f6cc422f",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "You are right. Let's keep it as is...\n",
        "createdAt" : "2015-05-25T12:55:53Z",
        "updatedAt" : "2015-05-25T12:55:53Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff8c772fe0a1a5f7eab358942a08b4673a6bd75b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +828,832 @@func DeleteRC(c *client.Client, ns, name string) error {\n\tBy(fmt.Sprintf(\"Deleting replication controller %s in namespace %s\", name, ns))\n\treaper, err := kubectl.ReaperForReplicationController(c, 10*time.Minute)\n\tif err != nil {\n\t\treturn err"
  },
  {
    "id" : "7de78d8a-800f-45ae-8b1f-b13f534f0edf",
    "prId" : 8696,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "288a7225-1957-42d1-84a2-6e73efb91f5e",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "is this what you were seeing? I've never seen it take more than 10 seconds even under heavy load on an underpowered laptop...\n",
        "createdAt" : "2015-05-28T18:23:35Z",
        "updatedAt" : "2015-05-28T18:23:35Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "fba6fbb7-4c7e-401a-b462-adc92c4073a3",
        "parentId" : "288a7225-1957-42d1-84a2-6e73efb91f5e",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I did not hit this timeout, but after running e2e many times, I aimed high first.\n",
        "createdAt" : "2015-05-28T19:01:43Z",
        "updatedAt" : "2015-05-28T19:01:43Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "515b686e-8504-4f80-806d-cd87a96b2333",
        "parentId" : "288a7225-1957-42d1-84a2-6e73efb91f5e",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "An underpowered laptop is also better than a 100m of a v1cpu ;-)  Your underpowered laptop has more than one slow cpu with hyperthreading on.\n",
        "createdAt" : "2015-05-28T19:23:30Z",
        "updatedAt" : "2015-05-28T19:23:30Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e8b1d5e018b474c4edb6e6904b040dd7237466a",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +62,66 @@\t// service accounts are provisioned after namespace creation\n\t// a service account is required to support pod creation in a namespace as part of admission control\n\tserviceAccountProvisionTimeout = 2 * time.Minute\n\n\t// How often to poll for service accounts"
  },
  {
    "id" : "f5f8d8a1-9a83-43c7-bf73-afdd97f34e0a",
    "prId" : 8442,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1310ece3-813e-424d-8df9-5b57f896b7f9",
        "parentId" : null,
        "authorId" : null,
        "body" : "Remove \"condition of\"\n",
        "createdAt" : "2015-05-18T22:33:27Z",
        "updatedAt" : "2015-05-19T17:53:08Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "f0ddaca4-6678-4498-81b8-96b7343b323e",
        "parentId" : "1310ece3-813e-424d-8df9-5b57f896b7f9",
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "See comment above, please.\n",
        "createdAt" : "2015-05-18T23:46:27Z",
        "updatedAt" : "2015-05-19T17:53:08Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "1da46ca3d0bb92feb5949d4c7bf7281c8ce1125c",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +132,136 @@\n// podRunningReady checks whether pod p's phase is running and it has a ready\n// condition of status true.\nfunc podRunningReady(p *api.Pod) (bool, error) {\n\t// Check the phase is running."
  },
  {
    "id" : "ad506d50-384b-4056-83dd-cd5cc125da34",
    "prId" : 8243,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4710860e-0174-4d90-929c-ccd66203610a",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "I don't like using abbreviations, especially one for namespace.\n",
        "createdAt" : "2015-05-14T12:04:47Z",
        "updatedAt" : "2015-05-22T06:38:00Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "d94f0897-1b1b-40ff-be13-3c9e7902dc66",
        "parentId" : "4710860e-0174-4d90-929c-ccd66203610a",
        "authorId" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "body" : "\"ns\" is a commonly used abbreviation for namespace in kubernetes, and, AFAK, golang standard in general encourages short variable names.\n",
        "createdAt" : "2015-05-14T12:28:36Z",
        "updatedAt" : "2015-05-22T06:38:00Z",
        "lastEditedBy" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "tags" : [
        ]
      },
      {
        "id" : "9cd1937e-4dff-4d12-aa16-6b3b417e29f0",
        "parentId" : "4710860e-0174-4d90-929c-ccd66203610a",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "OK, I just wanted to mention that I don't like it:) It took me ~1sec to figure out what it stands for.\n",
        "createdAt" : "2015-05-14T15:14:26Z",
        "updatedAt" : "2015-05-22T06:38:00Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "95eb1a56-e19f-425a-88db-e18b0bf79e22",
        "parentId" : "4710860e-0174-4d90-929c-ccd66203610a",
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "It took me a minute the first time I saw one too, but I think at this point `ns` is pretty common.\n",
        "createdAt" : "2015-05-14T21:42:17Z",
        "updatedAt" : "2015-05-22T06:38:00Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      },
      {
        "id" : "639571f9-91bc-4c02-bb1b-a15beb26f0a7",
        "parentId" : "4710860e-0174-4d90-929c-ccd66203610a",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Yeah. If it's not only me maybe we should start using full 'namespace' for this...\n",
        "createdAt" : "2015-05-15T13:54:08Z",
        "updatedAt" : "2015-05-22T06:38:00Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "ec0a6073-d2eb-4d98-a346-92aace4cdc55",
        "parentId" : "4710860e-0174-4d90-929c-ccd66203610a",
        "authorId" : null,
        "body" : "I agree with @gmarek.  Feel free to do a holistic cleanup of the e2e tests in this regard.\n",
        "createdAt" : "2015-05-15T15:51:04Z",
        "updatedAt" : "2015-05-22T06:38:00Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "15f7fef1-b266-4645-a198-a293ab768354",
        "parentId" : "4710860e-0174-4d90-929c-ccd66203610a",
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "Now that I'm used to it I kind of like the brevity... but regardless, bikeshedding for a separate PR :-)\n",
        "createdAt" : "2015-05-15T21:20:10Z",
        "updatedAt" : "2015-05-22T06:38:00Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef965a60f2422902d52e719553114e86b03c4a86",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +270,274 @@type podResponseChecker struct {\n\tc              *client.Client\n\tns             string\n\tlabel          labels.Selector\n\tcontrollerName string"
  },
  {
    "id" : "594dcede-aa62-416d-996a-ad315c7d95d1",
    "prId" : 8243,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0ebebfe-49cf-4943-bdeb-1fc140647433",
        "parentId" : null,
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "nit: love the method comment, but Go style says comments should start with the method name (e.g. \"checkAllResponses issues GETs ...\")\n",
        "createdAt" : "2015-05-14T21:43:15Z",
        "updatedAt" : "2015-05-22T06:38:00Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      },
      {
        "id" : "91103efc-4474-412f-9eb8-1b821556c941",
        "parentId" : "d0ebebfe-49cf-4943-bdeb-1fc140647433",
        "authorId" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "body" : "Done.\n",
        "createdAt" : "2015-05-15T07:47:59Z",
        "updatedAt" : "2015-05-22T06:38:00Z",
        "lastEditedBy" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "tags" : [
        ]
      }
    ],
    "commit" : "ef965a60f2422902d52e719553114e86b03c4a86",
    "line" : null,
    "diffHunk" : "@@ -1,1 +277,281 @@\n// checkAllResponses issues GETs to all pods in the context and verify they reply with pod name.\nfunc (r podResponseChecker) checkAllResponses() (done bool, err error) {\n\tsuccesses := 0\n\tcurrentPods, err := r.c.Pods(r.ns).List(r.label, fields.Everything())"
  },
  {
    "id" : "a77ecbfa-2dfa-4482-aa08-e084ce29e854",
    "prId" : 7771,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d124a294-5c09-40d5-b6d2-32eaa586b246",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "suggest splitting this out into another function that just waits for pods so we can, say, wait for 50% of the pods or something down the line.\n",
        "createdAt" : "2015-05-07T06:17:02Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "9a6f276d-99d7-49f5-9db8-dd79bf7174bd",
        "parentId" : "d124a294-5c09-40d5-b6d2-32eaa586b246",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Done\n",
        "createdAt" : "2015-05-07T15:00:11Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa116e20335ff22067325c095e9b6a5f99000105",
    "line" : null,
    "diffHunk" : "@@ -1,1 +556,560 @@// Wait up to 10 minutes for pods to become Running.\nfunc waitForRCPodsRunning(c *client.Client, ns, rcName string) error {\n\trunning := false\n\tlabel := labels.SelectorFromSet(labels.Set(map[string]string{\"name\": rcName}))\n\tfor start := time.Now(); time.Since(start) < 10*time.Minute; time.Sleep(5 * time.Second) {"
  },
  {
    "id" : "7a72d9ba-d5b0-4bb1-8b87-0d409aab376d",
    "prId" : 7771,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "623e2c7f-911b-4c43-977a-11d2a16e399d",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Listing all pods every 5s was exactly the thing a lot of our work was done to avoid, since it places quite a bit of load on the system by itself :)\n\nUnsure how much context you have about similar code, but another way to achieve this would be to setup a reflector, eg: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/kubelet/config/apiserver.go#L43. A controller is an even higher abstraction, but I think a reflector should do for this. You can then poll the store.\n",
        "createdAt" : "2015-05-07T06:17:04Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "2ceba1a7-5996-4e53-8ebc-19c89cdc8130",
        "parentId" : "623e2c7f-911b-4c43-977a-11d2a16e399d",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "There is the same pattern in RunRC function. Since nobody complains let's leave it as it is now. When we decide to get rid of listing pods from e2e tests we will do it in both places.\n",
        "createdAt" : "2015-05-07T14:44:11Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa116e20335ff22067325c095e9b6a5f99000105",
    "line" : null,
    "diffHunk" : "@@ -1,1 +558,562 @@\trunning := false\n\tlabel := labels.SelectorFromSet(labels.Set(map[string]string{\"name\": rcName}))\n\tfor start := time.Now(); time.Since(start) < 10*time.Minute; time.Sleep(5 * time.Second) {\n\t\tpods, err := listPods(c, ns, label, fields.Everything())\n\t\tif err != nil {"
  },
  {
    "id" : "cdc8bba4-3140-40a1-b4c8-8d2eed0e5ba3",
    "prId" : 7771,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b99adf0b-1767-4e2d-a627-b54df2e9c4ed",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "To avoid confusing why not just call this stop? since there is a delete operation as well, but it doesn't resize. can you also log the delete rc name/namespace since you do it randomly above?\n",
        "createdAt" : "2015-05-07T19:36:23Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "49cd930f-9593-4bd0-84cf-802ce270af23",
        "parentId" : "b99adf0b-1767-4e2d-a627-b54df2e9c4ed",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "AFAIK we want to get rid of stop, so let's call this delete.\n\nFor more context https://github.com/GoogleCloudPlatform/kubernetes/pull/7432#discussion_r29259589\n",
        "createdAt" : "2015-05-11T08:28:44Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa116e20335ff22067325c095e9b6a5f99000105",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +579,583 @@\n// Delete a Replication Controller and all pods it spawned\nfunc DeleteRC(c *client.Client, ns, name string) error {\n\tBy(fmt.Sprintf(\"Deleting replication controller %s in namespace %s\", name, ns))\n\treaper, err := kubectl.ReaperFor(\"ReplicationController\", c)"
  },
  {
    "id" : "edae23bd-ab09-4562-b9f8-519e6504739a",
    "prId" : 7771,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f151d2aa-d8af-4375-bb58-550a1d65c3b0",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Either expose this so I can control the resize to return without waiting, or force everyone to wait and delete waitForRCPodsRunning? Otherwise I'm not sure how I'd use the 2 together\n",
        "createdAt" : "2015-05-07T19:36:25Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "435f50f5-53ab-4906-b215-e1062f13b527",
        "parentId" : "f151d2aa-d8af-4375-bb58-550a1d65c3b0",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "I think we should keep such methods as simple as possible ie. when someone is writing e2e test he shouldn't care about waiting timeout. Also it's only e2e so we don't care that much about performance, so let's leave it as it is now. Function waitForRCPodsRunning is just factored out from ResizeRC to make code more readable and may be used in a different methods in util.go.\n",
        "createdAt" : "2015-05-11T10:34:53Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa116e20335ff22067325c095e9b6a5f99000105",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +547,551 @@\t\treturn err\n\t}\n\twaitForReplicas := kubectl.NewRetryParams(5*time.Second, 5*time.Minute)\n\tif err = resizer.Resize(ns, name, size, nil, nil, waitForReplicas); err != nil {\n\t\treturn err"
  },
  {
    "id" : "fdd1f94f-4e91-46b8-ab55-d985603eece9",
    "prId" : 7771,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47cddf9c-240a-4bc7-881d-ea6e1c7f7d03",
        "parentId" : null,
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Can we be sure that before we call waitForRCPdosRunning all pods are already created/deleted?\n",
        "createdAt" : "2015-05-11T14:23:36Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "e53c7cde-d165-424b-bbb3-e97c2cfb484b",
        "parentId" : "47cddf9c-240a-4bc7-881d-ea6e1c7f7d03",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Yes, otherwise resizer.Resize returns error.\n",
        "createdAt" : "2015-05-11T14:37:31Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa116e20335ff22067325c095e9b6a5f99000105",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +551,555 @@\t\treturn err\n\t}\n\treturn waitForRCPodsRunning(c, ns, name)\n}\n"
  },
  {
    "id" : "ea04a7d1-22a2-4c50-84a4-32aeb5132d1d",
    "prId" : 7653,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "184cc4dd-2dab-4d81-bcb4-fc3a0faf445e",
        "parentId" : null,
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "I was using kubectl on the path before specifically so that we could pick up the version of kubectl bundled with gcloud when running the tests with the GKE provider. I think this change will force us to always use the version bundled with the tests, which isn't representative of the typical GKE experience. \n",
        "createdAt" : "2015-05-04T05:18:30Z",
        "updatedAt" : "2015-05-15T18:57:42Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "4d439e7c-c35f-4412-85c9-05c065b7f39c",
        "parentId" : "184cc4dd-2dab-4d81-bcb4-fc3a0faf445e",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "I'm a little confused. `hack/ginkgo-e2e.sh` was setting `PATH` to include the directory containing `e2e`, which as best as I understand, will result in the version of `kubectl` from the release being used. (One difference is that kubectl.sh tacks on some extra args for gke, I guess.)\n",
        "createdAt" : "2015-05-04T22:28:04Z",
        "updatedAt" : "2015-05-15T18:57:42Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "94882bb6-d7f3-4f57-b325-f730b106cb1b",
        "parentId" : "184cc4dd-2dab-4d81-bcb4-fc3a0faf445e",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "Hmm. Maybe my intent wasn't being achieved in practice. \n\n/cc @jlowdermilk who helped me configure this when we originally rewrote these tests. \n",
        "createdAt" : "2015-05-04T23:08:50Z",
        "updatedAt" : "2015-05-15T18:57:42Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "0e3a1a83-782e-4021-8a07-4ec3716985c9",
        "parentId" : "184cc4dd-2dab-4d81-bcb4-fc3a0faf445e",
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "Actually, we have been testing gke with the version of kubectl from the release. I think backwards compatibility is now the thing we need to test more than future breakages, so we should probably use the bundled kubectl.\n\nEdit: we want to test backwards compatibility for gke-test, but we do want early warning of future breakages, so we should keep gke-ci using the release version. TL;DR, using release version here is fine, provided we overwrite `PATH` to pick up the gcloud bundled version for gke/gke-test.\n",
        "createdAt" : "2015-05-04T23:52:40Z",
        "updatedAt" : "2015-05-15T18:57:42Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "e1de0904-a123-4488-a23c-d63ccb0f97a5",
        "parentId" : "184cc4dd-2dab-4d81-bcb4-fc3a0faf445e",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "OK, I will revert this change and open an issue (or maybe a bug) to make sure that gke/gke-test use the gcloud version instead. It's probably best to fix that in a separate PR.\n",
        "createdAt" : "2015-05-06T17:50:29Z",
        "updatedAt" : "2015-05-15T18:57:42Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "a9fc606f-b1ef-4865-8398-3b018cf356e4",
        "parentId" : "184cc4dd-2dab-4d81-bcb4-fc3a0faf445e",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "Looking at `cluster/kubectl.sh`, it looks like we can set the `KUBECTL_PATH` env variable for the gke/gke-test projects, and then it'll actually use the right version. So I'll keep the change to use cluster/kubectl.sh rather than kubectl directly? Unless there's still a strong reason not to.\n",
        "createdAt" : "2015-05-14T21:09:32Z",
        "updatedAt" : "2015-05-15T18:57:43Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "f73c430c-2cf8-4bef-bc75-c7afbe59333b",
        "parentId" : "184cc4dd-2dab-4d81-bcb4-fc3a0faf445e",
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "SGTM. That will let us use the latest build kubectl for gke-ci and the gcloud-bundled one for gke-test|staging|prod.\n",
        "createdAt" : "2015-05-14T21:29:38Z",
        "updatedAt" : "2015-05-15T18:57:43Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      }
    ],
    "commit" : "86b023fdd6386a3c2a15d6bde38868b450647c6c",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +331,335 @@\n\t//TODO: the \"kubectl\" path string might be worth externalizing into an (optional) ginko arg.\n\tcmd := exec.Command(filepath.Join(testContext.RepoRoot, \"cluster/kubectl.sh\"), kubectlArgs...)\n\tLogf(\"Running '%s %s'\", cmd.Path, strings.Join(cmd.Args, \" \"))\n\treturn cmd"
  },
  {
    "id" : "f124106f-8d9e-4ab8-aac0-96fc5ba37594",
    "prId" : 7573,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3418083-1dbf-4681-845e-ed1e6154ceeb",
        "parentId" : null,
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Once you sync please use this func in https://github.com/GoogleCloudPlatform/kubernetes/blob/master/test/e2e/util.go#L727\n",
        "createdAt" : "2015-05-06T13:36:23Z",
        "updatedAt" : "2015-05-19T22:41:01Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "b9b3a371-86bb-42d8-8b7e-da676edfec55",
        "parentId" : "d3418083-1dbf-4681-845e-ed1e6154ceeb",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Why wouldn't we want \\* vs. just latencies?  \n",
        "createdAt" : "2015-05-06T18:42:24Z",
        "updatedAt" : "2015-05-19T22:41:01Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "64b06d97-359d-4f69-bfaa-2ead579e5e8a",
        "parentId" : "d3418083-1dbf-4681-845e-ed1e6154ceeb",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "I think there is a misunderstanding. I'm asking to use getMetrics function in getLatencyMetrics function.\n",
        "createdAt" : "2015-05-07T06:10:09Z",
        "updatedAt" : "2015-05-19T22:41:01Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "82276710-b759-4e44-a53b-c6ddfcaca364",
        "parentId" : "d3418083-1dbf-4681-845e-ed1e6154ceeb",
        "authorId" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "body" : "Ah, yes.  I misunderstood.  I'll put getMetrics into getLatencyMetrics\n",
        "createdAt" : "2015-05-07T11:34:10Z",
        "updatedAt" : "2015-05-19T22:41:01Z",
        "lastEditedBy" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "tags" : [
        ]
      }
    ],
    "commit" : "3191b26bc6ca241fba85d0b183868f109e078213",
    "line" : null,
    "diffHunk" : "@@ -1,1 +984,988 @@\n// Retrieve metrics information\nfunc getMetrics(c *client.Client) (string, error) {\n\tbody, err := c.Get().AbsPath(\"/metrics\").DoRaw()\n\tif err != nil {"
  },
  {
    "id" : "46eb0c97-b8fb-4951-b076-4fc9a3c1d150",
    "prId" : 7573,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eadfde35-8f1c-43aa-84d3-805a614b225c",
        "parentId" : null,
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "I don't understand this - why do you queue for pod lists here? Why not use watch-based cache and just check how many items we have?\n",
        "createdAt" : "2015-05-07T21:08:35Z",
        "updatedAt" : "2015-05-19T22:41:01Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "118a506c-94a4-4cd9-b403-1305bd605410",
        "parentId" : "eadfde35-8f1c-43aa-84d3-805a614b225c",
        "authorId" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "body" : "The section checking that the controller is submitting the expected number of pods is using the same queue as the later section checking the states.  Here it is only looking at the total number of pops but it's not really using any more resources since it's a shared queue.  If a watch would work for both I'm open to looking at it, but I don't see the point in using a watch here if I still need the queue later.\n",
        "createdAt" : "2015-05-08T12:49:24Z",
        "updatedAt" : "2015-05-19T22:41:01Z",
        "lastEditedBy" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "tags" : [
        ]
      },
      {
        "id" : "ee677125-7933-4ddb-a619-78aadec91cdc",
        "parentId" : "eadfde35-8f1c-43aa-84d3-805a614b225c",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "@fgrzadkowski , if we used the Informer pattern the question would consistent time-based sampling.  \n",
        "createdAt" : "2015-05-08T13:28:42Z",
        "updatedAt" : "2015-05-19T22:41:01Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "760f273c-29a3-47ca-bbbf-2e1aab2800c3",
        "parentId" : "eadfde35-8f1c-43aa-84d3-805a614b225c",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Let's go one step back. Why do you need queue at all? What was wrong with the previous approach where we were just listing pods?\n",
        "createdAt" : "2015-05-11T14:57:43Z",
        "updatedAt" : "2015-05-19T22:41:01Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "b4313ba4-5d9b-49d1-89f4-ced5cc9a987d",
        "parentId" : "eadfde35-8f1c-43aa-84d3-805a614b225c",
        "authorId" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "body" : "Pods are starting while we are waiting for the pods to be submitted from the rc.  To get an accurate pod start rate for the whole test we need to be able to query the pod starts while the rc is still submitting pods.  The previous approach would lost about 1/2 the pod starts because by the time the rc had finished submitting the pods a number of them had started already.\n",
        "createdAt" : "2015-05-11T15:05:21Z",
        "updatedAt" : "2015-05-19T22:41:01Z",
        "lastEditedBy" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "tags" : [
        ]
      },
      {
        "id" : "a6d2bd0e-3b4e-432e-976c-d9ad35879eb4",
        "parentId" : "eadfde35-8f1c-43aa-84d3-805a614b225c",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Is it bad? Have you found some scenarios where this data helped you debug them? If there are some concrete good use-cases then let's add this. Otherwise let's rethink this, because it adds complexity.\n",
        "createdAt" : "2015-05-11T15:08:44Z",
        "updatedAt" : "2015-05-19T22:41:01Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "09330cf5-d0eb-496e-8403-dc41910e1f34",
        "parentId" : "eadfde35-8f1c-43aa-84d3-805a614b225c",
        "authorId" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "body" : "Pods starting while the rc is submitting pods isn't bad.  In fact that is what I would expect to happen.  However with the old method there was no way to see the whole pod start curve because part of the data wasn't reported while the rc was submitting pods.  The csv file this creates can be used to generate graphs, etc\n",
        "createdAt" : "2015-05-11T15:16:36Z",
        "updatedAt" : "2015-05-19T22:41:01Z",
        "lastEditedBy" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "tags" : [
        ]
      },
      {
        "id" : "b27d9f06-4c13-479f-9f3f-9db27b1b4297",
        "parentId" : "eadfde35-8f1c-43aa-84d3-805a614b225c",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Let me rephrase - adding complexity just for the sake of generating file should be avoided. However if there is a real life example where this could be useful (e.g. during your recent debugging it'd save you X minutes) I'm all for it.\nI'm just trying to understand why are we doing it.\n",
        "createdAt" : "2015-05-11T17:59:32Z",
        "updatedAt" : "2015-05-19T22:41:01Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "451c3e54-b1e3-40f8-ab0e-69cdec28d98d",
        "parentId" : "eadfde35-8f1c-43aa-84d3-805a614b225c",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Currently I use scripts to do the work that rob has added. The scripts generated the graphs that led to a number of the issues we started logging back in Feb+March.  Ideally, I would like to push this data to Prometheus to have a simple rolled up cluster response curve to an impulse event (density).   We considered the \"push\" as a post process, and anyone can consume .csv and just go. \n\nThis gives us a rough swag, and if the slope of the response curve falls below a certain threshold we start rooting to determine where the issue is. \n",
        "createdAt" : "2015-05-11T19:48:03Z",
        "updatedAt" : "2015-05-19T22:41:01Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "3191b26bc6ca241fba85d0b183868f109e078213",
    "line" : null,
    "diffHunk" : "@@ -1,1 +560,564 @@\t\t// Greedily read all existing entries in the queue until\n\t\t// all pods are found submitted or the queue is empty\n\t\tfor podLists.Len() > 0 && current < replicas {\n\t\t\titem := podLists.Pop()\n\t\t\tpods := item.value.([]api.Pod)"
  },
  {
    "id" : "7dde56d8-417e-4d2c-a404-28ace846db76",
    "prId" : 7573,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17e57f38-f587-4cb5-b722-c0640e329a20",
        "parentId" : null,
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "For my own education - how can we use these debugging data? I only used it using `go tool pprof`.\n",
        "createdAt" : "2015-05-07T21:11:30Z",
        "updatedAt" : "2015-05-19T22:41:01Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "e73644a9-c7e5-4c09-a5e2-23d0696c895b",
        "parentId" : "17e57f38-f587-4cb5-b722-c0640e329a20",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "A very simple example is we can see a large spike in the # of go-routines in cases where we expect it to hold steady.   \n",
        "createdAt" : "2015-05-11T14:15:56Z",
        "updatedAt" : "2015-05-19T22:41:01Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "5cebabc7-2f74-4a44-8b0f-10a2681e6a1e",
        "parentId" : "17e57f38-f587-4cb5-b722-c0640e329a20",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "But this is a one-time snapshot, so it will not show us diffs. Am I missing something?\n",
        "createdAt" : "2015-05-11T14:58:53Z",
        "updatedAt" : "2015-05-19T22:41:01Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "9875522d-2529-469b-a5d8-8e20c4c83c37",
        "parentId" : "17e57f38-f587-4cb5-b722-c0640e329a20",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Yeah we only have a before and after snapshot atm, so it's pretty course grained. \n",
        "createdAt" : "2015-05-11T15:19:36Z",
        "updatedAt" : "2015-05-19T22:41:01Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "3191b26bc6ca241fba85d0b183868f109e078213",
    "line" : 329,
    "diffHunk" : "@@ -1,1 +993,997 @@\n// Retrieve debug information\nfunc getDebugInfo(c *client.Client) (map[string]string, error) {\n\tdata := make(map[string]string)\n\tfor _, key := range []string{\"block\", \"goroutine\", \"heap\", \"threadcreate\"} {"
  },
  {
    "id" : "25099fed-f648-48dc-8cdb-9c00ffaeda59",
    "prId" : 7573,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5cd86068-a841-43ce-8b4d-d60628a430db",
        "parentId" : null,
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Can you please add a comment that you read all available elements without sleeping? It was not obvious for me.\n",
        "createdAt" : "2015-05-14T20:14:49Z",
        "updatedAt" : "2015-05-19T22:41:01Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "7aa15a2a-6041-46e0-99d6-3ce4d72b2275",
        "parentId" : "5cd86068-a841-43ce-8b4d-d60628a430db",
        "authorId" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "body" : "done\n",
        "createdAt" : "2015-05-15T11:50:08Z",
        "updatedAt" : "2015-05-19T22:41:01Z",
        "lastEditedBy" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "tags" : [
        ]
      }
    ],
    "commit" : "3191b26bc6ca241fba85d0b183868f109e078213",
    "line" : null,
    "diffHunk" : "@@ -1,1 +598,602 @@\t\t// Greedily read all existing entries in the queue until\n\t\t// either all pods are running or the queue is empty\n\t\tfor podLists.Len() > 0 && current < replicas {\n\t\t\titem := podLists.Pop()\n\t\t\tcurrent = 0"
  },
  {
    "id" : "df823d9a-de0d-4f7a-9854-fe4e013221b4",
    "prId" : 7505,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d45249af-f13f-4fda-86c5-0035987d2074",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Can you please drop a TODO to improve this parsing in the future? :)\n",
        "createdAt" : "2015-04-29T13:04:23Z",
        "updatedAt" : "2015-05-05T09:51:32Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "2fcd0e8f-5d55-490f-a09c-f7f8eda237a8",
        "parentId" : "d45249af-f13f-4fda-86c5-0035987d2074",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Done.\n",
        "createdAt" : "2015-04-29T14:07:56Z",
        "updatedAt" : "2015-05-05T09:51:32Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "551cec2a21c5480f2f55cde6cc69857b85e4031b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +736,740 @@\t\t\t// apiserver_request_latencies_summary{resource=\"namespaces\",verb=\"LIST\",quantile=\"0.99\"} 908\n\t\t\t// TODO: This parsing code is long and not readable. We should improve it.\n\t\t\tkeyVal := strings.Split(line, \" \")\n\t\t\tif len(keyVal) != 2 {\n\t\t\t\treturn nil, fmt.Errorf(\"Error parsing metric %q\", line)"
  },
  {
    "id" : "31d51f93-d9da-450c-90fb-2c843fbfc7d3",
    "prId" : 7505,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cc3d2bc-f683-4ccb-8f2d-e26ace9e9e59",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "I didn't understand the \"quantile\" stuff (here and in the other function) -- can you add a comment?\n",
        "createdAt" : "2015-04-30T21:14:07Z",
        "updatedAt" : "2015-05-05T09:51:32Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "16e4eaa0-8b58-4cbf-a61c-f90fcd997847",
        "parentId" : "2cc3d2bc-f683-4ccb-8f2d-e26ace9e9e59",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Done\n",
        "createdAt" : "2015-05-04T09:28:57Z",
        "updatedAt" : "2015-05-05T09:51:32Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "551cec2a21c5480f2f55cde6cc69857b85e4031b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +772,776 @@\t\t\t// We are only interested in 99%tile, but for logging purposes\n\t\t\t// it's useful to have all the offending percentiles.\n\t\t\tmetric.quantile <= 0.99 &&\n\t\t\tmetric.latency > threshold {\n\t\t\tLogf(\"WARNING - requests with too high latency: %+v\", metric)"
  },
  {
    "id" : "157d752b-1c24-4898-bac5-49e0d73985d2",
    "prId" : 7505,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a600c10-db6b-481b-a9e0-f3c7b0ccfa59",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Add a comment with an example \"body\" that you are going to parse?\n",
        "createdAt" : "2015-04-30T21:14:47Z",
        "updatedAt" : "2015-05-05T09:51:32Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "09199780-f452-4ce6-a93e-8bafa131c31f",
        "parentId" : "4a600c10-db6b-481b-a9e0-f3c7b0ccfa59",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Done.\n",
        "createdAt" : "2015-05-04T09:29:01Z",
        "updatedAt" : "2015-05-05T09:51:32Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "551cec2a21c5480f2f55cde6cc69857b85e4031b",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +731,735 @@\t}\n\tmetrics := make([]LatencyMetric, 0)\n\tfor _, line := range strings.Split(string(body), \"\\n\") {\n\t\tif strings.HasPrefix(line, \"apiserver_request_latencies_summary{\") {\n\t\t\t// Example line:"
  },
  {
    "id" : "0fb24689-59f7-4dbb-a57e-1a045c1c2ccc",
    "prId" : 6553,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5186bce-a38b-4424-8a8d-f411823cb221",
        "parentId" : null,
        "authorId" : null,
        "body" : "nit: Does the 'Obj' suffix serve any purpose here?  I'd prefer plain 'namespace'.\n",
        "createdAt" : "2015-04-17T23:06:50Z",
        "updatedAt" : "2015-04-21T13:27:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "bbcfbe12-0020-4ffe-b807-fe41d6168001",
        "parentId" : "f5186bce-a38b-4424-8a8d-f411823cb221",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "Well... it clarified that its a object , not  a **string**  .  easy to assume \"namespace\" is a string typ.e   Still prefer name space or ok---?  \n",
        "createdAt" : "2015-04-17T23:55:26Z",
        "updatedAt" : "2015-04-21T13:27:50Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b43a6a97997f63353a378e1924dd54c3ca8d030",
    "line" : null,
    "diffHunk" : "@@ -1,1 +86,90 @@// createNS should be used by every test, note that we append a common prefix to the provided test name.\nfunc createTestingNS(baseName string, c *client.Client) (*api.Namespace, error) {\n\tnamespaceObj := &api.Namespace{\n\t\tObjectMeta: api.ObjectMeta{\n\t\t\tName:      fmt.Sprintf(\"e2e-tests-%v-%v\", baseName, uuid.New()),"
  },
  {
    "id" : "0f4f5ba5-b3e8-4a6a-9f27-aff536a77232",
    "prId" : 6553,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97a23896-20ea-4007-8ae4-2b66313de23e",
        "parentId" : null,
        "authorId" : null,
        "body" : "Do you really need to explicitly create the namespace?  I'm a bit vague on how all of this works internally.  I suspect that you can just decide on the namespace names here, along the lines of how test/e2e/services.go currently works. \n",
        "createdAt" : "2015-04-17T23:32:35Z",
        "updatedAt" : "2015-04-21T13:27:50Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "98551a7a-68c8-4553-8b84-986a86cae00a",
        "parentId" : "97a23896-20ea-4007-8ae4-2b66313de23e",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "Yes you do but there are ways to launch kube so n's is created dynamically.  Anyways for tests it's good to do this step by step don't you think?\n",
        "createdAt" : "2015-04-17T23:52:37Z",
        "updatedAt" : "2015-04-21T13:27:50Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "0691c404-8096-46a1-a834-af2de5c16204",
        "parentId" : "97a23896-20ea-4007-8ae4-2b66313de23e",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "To clarify : some clusters might configure the create namespace automatically feature differently.  Imo We shouldn't rely on that for e2es.. Sounds ok?\n",
        "createdAt" : "2015-04-17T23:58:44Z",
        "updatedAt" : "2015-04-21T13:27:50Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b43a6a97997f63353a378e1924dd54c3ca8d030",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +93,97 @@\t\tStatus: api.NamespaceStatus{},\n\t}\n\t_, err := c.Namespaces().Create(namespaceObj)\n\treturn namespaceObj, err\n}"
  },
  {
    "id" : "340af69b-cbab-4d81-8178-6cec6f2d06a3",
    "prId" : 5773,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a3c163e-cf47-4b57-9e03-21c49ba96091",
        "parentId" : null,
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "Please put these back at the top of the import block. See https://github.com/golang/go/wiki/CodeReviewComments#imports\n",
        "createdAt" : "2015-03-23T21:54:55Z",
        "updatedAt" : "2015-03-26T13:36:33Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      }
    ],
    "commit" : "60542d04ad86eb3f084ae661ae9473361a0289ab",
    "line" : null,
    "diffHunk" : "@@ -1,1 +20,24 @@\t\"bytes\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"os/exec\"\n\t\"path/filepath\""
  },
  {
    "id" : "5f2976ca-9454-43f3-b2cf-64183107ba97",
    "prId" : 5140,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92f224dc-1ff5-40c2-9646-23760f5f2be2",
        "parentId" : null,
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "This will always be a whole number, since we're printing the timeout, not elapsed time. I'm fine with `%.2f` if you feel strongly about seeing the `.00`, but I don't think it's a bug :)\n",
        "createdAt" : "2015-03-06T19:39:10Z",
        "updatedAt" : "2015-03-06T19:39:34Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "0624da1c-b899-40b0-9852-ef62a0c8d8ac",
        "parentId" : "92f224dc-1ff5-40c2-9646-23760f5f2be2",
        "authorId" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "body" : "This way you are free to change to timeout constant and then something reasonable will happen. Happy to change it to `%.0f` if you prefer.\n",
        "createdAt" : "2015-03-06T19:42:15Z",
        "updatedAt" : "2015-03-06T19:42:15Z",
        "lastEditedBy" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "tags" : [
        ]
      },
      {
        "id" : "f5c7ede7-6aae-4895-9324-414b31d639b6",
        "parentId" : "92f224dc-1ff5-40c2-9646-23760f5f2be2",
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "`%.2f` is fine. FWIW, `time.Duration` has an intelligent value printer, so printing the duration directly with `%v` also results in reasonable output of the form `30s, 5m0s`, etc, though the output was temporarily borked prior to #5134. Still, having it consistently print the timeout in seconds is worthwhile, so merged.\n",
        "createdAt" : "2015-03-06T19:47:42Z",
        "updatedAt" : "2015-03-06T19:47:42Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      }
    ],
    "commit" : "2685617a41848b3eeb6464cc10e1e863b856594e",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +73,77 @@\t\tLogf(\"Waiting for pod %s status to be %q (found %q) (%.2f seconds)\", podName, api.PodRunning, pod.Status.Phase, time.Since(start).Seconds())\n\t}\n\treturn fmt.Errorf(\"gave up waiting for pod %s to be %s after %.2f seconds\", podName, desc, podStartTimeout.Seconds())\n}\n"
  },
  {
    "id" : "fb4b3705-afb7-4888-adc3-970cc7e7607e",
    "prId" : 5106,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0dc53a3-2f6b-4668-b26e-e080b3d1dd71",
        "parentId" : null,
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "This func looks like an almost exact dupe of the previous one with a different success condition. Can you consolidate the shared logic into a helper function?\n",
        "createdAt" : "2015-03-05T22:34:26Z",
        "updatedAt" : "2015-03-05T23:54:56Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "081d3a59-cc17-42e9-8807-52ec9a9233f5",
        "parentId" : "c0dc53a3-2f6b-4668-b26e-e080b3d1dd71",
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "Moved shared logic into waitForPodCondition. \n",
        "createdAt" : "2015-03-05T23:57:12Z",
        "updatedAt" : "2015-03-05T23:57:12Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      }
    ],
    "commit" : "083f29158f92d7cecf5f04704269a33a5037d52c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +83,87 @@\n// waitForPodNotPending returns an error if it took too long for the pod to go out of pending state.\nfunc waitForPodNotPending(c *client.Client, ns, podName string) error {\n\treturn waitForPodCondition(c, ns, podName, \"!pending\", func(pod *api.Pod) (bool, error) {\n\t\tif pod.Status.Phase != api.PodPending {"
  },
  {
    "id" : "d76b125c-c62f-478d-a928-c637ca380327",
    "prId" : 3780,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72f4a78b-970c-4a71-8cfd-0aa915c4a47e",
        "parentId" : null,
        "authorId" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "body" : "When we give up on waiting or eventual bailout, how about dumping pod.Status for debugging? \n",
        "createdAt" : "2015-01-24T01:25:50Z",
        "updatedAt" : "2015-01-24T01:56:34Z",
        "lastEditedBy" : "a6409368-42e0-44a9-bf79-9d3042ac3b65",
        "tags" : [
        ]
      },
      {
        "id" : "74ac53f1-7af6-4f06-a2bc-fa116cdd3f45",
        "parentId" : "72f4a78b-970c-4a71-8cfd-0aa915c4a47e",
        "authorId" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "body" : "Good idea, but we should do this in a separate PR for improvements to the\nutil.go file.\n\nS\n\nOn Fri, Jan 23, 2015 at 5:26 PM, Dawn Chen notifications@github.com wrote:\n\n> In test/e2e/util.go\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/3780#discussion_r23492243\n> :\n> \n> > -   for i := 0; i < 10; i++ {\n> > -       if i > 0 {\n> > -           time.Sleep(5 \\* time.Second)\n> > -       }\n> > -       pod, err := c.Pods(api.NamespaceDefault).Get(podName)\n> > -       if err != nil {\n> > -           glog.Warningf(\"Get pod %s failed: %v\", podName, err)\n> > -           continue\n> > -       }\n> > -       if pod.Status.Phase != api.PodPending {\n> > -           glog.Infof(\"Saw pod %s out of pending state (found %q)\", podName, pod.Status.Phase)\n> > -           return true\n> > -       }\n> > -       glog.Infof(\"Waiting for pod %s status to be !%q (found %q)\", podName, api.PodPending, pod.Status.Phase)\n> > -   }\n> > -   glog.Warningf(\"Gave up waiting for pod %s status to go out of pending\", podName)\n> \n> When we give up on waiting or eventual bailout, how about dumping\n> pod.Status for debugging?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/3780/files#r23492243\n> .\n",
        "createdAt" : "2015-01-24T01:57:11Z",
        "updatedAt" : "2015-01-24T01:57:11Z",
        "lastEditedBy" : "9d07de69-76c2-43bd-9590-55d9aded200d",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d1ee816a1c29bb1a14f071195d77ba38267abe2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +74,78 @@\t\tglog.Infof(\"Waiting for pod %s status to be !%q (found %q)\", podName, api.PodPending, pod.Status.Phase)\n\t}\n\tglog.Warningf(\"Gave up waiting for pod %s status to go out of pending\", podName)\n\treturn false\n}"
  }
]