[
  {
    "id" : "7a30bdec-b15c-47c0-b500-e0b0b2897839",
    "prId" : 43548,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43548#pullrequestreview-30526814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "edc94d7f-f024-45b8-8000-425a486a3800",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "This helper should filter out pods not owned by the tested daemon set and the following zero in IsPodAvailable should be ds.Spec.MinReadySeconds.",
        "createdAt" : "2017-03-24T04:04:21Z",
        "updatedAt" : "2017-04-11T21:23:58Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "f81b6077-eb86-4f0a-b2c8-3b6d2bc70460",
        "parentId" : "edc94d7f-f024-45b8-8000-425a486a3800",
        "authorId" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "body" : "This function lists only pods with the selector from daemon. What else can I do here?",
        "createdAt" : "2017-03-24T13:03:20Z",
        "updatedAt" : "2017-04-11T21:23:58Z",
        "lastEditedBy" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "tags" : [
        ]
      },
      {
        "id" : "f6e0fbca-7bb4-47bf-98fb-cf2c42075fd5",
        "parentId" : "edc94d7f-f024-45b8-8000-425a486a3800",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "> This helper should filter out pods not owned by the tested daemon set and the following zero in IsPodAvailable should be ds.Spec.MinReadySeconds.\r\n  \r\n@kargakis did you mean filtering by controllerRef?",
        "createdAt" : "2017-03-24T21:36:50Z",
        "updatedAt" : "2017-04-11T21:23:58Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "6074cad3-b845-4a30-8876-5a1bc47caab3",
        "parentId" : "edc94d7f-f024-45b8-8000-425a486a3800",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Yes.",
        "createdAt" : "2017-03-25T08:05:49Z",
        "updatedAt" : "2017-04-11T21:23:58Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "92b4c97d-831c-4e54-8692-2e5d206bd34b",
        "parentId" : "edc94d7f-f024-45b8-8000-425a486a3800",
        "authorId" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "body" : "done",
        "createdAt" : "2017-04-03T14:12:15Z",
        "updatedAt" : "2017-04-11T21:23:58Z",
        "lastEditedBy" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7fbc5dcc3cdad3b619515cf59620e5f9bc76f2c",
    "line" : 259,
    "diffHunk" : "@@ -1,1 +521,525 @@\n\t\tnodesToPodCount := make(map[string]int)\n\t\tfor _, pod := range pods {\n\t\t\tif controllerRef := controller.GetControllerOf(&pod); controllerRef == nil || controllerRef.UID != ds.UID {\n\t\t\t\tcontinue"
  },
  {
    "id" : "91c81514-72d0-4caf-82d7-17720d6ec91e",
    "prId" : 43548,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43548#pullrequestreview-32145214",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "526408e2-3838-4ed5-8dce-c3633c225eed",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Can you switch the following log to something more informative? Something like \"Number of nodes with available pods: %d\"",
        "createdAt" : "2017-04-07T11:06:28Z",
        "updatedAt" : "2017-04-11T21:23:58Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "426953f8-444a-4a2f-9d64-ae226bca6a0d",
        "parentId" : "526408e2-3838-4ed5-8dce-c3633c225eed",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Also in L538 where false is returned because more than one pod is running in a node, add an additional log\r\n\r\n\"Node %q is running more than one daemon pod...\"",
        "createdAt" : "2017-04-07T11:07:48Z",
        "updatedAt" : "2017-04-11T21:23:58Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "8ed5bd9b-b2db-4b35-850e-8879e77951d3",
        "parentId" : "526408e2-3838-4ed5-8dce-c3633c225eed",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "And eventually before the last return, log:\r\n\r\n\"Running nodes are %d, available pods are %d\"",
        "createdAt" : "2017-04-07T11:08:57Z",
        "updatedAt" : "2017-04-11T21:23:58Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "bebeeef8-62fb-421b-8011-f071e46d5b47",
        "parentId" : "526408e2-3838-4ed5-8dce-c3633c225eed",
        "authorId" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "body" : "Done, except last comment. What do you mean by Running nodes?",
        "createdAt" : "2017-04-11T15:40:39Z",
        "updatedAt" : "2017-04-11T21:23:58Z",
        "lastEditedBy" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7fbc5dcc3cdad3b619515cf59620e5f9bc76f2c",
    "line" : 270,
    "diffHunk" : "@@ -1,1 +531,535 @@\t\t\t\tnodesToPodCount[pod.Spec.NodeName] += 1\n\t\t\t}\n\t\t}\n\t\tframework.Logf(\"Number of nodes with available pods: %d\", len(nodesToPodCount))\n"
  },
  {
    "id" : "dda6ccd3-2a2c-4a30-a00a-076decb5f205",
    "prId" : 43419,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43419#pullrequestreview-28229009",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d1027e1-b8d6-4263-86b6-d31dbece72ed",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Misses an error check ",
        "createdAt" : "2017-03-21T02:02:57Z",
        "updatedAt" : "2017-03-21T21:02:26Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "bfa7fd15-5861-4169-bf2d-03a95ed9274a",
        "parentId" : "0d1027e1-b8d6-4263-86b6-d31dbece72ed",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Patch can still conflict so I would suggest a retry loop that gets and updates the DS.",
        "createdAt" : "2017-03-21T13:50:05Z",
        "updatedAt" : "2017-03-21T21:02:26Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "7171ec31-5b58-44db-85a3-c9aaf4bdc8d7",
        "parentId" : "0d1027e1-b8d6-4263-86b6-d31dbece72ed",
        "authorId" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "body" : "How can it conflict in this situation? ",
        "createdAt" : "2017-03-21T15:26:46Z",
        "updatedAt" : "2017-03-21T21:02:26Z",
        "lastEditedBy" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "tags" : [
        ]
      },
      {
        "id" : "21036c25-3b4e-49dd-b59b-b9a26f08ac4d",
        "parentId" : "0d1027e1-b8d6-4263-86b6-d31dbece72ed",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "@deads2k can you weigh in?",
        "createdAt" : "2017-03-21T15:28:25Z",
        "updatedAt" : "2017-03-21T21:02:26Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "07704a55-0a10-48c9-8163-e361ba257381",
        "parentId" : "0d1027e1-b8d6-4263-86b6-d31dbece72ed",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> @deads2k can you weigh in?\r\n\r\nThere is a bug we are shipping 1.6 with (https://github.com/kubernetes/kubernetes/issues/42644), that can cause unexpected conflicts on high contention fields.  In the general case, such a thing is expected and not really unusual.  For contrived tests, a workaround like https://github.com/kubernetes/kubernetes/pull/42641 can work.",
        "createdAt" : "2017-03-21T17:08:31Z",
        "updatedAt" : "2017-03-21T21:02:26Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "d055c6c0-db27-4ffe-b3d2-e5aa833a7947",
        "parentId" : "0d1027e1-b8d6-4263-86b6-d31dbece72ed",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Not sure how to use the workaround like #42641 in this test, since controller will update DaemonSet as well and thus I'm not sure what resourceVersion I should wait on. I'll change this to retry on updates (instead of patch) until #42644 is fixed. ",
        "createdAt" : "2017-03-21T18:33:59Z",
        "updatedAt" : "2017-03-21T21:02:26Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "8b191557-bab8-41df-a8c5-1fabf9597498",
        "parentId" : "0d1027e1-b8d6-4263-86b6-d31dbece72ed",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "If you're not updating the daemonset node selector or updatestrategy you should be ok.  Conflicts only happen on contentious fields.",
        "createdAt" : "2017-03-21T19:44:00Z",
        "updatedAt" : "2017-03-21T21:02:26Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "e0798d7b-5962-4fb1-ba92-23817db5a21e",
        "parentId" : "0d1027e1-b8d6-4263-86b6-d31dbece72ed",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "if no other actor is touching them I mean.",
        "createdAt" : "2017-03-21T19:44:18Z",
        "updatedAt" : "2017-03-21T21:02:26Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "c0f61da9-f985-47bb-bb14-b741ae81292e",
        "parentId" : "0d1027e1-b8d6-4263-86b6-d31dbece72ed",
        "authorId" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "body" : "So changing image should be ok?",
        "createdAt" : "2017-03-21T20:21:09Z",
        "updatedAt" : "2017-03-21T21:02:26Z",
        "lastEditedBy" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "tags" : [
        ]
      },
      {
        "id" : "6f6efe7b-c70d-4832-89df-b6d9b19d6775",
        "parentId" : "0d1027e1-b8d6-4263-86b6-d31dbece72ed",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Yes, nothing else updates the fields updated by this patch (the controller is updating only status) so we should be fine. Useful though to keep in mind that Patch is not the perfect hammer:)",
        "createdAt" : "2017-03-21T20:25:12Z",
        "updatedAt" : "2017-03-21T21:02:26Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "e19cff2c-6cc7-4a75-86ab-767476fa3659",
        "parentId" : "0d1027e1-b8d6-4263-86b6-d31dbece72ed",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Oh great! Fixed by adding an error check ",
        "createdAt" : "2017-03-21T20:31:03Z",
        "updatedAt" : "2017-03-21T21:02:26Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "791a10f37f018e720329a6b3752826b4daf6d5b9",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +166,170 @@\t\tpatch := fmt.Sprintf(`{\"spec\":{\"template\":{\"spec\":{\"nodeSelector\":{\"%s\":\"%s\"}}},\"updateStrategy\":{\"type\":\"RollingUpdate\"}}}`,\n\t\t\tdaemonsetColorLabel, greenNode.Labels[daemonsetColorLabel])\n\t\tds, err = c.Extensions().DaemonSets(ns).Patch(dsName, types.StrategicMergePatchType, []byte(patch))\n\t\tExpect(err).NotTo(HaveOccurred(), \"error patching daemon set\")\n\t\tdaemonSetLabels, _ = separateDaemonSetNodeLabels(greenNode.Labels)"
  },
  {
    "id" : "d7b37eb9-dad9-48eb-a4cb-346fe600d3e0",
    "prId" : 42925,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42925#pullrequestreview-26431103",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d76f0ef-c300-4ea2-8924-258ccd6436eb",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "newDSName is prefixed with dsName so this check will be always ok even pods are restarted, right? I would simply make the newDsName totally different from dsName.",
        "createdAt" : "2017-03-11T14:04:51Z",
        "updatedAt" : "2017-03-13T18:37:46Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "06742fe0-2c5e-435e-b1a3-e23394ec01b3",
        "parentId" : "2d76f0ef-c300-4ea2-8924-258ccd6436eb",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Great catch! Fixed ",
        "createdAt" : "2017-03-11T20:55:19Z",
        "updatedAt" : "2017-03-13T18:37:46Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6e3993c968b8eeb24a30bc6edf5a906f833c511",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +361,365 @@\n\t\tBy(\"Make sure no pods are recreated by looking at their names\")\n\t\terr = checkDaemonSetPodsName(c, ns, dsName, label)\n\t\tExpect(err).NotTo(HaveOccurred())\n"
  },
  {
    "id" : "7f0ece97-be4b-475f-a5ce-c4cc73ee7224",
    "prId" : 42211,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42211#pullrequestreview-24357844",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "979ba8c8-5ca6-4cce-a9f0-88b985260d83",
        "parentId" : null,
        "authorId" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "body" : "You can also return `err` here",
        "createdAt" : "2017-02-28T09:54:45Z",
        "updatedAt" : "2017-03-08T19:41:40Z",
        "lastEditedBy" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "tags" : [
        ]
      },
      {
        "id" : "63994cd6-013c-4294-a53a-3eeddda23653",
        "parentId" : "979ba8c8-5ca6-4cce-a9f0-88b985260d83",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "This is the condition func for `wait.Poll`. If we return an `err` that's not `nil`, we'll immediately exit the wait loop instead of retrying again. ",
        "createdAt" : "2017-02-28T18:34:29Z",
        "updatedAt" : "2017-03-08T19:41:40Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "815ef713-62d3-4a19-8634-7eba2b74013f",
        "parentId" : "979ba8c8-5ca6-4cce-a9f0-88b985260d83",
        "authorId" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "body" : "ah, right",
        "createdAt" : "2017-02-28T22:29:18Z",
        "updatedAt" : "2017-03-08T19:41:40Z",
        "lastEditedBy" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc6ab8c6deb611ec8df22b784831ad365ddb505b",
    "line" : 182,
    "diffHunk" : "@@ -1,1 +591,595 @@\t\terr := checkDaemonPodsTemplateGeneration(c, ns, selector, templateGeneration)\n\t\tmatch := err == nil\n\t\treturn match, nil\n\t}\n}"
  },
  {
    "id" : "7436ea42-0f41-44fb-8c02-05472edd50d2",
    "prId" : 42211,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42211#pullrequestreview-24861635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04cc2ba1-19a0-45aa-9822-6b75f1888b50",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Don't we have this already somewhere else?",
        "createdAt" : "2017-03-02T12:15:06Z",
        "updatedAt" : "2017-03-08T19:41:40Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "0c09ba53-905f-47de-bc36-9903c7c5fced",
        "parentId" : "04cc2ba1-19a0-45aa-9822-6b75f1888b50",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "We have a `podByCreationTimestamp` in daemonset controller but it's `[]*v1.Pod` not `[]v1.Pod`",
        "createdAt" : "2017-03-02T22:31:46Z",
        "updatedAt" : "2017-03-08T19:41:40Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc6ab8c6deb611ec8df22b784831ad365ddb505b",
    "line" : 227,
    "diffHunk" : "@@ -1,1 +636,640 @@\n// podByCreationTimestamp sorts a list of DaemonSet pods by creation timestamp, using their names as a tie breaker.\ntype podByCreationTimestamp []v1.Pod\n\nfunc (o podByCreationTimestamp) Len() int      { return len(o) }"
  },
  {
    "id" : "6949f1f9-fbcf-4d2b-adc3-e985ddcd5138",
    "prId" : 42211,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42211#pullrequestreview-24858953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf9ee977-a3dd-4401-abdc-4a9a39cc6a1e",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Doesn't this depend on owner references?",
        "createdAt" : "2017-03-02T12:17:30Z",
        "updatedAt" : "2017-03-08T19:41:40Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "78cbb0b2-85b3-433d-9e65-6db968ae2d21",
        "parentId" : "cf9ee977-a3dd-4401-abdc-4a9a39cc6a1e",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "yes it depends on #42173",
        "createdAt" : "2017-03-02T22:18:29Z",
        "updatedAt" : "2017-03-08T19:41:40Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc6ab8c6deb611ec8df22b784831ad365ddb505b",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +342,346 @@\t\tBy(fmt.Sprintf(\"Deleting DaemonSet %s and orphaning its pods\", dsName))\n\t\ttrueVar := true\n\t\tdeleteOptions := &metav1.DeleteOptions{OrphanDependents: &trueVar}\n\t\tdeleteOptions.Preconditions = metav1.NewUIDPreconditions(string(ds.UID))\n\t\terr = c.Extensions().DaemonSets(ns).Delete(ds.Name, deleteOptions)"
  },
  {
    "id" : "b8546247-dc74-478c-b868-fdf7ebf3367a",
    "prId" : 41116,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/41116#pullrequestreview-23829253",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14b824d2-fe3b-47ca-97a3-e0ec08914671",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "We need a test that verifies adoption",
        "createdAt" : "2017-02-24T22:39:50Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "1748fa9a-c1f8-4d06-a92f-a4da6447ee75",
        "parentId" : "14b824d2-fe3b-47ca-97a3-e0ec08914671",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "And another test that verifies ds availability",
        "createdAt" : "2017-02-24T22:40:12Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "24dc8ad0-9d16-466e-a637-a6c23cc4af61",
        "parentId" : "14b824d2-fe3b-47ca-97a3-e0ec08914671",
        "authorId" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "body" : "I will add them in a new PR",
        "createdAt" : "2017-02-24T22:44:50Z",
        "updatedAt" : "2017-02-27T08:18:13Z",
        "lastEditedBy" : "63ae7701-0f8c-4ae2-9295-07a4434026ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d9c817db0b1dacf94db67585ad30ad36d856016",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +290,294 @@\t\tExpect(err).NotTo(HaveOccurred(), \"error waiting for daemon pod to start\")\n\t})\n\n})\n"
  },
  {
    "id" : "07be8844-9ba7-4d2f-8219-dcdd14dce0e3",
    "prId" : 16084,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9f336ec-636c-45e7-a54e-a290dd29b817",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "a part of me is wondering if Framework should allow passing a cleanup function or something which is guaranteed to run before Framework's afterEach cleanup function.\n",
        "createdAt" : "2015-10-22T23:04:14Z",
        "updatedAt" : "2015-10-26T23:10:23Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "8597e41e-f2a2-4fc7-8009-f4894fce6b2c",
        "parentId" : "a9f336ec-636c-45e7-a54e-a290dd29b817",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I'd prefer not to invent another ordering behavior on top of what Ginkgo already provides.  However, I agree the ordering is non obvious in some cases.\n\nFramework invoking before/after directly is part of the issue - I wonder if framework before each can set an after test for itself (so that the framework after is guaranteed to be called last).  \n",
        "createdAt" : "2015-10-23T01:54:28Z",
        "updatedAt" : "2015-10-26T23:10:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "1081d9d1-dcbc-4d62-bc13-8fa46a541758",
        "parentId" : "a9f336ec-636c-45e7-a54e-a290dd29b817",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "that's a clever hack. want to see if it works?\n",
        "createdAt" : "2015-10-23T01:58:27Z",
        "updatedAt" : "2015-10-26T23:10:23Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "69f0adcb-eaef-4caa-bebd-1a7ae35641f9",
        "parentId" : "a9f336ec-636c-45e7-a54e-a290dd29b817",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Maybe in a followup?\n",
        "createdAt" : "2015-10-24T18:22:16Z",
        "updatedAt" : "2015-10-26T23:10:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50fbd663645beca60b66dda07f53131bc29eb31",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +51,55 @@\tvar f *Framework\n\n\tAfterEach(func() {\n\t\terr := clearDaemonSetNodeLabels(f.Client)\n\t\tExpect(err).NotTo(HaveOccurred())"
  },
  {
    "id" : "b84dcdb3-3aed-41a5-b378-63d248118a01",
    "prId" : 15104,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78e4ea02-38cc-46bc-8355-bfdaed58b054",
        "parentId" : null,
        "authorId" : null,
        "body" : "nit: Why rename these?  I'm not crazy about the new name.\n",
        "createdAt" : "2015-10-05T21:09:12Z",
        "updatedAt" : "2015-10-05T22:54:28Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "fe820fc4df94eb81691f3047f9d1d4bf0bb11256",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +40,44 @@\t// this should not be a multiple of 5, because node status updates\n\t// every 5 seconds. See https://github.com/kubernetes/kubernetes/pull/14915.\n\tdsRetryPeriod  = 2 * time.Second\n\tdsRetryTimeout = 1 * time.Minute\n"
  },
  {
    "id" : "45a9d572-e5ed-4aef-84f9-9fffde798ef4",
    "prId" : 15104,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bfe81bb-7838-4c55-9add-1f2bb8845779",
        "parentId" : null,
        "authorId" : null,
        "body" : "nit: It would be nice to get rid of 'experimental' with a smarter import statement, so that if/when this gets promoted out of experimental, only the one import statement needs to change, not 10 lines of code.\n",
        "createdAt" : "2015-10-05T21:15:15Z",
        "updatedAt" : "2015-10-05T22:54:28Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "fe820fc4df94eb81691f3047f9d1d4bf0bb11256",
    "line" : null,
    "diffHunk" : "@@ -1,1 +75,79 @@\n\t\tLogf(\"Creating simple daemon set %s\", dsName)\n\t\t_, err := c.DaemonSets(ns).Create(&experimental.DaemonSet{\n\t\t\tObjectMeta: api.ObjectMeta{\n\t\t\t\tName: dsName,"
  },
  {
    "id" : "096ee285-6084-49a1-82db-691b44ac1161",
    "prId" : 15104,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b51a078-5c0b-4b54-bb9c-00cc51071610",
        "parentId" : null,
        "authorId" : null,
        "body" : "nit: It seems that this could better be pulled out into a separate test?\n",
        "createdAt" : "2015-10-05T21:21:16Z",
        "updatedAt" : "2015-10-05T22:54:28Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "fe820fc4df94eb81691f3047f9d1d4bf0bb11256",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +112,116 @@\t\tExpect(err).NotTo(HaveOccurred(), \"error waiting for daemon pod to start\")\n\n\t\tBy(\"Stop a daemon pod, check that the daemon pod is revived.\")\n\t\tpodClient := c.Pods(ns)\n"
  },
  {
    "id" : "24d28f51-382b-48f7-acc2-43a487673e4d",
    "prId" : 15104,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16d49317-1403-458d-bd47-5090cb534dcb",
        "parentId" : null,
        "authorId" : null,
        "body" : "Can we be consistent and check this in both tests?  Why do we check it here but not in the other test?\n",
        "createdAt" : "2015-10-05T21:22:50Z",
        "updatedAt" : "2015-10-05T22:54:28Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "fe820fc4df94eb81691f3047f9d1d4bf0bb11256",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +155,159 @@\t\tExpect(err).NotTo(HaveOccurred())\n\n\t\tBy(\"Initially, daemon pods should not be running on any nodes.\")\n\t\terr = wait.Poll(dsRetryPeriod, dsRetryTimeout, checkRunningOnNoNodes(f, complexLabel))\n\t\tExpect(err).NotTo(HaveOccurred(), \"error waiting for daemon pods to be running on no nodes\")"
  },
  {
    "id" : "55c36d84-0137-45b7-b96e-b45fe3df83d5",
    "prId" : 15104,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "19b0dddf-d72b-4ed2-bbca-eefc874591e0",
        "parentId" : null,
        "authorId" : null,
        "body" : "nit: This text should be reworded to \"deleting the daemon set\".\n",
        "createdAt" : "2015-10-05T21:24:29Z",
        "updatedAt" : "2015-10-05T22:54:28Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "fe820fc4df94eb81691f3047f9d1d4bf0bb11256",
    "line" : 142,
    "diffHunk" : "@@ -1,1 +176,180 @@\t\t\tNotTo(HaveOccurred(), \"error waiting for daemon pod to not be running on nodes\")\n\n\t\tBy(\"We should now be able to delete the daemon set.\")\n\t\tExpect(c.DaemonSets(ns).Delete(dsName)).NotTo(HaveOccurred())\n"
  },
  {
    "id" : "51a976ef-069c-4e5e-9790-263e8e3aaad3",
    "prId" : 15104,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b23c7465-fe1b-4204-993a-3a496cab918e",
        "parentId" : null,
        "authorId" : null,
        "body" : "nit: \"removing\" and \"waiting\", for correct grammar.\n",
        "createdAt" : "2015-10-05T21:25:09Z",
        "updatedAt" : "2015-10-05T22:54:28Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "fe820fc4df94eb81691f3047f9d1d4bf0bb11256",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +170,174 @@\t\tExpect(err).NotTo(HaveOccurred(), \"error waiting for daemon pods to be running on new nodes\")\n\n\t\tBy(\"remove the node selector and wait for daemons to be unscheduled\")\n\t\t_, err = setDaemonSetNodeLabels(c, nodeList.Items[0].Name, map[string]string{})\n\t\tExpect(err).NotTo(HaveOccurred(), \"error removing labels on node\")"
  },
  {
    "id" : "e2f9acff-282c-40a5-a195-de6854f70fe2",
    "prId" : 14915,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca1018bc-e635-466c-90a7-fb05100b5614",
        "parentId" : null,
        "authorId" : null,
        "body" : "nit: Please add a comment to explain why this should not be the same as the node status update interval, as per your description of this PR, so that it doesn't get lost in the mists of time.\n",
        "createdAt" : "2015-10-02T01:41:58Z",
        "updatedAt" : "2015-10-02T16:59:38Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "c9574560cc034e3d2fe33e67ea69a76c71262cc0",
    "line" : null,
    "diffHunk" : "@@ -1,1 +40,44 @@\t// this should not be a multiple of 5, because node status updates\n\t// every 5 seconds. See https://github.com/kubernetes/kubernetes/pull/14915.\n\tupdateRetryPeriod    = 2 * time.Second\n\tupdateRetryTimeout   = 30 * time.Second\n\tdaemonsetLabelPrefix = \"daemonset-\""
  },
  {
    "id" : "9b643e81-62eb-4cc5-8075-804afcad5705",
    "prId" : 14136,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "642d0bc4-ff9f-4b7e-8dc2-5f59ecbc57dc",
        "parentId" : null,
        "authorId" : null,
        "body" : "Same comments as above for this block of code.\n",
        "createdAt" : "2015-09-17T21:49:40Z",
        "updatedAt" : "2015-09-18T00:50:41Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "cd1229542faabfd7726dcb43f7a35d57565e01de",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +233,237 @@\tExpect(len(nodeList.Items)).To(BeNumerically(\">\", 0))\n\tnodeList.Items[0].Labels = nodeSelector\n\tvar newNode *api.Node\n\terr = wait.Poll(updateRetryPeriod, updateRetryTimeout, func() (bool, error) {\n\t\tnewNode, err = nodeClient.Update(&nodeList.Items[0])"
  },
  {
    "id" : "78ca9d6f-a27c-4098-9ed7-b73bfea0bb17",
    "prId" : 13183,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8267928-5723-4dfa-b648-71263a61e54a",
        "parentId" : null,
        "authorId" : "3c734967-9d67-42aa-a243-d401c1524cb6",
        "body" : "Can we add this for the other daemon created below? Thanks!\n",
        "createdAt" : "2015-09-15T00:49:01Z",
        "updatedAt" : "2015-09-16T01:13:40Z",
        "lastEditedBy" : "3c734967-9d67-42aa-a243-d401c1524cb6",
        "tags" : [
        ]
      },
      {
        "id" : "093aadfc-bb3f-44ab-a84b-ff2a1f6cde4b",
        "parentId" : "e8267928-5723-4dfa-b648-71263a61e54a",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "I've intentionally removed it. For the complex daemon, I've chosen to add a [test](https://github.com/kubernetes/kubernetes/pull/13183/files#diff-c1525034f2fb4c408e1a0fbf3babe41fR223) that unschedules the daemon pod by removing the nodeSelector from the node's labels so by the time we would reap the daemon set, there's nothing to do. Plus that path is tested already. Perhaps it would be a good spot to test that the namespace_controller properly deletes daemon sets when the namespace is deleted or maybe just test the delete method. WDYT?\n",
        "createdAt" : "2015-09-15T01:10:15Z",
        "updatedAt" : "2015-09-16T01:13:40Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "a325c26c-f4a4-4e25-b36f-2ddc2bd76c5a",
        "parentId" : "e8267928-5723-4dfa-b648-71263a61e54a",
        "authorId" : "3c734967-9d67-42aa-a243-d401c1524cb6",
        "body" : "Oh that makes sense! Yeah maybe we can just test the delete method then.\n",
        "createdAt" : "2015-09-15T05:41:03Z",
        "updatedAt" : "2015-09-16T01:13:40Z",
        "lastEditedBy" : "3c734967-9d67-42aa-a243-d401c1524cb6",
        "tags" : [
        ]
      },
      {
        "id" : "50ea8b79-c9a6-4d9c-9515-19fd140abe53",
        "parentId" : "e8267928-5723-4dfa-b648-71263a61e54a",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Done.\n",
        "createdAt" : "2015-09-15T20:34:23Z",
        "updatedAt" : "2015-09-16T01:13:40Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "52ccf54dab9aa831c15d843857b307fc0d484480",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +159,163 @@\t\tExpect(err).NotTo(HaveOccurred(), \"error waiting for daemon pod to be reaped\")\n\t}()\n\n\tBy(\"Check that daemon pods launch on every node of the cluster.\")\n\tExpect(err).NotTo(HaveOccurred())"
  },
  {
    "id" : "7adf88bc-8e94-434d-8716-94aca98c79f8",
    "prId" : 13182,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79e7a21a-edd2-4bd3-97a2-ceca4f512a76",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Can you add changing node selector to something that doesn't match, and verify the pod is killed? Should just be a few more lines of code.\n",
        "createdAt" : "2015-09-11T07:08:31Z",
        "updatedAt" : "2015-09-12T01:32:48Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "c6c7873b-e8de-4580-992d-97e1f4f52c0e",
        "parentId" : "79e7a21a-edd2-4bd3-97a2-ceca4f512a76",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Sorry, I mean changing node's label, not node selector.\n",
        "createdAt" : "2015-09-11T07:08:48Z",
        "updatedAt" : "2015-09-12T01:32:48Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d9a52d8af1cd194b111ffedfe118fd65123130b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +219,223 @@\tExpect(wait.Poll(retryInterval, retryTimeout, checkRunningOnNoNodes(f, complexLabel))).\n\t\tNotTo(HaveOccurred(), \"error waiting for daemon pod to not be running on nodes\")\n}"
  }
]