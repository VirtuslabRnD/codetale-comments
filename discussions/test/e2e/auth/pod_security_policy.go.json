[
  {
    "id" : "73cf6c4e-0d2b-4acd-aad4-9864e089d2ec",
    "prId" : 88033,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88033#pullrequestreview-356938270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1bb3312-a1fc-465d-8a2b-f3885f497f63",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "as long as we're using \"docker-default\", this seems sensible. @tallclair, does this make sense to you?",
        "createdAt" : "2020-02-11T19:37:20Z",
        "updatedAt" : "2020-02-11T19:37:20Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "f26dbc473d195a10094102b6289f764937609525",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +172,176 @@\t\tginkgo.By(\"Running a custom AppArmor profile pod\", func() {\n\t\t\taa := restrictedPod(\"apparmor\")\n\t\t\t// Every node is expected to have the docker-default profile.\n\t\t\taa.Annotations[apparmor.ContainerAnnotationKeyPrefix+\"pause\"] = \"localhost/docker-default\"\n\t\t\ttester(aa)"
  },
  {
    "id" : "9af7b004-008a-444e-8f8a-fe48a57f5f6a",
    "prId" : 76337,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76337#pullrequestreview-224626764",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec82ceba-4927-4c14-9aad-f330134bebe6",
        "parentId" : null,
        "authorId" : "73cba353-2317-4305-8981-830b29b34769",
        "body" : "goimports does this now for performance reasons since the path uses a symlink and the import path isnt the real path.",
        "createdAt" : "2019-04-09T17:48:59Z",
        "updatedAt" : "2019-04-17T21:40:09Z",
        "lastEditedBy" : "73cba353-2317-4305-8981-830b29b34769",
        "tags" : [
        ]
      },
      {
        "id" : "b62cefdc-5046-4daf-b51b-bafd87f87740",
        "parentId" : "ec82ceba-4927-4c14-9aad-f330134bebe6",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Ah, this is good to know. Always thought it was a vscode thing",
        "createdAt" : "2019-04-09T19:13:31Z",
        "updatedAt" : "2019-04-17T21:40:09Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "cea8e97c-f69a-4a2f-b1b2-af7bd720c07f",
        "parentId" : "ec82ceba-4927-4c14-9aad-f330134bebe6",
        "authorId" : "73cba353-2317-4305-8981-830b29b34769",
        "body" : "You're the 2nd person to suggest that to me but I tested manually with goimports and confirmed its not IDE based.",
        "createdAt" : "2019-04-09T20:07:37Z",
        "updatedAt" : "2019-04-17T21:40:09Z",
        "lastEditedBy" : "73cba353-2317-4305-8981-830b29b34769",
        "tags" : [
        ]
      }
    ],
    "commit" : "028df0451db7c982066930099fc701839d6e9f7e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +20,24 @@\t\"fmt\"\n\n\tv1 \"k8s.io/api/core/v1\"\n\tpolicy \"k8s.io/api/policy/v1beta1\"\n\trbacv1beta1 \"k8s.io/api/rbac/v1beta1\""
  },
  {
    "id" : "e9d9469f-285b-4dba-b6af-d4c340c8c296",
    "prId" : 67495,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67495#pullrequestreview-146776714",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f164a99b-7b39-4829-8e40-73c44acdaf94",
        "parentId" : null,
        "authorId" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "body" : "There is `createAndBindPSPInPolicy()` function (see below) that do the same. Just use it and remove this function.",
        "createdAt" : "2018-08-16T10:04:54Z",
        "updatedAt" : "2018-10-18T02:18:50Z",
        "lastEditedBy" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "tags" : [
        ]
      }
    ],
    "commit" : "e81776b140e7c1f1bb8e84c35e92363d3136e33d",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +190,194 @@\n// createAndBindPSP creates a PSP in the policy API group.\nfunc createAndBindPSP(f *framework.Framework, pspTemplate *policy.PodSecurityPolicy) (psp *policy.PodSecurityPolicy, cleanup func()) {\n\t// Create the PodSecurityPolicy object.\n\tpsp = pspTemplate.DeepCopy()"
  },
  {
    "id" : "4a3ee96f-7314-464e-bd98-ae1c352ad679",
    "prId" : 67495,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67495#pullrequestreview-147077585",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6820a78e-f9e1-4669-b42d-efeca699b2be",
        "parentId" : null,
        "authorId" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "body" : "Use `restrictedPSPInPolicy()` instead.",
        "createdAt" : "2018-08-16T10:05:36Z",
        "updatedAt" : "2018-10-18T02:18:50Z",
        "lastEditedBy" : "21b457d2-6f88-4a9f-8d5a-debafbcb6cfe",
        "tags" : [
        ]
      },
      {
        "id" : "6fec6eba-f91b-4fa3-bca7-894fb65a3173",
        "parentId" : "6820a78e-f9e1-4669-b42d-efeca699b2be",
        "authorId" : "63651353-3ff8-412c-8e42-e695800f30c6",
        "body" : "@php-coder Thanks for your review! I removed the old func, e2e tests and renamed func `*InPolicy`. PTAL. Thanks!",
        "createdAt" : "2018-08-17T01:50:19Z",
        "updatedAt" : "2018-10-18T02:18:50Z",
        "lastEditedBy" : "63651353-3ff8-412c-8e42-e695800f30c6",
        "tags" : [
        ]
      }
    ],
    "commit" : "e81776b140e7c1f1bb8e84c35e92363d3136e33d",
    "line" : 142,
    "diffHunk" : "@@ -1,1 +286,290 @@\n// restrictedPSPInPolicy creates a PodSecurityPolicy (in the \"policy\" API Group) that is most strict.\nfunc restrictedPSP(name string) *policy.PodSecurityPolicy {\n\treturn &policy.PodSecurityPolicy{\n\t\tObjectMeta: metav1.ObjectMeta{"
  },
  {
    "id" : "0d8e0ca7-7e67-4ba2-9b32-7ef6910ef63b",
    "prId" : 52367,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52367#pullrequestreview-72959994",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d1e29e1-e3fc-41bc-8f98-3e5e947a3cfc",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "these tests assume control over PSP permissions using RBAC... e2e today doesn't actually require RBAC. might need a similar skip-unless-RBAC test in the future (definitely before this could become a conformance test, etc)",
        "createdAt" : "2017-10-30T18:23:41Z",
        "updatedAt" : "2017-11-01T23:01:15Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2a0c36c9-1721-4a4e-8e7c-5a8b5d532f63",
        "parentId" : "6d1e29e1-e3fc-41bc-8f98-3e5e947a3cfc",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Done. We really need a better (read: non-heuristic) way of doing this in E2E tests... (https://github.com/kubernetes/kubernetes/pull/33706)",
        "createdAt" : "2017-10-30T19:34:57Z",
        "updatedAt" : "2017-11-01T23:01:15Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      }
    ],
    "commit" : "671a6aa0688e51475cefc190bcb76ebf01dd95c0",
    "line" : 111,
    "diffHunk" : "@@ -1,1 +109,113 @@\t\tif !framework.IsPodSecurityPolicyEnabled(f) {\n\t\t\tframework.Skipf(\"PodSecurityPolicy not enabled\")\n\t\t}\n\t\tif !framework.IsRBACEnabled(f) {\n\t\t\tframework.Skipf(\"RBAC not enabled\")"
  },
  {
    "id" : "856dd6cb-45cc-4f92-8bf2-c2644ecd7a0d",
    "prId" : 52367,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52367#pullrequestreview-73368589",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c79382c-9d2a-440f-af39-1594547a2ff7",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I don't know ginkgo well enough to know if sharing state between BeforeEach closures (possibly invoked multiple times?) and `It(\"...\", func)` blocks is ok... it certainly smells funny",
        "createdAt" : "2017-10-30T18:25:40Z",
        "updatedAt" : "2017-11-01T23:01:15Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "17cbabd5-f38e-4365-9a57-aa79b89e0a1d",
        "parentId" : "1c79382c-9d2a-440f-af39-1594547a2ff7",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "This is pretty common (framework is usually declared outside either blocks, and is stateful). I believe ginkgo calls the hierarchy of functions for each `It` leaf.",
        "createdAt" : "2017-10-30T19:40:38Z",
        "updatedAt" : "2017-11-01T23:01:15Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      },
      {
        "id" : "41212351-165c-4fd6-921e-1539def3a8c0",
        "parentId" : "1c79382c-9d2a-440f-af39-1594547a2ff7",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "for framework, sure, but you're assigning to `c`... run in parallel, still feels like it could cause races",
        "createdAt" : "2017-11-01T01:37:55Z",
        "updatedAt" : "2017-11-01T23:01:15Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e97147ff-1ef7-4222-a6d3-2280fbe404b2",
        "parentId" : "1c79382c-9d2a-440f-af39-1594547a2ff7",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "From the [ginkgo docs](https://onsi.github.io/ginkgo/):\r\n\r\n> - Ginkgo makes extensive use of closures to allow you to build descriptive test suites.\r\n> - You should make use of Describe and Context containers to expressively organize the behavior of your code.\r\n> - You can use BeforeEach to set up state for your specs. You use It to specify a single spec.\r\n> - In order to share state between a BeforeEach and an It you use closure variables, typically defined at the top of the most relevant Describe or Context container.\r\n\r\nAlso:\r\n> It is also a mistake to initialize a closure variable in a container block. If one of your Its mutates that variable, subsequent Its will receive the mutated value. This is a case of test pollution and can be hard to track down. **Always initialize your variables in BeforeEach blocks.**\r\n\r\nWhich makes me think that `It` blocks in a single context are always run serially? Ah, this explains it:\r\n\r\n> Ginkgo has support for running specs in parallel. It does this by spawning separate go test processes and serving specs to each process off of a shared queue. This is important for a BDD test framework, as the shared context of the closures does not parallelize well in-process.\r\n\r\nSo all tests within a single process run serially.",
        "createdAt" : "2017-11-01T02:08:57Z",
        "updatedAt" : "2017-11-01T23:01:15Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      }
    ],
    "commit" : "671a6aa0688e51475cefc190bcb76ebf01dd95c0",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +122,126 @@\t\t\tGroups:   serviceaccount.MakeGroupNames(ns),\n\t\t}\n\t\tc, err = clientset.NewForConfig(config)\n\t\tframework.ExpectNoError(err)\n"
  },
  {
    "id" : "4df90819-7f56-460e-a6d2-402ad83ac49c",
    "prId" : 52367,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52367#pullrequestreview-73367090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb012242-2588-4078-8f85-04e71337f448",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "nit: qualify name to be e2e-specific (`e2e.restrictive`, etc)",
        "createdAt" : "2017-11-01T01:36:17Z",
        "updatedAt" : "2017-11-01T23:01:15Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "22f975e0-141d-47d1-a046-683c9ce07a1a",
        "parentId" : "bb012242-2588-4078-8f85-04e71337f448",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "nevermind, saw you qualified it per test",
        "createdAt" : "2017-11-01T01:40:30Z",
        "updatedAt" : "2017-11-01T23:01:15Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "671a6aa0688e51475cefc190bcb76ebf01dd95c0",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +43,47 @@\trestrictivePSPTemplate = &extensionsv1beta1.PodSecurityPolicy{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName: \"restrictive\",\n\t\t\tAnnotations: map[string]string{\n\t\t\t\tseccomp.AllowedProfilesAnnotationKey:  \"docker/default\","
  }
]