[
  {
    "id" : "8234749f-d063-4f25-b784-c210539c6fb6",
    "prId" : 91685,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91685#pullrequestreview-423955738",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f658aa5-13c9-4370-aeeb-2cdcc5a56317",
        "parentId" : null,
        "authorId" : "580b4924-2623-4aee-8bbf-3e1735a9dc88",
        "body" : "#91416 adds some tooling that will restart the test in the event of a watch failure, if this ends up with any flakiness that may help",
        "createdAt" : "2020-06-03T21:37:38Z",
        "updatedAt" : "2020-06-05T04:58:25Z",
        "lastEditedBy" : "580b4924-2623-4aee-8bbf-3e1735a9dc88",
        "tags" : [
        ]
      }
    ],
    "commit" : "a504445086243627417aada477bc602594a71951",
    "line" : 158,
    "diffHunk" : "@@ -1,1 +307,311 @@\t\tfor sawAnnotations := false; !sawAnnotations; {\n\t\t\tselect {\n\t\t\tcase evt, ok := <-csrWatch.ResultChan():\n\t\t\t\tframework.ExpectEqual(ok, true, \"watch channel should not close\")\n\t\t\t\tframework.ExpectEqual(evt.Type, watch.Modified)"
  },
  {
    "id" : "d12e77a8-76ca-40ae-b103-bcd5d8a4c676",
    "prId" : 91558,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91558#pullrequestreview-421072261",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "622e5d48-f38e-4aa5-9f45-5103719e7c55",
        "parentId" : null,
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "CSRs are non-namespaced resources, so these need explicit cleanup handling right? Perhaps create a `createCSRWithCleanupFunc` function which returns a `CleanupFunc`?",
        "createdAt" : "2020-05-29T15:37:07Z",
        "updatedAt" : "2020-05-29T15:50:53Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      },
      {
        "id" : "f086fa34-003e-46d5-8dd2-d741729dd27d",
        "parentId" : "622e5d48-f38e-4aa5-9f45-5103719e7c55",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "the deletecollection at the end cleans them up",
        "createdAt" : "2020-05-29T15:44:56Z",
        "updatedAt" : "2020-05-29T15:50:53Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e11404ac1fa1c8acd81c7e651b8c7b002ab078ce",
    "line" : 258,
    "diffHunk" : "@@ -1,1 +273,277 @@\t\t_, err = csrClient.Create(context.TODO(), csrTemplate, metav1.CreateOptions{})\n\t\tframework.ExpectNoError(err)\n\t\tcreatedCSR, err := csrClient.Create(context.TODO(), csrTemplate, metav1.CreateOptions{})\n\t\tframework.ExpectNoError(err)\n"
  },
  {
    "id" : "489cb35a-e043-45c9-8296-7e3b8d68255c",
    "prId" : 91558,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91558#pullrequestreview-421077743",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38e308c1-c665-498f-9442-f4e0317ea897",
        "parentId" : null,
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "Is adding an arbitrary condition via the `/approval` subresource meant to be allowed? I don't see it mentioned anywhere but I could have missed it ðŸ‘€ ",
        "createdAt" : "2020-05-29T15:41:43Z",
        "updatedAt" : "2020-05-29T15:50:53Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      },
      {
        "id" : "b2d9ab11-9b73-43f4-88f0-24f52b156f41",
        "parentId" : "38e308c1-c665-498f-9442-f4e0317ea897",
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "`May 29 06:20:07.265: FAIL: patched object should have the applied condition, got []v1beta1.CertificateSigningRequestCondition{v1beta1.CertificateSigningRequestCondition{Type:\"ApprovalPatch\", Reason:\"e2e\", Message:\"\", LastUpdateTime:v1.Time{Time:time.Time{wall:0x0, ext:63726330007, loc:(*time.Location)(0x803b680)}}}}` ðŸ˜… ",
        "createdAt" : "2020-05-29T15:45:35Z",
        "updatedAt" : "2020-05-29T15:50:53Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      },
      {
        "id" : "b5faa255-8031-4325-a39b-d47e13b75627",
        "parentId" : "38e308c1-c665-498f-9442-f4e0317ea897",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "in general, arbitrary conditions are allowed\r\n\r\nCSR's treatment of Approved/Denied/Failed is the only special bit... this ensures other conditions behave normally",
        "createdAt" : "2020-05-29T15:45:45Z",
        "updatedAt" : "2020-05-29T15:50:53Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "af4ff0bb-579e-4201-a69c-9fab5cf96fa0",
        "parentId" : "38e308c1-c665-498f-9442-f4e0317ea897",
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "Ah, it seems you can, but the LastTransitionTime may be an issue here?",
        "createdAt" : "2020-05-29T15:46:13Z",
        "updatedAt" : "2020-05-29T15:50:53Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      },
      {
        "id" : "f21f1350-daea-458c-9b72-4e21ba202c30",
        "parentId" : "38e308c1-c665-498f-9442-f4e0317ea897",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "nah, just a typecast on the Type field:\r\n```\r\nExpected\r\n    <v1beta1.RequestConditionType>: ApprovalPatch\r\nto equal\r\n    <string>: ApprovalPatch\r\n```",
        "createdAt" : "2020-05-29T15:51:14Z",
        "updatedAt" : "2020-05-29T15:51:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e11404ac1fa1c8acd81c7e651b8c7b002ab078ce",
    "line" : 318,
    "diffHunk" : "@@ -1,1 +333,337 @@\t\tginkgo.By(\"patching /approval\")\n\t\tpatchedApproval, err := csrClient.Patch(context.TODO(), createdCSR.Name, types.MergePatchType,\n\t\t\t[]byte(`{\"metadata\":{\"annotations\":{\"patchedapproval\":\"true\"}},\"status\":{\"conditions\":[{\"type\":\"ApprovalPatch\",\"status\":\"True\",\"reason\":\"e2e\"}]}}`),\n\t\t\tmetav1.PatchOptions{}, \"approval\")\n\t\tframework.ExpectNoError(err)"
  },
  {
    "id" : "cb545994-cfa3-410b-af8b-c03daf0e97c5",
    "prId" : 91558,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91558#pullrequestreview-421073256",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61565b16-3dad-438e-9bfe-e982c834e1c2",
        "parentId" : null,
        "authorId" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "body" : "How come the difference in condition type between the Patch and Update test?",
        "createdAt" : "2020-05-29T15:42:32Z",
        "updatedAt" : "2020-05-29T15:50:53Z",
        "lastEditedBy" : "c5a78ad1-2727-48a6-8217-285a102b94de",
        "tags" : [
        ]
      },
      {
        "id" : "d618f251-a437-47bc-b463-1fc8dffc77cd",
        "parentId" : "61565b16-3dad-438e-9bfe-e982c834e1c2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I needed two different conditions so I could tell the write was effective",
        "createdAt" : "2020-05-29T15:46:14Z",
        "updatedAt" : "2020-05-29T15:50:53Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "e11404ac1fa1c8acd81c7e651b8c7b002ab078ce",
    "line" : 328,
    "diffHunk" : "@@ -1,1 +343,347 @@\t\tapprovalToUpdate := patchedApproval.DeepCopy()\n\t\tapprovalToUpdate.Status.Conditions = append(approvalToUpdate.Status.Conditions, certificatesv1beta1.CertificateSigningRequestCondition{\n\t\t\tType:    certificatesv1beta1.CertificateApproved,\n\t\t\tReason:  \"E2E\",\n\t\t\tMessage: \"Set from an e2e test\","
  }
]