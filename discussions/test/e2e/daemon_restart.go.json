[
  {
    "id" : "e4b496c1-0009-407b-98eb-873eb0a48030",
    "prId" : 20455,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "282a47c6-a32c-40b6-abaa-6d1fbcdeaaa3",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "since all disruptive tests must be run in serial, what's the difference?\n",
        "createdAt" : "2016-02-02T00:10:58Z",
        "updatedAt" : "2016-02-02T00:10:58Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "bc7c7087-b288-48df-8122-c7c845fae74c",
        "parentId" : "282a47c6-a32c-40b6-abaa-6d1fbcdeaaa3",
        "authorId" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "body" : "https://github.com/kubernetes/kubernetes/blob/master/docs/devel/e2e-tests.md#kinds-of-tests\n",
        "createdAt" : "2016-02-02T00:27:43Z",
        "updatedAt" : "2016-02-02T00:27:43Z",
        "lastEditedBy" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "tags" : [
        ]
      },
      {
        "id" : "fb4fe75d-9a3e-47dc-bba4-3fce8260339f",
        "parentId" : "282a47c6-a32c-40b6-abaa-6d1fbcdeaaa3",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "ah, we should totally be tolerant to disruptions in soak-serial but yeah, makes sense \n",
        "createdAt" : "2016-02-02T00:32:45Z",
        "updatedAt" : "2016-02-02T16:33:23Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "fcc58a7c-dc8c-44e3-a8af-d90b98830310",
        "parentId" : "282a47c6-a32c-40b6-abaa-6d1fbcdeaaa3",
        "authorId" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "body" : "We should be tolerant, but it defeats the purpose of soak; if we're trying to see what happens when clusters are alive for a long time, bonking them often doesn't help us get there.\n",
        "createdAt" : "2016-02-02T01:49:44Z",
        "updatedAt" : "2016-02-02T01:49:44Z",
        "lastEditedBy" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "tags" : [
        ]
      },
      {
        "id" : "28355772-a845-459a-8c63-834e099ae6e2",
        "parentId" : "282a47c6-a32c-40b6-abaa-6d1fbcdeaaa3",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Ah, you mean don't restart things. I'd assumed disruptive would include all sorts of netsplit, storage loss etc but more likely that it more or less translates to reboot and daemon restart today.\n",
        "createdAt" : "2016-02-02T01:52:26Z",
        "updatedAt" : "2016-02-02T01:52:26Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "ba48d940-09c7-421a-9511-31d7e6e2fc34",
        "parentId" : "282a47c6-a32c-40b6-abaa-6d1fbcdeaaa3",
        "authorId" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "body" : "Yes, you're right.  Filed #20491.\n",
        "createdAt" : "2016-02-02T16:31:57Z",
        "updatedAt" : "2016-02-02T16:31:57Z",
        "lastEditedBy" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "tags" : [
        ]
      }
    ],
    "commit" : "dea73fd306c1ffe368b1ca2f3349a53221882ad6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +184,188 @@}\n\nvar _ = Describe(\"DaemonRestart [Disruptive]\", func() {\n\n\tframework := NewFramework(\"daemonrestart\")"
  },
  {
    "id" : "75e7d9a1-218e-4a23-a161-38ac640bf01f",
    "prId" : 16084,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22df8f02-e13e-449a-a516-25b830a02185",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "looks like this was the thing we missed... this `AfterEach` needs to be defined before `NewFramework` is called as well.\n",
        "createdAt" : "2015-10-27T22:05:33Z",
        "updatedAt" : "2015-10-27T22:05:33Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50fbd663645beca60b66dda07f53131bc29eb31",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +247,251 @@\tAfterEach(func() {\n\t\tclose(stopCh)\n\t\texpectNoError(DeleteRC(framework.Client, ns, rcName))\n\t})\n"
  },
  {
    "id" : "f7a7b84a-77c9-4d3b-9808-fcef6a1c7121",
    "prId" : 15062,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3af74515-b99b-472a-85e5-a409a770d57e",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "/s/Enabale/Enable/\n",
        "createdAt" : "2015-10-05T09:56:57Z",
        "updatedAt" : "2015-10-05T09:56:57Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "2519ebe644a93ad77779eb79b89aa642466a2366",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +242,246 @@\tIt(\"Scheduler should continue assigning pods to nodes across restart\", func() {\n\n\t\t// TODO: Enabale this test in GKE once experimental API there is switched on\n\t\tSkipIfProviderIs(\"gke\")\n"
  },
  {
    "id" : "def167aa-16f3-4997-913f-d0b644e72660",
    "prId" : 14965,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33f4cc75-864d-4ad2-a994-5dc8f0d3a7f9",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Add a comment why you skip in this case?\n",
        "createdAt" : "2015-10-03T19:22:33Z",
        "updatedAt" : "2015-10-03T19:22:33Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc46de5e682f294c934d50107134cb14347ce740",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +136,140 @@\nfunc (p *podTracker) remember(pod *api.Pod, eventType string) {\n\tif eventType == UPDATE && pod.Status.Phase == api.PodRunning {\n\t\treturn\n\t}"
  },
  {
    "id" : "37db6850-552e-4a71-be68-0cb27d7d9893",
    "prId" : 11339,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b712c95-d17e-44bd-97a1-95db37d22c80",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "If I'm not mistaken even if Kubelet updated pod, there's only a couple of things that might have changed. I believe that we only allow updating Images of containers: https://github.com/GoogleCloudPlatform/kubernetes/blob/master/pkg/api/validation/validation.go#L969.\n\nChecking keys should be enough though.\n",
        "createdAt" : "2015-07-23T11:59:18Z",
        "updatedAt" : "2015-08-18T03:40:10Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "103bfef4-73a2-4b72-b2ac-fcf8dfcf8343",
        "parentId" : "4b712c95-d17e-44bd-97a1-95db37d22c80",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "It can update pretty much the entire status. \n",
        "createdAt" : "2015-07-23T23:27:52Z",
        "updatedAt" : "2015-08-18T03:40:10Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "83f1212e0bb3e7b6d1bd6769583bb45681da7e38",
    "line" : null,
    "diffHunk" : "@@ -1,1 +224,228 @@\n\t\t// Only check the keys, the pods can be different if the kubelet updated it.\n\t\t// TODO: Can it really?\n\t\texistingKeys := util.NewStringSet()\n\t\tnewKeys := util.NewStringSet()"
  },
  {
    "id" : "0f4cc633-b7b8-42d2-ba6c-c437844ec2ff",
    "prId" : 11339,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4fa4bba-6142-4754-8a51-f72da9f9b96f",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "This should be good enough, IIUC how Monit works. IIUC monit does not restart things straight away, but marks daemons as unresponsive and restarts them in the next pass (which is 2 minutes later). If I'm mistaken and Monit tries to restart things instantly, then we can get false positives here. Either way it needs a comment.\n",
        "createdAt" : "2015-07-23T12:02:41Z",
        "updatedAt" : "2015-08-18T03:40:10Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "fe11074c-c4f5-4d93-91d5-2c7343e003bd",
        "parentId" : "b4fa4bba-6142-4754-8a51-f72da9f9b96f",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Scheduler is restarted by kubelet but point is still valid. \n",
        "createdAt" : "2015-07-23T23:27:53Z",
        "updatedAt" : "2015-08-18T03:40:10Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "83f1212e0bb3e7b6d1bd6769583bb45681da7e38",
    "line" : null,
    "diffHunk" : "@@ -1,1 +250,254 @@\t\t// This is best effort to try and create pods while the scheduler is down,\n\t\t// since we don't know exactly when it is restarted after the kill signal.\n\t\texpectNoError(ScaleRC(framework.Client, ns, rcName, numPods+5, false))\n\t\trestarter.waitUp()\n\t\texpectNoError(ScaleRC(framework.Client, ns, rcName, numPods+5, true))"
  },
  {
    "id" : "d02ec7f3-84f5-4ca7-ab86-72848d09de8a",
    "prId" : 11339,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95a034e5-2009-47b7-b87c-d80b4ff30ed4",
        "parentId" : null,
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "GKE has SSH to nodes. Have you tested on GKE?\n",
        "createdAt" : "2015-07-24T17:42:23Z",
        "updatedAt" : "2015-08-18T03:40:10Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      },
      {
        "id" : "11cf73e9-f53a-46c8-9663-2aa6e91b16d2",
        "parentId" : "95a034e5-2009-47b7-b87c-d80b4ff30ed4",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Can I enable it on gke in a follow up pr? don't have a cluster now and would like to see if it flakes on gce to begin with anyway. Added a TODO.\n",
        "createdAt" : "2015-07-24T19:06:32Z",
        "updatedAt" : "2015-08-18T03:40:10Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "83f1212e0bb3e7b6d1bd6769583bb45681da7e38",
    "line" : null,
    "diffHunk" : "@@ -1,1 +167,171 @@\t\t// These tests require SSH\n\t\t// TODO: Enable on gke after testing (#11834)\n\t\tif !providerIs(\"gce\") {\n\t\t\tBy(fmt.Sprintf(\"Skipping test, which is not implemented for %s\", testContext.Provider))\n\t\t\treturn"
  },
  {
    "id" : "ae4ad8ef-f045-4ecb-aa2a-6c8b026de4a6",
    "prId" : 11339,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa33e134-33c7-4702-8bd0-95763e1794df",
        "parentId" : null,
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "nit: first two `%v`s can be `%d`\n",
        "createdAt" : "2015-07-24T22:24:02Z",
        "updatedAt" : "2015-08-18T03:40:10Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      },
      {
        "id" : "218bf259-80e9-4638-bc69-839b374446ad",
        "parentId" : "fa33e134-33c7-4702-8bd0-95763e1794df",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "I believe use of `%v` is encouraged in go.\n",
        "createdAt" : "2015-07-27T15:47:36Z",
        "updatedAt" : "2015-08-18T03:40:10Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "69326d29-6cc4-450c-be0c-04849d36c119",
        "parentId" : "fa33e134-33c7-4702-8bd0-95763e1794df",
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "I think it's best to use the most specific symbol possible, correct? `%v` prints anything, but `%d` informs the reader of the code the type that is expected.\n",
        "createdAt" : "2015-07-27T17:46:16Z",
        "updatedAt" : "2015-08-18T03:40:10Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      },
      {
        "id" : "2da67703-c1cb-4610-a894-b3610e56e1f7",
        "parentId" : "fa33e134-33c7-4702-8bd0-95763e1794df",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I don't have an opinion-- I tend to use %v unless I want some specific format, though.\n",
        "createdAt" : "2015-07-27T20:46:14Z",
        "updatedAt" : "2015-08-18T03:40:10Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "0a0bfa45-e88e-4b28-bdbe-1b4945deb150",
        "parentId" : "fa33e134-33c7-4702-8bd0-95763e1794df",
        "authorId" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "body" : "Let's paint a bikeshed! I learned all Go I know from @roberthbailey \n",
        "createdAt" : "2015-07-27T21:27:48Z",
        "updatedAt" : "2015-08-18T03:40:10Z",
        "lastEditedBy" : "e7e1d709-e9c3-47a5-91f2-ed86958679e2",
        "tags" : [
        ]
      },
      {
        "id" : "d48fdc79-f3e4-4b08-b78f-7613619d99af",
        "parentId" : "fa33e134-33c7-4702-8bd0-95763e1794df",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "I agree - let's just allow everyone to use %v or %d or %unicorns as they please.\n",
        "createdAt" : "2015-07-28T12:59:33Z",
        "updatedAt" : "2015-08-18T03:40:10Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "69d0c44b-13a8-4f40-aba5-634ed31f3dc7",
        "parentId" : "fa33e134-33c7-4702-8bd0-95763e1794df",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "I personally use the most specific formatter (as do other folks I know) but it isn't strictly necessary. I'd leave it to the discretion of the reviewer. \n",
        "createdAt" : "2015-07-28T15:54:06Z",
        "updatedAt" : "2015-08-18T03:40:10Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      }
    ],
    "commit" : "83f1212e0bb3e7b6d1bd6769583bb45681da7e38",
    "line" : 272,
    "diffHunk" : "@@ -1,1 +270,274 @@\t\tif postRestarts != preRestarts {\n\t\t\tdumpNodeDebugInfo(framework.Client, badNodes)\n\t\t\tFailf(\"Net container restart count went from %v -> %v after kubelet restart on nodes %v\", preRestarts, postRestarts, badNodes)\n\t\t}\n\t})"
  }
]