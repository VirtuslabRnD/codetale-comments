[
  {
    "id" : "ddb5ef01-ccc9-4c8c-93d5-21d981ca6b74",
    "prId" : 69105,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69105#pullrequestreview-160468757",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80f8b4b3-0232-4bcf-a73a-da901230c5a0",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "i like the approach.\r\n it creates some boilerplate, but overall this seems to comply with the demands of individual tests?\r\n\r\ni will defer to the maintainers though for more reviews.\r\n",
        "createdAt" : "2018-10-01T20:24:30Z",
        "updatedAt" : "2018-10-05T12:28:59Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "4423735dc3afa69e4a550518fdef0f010fd365ae",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +24,28 @@// same approach as in https://godoc.org/github.com/jessevdk/go-flags,\n// but implemented so that a test suite can continue to use the normal\n// \"flag\" package.\n//\n// For example, a file storage/csi.go might define:"
  },
  {
    "id" : "d979b615-950b-4324-b4aa-b84ce77538c9",
    "prId" : 69105,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69105#pullrequestreview-161950264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ed7689f-7be4-4ec2-a009-6e1c0d35029f",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "You might want to put a blurb about this state of versioning support.  TBH I don't think this is an area where backwards compatibility in configuration files should matter. ",
        "createdAt" : "2018-10-04T20:49:47Z",
        "updatedAt" : "2018-10-05T12:28:59Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "d0fdf96f-8a15-483e-a8f3-b6c188239314",
        "parentId" : "6ed7689f-7be4-4ec2-a009-6e1c0d35029f",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "With \"blurb about this state of versioning support\", do you mean adding a warning that renaming fields or the common prefix is a user-visible change? I've added that and also updated the example a bit:\r\n* the example, including the corresponding command line flags, is presented completely before moving towards the definition of the underlying mechanism\r\n* the \"scaling\" part has to be defined in the prefix, because the struct name cannot be determined automatically (in this example, the struct is anonymous), nor is that desirable (it could be something that has no meaning outside of the source code)\r\n\r\n",
        "createdAt" : "2018-10-05T09:12:02Z",
        "updatedAt" : "2018-10-05T12:28:59Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      }
    ],
    "commit" : "4423735dc3afa69e4a550518fdef0f010fd365ae",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +26,30 @@// \"flag\" package.\n//\n// For example, a file storage/csi.go might define:\n//\n//     var scaling struct {"
  },
  {
    "id" : "88486a0e-94df-41a1-bd17-f8e341059f53",
    "prId" : 69105,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69105#pullrequestreview-161951838",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01248b69-012a-4a92-9afe-798aa1fa9dd9",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "pflag.",
        "createdAt" : "2018-10-04T21:02:53Z",
        "updatedAt" : "2018-10-05T12:28:59Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "04e5abed-080e-4f52-ac74-212bfbfd842f",
        "parentId" : "01248b69-012a-4a92-9afe-798aa1fa9dd9",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "No, not here. It's really https://godoc.org/flag and not https://godoc.org/github.com/spf13/pflag. `test/e2e` parses the command line with the former, in contrast to `test/e2e_node`, which uses the latter. So the \"lingua franca\" for defining flags that work everywhere has to be the `flag` package from the Go library.\r\n",
        "createdAt" : "2018-10-05T09:16:26Z",
        "updatedAt" : "2018-10-05T12:28:59Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      }
    ],
    "commit" : "4423735dc3afa69e4a550518fdef0f010fd365ae",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +88,92 @@// is the same as the default in the flag package, but can also be\n// something else (for example during testing).\nvar CommandLine = flag.CommandLine\n\n// AddOptions analyzes the options value and creates the necessary"
  },
  {
    "id" : "552c8ee9-202f-47b6-a5b0-80605bab72a7",
    "prId" : 69105,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69105#pullrequestreview-163383472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ba193478-e130-4582-9714-854ace3960b4",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "IMO we should avoid the panics and propagate errors where possible. ",
        "createdAt" : "2018-10-04T21:44:57Z",
        "updatedAt" : "2018-10-05T12:28:59Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "46b172bf-2293-4c16-bcaf-60e1bef12f10",
        "parentId" : "ba193478-e130-4582-9714-854ace3960b4",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "`AddOptions` is meant to be called as initializer for a global variable, so pushing the error handling to the caller would just make using it harder. There's also not much that the caller can do besides panicking: this is a programming mistake that must be fixed before the test suite can be used.\r\n\r\nThis is similar to `re.MustCompile` or `flag.Var`, which also panic when the input is incorrect.\r\n",
        "createdAt" : "2018-10-05T09:21:56Z",
        "updatedAt" : "2018-10-05T12:28:59Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      },
      {
        "id" : "e8536872-e8a4-488b-b3c4-9f8681a49d00",
        "parentId" : "ba193478-e130-4582-9714-854ace3960b4",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "Actually, because `flag.Var` is called indirectly, `AddOptions` already panics in some cases (redefining flags), which is outside of our control. We might as well then also do the same for cases detected in our code.\r\n\r\n",
        "createdAt" : "2018-10-05T09:25:42Z",
        "updatedAt" : "2018-10-05T12:28:59Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      },
      {
        "id" : "3c19de73-5f0b-480f-b0f2-2b3d57464a7e",
        "parentId" : "ba193478-e130-4582-9714-854ace3960b4",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "I'm ok with it for now, but not a huge fan as it can be an anti-pattern is downstream folks import to leverage.  ",
        "createdAt" : "2018-10-10T14:24:08Z",
        "updatedAt" : "2018-10-10T14:32:33Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "4423735dc3afa69e4a550518fdef0f010fd365ae",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +105,109 @@\toptionsType := reflect.TypeOf(options)\n\tif optionsType == nil {\n\t\tpanic(\"options parameter without a type - nil?!\")\n\t}\n\tif optionsType.Kind() != reflect.Ptr || optionsType.Elem().Kind() != reflect.Struct {"
  },
  {
    "id" : "c3c40be0-0987-4803-8fda-51bc7ceabd73",
    "prId" : 69105,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69105#pullrequestreview-161957199",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1de0cccd-f735-413a-9d60-a94c50d7e096",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "It seems like this init block should be a utility function. ",
        "createdAt" : "2018-10-04T21:46:24Z",
        "updatedAt" : "2018-10-05T12:28:59Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "42aa03b1-bf4e-49a5-ac1d-911071ffb23f",
        "parentId" : "1de0cccd-f735-413a-9d60-a94c50d7e096",
        "authorId" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "body" : "Done.\r\n",
        "createdAt" : "2018-10-05T09:31:32Z",
        "updatedAt" : "2018-10-05T12:28:59Z",
        "lastEditedBy" : "ba0b9c6e-ec4c-4d1b-832e-751e6109bf38",
        "tags" : [
        ]
      }
    ],
    "commit" : "4423735dc3afa69e4a550518fdef0f010fd365ae",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +116,120 @@func addStructFields(structType reflect.Type, structValue reflect.Value, prefix string) {\n\tfor i := 0; i < structValue.NumField(); i++ {\n\t\tentry := structValue.Field(i)\n\t\taddr := entry.Addr()\n\t\tstructField := structType.Field(i)"
  }
]