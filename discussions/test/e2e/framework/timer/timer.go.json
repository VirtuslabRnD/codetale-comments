[
  {
    "id" : "fc46656a-7368-4691-9035-02dbb5f73e81",
    "prId" : 54992,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/54992#pullrequestreview-75518607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "799165e4-45b3-46e5-b3a9-7b8602bb005b",
        "parentId" : null,
        "authorId" : "57a5e7e7-e6d7-467b-96ab-41e4ca978eee",
        "body" : "You seem to set this sequence number manually for ordering the steps. However, that doesn't seem very convenient and is an overhead for someone adding new phases to rightly calculate it by looking at ordering of other code blocks. I suggest automating it - probably by using a counter inside TestPhaseTimer.",
        "createdAt" : "2017-11-08T13:45:55Z",
        "updatedAt" : "2017-11-09T16:12:34Z",
        "lastEditedBy" : "57a5e7e7-e6d7-467b-96ab-41e4ca978eee",
        "tags" : [
        ]
      },
      {
        "id" : "85e2e401-7a74-4de4-b93c-ccb8889f8c00",
        "parentId" : "799165e4-45b3-46e5-b3a9-7b8602bb005b",
        "authorId" : "9cd12d42-ba38-4d33-b922-51e6f29f48e7",
        "body" : "I added a comment to StartPhase explaining why this is necessary.",
        "createdAt" : "2017-11-09T10:57:00Z",
        "updatedAt" : "2017-11-09T16:12:34Z",
        "lastEditedBy" : "9cd12d42-ba38-4d33-b922-51e6f29f48e7",
        "tags" : [
        ]
      },
      {
        "id" : "30a15a21-cd3b-4ab7-b534-4baff2abe496",
        "parentId" : "799165e4-45b3-46e5-b3a9-7b8602bb005b",
        "authorId" : "57a5e7e7-e6d7-467b-96ab-41e4ca978eee",
        "body" : "Yup.. saw that. But I'm not sure I understand why that can't be auto-calculated using a counter?",
        "createdAt" : "2017-11-09T11:28:54Z",
        "updatedAt" : "2017-11-09T16:12:34Z",
        "lastEditedBy" : "57a5e7e7-e6d7-467b-96ab-41e4ca978eee",
        "tags" : [
        ]
      },
      {
        "id" : "1385f7db-620a-4ed5-9c8b-eb95d30eb262",
        "parentId" : "799165e4-45b3-46e5-b3a9-7b8602bb005b",
        "authorId" : "57a5e7e7-e6d7-467b-96ab-41e4ca978eee",
        "body" : "Please address.",
        "createdAt" : "2017-11-09T13:11:41Z",
        "updatedAt" : "2017-11-09T16:12:34Z",
        "lastEditedBy" : "57a5e7e7-e6d7-467b-96ab-41e4ca978eee",
        "tags" : [
        ]
      },
      {
        "id" : "8b10e413-dfbd-4157-b996-edbaac059117",
        "parentId" : "799165e4-45b3-46e5-b3a9-7b8602bb005b",
        "authorId" : "9cd12d42-ba38-4d33-b922-51e6f29f48e7",
        "body" : "Are you sure you've seen the extended comment at https://github.com/kubernetes/kubernetes/pull/54992/files#diff-798659a13d17841486bbd8ceb70acb64R87? I pushed it only a dozen or so minutes ago, so I don't think that's what you referred to when writing \"Yup.. saw that.\"? Let me know if it's still not clear enough.\r\n",
        "createdAt" : "2017-11-09T13:26:58Z",
        "updatedAt" : "2017-11-09T16:12:34Z",
        "lastEditedBy" : "9cd12d42-ba38-4d33-b922-51e6f29f48e7",
        "tags" : [
        ]
      },
      {
        "id" : "8e85bc4c-00bc-4974-8762-e2f97cc17e35",
        "parentId" : "799165e4-45b3-46e5-b3a9-7b8602bb005b",
        "authorId" : "57a5e7e7-e6d7-467b-96ab-41e4ca978eee",
        "body" : "Nope... I was seeing the older comments when I wrote that:\r\n\r\n```\r\n// It ends the implicit \"prep\" phase if it was still running.\r\n // sequenceNumber is an integer prepended to phaseName in the output\r\n```\r\n\r\nI'm still not convinced that the way to solve the issue with ordering for perfdash is by using such synthetic numbering. The msg should be used as the phase ID instead. Besides, what if we run out of numbers in b/w 2 steps?",
        "createdAt" : "2017-11-09T13:39:12Z",
        "updatedAt" : "2017-11-09T16:12:34Z",
        "lastEditedBy" : "57a5e7e7-e6d7-467b-96ab-41e4ca978eee",
        "tags" : [
        ]
      },
      {
        "id" : "e09a0f7a-2652-4c08-9b92-5926e53db4e6",
        "parentId" : "799165e4-45b3-46e5-b3a9-7b8602bb005b",
        "authorId" : "9cd12d42-ba38-4d33-b922-51e6f29f48e7",
        "body" : "I agree that it would be best if there was a separate field for sorting, and another to use as a stable label. But currently the `perftype.DataItem` schema does not support that. So this concatenation of 3-digit number and label is a hack to get around that limitation.\r\n\r\nIt's no big deal if we run out of numbers: we'll just reuse them, they don't **have to** be unique. This hack is only meant to provide rough sorting, such that initialization steps at least show up earlier than shutdown steps. I think it's better than having a complete mess, but if you feel strongly against it, I can remove the numeric prefix.",
        "createdAt" : "2017-11-09T14:35:06Z",
        "updatedAt" : "2017-11-09T16:12:34Z",
        "lastEditedBy" : "9cd12d42-ba38-4d33-b922-51e6f29f48e7",
        "tags" : [
        ]
      },
      {
        "id" : "b9931a8b-5d11-479f-ab7c-166f24a66fc7",
        "parentId" : "799165e4-45b3-46e5-b3a9-7b8602bb005b",
        "authorId" : "57a5e7e7-e6d7-467b-96ab-41e4ca978eee",
        "body" : "That's alright for now.",
        "createdAt" : "2017-11-09T17:21:26Z",
        "updatedAt" : "2017-11-09T17:21:26Z",
        "lastEditedBy" : "57a5e7e7-e6d7-467b-96ab-41e4ca978eee",
        "tags" : [
        ]
      }
    ],
    "commit" : "96089e0b7968c0964d4b1de016cda38f6f171d02",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +32,36 @@// Represents a phase of a test. Phases can overlap.\ntype Phase struct {\n\tsequenceNumber int\n\tname           string\n\tstartTime      time.Time"
  }
]