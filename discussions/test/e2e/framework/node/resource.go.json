[
  {
    "id" : "93f55a50-9394-459f-a553-722818496fe7",
    "prId" : 103385,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/103385#pullrequestreview-696624857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5485b215-d080-491b-9c79-a94f6586f454",
        "parentId" : null,
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "I have added another function instead of touching existing `GetClusterZones` which is being used at multiple places.",
        "createdAt" : "2021-06-30T21:15:59Z",
        "updatedAt" : "2021-06-30T21:15:59Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      }
    ],
    "commit" : "67bc23411b60b9f21fc43e2d57d4d46df3bcace7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +563,567 @@\n// GetSchedulableClusterZones returns the values of zone label collected from all nodes which are schedulable.\nfunc GetSchedulableClusterZones(c clientset.Interface) (sets.String, error) {\n\tnodes, err := c.CoreV1().Nodes().List(context.TODO(), metav1.ListOptions{})\n\tif err != nil {"
  },
  {
    "id" : "1dd8f76e-3bbc-41a9-b142-ff9e038bba9f",
    "prId" : 96122,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96122#pullrequestreview-527469192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1389fe87-ac46-406c-a49c-725f0faac822",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "I think most other import aliases for this package has been `utilnet`?",
        "createdAt" : "2020-11-10T14:07:52Z",
        "updatedAt" : "2020-11-10T20:02:42Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "0ac43c60-b976-4d4d-8c81-0e3092af11d3",
        "parentId" : "1389fe87-ac46-406c-a49c-725f0faac822",
        "authorId" : "87ab1d19-ad39-40d0-a045-817039414280",
        "body" : "I have seen it a few different ways, but I'm happy to switch to this format since the majority seems to favor it.\r\n\r\n```\r\ncmluciano@starlord:~/go/src/k8s.io/kubernetes$ ack 'netutil \"k8s.io/utils/net\"'|wc -l\r\n6\r\ncmluciano@starlord:~/go/src/k8s.io/kubernetes$ ack 'netutils \"k8s.io/utils/net\"'|wc -l\r\n14\r\ncmluciano@starlord:~/go/src/k8s.io/kubernetes$ ack 'utilnet \"k8s.io/utils/net\"'|wc -l\r\n42\r\n\r\n```",
        "createdAt" : "2020-11-10T17:40:41Z",
        "updatedAt" : "2020-11-10T20:02:42Z",
        "lastEditedBy" : "87ab1d19-ad39-40d0-a045-817039414280",
        "tags" : [
        ]
      },
      {
        "id" : "59043ab8-d775-490d-b04d-b7c3e1e71c78",
        "parentId" : "1389fe87-ac46-406c-a49c-725f0faac822",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "hmm okay, feel free to ignore then",
        "createdAt" : "2020-11-10T18:03:52Z",
        "updatedAt" : "2020-11-10T20:02:42Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa7a802d55339296e389b8b55c8198f77fbdb845",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +21,25 @@\t\"encoding/json\"\n\t\"fmt\"\n\tnetutil \"k8s.io/utils/net\"\n\t\"net\"\n\t\"strings\""
  },
  {
    "id" : "88379ff6-a420-45ae-ab4f-1eb6167b654c",
    "prId" : 96122,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96122#pullrequestreview-527591263",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "200d511b-fe73-4cb3-8c5f-8b6da072d4cc",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "don't use named return here",
        "createdAt" : "2020-11-10T20:43:08Z",
        "updatedAt" : "2020-11-10T20:43:08Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa7a802d55339296e389b8b55c8198f77fbdb845",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +252,256 @@// GetAddressesByTypeAndFamily returns a list of addresses of the given addressType for the given node\n// and filtered by IPFamily\nfunc GetAddressesByTypeAndFamily(node *v1.Node, addressType v1.NodeAddressType, family v1.IPFamily) (ips []string) {\n\tfor _, nodeAddress := range node.Status.Addresses {\n\t\tif nodeAddress.Type != addressType {"
  },
  {
    "id" : "8647e51b-38d4-4647-b198-d1fb9efc2cec",
    "prId" : 89889,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89889#pullrequestreview-389328079",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cc6985e-cd6a-48f0-b877-93de1e3c4c9a",
        "parentId" : null,
        "authorId" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "body" : "Nice way, thanks",
        "createdAt" : "2020-04-07T17:17:11Z",
        "updatedAt" : "2020-04-08T02:07:13Z",
        "lastEditedBy" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "6532b40f215001d618f55349490d5eb6e6eec77b",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +565,569 @@\n\t// TODO use wrapper methods in expect.go after removing core e2e dependency on node\n\tgomega.ExpectWithOffset(2, err).NotTo(gomega.HaveOccurred())\n\tverifyThatTaintIsGone(c, nodeName, &taint)\n}"
  },
  {
    "id" : "5efb7a14-8d11-4706-9152-3f0612aa8342",
    "prId" : 89243,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89243#pullrequestreview-378884698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e5fda0e-0ad6-44b9-950c-8168a470a4a1",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Can we add a comment referencing where this taint is originally from? ",
        "createdAt" : "2020-03-20T15:15:23Z",
        "updatedAt" : "2020-03-21T03:09:18Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "1cde3c2a-477c-4a7a-95dd-05801f050bd6",
        "parentId" : "6e5fda0e-0ad6-44b9-950c-8168a470a4a1",
        "authorId" : "e7b8fd7e-f93b-44b6-b6d0-4331207d901c",
        "body" : "Sure!",
        "createdAt" : "2020-03-21T02:29:13Z",
        "updatedAt" : "2020-03-21T03:09:18Z",
        "lastEditedBy" : "e7b8fd7e-f93b-44b6-b6d0-4331207d901c",
        "tags" : [
        ]
      }
    ],
    "commit" : "799cdbf7b01bed70993f9c760aac906622c00d99",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +49,53 @@\t// unreachableTaintTemplate is the taint for when a node becomes unreachable.\n\t// Copied from pkg/controller/nodelifecycle to avoid pulling extra dependencies\n\tunreachableTaintTemplate = &v1.Taint{\n\t\tKey:    v1.TaintNodeUnreachable,\n\t\tEffect: v1.TaintEffectNoExecute,"
  },
  {
    "id" : "21abcf54-c3e0-4ef3-92c4-72932a758688",
    "prId" : 88065,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88065#pullrequestreview-358674988",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c3259ac-d73d-4e22-9657-c13c323befeb",
        "parentId" : null,
        "authorId" : "cc740aab-0edd-4978-b80c-6ca3543a6188",
        "body" : "keep it due to dependency problems",
        "createdAt" : "2020-02-13T17:22:31Z",
        "updatedAt" : "2020-02-13T17:22:37Z",
        "lastEditedBy" : "cc740aab-0edd-4978-b80c-6ca3543a6188",
        "tags" : [
        ]
      },
      {
        "id" : "c043c972-81de-49c6-ab64-849df0507025",
        "parentId" : "0c3259ac-d73d-4e22-9657-c13c323befeb",
        "authorId" : "cc740aab-0edd-4978-b80c-6ca3543a6188",
        "body" : "/cc @neolit123 ",
        "createdAt" : "2020-02-13T17:24:28Z",
        "updatedAt" : "2020-02-13T17:24:28Z",
        "lastEditedBy" : "cc740aab-0edd-4978-b80c-6ca3543a6188",
        "tags" : [
        ]
      },
      {
        "id" : "7a825093-45c6-40f2-98bb-295331f4ce25",
        "parentId" : "0c3259ac-d73d-4e22-9657-c13c323befeb",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "LGTM\r\n",
        "createdAt" : "2020-02-13T18:22:54Z",
        "updatedAt" : "2020-02-13T18:22:54Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "a30071ae-f0f2-402d-93fd-263f74924c85",
        "parentId" : "0c3259ac-d73d-4e22-9657-c13c323befeb",
        "authorId" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "body" : "It is reasonable to keep this, LGTM.",
        "createdAt" : "2020-02-14T02:10:29Z",
        "updatedAt" : "2020-02-14T02:10:50Z",
        "lastEditedBy" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "efec7e64ce0af0a3349f1b2e2d243d4e8e66c167",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +42,46 @@\t// singleCallTimeout is how long to try single API calls (like 'get' or 'list'). Used to prevent\n\t// transient failures from failing tests.\n\tsingleCallTimeout = 5 * time.Minute\n\n\t// ssh port"
  },
  {
    "id" : "a7a87380-7f32-4dd6-9be1-18640b83edc1",
    "prId" : 86983,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86983#pullrequestreview-340222640",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9586c0e1-2532-40d3-a9b6-21c1554cb4bc",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "wishing that long term some of the helpers can move either under `k8s.io/api/core/v1` or somewhere else to help the framework to stop depending on `k8s.io/kubernetes`.\r\n\r\nfor instance we have `ToleratesTaint()` https://github.com/kubernetes/api/blob/master/core/v1/toleration.go#L37 which is an utility in the api repository, yet the majority of the utilites for `v1.Taint` are under `k8s.io/kubernetes/pkg`\r\n\r\n/lgtm\r\n/approve\r\n",
        "createdAt" : "2020-01-09T00:05:25Z",
        "updatedAt" : "2020-01-09T00:05:39Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "21202b08d487ba3d242312d0dad6a471a0a11217",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +470,474 @@\t}\n\n\treturn v1helper.TolerationsTolerateTaintsWithFilter(fakePod.Spec.Tolerations, taints, func(t *v1.Taint) bool {\n\t\treturn t.Effect == v1.TaintEffectNoExecute || t.Effect == v1.TaintEffectNoSchedule\n\t})"
  },
  {
    "id" : "37e05634-8a19-4f12-8745-18572b3093f5",
    "prId" : 81043,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81043#pullrequestreview-273785026",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d2cad99-7745-435b-96da-0bdb087ef6cc",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "I'm worried if this will work on all the pod-specs generated.  \r\n\r\nWhat I'm wondering is if we whitelist we apply a blanket toleration.  \r\n\r\nIf a test tries to schedule a pod won't it just hang...?",
        "createdAt" : "2019-08-06T20:41:27Z",
        "updatedAt" : "2019-09-05T19:37:27Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "1bfc5f35-ec6d-4680-b643-94e599567bd8",
        "parentId" : "8d2cad99-7745-435b-96da-0bdb087ef6cc",
        "authorId" : "73cba353-2317-4305-8981-830b29b34769",
        "body" : "I think there are two separate use cases with different solutions:\r\n - a user has a cluster with N nodes, M of which are tainted with their own custom NoSchedule taints (e.g. node/etcd, node/control-plane, etc) which are meant to be NoSchedule. They do not want test pods to be allowed to run on those nodes, they just need the existing \"wait until ALL nodes are scheduleable unless they have the master noe label\" logic to tolerate them.\r\n - a user has a cluster with N nodes, all N are tainted with various NoSchedule taints but in their actual use, they deliberately taint pods they wish to run on certain nodes.\r\n\r\nThis PR (and I thought the issue) was around solving the first issue; that is the one that I've seen and heard from users about.\r\n\r\nYou've mentioned case 2, but I'm not sure that's the right problem to solve here:\r\n - it would have a potential impact of every test\r\n - it would require an explicit list of exact taints which I've been told may be frustrating to provide whereas this currently allows a regexp (this was a comment in the DD)\r\n - I am admittedly unfamiliar with this use case, but it seems unclear that it would work uniformly for all those users. What if they have N nodes, M tainted for reason X, (N-M) tainted for reason Y (gpu availability, networking capabilities, geography, etc). Would they want the test suite to run any/all workloads on any/all nodes? Maybe the answer is yes, maybe my situation is even a bit silly, but it seems like if they are tainting all their nodes they may need extra strict control over what workloads run where and it is hard to see how/why that should be supported. Especially with the idea of conformance=workload portability; is everyone clear on the expectation that those clusters to be conformant even if we couldn't move a vanilla hello-world pod into them without added tolerations? \r\n\r\nI'm sure you've thought about that more than I have, but that just wasn't the problem I thought I was trying to solve by this ticket.",
        "createdAt" : "2019-08-07T01:29:44Z",
        "updatedAt" : "2019-09-05T19:37:27Z",
        "lastEditedBy" : "73cba353-2317-4305-8981-830b29b34769",
        "tags" : [
        ]
      },
      {
        "id" : "31231739-1ad3-433c-8003-67b28594d6ca",
        "parentId" : "8d2cad99-7745-435b-96da-0bdb087ef6cc",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "So my thinking was both user stories are valid, and have gotten reports on both.    \r\n\r\nThe logic for determining nodes ready needs to change but also pod tolerations need to be adjusted. ",
        "createdAt" : "2019-08-08T13:54:05Z",
        "updatedAt" : "2019-09-05T19:37:27Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "dbf7f8e2-1994-4bc9-b214-8d9220a90396",
        "parentId" : "8d2cad99-7745-435b-96da-0bdb087ef6cc",
        "authorId" : "73cba353-2317-4305-8981-830b29b34769",
        "body" : "If the second use case applies to you, would it be reasonable to require users to add their own mutating webhook before trying to run tests? Isn't that what we'll have to do to pass tests in that situation? In addition, if tests get cut off in the middle, wouldn't it be possible to have left a mutating webhook impacting all pods in the user cluster? That seems like a concern to me.\r\n\r\nRegardless, do you have a problem with me continuing with solving use case 1 with a regexp as done?\r\n\r\nThis would mean that startup isnt blocked by taints matching XYZ, and then to solve use case 2 we'd have to have a separate, concrete list of taints which MUST be tolerated by pods in order for tests to pass.\r\n\r\nWe don't want to try and reuse a list of taints for both use cases because, as I mentioned above, it seems very possible to have every pod tainted in a custom way but only intend pods to be scheduled on a subset of them.",
        "createdAt" : "2019-08-08T19:22:11Z",
        "updatedAt" : "2019-09-05T19:37:27Z",
        "lastEditedBy" : "73cba353-2317-4305-8981-830b29b34769",
        "tags" : [
        ]
      },
      {
        "id" : "06ec3e10-b03f-4c58-a203-603236c79eb2",
        "parentId" : "8d2cad99-7745-435b-96da-0bdb087ef6cc",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "> If the second use case applies to you, would it be reasonable to require users to add their own mutating webhook before trying to run tests? \r\n\r\nIt's a pain and it's why we wanted this change.  I'll prod folks from the wild to comment on the issue. ",
        "createdAt" : "2019-08-12T15:50:12Z",
        "updatedAt" : "2019-09-05T19:37:27Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c53481d5cf2a779981c83f88e42fd08ed42160f",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +425,429 @@\t\tfor _, v := range node.Spec.Taints {\n\t\t\tif _, isNonblockingTaint := nonblockingTaintsMap[v.Key]; !isNonblockingTaint {\n\t\t\t\tnodeCopy.Spec.Taints = append(nodeCopy.Spec.Taints, v)\n\t\t\t}\n\t\t}"
  },
  {
    "id" : "8d49824d-b28e-431d-b7f4-fe63214da4f2",
    "prId" : 79879,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79879#pullrequestreview-261824259",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3fc6b74-0551-405e-b98a-b6a40d8a473d",
        "parentId" : null,
        "authorId" : "9df64fa3-0a5c-4488-b8c7-8fca4ef36432",
        "body" : "Here called Failf() but I think it's ok to keep this. This method `isNodeUntainted() ` returns a `bool` and it's easy to be called as `if isNodeUntainted(&n) { do sth }` (see callers `GetMasterAndWorkerNodesOrDie()` and `GetReadySchedulableNodesOrDie()` ) . Return a `error` type will make to logic complex and it's not necessary to do so.\r\nThoughts?",
        "createdAt" : "2019-07-08T07:43:00Z",
        "updatedAt" : "2019-07-18T06:19:09Z",
        "lastEditedBy" : "9df64fa3-0a5c-4488-b8c7-8fca4ef36432",
        "tags" : [
        ]
      },
      {
        "id" : "0a3ac0cf-3c85-40ea-94cf-f23ebe89fa0f",
        "parentId" : "d3fc6b74-0551-405e-b98a-b6a40d8a473d",
        "authorId" : "d3b9ec12-6001-425a-940b-b74c57282ba6",
        "body" : "Funny enough, this seems to be called only in one other place and that place is within the framework/uitl.go https://github.com/kubernetes/kubernetes/search?q=isNodeUntainted&unscoped_q=isNodeUntainted\r\n\r\nI would opt for a bool and an error.\r\nA call to `isNodeUntainted` will get more wordy as one would need to check for an error but i think that being explicit about what errors to ignore and which ones to act on is something the calling code should explicitly prescribe.\r\nThis also seems like a useful method in general and having it decide for you may not make for the best user experience. ",
        "createdAt" : "2019-07-15T13:37:33Z",
        "updatedAt" : "2019-07-18T06:19:09Z",
        "lastEditedBy" : "d3b9ec12-6001-425a-940b-b74c57282ba6",
        "tags" : [
        ]
      }
    ],
    "commit" : "e24a9628210cf47b18874db4695638282fb63c1a",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +434,438 @@\tif err != nil {\n\t\te2elog.Failf(\"Can't test predicates for node %s: %v\", node.Name, err)\n\t\treturn false\n\t}\n\treturn fit"
  },
  {
    "id" : "84687339-545d-4cfa-be35-52982ad154c1",
    "prId" : 79879,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79879#pullrequestreview-263843756",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bd2c0e6-4584-4871-9e2c-c4076ff957ff",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Add TODO to remove references in framework/utils.go",
        "createdAt" : "2019-07-08T17:19:47Z",
        "updatedAt" : "2019-07-18T06:19:09Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "fa729ee2-6b68-4866-95f5-8134810282db",
        "parentId" : "8bd2c0e6-4584-4871-9e2c-c4076ff957ff",
        "authorId" : "9df64fa3-0a5c-4488-b8c7-8fca4ef36432",
        "body" : "Addressed",
        "createdAt" : "2019-07-10T07:43:42Z",
        "updatedAt" : "2019-07-18T06:19:09Z",
        "lastEditedBy" : "9df64fa3-0a5c-4488-b8c7-8fca4ef36432",
        "tags" : [
        ]
      },
      {
        "id" : "f7bb2e03-4a56-4dc6-89b1-8457d2fd48d9",
        "parentId" : "8bd2c0e6-4584-4871-9e2c-c4076ff957ff",
        "authorId" : "d3b9ec12-6001-425a-940b-b74c57282ba6",
        "body" : "Why are we keeping the \"OrDie\" prefix for this one?",
        "createdAt" : "2019-07-18T18:59:53Z",
        "updatedAt" : "2019-07-18T19:02:19Z",
        "lastEditedBy" : "d3b9ec12-6001-425a-940b-b74c57282ba6",
        "tags" : [
        ]
      }
    ],
    "commit" : "e24a9628210cf47b18874db4695638282fb63c1a",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +359,363 @@// 1) Needs to be schedulable.\n// 2) Needs to be ready.\n// If EITHER 1 or 2 is not true, most tests will want to ignore the node entirely.\n// TODO: remove references in framework/util.go.\n// TODO: remove \"OrDie\" suffix."
  },
  {
    "id" : "ce1e4a4e-6e91-4700-a8a9-36e0dd369e42",
    "prId" : 79879,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/79879#pullrequestreview-259943728",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c94d6b2-a3e9-44f0-b9e9-88dc3fc54f10",
        "parentId" : null,
        "authorId" : "9df64fa3-0a5c-4488-b8c7-8fca4ef36432",
        "body" : "Unexported because no external package reference.",
        "createdAt" : "2019-07-10T07:21:55Z",
        "updatedAt" : "2019-07-18T06:19:09Z",
        "lastEditedBy" : "9df64fa3-0a5c-4488-b8c7-8fca4ef36432",
        "tags" : [
        ]
      },
      {
        "id" : "615355e9-9201-4070-8bf4-680e794e37b2",
        "parentId" : "6c94d6b2-a3e9-44f0-b9e9-88dc3fc54f10",
        "authorId" : "9df64fa3-0a5c-4488-b8c7-8fca4ef36432",
        "body" : "revert this to exported as per golint warning: `exported func PodNodePairs returns unexported type []node.podNode, which can be annoying to use`",
        "createdAt" : "2019-07-10T08:34:19Z",
        "updatedAt" : "2019-07-18T06:19:09Z",
        "lastEditedBy" : "9df64fa3-0a5c-4488-b8c7-8fca4ef36432",
        "tags" : [
        ]
      }
    ],
    "commit" : "e24a9628210cf47b18874db4695638282fb63c1a",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +59,63 @@\t// Node represents node name\n\tNode string\n}\n\n// FirstAddress returns the first address of the given type of each node."
  },
  {
    "id" : "9456a838-1108-499a-b46d-0a7d172aab3c",
    "prId" : 78282,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78282#pullrequestreview-247839690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb240098-6d7d-450b-b264-594e19e5c35b",
        "parentId" : null,
        "authorId" : "9df64fa3-0a5c-4488-b8c7-8fca4ef36432",
        "body" : "The original method name was `NodeAddresses`. Rename this method to `FirstNodeAddresses` is because `e2enode.NodeAddresses` will cause a golint error (stutters).",
        "createdAt" : "2019-05-25T06:09:08Z",
        "updatedAt" : "2019-06-18T00:01:55Z",
        "lastEditedBy" : "9df64fa3-0a5c-4488-b8c7-8fca4ef36432",
        "tags" : [
        ]
      },
      {
        "id" : "75b1620f-571e-4dc8-a890-cff10347a98f",
        "parentId" : "bb240098-6d7d-450b-b264-594e19e5c35b",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Does this function need to return `[]string`, wondering why not just `string`? I see it was always like this but might be worth doing a refactor now, or at least leave a TODO for later ",
        "createdAt" : "2019-05-28T20:05:42Z",
        "updatedAt" : "2019-06-18T00:01:55Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "50961bb3-8745-46d0-a688-a18fea267875",
        "parentId" : "bb240098-6d7d-450b-b264-594e19e5c35b",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Agreed this signature is weird, and the name is weird. \r\n\r\nShould be FirstAddress and return string, or add a //TODO here. ",
        "createdAt" : "2019-06-10T20:56:17Z",
        "updatedAt" : "2019-06-18T00:01:55Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1c346c2959287120585eba7c06cff8a8dc5444e",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +52,56 @@// TODO: Use return type string instead of []string\nfunc FirstAddress(nodelist *v1.NodeList, addrType v1.NodeAddressType) []string {\n\thosts := []string{}\n\tfor _, n := range nodelist.Items {\n\t\tfor _, addr := range n.Status.Addresses {"
  },
  {
    "id" : "32112b7b-5916-4e2d-9147-764ff03e28bb",
    "prId" : 78282,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78282#pullrequestreview-241991753",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a6fc43c-e8b1-41d3-bdb9-af6bc121e873",
        "parentId" : null,
        "authorId" : "9df64fa3-0a5c-4488-b8c7-8fca4ef36432",
        "body" : "The original method name was `NodeProxyRequest`. Rename this method to `ProxyRequest` is because `e2enode.NodeProxyRequest` will cause a golint error (stutters).",
        "createdAt" : "2019-05-25T06:09:52Z",
        "updatedAt" : "2019-06-18T00:01:55Z",
        "lastEditedBy" : "9df64fa3-0a5c-4488-b8c7-8fca4ef36432",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1c346c2959287120585eba7c06cff8a8dc5444e",
    "line" : 243,
    "diffHunk" : "@@ -1,1 +241,245 @@// ProxyRequest performs a get on a node proxy endpoint given the nodename and rest client.\nfunc ProxyRequest(c clientset.Interface, node, endpoint string, port int) (restclient.Result, error) {\n\t// proxy tends to hang in some cases when Node is not ready. Add an artificial timeout for this call.\n\t// This will leak a goroutine if proxy hangs. #22165\n\tvar result restclient.Result"
  },
  {
    "id" : "1dfda99f-237d-4aea-93e5-ebb9d5c68393",
    "prId" : 78282,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78282#pullrequestreview-247839690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "620852b4-995c-4654-ac6d-fecf75678c66",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "this function 🙈 ",
        "createdAt" : "2019-05-28T20:06:09Z",
        "updatedAt" : "2019-06-18T00:01:55Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "293bd582-9be2-47d9-8a88-b9060ba70fbf",
        "parentId" : "620852b4-995c-4654-ac6d-fecf75678c66",
        "authorId" : "9df64fa3-0a5c-4488-b8c7-8fca4ef36432",
        "body" : "I will add a `TODO` for `FirstNodeAddresses `, and will make the change along with others in the following PR. ",
        "createdAt" : "2019-05-28T22:43:03Z",
        "updatedAt" : "2019-06-18T00:01:55Z",
        "lastEditedBy" : "9df64fa3-0a5c-4488-b8c7-8fca4ef36432",
        "tags" : [
        ]
      },
      {
        "id" : "7f74a587-59f9-40ba-b981-448f9d50a193",
        "parentId" : "620852b4-995c-4654-ac6d-fecf75678c66",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Please add a TODO to cleanup this function",
        "createdAt" : "2019-06-10T20:57:23Z",
        "updatedAt" : "2019-06-18T00:01:55Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1c346c2959287120585eba7c06cff8a8dc5444e",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +65,69 @@\n// TODO: better to change to a easy read name\nfunc isNodeConditionSetAsExpected(node *v1.Node, conditionType v1.NodeConditionType, wantTrue, silent bool) bool {\n\t// Check the node readiness condition (logging all).\n\tfor _, cond := range node.Status.Conditions {"
  }
]