[
  {
    "id" : "8c88bd75-62c5-483b-a2a2-7aeb1b0b32d3",
    "prId" : 80615,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80615#pullrequestreview-267511788",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b252a567-e1f1-4daf-b076-7630a5c6f4e3",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "I'm fine with this change, but you are passing the same argument multiple times, when not just make it the default at this callsite? ",
        "createdAt" : "2019-07-26T16:40:11Z",
        "updatedAt" : "2019-07-28T15:46:04Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "fc61f45a-92db-41ba-8724-108b0ce705f7",
        "parentId" : "b252a567-e1f1-4daf-b076-7630a5c6f4e3",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "/hold\r\n\r\n(cause there's already a lgtm)",
        "createdAt" : "2019-07-26T16:45:33Z",
        "updatedAt" : "2019-07-28T15:46:04Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "4def7b5d-2fe4-4709-bd42-51250c3696c1",
        "parentId" : "b252a567-e1f1-4daf-b076-7630a5c6f4e3",
        "authorId" : "56251b9e-6202-4f11-b0fe-a8332ceda680",
        "body" : "Original thinking was: I'm not sure if this is being called/used outside of this, so best to leave a \"blank\" default.\r\n\r\nI'll de-dupe the args now since y'all definitely know better than me ðŸ˜Ž  ",
        "createdAt" : "2019-07-28T15:36:02Z",
        "updatedAt" : "2019-07-28T15:46:04Z",
        "lastEditedBy" : "56251b9e-6202-4f11-b0fe-a8332ceda680",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea2f6c80d7c95a12330f39ca637461abb654fded",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +43,47 @@\t\tName:  name,\n\t\tImage: image,\n\t\tArgs:  containerArgs,\n\t\tPorts: []v1.ContainerPort{{ContainerPort: int32(port), Protocol: protocol}},\n\t}, gracePeriod)"
  },
  {
    "id" : "d7499528-6de7-4bad-a12d-f940a2d0e498",
    "prId" : 70648,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70648#pullrequestreview-172689981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc1b9fcd-41fe-4252-b8c8-fb6450611287",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "This code is legacy, and it's a bit obtuse to follow why this change is needed for multi-arch.  I'm not following why it doesn't just work.  ",
        "createdAt" : "2018-11-07T15:52:45Z",
        "updatedAt" : "2018-11-07T15:52:50Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "9e170752-a514-4d6d-829d-f3548568f146",
        "parentId" : "bc1b9fcd-41fe-4252-b8c8-fb6450611287",
        "authorId" : "f599ec53-68cd-459b-acb7-8a0944b595fa",
        "body" : "No problem, I can give more context.\r\n\r\nI run to this problem because one of our end-to-end test in ARM was failing, emitting this error:\r\n\r\n```\r\nOct 26 11:05:31.784: INFO: update-demo-kitten-7gx94 is created but running wrong image; expected: gcr.io/kubernetes-e2e-test-images/kitten:1.0, actual: gcr.io/kubernetes-e2e-test-images/kitten-arm64:1.0\r\n```\r\n\r\nAs you can see, the image expected does not include the '-arm64' arch suffix.\r\n\r\nIt seems that the test does no include it, since they are platform agnostic, so the image name is a generic one (the one without the '-arm64' suffix). But this image name is a multiarch one, so this name only points to a manifest, that include the real image name for all the archs that are actually supported. For example:\r\n\r\n```\r\n$ kubectl describe pod -n e2e-tests-kubectl-fdqr8 update-demo-kitten-zj424\r\nName:               update-demo-kitten-zj424\r\nNamespace:          e2e-tests-kubectl-fdqr8\r\nPriority:           0\r\nPriorityClassName:  <none>\r\nNode:               x-5/192.168.2.55\r\nStart Time:         Fri, 26 Oct 2018 13:38:26 +0000\r\nLabels:             name=update-demo\r\n                   version=kitten\r\nAnnotations:        midonet.org/mac-address=42:88:73:f6:38:5e\r\nStatus:             Running\r\nIP:                 10.1.1.136\r\nControlled By:      ReplicationController/update-demo-kitten\r\nContainers:\r\n update-demo:\r\n   Container ID:   docker://3890dad2629483535ff1e86e25dd4e36f33415626fc85c35ff331950969aad21\r\n   Image:          gcr.io/kubernetes-e2e-test-images/kitten:1.0\r\n   Image ID:       docker-pullable://gcr.io/kubernetes-e2e-test-images/kitten-arm64@sha256:fbc805315cd3fc3adfa90848959193ae45808444e1eb9af855d32f1dfe11ded6\r\n```\r\n\r\nYou can see that the value of the 'Image' field is different than the 'Image ID', which includes the actual image name and its SHA256 hash.\r\n\r\nThe code in the test seems to be using not the image name in the specification (under '.spec') of the container, but the image in the status (under '.status'), as can be seen by this log of the command that retrieves it (in kubernetes v1.12.1):\r\n\r\n```\r\nOct 26 13:43:01.540: INFO: Running '/usr/bin/kubectl --kubeconfig=.../kubeconfig get pods update-demo-kitten-hsgdw -o template --template={{if (exists . \"status\" \"containerStatuses\")}}{{range .status.containerStatuses}}{{if eq .name \"update-demo\"}}{{.image}}{{end}}{{end}}{{end}} --namespace=e2e-tests-kubectl-fdqr8'\r\nOct 26 13:43:01.931: INFO: stderr: \"\"\r\nOct 26 13:43:01.931: INFO: stdout: \"gcr.io/kubernetes-e2e-test-images/kitten-arm64:1.0\"\r\n```\r\n\r\nSince the name retrieved by the command includes the '-arm64' suffix, the test code seems it is wrong.\r\n\r\nI don't know if nobody is using this code (kubernetes v1.12.1) on ARM64, or if this happening just in specific versions of the container runtime (specific Docker versions).\r\n\r\nIs this code legacy now? no longer used in master? I didn't know, sorry. With this changes our tests pass correctly.\r\n\r\nAnyway, I think the test code is more platform agnostic if the command retrieving the image name uses the 'spec' instead of the 'status', since the test code is no able to guess what is the name of the specific images per arch.\r\n\r\nThanks for your time. Let me know what you think and if anything else needs clarification.",
        "createdAt" : "2018-11-07T18:04:05Z",
        "updatedAt" : "2018-11-07T18:06:56Z",
        "lastEditedBy" : "f599ec53-68cd-459b-acb7-8a0944b595fa",
        "tags" : [
        ]
      },
      {
        "id" : "81dfda91-2a25-40d1-b3be-de4b9aa6b7d8",
        "parentId" : "bc1b9fcd-41fe-4252-b8c8-fb6450611287",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "This makes perfect sense now. \r\n/lgtm \r\n/approve ",
        "createdAt" : "2018-11-07T20:43:31Z",
        "updatedAt" : "2018-11-07T20:43:35Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0aa30205ddadc5c4df97b68e016387cf16d066b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +248,252 @@\tgetContainerStateTemplate := fmt.Sprintf(`--template={{if (exists . \"status\" \"containerStatuses\")}}{{range .status.containerStatuses}}{{if (and (eq .name \"%s\") (exists . \"state\" \"running\"))}}true{{end}}{{end}}{{end}}`, containername)\n\n\tgetImageTemplate := fmt.Sprintf(`--template={{if (exists . \"spec\" \"containers\")}}{{range .spec.containers}}{{if eq .name \"%s\"}}{{.image}}{{end}}{{end}}{{end}}`, containername)\n\n\tBy(fmt.Sprintf(\"waiting for all containers in %s pods to come up.\", testname)) //testname should be selector"
  }
]