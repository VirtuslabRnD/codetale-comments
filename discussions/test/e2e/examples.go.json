[
  {
    "id" : "ee8efd28-340b-4784-9832-060a01adc29d",
    "prId" : 23771,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf72f5ad-ca72-4e92-8f40-afe07d756131",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "why was c & ns trim'd out of the signature.  Seems like they are still leveraged in the function are now relying on scope. \n",
        "createdAt" : "2016-04-05T15:41:17Z",
        "updatedAt" : "2016-04-18T14:01:33Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "bf875af9-e437-476d-84c4-9c84ceb64d64",
        "parentId" : "cf72f5ad-ca72-4e92-8f40-afe07d756131",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "- entirely on scope.  yes.  This is a local wrapper for backward compat w the forEach that incorrectly depended on examples.go.  So this fixes #23730 .  \n- new framework basically allows anyone to build wrapper functions (if they want them - i think now we really dont need em unless its a lonnnng test like `kubectl.go`) in 2 lines of code, so no need for `forEachPod` global wrapper with hidden semantics.\n- to answer the original question (why ns removed?): the framework knows how to iterate itself, there is no need to send a client/ns as those are 1-1 embedded in the framework itself.\n",
        "createdAt" : "2016-04-05T16:05:47Z",
        "updatedAt" : "2016-04-18T14:01:33Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      }
    ],
    "commit" : "632a0a81d40dc1bab5ecc47b6004ec73a6c57e16",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +93,97 @@\t\t\tBy(\"checking up the services\")\n\t\t\tcheckAllLogs := func() {\n\t\t\t\tforEachPod(\"name\", \"redis\", func(pod api.Pod) {\n\t\t\t\t\tif pod.Name != bootstrapPodName {\n\t\t\t\t\t\t_, err := framework.LookForStringInLog(ns, pod.Name, \"redis\", expectedOnServer, serverStartTimeout)"
  },
  {
    "id" : "a9245001-bc59-41d0-adef-23ba33e91b98",
    "prId" : 21639,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6dfddd2-4056-421d-bc4b-9446a8a5564b",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "\"with n nodes in it\" isn't a particularly helpful comment since the n isn't defined in this file...\n",
        "createdAt" : "2016-02-26T05:41:16Z",
        "updatedAt" : "2016-02-26T05:41:27Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "b729e2fe-5464-4ff0-99bd-c7ecedcb82d7",
        "parentId" : "f6dfddd2-4056-421d-bc4b-9446a8a5564b",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "it is only meaningful in context of the diff, because we don't (create, scale to n, verify), but rather (create n, verify).  agree its not super useful, it's at best redundant since this can be seen from the code .\n",
        "createdAt" : "2016-02-26T09:21:33Z",
        "updatedAt" : "2016-02-26T09:21:33Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c91cf20285d5da5e3c473f9824f612854bdf641",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +214,218 @@\t\t\tExpect(err).NotTo(HaveOccurred())\n\n\t\t\t// Create an RC with n nodes in it.  Each node will then be verified.\n\t\t\tBy(\"Creating a Cassandra RC\")\n\t\t\trunKubectlOrDie(\"create\", \"-f\", controllerYaml, nsFlag)"
  },
  {
    "id" : "fc0e4c30-a548-4b31-bf15-07ac26ce49e8",
    "prId" : 21626,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2136b875-68b5-45a8-841d-ee689da30cb7",
        "parentId" : null,
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "Why do you start them separately? You can actually start everything all at once, that's part fo the point of DNS.\n",
        "createdAt" : "2016-02-22T18:52:20Z",
        "updatedAt" : "2016-02-22T21:40:41Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      },
      {
        "id" : "5ea88025-bb07-4590-b538-b654eeb1937d",
        "parentId" : "2136b875-68b5-45a8-841d-ee689da30cb7",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "(If you do what I suggest, you'll get an occasional worker flap for DNS racing, but if you want, I can give you a PR to get rid of that pretty quickly.)\n",
        "createdAt" : "2016-02-22T18:54:08Z",
        "updatedAt" : "2016-02-22T21:40:41Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      },
      {
        "id" : "ce439897-1ffe-4e8e-9bd2-153472de6f64",
        "parentId" : "2136b875-68b5-45a8-841d-ee689da30cb7",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "... again, the goal is simplicity and making unflakey.  i'd also push back  here ; and only launch concurrently if you insist that its truly a test requirement.\n",
        "createdAt" : "2016-02-22T19:04:53Z",
        "updatedAt" : "2016-02-22T21:40:41Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "3fb22f32-df1c-4cd5-a09b-2a1ab0486bb5",
        "parentId" : "2136b875-68b5-45a8-841d-ee689da30cb7",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "What are we supposed to be testing? The example, the system, or what? The tl;dr part of the example says you can just blast the directory, which is why I converted to DNS in the first place (and why it's a better pattern), in which case we should be testing that.\n",
        "createdAt" : "2016-02-22T19:09:33Z",
        "updatedAt" : "2016-02-22T21:40:41Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      },
      {
        "id" : "bbb9e3a2-c051-499e-9ca9-5a37a5161079",
        "parentId" : "2136b875-68b5-45a8-841d-ee689da30cb7",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "IMO the purpose of examples.go is to test the example application, nothing more.  not the system - would you agree ? \n- I agree with you that we should be testing more than just the app, but \n- the flakiness problems in jenkins are causing us to give second thoughts to what each e2e really needs to do, and doing just that, in isolation.  \n- once this runs in CI, I think it would be better to add more features knowing that they wont regress .\n\nthat said, if we really want to launch them concurrently, i can modify this to do so.  \n",
        "createdAt" : "2016-02-22T19:14:51Z",
        "updatedAt" : "2016-02-22T21:40:41Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "bbe24433-2390-4a99-93e1-3966ba0233a6",
        "parentId" : "2136b875-68b5-45a8-841d-ee689da30cb7",
        "authorId" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "body" : "Okay, this is fine.\n",
        "createdAt" : "2016-02-22T19:19:25Z",
        "updatedAt" : "2016-02-22T21:40:41Z",
        "lastEditedBy" : "a92f8f9e-31fd-4510-b4d9-3553f7025485",
        "tags" : [
        ]
      }
    ],
    "commit" : "782b268f023c510bb11dab3e2089660db319e8b8",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +198,202 @@\t\t\t// Run the worker verification after we turn up the master.\n\t\t\tdefer worker()\n\t\t\tmaster()\n\t\t})\n\t})"
  },
  {
    "id" : "395d9fe6-ff92-4836-a676-2e11f9aa3531",
    "prId" : 15152,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e845c3c0-992e-4a99-83ec-8e926fccbddd",
        "parentId" : null,
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "how about expectNoError(waitForEndpoint(c, ns, \"rabbitmq-service\"))?\n",
        "createdAt" : "2015-10-06T12:19:23Z",
        "updatedAt" : "2015-10-06T12:19:23Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "2d6a810a-45b0-49e3-91dc-6cfd7a97c790",
        "parentId" : "e845c3c0-992e-4a99-83ec-8e926fccbddd",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "In this file cluster control is not mixed with assertions (in a single line).\n",
        "createdAt" : "2015-10-06T12:25:23Z",
        "updatedAt" : "2015-10-06T12:25:33Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "555cc5e579de7c4cfdf4842d9360924cb1d46df1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +149,153 @@\t\t\t\tExpect(err).NotTo(HaveOccurred())\n\t\t\t})\n\t\t\terr := waitForEndpoint(c, ns, \"rabbitmq-service\")\n\t\t\tExpect(err).NotTo(HaveOccurred())\n"
  },
  {
    "id" : "68a7ff29-e50f-4279-a5f8-43626fe31b38",
    "prId" : 14509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5e1001c-509e-40b7-a394-9e1c2170ab17",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "What about Succeeded?\n",
        "createdAt" : "2015-09-25T04:08:14Z",
        "updatedAt" : "2015-09-25T04:08:14Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      },
      {
        "id" : "709fe21f-b1f6-4baf-9c90-a3994df341f8",
        "parentId" : "f5e1001c-509e-40b7-a394-9e1c2170ab17",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "All test cases in examples.go focus on running pods. Success pod may (I'm not sure) disappear just like Terminated pods causing problems to log greping.  \n",
        "createdAt" : "2015-09-25T09:35:38Z",
        "updatedAt" : "2015-09-25T09:35:38Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "4634246391420bf0a43aa50193be337eff15a6db",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +568,572 @@\t\tExpect(err).NotTo(HaveOccurred())\n\t\tfor _, pod := range podList.Items {\n\t\t\tif pod.Status.Phase == api.PodPending || pod.Status.Phase == api.PodRunning {\n\t\t\t\tpods = append(pods, &pod)\n\t\t\t}"
  },
  {
    "id" : "cbbf8023-a0a3-4ce4-aab2-a30749c78f8c",
    "prId" : 11880,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "335c2efe-f7ed-488e-aaa9-f7e9dbd906a6",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "should probably use pkg/util/wait.Poll(). If the Get blocks, this function will wait indefinitely.\n",
        "createdAt" : "2015-07-30T15:58:19Z",
        "updatedAt" : "2015-07-30T15:58:19Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa7d009b96e56b07f47a29b3ae4f5d19ce1c6aab",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +527,531 @@\tvar result []byte\n\tvar err error\n\tfor t := time.Now(); time.Since(t) < timeout; time.Sleep(poll) {\n\t\tresult, err = c.Get().\n\t\t\tPrefix(\"proxy\")."
  },
  {
    "id" : "cbf4d140-9786-4161-8a4d-7c3cf499a46c",
    "prId" : 11050,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bb0d8f4-9c27-4b57-82ad-ee67a607e92f",
        "parentId" : null,
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "Can you name the timeouts?\n",
        "createdAt" : "2015-07-10T19:53:08Z",
        "updatedAt" : "2015-07-28T06:35:05Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      },
      {
        "id" : "b8e8d9a8-5416-46d6-8df2-66ed8b762010",
        "parentId" : "8bb0d8f4-9c27-4b57-82ad-ee67a607e92f",
        "authorId" : "35dc52fd-2236-4a0d-b72a-ae03d1ba7026",
        "body" : "ok\n",
        "createdAt" : "2015-07-13T09:45:09Z",
        "updatedAt" : "2015-07-28T06:35:05Z",
        "lastEditedBy" : "35dc52fd-2236-4a0d-b72a-ae03d1ba7026",
        "tags" : [
        ]
      }
    ],
    "commit" : "860822431bf3d0eb633ddd68fe7d8f2a47d19d20",
    "line" : null,
    "diffHunk" : "@@ -1,1 +471,475 @@\t\t\t\twaitForRCPodsRunning(c, ns.Name, backendRcName)\n\t\t\t\twaitForService(c, ns.Name, backendSvcName, true, poll, serviceStartTimeout)\n\t\t\t}\n\t\t\t// it is not enough that pods are running because they may be set to running, but\n\t\t\t// the application itself may have not been initialized. Just query the application."
  },
  {
    "id" : "3bf42bc8-b2d7-4344-85af-2000e453f1d0",
    "prId" : 11050,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64505343-6a08-4f5c-81c5-83e07598b385",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Is there a reason that you're using kubectl here?  It seems brittle (and hard to interpret errors)\n",
        "createdAt" : "2015-07-22T22:13:18Z",
        "updatedAt" : "2015-07-28T06:35:05Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "6328fe90-a171-45be-a3b8-8ed899921681",
        "parentId" : "64505343-6a08-4f5c-81c5-83e07598b385",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "At least add a note explaining why, and TODO to fix.\n",
        "createdAt" : "2015-07-22T22:13:37Z",
        "updatedAt" : "2015-07-28T06:35:05Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "70822fc4-338a-4e31-9242-7fceade16563",
        "parentId" : "64505343-6a08-4f5c-81c5-83e07598b385",
        "authorId" : "35dc52fd-2236-4a0d-b72a-ae03d1ba7026",
        "body" : "I assume you mean everywhere in the test, not just here.\nThe general purpose of these e2e tests is to reproduce everything from the corresponding examples. So we want to use yaml files and kubectl directly.\nEven if this gets broken, it's probably good because we want to correct our examples too.\n\nThe part I I'm ashamed of is substituting namespaces inside the yamls (prepareResourceWithReplacedString). But it turned out to be the easiest.\n",
        "createdAt" : "2015-07-23T06:19:47Z",
        "updatedAt" : "2015-07-28T06:35:05Z",
        "lastEditedBy" : "35dc52fd-2236-4a0d-b72a-ae03d1ba7026",
        "tags" : [
        ]
      }
    ],
    "commit" : "860822431bf3d0eb633ddd68fe7d8f2a47d19d20",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +460,464 @@\n\t\t\tfor _, ns := range namespaces {\n\t\t\t\trunKubectl(\"create\", \"-f\", backendRcYaml, getNsCmdFlag(ns))\n\t\t\t}\n"
  },
  {
    "id" : "250e187e-2ef2-4e3c-9b9a-1c14cd6a2a7b",
    "prId" : 11050,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67db2d47-583a-4401-a9a9-1e2a50ce37dc",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "why are we using inline python here?  Can't we just use shell and nslookup?\n",
        "createdAt" : "2015-07-22T22:15:57Z",
        "updatedAt" : "2015-07-28T06:35:05Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "39f8f1eb-cc06-4167-8185-70d613019be0",
        "parentId" : "67db2d47-583a-4401-a9a9-1e2a50ce37dc",
        "authorId" : "35dc52fd-2236-4a0d-b72a-ae03d1ba7026",
        "body" : "there is no nslookup inside the pod\n",
        "createdAt" : "2015-07-23T06:09:55Z",
        "updatedAt" : "2015-07-28T06:35:05Z",
        "lastEditedBy" : "35dc52fd-2236-4a0d-b72a-ae03d1ba7026",
        "tags" : [
        ]
      },
      {
        "id" : "e58a06c3-4a1e-415b-beb4-664659661371",
        "parentId" : "67db2d47-583a-4401-a9a9-1e2a50ce37dc",
        "authorId" : "35dc52fd-2236-4a0d-b72a-ae03d1ba7026",
        "body" : "actually I don't like it either. But I couldn't find any better solution.\n",
        "createdAt" : "2015-07-23T06:13:08Z",
        "updatedAt" : "2015-07-28T06:35:05Z",
        "lastEditedBy" : "35dc52fd-2236-4a0d-b72a-ae03d1ba7026",
        "tags" : [
        ]
      }
    ],
    "commit" : "860822431bf3d0eb633ddd68fe7d8f2a47d19d20",
    "line" : null,
    "diffHunk" : "@@ -1,1 +503,507 @@\n\t\t\tqueryDns := fmt.Sprintf(queryDnsPythonTemplate, backendSvcName+\".\"+namespaces[0].Name)\n\t\t\t_, err = lookForStringInPodExec(namespaces[0].Name, podName, []string{\"python\", \"-c\", queryDns}, \"ok\", dnsReadyTimeout)\n\t\t\tExpect(err).NotTo(HaveOccurred(), \"waiting for output from pod exec\")\n"
  },
  {
    "id" : "8b153ab5-aae0-48ba-a899-19bd901e091e",
    "prId" : 11050,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f5cc5a3-aa7a-4e11-84c7-93525cc0f2d2",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "don't you need to delete resources/namespaces here?\n",
        "createdAt" : "2015-07-22T22:17:25Z",
        "updatedAt" : "2015-07-28T06:35:05Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "453da5c6-28d6-442f-9b31-3a3ea4efd1a5",
        "parentId" : "4f5cc5a3-aa7a-4e11-84c7-93525cc0f2d2",
        "authorId" : "35dc52fd-2236-4a0d-b72a-ae03d1ba7026",
        "body" : "namespaces created via createTestingNS are automatically deleted (with everything inside). No need for custom cleanup.\n",
        "createdAt" : "2015-07-23T06:10:56Z",
        "updatedAt" : "2015-07-28T06:35:05Z",
        "lastEditedBy" : "35dc52fd-2236-4a0d-b72a-ae03d1ba7026",
        "tags" : [
        ]
      }
    ],
    "commit" : "860822431bf3d0eb633ddd68fe7d8f2a47d19d20",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +519,523 @@\t\t\t\tExpect(err).NotTo(HaveOccurred())\n\t\t\t}\n\t\t})\n\t})\n})"
  },
  {
    "id" : "3b614229-509a-4873-b35f-07439af037b4",
    "prId" : 10981,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b273d9f6-30d4-4fd3-9af5-69cbe62503ae",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "I think it's OK to leave it as it is, but I'm slightly worried that hardcoding number of replicas here may cause some problems in the future. If someone would change the default replica count in the example, tests won't catch this change. It'd be cleaner to have an util method \"AddOneReplica\", or check the replica count beforehand.\n",
        "createdAt" : "2015-07-23T12:40:01Z",
        "updatedAt" : "2015-07-24T12:52:52Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "82cf645badfb98b44d7d5f958e7e13c0148adda3",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +369,373 @@\n\t\t\tBy(\"scaling rethinkdb\")\n\t\t\tScaleRC(c, ns, \"rethinkdb-rc\", 2)\n\t\t\tcheckDbInstances()\n"
  },
  {
    "id" : "492af9ec-01e5-4ba5-9d78-5f0e38227df4",
    "prId" : 10714,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee901607-826b-47e0-a17d-e43c974099e9",
        "parentId" : null,
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "IIRC `[Skipped]` is a syntax specifically for density.go, right?  Or is it broader now.  UPDATE ah nevermind.  We need to update the comment here https://github.com/GoogleCloudPlatform/kubernetes/blame/master/test/e2e/e2e_test.go#L120 to describe that \"[Skipped]\" is used for more than just density.  maybe as a part of this PR ? or later.  no big deal\n",
        "createdAt" : "2015-07-04T16:55:26Z",
        "updatedAt" : "2015-07-23T11:21:14Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "78f0701b-e545-4b39-b04f-31d38b1e6ce9",
        "parentId" : "ee901607-826b-47e0-a17d-e43c974099e9",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "Updated comment int e2e_test.go\n",
        "createdAt" : "2015-07-06T09:49:15Z",
        "updatedAt" : "2015-07-23T11:21:14Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d82de849f57592b13e7d41123031ba659ce6b64",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +226,230 @@\t})\n\n\tDescribe(\"[Skipped][Example]Storm\", func() {\n\t\tIt(\"should create and stop Zookeeper, Nimbus and Storm worker servers\", func() {\n\t\t\tmkpath := func(file string) string {"
  },
  {
    "id" : "aaa43328-2f40-4aac-bbad-1797b6ce07a7",
    "prId" : 10180,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e791592-165a-4724-bf4d-6af05e71ce9c",
        "parentId" : null,
        "authorId" : null,
        "body" : "Why skip by default?\n",
        "createdAt" : "2015-06-24T00:04:35Z",
        "updatedAt" : "2015-06-30T22:26:30Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "3425a367-ef07-442d-945d-d160266c3b2a",
        "parentId" : "1e791592-165a-4724-bf4d-6af05e71ce9c",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "So that problems with the third party code don't interfere with the core e2e tests. I'm planning to set up a separate Jenkins job to run this suite. And once a test/example is stable enough it may possibly be \"unskipped\". At this moment one out of N test runs ends with a strange connection-related exception thrown from Selery internals which I have yet to investigate.\n",
        "createdAt" : "2015-06-24T08:15:58Z",
        "updatedAt" : "2015-06-30T22:26:30Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      },
      {
        "id" : "4d508f60-afe0-471f-8e23-60323f58aece",
        "parentId" : "1e791592-165a-4724-bf4d-6af05e71ce9c",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "Do we still want [Skipped] in the name? I guess it means that local e2e runs will automatically skip it, though it seems like we need a better way ultimately.\n",
        "createdAt" : "2015-06-30T18:53:45Z",
        "updatedAt" : "2015-06-30T22:26:30Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "95e39e65-caf1-43b5-bce9-51b0afab17df",
        "parentId" : "1e791592-165a-4724-bf4d-6af05e71ce9c",
        "authorId" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "body" : "@ixdy Yes, I don't want to include examples in local runs yet.\n",
        "createdAt" : "2015-06-30T19:44:17Z",
        "updatedAt" : "2015-06-30T22:26:30Z",
        "lastEditedBy" : "ab8bc7c5-233d-47c1-b03a-767fb930c021",
        "tags" : [
        ]
      }
    ],
    "commit" : "b5600fee12f8d477635cdc2fd4b32d92043fd568",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +57,61 @@\t})\n\n\tDescribe(\"[Skipped][Example]Redis\", func() {\n\t\tIt(\"should create and stop redis servers\", func() {\n\t\t\tmkpath := func(file string) string {"
  },
  {
    "id" : "6266eb4f-a56a-4b56-8bfe-1b8031ad8852",
    "prId" : 10180,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01dbd4da-0507-48ef-9341-2c61f16a7d6d",
        "parentId" : null,
        "authorId" : null,
        "body" : "Same comment as above.  Why skip by default?\n",
        "createdAt" : "2015-06-24T00:07:07Z",
        "updatedAt" : "2015-06-30T22:26:30Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "b5600fee12f8d477635cdc2fd4b32d92043fd568",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +131,135 @@\t})\n\n\tDescribe(\"[Skipped][Example]Celery-RabbitMQ\", func() {\n\t\tIt(\"should create and stop celery+rabbitmq servers\", func() {\n\t\t\tmkpath := func(file string) string {"
  }
]