[
  {
    "id" : "38ae23a4-d00e-4079-8ab8-8a4d333bb57a",
    "prId" : 96573,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96573#pullrequestreview-530427142",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f08ead2b-536f-41a1-b117-0202a3780b0a",
        "parentId" : null,
        "authorId" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "body" : "@chrishenzie Replying to your concern on the CreateVolumeSource function. I think you are absolutely right. Ideally this function should be a private function in the api package. However, since previously it is under testsuite package so it has been abused by provisioning testsuite:\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/c970a46bc1bcc100bbbfabd5c12bd4c5d87f8aea/test/e2e/storage/testsuites/provisioning.go#L225\r\n\r\nSo definitely if we fix provisioning testsuite to not use this, I can put it under storageapi and make it unexported. One thing I noticed when doing this refactor is that a lot of functions have been abused. This PR has been too large to also include those cleanup. So I think it would be good to focus on move the package first. And then we can do clean up for each individual testsuite to make it clean. Does that make sense?",
        "createdAt" : "2020-11-13T21:28:32Z",
        "updatedAt" : "2020-12-11T06:54:06Z",
        "lastEditedBy" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "tags" : [
        ]
      }
    ],
    "commit" : "356bea6c9fe93b45f8c6e4391a6a98ec35e34ea6",
    "line" : 327,
    "diffHunk" : "@@ -1,1 +736,740 @@\n// CreateVolumeSource creates a volume source object\nfunc CreateVolumeSource(pvcName string, readOnly bool) *v1.VolumeSource {\n\treturn &v1.VolumeSource{\n\t\tPersistentVolumeClaim: &v1.PersistentVolumeClaimVolumeSource{"
  },
  {
    "id" : "2bd7a97a-c0ba-4a08-b7d1-53a12e15dd2d",
    "prId" : 96573,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96573#pullrequestreview-532681766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "665f5887-88dd-44b9-a73d-3ea0b87c28ae",
        "parentId" : null,
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "how to decide which function goes to utils, and which one goes to e2evolume?",
        "createdAt" : "2020-11-17T18:32:36Z",
        "updatedAt" : "2020-12-11T06:54:06Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "66904255-af13-44f5-8edf-124f5428499f",
        "parentId" : "665f5887-88dd-44b9-a73d-3ea0b87c28ae",
        "authorId" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "body" : "The principles I am using here are:\r\n1. If this function has only been called by e2e/storage/..., it should go to e2e/storage/utils, because no other component is using it so lets just keep it at the lowest level\r\n2. If there is any function that has been called outside of storage, it should go to a more general location namely e2evolume or e2epod.\r\n\r\nIn addition to this, dependency management here is that subpackage can import corepackage, but core cannot import sub.\r\nThat being said, previously e2evolume import e2e/storage/utils which is not the right direction. So I move these function up to the e2evolume to clear the dependency. \r\n\r\nI think this direction of dependency also align with another effort from sig testing. Does this make sense?",
        "createdAt" : "2020-11-17T18:44:40Z",
        "updatedAt" : "2020-12-11T06:54:06Z",
        "lastEditedBy" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "tags" : [
        ]
      }
    ],
    "commit" : "356bea6c9fe93b45f8c6e4391a6a98ec35e34ea6",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +70,74 @@)\n\n// VerifyFSGroupInPod verifies that the passed in filePath contains the expectedFSGroup\nfunc VerifyFSGroupInPod(f *framework.Framework, filePath, expectedFSGroup string, pod *v1.Pod) {\n\tcmd := fmt.Sprintf(\"ls -l %s\", filePath)"
  },
  {
    "id" : "756b848a-1ae4-46ec-a5cb-bd12bad4a156",
    "prId" : 95863,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95863#pullrequestreview-523582802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0aa25201-1fae-4a51-9d9a-3cf4554d99fa",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "nit: use `%s/%s` for namespace/name ",
        "createdAt" : "2020-11-04T17:20:33Z",
        "updatedAt" : "2020-11-04T22:08:44Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "1ce61118-cfc1-4c0b-ab2c-d039a394df9f",
        "parentId" : "0aa25201-1fae-4a51-9d9a-3cf4554d99fa",
        "authorId" : "90cfc0c5-e945-4584-be7e-3411fd993507",
        "body" : "Ah the reason i havent used `%s/%s` is because namespace could be empty, in which case i'm assuming its a non-namespaced object. Is it the norm to use `/` anyway?",
        "createdAt" : "2020-11-04T17:29:07Z",
        "updatedAt" : "2020-11-04T22:08:44Z",
        "lastEditedBy" : "90cfc0c5-e945-4584-be7e-3411fd993507",
        "tags" : [
        ]
      }
    ],
    "commit" : "e95af138b538d4beace1eceaeb454c57072130d9",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +825,829 @@\t\t}\n\t\tif err != nil {\n\t\t\tframework.Logf(\"Failed to get object %s %s with err: %v. Will retry in %v\", objectNamespace, objectName, err, timeout)\n\t\t\treturn false\n\t\t}"
  },
  {
    "id" : "8014229c-4a68-4f25-800a-74f50e878c52",
    "prId" : 95863,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95863#pullrequestreview-523575959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9ad27b2-05db-4bfb-ac63-e57f4a215090",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "nit: use `%s/%s` for namespace/name",
        "createdAt" : "2020-11-04T17:20:39Z",
        "updatedAt" : "2020-11-04T22:08:44Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "e95af138b538d4beace1eceaeb454c57072130d9",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +838,842 @@\t}\n\tif err == nil {\n\t\terr = fmt.Errorf(\"finalizer %s not added to object %s %s of resource %s\", finalizer, objectNamespace, objectName, gvr)\n\t}\n\treturn err"
  },
  {
    "id" : "b3cf0a65-76ed-400d-a3b5-53a42b92281c",
    "prId" : 74693,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74693#pullrequestreview-211991398",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6343acae-ecdc-4d15-a8a4-7620e1c26c46",
        "parentId" : null,
        "authorId" : "241ab19e-f85a-4d22-92e2-88f2b6287d14",
        "body" : "could we generate a string uuid instead? https://github.com/kubernetes/apimachinery/blob/ed135c5b96450fd24e5e981c708114fbbd950697/pkg/util/uuid/uuid.go#L30 it will be a bit easier to follow, don't need to worry about encoding then decoding it in the Write function",
        "createdAt" : "2019-03-07T19:50:28Z",
        "updatedAt" : "2019-03-09T00:29:19Z",
        "lastEditedBy" : "241ab19e-f85a-4d22-92e2-88f2b6287d14",
        "tags" : [
        ]
      },
      {
        "id" : "a36f9187-c6b6-4a2a-9825-0717f51a2943",
        "parentId" : "6343acae-ecdc-4d15-a8a4-7620e1c26c46",
        "authorId" : "241ab19e-f85a-4d22-92e2-88f2b6287d14",
        "body" : "nvm, there is no way to generate one from a seed",
        "createdAt" : "2019-03-07T20:01:57Z",
        "updatedAt" : "2019-03-09T00:29:19Z",
        "lastEditedBy" : "241ab19e-f85a-4d22-92e2-88f2b6287d14",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4c88acec63ebd678d2e5a7a3db1b6da22d39b96",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +489,493 @@}\n\nfunc genBinDataFromSeed(len int, seed int64) []byte {\n\tbinData := make([]byte, len)\n\trand.Seed(seed)"
  },
  {
    "id" : "3ec668e0-b136-4551-8e3a-d2498859df8d",
    "prId" : 62303,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62303#pullrequestreview-111405111",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "16bd68cc-11b5-4a8f-bcea-5f210f3a2dba",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "does grepping for _volume-subpath_ still work when `checkSubpath` is false?",
        "createdAt" : "2018-04-11T20:56:38Z",
        "updatedAt" : "2018-04-11T21:20:43Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "3b2a5138-e620-4201-a5e2-5c43e2bc09bf",
        "parentId" : "16bd68cc-11b5-4a8f-bcea-5f210f3a2dba",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "yup",
        "createdAt" : "2018-04-11T21:13:10Z",
        "updatedAt" : "2018-04-11T21:20:43Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "7aca917ea4ad34266e19b31bb50985d91c0df744",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +164,168 @@\n\tBy(\"Expecting the volume mount to be found.\")\n\tresult, err := framework.SSH(fmt.Sprintf(\"mount | grep %s | grep -v volume-subpaths\", clientPod.UID), nodeIP, framework.TestContext.Provider)\n\tframework.LogSSHResult(result)\n\tExpect(err).NotTo(HaveOccurred(), \"Encountered SSH error.\")"
  },
  {
    "id" : "641e91d5-a2ba-4fb5-8174-df83b942493c",
    "prId" : 62303,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62303#pullrequestreview-111405111",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12443aa9-a316-4dc4-bb01-befa54a45a3b",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "this seems pretty similar to the `grep` above.",
        "createdAt" : "2018-04-11T20:57:49Z",
        "updatedAt" : "2018-04-11T21:20:43Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "665198b5-ca9d-4f87-bda3-e05acd747a86",
        "parentId" : "12443aa9-a316-4dc4-bb01-befa54a45a3b",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "The 1st check is filtering out results that have \"volume-subpaths\".  The 2nd check does the opposite",
        "createdAt" : "2018-04-11T21:13:56Z",
        "updatedAt" : "2018-04-11T21:20:43Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "7aca917ea4ad34266e19b31bb50985d91c0df744",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +171,175 @@\tif checkSubpath {\n\t\tBy(\"Expecting the volume subpath mount to be found.\")\n\t\tresult, err := framework.SSH(fmt.Sprintf(\"cat /proc/self/mountinfo | grep %s | grep volume-subpaths\", clientPod.UID), nodeIP, framework.TestContext.Provider)\n\t\tframework.LogSSHResult(result)\n\t\tExpect(err).NotTo(HaveOccurred(), \"Encountered SSH error.\")"
  },
  {
    "id" : "a42b7212-b1fb-45e7-b60f-a03cf3e1bc30",
    "prId" : 62303,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62303#pullrequestreview-111405111",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82e8cb00-5ec3-431e-8c37-0e00a2b6ed98",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "L182: why only restart kubelet when an error occurs?",
        "createdAt" : "2018-04-11T21:03:25Z",
        "updatedAt" : "2018-04-11T21:20:43Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "a9358ca0-24fa-4207-8a17-ec3062d7ea5f",
        "parentId" : "82e8cb00-5ec3-431e-8c37-0e00a2b6ed98",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "If the test succeeded, then kubelet has already been successfully restarted.",
        "createdAt" : "2018-04-11T21:14:51Z",
        "updatedAt" : "2018-04-11T21:20:43Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "7aca917ea4ad34266e19b31bb50985d91c0df744",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +176,180 @@\t\tExpect(result.Code).To(BeZero(), fmt.Sprintf(\"Expected grep exit code of 0, got %d\", result.Code))\n\t}\n\n\tBy(\"Stopping the kubelet.\")\n\tKubeletCommand(KStop, c, clientPod)"
  },
  {
    "id" : "02b7f5b5-3c96-4cfe-af73-8a7704358035",
    "prId" : 62303,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62303#pullrequestreview-111402435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65e206c1-2d7e-45ce-8d39-4799b0dca7c4",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "ditto grep question",
        "createdAt" : "2018-04-11T21:04:49Z",
        "updatedAt" : "2018-04-11T21:20:43Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7aca917ea4ad34266e19b31bb50985d91c0df744",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +209,213 @@\n\tBy(\"Expecting the volume mount not to be found.\")\n\tresult, err = framework.SSH(fmt.Sprintf(\"mount | grep %s | grep -v volume-subpaths\", clientPod.UID), nodeIP, framework.TestContext.Provider)\n\tframework.LogSSHResult(result)\n\tExpect(err).NotTo(HaveOccurred(), \"Encountered SSH error.\")"
  },
  {
    "id" : "3b5535e5-192b-42b6-8dd1-3a4958427d4a",
    "prId" : 61181,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61181#pullrequestreview-105193682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98d5fd29-5885-4f9a-b138-d15eee18d6f1",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Isn't there a helper method does something like \"test condition and wait with exponential backoff\", if not maybe consider for a future refactor.",
        "createdAt" : "2018-03-19T23:09:55Z",
        "updatedAt" : "2018-03-19T23:13:40Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "7ffad284-2c80-4021-a814-3eb86ebc89e8",
        "parentId" : "98d5fd29-5885-4f9a-b138-d15eee18d6f1",
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "Yes. `retryWithExponentialBackOff` in _test/e2e/scalability/load.go_.\r\nI haven't used it but it's there. Would be nice to move it to _framework_ at some point...",
        "createdAt" : "2018-03-20T01:25:00Z",
        "updatedAt" : "2018-03-20T01:25:00Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b85c4fc57a43cf3a2379a29ee502a5c7ef5ae7b3",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +184,188 @@\tExpect(err).NotTo(HaveOccurred())\n\t// Wait for pod to enter \"Terminating state\"\n\ttime.Sleep(30 * time.Second)\n\tBy(\"Starting the kubelet and waiting for pod to delete.\")\n\tKubeletCommand(KStart, c, clientPod)"
  }
]