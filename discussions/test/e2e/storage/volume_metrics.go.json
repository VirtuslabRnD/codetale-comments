[
  {
    "id" : "449f6e4f-631c-4db7-992e-9f5a2fac5e12",
    "prId" : 76625,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76625#pullrequestreview-228520129",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4d78a31-caf3-4e50-9453-bcd88ee31e0b",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Should this be a skip? I think we should consider removing the skip based on provider",
        "createdAt" : "2019-04-18T16:38:48Z",
        "updatedAt" : "2019-04-22T18:51:26Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "ed93a2c1-7c96-47cd-a971-217b012dd748",
        "parentId" : "a4d78a31-caf3-4e50-9453-bcd88ee31e0b",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Since some of these tests depend on underlying volume plugin implementing the particular metric interface, it may not be sufficient for default storageclass to be found.\r\n",
        "createdAt" : "2019-04-18T21:43:10Z",
        "updatedAt" : "2019-04-22T18:51:26Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "6fee8a77279dcf11d559c3eaadfa7b3805c77d1a",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +57,61 @@\t\tdefaultScName, err = framework.GetDefaultStorageClassName(c)\n\t\tif err != nil {\n\t\t\tframework.Failf(err.Error())\n\t\t}\n\t\ttest := testsuites.StorageClassTest{"
  },
  {
    "id" : "2a77b7bd-06e7-4aeb-aeb1-a9775f02b7dc",
    "prId" : 75750,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75750#pullrequestreview-222974026",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d2ac0623-40f9-4e8e-9c06-460784dee5d5",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Doesn't this fail at provision time itself? Do we have to create pod and stuff?",
        "createdAt" : "2019-04-04T19:05:52Z",
        "updatedAt" : "2019-04-04T19:05:52Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "f44e0ed4-f2d0-47d8-870e-79028f84869c",
        "parentId" : "d2ac0623-40f9-4e8e-9c06-460784dee5d5",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "We need to create the Pod to handle delayed binding cases, where provisioning is not triggered until a Pod is created.",
        "createdAt" : "2019-04-04T20:01:46Z",
        "updatedAt" : "2019-04-04T20:01:46Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "db472c87a7f42536b0a281b7b99309b3b8a400ea",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +184,188 @@\n\t\tExpect(len(updatedStorageMetrics.statusMetrics)).ToNot(Equal(0), \"Error fetching c-m updated storage metrics\")\n\t\tverifyMetricCount(storageOpMetrics, updatedStorageMetrics, \"volume_provision\", true)\n\t})\n"
  },
  {
    "id" : "c13c70b3-b3f1-471d-b2e7-61cf8a760e59",
    "prId" : 57872,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57872#pullrequestreview-91130311",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "698fdb52-d010-4a8d-a948-808b25ca847f",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "These metrics appear to be checking absolute number of bound or unbound PVs. Will this not fail when some other PV might exist in the cluster while this test is running? ",
        "createdAt" : "2018-01-23T18:56:18Z",
        "updatedAt" : "2018-01-24T06:38:41Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "6bffa1d5-f864-4e8a-b0cd-dda3f0a67c35",
        "parentId" : "698fdb52-d010-4a8d-a948-808b25ca847f",
        "authorId" : "ea65316b-7fdf-4fe0-99b0-2d437bf2580e",
        "body" : "All volume metric e2e tests are labeled as `[Serial]`(see [here](https://github.com/kubernetes/kubernetes/blob/35ed5338b104f41c91efb2b842e92fded6d0b509/test/e2e/storage/volume_metrics.go#L38)), so we can consider that no other existing PVs while this test is running.",
        "createdAt" : "2018-01-24T01:55:59Z",
        "updatedAt" : "2018-01-24T06:38:41Z",
        "lastEditedBy" : "ea65316b-7fdf-4fe0-99b0-2d437bf2580e",
        "tags" : [
        ]
      },
      {
        "id" : "ba7dad48-7f21-40d1-b8fe-668ab731683d",
        "parentId" : "698fdb52-d010-4a8d-a948-808b25ca847f",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "Yes - I know but reality is stranger than that. I have fixed a number of flakes in this test suite because something else caused metrics to jump around. We have to be careful, and only observe increment in metric values, rather than absolute values - because asserting on absolute values is almost sure to be error prone. ",
        "createdAt" : "2018-01-24T02:00:41Z",
        "updatedAt" : "2018-01-24T06:38:41Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "60643df9-e394-4a12-abfe-a33295762d17",
        "parentId" : "698fdb52-d010-4a8d-a948-808b25ca847f",
        "authorId" : "ea65316b-7fdf-4fe0-99b0-2d437bf2580e",
        "body" : "ACK. This is indeed a problem as some other tests maybe create PV/PVCs and forget to cleanup. I will change to use increment instead of absolute values.",
        "createdAt" : "2018-01-24T02:18:38Z",
        "updatedAt" : "2018-01-24T06:38:41Z",
        "lastEditedBy" : "ea65316b-7fdf-4fe0-99b0-2d437bf2580e",
        "tags" : [
        ]
      },
      {
        "id" : "59652be7-ed45-4a54-b907-f0680d255f76",
        "parentId" : "698fdb52-d010-4a8d-a948-808b25ca847f",
        "authorId" : "ea65316b-7fdf-4fe0-99b0-2d437bf2580e",
        "body" : "@gnufied The e2e tests are updated to validate the relative increment value instead of absolute value, PTAL, thanks.",
        "createdAt" : "2018-01-24T10:36:57Z",
        "updatedAt" : "2018-01-24T10:36:57Z",
        "lastEditedBy" : "ea65316b-7fdf-4fe0-99b0-2d437bf2580e",
        "tags" : [
        ]
      }
    ],
    "commit" : "229833f2f423b564e9944908ce0a81d9fe66f1c6",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +278,282 @@\t\t\t\tExpect(err).NotTo(HaveOccurred(), \"Error creating pv: %v\", err)\n\t\t\t\twaitForPVControllerSync(metricsGrabber, unboundPVKey, classKey)\n\t\t\t\tvalidator([]map[string]int64{nil, {className: 1}, nil, nil})\n\t\t\t})\n"
  },
  {
    "id" : "c9edc92b-3aa6-4528-b232-775dbaf8b841",
    "prId" : 53664,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53664#pullrequestreview-68392599",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bd02ca38-57f8-4fe3-9e09-804f31a33afb",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "Is the number 3 it obvious? Not to me but I am not knowledgeable in metrics. Perhaps this should be a descriptive constant? ",
        "createdAt" : "2017-10-10T18:38:22Z",
        "updatedAt" : "2017-10-11T13:45:18Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "fbbb3838-523f-4875-93a3-ed5a5c622c0a",
        "parentId" : "bd02ca38-57f8-4fe3-9e09-804f31a33afb",
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "in test below I am measuring 3 metrics and hence I expect at least 3 metrics to be present in the result. But because `volume_detach` metric will be generated at very last, i am separately checking that in case code generates other metrics. \r\n\r\nSo 3 isn't really a magic number - just number of metrics test is checking. i can document it.",
        "createdAt" : "2017-10-10T19:05:08Z",
        "updatedAt" : "2017-10-11T13:45:18Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f0c98bed831308f2bc270a542902c0448c939a6",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +118,122 @@\t\t\t// we will have to retry to verify volume_detach metrics\n\t\t\t_, detachMetricFound := updatedStorageMetrics[\"volume_detach\"]\n\t\t\tif metricCount < 3 || !detachMetricFound {\n\t\t\t\tframework.Logf(\"Volume metrics not collected yet, going to retry\")\n\t\t\t\treturn false, nil"
  },
  {
    "id" : "297b5c76-be00-4ffc-8098-f9b688155995",
    "prId" : 53168,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53168#pullrequestreview-65733539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "571f2005-8db3-4cc4-a965-8e24c5f2a809",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "nice!",
        "createdAt" : "2017-09-28T01:41:05Z",
        "updatedAt" : "2017-09-28T02:36:22Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "efdae2060f761a542b02b8312b4e5ae3bd2e4871",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +222,226 @@\tfound := false\n\terrCount := 0\n\tframework.Logf(\"Looking for sample in metric `%s` tagged with namespace `%s`, PVC `%s`\", metricKeyName, namespace, pvcName)\n\tif samples, ok := kubeletMetrics[metricKeyName]; ok {\n\t\tfor _, sample := range samples {"
  },
  {
    "id" : "24c563ec-4635-4b10-a004-70154fac0bb1",
    "prId" : 53168,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53168#pullrequestreview-65733577",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "312fd001-67d5-48bb-acda-3a2c6d03b1c4",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "ditto",
        "createdAt" : "2017-09-28T01:41:29Z",
        "updatedAt" : "2017-09-28T02:36:22Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "efdae2060f761a542b02b8312b4e5ae3bd2e4871",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +225,229 @@\tif samples, ok := kubeletMetrics[metricKeyName]; ok {\n\t\tfor _, sample := range samples {\n\t\t\tframework.Logf(\"Found sample %s\", sample.String())\n\t\t\tsamplePVC, ok := sample.Metric[\"persistentvolumeclaim\"]\n\t\t\tif !ok {"
  },
  {
    "id" : "ef5014c6-d90c-44af-ab36-9404faec533a",
    "prId" : 52836,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52836#pullrequestreview-64331013",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c924aa2-1427-4dc4-81dd-ec67cbac958c",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "Should _framework/metrics_util.go_ be moved to the _framework/metrics/_ dir?",
        "createdAt" : "2017-09-21T15:45:06Z",
        "updatedAt" : "2017-09-21T21:50:22Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3ced98aa5ae15b3fad87cbc9998be7690f5ba74",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +29,33 @@\tkubeletmetrics \"k8s.io/kubernetes/pkg/kubelet/metrics\"\n\t\"k8s.io/kubernetes/test/e2e/framework\"\n\t\"k8s.io/kubernetes/test/e2e/framework/metrics\"\n)\n"
  },
  {
    "id" : "3a70397c-468a-447d-aadb-097d2eceb3c5",
    "prId" : 52836,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52836#pullrequestreview-64380414",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cfb4d42-eb3e-4ec4-aa5e-ab6a99ce2dbd",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "Wondering why `glog()` is used in NewMetricsGrabber? From what I've seen it's much more common in the e2e tests to call `framework.Logf()`.",
        "createdAt" : "2017-09-21T15:49:27Z",
        "updatedAt" : "2017-09-21T21:50:22Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "f6d0ea97-97cd-4888-a659-9aa49e1e387d",
        "parentId" : "6cfb4d42-eb3e-4ec4-aa5e-ab6a99ce2dbd",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "where is the glog used?",
        "createdAt" : "2017-09-21T18:16:49Z",
        "updatedAt" : "2017-09-21T21:50:22Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "33675077-8ee9-44a0-80c1-aab088f47b2c",
        "parentId" : "6cfb4d42-eb3e-4ec4-aa5e-ab6a99ce2dbd",
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "In `metrics.NewMetricsGrabber` [L65](https://github.com/kubernetes/kubernetes/blob/master/test/e2e/framework/metrics/metrics_grabber.go#L65)",
        "createdAt" : "2017-09-21T18:29:10Z",
        "updatedAt" : "2017-09-21T21:50:22Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3ced98aa5ae15b3fad87cbc9998be7690f5ba74",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +57,61 @@\t\tpvc = newClaim(test, ns, \"default\")\n\t\tvar err error\n\t\tmetricsGrabber, err = metrics.NewMetricsGrabber(c, nil, true, false, true, false, false)\n\n\t\tif err != nil {"
  },
  {
    "id" : "637d5dc8-a2dc-479c-bae5-a909f8397385",
    "prId" : 52836,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52836#pullrequestreview-64354598",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a6d00a8-2100-487e-9d70-44afad7303d3",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "You're verifying that the metrics exist and the pvc-name and ns match what's expected. Are there any other metrics to test?",
        "createdAt" : "2017-09-21T16:12:18Z",
        "updatedAt" : "2017-09-21T21:50:22Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "0723325e-4c5b-49e2-8fcf-ab4c9dff5944",
        "parentId" : "7a6d00a8-2100-487e-9d70-44afad7303d3",
        "authorId" : "2b98e6a9-f85b-438b-b665-84ba7dd0d9d2",
        "body" : "Yes - The test is specifically verifying the new feature we added to tag metrics with pvc-name and ns. \r\nVerifying the metrics itself is covered by e2e tests under `e2e_node/summary_tests.go`.\r\n\r\nGiven that we now have this test - it would make sense to move/duplicate those tests with a PVC here. I can do that in a follow up PR.",
        "createdAt" : "2017-09-21T17:04:01Z",
        "updatedAt" : "2017-09-21T21:50:22Z",
        "lastEditedBy" : "2b98e6a9-f85b-438b-b665-84ba7dd0d9d2",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3ced98aa5ae15b3fad87cbc9998be7690f5ba74",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +173,177 @@}\n\n// Verifies the specified metrics are in `kubeletMetrics`\nfunc verifyVolumeStatMetric(metricKeyName string, namespace string, pvcName string, kubeletMetrics metrics.KubeletMetrics) {\n\tfound := false"
  },
  {
    "id" : "91ed883d-8028-41bb-baa4-e9b4f6273503",
    "prId" : 52836,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52836#pullrequestreview-64639719",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a41b9a0-9e9d-43c1-91c2-2927f0547598",
        "parentId" : null,
        "authorId" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "body" : "I don't like this very much. This change will be fine, if we were creating pvc in `BeforeEach` but we aren't. We are only instantiating a PVC object in `BeforeEach`. So `AfterEach` is trying to delete a resource that it did not create.  Other places where we delete pvcs in `AfterEach`  - we are also creating them  in `BeforeEach`. \r\n\r\nMoreover, I would like to add a test for `volume_delete` metric which I forgot to cover and hence I will have to move this statement out of `AfterEach` anyways.  Basically, in this set of tests - I *want* volume operations to happen within `It` block, so as metrics they generate can be properly tested. \r\n\r\nBut I won't block on this. I just felt that, refactoring delete in `AfterEach` is not the right way to remove duplication.  As I said, we could have extracted the setup bits in a function and have both `It` blocks call the common function. ",
        "createdAt" : "2017-09-22T13:05:13Z",
        "updatedAt" : "2017-09-22T13:10:10Z",
        "lastEditedBy" : "d3e684d7-edd2-4290-a8bf-e8b698c97338",
        "tags" : [
        ]
      },
      {
        "id" : "db7280b7-eece-4c8f-8084-0a2476bc5cc0",
        "parentId" : "3a41b9a0-9e9d-43c1-91c2-2927f0547598",
        "authorId" : "2b98e6a9-f85b-438b-b665-84ba7dd0d9d2",
        "body" : "I did think about this when refactoring - the helper ignores \"not found\" errors so it should address both the concerns above i.e. handle the case where we didn't end up creating as well as cases where the test needed to explicitly delete the pvc",
        "createdAt" : "2017-09-22T16:46:06Z",
        "updatedAt" : "2017-09-22T16:46:06Z",
        "lastEditedBy" : "2b98e6a9-f85b-438b-b665-84ba7dd0d9d2",
        "tags" : [
        ]
      },
      {
        "id" : "45c5b0f5-d575-4868-b2f3-a7c9074fae83",
        "parentId" : "3a41b9a0-9e9d-43c1-91c2-2927f0547598",
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "Agree with both of you. @gnufied 's point about symmetry in BeforeEach'es and AfterEach'es is good. @vkamra is correct about the helper.",
        "createdAt" : "2017-09-22T17:02:05Z",
        "updatedAt" : "2017-09-22T17:02:05Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3ced98aa5ae15b3fad87cbc9998be7690f5ba74",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +66,70 @@\tAfterEach(func() {\n\t\tframework.DeletePersistentVolumeClaim(c, pvc.Name, pvc.Namespace)\n\t})\n\n\tIt(\"should create prometheus metrics for volume provisioning and attach/detach\", func() {"
  }
]