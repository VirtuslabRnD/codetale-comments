[
  {
    "id" : "8fdce78a-97b7-486d-9589-9930ce4e9906",
    "prId" : 96042,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96042#pullrequestreview-542839627",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e87b2872-dfa0-4023-bbf4-369c63b7336f",
        "parentId" : null,
        "authorId" : "70e0dd56-8907-46d7-8381-c173d3c02d47",
        "body" : "is this change needed?",
        "createdAt" : "2020-12-01T21:34:04Z",
        "updatedAt" : "2020-12-02T19:15:54Z",
        "lastEditedBy" : "70e0dd56-8907-46d7-8381-c173d3c02d47",
        "tags" : [
        ]
      },
      {
        "id" : "550c9023-3d07-4707-8d42-cbfd565d9299",
        "parentId" : "e87b2872-dfa0-4023-bbf4-369c63b7336f",
        "authorId" : "255dd885-bee4-4c1f-baef-ba11f903dc5c",
        "body" : "This id added automatically by `goimports`. The codebase seems to contains both approaches (with and without the label). For instance:\r\n\r\nhttps://github.com/kubernetes/kubernetes/pull/96042/files#diff-f9cf7d59f38dc004bb86a00b169c989bf93d49636bdf254bf38909a3d37816e3R27\r\n\r\nI'm OK with removing it manually if that's desired.",
        "createdAt" : "2020-12-02T13:35:48Z",
        "updatedAt" : "2020-12-02T19:17:34Z",
        "lastEditedBy" : "255dd885-bee4-4c1f-baef-ba11f903dc5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee082985c2d8568989400d214f56c020ec8b20f9",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +25,29 @@\t\"time\"\n\n\tv1 \"k8s.io/api/core/v1\"\n\tapierrors \"k8s.io/apimachinery/pkg/api/errors\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\""
  },
  {
    "id" : "1c8a1eac-7aa3-42c4-892a-813ab2425453",
    "prId" : 88227,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88227#pullrequestreview-359806785",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c656856-1ade-4d2a-ad9f-69e74cfc98c9",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "this seems fine.",
        "createdAt" : "2020-02-17T15:15:04Z",
        "updatedAt" : "2020-02-17T15:32:47Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "119f4df9c5cb3315a31fbc1457ff84b17aebc681",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +39,43 @@const (\n\t// claimDeletingTimeout is How long claims have to become deleted.\n\tclaimDeletingTimeout = 3 * time.Minute\n)\n"
  },
  {
    "id" : "5283b47a-4067-4e33-8f9a-affc54d28cdc",
    "prId" : 80382,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80382#pullrequestreview-266333229",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "101b0ddf-267a-41ce-b75d-c38a324e3067",
        "parentId" : null,
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "This test suite object does not add a lot of value to this test. I don't think it needs fixing, but this seems like a case where the values could have been inlined.",
        "createdAt" : "2019-07-24T23:19:18Z",
        "updatedAt" : "2019-07-24T23:25:06Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e194cf24cccc88b9d7190465bb20931abed21f55",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +50,54 @@\t\tprefix := \"pvc-protection\"\n\t\tframework.SkipIfNoDefaultStorageClass(client)\n\t\tt := testsuites.StorageClassTest{\n\t\t\tClaimSize: \"1Gi\",\n\t\t}"
  },
  {
    "id" : "1062296a-75ff-4c66-8f29-edb0aeb12edc",
    "prId" : 56931,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/56931#pullrequestreview-82839283",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86342d63-0ad1-4a70-8ff5-a78e670ac933",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Would it be worth it to wait a little bit to make sure it stays Terminating?",
        "createdAt" : "2017-12-11T17:05:02Z",
        "updatedAt" : "2017-12-18T06:37:19Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "14995436-a643-47dc-9954-053315e427e0",
        "parentId" : "86342d63-0ad1-4a70-8ff5-a78e670ac933",
        "authorId" : "f6e2d6c7-c24e-4a4e-ae28-44e89053e54a",
        "body" : "@msau42 it's a good question. Actually, I plan to extend this test after [changes into scheduler](https://github.com/kubernetes/kubernetes/pull/55957) are merged. After the extension the test will check that the PVC is Terminating, then it will try to start a pod that uses the Terminating PVC, check that the pod is not scheduled, delete the not-scheduled pod and then verify that the PVC status is still Terminating. So it will make sure that the PVC stays Terminating for some time.",
        "createdAt" : "2017-12-12T14:04:58Z",
        "updatedAt" : "2017-12-18T06:37:19Z",
        "lastEditedBy" : "f6e2d6c7-c24e-4a4e-ae28-44e89053e54a",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e4c4b23adb5e0be21192abb5eab40ae00102eb5",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +94,98 @@\t\tExpect(err).NotTo(HaveOccurred(), \"Error deleting PVC\")\n\n\t\tBy(\"Checking that the PVC status is Terminating\")\n\t\tpvc, err = client.CoreV1().PersistentVolumeClaims(pvc.Namespace).Get(pvc.Name, metav1.GetOptions{})\n\t\tExpect(err).NotTo(HaveOccurred(), \"While checking PVC status\")"
  },
  {
    "id" : "c436fba2-f06d-4fc1-9873-ce002f5ad87b",
    "prId" : 56931,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/56931#pullrequestreview-83572727",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d784812-3fc1-47be-9636-2a2868adae6e",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "It would be nice to move this to `test/e2e/framework/util.go`, maybe in the aforementioned PR with scheduler tests.",
        "createdAt" : "2017-12-13T17:15:31Z",
        "updatedAt" : "2017-12-18T06:37:19Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "7b131da8-c517-4b58-b8d8-2de2f2456652",
        "parentId" : "8d784812-3fc1-47be-9636-2a2868adae6e",
        "authorId" : "f6e2d6c7-c24e-4a4e-ae28-44e89053e54a",
        "body" : "Should private func that is used only on one place be made public?",
        "createdAt" : "2017-12-14T11:07:27Z",
        "updatedAt" : "2017-12-18T06:37:19Z",
        "lastEditedBy" : "f6e2d6c7-c24e-4a4e-ae28-44e89053e54a",
        "tags" : [
        ]
      },
      {
        "id" : "b0835f98-388c-4c7d-9dc3-94ee4ab7c66c",
        "parentId" : "8d784812-3fc1-47be-9636-2a2868adae6e",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "It won't hurt. I like them all together so I can see what `WaitFor<something>` are available when I write my test. It's harder to find when it's just in `pvc_protection.go`.",
        "createdAt" : "2017-12-14T16:57:05Z",
        "updatedAt" : "2017-12-18T06:37:19Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e4c4b23adb5e0be21192abb5eab40ae00102eb5",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +110,114 @@\n// waitForPersistentVolumeClaimBeRemoved waits for a PersistentVolumeClaim to be removed from the system until timeout occurs, whichever comes first.\nfunc waitForPersistentVolumeClaimBeRemoved(c clientset.Interface, ns string, pvcName string, Poll, timeout time.Duration) error {\n\tframework.Logf(\"Waiting up to %v for PersistentVolumeClaim %s to be removed\", timeout, pvcName)\n\tfor start := time.Now(); time.Since(start) < timeout; time.Sleep(Poll) {"
  }
]