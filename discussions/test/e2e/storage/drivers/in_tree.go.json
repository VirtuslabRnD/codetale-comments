[
  {
    "id" : "1e970ab4-cd25-4778-aee5-3055943845ff",
    "prId" : 98738,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/98738#pullrequestreview-582912848",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "508be886-95db-411c-9b33-dcec8d727112",
        "parentId" : null,
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "if you added ntfs directly here, you don't need a separate InitWindowsVSphereDriver.",
        "createdAt" : "2021-02-03T23:36:50Z",
        "updatedAt" : "2021-02-03T23:59:54Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "ad0b276e-c8a4-43a6-9cd5-eed3a3e11c85",
        "parentId" : "508be886-95db-411c-9b33-dcec8d727112",
        "authorId" : "f56f41d2-ac28-43a4-9ab4-461bf2d2c7ec",
        "body" : "Done, removed the additional windows vsphere driver setup.",
        "createdAt" : "2021-02-04T00:00:40Z",
        "updatedAt" : "2021-02-04T00:00:41Z",
        "lastEditedBy" : "f56f41d2-ac28-43a4-9ab4-461bf2d2c7ec",
        "tags" : [
        ]
      }
    ],
    "commit" : "390eee44ba78ca0b72f41a88c14e4804b05cf9de",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +1417,1421 @@\t\t\t\t\"\", // Default fsType\n\t\t\t\t\"ext4\",\n\t\t\t\t\"ntfs\",\n\t\t\t),\n\t\t\tTopologyKeys: []string{v1.LabelFailureDomainBetaZone},"
  },
  {
    "id" : "43b0fea6-bba8-46a5-82b4-f041cc8b3e62",
    "prId" : 96294,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96294#pullrequestreview-528553119",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2365c0f5-e2fb-48d6-8f27-fb8c2acca6ad",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Can we add os checks for the linux filesystem too? Then we can keep one driver entry?",
        "createdAt" : "2020-11-09T22:45:59Z",
        "updatedAt" : "2020-11-12T01:07:17Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "9192ed6b-90b0-46d8-9007-62b3d0aabacf",
        "parentId" : "2365c0f5-e2fb-48d6-8f27-fb8c2acca6ad",
        "authorId" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "body" : "You mean add OS checks in where?",
        "createdAt" : "2020-11-09T22:51:18Z",
        "updatedAt" : "2020-11-12T01:07:17Z",
        "lastEditedBy" : "d10fef96-5a18-44e7-b23e-735de7561af7",
        "tags" : [
        ]
      },
      {
        "id" : "73ee4b98-bf77-4391-9b87-7d70fbced4a0",
        "parentId" : "2365c0f5-e2fb-48d6-8f27-fb8c2acca6ad",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "https://github.com/kubernetes/kubernetes/blob/master/test/e2e/storage/testsuites/base.go#L179",
        "createdAt" : "2020-11-09T22:53:35Z",
        "updatedAt" : "2020-11-12T01:07:17Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "f609976b-9e31-4654-80f7-b29b40bede6b",
        "parentId" : "2365c0f5-e2fb-48d6-8f27-fb8c2acca6ad",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "but not only the supported fstype is different, but also some capabilities of the driver, eg. testsuites.CapFsGroup, testsuites.CapBlock. Make a separate driver can make this more clear, I think.",
        "createdAt" : "2020-11-10T01:00:13Z",
        "updatedAt" : "2020-11-12T01:07:17Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "adac84d3-4a64-4a11-a932-596069452553",
        "parentId" : "2365c0f5-e2fb-48d6-8f27-fb8c2acca6ad",
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "I think what @msau42 asking for is have a single driver function\r\n```suggestion\r\n// InitGcePdDriver returns gcePdDriver that implements TestDriver interface\r\nfunc InitGcePdDriver() testsuites.TestDriver {\r\n\t// In current test structure, it first initialize the driver and then set up\r\n\t// the new framework, so we cannot get the correct OS here. So here set to\r\n\t// support all fs types including both linux and windows. We have code to check Node OS later\r\n\t// during test.\r\n\tsupportedTypes := sets.NewString(\r\n\t\t\"\", // Default fsType\r\n\t\t\"ext2\",\r\n\t\t\"ext3\",\r\n\t\t\"ext4\",\r\n\t\t\"xfs\",\r\n\t)\r\n\tif runtime.GOOS == \"windows\" {\r\n\t\tsupportedTypes = sets.NewString(\"ntfs\")\r\n\t}\r\n\tgcpPdDriver := &gcePdDriver{\r\n\t\tdriverInfo: testsuites.DriverInfo{\r\n\t\t\tName:             \"gcepd\",\r\n\t\t\tInTreePluginName: \"kubernetes.io/gce-pd\",\r\n\t\t\tMaxFileSize:      testpatterns.FileSizeMedium,\r\n\t\t\tSupportedSizeRange: volume.SizeRange{\r\n\t\t\t\tMin: \"5Gi\",\r\n\t\t\t},\r\n\t\t\tSupportedFsType:      supportedTypes,\r\n\t\t\tSupportedMountOption: sets.NewString(\"debug\", \"nouid32\"),\r\n\t\t\tTopologyKeys:         []string{v1.LabelZoneFailureDomain},\r\n\t\t\tCapabilities: map[testsuites.Capability]bool{\r\n\t\t\t\ttestsuites.CapPersistence:         true,\r\n\t\t\t\ttestsuites.CapFsGroup:             true,\r\n\t\t\t\ttestsuites.CapBlock:               true,\r\n\t\t\t\ttestsuites.CapExec:                true,\r\n\t\t\t\ttestsuites.CapMultiPODs:           true,\r\n\t\t\t\ttestsuites.CapControllerExpansion: true,\r\n\t\t\t\ttestsuites.CapNodeExpansion:       true,\r\n\t\t\t\t// GCE supports volume limits, but the test creates large\r\n\t\t\t\t// number of volumes and times out test suites.\r\n\t\t\t\ttestsuites.CapVolumeLimits: false,\r\n\t\t\t\ttestsuites.CapTopology:     true,\r\n\t\t\t},\r\n\t\t},\r\n\t}\r\n\tif runtime.GOOS == \"windows\" {\r\n\t\tdelete(gcpPdDriver.driverInfo.Capabilities, testsuites.CapBlock)\r\n\t}\r\n\treturn gcpPdDriver\r\n}\r\n```\r\n\r\nNot sure which one is cleaner but I think having a single OS agnostic entry is good considering rest of the entries don't have any mention of OS.",
        "createdAt" : "2020-11-11T07:54:30Z",
        "updatedAt" : "2020-11-12T01:07:17Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      },
      {
        "id" : "a4a9bd1a-40fc-48c6-85cd-654a115ee5ef",
        "parentId" : "2365c0f5-e2fb-48d6-8f27-fb8c2acca6ad",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "cannot use runtime.GOOS == \"windows\"  here, this is compiled and triggered on linux, so runtime.GOOS will always be linux. We can only use framework.NodeDistroIs to check whether the test will be used on Windows cluster or Linux cluster.",
        "createdAt" : "2020-11-11T08:09:25Z",
        "updatedAt" : "2020-11-12T01:07:17Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "aefab814-4bb5-4392-8ad6-473c003a295d",
        "parentId" : "2365c0f5-e2fb-48d6-8f27-fb8c2acca6ad",
        "authorId" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "body" : "Ahh got it, thank you for the clarification.",
        "createdAt" : "2020-11-11T08:18:41Z",
        "updatedAt" : "2020-11-12T01:07:17Z",
        "lastEditedBy" : "38ca4f80-c365-4775-8981-1e56b713b07b",
        "tags" : [
        ]
      },
      {
        "id" : "21331044-a00c-4d99-91cb-40ce30e05b15",
        "parentId" : "2365c0f5-e2fb-48d6-8f27-fb8c2acca6ad",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Will this model be hard if you want to test the driver in a mixed OS cluster?",
        "createdAt" : "2020-11-11T20:40:27Z",
        "updatedAt" : "2020-11-12T01:07:17Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "adf2e771-e0cd-420b-854e-a54558a60a43",
        "parentId" : "2365c0f5-e2fb-48d6-8f27-fb8c2acca6ad",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "In current design, we don't test mixed OS cluster. For Windows cluster, although it has linux node, we don't run Linux test on it. The test need to set --node-os-distro=\"windows\" to indicate this is for windows tests and the test script will also taint Linux node to avoid scheduling pods on linux node.",
        "createdAt" : "2020-11-11T21:37:35Z",
        "updatedAt" : "2020-11-12T01:07:17Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c953c21ba1459f32c537a07b5572160eba03862",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +1271,1275 @@func InitWindowsGcePdDriver() testsuites.TestDriver {\n\tsupportedTypes := sets.NewString(\n\t\t\"ntfs\",\n\t)\n\treturn &gcePdDriver{"
  },
  {
    "id" : "cf99db01-4699-4e90-9b93-4aa56b7f2472",
    "prId" : 95003,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95003#pullrequestreview-495112178",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fe72873-3ae3-4532-a4f2-63170fcd228c",
        "parentId" : null,
        "authorId" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "body" : "+1 to specify volume id instead of volume name, because the id is UUID and safe to be specified.\r\n`cinder delete` allows id as https://docs.openstack.org/python-cinderclient/latest/cli/details.html#cinder-delete",
        "createdAt" : "2020-09-23T23:11:20Z",
        "updatedAt" : "2020-09-24T17:51:49Z",
        "lastEditedBy" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "76254d88a5902045c6ab716e613214d4f2f429c2",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1203,1207 @@\tframework.Logf(\"Waiting up to %v for removal of cinder volume %s / %s\", timeout, id, name)\n\tfor start := time.Now(); time.Since(start) < timeout; time.Sleep(5 * time.Second) {\n\t\toutput, err = exec.Command(\"cinder\", \"delete\", id).CombinedOutput()\n\t\tif err == nil {\n\t\t\tframework.Logf(\"Cinder volume %s deleted\", id)"
  },
  {
    "id" : "5d9ed07c-7d6a-4b3c-9869-dee0e7e10368",
    "prId" : 95003,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95003#pullrequestreview-496561418",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a079875-1fc0-4263-98f6-1add6a18aee4",
        "parentId" : null,
        "authorId" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "body" : "Do we need to output this message?\r\nI guess new line 1210 can output almost same message before this.\r\n\r\n/cc @oomichi ",
        "createdAt" : "2020-09-23T23:15:49Z",
        "updatedAt" : "2020-09-24T17:51:49Z",
        "lastEditedBy" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "tags" : [
        ]
      },
      {
        "id" : "92e68474-1150-4c6c-aec7-ededffd0726f",
        "parentId" : "5a079875-1fc0-4263-98f6-1add6a18aee4",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "`Failf` makes this error recorded as the reason why a test failed. See a random test failure here: https://prow.k8s.io/view/gs/kubernetes-jenkins/pr-logs/pull/94881/pull-kubernetes-e2e-gce-csi-serial/1307100981535707136\r\n\r\nIf you click on a failed test, it shows nice output:\r\n```\r\ntest/e2e/storage/testsuites/volume_expand.go:238\r\nSep 19 00:13:41.897: While creating pods for resizing\r\nUnexpected error:\r\n    <*errors.errorString | 0xc002ba1130>: {\r\n        s: \"pod \\\"pod-7ee298ca-bc8a-4b19-b0fd-0ae251e22924\\\" is not Running: timed out waiting for the condition\",\r\n    }\r\n    pod \"pod-7ee298ca-bc8a-4b19-b0fd-0ae251e22924\" is not Running: timed out waiting for the condition\r\noccurred\r\ntest/e2e/storage/testsuites/volume_expand.go:255\r\n```\r\n\r\nAnd with `Failf` here, we get stdout/stderr in that UI.",
        "createdAt" : "2020-09-25T07:44:26Z",
        "updatedAt" : "2020-09-25T07:44:27Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "296f6baf-3382-41d6-b146-04c9f64a300d",
        "parentId" : "5a079875-1fc0-4263-98f6-1add6a18aee4",
        "authorId" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "body" : "Ah, I see the point.\r\nThanks for your explanation.\r\n\r\n/lgtm",
        "createdAt" : "2020-09-25T16:13:04Z",
        "updatedAt" : "2020-09-25T16:13:04Z",
        "lastEditedBy" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "76254d88a5902045c6ab716e613214d4f2f429c2",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1217,1221 @@\t\tframework.Logf(\"Volume %s / %s:\\n%s\", id, name, string(showOutput))\n\t}\n\tframework.Failf(\"Failed to delete pre-provisioned volume %s / %s: %v\\n%s\", id, name, err, string(output[:]))\n}\n"
  },
  {
    "id" : "8abaa73d-ac5f-40de-8ebe-828ee5229c7f",
    "prId" : 95003,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95003#pullrequestreview-496197991",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de3e1b39-1df9-4daf-9f9b-af0c2a757ee8",
        "parentId" : null,
        "authorId" : "0b4a2997-0cef-48ef-b51f-12dbdcc54ec6",
        "body" : "@jsafrane I doubt there would be any data in `showOutput` in case of error ?",
        "createdAt" : "2020-09-25T05:18:11Z",
        "updatedAt" : "2020-09-25T06:12:17Z",
        "lastEditedBy" : "0b4a2997-0cef-48ef-b51f-12dbdcc54ec6",
        "tags" : [
        ]
      },
      {
        "id" : "97127f8c-d3a3-4a47-8865-1c5ae455f04a",
        "parentId" : "de3e1b39-1df9-4daf-9f9b-af0c2a757ee8",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "What I noticed in our (OpenShift) env is that `cinder delete` failed with\r\n\r\n```\r\nInvalid volume: Volume status must be available or error or [...]\r\n```\r\n\r\nAnd `cinder show` showed the volume is in some bad state.",
        "createdAt" : "2020-09-25T07:41:27Z",
        "updatedAt" : "2020-09-25T07:41:27Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "7a6cbbdd-fd52-4101-bdd7-30db57bb2b6c",
        "parentId" : "de3e1b39-1df9-4daf-9f9b-af0c2a757ee8",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Sorry, re-reading your comment again, if `cinder show` returns error, it probably won't show volume status, still, showing something like `Invalid filters all_tenants,name are found in query options. (HTTP 400)` is still more useful than plain `exit status 1`",
        "createdAt" : "2020-09-25T08:05:12Z",
        "updatedAt" : "2020-09-25T08:05:13Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "76254d88a5902045c6ab716e613214d4f2f429c2",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1213,1217 @@\tshowOutput, showErr := exec.Command(\"cinder\", \"show\", id).CombinedOutput()\n\tif showErr != nil {\n\t\tframework.Logf(\"Failed to show volume %s / %s: %v\\n%s\", id, name, showErr, string(showOutput))\n\t} else {\n\t\tframework.Logf(\"Volume %s / %s:\\n%s\", id, name, string(showOutput))"
  },
  {
    "id" : "085e2791-45b0-4b81-bc7b-3b37c35555e1",
    "prId" : 85898,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85898#pullrequestreview-333967775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ec8fe4b-3d01-43a2-bd28-76df9143d1af",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "zones in vSphere are optional, IMO we can't assume that they support topology by default.\r\n\r\nhttps://github.com/kubernetes/kubernetes/blob/a36704b444518f1736f5f24197d007e642ffb66a/staging/src/k8s.io/legacy-cloud-providers/vsphere/vsphere.go#L1591-L1595",
        "createdAt" : "2019-12-17T11:25:21Z",
        "updatedAt" : "2020-01-20T14:02:16Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "01563f46-402f-4584-8544-592e4196be44",
        "parentId" : "2ec8fe4b-3d01-43a2-bd28-76df9143d1af",
        "authorId" : "d0f794d1-a9d4-4c31-aacc-fb35543cf586",
        "body" : "I removed the Keys.",
        "createdAt" : "2019-12-18T13:29:17Z",
        "updatedAt" : "2020-01-20T14:02:16Z",
        "lastEditedBy" : "d0f794d1-a9d4-4c31-aacc-fb35543cf586",
        "tags" : [
        ]
      }
    ],
    "commit" : "c42e815fb5105379d79987cd35c2555c6f00f3fd",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +1375,1379 @@\t\t\t\t\"ext4\",\n\t\t\t),\n\t\t\tTopologyKeys: []string{v1.LabelZoneFailureDomain},\n\t\t\tCapabilities: map[testsuites.Capability]bool{\n\t\t\t\ttestsuites.CapPersistence: true,"
  },
  {
    "id" : "a8e9d32a-f3d8-44e7-ab98-87d02883c539",
    "prId" : 85898,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85898#pullrequestreview-340535821",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4372e5b1-d241-43ea-a6d2-6c05edfe9b4e",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "should there be `TopologyKeys:         []string{v1.LabelZoneFailureDomain}` on Azure?",
        "createdAt" : "2020-01-08T15:52:26Z",
        "updatedAt" : "2020-01-20T14:02:16Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "9d416a77-b15a-4b31-b98d-f0e6e134bbea",
        "parentId" : "4372e5b1-d241-43ea-a6d2-6c05edfe9b4e",
        "authorId" : "d0f794d1-a9d4-4c31-aacc-fb35543cf586",
        "body" : "Added.",
        "createdAt" : "2020-01-09T13:56:49Z",
        "updatedAt" : "2020-01-20T14:02:16Z",
        "lastEditedBy" : "d0f794d1-a9d4-4c31-aacc-fb35543cf586",
        "tags" : [
        ]
      }
    ],
    "commit" : "c42e815fb5105379d79987cd35c2555c6f00f3fd",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +1511,1515 @@\t\t\t\t// number of volumes and times out test suites.\n\t\t\t\ttestsuites.CapVolumeLimits: false,\n\t\t\t\ttestsuites.CapTopology:     true,\n\t\t\t},\n\t\t},"
  },
  {
    "id" : "f468c942-b370-425e-859a-6c26dec808aa",
    "prId" : 85898,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85898#pullrequestreview-341489278",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cb3b22a-6791-4f68-adc8-34f206a8e8e0",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "key is set but cap is false?",
        "createdAt" : "2020-01-11T00:51:19Z",
        "updatedAt" : "2020-01-20T14:02:16Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c42e815fb5105379d79987cd35c2555c6f00f3fd",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +1375,1379 @@\t\t\t\t\"ext4\",\n\t\t\t),\n\t\t\tTopologyKeys: []string{v1.LabelZoneFailureDomain},\n\t\t\tCapabilities: map[testsuites.Capability]bool{\n\t\t\t\ttestsuites.CapPersistence: true,"
  },
  {
    "id" : "2cd5bd4c-c0af-4190-82c1-694c938a5492",
    "prId" : 85621,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85621#pullrequestreview-325848632",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d312d82-50bf-4099-80ab-44b542dc0d48",
        "parentId" : null,
        "authorId" : "e03e55d1-dd26-489d-a097-b5809c738bb7",
        "body" : "Do we need to skip the AzureFile test as well here ? Or would the future PR on azure file cover this ?",
        "createdAt" : "2019-12-02T22:40:28Z",
        "updatedAt" : "2019-12-03T19:34:10Z",
        "lastEditedBy" : "e03e55d1-dd26-489d-a097-b5809c738bb7",
        "tags" : [
        ]
      },
      {
        "id" : "1b74647b-27b7-4845-9a67-9b97e0cbbd79",
        "parentId" : "1d312d82-50bf-4099-80ab-44b542dc0d48",
        "authorId" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "body" : "azurefile e2e test would be covered by https://github.com/kubernetes-sigs/azurefile-csi-driver/pull/129, @kkmsft, actually the e2e tests in `in_tree.go` do not have lots of coverage.",
        "createdAt" : "2019-12-03T01:29:09Z",
        "updatedAt" : "2019-12-03T19:34:10Z",
        "lastEditedBy" : "e0218e0a-9e55-43f5-8929-04673eea9015",
        "tags" : [
        ]
      }
    ],
    "commit" : "727fdef2db80ea6c693c5078e4a861f33631dafe",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +1449,1453 @@\nfunc (a *azureDiskDriver) SkipUnsupportedTest(pattern testpatterns.TestPattern) {\n\tframework.SkipUnlessProviderIs(\"azure\")\n}\n"
  },
  {
    "id" : "76482721-6073-42d8-8f31-3128a5296761",
    "prId" : 81486,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/81486#pullrequestreview-280374112",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3995870f-93be-4547-b191-4bf1d9bcab03",
        "parentId" : null,
        "authorId" : "41981c80-b404-4c55-bd22-5f96c0512a61",
        "body" : "Could you update `supportedFsType` to include `ext2`, `ext4` and `xfs` as well? ",
        "createdAt" : "2019-08-27T05:30:55Z",
        "updatedAt" : "2019-08-27T18:01:49Z",
        "lastEditedBy" : "41981c80-b404-4c55-bd22-5f96c0512a61",
        "tags" : [
        ]
      },
      {
        "id" : "ea7a45da-8bb2-46c1-b499-49e23b0b8660",
        "parentId" : "3995870f-93be-4547-b191-4bf1d9bcab03",
        "authorId" : "241ab19e-f85a-4d22-92e2-88f2b6287d14",
        "body" : "done",
        "createdAt" : "2019-08-27T18:01:54Z",
        "updatedAt" : "2019-08-27T18:01:54Z",
        "lastEditedBy" : "241ab19e-f85a-4d22-92e2-88f2b6287d14",
        "tags" : [
        ]
      }
    ],
    "commit" : "7851929acf30952aad3fe7abd7653822ad51b0d3",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1518,1522 @@var _ testsuites.DynamicPVTestDriver = &awsDriver{}\n\n// InitAwsDriver returns awsDriver that implements TestDriver interface\nfunc InitAwsDriver() testsuites.TestDriver {\n\treturn &awsDriver{"
  },
  {
    "id" : "5b9c81e2-a6f8-496e-bcd9-15a80d29db03",
    "prId" : 74990,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74990#pullrequestreview-211566870",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8642ba1b-9a77-43e4-a226-e65b6485d2bf",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I think you will need to add a check like this for the CSI GCE PD driver config [here](https://sourcegraph.com/github.com/kubernetes/kubernetes/-/blob/test/e2e/storage/drivers/csi.go#L308)",
        "createdAt" : "2019-03-07T01:43:06Z",
        "updatedAt" : "2019-03-07T17:14:14Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "1b16a9db-9181-4f5f-8adc-68a5e3b478a5",
        "parentId" : "8642ba1b-9a77-43e4-a226-e65b6485d2bf",
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "fixed",
        "createdAt" : "2019-03-07T01:52:58Z",
        "updatedAt" : "2019-03-07T17:14:14Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      }
    ],
    "commit" : "18be0a49e649e71215891f7a78bc2d8527b53cb0",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +1144,1148 @@func (g *gcePdDriver) SkipUnsupportedTest(pattern testpatterns.TestPattern) {\n\tframework.SkipUnlessProviderIs(\"gce\", \"gke\")\n\tif pattern.FeatureTag == \"sig-windows\" {\n\t\tframework.SkipUnlessNodeOSDistroIs(\"windows\")\n\t}"
  },
  {
    "id" : "4b7e5c5d-9875-46a9-9192-adc5481f6712",
    "prId" : 74990,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74990#pullrequestreview-262742344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee6e305a-18e6-4e66-b82f-791cdce57b37",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Should also check `kubernetes.io/os\": \"windows\"`\r\nWe've promoted the labels to GA",
        "createdAt" : "2019-07-16T23:41:28Z",
        "updatedAt" : "2019-07-16T23:41:29Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "18be0a49e649e71215891f7a78bc2d8527b53cb0",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +1203,1207 @@\tif framework.NodeOSDistroIs(\"windows\") {\n\t\tconfig.ClientNodeSelector = map[string]string{\n\t\t\t\"beta.kubernetes.io/os\": \"windows\",\n\t\t}\n\t}"
  },
  {
    "id" : "d9c7ed2b-0332-4dd0-898b-65661a6f05a3",
    "prId" : 70862,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70862#pullrequestreview-187558375",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abe9716d-ebc0-4dc8-943a-ae8b0651c635",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Tests can run in parallel. Does each test case get it's own unique object, or share the same object?  If each test case has a new object, then this is not needed.  If they share the same object, then this may not work very well.",
        "createdAt" : "2018-12-21T19:08:47Z",
        "updatedAt" : "2018-12-21T19:12:55Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "2d46c321-3d83-4214-9601-62d6bb8dbd2f",
        "parentId" : "abe9716d-ebc0-4dc8-943a-ae8b0651c635",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Opened up https://github.com/kubernetes/kubernetes/issues/72288 to consider refactoring this later.  I don't think this is a clean abstraction",
        "createdAt" : "2018-12-21T22:45:12Z",
        "updatedAt" : "2018-12-21T22:45:13Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac8ac8ee6c0efe31f5c4ea06fe0120963fdcdc68",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +152,156 @@\tn.externalPluginName = fmt.Sprintf(\"example.com/nfs-%s\", ns.Name)\n\n\t// Reset config. It might have been modified by a previous CreateVolume call.\n\tn.driverInfo.Config.ServerConfig = nil\n"
  }
]