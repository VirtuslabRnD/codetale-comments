[
  {
    "id" : "7bbf7aa2-d262-47dd-8fbf-c9981fee4814",
    "prId" : 94334,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94334#pullrequestreview-508057674",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "476d4660-0143-40de-84b9-270a8e0e9bdb",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Should we merge this with the stress testsuite?",
        "createdAt" : "2020-10-08T22:18:50Z",
        "updatedAt" : "2021-03-24T20:51:13Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "c4b4a6b4-0c8e-4a37-a12a-08afbb3ea126",
        "parentId" : "476d4660-0143-40de-84b9-270a8e0e9bdb",
        "authorId" : "90cfc0c5-e945-4584-be7e-3411fd993507",
        "body" : "I like the idea of them being separate. There's a lot more we could add here ",
        "createdAt" : "2020-10-14T07:17:23Z",
        "updatedAt" : "2021-03-24T20:51:13Z",
        "lastEditedBy" : "90cfc0c5-e945-4584-be7e-3411fd993507",
        "tags" : [
        ]
      }
    ],
    "commit" : "34e4a5f22c683e8f93cf48275135e40847024e8f",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +40,44 @@)\n\ntype volumePerformanceTestSuite struct {\n\ttsInfo storageframework.TestSuiteInfo\n}"
  },
  {
    "id" : "7d8b117d-0cb7-4aae-93bc-d378ec069fcf",
    "prId" : 94334,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94334#pullrequestreview-528610778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1959919e-72c4-428f-b3dd-d04ed11cbd54",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "StorageClasses with WaitForFirstConsumer require a pod to be scheduled in order for provisioning to happen. For now, maybe we need to force all StorageClasses to use Immediate binding.\r\n\r\nBut longer term, we should have a test that can also use WaitForFirstConsumer binding so we can test the topology path.",
        "createdAt" : "2020-10-08T22:21:42Z",
        "updatedAt" : "2021-03-24T20:51:13Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "bf2ebd56-75c7-4434-87e5-a251327f6f01",
        "parentId" : "1959919e-72c4-428f-b3dd-d04ed11cbd54",
        "authorId" : "90cfc0c5-e945-4584-be7e-3411fd993507",
        "body" : "Added a TODO",
        "createdAt" : "2020-10-14T07:17:29Z",
        "updatedAt" : "2021-03-24T20:51:13Z",
        "lastEditedBy" : "90cfc0c5-e945-4584-be7e-3411fd993507",
        "tags" : [
        ]
      },
      {
        "id" : "27bd2a01-1cf1-4ba7-ba61-d920c7d5ce7e",
        "parentId" : "1959919e-72c4-428f-b3dd-d04ed11cbd54",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I don't see the todo?",
        "createdAt" : "2020-10-30T21:53:13Z",
        "updatedAt" : "2021-03-24T20:51:13Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "3c7ba545-3e93-4ae2-8fe2-e1c5a3604f5b",
        "parentId" : "1959919e-72c4-428f-b3dd-d04ed11cbd54",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Now that I think about it some more, I think we should support WaitForFirstConsumer in the first iteration because almost all the drivers we test in CI use it. Can we add a Pod.Create call here so that we can handle the WaitForFirstConsumer case?",
        "createdAt" : "2020-11-03T04:05:10Z",
        "updatedAt" : "2021-03-24T20:51:13Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "a642cac0-8129-42fd-a907-3ebeca405ee2",
        "parentId" : "1959919e-72c4-428f-b3dd-d04ed11cbd54",
        "authorId" : "90cfc0c5-e945-4584-be7e-3411fd993507",
        "body" : "Done",
        "createdAt" : "2020-11-11T23:29:14Z",
        "updatedAt" : "2021-03-24T20:51:13Z",
        "lastEditedBy" : "90cfc0c5-e945-4584-be7e-3411fd993507",
        "tags" : [
        ]
      }
    ],
    "commit" : "34e4a5f22c683e8f93cf48275135e40847024e8f",
    "line" : 188,
    "diffHunk" : "@@ -1,1 +186,190 @@\t\t\t\tStorageClassName: &sc.Name,\n\t\t\t}, l.ns.Name)\n\t\t\tpvc, err = l.cs.CoreV1().PersistentVolumeClaims(l.ns.Name).Create(context.TODO(), pvc, metav1.CreateOptions{})\n\t\t\tframework.ExpectNoError(err)\n\t\t\t// Store create time for each PVC"
  },
  {
    "id" : "b32eae3f-8394-419e-923d-8783a068c88b",
    "prId" : 94334,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94334#pullrequestreview-505204890",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f165b158-126a-4c05-ab67-bad6385cd673",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "If we have an assertion in a go routine, we need to also call GinkgoRecover() so that errors are handled appropriately. See [example](https://github.com/kubernetes/kubernetes/blob/05a46dbb6026dfd9ae11600f8dc08a99994acdec/test/e2e/storage/testsuites/stress.go#L170)",
        "createdAt" : "2020-10-08T22:29:07Z",
        "updatedAt" : "2021-03-24T20:51:13Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "34e4a5f22c683e8f93cf48275135e40847024e8f",
    "line" : 275,
    "diffHunk" : "@@ -1,1 +273,277 @@\t\tif oldPVC.Status.Phase != v1.ClaimBound && newPVC.Status.Phase == v1.ClaimBound {\n\t\t\tnewPVCInterval, ok := pvcMetrics.perObjectInterval[newPVC.Name]\n\t\t\tframework.ExpectEqual(ok, true, \"PVC %s should exist in interval map already\", newPVC.Name)\n\t\t\tcount++\n\t\t\tnewPVCInterval.enterDesiredState = now"
  },
  {
    "id" : "12348788-6d09-4692-865a-5ca955401433",
    "prId" : 94334,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94334#pullrequestreview-528610778",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a946348-24ed-47e4-9fcd-44d3ce7fa018",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Creating a bunch of resources all at once will probably hit api throttling, which is ok for stress tests, but potentially undesirable for performance benchmarking. In clusterloader2 scale tests, typically groups of resources are created in batches. We may want to do something similar here and make the interval configurable.",
        "createdAt" : "2020-10-30T22:02:39Z",
        "updatedAt" : "2021-03-24T20:51:13Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "bfd6d10b-f3ae-411b-a444-150c9785231d",
        "parentId" : "3a946348-24ed-47e4-9fcd-44d3ce7fa018",
        "authorId" : "90cfc0c5-e945-4584-be7e-3411fd993507",
        "body" : "That's true, but we also want to test throttling of sidecars by dumping requests. What about setting an absurdly high value for `QPS` and `Burst` for the k8sclient that the test uses? ",
        "createdAt" : "2020-10-31T02:48:44Z",
        "updatedAt" : "2021-03-24T20:51:13Z",
        "lastEditedBy" : "90cfc0c5-e945-4584-be7e-3411fd993507",
        "tags" : [
        ]
      },
      {
        "id" : "aace73de-54b3-4fe3-8663-5f8f04c5b1e8",
        "parentId" : "3a946348-24ed-47e4-9fcd-44d3ce7fa018",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I think qps and burst should be configurable, but we want to also be able to measure default performance behavior as well.",
        "createdAt" : "2020-11-03T04:00:15Z",
        "updatedAt" : "2021-03-24T20:51:13Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "71d6971a-a4f7-400d-9d94-3b84d40a1064",
        "parentId" : "3a946348-24ed-47e4-9fcd-44d3ce7fa018",
        "authorId" : "90cfc0c5-e945-4584-be7e-3411fd993507",
        "body" : "What i mean is increasing qps and burst of the k8sclient used by the test to create pvc's on the API server. Line 124 of the latest commit. Doesn't that solve the issue of not throttling while also not modifying the defaults for the components we're aiming to test?",
        "createdAt" : "2020-11-11T23:28:57Z",
        "updatedAt" : "2021-03-24T20:51:13Z",
        "lastEditedBy" : "90cfc0c5-e945-4584-be7e-3411fd993507",
        "tags" : [
        ]
      }
    ],
    "commit" : "34e4a5f22c683e8f93cf48275135e40847024e8f",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +181,185 @@\n\t\tginkgo.By(fmt.Sprintf(\"Creating %d PVCs of size %s\", l.options.ProvisioningOptions.Count, l.options.ProvisioningOptions.VolumeSize))\n\t\tfor i := 0; i < l.options.ProvisioningOptions.Count; i++ {\n\t\t\tpvc := e2epv.MakePersistentVolumeClaim(e2epv.PersistentVolumeClaimConfig{\n\t\t\t\tClaimSize:        l.options.ProvisioningOptions.VolumeSize,"
  },
  {
    "id" : "facb0e44-23a6-4d37-a9f9-c9aec734e141",
    "prId" : 94334,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/94334#pullrequestreview-605539686",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05687ca2-55fb-4c2a-90f3-91c06c4bf15d",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "How long does this test normally take? There is a push to move any long running tests to opt-in jobs.",
        "createdAt" : "2021-03-04T02:00:02Z",
        "updatedAt" : "2021-03-24T20:51:13Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "89ecfc5c-6849-4edc-9b9a-0d74ac1effb0",
        "parentId" : "05687ca2-55fb-4c2a-90f3-91c06c4bf15d",
        "authorId" : "90cfc0c5-e945-4584-be7e-3411fd993507",
        "body" : "It takes about 10 minutes on my local env and most of that time is for cleanup (we wait for all resources to be deleted). ",
        "createdAt" : "2021-03-05T19:34:31Z",
        "updatedAt" : "2021-03-24T20:51:13Z",
        "lastEditedBy" : "90cfc0c5-e945-4584-be7e-3411fd993507",
        "tags" : [
        ]
      }
    ],
    "commit" : "34e4a5f22c683e8f93cf48275135e40847024e8f",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +46,50 @@var _ storageframework.TestSuite = &volumePerformanceTestSuite{}\n\nconst testTimeout = 15 * time.Minute\n\n// Time intervals when a resource was created, it enters"
  }
]