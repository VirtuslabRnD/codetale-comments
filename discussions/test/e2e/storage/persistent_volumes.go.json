[
  {
    "id" : "a4252777-d911-47f5-9e52-bf76b0112f39",
    "prId" : 86283,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86283#pullrequestreview-336657483",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b2dfe72-6ecf-4e91-8ba2-f7666af1930d",
        "parentId" : null,
        "authorId" : "cc740aab-0edd-4978-b80c-6ca3543a6188",
        "body" : "good catch",
        "createdAt" : "2019-12-27T03:11:39Z",
        "updatedAt" : "2019-12-27T03:11:43Z",
        "lastEditedBy" : "cc740aab-0edd-4978-b80c-6ca3543a6188",
        "tags" : [
        ]
      }
    ],
    "commit" : "dbc99290123939203180bd9b13b8ec53931f0368",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +281,285 @@\t\t\tginkgo.It(\"should test that a PV becomes Available and is clean after the PVC is deleted.\", func() {\n\t\t\t\tginkgo.By(\"Writing to the volume.\")\n\t\t\t\tpod := e2epod.MakePod(ns, nil, []*v1.PersistentVolumeClaim{pvc}, true, \"touch /mnt/volume1/SUCCESS && (id -G | grep -E '\\\\b777\\\\b')\")\n\t\t\t\tpod, err = c.CoreV1().Pods(ns).Create(pod)\n\t\t\t\tframework.ExpectNoError(err)"
  },
  {
    "id" : "cfa2a652-fca7-40b1-9dc8-1dba5b523e6c",
    "prId" : 66925,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66925#pullrequestreview-143014020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7dd09884-10a9-41a0-8b39-95ab16b270a0",
        "parentId" : null,
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "why are we sleeping for so long?",
        "createdAt" : "2018-08-02T22:54:18Z",
        "updatedAt" : "2018-08-03T01:36:38Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      },
      {
        "id" : "7c885f2f-5f86-45f9-82d7-673867b259f7",
        "parentId" : "7dd09884-10a9-41a0-8b39-95ab16b270a0",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I just want to simulate a long running process",
        "createdAt" : "2018-08-02T23:39:41Z",
        "updatedAt" : "2018-08-03T01:36:38Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fbf25f8c7681398a00f46c5fe9397b2ae0aaebe",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +323,327 @@\t\t\t\t\twriteCmd += fmt.Sprintf(\"&& touch %v\", getVolumeFile(i))\n\t\t\t\t}\n\t\t\t\twriteCmd += \"&& sleep 10000\"\n\n\t\t\t\tprobe := &v1.Probe{"
  },
  {
    "id" : "59f45a2d-1852-4806-a7c0-46d71f6fd5a7",
    "prId" : 66925,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66925#pullrequestreview-143023766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "119e1331-9d7b-4d7a-b40b-25ac04e26044",
        "parentId" : null,
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "clean up the statefulset after test?",
        "createdAt" : "2018-08-03T00:44:26Z",
        "updatedAt" : "2018-08-03T01:36:38Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "4fbf25f8c7681398a00f46c5fe9397b2ae0aaebe",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +368,372 @@\t\t\t\tss, err = c.AppsV1().StatefulSets(ns).Create(spec)\n\t\t\t\tExpect(err).NotTo(HaveOccurred())\n\t\t\t\tssTester.WaitForRunningAndReady(1, ss)\n\t\t\t})\n\t\t})"
  },
  {
    "id" : "b210eb1e-4737-44e0-8e55-a750f43e959b",
    "prId" : 66923,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66923#pullrequestreview-145784201",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d28b52d7-b330-4ebb-8514-6b9f7ad52def",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Pod should also be deleted after L299.  I don't understand why this isn't causing the test to fail\r\n/lgtm cancel",
        "createdAt" : "2018-08-13T17:50:21Z",
        "updatedAt" : "2018-08-13T18:57:50Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "c4fe1d87-976e-4be0-bb94-87440629e8ad",
        "parentId" : "d28b52d7-b330-4ebb-8514-6b9f7ad52def",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Oh I see. The test PVC, PV cleanup method doesn't actually wait for the object to be gone.",
        "createdAt" : "2018-08-13T17:53:09Z",
        "updatedAt" : "2018-08-13T18:57:50Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "90eb5ace-ffcb-460c-a0d6-5ccff8cf5953",
        "parentId" : "d28b52d7-b330-4ebb-8514-6b9f7ad52def",
        "authorId" : "9214959e-f9c5-43ab-a801-11ef9bc58371",
        "body" : "So do we still need the delete at the end, since the test doesn't care what happens after Pod success? Or will this prevent PV/PVC cleanup after It()?",
        "createdAt" : "2018-08-13T18:39:13Z",
        "updatedAt" : "2018-08-13T18:57:50Z",
        "lastEditedBy" : "9214959e-f9c5-43ab-a801-11ef9bc58371",
        "tags" : [
        ]
      },
      {
        "id" : "01fec3ee-3dc8-4445-81e8-f62ee0089e08",
        "parentId" : "d28b52d7-b330-4ebb-8514-6b9f7ad52def",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I think we should still add it.  I think it would be good (in a separate PR) to improve the cleanup routines",
        "createdAt" : "2018-08-13T18:41:53Z",
        "updatedAt" : "2018-08-13T18:57:50Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "13462bf34113ed3000aaf6dbe5eb66198214a3d6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +284,288 @@\n\t\t\t\tBy(\"Deleting the claim\")\n\t\t\t\tframework.ExpectNoError(framework.DeletePodWithWait(f, c, pod))\n\t\t\t\tframework.ExpectNoError(framework.DeletePVCandValidatePV(c, ns, pvc, pv, v1.VolumeAvailable))\n"
  },
  {
    "id" : "3a98466b-31fd-489c-89cc-7ff601ab5b1c",
    "prId" : 66880,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66880#pullrequestreview-143808139",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bda49a1-3b41-4c5d-8c82-abb09839b233",
        "parentId" : null,
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "is `new(bool)==false? `",
        "createdAt" : "2018-08-07T00:44:30Z",
        "updatedAt" : "2018-08-07T00:45:04Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      },
      {
        "id" : "0ad4fb36-7af0-4ab0-8e6c-7d8d2e16a2ef",
        "parentId" : "0bda49a1-3b41-4c5d-8c82-abb09839b233",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "yup ",
        "createdAt" : "2018-08-07T00:57:03Z",
        "updatedAt" : "2018-08-07T00:57:04Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "0755f4cc0e37ef79d4cbf9fe8af40fefd77eb1f2",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +356,360 @@\t\t\t\tssTester.WaitForStatusReplicas(ss, 0)\n\t\t\t\t// Set OrphanDependent=false so it's deleted synchronously\n\t\t\t\terr = c.AppsV1beta1().StatefulSets(ns).Delete(ss.Name, &metav1.DeleteOptions{OrphanDependents: new(bool)})\n\t\t\t\tExpect(err).NotTo(HaveOccurred())\n"
  },
  {
    "id" : "fca4f04e-c08e-4908-8be5-d795a0c5ddcd",
    "prId" : 66832,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/66832#pullrequestreview-142126732",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12e57176-9cf3-4c86-b4cd-28851d7a357f",
        "parentId" : null,
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "does this test consistently reproduce the error?",
        "createdAt" : "2018-07-31T17:41:21Z",
        "updatedAt" : "2018-08-01T17:04:16Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      },
      {
        "id" : "c64e08e4-a37f-4818-b6d0-39ff89813d90",
        "parentId" : "12e57176-9cf3-4c86-b4cd-28851d7a357f",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "no, the issue is very incredibly difficult to reproduce and I have not found a consistent way to get into the error state",
        "createdAt" : "2018-07-31T20:15:31Z",
        "updatedAt" : "2018-08-01T17:04:16Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "cf107159b415f8195688733c4bc464c4bbe0bb0c",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +304,308 @@\tDescribe(\"Default StorageClass\", func() {\n\t\tContext(\"pods that use multiple volumes\", func() {\n\t\t\tIt(\"should be reschedulable\", func() {\n\t\t\t\t// Only run on providers with default storageclass\n\t\t\t\tframework.SkipUnlessProviderIs(\"openstack\", \"gce\", \"gke\", \"vsphere\", \"azure\")"
  }
]