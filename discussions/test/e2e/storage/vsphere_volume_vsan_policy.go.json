[
  {
    "id" : "a52bc0c9-1684-42bf-adad-d5d7a894773b",
    "prId" : 53227,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53227#pullrequestreview-66707067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98874d8d-e393-4752-8406-5ebf2b494336",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "IMO it would be better to check `isDummyVMPresent()` every X seconds and fail after 6 minutes instead of blind `sleep(6 * minute)`. It could be deleted much earlier. Or is `isDummyVMPresent` an expensive check?",
        "createdAt" : "2017-10-02T13:21:54Z",
        "updatedAt" : "2017-10-04T00:29:00Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "3784a3be-4b61-4921-bcbb-eedec331803b",
        "parentId" : "98874d8d-e393-4752-8406-5ebf2b494336",
        "authorId" : "a52ffc16-075e-4ecb-8ec3-e5096ab48cb5",
        "body" : "Yes. isDummyVMPresent() is an expensive check. This method makes a call to vCenter to check if the VM exists or not. We would want to prevent by polling for it every X seconds.",
        "createdAt" : "2017-10-02T18:15:01Z",
        "updatedAt" : "2017-10-04T00:29:00Z",
        "lastEditedBy" : "a52ffc16-075e-4ecb-8ec3-e5096ab48cb5",
        "tags" : [
        ]
      },
      {
        "id" : "250aeaa3-8973-49a8-a44e-1b4286953ace",
        "parentId" : "98874d8d-e393-4752-8406-5ebf2b494336",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "ack",
        "createdAt" : "2017-10-03T09:57:52Z",
        "updatedAt" : "2017-10-04T00:29:00Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "f15aa051cdc734f1ba1c5aafad94ca71b3f7f7fa",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +348,352 @@\tframework.DeletePersistentVolumeClaim(client, pvclaim.Name, namespace)\n\t// Wait for 6 minutes to let the vSphere Cloud Provider clean up routine delete the dummy VM\n\ttime.Sleep(6 * time.Minute)\n\n\tfnvHash := fnv.New32a()"
  },
  {
    "id" : "1b19e70f-ad2d-4aec-9bf2-e5ada99a8bf7",
    "prId" : 46320,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46320#pullrequestreview-39924672",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca67cbdf-5922-43c9-a811-77c08b02c641",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "What if this env var is not set?",
        "createdAt" : "2017-05-24T04:07:59Z",
        "updatedAt" : "2017-05-24T23:39:05Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "12c9e80b-8b28-4549-81e0-5694713ab818",
        "parentId" : "ca67cbdf-5922-43c9-a811-77c08b02c641",
        "authorId" : "a52ffc16-075e-4ecb-8ec3-e5096ab48cb5",
        "body" : "I will fail the test case, if the required envt. variable is empty. Something like this.\r\n\r\nExpect(os.Getenv(\"VSPHERE_SPBM_GOLD_POLICY\")).NotTo(BeEmpty()).",
        "createdAt" : "2017-05-24T04:20:26Z",
        "updatedAt" : "2017-05-24T23:39:05Z",
        "lastEditedBy" : "a52ffc16-075e-4ecb-8ec3-e5096ab48cb5",
        "tags" : [
        ]
      },
      {
        "id" : "822dbf9a-000b-40e3-bc21-82c362d8a9ee",
        "parentId" : "ca67cbdf-5922-43c9-a811-77c08b02c641",
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "OK. I assume there are changes you need to cause these vars to be set in the CI test environment?",
        "createdAt" : "2017-05-24T04:24:19Z",
        "updatedAt" : "2017-05-24T23:39:05Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "7ab394bb-f2e9-4a28-b3a8-33afd6a73091",
        "parentId" : "ca67cbdf-5922-43c9-a811-77c08b02c641",
        "authorId" : "a52ffc16-075e-4ecb-8ec3-e5096ab48cb5",
        "body" : "True. We have it our CI environment.",
        "createdAt" : "2017-05-24T04:25:23Z",
        "updatedAt" : "2017-05-24T23:39:05Z",
        "lastEditedBy" : "a52ffc16-075e-4ecb-8ec3-e5096ab48cb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c8e92b8fff8569b19bca51f276cf9a58a0e1fb2",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +200,204 @@\n\tIt(\"verify an existing and compatible SPBM policy is honored for dynamically provisioned pvc using storageclass\", func() {\n\t\tBy(fmt.Sprintf(\"Invoking Test for SPBM policy: %s\", os.Getenv(\"VSPHERE_SPBM_GOLD_POLICY\")))\n\t\tgoldPolicy := os.Getenv(\"VSPHERE_SPBM_GOLD_POLICY\")\n\t\tExpect(goldPolicy).NotTo(BeEmpty())"
  },
  {
    "id" : "5688688a-0b88-40ca-b274-c3b5429081f9",
    "prId" : 46320,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46320#pullrequestreview-40130775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "631780af-1b7f-4a64-abe7-203e2e1d1278",
        "parentId" : null,
        "authorId" : "c13045f9-cfc0-48e5-80df-ee48ddaa9fdc",
        "body" : "SpbmStoragePolicy not used in the test.",
        "createdAt" : "2017-05-24T16:38:09Z",
        "updatedAt" : "2017-05-24T23:39:05Z",
        "lastEditedBy" : "c13045f9-cfc0-48e5-80df-ee48ddaa9fdc",
        "tags" : [
        ]
      },
      {
        "id" : "b2bb0e30-b34b-4b91-a94c-5e813f92bed6",
        "parentId" : "631780af-1b7f-4a64-abe7-203e2e1d1278",
        "authorId" : "a52ffc16-075e-4ecb-8ec3-e5096ab48cb5",
        "body" : "It is being used in the last 4 test cases for SPBM policy mgmt.",
        "createdAt" : "2017-05-24T19:44:10Z",
        "updatedAt" : "2017-05-24T23:39:05Z",
        "lastEditedBy" : "a52ffc16-075e-4ecb-8ec3-e5096ab48cb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c8e92b8fff8569b19bca51f276cf9a58a0e1fb2",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +45,49 @@\tDiskFormat                                 = \"diskformat\"\n\tThinDisk                                   = \"thin\"\n\tSpbmStoragePolicy                          = \"storagepolicyname\"\n\tBronzeStoragePolicy                        = \"bronze\"\n\tHostFailuresToTolerateCapabilityVal        = \"0\""
  }
]