[
  {
    "id" : "2bba6749-4a69-4dfe-bbd6-94ef8eaa1b85",
    "prId" : 92845,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92845#pullrequestreview-445931097",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57554c5c-c39c-442d-8664-39288886cca9",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "with the prior PRs, we now seem to have this similar function in a number of places (but with different error messages, context i guess)\r\nshould it have been generalized and placed in a shared location?\r\n",
        "createdAt" : "2020-07-09T18:31:06Z",
        "updatedAt" : "2020-07-11T03:19:03Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "7ea31415-6a9a-4981-99fd-80edd926a8cc",
        "parentId" : "57554c5c-c39c-442d-8664-39288886cca9",
        "authorId" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "body" : "I guessed we could, but that could make common function a little complicated.\r\nThis is a small function which is used in this file only. Then I kept  this function as it.\r\n\r\nReference of similar function from previous PR: https://github.com/kubernetes/kubernetes/blob/1b4e904183139d3f61255cb9ba9b92c54af79567/test/e2e/framework/resource_usage_gatherer.go#L374-L395\r\n",
        "createdAt" : "2020-07-09T18:48:13Z",
        "updatedAt" : "2020-07-11T03:19:03Z",
        "lastEditedBy" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "tags" : [
        ]
      },
      {
        "id" : "0be869fb-ae51-4de4-9abd-94fc143944e1",
        "parentId" : "57554c5c-c39c-442d-8664-39288886cca9",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "ok, SGTM.",
        "createdAt" : "2020-07-09T20:06:21Z",
        "updatedAt" : "2020-07-11T03:19:03Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "029b2d219784dacdb9b70b57673140a4159e81ad",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +343,347 @@}\n\nfunc getControlPlaneNode(client clientset.Interface) (string, error) {\n\tregKubeScheduler := regexp.MustCompile(\"kube-scheduler-.*\")\n\tregKubeControllerManager := regexp.MustCompile(\"kube-controller-manager-.*\")"
  },
  {
    "id" : "01745fbb-da8e-4a1e-b099-f5d8ac33a913",
    "prId" : 92845,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92845#pullrequestreview-445873519",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "732e1fc9-9c7b-4f5b-86db-8f5a245f6acf",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "as mentioned above, i don't understand why this test needs a control-plane node (so maybe we have to clear this topic first).\r\n\r\nbut a meta-question here is - if a node in a certain setup is running the scheduler and the KCM, but not the kube-apiserver (GCP used to do that AFAIK) can we still assume that this is a \"control-plane\" node?\r\n",
        "createdAt" : "2020-07-09T18:38:05Z",
        "updatedAt" : "2020-07-11T03:19:03Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      }
    ],
    "commit" : "029b2d219784dacdb9b70b57673140a4159e81ad",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +345,349 @@func getControlPlaneNode(client clientset.Interface) (string, error) {\n\tregKubeScheduler := regexp.MustCompile(\"kube-scheduler-.*\")\n\tregKubeControllerManager := regexp.MustCompile(\"kube-controller-manager-.*\")\n\n\tpodList, err := client.CoreV1().Pods(metav1.NamespaceSystem).List(context.TODO(), metav1.ListOptions{})"
  },
  {
    "id" : "ede641dc-4c2b-4b4d-b6fc-b1d582c04b01",
    "prId" : 92845,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/92845#pullrequestreview-446773292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76089a95-3e0c-45bb-b40d-247decbc1330",
        "parentId" : null,
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "AFAIK the word \"dummy\" can also be considered offensive, but given this is bound deeper in the test, you can leave it for now.\r\n\r\nfor reference there is a new WG that is being formed to clear some of this language, so i won't be surprised that this test is revisited in the near future:\r\nhttps://github.com/kubernetes/community/pull/4884\r\n\r\nalternatively you could replace the word \"dummy\" with something like \"test\" in this PR.",
        "createdAt" : "2020-07-10T00:34:54Z",
        "updatedAt" : "2020-07-11T03:19:03Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "7bbbb4e8-3a11-4375-a897-d2bc86f2ec95",
        "parentId" : "76089a95-3e0c-45bb-b40d-247decbc1330",
        "authorId" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "body" : "Thanks, that is a nice point.\r\nBut if renaming this dummy to the other word like \"test\", it would be a little difficult to understand what that means because the function contains many \"dummy\"s.\r\nSo I guess it is nice to have another PRs to update such words for the other places.",
        "createdAt" : "2020-07-11T03:18:14Z",
        "updatedAt" : "2020-07-11T03:19:03Z",
        "lastEditedBy" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "tags" : [
        ]
      }
    ],
    "commit" : "029b2d219784dacdb9b70b57673140a4159e81ad",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +309,313 @@\n// invokeStaleDummyVMTestWithStoragePolicy assumes control plane node is present on the datacenter specified in the workspace section of vsphere.conf file.\n// With in-tree VCP, when the volume is created using storage policy, shadow (dummy) VM is getting created and deleted to apply SPBM policy on the volume.\nfunc invokeStaleDummyVMTestWithStoragePolicy(client clientset.Interface, controlPlaneNode string, namespace string, clusterName string, scParameters map[string]string) {\n\tginkgo.By(\"Creating Storage Class With storage policy params\")"
  }
]