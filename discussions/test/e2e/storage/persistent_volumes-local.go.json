[
  {
    "id" : "96597f53-1626-4b2e-8e8e-7782e758bea1",
    "prId" : 100531,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/100531#pullrequestreview-620401539",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fb83fac-928a-432b-bfa4-730cceb6f07a",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "The 50 here was to stress the scheduler and try to uncover races, although an e2e test may not be the right place to do it. @cofyc can the integration stress tests exercise the same race?",
        "createdAt" : "2021-03-24T19:48:36Z",
        "updatedAt" : "2021-03-24T19:48:36Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "751f5d18-9162-4037-83d8-b604b3d7bf6e",
        "parentId" : "3fb83fac-928a-432b-bfa4-730cceb6f07a",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "yes, it's better to stress the scheduler in integration tests. we can convert this test to integration stress test",
        "createdAt" : "2021-03-25T01:57:46Z",
        "updatedAt" : "2021-03-25T01:57:46Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb40b3ded6f41a479323f2fd879c33d26ee8b7e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +659,663 @@\t\t\t\tpvc   *v1.PersistentVolumeClaim\n\t\t\t\tpods  = map[string]*v1.Pod{}\n\t\t\t\tcount = 2\n\t\t\t\terr   error\n\t\t\t)"
  },
  {
    "id" : "93bba882-a16c-41a6-a6ca-8ed3f5f1608e",
    "prId" : 88059,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88059#pullrequestreview-357733936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d66692ed-ec24-4e97-b9bc-df511e05fff9",
        "parentId" : null,
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "not gonna use the fancy `NodeSelection` stuff here?",
        "createdAt" : "2020-02-12T19:29:21Z",
        "updatedAt" : "2020-02-12T19:31:51Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      },
      {
        "id" : "34fe590d-478d-456b-840d-748d6c9d54a6",
        "parentId" : "d66692ed-ec24-4e97-b9bc-df511e05fff9",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "not at the moment. The local storage tests are specific to single nodes.",
        "createdAt" : "2020-02-12T19:40:00Z",
        "updatedAt" : "2020-02-12T19:40:00Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9184b75c9934c70dbb8586986ec2ee047299416",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +990,994 @@\t}\n\n\te2epod.SetNodeAffinity(pod, nodeName)\n\treturn\n}"
  },
  {
    "id" : "45553dda-215f-43b3-9408-f98bcbc9bb2f",
    "prId" : 87168,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87168#pullrequestreview-342236457",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efd6973b-b2f1-4646-8f6d-38bd9b51ccf0",
        "parentId" : null,
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "nit: not strictly necessary (used once afaik)",
        "createdAt" : "2020-01-13T22:59:31Z",
        "updatedAt" : "2020-01-14T19:45:53Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      },
      {
        "id" : "30e95fc3-716d-43d1-b50e-2069ffbbc69c",
        "parentId" : "efd6973b-b2f1-4646-8f6d-38bd9b51ccf0",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "I pulled it into a const since it is also used in the error context.",
        "createdAt" : "2020-01-14T00:59:56Z",
        "updatedAt" : "2020-01-14T19:45:53Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "99a015705ba516802fcde6c6f5252e767c05db79",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +571,575 @@\n\t\t\tginkgo.By(\"Waiting for all pods to complete successfully\")\n\t\t\tconst completeTimeout = 5 * time.Minute\n\t\t\twaitErr := wait.PollImmediate(time.Second, completeTimeout, func() (done bool, err error) {\n\t\t\t\tpodsList, err := config.client.CoreV1().Pods(config.ns).List(metav1.ListOptions{})"
  },
  {
    "id" : "40688c4c-2f1c-444d-a97c-ad7d5af3f58f",
    "prId" : 87168,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87168#pullrequestreview-342236457",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6bf9c92f-7a3b-419b-94ac-3464ca7ab955",
        "parentId" : null,
        "authorId" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "body" : "not sure that this is a terminal error, should we just log and try again?",
        "createdAt" : "2020-01-13T23:11:26Z",
        "updatedAt" : "2020-01-14T19:45:53Z",
        "lastEditedBy" : "542e5d2f-2ff9-4674-ab44-78f31768e7a1",
        "tags" : [
        ]
      },
      {
        "id" : "55832f4e-2e25-4a82-9ea2-abfcde52ff5f",
        "parentId" : "6bf9c92f-7a3b-419b-94ac-3464ca7ab955",
        "authorId" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "body" : "The assumption in this code is that the PVCs already exist. Safe assumption, looking at lines 915-916\r\n\r\nThe previous behavior called `framework.ExpectNoError` which would cause the stack to unwind immediately (and without context). By returning an error here, we make it to line 943 before unwinding the stack (and adding context).",
        "createdAt" : "2020-01-14T01:06:54Z",
        "updatedAt" : "2020-01-14T19:45:53Z",
        "lastEditedBy" : "5f2c1de8-4266-42c0-b343-ba247af3578f",
        "tags" : [
        ]
      }
    ],
    "commit" : "99a015705ba516802fcde6c6f5252e767c05db79",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +928,932 @@\t\t\t\tpvc, err := config.client.CoreV1().PersistentVolumeClaims(volume.pvc.Namespace).Get(volume.pvc.Name, metav1.GetOptions{})\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn false, fmt.Errorf(\"failed to get PVC %s/%s: %v\", volume.pvc.Namespace, volume.pvc.Name, err)\n\t\t\t\t}\n\t\t\t\tif pvc.Status.Phase != v1.ClaimPending {"
  },
  {
    "id" : "15997c6a-405d-40f7-800d-a315ae3df241",
    "prId" : 84444,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84444#pullrequestreview-307783184",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3734fb59-0272-4f86-951e-29acb7f4ac8e",
        "parentId" : null,
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "as an example usage of `Execute` method. I didn't remove all `IssueCommand/IssueCommandWithResult` use cases. These two methods are simple to use sometimes.",
        "createdAt" : "2019-10-28T11:26:00Z",
        "updatedAt" : "2019-10-28T11:26:13Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8c465c8d76ccad6be473c936e6dfad05db07acf",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1184,1188 @@\tssdCmd := fmt.Sprintf(\"ls -1 /mnt/disks/by-uuid/google-local-ssds-%s-%s/ | wc -l\", ssdInterface, filesystemType)\n\tres, err := config.hostExec.Execute(ssdCmd, node)\n\tutils.LogResult(res)\n\tframework.ExpectNoError(err)\n\tnum, err := strconv.Atoi(strings.TrimSpace(res.Stdout))"
  },
  {
    "id" : "82e2fe86-11b3-4680-b2ee-339933ff4ff5",
    "prId" : 70370,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70370#pullrequestreview-186712740",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b067f46-83df-4cc6-8069-f91ba0ca6581",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "This is what I'm talking about, it's reads better :+1: \r\n",
        "createdAt" : "2018-12-19T19:35:07Z",
        "updatedAt" : "2018-12-19T19:46:36Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ff455e340d67f7874d2fa45814804b76abe5885",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1627,1631 @@\tmountProp := v1.MountPropagationHostToContainer\n\n\tprovisioner := &appsv1.DaemonSet{\n\t\tTypeMeta: metav1.TypeMeta{\n\t\t\tKind:       \"DaemonSet\","
  },
  {
    "id" : "ce6b49eb-0c27-42bf-aab7-813f4a4a6e25",
    "prId" : 62903,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62903#pullrequestreview-114077282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76f0320b-d2a0-4b54-befe-62fd15aba74b",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "This is really awesome, thanks for adding all these test cases!",
        "createdAt" : "2018-04-20T23:15:58Z",
        "updatedAt" : "2018-05-02T02:32:00Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "3748197876a6a1f174a38ede3dcfc3b9ec3e2c2f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +65,69 @@\tDirectoryLocalVolumeType localVolumeType = \"dir\"\n\t// like DirectoryLocalVolumeType but it's a symbolic link to directory\n\tDirectoryLinkLocalVolumeType localVolumeType = \"dir-link\"\n\t// like DirectoryLocalVolumeType but bind mounted\n\tDirectoryBindMountedLocalVolumeType localVolumeType = \"dir-bindmounted\""
  },
  {
    "id" : "e452f526-51e7-4390-8783-5d20c96f44c4",
    "prId" : 62646,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62646#pullrequestreview-113323558",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8037248-cc93-4413-9f23-c902a87dfb76",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Can you also add an aftereach to these tests to delete the pods? We had an issue in the past related to unmount.",
        "createdAt" : "2018-04-17T16:22:49Z",
        "updatedAt" : "2018-04-18T03:19:51Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "ae05fcb2-2d1f-47a2-ba28-ec4ce1c51aa4",
        "parentId" : "a8037248-cc93-4413-9f23-c902a87dfb76",
        "authorId" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "body" : "@msau42 Done and squashed. We need to delete the pods manually because it's possible pods cannot be terminated in `Framework.AfterEach`?",
        "createdAt" : "2018-04-18T03:21:09Z",
        "updatedAt" : "2018-04-18T03:21:09Z",
        "lastEditedBy" : "e4e7c71f-23b5-4203-b65d-3f5f3c503b64",
        "tags" : [
        ]
      },
      {
        "id" : "1b70e491-a30c-4a26-82d2-01360a230179",
        "parentId" : "a8037248-cc93-4413-9f23-c902a87dfb76",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I don't exactly remember the original issue, but for some reason our tests that didn't delete the pod passed (even though namespace deletion should have failed during test cleanup), and only when we added a pod delete to the test, then the test failed.",
        "createdAt" : "2018-04-18T17:46:05Z",
        "updatedAt" : "2018-04-18T17:46:05Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "55ef18ad42c21322682c9a165c777527440aa0ba",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +266,270 @@\t\t\t})\n\n\t\t\tContext(\"Set fsGroup for local volume\", func() {\n\n\t\t\t\tIt(\"should set fsGroup for one pod\", func() {"
  },
  {
    "id" : "01387b4e-fc8f-4868-a774-6c11fd291076",
    "prId" : 57810,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/57810#pullrequestreview-86694334",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd4afb04-8223-429a-8e1e-96831104862a",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Can you change the hostpath volume config to also use this variable?",
        "createdAt" : "2018-01-04T02:40:01Z",
        "updatedAt" : "2018-01-04T16:46:04Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "cd21ae67-bbac-4cbc-85fe-eddd91ccf5da",
        "parentId" : "fd4afb04-8223-429a-8e1e-96831104862a",
        "authorId" : "6c37c694-3f72-4ff3-ac3a-5fbddf4d5796",
        "body" : "@msau42 Could you please point me to the line? Are you referring to this line?\r\n\r\n        provisionerConfig.StorageClassConfig = map[string]MountConfig{\r\n                config.scName: {\r\n                        HostDir:  path.Join(hostBase, discoveryDir),  < ====== ?????\r\n                        MountDir: provisionerDefaultMountRoot,\r\n                },\r\n        }\r\n",
        "createdAt" : "2018-01-04T02:50:36Z",
        "updatedAt" : "2018-01-04T16:46:04Z",
        "lastEditedBy" : "6c37c694-3f72-4ff3-ac3a-5fbddf4d5796",
        "tags" : [
        ]
      },
      {
        "id" : "d526f0cb-ef32-4089-9457-343eda5c4bc4",
        "parentId" : "fd4afb04-8223-429a-8e1e-96831104862a",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "https://github.com/sbezverk/kubernetes/blob/46eb099d223ed7034f9d579bdf9ec7a2d2223042/test/e2e/storage/persistent_volumes-local.go#L1074",
        "createdAt" : "2018-01-04T16:21:06Z",
        "updatedAt" : "2018-01-04T16:46:04Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "deeb7906-5ac2-4bf8-af74-82c787c59620",
        "parentId" : "fd4afb04-8223-429a-8e1e-96831104862a",
        "authorId" : "6c37c694-3f72-4ff3-ac3a-5fbddf4d5796",
        "body" : "done",
        "createdAt" : "2018-01-04T16:56:30Z",
        "updatedAt" : "2018-01-04T16:56:30Z",
        "lastEditedBy" : "6c37c694-3f72-4ff3-ac3a-5fbddf4d5796",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe7a0c5a00e826630db9b5bb8384474a7a543ab7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +121,125 @@\tdaemonSetName = \"local-volume-provisioner\"\n\t// provisioner default mount point folder\n\tprovisionerDefaultMountRoot = \"/mnt/local-storage\"\n\t// provisioner node/pv cluster role binding\n\tnodeBindingName         = \"local-storage:provisioner-node-binding\""
  },
  {
    "id" : "28c01ef8-5eb2-47d2-96a7-df711b4aa3c5",
    "prId" : 50332,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50332#pullrequestreview-56100826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f840b355-d50f-46ce-b3a0-5ae673055963",
        "parentId" : null,
        "authorId" : "8993c575-dc8b-41bf-8c8f-877348058a9b",
        "body" : "Is there a sanity check to make sure that the mounted tmpfs volume was indeed used with the pod created (what if its a local directory that is auto created when a mounted fs is not found). Perhaps compare to make sure size seen inside pod is same as tmpfs size?",
        "createdAt" : "2017-08-09T05:44:29Z",
        "updatedAt" : "2017-08-15T03:31:31Z",
        "lastEditedBy" : "8993c575-dc8b-41bf-8c8f-877348058a9b",
        "tags" : [
        ]
      },
      {
        "id" : "17a86a52-db8b-462d-8871-7aaf22bb7872",
        "parentId" : "f840b355-d50f-46ce-b3a0-5ae673055963",
        "authorId" : "9f5e3cfe-0c8a-43e2-8374-3cbe3b3568ab",
        "body" : "I'm adding a sanity check to read the default test file that is placed in the volume when it is created.",
        "createdAt" : "2017-08-14T14:48:07Z",
        "updatedAt" : "2017-08-15T03:31:31Z",
        "lastEditedBy" : "9f5e3cfe-0c8a-43e2-8374-3cbe3b3568ab",
        "tags" : [
        ]
      }
    ],
    "commit" : "f082908ed26033f4a273e5d1642a0daf0bc7544c",
    "line" : 246,
    "diffHunk" : "@@ -1,1 +315,319 @@func twoPodsReadWriteTest(config *localTestConfig, testVol *localTestVolume) {\n\tBy(\"Creating pod1 to write to the PV\")\n\tpod1, pod1Err := createLocalPod(config, testVol)\n\tExpect(pod1Err).NotTo(HaveOccurred())\n"
  },
  {
    "id" : "ddd92270-4cf8-42c1-9bbd-362ff07b2b34",
    "prId" : 50177,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50177#pullrequestreview-54803922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3356bfb-8d16-4c45-910c-843740e2605f",
        "parentId" : null,
        "authorId" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "body" : "what is the difference between this command and the previous read command?",
        "createdAt" : "2017-08-07T23:02:50Z",
        "updatedAt" : "2017-08-07T23:02:50Z",
        "lastEditedBy" : "44594ff0-8fbc-44a7-84f9-654ffd54270f",
        "tags" : [
        ]
      },
      {
        "id" : "f40e97cf-1e04-4ecf-9c60-6d158504e5e9",
        "parentId" : "f3356bfb-8d16-4c45-910c-843740e2605f",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "So in the successful case, the read command has a non-zero return code because the file doesn't exist.  But the `IssueSSH` function validates that the return code is 0, so it returns an error.  Instead of refactoring the `IssueSSH` command, I decided to rework the command we pass in so that it returns a 0 return code if the file doesn't exist.",
        "createdAt" : "2017-08-07T23:46:11Z",
        "updatedAt" : "2017-08-07T23:46:11Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "7778b0dfeef1fc628edbdbf9a3d7d9b01889fa4b",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +477,481 @@\treturn fmt.Sprintf(\"[ ! -e %s ]\", testFilePath)\n}\n\n// Execute a read or write command in a pod.\n// Fail on error"
  },
  {
    "id" : "6e73f759-d64d-4b8d-ba69-03334e526a19",
    "prId" : 49749,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49749#pullrequestreview-59380940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b852207-233a-4d47-858d-fffee78669ca",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "does this place additional requirements on CI envs? what happens on OSes that don't have selinux support or have it disabled?",
        "createdAt" : "2017-08-29T13:43:50Z",
        "updatedAt" : "2017-08-29T13:43:50Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2800f260-82a9-4bb1-8790-a564450d4da5",
        "parentId" : "3b852207-233a-4d47-858d-fffee78669ca",
        "authorId" : "6c37c694-3f72-4ff3-ac3a-5fbddf4d5796",
        "body" : "I run this test with SELinux disabled and I have not seen any impact so I do not expect any additional requirements for CI. If there is a way to test it on CI, please let me know how, I would definitely give it a spin there. ",
        "createdAt" : "2017-08-29T13:51:06Z",
        "updatedAt" : "2017-08-29T13:51:06Z",
        "lastEditedBy" : "6c37c694-3f72-4ff3-ac3a-5fbddf4d5796",
        "tags" : [
        ]
      },
      {
        "id" : "7278d72b-a8f2-455d-b544-6552e9f68d00",
        "parentId" : "3b852207-233a-4d47-858d-fffee78669ca",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "cc @kubernetes/sig-storage-pr-reviews on SELinux CI question",
        "createdAt" : "2017-08-29T14:05:54Z",
        "updatedAt" : "2017-08-29T14:05:54Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e3cec897-f10c-4a34-a50e-d56f5aaa44dd",
        "parentId" : "3b852207-233a-4d47-858d-fffee78669ca",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I'll run this PR against my GCE env and see.",
        "createdAt" : "2017-08-29T17:06:07Z",
        "updatedAt" : "2017-08-29T17:06:08Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "31eca714-7130-4fc0-924f-4b58892c6f0b",
        "parentId" : "3b852207-233a-4d47-858d-fffee78669ca",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I built and ran this PR against my GCE e2e env and all the tests passed.",
        "createdAt" : "2017-08-29T21:05:29Z",
        "updatedAt" : "2017-08-29T21:05:29Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "d904e525702d6c9e5bf32743b2b73d08f2e9c737",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +502,506 @@\nfunc makeLocalPod(config *localTestConfig, volume *localTestVolume, cmd string) *v1.Pod {\n\treturn framework.MakeSecPod(config.ns, []*v1.PersistentVolumeClaim{volume.pvc}, false, cmd, false, false, selinuxLabel)\n}\n"
  },
  {
    "id" : "7af45fa4-bd9e-4606-bae6-b927e3ccd63e",
    "prId" : 49749,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49749#pullrequestreview-59246503",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78c30ea7-eeb3-4ef8-b530-60e3ff73825b",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "why the switch from pod to job?",
        "createdAt" : "2017-08-29T13:45:03Z",
        "updatedAt" : "2017-08-29T13:45:03Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c3846ac4-c128-42e6-a6d3-0ab9d8e70d96",
        "parentId" : "78c30ea7-eeb3-4ef8-b530-60e3ff73825b",
        "authorId" : "6c37c694-3f72-4ff3-ac3a-5fbddf4d5796",
        "body" : "The function of bootstrapper is just to start Daemon set with the provisioner, before with pod, it has to be manually deleted and with job it is not required.",
        "createdAt" : "2017-08-29T13:51:27Z",
        "updatedAt" : "2017-08-29T13:51:27Z",
        "lastEditedBy" : "6c37c694-3f72-4ff3-ac3a-5fbddf4d5796",
        "tags" : [
        ]
      }
    ],
    "commit" : "d904e525702d6c9e5bf32743b2b73d08f2e9c737",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +683,687 @@}\n\nfunc createBootstrapperJob(config *localTestConfig) {\n\tbootJob := &batchv1.Job{\n\t\tTypeMeta: metav1.TypeMeta{"
  },
  {
    "id" : "95a5ac4f-531b-4a41-9595-87c6d6d01f0a",
    "prId" : 48860,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48860#pullrequestreview-49967124",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc392ac6-00bf-4561-85ea-b5700c8450b8",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "Just fyi: [pr 46821](https://github.com/kubernetes/kubernetes/pull/46821) defines various disk size constants, so when that pr is merged you could use `10*framework.Mb`",
        "createdAt" : "2017-07-13T23:43:15Z",
        "updatedAt" : "2017-08-01T01:41:38Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "15800f7c-a789-444e-97f9-7c5f2275a07a",
        "parentId" : "fc392ac6-00bf-4561-85ea-b5700c8450b8",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "ack",
        "createdAt" : "2017-07-14T05:37:56Z",
        "updatedAt" : "2017-08-01T01:41:38Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "59c54805aeab61fb0fad563f4a7088ec4310dc45",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +92,96 @@\tpvBindingName   = \"local-storage:provisioner-pv-binding\"\n\t// A sample request size\n\ttestRequestSize = \"10Mi\"\n)\n"
  },
  {
    "id" : "51d30d95-b9e1-4fa9-952b-eabe7d1f01d7",
    "prId" : 48860,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48860#pullrequestreview-50240431",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28afad2f-5ca8-4fab-a904-144c3a3dd948",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "Do we need to check that it bound to the correct PV?",
        "createdAt" : "2017-07-14T20:22:31Z",
        "updatedAt" : "2017-08-01T01:41:38Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "4a3214f4-3528-44a9-b9a0-5d1b2ba053bc",
        "parentId" : "28afad2f-5ca8-4fab-a904-144c3a3dd948",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "Done",
        "createdAt" : "2017-07-17T05:59:20Z",
        "updatedAt" : "2017-08-01T01:41:38Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "59c54805aeab61fb0fad563f4a7088ec4310dc45",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +332,336 @@\t\t\tclaim, err := config.client.Core().PersistentVolumeClaims(config.ns).Create(newLocalClaim(config))\n\t\t\tExpect(err).NotTo(HaveOccurred())\n\t\t\terr = framework.WaitForPersistentVolumeClaimPhase(\n\t\t\t\tv1.ClaimBound, config.client, claim.Namespace, claim.Name, framework.Poll, 1*time.Minute)\n\t\t\tExpect(claim.Spec.VolumeName).To(Equal(oldPV.Name))"
  },
  {
    "id" : "c637c959-adf1-4996-86b9-584a4f1b9c7c",
    "prId" : 48860,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48860#pullrequestreview-51780859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a0b569c-6272-443f-b1d2-9b3e4de9862c",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "If you have multiple tests running in parallel, you may get a different PV.  Maybe we need the storage class name to be unique per test.  You could potentially append the test namespace name to the storage class name.",
        "createdAt" : "2017-07-17T17:24:12Z",
        "updatedAt" : "2017-08-01T01:41:38Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "d7fd038f-f867-4030-b871-58d2090f3854",
        "parentId" : "8a0b569c-6272-443f-b1d2-9b3e4de9862c",
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "_storage/persistent_volumes-disruptive.go_ has examples on using labels to ensure the right claim binds to the correct pv.",
        "createdAt" : "2017-07-17T18:02:52Z",
        "updatedAt" : "2017-08-01T01:41:38Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "ab7e5a91-5556-465e-a7d2-099514a0ffb6",
        "parentId" : "8a0b569c-6272-443f-b1d2-9b3e4de9862c",
        "authorId" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "body" : "Done.  I've appended namespace suffix to storage class name.\r\n\r\n@jeffvance thanks for suggestion; but here, PVs are created from local volume provisioner, i can't control labels on PVs.",
        "createdAt" : "2017-07-24T14:13:48Z",
        "updatedAt" : "2017-08-01T01:41:38Z",
        "lastEditedBy" : "7116d1ae-39f7-4e5d-81a9-1bcb75ebd909",
        "tags" : [
        ]
      }
    ],
    "commit" : "59c54805aeab61fb0fad563f4a7088ec4310dc45",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +334,338 @@\t\t\terr = framework.WaitForPersistentVolumeClaimPhase(\n\t\t\t\tv1.ClaimBound, config.client, claim.Namespace, claim.Name, framework.Poll, 1*time.Minute)\n\t\t\tExpect(claim.Spec.VolumeName).To(Equal(oldPV.Name))\n\t\t\tExpect(err).NotTo(HaveOccurred())\n"
  },
  {
    "id" : "507daef5-fde4-4523-91e5-caa28e30d05d",
    "prId" : 47999,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/47999#pullrequestreview-49066073",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7002251-41a6-4dda-8638-883186ff15e4",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "You shouldn't need the second return value.",
        "createdAt" : "2017-07-11T00:28:37Z",
        "updatedAt" : "2017-07-13T12:54:13Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      }
    ],
    "commit" : "791970025e898eaf6d25015a9d7ee57de5f69e23",
    "line" : 296,
    "diffHunk" : "@@ -1,1 +282,286 @@\thostDir := filepath.Join(hostBase, testDirName)\n\t//populate volume with testFile containing testFileContent\n\twriteCmd, _ := createWriteAndReadCmds(testDir, testFile, testFileContent)\n\tBy(fmt.Sprintf(\"Creating local volume on node %q at path %q\", node.Name, hostDir))\n"
  }
]