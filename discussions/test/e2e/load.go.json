[
  {
    "id" : "88c99ee2-67c5-4381-af28-c7758c9aa918",
    "prId" : 37696,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37696#pullrequestreview-11365204",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e40bb5c-0450-4be6-8732-5df571761e01",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I wouldn't change predefined tests. We should have a test that has everything inside, not 3 different tests. [Obviously not in this PR].",
        "createdAt" : "2016-12-01T15:24:47Z",
        "updatedAt" : "2016-12-06T11:29:37Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "84aa33e4-89f6-4b8d-b020-8fdacb38c536",
        "parentId" : "0e40bb5c-0450-4be6-8732-5df571761e01",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Same  here - let's treat this PR as infrastructural and move this one to a separate PR if you want this.",
        "createdAt" : "2016-12-05T11:26:44Z",
        "updatedAt" : "2016-12-06T11:29:37Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "34a51d4e-c0f8-4670-9829-cf5de8f9b475",
        "parentId" : "0e40bb5c-0450-4be6-8732-5df571761e01",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Done.",
        "createdAt" : "2016-12-05T12:05:01Z",
        "updatedAt" : "2016-12-06T11:29:37Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "070f0979c29748584693c47b6b194d31c99c0785",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +128,132 @@\t\t// The container will consume 1 cpu and 512mb of memory.\n\t\t{podsPerNode: 3, image: \"jess/stress\", command: []string{\"stress\", \"-c\", \"1\", \"-m\", \"2\"}, kind: api.Kind(\"ReplicationController\")},\n\t\t{podsPerNode: 30, image: \"gcr.io/google_containers/serve_hostname:v1.4\", kind: api.Kind(\"ReplicationController\")},\n\t}\n"
  },
  {
    "id" : "394461a0-50c4-467b-9a94-71ddacf10500",
    "prId" : 37696,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37696#pullrequestreview-11365870",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6bd0a68f-a810-4df7-9d8f-0bfe657e9e01",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Please revert the change with List - this was added explicitly to test listing too.",
        "createdAt" : "2016-12-05T11:27:55Z",
        "updatedAt" : "2016-12-06T11:29:37Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "7355807a-1657-4ca5-86ff-8e11e00007ed",
        "parentId" : "6bd0a68f-a810-4df7-9d8f-0bfe657e9e01",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Done.",
        "createdAt" : "2016-12-05T12:09:54Z",
        "updatedAt" : "2016-12-06T11:29:37Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "070f0979c29748584693c47b6b194d31c99c0785",
    "line" : null,
    "diffHunk" : "@@ -1,1 +396,400 @@\tframework.ExpectNoError(framework.ScaleResource(\n\t\tconfig.GetClient(), config.GetInternalClient(), config.GetNamespace(), config.GetName(), newSize, true, config.GetKind()),\n\t\tfmt.Sprintf(\"scaling rc %s for the first time\", config.GetName()))\n\n\tselector := labels.SelectorFromSet(labels.Set(map[string]string{\"name\": config.GetName()}))"
  },
  {
    "id" : "84869204-6595-4f76-a0a6-1ee7c5fc55d1",
    "prId" : 33733,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33733#pullrequestreview-2141678",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e1a8c73-1866-4fc4-94a3-96059a298610",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "remove empty line\n",
        "createdAt" : "2016-09-29T13:44:33Z",
        "updatedAt" : "2016-09-29T14:33:06Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "a32e4f25-f6e3-4ec3-9d41-e3f0e1b37e29",
        "parentId" : "4e1a8c73-1866-4fc4-94a3-96059a298610",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "done\n",
        "createdAt" : "2016-09-29T13:49:35Z",
        "updatedAt" : "2016-09-29T14:33:06Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "dfffa742-3475-47fd-93ba-783bec0d96f5",
        "parentId" : "4e1a8c73-1866-4fc4-94a3-96059a298610",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "[this was a debug log - removed it]\n",
        "createdAt" : "2016-09-29T13:50:01Z",
        "updatedAt" : "2016-09-29T14:33:06Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "df8f83fd519360f7a2e3e9abe3796d9247555d59",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +260,264 @@\t\t// Transport field.\n\t\tconfig.TLSClientConfig = restclient.TLSClientConfig{}\n\n\t\tc, err := client.New(config)\n\t\tif err != nil {"
  },
  {
    "id" : "0f6fb096-a374-4769-b63b-140f56b3c82b",
    "prId" : 23432,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14ca2307-9b1e-4fe8-a6f5-4f4cd2a3d5ac",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "30?\n",
        "createdAt" : "2016-03-24T16:09:14Z",
        "updatedAt" : "2016-03-25T10:54:29Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "a9971c85-bd30-417c-b7fd-40dcb1d8acd7",
        "parentId" : "14ca2307-9b1e-4fe8-a6f5-4f4cd2a3d5ac",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "no - see the next line of the comment.\n",
        "createdAt" : "2016-03-25T10:54:14Z",
        "updatedAt" : "2016-03-25T10:54:29Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "b953048f0bf921845192e8f655bb7126977ecc0b",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +135,139 @@\t\t\t// We would like to spread scaling replication controllers over time\n\t\t\t// to make it possible to create/schedule & delete them in the meantime.\n\t\t\t// Currently we assume that 10 pods/second average throughput.\n\t\t\t// The expected number of created/deleted pods is less than totalPods/3.\n\t\t\tscalingTime := time.Duration(totalPods/30) * time.Second"
  },
  {
    "id" : "96cf5320-9fab-46cb-a503-b9f3e0f74854",
    "prId" : 20718,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "360922eb-d941-4b9f-909d-1583ab7ce1ad",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Could we take this out to a generic f(n) - I'm guessing it would be useful in other testing contexts. \n",
        "createdAt" : "2016-02-05T20:22:31Z",
        "updatedAt" : "2016-02-08T10:03:08Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "1d896d3b-8a26-4f23-85d7-4015a2e3575d",
        "parentId" : "360922eb-d941-4b9f-909d-1583ab7ce1ad",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "This is still a test PR, not ready for review.\nBut sure - I can do it.\n",
        "createdAt" : "2016-02-08T07:02:55Z",
        "updatedAt" : "2016-02-08T10:03:08Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "a1a6218dc69da594d853bcc35f554e467f56ae95",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +71,75 @@\t\t// Explicitly create a client with higher QPS limits.\n\t\tconfig, err := loadConfig()\n\t\tExpect(err).NotTo(HaveOccurred())\n\t\tconfig.QPS = 50\n\t\tconfig.Burst = 100"
  },
  {
    "id" : "0170cf4f-6973-4d4e-91f6-78ae279be6d8",
    "prId" : 10823,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1780b2d5-7dd0-4b98-b7b5-fe7385a838e4",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "How did you choose these numbers? If we are advertising 30 pods per node but can handle only 3 stress pods (which don't look very stressful, based on your -c and -m arguments) then that's not very good. \n",
        "createdAt" : "2015-07-07T22:24:55Z",
        "updatedAt" : "2015-07-08T09:02:34Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "d7d28544-6bfb-47f2-927f-caf762f82e6f",
        "parentId" : "1780b2d5-7dd0-4b98-b7b5-fe7385a838e4",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Pods consume 3 cores and 1.5gb mem on each node by average, while nodes have 1 core and 3.8gb mem. Seems like quite reasonable load. We definitely don't want to use more memory that is available on the node. Another option is to run more pods with less resources consumed.\n",
        "createdAt" : "2015-07-08T04:51:05Z",
        "updatedAt" : "2015-07-08T09:02:34Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "b1f5463a-1b14-4efe-bf21-e3eaaccbc560",
        "parentId" : "1780b2d5-7dd0-4b98-b7b5-fe7385a838e4",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Never mind, what you're doing makes sense.\n",
        "createdAt" : "2015-07-08T07:20:09Z",
        "updatedAt" : "2015-07-08T09:02:34Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fb39542d078ee4382141f575e5fedca40eacaff",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +100,104 @@\tloadTests := []Load{\n\t\t// The container will consume 1 cpu and 512mb of memory.\n\t\t{podsPerNode: 3, image: \"jess/stress\", command: []string{\"stress\", \"-c\", \"1\", \"-m\", \"2\"}},\n\t\t{podsPerNode: 30, image: \"gcr.io/google_containers/serve_hostname:1.1\"},\n\t}"
  },
  {
    "id" : "75bf080a-87a1-4608-95b2-e89fc69bc1f7",
    "prId" : 10823,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "099f525b-f66a-4623-968c-3891de75f9ae",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Does this approach still make sense with such a small number of pods (for the 3 pods/node case)? Maybe just split pods evenly among 3 RCs or something like that?\n",
        "createdAt" : "2015-07-07T22:32:28Z",
        "updatedAt" : "2015-07-08T09:02:34Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "cf1408f1-2732-4f70-abb6-431763d3ff9f",
        "parentId" : "099f525b-f66a-4623-968c-3891de75f9ae",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Why not? If we have 2 node cluster (like in e2e) there will be 1 RC with 5 pods. If we have 100 node custer (scalability) there will be 3 RC with 30 pods and ~ 40 RC with 5 pods. It will also simulate load on Kubernetes components.\n\nEDIT: I have to update computeRCCounts above to implement behavior I described.\n",
        "createdAt" : "2015-07-08T04:45:02Z",
        "updatedAt" : "2015-07-08T09:02:34Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "727da664-395b-486b-9960-fded24dd4fbf",
        "parentId" : "099f525b-f66a-4623-968c-3891de75f9ae",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "OK.\n",
        "createdAt" : "2015-07-08T07:31:41Z",
        "updatedAt" : "2015-07-08T09:02:34Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fb39542d078ee4382141f575e5fedca40eacaff",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +146,150 @@}\n\nfunc generateRCConfigs(totalPods int, image string, command []string, c *client.Client, ns string) []*RCConfig {\n\tconfigs := make([]*RCConfig, 0)\n"
  },
  {
    "id" : "f460a51c-bd57-4c3d-a6c1-15f226408d23",
    "prId" : 9478,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf420cee-e736-4220-a063-50025f046983",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Please add a comment describing how RC sizes change.\n",
        "createdAt" : "2015-06-09T14:30:33Z",
        "updatedAt" : "2015-06-09T14:44:42Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "a421474a-c161-438c-9482-c143b970d340",
        "parentId" : "cf420cee-e736-4220-a063-50025f046983",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Done.\n",
        "createdAt" : "2015-06-09T14:45:28Z",
        "updatedAt" : "2015-06-09T14:45:28Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea7a615ce6600fbc9ea30235ec5757034e01b3b1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +192,196 @@// Scales RC to a random size within [0.5*size, 1.5*size] and lists all the pods afterwards.\n// Scaling happens always based on original size, not the current size.\nfunc scaleRC(wg *sync.WaitGroup, config *RCConfig) {\n\tdefer GinkgoRecover()\n\tdefer wg.Done()"
  },
  {
    "id" : "5d037b29-e042-47dd-8ff6-ed9ade78221b",
    "prId" : 9116,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85c3fc12-29d1-4d83-914f-6ee793c6c1ab",
        "parentId" : null,
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Please add a godoc\n",
        "createdAt" : "2015-06-03T10:21:08Z",
        "updatedAt" : "2015-06-03T11:14:08Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "c7a9a91f-b9ea-4ff0-83ce-67869854d9b1",
        "parentId" : "85c3fc12-29d1-4d83-914f-6ee793c6c1ab",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Done\n",
        "createdAt" : "2015-06-03T11:14:10Z",
        "updatedAt" : "2015-06-03T11:14:10Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c7795bdd10ddd578117edb76d15876ab30c652e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +194,198 @@\n// Removes group of RCs if not removed. This function is for cleanup purposes, so ignores errors.\nfunc cleanRCGroup(c *client.Client, ns, groupName string, size, count int) {\n\tBy(fmt.Sprintf(\"Removing %v Replication Controllers with size %v if not removed\", count, size))\n\tvar wg sync.WaitGroup"
  },
  {
    "id" : "02b958ed-3be5-4a53-a6cd-90b7c7a961b3",
    "prId" : 7771,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37de7ec9-0004-4011-a18b-c910cfcdb313",
        "parentId" : null,
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Can you please expand this comment to show some concrete numbers? e.g. For 1000 pods we will have:\n- X small RC each 5 pods\n- Y medium RC each ...\n",
        "createdAt" : "2015-05-06T14:02:19Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "504c816a-9104-4987-bd38-e187dc547e3b",
        "parentId" : "37de7ec9-0004-4011-a18b-c910cfcdb313",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Done\n",
        "createdAt" : "2015-05-07T13:26:50Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa116e20335ff22067325c095e9b6a5f99000105",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +106,110 @@\nfunc computeRCCounts(total int) (int, int, int) {\n\t// Small RCs owns ~0.5 of total number of pods, medium and big RCs ~0.25 each.\n\t// For example for 3000 pods (100 nodes, 30 pods per node) there are:\n\t//  - 500 small RCs each 5 pods"
  },
  {
    "id" : "b466ff2f-8e42-496d-af94-232b00aaf0f4",
    "prId" : 7771,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab009a29-aea2-48e9-8464-2f43a8a91475",
        "parentId" : null,
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "I think it will be more readable to write:\n\nsmallCount := total \\* bigShare / bigSize\nmediumCount := total \\* mediumShare / mediumSize\n...\n",
        "createdAt" : "2015-05-06T14:04:29Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "77d45e68-edf2-4d93-9143-8ae5cdc4ebcf",
        "parentId" : "ab009a29-aea2-48e9-8464-2f43a8a91475",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "I agree that current implementation is a little bit confusing, but adding share factor will require converting the numbers between float and int representation.\n\nAlso the current implementation guarantees that the total number of pods will be (almost) equal to the requested \"total\".\n",
        "createdAt" : "2015-05-07T13:40:04Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa116e20335ff22067325c095e9b6a5f99000105",
    "line" : null,
    "diffHunk" : "@@ -1,1 +111,115 @@\t//  - 25 medium RCs each 30 pods\n\t//  - 3 big RCs each 250 pods\n\tbigRCCount := total / 4 / bigRCSize\n\tmediumRCCount := (total - bigRCCount*bigRCSize) / 3 / mediumRCSize\n\tsmallRCCount := (total - bigRCCount*bigRCSize - mediumRCCount*mediumRCSize) / smallRCSize"
  },
  {
    "id" : "ff3a3f92-9c44-441a-9d74-3d0ce9c4b0e0",
    "prId" : 7771,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1558aacd-300d-4b6e-a0a2-ca6786037257",
        "parentId" : null,
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "How can we debug this test if this is random?\n",
        "createdAt" : "2015-05-06T14:04:49Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "052589ad-695c-4328-bd70-72ae7ad7a324",
        "parentId" : "1558aacd-300d-4b6e-a0a2-ca6786037257",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "My suggestion was that the first version of the load generator could be random, and then later we could enhance it to also test correctness. This isn't ideal, but given our time constraints and the fact that it's a lot easier to do random, I think it makes sense to do random first.\n",
        "createdAt" : "2015-05-06T19:55:47Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "add91117-f9af-4b2a-9996-f42ea776b866",
        "parentId" : "1558aacd-300d-4b6e-a0a2-ca6786037257",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Agree with @davidopp. I'll add verification and make the test deterministic later.\n",
        "createdAt" : "2015-05-07T13:22:42Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa116e20335ff22067325c095e9b6a5f99000105",
    "line" : 120,
    "diffHunk" : "@@ -1,1 +118,122 @@\n// The function creates a RC and then every few second resize it and with 0.1 probability deletes it.\nfunc playWithRC(c *client.Client, wg *sync.WaitGroup, ns string, size int) {\n\tdefer GinkgoRecover()\n\tdefer wg.Done()"
  },
  {
    "id" : "5b0d593d-7648-43e4-8fe0-b3fcf86e74e2",
    "prId" : 7771,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b72806bd-4292-46e0-919f-a7234f3fdef0",
        "parentId" : null,
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "For my own education: why is this needed?\n",
        "createdAt" : "2015-05-06T14:06:09Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "dcd9aa0e-2154-4b1c-b26b-305547ae533a",
        "parentId" : "b72806bd-4292-46e0-919f-a7234f3fdef0",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "https://github.com/onsi/ginkgo/blob/master/ginkgo_dsl.go#L37\n",
        "createdAt" : "2015-05-07T12:36:26Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa116e20335ff22067325c095e9b6a5f99000105",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +119,123 @@// The function creates a RC and then every few second resize it and with 0.1 probability deletes it.\nfunc playWithRC(c *client.Client, wg *sync.WaitGroup, ns string, size int) {\n\tdefer GinkgoRecover()\n\tdefer wg.Done()\n\trcExist := false"
  },
  {
    "id" : "fd121541-6c5d-476a-8ead-b48436d335ae",
    "prId" : 7771,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "113b2d46-75f4-4287-a9a4-f878d38bc8d4",
        "parentId" : null,
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "Please add a TODO somewhere to verify latency metrics\n",
        "createdAt" : "2015-05-06T14:11:24Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "1a8ced45-dd6a-43f5-b1b1-d7c236f0c449",
        "parentId" : "113b2d46-75f4-4287-a9a4-f878d38bc8d4",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Done\n",
        "createdAt" : "2015-05-07T12:39:14Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa116e20335ff22067325c095e9b6a5f99000105",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +44,48 @@// To run this suite you must explicitly ask for it by setting the\n// -t/--test flag or ginkgo.focus flag.\nvar _ = Describe(\"Load\", func() {\n\tvar c *client.Client\n\tvar nodeCount int"
  },
  {
    "id" : "bd0a207d-0c9c-4ba5-b595-7f48da042945",
    "prId" : 7771,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cc0c69e-7eb4-49e4-b5e2-ed1d21a227a0",
        "parentId" : null,
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "One concern I have is that we will generate too much load with this test. How many requests does it generate? I think that in reality we will not see resizing every few seconds. Maybe let's resize each RC only few times during the test (5 min)?\n",
        "createdAt" : "2015-05-06T14:16:11Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      },
      {
        "id" : "9cb13979-17cb-42a2-9a06-73979c65b70e",
        "parentId" : "1cc0c69e-7eb4-49e4-b5e2-ed1d21a227a0",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "You are right. I'll change resizing to happen once every 1-2 minutes.\n",
        "createdAt" : "2015-05-07T13:23:24Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa116e20335ff22067325c095e9b6a5f99000105",
    "line" : 132,
    "diffHunk" : "@@ -1,1 +130,134 @@\t\t\trcExist = true\n\t\t}\n\t\t// Resize RC to a random size between 0.5x and 1.5x of the original size.\n\t\tnewSize := uint(rand.Intn(size+1) + size/2)\n\t\texpectNoError(ResizeRC(c, ns, name, newSize))"
  },
  {
    "id" : "90838520-06c0-4850-b77e-e030737b8a75",
    "prId" : 7771,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bbad906-b4a1-45cf-91d5-a35cf4d2c162",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "how hard is it to pipe through a flag that skips cleanup on failure? i often leave e2e stress tests overnight and would find that very useful. \n",
        "createdAt" : "2015-05-07T06:16:50Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "d5df2b09-bcc4-44c3-b500-8a5814b48054",
        "parentId" : "4bbad906-b4a1-45cf-91d5-a35cf4d2c162",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "I don't know. I'll add TODO. It may be worth to add such flag also for other stress tests.\n",
        "createdAt" : "2015-05-07T13:19:58Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa116e20335ff22067325c095e9b6a5f99000105",
    "line" : null,
    "diffHunk" : "@@ -1,1 +65,69 @@\tAfterEach(func() {\n\t\tBy(fmt.Sprintf(\"Destroying namespace for this suite %v\", ns))\n\t\tif err := c.Namespaces().Delete(ns); err != nil {\n\t\t\tFailf(\"Couldn't delete ns %s\", err)\n\t\t}"
  },
  {
    "id" : "04a8ff09-4271-4883-8f01-f7cf856628b8",
    "prId" : 7771,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "655b6cc8-63c2-4d00-a41e-a374dd4a2d37",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "If one of these fails, I'd really like to know what the state of it's pods are (i.e how many, on what minions, in what state). Thoughts?\n",
        "createdAt" : "2015-05-07T06:16:52Z",
        "updatedAt" : "2015-05-11T14:41:16Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa116e20335ff22067325c095e9b6a5f99000105",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +94,98 @@\n\t\t\t// Run RC load for all kinds of RC.\n\t\t\trunRCLoad(c, &wg, ns, smallRCSize, smallRCCount)\n\t\t\trunRCLoad(c, &wg, ns, mediumRCSize, mediumRCCount)\n\t\t\trunRCLoad(c, &wg, ns, bigRCSize, bigRCCount)"
  }
]