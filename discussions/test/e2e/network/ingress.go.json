[
  {
    "id" : "9bc3ec45-82dd-4671-8cd9-c964250068d5",
    "prId" : 93119,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93119#pullrequestreview-450170940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a905d669-83fb-4d2f-ba34-274a88a70717",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "golint complains\r\n```\r\nErrors from golint:\r\ntest/e2e/network/ingress.go:626:11: if block ends with a return statement, so drop this else and outdent its block\r\n```",
        "createdAt" : "2020-07-16T08:05:36Z",
        "updatedAt" : "2020-07-16T19:56:27Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "dcec1d0f-5415-4b24-8867-2f72bf864776",
        "parentId" : "a905d669-83fb-4d2f-ba34-274a88a70717",
        "authorId" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "body" : "Yes, right.\r\nIt is necessary to block retesting until fixing the above.\r\n\r\n/hold",
        "createdAt" : "2020-07-16T18:06:13Z",
        "updatedAt" : "2020-07-16T19:56:27Z",
        "lastEditedBy" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "tags" : [
        ]
      },
      {
        "id" : "cf13c73a-d606-4a60-b48d-de2d61fc659d",
        "parentId" : "a905d669-83fb-4d2f-ba34-274a88a70717",
        "authorId" : "57f729dd-988a-4d1a-83bf-ee70bf637c64",
        "body" : "Fixed",
        "createdAt" : "2020-07-16T19:56:28Z",
        "updatedAt" : "2020-07-16T19:56:28Z",
        "lastEditedBy" : "57f729dd-988a-4d1a-83bf-ee70bf637c64",
        "tags" : [
        ]
      }
    ],
    "commit" : "e24f9ed1cd06ce9f96ff857c214bae6f4ff1716b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +623,627 @@\t\t\tif jig.Ingress == nil {\n\t\t\t\tginkgo.By(\"No ingress created, no cleanup necessary\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\tginkgo.By(\"Deleting ingress\")"
  },
  {
    "id" : "4f2fd2b5-edf3-4f99-b894-efbe00bc017e",
    "prId" : 93038,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93038#pullrequestreview-448977214",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a84310b1-dcc9-4937-be4c-3b0382f3b3a7",
        "parentId" : null,
        "authorId" : "87ab1d19-ad39-40d0-a045-817039414280",
        "body" : "Nit: Comment here saying what this test is for ",
        "createdAt" : "2020-07-14T23:41:05Z",
        "updatedAt" : "2020-07-14T23:52:28Z",
        "lastEditedBy" : "87ab1d19-ad39-40d0-a045-817039414280",
        "tags" : [
        ]
      },
      {
        "id" : "7fd11829-1216-45ff-b340-c479f7863acc",
        "parentId" : "a84310b1-dcc9-4937-be4c-3b0382f3b3a7",
        "authorId" : "23d83a23-a06a-4542-a52f-6096ea5648ef",
        "body" : "Was following the same pattern that's already in the test \r\n- Line 1123 `ginkgo.By(\"patching /status\")`\r\n- Line 1136 `ginkgo.By(\"updating /status\")`",
        "createdAt" : "2020-07-15T00:15:25Z",
        "updatedAt" : "2020-07-15T00:15:26Z",
        "lastEditedBy" : "23d83a23-a06a-4542-a52f-6096ea5648ef",
        "tags" : [
        ]
      },
      {
        "id" : "57b7c1c0-e8c4-4a2b-baf0-1a68ed964c66",
        "parentId" : "a84310b1-dcc9-4937-be4c-3b0382f3b3a7",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this looks fine to me as is",
        "createdAt" : "2020-07-15T13:54:47Z",
        "updatedAt" : "2020-07-15T13:54:47Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "31962804c0e0fc12319437febd46c9ce45f4ef0e",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +1143,1147 @@\t\tframework.ExpectEqual(updatedStatus.Status.LoadBalancer, statusToUpdate.Status.LoadBalancer, fmt.Sprintf(\"updated object expected to have updated loadbalancer status %#v, got %#v\", statusToUpdate.Status.LoadBalancer, updatedStatus.Status.LoadBalancer))\n\n\t\tginkgo.By(\"get /status\")\n\t\tingResource := schema.GroupVersionResource{Group: \"networking.k8s.io\", Version: ingVersion, Resource: \"ingresses\"}\n\t\tgottenStatus, err := f.DynamicClient.Resource(ingResource).Namespace(ns).Get(context.TODO(), createdIngress.Name, metav1.GetOptions{}, \"status\")"
  },
  {
    "id" : "de96b914-e5a3-4bdd-a649-933f8c7205c9",
    "prId" : 93038,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93038#pullrequestreview-448976895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "650cb43c-df3e-4cda-a6ba-0b7df3374462",
        "parentId" : null,
        "authorId" : "87ab1d19-ad39-40d0-a045-817039414280",
        "body" : "Did you find that the DynamicClient was the only way to use the Namespace call?",
        "createdAt" : "2020-07-14T23:49:30Z",
        "updatedAt" : "2020-07-14T23:52:28Z",
        "lastEditedBy" : "87ab1d19-ad39-40d0-a045-817039414280",
        "tags" : [
        ]
      },
      {
        "id" : "d4652fac-fe9c-4602-aef8-3c281ccfd15e",
        "parentId" : "650cb43c-df3e-4cda-a6ba-0b7df3374462",
        "authorId" : "23d83a23-a06a-4542-a52f-6096ea5648ef",
        "body" : "Using the DynamicClient this way the first option that worked for me. Would you prefer it done another way?  ",
        "createdAt" : "2020-07-15T00:07:40Z",
        "updatedAt" : "2020-07-15T00:07:40Z",
        "lastEditedBy" : "23d83a23-a06a-4542-a52f-6096ea5648ef",
        "tags" : [
        ]
      },
      {
        "id" : "0e3aa973-ce73-4419-bb3c-2d5c4657f9e2",
        "parentId" : "650cb43c-df3e-4cda-a6ba-0b7df3374462",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "is the Get not working for this?\r\nhttps://github.com/kubernetes/kubernetes/blob/30b0ebd6d43de3b9eb6b78d877612a4d7aed85a8/test/e2e/network/ingress.go#L1063",
        "createdAt" : "2020-07-15T13:53:41Z",
        "updatedAt" : "2020-07-15T13:53:41Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "301ccd68-7bb3-473b-99e9-3bf815e59dbe",
        "parentId" : "650cb43c-df3e-4cda-a6ba-0b7df3374462",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "that does not get the status subresource",
        "createdAt" : "2020-07-15T13:54:27Z",
        "updatedAt" : "2020-07-15T13:54:27Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "31962804c0e0fc12319437febd46c9ce45f4ef0e",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +1145,1149 @@\t\tginkgo.By(\"get /status\")\n\t\tingResource := schema.GroupVersionResource{Group: \"networking.k8s.io\", Version: ingVersion, Resource: \"ingresses\"}\n\t\tgottenStatus, err := f.DynamicClient.Resource(ingResource).Namespace(ns).Get(context.TODO(), createdIngress.Name, metav1.GetOptions{}, \"status\")\n\t\tframework.ExpectNoError(err)\n\t\tstatusUID, _, err := unstructured.NestedFieldCopy(gottenStatus.Object, \"metadata\", \"uid\")"
  },
  {
    "id" : "7b8fd9c7-14ed-4fe6-99a4-f48fe57056b5",
    "prId" : 93038,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93038#pullrequestreview-448542162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bef0151e-9586-4087-a5b5-6562f73cebb4",
        "parentId" : null,
        "authorId" : "87ab1d19-ad39-40d0-a045-817039414280",
        "body" : "Is the string formatting needed here over something like [this](https://github.com/kubernetes/kubernetes/blob/31962804c0e0fc12319437febd46c9ce45f4ef0e/test/e2e/network/ingress.go#L1066)",
        "createdAt" : "2020-07-14T23:51:50Z",
        "updatedAt" : "2020-07-14T23:52:28Z",
        "lastEditedBy" : "87ab1d19-ad39-40d0-a045-817039414280",
        "tags" : [
        ]
      },
      {
        "id" : "e2bd3145-4bc2-4e44-a1c1-68cddd4c1d9e",
        "parentId" : "bef0151e-9586-4087-a5b5-6562f73cebb4",
        "authorId" : "23d83a23-a06a-4542-a52f-6096ea5648ef",
        "body" : "I tried the other option first but found that `createdIngress.UID` was `types.UID` when trying to match it with `statusUID` which was `string`",
        "createdAt" : "2020-07-14T23:56:40Z",
        "updatedAt" : "2020-07-14T23:56:40Z",
        "lastEditedBy" : "23d83a23-a06a-4542-a52f-6096ea5648ef",
        "tags" : [
        ]
      }
    ],
    "commit" : "31962804c0e0fc12319437febd46c9ce45f4ef0e",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1149,1153 @@\t\tstatusUID, _, err := unstructured.NestedFieldCopy(gottenStatus.Object, \"metadata\", \"uid\")\n\t\tframework.ExpectNoError(err)\n\t\tframework.ExpectEqual(string(createdIngress.UID), statusUID, fmt.Sprintf(\"createdIngress.UID: %v expected to match statusUID: %v \", createdIngress.UID, statusUID))\n\n\t\t// Ingress resource delete operations"
  },
  {
    "id" : "04bd2890-1e4a-4081-b2d3-fc0a3e1c4067",
    "prId" : 91593,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91593#pullrequestreview-423866250",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc4ba41f-a451-4b32-9e3f-4873f715f6c2",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "since this is a namespaced resource, we also want to exercise cluster-wide list and watch... basically duplicate the list/watch case and do them with a `f.ClientSet.NetworkingV1beta1().Ingresses(\"\")` client",
        "createdAt" : "2020-06-03T16:50:59Z",
        "updatedAt" : "2020-06-10T19:20:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "a53bf2ef-82a5-4d6c-97df-94a81a6bbe70",
        "parentId" : "bc4ba41f-a451-4b32-9e3f-4873f715f6c2",
        "authorId" : "87ab1d19-ad39-40d0-a045-817039414280",
        "body" : "I added the cluster-wide tests. Let me know if these are lacking.",
        "createdAt" : "2020-06-03T19:33:48Z",
        "updatedAt" : "2020-06-10T19:20:52Z",
        "lastEditedBy" : "87ab1d19-ad39-40d0-a045-817039414280",
        "tags" : [
        ]
      }
    ],
    "commit" : "735133025555220539c41660d1c2237a9b9f34b6",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +959,963 @@\t\tns := f.Namespace.Name\n\t\tingVersion := \"v1beta1\"\n\t\tingClient := f.ClientSet.NetworkingV1beta1().Ingresses(ns)\n\n\t\tprefixPathType := networkingv1beta1.PathTypePrefix"
  },
  {
    "id" : "a0dfa270-1b5f-4091-808e-3679e544fa42",
    "prId" : 91593,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91593#pullrequestreview-423866984",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d20a892b-fd91-4432-859f-13137c9bcce0",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I expected get/update/patch calls exercising the `/status` subresource",
        "createdAt" : "2020-06-03T16:53:08Z",
        "updatedAt" : "2020-06-10T19:20:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "edcc989d-57f6-46f0-ac13-817ffca2d9ab",
        "parentId" : "d20a892b-fd91-4432-859f-13137c9bcce0",
        "authorId" : "87ab1d19-ad39-40d0-a045-817039414280",
        "body" : "I added tests for status patch and update. I'm not sure why, but we never added GetStatus. ",
        "createdAt" : "2020-06-03T19:33:18Z",
        "updatedAt" : "2020-06-10T19:20:52Z",
        "lastEditedBy" : "87ab1d19-ad39-40d0-a045-817039414280",
        "tags" : [
        ]
      },
      {
        "id" : "18752457-3b2e-4637-98be-51e35ba8903d",
        "parentId" : "d20a892b-fd91-4432-859f-13137c9bcce0",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "you can use the dynamic client to get the status subresource and make sure the name/uid/apiVersion/kind are what you expect",
        "createdAt" : "2020-06-03T19:34:19Z",
        "updatedAt" : "2020-06-10T19:20:52Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "735133025555220539c41660d1c2237a9b9f34b6",
    "line" : 189,
    "diffHunk" : "@@ -1,1 +1108,1112 @@\t\t\t}\n\t\t}\n\n\t\t// /status subresource operations\n\t\tginkgo.By(\"patching /status\")"
  },
  {
    "id" : "767e2765-a8f6-490e-83be-ea68bf22a53b",
    "prId" : 84471,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84471#pullrequestreview-308669775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df62f62a-65fd-4bbc-88ac-78554b25b54a",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "seems that these are GCE only tests that doesn't support ipv6, but we can use this opportunity to make it ipv6 ready, what do you think?\r\nI don't know if there is something easier than `net.JoinHostPort(ip,\"443)` per example ",
        "createdAt" : "2019-10-29T09:45:48Z",
        "updatedAt" : "2019-11-01T17:39:47Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "18ddff59-94ba-4e66-a5e6-5dd318f43600",
        "parentId" : "df62f62a-65fd-4bbc-88ac-78554b25b54a",
        "authorId" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "body" : "I'd like to avoid mix multiple purposes into a single PR for long-term maintenance.\r\nThat means sometimes we want to revert some PRs which make some wrong thing.\r\nIf mixing multiple purposes, everything in the PR is reverted.",
        "createdAt" : "2019-10-29T16:38:15Z",
        "updatedAt" : "2019-11-01T17:39:47Z",
        "lastEditedBy" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "tags" : [
        ]
      },
      {
        "id" : "afed91b3-229f-48ea-bc77-a3b592760e55",
        "parentId" : "df62f62a-65fd-4bbc-88ac-78554b25b54a",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "absolutely",
        "createdAt" : "2019-10-29T16:47:29Z",
        "updatedAt" : "2019-11-01T17:39:47Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca4c349096e15b15a1a5a65ced769d489f617772",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +832,836 @@\tginkgo.By(\"waiting for Ingress to come up with ip: \" + ip)\n\thttpClient := ingress.BuildInsecureClient(ingress.IngressReqTimeout)\n\tframework.ExpectNoError(ingress.PollURL(fmt.Sprintf(\"https://%s/\", ip), \"\", e2eservice.LoadBalancerPollTimeout, jig.PollInterval, httpClient, false))\n\n\tginkgo.By(\"should reject HTTP traffic\")"
  },
  {
    "id" : "8e64f4c8-834e-45cd-a965-0cfac971d52b",
    "prId" : 70140,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/70140#pullrequestreview-169465524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1e7bcb4-e820-4d65-a363-44ddcadd16e4",
        "parentId" : null,
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "Besides comparing the annotation with expection. Is it possible to check if the NEG resources exist or not?",
        "createdAt" : "2018-10-29T18:57:35Z",
        "updatedAt" : "2018-10-31T16:49:33Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      }
    ],
    "commit" : "4840bfd913aadba9dc6f5f1a3ff35100e5d2412a",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +1128,1132 @@\t\tframework.Logf(\"Got %v: %v\", ingress.NEGStatusAnnotation, v)\n\n\t\tif len(status.NetworkEndpointGroups) != negs {\n\t\t\tframework.Logf(\"Expected %d NEGs, got %d\", negs, len(status.NetworkEndpointGroups))\n\t\t\treturn false, nil"
  },
  {
    "id" : "91f9ccf6-1524-4da0-b390-268f1ce84d8d",
    "prId" : 64535,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/64535#pullrequestreview-131375662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a0e1864-8093-4bf8-af5e-df893a1b0eef",
        "parentId" : null,
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "check len(expectedKeys) == len(status.NetworkEndpointGroups)",
        "createdAt" : "2018-06-23T00:09:14Z",
        "updatedAt" : "2018-06-23T00:21:39Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      }
    ],
    "commit" : "c981a3349f6348ae0ceb7ba52377e266cb059be4",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +691,695 @@\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif len(status.NetworkEndpointGroups) != len(expectedKeys) {\n\t\t\t\t\t\tframework.Logf(\"Expected length of %+v to equal length of %+v, but does not\", status.NetworkEndpointGroups, expectedKeys)"
  },
  {
    "id" : "ea463bad-099f-4969-b598-f2ff768cb99f",
    "prId" : 62208,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62208#pullrequestreview-110201427",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aed73d94-aec8-478f-a238-63679d594cb1",
        "parentId" : null,
        "authorId" : "a32457ee-5d35-4249-84b2-4276603aaffb",
        "body" : "I don't think this is the right way to skip a test? Or there will be other ingress jobs still running this test? @rramkumar1 ",
        "createdAt" : "2018-04-06T20:35:20Z",
        "updatedAt" : "2018-04-06T20:35:21Z",
        "lastEditedBy" : "a32457ee-5d35-4249-84b2-4276603aaffb",
        "tags" : [
        ]
      },
      {
        "id" : "216a3421-2278-4e33-9bbe-f1f4148f2575",
        "parentId" : "aed73d94-aec8-478f-a238-63679d594cb1",
        "authorId" : "bcebf3b5-032b-4720-ba66-12ac441f6151",
        "body" : "There are certain jobs we don't want running tests with the [Unreleased] label. In those jobs, I am going to add a ginkgo.skip",
        "createdAt" : "2018-04-06T20:37:07Z",
        "updatedAt" : "2018-04-06T20:41:43Z",
        "lastEditedBy" : "bcebf3b5-032b-4720-ba66-12ac441f6151",
        "tags" : [
        ]
      },
      {
        "id" : "06080560-fd28-4f01-b2c0-687b9cbaa42c",
        "parentId" : "aed73d94-aec8-478f-a238-63679d594cb1",
        "authorId" : "bcebf3b5-032b-4720-ba66-12ac441f6151",
        "body" : "In all other jobs, it will run. For example, we want the ingress-gce-e2e job to run that test but not gci-gce-ingress",
        "createdAt" : "2018-04-06T20:37:21Z",
        "updatedAt" : "2018-04-06T20:41:49Z",
        "lastEditedBy" : "bcebf3b5-032b-4720-ba66-12ac441f6151",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f74e4589061a27e598c53b02cacb3cda7af333b",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +384,388 @@\n\t\t// TODO (gau): Remove [Unreleased] label once HTTP2 is in the next Ingress release\n\t\tIt(\"should be able to switch between HTTPS and HTTP2 modes [Unreleased]\", func() {\n\t\t\thttpsScheme := \"request_scheme=https\"\n"
  },
  {
    "id" : "ccf3e777-73da-4123-8b7c-5eeccc73e5ab",
    "prId" : 62142,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62142#pullrequestreview-109523592",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d9908c3-1620-4c89-b1c3-0a45ddf641bf",
        "parentId" : null,
        "authorId" : "c6405f0b-1a36-4282-8e21-0eee7d600a7e",
        "body" : "mmm, this change looks like a no-op... am I misunderstanding the logic?",
        "createdAt" : "2018-04-04T22:17:59Z",
        "updatedAt" : "2018-04-04T22:17:59Z",
        "lastEditedBy" : "c6405f0b-1a36-4282-8e21-0eee7d600a7e",
        "tags" : [
        ]
      },
      {
        "id" : "d14bacda-4d9e-41c3-8499-a1be34384aa3",
        "parentId" : "8d9908c3-1620-4c89-b1c3-0a45ddf641bf",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "The change is that it now does not return if ingress==nil.\r\nCleanupGCEIngressController is always called",
        "createdAt" : "2018-04-04T22:23:04Z",
        "updatedAt" : "2018-04-04T22:23:04Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "52770a66-3cc7-49e6-a410-87b96f654132",
        "parentId" : "8d9908c3-1620-4c89-b1c3-0a45ddf641bf",
        "authorId" : "c6405f0b-1a36-4282-8e21-0eee7d600a7e",
        "body" : "ahhh, okay. I was thinking the close brace on 603 was the end of the function.",
        "createdAt" : "2018-04-04T22:32:05Z",
        "updatedAt" : "2018-04-04T22:32:14Z",
        "lastEditedBy" : "c6405f0b-1a36-4282-8e21-0eee7d600a7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f81362fa0bdbe1da154405b67430e476d8776a8",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +600,604 @@\t\t\t} else {\n\t\t\t\tBy(\"Deleting ingress\")\n\t\t\t\tjig.TryDeleteIngress()\n\t\t\t}\n"
  },
  {
    "id" : "67cacb46-6087-4bb1-b2f0-78516744cc2c",
    "prId" : 62137,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62137#pullrequestreview-109523041",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c31e1bd9-f149-4e50-9474-b19066f0e0f7",
        "parentId" : null,
        "authorId" : "c6405f0b-1a36-4282-8e21-0eee7d600a7e",
        "body" : "This looks great. Is it also worth trying things in the other order:\r\nCreate, Create, Delete Multi, Delete Single\r\n?",
        "createdAt" : "2018-04-04T22:29:50Z",
        "updatedAt" : "2018-04-04T22:30:12Z",
        "lastEditedBy" : "c6405f0b-1a36-4282-8e21-0eee7d600a7e",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa4bff6ec5fb7fa4e693396ca4d5a584b186baed",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +649,653 @@\t\t})\n\n\t\tIt(\"single and multi-cluster ingresses should be able to exist together\", func() {\n\t\t\tBy(\"Creating a single cluster ingress first\")\n\t\t\tjig.Class = \"\""
  },
  {
    "id" : "dacd6669-69ce-4dce-bfb9-de76499f4922",
    "prId" : 62080,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/62080#pullrequestreview-109915534",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4b59da1-0867-4da7-a38c-f57ec14f0322",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "const, move right before where this const is used",
        "createdAt" : "2018-04-06T00:07:14Z",
        "updatedAt" : "2018-04-06T00:09:50Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3da74034342d62998a0621252c0ebd4c303f437",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +384,388 @@\n\t\tIt(\"should be able to switch between HTTPS and HTTP2 modes\", func() {\n\t\t\thttpsScheme := \"request_scheme=https\"\n\n\t\t\tBy(\"Create a basic HTTP2 ingress\")"
  },
  {
    "id" : "f8835fae-4fd5-45fc-9c60-a68b53c5b358",
    "prId" : 61871,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61871#pullrequestreview-108160744",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b508e74-3169-4810-9d85-6e966fc48a58",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "question: Are all these It blocks run in parallel by default?\r\nAs we add more tests, we would want to run them in parallel.",
        "createdAt" : "2018-03-29T05:00:48Z",
        "updatedAt" : "2018-03-30T15:52:48Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "c0361332-a1ba-4432-9630-f2d5bb894386",
        "parentId" : "8b508e74-3169-4810-9d85-6e966fc48a58",
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "Discussed offline. We plan to run tests in parallel once https://github.com/kubernetes/kubernetes/issues/59778 is fixed.",
        "createdAt" : "2018-03-29T18:40:26Z",
        "updatedAt" : "2018-03-30T15:52:48Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      }
    ],
    "commit" : "34acfcd027a5d7da7357fd344d6a4b4d2cc35184",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +588,592 @@\t\t})\n\n\t\tIt(\"should create ingress with pre-shared certificate\", func() {\n\t\t\texecutePresharedCertTest(f, jig, ipName)\n\t\t})"
  },
  {
    "id" : "76800079-4b1b-4769-a36a-ad6b007f37aa",
    "prId" : 61871,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61871#pullrequestreview-108266409",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "875e9fce-60d4-4a8e-80cb-6ad2548ddd10",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Let each It block have its own ip address so that they can run in parallel?",
        "createdAt" : "2018-03-29T05:01:26Z",
        "updatedAt" : "2018-03-30T15:52:48Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "da9ed8aa-0d75-4f7e-80c7-52d4eb1f2538",
        "parentId" : "875e9fce-60d4-4a8e-80cb-6ad2548ddd10",
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "In fact, tested this locally and found this is working in parallel. `ipName` is being set up in BeforeEach, and each It block should have a pristine copy of the state.",
        "createdAt" : "2018-03-29T20:30:03Z",
        "updatedAt" : "2018-03-30T15:52:48Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "08fdea69-98c7-4c75-a67e-61010e96d7bf",
        "parentId" : "875e9fce-60d4-4a8e-80cb-6ad2548ddd10",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "interesting. I thought they are sharing the same global variable, so all BeforeEach with overrite the same variable. AM surprised they each get their own copy",
        "createdAt" : "2018-03-30T05:35:29Z",
        "updatedAt" : "2018-03-30T15:52:48Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "34acfcd027a5d7da7357fd344d6a4b4d2cc35184",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +536,540 @@\tDescribe(\"GCE [Slow] [Feature:kubemci]\", func() {\n\t\tvar gceController *framework.GCEIngressController\n\t\tvar ipName string\n\n\t\t// Platform specific setup"
  },
  {
    "id" : "af9ae902-9a03-4707-b74c-dd3c5cab777f",
    "prId" : 61792,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61792#pullrequestreview-110566436",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f8c2711-40cd-485b-b4c4-8d9e1e9a759f",
        "parentId" : null,
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "I gave this comment on one of @nikhiljindal's PR too. It would be great if the map and `filepath.Join()` are assigned to variables outside this call and then passed here. The current form is somewhat confusing.",
        "createdAt" : "2018-04-09T18:24:22Z",
        "updatedAt" : "2018-04-09T18:25:46Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "b2568d8b-bd64-4cdf-8309-08e28fbc26d0",
        "parentId" : "1f8c2711-40cd-485b-b4c4-8d9e1e9a759f",
        "authorId" : "bcebf3b5-032b-4720-ba66-12ac441f6151",
        "body" : "Will fix in a followup PR.",
        "createdAt" : "2018-04-09T18:29:23Z",
        "updatedAt" : "2018-04-09T18:29:23Z",
        "lastEditedBy" : "bcebf3b5-032b-4720-ba66-12ac441f6151",
        "tags" : [
        ]
      }
    ],
    "commit" : "09062b40e514d4392ec82de92c903fde81565255",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +314,318 @@\t\tIt(\"should support multiple TLS certs [Unreleased]\", func() {\n\t\t\tBy(\"Creating an ingress with no certs.\")\n\t\t\tjig.CreateIngress(filepath.Join(framework.IngressManifestPath, \"multiple-certs\"), ns, map[string]string{\n\t\t\t\tframework.IngressStaticIPKey: ns,\n\t\t\t}, map[string]string{})"
  },
  {
    "id" : "56fe0734-1fba-4c00-b93c-a07525082243",
    "prId" : 59903,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59903#pullrequestreview-97055679",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87f5b9aa-0494-47d7-b131-d7207b0038a4",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Any chance we can incorporate this in the conformance test?",
        "createdAt" : "2018-02-15T06:22:13Z",
        "updatedAt" : "2018-02-16T00:32:46Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "6d78d30a-1d2b-49b8-96d6-f5f9d3939902",
        "parentId" : "87f5b9aa-0494-47d7-b131-d7207b0038a4",
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "Probably not at this point. I can already see the implementations of different ingress controllers diverged --- nginx put the configuration on ingress object ([doc](https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/annotations.md#secure-backends)) while gce put it on service. Trying to avoid heavy lifting before code freeze...",
        "createdAt" : "2018-02-15T06:37:54Z",
        "updatedAt" : "2018-02-16T00:32:46Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "76ed8c8f-4d9e-4559-89e2-a9f6694b4242",
        "parentId" : "87f5b9aa-0494-47d7-b131-d7207b0038a4",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "hmm ok. Thats unfortunate.\r\nWill need to figure out a way to run this test with kubemci as well.\r\nThats the only reason why I suggested incorporating this in conformance tests.",
        "createdAt" : "2018-02-16T00:25:34Z",
        "updatedAt" : "2018-02-16T00:32:46Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "5361a376-6715-4b81-b179-3e7aea03af95",
        "parentId" : "87f5b9aa-0494-47d7-b131-d7207b0038a4",
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "> Will need to figure out a way to run this test with kubemci as well.\r\n\r\nI'm thinking we could probably add an abstraction layer to generate GCE specific conformance test. Haven't thought deeply into that though.",
        "createdAt" : "2018-02-16T00:36:44Z",
        "updatedAt" : "2018-02-16T00:36:44Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      }
    ],
    "commit" : "98c4a0b0e3fa230fc24e316f9ba7a48641074dc9",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +363,367 @@\t\t})\n\n\t\tIt(\"should create ingress with backside re-encryption\", func() {\n\t\t\tBy(\"Creating a set of ingress, service and deployment that have backside re-encryption configured\")\n\t\t\tdeployCreated, svcCreated, ingCreated, err := framework.CreateReencryptionIngress(f.ClientSet, f.Namespace.Name)"
  },
  {
    "id" : "4a7e5e86-facf-4d44-970f-54ec2b107a70",
    "prId" : 55047,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55047#pullrequestreview-74219157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7ad2487-3f77-46db-802b-1ce4ff186eae",
        "parentId" : null,
        "authorId" : "4cd012b4-8579-4944-9987-1924278982f5",
        "body" : "Can we make this work with NEG too? Is NEG going to put a NEGAnnotation instead of an instanceGroupAnnotation?\r\n\r\n@freehan ",
        "createdAt" : "2017-11-03T17:06:24Z",
        "updatedAt" : "2017-11-06T21:49:17Z",
        "lastEditedBy" : "4cd012b4-8579-4944-9987-1924278982f5",
        "tags" : [
        ]
      },
      {
        "id" : "89aca066-2c17-4b8a-bf33-4285c9ddee6b",
        "parentId" : "c7ad2487-3f77-46db-802b-1ce4ff186eae",
        "authorId" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "body" : "Currently there is no logic to put NEGAnnotation in ingress controller.\r\n\r\n@nikhiljindal Can you pick this up? I will be out starting next week. ",
        "createdAt" : "2017-11-03T21:07:39Z",
        "updatedAt" : "2017-11-06T21:49:17Z",
        "lastEditedBy" : "e83108b8-1fb2-416b-9298-d5b70c14f708",
        "tags" : [
        ]
      },
      {
        "id" : "f64b6dbb-c59a-4f4b-90e7-7216a85b4d99",
        "parentId" : "c7ad2487-3f77-46db-802b-1ce4ff186eae",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Yes we can make it work with NEGs and if we do then yes we will get back a NEGAnnotation instead of instance group annotation.\r\nAs @freehan said we need to add that logic.",
        "createdAt" : "2017-11-03T21:34:26Z",
        "updatedAt" : "2017-11-06T21:49:17Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e1d61a0d54c0bc76c84c7fcfdf9812efc1652a3",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +167,171 @@\t\t\t\tannotations := ing.Annotations\n\t\t\t\tif annotations == nil || annotations[instanceGroupAnnotation] == \"\" {\n\t\t\t\t\tframework.Logf(\"Waiting for ingress to get %s annotation. Found annotations: %v\", instanceGroupAnnotation, annotations)\n\t\t\t\t\treturn false, nil\n\t\t\t\t}"
  }
]