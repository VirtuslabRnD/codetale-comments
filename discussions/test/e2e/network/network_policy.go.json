[
  {
    "id" : "5fbfed4b-587c-42f7-8918-f7a8319210f7",
    "prId" : 96856,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96856#pullrequestreview-538332235",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd9ee6ef-ddb4-4a7f-8752-4242391621e8",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "this is my linter things :shrug: ",
        "createdAt" : "2020-11-25T10:01:21Z",
        "updatedAt" : "2020-11-25T10:01:21Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "60f739ac172a221edc7951a04dbf2d54d717433b",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +2203,2207 @@\t\t\t\tLabels: map[string]string{\n\t\t\t\t\t\"special-label\": f.UniqueName,\n\t\t\t\t},\n\t\t\t},\n\t\t\tSpec: networkingv1.NetworkPolicySpec{"
  },
  {
    "id" : "e7866a62-584c-4059-a2a4-88ae61bb9e90",
    "prId" : 95155,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95155#pullrequestreview-498884153",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "222e7c00-0d02-4b8d-aff1-f3c45eb68525",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "This call to Create seems like a duplicate to the one right above it, was that intentional? ",
        "createdAt" : "2020-09-29T19:05:29Z",
        "updatedAt" : "2020-10-19T17:22:52Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "627fc109-45f2-4387-8537-7c73c2d0af5c",
        "parentId" : "222e7c00-0d02-4b8d-aff1-f3c45eb68525",
        "authorId" : "87ab1d19-ad39-40d0-a045-817039414280",
        "body" : "Yes I do this just to create more to filter and test listing counts with.",
        "createdAt" : "2020-09-29T20:30:44Z",
        "updatedAt" : "2020-10-19T17:22:52Z",
        "lastEditedBy" : "87ab1d19-ad39-40d0-a045-817039414280",
        "tags" : [
        ]
      },
      {
        "id" : "399dcd32-d4d4-4e54-b184-e30403567071",
        "parentId" : "222e7c00-0d02-4b8d-aff1-f3c45eb68525",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Ah, I also missed that npTemplate is using generateName.",
        "createdAt" : "2020-09-29T20:53:22Z",
        "updatedAt" : "2020-10-19T17:22:52Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "62ac60c4b545115154b35ba77734e22997c84cb8",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +2366,2370 @@\t\t_, err := npClient.Create(context.TODO(), npTemplate, metav1.CreateOptions{})\n\t\tframework.ExpectNoError(err)\n\t\t_, err = npClient.Create(context.TODO(), npTemplate, metav1.CreateOptions{})\n\t\tframework.ExpectNoError(err)\n\t\tcreatedNetPol, err := npClient.Create(context.TODO(), npTemplate, metav1.CreateOptions{})"
  },
  {
    "id" : "32d462ab-f710-4ac0-8e51-12a184c83062",
    "prId" : 95155,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95155#pullrequestreview-511988935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e6ca9ca-c7a1-4421-8ea0-5ef09b52ecc9",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "This message says both patched and updated annotations were found but we're only checking patched.",
        "createdAt" : "2020-10-19T16:17:39Z",
        "updatedAt" : "2020-10-19T17:22:52Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "f2176541-e338-4829-99fc-10173df9e859",
        "parentId" : "7e6ca9ca-c7a1-4421-8ea0-5ef09b52ecc9",
        "authorId" : "87ab1d19-ad39-40d0-a045-817039414280",
        "body" : "Forgot to add the updated, should be there now",
        "createdAt" : "2020-10-19T17:22:54Z",
        "updatedAt" : "2020-10-19T17:22:54Z",
        "lastEditedBy" : "87ab1d19-ad39-40d0-a045-817039414280",
        "tags" : [
        ]
      }
    ],
    "commit" : "62ac60c4b545115154b35ba77734e22997c84cb8",
    "line" : 169,
    "diffHunk" : "@@ -1,1 +2418,2422 @@\t\t\t\tframework.ExpectEqual(isNetPol, true, fmt.Sprintf(\"expected NetworkPolicy, got %T\", evt.Object))\n\t\t\t\tif watchedNetPol.Annotations[\"patched\"] == \"true\" && watchedNetPol.Annotations[\"updated\"] == \"true\" {\n\t\t\t\t\tframework.Logf(\"saw patched and updated annotations\")\n\t\t\t\t\tsawAnnotations = true\n\t\t\t\t\tnpWatch.Stop()"
  },
  {
    "id" : "2974e5b1-f83f-448e-99cf-f4d352a56989",
    "prId" : 91592,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/91592#pullrequestreview-557850274",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85f0c8ba-984c-48c7-8f2c-e5522f4feb67",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "it seems this needs a comment to make golint happy",
        "createdAt" : "2020-12-23T10:25:49Z",
        "updatedAt" : "2020-12-23T12:44:21Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "2c667c50-878e-4e7f-a8c3-404e177e4a75",
        "parentId" : "85f0c8ba-984c-48c7-8f2c-e5522f4feb67",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "Ah ok lemme check, making coffeee :)",
        "createdAt" : "2020-12-23T11:15:11Z",
        "updatedAt" : "2020-12-23T12:44:21Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "eff3eea8-cd7c-4a92-b298-4de4e17e7257",
        "parentId" : "85f0c8ba-984c-48c7-8f2c-e5522f4feb67",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "fixed",
        "createdAt" : "2020-12-23T12:53:48Z",
        "updatedAt" : "2020-12-23T12:53:48Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      }
    ],
    "commit" : "36ae8fd91a66409546f4751bfaf36f67941abc8f",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +37,41 @@\te2epod \"k8s.io/kubernetes/test/e2e/framework/pod\"\n\te2eskipper \"k8s.io/kubernetes/test/e2e/framework/skipper\"\n\n\t// synthetic import of netpol suite, until these tests are replaced entirely, so that its included properly\n\t_ \"k8s.io/kubernetes/test/e2e/network/netpol\""
  },
  {
    "id" : "674d4009-e095-44a6-adc1-48d6bac18ab6",
    "prId" : 90095,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90095#pullrequestreview-392005207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b5f662a1-eb5e-4506-b17f-b5b1d64fd433",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "I'm not familiar with these tests so please bear with me, but this is interesting ðŸ¤” \r\n how do the tests know that the failure to connect is caused by the ingress or the egress?\r\n`default-deny-all` and `default-deny-ingress` have the same behavior but I can't see how do we exercise each policy",
        "createdAt" : "2020-04-12T22:54:21Z",
        "updatedAt" : "2020-04-15T09:47:18Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "ee22f715-4508-4827-9a88-ead1ef7f54a8",
        "parentId" : "b5f662a1-eb5e-4506-b17f-b5b1d64fd433",
        "authorId" : "a2c5dbe7-ea63-425b-afb3-52a7b4b9b613",
        "body" : "Thank you! You're totally right. this deny-all test should be more complex. I've updated PR, added pod in another namespace and check is it reachable after policy applied.",
        "createdAt" : "2020-04-13T07:42:53Z",
        "updatedAt" : "2020-04-15T09:47:18Z",
        "lastEditedBy" : "a2c5dbe7-ea63-425b-afb3-52a7b4b9b613",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf30bdddb1be45f09d5c550d6ccf1d3f2a1db24e",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +127,131 @@\t\t\t\t\tPolicyTypes: []networkingv1.PolicyType{networkingv1.PolicyTypeEgress, networkingv1.PolicyTypeIngress},\n\t\t\t\t\tIngress:     []networkingv1.NetworkPolicyIngressRule{},\n\t\t\t\t\tEgress:      []networkingv1.NetworkPolicyEgressRule{},\n\t\t\t\t},\n\t\t\t}"
  },
  {
    "id" : "73d23789-6e76-4c88-a7af-e3ebf107bc4f",
    "prId" : 90095,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90095#pullrequestreview-393610534",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1bf37f75-23d7-49fb-86bd-564c99423820",
        "parentId" : null,
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "Would this namespace be cleaned up?",
        "createdAt" : "2020-04-15T00:58:21Z",
        "updatedAt" : "2020-04-15T09:47:18Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "465514b5-22ae-460a-b16f-928b5f7a9d84",
        "parentId" : "1bf37f75-23d7-49fb-86bd-564c99423820",
        "authorId" : "a2c5dbe7-ea63-425b-afb3-52a7b4b9b613",
        "body" : "Yes, it will be cleaned up, covered here https://github.com/kubernetes/kubernetes/blob/master/test/e2e/framework/framework.go#L485",
        "createdAt" : "2020-04-15T09:34:08Z",
        "updatedAt" : "2020-04-15T09:47:18Z",
        "lastEditedBy" : "a2c5dbe7-ea63-425b-afb3-52a7b4b9b613",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf30bdddb1be45f09d5c550d6ccf1d3f2a1db24e",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +102,106 @@\t\t\tnsA := f.Namespace\n\t\t\tnsBName := f.BaseName + \"-b\"\n\t\t\tnsB, err := f.CreateNamespace(nsBName, map[string]string{\n\t\t\t\t\"ns-name\": nsBName,\n\t\t\t})"
  },
  {
    "id" : "bd6ed9c4-cbe7-4ba9-9a7b-97887f37ce8c",
    "prId" : 90095,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90095#pullrequestreview-393607830",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e50f28c-d487-46c9-a442-2a7e59824c93",
        "parentId" : null,
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "Wouldn't this collide with the other test case (when running in parallel) if we append the same suffix (the base namespace is the same)?",
        "createdAt" : "2020-04-15T01:12:23Z",
        "updatedAt" : "2020-04-15T09:47:18Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "2a7b90a2-6262-449b-a36d-8bd2b0b802b1",
        "parentId" : "4e50f28c-d487-46c9-a442-2a7e59824c93",
        "authorId" : "a2c5dbe7-ea63-425b-afb3-52a7b4b9b613",
        "body" : "it wouldnâ€™t, namespaces has unique suffix",
        "createdAt" : "2020-04-15T07:02:21Z",
        "updatedAt" : "2020-04-15T09:47:18Z",
        "lastEditedBy" : "a2c5dbe7-ea63-425b-afb3-52a7b4b9b613",
        "tags" : [
        ]
      },
      {
        "id" : "906b3df2-a71e-45a8-9985-855ef7bd57de",
        "parentId" : "4e50f28c-d487-46c9-a442-2a7e59824c93",
        "authorId" : "a2c5dbe7-ea63-425b-afb3-52a7b4b9b613",
        "body" : "Example from log\r\n```\r\nSTEP: Creating a server pod server in namespace network-policy-2306\r\nSTEP: Creating a server pod pod-b in namespace network-policy-b-6489\r\n```\r\n",
        "createdAt" : "2020-04-15T09:30:25Z",
        "updatedAt" : "2020-04-15T09:47:18Z",
        "lastEditedBy" : "a2c5dbe7-ea63-425b-afb3-52a7b4b9b613",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf30bdddb1be45f09d5c550d6ccf1d3f2a1db24e",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +957,961 @@\t\t\tprotocolUDP := v1.ProtocolUDP\n\n\t\t\tnsBName := f.BaseName + \"-b\"\n\t\t\tnsB, err := f.CreateNamespace(nsBName, map[string]string{\n\t\t\t\t\"ns-name\": nsBName,"
  },
  {
    "id" : "349071d6-7e7a-4b77-b237-c591a0b6dd4c",
    "prId" : 90095,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90095#pullrequestreview-393610074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52aa630f-9035-42bd-ba09-db0cdca6d684",
        "parentId" : null,
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "Need to clean up namespace.",
        "createdAt" : "2020-04-15T01:12:49Z",
        "updatedAt" : "2020-04-15T09:47:18Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "eb51c3ae-822e-40a2-9bc3-d7c6e883c52f",
        "parentId" : "52aa630f-9035-42bd-ba09-db0cdca6d684",
        "authorId" : "a2c5dbe7-ea63-425b-afb3-52a7b4b9b613",
        "body" : "There is no need to cleanup namespace, it will be cleaned up automatically when step is finished. https://github.com/kubernetes/kubernetes/blob/master/test/e2e/framework/framework.go#L485 \r\n\r\nExample from log:\r\n```\r\nSTEP: Destroying namespace \"network-policy-2306\" for this suite.\r\nSTEP: Destroying namespace \"network-policy-b-6489\" for this suite.\r\n```",
        "createdAt" : "2020-04-15T09:33:29Z",
        "updatedAt" : "2020-04-15T09:47:18Z",
        "lastEditedBy" : "a2c5dbe7-ea63-425b-afb3-52a7b4b9b613",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf30bdddb1be45f09d5c550d6ccf1d3f2a1db24e",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +958,962 @@\n\t\t\tnsBName := f.BaseName + \"-b\"\n\t\t\tnsB, err := f.CreateNamespace(nsBName, map[string]string{\n\t\t\t\t\"ns-name\": nsBName,\n\t\t\t})"
  },
  {
    "id" : "e2ce667d-e617-407d-b145-27100f71f21c",
    "prId" : 90095,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90095#pullrequestreview-393620242",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7050a84-dc78-4c96-9e45-2920babbc37e",
        "parentId" : null,
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "Is it possible to add helper func to create/generate the needed network policy? It isn't too easy to parse this and having a big chunk of struct specification makes codes less readable :)",
        "createdAt" : "2020-04-15T01:15:50Z",
        "updatedAt" : "2020-04-15T09:47:18Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "433b193e-cc36-46d8-aabb-e46625425e31",
        "parentId" : "d7050a84-dc78-4c96-9e45-2920babbc37e",
        "authorId" : "a2c5dbe7-ea63-425b-afb3-52a7b4b9b613",
        "body" : "Yeah, I know.\r\n\r\nThere is an issue here https://github.com/kubernetes/kubernetes/issues/88375#issuecomment-589331799 and @jayunit100 works on KEP I believe.\r\n",
        "createdAt" : "2020-04-15T09:47:23Z",
        "updatedAt" : "2020-04-15T09:47:24Z",
        "lastEditedBy" : "a2c5dbe7-ea63-425b-afb3-52a7b4b9b613",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf30bdddb1be45f09d5c550d6ccf1d3f2a1db24e",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +972,976 @@\n\t\t\tginkgo.By(\"Create a network policy for the server which denies both Ingress and Egress traffic.\")\n\t\t\tpolicy := &networkingv1.NetworkPolicy{\n\t\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\t\tName: \"ingress-egress-rule\","
  },
  {
    "id" : "d0bea1ee-68f5-45e4-92bd-9f85df8fed69",
    "prId" : 89582,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89582#pullrequestreview-478942114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "375ad5ad-7b4e-403c-93d5-d3c7d677f219",
        "parentId" : null,
        "authorId" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "body" : "Comments that would help future test maintainers: What's the rationale behind the magic numbers here?\r\n- why retry 5 times and not more/less\r\n- why timeout at 8s instead of more/less",
        "createdAt" : "2020-08-26T16:22:05Z",
        "updatedAt" : "2020-08-31T08:40:02Z",
        "lastEditedBy" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "tags" : [
        ]
      },
      {
        "id" : "f17e6741-9b94-40a8-9af0-09267acf7d17",
        "parentId" : "375ad5ad-7b4e-403c-93d5-d3c7d677f219",
        "authorId" : "1188d119-eaf8-48a8-9d57-e555ccbba122",
        "body" : "Those magic numbers were already there, I left them while changing the way we open the socket in a way that supports both TCP and SCTP.\r\n\r\nI tried to look back up to https://github.com/kubernetes/kubernetes/commit/3471daf7599604561825c7133aee6cc76408d199 but could not find a proper reasoning behind that.\r\n",
        "createdAt" : "2020-08-27T15:52:37Z",
        "updatedAt" : "2020-08-31T08:40:02Z",
        "lastEditedBy" : "1188d119-eaf8-48a8-9d57-e555ccbba122",
        "tags" : [
        ]
      },
      {
        "id" : "81df82e6-fcbb-4c54-8157-21b74311fa73",
        "parentId" : "375ad5ad-7b4e-403c-93d5-d3c7d677f219",
        "authorId" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "body" : "Fair enough, thanks for looking",
        "createdAt" : "2020-08-31T20:45:58Z",
        "updatedAt" : "2020-08-31T20:45:58Z",
        "lastEditedBy" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "254905caa77373a0c4c382997e9dfd4c06457d00",
    "line" : 431,
    "diffHunk" : "@@ -1,1 +2230,2234 @@\t\t\t\t\tArgs: []string{\n\t\t\t\t\t\t\"-c\",\n\t\t\t\t\t\tfmt.Sprintf(\"for i in $(seq 1 5); do /agnhost connect %s.%s:%d --protocol %s --timeout 8s && exit 0 || sleep 1; done; exit 1\", targetService.Name, targetService.Namespace, targetPort, connectProtocol),\n\t\t\t\t\t},\n\t\t\t\t},"
  },
  {
    "id" : "9f2ec3e9-fdf1-414c-a820-7375f109b3bf",
    "prId" : 88393,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88393#pullrequestreview-362970984",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7582a899-250c-4d7c-b5d5-5a6ae928cafa",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "reuse the `policyAllowCIDRWithExceptServerPod` var? ",
        "createdAt" : "2020-02-21T21:11:52Z",
        "updatedAt" : "2020-02-21T23:32:30Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "cd16c0b9-4e5e-41d7-a436-67e8293e5183",
        "parentId" : "7582a899-250c-4d7c-b5d5-5a6ae928cafa",
        "authorId" : "8949719e-3713-4a40-b764-2966b123797e",
        "body" : "if reused then i can no longer reuse it on L1487 to recreate the policy as it complains about setting resourceVersions etc as the policyAllowCIDRWithExceptServerPod var no longer contains what was set in L1388",
        "createdAt" : "2020-02-21T23:13:03Z",
        "updatedAt" : "2020-02-21T23:32:30Z",
        "lastEditedBy" : "8949719e-3713-4a40-b764-2966b123797e",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3038d5f5a79a82f58f853b920cf80b06461b9aa",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +1424,1428 @@\t\t\t}\n\n\t\t\tpolicyAllowCIDRWithExceptServerPodObj, err := f.ClientSet.NetworkingV1().NetworkPolicies(f.Namespace.Name).Create(context.TODO(), policyAllowCIDRWithExceptServerPod, metav1.CreateOptions{})\n\t\t\tframework.ExpectNoError(err, \"Error occurred while creating policy: policyAllowCIDRWithExceptServerPod.\")\n"
  },
  {
    "id" : "770e49e8-8052-41ea-af86-f0bd4712bb35",
    "prId" : 88301,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88301#pullrequestreview-362190493",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5c6112d-3b95-443c-925d-49e9702d08cc",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "nit: can we make this a /24? just an easier subnet to follow",
        "createdAt" : "2020-02-20T19:20:39Z",
        "updatedAt" : "2020-02-20T19:32:25Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "7130ba7d-4a02-4d77-b5f9-0aa9f4e0add0",
        "parentId" : "d5c6112d-3b95-443c-925d-49e9702d08cc",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "oops I meant the line above not this one \r\n```go\r\npodServerAllowCIDR := fmt.Sprintf(\"%s/24\", podServerStatus.Status.PodIP)\r\n```",
        "createdAt" : "2020-02-20T19:24:27Z",
        "updatedAt" : "2020-02-20T19:32:25Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "4e9b48c1-1053-4a82-9884-75772ffbb083",
        "parentId" : "d5c6112d-3b95-443c-925d-49e9702d08cc",
        "authorId" : "8949719e-3713-4a40-b764-2966b123797e",
        "body" : "done",
        "createdAt" : "2020-02-20T19:32:39Z",
        "updatedAt" : "2020-02-20T19:32:39Z",
        "lastEditedBy" : "8949719e-3713-4a40-b764-2966b123797e",
        "tags" : [
        ]
      },
      {
        "id" : "7762b071-773e-4483-915e-1cfc3386d542",
        "parentId" : "d5c6112d-3b95-443c-925d-49e9702d08cc",
        "authorId" : "8949719e-3713-4a40-b764-2966b123797e",
        "body" : "single test log with the new commit https://github.com/abhiraut/kubernetes/blob/abhiraut-except-logs/antreaLogs-a980a1f.log",
        "createdAt" : "2020-02-20T19:55:26Z",
        "updatedAt" : "2020-02-20T19:55:26Z",
        "lastEditedBy" : "8949719e-3713-4a40-b764-2966b123797e",
        "tags" : [
        ]
      }
    ],
    "commit" : "a980a1fa24b20ed694537d933b3b4a41d2b5edff",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +1318,1322 @@\t\t\tpodServerAllowCIDR := fmt.Sprintf(\"%s/24\", podServerStatus.Status.PodIP)\n\t\t\t// Exclude podServer's IP with an Except clause\n\t\t\tpodServerExceptList := []string{fmt.Sprintf(\"%s/32\", podServerStatus.Status.PodIP)}\n\n\t\t\t// client-a can connect to server prior to applying the NetworkPolicy"
  },
  {
    "id" : "470d6071-061c-4f49-a8bb-291c0af47505",
    "prId" : 88301,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88301#pullrequestreview-362187350",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "631d6d6a-9d89-48e0-84eb-4bb757b2af1b",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Should this include port 80 actually? ",
        "createdAt" : "2020-02-20T19:38:22Z",
        "updatedAt" : "2020-02-20T19:38:30Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "178a55d5-a867-4ce6-90ea-f489f4e87dfc",
        "parentId" : "631d6d6a-9d89-48e0-84eb-4bb757b2af1b",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "nvm, I see that there are two separate egress rules, initially thought it was one",
        "createdAt" : "2020-02-20T19:50:40Z",
        "updatedAt" : "2020-02-20T19:50:40Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      }
    ],
    "commit" : "a980a1fa24b20ed694537d933b3b4a41d2b5edff",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +1345,1349 @@\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tProtocol: &protocolUDP,\n\t\t\t\t\t\t\t\t\tPort:     &intstr.IntOrString{Type: intstr.Int, IntVal: 53},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},"
  },
  {
    "id" : "680f552c-385b-453e-96df-7fea0f55c3ed",
    "prId" : 88196,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88196#pullrequestreview-368744766",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca23efd7-ea33-4fe5-9bed-cbf5aca9bc11",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "just curious, does this `testCannotConnect` function supports SCTP?",
        "createdAt" : "2020-03-03T22:42:08Z",
        "updatedAt" : "2020-05-28T19:54:55Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "7b94f1d8-a031-4cb8-a734-2a03b8d154cb",
        "parentId" : "ca23efd7-ea33-4fe5-9bed-cbf5aca9bc11",
        "authorId" : "435e54ad-c154-4dc4-ba5a-0c4cb43addc5",
        "body" : "No. And that is the point. testCannotConnect tries to connect to the server via TCP. And it must fail because we allow only SCTP connection. So, the policy works if the TCP connection fails, and the test case passed then.",
        "createdAt" : "2020-03-04T12:42:34Z",
        "updatedAt" : "2020-05-28T19:54:55Z",
        "lastEditedBy" : "435e54ad-c154-4dc4-ba5a-0c4cb43addc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ce43a1c96e631c3ce95453c083c193ba8528d9d",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +1775,1779 @@\n\t\t\tginkgo.By(\"Testing pods cannot connect on port 80 anymore when not using SCTP as protocol.\")\n\t\t\ttestCannotConnect(f, f.Namespace, \"client-a\", service, 80)\n\n\t\t\tginkgo.By(\"validating sctp module is still not loaded\")"
  },
  {
    "id" : "8f8c7762-3e14-4108-ae7c-0ae9370b357c",
    "prId" : 85909,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85909#pullrequestreview-350543059",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55035fed-e6b5-419e-b29f-2712df9521f8",
        "parentId" : null,
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "Pod client has `RestartPolicyNever`, so would this also fail since pod will be in `Succeeded` state from previous test case? ",
        "createdAt" : "2020-01-28T15:47:12Z",
        "updatedAt" : "2020-02-13T17:11:00Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "d37e513b-91ee-4f2e-98bd-38b43232a8af",
        "parentId" : "55035fed-e6b5-419e-b29f-2712df9521f8",
        "authorId" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "body" : "`testCanConnect` and `testCannotConnect` create new client Pod, check connection, and clean up it. \r\nhttps://github.com/kubernetes/kubernetes/blob/52d7614a8ca5b8aebc45333b6dc8fbf86a5e7ddf/test/e2e/network/network_policy.go#L1386-L1396\r\nUsing same pod name `client-a` is to emphasize the behavior changes by server pod's label change only. The two steps actually use two client Pods having same name and labels.",
        "createdAt" : "2020-01-28T16:05:17Z",
        "updatedAt" : "2020-02-13T17:11:00Z",
        "lastEditedBy" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "tags" : [
        ]
      },
      {
        "id" : "16f6f154-0f37-43c8-8631-7e3c723f1a76",
        "parentId" : "55035fed-e6b5-419e-b29f-2712df9521f8",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "So this is no longer \"ingress access to updated pod\", but \"ingress access to new pod\" then? I think we still want the updated pod test case. ",
        "createdAt" : "2020-01-28T16:19:06Z",
        "updatedAt" : "2020-02-13T17:11:00Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "79004eaf-6a69-4cd2-a9e6-9f63dd563812",
        "parentId" : "55035fed-e6b5-419e-b29f-2712df9521f8",
        "authorId" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "body" : "It's still updated pod, but just updated server Pod.\r\nAs the PR description explains, all network policy tests are using the utils \"testCannotConnect\" and \"testCanConnect\" which creates a client Pod designed for **one-shot** check without restarting, it's not convenient to test twice with a single client Pod (that's also the mistake the original test made), unless we write another util just for this case.\r\nI think essentially the updated pod test case wants to ensure network policy can be enabled on existing Pods after updating their labels to match them, so it should make sense to verify it on server Pod, as even the original test just verified it on client Pod. Does it make sense?",
        "createdAt" : "2020-01-28T16:32:03Z",
        "updatedAt" : "2020-02-13T17:11:00Z",
        "lastEditedBy" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "tags" : [
        ]
      },
      {
        "id" : "93d9b6f7-86ae-469f-8c1b-248760b65be8",
        "parentId" : "55035fed-e6b5-419e-b29f-2712df9521f8",
        "authorId" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "body" : "I see, so if we are creating new client pod every time and only the server pod gets updated labels, it seems like we can still test the `deny` -> `allow` test case and we don't really need to flip the order? I think we could benefit from having both though:\r\n* deny -> allow by updating server pod labels with new client pod for each connection\r\n* allow -> deny by updating server pod labels with new client pod for each connection ",
        "createdAt" : "2020-01-28T16:40:34Z",
        "updatedAt" : "2020-02-13T17:11:00Z",
        "lastEditedBy" : "6dd71efb-88b1-4bb0-b30a-0df658362f14",
        "tags" : [
        ]
      },
      {
        "id" : "7db98637-fed9-4882-8b07-db1369b7d803",
        "parentId" : "55035fed-e6b5-419e-b29f-2712df9521f8",
        "authorId" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "body" : "I updated the order because the server Pod and its service is created in `BeforeEach`, having only a fixed label `pod-name: server` which is also used by its service to select backends. So it's not convenient to first create a deny policy which selects the server Pod, and then update the server Pod to not match it as updating label \"pod-name: server\" will make service not work.\r\nTo have both tests, I can append one more step to remove the \"isolated\" label and call `testCanConnect` again, it would be the reversed version of your proposal, what do you think?\r\n",
        "createdAt" : "2020-01-28T17:01:59Z",
        "updatedAt" : "2020-02-13T17:11:00Z",
        "lastEditedBy" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "tags" : [
        ]
      },
      {
        "id" : "9d2ac085-5699-4ce0-9e41-b102dc42b6a9",
        "parentId" : "55035fed-e6b5-419e-b29f-2712df9521f8",
        "authorId" : "bf6b086c-ef09-4f4e-8b45-7a12ce3b5b48",
        "body" : "This looks like a different test case to me. The original one is to change the network policy ingress rule selector, so a client that couldn't connect can connect now. Your test case is to change network policy selector, so a server that was protected by the policy become not protected. Maybe we can fix the original one by creating a new client pod and create a new test case for this change? Creating a new client pod is not ideal to test policy change but the enforcement is on the server side for both cases anyway. ",
        "createdAt" : "2020-01-28T19:59:49Z",
        "updatedAt" : "2020-02-13T17:11:00Z",
        "lastEditedBy" : "bf6b086c-ef09-4f4e-8b45-7a12ce3b5b48",
        "tags" : [
        ]
      },
      {
        "id" : "d9b80bc7-f6a5-4ee8-8448-46ce121af3b1",
        "parentId" : "55035fed-e6b5-419e-b29f-2712df9521f8",
        "authorId" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "body" : "Thanks @lzang for reviewing. I restored the original test and fixed it by creating the client pod with `OnFailure` RestartPolicy and updating its label after failure is detected as creating a new client pod may make the test case same as some existing tests which check pods with different labels will have different behaviors, like \r\nhttps://github.com/kubernetes/kubernetes/blob/29b09c7fb1a8d38ab9df4873553cc0b8d97aae95/test/e2e/network/network_policy.go#L147-L152\r\nI created a new test case to ensure network policy selector can take effect on updated server pod as you suggested.",
        "createdAt" : "2020-01-29T15:16:23Z",
        "updatedAt" : "2020-02-13T17:11:00Z",
        "lastEditedBy" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "tags" : [
        ]
      },
      {
        "id" : "a4c0c6c7-4555-4e99-8fdc-a99c64d2f5e2",
        "parentId" : "55035fed-e6b5-419e-b29f-2712df9521f8",
        "authorId" : "bf6b086c-ef09-4f4e-8b45-7a12ce3b5b48",
        "body" : "The existing one doesn't have policy update, so I don't think they are the same, but I am fine if the new approach by modifying the restart policy could work. ",
        "createdAt" : "2020-01-30T02:12:43Z",
        "updatedAt" : "2020-02-13T17:11:00Z",
        "lastEditedBy" : "bf6b086c-ef09-4f4e-8b45-7a12ce3b5b48",
        "tags" : [
        ]
      }
    ],
    "commit" : "55b687054d560125819e805be8eace67c9399e1f",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +903,907 @@\t\t\tginkgo.By(fmt.Sprintf(\"Updating server pod %s to be selected by network policy %s.\", podServer.Name, policy.Name))\n\t\t\tupdatePodLabel(f, f.Namespace, podServer.Name, \"add\", \"/metadata/labels/isolated\", nil)\n\t\t\ttestCannotConnect(f, f.Namespace, \"client-a\", service, allowedPort)\n\t\t})\n"
  },
  {
    "id" : "76bab6b5-032d-4fc8-997c-5de5fa5f00cc",
    "prId" : 85909,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85909#pullrequestreview-350586171",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "594792f8-8915-4776-a78e-0e250d5049cb",
        "parentId" : null,
        "authorId" : "bf6b086c-ef09-4f4e-8b45-7a12ce3b5b48",
        "body" : "If checkConnectivity fails, who will clean up the pod as it would keep restarting on failure?",
        "createdAt" : "2020-01-30T02:09:34Z",
        "updatedAt" : "2020-02-13T17:11:00Z",
        "lastEditedBy" : "bf6b086c-ef09-4f4e-8b45-7a12ce3b5b48",
        "tags" : [
        ]
      },
      {
        "id" : "31a9e4de-db43-482b-bcd1-7e0582996b11",
        "parentId" : "594792f8-8915-4776-a78e-0e250d5049cb",
        "authorId" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "body" : "`checkConnectivity` has timeout (3 min):\r\nhttps://github.com/kubernetes/kubernetes/blob/ae95a4bfcac12bf6b19e2d5acf6404359b1a8c3b/test/e2e/framework/pod/wait.go#L356-L357\r\nThe test will fail if timeout occurs and the Pod will be cleaned up by the deferred delete function, regardless of the restartpolicy.",
        "createdAt" : "2020-01-30T05:18:05Z",
        "updatedAt" : "2020-02-13T17:11:00Z",
        "lastEditedBy" : "f8030d76-6069-40c7-9c21-93f9f4b262ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "55b687054d560125819e805be8eace67c9399e1f",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +868,872 @@\t\t\tginkgo.By(fmt.Sprintf(\"Updating client pod %s that should successfully connect to %s.\", podClient.Name, service.Name))\n\t\t\tpodClient = updatePodLabel(f, f.Namespace, podClient.Name, \"replace\", \"/metadata/labels\", map[string]string{})\n\t\t\tcheckConnectivity(f, f.Namespace, podClient, service)\n\t\t})\n"
  },
  {
    "id" : "a7e413b0-97a5-481b-90af-fdad2f0ed8aa",
    "prId" : 85909,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85909#pullrequestreview-350543059",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13bb3fd7-b4ac-4a8f-965a-eda8845c94ba",
        "parentId" : null,
        "authorId" : "bf6b086c-ef09-4f4e-8b45-7a12ce3b5b48",
        "body" : "Thanks for cleaning this up!",
        "createdAt" : "2020-01-30T02:13:22Z",
        "updatedAt" : "2020-02-13T17:11:00Z",
        "lastEditedBy" : "bf6b086c-ef09-4f4e-8b45-7a12ce3b5b48",
        "tags" : [
        ]
      }
    ],
    "commit" : "55b687054d560125819e805be8eace67c9399e1f",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +1455,1459 @@\terr = e2epod.WaitForPodSuccessInNamespace(f.ClientSet, podClient.Name, ns.Name)\n\tif err != nil {\n\t\tpods, policies, logs := collectPodsAndNetworkPolicies(f, podClient)\n\t\tframework.Failf(\"Pod %s should be able to connect to service %s, but was not able to connect.\\nPod logs:\\n%s\\n\\n Current NetworkPolicies:\\n\\t%v\\n\\n Pods:\\n\\t%v\\n\\n\", podClient.Name, service.Name, logs, policies.Items, pods)\n"
  },
  {
    "id" : "b2a8d1ac-d05e-499e-b90d-5ed1da6b5fde",
    "prId" : 78177,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78177#pullrequestreview-245743227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b39fead4-373c-483a-80ea-fd6db405e692",
        "parentId" : null,
        "authorId" : "4138710b-380a-4011-917f-70ce4f4b9717",
        "body" : "Would it be faster to use unique names, rather than waiting for the teardown to reuse the name? (I suspect so)",
        "createdAt" : "2019-06-04T00:42:17Z",
        "updatedAt" : "2019-06-25T20:26:36Z",
        "lastEditedBy" : "4138710b-380a-4011-917f-70ce4f4b9717",
        "tags" : [
        ]
      },
      {
        "id" : "63e52a63-9536-4b65-aced-b30feafc42ce",
        "parentId" : "b39fead4-373c-483a-80ea-fd6db405e692",
        "authorId" : "80378a29-a778-4fb8-9ee9-9b9aebb3037e",
        "body" : "Yes, it would be faster, but it would not cover the corner cases generated when updating a policy rule to use a different `podSelector`. The name given to a pod is also used for labeling it. Thus, I believe is good to ensure that, for example, when the `podSelector` on a `NetworkPolicyIngressRule` is updated the pod that was previous selected is not selected anymore.",
        "createdAt" : "2019-06-04T08:30:29Z",
        "updatedAt" : "2019-06-25T20:26:36Z",
        "lastEditedBy" : "80378a29-a778-4fb8-9ee9-9b9aebb3037e",
        "tags" : [
        ]
      },
      {
        "id" : "cb10b6eb-5b66-4e83-8a46-8dfc7bb229b0",
        "parentId" : "b39fead4-373c-483a-80ea-fd6db405e692",
        "authorId" : "4138710b-380a-4011-917f-70ce4f4b9717",
        "body" : "I see. A bit unfortunate, but not worth blocking on.",
        "createdAt" : "2019-06-04T23:00:15Z",
        "updatedAt" : "2019-06-25T20:26:36Z",
        "lastEditedBy" : "4138710b-380a-4011-917f-70ce4f4b9717",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fdddd31d292fb93f58a300c72b0b5030a80f785",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +615,619 @@\n\t\t\ttestCanConnect(f, f.Namespace, \"client-a\", service, clientAAllowedPort)\n\t\t\terr = f.WaitForPodNotFound(\"client-a\", framework.PodDeleteTimeout)\n\t\t\tframework.ExpectNoError(err, \"Expected pod to be not found.\")\n"
  },
  {
    "id" : "706e0ac8-468d-49f8-becf-9f79c6a31a71",
    "prId" : 78177,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78177#pullrequestreview-254223476",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aaebfaae-924e-4bb9-89e4-7666fd561502",
        "parentId" : null,
        "authorId" : "bf6b086c-ef09-4f4e-8b45-7a12ce3b5b48",
        "body" : "Shouldn't we clean up the namespace when the test finished?",
        "createdAt" : "2019-06-25T19:25:12Z",
        "updatedAt" : "2019-06-25T20:26:36Z",
        "lastEditedBy" : "bf6b086c-ef09-4f4e-8b45-7a12ce3b5b48",
        "tags" : [
        ]
      },
      {
        "id" : "c64da537-cf19-461a-89de-697aa246285a",
        "parentId" : "aaebfaae-924e-4bb9-89e4-7666fd561502",
        "authorId" : "80378a29-a778-4fb8-9ee9-9b9aebb3037e",
        "body" : "Namespaces are being deleted after test is completed.\r\n[kubernetes/test/e2e/framework/framework.go](https://github.com/kubernetes/kubernetes/blob/a404238d1c90ee00827624249b9223e7644e3f99/test/e2e/framework/framework.go#L404)",
        "createdAt" : "2019-06-25T19:32:03Z",
        "updatedAt" : "2019-06-25T20:26:36Z",
        "lastEditedBy" : "80378a29-a778-4fb8-9ee9-9b9aebb3037e",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fdddd31d292fb93f58a300c72b0b5030a80f785",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +499,503 @@\t\t\t\t\"ns-name\": nsBName,\n\t\t\t})\n\t\t\tframework.ExpectNoError(err, \"Error creating namespace %v: %v\", nsBName, err)\n\n\t\t\tconst allowedPort = 80"
  },
  {
    "id" : "dca4dce2-0598-4b0e-8d24-b9332f15ca27",
    "prId" : 77593,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77593#pullrequestreview-235956806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8ae3870-4b1a-4ae9-94df-14c2b29d2e43",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "For completeness you might as well test that client-b can still connect as well. (likewise in the corresponding egress test)",
        "createdAt" : "2019-05-08T18:12:28Z",
        "updatedAt" : "2019-07-12T07:30:06Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "476ec2d3-9d19-41b7-bcff-4ddfe3552a8d",
        "parentId" : "e8ae3870-4b1a-4ae9-94df-14c2b29d2e43",
        "authorId" : "2e493e7f-a124-41ff-804f-555a8e8b316a",
        "body" : "Acknowledged and added the tests in both ingress and egress.",
        "createdAt" : "2019-05-10T07:17:48Z",
        "updatedAt" : "2019-07-12T07:30:06Z",
        "lastEditedBy" : "2e493e7f-a124-41ff-804f-555a8e8b316a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2c38e4d179e88ec384106e5c5fd88e7643e21ee",
    "line" : 460,
    "diffHunk" : "@@ -1,1 +1014,1018 @@\t\t\tginkgo.By(\"Creating client-a which should be able to contact the server.\", func() {\n\t\t\t\ttestCanConnect(f, f.Namespace, \"client-a\", service, 80)\n\t\t\t})\n\t\t\tginkgo.By(\"Creating client-b which should be able to contact the server.\", func() {\n\t\t\t\ttestCanConnect(f, f.Namespace, \"client-b\", service, 80)"
  },
  {
    "id" : "c6c67972-c51e-4f9a-93e6-e632579e9709",
    "prId" : 77593,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77593#pullrequestreview-235446346",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a3fe30b-09f3-4866-9ee6-2ba7dbc0d4c7",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "which *should* be able to contact",
        "createdAt" : "2019-05-08T18:22:38Z",
        "updatedAt" : "2019-07-12T07:30:06Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "00d25713-fe72-4a1f-8b03-c7bb6747ca02",
        "parentId" : "5a3fe30b-09f3-4866-9ee6-2ba7dbc0d4c7",
        "authorId" : "2e493e7f-a124-41ff-804f-555a8e8b316a",
        "body" : "Acknowledged and updated.",
        "createdAt" : "2019-05-09T07:56:25Z",
        "updatedAt" : "2019-07-12T07:30:06Z",
        "lastEditedBy" : "2e493e7f-a124-41ff-804f-555a8e8b316a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2c38e4d179e88ec384106e5c5fd88e7643e21ee",
    "line" : 657,
    "diffHunk" : "@@ -1,1 +1211,1215 @@\n\t\t\tginkgo.By(\"Creating client-a which should be able to contact the server-b.\", func() {\n\t\t\t\ttestCanConnect(f, f.Namespace, \"client-a\", serviceB, 80)\n\t\t\t})\n"
  },
  {
    "id" : "16f4bdb1-9fc0-45b0-bf58-adcf3ee12f3e",
    "prId" : 77593,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77593#pullrequestreview-260733806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db295f3d-8700-4d42-8b02-c6a49bb6c48d",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "The comment doesn't really add anything that the `By` doesn't already say. (Likewise with the other comments before `By` lines later in this test and other tests.)",
        "createdAt" : "2019-07-10T14:17:58Z",
        "updatedAt" : "2019-07-12T07:30:06Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "a7b68d91-ef10-4c79-99b9-5f9d6bb223b8",
        "parentId" : "db295f3d-8700-4d42-8b02-c6a49bb6c48d",
        "authorId" : "2e493e7f-a124-41ff-804f-555a8e8b316a",
        "body" : "Removed all comments before ginkgo.By() in my code.",
        "createdAt" : "2019-07-11T14:23:46Z",
        "updatedAt" : "2019-07-12T07:30:06Z",
        "lastEditedBy" : "2e493e7f-a124-41ff-804f-555a8e8b316a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2c38e4d179e88ec384106e5c5fd88e7643e21ee",
    "line" : 431,
    "diffHunk" : "@@ -1,1 +985,989 @@\t\t\tdefer cleanupNetworkPolicy(f, policyAllowOnlyFromClientB)\n\n\t\t\tginkgo.By(\"Creating client-a which should not be able to contact the server.\", func() {\n\t\t\t\ttestCannotConnect(f, f.Namespace, \"client-a\", service, 80)\n\t\t\t})"
  },
  {
    "id" : "c70640fe-c601-4c2b-8536-ac400756c2ce",
    "prId" : 77593,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77593#pullrequestreview-260734178",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c144ede1-c36e-46bc-8311-5583d7a4626f",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "(and this comment is actually incorrect; the \"allow all\" policy doesn't exist yet)",
        "createdAt" : "2019-07-10T14:18:35Z",
        "updatedAt" : "2019-07-12T07:30:06Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "909bdf40-2c4a-4d86-9240-113d1b2db8c4",
        "parentId" : "c144ede1-c36e-46bc-8311-5583d7a4626f",
        "authorId" : "2e493e7f-a124-41ff-804f-555a8e8b316a",
        "body" : "Removed the comment.",
        "createdAt" : "2019-07-11T14:24:14Z",
        "updatedAt" : "2019-07-12T07:30:06Z",
        "lastEditedBy" : "2e493e7f-a124-41ff-804f-555a8e8b316a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2c38e4d179e88ec384106e5c5fd88e7643e21ee",
    "line" : 434,
    "diffHunk" : "@@ -1,1 +988,992 @@\t\t\t\ttestCannotConnect(f, f.Namespace, \"client-a\", service, 80)\n\t\t\t})\n\t\t\tginkgo.By(\"Creating client-b which should be able to contact the server.\", func() {\n\t\t\t\ttestCanConnect(f, f.Namespace, \"client-b\", service, 80)\n\t\t\t})"
  },
  {
    "id" : "5ba4339e-0c75-4a9c-829f-718a5f593c5f",
    "prId" : 77593,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77593#pullrequestreview-260735057",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8312509-63a2-4df4-a7f9-0b0901e691bf",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "For completeness, delete `policyDenyAll` now and confirm that client-a *can* connect again.",
        "createdAt" : "2019-07-10T14:29:45Z",
        "updatedAt" : "2019-07-12T07:30:06Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      },
      {
        "id" : "1feeca2f-5748-4ef1-a876-ca73a831d847",
        "parentId" : "d8312509-63a2-4df4-a7f9-0b0901e691bf",
        "authorId" : "2e493e7f-a124-41ff-804f-555a8e8b316a",
        "body" : "Added the test after deleting the `policyDenyAll `",
        "createdAt" : "2019-07-11T14:25:25Z",
        "updatedAt" : "2019-07-12T07:30:06Z",
        "lastEditedBy" : "2e493e7f-a124-41ff-804f-555a8e8b316a",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2c38e4d179e88ec384106e5c5fd88e7643e21ee",
    "line" : 619,
    "diffHunk" : "@@ -1,1 +1173,1177 @@\t\t\tginkgo.By(\"Creating client-a which should not be able to contact the server.\", func() {\n\t\t\t\ttestCannotConnect(f, f.Namespace, \"client-a\", service, 80)\n\t\t\t})\n\n\t\t\tginkgo.By(\"Deleting the network policy denying all traffic.\")"
  },
  {
    "id" : "29f2a270-4b52-4e3a-8e6a-f91b29ab7e67",
    "prId" : 74290,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/74290#pullrequestreview-206304739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e109e717-858f-4796-bd8e-7630d944c690",
        "parentId" : null,
        "authorId" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "body" : "fyi, unrelated change that doesn't really do anything.",
        "createdAt" : "2019-02-21T13:33:53Z",
        "updatedAt" : "2019-02-21T13:33:53Z",
        "lastEditedBy" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "tags" : [
        ]
      }
    ],
    "commit" : "30098fd73f19e324eef41832a9971c17eccbea1d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +18,22 @@\nimport (\n\tv1 \"k8s.io/api/core/v1\"\n\tnetworkingv1 \"k8s.io/api/networking/v1\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\""
  },
  {
    "id" : "289e7b57-b6d9-4e36-bfe2-ea31f454708e",
    "prId" : 53755,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53755#pullrequestreview-69703471",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf6d3083-5b9b-49d2-a8ce-23432c5eb8ad",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Why use the InternalClientset and not the versioned one?\r\nI see that this test uses both at various places.\r\n\r\nUsing versioned clientset is better since it immunes you from internal API changes",
        "createdAt" : "2017-10-12T21:00:48Z",
        "updatedAt" : "2017-10-16T20:41:26Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "a9213149-46d3-42d9-832b-68d427e47e62",
        "parentId" : "cf6d3083-5b9b-49d2-a8ce-23432c5eb8ad",
        "authorId" : "d168965e-f2a1-46dc-9041-18f8ba845ebe",
        "body" : "Yea, would be great to switch to the versioned client. That said, the rest of the tests in this file use the internal clientset AFAICT and I don't want to burden @bcreane's PR with thus just because he touched the code :)\r\n\r\nI think we can address that in its own PR. WDYT?",
        "createdAt" : "2017-10-12T21:03:19Z",
        "updatedAt" : "2017-10-16T20:41:26Z",
        "lastEditedBy" : "d168965e-f2a1-46dc-9041-18f8ba845ebe",
        "tags" : [
        ]
      },
      {
        "id" : "5da91110-4bf5-4afa-bad0-1e65619151d7",
        "parentId" : "cf6d3083-5b9b-49d2-a8ce-23432c5eb8ad",
        "authorId" : "437c6370-f036-4080-9b6c-6caf2003697e",
        "body" : "@nikhiljindal - it's a good suggestion to move to the versioned client set (for all NetworkPolicy tests). I can get a second PR out today if that approach is acceptable.",
        "createdAt" : "2017-10-12T21:05:45Z",
        "updatedAt" : "2017-10-16T20:41:26Z",
        "lastEditedBy" : "437c6370-f036-4080-9b6c-6caf2003697e",
        "tags" : [
        ]
      },
      {
        "id" : "49fadcf7-3a36-4f56-a635-45e13a49aecb",
        "parentId" : "cf6d3083-5b9b-49d2-a8ce-23432c5eb8ad",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Thanks! Updating all references in another PR sounds good.",
        "createdAt" : "2017-10-16T21:19:20Z",
        "updatedAt" : "2017-10-16T21:19:21Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "65e1777622d2acf7f08ff956caecc0df6752072e",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +300,304 @@\t\t\t}\n\n\t\t\tpolicy, err := f.InternalClientset.Networking().NetworkPolicies(f.Namespace.Name).Create(policy)\n\t\t\tExpect(err).NotTo(HaveOccurred())\n\t\t\tdefer cleanupNetworkPolicy(f, policy)"
  },
  {
    "id" : "b6008c61-88bb-4508-bb19-98b8e5a87135",
    "prId" : 49593,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49593#pullrequestreview-62765342",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aac6c4f5-f024-4d7a-a4bc-9ee096e82083",
        "parentId" : null,
        "authorId" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "body" : "again, as long as the pod is ready, and the service has an endpoint, then we shouldn't need to retry; the first attempt should succeed",
        "createdAt" : "2017-09-14T14:21:27Z",
        "updatedAt" : "2017-10-04T22:36:42Z",
        "lastEditedBy" : "c490e441-2b9f-41f2-8559-d47be0ea8836",
        "tags" : [
        ]
      }
    ],
    "commit" : "3471daf7599604561825c7133aee6cc76408d199",
    "line" : 643,
    "diffHunk" : "@@ -1,1 +481,485 @@\t\t\t\t\t\t\"/bin/sh\",\n\t\t\t\t\t\t\"-c\",\n\t\t\t\t\t\tfmt.Sprintf(\"for i in $(seq 1 5); do wget -T 8 %s.%s:%d -O - && exit 0 || sleep 1; done; exit 1\",\n\t\t\t\t\t\t\ttargetService.Name, targetService.Namespace, targetPort),\n\t\t\t\t\t},"
  }
]