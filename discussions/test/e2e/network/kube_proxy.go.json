[
  {
    "id" : "82c3f686-6331-4d14-9d45-210af42a5fe3",
    "prId" : 90687,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/90687#pullrequestreview-404655569",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd80a3b6-a162-40ae-8fbc-49dd70f7de9a",
        "parentId" : null,
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "This feels potentially fragile. Maybe a sleep loop instead...?",
        "createdAt" : "2020-05-02T16:59:56Z",
        "updatedAt" : "2020-05-09T14:54:34Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "9a86c894-5570-4081-b2ae-0a27fef80840",
        "parentId" : "fd80a3b6-a162-40ae-8fbc-49dd70f7de9a",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "I've done a `grep -r sleep test/`  and it seems the norm",
        "createdAt" : "2020-05-02T17:22:13Z",
        "updatedAt" : "2020-05-09T14:54:34Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "99314beb-bde6-435d-83fd-9ea6251d9142",
        "parentId" : "fd80a3b6-a162-40ae-8fbc-49dd70f7de9a",
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "doesn't mean it's a good idea? :+)\r\n\r\nI suppose we can more broadly look at that later.",
        "createdAt" : "2020-05-03T00:00:22Z",
        "updatedAt" : "2020-05-09T14:54:34Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "01ddaf25-97b8-48ce-b49d-a12425439cc1",
        "parentId" : "fd80a3b6-a162-40ae-8fbc-49dd70f7de9a",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "how the pod dies if it's in a continuous loop?",
        "createdAt" : "2020-05-03T08:36:52Z",
        "updatedAt" : "2020-05-09T14:54:34Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "7e55e682-ee0c-427c-81a0-d7bd4c31d039",
        "parentId" : "fd80a3b6-a162-40ae-8fbc-49dd70f7de9a",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "I vaguely remember that this is on purpose, maybe @neolit123 knows more about this topic of using `sleep` instead a loop",
        "createdAt" : "2020-05-03T08:47:47Z",
        "updatedAt" : "2020-05-09T14:54:34Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "a3548735-9575-4551-a7c1-0c82c501cb56",
        "parentId" : "fd80a3b6-a162-40ae-8fbc-49dd70f7de9a",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "why not `sleep infinite` and keep the `defer fr.PodClient().DeleteSync...`?\r\n",
        "createdAt" : "2020-05-03T17:38:45Z",
        "updatedAt" : "2020-05-09T14:54:34Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "9de321df-8b08-4fbf-9e54-d53abdfc573c",
        "parentId" : "fd80a3b6-a162-40ae-8fbc-49dd70f7de9a",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "I've tried it locally and was waiting forever , I didn't go deeper but the deletesync never killed the pod.\r\nI think I read somewhere that the e2e framework handled the pod cleaning, that's why I removed the deletesync calls",
        "createdAt" : "2020-05-03T18:28:29Z",
        "updatedAt" : "2020-05-09T14:54:34Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "e845fbd9-891a-4183-82ab-a476f6cbe2c0",
        "parentId" : "fd80a3b6-a162-40ae-8fbc-49dd70f7de9a",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "i guess deleting `Namespace: fr.Namespace.Name,` should handle that, yes.\r\n\r\n> I've tried it locally and was waiting forever ,\r\n\r\nbut note after 600ms, that the Pod enters a \"Completed\" phase instead of \"Running\" if that matters for the test.",
        "createdAt" : "2020-05-03T18:31:09Z",
        "updatedAt" : "2020-05-09T14:54:34Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "2ddfdde4-03d9-41d7-aaed-cba02f8bd0bd",
        "parentId" : "fd80a3b6-a162-40ae-8fbc-49dd70f7de9a",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "`man sleep`\r\n\r\n> Pause  for NUMBER seconds.  SUFFIX may be 's' for seconds (the default),\r\n\r\nthe test is limited to `postFinTimeoutSeconds = 30 s` plus the time to spawn the pods, so 600s seems a safe bet :)",
        "createdAt" : "2020-05-03T20:14:17Z",
        "updatedAt" : "2020-05-09T14:54:34Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "e9a0de03-5598-4f37-8cbe-62cbd3608df0",
        "parentId" : "fd80a3b6-a162-40ae-8fbc-49dd70f7de9a",
        "authorId" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "body" : "> man sleep\r\n\r\nright, i forgot.\r\n\r\n> safe bet\r\n\r\nif you think so.",
        "createdAt" : "2020-05-03T20:26:02Z",
        "updatedAt" : "2020-05-09T14:54:34Z",
        "lastEditedBy" : "2ce2b44c-9841-49e7-983e-fb7696974908",
        "tags" : [
        ]
      },
      {
        "id" : "3008de4b-13b3-41d2-b0ef-96e2e9ad357d",
        "parentId" : "fd80a3b6-a162-40ae-8fbc-49dd70f7de9a",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "> if you think so.\r\n\r\n:)",
        "createdAt" : "2020-05-03T20:42:19Z",
        "updatedAt" : "2020-05-09T14:54:34Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f9c0f9edd835367116971074fb743c39a6b3863",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +98,102 @@\t\t\t\t\t\tImage:           imageutils.GetE2EImage(imageutils.DebianIptables),\n\t\t\t\t\t\tImagePullPolicy: v1.PullIfNotPresent,\n\t\t\t\t\t\tCommand:         []string{\"sleep\", \"600\"},\n\t\t\t\t\t\tSecurityContext: &v1.SecurityContext{\n\t\t\t\t\t\t\tPrivileged: &privileged,"
  },
  {
    "id" : "02a10385-f275-4912-a078-27e9fa22efa8",
    "prId" : 89556,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/89556#pullrequestreview-388446694",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6d4293f-da4f-4bea-9ff4-3b8dbc8ebca5",
        "parentId" : null,
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "thanks for fixing typo",
        "createdAt" : "2020-04-06T17:03:14Z",
        "updatedAt" : "2020-04-06T17:03:15Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "acb242f99cf1624d74b20fbb4d89b065e7b26a30",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +230,234 @@\t// IP could result in the connection being closed with the error \"Connection reset by\n\t// peer\"\n\tginkgo.It(\"should resolve connection reset issue #74839 [Slow]\", func() {\n\t\tserverLabel := map[string]string{\n\t\t\t\"app\": \"boom-server\","
  },
  {
    "id" : "dc1ea67c-992c-488e-a105-6e50df6d0b71",
    "prId" : 87080,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87080#pullrequestreview-365475495",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "915d96d1-e569-47b2-8099-eeda79c693f4",
        "parentId" : null,
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "should this be a utility method?",
        "createdAt" : "2020-02-27T06:47:02Z",
        "updatedAt" : "2020-03-31T23:17:33Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "cce6b5b3-9b64-4a2f-a42b-bb2077b0b7b7",
        "parentId" : "915d96d1-e569-47b2-8099-eeda79c693f4",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "I didn't see it used anywhere else, it seems that only conntrack is expanding the IPv6 addresses when writing to a file.\r\nI don't have any preference honestly, just thought this was the simplest way",
        "createdAt" : "2020-02-27T08:02:23Z",
        "updatedAt" : "2020-03-31T23:17:33Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a89c2bdaf13ee3013a266724dd07a5518014caf0",
    "line" : 254,
    "diffHunk" : "@@ -1,1 +376,380 @@})\n\n// fullIPv6 returns a string with the IP representation\n// if IPv6 it returns the expanded address format\n// credit https://stackoverflow.com/a/52003106/4532704"
  },
  {
    "id" : "3312a36a-09a9-4b48-9e41-bd0ea31935b9",
    "prId" : 87080,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87080#pullrequestreview-385147368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7f9e6d2-47b8-41e9-a085-40961cfc61a9",
        "parentId" : null,
        "authorId" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "body" : "Can you add a `[Privileged]` to this test's name in the `ginkgo.It` call above?",
        "createdAt" : "2020-03-31T21:02:13Z",
        "updatedAt" : "2020-03-31T23:17:33Z",
        "lastEditedBy" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "tags" : [
        ]
      },
      {
        "id" : "73e9154b-b8e1-470b-aba8-8ceb974b13d2",
        "parentId" : "b7f9e6d2-47b8-41e9-a085-40961cfc61a9",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "done",
        "createdAt" : "2020-03-31T22:24:25Z",
        "updatedAt" : "2020-03-31T23:17:33Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "a89c2bdaf13ee3013a266724dd07a5518014caf0",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +87,91 @@\t\t// It mounts the host /proc/net folder to be able to access\n\t\t// the nf_conntrack file with the host conntrack entries\n\t\tprivileged := true\n\n\t\thostExecPod := &v1.Pod{"
  },
  {
    "id" : "a6750851-c08d-4bd7-a614-1d4765366e85",
    "prId" : 86924,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86924#pullrequestreview-339488317",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f650d19-cebf-45ea-b89c-fb01c60825c4",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "@spiffxp I think that this was the problem,  the exec pod was executing with pause, it then executes a command in a goroutine https://github.com/kubernetes/kubernetes/pull/86924/files#diff-e99584717e21a274f44c98f0c97a3182L232\r\nThis way it is cleaned when the test ends",
        "createdAt" : "2020-01-07T20:29:34Z",
        "updatedAt" : "2020-01-08T11:48:14Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "704ec253527dd049997c6f64dbbb123c10d95b0f",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +130,134 @@\t\t}\n\t\tfr.PodClient().CreateSync(hostExecPod)\n\t\tdefer fr.PodClient().DeleteSync(hostExecPod.Name, &metav1.DeleteOptions{}, framework.DefaultPodDeletionTimeout)\n\n\t\t// Some distributions (Ubuntu 16.04 etc.) don't support the proc file."
  },
  {
    "id" : "6e051539-3474-4bd7-b509-90ceffe66b4a",
    "prId" : 86924,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86924#pullrequestreview-339568011",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6446152b-4a8b-41e5-87e6-fe5fa5f5f733",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "@spiffxp @BenTheElder \r\nI think this was the real problem, from https://onsi.github.io/ginkgo/\r\n```\r\nHowever, if your test launches a goroutine that calls Fail (or, equivalently, invokes a failing Gomega assertion), there’s no way for Ginkgo to rescue the panic that Fail invokes. This will cause the test suite to panic and no subsequent tests will run. To get around this you must rescue the panic using GinkgoRecover. Here’s an example:\r\n\r\nIt(\"panics in a goroutine\", func(done Done) {\r\n    go func() {\r\n        defer GinkgoRecover()\r\n\r\n        Ω(doSomething()).Should(BeTrue())\r\n\r\n        close(done)\r\n    }()\r\n})\r\nNow, if doSomething() returns false, Gomega will call Fail which will panic but the deferred GinkgoRecover() will recover said panic and prevent the test suite from exploding.\r\n```",
        "createdAt" : "2020-01-07T23:17:44Z",
        "updatedAt" : "2020-01-08T11:48:14Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "704ec253527dd049997c6f64dbbb123c10d95b0f",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +232,236 @@\t\t// otherwise the pod is deleted and the connection is closed loosing the conntrack entry\n\t\tgo func() {\n\t\t\tdefer ginkgo.GinkgoRecover()\n\t\t\t_, err = framework.RunHostCmd(fr.Namespace.Name, \"e2e-net-client\", cmd)\n\t\t\tframework.ExpectNoError(err)"
  },
  {
    "id" : "14657762-7d13-454a-949b-4fc547377b83",
    "prId" : 86924,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/86924#pullrequestreview-339568393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2df8ab73-b20f-4575-8b74-41cc51c0ece8",
        "parentId" : null,
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "not sure if should check for the errors, if the test succeed it will exit and don't know how this is going to behave 🤷‍♂ ",
        "createdAt" : "2020-01-07T23:18:57Z",
        "updatedAt" : "2020-01-08T11:48:14Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "704ec253527dd049997c6f64dbbb123c10d95b0f",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +234,238 @@\t\t\tdefer ginkgo.GinkgoRecover()\n\t\t\t_, err = framework.RunHostCmd(fr.Namespace.Name, \"e2e-net-client\", cmd)\n\t\t\tframework.ExpectNoError(err)\n\t\t}()\n"
  },
  {
    "id" : "875e5ea1-c43a-4d55-a0d3-d64a6fc82940",
    "prId" : 69589,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69589#pullrequestreview-404542890",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8063c36b-5f94-4c55-9c20-338a9ae4f607",
        "parentId" : null,
        "authorId" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "body" : "Is there no other way to accomplish what this test is trying to do?",
        "createdAt" : "2018-11-05T23:50:50Z",
        "updatedAt" : "2018-11-06T21:32:47Z",
        "lastEditedBy" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "tags" : [
        ]
      },
      {
        "id" : "ddc78066-aa0f-4780-9db5-7deac7ca1349",
        "parentId" : "8063c36b-5f94-4c55-9c20-338a9ae4f607",
        "authorId" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "body" : "Yeah, that is ideal.\r\nUnfortunately I cannot find the alternative way instead of skipping.",
        "createdAt" : "2018-11-06T19:23:42Z",
        "updatedAt" : "2018-11-06T21:32:47Z",
        "lastEditedBy" : "c2df03b8-26df-4018-9f8f-4ddea7f8f6cc",
        "tags" : [
        ]
      },
      {
        "id" : "28a173da-dca1-4fb8-b924-20d3f401818e",
        "parentId" : "8063c36b-5f94-4c55-9c20-338a9ae4f607",
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "necro-ing a bit but ...\r\nI'm pretty sure was not the correct way to do this, I definitely have conntrack and a working kind cluster on my machine but this file does not exist even on the host. (ubuntu 20.04)\r\n\r\nit looks to me like you're expected to use `conntrack -L`  instead of reading this file.\r\n\r\nsee e.g. https://github.com/netdata/netdata/issues/161#issue-145492475\r\n\r\ncc @aojea ",
        "createdAt" : "2020-05-02T08:17:17Z",
        "updatedAt" : "2020-05-02T08:17:17Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "8ad3e214-f1f2-493b-b186-316b8930c6d0",
        "parentId" : "8063c36b-5f94-4c55-9c20-338a9ae4f607",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "interesting, thanks for the pointer, it also  mentions\r\n\r\n> I see, yes. And to be sure, I just confirmed that accessing /proc/net/stat/* does not put any load on the system, while accessing /proc/net/nf_conntrack directly takes a very very long time (40 seconds on a firewall with 100,000 tracked connection).\r\n\r\nthat I'd say is the cause of the flakiness in the TCP_CLOSE_WAIT test\r\n\r\nI'll submit a new PR to change this",
        "createdAt" : "2020-05-02T09:56:35Z",
        "updatedAt" : "2020-05-02T09:56:35Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      },
      {
        "id" : "2d758981-8a49-4d71-8270-4ca04c4a6027",
        "parentId" : "8063c36b-5f94-4c55-9c20-338a9ae4f607",
        "authorId" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "body" : "https://github.com/kubernetes/kubernetes/pull/90687",
        "createdAt" : "2020-05-02T16:49:48Z",
        "updatedAt" : "2020-05-02T16:49:48Z",
        "lastEditedBy" : "203dfb85-d185-4057-88b3-a1b4f09fd1fd",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3e59a5c153cf43be22940753b0014e6f8de9b07",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +84,88 @@\t\t\tclientNodeInfo.node)\n\t\tif err != nil && strings.Contains(err.Error(), \"No such file or directory\") {\n\t\t\tframework.Skipf(\"The node %s does not support /proc/net/nf_conntrack\", clientNodeInfo.name)\n\t\t}\n\t\tframework.ExpectNoError(err)"
  }
]