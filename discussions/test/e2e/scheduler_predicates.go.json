[
  {
    "id" : "2e2eb1b2-fa36-44a9-a989-859724daa2f2",
    "prId" : 27364,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "99720906-0c47-4133-9442-849602a0d49d",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "How does it fix the problem? In what state the pod was so that it helps? Was it pending?\n",
        "createdAt" : "2016-06-14T16:23:44Z",
        "updatedAt" : "2016-06-14T16:23:44Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "c66ade4c-9cd4-4f6c-84fa-89a2101b01c8",
        "parentId" : "99720906-0c47-4133-9442-849602a0d49d",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "It was pending. The problem was that after reboot test static Pods for fluentd and kube-proxy were created, but weren't running before the test started, so it didn't accounted resources allocated for them.\n",
        "createdAt" : "2016-06-14T18:31:35Z",
        "updatedAt" : "2016-06-14T18:31:35Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "aceb273adeb5dde7e67fa9e53920754bf9a3e099",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +298,302 @@\t\tfor _, pod := range pods.Items {\n\t\t\t_, found := nodeToCapacityMap[pod.Spec.NodeName]\n\t\t\tif found && pod.Status.Phase != api.PodSucceeded && pod.Status.Phase != api.PodFailed {\n\t\t\t\tframework.Logf(\"Pod %v requesting resource cpu=%vm on Node %v\", pod.Name, getRequestedCPU(pod), pod.Spec.NodeName)\n\t\t\t\tnodeToCapacityMap[pod.Spec.NodeName] -= getRequestedCPU(pod)"
  },
  {
    "id" : "241698a2-a2f5-4d47-a552-be55d4e925d3",
    "prId" : 25584,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78c07c53-6cbb-4ad7-af88-702ccbb54df7",
        "parentId" : null,
        "authorId" : "70ba63ce-18c5-43f6-a9fb-1acd33329390",
        "body" : "The change here is not correct, should not read the file content.\n\n``` go\ntestPodPath := \"test/e2e/testing-manifests/node-selection/pod-with-pod-affinity.yaml\"\n```\n",
        "createdAt" : "2016-08-03T14:34:41Z",
        "updatedAt" : "2016-08-03T14:37:16Z",
        "lastEditedBy" : "70ba63ce-18c5-43f6-a9fb-1acd33329390",
        "tags" : [
        ]
      },
      {
        "id" : "a0126b81-02be-42c0-b625-68fdc851d17a",
        "parentId" : "78c07c53-6cbb-4ad7-af88-702ccbb54df7",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Actually this also doesn't work, as such file doesn't exist (or something) and kubectl can't read gobindata (I think). The point is - it doesn't work as well. @jayunit100 - I'm going to spend half a day fixing this, is using gobindata really, really, really worth it? @thockin \n",
        "createdAt" : "2016-08-04T07:52:39Z",
        "updatedAt" : "2016-08-04T07:52:39Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "dabdafc3-2039-4e76-94a4-7aa5087f5b97",
        "parentId" : "78c07c53-6cbb-4ad7-af88-702ccbb54df7",
        "authorId" : "70ba63ce-18c5-43f6-a9fb-1acd33329390",
        "body" : "I just sent a PR #30061 to change it back, feel free to close if you have better solution :)\n",
        "createdAt" : "2016-08-04T09:07:42Z",
        "updatedAt" : "2016-08-04T09:07:42Z",
        "lastEditedBy" : "70ba63ce-18c5-43f6-a9fb-1acd33329390",
        "tags" : [
        ]
      },
      {
        "id" : "53731e51-4eb6-4cec-86db-fe6f82025777",
        "parentId" : "78c07c53-6cbb-4ad7-af88-702ccbb54df7",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "I was exaggerating, as I was annoyed by this problem and the fact that somehow gobindeps PR went in even though it broke the test completely. We really, really, really should make serial suite blocking, however painful it may be. @lavalamp @fejta  \n",
        "createdAt" : "2016-08-04T09:11:57Z",
        "updatedAt" : "2016-08-04T09:11:57Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "a264d523-d42a-4bf5-b7e4-2dc5a71baaa2",
        "parentId" : "78c07c53-6cbb-4ad7-af88-702ccbb54df7",
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "What was missing in the PR automation?  \n",
        "createdAt" : "2016-08-04T20:50:37Z",
        "updatedAt" : "2016-08-04T20:50:37Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "d97e36ca-f762-46d0-9f49-69e1baff5e56",
        "parentId" : "78c07c53-6cbb-4ad7-af88-702ccbb54df7",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "we don't run `[Serial]` tests per-PR.\n",
        "createdAt" : "2016-08-04T20:53:03Z",
        "updatedAt" : "2016-08-04T20:53:03Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6166083c78063e719017ddd8fb2cf4882e3749bf",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +1212,1216 @@\t\tBy(\"Trying to launch a pod that with PodAffinity & PodAntiAffinity setting as embedded JSON string in the annotation value.\")\n\t\tlabelPodName := \"with-newlabels\"\n\t\ttestPodPath := string(framework.ReadOrDie(\"test/e2e/testing-manifests/node-selection/pos-with-node-affinity.yaml\"))\n\t\tframework.RunKubectlOrDie(\"create\", \"-f\", testPodPath, fmt.Sprintf(\"--namespace=%v\", ns))\n"
  },
  {
    "id" : "99c91276-55cf-462c-b432-67c385bb6bcb",
    "prId" : 25584,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc541ac8-7531-4578-b43d-aab79c4a61da",
        "parentId" : null,
        "authorId" : "70ba63ce-18c5-43f6-a9fb-1acd33329390",
        "body" : "should not read the file content here:\n\n``` go\ntestPodPath := \"test/e2e/testing-manifests/node-selection/pod-with-node-affinity.yaml\"\n```\n",
        "createdAt" : "2016-08-03T14:37:04Z",
        "updatedAt" : "2016-08-03T14:37:04Z",
        "lastEditedBy" : "70ba63ce-18c5-43f6-a9fb-1acd33329390",
        "tags" : [
        ]
      },
      {
        "id" : "8d5f01d0-1b6c-4ec6-89dd-f4d29d66fcc4",
        "parentId" : "dc541ac8-7531-4578-b43d-aab79c4a61da",
        "authorId" : "70ba63ce-18c5-43f6-a9fb-1acd33329390",
        "body" : "This change is what recently killing the GCE e2e Serial (#29816), and using relative path doesn't work.\nI'm going to change it back (using framework.TestContext.RepoRoot again).\n\nref #29816, #29996, #30018\n",
        "createdAt" : "2016-08-04T05:32:14Z",
        "updatedAt" : "2016-08-04T05:33:21Z",
        "lastEditedBy" : "70ba63ce-18c5-43f6-a9fb-1acd33329390",
        "tags" : [
        ]
      }
    ],
    "commit" : "6166083c78063e719017ddd8fb2cf4882e3749bf",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +697,701 @@\t\tBy(\"Trying to launch a pod that with NodeAffinity setting as embedded JSON string in the annotation value.\")\n\t\tlabelPodName := \"with-labels\"\n\t\ttestPodPath := string(framework.ReadOrDie(\"test/e2e/testing-manifests/node-selection/pod-with-node-affinity.yaml\"))\n\t\tframework.RunKubectlOrDie(\"create\", \"-f\", testPodPath, fmt.Sprintf(\"--namespace=%v\", ns))\n"
  },
  {
    "id" : "84fecced-6e96-4d22-8914-a7d8969f3f54",
    "prId" : 25255,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23773b85-8195-4975-992e-39ce6822508b",
        "parentId" : null,
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "i gues we assume that any given cluster may have a variable # of pods running, so this can easily be 0 if its run on a busy cluster, right?  If _yes_ please add this to a comment here.\n",
        "createdAt" : "2016-05-06T18:07:30Z",
        "updatedAt" : "2016-06-14T11:46:33Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9f3e3c3ad70343ba76bd95d374e7a6b8f13d5b4",
    "line" : null,
    "diffHunk" : "@@ -1,1 +240,244 @@\t\t// and there is no need to create additional pods.\n\t\t// StartPods requires at least one pod to replicate.\n\t\tif podsNeededForSaturation > 0 {\n\t\t\tframework.StartPods(c, podsNeededForSaturation, ns, \"maxp\", api.Pod{\n\t\t\t\tTypeMeta: unversioned.TypeMeta{"
  },
  {
    "id" : "422d0cd3-c0de-4faa-95f0-87cab759b8f0",
    "prId" : 25255,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2664293-0acf-4663-a8f2-db453e8bd348",
        "parentId" : null,
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "similar comment, add the comment for why we expect that (in some cases) this may be zero.... \n",
        "createdAt" : "2016-05-06T18:08:21Z",
        "updatedAt" : "2016-06-14T11:46:33Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9f3e3c3ad70343ba76bd95d374e7a6b8f13d5b4",
    "line" : null,
    "diffHunk" : "@@ -1,1 +322,326 @@\t\t// and there is no need to create additional pods.\n\t\t// StartPods requires at least one pod to replicate.\n\t\tif podsNeededForSaturation > 0 {\n\t\t\tframework.StartPods(c, podsNeededForSaturation, ns, \"overcommit\", api.Pod{\n\t\t\t\tTypeMeta: unversioned.TypeMeta{"
  },
  {
    "id" : "4aedb9a1-f8da-445e-930b-afa36bbd309b",
    "prId" : 25255,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4464f47-a307-4b98-86b8-592f2b6c6f2f",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "if I'm understanding this PR correctly, all that's been done is to effectively move the conditional from `StartPods` out to the callers. what benefit does this yield?\n\nput another way: before this PR, `StartPods` just returns if `replicas` is 0. with this PR, we don't call `StartPods` if `replicas` is zero. but the behavior is effectively the same, so why do we need to do this?\n",
        "createdAt" : "2016-05-09T19:50:07Z",
        "updatedAt" : "2016-06-14T11:46:33Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "1109281a-f5cf-4a69-a22a-453132de1442",
        "parentId" : "e4464f47-a307-4b98-86b8-592f2b6c6f2f",
        "authorId" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "body" : "To increase caller awareness and make the check explicit. Running `StartPod` with `0` replicas is bad design and the caller should make sure it calls the method with the valid input. Without the panic the test can work for a long time without knowing it could be doing something not intended.\n",
        "createdAt" : "2016-05-10T07:37:36Z",
        "updatedAt" : "2016-06-14T11:46:33Z",
        "lastEditedBy" : "c63e1ceb-64bd-4726-b8ef-e647d73dae0c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9f3e3c3ad70343ba76bd95d374e7a6b8f13d5b4",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +240,244 @@\t\t// and there is no need to create additional pods.\n\t\t// StartPods requires at least one pod to replicate.\n\t\tif podsNeededForSaturation > 0 {\n\t\t\tframework.StartPods(c, podsNeededForSaturation, ns, \"maxp\", api.Pod{\n\t\t\t\tTypeMeta: unversioned.TypeMeta{"
  },
  {
    "id" : "3f64af7d-261a-4374-8a4d-d84ccd05b4d6",
    "prId" : 24459,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2a36778-a91a-454b-a210-5b119a312296",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Is it possible to add a test that would detect that kubelet clobbered PodScheduled condition?\n",
        "createdAt" : "2016-04-21T22:39:28Z",
        "updatedAt" : "2016-05-12T08:21:28Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "4d1f2a24-fbff-434b-b41c-50661de6f717",
        "parentId" : "f2a36778-a91a-454b-a210-5b119a312296",
        "authorId" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "body" : "As discussed offline this is obsolete.\n",
        "createdAt" : "2016-05-11T09:54:23Z",
        "updatedAt" : "2016-05-12T08:21:28Z",
        "lastEditedBy" : "df06b0d6-fd6c-44d1-8008-efeaccd16cd5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a80b1798c45f88e6b38261a1657c0dfa787de136",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +46,50 @@\t\tif !masterNodes.Has(pod.Spec.NodeName) {\n\t\t\tif pod.Spec.NodeName != \"\" {\n\t\t\t\t_, scheduledCondition := api.GetPodCondition(&pod.Status, api.PodScheduled)\n\t\t\t\tExpect(scheduledCondition != nil).To(Equal(true))\n\t\t\t\tExpect(scheduledCondition.Status).To(Equal(api.ConditionTrue))"
  },
  {
    "id" : "0dc1853d-ce8a-4360-9d5d-a924327deaff",
    "prId" : 24134,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccf099c1-0f37-4575-8b3a-d56f1f736996",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Add one more step, where you verify that the pod gets schedule after you remove the taint.\n",
        "createdAt" : "2016-05-17T15:57:40Z",
        "updatedAt" : "2016-05-18T15:08:30Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      },
      {
        "id" : "dacd20e4-722e-4683-90bb-d8ebd81dd053",
        "parentId" : "ccf099c1-0f37-4575-8b3a-d56f1f736996",
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Sorry I was not clear what I meant. What I meant was: \"add one more step, when you verify that the pod _that was pending_ gets scheduled after you remove the taint. So do not create another pod. When you remove the taint from the node, the same pod that was pending, should now get scheduled.\n\nPlease do that in a follow-up PR; I am going to LGTM this PR now so we can make sure it gets merged in time.\n",
        "createdAt" : "2016-05-18T22:35:41Z",
        "updatedAt" : "2016-05-18T22:35:41Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "52fb89ff7326b3570e9c42a435081dab559f610b",
    "line" : 229,
    "diffHunk" : "@@ -1,1 +1499,1503 @@\t\tBy(\"removing the taint \" + taintName + \" off the node \" + nodeName)\n\t\tframework.RunKubectlOrDie(\"taint\", \"nodes\", nodeName, taintName+\"-\")\n\t\tBy(\"verifying the node doesn't have the taint \" + taintName)\n\t\toutput = framework.RunKubectlOrDie(\"describe\", \"node\", nodeName)\n\t\tif strings.Contains(output, taintName) {"
  },
  {
    "id" : "50fe608a-3a94-44da-9ebc-82ffad8afd43",
    "prId" : 22440,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eefe81f7-29ec-40f8-9c1f-23448acde838",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "suggestion: turn this into a function that can be reused. Given that this PR is for debugging flaky test and is high priority, I'll let you decide if you want to do that.\n",
        "createdAt" : "2016-03-03T17:53:17Z",
        "updatedAt" : "2016-03-04T08:50:45Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "bd01ed89-b7c3-44b2-ad95-80a1bec04686",
        "parentId" : "eefe81f7-29ec-40f8-9c1f-23448acde838",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "+1\n",
        "createdAt" : "2016-03-04T08:41:56Z",
        "updatedAt" : "2016-03-04T08:50:45Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f3c4905190f0048515a9cbd4dbf82cddd72e77d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +172,176 @@\n\t\tfor _, node := range nodeList.Items {\n\t\t\tLogf(\"\\nLogging pods the kubelet thinks is on node %v before test\", node.Name)\n\t\t\tPrintAllKubeletPods(c, node.Name)\n\t\t}"
  },
  {
    "id" : "fa9bd785-3bcf-4523-8f10-c29bc77ee160",
    "prId" : 20686,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bb33a533-37bb-4aa4-b095-377c6f196007",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "Maybe add a short comment explaining this?\n",
        "createdAt" : "2016-02-08T19:32:35Z",
        "updatedAt" : "2016-02-09T00:21:31Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d65cab42bf1f494d151179b47a73c40fa3543bb8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +204,208 @@\t\t// cannot be run in parallel with any other test that touches Nodes or Pods.\n\t\t// It is so because we need to have precise control on what's running in the cluster.\n\t\tsystemPods, err := c.Pods(api.NamespaceSystem).List(api.ListOptions{})\n\t\tExpect(err).NotTo(HaveOccurred())\n\t\tsystemPodsNo = len(systemPods.Items)"
  },
  {
    "id" : "799f32de-3039-4023-a1e4-65eae680e9ea",
    "prId" : 19758,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5808c4c-a548-4073-a80c-da1c522887e4",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "If you were trying to test AND here, you need to put both matchExpressions them in the same nodeSelectorTerm\n",
        "createdAt" : "2016-01-28T08:19:47Z",
        "updatedAt" : "2016-02-04T01:53:44Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8c82c1d8f8e143f9b571a731d7ff11d5101de20",
    "line" : 187,
    "diffHunk" : "@@ -1,1 +630,634 @@\t\t\t\t\t\"scheduler.alpha.kubernetes.io/affinity\": `\n\t\t\t\t\t\t{\"nodeAffinity\": { \"requiredDuringSchedulingIgnoredDuringExecution\": {\n\t\t\t\t\t\t\t\"nodeSelectorTerms\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"matchExpressions\": [{"
  },
  {
    "id" : "e39ca3ef-5d05-4d48-b793-ea7e003ac321",
    "prId" : 19758,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0e8c58e-424b-4cb9-8820-2c5da941ca75",
        "parentId" : null,
        "authorId" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "body" : "Please add one e2e test for validation (something that fails validation).\n",
        "createdAt" : "2016-01-30T08:03:01Z",
        "updatedAt" : "2016-02-04T01:53:44Z",
        "lastEditedBy" : "82da2b23-9f40-4abd-8af5-56ba07c1fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "c8c82c1d8f8e143f9b571a731d7ff11d5101de20",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +517,521 @@\t\tExpect(labelPod.Spec.NodeName).To(Equal(nodeName))\n\t})\n\n\t// Test Nodes does not have any label, hence it should be impossible to schedule Pod with\n\t// non-nil NodeAffinity.RequiredDuringSchedulingIgnoredDuringExecution."
  },
  {
    "id" : "4b253810-1ec3-4549-81ee-fc2803a82006",
    "prId" : 18509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf2502ba-8f1c-4c5b-9c24-7e0e694a0adc",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "err here is not used.\n",
        "createdAt" : "2015-12-10T15:46:15Z",
        "updatedAt" : "2015-12-14T15:28:35Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "e179c700-0306-4bac-82ff-f945fb293e9c",
        "parentId" : "cf2502ba-8f1c-4c5b-9c24-7e0e694a0adc",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Right. Thanks.\n",
        "createdAt" : "2015-12-11T14:10:42Z",
        "updatedAt" : "2015-12-14T15:28:35Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f38455ddc33e0689de987e523f57806feba0ff1e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +195,199 @@\t\tc = framework.Client\n\t\tns = framework.Namespace.Name\n\t\tnodeList = ListSchedulableNodesOrDie(c)\n\t})\n"
  },
  {
    "id" : "aedb7da3-1cd7-42c6-aebb-d52816966b8a",
    "prId" : 15948,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d51d6f3-f0eb-4c16-9167-ef68ac853014",
        "parentId" : null,
        "authorId" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "body" : "Can you please add an explanation for why this block exists, (with a citation of #15806)?  And can you also please file an issue for removing support for this, and add a TODO here to remove this check?\n",
        "createdAt" : "2015-10-20T16:38:56Z",
        "updatedAt" : "2015-10-22T10:08:39Z",
        "lastEditedBy" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "tags" : [
        ]
      },
      {
        "id" : "edea8c47-a929-4dd7-bcee-f3ff28299dbf",
        "parentId" : "2d51d6f3-f0eb-4c16-9167-ef68ac853014",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Done.\n",
        "createdAt" : "2015-10-21T07:48:16Z",
        "updatedAt" : "2015-10-22T10:08:39Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "bae456cb9d5f54e189bf3dfcc4629e9888b21285",
    "line" : null,
    "diffHunk" : "@@ -1,1 +112,116 @@\texpectNoError(err)\n\t// If we failed to find event with a capitalized first letter of reason\n\t// try looking for one starting with a small one for backward compatibility.\n\t// If we don't do it we end up in #15806.\n\t// TODO: remove this block when we don't care about supporting v1.0 too much."
  },
  {
    "id" : "cafaaf5b-753d-4a15-b999-9e2969211ddc",
    "prId" : 15948,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e42534f-9f54-49d9-9c04-f11bf2e7df32",
        "parentId" : null,
        "authorId" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "body" : "Please file a separate issue from #15806 that is \"Drop support for lowercased reason objects\" or something similar, label it with `kind/breaking-binary-change`, and link to that, rather than just the issue for the 1.1 release.  Sorry that wasn't clear.  We're trying to keep track of where we needed hacks to get 1.1 out the door.\n\nAlso please use the `TODO(12345)` syntax.\n",
        "createdAt" : "2015-10-21T16:33:11Z",
        "updatedAt" : "2015-10-22T10:08:39Z",
        "lastEditedBy" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "tags" : [
        ]
      },
      {
        "id" : "befd472c-b7ae-46f8-b04a-08d8570979a9",
        "parentId" : "5e42534f-9f54-49d9-9c04-f11bf2e7df32",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "We never done that. At least I haven't seen this pattern. I'd rather leave it as it is, it's not worth having separate issue for this kind of cleanup. Someone will do this when changing this test during scheduler refactoring.\n",
        "createdAt" : "2015-10-22T10:07:41Z",
        "updatedAt" : "2015-10-22T10:08:39Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "92e62f0e-1dc8-4221-b094-686ec3708f72",
        "parentId" : "5e42534f-9f54-49d9-9c04-f11bf2e7df32",
        "authorId" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "body" : "I sent an email to the team about this.  We're trying to track issues that would have broken 1.0 but for hacks, so that when we have the conversation about dropping support for 1.0, we know what we're getting ourselves into.  @davidopp can weigh in.\n",
        "createdAt" : "2015-10-22T11:39:26Z",
        "updatedAt" : "2015-10-22T11:39:26Z",
        "lastEditedBy" : "d513ff43-94d3-4f43-8358-1fb8132b6aae",
        "tags" : [
        ]
      },
      {
        "id" : "a4514c72-4a9c-4c38-a9b1-cbbbd2a07cc2",
        "parentId" : "5e42534f-9f54-49d9-9c04-f11bf2e7df32",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Can't we just use github tags for it? Such solution will give way more context that separate issue.\n",
        "createdAt" : "2015-10-23T09:03:27Z",
        "updatedAt" : "2015-10-23T09:03:27Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "bae456cb9d5f54e189bf3dfcc4629e9888b21285",
    "line" : null,
    "diffHunk" : "@@ -1,1 +114,118 @@\t// try looking for one starting with a small one for backward compatibility.\n\t// If we don't do it we end up in #15806.\n\t// TODO: remove this block when we don't care about supporting v1.0 too much.\n\tif len(schedEvents.Items) == 0 {\n\t\tschedEvents, err = c.Events(ns).List("
  },
  {
    "id" : "4a7388d5-9bee-49bb-bd41-b7dff265e3c5",
    "prId" : 15144,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af0df525-8a59-462f-a03e-1843f097c378",
        "parentId" : null,
        "authorId" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "body" : "Why do you need this?\n",
        "createdAt" : "2015-10-06T08:28:34Z",
        "updatedAt" : "2015-10-06T08:28:34Z",
        "lastEditedBy" : "c929c906-4dfb-433b-9bc7-1b4b05c176f8",
        "tags" : [
        ]
      },
      {
        "id" : "61ffb33d-3119-415b-a55d-5904c5e0ae17",
        "parentId" : "af0df525-8a59-462f-a03e-1843f097c378",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Otherwise I'll get segfaults in tests that use this - it was accidentally broken by me and Quinton today, so be better fix this quickly:)\n",
        "createdAt" : "2015-10-06T08:29:41Z",
        "updatedAt" : "2015-10-06T08:29:41Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "42c6d716a5feb7e4398b141a5eb09e20eb920bc6",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +149,153 @@\t\tns = framework.Namespace.Name\n\t\tvar err error\n\t\tnodeList, err = c.Nodes().List(labels.Everything(), fields.Everything())\n\t\texpectNoError(err)\n\t})"
  },
  {
    "id" : "3771465e-cb3a-4fe6-ac40-1aa161177192",
    "prId" : 15144,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1b96bff-fddf-4f16-ab40-4d0ca43c644e",
        "parentId" : null,
        "authorId" : null,
        "body" : "You should change the description in line 168 above to read \"... number of pods that are allowed to schedule?\"\n",
        "createdAt" : "2015-10-06T16:28:52Z",
        "updatedAt" : "2015-10-06T16:28:52Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "42c6d716a5feb7e4398b141a5eb09e20eb920bc6",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +178,182 @@\t\tallPods, err := c.Pods(api.NamespaceAll).List(labels.Everything(), fields.Everything())\n\t\texpectNoError(err)\n\t\tcurrentlyScheduledPods, currentlyNotScheduledPods := getPodsScheduledNumbers(allPods)\n\t\tpodsNeededForSaturation := int(totalPodCapacity) - currentlyScheduledPods\n"
  },
  {
    "id" : "2e731cb8-bf3f-45a0-bc6e-9caab16c7ba6",
    "prId" : 15022,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb496c01-78b9-48a2-a415-5734cb4369b9",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "You probably want to extend timeout for namespace deletion. This test saturates the cluster by creating a lot of pods, and thus events. I added it recently: https://github.com/kubernetes/kubernetes/blob/master/test/e2e/framework.go#L41\n",
        "createdAt" : "2015-10-05T12:50:58Z",
        "updatedAt" : "2015-10-05T12:50:58Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "0163b320-556c-43f0-a3e3-e2cae1e9d367",
        "parentId" : "eb496c01-78b9-48a2-a415-5734cb4369b9",
        "authorId" : null,
        "body" : "The current version of the test (before this PR) does not have a timeout on namespace deletion.  I'd prefer to add the timeout in a separate PR, if it's necessary.  Besides that I don't currently know what a good value for that timeout would be, and don't want to shove an arbitrary one in for no good reason.  OK @gmarek ?\n",
        "createdAt" : "2015-10-05T15:22:37Z",
        "updatedAt" : "2015-10-05T15:22:37Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "c8df1a34-8e2c-484f-832d-38a2bfb57181",
        "parentId" : "eb496c01-78b9-48a2-a415-5734cb4369b9",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "OK. We generally put 1h for 'long timeout' (in density and load tests).\n",
        "createdAt" : "2015-10-05T15:29:24Z",
        "updatedAt" : "2015-10-05T15:29:24Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8f821de1a7c2a91414a029c3fa65315e9657961",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +137,141 @@\nvar _ = Describe(\"SchedulerPredicates\", func() {\n\tframework := Framework{BaseName: \"sched-pred\"}\n\tvar c *client.Client\n\tvar nodeList *api.NodeList"
  },
  {
    "id" : "1e112059-45c0-484d-be7f-216523969115",
    "prId" : 12903,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0dcc31a-60f8-4480-a8ba-ff1a0748f045",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Maybe put it at the end of verifyResult?\n",
        "createdAt" : "2015-08-19T10:00:42Z",
        "updatedAt" : "2015-08-19T10:00:42Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "dbd28396-d0e4-4e5f-9e86-d8cae04ecf41",
        "parentId" : "c0dcc31a-60f8-4480-a8ba-ff1a0748f045",
        "authorId" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "body" : "Is it a part of verifying results?\n",
        "createdAt" : "2015-08-19T10:01:36Z",
        "updatedAt" : "2015-08-19T10:01:36Z",
        "lastEditedBy" : "a6ca7669-677e-4e8d-80cf-83cbff3b4216",
        "tags" : [
        ]
      },
      {
        "id" : "5fa67c5c-6b58-4b6a-b477-48b20ebf2e90",
        "parentId" : "c0dcc31a-60f8-4480-a8ba-ff1a0748f045",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Yeah... you're probably right.\n",
        "createdAt" : "2015-08-19T10:12:31Z",
        "updatedAt" : "2015-08-19T10:12:31Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6a3966abb56c8baff7a5d7fe8f4b96e149f9007",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +239,243 @@\n\t\tverifyResult(c, podName, ns, currentlyDeadPods)\n\t\tcleanupPods(c, ns)\n\t})\n"
  },
  {
    "id" : "59268634-8068-407d-957c-3d4b5f76324b",
    "prId" : 11151,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f507451-dc42-46a2-92a5-2093175ab060",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "why not RunRC? please add a comment \n",
        "createdAt" : "2015-07-24T01:15:16Z",
        "updatedAt" : "2015-07-27T14:38:16Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "63104cc7-74ed-4453-a6f0-735f003672ca",
        "parentId" : "3f507451-dc42-46a2-92a5-2093175ab060",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "I need to be able to pass concrete Pod definition, which RunRC currently does not allow. I was considering adding this capability to RunRC itself, but figured out that this is probably the only test that will need this. Even I'm not convinced that this is a good design, so if you prefer to update RunRC, I'll happily do it.\n",
        "createdAt" : "2015-07-24T08:11:36Z",
        "updatedAt" : "2015-07-27T14:38:16Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "36aff274f138da80372e27312fa5bce5f16e877a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +34,38 @@// Simplified version of RunRC, that does not create RC, but creates plain Pods and\n// requires passing whole Pod definition, which is needed to test various Scheduler predicates.\nfunc startPods(c *client.Client, replicas int, ns string, podNamePrefix string, pod api.Pod) {\n\tpods, err := c.Pods(api.NamespaceAll).List(labels.Everything(), fields.Everything())\n\texpectNoError(err)"
  },
  {
    "id" : "9ebe5a5b-7186-42e5-955d-8255167d9afe",
    "prId" : 11151,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6bdaf4d1-0510-4e02-bd66-b45df3c84a48",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "the saturate cluster pattern is repeated (figure out current cluster status from a list of pods, translate that to a count of pods required to saturate cluster, create the pods), but I don't really have a better suggestion\n",
        "createdAt" : "2015-07-24T01:15:20Z",
        "updatedAt" : "2015-07-27T14:38:16Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "52ad456a-6a5b-4bd3-9c41-4445ef152b81",
        "parentId" : "6bdaf4d1-0510-4e02-bd66-b45df3c84a48",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Yeah - the best I can do is to create a generic function, which will take as an argument another function that computes what 'saturate' means. But generic code will be extremely short as most logic is in this 'figuring out' part:/\n",
        "createdAt" : "2015-07-24T08:13:16Z",
        "updatedAt" : "2015-07-27T14:38:16Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "36aff274f138da80372e27312fa5bce5f16e877a",
    "line" : 181,
    "diffHunk" : "@@ -1,1 +179,183 @@\n\t\tstartPods(c, podsNeededForSaturation, ns, \"maxp\", api.Pod{\n\t\t\tTypeMeta: api.TypeMeta{\n\t\t\t\tKind: \"Pod\",\n\t\t\t},"
  },
  {
    "id" : "78644219-074f-4814-a10e-cf2bd34e6ec3",
    "prId" : 11151,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abfe7237-20f1-41a1-97f2-8f5698258115",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "you can just watch with a timeout instead of time.sleep followed by a list (may not be worth the effort)\n",
        "createdAt" : "2015-07-24T01:15:23Z",
        "updatedAt" : "2015-07-27T14:38:16Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "f0373eec-dcf9-4d58-828e-606f5f2c5325",
        "parentId" : "abfe7237-20f1-41a1-97f2-8f5698258115",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "My thoughts exactly:)\n",
        "createdAt" : "2015-07-24T08:14:47Z",
        "updatedAt" : "2015-07-27T14:38:16Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "36aff274f138da80372e27312fa5bce5f16e877a",
    "line" : 218,
    "diffHunk" : "@@ -1,1 +216,220 @@\t\texpectNoError(err)\n\t\t// Wait a bit to allow scheduler to do its thing\n\t\ttime.Sleep(10 * time.Second)\n\n\t\tverifyResult(c, podName, ns)"
  }
]