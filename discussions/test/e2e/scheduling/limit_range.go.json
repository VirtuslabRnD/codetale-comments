[
  {
    "id" : "87f10e43-b8e5-49ea-ab3e-5350f8393937",
    "prId" : 93803,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93803#pullrequestreview-463707825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "188a72d8-ffb5-40c3-a8dd-81b8af3d30c4",
        "parentId" : null,
        "authorId" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "body" : "why the list options was removed, should we be listing the specific limit range in question?",
        "createdAt" : "2020-08-08T01:11:53Z",
        "updatedAt" : "2020-08-08T01:11:55Z",
        "lastEditedBy" : "570b631b-84a0-4888-a815-ca0e7934e412",
        "tags" : [
        ]
      },
      {
        "id" : "71b3fb7e-5da8-42e9-80d1-c94b19cbda91",
        "parentId" : "188a72d8-ffb5-40c3-a8dd-81b8af3d30c4",
        "authorId" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "body" : "In theory, it's fine to just check the specific LimitRange is deleted (by checking if the error is of type APINotFound). The current style (to ensure no LimitRange in the namespace) don't need to check the returned error, and also can avoid the case that any other LimitRange gets created during the test.",
        "createdAt" : "2020-08-08T01:42:42Z",
        "updatedAt" : "2020-08-08T01:42:42Z",
        "lastEditedBy" : "06cbf859-1cac-4be7-80e6-3b34dcff1812",
        "tags" : [
        ]
      }
    ],
    "commit" : "24bbedb27d5e33328a9f4c3bad2dfb3bf2f15b0d",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +207,211 @@\t\tginkgo.By(\"Verifying the LimitRange was deleted\")\n\t\terr = wait.Poll(time.Second*5, e2eservice.RespondingTimeout, func() (bool, error) {\n\t\t\tlimitRanges, err := f.ClientSet.CoreV1().LimitRanges(f.Namespace.Name).List(context.TODO(), metav1.ListOptions{})\n\n\t\t\tif err != nil {"
  },
  {
    "id" : "6fb29f51-c667-4104-b05a-daabfbb33cc7",
    "prId" : 76328,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76328#pullrequestreview-231252081",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "034a8a7f-9bbd-47bf-887b-ade9b3a5c8d7",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "This is much more robust, thank you. ",
        "createdAt" : "2019-04-26T16:36:53Z",
        "updatedAt" : "2019-07-09T18:33:00Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecf3bb0c031c94b89a9f0448342bc40d94349dfa",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +79,83 @@\n\t\tlistCompleted := make(chan bool, 1)\n\t\tlw := &cache.ListWatch{\n\t\t\tListFunc: func(options metav1.ListOptions) (runtime.Object, error) {\n\t\t\t\toptions.LabelSelector = selector.String()"
  },
  {
    "id" : "2c402ccf-9047-4af7-9aa4-f97126df3e8b",
    "prId" : 76328,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76328#pullrequestreview-259688370",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d6f614b-894f-409f-b470-096d94b9fd32",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "I'm sure this is probably ok 99% of the time, but I'm still left with the \"what if\" problem that if this pattern gets used in multiple concurrent tests.  I think what would help is another label with the unique ID for the test, that should ensure little/no chance of accidentally colliding. ",
        "createdAt" : "2019-07-08T19:57:19Z",
        "updatedAt" : "2019-07-09T18:33:00Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "446828cc-3bce-4a3b-925c-81bc67acea0d",
        "parentId" : "9d6f614b-894f-409f-b470-096d94b9fd32",
        "authorId" : "bc6c968e-9703-4f29-99ac-90bbfe09e25a",
        "body" : "Yes @timothysc good findings. I updated the code.",
        "createdAt" : "2019-07-09T18:38:36Z",
        "updatedAt" : "2019-07-09T18:38:36Z",
        "lastEditedBy" : "bc6c968e-9703-4f29-99ac-90bbfe09e25a",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecf3bb0c031c94b89a9f0448342bc40d94349dfa",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +67,71 @@\n\t\tginkgo.By(\"Setting up watch\")\n\t\tselector := labels.SelectorFromSet(labels.Set(map[string]string{\"time\": value}))\n\n\t\toptions := metav1.ListOptions{LabelSelector: selector.String()}"
  },
  {
    "id" : "b97c6801-d4c6-4c71-8cd2-cdd8ecd90f9c",
    "prId" : 55065,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55065#pullrequestreview-75783089",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e654039-545f-42cb-bef0-40f448c6db90",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "I would warn here b/c we've seen a number of test conditions fail on loaded clusters due to waiting on cleanup conditions.  I realize that it shouldn't occur, but we've seen patterns of odd cleanup when running (N) overlapping test cases with namespaces names that are not completely unique. ",
        "createdAt" : "2017-11-06T21:38:15Z",
        "updatedAt" : "2017-11-16T13:46:56Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "8e729419-c914-44a3-ba39-3fb4b7e1577f",
        "parentId" : "6e654039-545f-42cb-bef0-40f448c6db90",
        "authorId" : "9f9a57b0-7aaa-42b5-bbc9-0b9f30efb633",
        "body" : "What can you suggest to do to avoid the problems here?",
        "createdAt" : "2017-11-10T15:05:22Z",
        "updatedAt" : "2017-11-16T13:46:56Z",
        "lastEditedBy" : "9f9a57b0-7aaa-42b5-bbc9-0b9f30efb633",
        "tags" : [
        ]
      }
    ],
    "commit" : "c77923d0fe3b80e1dc7512d8a9b63aec786e96dc",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +58,62 @@\t\tlimitRanges, err := f.ClientSet.CoreV1().LimitRanges(f.Namespace.Name).List(options)\n\t\tExpect(err).NotTo(HaveOccurred(), \"failed to query for limitRanges\")\n\t\tExpect(len(limitRanges.Items)).To(Equal(0))\n\t\toptions = metav1.ListOptions{\n\t\t\tLabelSelector:   selector.String(),"
  },
  {
    "id" : "70d0dac6-31d6-447b-920a-dcfeddf6c925",
    "prId" : 55065,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55065#pullrequestreview-75784096",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04eca33d-fa6b-46b0-91f8-9cbb14cca1f2",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "Update vs. Create based on previous value of list. ",
        "createdAt" : "2017-11-06T21:38:38Z",
        "updatedAt" : "2017-11-16T13:46:56Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "0f12e720-d799-4d76-b0ea-cbfb27b5360c",
        "parentId" : "04eca33d-fa6b-46b0-91f8-9cbb14cca1f2",
        "authorId" : "9f9a57b0-7aaa-42b5-bbc9-0b9f30efb633",
        "body" : "Should Update at line 140 use a new LimitRange structure, not the old with changed limit value?",
        "createdAt" : "2017-11-10T15:08:42Z",
        "updatedAt" : "2017-11-16T13:46:56Z",
        "lastEditedBy" : "9f9a57b0-7aaa-42b5-bbc9-0b9f30efb633",
        "tags" : [
        ]
      }
    ],
    "commit" : "c77923d0fe3b80e1dc7512d8a9b63aec786e96dc",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +67,71 @@\n\t\tBy(\"Submitting a LimitRange\")\n\t\tlimitRange, err = f.ClientSet.CoreV1().LimitRanges(f.Namespace.Name).Create(limitRange)\n\t\tExpect(err).NotTo(HaveOccurred())\n"
  },
  {
    "id" : "e07454a4-9764-4778-b444-c59a9de1a655",
    "prId" : 52523,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52523#pullrequestreview-74623033",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b7fd889-bb93-4788-893e-a6cafc3f5d30",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "maybe add pod.Name in the `By` description?  and below too...",
        "createdAt" : "2017-11-07T02:09:31Z",
        "updatedAt" : "2017-11-07T02:09:43Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "d379a9a3ff0ada418700682ed368eda8951d7024",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +151,155 @@\n\t\tdefer func() {\n\t\t\tBy(\"Removing pod\")\n\t\t\terr = f.ClientSet.CoreV1().Pods(f.Namespace.Name).Delete(pod.Name, nil)\n\t\t\tExpect(err).NotTo(HaveOccurred())"
  }
]