[
  {
    "id" : "ee2c042e-ec76-420f-abcb-7f711d2d13cc",
    "prId" : 22440,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1516b2f8-2116-419b-a63a-388e30448583",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Can you please add pod namespace too?\n",
        "createdAt" : "2016-03-04T08:56:44Z",
        "updatedAt" : "2016-03-04T08:56:44Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "40541eda-fef8-4602-8423-5e6fad60050d",
        "parentId" : "1516b2f8-2116-419b-a63a-388e30448583",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "never mind\n",
        "createdAt" : "2016-03-04T08:58:29Z",
        "updatedAt" : "2016-03-04T08:58:29Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f3c4905190f0048515a9cbd4dbf82cddd72e77d",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +420,424 @@\t}\n\tfor _, p := range podList.Items {\n\t\tLogf(\"%v from %v started at %v (%d container statuses recorded)\", p.Name, p.Namespace, p.Status.StartTime, len(p.Status.ContainerStatuses))\n\t\tfor _, c := range p.Status.ContainerStatuses {\n\t\t\tLogf(\"\\tContainer %v ready: %v, restart count %v\","
  },
  {
    "id" : "36c02880-c226-4bbb-900a-053e142bac53",
    "prId" : 18486,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4ff37d2-8f2f-4220-8165-e78977393e30",
        "parentId" : null,
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Ah..thanks for the fix!\n",
        "createdAt" : "2015-12-10T01:32:28Z",
        "updatedAt" : "2015-12-15T01:48:23Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "06bf6240-c932-4ac5-a71a-2d4ee2b4ea81",
        "parentId" : "b4ff37d2-8f2f-4220-8165-e78977393e30",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Uh...I included this fix in my other PR with the expectation that this PR would land first, but mine got merged first :-( Sorry and could you rebase?\n",
        "createdAt" : "2015-12-15T01:33:38Z",
        "updatedAt" : "2015-12-15T01:48:23Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e6ef04aeb7d4df532166a7e2906adf7f9bac927",
    "line" : null,
    "diffHunk" : "@@ -1,1 +697,701 @@\tr.collectors = make(map[string]*resourceCollector, 0)\n\tfor _, node := range nodes.Items {\n\t\tcollector := newResourceCollector(r.client, node.Name, r.containers, r.pollingInterval)\n\t\tr.collectors[node.Name] = collector\n\t\tcollector.Start()"
  },
  {
    "id" : "4e67abe3-fd58-4485-beff-c8b92f80818c",
    "prId" : 16505,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca870458-3c2d-4df8-ba16-c87005861c4d",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "What is expectMissingContainers?\n",
        "createdAt" : "2015-10-30T10:10:14Z",
        "updatedAt" : "2015-11-02T12:35:59Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "5bf23dd8-889e-44fe-81df-f3e2ef6a6951",
        "parentId" : "ca870458-3c2d-4df8-ba16-c87005861c4d",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Added a comment.\n",
        "createdAt" : "2015-11-02T10:02:08Z",
        "updatedAt" : "2015-11-02T12:35:59Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "cfe391d4eed271de16c30ea40ff24c345d03b0c1",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +238,242 @@\tcpuInterval time.Duration,\n\tcontainerNames func() []string,\n\texpectMissingContainers bool,\n) (resourceUsagePerContainer, error) {\n\tnumStats := int(float64(cpuInterval.Seconds()) / cadvisorStatsPollingIntervalInSeconds)"
  },
  {
    "id" : "fd1e9c63-7689-41a0-a552-689f04c3d851",
    "prId" : 16505,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e16fad57-00ea-4f39-9453-514988f5f840",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "This assumes that there is at least one element in the map - what if it is empty?\n",
        "createdAt" : "2015-10-30T10:29:50Z",
        "updatedAt" : "2015-11-02T12:35:59Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "c0999763-a98c-4a92-b38e-0612e6e7f654",
        "parentId" : "e16fad57-00ea-4f39-9453-514988f5f840",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Added a check - though passing empty percentile slice is wrong.\n",
        "createdAt" : "2015-11-02T10:09:38Z",
        "updatedAt" : "2015-11-02T12:35:59Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "cfe391d4eed271de16c30ea40ff24c345d03b0c1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +449,453 @@\tstats := computePercentiles(g.usageTimeseries, percentiles)\n\tsortedKeys := []string{}\n\tfor name := range stats[percentiles[0]] {\n\t\tsortedKeys = append(sortedKeys, name)\n\t}"
  },
  {
    "id" : "c09e874d-e378-42e4-9097-dd89882bc855",
    "prId" : 16505,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81d0ec0a-c2ce-4e11-8b23-c6a736ae142e",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "This is ridiculous :)\nCan we use float64 instead - then we will avoid writing this.\n",
        "createdAt" : "2015-10-30T10:35:20Z",
        "updatedAt" : "2015-11-02T12:35:59Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "ed3b3ba6-3cee-4bbe-8439-b3a2334b7d8d",
        "parentId" : "81d0ec0a-c2ce-4e11-8b23-c6a736ae142e",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "I'd rather do it in a followup PR - it needs dealing with the legacy code.\n",
        "createdAt" : "2015-11-02T10:28:59Z",
        "updatedAt" : "2015-11-02T12:35:59Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "cfe391d4eed271de16c30ea40ff24c345d03b0c1",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +356,360 @@func (a int64arr) Len() int           { return len(a) }\nfunc (a int64arr) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }\nfunc (a int64arr) Less(i, j int) bool { return a[i] < a[j] }\n\ntype usageDataPerContainer struct {"
  },
  {
    "id" : "c5a67f4b-0800-4b03-9fc6-fda358ab3300",
    "prId" : 14453,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d812ba5-2040-4038-9974-73fb3eee2199",
        "parentId" : null,
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "nit: the mutex can be embedded into the struct.\n",
        "createdAt" : "2015-09-24T22:50:47Z",
        "updatedAt" : "2015-09-24T22:50:47Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      },
      {
        "id" : "063d3a74-8da3-4546-8031-7c3573250fbd",
        "parentId" : "1d812ba5-2040-4038-9974-73fb3eee2199",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "I don't like exposing Lock/Unlock methods to the callers as it may lead to misuse :)\n",
        "createdAt" : "2015-09-24T22:56:20Z",
        "updatedAt" : "2015-09-24T22:56:20Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "1f604fc8-53a8-49d7-b465-fb21c34a4f74",
        "parentId" : "1d812ba5-2040-4038-9974-73fb3eee2199",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "Fair point. \n",
        "createdAt" : "2015-09-25T01:13:48Z",
        "updatedAt" : "2015-09-25T01:13:48Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b8244505c0487ea76a21b6c837b9820aedf2169",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +348,352 @@// maxEntriesPerContainer for each container.\ntype resourceCollector struct {\n\tlock            sync.RWMutex\n\tnode            string\n\tcontainers      []string"
  },
  {
    "id" : "3ba06b69-6130-4546-af71-a55f01ff7b4a",
    "prId" : 11074,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09c47eec-8d4d-4707-bc54-651cbea0a287",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "IMO it's better to take a Name out of this struct, and create another type map[string(name)]resourceUsage.\n\nI'm also not sure if CPUIntervalInSeconds is needed (my guess is that you want it to be able to correctly compute average, but I'm not sure it's an important use case), but this is just an opinion - don't change it, if you fell otherwise.\n",
        "createdAt" : "2015-07-16T12:45:52Z",
        "updatedAt" : "2015-07-20T21:41:48Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "4281796b-7e34-4f6d-9b9c-98424afc0a3f",
        "parentId" : "09c47eec-8d4d-4707-bc54-651cbea0a287",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Removed Name from struct.\n\nI am keeping the CPUIntervalInSeconds so that the information is more self-contained. It is not as useful if you don't know that interval the cpu usage was calculated from. Another reason for keeping this is the actual interval may vary quite a bit in some cases, and we can use this as a sanity check.\n",
        "createdAt" : "2015-07-17T18:10:58Z",
        "updatedAt" : "2015-07-20T21:41:48Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "3dd0ecd2-2c1f-40b2-b68c-7518527ec62a",
        "parentId" : "09c47eec-8d4d-4707-bc54-651cbea0a287",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Please push changes:)\n",
        "createdAt" : "2015-07-21T09:42:59Z",
        "updatedAt" : "2015-07-21T09:42:59Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      },
      {
        "id" : "c21f6902-7f4a-4055-8bb1-365c27907323",
        "parentId" : "09c47eec-8d4d-4707-bc54-651cbea0a287",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Push changes? ... I thought I did.\n",
        "createdAt" : "2015-07-21T17:17:34Z",
        "updatedAt" : "2015-07-21T17:17:34Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      }
    ],
    "commit" : "378a44a287ab9b82581b31a9de77a3b93e8aa75a",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +218,222 @@}\n\ntype containerResourceUsage struct {\n\tName                    string\n\tTimestamp               time.Time"
  },
  {
    "id" : "ab8c41ea-94a1-4dba-82e6-05e1206f8569",
    "prId" : 11074,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5989f2f3-e8ee-42ea-a7f5-3b653510a31b",
        "parentId" : null,
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "Maybe use Start and End times instead? You can grab Start: `time.Now().Add(-cpuInterval)` and no end to get everything in the last N time\n",
        "createdAt" : "2015-07-20T18:44:29Z",
        "updatedAt" : "2015-07-20T21:41:48Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      },
      {
        "id" : "951d6f70-5f68-4b26-95f1-1168c187c7b0",
        "parentId" : "5989f2f3-e8ee-42ea-a7f5-3b653510a31b",
        "authorId" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "body" : "Since the client/test is usually running on another machine, clock skew (or simply inconsistent clocks) would affect the StartTime. IMO, StartTime would be more useful in the case where more than one request is sent (and we can tracked the timestamps recorded in previous stats).\n\nAnother way to calculate a more accurate interval is to retrieve all 120 stats, scan the timestamps, and get the expected interval (which may not always succeed). This seems a bit more complicated than what this one-time resource usage PR intends to achieve. I would implement this if more accuracy is required (but again, my followup PR does periodic polling for this purpose).\n",
        "createdAt" : "2015-07-20T21:41:16Z",
        "updatedAt" : "2015-07-20T21:41:48Z",
        "lastEditedBy" : "1bd2d65a-7c93-4c22-b408-c7794d037dc5",
        "tags" : [
        ]
      },
      {
        "id" : "b6aaa9fa-6f31-4e27-9493-247964733949",
        "parentId" : "5989f2f3-e8ee-42ea-a7f5-3b653510a31b",
        "authorId" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "body" : "SGTM\n",
        "createdAt" : "2015-07-20T21:50:50Z",
        "updatedAt" : "2015-07-20T21:50:50Z",
        "lastEditedBy" : "b7abca6a-d6be-4008-a014-3b5ca0e90529",
        "tags" : [
        ]
      }
    ],
    "commit" : "378a44a287ab9b82581b31a9de77a3b93e8aa75a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +246,250 @@// the stats points in containerResourceUsage.CPUInterval.\nfunc getOneTimeResourceUsageOnNode(c *client.Client, nodeName string, cpuInterval time.Duration) (map[string]*containerResourceUsage, error) {\n\tnumStats := int(float64(cpuInterval.Seconds()) / cadvisorStatsPollingIntervalInSeconds)\n\tif numStats < 2 || numStats > maxNumStatsToRequest {\n\t\treturn nil, fmt.Errorf(\"numStats needs to be > 1 and < %d\", maxNumStatsToRequest)"
  },
  {
    "id" : "b3e88bb8-fbf4-450c-890a-fb2ac10d2e7c",
    "prId" : 10362,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cfbaa8a4-7f83-4783-b249-6acffdf7a98d",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "hm I thought the kubelet port was https now?\n",
        "createdAt" : "2015-06-25T20:34:38Z",
        "updatedAt" : "2015-06-25T20:34:38Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8c84a693-7db8-4892-80e9-a9dc0a7baf49",
        "parentId" : "cfbaa8a4-7f83-4783-b249-6acffdf7a98d",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Hm, it seems to work, so I guess not in integration.\n",
        "createdAt" : "2015-06-25T20:38:39Z",
        "updatedAt" : "2015-06-25T20:38:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a4d27777-cb3e-4915-8991-f8c4dd811da4",
        "parentId" : "cfbaa8a4-7f83-4783-b249-6acffdf7a98d",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Yeah, it is otherwise\n",
        "createdAt" : "2015-06-25T20:41:48Z",
        "updatedAt" : "2015-06-25T20:41:48Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "cca4b720e57ea03a8eb3648333052a92fcf37f50",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +190,194 @@// Currently only used in integration tests.\nfunc getKubeletMetricsThroughNode(nodeName string) (string, error) {\n\tresp, err := http.Get(fmt.Sprintf(\"http://%v/metrics\", nodeName))\n\tif err != nil {\n\t\treturn \"\", err"
  },
  {
    "id" : "c341c560-0586-41f3-ae88-cce15ec752ab",
    "prId" : 10329,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a597b11-6b6b-452c-96f7-358e0de3ad0b",
        "parentId" : null,
        "authorId" : null,
        "body" : "nit: node doesn't seem like the right variable name here. nodeName?  I don't feel terribly strongly about this one.\n",
        "createdAt" : "2015-06-29T21:12:50Z",
        "updatedAt" : "2015-07-05T20:44:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "7bc32b5a4766dc89c1b122fd3e2a531b866fba1c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +174,178 @@\n// Performs a get on a node proxy endpoint given the nodename and rest client.\nfunc nodeProxyRequest(c *client.Client, node, endpoint string) client.Result {\n\treturn c.Get().\n\t\tPrefix(\"proxy\")."
  },
  {
    "id" : "d98143db-f93b-468c-849b-b81cb6e9869e",
    "prId" : 10329,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a28f95d6-faac-4647-b5ca-18bd033fcc01",
        "parentId" : null,
        "authorId" : null,
        "body" : "As per previous comment.  nodeName?\n",
        "createdAt" : "2015-06-29T21:13:41Z",
        "updatedAt" : "2015-07-05T20:44:32Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "7bc32b5a4766dc89c1b122fd3e2a531b866fba1c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +185,189 @@// Retrieve metrics from the kubelet server of the given node.\nfunc getKubeletMetricsThroughProxy(c *client.Client, node string) (string, error) {\n\tmetric, err := nodeProxyRequest(c, node, \"metrics\").Raw()\n\tif err != nil {\n\t\treturn \"\", err"
  },
  {
    "id" : "76bfd70d-4040-440d-8038-e9f61f5af340",
    "prId" : 10313,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aae3685b-764b-46c7-a4f7-bc60e48259e0",
        "parentId" : null,
        "authorId" : null,
        "body" : "Nice factorization - thanks for this.\n",
        "createdAt" : "2015-06-26T00:38:36Z",
        "updatedAt" : "2015-07-01T23:25:08Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "a10a6a296e4efa90483febce5f6147b620e84e7b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +174,178 @@\n// Performs a get on a node proxy endpoint given the nodename and rest client.\nfunc nodeProxyRequest(c *client.Client, node, endpoint string) client.Result {\n\treturn c.Get().\n\t\tPrefix(\"proxy\")."
  },
  {
    "id" : "215e066f-c590-48c8-90ae-9f579d639949",
    "prId" : 9523,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9af4f85b-7575-4ccb-96fc-50385b766736",
        "parentId" : null,
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "Please describe a format you're parsing, to make it easier to debug when Prometheus output will change.\n",
        "createdAt" : "2015-06-15T11:55:37Z",
        "updatedAt" : "2015-06-16T16:50:59Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "831d7a36d01fed071ac9eef00b61fb22421a6ac8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +61,65 @@\t\t// A kubelet stats line starts with the KubeletSubsystem marker, followed by a stat name, followed by fields\n\t\t// that vary by stat described on a case by case basis below.\n\t\t// TODO: String parsing is such a hack, but getting our rest client/proxy to cooperate with prometheus\n\t\t// client is weird, we should eventually invest some time in doing this the right way.\n\t\tif !strings.HasPrefix(line, fmt.Sprintf(\"%v_\", metrics.KubeletSubsystem)) {"
  }
]