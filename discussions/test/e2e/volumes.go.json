[
  {
    "id" : "a1a5eb9b-9985-4d63-8140-bc35987dd681",
    "prId" : 43682,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43682#pullrequestreview-29881573",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b12d78c0-bb4a-4a64-b02f-e5790d35425e",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "do all of the volume tests need privileged containers? or only the ones tagged Feature?",
        "createdAt" : "2017-03-27T20:16:09Z",
        "updatedAt" : "2017-03-29T01:01:50Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "de1f03a7-a3a3-49d0-b30e-3362e5161714",
        "parentId" : "b12d78c0-bb4a-4a64-b02f-e5790d35425e",
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "The common func which creates the server pods for all in-tree plugins (startVolumeServer) sets privileged to true for all server pods, not just the ones I removed `[Feature:Volumes]` from. I have not tried to remove privileged to see if the mounts work. I believe there's a CAP that can be added to pods to obviate the need for privileged, but feel that a security change is outside the scope of this pr. The explanation of [Feature:], cited in this pr's description, does not mention privileged.",
        "createdAt" : "2017-03-27T21:54:30Z",
        "updatedAt" : "2017-03-29T01:01:50Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "c16ef020-2b36-4eba-bf10-3045696b34e4",
        "parentId" : "b12d78c0-bb4a-4a64-b02f-e5790d35425e",
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "I changed the common func a while ago to allow setting privileged to false.  So maybe as a future pr, it can be investigated if these pods can be run as unprivileged.",
        "createdAt" : "2017-03-30T00:37:55Z",
        "updatedAt" : "2017-03-30T00:38:22Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "fa431dbf-e1fd-4f03-8913-38c89c158b48",
        "parentId" : "b12d78c0-bb4a-4a64-b02f-e5790d35425e",
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "@msau42 I don't see that change but maybe I missed it. It seems like adding a priv bool in `VolumeTestConfig` would be a flexible way of allowing the caller to decide if the server-pod should be privileged. Can you point me to the pr? Thanks.",
        "createdAt" : "2017-03-30T01:15:56Z",
        "updatedAt" : "2017-03-30T01:15:56Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a17c4c7f8b0b178df72f45f59c4208d91958cb5",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +382,386 @@}\n\n// These tests need privileged containers, which are disabled by default.\nvar _ = framework.KubeDescribe(\"Volumes [Volume]\", func() {\n\tf := framework.NewDefaultFramework(\"volume\")"
  },
  {
    "id" : "df8465a2-325a-4ac3-a4b7-199a72800565",
    "prId" : 43682,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43682#pullrequestreview-29539678",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c85f7b8f-cb19-4bed-afdf-f94a7dc0dc79",
        "parentId" : null,
        "authorId" : "c13045f9-cfc0-48e5-80df-ee48ddaa9fdc",
        "body" : "Looks good for this PR.\r\n\r\nQuestion:\r\nAre we allowed to add custom tag, lets say \"Feature: vSphereVolumes\", to filter provider specific specs.\r\nWe have bunch of vSphere tests, which are not applicable to other providers, and they are too specific to vSphere.\r\nWe run nightly job on internal server, and it has become difficult to keep tracking and updating `--ginkgo.focus ` filters.  If we have provider specific custom tag, we are always sure that we are not missing any provider specific tests.\r\n\r\nCC: @tusharnt\r\n\r\n\r\n",
        "createdAt" : "2017-03-28T18:31:05Z",
        "updatedAt" : "2017-03-29T01:01:50Z",
        "lastEditedBy" : "c13045f9-cfc0-48e5-80df-ee48ddaa9fdc",
        "tags" : [
        ]
      },
      {
        "id" : "3233292a-0752-481e-b9ce-452aa96acd7e",
        "parentId" : "c85f7b8f-cb19-4bed-afdf-f94a7dc0dc79",
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "@divyenpatel As far as I understand, the string after the \":\" is ignored by CI testing, so yes.\r\nRelated to this, in one of my reviews of a vsphere e2e test pr, I asked you to remove the `[Feature:Volumes]` because it was only used in _volumes.go_. Since then I have learned more about this tag. It is ignored for pr merging and it causes a seprate test suite to be used for release testing (not ignored there).",
        "createdAt" : "2017-03-28T18:43:10Z",
        "updatedAt" : "2017-03-29T01:01:50Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a17c4c7f8b0b178df72f45f59c4208d91958cb5",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +934,938 @@\t////////////////////////////////////////////////////////////////////////\n\n\tframework.KubeDescribe(\"vsphere [Feature:Volumes]\", func() {\n\t\tIt(\"should be mountable\", func() {\n\t\t\tframework.SkipUnlessProviderIs(\"vsphere\")"
  },
  {
    "id" : "e01ddc65-04dc-41fc-aee5-45f9d0af61a1",
    "prId" : 33837,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33837#pullrequestreview-2690250",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45c8c8d5-5454-4cd9-8f6c-12fbd7ad6399",
        "parentId" : null,
        "authorId" : "c532215f-ed76-4a19-b066-8676d269eaf1",
        "body" : "Why not put this in a separate file? `configmap.go` or something.\n",
        "createdAt" : "2016-09-30T16:53:51Z",
        "updatedAt" : "2016-12-19T09:40:12Z",
        "lastEditedBy" : "c532215f-ed76-4a19-b066-8676d269eaf1",
        "tags" : [
        ]
      },
      {
        "id" : "8b087958-3b85-4667-8849-ea68e290db35",
        "parentId" : "45c8c8d5-5454-4cd9-8f6c-12fbd7ad6399",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "`volumes.go` test all volumes and there already is a nice framework to write new tests easily.\n",
        "createdAt" : "2016-10-04T11:07:27Z",
        "updatedAt" : "2016-12-19T09:40:12Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "396e2bc58155295ab7fa638c8bda57c3f7402931",
    "line" : 380,
    "diffHunk" : "@@ -1,1 +834,838 @@\t////////////////////////////////////////////////////////////////////////\n\n\tframework.KubeDescribe(\"ConfigMap\", func() {\n\t\tIt(\"should be mountable\", func() {\n\t\t\tconfig := VolumeTestConfig{"
  },
  {
    "id" : "6a465cf1-ce38-4aa9-93b5-a4c9e151b635",
    "prId" : 24098,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1e8318c-91ef-4243-b2bc-c70640eed92f",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "20 seconds seems pretty arbitrary there are wait.Until & wait.poll which may be better here.   \n",
        "createdAt" : "2016-04-13T01:50:51Z",
        "updatedAt" : "2016-04-15T22:14:35Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      },
      {
        "id" : "bf1af7f7-a68f-48a5-8213-3811c069de2c",
        "parentId" : "e1e8318c-91ef-4243-b2bc-c70640eed92f",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "Magic waits are kind of standard unfortunately in this entire test.  this patch adds another necessary magic wait but I agree with Tim that ideally we should refactor all of the waits to be declarative and use a sidecar pod that monitors client shutdown \n",
        "createdAt" : "2016-04-13T02:39:04Z",
        "updatedAt" : "2016-04-15T22:14:35Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "39cf1bea-917c-4c7d-a073-9c40b6d02616",
        "parentId" : "e1e8318c-91ef-4243-b2bc-c70640eed92f",
        "authorId" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "body" : "yes that magic timeout is everywhere and adjusted. See #24185 \n",
        "createdAt" : "2016-04-13T12:35:03Z",
        "updatedAt" : "2016-04-15T22:14:35Z",
        "lastEditedBy" : "a7f673a6-4b23-4df6-aa10-f123fa9dcd5f",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee9ed4dd7f109b6be27c8d42106097fd65f521cd",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +180,184 @@\t\t// Prevent umount errors by making sure making sure the client pod exits cleanly *before* the volume server pod exits.\n\t\tBy(\"sleeping a bit so client can stop and unmount\")\n\t\ttime.Sleep(20 * time.Second)\n\n\t\terr = podClient.Delete(config.prefix+\"-server\", nil)"
  },
  {
    "id" : "2a0c407a-a536-448f-b49a-3f06c2108fa6",
    "prId" : 19612,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b99b2e62-32f5-47ac-b20c-c0d27ea03fe3",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Why was this check added? I don't see any change, that would lead to `config.serverImage == \"\"`\n",
        "createdAt" : "2016-01-14T08:47:41Z",
        "updatedAt" : "2016-01-14T08:47:41Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "b30683b7-8e6c-4d07-a460-913c33fce97d",
        "parentId" : "b99b2e62-32f5-47ac-b20c-c0d27ea03fe3",
        "authorId" : null,
        "body" : "> Why was this check added?\n\nThe cinder test does not create a server pod. It then later fails while trying to delete the server pod. This check fixes that\n",
        "createdAt" : "2016-01-14T15:04:11Z",
        "updatedAt" : "2016-01-14T15:04:11Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "94427a57-4aa5-4b63-894d-b4f8f7fb95a4",
        "parentId" : "b99b2e62-32f5-47ac-b20c-c0d27ea03fe3",
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "Add a comment explaining the cinder situation\n",
        "createdAt" : "2016-01-29T05:12:13Z",
        "updatedAt" : "2016-01-29T05:12:13Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7be0a2a362b9ae1f69b7783b65b95decef0c6c4",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +170,174 @@\t}\n\n\tif config.serverImage != \"\" {\n\t\terr = podClient.Delete(config.prefix+\"-server\", nil)\n\t\tif err != nil {"
  },
  {
    "id" : "a13c4dca-03bd-47b4-8e83-f9ee28eaffed",
    "prId" : 19612,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aba2492b-f195-408b-97e4-871af76007fa",
        "parentId" : null,
        "authorId" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "body" : "I'm wondering if this test should be tagged with SELinux.  It's debatable; I don't think I would normally want to run this with 'stuff that exercises core SELinux functionality in kube', but I definitely want to test it when I run absolutely everything that touches SELinux.\n",
        "createdAt" : "2016-01-29T05:11:05Z",
        "updatedAt" : "2016-01-29T05:11:05Z",
        "lastEditedBy" : "498aade9-b8f0-4e29-8055-89afa6f5fcc8",
        "tags" : [
        ]
      }
    ],
    "commit" : "c7be0a2a362b9ae1f69b7783b65b95decef0c6c4",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +305,309 @@\t\t\t\t},\n\t\t\t},\n\t\t\tSecurityContext: &api.PodSecurityContext{\n\t\t\t\tSELinuxOptions: &api.SELinuxOptions{\n\t\t\t\t\tLevel: \"s0:c0,c1\","
  },
  {
    "id" : "4dd13750-9467-4e3e-860c-47516d91d162",
    "prId" : 16269,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d8fd7e4-1394-43d8-afaf-9d3ee32f24f3",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Please remove it - this is not used now and you can use your new flag instead now.\n",
        "createdAt" : "2015-10-26T14:42:39Z",
        "updatedAt" : "2015-10-27T08:38:35Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "4c6eb6a3-e474-46a4-ba12-3cc6d0fe505c",
        "parentId" : "5d8fd7e4-1394-43d8-afaf-9d3ee32f24f3",
        "authorId" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "body" : "It's used for volume cleanup. See e.g. L294.\n",
        "createdAt" : "2015-10-26T14:52:55Z",
        "updatedAt" : "2015-10-27T08:38:35Z",
        "lastEditedBy" : "3c437914-616b-4cfb-88a0-28dc812ff2b2",
        "tags" : [
        ]
      }
    ],
    "commit" : "e638a415d417c83321bcdd26c7231931a3c796cb",
    "line" : null,
    "diffHunk" : "@@ -1,1 +224,228 @@\t// If 'false', the test won't clear its volumes upon completion. Useful for debugging,\n\t// note that namespace deletion is handled by delete-namespace flag\n\tclean := true\n\t// filled in BeforeEach\n\tvar c *client.Client"
  },
  {
    "id" : "fcc3b81c-656e-4011-9301-2cd5860978b1",
    "prId" : 13644,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03715405-a0b5-43ca-9bb8-1963190947d7",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "should this depend on `clean` as well?\n",
        "createdAt" : "2015-10-07T22:51:48Z",
        "updatedAt" : "2015-10-30T12:48:41Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "4e44f7fa-b28c-4451-b75e-2da1d56bdcf0",
        "parentId" : "03715405-a0b5-43ca-9bb8-1963190947d7",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "That's a question... I have 'clean' mostly for debugging - look at the pods, PVs etc. if something goes wrong. I can delete these Kubernetes object easily - e.g. by removing the namespace. Now, if there is a Cinder volume left over, it's not _that_ easy to find it and delete it manually. Especially if there is lot of volumes in your OpenStack.\n",
        "createdAt" : "2015-10-08T11:20:49Z",
        "updatedAt" : "2015-10-30T12:48:41Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0ab8a27cbc902c7b54ff38ca3ab3a0c8d49dc1c",
    "line" : 176,
    "diffHunk" : "@@ -1,1 +672,676 @@\t\t\t\t// Ignore any cleanup errors, there is not much we can do about\n\t\t\t\t// them. They were already logged.\n\t\t\t\tdeleteCinderVolume(volumeName)\n\t\t\t}()\n"
  },
  {
    "id" : "bc9ab778-a5c4-4526-8678-cc43ce75d256",
    "prId" : 13644,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e20232d-b31b-4997-97d2-fdf2e5a0bfd3",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "should the test fail if volume cleanup fails?\n",
        "createdAt" : "2015-10-27T22:36:35Z",
        "updatedAt" : "2015-10-30T12:48:41Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "8f89a7e0-f54f-42ce-b171-8d92aa7fca63",
        "parentId" : "4e20232d-b31b-4997-97d2-fdf2e5a0bfd3",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "This cleanup runs also in case the test failed before. An error here should overwrite the former error, making debugging harder. Is there an easy check that there was an error before?\n",
        "createdAt" : "2015-10-29T13:11:19Z",
        "updatedAt" : "2015-10-30T12:48:41Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "4bf1794d-8af2-487b-9f99-c054446a0197",
        "parentId" : "4e20232d-b31b-4997-97d2-fdf2e5a0bfd3",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "have you verified this is actually the behavior that ginkgo has?\n\nin any case, it looks like maybe calling `GinkgoT().Failed()` may work? I haven't tried it, though.\n",
        "createdAt" : "2015-10-29T17:43:37Z",
        "updatedAt" : "2015-10-30T12:48:41Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "80613de5-79ff-487f-a23c-1cec18325891",
        "parentId" : "4e20232d-b31b-4997-97d2-fdf2e5a0bfd3",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "I tried today and quite contrary to my assumption, second test failure is not logged at all:\n\n``` go\nsomeTest() {\n    defer func() {\n        glog.Infof(\"cleanup here!\")\n        err := fmt.Errorf(\"This is the second error\")\n        expectNoError(err, \"Got an error: %v\", err)\n    }()\n    err := fmt.Errorf(\"This is the first error\")\n    expectNoError(err, \"Got an error: %v\", err)\n}\n```\n\nIn the log I see:\n\n```\n...\ncleanup here!\n....\n\n    Got an error: This is the first error\n    Expected error:\n        <*errors.errorString | 0xc82045c3b0>: {\n            s: \"This is the first error\",\n        }\n        This is the first error\n    not to have occurred\n```\n\nI'm adding patch with some extra logs _inside_ `volumeTestCleanup()`.\n",
        "createdAt" : "2015-10-30T12:49:17Z",
        "updatedAt" : "2015-10-30T12:49:17Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0ab8a27cbc902c7b54ff38ca3ab3a0c8d49dc1c",
    "line" : 202,
    "diffHunk" : "@@ -1,1 +698,702 @@\t\t\t\tif clean {\n\t\t\t\t\tLogf(\"Running volumeTestCleanup\")\n\t\t\t\t\tvolumeTestCleanup(c, config)\n\t\t\t\t}\n\t\t\t}()"
  },
  {
    "id" : "f89f9c69-07dc-416b-b64e-00f7803eb8bb",
    "prId" : 9301,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "433c24f5-6e69-46fd-9835-1af03c43d9da",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "We should be using latest.Version() at all these places rather than hardcoding \"v1beta3\" or \"v1\".\n",
        "createdAt" : "2015-06-05T11:25:07Z",
        "updatedAt" : "2015-06-05T11:25:07Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "cd1b5f7b-b5c7-4f78-ac9c-2db2065558b1",
        "parentId" : "433c24f5-6e69-46fd-9835-1af03c43d9da",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Yes. I also mentioned that here: https://github.com/GoogleCloudPlatform/kubernetes/pull/9301/files#r31786519\n\nI'm fine for that to be a subsequent PR.\n",
        "createdAt" : "2015-06-05T17:49:18Z",
        "updatedAt" : "2015-06-05T17:49:18Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3664957b1c365e9d1c6e1cbd50590cfbd71cc52",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +80,84 @@\t\tTypeMeta: api.TypeMeta{\n\t\t\tKind:       \"Pod\",\n\t\t\tAPIVersion: \"v1\",\n\t\t},\n\t\tObjectMeta: api.ObjectMeta{"
  },
  {
    "id" : "5a9cc896-361c-4dc2-b6d8-7a885ecb06ec",
    "prId" : 7435,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0858dd0-d42a-45c5-a548-28df73cfc1c7",
        "parentId" : null,
        "authorId" : null,
        "body" : "nit: The use of both podClient and clientPod here is marginally confusing.  Perhaps just 'pod' for the latter?  \n",
        "createdAt" : "2015-05-14T22:15:04Z",
        "updatedAt" : "2015-05-25T10:04:03Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "20004e0c16e999a3a3d89bf72bf0a84d36ac38ef",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +135,139 @@\tpodClient := client.Pods(config.namespace)\n\n\tclientPod := &api.Pod{\n\t\tTypeMeta: api.TypeMeta{\n\t\t\tKind:       \"Pod\","
  },
  {
    "id" : "78515933-c37a-4203-b145-3776a28ea3d1",
    "prId" : 7435,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08a48116-9e7d-4428-8953-706ac123b750",
        "parentId" : null,
        "authorId" : null,
        "body" : "It would be good to factor the body of this into a separate function in this file, as it's repeated verbatim in the other test.\nOf course it's also repeated almost verbatim in may other test files, but we can fix that in a separate PR.\n",
        "createdAt" : "2015-05-14T22:30:06Z",
        "updatedAt" : "2015-05-25T10:04:03Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "6a943bdd-dd08-4bcc-a188-b16b59d26d17",
        "parentId" : "08a48116-9e7d-4428-8953-706ac123b750",
        "authorId" : null,
        "body" : "Actually, better still, just use a single BeforeEach() and AfterEach(), and nested Describe() clauses.  See:\nhttp://onsi.github.io/ginkgo/#organizing-specs-with-containers-describe-and-context\nfor an illustration.\n",
        "createdAt" : "2015-05-14T22:57:02Z",
        "updatedAt" : "2015-05-25T10:04:03Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "5c23952e-f677-4ae8-8320-85f31f96670d",
        "parentId" : "08a48116-9e7d-4428-8953-706ac123b750",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "I reworked whole Before/After each + the cleanup, it should be consistent now. Still there is some (small) code duplication.\n",
        "createdAt" : "2015-05-15T14:36:52Z",
        "updatedAt" : "2015-05-25T10:04:03Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "20004e0c16e999a3a3d89bf72bf0a84d36ac38ef",
    "line" : 202,
    "diffHunk" : "@@ -1,1 +200,204 @@\tvar namespace *api.Namespace\n\n\tBeforeEach(func() {\n\t\tvar err error\n\t\tc, err = loadClient()"
  },
  {
    "id" : "5931c41f-388b-4ba8-b079-2dbf7a9233a5",
    "prId" : 7435,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8665aaac-64aa-464b-b62a-f4b881405f11",
        "parentId" : null,
        "authorId" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "body" : "@saad-ali, @jsafrane, @childsb\nSo both the nfs and gluster tests still fail b/c tag is missing.  \n\n# docker pull gcr.io/google_containers/volume-nfs\nPulling repository gcr.io/google_containers/volume-nfs\nFATA[0001] Tag latest not found in repository gcr.io/google_containers/volume-nfs\n\n# docker pull gcr.io/google_containers/volume-nfs:0.1\nPulling repository gcr.io/google_containers/volume-nfs\n7faef5ba165a: Download complete \ne9e06b06e14c: Download complete \na82efea989f9: Download complete \n37bea4ee0c81: Download complete \n07f8e8c5e660: Download complete \na61fbd375433: Download complete \n36ed446fd761: Download complete \n5c06e7e161bd: Download complete \n087a9dde26b9: Download complete \n56da8d2b187a: Download complete \n8cb003e95f03: Download complete \n9570a95e2d95: Download complete \nStatus: Downloaded newer image for gcr.io/google_containers/volume-nfs:0.1\n",
        "createdAt" : "2015-05-28T14:22:43Z",
        "updatedAt" : "2015-05-28T14:22:43Z",
        "lastEditedBy" : "f81960f6-a033-4403-bebf-c8ebb484e444",
        "tags" : [
        ]
      }
    ],
    "commit" : "20004e0c16e999a3a3d89bf72bf0a84d36ac38ef",
    "line" : 231,
    "diffHunk" : "@@ -1,1 +229,233 @@\t\t\t\tnamespace:   namespace.Name,\n\t\t\t\tprefix:      \"nfs\",\n\t\t\t\tserverImage: \"gcr.io/google_containers/volume-nfs\",\n\t\t\t\tserverPorts: []int{2049},\n\t\t\t}"
  }
]