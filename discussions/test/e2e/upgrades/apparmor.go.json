[
  {
    "id" : "0cb31061-0c30-4969-8ab6-6a654d0113a3",
    "prId" : 80276,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80276#pullrequestreview-270965306",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5348c80-63bb-4259-a190-b0c4a38a89c6",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Master upgrades could result in pods on the master being restarted / stopped drained (that's certainly the case on some ansible based k8s deployment scripts I've seen, and any that depend on golden images).  It's possible this runs right into the ambiguity of defining what a master is, in which case the test probably has to assume the specified pod is not running on a master, which isn't unreasonable (except for single node clusters).",
        "createdAt" : "2019-07-19T21:57:35Z",
        "updatedAt" : "2019-07-19T21:57:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "fc962cd6-21b4-4446-87d3-c27349276ae7",
        "parentId" : "e5348c80-63bb-4259-a190-b0c4a38a89c6",
        "authorId" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "body" : "Right, I was assuming that the master would be tainted, but didn't think about the single node case. Do you have a suggestion for how to fix it (is there a reliable way to identify master nodes?). Without this check, I'm not sure this test makes a whole lot of sense (it's sort of just checking a box in either case).",
        "createdAt" : "2019-08-05T19:38:14Z",
        "updatedAt" : "2019-08-05T19:38:15Z",
        "lastEditedBy" : "9f030d50-62db-4b00-a28c-847709b74d97",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a01ce1afd74ccfe9741e09e996e6e6fbef4f1e5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +70,74 @@func (t *AppArmorUpgradeTest) Test(f *framework.Framework, done <-chan struct{}, upgrade UpgradeType) {\n\t<-done\n\tif upgrade == MasterUpgrade {\n\t\tt.verifyPodStillUp(f)\n\t}"
  }
]