[
  {
    "id" : "9fcac06b-b77c-4c6d-9ab5-de9201a8cb04",
    "prId" : 40177,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40177#pullrequestreview-18309876",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6461043b-3de4-4815-9400-c9f29a3a1ca6",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "Need to handle err != nil here.",
        "createdAt" : "2017-01-25T01:25:52Z",
        "updatedAt" : "2017-02-14T21:43:47Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "429918d73b18f1fbebabe4fe926fc34e6268ecfe",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +275,279 @@\t\t\t\tpvc = makePersistentVolumeClaim(ns)\n\t\t\t\tpvc = createPVC(c, ns, pvc)\n\t\t\t\terr = framework.WaitForPersistentVolumeClaimPhase(v1.ClaimBound, c, ns, pvc.Name, 2*time.Second, 60*time.Second)\n\t\t\t\tExpect(err).NotTo(HaveOccurred())\n"
  },
  {
    "id" : "212e13a6-4b4a-41e0-96aa-6d746457a30f",
    "prId" : 40177,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40177#pullrequestreview-18427926",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5eecdadd-e47b-45ba-bf6b-017274f0760e",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "L653-657: can you call `createClientPod` here?",
        "createdAt" : "2017-01-25T01:28:08Z",
        "updatedAt" : "2017-02-14T21:43:47Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "6bbe84a5-7fb8-493f-a8d8-7f48fcbf8656",
        "parentId" : "5eecdadd-e47b-45ba-bf6b-017274f0760e",
        "authorId" : "1530c754-7850-4e09-a79b-a6555e28f729",
        "body" : "no, but we can write a couple new functions to mirror the pattern of makeWritePod wrapping makePod.  Alternatively, we could use createClientPod then podExec to make a file on the volume",
        "createdAt" : "2017-01-25T15:43:51Z",
        "updatedAt" : "2017-02-14T21:43:47Z",
        "lastEditedBy" : "1530c754-7850-4e09-a79b-a6555e28f729",
        "tags" : [
        ]
      }
    ],
    "commit" : "429918d73b18f1fbebabe4fe926fc34e6268ecfe",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +264,268 @@\t\t\tIt(\"should test that a PV becomes Available and is clean after the PVC is deleted. [Volume][Serial][Flaky]\", func() {\n\t\t\t\tBy(\"Writing to the volume.\")\n\t\t\t\tpod := makeWritePod(ns, pvc.Name)\n\t\t\t\tpod, err := c.Core().Pods(ns).Create(pod)\n\t\t\t\tExpect(err).NotTo(HaveOccurred())"
  },
  {
    "id" : "48af608a-d7ea-4965-8458-e43589fa80d1",
    "prId" : 39547,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39547#pullrequestreview-16069479",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4816cc15-9b0c-4bc0-b21e-ab849d3b10bd",
        "parentId" : null,
        "authorId" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "body" : "If you run these tests serially, are they still flaky?",
        "createdAt" : "2017-01-10T19:15:07Z",
        "updatedAt" : "2017-01-10T19:16:49Z",
        "lastEditedBy" : "209ee091-cf29-4efa-8a1b-a98334ea3f9a",
        "tags" : [
        ]
      },
      {
        "id" : "5da8a7d1-a955-4363-8fb5-9fae2a2ba7fb",
        "parentId" : "4816cc15-9b0c-4bc0-b21e-ab849d3b10bd",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "I don't think there is a \"serial flaky\" tests suite. So AFAIK these will continue to run as part of Flaky. But these tests aren't just flaky, they're just broken ([consistently red](https://k8s-testgrid.appspot.com/google-gce#gce-flaky)). That should be addressed in a follow up.",
        "createdAt" : "2017-01-11T05:21:56Z",
        "updatedAt" : "2017-01-11T05:22:07Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "f85ef3b83d478ddaffc52da8e7813e7ada08eb28",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +695,699 @@\t\t// Attach a persistent disk to a pod using a PVC.\n\t\t// Delete the PVC and then the pod.  Expect the pod to succeed in unmounting and detaching PD on delete.\n\t\tIt(\"should test that deleting a PVC before the pod does not cause pod deletion to fail on PD detach [Volume][Serial][Flaky]\", func() {\n\t\t\tBy(\"Creating the PV and PVC\")\n\t\t\tpv, pvc = createPVPVC(c, pvConfig, ns, false)"
  },
  {
    "id" : "7505479d-a0ee-4729-95ee-8b81ff9f4c55",
    "prId" : 34353,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34353#pullrequestreview-3376305",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa14110e-29f3-4439-9a9b-d8c8fea181a6",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "Why is pvConfig set here and in KubeDescribe() above? It appears to be the same definition.\n",
        "createdAt" : "2016-10-07T20:47:30Z",
        "updatedAt" : "2016-12-16T18:08:02Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "8cdce268-43e8-44c4-b792-e14ad2fc8098",
        "parentId" : "aa14110e-29f3-4439-9a9b-d8c8fea181a6",
        "authorId" : "1530c754-7850-4e09-a79b-a6555e28f729",
        "body" : "missed that after the rebase, fixing that\n",
        "createdAt" : "2016-10-07T20:48:52Z",
        "updatedAt" : "2016-12-16T18:08:02Z",
        "lastEditedBy" : "1530c754-7850-4e09-a79b-a6555e28f729",
        "tags" : [
        ]
      }
    ],
    "commit" : "e095e1120b64a5da927d514bd3bc92a102ad91d1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +524,528 @@\t\t\t\tframework.Logf(\"NFS server IP address: %v\", serverIP)\n\t\t\t}\n\t\t\tpvConfig = persistentVolumeConfig{\n\t\t\t\tnamePrefix: \"nfs-\",\n\t\t\t\tpvSource: v1.PersistentVolumeSource{"
  },
  {
    "id" : "80d15080-40d7-4115-bd9d-cd1fa34a3797",
    "prId" : 34353,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34353#pullrequestreview-3376971",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "194f460c-b8f6-4184-bb0d-804740944b6a",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "L780: _GenerateName: \"nfs-\",_\nSo even when using PDs (rather than nfs) the pv's name begins with \"nfs-\". It may be better to define the generated pv name prefix in the pvConfig struct? Or figure out the prefix somehow based on pvConfig.pvsource?\n",
        "createdAt" : "2016-10-07T20:52:13Z",
        "updatedAt" : "2016-12-16T18:08:02Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "c6af6f1b-c521-45b2-8a20-652a06cab0f2",
        "parentId" : "194f460c-b8f6-4184-bb0d-804740944b6a",
        "authorId" : "1530c754-7850-4e09-a79b-a6555e28f729",
        "body" : "agreed, will add/integrate that\n",
        "createdAt" : "2016-10-07T20:53:18Z",
        "updatedAt" : "2016-12-16T18:08:02Z",
        "lastEditedBy" : "1530c754-7850-4e09-a79b-a6555e28f729",
        "tags" : [
        ]
      }
    ],
    "commit" : "e095e1120b64a5da927d514bd3bc92a102ad91d1",
    "line" : 629,
    "diffHunk" : "@@ -1,1 +774,778 @@\t\t}\n\t}\n\n\treturn &v1.PersistentVolume{\n\t\tObjectMeta: v1.ObjectMeta{"
  },
  {
    "id" : "c9fce9b8-8cca-45f3-9064-cd1f15f125b0",
    "prId" : 34353,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34353#pullrequestreview-4136684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e760c3cc-58ab-4f34-876a-24c08ae3e3b4",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "I think checking len here is ok (I'm pretty sure the closure captures it) but it might be cleaner if the len check was moved to deletePDWithRetry() ?\n",
        "createdAt" : "2016-10-13T18:09:07Z",
        "updatedAt" : "2016-12-16T18:08:02Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "e7d5180d-8a5c-4b55-bdb6-60594246b1d9",
        "parentId" : "e760c3cc-58ab-4f34-876a-24c08ae3e3b4",
        "authorId" : "1530c754-7850-4e09-a79b-a6555e28f729",
        "body" : "Sorry, I'm not following your meaning here.  What do you mean by \"moved to deletePDwithRetry()\"?\n",
        "createdAt" : "2016-10-13T18:21:18Z",
        "updatedAt" : "2016-12-16T18:08:02Z",
        "lastEditedBy" : "1530c754-7850-4e09-a79b-a6555e28f729",
        "tags" : [
        ]
      },
      {
        "id" : "10f30b12-b9b3-429a-81d0-4c0e618b7b5d",
        "parentId" : "e760c3cc-58ab-4f34-876a-24c08ae3e3b4",
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "Oh, I just meant to unconditionally call deletePDWithRetry() in AddCleanupAction(), and move the len check to deletePDWithRetry. This is really a super minor style nit...\n",
        "createdAt" : "2016-10-13T18:31:32Z",
        "updatedAt" : "2016-12-16T18:08:02Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e095e1120b64a5da927d514bd3bc92a102ad91d1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +688,692 @@\n\t\tAddCleanupAction(func() {\n\t\t\tif len(diskName) > 0 {\n\t\t\t\tdeletePDWithRetry(diskName)\n\t\t\t}"
  },
  {
    "id" : "fe9ea82e-f710-4e85-a376-f0bd12fe7966",
    "prId" : 34353,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34353#pullrequestreview-6314600",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c523e37-8e62-48c3-90c3-83ee06f0dddb",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "The check for `c != nil and len(ns) > 0` is already done by the callers of this func; other than when directly called by the first _It()_ in the GCE framework. Maybe it's better to be safe than sorry and there is not really a performance concern for this test, so just a nit comment.\n",
        "createdAt" : "2016-10-28T20:32:45Z",
        "updatedAt" : "2016-12-16T18:08:02Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e095e1120b64a5da927d514bd3bc92a102ad91d1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +111,115 @@// Delete the Claim\nfunc deletePersistentVolumeClaim(c clientset.Interface, pvcName string, ns string) {\n\tif c != nil && len(pvcName) > 0 {\n\t\tframework.Logf(\"Deleting PersistentVolumeClaim %v\", pvcName)\n\t\terr := c.Core().PersistentVolumeClaims(ns).Delete(pvcName, nil)"
  },
  {
    "id" : "c83003f6-dfb8-4717-acd9-8547989154a2",
    "prId" : 34353,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/34353#pullrequestreview-9330387",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59e564b7-3a70-4ad5-bc30-72ae55dd8f87",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "shouldn't be '-c' in Arguments one line below?\n",
        "createdAt" : "2016-11-14T15:21:26Z",
        "updatedAt" : "2016-12-16T18:08:02Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "92a60ca9-b16e-42fb-a987-598b3dc927d6",
        "parentId" : "59e564b7-3a70-4ad5-bc30-72ae55dd8f87",
        "authorId" : "1530c754-7850-4e09-a79b-a6555e28f729",
        "body" : "@jsafrane It works either way.  My reasoning was that `/bin/sh -c` worked as the `Command` which reads over the `Arg` string (containing a line or block of bash commands).  Is it recommended that `-c` go into `Args`?\n",
        "createdAt" : "2016-11-16T18:55:06Z",
        "updatedAt" : "2016-12-16T18:08:02Z",
        "lastEditedBy" : "1530c754-7850-4e09-a79b-a6555e28f729",
        "tags" : [
        ]
      },
      {
        "id" : "7297501c-3cf9-49e8-9a18-85462aa14575",
        "parentId" : "59e564b7-3a70-4ad5-bc30-72ae55dd8f87",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "There is no strict rule where '-c' really belongs, to me `Command` is the executable (bash) and `Args` are its arguments. Anyway, it's just a nit.\n",
        "createdAt" : "2016-11-18T11:37:10Z",
        "updatedAt" : "2016-12-16T18:08:02Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "937fc642-f3cd-4a11-9d58-ffe70251f4a4",
        "parentId" : "59e564b7-3a70-4ad5-bc30-72ae55dd8f87",
        "authorId" : "1530c754-7850-4e09-a79b-a6555e28f729",
        "body" : "I see what you mean.  B/c of the way we've generalized the makePod function to take bash commands as a parameter, I think this way might be a little more readable.  The alternative is to prepend `-c` to the command, which isn't a big deal either.\n",
        "createdAt" : "2016-11-19T00:10:20Z",
        "updatedAt" : "2016-12-16T18:08:02Z",
        "lastEditedBy" : "1530c754-7850-4e09-a79b-a6555e28f729",
        "tags" : [
        ]
      }
    ],
    "commit" : "e095e1120b64a5da927d514bd3bc92a102ad91d1",
    "line" : 696,
    "diffHunk" : "@@ -1,1 +856,860 @@\t\t\t\t\tName:    \"write-pod\",\n\t\t\t\t\tImage:   \"gcr.io/google_containers/busybox:1.24\",\n\t\t\t\t\tCommand: []string{\"/bin/sh\", \"-c\"},\n\t\t\t\t\tArgs:    command,\n\t\t\t\t\tVolumeMounts: []v1.VolumeMount{"
  },
  {
    "id" : "b13df9f7-f26a-44fe-87c0-4800d5d85e68",
    "prId" : 31732,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/31732#pullrequestreview-3587654",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39d975ec-2cb4-4b67-a877-4a6dfe4d5b8a",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "If there is a failure cleaning up one PVC, will the remaining PVCs ever get cleaned up?\n",
        "createdAt" : "2016-10-08T00:51:51Z",
        "updatedAt" : "2016-10-25T17:42:23Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "ddae72a7-b2cc-4cd8-9b51-727a8b5d837d",
        "parentId" : "39d975ec-2cb4-4b67-a877-4a6dfe4d5b8a",
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "If the failure occurs in the normal path of deleting the claim to trigger the recycler (and to test that the related pv becomes Available) the remaining pvcs will be deleted in the AfterEach. However, if the failure occurs in the AfterEach itself, then I guess the remaining claims are not deleted. I am not certain how Expect() works inside an AfterEach. Do you know of a way to harden this code?\n",
        "createdAt" : "2016-10-08T01:27:15Z",
        "updatedAt" : "2016-10-25T17:42:23Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "def01859-e2da-4b83-8018-bd0a67cf90e4",
        "parentId" : "39d975ec-2cb4-4b67-a877-4a6dfe4d5b8a",
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "@saad-ali I tested a failure in an AfterEach. In the log you'll see \"_Failure in Spec Teardown (AfterEach) ..._\" to indicate that the test failed inside an AfterEach. A failure in an AfterEach exits the AfterEach block and reports the failure. There can be a stack of AfterEach()s and thus a higher-level AfterEach may be invoked. For example, if a Context() AfterEach fails then the KubeDescribe AfterEach may be invoked. The final AfterEach is defined in the framework. This AfterEach deletes the namespace and thus deletes the PVCs in that namespace. So, as long as all of the claims live in the same ns they will be deleted, at least when the ns is deleted. However, our plan may be to create pvcs and pods in several different namespaces, and in that case the claims residing in the other namespaces, other than the initial ns, will survive the test.  In fact, in my AfterEach test, all the of the pvs remain if the test fails inside an AfterEach.\n",
        "createdAt" : "2016-10-10T22:56:05Z",
        "updatedAt" : "2016-10-25T17:42:23Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f76996410c7943aac67e07fc83481e0f2c60919f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +72,76 @@\t\t\t_, err := c.Core().PersistentVolumeClaims(pvcKey.Namespace).Get(pvcKey.Name)\n\t\t\tif !apierrs.IsNotFound(err) {\n\t\t\t\tExpect(err).NotTo(HaveOccurred())\n\t\t\t\tframework.Logf(\"   deleting PVC %v ...\", pvcKey)\n\t\t\t\terr = c.Core().PersistentVolumeClaims(pvcKey.Namespace).Delete(pvcKey.Name, nil)"
  },
  {
    "id" : "308250d9-993f-43c2-a5c0-65f70857e509",
    "prId" : 30242,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11031980-1a56-42ac-9802-9a140dd33a34",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "Why is PV and PVC returned from this function? No caller seems to use it.\n",
        "createdAt" : "2016-08-10T08:17:11Z",
        "updatedAt" : "2016-08-11T17:50:33Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "21ee945f-21d6-4669-802a-3129cc5c22f9",
        "parentId" : "11031980-1a56-42ac-9802-9a140dd33a34",
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "Because if the returned err != nil then`Failf()` is called and I want the `AfterEach` to be able to delete the pv and pvc if they are still present (not nil).\n",
        "createdAt" : "2016-08-10T16:13:05Z",
        "updatedAt" : "2016-08-11T17:50:33Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "af9d6e54-3eaa-44b6-b876-d549ecdd799c",
        "parentId" : "11031980-1a56-42ac-9802-9a140dd33a34",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "I totally missed this one, could you please add some comment to make it more visible?\n",
        "createdAt" : "2016-08-10T16:17:41Z",
        "updatedAt" : "2016-08-11T17:50:33Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "b82e748f-c637-4652-8b77-acd91380855b",
        "parentId" : "11031980-1a56-42ac-9802-9a140dd33a34",
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "added comment to all funcs that return a pv and/or pvc.\n",
        "createdAt" : "2016-08-11T17:51:52Z",
        "updatedAt" : "2016-08-11T17:51:52Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f7b2ad32f702017a6340e5f29a76b9d232dd0da",
    "line" : null,
    "diffHunk" : "@@ -1,1 +367,371 @@// Note: the pv and pvc are returned back to the It() caller so that the\n//   AfterEach func can delete these objects if they are not nil.\nfunc completeTest(f *framework.Framework, c *client.Client, ns string, pv *api.PersistentVolume, pvc *api.PersistentVolumeClaim) (*api.PersistentVolume, *api.PersistentVolumeClaim, error) {\n\n\t// 1. verify that the PV and PVC have binded correctly"
  },
  {
    "id" : "a63e21c2-6627-4916-ad23-f3b74eacaddb",
    "prId" : 27792,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f87313a2-d2a1-4c56-8519-e88c71112f22",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "why do you \"need to fill-in claimRef with pvc.Name\"? It's either filled by `makePersistentVolume` call above or the PV should not be pre-bound.\n",
        "createdAt" : "2016-06-23T12:00:55Z",
        "updatedAt" : "2016-08-04T07:25:51Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "587e6032-a127-4fa7-990d-665748092618",
        "parentId" : "f87313a2-d2a1-4c56-8519-e88c71112f22",
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "@jsafrane pv.ClaimRef.name is not filled in (by makePersistentVolume) when the pv is created because the associated claim does not know its own name until the claim is instantiated. I believe this is due to using a generated named.\n",
        "createdAt" : "2016-07-02T04:35:09Z",
        "updatedAt" : "2016-08-04T07:25:51Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "ba41b29a-1c0b-4556-b9f1-408c26a015ae",
        "parentId" : "f87313a2-d2a1-4c56-8519-e88c71112f22",
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "I see. This is not obvious from the code, could you please add a comment that would explain that pvc.Name is generated?\n",
        "createdAt" : "2016-07-04T10:03:15Z",
        "updatedAt" : "2016-08-04T07:25:51Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      },
      {
        "id" : "bb809396-f9fa-4a65-bfa1-08b70c341dfd",
        "parentId" : "f87313a2-d2a1-4c56-8519-e88c71112f22",
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "I added additional comments regarding generated names.\n",
        "createdAt" : "2016-07-05T01:26:10Z",
        "updatedAt" : "2016-08-04T07:25:51Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "86578b2e2fd8a8bfcbb91fbc9c3b8353a7791955",
    "line" : null,
    "diffHunk" : "@@ -1,1 +177,181 @@\t} else {\n\t\t// need to fill-in claimRef with pvc.Name\n\t\tpv.Spec.ClaimRef.Name = pvc.Name\n\t\tpv, err = createPV(c, pv)\n\t\tif err != nil {"
  },
  {
    "id" : "2f95c2e4-547a-44f5-a600-5e5640b83b38",
    "prId" : 27133,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23635b0e-e52b-4e46-afe7-bab0fe90e97a",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "increased wait time is definitely needed -- so good job doing this!\n",
        "createdAt" : "2016-06-09T19:51:46Z",
        "updatedAt" : "2016-06-16T15:33:49Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "07ffe9513bef3c6ce3d69c43ea3fad2a0edcdc79",
    "line" : null,
    "diffHunk" : "@@ -1,1 +104,108 @@\n\t\t// Wait for PersistentVolume.Status.Phase to be Bound. Can take several minutes.\n\t\terr = framework.WaitForPersistentVolumePhase(api.VolumeBound, c, pv.Name, 3*time.Second, 300*time.Second)\n\t\tif err != nil {\n\t\t\tframework.Failf(\"PersistentVolume failed to enter a bound state: %+v\", err)"
  },
  {
    "id" : "795160fa-3c25-47e9-94a8-309938925598",
    "prId" : 27133,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53471284-10f2-4978-b83e-83bd1fc66277",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "How about an additional check that the pvc bound to the expected pv?\n",
        "createdAt" : "2016-06-09T19:58:48Z",
        "updatedAt" : "2016-06-16T15:33:49Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "07ffe9513bef3c6ce3d69c43ea3fad2a0edcdc79",
    "line" : null,
    "diffHunk" : "@@ -1,1 +127,131 @@\t\t\tframework.Failf(\"Binding failed: PersistentVolumeClaim UID does not match PersistentVolume's ClaimRef UID. \")\n\t\t}\n\n\t\t// writePod writes to the nfs volume\n\t\tframework.Logf(\"Creating writePod\")"
  },
  {
    "id" : "0c34ee1d-5e83-406b-b487-48a6b25b577b",
    "prId" : 27133,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34fa4b9f-1627-40f9-a736-fd16114af2e7",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "I don't _think_ you need to get the pvc again. I don't think there will be a change in that obj after line 107.\n",
        "createdAt" : "2016-06-09T20:00:43Z",
        "updatedAt" : "2016-06-16T15:33:49Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "07ffe9513bef3c6ce3d69c43ea3fad2a0edcdc79",
    "line" : null,
    "diffHunk" : "@@ -1,1 +130,134 @@\t\t// writePod writes to the nfs volume\n\t\tframework.Logf(\"Creating writePod\")\n\t\tpvc, _ = c.PersistentVolumeClaims(ns).Get(pvc.Name)\n\t\twritePod := makeWritePod(ns, pvc.Name)\n\t\twritePod, err = c.Pods(ns).Create(writePod)"
  },
  {
    "id" : "c0ac3856-c335-4a2f-82ec-cb493acd40a2",
    "prId" : 27133,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9db42d6-ec41-4f6f-bb36-48b387e0bf7d",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "How about logging the pod's success at writing to the nfs mount?\n",
        "createdAt" : "2016-06-09T20:06:29Z",
        "updatedAt" : "2016-06-16T15:33:49Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "07ffe9513bef3c6ce3d69c43ea3fad2a0edcdc79",
    "line" : null,
    "diffHunk" : "@@ -1,1 +144,148 @@\t\t\tframework.Logf(\"WritePod exited without error.\")\n\t\t}\n\n\t\t// Delete the PersistentVolumeClaim\n\t\tframework.Logf(\"Deleting PersistentVolumeClaim to trigger PV Recycling\")"
  },
  {
    "id" : "15f3873a-846c-4f58-8d8c-1f517cd58a8b",
    "prId" : 27133,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f14978ba-d579-4faa-a4ce-51800b83f06c",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "5m maybe sufficient time for the Phase change... Are you certain the expected Phase is \"Available\" vs. \"Released\"? In my test env I get \"Released\" but that may be a problem with my env...\n",
        "createdAt" : "2016-06-09T20:10:26Z",
        "updatedAt" : "2016-06-16T15:33:49Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      },
      {
        "id" : "a88fe4c2-d4ef-4d9b-bd93-86bf16ad46f6",
        "parentId" : "f14978ba-d579-4faa-a4ce-51800b83f06c",
        "authorId" : "1530c754-7850-4e09-a79b-a6555e28f729",
        "body" : "That's a good question.  From what I've found, the reclaimPolicy isn't specifed.  In the test, it does become Available.  My guess is that the default policy is Recycle but I haven't confirmed that.  Per test output, the PV enters Release then Available, so testing for either works right now.\n",
        "createdAt" : "2016-06-10T20:36:50Z",
        "updatedAt" : "2016-06-16T15:33:49Z",
        "lastEditedBy" : "1530c754-7850-4e09-a79b-a6555e28f729",
        "tags" : [
        ]
      },
      {
        "id" : "434166a3-5f45-4b2f-a500-123fc5673509",
        "parentId" : "f14978ba-d579-4faa-a4ce-51800b83f06c",
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "Ya, my problem is probably more related to the fact that the pv's claimRef isn't nil'd out so maybe that causes the Phase to change to _Released_?  Since the original test tested for _Available_ and your test works I'd leave it as is.\n",
        "createdAt" : "2016-06-10T20:56:14Z",
        "updatedAt" : "2016-06-16T15:33:49Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "07ffe9513bef3c6ce3d69c43ea3fad2a0edcdc79",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +154,158 @@\t\t// Wait for the PersistentVolume phase to return to Available\n\t\tframework.Logf(\"Waiting for recycling process to complete.\")\n\t\terr = framework.WaitForPersistentVolumePhase(api.VolumeAvailable, c, pv.Name, 3*time.Second, 300*time.Second)\n\t\tif err != nil {\n\t\t\tframework.Failf(\"Recycling failed: %v\", err)"
  },
  {
    "id" : "6dc30869-bf06-4330-9042-fc5c9a3a0d07",
    "prId" : 27133,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a9ac27d-cf70-4898-b34c-0961be3f00d4",
        "parentId" : null,
        "authorId" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "body" : "I assume the pod needs to be priv to write to the mount. However, in general, we don't want to encourage priv pods, so maybe you can change the perms on the mount? The nfs-server pod creates the export on /:\n\n```\n#nfs-server pod:\nsh-4.2# cat /etc/exports               \n/exports *(rw,fsid=0,insecure,no_root_squash)\n/ *(rw,fsid=0,insecure,no_root_squash)\n```\n\nand the nfs pv created above sets the vol's path to \"/\". Perm's on the nfs-server's \"/\" are:\n\n```\ndrwxr-xr-x. 18 root root 4096 Jun  9 20:26 /\n```\n\nso non-owner(root) can only read, not write.\nThis is mostly rambling and I can't provide a better solution than _priv_ until I am able to get the checker pod running in my env...\n",
        "createdAt" : "2016-06-09T20:50:27Z",
        "updatedAt" : "2016-06-16T15:33:49Z",
        "lastEditedBy" : "65c676d6-aec8-4761-943f-80e1f66d400b",
        "tags" : [
        ]
      }
    ],
    "commit" : "07ffe9513bef3c6ce3d69c43ea3fad2a0edcdc79",
    "line" : 233,
    "diffHunk" : "@@ -1,1 +248,252 @@\t\t\t\t\t},\n\t\t\t\t\tSecurityContext: &api.SecurityContext{\n\t\t\t\t\t\tPrivileged: &isPrivileged,\n\t\t\t\t\t},\n\t\t\t\t},"
  },
  {
    "id" : "5ad4d22c-d8ec-478a-9bbb-cf83178e15e2",
    "prId" : 27133,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95331e07-6363-40bc-bb35-766ac659603c",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "During binding the controller saves bound PV first and bound PVC after that. It's not the same etcd transaction and it could happen that the test gets to CPU when PV is saved and `WaitForPersistentVolumePhase` few lines above returns, but PVC is not saved yet.\n\nPlease add `WaitForPersistentVolumeClaimPhase` here to make sure the controller had time to save both PVC and PV.\n",
        "createdAt" : "2016-06-15T08:35:02Z",
        "updatedAt" : "2016-06-16T15:33:49Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "07ffe9513bef3c6ce3d69c43ea3fad2a0edcdc79",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +118,122 @@\t\t// Check the PersistentVolumeClaim.Status.Phase for Bound state\n\t\tframework.Logf(\"Checking PersistentVolumeClaim status is Bound\")\n\t\tpvc, err = c.PersistentVolumeClaims(ns).Get(pvc.Name)\n\t\tif pvcPhase := pvc.Status.Phase; pvcPhase != \"Bound\" {\n\t\t\tframework.Failf(\"Expected PersistentVolumeClaim status Bound. Actual:  %+v.  Error: %+v\", pvcPhase, err)"
  },
  {
    "id" : "3bfa72bf-362a-43eb-a878-443d0be1583a",
    "prId" : 27133,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd40f990-5d27-45d1-a115-6e1d111203ae",
        "parentId" : null,
        "authorId" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "body" : "I did not notice it earlier, but these `framework.Failf` calls around leave PV in default namespace, right?\n\nPlease add something like \n\n```\ndefer c.PersistentVolumes().Delete(pv.Name)\n```\n",
        "createdAt" : "2016-06-15T08:44:33Z",
        "updatedAt" : "2016-06-16T15:33:49Z",
        "lastEditedBy" : "8b64e744-955d-4523-a3b7-60fae9df0857",
        "tags" : [
        ]
      }
    ],
    "commit" : "07ffe9513bef3c6ce3d69c43ea3fad2a0edcdc79",
    "line" : null,
    "diffHunk" : "@@ -1,1 +88,92 @@\t\t// defer deletion to clean up the PV should the test fail post-creation.\n\t\tframework.Logf(\"Creating PersistentVolume\")\n\t\tpv, err := c.PersistentVolumes().Create(pv)\n\t\tif err != nil {\n\t\t\tframework.Failf(\"Create PersistentVolume failed: %v\", err)"
  }
]