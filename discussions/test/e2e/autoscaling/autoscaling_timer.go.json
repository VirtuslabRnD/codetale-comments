[
  {
    "id" : "47c3fd84-3beb-44fd-8867-9bb73e213bc8",
    "prId" : 53584,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53584#pullrequestreview-67930721",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27b940ad-05ca-46da-a118-40a859ca0a75",
        "parentId" : null,
        "authorId" : "3f00d8a9-68e2-438c-85da-b03590361276",
        "body" : "Nit picking, but I don't like checking for empty string with len > 0.",
        "createdAt" : "2017-10-09T09:42:00Z",
        "updatedAt" : "2017-10-09T09:42:00Z",
        "lastEditedBy" : "3f00d8a9-68e2-438c-85da-b03590361276",
        "tags" : [
        ]
      },
      {
        "id" : "8b8e23d8-279d-4756-bb34-bade507894a4",
        "parentId" : "27b940ad-05ca-46da-a118-40a859ca0a75",
        "authorId" : "3f00d8a9-68e2-438c-85da-b03590361276",
        "body" : "Eh, doesn't matter, looks like both ways are considered idiomatic in go. Ignore this.",
        "createdAt" : "2017-10-09T09:44:36Z",
        "updatedAt" : "2017-10-09T09:44:36Z",
        "lastEditedBy" : "3f00d8a9-68e2-438c-85da-b03590361276",
        "tags" : [
        ]
      }
    ],
    "commit" : "73a1227f39088819235b83206bd219a5ec02be2c",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +71,75 @@\t\t\t\t// Attempt cleanup only if a node group was targeted for scale up.\n\t\t\t\t// Otherwise the test was probably skipped and we'll get a gcloud error due to invalid parameters.\n\t\t\t\tif len(nodeGroupName) > 0 {\n\t\t\t\t\t// Scale down back to only 'nodesNum' nodes, as expected at the start of the test.\n\t\t\t\t\tframework.ExpectNoError(framework.ResizeGroup(nodeGroupName, nodesNum))"
  },
  {
    "id" : "31dc8b5c-a607-4ec0-a947-8a54ac1d633d",
    "prId" : 52707,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52707#pullrequestreview-63927522",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b8c4022-2cb7-4457-b9bd-0afc3be5c2c7",
        "parentId" : null,
        "authorId" : "f16005de-4946-4424-a20f-033d20946386",
        "body" : "Note that the comment above implies that we take capacity into account, so changing it allocatable should also result in updating the comment.",
        "createdAt" : "2017-09-19T11:46:03Z",
        "updatedAt" : "2017-09-19T12:21:14Z",
        "lastEditedBy" : "f16005de-4946-4424-a20f-033d20946386",
        "tags" : [
        ]
      },
      {
        "id" : "7e276e26-a152-4c29-8839-e4640438cbc8",
        "parentId" : "5b8c4022-2cb7-4457-b9bd-0afc3be5c2c7",
        "authorId" : "e739420e-d5c5-4f38-b9a7-7f3f738b886f",
        "body" : "I suppose it depends of what we mean by \"fit perfectly\" - I'd say that allocatable is closer to it than capacity. I can of course rephrase it, what do you think would be more accurate?",
        "createdAt" : "2017-09-19T12:53:57Z",
        "updatedAt" : "2017-09-19T12:53:57Z",
        "lastEditedBy" : "e739420e-d5c5-4f38-b9a7-7f3f738b886f",
        "tags" : [
        ]
      },
      {
        "id" : "99ef3656-dbe3-42f0-ac2f-2cd63466361b",
        "parentId" : "5b8c4022-2cb7-4457-b9bd-0afc3be5c2c7",
        "authorId" : "f16005de-4946-4424-a20f-033d20946386",
        "body" : "The text in parentheses says \"(in practice other things take space, so less than that will fit)\", so this is what I meant,  and this is the part that is no longer true. Maybe just removing that text parens is enough",
        "createdAt" : "2017-09-20T06:44:06Z",
        "updatedAt" : "2017-09-20T06:44:06Z",
        "lastEditedBy" : "f16005de-4946-4424-a20f-033d20946386",
        "tags" : [
        ]
      },
      {
        "id" : "b16ddb74-3201-461f-b77e-fc5955da1575",
        "parentId" : "5b8c4022-2cb7-4457-b9bd-0afc3be5c2c7",
        "authorId" : "e739420e-d5c5-4f38-b9a7-7f3f738b886f",
        "body" : "Right, I agree this may no longer always be the case. As this was already approved and has been merged since, is it OK if the fix goes in the next PR related to e2e tests?",
        "createdAt" : "2017-09-20T08:41:54Z",
        "updatedAt" : "2017-09-20T08:41:54Z",
        "lastEditedBy" : "e739420e-d5c5-4f38-b9a7-7f3f738b886f",
        "tags" : [
        ]
      },
      {
        "id" : "bc849abe-bf26-4fef-a357-7c3edc667706",
        "parentId" : "5b8c4022-2cb7-4457-b9bd-0afc3be5c2c7",
        "authorId" : "f16005de-4946-4424-a20f-033d20946386",
        "body" : "I think it is OK as long as it's a separate commit (or you can just create a dedicated PR)",
        "createdAt" : "2017-09-20T10:12:12Z",
        "updatedAt" : "2017-09-20T10:12:12Z",
        "lastEditedBy" : "f16005de-4946-4424-a20f-033d20946386",
        "tags" : [
        ]
      }
    ],
    "commit" : "69f1f2f296b78376df98717208e3060a983ee296",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +81,85 @@\t\t\t\t// This test expects that 8 pods will not fit in 'nodesNum' nodes, but will fit in >='nodesNum'+1 nodes.\n\t\t\t\t// Make it so that 'nodesNum' pods fit perfectly per node (in practice other things take space, so less than that will fit).\n\t\t\t\tnodeCpus := nodes.Items[0].Status.Allocatable[v1.ResourceCPU]\n\t\t\t\tnodeCpuMillis := (&nodeCpus).MilliValue()\n\t\t\t\tcpuRequestMillis := int64(nodeCpuMillis / nodesNum)"
  },
  {
    "id" : "823117b8-c4bc-4a12-8929-e9c0ea4541b1",
    "prId" : 52707,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/52707#pullrequestreview-63927588",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e00f5426-58c6-41db-917a-ce638cd00c67",
        "parentId" : null,
        "authorId" : "f16005de-4946-4424-a20f-033d20946386",
        "body" : "Same here. This line says \"10% of node's total memory\", but this is no longer true after the change from capacity to allocatable.",
        "createdAt" : "2017-09-19T11:46:45Z",
        "updatedAt" : "2017-09-19T12:21:14Z",
        "lastEditedBy" : "f16005de-4946-4424-a20f-033d20946386",
        "tags" : [
        ]
      },
      {
        "id" : "9591cfe6-e1e5-4bf7-a7b0-46aff765995b",
        "parentId" : "e00f5426-58c6-41db-917a-ce638cd00c67",
        "authorId" : "e739420e-d5c5-4f38-b9a7-7f3f738b886f",
        "body" : "Will \"10% of node's allocatable memory\" be OK?",
        "createdAt" : "2017-09-20T08:43:57Z",
        "updatedAt" : "2017-09-20T08:43:57Z",
        "lastEditedBy" : "e739420e-d5c5-4f38-b9a7-7f3f738b886f",
        "tags" : [
        ]
      },
      {
        "id" : "575901a6-729d-47cb-8784-e2a21f977c9b",
        "parentId" : "e00f5426-58c6-41db-917a-ce638cd00c67",
        "authorId" : "f16005de-4946-4424-a20f-033d20946386",
        "body" : "Yes, I think so.",
        "createdAt" : "2017-09-20T10:12:31Z",
        "updatedAt" : "2017-09-20T10:12:31Z",
        "lastEditedBy" : "f16005de-4946-4424-a20f-033d20946386",
        "tags" : [
        ]
      }
    ],
    "commit" : "69f1f2f296b78376df98717208e3060a983ee296",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +88,92 @@\t\t\t\tnodeMemoryBytes := nodes.Items[0].Status.Allocatable[v1.ResourceMemory]\n\t\t\t\tnodeMemoryMB := (&nodeMemoryBytes).Value() / 1024 / 1024\n\t\t\t\tmemRequestMB := nodeMemoryMB / 10 // Ensure each pod takes not more than 10% of node's total memory.\n\t\t\t\treplicas := 1\n\t\t\t\tresourceConsumer := common.NewDynamicResourceConsumer(\"resource-consumer\", common.KindDeployment, replicas, 0, 0, 0, cpuRequestMillis, memRequestMB, f)"
  }
]