[
  {
    "id" : "6189f8d2-c4ca-4f7b-9a89-ca4f153fe50b",
    "prId" : 69544,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69544#pullrequestreview-162719428",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca14b423-caa4-4c74-9a64-aa00c7b3a8c8",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "@justinsb nice pattern for cleaning tempdirs. I think we could use this harness pattern to cleanup any other resources we allocate . Would be interesting to see where else can we leverage this",
        "createdAt" : "2018-10-09T05:23:15Z",
        "updatedAt" : "2018-10-09T05:23:15Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      }
    ],
    "commit" : "58fc3c8c23dbd8de631b93cce355dfaa7e96eb1f",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +60,64 @@// It automatically fails the test if we can't create a temp file,\n// and deletes the temp directory when Close is called on the Harness\nfunc (h *Harness) TempDir(baseDir string, prefix string) string {\n\ttempDir, err := ioutil.TempDir(baseDir, prefix)\n\tif err != nil {"
  },
  {
    "id" : "646613b6-fd4e-43ec-8d58-71900ae56e81",
    "prId" : 69544,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/69544#pullrequestreview-169375938",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af2bc5f6-aad7-4f58-8e59-dc2d2c012e7d",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "nit: Maybe make `Harness` an interface and `TempDirCleanupHarness` a concrete type of `Harness`? That way folks can implement different types of Harnesses?",
        "createdAt" : "2018-10-19T23:32:03Z",
        "updatedAt" : "2018-10-19T23:33:47Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "1fd32137-1fdc-43c5-bcdb-7e268b839a4a",
        "parentId" : "af2bc5f6-aad7-4f58-8e59-dc2d2c012e7d",
        "authorId" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "body" : "So the reason not to is because Harness embeds `testing.T`, so we can use it more interchangeably with existing code that wants a `testing.T`.  I do agree that once we've got it so that everyone is using the harness, we should move to an interface!",
        "createdAt" : "2018-10-29T15:49:57Z",
        "updatedAt" : "2018-10-29T15:49:57Z",
        "lastEditedBy" : "8fc8f958-3c0e-47dd-a0fb-b8cc483b4efb",
        "tags" : [
        ]
      }
    ],
    "commit" : "58fc3c8c23dbd8de631b93cce355dfaa7e96eb1f",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +36,40 @@// }\n// ```\ntype Harness struct {\n\t*testing.T\n\tdefers []func() error"
  }
]