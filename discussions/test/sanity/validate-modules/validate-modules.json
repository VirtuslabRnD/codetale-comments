[
  {
    "id" : "f8dcf2c7-4222-422f-998c-91d789c33b5c",
    "prId" : 21680,
    "prUrl" : "https://github.com/ansible/ansible/pull/21680#pullrequestreview-22824393",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb146e5d-29d5-4cf7-bf33-fec6f4db2864",
        "parentId" : null,
        "authorId" : "380aef6a-3fbb-41ad-819b-bada96e05807",
        "body" : "Successful output of JSON should be exit code 0. The error state can be extracted from the JSON.",
        "createdAt" : "2017-02-20T17:36:38Z",
        "updatedAt" : "2017-02-20T20:48:08Z",
        "lastEditedBy" : "380aef6a-3fbb-41ad-819b-bada96e05807",
        "tags" : [
        ]
      },
      {
        "id" : "c72809d4-81ae-4bed-8693-604afa0eae05",
        "parentId" : "fb146e5d-29d5-4cf7-bf33-fec6f4db2864",
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "Hrm, I am conflicted there.  So you are saying that the script should not decide the exit code?  But instead give an exit code of properly printing the JSON?  I'm not sure I agree.  The function of the script is to perform the validation, in which case it returns the proper exit. The function of the script is not to output JSON.",
        "createdAt" : "2017-02-20T18:48:10Z",
        "updatedAt" : "2017-02-20T20:48:08Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      },
      {
        "id" : "dc864d81-bdec-4468-a7e0-35c7061b4762",
        "parentId" : "fb146e5d-29d5-4cf7-bf33-fec6f4db2864",
        "authorId" : "380aef6a-3fbb-41ad-819b-bada96e05807",
        "body" : "I see you point. At the very least, it would be useful to have predictable error codes. Perhaps something like this:\r\n\r\n0 - no errors found\r\n1 - errors found, JSON successfully written\r\n2 - unexpected failure, JSON not successfully written\r\n\r\nI don't see a need for having the error code be dependent on the number of errors found.",
        "createdAt" : "2017-02-20T19:06:44Z",
        "updatedAt" : "2017-02-20T20:48:08Z",
        "lastEditedBy" : "380aef6a-3fbb-41ad-819b-bada96e05807",
        "tags" : [
        ]
      },
      {
        "id" : "bf7d050e-503c-40fd-8a97-697185177f6c",
        "parentId" : "fb146e5d-29d5-4cf7-bf33-fec6f4db2864",
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "I'll look into that.  I may use 2 as errors found, since python tracebacks and such would result in an exit of 1.  Just to distinguish.",
        "createdAt" : "2017-02-20T19:08:13Z",
        "updatedAt" : "2017-02-20T20:48:08Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      },
      {
        "id" : "f23ad41b-5b50-41e7-9842-57e388811d01",
        "parentId" : "fb146e5d-29d5-4cf7-bf33-fec6f4db2864",
        "authorId" : "380aef6a-3fbb-41ad-819b-bada96e05807",
        "body" : "That works. Just so we can look at the exit code to know whether or not the program exited \"normally\", which in this case means writing out a valid JSON report. The `shellcheck` program does something similar. From the `shellcheck` man page:\r\n\r\n```\r\nShellCheck uses the follow exit codes:\r\n\r\n       o 0: All files successfully scanned with no issues.\r\n       o 1: All files successfully scanned with some issues.\r\n       o 2: Some files could not be processed (e.g.  file not found).\r\n       o 3: ShellCheck was invoked with bad syntax (e.g.  unknown flag).\r\n       o 4: ShellCheck was invoked with bad options (e.g.  unknown formatter).\r\n```",
        "createdAt" : "2017-02-20T19:12:08Z",
        "updatedAt" : "2017-02-20T20:48:08Z",
        "lastEditedBy" : "380aef6a-3fbb-41ad-819b-bada96e05807",
        "tags" : [
        ]
      },
      {
        "id" : "cc8d74da-7199-4ae4-b7cd-e5233df5c648",
        "parentId" : "fb146e5d-29d5-4cf7-bf33-fec6f4db2864",
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "This should be resolved now.  `2` is the exit code when errors are found.",
        "createdAt" : "2017-02-20T19:15:37Z",
        "updatedAt" : "2017-02-20T20:48:08Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      },
      {
        "id" : "bd62c903-f958-4127-a77a-1f4f2e8cd187",
        "parentId" : "fb146e5d-29d5-4cf7-bf33-fec6f4db2864",
        "authorId" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "body" : "Ok, quickly re-evaluating.  I didn't account for argparse failure here.  Let me get back to this again.",
        "createdAt" : "2017-02-20T19:17:17Z",
        "updatedAt" : "2017-02-20T20:48:08Z",
        "lastEditedBy" : "4b69a0b5-ac6f-45e9-9507-dd1385182f29",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4e4c1c6a37031df6e6fb0adb1666fbab027f489",
    "line" : 633,
    "diffHunk" : "@@ -1,1 +898,902 @@        sys.exit(Reporter.plain(reports, warnings=args.warnings, output=args.output))\n    else:\n        sys.exit(Reporter.json(reports, warnings=args.warnings, output=args.output))\n\n"
  }
]