[
  {
    "id" : "a568a521-8833-4cd6-ba8c-2076de7f0324",
    "prId" : 1427,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/1427#pullrequestreview-3908758",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30438d28-4434-4c17-af76-aae3426f64a7",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Note that I moved the `-d` option to `noCheckOptions`, so that the `dotc_core_nocheck` test case also generates class files under `./out/`, instead of the current directory.\n",
        "createdAt" : "2016-10-12T16:17:12Z",
        "updatedAt" : "2016-10-13T09:00:38Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      }
    ],
    "commit" : "92ebb46afedaba26dff0f579b78c704e7ded4b96",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +21,25 @@//        \"-Yshow-suppressed-errors\",\n        \"-d\", defaultOutputDir,\n        \"-pagewidth\", \"160\")\n\n  implicit val defaultOptions = noCheckOptions ++"
  },
  {
    "id" : "7b6c5d36-536f-4c83-8f51-ed3caf34cb13",
    "prId" : 1244,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc9b8cb2-f3cb-4521-b6c5-c73395dea369",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "This is going to affect benchmarks and skew history.\n",
        "createdAt" : "2016-05-27T09:09:10Z",
        "updatedAt" : "2016-05-28T20:23:52Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "5f52f536-7b6e-4d93-a2f4-5a0e3e54c4c8",
        "parentId" : "cc9b8cb2-f3cb-4521-b6c5-c73395dea369",
        "authorId" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "body" : "Yup, no choice.\n",
        "createdAt" : "2016-05-28T01:48:59Z",
        "updatedAt" : "2016-05-28T20:23:52Z",
        "lastEditedBy" : "9ffc9890-522c-4d3a-8fe5-fb5cbad2b309",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c865c5664bb699283d8f573f78359ce3b7f74e6",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +24,28 @@\n  implicit val defaultOptions = noCheckOptions ++ List(\n      \"-Yno-deep-subtypes\", \"-Yno-double-bindings\", \"-Yforce-sbt-phases\",\n      \"-d\", defaultOutputDir) ++ {\n    if (isRunByJenkins) List(\"-Ycheck:tailrec,resolveSuper,mixin,restoreScopes,labelDef\") // should be Ycheck:all, but #725"
  },
  {
    "id" : "8994cbe5-533e-4816-bb20-e4fd284a834c",
    "prId" : 767,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e87e216-46a1-4ba7-8ec9-eb6b94e62e9c",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "`abstract-override.scala` is absent in this PR.\n",
        "createdAt" : "2015-08-21T13:25:54Z",
        "updatedAt" : "2015-08-22T15:35:11Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "4689bd39e3c5271333bb6dec1370b4e5c802f7e0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +97,101 @@  @Test def new_all = compileFiles(newDir, twice)\n\n  @Test def neg_abstractOverride() = compileFile(negDir, \"abstract-override\", xerrors = 2)\n  @Test def neg_blockescapes() = compileFile(negDir, \"blockescapesNeg\", xerrors = 1)\n  @Test def neg_typedapply() = compileFile(negDir, \"typedapply\", xerrors = 4)"
  },
  {
    "id" : "c05206f9-4f2c-44cb-adb2-f5ecd06aac31",
    "prId" : 436,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d06275d-2842-4661-b1f9-7c05dd1b1866",
        "parentId" : null,
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "Why was the twice removed here?\n",
        "createdAt" : "2015-03-28T19:03:10Z",
        "updatedAt" : "2015-04-02T14:30:29Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      }
    ],
    "commit" : "e5618d29e37ad50bd1b8c591ed50db63a6d7bc79",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +150,154 @@  @Test def dotc_printing = compileDir(dotcDir + \"tools/dotc/printing\")\n\n  @Test def dotc_reporting = compileDir(dotcDir + \"tools/dotc/reporting\")\n\n  @Test def dotc_typer = compileDir(dotcDir + \"tools/dotc/typer\", failedOther)"
  },
  {
    "id" : "8839ae34-4784-4009-8a1a-8ac376e54640",
    "prId" : 42,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87de4eea-6da4-440f-b97c-6aa68518d3d3",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "It would be good to have a http link for this issue on github, as \"i39\" is not so obvious.\n",
        "createdAt" : "2014-03-04T13:27:10Z",
        "updatedAt" : "2014-03-04T13:27:10Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      },
      {
        "id" : "03f2d79f-19dc-4d61-b201-b7028d9d69bb",
        "parentId" : "87de4eea-6da4-440f-b97c-6aa68518d3d3",
        "authorId" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "body" : "I think should have a naming convention for issue tests, then it will become obvious. Scala 2 has t123, should we do the same or stick with i123?\n",
        "createdAt" : "2014-03-04T17:25:37Z",
        "updatedAt" : "2014-03-04T17:25:37Z",
        "lastEditedBy" : "d08d2c4a-dc79-4be6-96b0-506d21e90d1d",
        "tags" : [
        ]
      },
      {
        "id" : "ec08f8c1-5693-4246-9cf6-c30f2e528b33",
        "parentId" : "87de4eea-6da4-440f-b97c-6aa68518d3d3",
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "Having such convention seems good idea.\nI'd prefer i123.\n",
        "createdAt" : "2014-03-04T17:40:09Z",
        "updatedAt" : "2014-03-04T17:40:09Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f196e074c41f7ccde118dcf6764898a2c26fda3a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +41,45 @@  @Test def pos_templateParents() = compileFile(posDir, \"templateParents\")\n  @Test def pos_structural() = compileFile(posDir, \"structural\")\n  @Test def pos_i39 = compileFile(posDir, \"i39\")\n\n  @Test def neg_blockescapes() = compileFile(negDir, \"blockescapesNeg\", xerrors = 1)"
  },
  {
    "id" : "e48f4124-f582-42cf-a272-a79c14cf5928",
    "prId" : 42,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4436afdf-8977-4931-bebb-e17450d33072",
        "parentId" : null,
        "authorId" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "body" : "Same here\n",
        "createdAt" : "2014-03-04T13:27:17Z",
        "updatedAt" : "2014-03-04T13:27:17Z",
        "lastEditedBy" : "5bf81a51-885f-46a7-83a3-61092da8405f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f196e074c41f7ccde118dcf6764898a2c26fda3a",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +51,55 @@  @Test def neg_rootImports = compileFile(negDir, \"rootImplicits\", xerrors = 2)\n  @Test def neg_templateParents() = compileFile(negDir, \"templateParents\", xerrors = 3)\n  @Test def neg_i39 = compileFile(negDir, \"i39\", xerrors = 1)\n\n  @Test def dotc = compileDir(dotcDir + \"tools/dotc\")"
  }
]