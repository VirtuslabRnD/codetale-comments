[
  {
    "id" : "74860818-c20a-4ab8-9598-4e00925244fe",
    "prId" : 93579,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/93579#pullrequestreview-458582114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "035c2ed9-ca69-448e-b4f6-208957326a8d",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this was why the CI job didn't fail",
        "createdAt" : "2020-07-30T16:49:49Z",
        "updatedAt" : "2020-07-30T17:51:03Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1420b377e40cc653819916c7db2f4a6ac9cf453b",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +298,302 @@\t\t\tif err != nil {\n\t\t\t\tserialFprintf(os.Stderr, \"ERROR(%s): failed to verify: %v\\n\", plat, err)\n\t\t\t\tf = true\n\t\t\t} else if len(errors) > 0 {\n\t\t\t\tfor _, e := range errors {"
  },
  {
    "id" : "6eea4354-746f-46dc-adaa-c64297ca5dbd",
    "prId" : 87658,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/87658#pullrequestreview-351758095",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "043ce825-4bbd-4fd6-8536-9d4974413596",
        "parentId" : null,
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "should we be adding this on all platforms?\r\nselinux seems goofy on ... not linux ðŸ™ƒ ",
        "createdAt" : "2020-01-31T05:40:12Z",
        "updatedAt" : "2020-01-31T20:49:50Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "c8ce3118-001b-46c5-b0ac-a53e1125459f",
        "parentId" : "043ce825-4bbd-4fd6-8536-9d4974413596",
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "the `!linux` kicks in https://github.com/kubernetes/kubernetes/blob/master/vendor/github.com/opencontainers/selinux/go-selinux/label/label.go#L1",
        "createdAt" : "2020-01-31T12:02:15Z",
        "updatedAt" : "2020-01-31T20:49:50Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      },
      {
        "id" : "2bdb037c-fdb2-4cb2-ac82-43587f69e313",
        "parentId" : "043ce825-4bbd-4fd6-8536-9d4974413596",
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "Fair, so we expect any other code to use this tag?",
        "createdAt" : "2020-01-31T16:35:38Z",
        "updatedAt" : "2020-01-31T20:49:50Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "7009e4f0-9b3a-4006-9763-2fa5acd31383",
        "parentId" : "043ce825-4bbd-4fd6-8536-9d4974413596",
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "dunno, since we have a bunch of folks on Mac, we will know very soon and can adjust then.",
        "createdAt" : "2020-01-31T18:11:00Z",
        "updatedAt" : "2020-01-31T20:49:50Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      },
      {
        "id" : "2de84c80-a355-41b7-9818-035f5db3b54d",
        "parentId" : "043ce825-4bbd-4fd6-8536-9d4974413596",
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "as long as we're not going to leverage the tag ourselves, this seems fine.",
        "createdAt" : "2020-01-31T20:25:41Z",
        "updatedAt" : "2020-01-31T20:49:50Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "219b7a29-f3ea-47b5-bc1c-4f0ec117b6db",
        "parentId" : "043ce825-4bbd-4fd6-8536-9d4974413596",
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "sounds good!",
        "createdAt" : "2020-01-31T20:27:22Z",
        "updatedAt" : "2020-01-31T20:49:50Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfd8e4e4670918e5879215710b43a42cde4f6482",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +107,111 @@\n\t// add selinux tag explicitly\n\tctx.BuildTags = append(ctx.BuildTags, \"selinux\")\n\n\ta := &analyzer{"
  },
  {
    "id" : "0acb2bad-f1c5-4aff-b785-e8ddcf21088c",
    "prId" : 85457,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/85457#pullrequestreview-327293266",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aa0cfa30-0f0c-4918-a0f1-45cce13025e7",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "this isn't new, but I was slightly surprised by it... I think this means if we add a main package under vendor or staging, typecheck won't check its import tree. Worth remembering as we try to push more things out of root k/k",
        "createdAt" : "2019-12-02T21:48:06Z",
        "updatedAt" : "2019-12-05T06:30:31Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "73f63378-16e3-48f4-83c1-74b0220f46ab",
        "parentId" : "aa0cfa30-0f0c-4918-a0f1-45cce13025e7",
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "we still typecheck this IIUC, as in, we typecheck files which then import vendor, which transitiviely checks.\r\n\r\nwe don't typecheck literally all code in vendor though.",
        "createdAt" : "2019-12-05T03:41:14Z",
        "updatedAt" : "2019-12-05T06:30:31Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      }
    ],
    "commit" : "b24dbac09a9472ca9e9331016c0e8f4340d72a58",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +76,80 @@\t\t// packages. We recursively typecheck imported vendored packages for\n\t\t// each OS, but don't typecheck everything for every OS.\n\t\t\"vendor\",\n\t\t\"_output\",\n\t\t// This is a weird one. /testdata/ is *mostly* ignored by Go,"
  },
  {
    "id" : "9aead5aa-668d-46e1-a10d-f280dabe8077",
    "prId" : 61872,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61872#pullrequestreview-108189482",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea183ba0-57ee-4f0b-abc0-742a2164ed70",
        "parentId" : null,
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "perhaps these should be generated by taking the entries in crossPlatforms that start with this platform? or by starting from (GOOS, GOARCH) and generating the strings in both places?",
        "createdAt" : "2018-03-29T18:24:12Z",
        "updatedAt" : "2018-03-29T18:24:20Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "ba3491f7-21b8-4145-a75a-cffcc9f08b98",
        "parentId" : "ea183ba0-57ee-4f0b-abc0-742a2164ed70",
        "authorId" : "a0299f5e-d293-4eaf-b600-44d80bb14e1f",
        "body" : "I considered that, but it would take ~20 extra LOC and I don't expect crossPlatforms or these constants to really change.",
        "createdAt" : "2018-03-29T18:46:32Z",
        "updatedAt" : "2018-03-29T18:46:33Z",
        "lastEditedBy" : "a0299f5e-d293-4eaf-b600-44d80bb14e1f",
        "tags" : [
        ]
      },
      {
        "id" : "2eab8b0c-5f96-4605-8a3d-77aab7b8e875",
        "parentId" : "ea183ba0-57ee-4f0b-abc0-742a2164ed70",
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "ok, if we add more platforms to the tool in the future (EG making it not-kubernetes specific) I think this would be worth refactoring.",
        "createdAt" : "2018-03-29T20:17:17Z",
        "updatedAt" : "2018-03-29T20:17:17Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      }
    ],
    "commit" : "90d99b346f570bebefd66f05176cc1c74f57560e",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +63,67 @@\t}\n\tdarwinPlatString  = \"darwin/386,darwin/amd64\"\n\twindowsPlatString = \"windows/386,windows/amd64\"\n)\n"
  },
  {
    "id" : "fe163c7a-8b9a-4bd2-8e54-1dbb7b622242",
    "prId" : 59289,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59289#pullrequestreview-97353753",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9b5e570-8e0e-4ef4-bc9a-fc4c17ad0664",
        "parentId" : null,
        "authorId" : "1256edc4-2c21-4b50-9371-9c0a50744653",
        "body" : "How would you feel about extracting the ignore patterns into a separate file, similar to `hack/.golint-failures`? We also should have some documentation around what kinds of exceptions from the typecheck are okay to ignore (and why). It makes sense to have this for things like vendor that we can't always control, but we need a clear/documented way to add/remove ignore statements.",
        "createdAt" : "2018-02-10T06:28:54Z",
        "updatedAt" : "2018-02-27T22:37:03Z",
        "lastEditedBy" : "1256edc4-2c21-4b50-9371-9c0a50744653",
        "tags" : [
        ]
      },
      {
        "id" : "618fccd2-3374-4543-95bc-fefd37fbf2bb",
        "parentId" : "b9b5e570-8e0e-4ef4-bc9a-fc4c17ad0664",
        "authorId" : "a0299f5e-d293-4eaf-b600-44d80bb14e1f",
        "body" : "Added a TODO. That's an important step for extracting this and making the code more generic. I'd like `go get -u k8s.io/typecheck && typecheck` to work for any project.",
        "createdAt" : "2018-02-17T00:12:32Z",
        "updatedAt" : "2018-02-27T22:37:03Z",
        "lastEditedBy" : "a0299f5e-d293-4eaf-b600-44d80bb14e1f",
        "tags" : [
        ]
      },
      {
        "id" : "af2427b0-094f-4d50-9561-4f501293e471",
        "parentId" : "b9b5e570-8e0e-4ef4-bc9a-fc4c17ad0664",
        "authorId" : "1256edc4-2c21-4b50-9371-9c0a50744653",
        "body" : "At minimum we need a README or some docs in `test/typecheck` if we're going to try and merge this as an MVP.",
        "createdAt" : "2018-02-17T00:23:42Z",
        "updatedAt" : "2018-02-27T22:37:03Z",
        "lastEditedBy" : "1256edc4-2c21-4b50-9371-9c0a50744653",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b3711352e78e4ea01aac9268fdce1e550f82162",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +100,104 @@}\n\nfunc (a *analyzer) handleError(err error) {\n\tif e, ok := err.(types.Error); ok {\n\t\t// useful for some ignores:"
  },
  {
    "id" : "290eaba1-aec4-439d-8b10-05ff389f2555",
    "prId" : 59289,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59289#pullrequestreview-97972992",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e146d3a2-6b32-4f46-a1ff-04803f1008cd",
        "parentId" : null,
        "authorId" : "1256edc4-2c21-4b50-9371-9c0a50744653",
        "body" : "Does this give us the coverage we need, based on the above assertion that we will test staging via vendor? This seems like there could possibly be overlooked type checks in staging if they are only imported by certain os-specific packages.",
        "createdAt" : "2018-02-10T06:40:51Z",
        "updatedAt" : "2018-02-27T22:37:03Z",
        "lastEditedBy" : "1256edc4-2c21-4b50-9371-9c0a50744653",
        "tags" : [
        ]
      },
      {
        "id" : "05d6bec5-91f1-407e-9ec0-a34876c70554",
        "parentId" : "e146d3a2-6b32-4f46-a1ff-04803f1008cd",
        "authorId" : "a0299f5e-d293-4eaf-b600-44d80bb14e1f",
        "body" : "There are os-specific packages that don't even bother with build tags (hcsshim)-- I don't think we need to prove that all vendored code works on all platforms, just that all *built* vendored code works for each platform.",
        "createdAt" : "2018-02-20T20:16:45Z",
        "updatedAt" : "2018-02-27T22:37:03Z",
        "lastEditedBy" : "a0299f5e-d293-4eaf-b600-44d80bb14e1f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b3711352e78e4ea01aac9268fdce1e550f82162",
    "line" : 251,
    "diffHunk" : "@@ -1,1 +249,253 @@\t\t\t// packages. We recursively typecheck imported vendored packages for\n\t\t\t// each OS, but don't typecheck everything for every OS.\n\t\t\tpath == \"vendor\" ||\n\t\t\tpath == \"_output\" ||\n\t\t\t// This is a weird one. /testdata/ is *mostly* ignored by Go,"
  },
  {
    "id" : "66a27357-0f1c-480b-83dc-2e51022833d7",
    "prId" : 59289,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59289#pullrequestreview-99893472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c0fc97d-4148-40e1-8f34-00c55fe46f01",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Consider adding an OpenFile func that uses a semaphore (buffered chan struct{}) to limit the number of open files to something reasonable. It looks like srcimporter creates a goroutine per file unconstrained.",
        "createdAt" : "2018-02-27T22:02:12Z",
        "updatedAt" : "2018-02-27T22:37:03Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "44858eac-124e-4e0d-b09e-57a287abf374",
        "parentId" : "1c0fc97d-4148-40e1-8f34-00c55fe46f01",
        "authorId" : "a0299f5e-d293-4eaf-b600-44d80bb14e1f",
        "body" : "In practice the most open files I've seen during an execution is ~20, so I'm not going to bother limiting it. Note that go vet etc use the same code paths without worrying about the number of open files.",
        "createdAt" : "2018-02-27T22:36:43Z",
        "updatedAt" : "2018-02-27T22:37:03Z",
        "lastEditedBy" : "a0299f5e-d293-4eaf-b600-44d80bb14e1f",
        "tags" : [
        ]
      },
      {
        "id" : "f973c563-f607-46f8-a966-e82a71825d0a",
        "parentId" : "1c0fc97d-4148-40e1-8f34-00c55fe46f01",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "SGTM",
        "createdAt" : "2018-02-27T22:56:41Z",
        "updatedAt" : "2018-02-27T22:56:41Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "3989b5b9-7ce3-4bb1-8844-e85eb7f94288",
        "parentId" : "1c0fc97d-4148-40e1-8f34-00c55fe46f01",
        "authorId" : "a0299f5e-d293-4eaf-b600-44d80bb14e1f",
        "body" : "Argh, this can fail on OSX-- but there's no generic way to thread a semaphore through everywhere that it opens files.",
        "createdAt" : "2018-02-27T23:16:47Z",
        "updatedAt" : "2018-02-27T23:16:47Z",
        "lastEditedBy" : "a0299f5e-d293-4eaf-b600-44d80bb14e1f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b3711352e78e4ea01aac9268fdce1e550f82162",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +73,77 @@\nfunc newAnalyzer(platform string) *analyzer {\n\tctx := build.Default\n\tplatSplit := strings.Split(platform, \"/\")\n\tctx.GOOS, ctx.GOARCH = platSplit[0], platSplit[1]"
  }
]