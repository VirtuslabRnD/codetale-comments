[
  {
    "id" : "debc3bfe-dc9c-4862-84f1-a3e77746c05e",
    "prId" : 95032,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/95032#pullrequestreview-514934793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "599e0cd5-ddb5-441e-9621-238bd849dfd8",
        "parentId" : null,
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "I didn't realize this wasn't checking a hash at least. yikes",
        "createdAt" : "2020-10-20T20:04:43Z",
        "updatedAt" : "2020-11-04T23:01:46Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "98293637-3550-4fb0-8377-e4de3cbe94d3",
        "parentId" : "599e0cd5-ddb5-441e-9621-238bd849dfd8",
        "authorId" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "body" : "at least it's versioned, it's using ``QEMUVERSION`` release.",
        "createdAt" : "2020-10-22T16:56:58Z",
        "updatedAt" : "2020-11-04T23:01:46Z",
        "lastEditedBy" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "tags" : [
        ]
      }
    ],
    "commit" : "54d0c1e1d20ca3d744c365322e5a81edc8cbbc82",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +151,155 @@        fi\n        ${sudo} \"${KUBE_ROOT}/third_party/multiarch/qemu-user-static/register/register.sh\" --reset\n        curl -sSL https://github.com/multiarch/qemu-user-static/releases/download/\"${QEMUVERSION}\"/x86_64_qemu-\"${QEMUARCHS[$arch]}\"-static.tar.gz | tar -xz -C \"${temp_dir}\"\n        # Ensure we don't get surprised by umask settings\n        chmod 0755 \"${temp_dir}/qemu-${QEMUARCHS[$arch]}-static\""
  },
  {
    "id" : "3fb4358e-79cf-462e-a671-05b1447fc734",
    "prId" : 88847,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/88847#pullrequestreview-369885831",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d28dc62e-07da-47d3-a94b-418b64056f56",
        "parentId" : null,
        "authorId" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "body" : "s/pushed./built./",
        "createdAt" : "2020-03-05T20:21:34Z",
        "updatedAt" : "2020-03-05T20:21:34Z",
        "lastEditedBy" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "tags" : [
        ]
      }
    ],
    "commit" : "acf84351e42bc07a608eee67c53b1cc59f81463c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +239,243 @@\n# This function is for building AND pushing images. Useful if ${WHAT} is \"all-conformance\".\n# This will allow images to be pushed immediately after they've been pushed.\nbuild_and_push() {\n  image=$1"
  },
  {
    "id" : "f0564222-e7f1-40c3-a725-d5d0e9d6c6f2",
    "prId" : 84058,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/84058#pullrequestreview-314872654",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5033d8fe-7fd1-4fba-810e-fc7a1b375745",
        "parentId" : null,
        "authorId" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "body" : "Why is this variable rename needed (IMAGE -> image)?",
        "createdAt" : "2019-11-05T22:20:27Z",
        "updatedAt" : "2020-01-07T21:50:30Z",
        "lastEditedBy" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "tags" : [
        ]
      },
      {
        "id" : "dd28e28a-033a-4c41-a93f-07c44bff48b7",
        "parentId" : "5033d8fe-7fd1-4fba-810e-fc7a1b375745",
        "authorId" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "body" : "Oops, looks like you use it in the call to eval at line 167.",
        "createdAt" : "2019-11-05T22:21:28Z",
        "updatedAt" : "2020-01-07T21:50:30Z",
        "lastEditedBy" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "tags" : [
        ]
      },
      {
        "id" : "a3589be4-251c-485f-b748-c36d7982d6b3",
        "parentId" : "5033d8fe-7fd1-4fba-810e-fc7a1b375745",
        "authorId" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "body" : "I wonder if it's possible to avoid the variable rename by just wrapping image-util.sh with another script. Then you might be able to avoid this variable rename. Wdyt?",
        "createdAt" : "2019-11-05T22:23:58Z",
        "updatedAt" : "2020-01-07T21:50:30Z",
        "lastEditedBy" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "tags" : [
        ]
      },
      {
        "id" : "60882113-6383-4c18-a842-feee8c779682",
        "parentId" : "5033d8fe-7fd1-4fba-810e-fc7a1b375745",
        "authorId" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "body" : "Indeed, $IMAGE is $2 which is given to the script, while $image is precicely the image to build. Indeed, it is a bit confusing, and we should change this. Wrapping image-util.sh in another script sounds a bit bloat-y IMO.\r\n\r\nThen, how about this? We change:\r\n\r\n    IMAGE=$2\r\n\r\nto\r\n\r\n    WHAT=$2\r\n\r\nIt makes sense, as you call ``make WHAT=image-name`` when building the image, it makes it more consistent.\r\n\r\nSo, we can continue to still have $IMAGE as it was (we'd still have to have ``IMAGE=$1`` at the beginning of functions though). Although uppercase variables are meant to be for global variables... so, maybe keep ``image=$1``?",
        "createdAt" : "2019-11-05T22:33:22Z",
        "updatedAt" : "2020-01-07T21:50:30Z",
        "lastEditedBy" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "tags" : [
        ]
      },
      {
        "id" : "f2fcd398-5135-405d-bf89-93c0575be93e",
        "parentId" : "5033d8fe-7fd1-4fba-810e-fc7a1b375745",
        "authorId" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "body" : "Renamed ``$IMAGE`` to ``$WHAT`` for consistency with the Make file, and left ``$image`` to refer strictly to the image to build / push (not uppercase, because it was made a local variable; not a global anymore).",
        "createdAt" : "2019-11-11T12:41:13Z",
        "updatedAt" : "2020-01-07T21:50:30Z",
        "lastEditedBy" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "tags" : [
        ]
      }
    ],
    "commit" : "72d66be439b123ac974886a40f50b4fc473c08e9",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +30,34 @@# Returns list of all supported architectures from BASEIMAGE file\nlistArchs() {\n  image=$1\n  cut -d \"=\" -f 1 \"${image}\"/BASEIMAGE\n}"
  },
  {
    "id" : "a60276a8-ad0c-4704-ada2-18a0827ec47b",
    "prId" : 80742,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80742#pullrequestreview-268225672",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af0e426c-6ea9-40fc-b4f0-0dedb10c0f17",
        "parentId" : null,
        "authorId" : "1d2372e4-a834-465f-a6f1-aa973013751c",
        "body" : "```\r\nIn ./test/images/image-util.sh line 38:\r\n  echo $(grep \"${arch}=\" BASEIMAGE | cut -d= -f2)\r\n       ^-- SC2046: Quote this to prevent word splitting.\r\n       ^-- SC2005: Useless echo? Instead of 'echo $(cmd)', just use 'cmd'.\r\n```",
        "createdAt" : "2019-07-30T08:16:42Z",
        "updatedAt" : "2019-08-28T05:09:16Z",
        "lastEditedBy" : "1d2372e4-a834-465f-a6f1-aa973013751c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5563e20a56a90404d8ed2b443e5e1960ffabd453",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +36,40 @@getBaseImage() {\n  arch=$1\n  grep \"${arch}=\" BASEIMAGE | cut -d= -f2\n}\n"
  },
  {
    "id" : "91a64234-c6b1-4925-b2e4-df709794f785",
    "prId" : 80742,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80742#pullrequestreview-268225954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f635702-dd70-4908-be54-70b7c4b0f7dd",
        "parentId" : null,
        "authorId" : "1d2372e4-a834-465f-a6f1-aa973013751c",
        "body" : "```\r\nIn ./test/images/image-util.sh line 49:\r\n    archs=${!QEMUARCHS[@]}\r\n          ^--------------^ SC2124: Assigning an array to a string! Assign as array, or use * instead of @ to concatenate.\r\n```",
        "createdAt" : "2019-07-30T08:17:11Z",
        "updatedAt" : "2019-08-28T05:09:16Z",
        "lastEditedBy" : "1d2372e4-a834-465f-a6f1-aa973013751c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5563e20a56a90404d8ed2b443e5e1960ffabd453",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +47,51 @@    archs=$(listArchs)\n  else\n    archs=${!QEMUARCHS[*]}\n  fi\n"
  },
  {
    "id" : "160338c7-936c-4afe-a45b-16e2503b39ff",
    "prId" : 80742,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80742#pullrequestreview-268226072",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4972ab0b-9e62-4030-b1d3-8a5ee3fe3d69",
        "parentId" : null,
        "authorId" : "1d2372e4-a834-465f-a6f1-aa973013751c",
        "body" : "```\r\nIn ./test/images/image-util.sh line 80:\r\n    if [[ $(grep \"CROSS_BUILD_\" Dockerfile) ]]; then\r\n          ^-- SC2143: Use grep -q instead of comparing output with [ -n .. ].\r\n```",
        "createdAt" : "2019-07-30T08:17:24Z",
        "updatedAt" : "2019-08-28T05:09:16Z",
        "lastEditedBy" : "1d2372e4-a834-465f-a6f1-aa973013751c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5563e20a56a90404d8ed2b443e5e1960ffabd453",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +78,82 @@\n    # copy the qemu-*-static binary to docker image to build the multi architecture image on x86 platform\n    if grep -q \"CROSS_BUILD_\" Dockerfile; then\n      if [[ \"${arch}\" == \"amd64\" ]]; then\n        ${SED} -i \"/CROSS_BUILD_/d\" Dockerfile"
  },
  {
    "id" : "80e427b6-53c9-4dd5-937f-cfc4921712e6",
    "prId" : 80742,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80742#pullrequestreview-268226169",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65523f6a-52f0-48e7-910d-521bee145fe9",
        "parentId" : null,
        "authorId" : "1d2372e4-a834-465f-a6f1-aa973013751c",
        "body" : "```\r\nIn ./test/images/image-util.sh line 122:\r\n    archs=${!QEMUARCHS[@]}\r\n          ^--------------^ SC2124: Assigning an array to a string! Assign as array, or use * instead of @ to concatenate.\r\n```",
        "createdAt" : "2019-07-30T08:17:36Z",
        "updatedAt" : "2019-08-28T05:09:16Z",
        "lastEditedBy" : "1d2372e4-a834-465f-a6f1-aa973013751c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5563e20a56a90404d8ed2b443e5e1960ffabd453",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +120,124 @@    archs=$(listArchs)\n  else\n    archs=${!QEMUARCHS[*]}\n  fi\n  for arch in ${archs}; do"
  },
  {
    "id" : "0d999498-88fb-47cb-99f5-e522cd4f659a",
    "prId" : 80742,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80742#pullrequestreview-280103914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf427cf4-0824-4038-9237-6725bbf2db57",
        "parentId" : null,
        "authorId" : "1d2372e4-a834-465f-a6f1-aa973013751c",
        "body" : "```\r\nIn ./test/images/image-util.sh line 134:\r\n  docker manifest create --amend \"${REGISTRY}/${IMAGE}:${TAG}\" ${manifest}\r\n                                                               ^---------^ SC2086: Double quote to prevent globbing and word splitting.\r\n```\r\n\r\nIf we only change to `\"${manifest}\"` then ${manifest} is treated as a single sentence. Therefore, `docker manifest create` fails. See #76457.\r\nTo avoid that, this commit treats ${manifest} as array.",
        "createdAt" : "2019-07-30T08:17:54Z",
        "updatedAt" : "2019-08-28T05:09:16Z",
        "lastEditedBy" : "1d2372e4-a834-465f-a6f1-aa973013751c",
        "tags" : [
        ]
      },
      {
        "id" : "26c7c838-7128-406c-a8bd-7f1201a8af2c",
        "parentId" : "bf427cf4-0824-4038-9237-6725bbf2db57",
        "authorId" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "body" : "does this work? (have you tested this?). I'm not confident in += with a variable that isn't previously specified.",
        "createdAt" : "2019-08-27T00:53:02Z",
        "updatedAt" : "2019-08-28T05:09:16Z",
        "lastEditedBy" : "46e1ba13-482b-4bcd-8fb1-be821bac3b04",
        "tags" : [
        ]
      },
      {
        "id" : "2786e19a-10fe-4bae-96fc-32ce947d06c3",
        "parentId" : "bf427cf4-0824-4038-9237-6725bbf2db57",
        "authorId" : "1d2372e4-a834-465f-a6f1-aa973013751c",
        "body" : "I cannot try it completely. but I have tested a part of this. In my test, `manifest` has the same value as before the change.\r\n\r\n- before the change (output of bash -x)\r\n```\r\n$ sudo make all-push WHAT=redis\r\n...\r\n+++ sed -e 's~[^ ]*~gcr.io/kubernetes-e2e-test-images\\/redis\\-&:1.0~g'\r\n++ manifest='gcr.io/kubernetes-e2e-test-images/redis-amd64:1.0\r\ngcr.io/kubernetes-e2e-test-images/redis-arm:1.0\r\ngcr.io/kubernetes-e2e-test-images/redis-arm64:1.0\r\ngcr.io/kubernetes-e2e-test-images/redis-ppc64le:1.0\r\ngcr.io/kubernetes-e2e-test-images/redis-s390x:1.0'\r\n++ docker manifest create --amend gcr.io/kubernetes-e2e-test-images/redis:1.0 gcr.io/kubernetes-e2e-test-images/redis-amd64:1.0 gcr.io/kubernetes-e2e-test-images/redis-arm:1.0 gcr.io/kubernetes-e2e-test-images/redis-arm64:1.0 gcr.io/kubernetes-e2e-test-images/redis-ppc64le:1.0 gcr.io/kubernetes-e2e-test-images/redis-s390x:1.0\r\n```\r\n\r\n- after\r\n```\r\n$ sudo make all-push WHAT=redis\r\n...\r\n+++ sed -e 's~[^ ]*~gcr.io/kubernetes-e2e-test-images\\/redis\\-&:1.0~g'\r\n++ manifest+=(\"$line\")\r\n++ IFS=\r\n++ read -r line\r\n++ manifest+=(\"$line\")\r\n++ IFS=\r\n++ read -r line\r\n++ manifest+=(\"$line\")\r\n++ IFS=\r\n++ read -r line\r\n++ manifest+=(\"$line\")\r\n++ IFS=\r\n++ read -r line\r\n++ manifest+=(\"$line\")\r\n++ IFS=\r\n++ read -r line\r\n++ docker manifest create --amend gcr.io/kubernetes-e2e-test-images/redis:1.0 gcr.io/kubernetes-e2e-test-images/redis-amd64:1.0 gcr.io/kubernetes-e2e-test-images/redis-arm:1.0 gcr.io/kubernetes-e2e-test-images/redis-arm64:1.0 gcr.io/kubernetes-e2e-test-images/redis-ppc64le:1.0 gcr.io/kubernetes-e2e-test-images/redis-s390x:1.0\r\n```\r\n",
        "createdAt" : "2019-08-27T10:36:49Z",
        "updatedAt" : "2019-08-28T05:09:16Z",
        "lastEditedBy" : "1d2372e4-a834-465f-a6f1-aa973013751c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5563e20a56a90404d8ed2b443e5e1960ffabd453",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +132,136 @@  # Make archs list into image manifest. Eg: 'amd64 ppc64le' to '${REGISTRY}/${IMAGE}-amd64:${TAG} ${REGISTRY}/${IMAGE}-ppc64le:${TAG}'\n  while IFS='' read -r line; do manifest+=(\"$line\"); done < <(echo \"$archs\" | ${SED} -e \"s~[^ ]*~$REGISTRY\\/$IMAGE\\-&:$TAG~g\")\n  docker manifest create --amend \"${REGISTRY}/${IMAGE}:${TAG}\" \"${manifest[@]}\"\n  for arch in ${archs}; do\n    docker manifest annotate --arch \"${arch}\" \"${REGISTRY}/${IMAGE}:${TAG}\" \"${REGISTRY}/${IMAGE}-${arch}:${TAG}\""
  },
  {
    "id" : "1a5644b1-5fad-4048-b491-6512f0d6539e",
    "prId" : 80742,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/80742#pullrequestreview-268226578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8b0443f-63c6-4d1e-a1ea-805758e48be2",
        "parentId" : null,
        "authorId" : "1d2372e4-a834-465f-a6f1-aa973013751c",
        "body" : "```\r\nIn ./test/images/image-util.sh line 147:\r\n  for SRC in $@;\r\n             ^-- SC2068: Double quote array expansions to avoid re-splitting elements.\r\n```",
        "createdAt" : "2019-07-30T08:18:22Z",
        "updatedAt" : "2019-08-28T05:09:16Z",
        "lastEditedBy" : "1d2372e4-a834-465f-a6f1-aa973013751c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5563e20a56a90404d8ed2b443e5e1960ffabd453",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +145,149 @@    arch_prefix=\"GOARM=${GOARM:-7}\"\n  fi\n  for SRC in \"$@\";\n  do\n  docker run --rm -it -v \"${TARGET}:${TARGET}:Z\" -v \"${KUBE_ROOT}\":/go/src/k8s.io/kubernetes:Z \\"
  },
  {
    "id" : "cb4130a1-f948-48d2-8f3c-8857918843c8",
    "prId" : 76838,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76838#pullrequestreview-236633705",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30e434fb-74d3-428e-a9f3-1b7e3468fc90",
        "parentId" : null,
        "authorId" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "body" : "Can you handle the missing `else` condition here?",
        "createdAt" : "2019-05-03T19:13:31Z",
        "updatedAt" : "2020-02-24T14:50:52Z",
        "lastEditedBy" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "tags" : [
        ]
      },
      {
        "id" : "fc541158-2ec2-4c49-8e2e-795702b179c9",
        "parentId" : "30e434fb-74d3-428e-a9f3-1b7e3468fc90",
        "authorId" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "body" : "There's no ``else`` case. There are 2 cases when building an image: \r\n\r\n- it has  ``BASEIMAGE`` file, Which this PR updates them so **all** of them are os/arch formatted. Also, the ``getBaseImage`` now requires both OS and arch. The grep will fail without both of them now.\r\n- ``BASEIMAGE`` does not exist, in which case ``linux/`` is prepended above on L51.",
        "createdAt" : "2019-05-06T15:54:37Z",
        "updatedAt" : "2020-02-24T14:50:52Z",
        "lastEditedBy" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "tags" : [
        ]
      },
      {
        "id" : "5f72ad53-14e2-4d16-9877-c63719bd93e6",
        "parentId" : "30e434fb-74d3-428e-a9f3-1b7e3468fc90",
        "authorId" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "body" : "I think it's always a good idea to handle `else` statements for every `if`, no matter what the surrounding state is *supposed* to be (at the very least, you can at least print an error message and exit with an error).",
        "createdAt" : "2019-05-11T02:29:52Z",
        "updatedAt" : "2020-02-24T14:50:52Z",
        "lastEditedBy" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "tags" : [
        ]
      },
      {
        "id" : "67651cb8-48f9-4daf-a0e0-952a96fcb2e9",
        "parentId" : "30e434fb-74d3-428e-a9f3-1b7e3468fc90",
        "authorId" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "body" : "Ok, added ``else``.",
        "createdAt" : "2019-05-13T12:04:59Z",
        "updatedAt" : "2020-02-24T14:50:52Z",
        "lastEditedBy" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "tags" : [
        ]
      }
    ],
    "commit" : "91dc590cde756de650a35645c47857dd3d5b4a9b",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +187,191 @@      echo \"The BASEIMAGE file for the ${image} image is not properly formatted. Expected entries to start with 'os/arch', found '${os_arch}' instead.\"\n      exit 1\n    fi\n\n    if [[ \"$os_name\" = \"linux\" ]]; then"
  },
  {
    "id" : "c9efad36-3946-4f74-a017-e9151f6f23f7",
    "prId" : 76838,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76838#pullrequestreview-234057626",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d8ad0151-1638-4161-b489-8c2a49f55b41",
        "parentId" : null,
        "authorId" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "body" : "Please handle the missing `else` condition",
        "createdAt" : "2019-05-03T19:15:44Z",
        "updatedAt" : "2020-02-24T14:50:52Z",
        "lastEditedBy" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "tags" : [
        ]
      },
      {
        "id" : "ca7430e0-550f-45f0-ac32-98f26512b905",
        "parentId" : "d8ad0151-1638-4161-b489-8c2a49f55b41",
        "authorId" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "body" : "There's no ``else`` case. There are 2 cases when building an image: \r\n\r\n- it has  ``BASEIMAGE`` file, Which this PR updates them so **all** of them are os/arch formatted. Also, the ``getBaseImage`` now requires both OS and arch. The grep will fail without both of them now.\r\n- ``BASEIMAGE`` does not exist, in which case ``linux/`` is prepended above on L51.",
        "createdAt" : "2019-05-06T15:54:41Z",
        "updatedAt" : "2020-02-24T14:50:52Z",
        "lastEditedBy" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "tags" : [
        ]
      }
    ],
    "commit" : "91dc590cde756de650a35645c47857dd3d5b4a9b",
    "line" : 193,
    "diffHunk" : "@@ -1,1 +232,236 @@      echo \"The BASEIMAGE file for the ${image} image is not properly formatted. Expected entries to start with 'os/arch', found '${os_arch}' instead.\"\n      exit 1\n    fi\n    docker manifest annotate --os \"${os_name}\" --arch \"${arch}\" \"${REGISTRY}/${image}:${TAG}\" \"${REGISTRY}/${image}:${TAG}-${suffix}\"\n  done"
  },
  {
    "id" : "2bedbdd0-3fa5-4a8c-815a-4877f872d52e",
    "prId" : 76838,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76838#pullrequestreview-233987583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b1a1fd8-0004-448f-a934-ce14753e7e35",
        "parentId" : null,
        "authorId" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "body" : "Please handle the missing `else` case",
        "createdAt" : "2019-05-03T19:19:17Z",
        "updatedAt" : "2020-02-24T14:50:52Z",
        "lastEditedBy" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "tags" : [
        ]
      },
      {
        "id" : "1b944c91-12f0-4de0-9387-93d61557a61f",
        "parentId" : "5b1a1fd8-0004-448f-a934-ce14753e7e35",
        "authorId" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "body" : "There's no ``else`` case. There are 2 cases when building an image: \r\n\r\n- it has  ``BASEIMAGE`` file, Which this PR updates them so **all** of them are os/arch formatted. Also, the ``getBaseImage`` now requires both OS and arch. The grep will fail without both of them now.\r\n- ``BASEIMAGE`` does not exist, in which case ``linux/`` is prepended above on L51.",
        "createdAt" : "2019-05-06T13:46:16Z",
        "updatedAt" : "2020-02-24T14:50:52Z",
        "lastEditedBy" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "tags" : [
        ]
      }
    ],
    "commit" : "91dc590cde756de650a35645c47857dd3d5b4a9b",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +75,79 @@      echo \"The BASEIMAGE file for the ${image} image is not properly formatted. Expected entries to start with 'os/arch', found '${os_arch}' instead.\"\n      exit 1\n    fi\n\n    echo \"Building image for ${image} OS/ARCH: ${os_arch}...\""
  },
  {
    "id" : "7e7d88ed-5b88-4d13-af85-de45d272160d",
    "prId" : 76838,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76838#pullrequestreview-233987583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33c37391-ea89-410c-9ef4-15a0df7dd840",
        "parentId" : null,
        "authorId" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "body" : "Can you handle the missing `else`' condition here?",
        "createdAt" : "2019-05-03T19:51:22Z",
        "updatedAt" : "2020-02-24T14:50:52Z",
        "lastEditedBy" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "tags" : [
        ]
      },
      {
        "id" : "fc0858ac-3c17-4d2f-9392-4860a8f22863",
        "parentId" : "33c37391-ea89-410c-9ef4-15a0df7dd840",
        "authorId" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "body" : "There's no ``else`` case. There are 2 cases when building an image: \r\n\r\n- it has  ``BASEIMAGE`` file, Which this PR updates them so **all** of them are os/arch formatted. Also, the ``getBaseImage`` now requires both OS and arch. The grep will fail without both of them now.\r\n- ``BASEIMAGE`` does not exist, in which case ``linux/`` is prepended above on L51.",
        "createdAt" : "2019-05-06T14:58:44Z",
        "updatedAt" : "2020-02-24T14:50:52Z",
        "lastEditedBy" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "tags" : [
        ]
      }
    ],
    "commit" : "91dc590cde756de650a35645c47857dd3d5b4a9b",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +187,191 @@      echo \"The BASEIMAGE file for the ${image} image is not properly formatted. Expected entries to start with 'os/arch', found '${os_arch}' instead.\"\n      exit 1\n    fi\n\n    if [[ \"$os_name\" = \"linux\" ]]; then"
  },
  {
    "id" : "163aec60-3ba8-4a55-8464-876b4d482d94",
    "prId" : 76838,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76838#pullrequestreview-233987583",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57ceb252-23f5-487c-a189-cce2492ec694",
        "parentId" : null,
        "authorId" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "body" : "Missing `else` condition?",
        "createdAt" : "2019-05-03T19:55:07Z",
        "updatedAt" : "2020-02-24T14:50:52Z",
        "lastEditedBy" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "tags" : [
        ]
      },
      {
        "id" : "ac5bf8fc-9475-4c7e-b179-61e14b33c570",
        "parentId" : "57ceb252-23f5-487c-a189-cce2492ec694",
        "authorId" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "body" : "There's no ``else`` case. There are 2 cases when building an image: \r\n\r\n- it has  ``BASEIMAGE`` file, Which this PR updates them so **all** of them are os/arch formatted. Also, the ``getBaseImage`` now requires both OS and arch. The grep will fail without both of them now.\r\n- ``BASEIMAGE`` does not exist, in which case ``linux/`` is prepended above on L51.",
        "createdAt" : "2019-05-06T14:51:25Z",
        "updatedAt" : "2020-02-24T14:50:52Z",
        "lastEditedBy" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "tags" : [
        ]
      }
    ],
    "commit" : "91dc590cde756de650a35645c47857dd3d5b4a9b",
    "line" : 193,
    "diffHunk" : "@@ -1,1 +232,236 @@      echo \"The BASEIMAGE file for the ${image} image is not properly formatted. Expected entries to start with 'os/arch', found '${os_arch}' instead.\"\n      exit 1\n    fi\n    docker manifest annotate --os \"${os_name}\" --arch \"${arch}\" \"${REGISTRY}/${image}:${TAG}\" \"${REGISTRY}/${image}:${TAG}-${suffix}\"\n  done"
  },
  {
    "id" : "dbf890a8-77f5-4c53-8956-004462b79c05",
    "prId" : 76838,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76838#pullrequestreview-301884526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "609689af-f556-4635-8117-2c64f288e399",
        "parentId" : null,
        "authorId" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "body" : "almost identical code in build() / push(), better to extract into a function?",
        "createdAt" : "2019-10-13T17:16:57Z",
        "updatedAt" : "2020-02-24T14:50:52Z",
        "lastEditedBy" : "093f4806-3f92-4191-a80b-4e6cf3d6ffc0",
        "tags" : [
        ]
      },
      {
        "id" : "3071f290-1744-46e3-9e8f-0fe6733c6343",
        "parentId" : "609689af-f556-4635-8117-2c64f288e399",
        "authorId" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "body" : "I don't think it will help much. Most of this code you're mentioning is just extracting $os_name, $arch, and $os_version, and setting $REMOTE_DOCKER_URL for windows image, which are still needed either way.",
        "createdAt" : "2019-10-15T12:57:07Z",
        "updatedAt" : "2020-02-24T14:50:52Z",
        "lastEditedBy" : "8b178e45-b16b-405a-a22d-44899bf0bd64",
        "tags" : [
        ]
      }
    ],
    "commit" : "91dc590cde756de650a35645c47857dd3d5b4a9b",
    "line" : 192,
    "diffHunk" : "@@ -1,1 +231,235 @@    else\n      echo \"The BASEIMAGE file for the ${image} image is not properly formatted. Expected entries to start with 'os/arch', found '${os_arch}' instead.\"\n      exit 1\n    fi\n    docker manifest annotate --os \"${os_name}\" --arch \"${arch}\" \"${REGISTRY}/${image}:${TAG}\" \"${REGISTRY}/${image}:${TAG}-${suffix}\""
  },
  {
    "id" : "0bf1a545-1c2b-43cc-ba26-5bf9f8429b25",
    "prId" : 76126,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76126#pullrequestreview-224105948",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "587591c3-a413-4419-aa84-d9b39a94b554",
        "parentId" : null,
        "authorId" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "body" : "I hope the addition of `[0]` doesn't change behavior...?",
        "createdAt" : "2019-04-06T03:08:46Z",
        "updatedAt" : "2019-04-06T03:08:47Z",
        "lastEditedBy" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "tags" : [
        ]
      },
      {
        "id" : "c9521e4b-ce92-44ff-9f3b-4842ad949037",
        "parentId" : "587591c3-a413-4419-aa84-d9b39a94b554",
        "authorId" : "e7b8fd7e-f93b-44b6-b6d0-4331207d901c",
        "body" : "Thanks for your feedback. I am sorry for the delay. \r\nBut why do you think so? \r\nI don't think the addition of `[0]` will change the behavior of this script, because expanding an array without an index only gives the first element.\r\n\r\nHere's what shellcheck finds:\r\n```\r\nIn test/images/image-util.sh line 24:\r\nKUBE_ROOT=\"$(cd \"$(dirname \"${BASH_SOURCE}\")/../..\" && pwd -P)\"\r\n                            ^-- SC2128: Expanding an array without an index only gives the first element.\r\n```\r\n",
        "createdAt" : "2019-04-08T05:53:51Z",
        "updatedAt" : "2019-04-08T05:53:52Z",
        "lastEditedBy" : "e7b8fd7e-f93b-44b6-b6d0-4331207d901c",
        "tags" : [
        ]
      },
      {
        "id" : "537c8c19-7e83-4f74-aa92-52adc6e676a6",
        "parentId" : "587591c3-a413-4419-aa84-d9b39a94b554",
        "authorId" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "body" : "Thanks for clarifying, LGTM",
        "createdAt" : "2019-04-08T21:52:12Z",
        "updatedAt" : "2019-04-08T21:52:12Z",
        "lastEditedBy" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2954adf332fef6b706f6ee0c863b64fff95c7ef",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +22,26 @@IMAGE=$2\n\nKUBE_ROOT=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")/../..\" && pwd -P)\"\nsource \"${KUBE_ROOT}/hack/lib/util.sh\"\n"
  },
  {
    "id" : "43c956e1-75b3-4591-985e-1e33279246b7",
    "prId" : 76126,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/76126#pullrequestreview-225846186",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3da69c34-ed65-4e14-924b-f6e271dca2a6",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "This line is broken. To reproduce, run `make all-push WHAT=webhook`, it returns error message \"invalid referent format\".\r\n\r\nThe root cause is that `${manifest}` is a list of images, quoting it making docker treat the list as the name of a single image, and it's invalid to have spaces in the image name.\r\n\r\nFor example, without the quotes around `${manifest}`, the command expands as:\r\n```bash\r\ndocker manifest create --amend gcr.io/kubernetes-e2e-test-images/webhook:1.15v1 gcr.io/kubernetes-e2e-test-images/webhook-amd64:1.15v1 gcr.io/kubernetes-e2e-test-images/webhook-arm:1.15v1 gcr.io/kubernetes-e2e-test-images/webhook-arm64:1.15v1 gcr.io/kubernetes-e2e-test-images/webhook-ppc64le:1.15v1\r\n```\r\n\r\nWith the quotes, \r\n```bash\r\ndocker manifest create --amend \"gcr.io/kubernetes-e2e-test-images/webhook:1.15v1\" \"gcr.io/kubernetes-e2e-test-images/webhook-amd64:1.15v1 gcr.io/kubernetes-e2e-test-images/webhook-arm:1.15v1 gcr.io/kubernetes-e2e-test-images/webhook-arm64:1.15v1 gcr.io/kubernetes-e2e-test-images/webhook-ppc64le:1.15v1\"\r\n```",
        "createdAt" : "2019-04-11T18:11:17Z",
        "updatedAt" : "2019-04-11T18:26:10Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "37c14309-e9ad-49c8-9f92-6f763fc33c32",
        "parentId" : "3da69c34-ed65-4e14-924b-f6e271dca2a6",
        "authorId" : "e7b8fd7e-f93b-44b6-b6d0-4331207d901c",
        "body" : "@caesarxuchao Thanks for your feedback.  I'll check it again.",
        "createdAt" : "2019-04-11T23:44:27Z",
        "updatedAt" : "2019-04-11T23:44:28Z",
        "lastEditedBy" : "e7b8fd7e-f93b-44b6-b6d0-4331207d901c",
        "tags" : [
        ]
      },
      {
        "id" : "0586cf67-a5fb-4822-9526-b6f513663bad",
        "parentId" : "3da69c34-ed65-4e14-924b-f6e271dca2a6",
        "authorId" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "body" : "Thanks for catching this @caesarxuchao ",
        "createdAt" : "2019-04-11T23:45:40Z",
        "updatedAt" : "2019-04-11T23:45:40Z",
        "lastEditedBy" : "8f28c85e-b168-4827-bb6c-a35d8658f008",
        "tags" : [
        ]
      },
      {
        "id" : "88103356-45c2-4618-aab1-54443c1c30ab",
        "parentId" : "3da69c34-ed65-4e14-924b-f6e271dca2a6",
        "authorId" : "e7b8fd7e-f93b-44b6-b6d0-4331207d901c",
        "body" : "I'm sorry for missing it. Thank you @caesarxuchao @listx ",
        "createdAt" : "2019-04-11T23:51:30Z",
        "updatedAt" : "2019-04-11T23:51:31Z",
        "lastEditedBy" : "e7b8fd7e-f93b-44b6-b6d0-4331207d901c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2954adf332fef6b706f6ee0c863b64fff95c7ef",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +132,136 @@  # Make archs list into image manifest. Eg: 'amd64 ppc64le' to '${REGISTRY}/${IMAGE}-amd64:${TAG} ${REGISTRY}/${IMAGE}-ppc64le:${TAG}'\n  manifest=$(echo \"$archs\" | ${SED} -e \"s~[^ ]*~$REGISTRY\\/$IMAGE\\-&:$TAG~g\")\n  docker manifest create --amend \"${REGISTRY}/${IMAGE}:${TAG}\" \"${manifest}\"\n  for arch in ${archs}; do\n    docker manifest annotate --arch \"${arch}\" \"${REGISTRY}/${IMAGE}:${TAG}\" \"${REGISTRY}/${IMAGE}-${arch}:${TAG}\""
  },
  {
    "id" : "90224924-db76-4acb-b6ab-010230c496fa",
    "prId" : 67106,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/67106#pullrequestreview-145307327",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b4358da-7db2-45c3-9772-643ab0cec9c4",
        "parentId" : null,
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "@spiffxp : looks like we have a pattern already in our scripts\r\n\r\n`kube::util::ensure-temp-dir` and then use `KUBE_TEMP` wanna use that?\r\n\r\nhttps://cs.k8s.io/?q=%3A%3Aensure-temp-dir%7CKUBE_TEMP&i=nope&files=&repos=\r\n\r\n\r\n",
        "createdAt" : "2018-08-08T00:47:35Z",
        "updatedAt" : "2018-08-10T16:13:49Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      },
      {
        "id" : "d5a563ec-60ec-440b-ac3b-06107b54278a",
        "parentId" : "5b4358da-7db2-45c3-9772-643ab0cec9c4",
        "authorId" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "body" : "At least on my macOS system, that ends up making a tmpdir under `/var/folders`, which is what I'm trying to avoid.  I'm wary of messing with that function because while I know using `_tmp` works here, I haven't tested everything else that uses this.",
        "createdAt" : "2018-08-08T22:33:06Z",
        "updatedAt" : "2018-08-10T16:13:49Z",
        "lastEditedBy" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "tags" : [
        ]
      },
      {
        "id" : "c248e8a4-ced5-4383-af4f-97db5e4c869a",
        "parentId" : "5b4358da-7db2-45c3-9772-643ab0cec9c4",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "maybe add a trap to cleanup this temp dir?\r\n\r\notherwise this looks fine.",
        "createdAt" : "2018-08-08T22:43:55Z",
        "updatedAt" : "2018-08-10T16:13:49Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "1690e771-ecb1-46c9-841a-cccb2eee2f0e",
        "parentId" : "5b4358da-7db2-45c3-9772-643ab0cec9c4",
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "Ack @spiffxp . +1 to @ixdy's suggestion",
        "createdAt" : "2018-08-08T23:22:21Z",
        "updatedAt" : "2018-08-10T16:13:49Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      },
      {
        "id" : "8b28c2a1-f901-4e02-bf66-7bdfc3025642",
        "parentId" : "5b4358da-7db2-45c3-9772-643ab0cec9c4",
        "authorId" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "body" : "ack, trap added",
        "createdAt" : "2018-08-10T16:13:55Z",
        "updatedAt" : "2018-08-10T16:13:55Z",
        "lastEditedBy" : "5de211e4-9744-455e-9548-1a8e70ed1b2e",
        "tags" : [
        ]
      }
    ],
    "commit" : "2de8daf024d29f856ace307d22497d09c0ef2d47",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +58,62 @@    # and build the image from temporary directory\n    mkdir -p ${KUBE_ROOT}/_tmp\n    temp_dir=$(mktemp -d ${KUBE_ROOT}/_tmp/test-images-build.XXXXXX)\n    kube::util::trap_add \"rm -rf ${temp_dir}\" EXIT\n"
  },
  {
    "id" : "678a388b-3491-4a37-9e91-aee83b750874",
    "prId" : 65046,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/65046#pullrequestreview-128758388",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0f9f93c-bfd5-48e5-a343-aa1c31c3bfe2",
        "parentId" : null,
        "authorId" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "body" : "nit: we might wanna do some version matching of the docker client first, so we know that it is new enough, or error out",
        "createdAt" : "2018-06-14T12:11:22Z",
        "updatedAt" : "2018-06-14T12:15:06Z",
        "lastEditedBy" : "bfe6ebf1-cfa7-4758-abb1-9960fa09b194",
        "tags" : [
        ]
      }
    ],
    "commit" : "399b9c245f64ef4d98ed8dc5a865fb52c089436f",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +103,107 @@  # Make archs list into image manifest. Eg: 'amd64 ppc64le' to '${REGISTRY}/${IMAGE}-amd64:${TAG} ${REGISTRY}/${IMAGE}-ppc64le:${TAG}'\n  manifest=$(echo $archs | sed -e \"s~[^ ]*~$REGISTRY\\/$IMAGE\\-&:$TAG~g\")\n  docker manifest create --amend ${REGISTRY}/${IMAGE}:${TAG} ${manifest}\n  for arch in ${archs}; do\n    docker manifest annotate --arch ${arch} ${REGISTRY}/${IMAGE}:${TAG} ${REGISTRY}/${IMAGE}-${arch}:${TAG}"
  },
  {
    "id" : "870e75ae-a018-4d8d-9d5e-cc0a4be893f1",
    "prId" : 63453,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63453#pullrequestreview-125824275",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2b96d58-3138-4629-934b-e0e70ccfc4aa",
        "parentId" : null,
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "neat sed trick: to avoid having to escape the slash, you can actually use (nearly) any character as a separator, not just `/`.\r\n\r\ni.e. this could be written\r\n`sed -e 's|[^ ]* *|linux/&|g' -e 's/ /,/g'`",
        "createdAt" : "2018-06-04T20:44:53Z",
        "updatedAt" : "2018-06-04T20:44:53Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "e68cafa3-c1df-4f3c-a3c9-ae0633475227",
        "parentId" : "b2b96d58-3138-4629-934b-e0e70ccfc4aa",
        "authorId" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "body" : "(in case it's not clear, I'm not blocking this PR on this change, just wanted to give you an FYI in case you didn't know.)",
        "createdAt" : "2018-06-04T22:07:56Z",
        "updatedAt" : "2018-06-04T22:07:56Z",
        "lastEditedBy" : "719d0e19-fcef-4b47-afac-404318b9514f",
        "tags" : [
        ]
      },
      {
        "id" : "4d9ca44a-4567-4a79-af70-6b67638999f5",
        "parentId" : "b2b96d58-3138-4629-934b-e0e70ccfc4aa",
        "authorId" : "40cecb65-fa4a-46a5-bab7-ea4e7330d27b",
        "body" : "@ixdy : Thanks for the review and the tip! ",
        "createdAt" : "2018-06-05T05:38:46Z",
        "updatedAt" : "2018-06-05T05:38:47Z",
        "lastEditedBy" : "40cecb65-fa4a-46a5-bab7-ea4e7330d27b",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae23e19f2048c6af01fd375f6895622beb0e4540",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +102,106 @@\n  # Make archs list into OS/architecture pair. Eg: 'amd64 ppc64le' to 'linux/amd64,linux/ppc64le'\n  archs=$(echo $archs | sed -e 's/[^ ]* */linux\\/&/g' -e 's/ /,/g')\n  manifest-tool push from-args --platforms ${archs} --template ${REGISTRY}/${IMAGE}-ARCH:${TAG} --target ${REGISTRY}/${IMAGE}:${TAG}\n}"
  }
]