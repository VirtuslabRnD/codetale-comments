[
  {
    "id" : "62318de6-333c-43a4-9d48-03209d94c518",
    "prId" : 7093,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88af1661-c19e-4399-b13f-e87474dd7e3f",
        "parentId" : null,
        "authorId" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "body" : "is the `.fill(0)` just precautionary in case it hasn't been properly zero filled?\n",
        "createdAt" : "2016-06-01T21:51:33Z",
        "updatedAt" : "2016-06-02T07:23:20Z",
        "lastEditedBy" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "tags" : [
        ]
      },
      {
        "id" : "97749be6-b85c-4769-b77c-b5d02fa7c47c",
        "parentId" : "88af1661-c19e-4399-b13f-e87474dd7e3f",
        "authorId" : "4bb0c2a5-ae65-4a7c-b24b-faa4000cdc5b",
        "body" : "This testcase ensures that typed arrays are zero filled, by comparing them to a typed array that is surely zero-filled.\n\nIf something breaks and typed arrays become non zero filled, then this testcase should fail. Without `.fill(0)` a change where this and following typed arrays become filled with equivalent garbage (e.g. with a constant number due to some of the previous tests) will slip through.\n",
        "createdAt" : "2016-06-02T03:13:41Z",
        "updatedAt" : "2016-06-02T07:23:20Z",
        "lastEditedBy" : "4bb0c2a5-ae65-4a7c-b24b-faa4000cdc5b",
        "tags" : [
        ]
      },
      {
        "id" : "9e8ac611-4771-4202-b829-b04ca3899eb9",
        "parentId" : "88af1661-c19e-4399-b13f-e87474dd7e3f",
        "authorId" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "body" : "Sure. But\n\n> a change where this and following typed arrays become filled with equivalent garbage \n\nthe two allocations would need to be filled with exactly the same garbage, for several allocations. Though I see what you're getting at.\n",
        "createdAt" : "2016-06-02T03:36:30Z",
        "updatedAt" : "2016-06-02T07:23:20Z",
        "lastEditedBy" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "tags" : [
        ]
      }
    ],
    "commit" : "fea3070ec46d8d231b95ff100170d16306814ee8",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +1481,1485 @@// Test failed or zero-sized Buffer allocations not affecting typed arrays\n{\n  const zeroArray = new Uint32Array(10).fill(0);\n  const sizes = [1e10, 0, 0.1, -1, 'a', undefined, null, NaN];\n  const allocators = ["
  },
  {
    "id" : "5e5903b4-32a4-4cf8-ac43-a3791b7630c8",
    "prId" : 7221,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a005e98-3e19-4f79-bbed-287a50ab2bba",
        "parentId" : null,
        "authorId" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "body" : "Just curious, why have we started blocking when no block-scope variables are being used?\n",
        "createdAt" : "2016-06-13T23:04:15Z",
        "updatedAt" : "2016-06-17T14:53:51Z",
        "lastEditedBy" : "ec4d48db-e488-47ba-b17d-0da1c3b9df08",
        "tags" : [
        ]
      },
      {
        "id" : "352d48a2-9088-43ea-88b0-371eef762d69",
        "parentId" : "8a005e98-3e19-4f79-bbed-287a50ab2bba",
        "authorId" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "body" : "@trevnorris Someone suggested it to make sure that the last call in the block here wouldnâ€™t be accidentally moved around in the file/away from the preceding calls that made it fail\n",
        "createdAt" : "2016-06-13T23:06:50Z",
        "updatedAt" : "2016-06-17T14:53:51Z",
        "lastEditedBy" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "tags" : [
        ]
      },
      {
        "id" : "6683927e-b04a-4ad2-aae5-2f8e14d4a853",
        "parentId" : "8a005e98-3e19-4f79-bbed-287a50ab2bba",
        "authorId" : "4bb0c2a5-ae65-4a7c-b24b-faa4000cdc5b",
        "body" : "That was @Fishrock123 in https://github.com/nodejs/node/pull/7051#discussion_r65076107.\n",
        "createdAt" : "2016-06-13T23:19:56Z",
        "updatedAt" : "2016-06-17T14:53:51Z",
        "lastEditedBy" : "4bb0c2a5-ae65-4a7c-b24b-faa4000cdc5b",
        "tags" : [
        ]
      }
    ],
    "commit" : "27785aeb3797a132023b644254c24bb8e18e9897",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1441,1445 @@\n{\n  // Test that large negative Buffer length inputs don't affect the pool offset.\n  assert.deepStrictEqual(Buffer(-Buffer.poolSize), Buffer.from(''));\n  assert.deepStrictEqual(Buffer(-100), Buffer.from(''));"
  }
]