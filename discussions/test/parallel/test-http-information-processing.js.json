[
  {
    "id" : "972dcc6b-0bca-453b-87c4-a8140c996888",
    "prId" : 32547,
    "prUrl" : "https://github.com/nodejs/node/pull/32547#pullrequestreview-383427921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "661d761b-d6ef-4861-b379-f1225b843ccc",
        "parentId" : null,
        "authorId" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "body" : "```suggestion\r\n  req.on('information', common.mustCall(MESSAGE_COUNT));\r\n```\r\n\r\nand get rid of `infoCount` altogether?",
        "createdAt" : "2020-03-29T14:08:53Z",
        "updatedAt" : "2020-03-31T20:12:20Z",
        "lastEditedBy" : "c8ef07ae-30f6-4919-9aa8-bf0160bbd4a0",
        "tags" : [
        ]
      },
      {
        "id" : "4bbc43b9-b526-4bbb-b858-394151ca9efa",
        "parentId" : "661d761b-d6ef-4861-b379-f1225b843ccc",
        "authorId" : "84392f84-0848-409d-9e1e-0627d211cf90",
        "body" : "That will check that the function is called twice before exiting, but I want to preserve [the existing check](https://github.com/nodejs/node/pull/32547/files#diff-7348f0b10c259e75c1523f566e87091dL40) that it is called twice before the response is sent.",
        "createdAt" : "2020-03-29T14:13:52Z",
        "updatedAt" : "2020-03-31T20:12:20Z",
        "lastEditedBy" : "84392f84-0848-409d-9e1e-0627d211cf90",
        "tags" : [
        ]
      },
      {
        "id" : "1002d965-d28d-43bd-bec7-c2e66a6d1234",
        "parentId" : "661d761b-d6ef-4861-b379-f1225b843ccc",
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "Given that the `req.on('response')` is not wrapped in a `common.mustCall()` that check may not happen, correct? If the test fails all you'd get is a timeout.  \r\n\r\n(I know that was the case previously, but worth looking at and improving since you're in here)",
        "createdAt" : "2020-03-29T14:42:53Z",
        "updatedAt" : "2020-03-31T20:12:20Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      },
      {
        "id" : "cd3d3454-f124-483b-af53-39d013e0e87c",
        "parentId" : "661d761b-d6ef-4861-b379-f1225b843ccc",
        "authorId" : "84392f84-0848-409d-9e1e-0627d211cf90",
        "body" : "Sure, added common.mustCall() to the response listener as well as the end listener inside that.",
        "createdAt" : "2020-03-29T16:13:33Z",
        "updatedAt" : "2020-03-31T20:12:20Z",
        "lastEditedBy" : "84392f84-0848-409d-9e1e-0627d211cf90",
        "tags" : [
        ]
      }
    ],
    "commit" : "8905be2ceea9abead85a5018c09645a3650d7495",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +31,35 @@  let infoCount = 0;\n\n  req.on('information', () => { infoCount++; });\n\n  req.on('response', function(res) {"
  },
  {
    "id" : "ec0d69e4-5987-46b2-a435-4b6608e53502",
    "prId" : 32547,
    "prUrl" : "https://github.com/nodejs/node/pull/32547#pullrequestreview-383436877",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb30ca41-e256-4fdb-9eed-e75787cf2d12",
        "parentId" : null,
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "If the `console.error()` is not part of the test, I'd prefer this to be replaced with a `debug()`... e.g.\r\n\r\n```\r\nconst debug = require('util').debuglog('test');\r\n// ...\r\ndebug(`Server sending informational message #${i}...`);\r\n```\r\n",
        "createdAt" : "2020-03-29T14:40:24Z",
        "updatedAt" : "2020-03-31T20:12:20Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      },
      {
        "id" : "3271c226-f7b4-40cb-8f58-f01616949b47",
        "parentId" : "fb30ca41-e256-4fdb-9eed-e75787cf2d12",
        "authorId" : "84392f84-0848-409d-9e1e-0627d211cf90",
        "body" : "One day, we'll have `console.debug()` working such that it doesn't output anything unless `NODE_DEBUG` is set or something like that.",
        "createdAt" : "2020-03-29T16:04:26Z",
        "updatedAt" : "2020-03-31T20:12:20Z",
        "lastEditedBy" : "84392f84-0848-409d-9e1e-0627d211cf90",
        "tags" : [
        ]
      },
      {
        "id" : "f0cb9a46-7f17-4e8e-90f5-d6618b18cebf",
        "parentId" : "fb30ca41-e256-4fdb-9eed-e75787cf2d12",
        "authorId" : "84392f84-0848-409d-9e1e-0627d211cf90",
        "body" : "Replaced all console.error() with debug() statements",
        "createdAt" : "2020-03-29T16:13:15Z",
        "updatedAt" : "2020-03-31T20:12:20Z",
        "lastEditedBy" : "84392f84-0848-409d-9e1e-0627d211cf90",
        "tags" : [
        ]
      },
      {
        "id" : "ad6298b0-c4fb-4c12-9ef9-87fde4dad8ca",
        "parentId" : "fb30ca41-e256-4fdb-9eed-e75787cf2d12",
        "authorId" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "body" : "hmm... still seeing the `console.error()` statements here...",
        "createdAt" : "2020-03-29T17:48:13Z",
        "updatedAt" : "2020-03-31T20:12:20Z",
        "lastEditedBy" : "d10ccdef-08de-4320-917e-16a9175dedcf",
        "tags" : [
        ]
      }
    ],
    "commit" : "8905be2ceea9abead85a5018c09645a3650d7495",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +9,13 @@const server = http.createServer((req, res) => {\n  for (let i = 0; i < kMessageCount; i++) {\n    console.error(`Server sending informational message #${i}...`);\n    res.writeProcessing();\n  }"
  },
  {
    "id" : "c518503b-45f8-4adf-a5e0-44a0db826c12",
    "prId" : 32547,
    "prUrl" : "https://github.com/nodejs/node/pull/32547#pullrequestreview-383935754",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0f13464-19c5-4282-9fd2-f6878d47e2ad",
        "parentId" : null,
        "authorId" : "086787a3-ed8a-41f9-b42f-f8357dda7fef",
        "body" : "`common.mustCall` variant can be used here.",
        "createdAt" : "2020-03-30T05:24:11Z",
        "updatedAt" : "2020-03-31T20:12:20Z",
        "lastEditedBy" : "086787a3-ed8a-41f9-b42f-f8357dda7fef",
        "tags" : [
        ]
      },
      {
        "id" : "4318572f-c9da-4ad7-ab05-496c46805a91",
        "parentId" : "b0f13464-19c5-4282-9fd2-f6878d47e2ad",
        "authorId" : "84392f84-0848-409d-9e1e-0627d211cf90",
        "body" : "We could, but I'm not sure we should. This test isn't checking to see if `res.end()` fires its callback or not. If the response isn't sent, the test will fail. We don't need the extra check. Adding checks that are unrelated to the test case makes it harder for someone reading the code to understand what the test is actually supposed to be testing.\r\n\r\nThis makes it sound like I'm much more opposed to the idea than I actually am. I'm on the fence, around a -0 or so.\r\n\r\nI was a -1 about 10 minutes ago, so 10 minutes from now, I'll probably be an enthusiastic +1.",
        "createdAt" : "2020-03-30T05:51:26Z",
        "updatedAt" : "2020-03-31T20:12:20Z",
        "lastEditedBy" : "84392f84-0848-409d-9e1e-0627d211cf90",
        "tags" : [
        ]
      },
      {
        "id" : "1c548665-5cfe-41d5-a773-910daa07737a",
        "parentId" : "b0f13464-19c5-4282-9fd2-f6878d47e2ad",
        "authorId" : "086787a3-ed8a-41f9-b42f-f8357dda7fef",
        "body" : "> This test isn't checking to see if res.end() fires its callback or not\r\n\r\ncorrect me if I am wrong, but isn't that the case with most of 100+ http test cases?\r\n - intent of the test does not cover explicit checking on `res.end`\r\n - but as a matter of practice, they do that check\r\nif you can generalize a statement around `whether http tests should check life cycle events are met or not` I can also work towards implementing this across other tests too.",
        "createdAt" : "2020-03-30T06:23:17Z",
        "updatedAt" : "2020-03-31T20:12:20Z",
        "lastEditedBy" : "086787a3-ed8a-41f9-b42f-f8357dda7fef",
        "tags" : [
        ]
      },
      {
        "id" : "8d0a3bee-669c-4d70-81ad-f1528715cee7",
        "parentId" : "b0f13464-19c5-4282-9fd2-f6878d47e2ad",
        "authorId" : "84392f84-0848-409d-9e1e-0627d211cf90",
        "body" : "> * intent of the test does not cover explicit checking on `res.end`\r\n> * but as a matter of practice, they do that check\r\n\r\nI'm not seeing that with `res.end()` calls. I'm using `grep` and doing a naive/superficial check, so results may be imperfect but close enough to draw reasonable conclusions:\r\n\r\n* Almost none of the 200+ calls to `res.end()` in `parallel/test-http*` have a callback wrapped in `mustCall()`. The majority of them are like the call here where `res.endI()` is called and no callback is provided.\r\n* Of those that do wrap a callback in `muscCall()`, only one file checks empty callback: `test-http-outgoing-end-multiple.js`. That makes sense for that test because it is literally checking that calling `res.end()` multiple times will work as expected.\r\n\r\nI don't think we should add a check for a callback here that we're not using. Again, I'm not strongly opposed, but I am mildly resistant. ðŸ˜€\r\n\r\n",
        "createdAt" : "2020-03-30T12:37:53Z",
        "updatedAt" : "2020-03-31T20:12:20Z",
        "lastEditedBy" : "84392f84-0848-409d-9e1e-0627d211cf90",
        "tags" : [
        ]
      },
      {
        "id" : "b396e2f8-2f7c-422d-8e4d-8d1e789cb998",
        "parentId" : "b0f13464-19c5-4282-9fd2-f6878d47e2ad",
        "authorId" : "086787a3-ed8a-41f9-b42f-f8357dda7fef",
        "body" : "I used this command `grep -e \"res.on('end\" -e \"response.on('end\" test-http*.js | grep \"mustCall\" | wc -l` and got around 50 instances. Unfortunately I don't have the insight to validate their context. so I will leave it at that. Thank you!",
        "createdAt" : "2020-03-30T14:51:53Z",
        "updatedAt" : "2020-03-31T20:12:20Z",
        "lastEditedBy" : "086787a3-ed8a-41f9-b42f-f8357dda7fef",
        "tags" : [
        ]
      }
    ],
    "commit" : "8905be2ceea9abead85a5018c09645a3650d7495",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +17,21 @@    'ABCD': '1'\n  });\n  res.end(testResBody);\n});\n"
  }
]