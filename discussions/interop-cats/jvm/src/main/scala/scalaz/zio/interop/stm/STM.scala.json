[
  {
    "id" : "d400d862-45a1-41f2-b423-e73418817c73",
    "prId" : 796,
    "prUrl" : "https://github.com/zio/zio/pull/796#pullrequestreview-232241099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55b02ffe-3647-4287-8317-7a6ef7069e99",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "No Scaladoc link?",
        "createdAt" : "2019-04-26T22:30:51Z",
        "updatedAt" : "2019-04-30T17:26:17Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "13e2d115-1c69-4d2a-8c66-6a2130936470",
        "parentId" : "55b02ffe-3647-4287-8317-7a6ef7069e99",
        "authorId" : "598bb75b-be16-43df-9bb0-985bba1a6820",
        "body" : "I did this because in this case `sbt doc` command fails with err message like `Could not find any member to link for \"scalaz.zio.stm.STM.unit\".`   I suspect this is because it sees `unit` in the `STM` class and also in companion object, and fails to resolve which `unit` to link.",
        "createdAt" : "2019-04-29T18:31:33Z",
        "updatedAt" : "2019-04-30T17:26:17Z",
        "lastEditedBy" : "598bb75b-be16-43df-9bb0-985bba1a6820",
        "tags" : [
        ]
      },
      {
        "id" : "c5374d1f-cba9-4c2d-8cc4-9f498b6bc8fb",
        "parentId" : "55b02ffe-3647-4287-8317-7a6ef7069e99",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "No worries!",
        "createdAt" : "2019-04-30T15:27:13Z",
        "updatedAt" : "2019-04-30T17:26:17Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9510235736c4729ac14dea9c75d49e1efe02366",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +136,140 @@\n  /**\n   * See scalaz.zio.stm.STM.unit\n   */\n  final def unit: STM[F, Unit] = const(())"
  },
  {
    "id" : "1ed898a5-58f7-4b47-91ea-e6a358958636",
    "prId" : 796,
    "prUrl" : "https://github.com/zio/zio/pull/796#pullrequestreview-231833231",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8d8d26e-89c2-4e65-8c4f-cee95f1d1bc4",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "No Scaladoc link?",
        "createdAt" : "2019-04-26T22:30:58Z",
        "updatedAt" : "2019-04-30T17:26:17Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "7221e4ae-211c-4839-ba9c-45ab78ca3838",
        "parentId" : "b8d8d26e-89c2-4e65-8c4f-cee95f1d1bc4",
        "authorId" : "598bb75b-be16-43df-9bb0-985bba1a6820",
        "body" : "same problem here.",
        "createdAt" : "2019-04-29T18:31:51Z",
        "updatedAt" : "2019-04-30T17:26:17Z",
        "lastEditedBy" : "598bb75b-be16-43df-9bb0-985bba1a6820",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9510235736c4729ac14dea9c75d49e1efe02366",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +141,145 @@\n  /**\n   * See scalaz.zio.stm.STM.unit\n   */\n  final def void: STM[F, Unit] = unit"
  },
  {
    "id" : "2e99afb3-3508-48a5-97e7-2f6464f3b68d",
    "prId" : 796,
    "prUrl" : "https://github.com/zio/zio/pull/796#pullrequestreview-231383269",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05d511a9-9b99-4e4a-8418-a6654fdd138e",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "This doesn't need an implicit.",
        "createdAt" : "2019-04-26T22:32:51Z",
        "updatedAt" : "2019-04-30T17:26:17Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9510235736c4729ac14dea9c75d49e1efe02366",
    "line" : 204,
    "diffHunk" : "@@ -1,1 +202,206 @@    new STM(ZSTM.fail(e))\n\n  final def foreach[F[+ _], A, B](\n    as: Iterable[A]\n  )(f: A => STM[F, B]): STM[F, List[B]] ="
  },
  {
    "id" : "a99dd485-2d0b-4c63-9660-085a87afea64",
    "prId" : 796,
    "prUrl" : "https://github.com/zio/zio/pull/796#pullrequestreview-232261248",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fdad1d4-af0a-407d-a0e0-7a2d18c3c6bf",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Looks super clean. I think you can `extend AnyVal` here, too, now.",
        "createdAt" : "2019-04-30T15:26:47Z",
        "updatedAt" : "2019-04-30T17:26:17Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "f210d914-b970-4b10-bf7e-52cbebeb134a",
        "parentId" : "8fdad1d4-af0a-407d-a0e0-7a2d18c3c6bf",
        "authorId" : "598bb75b-be16-43df-9bb0-985bba1a6820",
        "body" : "I would like to, but scala compiler has issue with nested AnyVal classes, actually it does not support this feature yet. I didn't find any workarounds at this point. Anyways I think AnyVal has a bunch of restrictions that could make all workarounds meaningless (e.g. passing underlying ZSTM as a trait or other type leads to allocation).",
        "createdAt" : "2019-04-30T16:01:15Z",
        "updatedAt" : "2019-04-30T17:26:17Z",
        "lastEditedBy" : "598bb75b-be16-43df-9bb0-985bba1a6820",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9510235736c4729ac14dea9c75d49e1efe02366",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +26,30 @@ * See [[scalaz.zio.stm.STM]]\n */\nfinal class STM[F[+ _], +A] private[stm] (private[stm] val underlying: ZSTM[Throwable, A]) {\n  self =>\n"
  },
  {
    "id" : "793060a1-b5f5-4097-92c6-a7768773160a",
    "prId" : 796,
    "prUrl" : "https://github.com/zio/zio/pull/796#pullrequestreview-232241922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "540a1275-38a5-41b2-99c7-6e7cba11534c",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Beautiful! Just this single method needs the implicit.",
        "createdAt" : "2019-04-30T15:28:36Z",
        "updatedAt" : "2019-04-30T17:26:17Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9510235736c4729ac14dea9c75d49e1efe02366",
    "line" : 180,
    "diffHunk" : "@@ -1,1 +178,182 @@object STM {\n\n  final def atomically[F[+ _], A](stm: STM[F, A])(implicit R: Runtime[Any], A: Async[F]): F[A] =\n    A.async { cb =>\n      R.unsafeRunAsync(ZSTM.atomically(stm.underlying)) { exit =>"
  }
]