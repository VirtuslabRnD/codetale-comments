[
  {
    "id" : "4c3884dd-c14d-4cca-bda1-9b105b011382",
    "prId" : 166,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2826a39f-4809-4431-b91e-0f2d4f6dfb09",
        "parentId" : null,
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "It seems like you don't clear this map between compilation units.\n",
        "createdAt" : "2016-06-14T12:59:30Z",
        "updatedAt" : "2016-06-23T08:15:47Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      },
      {
        "id" : "0cbd23fe-cc27-4b4b-b262-d1e1eb6ae805",
        "parentId" : "2826a39f-4809-4431-b91e-0f2d4f6dfb09",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "Spot on! Mutability, my old friend, strikes again. \n",
        "createdAt" : "2016-06-14T13:28:21Z",
        "updatedAt" : "2016-06-23T08:15:47Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      },
      {
        "id" : "7da9b437-1e99-4ccd-836f-6bf30f9fe0a8",
        "parentId" : "2826a39f-4809-4431-b91e-0f2d4f6dfb09",
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "Reminds me of https://github.com/scala-js/scala-js/issues/2222 and its fix https://github.com/scala-js/scala-js/commit/533da726f8aad590af2692107e901c7f9bc234ea :p\n",
        "createdAt" : "2016-06-14T13:33:40Z",
        "updatedAt" : "2016-06-23T08:15:47Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      },
      {
        "id" : "dd40765a-b187-4eed-9acf-7c713e678894",
        "parentId" : "2826a39f-4809-4431-b91e-0f2d4f6dfb09",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "Those kinds of bugs are fun. ðŸ˜„ \n",
        "createdAt" : "2016-06-14T13:37:15Z",
        "updatedAt" : "2016-06-23T08:15:47Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7a9a185cff15a9615ce0d96806c7349c4bed703",
    "line" : null,
    "diffHunk" : "@@ -1,1 +84,88 @@    private val curMethodThis = new util.ScopedVar[Val]\n\n    private val lazyAnonDefs = mutable.Map.empty[Symbol, ClassDef]\n\n    private def consumeLazyAnonDef(sym: Symbol) = {"
  },
  {
    "id" : "01c7deab-2550-4469-8112-438906eb3e8b",
    "prId" : 152,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cdba2839-b53e-4e03-aed8-57f101e3f6ed",
        "parentId" : null,
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "Could you tell me why you pin the primary constructor of classes? It might help me understand exactly what pinning does in the context of SN.\n",
        "createdAt" : "2016-06-06T13:03:51Z",
        "updatedAt" : "2016-06-07T11:16:22Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      },
      {
        "id" : "63cbd4e8-f817-436f-a77a-cb3cecd75163",
        "parentId" : "cdba2839-b53e-4e03-aed8-57f101e3f6ed",
        "authorId" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "body" : "Constructors are pinned for module classes only. This is necessary due to the fact that one never calls it explicitly, it's only being used inside the implementation of `module $name` opcode that loads a module (i.e. in generated accessor that is injected by `ModuleLowering` pass). This way if you depend on module, you'll also automatically depend on the module's constructor. \n",
        "createdAt" : "2016-06-06T13:07:48Z",
        "updatedAt" : "2016-06-07T11:16:22Z",
        "lastEditedBy" : "0f96d83b-618e-4d06-9aeb-e1d46fa92077",
        "tags" : [
        ]
      },
      {
        "id" : "eaa705c7-4e6d-4c7f-b91e-6595afc3a1bb",
        "parentId" : "cdba2839-b53e-4e03-aed8-57f101e3f6ed",
        "authorId" : "ae189121-dea4-445f-87d0-303740ceff41",
        "body" : "Ah I see.\n",
        "createdAt" : "2016-06-06T13:10:10Z",
        "updatedAt" : "2016-06-07T11:16:22Z",
        "lastEditedBy" : "ae189121-dea4-445f-87d0-303740ceff41",
        "tags" : [
        ]
      }
    ],
    "commit" : "f68847e8e5cb9b2adef959186c26035fbc9979e2",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +159,163 @@          if (!isModule(sym) || isExternModule(sym)) Seq()\n          else\n            Seq(Attr.PinAlways(genMethodName(sym.asClass.primaryConstructor)))\n        val annotated = for {\n          decl <- sym.info.decls"
  }
]