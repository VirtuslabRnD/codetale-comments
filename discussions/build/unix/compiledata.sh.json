[
  {
    "id" : "439e9e57-5920-48cd-875e-49835785a866",
    "prId" : 5618,
    "prUrl" : "https://github.com/root-project/root/pull/5618#pullrequestreview-419587606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d12fdba5-7e43-45b1-bff0-0ba01fecf9b4",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Couldn't c++ be clang++ (it is on MacOS)?",
        "createdAt" : "2020-05-14T17:06:17Z",
        "updatedAt" : "2020-05-14T17:06:17Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "b3f76937-ab0a-4cce-9ad5-afd510ad037b",
        "parentId" : "d12fdba5-7e43-45b1-bff0-0ba01fecf9b4",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "right ... handled 2 lines below ... maybe ... the question is now \"Can a Linux Clang build have an executable named c++?\"",
        "createdAt" : "2020-05-14T17:07:14Z",
        "updatedAt" : "2020-05-14T17:07:15Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "9a4020b7-66c4-4b78-87d7-11d2e7a58078",
        "parentId" : "d12fdba5-7e43-45b1-bff0-0ba01fecf9b4",
        "authorId" : "96841edc-d1ce-4b7f-b453-40962acb7831",
        "body" : "Yes, theoretically it can but I've not seen it yet. I would propose to try this and see where it breaks and then fix it. Currently it is also broken as c++ is not handled and the version return by compiledata.h is wrong.",
        "createdAt" : "2020-05-19T13:19:47Z",
        "updatedAt" : "2020-05-19T13:19:47Z",
        "lastEditedBy" : "96841edc-d1ce-4b7f-b453-40962acb7831",
        "tags" : [
        ]
      },
      {
        "id" : "84e597ce-9fde-435b-8d2c-6f953950ed6f",
        "parentId" : "d12fdba5-7e43-45b1-bff0-0ba01fecf9b4",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Fair enough.  I guess it is fine for the PR but we should really auto-detect which actual compiler c++ is ....",
        "createdAt" : "2020-05-27T20:35:24Z",
        "updatedAt" : "2020-05-27T20:35:25Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "1098581f25af7b7a1db697a8aed323549f7db482",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +76,80 @@g++* | c++*)\n   cxxTemp=`$CXX -dumpversion`\n   COMPILERVERSSTR=`$CXX --version 2>&1 | grep -i gcc`\n   COMPILERVERS=\"gcc\"\n   if [ `uname` == \"Darwin\" ]; then"
  },
  {
    "id" : "4a27dcc3-276c-45b0-9033-6bb29cf6c4b2",
    "prId" : 5618,
    "prUrl" : "https://github.com/root-project/root/pull/5618#pullrequestreview-414428719",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1be756e9-4ffc-4c08-aeb2-44943ca1612c",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Can we not just use the compiler name and version provided by CMake in `${CMAKE_CXX_COMPILER_ID}` and `${CMAKE_CXX_COMPILER_VERSION}`? This also seems redundant with the two lines right above (`COMPILER` and `COMPILERVERS`).",
        "createdAt" : "2020-05-19T08:55:41Z",
        "updatedAt" : "2020-05-19T08:55:41Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "b3818cef-4a57-4f7e-8039-61ae4e526473",
        "parentId" : "1be756e9-4ffc-4c08-aeb2-44943ca1612c",
        "authorId" : "96841edc-d1ce-4b7f-b453-40962acb7831",
        "body" : "No that is not good enough as on macOS we have an Apple clang version and official clang via brew. This would not be expressed in the CMAKE compiler macros.",
        "createdAt" : "2020-05-19T13:11:32Z",
        "updatedAt" : "2020-05-19T13:11:32Z",
        "lastEditedBy" : "96841edc-d1ce-4b7f-b453-40962acb7831",
        "tags" : [
        ]
      }
    ],
    "commit" : "1098581f25af7b7a1db697a8aed323549f7db482",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +118,122 @@echo \"#define COMPILER \\\"\"`type -path $CXX`\"\\\"\" >> ${COMPILEDATA}.tmp\necho \"#define COMPILERVERS \\\"$COMPILERVERS\\\"\" >> ${COMPILEDATA}.tmp\necho \"#define COMPILERVERSSTR \\\"$COMPILERVERSSTR\\\"\" >> ${COMPILEDATA}.tmp\nif [ \"$CUSTOMSHARED\" = \"\" ]; then\n   echo \"#define MAKESHAREDLIB  \\\"cd \\$BuildDir ; $BXX -fPIC -c \\$Opt $CXXFLAGS \\$IncludePath \\$SourceFiles ; $BXX \\$Opt \\$ObjectFiles $SOFLAGS $LDFLAGS $EXPLLINKLIBS -o \\$SharedLib\\\"\" >> ${COMPILEDATA}.tmp"
  }
]