[
  {
    "id" : "7f50bd56-65bc-4653-b270-32299bb30de4",
    "prId" : 10660,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10660#pullrequestreview-549718889",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45cd8494-be98-449b-8672-09b7484720ad",
        "parentId" : null,
        "authorId" : "c636b6d6-b0fe-41bd-bfa7-5a5625a4e7a5",
        "body" : "I know we will discuss whether dokka will still remain as a base for our doctool, but if dokka stays, we should consider making `Member` a subtype od `Documentable`, and get rid of these hacks with `DClass` wrapper :P ",
        "createdAt" : "2020-12-08T12:26:22Z",
        "updatedAt" : "2020-12-11T02:39:23Z",
        "lastEditedBy" : "c636b6d6-b0fe-41bd-bfa7-5a5625a4e7a5",
        "tags" : [
        ]
      },
      {
        "id" : "f9e3486d-e14a-43ac-90d4-5218b10d0f27",
        "parentId" : "45cd8494-be98-449b-8672-09b7484720ad",
        "authorId" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "body" : "Actually using DClass is really conviniet :)",
        "createdAt" : "2020-12-11T00:32:32Z",
        "updatedAt" : "2020-12-11T02:39:23Z",
        "lastEditedBy" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "tags" : [
        ]
      }
    ],
    "commit" : "74c45cf407ee47507cd1a8353af1886b0c2847d3",
    "line" : 541,
    "diffHunk" : "@@ -1,1 +447,451 @@    member: MemberExtension,\n    compositeExt: CompositeMemberExtension = CompositeMemberExtension.empty): Member =\n      new DClass(\n        symbol.dri,\n        symbol.normalizedName,"
  },
  {
    "id" : "3c669533-c421-4e56-948d-5633ab9836c8",
    "prId" : 10593,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10593#pullrequestreview-542903959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80bca79d-e7ff-4216-9e2e-0486f358ffd2",
        "parentId" : null,
        "authorId" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "body" : "Shouldn't that logic be placed into TASY? I mean  people may wan to parse tasty from stdlib and they will be really supprised what they will get",
        "createdAt" : "2020-12-02T14:01:14Z",
        "updatedAt" : "2020-12-02T16:19:45Z",
        "lastEditedBy" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "tags" : [
        ]
      },
      {
        "id" : "28039f30-9a89-4c01-95ee-996dd75ffea1",
        "parentId" : "80bca79d-e7ff-4216-9e2e-0486f358ffd2",
        "authorId" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "body" : "Tasty Reflect is already aware of how the compiler patches stdlib definitions. Our problem is that we rely on class bodies to document classes, and those aren't patched.\r\n\r\nWe can open a separate issue for patching class bodies as well.",
        "createdAt" : "2020-12-02T14:42:57Z",
        "updatedAt" : "2020-12-02T16:19:45Z",
        "lastEditedBy" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b7467cbe85fa67e5626bf804b966ff906169715",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +209,213 @@    def extractPatchedMembers: Seq[Member] = {\n      val ownMembers = c.extractMembers\n      def extractPatchMembers(sym: Symbol) = {\n        // NOTE for some reason scala.language$.experimental$ class doesn't show up here, so we manually add the name\n        val ownMemberDRIs = ownMembers.iterator.map(_.name).toSet + \"experimental$\""
  },
  {
    "id" : "250cb58a-7f39-4701-b41a-a668ba7c73db",
    "prId" : 10504,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10504#pullrequestreview-540047987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "193a30d2-d7a3-4e0e-91b0-a37587ee2417",
        "parentId" : null,
        "authorId" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "body" : "Will `typeSymbol` works with object? See comment above.",
        "createdAt" : "2020-11-27T13:50:42Z",
        "updatedAt" : "2020-11-27T16:37:12Z",
        "lastEditedBy" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "tags" : [
        ]
      },
      {
        "id" : "66b1094f-e263-4dda-9b86-6036d2ba8e53",
        "parentId" : "193a30d2-d7a3-4e0e-91b0-a37587ee2417",
        "authorId" : "c636b6d6-b0fe-41bd-bfa7-5a5625a4e7a5",
        "body" : "Hard to tell. Could not produce anything breaking the generation. \r\n\r\nEDIT: That was my misinterpretation\r\n\r\n~However, there is one interesting thing, for that code:~\r\n```scala\r\nobject X:\r\n  def x: Int = 1\r\n  val x2: Int = 1\r\n  var x3: Int = 1\r\n\r\nclass B:\r\n  val a = new A\r\n  export a._\r\n  export X._\r\n```\r\n\r\n~we get following output:~\r\n\r\n![obraz](https://user-images.githubusercontent.com/32793002/100462880-3627bb80-30cb-11eb-82b3-91ecc5599814.png)\r\n\r\n~I will have to check is it our bug, but it sees `x2` as `Int`, not literal `1`, which is odd, since that type is stable and safe to assume it's literal type (as it did with previous `vals`)~",
        "createdAt" : "2020-11-27T15:13:07Z",
        "updatedAt" : "2020-11-27T16:37:12Z",
        "lastEditedBy" : "c636b6d6-b0fe-41bd-bfa7-5a5625a4e7a5",
        "tags" : [
        ]
      }
    ],
    "commit" : "1efc4af5945880df5c07fbf6b24cd626da1a720a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +137,141 @@        val dri = dd.rhs.collect {\n          case s: Select if s.symbol.isDefDef => s.symbol.dri \n        }.orElse(exportedTarget.map(_.qualifier.tpe.typeSymbol.dri))\n        Some(parseMethod(dd.symbol, kind = Kind.Exported).withOrigin(Origin.ExportedFrom(s\"$instanceName.$functionName\", dri)))\n"
  },
  {
    "id" : "a82b2833-930a-412c-8e7b-46c43bbe21bd",
    "prId" : 10306,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10306#pullrequestreview-529935498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8bb9160-df14-4c1e-b0f3-ed811a291c8b",
        "parentId" : null,
        "authorId" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "body" : "Maybe we can check given methods as part of this PR?",
        "createdAt" : "2020-11-13T10:11:49Z",
        "updatedAt" : "2020-11-13T10:48:32Z",
        "lastEditedBy" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cd9d91e9f7ffb5d74b93ee43255667970e39816",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +112,116 @@          parseMethod(dd.symbol, kind = Kind.Extension(target))\n        }\n      // TODO check given methods?\n      case dd: DefDef if !dd.symbol.isHiddenByVisibility && dd.symbol.isGiven =>\n        Some(dd.symbol.owner.typeMember(dd.name))"
  },
  {
    "id" : "b6a9e4b8-662b-4a04-86c8-55126384cb14",
    "prId" : 10306,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10306#pullrequestreview-529935498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f4a1569-f073-4337-9e46-2016743347dd",
        "parentId" : null,
        "authorId" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "body" : "Can `dd.symbol.owner.typeMember(dd.name)` be a null? If not then simple `if` will be nicer to read:\r\n\r\n```\r\nif dd.symbol.owner.typeMember(dd.name).exisits then None\r\nelse Some(parseMethod(dd.symbol, kind = Kind.Given(getGivenInstance(dd).map(_.asSignature), None)))\r\n```",
        "createdAt" : "2020-11-13T10:15:03Z",
        "updatedAt" : "2020-11-13T10:48:32Z",
        "lastEditedBy" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cd9d91e9f7ffb5d74b93ee43255667970e39816",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +114,118 @@      // TODO check given methods?\n      case dd: DefDef if !dd.symbol.isHiddenByVisibility && dd.symbol.isGiven =>\n        Some(dd.symbol.owner.typeMember(dd.name))\n          .filterNot(_.exists)\n          .map { _ =>"
  },
  {
    "id" : "8aae37ca-b583-41b9-89c4-35398d2fbe85",
    "prId" : 10306,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10306#pullrequestreview-529935498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c167f3c2-bf8c-4aa9-b0db-17550875345f",
        "parentId" : null,
        "authorId" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "body" : "maybe we can exctract all this conditions to dedicated method?",
        "createdAt" : "2020-11-13T10:16:58Z",
        "updatedAt" : "2020-11-13T10:48:32Z",
        "lastEditedBy" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cd9d91e9f7ffb5d74b93ee43255667970e39816",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +127,131 @@\n      case vd: ValDef if !isSyntheticField(vd.symbol) \n        && (!vd.symbol.flags.is(Flags.Case) || !vd.symbol.flags.is(Flags.Enum)) \n        && vd.symbol.isGiven => \n          val classDef = Some(vd.tpt.tpe).flatMap(_.classSymbol.map(_.tree.asInstanceOf[ClassDef]))"
  },
  {
    "id" : "9ddb2580-5748-4f26-a378-97a6a64bc71e",
    "prId" : 10306,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10306#pullrequestreview-529935498",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc07ee97-87e2-4222-9754-32b4cd5c25fe",
        "parentId" : null,
        "authorId" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "body" : "if you first call `get` and then `copy` you can get rid of `map`",
        "createdAt" : "2020-11-13T10:47:39Z",
        "updatedAt" : "2020-11-13T10:48:32Z",
        "lastEditedBy" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cd9d91e9f7ffb5d74b93ee43255667970e39816",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +150,154 @@      case _ => None\n    }\n    val modifiedClasslikeExtension = ClasslikeExtension.getFrom(parsedClasslike).map(_.copy(\n        constructor = c.getConstructorMethod(Some(_ => \"using \"))\n      )"
  },
  {
    "id" : "6f070496-9427-41be-afbe-841f3f9c1a7a",
    "prId" : 10306,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10306#pullrequestreview-531207153",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06b6a35d-366d-46e1-bbdb-c18000a36e79",
        "parentId" : null,
        "authorId" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "body" : "This should no longer be necessary, the encoding of extension methods has changed and their names AFAIU are no longer prefixed with `extension_`.",
        "createdAt" : "2020-11-13T10:54:45Z",
        "updatedAt" : "2020-11-13T10:58:11Z",
        "lastEditedBy" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "tags" : [
        ]
      },
      {
        "id" : "1bc9a64d-c62e-4b24-a6c3-c78d056d7a7a",
        "parentId" : "06b6a35d-366d-46e1-bbdb-c18000a36e79",
        "authorId" : "8cb031fc-f40c-4d99-9506-5ae74a7f3d46",
        "body" : "In the version of `master` that this PR was based on, there were still `extension_` prefixes before every extension.",
        "createdAt" : "2020-11-16T10:47:45Z",
        "updatedAt" : "2020-11-16T10:47:45Z",
        "lastEditedBy" : "8cb031fc-f40c-4d99-9506-5ae74a7f3d46",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cd9d91e9f7ffb5d74b93ee43255667970e39816",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +269,273 @@      case Kind.Constructor => \"this\"\n      case Kind.Given(_, _) => methodSymbol.name.stripPrefix(\"given_\")\n      case Kind.Extension(_) => methodSymbol.name.stripPrefix(\"extension_\")\n      case _ => methodSymbol.name\n"
  },
  {
    "id" : "87fc4280-cecd-4d2c-b5e5-afb947591668",
    "prId" : 10306,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10306#pullrequestreview-531237212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bbd070a4-f0b1-423b-a1a5-3b41986cc486",
        "parentId" : null,
        "authorId" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "body" : "Why the indent?",
        "createdAt" : "2020-11-13T10:55:22Z",
        "updatedAt" : "2020-11-13T10:58:11Z",
        "lastEditedBy" : "3a56b927-736f-4aab-8690-358cd24ca570",
        "tags" : [
        ]
      },
      {
        "id" : "fcdec83b-05c5-45d0-985a-ca16600553c1",
        "parentId" : "bbd070a4-f0b1-423b-a1a5-3b41986cc486",
        "authorId" : "8cb031fc-f40c-4d99-9506-5ae74a7f3d46",
        "body" : "Without indent there, I've got: \r\n```[error] -- Error: /home/fzybala/dotty/scala3doc/src/dotty/dokka/tasty/ClassLikeSupport.scala:373:6 \r\n[error] 373 |      else defaultKind\r\n[error]     |      ^\r\n[error]     |The start of this line does not match any of the previous indentation widths.\r\n```",
        "createdAt" : "2020-11-16T11:30:31Z",
        "updatedAt" : "2020-11-16T11:30:31Z",
        "lastEditedBy" : "8cb031fc-f40c-4d99-9506-5ae74a7f3d46",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cd9d91e9f7ffb5d74b93ee43255667970e39816",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +368,372 @@    val kind = if valDef.symbol.flags.is(Flags.Implicit) then\n        Kind.Implicit(Kind.Val, extractImplicitConversion(valDef.tpt.tpe))\n        else defaultKind\n\n    new DProperty("
  }
]