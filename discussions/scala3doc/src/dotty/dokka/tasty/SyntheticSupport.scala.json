[
  {
    "id" : "488548f0-9d68-428b-adc0-e0db62457c69",
    "prId" : 10414,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10414#pullrequestreview-535967317",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ad8c644-987a-40a8-8c42-a017b81542df",
        "parentId" : null,
        "authorId" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "body" : "Not sure why it needs the cast --- ideally APIs in `scala.quote._` will be enough for usage, so that there is no need to use both reflect API and compiler API.",
        "createdAt" : "2020-11-21T12:53:54Z",
        "updatedAt" : "2020-11-21T12:54:04Z",
        "lastEditedBy" : "bc4c7970-6d84-475b-b408-2ed0f22a7bf3",
        "tags" : [
        ]
      },
      {
        "id" : "a91f1aba-eff6-4f34-93f8-76c1315573e0",
        "parentId" : "5ad8c644-987a-40a8-8c42-a017b81542df",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "This `hacky` method needs to be removed. Nobody should ever do this kind of cast.",
        "createdAt" : "2020-11-21T13:43:21Z",
        "updatedAt" : "2020-11-21T13:43:22Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      },
      {
        "id" : "6feaf3b7-4ea9-4173-bf60-925b0abd2c53",
        "parentId" : "5ad8c644-987a-40a8-8c42-a017b81542df",
        "authorId" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "body" : "That is in the list of TODOs",
        "createdAt" : "2020-11-21T13:44:00Z",
        "updatedAt" : "2020-11-21T13:44:01Z",
        "lastEditedBy" : "a7e5fcc8-eade-485d-96d2-94106dd74f83",
        "tags" : [
        ]
      }
    ],
    "commit" : "a10a5f61421e7d56ee895e33fe805c9b45f1c024",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +67,71 @@    import qctx.reflect._\n    import dotty.tools.dotc\n    given ctx as dotc.core.Contexts.Context = qctx.asInstanceOf[scala.quoted.runtime.impl.QuoteContextImpl].ctx\n    val sym = rsym.asInstanceOf[dotc.core.Symbols.Symbol]\n    sym.typeRef.appliedTo(sym.typeParams.map(_.typeRef)).allMembers.iterator.map(_.symbol)"
  }
]