[
  {
    "id" : "14c8a2b4-29c1-4b5b-b220-ce0f62f4156b",
    "prId" : 11183,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11183#pullrequestreview-577121105",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf4aaf3e-f49d-47dc-9b21-b2d7697ac739",
        "parentId" : null,
        "authorId" : "c636b6d6-b0fe-41bd-bfa7-5a5625a4e7a5",
        "body" : "This will probably conflict with that PR https://github.com/lampepfl/dotty/pull/11216 Though I can resolve conflicts on my own",
        "createdAt" : "2021-01-27T09:01:51Z",
        "updatedAt" : "2021-01-29T14:30:01Z",
        "lastEditedBy" : "c636b6d6-b0fe-41bd-bfa7-5a5625a4e7a5",
        "tags" : [
        ]
      },
      {
        "id" : "09bfd983-b5f2-4848-99e2-e486847a920e",
        "parentId" : "bf4aaf3e-f49d-47dc-9b21-b2d7697ac739",
        "authorId" : "c636b6d6-b0fe-41bd-bfa7-5a5625a4e7a5",
        "body" : "Note to myself, not CR ",
        "createdAt" : "2021-01-27T09:10:44Z",
        "updatedAt" : "2021-01-29T14:30:01Z",
        "lastEditedBy" : "c636b6d6-b0fe-41bd-bfa7-5a5625a4e7a5",
        "tags" : [
        ]
      }
    ],
    "commit" : "81f6a24326a27574c4fc6fd5a91346dd175e30c6",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +167,171 @@extension[T] (member: Member)\n  def asLink: LinkToType = LinkToType(member.signature, member.dri, member.kind)\n  def deprecated: Option[Annotation] =\n    member.annotations.find(_.dri.location == \"scala.deprecated\")\n"
  },
  {
    "id" : "e605fcc4-8536-45f6-8a29-78c1429b65d2",
    "prId" : 10660,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10660#pullrequestreview-548066259",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "745b49cb-7af1-4c7c-9c4f-c7be19c3aaa5",
        "parentId" : null,
        "authorId" : "c636b6d6-b0fe-41bd-bfa7-5a5625a4e7a5",
        "body" : "Why we decide to keep variance explicitly, when bounds are aggregated into `Signature`? ",
        "createdAt" : "2020-12-08T11:48:47Z",
        "updatedAt" : "2020-12-11T02:39:23Z",
        "lastEditedBy" : "c636b6d6-b0fe-41bd-bfa7-5a5625a4e7a5",
        "tags" : [
        ]
      },
      {
        "id" : "00184edd-0cd0-4747-a68d-92a4f63ae583",
        "parentId" : "745b49cb-7af1-4c7c-9c4f-c7be19c3aaa5",
        "authorId" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "body" : "variance goes before name and in some cases we would like to refer only to name without variance",
        "createdAt" : "2020-12-09T10:58:19Z",
        "updatedAt" : "2020-12-11T02:39:23Z",
        "lastEditedBy" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "tags" : [
        ]
      }
    ],
    "commit" : "74c45cf407ee47507cd1a8353af1886b0c2847d3",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +110,114 @@\ncase class TypeParameter(\n  variance: \"\" | \"+\" | \"-\",\n  name: String,\n  dri: DRI,"
  },
  {
    "id" : "46224af4-1928-4c52-9494-5858f77e80ce",
    "prId" : 10595,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10595#pullrequestreview-546243383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37d5e1c9-deb5-4d82-89b2-257f43ea1639",
        "parentId" : null,
        "authorId" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "body" : "I do not thing that we should mix non-braces and braces in our code",
        "createdAt" : "2020-12-07T14:57:28Z",
        "updatedAt" : "2020-12-07T15:03:43Z",
        "lastEditedBy" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "tags" : [
        ]
      },
      {
        "id" : "bd122992-575a-4046-89ff-9bcc02d93606",
        "parentId" : "37d5e1c9-deb5-4d82-89b2-257f43ea1639",
        "authorId" : "c636b6d6-b0fe-41bd-bfa7-5a5625a4e7a5",
        "body" : "Will change",
        "createdAt" : "2020-12-07T15:12:03Z",
        "updatedAt" : "2020-12-07T15:12:04Z",
        "lastEditedBy" : "c636b6d6-b0fe-41bd-bfa7-5a5625a4e7a5",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d452e6eccbd60ccfb10bbf3aa70bbe0168c462b",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +81,85 @@\nobject Annotation:\n  sealed trait AnnotationParameter {\n    val name: Option[String]\n  }"
  },
  {
    "id" : "d036ab8f-3a55-4217-b487-696ab0932383",
    "prId" : 10595,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/10595#pullrequestreview-546585736",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9e6858f-edd8-4af9-a533-a0c55b076336",
        "parentId" : null,
        "authorId" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "body" : "What if we are have a deprecated member from Java?",
        "createdAt" : "2020-12-07T15:00:54Z",
        "updatedAt" : "2020-12-07T15:03:43Z",
        "lastEditedBy" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "tags" : [
        ]
      },
      {
        "id" : "d668961f-4422-477f-a3f5-c048c6fa0378",
        "parentId" : "f9e6858f-edd8-4af9-a533-a0c55b076336",
        "authorId" : "c636b6d6-b0fe-41bd-bfa7-5a5625a4e7a5",
        "body" : "It depends. It still will be recognized as an annotation, though it won't have added strikethrough style. The question is: if we really find that using `java.lang.Deprecated` in Scala code should cause any special treatment. In my opinion it's user fault",
        "createdAt" : "2020-12-07T15:11:40Z",
        "updatedAt" : "2020-12-07T15:11:41Z",
        "lastEditedBy" : "c636b6d6-b0fe-41bd-bfa7-5a5625a4e7a5",
        "tags" : [
        ]
      },
      {
        "id" : "36d4839a-a08b-4024-985b-95785c8dc879",
        "parentId" : "f9e6858f-edd8-4af9-a533-a0c55b076336",
        "authorId" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "body" : "What if one want to use a Java class with deprecated members (e.g. [this one](https://docs.oracle.com/en/java/javase/13/docs/api/java.desktop/javax/swing/JComponent.AccessibleJComponent.html) )",
        "createdAt" : "2020-12-07T15:26:44Z",
        "updatedAt" : "2020-12-07T15:26:44Z",
        "lastEditedBy" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "tags" : [
        ]
      },
      {
        "id" : "9e577b67-7d8f-4a29-b473-0d28f4ea16d6",
        "parentId" : "f9e6858f-edd8-4af9-a533-a0c55b076336",
        "authorId" : "c636b6d6-b0fe-41bd-bfa7-5a5625a4e7a5",
        "body" : "You mean as a base class for Scala class... Yeah, we would like to make the Inherited methods deprecated. Will add support then",
        "createdAt" : "2020-12-07T16:04:44Z",
        "updatedAt" : "2020-12-07T16:04:44Z",
        "lastEditedBy" : "c636b6d6-b0fe-41bd-bfa7-5a5625a4e7a5",
        "tags" : [
        ]
      },
      {
        "id" : "bfa7bc73-3847-4fe6-ae74-95ebfd4db393",
        "parentId" : "f9e6858f-edd8-4af9-a533-a0c55b076336",
        "authorId" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "body" : "I think this can be done in follow up PR",
        "createdAt" : "2020-12-07T22:18:47Z",
        "updatedAt" : "2020-12-07T22:18:47Z",
        "lastEditedBy" : "6135cab1-288c-42ce-a328-e0469e2b06c8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d452e6eccbd60ccfb10bbf3aa70bbe0168c462b",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +127,131 @@  def signature: Signature = memberExt.fold(Signature(name))(_.signature)\n  def asLink: LinkToType = LinkToType(signature, dri, kind)\n  def deprecated: Option[Annotation] = memberExt.flatMap(_.annotations.find(a => a.dri.getPackageName == \"scala\" && a.dri.getClassNames == \"deprecated\"))\n\n  def modifiers: Seq[dotty.dokka.model.api.Modifier] = memberExt.fold(Nil)(_.modifiers)"
  }
]