[
  {
    "id" : "a2f291f1-5a7a-475a-940c-f0b86b277007",
    "prId" : 11183,
    "prUrl" : "https://github.com/lampepfl/dotty/pull/11183#pullrequestreview-578199603",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3585c6fc-977c-456e-b363-b08cfe936c00",
        "parentId" : null,
        "authorId" : "8cb031fc-f40c-4d99-9506-5ae74a7f3d46",
        "body" : "There was a function that decided whether to render page for member or not (Kind.Package and Kind.Classlike can be nested in e.g. Kind.Given). Without checking nested kinds we don't generate pages for all members that should have page.\r\n\r\nIt should look like\r\n```Scala\r\n    def filterFunc(kind: Kind): Boolean = kind match {\r\n      case Kind.Package => true\r\n      case _ if kind.isInstanceOf[Classlike] => true\r\n      case Kind.Given(inner, _, _) => filterFunc(inner)\r\n      case Kind.EnumCase(inner) => filterFunc(inner)\r\n      case _ => false\r\n    }\r\n    val childrenPages = member\r\n      .membersBy(m => filterFunc(m.kind))\r\n      .filter(m => m.origin == Origin.RegularlyDefined && m.inheritedFrom.isEmpty)\r\n```",
        "createdAt" : "2021-01-28T10:41:36Z",
        "updatedAt" : "2021-01-29T14:30:01Z",
        "lastEditedBy" : "8cb031fc-f40c-4d99-9506-5ae74a7f3d46",
        "tags" : [
        ]
      }
    ],
    "commit" : "81f6a24326a27574c4fc6fd5a91346dd175e30c6",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@    val childrenPages = member\n      .membersBy(m => m.kind == Kind.Package || m.kind.isInstanceOf[Classlike])\n      .filter(m => m.origin == Origin.RegularlyDefined && m.inheritedFrom.isEmpty)\n    Page(Link(member.name, member.dri), member, childrenPages.map(memberPage))\n"
  }
]