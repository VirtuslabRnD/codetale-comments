[
  {
    "id" : "8a1baf51-0d91-4402-9ef7-94294857f1f5",
    "prId" : 1781,
    "prUrl" : "https://github.com/root-project/root/pull/1781#pullrequestreview-116228855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b62fe387-4d0a-4a53-9bfc-0a95faf8f04a",
        "parentId" : null,
        "authorId" : "a7291a90-8576-4162-b01b-b44d230129f1",
        "body" : "Unecessary whitespace",
        "createdAt" : "2018-04-30T09:21:41Z",
        "updatedAt" : "2018-05-03T06:28:41Z",
        "lastEditedBy" : "a7291a90-8576-4162-b01b-b44d230129f1",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cbb7de6a4bc21fbab17ca117cfcc66d3be4dcba",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +1345,1349 @@         \n         nNodesBeforePruning = fForest.back()->BuildTree(*fTrainSample);\n         \n         if (fUseYesNoLeaf && !DoRegression() && fBoostType!=\"Grad\") { // remove leaf nodes where both daughter nodes are of same type\n            nNodesBeforePruning = fForest.back()->CleanTree();"
  },
  {
    "id" : "3ca89d09-7083-4019-9f83-50f4ef6d642a",
    "prId" : 1781,
    "prUrl" : "https://github.com/root-project/root/pull/1781#pullrequestreview-116228855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e76335b5-aa74-41c3-a98f-89a8d8dc94fe",
        "parentId" : null,
        "authorId" : "a7291a90-8576-4162-b01b-b44d230129f1",
        "body" : "This is maybe better put in external document?",
        "createdAt" : "2018-04-30T09:23:37Z",
        "updatedAt" : "2018-05-03T06:28:41Z",
        "lastEditedBy" : "a7291a90-8576-4162-b01b-b44d230129f1",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cbb7de6a4bc21fbab17ca117cfcc66d3be4dcba",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +1566,1570 @@   // get the vector of events for each terminal so that we can calculate the constant fit value in each\n   // terminal node\n   // #### Not sure how many events are in each node in advance, so I can't parallelize this easily\n   std::map<TMVA::DecisionTreeNode*,vector< TMVA::LossFunctionEventInfo > > leaves;\n   for (std::vector<const TMVA::Event*>::const_iterator e=eventSample.begin(); e!=eventSample.end();++e) {"
  },
  {
    "id" : "33c1db84-af67-4224-ae7d-ac8835d89095",
    "prId" : 1781,
    "prUrl" : "https://github.com/root-project/root/pull/1781#pullrequestreview-116228855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5535da05-9a9d-42e3-91f1-0b38e612364e",
        "parentId" : null,
        "authorId" : "a7291a90-8576-4162-b01b-b44d230129f1",
        "body" : "This is maybe better put in external document?",
        "createdAt" : "2018-04-30T09:23:43Z",
        "updatedAt" : "2018-05-03T06:28:41Z",
        "lastEditedBy" : "a7291a90-8576-4162-b01b-b44d230129f1",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cbb7de6a4bc21fbab17ca117cfcc66d3be4dcba",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +1576,1580 @@   // node (iLeave->first), vector of event information (iLeave->second)\n   // #### could parallelize this and do the leaves at the same time, but this doesn't take very long compared\n   // #### to the other processes\n   for (std::map<TMVA::DecisionTreeNode*,vector< TMVA::LossFunctionEventInfo > >::iterator iLeave=leaves.begin();\n        iLeave!=leaves.end();++iLeave){"
  }
]