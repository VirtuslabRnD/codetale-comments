[
  {
    "id" : "6a0a8a40-f56c-4db9-a565-9de69cee7d43",
    "prId" : 428,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/428#pullrequestreview-229969854",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "799033ae-7ea5-4f04-bbd9-d5bee3ff56fc",
        "parentId" : null,
        "authorId" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "body" : "`AbstractCircuitBreakerConfigurationOnMissingBean` delegates all calls to `CircuitBreakerConfiguration` except for `circuitBreakerRegistry`. Why is that?",
        "createdAt" : "2019-04-24T07:56:05Z",
        "updatedAt" : "2019-04-24T10:04:20Z",
        "lastEditedBy" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "tags" : [
        ]
      },
      {
        "id" : "45db7c90-6c65-4205-a914-be6d1be23c69",
        "parentId" : "799033ae-7ea5-4f04-bbd9-d5bee3ff56fc",
        "authorId" : "dbb24844-d7bc-47b7-a5ba-c189ef4c9f95",
        "body" : "becuase we need to do the following :\r\n\r\n```\t\tcircuitBreakerConfiguration.registerPostCreationEventConsumer(circuitBreakerRegistry, eventConsumerRegistry);\r\n\t\t// Register a consumer to hook up any health indicators for circuit breakers after creation. This will catch ones that get\r\n\t\t// created beyond initially configured backends.\r\n\t\tcircuitBreakerRegistry.registerPostCreationConsumer(this::createHeathIndicatorForCircuitBreaker);\r\n\r\n\t\t// Initialize backends that were initially configured.\r\n\t\tcircuitBreakerConfiguration.initializeBackends(circuitBreakerRegistry);\r\n```",
        "createdAt" : "2019-04-24T08:37:37Z",
        "updatedAt" : "2019-04-24T10:04:20Z",
        "lastEditedBy" : "dbb24844-d7bc-47b7-a5ba-c189ef4c9f95",
        "tags" : [
        ]
      }
    ],
    "commit" : "325567814d800cd47ff01fa9b1aef560ff5ce53b",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +51,55 @@\t@ConditionalOnMissingBean\n\tpublic CircuitBreakerRegistry circuitBreakerRegistry(EventConsumerRegistry<CircuitBreakerEvent> eventConsumerRegistry) {\n\t\tCircuitBreakerRegistry circuitBreakerRegistry = CircuitBreakerRegistry.ofDefaults();\n\n\t\t// Register the event consumers"
  },
  {
    "id" : "ce268094-cf06-42e4-bd36-0cef2fe7a8c0",
    "prId" : 428,
    "prUrl" : "https://github.com/resilience4j/resilience4j/pull/428#pullrequestreview-229960360",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "531c1725-efd4-465e-b0f6-d65e87158a44",
        "parentId" : null,
        "authorId" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "body" : "Could we initialize a Registry like this?\r\n\r\n```\r\nMap<String, CircuitBreakerConfig> configs = circuitBreakerProperties.getConfigs()\r\n    .entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey,\r\n\t\t\t\t\t\tentry -> circuitBreakerProperties.createCircuitBreakerConfig(entry.getValue())));\r\nCircuitBreakerRegistry circuitBreakerRegistry = CircuitBreakerRegistry.of(configs);\r\n```\r\n\r\nIf the Map contains no \"default\" key, then we do in the constructor of InMemoryCircuitBreakerRegistry.\r\n```CircuitBreakerConfig defaultConfiguration = configs.getOrDefault(\"default\", CircuitBreakerConfig.ofDefaults());```",
        "createdAt" : "2019-04-24T08:18:33Z",
        "updatedAt" : "2019-04-24T10:04:20Z",
        "lastEditedBy" : "2fe61b32-2803-4ae2-b54d-0aefbbf60523",
        "tags" : [
        ]
      }
    ],
    "commit" : "325567814d800cd47ff01fa9b1aef560ff5ce53b",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +51,55 @@\t@ConditionalOnMissingBean\n\tpublic CircuitBreakerRegistry circuitBreakerRegistry(EventConsumerRegistry<CircuitBreakerEvent> eventConsumerRegistry) {\n\t\tCircuitBreakerRegistry circuitBreakerRegistry = CircuitBreakerRegistry.ofDefaults();\n\n\t\t// Register the event consumers"
  }
]