[
  {
    "id" : "290660e8-1163-4a10-b18b-bf56a976cce7",
    "prId" : 13402,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/13402#pullrequestreview-13391779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9df7071b-5425-40f5-a00d-194a24b844fd",
        "parentId" : null,
        "authorId" : "cfacb38f-9c77-4c12-8932-efeca827ff36",
        "body" : "Since `options` are not optional (see next comment), `Icon` needs a constructor that accepts `IconOptions`. I also noticed I made a mistake with this. `Default` is not an instance itself, but a class that extends `Icon`. Could you please get rid of `IconDefault` and change it to something like this:\r\n\r\n```\r\nexport class Icon {\r\n   constructor(options: IconOptions);\r\n}\r\n\r\nexport namespace Icon {\r\n    export class Default extends Icon {\r\n        constructor(options?: IconOptions);\r\n        imagePath: string;\r\n    }\r\n}\r\n```",
        "createdAt" : "2016-12-17T23:07:49Z",
        "updatedAt" : "2016-12-18T19:20:43Z",
        "lastEditedBy" : "cfacb38f-9c77-4c12-8932-efeca827ff36",
        "tags" : [
        ]
      }
    ],
    "commit" : "f130d3d79aeb610ec2ad5643e8d41f702bf25a91",
    "line" : null,
    "diffHunk" : "@@ -1,1 +1349,1353 @@    export class Icon {\n        constructor(options: IconOptions);\n    }\n\n    export namespace Icon {"
  },
  {
    "id" : "4607425f-eab5-4f04-a116-0972e4de1c12",
    "prId" : 13402,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/13402#pullrequestreview-13391779",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43b74db2-b9f5-473b-a873-a6fd7fa6d64e",
        "parentId" : null,
        "authorId" : "cfacb38f-9c77-4c12-8932-efeca827ff36",
        "body" : "This guy also needs a constructor taking an optional `LayerOptions`.",
        "createdAt" : "2016-12-17T23:18:11Z",
        "updatedAt" : "2016-12-18T19:20:43Z",
        "lastEditedBy" : "cfacb38f-9c77-4c12-8932-efeca827ff36",
        "tags" : [
        ]
      }
    ],
    "commit" : "f130d3d79aeb610ec2ad5643e8d41f702bf25a91",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +391,395 @@    }\n\n    export class Layer extends Evented {\n        constructor(options?: LayerOptions);\n        addTo(map: Map): this;"
  },
  {
    "id" : "2eae0901-d8ad-44e8-a32e-906bd263436c",
    "prId" : 13686,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/13686#pullrequestreview-15231745",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36182c11-ef01-4100-b26b-125e628d7d95",
        "parentId" : null,
        "authorId" : "cfacb38f-9c77-4c12-8932-efeca827ff36",
        "body" : "Could you get rid of this interface and put the methods in the class, please.",
        "createdAt" : "2017-01-03T15:05:21Z",
        "updatedAt" : "2017-01-03T17:46:19Z",
        "lastEditedBy" : "cfacb38f-9c77-4c12-8932-efeca827ff36",
        "tags" : [
        ]
      },
      {
        "id" : "8de00d37-2366-43f2-836c-5365201e0d43",
        "parentId" : "36182c11-ef01-4100-b26b-125e628d7d95",
        "authorId" : "4acfa5e0-3a38-4e3a-9ff2-060b406de31e",
        "body" : "BLUF: We can't easily get rid of the GeoJSON interface. And, leaving them separate actually provides exactly the functionality we want in this context.\r\n\r\n\r\n**Long Version:**\r\n\r\nWhy it would be hard:\r\nTo get rid of the GeoJSON interface, we'd need to move the remaining methods over to the class. But, then we'd also need to make sure the GeoJSON class was implementing the FeatureGroup interface. But since there are no other declared classes, we can't just have GeoJSON extend FeatureGroup, we'd have to actually add all the expected methods to the GeoJSON class.\r\n\r\nWhy this approach is ok (I think):\r\nLeaflet uses factories for everything, so the typings generally don't need to define any constructors or classes. In this case, we needed to add the class so we could add static methods (since you can't declare static methods on an interface). Since we don't add a public constructor on the class, you still can't create a GeoJSON instance apart from the factory methods. But now you can call the static methods on the class.\r\n\r\nIn TS it seems that interface and class definitions of the same name are merged by the compiler. This means that the 'GeoJSON' type that is returned by the factory method that creates a GeoJSON object is returning the union of the GeoJSON class and interface methods. In our case specifically the only impact that the merge has is to make it so that we can reference the type \"GeoJSON\" with all of the interface methods, while also directly invoking static methods on the \"GeoJSON\" class (eg. GeoJSON.doStaticStuff()) - which is exactly the behavior we want.\r\n\r\nLet me know if you have an alternative approach you'd prefer.",
        "createdAt" : "2017-01-03T18:08:33Z",
        "updatedAt" : "2017-01-03T18:09:35Z",
        "lastEditedBy" : "4acfa5e0-3a38-4e3a-9ff2-060b406de31e",
        "tags" : [
        ]
      },
      {
        "id" : "50d77634-3114-4ebb-bd11-e33717d9a6dc",
        "parentId" : "36182c11-ef01-4100-b26b-125e628d7d95",
        "authorId" : "cfacb38f-9c77-4c12-8932-efeca827ff36",
        "body" : "Ok, I guess we can leave that for later since it will take more effort to validate.",
        "createdAt" : "2017-01-05T01:06:20Z",
        "updatedAt" : "2017-01-05T01:06:20Z",
        "lastEditedBy" : "cfacb38f-9c77-4c12-8932-efeca827ff36",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b6d9b01582ec90cc5bc9ace6b1320a55d2a0634",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +868,872 @@     * Allows you to parse GeoJSON data and display it on the map. Extends FeatureGroup.\n     */\n    export interface GeoJSON extends FeatureGroup {\n        /**\n         * Adds a GeoJSON object to the layer."
  },
  {
    "id" : "36e07ef5-cafd-4a24-af67-9e4fa24a408a",
    "prId" : 13686,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/13686#pullrequestreview-14977030",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "464e9e96-5444-4350-85ac-a8610e07590a",
        "parentId" : null,
        "authorId" : "4acfa5e0-3a38-4e3a-9ff2-060b406de31e",
        "body" : "This is the best compromise imo. We can't/shouldn't use union types here for the reasons I described in the main comment thread. A three tuple is assignable to a one, two, or three tuple. But a three tuple cannot be assigned to a four (or greater) tuple. Which is more restrictive than just saying it's a number array.",
        "createdAt" : "2017-01-03T17:50:04Z",
        "updatedAt" : "2017-01-03T17:50:04Z",
        "lastEditedBy" : "4acfa5e0-3a38-4e3a-9ff2-060b406de31e",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b6d9b01582ec90cc5bc9ace6b1320a55d2a0634",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +845,849 @@         * Reverse of coordsToLatLng\n         */\n        static latLngToCoords(latlng: LatLng): [number, number, number]; // A three tuple can be assigned to a two or three tuple\n\n"
  },
  {
    "id" : "e858d030-6e24-451c-a0f8-8b4d161e1f60",
    "prId" : 13954,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/13954#pullrequestreview-16585470",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e36cd0a-f418-49fe-9683-644f60ede036",
        "parentId" : null,
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "You don't need both a class and interface in a case like this. Just move the body of the interface inside the class.",
        "createdAt" : "2017-01-13T15:03:24Z",
        "updatedAt" : "2017-01-13T16:51:17Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      }
    ],
    "commit" : "91ca0d43f4efd0c74f7cc09c0eb8f644438f0f0c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +964,968 @@    }\n\n    export class Control extends Class {\n        getPosition(): ControlPosition;\n        setPosition(position: ControlPosition): this;"
  }
]