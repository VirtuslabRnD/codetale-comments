[
  {
    "id" : "9e780577-11ee-497b-862b-5f8d231a95f1",
    "prId" : 7170,
    "prUrl" : "https://github.com/root-project/root/pull/7170#pullrequestreview-588840898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f075ba1-5563-4ae8-a703-964229d30305",
        "parentId" : null,
        "authorId" : "c39c872c-e430-4427-ad40-67f327b0b930",
        "body" : "if fBufferSize > 0\r\n{\r\nfMeanVal = ...\r\n}",
        "createdAt" : "2021-02-10T14:45:04Z",
        "updatedAt" : "2021-02-12T12:42:39Z",
        "lastEditedBy" : "c39c872c-e430-4427-ad40-67f327b0b930",
        "tags" : [
        ]
      },
      {
        "id" : "82230498-4e9c-4275-9900-4270f9ebbc0f",
        "parentId" : "1f075ba1-5563-4ae8-a703-964229d30305",
        "authorId" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "body" : "right, I agree",
        "createdAt" : "2021-02-10T14:57:49Z",
        "updatedAt" : "2021-02-12T12:42:39Z",
        "lastEditedBy" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "tags" : [
        ]
      },
      {
        "id" : "18b4b4b4-1ea5-482b-a79e-3d4710d206be",
        "parentId" : "1f075ba1-5563-4ae8-a703-964229d30305",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I think just calling `GetMean()` is fine, it returns `fMeanVal` itself if `fBufferSize == 0`",
        "createdAt" : "2021-02-11T18:08:22Z",
        "updatedAt" : "2021-02-12T12:42:39Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "363a9d9d47979f2f086207c4549bbdea5edd2a3b",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +523,527 @@   Translate(67.0, angle, &xpk1, &ypk1);\n\n   fMeanVal = GetMean();\n\n   // compute x/y position of the mean mark"
  },
  {
    "id" : "2f10e9ec-ee29-46c7-8dc6-7710633016b8",
    "prId" : 7170,
    "prUrl" : "https://github.com/root-project/root/pull/7170#pullrequestreview-588840898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e945a26-65ee-4add-bf9f-64dd385dd036",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Because of line 422, don't we always have `(fBufferCount % fBufferSize) == fBufferCount` ?",
        "createdAt" : "2021-02-11T14:29:04Z",
        "updatedAt" : "2021-02-12T12:42:39Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "2396c4bd-0795-44d8-ae73-6ff6799fbbe9",
        "parentId" : "4e945a26-65ee-4add-bf9f-64dd385dd036",
        "authorId" : "c39c872c-e430-4427-ad40-67f327b0b930",
        "body" : "Yes, you're right",
        "createdAt" : "2021-02-11T14:30:19Z",
        "updatedAt" : "2021-02-12T12:42:39Z",
        "lastEditedBy" : "c39c872c-e430-4427-ad40-67f327b0b930",
        "tags" : [
        ]
      },
      {
        "id" : "e5929601-6652-4e52-9bec-a1995aeab0c4",
        "parentId" : "4e945a26-65ee-4add-bf9f-64dd385dd036",
        "authorId" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "body" : "As already mentioned, that was an extra protection in the original code...",
        "createdAt" : "2021-02-11T14:37:22Z",
        "updatedAt" : "2021-02-12T12:42:39Z",
        "lastEditedBy" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "tags" : [
        ]
      },
      {
        "id" : "391e81e2-3951-4e80-b3d6-8ba12696cd54",
        "parentId" : "4e945a26-65ee-4add-bf9f-64dd385dd036",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I agree with @pcanal , iiuc the contract is that `0 <= fBufferCount < fBufferSize`",
        "createdAt" : "2021-02-11T18:06:56Z",
        "updatedAt" : "2021-02-12T12:42:39Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "363a9d9d47979f2f086207c4549bbdea5edd2a3b",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +424,428 @@         fBuffer.push_back(fValue);\n      else\n         fBuffer[fBufferCount % fBufferSize] = fValue;\n      ++fBufferCount;\n      if (fBufferCount == fBufferSize)"
  },
  {
    "id" : "e25003b4-7a0a-4139-8e13-3e54f1b0d94d",
    "prId" : 7170,
    "prUrl" : "https://github.com/root-project/root/pull/7170#pullrequestreview-589319227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc1c8e7a-eb57-4668-b324-95ff897069a6",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "This would be a good place to explain the feature a bit better I think. E.g. mentioning the fact that `SetMeanValue` is ignored if `SetBufferSize` is called with a greater-than-zero argument, how the mean is calculated in this case, etc.",
        "createdAt" : "2021-02-11T18:03:08Z",
        "updatedAt" : "2021-02-12T12:42:39Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "593129ff-8689-4031-9bce-147f63b2062c",
        "parentId" : "fc1c8e7a-eb57-4668-b324-95ff897069a6",
        "authorId" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "body" : "You're right, I'll add some explanation",
        "createdAt" : "2021-02-12T10:03:57Z",
        "updatedAt" : "2021-02-12T12:42:39Z",
        "lastEditedBy" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "tags" : [
        ]
      }
    ],
    "commit" : "363a9d9d47979f2f086207c4549bbdea5edd2a3b",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +317,321 @@\n////////////////////////////////////////////////////////////////////////////////\n/// Change the circular buffer size (used for the automatic mean calculation).\n/// SetMeanValue is ignored if SetBufferSize is called with a greater-than-zero\n/// argument. The mean value is then automatically calculated by using the sum"
  },
  {
    "id" : "78381bfc-77f8-4ea7-b901-3e0563009f35",
    "prId" : 7170,
    "prUrl" : "https://github.com/root-project/root/pull/7170#pullrequestreview-588840898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3d7f22ff-2061-4441-aba8-9a184caf3469",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "Should protect against negative values of `size`",
        "createdAt" : "2021-02-11T18:03:51Z",
        "updatedAt" : "2021-02-12T12:42:39Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "363a9d9d47979f2f086207c4549bbdea5edd2a3b",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +324,328 @@/// argument\n\nvoid TGSpeedo::SetBufferSize(Int_t size)\n{\n   if (size < 0) size = 0;"
  },
  {
    "id" : "c6c0d3ff-a331-4c11-9a8b-af6ce8294552",
    "prId" : 7170,
    "prUrl" : "https://github.com/root-project/root/pull/7170#pullrequestreview-589301212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "72fe4d61-c443-43f4-bd42-df7cc9f56974",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "if you did a `resize` here instead of a `reserve` you wouldn't need the if/else afterwards on the condition `if ((Int_t)fBuffer.size() < (fBufferCount + 1))`. You could just always fill element number `fBufferCount`",
        "createdAt" : "2021-02-11T18:06:17Z",
        "updatedAt" : "2021-02-12T12:42:39Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "1f342b54-e10b-4cd3-876e-6538f7d249f2",
        "parentId" : "72fe4d61-c443-43f4-bd42-df7cc9f56974",
        "authorId" : "c39c872c-e430-4427-ad40-67f327b0b930",
        "body" : "The problem is that when we calculate the mean value, we average over all elements inside fBuffer. If BufferSize = 10, but we have only filled two times the buffer, one would be averaging garbage. Thus, the if/else condition is needed for the initial entries.",
        "createdAt" : "2021-02-11T19:14:21Z",
        "updatedAt" : "2021-02-12T12:42:39Z",
        "lastEditedBy" : "c39c872c-e430-4427-ad40-67f327b0b930",
        "tags" : [
        ]
      },
      {
        "id" : "da0f7369-cce1-4b72-86e1-a0dcc7ec3e24",
        "parentId" : "72fe4d61-c443-43f4-bd42-df7cc9f56974",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "What the most common operation? Adding or getting the mean?  Which ever is most common is the one you (probably) have to optimize.",
        "createdAt" : "2021-02-11T19:19:15Z",
        "updatedAt" : "2021-02-12T12:42:39Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "2f39f071-65e5-4574-9285-2c07ef030787",
        "parentId" : "72fe4d61-c443-43f4-bd42-df7cc9f56974",
        "authorId" : "c39c872c-e430-4427-ad40-67f327b0b930",
        "body" : "Every time you add, GetMean gets calculated (DrawNeedle function is called). GetMean might be also called when updating the graphics layout. So I would say GetMean is called more often than adding. Thus the if-else when adding is better than having it in the mean, I guess.",
        "createdAt" : "2021-02-11T19:23:24Z",
        "updatedAt" : "2021-02-12T12:42:39Z",
        "lastEditedBy" : "c39c872c-e430-4427-ad40-67f327b0b930",
        "tags" : [
        ]
      },
      {
        "id" : "f8228788-9eda-4752-9653-f623b497f52f",
        "parentId" : "72fe4d61-c443-43f4-bd42-df7cc9f56974",
        "authorId" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "body" : "@eguiraud that was my first implementation, but after discussion with @ferdymercury I agreed that the mean was then wrongly calculated until the buffer is full (which is harmless most of the time...) ",
        "createdAt" : "2021-02-12T09:40:18Z",
        "updatedAt" : "2021-02-12T12:42:39Z",
        "lastEditedBy" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "tags" : [
        ]
      }
    ],
    "commit" : "363a9d9d47979f2f086207c4549bbdea5edd2a3b",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +329,333 @@   fBufferSize = size;\n   fBuffer.clear();\n   fBuffer.reserve(fBufferSize);\n   fBufferCount = 0;\n}"
  }
]