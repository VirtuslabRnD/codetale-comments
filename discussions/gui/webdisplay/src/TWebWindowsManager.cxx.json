[
  {
    "id" : "dc5c56a4-0692-4d42-b031-5e43015cea53",
    "prId" : 2487,
    "prUrl" : "https://github.com/root-project/root/pull/2487#pullrequestreview-149334519",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96aa30be-e925-48b9-baff-5f071137a39b",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "I don't understand that pattern. Is this asserting that `~TWebWindowManagerGuard()` is releasing not more than what has been locked? I don't think that's needed? Maybe use an atomic in the manager itself, and assert in there that the amount of connections stays positive?",
        "createdAt" : "2018-08-23T22:08:44Z",
        "updatedAt" : "2018-08-24T14:54:18Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "74805802-e9d6-462f-8163-3aee7135d64d",
        "parentId" : "96aa30be-e925-48b9-baff-5f071137a39b",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "It is same story with booked mutex I explained before.\r\nHere is just extra check for some fatal error, which should never happens",
        "createdAt" : "2018-08-24T14:46:56Z",
        "updatedAt" : "2018-08-24T14:54:19Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b80ffa0b0dc5c64fd2f792943e625c8f88d201a",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +75,79 @@      {\n         std::lock_guard<std::mutex> grd(fMgr.fMutex);\n         if (!fMgr.fMutexBooked) {\n            R__ERROR_HERE(\"WebDisplay\") << \"fMutexBooked counter is empty - fatal error\";\n         } else {"
  },
  {
    "id" : "a0cfe823-367f-4748-97f0-25856e9bbc98",
    "prId" : 2487,
    "prUrl" : "https://github.com/root-project/root/pull/2487#pullrequestreview-149336238",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ef7b38c-bc5a-435a-a10f-8cb05836159b",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Can this static be put inside a function, please? That reduces sequencing issues of static initialization.",
        "createdAt" : "2018-08-23T22:12:58Z",
        "updatedAt" : "2018-08-24T14:54:19Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "387aa534-024a-4621-acdd-ab94527f265c",
        "parentId" : "6ef7b38c-bc5a-435a-a10f-8cb05836159b",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "This I mentioned before - it is just workaround, which I would like to be solved by ROOT.\r\nBut in current form I really want to have initialization at the moment when library is loaded - I see no other way to \"ping\" main thread ",
        "createdAt" : "2018-08-24T14:51:07Z",
        "updatedAt" : "2018-08-24T14:54:19Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b80ffa0b0dc5c64fd2f792943e625c8f88d201a",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +116,120 @@/// Main thread can only make sense if special processing runs there and one can inject own functionality there\n\nstatic std::thread::id gWebWinMainThrd = std::this_thread::get_id();\n\n//////////////////////////////////////////////////////////////////////////////////////////"
  },
  {
    "id" : "4b6dbf2e-a9e9-42ac-8835-265fbe2184bf",
    "prId" : 2603,
    "prUrl" : "https://github.com/root-project/root/pull/2603#pullrequestreview-156463807",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9cb9518a-95f1-43a3-990a-629475eb7ba5",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "This function has 360 lines. Please consider splitting it into smaller functional parts.",
        "createdAt" : "2018-09-18T12:26:11Z",
        "updatedAt" : "2018-09-19T11:54:29Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "fcdd285a-4534-4381-864c-c168752359ce",
        "parentId" : "9cb9518a-95f1-43a3-990a-629475eb7ba5",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Yes, It is large, but I prefer to keep it central. At least for now,\r\n",
        "createdAt" : "2018-09-18T16:45:27Z",
        "updatedAt" : "2018-09-19T11:54:29Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50a80e8598c41c6337c30fa8f3ebc0179cd5252",
    "line" : 228,
    "diffHunk" : "@@ -1,1 +358,362 @@///   WebGui.OperationTmout: time required to perform WebWindow operation like execute command or update drawings\n\nunsigned ROOT::Experimental::TWebWindowsManager::Show(ROOT::Experimental::TWebWindow &win, bool batch_mode, const std::string &_where)\n{\n   // we book manager mutex for a longer operation,"
  },
  {
    "id" : "1a9bc941-59af-40b9-80fb-a66107b7ded3",
    "prId" : 2603,
    "prUrl" : "https://github.com/root-project/root/pull/2603#pullrequestreview-156315170",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2df029e-cad2-4d4f-8265-931c518094cb",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Comment on lines 455++: please please please split this into separate lines! Else this totally looks like a complex boolean expression, not four simple ones!",
        "createdAt" : "2018-09-18T12:27:58Z",
        "updatedAt" : "2018-09-19T11:54:29Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "2a0c99ba-b16a-4348-8698-fc6e579fbb32",
        "parentId" : "f2df029e-cad2-4d4f-8265-931c518094cb",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Comment on lines 455++: these seem to be \"exclusive\" booleans. Please introduce an `enum EWhere { kNative, kLocal, kChrome, kFirefox}`.",
        "createdAt" : "2018-09-18T12:29:01Z",
        "updatedAt" : "2018-09-19T11:54:29Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50a80e8598c41c6337c30fa8f3ebc0179cd5252",
    "line" : 263,
    "diffHunk" : "@@ -1,1 +389,393 @@   if (addr.find(\"?\") != std::string::npos)\n      addr.append(\"&key=\");\n   else\n      addr.append(\"?key=\");\n   addr.append(key);"
  },
  {
    "id" : "c28f1257-baac-4a3e-b93e-a248746016f6",
    "prId" : 2603,
    "prUrl" : "https://github.com/root-project/root/pull/2603#pullrequestreview-156518738",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b762b855-0701-4528-81ca-3b38b9799dde",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "The `#ifdef R__HAS_CEFWEB` and similar parts look like good candidates for splitting into separate functions?",
        "createdAt" : "2018-09-18T12:30:17Z",
        "updatedAt" : "2018-09-19T11:54:29Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "38ee3b55-3041-49f7-be38-ee84e8d3bbb4",
        "parentId" : "b762b855-0701-4528-81ca-3b38b9799dde",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "But exactly because of ifdef I do not like to split. \r\nThat to sense declare function for the module (CEF), which never appears for normal user?\r\n",
        "createdAt" : "2018-09-18T17:00:03Z",
        "updatedAt" : "2018-09-19T11:54:29Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "22962ff5-1077-42da-8185-91d0903e7845",
        "parentId" : "b762b855-0701-4528-81ca-3b38b9799dde",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Private member function, or even `static`, source-only function will do. I'm not saying that this should become part of the class's interface. But I understand your argument that this function will still evolve.",
        "createdAt" : "2018-09-18T18:55:33Z",
        "updatedAt" : "2018-09-19T11:54:30Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50a80e8598c41c6337c30fa8f3ebc0179cd5252",
    "line" : 305,
    "diffHunk" : "@@ -1,1 +430,434 @@      if (symbol_cef) {\n\n         if (batch_mode) {\n            const char *displ = gSystem->Getenv(\"DISPLAY\");\n            if (!displ || !*displ) {"
  },
  {
    "id" : "f69e63c1-9e11-4e86-8096-7e5baab93e34",
    "prId" : 2603,
    "prUrl" : "https://github.com/root-project/root/pull/2603#pullrequestreview-156477227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53cae6fd-ac1b-45e9-b193-12da4cc3bed3",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "I understand that this is a convenient and http-style mechanism (strings everywhere). I'd nonetheless very much prefer to provide a \"destruction callback\" mechanism instead, where you pass in a lambda that unlinks the profile directory. Like that, all that profile handling remains in this function, instead of file system operations leaking into `HaltClient()`",
        "createdAt" : "2018-09-18T12:43:07Z",
        "updatedAt" : "2018-09-19T11:54:29Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "1d266594-ba52-43cf-a55e-358e155fa4e9",
        "parentId" : "53cae6fd-ac1b-45e9-b193-12da4cc3bed3",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Please, in next PR. This object has to `travel` over many instances.",
        "createdAt" : "2018-09-18T17:17:03Z",
        "updatedAt" : "2018-09-19T11:54:29Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50a80e8598c41c6337c30fa8f3ebc0179cd5252",
    "line" : 557,
    "diffHunk" : "@@ -1,1 +715,719 @@   exec.ReplaceAll(\"$prog\", prog.Data());\n\n   unsigned connid = win.AddProcId(batch_mode, key, where + rmdir); // for now just application name\n\n   R__DEBUG_HERE(\"WebDisplay\") << \"Showing web window in browser with:\\n\" << exec;"
  },
  {
    "id" : "f1495a95-837c-4de2-a82f-5c2075c90f33",
    "prId" : 2603,
    "prUrl" : "https://github.com/root-project/root/pull/2603#pullrequestreview-156763597",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29a92177-7053-48d4-b6be-b192721c9ace",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Where is the meaning of `-3` documented?",
        "createdAt" : "2018-09-18T12:44:10Z",
        "updatedAt" : "2018-09-19T11:54:29Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "1ad01132-ddd4-47c7-a13a-0e8c5c3db3d7",
        "parentId" : "29a92177-7053-48d4-b6be-b192721c9ace",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Not yet. \r\nIdea to have positive for some user-defined result and 0 or negative for errors.\r\n",
        "createdAt" : "2018-09-18T17:24:02Z",
        "updatedAt" : "2018-09-19T11:54:29Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "60e8183e-bbac-460d-9b01-91c7e5b60228",
        "parentId" : "29a92177-7053-48d4-b6be-b192721c9ace",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Please consider introducing an enum for user-facing error codes. In a subsequent PR :-)",
        "createdAt" : "2018-09-19T09:53:36Z",
        "updatedAt" : "2018-09-19T11:54:30Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "9608b113-7246-48d1-a692-ed28ae554998",
        "parentId" : "29a92177-7053-48d4-b6be-b192721c9ace",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "May be. It is still not very clear which interface here should be exposed to users.",
        "createdAt" : "2018-09-19T10:57:20Z",
        "updatedAt" : "2018-09-19T11:54:30Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50a80e8598c41c6337c30fa8f3ebc0179cd5252",
    "line" : 637,
    "diffHunk" : "@@ -1,1 +799,803 @@\n      if (timed && (spent > timelimit))\n         return -3;\n\n      cnt++;"
  },
  {
    "id" : "1b3bab76-6b62-495f-b2e6-74fb5ade8096",
    "prId" : 2603,
    "prUrl" : "https://github.com/root-project/root/pull/2603#pullrequestreview-156763137",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "01f07e66-bcc6-4bb3-b9ad-e8c154473b02",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "`else if (!where.empty())` error?",
        "createdAt" : "2018-09-19T09:52:01Z",
        "updatedAt" : "2018-09-19T11:54:30Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "92830534-b881-4bf4-b041-01cb14d6585d",
        "parentId" : "01f07e66-bcc6-4bb3-b9ad-e8c154473b02",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Not error - it can be name of alternative web browser. \r\nI add more code and more comments",
        "createdAt" : "2018-09-19T10:55:57Z",
        "updatedAt" : "2018-09-19T11:54:30Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50a80e8598c41c6337c30fa8f3ebc0179cd5252",
    "line" : 285,
    "diffHunk" : "@@ -1,1 +410,414 @@      kind = kCEF;\n   else if (where == \"qt5\")\n      kind = kQt5;\n   else\n      kind = kCustom; // all others kinds, normally name of alternative web browser"
  }
]