[
  {
    "id" : "d28c46ec-811d-417e-ad47-0ec16dc7ad23",
    "prId" : 1785,
    "prUrl" : "https://github.com/root-project/root/pull/1785#pullrequestreview-111242085",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e9164d2-8271-4dee-8493-69f71629cdfe",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Please use `delete [] fBuffer`.",
        "createdAt" : "2018-04-11T11:01:04Z",
        "updatedAt" : "2018-04-11T13:49:19Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "e9035a0d-6aeb-4a61-a361-827e650bf0d6",
        "parentId" : "7e9164d2-8271-4dee-8493-69f71629cdfe",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "No longer exists",
        "createdAt" : "2018-04-11T14:01:33Z",
        "updatedAt" : "2018-04-11T14:01:33Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "8ee23ca08fb4d100608c111a02a1df07ee58b71f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +73,77 @@{\n   if (fOwner && fBuffer)\n      free((void *)fBuffer);\n}\n"
  },
  {
    "id" : "821270fc-fe6c-4051-a61e-e5c9f19a5d60",
    "prId" : 1852,
    "prUrl" : "https://github.com/root-project/root/pull/1852#pullrequestreview-112825434",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb7e2346-7c51-4d94-a7dd-1693ee9e04a4",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "This version is bounds-safer and should be as performant:\r\n```\r\nbuf.reserve(len);\r\nstd::copy(data, data + len, buf.begin());\r\n```\r\n",
        "createdAt" : "2018-04-17T11:49:07Z",
        "updatedAt" : "2018-04-17T11:55:28Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "d7166154-68eb-4e5d-8883-04054bedd920",
        "parentId" : "cb7e2346-7c51-4d94-a7dd-1693ee9e04a4",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "I tried also this version:\r\n\r\n      buf.reserve(len);\r\n      std::copy((const char *)data, (const char *)data + len, (char *)buf.begin());\r\n\r\nBut none of them compiled",
        "createdAt" : "2018-04-17T12:47:16Z",
        "updatedAt" : "2018-04-17T12:47:16Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "2cc9d19b-dcff-4c4d-85d6-5bd342fc6d36",
        "parentId" : "cb7e2346-7c51-4d94-a7dd-1693ee9e04a4",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Beside this change - all other I address in following PR",
        "createdAt" : "2018-04-17T12:47:53Z",
        "updatedAt" : "2018-04-17T12:47:53Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "66031c31-de71-42c5-a2a5-e4f7ebdbb99b",
        "parentId" : "cb7e2346-7c51-4d94-a7dd-1693ee9e04a4",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Well as I said before: if you have an array of bytes then it's `const char*`. If you have a pointer to an unknown const type it's `const void*`. Here it's bytes, and thus this works: \r\n```\r\n#include <string>\r\n#include <utility>\r\n\r\nvoid foo(const char *data, std::size_t len) {\r\n    std::string buf;\r\n    buf.resize(len);\r\n    std::copy(data, data+len, buf.begin());\r\n}\r\n```",
        "createdAt" : "2018-04-17T13:48:41Z",
        "updatedAt" : "2018-04-17T13:48:41Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "ae6719a4-cf62-408a-82a2-8a4bc390093e",
        "parentId" : "cb7e2346-7c51-4d94-a7dd-1693ee9e04a4",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Finally - https://github.com/linev/root/commit/e792b7ee8691ddc59af2b4c4e5a51290ce48f074",
        "createdAt" : "2018-04-17T14:06:36Z",
        "updatedAt" : "2018-04-17T14:06:36Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "6a242622da167c971ce4bec7bc446c9706a3fc52",
    "line" : 205,
    "diffHunk" : "@@ -1,1 +474,478 @@   std::string buf;\n   buf.resize(len);\n   memcpy((void *)buf.data(), data, len);\n   SubmitData(connid, false, std::move(buf), 1);\n}"
  },
  {
    "id" : "28083941-2145-4270-9732-01a756d00abe",
    "prId" : 2487,
    "prUrl" : "https://github.com/root-project/root/pull/2487#pullrequestreview-149325155",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac5e5d92-29a9-48e8-bf7b-44ba8e5af9e6",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Can you use `std::find_if()` instead of looping and returning from inside the loop?",
        "createdAt" : "2018-08-23T13:20:46Z",
        "updatedAt" : "2018-08-24T14:54:18Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "9fd1719f-71a0-4e8f-a041-9fb1e2c79946",
        "parentId" : "ac5e5d92-29a9-48e8-bf7b-44ba8e5af9e6",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "> Can you use std::find_if()\r\n\r\nI can not. I not only search for entry in the vector, but also delete it - therefore I need position of entry. Plus I want to use std::move here to avoid unnecessary copies of shared_ptr",
        "createdAt" : "2018-08-24T14:24:39Z",
        "updatedAt" : "2018-08-24T14:54:19Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b80ffa0b0dc5c64fd2f792943e625c8f88d201a",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +169,173 @@   std::lock_guard<std::mutex> grd(fConnMutex);\n\n   for (size_t n=0; n<fConn.size();++n)\n      if (fConn[n]->fWSId == wsid) {\n         std::shared_ptr<WebConn> res = std::move(fConn[n]);"
  },
  {
    "id" : "ae6b517e-8944-4866-b33a-95195ae8d088",
    "prId" : 2487,
    "prUrl" : "https://github.com/root-project/root/pull/2487#pullrequestreview-149327053",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5a41425-931a-4652-8651-089960c2ad34",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Should this be an `R__ERROR_HERE`?",
        "createdAt" : "2018-08-23T13:22:58Z",
        "updatedAt" : "2018-08-24T14:54:18Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "89a80793-09a8-49d1-a28e-0f43932df7c2",
        "parentId" : "c5a41425-931a-4652-8651-089960c2ad34",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "No, it is not an error.\r\nI just check in which thread am I and can I invoke callbacks.",
        "createdAt" : "2018-08-24T14:29:09Z",
        "updatedAt" : "2018-08-24T14:54:19Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b80ffa0b0dc5c64fd2f792943e625c8f88d201a",
    "line" : 166,
    "diffHunk" : "@@ -1,1 +200,204 @@void ROOT::Experimental::TWebWindow::InvokeCallbacks(bool force)\n{\n   if ((fDataThrdId != std::this_thread::get_id()) && !force)\n      return;\n"
  },
  {
    "id" : "054d8ce5-3a8b-4903-af62-b46aa77eb2cb",
    "prId" : 2487,
    "prUrl" : "https://github.com/root-project/root/pull/2487#pullrequestreview-148896853",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c9a2b16-faad-47a8-ac2b-31638bee72e3",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Beautiful!",
        "createdAt" : "2018-08-23T13:24:34Z",
        "updatedAt" : "2018-08-24T14:54:18Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b80ffa0b0dc5c64fd2f792943e625c8f88d201a",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +211,215 @@         if (fDataQueue.size() == 0)\n            return;\n         DataEntry &entry = fDataQueue.front();\n         connid = entry.fConnId;\n         arg = std::move(entry.fData);"
  },
  {
    "id" : "2488d465-bca6-4d40-af8b-ada772365b48",
    "prId" : 2487,
    "prUrl" : "https://github.com/root-project/root/pull/2487#pullrequestreview-149330689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3271f90b-9326-4675-808e-8294dba931a2",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "How would a user change the thread id?\r\n\r\nIs this meant to say \"You are calling Run() from the wrong thread\"?",
        "createdAt" : "2018-08-23T14:41:25Z",
        "updatedAt" : "2018-08-24T14:54:18Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "fa0927f3-e32e-4fef-a1fa-d8ed45ca4441",
        "parentId" : "3271f90b-9326-4675-808e-8294dba931a2",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Thread id assigned when callback function is set.\r\nI was thinking to provide extra method for that.\r\nWe could keep it as warning",
        "createdAt" : "2018-08-24T14:37:57Z",
        "updatedAt" : "2018-08-24T14:54:19Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b80ffa0b0dc5c64fd2f792943e625c8f88d201a",
    "line" : 701,
    "diffHunk" : "@@ -1,1 +761,765 @@{\n   if (fDataThrdId != std::this_thread::get_id()) {\n      R__WARNING_HERE(\"webgui\") << \"Change thread id where TWebWindow is executed\";\n      fDataThrdId = std::this_thread::get_id();\n   }"
  },
  {
    "id" : "b816ed00-7400-45eb-9174-aab94020cd6f",
    "prId" : 2603,
    "prUrl" : "https://github.com/root-project/root/pull/2603#pullrequestreview-156439682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "865ab7ec-bec6-4d53-bfff-b15776b204c9",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "See my comment above about splitting the functionality.",
        "createdAt" : "2018-09-18T11:49:04Z",
        "updatedAt" : "2018-09-19T11:54:29Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "17c76e1a-4765-4e16-9d57-606c919104e1",
        "parentId" : "865ab7ec-bec6-4d53-bfff-b15776b204c9",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Done",
        "createdAt" : "2018-09-18T15:49:48Z",
        "updatedAt" : "2018-09-19T11:54:29Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50a80e8598c41c6337c30fa8f3ebc0179cd5252",
    "line" : 171,
    "diffHunk" : "@@ -1,1 +235,239 @@\n   // put code to create new connection here to stay under same locked mutex\n   if (make_new) {\n      // check if key was registered already\n"
  },
  {
    "id" : "4a4782f1-cac2-4218-baba-d93822509406",
    "prId" : 2603,
    "prUrl" : "https://github.com/root-project/root/pull/2603#pullrequestreview-156753383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea7cd670-f66f-49eb-af6e-0f483a05d91b",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Why are processes and connections treated the same, i.e. share the space of keys? This seems wasteful - don't you always know whether you're looking for a process or a connection?",
        "createdAt" : "2018-09-18T11:56:52Z",
        "updatedAt" : "2018-09-19T11:54:29Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "d2222a6d-6df2-4074-b381-06d08bd47a2c",
        "parentId" : "ea7cd670-f66f-49eb-af6e-0f483a05d91b",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Process and connection (with key) are equivalent in some sense. \r\nOne starts browser, allowing to establish the only connection with WebWindow.\r\nKey used to be able correctly identify which process is trying to connect.",
        "createdAt" : "2018-09-18T15:59:53Z",
        "updatedAt" : "2018-09-19T11:54:29Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "3d864b72-3909-418d-8ca5-7e305110d198",
        "parentId" : "ea7cd670-f66f-49eb-af6e-0f483a05d91b",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "But when looking for something given a key, don't you always know which container to look at, i.e. whether you're looking for a connection or a process?",
        "createdAt" : "2018-09-19T09:10:34Z",
        "updatedAt" : "2018-09-19T11:54:30Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "7575017e-e9dc-4798-a9e2-a60018aad6d3",
        "parentId" : "ea7cd670-f66f-49eb-af6e-0f483a05d91b",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Key is abstract string, which is provided to browser process - now via URL. \r\nAt the beginning I store key plus process id as entry in list of pending connections.\r\nOnce browser is up and establishes connection - entry moved to list of active connections.",
        "createdAt" : "2018-09-19T09:25:12Z",
        "updatedAt" : "2018-09-19T11:54:30Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      },
      {
        "id" : "15ae4172-74e4-4be1-be12-1a5d1c9a27ee",
        "parentId" : "ea7cd670-f66f-49eb-af6e-0f483a05d91b",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "I just change member name - now it is fPendingConn instead of fKeys. This was in beginning simple vector of strings, now is much more complicated",
        "createdAt" : "2018-09-19T10:26:35Z",
        "updatedAt" : "2018-09-19T11:54:30Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50a80e8598c41c6337c30fa8f3ebc0179cd5252",
    "line" : 281,
    "diffHunk" : "@@ -1,1 +394,398 @@\n//////////////////////////////////////////////////////////////////////////////////////////\n/// Returns true if provided key value already exists (in processes map or in existing connections)\n\nbool ROOT::Experimental::TWebWindow::HasKey(const std::string &key)"
  },
  {
    "id" : "347eeaf6-0909-40a9-9b73-f16fffa83279",
    "prId" : 2603,
    "prUrl" : "https://github.com/root-project/root/pull/2603#pullrequestreview-156450162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d691863-170c-40fc-9997-3a4829ddf61e",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "`Check` sounds like it might print an error message. Or maybe return `true` if good and `false` if bad. But this function seems to do much more. Maybe `WaitForWebKeysAndHalt()`?",
        "createdAt" : "2018-09-18T12:05:45Z",
        "updatedAt" : "2018-09-19T11:54:29Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "856a2c6e-e6f9-4cd1-b865-9c2e0a51fd40",
        "parentId" : "8d691863-170c-40fc-9997-3a4829ddf61e",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Function is not waits - it really regularly check if something went wrong.\r\nIt is part of main polling function, which must be regularly called from the appropriate thread.\r\nBy default function called every milliseconds",
        "createdAt" : "2018-09-18T16:12:56Z",
        "updatedAt" : "2018-09-19T11:54:29Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50a80e8598c41c6337c30fa8f3ebc0179cd5252",
    "line" : 304,
    "diffHunk" : "@@ -1,1 +417,421 @@/// Method invoked from http server thread, therefore appropriate mutex must be used on all relevant data\n\nvoid ROOT::Experimental::TWebWindow::CheckWebKeys()\n{\n   if (!fMgr) return;"
  },
  {
    "id" : "d0aee4d1-deea-4adf-a5dd-33742b0e15bd",
    "prId" : 2603,
    "prUrl" : "https://github.com/root-project/root/pull/2603#pullrequestreview-156450359",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57f4a105-7c21-4a5c-9184-c12661bf5659",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "See comment regarding `WaitForWebKeysAndHalt()`",
        "createdAt" : "2018-09-18T12:06:26Z",
        "updatedAt" : "2018-09-19T11:54:29Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "2c56fc52-bb70-45b7-878f-621394bdac47",
        "parentId" : "57f4a105-7c21-4a5c-9184-c12661bf5659",
        "authorId" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "body" : "Same answer - is not waiting but cleanup inactive connection (if any)",
        "createdAt" : "2018-09-18T16:13:25Z",
        "updatedAt" : "2018-09-19T11:54:29Z",
        "lastEditedBy" : "e4571402-a12a-4377-8cca-960e88b81e3d",
        "tags" : [
        ]
      }
    ],
    "commit" : "a50a80e8598c41c6337c30fa8f3ebc0179cd5252",
    "line" : 341,
    "diffHunk" : "@@ -1,1 +454,458 @@/// For instance, batch browser will be stopped if no activity for 30 sec is there\n\nvoid ROOT::Experimental::TWebWindow::CheckInactiveConnections()\n{\n   timestamp_t stamp = std::chrono::system_clock::now();"
  }
]