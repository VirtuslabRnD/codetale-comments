[
  {
    "id" : "85e7cd4c-ba20-4c94-9e0d-aa19ad50ba76",
    "prId" : 6731,
    "prUrl" : "https://github.com/apache/kafka/pull/6731#pullrequestreview-239171698",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "acf5962a-044b-47f7-8a95-64a28076be7a",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Do we want to let this be nullable? Looks like we are using null in a few test cases below.",
        "createdAt" : "2019-05-17T16:43:17Z",
        "updatedAt" : "2019-05-17T21:55:02Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "67cc3e42-c27a-46c0-b5af-be449ab2e03c",
        "parentId" : "acf5962a-044b-47f7-8a95-64a28076be7a",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Discussed separately. We'll leave this non-nullable with \"\" as the default.",
        "createdAt" : "2019-05-17T23:55:15Z",
        "updatedAt" : "2019-05-17T23:55:15Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c7c0bdc761dc4bb68e0ec59c113abb4a834901d",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +86,90 @@        \"about\": \"The partitions indexes to forget.\" }\n    ]},\n    { \"name\": \"RackId\", \"type\":  \"string\", \"versions\": \"11+\", \"default\": \"\", \"ignorable\": true,\n      \"about\": \"Rack ID of the consumer making this request\"}\n  ]"
  },
  {
    "id" : "cf2c3297-4bf8-4e63-8956-24b46cf4c9ba",
    "prId" : 9008,
    "prUrl" : "https://github.com/apache/kafka/pull/9008#pullrequestreview-457692233",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "632fc234-ac57-4193-afb7-55e7cdbe481d",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I guess the implicit expectation is that if the protocol does not support the `read_committed` isolation level, then it wouldn't have transactional data anyway, so reverting to `read_uncommitted` is safe. Can't find a fault with that.",
        "createdAt" : "2020-07-27T21:12:47Z",
        "updatedAt" : "2020-07-29T17:20:05Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "a829ceda-4dfe-4150-824e-8c66357de166",
        "parentId" : "632fc234-ac57-4193-afb7-55e7cdbe481d",
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "I changed this to make the JSON schema match what was previously in FetchRequest.java. During serialization, we would simply stick the isolation level in the Struct regardless of the api version:\r\n\r\n```java\r\nstruct.setIfExists(ISOLATION_LEVEL, isolationLevel.id());\r\n```\r\n\r\nSo even if we were writing out a v3 FetchRequest, whatever value we put here would be ignored and not sent out. There were also some unit tests that utilized this behavior.\r\n\r\nYour assessment sounds correct though, so it probably doesn't matter whether it's ignorable or not. ",
        "createdAt" : "2020-07-29T16:29:52Z",
        "updatedAt" : "2020-07-29T17:20:05Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      }
    ],
    "commit" : "507eb047ba0f652f7781d80e35c8d8c262ccb9f5",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +56,60 @@    { \"name\": \"MaxBytes\", \"type\": \"int32\", \"versions\": \"3+\", \"default\": \"0x7fffffff\", \"ignorable\": true,\n      \"about\": \"The maximum bytes to fetch.  See KIP-74 for cases where this limit may not be honored.\" },\n    { \"name\": \"IsolationLevel\", \"type\": \"int8\", \"versions\": \"4+\", \"default\": \"0\", \"ignorable\": true,\n      \"about\": \"This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records\" },\n    { \"name\": \"SessionId\", \"type\": \"int32\", \"versions\": \"7+\", \"default\": \"0\", \"ignorable\": true,"
  }
]