[
  {
    "id" : "94b7466d-296b-4845-854b-fff3f61631da",
    "prId" : 5520,
    "prUrl" : "https://github.com/apache/kafka/pull/5520#pullrequestreview-147857923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "824514b9-5e0b-4412-b8b6-90502b26edd5",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "why do we need to `synchronized` a private method?\r\n\r\nI was just looking into `trunk` and it seems to be `synchronized` there, too. Also, some methods are `synchronized` others are not, but I could not see any pattern. Should we just `synchronized` all public method? Performance should not be a concern for `MockProducer`. On the other hand, when would a producer be used by multiple threads? Neither `KafkaConsumer` nor `KafkaProducer` are thread-safe by design. Why does `MockProducer` need to be thread-safe?",
        "createdAt" : "2018-08-16T22:49:59Z",
        "updatedAt" : "2018-08-20T23:23:15Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "0592431a-26b9-48bc-8b15-c544f9009cb2",
        "parentId" : "824514b9-5e0b-4412-b8b6-90502b26edd5",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I added it in the prior PRs because findbugs complained that some, but not all, accesses of the \"am I fenced\" field are synchronized. I didn't bother verifying that it's necessary in the older branches, but I can check it out real quick.",
        "createdAt" : "2018-08-17T21:58:12Z",
        "updatedAt" : "2018-08-20T23:23:15Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "16de62a6-e9a0-4902-b719-26d88d2fa073",
        "parentId" : "824514b9-5e0b-4412-b8b6-90502b26edd5",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I don't know why anything in here is synchronized; that's just the way I found it.",
        "createdAt" : "2018-08-17T21:58:42Z",
        "updatedAt" : "2018-08-20T23:23:15Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "9507220c-9c4b-4e5e-ab74-2ca68d028bd3",
        "parentId" : "824514b9-5e0b-4412-b8b6-90502b26edd5",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I see. Maybe ok for older branches to leave as is. But might be wroth to cleanup in `trunk`?",
        "createdAt" : "2018-08-17T22:46:17Z",
        "updatedAt" : "2018-08-20T23:23:15Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "9861270f-6cd6-47f0-a18d-688607e1794b",
        "parentId" : "824514b9-5e0b-4412-b8b6-90502b26edd5",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "To be fair: `fenceProducer()` is not part of public producer API but added to `MockProducer` and it might be called from a different thread (ie, the main testing thread while `StreamThread` used the producer, too). Because all public methods within `MockProducer` call `verifyState()` it makes sense what findbugs complains about. Did miss this connection before. So maybe drop latest commit :) \r\n\r\nSorry for the forth and back.",
        "createdAt" : "2018-08-17T22:51:55Z",
        "updatedAt" : "2018-08-20T23:23:15Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "71eea5b6-4e6b-4345-a645-bfd7851640a5",
        "parentId" : "824514b9-5e0b-4412-b8b6-90502b26edd5",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Turns out the tests fail with the synchronization is removed. See https://builds.apache.org/job/kafka-pr-jdk8-scala2.11/15966/findbugsResult/ while it's still available.",
        "createdAt" : "2018-08-20T23:24:59Z",
        "updatedAt" : "2018-08-20T23:24:59Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "68d1f6a27ccdaa9ca118dc02e987e91fed3685bd",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +207,211 @@    }\n\n    private synchronized void verifyProducerState() {\n        if (this.closed) {\n            throw new IllegalStateException(\"MockProducer is already closed.\");"
  },
  {
    "id" : "4a957f7c-f417-4696-8c44-64a7fac0c56f",
    "prId" : 8105,
    "prUrl" : "https://github.com/apache/kafka/pull/8105#pullrequestreview-357929075",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bccc41b-42de-45df-8b22-c779517702d8",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "This allow us to simplify `RecordCollectorImplTest` significantly -- we can register a exception that we want to throw on the next invocation of the corresponding method.",
        "createdAt" : "2020-02-13T03:06:58Z",
        "updatedAt" : "2020-02-21T20:06:35Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ffe90a4254278614feeb110dbd3bde4687e82676",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +72,76 @@    private Map<MetricName, Metric> mockMetrics;\n\n    public RuntimeException initTransactionException = null;\n    public RuntimeException beginTransactionException = null;\n    public RuntimeException sendOffsetsToTransactionException = null;"
  },
  {
    "id" : "c3495237-177e-4611-a1f6-297b5d220022",
    "prId" : 8215,
    "prUrl" : "https://github.com/apache/kafka/pull/8215#pullrequestreview-368407623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50df4faa-57ee-42c7-b0b1-f7a2181cfa96",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Side cleanup",
        "createdAt" : "2020-03-03T23:45:11Z",
        "updatedAt" : "2020-03-11T00:00:09Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fc7e21a4c2388b501616e01da11f047844d34246",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +309,313 @@        long offset = nextOffset(topicPartition);\n        Completion completion = new Completion(offset, new RecordMetadata(topicPartition, 0, offset,\n                RecordBatch.NO_TIMESTAMP, 0L, 0, 0), result, callback);\n\n        if (!this.transactionInFlight)"
  }
]