[
  {
    "id" : "23886e42-9482-4d98-acaa-b2ab83953e85",
    "prId" : 5082,
    "prUrl" : "https://github.com/apache/kafka/pull/5082#pullrequestreview-142818500",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a1deb7a-6e4b-44d3-8a03-08efde131a21",
        "parentId" : null,
        "authorId" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "body" : "It would be helpful to indicate that this method, unlike the others in this interface, is only meant to have a non-empty implementation on the broker/server side.  Given this fact, it might be best to provide a default empty implementation and then only implement it in `SaslServerAuthenticator`.  It would make the PR diff smaller, too (no need to implement in `SaslClientAuthenticator`, `PlaintextChannelBuilder.PlaintextAuthenticator`, and `SslChannelBuilder.SslAuthenticator`).",
        "createdAt" : "2018-08-02T15:19:38Z",
        "updatedAt" : "2018-08-29T15:39:41Z",
        "lastEditedBy" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c882dee7cacc4e09e13dc071804e6a1d8c8aaac",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +41,45 @@     * Perform any processing related to authentication failure. This is invoked when the channel is about to be closed\n     * because of an {@link AuthenticationException} thrown from a prior {@link #authenticate()} call.\n     * @throws IOException if read/write fails due to an I/O error\n     */\n    default void handleAuthenticationFailure() throws IOException {"
  },
  {
    "id" : "9bf1512f-629a-400c-86f6-47e28caef1b2",
    "prId" : 5582,
    "prUrl" : "https://github.com/apache/kafka/pull/5582#pullrequestreview-160565632",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f53e5e5-6f8f-4c49-9ad8-60ecc1393385",
        "parentId" : null,
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "Using a combination of nanos and millis in the reauthentication logic is very error-prone.",
        "createdAt" : "2018-10-01T11:23:19Z",
        "updatedAt" : "2018-10-25T19:47:00Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "88ec1f80-7f0b-408e-be0b-55950a89034f",
        "parentId" : "2f53e5e5-6f8f-4c49-9ad8-60ecc1393385",
        "authorId" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "body" : "üëç Changed so that both use nanos.  We need to use nanoseconds on the server side to avoid a call to time.milliseconds() on each request as per previous review comments, so I changed the client side to use nanos as well.",
        "createdAt" : "2018-10-02T04:47:12Z",
        "updatedAt" : "2018-10-25T19:47:00Z",
        "lastEditedBy" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c30b80b2b29b7f5c86af21fd19fc520cfe798db",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +95,99 @@     * @return the session expiration time, if any, otherwise null\n     */\n    default Long serverSessionExpirationTimeNanos() {\n        return null;\n    }"
  }
]