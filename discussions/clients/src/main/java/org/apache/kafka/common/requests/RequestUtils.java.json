[
  {
    "id" : "7263001d-ded4-496c-a4a6-326ef860e56b",
    "prId" : 7409,
    "prUrl" : "https://github.com/apache/kafka/pull/7409#pullrequestreview-545096263",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "477b4308-c79b-4d26-8390-b4ec232f58fa",
        "parentId" : null,
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "Should it subtract ```messageSize.zeroCopySize()```?",
        "createdAt" : "2020-12-04T15:32:50Z",
        "updatedAt" : "2020-12-04T15:46:21Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "b000316f-8795-4d63-b6e9-28442aaf1959",
        "parentId" : "477b4308-c79b-4d26-8390-b4ec232f58fa",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Yeah, good point. I don't think it affects its current non test usage, but could result in a bug as the code changes. Will fix.",
        "createdAt" : "2020-12-04T16:06:00Z",
        "updatedAt" : "2020-12-04T16:06:00Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "eece039c-85d2-414e-b993-84c3ee9bfb3f",
        "parentId" : "477b4308-c79b-4d26-8390-b4ec232f58fa",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Actually, I need to think about this more. Because `SendBuilder` is not being used, we actually need to copy all the bytes to the returned buffer. I need to check what happens for a message contains records.",
        "createdAt" : "2020-12-04T16:08:25Z",
        "updatedAt" : "2020-12-04T16:08:25Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "8006677f-85da-4914-b928-3ddb4eabdef4",
        "parentId" : "477b4308-c79b-4d26-8390-b4ec232f58fa",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "oh, you are right. It uses ```ByteBufferAccessor``` rather than ```SendBuilder```.  There is no zero copy.",
        "createdAt" : "2020-12-04T16:12:02Z",
        "updatedAt" : "2020-12-04T16:12:02Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad0e0d534090ffe2bec563592f556f4e2c7ed06a",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +100,104 @@        MessageSizeAccumulator messageSize = RequestUtils.size(serializationCache, header, headerVersion, apiMessage, apiVersion);\n\n        ByteBuffer buffer = ByteBuffer.allocate(messageSize.totalSize());\n        ByteBufferAccessor bufferWritable = new ByteBufferAccessor(buffer);\n        if (header != null)"
  },
  {
    "id" : "ad575ffc-a3e5-4310-bf39-0d5c041d0936",
    "prId" : 9689,
    "prUrl" : "https://github.com/apache/kafka/pull/9689#pullrequestreview-554487805",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "32d68a2c-c7d8-4c1b-a55f-b827d590ac12",
        "parentId" : null,
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "There are some duplicate code. Maybe we can unify them in this PR (or we can address it in follow-up) ?\r\n\r\n1. https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java#L1399\r\n2. https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/consumer/internals/Fetcher.java#L1553\r\n3. https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/record/FileRecords.java#L358\r\n4. https://github.com/apache/kafka/blob/trunk/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala#L1124\r\n5. https://github.com/apache/kafka/blob/trunk/core/src/main/scala/kafka/server/KafkaApis.scala#L534\r\n6. https://github.com/apache/kafka/blob/trunk/core/src/main/scala/kafka/server/ReplicaManager.scala#L1890",
        "createdAt" : "2020-12-14T13:33:39Z",
        "updatedAt" : "2020-12-17T13:17:45Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "c376aa07-d990-4ad7-bf60-bcee8751e42f",
        "parentId" : "32d68a2c-c7d8-4c1b-a55f-b827d590ac12",
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "@chia7712 Thanks for pointing this out. I think that we should tackle this in follow-up PRs as this is not strictly related to this change. Ok for you?",
        "createdAt" : "2020-12-17T10:51:03Z",
        "updatedAt" : "2020-12-17T13:17:45Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "338e8473-1f15-4193-9dff-c131c196a8f4",
        "parentId" : "32d68a2c-c7d8-4c1b-a55f-b827d590ac12",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "It is ok to me :)",
        "createdAt" : "2020-12-17T10:51:53Z",
        "updatedAt" : "2020-12-17T13:17:45Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f22942a41ee5ed60766908115509aaa0047c9ec",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +34,38 @@    private RequestUtils() {}\n\n    public static Optional<Integer> getLeaderEpoch(int leaderEpoch) {\n        return leaderEpoch == RecordBatch.NO_PARTITION_LEADER_EPOCH ?\n            Optional.empty() : Optional.of(leaderEpoch);"
  }
]