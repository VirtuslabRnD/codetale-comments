[
  {
    "id" : "a2fccddc-a572-4ae0-9d42-9521432c2b21",
    "prId" : 7114,
    "prUrl" : "https://github.com/apache/kafka/pull/7114#pullrequestreview-267862373",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c99ec54c-2de2-4893-b377-874a7e6dd9fa",
        "parentId" : null,
        "authorId" : "cb6f8432-d515-4113-87f8-14e555ab8ed1",
        "body" : "I'm debating whether it would be better to use `compute` because you'd avoid the explicit get but your version might be easier to understand.\r\n```\r\ncounts.compute(topLevelErr, (e, v) -> (v == null ? 0 : v) + 1);\r\n```",
        "createdAt" : "2019-07-29T12:28:21Z",
        "updatedAt" : "2019-07-29T15:40:26Z",
        "lastEditedBy" : "cb6f8432-d515-4113-87f8-14e555ab8ed1",
        "tags" : [
        ]
      },
      {
        "id" : "8d56c121-9548-4e20-9b88-071f1306d105",
        "parentId" : "c99ec54c-2de2-4893-b377-874a7e6dd9fa",
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "I think I prefer this one, it is more intuitive to me. It's also how all the other errorCounts() implementations are",
        "createdAt" : "2019-07-29T15:29:34Z",
        "updatedAt" : "2019-07-29T15:40:26Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e91166f087e811f712f9904d6db759f49488946",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +67,71 @@        Map<Errors, Integer> counts = new HashMap<>();\n        Errors topLevelErr = Errors.forCode(data.errorCode());\n        counts.put(topLevelErr, counts.getOrDefault(topLevelErr, 0) + 1);\n\n        for (ReassignableTopicResponse topicResponse : data.responses()) {"
  },
  {
    "id" : "2294d869-e88f-48b2-9780-4aed0f8e3326",
    "prId" : 7114,
    "prUrl" : "https://github.com/apache/kafka/pull/7114#pullrequestreview-267861929",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86eb9e42-286e-490f-8289-d3426d854982",
        "parentId" : null,
        "authorId" : "cb6f8432-d515-4113-87f8-14e555ab8ed1",
        "body" : "What happens if `Errors.NONE` is the error code? Could that happen? Do we return a `Errors.NONE -> 1` map in this case?",
        "createdAt" : "2019-07-29T12:29:37Z",
        "updatedAt" : "2019-07-29T15:40:26Z",
        "lastEditedBy" : "cb6f8432-d515-4113-87f8-14e555ab8ed1",
        "tags" : [
        ]
      },
      {
        "id" : "d2c3a988-7b25-43cd-a409-3116a97367d5",
        "parentId" : "86eb9e42-286e-490f-8289-d3426d854982",
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "Yes, Errors.NONE is the expected code when the operation is a success",
        "createdAt" : "2019-07-29T15:28:54Z",
        "updatedAt" : "2019-07-29T15:40:26Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e91166f087e811f712f9904d6db759f49488946",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +66,70 @@    public Map<Errors, Integer> errorCounts() {\n        Map<Errors, Integer> counts = new HashMap<>();\n        Errors topLevelErr = Errors.forCode(data.errorCode());\n        counts.put(topLevelErr, counts.getOrDefault(topLevelErr, 0) + 1);\n"
  },
  {
    "id" : "659877f0-804f-40d8-89b3-f4eb79ddd380",
    "prId" : 8417,
    "prUrl" : "https://github.com/apache/kafka/pull/8417#pullrequestreview-396457481",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d0fa611-da55-4b7f-b823-fa0d9bf3b072",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Indenting seems wrong?",
        "createdAt" : "2020-04-20T13:34:56Z",
        "updatedAt" : "2020-04-22T13:52:42Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc52740ff70d790bdc2927a6000ef45b682e119f",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +68,72 @@        data.responses().forEach(topicResponse ->\n            topicResponse.partitions().forEach(partitionResponse ->\n                updateErrorCounts(counts, Errors.forCode(partitionResponse.errorCode()))\n        ));\n        return counts;"
  }
]