[
  {
    "id" : "e2a7e512-2f31-4cf6-8010-650d3a8e0753",
    "prId" : 5027,
    "prUrl" : "https://github.com/apache/kafka/pull/5027#pullrequestreview-121586684",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64c49936-2d1c-47df-aa57-fa3c6e259c9e",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Should we use `KafkaException` here as well?",
        "createdAt" : "2018-05-18T21:17:20Z",
        "updatedAt" : "2018-07-20T20:23:18Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "fac0848a-9347-44db-815b-6c64a8db1ce2",
        "parentId" : "64c49936-2d1c-47df-aa57-fa3c6e259c9e",
        "authorId" : "93b1c273-8917-4547-bd53-5101f22161c0",
        "body" : "Hmm, I feel `IllegalStateException` is more appropriate in this case. We expect `NetworkClient` to not invoke `Metadata#update` after it has called `Metadata#close()`.",
        "createdAt" : "2018-05-18T22:15:41Z",
        "updatedAt" : "2018-07-20T20:23:18Z",
        "lastEditedBy" : "93b1c273-8917-4547-bd53-5101f22161c0",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2ba5e2150f77331eebebcfdeb56e84bf747cb5b",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +232,236 @@        Objects.requireNonNull(newCluster, \"cluster should not be null\");\n        if (isClosed())\n            throw new IllegalStateException(\"Update requested after metadata close\");\n\n        this.needUpdate = false;"
  },
  {
    "id" : "7322de91-1633-4ba9-af5f-004237fc9c5e",
    "prId" : 5027,
    "prUrl" : "https://github.com/apache/kafka/pull/5027#pullrequestreview-121595441",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86e85c81-8d0f-4e5e-930a-d33b42708e30",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Does this need to be public?",
        "createdAt" : "2018-05-18T21:20:07Z",
        "updatedAt" : "2018-07-20T20:23:18Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "b88b0764-8a92-4b6e-9dc6-18f4f65cdcae",
        "parentId" : "86e85c81-8d0f-4e5e-930a-d33b42708e30",
        "authorId" : "93b1c273-8917-4547-bd53-5101f22161c0",
        "body" : "I have `KafkaProducer` calling into this now, so needs to be public.",
        "createdAt" : "2018-05-18T23:16:38Z",
        "updatedAt" : "2018-07-20T20:23:18Z",
        "lastEditedBy" : "93b1c273-8917-4547-bd53-5101f22161c0",
        "tags" : [
        ]
      }
    ],
    "commit" : "a2ba5e2150f77331eebebcfdeb56e84bf747cb5b",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +355,359 @@     * @return True if this instance has been closed; false otherwise\n     */\n    public synchronized boolean isClosed() {\n        return this.isClosed;\n    }"
  },
  {
    "id" : "0b7b2fc7-da76-469d-a364-01b584099aea",
    "prId" : 6045,
    "prUrl" : "https://github.com/apache/kafka/pull/6045#pullrequestreview-189982682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e9f975c-1231-42e8-9eac-a00c2301e3d9",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Maybe we could add a trace message in this case which mentions the old and new epochs. That may make debugging easier if there is a bug which introduces an invalid epoch somehow.",
        "createdAt" : "2019-01-07T21:24:38Z",
        "updatedAt" : "2019-01-17T15:43:00Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ba0768420c04aa546906895016671fd544ff38f",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +205,209 @@            }\n            return true;\n        } else {\n            log.debug(\"Not replacing existing epoch {} with new epoch {}\", oldEpoch, epoch);\n            return false;"
  },
  {
    "id" : "ffcaba11-f89c-4c3f-aaf9-7eac38b9fa8b",
    "prId" : 6045,
    "prUrl" : "https://github.com/apache/kafka/pull/6045#pullrequestreview-190793098",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a9e1308-51ba-45f3-8d7a-0fbcb63d6001",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "We should probably clean this collection up in `setTopics`.",
        "createdAt" : "2019-01-08T23:54:56Z",
        "updatedAt" : "2019-01-17T15:43:00Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "fad63df4-f95f-4fe6-b3e2-a6fff8303c98",
        "parentId" : "5a9e1308-51ba-45f3-8d7a-0fbcb63d6001",
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "üëç ",
        "createdAt" : "2019-01-09T15:48:19Z",
        "updatedAt" : "2019-01-17T15:43:00Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ba0768420c04aa546906895016671fd544ff38f",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +81,85 @@    private final boolean topicExpiryEnabled;\n    private boolean isClosed;\n    private final Map<TopicPartition, Integer> lastSeenLeaderEpochs;\n\n    public Metadata(long refreshBackoffMs,"
  },
  {
    "id" : "1f7be1f4-b3c7-4177-b038-a257087ccac5",
    "prId" : 6045,
    "prUrl" : "https://github.com/apache/kafka/pull/6045#pullrequestreview-190511611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7042cf8c-2e3a-4de5-b09d-a1c7178b3f20",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Probably need to give MetadataCache a `toString`. Perhaps it can just delegate to `Cluster`.",
        "createdAt" : "2019-01-09T00:10:40Z",
        "updatedAt" : "2019-01-17T15:43:00Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ba0768420c04aa546906895016671fd544ff38f",
    "line" : 202,
    "diffHunk" : "@@ -1,1 +368,372 @@\n        notifyAll();\n        log.debug(\"Updated cluster metadata version {} to {}\", this.version, this.cache);\n    }\n"
  },
  {
    "id" : "408d3f91-cebd-4c31-a327-1f449b3065c1",
    "prId" : 6045,
    "prUrl" : "https://github.com/apache/kafka/pull/6045#pullrequestreview-193262724",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de37aa01-d6db-45d0-8a79-04661057459c",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "If the metadata API does not support leader epochs, I am considering whether we should clear `lastSeenLeaderEpochs`. Say for example that a user seeks to an offset and provides an epoch. But when we try to fetch metadata for that or a later epoch, we find the broker is on an older version. This might be possible in a downgrade scenario. In this case, `partitionInfoIfCurrent` would indefinitely return nothing.",
        "createdAt" : "2019-01-16T17:41:45Z",
        "updatedAt" : "2019-01-17T15:43:00Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ba0768420c04aa546906895016671fd544ff38f",
    "line" : 262,
    "diffHunk" : "@@ -1,1 +428,432 @@            }\n        } else {\n            // Old cluster format (no epochs)\n            lastSeenLeaderEpochs.clear();\n            partitionInfoConsumer.accept(MetadataResponse.partitionMetaToInfo(topic, partitionMetadata));"
  }
]