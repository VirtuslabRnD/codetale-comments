[
  {
    "id" : "b59d2817-6334-4e60-b79c-42e4be1ff091",
    "prId" : 6686,
    "prUrl" : "https://github.com/apache/kafka/pull/6686#pullrequestreview-238625460",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8f6a973-067d-46e8-b3be-e211b79c2f5f",
        "parentId" : null,
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "Is this safe? Can we rename APIs without side effects?",
        "createdAt" : "2019-05-13T21:08:50Z",
        "updatedAt" : "2019-05-29T01:18:29Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      },
      {
        "id" : "f48de4dc-752c-4c4b-8a44-cdf821df2ade",
        "parentId" : "b8f6a973-067d-46e8-b3be-e211b79c2f5f",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "The API name is not technically a public interface. We did a similar renaming from GroupCoordinator request to FindCoordinator. That said, this probably will break some downstream systems that were using internals anyway. I suspect our leeway to do stuff like this gets smaller with the schema definitions represented in JSON. Still, I think we should do it.",
        "createdAt" : "2019-05-16T20:23:20Z",
        "updatedAt" : "2019-05-29T01:18:29Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "ea8456fe-d199-4a68-80b2-7e3bb6aef5aa",
        "parentId" : "b8f6a973-067d-46e8-b3be-e211b79c2f5f",
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "Yes. This in internal to the broker. The protocol only uses the code. E.g. 43. Can you confirm @hachikuji  or @cmccabe ?",
        "createdAt" : "2019-05-16T20:38:43Z",
        "updatedAt" : "2019-05-29T01:18:29Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d53f267c91cc93478d817214f47a6fd2ec20691",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +191,195 @@    DESCRIBE_DELEGATION_TOKEN(41, \"DescribeDelegationToken\", DescribeDelegationTokenRequest.schemaVersions(), DescribeDelegationTokenResponse.schemaVersions()),\n    DELETE_GROUPS(42, \"DeleteGroups\", DeleteGroupsRequest.schemaVersions(), DeleteGroupsResponse.schemaVersions()),\n    ELECT_LEADERS(43, \"ElectLeaders\", ElectLeadersRequestData.SCHEMAS,\n            ElectLeadersResponseData.SCHEMAS),\n    INCREMENTAL_ALTER_CONFIGS(44, \"IncrementalAlterConfigs\", IncrementalAlterConfigsRequestData.SCHEMAS,"
  },
  {
    "id" : "c49748c1-d2e2-4db6-8f7c-177397d43772",
    "prId" : 7372,
    "prUrl" : "https://github.com/apache/kafka/pull/7372#pullrequestreview-292012013",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46af9d0f-be62-4e4a-ae5b-80b1df7cd475",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "nit: I would rather overload the method to handle this case rather like we do for the parsing of `ApiVersions` here: https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/protocol/ApiKeys.java#L154",
        "createdAt" : "2019-09-20T08:53:22Z",
        "updatedAt" : "2019-09-25T15:30:13Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "9e6f207c-eb2e-4181-8fe5-e072a664c5b9",
        "parentId" : "46af9d0f-be62-4e4a-ae5b-80b1df7cd475",
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "Why do we need this check? There seem to be a comment here that goes into some detail: https://github.com/apache/kafka/pull/7372/files#diff-532a8e555895b9ac3028f30a263b1a57L163-L165. Even after reading that comment it is not clear to me why we are doing this. Can we add a comment here that explains this?",
        "createdAt" : "2019-09-23T18:00:51Z",
        "updatedAt" : "2019-09-25T15:30:13Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      },
      {
        "id" : "be0dbae7-dbf2-411d-bf6b-057d8b8da15d",
        "parentId" : "46af9d0f-be62-4e4a-ae5b-80b1df7cd475",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "@jsancio : The bigger context here is that KIP-482 (and KIP-511) add a new header version, v2.  The new header version adds optional (tagged) fields.  This PR lays the groundwork for that, although this PR only has v0 and v1.\r\n\r\n@dajac: In a follow-on PR, we will be calling into some automatically generated code to determine what the header version is.  This is part of the header version bump described in KIP-482.  Therefore, creating a subclass of `ApiKeys` is not a viable approach here.",
        "createdAt" : "2019-09-23T19:47:31Z",
        "updatedAt" : "2019-09-25T15:30:13Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "be5a86abde45a85189881e8ebe6995964d91302b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +337,341 @@\n    public short headerVersion(short apiVersion) {\n        if ((this == CONTROLLED_SHUTDOWN) && (apiVersion == 0)) {\n            return 0;\n        } else {"
  }
]