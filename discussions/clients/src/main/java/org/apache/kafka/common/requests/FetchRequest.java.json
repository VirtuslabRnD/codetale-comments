[
  {
    "id" : "6cc27183-528a-436e-8560-ff31920d696b",
    "prId" : 9008,
    "prUrl" : "https://github.com/apache/kafka/pull/9008#pullrequestreview-455806783",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcfefc0b-e2f2-43a4-8e9b-102afe72b50f",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "@mumrah Have we considered dropping the `PartitionData` class entirely in favour of using `FetchRequestData .FetchPartition` directly in the broker? The main difference is that `FetchPartition` does not have an `Optional` for the leader epoch but returns the default value (-1) instead. ",
        "createdAt" : "2020-07-15T08:02:58Z",
        "updatedAt" : "2020-07-29T17:20:05Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "90dc96a7-14ca-48a5-8292-d90eff7d00c6",
        "parentId" : "fcfefc0b-e2f2-43a4-8e9b-102afe72b50f",
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "Yes, I think it's a good idea. However, it would expand the scope of this change quite a bit. I'm working on some micro benchmarks now, and if we don't have any apparent regressions then I'll save this for a follow-on PR. ",
        "createdAt" : "2020-07-15T14:27:20Z",
        "updatedAt" : "2020-07-29T17:20:05Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      },
      {
        "id" : "e3584c90-9025-444c-862e-34596a45c4ed",
        "parentId" : "fcfefc0b-e2f2-43a4-8e9b-102afe72b50f",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "As an aside, it would be awesome to add `Optional` support to the generated classes. We have had so many bugs which were caused by sentinel values sneaking into unexpected places.",
        "createdAt" : "2020-07-15T22:44:00Z",
        "updatedAt" : "2020-07-29T17:20:05Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "4b1a579b-6e57-4695-aec7-61c3406a4df7",
        "parentId" : "fcfefc0b-e2f2-43a4-8e9b-102afe72b50f",
        "authorId" : "6c4430fc-3795-49d6-9c36-cf6aa694824e",
        "body" : "Let's open a jira for getting rid of the toPartitionDataMap if we don't address it in this PR. It's a pretty large part of the cost here and there are only a few places we would have to deal with it. I think we should fix it sooner rather than later too.",
        "createdAt" : "2020-07-16T14:35:16Z",
        "updatedAt" : "2020-07-29T17:20:05Z",
        "lastEditedBy" : "6c4430fc-3795-49d6-9c36-cf6aa694824e",
        "tags" : [
        ]
      },
      {
        "id" : "6038d167-c12d-4f51-8cd2-7dca168e01ab",
        "parentId" : "fcfefc0b-e2f2-43a4-8e9b-102afe72b50f",
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "Yeah, `Optional` support would be awesome. I was actually thinking how to do it. I may give it a shot during the weekend ;)",
        "createdAt" : "2020-07-17T13:37:59Z",
        "updatedAt" : "2020-07-29T17:20:05Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "983dc966-f895-4fe0-9f6e-cc76082943df",
        "parentId" : "fcfefc0b-e2f2-43a4-8e9b-102afe72b50f",
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "@hachikuji @mumrah @cmccabe I have put together a prototype to support java.util.Optional in the auto-generated classes. It a good draft at the moment but it is a good basis for discussions: https://github.com/apache/kafka/pull/9085",
        "createdAt" : "2020-07-27T13:58:12Z",
        "updatedAt" : "2020-07-29T17:20:05Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      }
    ],
    "commit" : "507eb047ba0f652f7781d80e35c8d8c262ccb9f5",
    "line" : 246,
    "diffHunk" : "@@ -1,1 +106,110 @@            result.put(new TopicPartition(fetchTopic.topic(), fetchPartition.partition()),\n                new PartitionData(fetchPartition.fetchOffset(), fetchPartition.logStartOffset(),\n                    fetchPartition.partitionMaxBytes(), leaderEpoch));\n        }));\n        return Collections.unmodifiableMap(result);"
  },
  {
    "id" : "5dedc9f0-6448-44c6-be6f-4470bc130d6b",
    "prId" : 9008,
    "prUrl" : "https://github.com/apache/kafka/pull/9008#pullrequestreview-450939894",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed2d2de7-b992-4e20-b79a-22d3d33484fb",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Are we overriding this so that we save the conversion to `Struct`? As far as I can tell, there's nothing specific to `FetchRequest` below. I wonder if we can move this implementation to `AbstractRequest.serialize` so that we save the conversion to Struct for all APIs that have been converted?",
        "createdAt" : "2020-07-16T21:13:38Z",
        "updatedAt" : "2020-07-29T17:20:05Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "5fd1878a-a375-4bd0-98b5-30a3344ac35d",
        "parentId" : "ed2d2de7-b992-4e20-b79a-22d3d33484fb",
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "Indeed this is generic serialization code for the message classes. If we go with a mixin interface to indicate a class has been converted over to generated messages, we could also push this up to AbstractRequest. However, this might be better saved for a follow-on since we'll probably want to pick up additional changes from @ijuma's PR. Thoughts?",
        "createdAt" : "2020-07-17T13:40:28Z",
        "updatedAt" : "2020-07-29T17:20:05Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      },
      {
        "id" : "91c066f3-1704-45fb-a89d-d9533305db55",
        "parentId" : "ed2d2de7-b992-4e20-b79a-22d3d33484fb",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I'm ok saving this for #7409.",
        "createdAt" : "2020-07-17T20:31:03Z",
        "updatedAt" : "2020-07-29T17:20:05Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "507eb047ba0f652f7781d80e35c8d8c262ccb9f5",
    "line" : 436,
    "diffHunk" : "@@ -1,1 +343,347 @@\n    @Override\n    public ByteBuffer serialize(RequestHeader header) {\n        // Unlike the custom FetchResponse#toSend, we don't include the buffer size here. This buffer is passed\n        // to a NetworkSend which adds the length value in the eventual serialization"
  },
  {
    "id" : "5b77c443-cbdc-451f-9559-73285ac0c233",
    "prId" : 9944,
    "prUrl" : "https://github.com/apache/kafka/pull/9944#pullrequestreview-653554937",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3901b97c-7137-426c-add5-a17cb04b08e4",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "Since toPartitionDataMap() handles all versions, could we just simply call toPartitionDataMap()? Then, I am not sure if we need to call toPartitionDataMap() in the constructor.",
        "createdAt" : "2021-05-05T21:01:53Z",
        "updatedAt" : "2021-05-06T01:32:08Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "ea791f34-adee-4bfa-83b8-bd0dcfaf7d3e",
        "parentId" : "3901b97c-7137-426c-add5-a17cb04b08e4",
        "authorId" : "a31dcef8-b459-4b48-bb49-44e910fa9f34",
        "body" : "Yeah. That seems cleaner. So the idea is that the constructor, won't set fetchData for either version.",
        "createdAt" : "2021-05-06T15:20:46Z",
        "updatedAt" : "2021-05-06T15:20:46Z",
        "lastEditedBy" : "a31dcef8-b459-4b48-bb49-44e910fa9f34",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a47290d9a46db70b9ed3273ddafedbc8827e8da",
    "line" : 170,
    "diffHunk" : "@@ -1,1 +316,320 @@    // For versions 13+, builds the partitionData map using both the FetchRequestData and a mapping of topic IDs to names.\n    // Throws UnknownTopicIdException for versions 13+ if the topic ID was unknown to the server.\n    public Map<TopicPartition, PartitionData> fetchData(Map<Uuid, String> topicNames) throws UnknownTopicIdException {\n        if (fetchData == null) {\n            synchronized (this) {"
  }
]