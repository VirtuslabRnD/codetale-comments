[
  {
    "id" : "34eec099-b158-4ccb-b1e2-0dd6c683b3f8",
    "prId" : 4557,
    "prUrl" : "https://github.com/apache/kafka/pull/4557#pullrequestreview-96402531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "554144dd-b77e-4cd4-b818-195a5bc8caf7",
        "parentId" : null,
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "`retryBackoffMs` is typically much lower than request timeout. Should `poll(largeValue)`  poll until request timeout to fetch offsets? Perhaps not, just want to make sure I understand.",
        "createdAt" : "2018-02-13T22:07:20Z",
        "updatedAt" : "2018-02-14T15:55:04Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "82de8225-ee6d-4e50-83c4-3abcfc055b64",
        "parentId" : "554144dd-b77e-4cd4-b818-195a5bc8caf7",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I'm trying to handle the case in which we are in the middle of a backoff after a failed offset fetch. There wouldn't be any pending IO in the worst case (say if we only had one partition assigned), so `poll()` would just block. We could alternatively do a bit more bookkeeping to keep track of when we are backing off, and when we have offset fetches pending, but it seemed simpler this way.",
        "createdAt" : "2018-02-14T07:21:47Z",
        "updatedAt" : "2018-02-14T15:55:04Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "76c796ca128c3c97231f3ebda994a07bb06b26aa",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +1166,1170 @@        // We do not want to be stuck blocking in poll if we are missing some positions\n        // since the offset lookup may be backing off after a failure\n        if (!hasAllFetchPositions && pollTimeout > retryBackoffMs)\n            pollTimeout = retryBackoffMs;\n"
  },
  {
    "id" : "51489b38-1d24-47ac-9d27-220a326303e0",
    "prId" : 4557,
    "prUrl" : "https://github.com/apache/kafka/pull/4557#pullrequestreview-96465977",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "595a739f-2453-4a6b-bca7-9c8b01bcbefc",
        "parentId" : null,
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "I thought this was changed because it actually requests something, but it is just setting a flag?",
        "createdAt" : "2018-02-13T22:09:38Z",
        "updatedAt" : "2018-02-14T15:55:04Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "4e80d391-da8e-417c-b663-f1607e82e94b",
        "parentId" : "595a739f-2453-4a6b-bca7-9c8b01bcbefc",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Yeah, I just didn't like the name. We had both `isOffsetResetNeeded` and `needOffsetReset`, which both sound like boolean flag checks. I wanted the mutation to be obvious in the name and I thought this was analogous with `Metadata.requestUpdate`. For some reason, we frown on names like `setOffsetResetNeeded`, but that would be an alternative which would arguably be less misleading.",
        "createdAt" : "2018-02-14T07:24:07Z",
        "updatedAt" : "2018-02-14T15:55:04Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "ff8d4254-6fca-4c95-9e46-d98438dbc150",
        "parentId" : "595a739f-2453-4a6b-bca7-9c8b01bcbefc",
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "OK, since we have `Metadata.requestUpdate`, let's leave as is.",
        "createdAt" : "2018-02-14T11:34:51Z",
        "updatedAt" : "2018-02-14T15:55:04Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      }
    ],
    "commit" : "76c796ca128c3c97231f3ebda994a07bb06b26aa",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +1366,1370 @@            for (TopicPartition tp : parts) {\n                log.debug(\"Seeking to beginning of partition {}\", tp);\n                subscriptions.requestOffsetReset(tp, OffsetResetStrategy.EARLIEST);\n            }\n        } finally {"
  }
]