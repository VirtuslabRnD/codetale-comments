[
  {
    "id" : "c6d7ac90-9038-46a3-abd7-9f51417f6d74",
    "prId" : 4871,
    "prUrl" : "https://github.com/apache/kafka/pull/4871#pullrequestreview-123497848",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aaac6dfb-1568-4cbc-b797-d63c14909b5c",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I wonder if this method is redundant given that `Send` exposes `size()` already? Maybe we could move it to `Records`.",
        "createdAt" : "2018-05-24T07:54:44Z",
        "updatedAt" : "2018-05-30T23:57:50Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "1bd5c19d-dbeb-4f35-a327-098c5c047a64",
        "parentId" : "aaac6dfb-1568-4cbc-b797-d63c14909b5c",
        "authorId" : "93b1c273-8917-4547-bd53-5101f22161c0",
        "body" : "Hmm. The way we have it right now, `Send#size()` calls into `BaseRecords#sizeInBytes()`. We could get rid of `BaseRecords#sizeInBytes()` but that would also mean we'd have to move the logic in `LazyDownConversionRecords#sizeInBytes()` into `LazyDownConversionRecordsSend#size()`, along with state required for us to compute the size.\r\n\r\nI kind of like the separation we have right now between these two, so I feel we should keep the `sizeInBytes()` method here.",
        "createdAt" : "2018-05-24T21:32:19Z",
        "updatedAt" : "2018-05-30T23:57:50Z",
        "lastEditedBy" : "93b1c273-8917-4547-bd53-5101f22161c0",
        "tags" : [
        ]
      },
      {
        "id" : "1f010155-c0ee-4088-ac84-919a871b6bb3",
        "parentId" : "aaac6dfb-1568-4cbc-b797-d63c14909b5c",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Fair enough. The only reason I brought up is that it introduces a potential source of inconsistency, but maybe it's not a major concern since we won't have many implementations of this class.",
        "createdAt" : "2018-05-25T20:24:03Z",
        "updatedAt" : "2018-05-30T23:57:50Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e35d5c438607b8a1f09b973598cac8bc007a931",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@     * @return The size in bytes of the records\n     */\n    int sizeInBytes();\n\n    /**"
  },
  {
    "id" : "f9ad6668-40f2-460e-9d63-48dd65896f49",
    "prId" : 4871,
    "prUrl" : "https://github.com/apache/kafka/pull/4871#pullrequestreview-121190971",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e94bf3aa-7b11-44ac-a681-fac45e5a9b12",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "More bikeshedding... One alternative we considered is to provide a shim inside `FetchResponse` which enables conversion to `Records` or `Send` as needed. For example:\r\n```java\r\nclass SendableRecords {\r\n  Send send();\r\n  Records records();\r\n}\r\n```\r\nFor the lazy down-conversion, we don't want to expose the `Records` instance, so we can raise `UnsupportedOperationException`. I'm basically wondering if we could use this in `FetchResponse` and drop the generics. Then maybe we could get rid of the ugly casting. You may have rejected this already, but curious to hear the reasons.",
        "createdAt" : "2018-05-24T08:08:52Z",
        "updatedAt" : "2018-05-30T23:57:50Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e35d5c438607b8a1f09b973598cac8bc007a931",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +20,24 @@ * Base interface for accessing records which could be contained in the log, or an in-memory materialization of log records.\n */\npublic interface BaseRecords {\n    /**\n     * The size of these records in bytes."
  }
]