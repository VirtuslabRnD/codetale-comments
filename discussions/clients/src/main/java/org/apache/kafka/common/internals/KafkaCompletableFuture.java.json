[
  {
    "id" : "5b89a365-d58c-489d-be3e-a34e0b03a0f4",
    "prId" : 9878,
    "prUrl" : "https://github.com/apache/kafka/pull/9878#pullrequestreview-698946937",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cab14000-a639-46fb-b9df-15144fe2b688",
        "parentId" : null,
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "Why not throwing exception when users call `toCompletableFuture`? If users want to use blocking method (ex. `get()`), they ought to call `KafkaFuture#get` instead. What is the benefit if we expose `toCompletableFuture`? \r\n",
        "createdAt" : "2021-07-02T16:38:08Z",
        "updatedAt" : "2021-07-02T17:16:03Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "e0638d2c-47eb-40d8-b14b-c2de1deee464",
        "parentId" : "cab14000-a639-46fb-b9df-15144fe2b688",
        "authorId" : "491bcd91-bc8d-4f54-b5fd-d6c7be5e8693",
        "body" : "The KIP describes it like this:\r\n\r\n> Adding toCompletionStage() is sufficient because CompletionStage itself exposes toCompletableFuture(), so anyone who needs an actual CompletableFuture (e.g. for interoperating with 3rd party APIs that require one) can get one. However, CompletableFuture exposes methods for future completion which should not be called by users (only the Admin client should be completing the returned futures), so calling these will be prevented. It is expected that users wanting to block on the completion of the KafkaFuture would use kafkaFuture.get(), rather than calling kafkaFuture.toCompletionStage().toCompletableFuture().get(), so the need to access the CompleteableFuture should be rare.\r\n\r\nEssentially we want to allow access to a `CompletableFuture` to allow interop with 3rd part APIs which might require it (e.g. for using the blocking `get` methods) , but not allow user code to complete those futures. The `CompletableFuture` API unhelpfully adds _both_ the blocking `get` methods and the `complete` methods. ",
        "createdAt" : "2021-07-05T08:47:53Z",
        "updatedAt" : "2021-07-05T08:47:53Z",
        "lastEditedBy" : "491bcd91-bc8d-4f54-b5fd-d6c7be5e8693",
        "tags" : [
        ]
      },
      {
        "id" : "8b3c2df8-112a-4fff-8f01-6275080f49a1",
        "parentId" : "cab14000-a639-46fb-b9df-15144fe2b688",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "> allow interop with 3rd part APIs which might require it\r\n\r\nfair enough :)",
        "createdAt" : "2021-07-05T08:52:32Z",
        "updatedAt" : "2021-07-05T08:52:32Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      }
    ],
    "commit" : "fea5c598acf6438886d119063638a9f0b4d0737d",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@ * @param <T> The type of the future value.\n */\npublic class KafkaCompletableFuture<T> extends CompletableFuture<T> {\n\n    /**"
  },
  {
    "id" : "c20a4329-fc3f-45b2-bad4-cd8c9b75b64a",
    "prId" : 9878,
    "prUrl" : "https://github.com/apache/kafka/pull/9878#pullrequestreview-698954102",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e400c1d-b199-460c-8b1f-ca234490efec",
        "parentId" : null,
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "why it needs prefix \"kafka\"? ",
        "createdAt" : "2021-07-02T16:39:29Z",
        "updatedAt" : "2021-07-02T17:16:03Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "c739998c-721f-4931-945f-0e32509aa798",
        "parentId" : "5e400c1d-b199-460c-8b1f-ca234490efec",
        "authorId" : "491bcd91-bc8d-4f54-b5fd-d6c7be5e8693",
        "body" : "The idea is that all Kafka code knows it's using a `KafkaCompletableFuture` and knows to complete it via the `kafka*()` methods. User code which erroneously tries to complete via `complete()` gets the exception thrown. ",
        "createdAt" : "2021-07-05T08:47:57Z",
        "updatedAt" : "2021-07-05T08:47:57Z",
        "lastEditedBy" : "491bcd91-bc8d-4f54-b5fd-d6c7be5e8693",
        "tags" : [
        ]
      },
      {
        "id" : "b92d3537-1198-4ff8-a1cf-0950afa21d62",
        "parentId" : "5e400c1d-b199-460c-8b1f-ca234490efec",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "> The idea is that all Kafka code knows it's using a KafkaCompletableFuture and knows to complete it via the kafka*() methods.\r\n\r\nthat is a good point. Could you add this comment? ",
        "createdAt" : "2021-07-05T08:54:28Z",
        "updatedAt" : "2021-07-05T08:54:28Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "ed342e5d-abb7-4cd2-9201-8f6f19c28878",
        "parentId" : "5e400c1d-b199-460c-8b1f-ca234490efec",
        "authorId" : "491bcd91-bc8d-4f54-b5fd-d6c7be5e8693",
        "body" : "Done",
        "createdAt" : "2021-07-05T08:59:46Z",
        "updatedAt" : "2021-07-05T08:59:46Z",
        "lastEditedBy" : "491bcd91-bc8d-4f54-b5fd-d6c7be5e8693",
        "tags" : [
        ]
      }
    ],
    "commit" : "fea5c598acf6438886d119063638a9f0b4d0737d",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +36,40 @@     * to transition to a completed state, else {@code false}\n     */\n    boolean kafkaComplete(T value) {\n        return super.complete(value);\n    }"
  }
]