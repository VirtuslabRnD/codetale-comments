[
  {
    "id" : "313a908e-c893-47ec-a74c-234eb7b29a4b",
    "prId" : 7409,
    "prUrl" : "https://github.com/apache/kafka/pull/7409#pullrequestreview-546577475",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb5c06fc-8976-4b9b-8357-33facf0e4b60",
        "parentId" : null,
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "How about moving this method to test code? ```MessageTestUtil``` could be a good place. ",
        "createdAt" : "2020-12-04T14:40:15Z",
        "updatedAt" : "2020-12-04T15:46:21Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "763d47ec-ef8d-4aa6-9153-b021e96c82c4",
        "parentId" : "eb5c06fc-8976-4b9b-8357-33facf0e4b60",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "ditto for following \"Visible for testing\" code",
        "createdAt" : "2020-12-04T14:41:53Z",
        "updatedAt" : "2020-12-04T15:46:21Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "d8a047db-c658-4099-b754-57591808cec8",
        "parentId" : "eb5c06fc-8976-4b9b-8357-33facf0e4b60",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "BTW, this method is duplicate to TestUtils#serializeRequestHeader",
        "createdAt" : "2020-12-04T15:38:07Z",
        "updatedAt" : "2020-12-04T15:46:21Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "ee4bee13-3155-4e26-8cae-2f030dcd6bf4",
        "parentId" : "eb5c06fc-8976-4b9b-8357-33facf0e4b60",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "This method serializes the request with the header while the test method serializes the header only. So, not a duplicate, right? Personally, I think it's useful for the class to be symmetric: it can parse from a buffer and serialize to a buffer. Do you have a concern that it may be misused?",
        "createdAt" : "2020-12-04T16:13:01Z",
        "updatedAt" : "2020-12-04T16:13:01Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "17ff19ab-5097-42a7-b7ce-7a3e13426308",
        "parentId" : "eb5c06fc-8976-4b9b-8357-33facf0e4b60",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "There is a reasonable argument that `serializeBody` is the counterpart to `parse` though and this particular method doesn't have to be here. I can buy that.",
        "createdAt" : "2020-12-04T16:14:32Z",
        "updatedAt" : "2020-12-04T16:14:32Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "97f7443b-603b-42a2-8158-8aa763fd8221",
        "parentId" : "eb5c06fc-8976-4b9b-8357-33facf0e4b60",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "> Do you have a concern that it may be misused?\r\n\r\nyes. Also the various serialization methods are a bit chaos to me :(",
        "createdAt" : "2020-12-04T16:19:02Z",
        "updatedAt" : "2020-12-04T16:19:10Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "6ba61453-2301-4af0-b262-ee19fe8164ff",
        "parentId" : "eb5c06fc-8976-4b9b-8357-33facf0e4b60",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "Maybe we should move all testing-only serialization to a single utils (in test scope). I grep \"static ByteBuffer\" + \"request/response\" and ```MessageUtils```, ```MessageTestUtil```, ```RequestUtils``` and ```TestUtils``` have similar method interface.",
        "createdAt" : "2020-12-04T16:30:02Z",
        "updatedAt" : "2020-12-04T16:30:02Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "61c3d2a6-a39b-41d2-bdde-89312409a7ed",
        "parentId" : "eb5c06fc-8976-4b9b-8357-33facf0e4b60",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "I have a refactoring that consolidates the logic around `Send`. But I think that would be best done in a separate PR since this PR is really massive. Since these methods are all in internal classes and are only used by tests, I suggest we keep them as they are for now and tackle these nits in the follow up PR.",
        "createdAt" : "2020-12-07T22:05:29Z",
        "updatedAt" : "2020-12-07T22:05:29Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "c4d77b8c-b65c-42f1-b49d-8162cbd0819d",
        "parentId" : "eb5c06fc-8976-4b9b-8357-33facf0e4b60",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "I have these changes locally, so I can submit them immediately after.",
        "createdAt" : "2020-12-07T22:06:27Z",
        "updatedAt" : "2020-12-07T22:06:27Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad0e0d534090ffe2bec563592f556f4e2c7ed06a",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +103,107 @@\n    // Visible for testing\n    public final ByteBuffer serializeWithHeader(RequestHeader header) {\n        return RequestUtils.serialize(header.data(), header.headerVersion(), data(), version);\n    }"
  },
  {
    "id" : "14782528-282b-4ddc-88f3-f10a9313a826",
    "prId" : 7409,
    "prUrl" : "https://github.com/apache/kafka/pull/7409#pullrequestreview-546575579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6052c3e-8a3c-42b3-94de-fbea1d4309b0",
        "parentId" : null,
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "Is this toString variety still useful?",
        "createdAt" : "2020-12-04T14:44:42Z",
        "updatedAt" : "2020-12-04T15:46:21Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "97194eea-d723-4c6b-a3de-cd72a9110efe",
        "parentId" : "b6052c3e-8a3c-42b3-94de-fbea1d4309b0",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "I think so. Do you think it's not?",
        "createdAt" : "2020-12-04T15:57:40Z",
        "updatedAt" : "2020-12-04T15:57:41Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "d8219635-146c-4981-baee-8f8980b88b67",
        "parentId" : "b6052c3e-8a3c-42b3-94de-fbea1d4309b0",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Sorry, what do you mean by `variety`? The `verbose` boolean? Yes, that is useful for things like fetch and produce.",
        "createdAt" : "2020-12-04T15:58:06Z",
        "updatedAt" : "2020-12-04T15:58:06Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "38ac1661-eb65-4496-8eda-97a2bc9342e3",
        "parentId" : "b6052c3e-8a3c-42b3-94de-fbea1d4309b0",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "It seems only ```ProduceRequest``` does produce verbose string. Maybe we can remove the ```toString(boolean verbose)``` as most requests does not generate verbose string. Also, ```ProduceRequest``` should override ```toString()``` to generate a verbose string always. ",
        "createdAt" : "2020-12-04T16:05:03Z",
        "updatedAt" : "2020-12-04T16:05:03Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "37bf1913-0d7f-4273-89c7-20434448056a",
        "parentId" : "b6052c3e-8a3c-42b3-94de-fbea1d4309b0",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "The verbosity flag is used for request logging. Produce and fetch are the most important ones. The rest can be ignored. I don't see the benefit in removing this functionality.",
        "createdAt" : "2020-12-07T22:03:49Z",
        "updatedAt" : "2020-12-07T22:03:50Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad0e0d534090ffe2bec563592f556f4e2c7ed06a",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +120,124 @@\n    public String toString(boolean verbose) {\n        return data().toString();\n    }\n"
  },
  {
    "id" : "92ec9426-5e80-4d3b-89c9-42e13fca3d18",
    "prId" : 9008,
    "prUrl" : "https://github.com/apache/kafka/pull/9008#pullrequestreview-457612163",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1376b1e9-5fbd-413b-abd5-3c4e73805879",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "nit: any reason not to stick with the same constructor convention as the other requests?",
        "createdAt" : "2020-07-27T22:20:10Z",
        "updatedAt" : "2020-07-29T17:20:05Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "020ef859-c654-4409-9267-4dde9a46761f",
        "parentId" : "1376b1e9-5fbd-413b-abd5-3c4e73805879",
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "I just wanted to remove the Struct constructor of FetchRequest completely. Eventually, `RequestContext#parseRequest(ByteBuffer)` will stop using Structs and pass the message data classes to `AbstractRequest#parseRequest` (or similar).",
        "createdAt" : "2020-07-29T15:01:22Z",
        "updatedAt" : "2020-07-29T17:20:05Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      }
    ],
    "commit" : "507eb047ba0f652f7781d80e35c8d8c262ccb9f5",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +148,152 @@                return new ProduceRequest(struct, apiVersion);\n            case FETCH:\n                return new FetchRequest(new FetchRequestData(struct, apiVersion), apiVersion);\n            case LIST_OFFSETS:\n                return new ListOffsetRequest(struct, apiVersion);"
  },
  {
    "id" : "936ceaff-2ffd-4483-b1fa-4efa09b0486a",
    "prId" : 10142,
    "prUrl" : "https://github.com/apache/kafka/pull/10142#pullrequestreview-614811955",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c60059d1-43fd-4ec6-822a-b03a0fe79e99",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "It seems useful to validate that the api key and api version from the request header match that in the request object.",
        "createdAt" : "2021-03-17T21:45:27Z",
        "updatedAt" : "2021-04-05T18:57:38Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "e9243cb580911efdb5f0b2266fe13f9ea5f151ec",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +105,109 @@     * Serializes header and body without prefixing with size (unlike `toSend`, which does include a size prefix).\n     */\n    public final ByteBuffer serializeWithHeader(RequestHeader header) {\n        if (header.apiKey() != apiKey) {\n            throw new IllegalArgumentException(\"Could not build request \" + apiKey + \" with header api key \" + header.apiKey());"
  }
]