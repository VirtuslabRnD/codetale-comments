[
  {
    "id" : "29058c32-927b-4d38-8725-306856b76601",
    "prId" : 7381,
    "prUrl" : "https://github.com/apache/kafka/pull/7381#pullrequestreview-296041019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d048311d-ad0f-41a3-9888-01fdd7973575",
        "parentId" : null,
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "If these are just for unit testing could they be lower visibility? Maybe package-private?",
        "createdAt" : "2019-10-01T20:45:22Z",
        "updatedAt" : "2019-10-03T19:34:23Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      },
      {
        "id" : "8b021e31-a84f-4dbb-ad0c-0d5f12b6cbff",
        "parentId" : "d048311d-ad0f-41a3-9888-01fdd7973575",
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "I have checked this and unfortunately it is not possible as it is used by few packages in the clients.",
        "createdAt" : "2019-10-02T06:52:15Z",
        "updatedAt" : "2019-10-03T19:34:23Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc07639d6db7c5712730e5130ad67fb21504f5e8",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +85,89 @@     * @return A new NodeApiVersions object.\n     */\n    public static NodeApiVersions create(short apiKey, short minVersion, short maxVersion) {\n        return create(Collections.singleton(new ApiVersion(apiKey, minVersion, maxVersion)));\n    }"
  },
  {
    "id" : "dcbac8d4-300f-4f4b-923e-da84b063fe48",
    "prId" : 9600,
    "prUrl" : "https://github.com/apache/kafka/pull/9600#pullrequestreview-568729986",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44319373-2882-4f0d-96d5-1681b7881dc8",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "We could probably simplify this so that it takes a single `ApiVersion` parameter?\r\n\r\nBy the way, the implementation above `latestUsableVersion(ApiKeys apiKey)` since it basically does an intersection of the latest supported version with itself. A little helper (say `latestSupportedOrThrow`) might simplify this.",
        "createdAt" : "2021-01-15T00:21:28Z",
        "updatedAt" : "2021-01-15T21:55:01Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "af3208a163f84975283c8603142481da8eaa613a",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +125,129 @@     * Get the latest version supported by the broker within an allowed range of versions\n     */\n    public short latestUsableVersion(ApiKeys apiKey, short oldestAllowedVersion, short latestAllowedVersion) {\n        if (!supportedVersions.containsKey(apiKey))\n            throw new UnsupportedVersionException(\"The broker does not support \" + apiKey);"
  }
]