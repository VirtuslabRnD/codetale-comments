[
  {
    "id" : "663cfb59-7102-49ef-aa02-23780748da74",
    "prId" : 7353,
    "prUrl" : "https://github.com/apache/kafka/pull/7353#pullrequestreview-294472132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4338116c-3e3d-4da6-8eea-0a4b3ed7e28a",
        "parentId" : null,
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "In addition to having a function which takes a `Collection<Errors>`, it would be useful to have a function which takes a `Stream<Errors>`.  That way we could avoid materializing the stream when all we want to do is count the number of errors of each type.",
        "createdAt" : "2019-09-24T19:55:53Z",
        "updatedAt" : "2019-09-28T20:28:31Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "c9eb74da-dc70-4245-81c8-70772b419dca",
        "parentId" : "4338116c-3e3d-4da6-8eea-0a4b3ed7e28a",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Do we have any callers that would use this? If not, then I suggest we consider it when we need it.",
        "createdAt" : "2019-09-24T21:07:39Z",
        "updatedAt" : "2019-09-28T20:28:31Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "d1ff98bb-fc5b-4a5a-a715-c3af8c8bf0ce",
        "parentId" : "4338116c-3e3d-4da6-8eea-0a4b3ed7e28a",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "I see that we have a few. Let's keep this for a separate PR though, this one is pretty large as it is.",
        "createdAt" : "2019-09-25T12:27:25Z",
        "updatedAt" : "2019-09-28T20:28:31Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "0da7de74-2c7b-4ca8-b4c7-798b98a2af81",
        "parentId" : "4338116c-3e3d-4da6-8eea-0a4b3ed7e28a",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "OK.  I filed [KAFKA-8955 Add an AbstractResponse#errorCounts method that takes a stream or iterable](https://issues.apache.org/jira/browse/KAFKA-8955) to track this.",
        "createdAt" : "2019-09-27T17:45:38Z",
        "updatedAt" : "2019-09-28T20:28:31Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "a971fb10f879b8ba20b89ca55bdda0ba40be5090",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +57,61 @@    }\n\n    protected Map<Errors, Integer> errorCounts(Collection<Errors> errors) {\n        Map<Errors, Integer> errorCounts = new HashMap<>();\n        for (Errors error : errors)"
  },
  {
    "id" : "4449e578-f447-4a35-9cbd-60c26db75300",
    "prId" : 7372,
    "prUrl" : "https://github.com/apache/kafka/pull/7372#pullrequestreview-293796930",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "530e060f-7aa2-41e0-bcae-e71387b8d3e2",
        "parentId" : null,
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "Do you think it's worth adding a method to return the header version here? Subclasses can access it with `this.api.headerVersion(this.version())`, but it might be nice to have `AbstractResponse#headerVersion`",
        "createdAt" : "2019-09-25T18:19:14Z",
        "updatedAt" : "2019-09-25T18:19:14Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      },
      {
        "id" : "846e3cc3-b964-42e8-9ef9-1dfdee75f6c1",
        "parentId" : "530e060f-7aa2-41e0-bcae-e71387b8d3e2",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "Interesting idea, but let's see if we need it anywhere first.",
        "createdAt" : "2019-09-26T15:07:44Z",
        "updatedAt" : "2019-09-26T15:07:44Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "be5a86abde45a85189881e8ebe6995964d91302b",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +34,38 @@        return new NetworkSend(destination, serialize(header.toStruct(), toStruct(apiVersion)));\n    }\n\n    /**\n     * Visible for testing, typically {@link #toSend(String, ResponseHeader, short)} should be used instead."
  }
]