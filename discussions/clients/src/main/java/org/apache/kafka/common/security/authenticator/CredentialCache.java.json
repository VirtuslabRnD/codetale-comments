[
  {
    "id" : "1e5ed3f7-2b80-4a02-a3f8-cb46a82be2f0",
    "prId" : 5427,
    "prUrl" : "https://github.com/apache/kafka/pull/5427#pullrequestreview-151880772",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "653feea1-bd39-4151-9bb8-10a4afb528dd",
        "parentId" : null,
        "authorId" : "d874be1c-ef19-48b0-9fa7-2f43a8f96d37",
        "body" : "Can this be computeIfAbsent? I think this is just:\r\n\r\n    public <C> Cache<C> createCache<String mechanism, Class<C> credentialClass) {\r\n      return cacheMap.computeIfAbsent(mechanism, k -> new Cache<>(credentialClass));\r\n    }",
        "createdAt" : "2018-08-22T14:57:26Z",
        "updatedAt" : "2018-09-09T17:26:07Z",
        "lastEditedBy" : "d874be1c-ef19-48b0-9fa7-2f43a8f96d37",
        "tags" : [
        ]
      },
      {
        "id" : "8efe2836-2d6a-495c-9b54-84929a0c5488",
        "parentId" : "653feea1-bd39-4151-9bb8-10a4afb528dd",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "`computeIfAbsent` has stronger guarantees for ConcurrentMaps. I don't think we need them here.",
        "createdAt" : "2018-09-01T17:07:20Z",
        "updatedAt" : "2018-09-09T17:26:07Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "160ac83e-98f2-44b8-a346-96bc5a8bfc64",
        "parentId" : "653feea1-bd39-4151-9bb8-10a4afb528dd",
        "authorId" : "2a5e5a4d-e0e2-4e26-b139-0930dd63f949",
        "body" : "+1",
        "createdAt" : "2018-09-03T23:47:06Z",
        "updatedAt" : "2018-09-09T17:26:07Z",
        "lastEditedBy" : "2a5e5a4d-e0e2-4e26-b139-0930dd63f949",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9ab99fc0e1e55395d5e68162b0c237f28b0a35d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +25,29 @@    public <C> Cache<C> createCache(String mechanism, Class<C> credentialClass) {\n        Cache<C> cache = new Cache<>(credentialClass);\n        Cache<C> oldCache = (Cache<C>) cacheMap.putIfAbsent(mechanism, cache);\n        return oldCache == null ? cache : oldCache;\n    }"
  }
]