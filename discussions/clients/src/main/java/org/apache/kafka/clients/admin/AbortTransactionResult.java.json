[
  {
    "id" : "4c8230bd-4063-46cd-a466-5504392eb13e",
    "prId" : 10599,
    "prUrl" : "https://github.com/apache/kafka/pull/10599#pullrequestreview-645568264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "35c5c61f-c7dc-4a33-9255-116f349f2941",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "Should we add some javadoc to the classes/methods published in our public API?",
        "createdAt" : "2021-04-27T08:18:46Z",
        "updatedAt" : "2021-04-27T20:42:56Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb2274d2e4d2e1794b9c6d4020b804799b19ad25",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +30,34 @@ */\n@InterfaceStability.Evolving\npublic class AbortTransactionResult {\n    private final Map<TopicPartition, KafkaFutureImpl<Void>> futures;\n"
  },
  {
    "id" : "016c84a3-7a80-49bc-97e1-b65bb0cafa39",
    "prId" : 10599,
    "prUrl" : "https://github.com/apache/kafka/pull/10599#pullrequestreview-646673104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96a1e335-94eb-4253-a07d-041c7ba2433b",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "I wonder if we should also add a method to access the result of individual partition. `all()` will fail if any of the partition failed but the user does not know which one and he has no way to inspect the results of all partitions. What do you think?",
        "createdAt" : "2021-04-27T08:24:54Z",
        "updatedAt" : "2021-04-27T20:42:56Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "653fd3e2-0dde-4fdf-a44a-4572bda43028",
        "parentId" : "96a1e335-94eb-4253-a07d-041c7ba2433b",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Yeah, that's kind of the typical `all()` contract. We are missing a separate API to get the partition-level results. I can add that. I have also been debating whether to add a placeholder result value just in case we need to return something in the future. What do you think?",
        "createdAt" : "2021-04-27T18:48:48Z",
        "updatedAt" : "2021-04-27T20:42:56Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "1aa7f4fd-2555-4b6a-a63e-36d86ff26e6d",
        "parentId" : "96a1e335-94eb-4253-a07d-041c7ba2433b",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I realized what I was doing here. Right now, the API is taking only a single `AbortTransactionSpec`, so `all()` has no ambiguity. In the future, we could decide to add batching, but I cannot think of a strong reason for it. It does not make much sense for the hanging transaction cleanup use case. However, if we do decide to, then it will complicate the types in here a bit because the key will probably have to be the `AbortTransactionSpec` itself since `WriteTxnMarkers` does batching both by topic partition and the tuple of `(producerId, producerEpoch, coordinatorEpoch)`. Here I decided to try and keep it simple and avoid committing to a more granular API that we may never need. Does that seem reasonable?",
        "createdAt" : "2021-04-27T20:27:34Z",
        "updatedAt" : "2021-04-27T20:42:56Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "2e230adb-3ebc-4882-ae0e-cbd7c638e0a0",
        "parentId" : "96a1e335-94eb-4253-a07d-041c7ba2433b",
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "That makes sense. I got confused by the fact that `AbortTransactionResult` takes a `Map` in its constructor. In this case, `all()` seems fine. Thanks for the clarification.",
        "createdAt" : "2021-04-28T07:17:56Z",
        "updatedAt" : "2021-04-28T07:18:04Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb2274d2e4d2e1794b9c6d4020b804799b19ad25",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +44,48 @@     * @return the future\n     */\n    public KafkaFuture<Void> all() {\n        return KafkaFuture.allOf(futures.values().toArray(new KafkaFuture[0]));\n    }"
  }
]