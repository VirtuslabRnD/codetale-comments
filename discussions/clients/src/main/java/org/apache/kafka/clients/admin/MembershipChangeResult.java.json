[
  {
    "id" : "c22f7af5-cf96-4f9e-b5e1-a493c8da9043",
    "prId" : 7122,
    "prUrl" : "https://github.com/apache/kafka/pull/7122#pullrequestreview-270438566",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02aa569a-f6f7-4f1b-bfa0-23e814722889",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I'd suggest we organize the future differently to be consistent with others:\r\n\r\n```\r\nMembershipChangeResult: Map<MemberIdentity, KafkaFuture<Void>>\r\n```\r\n\r\nIf the response has an error, that error should be thrown from the future.get() directly of the top-level future. Then within the map, we set the `future.complete` or `future.completeExceptionally` accordingly. Please see my other comment above.",
        "createdAt" : "2019-07-30T22:21:07Z",
        "updatedAt" : "2019-09-06T23:52:55Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "d9372500-9dbc-4a24-af20-ae4b71fa53c7",
        "parentId" : "02aa569a-f6f7-4f1b-bfa0-23e814722889",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "I'm not sure this would be right because the current API will only call leave group once, so it doesn't make sense to have separate futures. The cases like `deleteGroup`, `describeGroup` or `listGroup` are directing requests to different coordinators so they need to separate the futures for different group.id, while request like `ListConsumerGroupOffsetsResult` aims only at one group, and return only one future.",
        "createdAt" : "2019-08-01T04:03:26Z",
        "updatedAt" : "2019-09-06T23:52:55Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "6e9264b5-c2e5-4926-9d06-e4c6d54928c1",
        "parentId" : "02aa569a-f6f7-4f1b-bfa0-23e814722889",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Discussed with @abbccdda a bit offline, the main reason is to 1) align with the response / per-member error code hierarchy, and also 2) be a bit consistent with other return types (though I agree that in this case, all futures would be completed at the same time since they are from the same coordinator).",
        "createdAt" : "2019-08-03T00:53:10Z",
        "updatedAt" : "2019-09-06T23:52:55Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecefd620404778b0643377f2e409920efb9aa2e9",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +30,34 @@public class MembershipChangeResult {\n\n    private KafkaFuture<RemoveMemberFromGroupResult> future;\n\n    MembershipChangeResult(KafkaFuture<RemoveMemberFromGroupResult> future) {"
  }
]