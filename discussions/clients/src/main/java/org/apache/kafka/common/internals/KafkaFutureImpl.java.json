[
  {
    "id" : "0d2433ee-42bc-4bc0-87a9-cf59d3608313",
    "prId" : 4856,
    "prUrl" : "https://github.com/apache/kafka/pull/4856#pullrequestreview-112244077",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cd977bd-d6e6-435a-b721-3d0ad19ac536",
        "parentId" : null,
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "If we want to add a new API to KafkaFuture, there needs to be a KIP for that.\r\n\r\nIn any case, I don't think we need a new API for this.  You can just use `thenApply`, right?",
        "createdAt" : "2018-04-13T23:22:48Z",
        "updatedAt" : "2018-04-15T16:54:15Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "6eaa7e1d-25af-4620-a808-227438935a93",
        "parentId" : "1cd977bd-d6e6-435a-b721-3d0ad19ac536",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Please see my other comment below.\r\n\r\nThe `copyWith` API is only added in `KafkaFutureImpl`, not in `KafkaFuture`, so I think adding it would not require a KIP.",
        "createdAt" : "2018-04-15T16:46:03Z",
        "updatedAt" : "2018-04-15T16:54:15Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "50a73806f6ac000c598fb1b8958d67c2be39bd16",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +147,151 @@    }\n\n    public <R> void copyWith(KafkaFuture<R> future, BaseFunction<R, T> function) {\n        KafkaFutureImpl<R> futureImpl = (KafkaFutureImpl<R>) future;\n        futureImpl.addWaiter(new Applicant<>(function, this));"
  },
  {
    "id" : "78bc3485-eb72-4c85-a4bc-e6601b5ac89c",
    "prId" : 9878,
    "prUrl" : "https://github.com/apache/kafka/pull/9878#pullrequestreview-697998120",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b32c9a5-8795-49ae-81cf-5b33d616c840",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "I am not sure that I follow why we wrap it here. Could you elaborate?",
        "createdAt" : "2021-07-02T07:14:34Z",
        "updatedAt" : "2021-07-02T07:43:07Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "3102fc07-2494-4ff2-bf5d-527f8e34438a",
        "parentId" : "0b32c9a5-8795-49ae-81cf-5b33d616c840",
        "authorId" : "491bcd91-bc8d-4f54-b5fd-d6c7be5e8693",
        "body" : "Again it comes down to maintaining the historical behaviour of `thenApply` when the supplied `Function` threw `CompletionException`.  Basically `CompletableFuture` does some unwrapping of `CompletionException` in dependent futures which is incompatible with what `KafkaFuture` did. We can't prevent the unwrapping, but since such wrapping only goes one level deep in the cause chain we can restore the `KafkaFuture` behaviour by inserting a bogus `CompletionException` for `CompletableFuture` to remove. \r\n\r\nI've added a comment and a test for this case.",
        "createdAt" : "2021-07-02T09:24:10Z",
        "updatedAt" : "2021-07-02T09:24:10Z",
        "lastEditedBy" : "491bcd91-bc8d-4f54-b5fd-d6c7be5e8693",
        "tags" : [
        ]
      }
    ],
    "commit" : "fea5c598acf6438886d119063638a9f0b4d0737d",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +66,70 @@                    // exception thrown by the function, so we add an extra CompletionException here to\n                    // maintain the KafkaFuture behaviour.\n                    throw new CompletionException(t);\n                } else {\n                    throw t;"
  }
]