[
  {
    "id" : "8cc11dae-0a70-4377-8015-1c6bb8720ccf",
    "prId" : 7409,
    "prUrl" : "https://github.com/apache/kafka/pull/7409#pullrequestreview-545085542",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a43be43e-4791-4867-98e8-0bbfb20da952",
        "parentId" : null,
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "not sure whether we should reduce the initial capacity of ObjectSerializationCache. Not all request/response uses full cache.",
        "createdAt" : "2020-12-04T14:57:19Z",
        "updatedAt" : "2020-12-04T15:46:21Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "1993c4cd-62a7-4b24-b8e0-ff2ca837cc66",
        "parentId" : "a43be43e-4791-4867-98e8-0bbfb20da952",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Maybe we can file a JIRA and investigate this separately. Not clear what would be the optimal size.",
        "createdAt" : "2020-12-04T15:59:26Z",
        "updatedAt" : "2020-12-04T15:59:26Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ad0e0d534090ffe2bec563592f556f4e2c7ed06a",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +216,220 @@        short apiVersion\n    ) {\n        ObjectSerializationCache serializationCache = new ObjectSerializationCache();\n        MessageSizeAccumulator messageSize = RequestUtils.size(serializationCache, header, headerVersion, apiMessage, apiVersion);\n"
  },
  {
    "id" : "5c1a4afd-de7c-4c49-a477-b848c2ccc749",
    "prId" : 9563,
    "prUrl" : "https://github.com/apache/kafka/pull/9563#pullrequestreview-527792053",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe27ee84-0b4a-49a8-9fb7-f8fb475c2ac4",
        "parentId" : null,
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "Is it worth wrapping the byte array to a new ```ByteBufferSend``` to avoid array coping?",
        "createdAt" : "2020-11-10T12:57:49Z",
        "updatedAt" : "2020-11-13T23:24:55Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "91eb940b-bbfe-4536-9b56-61432d67da2a",
        "parentId" : "fe27ee84-0b4a-49a8-9fb7-f8fb475c2ac4",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I did that in an earlier iteration, but I wasn't sure if the overhead of the `ByteBuffer` and `ByteBufferSend` made it a net win in the end. I also thought about adding a heuristic, such as looking for a minimum size. In the end, it seemed simpler to rely on \"zeroCopy\" to let us know when we are likely to get a benefit. ",
        "createdAt" : "2020-11-10T20:20:34Z",
        "updatedAt" : "2020-11-13T23:24:55Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "dfcc2a2f-b54a-4030-9f14-4205712bbd34",
        "parentId" : "fe27ee84-0b4a-49a8-9fb7-f8fb475c2ac4",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "Thanks for your explanation. make sense to me.",
        "createdAt" : "2020-11-11T02:05:50Z",
        "updatedAt" : "2020-11-13T23:24:55Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec0a079e123bad5da0305c63342cc62348ad3a01",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +92,96 @@\n    @Override\n    public void writeByteArray(byte[] arr) {\n        buffer.put(arr);\n    }"
  },
  {
    "id" : "8b4ce51e-0ae3-4f2f-bc89-977478b10c10",
    "prId" : 9819,
    "prUrl" : "https://github.com/apache/kafka/pull/9819#pullrequestreview-575258837",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3145d846-ae63-4837-8d83-5627988380ae",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Are there any tests we can update to cover this?",
        "createdAt" : "2021-01-25T06:51:59Z",
        "updatedAt" : "2021-01-26T08:26:00Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "2c131cdc-826c-45ff-840b-21ded061ae34",
        "parentId" : "3145d846-ae63-4837-8d83-5627988380ae",
        "authorId" : "12f98c82-b9ef-4668-aa6f-5a62bf3439bb",
        "body" : "Add a testZeroCopyUnalignedRecords",
        "createdAt" : "2021-01-25T10:29:19Z",
        "updatedAt" : "2021-01-26T08:26:00Z",
        "lastEditedBy" : "12f98c82-b9ef-4668-aa6f-5a62bf3439bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "d75d65b77e2a8ea36e0a236e46a8b11c3316ba20",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +139,143 @@            flushPendingBuffer();\n            addBuffer(((MemoryRecords) records).buffer());\n        } else if (records instanceof UnalignedMemoryRecords) {\n            flushPendingBuffer();\n            addBuffer(((UnalignedMemoryRecords) records).buffer());"
  }
]