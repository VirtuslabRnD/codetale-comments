[
  {
    "id" : "62086b9d-5a7d-4af3-afe2-232286ffeb86",
    "prId" : 4332,
    "prUrl" : "https://github.com/apache/kafka/pull/4332#pullrequestreview-86440734",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccdc4416-2a96-4134-ad20-8c64cf5b917d",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Isn't the same issue present in the other topic management methods?",
        "createdAt" : "2017-12-20T13:21:05Z",
        "updatedAt" : "2017-12-20T23:02:19Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "67e90597-67af-44c5-95e6-b0d6ee19a46b",
        "parentId" : "ccdc4416-2a96-4134-ad20-8c64cf5b917d",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Fair point. But the others don't mention anything like this (except `createTopics`). Thus updating `createTopics` seems to make sense (to at least avoid miss leading phrases).\r\n\r\nI would leave all others as-is.",
        "createdAt" : "2017-12-20T23:00:56Z",
        "updatedAt" : "2017-12-20T23:02:19Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "3f1f95d2-d5a9-4cb2-a168-c68a4ce53923",
        "parentId" : "ccdc4416-2a96-4134-ad20-8c64cf5b917d",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "I agree that the same issue is present in many other admin methods.  However, `createTopics` and `deleteTopics` tend to be the ones that surprise users.  Users do things like create a topic and then expect to be able to delete it immediately, in a test.",
        "createdAt" : "2018-01-03T17:43:57Z",
        "updatedAt" : "2018-01-03T17:43:57Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "686efab1034d73d503c709a85f5dc20697b30788",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +139,143 @@     * This operation is not transactional so it may succeed for some topics while fail for others.\n     *\n     * It may take several seconds after the {@code DeleteTopicsResult} returns\n     * success for all the brokers to become aware that the topics are gone.\n     * During this time, AdminClient#listTopics and AdminClient#describeTopics"
  },
  {
    "id" : "09ccf71b-a791-4aa4-9bb2-9d6e29b8195e",
    "prId" : 5210,
    "prUrl" : "https://github.com/apache/kafka/pull/5210#pullrequestreview-129768330",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2b109ba-a8b3-4174-93de-1d5786e4cfdf",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Since this is a public class we'd need a KIP for this change. But it should be straight-forward (we should probably do this since day one). WDYT @cmccabe @hachikuji ",
        "createdAt" : "2018-06-18T22:59:04Z",
        "updatedAt" : "2018-06-26T04:52:29Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7463ceb905caaa741c666387fd12941137c9de09",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +777,781 @@     * @return\n     */\n    public abstract Map<MetricName, ? extends Metric> metrics();\n}"
  },
  {
    "id" : "1e0ec5a4-60a1-4761-90e3-5e1ad0121b56",
    "prId" : 5667,
    "prUrl" : "https://github.com/apache/kafka/pull/5667#pullrequestreview-190352241",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37658f7d-c39a-4405-a68a-cfcfc577063b",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I wonder if a safer way to do this from a compatibility perspective would be to provide a default method for `close(Duration)` which invokes `close(long, TimeUnit)`. Similarly for the producer.",
        "createdAt" : "2019-01-07T18:57:37Z",
        "updatedAt" : "2019-01-15T06:10:36Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "77caf322-5032-4f28-b897-97f5bbe3635f",
        "parentId" : "37658f7d-c39a-4405-a68a-cfcfc577063b",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "Got it. However, it will be hard to remove deprecated methods if the compatibility guarantee includes the \"inheritance\"...",
        "createdAt" : "2019-01-08T09:05:39Z",
        "updatedAt" : "2019-01-15T06:10:36Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "073e2898-c626-41f6-9646-cb3888295426",
        "parentId" : "37658f7d-c39a-4405-a68a-cfcfc577063b",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I think deprecation covers this. Eventually at a major release version, we can drop the old methods. But it's reasonable to expect that we don't break compatibility until the deprecation window has closed.",
        "createdAt" : "2019-01-08T17:15:34Z",
        "updatedAt" : "2019-01-15T06:10:36Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "c3d1e541-700e-4e0c-8e01-ff66a441ded6",
        "parentId" : "37658f7d-c39a-4405-a68a-cfcfc577063b",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "> I think deprecation covers this. Eventually at a major release version, we can drop the old methods. But it's reasonable to expect that we don't break compatibility until the deprecation window has closed.\r\n\r\nThanks for the explanation!",
        "createdAt" : "2019-01-08T17:19:16Z",
        "updatedAt" : "2019-01-15T06:10:36Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      }
    ],
    "commit" : "b4c9f2e4cac38bb7094099c44170c9ce595571b0",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +89,93 @@     */\n    @Deprecated\n    public void close(long duration, TimeUnit unit) {\n        close(Duration.ofMillis(unit.toMillis(duration)));\n    }"
  },
  {
    "id" : "e251c012-959d-4fb9-96db-b187abeb0380",
    "prId" : 6247,
    "prUrl" : "https://github.com/apache/kafka/pull/6247#pullrequestreview-205310076",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c936649c-8385-4300-a1c2-8acff0edb3c8",
        "parentId" : null,
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "Should we mention this in the KIP? It was not specified there - even though this is the same behavior as the old AlterConfigs, in the context of the KIP this non-transactional functionality isn't obvious I fear",
        "createdAt" : "2019-02-18T12:11:17Z",
        "updatedAt" : "2019-04-13T16:04:28Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      },
      {
        "id" : "433f23b3-0d9a-4507-b413-4187995ea3b0",
        "parentId" : "c936649c-8385-4300-a1c2-8acff0edb3c8",
        "authorId" : "915b2f67-05e6-4824-939a-398e7be58870",
        "body" : "will update the KIP",
        "createdAt" : "2019-02-19T16:19:48Z",
        "updatedAt" : "2019-04-13T16:04:28Z",
        "lastEditedBy" : "915b2f67-05e6-4824-939a-398e7be58870",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf81f6c6e266fe058527609c60fb163035b70509",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +412,416 @@     * Incrementally update the configuration for the specified resources.\n     *\n     * Updates are not transactional so they may succeed for some resources while fail for others. The configs for\n     * a particular resource are updated atomically.\n     *"
  },
  {
    "id" : "766595ae-2420-454f-a4aa-60a1772e395b",
    "prId" : 7087,
    "prUrl" : "https://github.com/apache/kafka/pull/7087#pullrequestreview-263333170",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74e2ea0c-c5b2-4367-85a9-2f5f9c3d9ef1",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "This was probably discussed in the KIP, but obviously the downside is that users won't get any warning or hint that they should transition. But I guess we don't get a substantial benefit from removing `AdminClient`, so maybe we'll just never do it.",
        "createdAt" : "2019-07-17T04:57:05Z",
        "updatedAt" : "2019-07-22T16:16:02Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "096c9cea-676c-4c36-84ac-072f843c5552",
        "parentId" : "74e2ea0c-c5b2-4367-85a9-2f5f9c3d9ef1",
        "authorId" : "e431deb4-a19e-4e78-a775-12af049c9089",
        "body" : "I agree, but this was covered / discussed in detail on the voting thread and this was the outcome.",
        "createdAt" : "2019-07-17T21:43:33Z",
        "updatedAt" : "2019-07-22T16:16:02Z",
        "lastEditedBy" : "e431deb4-a19e-4e78-a775-12af049c9089",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ae45454e093d985aac45084987a36be11c74ad2",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +26,30 @@ * Client code should use the newer {@link Admin} interface in preference to this class.\n *\n * This class may be removed in a later release, but has not be marked as deprecated to avoid unnecessary noise.\n */\npublic abstract class AdminClient implements Admin {"
  }
]