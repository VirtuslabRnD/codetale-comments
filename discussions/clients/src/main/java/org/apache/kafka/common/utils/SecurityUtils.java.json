[
  {
    "id" : "a5dc4f0d-af9f-4eb6-b0a5-e5077a2af2d6",
    "prId" : 7090,
    "prUrl" : "https://github.com/apache/kafka/pull/7090#pullrequestreview-277432519",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f78653f5-8b9e-44f0-916e-7d3086b215fd",
        "parentId" : null,
        "authorId" : "d209785c-ecc3-4ee2-b1e2-c791ace87b17",
        "body" : "Suggestion on above function addConfiguredSecurityProviders:\r\n1.\r\nI think using following format for security.providers:\r\nsecurity.providers=provider1_classname,provider2_generator_classname key1:val1 key2:val2,...\r\n2.\r\nSo when parsing above config, if there is no parameters following provider1_classname, then we can think provider1_classname is java Provider, then insert it; if there are key:value pair parameters following provider2_generator_classname, we can think provider2_generator_classname is SecurityProviderGenerator, then create \"Map<String, ?> config\" from key:value pair parameters, then call configure and getProvider of instance of SecurityProviderGenerator. This way we can handle all different scenarios in the future.",
        "createdAt" : "2019-08-15T23:18:50Z",
        "updatedAt" : "2019-08-22T23:04:52Z",
        "lastEditedBy" : "d209785c-ecc3-4ee2-b1e2-c791ace87b17",
        "tags" : [
        ]
      },
      {
        "id" : "8e597fe8-01ba-4525-b019-1987236e6ae0",
        "parentId" : "f78653f5-8b9e-44f0-916e-7d3086b215fd",
        "authorId" : "2d677cb0-7f58-4f02-8104-880b46eb7fb3",
        "body" : "@jeffchao traditionally Kafka used key,value pairs in properties and pass it everywhere and each implementation takes look at this config and pulls their interested key,value pairs.\r\nExample, authorizer interface https://github.com/apache/kafka/blob/trunk/core/src/main/scala/kafka/security/auth/Authorizer.scala#L35 . The pluggable class when it gets instantiated a configure method will be called and all the key,value in server.properties will be passed and it will pick whats relevant to the class.\r\nWe can do the same here instead of asking users append key,values into the a config which is hard to configure and hard to get it right.",
        "createdAt" : "2019-08-16T16:44:42Z",
        "updatedAt" : "2019-08-22T23:04:52Z",
        "lastEditedBy" : "2d677cb0-7f58-4f02-8104-880b46eb7fb3",
        "tags" : [
        ]
      },
      {
        "id" : "d3e623fc-01d8-490d-81ab-079a0951c38b",
        "parentId" : "f78653f5-8b9e-44f0-916e-7d3086b215fd",
        "authorId" : "d209785c-ecc3-4ee2-b1e2-c791ace87b17",
        "body" : "I got what you said. But for this case, key/value pairs might be very specific to the provider. \r\n1. Do you mean we can configure SecurityProviderGenerator like JAAS that will configure class name and key/value pairs parameters together? \r\n2. How do we configure a Provider which will not need key/value pairs?  Do we require a wrapper which will  implement SecurityProviderGenerator for the Provider?",
        "createdAt" : "2019-08-19T15:40:41Z",
        "updatedAt" : "2019-08-22T23:04:52Z",
        "lastEditedBy" : "d209785c-ecc3-4ee2-b1e2-c791ace87b17",
        "tags" : [
        ]
      },
      {
        "id" : "7ef04280-f8c7-414b-bdce-30b4a4ff63ea",
        "parentId" : "f78653f5-8b9e-44f0-916e-7d3086b215fd",
        "authorId" : "e775e258-2560-4518-8297-f05969855013",
        "body" : "1. No, we're not going with that. You can configure any properties you need in the server.properties file as key value pairs just like other config params(not like JAAS) and all the config param will be passed to the configure method of the SecurityProviderGenerator(renamed to SecurityProviderCreator). Your implementation of SecurityProviderCreator can read only the config that makes sense to it.\r\n2. All the providerCreator classes that don't need the configure method can skip overriding this method. A default implementation of configure method is added in SecurityProviderCreator.\r\n\r\ncc: @harshach ",
        "createdAt" : "2019-08-19T19:12:05Z",
        "updatedAt" : "2019-08-22T23:04:52Z",
        "lastEditedBy" : "e775e258-2560-4518-8297-f05969855013",
        "tags" : [
        ]
      },
      {
        "id" : "bdcfa988-cba4-4d50-a2b8-54f15cc23d50",
        "parentId" : "f78653f5-8b9e-44f0-916e-7d3086b215fd",
        "authorId" : "d209785c-ecc3-4ee2-b1e2-c791ace87b17",
        "body" : "ok. Just curious what is target date when all implementation for this will be merged?  cc@saisandeep",
        "createdAt" : "2019-08-19T23:25:23Z",
        "updatedAt" : "2019-08-22T23:04:52Z",
        "lastEditedBy" : "d209785c-ecc3-4ee2-b1e2-c791ace87b17",
        "tags" : [
        ]
      },
      {
        "id" : "aa3c7390-5ec5-452b-976f-b43e36d8a64f",
        "parentId" : "f78653f5-8b9e-44f0-916e-7d3086b215fd",
        "authorId" : "e775e258-2560-4518-8297-f05969855013",
        "body" : "It really depends on when the PR gets accepted. I'll try to merge this as soon as it gets accepted.",
        "createdAt" : "2019-08-20T04:29:30Z",
        "updatedAt" : "2019-08-22T23:04:52Z",
        "lastEditedBy" : "e775e258-2560-4518-8297-f05969855013",
        "tags" : [
        ]
      },
      {
        "id" : "7df904d0-7f26-407d-8930-d6de9b02403c",
        "parentId" : "f78653f5-8b9e-44f0-916e-7d3086b215fd",
        "authorId" : "d209785c-ecc3-4ee2-b1e2-c791ace87b17",
        "body" : "It seems I also could approve it. I will read all code tomorrow and work with you to get this approved. ",
        "createdAt" : "2019-08-20T05:22:55Z",
        "updatedAt" : "2019-08-22T23:04:52Z",
        "lastEditedBy" : "d209785c-ecc3-4ee2-b1e2-c791ace87b17",
        "tags" : [
        ]
      },
      {
        "id" : "1bc07492-b4c1-489a-a69e-54b080a1dccd",
        "parentId" : "f78653f5-8b9e-44f0-916e-7d3086b215fd",
        "authorId" : "d209785c-ecc3-4ee2-b1e2-c791ace87b17",
        "body" : ".",
        "createdAt" : "2019-08-20T20:51:05Z",
        "updatedAt" : "2019-08-22T23:04:52Z",
        "lastEditedBy" : "d209785c-ecc3-4ee2-b1e2-c791ace87b17",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed8d030f6d300baf52c0695ace6b5380aa866f0c",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +65,69 @@        }\n    }\n\n}"
  },
  {
    "id" : "1c660545-0e53-4b64-a610-1f1f8a9d4858",
    "prId" : 7090,
    "prUrl" : "https://github.com/apache/kafka/pull/7090#pullrequestreview-276871550",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7a66ceb4-8e43-44af-9cc6-bc06d9893594",
        "parentId" : null,
        "authorId" : "d209785c-ecc3-4ee2-b1e2-c791ace87b17",
        "body" : "Need call securityProviderCreator.configure(config); here? ",
        "createdAt" : "2019-08-19T23:55:20Z",
        "updatedAt" : "2019-08-22T23:04:52Z",
        "lastEditedBy" : "d209785c-ecc3-4ee2-b1e2-c791ace87b17",
        "tags" : [
        ]
      }
    ],
    "commit" : "ed8d030f6d300baf52c0695ace6b5380aa866f0c",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +52,56 @@            String[] securityProviderClasses = securityProviderClassesStr.replaceAll(\"\\\\s+\", \"\").split(\",\");\n            for (int index = 0; index < securityProviderClasses.length; index++) {\n                SecurityProviderCreator securityProviderCreator = (SecurityProviderCreator) Class.forName(securityProviderClasses[index]).newInstance();\n                securityProviderCreator.configure(configs);\n                Security.insertProviderAt(securityProviderCreator.getProvider(), index + 1);"
  }
]