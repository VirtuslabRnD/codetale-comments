[
  {
    "id" : "d0cca1f2-2732-4d5a-a67f-c9de7e98fd28",
    "prId" : 7592,
    "prUrl" : "https://github.com/apache/kafka/pull/7592#pullrequestreview-311265290",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae27bba3-de0f-4d17-b369-1d1e08223f26",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "This is a pretty strange method. Why would you have a public method that always return a non empty `Optional`?",
        "createdAt" : "2019-11-04T00:57:06Z",
        "updatedAt" : "2019-11-04T00:57:06Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "dc298a04-2a1d-499f-9518-c78340568af8",
        "parentId" : "ae27bba3-de0f-4d17-b369-1d1e08223f26",
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "We discussed it at length here (https://github.com/apache/kafka/pull/7570#discussion_r337384275) and offline. This is a nifty helper method that reduces boilerplate for users when composing the AdminClient API call, since the `AlterPartitionReassignments` accepts a map of `TopicPartition, Optional<NewPartitionReassignment>`. \r\n\r\nBecause we do not expect any other uses of `NewPartitionReassignment` outside of an optional,  I thought it was reasonable to return this.",
        "createdAt" : "2019-11-04T09:20:28Z",
        "updatedAt" : "2019-11-04T09:20:28Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      },
      {
        "id" : "33e80a9c-f8f3-406a-96d0-0763cce460ed",
        "parentId" : "ae27bba3-de0f-4d17-b369-1d1e08223f26",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "I don't see much of a discussion in that comment. :) Generally, `Optional` is meant to be returned when a method can return a value or not return a value. Here, we're always wrapping the instance. Furthermore, `of` is typically used as a static factory method. We also made the constructor private, so one cannot create an instance without going through this non standard and somewhat confusing method.",
        "createdAt" : "2019-11-04T11:43:32Z",
        "updatedAt" : "2019-11-04T11:43:32Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "2d4c78bf-08af-4fe3-8585-32865529e152",
        "parentId" : "ae27bba3-de0f-4d17-b369-1d1e08223f26",
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "With relation to the private constructor, the idea was that you would never need to construct a `NewPartitionReassignment` that is not inside an Optional. I thought it made sense to nudge people to use the helper.\r\n\r\nPerhaps we are breaking convention with the naming (`of`) and the return of an `Optional`. Is there a way to both reduce boilerplate and keep conventions intact in this public API, or do we prefer to trade off verbosity for convention?\r\n\r\nI personally wouldn't have been confused and just see this as a helper, but I don't have an extensive Java background.\r\n\r\n",
        "createdAt" : "2019-11-04T11:47:45Z",
        "updatedAt" : "2019-11-04T11:47:45Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      },
      {
        "id" : "ae0a9202-c290-40b0-9321-860ddab6992e",
        "parentId" : "ae27bba3-de0f-4d17-b369-1d1e08223f26",
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "If most users will in fact experience more confusion than benefit, it makes sense we remove it. Are we too late for that?",
        "createdAt" : "2019-11-04T11:50:37Z",
        "updatedAt" : "2019-11-04T11:50:38Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      },
      {
        "id" : "9dd8d95f-0d64-4eef-bf0c-72cf435b9f67",
        "parentId" : "ae27bba3-de0f-4d17-b369-1d1e08223f26",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Do we have evidence that this actually reduces boilerplate in a meaningful way in real code? I personally doubt it. In tests, there's a slight benefit. When it comes to public APIs, when in doubt, keep it out. You can always add it later. It's not too late since RC0 hasn't been created yet. cc @cmccabe @omkreddy ",
        "createdAt" : "2019-11-04T11:54:47Z",
        "updatedAt" : "2019-11-04T11:54:48Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "c6fdbf04-3a19-4d54-a42a-ef9cb705645a",
        "parentId" : "ae27bba3-de0f-4d17-b369-1d1e08223f26",
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "Depends on how we define meaningful. Given that it's saving a constructor call and an Optional wrap, it may not be that much.\r\n\r\nHere is an example of what client code would look like without:\r\n```\r\n        Map<TopicPartition, List<Integer>> proposedReassignments = new HashMap<>();\r\n        Map<TopicPartition, Optional<NewPartitionReassignment>> partitionsToReassign = new HashMap<>();\r\n        for (Map.Entry<TopicPartition, List<Integer>> proposedReassignment : proposedReassignments.entrySet()) {\r\n            partitionsToReassign.put(\r\n                proposedReassignment.getKey(),\r\n                Optional.of(new NewPartitionReassignment(proposedReassignment.getValue()))\r\n            );\r\n        }\r\n```\r\n\r\nAnd here it is with it:\r\n```\r\nMap<TopicPartition, List<Integer>> proposedReassignments = new HashMap<>();\r\n        Map<TopicPartition, Optional<NewPartitionReassignment>> partitionsToReassign = new HashMap<>();\r\n        for (Map.Entry<TopicPartition, List<Integer>> proposedReassignment : proposedReassignments.entrySet()) {\r\n            partitionsToReassign.put(\r\n                proposedReassignment.getKey(),\r\n                NewPartitionReassignment.of(proposedReassignment.getValue())\r\n            );\r\n        }\r\n```\r\n\r\nYou could say that `new NewPartitionReassignment` reads weird as well. Perhaps we could have done better with the naming of the class",
        "createdAt" : "2019-11-04T12:02:45Z",
        "updatedAt" : "2019-11-04T12:02:45Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      },
      {
        "id" : "8d84544d-9ee2-4044-b8ec-e77ce0fcc27a",
        "parentId" : "ae27bba3-de0f-4d17-b369-1d1e08223f26",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "In the former, you can handle the Optional.empty() where the latter does not? I'd even say the latter code is less clear from that perspective.",
        "createdAt" : "2019-11-04T12:05:18Z",
        "updatedAt" : "2019-11-04T12:05:19Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "e1deeb0b-1e76-4246-a566-24cb38e002ab",
        "parentId" : "ae27bba3-de0f-4d17-b369-1d1e08223f26",
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "As in, the latter code does not make it explicit that we are passing in an optional?\r\nThe value can be replaced with `Optional.empty()` in both situations. I'm not sure I understand",
        "createdAt" : "2019-11-04T12:11:55Z",
        "updatedAt" : "2019-11-04T12:11:55Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      },
      {
        "id" : "83db2e0e-9def-4294-9889-b7dfbf2e08d1",
        "parentId" : "ae27bba3-de0f-4d17-b369-1d1e08223f26",
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "None of us felt very strongly about this method and I defaulted to the one that seemed more pleasant to me.\r\nSince we are in doubt of how useful and confusing it'll be, it makes sense to keep it out for this next release. I've opened a PR to get this right - https://github.com/apache/kafka/pull/7638",
        "createdAt" : "2019-11-04T12:20:24Z",
        "updatedAt" : "2019-11-04T12:20:25Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      },
      {
        "id" : "7c803d6a-4569-414e-88e2-6fd12ea37526",
        "parentId" : "ae27bba3-de0f-4d17-b369-1d1e08223f26",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "I just mean the code snippet you passed doesn't handle removals, which is the whole reason for passing `Optional`.",
        "createdAt" : "2019-11-04T13:22:40Z",
        "updatedAt" : "2019-11-04T13:22:40Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "91f25724-a47d-450b-ace6-19b634534830",
        "parentId" : "ae27bba3-de0f-4d17-b369-1d1e08223f26",
        "authorId" : "e61d770a-e328-41b4-b8c3-6a769370680c",
        "body" : "+1 for fixing the api.\r\n\r\nI would prefer a traditional api (either make C'tor private and `of` as a builder pattern w/o returning Optional or provide C'tors to create objects).",
        "createdAt" : "2019-11-04T18:22:09Z",
        "updatedAt" : "2019-11-04T18:30:38Z",
        "lastEditedBy" : "e61d770a-e328-41b4-b8c3-6a769370680c",
        "tags" : [
        ]
      }
    ],
    "commit" : "426c713193307fccb25e72325d4348297de83d24",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +33,37 @@     * @throws IllegalArgumentException if no replicas are supplied\n     */\n    public static Optional<NewPartitionReassignment> of(List<Integer> replicas) {\n        if (replicas == null || replicas.size() == 0)\n            throw new IllegalArgumentException(\"Cannot create a new partition reassignment without any replicas\");"
  }
]