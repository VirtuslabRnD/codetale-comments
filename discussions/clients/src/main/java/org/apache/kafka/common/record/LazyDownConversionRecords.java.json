[
  {
    "id" : "0f015131-a0f4-46d5-83d4-ad7cd1827364",
    "prId" : 4871,
    "prUrl" : "https://github.com/apache/kafka/pull/4871#pullrequestreview-123533575",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d49cb56-7ee2-4fbb-9871-e79a1ef46dab",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Maybe we can kill two birds with one stone. The reason we need peek() is that we want to check the size to see if it can fit without advancing the iterator. The alternative would be to advance the iterator and cache the value. But we are already implementing logic to use a cached value. Maybe we can consolidate the two cases? Then we wouldn't need peek() and we wouldn't need the new `batchIterator` method.",
        "createdAt" : "2018-05-25T20:41:13Z",
        "updatedAt" : "2018-05-30T23:57:50Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "a49da874-584d-4f42-993e-e6c29a50f5ab",
        "parentId" : "6d49cb56-7ee2-4fbb-9871-e79a1ef46dab",
        "authorId" : "93b1c273-8917-4547-bd53-5101f22161c0",
        "body" : "Hmm, I might be missing something but the two cases you talk about are different (at least given the way they are implemented right now). `firstConvertedBatch` is a converted batch of messages, whereas the `peek()` here is on records before conversion.\r\n\r\nIn my opinion, exposing `batchIterator` seems cleaner than making the logic in `makeNext()` more complicated by having to cache a \"next batch to down-convert\".",
        "createdAt" : "2018-05-25T23:06:23Z",
        "updatedAt" : "2018-05-30T23:57:50Z",
        "lastEditedBy" : "93b1c273-8917-4547-bd53-5101f22161c0",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e35d5c438607b8a1f09b973598cac8bc007a931",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +157,161 @@            long sizeSoFar = 0;\n            while (batchIterator.hasNext() &&\n                    (isFirstBatch || (batchIterator.peek().sizeInBytes() + sizeSoFar) <= maximumReadSize)) {\n                RecordBatch currentBatch = batchIterator.next();\n                batches.add(currentBatch);"
  }
]