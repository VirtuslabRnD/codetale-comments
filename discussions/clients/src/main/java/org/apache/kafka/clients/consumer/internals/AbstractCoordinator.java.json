[
  {
    "id" : "1aba31c0-c027-4708-b34b-ff7938d6f7e7",
    "prId" : 4349,
    "prUrl" : "https://github.com/apache/kafka/pull/4349#pullrequestreview-84959068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f84f48f7-57d0-44dc-bd42-426a6db57b94",
        "parentId" : null,
        "authorId" : "0c73d886-f3da-4107-8045-92d8e3c8fb75",
        "body" : "Shouldn't coordinator be declared volatile ?",
        "createdAt" : "2017-12-21T02:20:43Z",
        "updatedAt" : "2018-01-19T21:01:27Z",
        "lastEditedBy" : "0c73d886-f3da-4107-8045-92d8e3c8fb75",
        "tags" : [
        ]
      },
      {
        "id" : "d5d40ca6-4852-453f-bee1-ce3e82808efd",
        "parentId" : "f84f48f7-57d0-44dc-bd42-426a6db57b94",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I don't see any references outside of the lock.",
        "createdAt" : "2017-12-21T03:13:58Z",
        "updatedAt" : "2018-01-19T21:01:27Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "33e2c04b0b91081d41114b3971db75109f88ac54",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +654,658 @@            // requests may attempt to do likewise. This also prevents new requests from being sent to the\n            // coordinator while the disconnect is in progress.\n            this.coordinator = null;\n\n            // Disconnect from the coordinator to ensure that there are no in-flight requests remaining."
  },
  {
    "id" : "3cc6e414-0065-44fe-a88c-cf2c81f5ffcd",
    "prId" : 4625,
    "prUrl" : "https://github.com/apache/kafka/pull/4625#pullrequestreview-100542543",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d065a762-0e1d-4f04-8d9a-ddf373766f2b",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Nice separation.",
        "createdAt" : "2018-03-01T00:31:12Z",
        "updatedAt" : "2018-03-01T16:39:19Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "7a65ed99-c440-4ffa-aa72-b5776fa3296b",
        "parentId" : "d065a762-0e1d-4f04-8d9a-ddf373766f2b",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Wouldn't it be more readable if there was also a method for the disconnected = true case?",
        "createdAt" : "2018-03-01T18:32:23Z",
        "updatedAt" : "2018-03-01T18:32:23Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e789bcb63bead18998d51218f58ad8f8ab366c92",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +649,653 @@    }\n\n    protected synchronized void markCoordinatorUnknown() {\n        markCoordinatorUnknown(false);\n    }"
  },
  {
    "id" : "e802ce23-103c-41dc-9ebe-552eebbecce3",
    "prId" : 4855,
    "prUrl" : "https://github.com/apache/kafka/pull/4855#pullrequestreview-122280843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5440c90-0b84-4e78-acf2-7297906149b3",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "again, preserving the old indefinite block.",
        "createdAt" : "2018-05-22T18:55:32Z",
        "updatedAt" : "2018-05-26T00:00:49Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3fce0f22e8b12e03475212b2bf07e69bc230362",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +310,314 @@        while (!ensureActiveGroup(Long.MAX_VALUE)) {\n            log.warn(\"still waiting to ensure active group\");\n        }\n    }\n"
  },
  {
    "id" : "48721cb9-3039-4414-bef0-4441c206c98a",
    "prId" : 4855,
    "prUrl" : "https://github.com/apache/kafka/pull/4855#pullrequestreview-123526042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f3a221e-dcb5-4901-a78f-048f6c0291e8",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "We should probably update the javadoc",
        "createdAt" : "2018-05-25T22:18:23Z",
        "updatedAt" : "2018-05-26T00:00:49Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3fce0f22e8b12e03475212b2bf07e69bc230362",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +266,270 @@     * @return true if it should, false otherwise\n     */\n    protected synchronized boolean rejoinNeededOrPending() {\n        // if there's a pending joinFuture, we should try to complete handling it.\n        return rejoinNeeded || joinFuture != null;"
  },
  {
    "id" : "3ac8ddfa-f2c8-4a77-9a83-5da3a8cbd89f",
    "prId" : 5087,
    "prUrl" : "https://github.com/apache/kafka/pull/5087#pullrequestreview-142907077",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "427cad52-4dbe-4c54-81db-73d3e810ea21",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is a bit overkill, but I agree it is cleaner..",
        "createdAt" : "2018-08-02T18:47:17Z",
        "updatedAt" : "2018-08-03T20:47:50Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ef469881a5e14aecbaa3dbe890d30335c2c75a8",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +747,751 @@    @Override\n    public final void close() {\n        close(time.timer(0));\n    }\n"
  },
  {
    "id" : "5da44ed8-eb71-4e71-a1eb-3294d7cfdfd6",
    "prId" : 6058,
    "prUrl" : "https://github.com/apache/kafka/pull/6058#pullrequestreview-188361649",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "077d5b2b-5206-429f-a1be-ede114b2873c",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Can we add a unit test to verify this path?",
        "createdAt" : "2018-12-22T22:52:00Z",
        "updatedAt" : "2019-01-15T03:26:21Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "27380800-756e-42d3-a0fc-25cfdfd71493",
        "parentId" : "077d5b2b-5206-429f-a1be-ede114b2873c",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "The changes I made to the #joinGroup function in GroupCoordinatorTest is actually serving as the unit test for this logic.",
        "createdAt" : "2018-12-23T05:18:51Z",
        "updatedAt" : "2019-01-15T03:26:21Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "c5a7983d-b895-440a-87af-f1e34e78272d",
        "parentId" : "077d5b2b-5206-429f-a1be-ede114b2873c",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Yeah, I was referring to the testing of the client-side logic. It should be possible to modify one of the existing tests in either `AbstractCoordinatorTest` or `ConsumerCoordinatorTest`.",
        "createdAt" : "2018-12-28T18:35:46Z",
        "updatedAt" : "2019-01-15T03:26:21Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "e6d244db-452c-4e07-b80e-b7cfb975d2b7",
        "parentId" : "077d5b2b-5206-429f-a1be-ede114b2873c",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Sound goodÔºÅ",
        "createdAt" : "2018-12-28T20:07:41Z",
        "updatedAt" : "2019-01-15T03:26:21Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "29f668ef1a9b2ee5939791b9bd5b89bf1a1660bb",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +551,555 @@            } else if (error == Errors.GROUP_AUTHORIZATION_FAILED) {\n                future.raise(new GroupAuthorizationException(groupId));\n            } else if (error == Errors.MEMBER_ID_REQUIRED) {\n                // Broker requires a concrete member id to be allowed to join the group. Update member id\n                // and send another join group request in next cycle."
  },
  {
    "id" : "422f0622-d73b-43a2-aa1e-841968a7c679",
    "prId" : 6163,
    "prUrl" : "https://github.com/apache/kafka/pull/6163#pullrequestreview-198714870",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5d08771-300e-4471-84ba-7205752ccb0a",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "If we have to handle this separately, maybe we could move the check to the top level like the `GROUP_AUTHORIZATION` check.",
        "createdAt" : "2019-01-24T17:32:34Z",
        "updatedAt" : "2019-02-01T23:36:21Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "da8bc85d-8437-4977-857f-a2db885c5d56",
        "parentId" : "f5d08771-300e-4471-84ba-7205752ccb0a",
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "I think it would be good to have the log\r\n```\r\nlog.error(\"Attempt to join group failed due to fatal error: {}\", error.message());\r\n```\r\n\r\nMaybe we could move the `GROUP_AUTHORIZATION` to this level?",
        "createdAt" : "2019-01-31T17:21:39Z",
        "updatedAt" : "2019-02-01T23:36:21Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      }
    ],
    "commit" : "1421a43a3fcf28c99477bea7a1499a8fa17e50d9",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +551,555 @@                    || error == Errors.GROUP_MAX_SIZE_REACHED) {\n                log.error(\"Attempt to join group failed due to fatal error: {}\", error.message());\n                if (error == Errors.GROUP_MAX_SIZE_REACHED) {\n                    future.raise(new GroupMaxSizeReachedException(groupId));\n                } else if (error == Errors.GROUP_AUTHORIZATION_FAILED) {"
  },
  {
    "id" : "15b17f5b-ec5e-4c47-a00f-cd492082c063",
    "prId" : 6177,
    "prUrl" : "https://github.com/apache/kafka/pull/6177#pullrequestreview-229169855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71c219b2-938d-4808-9c49-01432f1a5bc7",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Hmm.. This method is also called when a call to `unsubscribe()` is made. Would we not want a static member to leave in this case?",
        "createdAt" : "2019-04-09T22:22:41Z",
        "updatedAt" : "2019-04-26T15:12:49Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "62d91cfa-f892-44ab-9bf4-3bfa23f9a84e",
        "parentId" : "71c219b2-938d-4808-9c49-01432f1a5bc7",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "I quickly checked `unsubscribe()` use cases, and there are mainly two:\r\n1. illegal topic/partition data, i.e empty topic partitions to subscribe\r\n2. consumer self managed membership (subscription)\r\n\r\nI think it makes sense to make static member behavior consistent in these two cases, because the effect of leaving is minimal.",
        "createdAt" : "2019-04-11T05:50:52Z",
        "updatedAt" : "2019-04-26T15:12:49Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "9490d1fa-ee8e-4cc5-8b79-577afe028cd4",
        "parentId" : "71c219b2-938d-4808-9c49-01432f1a5bc7",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I've thought about this a bit more, and also searched in github: https://github.com/search?l=Java&q=%22consumer.unsubscribe%22&type=Code\r\n\r\nI think a third common case is to use a temporary consumer for its APIs, like get offset by timestamp, get log end offset etc; generally speaking for temporary consumer case, they should not use static members (and by default it would not be the case). \r\n\r\nSo I think it really boils down to: for static members, do we consider the admin request kicking it out of the group be the only appropriate way for it to leave in time or not? I.e. even if the consumer shuts down itself, it should not be considered as \"I want to leave\" but another request has to be made to effectively kick him out.",
        "createdAt" : "2019-04-22T17:59:41Z",
        "updatedAt" : "2019-04-26T15:12:49Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "932118542844c01e3caf657e2eee9c16dfd269d7",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +830,834 @@     */\n    public synchronized void maybeLeaveGroup() {\n        // Starting from 2.3, only dynamic members will send LeaveGroupRequest to the broker,\n        // consumer with valid group.instance.id is viewed as static member that never sends LeaveGroup,\n        // and the membership expiration is only controlled by session timeout."
  },
  {
    "id" : "91aeb5ed-baa4-4f11-aa3f-b9ae7ca6b878",
    "prId" : 6251,
    "prUrl" : "https://github.com/apache/kafka/pull/6251#pullrequestreview-204539047",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c26a8046-d5a0-4e30-bda0-8844ec2089c2",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "How much effort would it be to have a test case for this? We have a few  LeaveGroup tests in `ConsumerCoordinatorTest`.",
        "createdAt" : "2019-02-16T18:33:25Z",
        "updatedAt" : "2019-02-19T06:13:25Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "a0a2d979-6116-4833-a777-5a096b5986ef",
        "parentId" : "c26a8046-d5a0-4e30-bda0-8844ec2089c2",
        "authorId" : "1462ba0d-5f6b-4517-98de-68943d892c2b",
        "body" : "this has been added. resolving comment.",
        "createdAt" : "2019-02-16T23:40:29Z",
        "updatedAt" : "2019-02-19T06:13:25Z",
        "lastEditedBy" : "1462ba0d-5f6b-4517-98de-68943d892c2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2102b7c04ffb64ba163904304f9ee7fb9dab3432",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +817,821 @@     */\n    public synchronized void maybeLeaveGroup() {\n        if (!coordinatorUnknown() && state != MemberState.UNJOINED && generation.hasMemberId()) {\n            // this is a minimal effort attempt to leave the group. we do not\n            // attempt any resending if the request fails or times out."
  },
  {
    "id" : "3e578ee1-0f53-481b-9638-8b838981c030",
    "prId" : 6419,
    "prUrl" : "https://github.com/apache/kafka/pull/6419#pullrequestreview-215831148",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "314acdac-1a89-4ce2-8af3-0985cef82399",
        "parentId" : null,
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "Should this be a `JoinGroupResponseDataSet`?",
        "createdAt" : "2019-03-15T17:14:38Z",
        "updatedAt" : "2019-03-15T18:44:44Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "e23ca5b5-02c3-41d9-b85b-8f0da58ae38b",
        "parentId" : "314acdac-1a89-4ce2-8af3-0985cef82399",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "I don't see this struct anywhere, but I think a list should be fine here?",
        "createdAt" : "2019-03-15T18:44:18Z",
        "updatedAt" : "2019-03-15T18:44:44Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "e506b65d-fad0-42b6-a959-4160c89ae1e3",
        "parentId" : "314acdac-1a89-4ce2-8af3-0985cef82399",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "Sorry, I meant `JoinGroupResponseMemberSet`.  Anyway, a list is fine too-- I don't feel that strongly about it.",
        "createdAt" : "2019-03-18T20:21:24Z",
        "updatedAt" : "2019-03-18T20:21:24Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "99578dc91d650a228e1f16b4b3c39d379329ace1",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +204,208 @@    protected abstract Map<String, ByteBuffer> performAssignment(String leaderId,\n                                                                 String protocol,\n                                                                 List<JoinGroupResponseData.JoinGroupResponseMember> allMemberMetadata);\n\n    /**"
  },
  {
    "id" : "eedfaca6-0f9b-4391-b2cd-7022567667e9",
    "prId" : 6650,
    "prUrl" : "https://github.com/apache/kafka/pull/6650#pullrequestreview-235228193",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c542359-bcce-4cc4-9462-2607885d476f",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Note that users's callback / future would see the fixed error message\r\n\r\n\"The coordinator reports a more recent member.id associated with the consumer's group.instance.id.\"\r\n\r\nI felt the above error message is more understandable to users, as \"a more recent member.id\" seems a bit confusing, maybe we can update that error message in `Errors` as well as this static log4j error message as:\r\n\r\n\"The broker rejected this static consumer since another instance with the same group.instance.id has registered with a more recent timestamp\".\r\n",
        "createdAt" : "2019-05-08T00:50:23Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "58638a94-b154-4e81-8b5b-3a5cc8460d92",
        "parentId" : "0c542359-bcce-4cc4-9462-2607885d476f",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Sounds good!",
        "createdAt" : "2019-05-08T18:47:14Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a0c245434329139d931b0cc904704ef8c26a62c",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +561,565 @@            } else if (error == Errors.FENCED_INSTANCE_ID) {\n                log.error(\"Received fatal exception: group.instance.id gets fenced\");\n                future.raise(error);\n            } else if (error == Errors.INCONSISTENT_GROUP_PROTOCOL\n                    || error == Errors.INVALID_SESSION_TIMEOUT"
  },
  {
    "id" : "828a2a97-b5dc-4a8c-b696-76b5c742c6e7",
    "prId" : 6650,
    "prUrl" : "https://github.com/apache/kafka/pull/6650#pullrequestreview-235368936",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b7bf66d-9875-478c-af81-f334591261e3",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Similar to commit, if this error is thrown, then in `AbstractCoordinator#initiateJoinGroup`:\r\n\r\n```\r\n             public void onFailure(RuntimeException e) {\r\n                    // we handle failures below after the request finishes. if the join completes\r\n                    // after having been woken up, the exception is ignored and we will rejoin\r\n                    synchronized (AbstractCoordinator.this) {\r\n                        state = MemberState.UNJOINED;\r\n                    }\r\n                }\r\n```\r\n\r\nI.e. it will also be swallowed and retry. Should we instead let this consumer to fail by throwing this exception all the way up, like in KafkaProducer we throw `ProduceFencedException` all the way to the caller's face.",
        "createdAt" : "2019-05-08T01:12:37Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "71901d4f-f0ed-45d3-a734-dce9dcad15a6",
        "parentId" : "9b7bf66d-9875-478c-af81-f334591261e3",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "I could see #initiateJoinGroup being called and we do check future later here for exceptions:\r\n```\r\n} else {\r\n                resetJoinGroupFuture();\r\n                final RuntimeException exception = future.exception();\r\n                if (exception instanceof UnknownMemberIdException ||\r\n                        exception instanceof RebalanceInProgressException ||\r\n                        exception instanceof IllegalGenerationException ||\r\n                        exception instanceof MemberIdRequiredException)\r\n                    continue;\r\n                else if (!future.isRetriable())\r\n                    throw exception;\r\n```\r\nSo my understanding is that we will not retry in the case, since the exception is thrown.",
        "createdAt" : "2019-05-08T18:54:26Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "804afe4a-1b38-40f0-8ba5-b2d3058c06ad",
        "parentId" : "9b7bf66d-9875-478c-af81-f334591261e3",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Ah makes sense.",
        "createdAt" : "2019-05-09T01:53:01Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a0c245434329139d931b0cc904704ef8c26a62c",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +666,670 @@                    log.debug(\"SyncGroup failed because the group began another rebalance\");\n                    future.raise(error);\n                } else if (error == Errors.FENCED_INSTANCE_ID) {\n                    log.error(\"Received fatal exception: group.instance.id gets fenced\");\n                    future.raise(error);"
  },
  {
    "id" : "f1f0281e-646f-4e8e-9a0c-82af0d1c3fe9",
    "prId" : 6650,
    "prUrl" : "https://github.com/apache/kafka/pull/6650#pullrequestreview-239175775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f48e1c23-c5d4-4f18-8f09-5185c0b51edc",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "If we are fenced, should we keep track of that somewhere so that we do not keep sending RPCs to the coordinator?",
        "createdAt" : "2019-05-17T15:07:20Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "bdb5b5a2-78c2-4824-96a2-32525ae4ce64",
        "parentId" : "f48e1c23-c5d4-4f18-8f09-5185c0b51edc",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "As long as we don't reset our generation info, all subsequent requests should be failing once other consumer joins the group right? Eventually this will lead to a complete crash IIUC.",
        "createdAt" : "2019-05-17T16:58:09Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "890a5fd0-7309-4271-be17-2365ea5f1f45",
        "parentId" : "f48e1c23-c5d4-4f18-8f09-5185c0b51edc",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "For JoinResponse specifically, it should be caught in line 427 above and then falls into `else if (!future.isRetriable())` to throw the exception to the callers immediately. So I agree with @abbccdda that no extra logic would be needed.",
        "createdAt" : "2019-05-17T18:42:40Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "ac69d353-a90d-45bb-b86c-5b6d4a76ad3a",
        "parentId" : "f48e1c23-c5d4-4f18-8f09-5185c0b51edc",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I think I wasn't clear. What I'm asking is whether the consumer should remember the fact that it was fenced. So if the user continues trying to do stuff, we fail immediately instead of sending additional requests to the broker.",
        "createdAt" : "2019-05-17T20:55:18Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "7326c7ec-8c34-4a5e-b5db-d9d9d80c47d8",
        "parentId" : "f48e1c23-c5d4-4f18-8f09-5185c0b51edc",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "For `Join/Sync/OffsetCommitSync` the failures should be immediate; for `heartbeat/commitAsync` it would not be immediate but will be quickly surfaced. If we do want a global variable indicating the failure, potentially we need to add a new `MemberState`",
        "createdAt" : "2019-05-17T23:58:16Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "08a6d61f-39f3-4ef9-8ff9-7305e29a62f6",
        "parentId" : "f48e1c23-c5d4-4f18-8f09-5185c0b51edc",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Yes, a new MemberState would be a nice way to handle this. We can do this later if you do not think it is important now.",
        "createdAt" : "2019-05-18T00:03:35Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "fcc20ab0-beb2-433d-8a3f-207876075ff3",
        "parentId" : "f48e1c23-c5d4-4f18-8f09-5185c0b51edc",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "SG!",
        "createdAt" : "2019-05-18T00:37:39Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a0c245434329139d931b0cc904704ef8c26a62c",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +566,570 @@                    || error == Errors.INVALID_GROUP_ID\n                    || error == Errors.GROUP_AUTHORIZATION_FAILED\n                    || error == Errors.GROUP_MAX_SIZE_REACHED) {\n                // log the error and re-throw the exception\n                log.error(\"Attempt to join group failed due to fatal error: {}\", error.message());"
  },
  {
    "id" : "dd673de3-4ec4-4017-b2c4-9672c8e5f114",
    "prId" : 6650,
    "prUrl" : "https://github.com/apache/kafka/pull/6650#pullrequestreview-238975578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cbf98c5-09cd-4c0b-ac39-a93276f26e31",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Maybe worth a log message that we caught the fenced error in the heartbeat thread.",
        "createdAt" : "2019-05-17T15:07:30Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a0c245434329139d931b0cc904704ef8c26a62c",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +1144,1148 @@                                        } else if (e instanceof FencedInstanceIdException) {\n                                            log.error(\"Caught fenced group.instance.id {} error in heartbeat thread\", groupInstanceId);\n                                            heartbeatThread.failed.set(e);\n                                            heartbeatThread.disable();\n                                        } else {"
  },
  {
    "id" : "56cea4c0-dbe0-4878-8617-361c51aa0b94",
    "prId" : 6650,
    "prUrl" : "https://github.com/apache/kafka/pull/6650#pullrequestreview-239079340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c74d122-a9c1-4adb-8a1e-54e6dfe5116f",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "We should print the `groupInstanceId` value as well in error message, as in other cases.",
        "createdAt" : "2019-05-17T18:49:08Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a0c245434329139d931b0cc904704ef8c26a62c",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +1142,1146 @@                                            // however, then the session timeout may expire before we can rejoin.\n                                            heartbeat.receiveHeartbeat();\n                                        } else if (e instanceof FencedInstanceIdException) {\n                                            log.error(\"Caught fenced group.instance.id {} error in heartbeat thread\", groupInstanceId);\n                                            heartbeatThread.failed.set(e);"
  },
  {
    "id" : "a89cb4d6-a061-4d54-936b-99f9c44cece4",
    "prId" : 6650,
    "prUrl" : "https://github.com/apache/kafka/pull/6650#pullrequestreview-239176057",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92b40c81-1764-4517-b45b-798fb1e59bb7",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Should we return after we fail the heartbeat thread? We do no want it to keep running I assume.",
        "createdAt" : "2019-05-18T00:00:37Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "9c3efd92-28f4-450d-8233-d1ce348512d1",
        "parentId" : "92b40c81-1764-4517-b45b-798fb1e59bb7",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "We are in a if-else branch here, but I agree. In case someone adds logic after if-else block in the future.",
        "createdAt" : "2019-05-18T00:14:54Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "258674d1-72f0-469d-8d21-b86425baa7c0",
        "parentId" : "92b40c81-1764-4517-b45b-798fb1e59bb7",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Oh, actually it's against code style, so just leave it.",
        "createdAt" : "2019-05-18T00:15:22Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "d53ffe16-20f8-4fc8-9987-9a570b5d2603",
        "parentId" : "92b40c81-1764-4517-b45b-798fb1e59bb7",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "We do need a way to stop the heartbeat thread still, right? Perhaps we can invoke `disable()`?",
        "createdAt" : "2019-05-18T00:31:42Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "0f072b39-f395-4852-b586-a91619c9b50d",
        "parentId" : "92b40c81-1764-4517-b45b-798fb1e59bb7",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Oh, got it. Let's stop it through disable() then",
        "createdAt" : "2019-05-18T00:41:29Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a0c245434329139d931b0cc904704ef8c26a62c",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +1144,1148 @@                                        } else if (e instanceof FencedInstanceIdException) {\n                                            log.error(\"Caught fenced group.instance.id {} error in heartbeat thread\", groupInstanceId);\n                                            heartbeatThread.failed.set(e);\n                                            heartbeatThread.disable();\n                                        } else {"
  },
  {
    "id" : "d8309529-d1e0-47fc-922c-ca90499fc52e",
    "prId" : 6650,
    "prUrl" : "https://github.com/apache/kafka/pull/6650#pullrequestreview-239174940",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3282f427-b2ad-4a63-8e53-6d35f84e7167",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "nit: missing space after \"retry\"\r\n\r\nI think it would be better to just say that the broker does not support the use of `group.instance.id`. It's a little weird to tell the user to unset a configuration.",
        "createdAt" : "2019-05-18T00:04:06Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "95c65584-5a67-4a8c-9917-4af9ac9d3ed2",
        "parentId" : "3282f427-b2ad-4a63-8e53-6d35f84e7167",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Got it",
        "createdAt" : "2019-05-18T00:26:11Z",
        "updatedAt" : "2019-05-18T04:04:24Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a0c245434329139d931b0cc904704ef8c26a62c",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +577,581 @@                }\n            } else if (error == Errors.UNSUPPORTED_VERSION) {\n                log.error(\"Attempt to join group failed due to unsupported version error. Please unset field group.instance.id and retry\" +\n                        \"to see if the problem resolves\");\n                future.raise(error);"
  },
  {
    "id" : "fed33ae5-7c03-4a20-a049-714d3c7571c3",
    "prId" : 6714,
    "prUrl" : "https://github.com/apache/kafka/pull/6714#pullrequestreview-262052374",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "438525ee-4bea-4795-b22c-02c70f8af5e3",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Don't we need to set `groupInstanceId` as well? Maybe we are missing test cases.",
        "createdAt" : "2019-07-13T06:59:52Z",
        "updatedAt" : "2019-07-26T04:38:45Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "cb599a1a-ddcd-4bf6-b4b3-994f040d0cf5",
        "parentId" : "438525ee-4bea-4795-b22c-02c70f8af5e3",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "We don't need to because under current code logic we shouldn't leave group when the `group.instance.id` is set.",
        "createdAt" : "2019-07-15T20:20:45Z",
        "updatedAt" : "2019-07-26T04:38:45Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab085e9764aa35dece48891a8d707b743b5bf711",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +859,863 @@                rebalanceConfig.groupId,\n                Collections.singletonList(new MemberIdentity()\n                                              .setMemberId(generation.memberId))\n            );\n            future = client.send(coordinator, request)"
  },
  {
    "id" : "e7af152d-72d9-4834-aa37-77448c14dada",
    "prId" : 6894,
    "prUrl" : "https://github.com/apache/kafka/pull/6894#pullrequestreview-246828218",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "951f2cd8-411a-4b9d-b0c3-87394cddb28d",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Could we raise the error after else block in L954 and only switch it in the last two cases:\r\n```\r\n } else if (error == Errors.GROUP_AUTHORIZATION_FAILED) {\r\n                error = new GroupAuthorizationException(groupId));\r\n} else {\r\n  error = new KafkaException(\"Unexpected error in heartbeat response: \" + error.message());\r\n}\r\nfuture.raise(error);\r\n```",
        "createdAt" : "2019-06-06T18:16:28Z",
        "updatedAt" : "2019-06-11T01:42:06Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "da891bee-d118-4838-b4f7-3c125e19e3d3",
        "parentId" : "951f2cd8-411a-4b9d-b0c3-87394cddb28d",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I feel it does not worth this cleanup for readability since we need another hierarchy of `else` covering the error cases..",
        "createdAt" : "2019-06-06T21:36:24Z",
        "updatedAt" : "2019-06-11T01:42:06Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "9bb2b5f92caf46b4d78268db42075c829306fe64",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +954,958 @@                future.raise(error);\n            } else if (error == Errors.GROUP_AUTHORIZATION_FAILED) {\n                future.raise(new GroupAuthorizationException(groupId));\n            } else {\n                future.raise(new KafkaException(\"Unexpected error in heartbeat response: \" + error.message()));"
  },
  {
    "id" : "62184699-dc33-4564-85c0-c56ffdc187a4",
    "prId" : 7347,
    "prUrl" : "https://github.com/apache/kafka/pull/7347#pullrequestreview-289561588",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7b06b35-5246-4c42-bbc6-651ab5c5dea9",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Wonder if it would be useful to add a \"failed rebalances\" metric?",
        "createdAt" : "2019-09-17T21:05:25Z",
        "updatedAt" : "2019-09-21T00:48:46Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "343143b3-0f28-4e5d-956b-ba101d31be4e",
        "parentId" : "f7b06b35-5246-4c42-bbc6-651ab5c5dea9",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Good point, will add one. I think it is sufficient to only record the rate and only record failed rebalance latency though.",
        "createdAt" : "2019-09-17T21:38:04Z",
        "updatedAt" : "2019-09-21T00:48:46Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "89dc784c146b285afe3d52bd19ed6b6ddbad7434",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +446,450 @@            // a rebalance can be triggered consecutively if the previous one failed,\n            // in this case we would not update the start time.\n            if (lastRebalanceStartMs == -1L)\n                lastRebalanceStartMs = time.milliseconds();\n            joinFuture = sendJoinGroupRequest();"
  },
  {
    "id" : "7a5234e3-7ade-41ce-8fdc-a659cd050ce9",
    "prId" : 7347,
    "prUrl" : "https://github.com/apache/kafka/pull/7347#pullrequestreview-289606376",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd4d0ede-e7bb-424f-a2cb-82fa540a5c8e",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "`new Avg()` should be on a new line. See also below.",
        "createdAt" : "2019-09-18T00:13:29Z",
        "updatedAt" : "2019-09-21T00:48:46Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "89dc784c146b285afe3d52bd19ed6b6ddbad7434",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +1055,1059 @@                this.metricGrpName,\n                \"The average time taken for a group to complete a successful rebalance, which may be composed of \" +\n                    \"several failed re-trials until it succeeded\"), new Avg());\n            this.successfulRebalanceSensor.add(metrics.metricName(\"rebalance-latency-max\",\n                this.metricGrpName,"
  },
  {
    "id" : "e1ee7fbe-fe0e-42fe-bdb9-5da91fad5407",
    "prId" : 7347,
    "prUrl" : "https://github.com/apache/kafka/pull/7347#pullrequestreview-290282922",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "209f7c8f-55c3-4283-ad25-b7bbdfd1a66b",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is a piggy-backed fix: if no heartbeat is triggered, we simply return `now` value which is meaningless as it is just since the epoch. So I've refactored to also return -1 as we did for the newly added last-rebalance.",
        "createdAt" : "2019-09-19T01:33:39Z",
        "updatedAt" : "2019-09-21T00:48:46Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "89dc784c146b285afe3d52bd19ed6b6ddbad7434",
    "line" : 206,
    "diffHunk" : "@@ -1,1 +1103,1107 @@                lastRebalance);\n\n            Measurable lastHeartbeat = (config, now) -> {\n                if (heartbeat.lastHeartbeatSend() == 0L)\n                    // if no heartbeat is ever triggered, just return -1."
  },
  {
    "id" : "d7b4be58-2eb9-4fc9-b196-bc2c9148f678",
    "prId" : 7347,
    "prUrl" : "https://github.com/apache/kafka/pull/7347#pullrequestreview-291441580",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e76b3133-0bef-4c67-b158-a33301e63ae4",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: seems this is for testing only? Should it be package private? Maybe also add comment `// for testing` ?",
        "createdAt" : "2019-09-20T23:11:10Z",
        "updatedAt" : "2019-09-21T00:48:46Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "aecaeb93-cabf-468f-af6a-46d5d36a6232",
        "parentId" : "e76b3133-0bef-4c67-b158-a33301e63ae4",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "The previous function is testing only too and we have a comment in line 1316.",
        "createdAt" : "2019-09-21T00:40:57Z",
        "updatedAt" : "2019-09-21T00:48:46Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "89dc784c146b285afe3d52bd19ed6b6ddbad7434",
    "line" : 221,
    "diffHunk" : "@@ -1,1 +1319,1323 @@    }\n\n    public void setLastRebalanceTime(final long timestamp) {\n        lastRebalanceEndMs = timestamp;\n    }"
  },
  {
    "id" : "604f0bd9-84e2-48b6-b9f6-70923369118f",
    "prId" : 7451,
    "prUrl" : "https://github.com/apache/kafka/pull/7451#pullrequestreview-298482888",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a78fa28e-8fe3-45a8-9aad-a690bafb0325",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Can you maybe extend the docs a bit to explain that this always returns the latest stable generation, regardless of whether it is currently stable? Is that an accurate description?",
        "createdAt" : "2019-10-08T00:40:05Z",
        "updatedAt" : "2019-10-08T21:56:48Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bae4d94b47a17569f11cfe185d630bcc68d347e",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +793,797 @@     * of a rebalance, after the join-group response is received.\n     *\n     * @return the current generation\n     */\n    protected synchronized Generation generation() {"
  }
]