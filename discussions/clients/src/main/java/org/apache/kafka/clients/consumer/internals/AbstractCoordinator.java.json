[
  {
    "id" : "1aba31c0-c027-4708-b34b-ff7938d6f7e7",
    "prId" : 4349,
    "prUrl" : "https://github.com/apache/kafka/pull/4349#pullrequestreview-84959068",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f84f48f7-57d0-44dc-bd42-426a6db57b94",
        "parentId" : null,
        "authorId" : "0c73d886-f3da-4107-8045-92d8e3c8fb75",
        "body" : "Shouldn't coordinator be declared volatile ?",
        "createdAt" : "2017-12-21T02:20:43Z",
        "updatedAt" : "2018-01-19T21:01:27Z",
        "lastEditedBy" : "0c73d886-f3da-4107-8045-92d8e3c8fb75",
        "tags" : [
        ]
      },
      {
        "id" : "d5d40ca6-4852-453f-bee1-ce3e82808efd",
        "parentId" : "f84f48f7-57d0-44dc-bd42-426a6db57b94",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I don't see any references outside of the lock.",
        "createdAt" : "2017-12-21T03:13:58Z",
        "updatedAt" : "2018-01-19T21:01:27Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "33e2c04b0b91081d41114b3971db75109f88ac54",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +654,658 @@            // requests may attempt to do likewise. This also prevents new requests from being sent to the\n            // coordinator while the disconnect is in progress.\n            this.coordinator = null;\n\n            // Disconnect from the coordinator to ensure that there are no in-flight requests remaining."
  },
  {
    "id" : "3cc6e414-0065-44fe-a88c-cf2c81f5ffcd",
    "prId" : 4625,
    "prUrl" : "https://github.com/apache/kafka/pull/4625#pullrequestreview-100542543",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d065a762-0e1d-4f04-8d9a-ddf373766f2b",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Nice separation.",
        "createdAt" : "2018-03-01T00:31:12Z",
        "updatedAt" : "2018-03-01T16:39:19Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "7a65ed99-c440-4ffa-aa72-b5776fa3296b",
        "parentId" : "d065a762-0e1d-4f04-8d9a-ddf373766f2b",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Wouldn't it be more readable if there was also a method for the disconnected = true case?",
        "createdAt" : "2018-03-01T18:32:23Z",
        "updatedAt" : "2018-03-01T18:32:23Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e789bcb63bead18998d51218f58ad8f8ab366c92",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +649,653 @@    }\n\n    protected synchronized void markCoordinatorUnknown() {\n        markCoordinatorUnknown(false);\n    }"
  },
  {
    "id" : "e802ce23-103c-41dc-9ebe-552eebbecce3",
    "prId" : 4855,
    "prUrl" : "https://github.com/apache/kafka/pull/4855#pullrequestreview-122280843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5440c90-0b84-4e78-acf2-7297906149b3",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "again, preserving the old indefinite block.",
        "createdAt" : "2018-05-22T18:55:32Z",
        "updatedAt" : "2018-05-26T00:00:49Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3fce0f22e8b12e03475212b2bf07e69bc230362",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +310,314 @@        while (!ensureActiveGroup(Long.MAX_VALUE)) {\n            log.warn(\"still waiting to ensure active group\");\n        }\n    }\n"
  },
  {
    "id" : "48721cb9-3039-4414-bef0-4441c206c98a",
    "prId" : 4855,
    "prUrl" : "https://github.com/apache/kafka/pull/4855#pullrequestreview-123526042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f3a221e-dcb5-4901-a78f-048f6c0291e8",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "We should probably update the javadoc",
        "createdAt" : "2018-05-25T22:18:23Z",
        "updatedAt" : "2018-05-26T00:00:49Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3fce0f22e8b12e03475212b2bf07e69bc230362",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +266,270 @@     * @return true if it should, false otherwise\n     */\n    protected synchronized boolean rejoinNeededOrPending() {\n        // if there's a pending joinFuture, we should try to complete handling it.\n        return rejoinNeeded || joinFuture != null;"
  },
  {
    "id" : "3ac8ddfa-f2c8-4a77-9a83-5da3a8cbd89f",
    "prId" : 5087,
    "prUrl" : "https://github.com/apache/kafka/pull/5087#pullrequestreview-142907077",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "427cad52-4dbe-4c54-81db-73d3e810ea21",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is a bit overkill, but I agree it is cleaner..",
        "createdAt" : "2018-08-02T18:47:17Z",
        "updatedAt" : "2018-08-03T20:47:50Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0ef469881a5e14aecbaa3dbe890d30335c2c75a8",
    "line" : 184,
    "diffHunk" : "@@ -1,1 +747,751 @@    @Override\n    public final void close() {\n        close(time.timer(0));\n    }\n"
  },
  {
    "id" : "5da44ed8-eb71-4e71-a1eb-3294d7cfdfd6",
    "prId" : 6058,
    "prUrl" : "https://github.com/apache/kafka/pull/6058#pullrequestreview-188361649",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "077d5b2b-5206-429f-a1be-ede114b2873c",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Can we add a unit test to verify this path?",
        "createdAt" : "2018-12-22T22:52:00Z",
        "updatedAt" : "2019-01-15T03:26:21Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "27380800-756e-42d3-a0fc-25cfdfd71493",
        "parentId" : "077d5b2b-5206-429f-a1be-ede114b2873c",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "The changes I made to the #joinGroup function in GroupCoordinatorTest is actually serving as the unit test for this logic.",
        "createdAt" : "2018-12-23T05:18:51Z",
        "updatedAt" : "2019-01-15T03:26:21Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "c5a7983d-b895-440a-87af-f1e34e78272d",
        "parentId" : "077d5b2b-5206-429f-a1be-ede114b2873c",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Yeah, I was referring to the testing of the client-side logic. It should be possible to modify one of the existing tests in either `AbstractCoordinatorTest` or `ConsumerCoordinatorTest`.",
        "createdAt" : "2018-12-28T18:35:46Z",
        "updatedAt" : "2019-01-15T03:26:21Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "e6d244db-452c-4e07-b80e-b7cfb975d2b7",
        "parentId" : "077d5b2b-5206-429f-a1be-ede114b2873c",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Sound goodÔºÅ",
        "createdAt" : "2018-12-28T20:07:41Z",
        "updatedAt" : "2019-01-15T03:26:21Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "29f668ef1a9b2ee5939791b9bd5b89bf1a1660bb",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +551,555 @@            } else if (error == Errors.GROUP_AUTHORIZATION_FAILED) {\n                future.raise(new GroupAuthorizationException(groupId));\n            } else if (error == Errors.MEMBER_ID_REQUIRED) {\n                // Broker requires a concrete member id to be allowed to join the group. Update member id\n                // and send another join group request in next cycle."
  },
  {
    "id" : "422f0622-d73b-43a2-aa1e-841968a7c679",
    "prId" : 6163,
    "prUrl" : "https://github.com/apache/kafka/pull/6163#pullrequestreview-198714870",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5d08771-300e-4471-84ba-7205752ccb0a",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "If we have to handle this separately, maybe we could move the check to the top level like the `GROUP_AUTHORIZATION` check.",
        "createdAt" : "2019-01-24T17:32:34Z",
        "updatedAt" : "2019-02-01T23:36:21Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "da8bc85d-8437-4977-857f-a2db885c5d56",
        "parentId" : "f5d08771-300e-4471-84ba-7205752ccb0a",
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "I think it would be good to have the log\r\n```\r\nlog.error(\"Attempt to join group failed due to fatal error: {}\", error.message());\r\n```\r\n\r\nMaybe we could move the `GROUP_AUTHORIZATION` to this level?",
        "createdAt" : "2019-01-31T17:21:39Z",
        "updatedAt" : "2019-02-01T23:36:21Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      }
    ],
    "commit" : "1421a43a3fcf28c99477bea7a1499a8fa17e50d9",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +551,555 @@                    || error == Errors.GROUP_MAX_SIZE_REACHED) {\n                log.error(\"Attempt to join group failed due to fatal error: {}\", error.message());\n                if (error == Errors.GROUP_MAX_SIZE_REACHED) {\n                    future.raise(new GroupMaxSizeReachedException(groupId));\n                } else if (error == Errors.GROUP_AUTHORIZATION_FAILED) {"
  },
  {
    "id" : "15b17f5b-ec5e-4c47-a00f-cd492082c063",
    "prId" : 6177,
    "prUrl" : "https://github.com/apache/kafka/pull/6177#pullrequestreview-229169855",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71c219b2-938d-4808-9c49-01432f1a5bc7",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Hmm.. This method is also called when a call to `unsubscribe()` is made. Would we not want a static member to leave in this case?",
        "createdAt" : "2019-04-09T22:22:41Z",
        "updatedAt" : "2019-04-26T15:12:49Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "62d91cfa-f892-44ab-9bf4-3bfa23f9a84e",
        "parentId" : "71c219b2-938d-4808-9c49-01432f1a5bc7",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "I quickly checked `unsubscribe()` use cases, and there are mainly two:\r\n1. illegal topic/partition data, i.e empty topic partitions to subscribe\r\n2. consumer self managed membership (subscription)\r\n\r\nI think it makes sense to make static member behavior consistent in these two cases, because the effect of leaving is minimal.",
        "createdAt" : "2019-04-11T05:50:52Z",
        "updatedAt" : "2019-04-26T15:12:49Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "9490d1fa-ee8e-4cc5-8b79-577afe028cd4",
        "parentId" : "71c219b2-938d-4808-9c49-01432f1a5bc7",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I've thought about this a bit more, and also searched in github: https://github.com/search?l=Java&q=%22consumer.unsubscribe%22&type=Code\r\n\r\nI think a third common case is to use a temporary consumer for its APIs, like get offset by timestamp, get log end offset etc; generally speaking for temporary consumer case, they should not use static members (and by default it would not be the case). \r\n\r\nSo I think it really boils down to: for static members, do we consider the admin request kicking it out of the group be the only appropriate way for it to leave in time or not? I.e. even if the consumer shuts down itself, it should not be considered as \"I want to leave\" but another request has to be made to effectively kick him out.",
        "createdAt" : "2019-04-22T17:59:41Z",
        "updatedAt" : "2019-04-26T15:12:49Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "932118542844c01e3caf657e2eee9c16dfd269d7",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +830,834 @@     */\n    public synchronized void maybeLeaveGroup() {\n        // Starting from 2.3, only dynamic members will send LeaveGroupRequest to the broker,\n        // consumer with valid group.instance.id is viewed as static member that never sends LeaveGroup,\n        // and the membership expiration is only controlled by session timeout."
  },
  {
    "id" : "91aeb5ed-baa4-4f11-aa3f-b9ae7ca6b878",
    "prId" : 6251,
    "prUrl" : "https://github.com/apache/kafka/pull/6251#pullrequestreview-204539047",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c26a8046-d5a0-4e30-bda0-8844ec2089c2",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "How much effort would it be to have a test case for this? We have a few  LeaveGroup tests in `ConsumerCoordinatorTest`.",
        "createdAt" : "2019-02-16T18:33:25Z",
        "updatedAt" : "2019-02-19T06:13:25Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "a0a2d979-6116-4833-a777-5a096b5986ef",
        "parentId" : "c26a8046-d5a0-4e30-bda0-8844ec2089c2",
        "authorId" : "1462ba0d-5f6b-4517-98de-68943d892c2b",
        "body" : "this has been added. resolving comment.",
        "createdAt" : "2019-02-16T23:40:29Z",
        "updatedAt" : "2019-02-19T06:13:25Z",
        "lastEditedBy" : "1462ba0d-5f6b-4517-98de-68943d892c2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2102b7c04ffb64ba163904304f9ee7fb9dab3432",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +817,821 @@     */\n    public synchronized void maybeLeaveGroup() {\n        if (!coordinatorUnknown() && state != MemberState.UNJOINED && generation.hasMemberId()) {\n            // this is a minimal effort attempt to leave the group. we do not\n            // attempt any resending if the request fails or times out."
  }
]