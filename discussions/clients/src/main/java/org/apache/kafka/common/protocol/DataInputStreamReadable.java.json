[
  {
    "id" : "6789639b-009c-4750-a07e-f67b6fbffbad",
    "prId" : 9482,
    "prUrl" : "https://github.com/apache/kafka/pull/9482#pullrequestreview-520006492",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87913043-ccf8-4e57-b635-d4c5a8824bd7",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "nit: we could refactor out the try-catch logic.",
        "createdAt" : "2020-10-28T06:06:18Z",
        "updatedAt" : "2020-11-02T18:54:18Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "3dca5c80-5b9b-4fa7-b7bb-69b1fe48e207",
        "parentId" : "87913043-ccf8-4e57-b635-d4c5a8824bd7",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Yeah, I could introduce a helper with a lambda, but that would add some unnecessary garbage to the deserialization path. Although it is ugly, I think the duplication is not a big deal. We probably won't touch this class after it is created.",
        "createdAt" : "2020-10-29T19:32:03Z",
        "updatedAt" : "2020-11-02T18:54:18Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "65494771be58190214d67d2d27bdd3f853fdaa6c",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +42,46 @@    @Override\n    public short readShort() {\n        try {\n            return input.readShort();\n        } catch (IOException e) {"
  },
  {
    "id" : "f4e06b6a-8028-4fde-8318-d813e9d9a8ac",
    "prId" : 9482,
    "prUrl" : "https://github.com/apache/kafka/pull/9482#pullrequestreview-520008814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "434df27c-2adc-40a6-8842-8c4411e83587",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Why do we wrap the IO exception here?",
        "createdAt" : "2020-10-28T06:06:49Z",
        "updatedAt" : "2020-11-02T18:54:18Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "f0f5c716-3bc8-4ef9-8f0a-edfa2127f8ba",
        "parentId" : "434df27c-2adc-40a6-8842-8c4411e83587",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "`IOException` is checked, so we cannot raise it from the current `Readable` interface, so the options are to either add the exception to the `Readable` interface or to rethrow it as an unchecked exception. I went with the latter to reduce the impact and because I think we tend to prefer unchecked exceptions in general since checked exceptions sort of end up leaking their way through a bunch of call stacks.",
        "createdAt" : "2020-10-29T19:35:20Z",
        "updatedAt" : "2020-11-02T18:54:18Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "65494771be58190214d67d2d27bdd3f853fdaa6c",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +35,39 @@        try {\n            return input.readByte();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }"
  }
]