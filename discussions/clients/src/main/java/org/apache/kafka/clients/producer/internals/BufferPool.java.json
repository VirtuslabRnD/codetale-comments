[
  {
    "id" : "7bc30566-c86e-4419-8d11-0d233dffa5ff",
    "prId" : 7967,
    "prUrl" : "https://github.com/apache/kafka/pull/7967#pullrequestreview-345022911",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e20a9c61-9d0f-49fc-92e0-3cbb13f99905",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "@bdbyrne @hachikuji Currently on Producer.send our javadoc mentioned \"If a Kafka related error occurs that does not belong to the public API exceptions.\" for KafkaException and most callers default it to fatal. However if we consider the pattern where thread A blocked on send#bufferPool, and then thread B calls producer.close which would cause thread A to be unblocked by throwing a KafkaException to be a recommended pattern, should we use a different exception than KafkaException to differentiate it with other other fatal exceptions?\r\n\r\nI'm thinking for Streams if we eventually want to move to this pattern, i.e. the stream thread blocked on `producer.send` while the closing thread calls `producer.close` then stream thread would throw KafkaException that in turn would be interpreted as fatal and then the stream thread tries to shutdown itself as \"shutdown unclean\" whereas here since we are indeed closing we should just proceed with \"shutdown clean\" --- of course this is still doable with some extra check but I'm wondering if such complexity would be universal for any callers like Streams.",
        "createdAt" : "2020-01-19T20:08:02Z",
        "updatedAt" : "2020-01-19T20:08:04Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4c63d11596d51b9ddd8907fc23eefdb1f0588306",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +149,153 @@\n                        if (this.closed)\n                            throw new KafkaException(\"Producer closed while allocating memory\");\n\n                        if (waitingTimeElapsed) {"
  }
]