[
  {
    "id" : "6179b071-e343-4757-b2ab-a60342c80289",
    "prId" : 4735,
    "prUrl" : "https://github.com/apache/kafka/pull/4735#pullrequestreview-110428742",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36106043-17d3-49b7-a47c-a3ed62f64925",
        "parentId" : null,
        "authorId" : "80aa1ccc-053d-48ff-a4d2-ddd42858dcb3",
        "body" : "even clearer: \"Represents a signed integer\"",
        "createdAt" : "2018-04-09T10:47:47Z",
        "updatedAt" : "2018-04-18T08:57:03Z",
        "lastEditedBy" : "80aa1ccc-053d-48ff-a4d2-ddd42858dcb3",
        "tags" : [
        ]
      },
      {
        "id" : "13f91040-cb49-47bf-9c3b-99d2f7e4141d",
        "parentId" : "36106043-17d3-49b7-a47c-a3ed62f64925",
        "authorId" : "d6db9a4c-edcd-477d-86b6-9a02df88264e",
        "body" : "I can't find a good way to fit 'signed' in the sentence. I can not simply replace specifying the boundaries, because then it might create the impression that we are talking about 4 byte integers. Having 'signed' and the between clause next to each other seems to be redundant.\r\nDo you agree?",
        "createdAt" : "2018-04-09T12:11:46Z",
        "updatedAt" : "2018-04-18T08:57:03Z",
        "lastEditedBy" : "d6db9a4c-edcd-477d-86b6-9a02df88264e",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c1db27710045cbb7d48fefd32793009c499e8d3",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +166,170 @@        @Override\n        public String documentation() {\n            return \"Represents an integer between -2<sup>7</sup> and 2<sup>7</sup>-1 inclusive.\";\n        }\n    };"
  },
  {
    "id" : "279cc531-e5a6-4586-9091-affe383a882f",
    "prId" : 4735,
    "prUrl" : "https://github.com/apache/kafka/pull/4735#pullrequestreview-110429494",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87d6b2a7-4094-4245-8682-465d4c7dc2ad",
        "parentId" : null,
        "authorId" : "80aa1ccc-053d-48ff-a4d2-ddd42858dcb3",
        "body" : "\"Represents a signed integer\"",
        "createdAt" : "2018-04-09T10:50:42Z",
        "updatedAt" : "2018-04-18T08:57:03Z",
        "lastEditedBy" : "80aa1ccc-053d-48ff-a4d2-ddd42858dcb3",
        "tags" : [
        ]
      },
      {
        "id" : "a2da5d30-4d3c-4dff-a89f-4b09e45102e8",
        "parentId" : "87d6b2a7-4094-4245-8682-465d4c7dc2ad",
        "authorId" : "d6db9a4c-edcd-477d-86b6-9a02df88264e",
        "body" : "I believe you wanted to write unsigned. As this information is already there in the type name, I would not like to repeat it.",
        "createdAt" : "2018-04-09T12:11:49Z",
        "updatedAt" : "2018-04-18T08:57:03Z",
        "lastEditedBy" : "d6db9a4c-edcd-477d-86b6-9a02df88264e",
        "tags" : [
        ]
      },
      {
        "id" : "faa31e85-f601-47ea-8f01-39ee0079c0a3",
        "parentId" : "87d6b2a7-4094-4245-8682-465d4c7dc2ad",
        "authorId" : "80aa1ccc-053d-48ff-a4d2-ddd42858dcb3",
        "body" : "What about:\r\n`\"Represents a signed integer between 0 and 2<sup>32</sup>-1 inclusive. \"`\r\n\r\nThis is a nit though, ignore and discard as necessary.",
        "createdAt" : "2018-04-09T12:14:30Z",
        "updatedAt" : "2018-04-18T08:57:03Z",
        "lastEditedBy" : "80aa1ccc-053d-48ff-a4d2-ddd42858dcb3",
        "tags" : [
        ]
      }
    ],
    "commit" : "6c1db27710045cbb7d48fefd32793009c499e8d3",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +273,277 @@        @Override\n        public String documentation() {\n            return \"Represents an integer between 0 and 2<sup>32</sup>-1 inclusive. \" +\n                    \"The values are encoded using four bytes in network byte order (big-endian).\";\n        }"
  },
  {
    "id" : "25179ec6-9314-41a5-8afc-5c97d40b0c75",
    "prId" : 4871,
    "prUrl" : "https://github.com/apache/kafka/pull/4871#pullrequestreview-124212992",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2675e1e4-ec50-4270-b485-c154ee638834",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "We have a check above in `write` for `FileRecords`. Now that we have additional types to worry about, maybe we should change that check to to `!(o instanceof MemoryRecords)`?",
        "createdAt" : "2018-05-30T00:01:31Z",
        "updatedAt" : "2018-05-30T23:57:50Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e35d5c438607b8a1f09b973598cac8bc007a931",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +557,561 @@\n        @Override\n        public MemoryRecords read(ByteBuffer buffer) {\n            ByteBuffer recordsBuffer = (ByteBuffer) NULLABLE_BYTES.read(buffer);\n            return MemoryRecords.readableRecords(recordsBuffer);"
  },
  {
    "id" : "7e27bfb1-5dd3-4c52-87fb-7d816ab3cedb",
    "prId" : 8012,
    "prUrl" : "https://github.com/apache/kafka/pull/8012#pullrequestreview-350292555",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42d27e6d-4d79-4e95-a730-444fc10f9d76",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "For my benefit, what was the reasoning for choosing big endian?",
        "createdAt" : "2020-01-29T05:49:46Z",
        "updatedAt" : "2020-01-29T17:31:01Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "d7354158-552e-4a44-8bfb-99b8cdbf944e",
        "parentId" : "42d27e6d-4d79-4e95-a730-444fc10f9d76",
        "authorId" : "98b12f1a-2624-4608-85a1-ec49503fd316",
        "body" : "For consistency - all of the integers types are big-endian as well.",
        "createdAt" : "2020-01-29T17:32:19Z",
        "updatedAt" : "2020-01-29T17:32:19Z",
        "lastEditedBy" : "98b12f1a-2624-4608-85a1-ec49503fd316",
        "tags" : [
        ]
      }
    ],
    "commit" : "533704fe00e87d003c51f50e1a7b48ba98e5d6dd",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +400,404 @@        public String documentation() {\n            return \"Represents a double-precision 64-bit format IEEE 754 value. \" +\n                    \"The values are encoded using eight bytes in network byte order (big-endian).\";\n        }\n    };"
  },
  {
    "id" : "6b6ed110-6cde-4779-8e1a-43f9662aa09a",
    "prId" : 10193,
    "prUrl" : "https://github.com/apache/kafka/pull/10193#pullrequestreview-602479058",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea32e5b7-2937-423a-b669-1e277837a90e",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "There is a typo here, \"an a\".",
        "createdAt" : "2021-03-02T20:47:49Z",
        "updatedAt" : "2021-03-02T20:47:49Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "27a7e44a-7541-4ddd-bba3-f4332cf3e436",
        "parentId" : "ea32e5b7-2937-423a-b669-1e277837a90e",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Also, I think it reads a bit weird. Not clear that \"encoding an unsigned integer\" in brackets means when reading the message.",
        "createdAt" : "2021-03-02T20:49:47Z",
        "updatedAt" : "2021-03-02T20:49:48Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "d2b90d05-11ff-4950-a52e-96573453442b",
        "parentId" : "ea32e5b7-2937-423a-b669-1e277837a90e",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "> There is a typo here, \"an a\".\r\n\r\nMy bad :(\r\n\r\n> Also, I think it reads a bit weird. Not clear that \"encoding an unsigned integer\" in brackets means when reading the message.\r\n\r\nI will update it in #10248 @ijuma thanks for your reviews",
        "createdAt" : "2021-03-03T03:34:59Z",
        "updatedAt" : "2021-03-03T03:34:59Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      }
    ],
    "commit" : "e74a069a169f1791c712cf16f2a6a53f8c2a75a9",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +321,325 @@                return (Long) item;\n            else\n                throw new SchemaException(item + \" is not an a Long (encoding an unsigned integer).\");\n        }\n"
  }
]