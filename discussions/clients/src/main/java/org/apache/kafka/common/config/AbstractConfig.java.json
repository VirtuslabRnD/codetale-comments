[
  {
    "id" : "fa1a25e7-5349-4527-81d4-a73bc2a82d80",
    "prId" : 4488,
    "prUrl" : "https://github.com/apache/kafka/pull/4488#pullrequestreview-93722756",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9fe2e25-f64d-4037-b483-99da9cc77773",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Can you update the test cases for this function to include the new usage?",
        "createdAt" : "2018-02-02T19:04:01Z",
        "updatedAt" : "2018-02-04T02:11:57Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "a0488d78e0ea02c3ddde1a31f6c1e0613a443e3d",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +216,220 @@     * </p>\n     */\n    public Map<String, Object> valuesWithPrefixOverride(String prefix) {\n        Map<String, Object> result = new RecordingMap<>(values(), prefix, true);\n        for (Map.Entry<String, ?> entry : originals.entrySet()) {"
  },
  {
    "id" : "c71c93e5-5523-40e2-9581-22d248685bdb",
    "prId" : 6467,
    "prUrl" : "https://github.com/apache/kafka/pull/6467#pullrequestreview-235903631",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3dacfbb-270f-468b-99ab-502d452f646e",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "I know these constructors didn't have JavaDoc before, but this is an important class that is used a lot. It'd be great to add JavaDoc that explains the behavior, especially with regard to automatically resolving variables: any config provider properties in the `originals` will be used to instantiate ConfigProviders to resolve any variables.",
        "createdAt" : "2019-05-10T02:37:03Z",
        "updatedAt" : "2019-05-14T22:37:56Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      }
    ],
    "commit" : "739b042e0e5c99422148c2ead4d47ea2af570e4b",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +138,142 @@     * @param doLog whether the configurations should be logged\n     */\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals, boolean doLog) {\n        this(definition, originals, Collections.emptyMap(), doLog);\n"
  },
  {
    "id" : "c01ab7b2-6a7a-4e06-9f8f-a179814b4eba",
    "prId" : 6467,
    "prUrl" : "https://github.com/apache/kafka/pull/6467#pullrequestreview-237274645",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f2d3b53-589d-4581-bae1-58d81f75d523",
        "parentId" : null,
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "Looks like we are casting `configProviderProps` to `Map<String, String>` later on. Can't we just use `Map<String, String>` as the argument type?",
        "createdAt" : "2019-05-13T09:50:18Z",
        "updatedAt" : "2019-05-14T22:37:56Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "4d309bd4-6af4-48e3-aba2-737053324d39",
        "parentId" : "7f2d3b53-589d-4581-bae1-58d81f75d523",
        "authorId" : "4e7b484e-0457-4bd4-be63-f25009d4f755",
        "body" : "We actually need it Map<String, ?> as the config props are not necessarily string. I have fixed a corresponding bug. ",
        "createdAt" : "2019-05-13T17:25:00Z",
        "updatedAt" : "2019-05-14T22:37:57Z",
        "lastEditedBy" : "4e7b484e-0457-4bd4-be63-f25009d4f755",
        "tags" : [
        ]
      },
      {
        "id" : "53b4df29-6bd0-4fb8-a919-0c5282c6858e",
        "parentId" : "7f2d3b53-589d-4581-bae1-58d81f75d523",
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "We pass this map to `resolveConfigVariables`, which does:\r\n```\r\nproviderConfigString = (Map<String, String>) configProviderProps;\r\n```\r\nThat is unsafe if we are supporting props that are not actually a map of strings.",
        "createdAt" : "2019-05-14T08:44:09Z",
        "updatedAt" : "2019-05-14T22:37:57Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "e16b2f74-7418-4be6-98e0-2c17adcfcc93",
        "parentId" : "7f2d3b53-589d-4581-bae1-58d81f75d523",
        "authorId" : "4e7b484e-0457-4bd4-be63-f25009d4f755",
        "body" : "Added a function to parse the values which are instance of strings ",
        "createdAt" : "2019-05-14T14:15:59Z",
        "updatedAt" : "2019-05-14T22:37:57Z",
        "lastEditedBy" : "4e7b484e-0457-4bd4-be63-f25009d4f755",
        "tags" : [
        ]
      }
    ],
    "commit" : "739b042e0e5c99422148c2ead4d47ea2af570e4b",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +97,101 @@     */\n    @SuppressWarnings(\"unchecked\")\n    public AbstractConfig(ConfigDef definition, Map<?, ?> originals,  Map<String, ?> configProviderProps, boolean doLog) {\n        /* check that all the keys are really strings */\n        for (Map.Entry<?, ?> entry : originals.entrySet())"
  },
  {
    "id" : "fffbddbe-0ca4-499d-9e3b-98b8d2e2eb03",
    "prId" : 6467,
    "prUrl" : "https://github.com/apache/kafka/pull/6467#pullrequestreview-236866423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cffcd039-1bde-4563-b570-eab8bab70f8f",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Nit: include brackets on all blocks, even if they are a single line. This makes it easier to read, but also reduces the number of affected lines if we have to add another line in the block in the future.",
        "createdAt" : "2019-05-13T19:34:00Z",
        "updatedAt" : "2019-05-14T22:37:57Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      }
    ],
    "commit" : "739b042e0e5c99422148c2ead4d47ea2af570e4b",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +505,509 @@            String providerClass = CONFIG_PROVIDERS_CONFIG + \".\" + provider + \".class\";\n            if (indirectConfigs.containsKey(providerClass))\n                providerMap.put(provider, indirectConfigs.get(providerClass));\n\n        }"
  },
  {
    "id" : "6284b2cd-50b1-46b0-9a97-26f9d6112fe7",
    "prId" : 6467,
    "prUrl" : "https://github.com/apache/kafka/pull/6467#pullrequestreview-237530286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9ed3787-60db-48d7-90ce-d48aa88505c5",
        "parentId" : null,
        "authorId" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "body" : "Is the intention to skip values that are not strings because they can't be variables? Might be worth a comment here if that's the case.\r\n\r\nI also wonder if it'd be better to keep the original code that is checking that strings are keys in the constructor, and use this method to separately loop through the entries. This doesn't happen that often, so the extra loop is not that big a deal, but this helps reduce the risk of changing behavior.\r\n\r\nEssentially, the constructor would start with:\r\n```\r\n        for (Map.Entry<?, ?> entry : originals.entrySet())\r\n            if (!(entry.getKey() instanceof String))\t\r\n                 throw new ConfigException(entry.getKey().toString(), entry.getValue(), \"Key must be a string.\");\t                \r\n\r\n        this.originals = resolveConfigVariables(originals, configProviderProps, (Map<String, ?>) originals);\r\n```\r\n\r\nNote that because the call to `getMapAsString` method only returns the subset of the originals that might have variables, it's probably better to call that within the `resolveConfigVariables(...)` method to encapsulate the logic a bit more.\r\n\r\nThen this method could be:\r\n```\r\n   private Map<String, String> getMapAsString(Map<?, ?>  configMap) {\r\n        Map<String, String> configMapAsString = new HashMap<>();\r\n        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\r\n            if (entry.getValue() instanceof String) {\r\n                // We only need the values that are strings, because only they can be variables\r\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\r\n            }\r\n        }\r\n        return configMapAsString;\r\n   }\r\n```\r\n",
        "createdAt" : "2019-05-14T21:48:58Z",
        "updatedAt" : "2019-05-14T22:37:57Z",
        "lastEditedBy" : "145db0de-7396-4643-9a2c-9977e1c6219b",
        "tags" : [
        ]
      },
      {
        "id" : "3d483787-572f-4b28-bedd-e26f0f7b6ef7",
        "parentId" : "a9ed3787-60db-48d7-90ce-d48aa88505c5",
        "authorId" : "4e7b484e-0457-4bd4-be63-f25009d4f755",
        "body" : "Yes as variables can only be strings .. I have added the comment and fix",
        "createdAt" : "2019-05-14T22:20:23Z",
        "updatedAt" : "2019-05-14T22:37:57Z",
        "lastEditedBy" : "4e7b484e-0457-4bd4-be63-f25009d4f755",
        "tags" : [
        ]
      }
    ],
    "commit" : "739b042e0e5c99422148c2ead4d47ea2af570e4b",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +443,447 @@        for (Map.Entry<?, ?> entry : configMap.entrySet()) {\n            if (entry.getValue() instanceof String)\n                configMapAsString.put((String) entry.getKey(), (String) entry.getValue());\n        }\n"
  },
  {
    "id" : "c0c38c07-d65b-4976-8da9-04fb6fcf37d4",
    "prId" : 7129,
    "prUrl" : "https://github.com/apache/kafka/pull/7129#pullrequestreview-268651310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51585074-e17f-48f3-9c3a-9f632a8cfa26",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Some of the internal awkwardness seems to be the result of not having a clear \"list of classes\" type. Not something we have to do here, but potential room for improvement.",
        "createdAt" : "2019-07-30T20:29:19Z",
        "updatedAt" : "2019-07-30T20:31:17Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "eb603d58-32ea-4b2d-88d8-19600fe7a6c6",
        "parentId" : "51585074-e17f-48f3-9c3a-9f632a8cfa26",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Agreed. I will look into that in a follow-up ticket.",
        "createdAt" : "2019-07-30T20:34:34Z",
        "updatedAt" : "2019-07-30T20:34:35Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "9d8718e210e44515ddecdfeab955cefdb0738c7f",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +361,365 @@\n        Object o;\n        if (klass instanceof String) {\n            try {\n                o = Utils.newInstance((String) klass, t);"
  },
  {
    "id" : "45805e78-4ff7-449f-bc00-9299a1179fb0",
    "prId" : 7466,
    "prUrl" : "https://github.com/apache/kafka/pull/7466#pullrequestreview-336988712",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ce1da09-73a1-4bc6-a7f1-5e0b95a02218",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Just curious is this line necessary for the fix?",
        "createdAt" : "2019-12-28T23:26:52Z",
        "updatedAt" : "2019-12-30T02:54:21Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "b157d773-58cd-416e-a28e-bbffa2e0fd95",
        "parentId" : "5ce1da09-73a1-4bc6-a7f1-5e0b95a02218",
        "authorId" : "2b8ddac3-3f74-403c-9e9d-62dc37cb6655",
        "body" : "It's not new-added but moved prior to the call to `postProcessParsedConfig`, otherwise an NPE exception will be thrown.",
        "createdAt" : "2019-12-30T02:33:50Z",
        "updatedAt" : "2019-12-30T03:02:05Z",
        "lastEditedBy" : "2b8ddac3-3f74-403c-9e9d-62dc37cb6655",
        "tags" : [
        ]
      }
    ],
    "commit" : "744506f29cbae20e581923c62f14e31d51436909",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +107,111 @@        this.originals = resolveConfigVariables(configProviderProps, (Map<String, Object>) originals);\n        this.values = definition.parse(this.originals);\n        this.used = Collections.synchronizedSet(new HashSet<>());\n        Map<String, Object> configUpdates = postProcessParsedConfig(Collections.unmodifiableMap(this.values));\n        for (Map.Entry<String, Object> update : configUpdates.entrySet()) {"
  },
  {
    "id" : "1954e1a9-1a25-4555-a02f-f7d1bffd8362",
    "prId" : 8204,
    "prUrl" : "https://github.com/apache/kafka/pull/8204#pullrequestreview-515362290",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c2179f5-681d-47d7-8eb5-f82f99bdbb74",
        "parentId" : null,
        "authorId" : "3035152f-5204-45d7-a98a-3972a4d859b3",
        "body" : "if an exception occurs between line 477 and line 486, then the close function won't be called.  The solution would be to either create a type for `providers` that extends `Map<String, ConfigProvider>` and implements Autoclosable, or to simply put an explicit `try`/`finally` block here to ensure that the close function is called in every case.  That also implies that `instantiateConfigProviders` should be modified so that if an exception is thrown from inside it, any previously opened `ConfigProvider` instances are closed. ",
        "createdAt" : "2020-10-22T19:38:58Z",
        "updatedAt" : "2020-10-22T19:38:59Z",
        "lastEditedBy" : "3035152f-5204-45d7-a98a-3972a4d859b3",
        "tags" : [
        ]
      },
      {
        "id" : "2e065f6e-36e2-407c-968b-5c488790c35a",
        "parentId" : "2c2179f5-681d-47d7-8eb5-f82f99bdbb74",
        "authorId" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "body" : "Good observations @jherico . I believe the latter approach, of closing all the instantiated providers if an exception occurs in both cases, would be the most straightforward fix. \r\n\r\nIf you'd be interested in submitting a fix, that would be very welcome!",
        "createdAt" : "2020-10-23T05:50:34Z",
        "updatedAt" : "2020-10-23T05:50:34Z",
        "lastEditedBy" : "e77724e7-3db9-47d6-b4d8-a865b1d06edc",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc4ff2aa6a62c1e35c225f7bd1a7e54bda6e51c9",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +484,488 @@            }\n        }\n        providers.values().forEach(x -> Utils.closeQuietly(x, \"config provider\"));\n\n        return new ResolvingMap<>(resolvedOriginals, originals);"
  },
  {
    "id" : "cd1cee66-2afe-40b3-8643-6543346ea342",
    "prId" : 8723,
    "prUrl" : "https://github.com/apache/kafka/pull/8723#pullrequestreview-420813025",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2cc7df45-793b-472c-8b1a-a61c867bd5e2",
        "parentId" : null,
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "Since this is a public API, we should include this change in the KIP.",
        "createdAt" : "2020-05-28T14:19:06Z",
        "updatedAt" : "2020-05-29T18:45:38Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "16c63054-c7e6-4213-b19f-6a10154f9578",
        "parentId" : "2cc7df45-793b-472c-8b1a-a61c867bd5e2",
        "authorId" : "8a152ec3-451b-4643-9675-878158d11b22",
        "body" : "Done https://cwiki.apache.org/confluence/display/KAFKA/KIP-569%3A+DescribeConfigsResponse+-+Update+the+schema+to+include+additional+metadata+information+of+the+field#KIP-569:DescribeConfigsResponse-Updatetheschematoincludeadditionalmetadatainformationofthefield-AbstractConfigClass",
        "createdAt" : "2020-05-28T22:00:20Z",
        "updatedAt" : "2020-05-29T18:45:38Z",
        "lastEditedBy" : "8a152ec3-451b-4643-9675-878158d11b22",
        "tags" : [
        ]
      },
      {
        "id" : "ac492d1c-fc69-4904-9a82-2d75fad92e7f",
        "parentId" : "2cc7df45-793b-472c-8b1a-a61c867bd5e2",
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "We should also send a note to the VOTE thread on the mailing list to mention that the KIP was updated.",
        "createdAt" : "2020-05-29T09:55:03Z",
        "updatedAt" : "2020-05-29T18:45:38Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c104079898cb4b1034d90ba5586557b26d55425",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +202,206 @@    }\n\n    public String documentationOf(String key) {\n        ConfigDef.ConfigKey configKey = definition.configKeys().get(key);\n        if (configKey == null)"
  }
]