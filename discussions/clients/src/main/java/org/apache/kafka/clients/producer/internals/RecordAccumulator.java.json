[
  {
    "id" : "fff0ec4b-5ac9-4fc9-aaa3-0f1c89fd709d",
    "prId" : 5270,
    "prUrl" : "https://github.com/apache/kafka/pull/5270#pullrequestreview-134065084",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9c537b8-09b3-47cc-be27-53bdcc885291",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "This will be very spammy if the user has set a large delivery timeout. I don't think the log message has much value to be honest, but perhaps we should at least reduce the level to TRACE?",
        "createdAt" : "2018-07-02T21:43:10Z",
        "updatedAt" : "2018-07-26T15:53:34Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "c5fc109d-9fdc-4918-83c8-f2ec0cae4e15",
        "parentId" : "a9c537b8-09b3-47cc-be27-53bdcc885291",
        "authorId" : "a962e9bb-bf94-4294-b23c-d279e1e69019",
        "body" : "`batch.createdMs + deliveryTimeoutMs ` should be positive.  we log an warning here in case of addition overflow. we have defined `deliverTimeoutMs` as `int` when we initialize the producer. Given that, i am not expecting that that log line will be trigged often. \r\n\r\n       private static int configureDeliveryTimeout(ProducerConfig config, Logger log) {\r\n            int deliveryTimeoutMs = config.getInt(ProducerConfig.DELIVERY_TIMEOUT_MS_CONFIG);\r\n            int lingerMs = config.getInt(ProducerConfig.LINGER_MS_CONFIG);\r\n            int requestTimeoutMs = config.getInt(ProducerConfig.REQUEST_TIMEOUT_MS_CONFIG);\r\n\r\nCurrently I keep RecordAccumulator constructor signature unchanged. If we change the type of 'deliveryTimeoutMs', it is better to also change the type of `lingerMs` and `retryBackoffMs` to be consistent. As changing the types of those paramters will require changes in many test cases to pass `int` instead of `long`,  I'd rather to put the RecordAccumulator constructor signature change in other PR. \r\n\r\n\r\n        public RecordAccumulator(LogContext logContext,\r\n                                 int batchSize,\r\n                                 CompressionType compression,\r\n                                 long lingerMs,\r\n                                 long retryBackoffMs,\r\n                                 long deliveryTimeoutMs,\r\n                                  ...\r\n.",
        "createdAt" : "2018-07-03T00:36:49Z",
        "updatedAt" : "2018-07-26T15:53:34Z",
        "lastEditedBy" : "a962e9bb-bf94-4294-b23c-d279e1e69019",
        "tags" : [
        ]
      },
      {
        "id" : "3dfd5a6a-7cac-4ff5-a5b3-bb76b6879a10",
        "parentId" : "a9c537b8-09b3-47cc-be27-53bdcc885291",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Fair enough. I missed the long coercion. I think the log message has dubious value, but I agree we shouldn't ever actually see it.",
        "createdAt" : "2018-07-03T15:59:59Z",
        "updatedAt" : "2018-07-26T15:53:34Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9aa6b1706e2e374c20d710567a64b0328fe3119",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +280,284 @@            nextBatchExpiryTimeMs = Math.min(nextBatchExpiryTimeMs, batch.createdMs + deliveryTimeoutMs);\n        } else {\n            log.warn(\"Skipping next batch expiry time update due to addition overflow: \"\n                + \"batch.createMs={}, deliveryTimeoutMs={}\", batch.createdMs, deliveryTimeoutMs);\n        }"
  }
]