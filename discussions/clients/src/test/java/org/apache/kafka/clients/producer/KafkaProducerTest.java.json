[
  {
    "id" : "fc84496f-5594-4937-992d-f9fa27345f9a",
    "prId" : 6154,
    "prUrl" : "https://github.com/apache/kafka/pull/6154#pullrequestreview-195815697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14733ab9-c1cb-4670-a235-89c1ed4a0448",
        "parentId" : null,
        "authorId" : "e88252f3-8879-452a-8098-afb39cb614dc",
        "body" : "This makes me nervous, it feels like it could cause flakiness. Is there another way you can trigger the `metadata.update()` call?",
        "createdAt" : "2019-01-23T22:06:25Z",
        "updatedAt" : "2019-01-23T22:07:15Z",
        "lastEditedBy" : "e88252f3-8879-452a-8098-afb39cb614dc",
        "tags" : [
        ]
      },
      {
        "id" : "0b5b29ea-dfb3-4c52-a234-858162b0bba1",
        "parentId" : "14733ab9-c1cb-4670-a235-89c1ed4a0448",
        "authorId" : "f5ac54e5-ad95-49b9-b49a-3fd091e917ae",
        "body" : "@bob-barrett , this code was already elsewhere in the same file in the method `testTopicRefreshInMetadata()` so I just borrowed it from there.  ",
        "createdAt" : "2019-01-23T23:37:54Z",
        "updatedAt" : "2019-01-23T23:37:54Z",
        "lastEditedBy" : "f5ac54e5-ad95-49b9-b49a-3fd091e917ae",
        "tags" : [
        ]
      },
      {
        "id" : "bb634c57-7825-4f42-a3a3-f1c52583b404",
        "parentId" : "14733ab9-c1cb-4670-a235-89c1ed4a0448",
        "authorId" : "e88252f3-8879-452a-8098-afb39cb614dc",
        "body" : "I see, in that case it's probably fine.",
        "createdAt" : "2019-01-24T00:55:44Z",
        "updatedAt" : "2019-01-24T00:55:44Z",
        "lastEditedBy" : "e88252f3-8879-452a-8098-afb39cb614dc",
        "tags" : [
        ]
      }
    ],
    "commit" : "ac0db771935c73983fb96e6cdeafa646d029c9f4",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +334,338 @@        MemberModifier.field(KafkaProducer.class, \"time\").set(producer, time);\n\n        Thread t = new Thread() {\n            @Override\n            public void run() {"
  },
  {
    "id" : "be5849a3-f771-42df-aa8a-7f86801b0271",
    "prId" : 7952,
    "prUrl" : "https://github.com/apache/kafka/pull/7952#pullrequestreview-343578370",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "656f5366-8575-40e2-964b-e3de4e3e82b8",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "The test coverage for KafkaProducerTest is weak in general. We just did the bare minimum here to route the request through a full init->begin->commit->end workflow and make sure it is working properly. ",
        "createdAt" : "2020-01-15T22:56:37Z",
        "updatedAt" : "2020-01-22T18:43:33Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e81e0daaec396ec5be7cc3d3cc2adae42f242e95",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +700,704 @@    }\n\n    @Test\n    public void testSendTxnOffsetsWithGroupId() {\n        Map<String, Object> configs = new HashMap<>();"
  },
  {
    "id" : "88d38c01-5978-4acb-b2d8-97d3a359320f",
    "prId" : 8060,
    "prUrl" : "https://github.com/apache/kafka/pull/8060#pullrequestreview-359261969",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4c800bb-1eee-4437-9267-cd99f1f27fa3",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is just to verify that initTransactions can indeed be retried. cc @hachikuji ",
        "createdAt" : "2020-02-14T22:49:14Z",
        "updatedAt" : "2020-02-14T22:49:35Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "19332579cacd46146a8309938215845c16448a8d",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +774,778 @@\n            // retry initialization should work\n            producer.initTransactions();\n        }\n    }"
  },
  {
    "id" : "b0841570-30c7-4ebe-aabf-2adfcb6e40e5",
    "prId" : 8174,
    "prUrl" : "https://github.com/apache/kafka/pull/8174#pullrequestreview-365318870",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7d5009c-d16f-4d0f-a10f-63f4187f86fe",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Could we add some async send calls before the flush, and check whether they are delivered afterwards?",
        "createdAt" : "2020-02-26T22:40:51Z",
        "updatedAt" : "2020-03-02T19:40:36Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "10626909-6860-4226-a17d-62d43d8bf91a",
        "parentId" : "c7d5009c-d16f-4d0f-a10f-63f4187f86fe",
        "authorId" : "0fe173e1-fd92-4265-b2d8-32c09214d054",
        "body" : "The functionality of `flush()` is tested in the api integration test https://github.com/apache/kafka/blob/trunk/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala#L423-L438 but I can test it in here as well",
        "createdAt" : "2020-02-26T23:27:57Z",
        "updatedAt" : "2020-03-02T19:40:36Z",
        "lastEditedBy" : "0fe173e1-fd92-4265-b2d8-32c09214d054",
        "tags" : [
        ]
      }
    ],
    "commit" : "11514a7fe38e9bb840f76b69a632d9dd5264b0c5",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +631,635 @@            }\n            futureResponses.forEach(res -> assertTrue(!res.isDone()));\n            producer.flush();\n            futureResponses.forEach(res -> assertTrue(res.isDone()));\n        }"
  },
  {
    "id" : "1cec6db6-f5d2-4fb9-b327-ed22d2fa3842",
    "prId" : 8375,
    "prUrl" : "https://github.com/apache/kafka/pull/8375#pullrequestreview-383173037",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d28c46b2-e5b8-4048-b3f0-684050d73b04",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "side cleanups",
        "createdAt" : "2020-03-27T20:18:04Z",
        "updatedAt" : "2020-04-01T01:44:58Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0a4a0a2bf7f08a6f1fb7c1221118246f9180a36",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +143,147 @@        ProducerConfig config = new ProducerConfig(props);\n        assertTrue(config.getBoolean(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG));\n        assertTrue(Stream.of(\"-1\", \"all\").anyMatch(each -> each.equalsIgnoreCase(config.getString(ProducerConfig.ACKS_CONFIG))));\n        assertEquals((int) config.getInt(ProducerConfig.RETRIES_CONFIG), Integer.MAX_VALUE);\n        assertTrue(config.getString(ProducerConfig.CLIENT_ID_CONFIG).equalsIgnoreCase(\"producer-\" +"
  }
]