[
  {
    "id" : "485cf621-5eb8-4cd4-8f27-4003b79fe1a8",
    "prId" : 7952,
    "prUrl" : "https://github.com/apache/kafka/pull/7952#pullrequestreview-344375099",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fdc9ef4-2b5e-4a12-a6d2-a0e394296c18",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Test changes in this class are only for new API coverage.",
        "createdAt" : "2020-01-17T05:51:59Z",
        "updatedAt" : "2020-01-22T18:43:33Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e81e0daaec396ec5be7cc3d3cc2adae42f242e95",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +17,21 @@package org.apache.kafka.clients.producer;\n\nimport org.apache.kafka.clients.consumer.ConsumerGroupMetadata;\nimport org.apache.kafka.clients.consumer.OffsetAndMetadata;\nimport org.apache.kafka.clients.producer.internals.DefaultPartitioner;"
  },
  {
    "id" : "6b176abf-b50f-4c79-b4f0-6dc1368648f9",
    "prId" : 7952,
    "prUrl" : "https://github.com/apache/kafka/pull/7952#pullrequestreview-345035834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fde5b4e-ee15-4f21-a063-b4d40637fc6d",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Seems this test case would be more interesting if we tried to commit a separate set of offsets before aborting",
        "createdAt" : "2020-01-19T19:04:14Z",
        "updatedAt" : "2020-01-22T18:43:33Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "9d4662a0-149c-423b-8a13-93f2bff1e297",
        "parentId" : "0fde5b4e-ee15-4f21-a063-b4d40637fc6d",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "ack",
        "createdAt" : "2020-01-19T23:38:11Z",
        "updatedAt" : "2020-01-22T18:43:33Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e81e0daaec396ec5be7cc3d3cc2adae42f242e95",
    "line" : 220,
    "diffHunk" : "@@ -1,1 +661,665 @@        };\n        producer.sendOffsetsToTransaction(groupCommit, new ConsumerGroupMetadata(group2));\n        producer.abortTransaction();\n\n        Map<String, Map<TopicPartition, OffsetAndMetadata>> expectedResult = new HashMap<>();"
  },
  {
    "id" : "8c92fefa-8fe4-4809-aeaf-4275d07110b1",
    "prId" : 9309,
    "prUrl" : "https://github.com/apache/kafka/pull/9309#pullrequestreview-500017230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f94df97-4278-40f5-98d5-94836261673c",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "We should avoid to suppress warning. Seems, you need to add generics to `ProducerRecord` in L774 to fix it?",
        "createdAt" : "2020-09-30T18:22:05Z",
        "updatedAt" : "2020-09-30T22:33:41Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "2708cce5-3dcb-4876-9171-c8ae17ffe774",
        "parentId" : "0f94df97-4278-40f5-98d5-94836261673c",
        "authorId" : "3c4b0468-3e02-406c-b9a2-574b2d78ebc3",
        "body" : "Thanks a lot for your review @mjsax \r\nIf I add generics, bounded type parameters will make compilation fail, as types are checked and incompatible.\r\nIn fact, the purpose of this enhancement is that MockProducer throws the exception when types are not restricted, wdyt?",
        "createdAt" : "2020-09-30T22:39:23Z",
        "updatedAt" : "2020-09-30T22:39:23Z",
        "lastEditedBy" : "3c4b0468-3e02-406c-b9a2-574b2d78ebc3",
        "tags" : [
        ]
      },
      {
        "id" : "3b2d3ee8-b26b-4643-aa5b-085f7c84d8e6",
        "parentId" : "0f94df97-4278-40f5-98d5-94836261673c",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Oh, I see. We actually want to pass in an incorrect key-type to get the ClassCastException. So you are right, for this case we cannot specify the generics. Keeping the code as-is and to suppress the warning is fine than. Totally missed this. Thanks for clarifying.",
        "createdAt" : "2020-10-01T05:27:32Z",
        "updatedAt" : "2020-10-01T05:27:32Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bcdb44e764ebe93af78ad8910b549915b9fdd97",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +770,774 @@    \n    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void shouldThrowClassCastException() {\n        try (MockProducer<Integer, String> customProducer = new MockProducer<>(true, new IntegerSerializer(), new StringSerializer());) {"
  },
  {
    "id" : "d63103f7-e68d-4b2a-a89a-4ac86d7e6641",
    "prId" : 9955,
    "prUrl" : "https://github.com/apache/kafka/pull/9955#pullrequestreview-574904506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "346710a5-254a-4df8-8e4c-8585dcdf37fe",
        "parentId" : null,
        "authorId" : "971fa008-53a4-419e-9bf1-f3f38de845ff",
        "body" : "@dengziming hello , Is it the same condition?",
        "createdAt" : "2021-01-24T07:52:32Z",
        "updatedAt" : "2021-01-24T07:52:32Z",
        "lastEditedBy" : "971fa008-53a4-419e-9bf1-f3f38de845ff",
        "tags" : [
        ]
      },
      {
        "id" : "48ae0d19-0273-4660-993e-39cb47a8a37d",
        "parentId" : "346710a5-254a-4df8-8e4c-8585dcdf37fe",
        "authorId" : "12f98c82-b9ef-4668-aa6f-5a62bf3439bb",
        "body" : "Sorry, I find this is not right, just add another pr to fix it.",
        "createdAt" : "2021-01-24T07:55:08Z",
        "updatedAt" : "2021-01-24T07:55:08Z",
        "lastEditedBy" : "12f98c82-b9ef-4668-aa6f-5a62bf3439bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "ace7674a7dc714a84367ad9e61c931e227ebc31d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +115,119 @@        Future<RecordMetadata> md3 = producer.send(record1);\n        Future<RecordMetadata> md4 = producer.send(record2);\n        assertFalse(md3.isDone() && !md4.isDone(), \"Requests should not be completed.\");\n        producer.flush();\n        assertTrue(md3.isDone() && md4.isDone(), \"Requests should be completed.\");"
  },
  {
    "id" : "81edc281-0d66-4c95-b86f-46ab4978f8c9",
    "prId" : 10675,
    "prUrl" : "https://github.com/apache/kafka/pull/10675#pullrequestreview-657355270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f75606af-4bc1-4434-9f38-9097ec177e9a",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Are these tests only present for testing deprecated functionality or are they also testing non deprecated functionality?",
        "createdAt" : "2021-05-11T23:53:36Z",
        "updatedAt" : "2021-05-11T23:53:36Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "639b2585-c4dc-4f6f-93ad-650c219de487",
        "parentId" : "f75606af-4bc1-4434-9f38-9097ec177e9a",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "These are testing the deprecated method specifically. There is an identical test below for the non-deprecated version of this API. Are you suggesting we should just go ahead and remove the tests for the deprecated functionality?",
        "createdAt" : "2021-05-11T23:57:59Z",
        "updatedAt" : "2021-05-11T23:58:00Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "19083cbf-67b0-4151-bd73-b12660619a0b",
        "parentId" : "f75606af-4bc1-4434-9f38-9097ec177e9a",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "If their main purpose is to test deprecated functionality, we should deprecate the test methods too so we can remove them when the deprecated non test code is removed.",
        "createdAt" : "2021-05-12T00:26:04Z",
        "updatedAt" : "2021-05-12T00:26:04Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "2a4420e1-7e8c-483a-9008-4c7afd5da036",
        "parentId" : "f75606af-4bc1-4434-9f38-9097ec177e9a",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "The suppression is only needed for cases where non deprecated code has to call deprecated code.",
        "createdAt" : "2021-05-12T00:26:35Z",
        "updatedAt" : "2021-05-12T00:26:35Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "08375f95-cca2-4d89-9398-75a6ba464163",
        "parentId" : "f75606af-4bc1-4434-9f38-9097ec177e9a",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Well, it does call deprecated code. But I didn't think to just deprecate the test itself. That makes more sense, will do",
        "createdAt" : "2021-05-12T00:30:39Z",
        "updatedAt" : "2021-05-12T00:30:40Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "697f645eb125cef9d6492ac4e1a7f7dae64bf599",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +419,423 @@\n    @Deprecated\n    @Test\n    public void shouldThrowOnNullConsumerGroupIdWhenSendOffsetsToTransaction() {\n        buildMockProducer(true);"
  }
]