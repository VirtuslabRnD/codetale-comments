[
  {
    "id" : "10e36bc5-d4b0-4015-9e76-8f0748d829e3",
    "prId" : 6251,
    "prUrl" : "https://github.com/apache/kafka/pull/6251#pullrequestreview-205042221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a4ddf767-a8f2-4c9d-8811-20f04a16fced",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Can we verify that the request is a LeaveGroupRequest?",
        "createdAt" : "2019-02-19T04:30:35Z",
        "updatedAt" : "2019-02-19T06:13:25Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "08a7e41c-dea9-4ee5-aa2f-fc172383e4d1",
        "parentId" : "a4ddf767-a8f2-4c9d-8811-20f04a16fced",
        "authorId" : "1462ba0d-5f6b-4517-98de-68943d892c2b",
        "body" : "done.",
        "createdAt" : "2019-02-19T06:14:01Z",
        "updatedAt" : "2019-02-19T06:14:01Z",
        "lastEditedBy" : "1462ba0d-5f6b-4517-98de-68943d892c2b",
        "tags" : [
        ]
      }
    ],
    "commit" : "2102b7c04ffb64ba163904304f9ee7fb9dab3432",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +769,773 @@        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                received.set(true);\n                LeaveGroupRequest leaveRequest = (LeaveGroupRequest) body;"
  },
  {
    "id" : "e91c72fc-5437-450e-8e6c-090c65aa6044",
    "prId" : 6304,
    "prUrl" : "https://github.com/apache/kafka/pull/6304#pullrequestreview-207069872",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "475a6ee3-d3c9-4848-9b1e-948cc061b3ae",
        "parentId" : null,
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "For this test, the old code fails as follow:\r\n```\r\norg.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testInvalidCoordinatorAssignment FAILED\r\n    java.lang.Exception: Unexpected exception, expected<java.lang.IllegalStateException> but was<java.lang.IllegalArgumentException>\r\n\r\n        Caused by:\r\n        java.lang.IllegalArgumentException: Assigned partition test2-0 for non-subscribed topic; subscription is [test1]\r\n            at org.apache.kafka.clients.consumer.internals.SubscriptionState.assignFromSubscribed(SubscriptionState.java:195)\r\n            at org.apache.kafka.clients.consumer.internals.ConsumerCoordinator.onJoinComplete(ConsumerCoordinator.java:249)\r\n            at org.apache.kafka.clients.consumer.internals.AbstractCoordinator.joinGroupIfNeeded(AbstractCoordinator.java:410)\r\n            at org.apache.kafka.clients.consumer.internals.AbstractCoordinator.ensureActiveGroup(AbstractCoordinator.java:344)\r\n            at org.apache.kafka.clients.consumer.internals.ConsumerCoordinator.poll(ConsumerCoordinator.java:340)\r\n            at org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest.testInvalidCoordinatorAssignment(ConsumerCoordinatorTest.java:506)\r\n```",
        "createdAt" : "2019-02-22T23:30:59Z",
        "updatedAt" : "2019-02-23T00:12:25Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "71eca2a2a6a03a63f1deb7540fce228f3eb9d910",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +480,484 @@\n    @Test\n    public void testInvalidCoordinatorAssignment() {\n        final String consumerId = \"invalid_assignment\";\n"
  },
  {
    "id" : "a7d1c288-dc78-44cf-8fb6-11f7992ecb98",
    "prId" : 6304,
    "prUrl" : "https://github.com/apache/kafka/pull/6304#pullrequestreview-207069872",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2139abf8-8a55-434d-bec6-cd3a3599f441",
        "parentId" : null,
        "authorId" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "body" : "For this test the old code fails as follow:\r\n```\r\norg.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testOutdatedCoordinatorAssignment FAILED\r\n    java.lang.IllegalArgumentException: Assigned partition test2-0 for non-subscribed topic; subscription is [test1]\r\n        at org.apache.kafka.clients.consumer.internals.SubscriptionState.assignFromSubscribed(SubscriptionState.java:195)\r\n        at org.apache.kafka.clients.consumer.internals.ConsumerCoordinator.onJoinComplete(ConsumerCoordinator.java:249)\r\n        at org.apache.kafka.clients.consumer.internals.AbstractCoordinator.joinGroupIfNeeded(AbstractCoordinator.java:410)\r\n        at org.apache.kafka.clients.consumer.internals.AbstractCoordinator.ensureActiveGroup(AbstractCoordinator.java:344)\r\n        at org.apache.kafka.clients.consumer.internals.ConsumerCoordinator.poll(ConsumerCoordinator.java:340)\r\n        at org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest.testOutdatedCoordinatorAssignment(ConsumerCoordinatorTest.java:466)\r\n```",
        "createdAt" : "2019-02-22T23:31:38Z",
        "updatedAt" : "2019-02-23T00:12:25Z",
        "lastEditedBy" : "4a7c311c-0954-4671-a0d2-266cb67437ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "71eca2a2a6a03a63f1deb7540fce228f3eb9d910",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +418,422 @@\n    @Test\n    public void testOutdatedCoordinatorAssignment() {\n        final String consumerId = \"outdated_assignment\";\n"
  },
  {
    "id" : "7a8439eb-b679-4cb3-8457-1af2cbc448f6",
    "prId" : 6778,
    "prUrl" : "https://github.com/apache/kafka/pull/6778#pullrequestreview-251399676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5caa8e6-797a-4c16-8a3d-a3eb021b9a69",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "```suggestion\r\n    public void testSelectRebalanceProtocol() {\r\n```",
        "createdAt" : "2019-06-18T22:45:38Z",
        "updatedAt" : "2019-06-19T00:38:37Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "8440e7defc7a3b3c0fa6c378969b33035ad1a21d",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +198,202 @@\n    @Test\n    public void testSelectRebalanceProtcol() {\n        List<PartitionAssignor> assignors = new ArrayList<>();\n        assignors.add(new MockPartitionAssignor(Collections.singletonList(PartitionAssignor.RebalanceProtocol.EAGER)));"
  },
  {
    "id" : "2380cf13-d1b0-418d-b855-fd7a36869488",
    "prId" : 6778,
    "prUrl" : "https://github.com/apache/kafka/pull/6778#pullrequestreview-251399676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e305235-7b5a-458e-aad9-8bf2d2f6adaa",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "nit: extra line",
        "createdAt" : "2019-06-18T22:57:41Z",
        "updatedAt" : "2019-06-19T00:38:37Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "8440e7defc7a3b3c0fa6c378969b33035ad1a21d",
    "line" : 252,
    "diffHunk" : "@@ -1,1 +616,620 @@        final List<TopicPartition> owned = Collections.emptyList();\n        final List<TopicPartition> oldAssigned = Arrays.asList(t1p);\n\n\n        subscriptions.subscribe(Pattern.compile(\".*\"), rebalanceListener);"
  },
  {
    "id" : "4fd0faba-14e0-4863-a008-8f35898dcb40",
    "prId" : 6778,
    "prUrl" : "https://github.com/apache/kafka/pull/6778#pullrequestreview-251399676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3404e6dc-b615-405e-b338-db2f793757d3",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "nit: all on same line (or all separate)?",
        "createdAt" : "2019-06-18T23:00:43Z",
        "updatedAt" : "2019-06-19T00:38:37Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "8440e7defc7a3b3c0fa6c378969b33035ad1a21d",
    "line" : 574,
    "diffHunk" : "@@ -1,1 +1386,1390 @@\n        try (ConsumerCoordinator coordinator = buildCoordinator(rebalanceConfig, new Metrics(), assignors,\n            true)\n        ) {\n            subscriptions.subscribe(singleton(topic1), rebalanceListener);"
  },
  {
    "id" : "6e8d3473-7bf2-4fd0-a00f-1419da477c39",
    "prId" : 6778,
    "prUrl" : "https://github.com/apache/kafka/pull/6778#pullrequestreview-251399676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6fcee14e-8eae-40aa-9eef-a4800855d7cd",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "as above",
        "createdAt" : "2019-06-18T23:01:19Z",
        "updatedAt" : "2019-06-19T00:38:37Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "8440e7defc7a3b3c0fa6c378969b33035ad1a21d",
    "line" : 726,
    "diffHunk" : "@@ -1,1 +1477,1481 @@\n        try (ConsumerCoordinator coordinator = buildCoordinator(rebalanceConfig, new Metrics(), assignors,\n            true)) {\n            subscriptions.subscribe(singleton(topic1), rebalanceListener);\n            client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));"
  },
  {
    "id" : "a3bb3de9-6186-43aa-8e98-6a9192de1e6f",
    "prId" : 6778,
    "prUrl" : "https://github.com/apache/kafka/pull/6778#pullrequestreview-251408426",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4df4431e-6a5e-4756-84fa-bb105ee5822d",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is a piggy-backed fix: we should encode the metadata for leaders.",
        "createdAt" : "2019-06-18T23:17:31Z",
        "updatedAt" : "2019-06-19T00:38:37Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8440e7defc7a3b3c0fa6c378969b33035ad1a21d",
    "line" : 1058,
    "diffHunk" : "@@ -1,1 +2400,2404 @@                        .setLeader(memberId)\n                        .setMemberId(memberId)\n                        .setMembers(metadata)\n        );\n    }"
  },
  {
    "id" : "0527c5fd-dd02-4a85-a161-78c6d4fbdee7",
    "prId" : 6884,
    "prUrl" : "https://github.com/apache/kafka/pull/6884#pullrequestreview-255490875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "204eeb09-1c7c-43f9-8b44-e68c9b142ac2",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Just checking... this is because we're now not revoking before reassigning, right?",
        "createdAt" : "2019-06-26T21:59:51Z",
        "updatedAt" : "2019-08-08T21:28:14Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "ee961648-52f9-424f-aba0-b19b3dad67bd",
        "parentId" : "204eeb09-1c7c-43f9-8b44-e68c9b142ac2",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "No that's because we check if the partition list if empty or not now: if it is empty, we'd skip it.\r\n\r\nBut after discussing @ableegoldman and @hachikuji on the other pt.2 PR I've decided to revert this and maintain the old behavior.",
        "createdAt" : "2019-06-27T21:30:13Z",
        "updatedAt" : "2019-08-08T21:28:14Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6041a792f58b0b9a38983a60e052e9018319a6e6",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +499,503 @@        assertEquals(subscription, subscriptions.groupSubscription());\n        assertEquals(0, rebalanceListener.revokedCount);\n        assertNull(rebalanceListener.revoked);\n        assertEquals(1, rebalanceListener.assignedCount);\n        assertEquals(getAdded(owned, assigned), rebalanceListener.assigned);"
  },
  {
    "id" : "bd334a33-4a65-4402-aed3-25c5ff929efb",
    "prId" : 6884,
    "prUrl" : "https://github.com/apache/kafka/pull/6884#pullrequestreview-269912502",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c93619bd-fdb1-4939-87f3-d6518911e19d",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "duplicate of line above?",
        "createdAt" : "2019-07-31T00:57:46Z",
        "updatedAt" : "2019-08-08T21:28:14Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "ecd8ec70-5dea-4ea9-b84c-02a3fbeac808",
        "parentId" : "c93619bd-fdb1-4939-87f3-d6518911e19d",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Actually they are not: one is for the count of the triggering, and one for the latest triggered parameters.",
        "createdAt" : "2019-07-31T17:10:03Z",
        "updatedAt" : "2019-08-08T21:28:14Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "c4e6837c-c664-42c2-b7f5-ea3b266ae4ac",
        "parentId" : "c93619bd-fdb1-4939-87f3-d6518911e19d",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Ah, my bad, didn't read closely",
        "createdAt" : "2019-08-01T22:38:19Z",
        "updatedAt" : "2019-08-08T21:28:14Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "6041a792f58b0b9a38983a60e052e9018319a6e6",
    "line" : 207,
    "diffHunk" : "@@ -1,1 +680,684 @@        assertEquals(toSet(newAssigned), subscriptions.assignedPartitions());\n        assertEquals(revokedCount, rebalanceListener.revokedCount);\n        assertEquals(revoked.isEmpty() ? null : revoked, rebalanceListener.revoked);\n        assertEquals(2, rebalanceListener.assignedCount);\n        assertEquals(getAdded(oldAssigned, newAssigned), rebalanceListener.assigned);"
  },
  {
    "id" : "1e87b42b-1084-4fe2-ade0-d6fc6b8042d2",
    "prId" : 7312,
    "prUrl" : "https://github.com/apache/kafka/pull/7312#pullrequestreview-314511196",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30af33a4-8ba6-43f8-9404-200a735d3e58",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is the added test step: if we return some data during the rebalance and user called commit, this is the expected result and the caller can decide whether or not to retry after the rebalance is completed.",
        "createdAt" : "2019-11-08T23:42:22Z",
        "updatedAt" : "2020-01-09T19:24:32Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "27f76b7b68256a0b935ed2ffb490616718608782",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1890,1894 @@        assertNull(coordinator.generationIfStable());\n\n        // when the state is REBALANCING, we would not even send out the request but fail immediately\n        assertThrows(RebalanceInProgressException.class, () -> coordinator.commitOffsetsSync(singletonMap(t1p,\n            new OffsetAndMetadata(100L, \"metadata\")), time.timer(Long.MAX_VALUE)));"
  },
  {
    "id" : "42ab25d7-0d7b-473c-b59a-7afc6e400b47",
    "prId" : 7647,
    "prUrl" : "https://github.com/apache/kafka/pull/7647#pullrequestreview-311901848",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5227bdd4-4707-4451-8a2c-fef27c27d067",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Augmented this unit test, without the fix above this test will now fail.",
        "createdAt" : "2019-11-05T17:24:53Z",
        "updatedAt" : "2019-11-06T02:11:39Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "349492502754485aa3252c1327e8da84bc06fe52",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +2354,2358 @@\n            // Retry join should then succeed\n            client.prepareResponse(joinGroupFollowerResponse(generationId, memberId, \"leader\", Errors.NONE));\n            client.prepareResponse(syncGroupResponse(singletonList(t1p), Errors.NONE));\n"
  },
  {
    "id" : "e75eb22e-42bf-46bc-a465-a533822a6a98",
    "prId" : 7878,
    "prUrl" : "https://github.com/apache/kafka/pull/7878#pullrequestreview-337460689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "330790cf-a7f3-47ff-9030-7cf5e68adc21",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "minor cleanup",
        "createdAt" : "2019-12-31T22:52:30Z",
        "updatedAt" : "2020-01-14T03:19:53Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "444fc571446e41ecc8941df7df2de8ef936d73c0",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +2645,2649 @@\n    private OffsetCommitCallback callback(final AtomicBoolean success) {\n        return (offsets, exception) -> {\n            if (exception == null)\n                success.set(true);"
  },
  {
    "id" : "511d1a63-8264-4195-8519-1f4f850958c0",
    "prId" : 7878,
    "prUrl" : "https://github.com/apache/kafka/pull/7878#pullrequestreview-341503141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "991d2e4b-3ca3-4089-b217-34d558a9b6ec",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Can you elaborate on the test? What is the purpose of it (the name is not descriptive)? Should it test that the client retires if `PENDING_OFFSET` error is returned?\r\n\r\nTo what extend to we want/need to verify the internal handling of `PENDING_OFFSET` error code? Or is it ok to do this \"black box\" test to only verify the final state?",
        "createdAt" : "2020-01-10T18:56:38Z",
        "updatedAt" : "2020-01-14T03:19:53Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "606ac39d-a20b-43b5-9247-e006d2ddae06",
        "parentId" : "991d2e4b-3ca3-4089-b217-34d558a9b6ec",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "The purpose of this test is similar to `testRefreshOffsetNotCoordinatorForConsumer`, just making sure we are retrying on the first time when we hit pending offset exception",
        "createdAt" : "2020-01-10T23:22:05Z",
        "updatedAt" : "2020-01-14T03:19:53Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "23be4999-026c-4257-9423-823a70076fd2",
        "parentId" : "991d2e4b-3ca3-4089-b217-34d558a9b6ec",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "In order to make sure that we do have the retry logic, maybe we can break line 2046 to two consecutive\r\n\r\n```\r\ncoordinator.refreshCommittedOffsetsIfNeeded(time.timer(0L));\r\n```\r\n\r\nAnd check that in between the missing fetch position still exists?",
        "createdAt" : "2020-01-11T00:25:41Z",
        "updatedAt" : "2020-01-14T03:19:53Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "b675164e-2145-46a1-9ff0-49144fc61f72",
        "parentId" : "991d2e4b-3ca3-4089-b217-34d558a9b6ec",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "That makes sense",
        "createdAt" : "2020-01-11T04:21:08Z",
        "updatedAt" : "2020-01-14T03:19:53Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "444fc571446e41ecc8941df7df2de8ef936d73c0",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +2052,2056 @@        assertTrue(subscriptions.hasAllFetchPositions());\n        assertEquals(100L, subscriptions.position(t1p).offset);\n    }\n\n    @Test(expected = KafkaException.class)"
  },
  {
    "id" : "517cc72a-46ef-48ce-8d7b-3fc35ae176ab",
    "prId" : 8187,
    "prUrl" : "https://github.com/apache/kafka/pull/8187#pullrequestreview-366143715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "24ef0885-38b1-4790-bf13-30789c4355a7",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "just a side cleanup",
        "createdAt" : "2020-02-28T03:34:58Z",
        "updatedAt" : "2020-02-28T04:50:31Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "abbb2e38df0ff7c250e3b77588c7cc62b22bb4de",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +354,358 @@        for (int i = 0; i < numRequests; i++) {\n            Map<TopicPartition, OffsetAndMetadata> offsets = singletonMap(tp, new OffsetAndMetadata(i));\n            coordinator.commitOffsetsAsync(offsets, (offsets1, exception) -> {\n                responses.incrementAndGet();\n                Throwable cause = exception.getCause();"
  }
]