[
  {
    "id" : "bc5ead0d-3972-42db-bf29-47a04ea6a614",
    "prId" : 4557,
    "prUrl" : "https://github.com/apache/kafka/pull/4557#pullrequestreview-96404716",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90b0d166-29c0-49c9-a52d-a40fcf3abaf5",
        "parentId" : null,
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "Why was this change needed?",
        "createdAt" : "2018-02-13T23:25:57Z",
        "updatedAt" : "2018-02-14T15:55:04Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "221ed0dc-93a5-45f5-8ceb-efbb9982e6d0",
        "parentId" : "90b0d166-29c0-49c9-a52d-a40fcf3abaf5",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I was annoyed that it took 5 seconds for lookup of the previous invalid host to fail. Seemed like any value will work for the purpose of this test case so we can choose something which causes an immediate failure.",
        "createdAt" : "2018-02-14T07:35:56Z",
        "updatedAt" : "2018-02-14T15:55:04Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "76c796ca128c3c97231f3ebda994a07bb06b26aa",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +134,138 @@        Properties props = new Properties();\n        props.setProperty(ConsumerConfig.CLIENT_ID_CONFIG, \"testConstructorClose\");\n        props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"invalid-23-8409-adsfsdj\");\n        props.setProperty(ConsumerConfig.METRIC_REPORTER_CLASSES_CONFIG, MockMetricsReporter.class.getName());\n"
  },
  {
    "id" : "e498c4be-6fcb-4e57-9cd8-8147d9e2666a",
    "prId" : 4855,
    "prUrl" : "https://github.com/apache/kafka/pull/4855#pullrequestreview-122280843",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e69b7115-3b44-4416-8fae-6729676c22e7",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "time never actually advances because we use `MockTime(0)`, so any timeout at all will block indefinitely and keep polling until we get a response. This only works in tests that expect a response, otherwise it would loop forever.",
        "createdAt" : "2018-05-22T19:26:12Z",
        "updatedAt" : "2018-05-26T00:00:49Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3fce0f22e8b12e03475212b2bf07e69bc230362",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +487,491 @@        client.prepareResponse(fetchResponse(tp0, 50L, 5));\n\n        ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(1));\n        assertEquals(5, records.count());\n        assertEquals(55L, consumer.position(tp0));"
  },
  {
    "id" : "c9ad1ba2-9ff1-4a54-bf23-dd1cfb3e30a6",
    "prId" : 5877,
    "prUrl" : "https://github.com/apache/kafka/pull/5877#pullrequestreview-172815272",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "420a7cdf-10bc-4fe9-a3ff-0be110feb248",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "We should probably have a `fail` below if this returns without errors?",
        "createdAt" : "2018-11-07T17:33:02Z",
        "updatedAt" : "2018-11-16T08:55:52Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "d3228e18-9109-4087-a3a0-ca0195d4671b",
        "parentId" : "420a7cdf-10bc-4fe9-a3ff-0be110feb248",
        "authorId" : "2a5e5a4d-e0e2-4e26-b139-0930dd63f949",
        "body" : "Thanks! Totally missed them.",
        "createdAt" : "2018-11-08T06:05:11Z",
        "updatedAt" : "2018-11-16T08:55:52Z",
        "lastEditedBy" : "2a5e5a4d-e0e2-4e26-b139-0930dd63f949",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8b1b9ef3edffefc1b11d99055968dca2e09c1fb",
    "line" : 216,
    "diffHunk" : "@@ -1,1 +1295,1299 @@\n        try {\n            newConsumer((String) null).subscribe(Collections.singleton(topic));\n            fail(\"Expected an InvalidGroupIdException\");\n        } catch (InvalidGroupIdException e) {"
  },
  {
    "id" : "02d93616-1652-4e78-8169-f996fae19a25",
    "prId" : 6248,
    "prUrl" : "https://github.com/apache/kafka/pull/6248#pullrequestreview-201923806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05d46d56-feed-4daf-aad0-e1135b65910d",
        "parentId" : null,
        "authorId" : "f4cc0a00-0225-4972-8b58-0b97edf58337",
        "body" : "The use of `ExpectedException` seems like it was unnecessary here in the first place -- we could have just used the `expected` parameter of the `@Test` annotation, which seems already the much more common pattern given we don't need to further inspect the thrown exception in most cases.\r\n\r\nIn cases we don't need to further inspect the exception, the main value I see here is that it is more targeted -- it validates that the specific call you expect to throw the exception is the one that throws it. Do we want to standardize on this form moving forward? If so, we'd probably need to make committers aware since most are probably using the annotation-based approach for the most part.\r\n\r\nAlso, seems like this reveals that the test was broken (or at least not calling the final `consumer.close` previously?",
        "createdAt" : "2019-02-10T20:28:41Z",
        "updatedAt" : "2019-02-11T19:01:30Z",
        "lastEditedBy" : "f4cc0a00-0225-4972-8b58-0b97edf58337",
        "tags" : [
        ]
      },
      {
        "id" : "86d578f9-ace0-4582-8fca-c9bcca9d998d",
        "parentId" : "05d46d56-feed-4daf-aad0-e1135b65910d",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Yeah, we should move away from the annotation based approach as it was removed from JUnit 5 and the issue you mentioned (you often don't know if the exception was thrown from the right method). I was going to mention that as part of my JUnit 5 discussion.\r\n\r\nI'll check the close issue.",
        "createdAt" : "2019-02-10T21:48:29Z",
        "updatedAt" : "2019-02-11T19:01:30Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "31469cfdcb7c5db19beacb1aafa8bb4018f24f07",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +837,841 @@        try {\n            Thread.currentThread().interrupt();\n            assertThrows(InterruptException.class, () -> consumer.poll(Duration.ZERO));\n        } finally {\n            // clear interrupted state again since this thread may be reused by JUnit"
  },
  {
    "id" : "11f97102-9992-4947-a0ae-3ba320507dda",
    "prId" : 6248,
    "prUrl" : "https://github.com/apache/kafka/pull/6248#pullrequestreview-202296322",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4118ad71-a11b-438a-9b07-b1530c18cbff",
        "parentId" : null,
        "authorId" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "body" : "Oh wow, this is so much nicer than the rule thing or explicit catches. +1",
        "createdAt" : "2019-02-11T19:31:54Z",
        "updatedAt" : "2019-02-11T20:53:57Z",
        "lastEditedBy" : "083f2f03-ca7e-48a1-9781-482564dfdf53",
        "tags" : [
        ]
      }
    ],
    "commit" : "31469cfdcb7c5db19beacb1aafa8bb4018f24f07",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +837,841 @@        try {\n            Thread.currentThread().interrupt();\n            assertThrows(InterruptException.class, () -> consumer.poll(Duration.ZERO));\n        } finally {\n            // clear interrupted state again since this thread may be reused by JUnit"
  },
  {
    "id" : "495e4b2a-6c06-4918-a4e4-424b1ccc8f90",
    "prId" : 6884,
    "prUrl" : "https://github.com/apache/kafka/pull/6884#pullrequestreview-270401480",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e4d0d43-43c9-482a-9115-957eeb187c72",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "nit: you can check this more concisely with `assertThrows`",
        "createdAt" : "2019-08-01T22:06:59Z",
        "updatedAt" : "2019-08-08T21:28:14Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "27204b62-3908-46e8-834e-34a3fbd138a9",
        "parentId" : "3e4d0d43-43c9-482a-9115-957eeb187c72",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I thought about that, but `assertThrows` does not allow me to check the embedded cause (and I wanted to dig two layers inside), so I did not choose that util.",
        "createdAt" : "2019-08-02T00:00:31Z",
        "updatedAt" : "2019-08-08T21:28:14Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "9dbe706a-95a8-462b-a266-9659e6934005",
        "parentId" : "3e4d0d43-43c9-482a-9115-957eeb187c72",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "It does: `assertThrows` returns the caught exception.",
        "createdAt" : "2019-08-02T21:23:19Z",
        "updatedAt" : "2019-08-08T21:28:14Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "6041a792f58b0b9a38983a60e052e9018319a6e6",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +1663,1667 @@        // assign throws\n        try {\n            consumer.updateAssignmentMetadataIfNeeded(time.timer(Long.MAX_VALUE));\n            fail(\"Should throw exception\");\n        } catch (Throwable e) {"
  }
]