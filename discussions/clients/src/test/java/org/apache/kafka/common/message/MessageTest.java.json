[
  {
    "id" : "15f226d7-80fc-43c4-b5cf-c406b967c5fe",
    "prId" : 7062,
    "prUrl" : "https://github.com/apache/kafka/pull/7062#pullrequestreview-268078560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a93159e-dfea-4089-9740-c63eb5a95086",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Can we verify that null topics fails with an exception for versions older than 2?",
        "createdAt" : "2019-07-29T22:55:14Z",
        "updatedAt" : "2019-07-30T01:51:57Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8dd41a80739afc0801faae02e70aecedfbc0b75",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +291,295 @@        OffsetFetchRequestData allPartitionData = new OffsetFetchRequestData()\n                                                      .setGroupId(groupId)\n                                                      .setTopics(null);\n        for (short version = 0; version <= ApiKeys.OFFSET_FETCH.latestVersion(); version++) {\n            if (version < 2) {"
  },
  {
    "id" : "005742aa-d4e0-4905-9c10-76a97c358978",
    "prId" : 7325,
    "prUrl" : "https://github.com/apache/kafka/pull/7325#pullrequestreview-297222840",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ce8382f-a37f-478e-9e43-708b10ef3996",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "nit: you can use `assertThrows`. There are a few of these in this PR.",
        "createdAt" : "2019-10-04T05:20:04Z",
        "updatedAt" : "2019-10-06T18:59:30Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bdfa27b38efacb5368ee3ce926f13c38a19be26",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +857,861 @@            ByteBuffer buf = ByteBuffer.allocate(size);\n            ByteBufferAccessor byteBufferAccessor = new ByteBufferAccessor(buf);\n            message.write(byteBufferAccessor, cache, version);\n        });\n    }"
  },
  {
    "id" : "1eb72c8d-f959-4cf0-8cf2-ed9447fdd675",
    "prId" : 7878,
    "prUrl" : "https://github.com/apache/kafka/pull/7878#pullrequestreview-341439339",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1cf2826d-e844-4522-943e-719c86ddf771",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Not sure if I understand this test -- isn't `finalVersion` always the same as `version`? Also, it seems that we don't cover all combination? If version is eg, 5, we only test that `requireStableData` throws, but we don't test that `allPartitionData` does not throw.",
        "createdAt" : "2020-01-10T19:06:40Z",
        "updatedAt" : "2020-01-14T03:19:53Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "62f73b2a-af26-474f-a8d8-03891bdc41f8",
        "parentId" : "1cf2826d-e844-4522-943e-719c86ddf771",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Yea `finalVersion` is needed as lambda won't accept a non-final variable, and second point is correct, will breakdown this else-if logic into if-if",
        "createdAt" : "2020-01-10T21:16:14Z",
        "updatedAt" : "2020-01-14T03:19:53Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "b3ca99a7-161f-48d4-9805-5fa861fdbf50",
        "parentId" : "1cf2826d-e844-4522-943e-719c86ddf771",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Ah... thanks.",
        "createdAt" : "2020-01-10T21:46:09Z",
        "updatedAt" : "2020-01-14T03:19:53Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "444fc571446e41ecc8941df7df2de8ef936d73c0",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +478,482 @@            } else {\n                testAllMessageRoundTripsFromVersion(version, allPartitionData);\n            }\n\n            if (version < 7) {"
  },
  {
    "id" : "29d83b2b-b29f-4552-80de-118fb1af2394",
    "prId" : 7878,
    "prUrl" : "https://github.com/apache/kafka/pull/7878#pullrequestreview-342061777",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4823224b-210f-4f7c-bbfb-bd5bb304e47f",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "I thought we were not throwing anymore?",
        "createdAt" : "2020-01-13T17:21:00Z",
        "updatedAt" : "2020-01-14T03:19:53Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "b77acf75-5967-4e1c-88a4-7c214973b24f",
        "parentId" : "4823224b-210f-4f7c-bbfb-bd5bb304e47f",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "It's thrown from the OffsetFetchRequestData:\r\n`Attempted to write a non-default requireStable at version ...`",
        "createdAt" : "2020-01-13T18:18:15Z",
        "updatedAt" : "2020-01-14T03:19:53Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "d02fc55c-e745-4b74-9288-d9170da4fa2a",
        "parentId" : "4823224b-210f-4f7c-bbfb-bd5bb304e47f",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "In the Builder we revert to `false` if the version is not high enough. I think we should make the schema definition consistent with this behavior. We can set `requireStable` as ignorable.",
        "createdAt" : "2020-01-13T18:52:22Z",
        "updatedAt" : "2020-01-14T03:19:53Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "444fc571446e41ecc8941df7df2de8ef936d73c0",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +481,485 @@\n            if (version < 7) {\n                assertThrows(UnsupportedVersionException.class, () -> testAllMessageRoundTripsFromVersion(finalVersion, requireStableData));\n            } else {\n                testAllMessageRoundTripsFromVersion(finalVersion, requireStableData);"
  },
  {
    "id" : "94aab013-edb8-4be1-85a4-0bdc75013eb4",
    "prId" : 7897,
    "prUrl" : "https://github.com/apache/kafka/pull/7897#pullrequestreview-338382346",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86fc52e9-9229-492c-aeda-fdc760d9e349",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "We couldn't use JoinGroupRequest/Response defined structs here due to import control",
        "createdAt" : "2020-01-05T06:06:07Z",
        "updatedAt" : "2020-01-14T20:20:27Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "943bdf3604b662dfd20e7cfd586ada10e3412bc8",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +435,439 @@                requestData.setGroupInstanceId(null);\n                assertThrows(UnsupportedVersionException.class, () -> testAllMessageRoundTripsFromVersion(finalVersion, requestData));\n                requestData.setMemberId(\"\");\n                assertThrows(UnsupportedVersionException.class, () -> testAllMessageRoundTripsFromVersion(finalVersion, requestData));\n                requestData.setGenerationId(-1);"
  },
  {
    "id" : "5122e75c-bd60-4c07-9fd9-4a5b2ee094ae",
    "prId" : 7897,
    "prUrl" : "https://github.com/apache/kafka/pull/7897#pullrequestreview-342952535",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df6f8e5f-b815-4a0b-b2f0-4b1b2205f352",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "It's confusing that we call `testAllMessageRoundTripsFromVersion` here, because it will fail for the first version we pass in (ie, the internal `for` loop is not required. It would be easier to understand the test if we call `testEquivalentMessageRoundTrip` instead.\r\n\r\nApplies to there places too -- also to PR you do in parallel IIRC.",
        "createdAt" : "2020-01-14T22:28:31Z",
        "updatedAt" : "2020-01-14T23:13:52Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "9071f603-6d55-4703-9c9d-d849c4b80bca",
        "parentId" : "df6f8e5f-b815-4a0b-b2f0-4b1b2205f352",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Also, we actually want to test that, if any of the three new fields is set on a lower version we get `UnsupportedVersionException` -- hence, for each case, we should set two fields to `null` IMHO. Atm, the test logic is somewhat confusing.",
        "createdAt" : "2020-01-14T22:34:09Z",
        "updatedAt" : "2020-01-14T23:13:52Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "34837b4b-2909-485d-a87c-843d2fc57c80",
        "parentId" : "df6f8e5f-b815-4a0b-b2f0-4b1b2205f352",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Yep, this is correct observation!",
        "createdAt" : "2020-01-15T02:06:43Z",
        "updatedAt" : "2020-01-15T02:06:44Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "943bdf3604b662dfd20e7cfd586ada10e3412bc8",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +432,436 @@            if (version < 3) {\n                final short finalVersion = version;\n                assertThrows(UnsupportedVersionException.class, () -> testAllMessageRoundTripsFromVersion(finalVersion, requestData));\n                requestData.setGroupInstanceId(null);\n                assertThrows(UnsupportedVersionException.class, () -> testAllMessageRoundTripsFromVersion(finalVersion, requestData));"
  },
  {
    "id" : "98d5b79b-a998-4ea7-be3b-a357bbd81d53",
    "prId" : 7897,
    "prUrl" : "https://github.com/apache/kafka/pull/7897#pullrequestreview-342881908",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8878b8ab-482e-49c3-903d-03d1b3d18b38",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Same here -- we actually loop through the version in the outer loop, so why do we need to loop through them again? Effectively, we run tests for smaller versions multiple times?",
        "createdAt" : "2020-01-14T22:31:51Z",
        "updatedAt" : "2020-01-14T23:13:52Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "943bdf3604b662dfd20e7cfd586ada10e3412bc8",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +440,444 @@            }\n\n            testAllMessageRoundTripsFromVersion(version, requestData);\n        }\n    }"
  },
  {
    "id" : "1d380011-1c5d-477e-bbe3-51fad08f10ad",
    "prId" : 7952,
    "prUrl" : "https://github.com/apache/kafka/pull/7952#pullrequestreview-342976857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7bc9231-e096-4848-9b4b-d0607c1b8c50",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Addressing: https://github.com/apache/kafka/pull/7897#discussion_r366606582",
        "createdAt" : "2020-01-15T03:53:53Z",
        "updatedAt" : "2020-01-22T18:43:33Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e81e0daaec396ec5be7cc3d3cc2adae42f242e95",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +432,436 @@            if (version < 3) {\n                final short finalVersion = version;\n                assertThrows(UnsupportedVersionException.class, () -> testEquivalentMessageRoundTrip(finalVersion, requestData));\n                requestData.setGroupInstanceId(null);\n                assertThrows(UnsupportedVersionException.class, () -> testEquivalentMessageRoundTrip(finalVersion, requestData));"
  },
  {
    "id" : "d7e3acdb-b572-4353-b422-48a7f4f3ab80",
    "prId" : 8640,
    "prUrl" : "https://github.com/apache/kafka/pull/8640#pullrequestreview-426443959",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "255a98f3-fa0c-411b-9dba-9d80cc96b2c6",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Did you mean to make a change to `unknownTaggedFields` before the two asserts above?",
        "createdAt" : "2020-05-30T15:53:24Z",
        "updatedAt" : "2020-06-08T17:06:58Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "23407bc4-9801-4af4-8a3a-a15e6ba9ee27",
        "parentId" : "255a98f3-fa0c-411b-9dba-9d80cc96b2c6",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "No, this is intentional.  Invoking `unknownTaggedFields` will create the list if it doesn't exist.  There is an optimization where if the list is empty, as it will be the vast majority of the time, we just store null.  Example:\r\n\r\n```\r\n    @Override\r\n    public List<RawTaggedField> unknownTaggedFields() {\r\n        if (_unknownTaggedFields == null) {\r\n            _unknownTaggedFields = new ArrayList<>(0);\r\n        }\r\n        return _unknownTaggedFields;\r\n    }\r\n```\r\n\r\nTherefore it is good to test that messages with null here are equivalent (via `equals`) to messages that have an empty list here.",
        "createdAt" : "2020-06-07T21:02:19Z",
        "updatedAt" : "2020-06-08T17:06:58Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      },
      {
        "id" : "bacad27b-321c-4cb5-8b2a-b4a1080e8352",
        "parentId" : "255a98f3-fa0c-411b-9dba-9d80cc96b2c6",
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "OK, can you please add a comment? It's not obvious why the accessor is being called.",
        "createdAt" : "2020-06-07T21:06:36Z",
        "updatedAt" : "2020-06-08T17:06:58Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "b8b077e6-e13b-4cc9-858a-b92501fc3a49",
        "parentId" : "255a98f3-fa0c-411b-9dba-9d80cc96b2c6",
        "authorId" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "body" : "Added",
        "createdAt" : "2020-06-08T17:08:09Z",
        "updatedAt" : "2020-06-08T17:08:09Z",
        "lastEditedBy" : "514c0afb-8649-4fd9-a6ea-ee9e1b695274",
        "tags" : [
        ]
      }
    ],
    "commit" : "b847e6c9bb08fca4b6d0e184f489ff7a167f7ee5",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +976,980 @@        // Verify that the equalities still hold after the new empty list has been created.\n        assertEquals(createTopics, createTopics2);\n        assertEquals(createTopics2, createTopics);\n        createTopics.unknownTaggedFields().add(new RawTaggedField(0, new byte[] {0}));\n        assertFalse(createTopics.equals(createTopics2));"
  },
  {
    "id" : "f6f68929-8bae-4766-a5a2-b32f86de96e5",
    "prId" : 8989,
    "prUrl" : "https://github.com/apache/kafka/pull/8989#pullrequestreview-443449023",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92ceab6b-edbd-49ee-85f6-57844e3107db",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Should we test the expected behavior for all versions?",
        "createdAt" : "2020-07-06T21:31:27Z",
        "updatedAt" : "2020-07-06T23:22:14Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "835d17b5-f153-4f61-9585-420a096a3207",
        "parentId" : "92ceab6b-edbd-49ee-85f6-57844e3107db",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "We would check for equality only with versions that already introduced the new fields IMHO?",
        "createdAt" : "2020-07-06T22:23:00Z",
        "updatedAt" : "2020-07-06T23:22:14Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "23657840-2f0b-4714-8702-04d172b27a7e",
        "parentId" : "92ceab6b-edbd-49ee-85f6-57844e3107db",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Then we wouldn't have caught this bug 😉 . The most dangerous aspect of the generated protocols is the down-conversion to older formats since it gets poor test coverage.",
        "createdAt" : "2020-07-06T22:35:20Z",
        "updatedAt" : "2020-07-06T23:22:14Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "bba3797eb3cbfbe46fad0a33fb7eecef007ac7c2",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +242,246 @@        testAllMessageRoundTrips(baseResponse);\n\n        testAllMessageRoundTripsFromVersion((short) 1, baseResponse.setThrottleTimeMs(10));\n\n        baseGroup.setAuthorizedOperations(1);"
  },
  {
    "id" : "09668a01-8fed-4440-a698-a54936f83a47",
    "prId" : 10078,
    "prUrl" : "https://github.com/apache/kafka/pull/10078#pullrequestreview-604074366",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5f989a5-60e0-40c9-9486-d54172c78e56",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "Why are we changing this?",
        "createdAt" : "2021-03-04T10:49:48Z",
        "updatedAt" : "2021-03-04T13:04:11Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "4a9e41d3-593c-4415-8c0c-3bc3d2d041fe",
        "parentId" : "e5f989a5-60e0-40c9-9486-d54172c78e56",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "`testAllMessageRoundTripsBetweenVersions` exclude the end number so it should pass 5 so as to test version 4",
        "createdAt" : "2021-03-04T13:01:22Z",
        "updatedAt" : "2021-03-04T13:04:11Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      }
    ],
    "commit" : "3047e6634d0eb09796f26938a2d83e41b14001f5",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +486,490 @@                testEquivalentMessageRoundTrip(version, requestData);\n            } else if (version >= 2 && version <= 4) {\n                testAllMessageRoundTripsBetweenVersions(version, (short) 5, requestData, requestData);\n            } else {\n                testAllMessageRoundTripsFromVersion(version, requestData);"
  },
  {
    "id" : "9251cf9d-7297-4018-a14c-90fa67d621af",
    "prId" : 10098,
    "prUrl" : "https://github.com/apache/kafka/pull/10098#pullrequestreview-589573642",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08aa9c38-57f4-498d-9d23-79d3ca06f25e",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "This fails without the change in this PR?",
        "createdAt" : "2021-02-12T15:22:42Z",
        "updatedAt" : "2021-02-12T15:23:23Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "c544ffe0-63d2-4be2-b1b9-6a8bc39b626d",
        "parentId" : "08aa9c38-57f4-498d-9d23-79d3ca06f25e",
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "> This fails without the change in this PR?\r\n\r\nyep. The generated code is shown below.\r\n```java\r\n            if (this.taggedUuid != Uuid.fromString(\"H3KKO4NTRPaCWtEmm3vW7A\")) {\r\n                throw new UnsupportedVersionException(\"Attempted to write a non-default taggedUuid at version \" + _version);\r\n            }\r\n```",
        "createdAt" : "2021-02-12T15:32:28Z",
        "updatedAt" : "2021-02-12T15:32:29Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      }
    ],
    "commit" : "b1950510522ea026e4703408bacd91a0dd936135",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +754,758 @@    public void defaultValueShouldBeWritable() {\n        for (short version = SimpleExampleMessageData.LOWEST_SUPPORTED_VERSION; version <= SimpleExampleMessageData.HIGHEST_SUPPORTED_VERSION; ++version) {\n            MessageUtil.toByteBuffer(new SimpleExampleMessageData(), version);\n        }\n    }"
  }
]