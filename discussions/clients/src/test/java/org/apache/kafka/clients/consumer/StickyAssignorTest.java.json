[
  {
    "id" : "869012d3-d76d-4592-8371-1714ea520280",
    "prId" : 5291,
    "prUrl" : "https://github.com/apache/kafka/pull/5291#pullrequestreview-226374541",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf43ceb2-5e9e-4e8a-9752-4125ab2e62ab",
        "parentId" : null,
        "authorId" : "2a5e5a4d-e0e2-4e26-b139-0930dd63f949",
        "body" : "This was missed in the rebase.",
        "createdAt" : "2019-04-14T01:04:50Z",
        "updatedAt" : "2019-04-14T04:16:04Z",
        "lastEditedBy" : "2a5e5a4d-e0e2-4e26-b139-0930dd63f949",
        "tags" : [
        ]
      }
    ],
    "commit" : "a03a73432c4febeeb166b18d07fe24a304676a44",
    "line" : 206,
    "diffHunk" : "@@ -1,1 +653,657 @@        subscriptions.put(consumer,\n                new Subscription(topics(topic), StickyAssignor.serializeTopicPartitionAssignment(\n                        new ConsumerUserData(assignment.get(consumer), Optional.of(1)))));\n\n        assignment = assignor.assign(Collections.emptyMap(), subscriptions);"
  },
  {
    "id" : "e4695499-5e12-44d5-8b02-2f7b7c6ec11a",
    "prId" : 8668,
    "prUrl" : "https://github.com/apache/kafka/pull/8668#pullrequestreview-420622248",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b31f73a0-12a8-44de-b624-6705b762ee24",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "This test was testing an illegal state to begin with: you should never have two consumers in the same generation claim to own the same partition. That fact is the entire reason for the generation field to be added to the StickyAssignor's subscription userdata to begin with.",
        "createdAt" : "2020-05-29T03:01:16Z",
        "updatedAt" : "2020-05-30T02:34:19Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "e25a323d7e21aa5a554e43d811ac6eb3e3894055",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +170,174 @@\n        List<TopicPartition> c1partitions0 = partitions(tp0, tp1, tp4);\n        List<TopicPartition> c2partitions0 = partitions(tp0, tp1, tp2);\n        List<TopicPartition> c3partitions0 = partitions(tp3, tp4, tp5);\n        subscriptions.put(consumer1, buildSubscriptionWithGeneration(topics(topic), c1partitions0, 1));"
  }
]