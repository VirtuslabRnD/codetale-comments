[
  {
    "id" : "c086dc93-af38-4153-b3e8-01c9822d7c3f",
    "prId" : 7208,
    "prUrl" : "https://github.com/apache/kafka/pull/7208#pullrequestreview-292583336",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "947f1300-2bd3-43a7-83f8-45225bc93986",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Is there a reason why we have all this naming logic?",
        "createdAt" : "2019-09-23T21:00:39Z",
        "updatedAt" : "2019-11-13T19:20:03Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "3c73b169-d121-4f6f-b22f-0f716bb6a400",
        "parentId" : "947f1300-2bd3-43a7-83f8-45225bc93986",
        "authorId" : "e61d770a-e328-41b4-b8c3-6a769370680c",
        "body" : "Need to create a temporary name w/o creating the file on file system (as that will be created by `mkfifo` command). I couldn't find an existing utility to do this.\r\n\r\nAnother option will be to create a temp file, then delete it and then use that name. Let me know what you think.",
        "createdAt" : "2019-09-24T17:23:09Z",
        "updatedAt" : "2019-11-13T19:20:03Z",
        "lastEditedBy" : "e61d770a-e328-41b4-b8c3-6a769370680c",
        "tags" : [
        ]
      }
    ],
    "commit" : "15b114fbc5d4daf7752c806b84c628f7f2269390",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +292,296 @@        String tmpDir = System.getProperty(\"java.io.tmpdir\");\n        String fifoName = \"fifo-\" + n + \".tmp\";\n        File fifo = new File(tmpDir, fifoName);\n        Thread producerThread = null;\n        try {"
  },
  {
    "id" : "251e2674-d28c-47a6-9a49-35b9ff5499b5",
    "prId" : 7208,
    "prUrl" : "https://github.com/apache/kafka/pull/7208#pullrequestreview-296420981",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "971a4532-7076-4090-b2ec-4f1f25df8b46",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Is this command guaranteed to be available in every system? We may want to make it conditional if not. Or perhaps there's another way to test this that doesn't involve using an external command?",
        "createdAt" : "2019-09-28T23:58:56Z",
        "updatedAt" : "2019-11-13T19:20:03Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "6a12730d-22fb-41fa-86bb-d6fd04953953",
        "parentId" : "971a4532-7076-4090-b2ec-4f1f25df8b46",
        "authorId" : "e61d770a-e328-41b4-b8c3-6a769370680c",
        "body" : "This is part of `Gnu coreutils`. So if you can do things like `ls`, `cat` or `echo`, you should be able to run `mkfifo` too. \r\n\r\nHere are list of coreutils command: https://en.wikipedia.org/wiki/List_of_GNU_Core_Utilities_commands",
        "createdAt" : "2019-10-02T17:59:20Z",
        "updatedAt" : "2019-11-13T19:20:03Z",
        "lastEditedBy" : "e61d770a-e328-41b4-b8c3-6a769370680c",
        "tags" : [
        ]
      }
    ],
    "commit" : "15b114fbc5d4daf7752c806b84c628f7f2269390",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +295,299 @@        Thread producerThread = null;\n        try {\n            Process mkFifoCommand = new ProcessBuilder(\"mkfifo\", fifo.getCanonicalPath()).start();\n            mkFifoCommand.waitFor();\n"
  },
  {
    "id" : "1ebd69c4-0aba-4ac9-b7f6-88ac11deee34",
    "prId" : 8588,
    "prUrl" : "https://github.com/apache/kafka/pull/8588#pullrequestreview-410395410",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb451259-ce83-4a32-a5f9-604d2845cb1a",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "req: Please add a test for the case where no other set is passed in, since it is not clear from the signature how the method should behave when only one set is passed in.",
        "createdAt" : "2020-05-12T08:04:33Z",
        "updatedAt" : "2020-05-14T01:51:44Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "64a5f565-ebaf-417c-b6ba-db61dc91b06c",
        "parentId" : "eb451259-ce83-4a32-a5f9-604d2845cb1a",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Added a bunch more tests in this spirit. They all passed (whew!). It's a good idea; thanks.",
        "createdAt" : "2020-05-12T20:26:10Z",
        "updatedAt" : "2020-05-14T01:51:44Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cf8316444c205ea04f6fa0874619451f5b94d92",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +640,644 @@        assertThat(intersection.getClass(), equalTo(TreeSet.class));\n    }\n\n    @Test\n    public void testIntersectionOfOne() {"
  }
]