[
  {
    "id" : "9ced6d95-679d-474f-a083-d69acc9730f0",
    "prId" : 6714,
    "prUrl" : "https://github.com/apache/kafka/pull/6714#pullrequestreview-249032156",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d73995e7-8188-4e24-a0ca-227e1adc36ef",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Nice cleanup here!",
        "createdAt" : "2019-06-12T21:44:19Z",
        "updatedAt" : "2019-07-26T04:38:45Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab085e9764aa35dece48891a8d707b743b5bf711",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +96,100 @@    private DummyCoordinator coordinator;\n\n    private final String memberId = \"memberId\";\n    private final String leaderId = \"leaderId\";\n    private final int defaultGeneration = -1;"
  },
  {
    "id" : "2797f1f2-9012-45d2-b15d-a45a7eb75ac0",
    "prId" : 7347,
    "prUrl" : "https://github.com/apache/kafka/pull/7347#pullrequestreview-290051861",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ee6e911-7bfb-48ca-8f72-a2ae23aa8bf8",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "In this test, you verify if you register the metrics with the correct name, but you do not verify if the `MeasureableStat`s are correct. Similar is true for the `ConsumerCoordinatorTest`.  You can find an example of how to verify that in `StreamsMetricsImplTest#shouldAddAmountRateAndSum()`.",
        "createdAt" : "2019-09-18T00:26:15Z",
        "updatedAt" : "2019-09-21T00:48:46Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "7e28a53f-078b-46af-a386-8e76ed92fb0b",
        "parentId" : "1ee6e911-7bfb-48ca-8f72-a2ae23aa8bf8",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I think I agree with you. But looking at the other unit tests I think instead of adding the logic of test recording behavior in a single `testMetrics` we'd better adding the logic in each individual test case, e.g. during different rebalance scenarios test failed-rebalance and callback trigger rates, etc. And it should be a rather big effort adding this coverage in different modules.\r\n\r\nHow about I create a JIRA ticket for doing this as a separate task?",
        "createdAt" : "2019-09-18T01:56:27Z",
        "updatedAt" : "2019-09-21T00:48:46Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "137aebb3-798e-4742-9b40-456cf40b2c0e",
        "parentId" : "1ee6e911-7bfb-48ca-8f72-a2ae23aa8bf8",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "I am not sure if I completely follow what your are saying. Looking again at the code, I think, it would suffice to pass a mock `Metrics` object to `AbstractCoordinator`. The mock would return a `Sensor` mock for a call to `sensor()`, with which you can verify if the parameter passed to `add()` is an object of class `Avg` (or whatever `MeasurableStat` is used). This should be possible with `PowerMock`. We have to use `PowerMock` since `Sensor` is `final`.\r\n\r\nIf you think, it is too much work given the upcoming release, I am fine with creating a Jira and postpone.   ",
        "createdAt" : "2019-09-18T15:42:02Z",
        "updatedAt" : "2019-09-21T00:48:46Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "d17799bf-9551-492c-8177-50bf4cceceda",
        "parentId" : "1ee6e911-7bfb-48ca-8f72-a2ae23aa8bf8",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Yes, I'm thinking about using `MockMetricsReporter`, e.g. the pattern in `KafkaStreamsTest#testInitializesAndDestroysMetricsReporters`. What I was saying is that I'd like to just add this checking logic in each of the existing test function than doing that in a single `testMetrics` function for all scenarios, e.g. different patterns of rebalance failures where `failed-rebalance` should be recorded -- basically each test function within `ConsumerCoordinatorTest` that described a normal or abnormal path. And looking at other modules that have an embedded metrics model, we actually do not test whether the recording behavior is expected as-is or not in most of them, and I think having a single task of adding such test coverage on all such modules by:\r\n\r\n1) using a mock metrics reporter,\r\n2) check the corresponding metrics are correctly recorded under different scenarios.\r\n\r\nAnd it would touch on Selector, Sender, ConsumerNetworkClient, Fetcher, Abstract/ConsumerCoordinator, NetworkClient which all have a corresponding `XXXTest` but they do not have metrics recording in place.",
        "createdAt" : "2019-09-18T16:34:45Z",
        "updatedAt" : "2019-09-21T00:48:46Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "89dc784c146b285afe3d52bd19ed6b6ddbad7434",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +147,151 @@\n    @Test\n    public void testMetrics() {\n        setupCoordinator();\n"
  },
  {
    "id" : "e904d52c-d1d7-4946-9f8c-f09ec76262d8",
    "prId" : 7347,
    "prUrl" : "https://github.com/apache/kafka/pull/7347#pullrequestreview-291441949",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "097918ba-ad0e-402c-bb70-ea0ba1ade9b3",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Should we `assertNull` for all three before anything is recorded to check that they are created lazily? (similar below)",
        "createdAt" : "2019-09-20T23:19:23Z",
        "updatedAt" : "2019-09-21T00:48:46Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "a4bfa5a0-7b94-409e-afc4-bf5a47c05281",
        "parentId" : "097918ba-ad0e-402c-bb70-ea0ba1ade9b3",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Also, does the below `assertEquals` not subsume the `assortNotNull` ? Seems redundant to check for not-null first.",
        "createdAt" : "2019-09-20T23:20:43Z",
        "updatedAt" : "2019-09-21T00:48:46Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "b11cbe18-7b00-4acd-aecb-d61c8168a7da",
        "parentId" : "097918ba-ad0e-402c-bb70-ea0ba1ade9b3",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "The metrics are actually created eagerly :) And ack on the ordering of the record calls.",
        "createdAt" : "2019-09-21T00:45:51Z",
        "updatedAt" : "2019-09-21T00:48:46Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "89dc784c146b285afe3d52bd19ed6b6ddbad7434",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +152,156 @@        assertNotNull(getMetric(\"heartbeat-response-time-max\"));\n        assertNotNull(getMetric(\"heartbeat-rate\"));\n        assertNotNull(getMetric(\"heartbeat-total\"));\n        assertNotNull(getMetric(\"last-heartbeat-seconds-ago\"));\n        assertNotNull(getMetric(\"join-time-avg\"));"
  },
  {
    "id" : "c8a1a1cb-594e-4a95-bb60-bf943ccde079",
    "prId" : 7347,
    "prUrl" : "https://github.com/apache/kafka/pull/7347#pullrequestreview-291441726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12353df7-5607-4539-8c98-d5ccfbea918f",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why is rate `0.1d` ?",
        "createdAt" : "2019-09-20T23:23:18Z",
        "updatedAt" : "2019-09-21T00:48:46Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "42c180fd-1edc-40ba-a2b9-48c6a4901acb",
        "parentId" : "12353df7-5607-4539-8c98-d5ccfbea918f",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is dependent on the window size: the rate value is calculated by the current count and the elapsed time proportional to the window size.",
        "createdAt" : "2019-09-21T00:42:40Z",
        "updatedAt" : "2019-09-21T00:48:46Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "89dc784c146b285afe3d52bd19ed6b6ddbad7434",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +175,179 @@\n        assertEquals(6.0d, getMetric(\"heartbeat-response-time-max\").metricValue());\n        assertEquals(0.1d, getMetric(\"heartbeat-rate\").metricValue());\n        assertEquals(3.0d, getMetric(\"heartbeat-total\").metricValue());\n"
  },
  {
    "id" : "891b6916-e84a-49cc-9a65-c484c6c9f0ec",
    "prId" : 7451,
    "prUrl" : "https://github.com/apache/kafka/pull/7451#pullrequestreview-298467425",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a593062-bd37-4694-baee-965af83ce12f",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This test fix is piggy-backed, we should check that the generation is unknown instead of only testing the id itself is -1.",
        "createdAt" : "2019-10-07T23:36:49Z",
        "updatedAt" : "2019-10-08T21:56:48Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6bae4d94b47a17569f11cfe185d630bcc68d347e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +414,418 @@        assertEquals(Errors.UNKNOWN_MEMBER_ID.message(), future.exception().getMessage());\n        assertTrue(coordinator.rejoinNeededOrPending());\n        assertTrue(coordinator.hasUnknownGeneration());\n    }\n"
  },
  {
    "id" : "9aac5f9b-8b78-4621-864c-b6d115b31ea4",
    "prId" : 7897,
    "prUrl" : "https://github.com/apache/kafka/pull/7897#pullrequestreview-338382327",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bb50f4c-dd62-45cf-a9bd-a5003ea2f044",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "This file only contains clean-ups.",
        "createdAt" : "2020-01-05T06:05:32Z",
        "updatedAt" : "2020-01-14T20:20:27Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "943bdf3604b662dfd20e7cfd586ada10e3412bc8",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +277,281 @@    public void testGroupMaxSizeExceptionIsFatal() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(mockTime.timer(0));\n"
  },
  {
    "id" : "517d9b63-8821-4091-9a01-e4a5b98382ab",
    "prId" : 8324,
    "prUrl" : "https://github.com/apache/kafka/pull/8324#pullrequestreview-378879310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9136c7f-7df6-4db5-af00-5180c5942d8c",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Just side cleanups starting L700",
        "createdAt" : "2020-03-21T01:19:38Z",
        "updatedAt" : "2020-03-21T01:31:22Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fccb32033c53fb3be3ea04fc99bb989913722ea",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +698,702 @@            coordinator.ensureActiveGroup();\n            fail(\"Should have woken up from ensureActiveGroup()\");\n        } catch (WakeupException ignored) {\n        }\n"
  },
  {
    "id" : "a62e6511-b995-4b3c-9255-7a9a7ab89d40",
    "prId" : 8405,
    "prUrl" : "https://github.com/apache/kafka/pull/8405#pullrequestreview-388808786",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9edf0e9-90f7-49d5-9671-c661af2bdd5a",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "nit: alignment looks a little off",
        "createdAt" : "2020-04-07T06:10:01Z",
        "updatedAt" : "2020-04-07T17:54:37Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "c44f148e48f1bbed4e5717680b17c2b0b5c53044",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +495,499 @@        TestUtils.waitForCondition(() -> {\n            coordinator.ensureActiveGroup(new MockTime(1L).timer(100L));\n            return !coordinator.heartbeat().hasInflight();\n        },\n            2000,"
  },
  {
    "id" : "9d56b574-7885-491c-b29d-68997910e6f0",
    "prId" : 8702,
    "prUrl" : "https://github.com/apache/kafka/pull/8702#pullrequestreview-417018605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f01e09a3-935b-4760-bb93-a1bed526a11a",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "We could just test `mockTime.sleep(REQUEST_TIMEOUT_MS + 1)` for this case and get rid of `expectedRequestDeadline`",
        "createdAt" : "2020-05-22T00:45:00Z",
        "updatedAt" : "2020-05-22T15:48:58Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "70abbf68-9b94-41b7-b071-c33d66d868b3",
        "parentId" : "f01e09a3-935b-4760-bb93-a1bed526a11a",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "We need to take into account the time that has already passed. I was a little annoyed at having to write `REQUEST_TIMEOUT - rebalanceTimeoutMs - AbstractCoordinator.JOIN_GROUP_TIMEOUT_LAPSE`. A bit annoying either way I guess.",
        "createdAt" : "2020-05-22T15:55:16Z",
        "updatedAt" : "2020-05-22T15:55:16Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "023302f48c3e2b1da07af111f8077d2f84cb466f",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +332,336 @@        assertFalse(consumerClient.poll(future, mockTime.timer(0)));\n\n        mockTime.sleep(expectedRequestDeadline - mockTime.milliseconds() + 1);\n        assertTrue(consumerClient.poll(future, mockTime.timer(0)));\n        assertTrue(future.exception() instanceof DisconnectException);"
  }
]