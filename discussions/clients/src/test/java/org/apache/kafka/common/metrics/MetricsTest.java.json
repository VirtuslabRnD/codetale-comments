[
  {
    "id" : "fe123e9e-a06e-4845-b705-a3cbdf118fa2",
    "prId" : 5341,
    "prUrl" : "https://github.com/apache/kafka/pull/5341#pullrequestreview-135098733",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd7dafff-7eed-4ef1-9d2b-1ac46b2aca87",
        "parentId" : null,
        "authorId" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "body" : "If we get an exception, should we fail the test?",
        "createdAt" : "2018-07-06T16:11:49Z",
        "updatedAt" : "2018-07-06T17:35:26Z",
        "lastEditedBy" : "442b5138-0781-4001-8ac5-0593f2136d1c",
        "tags" : [
        ]
      },
      {
        "id" : "2648f485-7cc2-4049-a379-7770db1f97e3",
        "parentId" : "fd7dafff-7eed-4ef1-9d2b-1ac46b2aca87",
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "The test fails if there is an exception since it verifies that the task is still running.",
        "createdAt" : "2018-07-06T17:36:07Z",
        "updatedAt" : "2018-07-06T17:36:07Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      }
    ],
    "commit" : "44503e88b1cec00d1de51c33f8082846ef1a8a7c",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +729,733 @@                }\n            } catch (Throwable t) {\n                log.error(\"Metric {} failed with exception\", opName, t);\n            }\n        }"
  },
  {
    "id" : "44b05a90-59c0-40f3-82a1-4246287bf614",
    "prId" : 5626,
    "prUrl" : "https://github.com/apache/kafka/pull/5626#pullrequestreview-154726622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d8324ed-90e9-401a-8c1b-415fe936afa2",
        "parentId" : null,
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "Rather than duplicate the whole method, could we convert the existing method into a utility and have two tests which use that? Something like:\r\n```\r\npublic void testSimpleStats() {\r\n    verifyStats(m -> (double) m.metricValue());\r\n}\r\npublic void testDeprecatedMetricValueMethod() {\r\n    verifyStats(KafkaMetric::value);\r\n}\r\nprivate void verifyStats(Function<KafkaMetric, Double> metricValueFunc) {\r\n   // Existing testSimpleStats method modified to apply the function\r\n}\r\n```\r\nWhen we get rid of the deprecated method, we could remove the function and use the method directly. What do you think? \r\n",
        "createdAt" : "2018-09-12T14:57:10Z",
        "updatedAt" : "2018-09-12T18:03:26Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "073db788-8a36-4a0a-a2e7-22987feedb12",
        "parentId" : "8d8324ed-90e9-401a-8c1b-415fe936afa2",
        "authorId" : "915b2f67-05e6-4824-939a-398e7be58870",
        "body" : ":+1: Updated the PR.",
        "createdAt" : "2018-09-12T16:04:24Z",
        "updatedAt" : "2018-09-12T18:03:26Z",
        "lastEditedBy" : "915b2f67-05e6-4824-939a-398e7be58870",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e01d62d9481bfb629400afa8ae6c067b14a00e5",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +841,845 @@     */\n    @Test\n    public void testDeprecatedMetricValueMethod() {\n        verifyStats(KafkaMetric::value);\n    }"
  },
  {
    "id" : "5bd52439-4fb3-43ce-a63c-3231964861ef",
    "prId" : 5974,
    "prUrl" : "https://github.com/apache/kafka/pull/5974#pullrequestreview-180088805",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf7a61db-35bc-45e0-8d81-046497591965",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Maybe worth a sanity assertion before removal of the child sensor? Something like this:\r\n```java\r\nassertTrue(metrics.childrenSensors().get(parent).contains(child));\r\n```",
        "createdAt" : "2018-11-30T00:27:11Z",
        "updatedAt" : "2018-11-30T01:24:09Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "c08811e4-f88f-44c2-94e2-738a601dd885",
        "parentId" : "cf7a61db-35bc-45e0-8d81-046497591965",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "good idea.",
        "createdAt" : "2018-11-30T01:17:33Z",
        "updatedAt" : "2018-11-30T01:24:09Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f6aea2d56592bc19c46f71559c2a1e53dd98764",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +213,217 @@\n        assertEquals(singletonList(child), metrics.childrenSensors().get(parent));\n\n        metrics.removeSensor(\"child\");\n"
  },
  {
    "id" : "f80a267e-ed67-4229-8d39-98bc76ffcf99",
    "prId" : 7057,
    "prUrl" : "https://github.com/apache/kafka/pull/7057#pullrequestreview-265129530",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5b99cda0-98e2-4442-a098-b15b18ed2099",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "nit: ditto here about metric name.",
        "createdAt" : "2019-07-23T01:14:38Z",
        "updatedAt" : "2019-07-23T14:46:09Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5455132f7a4199a7aa1599b01df6c037b3d17615",
    "line" : 176,
    "diffHunk" : "@@ -1,1 +826,830 @@                    break;\n                case TOTAL:\n                    sensor.add(metrics.metricName(\"test.metric.total\", \"total\", tags), new CumulativeSum());\n                    break;\n                case COUNT:"
  },
  {
    "id" : "ad0742fb-64b0-4154-bd15-1d446842e0fc",
    "prId" : 8697,
    "prUrl" : "https://github.com/apache/kafka/pull/8697#pullrequestreview-417236330",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8de1ae9-6067-4b44-8f96-94b4dfad5203",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Trying to build confidence in the `Percentiles` implementation and gauge the accuracy with a more complicated test.\r\nI found it was accurate to within 5% maybe 2/3 or 3/4 of the time, but it seems reasonable to expect it to be accurate to within 10%",
        "createdAt" : "2020-05-22T21:34:46Z",
        "updatedAt" : "2020-05-26T23:33:26Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "3981cd72-76aa-4819-951d-05c42124a01b",
        "parentId" : "c8de1ae9-6067-4b44-8f96-94b4dfad5203",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Let's see...",
        "createdAt" : "2020-05-23T00:59:06Z",
        "updatedAt" : "2020-05-26T23:33:26Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8223ea29b07d9754b28ef4b06e765c66f208863c",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +569,573 @@            double expectedP99 = values.get(p99Index - 1);\n\n            assertEquals(expectedP90, (Double) p90.metricValue(), expectedP90 / 10);\n            assertEquals(expectedP99, (Double) p99.metricValue(), expectedP99 / 10);\n        } catch (AssertionError e) {"
  }
]