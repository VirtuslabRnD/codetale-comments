[
  {
    "id" : "59aa7b16-3811-470e-9404-c92d09427d49",
    "prId" : 5514,
    "prUrl" : "https://github.com/apache/kafka/pull/5514#pullrequestreview-146650875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6eaded15-51df-464e-91a6-314dbedccd11",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Is this relevant to the PR?",
        "createdAt" : "2018-08-15T22:45:39Z",
        "updatedAt" : "2018-08-15T23:54:48Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "54bfa5ab-1e25-4566-b1c9-764b6ccb9a65",
        "parentId" : "6eaded15-51df-464e-91a6-314dbedccd11",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Not directly, but this seemed like a better way to verify an abortable error. We expect `beginTransaction()` to fail regardless whether the error is abortable or fatal.",
        "createdAt" : "2018-08-15T23:02:12Z",
        "updatedAt" : "2018-08-15T23:54:48Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "f67ecb3f6218a07a6a22448140c09c6c89695ffb",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +2465,2469 @@    private void assertAbortableError(Class<? extends RuntimeException> cause) {\n        try {\n            transactionManager.beginCommit();\n            fail(\"Should have raised \" + cause.getSimpleName());\n        } catch (KafkaException e) {"
  },
  {
    "id" : "a04d3ecb-5ee3-468c-9977-cef293b67fa7",
    "prId" : 6883,
    "prUrl" : "https://github.com/apache/kafka/pull/6883#pullrequestreview-248877470",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "729915c8-c2ae-4275-8ed3-7fa2ecbda121",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Reading the `iterator()` code of PriorityQueue, I think three batches are sufficient to expose the randomness of its iterator(). Are there any reasons that you want to have 5, or it's just your favorite magic number?",
        "createdAt" : "2019-06-12T15:50:53Z",
        "updatedAt" : "2019-06-12T16:30:51Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "50eabd8f-c0bd-4e49-9a78-be5ca13f7aef",
        "parentId" : "729915c8-c2ae-4275-8ed3-7fa2ecbda121",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Not really; 5 seemed like a sufficient interesting number to catch this bug and any future regressions. ",
        "createdAt" : "2019-06-12T16:26:16Z",
        "updatedAt" : "2019-06-12T16:30:51Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "14e75b64f3d1d9c82742472b4cee70d85c2e5df5",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +596,600 @@        transactionManager.setProducerIdAndEpoch(producerIdAndEpoch);\n\n        ProducerBatch b1 = writeIdempotentBatchWithValue(transactionManager, tp0, \"1\");\n        ProducerBatch b2 = writeIdempotentBatchWithValue(transactionManager, tp0, \"2\");\n        ProducerBatch b3 = writeIdempotentBatchWithValue(transactionManager, tp0, \"3\");"
  },
  {
    "id" : "a4ee6c01-06fe-4baa-ba5e-66d9890ea57b",
    "prId" : 6997,
    "prUrl" : "https://github.com/apache/kafka/pull/6997#pullrequestreview-269880505",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1710628-44d6-486d-babd-501d4975cc76",
        "parentId" : null,
        "authorId" : "6c4430fc-3795-49d6-9c36-cf6aa694824e",
        "body" : "nit: all of these calls seem to have two spaces before the false",
        "createdAt" : "2019-08-01T21:09:34Z",
        "updatedAt" : "2019-08-01T21:09:34Z",
        "lastEditedBy" : "6c4430fc-3795-49d6-9c36-cf6aa694824e",
        "tags" : [
        ]
      }
    ],
    "commit" : "93f350844be9c391ab375fc9b0c207b4ea4335be",
    "line" : 212,
    "diffHunk" : "@@ -1,1 +1252,1256 @@\n        Future<RecordMetadata> responseFuture = accumulator.append(unauthorizedPartition, time.milliseconds(), \"key\".getBytes(),\n                \"value\".getBytes(), Record.EMPTY_HEADERS, null, MAX_BLOCK_TIMEOUT,  false).future;\n\n        prepareAddPartitionsToTxn(singletonMap(unauthorizedPartition, Errors.TOPIC_AUTHORIZATION_FAILED));"
  }
]