[
  {
    "id" : "59aa7b16-3811-470e-9404-c92d09427d49",
    "prId" : 5514,
    "prUrl" : "https://github.com/apache/kafka/pull/5514#pullrequestreview-146650875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6eaded15-51df-464e-91a6-314dbedccd11",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Is this relevant to the PR?",
        "createdAt" : "2018-08-15T22:45:39Z",
        "updatedAt" : "2018-08-15T23:54:48Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "54bfa5ab-1e25-4566-b1c9-764b6ccb9a65",
        "parentId" : "6eaded15-51df-464e-91a6-314dbedccd11",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Not directly, but this seemed like a better way to verify an abortable error. We expect `beginTransaction()` to fail regardless whether the error is abortable or fatal.",
        "createdAt" : "2018-08-15T23:02:12Z",
        "updatedAt" : "2018-08-15T23:54:48Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "f67ecb3f6218a07a6a22448140c09c6c89695ffb",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +2465,2469 @@    private void assertAbortableError(Class<? extends RuntimeException> cause) {\n        try {\n            transactionManager.beginCommit();\n            fail(\"Should have raised \" + cause.getSimpleName());\n        } catch (KafkaException e) {"
  },
  {
    "id" : "a04d3ecb-5ee3-468c-9977-cef293b67fa7",
    "prId" : 6883,
    "prUrl" : "https://github.com/apache/kafka/pull/6883#pullrequestreview-248877470",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "729915c8-c2ae-4275-8ed3-7fa2ecbda121",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Reading the `iterator()` code of PriorityQueue, I think three batches are sufficient to expose the randomness of its iterator(). Are there any reasons that you want to have 5, or it's just your favorite magic number?",
        "createdAt" : "2019-06-12T15:50:53Z",
        "updatedAt" : "2019-06-12T16:30:51Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "50eabd8f-c0bd-4e49-9a78-be5ca13f7aef",
        "parentId" : "729915c8-c2ae-4275-8ed3-7fa2ecbda121",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Not really; 5 seemed like a sufficient interesting number to catch this bug and any future regressions. ",
        "createdAt" : "2019-06-12T16:26:16Z",
        "updatedAt" : "2019-06-12T16:30:51Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "14e75b64f3d1d9c82742472b4cee70d85c2e5df5",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +596,600 @@        transactionManager.setProducerIdAndEpoch(producerIdAndEpoch);\n\n        ProducerBatch b1 = writeIdempotentBatchWithValue(transactionManager, tp0, \"1\");\n        ProducerBatch b2 = writeIdempotentBatchWithValue(transactionManager, tp0, \"2\");\n        ProducerBatch b3 = writeIdempotentBatchWithValue(transactionManager, tp0, \"3\");"
  },
  {
    "id" : "a4ee6c01-06fe-4baa-ba5e-66d9890ea57b",
    "prId" : 6997,
    "prUrl" : "https://github.com/apache/kafka/pull/6997#pullrequestreview-269880505",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a1710628-44d6-486d-babd-501d4975cc76",
        "parentId" : null,
        "authorId" : "6c4430fc-3795-49d6-9c36-cf6aa694824e",
        "body" : "nit: all of these calls seem to have two spaces before the false",
        "createdAt" : "2019-08-01T21:09:34Z",
        "updatedAt" : "2019-08-01T21:09:34Z",
        "lastEditedBy" : "6c4430fc-3795-49d6-9c36-cf6aa694824e",
        "tags" : [
        ]
      }
    ],
    "commit" : "93f350844be9c391ab375fc9b0c207b4ea4335be",
    "line" : 212,
    "diffHunk" : "@@ -1,1 +1252,1256 @@\n        Future<RecordMetadata> responseFuture = accumulator.append(unauthorizedPartition, time.milliseconds(), \"key\".getBytes(),\n                \"value\".getBytes(), Record.EMPTY_HEADERS, null, MAX_BLOCK_TIMEOUT,  false).future;\n\n        prepareAddPartitionsToTxn(singletonMap(unauthorizedPartition, Errors.TOPIC_AUTHORIZATION_FAILED));"
  },
  {
    "id" : "5ed0e7d1-9889-45bd-b008-f475d6d65560",
    "prId" : 7389,
    "prUrl" : "https://github.com/apache/kafka/pull/7389#pullrequestreview-354845237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b56985e-0383-470b-8011-5af642d2f4d4",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "nit: bumpedEpoch = initialEpoch + 1;",
        "createdAt" : "2020-02-07T06:47:09Z",
        "updatedAt" : "2020-02-15T22:01:39Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe88cc1ea6addd6c8597829bdfa41d9d1d68cef2",
    "line" : 690,
    "diffHunk" : "@@ -1,1 +2928,2932 @@        final long producerId = 13131L;\n        final short initialEpoch = 1;\n        final short bumpedEpoch = 2;\n\n        doInitTransactions(producerId, initialEpoch);"
  },
  {
    "id" : "1031198b-3409-4f74-806c-41e2ca7a9c25",
    "prId" : 7389,
    "prUrl" : "https://github.com/apache/kafka/pull/7389#pullrequestreview-357814514",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c87c538-7148-4253-a6d8-b75949f4a586",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Maybe worth mentioning something about the version range here? I think we are try to test the older path where epoch bump is not permitted.",
        "createdAt" : "2020-02-12T21:56:17Z",
        "updatedAt" : "2020-02-15T22:01:39Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe88cc1ea6addd6c8597829bdfa41d9d1d68cef2",
    "line" : 423,
    "diffHunk" : "@@ -1,1 +2661,2665 @@\n    @Test\n    public void testAbortTransactionAndReuseSequenceNumberOnError() throws InterruptedException {\n        final long pid = 13131L;\n        final short epoch = 1;"
  },
  {
    "id" : "5fb62cd6-89cd-4ae9-89a9-ee63f77c6b89",
    "prId" : 7920,
    "prUrl" : "https://github.com/apache/kafka/pull/7920#pullrequestreview-343507660",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf9accae-6319-4d3f-9f0e-1992572b8779",
        "parentId" : null,
        "authorId" : "cb6f8432-d515-4113-87f8-14e555ab8ed1",
        "body" : "Would you consider using a `long timeout` instead and move this to TestUtils? Perhaps we need this somewhere else too.",
        "createdAt" : "2020-01-15T16:26:29Z",
        "updatedAt" : "2020-01-23T00:20:39Z",
        "lastEditedBy" : "cb6f8432-d515-4113-87f8-14e555ab8ed1",
        "tags" : [
        ]
      },
      {
        "id" : "b554da10-4e96-4754-8095-4dcbedd71ff2",
        "parentId" : "cf9accae-6319-4d3f-9f0e-1992572b8779",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "It's a bit difficult to restructure these test cases with a timeout. Most of the logic is basically \"run the sender until X happens, then verify Y.\" With a timeout, we cannot control the stopping condition.",
        "createdAt" : "2020-01-15T20:42:26Z",
        "updatedAt" : "2020-01-23T00:20:39Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e45a5aec8150398eaec3a4aefaa37a07c65239f",
    "line" : 1902,
    "diffHunk" : "@@ -1,1 +2982,2986 @@    }\n\n    private void runUntil(Supplier<Boolean> condition) {\n        for (int i = 0; i < 5; i++) {\n            if (condition.get())"
  },
  {
    "id" : "f912fc97-f3f2-405f-a43e-95685c2bc889",
    "prId" : 7952,
    "prUrl" : "https://github.com/apache/kafka/pull/7952#pullrequestreview-343584905",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cfecd5ce-dce1-42dc-9736-c69dd259704a",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "The 3 tests here are primarily evaluating that when we are on groupMetadata mode, we could correctly detect `FENCED_INSTANCE_ID`, `UNKNOWN_MEMBER_ID` and `ILLEGAL_GENERATION` exceptions.",
        "createdAt" : "2020-01-15T23:13:11Z",
        "updatedAt" : "2020-01-22T18:43:33Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e81e0daaec396ec5be7cc3d3cc2adae42f242e95",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +948,952 @@\n    @Test\n    public void testFencedInstanceIdInTxnOffsetCommitByGroupMetadata() {\n        final String consumerGroupId = \"consumer\";\n        final long pid = 13131L;"
  },
  {
    "id" : "ab54485f-80fb-4eb7-adb0-27f8c937b2cd",
    "prId" : 7952,
    "prUrl" : "https://github.com/apache/kafka/pull/7952#pullrequestreview-343586307",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20ca0626-be05-4f9b-86f8-0264cf80497e",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "A full test to set all 3 group fields",
        "createdAt" : "2020-01-15T23:20:48Z",
        "updatedAt" : "2020-01-22T18:43:33Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e81e0daaec396ec5be7cc3d3cc2adae42f242e95",
    "line" : 263,
    "diffHunk" : "@@ -1,1 +2295,2299 @@\n    @Test\n    public void testSendOffsetsWithGroupMetadata() {\n        final long pid = 13131L;\n        final short epoch = 1;"
  },
  {
    "id" : "63e3295b-4a25-43c7-8741-8cdb29179979",
    "prId" : 7952,
    "prUrl" : "https://github.com/apache/kafka/pull/7952#pullrequestreview-345024137",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5eda006-c2c2-46ec-9c87-cc8f4d552ff0",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "These test cases seem to be identical code other than the error. Can we factor out a helper?",
        "createdAt" : "2020-01-19T19:01:42Z",
        "updatedAt" : "2020-01-22T18:43:33Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "fd3629f9-9418-453b-9c80-2d18e49424fd",
        "parentId" : "a5eda006-c2c2-46ec-9c87-cc8f4d552ff0",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Actually there are a couple of differences inside the test, such as error type, consumer metadata creation, and request matcher. Probably we could just leave as it is since new readers would just fix one by reading through the whole block",
        "createdAt" : "2020-01-19T20:24:58Z",
        "updatedAt" : "2020-01-22T18:43:33Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "e81e0daaec396ec5be7cc3d3cc2adae42f242e95",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +1033,1037 @@\n    @Test\n    public void testIllegalGenerationInTxnOffsetCommitByGroupMetadata() {\n        final String consumerGroupId = \"consumer\";\n        final long pid = 13131L;"
  },
  {
    "id" : "029cb10b-ad09-40b5-aab4-9ec26149c689",
    "prId" : 8375,
    "prUrl" : "https://github.com/apache/kafka/pull/8375#pullrequestreview-384430114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c805eb7-3558-4369-bae7-cb4aba9d8822",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Extracting all the common parameters for easier test composition, and easier templating for the downgrade test, so that we don't need to carry these redundant messages around.",
        "createdAt" : "2020-03-31T06:20:16Z",
        "updatedAt" : "2020-04-01T01:44:58Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0a4a0a2bf7f08a6f1fb7c1221118246f9180a36",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +120,124 @@    private final TopicPartition tp0 = new TopicPartition(topic, 0);\n    private final TopicPartition tp1 = new TopicPartition(topic, 1);\n    private final long producerId = 13131L;\n    private final short epoch = 1;\n    private final String consumerGroupId = \"myConsumerGroup\";"
  },
  {
    "id" : "c436b3b3-873a-4664-929d-d58dfd134138",
    "prId" : 8375,
    "prUrl" : "https://github.com/apache/kafka/pull/8375#pullrequestreview-384430629",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75ddcd09-11e8-4ad6-be63-cd830b8747f4",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Refactor out the common `prepareGroupMetadataCommit` to simplify the test construction",
        "createdAt" : "2020-03-31T06:21:31Z",
        "updatedAt" : "2020-04-01T01:44:58Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b0a4a0a2bf7f08a6f1fb7c1221118246f9180a36",
    "line" : 1479,
    "diffHunk" : "@@ -1,1 +2008,2012 @@        txnOffsetCommitResponse.put(tp1, Errors.COORDINATOR_LOAD_IN_PROGRESS);\n\n        TransactionalRequestResult addOffsetsResult = prepareGroupMetadataCommit(\n            () -> prepareTxnOffsetCommitResponse(consumerGroupId, producerId,\n                epoch, groupInstanceId, memberId, generationId, txnOffsetCommitResponse));"
  }
]