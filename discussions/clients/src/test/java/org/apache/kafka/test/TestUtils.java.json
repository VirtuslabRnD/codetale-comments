[
  {
    "id" : "d1f0e6e0-4c09-4c6f-b158-9080d809c2cb",
    "prId" : 6778,
    "prUrl" : "https://github.com/apache/kafka/pull/6778#pullrequestreview-242055144",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "293762af-f7dd-4518-a4b9-3e0d134e2c31",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Looks like we could use this for a lot of refactoring :)",
        "createdAt" : "2019-05-26T21:16:01Z",
        "updatedAt" : "2019-06-19T00:38:37Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8440e7defc7a3b3c0fa6c378969b33035ad1a21d",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +436,440 @@    }\n\n    public static <T> Set<T> toSet(Collection<T> collection) {\n        return new HashSet<>(collection);\n    }"
  },
  {
    "id" : "e9736004-18c8-4718-8b0e-347943141129",
    "prId" : 7488,
    "prUrl" : "https://github.com/apache/kafka/pull/7488#pullrequestreview-301920449",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4263ebf1-42db-4e1f-b37b-2b9e2f45ea29",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "IMHO it seems we may be susceptible to a hanging test here.  Should we change the condition of the `while` loop from to have a check that the `expectedEnd ` has elapsed?",
        "createdAt" : "2019-10-11T17:39:46Z",
        "updatedAt" : "2019-10-11T19:52:26Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "7b0616ee-18f1-421b-8617-cf485b21126d",
        "parentId" : "4263ebf1-42db-4e1f-b37b-2b9e2f45ea29",
        "authorId" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "body" : "I don't want to put the condition in the while condition expression because I want to be sure the test runs at least once. I could add a separate boolean to check if we've run once, but don't want to overcomplicate it if not needed. I'm not sure why there is a risk of hanging?\r\n\r\nWe always hit runnable.call. Assuming it doesn't hang itself (which we can't do anything about, short of spinning up another thread), it will do one of:\r\n\r\n1. Return successfully, in which case the whole function returns.\r\n2. Throws an Exception, in which case we test if the timeout has expired and a) rethrow if it has or b) sleep and retest if it has not.\r\n3. Throws an Assertion error, in which case we handled it the same way as 2.\r\n4. Throws an Error, in which case the we also unwind the stack, just without rethrowing.\r\n\r\nLet me know if I missed a case. Thanks!\r\n",
        "createdAt" : "2019-10-11T19:00:51Z",
        "updatedAt" : "2019-10-11T19:52:26Z",
        "lastEditedBy" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "tags" : [
        ]
      },
      {
        "id" : "4bd08c55-e997-4819-b681-26e6144dd606",
        "parentId" : "4263ebf1-42db-4e1f-b37b-2b9e2f45ea29",
        "authorId" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "body" : "Also looking at it again, we would need to keep ahold of the last exception to be able to rethrow it when we exit the while loop - in fact that could act like our boolean. Still, I would prefer to keep this simple if possible. Please do let me know if I missed something in my analysis. Thanks again for the review!",
        "createdAt" : "2019-10-11T19:08:05Z",
        "updatedAt" : "2019-10-11T19:52:26Z",
        "lastEditedBy" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "tags" : [
        ]
      },
      {
        "id" : "3c3cc50d-21af-4ae1-b89e-bb9158ff0e67",
        "parentId" : "4263ebf1-42db-4e1f-b37b-2b9e2f45ea29",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Thanks for the detailed explanation, SGTM",
        "createdAt" : "2019-10-15T13:47:15Z",
        "updatedAt" : "2019-10-15T13:47:15Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "93c5a5b42b4ca8672407c34fbba57c2a184ca97d",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +413,417 @@        final long expectedEnd = System.currentTimeMillis() + timeoutMs;\n\n        while (true) {\n            try {\n                runnable.call();"
  },
  {
    "id" : "1bf9bee8-539d-4490-a019-f81fa8fd2677",
    "prId" : 7548,
    "prUrl" : "https://github.com/apache/kafka/pull/7548#pullrequestreview-303583085",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "88e62c5c-1941-4c4b-9717-281d94c3c749",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "nit: the method is named `retryOnExceptionWithTimeout` but it will always throw with the `NoRetryException`.  Should the name of the method change to something like `maybeRetryOnExceptionWithTimeout",
        "createdAt" : "2019-10-17T22:32:02Z",
        "updatedAt" : "2019-10-23T19:32:22Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d2a41f690610f4c6eddfe70afae2acd7c058c76a",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +417,421 @@                runnable.call();\n                return;\n            } catch (final NoRetryException e) {\n                throw e;\n            } catch (final AssertionError t) {"
  },
  {
    "id" : "fcdc4c67-1544-4e5a-9aca-da90cfe68ba1",
    "prId" : 8541,
    "prUrl" : "https://github.com/apache/kafka/pull/8541#pullrequestreview-399543456",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f121df1c-aced-470b-8ebb-7edadb530500",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This is pointless unless we evaluate it inside the lambda.",
        "createdAt" : "2020-04-23T23:24:40Z",
        "updatedAt" : "2020-04-28T03:20:48Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "d58f62dc73dc3f4832cb89b5be6a8c8ce2f32e60",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +364,368 @@        retryOnExceptionWithTimeout(maxWaitMs, () -> {\n            String conditionDetailsSupplied = conditionDetailsSupplier != null ? conditionDetailsSupplier.get() : null;\n            String conditionDetails = conditionDetailsSupplied != null ? conditionDetailsSupplied : \"\";\n            assertThat(\"Condition not met within timeout \" + maxWaitMs + \". \" + conditionDetails,\n                testCondition.conditionMet());"
  },
  {
    "id" : "2a435d4d-9db8-4b4b-8918-529e49350904",
    "prId" : 10218,
    "prUrl" : "https://github.com/apache/kafka/pull/10218#pullrequestreview-632231938",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f247dd5d-bd8b-41f3-b669-00a0c16f6f2f",
        "parentId" : null,
        "authorId" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "body" : "Here is a slightly simpler version:\r\n```\r\n while (iterator1.hasNext() && iterator2.hasNext()) {\r\n     if (!Objects.equals(iterator1.next(), iterator2.next())) {\r\n            return false;\r\n    }\r\n}\r\n\r\nreturn !iterator1.hasNext() && !iterator2.hasNext();\r\n```",
        "createdAt" : "2021-04-09T02:14:20Z",
        "updatedAt" : "2021-04-12T01:01:13Z",
        "lastEditedBy" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "tags" : [
        ]
      },
      {
        "id" : "95cd9cda-7640-4cbe-930a-a5c0a4917423",
        "parentId" : "f247dd5d-bd8b-41f3-b669-00a0c16f6f2f",
        "authorId" : "403b8bdd-d152-4255-86a7-0bdb3d2b40a5",
        "body" : "IMHO, existing code looks easy to read/comprehend, and no multiple calls to hasNext().\r\nHow about the below code after removing inline variables in the existing code?\r\n\r\n```\r\nwhile (iterator1.hasNext()) {\r\n    if (!iterator2.hasNext()) {\r\n        return false;\r\n    }\r\n\r\n    if (!Objects.equals(iterator1.next(), iterator2.next())) {\r\n        return false;\r\n    }\r\n}\r\n\r\nreturn !iterator2.hasNext();\r\n```",
        "createdAt" : "2021-04-09T08:42:52Z",
        "updatedAt" : "2021-04-12T01:01:13Z",
        "lastEditedBy" : "403b8bdd-d152-4255-86a7-0bdb3d2b40a5",
        "tags" : [
        ]
      },
      {
        "id" : "334b30b2-5ea3-4453-ac59-cc5753bc1fa4",
        "parentId" : "f247dd5d-bd8b-41f3-b669-00a0c16f6f2f",
        "authorId" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "body" : "Sounds good",
        "createdAt" : "2021-04-09T09:40:59Z",
        "updatedAt" : "2021-04-12T01:01:13Z",
        "lastEditedBy" : "b4f52e78-c19e-46b4-b486-6da86e32e687",
        "tags" : [
        ]
      }
    ],
    "commit" : "f854442400aaeb73fb4781a4dd741e5f145c8fac",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +545,549 @@     * @param <T>       type of element in the iterators.\n     */\n    public static <T> boolean sameElementsWithOrder(Iterator<T> iterator1,\n                                                    Iterator<T> iterator2) {\n        while (iterator1.hasNext()) {"
  }
]