[
  {
    "id" : "31eb071e-879b-4bcf-ad13-af502159d766",
    "prId" : 5582,
    "prUrl" : "https://github.com/apache/kafka/pull/5582#pullrequestreview-163913547",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ed992c0-2059-44bc-9f6b-827939fadd2d",
        "parentId" : null,
        "authorId" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "body" : "why?",
        "createdAt" : "2018-10-10T10:56:47Z",
        "updatedAt" : "2018-10-25T19:47:00Z",
        "lastEditedBy" : "b4936a15-698a-496e-85a1-b1e229b4986b",
        "tags" : [
        ]
      },
      {
        "id" : "bc9a5ff7-e8ff-469a-9f66-6618e7529967",
        "parentId" : "8ed992c0-2059-44bc-9f6b-827939fadd2d",
        "authorId" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "body" : "Good question!  There was a comment above that method that stated:\r\n```\r\n        // Check that we can serialize, deserialize and serialize again\r\n        // We don't check for equality or hashCode because it is likely to fail for any response containing a HashMap\r\n```\r\n I didn't think about it much; I just read that comment and figured that since I'm making a change to `SaslAuthenticateRequest` and `SaslAuthenticateResponse` and they don't contain a `HashMap` I could -- and should -- test for equality and hashCode.\r\n\r\nBut now that you ask, and I do spend the time to think about it, it seems that testing equality and hashCode doesn't provide the value I thought it would (and that the comment seemed to imply that it would except for the annoying tendency of a HashMap to screw up the results)!  All we would be testing for is to make sure the result of serializing a request to a `Struct` can be deserialized back to a request and then serialized again to an equivalent `Struct`.  In other words, it doesn't actually test that the serialization code (i.e. `SaslAuthenticateResponse.toStruct()`) is working perfectly -- the equality and hashCode tests will still succeed even if that code serializes a field incorrectly because the same field will be serialized incorrectly both times (for example).\r\n\r\nNote that incorrect serialization would presumably be caught indirectly via failure of other unit or integration tests.\r\n\r\nWhat maybe has to change here is the original comment.  Should I adjusted it?",
        "createdAt" : "2018-10-11T16:49:37Z",
        "updatedAt" : "2018-10-25T19:47:00Z",
        "lastEditedBy" : "e0554c25-f6f3-4e49-a325-bcc5d4dc5fb2",
        "tags" : [
        ]
      }
    ],
    "commit" : "9c30b80b2b29b7f5c86af21fd19fc520cfe798db",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +355,359 @@    private void checkRequest(AbstractRequest req, boolean checkEqualityAndHashCode) throws Exception {\n        // Check that we can serialize, deserialize and serialize again\n        // Check for equality and hashCode only if indicated\n        Struct struct = req.toStruct();\n        AbstractRequest deserialized = (AbstractRequest) deserialize(req, struct, req.version());"
  },
  {
    "id" : "aa17e73c-a9f3-40f3-b4aa-4a15d1eef4ed",
    "prId" : 6247,
    "prUrl" : "https://github.com/apache/kafka/pull/6247#pullrequestreview-205881739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "23b9dbf8-d98a-43ab-9157-daf7f88c4c94",
        "parentId" : null,
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "nit: Is there any reason to not use what you normally would when building the request - e.g `AlterConfigOp.OpType.APPEND.id()` ?",
        "createdAt" : "2019-02-18T13:26:57Z",
        "updatedAt" : "2019-04-13T16:04:28Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      },
      {
        "id" : "4ba2551e-8403-41aa-ab19-552d886cea70",
        "parentId" : "23b9dbf8-d98a-43ab-9157-daf7f88c4c94",
        "authorId" : "915b2f67-05e6-4824-939a-398e7be58870",
        "body" : "Thus is just to verify request serialization . Also we need to update import-control .xml to use AlterConfigOp here.",
        "createdAt" : "2019-02-19T16:23:02Z",
        "updatedAt" : "2019-04-13T16:04:28Z",
        "lastEditedBy" : "915b2f67-05e6-4824-939a-398e7be58870",
        "tags" : [
        ]
      },
      {
        "id" : "7390e313-ddda-4441-9dc4-75b0bb84fbe1",
        "parentId" : "23b9dbf8-d98a-43ab-9157-daf7f88c4c94",
        "authorId" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "body" : "Makes sense",
        "createdAt" : "2019-02-20T17:00:55Z",
        "updatedAt" : "2019-04-13T16:04:28Z",
        "lastEditedBy" : "df911192-d6c6-4af9-8568-f67bf2dcf926",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf81f6c6e266fe058527609c60fb163035b70509",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +1491,1495 @@        AlterableConfig alterableConfig = new AlterableConfig()\n                .setName(\"retention.ms\")\n                .setConfigOperation((byte) 0)\n                .setValue(\"100\");\n        AlterableConfigSet alterableConfigs = new AlterableConfigSet();"
  },
  {
    "id" : "fee9f1bc-7ecd-4379-a339-dc24ae8eb527",
    "prId" : 7062,
    "prUrl" : "https://github.com/apache/kafka/pull/7062#pullrequestreview-264340123",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7db39d62-2274-45f4-af2e-b59fa2776fd5",
        "parentId" : null,
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Do you think this test case has much value? I'd be inclined to get rid of it.",
        "createdAt" : "2019-07-17T18:29:08Z",
        "updatedAt" : "2019-07-30T01:51:57Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "bd5996f9-20c4-4c5b-b7a5-370eb1e0d73a",
        "parentId" : "7db39d62-2274-45f4-af2e-b59fa2776fd5",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "I think it's ok to maintain a test on the `toString()` behavior",
        "createdAt" : "2019-07-19T17:32:07Z",
        "updatedAt" : "2019-07-30T01:51:57Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8dd41a80739afc0801faae02e70aecedfbc0b75",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +734,738 @@        String allTopicPartitionsString = OffsetFetchRequest.Builder.allTopicPartitions(\"someGroup\").toString();\n\n        assertTrue(allTopicPartitionsString.contains(\"groupId='someGroup', topics=null\"));\n        String string = new OffsetFetchRequest.Builder(\"group1\",\n            Collections.singletonList(new TopicPartition(\"test11\", 1))).toString();"
  }
]