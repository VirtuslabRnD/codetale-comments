[
  {
    "id" : "71f30150-34fd-411e-94d1-ac007e46ba5e",
    "prId" : 906,
    "prUrl" : "https://github.com/zio/zio/pull/906#pullrequestreview-242412166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec4f2a04-563f-40fc-b02a-cef00166f563",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Love all the new tests! ‚ù§Ô∏è ",
        "createdAt" : "2019-05-28T00:56:59Z",
        "updatedAt" : "2019-05-30T05:49:02Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      }
    ],
    "commit" : "44ae7f2dfc7bc4b8032b26d5fe4a7d4031e05819",
    "line" : 305,
    "diffHunk" : "@@ -1,1 +409,413 @@  }\n\n  private def flatMapParFinalizerOrdering = unsafeRun {\n    for {\n      execution <- Ref.make[List[String]](Nil)"
  },
  {
    "id" : "842a1808-3490-46f8-b67f-1a5e8637ae77",
    "prId" : 893,
    "prUrl" : "https://github.com/zio/zio/pull/893#pullrequestreview-241893198",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2c73c89-cb68-41ab-8699-4a94c29e1830",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "I'm only starting to see how awesome this API is üòç ",
        "createdAt" : "2019-05-24T18:25:41Z",
        "updatedAt" : "2019-05-25T04:53:00Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "3649425e-db15-4fbb-be30-5e6e0ed25096",
        "parentId" : "e2c73c89-cb68-41ab-8699-4a94c29e1830",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Going to be even nicer with the upcoming restructuring around `ZManaged` :-)",
        "createdAt" : "2019-05-24T18:42:10Z",
        "updatedAt" : "2019-05-25T04:53:00Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "aee42bed96e0ee3451dfab0908e18109ddd54f37",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +624,628 @@      Stream(1, 2, 3)\n        .spaced(Schedule.recurs(1))\n        .run(Sink.collect[Int])\n        .map(_ must_=== List(1, 1, 2, 2, 3, 3))\n    )"
  },
  {
    "id" : "44120548-cba8-4103-911a-885734d9e26a",
    "prId" : 789,
    "prUrl" : "https://github.com/zio/zio/pull/789#pullrequestreview-234391381",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a7e3860-1626-4d42-93ee-e2e4c67600a5",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "This is an important test for verifying that buffering does not affect the stream semantics, so it's good that we have it. \r\n\r\nLet's now add one that exercises the point of buffering: allowing a fast producer to make progress independently of a slow consumer. This can be done by using a stream that adds elements to a `Ref[List[Int]]` before a buffer, and has a `mapM(_ => IO.never)` after the buffer. Let me know if you need any help with that.",
        "createdAt" : "2019-05-04T11:04:38Z",
        "updatedAt" : "2019-05-10T05:40:05Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "4522dea1-1631-4a2f-870c-17de7b269ee0",
        "parentId" : "8a7e3860-1626-4d42-93ee-e2e4c67600a5",
        "authorId" : "7e3942e8-574e-4098-a8e1-89fffa0c877d",
        "body" : "Thank you @iravid for the review comments. Will let you know, if any help needed.",
        "createdAt" : "2019-05-04T17:03:22Z",
        "updatedAt" : "2019-05-10T05:40:05Z",
        "lastEditedBy" : "7e3942e8-574e-4098-a8e1-89fffa0c877d",
        "tags" : [
        ]
      },
      {
        "id" : "9cd017da-b911-4024-b06f-588df6abafbc",
        "parentId" : "8a7e3860-1626-4d42-93ee-e2e4c67600a5",
        "authorId" : "7e3942e8-574e-4098-a8e1-89fffa0c877d",
        "body" : "Fixed",
        "createdAt" : "2019-05-07T08:57:02Z",
        "updatedAt" : "2019-05-10T05:40:05Z",
        "lastEditedBy" : "7e3942e8-574e-4098-a8e1-89fffa0c877d",
        "tags" : [
        ]
      }
    ],
    "commit" : "b353c9ae57a491f2ecd6278fe63283dcf749b8d2",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +537,541 @@  }\n\n  private def bufferStream = prop { list: List[Int] =>\n    unsafeRunSync(\n      Stream"
  }
]