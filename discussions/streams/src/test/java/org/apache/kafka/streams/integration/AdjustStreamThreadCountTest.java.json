[
  {
    "id" : "8c4cfa4a-e5f5-48bb-8e7e-746c0e23cb96",
    "prId" : 9615,
    "prUrl" : "https://github.com/apache/kafka/pull/9615#pullrequestreview-537699854",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e875ff3-9247-43f9-901c-de5fa0ca3ff3",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "We should wait for the new stream thread with a timeout, otherwise we risk that this test may become flaky.",
        "createdAt" : "2020-11-24T11:11:22Z",
        "updatedAt" : "2020-12-03T19:19:50Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "71388bed-4941-435a-9d2f-a433199cc2a8",
        "parentId" : "1e875ff3-9247-43f9-901c-de5fa0ca3ff3",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "we can wait for it to be added to the thread meta data. I assume that is what you mean",
        "createdAt" : "2020-11-24T16:36:04Z",
        "updatedAt" : "2020-12-03T19:19:50Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "af3e5674f77037796801afcd445e126c1aa7f6b0",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +104,108 @@                \"Wait for the thread to be added\"\n            );\n            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount + 1));\n            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));\n            TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");"
  },
  {
    "id" : "e544cd57-b800-4ce1-83f9-198ebc7a8941",
    "prId" : 9615,
    "prUrl" : "https://github.com/apache/kafka/pull/9615#pullrequestreview-542479050",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3c1268a-6c3b-457c-983e-f6e1d58ef335",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Can we also assert that the state gets to `RUNNING` after the new thread has joined",
        "createdAt" : "2020-12-02T03:56:01Z",
        "updatedAt" : "2020-12-03T19:19:50Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "af3e5674f77037796801afcd445e126c1aa7f6b0",
    "line" : 109,
    "diffHunk" : "@@ -1,1 +107,111 @@            assertThat(kafkaStreams.localThreadsMetadata().stream().map(t -> t.threadName().split(\"-StreamThread-\")[1]).sorted().toArray(), equalTo(new String[] {\"1\", \"2\", \"3\"}));\n            TestUtils.waitForCondition(() -> kafkaStreams.state() == KafkaStreams.State.RUNNING, \"wait for running\");\n        }\n    }\n}"
  },
  {
    "id" : "01fc5133-c5a9-4959-8aee-b755ab234a53",
    "prId" : 9695,
    "prUrl" : "https://github.com/apache/kafka/pull/9695#pullrequestreview-545266493",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18eb2939-1682-4dee-a974-3c3fba998a3e",
        "parentId" : null,
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "This makes sure that the names are reused correctly and that adding add removing continuously do not cause problems",
        "createdAt" : "2020-12-04T20:41:58Z",
        "updatedAt" : "2021-01-07T20:08:37Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0ebbdbc44ffe154d5bff5ef93ec3d16748b380c",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +165,169 @@\n    @Test\n    public void shouldAddAndRemoveStreamThreadsWhileKeepingNamesCorrect() throws Exception {\n        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);"
  },
  {
    "id" : "8208632d-34df-4d0e-9ce6-5da56707060d",
    "prId" : 9695,
    "prUrl" : "https://github.com/apache/kafka/pull/9695#pullrequestreview-549170768",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2f8a3d9-53e5-4ffc-820e-c2803126d649",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "You should also verify the return value of `removeStreamThread()` here.",
        "createdAt" : "2020-12-10T14:00:58Z",
        "updatedAt" : "2021-01-07T20:08:37Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0ebbdbc44ffe154d5bff5ef93ec3d16748b380c",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +151,155 @@            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.REBALANCING, DEFAULT_DURATION);\n            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.RUNNING, DEFAULT_DURATION);\n        }\n    }\n"
  },
  {
    "id" : "b4946501-19af-4d42-81e0-9e23ac930871",
    "prId" : 9695,
    "prUrl" : "https://github.com/apache/kafka/pull/9695#pullrequestreview-549170768",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05d24aea-001d-4fd5-9bb2-33869880e2f9",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "Please remove empty line.",
        "createdAt" : "2020-12-10T14:38:55Z",
        "updatedAt" : "2021-01-07T20:08:37Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0ebbdbc44ffe154d5bff5ef93ec3d16748b380c",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +202,206 @@\n            oldThreadCount = kafkaStreams.localThreadsMetadata().size();\n\n            final Optional<String> removedThread = kafkaStreams.removeStreamThread();\n"
  },
  {
    "id" : "e34c066d-c9b9-406b-9cdd-4093644c16ff",
    "prId" : 9695,
    "prUrl" : "https://github.com/apache/kafka/pull/9695#pullrequestreview-563092511",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40d8e8ea-f8a4-41ed-87a4-05b6f7d0b7a2",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Awesome, thanks for adding this test. One small suggestion would be to wait for the client to get back to RUNNING at the end, so we can verify that everything did go smoothly with the add/remove. I think this would be good to do in all of these tests, actually",
        "createdAt" : "2021-01-06T22:53:55Z",
        "updatedAt" : "2021-01-07T20:08:37Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "8f00623d-de79-4c84-85b4-8b91e65c9711",
        "parentId" : "40d8e8ea-f8a4-41ed-87a4-05b6f7d0b7a2",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "good idea",
        "createdAt" : "2021-01-06T22:55:40Z",
        "updatedAt" : "2021-01-07T20:08:37Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0ebbdbc44ffe154d5bff5ef93ec3d16748b380c",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +151,155 @@            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.REBALANCING, DEFAULT_DURATION);\n            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.RUNNING, DEFAULT_DURATION);\n        }\n    }\n"
  },
  {
    "id" : "f549e9e8-6083-48cb-809d-9cf312982b65",
    "prId" : 9695,
    "prUrl" : "https://github.com/apache/kafka/pull/9695#pullrequestreview-563102420",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e90fce78-518a-4912-8fa6-dca28cb912ef",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "One more corner case we should add test coverage for is what happens when we get down to 0 threads. Two things to verify  that I can think of are: (1) that the client stays in RUNNING, and (2) that we can add more threads again after we've been idling with zero threads for a short while (and as always, that it goes into REBALANCING --> RUNNING after adding the threads)",
        "createdAt" : "2021-01-06T22:56:55Z",
        "updatedAt" : "2021-01-07T20:08:37Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "34732201-184e-4e00-986b-36c13b73bced",
        "parentId" : "e90fce78-518a-4912-8fa6-dca28cb912ef",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "Well right now it would not stay in running until https://github.com/apache/kafka/pull/9720/files gets merged. So we can in a follow up PR get that corner case tested. ",
        "createdAt" : "2021-01-06T23:01:41Z",
        "updatedAt" : "2021-01-07T20:08:37Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      },
      {
        "id" : "29d27037-c73f-4d8a-b8f1-52e454ec2f9e",
        "parentId" : "e90fce78-518a-4912-8fa6-dca28cb912ef",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Ah, right. Would it make sense to add this test in the above PR instead? Or something in the middle, you could add the test in this PR and just leave out (1) for now, then add that check in the other PR. ",
        "createdAt" : "2021-01-06T23:05:02Z",
        "updatedAt" : "2021-01-07T20:08:37Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "111533df-585e-46d3-900a-164eca3310e0",
        "parentId" : "e90fce78-518a-4912-8fa6-dca28cb912ef",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "the above PR doesn't have the remove as its in this PR. bit of a circular dependency :)\r\nWe do test that the client stays in running after shutting down some threads. We can add a test to add threads after we shut them down. However I would like to test it with remove thread anyways so if this get merged first I will update the above PR",
        "createdAt" : "2021-01-06T23:20:54Z",
        "updatedAt" : "2021-01-07T20:08:37Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0ebbdbc44ffe154d5bff5ef93ec3d16748b380c",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +126,130 @@\n    @Test\n    public void shouldRemoveStreamThread() throws Exception {\n        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n            StreamsTestUtils.startKafkaStreamsAndWaitForRunningState(kafkaStreams);"
  },
  {
    "id" : "718c1c64-21e1-4ab4-a530-4b864c4334c4",
    "prId" : 9695,
    "prUrl" : "https://github.com/apache/kafka/pull/9695#pullrequestreview-563791587",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8837402-a864-483b-ba84-48a8b661430d",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Ah, sorry I didn't think of this/mention it before, but I think we actually need to wait for a _transition_ to RUNNING, and not just for it to be in the state itself. It probably takes a little while after removing a thread for the rebalance to occur, so it's probably already in RUNNING. Pretty sure there's some other integration test util that watches for the REBALANCING -> RUNNING transition, though",
        "createdAt" : "2021-01-06T23:56:52Z",
        "updatedAt" : "2021-01-07T20:08:38Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "8e5f6521-dcc9-4902-ae39-003828839d76",
        "parentId" : "e8837402-a864-483b-ba84-48a8b661430d",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "ah okay that makes sense ",
        "createdAt" : "2021-01-07T00:39:22Z",
        "updatedAt" : "2021-01-07T20:08:38Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      },
      {
        "id" : "d3568504-5df3-40d7-9173-98c771cf731b",
        "parentId" : "e8837402-a864-483b-ba84-48a8b661430d",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "I didn't see that util but this should work",
        "createdAt" : "2021-01-07T00:48:53Z",
        "updatedAt" : "2021-01-07T20:08:38Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      },
      {
        "id" : "980ee681-a702-4df4-9a0c-a5f43dee0213",
        "parentId" : "e8837402-a864-483b-ba84-48a8b661430d",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Cool, what you did below (`waitForApplicationState` on REBALANCING before RUNNING) looks good. But I think you missed doing that here -- in fact we should probably do a similar thing in all the tests in this class. Can you just give the file a final pass and make sure we verify the REBALANCING -> RUNNING transition in all of the tests?",
        "createdAt" : "2021-01-07T02:49:27Z",
        "updatedAt" : "2021-01-07T20:08:38Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "9793970a-f7ae-4e4d-81be-c202136428f1",
        "parentId" : "e8837402-a864-483b-ba84-48a8b661430d",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "added",
        "createdAt" : "2021-01-07T20:08:43Z",
        "updatedAt" : "2021-01-07T20:08:43Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0ebbdbc44ffe154d5bff5ef93ec3d16748b380c",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +133,137 @@            assertThat(kafkaStreams.localThreadsMetadata().size(), equalTo(oldThreadCount - 1));\n            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.REBALANCING, DEFAULT_DURATION);\n            waitForApplicationState(Collections.singletonList(kafkaStreams), KafkaStreams.State.RUNNING, DEFAULT_DURATION);\n        }\n    }"
  },
  {
    "id" : "18911619-efb2-47ce-82a0-b81f947f0a88",
    "prId" : 9887,
    "prUrl" : "https://github.com/apache/kafka/pull/9887#pullrequestreview-568344005",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe4ee190-c813-41a8-b901-11d08584ea42",
        "parentId" : null,
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "This test case can cause following error if we don't apply this patch.\r\n\r\n```\r\norg.apache.kafka.streams.integration.AdjustStreamThreadCountTest > testConcurrentlyAccessThreads FAILED\r\n    java.lang.AssertionError: expected null, but was:<java.util.ConcurrentModificationException>\r\n        at org.junit.Assert.fail(Assert.java:89)\r\n        at org.junit.Assert.failNotNull(Assert.java:756)\r\n        at org.junit.Assert.assertNull(Assert.java:738)\r\n        at org.junit.Assert.assertNull(Assert.java:748)\r\n        at org.apache.kafka.streams.integration.AdjustStreamThreadCountTest.testConcurrentlyAccessThreads(AdjustStreamThreadCountTest.java:264)\r\n```",
        "createdAt" : "2021-01-14T15:26:49Z",
        "updatedAt" : "2021-01-19T06:33:09Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      }
    ],
    "commit" : "33cd0949f5a6baafa2f028df912e2de72564edfe",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +289,293 @@\n    @Test\n    public void testConcurrentlyAccessThreads() throws InterruptedException {\n        try (final KafkaStreams kafkaStreams = new KafkaStreams(builder.build(), properties)) {\n            addStreamStateChangeListener(kafkaStreams);"
  }
]