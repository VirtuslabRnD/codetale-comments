[
  {
    "id" : "2f20e053-0731-4d39-94f3-9037b4d7b90d",
    "prId" : 6080,
    "prUrl" : "https://github.com/apache/kafka/pull/6080#pullrequestreview-194373514",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4012a8ae-20af-47a2-8949-8b2f6d927062",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I was originally thinking about getting the list of all metrics from kafkaStreams.metrics() which contains producer, consumer, admin and streams' own metrics (thread, task, processor node, store, cache), and check that they all exist with the exact number of metrics (with the PR for KIP-414 is in it should be easy to get the corresponding client id for different modules).\r\n\r\nBut after reading @vvcephei 's comment I think I'm convinced that we can save on getting non-streams embedded client's metrics later, and also the actual metrics name validation may better not in Streams metrics test, so we'd probably only check that the corresponding groups with clientIds existed rather than checking each metric exists. So I'm fine with the current scope of this PR.",
        "createdAt" : "2019-03-06T16:56:01Z",
        "updatedAt" : "2019-03-21T09:38:15Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bde6ef0dca284b4118d278113cfb39efbebc60ed",
    "line" : 248,
    "diffHunk" : "@@ -1,1 +246,250 @@\n    @Test\n    public void testStreamMetricOfWindowStore() throws Exception {\n        final StringBuilder errorMessage = new StringBuilder();\n        stream2 = builder.stream(STREAM_INPUT, Consumed.with(Serdes.Integer(), Serdes.String()));"
  },
  {
    "id" : "58131ffc-1669-44c4-a2df-277f90155d2c",
    "prId" : 6080,
    "prUrl" : "https://github.com/apache/kafka/pull/6080#pullrequestreview-217130510",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5664cd1f-9caf-428a-bc30-5223a1cb4c5e",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Do I read this correctly: it's verifying that we have 0 metrics registered for `PUT_IF_ABSENT_LATENCY_AVG`?",
        "createdAt" : "2019-03-19T20:23:32Z",
        "updatedAt" : "2019-03-21T09:38:15Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "37c16574-3c0c-4f3a-a6e5-26bbc94a7cdc",
        "parentId" : "5664cd1f-9caf-428a-bc30-5223a1cb4c5e",
        "authorId" : "657484ed-fccd-4b06-86ba-5b7842d474d1",
        "body" : "That's what i found after starting the app. I don't know the required \"given\" to got this type of metrics :)",
        "createdAt" : "2019-03-20T14:08:48Z",
        "updatedAt" : "2019-03-21T09:38:15Z",
        "lastEditedBy" : "657484ed-fccd-4b06-86ba-5b7842d474d1",
        "tags" : [
        ]
      },
      {
        "id" : "39e9e55a-87eb-42e9-b48c-55f3277635af",
        "parentId" : "5664cd1f-9caf-428a-bc30-5223a1cb4c5e",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "For window / session stores, there's no putIfAbsent function and hence no metrics would be registered.",
        "createdAt" : "2019-03-20T22:15:27Z",
        "updatedAt" : "2019-03-21T09:38:15Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "a3721415-cc22-4ec3-ba6d-64148eae888d",
        "parentId" : "5664cd1f-9caf-428a-bc30-5223a1cb4c5e",
        "authorId" : "657484ed-fccd-4b06-86ba-5b7842d474d1",
        "body" : "i remove it or let the test on 0 ?",
        "createdAt" : "2019-03-21T09:14:11Z",
        "updatedAt" : "2019-03-21T09:38:15Z",
        "lastEditedBy" : "657484ed-fccd-4b06-86ba-5b7842d474d1",
        "tags" : [
        ]
      }
    ],
    "commit" : "bde6ef0dca284b4118d278113cfb39efbebc60ed",
    "line" : 375,
    "diffHunk" : "@@ -1,1 +373,377 @@            testMetricByName(listMetricStore, PUT_LATENCY_AVG, 2);\n            testMetricByName(listMetricStore, PUT_LATENCY_MAX, 2);\n            testMetricByName(listMetricStore, PUT_IF_ABSENT_LATENCY_AVG, 0);\n            testMetricByName(listMetricStore, PUT_IF_ABSENT_LATENCY_MAX, 0);\n            testMetricByName(listMetricStore, GET_LATENCY_AVG, 0);"
  },
  {
    "id" : "03cecb91-c482-433e-abb0-caa35d81aa40",
    "prId" : 6922,
    "prUrl" : "https://github.com/apache/kafka/pull/6922#pullrequestreview-249020489",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "06644c69-98af-4eb1-b6ad-8217e9fc6fc0",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I remember some of the metrics were lazily registered, i.e. they would only be registered if the corresponding action is called for the first time. Have we refactored it to always register all metrics up starting the task / process-node etc? Otherwise waiting for the stream state to transit to RUNNING may not guarantee all metrics should be already registered.",
        "createdAt" : "2019-06-12T18:21:01Z",
        "updatedAt" : "2019-06-12T18:21:43Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "92aee64f-a79b-47f2-b8d9-9012bd7031a7",
        "parentId" : "06644c69-98af-4eb1-b6ad-8217e9fc6fc0",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "Good to know! Will check that.",
        "createdAt" : "2019-06-12T18:31:16Z",
        "updatedAt" : "2019-06-12T18:31:17Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "d6ea9c09-50fc-419a-b60a-4c17d2a2498d",
        "parentId" : "06644c69-98af-4eb1-b6ad-8217e9fc6fc0",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "@guozhangwang, I think it is fine just to wait until the Kafka Streams client is in state RUNNING. The test -- now and before the changes in this PR -- does not produce any records to the input topic. Hence, there is no other later event than the change to state RUNNING that could trigger a lazy metric registration. Does this make sense or am I missing something?\r\n\r\nI also checked where the metrics are registered and they are registered either in constructors or init-methods. As far as I saw in the code, both types of methods are called during initialisation of the Kafka client, i.e., before the state change to RUNNING. ",
        "createdAt" : "2019-06-12T20:56:47Z",
        "updatedAt" : "2019-06-12T20:56:47Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "e5204aeb-c417-443b-9eb8-c37822c6760c",
        "parentId" : "06644c69-98af-4eb1-b6ad-8217e9fc6fc0",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Thanks for double checking this! Then it lgtm.",
        "createdAt" : "2019-06-12T21:10:13Z",
        "updatedAt" : "2019-06-12T21:10:13Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "33c6bbd530c822feb256f6b232423bf1ecf8f509",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +214,218 @@\n    private void checkMetricDeregistration() {\n        final List<Metric> listMetricAfterClosingApp = new ArrayList<Metric>(kafkaStreams.metrics().values()).stream()\n            .filter(m -> m.metricName().group().contains(STREAM_STRING)).collect(Collectors.toList());\n        assertThat(listMetricAfterClosingApp.size(), is(0));"
  },
  {
    "id" : "55f26d8f-6beb-4922-abf6-2786078c822f",
    "prId" : 7209,
    "prUrl" : "https://github.com/apache/kafka/pull/7209#pullrequestreview-279886735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8aa2b4f9-ee53-47ff-843a-01ea31b17c0f",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "We can use `RocksDBMetrics.BYTES_WRITTEN_TO_DB + StreamsMetricsImpl.RATE_SUFFIX`, ditto below.",
        "createdAt" : "2019-08-19T21:48:07Z",
        "updatedAt" : "2019-08-26T11:09:34Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "5061d93f-8416-40c8-8930-3782ad81ea90",
        "parentId" : "8aa2b4f9-ee53-47ff-843a-01ea31b17c0f",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Similarly above, we can use `ThreadMetrics.CREATE_TASK + StreamsMetricsImpl.RATE_SUFFIX`. It can help avoiding name changing vulnerability.",
        "createdAt" : "2019-08-19T21:50:32Z",
        "updatedAt" : "2019-08-26T11:09:34Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "d9542a0d-c91a-48a7-a24c-89137edffc9c",
        "parentId" : "8aa2b4f9-ee53-47ff-843a-01ea31b17c0f",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "`RocksDBMetrics.BYTES_WRITTEN_TO_DB` is private and I do not actually want to leak this implementation details to the outside. IMO, it is OK to duplicate those strings in this tests, because they document the requirements for the metrics.",
        "createdAt" : "2019-08-23T13:46:44Z",
        "updatedAt" : "2019-08-26T11:09:39Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "679898b9-bab7-44c4-b3ff-c97ba41aafb5",
        "parentId" : "8aa2b4f9-ee53-47ff-843a-01ea31b17c0f",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "I cannot completely follow what you mean with name \"changing vulnerability\". If a metric name changes in the implementation, I want this test to fail, because the name changing could be a refactoring mistake. Such a mistake would not be found if we use the same fields to create the names also to verify them.",
        "createdAt" : "2019-08-26T09:12:54Z",
        "updatedAt" : "2019-08-26T11:09:39Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "6a0ff83a-8eab-4412-abfe-f8417d823751",
        "parentId" : "8aa2b4f9-ee53-47ff-843a-01ea31b17c0f",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I felt it is not necessary to let the test fail and enforce the future contributors to change the const names in two places, but I think I can also see your points about accidentally changing the string const. Let's keep it as is then.",
        "createdAt" : "2019-08-26T23:23:45Z",
        "updatedAt" : "2019-08-26T23:23:45Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "347191422f0bdce0112e46b0df597b41245d4861",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +157,161 @@\n    // RocksDB metrics\n    private static final String BYTES_WRITTEN_RATE = \"bytes-written-rate\";\n    private static final String BYTES_WRITTEN_TOTAL = \"bytes-written-total\";\n    private static final String BYTES_READ_RATE = \"bytes-read-rate\";"
  },
  {
    "id" : "2a2ebb5c-ada2-4b77-b3ea-770364f8a0f1",
    "prId" : 7209,
    "prUrl" : "https://github.com/apache/kafka/pull/7209#pullrequestreview-279886860",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79c2b84e-abd1-402f-8fe6-a14deaac9a1d",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Why they produce to two segments? They are sent with the same timestamps.",
        "createdAt" : "2019-08-19T21:54:57Z",
        "updatedAt" : "2019-08-26T11:09:34Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "cc57557d-dd33-4262-aaa5-5cea33bd8283",
        "parentId" : "79c2b84e-abd1-402f-8fe6-a14deaac9a1d",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "No, it is not the same timestamp. If you call `milliseconds()`, `MockTime` first advances the time by the `autoTickMs`, which is the `MockTime`'s constructor parameter `Math.max(segmentInterval.toMillis(), 60_000L)` and it returns the timestamp.",
        "createdAt" : "2019-08-22T14:56:50Z",
        "updatedAt" : "2019-08-26T11:09:39Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "cb396672-4c2a-4dc5-98a9-1e85ec7faa0c",
        "parentId" : "79c2b84e-abd1-402f-8fe6-a14deaac9a1d",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Got it.",
        "createdAt" : "2019-08-26T23:24:16Z",
        "updatedAt" : "2019-08-26T23:24:16Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "347191422f0bdce0112e46b0df597b41245d4861",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +226,230 @@    }\n\n    private void produceRecordsForTwoSegments(final Duration segmentInterval) throws Exception {\n        final MockTime mockTime = new MockTime(Math.max(segmentInterval.toMillis(), 60_000L));\n        IntegrationTestUtils.produceKeyValuesSynchronouslyWithTimestamp("
  },
  {
    "id" : "e594af53-a2cf-4d44-943b-980aa4ba603a",
    "prId" : 7209,
    "prUrl" : "https://github.com/apache/kafka/pull/7209#pullrequestreview-278465939",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "935e993b-8b42-4e29-8bec-1b1daa894496",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Can we also check the actual value (right now we just check it is not null), for example when we've written messages to two segments, check that the bytes written is the sum of two segments?",
        "createdAt" : "2019-08-19T22:00:15Z",
        "updatedAt" : "2019-08-26T11:09:34Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "a707598b-7dca-41a6-95fc-86a6733e6e97",
        "parentId" : "935e993b-8b42-4e29-8bec-1b1daa894496",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "Yes, I plan to do this verification in the next PR, where the metrics are actually computed. ",
        "createdAt" : "2019-08-23T07:03:01Z",
        "updatedAt" : "2019-08-26T11:09:39Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "347191422f0bdce0112e46b0df597b41245d4861",
    "line" : 235,
    "diffHunk" : "@@ -1,1 +455,459 @@            .filter(m -> m.metricName().group().equals(\"stream-state-metrics\") && m.metricName().tags().containsKey(tag))\n            .collect(Collectors.toList());\n        checkMetricByName(listMetricStore, BYTES_WRITTEN_RATE, 1);\n        checkMetricByName(listMetricStore, BYTES_WRITTEN_TOTAL, 1);\n        checkMetricByName(listMetricStore, BYTES_READ_RATE, 1);"
  },
  {
    "id" : "d357f982-ce20-48e5-856d-16cfb37cf19a",
    "prId" : 7416,
    "prUrl" : "https://github.com/apache/kafka/pull/7416#pullrequestreview-294840947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c70a1c5-33b6-4e02-b02b-dd2655573988",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "Verifications of state, topology description, and application ID metrics.",
        "createdAt" : "2019-09-30T09:16:49Z",
        "updatedAt" : "2019-10-04T08:23:54Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab3c0436cf659dd6f76b2b6b5360d327bad385bb",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +234,238 @@        verifyStateMetric(State.CREATED);\n        verifyTopologyDescriptionMetric(topology.describe().toString());\n        verifyApplicationIdMetric(APPLICATION_ID_VALUE);\n\n        kafkaStreams.start();"
  },
  {
    "id" : "a2a2c46d-2ad0-4fc2-92ee-14a72fb864cf",
    "prId" : 7416,
    "prUrl" : "https://github.com/apache/kafka/pull/7416#pullrequestreview-294840947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40739496-cd19-4867-8410-a0f904629ce0",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "Verification of state metric.",
        "createdAt" : "2019-09-30T09:17:35Z",
        "updatedAt" : "2019-10-04T08:23:54Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab3c0436cf659dd6f76b2b6b5360d327bad385bb",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +321,325 @@        startApplication();\n\n        verifyStateMetric(State.RUNNING);\n        checkThreadLevelMetrics();\n        checkTaskLevelMetrics();"
  },
  {
    "id" : "d52f688b-3ef5-424c-afdc-33bb2b55f5d7",
    "prId" : 7416,
    "prUrl" : "https://github.com/apache/kafka/pull/7416#pullrequestreview-297022729",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d016b53-aedd-4c2e-bd23-6acb5cc1e937",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "In KIP-444 the one below would be `stream-thread-metrics`.",
        "createdAt" : "2019-10-02T22:21:58Z",
        "updatedAt" : "2019-10-04T08:23:54Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "981411e5-060f-412c-bc1d-8cbbec784cc6",
        "parentId" : "1d016b53-aedd-4c2e-bd23-6acb5cc1e937",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "This is refactored in the thread-level refactoring PR that I could not yet open because it is based on PR #7429.",
        "createdAt" : "2019-10-03T17:30:49Z",
        "updatedAt" : "2019-10-04T08:23:54Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab3c0436cf659dd6f76b2b6b5360d327bad385bb",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +74,78 @@\n    // Metric group\n    private static final String STREAM_CLIENT_NODE_METRICS = \"stream-metrics\";\n    private static final String STREAM_THREAD_NODE_METRICS = \"stream-metrics\";\n    private static final String STREAM_TASK_NODE_METRICS = \"stream-task-metrics\";"
  }
]