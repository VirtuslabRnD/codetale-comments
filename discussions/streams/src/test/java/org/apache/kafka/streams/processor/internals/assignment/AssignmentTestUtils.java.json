[
  {
    "id" : "b0245edf-6a96-4505-a0b1-b86d0a465dcc",
    "prId" : 8406,
    "prUrl" : "https://github.com/apache/kafka/pull/8406#pullrequestreview-386760898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3a0e353-f421-4977-89d5-6f8390e1ed01",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Is this just important to produce stable test results for verification?",
        "createdAt" : "2020-04-02T20:19:02Z",
        "updatedAt" : "2020-04-03T16:32:46Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "2aefb7bf5374a8a06cf5f2342bdb6d65ce2a76bb",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +58,62 @@    /**\n     * Builds a UUID by repeating the given number n. For valid n, it is guaranteed that the returned UUIDs satisfy\n     * the same relation relative to others as their parameter n does: iff n < m, then uuidForInt(n) < uuidForInt(m)\n     *\n     * @param n an integer between 1 and 7"
  },
  {
    "id" : "857e1576-7202-47e7-89fe-a5e8fcbe18ca",
    "prId" : 8475,
    "prUrl" : "https://github.com/apache/kafka/pull/8475#pullrequestreview-392417643",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "181fdc7f-90da-433b-a1f9-f8089a47ec0d",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Oh wow, I can't believe I didn't notice this constructor existed 🤦‍♀️ ",
        "createdAt" : "2020-04-13T20:27:29Z",
        "updatedAt" : "2020-04-17T18:28:27Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "728139ce-a54d-48f0-919e-bf2a3733edc7",
        "parentId" : "181fdc7f-90da-433b-a1f9-f8089a47ec0d",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I missed it, too during reviews :shrug: ",
        "createdAt" : "2020-04-13T20:31:45Z",
        "updatedAt" : "2020-04-17T18:28:27Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "5df217a5f1d719a570c836ff736f3dd4b3addc59",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +64,68 @@     */\n    static UUID uuidForInt(final Integer n) {\n        return new UUID(0, n);\n    }\n}"
  },
  {
    "id" : "d64b0c1a-ceed-475a-915c-dded44dda7ef",
    "prId" : 8588,
    "prUrl" : "https://github.com/apache/kafka/pull/8588#pullrequestreview-408512587",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d3090da-3efe-4047-968a-3699c955d7cf",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I moved these validations from the TaskAssignorConvergence test so that we can also use them to make assertions about the correctness of our assignor implementations without having to expect specific assignments everywhere.",
        "createdAt" : "2020-05-08T22:37:03Z",
        "updatedAt" : "2020-05-14T01:51:44Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cf8316444c205ea04f6fa0874619451f5b94d92",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +96,100 @@    }\n\n    static void assertValidAssignment(final int numStandbyReplicas,\n                                      final Set<TaskId> statefulTasks,\n                                      final Set<TaskId> statelessTasks,"
  },
  {
    "id" : "b245fa17-2d99-40ca-9ea9-4131b2be638d",
    "prId" : 8588,
    "prUrl" : "https://github.com/apache/kafka/pull/8588#pullrequestreview-408512587",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "623ac854-d1ff-4c6b-b82d-f4a9b26eb63a",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "After wrestling a bit with the balance definitions I proposed earlier, I think it makes sense to define three kinds of balance:\r\n1. overall stateful tasks per _thread_ (including both active and standby)\r\n2. overall active task per _thread_ (including both stateful active and stateless)\r\n3. task-parallelism (so that the number of partitions of the same task is as distributed as possible over the _instances_)\r\n\r\nWe can generally require both stateful and active task balance, but task parallelism may get sacrificed in favor of the other two at times. It's beyond the scope of this assignor to try and optimize these tradeoffs, so we just don't worry too much about task-parallel balance when it's overconstrained.",
        "createdAt" : "2020-05-08T22:52:23Z",
        "updatedAt" : "2020-05-14T01:51:44Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cf8316444c205ea04f6fa0874619451f5b94d92",
    "line" : 194,
    "diffHunk" : "@@ -1,1 +234,238 @@    }\n\n    static void assertBalancedStatefulAssignment(final Set<TaskId> allStatefulTasks,\n                                                 final Map<UUID, ClientState> clientStates,\n                                                 final StringBuilder failureContext) {"
  },
  {
    "id" : "166497f6-3803-49e4-ab08-d2f850c8d1c7",
    "prId" : 8588,
    "prUrl" : "https://github.com/apache/kafka/pull/8588#pullrequestreview-408512587",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54a9cea5-620a-455e-9e16-5b9f66f58bc5",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I added a few matchers so that we can get more informative errors when our assertions fail.",
        "createdAt" : "2020-05-08T22:54:16Z",
        "updatedAt" : "2020-05-14T01:51:44Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cf8316444c205ea04f6fa0874619451f5b94d92",
    "line" : 287,
    "diffHunk" : "@@ -1,1 +327,331 @@    }\n\n    static Matcher<ClientState> hasActiveTasks(final int taskCount) {\n        return hasProperty(\"activeTasks\", ClientState::activeTaskCount, taskCount);\n    }"
  },
  {
    "id" : "10dabcdf-1336-4696-85c5-0eebcc77a4d7",
    "prId" : 8588,
    "prUrl" : "https://github.com/apache/kafka/pull/8588#pullrequestreview-411283188",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c79214c-0eee-444e-83bc-b07065ee75c0",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "Q: Why do we need this additional check?",
        "createdAt" : "2020-05-13T15:04:51Z",
        "updatedAt" : "2020-05-14T01:51:44Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "c7ff810a-a1fe-4f47-a713-7a12638cda94",
        "parentId" : "0c79214c-0eee-444e-83bc-b07065ee75c0",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "L131-158 is just gathering the information about whether each task is correctly assigned or not, based on its type and the standby configs (and maybe the warmup config). It doesn't make any assertions. So this check is actually the assertion, that no tasks are incorrectly assigned.\r\n\r\nDoing it this way is nicer, since when it fails, it tells you _all_ the incorrectly assigned tasks, not just the first one.",
        "createdAt" : "2020-05-13T20:41:21Z",
        "updatedAt" : "2020-05-14T01:51:44Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cf8316444c205ea04f6fa0874619451f5b94d92",
    "line" : 118,
    "diffHunk" : "@@ -1,1 +158,162 @@                .collect(entriesToMap(TreeMap::new));\n\n        if (!misassigned.isEmpty()) {\n            assertThat(\n                new StringBuilder().append(\"Found some over- or under-assigned tasks in the final assignment with \")"
  },
  {
    "id" : "9bc303f9-58d9-41e9-ae65-1a763d4d2753",
    "prId" : 8696,
    "prUrl" : "https://github.com/apache/kafka/pull/8696#pullrequestreview-414836508",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d844e488-73cc-4ec4-92ff-5e4df6d82aa7",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Similar to the other matchers, it just gives us mildly nicer test output.",
        "createdAt" : "2020-05-19T21:36:47Z",
        "updatedAt" : "2020-05-19T21:40:20Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "d85c12b3089132a8952c8c4cbebaf44e1836fd3f",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +329,333 @@    static Matcher<ClientState> hasAssignedTasks(final int taskCount) {\n        return hasProperty(\"assignedTasks\", ClientState::assignedTaskCount, taskCount);\n    }\n\n    static Matcher<ClientState> hasActiveTasks(final int taskCount) {"
  }
]