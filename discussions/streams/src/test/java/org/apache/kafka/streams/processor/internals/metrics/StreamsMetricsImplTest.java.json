[
  {
    "id" : "f2492d7e-fe4e-4f19-90fe-b4c520d0b032",
    "prId" : 5953,
    "prUrl" : "https://github.com/apache/kafka/pull/5953#pullrequestreview-179819919",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "289ba399-3e97-42c5-ac54-b857e9a57f1a",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "What is this used for? Sensor `parent1` and `parent2` should be referring to exactly the same object right?",
        "createdAt" : "2018-11-29T02:08:53Z",
        "updatedAt" : "2018-11-29T02:09:19Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "422eb80e-b2e3-45cc-bc91-01e529e215d5",
        "parentId" : "289ba399-3e97-42c5-ac54-b857e9a57f1a",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "They should be, but in reality the same parent sensor is (re)registered each time a child sensor is created, so I wanted to (idempotently) create a second parent sensor to make sure there's no extra references.",
        "createdAt" : "2018-11-29T14:26:07Z",
        "updatedAt" : "2018-11-29T14:26:08Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "4db2541474143efda6df82e13f2d70bb2bcd0eba",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +107,111 @@        assertThat(registry.metrics().size(), equalTo(numberOfTaskMetrics));\n\n        final Sensor parent2 = metrics.taskLevelSensor(taskName, operation, Sensor.RecordingLevel.DEBUG);\n        addAvgMaxLatency(parent2, PROCESSOR_NODE_METRICS_GROUP, taskTags, operation);\n        addInvocationRateAndCount(parent2, PROCESSOR_NODE_METRICS_GROUP, taskTags, operation);"
  },
  {
    "id" : "a1aee5d3-f121-46fc-8cd3-5bfbbc4838bb",
    "prId" : 5953,
    "prUrl" : "https://github.com/apache/kafka/pull/5953#pullrequestreview-180283331",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d5679cf6-f4a3-44e0-acdd-2a6d7a0d6ae8",
        "parentId" : null,
        "authorId" : "61d1839e-4bba-4391-aac4-487c97728ef2",
        "body" : "Typo: `testMu[l]tiLevelSensorRemoval() {`",
        "createdAt" : "2018-11-30T14:17:33Z",
        "updatedAt" : "2018-11-30T14:17:33Z",
        "lastEditedBy" : "61d1839e-4bba-4391-aac4-487c97728ef2",
        "tags" : [
        ]
      }
    ],
    "commit" : "4db2541474143efda6df82e13f2d70bb2bcd0eba",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +77,81 @@\n    @Test\n    public void testMutiLevelSensorRemoval() {\n        final Metrics registry = new Metrics();\n        final StreamsMetricsImpl metrics = new StreamsMetricsImpl(registry, \"\");"
  },
  {
    "id" : "94e0bd00-d137-46dd-9302-d6d2ab0f1726",
    "prId" : 6979,
    "prUrl" : "https://github.com/apache/kafka/pull/6979#pullrequestreview-270285531",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb444234-c045-45a7-adc7-2bb16593c702",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is a meta comment: for SampledStat their recorded values can vary based on the windowing itself, so in unit test it may not always has the `exact` value, i.e. asserting `equalTo(value)` may make this flaky, whereas just testing it is non-zero is sufficient.",
        "createdAt" : "2019-07-19T17:04:51Z",
        "updatedAt" : "2019-07-31T13:08:56Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "3af83d2a-97aa-44d0-9d58-930aed37e31b",
        "parentId" : "eb444234-c045-45a7-adc7-2bb16593c702",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "IIUC, since `SampledStat` metrics do not maintain any clock internally and I use `MockTime` in the unit tests, the values recorded in `SampledStat` should be deterministic. Please, correct me if I am missing anything.",
        "createdAt" : "2019-07-31T11:53:25Z",
        "updatedAt" : "2019-07-31T13:09:06Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "6fa5e457-4b2e-4300-ab76-da3a9c20124d",
        "parentId" : "eb444234-c045-45a7-adc7-2bb16593c702",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "If we are using `MockTime` then it should be fine.",
        "createdAt" : "2019-08-02T16:47:16Z",
        "updatedAt" : "2019-08-02T16:47:16Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e53106914aa3a65b8a8115c1eb3c23d7b875a66f",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +244,248 @@    }\n\n    @Test\n    public void shouldGetStoreLevelTagMap() {\n        final String threadName = \"test-thread\";"
  },
  {
    "id" : "d288bc95-a6f3-4143-ad76-a93739779e51",
    "prId" : 7429,
    "prUrl" : "https://github.com/apache/kafka/pull/7429#pullrequestreview-296356950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52a7e2f6-5b8b-43a9-9ea0-24633c82fa2d",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Same as above",
        "createdAt" : "2019-10-02T15:52:39Z",
        "updatedAt" : "2019-10-08T12:08:34Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "1d688718-9822-468c-8fad-68f2f5dad861",
        "parentId" : "52a7e2f6-5b8b-43a9-9ea0-24633c82fa2d",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "Done",
        "createdAt" : "2019-10-02T16:10:44Z",
        "updatedAt" : "2019-10-08T12:08:34Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "6acde48ae56ee85c451e2bc90b7a09ed8bb41926",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +496,500 @@        assertThat(\n            tagMap.get(builtInMetricsVersion.equals(StreamsConfig.METRICS_LATEST) ? StreamsMetricsImpl.THREAD_ID_TAG\n                : StreamsMetricsImpl.THREAD_ID_TAG_0100_TO_23),\n            equalTo(THREAD_ID)\n        );"
  },
  {
    "id" : "42d87450-dc20-4c50-9432-2cfd6ba5e86f",
    "prId" : 7928,
    "prUrl" : "https://github.com/apache/kafka/pull/7928#pullrequestreview-346035379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c02acb8-82f9-46c8-8390-f8f24f8e6971",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "This test replaces `shouldGetThreadLevelSensor()`. Thus, you can safely remove `shouldGetThreadLevelSensor()`.",
        "createdAt" : "2020-01-21T17:45:34Z",
        "updatedAt" : "2020-01-22T23:42:50Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "e55a741929fa33f80b0a4bfe2bbc34942be8bb84",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +216,220 @@\n    @Test\n    public void shouldGetNewThreadLevelSensor() {\n        final Metrics metrics = mock(Metrics.class);\n        final RecordingLevel recordingLevel = RecordingLevel.INFO;"
  },
  {
    "id" : "95c16d29-8956-4e56-a7da-1cb2f7211395",
    "prId" : 7928,
    "prUrl" : "https://github.com/apache/kafka/pull/7928#pullrequestreview-346946227",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54d5a0aa-6468-4517-8187-02b74fe876d2",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Why `is(equalToObject(sensor)))` and not just `is(sensor)`?  ",
        "createdAt" : "2020-01-22T21:25:09Z",
        "updatedAt" : "2020-01-22T23:42:50Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "728f2540-dd6a-452f-8e10-6089a12c8c5f",
        "parentId" : "54d5a0aa-6468-4517-8187-02b74fe876d2",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "That is on me. In this verification it is important to check for reference equality, because you want that `threadLevelSensor()` returns the sensor that is registered in the `Metrics` object or that was created by `Metrics#sensor()`. ",
        "createdAt" : "2020-01-22T22:09:49Z",
        "updatedAt" : "2020-01-22T23:42:50Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "8a63df00-0c79-4638-a69f-973dcc12e5e4",
        "parentId" : "54d5a0aa-6468-4517-8187-02b74fe876d2",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Yeah, I get that we want to make sure the same instance is returned.  But since `Sensor` doesn't override `equals`, `is(sensor)` should still do an instance equality check.  It's really a minor point, so I don't care too much if we keep it as is.",
        "createdAt" : "2020-01-22T22:18:22Z",
        "updatedAt" : "2020-01-22T23:42:50Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "0f2612aa-04ce-466a-9972-70b055ba95eb",
        "parentId" : "54d5a0aa-6468-4517-8187-02b74fe876d2",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "I used `equalToObject()` because it makes the intent more explicit.",
        "createdAt" : "2020-01-22T22:20:40Z",
        "updatedAt" : "2020-01-22T23:42:50Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "332d7afb-fa73-4312-a230-01a15ed154c0",
        "parentId" : "54d5a0aa-6468-4517-8187-02b74fe876d2",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Fair enough, let's just leave it as is then.  Thanks for the explanation.",
        "createdAt" : "2020-01-22T22:23:08Z",
        "updatedAt" : "2020-01-22T23:42:50Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e55a741929fa33f80b0a4bfe2bbc34942be8bb84",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +229,233 @@\n        verify(metrics);\n        assertThat(actualSensor, is(equalToObject(sensor)));\n    }\n"
  },
  {
    "id" : "087db879-f086-4a22-a3b7-da3b60cafe63",
    "prId" : 7928,
    "prUrl" : "https://github.com/apache/kafka/pull/7928#pullrequestreview-346898132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da1adf37-8b39-4a3b-bad8-5bcdf4ca6914",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "same here",
        "createdAt" : "2020-01-22T21:25:18Z",
        "updatedAt" : "2020-01-22T23:42:50Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e55a741929fa33f80b0a4bfe2bbc34942be8bb84",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +246,250 @@\n        verify(metrics);\n        assertThat(actualSensor, is(equalToObject(sensor)));\n    }\n"
  },
  {
    "id" : "acb085ac-18a8-4ebe-ad3e-0badd33a9322",
    "prId" : 7928,
    "prUrl" : "https://github.com/apache/kafka/pull/7928#pullrequestreview-346898132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8bbd7e40-b001-4c1e-8bba-7ba60d644532",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "ditto and same for tests below, I won't repeat this comment.",
        "createdAt" : "2020-01-22T21:25:28Z",
        "updatedAt" : "2020-01-22T23:42:50Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e55a741929fa33f80b0a4bfe2bbc34942be8bb84",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +264,268 @@\n        verify(metrics);\n        assertThat(actualSensor, is(equalToObject(sensor)));\n    }\n"
  },
  {
    "id" : "7354df78-3fce-42cf-b571-f15d1482d7ed",
    "prId" : 9614,
    "prUrl" : "https://github.com/apache/kafka/pull/9614#pullrequestreview-537270624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f80e00c6-d843-4370-b74e-68bec2b1de89",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "Please remove this empty line.",
        "createdAt" : "2020-11-24T09:24:48Z",
        "updatedAt" : "2020-12-02T15:27:49Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "c5df6eb31efe029519f633de1cded887306edb29",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +662,666 @@        final Capture<String> sensorKeys = addSensorsOnAllLevels(metrics, streamsMetrics);\n        resetToDefault(metrics);\n\n        metrics.removeSensor(sensorKeys.getValues().get(0));\n        metrics.removeSensor(sensorKeys.getValues().get(1));"
  }
]