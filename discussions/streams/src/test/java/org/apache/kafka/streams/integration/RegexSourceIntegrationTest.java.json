[
  {
    "id" : "d1f1cc5e-2c97-49f3-8a7f-deb3dc0714c6",
    "prId" : 4991,
    "prUrl" : "https://github.com/apache/kafka/pull/4991#pullrequestreview-119150971",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f2ab3a8-ee68-400f-aff7-95a60e140506",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: update test name",
        "createdAt" : "2018-05-10T16:21:34Z",
        "updatedAt" : "2018-05-11T18:28:02Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c606b9188d8a8a458f83ded6bfa55044bc10465",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +377,381 @@\n    @Test\n    public void testNoMessagesSentExceptionFromOverlappingPatterns() throws Exception {\n        final String fMessage = \"fMessage\";\n        final String fooMessage = \"fooMessage\";"
  },
  {
    "id" : "12531448-385d-49bd-9f8b-e408b8abea6a",
    "prId" : 4991,
    "prUrl" : "https://github.com/apache/kafka/pull/4991#pullrequestreview-119236806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03697a63-b1cf-4c9f-b4e8-5991153bf586",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Should this line not throw with latest changes to check pattern overlap immediately?",
        "createdAt" : "2018-05-10T16:22:51Z",
        "updatedAt" : "2018-05-11T18:28:02Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "3b682a52-4bed-4ce9-8bbd-aa0f0c41e108",
        "parentId" : "03697a63-b1cf-4c9f-b4e8-5991153bf586",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Note that before and now we only use `topicPattern.pattern().contains(otherPattern.pattern())` as we do not have an easy way to tell directly if two regex may overlap or not. So we still need to rely on runtime `SourceNodeFactory.getTopics` to detect eventually if there is some overlaps.\r\n\r\nThe check here that we moved from runtime is more like a pre-check which is not guaranteed 100 percent.",
        "createdAt" : "2018-05-10T20:33:43Z",
        "updatedAt" : "2018-05-11T18:28:02Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c606b9188d8a8a458f83ded6bfa55044bc10465",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +386,390 @@        // will be thrown when the processor topology is built.\n        final KStream<String, String> pattern1Stream = builder.stream(Pattern.compile(\"foo.*\"));\n        final KStream<String, String> pattern2Stream = builder.stream(Pattern.compile(\"f.*\"));\n\n        pattern1Stream.to(DEFAULT_OUTPUT_TOPIC, Produced.with(stringSerde, stringSerde));"
  },
  {
    "id" : "6c43c0f4-7492-4221-8d6b-e341ed240445",
    "prId" : 4991,
    "prUrl" : "https://github.com/apache/kafka/pull/4991#pullrequestreview-119535653",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2994470-3900-43e9-bafa-0a9f0f2e6958",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "add `fail()` in next line to make sure we hit the timeout and throw an `AssertionError`",
        "createdAt" : "2018-05-10T16:24:19Z",
        "updatedAt" : "2018-05-11T18:28:02Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "afe8c48a-96b7-4fdb-a758-9dca7bcd7004",
        "parentId" : "e2994470-3900-43e9-bafa-0a9f0f2e6958",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "`fail()` will also throw an `AssertionError`, right?",
        "createdAt" : "2018-05-10T20:31:04Z",
        "updatedAt" : "2018-05-11T18:28:02Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "b3671443-15d7-4831-890b-272bc9299c88",
        "parentId" : "e2994470-3900-43e9-bafa-0a9f0f2e6958",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Good point -- maybe throw an `new RuntimeException` ? This should not be caught in the `catch()` below. (and add a comment by why cannot use `fail`)",
        "createdAt" : "2018-05-11T17:07:15Z",
        "updatedAt" : "2018-05-11T18:28:02Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "d24dfb94-6e57-4a0c-add1-23287e5df9a5",
        "parentId" : "e2994470-3900-43e9-bafa-0a9f0f2e6958",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Ack, addressed this comment in a new commit.",
        "createdAt" : "2018-05-11T18:28:15Z",
        "updatedAt" : "2018-05-11T18:28:16Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3c606b9188d8a8a458f83ded6bfa55044bc10465",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +410,414 @@        final Properties consumerConfig = TestUtils.consumerConfig(CLUSTER.bootstrapServers(), StringDeserializer.class, StringDeserializer.class);\n        try {\n            IntegrationTestUtils.waitUntilMinKeyValueRecordsReceived(consumerConfig, DEFAULT_OUTPUT_TOPIC, 2, 5000);\n            throw new IllegalStateException(\"This should not happen: an assertion error should have been thrown before this.\");\n        } catch (final AssertionError e) {"
  },
  {
    "id" : "7dc5492b-f4f2-4ab1-9d51-b29da667a89d",
    "prId" : 6459,
    "prUrl" : "https://github.com/apache/kafka/pull/6459#pullrequestreview-218440010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9bec4c0a-0c33-475b-b668-4442c79c0eb9",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "`KafkaStreams` is AutoCloseable now so you can include its construction inside the `try` block. Ditto elsewhere.",
        "createdAt" : "2019-03-25T16:03:08Z",
        "updatedAt" : "2019-03-25T16:05:49Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "fff729d9-66fc-491a-863e-ceb62cf64bef",
        "parentId" : "9bec4c0a-0c33-475b-b668-4442c79c0eb9",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Thanks @guozhangwang this PR is for the `1.1` branch so `KafkaStreams` does not implement `AutoCloseable` in branches < `2.0`",
        "createdAt" : "2019-03-25T16:23:21Z",
        "updatedAt" : "2019-03-25T16:23:21Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "7f337021-a5d1-47c0-88e5-2d5a4e3c9441",
        "parentId" : "9bec4c0a-0c33-475b-b668-4442c79c0eb9",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Ah got it, my bad :)",
        "createdAt" : "2019-03-25T16:24:31Z",
        "updatedAt" : "2019-03-25T16:24:31Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bffd98372c41c4de0381a851b95050718dc66611",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +144,148 @@        pattern1Stream.to(stringSerde, stringSerde, DEFAULT_OUTPUT_TOPIC);\n        final List<String> assignedTopics = new ArrayList<>();\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsConfig, new DefaultKafkaClientSupplier() {\n            @Override\n            public Consumer<byte[], byte[]> getConsumer(final Map<String, Object> config) {"
  },
  {
    "id" : "b8561135-1932-446e-882b-7926bc871a4c",
    "prId" : 6463,
    "prUrl" : "https://github.com/apache/kafka/pull/6463#pullrequestreview-218479896",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "752e42d5-6eb2-4cf2-af9e-2c28e5968651",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Could also purge the local state before tests, just in case.",
        "createdAt" : "2019-03-25T17:31:40Z",
        "updatedAt" : "2019-03-25T20:16:04Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d97a1740759e22f5e8428cd9c28dddbc9a40e0a",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +117,121 @@            STRING_SERDE_CLASSNAME,\n            STRING_SERDE_CLASSNAME,\n            properties);\n    }\n"
  },
  {
    "id" : "906d25f7-3fe4-4ba3-a3eb-2c92a11a2dd9",
    "prId" : 8221,
    "prUrl" : "https://github.com/apache/kafka/pull/8221#pullrequestreview-400453228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea65f1a4-9df4-4704-b150-f6bcfeb7d0e6",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Thanks for the added tests. Have you verified the test would fail with current trunk?\r\n\r\nAlso this test takes one minute for me on local, could you take a look and see whether it takes so long?",
        "createdAt" : "2020-04-16T05:51:35Z",
        "updatedAt" : "2020-05-26T16:32:00Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "da17fdb1-5fb2-47b4-a755-0d2217202cf0",
        "parentId" : "ea65f1a4-9df4-4704-b150-f6bcfeb7d0e6",
        "authorId" : "889d8126-0663-4a3e-8712-81869bada9e0",
        "body" : "Yes, it fails on trunk.\r\nI found reason: here I tried to isolate tests: so we can create same topic in one test, delete it after we are done, do the same in next test, so on. But after each test it calls `streams.close()` in `teardown` method. I guess It tries to do smth with removed topics and gets `TimeoutException` because can't do it. may be it's issue but probably it happens only when close. But it seems to be not related to this task. @abbccdda What do you think? I fixed it easily (may be not best approach): call `streams.close` in test method body before deleting topics. ",
        "createdAt" : "2020-04-21T13:21:41Z",
        "updatedAt" : "2020-05-26T16:32:00Z",
        "lastEditedBy" : "889d8126-0663-4a3e-8712-81869bada9e0",
        "tags" : [
        ]
      },
      {
        "id" : "7f2c9bf3-96e2-4268-b104-008041cc3cd0",
        "parentId" : "ea65f1a4-9df4-4704-b150-f6bcfeb7d0e6",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "I see, sounds good",
        "createdAt" : "2020-04-26T03:21:18Z",
        "updatedAt" : "2020-05-26T16:32:00Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc85a4694d663ad13d75681d28398d4b61a4f482",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +185,189 @@\n    @Test\n    public void testRegexRecordsAreProcessedAfterReassignment() throws Exception {\n        final String topic1 = \"TEST-TOPIC-1\";\n        CLUSTER.createTopic(topic1);"
  },
  {
    "id" : "5f073942-8acf-4df7-af6e-3ef81c0bfe35",
    "prId" : 8799,
    "prUrl" : "https://github.com/apache/kafka/pull/8799#pullrequestreview-425493686",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b04856a9-af1c-43ce-9820-3eb18a892766",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Should we call close in the `finally` block? Here and elsewhere",
        "createdAt" : "2020-06-04T01:40:02Z",
        "updatedAt" : "2020-06-05T17:39:13Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "ab252055-22fc-48b4-a1c6-8bff71fc1c6d",
        "parentId" : "b04856a9-af1c-43ce-9820-3eb18a892766",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I don't think that is necessary -- there is an `@After` method that closed the client for us.",
        "createdAt" : "2020-06-04T22:18:55Z",
        "updatedAt" : "2020-06-05T17:39:13Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "89d32f24-8c3c-4d24-b836-a1f35abb7202",
        "parentId" : "b04856a9-af1c-43ce-9820-3eb18a892766",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Then why close it here as well?",
        "createdAt" : "2020-06-04T22:21:04Z",
        "updatedAt" : "2020-06-05T17:39:13Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "ec39d83f-ac99-4119-be22-4e67a1eb8db9",
        "parentId" : "b04856a9-af1c-43ce-9820-3eb18a892766",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I think it's better to first close it before we delete the topics.",
        "createdAt" : "2020-06-04T22:28:50Z",
        "updatedAt" : "2020-06-05T17:39:13Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "1a66fc99-0f7f-40bd-b0d3-aaa5753178c4",
        "parentId" : "b04856a9-af1c-43ce-9820-3eb18a892766",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Well, won't we end up deleting the topics before closing it if we never reach the first `streams.close` ? Or does it not really matter in that case since something has already gone wrong (just curious, I'm fine with it as-is btw)",
        "createdAt" : "2020-06-04T22:33:48Z",
        "updatedAt" : "2020-06-05T17:39:13Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "e5ec8ae9-a6b6-486c-a331-bbc920b78d6f",
        "parentId" : "b04856a9-af1c-43ce-9820-3eb18a892766",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Yes, that is my reasoning.",
        "createdAt" : "2020-06-04T22:58:32Z",
        "updatedAt" : "2020-06-05T17:39:13Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "aff3dc42-75fc-4a65-a980-93630eb0a45b",
        "parentId" : "b04856a9-af1c-43ce-9820-3eb18a892766",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Why we need to call `streams.close()` inside the function given they are always called in `tearDown`? Ditto below.",
        "createdAt" : "2020-06-05T04:36:30Z",
        "updatedAt" : "2020-06-05T17:39:13Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "baacd664-3ee3-42e7-994c-380514820ed7",
        "parentId" : "b04856a9-af1c-43ce-9820-3eb18a892766",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "As mentioned above: we should close the client before we delete the input topics. -- Seems cleaner.",
        "createdAt" : "2020-06-05T17:34:48Z",
        "updatedAt" : "2020-06-05T17:39:13Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "93f6343fd7fea3076e5b345fce4b33613744faae",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +183,187 @@            TestUtils.waitForCondition(() -> assignedTopics.equals(expectedSecondAssignment), STREAM_TASKS_NOT_UPDATED);\n\n            streams.close();\n        } finally {\n            CLUSTER.deleteTopicsAndWait(\"TEST-TOPIC-1\", \"TEST-TOPIC-2\");"
  }
]