[
  {
    "id" : "81e82443-e7c1-4cb5-b9ab-4942dc2a576b",
    "prId" : 6191,
    "prUrl" : "https://github.com/apache/kafka/pull/6191#pullrequestreview-202426327",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa98a057-2f23-4231-ac47-87eec96c8c17",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Ditto here due to the optimization.",
        "createdAt" : "2019-01-31T02:36:00Z",
        "updatedAt" : "2019-02-13T06:01:27Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "371c6a66-7f11-4eff-b852-514701c06547",
        "parentId" : "fa98a057-2f23-4231-ac47-87eec96c8c17",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Same comment as above.",
        "createdAt" : "2019-02-10T08:09:42Z",
        "updatedAt" : "2019-02-13T06:01:27Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "2b2bad7a-55a3-408d-ba97-0b531089b538",
        "parentId" : "fa98a057-2f23-4231-ac47-87eec96c8c17",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "For this test case I've tried to do that, but there's some trickiness about that: 1) AbstractKVStoreTest is shared in five tests, and only one of them is caching store which is affected. 2) this effect is dependent on the caching size.\r\n\r\nSo I've decided to add a separate test in `CachingKVStoreTest` only for this optimization effectiveness.",
        "createdAt" : "2019-02-11T21:22:26Z",
        "updatedAt" : "2019-02-13T06:01:27Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "1c40f830-6995-4dea-901e-a18ebb78e340",
        "parentId" : "fa98a057-2f23-4231-ac47-87eec96c8c17",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Again, `testPutGetRange` is not a good name -- maybe that is what confused me.\r\n\r\nAlso, if we do the flush() to be able to share code, maybe a comment about the why -- basically, a test should work for caching or non-caching (or explicitly state in the test name that is test the one or other behavior).",
        "createdAt" : "2019-02-12T01:23:12Z",
        "updatedAt" : "2019-02-13T06:01:27Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fef77ba1a948117f4218a8ae8b96a8cd924e8e7",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +154,158 @@        assertEquals(\"five\", store.get(5));\n        // Flush now so that for caching store, we will not skip the deletion following an put\n        store.flush();\n        store.delete(5);\n        assertEquals(4, driver.sizeOf(store));"
  },
  {
    "id" : "daf9b64a-e639-46a4-be17-f4525e54a458",
    "prId" : 9137,
    "prUrl" : "https://github.com/apache/kafka/pull/9137#pullrequestreview-465989835",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f88a753-74c9-4b86-8638-b9a0ed3758cd",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Can we add tests for some other invalid range cases? For example with both bounds positive but from > to",
        "createdAt" : "2020-08-11T20:31:45Z",
        "updatedAt" : "2020-08-20T16:39:21Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "83560dff-60f1-4f70-8f50-88c0caab0c41",
        "parentId" : "8f88a753-74c9-4b86-8638-b9a0ed3758cd",
        "authorId" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "body" : "ack. added.",
        "createdAt" : "2020-08-12T14:46:39Z",
        "updatedAt" : "2020-08-20T16:39:21Z",
        "lastEditedBy" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "tags" : [
        ]
      }
    ],
    "commit" : "38c3bb5e35a11c4e553c896b685ca141c960dbed",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +508,512 @@\n    @Test\n    public void shouldNotThrowInvalidReverseRangeExceptionWithNegativeFromKey() {\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister()) {\n            final KeyValueIterator<Integer, String> iterator = store.reverseRange(-1, 1);"
  },
  {
    "id" : "b99117ff-d2bc-425e-a348-7faf7291dd12",
    "prId" : 9137,
    "prUrl" : "https://github.com/apache/kafka/pull/9137#pullrequestreview-468904863",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8627896e-ce66-4d17-bcf5-3fcd12f154b8",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "I think we should add some tests to `RocksDBTimestampedStoreTest`. I thought it would extend `AbstractKeyValueStoreTest` and thus benefit from everything you added here, but doesn't seem to be the case :/ \r\nPersonally I found the `RocksDBDualCFIterator` logic a bit difficult to follow even before the reverse iteration,  so it would be nice to have some tests specifically covering reverse iterators over multi-column-family timestamped stores",
        "createdAt" : "2020-08-14T01:27:07Z",
        "updatedAt" : "2020-08-20T16:39:21Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "a5356a79-99f4-48b5-9b8d-fc8042d8d4b9",
        "parentId" : "8627896e-ce66-4d17-bcf5-3fcd12f154b8",
        "authorId" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "body" : "Just realized that, I also thought that path was tested. Good catch!",
        "createdAt" : "2020-08-14T10:10:01Z",
        "updatedAt" : "2020-08-20T16:39:21Z",
        "lastEditedBy" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "tags" : [
        ]
      },
      {
        "id" : "21bc1e84-9dee-4fdf-b703-d454153fbfe4",
        "parentId" : "8627896e-ce66-4d17-bcf5-3fcd12f154b8",
        "authorId" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "body" : "@ableegoldman I have extended `RocksDBTimestampedStoreTest` to use `reverseAll` and `reverseRange` as part of the current tests. \r\nUnfortunately, `AbstractKeyValueStoreTest` tests do not fit with the creation path of Timestamped stores as pre inserted data is required. \r\nWill add this to the same JIRA ticket to consider when refactoring iterators and tests.\r\n\r\n ",
        "createdAt" : "2020-08-17T12:57:04Z",
        "updatedAt" : "2020-08-20T16:39:21Z",
        "lastEditedBy" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "tags" : [
        ]
      },
      {
        "id" : "02d98457-8bcc-47c7-bd2f-fba3e83f7287",
        "parentId" : "8627896e-ce66-4d17-bcf5-3fcd12f154b8",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Ah, that makes sense I guess. Looks like the new additions to `RocksDBTimestampedStoreTest` cover the cross-column family code path so that's good enough for now",
        "createdAt" : "2020-08-17T23:55:38Z",
        "updatedAt" : "2020-08-20T16:39:21Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "38c3bb5e35a11c4e553c896b685ca141c960dbed",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +189,193 @@\n    @Test\n    public void testPutGetReverseRange() {\n        // Verify that the store reads and writes correctly ...\n        store.put(0, \"zero\");"
  }
]