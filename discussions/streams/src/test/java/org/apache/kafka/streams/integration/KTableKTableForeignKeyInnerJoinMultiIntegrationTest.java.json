[
  {
    "id" : "53e04da8-4bb7-4c1c-8900-56eabecd72d4",
    "prId" : 5527,
    "prUrl" : "https://github.com/apache/kafka/pull/5527#pullrequestreview-287014377",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a97ea82-0fc0-4bcb-8d4b-90a63016220c",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "I think it _may_ be possible to implement the integration tests using the `TopologyTestDriver`, the benefit of which would be that we could get coverage reports and the tests run faster without the embedded broker.  The test cases look complete to me, but without coverage reports, we could be missing something.  ",
        "createdAt" : "2019-09-10T19:20:26Z",
        "updatedAt" : "2019-10-02T17:56:32Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "aebe6a66-a90b-4819-b99c-0c0304611c4b",
        "parentId" : "1a97ea82-0fc0-4bcb-8d4b-90a63016220c",
        "authorId" : "d8d11f3d-4fbd-4882-a206-bfece798cdcd",
        "body" : "I'm not familiar enough with this myself. If it's problematic I would be willing to address it in another PR, as I'm experiencing some fatigue on this one. ",
        "createdAt" : "2019-09-11T19:15:44Z",
        "updatedAt" : "2019-10-02T17:56:32Z",
        "lastEditedBy" : "d8d11f3d-4fbd-4882-a206-bfece798cdcd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e1b6a1a41c8e05ff009ad988b705baeb42800ad",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +60,64 @@\n@Category({IntegrationTest.class})\npublic class KTableKTableForeignKeyInnerJoinMultiIntegrationTest {\n    private final static int NUM_BROKERS = 1;\n"
  },
  {
    "id" : "9dd82d32-3439-4038-8caf-1c88009b7993",
    "prId" : 8054,
    "prUrl" : "https://github.com/apache/kafka/pull/8054#pullrequestreview-356865907",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "998681cb-dcbd-4040-aa64-a2b4bfcbe452",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "To verify the fix, we create a \"scope\", which will wrap all our serdes and make sure that we never try to write differently typed data to the same topic.",
        "createdAt" : "2020-02-07T21:59:28Z",
        "updatedAt" : "2020-02-11T20:47:22Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "4b9e1bfd-a475-4b6c-9e18-3a7c63f1071c",
        "parentId" : "998681cb-dcbd-4040-aa64-a2b4bfcbe452",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Great idea.",
        "createdAt" : "2020-02-11T18:01:29Z",
        "updatedAt" : "2020-02-11T20:47:22Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e0feed4c2e6d2bce99962d332fa5516970aad69",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +208,212 @@\n    private KafkaStreams prepareTopology(final String queryableName, final String queryableNameTwo) {\n        final UniqueTopicSerdeScope serdeScope = new UniqueTopicSerdeScope();\n        final StreamsBuilder builder = new StreamsBuilder();\n"
  },
  {
    "id" : "1d5feb31-b4d7-418d-977b-657ac03c1cba",
    "prId" : 8054,
    "prUrl" : "https://github.com/apache/kafka/pull/8054#pullrequestreview-355458303",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e15b5d52-e8dc-417f-8ccc-e83efdb200d9",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "We decorate each serde in the topology. This also has the side benefit of actually configuring the serdes, which we've usually neglected to do. Particularly, the last argument configures the serde as a \"key\" or \"value\" serde.",
        "createdAt" : "2020-02-07T22:00:41Z",
        "updatedAt" : "2020-02-11T20:47:22Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e0feed4c2e6d2bce99962d332fa5516970aad69",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +214,218 @@            TABLE_1,\n            Consumed.with(serdeScope.decorateSerde(Serdes.Integer(), streamsConfig, true),\n                          serdeScope.decorateSerde(Serdes.Float(), streamsConfig, false))\n        );\n        final KTable<String, Long> table2 = builder.table("
  },
  {
    "id" : "ec88c381-7531-49a0-8f83-bd731319ecc0",
    "prId" : 10409,
    "prUrl" : "https://github.com/apache/kafka/pull/10409#pullrequestreview-621756768",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4903f152-2e08-4144-be86-ebd3f5909118",
        "parentId" : null,
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "another fix: we missed it in this fix: https://github.com/apache/kafka/pull/9978/files#diff-29da306477a4e2aaf1195f085dd77ae150f767e96277db52252d4093f802a9aeR152, to separate the streamConfig to persist UUID in state directory. \r\n",
        "createdAt" : "2021-03-26T03:09:41Z",
        "updatedAt" : "2021-04-13T02:08:04Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      },
      {
        "id" : "44e8c0a9-a4fe-41d7-810b-fce3cde0d22f",
        "parentId" : "4903f152-2e08-4144-be86-ebd3f5909118",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "This is done above in `before()` so it's probably not behind the flakiness, unfortunately. Not sure why we purge the local state twice but you're right, we should at least be consistent when we do and purge the state for all three Streams. Good catch",
        "createdAt" : "2021-03-26T03:23:39Z",
        "updatedAt" : "2021-04-13T02:08:04Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "cc326f5120264aa7108e4ef431e9f3a2c7cbd2c4",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +173,177 @@            streamsThree = null;\n        }\n        IntegrationTestUtils.purgeLocalStreamsState(asList(streamsConfig, streamsConfigTwo, streamsConfigThree));\n    }\n"
  }
]