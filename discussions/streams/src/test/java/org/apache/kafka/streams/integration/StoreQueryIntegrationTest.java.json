[
  {
    "id" : "c33342d1-fe34-401b-9ab1-889eafcc50c3",
    "prId" : 7984,
    "prUrl" : "https://github.com/apache/kafka/pull/7984#pullrequestreview-350484961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26c5f309-9e71-440c-b210-b890c141fe32",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why is this a new test class? Why not add those tests to existing `QueryableStateIntegrationTest` ?",
        "createdAt" : "2020-01-29T23:32:10Z",
        "updatedAt" : "2020-01-30T05:36:55Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "87c5b9c6789e6f77819eecee0400c64d4220356f",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +66,70 @@\n@Category({IntegrationTest.class})\npublic class StoreQueryIntegrationTest {\n\n    private static final int NUM_BROKERS = 1;"
  },
  {
    "id" : "c240f835-46fd-4679-a9e8-287900f935f1",
    "prId" : 7984,
    "prUrl" : "https://github.com/apache/kafka/pull/7984#pullrequestreview-351921425",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c71cdf65-ca6d-407a-b3d6-49613b6f3079",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I am not sure if I understand this test? If there are two instances, and a topic with 2 partitions, each instance is hosting one task. Hence, how does this test verify that _all_ partitions are considered for querying?\r\n\r\n1. there is only one partition\r\n2. even if there would be two partitions, how could this test verify if only one partition was queried or both?\r\n\r\nMaybe enabling stale querying helps to verify?\r\n\r\nSimilar question about the below test. Or do I miss something?",
        "createdAt" : "2020-01-29T23:46:36Z",
        "updatedAt" : "2020-01-30T05:36:55Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "c6c95fc0-c65f-4dbf-8915-871fb82c1b29",
        "parentId" : "c71cdf65-ca6d-407a-b3d6-49613b6f3079",
        "authorId" : "3501d636-ea66-482b-a2ca-f215a3669632",
        "body" : "Hmm, you are right. Although, my main point for writing this test was that when no partition is implicitly provided, the key fetch returns a value(and only on the machine where active resides). I have already written tests to verify that enabling stale stores returns value as well in shouldQueryAllStalePartitionStores() so we can remove this test as well.",
        "createdAt" : "2020-01-30T04:38:46Z",
        "updatedAt" : "2020-01-30T05:36:55Z",
        "lastEditedBy" : "3501d636-ea66-482b-a2ca-f215a3669632",
        "tags" : [
        ]
      },
      {
        "id" : "ec9fbc67-61f6-4d33-ac4f-9e540694a809",
        "parentId" : "c71cdf65-ca6d-407a-b3d6-49613b6f3079",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "If you want to verify that only the active task returns data, the test name should indicate this.",
        "createdAt" : "2020-01-30T07:41:31Z",
        "updatedAt" : "2020-01-30T07:43:49Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "4cf4d022-bbf5-4c67-9f83-8e2fd3f4530c",
        "parentId" : "c71cdf65-ca6d-407a-b3d6-49613b6f3079",
        "authorId" : "3501d636-ea66-482b-a2ca-f215a3669632",
        "body" : "Done.",
        "createdAt" : "2020-02-02T06:26:59Z",
        "updatedAt" : "2020-02-02T06:26:59Z",
        "lastEditedBy" : "3501d636-ea66-482b-a2ca-f215a3669632",
        "tags" : [
        ]
      }
    ],
    "commit" : "87c5b9c6789e6f77819eecee0400c64d4220356f",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +133,137 @@        assertThat(kafkaStreams1IsActive ? store1.get(key) : store2.get(key), is(notNullValue()));\n        assertThat(kafkaStreams1IsActive ? store2.get(key) : store1.get(key), is(nullValue()));\n    }\n\n    @Test"
  },
  {
    "id" : "c4998d84-70d7-4262-9ab6-d83b72a7203b",
    "prId" : 7984,
    "prUrl" : "https://github.com/apache/kafka/pull/7984#pullrequestreview-351922385",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94d0edb1-367e-453e-ae99-68f8d5e2f1a4",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why do we catch? We should be able to figure this out before we call `store()` base on the given `KeyQueryMetadata`.",
        "createdAt" : "2020-01-29T23:48:00Z",
        "updatedAt" : "2020-01-30T05:36:55Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "b55cdc36-b6b4-4dfd-8d9e-c87ef4b90df2",
        "parentId" : "94d0edb1-367e-453e-ae99-68f8d5e2f1a4",
        "authorId" : "3501d636-ea66-482b-a2ca-f215a3669632",
        "body" : "Done.",
        "createdAt" : "2020-02-02T06:53:56Z",
        "updatedAt" : "2020-02-02T06:53:56Z",
        "lastEditedBy" : "3501d636-ea66-482b-a2ca-f215a3669632",
        "tags" : [
        ]
      }
    ],
    "commit" : "87c5b9c6789e6f77819eecee0400c64d4220356f",
    "line" : 175,
    "diffHunk" : "@@ -1,1 +173,177 @@        } catch (final InvalidStateStoreException exception) {\n        //Only one among kafkaStreams1 and kafkaStreams2 will contain the specific active store requested. The other will throw exception\n        }\n        try {\n            store2 = kafkaStreams2"
  },
  {
    "id" : "2f02872b-01b7-4630-b5e6-99d5f20b6ace",
    "prId" : 7984,
    "prUrl" : "https://github.com/apache/kafka/pull/7984#pullrequestreview-351922381",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "947e06bc-2350-4fd1-a123-dcd093e50d5e",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Seem this test is subject to a race condition, because we don't know if the standby is up-to-date already (the used semaphore only tells us that the active one is up-to-date) and contains the key. I think we need to retry this in a loop with timeout?",
        "createdAt" : "2020-01-29T23:55:07Z",
        "updatedAt" : "2020-01-30T05:36:55Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "269b6621-b33b-4c13-8c2a-1389ae65a623",
        "parentId" : "947e06bc-2350-4fd1-a123-dcd093e50d5e",
        "authorId" : "3501d636-ea66-482b-a2ca-f215a3669632",
        "body" : "Done.",
        "createdAt" : "2020-02-02T06:53:47Z",
        "updatedAt" : "2020-02-02T06:53:48Z",
        "lastEditedBy" : "3501d636-ea66-482b-a2ca-f215a3669632",
        "tags" : [
        ]
      }
    ],
    "commit" : "87c5b9c6789e6f77819eecee0400c64d4220356f",
    "line" : 250,
    "diffHunk" : "@@ -1,1 +248,252 @@        // Assert that both active and standby are able to query for a key\n        assertThat(store1.get(key), is(notNullValue()));\n        assertThat(store2.get(key), is(notNullValue()));\n    }\n"
  },
  {
    "id" : "c6d91287-712d-4da3-9598-e3c3be1d9976",
    "prId" : 9521,
    "prUrl" : "https://github.com/apache/kafka/pull/9521#pullrequestreview-518911379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "af876120-dc18-4e6f-8f8e-487f1e6b188c",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I went ahead and fixed the whitespace also, since this PR is relatively small.",
        "createdAt" : "2020-10-28T17:23:07Z",
        "updatedAt" : "2020-10-28T17:32:09Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "500cdaee8a53d610d6f9db2d79f8add1554893db",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +115,119 @@                          .withCachingDisabled())\n               .toStream()\n               .peek((k, v) -> semaphore.release());\n\n        final KafkaStreams kafkaStreams1 = createKafkaStreams(builder, streamsConfiguration());"
  },
  {
    "id" : "350bfe98-cd76-405f-a73f-fdd974bfd36b",
    "prId" : 9521,
    "prUrl" : "https://github.com/apache/kafka/pull/9521#pullrequestreview-518911379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97fa6c5b-0723-43fd-92cb-9cf02d44e736",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This is the meat of this change. If we do get an exception, we can still verify the exception is the one we expected to get, and then we return `false` to indicate we should try again later to get a successful verification.",
        "createdAt" : "2020-10-28T17:25:03Z",
        "updatedAt" : "2020-10-28T17:32:09Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "500cdaee8a53d610d6f9db2d79f8add1554893db",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +152,156 @@                );\n                LOG.info(\"Streams wasn't running. Will try again.\");\n                return false;\n            }\n        });"
  },
  {
    "id" : "0789b669-69cc-4e2f-af35-141d21a3425d",
    "prId" : 9521,
    "prUrl" : "https://github.com/apache/kafka/pull/9521#pullrequestreview-518911379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c65b98aa-012f-48ca-bbfe-5c0a17468f78",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Also, here, if we find that Streams is rebalancing, we'll try the whole verification again, including to re-discover the stores in case the stores have swapped ownership.",
        "createdAt" : "2020-10-28T17:27:30Z",
        "updatedAt" : "2020-10-28T17:32:09Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "500cdaee8a53d610d6f9db2d79f8add1554893db",
    "line" : 241,
    "diffHunk" : "@@ -1,1 +246,250 @@                );\n                LOG.info(\"Streams wasn't running. Will try again.\");\n                return false;\n            }\n        });"
  },
  {
    "id" : "a9065fd8-6f33-478d-a39c-318da2fec0d2",
    "prId" : 9521,
    "prUrl" : "https://github.com/apache/kafka/pull/9521#pullrequestreview-518911379",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fcb94cf1-20df-49d1-8257-ba40b00dbf9f",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Note, this is different than `TestUtils.waitForCondition`, which does the inverse thing. That one will retry on exceptions and otherwise verify that the return is `true`. We need to fail on exceptions and retry as long as the return is `false`.\r\n\r\nI opted to keep this method here, since it might be confusing next to the other util method.",
        "createdAt" : "2020-10-28T17:29:50Z",
        "updatedAt" : "2020-10-28T17:32:09Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "500cdaee8a53d610d6f9db2d79f8add1554893db",
    "line" : 390,
    "diffHunk" : "@@ -1,1 +414,418 @@    }\n\n    private static void until(final TestCondition condition) {\n        boolean success = false;\n        final long deadline = System.currentTimeMillis() + IntegrationTestUtils.DEFAULT_TIMEOUT;"
  },
  {
    "id" : "06c524a6-a3bc-431b-b15b-82f921cd96b9",
    "prId" : 9521,
    "prUrl" : "https://github.com/apache/kafka/pull/9521#pullrequestreview-519754154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "664d7808-1178-49d1-8afe-25946a4f2c7d",
        "parentId" : null,
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "Why not handling the ```InvalidStateStoreException``` in the helper method ```until```",
        "createdAt" : "2020-10-29T04:00:05Z",
        "updatedAt" : "2020-10-29T04:03:17Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "83071904-d5f0-4bfc-ac89-04d5c61904fb",
        "parentId" : "664d7808-1178-49d1-8afe-25946a4f2c7d",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I wanted to keep the concerns separate, so that unexpected exceptions would cause the test to fail fast. The idea is that `until` is the inverse of `while`, namely, it just loops as long as the condition evaluates to `false`. If the condition throws an exception, then the loop also throws, just like the real `while` loop.",
        "createdAt" : "2020-10-29T14:55:31Z",
        "updatedAt" : "2020-10-29T14:55:31Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "500cdaee8a53d610d6f9db2d79f8add1554893db",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +146,150 @@                }\n                return true;\n            } catch (final InvalidStateStoreException exception) {\n                assertThat(\n                    exception.getMessage(),"
  },
  {
    "id" : "55e665f5-f024-4046-8d7b-639401b35547",
    "prId" : 9521,
    "prUrl" : "https://github.com/apache/kafka/pull/9521#pullrequestreview-519756874",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fc84adb-dc64-4ca5-a3f7-a249e5e458b4",
        "parentId" : null,
        "authorId" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "body" : "which method can throw ```InvalidStateStoreException``` in this case? It seems to me the potential methods are caught by ```assertThrows```",
        "createdAt" : "2020-10-29T04:01:49Z",
        "updatedAt" : "2020-10-29T04:03:17Z",
        "lastEditedBy" : "0f776378-bb23-4193-9bb0-1db5973f3781",
        "tags" : [
        ]
      },
      {
        "id" : "7101fc78-6456-4b81-8108-cfa1924df1b5",
        "parentId" : "3fc84adb-dc64-4ca5-a3f7-a249e5e458b4",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "It's a little subtle, but each block of the `if` has two verifications: that it can fetch data from one of the instances and that it gets an exception from the other instance. If something goes wrong the \"can fetch data\" verification could throw.\r\n\r\nE.g., `assertThat(getStore(kafkaStreams1, storeQueryParam2).get(key), is(nullValue()));` could throw.",
        "createdAt" : "2020-10-29T14:57:55Z",
        "updatedAt" : "2020-10-29T14:57:56Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "500cdaee8a53d610d6f9db2d79f8add1554893db",
    "line" : 235,
    "diffHunk" : "@@ -1,1 +240,244 @@                }\n                return true;\n            } catch (final InvalidStateStoreException exception) {\n                assertThat(\n                    exception.getMessage(),"
  },
  {
    "id" : "033d237b-73ca-451a-aa19-39040425588d",
    "prId" : 9681,
    "prUrl" : "https://github.com/apache/kafka/pull/9681#pullrequestreview-544045888",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8720dde-baf3-4eb7-91c2-2da3bb95bf40",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "I thought this is easier readable.",
        "createdAt" : "2020-12-03T15:05:04Z",
        "updatedAt" : "2020-12-03T15:05:12Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "64d5ba426ecb604974cb035ba57f5dcf7e1c009e",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +144,148 @@                    assertThat(store1.get(key), is(nullValue()));\n                    assertThat(store2.get(key), is(notNullValue()));\n                }\n                return true;\n            } catch (final InvalidStateStoreException exception) {"
  },
  {
    "id" : "769b1ef0-27d5-4162-9360-e46c40bfed6e",
    "prId" : 11129,
    "prUrl" : "https://github.com/apache/kafka/pull/11129#pullrequestreview-718187761",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef3b1f6e-4b20-4f3c-b9b2-d0c4db351ce8",
        "parentId" : null,
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "nit: Could we add a error reason in this assertion, so that when the exception message is not one of these 2 messages, we can know what happened. Ex: \"Unexpected exception thrown while getting the value from store.\"",
        "createdAt" : "2021-07-29T09:53:50Z",
        "updatedAt" : "2021-07-29T09:54:19Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      },
      {
        "id" : "824118a9-51f7-4587-90db-9af28e1f146d",
        "parentId" : "ef3b1f6e-4b20-4f3c-b9b2-d0c4db351ce8",
        "authorId" : "d12b3a2f-663a-4bd8-bb77-17c9abf2fc0a",
        "body" : "yup, makes sense",
        "createdAt" : "2021-07-29T14:45:49Z",
        "updatedAt" : "2021-07-29T14:45:49Z",
        "lastEditedBy" : "d12b3a2f-663a-4bd8-bb77-17c9abf2fc0a",
        "tags" : [
        ]
      }
    ],
    "commit" : "58c73d147b4544f44342a7f166d8a96113fe646f",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +160,164 @@                                        containsString(\"The state store, source-table, may have migrated to another instance\")\n                                )\n                        )\n                );\n                LOG.info(\"Either streams wasn't running or a re-balancing took place. Will try again.\");"
  }
]