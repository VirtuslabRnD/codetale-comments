[
  {
    "id" : "3af97429-3d47-465f-8b8e-f14de2685785",
    "prId" : 7248,
    "prUrl" : "https://github.com/apache/kafka/pull/7248#pullrequestreview-279256804",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3eb5148f-1a54-4fa8-ae88-bd94f4ddbdde",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Added these so that we can ditch the specialized \"for testing\" constructors.",
        "createdAt" : "2019-08-23T23:50:32Z",
        "updatedAt" : "2019-10-29T21:04:35Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4d6ae101dee1bb04c4a267771e3f9ac6ec347eb",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +214,218 @@    }\n\n    private static SubscriptionInfo getInfo(final int version,\n                                            final UUID processId,\n                                            final Set<TaskId> prevTasks,"
  },
  {
    "id" : "4bb464ac-0732-4d88-9d6f-7f3c6205c936",
    "prId" : 7249,
    "prUrl" : "https://github.com/apache/kafka/pull/7249#pullrequestreview-284458826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92082222-b9fa-4495-a197-61ee8be6020b",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "The story here is that (I think wrongly), the tests were using the task manager via the config map before, but not always initializing the mock. I guess a lot of the tests never accessed its methods before. I also guess that the mock just returns `null` for field accesses (specifically `adminClient`), but it doesn't validate the field access. Now that it's a method, it need the expectation of the call always, so we always need to initialize the mock now.\r\n\r\nThe changes I made in this class are related to this. Basically, we always initialize the taskManager mock before using it to configure the StreamsPartitionAssignor.",
        "createdAt" : "2019-09-05T19:11:41Z",
        "updatedAt" : "2019-09-06T21:04:40Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cc2c66abcb7619589ed3366cb162c78dd7bbef8",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +121,125 @@    private final String applicationId = \"stream-partition-assignor-test\";\n\n    private TaskManager taskManager;\n\n    private Map<String, Object> configProps() {"
  },
  {
    "id" : "902f4e12-8332-416f-8df4-058f50f701c2",
    "prId" : 7386,
    "prUrl" : "https://github.com/apache/kafka/pull/7386#pullrequestreview-297177280",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2bdb06e1-5aac-4159-a4e4-0866ffe1cb70",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Could we comment on the intention of this unit test?",
        "createdAt" : "2019-10-02T18:39:56Z",
        "updatedAt" : "2019-10-06T23:53:51Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "68ab2534-7061-452a-b95e-4647a6ae8f1f",
        "parentId" : "2bdb06e1-5aac-4159-a4e4-0866ffe1cb70",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Hmm, after some refactoring this looks kind of useless in its current form. I'll try to rewrite it to actually do something",
        "createdAt" : "2019-10-03T22:02:48Z",
        "updatedAt" : "2019-10-06T23:53:51Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "f047cd9bea88a4ffc88ce2b4f82946d52202c539",
    "line" : 306,
    "diffHunk" : "@@ -1,1 +421,425 @@\n    @Test\n    public void testCooperativeSubscription() {\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topic2\");"
  },
  {
    "id" : "a6c1c48b-c38c-48a2-8dbd-9f6727517c3a",
    "prId" : 7386,
    "prUrl" : "https://github.com/apache/kafka/pull/7386#pullrequestreview-296481499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "777e493e-f3da-4a91-a66a-ef69e2d2c212",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I think the test coverage is not sufficient with the augmented logic here, we should at least test the following code path:\r\n\r\n1. among clients, with EAGER set we still try to honor stickiness based on user metadata (this may be covered already).\r\n2. among clients, with COOPERATIVE we still try to honor stickiness based on owned partitions.\r\n3. within a client, we try to reassign tasks back to consumers if the prev consumers are fixed, and load balance is not violated.\r\n4. within a client, we if we cannot satisfy 3), we interleave.\r\n5. within a client, upon version probing we interleave.\r\n",
        "createdAt" : "2019-10-02T18:45:58Z",
        "updatedAt" : "2019-10-06T23:53:51Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "8c07efdd-4597-49ce-ac33-7a6f2e27e71d",
        "parentId" : "777e493e-f3da-4a91-a66a-ef69e2d2c212",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Yeah I was in the middle of extending the tests when I found the version probing bug -- I'll get back to them once I've rebased",
        "createdAt" : "2019-10-02T19:45:26Z",
        "updatedAt" : "2019-10-06T23:53:51Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "f047cd9bea88a4ffc88ce2b4f82946d52202c539",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +17,21 @@package org.apache.kafka.streams.processor.internals;\n\nimport java.util.Arrays;\nimport org.apache.kafka.clients.consumer.ConsumerPartitionAssignor;\nimport org.apache.kafka.clients.consumer.ConsumerPartitionAssignor.GroupSubscription;"
  },
  {
    "id" : "1d3036f0-1b92-4d2b-be46-a220cdbeb316",
    "prId" : 7386,
    "prUrl" : "https://github.com/apache/kafka/pull/7386#pullrequestreview-298252912",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b680728-e524-4937-bd14-b4208968010b",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Can we just rely on the equals function of `map` and `list` here? I think it checks for \"exact equality\", while here `otherAssignment` being a super-set of thisAssignment can still pass.",
        "createdAt" : "2019-10-06T23:15:55Z",
        "updatedAt" : "2019-10-06T23:53:51Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "1669eb8b-c62f-48f1-bef0-04379f6d4553",
        "parentId" : "9b680728-e524-4937-bd14-b4208968010b",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Well we also check for the size to be the same, but this could be improved I guess. I'm not sure we can use the map equals because the values are not necessarily equal until sorted.\r\n\r\nBut we could sort them and then use list equality instead.",
        "createdAt" : "2019-10-06T23:52:34Z",
        "updatedAt" : "2019-10-06T23:54:03Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "8a5642dd-1e18-404e-91ed-cdb6aaf4dc49",
        "parentId" : "9b680728-e524-4937-bd14-b4208968010b",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "SG.",
        "createdAt" : "2019-10-07T16:24:19Z",
        "updatedAt" : "2019-10-07T16:24:19Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f047cd9bea88a4ffc88ce2b4f82946d52202c539",
    "line" : 708,
    "diffHunk" : "@@ -1,1 +1682,1686 @@    }\n\n    private void assertEquivalentAssignment(final Map<String, List<TaskId>> thisAssignment,\n                                            final Map<String, List<TaskId>> otherAssignment) {\n        assertEquals(thisAssignment.size(), otherAssignment.size());"
  },
  {
    "id" : "d94887db-b83f-4dde-9739-16c26af07dad",
    "prId" : 7649,
    "prUrl" : "https://github.com/apache/kafka/pull/7649#pullrequestreview-312012808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28e9aa5c-a8d0-4545-b4bf-c9b59f4f5a8e",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "on-the-side cleanup... for some reason, IDEA suggests turning this into a constant.\r\n\r\n",
        "createdAt" : "2019-11-05T20:14:33Z",
        "updatedAt" : "2019-11-05T20:19:38Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "67332057d2a55db34ae464d47427f51ef787d802",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +83,87 @@    private static final String CONSUMER_2 = \"consumer2\";\n    private static final String CONSUMER_3 = \"consumer3\";\n    private static final String CONSUMER_4 = \"consumer4\";\n\n    private final TopicPartition t1p0 = new TopicPartition(\"topic1\", 0);"
  },
  {
    "id" : "49e2118e-da02-4e14-ba8c-4eb75fcbb381",
    "prId" : 7649,
    "prUrl" : "https://github.com/apache/kafka/pull/7649#pullrequestreview-312012808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28896ac1-7f83-4448-b7d4-168e96705e4d",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "\"Double-brace initialization\" is an anti-pattern. Switching usages to the appropriate utility methods.\r\n\r\n",
        "createdAt" : "2019-11-05T20:14:45Z",
        "updatedAt" : "2019-11-05T20:19:38Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "67332057d2a55db34ae464d47427f51ef787d802",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +115,119 @@    private final TaskId task2_3 = new TaskId(2, 3);\n\n    private final Map<TaskId, Set<TopicPartition>> partitionsForTask = mkMap(\n        mkEntry(task0_0, mkSet(t1p0, t2p0)),\n        mkEntry(task0_1, mkSet(t1p1, t2p1)),"
  },
  {
    "id" : "fcb9e655-5060-4a29-96ec-84491fde15f5",
    "prId" : 7649,
    "prUrl" : "https://github.com/apache/kafka/pull/7649#pullrequestreview-312012808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bc9400fe-3b3b-43a4-9d5d-42a43f8726e6",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "too-long, and weirdly formatted, line\r\n\r\n",
        "createdAt" : "2019-11-05T20:15:15Z",
        "updatedAt" : "2019-11-05T20:19:38Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "67332057d2a55db34ae464d47427f51ef787d802",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +287,291 @@                Collections.emptySet()\n            )\n        );\n    }\n"
  },
  {
    "id" : "9612b494-5e88-43d1-9793-fa594d528c30",
    "prId" : 7649,
    "prUrl" : "https://github.com/apache/kafka/pull/7649#pullrequestreview-312601895",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8fdfba1c-e438-4404-a0f8-3def8bc3f7ec",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Changing these assertions to compare SubscriptionInfo objects instead of byte arrays, so that when the tests fail, we can actually see why.\r\n\r\nIf anyone really wants to compare the byte arrays, I'll write a utility method to compare the bytes, but print the message containing the objects.\r\n\r\n",
        "createdAt" : "2019-11-05T20:15:43Z",
        "updatedAt" : "2019-11-05T20:19:38Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "4dfcb1a5-d2f7-41a6-89b6-53b4f3ce8f3e",
        "parentId" : "8fdfba1c-e438-4404-a0f8-3def8bc3f7ec",
        "authorId" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "body" : "+1. All for user readable assertions. If the bytes format is standardized then it should be tested in SubscriptionInfoTest.",
        "createdAt" : "2019-11-06T17:20:25Z",
        "updatedAt" : "2019-11-06T17:30:51Z",
        "lastEditedBy" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "tags" : [
        ]
      }
    ],
    "commit" : "67332057d2a55db34ae464d47427f51ef787d802",
    "line" : 339,
    "diffHunk" : "@@ -1,1 +448,452 @@        // everything and thus the \"ownedPartitions\" field in the subscription will be empty\n        final SubscriptionInfo info = getInfo(processId, prevTasks, standbyTasks, null);\n        assertEquals(info, SubscriptionInfo.decode(subscription.userData()));\n    }\n"
  },
  {
    "id" : "233daef1-cb97-45f6-b426-79704e904b86",
    "prId" : 7649,
    "prUrl" : "https://github.com/apache/kafka/pull/7649#pullrequestreview-312012808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3e8b2ee-0922-4154-b412-881e7edfe460",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "resolving warnings\r\n\r\n",
        "createdAt" : "2019-11-05T20:16:52Z",
        "updatedAt" : "2019-11-05T20:19:38Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "67332057d2a55db34ae464d47427f51ef787d802",
    "line" : 728,
    "diffHunk" : "@@ -1,1 +1075,1079 @@        stream1.join(\n            table1,\n            (ValueJoiner<Object, Object, Void>) (value1, value2) -> null);\n\n        final UUID uuid = UUID.randomUUID();"
  },
  {
    "id" : "890b114b-c80d-4698-bf25-582ae86e43e1",
    "prId" : 7649,
    "prUrl" : "https://github.com/apache/kafka/pull/7649#pullrequestreview-312632692",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3795ba49-ac99-4931-89a6-98af050009ef",
        "parentId" : null,
        "authorId" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "body" : "prop: indent args to Subscription? If the current approach is an established code style then feel free to disregard.\r\n\r\nSame comment for next `subscriptions.put` below.",
        "createdAt" : "2019-11-06T17:25:15Z",
        "updatedAt" : "2019-11-06T17:30:51Z",
        "lastEditedBy" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "tags" : [
        ]
      },
      {
        "id" : "a7405f7c-f0e8-4466-9fb3-968fa8c84a95",
        "parentId" : "3795ba49-ac99-4931-89a6-98af050009ef",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Huh, I'm not sure how that happened. It's not an established code style.\r\n\r\nSince it's in the middle of this giant test class anyway, though, I think I'll leave it alone, unless I get some CR comments that require a new commit.",
        "createdAt" : "2019-11-06T18:00:43Z",
        "updatedAt" : "2019-11-06T18:00:43Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "67332057d2a55db34ae464d47427f51ef787d802",
    "line" : 972,
    "diffHunk" : "@@ -1,1 +1497,1501 @@                Collections.singletonList(\"topic1\"),\n                getInfo(UUID.randomUUID(), allTasks, Collections.emptySet(), null).encode(),\n                asList(t1p0, t1p1, t1p2))\n        );\n        subscriptions.put(CONSUMER_2,"
  }
]