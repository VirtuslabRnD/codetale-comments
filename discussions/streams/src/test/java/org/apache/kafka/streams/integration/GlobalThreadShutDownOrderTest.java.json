[
  {
    "id" : "97a38826-68e4-46f9-8e65-d4e74322bf5a",
    "prId" : 7418,
    "prUrl" : "https://github.com/apache/kafka/pull/7418#pullrequestreview-295011337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef47a165-5af4-4779-8d3f-ca3889158613",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Added a brief description as when I revisited the test I needed to look at the code to remember what the test was for.",
        "createdAt" : "2019-09-30T14:22:14Z",
        "updatedAt" : "2019-09-30T14:24:21Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "440d26fa29819d6e78ea921b0c39d7bdafbd49b2",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +57,61 @@ * This test asserts that when Kafka Streams is closing and shuts\n * down a StreamThread the closing of the GlobalStreamThread happens\n * after all the StreamThreads are completely stopped.\n *\n * The test validates the Processor still has access to the GlobalStateStore while closing."
  },
  {
    "id" : "523871f5-0568-4047-82be-e3ce6d5f9453",
    "prId" : 7418,
    "prUrl" : "https://github.com/apache/kafka/pull/7418#pullrequestreview-295011337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dee6597f-b5dc-479e-8f9c-d5f6f90aeb65",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "This should only ever get incremented once",
        "createdAt" : "2019-09-30T14:24:16Z",
        "updatedAt" : "2019-09-30T14:24:21Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "440d26fa29819d6e78ea921b0c39d7bdafbd49b2",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +202,206 @@        @Override\n        public void close() {\n            closeCounter.getAndIncrement();\n            final List<String> keys = Arrays.asList(\"A\", \"B\", \"C\", \"D\");\n            for (final String key : keys) {"
  },
  {
    "id" : "ce27fa6f-90d9-4133-8be4-59a3ad453dae",
    "prId" : 8578,
    "prUrl" : "https://github.com/apache/kafka/pull/8578#pullrequestreview-402265715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87869951-080f-496a-938f-4521b5dc4e63",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I've standardized all the usages to be just \"app\", followed by the generated name, since the generated name contains the same information that we previously hand-wrote into the prefix or suffix. All we really need to do is ensure that the app id won't collide with a group name that we might use in a verification consumer, for example. For that reason, I've never used the generated name \"plain\", but always scoped it to the usage (app id, group id, input topic, etc.).\r\n\r\nIt's not super important to apply these ideas universally, but I felt it would make it easier to write more tests like it in the future if I just made a full pass on all the tests to make them all look the same.",
        "createdAt" : "2020-04-28T22:48:29Z",
        "updatedAt" : "2020-04-29T19:48:31Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "1884686387a8af57d0123deead442c98529239d5",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +104,108 @@        streamsConfiguration = new Properties();\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");"
  }
]