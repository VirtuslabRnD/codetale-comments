[
  {
    "id" : "e098280c-3457-4018-bb6c-6f625acac7d3",
    "prId" : 4832,
    "prUrl" : "https://github.com/apache/kafka/pull/4832#pullrequestreview-115894464",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac203545-0a94-439f-91e4-6a58e5a2ba1f",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "There's now a `Utils.mkProperties` method you can use (in conjunction with `mkMap`) to set these at the declaration site instead of setting them (redundantly) before every test. Then you won't need the `@Before` at all.",
        "createdAt" : "2018-04-26T18:10:15Z",
        "updatedAt" : "2018-04-26T19:12:58Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "eca0c033-4c7e-4e7e-8d07-d057acc11bb5",
        "parentId" : "ac203545-0a94-439f-91e4-6a58e5a2ba1f",
        "authorId" : "796fe0a1-c8b6-4b8f-a416-408b76bf799e",
        "body" : "Yes, that will make it a bit cleaner",
        "createdAt" : "2018-04-27T10:44:24Z",
        "updatedAt" : "2018-04-27T10:44:25Z",
        "lastEditedBy" : "796fe0a1-c8b6-4b8f-a416-408b76bf799e",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc5df4c3ba297c3fe2933b2adcb7ee623da698b3",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +68,72 @@        props.setProperty(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getAbsolutePath());\n        props.setProperty(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.setProperty(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n    }\n"
  },
  {
    "id" : "8a72fd8f-1eec-4bba-b07d-c7a96b8d3085",
    "prId" : 4832,
    "prUrl" : "https://github.com/apache/kafka/pull/4832#pullrequestreview-115894975",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "55b4fb7d-4644-44df-9b1d-fd85d317e188",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This cleanup seems a bit awkward. It assumes that tests will initialize the driver but not close it, which seems like a strange abdication of responsibility.\r\n\r\nI think it would be cleaner and clearer to get rid of the driver field entirely. Tests that need the driver already initialize it; they can declare it as a local variable as well. Then, they clearly need to close it as well.\r\n\r\nSince `TopologyTestDriver` is `AutoCloseable`, one option is to declare the driver in try-with-resources style:\r\n```java\r\n@Test public void myTest() {\r\n  try (final TopologyTestDriver driver) {\r\n    // the test code\r\n  }\r\n}\r\n```",
        "createdAt" : "2018-04-26T18:18:33Z",
        "updatedAt" : "2018-04-26T19:12:58Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "09386a34-9a66-43d6-8427-bbfea49b23c8",
        "parentId" : "55b4fb7d-4644-44df-9b1d-fd85d317e188",
        "authorId" : "796fe0a1-c8b6-4b8f-a416-408b76bf799e",
        "body" : "Yes, this is definitely better. Using try-with-resources and `Utils.mkProperties` we won't need `@Before` and `@After`",
        "createdAt" : "2018-04-27T10:46:46Z",
        "updatedAt" : "2018-04-27T10:46:46Z",
        "lastEditedBy" : "796fe0a1-c8b6-4b8f-a416-408b76bf799e",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc5df4c3ba297c3fe2933b2adcb7ee623da698b3",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +78,82 @@        }\n        driver = null;\n    }\n\n    @Test(expected = TopologyException.class)"
  },
  {
    "id" : "7eac6c4e-7e30-4de3-ae85-fc22dd5a35b9",
    "prId" : 5163,
    "prUrl" : "https://github.com/apache/kafka/pull/5163#pullrequestreview-127647803",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "865ec469-e6f5-4f80-84a8-6bc30c24e9c2",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Should we add this check to `shouldReuseSourceTopicAsChangelogsWithOptimization20`, too?",
        "createdAt" : "2018-06-10T20:46:01Z",
        "updatedAt" : "2018-06-11T17:05:19Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "a1b82816-e597-44a9-9ffe-4465239d89ca",
        "parentId" : "865ec469-e6f5-4f80-84a8-6bc30c24e9c2",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "ack.",
        "createdAt" : "2018-06-11T16:40:10Z",
        "updatedAt" : "2018-06-11T17:05:19Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca40f17ef652a219d23b27ed11e2e8d9dbb748ca",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +303,307 @@        assertThat(internalTopologyBuilder.build().storeToChangelogTopic(), equalTo(Collections.singletonMap(\"store\", \"appId-store-changelog\")));\n\n        assertThat(internalTopologyBuilder.getStateStores().keySet(), equalTo(Collections.singleton(\"store\")));\n\n        assertThat(internalTopologyBuilder.getStateStores().get(\"store\").loggingEnabled(), equalTo(true));"
  },
  {
    "id" : "d28c65c7-9fd1-4d28-8398-871f63de78fc",
    "prId" : 5201,
    "prUrl" : "https://github.com/apache/kafka/pull/5201#pullrequestreview-142222852",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5ef3e7b-d8c3-49c6-a2f9-bdbd3570573f",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Should we just do `final ProcessorTopology topology = builder.build();` and remove the line below? Same elsewhere.",
        "createdAt" : "2018-07-31T06:02:11Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "356286f9-4ae8-4eeb-930a-2e2c54a46bd5",
        "parentId" : "f5ef3e7b-d8c3-49c6-a2f9-bdbd3570573f",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Actually, we still need both The `StreamsBuilder.build()` call returns a `Topology` while the `InternalTopologyBuilder.build()` returns a `ProcessoryTopology`.   \r\n\r\n\r\nWhile the method names seem to be a bit overloaded, the terminology and methods pre-date this PR, so maybe we can do a follow-up PR to look at renaming and clarifying things some.",
        "createdAt" : "2018-08-01T01:41:57Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "8ba508b6-e6f7-4d32-8b64-e6b156a5d846",
        "parentId" : "f5ef3e7b-d8c3-49c6-a2f9-bdbd3570573f",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Ack, thanks for clarifying.",
        "createdAt" : "2018-08-01T04:13:11Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b49c4f31e1be598f1898d9d78dc0df7ecf8ab4c1",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +60,64 @@        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\").filter(MockPredicate.<Bytes, String>allGoodPredicate());\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.build();"
  },
  {
    "id" : "ce92b39b-bf1b-40b4-943a-e87a6334335d",
    "prId" : 5779,
    "prUrl" : "https://github.com/apache/kafka/pull/5779#pullrequestreview-163625802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a842be1-6b66-47d8-84a9-a9fc96b2c713",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "We do not need to use topology description here: only this test case is using it and other functions are relying on itb.",
        "createdAt" : "2018-10-11T02:12:51Z",
        "updatedAt" : "2018-12-09T06:42:30Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d02ad5bab3f2cf4ae2c11457e8dfe099d3a4b12",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +268,272 @@    public void shouldNotMaterializeStoresIfNotRequired() {\n        final String topic = \"topic\";\n        builder.table(topic, Materialized.with(Serdes.Long(), Serdes.String()));\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();"
  },
  {
    "id" : "a18cdea9-c551-482d-be02-935589bc3e38",
    "prId" : 6410,
    "prUrl" : "https://github.com/apache/kafka/pull/6410#pullrequestreview-213564689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4bd4b2b0-b2af-49e2-ae41-db9e140bdc3b",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "depending on the decision regarding naming sources for `builder.table` we'll need to update this test.",
        "createdAt" : "2019-03-12T19:44:06Z",
        "updatedAt" : "2019-04-18T08:31:45Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "6836d5c194464a200fe5edbc4500ef046a60d794",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +439,443 @@        assertSpecifiedNameForOperation(\n                topology,\n                expected,\n                expected + \"-table-source\",\n                \"KSTREAM-SOURCE-0000000002\","
  },
  {
    "id" : "889b6491-3850-4480-a267-556528db8e68",
    "prId" : 6410,
    "prUrl" : "https://github.com/apache/kafka/pull/6410#pullrequestreview-223948131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b10ea185-3407-489d-85f1-eb4c231ce4a8",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Not sure about this test the title says `shouldUseSpecifiedNameForGlobalTableSourceProcessor` but it's asserting the names of state-stores. But we can fix this in one of the following PRs.",
        "createdAt" : "2019-03-25T21:43:20Z",
        "updatedAt" : "2019-04-18T08:31:45Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "e2cf62bf-b3e2-4f0f-8bc9-7fec0a79d887",
        "parentId" : "b10ea185-3407-489d-85f1-eb4c231ce4a8",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "We should fix right away -- otherwise it might slip.",
        "createdAt" : "2019-04-08T17:23:46Z",
        "updatedAt" : "2019-04-18T08:31:45Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6836d5c194464a200fe5edbc4500ef046a60d794",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +446,450 @@\n    @Test\n    public void shouldUseSpecifiedNameForGlobalTableSourceProcessor() {\n        final String expected = \"source-processor\";\n        builder.globalTable(STREAM_TOPIC, Consumed.as(expected));"
  },
  {
    "id" : "115cfed7-b9dc-4e90-98f1-81a8260a8423",
    "prId" : 6410,
    "prUrl" : "https://github.com/apache/kafka/pull/6410#pullrequestreview-225435502",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00d56d36-cbea-48b4-a067-56d33dfae270",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why do we need to call `build()` here? (similar below)",
        "createdAt" : "2019-04-08T17:00:10Z",
        "updatedAt" : "2019-04-18T08:31:45Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "ed81512e-65a7-4f44-80cd-fc4c2f9d6107",
        "parentId" : "00d56d36-cbea-48b4-a067-56d33dfae270",
        "authorId" : "8090918c-29d3-43df-b67b-9b52e0bfe240",
        "body" : "It seems the build method  generates and adds the processors  into the InternalTopologyBuilder instance. If we don't invoke this method the TopologyProcessor is empty.",
        "createdAt" : "2019-04-11T09:51:33Z",
        "updatedAt" : "2019-04-18T08:31:45Z",
        "lastEditedBy" : "8090918c-29d3-43df-b67b-9b52e0bfe240",
        "tags" : [
        ]
      }
    ],
    "commit" : "6836d5c194464a200fe5edbc4500ef046a60d794",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +423,427 @@        builder.stream(STREAM_TOPIC, Consumed.as(expected));\n        builder.stream(STREAM_TOPIC_TWO);\n        builder.build();\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n        assertSpecifiedNameForOperation(topology, expected, \"KSTREAM-SOURCE-0000000000\");"
  },
  {
    "id" : "4712ddfb-fb9e-4bc8-9bff-1dacef887d42",
    "prId" : 6410,
    "prUrl" : "https://github.com/apache/kafka/pull/6410#pullrequestreview-225431419",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7f4277a-2b8d-4305-9609-aeb3a88a3b52",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why is this not zero but two? Seems we \"burn\" two indexes, but I am not sure why atm? Also, why is it `KSTREAM` instead of `KTABLE` ?",
        "createdAt" : "2019-04-08T17:19:51Z",
        "updatedAt" : "2019-04-18T08:31:45Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "1fda1fbd-249a-4cf5-848e-3e842ed7e11f",
        "parentId" : "c7f4277a-2b8d-4305-9609-aeb3a88a3b52",
        "authorId" : "8090918c-29d3-43df-b67b-9b52e0bfe240",
        "body" : "First, for topology backward-compatibility we still increment the counter used for naming processors. Then, builder.table() actually generates two nodes, one source node and one table node. Finally, we have a state store created for the table. The state store name is generated first this why if we don't provide a custome source name the node will be indexed -00001. However, the state store is not visible within the topology description. I guess this is because the state is considered not queriable.",
        "createdAt" : "2019-04-11T09:43:00Z",
        "updatedAt" : "2019-04-18T08:31:45Z",
        "lastEditedBy" : "8090918c-29d3-43df-b67b-9b52e0bfe240",
        "tags" : [
        ]
      }
    ],
    "commit" : "6836d5c194464a200fe5edbc4500ef046a60d794",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +441,445 @@                expected,\n                expected + \"-table-source\",\n                \"KSTREAM-SOURCE-0000000002\",\n                \"KTABLE-SOURCE-0000000003\");\n    }"
  },
  {
    "id" : "46bc9b5e-8ddf-4b25-bea5-e9048e81e624",
    "prId" : 6410,
    "prUrl" : "https://github.com/apache/kafka/pull/6410#pullrequestreview-223948131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "676b0a52-6961-4322-b063-64a5addb47b4",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "This is the name or the actual `Processor`, right (not the source node itself)? Maybe we should rename the suffix to `-processor` ?",
        "createdAt" : "2019-04-08T17:22:54Z",
        "updatedAt" : "2019-04-18T08:31:45Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6836d5c194464a200fe5edbc4500ef046a60d794",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +440,444 @@                topology,\n                expected,\n                expected + \"-table-source\",\n                \"KSTREAM-SOURCE-0000000002\",\n                \"KTABLE-SOURCE-0000000003\");"
  },
  {
    "id" : "6e9754f4-d17d-43d5-8405-a4ff047b25be",
    "prId" : 6410,
    "prUrl" : "https://github.com/apache/kafka/pull/6410#pullrequestreview-223948131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da0670ba-ad14-40ad-a0cb-81a0c97df1f2",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: it is naming a source node, not a processor node. -> `\"source\"`",
        "createdAt" : "2019-04-08T17:24:24Z",
        "updatedAt" : "2019-04-18T08:31:45Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6836d5c194464a200fe5edbc4500ef046a60d794",
    "line" : 160,
    "diffHunk" : "@@ -1,1 +447,451 @@    @Test\n    public void shouldUseSpecifiedNameForGlobalTableSourceProcessor() {\n        final String expected = \"source-processor\";\n        builder.globalTable(STREAM_TOPIC, Consumed.as(expected));\n        builder.globalTable(STREAM_TOPIC_TWO);"
  },
  {
    "id" : "f19ceea4-b97c-47de-beeb-1b4d066ae5e8",
    "prId" : 6411,
    "prUrl" : "https://github.com/apache/kafka/pull/6411#pullrequestreview-230416915",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f717e75b-0945-41cd-93c2-988b50f13f82",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Do we consider refactoring these tests with one comment function? I could see L485-487 are repeated multiple times.",
        "createdAt" : "2019-04-25T01:00:25Z",
        "updatedAt" : "2019-05-22T20:40:35Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "35e5b43a82d8ed6b0b086a6134820bed5945cf55",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +480,484 @@\n    @Test\n    public void shouldUseSpecifiedNameForMapOperation() {\n        builder.stream(STREAM_TOPIC).map(KeyValue::pair, Named.as(STREAM_OPERATION_NAME));\n        builder.build();"
  },
  {
    "id" : "7ff9fc36-4e78-479e-8513-2170b38adcb6",
    "prId" : 6411,
    "prUrl" : "https://github.com/apache/kafka/pull/6411#pullrequestreview-232643909",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b0d202a-1553-42f1-a969-4a898b4cb240",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "```suggestion\r\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\r\n```",
        "createdAt" : "2019-05-01T17:12:20Z",
        "updatedAt" : "2019-05-22T20:40:35Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "35e5b43a82d8ed6b0b086a6134820bed5945cf55",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +528,532 @@\n    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void shouldUseSpecifiedNameForTransformValues() {\n        builder.stream(STREAM_TOPIC).transformValues(() -> (ValueTransformer) null, Named.as(STREAM_OPERATION_NAME));"
  },
  {
    "id" : "0a91c03e-c1ff-4872-b0e3-480fc6dac725",
    "prId" : 6411,
    "prUrl" : "https://github.com/apache/kafka/pull/6411#pullrequestreview-232643909",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81ae6be9-adf9-4cfb-a9db-8e29ad479f1e",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "(applies to the methods below)\r\n\r\nJust as cleanup, can you:\r\n* add `@SuppressWarnings(\"rawtypes\")` to `assertSpecifiedNameForOperation`?\r\n* make `assertSpecifiedNameForOperation` and `assertSpecifiedNameForStateStore` to be `static`?\r\n* remove unnecessary qualifier `Assert.` from `assertEquals`?\r\n\r\nThanks!\r\n",
        "createdAt" : "2019-05-01T17:16:42Z",
        "updatedAt" : "2019-05-22T20:40:35Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "35e5b43a82d8ed6b0b086a6134820bed5945cf55",
    "line" : 268,
    "diffHunk" : "@@ -1,1 +705,709 @@        assertSpecifiedNameForOperation(topology, \"KSTREAM-SOURCE-0000000000\", STREAM_OPERATION_NAME);\n    }\n\n    private static void assertSpecifiedNameForOperation(final ProcessorTopology topology, final String... expected) {\n        final List<ProcessorNode> processors = topology.processors();"
  },
  {
    "id" : "33673155-d1a1-4b47-a385-cc510b861254",
    "prId" : 6413,
    "prUrl" : "https://github.com/apache/kafka/pull/6413#pullrequestreview-291344840",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f5d12ee-929f-422f-9748-11d867617f2b",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "It seems weird that these changed. Is that expected and ok?",
        "createdAt" : "2019-08-22T16:08:13Z",
        "updatedAt" : "2019-09-09T20:35:43Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "ba1236bb-27de-4556-8df4-67704a8c8801",
        "parentId" : "0f5d12ee-929f-422f-9748-11d867617f2b",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Hey @fhussonnois or @bbejeck , what do you think about this?",
        "createdAt" : "2019-09-20T19:03:44Z",
        "updatedAt" : "2019-09-20T19:05:27Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccdf00c957c81272ad8c12040efb8adcd9302f0b",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +452,456 @@        assertSpecifiedNameForOperation(\n                topology,\n                expected + \"-source\",\n                expected,\n                \"KSTREAM-SOURCE-0000000004\","
  },
  {
    "id" : "2cd53acb-79eb-4711-8e7d-92c5990cdf04",
    "prId" : 6754,
    "prUrl" : "https://github.com/apache/kafka/pull/6754#pullrequestreview-239048562",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02246191-1d10-44eb-9203-22e1ff064be2",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "These number changes are valid as 2 store names (internal, not visible for IQ) are generated.  I validated the topology description against a description generated by `2.2`",
        "createdAt" : "2019-05-17T15:01:45Z",
        "updatedAt" : "2019-05-17T18:07:20Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "998152b4-16dd-4980-ad4c-9ff10bcf1146",
        "parentId" : "02246191-1d10-44eb-9203-22e1ff064be2",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I see. So the diff we're seeing is against tests that were previously modified (incorrectly) to match the non-incrementing behavior that you're fixing right now?",
        "createdAt" : "2019-05-17T15:28:13Z",
        "updatedAt" : "2019-05-17T18:07:20Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "10e902f4-f571-4762-8d19-04bbdaa0c473",
        "parentId" : "02246191-1d10-44eb-9203-22e1ff064be2",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Yes, that is correct.",
        "createdAt" : "2019-05-17T15:43:40Z",
        "updatedAt" : "2019-05-17T18:07:20Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "245073b9-aa7c-4354-9db8-8f1550a05f6b",
        "parentId" : "02246191-1d10-44eb-9203-22e1ff064be2",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "perfect. thanks for the reassurance!",
        "createdAt" : "2019-05-17T16:57:29Z",
        "updatedAt" : "2019-05-17T18:07:20Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "3e8c6ff4-1518-4a25-9b40-44f2165b48f9",
        "parentId" : "02246191-1d10-44eb-9203-22e1ff064be2",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Actually, those test are newly added in a previous KIP-307 PR... But if Bill check agains 2.2, it should be fine.",
        "createdAt" : "2019-05-17T17:35:33Z",
        "updatedAt" : "2019-05-17T18:07:20Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d45d2ec564dbec53b656492863b65a5dba6a5641",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +441,445 @@                expected,\n                expected + \"-table-source\",\n                \"KSTREAM-SOURCE-0000000004\",\n                \"KTABLE-SOURCE-0000000005\");\n    }"
  },
  {
    "id" : "b817aee1-ad53-47f8-93bb-a126594c5ec4",
    "prId" : 6754,
    "prUrl" : "https://github.com/apache/kafka/pull/6754#pullrequestreview-238976312",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1f62b19-67df-42a1-a7a4-4c0e9d834073",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "First source node would be `KSTREAM-SOURCE-0000000000` so this is a valid change in the test",
        "createdAt" : "2019-05-17T15:02:56Z",
        "updatedAt" : "2019-05-17T18:07:20Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d45d2ec564dbec53b656492863b65a5dba6a5641",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +425,429 @@        builder.build();\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n        assertSpecifiedNameForOperation(topology, expected, \"KSTREAM-SOURCE-0000000001\");\n    }\n"
  },
  {
    "id" : "c021b4e8-2037-48f8-9b76-5591a55d32d3",
    "prId" : 6754,
    "prUrl" : "https://github.com/apache/kafka/pull/6754#pullrequestreview-238976312",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11b66266-32d7-4f69-8d9c-cab25ff163c4",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "The first source is `KSTREAM-SOURCE-0000000000` second would be `...01` so this change is correct.",
        "createdAt" : "2019-05-17T15:11:19Z",
        "updatedAt" : "2019-05-17T18:07:20Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "d45d2ec564dbec53b656492863b65a5dba6a5641",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +468,472 @@        builder.build();\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n        assertSpecifiedNameForOperation(topology, \"KSTREAM-SOURCE-0000000000\", expected, \"KSTREAM-SINK-0000000002\");\n    }\n"
  },
  {
    "id" : "2e2a3622-7ce2-448f-8049-0d621fb5b791",
    "prId" : 7285,
    "prUrl" : "https://github.com/apache/kafka/pull/7285#pullrequestreview-294541771",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df656c59-7a9b-4bd1-a0b1-63941493832f",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Can you elaborate on backward compatibility? Why do we need to update the test? Does this change indicate an incompatibility?",
        "createdAt" : "2019-09-26T17:05:13Z",
        "updatedAt" : "2019-09-28T16:01:43Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "f24a1f72-d6a8-472f-afe7-b0ad3c58d585",
        "parentId" : "df656c59-7a9b-4bd1-a0b1-63941493832f",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "This change to the test gets to the point of KIP-479.  Previously by naming the Join operator via `Joined` we were naming the processor, repartition topic, **_and_** the state store (hence changelog topic).  \r\n\r\nBut that is a breaking change for users using `Joined` going from  2.3 to 2.4.  By breaking the naming of the statestore from `Joined` the statestore here would revert to the generated name, breaking the test.  So instead of changing the expected topology, IMHO it's better to use `StreamJoined` to explicitly name the statestore here.  CF my previous comments https://github.com/apache/kafka/pull/7285#discussion_r320792207",
        "createdAt" : "2019-09-27T15:00:13Z",
        "updatedAt" : "2019-09-28T16:01:43Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "1403c1cf-52df-432c-b81c-7e862a1e0157",
        "parentId" : "df656c59-7a9b-4bd1-a0b1-63941493832f",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "So the change is just to use the new API. If we would leave `Joined.as()` the test would still pass.\r\n\r\nShould we have this test for old and new API to test compatibility? Or this this covered elsewhere?",
        "createdAt" : "2019-09-27T19:44:16Z",
        "updatedAt" : "2019-09-28T16:01:43Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "c2ef1f70-d5ac-49a9-b66a-ab67de3968c8",
        "parentId" : "df656c59-7a9b-4bd1-a0b1-63941493832f",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "If we kept `Joined.as()` the test will fail as it would not name the state store so the generated topology would be different from the expected topology.\r\nBut this is not a breaking change as only `trunk` has the behavior of Joined.as() naming the state stores.\r\n\r\nI can add a separate test using joined with a different topology showing that the store name is generated now.\r\nWDYT?",
        "createdAt" : "2019-09-27T19:51:16Z",
        "updatedAt" : "2019-09-28T16:01:43Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "9b08c2a8-6cfb-41a0-8fe4-3673036b2904",
        "parentId" : "df656c59-7a9b-4bd1-a0b1-63941493832f",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Ack. Thanks for the details.",
        "createdAt" : "2019-09-27T20:14:27Z",
        "updatedAt" : "2019-09-28T16:01:43Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a450c43edf7bb2cb5c110cc60136676c73903ca7",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +601,605 @@        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.leftJoin(streamTwo, (value1, value2) -> value1, JoinWindows.of(Duration.ofHours(1)), StreamJoined.<String, String, String>as(STREAM_OPERATION_NAME).withName(STREAM_OPERATION_NAME));\n        builder.build();\n"
  },
  {
    "id" : "d80981de-38cf-4f5c-8b52-7cefc521726d",
    "prId" : 7285,
    "prUrl" : "https://github.com/apache/kafka/pull/7285#pullrequestreview-294643170",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a47ab68-69cd-4eb0-ab18-0358e5005c62",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Test demonstrating using `Joined` no longer names stores.",
        "createdAt" : "2019-09-28T16:03:37Z",
        "updatedAt" : "2019-09-28T16:08:03Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a450c43edf7bb2cb5c110cc60136676c73903ca7",
    "line" : 167,
    "diffHunk" : "@@ -1,1 +620,624 @@    @Test\n    @Deprecated\n    public void shouldUseGeneratedStoreNamesForLeftJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);"
  },
  {
    "id" : "eb91d548-b224-44af-ab6f-36272584883f",
    "prId" : 7285,
    "prUrl" : "https://github.com/apache/kafka/pull/7285#pullrequestreview-294643170",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "390138be-cbe9-4e37-8392-364e3e2d46ec",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Test demonstrating using `Joined` no longer names stores.",
        "createdAt" : "2019-09-28T16:03:47Z",
        "updatedAt" : "2019-09-28T16:08:03Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a450c43edf7bb2cb5c110cc60136676c73903ca7",
    "line" : 215,
    "diffHunk" : "@@ -1,1 +667,671 @@    @Test\n    @Deprecated\n    public void shouldUseGeneratedNameForJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);"
  },
  {
    "id" : "08a6ea59-1771-4ead-a764-12c9e80021e6",
    "prId" : 7285,
    "prUrl" : "https://github.com/apache/kafka/pull/7285#pullrequestreview-294643170",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e565b02-f071-47b7-b7a0-348330efbf21",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Test demonstrating using `Joined` no longer names stores.",
        "createdAt" : "2019-09-28T16:06:12Z",
        "updatedAt" : "2019-09-28T16:08:03Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a450c43edf7bb2cb5c110cc60136676c73903ca7",
    "line" : 261,
    "diffHunk" : "@@ -1,1 +713,717 @@    @Test\n    @Deprecated\n    public void shouldUseGeneratedStoreNamesForOuterJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);"
  },
  {
    "id" : "37450fd8-ba3b-4f77-86b0-41b25476737f",
    "prId" : 8679,
    "prUrl" : "https://github.com/apache/kafka/pull/8679#pullrequestreview-414745406",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "441d213a-d513-4723-8c06-d3a04833e109",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Replicated the test for `through()` for `repartition()`.",
        "createdAt" : "2020-05-17T03:00:44Z",
        "updatedAt" : "2020-05-21T21:48:53Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "08f3b739-d97c-4fc1-a211-2befcfc640b4",
        "parentId" : "441d213a-d513-4723-8c06-d3a04833e109",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Thanks!",
        "createdAt" : "2020-05-19T19:21:15Z",
        "updatedAt" : "2020-05-21T21:48:54Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfcb6a3dce9ea006c43ddc1d502eccb07f879c10",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +289,293 @@\n    @Test\n    public void shouldProcessViaRepartitionTopic() {\n        final KStream<String, String> source = builder.stream(\"topic-source\");\n        final KStream<String, String> through = source.repartition();"
  }
]