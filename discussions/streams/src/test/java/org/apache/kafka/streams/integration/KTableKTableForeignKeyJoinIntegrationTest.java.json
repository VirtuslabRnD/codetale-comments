[
  {
    "id" : "66b6d41b-1292-4e04-b0f3-620b56769c3e",
    "prId" : 7517,
    "prUrl" : "https://github.com/apache/kafka/pull/7517#pullrequestreview-303035451",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a161fe30-abca-4ccb-8893-5b6b297a7749",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Should we test with caching (to make sure we execute the caching code path)? Note that TDD flushes after each `pipeInput()` anyway.",
        "createdAt" : "2019-10-15T20:35:14Z",
        "updatedAt" : "2019-10-16T19:55:24Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "52ad1019-8182-4abb-8c7f-478d5e9e45db",
        "parentId" : "a161fe30-abca-4ccb-8893-5b6b297a7749",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "yeah, I think it's an artifact. I'll remove it.",
        "createdAt" : "2019-10-15T21:31:12Z",
        "updatedAt" : "2019-10-16T19:55:24Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "9fff2f89-5664-4365-9376-feeec68dca7e",
        "parentId" : "a161fe30-abca-4ccb-8893-5b6b297a7749",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Huh. It looks like removing this results in not seeing all the tombstones we expect. I'll leave it in.",
        "createdAt" : "2019-10-16T17:22:10Z",
        "updatedAt" : "2019-10-16T19:55:24Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "e9e5be01-95b0-40ca-bda7-660d8ada001e",
        "parentId" : "a161fe30-abca-4ccb-8893-5b6b297a7749",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "That is weird. Can you investigate? It sound like it exposes a bug.",
        "createdAt" : "2019-10-16T18:58:59Z",
        "updatedAt" : "2019-10-16T19:55:24Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "68c1701f-7c29-4fc9-966c-8ddd99dfd5c4",
        "parentId" : "a161fe30-abca-4ccb-8893-5b6b297a7749",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Ok, I'll look into it.",
        "createdAt" : "2019-10-16T19:30:59Z",
        "updatedAt" : "2019-10-16T19:55:24Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "c14e76c5-6621-495b-a06b-ed98d53d4171",
        "parentId" : "a161fe30-abca-4ccb-8893-5b6b297a7749",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "If you're ok with it, I'll continue this investigation in a separate PR. It would be good to at least get this test improvement merged before figuring out why that cache is misbehaving.",
        "createdAt" : "2019-10-16T20:43:06Z",
        "updatedAt" : "2019-10-16T20:43:06Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "de6b54ea-5d15-45bf-ae74-c4d247843b58",
        "parentId" : "a161fe30-abca-4ccb-8893-5b6b297a7749",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Found in org.apache.kafka.streams.state.internals.CachingKeyValueStore#putAndMaybeForward:\r\n\r\n```java\r\n// this is an optimization: if this key did not exist in underlying store and also not in the cache,\r\n// we can skip flushing to downstream as well as writing to underlying store\r\n```\r\n\r\nSo, it actually is expected that in situations where the join result is actually materialized, we would not see duplicate tombstones (which some of the tests expect).\r\n\r\nWith this understanding in place, I'm going to leave this line here for now. I'm preparing a follow-on PR to make the `Materialized` parameter optional (and queriability optional even if you specify it). For that PR, I'll have to make specific assertions about this behavior anyway, so we'll have good test coverage there.",
        "createdAt" : "2019-10-17T03:05:22Z",
        "updatedAt" : "2019-10-17T03:05:22Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "585f9de4-a9e3-4ba6-82fd-1e04962bacca",
        "parentId" : "a161fe30-abca-4ccb-8893-5b6b297a7749",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Thanks!",
        "createdAt" : "2019-10-17T06:53:36Z",
        "updatedAt" : "2019-10-17T06:53:36Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6459ee0b5dac4f8f487d72c0b359184d1a145f0b",
    "line" : 1044,
    "diffHunk" : "@@ -1,1 +453,457 @@                .withKeySerde(Serdes.String())\n                .withValueSerde(Serdes.String())\n                .withCachingDisabled();\n\n        final Function<String, String> extractor = value -> value.split(\"\\\\|\")[1];"
  },
  {
    "id" : "3ed1489f-6044-4c77-bc2d-3a75dfd2c9dc",
    "prId" : 7517,
    "prUrl" : "https://github.com/apache/kafka/pull/7517#pullrequestreview-302806089",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33381a93-aedf-4a2f-aedb-35777e57581f",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: `shouldJoinAndDeleteFromLeftKTable`",
        "createdAt" : "2019-10-15T20:40:05Z",
        "updatedAt" : "2019-10-16T19:55:24Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "acc2b959-ef98-447f-9de7-5439ba68d538",
        "parentId" : "33381a93-aedf-4a2f-aedb-35777e57581f",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I left these names on purpose because they are describing the actions taken, not the result. If you want it called \"should\", it would be something like \"shouldWorkWhenJoiningFromTheLeftAndThenDeletingLeftEntity\", which seems vapid. It seemed fine to just describe these tests in terms of what they are doing, since it would be obvious that they're then verifying the result is correct.",
        "createdAt" : "2019-10-15T21:34:41Z",
        "updatedAt" : "2019-10-16T19:55:24Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "7e162308-35d9-4c22-86e2-841613957fa9",
        "parentId" : "33381a93-aedf-4a2f-aedb-35777e57581f",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Fine with me. It's just an name, and it's descriptive as-is.",
        "createdAt" : "2019-10-16T19:00:28Z",
        "updatedAt" : "2019-10-16T19:55:24Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6459ee0b5dac4f8f487d72c0b359184d1a145f0b",
    "line" : 357,
    "diffHunk" : "@@ -1,1 +85,89 @@\n    @Test\n    public void doJoinFromLeftThenDeleteLeftEntity() {\n        final Topology topology = getTopology(streamsConfig, \"store\", leftJoin);\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, streamsConfig)) {"
  },
  {
    "id" : "ebb2555c-f61b-4d7b-866b-f91a79e52210",
    "prId" : 7517,
    "prUrl" : "https://github.com/apache/kafka/pull/7517#pullrequestreview-302175970",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b2c84dc-dd37-49fc-87e2-7bc9d16b51e8",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "`shouldJoinAndDeleteFromRightTable`",
        "createdAt" : "2019-10-15T20:40:25Z",
        "updatedAt" : "2019-10-16T19:55:24Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6459ee0b5dac4f8f487d72c0b359184d1a145f0b",
    "line" : 490,
    "diffHunk" : "@@ -1,1 +163,167 @@\n    @Test\n    public void doJoinFromRightThenDeleteRightEntity() {\n        final Topology topology = getTopology(streamsConfig, \"store\", leftJoin);\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, streamsConfig)) {"
  }
]