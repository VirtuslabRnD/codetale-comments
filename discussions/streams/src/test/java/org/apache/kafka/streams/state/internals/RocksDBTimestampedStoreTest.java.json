[
  {
    "id" : "257fca8d-1ee3-441c-ad57-534fdb519399",
    "prId" : 6149,
    "prUrl" : "https://github.com/apache/kafka/pull/6149#pullrequestreview-194381060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50db86f7-07f1-4ccd-beaa-fe398b08b77b",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "This test let checkstyle fail because method was too long. Extracted some part into `prepareOldStore()` to fix checkstyle.",
        "createdAt" : "2019-01-20T07:12:52Z",
        "updatedAt" : "2019-01-30T17:46:21Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "88e573ccb6b6121f755461444c6ad90cf17d9d1d",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +49,53 @@    @Test\n    public void shouldMigrateDataFromDefaultToTimestampColumnFamily() throws Exception {\n        prepareOldStore();\n\n        LogCaptureAppender.setClassLoggerToDebug(RocksDBTimestampedStore.class);"
  },
  {
    "id" : "c301bd23-df6f-4d80-be24-304b35dcc0a6",
    "prId" : 7201,
    "prUrl" : "https://github.com/apache/kafka/pull/7201#pullrequestreview-274447757",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e39b3c03-0f97-4302-a8bc-62cb4b5cd7d7",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Do we know that `rocksdb.estimate-num-keys` would always return 0 and 1 in this test (since it is only an approximate estimate, hence no guarantee)?",
        "createdAt" : "2019-08-13T17:20:11Z",
        "updatedAt" : "2019-08-13T17:20:16Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "01303fc5-db4b-4025-9178-fd7b94db9314",
        "parentId" : "e39b3c03-0f97-4302-a8bc-62cb4b5cd7d7",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "It's no exact counting in general, but this this case we know it will be counting correctly However, the \"approximation\" is at least deterministic and hence, it seems safe to me to write the test that way.\r\n\r\nBasically, for each put() RocksDB increments the counter and for each delete() is decrements the counter. Hence, if you do a put() for an existing key, RockDB over counts, and if you do a delete() for a non-exiting key, RocksDB under counts.\r\n\r\nIn this test, we do a single put() on one CF and not operation on the other CF, hence, the count (ie, approximation) will be correct.\r\n\r\nThoughts?",
        "createdAt" : "2019-08-13T17:39:23Z",
        "updatedAt" : "2019-08-13T17:39:23Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "10151cc0-9549-4cfd-b78a-ad38892892f6",
        "parentId" : "e39b3c03-0f97-4302-a8bc-62cb4b5cd7d7",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "SG.",
        "createdAt" : "2019-08-13T17:43:42Z",
        "updatedAt" : "2019-08-13T17:43:42Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4aaffde5e87a9ce6c953e0710f956fbaa83a0670",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +101,105 @@\n            assertThat(db.get(noTimestampColumnFamily, \"key\".getBytes()), new IsNull<>());\n            assertThat(db.getLongProperty(noTimestampColumnFamily, \"rocksdb.estimate-num-keys\"), is(0L));\n            assertThat(db.get(withTimestampColumnFamily, \"key\".getBytes()).length, is(11));\n            assertThat(db.getLongProperty(withTimestampColumnFamily, \"rocksdb.estimate-num-keys\"), is(1L));"
  }
]