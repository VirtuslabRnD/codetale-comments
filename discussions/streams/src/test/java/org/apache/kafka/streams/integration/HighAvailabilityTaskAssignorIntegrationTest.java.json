[
  {
    "id" : "f9c9f011-f7ea-4a8a-97b9-3a8408953604",
    "prId" : 8818,
    "prUrl" : "https://github.com/apache/kafka/pull/8818#pullrequestreview-426397726",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b280b31-4124-47f8-b5c4-40206bdcbd6c",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Cool, I was kind of hoping you would put this in a separate integration test class",
        "createdAt" : "2020-06-08T16:12:14Z",
        "updatedAt" : "2020-06-11T03:33:04Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca56b56483788f64c3f12d7eddfcc0c87fe036c4",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +71,75 @@\n@Category(IntegrationTest.class)\npublic class HighAvailabilityTaskAssignorIntegrationTest {\n    @ClassRule\n    public static final EmbeddedKafkaCluster CLUSTER = new EmbeddedKafkaCluster(1);"
  },
  {
    "id" : "22d093c0-f04a-4e71-b8cf-a3da0c4df9b4",
    "prId" : 8818,
    "prUrl" : "https://github.com/apache/kafka/pull/8818#pullrequestreview-428444194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fc6b0be-7f5d-4700-b1e4-3402c161c05c",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: simplify -> `throws Exception` (also above)",
        "createdAt" : "2020-06-10T20:36:48Z",
        "updatedAt" : "2020-06-11T03:33:04Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "b2109091-68f1-4c67-b3bf-af3b90fb5c17",
        "parentId" : "5fc6b0be-7f5d-4700-b1e4-3402c161c05c",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "We'll have to agree to disagree on that ;) ",
        "createdAt" : "2020-06-10T21:33:14Z",
        "updatedAt" : "2020-06-11T03:33:04Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca56b56483788f64c3f12d7eddfcc0c87fe036c4",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +92,96 @@    }\n\n    private void shouldScaleOutWithWarmupTasks(final Function<String, Materialized<Object, Object, KeyValueStore<Bytes, byte[]>>> materializedFunction) throws InterruptedException {\n        final String testId = safeUniqueTestName(getClass(), testName);\n        final String appId = \"appId_\" + System.currentTimeMillis() + \"_\" + testId;"
  },
  {
    "id" : "3a3db607-d473-4102-a621-9e1920947d19",
    "prId" : 8818,
    "prUrl" : "https://github.com/apache/kafka/pull/8818#pullrequestreview-428464228",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b066c37b-929e-4562-ba23-dee695f34f93",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why set this? zero is the default anyway",
        "createdAt" : "2020-06-10T20:37:21Z",
        "updatedAt" : "2020-06-11T03:33:04Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "6452874b-5aad-4240-a9e7-47be76f8e322",
        "parentId" : "b066c37b-929e-4562-ba23-dee695f34f93",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Just to be explicit, since the test depends on the value of zero for its assertions.",
        "createdAt" : "2020-06-10T21:33:45Z",
        "updatedAt" : "2020-06-11T03:33:04Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "4690dfb2-d299-4a3b-9cb1-7a7be89c521c",
        "parentId" : "b066c37b-929e-4562-ba23-dee695f34f93",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Well, so it's a guard that we don't change the default? At least, a comment would be good -- otherwise, one might remove it.",
        "createdAt" : "2020-06-10T21:46:43Z",
        "updatedAt" : "2020-06-11T03:33:04Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "806858cb-793e-416b-866f-7d628ef943af",
        "parentId" : "b066c37b-929e-4562-ba23-dee695f34f93",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Not a guard per se, more like a narrative. The test explicitly expects no replicas, so we configure no replicas. As a reader of the test code, you shouldn't have to have memorized the default value of every configuration.",
        "createdAt" : "2020-06-10T22:12:43Z",
        "updatedAt" : "2020-06-11T03:33:04Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca56b56483788f64c3f12d7eddfcc0c87fe036c4",
    "line" : 260,
    "diffHunk" : "@@ -1,1 +258,262 @@                mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, appId),\n                mkEntry(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath()),\n                mkEntry(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, \"0\"),\n                mkEntry(StreamsConfig.ACCEPTABLE_RECOVERY_LAG_CONFIG, \"0\"), // make the warmup catch up completely\n                mkEntry(StreamsConfig.MAX_WARMUP_REPLICAS_CONFIG, \"2\"),"
  },
  {
    "id" : "959b2b4c-9d12-4849-9484-bb77028196c1",
    "prId" : 8818,
    "prUrl" : "https://github.com/apache/kafka/pull/8818#pullrequestreview-428451725",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0bf75dd-10b9-49a3-9141-c3efad7d0d03",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "The comment above say, the minimum is 60secs -- seems we control this minimum -- could we reduce it?",
        "createdAt" : "2020-06-10T20:38:11Z",
        "updatedAt" : "2020-06-11T03:33:04Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "9ed27a99-3954-4d6f-af72-a6f92909ae11",
        "parentId" : "e0bf75dd-10b9-49a3-9141-c3efad7d0d03",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "We could, but it would require a KIP update.\r\n\r\nhttps://cwiki.apache.org/confluence/display/KAFKA/KIP-441%3A+Smooth+Scaling+Out+for+Kafka+Streams#KIP441:SmoothScalingOutforKafkaStreams-Parameters\r\n\r\n> Must be at least 1 minute",
        "createdAt" : "2020-06-10T21:34:44Z",
        "updatedAt" : "2020-06-11T03:33:04Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "98ae0191-7775-4a7e-9b8e-f8c615e0b0d5",
        "parentId" : "e0bf75dd-10b9-49a3-9141-c3efad7d0d03",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I see.",
        "createdAt" : "2020-06-10T21:47:04Z",
        "updatedAt" : "2020-06-11T03:33:04Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca56b56483788f64c3f12d7eddfcc0c87fe036c4",
    "line" : 263,
    "diffHunk" : "@@ -1,1 +261,265 @@                mkEntry(StreamsConfig.ACCEPTABLE_RECOVERY_LAG_CONFIG, \"0\"), // make the warmup catch up completely\n                mkEntry(StreamsConfig.MAX_WARMUP_REPLICAS_CONFIG, \"2\"),\n                mkEntry(StreamsConfig.PROBING_REBALANCE_INTERVAL_MS_CONFIG, \"60000\"),\n                mkEntry(StreamsConfig.InternalConfig.ASSIGNMENT_LISTENER, configuredAssignmentListener),\n                mkEntry(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, \"100\"),"
  },
  {
    "id" : "6926d14b-12b8-49c8-96d1-5c7d3ffa7750",
    "prId" : 8818,
    "prUrl" : "https://github.com/apache/kafka/pull/8818#pullrequestreview-428466536",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2d6d707b-4d82-4385-8524-82b48d400c34",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "This should never be called -- would it be simpler if the just throw an exception if and of the listener methods is called?",
        "createdAt" : "2020-06-10T21:02:51Z",
        "updatedAt" : "2020-06-11T03:33:04Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "9faa3df3-1049-4442-bc6e-94185c97186f",
        "parentId" : "2d6d707b-4d82-4385-8524-82b48d400c34",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I'm not sure; that seems to make assumptions about how exactly the restore logic would behave when you're already caught up.\r\n\r\nI guess the same reasoning would apply to the other callback, we should never call it with a nonzero number of restored records, so we could just throw an exception from the callback.\r\n\r\nIn both cases, though, it seems better to make assertions in the scope of the test, rather than deep inside a callback in one of the threads in one of the streams instances and hope that it somehow bubbles up into a test failure.",
        "createdAt" : "2020-06-10T22:17:26Z",
        "updatedAt" : "2020-06-11T03:33:04Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "ca56b56483788f64c3f12d7eddfcc0c87fe036c4",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +183,187 @@                                            final long batchEndOffset,\n                                            final long numRestored) {\n                    instance1NumRestored.accumulateAndGet(\n                        numRestored,\n                        (prev, restored) -> prev == -1 ? restored : prev + restored"
  },
  {
    "id" : "16f0c10a-dc75-4e30-9451-e66ec12627fb",
    "prId" : 9383,
    "prUrl" : "https://github.com/apache/kafka/pull/9383#pullrequestreview-504989062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6097e487-c08f-4676-a886-8208638868a7",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Can we add a comment here explaining why we set the thread count so high? I feel like we'll forget and be really confused when we stumble across this in the future.",
        "createdAt" : "2020-10-08T17:04:00Z",
        "updatedAt" : "2020-10-16T15:33:01Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "382125a3d709568f8d62ac76300e79730e7b64d6",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +289,293 @@                mkEntry(StreamsConfig.InternalConfig.INTERNAL_TASK_ASSIGNOR_CLASS, HighAvailabilityTaskAssignor.class.getName()),\n                // Increasing the number of threads to ensure that a rebalance happens each time a consumer sends a rejoin (KAFKA-10455)\n                mkEntry(StreamsConfig.NUM_STREAM_THREADS_CONFIG, 40)\n            )\n        );"
  }
]