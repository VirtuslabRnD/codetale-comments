[
  {
    "id" : "394632c7-d0f7-4653-bb00-0b7aaa1798bf",
    "prId" : 5323,
    "prUrl" : "https://github.com/apache/kafka/pull/5323#pullrequestreview-134068038",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a10cf1b4-355f-40b0-a93c-dabb6b95b2fe",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I've also included some general cleanup of warnings.",
        "createdAt" : "2018-07-03T16:07:39Z",
        "updatedAt" : "2018-08-01T16:09:40Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1375356d9dbd23051ecdd3ce171dbf0d6040ec6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +39,43 @@    @Test(expected = NullPointerException.class)\n    public void shouldThrowIfIMemoryKeyValueStoreStoreNameIsNull() {\n        //noinspection ResultOfMethodCallIgnored\n        Stores.inMemoryKeyValueStore(null);\n    }"
  },
  {
    "id" : "2bf5826f-18fd-4072-b940-cb07c5610159",
    "prId" : 6297,
    "prUrl" : "https://github.com/apache/kafka/pull/6297#pullrequestreview-206033727",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3ee865c4-433d-42dd-8e6c-30e780d49a3c",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "We we improve this test class further (this method is ok I guess). Methods below for example:\r\n```\r\n    @Test\r\n    public void shouldBuildKeyValueStore() {\r\n        final KeyValueStore<String, String> store = Stores.keyValueStoreBuilder(\r\n            Stores.persistentKeyValueStore(\"name\"),\r\n            Serdes.String(),\r\n            Serdes.String()\r\n        ).build();\r\n        assertThat(store, not(nullValue()));\r\n    }\r\n```\r\nOnly check for not-`null` what seems to be a poor verification. (Maybe others can be improved, too).",
        "createdAt" : "2019-02-20T20:45:52Z",
        "updatedAt" : "2019-02-20T20:46:36Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "77c7a551-20e9-4481-95d1-b9cd0ed4a63b",
        "parentId" : "3ee865c4-433d-42dd-8e6c-30e780d49a3c",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "I agree but since the release is coming up my preference is to do this in a follow-up PR so we can get this merged sooner.",
        "createdAt" : "2019-02-20T21:04:11Z",
        "updatedAt" : "2019-02-20T21:04:17Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "edc5834d-9ba5-43a9-b18d-395a9966c7d2",
        "parentId" : "3ee865c4-433d-42dd-8e6c-30e780d49a3c",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Just to pile on other testing ideas, we can verify an exact type bound by checking assignability from both sides (since assignability is `<=` for types).\r\n\r\nLike `store.getClass().isAssignableFrom(RocksDBStore.class)) && RocksDBStore.class.isAssignableFrom(store.getClass())`.\r\n\r\nBut I'm also in favor of doing this in a follow-up, since the fix itself looks \"obviously\" correct.",
        "createdAt" : "2019-02-20T22:26:01Z",
        "updatedAt" : "2019-02-20T22:26:14Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8c4187fbad271cd9e22001c9dc93df594f78e67",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +116,120 @@    @Test\n    public void shouldCreateRocksDbStore() {\n        assertThat(Stores.persistentKeyValueStore(\"store\").get(), allOf(not(instanceOf(RocksDBTimestampedStore.class)), instanceOf(RocksDBStore.class)));\n    }\n"
  }
]