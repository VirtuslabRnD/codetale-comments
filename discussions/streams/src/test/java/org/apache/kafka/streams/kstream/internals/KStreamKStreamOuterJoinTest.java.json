[
  {
    "id" : "89d73bdc-87e6-4df8-8ee0-674722516748",
    "prId" : 10462,
    "prUrl" : "https://github.com/apache/kafka/pull/10462#pullrequestreview-640054216",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8566dde5-8284-4f17-83b6-70416a7d5da4",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Thanks for the added tests! I'm wondering if we can add a case for both left/outer where input streams have consecutive records with exact key / timestamps --- i.e. they are \"duplicates\" --- and check that 1) we do not de-duplicate them, 2) when a join is not found in time, we expire / delete them together, with two emitted results, 3) when a join is found in time, we emitted two join results.\r\n\r\nAlso could we have a test case that, when a single record both causes expiration and join results, the emitted records are still sorted in order.\r\n\r\nI raised them only because I have yet found these two cases in the test cases, if there's already coverage please ignore this comment.",
        "createdAt" : "2021-04-19T23:35:23Z",
        "updatedAt" : "2021-04-28T11:46:57Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "0d0f90a0-cd42-4497-a0ed-8db653730637",
        "parentId" : "8566dde5-8284-4f17-83b6-70416a7d5da4",
        "authorId" : "92abc720-96d9-4067-bc18-9bf1fa4019a1",
        "body" : "Most of them were already there. I just updated them to add the 3) scenario. \r\n```\r\nKStreamKStreamLeftJoinTest\r\n- testLeftJoinDuplicates()\r\n- testLeftJoinDuplicatesWithFixDisabled()\r\n- testOrdering()\r\n\r\nKStreamKStreamOuterJoinTest\r\n- testOuterJoinDuplicates()\r\n- testOuterJoinDuplicatesWithFixDisabled()\r\n- testOrdering()\r\n\r\n```",
        "createdAt" : "2021-04-20T14:50:50Z",
        "updatedAt" : "2021-04-28T11:46:57Z",
        "lastEditedBy" : "92abc720-96d9-4067-bc18-9bf1fa4019a1",
        "tags" : [
        ]
      }
    ],
    "commit" : "f10ff2ca65515666c40469de2b8cc81f5c78c509",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +46,50 @@import static org.junit.Assert.assertEquals;\n\npublic class KStreamKStreamOuterJoinTest {\n    private final static KeyValueTimestamp[] EMPTY = new KeyValueTimestamp[0];\n"
  }
]