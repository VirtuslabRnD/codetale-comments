[
  {
    "id" : "55d765fe-2962-459b-a032-0f8df44ba8d7",
    "prId" : 4758,
    "prUrl" : "https://github.com/apache/kafka/pull/4758#pullrequestreview-107117947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40c8f810-e7a1-40f8-a999-b5e379b5faaf",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Admittedly, this is a random time to bring this up, but a pattern that I like for this is:\r\n```java\r\nfinal long seed = providedSeed != null ? providedSeed : new Random().nextLong();\r\nSystem.out.println(\"Seed is: \" + seed);\r\nfinal Random rand = new Random(seed);\r\n```\r\nwhere `providedSeed` comes from an env variable, command-line arg, whatever...\r\n\r\nThis way you get the same default behavior (pseudorandomly generated sequence of test values), but you also have the option to deterministically reproduce a previous pseudorandom sequence from a prior run. This can be helpful in diagnosing flaky tests.\r\n\r\nNot saying this is needed here; I just wanted to share the pattern.",
        "createdAt" : "2018-03-27T00:07:07Z",
        "updatedAt" : "2018-03-27T00:18:55Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "6949d213-5b04-4f72-a72d-8e82a7bf3bd6",
        "parentId" : "40c8f810-e7a1-40f8-a999-b5e379b5faaf",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Basically I agree. So far, we did not have any issues with `Random` introducing flakiness that we cannot reproduce. However, I am not sure if `seed = new Random().nextLong()` is a good seed -- isn't this also deterministic? I am used to `seed = System.currentTimeMillis()` ?",
        "createdAt" : "2018-03-27T00:27:33Z",
        "updatedAt" : "2018-03-27T00:27:33Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1cb064a5d0891c989ee8a725d115d21dbe82aed1",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +156,160 @@            allData.put(data[i].key, new HashSet<Integer>());\n        }\n        final Random rand = new Random();\n\n        int remaining = 1; // dummy value must be positive if <autoTerminate> is false"
  }
]