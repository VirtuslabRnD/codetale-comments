[
  {
    "id" : "db318b42-2c38-4760-a432-e89b78eb10a6",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-306850954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10070042-efe8-4994-ad71-135883523e00",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Should we add different timestamps? Also include out-of-order data to check that output timestamp is computed correctly?",
        "createdAt" : "2019-10-22T19:01:38Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "69b13454-d9d4-4638-8e6a-4ebef569a4d6",
        "parentId" : "10070042-efe8-4994-ad71-135883523e00",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "There are other tests that use different timestamps and out of order. This is making sure it handles all cases",
        "createdAt" : "2019-10-24T20:41:31Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 196,
    "diffHunk" : "@@ -1,1 +194,198 @@            testInputTopic.pipeInput(\"k2\", \"B\", 0);\n            testInputTopic.pipeInput(\"k2\", \"B\", 0);\n            testInputTopic.pipeInput(\"k1\", \"A\", 0);\n\n            assertOutputKeyValueTimestamp(testOutputTopic, \"k1\", \"A\", 0);"
  },
  {
    "id" : "63e4e2c9-24f9-460a-ac52-cd64c701327c",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-312784662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14ccc7f3-323a-4033-acee-3cf2013c3978",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Not sure what this test covers?",
        "createdAt" : "2019-10-22T19:06:34Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "b5dab655-7222-42a1-827c-5eca65cbacd3",
        "parentId" : "14ccc7f3-323a-4033-acee-3cf2013c3978",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "it combines different aggregators",
        "createdAt" : "2019-10-24T20:25:27Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      },
      {
        "id" : "3a974277-28c5-467f-8219-cfa98db04902",
        "parentId" : "14ccc7f3-323a-4033-acee-3cf2013c3978",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Well, `shouldCoGroupStreamsWithDifferentInputTypes` above uses two different aggregator already because the input type are different. Can we consider this test redundant?",
        "createdAt" : "2019-10-25T07:28:19Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "90b0125b-5c0e-483e-94cf-51f91feb7c0f",
        "parentId" : "14ccc7f3-323a-4033-acee-3cf2013c3978",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "Yes and no. It does use 2 aggregators but they effectively do that same thing. This time since the produce different outputs it is testing that the aggregators were applied to the correct stream. Whereas the other case is get testing if different aggregators work. it might be a trivial distinction with quite a bit of overlap but I think that it serves a purpose.",
        "createdAt" : "2019-11-06T22:21:30Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 433,
    "diffHunk" : "@@ -1,1 +431,435 @@\n    @Test\n    public void testCogroupKeyMixedAggregators() {\n        final KStream<String, String> stream1 = builder.stream(\"one\", stringConsumed);\n        final KStream<String, String> stream2 = builder.stream(\"two\", stringConsumed);"
  },
  {
    "id" : "4f7456a5-88ae-45d6-96e3-1d3180f9a15d",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-323292243",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6a86f44-bc20-41df-a8a1-30c51a833d48",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "`aggregate()` got more overload taking `Named` parameter -- please add corresponding NPE tests",
        "createdAt" : "2019-11-26T00:38:26Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "77256966-ad9b-4e60-9404-d7ec4a74df77",
        "parentId" : "c6a86f44-bc20-41df-a8a1-30c51a833d48",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "good idea\r\n",
        "createdAt" : "2019-11-26T21:21:30Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +120,124 @@    @Test(expected = NullPointerException.class)\n    public void shouldNotHaveNullMaterializedOnAggregate() {\n        cogroupedStream.aggregate(STRING_INITIALIZER, (Materialized<String, String, KeyValueStore<Bytes, byte[]>>) null);\n    }\n"
  },
  {
    "id" : "3234594f-daa8-474b-8c5e-de173fc6893a",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-324915131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "337943bd-5c07-45da-bba8-8b7f8d8cd20a",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Added couple of more permutations for NPE tests.",
        "createdAt" : "2019-12-01T00:56:15Z",
        "updatedAt" : "2019-12-01T00:56:16Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +95,99 @@    @Test(expected = NullPointerException.class)\n    public void shouldNotHaveNullInitializerOnAggregate() {\n        cogroupedStream.aggregate(null);\n    }\n"
  },
  {
    "id" : "6660d7f8-55cf-4371-948e-7cc5b3251bae",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-324915141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93b3f5ee-614c-49be-be1f-c5063f50d89a",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Also set the store name in this test.",
        "createdAt" : "2019-12-01T00:56:34Z",
        "updatedAt" : "2019-12-01T00:56:34Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +144,148 @@            .cogroup(STRING_AGGREGATOR)\n            .cogroup(groupedTwo, STRING_AGGREGATOR)\n            .aggregate(STRING_INITIALIZER, Named.as(\"test\"), Materialized.as(\"store\"));\n\n        customers.toStream().to(OUTPUT);"
  },
  {
    "id" : "ce4efc8a-f5d5-438e-b877-1b2d69357574",
    "prId" : 7792,
    "prUrl" : "https://github.com/apache/kafka/pull/7792#pullrequestreview-330373451",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c61a21d-b77c-4565-91ec-b729c62958e4",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: no need to specify names, as this test verifies that we insert repartition topics correctly. (I basic test principle is to only do the minimum to express the test -- otherwise, it may be distracting from the purpose of the test, ie, the reader ask, why did we specify those name? How is it related?)",
        "createdAt" : "2019-12-09T03:07:19Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "788e15fc-cc69-4462-9628-4a0f6de2af08",
        "parentId" : "9c61a21d-b77c-4565-91ec-b729c62958e4",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "I thought that it made the topology description easier to read but it's not a hill I am willing to die on",
        "createdAt" : "2019-12-09T22:54:05Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      },
      {
        "id" : "031eab69-1bc7-4557-9a5b-63349ec69852",
        "parentId" : "9c61a21d-b77c-4565-91ec-b729c62958e4",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Ack. We have a test without explicit naming below, so both cases are covered.",
        "createdAt" : "2019-12-11T09:26:29Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8905f9b9777abcf47073456d2d2db72858993d6f",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +247,251 @@                .cogroup(STRING_AGGREGATOR)\n                .cogroup(groupedTwo, STRING_AGGREGATOR)\n                .aggregate(STRING_INITIALIZER, Named.as(\"test\"), Materialized.as(\"store\"));\n\n        customers.toStream().to(OUTPUT);"
  },
  {
    "id" : "b3f42f83-7f4c-4a45-abfe-db8b97d88737",
    "prId" : 7792,
    "prUrl" : "https://github.com/apache/kafka/pull/7792#pullrequestreview-330886758",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fccdc233-201b-4665-9a4f-c337ebd3a823",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "prop: simplify `map().groupByKey()` to `groupBy()` ?",
        "createdAt" : "2019-12-11T09:25:56Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "eee318e1-63e8-499c-bc61-bec727863625",
        "parentId" : "fccdc233-201b-4665-9a4f-c337ebd3a823",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "I think the `map().groupByKey()` makes it easier to conceptualize the topology.",
        "createdAt" : "2019-12-11T22:29:49Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8905f9b9777abcf47073456d2d2db72858993d6f",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +241,245 @@        final KStream<String, String> test2 = builder.stream(\"two\", stringConsumed);\n\n        final KGroupedStream<String, String> groupedOne = stream1.map((k, v) -> new KeyValue<>(v, k)).groupByKey();\n        final KGroupedStream<String, String> groupedTwo = test2.groupByKey();\n"
  },
  {
    "id" : "3d3250c1-9ac6-4892-815f-e2305c9d703e",
    "prId" : 7792,
    "prUrl" : "https://github.com/apache/kafka/pull/7792#pullrequestreview-331439789",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78c67ffc-1352-46b6-825b-4ed0018c7cf6",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why does `store` appear in the name instead of `test`? \\cc @bbejeck What was our naming schema for repartition topics? IIRC, we use the processor name (which one, the one from `Grouped` or the downstream from `aggregate()`), not the store name (the store name would only be used for changelog topics?)",
        "createdAt" : "2019-12-11T09:31:49Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "779a3044-16bb-42e0-b9b6-c9058e503b0f",
        "parentId" : "78c67ffc-1352-46b6-825b-4ed0018c7cf6",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "` final String repartitionTopicPrefix = userProvidedRepartitionTopicName != null ? userProvidedRepartitionTopicName : storeBuilder.name();`\r\n`sourceName = createRepartitionSource(repartitionTopicPrefix, repartitionNodeBuilder);`\r\n\r\nthis is what I can see being used previously.",
        "createdAt" : "2019-12-11T22:32:13Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      },
      {
        "id" : "0edfc742-8652-4822-bde7-283902a17b14",
        "parentId" : "78c67ffc-1352-46b6-825b-4ed0018c7cf6",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "@bbejeck I double checked, and `stream.map().groupByKey().aggregate(..., Materialized.as(\"store\"))` follow the same naming pattern. Hence, we are good here, IMHO.",
        "createdAt" : "2019-12-12T06:58:57Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "8cc5fae8-96ad-452a-be37-ea263ad41caa",
        "parentId" : "78c67ffc-1352-46b6-825b-4ed0018c7cf6",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "@wcarlson5 yes, I was referring to this code snipped -- it's tested above in the new test `shouldNameRepartitionTopic()`",
        "createdAt" : "2019-12-12T07:00:09Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "1012e41b-d6aa-4b68-b800-be57437a0129",
        "parentId" : "78c67ffc-1352-46b6-825b-4ed0018c7cf6",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "glad we are on the same page",
        "createdAt" : "2019-12-12T18:39:12Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8905f9b9777abcf47073456d2d2db72858993d6f",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +262,266 @@                        \"      --> store-repartition-filter\\n\" +\n                        \"      <-- KSTREAM-SOURCE-0000000000\\n\" +\n                        \"    Processor: store-repartition-filter (stores: [])\\n\" +\n                        \"      --> store-repartition-sink\\n\" +\n                        \"      <-- KSTREAM-MAP-0000000002\\n\" +"
  },
  {
    "id" : "4aa439b6-ce15-4fd1-969c-ab9a3fc84e50",
    "prId" : 7792,
    "prUrl" : "https://github.com/apache/kafka/pull/7792#pullrequestreview-330373451",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20a26838-b0a5-42eb-bfb4-812eac4af23a",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "as above",
        "createdAt" : "2019-12-11T09:39:52Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8905f9b9777abcf47073456d2d2db72858993d6f",
    "line" : 145,
    "diffHunk" : "@@ -1,1 +295,299 @@        final KStream<String, String> stream2 = builder.stream(\"two\", stringConsumed);\n\n        final KGroupedStream<String, String> groupedOne = stream1.map((k, v) -> new KeyValue<>(v, k)).groupByKey();\n        final KGroupedStream<String, String> groupedTwo = stream2.groupByKey();\n"
  },
  {
    "id" : "86257407-40a9-42c0-80a3-aa241a9b977e",
    "prId" : 7792,
    "prUrl" : "https://github.com/apache/kafka/pull/7792#pullrequestreview-330886758",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "001de420-ffef-481b-878e-bae2233e0557",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Seem there is a naming \"gap\" -- existing code name the sink `KSTREAM-...` while new code uses `COGROUPKSTREAM` (might be worth to align and use `KSTREAM-...`, in the new code, too?",
        "createdAt" : "2019-12-11T10:02:17Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "04089a2f-4092-451f-9c10-cabcac9554e8",
        "parentId" : "001de420-ffef-481b-878e-bae2233e0557",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "Maybe, I not sure. I would prefer to change the sink to Cogrouped but I don't see an elegant way to do that",
        "createdAt" : "2019-12-11T22:39:56Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8905f9b9777abcf47073456d2d2db72858993d6f",
    "line" : 467,
    "diffHunk" : "@@ -1,1 +617,621 @@                        \"    Sink: COGROUPKSTREAM-AGGREGATE-STATE-STORE-0000000003-repartition-sink (topic: COGROUPKSTREAM-AGGREGATE-STATE-STORE-0000000003-repartition)\\n\" +\n                        \"      <-- COGROUPKSTREAM-AGGREGATE-STATE-STORE-0000000003-repartition-filter\\n\" +\n                        \"    Sink: KSTREAM-SINK-0000000012 (topic: KSTREAM-AGGREGATE-STATE-STORE-0000000010-repartition)\\n\" +\n                        \"      <-- KSTREAM-FILTER-0000000013\\n\\n\" +\n                        \"  Sub-topology: 1\\n\" +"
  },
  {
    "id" : "72dc9c2f-c2e6-47b3-be83-6ff33207a4c5",
    "prId" : 7792,
    "prUrl" : "https://github.com/apache/kafka/pull/7792#pullrequestreview-330886758",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1274e6b4-604f-4eee-ac1c-79eb11dad14d",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Sweet that the optimizer is able to detect and handle this case correctly!",
        "createdAt" : "2019-12-11T10:04:03Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "b6021fd3-fa6e-4fbd-946d-faa05c8ac0db",
        "parentId" : "1274e6b4-604f-4eee-ac1c-79eb11dad14d",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "I know right!",
        "createdAt" : "2019-12-11T22:38:44Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8905f9b9777abcf47073456d2d2db72858993d6f",
    "line" : 525,
    "diffHunk" : "@@ -1,1 +675,679 @@                        \"      <-- KSTREAM-MAP-0000000002\\n\" +\n                        \"    Sink: COGROUPKSTREAM-AGGREGATE-STATE-STORE-0000000003-repartition-sink (topic: COGROUPKSTREAM-AGGREGATE-STATE-STORE-0000000003-repartition)\\n\" +\n                        \"      <-- COGROUPKSTREAM-AGGREGATE-STATE-STORE-0000000003-repartition-filter\\n\\n\" +\n                        \"  Sub-topology: 1\\n\" +\n                        \"    Source: COGROUPKSTREAM-AGGREGATE-STATE-STORE-0000000003-repartition-source (topics: [COGROUPKSTREAM-AGGREGATE-STATE-STORE-0000000003-repartition])\\n\" +"
  },
  {
    "id" : "6f2d8456-6aaf-40c2-8733-c716151913a8",
    "prId" : 7792,
    "prUrl" : "https://github.com/apache/kafka/pull/7792#pullrequestreview-331936661",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f93d751-87ee-43a6-97e0-a3444726fc85",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "For this test, I'd expect only 2 sub-topologies vs. 3 since `groupedOne` and `groupedFour` have the same key-changing parent.  I'm not sure, I'll have to look into the optimizer code, but I don't think it should hold up the PR though.",
        "createdAt" : "2019-12-12T20:46:43Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "21065942-0d26-4ff7-81ff-49758dc82f49",
        "parentId" : "3f93d751-87ee-43a6-97e0-a3444726fc85",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I think 3 is fine. Note that it's two `map` operators, and the optimizer cannot know that both use the same `Mapper`, ie, each map() could set a different key and thus both cannot be merged.\r\n\r\nIt would be the same key changing parent if the program would be:\r\n```\r\nfinal KStream<String, String> stream1 = builder.stream(\"one\", stringConsumed).map((k, v) -> new KeyValue<>(v, k));\r\nfinal KStream<String, String> stream2 = builder.stream(\"two\", stringConsumed);\r\nfinal KStream<String, String> stream3 = builder.stream(\"three\", stringConsumed);\r\n\r\nfinal KGroupedStream<String, String> groupedOne = stream1.groupByKey();\r\nfinal KGroupedStream<String, String> groupedTwo = stream2.groupByKey();\r\nfinal KGroupedStream<String, String> groupedThree = stream3.groupByKey();\r\nfinal KGroupedStream<String, String> groupedFour = stream1.groupByKey();\r\n```\r\n\r\nDoes this make sense?",
        "createdAt" : "2019-12-13T07:29:36Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "8410bdfa-f296-47de-8298-92ab8bf26f25",
        "parentId" : "3f93d751-87ee-43a6-97e0-a3444726fc85",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Yep, that's exactly what I wanted to confirm.  After reading your comment I remembered now that it's the reuse of a `KStream` object with the `needsRepartititoning` set to `true` where the optimizer will collapse multiple repartitions",
        "createdAt" : "2019-12-13T15:23:15Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "8905f9b9777abcf47073456d2d2db72858993d6f",
    "line" : 546,
    "diffHunk" : "@@ -1,1 +696,700 @@\n    @Test\n    public void shouldInsertRepartitionsTopicForUpstreamKeyModificationWithGroupedRemadeWithOptimization() {\n        final StreamsBuilder builder = new StreamsBuilder();\n"
  }
]