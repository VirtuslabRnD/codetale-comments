[
  {
    "id" : "db318b42-2c38-4760-a432-e89b78eb10a6",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-306850954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10070042-efe8-4994-ad71-135883523e00",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Should we add different timestamps? Also include out-of-order data to check that output timestamp is computed correctly?",
        "createdAt" : "2019-10-22T19:01:38Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "69b13454-d9d4-4638-8e6a-4ebef569a4d6",
        "parentId" : "10070042-efe8-4994-ad71-135883523e00",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "There are other tests that use different timestamps and out of order. This is making sure it handles all cases",
        "createdAt" : "2019-10-24T20:41:31Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 196,
    "diffHunk" : "@@ -1,1 +194,198 @@            testInputTopic.pipeInput(\"k2\", \"B\", 0);\n            testInputTopic.pipeInput(\"k2\", \"B\", 0);\n            testInputTopic.pipeInput(\"k1\", \"A\", 0);\n\n            assertOutputKeyValueTimestamp(testOutputTopic, \"k1\", \"A\", 0);"
  },
  {
    "id" : "63e4e2c9-24f9-460a-ac52-cd64c701327c",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-312784662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14ccc7f3-323a-4033-acee-3cf2013c3978",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Not sure what this test covers?",
        "createdAt" : "2019-10-22T19:06:34Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "b5dab655-7222-42a1-827c-5eca65cbacd3",
        "parentId" : "14ccc7f3-323a-4033-acee-3cf2013c3978",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "it combines different aggregators",
        "createdAt" : "2019-10-24T20:25:27Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      },
      {
        "id" : "3a974277-28c5-467f-8219-cfa98db04902",
        "parentId" : "14ccc7f3-323a-4033-acee-3cf2013c3978",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Well, `shouldCoGroupStreamsWithDifferentInputTypes` above uses two different aggregator already because the input type are different. Can we consider this test redundant?",
        "createdAt" : "2019-10-25T07:28:19Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "90b0125b-5c0e-483e-94cf-51f91feb7c0f",
        "parentId" : "14ccc7f3-323a-4033-acee-3cf2013c3978",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "Yes and no. It does use 2 aggregators but they effectively do that same thing. This time since the produce different outputs it is testing that the aggregators were applied to the correct stream. Whereas the other case is get testing if different aggregators work. it might be a trivial distinction with quite a bit of overlap but I think that it serves a purpose.",
        "createdAt" : "2019-11-06T22:21:30Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 433,
    "diffHunk" : "@@ -1,1 +431,435 @@\n    @Test\n    public void testCogroupKeyMixedAggregators() {\n        final KStream<String, String> stream1 = builder.stream(\"one\", stringConsumed);\n        final KStream<String, String> stream2 = builder.stream(\"two\", stringConsumed);"
  },
  {
    "id" : "4f7456a5-88ae-45d6-96e3-1d3180f9a15d",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-323292243",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6a86f44-bc20-41df-a8a1-30c51a833d48",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "`aggregate()` got more overload taking `Named` parameter -- please add corresponding NPE tests",
        "createdAt" : "2019-11-26T00:38:26Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "77256966-ad9b-4e60-9404-d7ec4a74df77",
        "parentId" : "c6a86f44-bc20-41df-a8a1-30c51a833d48",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "good idea\r\n",
        "createdAt" : "2019-11-26T21:21:30Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +120,124 @@    @Test(expected = NullPointerException.class)\n    public void shouldNotHaveNullMaterializedOnAggregate() {\n        cogroupedStream.aggregate(STRING_INITIALIZER, (Materialized<String, String, KeyValueStore<Bytes, byte[]>>) null);\n    }\n"
  },
  {
    "id" : "3234594f-daa8-474b-8c5e-de173fc6893a",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-324915131",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "337943bd-5c07-45da-bba8-8b7f8d8cd20a",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Added couple of more permutations for NPE tests.",
        "createdAt" : "2019-12-01T00:56:15Z",
        "updatedAt" : "2019-12-01T00:56:16Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +95,99 @@    @Test(expected = NullPointerException.class)\n    public void shouldNotHaveNullInitializerOnAggregate() {\n        cogroupedStream.aggregate(null);\n    }\n"
  },
  {
    "id" : "6660d7f8-55cf-4371-948e-7cc5b3251bae",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-324915141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93b3f5ee-614c-49be-be1f-c5063f50d89a",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Also set the store name in this test.",
        "createdAt" : "2019-12-01T00:56:34Z",
        "updatedAt" : "2019-12-01T00:56:34Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +144,148 @@            .cogroup(STRING_AGGREGATOR)\n            .cogroup(groupedTwo, STRING_AGGREGATOR)\n            .aggregate(STRING_INITIALIZER, Named.as(\"test\"), Materialized.as(\"store\"));\n\n        customers.toStream().to(OUTPUT);"
  }
]