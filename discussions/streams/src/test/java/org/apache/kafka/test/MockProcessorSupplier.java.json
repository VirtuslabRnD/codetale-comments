[
  {
    "id" : "7b49b231-1651-42c8-a583-54a1fe5e4f74",
    "prId" : 4908,
    "prUrl" : "https://github.com/apache/kafka/pull/4908#pullrequestreview-116060931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8f91dc1-b1ac-419a-ac7a-51ed7988b941",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I'm a little confused about the function of this class now.\r\n\r\nCalling `get()` returns a processor but also saves a handle on it, and I can also use to get the same processor later. Also, calling `getTheProcessor()` only returns a processor that was previously created, presumably via `get()`, but doesn't create it.\r\n\r\nLooking at the usage, it seems this is because this class has two \"faces\", one to be presented to the DSL, and the other to be presented to the test code. The `get()` method gets called by the DSL, and this class captures the processors that the DSL generates for test inspection via `processors` and `getTheProcessor()`. Right?\r\n\r\nIf that's the case, I might suggest renaming `processors` to `capturedProcessors` or something similar to clarify its purpose. Similarly, `getTheProcessor` could be `onlyCapturedProcessor` or something. About that method, it's asymmetrical to have one getter and also the underlying collection exposed. I wonder if we should go one way or the other: \r\n* just inline all usages of `getTheProcessor` or \r\n* make `processors` private and replace `getTheProcessor()` with `getCapturedProcessors(int expectedNumberOfProcessors)` so that all calls benefit from the built-in assertion about the number of processors we expect.",
        "createdAt" : "2018-04-27T16:16:00Z",
        "updatedAt" : "2018-05-03T00:48:04Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "f34fb769-da95-4417-9c53-31c6dd765c32",
        "parentId" : "c8f91dc1-b1ac-419a-ac7a-51ed7988b941",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "@vvcephei your understanding is right. The ProcessorSupplier it used for the DSL, but we need to create one topology for each task, and hence one processor created for each task. In unit tests thought, most likely only one processor will be created since we will only have one task, unless the same ProcessorSupplier is used in multiple places in the DSL.\r\n\r\nYour suggestions on the naming looks good. I will go ahead and make these changes.",
        "createdAt" : "2018-04-27T19:42:59Z",
        "updatedAt" : "2018-05-03T00:48:04Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d630db2abcf24acc30c677323334c0d0900c21a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +26,30 @@import static org.junit.Assert.assertEquals;\n\npublic class MockProcessorSupplier<K, V> implements ProcessorSupplier<K, V> {\n\n    private final long scheduleInterval;"
  }
]