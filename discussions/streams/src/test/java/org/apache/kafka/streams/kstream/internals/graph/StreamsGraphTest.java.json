[
  {
    "id" : "ce29eaf9-81f6-4547-8c46-80e7bea78188",
    "prId" : 5451,
    "prUrl" : "https://github.com/apache/kafka/pull/5451#pullrequestreview-145722954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f06527f1-1dc1-4ef6-9cf2-e75fa4963f2e",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Meta comment: how can we merge repartition topics if there are value changing after key changing, in this case the value serdes may not be the same right?",
        "createdAt" : "2018-08-11T00:02:58Z",
        "updatedAt" : "2018-08-14T00:17:00Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "dd9527e4-fac3-49d2-aaea-4855f0d0ac14",
        "parentId" : "f06527f1-1dc1-4ef6-9cf2-e75fa4963f2e",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "We can't and don't.  \r\n\r\nThis topology is created for the test `shouldNotOptimizeWithValueOrKeyChangingOperatorsAfterInitialKeyChange` to verify that when we have such a  situation, no optimizations take place.\r\n\r\nThe test proves that a `Topology` resulting from calling `build` with optimization configured is the same as the `Topology` resulting from a non-optimized `build` call. Hence no optimizations have been performed. ",
        "createdAt" : "2018-08-13T14:19:39Z",
        "updatedAt" : "2018-08-14T00:17:00Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "1ead05d8-64e8-4cf8-ac5b-a86a7f6e3335",
        "parentId" : "f06527f1-1dc1-4ef6-9cf2-e75fa4963f2e",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Ack. Thanks!",
        "createdAt" : "2018-08-13T16:01:49Z",
        "updatedAt" : "2018-08-14T00:17:00Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "9faa4975e48126bc019e77e03e8ec8ce2f75826d",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +102,106 @@        final KStream<String, String> mappedKeyStream = inputStream.selectKey((k, v) -> k + v);\n\n        mappedKeyStream.mapValues(v -> v.toUpperCase(Locale.getDefault())).groupByKey().count().toStream().to(\"output\");\n        mappedKeyStream.flatMapValues(v -> Arrays.asList(v.split(\"\\\\s\"))).groupByKey().windowedBy(TimeWindows.of(5000)).count().toStream().to(\"windowed-output\");\n"
  }
]