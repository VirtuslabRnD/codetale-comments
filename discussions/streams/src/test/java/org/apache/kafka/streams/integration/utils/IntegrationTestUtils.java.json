[
  {
    "id" : "3561611b-ff97-4a33-ada9-1459b6a9038f",
    "prId" : 5423,
    "prUrl" : "https://github.com/apache/kafka/pull/5423#pullrequestreview-140546340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c128f860-f7e7-47d2-8666-60e6d7c189b7",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Java8 rewrite only",
        "createdAt" : "2018-07-26T00:41:39Z",
        "updatedAt" : "2018-07-26T00:42:25Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "56fc052c29d3f0b0bfd1f5b320d1fe6c79c499e8",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +311,315 @@        final List<KeyValue<K, V>> accumData = new ArrayList<>();\n        try (final Consumer<K, V> consumer = createConsumer(consumerConfig)) {\n            final TestCondition valuesRead = () -> {\n                final List<KeyValue<K, V>> readData =\n                    readKeyValues(topic, consumer, waitTime, expectedNumRecords);"
  },
  {
    "id" : "15b856f9-7a48-493b-90f4-ba38458f8bb3",
    "prId" : 5423,
    "prUrl" : "https://github.com/apache/kafka/pull/5423#pullrequestreview-140546340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f6f4ca7-0a57-4680-8385-dc11f943324d",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Java8 rewrite only",
        "createdAt" : "2018-07-26T00:41:52Z",
        "updatedAt" : "2018-07-26T00:42:25Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "56fc052c29d3f0b0bfd1f5b320d1fe6c79c499e8",
    "line" : 89,
    "diffHunk" : "@@ -1,1 +392,396 @@        final List<V> accumData = new ArrayList<>();\n        try (final Consumer<Object, V> consumer = createConsumer(consumerConfig)) {\n            final TestCondition valuesRead = () -> {\n                final List<V> readData =\n                    readValues(topic, consumer, waitTime, expectedNumRecords);"
  },
  {
    "id" : "7376d343-22a2-440d-907f-01559624fec9",
    "prId" : 5423,
    "prUrl" : "https://github.com/apache/kafka/pull/5423#pullrequestreview-140546340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "20526b5a-5046-4aea-8bc1-89d77c4b8d47",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Java8 rewrite only",
        "createdAt" : "2018-07-26T00:41:55Z",
        "updatedAt" : "2018-07-26T00:42:25Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "56fc052c29d3f0b0bfd1f5b320d1fe6c79c499e8",
    "line" : 115,
    "diffHunk" : "@@ -1,1 +421,425 @@                                                     final int partition,\n                                                     final long timeout) throws InterruptedException {\n        TestUtils.waitForCondition(() -> {\n            for (final KafkaServer server : servers) {\n                final MetadataCache metadataCache = server.apis().metadataCache();"
  },
  {
    "id" : "74d4960b-61d3-4962-af24-c4af4666f8e3",
    "prId" : 5724,
    "prUrl" : "https://github.com/apache/kafka/pull/5724#pullrequestreview-160966118",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8eaf5b47-6d5b-4ebb-b2c3-f09a52c4553d",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "this verification block duplicates code in `OutputVerifier`, refactoring to some common verification method is out of scope for this PR, but I wanted to get my thoughts out on this as it seems some of our testing code can be consolidated some.\r\n\r\n\\cc @guozhangwang @mjsax ",
        "createdAt" : "2018-10-02T19:08:56Z",
        "updatedAt" : "2018-10-03T00:05:51Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "a20c8b6e-183c-4307-b3ba-66732292dd72",
        "parentId" : "8eaf5b47-6d5b-4ebb-b2c3-f09a52c4553d",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I hear you, but in this case, I would resist consolidation.\r\n\r\nOutputVerifier is a public test utility for use with the TopologyTestDriver. Its behavior needs to be stable over time.\r\n\r\nIntegrationTestUtils is a private utility for use in our integration tests (i.e., not TopologyTestDriver). We should maintain the flexibility to change these utilities completely at will.\r\n\r\nSo it seems they have little in common except that they need to print a message when an assertion is false during testing. The message is for human consumption, so its format doesn't need to be any particular way, just as long as it's clear and informative.\r\n\r\nIMHO, these two components are far apart in usage and modular structure, and there doesn't seem to be a compelling benefit from coupling them.",
        "createdAt" : "2018-10-02T20:06:50Z",
        "updatedAt" : "2018-10-03T00:05:51Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "c3f368e2-ef5f-4f98-ac3f-8ff637d617ee",
        "parentId" : "8eaf5b47-6d5b-4ebb-b2c3-f09a52c4553d",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I don't care too much personally. However, I don't think it's a issue to use `OutputVerifier` in unit test (if we can pull it in, with dependency issues?) as long as it does what we need. Of course, we would not change `OutputVerifier` is it does not meet the unit test requirements but would move off it for this case.",
        "createdAt" : "2018-10-02T21:12:24Z",
        "updatedAt" : "2018-10-03T00:05:51Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "3be8a660-cc1a-415e-b645-7c8e3ffcf950",
        "parentId" : "8eaf5b47-6d5b-4ebb-b2c3-f09a52c4553d",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Also, note that this is a `ConsumerRecord`, and `OutputVerifier` is for a `ProducerRecord`.",
        "createdAt" : "2018-10-02T23:53:30Z",
        "updatedAt" : "2018-10-03T00:05:51Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "d405ac999adf4136de26b1e533c627ca00ed3238",
    "line" : 197,
    "diffHunk" : "@@ -1,1 +569,573 @@        final long recordTimestamp = record.timestamp();\n        final AssertionError error = new AssertionError(\"Expected <\" + expectedKey + \", \" + expectedValue + \"> with timestamp=\" + expectedTimestamp +\n                                                            \" but was <\" + recordKey + \", \" + recordValue + \"> with timestamp=\" + recordTimestamp);\n        if (recordKey != null) {\n            if (!recordKey.equals(expectedKey)) {"
  },
  {
    "id" : "81813b9d-9297-4766-b5b0-a88e6e40be07",
    "prId" : 5724,
    "prUrl" : "https://github.com/apache/kafka/pull/5724#pullrequestreview-160935526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "38208a8d-065e-4c8f-ab61-bfa45baee81a",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Good job moving common utils to this class!",
        "createdAt" : "2018-10-02T22:53:20Z",
        "updatedAt" : "2018-10-03T00:05:51Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d405ac999adf4136de26b1e533c627ca00ed3238",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +118,122 @@    }\n\n    public static void cleanStateBeforeTest(final EmbeddedKafkaCluster cluster, final String... topics) {\n        try {\n            cluster.deleteAllTopicsAndWait(DEFAULT_TIMEOUT);"
  },
  {
    "id" : "f07daf81-5b8b-494f-8c06-a57927b82766",
    "prId" : 6751,
    "prUrl" : "https://github.com/apache/kafka/pull/6751#pullrequestreview-242857930",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d31e18a4-be6f-4715-826a-e6575716a841",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Curious: why should we need this in the integration test utils? There's no need to make something public for later use, since we can just make it public if/when we need it to be.",
        "createdAt" : "2019-05-28T14:52:52Z",
        "updatedAt" : "2019-05-28T18:58:00Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "8d594e6f-282c-46a1-948c-7ade31119531",
        "parentId" : "d31e18a4-be6f-4715-826a-e6575716a841",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "It's for discoverability -- I often use Intellij auto-complete to see what methods are available -- if not public, it's not listed...",
        "createdAt" : "2019-05-28T18:50:11Z",
        "updatedAt" : "2019-05-28T18:58:00Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0f06e10cec644ff9e471ead47982151bbe1e63d0",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +242,246 @@     * @param <V>                 Value type of the data records\n     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public static <K, V> void produceKeyValuesSynchronouslyWithTimestamp(final String topic,\n                                                                         final Collection<KeyValue<K, V>> records,"
  },
  {
    "id" : "73b3531d-8551-419f-9bd5-bf4f2d4cd5a4",
    "prId" : 6884,
    "prUrl" : "https://github.com/apache/kafka/pull/6884#pullrequestreview-270434333",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46f0301d-7282-4a98-a703-5cbd02cb1c1a",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is related to the FSM change as well. Ditto above.",
        "createdAt" : "2019-08-03T00:02:47Z",
        "updatedAt" : "2019-08-08T21:28:14Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6041a792f58b0b9a38983a60e052e9018319a6e6",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +85,89 @@                             final ThreadStateTransitionValidator newState,\n                             final ThreadStateTransitionValidator oldState) {\n            if (newState == StreamThread.State.PENDING_SHUTDOWN) {\n                toPendingShutdownSeen = true;\n            }"
  },
  {
    "id" : "4fd75bc7-5df2-4f0c-a3de-bd74755ecd2b",
    "prId" : 7500,
    "prUrl" : "https://github.com/apache/kafka/pull/7500#pullrequestreview-301571593",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93dc944e-0aa9-458b-9209-754a93f84f61",
        "parentId" : null,
        "authorId" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "body" : "Note that the streams toString is just the object and hash (e.g. `org.apache.kafka.streams.KafkaStreams@77258e59`). It would be nice if there were a better way to identify the instance, but I couldn't find anything in the public API.",
        "createdAt" : "2019-10-11T19:32:06Z",
        "updatedAt" : "2019-10-16T16:30:23Z",
        "lastEditedBy" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "tags" : [
        ]
      },
      {
        "id" : "72682b1c-6501-494b-9378-f47e11d5b3eb",
        "parentId" : "93dc944e-0aa9-458b-9209-754a93f84f61",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Maybe we could use `client.id` (if set?) from `StreamsConfig`? ",
        "createdAt" : "2019-10-11T22:28:02Z",
        "updatedAt" : "2019-10-16T16:30:23Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "561d55e2-a9c0-42d4-a7dd-c8dfe3f9e257",
        "parentId" : "93dc944e-0aa9-458b-9209-754a93f84f61",
        "authorId" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "body" : "That would be great - client.id is what I was going for - but I don't see a good way to get the config out of the KafkaStreams either (besides reflection :)). Did I miss anything?",
        "createdAt" : "2019-10-14T15:05:08Z",
        "updatedAt" : "2019-10-16T16:30:23Z",
        "lastEditedBy" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "tags" : [
        ]
      },
      {
        "id" : "d768bd06-2b56-4b88-9acb-6b88f8c4fa6a",
        "parentId" : "93dc944e-0aa9-458b-9209-754a93f84f61",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Well, maybe we can update `KafkaStreams#toString()` to access the `client.id` ?",
        "createdAt" : "2019-10-14T22:31:36Z",
        "updatedAt" : "2019-10-16T16:30:23Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c09dfb7b7fd9426578e779fb7c53a0febb1fa9a",
    "line" : 92,
    "diffHunk" : "@@ -1,1 +799,803 @@                final long millisRemaining = expectedEnd - System.currentTimeMillis();\n                if (millisRemaining <= 0) {\n                    fail(\"Application did not reach a RUNNING state for all streams instances. Non-running instances: \" +\n                        nonRunningStreams);\n                }"
  },
  {
    "id" : "8f64771d-ca26-4f3e-a0b8-19abe85e4494",
    "prId" : 7500,
    "prUrl" : "https://github.com/apache/kafka/pull/7500#pullrequestreview-301578077",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4eb112e2-721e-43cd-814a-7d56f1dd963f",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Just to clarify: when we call await() here, we release `stateLock`, right?",
        "createdAt" : "2019-10-11T22:26:47Z",
        "updatedAt" : "2019-10-16T16:30:23Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "47ed46f4-e871-4dd8-b185-79d759437d1d",
        "parentId" : "4eb112e2-721e-43cd-814a-7d56f1dd963f",
        "authorId" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "body" : "That's exactly how it works. Some more details here, if you're curious: https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/Condition.html#awaitNanos(long).",
        "createdAt" : "2019-10-14T14:53:25Z",
        "updatedAt" : "2019-10-16T16:30:23Z",
        "lastEditedBy" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "tags" : [
        ]
      },
      {
        "id" : "ef749aee-a530-4875-a1e9-4dd616de9c96",
        "parentId" : "4eb112e2-721e-43cd-814a-7d56f1dd963f",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "@mjsax haven't you had to do the `Job Scheduler` interview question? :P ",
        "createdAt" : "2019-10-14T22:53:40Z",
        "updatedAt" : "2019-10-16T16:30:23Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c09dfb7b7fd9426578e779fb7c53a0febb1fa9a",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +803,807 @@                }\n\n                stateUpdate.await(millisRemaining, TimeUnit.MILLISECONDS);\n            }\n        } finally {"
  },
  {
    "id" : "e3fe6485-0570-476c-8965-71e1b4460d98",
    "prId" : 7500,
    "prUrl" : "https://github.com/apache/kafka/pull/7500#pullrequestreview-302113194",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d500367f-c30c-41f6-9369-99780a2ce57b",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "We recently merge a fix for EosIntegrationTest that also starts two instances -- can we update this test to use this new method in this PR? https://github.com/apache/kafka/blob/trunk/streams/src/test/java/org/apache/kafka/streams/integration/EosIntegrationTest.java#L467-L468\r\n\r\nAlso, the other PR introduced `StreamsTestUtils#startKafkaStreamsAndWaitForRunningState(...)` that takes a long as timeout -- to align with this PR, we could change it to `Duration` as well.\r\n\r\nWe can also do a follow up PR if you don't want to block this PR by both.",
        "createdAt" : "2019-10-14T22:28:52Z",
        "updatedAt" : "2019-10-16T16:30:23Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "6aeea548-4a78-43cb-99f6-2e67be67364a",
        "parentId" : "d500367f-c30c-41f6-9369-99780a2ce57b",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Do we need both startKafkaStreamsAndWaitForRunningState and this? Can we just consolidate them into a single function?",
        "createdAt" : "2019-10-15T18:33:17Z",
        "updatedAt" : "2019-10-16T16:30:23Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c09dfb7b7fd9426578e779fb7c53a0febb1fa9a",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +749,753 @@     * @param timeout the time to wait for the streams to all be in @{link State#RUNNING} state.\n     */\n    public static void startApplicationAndWaitUntilRunning(final List<KafkaStreams> streamsList,\n                                                           final Duration timeout) throws InterruptedException {\n        final Lock stateLock = new ReentrantLock();"
  },
  {
    "id" : "35c34966-b2da-470f-a730-b2e34e15c6e9",
    "prId" : 7500,
    "prUrl" : "https://github.com/apache/kafka/pull/7500#pullrequestreview-301725340",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dc56ce0d-952b-4553-b038-b9592d40d4d2",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "I just have to say, personally I think reflection seems like overkill here, but I take it we're just trying to avoid the need to go through a KIP?\r\nIt seems like a potentially useful API, although admittedly I've never seen it requested specifically. Just wondering what the thoughts/status is here: are we considering adding it as an official API at some later point?",
        "createdAt" : "2019-10-14T23:13:29Z",
        "updatedAt" : "2019-10-16T16:30:23Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "182c35ec-80cb-4cc1-860b-8e3658813a1f",
        "parentId" : "dc56ce0d-952b-4553-b038-b9592d40d4d2",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I would be open to add this to the public API -- but short term, reflections are the only \"hack\" we can use.",
        "createdAt" : "2019-10-15T08:16:10Z",
        "updatedAt" : "2019-10-16T16:30:23Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0c09dfb7b7fd9426578e779fb7c53a0febb1fa9a",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +812,816 @@    private static StateListener getStateListener(final KafkaStreams streams) {\n        try {\n            final Field field = streams.getClass().getDeclaredField(\"stateListener\");\n            field.setAccessible(true);\n            return (StateListener) field.get(streams);"
  },
  {
    "id" : "3b103511-a4b0-4d0e-a5db-84a743b0d96a",
    "prId" : 8248,
    "prUrl" : "https://github.com/apache/kafka/pull/8248#pullrequestreview-420531757",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb5f7e1b-da9a-4dd2-9905-8c5a3a2889c0",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This isn't threadsafe, but it looks like we're using it from multiple threads during the tests.",
        "createdAt" : "2020-05-28T20:37:45Z",
        "updatedAt" : "2020-05-28T23:49:30Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "2c3d5a2c-519e-4b75-bd59-575ea1138edb",
        "parentId" : "eb5f7e1b-da9a-4dd2-9905-8c5a3a2889c0",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Whoops",
        "createdAt" : "2020-05-28T22:18:06Z",
        "updatedAt" : "2020-05-28T23:49:30Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "30ac7b3ccd47063497c17ac148d90f9b29683e82",
    "line" : 251,
    "diffHunk" : "@@ -1,1 +1285,1289 @@     * if it's important to track across multiple stores in a topology\n     */\n    public static class TrackingStateRestoreListener implements StateRestoreListener {\n        public final Map<TopicPartition, AtomicLong> changelogToStartOffset = new ConcurrentHashMap<>();\n        public final Map<TopicPartition, AtomicLong> changelogToEndOffset = new ConcurrentHashMap<>();"
  }
]