[
  {
    "id" : "1aa02d27-2cee-4ec7-b541-8a7a830e51fb",
    "prId" : 8588,
    "prUrl" : "https://github.com/apache/kafka/pull/8588#pullrequestreview-408512587",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb1e5d92-2b0e-4cce-a643-4d3f93f777e4",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I was able to reproduce some more edge cases by not creating exactly 4 partitions per subtopology. Now, we randomly generate the number of partitions for each subtopology. There's a supplier instead of a PRNG because for the specific scenarios, we still want a fixed partition scheme. ",
        "createdAt" : "2020-05-08T23:04:08Z",
        "updatedAt" : "2020-05-14T01:51:44Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cf8316444c205ea04f6fa0874619451f5b94d92",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +53,57 @@            int remainingStatelessTasks = numStatelessTasks;\n            while (remainingStatelessTasks > 0) {\n                final int partitions = Math.min(remainingStatelessTasks, partitionCountSupplier.get());\n                for (int i = 0; i < partitions; i++) {\n                    statelessTasks.add(new TaskId(subtopology, i));"
  },
  {
    "id" : "379dc030-6a57-47a6-ad57-54057c7b66d4",
    "prId" : 8588,
    "prUrl" : "https://github.com/apache/kafka/pull/8588#pullrequestreview-411407251",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7536572b-57e1-4ed3-9aa9-74225a15bb3b",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Not sure what I was thinking before. What I wanted was for all the key numbers to be coprime. Of course, the easiest way to do this is to only use prime numbers, but you might notice that 15 is not prime ;) Now it's fixed.",
        "createdAt" : "2020-05-08T23:07:46Z",
        "updatedAt" : "2020-05-14T01:51:44Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "9886efb6-56b2-4cdb-a45a-2d9dbab657fe",
        "parentId" : "7536572b-57e1-4ed3-9aa9-74225a15bb3b",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Well, if you have a set of N prime numbers and one number which isn't, aren't they all still coprime? :P",
        "createdAt" : "2020-05-13T22:05:53Z",
        "updatedAt" : "2020-05-14T01:51:44Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "a26cd4e2-9d3d-485b-806c-e156bd093c16",
        "parentId" : "7536572b-57e1-4ed3-9aa9-74225a15bb3b",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Right, but I think there's a \"3\" or a \"5\" in there somewhere, maybe in the other test. Anyway, my _intent_ was to make them all prime so I wouldn't have to think to hard about whether they were all coprime. But, in reality, I managed to screw up both.",
        "createdAt" : "2020-05-14T01:34:30Z",
        "updatedAt" : "2020-05-14T01:51:44Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cf8316444c205ea04f6fa0874619451f5b94d92",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +243,247 @@    @Test\n    public void assignmentShouldConvergeAfterAddingNode() {\n        final int numStatelessTasks = 7;\n        final int numStatefulTasks = 11;\n        final int maxWarmupReplicas = 2;"
  }
]