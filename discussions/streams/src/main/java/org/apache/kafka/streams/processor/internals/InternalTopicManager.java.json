[
  {
    "id" : "fb3ec3fc-5186-45ee-9215-ce06f96713c8",
    "prId" : 5055,
    "prUrl" : "https://github.com/apache/kafka/pull/5055#pullrequestreview-121974334",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec52342c-b6a0-4641-82e9-2b75ce40ba99",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "Let's avoid TODOs in the code. We can point to the relevant part of the code in the JIRA.",
        "createdAt" : "2018-05-21T23:00:25Z",
        "updatedAt" : "2018-05-21T23:00:25Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d92748c47b3ea4894b7ac7994c6205ddb026d16c",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +175,179 @@        log.debug(\"Trying to check if topics {} have been created with expected number of partitions.\", topics);\n\n        // TODO: KAFKA-6928. should not need retries in the outer caller as it will be retried internally in admin client\n        int remainingRetries = retries;\n        boolean retry;"
  },
  {
    "id" : "8fb2d448-7ca1-4556-849c-97f5c1c79a9b",
    "prId" : 5389,
    "prUrl" : "https://github.com/apache/kafka/pull/5389#pullrequestreview-138501388",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53597410-99b2-487d-9d49-a61dac5422d2",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "This is just a Java8 rewrite",
        "createdAt" : "2018-07-18T18:24:42Z",
        "updatedAt" : "2018-07-19T18:48:02Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "806e6a84-3b75-469c-8c49-a306e06a14a2",
        "parentId" : "53597410-99b2-487d-9d49-a61dac5422d2",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Nice!",
        "createdAt" : "2018-07-19T02:04:54Z",
        "updatedAt" : "2018-07-19T18:48:02Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "923f6fb5678e8dcb67ab83c648e055f2aaf41f20",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +152,156 @@\n                if (retry) {\n                    newTopics.removeIf(newTopic -> createTopicNames.contains(newTopic.name()));\n\n                    continue;"
  },
  {
    "id" : "3211a411-b188-46bb-b104-f3ec5bc93e50",
    "prId" : 5929,
    "prUrl" : "https://github.com/apache/kafka/pull/5929#pullrequestreview-178189019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7894cc3-de26-4d56-8a0e-3d8c25e93cc7",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Do we need to add the error message for this case? Might be miss leading?",
        "createdAt" : "2018-11-20T22:53:36Z",
        "updatedAt" : "2018-11-26T09:09:26Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "243d35c2-56df-4237-83cb-1e00cbba13ec",
        "parentId" : "f7894cc3-de26-4d56-8a0e-3d8c25e93cc7",
        "authorId" : "9facab0e-acaf-4e0e-a0bc-3bd6dc2b3138",
        "body" : "There was already a similar message before, when the Topic existed so I left it there, shall I remove it?",
        "createdAt" : "2018-11-23T14:25:38Z",
        "updatedAt" : "2018-11-26T09:09:26Z",
        "lastEditedBy" : "9facab0e-acaf-4e0e-a0bc-3bd6dc2b3138",
        "tags" : [
        ]
      },
      {
        "id" : "b288c30f-d886-427f-94e9-4fce93eb618d",
        "parentId" : "f7894cc3-de26-4d56-8a0e-3d8c25e93cc7",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Ah. I got confused because of the variable name. Can we update it to `createdTopicNames` ?",
        "createdAt" : "2018-11-23T19:34:28Z",
        "updatedAt" : "2018-11-26T09:09:26Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "c9eefefe-bc18-46ef-99ce-46f7e7dd9258",
        "parentId" : "f7894cc3-de26-4d56-8a0e-3d8c25e93cc7",
        "authorId" : "9facab0e-acaf-4e0e-a0bc-3bd6dc2b3138",
        "body" : "createdTopicNames makes more sense, I renamed it.",
        "createdAt" : "2018-11-26T09:15:55Z",
        "updatedAt" : "2018-11-26T09:15:55Z",
        "lastEditedBy" : "9facab0e-acaf-4e0e-a0bc-3bd6dc2b3138",
        "tags" : [
        ]
      }
    ],
    "commit" : "23dfca52cea0cc94ea5852454a732fa97bf16799",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +153,157 @@                                log.info(\"Topic {} exists already and has the right number of partitions: {}\",\n                                        topicName,\n                                        couldNotCreateTopic.toString());\n                            } else {\n                                retry = true;"
  },
  {
    "id" : "28d627fe-d238-4bc1-b43e-246efb690f79",
    "prId" : 6085,
    "prUrl" : "https://github.com/apache/kafka/pull/6085#pullrequestreview-189196042",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bebf1d0c-1b3c-434f-a616-34288eb7728a",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "What is the impact that we don't handle `TimeoutException` any longer? With internal admin client retries, could we still get a timeout exception?",
        "createdAt" : "2019-01-03T21:16:08Z",
        "updatedAt" : "2019-01-04T18:48:10Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "d5a8e216-172d-437c-9d70-5a82cad223c3",
        "parentId" : "bebf1d0c-1b3c-434f-a616-34288eb7728a",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "`StreamsConfig.RETRIES_CONFIG` will be passed to AdminClient as `AdminClientConfig.RETRIES_CONFIG`; default value is 5.\r\n\r\nBefore this change, timeout exception will be retried up to 5 times in the outer loop, and with the inner admin client's loop of 5, it means that we would retry at most 5 * 5 = 25 times with backoff for timeouts.\r\n\r\nAfter this change we only rely on inner admin client's loop; so technically speaking we are less resilient to timeouts, BUT I think the previous logic itself is just \"more resilient by mistake\" (i.e. a user bumping the num.retries from 5 to 6 would actually get 36 - 25 = 11 more retries...) and the current logic is better for users to understand: if you do observe that TimeoutException is being thrown, it means that the num.retries or retry.backoff is not sufficient and you should consider bump it up.",
        "createdAt" : "2019-01-03T21:47:04Z",
        "updatedAt" : "2019-01-04T18:48:10Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "42bb5da4237243e10076eb112b66c22b671e3ec5",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +143,147 @@                                \"Will retry to create this topic in {} ms (to let broker finish async delete operation first).\\n\" +\n                                \"Error message was: {}\", topicName, retryBackOffMs, cause.toString());\n                        } else {\n                            log.error(\"Unexpected error during topic creation for {}.\\n\" +\n                                \"Error message was: {}\", topicName, cause.toString());"
  },
  {
    "id" : "b65a2b86-d046-4e54-9543-07ae33e952c1",
    "prId" : 6085,
    "prUrl" : "https://github.com/apache/kafka/pull/6085#pullrequestreview-189196208",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "007a2618-9a02-468c-9f94-511a3c63346b",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: do you want to add a comment as above? ",
        "createdAt" : "2019-01-03T21:18:41Z",
        "updatedAt" : "2019-01-04T18:48:10Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "76f76493-c535-4d3e-9bea-b89ec4c28aaa",
        "parentId" : "007a2618-9a02-468c-9f94-511a3c63346b",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Ack.",
        "createdAt" : "2019-01-03T21:47:36Z",
        "updatedAt" : "2019-01-04T18:48:10Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "42bb5da4237243e10076eb112b66c22b671e3ec5",
    "line" : 221,
    "diffHunk" : "@@ -1,1 +198,202 @@            } catch (final InterruptedException fatalException) {\n                // this should not happen; if it ever happens it indicate a bug\n                Thread.currentThread().interrupt();\n                log.error(INTERRUPTED_ERROR_MESSAGE, fatalException);\n                throw new IllegalStateException(INTERRUPTED_ERROR_MESSAGE, fatalException);"
  },
  {
    "id" : "63a8bbd8-1133-4e1b-9fc7-4f83177d2f0c",
    "prId" : 7249,
    "prUrl" : "https://github.com/apache/kafka/pull/7249#pullrequestreview-284458826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b724dbec-9a0b-4f04-ae0c-4644efd193e4",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This extra condition should be effectively equivalent, since if we have an existing partition count, then it shouldn't have ever been `-1` and therefore we should be fine to only run the equality check if number of partitions is also specified.",
        "createdAt" : "2019-09-05T18:35:42Z",
        "updatedAt" : "2019-09-06T21:04:40Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "6cc2c66abcb7619589ed3366cb162c78dd7bbef8",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +227,231 @@            final String topicName = entry.getKey();\n            final Optional<Integer> numberOfPartitions = entry.getValue().numberOfPartitions();\n            if (existedTopicPartition.containsKey(topicName) && numberOfPartitions.isPresent()) {\n                if (!existedTopicPartition.get(topicName).equals(numberOfPartitions.get())) {\n                    final String errorMsg = String.format(\"Existing internal topic %s has invalid partitions: \" +"
  },
  {
    "id" : "17f961b1-f583-43d1-b8bc-865d21647afd",
    "prId" : 8039,
    "prUrl" : "https://github.com/apache/kafka/pull/8039#pullrequestreview-354209949",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b72bb72-a0d8-4da2-97bc-fcf3a5ab930e",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is the actual fix: we should not loop over the global topic-map but only the remaining `topics-to-validate`. cc @ableegoldman ",
        "createdAt" : "2020-02-05T01:41:28Z",
        "updatedAt" : "2020-02-10T16:54:54Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "6e177f09-f660-4574-a3cd-6d49a86aa5f5",
        "parentId" : "2b72bb72-a0d8-4da2-97bc-fcf3a5ab930e",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Yikes, nice find! I'm pretty sure this is behind that C3 issue. I'm sure there's a good reason for them to race against Streams in the internal topic creation...",
        "createdAt" : "2020-02-06T05:45:56Z",
        "updatedAt" : "2020-02-10T16:54:54Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e3176effe9bedad1d91cdf2a71907c125babf2b",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +227,231 @@        final Set<String> topicsToCreate = new HashSet<>();\n        for (final String topicName : topicsToValidate) {\n            final Optional<Integer> numberOfPartitions = topicsMap.get(topicName).numberOfPartitions();\n            if (existedTopicPartition.containsKey(topicName) && numberOfPartitions.isPresent()) {\n                if (!existedTopicPartition.get(topicName).equals(numberOfPartitions.get())) {"
  },
  {
    "id" : "613235c9-ca1c-46d5-8879-b1e73387d5d8",
    "prId" : 8039,
    "prUrl" : "https://github.com/apache/kafka/pull/8039#pullrequestreview-353968290",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8979b290-5425-42f3-b63e-8f69bcfadb29",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Do we still need to pass in the topicsMap, as we are no longer looping it?",
        "createdAt" : "2020-02-05T18:53:54Z",
        "updatedAt" : "2020-02-10T16:54:54Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "95f3f31e-6658-4cf7-b8b5-ddf35af3d5bd",
        "parentId" : "8979b290-5425-42f3-b63e-8f69bcfadb29",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Yes we need the InternalTopicConfig object from it :)",
        "createdAt" : "2020-02-05T19:07:28Z",
        "updatedAt" : "2020-02-10T16:54:54Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "526c001e-ecfc-4131-96a8-fb0ecd18facb",
        "parentId" : "8979b290-5425-42f3-b63e-8f69bcfadb29",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "More specifically we need the `numberOfPartitions` to compare.",
        "createdAt" : "2020-02-05T19:08:37Z",
        "updatedAt" : "2020-02-10T16:54:54Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e3176effe9bedad1d91cdf2a71907c125babf2b",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +218,222 @@     */\n    private Set<String> validateTopics(final Set<String> topicsToValidate, final Map<String, InternalTopicConfig> topicsMap) {\n        if (!topicsMap.keySet().containsAll(topicsToValidate)) {\n            throw new IllegalStateException(\"The topics map \" + topicsMap.keySet() + \" does not contain all the topics \" +\n                topicsToValidate + \" trying to validate.\");"
  },
  {
    "id" : "8e1bf42f-7940-4afd-9333-a501743e6584",
    "prId" : 8662,
    "prUrl" : "https://github.com/apache/kafka/pull/8662#pullrequestreview-412056334",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6eedd693-2082-4aec-92e5-9cde7a377cd3",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "It's not what you signed up for, but I'm wondering if we should at least submit a Jira to give some of these AdminClient methods a \"full consistency\" mode. In other words, since the command returns a future anyway, it would be nice to be able to tell it not to return until it can guarantee the topic will appear to be fully created on all brokers.\r\n\r\nI'm mildly concerned that we're just kicking the can down the road a little ways with this PR. I.e., we let the assignment happen, but then some other metadata (or data) operation for that topic will just fail shortly thereafter.\r\n\r\nMore generally, we jump through a lot of hoops in our own tests to try and make sure that the topics are really, actually created (or deleted) before proceeding with the test, and I'm sure that our users also suffer from the same problem in their testing and production code.",
        "createdAt" : "2020-05-13T20:38:09Z",
        "updatedAt" : "2020-05-14T17:05:33Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "d3d2c354-e8c6-48a7-8a03-163e605029e7",
        "parentId" : "6eedd693-2082-4aec-92e5-9cde7a377cd3",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "I think this race condition was particularly severe since we do the listOffsets request pretty much immediately after creating the topics, whereas whatever we're doing with that topic next will not be until the rebalance was completed.\r\n\r\nAFAIK we've never had any users report subsequent operations failing after the first rebalance due to not-yet-fully-created topics, but it could have just slipped past us",
        "createdAt" : "2020-05-14T17:35:15Z",
        "updatedAt" : "2020-05-14T17:35:15Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "79f2bd46-6a51-4c9c-b37d-149364ab03b5",
        "parentId" : "6eedd693-2082-4aec-92e5-9cde7a377cd3",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "I do agree it would be useful though. Feel free to create a ticket :P ",
        "createdAt" : "2020-05-14T17:35:34Z",
        "updatedAt" : "2020-05-14T17:35:35Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "82c70f9d-3e14-4bb6-87e2-15b9ae895ff6",
        "parentId" : "6eedd693-2082-4aec-92e5-9cde7a377cd3",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Thanks! Will do. I just wanted to bounce the idea off you first, in case it was stupid.",
        "createdAt" : "2020-05-14T18:00:41Z",
        "updatedAt" : "2020-05-14T18:00:41Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "df24f6e351160de97ae664daf4f433abf54334d1",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +174,178 @@            throw new StreamsException(timeoutAndRetryError);\n        }\n        log.debug(\"Completed validating internal topics and created {}\", newlyCreatedTopics);\n\n        return newlyCreatedTopics;"
  },
  {
    "id" : "d659da3b-fe58-4d5c-8912-c8f4b05fa7d6",
    "prId" : 8712,
    "prUrl" : "https://github.com/apache/kafka/pull/8712#pullrequestreview-436217098",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3513a6cd-a902-463f-9701-8bd8a63fb431",
        "parentId" : null,
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "the log should put `remainingRetries` since it's logging `with {} retries left`",
        "createdAt" : "2020-05-22T14:22:30Z",
        "updatedAt" : "2020-07-02T00:32:52Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      },
      {
        "id" : "47dc5e12-1c6d-482f-ab40-c696d0cf980c",
        "parentId" : "3513a6cd-a902-463f-9701-8bd8a63fb431",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Good catch",
        "createdAt" : "2020-06-23T23:06:27Z",
        "updatedAt" : "2020-07-02T00:32:52Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "de9be72f4ccfddd7dc2e2b5b4968f4ecdb1693b0",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +160,164 @@\n            if (!topicsNotReady.isEmpty()) {\n                log.info(\"Topics {} can not be made ready with {} retries left\", topicsNotReady, remainingRetries);\n\n                Utils.sleep(retryBackOffMs);"
  },
  {
    "id" : "0e8111c6-a640-4750-b83f-e4d9cdd5fe2f",
    "prId" : 8712,
    "prUrl" : "https://github.com/apache/kafka/pull/8712#pullrequestreview-440994606",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48361e79-633d-4197-b269-d85cd49b9b8d",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Better to be name as `leaderUnavailableTopics` to match the error code.",
        "createdAt" : "2020-06-30T16:48:18Z",
        "updatedAt" : "2020-07-02T00:32:52Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "67511574-2563-4d7c-98dd-24969000e023",
        "parentId" : "48361e79-633d-4197-b269-d85cd49b9b8d",
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "Well, this variable naming is actually suggested by @ableegoldman , and I also think the `tempUnknownTopics` is more descriptive. Is that OK for you? \r\n\r\nhttps://github.com/apache/kafka/pull/8712#discussion_r444555724\r\n\r\n![image](https://user-images.githubusercontent.com/43372967/86199833-b6cea400-bb8d-11ea-81b5-7ba5b6064709.png)\r\n",
        "createdAt" : "2020-07-01T03:29:06Z",
        "updatedAt" : "2020-07-02T00:32:52Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      },
      {
        "id" : "0fc2a52e-6f5c-4031-9b0b-8fe613b09614",
        "parentId" : "48361e79-633d-4197-b269-d85cd49b9b8d",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Sure, I don't feel strong about reverting the naming once we already got a reason there.",
        "createdAt" : "2020-07-01T15:49:37Z",
        "updatedAt" : "2020-07-02T00:32:52Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "de9be72f4ccfddd7dc2e2b5b4968f4ecdb1693b0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +101,105 @@\n        while (!topicsNotReady.isEmpty() && remainingRetries >= 0) {\n            final Set<String> tempUnknownTopics = new HashSet<>();\n            topicsNotReady = validateTopics(topicsNotReady, topics, tempUnknownTopics, remainingRetries);\n            newlyCreatedTopics.addAll(topicsNotReady);"
  },
  {
    "id" : "61b89469-ccd6-47e2-af14-7391be241a21",
    "prId" : 8864,
    "prUrl" : "https://github.com/apache/kafka/pull/8864#pullrequestreview-453825255",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fef2c2f6-1fcd-4249-aad0-bc5712ac941c",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Addressed via #9060",
        "createdAt" : "2020-07-23T04:10:23Z",
        "updatedAt" : "2020-07-23T04:10:24Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6c10d88f9c6fa9d89cc500112255898e2f24845",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +56,60 @@    private final long retryBackOffMs;\n\n    @SuppressWarnings(\"deprecation\") // TODO: remove in follow up PR when `RETRIES` is removed\n    public InternalTopicManager(final Admin adminClient, final StreamsConfig streamsConfig) {\n        this.adminClient = adminClient;"
  },
  {
    "id" : "6148d54a-e86d-4c30-a4f4-d59d2e369e4d",
    "prId" : 9060,
    "prUrl" : "https://github.com/apache/kafka/pull/9060#pullrequestreview-454887135",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "448e11c2-4ca5-4004-a35a-79a75af3933c",
        "parentId" : null,
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "If we want to guarantee that the `deadlineMs` is respected, I think that we must set the timeout of the AdminClient's call accordingly: `CreateTopicsOptions.timeoutMs`. With the default, I think that the call could be longer than half of `MAX_POLL_INTERVAL_MS_CONFIG`.",
        "createdAt" : "2020-07-23T07:20:38Z",
        "updatedAt" : "2020-08-05T21:30:01Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "b4a18892-241d-4df1-a12f-5dde3fd4515e",
        "parentId" : "448e11c2-4ca5-4004-a35a-79a75af3933c",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Good question. Default `max.poll.interval.ms` is 5 minutes (ie, the deadline is set to 2.5 minutes by default) while default `api.default.timeout.ms` is 1 minutes? Thus we might be ok?",
        "createdAt" : "2020-07-23T16:30:30Z",
        "updatedAt" : "2020-08-05T21:30:01Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "858dd605-37a9-49c1-b177-c537b2e57a0f",
        "parentId" : "448e11c2-4ca5-4004-a35a-79a75af3933c",
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "That's right. I misread the default value of `max.poll.interval.ms`, too many zeros for my eyes ;). The default works fine then. Do we want to protect ourselves if the user changes the default? Or shall we just call out that `api.default.timeout.ms` should be lower than `max.poll.interval.ms` somewhere?",
        "createdAt" : "2020-07-23T16:38:57Z",
        "updatedAt" : "2020-08-05T21:30:01Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      },
      {
        "id" : "bd93f5c4-76bd-4536-8e6b-5146504cb42d",
        "parentId" : "448e11c2-4ca5-4004-a35a-79a75af3933c",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I am happy to add a check in `StreamsConfig` and either throw or log a WARN depending how strict we want to be.",
        "createdAt" : "2020-07-24T00:06:49Z",
        "updatedAt" : "2020-08-05T21:30:01Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "e1a86e7d-c2a3-498e-a1d3-397c81534d94",
        "parentId" : "448e11c2-4ca5-4004-a35a-79a75af3933c",
        "authorId" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "body" : "Thinking a bit more about this, with the default, you may end up not honouring the deadline. `createTopics` can take up to 1m so if you invoke one when less than 1m is reaming before the deadline, you may not honour the deadline. It may not be that important though.\r\n\r\nIf we want to strictly enforce it, we could calculate the maximum timeout for each call, something like deadline - now, and set it with `CreateTopicsOptions.timeoutMs`.",
        "createdAt" : "2020-07-24T13:30:53Z",
        "updatedAt" : "2020-08-05T21:30:01Z",
        "lastEditedBy" : "59ca7821-b29c-4f24-a9d5-cbd394145686",
        "tags" : [
        ]
      }
    ],
    "commit" : "05b0faa5a146de6ec33784db87cf24c8ea1b6232",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +106,110 @@\n        long currentWallClockMs = time.milliseconds();\n        final long deadlineMs = currentWallClockMs + retryTimeoutMs;\n\n        Set<String> topicsNotReady = new HashSet<>(topics.keySet());"
  },
  {
    "id" : "52e3a5ed-221b-4af3-b99a-fb1b433818cf",
    "prId" : 9060,
    "prUrl" : "https://github.com/apache/kafka/pull/9060#pullrequestreview-499704472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a046b6c7-fa8b-4c4a-89f3-d2963cf100ce",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Hey @mjsax , am I reading this PR correctly? Do we now only allow a single member to retry topic creation/validation for up to half of the poll interval, after which we shut down the entire application? That sounds like the opposite of resiliency...what if the brokers are temporarily unavailable? Before this we would just let the single thread die, and the internal topic creation/validation would be retried on the subsequent rebalance. That wasn't ideal, but given the upcoming work to allow reviving/recreating a death thread, that seems to be preferable to permanently ending the application? \r\n\r\nSorry if I'm misreading this, was just going over all the PRs in the last month or so to produce a diff+summary of the important ones, and want to make sure I actually understand all the changes we've made",
        "createdAt" : "2020-09-16T16:47:24Z",
        "updatedAt" : "2020-09-16T16:47:24Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "d1f7d043-8e1f-4e28-a9b5-58265c972f7f",
        "parentId" : "a046b6c7-fa8b-4c4a-89f3-d2963cf100ce",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Apologies if this was touched on in the KIP, it's been a while and the discussion thread was quite long so I may have missed something there",
        "createdAt" : "2020-09-16T16:48:16Z",
        "updatedAt" : "2020-09-16T16:48:16Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "6d68c50c-bda0-4b68-a1e3-76e6eee29a58",
        "parentId" : "a046b6c7-fa8b-4c4a-89f3-d2963cf100ce",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Note that the previous default was \"zero retries\" and thus the new default is more resilient with a 5 minute default max.poll.interval. -- But yes, we shutdown the whole app for this case now as proposed by @guozhangwang (IIRC).",
        "createdAt" : "2020-09-16T18:34:18Z",
        "updatedAt" : "2020-09-16T18:34:18Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "4e49cf84-ef06-4943-80cd-4adfe2e165e0",
        "parentId" : "a046b6c7-fa8b-4c4a-89f3-d2963cf100ce",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Today since we do not have ways to partially create tasks we'd have to create all topics to make sure all tasks are \"complete\" within each rebalance, if we cannot successfully create the topics within the poll.interval (i.e. we'd need to complete that rebalance with the poll.interval, and I guess halving it is to be more conservative), then killing that thread is not very useful anyways since we cannot proceed with the initializable tasks anyways.\r\n\r\nThat being said, with the upcoming work I'd agree that just shutdown the thread and allow users to optionally retry rebalance with new threads would be preferrable.",
        "createdAt" : "2020-09-20T03:08:14Z",
        "updatedAt" : "2020-09-20T03:08:14Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "cb9c2fcb-6908-49a7-a997-2042d3b02e56",
        "parentId" : "a046b6c7-fa8b-4c4a-89f3-d2963cf100ce",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "cc @cadonna @wcarlson5 to bring to your attention.",
        "createdAt" : "2020-09-20T03:08:47Z",
        "updatedAt" : "2020-09-20T03:08:47Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "7530f6e7-4740-47c6-93e1-1dedb02374f3",
        "parentId" : "a046b6c7-fa8b-4c4a-89f3-d2963cf100ce",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Yeah I think we should remove the shutdown error code in case of TimeoutException during internal topic validation before 2.7. I'll create a ticket so we don't lose track -- I think even just letting it kill the one thread is better than killing all of them",
        "createdAt" : "2020-09-30T18:25:03Z",
        "updatedAt" : "2020-09-30T18:25:04Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "d9efade3-af2d-48de-8d16-40905571c505",
        "parentId" : "a046b6c7-fa8b-4c4a-89f3-d2963cf100ce",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "SGTM.",
        "createdAt" : "2020-09-30T18:30:15Z",
        "updatedAt" : "2020-09-30T18:30:16Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "05b0faa5a146de6ec33784db87cf24c8ea1b6232",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +77,81 @@        consumerConfig.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class);\n        consumerConfig.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, ByteArrayDeserializer.class);\n        retryTimeoutMs = new QuietConsumerConfig(consumerConfig).getInt(ConsumerConfig.MAX_POLL_INTERVAL_MS_CONFIG) / 2L;\n\n        log.debug(\"Configs:\" + Utils.NL +"
  }
]