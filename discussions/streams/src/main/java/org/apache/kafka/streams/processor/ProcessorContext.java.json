[
  {
    "id" : "8c9fd8a9-9bef-4dd6-9e80-39ba59aff3ea",
    "prId" : 4519,
    "prUrl" : "https://github.com/apache/kafka/pull/4519#pullrequestreview-94149640",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f082e139-d90f-4d35-abbf-531eb053690e",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "nit: use `#forward(K, V, To)` instead?",
        "createdAt" : "2018-02-05T15:06:07Z",
        "updatedAt" : "2018-03-16T00:26:51Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "8fd02fbf-2d8d-44ef-8b49-fc7005fa6261",
        "parentId" : "f082e139-d90f-4d35-abbf-531eb053690e",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "JavaDocs doesn't support generics and falls back to `Object` :(",
        "createdAt" : "2018-02-05T21:31:33Z",
        "updatedAt" : "2018-03-16T00:26:51Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a24643caadd76196cc325e747476f3514af8a381",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +168,172 @@     * @param value value\n     * @param childIndex index in list of children of this node\n     * @deprecated please use {@link #forward(Object, Object, To)} instead\n     */\n    // TODO when we remove this method, we can also remove `ProcessorNode#children`"
  },
  {
    "id" : "27ec83c1-2422-4b1c-a7f3-891b0e6b9690",
    "prId" : 4519,
    "prUrl" : "https://github.com/apache/kafka/pull/4519#pullrequestreview-94020561",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a96d3b0c-f537-41e1-8aed-0a1472e8797c",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "nit: same as above",
        "createdAt" : "2018-02-05T15:06:56Z",
        "updatedAt" : "2018-03-16T00:26:51Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a24643caadd76196cc325e747476f3514af8a381",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +179,183 @@     * @param value value\n     * @param childName name of downstream processor\n     * @deprecated please use {@link #forward(Object, Object, To)} instead\n     */\n    @Deprecated"
  },
  {
    "id" : "22ad4e17-d45a-4b24-b41a-85f90148da0c",
    "prId" : 8414,
    "prUrl" : "https://github.com/apache/kafka/pull/8414#pullrequestreview-386923245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98411955-63d0-438e-95c3-bcc5c7ffc387",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Not part of the KIP, and no difference whatsoever to the public API, but (unlike the javadoc I added), declaring that a method throws an unchecked exception is a totally ineffective way to inform users that it might get thrown (since they'll only ever see the declaraction if they read the source of this file). At least, the javadoc will show up in their IDE.",
        "createdAt" : "2020-04-03T04:13:20Z",
        "updatedAt" : "2020-04-06T22:03:32Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb647f05c2b3fa29fbd9ecb88b6fc72e274f9af",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +167,171 @@    Cancellable schedule(final Duration interval,\n                         final PunctuationType type,\n                         final Punctuator callback);\n\n    /**"
  },
  {
    "id" : "f2bfccf8-a432-4e67-ab50-865412e01b15",
    "prId" : 9221,
    "prUrl" : "https://github.com/apache/kafka/pull/9221#pullrequestreview-475089291",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3c5b348-1b97-45ba-b85b-f1f94707e3c6",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This was a minor API design error. The intent was to document that we could throw the exception, but declaring a runtime exception in the method header doesn't do anything. The right way to do it is to put it in the javadoc.",
        "createdAt" : "2020-08-26T01:48:44Z",
        "updatedAt" : "2020-09-09T17:34:57Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "c37687893a08e3bb056f99cc9927a5c679f80d5d",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +164,168 @@    Cancellable schedule(final Duration interval,\n                         final PunctuationType type,\n                         final Punctuator callback);\n\n    /**"
  },
  {
    "id" : "85347a9a-fbaf-4614-8b65-4cf3d7069428",
    "prId" : 9361,
    "prUrl" : "https://github.com/apache/kafka/pull/9361#pullrequestreview-500554881",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2461bda5-af76-4d5e-a050-b0bc617e1234",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "now that we can implement both the new and old contexts with the same Impl, we need this to resolve a clash. It's backward compatible and a nice quality-of-life improvement anyway.",
        "createdAt" : "2020-10-01T17:14:25Z",
        "updatedAt" : "2020-10-02T15:50:27Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8de75f6f16cf8bdcccbcb1bc1fc0a11dd40c1d1",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +94,98 @@     * @throws ClassCastException if the return type isn't a type or interface of the actual returned store.\n     */\n    <S extends StateStore> S getStateStore(final String name);\n\n    /**"
  },
  {
    "id" : "04ab7615-ab98-4f22-ae67-0b166cb5dba7",
    "prId" : 10869,
    "prUrl" : "https://github.com/apache/kafka/pull/10869#pullrequestreview-682178162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "473a02ad-fc7a-4221-95a7-ed67dbb5eb3c",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "As previously noted, we are not deprecating the context yet.",
        "createdAt" : "2021-06-11T20:22:55Z",
        "updatedAt" : "2021-06-11T20:35:07Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "a33ae9685681126b60352ba1a44805be21da6074",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +32,36 @@ * Processor context interface.\n */\n@SuppressWarnings(\"deprecation\") // Not deprecating the old context, since it is used by Transformers. See KAFKA-10603.\npublic interface ProcessorContext {\n"
  }
]