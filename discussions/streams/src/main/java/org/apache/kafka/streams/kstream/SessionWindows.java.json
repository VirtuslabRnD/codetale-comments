[
  {
    "id" : "1ad6d624-9b4f-4f5e-a3de-a47e8f0fd1f6",
    "prId" : 5257,
    "prUrl" : "https://github.com/apache/kafka/pull/5257#pullrequestreview-130957346",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d21c401a-bfee-4347-ba59-e0aced2fd8c5",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "fixes a lurking potential bug: using a mutable field in equals/hashcode.",
        "createdAt" : "2018-06-21T19:16:45Z",
        "updatedAt" : "2018-06-28T16:17:47Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "36180ec9e61ef1af0d9d15c173f1358a79b87dfd",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +102,106 @@        }\n\n        return new SessionWindows(gapMs, durationMs);\n    }\n"
  },
  {
    "id" : "f6a87f23-a0a7-4b48-bcdc-4c5045ce209d",
    "prId" : 5369,
    "prUrl" : "https://github.com/apache/kafka/pull/5369#pullrequestreview-145879970",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6bffa830-9529-4d7f-bbed-469fffd47e1a",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "nit: parameters on a single line?",
        "createdAt" : "2018-08-07T14:15:10Z",
        "updatedAt" : "2018-08-13T21:59:56Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "b98ffa44-067e-4081-b763-dc3214cf7992",
        "parentId" : "6bffa830-9529-4d7f-bbed-469fffd47e1a",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I don't think this line is \"too long\", or did I misunderstand your comment?",
        "createdAt" : "2018-08-07T21:48:05Z",
        "updatedAt" : "2018-08-13T21:59:56Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "23d98c9f-bb6b-410f-beda-f71fd8076f74",
        "parentId" : "6bffa830-9529-4d7f-bbed-469fffd47e1a",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "My understanding is we take parameter lists over 2 and put them on separate lines, but not required in this case.",
        "createdAt" : "2018-08-10T20:43:53Z",
        "updatedAt" : "2018-08-13T21:59:56Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "10ec2cc4-691a-4f00-92ad-8ee03c76b513",
        "parentId" : "6bffa830-9529-4d7f-bbed-469fffd47e1a",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Oh! actually, according to our coding guidelines, *all methods* should be declared with single-parameter-per-line, even if they have only 2 parameters. (`Use a \"single parameter per line\" formatting when defining methods (also for methods with only 2 parameters).`) (https://kafka.apache.org/coding-guide)\r\n\r\nThis doesn't match what I've observed in the code base, and it seems kinda overkill to me. Can we change this to \"single parameter per line\" when the method declaration is over 120 chars? Or should I update my code formatter to always split the parameters.\r\n\r\n(Note this is distinct from the style for method call _arguments_. For method calls, we break them into one-per-line when the line is over 120 chars.)",
        "createdAt" : "2018-08-13T15:16:13Z",
        "updatedAt" : "2018-08-13T21:59:56Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "5d518f9d-732e-465f-978f-0d4106afbd0a",
        "parentId" : "6bffa830-9529-4d7f-bbed-469fffd47e1a",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I personally prefer single parameter per line. It makes diff was easier to read when a parameter is added, modified, removed.",
        "createdAt" : "2018-08-14T00:09:06Z",
        "updatedAt" : "2018-08-14T00:09:06Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "366bb5a8f10600baf3b4000238cce9f6a8a6ef7d",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +73,77 @@\n\n    private SessionWindows(final long gapMs, final long maintainDurationMs, final Duration grace) {\n        this.gapMs = gapMs;\n        this.maintainDurationMs = maintainDurationMs;"
  },
  {
    "id" : "1472e6b1-2371-4e30-a118-31dd8024665f",
    "prId" : 5369,
    "prUrl" : "https://github.com/apache/kafka/pull/5369#pullrequestreview-146156717",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e9380e0-ddb4-4531-8aaf-92bba3f69135",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Why for JoinWindows and TimeWindows we do not need a constructor with `grace` parameter, and just use `super.grace(millisAfterWindowEnd);` for its `grace` function, while in SessionWindows we cannot do the same?",
        "createdAt" : "2018-08-13T22:37:11Z",
        "updatedAt" : "2018-08-13T22:40:22Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "65ed1981-64ba-48d8-881c-4306a41e73c7",
        "parentId" : "2e9380e0-ddb4-4531-8aaf-92bba3f69135",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "It's kind of a long story. Previously, when everything had equals/hashCode, it was necessary to avoid using a mutable field in equals/hashCode. The other Windows incorrectly omitted grace period from equals/hashCode and thus never surfaced the warning that made me add it as a constructor arg here.\r\n\r\nBut that's all water under the bridge now. I'd be happy to move toward constructor args in the Windows class hierarchy, because that's my preference, but it's not really necessary.\r\n\r\nIt's not \"necessary\" here any longer either, but there's nothing wrong with it. In some dogmatic sense, it's \"better\" to prefer immutable objects, like this one, but I doubt we'll get into trouble with mutability in the *Windows.\r\n\r\nWDYT?",
        "createdAt" : "2018-08-14T00:24:00Z",
        "updatedAt" : "2018-08-14T00:24:00Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "e6df4370-06a2-42f7-8de8-6091c4534c1c",
        "parentId" : "2e9380e0-ddb4-4531-8aaf-92bba3f69135",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Actually, I take back the thing about switching to constructor args in the Windows hierarchy. Because of the subclassing, it's awkward to use the constructor-arg pattern.",
        "createdAt" : "2018-08-14T00:26:37Z",
        "updatedAt" : "2018-08-14T00:26:37Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "1b55a4f7-a409-4379-bd86-42433be4ddc4",
        "parentId" : "2e9380e0-ddb4-4531-8aaf-92bba3f69135",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "recall that SessionWindows is not a subclass of Windows.",
        "createdAt" : "2018-08-14T00:27:49Z",
        "updatedAt" : "2018-08-14T00:27:49Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "3e0bfe52-82cf-4105-b94b-bb299ec53e24",
        "parentId" : "2e9380e0-ddb4-4531-8aaf-92bba3f69135",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Yeah I'm aware SessionWindows does not inherit from Windows, just wanted to know if there is any blockers to have consistent APIs (maybe just my own weird taste). If you feel better to keep them as-is I'm fine too; otherwise we can move SessionWindows towards the other direction to use mutable fields?",
        "createdAt" : "2018-08-14T02:41:51Z",
        "updatedAt" : "2018-08-14T02:41:51Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "6a376366-109e-48aa-9fcb-2cbf6b63432a",
        "parentId" : "2e9380e0-ddb4-4531-8aaf-92bba3f69135",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "We have not seen evidence of it, but the mutability of those fields is an opportunity for a bug, as any code block in a windowed ktable could illegally mutate the key, and we would have no way to prevent it. In the future, it would be nice if we made Windowed an interface and made all the implementations immutable. IMHO, it'd be a mistake to increase our exposure to this condition just for the sake of consistency.",
        "createdAt" : "2018-08-14T16:51:30Z",
        "updatedAt" : "2018-08-14T16:51:30Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "12d80ab9-e1d0-4ade-bc53-3626770bf184",
        "parentId" : "2e9380e0-ddb4-4531-8aaf-92bba3f69135",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Ack, I'm convinced.",
        "createdAt" : "2018-08-14T16:52:33Z",
        "updatedAt" : "2018-08-14T16:52:33Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "366bb5a8f10600baf3b4000238cce9f6a8a6ef7d",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +112,116 @@        }\n\n        return new SessionWindows(gapMs, durationMs, null);\n    }\n"
  },
  {
    "id" : "f888d83b-932f-42d2-836f-c233d461a1f8",
    "prId" : 5510,
    "prUrl" : "https://github.com/apache/kafka/pull/5510#pullrequestreview-146574038",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c9a5d7d6-99d3-4fcf-abf2-2d5d154b44d6",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This was actually a bug, which we need to fix regardless of whether we merge this PR or not.",
        "createdAt" : "2018-08-15T18:56:35Z",
        "updatedAt" : "2018-08-15T18:56:35Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "09f76b616dc46666361e47755088d13282b6bc19",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +113,117 @@        }\n\n        return new SessionWindows(gapMs, durationMs, grace);\n    }\n"
  },
  {
    "id" : "0b9b3488-f773-439a-98a3-a029f3778dd7",
    "prId" : 5682,
    "prUrl" : "https://github.com/apache/kafka/pull/5682#pullrequestreview-160128104",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ceb7183c-91ed-4b51-8eed-1a8ca7306b35",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "add `@throws` to JavaDoc for `IllegalArgumentException`",
        "createdAt" : "2018-09-30T21:15:41Z",
        "updatedAt" : "2018-10-04T14:34:18Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5210f9fff117c695cb1f3024c94eff7f49599a6a",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +145,149 @@     * @throws IllegalArgumentException if the {@code afterWindowEnd} is negative of can't be represented as {@code long milliseconds}\n     */\n    public SessionWindows grace(final Duration afterWindowEnd) throws IllegalArgumentException {\n        ApiUtils.validateMillisecondDuration(afterWindowEnd, \"afterWindowEnd\");\n        if (afterWindowEnd.toMillis() < 0) {"
  },
  {
    "id" : "c1e44b30-7825-4524-8397-a898ce4ca345",
    "prId" : 7274,
    "prUrl" : "https://github.com/apache/kafka/pull/7274#pullrequestreview-283713478",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "019e1f70-8acf-489f-9eba-11c52c7ab637",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Similar to above, should we make use of the term \"late\" (out-of-order and arriving after the window is closed) to explain this phenomenon? I.e., I think our agreed definition of \"late\" is the same as what I previously used \"too-late\" for.",
        "createdAt" : "2019-09-04T15:51:39Z",
        "updatedAt" : "2019-09-20T01:27:15Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "94a8469159b893129a8d2420b8283f52d7954143",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +139,143 @@     * <p>\n     * Note that new events may change the boundaries of session windows, so aggressive\n     * close times can lead to surprising results in which an out-of-order event is rejected and then\n     * a subsequent event moves the window boundary forward.\n     *"
  }
]