[
  {
    "id" : "942aa3c6-82b4-47ae-96ba-1f7c872ba2cf",
    "prId" : 6781,
    "prUrl" : "https://github.com/apache/kafka/pull/6781#pullrequestreview-240262074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7d94d2e2-386e-413c-9533-d6a072a6caa4",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Here's the new value getter implementation.\r\n\r\nFor any data that's currently buffered, the upstream state store is actually _not_ what we want to return. For a key, we have to return the upstream state from immediately before the first record we buffered. This is now provided by the buffer, as `providedValueIfBuffered`.\r\n\r\nFor any data that's _not_ currently buffered, then we can just delegate to the parent store, since the parent table's state is equal to the suppressed table's state for this key.",
        "createdAt" : "2019-05-21T19:56:27Z",
        "updatedAt" : "2019-05-30T14:57:19Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "daf890e855d0949687a6d4e35c7ed15b473c1a71",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +59,63 @@\n    @Override\n    public KTableValueGetterSupplier<K, V> view() {\n        final KTableValueGetterSupplier<K, V> parentValueGetterSupplier = parentKTable.valueGetterSupplier();\n        return new KTableValueGetterSupplier<K, V>() {"
  },
  {
    "id" : "f1b880ed-a81c-45c0-8df0-725780a1342e",
    "prId" : 6781,
    "prUrl" : "https://github.com/apache/kafka/pull/6781#pullrequestreview-240262074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c51fabb4-4d58-4985-b94f-ff51bd8b32b1",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "apparently, we have to initialize the parent getter?",
        "createdAt" : "2019-05-21T19:57:02Z",
        "updatedAt" : "2019-05-30T14:57:19Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "daf890e855d0949687a6d4e35c7ed15b473c1a71",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +72,76 @@                    @Override\n                    public void init(final ProcessorContext context) {\n                        parentGetter.init(context);\n                        // the main processor is responsible for the buffer's lifecycle\n                        buffer = requireNonNull((TimeOrderedKeyValueBuffer<K, V>) context.getStateStore(storeName));"
  },
  {
    "id" : "adb5100d-59b3-4ab0-a5fa-c48be3dcdb2b",
    "prId" : 6781,
    "prUrl" : "https://github.com/apache/kafka/pull/6781#pullrequestreview-240262074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "128e7cd6-1a1d-450c-b2f5-d03cb8be048b",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "making a note that we should neither initialize nor close the buffer from within the getter.",
        "createdAt" : "2019-05-21T19:57:37Z",
        "updatedAt" : "2019-05-30T14:57:19Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "daf890e855d0949687a6d4e35c7ed15b473c1a71",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +73,77 @@                    public void init(final ProcessorContext context) {\n                        parentGetter.init(context);\n                        // the main processor is responsible for the buffer's lifecycle\n                        buffer = requireNonNull((TimeOrderedKeyValueBuffer<K, V>) context.getStateStore(storeName));\n                    }"
  },
  {
    "id" : "913e37d2-9824-477b-81d1-83e0747096ad",
    "prId" : 6781,
    "prUrl" : "https://github.com/apache/kafka/pull/6781#pullrequestreview-240262074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8947e3f8-260a-45c4-9327-2bbd2675497f",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Any processor that needs to use this valuegetter needs to be connected to both the buffer and the parent table's store.",
        "createdAt" : "2019-05-21T20:05:59Z",
        "updatedAt" : "2019-05-30T14:57:19Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "daf890e855d0949687a6d4e35c7ed15b473c1a71",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +102,106 @@                System.arraycopy(parentStores, 0, stores, 1, parentStores.length);\n                stores[0] = storeName;\n                return stores;\n            }\n        };"
  },
  {
    "id" : "bf4e3ac1-9e4f-49a3-810e-b31cf5577600",
    "prId" : 6781,
    "prUrl" : "https://github.com/apache/kafka/pull/6781#pullrequestreview-240262074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15ee1a22-64e7-47af-80f3-d1b94da2970e",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This class is almost verbatim from before. There are a few changes related to pushing the value type (Change<V>) into the buffer.",
        "createdAt" : "2019-05-21T20:07:50Z",
        "updatedAt" : "2019-05-30T14:57:19Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "daf890e855d0949687a6d4e35c7ed15b473c1a71",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +112,116 @@    }\n\n    private static final class KTableSuppressProcessor<K, V> implements Processor<K, Change<V>> {\n        private final long maxRecords;\n        private final long maxBytes;"
  },
  {
    "id" : "54c73a1c-c579-4879-b446-685eb6da3d33",
    "prId" : 6781,
    "prUrl" : "https://github.com/apache/kafka/pull/6781#pullrequestreview-240262074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e00ccbe5-43f0-4838-90eb-77e8bfa2957b",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This, for example, used to be a fullChangeSerde, but now we just need to set the value serde.",
        "createdAt" : "2019-05-21T20:08:39Z",
        "updatedAt" : "2019-05-30T14:57:19Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "daf890e855d0949687a6d4e35c7ed15b473c1a71",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +144,148 @@\n            buffer = requireNonNull((TimeOrderedKeyValueBuffer<K, V>) context.getStateStore(storeName));\n            buffer.setSerdesIfNull((Serde<K>) context.keySerde(), (Serde<V>) context.valueSerde());\n        }\n"
  },
  {
    "id" : "d7c33c4c-5e7d-468b-b776-6a16e7c843df",
    "prId" : 6781,
    "prUrl" : "https://github.com/apache/kafka/pull/6781#pullrequestreview-240710824",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcb2caef-d311-4bef-9ee0-dcf5b717bda0",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Should you close the parentGetter here?",
        "createdAt" : "2019-05-21T21:57:58Z",
        "updatedAt" : "2019-05-30T14:57:19Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "bdeb9f2a-a0c4-4722-9bfc-2a4de9603447",
        "parentId" : "dcb2caef-d311-4bef-9ee0-dcf5b717bda0",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "good catch!",
        "createdAt" : "2019-05-22T15:28:03Z",
        "updatedAt" : "2019-05-30T14:57:19Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "daf890e855d0949687a6d4e35c7ed15b473c1a71",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +91,95 @@                    public void close() {\n                        parentGetter.close();\n                        // the main processor is responsible for the buffer's lifecycle\n                    }\n                };"
  }
]