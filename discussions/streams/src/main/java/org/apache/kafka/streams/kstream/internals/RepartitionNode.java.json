[
  {
    "id" : "ef51b8dd-252e-404f-906d-d85f56e883c4",
    "prId" : 4923,
    "prUrl" : "https://github.com/apache/kafka/pull/4923#pullrequestreview-117101748",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5493fc35-b7ce-48e2-a5b6-9639a6598277",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "What's the difference between the processorName and the nodeName?",
        "createdAt" : "2018-04-26T21:24:47Z",
        "updatedAt" : "2018-05-04T15:25:06Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "b552d549-fc11-42b3-b1d0-3220ae6195b9",
        "parentId" : "5493fc35-b7ce-48e2-a5b6-9639a6598277",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "During a repartitioning, we create a filter processor to remove any null keys, so the processorName is the name the processor used for that purpose.  The method creating the repartitioning returns the name of the repartition source as the name for that particular `KStreamImpl`.  So we need to capture both names, the `processsorName` is for the filter processor and the source name is used for the node name as that reflects the current structure within the DSL.",
        "createdAt" : "2018-05-01T16:32:57Z",
        "updatedAt" : "2018-05-04T15:25:06Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "841af1e6-0178-4db7-825c-48372fcd3bff",
        "parentId" : "5493fc35-b7ce-48e2-a5b6-9639a6598277",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "ack, let's rename them correspondingly to be more clear then.",
        "createdAt" : "2018-05-02T23:20:22Z",
        "updatedAt" : "2018-05-04T15:25:06Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f05b759f69d61379d9eec057d336adb3dd3e765",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +75,79 @@    }\n\n    String processorName() {\n        return processorName;\n    }"
  },
  {
    "id" : "6eeb1b65-7773-420a-97dc-aeb64caf208a",
    "prId" : 4923,
    "prUrl" : "https://github.com/apache/kafka/pull/4923#pullrequestreview-115699800",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ca0ae480-52ea-4e5b-ad4e-f6452fa75c41",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "As I mentioned in the other place, if the `XXBuilder.build()` call will only be triggered once in its life time, I'd suggest just keeping the `RepartitionNode` with non-final parameters for simplicity.",
        "createdAt" : "2018-04-26T21:25:48Z",
        "updatedAt" : "2018-05-04T15:25:06Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f05b759f69d61379d9eec057d336adb3dd3e765",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +89,93 @@\n\n    static final class RepartitionNodeBuilder<K, V> {\n\n        private String processorNodeName;"
  },
  {
    "id" : "9d7533ff-162b-44de-bbee-081d699baa19",
    "prId" : 4923,
    "prUrl" : "https://github.com/apache/kafka/pull/4923#pullrequestreview-115699800",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07e841fc-70d4-46c8-87df-f0a604554d0a",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Should we just include `ProducedInternal` and `ConsumedInternal` to be consistent, assuming we are going to remove the deprecated APIs?",
        "createdAt" : "2018-04-26T21:36:55Z",
        "updatedAt" : "2018-05-04T15:25:06Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f05b759f69d61379d9eec057d336adb3dd3e765",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +24,28 @@class RepartitionNode<K, V> extends StatelessProcessorNode<K, V> {\n\n    private final Serde<K> keySerde;\n    private final Serde<V> valueSerde;\n    private final String sinkName;"
  }
]