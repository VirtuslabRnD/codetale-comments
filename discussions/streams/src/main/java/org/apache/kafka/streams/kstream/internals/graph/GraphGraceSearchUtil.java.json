[
  {
    "id" : "cfbc8644-d729-483c-aad5-dbaf91e6b7af",
    "prId" : 5567,
    "prUrl" : "https://github.com/apache/kafka/pull/5567#pullrequestreview-150663632",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a1f044a-d1f2-4030-b379-f08c8b9badeb",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Utility class just to encapsulate the graph search for looking back up the topology for the grace period (and verifying it's configured the same on all incoming branches)",
        "createdAt" : "2018-08-29T20:20:42Z",
        "updatedAt" : "2018-09-24T14:28:33Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "035b26310e76216b502839a6b9f22bf1fc75fee2",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +24,28 @@import org.apache.kafka.streams.processor.ProcessorSupplier;\n\npublic final class GraphGraceSearchUtil {\n    private GraphGraceSearchUtil() {}\n"
  },
  {
    "id" : "21c0679f-a114-4bf5-90c5-1ae122ad0c7d",
    "prId" : 5567,
    "prUrl" : "https://github.com/apache/kafka/pull/5567#pullrequestreview-151555862",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "972eb931-96e1-428e-a97f-7e00a1a9ce03",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "We should have a unit test for this class covering both base cases as well as the success result",
        "createdAt" : "2018-08-31T21:44:40Z",
        "updatedAt" : "2018-09-24T14:28:33Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "035b26310e76216b502839a6b9f22bf1fc75fee2",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +24,28 @@import org.apache.kafka.streams.processor.ProcessorSupplier;\n\npublic final class GraphGraceSearchUtil {\n    private GraphGraceSearchUtil() {}\n"
  },
  {
    "id" : "ff37bf8f-ed27-452d-a4f8-cb9cf6ef5588",
    "prId" : 5567,
    "prUrl" : "https://github.com/apache/kafka/pull/5567#pullrequestreview-152583391",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5bc85add-8a2e-4da2-91db-d01260f7fabc",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "This base case and the one below could be refactored into a method \r\n```java\r\n checkBaseCondition(Objects::isNull, streamsGraphNode, chain);\r\n .......\r\n checkBaseCondition(s -> s.parentNodes().isEmpty(), streamsGraphNode, chain);\r\n\r\n.....\r\nprivate static void checkBaseCondition(final Predicate<StreamsGraphNode> windowClosePredicate,\r\n                                      final StreamsGraphNode graphNode,\r\n                                      final String chain) {\r\n        if (windowClosePredicate.test(graphNode)) {\r\n            throw new TopologyException(\r\n                \"Window close time is only defined for windowed computations. Got [\" + chain + \"].\"\r\n            );\r\n        }\r\n    }\r\n```\r\nWDYT?",
        "createdAt" : "2018-08-31T21:51:23Z",
        "updatedAt" : "2018-09-24T14:28:33Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "946ddcd0-9478-4fb4-96fc-fcaee0f6c980",
        "parentId" : "5bc85add-8a2e-4da2-91db-d01260f7fabc",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Yes, it seems like this would also work, but TBH it seems a little roundabout to me. Is the objective to avoid duplicates of the error string?\r\n\r\nMaybe we could just extract the exception construction into a method:\r\n```java\r\nif (streamsGraphNode == null) {\r\n  throw getNonWindowedGraceSearchException(chain);\r\n}\r\n...\r\npublic TopologyException getNonWindowedGraceSearchException(final String chain) {\r\n  return new TopologyException(\r\n    \"Window close time is only defined for windowed computations. Got [\" + chain + \"].\"\r\n  );\r\n}\r\n```\r\n\r\nThen again, I have doubts about whether adding an extra method to de-duplicate the (to me) simple logic of creating the exception is worth it at all. Especially considering that there's no particular reason that the exception message needs to be exactly the same in these two cases.\r\n\r\nWhat say you?",
        "createdAt" : "2018-09-04T16:28:04Z",
        "updatedAt" : "2018-09-24T14:28:33Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "be158622-2e78-4fda-b672-d9e98990bdd3",
        "parentId" : "5bc85add-8a2e-4da2-91db-d01260f7fabc",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "The overall objective was merely to reduce the duplication in code, as the two blocks seemed the same to me less the condition triggering the exception.  But you have a point so maybe leave as is.",
        "createdAt" : "2018-09-05T16:34:06Z",
        "updatedAt" : "2018-09-24T14:28:33Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "035b26310e76216b502839a6b9f22bf1fc75fee2",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@    private static long findAndVerifyWindowGrace(final StreamsGraphNode streamsGraphNode, final String chain) {\n        // error base case: we traversed off the end of the graph without finding a window definition\n        if (streamsGraphNode == null) {\n            throw new TopologyException(\n                \"Window close time is only defined for windowed computations. Got [\" + chain + \"].\""
  }
]