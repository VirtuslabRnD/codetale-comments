[
  {
    "id" : "2045aa4f-92f9-466c-908d-92e1f73b664d",
    "prId" : 5795,
    "prUrl" : "https://github.com/apache/kafka/pull/5795#pullrequestreview-165332087",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36f5d4cc-b4f3-4a94-9080-5e4091882303",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Avoid recording metrics if they haven't changed.",
        "createdAt" : "2018-10-16T19:36:41Z",
        "updatedAt" : "2018-11-27T01:22:02Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd8806c91d24ee933ce6e1ab8972e725bf42ef12",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +318,322 @@        if (evictions > 0) {\n            updateBufferMetrics();\n        }\n    }\n"
  },
  {
    "id" : "3f018106-0262-420a-aec4-204707b63e8e",
    "prId" : 5795,
    "prUrl" : "https://github.com/apache/kafka/pull/5795#pullrequestreview-175606934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3e2ba85-b3dd-4e40-b953-edca1f990db0",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Should we call this in `init()` and/or `close()`, too?",
        "createdAt" : "2018-11-06T22:12:19Z",
        "updatedAt" : "2018-11-27T01:22:02Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "8b09c19f-dd54-4d79-ac85-8542de0d69d8",
        "parentId" : "b3e2ba85-b3dd-4e40-b953-edca1f990db0",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "sure; I don't think they're strictly necessary, but it doesn't hurt, and it'll make the system more resilient to future changes.",
        "createdAt" : "2018-11-15T23:41:37Z",
        "updatedAt" : "2018-11-27T01:22:02Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd8806c91d24ee933ce6e1ab8972e725bf42ef12",
    "line" : 105,
    "diffHunk" : "@@ -1,1 +376,380 @@    }\n\n    private void updateBufferMetrics() {\n        bufferSizeSensor.record(memBufferSize);\n        bufferCountSensor.record(index.size());"
  },
  {
    "id" : "7eded430-e9b8-47a1-aa95-795ca8664505",
    "prId" : 5795,
    "prUrl" : "https://github.com/apache/kafka/pull/5795#pullrequestreview-175668977",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "633494ce-bfbf-4aff-8f75-466ad9d80bfa",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "In the wiki there is another metric for `suppression-mem-buffer-evict`, is that not in the scope of this PR?",
        "createdAt" : "2018-11-15T02:04:14Z",
        "updatedAt" : "2018-11-27T01:22:02Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "59cafbaf-d4d3-445f-bbb1-ebcf0a3048dc",
        "parentId" : "633494ce-bfbf-4aff-8f75-466ad9d80bfa",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Ah, now that you mention it, when I originally created this PR, I noticed there were some shortcomings with the metrics I proposed in the KIP, so I wanted to get the reviewers' feedback on the form it has taken in this PR before proposing an update to the KIP.\r\n\r\nIn particular, I proposed an asymmetric pair of metrics where the processor node would measure the number of incoming events (`intermediate-result-suppression`), but the buffer would measure the outgoing (emitted==evicted) events. It seemed better to offer a symmetric pair of in/out metrics on either the processor or the buffer. In this PR, I chose to put them both on the node.\r\n\r\nIn other words, I'm proposing to replace `suppression-mem-buffer-evict` with `suppression-emit`.\r\n\r\nOf course, in this same review, you have proposed to drop `intermediate-result-suppression` in favor of the existing `process-rate` and `process-total` node-level metrics. This reduces the argument, but I *think* it still makes sense to make this a node metric instead of a buffer metric, since (IMHO) it more closely matches the intent of using a suppression *node* to control the emission rate.",
        "createdAt" : "2018-11-15T23:53:51Z",
        "updatedAt" : "2018-11-27T01:22:02Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "68347e15-a1e7-42f3-8428-e75a48f7119b",
        "parentId" : "633494ce-bfbf-4aff-8f75-466ad9d80bfa",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Thanks for the clarification, that sounds good to me.",
        "createdAt" : "2018-11-16T06:14:44Z",
        "updatedAt" : "2018-11-27T01:22:02Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd8806c91d24ee933ce6e1ab8972e725bf42ef12",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +61,65 @@    private RecordCollector collector;\n    private String changelogTopic;\n    private Sensor bufferSizeSensor;\n    private Sensor bufferCountSensor;\n"
  },
  {
    "id" : "9bd8f468-6b3d-4df5-ba03-5946190f429c",
    "prId" : 5819,
    "prUrl" : "https://github.com/apache/kafka/pull/5819#pullrequestreview-166797510",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f58cb471-059b-460b-8b3b-52c90ba1da7d",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Should we log a warning here and below?",
        "createdAt" : "2018-10-19T23:02:56Z",
        "updatedAt" : "2018-10-20T21:25:17Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "9aba22eb-8b71-4b05-b321-09c21703b047",
        "parentId" : "f58cb471-059b-460b-8b3b-52c90ba1da7d",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I'm not sure I agree with a warning.\r\n\r\nI think it's fine to just ignore the call, since the buffer will behave correctly whether you call these methods or not. In fact, I originally had them no-op, and changed it to throw upon review.\r\n\r\nThere's no publicly facing API to register a buffer, so there's no way that a user could call these methods right now. In fact, the buffer itself is an `internal` class. Therefore, the only way these methods get called are via Streams itself.\r\n\r\nMy thought is that it would be confusing to see warnings that actually indicate nothing is wrong and about which you can do nothing.\r\n\r\nWould you be satisfied with a javadoc explaining the decision?",
        "createdAt" : "2018-10-20T19:59:51Z",
        "updatedAt" : "2018-10-20T21:25:17Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "5e306dd1-1c72-40b9-aa23-02f0e3b596eb",
        "parentId" : "f58cb471-059b-460b-8b3b-52c90ba1da7d",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Yeah, my intent was just some sort of notification to users these methods are ignored, javadoc is fine with me.",
        "createdAt" : "2018-10-21T19:23:50Z",
        "updatedAt" : "2018-10-21T19:23:50Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e6c42b021c4e4181b8cca7c9296f92e0bbdd2107",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +79,83 @@        @Override\n        public StoreBuilder<StateStore> withCachingEnabled() {\n            return this;\n        }\n"
  },
  {
    "id" : "ced42005-a85f-4772-a03c-f452ac9cba09",
    "prId" : 6536,
    "prUrl" : "https://github.com/apache/kafka/pull/6536#pullrequestreview-226935859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15e46f92-b90e-4d7a-9548-5713dc426a0d",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why do we need this check?",
        "createdAt" : "2019-04-12T17:36:52Z",
        "updatedAt" : "2019-04-19T21:52:28Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "18d337a0-13f7-487e-9ee6-45c843d4cfc4",
        "parentId" : "15e46f92-b90e-4d7a-9548-5713dc426a0d",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This is one of the bugs that this PR fixes. The correct operation of this class depends on maintaining `minTimestamp` on every mutation. If a future code change breaks that contract, it would re-introduce a variant of our bug, and it would be just as subtle as it was this time. This check safeguards against that eventuality, by checking on our invariant at the spot we depend on it.",
        "createdAt" : "2019-04-15T20:09:56Z",
        "updatedAt" : "2019-04-19T21:52:28Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "ea57c444-27ec-48b6-97f9-0c81db4f3584",
        "parentId" : "15e46f92-b90e-4d7a-9548-5713dc426a0d",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Ack. So we don't need it, but we want it :) ",
        "createdAt" : "2019-04-16T00:15:52Z",
        "updatedAt" : "2019-04-19T21:52:28Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5bd0999c3376588b891016efbec78274a3714ec",
    "line" : 217,
    "diffHunk" : "@@ -1,1 +372,376 @@            // predicate being true means we read one record, call the callback, and then remove it\n            while (next != null && predicate.get()) {\n                if (next.getKey().time != minTimestamp) {\n                    throw new IllegalStateException(\n                        \"minTimestamp [\" + minTimestamp + \"] did not match the actual min timestamp [\" +"
  },
  {
    "id" : "a66793e0-ad5e-41b4-a1aa-0f3ecad6b932",
    "prId" : 6602,
    "prUrl" : "https://github.com/apache/kafka/pull/6602#pullrequestreview-228364218",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "716226ad-ee61-4694-9e15-cca4c77d4dfa",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I added the `Eviction` class so we can pack up all three pieces (key, value, context) to give to the callback. We can't use ContextualRecord anymore, since it's a post-serialization container for the value.",
        "createdAt" : "2019-04-18T15:51:15Z",
        "updatedAt" : "2019-04-26T13:35:41Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "7414ed063c920aa5c2f4bb29c81664fecb851b9b",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +379,383 @@    @Override\n    public void evictWhile(final Supplier<Boolean> predicate,\n                           final Consumer<Eviction<K, V>> callback) {\n        final Iterator<Map.Entry<BufferKey, ContextualRecord>> delegate = sortedMap.entrySet().iterator();\n        int evictions = 0;"
  },
  {
    "id" : "6c03d16e-2d80-4cff-b317-ae7bb2205238",
    "prId" : 6602,
    "prUrl" : "https://github.com/apache/kafka/pull/6602#pullrequestreview-230282088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17060727-3f6e-41f8-a455-0dedc3a212a3",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Just clarifying: are all the non-testing callers passing in the serdes, hence it would not be null in practice?",
        "createdAt" : "2019-04-22T17:51:44Z",
        "updatedAt" : "2019-04-26T13:35:41Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "b79d303a-a613-4166-a9dd-222ce41d8165",
        "parentId" : "17060727-3f6e-41f8-a455-0dedc3a212a3",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "hmm. Yes, although I think there's a problem with the logic. \r\n\r\nThe KTableImpl does:\r\n```java\r\n            new InMemoryTimeOrderedKeyValueBuffer.Builder<>(storeName, keySerde, new FullChangeSerde<>(valSerde))\r\n```\r\n\r\nbut `valSerde` might be null, and `FullChangeSerde` forbids null for this argument. So I think the default serde case doesn't work properly here.\r\n\r\nI'll add a test for this and fix the code if I'm right.",
        "createdAt" : "2019-04-23T22:14:48Z",
        "updatedAt" : "2019-04-26T13:35:41Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "30ea38e6-7201-450c-8b6d-64bbaaf19602",
        "parentId" : "17060727-3f6e-41f8-a455-0dedc3a212a3",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Ok, now the answer is \"no\". The only non-test caller is `KTableImpl`, and it will set its own serdes, but those might be `null` if they are not known.",
        "createdAt" : "2019-04-24T18:25:42Z",
        "updatedAt" : "2019-04-26T13:35:41Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "7414ed063c920aa5c2f4bb29c81664fecb851b9b",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +85,89 @@        private boolean loggingEnabled = true;\n\n        public Builder(final String storeName, final Serde<K> keySerde, final Serde<V> valSerde) {\n            this.storeName = storeName;\n            this.keySerde = keySerde;"
  },
  {
    "id" : "d69a544b-3d70-48ec-9178-6bb466ff7a38",
    "prId" : 6602,
    "prUrl" : "https://github.com/apache/kafka/pull/6602#pullrequestreview-230769623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2508c0b5-3937-400c-a1bb-7b3f8a1dfe07",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Nice catch!",
        "createdAt" : "2019-04-24T23:25:05Z",
        "updatedAt" : "2019-04-26T13:35:41Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "db000b0d-5a1a-4d31-b3cf-11774d84bb46",
        "parentId" : "2508c0b5-3937-400c-a1bb-7b3f8a1dfe07",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Thanks! I was chasing down an unchecked cast and was pleasantly surprised that it was totally unnecessary!",
        "createdAt" : "2019-04-25T16:57:53Z",
        "updatedAt" : "2019-04-26T13:35:41Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "7414ed063c920aa5c2f4bb29c81664fecb851b9b",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +127,131 @@\n        @Override\n        public InMemoryTimeOrderedKeyValueBuffer<K, V> build() {\n            return new InMemoryTimeOrderedKeyValueBuffer<>(storeName, loggingEnabled, keySerde, valSerde);\n        }"
  },
  {
    "id" : "f391e3a7-8a9d-4037-88bb-1c10f06a0ab8",
    "prId" : 6781,
    "prUrl" : "https://github.com/apache/kafka/pull/6781#pullrequestreview-240925701",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f72e6929-c145-43c5-bde0-9aa866eb8597",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "just cleanup",
        "createdAt" : "2019-05-21T20:16:22Z",
        "updatedAt" : "2019-05-30T14:57:19Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "8272875e-de7e-4239-9b40-5b0797184a45",
        "parentId" : "f72e6929-c145-43c5-bde0-9aa866eb8597",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Nice cleanup!",
        "createdAt" : "2019-05-29T04:57:51Z",
        "updatedAt" : "2019-05-30T14:57:19Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "daf890e855d0949687a6d4e35c7ed15b473c1a71",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +84,88 @@    private int partition;\n\n    public static class Builder<K, V> implements StoreBuilder<InMemoryTimeOrderedKeyValueBuffer<K, V>> {\n\n        private final String storeName;"
  },
  {
    "id" : "1cf938bc-ee3a-4de0-bd78-4d7bd8e84e2f",
    "prId" : 7373,
    "prUrl" : "https://github.com/apache/kafka/pull/7373#pullrequestreview-292471532",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2f6220f-7837-4acc-877f-374d9fed857b",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why do we add a timestamp now? Seem, we ignore it on restore anyway?",
        "createdAt" : "2019-09-20T01:19:16Z",
        "updatedAt" : "2019-09-26T23:27:16Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "0b6011c4-35e7-40f2-8d40-7d2ab0dfb74c",
        "parentId" : "a2f6220f-7837-4acc-877f-374d9fed857b",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Two reasons, maybe neither of them good. We used to set it this way, and it messes up the tests to let the producer set them. I can take another look at the restore to see if I missed something from the revert.",
        "createdAt" : "2019-09-20T07:58:21Z",
        "updatedAt" : "2019-09-26T23:27:16Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "f369f5a3-c4a4-4278-a653-5bc06a239bd0",
        "parentId" : "a2f6220f-7837-4acc-877f-374d9fed857b",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "What I am wondering is, why we removed it though via https://github.com/apache/kafka/commit/a193f370c0cd43d056dd913e97e457e636dbf76d#diff-6f5b9383b8acde07a74d681de2da66d2R256 (ie, we don't set the timestamp in `2.2`, `2.3`, `trunk` either).",
        "createdAt" : "2019-09-20T18:27:15Z",
        "updatedAt" : "2019-09-26T23:27:16Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "a86a2443-79af-4abf-a533-1a143816af42",
        "parentId" : "a2f6220f-7837-4acc-877f-374d9fed857b",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Actually, we do use it on restore, unless I've overlooked something.\r\n\r\nIIRC, in the fixed versions (`2.2.1+`), we are serializing the entire record context, including the timestamp, in the value. There's no need to go the extra mile and also set the timestamp on the changelog record's timestamp field as well, so I just left it null and let the producer set it. I.e., the fix \"moves\" it into the value, not \"copies\" it.\r\n\r\nHere, though, we do need to preserve the timestamp so we can at least restore that much information.",
        "createdAt" : "2019-09-20T19:11:40Z",
        "updatedAt" : "2019-09-26T23:27:16Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "31ab4ecc-9618-405b-b159-db0132a2c4d8",
        "parentId" : "a2f6220f-7837-4acc-877f-374d9fed857b",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "So it's an additional fix for 2.1?",
        "createdAt" : "2019-09-24T03:47:40Z",
        "updatedAt" : "2019-09-26T23:27:16Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "5941d56d-12e8-4205-ad10-52c25610c7c8",
        "parentId" : "a2f6220f-7837-4acc-877f-374d9fed857b",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "No, I think this PR is all we need, unless I've missed something. We store it in the timestamp field and then extract it again on restore. We'll never be able to store it in the value in 2.1 the way we do in 2.2.1+, so this should be the \"final result\" :)",
        "createdAt" : "2019-09-24T14:36:55Z",
        "updatedAt" : "2019-09-26T23:27:16Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "c590d88e863d61b969ea3bcc05e7ce52b1e2db10",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +271,275 @@            null,\n            partition,\n            value.recordContext().timestamp(),\n            KEY_SERIALIZER,\n            VALUE_SERIALIZER"
  }
]