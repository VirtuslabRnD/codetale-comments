[
  {
    "id" : "e1a20c0f-abb4-4130-b379-c5837e5a8b27",
    "prId" : 7030,
    "prUrl" : "https://github.com/apache/kafka/pull/7030#pullrequestreview-257624022",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2337b80-f9c6-47e0-94f8-3e2cdbb4ded2",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This has changed from an abstract class to a static utility class.",
        "createdAt" : "2019-07-03T17:19:38Z",
        "updatedAt" : "2019-07-09T23:16:30Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b33b85c4fa71ed08802599697404720a66d88ef",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +39,43 @@import static org.apache.kafka.streams.state.internals.WrappedStateStore.isTimestamped;\n\nfinal class StateManagerUtil {\n    static final String CHECKPOINT_FILE_NAME = \".checkpoint\";\n"
  },
  {
    "id" : "b4bea26b-6b46-4e13-8d95-1ca39b346479",
    "prId" : 7030,
    "prUrl" : "https://github.com/apache/kafka/pull/7030#pullrequestreview-263363652",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "023fd817-0abe-45cb-bbfc-2200ef959612",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Do we need this constructor explicitly? Would this just be default in java?",
        "createdAt" : "2019-07-17T23:17:56Z",
        "updatedAt" : "2019-07-17T23:40:55Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b33b85c4fa71ed08802599697404720a66d88ef",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +42,46 @@    static final String CHECKPOINT_FILE_NAME = \".checkpoint\";\n\n    private StateManagerUtil() {}\n\n    static RecordConverter converterForStore(final StateStore store) {"
  },
  {
    "id" : "1ea7f3ab-3dc5-482d-81fc-176d68011871",
    "prId" : 8187,
    "prUrl" : "https://github.com/apache/kafka/pull/8187#pullrequestreview-366053030",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f843e54-dbba-4ae2-9d5d-0b3b00813d17",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Add a logging to log the IO exception.",
        "createdAt" : "2020-02-27T22:43:48Z",
        "updatedAt" : "2020-02-28T04:50:31Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "abbb2e38df0ff7c250e3b77588c7cc62b22bb4de",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +85,89 @@        } catch (final IOException fatalException) {\n            // since it is only called under dirty close, we always swallow the exception\n            log.warn(\"Failed to wiping state stores for task {} due to {}\", stateMgr.taskId(), fatalException);\n        }\n    }"
  },
  {
    "id" : "a2e4718a-1dd7-48b2-b9c6-75d38eebb394",
    "prId" : 8248,
    "prUrl" : "https://github.com/apache/kafka/pull/8248#pullrequestreview-404494706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "638d2c6d-afea-4d73-9eb2-dd1d98397780",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "It seems like the intent here is to skip initializing the store again if it's already been initialized, but still register it to the changelog reader. Which is ok, since we `unregisterAllStoresWithChangelogReader` in the recycleState, right?",
        "createdAt" : "2020-05-01T22:12:27Z",
        "updatedAt" : "2020-05-28T23:49:30Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "60a7520a-8eb4-4e7f-97c1-001156013d35",
        "parentId" : "638d2c6d-afea-4d73-9eb2-dd1d98397780",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "That's the idea",
        "createdAt" : "2020-05-02T02:27:41Z",
        "updatedAt" : "2020-05-28T23:49:30Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "9161fb2b-54c0-4c77-b8fa-3628104c28e8",
        "parentId" : "638d2c6d-afea-4d73-9eb2-dd1d98397780",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "We need to unregister and register the changelogs during task type conversion, as standby changelogs are handled differently  than active ones during registration (to disable standby processing during restoration)",
        "createdAt" : "2020-05-02T02:29:24Z",
        "updatedAt" : "2020-05-28T23:49:30Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "ee0f88a5-098a-4435-97b1-9907b7fc1b60",
        "parentId" : "638d2c6d-afea-4d73-9eb2-dd1d98397780",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Ah. Makes sense.",
        "createdAt" : "2020-05-02T03:02:43Z",
        "updatedAt" : "2020-05-28T23:49:30Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "30ac7b3ccd47063497c17ac148d90f9b29683e82",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +74,78 @@        final boolean storeDirsEmpty = stateDirectory.directoryForTaskIsEmpty(id);\n\n        stateMgr.registerStateStores(topology.stateStores(), processorContext);\n        log.debug(\"Registered state stores\");\n"
  },
  {
    "id" : "11e9d0ce-8aad-4e0d-a7b6-26b5bb6c3248",
    "prId" : 8478,
    "prUrl" : "https://github.com/apache/kafka/pull/8478#pullrequestreview-393338423",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9bc164d6-18cf-49aa-a82e-998e0760f1c8",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Not clear to me why we need a nested try-catch IOException here?",
        "createdAt" : "2020-04-14T17:35:10Z",
        "updatedAt" : "2020-04-15T18:28:32Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "74818d13-ebe2-42ed-905c-5068ab3b5e07",
        "parentId" : "9bc164d6-18cf-49aa-a82e-998e0760f1c8",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "The only reason would be to distinguish between an `IOException` on `lock`, and one on `unlock`. But I guess that's not actually useful to differentiate, I'll take it out",
        "createdAt" : "2020-04-14T22:13:59Z",
        "updatedAt" : "2020-04-15T18:28:32Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "b816ff8c-a9c7-4452-9483-26473c443745",
        "parentId" : "9bc164d6-18cf-49aa-a82e-998e0760f1c8",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "(or during wiping of the state stores, but presumably all this can be discovered through the state trace anyway)",
        "createdAt" : "2020-04-14T22:25:59Z",
        "updatedAt" : "2020-04-15T18:28:32Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ad8282dd07d2d4b91647f7f94fe235536139227",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +123,127 @@                }\n            }\n        } catch (final IOException e) {\n            final ProcessorStateException exception = new ProcessorStateException(\n                String.format(\"%sFatal error while trying to close the state manager for task %s\", logPrefix, id), e"
  },
  {
    "id" : "5a74647c-9ff7-4b01-8748-102f54dc451a",
    "prId" : 8478,
    "prUrl" : "https://github.com/apache/kafka/pull/8478#pullrequestreview-393997914",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a969e32e-80ed-43c0-a5ce-bd97c0a1dd61",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Nice clean, now we catch the exception in the caller.",
        "createdAt" : "2020-04-15T17:45:45Z",
        "updatedAt" : "2020-04-15T18:28:32Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ad8282dd07d2d4b91647f7f94fe235536139227",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +133,137 @@        final ProcessorStateException exception = firstException.get();\n        if (exception != null) {\n            throw exception;\n        }\n    }"
  }
]