[
  {
    "id" : "929c634f-bcc8-4f18-923a-fc30eade8968",
    "prId" : 4826,
    "prUrl" : "https://github.com/apache/kafka/pull/4826#pullrequestreview-109814681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4c581c0-1e9a-4f7d-b8e4-fd1bf6471d77",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This comment is not for this line but for line 361 above (it is not introduced in this PR but we can tighten the screws a bit more along side):\r\n\r\nwe should switch the line `transactionInFlight = true;` to go after `producer.beginTransaction();`\r\n",
        "createdAt" : "2018-04-05T17:56:28Z",
        "updatedAt" : "2018-04-05T22:09:17Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fcd3e0ec75d3e5133c97a33246e248268acebdb6",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +483,487 @@                if (!clean) {\n                    try {\n                        if (!isZombie && transactionInFlight) {\n                            producer.abortTransaction();\n                        }"
  },
  {
    "id" : "213d344a-0b57-463b-bbac-dedbd26bb49d",
    "prId" : 5398,
    "prUrl" : "https://github.com/apache/kafka/pull/5398#pullrequestreview-145330266",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a0a615c-9fea-40f4-9fb1-b5f41f647ea5",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Can you open PRs for older branches to back-port this fix?",
        "createdAt" : "2018-07-20T17:34:44Z",
        "updatedAt" : "2018-08-02T22:06:29Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "e2bacee0-cf66-4473-8b62-85ac2501d8a2",
        "parentId" : "0a0a615c-9fea-40f4-9fb1-b5f41f647ea5",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "yup.",
        "createdAt" : "2018-07-20T18:24:20Z",
        "updatedAt" : "2018-08-02T22:06:29Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "91920164-d9f4-469e-a6c1-58f6502e8f77",
        "parentId" : "0a0a615c-9fea-40f4-9fb1-b5f41f647ea5",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "ah geez; good catch.",
        "createdAt" : "2018-07-31T21:50:26Z",
        "updatedAt" : "2018-08-02T22:06:29Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "348b918c-3cb8-47f2-855a-41fb7df75117",
        "parentId" : "0a0a615c-9fea-40f4-9fb1-b5f41f647ea5",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "FWIW, it wouldn't break anything. This is only the name of the sensor, which just needs to be unique, and it's just as unique in this order, unless some other task is named \"commit\" (which wouldn't happen).",
        "createdAt" : "2018-08-02T18:18:29Z",
        "updatedAt" : "2018-08-02T22:06:29Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "6a7b6ba5-3442-4705-a36a-cfa625e8d634",
        "parentId" : "0a0a615c-9fea-40f4-9fb1-b5f41f647ea5",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "To be clear, we should fix it, just not sure if we need to bother backporting.",
        "createdAt" : "2018-08-02T18:19:16Z",
        "updatedAt" : "2018-08-02T22:06:29Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "06b118a7-ad80-4c5f-9f3e-143fe0547e94",
        "parentId" : "0a0a615c-9fea-40f4-9fb1-b5f41f647ea5",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Cannot follow the argument? It seems to be an easy fix and we should back port all fixes by default and only not back port if there is a good reason for not doing it.\r\n\r\n@guozhangwang Is there already a PR or ticket so this is not dropped on the floor?",
        "createdAt" : "2018-08-02T21:26:33Z",
        "updatedAt" : "2018-08-02T22:06:29Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "4b7e79ea-b67d-4881-82b4-9095a2c5a49a",
        "parentId" : "0a0a615c-9fea-40f4-9fb1-b5f41f647ea5",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "@vvcephei I think it did break sth.. the sensorName is used as part of `fullSensorName = key + \".\" + sensorName;`. With `sensorName == taskName`, we will not add them since `Sensor s = getSensor(name);` already exists, i.e. we will lose some metrics, right?",
        "createdAt" : "2018-08-02T21:28:10Z",
        "updatedAt" : "2018-08-02T22:06:29Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "fd2361c9-8286-4f6f-b776-f5728e85d7eb",
        "parentId" : "0a0a615c-9fea-40f4-9fb1-b5f41f647ea5",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "@mjsax fair enough!\r\n\r\n@guozhangwang I think you're right. The full sensor name is still unique, but it would mess up the ability to unload sensors (we basically wouldn't be able to unload any task level sensors). My bad.",
        "createdAt" : "2018-08-03T22:31:31Z",
        "updatedAt" : "2018-08-03T22:31:31Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "625a59ba-9308-4ff2-95f7-7679114c92eb",
        "parentId" : "0a0a615c-9fea-40f4-9fb1-b5f41f647ea5",
        "authorId" : "0c73d886-f3da-4107-8045-92d8e3c8fb75",
        "body" : "Maybe create (internal) SensorName type (alias for String) so that there is no chance of mixup in the future.",
        "createdAt" : "2018-08-10T17:25:08Z",
        "updatedAt" : "2018-08-10T17:25:09Z",
        "lastEditedBy" : "0c73d886-f3da-4107-8045-92d8e3c8fb75",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c57cec79fa53032b55dd7a5f374c9ee62c25098",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +113,117 @@            // add the operation metrics with additional tags\n            final Map<String, String> tagMap = metrics.tagMap(\"task-id\", taskName);\n            taskCommitTimeSensor = metrics.taskLevelSensor(taskName, \"commit\", Sensor.RecordingLevel.DEBUG, parent);\n            taskCommitTimeSensor.add(\n                new MetricName(\"commit-latency-avg\", group, \"The average latency of commit operation.\", tagMap),"
  },
  {
    "id" : "f7fee4d1-0d0d-4a9a-bc3b-e714f6ccede1",
    "prId" : 5428,
    "prUrl" : "https://github.com/apache/kafka/pull/5428#pullrequestreview-148681869",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b1a991cc-5f3a-4cbc-913c-be5b9b5e5e13",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "In trunk, the ordering of calls for the `producer` during a commit was broken up, but now they are all grouped together.  It seems ok to do this and is cleaner to follow, I just wanted to double check the change of ordering doesn't matter. \r\n\r\nMaybe we should run system tests to confirm?",
        "createdAt" : "2018-08-07T18:54:08Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "58bc5045-4e53-4bfb-96ed-4d30088603aa",
        "parentId" : "b1a991cc-5f3a-4cbc-913c-be5b9b5e5e13",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Good point, I will run the system test accordingly.",
        "createdAt" : "2018-08-08T20:37:54Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "0c8bf06a-41c9-4ee5-97bb-0c9c13c485f0",
        "parentId" : "b1a991cc-5f3a-4cbc-913c-be5b9b5e5e13",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "It was broken apart because we checked if there is anything to commit in the first place (ie, do the check on one place)-- if we did not process any data, we don't need to commit.\r\n\r\nThis check now happens outside of `StreamTask` as pointed out by Guozhang https://github.com/apache/kafka/pull/5428/files#r212395430 Thus, regrouping makes sense. Code is cleaner this way.",
        "createdAt" : "2018-08-22T22:13:22Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "71b2b16d0b0f37a05af3df60ae9b5ff88649a7a4",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +455,459 @@\n        try {\n            if (eosEnabled) {\n                producer.sendOffsetsToTransaction(consumedOffsetsAndMetadata, applicationId);\n                producer.commitTransaction();"
  },
  {
    "id" : "3a78173f-9786-438b-853e-0bf000e71d92",
    "prId" : 5428,
    "prUrl" : "https://github.com/apache/kafka/pull/5428#pullrequestreview-149953014",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6085021a-6973-4ed8-99f0-f8743e5c4b03",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "is this just because punctuations might result in context.forwards?",
        "createdAt" : "2018-08-10T16:09:53Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "f10a947a-6cef-48e9-a5ee-4df87f5def99",
        "parentId" : "6085021a-6973-4ed8-99f0-f8743e5c4b03",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Actually it is because users can call `context.commit()` in either ` punctuate()` or `process()` calls.",
        "createdAt" : "2018-08-10T23:24:16Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "adebb24d-126e-4227-911a-8b920ba318af",
        "parentId" : "6085021a-6973-4ed8-99f0-f8743e5c4b03",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Hmmm... if there is nothing to commit, it might also be fine to ignore the user commit request? It's a tricky question what to do for this case. Just follow what the user demands, or be smart? From a correctness point of view, it should not make a difference, would it?\r\n\r\nAlso, we set flag `commitRequested` for this case -- thus, it might be better to put this logic somewhere else? Eg: `AbstractTask` or overwrite in `StreamTask`:\r\n```\r\npublic boolean commitNeeded() {\r\n    return commitNeeded || commitRequested;\r\n}\r\n```\r\n\r\n (An alternative, that I like less would be to add a check if `commitRequested==true`)?",
        "createdAt" : "2018-08-22T22:21:57Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "68279723-cbca-49e6-a0d6-eaf9650bd113",
        "parentId" : "6085021a-6973-4ed8-99f0-f8743e5c4b03",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Not sure I follow your comment here.. let me elaborate a bit on my logic:\r\n\r\nWe have two commits in places: commitAll (periodic) and maybeCommit (for user requested):\r\n\r\nThe latter checks\r\n\r\n```\r\nif (task.commitRequested() && task.commitNeeded()) \r\n                    task.commit();\r\n```\r\n\r\nWhile the former only checks:\r\n\r\n```\r\nif (task.commitNeeded()) \r\n                    task.commit();\r\n```\r\n\r\nI.e. the logic for the latter is that \"only if user have requested, and it is indeed needed to commit\": for example, if we have actually committed from the commit interval, and then user requested it as well, the second will be omitted.\r\n\r\nI intentionally separated \"commitRequest\" (this is only set by user) and \"commitNeeded\" (this is determined by the library) because this way looks cleaner to me.",
        "createdAt" : "2018-08-23T17:47:42Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "7bac8d5e-b9fc-400f-9680-518fe4a244ec",
        "parentId" : "6085021a-6973-4ed8-99f0-f8743e5c4b03",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "So setting `commitNeeded` is a conservative approach, because we don't know what the user did within punctuation call? Might be better to set `commitNeeded` if user calls `context.forward` or `state.put()` -- not sure how hard this would be -- would also be out-of-scope for this PR. If we think it might be worth it, we should create a JIRA for this optimization.",
        "createdAt" : "2018-08-23T18:03:45Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "7ad87686-7aed-4d3f-bc87-570cd0e3b0b3",
        "parentId" : "6085021a-6973-4ed8-99f0-f8743e5c4b03",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Thought on my last comment?",
        "createdAt" : "2018-08-25T00:14:15Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "026e5009-286a-4e49-94a4-3116e7a813b1",
        "parentId" : "6085021a-6973-4ed8-99f0-f8743e5c4b03",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "We still need to commit even if no records are processed: consider a topology which only contains a single source node, then no data processed at all, but we still want to commit so that we would not re-process them right?",
        "createdAt" : "2018-08-27T22:59:59Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "12d3cecb-4c2c-49a3-989f-d5f29b765aa7",
        "parentId" : "6085021a-6973-4ed8-99f0-f8743e5c4b03",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Fair enough. Thanks for pointing it out.",
        "createdAt" : "2018-08-28T03:11:36Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "71b2b16d0b0f37a05af3df60ae9b5ff88649a7a4",
    "line" : 239,
    "diffHunk" : "@@ -1,1 +794,798 @@\n            if (punctuated) {\n                commitNeeded = true;\n            }\n"
  },
  {
    "id" : "f197a9dd-1706-4641-bede-d92e8d377cb2",
    "prId" : 5428,
    "prUrl" : "https://github.com/apache/kafka/pull/5428#pullrequestreview-149019658",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "603e1f0c-423b-4c03-9709-a2ff6b308346",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why do we not check `if(commitNeeded)` any longer?",
        "createdAt" : "2018-08-22T22:09:07Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "73f6657b-a2b8-4158-a3e5-43cbf0addbb5",
        "parentId" : "603e1f0c-423b-4c03-9709-a2ff6b308346",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "We check this in the AssignedTasks now: if no commit is needed, we skip the whole committing function, including commit offsets, flushing stores, etc.",
        "createdAt" : "2018-08-23T17:37:20Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "71b2b16d0b0f37a05af3df60ae9b5ff88649a7a4",
    "line" : 138,
    "diffHunk" : "@@ -1,1 +446,450 @@        }\n\n        final Map<TopicPartition, OffsetAndMetadata> consumedOffsetsAndMetadata = new HashMap<>(consumedOffsets.size());\n        for (final Map.Entry<TopicPartition, Long> entry : consumedOffsets.entrySet()) {\n            final TopicPartition partition = entry.getKey();"
  },
  {
    "id" : "795f0b14-a972-492a-836c-cd31921723a4",
    "prId" : 5428,
    "prUrl" : "https://github.com/apache/kafka/pull/5428#pullrequestreview-153876402",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c3fb631-27f5-4af1-bd37-117ca6c0a451",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: should it be `>` instead of `>=` ?",
        "createdAt" : "2018-09-06T18:38:24Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "44d1fd3f-d6c8-404a-a560-a6f32c9fb36c",
        "parentId" : "5c3fb631-27f5-4af1-bd37-117ca6c0a451",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "There was an early comment on the test code that suggests `>=`. Personally I think it does not make a big difference at all.",
        "createdAt" : "2018-09-07T17:32:21Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "721169e2-bf17-443c-86cb-1eaaa9890cd6",
        "parentId" : "5c3fb631-27f5-4af1-bd37-117ca6c0a451",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I am to blame for this suggestion. I agree it doesn't make a big difference.\r\nThe reasoning was that if it's the \"maximum idle time\", then you shouldn't idle longer than it, otherwise, it's not really a maximum.",
        "createdAt" : "2018-09-07T19:38:19Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "c5c3bdaf-3f6a-4983-94d0-9a65a92a21d7",
        "parentId" : "5c3fb631-27f5-4af1-bd37-117ca6c0a451",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I agree that it does not matter too much :) (that why it's a nit)\r\n\r\nHowever, I think that the maximum is inclusive, and only if we exceed it, we should force processing. From my understanding, \"maximum idle time\" is actually a lower bound (-> don't force processing until this time passed) because we cannot guarantee anyway to not exceed this threshold. I see your point why the name might be counter intuitive (even if I think the name is correct). If you interpret the name strictly, we would be allowed (or actually we would be required) to force processing before the time passed. This interpretation would make the parameter useless (ie, user tells us to idle max 5 minutes and we obey by forcing processing after 1 minute).\r\n\r\nTo me, the right interpretation is, \"wait until this time passed and force processing asap if the time is exceeded\". Chaning the name to `min.idle.time.ms` would be more precise, but I think it would be more confusing to users. ",
        "createdAt" : "2018-09-08T21:50:01Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "6004d97c-77aa-419e-afe1-9076c0787dfd",
        "parentId" : "5c3fb631-27f5-4af1-bd37-117ca6c0a451",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Okay guys, I'm going to make a final call here to end the discussion: I'm staying with `max.idle..` since I feel it is easier to understand for users, and be aware that this is not strictly respected in practice unless it is set to `0`. Also I'm staying with `>=` since again, it is easier to understand though not strictly sound mathematically.",
        "createdAt" : "2018-09-10T17:09:01Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "59407b08-636d-476d-a615-3e54b7a3064a",
        "parentId" : "5c3fb631-27f5-4af1-bd37-117ca6c0a451",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : ":) Fair enough.",
        "createdAt" : "2018-09-10T17:17:35Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "71b2b16d0b0f37a05af3df60ae9b5ff88649a7a4",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +313,317 @@            }\n\n            if (now - idleStartTime >= maxTaskIdleMs) {\n                taskMetrics.taskEnforcedProcessSensor.record();\n                return true;"
  },
  {
    "id" : "e8d7ebaa-9c5f-4605-9012-57321f53dca2",
    "prId" : 6115,
    "prUrl" : "https://github.com/apache/kafka/pull/6115#pullrequestreview-194301968",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8f4260f-0f04-4e95-a167-a37cddb688b6",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I seems, we should remove writing the checkpoint file in `closeStateManager`, too? Note, that `suspend()` will be called anyway (during rebalance, and during shutdown)\r\n\r\nAlso, why do we write the checkpoint if EOS is enabled only? To me, it seems we can write the checkpoint file if EOS is disabled, too?\r\n\r\n\\cc @guozhangwang ",
        "createdAt" : "2019-01-14T17:50:16Z",
        "updatedAt" : "2019-02-23T05:48:22Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "bedc648a-5e0a-4ec3-ad4e-ab90ea5fba00",
        "parentId" : "e8f4260f-0f04-4e95-a167-a37cddb688b6",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "@mjsax  Because in the #commit() function we shall write checkpoint file if EOS is not turned on. So we are avoiding writing checkpoint file twice in consecutive.",
        "createdAt" : "2019-01-14T18:57:21Z",
        "updatedAt" : "2019-02-23T05:48:22Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "ec262be5-55ca-4cff-878b-f7ea6f03fe12",
        "parentId" : "e8f4260f-0f04-4e95-a167-a37cddb688b6",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Ack. Might be worth to add this to the comment.",
        "createdAt" : "2019-01-16T17:56:12Z",
        "updatedAt" : "2019-02-23T05:48:22Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "eac86d98-83a4-44c3-bc79-ef1afe0b24e5",
        "parentId" : "e8f4260f-0f04-4e95-a167-a37cddb688b6",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Sure, will do!",
        "createdAt" : "2019-01-18T01:57:56Z",
        "updatedAt" : "2019-02-23T05:48:22Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "692b0906-5f4b-4f73-a23a-62eb31f5135b",
        "parentId" : "e8f4260f-0f04-4e95-a167-a37cddb688b6",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "What about:\r\n\r\n> I seems, we should remove writing the checkpoint file in closeStateManager, too? Note, that suspend() will be called anyway (during rebalance, and during shutdown)",
        "createdAt" : "2019-01-18T18:55:31Z",
        "updatedAt" : "2019-02-23T05:48:22Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "442b3e70-1fd7-492e-bf65-822ff6aac5f7",
        "parentId" : "e8f4260f-0f04-4e95-a167-a37cddb688b6",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "I see, will address this!",
        "createdAt" : "2019-01-18T22:08:10Z",
        "updatedAt" : "2019-02-23T05:48:22Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "aefb0007849d918b9d0eec09c5f4ffcf92ad3aeb",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +580,584 @@                if (eosEnabled) {\n\n                    stateMgr.checkpoint(activeTaskCheckpointableOffsets());\n\n                    try {"
  }
]