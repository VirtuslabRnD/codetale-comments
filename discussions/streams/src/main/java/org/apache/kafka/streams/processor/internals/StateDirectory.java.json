[
  {
    "id" : "0dd7e1f8-f0ad-4986-a4a6-20f2baae5da6",
    "prId" : 8246,
    "prUrl" : "https://github.com/apache/kafka/pull/8246#pullrequestreview-375603317",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12f1b9bb-ea18-4837-a378-f840608e61ec",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "One last thing: Could you open another PR to add unit tests that check that the array is empty for the two edge cases?  ",
        "createdAt" : "2020-03-15T17:46:04Z",
        "updatedAt" : "2020-03-15T17:46:04Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "09497014-1eb6-4d50-ac37-5de06a2a7f16",
        "parentId" : "12f1b9bb-ea18-4837-a378-f840608e61ec",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Ack, added the tests to the Pt 2.5 PR",
        "createdAt" : "2020-03-16T18:58:38Z",
        "updatedAt" : "2020-03-16T18:58:38Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "7268f119-1e24-49b1-bf71-5b1a6e486319",
        "parentId" : "12f1b9bb-ea18-4837-a378-f840608e61ec",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Actually, ended up doing some additional cleanup on the side so I split it out into a  small PR; please give this a quick review.\r\nhttps://github.com/apache/kafka/pull/8304",
        "createdAt" : "2020-03-16T21:44:51Z",
        "updatedAt" : "2020-03-16T21:44:51Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "a757918bbbf7c4b27aa29720e540a5603f890b1e",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +349,353 @@     * @return The list of all the existing local directories for stream tasks\n     */\n    File[] listTaskDirectories() {\n        final File[] taskDirectories =\n            stateDir.listFiles(pathname -> pathname.isDirectory() && PATH_NAME.matcher(pathname.getName()).matches());"
  },
  {
    "id" : "2d24e2f9-5948-4cd3-887c-10e285ca9ca0",
    "prId" : 8267,
    "prUrl" : "https://github.com/apache/kafka/pull/8267#pullrequestreview-372383538",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f34ca5bf-4256-4ed1-b3a0-02e55142cfa8",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is a minor code clean up.",
        "createdAt" : "2020-03-10T23:15:05Z",
        "updatedAt" : "2020-03-14T20:47:01Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e76956090f1b8010efb5b1be9dc7a24a7b9884a6",
    "line" : 199,
    "diffHunk" : "@@ -1,1 +333,337 @@                        }\n                    }\n                } catch (final OverlappingFileLockException | IOException e) {\n                    exception = e;\n                } finally {"
  },
  {
    "id" : "2eb7eccb-584f-438c-aeda-1bc23af0030d",
    "prId" : 8267,
    "prUrl" : "https://github.com/apache/kafka/pull/8267#pullrequestreview-374518933",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ae003a2-bfc8-40f2-be35-dbf9e85e3d3f",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This comment makes me wonder why we even bother with locking at all for manual calls. If we know thereâ€™s no app running, why not just delete the whole state directory and not bother with locks? ",
        "createdAt" : "2020-03-13T04:16:48Z",
        "updatedAt" : "2020-03-14T20:47:01Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "163b80b6-1087-4260-8595-ea0056b9a06c",
        "parentId" : "9ae003a2-bfc8-40f2-be35-dbf9e85e3d3f",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I thought about that too, and tried it out, it's just that based on manualUserCall to decide whether `lock / unlock` the block, we ended up with either much more code duplicates or clumsy and finer-grained `if else` condition, neither of which I like. On the other hand, since `streams.cleanUp` is usually a one-time thing compared with the periodic internal clean I think having two delete calls are okay to same some code duplication here.",
        "createdAt" : "2020-03-13T16:44:30Z",
        "updatedAt" : "2020-03-14T20:47:01Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "e3b72747-7406-40e5-a505-8222d89c6a53",
        "parentId" : "9ae003a2-bfc8-40f2-be35-dbf9e85e3d3f",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Ok!",
        "createdAt" : "2020-03-13T18:20:30Z",
        "updatedAt" : "2020-03-14T20:47:01Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "e76956090f1b8010efb5b1be9dc7a24a7b9884a6",
    "line" : 207,
    "diffHunk" : "@@ -1,1 +339,343 @@                        unlock(id);\n\n                        // for manual user call, stream threads are not running so it is safe to delete\n                        // the whole directory\n                        if (manualUserCall) {"
  },
  {
    "id" : "f48f7113-c6e4-474a-b59c-30bf1ea29414",
    "prId" : 9262,
    "prUrl" : "https://github.com/apache/kafka/pull/9262#pullrequestreview-492369657",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a96eb42-2d4f-4581-ab46-d788ac20cba9",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I this save? I _think_ if `listAllTaskDirectories()` returns `null` we would get an NPE?",
        "createdAt" : "2020-09-18T17:50:04Z",
        "updatedAt" : "2020-09-21T09:40:33Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "4811a78f-9c5b-42ad-9b5a-ae454f161447",
        "parentId" : "4a96eb42-2d4f-4581-ab46-d788ac20cba9",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "We recently \"fixed\" `listAllTaskDirectories` to guarantee that it never returns null. We just missed to update all the null checks when we did that",
        "createdAt" : "2020-09-18T18:00:11Z",
        "updatedAt" : "2020-09-21T09:40:33Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "fc4a8802-6c34-4eae-89aa-0bf61c1ca0eb",
        "parentId" : "4a96eb42-2d4f-4581-ab46-d788ac20cba9",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "I saw the behavior @ableegoldman mentions and then I changed the code. So it is safe.",
        "createdAt" : "2020-09-21T08:20:36Z",
        "updatedAt" : "2020-09-21T09:40:33Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "02c8ad59c372bcd072f8d2ba2f2d4992a23db0f6",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +316,320 @@\n    private void cleanRemovedTasksCalledByCleanerThread(final long cleanupDelayMs) {\n        for (final File taskDir : listAllTaskDirectories()) {\n            final String dirName = taskDir.getName();\n            final TaskId id = TaskId.parse(dirName);"
  },
  {
    "id" : "276608c8-30ba-4afc-b80d-5ed27889ec42",
    "prId" : 9262,
    "prUrl" : "https://github.com/apache/kafka/pull/9262#pullrequestreview-491667185",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "908c4cf5-752d-490d-af9d-318bbcc7f2b8",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "As above.",
        "createdAt" : "2020-09-18T17:51:26Z",
        "updatedAt" : "2020-09-21T09:40:33Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "02c8ad59c372bcd072f8d2ba2f2d4992a23db0f6",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +352,356 @@\n    private void cleanRemovedTasksCalledByUser() throws Exception {\n        for (final File taskDir : listAllTaskDirectories()) {\n            final String dirName = taskDir.getName();\n            final TaskId id = TaskId.parse(dirName);"
  },
  {
    "id" : "be1c0ad4-0044-4a56-9da8-15da3357e7e9",
    "prId" : 9262,
    "prUrl" : "https://github.com/apache/kafka/pull/9262#pullrequestreview-491667185",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "569d3d14-7814-42c9-bbac-e72daeafdee5",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Should we log a message that we could not get the lock? -- For a manual user call, this might be good to know?",
        "createdAt" : "2020-09-18T17:52:54Z",
        "updatedAt" : "2020-09-21T09:40:33Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "02c8ad59c372bcd072f8d2ba2f2d4992a23db0f6",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +364,368 @@                        log.warn(\"{} Could not get lock for state directory {} for task {} as user calling cleanup.\",\n                            logPrefix(), dirName, id);\n                    }\n                } catch (final OverlappingFileLockException | IOException exception) {\n                    log.error("
  },
  {
    "id" : "c9a82187-e966-47eb-ba96-d525f91e1922",
    "prId" : 9262,
    "prUrl" : "https://github.com/apache/kafka/pull/9262#pullrequestreview-492389700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a07ebfd0-0607-4987-b7ea-ddd4648aced3",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Might be better to use an `Exception` variable `firstException` and rethrow at the end if not `null` -- IIRC, behavior is undefined if we throw a second exception (ie, `finally` would executed after the first (outer) `catch` block.",
        "createdAt" : "2020-09-18T17:55:35Z",
        "updatedAt" : "2020-09-21T09:40:33Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "368be51e-be49-4880-b669-17cf0f5d71bd",
        "parentId" : "a07ebfd0-0607-4987-b7ea-ddd4648aced3",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "According to the Java Language Specification, it is not undefined. See https://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.20.2. There it says:\r\n\r\n> If the catch block completes abruptly for reason R, then the finally block is executed. Then there is a choice:\r\n> \r\n>    - If the finally block completes normally, then the try statement completes abruptly for reason R.\r\n> \r\n>    - If the finally block completes abruptly for reason S, then the try statement completes abruptly for reason S (and reason R is discarded).\r\n> \r\n\r\nThat means, the last thrown exception is propagated. That was also the behavior of the refactored code. Since the goal of this PR is actually just to fix the log message without changing the behavior, I would leave this change to a future PR if we feel that the behavior should change.",
        "createdAt" : "2020-09-21T08:48:04Z",
        "updatedAt" : "2020-09-21T09:40:33Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "02c8ad59c372bcd072f8d2ba2f2d4992a23db0f6",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +384,388 @@                            exception\n                        );\n                        throw exception;\n                    }\n                }"
  },
  {
    "id" : "7b4c6dba-90bf-4ede-8bc1-3e233ec76845",
    "prId" : 9414,
    "prUrl" : "https://github.com/apache/kafka/pull/9414#pullrequestreview-509223276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28213cff-a5ce-483c-af6d-250bbe5e8b11",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "```suggestion\r\n            if (stateDir.exists() && !stateDir.delete()) {\r\n```\r\n\r\nDo we need to check `hasPersistentStores` here? It seems sufficient just to check if the directory exists.",
        "createdAt" : "2020-10-13T15:40:29Z",
        "updatedAt" : "2021-04-20T05:47:19Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "343f0798-2665-4bfc-9463-5a9de865b594",
        "parentId" : "28213cff-a5ce-483c-af6d-250bbe5e8b11",
        "authorId" : "462b08c4-4553-46cf-b1cf-8fd3349738fb",
        "body" : "Exactly. But I thought keeping symmetry with the Consturctor is better.\r\n\r\n```\r\nif (this.hasPersistentStores && !stateDir.exists() && !stateDir.mkdir()) {\r\n    throw new ProcessorStateException(\r\n        String.format(\"state directory [%s] doesn't exist and couldn't be created\", stateDir.getPath()));\r\n}\r\n```",
        "createdAt" : "2020-10-15T10:11:16Z",
        "updatedAt" : "2021-04-20T05:47:19Z",
        "lastEditedBy" : "462b08c4-4553-46cf-b1cf-8fd3349738fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "f1ea64f28eae01af6db6009f2634ca6946da4586",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +407,411 @@\n        try {\n            if (hasPersistentStores && stateDir.exists() && !stateDir.delete()) {\n                log.warn(\n                    String.format(\"%s Failed to delete state store directory of %s for it is not empty\","
  },
  {
    "id" : "f03eb8b5-503c-4e81-a751-9006c0a2a5aa",
    "prId" : 9583,
    "prUrl" : "https://github.com/apache/kafka/pull/9583#pullrequestreview-530303961",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "334528d3-b34f-41fc-bec5-b3728dfae7a8",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Just wondering, why \"read\" and \"execute\" permissions for the group?",
        "createdAt" : "2020-11-12T23:53:18Z",
        "updatedAt" : "2020-11-12T23:53:18Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "660419dd-9683-4327-ae05-9db824cfd916",
        "parentId" : "334528d3-b34f-41fc-bec5-b3728dfae7a8",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "I thought it would be handy to be able to log into a node to debug state store issues, e.g., with some RocksDB command line tools, with a user that is able to read not able to write, i.e., is in the group but it is not the owner.",
        "createdAt" : "2020-11-13T08:09:20Z",
        "updatedAt" : "2020-11-13T08:09:20Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "dfe0d907-5eef-4c35-8d2f-e2e15a6811cc",
        "parentId" : "334528d3-b34f-41fc-bec5-b3728dfae7a8",
        "authorId" : "114424ac-2f76-47ba-b653-f85692b08607",
        "body" : "I agree with what Bruno said for the reading. I think allowing execute for group members isn't a security risk, since it's still somewhat contained. I ran the streams test without having execute for group and I got an exception in `StreamTableJoinTopologyOptimizationIntegrationTest` test `shouldDoStreamTableJoinWithDifferentNumberOfPartitions`. It looks like the integration test utils weren't able to clear the directory because groups didn't have execute authorization. Since it doesn't seem like allowing groups to execute would constitute a security risk, it seems like this is a good thing to keep for testing capabilities",
        "createdAt" : "2020-11-13T16:18:25Z",
        "updatedAt" : "2020-11-13T16:18:26Z",
        "lastEditedBy" : "114424ac-2f76-47ba-b653-f85692b08607",
        "tags" : [
        ]
      },
      {
        "id" : "c2835107-138d-44e5-9fd5-41db7281229c",
        "parentId" : "334528d3-b34f-41fc-bec5-b3728dfae7a8",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : ">  I ran the streams test without having execute for group and I got an exception in StreamTableJoinTopologyOptimizationIntegrationTest test\r\n\r\nI've noticed that test is actually pretty flaky at the moment, IIRC it's been due to a `Directory not empty` exception). So the failure you saw might not be related to this PR. I'm pretty sure it's write permissions, not execute, that let you delete files within a directory. Execute just lets you `cd` in and traverse the directory. So I guess read+execute does make sense here, and probably we wouldn't want anyone other than the owner to be able to clear the directory anyway",
        "createdAt" : "2020-11-13T18:02:11Z",
        "updatedAt" : "2020-11-13T18:02:11Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "b2370eee-9a3b-44cf-a1ee-e27b9f9bf10e",
        "parentId" : "334528d3-b34f-41fc-bec5-b3728dfae7a8",
        "authorId" : "114424ac-2f76-47ba-b653-f85692b08607",
        "body" : "Hmm yeah that was the exception so it probably wasn't related to this PR. I would err on the side of leaving those permissions but can take them out if you think that's better",
        "createdAt" : "2020-11-13T18:16:58Z",
        "updatedAt" : "2020-11-13T18:16:59Z",
        "lastEditedBy" : "114424ac-2f76-47ba-b653-f85692b08607",
        "tags" : [
        ]
      },
      {
        "id" : "24e3a463-975e-4478-94d9-a3c38d0d47e6",
        "parentId" : "334528d3-b34f-41fc-bec5-b3728dfae7a8",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "No I think this looks ok, just wanted to ask",
        "createdAt" : "2020-11-13T18:22:47Z",
        "updatedAt" : "2020-11-13T18:22:47Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "d0909d8a23bfc259b6b91568f444f93db9c82261",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +110,114 @@        final Path basePath = Paths.get(baseDir.getPath());\n        final Path statePath = Paths.get(stateDir.getPath());\n        final Set<PosixFilePermission> perms = PosixFilePermissions.fromString(\"rwxr-x---\");\n        try {\n            Files.setPosixFilePermissions(basePath, perms);"
  },
  {
    "id" : "7f68f2fe-92d7-4ef5-aa91-a6b44c5ee269",
    "prId" : 9947,
    "prUrl" : "https://github.com/apache/kafka/pull/9947#pullrequestreview-575728394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "18907b81-499b-476a-b57d-5fc6e709b2d2",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "If you only have `file.setWritable(true, true)` then the directory will still be writeable by non-users, I assume?  I actually don't know the details of the `File#setXXX` methods -- but we don't want it to be writeable by just anyone. Should we instead do something like\r\n\r\n```suggestion\r\n            set &= file.setWritable(false) && file.setWritable(true, true);\r\n```",
        "createdAt" : "2021-01-22T01:55:59Z",
        "updatedAt" : "2021-01-25T11:27:31Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "506ec8b3-7bbf-4dcb-9abc-0ef004ea055a",
        "parentId" : "18907b81-499b-476a-b57d-5fc6e709b2d2",
        "authorId" : "f8b75a18-ddd4-4e4a-8c77-644374643389",
        "body" : "The `File` API only allows you to set permissions for the owner or for everyone. A call to `setWritable(writable)` just delegates to `setWritable(writable, true)`. I prefer to call `setWritable(writable, ownerOnly)` directly as I think the intent is slightly clearer. Calling `setWritable(true, true)` or `setWritable(true)` makes the file writable only by the owner.",
        "createdAt" : "2021-01-22T08:29:53Z",
        "updatedAt" : "2021-01-25T11:27:31Z",
        "lastEditedBy" : "f8b75a18-ddd4-4e4a-8c77-644374643389",
        "tags" : [
        ]
      },
      {
        "id" : "031d2bc9-6d05-4c19-bbc1-c236a9680c14",
        "parentId" : "18907b81-499b-476a-b57d-5fc6e709b2d2",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Ah, I see. Thanks for the explanation",
        "createdAt" : "2021-01-25T19:17:03Z",
        "updatedAt" : "2021-01-25T19:17:04Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "5358d66b489f055285e94709c360df88cc938a9d",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +126,130 @@        } else {\n            boolean set = file.setReadable(true, true);\n            set &= file.setWritable(true, true);\n            set &= file.setExecutable(true, true);\n            if (!set) {"
  },
  {
    "id" : "fbd29810-2d48-4da5-b5d6-6417a9ce6e97",
    "prId" : 9978,
    "prUrl" : "https://github.com/apache/kafka/pull/9978#pullrequestreview-579521506",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "efb4dee1-8441-4df8-9d2d-7d9700288c09",
        "parentId" : null,
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "since it doesn't seem that we need to be very thrifty with space for this file would it make sense to write it in a more friendly format that would be easier to maintain? i.e. json or something, we are giving it a version number...",
        "createdAt" : "2021-01-28T04:47:13Z",
        "updatedAt" : "2021-02-02T00:45:25Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      },
      {
        "id" : "12ffac5c-b4ea-4d1d-9ada-5365b23d51cd",
        "parentId" : "efb4dee1-8441-4df8-9d2d-7d9700288c09",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "I'll try it out with json. If we do use json, then we don't even need the version number right? As long as we only ever add fields then it should always be compatible. At least that's my understanding, I'm not a json expert",
        "createdAt" : "2021-01-29T03:39:05Z",
        "updatedAt" : "2021-02-02T00:45:25Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "7eb08169-3b1f-4f2c-98ba-acb20d4038ad",
        "parentId" : "efb4dee1-8441-4df8-9d2d-7d9700288c09",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Oh my god. I hate json lol",
        "createdAt" : "2021-01-29T04:46:29Z",
        "updatedAt" : "2021-02-02T00:45:25Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "80eff1ff-be65-4616-8538-9b78ed91537d",
        "parentId" : "efb4dee1-8441-4df8-9d2d-7d9700288c09",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "alright done",
        "createdAt" : "2021-01-29T18:30:16Z",
        "updatedAt" : "2021-02-02T00:45:25Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "5806b1eb-d2b9-4dba-a6da-6d135ead7e5b",
        "parentId" : "efb4dee1-8441-4df8-9d2d-7d9700288c09",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "LGTM",
        "createdAt" : "2021-01-29T18:41:24Z",
        "updatedAt" : "2021-02-02T00:45:25Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d1314eb206de4d916f5f020ee88645757ec2218",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +182,186 @@    }\n\n    public UUID initializeProcessId() {\n        if (!hasPersistentStores) {\n            return UUID.randomUUID();"
  },
  {
    "id" : "d753923a-0577-4d1e-bfba-8e2896b4e66f",
    "prId" : 9978,
    "prUrl" : "https://github.com/apache/kafka/pull/9978#pullrequestreview-578705825",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cc31042-85de-407d-83d9-cf77e1541433",
        "parentId" : null,
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "Is there any case where we might want to release the lock of this state directory? It looks like we just hold it",
        "createdAt" : "2021-01-28T04:49:21Z",
        "updatedAt" : "2021-02-02T00:45:25Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      },
      {
        "id" : "8349c470-53ec-449d-8a38-ddc58ed89467",
        "parentId" : "8cc31042-85de-407d-83d9-cf77e1541433",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Nope, we just hold it until the KafkaStreams is closed",
        "createdAt" : "2021-01-28T20:17:09Z",
        "updatedAt" : "2021-02-02T00:45:25Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d1314eb206de4d916f5f020ee88645757ec2218",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +173,177 @@        try {\n            stateDirLockChannel = FileChannel.open(lockFile.toPath(), StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n            stateDirLock = tryLock(stateDirLockChannel);\n        } catch (final IOException e) {\n            log.error(\"Unable to lock the state directory due to unexpected exception\", e);"
  },
  {
    "id" : "1e189820-878d-48ea-b04e-cbcd071af3f6",
    "prId" : 10342,
    "prUrl" : "https://github.com/apache/kafka/pull/10342#pullrequestreview-615918054",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad6a1f7a-4dce-4167-b44d-c8cc7ad02739",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "I am wondering if we should throw an `IllegalStateException` here, because it seems illegal to me to request a lock of a task directory in a state directory that does not exist. ",
        "createdAt" : "2021-03-18T10:15:23Z",
        "updatedAt" : "2021-03-30T19:31:35Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "ee94fd43-cc2e-47e1-b919-f85db22c8a8e",
        "parentId" : "ad6a1f7a-4dce-4167-b44d-c8cc7ad02739",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Good point -- I put this in there because there was a test for this behavior, but actually that makes no sense. Will do",
        "createdAt" : "2021-03-18T22:15:55Z",
        "updatedAt" : "2021-03-30T19:31:35Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "de4dbd1e14ae4345c75c26c6825df6232f310dee",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +294,298 @@                return false;\n            }\n        } else if (!stateDir.exists()) {\n            log.error(\"Tried to lock task directory for {} but the state directory does not exist\", taskId);\n            throw new IllegalStateException(\"The state directory has been deleted\");"
  },
  {
    "id" : "a329500e-c911-401e-bb85-ae7054913ad0",
    "prId" : 10342,
    "prUrl" : "https://github.com/apache/kafka/pull/10342#pullrequestreview-616207540",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad8288c1-911b-428d-a983-b4f53e22ecbe",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "I guess you could make the same change on line 474 in `cleanRemovedTasksCalledByUser()`, couldn't you?",
        "createdAt" : "2021-03-18T10:20:54Z",
        "updatedAt" : "2021-03-30T19:31:35Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "63d82cf3-db2a-45cc-b92f-8b1e44e7ec2a",
        "parentId" : "ad8288c1-911b-428d-a983-b4f53e22ecbe",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "I think we need to keep that one because `Utils.delete` can throw IOException too",
        "createdAt" : "2021-03-18T22:22:09Z",
        "updatedAt" : "2021-03-30T19:31:35Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "a404c760-f0c7-4e81-951a-ba8d542e7697",
        "parentId" : "ad8288c1-911b-428d-a983-b4f53e22ecbe",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "Ah, right! My bad! ",
        "createdAt" : "2021-03-19T09:28:10Z",
        "updatedAt" : "2021-03-30T19:31:35Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "de4dbd1e14ae4345c75c26c6825df6232f310dee",
    "line" : 193,
    "diffHunk" : "@@ -1,1 +442,446 @@                    );\n                } finally {\n                    unlock(id);\n                }\n            }"
  }
]