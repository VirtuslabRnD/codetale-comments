[
  {
    "id" : "c899acd2-fcce-4a66-b694-ff4acf53d03e",
    "prId" : 4983,
    "prUrl" : "https://github.com/apache/kafka/pull/4983#pullrequestreview-120819433",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc84f046-d8ad-49cf-bdbc-5eb7f90a959a",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Probably need rebase here.",
        "createdAt" : "2018-05-11T21:50:54Z",
        "updatedAt" : "2018-06-15T03:52:33Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "31dfaea1-1b42-4f9e-b0cb-026734af1d9d",
        "parentId" : "fc84f046-d8ad-49cf-bdbc-5eb7f90a959a",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "done",
        "createdAt" : "2018-05-16T21:04:04Z",
        "updatedAt" : "2018-06-15T03:52:33Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "679568bc781f609b8fdf5b95924a8202c9e3c592",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +124,128 @@\n    private KTable<K, V> doFilter(final Predicate<? super K, ? super V> predicate,\n                                  final MaterializedInternal<K, V, KeyValueStore<Bytes, byte[]>> materializedInternal,\n                                  final boolean filterNot) {\n        final String name = builder.newProcessorName(FILTER_NAME);"
  },
  {
    "id" : "deca9e36-8fd4-459e-9c71-14675c4e0fea",
    "prId" : 4983,
    "prUrl" : "https://github.com/apache/kafka/pull/4983#pullrequestreview-120819463",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d7fc5d5a-ffb1-4bc7-8f65-ae17733e2aaf",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Ditto here.",
        "createdAt" : "2018-05-11T21:51:09Z",
        "updatedAt" : "2018-06-15T03:52:33Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "f7792357-88fe-4208-ae2a-c6aeace1374e",
        "parentId" : "d7fc5d5a-ffb1-4bc7-8f65-ae17733e2aaf",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "done",
        "createdAt" : "2018-05-16T21:04:09Z",
        "updatedAt" : "2018-06-15T03:52:33Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "679568bc781f609b8fdf5b95924a8202c9e3c592",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +196,200 @@\n    private <VR> KTable<K, VR> doMapValues(final ValueMapperWithKey<? super K, ? super V, ? extends VR> mapper,\n                                           final MaterializedInternal<K, VR, KeyValueStore<Bytes, byte[]>> materializedInternal) {\n        final String name = builder.newProcessorName(MAPVALUES_NAME);\n"
  },
  {
    "id" : "f723ea38-fbb5-434e-8c85-1aba8293fa3a",
    "prId" : 4983,
    "prUrl" : "https://github.com/apache/kafka/pull/4983#pullrequestreview-126583270",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53281981-11b8-465a-9b63-fc17a3191bb1",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why do we pass `null` ?",
        "createdAt" : "2018-05-29T23:58:11Z",
        "updatedAt" : "2018-06-15T03:52:33Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "8a05ba76-12bb-48d8-b953-18139563ecb5",
        "parentId" : "53281981-11b8-465a-9b63-fc17a3191bb1",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "These `KTable` implementations aren't used individually to construct the overall topology but are components of the join merger.",
        "createdAt" : "2018-05-31T00:17:06Z",
        "updatedAt" : "2018-06-15T03:52:33Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "f117a276-228d-49b3-8add-09296b6cd8ee",
        "parentId" : "53281981-11b8-465a-9b63-fc17a3191bb1",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Sorry, but cannot follow. Can you elaborate?",
        "createdAt" : "2018-05-31T01:41:44Z",
        "updatedAt" : "2018-06-15T03:52:33Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "5e5c4e23-ffe5-4ee4-8214-3a58c2ca7d07",
        "parentId" : "53281981-11b8-465a-9b63-fc17a3191bb1",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Sorry, re-reading my original description I realize it is a bit unclear.\r\n\r\nIn most cases the `KStream` or `KTable` instance created is returned to the caller, thus becoming a parent node in the graph and is eventually used to build the topology.  In those cases the graphNode created is passed to the newly created `KStream` or `KTable` instance as the parent graph node for the next operation.\r\n\r\nIn this case,  the two `KTable` instances in question are components in the `KTableKTableJoinMerger` class and never have any child nodes, since they are used by the join merge processor.  There is no graphNode created to pass along as the parent graph node.\r\n\r\nDoes this make sense?",
        "createdAt" : "2018-05-31T22:56:26Z",
        "updatedAt" : "2018-06-15T03:52:33Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "7c80fb6b-eca8-45b6-8dc2-3f803f50749a",
        "parentId" : "53281981-11b8-465a-9b63-fc17a3191bb1",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "At a high level yes -- still need to think about the details. Thanks.",
        "createdAt" : "2018-06-06T22:50:03Z",
        "updatedAt" : "2018-06-15T03:52:33Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "679568bc781f609b8fdf5b95924a8202c9e3c592",
    "line" : 249,
    "diffHunk" : "@@ -1,1 +474,478 @@\n        final KTableKTableJoinMerger<K, R> joinMerge = new KTableKTableJoinMerger<>(\n            new KTableImpl<K, V, R>(builder, joinThisName, joinThis, sourceNodes, this.queryableStoreName, false, null),\n            new KTableImpl<K, V1, R>(builder, joinOtherName, joinOther, ((KTableImpl<K, ?, ?>) other).sourceNodes,\n                                     ((KTableImpl<K, ?, ?>) other).queryableStoreName, false, null),"
  },
  {
    "id" : "5c3860a7-a5c3-4e38-b5c3-4c30991865be",
    "prId" : 5521,
    "prUrl" : "https://github.com/apache/kafka/pull/5521#pullrequestreview-147329631",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5cadbde-b470-45c1-86b8-453f832763bd",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is another bug that I observed: we should pass in the source nodes list, but instead we are passing the processor name. It was not exposed anywhere since currently we never use the source names of this KGroupedTable.",
        "createdAt" : "2018-08-17T17:24:56Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "ee44a33c-e17e-45cb-ac0e-b23db96cbb6c",
        "parentId" : "f5cadbde-b470-45c1-86b8-453f832763bd",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "good catch!",
        "createdAt" : "2018-08-17T19:29:08Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1278ae279c9fa20317e55ded8aeb364eab097127",
    "line" : 279,
    "diffHunk" : "@@ -1,1 +580,584 @@            builder,\n            selectName,\n            sourceNodes,\n            serializedInternal.keySerde(),\n            serializedInternal.valueSerde(),"
  },
  {
    "id" : "d5434e0f-fa7e-4db9-9579-a56cdf28e0d5",
    "prId" : 5521,
    "prUrl" : "https://github.com/apache/kafka/pull/5521#pullrequestreview-147298533",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29b08b8d-7dfa-45d8-be32-6b61a0eebe86",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "The above is some cleanup: we do not necessarily create two dummy KTableImpl object to just expose the processor-supplier / enable sending changes in the merge node. Since this is internal classes, I've modified the KTableKTableJoinMerger constructor parameter to simplify the logic.",
        "createdAt" : "2018-08-17T17:26:00Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1278ae279c9fa20317e55ded8aeb364eab097127",
    "line" : 203,
    "diffHunk" : "@@ -1,1 +512,516 @@        }\n\n        final KTableKTableJoinMerger<K, R> joinMerge = new KTableKTableJoinMerger<>(joinThis, joinOther, internalQueryableName);\n\n        final KTableKTableJoinNode.KTableKTableJoinNodeBuilder<K, Change<V>, Change<V1>, Change<R>> kTableJoinNodeBuilder = KTableKTableJoinNode.kTableKTableJoinNodeBuilder();"
  },
  {
    "id" : "6962310b-2f80-4f76-a93c-dbd3a20d57a2",
    "prId" : 5521,
    "prUrl" : "https://github.com/apache/kafka/pull/5521#pullrequestreview-147402476",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff19c8b0-e062-463f-8cd8-897c30b3490f",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "maybe add comment that we cannot forward `valueSerde` to be consistent?",
        "createdAt" : "2018-08-17T19:10:24Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "80fd85e7-e83b-48c4-9a22-4f789f9e6185",
        "parentId" : "ff19c8b0-e062-463f-8cd8-897c30b3490f",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "In this case, we can indeed forward `valSerde` from `Materialized` since the materialized object is for the transformed KTable. Again, if it is null that is also fine passing in, as the key/val Serde objects are null-able.",
        "createdAt" : "2018-08-17T22:16:11Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "34ce769f-0674-4a7b-97b4-85b3b44694ad",
        "parentId" : "ff19c8b0-e062-463f-8cd8-897c30b3490f",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "that's not what I mean -- I meant the \"else\" branch that returns `null` -- even if we get a `valueSerde` from upstream, we cannot forward it, but we can only forward if provided via `Materialized`. This is different to what we can do for the key.",
        "createdAt" : "2018-08-17T22:39:41Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "b0709de3-1ad0-44fb-8161-8dc893803905",
        "parentId" : "ff19c8b0-e062-463f-8cd8-897c30b3490f",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "We actually can since the materialized object may contain key/value serdes for the resulted KTable.",
        "createdAt" : "2018-08-17T22:52:19Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "53d74246-5cb2-4e33-8d7e-ab4ae3bef838",
        "parentId" : "ff19c8b0-e062-463f-8cd8-897c30b3490f",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Ignore my comment above: I was not seeing the latest comment from you.",
        "createdAt" : "2018-08-17T22:56:16Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "bd0478a9-4ee2-4917-94bf-752c32e85cfe",
        "parentId" : "ff19c8b0-e062-463f-8cd8-897c30b3490f",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "> from upstream, we cannot forward it, but we can only forward if provided via Materialized. This is different to what we can do for the key.\r\n\r\nI see, yes I can add the comment.",
        "createdAt" : "2018-08-17T22:57:27Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1278ae279c9fa20317e55ded8aeb364eab097127",
    "line" : 119,
    "diffHunk" : "@@ -1,1 +318,322 @@            name,\n            materialized != null && materialized.keySerde() != null ? materialized.keySerde() : keySerde,\n            materialized != null ? materialized.valueSerde() : null,\n            sourceNodes,\n            shouldMaterialize ? materialized.storeName() : this.queryableStoreName,"
  },
  {
    "id" : "5a9b80a7-1dcb-45b7-b4e1-074d23683564",
    "prId" : 5521,
    "prUrl" : "https://github.com/apache/kafka/pull/5521#pullrequestreview-147323574",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae1e1b76-9ffa-48ff-84b7-6f0f21b0b8dc",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "add comment?",
        "createdAt" : "2018-08-17T19:14:28Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1278ae279c9fa20317e55ded8aeb364eab097127",
    "line" : 238,
    "diffHunk" : "@@ -1,1 +541,545 @@            joinMergeName,\n            materializedInternal != null && materializedInternal.keySerde() != null ? materializedInternal.keySerde() : keySerde,\n            materializedInternal != null ? materializedInternal.valueSerde() : null,\n            allSourceNodes,\n            internalQueryableName,"
  },
  {
    "id" : "38dbd18d-3f44-4155-86f4-79889597ee03",
    "prId" : 5521,
    "prUrl" : "https://github.com/apache/kafka/pull/5521#pullrequestreview-160132436",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fc867970-bf18-4e5b-bb3f-5576d58c9383",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I think these comments would be more helpful if they explained the exceptions.\r\n\r\nIt is generally true on any DSL method that an explicitly provided serde overrides the one passed from the parent.\r\n\r\nBy the way, since the serdes are nullable, null is always the last option (as in the comment on L132, maybe it doesn't need to be stated).\r\n\r\nFor example, in this case, we could simply say `// don't inherit parent value serde, since this operation may change the value type`.",
        "createdAt" : "2018-08-28T17:37:01Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "073596f1-8bc2-4f91-b35c-0008efeca1ba",
        "parentId" : "fc867970-bf18-4e5b-bb3f-5576d58c9383",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I want to specifically state the precedence ordering if the serde is explicitly specified from multiple places. But I agree it's better to add the explanation where we would not inherit from parent.",
        "createdAt" : "2018-09-20T22:07:24Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "e8d40a76-4e8a-455d-82c8-e2555740e978",
        "parentId" : "fc867970-bf18-4e5b-bb3f-5576d58c9383",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Cf my comment above.",
        "createdAt" : "2018-09-30T23:35:25Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1278ae279c9fa20317e55ded8aeb364eab097127",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +218,222 @@        // don't inherit parent value serde, since this operation may change the value type, more specifically:\n        // we preserve the key following the order of 1) materialized, 2) parent, 3) null\n        // we preserve the value following the order of 1) materialized, 2) null\n        return new KTableImpl<>(\n            name,"
  },
  {
    "id" : "7a237c05-6f58-406b-8130-b901a800ab69",
    "prId" : 5521,
    "prUrl" : "https://github.com/apache/kafka/pull/5521#pullrequestreview-160150059",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "218f400b-8cb8-47d3-aacf-b0bf4e08e72f",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Nit: Why this extensive comment? If you think we need this comment, we should add it to `KStreamImpl` cases, too. It's the same pattern for all operators for which user can provide Serdes.",
        "createdAt" : "2018-09-30T23:33:47Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "5fc270ac-587b-4233-a00e-866d6dd682e8",
        "parentId" : "218f400b-8cb8-47d3-aacf-b0bf4e08e72f",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This was suggested by @vvcephei , I've also added the comment in AbstractStream as stated in the ticket (I do not think this needs to be stated in public APIs as the inheritance rule so far is still best-effort and may be evolved later).",
        "createdAt" : "2018-10-01T01:45:08Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "147bd13a-21fa-44e7-a651-96e60be23887",
        "parentId" : "218f400b-8cb8-47d3-aacf-b0bf4e08e72f",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I agree that we don't need it in public API, however, only `KTableImpl` has extensive comments -- `KStreamImpl` has very limited comment -- thus, we should add those to `KStreamImpl`, too (for consistency). For example here: https://github.com/apache/kafka/pull/5521/files/e9eecd3b54def3df6b687acd93bd0957fc2687a0#diff-5142e1d4a6410459d6bf6df98828e5afR401 (there are others, too---basically all operators that allow to specify Serdes: through, join, etc)",
        "createdAt" : "2018-10-01T03:55:58Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1278ae279c9fa20317e55ded8aeb364eab097127",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +143,147 @@        // we can inherit parent key and value serde if user do not provide specific overrides, more specifically:\n        // we preserve the key following the order of 1) materialized, 2) parent\n        // we preserve the value following the order of 1) materialized, 2) parent\n        return new KTableImpl<>(name,\n                                materializedInternal != null && materializedInternal.keySerde() != null ? materializedInternal.keySerde() : keySerde,"
  },
  {
    "id" : "f64a0bfe-afe3-4388-98f2-01dfcd8e1497",
    "prId" : 5521,
    "prUrl" : "https://github.com/apache/kafka/pull/5521#pullrequestreview-160132436",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c732d517-c923-4dcf-98c7-2ae52af1c268",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "This comment is more brief than the others -- we should align all comments to be equally expressive.",
        "createdAt" : "2018-09-30T23:39:59Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1278ae279c9fa20317e55ded8aeb364eab097127",
    "line" : 233,
    "diffHunk" : "@@ -1,1 +537,541 @@        builder.addGraphNode(this.streamsGraphNode, kTableKTableJoinNode);\n\n        // we can inherit parent key serde if user do not provide specific overrides\n        return new KTableImpl<K, Change<R>, R>(\n            joinMergeName,"
  },
  {
    "id" : "36d0b62e-bd01-49b0-9da6-edf3ab4e0708",
    "prId" : 5527,
    "prUrl" : "https://github.com/apache/kafka/pull/5527#pullrequestreview-252549428",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4cacc814-bf0e-42d5-9a98-dd9d5c2b82a8",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Missing `@Override`",
        "createdAt" : "2019-05-06T21:54:17Z",
        "updatedAt" : "2019-10-02T17:56:32Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "c2434262-f68a-4c40-8dcb-fbcb3a82bcb3",
        "parentId" : "4cacc814-bf0e-42d5-9a98-dd9d5c2b82a8",
        "authorId" : "d8d11f3d-4fbd-4882-a206-bfece798cdcd",
        "body" : "Done.",
        "createdAt" : "2019-05-14T14:06:58Z",
        "updatedAt" : "2019-10-02T17:56:32Z",
        "lastEditedBy" : "d8d11f3d-4fbd-4882-a206-bfece798cdcd",
        "tags" : [
        ]
      },
      {
        "id" : "64811c91-f888-48c0-b8e0-73a2801eca8b",
        "parentId" : "4cacc814-bf0e-42d5-9a98-dd9d5c2b82a8",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Thanks! You can \"resolve\" this comment to clean up the PR.",
        "createdAt" : "2019-06-20T21:38:09Z",
        "updatedAt" : "2019-10-02T17:56:32Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e1b6a1a41c8e05ff009ad988b705baeb42800ad",
    "line" : 94,
    "diffHunk" : "@@ -1,1 +835,839 @@\n    @Override\n    public <VR, KO, VO> KTable<K, VR> join(final KTable<KO, VO> other,\n                                           final Function<V, KO> foreignKeyExtractor,\n                                           final ValueJoiner<V, VO, VR> joiner,"
  },
  {
    "id" : "bcf80bd6-0cb6-41b9-8dae-4aabca77e8bb",
    "prId" : 5527,
    "prUrl" : "https://github.com/apache/kafka/pull/5527#pullrequestreview-289615108",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7e44c046-ebfd-4055-ab41-51bef97ef9d2",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "@bellemare @vvcephei @bbejeck \r\n\r\nSeems we need to update `StreamsResetter` to delete those topics, too?",
        "createdAt" : "2019-09-12T23:12:49Z",
        "updatedAt" : "2019-10-02T17:56:32Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "4154688b-c398-47fd-aab1-f53869589081",
        "parentId" : "7e44c046-ebfd-4055-ab41-51bef97ef9d2",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Yes, we do. Good catch!",
        "createdAt" : "2019-09-18T00:27:57Z",
        "updatedAt" : "2019-10-02T17:56:32Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e1b6a1a41c8e05ff009ad988b705baeb42800ad",
    "line" : 160,
    "diffHunk" : "@@ -1,1 +901,905 @@\n        final NamedInternal renamed = new NamedInternal(joinName);\n        final String subscriptionTopicName = renamed.suffixWithOrElseGet(\"-subscription-registration\", builder, SUBSCRIPTION_REGISTRATION) + TOPIC_SUFFIX;\n        builder.internalTopologyBuilder.addInternalTopic(subscriptionTopicName);\n        final CombinedKeySchema<KO, K> combinedKeySchema = new CombinedKeySchema<>(subscriptionTopicName, foreignKeySerde, keySerde);"
  },
  {
    "id" : "cb2339c7-f42d-46c6-8661-bb9fc7dfbc92",
    "prId" : 5527,
    "prUrl" : "https://github.com/apache/kafka/pull/5527#pullrequestreview-287750794",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33cb2693-649f-4e86-8063-914a826756ea",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "@bellemare @vvcephei @bbejeck As above.",
        "createdAt" : "2019-09-12T23:13:15Z",
        "updatedAt" : "2019-10-02T17:56:32Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e1b6a1a41c8e05ff009ad988b705baeb42800ad",
    "line" : 246,
    "diffHunk" : "@@ -1,1 +987,991 @@\n\n        final String finalRepartitionTopicName = renamed.suffixWithOrElseGet(\"-subscription-response\", builder, SUBSCRIPTION_RESPONSE) + TOPIC_SUFFIX;\n        builder.internalTopologyBuilder.addInternalTopic(finalRepartitionTopicName);\n"
  },
  {
    "id" : "b83625a1-627d-443e-8914-7b4904f77a39",
    "prId" : 5567,
    "prUrl" : "https://github.com/apache/kafka/pull/5567#pullrequestreview-149479075",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4dfd2386-4b59-4efc-8375-228b96ed0684",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "on-the-side fixup of the generic types for groupBy.",
        "createdAt" : "2018-08-24T22:40:59Z",
        "updatedAt" : "2018-09-24T14:28:33Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "035b26310e76216b502839a6b9f22bf1fc75fee2",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +588,592 @@\n        // select the aggregate key and values (old and new), it would require parent to send old values\n        final ProcessorGraphNode<K, Change<V>> groupByMapNode = new ProcessorGraphNode<>(\n            selectName,\n            processorParameters,"
  },
  {
    "id" : "01d8318d-81f7-4c94-9ca7-12f84e59a644",
    "prId" : 5687,
    "prUrl" : "https://github.com/apache/kafka/pull/5687#pullrequestreview-158294736",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2687d69e-08bb-4668-995d-776d5d4040ab",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This will be fixed in part 3",
        "createdAt" : "2018-09-24T21:04:23Z",
        "updatedAt" : "2018-09-25T17:39:14Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "b40354ce9f18459f56b1bc8ca8249a52d4ec9cef",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +365,369 @@        final String name = builder.newProcessorName(SUPPRESS_NAME);\n\n        // TODO: follow-up pr to forward the k/v serdes\n        final ProcessorSupplier<K, Change<V>> suppressionSupplier =\n            () -> new KTableSuppressProcessor<>("
  },
  {
    "id" : "9f305499-6fc7-403e-8bda-6079edd7f16a",
    "prId" : 5693,
    "prUrl" : "https://github.com/apache/kafka/pull/5693#pullrequestreview-160339834",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82b95cd3-fc69-4e9e-b599-c009400617d0",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Could we extend `wrapOrCast` to add a `null` check and return `null` for this case and use it here to make code more readable?",
        "createdAt" : "2018-10-01T04:19:29Z",
        "updatedAt" : "2018-10-02T03:20:17Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "4c0bee59-8350-4344-8ede-55fd6a96898b",
        "parentId" : "82b95cd3-fc69-4e9e-b599-c009400617d0",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I can and will.",
        "createdAt" : "2018-10-01T14:56:22Z",
        "updatedAt" : "2018-10-02T03:20:17Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "ef5e2aeb-f830-4eba-9f34-abcda2d6d760",
        "parentId" : "82b95cd3-fc69-4e9e-b599-c009400617d0",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I've added that check because `context.valueSerde()` (called elsewhere) could return null.\r\n\r\nIf it's ok with you, though, I prefer the current code right here. This code ensures that `valSerde` is of the correct type (notice that no casting is necessary). In general, I think we should avoid casting unless we actually need it, as it makes regressions harder to catch.",
        "createdAt" : "2018-10-01T15:00:59Z",
        "updatedAt" : "2018-10-02T03:20:17Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddd78d9ad6826da2d821584232f2750d022ef34a",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +361,365 @@                buildSuppress(suppressed),\n                keySerde,\n                valSerde == null ? null : new FullChangeSerde<>(valSerde)\n            );\n"
  },
  {
    "id" : "027ca132-a050-435f-9a81-becda0696485",
    "prId" : 5709,
    "prUrl" : "https://github.com/apache/kafka/pull/5709#pullrequestreview-160096116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "415e4f5f-b775-4f3a-801d-d8a191541a29",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "as above",
        "createdAt" : "2018-09-30T00:11:19Z",
        "updatedAt" : "2018-10-02T03:08:38Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1865cefcf62b3da85b2bff112296d49717891c34",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +558,562 @@\n    @Override\n    @Deprecated\n    public <K1, V1> KGroupedTable<K1, V1> groupBy(final KeyValueMapper<? super K, ? super V, KeyValue<K1, V1>> selector,\n                                                  final Serialized<K1, V1> serialized) {"
  },
  {
    "id" : "9f7e35a8-babb-4839-a61c-e6f1d08bca60",
    "prId" : 5709,
    "prUrl" : "https://github.com/apache/kafka/pull/5709#pullrequestreview-160141617",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d86bf678-37e6-48b1-aed8-e57efac7e100",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: 4-space indention",
        "createdAt" : "2018-09-30T00:11:37Z",
        "updatedAt" : "2018-10-02T03:08:38Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "f48a1a13-29f5-4322-8070-43b03cc4f173",
        "parentId" : "d86bf678-37e6-48b1-aed8-e57efac7e100",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "ack",
        "createdAt" : "2018-10-01T02:17:43Z",
        "updatedAt" : "2018-10-02T03:08:38Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1865cefcf62b3da85b2bff112296d49717891c34",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +585,589 @@        final GroupedInternal<K1, V1> groupedInternal = new GroupedInternal<>(grouped);\n        return new KGroupedTableImpl<>(\n                builder,\n                selectName,\n                sourceNodes,"
  },
  {
    "id" : "0b71987f-cab1-40d3-ad9a-a96c12560ab1",
    "prId" : 5709,
    "prUrl" : "https://github.com/apache/kafka/pull/5709#pullrequestreview-160931205",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f59ef27-fc50-4353-b8d7-12613da323ea",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: remove `this.`",
        "createdAt" : "2018-10-02T04:06:39Z",
        "updatedAt" : "2018-10-02T04:15:07Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "3d2d97d7-b045-4f85-b148-938851ef9512",
        "parentId" : "7f59ef27-fc50-4353-b8d7-12613da323ea",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "ack",
        "createdAt" : "2018-10-02T21:27:49Z",
        "updatedAt" : "2018-10-02T21:27:49Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1865cefcf62b3da85b2bff112296d49717891c34",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +554,558 @@    @Override\n    public <K1, V1> KGroupedTable<K1, V1> groupBy(final KeyValueMapper<? super K, ? super V, KeyValue<K1, V1>> selector) {\n        return this.groupBy(selector, Grouped.with(null, null));\n    }\n"
  },
  {
    "id" : "169958db-bf7d-4f4c-9b78-01a99d53fcf0",
    "prId" : 5724,
    "prUrl" : "https://github.com/apache/kafka/pull/5724#pullrequestreview-160578888",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe98d19f-59cf-46b8-90d7-3bed23e15b91",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "We use a stateful node now, to manage the buffer store.",
        "createdAt" : "2018-10-02T06:27:09Z",
        "updatedAt" : "2018-10-03T00:05:51Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "d405ac999adf4136de26b1e533c627ca00ed3238",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +376,380 @@            new InMemoryTimeOrderedKeyValueBuffer.Builder(storeName),\n            false\n        );\n\n        builder.addGraphNode(streamsGraphNode, node);"
  },
  {
    "id" : "793069b1-0c6b-4825-b2e7-6ee391dbf785",
    "prId" : 5724,
    "prUrl" : "https://github.com/apache/kafka/pull/5724#pullrequestreview-160935526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3806d943-6d51-4a09-b642-b927728c3344",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "If users cannot name this, do we run into upgrade/compatibility issues again that we just tried to fix?",
        "createdAt" : "2018-10-02T06:28:54Z",
        "updatedAt" : "2018-10-03T00:05:51Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "be417756-2340-4d81-81f5-0a707d4ae92a",
        "parentId" : "3806d943-6d51-4a09-b642-b927728c3344",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "yes. I have an interesting proposal to avoid this problem (forever), but I didn't want to introduce too much controversy right now.\r\n\r\nShould we consider that as part of this PR? Alternatively, we can put in a minor patch for 2.1 independently.",
        "createdAt" : "2018-10-02T15:01:57Z",
        "updatedAt" : "2018-10-03T00:05:51Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "1380bc13-9cc8-49f0-a9af-8e3f5fd9b85f",
        "parentId" : "3806d943-6d51-4a09-b642-b927728c3344",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "My vote would be to add a minor PR for 2.1 independently and give `Suppressed` the ability to have a name.  \r\n\r\n",
        "createdAt" : "2018-10-02T15:52:01Z",
        "updatedAt" : "2018-10-03T00:05:51Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "187f7bf5-a0ce-4da4-a311-a292f3f2cd0a",
        "parentId" : "3806d943-6d51-4a09-b642-b927728c3344",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "See https://issues.apache.org/jira/browse/KAFKA-7393\r\n\r\nMaybe we should just add a name parameter to Suppressed. This should be an uncontroversial \"merge\" of Bill's any my KIPs.",
        "createdAt" : "2018-10-02T17:03:09Z",
        "updatedAt" : "2018-10-03T00:05:51Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "48d9a44e-309f-4377-b94d-c88d8fb1f9e2",
        "parentId" : "3806d943-6d51-4a09-b642-b927728c3344",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "\\cc @bbejeck @guozhangwang WDYT?",
        "createdAt" : "2018-10-02T18:55:41Z",
        "updatedAt" : "2018-10-03T00:05:51Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "feb306b3-fe20-4667-b889-ff766944b3c5",
        "parentId" : "3806d943-6d51-4a09-b642-b927728c3344",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I think we can leverage on https://cwiki.apache.org/confluence/display/KAFKA/KIP-307%3A+Allow+to+define+custom+processor+names+with+KStreams+DSL, i.e. to do the following in a follow-up PR (part ):\r\n\r\n1) Add the Named interface.\r\n2) Let Suppressed extend Named.\r\n3) Use that name to name a) storeName, and hence its corresponding store name, b) processor name.",
        "createdAt" : "2018-10-02T21:41:07Z",
        "updatedAt" : "2018-10-03T00:05:51Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d405ac999adf4136de26b1e533c627ca00ed3238",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +359,363 @@    public KTable<K, V> suppress(final Suppressed<K> suppressed) {\n        final String name = builder.newProcessorName(SUPPRESS_NAME);\n        final String storeName = builder.newStoreName(SUPPRESS_NAME);\n\n        final ProcessorSupplier<K, Change<V>> suppressionSupplier ="
  },
  {
    "id" : "757fe242-5dc6-4d7f-a3a2-56cd685cfa68",
    "prId" : 5724,
    "prUrl" : "https://github.com/apache/kafka/pull/5724#pullrequestreview-160970485",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "441187b1-7ffd-476b-a00c-6cb2aa45e323",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Why not put the storeName here? In that case the processor will not be connected to the state store.",
        "createdAt" : "2018-10-02T23:01:05Z",
        "updatedAt" : "2018-10-03T00:05:51Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "ec1ce87b-db46-4d8e-950e-396ad89114c2",
        "parentId" : "441187b1-7ffd-476b-a00c-6cb2aa45e323",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I had a little confusion about that... Supplying the name there results in an exception.\r\n\r\nApparently, we are supposed to pass in the names only if the store has been pre-registered. Since were're creating the store right now, we pass in the store builder on the next line, and the topology build process will invoke the builder and connect it to the processor.\r\n\r\nThe state store and processor get connected either way.\r\n\r\nOr did I misunderstand what you were suggesting?",
        "createdAt" : "2018-10-03T00:00:09Z",
        "updatedAt" : "2018-10-03T00:05:51Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "1ae15f40-0dba-4697-8edf-1049b60e644a",
        "parentId" : "441187b1-7ffd-476b-a00c-6cb2aa45e323",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "You are actually right. NVM on the above comment.",
        "createdAt" : "2018-10-03T00:17:42Z",
        "updatedAt" : "2018-10-03T00:17:42Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d405ac999adf4136de26b1e533c627ca00ed3238",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +373,377 @@            name,\n            new ProcessorParameters<>(suppressionSupplier, name),\n            null,\n            new InMemoryTimeOrderedKeyValueBuffer.Builder(storeName),\n            false"
  },
  {
    "id" : "dc8cdac5-507e-427a-9db6-47ba63684b38",
    "prId" : 5731,
    "prUrl" : "https://github.com/apache/kafka/pull/5731#pullrequestreview-161267132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37b5f3ff-6a79-4516-8c71-04d1d75a6ca3",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This is new since the rebase.",
        "createdAt" : "2018-10-03T17:07:55Z",
        "updatedAt" : "2018-10-03T22:34:08Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "91adfc58c50173bad5d2351e97b25db2febbb9d5",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +364,368 @@\n        final String storeName =\n            suppressedInternal.name() != null ? suppressedInternal.name() + \"-store\" : builder.newStoreName(SUPPRESS_NAME);\n\n        final ProcessorSupplier<K, Change<V>> suppressionSupplier ="
  },
  {
    "id" : "1506ec7f-12df-4a51-9b9a-ef1bf2b82042",
    "prId" : 5731,
    "prUrl" : "https://github.com/apache/kafka/pull/5731#pullrequestreview-161267132",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5d66482-2e8c-4de7-b52f-6ae43e619b6b",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This is just a formatting \"fix\"",
        "createdAt" : "2018-10-03T17:08:28Z",
        "updatedAt" : "2018-10-03T22:34:08Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "91adfc58c50173bad5d2351e97b25db2febbb9d5",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +599,603 @@            sourceNodes,\n            groupedInternal,\n            groupByMapNode\n        );\n    }"
  },
  {
    "id" : "ba27aa06-86f5-4362-a870-7be560219733",
    "prId" : 5779,
    "prUrl" : "https://github.com/apache/kafka/pull/5779#pullrequestreview-163625802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4782b919-49bf-4483-8b2d-d7d00befbb95",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is the key change.",
        "createdAt" : "2018-10-11T02:08:23Z",
        "updatedAt" : "2018-12-09T06:42:30Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d02ad5bab3f2cf4ae2c11457e8dfe099d3a4b12",
    "line" : 224,
    "diffHunk" : "@@ -1,1 +589,593 @@        if (processorSupplier instanceof KTableSource) {\n            final KTableSource<K, V> source = (KTableSource<K, V>) processorSupplier;\n            // whenever a source ktable is required for getter, it should be materialized\n            source.materialize();\n            return new KTableSourceValueGetterSupplier<>(source.queryableName());"
  },
  {
    "id" : "923ed6b6-eff6-44b3-ba7d-2be0381822ed",
    "prId" : 5779,
    "prUrl" : "https://github.com/apache/kafka/pull/5779#pullrequestreview-182907544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "00624397-3dbb-4455-9c1c-64e685eda540",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Couldn't the `MaterializedInternal#queryableStoreName()` return `null` indicating not to materialize as well?\r\n\r\nEDIT: I think the `null` check in `KTableSource` makes sure we never hit this condition, correct?  If so, you can ignore this comment and the other 2 related ones below.",
        "createdAt" : "2018-11-28T19:38:07Z",
        "updatedAt" : "2018-12-09T06:42:30Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "c7f3b77a-8dc7-4f48-9b9f-42f8a6c7c86a",
        "parentId" : "00624397-3dbb-4455-9c1c-64e685eda540",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I guess it could return `null` -- but I also think that would be ok, just indicating that we don't materialize the result.",
        "createdAt" : "2018-12-08T04:23:13Z",
        "updatedAt" : "2018-12-09T06:42:30Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d02ad5bab3f2cf4ae2c11457e8dfe099d3a4b12",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +120,124 @@\n        // only materialize if the state store has queryable name\n        final String queryableName = materializedInternal != null ? materializedInternal.queryableStoreName() : null;\n        final KTableProcessorSupplier<K, V, V> processorSupplier = new KTableFilter<>(this, predicate, filterNot, queryableName);\n"
  },
  {
    "id" : "f98bcfcc-0498-4660-bb0a-f477418212ea",
    "prId" : 5779,
    "prUrl" : "https://github.com/apache/kafka/pull/5779#pullrequestreview-179480358",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bca17afc-0b81-4753-8d30-02a1723652be",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "same here",
        "createdAt" : "2018-11-28T19:39:00Z",
        "updatedAt" : "2018-12-09T06:42:30Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d02ad5bab3f2cf4ae2c11457e8dfe099d3a4b12",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +192,196 @@\n        // only materialize if the state store has queryable name\n        final String queryableName = materializedInternal != null ? materializedInternal.queryableStoreName() : null;\n        final KTableProcessorSupplier<K, V, VR> processorSupplier = new KTableMapValues<>(this, mapper, queryableName);\n"
  },
  {
    "id" : "155d21bb-e6a6-46a2-84e1-f69f9ae120ea",
    "prId" : 5779,
    "prUrl" : "https://github.com/apache/kafka/pull/5779#pullrequestreview-179480358",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "167babc0-aa73-4eaf-a1bf-7ea42d6b722e",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "ditto",
        "createdAt" : "2018-11-28T19:39:12Z",
        "updatedAt" : "2018-12-09T06:42:30Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d02ad5bab3f2cf4ae2c11457e8dfe099d3a4b12",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +281,285 @@\n        // only materialize if users provide a specific queryable name\n        final String queryableStoreName = materialized != null ? materialized.queryableStoreName() : null;\n\n        final KTableProcessorSupplier<K, V, VR> processorSupplier = new KTableTransformValues<>("
  },
  {
    "id" : "259c2187-2157-4dca-9445-a23dcd500e12",
    "prId" : 6453,
    "prUrl" : "https://github.com/apache/kafka/pull/6453#pullrequestreview-220035526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f97b5755-2eca-4cc7-b28e-a6b64575f9be",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "nit: the coding style in `filter` and `mapValues` are slightly different here: can we just make it consistent to pre-create the serdes beforehand as we did in `doFilter`?",
        "createdAt" : "2019-03-27T17:03:56Z",
        "updatedAt" : "2019-03-28T13:59:34Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "9eccbbe7-f776-4e50-ba55-00daca4527e0",
        "parentId" : "f97b5755-2eca-4cc7-b28e-a6b64575f9be",
        "authorId" : "462b08c4-4553-46cf-b1cf-8fd3349738fb",
        "body" : "Sure. It is already done in the other branch which handles `transformValues` method, not here. :smiley: ",
        "createdAt" : "2019-03-28T13:58:05Z",
        "updatedAt" : "2019-03-28T13:59:34Z",
        "lastEditedBy" : "462b08c4-4553-46cf-b1cf-8fd3349738fb",
        "tags" : [
        ]
      }
    ],
    "commit" : "1bcb12612f780195c27285b030339bcdf4bb64c0",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +326,330 @@        return new KTableImpl<>(\n            name,\n            materializedInternal != null && materializedInternal.keySerde() != null ? materializedInternal.keySerde() : keySerde,\n            materializedInternal != null ? materializedInternal.valueSerde() : null,\n            sourceNodes,"
  },
  {
    "id" : "b214812f-e415-4994-a268-40da4f23a1b2",
    "prId" : 6781,
    "prUrl" : "https://github.com/apache/kafka/pull/6781#pullrequestreview-240262074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0d06b73-a438-489e-84ff-0483eb197b61",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "just resolving a rawtypes warning",
        "createdAt" : "2019-05-21T19:46:52Z",
        "updatedAt" : "2019-05-30T14:57:19Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "daf890e855d0949687a6d4e35c7ed15b473c1a71",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +392,396 @@        final String name;\n        if (suppressed instanceof NamedSuppressed) {\n            final String givenName = ((NamedSuppressed<?>) suppressed).name();\n            name = givenName != null ? givenName : builder.newProcessorName(SUPPRESS_NAME);\n        } else {"
  },
  {
    "id" : "12288248-ed92-42b6-9f1c-ff75effeaa7f",
    "prId" : 6781,
    "prUrl" : "https://github.com/apache/kafka/pull/6781#pullrequestreview-240262074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf60ef3b-7a0a-4385-a6ec-fe1778f34399",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "adding a reference to the source KTable",
        "createdAt" : "2019-05-21T19:47:07Z",
        "updatedAt" : "2019-05-30T14:57:19Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "daf890e855d0949687a6d4e35c7ed15b473c1a71",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +406,410 @@            suppressedInternal,\n            storeName,\n            this\n        );\n"
  },
  {
    "id" : "f6e65f77-c44a-4b3d-ab84-e21662ed3dfc",
    "prId" : 6781,
    "prUrl" : "https://github.com/apache/kafka/pull/6781#pullrequestreview-240262074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b0689fc5-8d43-4318-941a-5f9a2c79f922",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "the suppress processor is in a different package.",
        "createdAt" : "2019-05-21T19:47:25Z",
        "updatedAt" : "2019-05-30T14:57:19Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "daf890e855d0949687a6d4e35c7ed15b473c1a71",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +628,632 @@\n    @SuppressWarnings(\"unchecked\")\n    public KTableValueGetterSupplier<K, V> valueGetterSupplier() {\n        if (processorSupplier instanceof KTableSource) {\n            final KTableSource<K, V> source = (KTableSource<K, V>) processorSupplier;"
  },
  {
    "id" : "02d381e1-7026-4be3-933f-b69717e556cf",
    "prId" : 7541,
    "prUrl" : "https://github.com/apache/kafka/pull/7541#pullrequestreview-303379282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "660bd03c-6188-4eca-8af3-a62f16f30ed9",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "nit: parameters on a separate line",
        "createdAt" : "2019-10-17T15:18:55Z",
        "updatedAt" : "2019-10-17T15:37:42Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "6462f82c-b0b0-4619-a5fe-a5194f5456cf",
        "parentId" : "660bd03c-6188-4eca-8af3-a62f16f30ed9",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "counter-nit: I left them on one line because they're just right at the limit :)",
        "createdAt" : "2019-10-17T16:14:02Z",
        "updatedAt" : "2019-10-17T16:14:02Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0406b3fdcf79f58ec6fa32f161dd90f011e295a",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +870,874 @@                                           final ValueJoiner<V, VO, VR> joiner,\n                                           final Materialized<K, VR, KeyValueStore<Bytes, byte[]>> materialized) {\n        return doJoinOnForeignKey(other, foreignKeyExtractor, joiner, NamedInternal.empty(), materialized, false);\n    }\n"
  },
  {
    "id" : "cb3e54ff-3950-4831-97eb-a4e066ef99ea",
    "prId" : 7541,
    "prUrl" : "https://github.com/apache/kafka/pull/7541#pullrequestreview-303340775",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "971af888-1776-4c3f-85f4-98c05a7845de",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "ditto",
        "createdAt" : "2019-10-17T15:19:08Z",
        "updatedAt" : "2019-10-17T15:37:42Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f0406b3fdcf79f58ec6fa32f161dd90f011e295a",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +880,884 @@                                           final Materialized<K, VR, KeyValueStore<Bytes, byte[]>> materialized) {\n        return doJoinOnForeignKey(other, foreignKeyExtractor, joiner, named, materialized, false);\n    }\n\n    @Override"
  },
  {
    "id" : "54889f06-83ba-432e-b9b2-307d6de162d1",
    "prId" : 7557,
    "prUrl" : "https://github.com/apache/kafka/pull/7557#pullrequestreview-304160534",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8dc45188-adce-4d0d-a3e5-b2df5157b50a",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "LGTM.",
        "createdAt" : "2019-10-18T22:14:09Z",
        "updatedAt" : "2019-10-18T22:14:09Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "861524647bae1886227e8ab3b613e2b206d8819c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +713,717 @@\n        if (materializedInternal != null) {\n            if (materializedInternal.keySerde() == null) {\n                materializedInternal.withKeySerde(this.keySerde);\n            }"
  }
]