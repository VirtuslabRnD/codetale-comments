[
  {
    "id" : "c1df9b6c-d320-4de5-bb34-7734371f6758",
    "prId" : 4955,
    "prUrl" : "https://github.com/apache/kafka/pull/4955#pullrequestreview-120876375",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6b6aa54-aa33-4b71-85be-eaee0a73b10e",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Do we need to update `equals` and `hashCode`? (not sure)",
        "createdAt" : "2018-05-16T04:02:16Z",
        "updatedAt" : "2018-05-22T16:57:39Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "fb602aab-f0e7-489b-8920-a22f74ce0c32",
        "parentId" : "b6b6aa54-aa33-4b71-85be-eaee0a73b10e",
        "authorId" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "body" : "I think so. I think there is not reason to have the same records, from the same cluster with different headers. Adding it.",
        "createdAt" : "2018-05-17T02:06:32Z",
        "updatedAt" : "2018-05-22T16:57:39Z",
        "lastEditedBy" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "tags" : [
        ]
      }
    ],
    "commit" : "19db8d2e3a8dfb123eba9ea6637938017a4324aa",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +70,74 @@\n    @Override\n    public boolean equals(final Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;"
  },
  {
    "id" : "a5f554da-0719-4f97-bd54-9f539cbeba63",
    "prId" : 5693,
    "prUrl" : "https://github.com/apache/kafka/pull/5693#pullrequestreview-160561804",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c9b4db3-647b-49bf-94f0-a701b02e6a16",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Each Java object has a natural overhead -- might be worth to add this here? would need to search the internet how many bytes, however, we would have it for `ProcessorRecordContext` itself, as well as `topic`, `headers` (including it's nested `Header` objects).",
        "createdAt" : "2018-10-01T05:30:19Z",
        "updatedAt" : "2018-10-02T03:20:17Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "47dab7f1-3981-4ffd-9cc5-b9a1690ddfb6",
        "parentId" : "5c9b4db3-647b-49bf-94f0-a701b02e6a16",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I agree that this is an under-estimate, but I don't think there's much point in being exact.\r\nThe overhead is dependent on the JVM implementation, so we'd have to detect the JVM and maintain a mapping for each different implementation. Even then, we don't know how much extra memory we're using in the various garbage collectors, of which there are now three different implementations in the Oracle JDK alone...\r\n\r\nI'd rather just make the best effort we reasonably can to live more-or-less within the desired boundary. For example, storing the `byte[]` value is much closer than storing the object. But beyond that, we get into diminishing returns for quickly increasing complexity.\r\n",
        "createdAt" : "2018-10-01T17:44:39Z",
        "updatedAt" : "2018-10-02T03:20:18Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "fc93cd19-dffc-41e8-bae4-8a7d1dfc4e5e",
        "parentId" : "5c9b4db3-647b-49bf-94f0-a701b02e6a16",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Ack. That's fair. The existing caches also use rough estimates only. (Might be interesting how much we are off though... But this could be a follow up improvement.)",
        "createdAt" : "2018-10-02T00:08:26Z",
        "updatedAt" : "2018-10-02T03:20:18Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "ebc5742b-12c7-4fd0-b816-93ba5d3c6afe",
        "parentId" : "5c9b4db3-647b-49bf-94f0-a701b02e6a16",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Makes sense.",
        "createdAt" : "2018-10-02T04:13:10Z",
        "updatedAt" : "2018-10-02T04:13:10Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddd78d9ad6826da2d821584232f2750d022ef34a",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +80,84 @@    }\n\n    public long sizeBytes() {\n        long size = 0L;\n        size += 8; // value.context.timestamp"
  },
  {
    "id" : "69fa0918-620f-4400-9430-5c31c398e7b4",
    "prId" : 5693,
    "prUrl" : "https://github.com/apache/kafka/pull/5693#pullrequestreview-160409418",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51d338cc-5e13-40b2-af8c-b88cf3ee7e1b",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "a `String` also store the length (it's a `char[]` internally) -- should we add 4 more bytes here?\r\n\r\nAlso, has a `char[]` similar overhead than a regular object?",
        "createdAt" : "2018-10-01T05:32:06Z",
        "updatedAt" : "2018-10-02T03:20:17Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "b554597e-351b-4cd0-b87f-95bf473789df",
        "parentId" : "51d338cc-5e13-40b2-af8c-b88cf3ee7e1b",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I believe arrays also store their types. But again, we are getting into JVM implementation details. There are too many JVM implementations for us to be expected to worry about this, IMHO.",
        "createdAt" : "2018-10-01T17:46:16Z",
        "updatedAt" : "2018-10-02T03:20:18Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddd78d9ad6826da2d821584232f2750d022ef34a",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +85,89 @@        size += 8; // value.context.offset\n        if (topic != null) {\n            size += topic.toCharArray().length;\n        }\n        size += 4; // partition"
  },
  {
    "id" : "4fa7617b-d937-4e84-918f-e17fdf6262f2",
    "prId" : 6484,
    "prUrl" : "https://github.com/apache/kafka/pull/6484#pullrequestreview-217558001",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c6acfc6-9679-408d-9e9c-fd604858449c",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Add a check here that `header.key()` doesn't return `null`?",
        "createdAt" : "2019-03-21T18:08:58Z",
        "updatedAt" : "2019-03-21T18:19:43Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "1bf0feda-7caf-4e4c-afb6-21dfe17d8b26",
        "parentId" : "4c6acfc6-9679-408d-9e9c-fd604858449c",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "The key cannot be `null` -- compare https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/header/internals/RecordHeader.java",
        "createdAt" : "2019-03-22T01:01:44Z",
        "updatedAt" : "2019-03-22T01:01:45Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "90cf8f92-8a6a-4436-bab2-0acaa41ec4ba",
        "parentId" : "4c6acfc6-9679-408d-9e9c-fd604858449c",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Thanks for the clarification.",
        "createdAt" : "2019-03-22T01:16:45Z",
        "updatedAt" : "2019-03-22T01:16:45Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f587e6cc1433697abc3b294efc3b1970338c90d5",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +90,94 @@        if (headers != null) {\n            for (final Header header : headers) {\n                size += header.key().toCharArray().length;\n                final byte[] value = header.value();\n                if (value != null) {"
  }
]