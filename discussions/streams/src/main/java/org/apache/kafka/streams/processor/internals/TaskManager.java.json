[
  {
    "id" : "2e9b01c3-ad71-4ac3-b790-6b8b4663d0ee",
    "prId" : 4343,
    "prUrl" : "https://github.com/apache/kafka/pull/4343#pullrequestreview-86074571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccc1c4a9-0aa4-4de8-86df-53f0dc933cca",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why this change? AFAIK, `unsubscribe()` will never throw.",
        "createdAt" : "2017-12-27T21:37:59Z",
        "updatedAt" : "2018-01-02T02:05:30Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "fff882b8-f475-4bf0-be3d-436f9ad404c3",
        "parentId" : "ccc1c4a9-0aa4-4de8-86df-53f0dc933cca",
        "authorId" : "5b2b5fa0-0fb4-4e52-a4f9-9d4318b5ae5d",
        "body" : "It throws in the test since the consumer was never opened.",
        "createdAt" : "2018-01-02T01:55:21Z",
        "updatedAt" : "2018-01-02T02:05:30Z",
        "lastEditedBy" : "5b2b5fa0-0fb4-4e52-a4f9-9d4318b5ae5d",
        "tags" : [
        ]
      }
    ],
    "commit" : "5902a645c8eb9fc9f25f3c7076a0acc7d1e5def3",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +277,281 @@        try {\n            restoreConsumer.unsubscribe();\n        } catch (final RuntimeException fatalException) {\n            firstException.compareAndSet(null, fatalException);\n        }"
  },
  {
    "id" : "e5a27415-476f-4ef2-aa0d-f2014179cab1",
    "prId" : 4636,
    "prUrl" : "https://github.com/apache/kafka/pull/4636#pullrequestreview-113914060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4633a886-67b0-4ee6-be3e-f9b80cc3b951",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I think this can still be package-private.",
        "createdAt" : "2018-04-19T21:56:03Z",
        "updatedAt" : "2018-05-31T03:24:33Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "2db233ae-5d13-457f-bf5f-f81f77664c27",
        "parentId" : "4633a886-67b0-4ee6-be3e-f9b80cc3b951",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Unfortunately not. We need access in `FutureStreamsPartitionAssignor` that is in a different package.",
        "createdAt" : "2018-04-20T09:44:55Z",
        "updatedAt" : "2018-05-31T03:24:33Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a87bd5254155a9d60ba479371305ddaae99282d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +43,47 @@import static java.util.Collections.singleton;\n\npublic class TaskManager {\n    // initialize the task list\n    // activeTasks needs to be concurrent as it can be accessed"
  },
  {
    "id" : "46c2ea2a-f736-41ed-ba76-88b31a01e1b4",
    "prId" : 4909,
    "prUrl" : "https://github.com/apache/kafka/pull/4909#pullrequestreview-117689380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7310105a-9031-4324-b6b3-140c53ead153",
        "parentId" : null,
        "authorId" : "2c9c4dbb-be9d-424e-8d8a-9f3d67f8372b",
        "body" : "ditto",
        "createdAt" : "2018-05-04T17:22:26Z",
        "updatedAt" : "2018-05-04T21:46:46Z",
        "lastEditedBy" : "2c9c4dbb-be9d-424e-8d8a-9f3d67f8372b",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9abf1fea8a9e8c80b3f736aecb7a5445a9a4e5f",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +459,463 @@    public String toString(final String indent) {\n        final StringBuilder builder = new StringBuilder();\n        builder.append(\"TaskManager\\n\");\n        builder.append(indent).append(\"\\tMetadataState:\\n\");\n        builder.append(streamsMetadataState.toString(indent + \"\\t\\t\"));"
  },
  {
    "id" : "62af1781-8e8e-47c5-90b3-135b909b1ca1",
    "prId" : 6113,
    "prUrl" : "https://github.com/apache/kafka/pull/6113#pullrequestreview-206979987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "709aa2b6-546e-4e1a-951f-9505086aef34",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why do we close those tasks instead of just suspending them? Could we close them only if they are not re-assigned?",
        "createdAt" : "2019-01-14T17:41:42Z",
        "updatedAt" : "2019-02-22T01:03:34Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "f0311874-95ec-4cb9-9e9d-6f7acd70e88d",
        "parentId" : "709aa2b6-546e-4e1a-951f-9505086aef34",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "The life time of a task is:\r\n\r\ncreated -> [initializeStateStores] -> restoring (writes to the initialized state stores) -> [initializeTopology] -> running -> [closeTopology] -> suspended -> [closeStateManager] -> dead\r\n\r\nI.e. the restoring tasks do not have topology initialized at all, whereas `suspend` call is just trying to closeTopology.",
        "createdAt" : "2019-02-22T00:56:53Z",
        "updatedAt" : "2019-02-22T01:03:34Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "b353f98c-2a22-4188-9de8-62d53ae28015",
        "parentId" : "709aa2b6-546e-4e1a-951f-9505086aef34",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Ok, but why can't we keep restoring task open than, and hope they get reassigned so we can continue restoring them?",
        "createdAt" : "2019-02-22T01:40:43Z",
        "updatedAt" : "2019-02-22T01:40:43Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "df40113c-6ddf-4334-8abd-1d371c0d3eb6",
        "parentId" : "709aa2b6-546e-4e1a-951f-9505086aef34",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Yes we can, the issue is that today we clear all the `store-restorers` hence there's an issue.\r\n\r\nWe can, of course do some optimizations like `do not close restoring tasks, and also do not clear their corresponding restorers as well`, but this is out of the scope of this PR and I want to address it separately.\r\n\r\ncc @vvcephei ",
        "createdAt" : "2019-02-22T18:46:40Z",
        "updatedAt" : "2019-02-22T18:47:53Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "b26be70b-2b94-4472-9847-b54e6fa3e9f8",
        "parentId" : "709aa2b6-546e-4e1a-951f-9505086aef34",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Ack",
        "createdAt" : "2019-02-22T18:48:47Z",
        "updatedAt" : "2019-02-22T18:48:48Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "447a9bb3-1718-4b0a-b62a-24cd6ad26bb4",
        "parentId" : "709aa2b6-546e-4e1a-951f-9505086aef34",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "@guozhangwang Can you create a Jira to track this cleanup?",
        "createdAt" : "2019-02-22T18:55:39Z",
        "updatedAt" : "2019-02-22T18:55:39Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "9607b351-b286-4a62-9e68-227482116219",
        "parentId" : "709aa2b6-546e-4e1a-951f-9505086aef34",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Yup: https://issues.apache.org/jira/browse/KAFKA-7985",
        "createdAt" : "2019-02-22T19:07:08Z",
        "updatedAt" : "2019-02-22T19:07:08Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "912a45642a92f4298d203d5c4eda6a1678208c05",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +244,248 @@        // for those restoring and still assigned tasks, they will be re-created\n        // in addStreamTasks.\n        firstException.compareAndSet(null, active.closeAllRestoringTasks());\n        changelogReader.reset();\n"
  }
]