[
  {
    "id" : "07826718-70fd-46fd-a4b4-79cbf7339da2",
    "prId" : 3307,
    "prUrl" : "https://github.com/apache/kafka/pull/3307#pullrequestreview-100563118",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65876f4f-cc67-4355-8e8e-db7dfd4d3724",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Can we keep the configs order alphabetically?",
        "createdAt" : "2018-03-01T04:39:17Z",
        "updatedAt" : "2018-03-08T22:16:54Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "8edcf0de-4e0a-4f6d-9269-9f99d89cfe3d",
        "parentId" : "65876f4f-cc67-4355-8e8e-db7dfd4d3724",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "See above.",
        "createdAt" : "2018-03-01T19:31:22Z",
        "updatedAt" : "2018-03-08T22:16:54Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1711c42e30e3fe20677282a33767cd005b63034",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +239,243 @@            + DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS + \"' or '\" + DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS + \"' as well\";\n\n    /** {@code default value.serde} */\n    public static final String DEFAULT_VALUE_SERDE_CLASS_CONFIG = \"default.value.serde\";\n    private static final String DEFAULT_VALUE_SERDE_CLASS_DOC = \"Default serializer / deserializer class for value that implements the <code>org.apache.kafka.common.serialization.Serde</code> interface. \""
  },
  {
    "id" : "b3eff712-4bc9-4c07-ab23-a26eeba8b715",
    "prId" : 4489,
    "prUrl" : "https://github.com/apache/kafka/pull/4489#pullrequestreview-92734196",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf6b515f-e9d3-4db6-b369-bc4584886acc",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: `, and` (missing comma)",
        "createdAt" : "2018-01-30T21:49:28Z",
        "updatedAt" : "2018-01-30T22:14:17Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "20a554d3ee792e5b124a32207d968716664dd8ee",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +60,64 @@ * Can also be used to configure the Kafka Streams internal {@link KafkaConsumer}, {@link KafkaProducer} and {@link AdminClient}.\n * To avoid consumer/producer/admin property conflicts, you should prefix those properties using\n * {@link #consumerPrefix(String)}, {@link #producerPrefix(String)} and {@link #adminClientPrefix(String)}, respectively.\n * <p>\n * Example:"
  },
  {
    "id" : "149b3afa-3f3c-4cef-a698-539a633f77b7",
    "prId" : 4636,
    "prUrl" : "https://github.com/apache/kafka/pull/4636#pullrequestreview-123525275",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1e601e3-68aa-4c0f-9d57-4fb384cf7d06",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "a question more for my information, why do we need this `SuppressWarnings` here?",
        "createdAt" : "2018-05-25T19:10:33Z",
        "updatedAt" : "2018-05-31T03:24:33Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "c49b9493-228a-4103-af64-246551fce11c",
        "parentId" : "c1e601e3-68aa-4c0f-9d57-4fb384cf7d06",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Not strictly. However, Intellij shows a warning that those could be private because it's never used. It's just to get rid of those warnings. Can also revert if you insist.",
        "createdAt" : "2018-05-25T22:11:00Z",
        "updatedAt" : "2018-05-31T03:24:33Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a87bd5254155a9d60ba479371305ddaae99282d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +146,150 @@    // TODO: currently we cannot get the full topic configurations and hence cannot allow topic configs without the prefix,\n    //       this can be lifted once kafka.log.LogConfig is completely deprecated by org.apache.kafka.common.config.TopicConfig\n    @SuppressWarnings(\"WeakerAccess\")\n    public static final String TOPIC_PREFIX = \"topic.\";\n"
  },
  {
    "id" : "f988e982-d3e2-468c-8095-c77a48c82152",
    "prId" : 4746,
    "prUrl" : "https://github.com/apache/kafka/pull/4746#pullrequestreview-106270560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e680fd04-c4d4-4302-bec4-c8be45e616a8",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Thanks for this!",
        "createdAt" : "2018-03-22T19:36:59Z",
        "updatedAt" : "2018-03-27T01:03:28Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "fe469ed34fb4f0d1094a542e2b2dd7d27cedd2e2",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +281,285 @@    // that streams prefer different default values\n    private static final Map<String, Object> PRODUCER_DEFAULT_OVERRIDES;\n    static {\n        Map<String, Object> tempProducerDefaultOverrides = new HashMap<>();\n        tempProducerDefaultOverrides.put(ProducerConfig.LINGER_MS_CONFIG, \"100\");"
  },
  {
    "id" : "8060cdbb-3762-4e3a-845a-2985f798c437",
    "prId" : 5071,
    "prUrl" : "https://github.com/apache/kafka/pull/5071#pullrequestreview-126602017",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d93ae1c-33be-4573-865c-fbcca7b50ccc",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I know we've been around and around about this, and at this point, I can't remember if this was already discussed and discarded, but...\r\n\r\nI think it may make sense to just add \"none\" or\" 2.0\" as the possible values. \r\n\r\nWe still aren't sure if upgrading optimizations will always be safe, so explicitly stating the optimization value you want will protect you against accidental upgrades when 2.1+ come out.\r\n\r\nAlso, the explicit optimization level will protect against accidental *downgrades*, which could also be unsafe. For example, if I deploy v2.1 with \"all\", it'll set me up with 2.1-level optimizations. If I decide I don't like it and go down to 2.0, still with \"all\", Streams won't know any different, so it'll construct my topology according to 2.0 rules, potentially leading to data loss.\r\n\r\nOn the other hand, if I had deployed it with \"2.1\" and then downgraded to 2.0, Streams could refuse to start, since it doesn't understand that config value.\r\n\r\nI think it would be really nice, in the future, to investigate ways to restructure the topology dynamically without losing data, but until we get there, it's better to err on the side of explicitness and safety.",
        "createdAt" : "2018-06-06T22:38:38Z",
        "updatedAt" : "2018-06-06T22:38:38Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "4bfe47d4-3a87-4d59-982a-ceee9a614d6d",
        "parentId" : "9d93ae1c-33be-4573-865c-fbcca7b50ccc",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I agree that adding for \"2.0\" would make sense for upgrading / downgrading; in fact, I'm working on some optimizations for allowing users to decide whether to turn on / off source KTables based on the config, which would require a \"2.0\" value.\r\n\r\nOn the other hand, I think \"all\" still have its value, when 1) I am in development mode and do not care about compatibility, or 2) I have used other mechanisms to makes sure the persistent storages like Kafka topics would not change (this is future work).\r\n\r\nSo I'm +1 to merge this PR as is, and work on adding another value of \"2.0\" in a separate PR.",
        "createdAt" : "2018-06-06T23:59:24Z",
        "updatedAt" : "2018-06-06T23:59:25Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "5134202f-886c-4f25-b3b6-0f146eaabcdc",
        "parentId" : "9d93ae1c-33be-4573-865c-fbcca7b50ccc",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I think \"all\" is fine, as \"all\" always means \"latest version\" -- if we release 2.1, we would introduce \"2.0\" and \"all\" as become a surrogate for \"2.1\" -- I think it's clean this way, ie, we only have a version string for older releases.",
        "createdAt" : "2018-06-07T00:06:19Z",
        "updatedAt" : "2018-06-07T00:06:20Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "7a1bad94-047a-4ace-9cd8-c21b4603b5e4",
        "parentId" : "9d93ae1c-33be-4573-865c-fbcca7b50ccc",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "I'm +1 with \"all\" for the latest release and a version string for older releases.",
        "createdAt" : "2018-06-07T00:39:37Z",
        "updatedAt" : "2018-06-07T00:39:37Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "5680286f2eac8904ba0ed2fb7a407882d096fe0f",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +204,208 @@     * Config value for parameter (@link #TOPOLOGY_OPTIMIZATION \"topology.optimization\" for enabling topology optimization\n     */\n    public static final String OPTIMIZE = \"all\";\n\n    /**"
  },
  {
    "id" : "4982f04b-4d79-4f2b-9b61-b6135d807300",
    "prId" : 5425,
    "prUrl" : "https://github.com/apache/kafka/pull/5425#pullrequestreview-141170857",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c68bbce8-2b8d-441b-8e70-7075b7e0e87b",
        "parentId" : null,
        "authorId" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "body" : "cc @guozhangwang",
        "createdAt" : "2018-07-27T14:12:44Z",
        "updatedAt" : "2018-08-01T00:34:42Z",
        "lastEditedBy" : "d8c7cf80-a55a-474c-a4f4-f60a9efda52c",
        "tags" : [
        ]
      },
      {
        "id" : "c549480b-fb44-4b27-8c71-cc57f9bd6760",
        "parentId" : "c68bbce8-2b8d-441b-8e70-7075b7e0e87b",
        "authorId" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "body" : "Already checked with Guozhang offline.",
        "createdAt" : "2018-07-27T15:49:01Z",
        "updatedAt" : "2018-08-01T00:34:42Z",
        "lastEditedBy" : "5c21df64-97d8-46ab-9722-a7e9ba1d7c49",
        "tags" : [
        ]
      },
      {
        "id" : "aba0c3e9-9b27-43ef-be6b-6a558ecf2796",
        "parentId" : "c68bbce8-2b8d-441b-8e70-7075b7e0e87b",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "lgtm.",
        "createdAt" : "2018-07-27T17:02:10Z",
        "updatedAt" : "2018-08-01T00:34:42Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "eae84c1396d2828a0a2a4aa9fb571d5f7d39a652",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +103,107 @@ * increase {@link ConsumerConfig#MAX_POLL_INTERVAL_MS_CONFIG} using the following guidance:\n * <pre>\n *     max.poll.interval.ms > max.block.ms\n * </pre>\n *"
  },
  {
    "id" : "1780c581-3d83-4f2a-813f-285c07c0625a",
    "prId" : 5929,
    "prUrl" : "https://github.com/apache/kafka/pull/5929#pullrequestreview-178187806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46f8b1b5-0ebb-4007-bff1-851c9aec0fb4",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Can we update `StreamsConfigTest#consumerConfigMustUseAdminClientConfigForRetries` for this change, too? (And maybe update test name: `consumerConfigShouldContainAdminClientConfigsForRetriesAndRetryBackOffMsWithAdminPrefix`)",
        "createdAt" : "2018-11-23T19:29:17Z",
        "updatedAt" : "2018-11-26T09:09:26Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "e7a633d1-773c-43a8-8a22-e1662c29f630",
        "parentId" : "46f8b1b5-0ebb-4007-bff1-851c9aec0fb4",
        "authorId" : "9facab0e-acaf-4e0e-a0bc-3bd6dc2b3138",
        "body" : "done",
        "createdAt" : "2018-11-26T09:12:35Z",
        "updatedAt" : "2018-11-26T09:12:35Z",
        "lastEditedBy" : "9facab0e-acaf-4e0e-a0bc-3bd6dc2b3138",
        "tags" : [
        ]
      }
    ],
    "commit" : "23dfca52cea0cc94ea5852454a732fa97bf16799",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +981,985 @@        final AdminClientConfig adminClientDefaultConfig = new AdminClientConfig(getClientPropsWithPrefix(ADMIN_CLIENT_PREFIX, AdminClientConfig.configNames()));\n        consumerProps.put(adminClientPrefix(AdminClientConfig.RETRIES_CONFIG), adminClientDefaultConfig.getInt(AdminClientConfig.RETRIES_CONFIG));\n        consumerProps.put(adminClientPrefix(AdminClientConfig.RETRY_BACKOFF_MS_CONFIG), adminClientDefaultConfig.getLong(AdminClientConfig.RETRY_BACKOFF_MS_CONFIG));\n\n        // verify that producer batch config is no larger than segment size, then add topic configs required for creating topics"
  },
  {
    "id" : "20081c40-f199-4a9c-98fa-77afdac2b699",
    "prId" : 6107,
    "prUrl" : "https://github.com/apache/kafka/pull/6107#pullrequestreview-194255235",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67054d57-567c-4773-ac38-71d5c6f7fcfd",
        "parentId" : null,
        "authorId" : "2c9c4dbb-be9d-424e-8d8a-9f3d67f8372b",
        "body" : "don't we usually split params over multiple lines?",
        "createdAt" : "2019-01-18T17:59:13Z",
        "updatedAt" : "2019-01-23T23:34:09Z",
        "lastEditedBy" : "2c9c4dbb-be9d-424e-8d8a-9f3d67f8372b",
        "tags" : [
        ]
      },
      {
        "id" : "f1b47ca6-1864-489c-8ed3-494552a9ee27",
        "parentId" : "67054d57-567c-4773-ac38-71d5c6f7fcfd",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "It's a subjective question. I personally prefer to have one parameter per line. :)",
        "createdAt" : "2019-01-18T18:15:34Z",
        "updatedAt" : "2019-01-23T23:34:09Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "b69175b6-4dc1-4096-8b74-7b66a93b4892",
        "parentId" : "67054d57-567c-4773-ac38-71d5c6f7fcfd",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Yeah I personally prefer only doing that for 3+ parameters and they cannot fit in 150 chars which is what a normal laptop screen would fit.",
        "createdAt" : "2019-01-18T19:45:33Z",
        "updatedAt" : "2019-01-23T23:34:09Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "65e8c144ba2d48adfd7b35fdfc7224106c295254",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +955,959 @@    @SuppressWarnings(\"WeakerAccess\")\n    @Deprecated\n    public Map<String, Object> getConsumerConfigs(final String groupId, final String clientId) {\n        return getMainConsumerConfigs(groupId, clientId);\n    }"
  },
  {
    "id" : "ac3b7745-7535-49c9-b0a9-57ee8fd4552b",
    "prId" : 6107,
    "prUrl" : "https://github.com/apache/kafka/pull/6107#pullrequestreview-194214851",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59db5c04-32ba-4011-993f-5207b27f1499",
        "parentId" : null,
        "authorId" : "2c9c4dbb-be9d-424e-8d8a-9f3d67f8372b",
        "body" : "ditto",
        "createdAt" : "2019-01-18T17:59:20Z",
        "updatedAt" : "2019-01-23T23:34:09Z",
        "lastEditedBy" : "2c9c4dbb-be9d-424e-8d8a-9f3d67f8372b",
        "tags" : [
        ]
      }
    ],
    "commit" : "65e8c144ba2d48adfd7b35fdfc7224106c295254",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +974,978 @@     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public Map<String, Object> getMainConsumerConfigs(final String groupId, final String clientId) {\n        final Map<String, Object> consumerProps = getCommonConsumerConfigs();\n"
  },
  {
    "id" : "554acd36-7d17-47f7-91ad-db7bd13ee94f",
    "prId" : 6673,
    "prUrl" : "https://github.com/apache/kafka/pull/6673#pullrequestreview-234776781",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6028b34d-89f8-4c15-8b08-8d45a3e56a81",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Since StreamsConfig is a public class, any public fields in this class would be exposed to users as well.\r\n\r\nI'm wondering if we can just make it a public field inside `StreamThread` instead?",
        "createdAt" : "2019-05-07T20:55:54Z",
        "updatedAt" : "2019-05-07T22:15:54Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "2eece984-01f8-48f3-8352-93c47d533bd9",
        "parentId" : "6028b34d-89f8-4c15-8b08-8d45a3e56a81",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Sounds good!",
        "createdAt" : "2019-05-07T21:43:22Z",
        "updatedAt" : "2019-05-07T22:15:54Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfd8f9b7ff58c8764390eca4a4faa834f792d742",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +140,144 @@    private final static long EOS_DEFAULT_COMMIT_INTERVAL_MS = 100L;\n\n    public final static int DUMMY_THREAD_INDEX = 1;\n\n    /**"
  },
  {
    "id" : "ecbc8877-4c14-4ae4-bf25-3ca45db21bb6",
    "prId" : 7279,
    "prUrl" : "https://github.com/apache/kafka/pull/7279#pullrequestreview-283777150",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50bd7999-f3a9-4c6e-a7ab-a1d51f948bc2",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "I implemented this as defined in KIP-444. Now I am a bit concerned about the maintenance of future versions here. Thus, I would like to propose the following:\r\n- use values `current`, `before 2.4` (or `<2.4`, or `0.10.0-2.3`). \r\n- each time a change is added that breaks compatibility, we would add a value `between 2.4 and x.y` (or `>=2.4, <x.y`, or `2.4-(x.y-1))`).\r\n- default value would always stay `current`\r\nWDYT?",
        "createdAt" : "2019-09-02T13:44:54Z",
        "updatedAt" : "2019-09-11T07:37:11Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "5ed3df17-8ed2-471b-a028-98870f196676",
        "parentId" : "50bd7999-f3a9-4c6e-a7ab-a1d51f948bc2",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "In addition the test burden increases, because in integration tests for metrics we need to test all ten versions.",
        "createdAt" : "2019-09-03T13:15:03Z",
        "updatedAt" : "2019-09-11T07:37:11Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "fe20aac6-bd23-476e-b068-fab1fa7fe9d4",
        "parentId" : "50bd7999-f3a9-4c6e-a7ab-a1d51f948bc2",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "+100",
        "createdAt" : "2019-09-04T17:03:09Z",
        "updatedAt" : "2019-09-11T07:37:11Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "697fda05-6a92-4173-93d5-e6bf74c2816c",
        "parentId" : "50bd7999-f3a9-4c6e-a7ab-a1d51f948bc2",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Yeah, this is crazy. Also, think of the burden on users: we shouldn't offer different configs that result in no differences.\r\n\r\nLet's revisit the KIP discussion. We should only offer `current` (or `latest` is a common version \"number\" for this concept), and then only add version ranges after the fact. As you say, we're breaking compatibility in 2.4, so we need to add a `0.10-2.3` option to pin older configs. If we break it again in 7.0, we'd add `2.4-6.8`.",
        "createdAt" : "2019-09-04T17:30:54Z",
        "updatedAt" : "2019-09-11T07:37:11Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "f5f904fc303569f78abdb8f1a55425976d8050b3",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +602,606 @@                        METRICS_0100_TO_23,\n                        METRICS_LATEST\n                    ),\n                    Importance.LOW,\n                    BUILT_IN_METRICS_VERSION_DOC)"
  },
  {
    "id" : "896b8c30-4247-4bd3-a56b-5b26047e5f96",
    "prId" : 7321,
    "prUrl" : "https://github.com/apache/kafka/pull/7321#pullrequestreview-287102563",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b4b62ef-4f64-42cd-848f-d66ef613c84e",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "They are not added as allowed values of the UPGRADE_FROM_CONFIG yet, is it intentional?",
        "createdAt" : "2019-09-11T18:13:40Z",
        "updatedAt" : "2019-09-24T05:45:47Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "f30b68c3-b656-4afe-97df-20f39cdd86d0",
        "parentId" : "1b4b62ef-4f64-42cd-848f-d66ef613c84e",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Not exactly, I guess that belongs in this PR as well. Will add",
        "createdAt" : "2019-09-11T22:12:56Z",
        "updatedAt" : "2019-09-24T05:45:47Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3935aa6be7cc55911bb4e24332557df24d01f18",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +256,260 @@     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public static final String UPGRADE_FROM_20 = \"2.0\";\n\n    /**"
  },
  {
    "id" : "5c22b712-efd3-42c0-a764-3c801fb7d40c",
    "prId" : 7321,
    "prUrl" : "https://github.com/apache/kafka/pull/7321#pullrequestreview-291484748",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02cb5a74-f3bd-4b3f-bf7a-319f382678c3",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Do we want to create an enum field for `upgrade from` so that we don't need to do repetitive copy-and-paste?",
        "createdAt" : "2019-09-19T16:48:03Z",
        "updatedAt" : "2019-09-24T05:45:47Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "c50d3e52-fddc-4d54-8a7a-0ec001581cc6",
        "parentId" : "02cb5a74-f3bd-4b3f-bf7a-319f382678c3",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Probably but I'll maybe save that for another PR for now",
        "createdAt" : "2019-09-22T00:35:20Z",
        "updatedAt" : "2019-09-24T05:45:47Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3935aa6be7cc55911bb4e24332557df24d01f18",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +274,278 @@     */\n    @SuppressWarnings(\"WeakerAccess\")\n    public static final String UPGRADE_FROM_23 = \"2.3\";\n\n    /**"
  },
  {
    "id" : "c4f9bf8a-3f2c-41a5-99d3-6ee59e946779",
    "prId" : 7969,
    "prUrl" : "https://github.com/apache/kafka/pull/7969#pullrequestreview-344921674",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48390e76-7235-41d7-9d59-bb087bb09081",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "qq - what does this mean for users that have enabled auto topic creation? Although it's not a best practice, this seems it could lead to unexpected behavior.",
        "createdAt" : "2020-01-16T14:59:28Z",
        "updatedAt" : "2020-01-23T22:13:21Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "b8e07084-36ae-4fb2-86c5-58de64227396",
        "parentId" : "48390e76-7235-41d7-9d59-bb087bb09081",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Do you mean on the server side or on the client? I agree we should consider checking for this in the user supplied configs before overriding it, but I think the reasonable _default_ behavior is to disable it (by client config, since it's enabled server-side by default).\r\nIf users really do want it then it's on them to enable it through the main consumer config. On the other hand, prior to this it was effectively disabled  permanently by the workaround of using pattern subscription. WDYT?",
        "createdAt" : "2020-01-16T20:03:37Z",
        "updatedAt" : "2020-01-23T22:13:21Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "00cf8131-02dd-418f-9cee-269a6ce5361b",
        "parentId" : "48390e76-7235-41d7-9d59-bb087bb09081",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Yeah, that SGTM I forgot that auto topic creation is the default server-side.",
        "createdAt" : "2020-01-18T03:11:15Z",
        "updatedAt" : "2020-01-23T22:13:21Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ba3ee4e5849cae6c81d5b229846e0507630647f",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1066,1070 @@\n        // disable auto topic creation\n        consumerProps.put(ConsumerConfig.ALLOW_AUTO_CREATE_TOPICS_CONFIG, \"false\");\n\n        // add admin retries configs for creating topics"
  },
  {
    "id" : "dc987a1b-cfd0-43d0-a727-81fbed06741c",
    "prId" : 8282,
    "prUrl" : "https://github.com/apache/kafka/pull/8282#pullrequestreview-377206018",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10a64e3a-d68c-49e6-b236-40dce7c7bd1c",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "req: Please add `atLeast(1)` validator here and the corresponding unit test. Similar applies also to the other configs.  ",
        "createdAt" : "2020-03-18T20:21:17Z",
        "updatedAt" : "2020-03-19T01:50:45Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddc5cfa0fe78cd363ffaf21cb97ac6a368967506",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +655,659 @@            .define(BALANCE_FACTOR_CONFIG,\n                    Type.INT,\n                    1,\n                    atLeast(1),\n                    Importance.LOW,"
  },
  {
    "id" : "9888cf05-4b2b-40ab-bfdc-588992130733",
    "prId" : 8318,
    "prUrl" : "https://github.com/apache/kafka/pull/8318#pullrequestreview-378056759",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67c6050e-6e4c-45e5-9084-b282ebf0cfe5",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "This is a side improvement: add `transactional.id` to non-configurable parameters as we overwrite it anyway",
        "createdAt" : "2020-03-19T20:09:33Z",
        "updatedAt" : "2020-03-21T18:49:58Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "59154ab4ee7c4f24706911fb37b8118510d1a3a1",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +565,569 @@            ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG,\n            ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION,\n            ProducerConfig.TRANSACTIONAL_ID_CONFIG\n        };\n"
  },
  {
    "id" : "74519812-f7ca-4193-a09d-39c398795aa7",
    "prId" : 8318,
    "prUrl" : "https://github.com/apache/kafka/pull/8318#pullrequestreview-378255641",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e07f42e-6e91-48cf-a37b-4e5dea25e34b",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Seems we could also refactor out a helper for this check as well?",
        "createdAt" : "2020-03-20T04:21:10Z",
        "updatedAt" : "2020-03-21T18:49:58Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "309523cb-791e-4646-ba27-351f1964568a",
        "parentId" : "4e07f42e-6e91-48cf-a37b-4e5dea25e34b",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Maybe -- I just extracted to other part to make checkstyle pass :)",
        "createdAt" : "2020-03-20T06:38:18Z",
        "updatedAt" : "2020-03-21T18:49:58Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "59154ab4ee7c4f24706911fb37b8118510d1a3a1",
    "line" : 150,
    "diffHunk" : "@@ -1,1 +1028,1032 @@        final String eosMessage = PROCESSING_GUARANTEE_CONFIG + \" is set to \" + getString(PROCESSING_GUARANTEE_CONFIG) + \". Hence, \";\n\n        for (final String config: nonConfigurableConfigs) {\n            if (clientProvidedProps.containsKey(config)) {\n"
  },
  {
    "id" : "5a28b283-e273-4271-b3a3-609e3f7a0b12",
    "prId" : 8322,
    "prUrl" : "https://github.com/apache/kafka/pull/8322#pullrequestreview-379837092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d98882b-c44e-4d5d-bc7d-b2fcc7b2ba30",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Side note: We actually have `NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS` (similar for producer and EOS). I am wondering, if we should add a similar pattern for the restore and global consumer (might be good enough as a follow up PR though; or at least create a ticket for now?). This include logging a WARNING if a user tries to set it?",
        "createdAt" : "2020-03-23T19:19:56Z",
        "updatedAt" : "2020-03-23T19:19:56Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "c7a9b29c-26aa-472e-a6f5-cba0b15544e5",
        "parentId" : "0d98882b-c44e-4d5d-bc7d-b2fcc7b2ba30",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Yeah I think that's a good idea, can be done in another PR.",
        "createdAt" : "2020-03-23T21:30:44Z",
        "updatedAt" : "2020-03-23T21:32:26Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "160acd197340ef183ea5af15f34ef9790a67b70b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +1201,1205 @@        baseConsumerProps.remove(ConsumerConfig.GROUP_ID_CONFIG);\n        // no need to set instance id for a restore consumer\n        baseConsumerProps.remove(ConsumerConfig.GROUP_INSTANCE_ID_CONFIG);\n\n        // add client id with stream client id prefix"
  },
  {
    "id" : "25c5de6d-aaab-4d85-9d39-0b5a7751ad26",
    "prId" : 8496,
    "prUrl" : "https://github.com/apache/kafka/pull/8496#pullrequestreview-403766207",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0dd62985-e665-4231-9ba4-b4d9d4c2bdb4",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "nit: Could you add the original comment explaining why we set it to smaller value too?",
        "createdAt" : "2020-04-30T18:18:04Z",
        "updatedAt" : "2020-05-01T21:39:59Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "346c7b4fe34cf6870cd6f6d28365d10ef39a141d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +830,834 @@        tempProducerDefaultOverrides.put(ProducerConfig.LINGER_MS_CONFIG, \"100\");\n        // Reduce the transaction timeout for quicker pending offset expiration on broker side.\n        tempProducerDefaultOverrides.put(ProducerConfig.TRANSACTION_TIMEOUT_CONFIG, 10000);\n        PRODUCER_DEFAULT_OVERRIDES = Collections.unmodifiableMap(tempProducerDefaultOverrides);\n    }"
  },
  {
    "id" : "37f94012-3df0-43dd-b0bd-9f4ccb03b01b",
    "prId" : 8596,
    "prUrl" : "https://github.com/apache/kafka/pull/8596#pullrequestreview-405456212",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa0bd48e-6f39-403a-bd4e-ac2fd3b040e3",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Minor detail, but we reserve the term \"probing rebalance\" for the KIP-441 type of rebalances, while now this is used to schedule any kind of followup rebalance",
        "createdAt" : "2020-05-02T00:24:15Z",
        "updatedAt" : "2020-05-12T01:28:53Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "7ed22d42-922e-4da0-a0b0-274227e4fe72",
        "parentId" : "fa0bd48e-6f39-403a-bd4e-ac2fd3b040e3",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Did you want to change the config key as well? I think this should be ok, since it's only used to pass state from one object to another within the same instance, so there should be no compatibility concern.",
        "createdAt" : "2020-05-04T20:24:10Z",
        "updatedAt" : "2020-05-12T01:28:53Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "ad6843e9-b098-40e7-96b3-c0a088e51f42",
        "parentId" : "fa0bd48e-6f39-403a-bd4e-ac2fd3b040e3",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Are you asking if this change was intentional, or are you referring to a different config key? If the former, note that this internal config was only added a few PRs ago so there would be no compatibility concerns even if it wasn't confined to a single instance",
        "createdAt" : "2020-05-04T20:35:57Z",
        "updatedAt" : "2020-05-12T01:28:53Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "98ccc834-0a06-4e65-b169-a466d0b515cc",
        "parentId" : "fa0bd48e-6f39-403a-bd4e-ac2fd3b040e3",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "```suggestion\r\n        public static final String NEXT_SCHEDULED_REBALANCE_MS = \"__next.scheduled.rebalance.ms__\";\r\n```\r\n\r\nThat's what I meant (just remembered I can use the change recommendation thingy).",
        "createdAt" : "2020-05-04T20:47:46Z",
        "updatedAt" : "2020-05-12T01:28:53Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "48e84d45-781f-4abb-acec-20c0e510aa60",
        "parentId" : "fa0bd48e-6f39-403a-bd4e-ac2fd3b040e3",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "It's a very minor question, I only ask because you were trying to make everything consistent here.",
        "createdAt" : "2020-05-04T20:48:44Z",
        "updatedAt" : "2020-05-12T01:28:53Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "46030133-d4b8-4205-896f-57c23066dd51",
        "parentId" : "fa0bd48e-6f39-403a-bd4e-ac2fd3b040e3",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Oh, duh, I overlooked that. Guess I was just going for eventual consistency here",
        "createdAt" : "2020-05-05T02:01:35Z",
        "updatedAt" : "2020-05-12T01:28:53Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "0966ea5d6cc1868e64ffdffaa157769f4873d34a",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +870,874 @@        public static final String STREAMS_ADMIN_CLIENT = \"__streams.admin.client.instance__\";\n        public static final String ASSIGNMENT_ERROR_CODE = \"__assignment.error.code__\";\n        public static final String NEXT_SCHEDULED_REBALANCE_MS = \"__next.probing.rebalance.ms__\";\n        public static final String TIME = \"__time__\";\n    }"
  }
]