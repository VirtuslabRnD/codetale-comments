[
  {
    "id" : "a41029cb-888d-4759-ba57-1edeb767c38e",
    "prId" : 4919,
    "prUrl" : "https://github.com/apache/kafka/pull/4919#pullrequestreview-115336439",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77fa8c57-bb7c-4fd4-ae18-39489a91ebd7",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is moved from TimeWindowedStreamImpl, just to be consistent with the other const functions.",
        "createdAt" : "2018-04-25T20:12:05Z",
        "updatedAt" : "2018-05-08T00:27:15Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "52b7257a5b75a831530a76548620be9f546948a7",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +48,52 @@    };\n\n    final Initializer<V> reduceInitializer = new Initializer<V>() {\n        @Override\n        public V apply() {"
  },
  {
    "id" : "1f3ab923-0ac3-4156-bc8b-57cf12176af5",
    "prId" : 5741,
    "prUrl" : "https://github.com/apache/kafka/pull/5741#pullrequestreview-161735640",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27427912-1210-44c0-b933-02da2ae125c3",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Processors are always generically typed with their *input* `K` and `V` types. This was incorrectly using the type of the aggregate as the input value type.",
        "createdAt" : "2018-10-04T17:53:03Z",
        "updatedAt" : "2018-10-04T21:38:59Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "79ded18384601459c38b700fc2d157e1f92704af",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +85,89 @@            parentNode = repartitionNode;\n        }\n        final StatefulProcessorNode.StatefulProcessorNodeBuilder<K, V> statefulProcessorNodeBuilder = StatefulProcessorNode.statefulProcessorNodeBuilder();\n\n        final ProcessorParameters<K, V> processorParameters = new ProcessorParameters<>(aggregateSupplier, aggFunctionName);"
  },
  {
    "id" : "1e6d608f-dc85-444a-8889-8972bed963a9",
    "prId" : 5779,
    "prUrl" : "https://github.com/apache/kafka/pull/5779#pullrequestreview-182832213",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cc0c28e-bae0-4c4b-91cc-a283fc870a2a",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I think we should make sure (to avoid bugs), that `queryableStoreName == null || queryableStoreName.equals(storeBuilder.name()`) -- can we add a check? Not sure if this class is the best place for it? But maybe it's also good to have multiple checks in place?",
        "createdAt" : "2018-12-06T23:11:01Z",
        "updatedAt" : "2018-12-09T06:42:30Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "bc8f3575-c504-4586-9e73-1f7a341c8b7b",
        "parentId" : "7cc0c28e-bae0-4c4b-91cc-a283fc870a2a",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I thought about that, and I think it is fine since the call trace is only in two folds:\r\n\r\n1) MaterializedInternal.queryableName() logic, which always based on storeName().\r\n2) StoreBuilder#name()\r\n\r\nBut I can definitely add an assertion inside the call as it is not on the critical path either. We've never done that before but I cannot think of a good reason not to.",
        "createdAt" : "2018-12-07T01:29:28Z",
        "updatedAt" : "2018-12-09T06:42:30Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "48973f56-e6a8-4786-bbdb-5cabcb3ef349",
        "parentId" : "7cc0c28e-bae0-4c4b-91cc-a283fc870a2a",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "It's a matter of code style (I personally like assertions, but many people don't). Do we run test with assertions enabled? If not, it does not make sense to add one.",
        "createdAt" : "2018-12-07T19:09:42Z",
        "updatedAt" : "2018-12-09T06:42:30Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d02ad5bab3f2cf4ae2c11457e8dfe099d3a4b12",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +101,105 @@                                valSerde,\n                                sourceName.equals(this.name) ? sourceNodes : Collections.singleton(sourceName),\n                                queryableStoreName,\n                                aggregateSupplier,\n                                statefulProcessorNode,"
  }
]