[
  {
    "id" : "8785c337-0ce5-4f1f-a40f-c4f92d8c5e69",
    "prId" : 6631,
    "prUrl" : "https://github.com/apache/kafka/pull/6631#pullrequestreview-230434477",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b71589ea-b24e-4292-aa2a-9aa665ed4fa2",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "This method creates a sensor and corresponding metrics to record when a task closes. See the other methods in this class for the other built-in thread-level sensors.",
        "createdAt" : "2019-04-25T03:02:06Z",
        "updatedAt" : "2019-05-20T06:37:39Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce9250c078e701030e104f75c156a0dbf4634196",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +84,88 @@    }\n\n    public static Sensor closeTaskSensor(final StreamsMetricsImpl streamsMetrics) {\n        final Sensor closeTaskSensor = streamsMetrics.threadLevelSensor(CLOSE_TASK, RecordingLevel.INFO);\n        addInvocationRateAndCount(closeTaskSensor,"
  },
  {
    "id" : "9b4f22e3-f6ad-4317-8ece-a654c2a4aecb",
    "prId" : 6631,
    "prUrl" : "https://github.com/apache/kafka/pull/6631#pullrequestreview-245135380",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "689a0dce-33eb-45bd-aa02-a9e1b57db4e0",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I'm a bit confused with this `commitOverTasksSensor` and `commitSensor`: they are both on thread-level, and the `commitOverTasksSensor` seems only be used as the parent of task-level `commitSensor`.\r\n\r\nThe parent of it was defined as task-level sensor still, while the only difference is that the `taskId` tag is `all`. Is there any changes intentional here?",
        "createdAt" : "2019-05-23T00:05:16Z",
        "updatedAt" : "2019-05-23T00:06:04Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "b8577f60-b12d-4641-b325-3797f7c4e805",
        "parentId" : "689a0dce-33eb-45bd-aa02-a9e1b57db4e0",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "@guozhangwang, I checked `commitOverTasksSensor` and `commitSensor`. First of all, I have not changed anything in this PR regarding the public interface, i.e. tags and groups. \r\n\r\nFrom an implementation point of view, in this PR `commitOverTasksSensor` is created and added to the metrics on thread-level, which I think is better as the current implementation that relies on the idempotency of adding a sensor and adds each time a task is created (cf. https://github.com/apache/kafka/blob/b042b36674f0bd8046f0229c96e0b8cf99554b2b/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamTask.java#L99-L116).\r\n\r\nHowever, now I am also a bit confused about `commitSensor` and `commitOverTasksSensor`. `commitSensor` measures commits on thread-level whereas `commitOverTasksSensor` aggregates measurements of commits on task-level. Hence, `commitSensor` approximately subsumes `commitOverTasksSensor`. Furthermore, `commitSensor` does also measure commits of stand-by tasks. Looking at KIP-444, we will get rid of `commitOverTasksSensor`.",
        "createdAt" : "2019-06-03T13:12:25Z",
        "updatedAt" : "2019-06-03T13:12:26Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "9656d9a6-b56c-4797-a44a-1cd288457997",
        "parentId" : "689a0dce-33eb-45bd-aa02-a9e1b57db4e0",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Yeah I know that KIP-444 would only maintain the `commitSensor` on thread-level, and on task-level, and these two would not have a parent-children relationship any more. What I'm just confused is if we have ever changed any protocol in this PR. As long as nothing is changed I think it is okay -- and probably we just had some old error code which we are going to get rid of in KIP-444 anyways.\r\n\r\nLet me do a double check and if that confirms my conjecture, we can merge it as is.",
        "createdAt" : "2019-06-03T21:29:08Z",
        "updatedAt" : "2019-06-03T21:29:08Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ce9250c078e701030e104f75c156a0dbf4634196",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +161,165 @@    }\n\n    public static Sensor commitOverTasksSensor(final StreamsMetricsImpl streamsMetrics) {\n        final Sensor commitOverTasksSensor = streamsMetrics.threadLevelSensor(COMMIT, Sensor.RecordingLevel.DEBUG);\n        final Map<String, String> tagMap = streamsMetrics.threadLevelTagMap(TASK_ID_TAG, ALL_TASKS);"
  },
  {
    "id" : "562b00a9-ebee-4b3b-84e0-f6dd013e6b2c",
    "prId" : 7416,
    "prUrl" : "https://github.com/apache/kafka/pull/7416#pullrequestreview-294840947",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e59ca4e7-58cf-4bff-b9ea-734c00d270b3",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "The `threadId` needs to be passed to those methods since `StreamsMetricsImpl` was moved to `KafkaStreams` and cannot contain the thread ID anymore.",
        "createdAt" : "2019-09-30T09:14:50Z",
        "updatedAt" : "2019-10-04T08:23:54Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab3c0436cf659dd6f76b2b6b5360d327bad385bb",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +73,77 @@    private static final String PUNCTUATE_LATENCY = PUNCTUATE + LATENCY_SUFFIX;\n\n    public static Sensor createTaskSensor(final String threadId, final StreamsMetricsImpl streamsMetrics) {\n        final Sensor createTaskSensor = streamsMetrics.threadLevelSensor(threadId, CREATE_TASK, RecordingLevel.INFO);\n        addInvocationRateAndCountToSensor("
  },
  {
    "id" : "b17c9972-b564-4e8d-802e-c9ace6860036",
    "prId" : 7474,
    "prUrl" : "https://github.com/apache/kafka/pull/7474#pullrequestreview-299618070",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "351f7685-58af-40cc-8eca-4b4cce0c5630",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "We have two overloaded `addInvocationRateAndCountToSensor` in `StreamsMetricsImpl`, and I feel using the one that constructs description as\r\n\r\n```\r\n            \"The average per-second number of \" + operation,\r\n            \"The total number of \" + operation\r\n```\r\n\r\nis sufficient. Why do we duplicate the const string here and use the other overload?",
        "createdAt" : "2019-10-09T18:06:15Z",
        "updatedAt" : "2019-10-18T14:55:41Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "72d8921c-6a47-43cf-8f88-d2e765033232",
        "parentId" : "351f7685-58af-40cc-8eca-4b4cce0c5630",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "IMO we are more flexible regarding the descriptions. If one day we decide to change the description for one metric but not for the others that are added by calling `addInvocationRateAndCountToSensor()`, it is easier. With the new overload the descriptions are basically constructed on a higher level. In the long run, I would like to get rid of the overload that constructs the descriptions. In the end, duplications should not be an issue because we just construct the descriptions elsewhere.  ",
        "createdAt" : "2019-10-09T18:49:17Z",
        "updatedAt" : "2019-10-18T14:55:41Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "021a1c89fa4ca06714a05a6e388d75bf5fded2a7",
    "line" : 269,
    "diffHunk" : "@@ -1,1 +212,216 @@                                                       final RecordingLevel recordingLevel,\n                                                       final StreamsMetricsImpl streamsMetrics) {\n        final Sensor sensor = streamsMetrics.threadLevelSensor(threadId, metricName, recordingLevel);\n        addInvocationRateAndCountToSensor(\n            sensor,"
  },
  {
    "id" : "2e133715-ee7c-455f-8e20-25dc16670935",
    "prId" : 7474,
    "prUrl" : "https://github.com/apache/kafka/pull/7474#pullrequestreview-299618070",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "afc71757-b806-41d6-8d1f-3660a2acdb03",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Can we use `invocationRateAndCountAndAvgAndMaxLatencySensor` here?",
        "createdAt" : "2019-10-09T18:08:51Z",
        "updatedAt" : "2019-10-18T14:55:41Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "714a434c-5c15-4480-a0af-089ef2fef531",
        "parentId" : "afc71757-b806-41d6-8d1f-3660a2acdb03",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "No, because the `tagMap` is a task-level tag map and not a thread-level tag map.",
        "createdAt" : "2019-10-09T18:43:58Z",
        "updatedAt" : "2019-10-18T14:55:41Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "021a1c89fa4ca06714a05a6e388d75bf5fded2a7",
    "line" : 239,
    "diffHunk" : "@@ -1,1 +182,186 @@                                                         final StreamsMetricsImpl streamsMetrics) {\n        if (streamsMetrics.version() == Version.FROM_100_TO_24) {\n            final Sensor commitOverTasksSensor =\n                streamsMetrics.threadLevelSensor(threadId, COMMIT, Sensor.RecordingLevel.DEBUG);\n            final Map<String, String> tagMap = streamsMetrics.taskLevelTagMap(threadId, ROLLUP_VALUE);"
  }
]