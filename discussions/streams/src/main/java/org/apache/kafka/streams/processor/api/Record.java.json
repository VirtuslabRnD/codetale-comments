[
  {
    "id" : "abb94648-d054-41fc-9372-c1b84e8dadc4",
    "prId" : 9361,
    "prUrl" : "https://github.com/apache/kafka/pull/9361#pullrequestreview-500554881",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9fc45f9f-8bbe-407a-bcd4-9c5a334926eb",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "The new Record class proposed in the KIP.",
        "createdAt" : "2020-10-01T17:25:00Z",
        "updatedAt" : "2020-10-02T15:50:27Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8de75f6f16cf8bdcccbcb1bc1fc0a11dd40c1d1",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +34,38 @@ * @param <V> The type of the value\n */\npublic class Record<K, V> {\n    private final K key;\n    private final V value;"
  },
  {
    "id" : "784710a0-b57e-44bf-99f9-e89d8239d601",
    "prId" : 9361,
    "prUrl" : "https://github.com/apache/kafka/pull/9361#pullrequestreview-500824620",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4740e344-2713-4245-bd2c-eed69d0f78e9",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Note: each time we create a new Record, we copy the headers. This is an improvement over the current situation where there's no mutability barriers across the whole subtopology, so changes to headers in one processor can have unexpected effects on other processors that are very far away in the dependency diagram.\r\n\r\nHowever, it doesn't completely solve the problem: changes in children can still be visible to parents and siblings. @mjsax and I discussed an alternative option of providing a completely immutable implementation (copy on write) of Headers as a complete solution. But it also seems to be a pretty severe performance penalty. Instead, perhaps we can just document a safe pattern. E.g.,\r\n```\r\nrecord = new Record(...)\r\ncontext.forward(record, \"childA\")\r\nrecord.headers().add(new header)\r\n// or\r\nrecord.withHeaders(record.headers().add(new header))\r\ncontext.forward(record, \"childB\")\r\n```\r\nis unsafe because childA may modify the headers, affecting both the parent and childB. Instead, you should do something like:\r\n\r\n```\r\nrecord1 = new Record(...)\r\nrecord2 = new Record(...)\r\nrecord2.headers().add(new header)\r\ncontext.forward(record1, \"childA\")\r\ncontext.forward(record2, \"childB\")\r\n```\r\nNow, the headers for both children are completely independent objects.",
        "createdAt" : "2020-10-01T20:22:25Z",
        "updatedAt" : "2020-10-02T15:50:27Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "e2645a2a-d6fc-48a9-a0e5-38dba6fc36d8",
        "parentId" : "4740e344-2713-4245-bd2c-eed69d0f78e9",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "That looks reasonable to me. More generally I'd suggest to document either in this class or in the `forward` class what side-effects the user need to consider if they decided to reuse the object passed in as parameters and mutate its fields / forward to downstream. And as long as we do that I feel this would be okay.",
        "createdAt" : "2020-10-01T23:40:49Z",
        "updatedAt" : "2020-10-02T15:50:27Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "f92724c6-44f8-48eb-b242-0cd32b6ab2c9",
        "parentId" : "4740e344-2713-4245-bd2c-eed69d0f78e9",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Thanks. I like the idea of putting it in forward. Maybe with a short mention here as well.",
        "createdAt" : "2020-10-02T02:11:43Z",
        "updatedAt" : "2020-10-02T15:50:27Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8de75f6f16cf8bdcccbcb1bc1fc0a11dd40c1d1",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +65,69 @@        }\n        this.timestamp = timestamp;\n        this.headers = new RecordHeaders(headers);\n    }\n"
  },
  {
    "id" : "b197e5b7-7a94-4421-a7a9-f971b81aff90",
    "prId" : 9361,
    "prUrl" : "https://github.com/apache/kafka/pull/9361#pullrequestreview-500554881",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c73bd2dd-d1fb-4fe1-82de-02282aa63a6c",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "We used to check this only in SinkNode, but it seems better to fail fast since we actually have the opportunity to do so now.",
        "createdAt" : "2020-10-01T21:32:44Z",
        "updatedAt" : "2020-10-02T15:50:27Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8de75f6f16cf8bdcccbcb1bc1fc0a11dd40c1d1",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +63,67 @@                new IllegalArgumentException(\"Timestamp may not be negative. Got: \" + timestamp)\n            );\n        }\n        this.timestamp = timestamp;\n        this.headers = new RecordHeaders(headers);"
  },
  {
    "id" : "502c6e88-7a6d-44c7-addc-efc561c68521",
    "prId" : 9361,
    "prUrl" : "https://github.com/apache/kafka/pull/9361#pullrequestreview-500840309",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "515db06a-7493-4f35-9993-16d57ad17226",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "nit: see my other comment above, maybe we can leave some guidance on when it is preferable to reuse the Record with mutable fields than creating a new Record object?",
        "createdAt" : "2020-10-01T23:31:59Z",
        "updatedAt" : "2020-10-02T15:50:27Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "96bce3ba-757e-4ba9-ba2e-284d4e5ff453",
        "parentId" : "515db06a-7493-4f35-9993-16d57ad17226",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Sounds good.",
        "createdAt" : "2020-10-02T03:19:18Z",
        "updatedAt" : "2020-10-02T15:50:27Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8de75f6f16cf8bdcccbcb1bc1fc0a11dd40c1d1",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +29,33 @@ *\n * This class is immutable, though the objects referenced in the attributes of this class\n * may themselves be mutable.\n *\n * @param <K> The type of the key"
  },
  {
    "id" : "9625ee14-562d-448d-bc81-eec6bdf0dc84",
    "prId" : 9396,
    "prUrl" : "https://github.com/apache/kafka/pull/9396#pullrequestreview-505010286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fbc12384-d11a-4186-a920-451e687eefae",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "added for quality-of-life debugging",
        "createdAt" : "2020-10-08T17:50:02Z",
        "updatedAt" : "2020-10-08T18:12:54Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "428c6f32f056fd791f8d676a5febc7f5f8de654f",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +167,171 @@\n    @Override\n    public String toString() {\n        return \"Record{\" +\n            \"key=\" + key +"
  },
  {
    "id" : "a004b64a-349c-4572-a817-95dd6afdf7a4",
    "prId" : 9396,
    "prUrl" : "https://github.com/apache/kafka/pull/9396#pullrequestreview-505010286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d79710f3-c3cd-481c-b3f8-b8852893ab64",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "added for easier assertions in unit tests",
        "createdAt" : "2020-10-08T17:50:16Z",
        "updatedAt" : "2020-10-08T18:12:54Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "428c6f32f056fd791f8d676a5febc7f5f8de654f",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +177,181 @@\n    @Override\n    public boolean equals(final Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;"
  }
]