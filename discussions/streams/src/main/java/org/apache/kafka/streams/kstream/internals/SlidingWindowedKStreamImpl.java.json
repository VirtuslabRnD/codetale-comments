[
  {
    "id" : "c296b2e5-e206-4bd0-90a4-051a7c6c4c93",
    "prId" : 9039,
    "prUrl" : "https://github.com/apache/kafka/pull/9039#pullrequestreview-457023291",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e746767f-0d99-4e24-87cb-eba1eff60c31",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Can we add an `else` here with `builder.withCachingDisabled()`? It doesn't make a difference logically, it just seems easier to understand (again, also in `SlidingWindowedCogroupedKStreamImpl`)",
        "createdAt" : "2020-07-29T23:48:39Z",
        "updatedAt" : "2020-08-31T22:19:06Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "de97db6cf39eb34eab0207f3cc45a5085317b2a4",
    "line" : 229,
    "diffHunk" : "@@ -1,1 +227,231 @@        } else {\n            builder.withCachingDisabled();\n        }\n        return builder;\n    }"
  },
  {
    "id" : "cb0d0809-ae44-460f-8399-794a7a48f779",
    "prId" : 9039,
    "prUrl" : "https://github.com/apache/kafka/pull/9039#pullrequestreview-460878574",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c49f563-fa93-466e-9414-8fdbaca95e59",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "why `* 2` ?",
        "createdAt" : "2020-08-04T01:03:19Z",
        "updatedAt" : "2020-08-31T22:19:06Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "defabbd8-622b-4dd7-af58-a63b140d8a06",
        "parentId" : "8c49f563-fa93-466e-9414-8fdbaca95e59",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "@lct45 With regard to above: the error message to does align to the required minimum retention time. It says `must be no smaller than its window time difference plus the grace period.`...",
        "createdAt" : "2020-08-04T14:39:00Z",
        "updatedAt" : "2020-08-31T22:19:06Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "de97db6cf39eb34eab0207f3cc45a5085317b2a4",
    "line" : 200,
    "diffHunk" : "@@ -1,1 +198,202 @@            // large retention time to ensure that all existing windows needed to create new sliding windows can be accessed\n            // earliest window start time we could need to create corresponding right window would be recordTime - 2 * timeDifference\n            if ((windows.timeDifferenceMs() * 2 + windows.gracePeriodMs()) > retentionPeriod) {\n                throw new IllegalArgumentException(\"The retention period of the window store \"\n                        + name + \" must be no smaller than 2 * time difference plus the grace period.\""
  },
  {
    "id" : "dcc71e38-8660-4cb1-84a0-adf82aa97273",
    "prId" : 9039,
    "prUrl" : "https://github.com/apache/kafka/pull/9039#pullrequestreview-461257792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a3f0670-c333-46de-a2d0-3d1968321bde",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "why `* 2` ?",
        "createdAt" : "2020-08-04T01:03:51Z",
        "updatedAt" : "2020-08-31T22:19:06Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "d364e27f-67fd-4712-8547-c03aee10e239",
        "parentId" : "9a3f0670-c333-46de-a2d0-3d1968321bde",
        "authorId" : "114424ac-2f76-47ba-b653-f85692b08607",
        "body" : "We want to be able to find the furthest window for which we can create a corresponding right window, so for any record the furthest window we will ever need will start at `timestamp - 2 * timeDifference`, but we will need to have these around to calculate new windows, hence the longer retention time.",
        "createdAt" : "2020-08-04T14:10:57Z",
        "updatedAt" : "2020-08-31T22:19:06Z",
        "lastEditedBy" : "114424ac-2f76-47ba-b653-f85692b08607",
        "tags" : [
        ]
      },
      {
        "id" : "8f09e938-4a57-4718-b967-d5dbba6877b8",
        "parentId" : "9a3f0670-c333-46de-a2d0-3d1968321bde",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Ack. Makes sense. Might be worth to add a comment why we need an \"unexpected\" large retention time.",
        "createdAt" : "2020-08-04T14:37:23Z",
        "updatedAt" : "2020-08-31T22:19:06Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "b56dc1c3-e261-4b71-bdc7-bfa11ed8cd8e",
        "parentId" : "9a3f0670-c333-46de-a2d0-3d1968321bde",
        "authorId" : "114424ac-2f76-47ba-b653-f85692b08607",
        "body" : "Good catch, will do",
        "createdAt" : "2020-08-04T14:53:23Z",
        "updatedAt" : "2020-08-31T22:19:06Z",
        "lastEditedBy" : "114424ac-2f76-47ba-b653-f85692b08607",
        "tags" : [
        ]
      },
      {
        "id" : "670afd64-ae3f-4aff-8461-87155adcc45a",
        "parentId" : "9a3f0670-c333-46de-a2d0-3d1968321bde",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "+1 to add a comment on the extra retention (here and in SlidingWindowedCoGroupedKStreamImpl)",
        "createdAt" : "2020-08-05T00:45:26Z",
        "updatedAt" : "2020-08-31T22:19:06Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "de97db6cf39eb34eab0207f3cc45a5085317b2a4",
    "line" : 196,
    "diffHunk" : "@@ -1,1 +194,198 @@        WindowBytesStoreSupplier supplier = (WindowBytesStoreSupplier) materialized.storeSupplier();\n        if (supplier == null) {\n            final long retentionPeriod = materialized.retention() != null ? materialized.retention().toMillis() : windows.gracePeriodMs() + 2 * windows.timeDifferenceMs();\n\n            // large retention time to ensure that all existing windows needed to create new sliding windows can be accessed"
  }
]