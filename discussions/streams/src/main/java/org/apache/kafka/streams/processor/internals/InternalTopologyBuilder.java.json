[
  {
    "id" : "44362f60-7ac4-4363-8892-a173133e9d52",
    "prId" : 5017,
    "prUrl" : "https://github.com/apache/kafka/pull/5017#pullrequestreview-120827745",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a1c30e3-4383-403d-a53a-a0dd3ce8e479",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Can this be simplified with a single `if-then-else` checking `storeToChangelogTopic.containsKey(stateFactory.name())` once?",
        "createdAt" : "2018-05-15T21:37:17Z",
        "updatedAt" : "2018-05-17T17:32:18Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "9f3e889d-974d-416c-b3b6-c0ca725d995d",
        "parentId" : "1a1c30e3-4383-403d-a53a-a0dd3ce8e479",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Note that `storeToChangelogTopic` and `stateChangelogTopics` are different :) The former is pre-built when the DSL is parsed, while the latter is built within the `topicGroups` to get the changelog topic configs for topics related to the topic group, a.k.a the sub-topology alone.",
        "createdAt" : "2018-05-16T21:30:36Z",
        "updatedAt" : "2018-05-17T17:32:18Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ceb316c409c687ad63a72cddc3a04b16aa25b9c",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1022,1026 @@                            final InternalTopicConfig internalTopicConfig = createChangelogTopicConfig(stateFactory, topicName);\n                            stateChangelogTopics.put(topicName, internalTopicConfig);\n                        }\n                    }\n                }"
  },
  {
    "id" : "fb27903d-33d8-4bf1-9817-01fab0469935",
    "prId" : 5218,
    "prUrl" : "https://github.com/apache/kafka/pull/5218#pullrequestreview-130903494",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1adde95-1f82-46a2-92fa-f18c03ac3c3c",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "We had an interface, an abstract class, and a concrete class, which I collapsed into just the concrete class. The hierarchy didn't seem to provide any value in this case, and it made the code harder to analyze.",
        "createdAt" : "2018-06-13T23:10:50Z",
        "updatedAt" : "2018-06-22T17:11:47Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "c84f411f-bfd9-4d5c-9a5d-a7c231d8118f",
        "parentId" : "e1adde95-1f82-46a2-92fa-f18c03ac3c3c",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Sounds good.",
        "createdAt" : "2018-06-18T22:27:56Z",
        "updatedAt" : "2018-06-22T17:11:47Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "3f47d45f-a23f-4000-87f4-a19f302b7202",
        "parentId" : "e1adde95-1f82-46a2-92fa-f18c03ac3c3c",
        "authorId" : "2c9c4dbb-be9d-424e-8d8a-9f3d67f8372b",
        "body" : "Getting rid of the abstract class sounds good, though i'd probably keep the interface. Generally i think it is better design to code against interfaces rather than concrete implementations.",
        "createdAt" : "2018-06-21T09:15:45Z",
        "updatedAt" : "2018-06-22T17:11:47Z",
        "lastEditedBy" : "2c9c4dbb-be9d-424e-8d8a-9f3d67f8372b",
        "tags" : [
        ]
      },
      {
        "id" : "8bfaf98d-6ae5-4e2b-b573-176ab1f0425a",
        "parentId" : "e1adde95-1f82-46a2-92fa-f18c03ac3c3c",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I agree in principle, but (like everything) I think it needs to be balanced. I've seen projects that have a requirement that every class also has an interface, and it gets unwieldy.\r\n\r\nIn this case, the interface seems unnecessary because this class is only used inside of this file (and in this file's tests).",
        "createdAt" : "2018-06-21T15:12:26Z",
        "updatedAt" : "2018-06-22T17:11:47Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "499b4ed9-c32f-4dd6-b944-22e8b5d178fb",
        "parentId" : "e1adde95-1f82-46a2-92fa-f18c03ac3c3c",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Also apologies for including this refactor in this PR. It was formerly related, but it's not anymore.\r\n\r\nI'd pull it out, but I think all the reviewers have looked at it already.",
        "createdAt" : "2018-06-21T16:50:03Z",
        "updatedAt" : "2018-06-22T17:11:47Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "e58d9726a7d7d1331ac7dac3ff65c4444c5a1bbc",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +126,130 @@    private final Map<StoreBuilder, String> storeToSourceChangelogTopic = new HashMap<>();\n\n    public static class StateStoreFactory {\n        private final StoreBuilder builder;\n        private final Set<String> users = new HashSet<>();"
  },
  {
    "id" : "b2cc988e-19ba-4650-be50-3d7829ba2e59",
    "prId" : 5284,
    "prUrl" : "https://github.com/apache/kafka/pull/5284#pullrequestreview-140904784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "51805850-7b45-4644-84eb-c50212454685",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "You don't need the `else` here, just `return null` if the `if` evaluates to false.",
        "createdAt" : "2018-07-26T23:53:51Z",
        "updatedAt" : "2018-08-10T02:38:24Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1df6208f48b6b72091fea71323d94a16102ffd13",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +1540,1544 @@            if (topicNameExtractor instanceof StaticTopicNameExtractor) {\n                return ((StaticTopicNameExtractor) topicNameExtractor).topicName;\n            } else {\n                return null;\n            }"
  },
  {
    "id" : "d144345c-d42c-410b-bae6-f7ed3a6a08b1",
    "prId" : 5284,
    "prUrl" : "https://github.com/apache/kafka/pull/5284#pullrequestreview-140904784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c601d7cc-9aea-4786-9e9a-6baea5ba70ba",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "same as above",
        "createdAt" : "2018-07-26T23:54:36Z",
        "updatedAt" : "2018-08-10T02:38:24Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1df6208f48b6b72091fea71323d94a16102ffd13",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +1549,1553 @@            if (topicNameExtractor instanceof StaticTopicNameExtractor) {\n                return null;\n            } else {\n                return topicNameExtractor;\n            }"
  },
  {
    "id" : "440cf7d8-cd1c-4edd-b44c-e298d5214109",
    "prId" : 5284,
    "prUrl" : "https://github.com/apache/kafka/pull/5284#pullrequestreview-142920567",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf00d7ca-6ce1-4a1a-a9c5-893992377665",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "We also need to update `equals()` to include `topicPattern`",
        "createdAt" : "2018-08-02T18:35:00Z",
        "updatedAt" : "2018-08-10T02:38:24Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1df6208f48b6b72091fea71323d94a16102ffd13",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +1475,1479 @@        public int hashCode() {\n            // omit successor as it might change and alter the hash code\n            return Objects.hash(name, topics, topicPattern);\n        }\n    }"
  },
  {
    "id" : "90cf203a-75d4-4a9b-bbc7-bd5dc0809e8e",
    "prId" : 5284,
    "prUrl" : "https://github.com/apache/kafka/pull/5284#pullrequestreview-227079782",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b57d19fe-9bad-44a5-99c9-5ef98d6d13de",
        "parentId" : null,
        "authorId" : "186bd269-f68c-4261-bde0-dcb663d88c23",
        "body" : "NPE: ![image](https://user-images.githubusercontent.com/925755/55269396-d55f3480-5292-11e9-9c29-78c524d63c65.png)\r\n\r\nI'm not using a topic pattern, equality should still work.",
        "createdAt" : "2019-03-30T01:24:58Z",
        "updatedAt" : "2019-03-30T01:26:05Z",
        "lastEditedBy" : "186bd269-f68c-4261-bde0-dcb663d88c23",
        "tags" : [
        ]
      },
      {
        "id" : "b8d8aaef-be66-4464-b28a-ea4e0fc93f68",
        "parentId" : "b57d19fe-9bad-44a5-99c9-5ef98d6d13de",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "cc @mjsax is this an overlooked issue?",
        "createdAt" : "2019-03-31T18:40:49Z",
        "updatedAt" : "2019-03-31T18:40:50Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "0ee28b9e-763d-46d7-ab7c-da1dbd4476df",
        "parentId" : "b57d19fe-9bad-44a5-99c9-5ef98d6d13de",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Seems like. Just double checked the code and `topicPattern` could be `null`. This bug was introduced in `2.1` release.\r\n\r\n@unthingable Thanks for pointing this out. Would you like to do a PR (I create a JIRA for it: https://issues.apache.org/jira/browse/KAFKA-8240)",
        "createdAt" : "2019-04-16T09:23:59Z",
        "updatedAt" : "2019-04-16T09:24:00Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1df6208f48b6b72091fea71323d94a16102ffd13",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +1469,1473 @@            return name.equals(source.name)\n                && topics.equals(source.topics)\n                && topicPattern.equals(source.topicPattern);\n        }\n"
  },
  {
    "id" : "2d126757-bf11-49e1-bad7-8aa03c2781af",
    "prId" : 5477,
    "prUrl" : "https://github.com/apache/kafka/pull/5477#pullrequestreview-144478524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63f63839-9ca6-4553-9ef8-4dea61c1e9d8",
        "parentId" : null,
        "authorId" : "cb6f8432-d515-4113-87f8-14e555ab8ed1",
        "body" : "nit: do we need a space here?",
        "createdAt" : "2018-08-08T13:47:44Z",
        "updatedAt" : "2018-08-08T13:47:44Z",
        "lastEditedBy" : "cb6f8432-d515-4113-87f8-14e555ab8ed1",
        "tags" : [
        ]
      },
      {
        "id" : "2995f279-f303-45d5-a280-ab2acb53fae8",
        "parentId" : "63f63839-9ca6-4553-9ef8-4dea61c1e9d8",
        "authorId" : "85578594-6b0b-4724-b709-a8c84f206391",
        "body" : "`logPrefix` already contains trailing whitespace.",
        "createdAt" : "2018-08-08T14:26:18Z",
        "updatedAt" : "2018-08-08T14:26:18Z",
        "lastEditedBy" : "85578594-6b0b-4724-b709-a8c84f206391",
        "tags" : [
        ]
      },
      {
        "id" : "d3cfb3a2-48ca-4af7-9531-704e16bd3f48",
        "parentId" : "63f63839-9ca6-4553-9ef8-4dea61c1e9d8",
        "authorId" : "cb6f8432-d515-4113-87f8-14e555ab8ed1",
        "body" : "I see, thanks.",
        "createdAt" : "2018-08-08T15:33:49Z",
        "updatedAt" : "2018-08-08T15:33:49Z",
        "lastEditedBy" : "cb6f8432-d515-4113-87f8-14e555ab8ed1",
        "tags" : [
        ]
      }
    ],
    "commit" : "c944fecc0282ad57808b0553b0e5df1a3a3365b9",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +1820,1824 @@    public void updateSubscribedTopics(final Set<String> topics, final String logPrefix) {\n        final SubscriptionUpdates subscriptionUpdates = new SubscriptionUpdates();\n        log.debug(\"{}found {} topics possibly matching regex\", logPrefix, topics);\n        // update the topic groups with the returned subscription set for regex pattern subscriptions\n        subscriptionUpdates.updateTopics(topics);"
  },
  {
    "id" : "e9055e88-36b0-4024-9f63-625678fc77d2",
    "prId" : 5488,
    "prUrl" : "https://github.com/apache/kafka/pull/5488#pullrequestreview-145414610",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c513f442-8afc-4a25-a81c-f56d6d4f854c",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is for deferring the build of global stores.",
        "createdAt" : "2018-08-10T22:24:57Z",
        "updatedAt" : "2018-08-15T03:19:02Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7550e3eb5eeb926254dc8822bd9ea87502592a93",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +68,72 @@\n    // built global state stores\n    private final Map<String, StoreBuilder> globalStateBuilders = new LinkedHashMap<>();\n\n    // built global state stores"
  },
  {
    "id" : "852b91a8-fad4-4c2c-ae82-f4ee8f663089",
    "prId" : 5488,
    "prUrl" : "https://github.com/apache/kafka/pull/5488#pullrequestreview-145498092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a7677216-4d1e-4795-9909-ce6c2e327a26",
        "parentId" : null,
        "authorId" : "0c73d886-f3da-4107-8045-92d8e3c8fb75",
        "body" : "Can this be done for trunk ?",
        "createdAt" : "2018-08-10T23:06:35Z",
        "updatedAt" : "2018-08-15T03:19:02Z",
        "lastEditedBy" : "0c73d886-f3da-4107-8045-92d8e3c8fb75",
        "tags" : [
        ]
      },
      {
        "id" : "652f8784-00b7-4b59-8f1e-486c827be531",
        "parentId" : "a7677216-4d1e-4795-9909-ce6c2e327a26",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Yes, I think we are going to do that right after #5451 is merged, and then we can move this into the logical plan optimization.",
        "createdAt" : "2018-08-13T01:46:38Z",
        "updatedAt" : "2018-08-15T03:19:02Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7550e3eb5eeb926254dc8822bd9ea87502592a93",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +361,365 @@\n        // adjust the topology if optimization is turned on.\n        // TODO: to be removed post 2.0\n        adjust(config);\n"
  },
  {
    "id" : "741b8714-ee2f-4937-9dbe-268f98fde55a",
    "prId" : 5527,
    "prUrl" : "https://github.com/apache/kafka/pull/5527#pullrequestreview-284434221",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f9264b0a-d6e5-4c41-abcc-42f0dc05be54",
        "parentId" : null,
        "authorId" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "body" : "Minor: you could get away with keeping this mutable if you initialize it here and do `addAll` with `topicsToCopartitionGroup.get` below. Just check `copartitionGroup.isEmpty` to determine if you can break.",
        "createdAt" : "2019-08-28T22:48:25Z",
        "updatedAt" : "2019-10-02T17:56:32Z",
        "lastEditedBy" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "tags" : [
        ]
      },
      {
        "id" : "f54b2105-8a8d-42c6-ba02-b9552cefe867",
        "parentId" : "f9264b0a-d6e5-4c41-abcc-42f0dc05be54",
        "authorId" : "d8d11f3d-4fbd-4882-a206-bfece798cdcd",
        "body" : "I'll leave that up to @vvcephei to comment on, as he is the one who made these changes... . Actually, now I'm not sure why this change is in here, I think this was supposed to be in its own PR? John?",
        "createdAt" : "2019-08-29T17:56:13Z",
        "updatedAt" : "2019-10-02T17:56:32Z",
        "lastEditedBy" : "d8d11f3d-4fbd-4882-a206-bfece798cdcd",
        "tags" : [
        ]
      },
      {
        "id" : "f3fa0b19-5fbe-4194-a22c-0750bc4fc94a",
        "parentId" : "f9264b0a-d6e5-4c41-abcc-42f0dc05be54",
        "authorId" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "body" : "BTW, this is not a blocker to me. I think if we get the one change we discussed above (exception on overflow) that things are looking pretty good from my perspective. I'll do a pass on the tests too.",
        "createdAt" : "2019-09-03T17:54:35Z",
        "updatedAt" : "2019-10-02T17:56:32Z",
        "lastEditedBy" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "tags" : [
        ]
      },
      {
        "id" : "9c4d60a7-2692-4497-82ad-1f98bfe6dd5d",
        "parentId" : "f9264b0a-d6e5-4c41-abcc-42f0dc05be54",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Thanks, @cpettitt-confluent . I think we're better off favoring immutability unless there's a significant readability or performance advantage to mutable state.",
        "createdAt" : "2019-09-05T17:49:17Z",
        "updatedAt" : "2019-10-02T17:56:32Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e1b6a1a41c8e05ff009ad988b705baeb42800ad",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +1166,1170 @@        for (final Set<String> topics : copartitionSourceTopics) {\n            if (topics != null) {\n                Set<String> coparititonGroup = null;\n                for (final String topic : topics) {\n                    coparititonGroup = topicsToCopartitionGroup.get(topic);"
  },
  {
    "id" : "8fca3ee7-bf6b-4db7-be22-eba111d63b89",
    "prId" : 5779,
    "prUrl" : "https://github.com/apache/kafka/pull/5779#pullrequestreview-163625802",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6f778c76-9dbf-4a75-8954-a27fb2f289c1",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "To cope with the typing.",
        "createdAt" : "2018-10-11T02:12:06Z",
        "updatedAt" : "2018-12-09T06:42:30Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d02ad5bab3f2cf4ae2c11457e8dfe099d3a4b12",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +537,541 @@    }\n\n    public final void addGlobalStore(final StoreBuilder storeBuilder,\n                                     final String sourceName,\n                                     final TimestampExtractor timestampExtractor,"
  },
  {
    "id" : "dfbd634e-fe56-44fc-885e-0837ce2a5a19",
    "prId" : 6589,
    "prUrl" : "https://github.com/apache/kafka/pull/6589#pullrequestreview-227586881",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94d08bba-0b17-4d16-9e45-cbf16f0f9c01",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "While debugging the issue, I figure that the use comparators don't do deep comparison. This is the corresponding fix. (Similar below)",
        "createdAt" : "2019-04-17T07:22:38Z",
        "updatedAt" : "2019-04-27T21:35:25Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff1c57004a83c1e8e9a379d556afe94e04ca3c50",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1282,1286 @@        public int compare(final TopologyDescription.Node node1,\n                           final TopologyDescription.Node node2) {\n            if (node1.equals(node2)) {\n                return 0;\n            }"
  },
  {
    "id" : "99c36cb0-7865-436e-aa39-a5336f71cbbf",
    "prId" : 6589,
    "prUrl" : "https://github.com/apache/kafka/pull/6589#pullrequestreview-229673736",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e659c13e-fca9-4afe-bc32-3d46e631f9dc",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "What should happen if the topic or the pattern is empty?",
        "createdAt" : "2019-04-22T17:20:22Z",
        "updatedAt" : "2019-04-27T21:35:25Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "1f7abf40-a1d5-4ddb-ac3f-09893d6cad00",
        "parentId" : "e659c13e-fca9-4afe-bc32-3d46e631f9dc",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I don't think those are special cases. For `Pattern.compile(null)` it throws NPE, so we would never hit this code but fail before.\r\n\r\n`Pattern.compile(\"\")` should be fine but just don't match any topic. Similar, to empty topic list. For both cases, the consumer should just be idle.\r\n\r\n\\cc @guozhangwang or @hachikuji to confirm.",
        "createdAt" : "2019-04-23T16:52:12Z",
        "updatedAt" : "2019-04-27T21:35:25Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff1c57004a83c1e8e9a379d556afe94e04ca3c50",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +1446,1450 @@                throw new IllegalArgumentException(\"Either topics or pattern must be null, but both are not null.\");\n            }\n\n            this.topics = topics;\n            this.topicPattern = pattern;"
  },
  {
    "id" : "420c2772-31f1-4418-8a6a-7b7ca210c803",
    "prId" : 7170,
    "prUrl" : "https://github.com/apache/kafka/pull/7170#pullrequestreview-272092993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9fd9be0-050e-4326-9e02-9751ff2ac56f",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "We should extend existing `addInternalTopic` instead of having two method.",
        "createdAt" : "2019-08-07T18:12:47Z",
        "updatedAt" : "2020-04-07T14:50:24Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2bcdfe487ec13f41f4516d6bee6a1847f6d4ce2",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +622,626 @@    }\n\n    public final void addInternalTopic(final String topicName,\n                                       final InternalTopicProperties internalTopicProperties) {\n        Objects.requireNonNull(topicName, \"topicName can't be null\");"
  },
  {
    "id" : "722106cb-00dd-4e16-a73e-8fdb376c33d5",
    "prId" : 7170,
    "prUrl" : "https://github.com/apache/kafka/pull/7170#pullrequestreview-279350635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed51d0ec-648f-40d5-bd63-d279e87399b6",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "It seems like this might be able to just replace `internalTopicNames`. We only add to `internalTopicNames` in one place, where we also (maybe) add to this map. We can't (shouldn't) make the value `null`, but I noticed that `InternalTopicProperties` allows its parameter (`numberOfPartitions`) to be null, which seems like it should have the same effect as a null `internalTopicProperties`...\r\n\r\nWhat do you think about requiring `iternalTopicProperties` to be non-null in `addInternalTopic`, although it might have a null number of partitions. Then, we can get rid of `internalTopicNames` and just use `internalTopicNamesWithProperties.keySet()`?",
        "createdAt" : "2019-08-22T17:18:57Z",
        "updatedAt" : "2020-04-07T14:50:24Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "6beb69f5-a2dd-41c1-a022-49226d5c19dd",
        "parentId" : "ed51d0ec-648f-40d5-bd63-d279e87399b6",
        "authorId" : "f616d937-9d20-463c-aba4-ff4af295195c",
        "body" : "Done.",
        "createdAt" : "2019-08-25T19:53:23Z",
        "updatedAt" : "2020-04-07T14:50:24Z",
        "lastEditedBy" : "f616d937-9d20-463c-aba4-ff4af295195c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2bcdfe487ec13f41f4516d6bee6a1847f6d4ce2",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +74,78 @@\n    // all internal topics with their corresponding properties auto-created by the topology builder and used in source / sink processors\n    private final Map<String, InternalTopicProperties> internalTopicNamesWithProperties = new HashMap<>();\n\n    // groups of source processors that need to be copartitioned"
  },
  {
    "id" : "cbfc38ed-b6b5-4718-90df-bf2cf68234b4",
    "prId" : 7495,
    "prUrl" : "https://github.com/apache/kafka/pull/7495#pullrequestreview-338809186",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9aa39dcd-021d-4408-9da2-c15cfefa1b46",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "q: how could we guarantee a topological traversal on a map without order?",
        "createdAt" : "2020-01-05T07:13:46Z",
        "updatedAt" : "2020-01-05T07:13:46Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "144337c8-eab1-4050-896d-8942f43f1c9b",
        "parentId" : "9aa39dcd-021d-4408-9da2-c15cfefa1b46",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "`nodeFactories` is in topological order, for example in `InternalStreamsBuilder#buildAndOptimizeTopology` we only add a node once all its parents have been written to the topology already",
        "createdAt" : "2020-01-06T18:23:32Z",
        "updatedAt" : "2020-01-06T18:23:32Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "031bf07b10298b28dbc4af445432a998989db29e",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +757,761 @@\n        // Traverse in topological order\n        for (final String nodeName : nodeFactories.keySet()) {\n            nodeGroupId = putNodeGroupName(nodeName, nodeGroupId, nodeGroups, rootToNodeGroup);\n        }"
  }
]