[
  {
    "id" : "97a9a150-b5b2-442c-83e5-1ee3b3e60848",
    "prId" : 10683,
    "prUrl" : "https://github.com/apache/kafka/pull/10683#pullrequestreview-705750943",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5d2d38ff-f049-4f7c-bb64-f92d5a74b6d9",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Maybe we should just require `atLeast(1)` in StreamsConfig definition? And then here we only need to check the first condition.",
        "createdAt" : "2021-06-23T12:13:40Z",
        "updatedAt" : "2021-06-23T12:31:51Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "96e2d4d7-ef0b-4d42-bd2c-dbc8cb4455a0",
        "parentId" : "5d2d38ff-f049-4f7c-bb64-f92d5a74b6d9",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "We would still need to check. Because the thread count could still be dropped to 0 with `removeThread()`",
        "createdAt" : "2021-06-23T15:26:39Z",
        "updatedAt" : "2021-06-23T15:26:39Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      },
      {
        "id" : "c62fc3ca-5c7b-41ca-bf7f-cc716db3d1cb",
        "parentId" : "5d2d38ff-f049-4f7c-bb64-f92d5a74b6d9",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I see.",
        "createdAt" : "2021-06-23T15:54:33Z",
        "updatedAt" : "2021-06-23T15:57:25Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "ee69e501-83f8-4177-bc6d-447eb9b88b5b",
        "parentId" : "5d2d38ff-f049-4f7c-bb64-f92d5a74b6d9",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Also, if a user has a global-only topology, then it's absolutely valid for them to eplicitly configure the app to have no StreamThreads. In fact if we detect that case then we actually override the configured num.stream.threads to 0 for them, anyways",
        "createdAt" : "2021-07-14T00:32:10Z",
        "updatedAt" : "2021-07-14T00:32:11Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba4a0da87422fc24bbf190022ddd6b80f784e941",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +83,87 @@        // If the application uses named topologies, it's possible to start up with no topologies at all and only add them later\n        if (builders.isEmpty()) {\n            if (configuredNumStreamThreads != 0) {\n                log.info(\"Overriding number of StreamThreads to zero for empty topology\");\n            }"
  },
  {
    "id" : "b46660d4-eed3-4293-aadb-460c1ee9ed15",
    "prId" : 10683,
    "prUrl" : "https://github.com/apache/kafka/pull/10683#pullrequestreview-705749719",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90d69038-e2cb-4dc0-8430-64cd5d6c7c5d",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Why not return `null` here?",
        "createdAt" : "2021-06-23T12:30:24Z",
        "updatedAt" : "2021-06-23T12:31:51Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "4b83cc1b-a788-4432-86ec-b84ece279844",
        "parentId" : "90d69038-e2cb-4dc0-8430-64cd5d6c7c5d",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Just being consistent with what was returned in that case before. If we return `null` then an NPE would be thrown atm. \r\n\r\nIt's used by `KafkaStreams#allLocalStorePartitionLags` ie KIP-535. Could definitely be cleaned up, but I don't want to pull that into scope of this PR",
        "createdAt" : "2021-07-14T00:28:51Z",
        "updatedAt" : "2021-07-14T00:28:51Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba4a0da87422fc24bbf190022ddd6b80f784e941",
    "line" : 252,
    "diffHunk" : "@@ -1,1 +264,268 @@        }\n        log.warn(\"Unable to locate any store for topic {}\", topicName);\n        return \"\";\n    }\n"
  },
  {
    "id" : "fd158e32-bc13-4db9-8608-f8e9d4694974",
    "prId" : 10683,
    "prUrl" : "https://github.com/apache/kafka/pull/10683#pullrequestreview-705750253",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6bfa3df0-ea2a-4bd4-b161-268928bb81fe",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Okay now I see why we do not count named topologies for global stores for caching. Is it final, or just not supported within pt.2?",
        "createdAt" : "2021-06-23T15:56:48Z",
        "updatedAt" : "2021-06-23T15:57:25Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "9e2ccc38-41ec-466e-9dc9-7431a1689387",
        "parentId" : "6bfa3df0-ea2a-4bd4-b161-268928bb81fe",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "It's not likely to be compatible in the first phase, but I think we would want it to be fully supported in the end, ie as part of the KIP once we have everything worked out and feeling ready for that",
        "createdAt" : "2021-07-14T00:30:17Z",
        "updatedAt" : "2021-07-14T00:30:17Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba4a0da87422fc24bbf190022ddd6b80f784e941",
    "line" : 212,
    "diffHunk" : "@@ -1,1 +224,228 @@            if (globalTopology != null) {\n                if (builder.topologyName() != null) {\n                    throw new IllegalStateException(\"Global state stores are not supported with Named Topologies\");\n                } else if (this.globalTopology == null) {\n                    this.globalTopology = globalTopology;"
  },
  {
    "id" : "3f71faa7-f32a-4004-bb8e-060e6b312538",
    "prId" : 10683,
    "prUrl" : "https://github.com/apache/kafka/pull/10683#pullrequestreview-718634813",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90c1844e-1cdf-42ca-8599-67e479b9dbcd",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I kept getting myself confused by the `NoNonGlobal` haha (got me for the first time reviewing this, and then again for the third pass) :P As a hindsight maybe we should invent the term \"local topology\" at the first place.",
        "createdAt" : "2021-07-27T23:05:54Z",
        "updatedAt" : "2021-07-27T23:24:11Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "ecb6dc1a-3df5-4fd4-a519-534fb77f3aa7",
        "parentId" : "90c1844e-1cdf-42ca-8599-67e479b9dbcd",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Ahh yeah I was even confusing myself with this after a while. \"Local topology\" sounds much better -- will do",
        "createdAt" : "2021-07-30T00:41:57Z",
        "updatedAt" : "2021-07-30T00:41:57Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba4a0da87422fc24bbf190022ddd6b80f784e941",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +91,95 @@        // If there are named topologies but some are empty, this indicates a bug in user code\n        if (hasNamedTopologies()) {\n            if (hasNoNonGlobalTopology() && !hasGlobalTopology()) {\n                log.error(\"Detected a named topology with no input topics, a named topology may not be empty.\");\n                throw new TopologyException(\"Topology has no stream threads and no global threads, \" +"
  },
  {
    "id" : "edae3e76-60c3-43ad-85d3-c27eb310ce77",
    "prId" : 10683,
    "prUrl" : "https://github.com/apache/kafka/pull/10683#pullrequestreview-718654831",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7dad292-392b-46b0-a8bb-29bb489cddcb",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Very nit: maybe we can leave some comments on whether we keep the map of topologyBuilder instead of the built topologies here (and hence move many of the checks ahead before the actual generation of the topology).\r\n\r\nAlso as a meta thought just for the future roadmap, one caveat of moving the checks ahead of time is that it may restrict on what kind of optimizations we can do during the topology generation -- e.g. we cannot say generate a topology with in-memory store if the builder indicates persistent stores etc. So just looking ahead in pt.3 here, do you think in the future (beyond V1) in `registerAndBuildNewTopology` we can still just rebuild the topology immediately and track based on the topologies not topology builders? @ableegoldman ",
        "createdAt" : "2021-07-27T23:18:34Z",
        "updatedAt" : "2021-07-27T23:24:11Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "cc624af2-d6a9-4bb9-9529-6b237b37cbc4",
        "parentId" : "f7dad292-392b-46b0-a8bb-29bb489cddcb",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Yeah I think it would fine (better even) to swap in the topologies rather than the topology builders, the only reason for using the builders now is that a huge amount of topology-related functionality currently resides in the InternalTopologyBuilder, including pretty much all the metadata. I 100% would [support cleaning this up](https://github.com/apache/kafka/pull/10683#discussion_r679581108) and separating things out from this class and made sure it would be easy to do so here, the builders are really only kept around after the topology is built because they still contain most of the metadata we need. ",
        "createdAt" : "2021-07-30T01:41:02Z",
        "updatedAt" : "2021-07-30T01:41:35Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba4a0da87422fc24bbf190022ddd6b80f784e941",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +54,58 @@\n    private final StreamsConfig config;\n    private final SortedMap<String, InternalTopologyBuilder> builders; // Keep sorted by topology name for readability\n\n    private ProcessorTopology globalTopology;"
  },
  {
    "id" : "641b4b2a-58cd-4f0f-a2c6-6fa8d202e71c",
    "prId" : 10788,
    "prUrl" : "https://github.com/apache/kafka/pull/10788#pullrequestreview-723971339",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04f29c33-762f-4207-a2e5-99bfbd062e2d",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "How about moving this into the TopologyVersion to be guarded within the same lock as well, instead of making itself a concurrent data structure?",
        "createdAt" : "2021-08-03T23:00:04Z",
        "updatedAt" : "2021-08-03T23:38:45Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "a9e5b833-76a1-4aa4-82bc-80489990d93a",
        "parentId" : "04f29c33-762f-4207-a2e5-99bfbd062e2d",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Also we can optimize the condition on whether we should enforce a new rebalance per-thread in `StreamThread` as: `builders.keySet().equals(assignedNamedTopologies)`. The former is the set of topologies this instance knows, the latter is the set of topologies the leader knows, when they are the same there's no need to trigger rebalance.",
        "createdAt" : "2021-08-03T23:04:29Z",
        "updatedAt" : "2021-08-03T23:38:45Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "529ddc2e-98d9-4ff4-b62c-f477cd449c1a",
        "parentId" : "04f29c33-762f-4207-a2e5-99bfbd062e2d",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Well I removed the whole `assignedNamedTopologies` thing from this PR, but yes, that was one of the original intentions of adding it to the AssignmentInfo. I'm leaning towards keeping things simple for now and avoid adding on to the AssignmentInfo where possible. We can revisit this if the extra rebalances become a problem.\r\n\r\nIt could be sufficient to just use the set of actually-assigned topologies as a proxy. It's not perfect since it could be that the leader was aware of a topology and simply happened to not assign any of its tasks to this client, but I'd bet this gets rid of most of the unnecessary rebalances.\r\n\r\nThat said, I'm saving this optimization for a followup Pt. 4 PR. I'll revisit the best way to handle the `builders` map in that as well",
        "createdAt" : "2021-08-05T03:32:00Z",
        "updatedAt" : "2021-08-05T03:32:00Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "c31203a8-81af-4b62-bbe3-6d170c88e2b8",
        "parentId" : "04f29c33-762f-4207-a2e5-99bfbd062e2d",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "SGTM.\r\n\r\nWhat about the other comment, i.e. moving the `Map<String, InternalTopologyBuilder> builders` into the `TopologyVersion` itself? Besides the constructors, the only modifiers to `builders` seem to be `register/deregister`, in which we would always try to `getAndIncrement` version. So what about consolidating the modification of builders along with version bump, and hence we would not need to use a `ConcurrentNavigableMap`?",
        "createdAt" : "2021-08-05T22:22:11Z",
        "updatedAt" : "2021-08-05T22:31:15Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "f7e96692-89ff-4b94-9b3e-1a386cfbca7a",
        "parentId" : "04f29c33-762f-4207-a2e5-99bfbd062e2d",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "> I'll revisit the best way to handle the builders map in that as well\r\n\r\nI was referring to moving the `builders` map to the `TopologyVersion` in the above, ie I want to save that for Pt. 4  if that's ok",
        "createdAt" : "2021-08-06T00:46:43Z",
        "updatedAt" : "2021-08-06T00:46:43Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "619347d9-5fa0-4412-a2c8-fb8d59e43b75",
        "parentId" : "04f29c33-762f-4207-a2e5-99bfbd062e2d",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "> I was referring to moving the `builders` map to the `TopologyVersion` in the above, ie I want to save that for Pt. 4 if that's ok\r\n\r\nYup, totally.",
        "createdAt" : "2021-08-06T04:29:43Z",
        "updatedAt" : "2021-08-06T04:29:44Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "623e7d3514516f355b468e4b23e45d33b8ecab22",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +61,65 @@    private final TopologyVersion version;\n\n    private final ConcurrentNavigableMap<String, InternalTopologyBuilder> builders; // Keep sorted by topology name for readability\n\n    private ProcessorTopology globalTopology;"
  },
  {
    "id" : "9571a108-5788-41ca-a2af-0c620640f13b",
    "prId" : 10788,
    "prUrl" : "https://github.com/apache/kafka/pull/10788#pullrequestreview-721802128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4607fe97-f4aa-451f-a914-bf6bbaea9687",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Just to clarify: we either support N topologies where none of them have global topologies, or we support just one topology with only global topology? What's the rationale for supporting the second scenario?",
        "createdAt" : "2021-08-03T23:19:51Z",
        "updatedAt" : "2021-08-03T23:38:45Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "4ad02071-232b-4122-bb92-1378004e09e3",
        "parentId" : "4607fe97-f4aa-451f-a914-bf6bbaea9687",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "The second scenario is called \"Kafka Streams\" 😉  \r\n\r\n(Users who aren't using named topologies should be able to use global stores as they do today)",
        "createdAt" : "2021-08-04T02:13:44Z",
        "updatedAt" : "2021-08-04T02:13:45Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "623e7d3514516f355b468e4b23e45d33b8ecab22",
    "line" : 186,
    "diffHunk" : "@@ -1,1 +191,195 @@                throw new IllegalStateException(\"Global state stores are not supported with Named Topologies\");\n            } else if (this.globalTopology == null) {\n                this.globalTopology = globalTopology;\n            } else {\n                throw new IllegalStateException(\"Topology builder had global state, but global topology has already been set\");"
  }
]