[
  {
    "id" : "b8c94f55-9978-4c55-9429-3a7232abd0f2",
    "prId" : 4343,
    "prUrl" : "https://github.com/apache/kafka/pull/4343#pullrequestreview-86195518",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0bca94a6-8674-4fec-999b-b1e8a69ba6ca",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why don't we call `completeShutdown(true)` directly instead via the redirect to `run()` ?",
        "createdAt" : "2017-12-27T21:53:24Z",
        "updatedAt" : "2018-01-02T02:05:30Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "9862e3b2-6729-4670-a40f-e21b5a6b3520",
        "parentId" : "0bca94a6-8674-4fec-999b-b1e8a69ba6ca",
        "authorId" : "5b2b5fa0-0fb4-4e52-a4f9-9d4318b5ae5d",
        "body" : "It seemed simpler to have all the shutdown stuff handled in the streams thread. I don't have a strong preference either way though.",
        "createdAt" : "2018-01-02T01:56:26Z",
        "updatedAt" : "2018-01-02T02:05:30Z",
        "lastEditedBy" : "5b2b5fa0-0fb4-4e52-a4f9-9d4318b5ae5d",
        "tags" : [
        ]
      },
      {
        "id" : "5f1f12fe-c946-463f-a3ee-e4c81a1c5447",
        "parentId" : "0bca94a6-8674-4fec-999b-b1e8a69ba6ca",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This lgtm.",
        "createdAt" : "2018-01-02T17:29:57Z",
        "updatedAt" : "2018-01-02T17:29:57Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5902a645c8eb9fc9f25f3c7076a0acc7d1e5def3",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +1099,1103 @@        if (oldState == State.CREATED) {\n            // Start so that we shutdown on the thread\n            this.start();\n        }\n    }"
  },
  {
    "id" : "5be4b37b-86f5-460e-baa5-af0a95a3a5e9",
    "prId" : 4636,
    "prUrl" : "https://github.com/apache/kafka/pull/4636#pullrequestreview-123532297",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93331a55-a64a-4ef0-90af-9e7153b31699",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "I'm probably missing something and brought this up before, but above in `onPartitionsAssigned` we create tasks with the `assignment` when _not_ version probing.  But in `onPartitionsRevoked` if we are version probing we flip the version probing flag, hence on assignment we create tasks.  Why don't we flip the version probing flag in `onPartitionedAssigned` as an else statement on line 270 so we are only every suspending and creating tasks during non-version probing rebalances?",
        "createdAt" : "2018-05-25T19:38:11Z",
        "updatedAt" : "2018-05-31T03:24:33Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "5f52f736-e2fe-44cb-9d03-1938e4a86824",
        "parentId" : "93331a55-a64a-4ef0-90af-9e7153b31699",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "`onPartitionsAssigned`: if version probing flag is set, it means assignment is empty and we want to trigger a new rebalance. If we call `taskManager.createTasks(assignment);`, we would close suspended task and that is what we do not want to do at this point, because we hope to get those task assigned after the second rebalance.\r\n\r\n`onPartitionsRevoked`: if version probing flag is set, we don't want to suspend tasks either. Tasks are already suspended but if we call `taskManager.suspendTasksAndState();` again, we loose the information about currently suspended tasks (but we need to keep this information; ie, we avoid an incorrect internal metadata update here).\r\n\r\nThe flow is the following:\r\n - trigger first rebalance\r\n - onPartitionsRevoke -> version probing flag not set: suspend tasks regularly\r\n - onPartitionAssigned -> version probing flag set by StreamsPartitionsAssignor: we skip task creation as we will rebalance again (we cannot reset the flag here, because we need it in the next step)\r\n - trigger second rebalance\r\n - onPartitionsRevoke -> version probing flag is still set; we can reset the flag and skip suspending tasks to preserve metadata\r\n - onPartitionAssigned -> version probing flag not set: we do regular assignment and start processing\r\n\r\nDoes this make sense?",
        "createdAt" : "2018-05-25T22:29:51Z",
        "updatedAt" : "2018-05-31T03:24:33Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "62dd3643-53d4-4354-980a-e91080891a1e",
        "parentId" : "93331a55-a64a-4ef0-90af-9e7153b31699",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "yep - thanks for the clarification",
        "createdAt" : "2018-05-25T22:57:15Z",
        "updatedAt" : "2018-05-31T03:24:33Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a87bd5254155a9d60ba479371305ddaae99282d",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +305,309 @@                        streamThread.versionProbingFlag.set(false);\n                    } else {\n                        taskManager.suspendTasksAndState();\n                    }\n                } catch (final Throwable t) {"
  },
  {
    "id" : "f7d80ca4-d114-4e25-af7b-6653097ec8ec",
    "prId" : 4998,
    "prUrl" : "https://github.com/apache/kafka/pull/4998#pullrequestreview-119296797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "940b510c-38e9-4113-a546-d8c031031e9e",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Hmm... note that when EOS is turned on, each task will has its own producer client and the producer object passed in here will be null.\r\n\r\nSo I'd suggest update the following code in line 1224: when `producer == null`, try to iterate the owned tasks from the `taskManager.activeTasks().values()` and get its producer (it is private, so we may need to add a package private getter).\r\n\r\nIn this way for both EOS and non-EOS we will get the producer metrics.",
        "createdAt" : "2018-05-10T23:17:44Z",
        "updatedAt" : "2018-05-15T16:31:43Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "44fbb0b3-49f8-4502-b7db-a6966f7c59bf",
        "parentId" : "940b510c-38e9-4113-a546-d8c031031e9e",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Make sense to me!",
        "createdAt" : "2018-05-11T01:33:20Z",
        "updatedAt" : "2018-05-15T16:31:43Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c857b9a7f14178e17b0a647af540b7af3bed2cf",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +694,698 @@        this.rebalanceListener = new RebalanceListener(time, taskManager, this, this.log);\n        this.taskManager = taskManager;\n        this.producer = producer;\n        this.restoreConsumer = restoreConsumer;\n        this.consumer = consumer;"
  },
  {
    "id" : "f7e60af9-0ad5-45f3-8116-675049bab694",
    "prId" : 5107,
    "prUrl" : "https://github.com/apache/kafka/pull/5107#pullrequestreview-126131413",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b3c1795-90d7-4cfb-8037-2c2b0788d8f1",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Thank you, Java8! :)",
        "createdAt" : "2018-06-05T20:09:33Z",
        "updatedAt" : "2018-06-08T15:17:39Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b829d558490d21cf4350eb54a4f18880243744ba",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +214,218 @@                updateThreadMetadata(taskManager.activeTasks(), taskManager.standbyTasks());\n            } else {\n                updateThreadMetadata(Collections.emptyMap(), Collections.emptyMap());\n            }\n        }"
  },
  {
    "id" : "e3093a65-eef0-4cfe-94fc-2c43e44e06d9",
    "prId" : 5107,
    "prUrl" : "https://github.com/apache/kafka/pull/5107#pullrequestreview-126403871",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "939bb584-7f2d-4cb1-8e5d-80dfbb58ed73",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "As above: should we check for `\"restore.consumer.poll.ms\"` ?",
        "createdAt" : "2018-06-05T20:10:16Z",
        "updatedAt" : "2018-06-08T15:17:39Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "afbd1db6-b28c-41f1-94b3-49a4877224fe",
        "parentId" : "939bb584-7f2d-4cb1-8e5d-80dfbb58ed73",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I guess not, following Guozhang's comment.",
        "createdAt" : "2018-06-06T14:34:36Z",
        "updatedAt" : "2018-06-08T15:17:39Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "b829d558490d21cf4350eb54a4f18880243744ba",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +604,608 @@        final Map<String, Object> restoreConsumerConfigs = config.getRestoreConsumerConfigs(threadClientId);\n        final Consumer<byte[], byte[]> restoreConsumer = clientSupplier.getRestoreConsumer(restoreConsumerConfigs);\n        final Duration pollTime = Duration.ofMillis(config.getLong(StreamsConfig.POLL_MS_CONFIG));\n        final StoreChangelogReader changelogReader = new StoreChangelogReader(restoreConsumer, pollTime, userStateRestoreListener, logContext);\n"
  },
  {
    "id" : "bdc74563-3614-4ba7-aca5-9d317ee67438",
    "prId" : 5107,
    "prUrl" : "https://github.com/apache/kafka/pull/5107#pullrequestreview-126403898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5f17de47-3996-454d-8987-91eba04650a3",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "as above: `\"main.consumer.poll.ms\"` ?",
        "createdAt" : "2018-06-05T20:13:48Z",
        "updatedAt" : "2018-06-08T15:17:39Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "11e574af-5f73-43c7-9b85-5f2ef4da3f38",
        "parentId" : "5f17de47-3996-454d-8987-91eba04650a3",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I guess not, following Guozhang's comment.",
        "createdAt" : "2018-06-06T14:34:40Z",
        "updatedAt" : "2018-06-08T15:17:39Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "b829d558490d21cf4350eb54a4f18880243744ba",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +713,717 @@        this.versionProbingFlag = versionProbingFlag;\n\n        this.pollTime = Duration.ofMillis(config.getLong(StreamsConfig.POLL_MS_CONFIG));\n        this.commitTimeMs = config.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG);\n"
  },
  {
    "id" : "40fca684-ecc5-4f5b-9ee4-7351a46ee4d8",
    "prId" : 5306,
    "prUrl" : "https://github.com/apache/kafka/pull/5306#pullrequestreview-132939982",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c43c1ccb-dc68-4c75-823a-0cb10167f64e",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: should we unify `PARTITONS_REVOKED` and ` RUNNING`?",
        "createdAt" : "2018-06-28T03:49:25Z",
        "updatedAt" : "2018-06-28T03:51:40Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "2777d5a6-1313-431f-b728-fdc6a95524ea",
        "parentId" : "c43c1ccb-dc68-4c75-823a-0cb10167f64e",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I've thought about that, and I think moving forward we may want still use different poll time for RUNNING and PARTITION_REVOKED as well, since for former we should use normal long polling, while for latter there may be some optimization we can do regarding the consumer internals. But those ideas need to be validated via some profiling. I'm intentionally leaving them separated for now.",
        "createdAt" : "2018-06-28T17:18:13Z",
        "updatedAt" : "2018-06-28T17:18:13Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "731877a66ffe2ffbca721e27adada3ce65420c4b",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +812,816 @@            // try to fetch some records with normal poll time\n            // in order to get long polling\n            records = pollRequests(pollTime);\n        } else {\n            // any other state should not happen"
  },
  {
    "id" : "d0df1d4a-5e90-4f4b-ace9-1b92b5cebaef",
    "prId" : 5398,
    "prUrl" : "https://github.com/apache/kafka/pull/5398#pullrequestreview-138881703",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c63ef0b0-f695-41c2-ae39-1c68f62a9558",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "why this change?",
        "createdAt" : "2018-07-19T22:29:55Z",
        "updatedAt" : "2018-08-02T22:06:29Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "16dc2297-b29f-4ff3-b8f4-08c76c202eaf",
        "parentId" : "c63ef0b0-f695-41c2-ae39-1c68f62a9558",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "As in description :)\r\n\r\n```\r\nBreak the main loop on put-raw-data and process-them. Since now not all data put into the queue would be processed completely within a single iteration.\r\n```",
        "createdAt" : "2018-07-19T23:00:56Z",
        "updatedAt" : "2018-08-02T22:06:29Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c57cec79fa53032b55dd7a5f374c9ee62c25098",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +837,841 @@        }\n\n        if (taskManager.hasActiveRunningTasks()) {\n            final long totalProcessed = processAndMaybeCommit(recordsProcessedBeforeCommit);\n            if (totalProcessed > 0) {"
  },
  {
    "id" : "cc613a3d-a1f9-42bc-9769-67afbf8c618b",
    "prId" : 5428,
    "prUrl" : "https://github.com/apache/kafka/pull/5428#pullrequestreview-144980385",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5ab64dfc-3195-40b6-b07d-d00e65254583",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Could we actually remove this guard? We don't call `time. milliseconds()` as below.",
        "createdAt" : "2018-08-08T22:55:11Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "0fe9115b-1f17-4987-871b-058233659276",
        "parentId" : "5ab64dfc-3195-40b6-b07d-d00e65254583",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "The intention is to save calling `taskManager.activeTaskIds(), taskManager.standbyTaskIds()` etc and pass them as parameters. It may not really introduce significant differences, but no harm to still keep them?",
        "createdAt" : "2018-08-09T00:06:00Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "e70120d2-9f20-4d3e-946d-c58af8566874",
        "parentId" : "5ab64dfc-3195-40b6-b07d-d00e65254583",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Fine with me to keep the guard. Was just double checking.",
        "createdAt" : "2018-08-09T18:56:36Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "71b2b16d0b0f37a05af3df60ae9b5ff88649a7a4",
    "line" : 320,
    "diffHunk" : "@@ -1,1 +1028,1032 @@                taskManager.maybePurgeCommitedRecords();\n\n                if (log.isDebugEnabled()) {\n                    log.debug(\"Committed all active tasks {} and standby tasks {} in {}ms\",\n                        taskManager.activeTaskIds(), taskManager.standbyTaskIds(), intervalCommitLatency);"
  },
  {
    "id" : "e00cb96a-3b9b-4595-a50f-c246899fab30",
    "prId" : 5428,
    "prUrl" : "https://github.com/apache/kafka/pull/5428#pullrequestreview-145833804",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad033956-8eed-4c8f-a155-6455ab5bd55e",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I didn't follow why we need this now. Can you explain?",
        "createdAt" : "2018-08-10T15:13:11Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "8851e650-64d0-48f9-ba02-0fe5e80c01c1",
        "parentId" : "ad033956-8eed-4c8f-a155-6455ab5bd55e",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is following the same PR that @mjsax had: https://github.com/apache/kafka/pull/5389\r\n\r\nThe point is that when a XXXConfig is created, by default it will print `logAll` and hence swamped the logs (we can see the same lists to be printed multiple times whenever it is created). This function is to disable `log` for such cases.",
        "createdAt" : "2018-08-10T23:23:23Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "35f89b4e-3c20-4cf7-9e6a-ff740560db27",
        "parentId" : "ad033956-8eed-4c8f-a155-6455ab5bd55e",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Ah! I misread this as turning `logAll` *on* instead of *off*. Now I get it :)",
        "createdAt" : "2018-08-13T21:00:25Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "71b2b16d0b0f37a05af3df60ae9b5ff88649a7a4",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +729,733 @@        }\n    }\n\n    /**\n     * Execute the stream processors"
  },
  {
    "id" : "878d8c45-8593-4636-92cd-47c5b59b7d92",
    "prId" : 5428,
    "prUrl" : "https://github.com/apache/kafka/pull/5428#pullrequestreview-149928399",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3f175717-5142-44ca-966c-722f9737c1b0",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "It seem we rely on `computeLatency()` above to advance `now` -- it seems \"dangerous\" to rely on a \"side effect\" for this. Should we advance time explicitly here? Or at least put a check if `now < lastPollMs || now > timeSinceLastPoll` ?",
        "createdAt" : "2018-08-25T00:22:19Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "433b6eb6-dc52-46ac-a6b1-7cc7451391a6",
        "parentId" : "3f175717-5142-44ca-966c-722f9737c1b0",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "The motivation of advancing `now` in `computeLatency` is to save on `milliseconds()` call. I admit it is not ideal, if we want to change it to a different way, say: passing `now` along the calls than using a variable at all, then I'd suggest we do it in a separate PR as this PR has been dragging too long.\r\n\r\nRegarding the check: that is a good idea, but I guess you mean `now - lastPollMs > timeSinceLastPoll` right? I will add that check.",
        "createdAt" : "2018-08-28T00:24:58Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "71b2b16d0b0f37a05af3df60ae9b5ff88649a7a4",
    "line" : 163,
    "diffHunk" : "@@ -1,1 +879,883 @@                }\n\n                timeSinceLastPoll = Math.max(now - lastPollMs, 0);\n\n                if (maybePunctuate() || maybeCommit()) {"
  },
  {
    "id" : "317c7c63-1664-4d1f-b369-867c7de07335",
    "prId" : 5428,
    "prUrl" : "https://github.com/apache/kafka/pull/5428#pullrequestreview-149929974",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c35edcca-d516-48e9-be09-9afa3b4a29bd",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: should we rename to `taskManger.maybePunctuate()` as well as `AssignedStreamTasks#maybePunctuate()` to align naming?",
        "createdAt" : "2018-08-25T00:24:17Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "ef470d7d-0fb5-4084-982b-9d85a3ef1569",
        "parentId" : "c35edcca-d516-48e9-be09-9afa3b4a29bd",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I think `commit()` and `punctuate()` in TaskManager is okay, as they return the number of actual number of punctuation / commits triggered, while the `maybeXX` returns true or false.",
        "createdAt" : "2018-08-28T00:28:20Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "71b2b16d0b0f37a05af3df60ae9b5ff88649a7a4",
    "line" : 245,
    "diffHunk" : "@@ -1,1 +994,998 @@     */\n    private boolean maybePunctuate() {\n        final int punctuated = taskManager.punctuate();\n        if (punctuated > 0) {\n            final long punctuateLatency = advanceNowAndComputeLatency();"
  },
  {
    "id" : "549de892-856c-43c9-b454-0e2768f87025",
    "prId" : 6107,
    "prUrl" : "https://github.com/apache/kafka/pull/6107#pullrequestreview-191960169",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c22a368-d6ee-47f4-8b52-526999732d17",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Could we have a comment on explaining what `shared` means in this context?",
        "createdAt" : "2019-01-13T04:37:00Z",
        "updatedAt" : "2019-01-23T23:34:09Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "65e8c144ba2d48adfd7b35fdfc7224106c295254",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +753,757 @@\n    // currently admin client is shared among all threads\n    public static String getSharedAdminClientId(final String clientId) {\n        return clientId + \"-admin\";\n    }"
  },
  {
    "id" : "1dbcc0dc-ba91-4f86-8eb8-5f4037c232c0",
    "prId" : 6107,
    "prUrl" : "https://github.com/apache/kafka/pull/6107#pullrequestreview-194213849",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "032fe55f-7b04-474c-a15b-688fe021e090",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Could we keep the format of `updateThreadMetadata` to avoid unnecessary changes on L1221?",
        "createdAt" : "2019-01-13T04:43:51Z",
        "updatedAt" : "2019-01-23T23:34:09Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "a128cdde-b232-429e-a21d-c0399721d5ad",
        "parentId" : "032fe55f-7b04-474c-a15b-688fe021e090",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I cannot completely follow since L1221 did not change, could you elaborate?",
        "createdAt" : "2019-01-15T22:22:51Z",
        "updatedAt" : "2019-01-23T23:34:09Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "67993f3b-1e4b-4ae4-a44a-9ca737632e14",
        "parentId" : "032fe55f-7b04-474c-a15b-688fe021e090",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "I mean, if we keep parameters in one line:\r\n` private void updateThreadMetadata(final Map<TaskId, StreamTask> activeTasks, final Map<TaskId, StandbyTask> standbyTasks)` then the changes shall be reduced.",
        "createdAt" : "2019-01-16T00:12:56Z",
        "updatedAt" : "2019-01-23T23:34:09Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "194b44d6-816c-44db-8546-3edd1eb50465",
        "parentId" : "032fe55f-7b04-474c-a15b-688fe021e090",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "The line is quite long, thus we should reformat it to make the code more readable. I am +1 on this change -- also, I don't think we should optimize for fewer line changes :)",
        "createdAt" : "2019-01-18T18:02:31Z",
        "updatedAt" : "2019-01-23T23:34:09Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "65e8c144ba2d48adfd7b35fdfc7224106c295254",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +1256,1260 @@    }\n\n    private void updateThreadMetadata(final Map<TaskId, StreamTask> activeTasks,\n                                      final Map<TaskId, StandbyTask> standbyTasks) {\n        final Set<String> producerClientIds = new HashSet<>();"
  },
  {
    "id" : "00a21281-57a2-4266-9a79-5a380d16f001",
    "prId" : 6107,
    "prUrl" : "https://github.com/apache/kafka/pull/6107#pullrequestreview-191960169",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1dfb3fd1-2a43-4334-8d88-f5e2913cf354",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Since this constructor is only called once, could we just reuse the constructor augmented:\r\n```\r\npublic ThreadMetadata(final String threadName,\r\n                          final String threadState,\r\n                          final String mainConsumerClientId,\r\n                          final String restoreConsumerClientId,\r\n                          final Set<String> producerClientIds,\r\n                          final String adminClientId,\r\n                          final Set<TaskMetadata> activeTasks,\r\n                          final Set<TaskMetadata> standbyTasks)\r\n```\r\nand set active & standby tasks with empty set? I figure this could reduce code redundancy.",
        "createdAt" : "2019-01-13T04:47:11Z",
        "updatedAt" : "2019-01-23T23:34:09Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "65e8c144ba2d48adfd7b35fdfc7224106c295254",
    "line" : 91,
    "diffHunk" : "@@ -1,1 +1243,1247 @@    StreamThread updateThreadMetadata(final String adminClientId) {\n\n        threadMetadata = new ThreadMetadata(\n            this.getName(),\n            this.state().name(),"
  },
  {
    "id" : "c54db788-4b0e-4327-8a43-6a7792edbc9d",
    "prId" : 6107,
    "prUrl" : "https://github.com/apache/kafka/pull/6107#pullrequestreview-194338978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bde155af-30ca-439f-8623-c4a10495adf9",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why do we not pass the admin client-id into the constructor?",
        "createdAt" : "2019-01-18T18:01:03Z",
        "updatedAt" : "2019-01-23T23:34:09Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "6463f541-b8f1-4946-a2cb-bbfe0b0b3f98",
        "parentId" : "bde155af-30ca-439f-8623-c4a10495adf9",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I've thought about passing in the client-id, it is a bit overkill in addition to the thread-client-id just to set the shared admin client inside the constructor. I felt the current way is less intrusive but if you feel strong the other way we can discuss.",
        "createdAt" : "2019-01-18T19:54:19Z",
        "updatedAt" : "2019-01-23T23:34:09Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "b4481aaf-458e-4a50-af76-6b6abcd43d60",
        "parentId" : "bde155af-30ca-439f-8623-c4a10495adf9",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Because the shared admit client id does never change, it seems weird to have a setter that allow to update is at any time. It seems cleaner to pass it in the constructor and make it immutable this way.",
        "createdAt" : "2019-01-19T02:13:31Z",
        "updatedAt" : "2019-01-23T23:34:09Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "65e8c144ba2d48adfd7b35fdfc7224106c295254",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +689,693 @@            logContext,\n            assignmentErrorCode)\n            .updateThreadMetadata(getSharedAdminClientId(clientId));\n    }\n"
  },
  {
    "id" : "c159aabb-12d3-468d-bdfc-94df7b8b3c6e",
    "prId" : 7008,
    "prUrl" : "https://github.com/apache/kafka/pull/7008#pullrequestreview-261449849",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "555df2e0-8564-409e-aec6-db275cefacd2",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Does this still work for optimized source tables, which read from the input topic instead?",
        "createdAt" : "2019-07-05T19:26:45Z",
        "updatedAt" : "2019-07-09T13:01:47Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "e6bb384d-541d-4952-a59a-b58d4bab6f46",
        "parentId" : "555df2e0-8564-409e-aec6-db275cefacd2",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Good point. Thinking about this, StandBys for source-KTables might have been broker for a long time already... (maybe since 0.10.0.0???)\r\n\r\nMaybe @cadonna can verify? If that is the case, we should split out a separate ticket and PR to fix StandBys for source-KTables independently.",
        "createdAt" : "2019-07-09T01:57:52Z",
        "updatedAt" : "2019-07-09T13:01:47Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "32b89725-86c4-4822-894a-13d4f041c31e",
        "parentId" : "555df2e0-8564-409e-aec6-db275cefacd2",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "Yeah, good point! Added an integration test to verify materialized and optimized source tables.",
        "createdAt" : "2019-07-09T13:03:17Z",
        "updatedAt" : "2019-07-09T13:03:17Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "4bf0d92c-c02b-4f77-aa59-b8e0ea86f592",
        "parentId" : "555df2e0-8564-409e-aec6-db275cefacd2",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Cannot follow. You test seem to use the PAPI, and the PAPI does not provide the KTable optimization. You would need to use `StreamBuilder#table()` to test the changelog optimization.",
        "createdAt" : "2019-07-10T20:54:39Z",
        "updatedAt" : "2019-07-10T20:54:40Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "6e5e4926-58bf-4281-961c-aacf3831ffd5",
        "parentId" : "555df2e0-8564-409e-aec6-db275cefacd2",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "See `StandbyTaskCreationIntegrationTest` line 128.",
        "createdAt" : "2019-07-12T19:59:51Z",
        "updatedAt" : "2019-07-12T19:59:51Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "ae3290c70e892fdadcd6585d2e05696628689718",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +496,500 @@            final ProcessorTopology topology = builder.build(taskId.topicGroupId);\n\n            if (!topology.stateStores().isEmpty() && !topology.storeToChangelogTopic().isEmpty()) {\n                return new StandbyTask(\n                    taskId,"
  },
  {
    "id" : "2b029000-687e-4961-a11a-6458190accba",
    "prId" : 7021,
    "prUrl" : "https://github.com/apache/kafka/pull/7021#pullrequestreview-259661520",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47cb6d36-31fe-4f69-88e8-6a5878b598fb",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "This might be miss leading for users who don't know the details. What about:\r\n```\r\nlog.debug(\"Ignoring request to transit from PENDING_SHUTDOWN to {}\", newState);\r\n```",
        "createdAt" : "2019-07-09T00:53:26Z",
        "updatedAt" : "2019-07-10T15:28:46Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "3706ba2e-4a23-4c73-8c19-52590752f8d9",
        "parentId" : "47cb6d36-31fe-4f69-88e8-6a5878b598fb",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Would be better to add an explanation for ignorance?",
        "createdAt" : "2019-07-09T02:26:13Z",
        "updatedAt" : "2019-07-10T15:28:46Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "3b4424e2-170c-4710-87b2-22e13e51682e",
        "parentId" : "47cb6d36-31fe-4f69-88e8-6a5878b598fb",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Sure. Why not. I just would avoid the term \"invalid\" because it might confuse users (they may thing something bad happens, but it's expected and not bad).",
        "createdAt" : "2019-07-09T03:35:16Z",
        "updatedAt" : "2019-07-10T15:28:46Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "375bc4bd-465a-4375-afde-cfbc3459b84a",
        "parentId" : "47cb6d36-31fe-4f69-88e8-6a5878b598fb",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Sounds good",
        "createdAt" : "2019-07-09T17:48:03Z",
        "updatedAt" : "2019-07-10T15:28:46Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c6ec626b0d4a4252209fffa8f705fcda739a2e7",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +192,196 @@            if (state == State.PENDING_SHUTDOWN && newState != State.DEAD) {\n                log.debug(\"Ignoring request to transit from PENDING_SHUTDOWN to {}: \" +\n                              \"only DEAD state is a valid next state\", newState);\n                // when the state is already in PENDING_SHUTDOWN, all other transitions will be\n                // refused but we do not throw exception here"
  },
  {
    "id" : "78d4b7a2-ddd0-41b4-bf0f-0229f0a3700f",
    "prId" : 7021,
    "prUrl" : "https://github.com/apache/kafka/pull/7021#pullrequestreview-259223839",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "817c3a8d-384e-4dc1-8981-84e901384681",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Similar to above.",
        "createdAt" : "2019-07-09T00:53:36Z",
        "updatedAt" : "2019-07-10T15:28:46Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c6ec626b0d4a4252209fffa8f705fcda739a2e7",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +198,202 @@            } else if (state == State.DEAD) {\n                log.debug(\"Ignoring request to transit from DEAD to {}: \" +\n                              \"no valid next state after DEAD\", newState);\n                // when the state is already in NOT_RUNNING, all its transitions\n                // will be refused but we do not throw exception here"
  },
  {
    "id" : "f95fc721-ad56-4b8c-b913-0b72096d3a23",
    "prId" : 7021,
    "prUrl" : "https://github.com/apache/kafka/pull/7021#pullrequestreview-262101642",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a648713-3081-49a9-9c04-5288224851ea",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Thinking about this, I am wondering if we should just change the FSM to allow this transition and simplify the code here? \\cc @guozhangwang ",
        "createdAt" : "2019-07-09T00:57:20Z",
        "updatedAt" : "2019-07-10T15:28:46Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "fca57b9d-a76c-4551-b5e5-20f20462e563",
        "parentId" : "9a648713-3081-49a9-9c04-5288224851ea",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I thought about this when tightening the FSM before but the unit tests reminds me of one thing: our current contract is that we only transit to PARTITIONS_REVOKED when calling onPartitionsRevoked, which is called only once at the beginning of the rebalance today, so keeping it strict is better just in case we have incorrect partial rebalance procedure.\r\n\r\nWith KIP-429 this may be violated so we need to revisit our FSM once Streams adopt cooperative protocols. cc @ableegoldman who's working on this.",
        "createdAt" : "2019-07-15T22:10:30Z",
        "updatedAt" : "2019-07-15T22:45:32Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c6ec626b0d4a4252209fffa8f705fcda739a2e7",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +204,208 @@            } else if (state == State.PARTITIONS_REVOKED && newState == State.PARTITIONS_REVOKED) {\n                log.debug(\"Ignoring request to transit from PARTITIONS_REVOKED to PARTITIONS_REVOKED: \" +\n                              \"self transition is not allowed\");\n                // when the state is already in PARTITIONS_REVOKED, its transition to itself will be\n                // refused but we do not throw exception here"
  },
  {
    "id" : "90957c73-eeb9-4904-954f-ab81fda5a10d",
    "prId" : 7021,
    "prUrl" : "https://github.com/apache/kafka/pull/7021#pullrequestreview-259768529",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e500e085-5c36-4d24-abe7-dabc6c466a17",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "Isn't this a rather brittle fix? How does this code guarantee that after `streamThread.assignmentErrorCode.get() != StreamsPartitionAssignor.Error.NONE.code()` is `false`, the result of `streamThread.assignmentErrorCode.get()` does not change again before the tasks are created? ",
        "createdAt" : "2019-07-09T09:11:49Z",
        "updatedAt" : "2019-07-10T15:28:46Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "d34d49ca-7090-47c9-b90b-88f1029e2bb1",
        "parentId" : "e500e085-5c36-4d24-abe7-dabc6c466a17",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "in `PartitionsAssigned` we should have already passed the assignment error placement, so I won't expect another flip for its value during this round rebalance.",
        "createdAt" : "2019-07-09T20:05:22Z",
        "updatedAt" : "2019-07-10T15:28:46Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "d3b7836c-068d-4517-95f9-b0b5b80a91d3",
        "parentId" : "e500e085-5c36-4d24-abe7-dabc6c466a17",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "Makes sense",
        "createdAt" : "2019-07-09T21:25:21Z",
        "updatedAt" : "2019-07-10T15:28:46Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c6ec626b0d4a4252209fffa8f705fcda739a2e7",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +279,283 @@                        streamThread.state()\n                    );\n                } else if (streamThread.assignmentErrorCode.get() != StreamsPartitionAssignor.Error.NONE.code()) {\n                    log.debug(\n                        \"Encountered assignment error during partition assignment: {}. Skipping task initialization\","
  },
  {
    "id" : "65144890-b13a-4dda-b21b-5abdc8f98bc9",
    "prId" : 7021,
    "prUrl" : "https://github.com/apache/kafka/pull/7021#pullrequestreview-262101642",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f130aa1-de09-4d7d-925c-7ee05232ebc9",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Nice catch.",
        "createdAt" : "2019-07-15T22:12:03Z",
        "updatedAt" : "2019-07-15T22:45:32Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c6ec626b0d4a4252209fffa8f705fcda739a2e7",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +291,295 @@                log.error(\n                    \"Error caught during partition assignment, \" +\n                        \"will abort the current process and re-throw at the end of rebalance\", t);\n                streamThread.setRebalanceException(t);\n            } finally {"
  },
  {
    "id" : "16c19dd9-c9bb-468c-afc3-27d007f74c7f",
    "prId" : 7143,
    "prUrl" : "https://github.com/apache/kafka/pull/7143#pullrequestreview-269804841",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "80ec6b1b-ba00-421b-bda3-9df84e8227e6",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "The problem was here: `committed` could be zero without this fix.",
        "createdAt" : "2019-08-01T01:19:47Z",
        "updatedAt" : "2019-08-01T01:19:47Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "ad90e171-bcab-4d7f-a19c-b4b8278067bd",
        "parentId" : "80ec6b1b-ba00-421b-bda3-9df84e8227e6",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Seems like this should have noticeably screwed up these metrics, do we think this branch is just rarely seen or no one has noticed somehow?",
        "createdAt" : "2019-08-01T17:58:48Z",
        "updatedAt" : "2019-08-01T17:58:48Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "f9ed7e88-ae2c-42d1-8b3b-f7e132e81799",
        "parentId" : "80ec6b1b-ba00-421b-bda3-9df84e8227e6",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I think it's rarely executed. Only if a PAPI user request committing via `context.commit()`, what is expected to be rarely used feature.",
        "createdAt" : "2019-08-01T18:35:21Z",
        "updatedAt" : "2019-08-01T18:35:21Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb9409410771116061cc2e3ae35fce6bc8cc67a9",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +1071,1075 @@            if (committed > 0) {\n                final long requestCommitLatency = advanceNowAndComputeLatency();\n                commitSensor.record(requestCommitLatency / (double) committed, now);\n            }\n        }"
  }
]