[
  {
    "id" : "cdf26b7f-c2ed-4a1f-a6e7-85ecdca07c19",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-305417245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96d3a21e-276c-4dac-9018-96b33e28ef8b",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: add missing empty line",
        "createdAt" : "2019-10-22T18:34:27Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +62,66 @@                                            final Aggregator<? super K, ? super VIn, VOut> aggregator);\n\n    /**\n     * Aggregate the values of records in these streams by the grouped key.\n     * Records with {@code null} key or value are ignored."
  },
  {
    "id" : "399fb9d3-a051-4a65-a854-ec2b73adffb2",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-305417245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dd5033a-e33a-497e-af5b-55e43c727581",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Nit: we don't need this tag before the parameter list.",
        "createdAt" : "2019-10-22T18:35:29Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +48,52 @@     * {@link KStream#groupByKey() grouping} the {@link KStream}, using a pre-created topic with the \"correct\" number of\n     * partitions.\n     * <p>\n     * The specified {@link Aggregator} is applied in the actual {@link #aggregate(Initializer) aggregation} step for\n     * each input record and computes a new aggregate using the current aggregate (or for the very first record per key"
  },
  {
    "id" : "b6276251-2596-4f4f-b195-25336d0ee162",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-323394971",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d68e31b-9c07-4624-b495-592c84dc530b",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "`It is an intermediate representation` is somewhat redundant (use in the sentence before already. Maybe merge this sentence into the paragraph above?",
        "createdAt" : "2019-11-27T02:20:59Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +29,33 @@ * {@code CogroupedKStream} is an abstraction of multiple <i>grouped</i> record streams of {@link KeyValue} pairs.\n * <p>\n * It is an intermediate representation after a grouping of {@link KStream}s, before the\n * aggregations are applied to the new partitions resulting in a {@link KTable}.\n * <p>"
  },
  {
    "id" : "a182debe-48dc-4228-87dd-6bcebcd56d2d",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-323885159",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4360b57-30ca-4fd5-b7c3-4e54d37a8665",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "`get()` returns a `ValueAndTimestamp<Long>` -- not sure if we should add a `.value()` call to the right hand side or change the return type left hand side? Maybe easier to change to \r\n```\r\nLong aggForKey = localStore.get(key).value(); // ...\r\n```\r\n\r\n",
        "createdAt" : "2019-11-27T02:29:08Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "539578b1-7ffb-490d-b5b1-c04ee711c855",
        "parentId" : "b4360b57-30ca-4fd5-b7c3-4e54d37a8665",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "It actually uses a KeyValueStore. I have updated the docs to reflect that, I had missed a few places before . ",
        "createdAt" : "2019-11-27T18:29:59Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      },
      {
        "id" : "a5459bee-c082-4747-ad6c-3282da96917b",
        "parentId" : "b4360b57-30ca-4fd5-b7c3-4e54d37a8665",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "https://issues.apache.org/jira/browse/KAFKA-9243",
        "createdAt" : "2019-11-27T18:54:07Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 90,
    "diffHunk" : "@@ -1,1 +88,92 @@     * KeyValueStore<String, Long> localStore = streams.store(queryableStoreName, QueryableStoreTypes.<String, Long>keyValueStore());\n     * String key = \"some-key\";\n     * Long aggForKey = localStore.get(key); // key must be local (application state is shared over all running Kafka Streams instances)\n     * }</pre>\n     * For non-local keys, a custom RPC mechanism must be implemented using {@link KafkaStreams#allMetadata()} to query"
  },
  {
    "id" : "faad4a14-a428-457b-9aca-c23daae387af",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-324914943",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7eaa9d3-a33b-41b6-b099-f53d946a32a1",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I reordered the method from \"few parameter\" to \"more parameters\" to make it easier to navigate within the file.",
        "createdAt" : "2019-12-01T00:48:25Z",
        "updatedAt" : "2019-12-01T00:48:26Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +108,112 @@     * represent the latest (rolling) aggregate for each key\n     */\n    KTable<K, VOut> aggregate(final Initializer<VOut> initializer);\n\n    /**"
  },
  {
    "id" : "8b478e20-3344-4988-9681-2bf09f49fd4f",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-324914953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "144751f3-d55c-4082-a3dc-b16eb2ebe8a3",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "New paragraph. ",
        "createdAt" : "2019-12-01T00:48:50Z",
        "updatedAt" : "2019-12-01T00:48:50Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +47,51 @@     * If this is not the case, you would need to call {@link KStream#through(String)} before\n     * {@link KStream#groupByKey() grouping} the {@link KStream}, using a pre-created topic with the \"correct\" number of\n     * partitions.\n     * <p>\n     * The specified {@link Aggregator} is applied in the actual {@link #aggregate(Initializer) aggregation} step for"
  },
  {
    "id" : "0d342090-b9a2-4814-9e8e-342a55539074",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-324914985",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4845182d-0366-4164-bd04-6961923d6507",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "New sentence.",
        "createdAt" : "2019-12-01T00:49:59Z",
        "updatedAt" : "2019-12-01T00:49:59Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +70,74 @@     * <p>\n     * To compute the aggregation the corresponding {@link Aggregator} as specified in\n     * {@link #cogroup(KGroupedStream, Aggregator) cogroup(...)} is used per input stream.\n     * The specified {@link Initializer} is applied once per key, directly before the first input record per key is\n     * processed to provide an initial intermediate aggregation result that is used to process the first record."
  },
  {
    "id" : "cf859cd8-d7ac-4a08-be10-4ef8f4411b24",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-324915006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cf8f8b8-5690-44d4-a54e-b30cacdcebc9",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "added `per key` (twice)",
        "createdAt" : "2019-12-01T00:50:46Z",
        "updatedAt" : "2019-12-01T00:50:46Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +72,76 @@     * {@link #cogroup(KGroupedStream, Aggregator) cogroup(...)} is used per input stream.\n     * The specified {@link Initializer} is applied once per key, directly before the first input record per key is\n     * processed to provide an initial intermediate aggregation result that is used to process the first record.\n     * <p>\n     * Not all updates might get sent downstream, as an internal cache is used to deduplicate consecutive updates to the"
  },
  {
    "id" : "2179d474-53ec-4628-ba82-2606f5c7663d",
    "prId" : 9039,
    "prUrl" : "https://github.com/apache/kafka/pull/9039#pullrequestreview-476853714",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c80f2cde-6fa9-4131-8542-989c6a22d21c",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "This PR is rather larger. Would it maybe make sense to split it into 2 and add co-group in it's own PR?",
        "createdAt" : "2020-08-04T00:21:03Z",
        "updatedAt" : "2020-08-31T22:19:06Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "074fbcc1-75a4-44e2-8847-0a9eac1a6fa1",
        "parentId" : "c80f2cde-6fa9-4131-8542-989c6a22d21c",
        "authorId" : "114424ac-2f76-47ba-b653-f85692b08607",
        "body" : "We could, but it would only pull out 3ish classes and not very many lines, so I don't think it would make this PR feel much smaller",
        "createdAt" : "2020-08-04T21:15:01Z",
        "updatedAt" : "2020-08-31T22:19:06Z",
        "lastEditedBy" : "114424ac-2f76-47ba-b653-f85692b08607",
        "tags" : [
        ]
      },
      {
        "id" : "1951e2b8-4038-48cd-8fe3-1eedecb651d3",
        "parentId" : "c80f2cde-6fa9-4131-8542-989c6a22d21c",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Seems like the cogroup stuff makes up a pretty small amount of the overall PR, but up to Leah",
        "createdAt" : "2020-08-04T22:45:29Z",
        "updatedAt" : "2020-08-31T22:19:06Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "83b7c047-bb89-4ef3-a07a-b348dc64d355",
        "parentId" : "c80f2cde-6fa9-4131-8542-989c6a22d21c",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Ack. Was just a thought.",
        "createdAt" : "2020-08-05T22:01:14Z",
        "updatedAt" : "2020-08-31T22:19:06Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "545c909c-b8fa-4fe4-852f-301cde019d95",
        "parentId" : "c80f2cde-6fa9-4131-8542-989c6a22d21c",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I'm reviewing this whole PR as-is, so there's no need to do anything now, but @mjsax 's specific suggestion is beside the point. The general feedback is that this PR is too large, which it is. We shoot for under 1K, and it's the PR author's responsibility to figure out the best way to break it up.\r\n\r\nThis policy isn't just \"reviewers complaining,\" it's an important component of ensuring AK's quality. Long PRs overwhelm any reviewer's cognitive capacity to pay attention to every detail, so oversights are more likely to slip through into the codebase, and once they're there, you're really at the mercy of the testing layers to catch them. When the oversights are very subtle, they wind up getting released and then surface as user-reported bugs. Reviewers can't guarantee to notice every problem, but our capacity to notice problems is inversely proportional to the length of the PR.",
        "createdAt" : "2020-08-27T15:45:49Z",
        "updatedAt" : "2020-08-31T22:19:06Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "a322c095-c0d0-4aaa-96a8-b302a6048828",
        "parentId" : "c80f2cde-6fa9-4131-8542-989c6a22d21c",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Coming back to this after completing the review, I'd say the biggest advice I'd share is to avoid whitespace changes and cleanups on the side when the PR is so long already. In fact, for my own super-complex PRs, I tend to go back over the whole diff and back out anything that's not critically important, just to lighten the load on the reviewers.\r\n\r\nCleanups are nice to have, but it's better to keep them in their own PRs or in more trivial ones.",
        "createdAt" : "2020-08-27T21:32:52Z",
        "updatedAt" : "2020-08-31T22:19:06Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "de97db6cf39eb34eab0207f3cc45a5085317b2a4",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +283,287 @@     * @return an instance of {@link TimeWindowedCogroupedKStream}\n     */\n    TimeWindowedCogroupedKStream<K, VOut> windowedBy(final SlidingWindows windows);\n\n    /**"
  }
]