[
  {
    "id" : "41a635b1-d7ee-4694-9007-26a4d5df0c7d",
    "prId" : 5742,
    "prUrl" : "https://github.com/apache/kafka/pull/5742#pullrequestreview-161798478",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b3183f2-b51c-4eff-9f13-bd81dd13891c",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "The pre-canned Max-and-Avg function in StreamsMetricsImpl is specifically for latencies, which this is not. Hence adding the metrics right here.",
        "createdAt" : "2018-10-04T20:34:36Z",
        "updatedAt" : "2018-10-11T21:06:03Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "51c80eb6ad182197f8e09839b617db13053938ea",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +73,77 @@                tags),\n            new Max()\n        );\n        return sensor;\n    }"
  },
  {
    "id" : "bb4f4342-4c88-4d23-b06f-68d4d47b96ab",
    "prId" : 5742,
    "prUrl" : "https://github.com/apache/kafka/pull/5742#pullrequestreview-162551904",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "890dce29-e64a-4b1b-bf74-3aa829671dc3",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This is debug now",
        "createdAt" : "2018-10-08T16:35:30Z",
        "updatedAt" : "2018-10-11T21:06:03Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "51c80eb6ad182197f8e09839b617db13053938ea",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +52,56 @@            context.taskId().toString(),\n            \"record-lateness\",\n            Sensor.RecordingLevel.DEBUG\n        );\n"
  },
  {
    "id" : "7ac0c485-66ad-41be-8729-60823be4c37d",
    "prId" : 5787,
    "prUrl" : "https://github.com/apache/kafka/pull/5787#pullrequestreview-164952823",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "866c4275-5134-4134-a2d5-bbdeb88afa97",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "While documenting the metrics, I noticed I named the group wrong.",
        "createdAt" : "2018-10-16T01:16:47Z",
        "updatedAt" : "2018-10-16T01:16:47Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "3d89677ed0f29cf7aa5c9c14a3ab7467d517ea22",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +61,65 @@            new MetricName(\n                \"record-lateness-avg\",\n                \"stream-task-metrics\",\n                \"The average observed lateness of records.\",\n                tags),"
  },
  {
    "id" : "eadca3a2-b102-420b-ac91-9a2333cd2d5f",
    "prId" : 5795,
    "prUrl" : "https://github.com/apache/kafka/pull/5795#pullrequestreview-166721923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e990acd6-bf7b-416d-b495-ddcfec8f395b",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This sensor is different than that proposed in the kip. During implementation, I noticed a weird asymmetry in which the processor node would measure the suppression, but the buffer would measure the \"eviction\" aka \"emission\" aka \"forwarding\".\r\n\r\nI'm proposing to update the KIP to make these two measurements symmetrical.",
        "createdAt" : "2018-10-16T19:35:08Z",
        "updatedAt" : "2018-11-27T01:22:02Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "4690df45-7094-4c2a-8acf-344a4621ffef",
        "parentId" : "e990acd6-bf7b-416d-b495-ddcfec8f395b",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "I didn't think of that before, but now that you mention it, the change makes sense to me.",
        "createdAt" : "2018-10-19T23:41:54Z",
        "updatedAt" : "2018-11-27T01:22:02Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd8806c91d24ee933ce6e1ab8972e725bf42ef12",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +84,88 @@    }\n\n    public static Sensor suppressionEmitSensor(final InternalProcessorContext context) {\n        final StreamsMetricsImpl metrics = context.metrics();\n"
  },
  {
    "id" : "96affed6-e231-40f8-bb6c-d80d4563188c",
    "prId" : 5795,
    "prUrl" : "https://github.com/apache/kafka/pull/5795#pullrequestreview-166721923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c0ee3b6-4574-4aa5-94ff-2ec6fc8c4356",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "seems like the contents of the two `sensor#add` methods are the same as above maybe refactor into two methods?",
        "createdAt" : "2018-10-19T23:19:41Z",
        "updatedAt" : "2018-11-27T01:22:02Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd8806c91d24ee933ce6e1ab8972e725bf42ef12",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +100,104 @@\n        sensor.add(\n            new MetricName(\n                \"suppression-emit-rate\",\n                PROCESSOR_NODE_METRICS_GROUP,"
  },
  {
    "id" : "7f248c3b-b501-47ad-a747-4ad8639bb396",
    "prId" : 7416,
    "prUrl" : "https://github.com/apache/kafka/pull/7416#pullrequestreview-297064264",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e58fe60-21fb-44b1-a7a4-d2ac64a03a2d",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Is this always right? It would set the threadId as the name of the thread that constructed the sensor, but is this always the StreamThread? Even if it is today, it wouldn't be outrageous to think in the future that another thread might build a task and then pass it to the thread to execute. Such a refactoring would break this logic, but it would be very subtle.\r\n\r\nIn contrast, the old code here explicitly passed the thread name via the context, so it would never be set incorrectly just by changing the way that the code is invoked. Perhaps we could preserve this property, for example by passing the thread name as a method argument.",
        "createdAt" : "2019-10-02T19:45:24Z",
        "updatedAt" : "2019-10-04T08:23:54Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "6b351e38-4561-4397-8df1-b7f7223ba43b",
        "parentId" : "9e58fe60-21fb-44b1-a7a4-d2ac64a03a2d",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Just checked the code path, passing the thread name via `GlobalStreamThread / StreamThread -> StreamTask -> ProcessorContextImpl` maybe fine.",
        "createdAt" : "2019-10-02T22:05:01Z",
        "updatedAt" : "2019-10-04T08:23:54Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "220d4658-9388-412c-b7a0-15af98bca165",
        "parentId" : "9e58fe60-21fb-44b1-a7a4-d2ac64a03a2d",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "@vvcephei, you are right. This is not general enough. On thread-level -- for instance -- sensors are created by the main thread and then used in the stream thread. Here, instead of passing it through `InternalProcessorContext`, I would pass it as a separate parameter to `lateRecordDropSensor()`. According to KIP-444 `late-record-drop` will be superseded with `dropped-records` and `lateRecordDropSensor()` will most probably disappear. Actually, since it is currently not a problem at all because the calling thread is the stream thread, I would leave it as it is.",
        "createdAt" : "2019-10-03T17:59:34Z",
        "updatedAt" : "2019-10-04T08:23:54Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "455dc8fc-9069-4b62-a365-766e690ac929",
        "parentId" : "9e58fe60-21fb-44b1-a7a4-d2ac64a03a2d",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Ok, sounds fine to me, as long as we're aware of the risk.",
        "createdAt" : "2019-10-03T18:25:31Z",
        "updatedAt" : "2019-10-04T08:23:54Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab3c0436cf659dd6f76b2b6b5360d327bad385bb",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +39,43 @@    public static Sensor lateRecordDropSensor(final InternalProcessorContext context) {\n        final StreamsMetricsImpl metrics = context.metrics();\n        final String threadId = Thread.currentThread().getName();\n\n        final Sensor sensor = metrics.nodeLevelSensor("
  },
  {
    "id" : "4cd7b779-20f1-42f9-9dc5-c139a926069a",
    "prId" : 7416,
    "prUrl" : "https://github.com/apache/kafka/pull/7416#pullrequestreview-296549298",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3795ab8e-ae6b-43d4-bf02-3213c602084d",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "After the other PR is merged, this part can be leveraged / rebased, just a reminder :)",
        "createdAt" : "2019-10-02T21:55:11Z",
        "updatedAt" : "2019-10-04T08:23:54Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ab3c0436cf659dd6f76b2b6b5360d327bad385bb",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +51,55 @@            sensor,\n            PROCESSOR_NODE_METRICS_GROUP,\n            metrics.tagMap(\n                threadId,\n                \"task-id\","
  }
]