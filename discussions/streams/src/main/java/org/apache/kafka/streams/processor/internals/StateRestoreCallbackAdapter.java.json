[
  {
    "id" : "8a12cdae-ab6f-453c-850a-e2d04037748a",
    "prId" : 5710,
    "prUrl" : "https://github.com/apache/kafka/pull/5710#pullrequestreview-160053424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70e4c05b-e1ad-4754-92b8-e52e1cb21bc1",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "nit: can we omit this constructor since JDK will create the default one just like this right?",
        "createdAt" : "2018-09-28T22:52:34Z",
        "updatedAt" : "2018-09-29T02:36:52Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "1f378d55-acd7-48c3-a603-10bf80c6ce9e",
        "parentId" : "70e4c05b-e1ad-4754-92b8-e52e1cb21bc1",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This privatizes the constructor to ensure the class can't be instantiated (thus only used as a container for static methods)",
        "createdAt" : "2018-09-28T23:09:56Z",
        "updatedAt" : "2018-09-29T02:36:52Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "23654fc4-0342-440a-9ccd-48af2e8794c6",
        "parentId" : "70e4c05b-e1ad-4754-92b8-e52e1cb21bc1",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Ack",
        "createdAt" : "2018-09-28T23:46:29Z",
        "updatedAt" : "2018-09-29T02:36:52Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb44b1306c0fb643cc1df100c6fbea5427706d28",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@\npublic final class StateRestoreCallbackAdapter {\n    private StateRestoreCallbackAdapter() {}\n\n    public static RecordBatchingStateRestoreCallback adapt(final StateRestoreCallback restoreCallback) {"
  },
  {
    "id" : "2cadc81a-bc87-45ba-b335-4330798561ef",
    "prId" : 5710,
    "prUrl" : "https://github.com/apache/kafka/pull/5710#pullrequestreview-160054614",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "82605106-e4cb-46bd-a613-e9765c5e4413",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "If `restoreCallback` is null we will throw NPE here right?",
        "createdAt" : "2018-09-28T23:01:29Z",
        "updatedAt" : "2018-09-29T02:36:52Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "1d5dc132-b569-46f7-86d6-7081b37536fe",
        "parentId" : "82605106-e4cb-46bd-a613-e9765c5e4413",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "We would throw the NPE later on when `restoreRecords` is actually called, which is what currently happens with the `WrappedBatchingStateRestoreCallback`.\r\n\r\nWould you feel better to surface the NPE immediately with a check at the beginning of `adapt`?",
        "createdAt" : "2018-09-28T23:43:13Z",
        "updatedAt" : "2018-09-29T02:36:52Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "8f91a4de-d2ef-4469-b19c-add202323a5d",
        "parentId" : "82605106-e4cb-46bd-a613-e9765c5e4413",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I think this would be better, unless there's some semantics around registering a null callback.",
        "createdAt" : "2018-09-28T23:44:09Z",
        "updatedAt" : "2018-09-29T02:36:52Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "f7c41d94-0f36-4b39-8575-10543fc89049",
        "parentId" : "82605106-e4cb-46bd-a613-e9765c5e4413",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Yeah I felt it is better to guard against null beforehand. This actually come from the unit test where we do `adapt(null).restore(null)` where the `restore` function is supposed to throw not-supported exception, while I was a bit frowning upon it.",
        "createdAt" : "2018-09-28T23:48:48Z",
        "updatedAt" : "2018-09-29T02:36:52Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "b23d1a74-f1bd-43f1-855b-8254245225f5",
        "parentId" : "82605106-e4cb-46bd-a613-e9765c5e4413",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "ok, it's done now.",
        "createdAt" : "2018-09-28T23:57:57Z",
        "updatedAt" : "2018-09-29T02:36:52Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "bb44b1306c0fb643cc1df100c6fbea5427706d28",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +45,49 @@            return records -> {\n                for (final ConsumerRecord<byte[], byte[]> record : records) {\n                    restoreCallback.restore(record.key(), record.value());\n                }\n            };"
  }
]