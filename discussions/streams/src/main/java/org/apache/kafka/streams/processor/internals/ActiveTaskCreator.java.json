[
  {
    "id" : "dbf296f3-76da-4dd0-84da-37e0759faa1b",
    "prId" : 8213,
    "prUrl" : "https://github.com/apache/kafka/pull/8213#pullrequestreview-369762637",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "866a91de-d99a-40aa-b005-1fbdb028e656",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Pulled out of StreamThread (could have been done a long time ago, since it was a static class anyway). I didn't embed it in TaskManager, just to keep the file size lower.\r\n\r\nI also dropped AbstractTaskCreator, since the creation of Active and Standby tasks are only similar, not exactly the same. We weren't really using the abstraction for much except de-duplicating a few field declarations. On the con side, the abstraction made it hard to see that we were requiring several arguments for Standby task creation that were actually not ever used. The indirection also made it harder to read the task creation logic.",
        "createdAt" : "2020-03-03T22:17:54Z",
        "updatedAt" : "2020-03-05T18:59:47Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "fd88cf13-182c-453a-83c3-a5a12759f940",
        "parentId" : "866a91de-d99a-40aa-b005-1fbdb028e656",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Sounds good to me",
        "createdAt" : "2020-03-05T17:18:51Z",
        "updatedAt" : "2020-03-05T18:59:47Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2eb596b0721bcf1908d19f811d96e5121ca4e41d",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +47,51 @@import static org.apache.kafka.streams.StreamsConfig.EXACTLY_ONCE;\n\nclass ActiveTaskCreator {\n    private final String applicationId;\n    private final InternalTopologyBuilder builder;"
  },
  {
    "id" : "63b8726d-3175-4d0e-bcb1-67be256b1031",
    "prId" : 8218,
    "prUrl" : "https://github.com/apache/kafka/pull/8218#pullrequestreview-373204683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dabc7c6e-0814-465e-b275-dbc4bdd8a3ad",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "nit: we could log thread-id here for easier log search.",
        "createdAt" : "2020-03-11T03:27:07Z",
        "updatedAt" : "2020-03-19T08:49:21Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "7f4c2126-78ee-4ccf-88b4-99df522fde26",
        "parentId" : "dabc7c6e-0814-465e-b275-dbc4bdd8a3ad",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "The `threadId` is already added to the log prefix when the `log` object is created in `StreamsThread`",
        "createdAt" : "2020-03-12T00:07:25Z",
        "updatedAt" : "2020-03-19T08:49:21Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b03a487a518756f7c9acd1f3177b12b407867d5",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +99,103 @@            taskProducers = new HashMap<>();\n        } else {\n            log.info(\"Creating thread producer client\");\n\n            final String threadProducerClientId = getThreadProducerClientId(threadId);"
  },
  {
    "id" : "79ab877b-14b7-430c-bbdc-552b6d330a1b",
    "prId" : 8218,
    "prUrl" : "https://github.com/apache/kafka/pull/8218#pullrequestreview-375674769",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46f89033-860c-4c19-9538-ebee1dfb5890",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "We need a unit test for this function.",
        "createdAt" : "2020-03-16T16:00:20Z",
        "updatedAt" : "2020-03-19T08:49:21Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "33acc73f-daac-45b6-b0b1-855bd81fe456",
        "parentId" : "46f89033-860c-4c19-9538-ebee1dfb5890",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "`For the next PR` (all other comments with this tag means no changes required for this PR): my understanding is that we would make the thread-producer also a `StreamsProducer` instead of a `KafkaProducer` which would be used to `commitTransaction` under `eosBeta`, is that right?",
        "createdAt" : "2020-03-16T22:07:16Z",
        "updatedAt" : "2020-03-19T08:49:21Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "cfdafe5b-7906-4384-b34d-05d933a4e21b",
        "parentId" : "46f89033-860c-4c19-9538-ebee1dfb5890",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Correct. For eos-beta there will be one `StreamsProducer` that is shared over all tasks.",
        "createdAt" : "2020-03-17T00:58:53Z",
        "updatedAt" : "2020-03-19T08:49:21Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b03a487a518756f7c9acd1f3177b12b407867d5",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +109,113 @@    }\n\n    StreamsProducer streamsProducerForTask(final TaskId taskId) {\n        if (threadProducer != null) {\n            throw new IllegalStateException(\"Producer per thread is used\");"
  },
  {
    "id" : "065ae6b8-3a27-4e07-bd89-f35198c174a5",
    "prId" : 8218,
    "prUrl" : "https://github.com/apache/kafka/pull/8218#pullrequestreview-376315317",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e259bf5-fceb-463b-bae7-66ccab6e8116",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "nit: we can have a wrapped StreamsProducer#close / metrics, and then #kafkaProducer would be for testing-only.",
        "createdAt" : "2020-03-16T22:08:31Z",
        "updatedAt" : "2020-03-19T08:49:21Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "9d93dc3a-7825-44b9-91c9-50db767ac081",
        "parentId" : "4e259bf5-fceb-463b-bae7-66ccab6e8116",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "We could, but the idea was that `ActiveTaskCreator` creates the producer via `new KafkaProducer()` and thus it should call `KafkaProducer#close()`, too, and not delegate it to `StreamsProducer`. Thoughts?",
        "createdAt" : "2020-03-17T01:00:30Z",
        "updatedAt" : "2020-03-19T08:49:21Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "66475b7c-d12e-4a51-9558-e952ad5a7b11",
        "parentId" : "4e259bf5-fceb-463b-bae7-66ccab6e8116",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Hmm, I think moving forward we would create and maintain both the single thread-producer and task-producers as StreamsProducer objects right?",
        "createdAt" : "2020-03-17T18:28:21Z",
        "updatedAt" : "2020-03-19T08:49:21Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "f79e5b9d-d82b-4bad-b750-8ebd73f10035",
        "parentId" : "4e259bf5-fceb-463b-bae7-66ccab6e8116",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "SGTM",
        "createdAt" : "2020-03-17T18:50:49Z",
        "updatedAt" : "2020-03-19T08:49:21Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b03a487a518756f7c9acd1f3177b12b407867d5",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +204,208 @@        if (taskProducer != null) {\n            try {\n                taskProducer.kafkaProducer().close();\n            } catch (final RuntimeException e) {\n                throw new StreamsException(\"[\" + id + \"] Producer encounter error trying to close\", e);"
  },
  {
    "id" : "08b93019-c48c-4889-8f22-650648b10a45",
    "prId" : 8248,
    "prUrl" : "https://github.com/apache/kafka/pull/8248#pullrequestreview-400243045",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e8c2b4e-d7d0-4b06-b3d4-d6b67a8a0c65",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "_Pretty_ sure we should still count a task transition as a task creation event for the purposes of metrics",
        "createdAt" : "2020-03-12T01:55:14Z",
        "updatedAt" : "2020-05-28T23:49:30Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "d42d63e4-8c16-458f-8964-5cfc247f1f3f",
        "parentId" : "6e8c2b4e-d7d0-4b06-b3d4-d6b67a8a0c65",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I agree.",
        "createdAt" : "2020-04-24T21:48:08Z",
        "updatedAt" : "2020-05-28T23:49:30Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "30ac7b3ccd47063497c17ac148d90f9b29683e82",
    "line" : 148,
    "diffHunk" : "@@ -1,1 +245,249 @@\n        log.trace(\"Created task {} with assigned partitions {}\", taskId, partitions);\n        createTaskSensor.record();\n        return task;\n    }"
  }
]