[
  {
    "id" : "3aac52a8-10b1-4db8-affe-49cc7739fe93",
    "prId" : 8262,
    "prUrl" : "https://github.com/apache/kafka/pull/8262#pullrequestreview-373131898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fe80805-3cc0-4498-b1e0-0734b431d32f",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Not sure if this will actually be cleaner or end up more complicated, but you may be able to reuse some of the `StickyTaskAssignor` code here which does similar things",
        "createdAt" : "2020-03-12T00:16:32Z",
        "updatedAt" : "2020-03-19T22:25:01Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "b35b0ab0e58743b8629fbfaf3db7b07a812bfa23",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +157,161 @@        // If a task's previous host client was not caught-up or no longer exists, assign it to the caught-up client\n        // with the least tasks\n        for (final TaskId taskId : unassignedTasksWithCaughtUpClients) {\n            final List<ID> caughtUpClients = tasksToCaughtUpClients.get(taskId);\n            ID clientWithLeastTasks = null;"
  },
  {
    "id" : "c9d3b684-2fc5-4f10-8f9a-cc3f5f0b9073",
    "prId" : 8262,
    "prUrl" : "https://github.com/apache/kafka/pull/8262#pullrequestreview-376695280",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0972d4fb-107d-4084-9dd2-4e878e6a1fe3",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "req: I think we need to iterate forwards in this case?",
        "createdAt" : "2020-03-13T23:09:07Z",
        "updatedAt" : "2020-03-19T22:25:01Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "cadba550-03fa-4b17-b4c5-ab2ac095b9c6",
        "parentId" : "0972d4fb-107d-4084-9dd2-4e878e6a1fe3",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "I had to remove the `break`, because I found a case that breaks the assumption that tasks with caught-up clients are always in the beginning of the list.\r\n \r\nI still think it is better to iterate from the end because the order in most cases is as follows:\r\n1. tasks that were previously running on this client\r\n2. tasks for which this client is caught-up\r\n3. tasks for which this client is not caught-up\r\n\r\nI would rather move tasks in 2 before tasks in 1 and since the `break` is removed we do not abort pre-maturely.  ",
        "createdAt" : "2020-03-16T19:38:25Z",
        "updatedAt" : "2020-03-19T22:25:01Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "94d094c2-29eb-4c14-b4a8-66977b4956be",
        "parentId" : "0972d4fb-107d-4084-9dd2-4e878e6a1fe3",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Sounds good. The assumption is broken due to swapping tasks around during `balance` without preserving order, is that it?",
        "createdAt" : "2020-03-17T20:58:49Z",
        "updatedAt" : "2020-03-19T22:25:01Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "3bf2e47d-ca8b-4767-b213-4bfd5c21217c",
        "parentId" : "0972d4fb-107d-4084-9dd2-4e878e6a1fe3",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "Exactly!",
        "createdAt" : "2020-03-18T09:34:45Z",
        "updatedAt" : "2020-03-19T22:25:01Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "b35b0ab0e58743b8629fbfaf3db7b07a812bfa23",
    "line" : 318,
    "diffHunk" : "@@ -1,1 +316,320 @@                                                       final boolean isCaughtUp) {\n        final List<TaskId> tasksWithCaughtUpClients = new ArrayList<>();\n        for (int i = tasks.size() - 1; i >= 0; --i) {\n            final TaskId task = tasks.get(i);\n            if (isCaughtUp == tasksToCaughtUpClients.containsKey(task)) {"
  }
]