[
  {
    "id" : "3c84d49c-418a-4a56-a21c-2dd6cf079888",
    "prId" : 5382,
    "prUrl" : "https://github.com/apache/kafka/pull/5382#pullrequestreview-138481464",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c4ad8611-a7c2-4d60-911b-bd648074fbb4",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "At this point, if `fifoQueue` is empty wouldn't the `headRecord` have already been consumed for processing? I'm asking as our processing is single threaded but I could be missing something here.",
        "createdAt" : "2018-07-18T21:57:36Z",
        "updatedAt" : "2018-07-18T23:58:09Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "f48b5e16-a4e0-4782-8db9-a2e2926ac6dc",
        "parentId" : "c4ad8611-a7c2-4d60-911b-bd648074fbb4",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Actually it is still possible: consider the case where (digits are ts)\r\n\r\nfifoQueue = {2}\r\nheadRecord = 1\r\n\r\nNow when we called `queue.poll` we return the record with ts 1, and updated the headRecord to 2:\r\n\r\nfifoQueue = {}\r\nheadRecord = 2\r\n\r\nI.e. the `headRecord` always stores the record to-be-returned in the next call. And the partition ts is corresponding to its ts. Does that make sense?",
        "createdAt" : "2018-07-18T23:49:16Z",
        "updatedAt" : "2018-07-18T23:58:09Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3b470e6ef4d2f0971548ddf865a635cb5e6a551f",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +134,138 @@     */\n    public boolean isEmpty() {\n        return fifoQueue.isEmpty() && headRecord == null;\n    }\n"
  },
  {
    "id" : "ded6c605-c83f-4b07-9c93-23cf18b9fd26",
    "prId" : 6694,
    "prUrl" : "https://github.com/apache/kafka/pull/6694#pullrequestreview-269722440",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "853beb15-cf9a-410d-a5b7-295c962ac0d3",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why do we need to make `partitionTime` `public` ? In any case, please preserve the JavaDocs if you move the method.",
        "createdAt" : "2019-07-31T17:57:06Z",
        "updatedAt" : "2019-09-16T23:28:41Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "03c0024f-a4c3-4176-9983-91ac8c0a809e",
        "parentId" : "853beb15-cf9a-410d-a5b7-295c962ac0d3",
        "authorId" : "32d43f1c-0232-4c2f-9548-9c3dfd6f181a",
        "body" : "Yeah, accidentally removed it when I was rebasing the PR. Will add it back.",
        "createdAt" : "2019-08-01T16:01:29Z",
        "updatedAt" : "2019-09-16T23:28:41Z",
        "lastEditedBy" : "32d43f1c-0232-4c2f-9548-9c3dfd6f181a",
        "tags" : [
        ]
      }
    ],
    "commit" : "b42a883a14bc3a48a28624e3964be81e4f75d8f5",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +75,79 @@    void setPartitionTime(final long partitionTime) {\n        this.partitionTime = partitionTime;\n    }\n\n    /**"
  },
  {
    "id" : "0143ac43-47d3-42b5-a14d-fe223dea3143",
    "prId" : 7054,
    "prUrl" : "https://github.com/apache/kafka/pull/7054#pullrequestreview-263898711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "967fc3bb-0853-4124-805e-2d9013ef139a",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Can we also update method `timestamp()` to `headRecordTimestamp()` to be more explicit what it returns? It's orthogonal to the actual fix, but might be a good improvement.",
        "createdAt" : "2019-07-11T01:39:01Z",
        "updatedAt" : "2019-07-16T21:19:04Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "195fa6fd-722b-4dd4-bf6e-f24b9d7fa20a",
        "parentId" : "967fc3bb-0853-4124-805e-2d9013ef139a",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Similar, can we piggy-back some cleanup to `PartitionGroup` ?\r\n\r\n```\r\n- rename PartitionGroup#timestamp() to PartitionGroup#streamTime()\r\n(also update the JavaDocs, that seems to be wrong)\r\n\r\n- in `clear()` reset `streamTime` to UNKNOWN ?\r\n\r\n- in `nextRecord()`: do we need to check if `queue != null` and do we need to check if `record != null` (seem it's ensure that both can never be `null` ?)\r\n```",
        "createdAt" : "2019-07-11T01:53:49Z",
        "updatedAt" : "2019-07-16T21:19:04Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "9c0dc0f8-aa2a-4a31-9e5f-dfa9a50a77b9",
        "parentId" : "967fc3bb-0853-4124-805e-2d9013ef139a",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Ack to all...except the last point. We do check both for null..?",
        "createdAt" : "2019-07-11T03:38:18Z",
        "updatedAt" : "2019-07-16T21:19:04Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "83d63d4c-0478-42f0-8830-c4125b77da86",
        "parentId" : "967fc3bb-0853-4124-805e-2d9013ef139a",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Seems, we check both for `null` atm:\r\n```\r\n        final RecordQueue queue = nonEmptyQueuesByTime.poll();\r\n        info.queue = queue;\r\n\r\n        if (queue != null) {\r\n            // get the first record from this queue.\r\n            record = queue.poll();\r\n\r\n            if (record != null) {\r\n                --totalBuffered;\r\n```\r\n\r\nBut I think they cannot be `null`, could they?",
        "createdAt" : "2019-07-11T06:32:17Z",
        "updatedAt" : "2019-07-16T21:19:04Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "baea76aa-914a-4158-8f46-52fbcdeabf4b",
        "parentId" : "967fc3bb-0853-4124-805e-2d9013ef139a",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Sorry, misunderstood your question. Yes, either one could potentially be null if we don't yet have new records to process?",
        "createdAt" : "2019-07-11T18:37:17Z",
        "updatedAt" : "2019-07-16T21:19:04Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "92662bfb-314b-44b3-95c7-c6b26ee778dc",
        "parentId" : "967fc3bb-0853-4124-805e-2d9013ef139a",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Good point. ` final RecordQueue queue = nonEmptyQueuesByTime.poll();` could return `null`. However, I am wondering if `record = queue.poll();` could return `null`, because it's called `nonEmptyQueuesByTime` -- hence, `queue` should never be empty? ",
        "createdAt" : "2019-07-16T21:58:13Z",
        "updatedAt" : "2019-07-16T21:58:13Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "3d1b6caa-e3fd-4b3a-a467-74fdb2fbaf8f",
        "parentId" : "967fc3bb-0853-4124-805e-2d9013ef139a",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I think I agree the second null check should never happen.",
        "createdAt" : "2019-07-18T20:52:35Z",
        "updatedAt" : "2019-07-18T20:53:46Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "22f6f09267c53eef83b87ffb379358ff1d866de5",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +179,183 @@            final long timestamp;\n            try {\n                timestamp = timestampExtractor.extract(deserialized, partitionTime);\n            } catch (final StreamsException internalFatalExtractorException) {\n                throw internalFatalExtractorException;"
  },
  {
    "id" : "d2e67ebb-2499-4244-9927-9e0a4112a260",
    "prId" : 7054,
    "prUrl" : "https://github.com/apache/kafka/pull/7054#pullrequestreview-260438977",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "333d5315-f48a-4a0f-beac-fa8256c8fd05",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Just read the class JavaDoc:\r\n```\r\nIt also keeps track of the partition timestamp defined as the minimum timestamp of records in its queue\r\n```\r\n\r\nThat is not correct any more. Can we update it?",
        "createdAt" : "2019-07-11T01:40:18Z",
        "updatedAt" : "2019-07-16T21:19:04Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "ff4aa21c-93fa-4ee8-ba7d-f2dc53bd06a1",
        "parentId" : "333d5315-f48a-4a0f-beac-fa8256c8fd05",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Yep",
        "createdAt" : "2019-07-11T02:12:46Z",
        "updatedAt" : "2019-07-16T21:19:04Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "22f6f09267c53eef83b87ffb379358ff1d866de5",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +46,50 @@    private final RecordDeserializer recordDeserializer;\n    private final ArrayDeque<ConsumerRecord<byte[], byte[]>> fifoQueue;\n\n    private StampedRecord headRecord = null;\n    private long partitionTime = RecordQueue.UNKNOWN;"
  },
  {
    "id" : "ca3e6a0d-efc9-4e5f-b402-65296182e4f1",
    "prId" : 8015,
    "prUrl" : "https://github.com/apache/kafka/pull/8015#pullrequestreview-355499990",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e4231e4a-53bf-4a23-8c6d-5c69bc935620",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Either Git or IDEA is inserting this change, and I can't get it to stop.",
        "createdAt" : "2020-02-07T23:46:56Z",
        "updatedAt" : "2020-02-12T04:28:08Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "25b37c9c0e86158aba583ca42ae751d954e981f1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +76,80 @@        this.log = logContext.logger(RecordQueue.class);\n    }\n\n    void setPartitionTime(final long partitionTime) {\n        this.partitionTime = partitionTime;"
  }
]