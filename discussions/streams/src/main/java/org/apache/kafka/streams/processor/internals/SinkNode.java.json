[
  {
    "id" : "12a80a85-b136-4e96-a307-f4afd0d77cad",
    "prId" : 7309,
    "prUrl" : "https://github.com/apache/kafka/pull/7309#pullrequestreview-303038009",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41cd92a9-1391-40fd-865d-c1cadf751831",
        "parentId" : null,
        "authorId" : "afb7cd1d-9534-4932-ae5c-00089d0e6f86",
        "body" : "Add unit test for this?",
        "createdAt" : "2019-10-04T11:35:22Z",
        "updatedAt" : "2019-10-16T17:56:12Z",
        "lastEditedBy" : "afb7cd1d-9534-4932-ae5c-00089d0e6f86",
        "tags" : [
        ]
      },
      {
        "id" : "c80ad7cf-f8c7-46ce-a8a7-a77cbf40a4ca",
        "parentId" : "41cd92a9-1391-40fd-865d-c1cadf751831",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Not sure what you mean?",
        "createdAt" : "2019-10-11T06:12:24Z",
        "updatedAt" : "2019-10-16T17:56:12Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "f8220d32-ad3a-40fd-88f1-1e4bd8ac51a1",
        "parentId" : "41cd92a9-1391-40fd-865d-c1cadf751831",
        "authorId" : "afb7cd1d-9534-4932-ae5c-00089d0e6f86",
        "body" : "Sorry, I was trying to ask if I should write a unit test to capture the scenarios I was describing in the highlighted code - a test to see if the exception is used or not when using Produced.keySerde method.",
        "createdAt" : "2019-10-16T16:29:51Z",
        "updatedAt" : "2019-10-16T17:56:12Z",
        "lastEditedBy" : "afb7cd1d-9534-4932-ae5c-00089d0e6f86",
        "tags" : [
        ]
      },
      {
        "id" : "76c650b7-4e7e-4cba-9d50-84b18f198d9c",
        "parentId" : "41cd92a9-1391-40fd-865d-c1cadf751831",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I think the existing test are sufficient.",
        "createdAt" : "2019-10-17T07:00:06Z",
        "updatedAt" : "2019-10-17T07:00:06Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f66aa6ae35fa0cfeba8d06a25615ee7c59ee5cb2",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +94,98 @@                    String.format(\"ClassCastException while producing data to a sink topic. A serializer (key: %s / value: %s) is not compatible to the actual key or value type \" +\n                                    \"(key type: %s / value type: %s). Change the default Serdes in StreamConfig or \" +\n                                    \"provide correct Serdes via method parameters (for example if using the DSL, `#to(String topic, Produced<K, V> produced)` with `Produced.keySerde(WindowedSerdes.timeWindowedSerdeFrom(String.class))`).\",\n                                    keySerializer.getClass().getName(),\n                                    valSerializer.getClass().getName(),"
  },
  {
    "id" : "f6cc6ee1-611f-47e7-9849-b0e23ec7daf3",
    "prId" : 8061,
    "prUrl" : "https://github.com/apache/kafka/pull/8061#pullrequestreview-355390291",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7137ead2-d07a-45ed-9e62-4d75848e330c",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "FK Join serialization utilities face the same challenge that we previously addressed in Changed(De)Serializer. Namely, that the wrapper (de)serializer is constructed during topology building, before the default serdes are available from config, so it needs to have a mechanism for updating the inner serde at run time, once the default serde is available.\r\n\r\nFK Join actually introduces several of these wrapper serdes, so rather than just pile on extra type-check branches, I created the concept of a (De)Serializer that wraps potentially `null` (De)Serializers. In the case that the inner serde is null, it could be set (once) to the default serde.",
        "createdAt" : "2020-02-07T19:37:24Z",
        "updatedAt" : "2020-02-09T21:28:58Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "2cc13e38696e382a69943a86d77dcdb5826d1ce8",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +70,74 @@        // then pass it the default one from the context\n        if (valSerializer instanceof WrappingNullableSerializer) {\n            ((WrappingNullableSerializer) valSerializer).setIfUnset(context.valueSerde().serializer());\n        }\n    }"
  },
  {
    "id" : "a010686c-db54-4460-85c4-9922bab76f21",
    "prId" : 8764,
    "prUrl" : "https://github.com/apache/kafka/pull/8764#pullrequestreview-422177225",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0f6cb934-3211-4414-bbab-386fa9f7a0e3",
        "parentId" : null,
        "authorId" : "d8d11f3d-4fbd-4882-a206-bfece798cdcd",
        "body" : "@guozhangwang This is 1/2 of the areas that needed the fix. The valueSerde was being passed into the underlying Serde, despite it really needing the keySerde. ",
        "createdAt" : "2020-06-01T20:58:40Z",
        "updatedAt" : "2020-06-09T16:28:55Z",
        "lastEditedBy" : "d8d11f3d-4fbd-4882-a206-bfece798cdcd",
        "tags" : [
        ]
      }
    ],
    "commit" : "e47f1948d6e43857ce87a6207c78eb0e363152fe",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +70,74 @@        // then pass it the default one from the context\n        if (valSerializer instanceof WrappingNullableSerializer) {\n            ((WrappingNullableSerializer) valSerializer).setIfUnset(\n                context.keySerde().serializer(),\n                context.valueSerde().serializer()"
  },
  {
    "id" : "44928d2e-b370-478e-b164-50c689c52be5",
    "prId" : 10744,
    "prUrl" : "https://github.com/apache/kafka/pull/10744#pullrequestreview-670471193",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f4a8930-4e84-48ba-a21c-f8c298abd3a3",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Here's where we declare the sink node cannot forward and hence only needs input parameters.",
        "createdAt" : "2021-05-21T21:25:08Z",
        "updatedAt" : "2021-05-21T21:30:06Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "16200845-6006-49f3-aa0d-6378d3e0dfe9",
        "parentId" : "7f4a8930-4e84-48ba-a21c-f8c298abd3a3",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "That brought up a good question, as whether we need to override `getChild` and `getChildren` in `SinkNode` to throw as it should never be called?",
        "createdAt" : "2021-05-27T16:26:10Z",
        "updatedAt" : "2021-05-27T16:30:55Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "3e67fd7c-e018-47d0-a63f-9d69d5d9a3a5",
        "parentId" : "7f4a8930-4e84-48ba-a21c-f8c298abd3a3",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "We already throw an exception if you try and add a child. I think it would complicate any of our processor graph traversal algorithms if we made it illegal to even call getChildren, as they would have to type-check the nodes before traversing.",
        "createdAt" : "2021-05-27T17:48:13Z",
        "updatedAt" : "2021-05-27T17:48:14Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "599f185421aa01afe9f55c0d9a1127f3224dd0e4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +25,29 @@import static org.apache.kafka.streams.kstream.internals.WrappingNullableUtils.prepareValueSerializer;\n\npublic class SinkNode<KIn, VIn> extends ProcessorNode<KIn, VIn, Void, Void> {\n\n    private Serializer<KIn> keySerializer;"
  }
]