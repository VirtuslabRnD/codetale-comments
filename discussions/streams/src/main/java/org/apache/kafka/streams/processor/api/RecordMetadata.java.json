[
  {
    "id" : "9b1c74cf-5404-4e39-93da-0465fa0fa409",
    "prId" : 9361,
    "prUrl" : "https://github.com/apache/kafka/pull/9361#pullrequestreview-500554881",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c45215b7-a2c7-4b5a-9aeb-8d35727a75c3",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "The new metadata proposed in the KIP. Note that it's an interface because in reality, it's just going to be a view onto the ProcessorRecordContext.",
        "createdAt" : "2020-10-01T17:25:37Z",
        "updatedAt" : "2020-10-02T15:50:27Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8de75f6f16cf8bdcccbcb1bc1fc0a11dd40c1d1",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +17,21 @@package org.apache.kafka.streams.processor.api;\n\npublic interface RecordMetadata {\n    /**\n     * @return  The topic of the original record received from Kafka"
  },
  {
    "id" : "1ee44fdc-6b4f-4c9f-854d-112535ed062c",
    "prId" : 10810,
    "prUrl" : "https://github.com/apache/kafka/pull/10810#pullrequestreview-678819219",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e7521cf-6b71-402a-a155-e38eb000190f",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "@vvcephei Thinking about this more, could we guarantee that we never return `null` on those methods (and thus can keep the JavaDocs simple)? If we don't have metadata, `Optional<RecordMetadata>` should be empty to begin with (at least ideally)?\r\n\r\nBut I was not sure given the current implementation. `AbstractProcessorContext` implement this method like\r\n```\r\n    @Override\r\n    public Optional<RecordMetadata> recordMetadata() {\r\n        return Optional.ofNullable(recordContext);\r\n    }\r\n``` \r\n\r\nOr would `recordContext` be guaranteed to be `null` if the new API is used? (For this case, as `KTable#transformValues()` is using the \"old\" API, we might no need to document anything (or should we document it anyway, to be forward looking?",
        "createdAt" : "2021-06-08T05:32:26Z",
        "updatedAt" : "2021-06-08T05:32:27Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "1823a4de-f042-4dca-8521-705fe4b7be3c",
        "parentId" : "0e7521cf-6b71-402a-a155-e38eb000190f",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Oh boy. My recollection is that we were trying to keep a null context as a sentinel so that we would be able to return a “not present” Optional. But we are also populating “dummy” contexts in a few places, which might defeat that logic. You’d have to trace through the code to figure out whether or not this can happen. We’d better hurry up and deprecate the old API by the feature freeze so that we can simplify these code paths. Ultimately, I agree: we shouldn’t need nullable members inside an Optional container.\r\n\r\nIn the mean time, I don’t think the warning is harmful. It might cause people to insert null checks that we can’t prove are unnecessary right now, but if someone wants to comb through the codebase to prove it, we can always update the Java doc later to say “never null”. ",
        "createdAt" : "2021-06-08T17:42:57Z",
        "updatedAt" : "2021-06-08T17:44:06Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "df5bb27d-71cf-44cb-97be-f41be8f5317c",
        "parentId" : "0e7521cf-6b71-402a-a155-e38eb000190f",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Cool. Works for me.",
        "createdAt" : "2021-06-08T17:48:09Z",
        "updatedAt" : "2021-06-08T17:48:09Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "800a42b2d324825bfab9494d2f2b602834d792ab",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +22,26 @@    /**\n     * Return the topic name of the current input record; could be {@code null} if it is not\n     * available.\n     *\n     * <p> For example, if this method is invoked within a @link Punctuator#punctuate(long)"
  }
]