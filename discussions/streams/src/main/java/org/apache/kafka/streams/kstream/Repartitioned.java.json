[
  {
    "id" : "2ba5d58a-7866-48e3-aa3f-37f41596faf6",
    "prId" : 7170,
    "prUrl" : "https://github.com/apache/kafka/pull/7170#pullrequestreview-279350621",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c47bef89-1de1-4eca-a83b-ebcbbdd49ca4",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "It seems this method is unused. Are we missing test coverage?",
        "createdAt" : "2019-08-22T17:09:02Z",
        "updatedAt" : "2020-04-07T14:50:24Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "345860f6-5602-4f99-a606-5ddaa0a71fc8",
        "parentId" : "c47bef89-1de1-4eca-a83b-ebcbbdd49ca4",
        "authorId" : "f616d937-9d20-463c-aba4-ff4af295195c",
        "body" : "Added tests.",
        "createdAt" : "2019-08-25T19:53:02Z",
        "updatedAt" : "2020-04-07T14:50:24Z",
        "lastEditedBy" : "f616d937-9d20-463c-aba4-ff4af295195c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2bcdfe487ec13f41f4516d6bee6a1847f6d4ce2",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +100,104 @@     * @see KStream#repartition(Repartitioned)\n     */\n    public static <K, V> Repartitioned<K, V> streamPartitioner(final StreamPartitioner<K, V> partitioner) {\n        return new Repartitioned<>(null, null, null, null, partitioner);\n    }"
  },
  {
    "id" : "623d3774-a196-4f1a-982c-b94fe3b2e39a",
    "prId" : 7170,
    "prUrl" : "https://github.com/apache/kafka/pull/7170#pullrequestreview-279350630",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d504749a-c735-48a7-b30e-895142ab8bce",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Likewise, this one is unused.",
        "createdAt" : "2019-08-22T17:09:48Z",
        "updatedAt" : "2020-04-07T14:50:24Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "4f22aaf1-3af1-4965-899c-5450e1a58c7f",
        "parentId" : "d504749a-c735-48a7-b30e-895142ab8bce",
        "authorId" : "f616d937-9d20-463c-aba4-ff4af295195c",
        "body" : "Added tests",
        "createdAt" : "2019-08-25T19:53:11Z",
        "updatedAt" : "2020-04-07T14:50:24Z",
        "lastEditedBy" : "f616d937-9d20-463c-aba4-ff4af295195c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2bcdfe487ec13f41f4516d6bee6a1847f6d4ce2",
    "line" : 168,
    "diffHunk" : "@@ -1,1 +166,170 @@     * @return a new {@code Repartitioned} instance configured with provided partitioner\n     */\n    public Repartitioned<K, V> withStreamPartitioner(final StreamPartitioner<K, V> partitioner) {\n        return new Repartitioned<>(name, keySerde, valueSerde, numberOfPartitions, partitioner);\n    }"
  },
  {
    "id" : "9fca9350-60e3-479d-90e4-c1a47b97f1c8",
    "prId" : 7170,
    "prUrl" : "https://github.com/apache/kafka/pull/7170#pullrequestreview-336973110",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "155c7946-31ae-4786-961d-985c0db82f69",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Thanks for avoiding mutable state in this class!",
        "createdAt" : "2019-08-22T17:10:29Z",
        "updatedAt" : "2020-04-07T14:50:24Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "1d289f64-5a03-4f5f-ab71-fa5194ff754b",
        "parentId" : "155c7946-31ae-4786-961d-985c0db82f69",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "While I agree that immutability is great, I am wondering about consistency. The other configuration classes are mutable. Do we think that might be of any concern? should we just update all other configuration classes an make them immutable, too? (Of course not in this PR...) \\cc @vvcephei ",
        "createdAt" : "2019-09-28T01:18:11Z",
        "updatedAt" : "2020-04-07T14:50:24Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "e107de89-9489-4918-9445-5f746d45c433",
        "parentId" : "155c7946-31ae-4786-961d-985c0db82f69",
        "authorId" : "f616d937-9d20-463c-aba4-ff4af295195c",
        "body" : "@mjsax I've created JIRA ticket for it: https://issues.apache.org/jira/browse/KAFKA-9342",
        "createdAt" : "2019-12-29T20:02:17Z",
        "updatedAt" : "2020-04-07T14:50:24Z",
        "lastEditedBy" : "f616d937-9d20-463c-aba4-ff4af295195c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2bcdfe487ec13f41f4516d6bee6a1847f6d4ce2",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@public class Repartitioned<K, V> implements NamedOperation<Repartitioned<K, V>> {\n\n    protected final String name;\n    protected final Serde<K> keySerde;\n    protected final Serde<V> valueSerde;"
  },
  {
    "id" : "3ee10f1c-8cfa-4515-bcbc-3e8884e8b219",
    "prId" : 7170,
    "prUrl" : "https://github.com/apache/kafka/pull/7170#pullrequestreview-391194649",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "21fae7b9-cec9-44a1-9de9-bf08ecbf0a90",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Nit: do we need to add the `@see` tag to every method? Seems somewhat redundant (it's already mentioned in class JavaDocs above)? (similar below for other methods)",
        "createdAt" : "2020-04-01T04:34:46Z",
        "updatedAt" : "2020-04-07T14:50:24Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "fc9eb668-1d29-4a98-9e79-8ed9aa5d103b",
        "parentId" : "21fae7b9-cec9-44a1-9de9-bf08ecbf0a90",
        "authorId" : "f616d937-9d20-463c-aba4-ff4af295195c",
        "body" : "I've followed same standard as other configurations classes (Produced, Grouped, etc). To keep things consistent maybe worth cleaning up all the config classes with redundant `@see` tags? (in the follow up pr maybe) wdyt? ",
        "createdAt" : "2020-04-02T19:32:00Z",
        "updatedAt" : "2020-04-07T14:50:24Z",
        "lastEditedBy" : "f616d937-9d20-463c-aba4-ff4af295195c",
        "tags" : [
        ]
      },
      {
        "id" : "42663a9d-c481-42f7-a736-4aebc8e653e3",
        "parentId" : "21fae7b9-cec9-44a1-9de9-bf08ecbf0a90",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Yeah. Was just a general inquire and we don't really have a guideline for it... If you are interested, it would be great to draft some guidelines (maybe just for Kafka Streams first, and we could propose them for other client APIs, later) as a wiki page and we could discuss them on the dev mailing list?",
        "createdAt" : "2020-04-09T23:34:00Z",
        "updatedAt" : "2020-04-09T23:34:00Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2bcdfe487ec13f41f4516d6bee6a1847f6d4ce2",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +68,72 @@     * @param <V>  value type\n     * @return A new {@code Repartitioned} instance configured with processor name and repartition topic name\n     * @see KStream#repartition(Repartitioned)\n     */\n    public static <K, V> Repartitioned<K, V> as(final String name) {"
  }
]