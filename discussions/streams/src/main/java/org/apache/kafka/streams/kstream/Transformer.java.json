[
  {
    "id" : "5c7bdc8a-dec5-4c65-be78-ec3c78dafbbc",
    "prId" : 8414,
    "prUrl" : "https://github.com/apache/kafka/pull/8414#pullrequestreview-388764759",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a6e34d7-9df3-483e-8a39-d3058d58d6e7",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "In the KIP, I proposed to leave the existing Processor and Transformer init methods with a raw ProcessorContext argument. This will give all users a rawtypes warning with no recourse. Instead, in this PR, I'm adding `<Object, Object>` bounds instead. This at least allows users to also add the generics if they desire, while not changing the practical bounds at all. If this proves acceptable, I'll update the KIP.",
        "createdAt" : "2020-04-03T04:02:25Z",
        "updatedAt" : "2020-04-06T22:03:32Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "9d03e3fe-7c44-486b-8513-8e99e5ebc648",
        "parentId" : "0a6e34d7-9df3-483e-8a39-d3058d58d6e7",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Not sure if I understand this. Can you elaborate?\r\n\r\nBtw: to we think we will have any path forward to let user specify the actually return type (that is currently only `R` but does not specify the actually key or value type), such that we would pass in `ProcessorContext<K, V>`? Can't remember if we discussed this on the KIP (just a side question).",
        "createdAt" : "2020-04-04T02:26:04Z",
        "updatedAt" : "2020-04-06T22:03:32Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "686653ac-d4f0-43d9-9f03-1c9fb599b48c",
        "parentId" : "0a6e34d7-9df3-483e-8a39-d3058d58d6e7",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Good question. Yes, it's been forever, but we did (myself, I had to look back over the KIP to figure this out when I wrote the comment).\r\n\r\nThe idea is to discuss separately how to migrate to a version of Transformer that allows bounding the output types. The ticket for this is https://issues.apache.org/jira/browse/KAFKA-8396. This KIP was already sweeping enough in its design and implementation scope that we wanted to give Transformer its own discussion. Accordingly, this KIP only has to deal with the Processor API change and the consequences that are necessary/convenient to tackle at the same time.\r\n\r\nPart of the reason to give Transformer its own discussion is that there are other opportunities to simplify `transform()` use cases (see the ticket for more info), so it really would be its own conversation.\r\n\r\nWhat I was talking about above is that I proposed in this KIP only to leave Transformer completely alone, so this would still be a raw type: `void init(final ProcessorContext context)`. But what I realized just now is that anyone who implements the interface will get a \"raw types\" warning from javac, and there is nothing they can do about it but ignore it. If they try to add the equivalent `<Object, Object>` or `<?, ?>` parameters, their implementation would clash with our interface.\r\n\r\nOTOH, if we go ahead and add the parameters as I proposed above, then at least they can also add the `<Object, Object>` parameters to their code to resolve the warning. They can not bound the types tighter than that, and neither can we, until we pick up KAFKA-8396. So, it doesn't provide any additional type safety, just a way to resolve the warning without resolving to ignoring it. AFAICT, there is no way to compatibly migrate the interface to accommodate greater type safety. KAFKA-8396 will have to include deprecating something in any case.",
        "createdAt" : "2020-04-06T20:11:54Z",
        "updatedAt" : "2020-04-06T22:03:32Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "12866b97-b651-428c-8c0e-26be02da4132",
        "parentId" : "0a6e34d7-9df3-483e-8a39-d3058d58d6e7",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Thanks for clarification.",
        "createdAt" : "2020-04-07T03:49:13Z",
        "updatedAt" : "2020-04-07T03:49:14Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb647f05c2b3fa29fbd9ecb88b6fc72e274f9af",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +65,69 @@     * @param context the context\n     */\n    void init(final ProcessorContext<Object, Object> context);\n\n    /**"
  }
]