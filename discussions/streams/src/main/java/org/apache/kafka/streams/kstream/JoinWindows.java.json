[
  {
    "id" : "ae1d455d-cd5d-44ec-9af9-2f6413e8b3e3",
    "prId" : 5682,
    "prUrl" : "https://github.com/apache/kafka/pull/5682#pullrequestreview-160366562",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "02ce8001-9d42-4b9e-97fd-b2b5d754991c",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Add `@throws` to JavaDoc for `IllegalArgumentException`",
        "createdAt" : "2018-09-30T21:11:43Z",
        "updatedAt" : "2018-10-04T14:34:18Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "a42892c1-afe7-4458-9a0a-27a39b779503",
        "parentId" : "02ce8001-9d42-4b9e-97fd-b2b5d754991c",
        "authorId" : "fe0be475-2786-4ac9-8152-c07fa363b977",
        "body" : "Fixed.",
        "createdAt" : "2018-10-01T15:57:09Z",
        "updatedAt" : "2018-10-04T14:34:19Z",
        "lastEditedBy" : "fe0be475-2786-4ac9-8152-c07fa363b977",
        "tags" : [
        ]
      }
    ],
    "commit" : "5210f9fff117c695cb1f3024c94eff7f49599a6a",
    "line" : 122,
    "diffHunk" : "@@ -1,1 +226,230 @@     */\n    @SuppressWarnings({\"deprecation\"}) // removing segments from Windows will fix this\n    public JoinWindows grace(final Duration afterWindowEnd) throws IllegalArgumentException {\n        ApiUtils.validateMillisecondDuration(afterWindowEnd, \"afterWindowEnd\");\n        if (afterWindowEnd.toMillis() < 0) {"
  },
  {
    "id" : "68d65e65-30ef-4a23-a995-ecb4021ab890",
    "prId" : 5954,
    "prUrl" : "https://github.com/apache/kafka/pull/5954#pullrequestreview-179088237",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6d5e245-a30b-448b-817c-d1a2c5499c92",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "This might be controversial. I change it, to reuse the return type of `ApiUtils.validateMillisecondDuration`. (Similar in other XxxWindows classes).\r\n\r\nThoughts? ",
        "createdAt" : "2018-11-27T23:14:20Z",
        "updatedAt" : "2018-12-11T09:51:36Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "63f8f201-41fa-4098-8973-a7c442444c31",
        "parentId" : "f6d5e245-a30b-448b-817c-d1a2c5499c92",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "It is fine to me.",
        "createdAt" : "2018-11-28T01:28:21Z",
        "updatedAt" : "2018-12-11T09:51:36Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9c692fa9804850c0cdd372d825db005bf3851f8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +78,82 @@    public final long afterMs;\n\n    private final long graceMs;\n\n    private JoinWindows(final long beforeMs,"
  },
  {
    "id" : "3aa83e00-910d-4c67-9802-a128cf528b14",
    "prId" : 6664,
    "prUrl" : "https://github.com/apache/kafka/pull/6664#pullrequestreview-233293681",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b48c4851-8030-4a8c-a241-0f26eb3e9872",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "But grace and retention are two different things.\r\n\r\nIn fact, I just had another conversation about this issue, and it seem we need to fix this by allowing people to specify  a retention time IMHO. Not sure if we need to add a `Materialized` parameter or add `Joined#withRetention()` that we use to specify serdes etc.",
        "createdAt" : "2019-05-02T13:42:59Z",
        "updatedAt" : "2019-05-02T13:45:58Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "1c11eecc-0df7-4e96-83f2-b31bc27251e1",
        "parentId" : "b48c4851-8030-4a8c-a241-0f26eb3e9872",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Thanks, @mjsax . I think the ticket author is the same person you were talking with. He (later on) included a snippet of a chat with you.\r\n\r\nI think join windows are a little confusing because we tried to share the logic of windowed aggregations, but it's actually different.\r\n\r\nFor windowed aggregation, grace period defines how long after the window ends it will accept late-arriving records and update the results. The retention time defines how long we keep the state of the window in storage. Clearly, the retention time must be at least big enough to support the updates that may happen during the grace period, but it could be much larger, to support Interactive Queries even after the window is closed to updates.\r\n\r\nJoin windows are a little bit different, because they are not queriable. Therefore, there is no reason to have any retention beyond the grace period. This is also why there's no `Materialized` parameter. The state for the join is purely bookeeping, not a \"materialized view\" in the data processing sense.",
        "createdAt" : "2019-05-02T20:23:16Z",
        "updatedAt" : "2019-05-02T20:23:16Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "ee613c0c-79ba-48ea-9fb5-005ee73086e3",
        "parentId" : "b48c4851-8030-4a8c-a241-0f26eb3e9872",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "The report included the additional issue, that the `gracePeriod()` and neither deprecated `until()` is forwarded as changelog configuration though. Can we include a fix for this on this ticket?",
        "createdAt" : "2019-05-02T20:43:24Z",
        "updatedAt" : "2019-05-02T20:43:24Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "7d53b4f4-6a0d-45f0-9284-ca9c9d07cb1d",
        "parentId" : "b48c4851-8030-4a8c-a241-0f26eb3e9872",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "If grace period isn't specified, then we should be forwarding the `until` aka `maintainMs` through. In his case, though, he was specifying grace period, so we were using it.\r\n\r\nI think his bug report is partly based on a flawed understanding of what he should expect to see, but it's possible there's a real bug somewhere. I'm waiting to see what he says next.",
        "createdAt" : "2019-05-02T21:04:00Z",
        "updatedAt" : "2019-05-02T21:04:00Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "ae55d3e7-cd28-4b5f-a1f2-6ac650f0be58",
        "parentId" : "b48c4851-8030-4a8c-a241-0f26eb3e9872",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I agree that for JoinWindows it is not necessary to let users specify retention since the underlying stores would not be queryable at all.\r\n\r\nAnd with `until` specified, the retention of the store, as well as the total \"joinable\" processing period, should be join-window + grace-period.",
        "createdAt" : "2019-05-03T00:33:16Z",
        "updatedAt" : "2019-05-03T00:33:17Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5b2b4ae4a70e0f66adda62cccc21c438c488ea0e",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +247,251 @@     * @return itself\n     * @throws IllegalArgumentException if {@code durationMs} is smaller than the window size\n     * @deprecated since 2.1. Use {@link JoinWindows#grace(Duration)} instead.\n     */\n    @Override"
  },
  {
    "id" : "29394704-973a-4d9c-971e-73e33cb0d972",
    "prId" : 7274,
    "prUrl" : "https://github.com/apache/kafka/pull/7274#pullrequestreview-283713478",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62e7ffd4-4db8-4591-b122-111d33be2282",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This is now defining a term that is unused elsewhere. We can either define the term we use (\"out-of-ordered-ness\" is defined as...\") or we can use the term we define (above: \"Reject out-of-order events that are delayed more than...\").",
        "createdAt" : "2019-09-04T15:48:23Z",
        "updatedAt" : "2019-09-20T01:27:15Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "94a8469159b893129a8d2420b8283f52d7954143",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +219,223 @@     * after the end of its window.\n     * <p>\n     * Delay is defined as (stream_time - record_timestamp).\n     *\n     * @param afterWindowEnd The grace period to admit out-of-order events to a window."
  },
  {
    "id" : "9d91b98e-bdc4-4bdc-888e-7d69148fd6b1",
    "prId" : 10861,
    "prUrl" : "https://github.com/apache/kafka/pull/10861#pullrequestreview-684404074",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67fd46b1-17d6-47b3-b5ca-ece4879bdc1a",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "This is the new flag. We set it to `false` if the old methods are used, and to `true` for the new methods from KIP-633.",
        "createdAt" : "2021-06-10T09:50:28Z",
        "updatedAt" : "2021-06-10T10:08:52Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "9c598ae1-5420-4381-b148-797ec807faac",
        "parentId" : "67fd46b1-17d6-47b3-b5ca-ece4879bdc1a",
        "authorId" : "aad84cc2-4a70-4d0c-986e-2abd823929da",
        "body" : "Thanks for adding this note. This summary is very helpful to me in my implementation.",
        "createdAt" : "2021-06-15T19:24:20Z",
        "updatedAt" : "2021-06-15T19:24:20Z",
        "lastEditedBy" : "aad84cc2-4a70-4d0c-986e-2abd823929da",
        "tags" : [
        ]
      }
    ],
    "commit" : "dad2fe801497ebb301f354af0a48cae6a905722b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +77,81 @@    private final long graceMs;\n\n    protected final boolean enableSpuriousResultFix;\n\n    protected JoinWindows(final JoinWindows joinWindows) {"
  },
  {
    "id" : "f18195c2-f9c6-4a9e-af93-195b926d3491",
    "prId" : 10861,
    "prUrl" : "https://github.com/apache/kafka/pull/10861#pullrequestreview-680578337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7b2daca-8a25-49a6-b0f2-8080c229b936",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Need to change this to be able to add an `JoinWindowsInternal` to access the newly added flag.",
        "createdAt" : "2021-06-10T09:51:00Z",
        "updatedAt" : "2021-06-10T10:08:52Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "dad2fe801497ebb301f354af0a48cae6a905722b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +68,72 @@ * @see TimestampExtractor\n */\npublic class JoinWindows extends Windows<Window> {\n\n    /** Maximum time difference for tuples that are before the join tuple. */"
  },
  {
    "id" : "cc56102c-7eae-4542-aae7-6e4bd61d5e04",
    "prId" : 10861,
    "prUrl" : "https://github.com/apache/kafka/pull/10861#pullrequestreview-680578337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f6b24bcf-7937-4ae4-9282-3e24361f7d71",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Kept the overlap with KIP-633 PR to a minimum. The key is, that this and the method below must set the new flag to `true`.",
        "createdAt" : "2021-06-10T09:51:42Z",
        "updatedAt" : "2021-06-10T10:08:52Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "dad2fe801497ebb301f354af0a48cae6a905722b",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +99,103 @@    }\n\n    public static JoinWindows ofTimeDifferenceAndGrace(final Duration timeDifference, final Duration afterWindowEnd) {\n        return new JoinWindows(timeDifference.toMillis(), timeDifference.toMillis(), afterWindowEnd.toMillis(), true);\n    }"
  },
  {
    "id" : "40dfee9e-eca3-43b6-905c-a58721d2240b",
    "prId" : 10861,
    "prUrl" : "https://github.com/apache/kafka/pull/10861#pullrequestreview-684593425",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79093643-6aa3-48d3-8e0f-946f024a4564",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Side fix: `before()` resets grace to 24h (not sure why -- seems to be a bug)\r\n\r\nsame for `after()` below.",
        "createdAt" : "2021-06-10T09:52:43Z",
        "updatedAt" : "2021-06-10T10:08:52Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "797b9ade-3749-4687-af89-66a7b7775edd",
        "parentId" : "79093643-6aa3-48d3-8e0f-946f024a4564",
        "authorId" : "aad84cc2-4a70-4d0c-986e-2abd823929da",
        "body" : "As per the feedback from @ableegoldman the grace period in the old methods need to stay at 24h. It is in the new methods that we get to specify it as zero.",
        "createdAt" : "2021-06-15T19:25:50Z",
        "updatedAt" : "2021-06-15T19:25:50Z",
        "lastEditedBy" : "aad84cc2-4a70-4d0c-986e-2abd823929da",
        "tags" : [
        ]
      },
      {
        "id" : "cfd129d4-3718-491d-b465-732f937bfd6b",
        "parentId" : "79093643-6aa3-48d3-8e0f-946f024a4564",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Sure. Don't see the connection to this change thought? Note, that `before()` and `after()` are non-static methods, and thus, they should not change/set the grace period. Only the static `of(size)` and non-static `grace()` should change grace period.\r\n```\r\nJoinWindow.of(5000).before(30); // of() will set default of 24h, so no need for before() to reset to 24h, it can just inherit it\r\nJoinWindows.of(5000).grace(40).before(30); // this should leave grace at `40` however, without this fix `before()` would re-set grace to the default of 24h what is incorrect\r\n```",
        "createdAt" : "2021-06-15T23:21:12Z",
        "updatedAt" : "2021-06-16T01:02:06Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "dad2fe801497ebb301f354af0a48cae6a905722b",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +134,138 @@        final String msgPrefix = prepareMillisCheckFailMsgPrefix(timeDifference, \"timeDifference\");\n        final long timeDifferenceMs = validateMillisecondDuration(timeDifference, msgPrefix);\n        return new JoinWindows(timeDifferenceMs, afterMs, graceMs, enableSpuriousResultFix);\n    }\n"
  },
  {
    "id" : "a8e68c1d-e14c-471d-be44-82e6ab25e72e",
    "prId" : 10861,
    "prUrl" : "https://github.com/apache/kafka/pull/10861#pullrequestreview-683458950",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d456b151-23e6-4a71-9ffa-f52b91c6f1c8",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "How about moving this copy-constructor to JoinWindowsInternal?",
        "createdAt" : "2021-06-12T23:58:23Z",
        "updatedAt" : "2021-06-13T00:14:24Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "c5e6a6f9-642c-4dc7-8201-7d48789574d5",
        "parentId" : "d456b151-23e6-4a71-9ffa-f52b91c6f1c8",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Not really possible. Multiple issues:\r\n - we still need a protected constructor in `JoinWindows`\r\n - we need to make `graceMs` protected\r\n - blocker: we need to make the _public_ members `beforeMs` and `afterMs` non-final (and we cannot do this...)",
        "createdAt" : "2021-06-15T00:27:46Z",
        "updatedAt" : "2021-06-15T00:27:47Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "dad2fe801497ebb301f354af0a48cae6a905722b",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +79,83 @@    protected final boolean enableSpuriousResultFix;\n\n    protected JoinWindows(final JoinWindows joinWindows) {\n        beforeMs = joinWindows.beforeMs;\n        afterMs = joinWindows.afterMs;"
  },
  {
    "id" : "e37b1fcc-84fa-4c9d-aafb-1e6f0408b522",
    "prId" : 10926,
    "prUrl" : "https://github.com/apache/kafka/pull/10926#pullrequestreview-695702544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9bbbc1b-1cae-4f48-a60e-d14bab79ef58",
        "parentId" : null,
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "I expected that the javadoc for `ofTimeDifferenceWithNoGrace` should be mostly the same except `grace` parameter. Is there any reason why they are different?\r\n\r\nSame comment to other places.",
        "createdAt" : "2021-06-28T05:18:34Z",
        "updatedAt" : "2021-06-28T06:28:15Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      },
      {
        "id" : "f0b3bf56-06dc-49da-a69b-c9733d609430",
        "parentId" : "e9bbbc1b-1cae-4f48-a60e-d14bab79ef58",
        "authorId" : "aad84cc2-4a70-4d0c-986e-2abd823929da",
        "body" : "Upon review, I have updated the javadocs but I dont think they can be identical in wording.",
        "createdAt" : "2021-06-29T20:49:06Z",
        "updatedAt" : "2021-06-29T20:49:06Z",
        "lastEditedBy" : "aad84cc2-4a70-4d0c-986e-2abd823929da",
        "tags" : [
        ]
      },
      {
        "id" : "d2f484b9-6905-49f4-a92e-c271a179f1a5",
        "parentId" : "e9bbbc1b-1cae-4f48-a60e-d14bab79ef58",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "`out-of-order`\r\n`window closed`",
        "createdAt" : "2021-06-30T05:18:09Z",
        "updatedAt" : "2021-06-30T06:12:28Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff288e6fddf2457cdd66a78910615ed14706c8b2",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +121,125 @@     * i.e., the timestamp of a record from the secondary stream is max {@code timeDifference} earlier or later than\n     * the timestamp of the record from the primary stream. Using the method implicitly sets the grace period to zero\n     * which means that out of order records arriving after the window end will be dropped.\n     *\n     * @param timeDifference join window interval"
  },
  {
    "id" : "970d9612-7ae5-480d-925f-3a2031cb66ce",
    "prId" : 10926,
    "prUrl" : "https://github.com/apache/kafka/pull/10926#pullrequestreview-695702544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dcfa0bb5-7855-48b9-b28a-0e58daea2406",
        "parentId" : null,
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "Please add a period after `@deprecated since 3.0`. i.e.\r\n`@deprecated since 3.0. Use {@link #ofTimeDifferenceAndGrace(Duration, Duration)} instead`\r\n\r\nSame comments to below identical places.",
        "createdAt" : "2021-06-28T05:20:22Z",
        "updatedAt" : "2021-06-28T06:28:15Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      },
      {
        "id" : "f1421152-a707-4bd4-b5af-79acde2f8778",
        "parentId" : "dcfa0bb5-7855-48b9-b28a-0e58daea2406",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit. I think there is `.` missing `since 3.0[.] Use`",
        "createdAt" : "2021-06-30T05:20:37Z",
        "updatedAt" : "2021-06-30T06:12:28Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff288e6fddf2457cdd66a78910615ed14706c8b2",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +139,143 @@     * @return a new JoinWindows object with the window definition with and grace period (uses old default of 24 hours)\n     * @throws IllegalArgumentException if {@code timeDifference} is negative or can't be represented as {@code long milliseconds}\n     * @deprecated since 3.0 Use {@link #ofTimeDifferenceAndGrace(Duration, Duration)} instead\n     */\n    @Deprecated"
  },
  {
    "id" : "27aebdff-b0b3-4284-8730-123fa857a7f5",
    "prId" : 10926,
    "prUrl" : "https://github.com/apache/kafka/pull/10926#pullrequestreview-696170166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1f0a063-bf75-40ec-9b14-ea7fc3b013d3",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "`earlier or later` -> `before or after` (to avoid confusion with the term \"late data\")",
        "createdAt" : "2021-06-30T05:14:02Z",
        "updatedAt" : "2021-06-30T06:12:28Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "4360ea67-9c0e-46a7-9e91-ea09a4540a8a",
        "parentId" : "e1f0a063-bf75-40ec-9b14-ea7fc3b013d3",
        "authorId" : "aad84cc2-4a70-4d0c-986e-2abd823929da",
        "body" : "Thanks @mjsax for the feedback. I will open a JIRA item to address the fix for the Javadocs.\r\n\r\n@ableegoldman @cadonna @showuon please can we approve it today so that we don't miss the cutoff?\r\n\r\nI will work on completing any javadocs and unit tests corrections/edits/additions by the end of next week.",
        "createdAt" : "2021-06-30T13:35:42Z",
        "updatedAt" : "2021-06-30T13:35:43Z",
        "lastEditedBy" : "aad84cc2-4a70-4d0c-986e-2abd823929da",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff288e6fddf2457cdd66a78910615ed14706c8b2",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +103,107 @@    /**\n     * Specifies that records of the same key are joinable if their timestamps are within {@code timeDifference},\n     * i.e., the timestamp of a record from the secondary stream is max {@code timeDifference} earlier or later than\n     * the timestamp of the record from the primary stream. Using the method explicitly sets the grace period to\n     * the duration specified by {@code afterWindowEnd} which means that out of order records arriving"
  },
  {
    "id" : "0d10d0e3-8b2b-4bc0-a077-b98c419ca1e1",
    "prId" : 10926,
    "prUrl" : "https://github.com/apache/kafka/pull/10926#pullrequestreview-695702544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0c943cc0-46a6-4873-a95a-68d980d22055",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "`out-of-order` (with `-`)",
        "createdAt" : "2021-06-30T05:14:29Z",
        "updatedAt" : "2021-06-30T06:12:28Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff288e6fddf2457cdd66a78910615ed14706c8b2",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +105,109 @@     * i.e., the timestamp of a record from the secondary stream is max {@code timeDifference} earlier or later than\n     * the timestamp of the record from the primary stream. Using the method explicitly sets the grace period to\n     * the duration specified by {@code afterWindowEnd} which means that out of order records arriving\n     * after the window end will be dropped. The delay is defined as (stream_time - record_timestamp).\n     *"
  },
  {
    "id" : "5517a271-0001-4a46-92df-4e83b702098e",
    "prId" : 10926,
    "prUrl" : "https://github.com/apache/kafka/pull/10926#pullrequestreview-695702544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dbcb5807-aae9-425b-85c4-7a38aae86485",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "`window end` -> `window closed`\r\n\r\nThe window ends when `afterMs` passed, but we keep the window open until `afterMs + grace` which we call the \"close time\" of the window.\r\n\r\n> The delay is defined as (stream_time - record_timestamp).\r\nI think we can omit this?",
        "createdAt" : "2021-06-30T05:16:18Z",
        "updatedAt" : "2021-06-30T06:12:28Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff288e6fddf2457cdd66a78910615ed14706c8b2",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +106,110 @@     * the timestamp of the record from the primary stream. Using the method explicitly sets the grace period to\n     * the duration specified by {@code afterWindowEnd} which means that out of order records arriving\n     * after the window end will be dropped. The delay is defined as (stream_time - record_timestamp).\n     *\n     * @param timeDifference join window interval"
  },
  {
    "id" : "58bfe662-6fd4-494c-a1a2-3c115808b2d5",
    "prId" : 10926,
    "prUrl" : "https://github.com/apache/kafka/pull/10926#pullrequestreview-695702544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aaac8091-6467-45b4-ae1d-8df311447894",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "`of` -> `or`",
        "createdAt" : "2021-06-30T05:16:42Z",
        "updatedAt" : "2021-06-30T06:12:28Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff288e6fddf2457cdd66a78910615ed14706c8b2",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +110,114 @@     * @param timeDifference join window interval\n     * @param afterWindowEnd The grace period to admit out-of-order events to a window.\n     * @throws IllegalArgumentException if the {@code afterWindowEnd} is negative of can't be represented as {@code long milliseconds}\n     * @return A new JoinWindows object with the specified window definition and grace period\n     */"
  },
  {
    "id" : "e68189b9-f238-4d91-926f-87d4d44fdc3e",
    "prId" : 10926,
    "prUrl" : "https://github.com/apache/kafka/pull/10926#pullrequestreview-695702544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "940648d2-b0ac-4d25-9845-49db6ceb67a7",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "`before or after`",
        "createdAt" : "2021-06-30T05:17:56Z",
        "updatedAt" : "2021-06-30T06:12:28Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff288e6fddf2457cdd66a78910615ed14706c8b2",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +119,123 @@    /**\n     * Specifies that records of the same key are joinable if their timestamps are within {@code timeDifference},\n     * i.e., the timestamp of a record from the secondary stream is max {@code timeDifference} earlier or later than\n     * the timestamp of the record from the primary stream. Using the method implicitly sets the grace period to zero\n     * which means that out of order records arriving after the window end will be dropped."
  },
  {
    "id" : "6cc6f58c-2680-48b8-a384-8d7342ed8bdb",
    "prId" : 10926,
    "prUrl" : "https://github.com/apache/kafka/pull/10926#pullrequestreview-695702544",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77fac1a9-36dc-4c98-901c-af4c3fc1dd86",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why is `join window interval` removed?",
        "createdAt" : "2021-06-30T05:21:14Z",
        "updatedAt" : "2021-06-30T06:12:28Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff288e6fddf2457cdd66a78910615ed14706c8b2",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +136,140 @@     * the timestamp of the record from the primary stream.\n     *\n     * @param timeDifference\n     * @return a new JoinWindows object with the window definition with and grace period (uses old default of 24 hours)\n     * @throws IllegalArgumentException if {@code timeDifference} is negative or can't be represented as {@code long milliseconds}"
  },
  {
    "id" : "ce4cd086-f85e-46dc-a0af-a98f619214fc",
    "prId" : 10926,
    "prUrl" : "https://github.com/apache/kafka/pull/10926#pullrequestreview-713386153",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e4d922f-5460-4e97-b975-b79c92cc35e6",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I am just wondering about `return new JoinWindows(beforeMs, afterMs, afterWindowEndMs, false);` at the end of this method. Should it really _disable_ the fix by passing hard-coded `false`? It might be better to update `false` to `enableSpuriousResultFix`? If the old `of(size)` was called, the flag is set to false already correctly, but if the new `ofTimeDifferenceXxx()` is called, it might be weird to disable the fix when `grace` is called?\r\n\r\nOr we do a check if the new API was used originally, and disallow calling `grace()` for this case?\r\n```\r\nif (enableSpuriousResultFix) {\r\n    throw new IllegalStateExecption(\"You can use grace() only if you create the JoinWindow using of(size) method. If you use ofTimeDifferenceAndGrace() or ofTimeDifferenceNoGrace() it is not allowed to change the grace period afterwards.\");\r\n}\r\n```\r\n\r\n\\cc @ableegoldman WDYT?",
        "createdAt" : "2021-06-30T05:31:49Z",
        "updatedAt" : "2021-06-30T06:12:28Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "2f702010-7a0a-46d5-a01e-98e1adcaee19",
        "parentId" : "1e4d922f-5460-4e97-b975-b79c92cc35e6",
        "authorId" : "aad84cc2-4a70-4d0c-986e-2abd823929da",
        "body" : "@mjsax I believe those came with your changes in the PR you merged into trunk.\r\n\r\n@mjsax, @ableegoldman, please let me know what you think and I can address that as well in the future JIRA ticket.\r\n\r\nIt could require updating all the unit tests where org.apache.kafka.streams.kstream.JoinWindows.grace() is invoked so that looks like a significant undertaking given today is the cutoff date for merging the feature.\r\n\r\nOnce you let me know what you would like to do, I will create a JIRA ticket and work on that update, the javadocs and the unit tests.\r\n\r\nThanks.",
        "createdAt" : "2021-06-30T13:42:13Z",
        "updatedAt" : "2021-06-30T13:42:13Z",
        "lastEditedBy" : "aad84cc2-4a70-4d0c-986e-2abd823929da",
        "tags" : [
        ]
      },
      {
        "id" : "885a5c66-b76e-41ab-85cb-243412b6be56",
        "parentId" : "1e4d922f-5460-4e97-b975-b79c92cc35e6",
        "authorId" : "aad84cc2-4a70-4d0c-986e-2abd823929da",
        "body" : "@mjsax @ableegoldman @cadonna @showuon \r\n\r\nThese are the JIRA tickets to track the work to fix the unit tests and javadocs\r\n\r\nImprove Javadocs for API Changes from KIP-633\r\nhttps://issues.apache.org/jira/browse/KAFKA-13021\r\n\r\nMigrate all Tests to New API and Remove Suppression for Deprecation Warnings related to KIP-633\r\nhttps://issues.apache.org/jira/browse/KAFKA-12994",
        "createdAt" : "2021-06-30T20:50:05Z",
        "updatedAt" : "2021-06-30T20:50:47Z",
        "lastEditedBy" : "aad84cc2-4a70-4d0c-986e-2abd823929da",
        "tags" : [
        ]
      },
      {
        "id" : "8f7f1045-5db6-4164-81a3-c07ad3c5ee62",
        "parentId" : "1e4d922f-5460-4e97-b975-b79c92cc35e6",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Personally I think it makes sense to just disallow calling `ofTimeDifferenceAndGrace(...).grace(...)` entirely, this seems like abusing the API",
        "createdAt" : "2021-07-23T03:27:44Z",
        "updatedAt" : "2021-07-23T03:27:44Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "25369e09-3748-448c-b5a4-7db1a56c6714",
        "parentId" : "1e4d922f-5460-4e97-b975-b79c92cc35e6",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "I picked up all the non-testing followup work in this PR so we could try to get it into 3.0: https://github.com/apache/kafka/pull/11114",
        "createdAt" : "2021-07-23T04:12:52Z",
        "updatedAt" : "2021-07-23T04:12:53Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff288e6fddf2457cdd66a78910615ed14706c8b2",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +208,212 @@     */\n    @Deprecated\n    public JoinWindows grace(final Duration afterWindowEnd) throws IllegalArgumentException {\n        final String msgPrefix = prepareMillisCheckFailMsgPrefix(afterWindowEnd, \"afterWindowEnd\");\n        final long afterWindowEndMs = validateMillisecondDuration(afterWindowEnd, msgPrefix);"
  },
  {
    "id" : "98257f90-7897-4407-8542-de3f65d46d29",
    "prId" : 11100,
    "prUrl" : "https://github.com/apache/kafka/pull/11100#pullrequestreview-711349276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c43d2984-45e9-4373-90b3-c684edcf0655",
        "parentId" : null,
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "We should use `ofTimeDifferenceWithNoGrace` for original `of` method. Fix it.",
        "createdAt" : "2021-07-21T07:41:27Z",
        "updatedAt" : "2021-07-21T07:41:27Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      }
    ],
    "commit" : "89453e0c5bc27b2b185c10a90cbcc23c509d1959",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +142,146 @@     */\n    @Deprecated\n    public static JoinWindows of(final Duration timeDifference) throws IllegalArgumentException {\n        final String msgPrefix = prepareMillisCheckFailMsgPrefix(timeDifference, \"timeDifference\");\n        final long timeDifferenceMs = validateMillisecondDuration(timeDifference, msgPrefix);"
  },
  {
    "id" : "5049b90b-f55e-48e2-98a7-ff77b3373d56",
    "prId" : 11100,
    "prUrl" : "https://github.com/apache/kafka/pull/11100#pullrequestreview-711379624",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "504cb79a-9b73-4a27-89be-22fd04012d5b",
        "parentId" : null,
        "authorId" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "body" : "We should use `ofTimeDifferenceAndGrace` for original `grace` method. Fix it.",
        "createdAt" : "2021-07-21T08:16:29Z",
        "updatedAt" : "2021-07-21T08:16:29Z",
        "lastEditedBy" : "d520dc4e-6bae-4b0b-90d6-4c0a1cabb518",
        "tags" : [
        ]
      }
    ],
    "commit" : "89453e0c5bc27b2b185c10a90cbcc23c509d1959",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +208,212 @@     */\n    @Deprecated\n    public JoinWindows grace(final Duration afterWindowEnd) throws IllegalArgumentException {\n        final String msgPrefix = prepareMillisCheckFailMsgPrefix(afterWindowEnd, \"afterWindowEnd\");\n        final long afterWindowEndMs = validateMillisecondDuration(afterWindowEnd, msgPrefix);"
  },
  {
    "id" : "666dc4d1-add3-4ed3-9f82-0ed28e328029",
    "prId" : 11114,
    "prUrl" : "https://github.com/apache/kafka/pull/11114#pullrequestreview-713409741",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4f0a7c07-8b3c-4594-8ca2-35dcbd69cb96",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Thanks for the catch!",
        "createdAt" : "2021-07-23T05:39:37Z",
        "updatedAt" : "2021-07-23T05:43:31Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "cb0f2764bd88a8318edb5ec0b21e6af0d5bf18e4",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +118,122 @@     */\n    public static JoinWindows ofTimeDifferenceAndGrace(final Duration timeDifference, final Duration afterWindowEnd) {\n        final String timeDifferenceMsgPrefix = prepareMillisCheckFailMsgPrefix(timeDifference, \"timeDifference\");\n        final long timeDifferenceMs = validateMillisecondDuration(timeDifference, timeDifferenceMsgPrefix);\n"
  }
]