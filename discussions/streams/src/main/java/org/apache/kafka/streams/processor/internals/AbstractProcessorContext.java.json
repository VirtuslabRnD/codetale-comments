[
  {
    "id" : "37c910be-0560-4bc1-baf2-f88c72a58c87",
    "prId" : 8669,
    "prUrl" : "https://github.com/apache/kafka/pull/8669#pullrequestreview-412829504",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f55667a7-3cba-4ced-8456-159c4fdd600a",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Looks like this doesn't need to be defaulted here. If the logic doesn't apply to all the implementing classes, it's better not to define it in the abstract class.",
        "createdAt" : "2020-05-15T14:57:01Z",
        "updatedAt" : "2020-05-18T16:57:45Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "5ce2b5e8-6857-4fc4-a536-d83fe5ddd25d",
        "parentId" : "f55667a7-3cba-4ced-8456-159c4fdd600a",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Ah, actually it does. I should remove the override from the ProcessorContextImpl instead",
        "createdAt" : "2020-05-15T17:18:49Z",
        "updatedAt" : "2020-05-18T16:57:45Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "f807b4f8da716905265a37eb0a2966496781cae4",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +224,228 @@    public TaskType taskType() {\n        return stateManager.taskType();\n    }\n}"
  },
  {
    "id" : "13a04fc4-8cd7-4498-8d86-86c411155686",
    "prId" : 9004,
    "prUrl" : "https://github.com/apache/kafka/pull/9004#pullrequestreview-446080441",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f5b06d2f-e34c-4e17-a74a-33166127cc05",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "As you're about to find out, this kind of thing is the bulk of the changes.\r\n\r\nSince I've only converted the ProcessorNode (an internal class) in this PR, you'll see the arguments right now are overwhelmingly wildcards and Object. ProcessorNode is almost exclusively used in the \"machine room\" parts of Streams where we don't have access to, or any benefit from, the actual generic type parameters of the Processors.\r\n\r\nIn the follow-on PRs, where I convert the actual Processors to the new API is when we'll start to see the benefits.",
        "createdAt" : "2020-07-10T02:20:58Z",
        "updatedAt" : "2020-08-09T19:51:25Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "5471848c9a2eeae5a17ee5ae2504a6b6979697df",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +43,47 @@    private boolean initialized;\n    protected ProcessorRecordContext recordContext;\n    protected ProcessorNode<?, ?, ?, ?> currentNode;\n    private long currentSystemTimeMs;\n"
  },
  {
    "id" : "458a6943-d5a7-480d-a75f-4e1dfe26f3d8",
    "prId" : 9361,
    "prUrl" : "https://github.com/apache/kafka/pull/9361#pullrequestreview-500554881",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "48576845-8ede-4848-abe9-2dbd8870d765",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "The prior code was a bit misleading. I could not find _any_ code path where the context was actually null before, since we always initialized it with a \"dummy context\". This change simplifies the codebase by just moving the dummy values here and we now really do set the record context to `null` to (internally) signify when it is undefined.",
        "createdAt" : "2020-10-01T17:27:32Z",
        "updatedAt" : "2020-10-02T15:50:27Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8de75f6f16cf8bdcccbcb1bc1fc0a11dd40c1d1",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +121,125 @@            // in which case, we're preserving the pre-existing behavior\n            // of returning dummy values when the record context is undefined.\n            // For topic, the dummy value is `null`.\n            return null;\n        } else {"
  }
]