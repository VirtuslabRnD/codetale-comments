[
  {
    "id" : "23d63a2c-29a7-433a-8466-247643683ab5",
    "prId" : 10360,
    "prUrl" : "https://github.com/apache/kafka/pull/10360#pullrequestreview-616832792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1991ac6a-0f11-4174-9901-0d494c64a4a3",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "This is a bit unfortunate since it essentially breaks the emit-on-change semantics ðŸ˜•  I guess it should be relatively rare for no-op updates to come in with the same timestamp, but this still seems like kind of a structural failure of Kafka Streams. We shouldn't need to assume that if we find an identical record in the state store then we have to forward it on the off-chance it was (1) actually the same record, and (2) was only partially processed when we happened across an unexpected exception.\r\n\r\nI'm not saying I have a better idea that could be implemented quickly & safely given the releases we're blocking, but we should at least file a ticket so users are aware of this flaw. Otherwise I imagine we might be getting bug reports that emit-on-change doesn't work. It's possible some of the orthogonal work that's been discussed in the past will end up fixing this on the side (eg buffering updates before commit, versioned tables, etc), whenever we finally get around to any of that",
        "createdAt" : "2021-03-19T22:36:22Z",
        "updatedAt" : "2021-03-19T22:36:23Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "9f60deb5a777cf4f1c80c6856e40832ac3a89df8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +106,110 @@\n    private static boolean timeIsDecreasing(final byte[] oldRecord, final byte[] newRecord) {\n        return extractTimestamp(newRecord) <= extractTimestamp(oldRecord);\n    }\n"
  }
]