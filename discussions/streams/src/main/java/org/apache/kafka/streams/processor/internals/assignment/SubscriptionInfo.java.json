[
  {
    "id" : "372a47fe-9618-4c1b-855b-8a2f379263fc",
    "prId" : 4636,
    "prUrl" : "https://github.com/apache/kafka/pull/4636#pullrequestreview-113955027",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "97cdf0c9-240e-42b7-a042-90a1c355857d",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "These hashcode and equals methods are pretty risky. They depend on mutable fields, which will result in objects disappearing from any Set or Hash they're placed in if any of the mutable fields change.\r\n\r\nI'm assuming they either aren't ever added to such collections, or that they never get mutated after they are.\r\n\r\nI leave it to you to decide how concerning this possibility is.",
        "createdAt" : "2018-04-19T21:31:16Z",
        "updatedAt" : "2018-05-31T03:24:33Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "9812b622-8cce-4b47-a720-2767f51a1101",
        "parentId" : "97cdf0c9-240e-42b7-a042-90a1c355857d",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "The fields are semantically immutable. If we want to enforce it in the code, we would need to rewrite it somewhat. Not sure if it's worth it as it might make the code more convoluted.",
        "createdAt" : "2018-04-20T12:23:53Z",
        "updatedAt" : "2018-05-31T03:24:33Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0a87bd5254155a9d60ba479371305ddaae99282d",
    "line" : 152,
    "diffHunk" : "@@ -1,1 +311,315 @@    }\n\n    @Override\n    public int hashCode() {\n        final int hashCode = usedVersion ^ latestSupportedVersion ^ processId.hashCode() ^ prevTasks.hashCode() ^ standbyTasks.hashCode();"
  },
  {
    "id" : "f7a66a16-0ce7-4c9a-a51e-186daca409d1",
    "prId" : 4880,
    "prUrl" : "https://github.com/apache/kafka/pull/4880#pullrequestreview-112987832",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff45f56b-9e1b-446f-aa82-41e4260d8d5d",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Where is this field going to be used?",
        "createdAt" : "2018-04-17T18:38:59Z",
        "updatedAt" : "2018-04-17T20:51:18Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "7f776ec1-06e8-44e9-a5e1-9d9c4d72e085",
        "parentId" : "ff45f56b-9e1b-446f-aa82-41e4260d8d5d",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Version Probing. cf : https://github.com/apache/kafka/pull/4636 (full PR -- this PR is just a \"reduced\" version with version probing reverted to simplify reviewing)",
        "createdAt" : "2018-04-17T20:37:02Z",
        "updatedAt" : "2018-04-17T20:51:18Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e762d6e1f24dc67a738950aa75264801b98a27f",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +89,93 @@    }\n\n    public int latestSupportedVersion() {\n        return latestSupportedVersion;\n    }"
  },
  {
    "id" : "ccdfedbf-ef11-47d5-a0bd-ade6e9e61bd4",
    "prId" : 4880,
    "prUrl" : "https://github.com/apache/kafka/pull/4880#pullrequestreview-113106070",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed2658bb-d1cd-4552-ab89-2b5d223a25de",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "nit: could we just pass in `subscriptionInfo` into `decodeTasks`, and initialize its prevTasks and standbyTasks internally?",
        "createdAt" : "2018-04-17T18:45:37Z",
        "updatedAt" : "2018-04-17T20:51:18Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "cc36968b-97d7-400c-b5e2-f7ed8039bce8",
        "parentId" : "ed2658bb-d1cd-4552-ab89-2b5d223a25de",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Not possible if we want to share code. We call `decodeTasks` that does not know if it's decoding prevTasks or standbyTasks -- alternative, we can do two methods. Let me know what you think",
        "createdAt" : "2018-04-17T20:41:50Z",
        "updatedAt" : "2018-04-17T20:51:18Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "77ca3093-a1e6-4176-b368-12bbced0ae18",
        "parentId" : "ed2658bb-d1cd-4552-ab89-2b5d223a25de",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Personally I'd prefer to have decodeTasksData in which we hard-code the logic of doing both prevTasks and standbyTasks, we do not code-share for these two task sets but we share code of constructing the set for version two and version three. I guess we cannot get both code sharing, and since it is really a nit I'm fine either way :)",
        "createdAt" : "2018-04-17T21:20:59Z",
        "updatedAt" : "2018-04-17T21:20:59Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "9492c6a3-a40f-4d4e-982c-b6789a01ec18",
        "parentId" : "ed2658bb-d1cd-4552-ab89-2b5d223a25de",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I'll clean this up in the next PR. Merging this now.",
        "createdAt" : "2018-04-18T07:37:03Z",
        "updatedAt" : "2018-04-18T07:37:03Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e762d6e1f24dc67a738950aa75264801b98a27f",
    "line" : 260,
    "diffHunk" : "@@ -1,1 +287,291 @@        decodeClientUUID(subscriptionInfo, data);\n\n        subscriptionInfo.prevTasks = new HashSet<>();\n        decodeTasks(subscriptionInfo.prevTasks, data);\n"
  },
  {
    "id" : "7f898fa3-7e7a-4571-a68c-a6bc48dac57c",
    "prId" : 7248,
    "prUrl" : "https://github.com/apache/kafka/pull/7248#pullrequestreview-279256804",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "78778ed9-fa98-43b4-909a-706eff868e53",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This class has a different role now. It's now an adapter between the business logic and the generated \"struct\" data container. We isolate any validation logic to this layer, but mostly delegate storing/serializing/deserializing concerns to the generated struct type. This is the same pattern we use with the Client message code that uses codegen.",
        "createdAt" : "2019-08-23T23:35:48Z",
        "updatedAt" : "2019-10-29T21:04:35Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4d6ae101dee1bb04c4a267771e3f9ac6ec347eb",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +34,38 @@import static org.apache.kafka.streams.processor.internals.assignment.StreamsAssignmentProtocolVersions.LATEST_SUPPORTED_VERSION;\n\npublic class SubscriptionInfo {\n    private static final Logger LOG = LoggerFactory.getLogger(SubscriptionInfo.class);\n"
  },
  {
    "id" : "d01ff107-83d0-4e62-8f09-9ef15bcfd7c4",
    "prId" : 7248,
    "prUrl" : "https://github.com/apache/kafka/pull/7248#pullrequestreview-279256804",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bec6b89f-b7a4-47ad-b06d-0f5c9bd6caba",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I expanded the validation so that we no longer need a \"backdoor\" constructor that doesn't do version checks. Now, it's not possible to instantiate this class in a way that violates our invariants.",
        "createdAt" : "2019-08-23T23:38:23Z",
        "updatedAt" : "2019-10-29T21:04:35Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4d6ae101dee1bb04c4a267771e3f9ac6ec347eb",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +55,59 @@\n    private static void validateVersions(final int version, final int latestSupportedVersion) {\n        if (latestSupportedVersion == UNKNOWN && (version < 1 || version > 2)) {\n            throw new IllegalArgumentException(\n                \"Only versions 1 and 2 are expected to use an UNKNOWN (-1) latest supported version. \" +"
  },
  {
    "id" : "60ab9109-cd52-40c9-8803-0594dbd9edfb",
    "prId" : 7248,
    "prUrl" : "https://github.com/apache/kafka/pull/7248#pullrequestreview-279256804",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3125fc6e-e4ff-4660-821e-41b5edfc3dc7",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "here, and below, we avoid writing fields that are disallowed in different schema versions.",
        "createdAt" : "2019-08-23T23:38:54Z",
        "updatedAt" : "2019-10-29T21:04:35Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4d6ae101dee1bb04c4a267771e3f9ac6ec347eb",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +81,85 @@                                     : userEndPoint.getBytes(StandardCharsets.UTF_8));\n        }\n        if (version >= 3) {\n            data.setLatestSupportedVersion(latestSupportedVersion);\n        }"
  },
  {
    "id" : "400a4646-0350-48e8-963b-f218cf2ea7b7",
    "prId" : 7248,
    "prUrl" : "https://github.com/apache/kafka/pull/7248#pullrequestreview-308593230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1574a809-2afb-4e6c-89cf-c8873c078bb6",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Am I right in thinking that this can't happen, given our validation in the constructor?",
        "createdAt" : "2019-08-23T23:44:12Z",
        "updatedAt" : "2019-10-29T21:04:35Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "f44e068c-a192-4ee1-b438-f030a20f0b48",
        "parentId" : "1574a809-2afb-4e6c-89cf-c8873c078bb6",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Yeah from looking at the validation code, I'm not sure we'd hit this point.  But if we did wouldn't we want to throw an exception as we do in the validation section? Although I think we may use a number higher greater than latest supported version for version probing.",
        "createdAt" : "2019-09-20T02:24:43Z",
        "updatedAt" : "2019-10-29T21:04:35Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "26ecc40c-8ec4-4e0a-b6f0-1467805b07b9",
        "parentId" : "1574a809-2afb-4e6c-89cf-c8873c078bb6",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Yeah, I'm not sure... Well, this is what the prior code did, so I guess we can just leave it alone.",
        "createdAt" : "2019-09-20T19:35:59Z",
        "updatedAt" : "2019-10-29T21:04:35Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "b57f80c5-b707-4e15-bbb6-0cacfa4d5931",
        "parentId" : "1574a809-2afb-4e6c-89cf-c8873c078bb6",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Given we've done `validateVersions` at constructor shouldn't this never happen? In that case we should also throw right?",
        "createdAt" : "2019-10-29T02:15:43Z",
        "updatedAt" : "2019-10-29T21:04:35Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "83958603-6598-4254-98f6-e203ecc91d97",
        "parentId" : "1574a809-2afb-4e6c-89cf-c8873c078bb6",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Yeah, I think it shouldn't happen. I'll swap in the exception and re-run all the tests.",
        "createdAt" : "2019-10-29T15:12:45Z",
        "updatedAt" : "2019-10-29T21:04:35Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4d6ae101dee1bb04c4a267771e3f9ac6ec347eb",
    "line" : 246,
    "diffHunk" : "@@ -1,1 +152,156 @@     */\n    public ByteBuffer encode() {\n        if (data.version() > LATEST_SUPPORTED_VERSION) {\n            throw new IllegalStateException(\n                \"Should never try to encode a SubscriptionInfo with version [\" +"
  },
  {
    "id" : "545e51a6-f124-4726-9294-002d452ae146",
    "prId" : 7248,
    "prUrl" : "https://github.com/apache/kafka/pull/7248#pullrequestreview-279256804",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "905d4c7d-ce04-4bef-aa3a-693f5e7a688f",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This one can happen. Note that because the version is larger than any schema version, we'd get an exception if we tried to `encode()` this data, but we never do. Is that ok?",
        "createdAt" : "2019-08-23T23:46:15Z",
        "updatedAt" : "2019-10-29T21:04:35Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4d6ae101dee1bb04c4a267771e3f9ac6ec347eb",
    "line" : 405,
    "diffHunk" : "@@ -1,1 +174,178 @@        final int version = data.getInt();\n\n        if (version > LATEST_SUPPORTED_VERSION) {\n            // in this special case, we only rely on the version and latest version,\n            //"
  },
  {
    "id" : "660bdbf7-f614-4978-8ffa-81102036b731",
    "prId" : 7248,
    "prUrl" : "https://github.com/apache/kafka/pull/7248#pullrequestreview-308234938",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb254660-601e-48c6-8467-3b101f9ad8cb",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "don't we use a number higher than the `latestSupportedVersion` for version probing?",
        "createdAt" : "2019-09-20T02:26:57Z",
        "updatedAt" : "2019-10-29T21:04:35Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "7f893ca9-0021-40b9-bd1c-672ce081ee4b",
        "parentId" : "fb254660-601e-48c6-8467-3b101f9ad8cb",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Yeah, it's confusing...\r\n\r\nThe message itself contains both \"my used version\" and \"my latest supported version\" fields. This is validating that the sender never reports that it's using a version higher than its own latest supported version, which would be nonsense.\r\n\r\nThere's also _this instance's_ (i.e., the receiver of the message) latest supported version. The version probing case is when the sender is using a version higher than the _receiver's_ latest supported version.\r\n\r\nClear as mud, eh?",
        "createdAt" : "2019-09-20T19:33:36Z",
        "updatedAt" : "2019-10-29T21:04:35Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "409165a7-f7a2-49f1-bf41-4c5474b85854",
        "parentId" : "fb254660-601e-48c6-8467-3b101f9ad8cb",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Clear as crystal ：）",
        "createdAt" : "2019-10-29T01:58:39Z",
        "updatedAt" : "2019-10-29T21:04:35Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4d6ae101dee1bb04c4a267771e3f9ac6ec347eb",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +60,64 @@                    \"Got \" + version + \".\"\n            );\n        } else if (latestSupportedVersion != UNKNOWN && (version < 1 || version > latestSupportedVersion)) {\n            throw new IllegalArgumentException(\n                \"version must be between 1 and \" + latestSupportedVersion + \"; was: \" + version"
  },
  {
    "id" : "5323c689-8227-4417-8ad7-8b6176253b3d",
    "prId" : 7248,
    "prUrl" : "https://github.com/apache/kafka/pull/7248#pullrequestreview-308590524",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7253a664-a2ea-41e9-a265-4dccc13539b5",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Could we still keep the log entry? `log.info(\"Unable to decode subscription data: used version: {}; latest supported version: {}\", usedVersion, latestSupportedVersion);`",
        "createdAt" : "2019-10-29T01:48:57Z",
        "updatedAt" : "2019-10-29T21:04:35Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "7bb428e7-d729-4741-9f91-315ebff23118",
        "parentId" : "7253a664-a2ea-41e9-a265-4dccc13539b5",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Oops, didn't mean to drop that. I'll add it back.",
        "createdAt" : "2019-10-29T15:09:27Z",
        "updatedAt" : "2019-10-29T21:04:35Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "e4d6ae101dee1bb04c4a267771e3f9ac6ec347eb",
    "line" : 411,
    "diffHunk" : "@@ -1,1 +180,184 @@            final SubscriptionInfoData subscriptionInfoData = new SubscriptionInfoData();\n            subscriptionInfoData.setVersion(version);\n            subscriptionInfoData.setLatestSupportedVersion(latestSupportedVersion);\n            LOG.info(\"Unable to decode subscription data: used version: {}; latest supported version: {}\",\n                     version, latestSupportedVersion);"
  }
]