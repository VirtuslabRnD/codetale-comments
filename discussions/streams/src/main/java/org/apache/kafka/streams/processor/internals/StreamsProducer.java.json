[
  {
    "id" : "e671bb6f-8af3-4a5f-b257-02c72e387cd7",
    "prId" : 8213,
    "prUrl" : "https://github.com/apache/kafka/pull/8213#pullrequestreview-368886901",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "579cd1e5-0df3-4452-85cc-f7574868839f",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This is a bit on the side, but there was some wacky stuff going on in here, and afaict, the only purpose of all the nullable fields was to allow including the task id in exception messages. Do we really need to do that? If so, I'll just add the logContext to the exception message instead, since it already has the task id in it.",
        "createdAt" : "2020-03-03T22:29:33Z",
        "updatedAt" : "2020-03-05T18:59:47Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "45f630e0-8fef-44db-a301-ac467f6b73f2",
        "parentId" : "579cd1e5-0df3-4452-85cc-f7574868839f",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Actually the `logContext.logPrefix()` should have the format of `stream-thread [%s] task [%s]` already, so all the log4j entries are good. For exception messages, we can just get the `prefix` and then encode that into the exception message.",
        "createdAt" : "2020-03-03T23:28:14Z",
        "updatedAt" : "2020-03-05T18:59:47Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "f948ba23-aeb4-4fa6-b68a-c0d76d992ef1",
        "parentId" : "579cd1e5-0df3-4452-85cc-f7574868839f",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Yep, that's what I was thinking. I'll go ahead and do it.",
        "createdAt" : "2020-03-04T15:40:54Z",
        "updatedAt" : "2020-03-05T18:59:47Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "2eb596b0721bcf1908d19f811d96e5121ca4e41d",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +61,65 @@                           final boolean eosEnabled,\n                           final LogContext logContext,\n                           final String applicationId) {\n        log = logContext.logger(getClass());\n        logPrefix = logContext.logPrefix().trim();"
  },
  {
    "id" : "e188bee5-d25d-4205-bb2e-6545354fbaf1",
    "prId" : 8218,
    "prUrl" : "https://github.com/apache/kafka/pull/8218#pullrequestreview-372438062",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cb4233e5-c713-4740-a6b0-b9c52f931ae1",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Avoid redundant logging.",
        "createdAt" : "2020-03-11T02:22:35Z",
        "updatedAt" : "2020-03-19T08:49:21Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b03a487a518756f7c9acd1f3177b12b407867d5",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +74,78 @@\n    private String formatException(final String message) {\n        return message + \" [\" + logPrefix + \"]\";\n    }\n"
  },
  {
    "id" : "ae14160a-b9e6-49fb-a5f1-c7248f5f6011",
    "prId" : 8218,
    "prUrl" : "https://github.com/apache/kafka/pull/8218#pullrequestreview-372438202",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2476fa28-f72f-458e-bde6-07baf0f4f0f1",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Side cleanup: All those method can actually be package private.",
        "createdAt" : "2020-03-11T02:23:06Z",
        "updatedAt" : "2020-03-19T08:49:21Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b03a487a518756f7c9acd1f3177b12b407867d5",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +80,84 @@     * @throws IllegalStateException if EOS is disabled\n     */\n    void initTransaction() {\n        if (!eosEnabled) {\n            throw new IllegalStateException(formatException(\"EOS is disabled\"));"
  },
  {
    "id" : "eeaae4f6-0bc6-4bd8-b9c6-c2f29b6d360a",
    "prId" : 8313,
    "prUrl" : "https://github.com/apache/kafka/pull/8313#pullrequestreview-377192749",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea369846-a998-4dcf-862c-7d2ab8c6022c",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "I'm not sure this will actually log as it looks like because `debug` log could reserve one slot for error. Could we have a unit test to check the log appender capturing result?",
        "createdAt" : "2020-03-18T19:58:50Z",
        "updatedAt" : "2020-03-18T19:58:53Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "655b7787-6dad-4738-973c-d118f61f11f6",
        "parentId" : "ea369846-a998-4dcf-862c-7d2ab8c6022c",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "In log4j, if there's one more parameter than the `{}` in string which is an exception, it would log the exception trace.\r\n\r\nHere we do not want the trace to be logged and hence we just log the message as `{}`.",
        "createdAt" : "2020-03-18T20:00:37Z",
        "updatedAt" : "2020-03-18T20:00:38Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "97360bcd8e16c08b2af54ffc2e6e7c8e69273f9d",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +203,207 @@                // something else (e.g. task corrupted) we can still ignore the exception here\n                // since transaction already got aborted by brokers/transactional-coordinator if this happens\n                log.debug(\"Encountered {} while aborting the transaction; this is expected and hence swallowed\", error.getMessage());\n            } catch (final KafkaException error) {\n                throw new StreamsException("
  },
  {
    "id" : "2454f60c-1dc3-41b2-950a-d52d97c31d05",
    "prId" : 8318,
    "prUrl" : "https://github.com/apache/kafka/pull/8318#pullrequestreview-378681560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a08f7c31-bd1d-4da4-8b26-6d34833450ec",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Not for this PR: `FencedInstanceIdException` should not be handled as a task-migration exception since it indicates some other instance with the same instance.id has started, and hence this instance should really be closed as a whole.\r\n\r\nJust to clarify your PR did the right thing to not capture it, I just set it as a reminder for myself since I found that some other places we capture `FencedInstanceIdException` incorrectly.",
        "createdAt" : "2020-03-20T17:31:56Z",
        "updatedAt" : "2020-03-21T18:49:58Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "59154ab4ee7c4f24706911fb37b8118510d1a3a1",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +168,172 @@            producer.commitTransaction();\n            transactionInFlight = false;\n        } catch (final ProducerFencedException | CommitFailedException error) {\n            throw new TaskMigratedException(\n                formatException(\"Producer got fenced trying to commit a transaction\"),"
  },
  {
    "id" : "9a2f69ec-d24e-4adb-b0af-3b7183e041b5",
    "prId" : 8331,
    "prUrl" : "https://github.com/apache/kafka/pull/8331#pullrequestreview-382458566",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c15fa6b2-799e-4440-8ce6-723d9adf2fd6",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Why we need to keep both processingMode and eosEnabled?",
        "createdAt" : "2020-03-24T18:01:04Z",
        "updatedAt" : "2020-03-30T21:41:00Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "0eb013f4-5132-49e4-bca4-382c64fec1b2",
        "parentId" : "c15fa6b2-799e-4440-8ce6-723d9adf2fd6",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "It's simpler IMHO -- for most duties like \"initTx\" or \"beginTx\" we don't care if its eos-alpha or eos-beta. If we only keep `processingMode` we need to rewrite:\r\n```\r\nif (eosEnabled) {\r\n...\r\n}\r\n```\r\nto\r\n```\r\nif (processingMode == EXACTLY_ONCE_ALPHA || processingMode == EXACTLY_ONCE_BETA) {\r\n...\r\n}\r\n```\r\n\r\nwhat seem to be more \"clumsy\" ?",
        "createdAt" : "2020-03-25T00:05:32Z",
        "updatedAt" : "2020-03-30T21:41:00Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "fce7d45c-c8e4-428d-bc78-e3ac6590e276",
        "parentId" : "c15fa6b2-799e-4440-8ce6-723d9adf2fd6",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "My concern is that keep two variables is always more vulnerable to bugs where the two mistakenly have different values (e.g. eosEnabled == false while mode == EXACTLY_ONCE). Instead, we can have a private method `eosEabled()` which is based on the mode variable and then be called whenever possible.",
        "createdAt" : "2020-03-26T20:35:57Z",
        "updatedAt" : "2020-03-30T21:41:00Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "2cae502b-c360-4036-babe-0080791b88d0",
        "parentId" : "c15fa6b2-799e-4440-8ce6-723d9adf2fd6",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Works for me",
        "createdAt" : "2020-03-26T22:14:01Z",
        "updatedAt" : "2020-03-30T21:41:01Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "c01468233fc24b2deb017a7bdf80dc2c644d92fc",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +57,61 @@\n    private Producer<byte[], byte[]> producer;\n    private final StreamThread.ProcessingMode processingMode;\n\n    private boolean transactionInFlight = false;"
  },
  {
    "id" : "b6b0d92d-e6ba-4f35-a50b-f31665b04f34",
    "prId" : 8443,
    "prUrl" : "https://github.com/apache/kafka/pull/8443#pullrequestreview-390440792",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a720c5ed-fef0-48f9-b057-9f0a6550bcc8",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Include the thread-index in the `transactional.id` to generate unique IDs for different threads within the same process.\r\n\r\n(I stripped out the `\"-StreamThread-\"` string in contrast to the old code for shorten the ID)",
        "createdAt" : "2020-04-09T01:48:10Z",
        "updatedAt" : "2020-04-09T01:48:11Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f7ee56278adb524ab04ec1cde667ec8e06e69ed",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +116,120 @@                    applicationId + \"-\" +\n                        Objects.requireNonNull(processId, \"processId cannot be null for exactly-once beta\") +\n                        \"-\" + threadId.split(\"-StreamThread-\")[1]);\n\n                eosBetaProducerConfigs = producerConfigs;"
  },
  {
    "id" : "03eb3b78-8877-44df-9f4c-24f79af508bf",
    "prId" : 9700,
    "prUrl" : "https://github.com/apache/kafka/pull/9700#pullrequestreview-547732182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81337bda-3c8e-48d7-8739-8c418b0ea630",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "```suggestion\r\n            } catch (final ProducerFencedException || InvalidProducerEpochException error) {\r\n```",
        "createdAt" : "2020-12-07T23:33:16Z",
        "updatedAt" : "2020-12-07T23:54:41Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "b1ca516b-c2c4-4f66-9748-957d09e7d210",
        "parentId" : "81337bda-3c8e-48d7-8739-8c418b0ea630",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "This won't work I suppose?",
        "createdAt" : "2020-12-08T19:43:16Z",
        "updatedAt" : "2020-12-08T19:43:17Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "2ed19af3-df17-4278-a396-0817e610845a",
        "parentId" : "81337bda-3c8e-48d7-8739-8c418b0ea630",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Oh lol sorry I was just comparing it with the other block. Obviously nvm",
        "createdAt" : "2020-12-08T23:57:23Z",
        "updatedAt" : "2020-12-08T23:57:23Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "4cd4ea7c5e7dc784a64c1c688f1a5060a9487c11",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +190,194 @@                producer.beginTransaction();\n                transactionInFlight = true;\n            } catch (final ProducerFencedException | InvalidProducerEpochException error) {\n                throw new TaskMigratedException(\n                    formatException(\"Producer got fenced trying to begin a new transaction\"),"
  },
  {
    "id" : "b4c0650f-4db2-4f63-9fc9-72d3d8ded3da",
    "prId" : 10392,
    "prUrl" : "https://github.com/apache/kafka/pull/10392#pullrequestreview-619269110",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37d221d0-88d0-498e-929b-43d63c8f3706",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Needed this so I could move the subclass to a different package. I think it's still just as obviously inappropriate for users to subclass this class, since it's in the `internals` package.",
        "createdAt" : "2021-03-24T03:00:43Z",
        "updatedAt" : "2021-03-24T16:43:44Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bd02e09fe0afda7f1c336e1bdf5be6cb2c66afe",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +238,242 @@     * @throws TaskMigratedException\n     */\n    protected void commitTransaction(final Map<TopicPartition, OffsetAndMetadata> offsets,\n                           final ConsumerGroupMetadata consumerGroupMetadata) {\n        if (!eosEnabled()) {"
  }
]