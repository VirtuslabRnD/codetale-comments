[
  {
    "id" : "c8662e48-895a-42b4-aa47-52fcbf4845c1",
    "prId" : 5687,
    "prUrl" : "https://github.com/apache/kafka/pull/5687#pullrequestreview-158294736",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22991428-ea86-4149-8178-d8648ba0ea8b",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Unlike the source/sink nodes, the `suppress` processor needs to be able to handle `Change`s in which both `new` and `old` are non-null.",
        "createdAt" : "2018-09-24T21:03:47Z",
        "updatedAt" : "2018-09-25T17:39:14Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "b40354ce9f18459f56b1bc8ca8249a52d4ec9cef",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +28,32 @@import static java.util.Objects.requireNonNull;\n\npublic class FullChangeSerde<T> implements Serde<Change<T>> {\n    private final Serde<T> inner;\n"
  },
  {
    "id" : "695a237e-4431-4baa-bef7-9dcb2f14b4bc",
    "prId" : 5687,
    "prUrl" : "https://github.com/apache/kafka/pull/5687#pullrequestreview-158373859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0bf6cfb-d166-4f9a-b3ba-3ff3cd2de7c1",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "@guozhangwang , rather than copy/paste the non-trivial transformation logic, what do you think about just delegating to the actual ByteBufferSerializer?\r\n\r\nThe deserializer is trivial, but I went ahead and used it in my deserializer, too, for symmetry.\r\n\r\nI'm thinking that as long as the ByteBufferSerializer is stable, and it doesn't do anything weird in the future, this should be fine. And that should be the case, since future versions of the code are going to have to be compatible with data written by older versions.",
        "createdAt" : "2018-09-25T02:23:42Z",
        "updatedAt" : "2018-09-25T17:39:14Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "0b8f1c7c-a575-405d-b98c-4d330a847d83",
        "parentId" : "f0bf6cfb-d166-4f9a-b3ba-3ff3cd2de7c1",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Sounds good.",
        "createdAt" : "2018-09-25T04:27:02Z",
        "updatedAt" : "2018-09-25T17:39:14Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b40354ce9f18459f56b1bc8ca8249a52d4ec9cef",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +77,81 @@                    buffer.put(newBytes);\n                }\n                return byteBufferSerializer.serialize(null, buffer);\n            }\n"
  },
  {
    "id" : "170ae39e-72e1-4815-b1ae-0ce5d278b271",
    "prId" : 5687,
    "prUrl" : "https://github.com/apache/kafka/pull/5687#pullrequestreview-158657977",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec3a604d-ec57-4f97-be00-c0d80fd7eb22",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Can we get a unit test for `FullChangeSerde`? ",
        "createdAt" : "2018-09-25T14:18:29Z",
        "updatedAt" : "2018-09-25T17:39:14Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "5e41c4e0-19de-4f24-bee6-2332806f0154",
        "parentId" : "ec3a604d-ec57-4f97-be00-c0d80fd7eb22",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Oh! good catch.",
        "createdAt" : "2018-09-25T15:49:22Z",
        "updatedAt" : "2018-09-25T17:39:14Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "80afbf82-b635-4ada-8e7e-ec40ff357871",
        "parentId" : "ec3a604d-ec57-4f97-be00-c0d80fd7eb22",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Thanks for this. I added one, and it turns out I caught a couple of bugs!",
        "createdAt" : "2018-09-25T17:30:51Z",
        "updatedAt" : "2018-09-25T17:39:14Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "b40354ce9f18459f56b1bc8ca8249a52d4ec9cef",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +31,35 @@    private final Serde<T> inner;\n\n    public FullChangeSerde(final Serde<T> inner) {\n        this.inner = requireNonNull(inner);\n    }"
  },
  {
    "id" : "2a7b1a9b-de51-44b1-aabf-0ac15fd83785",
    "prId" : 5693,
    "prUrl" : "https://github.com/apache/kafka/pull/5693#pullrequestreview-160337038",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e70ef07-5f96-4034-989f-be4bb9dd5a7e",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why this change? (Just for my own education.)",
        "createdAt" : "2018-10-01T04:16:41Z",
        "updatedAt" : "2018-10-02T03:20:17Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "80e1d029-2fba-41a7-9a93-e579c31160e4",
        "parentId" : "1e70ef07-5f96-4034-989f-be4bb9dd5a7e",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "It's just evidence of my mental slowness...\r\n\r\nIn the prior PR, Guozhang pointed out that my calling `buffer.array()` was incorrect, since the backing array isn't guaranteed to be exactly within the bounds we allocated. I fixed it at the time by delegating to the `ByteBufferSerializer`, which handles this.\r\n\r\nLater on I realized that there is a more efficient solution available. By pre-creating the backing array and wrapping it, we know that `buffer.array()` returns what we needed. No need for the more general handling logic in `ByteBufferSerializer`.",
        "createdAt" : "2018-10-01T14:55:34Z",
        "updatedAt" : "2018-10-02T03:20:17Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "ddd78d9ad6826da2d821584232f2750d022ef34a",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +74,78 @@                final int newSize = newBytes == null ? -1 : newBytes.length;\n\n                final ByteBuffer buffer = ByteBuffer.wrap(\n                    new byte[4 + (oldSize == -1 ? 0 : oldSize) + 4 + (newSize == -1 ? 0 : newSize)]\n                );"
  }
]