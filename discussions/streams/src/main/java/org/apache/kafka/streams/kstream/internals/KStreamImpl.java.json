[
  {
    "id" : "7acb9a94-98fe-42d9-850f-a3d6409f6dec",
    "prId" : 4983,
    "prUrl" : "https://github.com/apache/kafka/pull/4983#pullrequestreview-122346837",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de885309-32e2-4abb-9f38-c389bf83ac58",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Why `StreamTableJoinNode` is not extending from `BaseJoinNode`?",
        "createdAt" : "2018-05-22T00:21:07Z",
        "updatedAt" : "2018-06-15T03:52:33Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "2a5fe094-16fb-483d-a3ca-06241767942b",
        "parentId" : "de885309-32e2-4abb-9f38-c389bf83ac58",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "`BaseJoinNode` was created to support Stream-Stream and Table-Table joins, as they have several parameters in common including 3 `ProcessorSuppliers`.  `StreamTable` joins have far fewer parameters just 1 `ProcessorSupplier` so IMHO it justified a separate class.",
        "createdAt" : "2018-05-22T20:48:33Z",
        "updatedAt" : "2018-06-15T03:52:33Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "679568bc781f609b8fdf5b95924a8202c9e3c592",
    "line" : 501,
    "diffHunk" : "@@ -1,1 +734,738 @@        ProcessorParameters<K, V> processorParameters = new ProcessorParameters<>(processorSupplier, name);\n\n        StreamTableJoinNode<K, V> streamTableJoinNode = new StreamTableJoinNode<>(name,\n                                                                                  processorParameters,\n                                                                                  new String[]{});"
  },
  {
    "id" : "af632130-2761-49fe-b93e-a514113e5c5a",
    "prId" : 5201,
    "prUrl" : "https://github.com/apache/kafka/pull/5201#pullrequestreview-142092644",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81aeb5ff-eea3-45c9-8092-c9dfb6eff276",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Why we pass `null` before and now we need to pass in the `transformNode`? Was it a bug before and we fixed it here?",
        "createdAt" : "2018-07-31T05:07:45Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "01e5eb49-09eb-4429-8a2a-b2e935647709",
        "parentId" : "81aeb5ff-eea3-45c9-8092-c9dfb6eff276",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "We were never actually using the graph before, right? So a missed node might go unnoticed until now, when we actually build the topology from the graph.",
        "createdAt" : "2018-07-31T15:31:34Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "e3d7063b-7ad4-4189-b81e-bd0b6831624d",
        "parentId" : "81aeb5ff-eea3-45c9-8092-c9dfb6eff276",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "looking from the history looks like it was a bug but fixed here.",
        "createdAt" : "2018-07-31T16:13:05Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "9d9d4a53-6b68-4c4c-89dd-e87242b455e2",
        "parentId" : "81aeb5ff-eea3-45c9-8092-c9dfb6eff276",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Thanks for confirming :) just want to make sure it is not a regression.",
        "createdAt" : "2018-07-31T18:42:26Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b49c4f31e1be598f1898d9d78dc0df7ecf8ab4c1",
    "line" : 486,
    "diffHunk" : "@@ -1,1 +461,465 @@\n\n        return new KStreamImpl<>(builder, name, sourceNodes, true, transformNode);\n    }\n"
  },
  {
    "id" : "9028f175-a17f-4176-b433-7658cd2986f5",
    "prId" : 5201,
    "prUrl" : "https://github.com/apache/kafka/pull/5201#pullrequestreview-142092931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b923174-c37a-4027-81e6-3b7b46e20d8a",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "We did not add a new logical node here anymore in this PR, is this intentional?",
        "createdAt" : "2018-07-31T05:18:43Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "41dd8dfd-8f95-4a06-b316-89eb42d325b7",
        "parentId" : "7b923174-c37a-4027-81e6-3b7b46e20d8a",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Yes, it's intentional. What I found during testing is that we don't need to create a node here.\r\n\r\nI initially had a logical node at this point, but it never rendered any details for the physical plan, as it's methods on the `KGroupedStreamImpl` that provide details for the next operation of the physical plan, thus we only need to create a new logical node when one of those operations are specified.\r\n\r\nWhen I did create a new logical plan node here, it contained no details to render, so I needed to put in checks for `null` `ProcessorParameters`. Having a placeholder node was somewhat probalmatic, so instead of a \"dummy\" node which I found to be confusing as well, I removed creating a new node at this point, and IMHO is better off this way.\r\n",
        "createdAt" : "2018-07-31T16:43:32Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "bd47e327-e63f-434c-8452-92b63ebb74f7",
        "parentId" : "7b923174-c37a-4027-81e6-3b7b46e20d8a",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Thanks!",
        "createdAt" : "2018-07-31T18:43:13Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b49c4f31e1be598f1898d9d78dc0df7ecf8ab4c1",
    "line" : 884,
    "diffHunk" : "@@ -1,1 +816,820 @@                                        serializedInternal.valueSerde(),\n                                        this.repartitionRequired,\n                                        streamsGraphNode);\n\n    }"
  },
  {
    "id" : "71095013-c62d-49db-ac61-865b20d09d0a",
    "prId" : 5521,
    "prUrl" : "https://github.com/apache/kafka/pull/5521#pullrequestreview-147396628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7ef1861-5705-4d04-a9f7-c4f0d2c058a6",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "super nit: why the change in the order of constructor args?",
        "createdAt" : "2018-08-17T19:10:09Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "c2cd9dc3-453a-4575-b336-2d595bd5d9a8",
        "parentId" : "f7ef1861-5705-4d04-a9f7-c4f0d2c058a6",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "My personal paranoid-taste: to keep the parameters with similar length together :P",
        "createdAt" : "2018-08-17T22:19:06Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1278ae279c9fa20317e55ded8aeb364eab097127",
    "line" : 522,
    "diffHunk" : "@@ -1,1 +794,798 @@\n        builder.addGraphNode(this.streamsGraphNode, selectKeyMapNode);\n        return new KGroupedStreamImpl<>(selectKeyMapNode.nodeName(),\n                                        serializedInternal.keySerde(),\n                                        serializedInternal.valueSerde() != null ? serializedInternal.valueSerde() : valSerde,"
  },
  {
    "id" : "9ae0437d-7ba0-42a2-a6c5-928f5cfac3db",
    "prId" : 5521,
    "prUrl" : "https://github.com/apache/kafka/pull/5521#pullrequestreview-157509925",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c2ad3ff-6403-494e-a643-dda3a353be05",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is found and fixed while I'm adding unit tests.",
        "createdAt" : "2018-09-21T00:12:02Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1278ae279c9fa20317e55ded8aeb364eab097127",
    "line" : 539,
    "diffHunk" : "@@ -1,1 +812,816 @@        final SerializedInternal<K, V> serializedInternal = new SerializedInternal<>(serialized);\n        return new KGroupedStreamImpl<>(this.name,\n                                        serializedInternal.keySerde() != null ? serializedInternal.keySerde() : keySerde,\n                                        serializedInternal.valueSerde() != null ? serializedInternal.valueSerde() : valSerde,\n                                        sourceNodes,"
  }
]