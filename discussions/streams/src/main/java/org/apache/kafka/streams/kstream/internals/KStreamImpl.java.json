[
  {
    "id" : "7acb9a94-98fe-42d9-850f-a3d6409f6dec",
    "prId" : 4983,
    "prUrl" : "https://github.com/apache/kafka/pull/4983#pullrequestreview-122346837",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de885309-32e2-4abb-9f38-c389bf83ac58",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Why `StreamTableJoinNode` is not extending from `BaseJoinNode`?",
        "createdAt" : "2018-05-22T00:21:07Z",
        "updatedAt" : "2018-06-15T03:52:33Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "2a5fe094-16fb-483d-a3ca-06241767942b",
        "parentId" : "de885309-32e2-4abb-9f38-c389bf83ac58",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "`BaseJoinNode` was created to support Stream-Stream and Table-Table joins, as they have several parameters in common including 3 `ProcessorSuppliers`.  `StreamTable` joins have far fewer parameters just 1 `ProcessorSupplier` so IMHO it justified a separate class.",
        "createdAt" : "2018-05-22T20:48:33Z",
        "updatedAt" : "2018-06-15T03:52:33Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "679568bc781f609b8fdf5b95924a8202c9e3c592",
    "line" : 501,
    "diffHunk" : "@@ -1,1 +734,738 @@        ProcessorParameters<K, V> processorParameters = new ProcessorParameters<>(processorSupplier, name);\n\n        StreamTableJoinNode<K, V> streamTableJoinNode = new StreamTableJoinNode<>(name,\n                                                                                  processorParameters,\n                                                                                  new String[]{});"
  },
  {
    "id" : "af632130-2761-49fe-b93e-a514113e5c5a",
    "prId" : 5201,
    "prUrl" : "https://github.com/apache/kafka/pull/5201#pullrequestreview-142092644",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81aeb5ff-eea3-45c9-8092-c9dfb6eff276",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Why we pass `null` before and now we need to pass in the `transformNode`? Was it a bug before and we fixed it here?",
        "createdAt" : "2018-07-31T05:07:45Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "01e5eb49-09eb-4429-8a2a-b2e935647709",
        "parentId" : "81aeb5ff-eea3-45c9-8092-c9dfb6eff276",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "We were never actually using the graph before, right? So a missed node might go unnoticed until now, when we actually build the topology from the graph.",
        "createdAt" : "2018-07-31T15:31:34Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "e3d7063b-7ad4-4189-b81e-bd0b6831624d",
        "parentId" : "81aeb5ff-eea3-45c9-8092-c9dfb6eff276",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "looking from the history looks like it was a bug but fixed here.",
        "createdAt" : "2018-07-31T16:13:05Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "9d9d4a53-6b68-4c4c-89dd-e87242b455e2",
        "parentId" : "81aeb5ff-eea3-45c9-8092-c9dfb6eff276",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Thanks for confirming :) just want to make sure it is not a regression.",
        "createdAt" : "2018-07-31T18:42:26Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b49c4f31e1be598f1898d9d78dc0df7ecf8ab4c1",
    "line" : 486,
    "diffHunk" : "@@ -1,1 +461,465 @@\n\n        return new KStreamImpl<>(builder, name, sourceNodes, true, transformNode);\n    }\n"
  },
  {
    "id" : "9028f175-a17f-4176-b433-7658cd2986f5",
    "prId" : 5201,
    "prUrl" : "https://github.com/apache/kafka/pull/5201#pullrequestreview-142092931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b923174-c37a-4027-81e6-3b7b46e20d8a",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "We did not add a new logical node here anymore in this PR, is this intentional?",
        "createdAt" : "2018-07-31T05:18:43Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "41dd8dfd-8f95-4a06-b316-89eb42d325b7",
        "parentId" : "7b923174-c37a-4027-81e6-3b7b46e20d8a",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Yes, it's intentional. What I found during testing is that we don't need to create a node here.\r\n\r\nI initially had a logical node at this point, but it never rendered any details for the physical plan, as it's methods on the `KGroupedStreamImpl` that provide details for the next operation of the physical plan, thus we only need to create a new logical node when one of those operations are specified.\r\n\r\nWhen I did create a new logical plan node here, it contained no details to render, so I needed to put in checks for `null` `ProcessorParameters`. Having a placeholder node was somewhat probalmatic, so instead of a \"dummy\" node which I found to be confusing as well, I removed creating a new node at this point, and IMHO is better off this way.\r\n",
        "createdAt" : "2018-07-31T16:43:32Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "bd47e327-e63f-434c-8452-92b63ebb74f7",
        "parentId" : "7b923174-c37a-4027-81e6-3b7b46e20d8a",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Thanks!",
        "createdAt" : "2018-07-31T18:43:13Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b49c4f31e1be598f1898d9d78dc0df7ecf8ab4c1",
    "line" : 884,
    "diffHunk" : "@@ -1,1 +816,820 @@                                        serializedInternal.valueSerde(),\n                                        this.repartitionRequired,\n                                        streamsGraphNode);\n\n    }"
  },
  {
    "id" : "71095013-c62d-49db-ac61-865b20d09d0a",
    "prId" : 5521,
    "prUrl" : "https://github.com/apache/kafka/pull/5521#pullrequestreview-147396628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7ef1861-5705-4d04-a9f7-c4f0d2c058a6",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "super nit: why the change in the order of constructor args?",
        "createdAt" : "2018-08-17T19:10:09Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "c2cd9dc3-453a-4575-b336-2d595bd5d9a8",
        "parentId" : "f7ef1861-5705-4d04-a9f7-c4f0d2c058a6",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "My personal paranoid-taste: to keep the parameters with similar length together :P",
        "createdAt" : "2018-08-17T22:19:06Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1278ae279c9fa20317e55ded8aeb364eab097127",
    "line" : 522,
    "diffHunk" : "@@ -1,1 +794,798 @@\n        builder.addGraphNode(this.streamsGraphNode, selectKeyMapNode);\n        return new KGroupedStreamImpl<>(selectKeyMapNode.nodeName(),\n                                        serializedInternal.keySerde(),\n                                        serializedInternal.valueSerde() != null ? serializedInternal.valueSerde() : valSerde,"
  },
  {
    "id" : "9ae0437d-7ba0-42a2-a6c5-928f5cfac3db",
    "prId" : 5521,
    "prUrl" : "https://github.com/apache/kafka/pull/5521#pullrequestreview-157509925",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c2ad3ff-6403-494e-a643-dda3a353be05",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is found and fixed while I'm adding unit tests.",
        "createdAt" : "2018-09-21T00:12:02Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1278ae279c9fa20317e55ded8aeb364eab097127",
    "line" : 539,
    "diffHunk" : "@@ -1,1 +812,816 @@        final SerializedInternal<K, V> serializedInternal = new SerializedInternal<>(serialized);\n        return new KGroupedStreamImpl<>(this.name,\n                                        serializedInternal.keySerde() != null ? serializedInternal.keySerde() : keySerde,\n                                        serializedInternal.valueSerde() != null ? serializedInternal.valueSerde() : valSerde,\n                                        sourceNodes,"
  },
  {
    "id" : "d9cfc99f-0c1a-4021-9ebf-de62d243239a",
    "prId" : 5709,
    "prUrl" : "https://github.com/apache/kafka/pull/5709#pullrequestreview-160131443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "199d666c-436b-4190-b308-b461747cb0a3",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Do we need this annotation again? Though we would need a `@SuppressWarning(\"deprecation\")` here instead?",
        "createdAt" : "2018-09-30T00:09:37Z",
        "updatedAt" : "2018-10-02T03:08:38Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "8e459935-7350-4e7b-8a39-e109b36ab183",
        "parentId" : "199d666c-436b-4190-b308-b461747cb0a3",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "IMHO, it's better to pass along the deprecation instead of suppressing it.\r\n\r\nThey both cause the compiler not to issue warnings about the use of deprecated APIs in the method body.\r\n\r\nThis difference is that if we suppress it here, then any `groupBy` calls on a `KStreamImpl` reference *will not* issue a warning, whereas calls on a `KStream` reference will issue the warning as desired.",
        "createdAt" : "2018-09-30T14:51:38Z",
        "updatedAt" : "2018-10-02T03:08:38Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "d0337d11-8478-4b15-9af9-60b066d76ae4",
        "parentId" : "199d666c-436b-4190-b308-b461747cb0a3",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I don't think that suppress works for any callers of `KStreamImpl#groupBy` -- from my understanding, there will be a warning for all callers independently of a suppress annotation -- callers would need to add their own annotation to suppress the warning for them. A `SuppressWarning` only suppressed warning from the body/implementation of this method (ie, if we would call any other deprecated method).\r\n\r\nI also don't think we need `@Deprecated` as this annotation is inherited anyway.\r\n\r\nHowever, this is an internal class anyway, and thus, not public. Thus, I don't have a strong opinion on this.",
        "createdAt" : "2018-09-30T22:37:37Z",
        "updatedAt" : "2018-10-02T03:08:38Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1865cefcf62b3da85b2bff112296d49717891c34",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +791,795 @@\n    @Override\n    @Deprecated\n    public <KR> KGroupedStream<KR, V> groupBy(final KeyValueMapper<? super K, ? super V, KR> selector,\n                                              final Serialized<KR, V> serialized) {"
  },
  {
    "id" : "42fbfc27-349c-47b0-8256-f82de1f1980c",
    "prId" : 5709,
    "prUrl" : "https://github.com/apache/kafka/pull/5709#pullrequestreview-160096116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e921def-7f56-41a3-9ce9-7991e27d48bd",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "as above",
        "createdAt" : "2018-09-30T00:10:22Z",
        "updatedAt" : "2018-10-02T03:08:38Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1865cefcf62b3da85b2bff112296d49717891c34",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +827,831 @@\n    @Override\n    @Deprecated\n    public KGroupedStream<K, V> groupByKey(final Serialized<K, V> serialized) {\n        final SerializedInternal<K, V> serializedInternal = new SerializedInternal<>(serialized);"
  },
  {
    "id" : "09b4b29a-934a-4a88-b4c4-42c5ea73f070",
    "prId" : 5709,
    "prUrl" : "https://github.com/apache/kafka/pull/5709#pullrequestreview-160945777",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b424eca-6dbd-450a-9fc3-b8a11257783e",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: remove var `newJoined` (also not used for left-hand-side code)",
        "createdAt" : "2018-10-02T04:02:10Z",
        "updatedAt" : "2018-10-02T04:15:07Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "daca3cee-6777-4361-97af-c3e8e7354463",
        "parentId" : "8b424eca-6dbd-450a-9fc3-b8a11257783e",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "We need this right now to work with generics as the `repartitionForJoin` signature is `<K, V> repartitionForJoin(final Joined<K, V, ?> ` but the right-hand side is `<K, V1>` and the left-hand side is `<K, V>`. \r\n\r\nI know it's a bit of a hack, but I think it's worth the trade-off for being able to pass a single `Joined` parameter, vs. all of the required components of `Joined`.  Having the single `Joined` parameter was introduced from the Serdes inheritance PR.  If you insist I can revert to what it was before.",
        "createdAt" : "2018-10-02T21:26:03Z",
        "updatedAt" : "2018-10-02T21:39:46Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "639571f2-554e-4beb-bbda-33813c57e88a",
        "parentId" : "8b424eca-6dbd-450a-9fc3-b8a11257783e",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Ack. Makes sense.",
        "createdAt" : "2018-10-02T22:15:53Z",
        "updatedAt" : "2018-10-02T22:15:53Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1865cefcf62b3da85b2bff112296d49717891c34",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +574,578 @@        if (joinOther.repartitionRequired) {\n            final String rightJoinRepartitionTopicName = joined.name() != null ? joined.name() + \"-right\" : joinOther.name;\n            final Joined newJoined = Joined.with(joined.keySerde(), joined.valueSerde(), joined.otherValueSerde(), rightJoinRepartitionTopicName);\n            joinOther = joinOther.repartitionForJoin(newJoined);\n        }"
  },
  {
    "id" : "c6594c6c-f361-413f-96eb-ad86579eb822",
    "prId" : 5709,
    "prUrl" : "https://github.com/apache/kafka/pull/5709#pullrequestreview-160930715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c6776e7-cc68-43b1-a428-6976c5c7234b",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Was this a bug, to pass in `null` as value Serde? Did Guozhang's PR introduce this?",
        "createdAt" : "2018-10-02T04:05:01Z",
        "updatedAt" : "2018-10-02T04:15:07Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "f2866085-796d-41de-8296-362a99ed6ac8",
        "parentId" : "3c6776e7-cc68-43b1-a428-6976c5c7234b",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Introduced by the Serdes inheritance PR",
        "createdAt" : "2018-10-02T21:26:26Z",
        "updatedAt" : "2018-10-02T21:26:26Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1865cefcf62b3da85b2bff112296d49717891c34",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +787,791 @@    @Override\n    public <K1> KGroupedStream<K1, V> groupBy(final KeyValueMapper<? super K, ? super V, K1> selector) {\n        return groupBy(selector, Grouped.with(null, valSerde));\n    }\n"
  },
  {
    "id" : "918d999e-fa0e-4801-bbe6-7bd1b7537d69",
    "prId" : 5709,
    "prUrl" : "https://github.com/apache/kafka/pull/5709#pullrequestreview-160930763",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6d78c4a-9c75-4281-bff7-359130d3d1e9",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Similar here?",
        "createdAt" : "2018-10-02T04:06:08Z",
        "updatedAt" : "2018-10-02T04:15:07Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "2ca47990-9488-45aa-8039-133ff8d0f7b9",
        "parentId" : "d6d78c4a-9c75-4281-bff7-359130d3d1e9",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "same as above",
        "createdAt" : "2018-10-02T21:26:35Z",
        "updatedAt" : "2018-10-02T21:26:35Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1865cefcf62b3da85b2bff112296d49717891c34",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +823,827 @@    @Override\n    public KGroupedStream<K, V> groupByKey() {\n        return groupByKey(Grouped.with(keySerde, valSerde));\n    }\n"
  },
  {
    "id" : "2d156d23-8920-44a1-926a-0968482b88ab",
    "prId" : 5741,
    "prUrl" : "https://github.com/apache/kafka/pull/5741#pullrequestreview-161735640",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27e5438e-e285-4a5c-b4d0-4a41f5378f27",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This was incorrectly typed with the result k/v instead of the input k/v",
        "createdAt" : "2018-10-04T17:55:46Z",
        "updatedAt" : "2018-10-04T21:38:59Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "79ded18384601459c38b700fc2d157e1f92704af",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +452,456 @@        final String name = builder.newProcessorName(TRANSFORM_NAME);\n\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamTransform<>(transformerSupplier), name),"
  },
  {
    "id" : "e30707b6-443b-48b3-b679-6f101a246eb2",
    "prId" : 5741,
    "prUrl" : "https://github.com/apache/kafka/pull/5741#pullrequestreview-161822218",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0abffc16-3ac3-4088-b99d-5b04c482d4b6",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Renamed these to match the other names used in this class",
        "createdAt" : "2018-10-04T19:35:19Z",
        "updatedAt" : "2018-10-04T21:38:59Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "b46737da-28ff-4d87-b304-16cb1a5f26c6",
        "parentId" : "0abffc16-3ac3-4088-b99d-5b04c482d4b6",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Should the `<V1, R> KStream<K, R> outerJoin` and `<V1, R> KStream<K, R> join` above be changed as well?",
        "createdAt" : "2018-10-04T20:29:48Z",
        "updatedAt" : "2018-10-04T21:38:59Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "28616319-241b-4538-b412-4c470f894fc6",
        "parentId" : "0abffc16-3ac3-4088-b99d-5b04c482d4b6",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "In response to this comment, I've gone through the whole `KStreamImpl` and standardized the generic types in the following way:\r\n* `K,V` (unchanged) the key/value types of `this` stream\r\n* `KR/VR` the \"result\" key/value types where applicable\r\n* `KO/VO` the \"other\" key/value types (where there's an \"other\" stream involved)\r\n* `KG/VG` the key/value types when there's a global table involved\r\n* `K1/V1` key/value types with no particular semantics that are scoped to the method (I.e., not the same as the instance-level `this` `K/V`)",
        "createdAt" : "2018-10-04T21:42:31Z",
        "updatedAt" : "2018-10-04T21:42:31Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "79ded18384601459c38b700fc2d157e1f92704af",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +556,560 @@    }\n\n    private <VO, VR> KStream<K, VR> doJoin(final KStream<K, VO> other,\n                                           final ValueJoiner<? super V, ? super VO, ? extends VR> joiner,\n                                           final JoinWindows windows,"
  },
  {
    "id" : "c42e7e50-5ffa-41e7-bd32-0933d4e3cf4e",
    "prId" : 5900,
    "prUrl" : "https://github.com/apache/kafka/pull/5900#pullrequestreview-174675916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05f9b0bf-75eb-4b2a-91c1-ab515aa88f54",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Lgtm.",
        "createdAt" : "2018-11-14T02:30:18Z",
        "updatedAt" : "2018-11-14T03:33:15Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d2c25b68fd398d988dc90eaec78c66561d090e5",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +797,801 @@    @Deprecated\n    public <KR> KGroupedStream<KR, V> groupBy(final KeyValueMapper<? super K, ? super V, KR> selector,\n                                              final org.apache.kafka.streams.kstream.Serialized<KR, V> serialized) {\n        Objects.requireNonNull(selector, \"selector can't be null\");\n        Objects.requireNonNull(serialized, \"serialized can't be null\");"
  },
  {
    "id" : "aff6e352-eb5a-4f44-ba35-13cdebb98745",
    "prId" : 6409,
    "prUrl" : "https://github.com/apache/kafka/pull/6409#pullrequestreview-216474055",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6baa66a3-e0b6-4aaa-9ce1-2122afdf937e",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: should this be `name` (similar to above) only?",
        "createdAt" : "2019-03-19T23:50:49Z",
        "updatedAt" : "2019-03-19T23:52:44Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "940484ae4068bbed0db1921b3f0538865f756e4c",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +710,714 @@        Objects.requireNonNull(joined, \"joined can't be null\");\n        final JoinedInternal<K, V, VO> joinedInternal = new JoinedInternal<>(joined);\n        final String internalName = joinedInternal.name();\n        if (repartitionRequired) {\n            final KStreamImpl<K, V> thisStreamRepartitioned = repartitionForJoin("
  },
  {
    "id" : "e2910082-d37f-4f5e-ae7b-dae1005f13eb",
    "prId" : 6410,
    "prUrl" : "https://github.com/apache/kafka/pull/6410#pullrequestreview-216747965",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7b192fc-7184-4b56-9470-b96eec959274",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "What is this change about?",
        "createdAt" : "2019-03-20T00:13:39Z",
        "updatedAt" : "2019-04-18T08:31:45Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "0a2202fb-01a6-4e8e-af54-352f1b026acd",
        "parentId" : "c7b192fc-7184-4b56-9470-b96eec959274",
        "authorId" : "8090918c-29d3-43df-b67b-9b52e0bfe240",
        "body" : "The method `internalSelectKey` now accept an `NamedInternal` instance. As this method is private we are expecting to not pass a null argument. Passing an empty `NamedInternal.empty()` allow us to not check for nullable witihin the method `internalSelectKey`",
        "createdAt" : "2019-03-20T14:17:05Z",
        "updatedAt" : "2019-04-18T08:31:45Z",
        "lastEditedBy" : "8090918c-29d3-43df-b67b-9b52e0bfe240",
        "tags" : [
        ]
      }
    ],
    "commit" : "6836d5c194464a200fe5edbc4500ef046a60d794",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +169,173 @@        Objects.requireNonNull(mapper, \"mapper can't be null\");\n\n        final ProcessorGraphNode<K, V> selectKeyProcessorNode = internalSelectKey(mapper, NamedInternal.empty());\n\n        selectKeyProcessorNode.keyChangingOperation(true);"
  },
  {
    "id" : "fcc04c5c-dc0c-4ee4-bf15-5b9ae9e16df0",
    "prId" : 6411,
    "prUrl" : "https://github.com/apache/kafka/pull/6411#pullrequestreview-229676571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5daf5b0f-0e86-4f5b-bd97-c93d623bc2a8",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Why not a `requireNonNull` here as well for `Named`?",
        "createdAt" : "2019-04-24T01:27:55Z",
        "updatedAt" : "2019-05-22T20:40:34Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "35e5b43a82d8ed6b0b086a6134820bed5945cf55",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +159,163 @@    @Override\n    public KStream<K, V> filterNot(final Predicate<? super K, ? super V> predicate, final Named named) {\n        Objects.requireNonNull(predicate, \"predicate can't be null\");\n        Objects.requireNonNull(named, \"named can't be null\");\n        final String name = new NamedInternal(named).orElseGenerateWithPrefix(builder, FILTER_NAME);"
  },
  {
    "id" : "2260cc1c-fd89-4db5-96ba-a9b94a20c176",
    "prId" : 6424,
    "prUrl" : "https://github.com/apache/kafka/pull/6424#pullrequestreview-226364352",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33dcd893-b180-457a-83c0-6a23c3055f7a",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "should there be a way to set it, then?",
        "createdAt" : "2019-04-11T15:24:37Z",
        "updatedAt" : "2019-04-14T20:18:11Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "fe04665e-03ad-4fad-b97f-cc9eb73e1c4b",
        "parentId" : "33dcd893-b180-457a-83c0-6a23c3055f7a",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "Setting the serde to `null` seems to be a common pattern in `KStreamImpl` if the operation on the stream cannot guarantee that the current serde still fits for the newly generated stream. Have a look at the other non-terminal operations.",
        "createdAt" : "2019-04-12T21:47:26Z",
        "updatedAt" : "2019-04-14T20:18:11Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "b382e21e-572e-4345-920b-9ba87ce9496f",
        "parentId" : "33dcd893-b180-457a-83c0-6a23c3055f7a",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Sorry, my comment was too terse. What I meant to ask was, if this is a value-changing operation, should there be an overload that allows users to add a value serde, so that downstream operations can have the serde available?\r\n\r\nOff the top of my head, I don't think there are any other value-changing operations that don't have an option to set a serde. (but I could be wrong...)",
        "createdAt" : "2019-04-13T18:04:23Z",
        "updatedAt" : "2019-04-14T20:18:11Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "073c938d-4260-47e8-83f7-38a7c4abfc50",
        "parentId" : "33dcd893-b180-457a-83c0-6a23c3055f7a",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Aaand, nevermind. I was thinking of KTable. Carry on.",
        "createdAt" : "2019-04-13T18:34:08Z",
        "updatedAt" : "2019-04-14T20:18:11Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "eaa63039370267d4caadc285a9ce09c9f938248c",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +532,536 @@        builder.addGraphNode(this.streamsGraphNode, transformNode);\n\n        // cannot inherit value serde\n        return new KStreamImpl<>(name, keySerde, null, sourceNodes, repartitionRequired, transformNode, builder);\n    }"
  },
  {
    "id" : "01b17304-0a38-4be9-b50c-49dc7ceed7db",
    "prId" : 6602,
    "prUrl" : "https://github.com/apache/kafka/pull/6602#pullrequestreview-230400182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58b6988d-cd6d-41cd-baed-af1f0d974a6b",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Is this ok to do? I was surprised while writing my test that the serdes didn't get propagated all the way to the sink. (question applies to all changes in this file)",
        "createdAt" : "2019-04-24T18:28:40Z",
        "updatedAt" : "2019-04-26T13:35:41Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "1c0f3478-4a90-4813-9a76-28e7c258f9ac",
        "parentId" : "58b6988d-cd6d-41cd-baed-af1f0d974a6b",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Good call, I think it is okay.",
        "createdAt" : "2019-04-24T23:26:37Z",
        "updatedAt" : "2019-04-26T13:35:41Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7414ed063c920aa5c2f4bb29c81664fecb851b9b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +385,389 @@    @Override\n    public KStream<K, V> through(final String topic) {\n        return through(topic, Produced.with(keySerde, valSerde, null));\n    }\n"
  },
  {
    "id" : "d368b80e-be24-453f-910c-3479076a7cde",
    "prId" : 6602,
    "prUrl" : "https://github.com/apache/kafka/pull/6602#pullrequestreview-231258310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3b44469-ff86-4d30-a0ae-385b61802f96",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why this rewrite? (Just curious.)",
        "createdAt" : "2019-04-26T05:08:13Z",
        "updatedAt" : "2019-04-26T13:35:41Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "ae37d3e2-4cbc-4d58-86da-d06778d46b4d",
        "parentId" : "b3b44469-ff86-4d30-a0ae-385b61802f96",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "it's just no longer necessary, since we're already setting the key/value serdes if they were null in `producedInternal` on lines 395-400.",
        "createdAt" : "2019-04-26T13:07:48Z",
        "updatedAt" : "2019-04-26T13:35:41Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "8fd4ebb1-57a0-49b3-a8b5-a4161a5199a4",
        "parentId" : "b3b44469-ff86-4d30-a0ae-385b61802f96",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Sure. The question was about both changes in combination. What is it better to split out compare to just do a one liner?",
        "createdAt" : "2019-04-26T16:51:44Z",
        "updatedAt" : "2019-04-26T16:51:44Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7414ed063c920aa5c2f4bb29c81664fecb851b9b",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +404,408 @@            new ConsumedInternal<>(\n                producedInternal.keySerde(),\n                producedInternal.valueSerde(),\n                new FailOnInvalidTimestamp(),\n                null"
  }
]