[
  {
    "id" : "7acb9a94-98fe-42d9-850f-a3d6409f6dec",
    "prId" : 4983,
    "prUrl" : "https://github.com/apache/kafka/pull/4983#pullrequestreview-122346837",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de885309-32e2-4abb-9f38-c389bf83ac58",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Why `StreamTableJoinNode` is not extending from `BaseJoinNode`?",
        "createdAt" : "2018-05-22T00:21:07Z",
        "updatedAt" : "2018-06-15T03:52:33Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "2a5fe094-16fb-483d-a3ca-06241767942b",
        "parentId" : "de885309-32e2-4abb-9f38-c389bf83ac58",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "`BaseJoinNode` was created to support Stream-Stream and Table-Table joins, as they have several parameters in common including 3 `ProcessorSuppliers`.  `StreamTable` joins have far fewer parameters just 1 `ProcessorSupplier` so IMHO it justified a separate class.",
        "createdAt" : "2018-05-22T20:48:33Z",
        "updatedAt" : "2018-06-15T03:52:33Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "679568bc781f609b8fdf5b95924a8202c9e3c592",
    "line" : 501,
    "diffHunk" : "@@ -1,1 +734,738 @@        ProcessorParameters<K, V> processorParameters = new ProcessorParameters<>(processorSupplier, name);\n\n        StreamTableJoinNode<K, V> streamTableJoinNode = new StreamTableJoinNode<>(name,\n                                                                                  processorParameters,\n                                                                                  new String[]{});"
  },
  {
    "id" : "af632130-2761-49fe-b93e-a514113e5c5a",
    "prId" : 5201,
    "prUrl" : "https://github.com/apache/kafka/pull/5201#pullrequestreview-142092644",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81aeb5ff-eea3-45c9-8092-c9dfb6eff276",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Why we pass `null` before and now we need to pass in the `transformNode`? Was it a bug before and we fixed it here?",
        "createdAt" : "2018-07-31T05:07:45Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "01e5eb49-09eb-4429-8a2a-b2e935647709",
        "parentId" : "81aeb5ff-eea3-45c9-8092-c9dfb6eff276",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "We were never actually using the graph before, right? So a missed node might go unnoticed until now, when we actually build the topology from the graph.",
        "createdAt" : "2018-07-31T15:31:34Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "e3d7063b-7ad4-4189-b81e-bd0b6831624d",
        "parentId" : "81aeb5ff-eea3-45c9-8092-c9dfb6eff276",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "looking from the history looks like it was a bug but fixed here.",
        "createdAt" : "2018-07-31T16:13:05Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "9d9d4a53-6b68-4c4c-89dd-e87242b455e2",
        "parentId" : "81aeb5ff-eea3-45c9-8092-c9dfb6eff276",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Thanks for confirming :) just want to make sure it is not a regression.",
        "createdAt" : "2018-07-31T18:42:26Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b49c4f31e1be598f1898d9d78dc0df7ecf8ab4c1",
    "line" : 486,
    "diffHunk" : "@@ -1,1 +461,465 @@\n\n        return new KStreamImpl<>(builder, name, sourceNodes, true, transformNode);\n    }\n"
  },
  {
    "id" : "9028f175-a17f-4176-b433-7658cd2986f5",
    "prId" : 5201,
    "prUrl" : "https://github.com/apache/kafka/pull/5201#pullrequestreview-142092931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7b923174-c37a-4027-81e6-3b7b46e20d8a",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "We did not add a new logical node here anymore in this PR, is this intentional?",
        "createdAt" : "2018-07-31T05:18:43Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "41dd8dfd-8f95-4a06-b316-89eb42d325b7",
        "parentId" : "7b923174-c37a-4027-81e6-3b7b46e20d8a",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Yes, it's intentional. What I found during testing is that we don't need to create a node here.\r\n\r\nI initially had a logical node at this point, but it never rendered any details for the physical plan, as it's methods on the `KGroupedStreamImpl` that provide details for the next operation of the physical plan, thus we only need to create a new logical node when one of those operations are specified.\r\n\r\nWhen I did create a new logical plan node here, it contained no details to render, so I needed to put in checks for `null` `ProcessorParameters`. Having a placeholder node was somewhat probalmatic, so instead of a \"dummy\" node which I found to be confusing as well, I removed creating a new node at this point, and IMHO is better off this way.\r\n",
        "createdAt" : "2018-07-31T16:43:32Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "bd47e327-e63f-434c-8452-92b63ebb74f7",
        "parentId" : "7b923174-c37a-4027-81e6-3b7b46e20d8a",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Thanks!",
        "createdAt" : "2018-07-31T18:43:13Z",
        "updatedAt" : "2018-08-01T19:43:39Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b49c4f31e1be598f1898d9d78dc0df7ecf8ab4c1",
    "line" : 884,
    "diffHunk" : "@@ -1,1 +816,820 @@                                        serializedInternal.valueSerde(),\n                                        this.repartitionRequired,\n                                        streamsGraphNode);\n\n    }"
  },
  {
    "id" : "71095013-c62d-49db-ac61-865b20d09d0a",
    "prId" : 5521,
    "prUrl" : "https://github.com/apache/kafka/pull/5521#pullrequestreview-147396628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f7ef1861-5705-4d04-a9f7-c4f0d2c058a6",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "super nit: why the change in the order of constructor args?",
        "createdAt" : "2018-08-17T19:10:09Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "c2cd9dc3-453a-4575-b336-2d595bd5d9a8",
        "parentId" : "f7ef1861-5705-4d04-a9f7-c4f0d2c058a6",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "My personal paranoid-taste: to keep the parameters with similar length together :P",
        "createdAt" : "2018-08-17T22:19:06Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1278ae279c9fa20317e55ded8aeb364eab097127",
    "line" : 522,
    "diffHunk" : "@@ -1,1 +794,798 @@\n        builder.addGraphNode(this.streamsGraphNode, selectKeyMapNode);\n        return new KGroupedStreamImpl<>(selectKeyMapNode.nodeName(),\n                                        serializedInternal.keySerde(),\n                                        serializedInternal.valueSerde() != null ? serializedInternal.valueSerde() : valSerde,"
  },
  {
    "id" : "9ae0437d-7ba0-42a2-a6c5-928f5cfac3db",
    "prId" : 5521,
    "prUrl" : "https://github.com/apache/kafka/pull/5521#pullrequestreview-157509925",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2c2ad3ff-6403-494e-a643-dda3a353be05",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "This is found and fixed while I'm adding unit tests.",
        "createdAt" : "2018-09-21T00:12:02Z",
        "updatedAt" : "2018-10-01T04:30:31Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1278ae279c9fa20317e55ded8aeb364eab097127",
    "line" : 539,
    "diffHunk" : "@@ -1,1 +812,816 @@        final SerializedInternal<K, V> serializedInternal = new SerializedInternal<>(serialized);\n        return new KGroupedStreamImpl<>(this.name,\n                                        serializedInternal.keySerde() != null ? serializedInternal.keySerde() : keySerde,\n                                        serializedInternal.valueSerde() != null ? serializedInternal.valueSerde() : valSerde,\n                                        sourceNodes,"
  },
  {
    "id" : "d9cfc99f-0c1a-4021-9ebf-de62d243239a",
    "prId" : 5709,
    "prUrl" : "https://github.com/apache/kafka/pull/5709#pullrequestreview-160131443",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "199d666c-436b-4190-b308-b461747cb0a3",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Do we need this annotation again? Though we would need a `@SuppressWarning(\"deprecation\")` here instead?",
        "createdAt" : "2018-09-30T00:09:37Z",
        "updatedAt" : "2018-10-02T03:08:38Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "8e459935-7350-4e7b-8a39-e109b36ab183",
        "parentId" : "199d666c-436b-4190-b308-b461747cb0a3",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "IMHO, it's better to pass along the deprecation instead of suppressing it.\r\n\r\nThey both cause the compiler not to issue warnings about the use of deprecated APIs in the method body.\r\n\r\nThis difference is that if we suppress it here, then any `groupBy` calls on a `KStreamImpl` reference *will not* issue a warning, whereas calls on a `KStream` reference will issue the warning as desired.",
        "createdAt" : "2018-09-30T14:51:38Z",
        "updatedAt" : "2018-10-02T03:08:38Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "d0337d11-8478-4b15-9af9-60b066d76ae4",
        "parentId" : "199d666c-436b-4190-b308-b461747cb0a3",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I don't think that suppress works for any callers of `KStreamImpl#groupBy` -- from my understanding, there will be a warning for all callers independently of a suppress annotation -- callers would need to add their own annotation to suppress the warning for them. A `SuppressWarning` only suppressed warning from the body/implementation of this method (ie, if we would call any other deprecated method).\r\n\r\nI also don't think we need `@Deprecated` as this annotation is inherited anyway.\r\n\r\nHowever, this is an internal class anyway, and thus, not public. Thus, I don't have a strong opinion on this.",
        "createdAt" : "2018-09-30T22:37:37Z",
        "updatedAt" : "2018-10-02T03:08:38Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1865cefcf62b3da85b2bff112296d49717891c34",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +791,795 @@\n    @Override\n    @Deprecated\n    public <KR> KGroupedStream<KR, V> groupBy(final KeyValueMapper<? super K, ? super V, KR> selector,\n                                              final Serialized<KR, V> serialized) {"
  },
  {
    "id" : "42fbfc27-349c-47b0-8256-f82de1f1980c",
    "prId" : 5709,
    "prUrl" : "https://github.com/apache/kafka/pull/5709#pullrequestreview-160096116",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e921def-7f56-41a3-9ce9-7991e27d48bd",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "as above",
        "createdAt" : "2018-09-30T00:10:22Z",
        "updatedAt" : "2018-10-02T03:08:38Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1865cefcf62b3da85b2bff112296d49717891c34",
    "line" : 130,
    "diffHunk" : "@@ -1,1 +827,831 @@\n    @Override\n    @Deprecated\n    public KGroupedStream<K, V> groupByKey(final Serialized<K, V> serialized) {\n        final SerializedInternal<K, V> serializedInternal = new SerializedInternal<>(serialized);"
  },
  {
    "id" : "09b4b29a-934a-4a88-b4c4-42c5ea73f070",
    "prId" : 5709,
    "prUrl" : "https://github.com/apache/kafka/pull/5709#pullrequestreview-160945777",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8b424eca-6dbd-450a-9fc3-b8a11257783e",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: remove var `newJoined` (also not used for left-hand-side code)",
        "createdAt" : "2018-10-02T04:02:10Z",
        "updatedAt" : "2018-10-02T04:15:07Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "daca3cee-6777-4361-97af-c3e8e7354463",
        "parentId" : "8b424eca-6dbd-450a-9fc3-b8a11257783e",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "We need this right now to work with generics as the `repartitionForJoin` signature is `<K, V> repartitionForJoin(final Joined<K, V, ?> ` but the right-hand side is `<K, V1>` and the left-hand side is `<K, V>`. \r\n\r\nI know it's a bit of a hack, but I think it's worth the trade-off for being able to pass a single `Joined` parameter, vs. all of the required components of `Joined`.  Having the single `Joined` parameter was introduced from the Serdes inheritance PR.  If you insist I can revert to what it was before.",
        "createdAt" : "2018-10-02T21:26:03Z",
        "updatedAt" : "2018-10-02T21:39:46Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "639571f2-554e-4beb-bbda-33813c57e88a",
        "parentId" : "8b424eca-6dbd-450a-9fc3-b8a11257783e",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Ack. Makes sense.",
        "createdAt" : "2018-10-02T22:15:53Z",
        "updatedAt" : "2018-10-02T22:15:53Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "1865cefcf62b3da85b2bff112296d49717891c34",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +574,578 @@        if (joinOther.repartitionRequired) {\n            final String rightJoinRepartitionTopicName = joined.name() != null ? joined.name() + \"-right\" : joinOther.name;\n            final Joined newJoined = Joined.with(joined.keySerde(), joined.valueSerde(), joined.otherValueSerde(), rightJoinRepartitionTopicName);\n            joinOther = joinOther.repartitionForJoin(newJoined);\n        }"
  },
  {
    "id" : "c6594c6c-f361-413f-96eb-ad86579eb822",
    "prId" : 5709,
    "prUrl" : "https://github.com/apache/kafka/pull/5709#pullrequestreview-160930715",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3c6776e7-cc68-43b1-a428-6976c5c7234b",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Was this a bug, to pass in `null` as value Serde? Did Guozhang's PR introduce this?",
        "createdAt" : "2018-10-02T04:05:01Z",
        "updatedAt" : "2018-10-02T04:15:07Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "f2866085-796d-41de-8296-362a99ed6ac8",
        "parentId" : "3c6776e7-cc68-43b1-a428-6976c5c7234b",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Introduced by the Serdes inheritance PR",
        "createdAt" : "2018-10-02T21:26:26Z",
        "updatedAt" : "2018-10-02T21:26:26Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1865cefcf62b3da85b2bff112296d49717891c34",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +787,791 @@    @Override\n    public <K1> KGroupedStream<K1, V> groupBy(final KeyValueMapper<? super K, ? super V, K1> selector) {\n        return groupBy(selector, Grouped.with(null, valSerde));\n    }\n"
  },
  {
    "id" : "918d999e-fa0e-4801-bbe6-7bd1b7537d69",
    "prId" : 5709,
    "prUrl" : "https://github.com/apache/kafka/pull/5709#pullrequestreview-160930763",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6d78c4a-9c75-4281-bff7-359130d3d1e9",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Similar here?",
        "createdAt" : "2018-10-02T04:06:08Z",
        "updatedAt" : "2018-10-02T04:15:07Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "2ca47990-9488-45aa-8039-133ff8d0f7b9",
        "parentId" : "d6d78c4a-9c75-4281-bff7-359130d3d1e9",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "same as above",
        "createdAt" : "2018-10-02T21:26:35Z",
        "updatedAt" : "2018-10-02T21:26:35Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "1865cefcf62b3da85b2bff112296d49717891c34",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +823,827 @@    @Override\n    public KGroupedStream<K, V> groupByKey() {\n        return groupByKey(Grouped.with(keySerde, valSerde));\n    }\n"
  },
  {
    "id" : "2d156d23-8920-44a1-926a-0968482b88ab",
    "prId" : 5741,
    "prUrl" : "https://github.com/apache/kafka/pull/5741#pullrequestreview-161735640",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27e5438e-e285-4a5c-b4d0-4a41f5378f27",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This was incorrectly typed with the result k/v instead of the input k/v",
        "createdAt" : "2018-10-04T17:55:46Z",
        "updatedAt" : "2018-10-04T21:38:59Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "79ded18384601459c38b700fc2d157e1f92704af",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +452,456 @@        final String name = builder.newProcessorName(TRANSFORM_NAME);\n\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamTransform<>(transformerSupplier), name),"
  },
  {
    "id" : "e30707b6-443b-48b3-b679-6f101a246eb2",
    "prId" : 5741,
    "prUrl" : "https://github.com/apache/kafka/pull/5741#pullrequestreview-161822218",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0abffc16-3ac3-4088-b99d-5b04c482d4b6",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Renamed these to match the other names used in this class",
        "createdAt" : "2018-10-04T19:35:19Z",
        "updatedAt" : "2018-10-04T21:38:59Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "b46737da-28ff-4d87-b304-16cb1a5f26c6",
        "parentId" : "0abffc16-3ac3-4088-b99d-5b04c482d4b6",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Should the `<V1, R> KStream<K, R> outerJoin` and `<V1, R> KStream<K, R> join` above be changed as well?",
        "createdAt" : "2018-10-04T20:29:48Z",
        "updatedAt" : "2018-10-04T21:38:59Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "28616319-241b-4538-b412-4c470f894fc6",
        "parentId" : "0abffc16-3ac3-4088-b99d-5b04c482d4b6",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "In response to this comment, I've gone through the whole `KStreamImpl` and standardized the generic types in the following way:\r\n* `K,V` (unchanged) the key/value types of `this` stream\r\n* `KR/VR` the \"result\" key/value types where applicable\r\n* `KO/VO` the \"other\" key/value types (where there's an \"other\" stream involved)\r\n* `KG/VG` the key/value types when there's a global table involved\r\n* `K1/V1` key/value types with no particular semantics that are scoped to the method (I.e., not the same as the instance-level `this` `K/V`)",
        "createdAt" : "2018-10-04T21:42:31Z",
        "updatedAt" : "2018-10-04T21:42:31Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "79ded18384601459c38b700fc2d157e1f92704af",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +556,560 @@    }\n\n    private <VO, VR> KStream<K, VR> doJoin(final KStream<K, VO> other,\n                                           final ValueJoiner<? super V, ? super VO, ? extends VR> joiner,\n                                           final JoinWindows windows,"
  },
  {
    "id" : "c42e7e50-5ffa-41e7-bd32-0933d4e3cf4e",
    "prId" : 5900,
    "prUrl" : "https://github.com/apache/kafka/pull/5900#pullrequestreview-174675916",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05f9b0bf-75eb-4b2a-91c1-ab515aa88f54",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Lgtm.",
        "createdAt" : "2018-11-14T02:30:18Z",
        "updatedAt" : "2018-11-14T03:33:15Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d2c25b68fd398d988dc90eaec78c66561d090e5",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +797,801 @@    @Deprecated\n    public <KR> KGroupedStream<KR, V> groupBy(final KeyValueMapper<? super K, ? super V, KR> selector,\n                                              final org.apache.kafka.streams.kstream.Serialized<KR, V> serialized) {\n        Objects.requireNonNull(selector, \"selector can't be null\");\n        Objects.requireNonNull(serialized, \"serialized can't be null\");"
  },
  {
    "id" : "aff6e352-eb5a-4f44-ba35-13cdebb98745",
    "prId" : 6409,
    "prUrl" : "https://github.com/apache/kafka/pull/6409#pullrequestreview-216474055",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6baa66a3-e0b6-4aaa-9ce1-2122afdf937e",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: should this be `name` (similar to above) only?",
        "createdAt" : "2019-03-19T23:50:49Z",
        "updatedAt" : "2019-03-19T23:52:44Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "940484ae4068bbed0db1921b3f0538865f756e4c",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +710,714 @@        Objects.requireNonNull(joined, \"joined can't be null\");\n        final JoinedInternal<K, V, VO> joinedInternal = new JoinedInternal<>(joined);\n        final String internalName = joinedInternal.name();\n        if (repartitionRequired) {\n            final KStreamImpl<K, V> thisStreamRepartitioned = repartitionForJoin("
  },
  {
    "id" : "e2910082-d37f-4f5e-ae7b-dae1005f13eb",
    "prId" : 6410,
    "prUrl" : "https://github.com/apache/kafka/pull/6410#pullrequestreview-216747965",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7b192fc-7184-4b56-9470-b96eec959274",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "What is this change about?",
        "createdAt" : "2019-03-20T00:13:39Z",
        "updatedAt" : "2019-04-18T08:31:45Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "0a2202fb-01a6-4e8e-af54-352f1b026acd",
        "parentId" : "c7b192fc-7184-4b56-9470-b96eec959274",
        "authorId" : "8090918c-29d3-43df-b67b-9b52e0bfe240",
        "body" : "The method `internalSelectKey` now accept an `NamedInternal` instance. As this method is private we are expecting to not pass a null argument. Passing an empty `NamedInternal.empty()` allow us to not check for nullable witihin the method `internalSelectKey`",
        "createdAt" : "2019-03-20T14:17:05Z",
        "updatedAt" : "2019-04-18T08:31:45Z",
        "lastEditedBy" : "8090918c-29d3-43df-b67b-9b52e0bfe240",
        "tags" : [
        ]
      }
    ],
    "commit" : "6836d5c194464a200fe5edbc4500ef046a60d794",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +169,173 @@        Objects.requireNonNull(mapper, \"mapper can't be null\");\n\n        final ProcessorGraphNode<K, V> selectKeyProcessorNode = internalSelectKey(mapper, NamedInternal.empty());\n\n        selectKeyProcessorNode.keyChangingOperation(true);"
  },
  {
    "id" : "fcc04c5c-dc0c-4ee4-bf15-5b9ae9e16df0",
    "prId" : 6411,
    "prUrl" : "https://github.com/apache/kafka/pull/6411#pullrequestreview-229676571",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5daf5b0f-0e86-4f5b-bd97-c93d623bc2a8",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Why not a `requireNonNull` here as well for `Named`?",
        "createdAt" : "2019-04-24T01:27:55Z",
        "updatedAt" : "2019-05-22T20:40:34Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "35e5b43a82d8ed6b0b086a6134820bed5945cf55",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +159,163 @@    @Override\n    public KStream<K, V> filterNot(final Predicate<? super K, ? super V> predicate, final Named named) {\n        Objects.requireNonNull(predicate, \"predicate can't be null\");\n        Objects.requireNonNull(named, \"named can't be null\");\n        final String name = new NamedInternal(named).orElseGenerateWithPrefix(builder, FILTER_NAME);"
  },
  {
    "id" : "2260cc1c-fd89-4db5-96ba-a9b94a20c176",
    "prId" : 6424,
    "prUrl" : "https://github.com/apache/kafka/pull/6424#pullrequestreview-226364352",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33dcd893-b180-457a-83c0-6a23c3055f7a",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "should there be a way to set it, then?",
        "createdAt" : "2019-04-11T15:24:37Z",
        "updatedAt" : "2019-04-14T20:18:11Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "fe04665e-03ad-4fad-b97f-cc9eb73e1c4b",
        "parentId" : "33dcd893-b180-457a-83c0-6a23c3055f7a",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "Setting the serde to `null` seems to be a common pattern in `KStreamImpl` if the operation on the stream cannot guarantee that the current serde still fits for the newly generated stream. Have a look at the other non-terminal operations.",
        "createdAt" : "2019-04-12T21:47:26Z",
        "updatedAt" : "2019-04-14T20:18:11Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "b382e21e-572e-4345-920b-9ba87ce9496f",
        "parentId" : "33dcd893-b180-457a-83c0-6a23c3055f7a",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Sorry, my comment was too terse. What I meant to ask was, if this is a value-changing operation, should there be an overload that allows users to add a value serde, so that downstream operations can have the serde available?\r\n\r\nOff the top of my head, I don't think there are any other value-changing operations that don't have an option to set a serde. (but I could be wrong...)",
        "createdAt" : "2019-04-13T18:04:23Z",
        "updatedAt" : "2019-04-14T20:18:11Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "073c938d-4260-47e8-83f7-38a7c4abfc50",
        "parentId" : "33dcd893-b180-457a-83c0-6a23c3055f7a",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Aaand, nevermind. I was thinking of KTable. Carry on.",
        "createdAt" : "2019-04-13T18:34:08Z",
        "updatedAt" : "2019-04-14T20:18:11Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "eaa63039370267d4caadc285a9ce09c9f938248c",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +532,536 @@        builder.addGraphNode(this.streamsGraphNode, transformNode);\n\n        // cannot inherit value serde\n        return new KStreamImpl<>(name, keySerde, null, sourceNodes, repartitionRequired, transformNode, builder);\n    }"
  },
  {
    "id" : "01b17304-0a38-4be9-b50c-49dc7ceed7db",
    "prId" : 6602,
    "prUrl" : "https://github.com/apache/kafka/pull/6602#pullrequestreview-230400182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "58b6988d-cd6d-41cd-baed-af1f0d974a6b",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Is this ok to do? I was surprised while writing my test that the serdes didn't get propagated all the way to the sink. (question applies to all changes in this file)",
        "createdAt" : "2019-04-24T18:28:40Z",
        "updatedAt" : "2019-04-26T13:35:41Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "1c0f3478-4a90-4813-9a76-28e7c258f9ac",
        "parentId" : "58b6988d-cd6d-41cd-baed-af1f0d974a6b",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Good call, I think it is okay.",
        "createdAt" : "2019-04-24T23:26:37Z",
        "updatedAt" : "2019-04-26T13:35:41Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7414ed063c920aa5c2f4bb29c81664fecb851b9b",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +385,389 @@    @Override\n    public KStream<K, V> through(final String topic) {\n        return through(topic, Produced.with(keySerde, valSerde, null));\n    }\n"
  },
  {
    "id" : "d368b80e-be24-453f-910c-3479076a7cde",
    "prId" : 6602,
    "prUrl" : "https://github.com/apache/kafka/pull/6602#pullrequestreview-231258310",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3b44469-ff86-4d30-a0ae-385b61802f96",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why this rewrite? (Just curious.)",
        "createdAt" : "2019-04-26T05:08:13Z",
        "updatedAt" : "2019-04-26T13:35:41Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "ae37d3e2-4cbc-4d58-86da-d06778d46b4d",
        "parentId" : "b3b44469-ff86-4d30-a0ae-385b61802f96",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "it's just no longer necessary, since we're already setting the key/value serdes if they were null in `producedInternal` on lines 395-400.",
        "createdAt" : "2019-04-26T13:07:48Z",
        "updatedAt" : "2019-04-26T13:35:41Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "8fd4ebb1-57a0-49b3-a8b5-a4161a5199a4",
        "parentId" : "b3b44469-ff86-4d30-a0ae-385b61802f96",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Sure. The question was about both changes in combination. What is it better to split out compare to just do a one liner?",
        "createdAt" : "2019-04-26T16:51:44Z",
        "updatedAt" : "2019-04-26T16:51:44Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7414ed063c920aa5c2f4bb29c81664fecb851b9b",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +404,408 @@            new ConsumedInternal<>(\n                producedInternal.keySerde(),\n                producedInternal.valueSerde(),\n                new FailOnInvalidTimestamp(),\n                null"
  },
  {
    "id" : "80d65e6f-a869-4c2b-aa7d-48e076bca684",
    "prId" : 7170,
    "prUrl" : "https://github.com/apache/kafka/pull/7170#pullrequestreview-294613183",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "40a0b081-fe79-41d5-87c4-e0dd19a01186",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: remove `this.` (we only use `this` is we must -- applies to other parts, too)",
        "createdAt" : "2019-09-28T01:21:53Z",
        "updatedAt" : "2020-04-07T14:50:24Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2bcdfe487ec13f41f4516d6bee6a1847f6d4ce2",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +583,587 @@\n        final Serde<V> valueSerde = repartitionedInternal.valueSerde() == null ? valSerde : repartitionedInternal.valueSerde();\n        final Serde<K> keySerde = repartitionedInternal.keySerde() == null ? this.keySerde : repartitionedInternal.keySerde();\n\n        final UnoptimizableRepartitionNodeBuilder<K, V> unoptimizableRepartitionNodeBuilder = UnoptimizableRepartitionNode"
  },
  {
    "id" : "3bdc57ed-a018-476e-8f2d-3c414203ea03",
    "prId" : 7170,
    "prUrl" : "https://github.com/apache/kafka/pull/7170#pullrequestreview-385279640",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "953214ca-dfbe-42d5-8af5-3602bab10943",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why would we not use an upstream `keySerde` (similar to `valueSerde = valSerde` L584 above) if `repartitionInternal` has a `null` key serde?",
        "createdAt" : "2020-04-01T04:39:27Z",
        "updatedAt" : "2020-04-07T14:50:24Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "663c5a01-063c-44a4-b39b-1bef7726ee0f",
        "parentId" : "953214ca-dfbe-42d5-8af5-3602bab10943",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I realize that this contradicts a previous review comment, but I think that the older comment was incorrect, because `repartition()` might be called to just scale out without a key changing operation and thus for this case we should reuse the upstream `keySerde` (note that if there was an upstream key changing operation, `keySerde` would be set to `null` and we would still fall back to the default serdes from the config).",
        "createdAt" : "2020-04-01T05:46:09Z",
        "updatedAt" : "2020-04-07T14:50:24Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2bcdfe487ec13f41f4516d6bee6a1847f6d4ce2",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +592,596 @@        final String repartitionSourceName = createRepartitionedSource(\n            builder,\n            repartitionedInternal.keySerde(),\n            valueSerde,\n            name,"
  },
  {
    "id" : "ff45ac8c-be42-4278-800f-7edfd3ac0009",
    "prId" : 7170,
    "prUrl" : "https://github.com/apache/kafka/pull/7170#pullrequestreview-385257912",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85e07d56-ff9a-4f7f-972d-49eac002471c",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why do we need to duplicate this method? Might it be better to have just a single one and let caller set a `null` `StreamPartitioner` is they can't set it?",
        "createdAt" : "2020-04-01T04:42:42Z",
        "updatedAt" : "2020-04-07T14:50:24Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f2bcdfe487ec13f41f4516d6bee6a1847f6d4ce2",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +1003,1007 @@    }\n\n    static <K1, V1, RN extends BaseRepartitionNode<K1, V1>> String createRepartitionedSource(final InternalStreamsBuilder builder,\n                                                                                             final Serde<K1> keySerde,\n                                                                                             final Serde<V1> valSerde,"
  },
  {
    "id" : "dabb4604-8c0e-4537-a8bf-5f904fca5019",
    "prId" : 7285,
    "prUrl" : "https://github.com/apache/kafka/pull/7285#pullrequestreview-292762937",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "37178724-1674-469d-a78b-8c66f6ea71ff",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: move `otherStream` to its own line",
        "createdAt" : "2019-09-04T04:32:46Z",
        "updatedAt" : "2019-09-28T16:01:43Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "314c78f1-bd56-4643-b4e3-241c817f1414",
        "parentId" : "37178724-1674-469d-a78b-8c66f6ea71ff",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "ack",
        "createdAt" : "2019-09-24T23:37:20Z",
        "updatedAt" : "2019-09-28T16:01:43Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a450c43edf7bb2cb5c110cc60136676c73903ca7",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +732,736 @@                                        final StreamJoined<K, V, VO> streamJoined) {\n\n        return doJoin(otherStream,\n                      joiner,\n                      windows,"
  },
  {
    "id" : "32bdd61a-2747-4eb9-884d-beec16e9fa42",
    "prId" : 7285,
    "prUrl" : "https://github.com/apache/kafka/pull/7285#pullrequestreview-293851871",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "161b9d2b-cfb0-40dc-8e4b-b87e925c72c6",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "minor: \r\n```suggestion\r\n        final NamedInternal name = new NamedInternal(streamJoinedInternal);\r\n```\r\n\r\nShould also work, it's a little less error-prone, since it results in NamedInternal extracting the name field defined by the Named interface, rather than us \"manually\" picking the right string field.",
        "createdAt" : "2019-09-23T16:49:33Z",
        "updatedAt" : "2019-09-28T16:01:43Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "1ffe4607-8fae-4a3c-a8f8-cdbda3dee595",
        "parentId" : "161b9d2b-cfb0-40dc-8e4b-b87e925c72c6",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Actually, this needs to stay as `NamedInternal` takes either a `Named` or `String` as the constructor parameter.  However I get your point here, but maybe we can defer this to a later follow-on PR.",
        "createdAt" : "2019-09-25T14:12:44Z",
        "updatedAt" : "2019-09-28T16:01:43Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "d3b287b7-eb40-4db4-9d50-b6249e158e85",
        "parentId" : "161b9d2b-cfb0-40dc-8e4b-b87e925c72c6",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Hey, thanks for the reply... Am I missing something, isn't it true that a NamedInternal is also a Named, since `NamedInternal extends Named`?",
        "createdAt" : "2019-09-25T17:17:23Z",
        "updatedAt" : "2019-09-28T16:01:43Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "656c029f-a403-4c3b-adcf-ca068e40a533",
        "parentId" : "161b9d2b-cfb0-40dc-8e4b-b87e925c72c6",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "That's true,  but In this case, `StreamJoinedInternal` extends `StreamJoined` and `StreamJoined` implements `NamedOperation`.  \r\nNow `Named` also implements `NamedOperation` but the `NamedInternal` constructor only accepts a `Named` or a `String`.  \r\nSo it seems we could do some follow up work to clean things up some.  But as you already said, I think that work is beyond the scope of this PR.",
        "createdAt" : "2019-09-25T19:14:58Z",
        "updatedAt" : "2019-09-28T16:01:43Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "b232146b-f35e-46a8-a57c-9b8b913cb388",
        "parentId" : "161b9d2b-cfb0-40dc-8e4b-b87e925c72c6",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Ah. I _was_ missing something. Sorry for the distraction; thanks for setting me straight.",
        "createdAt" : "2019-09-26T14:35:25Z",
        "updatedAt" : "2019-09-28T16:01:43Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "a0ebb041-7cba-4b05-8a1f-8f6d0f705ff7",
        "parentId" : "161b9d2b-cfb0-40dc-8e4b-b87e925c72c6",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I had a similar though -- maybe we can make `NamedInternal` in interface with default method and let `StreamJoinedInternal implements NamedInternal` (and other classes). Also agree, this should be a follow up PR -- just make sure we don't forget about it :)",
        "createdAt" : "2019-09-26T16:45:32Z",
        "updatedAt" : "2019-09-28T16:01:43Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "a450c43edf7bb2cb5c110cc60136676c73903ca7",
    "line" : 165,
    "diffHunk" : "@@ -1,1 +784,788 @@\n        final StreamJoinedInternal<K, V, VO> streamJoinedInternal = new StreamJoinedInternal<>(streamJoined);\n        final NamedInternal name = new NamedInternal(streamJoinedInternal.name());\n        if (joinThis.repartitionRequired) {\n            final String joinThisName = joinThis.name;"
  },
  {
    "id" : "b0cbbc33-38f7-436c-bb83-5292ec8f6739",
    "prId" : 7285,
    "prUrl" : "https://github.com/apache/kafka/pull/7285#pullrequestreview-294351412",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aba20b90-8546-488c-be10-a6f998d588c7",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "If somebody uses the deprecated `Joined` this error message would be confusing. I would suggest to add\r\n```\r\nObjects.requireNonNull(joined, \"joined can't be null\");\r\n```\r\nto the deprecated methods.",
        "createdAt" : "2019-09-26T16:43:06Z",
        "updatedAt" : "2019-09-28T16:01:43Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "fcafc45f-a2c8-4645-92f1-08e246e4bdec",
        "parentId" : "aba20b90-8546-488c-be10-a6f998d588c7",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Ack",
        "createdAt" : "2019-09-27T14:10:57Z",
        "updatedAt" : "2019-09-28T16:01:43Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a450c43edf7bb2cb5c110cc60136676c73903ca7",
    "line" : 157,
    "diffHunk" : "@@ -1,1 +778,782 @@        Objects.requireNonNull(joiner, \"joiner can't be null\");\n        Objects.requireNonNull(windows, \"windows can't be null\");\n        Objects.requireNonNull(streamJoined, \"streamJoined can't be null\");\n\n        KStreamImpl<K, V> joinThis = this;"
  },
  {
    "id" : "9575d22c-f84c-4826-8708-9fa789fc8bdd",
    "prId" : 7598,
    "prUrl" : "https://github.com/apache/kafka/pull/7598#pullrequestreview-307314499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "248751a0-8a53-41f2-bb69-c6fa0bcee30f",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Minor cleanup - if users supply a name ending with `repartition` we don't need to add it again.  Also during optimization, if merging nodes we re-use the name of the first repartition topic and in this case, it will already have the `repartition` suffix as well.",
        "createdAt" : "2019-10-25T16:25:16Z",
        "updatedAt" : "2019-11-04T17:18:59Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ad32d2b69b9b6c015e383e02df47431da0fcb36",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +838,842 @@\n        final String repartitionTopicName = repartitionTopicNamePrefix.endsWith(REPARTITION_TOPIC_SUFFIX) ?\n            repartitionTopicNamePrefix : repartitionTopicNamePrefix + REPARTITION_TOPIC_SUFFIX;\n\n        // Always need to generate the names to burn index counter for compatibility"
  },
  {
    "id" : "c2e46b73-10ca-4b42-bc7f-4437e5e6d0c7",
    "prId" : 7598,
    "prUrl" : "https://github.com/apache/kafka/pull/7598#pullrequestreview-307314499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3342756-8022-43f4-a1b2-e7da0635f3cf",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "We need to always burn the naming indexes for compatibility even when we don't use the names.",
        "createdAt" : "2019-10-25T16:26:02Z",
        "updatedAt" : "2019-11-04T17:18:59Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ad32d2b69b9b6c015e383e02df47431da0fcb36",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +844,848 @@        final String genNullKeyFilterProcessorName = builder.newProcessorName(FILTER_NAME);\n        final String genSourceName = builder.newProcessorName(SOURCE_NAME);\n\n        final String sinkName;\n        final String sourceName;"
  },
  {
    "id" : "e8d1d0b9-a41d-4726-9741-59c8e6986165",
    "prId" : 7598,
    "prUrl" : "https://github.com/apache/kafka/pull/7598#pullrequestreview-307314499",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9f7b606e-db96-4b47-9331-91b47aef5a01",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "This is the primary fix here if the repartition topic is generated; we'll use the generated names for the filter, source, and sink operators.",
        "createdAt" : "2019-10-25T16:27:46Z",
        "updatedAt" : "2019-11-04T17:18:59Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ad32d2b69b9b6c015e383e02df47431da0fcb36",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +850,854 @@\n        if (repartitionTopicNamePrefix.matches(\"KSTREAM.*-[0-9]{10}\")) {\n            sinkName = genSinkName;\n            sourceName = genSourceName;\n            nullKeyFilterProcessorName = genNullKeyFilterProcessorName;"
  },
  {
    "id" : "29879def-4d8a-4ea9-a3f7-8992e723cc0b",
    "prId" : 7598,
    "prUrl" : "https://github.com/apache/kafka/pull/7598#pullrequestreview-308836807",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f9077d3-ae47-43e9-abd4-8c338002c9cb",
        "parentId" : null,
        "authorId" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "body" : "If the user supplies the topic name, should we be appending the suffix at all?",
        "createdAt" : "2019-10-29T19:33:12Z",
        "updatedAt" : "2019-11-04T17:18:59Z",
        "lastEditedBy" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "tags" : [
        ]
      },
      {
        "id" : "fb506f8e-9731-4bc9-a170-e7018a3fc40e",
        "parentId" : "7f9077d3-ae47-43e9-abd4-8c338002c9cb",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "@cpettitt-confluent we always add a `-repartition` for all the repartition topics generated or supplied by the user.  When the users supply a name, it's used as the base name.  We've detailed this in our doc and Javadoc as well",
        "createdAt" : "2019-10-29T21:07:56Z",
        "updatedAt" : "2019-11-04T17:18:59Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "53b7dcb0-dea8-406a-a9a4-5dfe73645974",
        "parentId" : "7f9077d3-ae47-43e9-abd4-8c338002c9cb",
        "authorId" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "body" : "Sounds good. We can consider this resolved.",
        "createdAt" : "2019-10-29T21:11:11Z",
        "updatedAt" : "2019-11-04T17:18:59Z",
        "lastEditedBy" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ad32d2b69b9b6c015e383e02df47431da0fcb36",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +837,841 @@\n\n        final String repartitionTopicName = repartitionTopicNamePrefix.endsWith(REPARTITION_TOPIC_SUFFIX) ?\n            repartitionTopicNamePrefix : repartitionTopicNamePrefix + REPARTITION_TOPIC_SUFFIX;\n"
  },
  {
    "id" : "e8def755-49d7-4a6c-8fd3-486cb1826f9f",
    "prId" : 7598,
    "prUrl" : "https://github.com/apache/kafka/pull/7598#pullrequestreview-308867253",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85dded73-c914-4008-98cc-0c66c92e858e",
        "parentId" : null,
        "authorId" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "body" : "It seems like we could know whether the user supplied the topic name or not and pass that as a parameter to this function, in which case we would not need to do any pattern matching?",
        "createdAt" : "2019-10-29T19:34:10Z",
        "updatedAt" : "2019-11-04T17:18:59Z",
        "lastEditedBy" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "tags" : [
        ]
      },
      {
        "id" : "04a22df7-fa76-4903-a702-264a208ff375",
        "parentId" : "85dded73-c914-4008-98cc-0c66c92e858e",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "I had thought of that approach when doing this PR, but I didn't want to have the logic spread out in different areas of the code.  If you insist I can make the change to pass in a `boolean` flag indicating it's a user-provided name.",
        "createdAt" : "2019-10-29T21:09:24Z",
        "updatedAt" : "2019-11-04T17:18:59Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "05f5ce4e-bda5-4800-ab27-a2000e915187",
        "parentId" : "85dded73-c914-4008-98cc-0c66c92e858e",
        "authorId" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "body" : "My intuition is that it would be more direct and less brittle to pass the flag. I suspect you would agree? There is a cost associated with the change as you pointed. It looks like this would impact a couple of call paths and `OptimizableRepartitionNode`? If so, that doesn't look too bad. I don't have a good intuition as to whether `KSTREAM-xxxxxxxxxx` is reserved and how likely we are to change that.\r\n\r\nGiven the information I have right now, I would make the change. I welcome you or someone else with more experience than me (a low bar :)) to assert that I've under estimated the cost or that the code is so unlikely to change that the benefit does not outweigh the cost. If that's the case I'm willing to accept it as is.",
        "createdAt" : "2019-10-29T21:26:45Z",
        "updatedAt" : "2019-11-04T17:18:59Z",
        "lastEditedBy" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "tags" : [
        ]
      },
      {
        "id" : "f8f666cc-81e4-489a-9a60-15e4711444ca",
        "parentId" : "85dded73-c914-4008-98cc-0c66c92e858e",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Fair enough, I'll go ahead and make the changes to pass in a flag indicating a user has provided the name.",
        "createdAt" : "2019-10-29T22:14:03Z",
        "updatedAt" : "2019-11-04T17:18:59Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ad32d2b69b9b6c015e383e02df47431da0fcb36",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +849,853 @@        final String nullKeyFilterProcessorName;\n\n        if (repartitionTopicNamePrefix.matches(\"KSTREAM.*-[0-9]{10}\")) {\n            sinkName = genSinkName;\n            sourceName = genSourceName;"
  },
  {
    "id" : "46a57e8d-579e-4cca-8e59-cdb852ca7ef1",
    "prId" : 7874,
    "prUrl" : "https://github.com/apache/kafka/pull/7874#pullrequestreview-336981902",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3fc3434c-5277-4f4f-9bb4-792a05038d6d",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "this check was missing",
        "createdAt" : "2019-12-30T00:17:38Z",
        "updatedAt" : "2020-01-09T19:34:39Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8549473c2106c8ef2904d058294d030d57084fa",
    "line" : 263,
    "diffHunk" : "@@ -1,1 +381,385 @@                        final Named named) {\n        Objects.requireNonNull(action, \"action can't be null\");\n        Objects.requireNonNull(named, \"named can't be null\");\n\n        final String name = new NamedInternal(named).orElseGenerateWithPrefix(builder, FOREACH_NAME);"
  },
  {
    "id" : "8a91571e-2084-4f85-8b32-56dd7548e486",
    "prId" : 7874,
    "prUrl" : "https://github.com/apache/kafka/pull/7874#pullrequestreview-336981944",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53b3b495-ba56-4a1b-b33e-8e9f4dd042b3",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "new check",
        "createdAt" : "2019-12-30T00:18:35Z",
        "updatedAt" : "2020-01-09T19:34:39Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8549473c2106c8ef2904d058294d030d57084fa",
    "line" : 321,
    "diffHunk" : "@@ -1,1 +438,442 @@    private KStream<K, V>[] doBranch(final NamedInternal named,\n                                     final Predicate<? super K, ? super V>... predicates) {\n        Objects.requireNonNull(predicates, \"predicates can't be a null array\");\n        if (predicates.length == 0) {\n            throw new IllegalArgumentException(\"branch() requires at least one predicate\");"
  },
  {
    "id" : "9012a633-1b2e-4004-af80-5c09ef9627a0",
    "prId" : 7874,
    "prUrl" : "https://github.com/apache/kafka/pull/7874#pullrequestreview-336981954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ef47419-15f2-4c0a-ad17-330dea3b12bb",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "improved error message",
        "createdAt" : "2019-12-30T00:18:46Z",
        "updatedAt" : "2020-01-09T19:34:39Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8549473c2106c8ef2904d058294d030d57084fa",
    "line" : 324,
    "diffHunk" : "@@ -1,1 +440,444 @@        Objects.requireNonNull(predicates, \"predicates can't be a null array\");\n        if (predicates.length == 0) {\n            throw new IllegalArgumentException(\"branch() requires at least one predicate\");\n        }\n        for (final Predicate<? super K, ? super V> predicate : predicates) {"
  },
  {
    "id" : "f9974716-779d-4d7d-9bef-1cebdeaab727",
    "prId" : 7874,
    "prUrl" : "https://github.com/apache/kafka/pull/7874#pullrequestreview-336981969",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e20952f0-ec32-4acb-be67-45fa184f916a",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "improved error messsage",
        "createdAt" : "2019-12-30T00:19:01Z",
        "updatedAt" : "2020-01-09T19:34:39Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8549473c2106c8ef2904d058294d030d57084fa",
    "line" : 328,
    "diffHunk" : "@@ -1,1 +443,447 @@        }\n        for (final Predicate<? super K, ? super V> predicate : predicates) {\n            Objects.requireNonNull(predicate, \"predicates can't be null\");\n        }\n"
  },
  {
    "id" : "23f77a0b-85c7-45b9-b464-51c89a564684",
    "prId" : 7874,
    "prUrl" : "https://github.com/apache/kafka/pull/7874#pullrequestreview-336981978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "768a3c3c-735d-40aa-a290-93f088b5172f",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "call other overload to \"streamline\" code",
        "createdAt" : "2019-12-30T00:19:22Z",
        "updatedAt" : "2020-01-09T19:34:39Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8549473c2106c8ef2904d058294d030d57084fa",
    "line" : 366,
    "diffHunk" : "@@ -1,1 +475,479 @@    @Override\n    public KStream<K, V> merge(final KStream<K, V> stream) {\n        return merge(stream, NamedInternal.empty());\n    }\n"
  },
  {
    "id" : "cce2ec38-9692-4e90-bc1e-7ac44945429c",
    "prId" : 7874,
    "prUrl" : "https://github.com/apache/kafka/pull/7874#pullrequestreview-336981985",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6102aa92-79d2-476a-b21e-81ccdf677f0b",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "this check was missing",
        "createdAt" : "2019-12-30T00:19:36Z",
        "updatedAt" : "2020-01-09T19:34:39Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8549473c2106c8ef2904d058294d030d57084fa",
    "line" : 376,
    "diffHunk" : "@@ -1,1 +482,486 @@                               final Named named) {\n        Objects.requireNonNull(stream, \"stream can't be null\");\n        Objects.requireNonNull(named, \"named can't be null\");\n\n        return merge(builder, stream, new NamedInternal(named));"
  },
  {
    "id" : "0d55cb8c-7ed3-4016-bfda-f9c2c8dfa641",
    "prId" : 7874,
    "prUrl" : "https://github.com/apache/kafka/pull/7874#pullrequestreview-336982024",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6ae9990-ddf1-4728-8f31-3e5a95fe5aff",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "fixed typo (was always use lower case letter as we refer to the parameter name -- there was multiple typos on those error messages -- won't highlight all)",
        "createdAt" : "2019-12-30T00:20:45Z",
        "updatedAt" : "2020-01-09T19:34:39Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8549473c2106c8ef2904d058294d030d57084fa",
    "line" : 470,
    "diffHunk" : "@@ -1,1 +525,529 @@                                 final Produced<K, V> produced) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(produced, \"produced can't be null\");\n\n        final ProducedInternal<K, V> producedInternal = new ProducedInternal<>(produced);"
  },
  {
    "id" : "8028a22b-aa00-4ca1-a8fe-ea8ebc0f45e3",
    "prId" : 7874,
    "prUrl" : "https://github.com/apache/kafka/pull/7874#pullrequestreview-336982100",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b637812-415d-423f-b07b-3e0832a6d936",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Added some new checks here (similar for \"transform\" variants)",
        "createdAt" : "2019-12-30T00:22:33Z",
        "updatedAt" : "2020-01-09T19:34:39Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8549473c2106c8ef2904d058294d030d57084fa",
    "line" : 1065,
    "diffHunk" : "@@ -1,1 +1091,1095 @@        for (final String stateStoreName : stateStoreNames) {\n            Objects.requireNonNull(stateStoreName, \"stateStoreNames can't contain `null` as store name\");\n        }\n\n        final String name = new NamedInternal(named).name();"
  },
  {
    "id" : "95fc59df-4920-481c-b89c-d7730ea178b4",
    "prId" : 7874,
    "prUrl" : "https://github.com/apache/kafka/pull/7874#pullrequestreview-340741953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e746018b-381a-4412-ae59-1cb6251628b4",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Can we fix the code instead of suppressing the warning?",
        "createdAt" : "2020-01-08T19:34:26Z",
        "updatedAt" : "2020-01-09T19:34:39Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "f33886ab-1df4-45c2-af79-6a1e7b9f27a5",
        "parentId" : "e746018b-381a-4412-ae59-1cb6251628b4",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Unfortunately not (at least what my Java knowledge concerns), because arrays and generic don't work together very well...",
        "createdAt" : "2020-01-09T02:59:56Z",
        "updatedAt" : "2020-01-09T19:34:39Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "50526449-cb98-475b-8b44-5e5167cdf3d6",
        "parentId" : "e746018b-381a-4412-ae59-1cb6251628b4",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Yeah, Java's type system makes this stuff a pain.\r\n\r\nI think you can fix it with:\r\n```\r\n        final ProcessorParameters<K, V> processorParameters =\r\n            new ProcessorParameters<>(new KStreamBranch<>((Predicate<K, V>[]) predicates.clone(), childNames), branchName);\r\n```\r\nwhich should be safe\r\n\r\nIf you want to also get rid of the cast, you can do it by coercing each of the predicates to a Predicate<K,V> when you loop over them at the beginning:\r\n```\r\n        Predicate<K, V>[] kvPredicates = new Predicate[predicates.length];\r\n        for (int i = 0; i < predicates.length; i++) {\r\n            final Predicate<? super K, ? super V> predicate = predicates[i];\r\n            Objects.requireNonNull(predicate, \"predicates can't be null\");\r\n            kvPredicates[i] = predicate::test;\r\n        }\r\n```",
        "createdAt" : "2020-01-09T18:53:42Z",
        "updatedAt" : "2020-01-09T19:34:39Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "d8549473c2106c8ef2904d058294d030d57084fa",
    "line" : 318,
    "diffHunk" : "@@ -1,1 +435,439 @@    }\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    private KStream<K, V>[] doBranch(final NamedInternal named,\n                                     final Predicate<? super K, ? super V>... predicates) {"
  },
  {
    "id" : "e520e232-b6de-4f9d-a451-6929d33981c6",
    "prId" : 7927,
    "prUrl" : "https://github.com/apache/kafka/pull/7927#pullrequestreview-340910337",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a9ab70a-3fe4-4c72-9e35-00c7387957de",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "As in the interface; renamed parameter",
        "createdAt" : "2020-01-10T01:19:10Z",
        "updatedAt" : "2020-01-10T01:19:10Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b54aaa0b587b31dacb84d171d6e472d9fa7a6da",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +603,607 @@    @Override\n    public <KR> KGroupedStream<KR, V> groupBy(final KeyValueMapper<? super K, ? super V, KR> keySelector) {\n        return groupBy(keySelector, Grouped.with(null, valSerde));\n    }\n"
  },
  {
    "id" : "49bb9834-a949-4ce0-9525-268881f622d7",
    "prId" : 7927,
    "prUrl" : "https://github.com/apache/kafka/pull/7927#pullrequestreview-340910439",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "65ab1fa0-4b90-444c-8620-fed52b92dba5",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "It's called `otherStream` in the interface -- aligning both",
        "createdAt" : "2020-01-10T01:19:36Z",
        "updatedAt" : "2020-01-10T01:19:37Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b54aaa0b587b31dacb84d171d6e472d9fa7a6da",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +669,673 @@\n    @Override\n    public <VO, VR> KStream<K, VR> join(final KStream<K, VO> otherStream,\n                                        final ValueJoiner<? super V, ? super VO, ? extends VR> joiner,\n                                        final JoinWindows windows) {"
  },
  {
    "id" : "c20f4038-4c8f-4dbc-ba5a-f12f00cf9e7f",
    "prId" : 7927,
    "prUrl" : "https://github.com/apache/kafka/pull/7927#pullrequestreview-340910538",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0082241e-c2d6-4e68-8b91-b6367627e9d6",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "It's called `table` in the interface -- aligning both",
        "createdAt" : "2020-01-10T01:19:57Z",
        "updatedAt" : "2020-01-10T01:19:58Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b54aaa0b587b31dacb84d171d6e472d9fa7a6da",
    "line" : 213,
    "diffHunk" : "@@ -1,1 +901,905 @@\n    @Override\n    public <VO, VR> KStream<K, VR> join(final KTable<K, VO> table,\n                                        final ValueJoiner<? super V, ? super VO, ? extends VR> joiner) {\n        return join(table, joiner, Joined.with(null, null, null));"
  },
  {
    "id" : "c57ef6f4-a963-4caa-90a4-05cc70594f62",
    "prId" : 7927,
    "prUrl" : "https://github.com/apache/kafka/pull/7927#pullrequestreview-340910632",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15be6047-1ea0-449b-a75d-d6f5e5e351c9",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "As in the interface; renamed parameter",
        "createdAt" : "2020-01-10T01:20:22Z",
        "updatedAt" : "2020-01-10T01:20:22Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b54aaa0b587b31dacb84d171d6e472d9fa7a6da",
    "line" : 273,
    "diffHunk" : "@@ -1,1 +959,963 @@    @Override\n    public <KG, VG, VR> KStream<K, VR> join(final GlobalKTable<KG, VG> globalTable,\n                                            final KeyValueMapper<? super K, ? super V, ? extends KG> keySelector,\n                                            final ValueJoiner<? super V, ? super VG, ? extends VR> joiner) {\n        return globalTableJoin(globalTable, keySelector, joiner, false, NamedInternal.empty());"
  },
  {
    "id" : "e81831e7-370a-4ea9-95f4-da61746e958c",
    "prId" : 7927,
    "prUrl" : "https://github.com/apache/kafka/pull/7927#pullrequestreview-340910761",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03088db6-2b23-4913-88e9-1bb45e506215",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "As in the interface; renamed parameter\r\n(note, that the first parameter is already called `globalTable`)",
        "createdAt" : "2020-01-10T01:20:56Z",
        "updatedAt" : "2020-01-10T01:20:57Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b54aaa0b587b31dacb84d171d6e472d9fa7a6da",
    "line" : 316,
    "diffHunk" : "@@ -1,1 +993,997 @@                                                        final Named named) {\n        Objects.requireNonNull(globalTable, \"globalTable can't be null\");\n        Objects.requireNonNull(keySelector, \"keySelector can't be null\");\n        Objects.requireNonNull(joiner, \"joiner can't be null\");\n        Objects.requireNonNull(named, \"named can't be null\");"
  },
  {
    "id" : "7356f68f-d2ca-4cf2-b7c7-4df2ce4dc55c",
    "prId" : 7985,
    "prUrl" : "https://github.com/apache/kafka/pull/7985#pullrequestreview-347121051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9414bb7f-e02b-4e9d-b5ce-2388ea0da26a",
        "parentId" : null,
        "authorId" : "984ae554-dec3-4965-981c-afd5dea0fd99",
        "body" : "We have to addStateStore to topology so we can join\r\nso we needs to be materialized\r\ninternalStreamBuilder is similarly materialized.\r\n\r\nKTableKTableJoinNode is process check  \r\n-> \r\nif (!stateFactories.containsKey(stateStoreName)) {\r\n            throw new TopologyException(\"StateStore \" + stateStoreName + \" is not added yet.\");\r\n   }\r\n\r\ntopologyBuilder.addStateStore(storeBuilder, nodeName());",
        "createdAt" : "2020-01-23T08:23:54Z",
        "updatedAt" : "2020-01-30T06:31:16Z",
        "lastEditedBy" : "984ae554-dec3-4965-981c-afd5dea0fd99",
        "tags" : [
        ]
      }
    ],
    "commit" : "604a1821cede104e3db1e0d3f7ef7aa95fab00b1",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +624,628 @@                builder,\n                TO_KTABLE_NAME);\n\n        return doToTable(named, materializedInternal);\n    }"
  }
]