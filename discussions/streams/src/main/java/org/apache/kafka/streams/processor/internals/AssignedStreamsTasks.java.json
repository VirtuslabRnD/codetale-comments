[
  {
    "id" : "bfce03e9-8438-4581-938a-42ba40e1a9d3",
    "prId" : 5428,
    "prUrl" : "https://github.com/apache/kafka/pull/5428#pullrequestreview-149798706",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0e7d8a8-ac27-4f64-a56b-f3fbb9af3603",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "This seems to contradict that we set `commitNeeded` after punctuations (cf. my comments below).",
        "createdAt" : "2018-08-22T22:55:13Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "f303ed06-e6d0-45f6-a553-0952a524773d",
        "parentId" : "a0e7d8a8-ac27-4f64-a56b-f3fbb9af3603",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Still not sure if I follow.. we do `maybePunctuate` before `maybeCommit` so this should be fine?",
        "createdAt" : "2018-08-23T17:57:37Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "d677ffe9-9a01-4d09-a12a-480f3d9baeaa",
        "parentId" : "a0e7d8a8-ac27-4f64-a56b-f3fbb9af3603",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I think I miss understood the logic before. Please ignore this comment.",
        "createdAt" : "2018-08-23T18:07:36Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "6ee52847-ba78-4207-a0b9-988f1fe0da32",
        "parentId" : "a0e7d8a8-ac27-4f64-a56b-f3fbb9af3603",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Yeah, I can confirm that I just now got confused about the names. Can we maybe call this (and up the chain) `commitIfRequestedAndNeeded` or similar?\r\n\r\nSpecifically, the thing that confused me was differentiating the periodic commits on any dirty task vs. the on-demand commit driven by `ProcessorContext#commit`.",
        "createdAt" : "2018-08-27T17:10:02Z",
        "updatedAt" : "2018-09-11T21:32:12Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "71b2b16d0b0f37a05af3df60ae9b5ff88649a7a4",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +48,52 @@            final StreamTask task = it.next();\n            try {\n                if (task.commitRequested() && task.commitNeeded()) {\n                    task.commit();\n                    committed++;"
  },
  {
    "id" : "23f76c12-a1fa-4e43-93f9-3ab3f22dce64",
    "prId" : 5768,
    "prUrl" : "https://github.com/apache/kafka/pull/5768#pullrequestreview-163145294",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b353e217-a53d-4707-9daf-f8d7770ceeca",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "nit: `Override`.",
        "createdAt" : "2018-10-10T00:15:20Z",
        "updatedAt" : "2018-11-21T20:59:48Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "93b7dafef1e580fb77cd3eb7ec7a6220b2832446",
    "line" : 95,
    "diffHunk" : "@@ -1,1 +227,231 @@\n    @Override\n    List<StreamTask> allTasks() {\n        final List<StreamTask> tasks = super.allTasks();\n        tasks.addAll(restoring.values());"
  },
  {
    "id" : "1dde38ed-5211-4d4f-96a9-cece77c1490c",
    "prId" : 5768,
    "prUrl" : "https://github.com/apache/kafka/pull/5768#pullrequestreview-163145294",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dfc7b2ba-8146-4f0d-b0d0-3cc329262f25",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Ditto here.",
        "createdAt" : "2018-10-10T00:15:36Z",
        "updatedAt" : "2018-11-21T20:59:48Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "93b7dafef1e580fb77cd3eb7ec7a6220b2832446",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +234,238 @@\n    @Override\n    Set<TaskId> allAssignedTaskIds() {\n        final Set<TaskId> taskIds = super.allAssignedTaskIds();\n        taskIds.addAll(restoring.keySet());"
  },
  {
    "id" : "c509dc58-7dab-4cb9-84c0-fcdcc3400893",
    "prId" : 6113,
    "prUrl" : "https://github.com/apache/kafka/pull/6113#pullrequestreview-191470454",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8318ef8-1e6b-4523-a25a-71fc2ae8720e",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "The following three functions do not have logical changes, just re-grouping all overridden functions on top of AssignedTasks here.",
        "createdAt" : "2019-01-10T23:59:41Z",
        "updatedAt" : "2019-02-22T01:03:34Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "912a45642a92f4298d203d5c4eda6a1678208c05",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +46,50 @@    }\n\n    @Override\n    List<StreamTask> allTasks() {\n        final List<StreamTask> tasks = super.allTasks();"
  },
  {
    "id" : "a611b8d7-cc43-4f65-8496-ffca1046953f",
    "prId" : 7321,
    "prUrl" : "https://github.com/apache/kafka/pull/7321#pullrequestreview-288994781",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ebb89ae-d376-43b1-a765-c264492222eb",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "For me it sounds like a `warn`",
        "createdAt" : "2019-09-13T23:29:58Z",
        "updatedAt" : "2019-09-24T05:45:47Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "af64a1cf-0cfd-4dca-888b-91809596efb4",
        "parentId" : "2ebb89ae-d376-43b1-a765-c264492222eb",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "This part was copy/pasted but I do think info kind of makes sense...no strong feelings though",
        "createdAt" : "2019-09-17T02:50:42Z",
        "updatedAt" : "2019-09-24T05:45:47Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3935aa6be7cc55911bb4e24332557df24d01f18",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +133,137 @@            } catch (final TaskMigratedException closeAsZombieAndSwallow) {\n                // as we suspend a task, we are either shutting down or rebalancing, thus, we swallow and move on\n                log.info(\"Failed to suspend {} {} since it got migrated to another thread already. \" +\n                    \"Closing it as zombie and move on.\", taskTypeName, id);\n                firstException.compareAndSet(null, closeZombieTask(task));"
  },
  {
    "id" : "5018e139-215b-403e-87a8-da2342d6c86e",
    "prId" : 7321,
    "prUrl" : "https://github.com/apache/kafka/pull/7321#pullrequestreview-291439049",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d13cb869-1121-40e9-8e3b-7865aa09edfd",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Is this for testing only too?",
        "createdAt" : "2019-09-19T16:59:05Z",
        "updatedAt" : "2019-09-24T05:45:47Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "32fb6fa9-a575-4428-a653-9323e753062f",
        "parentId" : "d13cb869-1121-40e9-8e3b-7865aa09edfd",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Yeah, will expand the comment",
        "createdAt" : "2019-09-21T00:14:20Z",
        "updatedAt" : "2019-09-24T05:45:47Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "c3935aa6be7cc55911bb4e24332557df24d01f18",
    "line" : 353,
    "diffHunk" : "@@ -1,1 +521,525 @@    }\n\n    Set<TaskId> restoringTaskIds() {\n        return new HashSet<>(restoring.keySet());\n    }"
  },
  {
    "id" : "7191ccde-6b97-4ad7-a4d7-e43f7b9d4f5d",
    "prId" : 7386,
    "prUrl" : "https://github.com/apache/kafka/pull/7386#pullrequestreview-295343685",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b89f67c-4e4a-4ebf-9e72-059948b2bc79",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Nice cleanup! In #5501 we moved the close / abort logic into the caller suspend function, and we should actually remove the parameter in that PR but overlooked it.",
        "createdAt" : "2019-10-01T03:04:06Z",
        "updatedAt" : "2019-10-06T23:53:51Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f047cd9bea88a4ffc88ce2b4f82946d52202c539",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +75,79 @@    void closeTask(final StreamTask task, final boolean clean) {\n        if (suspended.containsKey(task.id())) {\n            task.closeSuspended(clean, null);\n        } else {\n            task.close(clean, false);"
  },
  {
    "id" : "1a994b58-367d-459f-924e-0071f8861a76",
    "prId" : 7608,
    "prUrl" : "https://github.com/apache/kafka/pull/7608#pullrequestreview-308822028",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62c2f306-806e-483d-8642-f3494a77a0fd",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Some semi-related cleanup, to consolidate the state upkeep logic for all the various data structures in here",
        "createdAt" : "2019-10-29T02:26:29Z",
        "updatedAt" : "2019-10-29T23:41:43Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "e39cfc2d-10d2-4f65-a4a5-a4904faaaf2e",
        "parentId" : "62c2f306-806e-483d-8642-f3494a77a0fd",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Should we loop over `task.changelogPartitions()` instead? For StreamTask the `partitions()` and `changelogPartitions()` should be non-overlapping except the shared source/changelog partitions.",
        "createdAt" : "2019-10-29T17:18:12Z",
        "updatedAt" : "2019-10-29T23:41:43Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "3cfe431a-b4fe-4eb7-98f3-b92c0873d2a7",
        "parentId" : "62c2f306-806e-483d-8642-f3494a77a0fd",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "We should also consider throwing exception here if a task spams multiple structs",
        "createdAt" : "2019-10-29T19:14:09Z",
        "updatedAt" : "2019-10-29T23:41:43Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "f3238935-fa02-439b-8241-31af00952d5f",
        "parentId" : "62c2f306-806e-483d-8642-f3494a77a0fd",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "@guozhangwang Good catch, we should actually loop over both of them since that's what we do in `addTaskToRestoring` above\r\n@abbccdda I do agree with you about more strongly enforcing task state but I'm not sure this would be the most practical/appropriate way to do it. See other comments",
        "createdAt" : "2019-10-29T20:52:53Z",
        "updatedAt" : "2019-10-29T23:41:43Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "01a2aedaf962ef937687f97786c637ed6821efd5",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +375,379 @@    }\n\n    private void removeTaskFromRestoring(final StreamTask task) {\n        restoring.remove(task.id());\n        for (final TopicPartition topicPartition : task.partitions()) {"
  },
  {
    "id" : "b5ff72a7-40eb-4275-b105-ba9884f8a303",
    "prId" : 7608,
    "prUrl" : "https://github.com/apache/kafka/pull/7608#pullrequestreview-308748169",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2466acf2-4788-4c68-827e-737aeeb53240",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Looks much better!",
        "createdAt" : "2019-10-29T18:45:50Z",
        "updatedAt" : "2019-10-29T23:41:43Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      }
    ],
    "commit" : "01a2aedaf962ef937687f97786c637ed6821efd5",
    "line" : 123,
    "diffHunk" : "@@ -1,1 +395,399 @@        RuntimeException firstException = null;\n\n        for (final StreamTask task : running.values()) {\n            try {\n                if (task.commitRequested() && task.commitNeeded()) {"
  },
  {
    "id" : "c8b47a01-547d-41a3-96c9-43b98bceec68",
    "prId" : 7608,
    "prUrl" : "https://github.com/apache/kafka/pull/7608#pullrequestreview-308822028",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "772cf607-47d3-4d2b-be77-8544fb2e1c8e",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Just to clarify, is there any ordering requirement between these two operations?\r\n```\r\nremoveTaskFromRestoring(task);\r\nclosedTaskChangelogs.addAll(task.changelogPartitions());\t     \r\n```",
        "createdAt" : "2019-10-29T18:53:59Z",
        "updatedAt" : "2019-10-29T23:41:43Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "213c665c-21ad-4bf4-80ab-0439563cb69f",
        "parentId" : "772cf607-47d3-4d2b-be77-8544fb2e1c8e",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Nope, `removeTaskFromRestoring` just removes the task from `AssignedStreamTasks` -- it shouldn't affect the task or its fields in any way",
        "createdAt" : "2019-10-29T20:47:00Z",
        "updatedAt" : "2019-10-29T23:41:43Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "01a2aedaf962ef937687f97786c637ed6821efd5",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +226,230 @@                                            final List<TopicPartition> closedTaskChangelogs) {\n        removeTaskFromRestoring(task);\n        closedTaskChangelogs.addAll(task.changelogPartitions());\n\n        try {"
  },
  {
    "id" : "44c5b7d0-943f-4b4d-a846-34ac57194a4b",
    "prId" : 7691,
    "prUrl" : "https://github.com/apache/kafka/pull/7691#pullrequestreview-317384070",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea776818-9a37-4abe-b17b-e71cf83d2385",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Question: I remember `running` is a superset of `suspended`, so if we put this condition first before line 304, it means line 304 would never trigger right?",
        "createdAt" : "2019-11-14T23:41:48Z",
        "updatedAt" : "2019-11-19T17:48:00Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "c28d3ca2-1076-4775-a700-10bc32845943",
        "parentId" : "ea776818-9a37-4abe-b17b-e71cf83d2385",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Ah, good question. I found another way to solve that issue besides making running a superset of suspended -- now, all maps are completely disjoint, and any given task should be contained in exactly one",
        "createdAt" : "2019-11-15T02:52:56Z",
        "updatedAt" : "2019-11-19T17:48:00Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "282a02377a041544c6ddd4ea4b3700ee1a236943",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +286,290 @@\n        for (final TaskId id : allAssignedTaskIds()) {\n            if (running.containsKey(id)) {\n                log.debug(\"Closing the zombie running stream task {}.\", id);\n                firstException.compareAndSet(null, closeRunning(true, running.get(id)));"
  },
  {
    "id" : "fd730648-3a1f-4889-8da8-6b9bf82a4904",
    "prId" : 7748,
    "prUrl" : "https://github.com/apache/kafka/pull/7748#pullrequestreview-324521467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec7e0e34-b609-40ce-9c79-5fe7585f5aa5",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Why this change?",
        "createdAt" : "2019-11-28T07:16:41Z",
        "updatedAt" : "2019-12-03T04:02:12Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "ec2e2029-89fd-48b5-853f-ac615fb7ca45",
        "parentId" : "ec7e0e34-b609-40ce-9c79-5fe7585f5aa5",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Sorry, I should have documented why I made another round of changes. When I tested the code prior to this change, we still had threads dying with a different exception...\r\n```\r\n[2019-11-27 11:28:59,965] ERROR [stream-soak-test-92665673-8057-4ee8-8619-bffd3670817d-StreamThread-2] stream-thread [stream-soak-test-92665673-8057-4ee8-8619-bffd3670817d-StreamThread-2] Encountered the following unexpected Kafka exception during processing, this usually indicate Streams internal errors: (org.apache.kafka.streams.processor.internals.StreamThread)\r\norg.apache.kafka.streams.errors.StreamsException: stream-thread [stream-soak-test-92665673-8057-4ee8-8619-bffd3670817d-StreamThread-2] Failed to rebalance.\r\n\tat org.apache.kafka.streams.processor.internals.StreamThread.pollRequests(StreamThread.java:852)\r\n\tat org.apache.kafka.streams.processor.internals.StreamThread.runOnce(StreamThread.java:739)\r\n\tat org.apache.kafka.streams.processor.internals.StreamThread.runLoop(StreamThread.java:698)\r\n\tat org.apache.kafka.streams.processor.internals.StreamThread.run(StreamThread.java:671)\r\n Caused by: org.apache.kafka.streams.errors.StreamsException: stream-thread [stream-soak-test-92665673-8057-4ee8-8619-bffd3670817d-StreamThread-2] failed to suspend stream tasks\r\n\tat org.apache.kafka.streams.processor.internals.TaskManager.suspendActiveTasksAndState(TaskManager.java:253)\r\n\tat org.apache.kafka.streams.processor.internals.StreamsRebalanceListener.onPartitionsRevoked(StreamsRebalanceListener.java:116)\r\n\tat org.apache.kafka.clients.consumer.internals.ConsumerCoordinator.invokePartitionsRevoked(ConsumerCoordinator.java:291)\r\n\tat org.apache.kafka.clients.consumer.internals.ConsumerCoordinator.onLeavePrepare(ConsumerCoordinator.java:707)\r\n\tat org.apache.kafka.clients.consumer.KafkaConsumer.unsubscribe(KafkaConsumer.java:1073)\r\n\tat org.apache.kafka.streams.processor.internals.StreamThread.enforceRebalance(StreamThread.java:716)\r\n\tat org.apache.kafka.streams.processor.internals.StreamThread.runLoop(StreamThread.java:710)\r\n\t... 1 more\r\n Caused by: org.apache.kafka.streams.errors.TaskMigratedException: Client request for task 1_0 has been fenced due to a rebalance\r\n\tat org.apache.kafka.streams.processor.internals.AbstractTask.flushState(AbstractTask.java:182)\r\n\tat org.apache.kafka.streams.processor.internals.StreamTask.suspend(StreamTask.java:679)\r\n\tat org.apache.kafka.streams.processor.internals.StreamTask.close(StreamTask.java:787)\r\n\tat org.apache.kafka.streams.processor.internals.AssignedTasks.closeZombieTask(AssignedTasks.java:102)\r\n\tat org.apache.kafka.streams.processor.internals.AssignedStreamsTasks.suspendRunningTasks(AssignedStreamsTasks.java:151)\r\n\tat org.apache.kafka.streams.processor.internals.AssignedStreamsTasks.suspendOrCloseTasks(AssignedStreamsTasks.java:128)\r\n\tat org.apache.kafka.streams.processor.internals.TaskManager.suspendActiveTasksAndState(TaskManager.java:246)\r\n\t... 7 more\r\n Caused by: org.apache.kafka.streams.errors.ProcessorStateException: task [1_0] Failed to flush state store logData10MinuteFinalCount-store\r\n\tat org.apache.kafka.streams.processor.internals.ProcessorStateManager.flush(ProcessorStateManager.java:279)\r\n\tat org.apache.kafka.streams.processor.internals.AbstractTask.flushState(AbstractTask.java:178)\r\n\t... 13 more\r\n Caused by: org.apache.kafka.common.errors.ProducerFencedException: task [1_0] Abort sending since producer got fenced with a previous record (timestamp 1574853975939) to topic windowed-node-counts due to org.apache.kafka.common.errors.ProducerFencedException: Producer attempted an operation with an old epoch. Either there is a newer producer with the same transactionalId, or the producer's transaction has been expired by the broker.\r\n [2019-11-27 11:28:59,966] INFO [stream-soak-test-92665673-8057-4ee8-8619-bffd3670817d-StreamThread-2] stream-thread [stream-soak-test-92665673-8057-4ee8-8619-bffd3670817d-StreamThread-2] State transition from PARTITIONS_REVOKED to PENDING_SHUTDOWN (org.apache.kafka.streams.processor.internals.StreamThread)\r\n [2019-11-27 11:28:59,969] INFO [stream-soak-test-92665673-8057-4ee8-8619-bffd3670817d-StreamThread-2] stream-thread [stream-soak-test-92665673-8057-4ee8-8619-bffd3670817d-StreamThread-2] State transition from PENDING_SHUTDOWN to DEAD (org.apache.kafka.streams.processor.internals.StreamThread)\r\n```\r\n\r\nIt turns out that `firstException` actually winds up being a fatal exception. The usages of this method express an intent to ignore any exceptions, so that's what this change does. I also made sure that any relevant state tracking still happens correctly. I.e., even if we can't cleanly close this zombie task, it's still removed from the \"previous running\" collection, etc.",
        "createdAt" : "2019-11-29T04:53:54Z",
        "updatedAt" : "2019-12-03T04:02:12Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "96a2d969df7fe000bbda04c9aab3b0d50eaa655c",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +149,153 @@                log.info(\"Failed to suspend stream task {} since it got migrated to another thread already. \" +\n                    \"Closing it as zombie and moving on.\", id);\n                tryCloseZombieTask(task);\n                prevActiveTasks.remove(id);\n            } catch (final RuntimeException e) {"
  }
]