[
  {
    "id" : "b54106ae-6f72-4b34-aeab-7ebd924a5607",
    "prId" : 8541,
    "prUrl" : "https://github.com/apache/kafka/pull/8541#pullrequestreview-401412552",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "87ed5f9e-e241-4796-af38-b517fba37a90",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I renamed the PriorTaskAssignor and added a Javadoc to make its role clear.\r\n\r\nNote that \"PriorTaskAssignor\" would be an appropriate behavioral name, except that it also always returns \"true\", and that it must ignore the lags, which is what makes it a \"fallback\" assignor here.",
        "createdAt" : "2020-04-28T00:12:06Z",
        "updatedAt" : "2020-04-28T03:20:48Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "d58f62dc73dc3f4832cb89b5be6a8c8ce2f32e60",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@ */\npublic class FallbackPriorTaskAssignor implements TaskAssignor {\n    private final StickyTaskAssignor delegate;\n\n    public FallbackPriorTaskAssignor() {"
  },
  {
    "id" : "a89a0ac6-f414-4d29-8438-99f840c5d196",
    "prId" : 8541,
    "prUrl" : "https://github.com/apache/kafka/pull/8541#pullrequestreview-401454859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1843daa9-7882-4a64-a501-3c2e1d01af15",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Returning true here will schedule a followup rebalance at the probing interval, but we also schedule a followup rebalance immediately before instantiating this assignor (line 735). Is this intentional? IIUC your proposal was to trigger a followup rebalance right away, which we do by means of the assignment error code.\r\n\r\nOf course, this is in memory so if the instance crashes and restarts we lose this information. I think we should actually avoid using the `REBALANCE_NEEDED` error code inside the `assign` method, and only allow. it during `onAssignment`. If we know that a followup rebalance is needed during `assign` we should just encode the `nextScheduledRebalance` with the current time",
        "createdAt" : "2020-04-28T00:41:25Z",
        "updatedAt" : "2020-04-28T03:20:48Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "f185dac1-26c3-4a97-b9fc-1ab54702425d",
        "parentId" : "1843daa9-7882-4a64-a501-3c2e1d01af15",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Ah, this is a good point. Actually, I overlooked line 735. I'll remove that one.\r\n\r\nMy proposal actually was to just wait for the probing rebalance interval in case the lag computation failed. It seems like this should be ok, since Streams will still make progress in the mean time, and it avoids the pathological case where we could just constantly rebalance if the end-offsets API is down for some reason.",
        "createdAt" : "2020-04-28T02:26:58Z",
        "updatedAt" : "2020-04-28T03:20:48Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "d58f62dc73dc3f4832cb89b5be6a8c8ce2f32e60",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +30,34 @@ * Specifically, this assignor must:\n * 1. ignore the task lags in the ClientState map\n * 2. always return true, indicating that a follow-up rebalance is needed\n */\npublic class FallbackPriorTaskAssignor implements TaskAssignor {"
  },
  {
    "id" : "44a32259-3b84-4f1a-8dc3-b352204a3726",
    "prId" : 8588,
    "prUrl" : "https://github.com/apache/kafka/pull/8588#pullrequestreview-408512587",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e3598ab-facb-428d-afee-57d563188beb",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "It was subtly misnamed.",
        "createdAt" : "2020-05-08T21:36:15Z",
        "updatedAt" : "2020-05-14T01:51:44Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "9cf8316444c205ea04f6fa0874619451f5b94d92",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +42,46 @@    public boolean assign(final Map<UUID, ClientState> clients,\n                          final Set<TaskId> allTaskIds,\n                          final Set<TaskId> statefulTaskIds,\n                          final AssignmentConfigs configs) {\n        delegate.assign(clients, allTaskIds, statefulTaskIds, configs);"
  }
]