[
  {
    "id" : "73af1b2e-d137-4fde-b750-494e4a1f09ae",
    "prId" : 8414,
    "prUrl" : "https://github.com/apache/kafka/pull/8414#pullrequestreview-386923245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b2c3de5-c29e-4e7c-a630-ffdbd19b6709",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "You'll notice that sometimes, I use wildcard (`?`) generic parameter bounds and other times, `Object`. The reason is a little subtle. It's because the InternalProcessorContext has a method that _takes_ a ProcessorNode argument. We want to let (ourselves) pass in _any_ ProcessorNode, not just an exactly `<Object, Object>` one. But for all the ProcessorContext references, _we_ pass the context in, and we have to do it untyped anyway, so the type bound doesn't matter. It results in less mind-bending code for users to declare types using the Object,Object bounds, and it makes no difference to them, as far as the calls to `forward`, since the parameterized types are only upper bounds anyway.\r\n\r\nPunchline, it doesn't _really_ matter, but there are considerations that led me to use `?` in some cases and `Object` in others.",
        "createdAt" : "2020-04-03T04:10:20Z",
        "updatedAt" : "2020-04-06T22:03:32Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb647f05c2b3fa29fbd9ecb88b6fc72e274f9af",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +26,30 @@class SessionCacheFlushListener<K, V> implements CacheFlushListener<Windowed<K>, V> {\n    private final InternalProcessorContext<Object, Object> context;\n    private final ProcessorNode<?, ?> myNode;\n\n    SessionCacheFlushListener(final ProcessorContext<Object, Object> context) {"
  }
]