[
  {
    "id" : "73af1b2e-d137-4fde-b750-494e4a1f09ae",
    "prId" : 8414,
    "prUrl" : "https://github.com/apache/kafka/pull/8414#pullrequestreview-386923245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b2c3de5-c29e-4e7c-a630-ffdbd19b6709",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "You'll notice that sometimes, I use wildcard (`?`) generic parameter bounds and other times, `Object`. The reason is a little subtle. It's because the InternalProcessorContext has a method that _takes_ a ProcessorNode argument. We want to let (ourselves) pass in _any_ ProcessorNode, not just an exactly `<Object, Object>` one. But for all the ProcessorContext references, _we_ pass the context in, and we have to do it untyped anyway, so the type bound doesn't matter. It results in less mind-bending code for users to declare types using the Object,Object bounds, and it makes no difference to them, as far as the calls to `forward`, since the parameterized types are only upper bounds anyway.\r\n\r\nPunchline, it doesn't _really_ matter, but there are considerations that led me to use `?` in some cases and `Object` in others.",
        "createdAt" : "2020-04-03T04:10:20Z",
        "updatedAt" : "2020-04-06T22:03:32Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "0eb647f05c2b3fa29fbd9ecb88b6fc72e274f9af",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +26,30 @@class SessionCacheFlushListener<K, V> implements CacheFlushListener<Windowed<K>, V> {\n    private final InternalProcessorContext<Object, Object> context;\n    private final ProcessorNode<?, ?> myNode;\n\n    SessionCacheFlushListener(final ProcessorContext<Object, Object> context) {"
  },
  {
    "id" : "07dcff35-e97f-48f3-ae29-041e8083e2f9",
    "prId" : 10744,
    "prUrl" : "https://github.com/apache/kafka/pull/10744#pullrequestreview-665887821",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8f1cc7a-91f9-494c-a9e0-52a424fad25b",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Sadly, I had to add generics to the InternalProcessorContext, so there are a _lot_ of changes in this PR that are purely related to resolving rawtypes and unchecked warnings.",
        "createdAt" : "2021-05-21T21:13:15Z",
        "updatedAt" : "2021-05-21T21:30:06Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "599f185421aa01afe9f55c0d9a1127f3224dd0e4",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +26,30 @@\nclass SessionCacheFlushListener<KOut, VOut> implements CacheFlushListener<Windowed<KOut>, VOut> {\n    private final InternalProcessorContext<Windowed<KOut>, Change<VOut>> context;\n\n    @SuppressWarnings(\"rawtypes\")"
  },
  {
    "id" : "e0e97411-d0a3-4213-a49d-b6374be2139a",
    "prId" : 10744,
    "prUrl" : "https://github.com/apache/kafka/pull/10744#pullrequestreview-670465317",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab623d71-3c54-4abe-a694-26f15ada88bd",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "There is also a sprinkling of suppressions like this. I did the best I could, but it's also not possible/easy/important to resolve them all right now.",
        "createdAt" : "2021-05-21T21:14:45Z",
        "updatedAt" : "2021-05-21T21:30:06Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "ed7add0d-fe85-4c44-a341-bfdcdb54627e",
        "parentId" : "ab623d71-3c54-4abe-a694-26f15ada88bd",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "Why do we put suppression inline, instead of putting it on the top of function?",
        "createdAt" : "2021-05-27T16:16:38Z",
        "updatedAt" : "2021-05-27T16:30:55Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "c1cd9570-f678-46cd-b6e2-ac6fa8857298",
        "parentId" : "ab623d71-3c54-4abe-a694-26f15ada88bd",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Just to limit the scope of the suppression and not mask other mistakes.",
        "createdAt" : "2021-05-27T17:41:12Z",
        "updatedAt" : "2021-05-27T17:41:12Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "599f185421aa01afe9f55c0d9a1127f3224dd0e4",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +42,46 @@                      final VOut oldValue,\n                      final long timestamp) {\n        @SuppressWarnings(\"rawtypes\") final ProcessorNode prev = context.currentNode();\n        context.setCurrentNode(myNode);\n        try {"
  },
  {
    "id" : "fdfe75f2-7d04-4e96-ac13-07104f0d7d8a",
    "prId" : 10744,
    "prUrl" : "https://github.com/apache/kafka/pull/10744#pullrequestreview-665887821",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "618a18aa-3fc1-422c-a0cc-0b6660aa2314",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "For compatibility these listeners and the forwarders now have apply methods that work for both the new and old APIs. They _should_ be functionally equivalent.",
        "createdAt" : "2021-05-21T21:16:01Z",
        "updatedAt" : "2021-05-21T21:30:06Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "599f185421aa01afe9f55c0d9a1127f3224dd0e4",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +60,64 @@            context.setCurrentNode(prev);\n        }\n    }\n}"
  }
]