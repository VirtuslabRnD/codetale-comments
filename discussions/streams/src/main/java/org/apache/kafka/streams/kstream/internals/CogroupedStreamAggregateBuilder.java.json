[
  {
    "id" : "d4b6130f-3d95-4901-ad9b-f323f197ff4f",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-323320869",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3deeba5e-b27b-443b-92cd-32f57ef45bc4",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "It seems to be clumsy to get a \"random\" `AbstactStream` to call the method. Better make `ensureCopartitionWith()` a static method and pass in the full set of `groupedStreams` -- for the join case, you would pass in both `AbstractStream` that needs to be copartitioned.",
        "createdAt" : "2019-11-26T00:17:13Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "70b0e416-cd74-4aa2-92a7-ecdd1dbb7733",
        "parentId" : "3deeba5e-b27b-443b-92cd-32f57ef45bc4",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "because we still need the build from the abstract stream we would still be choosing one at  \"random\" just inside the method.",
        "createdAt" : "2019-11-26T20:01:35Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      },
      {
        "id" : "541fccdf-0390-4a98-a8ab-fef68e473751",
        "parentId" : "3deeba5e-b27b-443b-92cd-32f57ef45bc4",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Fair enough :)",
        "createdAt" : "2019-11-26T22:17:53Z",
        "updatedAt" : "2019-12-01T00:43:00Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 62,
    "diffHunk" : "@@ -1,1 +60,64 @@        final AbstractStream<K, ?> kGrouped = groupedStreams.iterator().next();\n        groupedStreams.remove(kGrouped);\n        kGrouped.ensureCopartitionWith(groupedStreams);\n\n        final Collection<StreamsGraphNode> processors = new ArrayList<>();"
  },
  {
    "id" : "934a8edb-9792-4480-838b-625965e70503",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-324915063",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1bdfed4-da25-4135-89e5-dd6a2534d7e0",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "No need to pass in a `Named` -- we can just pass in the actual name as `String` directly -- otherwise we call `suffixWithOrElseGet` twice for no reason",
        "createdAt" : "2019-12-01T00:53:33Z",
        "updatedAt" : "2019-12-01T00:53:33Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +69,73 @@                kGroupedStream.getValue(),\n                initializer,\n                named.suffixWithOrElseGet(\n                    \"-cogroup-agg-\" + counter++,\n                    builder,"
  },
  {
    "id" : "0a4e0b1b-dff3-4f17-82c3-6b3d9dc60ffb",
    "prId" : 7538,
    "prUrl" : "https://github.com/apache/kafka/pull/7538#pullrequestreview-324915094",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adf4a827-11b5-4ba2-b5ea-ca6678f27c5c",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Changed this to generate a name `<userName>-cogroup-merge` to align to `<userName>-cogroup-agg-<counter>` instead of just `<userName>` for the merge node.",
        "createdAt" : "2019-12-01T00:54:50Z",
        "updatedAt" : "2019-12-01T00:54:51Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "3553929c506967ca45dff88e7139f3a4cdae0b4d",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +83,87 @@        }\n        final String mergeProcessorName = named.suffixWithOrElseGet(\n            \"-cogroup-merge\",\n            builder,\n            CogroupedKStreamImpl.MERGE_NAME);"
  },
  {
    "id" : "3ddad46f-d33c-4799-be5a-8c3f3465e711",
    "prId" : 7792,
    "prUrl" : "https://github.com/apache/kafka/pull/7792#pullrequestreview-328392808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6e62d0d2-6790-4168-ac30-27e0b862d80c",
        "parentId" : null,
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "it is necessary to to do an unchecked cast for the input value type. This is because cogrouped can have any type value for the group streams it intakes",
        "createdAt" : "2019-12-06T18:53:41Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8905f9b9777abcf47073456d2d2db72858993d6f",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +171,175 @@     * @return the new sourceName of the repartitioned source\n     */\n    @SuppressWarnings(\"unchecked\")\n    private <VIn> String createRepartitionSource(final String repartitionTopicNamePrefix,\n                                                 final OptimizableRepartitionNodeBuilder<K, ?> optimizableRepartitionNodeBuilder,"
  },
  {
    "id" : "2a8bf8d3-88d7-42a4-a2c9-722ad2b404bb",
    "prId" : 7792,
    "prUrl" : "https://github.com/apache/kafka/pull/7792#pullrequestreview-329360722",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b520b0b5-48d4-459f-9221-e56caa070ac3",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: can you change you IDE setting? This import should be after ther `org.apache` imports in the `java.*` imports block",
        "createdAt" : "2019-12-09T02:05:20Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "5a4fcc01-a94d-4701-8f21-49bd359d2617",
        "parentId" : "b520b0b5-48d4-459f-9221-e56caa070ac3",
        "authorId" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "body" : "I just had the wrong order",
        "createdAt" : "2019-12-09T22:35:38Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "e4e906b3-d01a-4fe6-ad3e-ccca19a6df5c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8905f9b9777abcf47073456d2d2db72858993d6f",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +22,26 @@import java.util.Collection;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;"
  },
  {
    "id" : "5e4fd618-1459-47c1-880a-e596e552c329",
    "prId" : 7792,
    "prUrl" : "https://github.com/apache/kafka/pull/7792#pullrequestreview-328657223",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "796d29da-f119-4f41-b951-5b12bbb8e928",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: add missing empty line",
        "createdAt" : "2019-12-09T02:06:48Z",
        "updatedAt" : "2019-12-13T17:52:47Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8905f9b9777abcf47073456d2d2db72858993d6f",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +168,172 @@    }\n\n    /**\n     * @return the new sourceName of the repartitioned source\n     */"
  },
  {
    "id" : "0cd2d885-9055-46b7-a329-54040237e779",
    "prId" : 10869,
    "prUrl" : "https://github.com/apache/kafka/pull/10869#pullrequestreview-682178162",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22a5ad9e-0cb1-4d5b-a26b-8053a6115c83",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Suppressing the deprecation warnings on our internal processors, and their tests, makes up the lion's share of this PR. I've marked them all with this comment, and filed https://issues.apache.org/jira/browse/KAFKA-12939 to make sure we really migrate everything.",
        "createdAt" : "2021-06-11T20:16:10Z",
        "updatedAt" : "2021-06-11T20:35:07Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "a33ae9685681126b60352ba1a44805be21da6074",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +255,259 @@    }\n\n    @SuppressWarnings(\"deprecation\") // Old PAPI. Needs to be migrated.\n    private StatefulProcessorNode<K, ?> getStatefulProcessorNode(final String processorName,\n                                                                 final boolean stateCreated,"
  }
]