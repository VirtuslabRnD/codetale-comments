[
  {
    "id" : "ee1db198-c36c-4919-bff4-7ef459c5ba5a",
    "prId" : 8054,
    "prUrl" : "https://github.com/apache/kafka/pull/8054#pullrequestreview-356975688",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2ef3835-2269-41a4-971f-6fb368791691",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "We're ignoring the passed-in topic so that we can use the same pseudo-topic to (de)serialize the primary key as we do elsewhere. Also because the values in the passed-in topic is _not_ the result of `primaryKeySerializer.serialize(...,data.getPrimaryKey())`, but is rather a bigger data structure that contains that data. So, we can avoid misleading users for whom a schema registry would claim that the subscription topic has a certain schema when in fact it doesn't. Now, it would tell them that the PK pseudo-topic has that schema, which at least can't be inconsistent with data they might observe in Kafka.",
        "createdAt" : "2020-02-07T21:56:27Z",
        "updatedAt" : "2020-02-11T20:47:22Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "3ebcc7e2-20ea-4082-bc62-7e22b68ee29b",
        "parentId" : "f2ef3835-2269-41a4-971f-6fb368791691",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "qq For my own education: what would be the topic name for this subscription topic? For my understanding that topic name is not the same as `primaryKeySerializationPseudoTopic`, but I cannot remember why we decided to do so.",
        "createdAt" : "2020-02-11T17:56:47Z",
        "updatedAt" : "2020-02-11T20:47:22Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "6001ea8d-9ca1-40fb-bbda-392a16968af6",
        "parentId" : "f2ef3835-2269-41a4-971f-6fb368791691",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Hey @guozhangwang , the actual subscription topic name is defined here: https://github.com/apache/kafka/pull/8054/files#diff-05872eec0e2733128854406f87979013R959\r\n```\r\nfinal String subscriptionTopicName = renamed.suffixWithOrElseGet(\"-subscription-registration\", builder, SUBSCRIPTION_REGISTRATION) + TOPIC_SUFFIX;\r\n```\r\n\r\nThe reason we're not using that topic name for the \"primary key\" (which is actually part of the _value_ here) is what I explained above. I see that my statement wasn't super clear, though...\r\n1. we're already using that pseudo-topic for the primary key in the CombinedKeySchema, so we can avoid proliferating schemas we're registering\r\n2. using the subscription topic would mean that we register the primary key as the \"value serde\" of the subscription topic, but the values in the topic are actually SubscriptionWrappers, not primary keys. So it would actually be misleading to use the subscription topic for this purpose. At least for the pseudo-topic, it doesn't actually exist in the brokers, so it's not possible to have an inconsistency between the registered serde and the log data.\r\n\r\nThe actual data in the subscription topic is like:\r\n```\r\nkey: foreign key; value: subscription-wrapper (contains the primary-key)\r\n```",
        "createdAt" : "2020-02-11T20:36:46Z",
        "updatedAt" : "2020-02-11T20:47:22Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "0e0feed4c2e6d2bce99962d332fa5516970aad69",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +69,73 @@\n        @Override\n        public byte[] serialize(final String ignored, final SubscriptionWrapper<K> data) {\n            //{1-bit-isHashNull}{7-bits-version}{1-byte-instruction}{Optional-16-byte-Hash}{PK-serialized}\n"
  },
  {
    "id" : "36f3e0cc-c9b0-4ff2-a333-4ec2e9b584ea",
    "prId" : 8574,
    "prUrl" : "https://github.com/apache/kafka/pull/8574#pullrequestreview-402008114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a880fa3-e6f4-4d91-84bf-67d25309501a",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This (and below) is a bit awkward.\r\n\r\nOur requirement is not to call the supplier until after the app starts, but we can call it any time after the app starts.\r\n\r\nThe natural place would be in `configure`, but unfortunately, that method is basically useless for our internal serdes. The reason is that we previously decided that `configure` should be called externally to the DSL, but our internal serdes are constructed _internal_ to the DSL. Plus, `configure` must be called at run time (when the config is available), but by run time, we can no longer tell whether our serde is \"internal\" or not. So, there's no good place where we can call `configure` for our internal serdes.\r\n\r\nI'm side-stepping the problem here by just invoking the supplier when we first need to use it, which is also at run time.",
        "createdAt" : "2020-04-28T16:43:27Z",
        "updatedAt" : "2020-04-28T16:52:54Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea21699024ea74196d96e416751ba49b77ca074d",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +81,85 @@            if (primaryKeySerializationPseudoTopic == null) {\n                primaryKeySerializationPseudoTopic = primaryKeySerializationPseudoTopicSupplier.get();\n            }\n\n            final byte[] primaryKeySerializedData = primaryKeySerializer.serialize("
  },
  {
    "id" : "de1929ab-43f1-46c1-982a-5fa39603c6ae",
    "prId" : 8764,
    "prUrl" : "https://github.com/apache/kafka/pull/8764#pullrequestreview-422178723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7911f0d8-b3b9-4e7f-9127-dbac0c76804f",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "@guozhangwang , this (and L128) is the \"actual fix\". Previously, the actual default serde we would pass in was the value serde (in SinkNode/SourceNode), but this one particular serde needs the key serde. If you look at the other serdes that changed in this diff, you'll note that they all actually do need the value serde. Only this one is different.",
        "createdAt" : "2020-06-01T20:59:49Z",
        "updatedAt" : "2020-06-09T16:28:55Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "7e03fe21-157f-4517-a150-cd80d7664ffe",
        "parentId" : "7911f0d8-b3b9-4e7f-9127-dbac0c76804f",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Oh, hah. Looks like you beat me to it, @bellemare  :) ",
        "createdAt" : "2020-06-01T21:00:56Z",
        "updatedAt" : "2020-06-09T16:28:55Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "e47f1948d6e43857ce87a6207c78eb0e363152fe",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +66,70 @@        public void setIfUnset(final Serializer<K> defaultKeySerializer, final Serializer<Void> defaultValueSerializer) {\n            if (primaryKeySerializer == null) {\n                primaryKeySerializer = Objects.requireNonNull(defaultKeySerializer);\n            }\n        }"
  }
]