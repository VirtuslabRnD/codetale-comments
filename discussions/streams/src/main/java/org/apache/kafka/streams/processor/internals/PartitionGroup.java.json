[
  {
    "id" : "8d4bc48e-bb26-4214-bf54-ed6e2ba45ba9",
    "prId" : 5218,
    "prUrl" : "https://github.com/apache/kafka/pull/5218#pullrequestreview-130905488",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bc55e8d-e805-4ef9-8b0d-6df6c0962658",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "We could further optimize this computation by maintaining the queues in sorted order by their timestamp. Then, we would only ever have to look at the first queue in the sorted collection to find the new stream time.\r\n\r\nHowever, this requires more bookkeeping during put and poll, so I'd like to avoid it for now. We can make this optimization if this method is a bottleneck (but I doubt it will be).",
        "createdAt" : "2018-06-21T16:55:41Z",
        "updatedAt" : "2018-06-22T17:11:47Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "e58d9726a7d7d1331ac7dac3ff65c4444c5a1bbc",
    "line" : 116,
    "diffHunk" : "@@ -1,1 +146,150 @@            }\n        }\n        this.streamTime = timestamp;\n    }\n"
  },
  {
    "id" : "61afcbfb-1d70-4f07-85c0-f0a7da423b9b",
    "prId" : 5398,
    "prUrl" : "https://github.com/apache/kafka/pull/5398#pullrequestreview-142507690",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ed28a2c-3780-46bb-92b2-9b853b77c235",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Although this is pre-existing, on `close` do we want to clear `nonEmptyQueuesByTime` as well?",
        "createdAt" : "2018-07-27T20:36:50Z",
        "updatedAt" : "2018-08-02T22:06:29Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "cc016900-08ad-4c8e-b289-11c6562d2c42",
        "parentId" : "8ed28a2c-3780-46bb-92b2-9b853b77c235",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "@bbejeck We call `clear()` in `closeTopology` and `close()` in `closeSuspended`, i.e. the `nonEmptyQueuesByTime` should already be cleared when `close()` is called. But I agree with you that to to be on the safer side we can always just call clear() inside close(). Does that sound good to you?",
        "createdAt" : "2018-08-01T18:32:52Z",
        "updatedAt" : "2018-08-02T22:06:29Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c57cec79fa53032b55dd7a5f374c9ee62c25098",
    "line" : 114,
    "diffHunk" : "@@ -1,1 +166,170 @@    }\n\n    public void close() {\n        clear();\n        partitionQueues.clear();"
  },
  {
    "id" : "d5a24539-329e-4c14-b8fc-6972b641902d",
    "prId" : 5742,
    "prUrl" : "https://github.com/apache/kafka/pull/5742#pullrequestreview-163593993",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05adafc7-196d-4e20-894a-d88f84f481de",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "So, to return to @bbejeck 's concern... This metric gets updated once for every record we process. This may be less frequent than for every record in every call to a window aggregator, but it's still pretty darn frequent.\r\n\r\nShould I make it DEBUG-level until KAFKA-7275 is done?",
        "createdAt" : "2018-10-05T22:36:41Z",
        "updatedAt" : "2018-10-11T21:06:03Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "a25ea0f5-d822-44ee-8905-9021bd791f6a",
        "parentId" : "05adafc7-196d-4e20-894a-d88f84f481de",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I'm +1 on keeping both `dropped` and `lateness` sensors DEBUG for now.",
        "createdAt" : "2018-10-05T22:46:05Z",
        "updatedAt" : "2018-10-11T21:06:03Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "0daf86b2-ff6a-4671-9f87-2675190e36e3",
        "parentId" : "05adafc7-196d-4e20-894a-d88f84f481de",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "The `dropped` metric was pre-existing (was `skipped-records` before). It has been at INFO level since 1.1 or 1.2. I think we should leave it at INFO. (The prior justification for this was that it should be abnormal to be dropping records, and it would probably be nice to know by default.)\r\n\r\nI have made `lateness` a DEBUG metric, though.",
        "createdAt" : "2018-10-08T16:38:18Z",
        "updatedAt" : "2018-10-11T21:06:03Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "abbe5c20-928f-4efb-b776-2f3f3f2cc162",
        "parentId" : "05adafc7-196d-4e20-894a-d88f84f481de",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "makes sense to me, +1 on making `lateness` DEBUG",
        "createdAt" : "2018-10-10T22:57:24Z",
        "updatedAt" : "2018-10-11T21:06:03Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "51c80eb6ad182197f8e09839b617db13053938ea",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +104,108 @@                } else {\n                    recordLatenessSensor.record(streamTime - record.timestamp);\n                }\n            }\n        }"
  },
  {
    "id" : "49961a44-57b0-4957-9e90-1f6254beab3d",
    "prId" : 7054,
    "prUrl" : "https://github.com/apache/kafka/pull/7054#pullrequestreview-260891628",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2aa9e163-4f8f-4b25-9255-e2232ecf9f39",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Maybe we should change \"stream-time\" to \"task-time\" ? @vvcephei suggested it (and I like it) in an in-person discussion? If we agree, also the corresponding variable and method names should be updated. Thoughts?\r\n\r\nShould it be \"stream-time\" or \"stream time\" ?",
        "createdAt" : "2019-07-11T06:27:43Z",
        "updatedAt" : "2019-07-16T21:19:04Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "ad0dd29d-8b7b-436e-9e25-05966c2921bd",
        "parentId" : "2aa9e163-4f8f-4b25-9255-e2232ecf9f39",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "I support \"task-time\" -- would be good to distinguish from \"stream time\" should we ever want/need a \"global\" stream time. That said, we use stream time all over including things like PunctuationType. Will it be confusing to have `maybePuncuateStreamTime()` punctuate on something called task-time? Though we already refer to it separately as \"partition group timestamp\", \"stream partition time\", AND \"stream time\" in that method..\r\n\r\nRegarding \"stream-time\" vs \"stream time\" -- we use the hyphen when referring to types of time semantics (eg event-time) so I'd favor \"stream time\" to maintain a distinction between \"semantics types\" and \"time definitions\" -- WDYT?",
        "createdAt" : "2019-07-11T18:51:14Z",
        "updatedAt" : "2019-07-16T21:19:04Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "c85c5cca-ff8b-49dd-b2d3-5c692d60b6fe",
        "parentId" : "2aa9e163-4f8f-4b25-9255-e2232ecf9f39",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "On the other hand, maybe phrases like \"lowest task time\" might be ambiguous (what does \"lowest task\" mean and why do we care about its time?) so I'm good with task-time.\r\n\r\n",
        "createdAt" : "2019-07-11T18:52:58Z",
        "updatedAt" : "2019-07-16T21:19:04Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "22f6f09267c53eef83b87ffb379358ff1d866de5",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +40,44 @@ * yet observed at the head of that topic-partition.\n *\n * PartitionGroup also maintains a stream-time for the group as a whole.\n * This is defined as the highest timestamp of any record yet polled from the PartitionGroup.\n * Note however that any computation that depends on stream-time should track it on a per-operator basis to obtain an"
  },
  {
    "id" : "26ac3e03-3dca-4668-accc-9de4a562f1fe",
    "prId" : 7054,
    "prUrl" : "https://github.com/apache/kafka/pull/7054#pullrequestreview-263898711",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d69d9ea2-b7da-49f9-95c8-99a8e4d97d1e",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Should we rename this this `taskTime()`? (Just a thought).",
        "createdAt" : "2019-07-16T21:59:52Z",
        "updatedAt" : "2019-07-16T21:59:52Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "de2da6d9-c582-4a68-acd7-72cedaec6aba",
        "parentId" : "d69d9ea2-b7da-49f9-95c8-99a8e4d97d1e",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "I'm in favor of that in theory -- but, then do we also rename `maybePuncuateStreamTime` ? Do we also deprecate `PunctuationType.STREAM_TIME` in favor of `PunctuationType.TASK_TIME`? Task time does seem more appropriate but I'm hesitant to mix terminology ...",
        "createdAt" : "2019-07-17T18:14:49Z",
        "updatedAt" : "2019-07-17T18:14:49Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "d66c4107-49ab-42a5-b613-9dd5d5bc1acb",
        "parentId" : "d69d9ea2-b7da-49f9-95c8-99a8e4d97d1e",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Let's just keep it as `streamTime` for now.",
        "createdAt" : "2019-07-18T20:47:08Z",
        "updatedAt" : "2019-07-18T20:53:45Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "22f6f09267c53eef83b87ffb379358ff1d866de5",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +160,164 @@     * Return the stream-time of this partition group defined as the largest timestamp seen across all partitions\n     */\n    public long streamTime() {\n        return streamTime;\n    }"
  },
  {
    "id" : "265d70d3-923c-416f-8045-81dd33a2e9cd",
    "prId" : 8040,
    "prUrl" : "https://github.com/apache/kafka/pull/8040#pullrequestreview-353413020",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a00d1c8-c2c6-46b5-ada4-ca99c524a3ee",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Some additional side cleanup",
        "createdAt" : "2020-02-05T01:17:59Z",
        "updatedAt" : "2020-02-11T03:10:50Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "944fe8ec3720a43d895669f340184d025c880708",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +59,63 @@    private boolean allBuffered;\n\n    static class RecordInfo {\n        RecordQueue queue;\n"
  },
  {
    "id" : "9b54c23d-3f73-437b-9f4d-dacd1dfff2a3",
    "prId" : 8040,
    "prUrl" : "https://github.com/apache/kafka/pull/8040#pullrequestreview-353413174",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "31a050f2-1124-431c-9f4c-fc6d19255696",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "This new method is add for the fix",
        "createdAt" : "2020-02-05T01:18:28Z",
        "updatedAt" : "2020-02-11T03:10:50Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "944fe8ec3720a43d895669f340184d025c880708",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +190,194 @@    }\n\n    Long headRecordOffset(final TopicPartition partition) {\n        final RecordQueue recordQueue = partitionQueues.get(partition);\n"
  },
  {
    "id" : "6efa36cf-d8cc-44f7-a5e9-5904bab142da",
    "prId" : 8040,
    "prUrl" : "https://github.com/apache/kafka/pull/8040#pullrequestreview-353415896",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "71c6eea9-2049-4f42-90b1-7539650d5d31",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "This was actually detected by the improved tests... Minor side fix.",
        "createdAt" : "2020-02-05T01:27:15Z",
        "updatedAt" : "2020-02-11T03:10:50Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "944fe8ec3720a43d895669f340184d025c880708",
    "line" : 110,
    "diffHunk" : "@@ -1,1 +229,233 @@        nonEmptyQueuesByTime.clear();\n        streamTime = RecordQueue.UNKNOWN;\n        totalBuffered = 0;\n        for (final RecordQueue queue : partitionQueues.values()) {\n            queue.clear();"
  },
  {
    "id" : "0b6fd8af-66a0-4a7b-adc2-cf014adea453",
    "prId" : 8168,
    "prUrl" : "https://github.com/apache/kafka/pull/8168#pullrequestreview-370731038",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "929eb90f-82e7-4bfd-b5d7-18b7e94cf75d",
        "parentId" : null,
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "@guozhangwang we should also reset the `partitionTime` for the `RecordQueue`s in `#clear`?",
        "createdAt" : "2020-02-25T23:33:03Z",
        "updatedAt" : "2020-02-26T21:14:18Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "dd166cc6-310e-4019-8f39-95a4362733a8",
        "parentId" : "929eb90f-82e7-4bfd-b5d7-18b7e94cf75d",
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "I think that's legitimate",
        "createdAt" : "2020-02-26T00:11:44Z",
        "updatedAt" : "2020-02-26T21:14:18Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "f4869cd2-99b5-44b7-80cf-fac9d5671bd4",
        "parentId" : "929eb90f-82e7-4bfd-b5d7-18b7e94cf75d",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "`clear` is also called in `suspend` in which we should not clear the partitionTime, but I think we should reset the `partitionTime` in close.",
        "createdAt" : "2020-02-26T00:13:25Z",
        "updatedAt" : "2020-02-26T21:14:18Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "8bc7f8e6-761f-4023-96cf-86962da4f293",
        "parentId" : "929eb90f-82e7-4bfd-b5d7-18b7e94cf75d",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Sorry for the late comment as the PR is already merbe, but if we don't clean the `partitionQueues`, why would we need to reset `streamTime` or `partitionTime` ? I we keep all records in the buffer all know times stay valid, don't they?",
        "createdAt" : "2020-03-07T07:57:02Z",
        "updatedAt" : "2020-03-07T07:57:02Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "365504ef-41d4-4781-a46f-57f259247e06",
        "parentId" : "929eb90f-82e7-4bfd-b5d7-18b7e94cf75d",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Similar to resetting `partitionTime`, we should also reset `streamTime` in `PartitionsGroup#clear()` below though?",
        "createdAt" : "2020-03-07T07:58:35Z",
        "updatedAt" : "2020-03-07T07:58:35Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "030eeb71-6da8-4bc3-8cae-c0e3abdc9740",
        "parentId" : "929eb90f-82e7-4bfd-b5d7-18b7e94cf75d",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Opened a minor PR: https://github.com/apache/kafka/pull/8250 (let me know what you think)",
        "createdAt" : "2020-03-07T08:12:24Z",
        "updatedAt" : "2020-03-07T08:12:25Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "ea279ee39dba399cddc5fce9837b4272b3ca5a36",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +222,226 @@        clear();\n\n        streamTime = RecordQueue.UNKNOWN;\n    }\n"
  },
  {
    "id" : "a24d940d-0bfe-4aad-94ee-93551cedd2bf",
    "prId" : 8221,
    "prUrl" : "https://github.com/apache/kafka/pull/8221#pullrequestreview-413432511",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2e7449f6-08d9-4081-979f-18bfcf7ca76d",
        "parentId" : null,
        "authorId" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "body" : "nit: allBuffered &= newInputPartitions.isEmpty();",
        "createdAt" : "2020-05-18T06:03:10Z",
        "updatedAt" : "2020-05-26T16:32:00Z",
        "lastEditedBy" : "3dfe0270-df82-43af-827f-0681ce1c6ad9",
        "tags" : [
        ]
      },
      {
        "id" : "788b36e2-4293-4a16-a2d2-4fbf97d4ae72",
        "parentId" : "2e7449f6-08d9-4081-979f-18bfcf7ca76d",
        "authorId" : "889d8126-0663-4a3e-8712-81869bada9e0",
        "body" : "fixed",
        "createdAt" : "2020-05-18T09:41:14Z",
        "updatedAt" : "2020-05-26T16:32:00Z",
        "lastEditedBy" : "889d8126-0663-4a3e-8712-81869bada9e0",
        "tags" : [
        ]
      }
    ],
    "commit" : "dc85a4694d663ad13d75681d28398d4b61a4f482",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +116,120 @@        }\n        nonEmptyQueuesByTime.removeIf(q -> removedPartitions.contains(q.partition()));\n        allBuffered = allBuffered && newInputPartitions.isEmpty();\n    }\n"
  },
  {
    "id" : "ccc09d47-f733-4d4a-acf9-e9e7171500ee",
    "prId" : 9840,
    "prUrl" : "https://github.com/apache/kafka/pull/9840#pullrequestreview-573598984",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e4c2039-d9d6-4676-8135-be771010bbdf",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Should we log INFO if we are indeed enforcing processing? I.e. there are some empty partitions.",
        "createdAt" : "2021-01-21T01:42:12Z",
        "updatedAt" : "2021-01-28T00:19:52Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "5e4d680e-f712-4513-b7e0-aa5523541127",
        "parentId" : "5e4c2039-d9d6-4676-8135-be771010bbdf",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Actually on a second thought.. if users configures `-1` it means they probably do not care about enforced processing, while on the other side the INFO entry may flood the logs here. So NVM.",
        "createdAt" : "2021-01-21T17:17:37Z",
        "updatedAt" : "2021-01-28T00:19:52Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "368d5e37-6e55-4260-bed3-aedec88e4a21",
        "parentId" : "5e4c2039-d9d6-4676-8135-be771010bbdf",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Glad we agree ;) ",
        "createdAt" : "2021-01-21T18:04:25Z",
        "updatedAt" : "2021-01-28T00:19:52Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc1afd02eae2120b4bc557cec69b9044625c5b33",
    "line" : 108,
    "diffHunk" : "@@ -1,1 +147,151 @@                          emptyPartitions);\n            }\n            return true;\n        }\n"
  },
  {
    "id" : "d00e443f-615b-4080-b6db-5237a98279a7",
    "prId" : 9840,
    "prUrl" : "https://github.com/apache/kafka/pull/9840#pullrequestreview-575694808",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bab2907d-cae1-4683-9772-f279f6eb5271",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I'm +1 on demoting these log entries! :)",
        "createdAt" : "2021-01-25T18:33:38Z",
        "updatedAt" : "2021-01-28T00:19:52Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc1afd02eae2120b4bc557cec69b9044625c5b33",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +124,128 @@        }\n        // Log-level strategy:\n        //  TRACE for messages that don't wait for fetches\n        //  TRACE when we waited for a fetch and decided to wait some more, as configured\n        //  TRACE when we are ready for processing and didn't have to enforce processing"
  }
]