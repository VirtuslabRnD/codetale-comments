[
  {
    "id" : "83a528b1-fe85-4d12-a3ac-5cb862d38870",
    "prId" : 5527,
    "prUrl" : "https://github.com/apache/kafka/pull/5527#pullrequestreview-281592147",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d1a8166d-4bba-4ce3-b600-e078a59e9455",
        "parentId" : null,
        "authorId" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "body" : "Curious: is there any functional change by moving this code?",
        "createdAt" : "2019-08-28T22:42:21Z",
        "updatedAt" : "2019-10-02T17:56:32Z",
        "lastEditedBy" : "12543f19-3885-429e-8f77-e0f748c56d1f",
        "tags" : [
        ]
      },
      {
        "id" : "c480530f-1165-4219-9eca-870f2cc94d45",
        "parentId" : "d1a8166d-4bba-4ce3-b600-e078a59e9455",
        "authorId" : "d8d11f3d-4fbd-4882-a206-bfece798cdcd",
        "body" : "There was at one point - I believe I was using the storebuilder to build the store, then I had to connect it afterwards. It would throw an exception if I tried to connect a store that was not built yet. The work that John R did to fix up the topology seems to have remedied it, so I'll revert the order back to the original order.",
        "createdAt" : "2019-08-29T16:53:53Z",
        "updatedAt" : "2019-10-02T17:56:32Z",
        "lastEditedBy" : "d8d11f3d-4fbd-4882-a206-bfece798cdcd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6e1b6a1a41c8e05ff009ad988b705baeb42800ad",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +96,100 @@            topologyBuilder.addStateStore(storeBuilder, processorName);\n        }\n\n    }\n}"
  },
  {
    "id" : "68acbb7f-29e1-400b-a3b7-4ba463f6ee74",
    "prId" : 5740,
    "prUrl" : "https://github.com/apache/kafka/pull/5740#pullrequestreview-161728682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3450793d-fd19-429d-9db8-cfadf879d781",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This is the core change. Instead of having one constructor and a contract that callers should specify *either* names *or* a store builder and set the other to `null` is confusing. Instead, we'll have two constructors, one for names and the other for the store builder.",
        "createdAt" : "2018-10-04T17:38:12Z",
        "updatedAt" : "2018-10-05T14:21:44Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e22de672c264ede614fa46d33bf55a4b80c7fca",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +60,64 @@              repartitionRequired);\n\n        this.storeNames = null;\n        this.storeBuilder = materializedKTableStoreBuilder;\n    }"
  },
  {
    "id" : "f652abd6-8f7e-4ecc-8674-86b9c93e7487",
    "prId" : 5740,
    "prUrl" : "https://github.com/apache/kafka/pull/5740#pullrequestreview-161784077",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5c396ce4-9444-441f-a696-9dc485befc06",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "I agree having two separate constructors clears usage of `StatefulProcessorNode` up.  \r\n\r\nMaybe we could add some Javadoc comments that the constructor taking the `StateStore` parameter is for stateful operations that create a state store.  \r\nAnd the constructor taking `storeNames` is for stateful DSL methods `process`, `transform` and the other transform variants where the state store is already created (with a `StreamsBuilder.addStateStore` call) , and we pass in the names so the `Processor` can access the stores.",
        "createdAt" : "2018-10-04T19:56:11Z",
        "updatedAt" : "2018-10-05T14:21:44Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e22de672c264ede614fa46d33bf55a4b80c7fca",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +52,56 @@     * where the store needs to be built and registered as part of building this node.\n     */\n    public StatefulProcessorNode(final String nodeName,\n                                 final ProcessorParameters<K, V> processorParameters,\n                                 final StoreBuilder<? extends StateStore> materializedKTableStoreBuilder,"
  },
  {
    "id" : "3c9d22f0-6839-4fb0-895c-eea3ecc0d029",
    "prId" : 5741,
    "prUrl" : "https://github.com/apache/kafka/pull/5741#pullrequestreview-161794232",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "161ce679-6c73-4d25-9eab-5c25dd5a9030",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Good catch!",
        "createdAt" : "2018-10-04T20:23:49Z",
        "updatedAt" : "2018-10-04T21:38:59Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "79ded18384601459c38b700fc2d157e1f92704af",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +76,80 @@    public static final class StatefulProcessorNodeBuilder<K, V> {\n\n        private ProcessorParameters<K, V> processorSupplier;\n        private String nodeName;\n        private boolean repartitionRequired;"
  },
  {
    "id" : "3e5206d6-85ec-4a5b-8d8d-bef546bd4b5f",
    "prId" : 9221,
    "prUrl" : "https://github.com/apache/kafka/pull/9221#pullrequestreview-475089291",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6ba06670-dad9-4c6f-94cc-a6b25baaaee0",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This is kind of horrible, but it'll be gone soon enough.",
        "createdAt" : "2020-08-26T01:46:11Z",
        "updatedAt" : "2020-09-09T17:34:57Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "c37687893a08e3bb056f99cc9927a5c679f80d5d",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +100,104 @@        }\n\n        // temporary hack until KIP-478 is fully implemented\n        final org.apache.kafka.streams.processor.ProcessorSupplier<K, V> oldProcessorSupplier =\n            processorParameters().oldProcessorSupplier();"
  },
  {
    "id" : "57c48a89-3e90-4e35-868d-9ac1f17e12cf",
    "prId" : 9221,
    "prUrl" : "https://github.com/apache/kafka/pull/9221#pullrequestreview-485198618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9168d93d-6b46-48ed-b916-44ee06d015a0",
        "parentId" : null,
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "Could this cause a problem with lines 96-99 above? I could be missing something, but it looks like we could be attempting to add the same stores twice, which _**I think**_  will result in a runtime error building the topology.",
        "createdAt" : "2020-09-09T15:12:22Z",
        "updatedAt" : "2020-09-09T17:34:57Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      },
      {
        "id" : "83a0d544-6087-45c9-b802-33371cb158fd",
        "parentId" : "9168d93d-6b46-48ed-b916-44ee06d015a0",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "It definitely looks that way, but I've just double-checked, and I think it's safe. The thing is that only a subclass of ProcessorSupplier (either the new or old one) could override the ConnectedStoreProvider#stores method. Unlike Processor and ProcessorContext, we haven't added adapters for ProcessorSupplier that could delegate the `stores` method from the new API to the old one, so only a proper direct instantiation of the new API ProcessorSupplier could return a non-null result from `processorSupplier.stores()` on L96. Likewise, `oldProcessorSupplier` is only non-null itself when the provided processor is _only_ an old-api processorSupplier.\r\n\r\nSo, it seems like either L96-99 will add stores or L102-109 will (or neither), but never both. Does that reasoning seem legit to you?",
        "createdAt" : "2020-09-09T16:18:46Z",
        "updatedAt" : "2020-09-09T17:34:57Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "2f1238c9-d117-4155-a892-eae3c647f4bc",
        "parentId" : "9168d93d-6b46-48ed-b916-44ee06d015a0",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "That makes sense to me, thanks for the explanation.",
        "createdAt" : "2020-09-09T16:32:42Z",
        "updatedAt" : "2020-09-09T17:34:57Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "c37687893a08e3bb056f99cc9927a5c679f80d5d",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +108,112 @@            }\n        }\n\n    }\n}"
  }
]