[
  {
    "id" : "94ad08f7-0737-43ea-8c33-7b1ddf16e357",
    "prId" : 6697,
    "prUrl" : "https://github.com/apache/kafka/pull/6697#pullrequestreview-235318182",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb9a5523-7a67-4c73-8a88-1f75ca4ebf8d",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "Are there plans to remove the default implementation in the next major release?",
        "createdAt" : "2019-05-08T11:29:00Z",
        "updatedAt" : "2019-05-09T18:35:57Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "fb1ca321-42db-4981-a48d-a314f0cd0607",
        "parentId" : "fb9a5523-7a67-4c73-8a88-1f75ca4ebf8d",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "That's a tricky question... The problem is that there's no way to signal ahead of time that you *should* override the method to avoid breakage when we remove `default` (unlike when you deprecate a method, which indicates you should make a change ahead of the breakage).\r\n\r\nSo, whenever we do make the change, it will be a breaking one.\r\n\r\nIf we think it's very likely that implementers would have some objects that need to be closed, and thus are leaking memory today, maybe we should actually just not default it at all, so they fix their memory leaks asap.\r\n\r\nConversely, if we think it's unlikely that the average implementer is going to leak memory, there's no reason we shouldn't just leave it defaulted forever.",
        "createdAt" : "2019-05-08T14:47:07Z",
        "updatedAt" : "2019-05-09T18:35:57Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "78e0a4fd-1a37-4f23-8e46-9efc481335d6",
        "parentId" : "fb9a5523-7a67-4c73-8a88-1f75ca4ebf8d",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "We need the default implementation in any case until the next major release not to break existing code. Afterwards, I would be in favour of removing the default implementation, because then there is a bigger chance that existing memory leakages are found and future leakages are avoided.   ",
        "createdAt" : "2019-05-08T14:58:12Z",
        "updatedAt" : "2019-05-09T18:35:57Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "00fd1869-2163-44b6-b086-3aff90c693cc",
        "parentId" : "fb9a5523-7a67-4c73-8a88-1f75ca4ebf8d",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Hm. On the one hand I'd guess not that many users **in total** are leaking memory here, but suspect that those who are advanced enough to be implementing ConfigSetter may likely be... \r\n\r\nI'd agree we should remove the default in the next major release though, especially once we upgrade Rocks as some of the API changes since our current version effectively force creating more/new RocksObjects when setting options.",
        "createdAt" : "2019-05-08T20:14:53Z",
        "updatedAt" : "2019-05-09T18:35:57Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      },
      {
        "id" : "57260fd0-bef7-445e-a68f-84ff25efbb17",
        "parentId" : "fb9a5523-7a67-4c73-8a88-1f75ca4ebf8d",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Might be worth to add a WARN log in the default implementation, telling users, that the default will be removed in 3.0.0 and they should overwrite it?",
        "createdAt" : "2019-05-08T22:06:16Z",
        "updatedAt" : "2019-05-09T18:35:57Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "af7d1845-ba57-43a9-b742-76034322aaa5",
        "parentId" : "fb9a5523-7a67-4c73-8a88-1f75ca4ebf8d",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Good call",
        "createdAt" : "2019-05-08T22:14:25Z",
        "updatedAt" : "2019-05-09T18:35:57Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "02779ae9b63eca4bc9f09b249e33a3156ba21bd9",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +57,61 @@     * @param options       the RocksDB options\n     */\n    default void close(final String storeName, final Options options) {\n        LOG.warn(\"The default close will be removed in 3.0.0 -- you should overwrite it if you have implemented RocksDBConfigSetter\");\n    }"
  },
  {
    "id" : "bda974ea-e4ae-4531-8e4d-3f333b8f8e0b",
    "prId" : 6697,
    "prUrl" : "https://github.com/apache/kafka/pull/6697#pullrequestreview-235265360",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "788df347-2696-42d2-8c45-dc7e94338392",
        "parentId" : null,
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "Could you add a short one line description that will be shown in the Method Summary section of the JavaDocs?",
        "createdAt" : "2019-05-08T11:44:28Z",
        "updatedAt" : "2019-05-09T18:35:57Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      },
      {
        "id" : "25c5be5d-e948-482f-82b7-cb1d936e147b",
        "parentId" : "788df347-2696-42d2-8c45-dc7e94338392",
        "authorId" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "body" : "Ack",
        "createdAt" : "2019-05-08T20:07:17Z",
        "updatedAt" : "2019-05-09T18:35:57Z",
        "lastEditedBy" : "d97f50bf-60f9-45b3-81a0-a24a5f42f740",
        "tags" : [
        ]
      }
    ],
    "commit" : "02779ae9b63eca4bc9f09b249e33a3156ba21bd9",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +44,48 @@    void setConfig(final String storeName, final Options options, final Map<String, Object> configs);\n\n    /**\n     * Close any user-constructed objects that inherit from {@code org.rocksdb.RocksObject}.\n     * <p>"
  },
  {
    "id" : "aa5d7f97-1240-4ef7-a2c3-be2fb0d47adc",
    "prId" : 6697,
    "prUrl" : "https://github.com/apache/kafka/pull/6697#pullrequestreview-235313262",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "28c17698-ca30-4a05-ab9a-5b9b57025684",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "nit: as above, use `@link`",
        "createdAt" : "2019-05-08T22:01:37Z",
        "updatedAt" : "2019-05-09T18:35:57Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "02779ae9b63eca4bc9f09b249e33a3156ba21bd9",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +52,56 @@     * back from {@code options} using its getter methods.\n     * <p>\n     * Example objects needing to be closed include {@code org.rocksdb.Filter} and {@code org.rocksdb.Cache}.\n     *\n     * @param storeName     the name of the store being configured"
  }
]