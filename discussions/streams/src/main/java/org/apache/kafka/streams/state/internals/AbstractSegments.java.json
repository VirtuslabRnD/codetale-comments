[
  {
    "id" : "33585533-cbe5-4002-bd15-6d3c38d1d96b",
    "prId" : 6170,
    "prUrl" : "https://github.com/apache/kafka/pull/6170#pullrequestreview-195654634",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7f6560d9-21d9-4c56-84f0-79f9cc4189e9",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Thanks to the flat package structure, this change actually exposes these fields to 66 other classes, all of our other internal state-related code. This is actually pretty risky, since `segments` in particular is mutable.\r\n\r\nYour intent is to broaden the scope to only the subclasses, but Java has no visibility modifier to do that. (`protected` seems to be the one, but its visibility is actually broader than package-protected)\r\n\r\nTo enforce the desired visibility restriction, we would have to create a new package, `org.apache.kafka.streams.state.internals.segments`, and locate the abstract class and both implementations in it. Then the fields would be visible only to the implementing classes, as desired.\r\n\r\nPersonally, I think the mutable `segments` field justifies this, as future internal state-store code changes might accidentally think it's ok to touch `segments`, directly, leading to subtle bugs.",
        "createdAt" : "2019-01-21T20:10:13Z",
        "updatedAt" : "2019-01-25T17:41:55Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "4160b581-16a5-4da3-ac9e-dcbe4d80ff19",
        "parentId" : "7f6560d9-21d9-4c56-84f0-79f9cc4189e9",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I don't see this danger. Note, that all changes must be approved by a committer and thus, I am sure this would be caught (it's not a project for which somebody will limited knowledge can easily push changes). If you insist on a different package structure I am also fine with it, even if I don't see a bid advantage introducing many small packages.\r\n\r\n\\cc @guozhangwang ",
        "createdAt" : "2019-01-22T00:39:52Z",
        "updatedAt" : "2019-01-25T17:41:55Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "d2fe16b8-b006-4953-aba0-70024a68e3a0",
        "parentId" : "7f6560d9-21d9-4c56-84f0-79f9cc4189e9",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "In general, there may not be a big advantage to many small packages, but in this particular case, it happens to be the only way to safely protect what is intended to be private state.\r\n\r\nPersonally, I wouldn't lean too heavily on the eternal vigilence of reviewers to catch subtle bugs when there's an easy way to prevent them structurally. I certainly wouldn't trust _myself_ to just remember that this field, although it's made accessible to the whole package, is actually supposed to be used only by subclasses. In two years' time, I think I would just assume it's supposed to be accessible, since _that's what the code says_.\r\n\r\nAlso curious what @guozhangwang and @bbejeck think.",
        "createdAt" : "2019-01-22T17:06:52Z",
        "updatedAt" : "2019-01-25T17:41:55Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "7807967f-e686-4f5f-ba1a-2f04bc2146ee",
        "parentId" : "7f6560d9-21d9-4c56-84f0-79f9cc4189e9",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Ah, I see you already added the interface. This is fine, too! ",
        "createdAt" : "2019-01-22T18:04:21Z",
        "updatedAt" : "2019-01-25T17:41:55Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "b9597b75-51db-4199-8ce2-66c739f939d6",
        "parentId" : "7f6560d9-21d9-4c56-84f0-79f9cc4189e9",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "The current hierarchy looks good to me.",
        "createdAt" : "2019-01-23T17:50:39Z",
        "updatedAt" : "2019-01-25T17:41:55Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "b99f1d6b48fa56018464e5a547cb7c834b261d6c",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +39,43 @@\n    final TreeMap<Long, S> segments = new TreeMap<>();\n    final String name;\n    private final long retentionPeriod;\n    private final long segmentInterval;"
  },
  {
    "id" : "b276e2d6-f293-4dac-b1be-25e1aed3bf42",
    "prId" : 9138,
    "prUrl" : "https://github.com/apache/kafka/pull/9138#pullrequestreview-481338255",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7fd2427-1a82-4207-8932-1a4c11f1481a",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "nit: we can just call `subMap` out of the condition and only call `descendingMap()` based on the condition.",
        "createdAt" : "2020-08-31T23:26:01Z",
        "updatedAt" : "2020-09-02T15:24:52Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "5e7dde62-e9bb-42b1-985e-57c61dc200b7",
        "parentId" : "c7fd2427-1a82-4207-8932-1a4c11f1481a",
        "authorId" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "body" : "I'd prefer this immutable approach as it's the same used in keyValueStore changes, if that's ok. ",
        "createdAt" : "2020-09-02T09:26:12Z",
        "updatedAt" : "2020-09-02T15:24:52Z",
        "lastEditedBy" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "tags" : [
        ]
      },
      {
        "id" : "84a7b87c-c55b-4423-9fcf-0fb4b6acfab6",
        "parentId" : "c7fd2427-1a82-4207-8932-1a4c11f1481a",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "SG, `nit` comments are just suggestions not mandatory.",
        "createdAt" : "2020-09-02T22:12:55Z",
        "updatedAt" : "2020-09-02T22:12:56Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "273f612bfe98c58c40e77ec8a2d77e5eabdd2f18",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +122,126 @@        final List<S> result = new ArrayList<>();\n        final NavigableMap<Long, S> segmentsInRange;\n        if (forward) {\n            segmentsInRange = segments.subMap(\n                segmentId(timeFrom), true,"
  }
]