[
  {
    "id" : "4fc93334-6313-4add-953d-d99909257e80",
    "prId" : 9221,
    "prUrl" : "https://github.com/apache/kafka/pull/9221#pullrequestreview-475089291",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ba00814-d488-46cf-9d3a-0fdd6e7fa1b7",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Since the new public API change is small, I also converted almost all of the usages of the old API to the new one.",
        "createdAt" : "2020-08-26T01:27:50Z",
        "updatedAt" : "2020-09-09T17:34:57Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "c37687893a08e3bb056f99cc9927a5c679f80d5d",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +146,150 @@    }\n\n    public static class CustomMaxAggregatorSupplier implements ProcessorSupplier<String, Long, String, Long> {\n        @Override\n        public Processor<String, Long, String, Long> get() {"
  },
  {
    "id" : "5b108194-7d6a-4394-b56b-f1d3418841b9",
    "prId" : 9221,
    "prUrl" : "https://github.com/apache/kafka/pull/9221#pullrequestreview-475089291",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a403276a-f4cc-4918-81c8-4822c5302723",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This is a small improvement I noticed; I'll mention this on the KIP discussion if you like it. I've changed the ProcessorContext getStateStore method so that we don't have to cast the store type anymore. The generic parameters to the method take care of casting now.",
        "createdAt" : "2020-08-26T01:31:42Z",
        "updatedAt" : "2020-09-09T17:34:57Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "c37687893a08e3bb056f99cc9927a5c679f80d5d",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +163,167 @@            context.schedule(Duration.ofSeconds(60), PunctuationType.WALL_CLOCK_TIME, time -> flushStore());\n            context.schedule(Duration.ofSeconds(10), PunctuationType.STREAM_TIME, time -> flushStore());\n            store = context.getStateStore(\"aggStore\");\n        }\n"
  },
  {
    "id" : "86ee6bb8-335b-49ec-baf5-2dde7b405cf3",
    "prId" : 9361,
    "prUrl" : "https://github.com/apache/kafka/pull/9361#pullrequestreview-500554881",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b17ecd99-96e6-4490-8513-652c59415ca8",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Since we have to define a timestamp now, I'm showing the use of the punctuation time in the dev guide.",
        "createdAt" : "2020-10-01T17:13:26Z",
        "updatedAt" : "2020-10-02T15:50:27Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8de75f6f16cf8bdcccbcb1bc1fc0a11dd40c1d1",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +179,183 @@            while (it.hasNext()) {\n                final KeyValue<String, Long> next = it.next();\n                context.forward(new Record<>(next.key, next.value, timestamp));\n            }\n        }"
  },
  {
    "id" : "adaae091-d2bc-4eb1-b920-4a37aae00aef",
    "prId" : 9477,
    "prUrl" : "https://github.com/apache/kafka/pull/9477#pullrequestreview-514346986",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b8397e16-9c72-4904-b91e-31cdf8be86c9",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "can be removed?",
        "createdAt" : "2020-10-21T23:00:28Z",
        "updatedAt" : "2020-10-22T04:49:32Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "995da9a2-1bb6-4f0e-887f-fd208ff9b101",
        "parentId" : "b8397e16-9c72-4904-b91e-31cdf8be86c9",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Yeah, you're looking at a state where I had partially applied the suggestion to drop the unnecessary configs. Bootstrap Server is always unnecessary with TTD, but applicationId sometimes winds up being necessary to keep tests from colliding on the state directory. Chasing these down is what got me hung up the first time around, so I think I'll just leave it as-is for now.",
        "createdAt" : "2020-10-22T04:14:23Z",
        "updatedAt" : "2020-10-22T04:49:32Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "2c43e1984692dbb27934471e4c5d90e93f715c67",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +73,77 @@        // setup test driver\n        final Properties props = new Properties();\n        props.setProperty(StreamsConfig.APPLICATION_ID_CONFIG, \"maxAggregation\");\n        props.setProperty(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.setProperty(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Long().getClass().getName());"
  }
]