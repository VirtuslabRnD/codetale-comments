[
  {
    "id" : "405dc11e-4544-427c-ab9f-36b16894acd7",
    "prId" : 3788,
    "prUrl" : "https://github.com/zio/zio/pull/3788#pullrequestreview-430117534",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "155f3ee3-ccf1-41e0-8531-eb6b7b0cac4c",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "üëç ",
        "createdAt" : "2020-06-13T06:14:57Z",
        "updatedAt" : "2020-06-17T08:05:06Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "e09c7161c55f9257780108ad82daa2ad814b67d3",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +746,750 @@   * A sink that executes the provided effectful function for every chunk fed to it.\n   */\n  def foreachChunk[R, E, I](f: Chunk[I] => ZIO[R, E, Any]): ZSink[R, E, I, Nothing, Unit] =\n    ZSink.fromPush[R, E, I, Nothing, Unit] {\n      case Some(is) => f(is).mapError(e => (Left(e), Chunk.empty)) *> Push.more"
  },
  {
    "id" : "5e49006d-a1c3-4a3d-b464-67ee1d669e56",
    "prId" : 3722,
    "prUrl" : "https://github.com/zio/zio/pull/3722#pullrequestreview-424786547",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9939ba4-3d37-4d2d-8ba7-b4c502bc3981",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "```suggestion\r\n\r\n```",
        "createdAt" : "2020-06-04T20:15:50Z",
        "updatedAt" : "2020-06-06T18:12:38Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff46c57d37dca97542e467d2d6c80ae0cce80ee8",
    "line" : 337,
    "diffHunk" : "@@ -1,1 +234,238 @@                    } else {\n                      go(Some(leftover).asInstanceOf[Option[Chunk[I]]]).map(more => Chunk.single(z) ++ more)\n                    }\n                  }\n              },"
  },
  {
    "id" : "279bbe7e-0cfe-47ea-9392-97a055c665fd",
    "prId" : 3722,
    "prUrl" : "https://github.com/zio/zio/pull/3722#pullrequestreview-425723921",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "85da2cc3-e7b6-4393-bf5a-dde8171ad46a",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "This is a weak spot. We have no contract that says that a transducer cannot be called after failing (and we shouldn't have such a contract). That means we're dropping leftovers inputs after failing.\r\n\r\nHow about placing these leftovers in a `Ref` that will be read on every push?",
        "createdAt" : "2020-06-05T18:42:15Z",
        "updatedAt" : "2020-06-06T18:12:39Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "5855cd2e-243d-4c60-9381-5a3fffc2be41",
        "parentId" : "85da2cc3-e7b6-4393-bf5a-dde8171ad46a",
        "authorId" : "b07fe5ec-3ba6-4df5-b718-27aef96bd2ea",
        "body" : "I don't disagree with you, although I can't come up with a testcase so far.\r\nSeems that once you called `stream.transduce(t)` you can't see beyond the first error.",
        "createdAt" : "2020-06-06T08:17:54Z",
        "updatedAt" : "2020-06-06T18:12:39Z",
        "lastEditedBy" : "b07fe5ec-3ba6-4df5-b718-27aef96bd2ea",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff46c57d37dca97542e467d2d6c80ae0cce80ee8",
    "line" : 330,
    "diffHunk" : "@@ -1,1 +227,231 @@            push(input).foldM(\n              {\n                case (Left(e), _) => ZIO.fail(e)\n                case (Right(z), leftover) =>\n                  restart *> {"
  },
  {
    "id" : "36315da8-d39f-40b3-a226-a67450ccfd7b",
    "prId" : 3722,
    "prUrl" : "https://github.com/zio/zio/pull/3722#pullrequestreview-425639490",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61ff4f90-8cd8-4df9-b68b-6db9dd5b8ac7",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "What's your reasoning behind using the minimum? I can see arguments for both choices, just wondering what you're thinking.",
        "createdAt" : "2020-06-05T18:47:01Z",
        "updatedAt" : "2020-06-06T18:12:39Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "a62172ee-35d9-4e16-bd47-492e9426eb63",
        "parentId" : "61ff4f90-8cd8-4df9-b68b-6db9dd5b8ac7",
        "authorId" : "b07fe5ec-3ba6-4df5-b718-27aef96bd2ea",
        "body" : "Consider `(s1.zipPar(s2)).zip(s3)`. We have two lineages of consumers: `s1.zip(s3)` and `s2.zip(s3)`. \r\nReturning the maximum means that one of the lineages consumes some elements twice. \r\nWhich is the most surprising behavior IMO. \r\nWe have consumers that ignore some of the input but no consumer processes an element twice (w/o explicitly being asked for).\r\n\r\nBtw, what are the arguments for the opposite?",
        "createdAt" : "2020-06-05T21:37:26Z",
        "updatedAt" : "2020-06-06T18:12:39Z",
        "lastEditedBy" : "b07fe5ec-3ba6-4df5-b718-27aef96bd2ea",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff46c57d37dca97542e467d2d6c80ae0cce80ee8",
    "line" : 535,
    "diffHunk" : "@@ -1,1 +373,377 @@                    l.zipPar(r).flatMap {\n                      case (Some((z, l)), Some((z1, l1))) => {\n                        val minLeftover = if (l.length > l1.length) l1 else l\n                        ZIO.fail((Right(f(z, z1)), minLeftover))\n                      }"
  },
  {
    "id" : "90a502c1-50d9-4691-946b-21ec93d63990",
    "prId" : 3665,
    "prUrl" : "https://github.com/zio/zio/pull/3665#pullrequestreview-415561833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "36099e05-67cf-4443-abc3-3a61e5da51b9",
        "parentId" : null,
        "authorId" : "b07fe5ec-3ba6-4df5-b718-27aef96bd2ea",
        "body" : "Could be cleaner if we had \r\n`takeWhile(p: A => Boolean): Transducer[A, Option[A]]`",
        "createdAt" : "2020-05-20T17:30:49Z",
        "updatedAt" : "2020-05-20T17:30:49Z",
        "lastEditedBy" : "b07fe5ec-3ba6-4df5-b718-27aef96bd2ea",
        "tags" : [
        ]
      }
    ],
    "commit" : "18e9225ed74caf171358eb897e7f9f90fb679265",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +79,83 @@   */\n  def collectAllWhileWith[S](z: S)(p: Z => Boolean)(f: (S, Z) => S): ZSink[R, E, I, S] =\n    self.toTransducer >>> ZSink\n      .fold[Z, (S, Boolean)]((z, true))(_._2) {\n        case ((st, _), v) => {"
  },
  {
    "id" : "598e690e-f7f1-48a0-9f90-84ee0970ecc1",
    "prId" : 2756,
    "prUrl" : "https://github.com/zio/zio/pull/2756#pullrequestreview-350257324",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "507e9bc8-d231-4765-b90c-5de71a89d7b1",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "To cut down on repetition, let's implement this with `Sink.foldLeft`?",
        "createdAt" : "2020-01-29T16:32:53Z",
        "updatedAt" : "2020-01-31T12:24:11Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "bd40a676-b5dd-4f87-809f-ecd461f4fb7a",
        "parentId" : "507e9bc8-d231-4765-b90c-5de71a89d7b1",
        "authorId" : "a4f97b95-a032-42eb-a08b-1b38302dfd8c",
        "body" : "üëç ",
        "createdAt" : "2020-01-29T16:43:02Z",
        "updatedAt" : "2020-01-31T12:24:11Z",
        "lastEditedBy" : "a4f97b95-a032-42eb-a08b-1b38302dfd8c",
        "tags" : [
        ]
      }
    ],
    "commit" : "0296128c8bd0872860c1937ea06325d82c4c7cab",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1847,1851 @@   * Creates a sink which sums elements, provided they are Numeric\n   */\n  def sum[A](implicit ev: Numeric[A]): ZSink[Any, Nothing, Nothing, A, A] = {\n    val numeric = ev\n    foldLeft(numeric.zero) {"
  },
  {
    "id" : "2a1b22ae-f935-419e-9477-ac91aa77d3c3",
    "prId" : 2230,
    "prUrl" : "https://github.com/zio/zio/pull/2230#pullrequestreview-317999036",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c927c811-880f-4cf0-ac59-a06722052f6f",
        "parentId" : null,
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "There is no remainder so you should use `Nothing` for the `A0` slot. This will improve type inference, too.",
        "createdAt" : "2019-11-13T16:51:50Z",
        "updatedAt" : "2019-11-28T19:23:38Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "b9162420-3f03-4f85-91a3-3a0fa83804e4",
        "parentId" : "c927c811-880f-4cf0-ac59-a06722052f6f",
        "authorId" : "dad3dd27-be0a-41d2-91f9-2e2c069a0f6f",
        "body" : "@jdegoes `foldUntil` returns `ZSink[Any, Nothing, A, A, S]` I guess I should approach it differently then?",
        "createdAt" : "2019-11-13T19:54:27Z",
        "updatedAt" : "2019-11-28T19:23:38Z",
        "lastEditedBy" : "dad3dd27-be0a-41d2-91f9-2e2c069a0f6f",
        "tags" : [
        ]
      },
      {
        "id" : "03268040-3c96-41b8-8aeb-f94dc50f6794",
        "parentId" : "c927c811-880f-4cf0-ac59-a06722052f6f",
        "authorId" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "body" : "Even if it doesn't infer better, if a sink doesn't leave a remainder, it should still use `Nothing` for `A0`.",
        "createdAt" : "2019-11-15T01:01:36Z",
        "updatedAt" : "2019-11-28T19:23:38Z",
        "lastEditedBy" : "fb116aef-1bf2-4605-9639-255437a2e564",
        "tags" : [
        ]
      },
      {
        "id" : "10d65516-1716-41f1-9c9a-8e0871292b2b",
        "parentId" : "c927c811-880f-4cf0-ac59-a06722052f6f",
        "authorId" : "dad3dd27-be0a-41d2-91f9-2e2c069a0f6f",
        "body" : "I think I can't use foldUntil here then (when I use `Nothing` for the `A0` slot, it doesn't compile) - I'll come up with something else",
        "createdAt" : "2019-11-15T07:32:39Z",
        "updatedAt" : "2019-11-28T19:23:38Z",
        "lastEditedBy" : "dad3dd27-be0a-41d2-91f9-2e2c069a0f6f",
        "tags" : [
        ]
      },
      {
        "id" : "600d2f39-1349-497a-a066-be941e73a50b",
        "parentId" : "c927c811-880f-4cf0-ac59-a06722052f6f",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Shouldn't the leftover type of `head` be `A`? `head` will only look at one element of the stream, so it will potentially return a leftover of type `A` if the stream has more than one element. Also, shouldn't this just be implemented as `identity.optional`. From the microsite: \"Collecting the first element into an option (returns None for empty streams): `Sink.identity[Int].optional`\".",
        "createdAt" : "2019-11-16T05:45:03Z",
        "updatedAt" : "2019-11-28T19:23:38Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "4755d032-d42f-4544-9c51-a5666730f1c4",
        "parentId" : "c927c811-880f-4cf0-ac59-a06722052f6f",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "Also, I think we can simplify the signature of `run` from:\r\n\r\n```scala\r\ndef run[R1 <: R, E1 >: E, A0, A1 >: A, B](sink: ZSink[R1, E1, A0, A1, B]): ZIO[R1, E1, B]\r\n```\r\n\r\nto:\r\n\r\n```scala\r\ndef run[R1 <: R, E1 >: E, A1 >: A, B](sink: ZSink[R1, E1, Any, A1, B]): ZIO[R1, E1, B]\r\n```\r\n\r\nSince we are just discarding the leftovers the leftover type doesn't matter and it is covariant so we widen to `Any`.",
        "createdAt" : "2019-11-16T05:49:59Z",
        "updatedAt" : "2019-11-28T19:23:38Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "6acca8f6-a8ae-486c-9521-9731a5ecdc4e",
        "parentId" : "c927c811-880f-4cf0-ac59-a06722052f6f",
        "authorId" : "dad3dd27-be0a-41d2-91f9-2e2c069a0f6f",
        "body" : "> Also, I think we can simplify the signature of `run` from:\r\n> \r\n> ```scala\r\n> def run[R1 <: R, E1 >: E, A0, A1 >: A, B](sink: ZSink[R1, E1, A0, A1, B]): ZIO[R1, E1, B]\r\n> ```\r\n> \r\n> to:\r\n> \r\n> ```scala\r\n> def run[R1 <: R, E1 >: E, A1 >: A, B](sink: ZSink[R1, E1, Any, A1, B]): ZIO[R1, E1, B]\r\n> ```\r\n> \r\n> Since we are just discarding the leftovers the leftover type doesn't matter and it is covariant so we widen to `Any`.\r\n\r\nshould I make a new PR for that?",
        "createdAt" : "2019-11-16T14:28:23Z",
        "updatedAt" : "2019-11-28T19:23:38Z",
        "lastEditedBy" : "dad3dd27-be0a-41d2-91f9-2e2c069a0f6f",
        "tags" : [
        ]
      },
      {
        "id" : "a3df8041-69b8-4f06-854e-b1f8593cc049",
        "parentId" : "c927c811-880f-4cf0-ac59-a06722052f6f",
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "I think it is fine to just include in this PR. It is a pretty minor change.",
        "createdAt" : "2019-11-16T19:09:25Z",
        "updatedAt" : "2019-11-28T19:23:38Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "87f1bae0-f900-4307-921d-c538a238d066",
        "parentId" : "c927c811-880f-4cf0-ac59-a06722052f6f",
        "authorId" : "dad3dd27-be0a-41d2-91f9-2e2c069a0f6f",
        "body" : "done!",
        "createdAt" : "2019-11-17T03:28:13Z",
        "updatedAt" : "2019-11-28T19:23:38Z",
        "lastEditedBy" : "dad3dd27-be0a-41d2-91f9-2e2c069a0f6f",
        "tags" : [
        ]
      }
    ],
    "commit" : "badc1d1018223cf6238d615750d90e7c34130dbe",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +1287,1291 @@   * Creates a sink containing the first value.\n   */\n  final def head[A]: ZSink[Any, Nothing, A, A, Option[A]] =\n    identity[A].optional\n"
  },
  {
    "id" : "f210ae0e-c107-441e-94dd-888e478b3e12",
    "prId" : 2006,
    "prUrl" : "https://github.com/zio/zio/pull/2006#pullrequestreview-304992765",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96026061-95c6-4c12-a1be-723cdad0eef4",
        "parentId" : null,
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Do you mind adding a quick test for this combinator?",
        "createdAt" : "2019-10-21T07:27:38Z",
        "updatedAt" : "2019-10-22T06:57:02Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      },
      {
        "id" : "07b5c50f-7dee-402f-9283-e123193b6095",
        "parentId" : "96026061-95c6-4c12-a1be-723cdad0eef4",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "I did, but I must have misunderstood because it is failing in some cases ü§î ",
        "createdAt" : "2019-10-21T14:07:28Z",
        "updatedAt" : "2019-10-22T06:57:02Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "9ceef6bd-7f2c-4ccc-81eb-79112e6fb58d",
        "parentId" : "96026061-95c6-4c12-a1be-723cdad0eef4",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Solved",
        "createdAt" : "2019-10-22T07:00:34Z",
        "updatedAt" : "2019-10-22T07:00:35Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "853fe7aa157b6bb021307083a7abe524b0c77616",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +1676,1680 @@   * `\\r\\n` and `\\n`.\n   */\n  final val splitLinesChunk: ZSink[Any, Nothing, Chunk[String], Chunk[String], Chunk[String]] =\n    splitLines.contramap[Chunk[String]](_.mkString).mapRemainder(Chunk.single)\n"
  },
  {
    "id" : "477eaa1b-dd92-40e5-a667-b51928ace46b",
    "prId" : 1686,
    "prUrl" : "https://github.com/zio/zio/pull/1686#pullrequestreview-289366493",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff403040-761e-4784-945b-23c03b2b40a3",
        "parentId" : null,
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "`extends AnyVal`",
        "createdAt" : "2019-09-17T15:12:38Z",
        "updatedAt" : "2019-09-17T20:06:31Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      },
      {
        "id" : "333c0767-f151-4bd9-9527-9f32fa9db17e",
        "parentId" : "ff403040-761e-4784-945b-23c03b2b40a3",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Can't work because of the inner classes that are defined. Not a big loss.",
        "createdAt" : "2019-09-17T15:14:41Z",
        "updatedAt" : "2019-09-17T20:06:31Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "0ba913ff-fda6-4ae5-a5ee-dc318e2d91c1",
        "parentId" : "ff403040-761e-4784-945b-23c03b2b40a3",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Sorry, can you point me to the defined classes? I can't find anything.",
        "createdAt" : "2019-09-17T15:27:21Z",
        "updatedAt" : "2019-09-17T20:06:31Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      },
      {
        "id" : "4f837ca4-ec0b-4f51-b2b2-830bf4d8af81",
        "parentId" : "ff403040-761e-4784-945b-23c03b2b40a3",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "`case class State` in `collectAllN`",
        "createdAt" : "2019-09-17T15:38:33Z",
        "updatedAt" : "2019-09-17T20:06:31Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "e8e86e27-55ad-4b2e-8a97-83a14b9163a6",
        "parentId" : "ff403040-761e-4784-945b-23c03b2b40a3",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Yes, thanks.",
        "createdAt" : "2019-09-17T15:48:12Z",
        "updatedAt" : "2019-09-17T20:06:31Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "7841938a38dd45cbdb1561e60e06713baad09759",
    "line" : 635,
    "diffHunk" : "@@ -1,1 +719,723 @@object ZSink extends ZSinkPlatformSpecific {\n\n  implicit class InputRemainderOps[R, E, A, B](private val sink: ZSink[R, E, A, A, B]) {\n\n    /**"
  },
  {
    "id" : "6a422268-a4a0-40b5-bcf0-860460b5eab0",
    "prId" : 1686,
    "prUrl" : "https://github.com/zio/zio/pull/1686#pullrequestreview-289365003",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0abbfe10-cae0-4ca4-9aaf-84a36bbe6e6e",
        "parentId" : null,
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Can the `Optional` ADT be migrated to `?` as well? OTOH Not sure if `Side` is used in multiple combinators.",
        "createdAt" : "2019-09-17T15:23:36Z",
        "updatedAt" : "2019-09-17T20:06:31Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      },
      {
        "id" : "8f6655e1-dbd3-4bdc-910b-944c902ac9ba",
        "parentId" : "0abbfe10-cae0-4ca4-9aaf-84a36bbe6e6e",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Yup! Moved it",
        "createdAt" : "2019-09-17T15:46:01Z",
        "updatedAt" : "2019-09-17T20:06:31Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "7841938a38dd45cbdb1561e60e06713baad09759",
    "line" : 1097,
    "diffHunk" : "@@ -1,1 +1146,1150 @@  }\n\n  private[ZSink] object internal {\n    sealed trait Side[+E, +S, +A]\n    object Side {"
  },
  {
    "id" : "183b4b50-65f7-40bd-bc5b-41f06431e76d",
    "prId" : 1686,
    "prUrl" : "https://github.com/zio/zio/pull/1686#pullrequestreview-289443581",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41d13729-a829-4e96-a74b-d623f0ed009a",
        "parentId" : null,
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "I'm guessing this cannot be inferred from the sink before this one? :/",
        "createdAt" : "2019-09-17T16:19:11Z",
        "updatedAt" : "2019-09-17T20:06:31Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      },
      {
        "id" : "54c2ba59-bb98-4e31-a743-54ec11790f60",
        "parentId" : "41d13729-a829-4e96-a74b-d623f0ed009a",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "No, unfortunately not. Same problem as with `ZStream#run`",
        "createdAt" : "2019-09-17T17:56:48Z",
        "updatedAt" : "2019-09-17T20:06:31Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "7841938a38dd45cbdb1561e60e06713baad09759",
    "line" : 1231,
    "diffHunk" : "@@ -1,1 +1665,1669 @@   * Creates a single-value sink from a value.\n   */\n  final def succeed[A, B](b: B): ZSink[Any, Nothing, A, A, B] =\n    new SinkPure[Nothing, A, A, B] {\n      type State = Chunk[A]"
  },
  {
    "id" : "b622bd30-890a-4a1b-8a06-25dd0a671764",
    "prId" : 1681,
    "prUrl" : "https://github.com/zio/zio/pull/1681#pullrequestreview-288360091",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eefa4074-68dd-4eec-9fc8-36ea423434d9",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Great work on this one.",
        "createdAt" : "2019-09-15T12:06:54Z",
        "updatedAt" : "2019-09-15T12:22:38Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "71b0eaff-8d12-476e-88b2-9f257ba85024",
        "parentId" : "eefa4074-68dd-4eec-9fc8-36ea423434d9",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "It's nothing.",
        "createdAt" : "2019-09-15T12:23:38Z",
        "updatedAt" : "2019-09-15T12:23:39Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "de96d9bcaace1fa31cfb567c5f387d56bb8d6c12",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +300,304 @@   * transformed into a sink by `f`.\n   */\n  final def flatMap[R1 <: R, E1 >: E, A00 >: A0, A1 <: A, C](\n    f: B => ZSink[R1, E1, A00, A1, C]\n  )(implicit ev: A00 =:= A1, ev2: A1 =:= A00): ZSink[R1, E1, A00, A1, C] ="
  },
  {
    "id" : "c0464e71-d9ad-49c3-a327-09a058cf0ef8",
    "prId" : 1675,
    "prUrl" : "https://github.com/zio/zio/pull/1675#pullrequestreview-288327833",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bec7c2b5-17e4-4547-be39-396ce10bf7bd",
        "parentId" : null,
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Since we are starting to use `ZSink.internal` for complex states, it makes sense to restrict the old imports to only the needed types. Just a mental note.",
        "createdAt" : "2019-09-14T16:48:49Z",
        "updatedAt" : "2019-09-14T19:04:14Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "265ab4bf2bd5b6c364b8769070def2ae94406448",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +1322,1326 @@  ): ZSink[Any, Nothing, A, A, S] =\n    new SinkPure[Nothing, A, A, S] {\n      import internal.FoldWeightedState\n\n      type State = FoldWeightedState[S, A]"
  },
  {
    "id" : "d2e9ef4a-f601-4c9d-8ee6-17b353faaef2",
    "prId" : 1675,
    "prUrl" : "https://github.com/zio/zio/pull/1675#pullrequestreview-288328014",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "165f02b5-f2df-40ce-a4d6-14f9149f2457",
        "parentId" : null,
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "We should document the `decompose` function better.",
        "createdAt" : "2019-09-14T16:53:58Z",
        "updatedAt" : "2019-09-14T19:04:14Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "265ab4bf2bd5b6c364b8769070def2ae94406448",
    "line" : 54,
    "diffHunk" : "@@ -1,1 +1244,1248 @@   * [[ZSink.foldWeightedDecompose]] for an example.\n   */\n  final def foldWeightedDecomposeM[R, R1 <: R, E, E1 >: E, A, S](\n    z: S\n  )("
  },
  {
    "id" : "3aba318d-efa1-40f9-a807-af1738dec809",
    "prId" : 1560,
    "prUrl" : "https://github.com/zio/zio/pull/1560#pullrequestreview-284401174",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d61329e-3d60-4513-95ab-bf8e9b61d545",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "`orElse` could use a bit more coverage - two sinks, one that finishes before the other, and the flipped condition",
        "createdAt" : "2019-09-04T16:22:36Z",
        "updatedAt" : "2019-09-13T13:06:40Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "89a914c8-a765-47c8-afe7-9a6da30d5ab6",
        "parentId" : "1d61329e-3d60-4513-95ab-bf8e9b61d545",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Done.",
        "createdAt" : "2019-09-05T16:51:45Z",
        "updatedAt" : "2019-09-13T13:06:40Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "54fad72660f1bef8b53592431aad630b6c4ba92d",
    "line" : 582,
    "diffHunk" : "@@ -1,1 +484,488 @@   *             xxxxxxxxx <- Should NOT be consumed\n   */\n  final def orElse[R1 <: R, E1, A00 >: A0, A1 <: A, C](\n    that: ZSink[R1, E1, A00, A1, C]\n  )(implicit ev: A1 =:= A00): ZSink[R1, E1, A00, A1, Either[B, C]] ="
  },
  {
    "id" : "baa44a1e-b9fc-4820-9469-a02647137689",
    "prId" : 1560,
    "prUrl" : "https://github.com/zio/zio/pull/1560#pullrequestreview-284401267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e0f12ccf-5360-40ce-8cf2-b881d92db882",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Nice :-)",
        "createdAt" : "2019-09-04T16:52:33Z",
        "updatedAt" : "2019-09-13T13:06:40Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "aef4ad47-34a5-4905-ad16-3287a13b41bf",
        "parentId" : "e0f12ccf-5360-40ce-8cf2-b881d92db882",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Thanks.",
        "createdAt" : "2019-09-05T16:51:55Z",
        "updatedAt" : "2019-09-13T13:06:40Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "54fad72660f1bef8b53592431aad630b6c4ba92d",
    "line" : 1668,
    "diffHunk" : "@@ -1,1 +1294,1298 @@   */\n  final def fromFunction[A, B](f: A => B): ZSink[Any, Unit, Nothing, A, B] =\n    identity.map(f)\n\n  /**"
  },
  {
    "id" : "8a431399-e4bb-4663-8c7b-8856387792c0",
    "prId" : 1560,
    "prUrl" : "https://github.com/zio/zio/pull/1560#pullrequestreview-287360351",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "815e3de1-fe5a-4a87-b0b8-03db68f0c958",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Was the previous implementation incorrect? This looks good too, but wondering.",
        "createdAt" : "2019-09-12T08:21:06Z",
        "updatedAt" : "2019-09-13T13:06:40Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "c80574b3-4fcf-4aa8-ad9a-d6f5c91f8635",
        "parentId" : "815e3de1-fe5a-4a87-b0b8-03db68f0c958",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "It wasn't I just got rid of the `collectUntil` combinator which I introduced some time ago. I didn't like it very much and it was mostly a means to an end.",
        "createdAt" : "2019-09-12T10:38:26Z",
        "updatedAt" : "2019-09-13T13:06:40Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      },
      {
        "id" : "72b9c449-34bf-4f60-9712-13c3877f8629",
        "parentId" : "815e3de1-fe5a-4a87-b0b8-03db68f0c958",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Resolved in DM. `collectUntil` was a misnomer. The `untilOutput` combinator has been properly fixed in the meantime.",
        "createdAt" : "2019-09-12T11:25:56Z",
        "updatedAt" : "2019-09-13T13:06:40Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "54fad72660f1bef8b53592431aad630b6c4ba92d",
    "line" : 141,
    "diffHunk" : "@@ -1,1 +187,191 @@    i: Int\n  )(implicit ev: A00 =:= A1, ev2: A1 =:= A00): ZSink[R, E, A00, A1, List[B]] =\n    collectAllWith[(List[B], Int), A00, A1]((Nil, 0)) {\n      case ((bs, len), b) =>\n        (b :: bs, len + 1)"
  },
  {
    "id" : "982dda44-4cee-4df4-88af-22cc05178cd7",
    "prId" : 1560,
    "prUrl" : "https://github.com/zio/zio/pull/1560#pullrequestreview-287262471",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "784f19f0-1644-4b1d-8048-8866b8d2a442",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Nice simplification",
        "createdAt" : "2019-09-12T08:21:20Z",
        "updatedAt" : "2019-09-13T13:06:40Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "54fad72660f1bef8b53592431aad630b6c4ba92d",
    "line" : 179,
    "diffHunk" : "@@ -1,1 +198,202 @@    z: S\n  )(f: (S, B) => S)(implicit ev: A00 =:= A1, ev2: A1 =:= A00): ZSink[R, E, A00, A1, S] =\n    collectAllWhileWith[S, A00, A1](_ => true)(z)(f)\n\n  private[ZSink] final def collectAllWhile[A00 >: A0, A1 <: A]("
  },
  {
    "id" : "df268047-cd4e-40f4-8820-41ac84b6495d",
    "prId" : 1516,
    "prUrl" : "https://github.com/zio/zio/pull/1516#pullrequestreview-281631282",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "92391a24-642a-4f18-971b-09f095f0cf2b",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Nice. I noticed that swallowed error too :-)",
        "createdAt" : "2019-08-29T17:42:29Z",
        "updatedAt" : "2019-08-29T18:05:01Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "6803f88f-f7a1-4c79-bb60-4beb049d63f4",
        "parentId" : "92391a24-642a-4f18-971b-09f095f0cf2b",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "It's now in line with `collectAllWhile`, so that's something. I'm happy.",
        "createdAt" : "2019-08-29T18:06:19Z",
        "updatedAt" : "2019-08-29T18:06:19Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "4a358e90b869cda45eb5899fa4fe580f2b422011",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +191,195 @@                  self\n                    .stepChunk(Step.state(init), as.map(ev))\n                    .map(Step.leftMap(_)((f(state._1, b), _)))\n                }\n              }"
  },
  {
    "id" : "a9f85634-11db-41de-a22a-cbad1d4ac12f",
    "prId" : 1387,
    "prUrl" : "https://github.com/zio/zio/pull/1387#pullrequestreview-273540356",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b963f09b-de16-443f-84ef-d5f11abd1e97",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "This is a *really* cool combinator. Nice work.",
        "createdAt" : "2019-08-12T18:04:47Z",
        "updatedAt" : "2019-08-17T21:07:16Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4585e4a9d128a025aa44b2188cd2187559cfd32",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +408,412 @@    filterM(a => f(a).map(!_))\n\n  final def keyed[A1 <: A, K](f: A1 => K): ZSink[R, E, (K, A0), A1, Map[K, B]] =\n    new ZSink[R, E, (K, A0), A1, Map[K, B]] {\n      type State = Map[K, self.State]"
  },
  {
    "id" : "f08eeed2-ee76-47db-86e0-1f4030383d88",
    "prId" : 1387,
    "prUrl" : "https://github.com/zio/zio/pull/1387#pullrequestreview-273540356",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7788d3a1-4057-48af-a2fe-1fa90f141627",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Big üëç ",
        "createdAt" : "2019-08-12T18:05:00Z",
        "updatedAt" : "2019-08-17T21:07:16Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "a4585e4a9d128a025aa44b2188cd2187559cfd32",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +791,795 @@   * Times the invocation of the sink\n   */\n  final def timed: ZSink[R with Clock, E, A0, A, (Duration, B)] =\n    new ZSink[R with Clock, E, A0, A, (Duration, B)] {\n      type State = (Long, Long, self.State)"
  },
  {
    "id" : "0d6e11fb-489d-40bb-acb6-937679710d6f",
    "prId" : 1384,
    "prUrl" : "https://github.com/zio/zio/pull/1384#pullrequestreview-273615250",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b193a628-0ce9-4566-821a-0c6f1e1a6910",
        "parentId" : null,
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Not to nitpick here, but I see this as a deviation from the previous sinks, which have all been defined with `def`. AFAIK `val` creates objects eagerly, and they stay in memory for the duration of the program which references this code. Is that something desirable in this case? I may be completely off base here, I just want to hear the reasoning. Same for every other `val`, including the ones in `Sink`.",
        "createdAt" : "2019-08-12T10:38:29Z",
        "updatedAt" : "2019-08-22T05:53:14Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc4a90b20e53eaae5673e3eee9d29dde11b1e3e1",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +1339,1343 @@   * Splits strings on newlines. Handles both `\\r\\n` and `\\n`.\n   */\n  final val splitLines: ZSink[Any, Nothing, String, String, Chunk[String]] =\n    new SinkPure[Nothing, String, String, Chunk[String]] {\n      type State = (Chunk[String], Option[String], Boolean)"
  },
  {
    "id" : "8cc54f36-a3d0-4ac3-ba5a-d06e2bbea0d2",
    "prId" : 1384,
    "prUrl" : "https://github.com/zio/zio/pull/1384#pullrequestreview-273615250",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a62e095f-3c5b-4336-bf3a-7719c8dbec57",
        "parentId" : null,
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "On an urelated note, this is probably what the stepless sinks' code will look like after the refactoring. :)",
        "createdAt" : "2019-08-12T10:41:13Z",
        "updatedAt" : "2019-08-22T05:53:14Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc4a90b20e53eaae5673e3eee9d29dde11b1e3e1",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +1341,1345 @@  final val splitLines: ZSink[Any, Nothing, String, String, Chunk[String]] =\n    new SinkPure[Nothing, String, String, Chunk[String]] {\n      type State = (Chunk[String], Option[String], Boolean)\n\n      override val initialPure: Step[State, Nothing] = Step.more((Chunk.empty, None, false))"
  },
  {
    "id" : "01117b30-4d34-4a87-ac5f-10d8533cf764",
    "prId" : 1344,
    "prUrl" : "https://github.com/zio/zio/pull/1344#pullrequestreview-270504551",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cadd36eb-4b4e-4017-94a1-dc1d6756b0f9",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Curious, why not defer the extraction to `extract`?",
        "createdAt" : "2019-08-04T16:09:29Z",
        "updatedAt" : "2019-08-07T14:12:34Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "7dd5ae2da4326a564200752fa9638c23c3eced23",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +728,732 @@                else\n                  self\n                    .extract(Step.state(st))\n                    .map(b => Left((b, Some(Step.leftover(st)))))\n              }"
  },
  {
    "id" : "aa844006-5110-4226-a3df-c987dfcb4c22",
    "prId" : 1205,
    "prUrl" : "https://github.com/zio/zio/pull/1205#pullrequestreview-264511708",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b81db44e-8ecc-4219-a6dd-61f230f5b952",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Question: when `sum < 0`, should we subtract it from `max`? Otherwise when the bucket is depleted, there is always constant amount of `max` available in addition.",
        "createdAt" : "2019-07-20T19:44:59Z",
        "updatedAt" : "2019-07-21T16:55:28Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "6ebfcb12-e02f-4cdc-96a1-03cd89bd6e9f",
        "parentId" : "b81db44e-8ecc-4219-a6dd-61f230f5b952",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "You're right, I'll fix this.",
        "createdAt" : "2019-07-20T20:40:52Z",
        "updatedAt" : "2019-07-21T16:55:28Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      },
      {
        "id" : "5ca5f291-1226-4b1c-9ff3-289db5db450d",
        "parentId" : "b81db44e-8ecc-4219-a6dd-61f230f5b952",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Actually, on second thought, the `checkTokens` function is called to guard against overflow. `sum` is computed exclusively from positive values, whose total value might exceed `Long.MaxValue` (which is what the if statement checks). If that happens, we want `max` tokens to be available, otherwise, if we are dealing with positive values (`sum` and `max`), just get the minimum value.",
        "createdAt" : "2019-07-20T21:19:00Z",
        "updatedAt" : "2019-07-21T16:55:28Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "6585b7082d544631042b930b1595f244d9d7d93d",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +1279,1283 @@    }\n\n    def checkTokens(sum: Long, max: Long): Long = if (sum < 0) max else math.min(sum, max)\n\n    val sink = for {"
  },
  {
    "id" : "8ccbc1ad-ea0b-42cf-bc93-16cb9b275186",
    "prId" : 1155,
    "prUrl" : "https://github.com/zio/zio/pull/1155#pullrequestreview-262582048",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e3c7e0ed-b367-4526-a735-9eae66728e3c",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "So this doesn't need to be a `Managed` now right? The `Ref` and clock read can be done in `initial`.",
        "createdAt" : "2019-07-12T18:20:16Z",
        "updatedAt" : "2019-07-16T14:42:58Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "5d4972e7-ee6d-4c0b-ae99-7dfbe7d0a9b7",
        "parentId" : "e3c7e0ed-b367-4526-a735-9eae66728e3c",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "I forgot to change this. I wanted to send some code in before leaving for a festival. Working on this PR right now.",
        "createdAt" : "2019-07-16T07:13:53Z",
        "updatedAt" : "2019-07-16T14:42:58Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      },
      {
        "id" : "efd2ee8c-162f-4370-8210-a5baec78f51e",
        "parentId" : "e3c7e0ed-b367-4526-a735-9eae66728e3c",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "I have some trouble removing the `ZManaged` from the type signature. For each stream element, the `ZSink` gets reset (by calling `initial` state), which is why we need to keep a `Ref` as the state holder. Also, the ref initialization needs to happen exactly once, which means that we cannot make the ref in `initial`.",
        "createdAt" : "2019-07-16T07:30:52Z",
        "updatedAt" : "2019-07-16T14:42:58Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      },
      {
        "id" : "748fe06c-e7cc-41f7-8cb0-6205d3fe4301",
        "parentId" : "e3c7e0ed-b367-4526-a735-9eae66728e3c",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "And since `initial` doesn't take any arguments, there is no way to \"inject\" the old state.",
        "createdAt" : "2019-07-16T11:24:54Z",
        "updatedAt" : "2019-07-16T14:42:58Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      },
      {
        "id" : "28c5a8b5-62e9-47f7-986a-90df0026c140",
        "parentId" : "e3c7e0ed-b367-4526-a735-9eae66728e3c",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Right, I see what you mean. Let's go ahead and merge this then.",
        "createdAt" : "2019-07-16T17:48:54Z",
        "updatedAt" : "2019-07-16T17:48:54Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "572923f042f8694199e49205299938c73b936c46",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +1093,1097 @@  final def throttleEnforceM[R, E, A](units: Long, duration: Duration)(\n    costFn: A => ZIO[R, E, Long]\n  ): ZManaged[R with Clock, E, ZSink[R with Clock, E, Nothing, A, Option[A]]] = {\n    import ZSink.internal._\n"
  }
]