[
  {
    "id" : "e0fca1c6-c9ff-4e82-a015-525ec61efc2d",
    "prId" : 3981,
    "prUrl" : "https://github.com/zio/zio/pull/3981#pullrequestreview-451966586",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8bd6eb1-ccdc-4094-8d9c-fdc6a3868ad4",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Very elegant!",
        "createdAt" : "2020-07-20T21:18:20Z",
        "updatedAt" : "2020-07-20T21:18:53Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "63a5fcfc01e7719e0ced0d524972eeb4c6e6793d",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +830,834 @@\n    // handle optional byte order mark\n    branchAfter(3) { bytes =>\n      bytes.toList match {\n        case -17 :: -69 :: -65 :: Nil =>"
  },
  {
    "id" : "fd62a874-96de-4e33-a9b9-751043d981e1",
    "prId" : 3947,
    "prUrl" : "https://github.com/zio/zio/pull/3947#pullrequestreview-456292419",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cca67046-0f8f-41cc-b271-4a2335da7b0a",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Will this throw an exception when non-ASCII bytes are encountered? If so, we should use `ZIO(...)` rather than `succeedNow`.",
        "createdAt" : "2020-07-15T18:08:48Z",
        "updatedAt" : "2020-07-28T05:18:27Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "e73ba180-d2af-42e4-98ef-a7d0776bbbc9",
        "parentId" : "cca67046-0f8f-41cc-b271-4a2335da7b0a",
        "authorId" : "393f03b6-8fcf-42b6-bd64-9914a5d14e4b",
        "body" : "@iravid it doesn't seem to be the case. From the docs:\r\n```\r\nThis method always replaces malformed-input and unmappable-character sequences with this charset's default replacement string. \r\n```\r\nIn `ASCII`'s case, it returns `ï¿½ï¿½ï¿½`. No exception thrown",
        "createdAt" : "2020-07-28T04:23:57Z",
        "updatedAt" : "2020-07-28T05:18:27Z",
        "lastEditedBy" : "393f03b6-8fcf-42b6-bd64-9914a5d14e4b",
        "tags" : [
        ]
      }
    ],
    "commit" : "f874b7149aa15e6f5bda096db97f53a8e0c0ae12",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +917,921 @@  val usASCIIDecode: ZTransducer[Any, Nothing, Byte, String] =\n    ZTransducer.fromPush {\n      case Some(chunk) => ZIO.succeedNow(Chunk.single(new String(chunk.toArray, StandardCharsets.US_ASCII)))\n      case None        => ZIO.succeedNow(Chunk.empty)\n    }"
  },
  {
    "id" : "782955b6-f57e-4235-9e45-66321b5faf7e",
    "prId" : 3886,
    "prUrl" : "https://github.com/zio/zio/pull/3886#pullrequestreview-441166088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef2ef104-6a5f-4b10-b5d1-24fdd1c09064",
        "parentId" : null,
        "authorId" : "a5d6ad47-7076-4ca2-8c2a-64a2a79fecb3",
        "body" : "Implementation detail that bubbled up due to the Chunk's size being `Int`, might be a deal breaker for this change?\r\n\r\nAffects https://github.com/zio/zio/pull/3886/files#diff-e2c16046e05624c39e46b9e4c2870b9cR1596 and https://github.com/zio/zio/pull/3886/files#diff-e2c16046e05624c39e46b9e4c2870b9cR1603.",
        "createdAt" : "2020-07-01T20:01:59Z",
        "updatedAt" : "2020-07-16T20:16:13Z",
        "lastEditedBy" : "a5d6ad47-7076-4ca2-8c2a-64a2a79fecb3",
        "tags" : [
        ]
      },
      {
        "id" : "e20564f0-db42-46db-a595-0aef988439eb",
        "parentId" : "ef2ef104-6a5f-4b10-b5d1-24fdd1c09064",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "This is a fair compromise, `n` is fine as an `Int` here.",
        "createdAt" : "2020-07-01T20:12:28Z",
        "updatedAt" : "2020-07-16T20:16:13Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "100061ad39d09c02ae8106e426fa6ec590a25b15",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +170,174 @@   * Creates a transducer accumulating incoming values into chunks of maximum size `n`.\n   */\n  def collectAllN[I](n: Int): ZTransducer[Any, Nothing, I, Chunk[I]] =\n    ZTransducer {\n"
  },
  {
    "id" : "7b4f42ad-66a8-43ef-a86d-a14bba914900",
    "prId" : 3551,
    "prUrl" : "https://github.com/zio/zio/pull/3551#pullrequestreview-408642840",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a139fb4-0f0c-4448-bdee-67d537ae0fe9",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "With this version it is possible that one slow stream will block a fast stream, as it should, but chunks will accumulate in memory potentially until collapse. I think it's worth pulling from one stream only when there's an excess, perhaps with a heuristic on the size of the excess.",
        "createdAt" : "2020-05-09T11:37:23Z",
        "updatedAt" : "2020-05-09T11:37:24Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "d45c9afb-95ce-42e1-a00e-576ed8f1d3a9",
        "parentId" : "0a139fb4-0f0c-4448-bdee-67d537ae0fe9",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Hmm, no, I misread. Ha, I take it back ðŸ˜… ",
        "createdAt" : "2020-05-09T11:38:13Z",
        "updatedAt" : "2020-05-09T11:38:13Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "2507d8643828ff0a01567645e851e73b6934ba7e",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +84,88 @@          ref.get.flatMap { excess =>\n            for {\n              res <- p1(in).zipWithPar(p2(in)) {\n                      case (leftUpd, rightUpd) =>\n                        val (left, right) = excess.fold(l => (l ++ leftUpd, rightUpd), r => (leftUpd, r ++ rightUpd))"
  },
  {
    "id" : "9e7a47fb-8844-4412-9ecb-d629c0c70b83",
    "prId" : 3526,
    "prUrl" : "https://github.com/zio/zio/pull/3526#pullrequestreview-404722534",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9acfcaf8-8de0-4762-982c-07e68a5ffc9a",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Another thing I realized is that this transducer will emit the very first element of the stream; not the first element of every chunk.\r\n\r\nSame for `last`.",
        "createdAt" : "2020-05-04T05:51:51Z",
        "updatedAt" : "2020-05-04T05:59:10Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "0ef7e957-34d0-4efd-ad8b-10b2f1453d53",
        "parentId" : "9acfcaf8-8de0-4762-982c-07e68a5ffc9a",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "These are useful transducers so let's just fix the scaladoc to reflect what they do.",
        "createdAt" : "2020-05-04T05:52:26Z",
        "updatedAt" : "2020-05-04T05:59:10Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "c50b6cb3-50ba-4bc9-a8d3-c5b838d2e606",
        "parentId" : "9acfcaf8-8de0-4762-982c-07e68a5ffc9a",
        "authorId" : "0676ff00-bbe5-4a0f-8ff4-791926933b92",
        "body" : "Ah, yeah, that's true. Not sure why I messed that up when even one of my debounce tests was explicitly checking for that. ðŸ˜…\r\n\r\nI updated the wording.",
        "createdAt" : "2020-05-04T05:59:15Z",
        "updatedAt" : "2020-05-04T05:59:15Z",
        "lastEditedBy" : "0676ff00-bbe5-4a0f-8ff4-791926933b92",
        "tags" : [
        ]
      }
    ],
    "commit" : "5769c46201cf49417f51cef6bc43dbfc0b1f3503",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +540,544 @@   * Creates a transducer that returns the first element of the stream, if it exists.\n   */\n  def head[O]: ZTransducer[Any, Nothing, O, Option[O]] =\n    foldLeft[O, Option[O]](Option.empty[O]) {\n      case (acc, a) =>"
  }
]