[
  {
    "id" : "c82f3ae5-f394-4074-b875-2110c5b4127b",
    "prId" : 2171,
    "prUrl" : "https://github.com/zio/zio/pull/2171#pullrequestreview-314539181",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d94720dc-ebcb-4e59-bb3c-a6379751c61c",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "It needs to fail if `chunkSize <= 0`, though I see we don't check `capacity` in `buffer`.",
        "createdAt" : "2019-11-07T09:34:37Z",
        "updatedAt" : "2019-11-19T09:05:02Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "336efafb-76b0-4705-a2c5-a48cff1457fd",
        "parentId" : "d94720dc-ebcb-4e59-bb3c-a6379751c61c",
        "authorId" : "12bf19b7-6757-4153-b311-6ba466c124a3",
        "body" : "I referenced this `chunkN` code from the `ZStream` itself and there also `checkSize` value check is not being taken care of, I believe this check is supposed to be taken care at the upper layer instead of at `chunkN`. I agree that we should check in the `chunkN` itself but wanted to keep the code as harmonized as possible. What do you think?",
        "createdAt" : "2019-11-09T03:51:49Z",
        "updatedAt" : "2019-11-19T09:05:02Z",
        "lastEditedBy" : "12bf19b7-6757-4153-b311-6ba466c124a3",
        "tags" : [
        ]
      }
    ],
    "commit" : "eb302cb0a9899f603d9e3ae1e51a0a871920ebe6",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +97,101 @@   * @param chunkSize size of the chunk\n   */\n  final def chunkN(chunkSize: Int): ZStreamChunk[R, E, A] =\n    ZStreamChunk {\n      ZStream {"
  },
  {
    "id" : "d74250e5-db7f-4caa-8618-bcd57c1c2559",
    "prId" : 2064,
    "prUrl" : "https://github.com/zio/zio/pull/2064#pullrequestreview-309929509",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0032b4fe-5086-4ffe-a876-43131b1716a7",
        "parentId" : null,
        "authorId" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "body" : "❤️ ",
        "createdAt" : "2019-10-31T14:38:01Z",
        "updatedAt" : "2019-10-31T14:38:01Z",
        "lastEditedBy" : "e51a12a9-b5b7-4e30-a51d-293206825c6f",
        "tags" : [
        ]
      },
      {
        "id" : "8826eb06-9252-4db3-984a-9c528ad8f997",
        "parentId" : "0032b4fe-5086-4ffe-a876-43131b1716a7",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "Bleeding edge. 😆 ",
        "createdAt" : "2019-10-31T14:38:32Z",
        "updatedAt" : "2019-10-31T14:38:32Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "07970725d2ef503cb205cc2cfccbfbc75bed9cad",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +400,404 @@   * Transforms the errors that possibly result from this stream.\n   */\n  final def mapError[E1](f: E => E1)(implicit ev: CanFail[E]): ZStreamChunk[R, E1, A] =\n    ZStreamChunk(chunks.mapError(f))\n"
  },
  {
    "id" : "813a15d5-83ba-4bbe-bf8c-ceb250b0ab0b",
    "prId" : 1778,
    "prUrl" : "https://github.com/zio/zio/pull/1778#pullrequestreview-296776147",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a6b08ce-77d8-4a03-8214-c20e8659bda4",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "I would like to suggest that we drop the fold variants that operate on chunks here entirely, because they're accessible by just doing something like `stream.chunks.foldM`. What do you think @kamilkloch?\r\n\r\nInstead of those, let's expand the methods on `ZStreamChunk` to include parallels to all the fold variants on `ZStream`. These methods should ideally delegate to the folds on `Chunk` where possible.",
        "createdAt" : "2019-09-24T18:04:22Z",
        "updatedAt" : "2019-10-03T10:23:02Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "77930647-7440-4723-b76b-7d454f0cc75f",
        "parentId" : "6a6b08ce-77d8-4a03-8214-c20e8659bda4",
        "authorId" : "b110ed1b-7fc6-4449-8bf0-94e75f6bb824",
        "body" : "@iravid Please take a look. I had to force-push the changes due to conficlts. ",
        "createdAt" : "2019-10-03T10:24:16Z",
        "updatedAt" : "2019-10-03T10:24:16Z",
        "lastEditedBy" : "b110ed1b-7fc6-4449-8bf0-94e75f6bb824",
        "tags" : [
        ]
      }
    ],
    "commit" : "c39a4812cac532a567a791c35c1527a366664b79",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +143,147 @@\n  /**\n   * Executes a pure fold over the stream of values - reduces all elements in the stream to a value of type `S`.\n   * See [[ZStream.fold]]\n   */"
  },
  {
    "id" : "aa066c53-a98c-4f21-96aa-a6a2655123e7",
    "prId" : 1669,
    "prUrl" : "https://github.com/zio/zio/pull/1669#pullrequestreview-288334419",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13bfcc57-1659-42e4-b2f3-6d5559217b8d",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "I wonder why this had the `A1` in the first place 🧐",
        "createdAt" : "2019-09-14T19:58:46Z",
        "updatedAt" : "2019-09-14T20:02:29Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "90d76d84-c03d-4a8c-8b83-4bd22e042045",
        "parentId" : "13bfcc57-1659-42e4-b2f3-6d5559217b8d",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "IDE driven development? Joking.",
        "createdAt" : "2019-09-14T20:04:00Z",
        "updatedAt" : "2019-09-14T20:04:01Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "131b8e23e93988a974c9445d9d2fe5ae6c6d7358",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +170,174 @@   * Reduces the elements in the stream to a value of type `S`\n   */\n  def foldLeft[S](s: S)(f: (S, A) => S): ZIO[R, E, S] =\n    fold[R, E, A, S](s)(_ => true)((s, a) => ZIO.succeed(f(s, a)))\n"
  },
  {
    "id" : "24468554-1034-4873-bbd5-e0e20ee52265",
    "prId" : 1657,
    "prUrl" : "https://github.com/zio/zio/pull/1657#pullrequestreview-287650579",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "871f4f19-f752-409d-b27b-fe8adb7b19d8",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "How about adding a dropping strategy?",
        "createdAt" : "2019-09-12T19:20:38Z",
        "updatedAt" : "2019-09-12T19:22:25Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b469cb4627e62b73c8de3f7639d59695950431a",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +46,50 @@   */\n  final def buffer(capacity: Int): ZStreamChunk[R, E, A] =\n    ZStreamChunk(chunks.buffer(capacity))\n\n  /**"
  },
  {
    "id" : "261f808d-282d-401a-ab56-4cbcb9d1eed3",
    "prId" : 1572,
    "prUrl" : "https://github.com/zio/zio/pull/1572#pullrequestreview-283861798",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7020322c-41c5-4529-ae59-2c01ef1bcf17",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "This made me change my mind on `StreamChunkEffect` - we probably do need that. There's no  way to implement this combinator  efficiently without an override.",
        "createdAt" : "2019-09-04T20:05:11Z",
        "updatedAt" : "2019-09-04T20:07:06Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "3e525ec06e3ae9939654cf2ff25c3553c6d015e1",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +48,52 @@   * Drops the specified number of elements from this stream.\n   */\n  final def drop(n: Int): ZStreamChunk[R, E, A] =\n    ZStreamChunk {\n      ZStream[R, E, Chunk[A]] {"
  }
]