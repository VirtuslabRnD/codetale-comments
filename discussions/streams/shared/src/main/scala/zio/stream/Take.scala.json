[
  {
    "id" : "9bacd7fc-0557-43c4-85f0-ad1e872847db",
    "prId" : 2703,
    "prUrl" : "https://github.com/zio/zio/pull/2703#pullrequestreview-349618735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c54f2cf8-6956-4869-9e9e-3d37e5c6170c",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Ouch, good catch here!",
        "createdAt" : "2020-01-28T16:16:08Z",
        "updatedAt" : "2020-01-28T16:16:14Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "dbcea7c4-31ec-43e8-af2a-890ad85e5b6d",
        "parentId" : "c54f2cf8-6956-4869-9e9e-3d37e5c6170c",
        "authorId" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "body" : "It's all good.",
        "createdAt" : "2020-01-28T18:52:43Z",
        "updatedAt" : "2020-01-28T18:52:43Z",
        "lastEditedBy" : "6bab7be3-690b-49f9-9a0d-a8415f4c0c8e",
        "tags" : [
        ]
      }
    ],
    "commit" : "d90b56d1977583a7029bedccf03988c403f1e12d",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +63,67 @@  def fromPull[R, E, A](pull: Pull[R, E, A]): ZIO[R, Nothing, Take[E, A]] =\n    pull.foldCause(\n      Cause.sequenceCauseOption(_).fold[Take[E, A]](Take.End)(Take.Fail(_)),\n      Take.Value(_)\n    )"
  },
  {
    "id" : "9bd004b0-cf7f-4cc8-8853-890e8ecba96a",
    "prId" : 1434,
    "prUrl" : "https://github.com/zio/zio/pull/1434#pullrequestreview-276283729",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "014062f6-7e9a-47f0-9d2a-c13348cde787",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "👍🏻",
        "createdAt" : "2019-08-18T15:23:16Z",
        "updatedAt" : "2019-08-19T00:33:35Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e5e5d20720bab5dd51f9d52b5b09cb0e95f84ed",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +61,65 @@  case object End                           extends Take[Nothing, Nothing]\n\n  final def fromInputStream[R, E, A](is: InputStream[R, E, A]): ZIO[R, Nothing, Take[E, A]] =\n    is.fold(_.fold[Take[E, A]](Take.End)(e => Take.Fail(Cause.fail(e))), Take.Value(_))\n"
  }
]