[
  {
    "id" : "2c4979be-8318-4946-9b5b-e8594f829a0d",
    "prId" : 3396,
    "prUrl" : "https://github.com/zio/zio/pull/3396#pullrequestreview-395724468",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ed8dec3e-43ea-40ab-9cf8-8c7b6896d5a6",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Hmm, if `costFn` had access to `O` in `foldWeighted`, we could probably write this in terms of it.",
        "createdAt" : "2020-04-17T17:05:11Z",
        "updatedAt" : "2020-04-17T20:21:08Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      },
      {
        "id" : "08aacd1a-2e52-4509-a093-529deb140baa",
        "parentId" : "ed8dec3e-43ea-40ab-9cf8-8c7b6896d5a6",
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Yeah. That's what I thought as well. Do you think that'd be a good addition? A `costFn` of the form `(I, O) => Long` could allow for more sophisticated forms of cost calculation.",
        "createdAt" : "2020-04-17T17:12:14Z",
        "updatedAt" : "2020-04-17T20:21:08Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      },
      {
        "id" : "e3abff47-56ec-437c-a8d8-eabdf35913bc",
        "parentId" : "ed8dec3e-43ea-40ab-9cf8-8c7b6896d5a6",
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "Yes, definitely. The most powerful version can then power all other combinators. ZIO is full of the same kind of thing.",
        "createdAt" : "2020-04-17T19:39:31Z",
        "updatedAt" : "2020-04-17T20:21:08Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "308f2c902ce282f18c67a4d6dd424815d780b4d1",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +111,115 @@   * be merged with the function `f`.\n   */\n  def collectAllToMapN[K, I](n: Long)(key: I => K)(f: (I, I) => I): ZTransducer[Any, Nothing, I, Map[K, I]] =\n    foldWeighted(Map[K, I]())((acc, i: I) => if (acc contains key(i)) 0 else 1, n) { (acc, i) =>\n      val k = key(i)"
  },
  {
    "id" : "90d3e252-a5fc-46c7-b2d2-ff9deda93909",
    "prId" : 3396,
    "prUrl" : "https://github.com/zio/zio/pull/3396#pullrequestreview-395748543",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e8eb548f-71e2-4536-b9bf-672833fb9c8e",
        "parentId" : null,
        "authorId" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "body" : "I see, yeah that makes sense, great catchüïµÔ∏è‚Äç‚ôÇÔ∏è üí™ ",
        "createdAt" : "2020-04-17T20:21:29Z",
        "updatedAt" : "2020-04-17T20:21:29Z",
        "lastEditedBy" : "cc8bc8c4-90ec-4817-908a-529be81ef42a",
        "tags" : [
        ]
      }
    ],
    "commit" : "308f2c902ce282f18c67a4d6dd424815d780b4d1",
    "line" : 166,
    "diffHunk" : "@@ -1,1 +317,321 @@              val is = decompose(i)\n\n              if (is.length <= 1 && !dirty)\n                // If `i` cannot be decomposed, we need to cross the `max` threshold. To\n                // minimize \"injury\", we only allow this when we haven't added anything else"
  },
  {
    "id" : "eb1c8ce8-0ad3-4643-8a97-fab15a3fdb13",
    "prId" : 3349,
    "prUrl" : "https://github.com/zio/zio/pull/3349#pullrequestreview-392437954",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54a32ab6-6782-4f17-9d16-7e56d39cc7e2",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "Love this btw!",
        "createdAt" : "2020-04-13T21:03:41Z",
        "updatedAt" : "2020-04-17T06:31:30Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "10286f5d69d92d02fed1b6a7d1430aa268b02ed2",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +104,108 @@   */\n  def collectAllWhile[I](p: I => Boolean): ZTransducer[Any, Nothing, I, List[I]] =\n    fold[I, (List[I], Boolean)]((Nil, true))(_._2) {\n      case ((as, _), a) => if (p(a)) (a :: as, true) else (as, false)\n    }.map(_._1.reverse).filter(_.nonEmpty)"
  },
  {
    "id" : "4eedb147-ede8-4d35-82a0-845f0a8a3e80",
    "prId" : 3349,
    "prUrl" : "https://github.com/zio/zio/pull/3349#pullrequestreview-394934735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb754af1-a02c-4ba7-988f-0f5d4f5eecb4",
        "parentId" : null,
        "authorId" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "body" : "I like this escape hatch! Worth adding a note to the scaladoc üëçüèª",
        "createdAt" : "2020-04-16T19:26:46Z",
        "updatedAt" : "2020-04-17T06:31:30Z",
        "lastEditedBy" : "4f7a0777-ad97-4424-aa99-3fcea1de6a97",
        "tags" : [
        ]
      }
    ],
    "commit" : "10286f5d69d92d02fed1b6a7d1430aa268b02ed2",
    "line" : 210,
    "diffHunk" : "@@ -1,1 +276,280 @@              if (is.isEmpty)\n                (os0 + f(state.result, i), initial, false)\n              else if (is.length == 1)\n                (os0 + f(state.result, is(0)), initial, false)\n              else"
  }
]