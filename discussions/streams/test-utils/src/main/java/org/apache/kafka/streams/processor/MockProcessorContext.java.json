[
  {
    "id" : "75cfe153-304b-48bd-8415-7fe961fec0ff",
    "prId" : 4736,
    "prUrl" : "https://github.com/apache/kafka/pull/4736#pullrequestreview-106164090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b8a598e-0590-4d82-8695-ca2c36cb956c",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I'd suggest when editing on `https://kafka.apache.org/11/documentation/streams/developer-guide/testing.html` state clearly how to switch from an in-memory store to a persistent store when move from unit test code to production code.",
        "createdAt" : "2018-03-20T16:18:09Z",
        "updatedAt" : "2018-03-26T23:28:01Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "cfecdd2a-bfc3-4dce-9a76-aea27041824c",
        "parentId" : "9b8a598e-0590-4d82-8695-ca2c36cb956c",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "good idea. Maybe I'll include a link to that page in the javadoc?",
        "createdAt" : "2018-03-20T20:48:26Z",
        "updatedAt" : "2018-03-26T23:28:01Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "4d062ac2-4fa2-4ab6-8f90-10c6cc68e193",
        "parentId" : "9b8a598e-0590-4d82-8695-ca2c36cb956c",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Sounds good.",
        "createdAt" : "2018-03-20T21:38:07Z",
        "updatedAt" : "2018-03-26T23:28:01Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "b5d40b3b-b773-46de-9d84-e7fa2875f294",
        "parentId" : "9b8a598e-0590-4d82-8695-ca2c36cb956c",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "This link might break in the future. Do you really want to put it in?",
        "createdAt" : "2018-03-20T22:44:17Z",
        "updatedAt" : "2018-03-26T23:28:01Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "eca2b3b0-5712-4c9b-b618-d61ef7f9831e",
        "parentId" : "9b8a598e-0590-4d82-8695-ca2c36cb956c",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I think it's nice to link to it from here. We can add the stablest link we're aware of (I'm not sure what `/11/` is for). If it does break, it will at least clue the reader in that there *is* more documentation out there, and they can search until they find it.\r\n\r\nI have had this exact thing happen to me before, and found useful information that way.\r\n\r\nBut I understand it's also setting us up to have a broken link in our docs (since there's no process in place to verify it resolves), which doesn't make us look great if/when it breaks.\r\n\r\nI don't feel strongly either way.",
        "createdAt" : "2018-03-21T02:08:53Z",
        "updatedAt" : "2018-03-26T23:28:01Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "f714918d-c616-4c77-8d63-dc5768d987db",
        "parentId" : "9b8a598e-0590-4d82-8695-ca2c36cb956c",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I see the following problem: either we link to a stable version like 11 or the \"latest\" version. However, for the first case, we need to update the link each release (and I am pretty sure we will forget at some point and thus link to the wrong version). For the second case, the link \"changes\" dynamically, and will also link to the wrong version. Thus, I would prefer to not put links to the docs into the JavaDoc. It's a paint maintain them.",
        "createdAt" : "2018-03-21T20:52:54Z",
        "updatedAt" : "2018-03-26T23:28:01Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "51a109d1-4d49-41cb-852b-ea3a56917f51",
        "parentId" : "9b8a598e-0590-4d82-8695-ca2c36cb956c",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Agreed. I've removed it.",
        "createdAt" : "2018-03-22T15:15:06Z",
        "updatedAt" : "2018-03-26T23:28:01Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8386332ceb90f2b6f3d610d5e34eb199de6364b",
    "line" : 175,
    "diffHunk" : "@@ -1,1 +173,177 @@     * Most unit tests using this mock won't need to know the taskId,\n     * and most unit tests should be able to get by with the\n     * {@link InMemoryKeyValueStore}, so the stateDir won't matter.\n     *\n     * @param config a Properties object, used to configure the context and the processor."
  },
  {
    "id" : "fe37d92d-8ae9-4240-b130-1dd3a9431941",
    "prId" : 4736,
    "prUrl" : "https://github.com/apache/kafka/pull/4736#pullrequestreview-106232305",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04fa157d-7119-4502-b8e4-da4356c8c0e5",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Do we need to set both?",
        "createdAt" : "2018-03-21T20:54:39Z",
        "updatedAt" : "2018-03-26T23:28:01Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "5656d60c-d5f0-4dff-86e9-ea1f8952f0a8",
        "parentId" : "04fa157d-7119-4502-b8e4-da4356c8c0e5",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Ok, I'l take out the url.",
        "createdAt" : "2018-03-22T01:31:17Z",
        "updatedAt" : "2018-03-26T23:28:01Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "141f1bd0-8572-427c-8997-020d7cba1a96",
        "parentId" : "04fa157d-7119-4502-b8e4-da4356c8c0e5",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "yes, both configs are required.",
        "createdAt" : "2018-03-22T01:31:33Z",
        "updatedAt" : "2018-03-26T23:28:01Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "1eccb200-79d2-4631-880a-14c57ff7940a",
        "parentId" : "04fa157d-7119-4502-b8e4-da4356c8c0e5",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Where does it fail if we don't specify them? In KS they are required, because we pass the configs into a `StreamsConfig` -- but we don't use `StreamsConfig` (if I did not miss this) thus I think we can simplify the code here and just pass in empty `Properties`",
        "createdAt" : "2018-03-22T06:58:08Z",
        "updatedAt" : "2018-03-26T23:28:01Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "7cd0c3a8-2671-492a-96dc-7136beaecbe8",
        "parentId" : "04fa157d-7119-4502-b8e4-da4356c8c0e5",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "```\r\norg.apache.kafka.common.config.ConfigException: Missing required configuration \"application.id\" which has no default value.\r\n\r\n\tat org.apache.kafka.common.config.ConfigDef.parseValue(ConfigDef.java:472)\r\n\tat org.apache.kafka.common.config.ConfigDef.parse(ConfigDef.java:462)\r\n\tat org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:62)\r\n\tat org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:75)\r\n\tat org.apache.kafka.streams.StreamsConfig.<init>(StreamsConfig.java:703)\r\n\tat org.apache.kafka.streams.processor.MockProcessorContext.<init>(MockProcessorContext.java:190)\r\n\tat org.apache.kafka.streams.MockProcessorContextTest.fullConstructorShouldSetAllExpectedAttributes(MockProcessorContextTest.java:415)\r\n```\r\nand\r\n```\r\norg.apache.kafka.common.config.ConfigException: Missing required configuration \"bootstrap.servers\" which has no default value.\r\n\r\n\tat org.apache.kafka.common.config.ConfigDef.parseValue(ConfigDef.java:472)\r\n\tat org.apache.kafka.common.config.ConfigDef.parse(ConfigDef.java:462)\r\n\tat org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:62)\r\n\tat org.apache.kafka.common.config.AbstractConfig.<init>(AbstractConfig.java:75)\r\n\tat org.apache.kafka.streams.StreamsConfig.<init>(StreamsConfig.java:703)\r\n\tat org.apache.kafka.streams.processor.MockProcessorContext.<init>(MockProcessorContext.java:190)\r\n\tat org.apache.kafka.streams.MockProcessorContextTest.fullConstructorShouldSetAllExpectedAttributes(MockProcessorContextTest.java:415)\r\n```",
        "createdAt" : "2018-03-22T15:14:22Z",
        "updatedAt" : "2018-03-26T23:28:01Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "333b5fc6-a858-4d0e-80c5-6aeb5dcf914d",
        "parentId" : "04fa157d-7119-4502-b8e4-da4356c8c0e5",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Ah. Thanks. I missed the line in the constructor when a `StreamsConfig` is created -- thought there is no `StreamsConfig`. Makes sense now.",
        "createdAt" : "2018-03-22T17:50:59Z",
        "updatedAt" : "2018-03-26T23:28:01Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8386332ceb90f2b6f3d610d5e34eb199de6364b",
    "line" : 164,
    "diffHunk" : "@@ -1,1 +162,166 @@                {\n                    put(StreamsConfig.APPLICATION_ID_CONFIG, \"\");\n                    put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"\");\n                }\n            },"
  },
  {
    "id" : "6c8e3b22-f5b8-472f-8ea9-5a6bf93601c5",
    "prId" : 4736,
    "prUrl" : "https://github.com/apache/kafka/pull/4736#pullrequestreview-106233929",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b6e7d97-2bcf-43f7-9942-7c2a3d0e36ca",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I understand why. But other contributors might not (and I might forget why in the future and want to change it...). It's not obvious from the code and thus should be explained with a commend, IMHO.",
        "createdAt" : "2018-03-22T06:56:40Z",
        "updatedAt" : "2018-03-26T23:28:01Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "83b44a32-00cb-4958-bb78-0af5cefcbb80",
        "parentId" : "9b6e7d97-2bcf-43f7-9942-7c2a3d0e36ca",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Alternatively, I could check for null in the getters and throw an exception explaining that the fields must be initialized before use. This would document the situation for us, as well as explain it more clearly for users.",
        "createdAt" : "2018-03-22T15:10:04Z",
        "updatedAt" : "2018-03-26T23:28:01Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "97c8b366-e4fc-4c31-923a-6ee54bde8b00",
        "parentId" : "9b6e7d97-2bcf-43f7-9942-7c2a3d0e36ca",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Sounds good. Would be helpful for users to understand. The exception message should explain what they need to do to avoid the exception.",
        "createdAt" : "2018-03-22T17:54:36Z",
        "updatedAt" : "2018-03-26T23:28:01Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8386332ceb90f2b6f3d610d5e34eb199de6364b",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +62,66 @@    private Integer partition;\n    private Long offset;\n    private Long timestamp;\n\n    // mocks ================================================"
  },
  {
    "id" : "33b3bef5-33ed-483b-a79d-29a1dde2ccc3",
    "prId" : 5567,
    "prUrl" : "https://github.com/apache/kafka/pull/5567#pullrequestreview-149772902",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e87db814-92d7-4540-84c1-0f075bce5e61",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This preserves the existing behavior that if both `to.timestamp` and `this.timestamp` are unset, the forward time would be `-1`.",
        "createdAt" : "2018-08-27T15:56:16Z",
        "updatedAt" : "2018-09-24T14:28:33Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "035b26310e76216b502839a6b9f22bf1fc75fee2",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +414,418 @@        capturedForwards.add(\n            new CapturedForward(\n                to.timestamp == -1 ? to.withTimestamp(timestamp == null ? -1 : timestamp) : to,\n                new KeyValue(key, value)\n            )"
  },
  {
    "id" : "fb3942f2-a456-48c6-bf8d-002898996f35",
    "prId" : 5795,
    "prUrl" : "https://github.com/apache/kafka/pull/5795#pullrequestreview-166721923",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0cff6b2d-5d4b-4d8a-8973-bdbb0920e6ce",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "I think it should be fine to set the recording level to debug for all unit tests, rather than create a way to configure it.",
        "createdAt" : "2018-10-16T19:42:00Z",
        "updatedAt" : "2018-11-27T01:22:02Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "5f90348a-26ea-4911-a2d0-4055b21e612c",
        "parentId" : "0cff6b2d-5d4b-4d8a-8973-bdbb0920e6ce",
        "authorId" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "body" : "I agree",
        "createdAt" : "2018-10-19T23:40:16Z",
        "updatedAt" : "2018-11-27T01:22:02Z",
        "lastEditedBy" : "4c968502-bb3d-46ee-8719-0c0bdbc6242f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bd8806c91d24ee933ce6e1ab8972e725bf42ef12",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +212,216 @@        this.stateDir = stateDir;\n        final MetricConfig metricConfig = new MetricConfig();\n        metricConfig.recordLevel(Sensor.RecordingLevel.DEBUG);\n        this.metrics = new StreamsMetricsImpl(\n            new Metrics(metricConfig),"
  },
  {
    "id" : "ccfa54af-0cbf-4936-a7e1-1b5db511f61b",
    "prId" : 8669,
    "prUrl" : "https://github.com/apache/kafka/pull/8669#pullrequestreview-412723284",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c5cf1f75-d699-4beb-9136-aa7992bd11ad",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Not sure about this change ;) ",
        "createdAt" : "2020-05-15T16:20:59Z",
        "updatedAt" : "2020-05-18T16:57:45Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "f807b4f8da716905265a37eb0a2966496781cae4",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +76,80 @@    private boolean committed = false;\n\n\n    /**\n     * {@link CapturedPunctuator} holds captured punctuators, along with their scheduling information."
  },
  {
    "id" : "2acea400-bc91-4f06-a0ee-6e1e70d4dd45",
    "prId" : 9098,
    "prUrl" : "https://github.com/apache/kafka/pull/9098#pullrequestreview-459132232",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3a4f447e-6984-4e5d-8d6f-626d29e36801",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Interesting... Should we add a `Time` argument to the constructor? It would be a minor amendment to the KIP.",
        "createdAt" : "2020-07-30T16:46:43Z",
        "updatedAt" : "2020-08-12T15:30:08Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "03dfe216-4cf2-46b4-bf95-8501670ac1c3",
        "parentId" : "3a4f447e-6984-4e5d-8d6f-626d29e36801",
        "authorId" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "body" : "I would prefer to postpone that, because currently it is not strictly needed and the time is only used in the RocksDB recording trigger that records only internal RocksDB metrics. I do not see how exposing time would be useful for users during testing. If anybody complains, we can still do it in a future KIP.",
        "createdAt" : "2020-07-31T12:23:27Z",
        "updatedAt" : "2020-08-12T15:30:08Z",
        "lastEditedBy" : "b7cbfdaf-f3e2-4130-8254-501ace9562ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "fb15c3a5bf91f9a46d6914739b617ca2291f52da",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +230,234 @@            threadId,\n            streamsConfig.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            Time.SYSTEM\n        );\n        TaskMetrics.droppedRecordsSensorOrSkippedRecordsSensor(threadId, taskId.toString(), metrics);"
  },
  {
    "id" : "343542c0-f402-4ef8-aa8c-3c678ef43ae3",
    "prId" : 9744,
    "prUrl" : "https://github.com/apache/kafka/pull/9744#pullrequestreview-604764085",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "61500a88-0d2d-44e0-815d-c3d6cba79ffc",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "This class is public API, so we cannot remove `setTimestamp` but can only deprecate it.\r\n\r\nWe also need to update the KIP to mention the deprecation and the newly added methods.",
        "createdAt" : "2021-03-04T01:41:48Z",
        "updatedAt" : "2021-03-09T22:23:12Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "18ca7f8e-acc9-4c3e-be53-d67e4d43c001",
        "parentId" : "61500a88-0d2d-44e0-815d-c3d6cba79ffc",
        "authorId" : "2a225e30-9f0d-45bc-ab55-5afe285d3716",
        "body" : "@mjsax added the method setTimestamp back which sets record timestamp and added Deprecated annotation. Also updated the [kip](https://cwiki.apache.org/confluence/display/KAFKA/KIP-622%3A+Add+currentSystemTimeMs+and+currentStreamTimeMs+to+ProcessorContext).",
        "createdAt" : "2021-03-05T03:00:17Z",
        "updatedAt" : "2021-03-09T22:23:12Z",
        "lastEditedBy" : "2a225e30-9f0d-45bc-ab55-5afe285d3716",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd16696cd6c4485aeb8649b48c4e81d402bc857d",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +397,401 @@\n    public void setCurrentStreamTimeMs(final long currentStreamTimeMs) {\n        this.currentStreamTimeMs = currentStreamTimeMs;\n    }\n"
  },
  {
    "id" : "edaedbee-f5d4-4b85-9d28-16b4be7cbb34",
    "prId" : 10730,
    "prUrl" : "https://github.com/apache/kafka/pull/10730#pullrequestreview-663556817",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "60b617b4-187f-4f92-b90c-5d3200216050",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Seem we are missing a check for `intervalMs < 1` -- can we add it?",
        "createdAt" : "2021-05-19T18:37:34Z",
        "updatedAt" : "2021-05-19T18:37:34Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "e995e87f-9b2d-48e2-93c0-0f30767fabf0",
        "parentId" : "60b617b4-187f-4f92-b90c-5d3200216050",
        "authorId" : "57e5aebe-6b6e-42ba-91fa-921189a7cab6",
        "body" : "Sure, I'll add them tomorrow morning (CEST)",
        "createdAt" : "2021-05-19T18:39:09Z",
        "updatedAt" : "2021-05-19T18:39:09Z",
        "lastEditedBy" : "57e5aebe-6b6e-42ba-91fa-921189a7cab6",
        "tags" : [
        ]
      },
      {
        "id" : "88b6a4d7-77ef-42b1-b57f-dd510b374375",
        "parentId" : "60b617b4-187f-4f92-b90c-5d3200216050",
        "authorId" : "57e5aebe-6b6e-42ba-91fa-921189a7cab6",
        "body" : "I managed to do the change now, feel free to review it if you have the time.",
        "createdAt" : "2021-05-19T18:54:44Z",
        "updatedAt" : "2021-05-19T18:54:44Z",
        "lastEditedBy" : "57e5aebe-6b6e-42ba-91fa-921189a7cab6",
        "tags" : [
        ]
      }
    ],
    "commit" : "7a46bfa1ef4925fad7cc6db92f48950b6182fe12",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +456,460 @@                                final PunctuationType type,\n                                final Punctuator callback) throws IllegalArgumentException {\n        final long intervalMs = ApiUtils.validateMillisecondDuration(interval, \"interval\");\n        if (intervalMs < 1) {\n            throw new IllegalArgumentException(\"The minimum supported scheduling interval is 1 millisecond.\");"
  }
]