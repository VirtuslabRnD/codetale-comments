[
  {
    "id" : "373cd28d-f4b3-410d-b9bf-947ffcb6ef72",
    "prId" : 9396,
    "prUrl" : "https://github.com/apache/kafka/pull/9396#pullrequestreview-507597224",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec032b56-8bad-4811-9e53-d8c2bac5e7d2",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "This is a clone of the `processor.MockProcessorContext`, but implementing the new `api.ProcessorContext` interface.\r\n\r\nThe two context interfaces don't technically collide, but creating a standalone implementation allows us to provide type safety in the CapturedForward inner class without any backward compatibility concerns.\r\n\r\nIt also (IMO) makes it easier for users to make a clean switch to the new API by removing any ambiguity about whether a test is making use of the old API or the new API, or some mixture of both.",
        "createdAt" : "2020-10-08T17:57:54Z",
        "updatedAt" : "2020-10-08T18:12:54Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "9f4fd15f-ffcc-4f81-a848-ce89cad61d80",
        "parentId" : "ec032b56-8bad-4811-9e53-d8c2bac5e7d2",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Since we are adding a new class, could we have it extend InternalProcessorContext then, so that when we remove the old ones we can also cleanup the non-testing functions that branch on checking `instanceof InternalProcessorContext`: I'm assuming that `InternalProcessorContext` would stay in the end state, it would just extend `api.ProcessorContext<Object, Object>` and not `StateStoreContext` in the future.",
        "createdAt" : "2020-10-08T23:11:59Z",
        "updatedAt" : "2020-10-08T23:28:18Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "e66ea9c0-2094-4c50-bd42-e417617782d2",
        "parentId" : "ec032b56-8bad-4811-9e53-d8c2bac5e7d2",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Unfortunately, that would actually expose `InternalProcessorContext` itself as a public interface (any supertype of a public type is a public type).",
        "createdAt" : "2020-10-10T02:54:42Z",
        "updatedAt" : "2020-10-10T02:54:42Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "99218daa-28fb-4cb4-92e0-7bc823465aad",
        "parentId" : "ec032b56-8bad-4811-9e53-d8c2bac5e7d2",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "`InternalProcessorContext` is already public interface but it's in `internals` package, so I figured it is okay?\r\n\r\nAnyways, this is not much blocking this PR, so feel free to merge it anyways and we can keep discussing here while you merge.",
        "createdAt" : "2020-10-12T22:56:59Z",
        "updatedAt" : "2020-10-12T22:57:00Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "1552a2d9-e989-490b-99e9-089e7c89b708",
        "parentId" : "ec032b56-8bad-4811-9e53-d8c2bac5e7d2",
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Thanks. I'll go ahead with the merge, then.\r\n\r\nIt seems like `InternalProcessorContext` is only \"public\" in the sense that Java 8 is insufficiently expressive to make it private. I guess I should say \"internal\" and \"external\". But it is certainly an _internal_ type, therefore, we should not ever return it to the users when they call _external_ APIs (such as the constructor of this class).\r\n\r\nOnce we upgrade to java 9, we should add module definitions so that we stop exporting internal types in the public API completely. As I understand things, it would actually become a compiler error at that point for us to provide an external class that inherits from an internal interface.\r\n\r\nI guess I don't see this as a big concern anyway. The way I implemented the state stores in the last PR makes them capable of accepting any implementation of `ProcessorContext` or `StateStoreContext`, although they'll disable some features if the context isn't an instance of `InternalProcessorContext`. To me, this seems like a fine situation. We could also note that there is https://cwiki.apache.org/confluence/display/KAFKA/KIP-622%3A+Add+currentSystemTimeMs+and+currentStreamTimeMs+to+ProcessorContext, which would remove the need for casting to InternalProcessorContext to begin with.",
        "createdAt" : "2020-10-13T16:01:54Z",
        "updatedAt" : "2020-10-13T16:01:54Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "428c6f32f056fd791f8d676a5febc7f5f8de654f",
    "line" : 69,
    "diffHunk" : "@@ -1,1 +67,71 @@ * {@link Topology} and using the {@link TopologyTestDriver}.\n */\npublic class MockProcessorContext<KForward, VForward> implements ProcessorContext<KForward, VForward>, RecordCollector.Supplier {\n    // Immutable fields ================================================\n    private final StreamsMetricsImpl metrics;"
  },
  {
    "id" : "e72bc62a-b20b-4e9c-bcf6-97d8d4ba08c3",
    "prId" : 9396,
    "prUrl" : "https://github.com/apache/kafka/pull/9396#pullrequestreview-505010286",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5dd51af0-af6e-4c17-b8aa-d5c4cd22e343",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "`stateDir` isn't a required argument, but having a null value for it and then trying to use a rocksdb store leads to a _very_ cryptic error like, \"you have to open all column families\". Placing a null-check right here allows us to fail fast and prints an explanatory message any time you use the context with a component that actually needs the stateDir.\r\n\r\nThis was also a problem with the prior implementation, but I didn't notice it until I implemented `MockProcessorContextStateStoreTest`.",
        "createdAt" : "2020-10-08T18:00:52Z",
        "updatedAt" : "2020-10-08T18:12:54Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      }
    ],
    "commit" : "428c6f32f056fd791f8d676a5febc7f5f8de654f",
    "line" : 300,
    "diffHunk" : "@@ -1,1 +298,302 @@                \"(such as using an in-memory store), or use the full MockProcessorContext constructor to supply \" +\n                \"a non-null stateDir argument.\"\n        );\n    }\n"
  },
  {
    "id" : "b669c1d3-f03a-4ac7-8ef4-5e84cbb3fb13",
    "prId" : 9396,
    "prUrl" : "https://github.com/apache/kafka/pull/9396#pullrequestreview-505238146",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95b79e97-9b32-4b8d-a194-3b3ea5f9b755",
        "parentId" : null,
        "authorId" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "body" : "Rather than have the MockProcessorContext implement StateStoreContext as well, I think it's a good idea to explicitly get a StateStoreContext view of the same object. This will help users to have a clearer understanding of which context is which.",
        "createdAt" : "2020-10-08T18:04:01Z",
        "updatedAt" : "2020-10-08T18:12:54Z",
        "lastEditedBy" : "f84c555e-0e5d-4773-b994-4121b6b8dada",
        "tags" : [
        ]
      },
      {
        "id" : "2ca02873-9372-4aea-8a03-c9d6423a6d09",
        "parentId" : "95b79e97-9b32-4b8d-a194-3b3ea5f9b755",
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "I agree. I think in the long run MockProcessorContext could extend InternalProcessorContext, which only extends api.ProcessorContext. When that's the case we should be able to remove the non-testing code's safeguards.",
        "createdAt" : "2020-10-08T23:25:19Z",
        "updatedAt" : "2020-10-08T23:28:18Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      }
    ],
    "commit" : "428c6f32f056fd791f8d676a5febc7f5f8de654f",
    "line" : 446,
    "diffHunk" : "@@ -1,1 +444,448 @@     * @return a {@link StateStoreContext} that delegates to this ProcessorContext.\n     */\n    public StateStoreContext getStateStoreContext() {\n        return new StateStoreContext() {\n            @Override"
  }
]