[
  {
    "id" : "551e4453-8dfe-402a-b08c-2a04ba7ae22d",
    "prId" : 4402,
    "prUrl" : "https://github.com/apache/kafka/pull/4402#pullrequestreview-89254910",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee90e707-4cb1-41c4-ad32-47cf5371fb6b",
        "parentId" : null,
        "authorId" : "2c9c4dbb-be9d-424e-8d8a-9f3d67f8372b",
        "body" : "should we also be checking that `topicName` is non-null?",
        "createdAt" : "2018-01-15T12:32:51Z",
        "updatedAt" : "2018-01-29T20:50:45Z",
        "lastEditedBy" : "2c9c4dbb-be9d-424e-8d8a-9f3d67f8372b",
        "tags" : [
        ]
      },
      {
        "id" : "7fbef7b4-eb42-4b03-a374-39b387462808",
        "parentId" : "ee90e707-4cb1-41c4-ad32-47cf5371fb6b",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "I want to allow `topicName=null` for the case that somebody wants a factory without default topic name. We have a constructor without taking a defaultTopicName.",
        "createdAt" : "2018-01-16T21:29:25Z",
        "updatedAt" : "2018-01-29T20:50:45Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e6d22473e7cfc73ccb2321b04fe05f1998505f3",
    "line" : 136,
    "diffHunk" : "@@ -1,1 +134,138 @@        Objects.requireNonNull(keySerializer, \"keySerializer cannot be null\");\n        Objects.requireNonNull(valueSerializer, \"valueSerializer cannot be null\");\n        this.topicName = defaultTopicName;\n        this.keySerializer = keySerializer;\n        this.valueSerializer = valueSerializer;"
  },
  {
    "id" : "2723933d-3038-4ff7-9927-a0bc89c274f3",
    "prId" : 4402,
    "prUrl" : "https://github.com/apache/kafka/pull/4402#pullrequestreview-90669547",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "abf6644c-9ca1-43be-a407-cd417629670c",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Hmm, the package name is different with other classes under the `test-utils` artifact, is this intentional? (see my other comment above)",
        "createdAt" : "2018-01-22T23:10:35Z",
        "updatedAt" : "2018-01-29T20:50:45Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "8f371e24-3558-4071-9c1a-4c86472871ee",
        "parentId" : "abf6644c-9ca1-43be-a407-cd417629670c",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "See answer above.",
        "createdAt" : "2018-01-22T23:58:51Z",
        "updatedAt" : "2018-01-29T20:50:45Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      }
    ],
    "commit" : "5e6d22473e7cfc73ccb2321b04fe05f1998505f3",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@ * limitations under the License.\n */\npackage org.apache.kafka.streams.test;\n\nimport org.apache.kafka.clients.consumer.ConsumerRecord;"
  },
  {
    "id" : "4b191d8f-180f-4617-930d-153de522516f",
    "prId" : 4955,
    "prUrl" : "https://github.com/apache/kafka/pull/4955#pullrequestreview-121657578",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d98f41a-26fd-4064-8d15-00f60269235d",
        "parentId" : null,
        "authorId" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "body" : "Could we update the KIP wiki for this function as well?",
        "createdAt" : "2018-05-20T04:50:33Z",
        "updatedAt" : "2018-05-22T16:57:39Z",
        "lastEditedBy" : "eba565e8-e1d5-4749-9c9a-5d117de6c96c",
        "tags" : [
        ]
      },
      {
        "id" : "ce8cd535-4a46-4d1a-9718-417801ccd393",
        "parentId" : "6d98f41a-26fd-4064-8d15-00f60269235d",
        "authorId" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "body" : "Added",
        "createdAt" : "2018-05-20T13:37:05Z",
        "updatedAt" : "2018-05-22T16:57:39Z",
        "lastEditedBy" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "tags" : [
        ]
      },
      {
        "id" : "d8c55052-a0d8-439b-9ddb-954000608b12",
        "parentId" : "6d98f41a-26fd-4064-8d15-00f60269235d",
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Seems that you picked 3 overloads arbitrarily for header extension. If we only consider the overloads that do not take any lists as parameters, there are 8 overloads to be extended. Any reason why you picked only 3?",
        "createdAt" : "2018-05-20T21:31:07Z",
        "updatedAt" : "2018-05-22T16:57:39Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "99c58b05-ba1c-4242-bb0e-55dc98f131bf",
        "parentId" : "6d98f41a-26fd-4064-8d15-00f60269235d",
        "authorId" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "body" : "Just added the ones required by new tests. I'm adding the missing ones :)",
        "createdAt" : "2018-05-20T22:53:42Z",
        "updatedAt" : "2018-05-22T16:57:39Z",
        "lastEditedBy" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "tags" : [
        ]
      }
    ],
    "commit" : "19db8d2e3a8dfb123eba9ea6637938017a4324aa",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +199,203 @@     * @return the generated {@link ConsumerRecord}\n     */\n    public ConsumerRecord<byte[], byte[]> create(final String topicName,\n                                                 final K key,\n                                                 final V value,"
  },
  {
    "id" : "023c48f9-246b-4a4d-8003-de1d5d7fb7a8",
    "prId" : 4955,
    "prUrl" : "https://github.com/apache/kafka/pull/4955#pullrequestreview-121656849",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d88f6cb9-0a78-437b-9c82-17220e036457",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Nit introduced in this PR, but can you fix it: missing in JavaDoc comment: `Does not auto advance internally tracked time.`",
        "createdAt" : "2018-05-20T21:27:48Z",
        "updatedAt" : "2018-05-22T16:57:39Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "5fc42e64-04de-4d9d-9ce8-9010620fab07",
        "parentId" : "d88f6cb9-0a78-437b-9c82-17220e036457",
        "authorId" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "body" : "ack.",
        "createdAt" : "2018-05-20T22:25:38Z",
        "updatedAt" : "2018-05-22T16:57:39Z",
        "lastEditedBy" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "tags" : [
        ]
      }
    ],
    "commit" : "19db8d2e3a8dfb123eba9ea6637938017a4324aa",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +319,323 @@     * @return the generated {@link ConsumerRecord}\n     */\n    public ConsumerRecord<byte[], byte[]> create(final String topicName,\n                                                 final V value,\n                                                 final long timestampMs) {"
  },
  {
    "id" : "b38d39f1-b7ad-422c-951f-878661cf1fe2",
    "prId" : 4955,
    "prUrl" : "https://github.com/apache/kafka/pull/4955#pullrequestreview-121947275",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30d8a853-43a2-40a0-a373-948cb609217c",
        "parentId" : null,
        "authorId" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "body" : "Please add a test to `ConsumerRecordFactoryTest`",
        "createdAt" : "2018-05-21T17:48:32Z",
        "updatedAt" : "2018-05-22T16:57:39Z",
        "lastEditedBy" : "9baadc38-cd41-4762-be0c-791258ced78c",
        "tags" : [
        ]
      },
      {
        "id" : "b60c7cd9-e6c6-4f86-b7e1-80f9b9ca63d1",
        "parentId" : "30d8a853-43a2-40a0-a373-948cb609217c",
        "authorId" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "body" : "it's added: `shouldNotAllowToCreateTopicWithNullHeaders`",
        "createdAt" : "2018-05-21T21:05:27Z",
        "updatedAt" : "2018-05-22T16:57:39Z",
        "lastEditedBy" : "f58052af-021e-47d1-bcb5-e22f46383a12",
        "tags" : [
        ]
      }
    ],
    "commit" : "19db8d2e3a8dfb123eba9ea6637938017a4324aa",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +172,176 @@                                                 final long timestampMs) {\n        Objects.requireNonNull(topicName, \"topicName cannot be null.\");\n        Objects.requireNonNull(headers, \"headers cannot be null.\");\n        final byte[] serializedKey = keySerializer.serialize(topicName, key);\n        final byte[] serializedValue = valueSerializer.serialize(topicName, value);"
  }
]