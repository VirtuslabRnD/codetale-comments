[
  {
    "id" : "eb52e92b-67a7-4477-8674-e4d794642fff",
    "prId" : 597,
    "prUrl" : "https://github.com/sbt/zinc/pull/597#pullrequestreview-160270980",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbf9fe41-5812-4679-a3f0-8928fcc3069f",
        "parentId" : null,
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "What's the purpose of this new logic?",
        "createdAt" : "2018-09-28T14:34:36Z",
        "updatedAt" : "2018-10-08T08:10:20Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "b899ab47-1798-4dd4-a6fa-540c6ed8c3cc",
        "parentId" : "cbf9fe41-5812-4679-a3f0-8928fcc3069f",
        "authorId" : "d678c996-c151-48d6-804d-0ec3358d7699",
        "body" : "Well. We are constructing loader `val loader = ClasspathUtilities.toLoader(searchClasspath)` like that, but it is never closed, hodling the jars that it accessed causing problems when we write to them.",
        "createdAt" : "2018-09-28T15:06:54Z",
        "updatedAt" : "2018-10-08T08:10:20Z",
        "lastEditedBy" : "d678c996-c151-48d6-804d-0ec3358d7699",
        "tags" : [
        ]
      },
      {
        "id" : "72122d07-7cd5-4077-81d2-5fdca14e28b9",
        "parentId" : "cbf9fe41-5812-4679-a3f0-8928fcc3069f",
        "authorId" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "body" : "Let's move this and the other change to a new commit and explain why they are used to (this is a general-purpose issue that affects also jars in the classpath that come from dependency resolution).",
        "createdAt" : "2018-09-28T16:27:19Z",
        "updatedAt" : "2018-10-08T08:10:20Z",
        "lastEditedBy" : "ee674eea-a8c8-4bb7-aef2-04e7f846d57d",
        "tags" : [
        ]
      },
      {
        "id" : "e21f4dec-1393-4af5-9e20-ef8b3d7f84cc",
        "parentId" : "cbf9fe41-5812-4679-a3f0-8928fcc3069f",
        "authorId" : "d678c996-c151-48d6-804d-0ec3358d7699",
        "body" : "Done. I also moved construction of classloader closer to the usage.",
        "createdAt" : "2018-10-01T12:26:05Z",
        "updatedAt" : "2018-10-08T08:10:20Z",
        "lastEditedBy" : "d678c996-c151-48d6-804d-0ec3358d7699",
        "tags" : [
        ]
      }
    ],
    "commit" : "a5889917ab9016bd225e175df55255e862e9d04d",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +193,197 @@      // This also affects jars in the classpath that come from dependency resolution.\n      loader match {\n        case u: URLClassLoader => u.close()\n        case _                 => ()\n      }"
  },
  {
    "id" : "4711872c-ac2d-4e2d-9c59-2ecc289ae052",
    "prId" : 181,
    "prUrl" : "https://github.com/sbt/zinc/pull/181#pullrequestreview-1813411",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e13548a1-f8d5-4cbe-b54a-84a4060085c9",
        "parentId" : null,
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "If this is not something that changes between the compilations, it might make sense to put the classfileManager in the constructor parameter along with thing like `scalaInstance`.\n",
        "createdAt" : "2016-09-27T19:05:05Z",
        "updatedAt" : "2016-10-14T22:52:25Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      },
      {
        "id" : "95678fed-dd97-4111-9f91-fe336b45dd59",
        "parentId" : "e13548a1-f8d5-4cbe-b54a-84a4060085c9",
        "authorId" : "a69511bc-20e6-461f-85bc-bd987d12bccb",
        "body" : "iiuc `classfileManager` lives within the scope of incremental compile run of multiple cycles: it will start with an empty set of generated class files and collect them.\n\nhttps://github.com/sbt/zinc/blob/4bc93500d2ce98da15f61fdc291aacceee4f440e/internal/zinc-core/src/main/scala/sbt/internal/inc/Incremental.scala#L76-L78\n\nTherefore its lifespan is not attached to constructor but to each incremental compile call.\n",
        "createdAt" : "2016-09-27T20:04:52Z",
        "updatedAt" : "2016-10-14T22:52:25Z",
        "lastEditedBy" : "a69511bc-20e6-461f-85bc-bd987d12bccb",
        "tags" : [
        ]
      }
    ],
    "commit" : "038ebbe3bfad8a446b78e641dc045512af273ccb",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +44,48 @@   */\n  def compile(sources: Seq[File], options: Seq[String], output: Output, callback: AnalysisCallback,\n    classfileManager: ClassFileManager, reporter: Reporter, log: Logger, progressOpt: Option[CompileProgress]): Unit = {\n    if (sources.nonEmpty) {\n      val absClasspath = classpath.map(_.getAbsoluteFile)"
  }
]