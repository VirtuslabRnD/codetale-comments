[
  {
    "id" : "894c2a68-bfec-495c-a15c-31427163bf80",
    "prId" : 785,
    "prUrl" : "https://github.com/sbt/zinc/pull/785#pullrequestreview-430259469",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e14d9dd-9c56-416b-8050-1ad5e0ec0085",
        "parentId" : null,
        "authorId" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "body" : "I'm trying to integrate this change into sbt, and I'm a bit confused. What does it mean for `externalLookup.lookupAnalyzedClass(binaryClassName)` to return `None` here?\r\nsbt already implements `externalLookup`, so I would like a way to say I don't want to participate in AnalyzedClass lookup, but if I return `None` it would be interpreted as \"I couldn't find the AnalyzedClass\"?",
        "createdAt" : "2020-06-14T19:17:17Z",
        "updatedAt" : "2020-06-14T19:20:06Z",
        "lastEditedBy" : "25a8667a-469c-4af9-ae50-c45d69e5c60d",
        "tags" : [
        ]
      },
      {
        "id" : "1fcbf3be-3ba7-4ca2-b354-a537a4501d80",
        "parentId" : "5e14d9dd-9c56-416b-8050-1ad5e0ec0085",
        "authorId" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "body" : "Yeah, the current setup has no way for `externalLookup.lookupAnalyzedClass` to say \"I don't know, you try\".  You'd have to modify this if you need that.\r\n\r\nI'm not sure why `Some(APIs.emptyAnalyzedClass)` wasn't used for fast-track's \"I got you, here's the API for that class name\".",
        "createdAt" : "2020-06-14T23:13:46Z",
        "updatedAt" : "2020-06-14T23:13:46Z",
        "lastEditedBy" : "b1c80b04-b64d-48bd-95ec-f1ce9c0f0774",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f270ab5509906c7dc2a560aa40d06da90fc6f0d",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +58,62 @@\n  override def lookupAnalyzedClass(binaryClassName: String): Option[AnalyzedClass] = {\n    externalLookup match { // not flatMap so that external lookup can fast-track returning None\n      case Some(externalLookup) => externalLookup.lookupAnalyzedClass(binaryClassName)\n      case _                    => super.lookupAnalyzedClass(binaryClassName)"
  },
  {
    "id" : "4fb2de4f-30db-4491-ac4f-00c71ff421e9",
    "prId" : 427,
    "prUrl" : "https://github.com/sbt/zinc/pull/427#pullrequestreview-69395823",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d33f90cf-533b-4fe6-bcd2-f73b7f5847fc",
        "parentId" : null,
        "authorId" : "aa7d739b-1df0-4f48-bb63-d177aec43ac4",
        "body" : "nice, this allows the user to provide a parallel implementation.",
        "createdAt" : "2017-10-14T16:27:24Z",
        "updatedAt" : "2017-10-24T09:31:00Z",
        "lastEditedBy" : "aa7d739b-1df0-4f48-bb63-d177aec43ac4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7facecaf39eff18425840eda8983347d7f3e192",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +64,68 @@    externalLookup.forall(_.shouldDoIncrementalCompilation(changedClasses, analysis))\n\n  override def hashClasspath(classpath: Array[File]): Optional[Array[FileHash]] =\n    externalLookup.map(_.hashClasspath(classpath)).getOrElse(Optional.empty())\n}"
  },
  {
    "id" : "7e2a3fdc-bbc2-42c6-896d-b28054e5de7d",
    "prId" : 427,
    "prUrl" : "https://github.com/sbt/zinc/pull/427#pullrequestreview-69400605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5920955a-625c-4c91-9456-1ab5cb33bd48",
        "parentId" : null,
        "authorId" : "aa7d739b-1df0-4f48-bb63-d177aec43ac4",
        "body" : "why not make this non-optional and provide a default implementation?",
        "createdAt" : "2017-10-14T16:44:24Z",
        "updatedAt" : "2017-10-24T09:31:00Z",
        "lastEditedBy" : "aa7d739b-1df0-4f48-bb63-d177aec43ac4",
        "tags" : [
        ]
      },
      {
        "id" : "b921f766-d3cf-4891-a034-b56dfbc65f88",
        "parentId" : "5920955a-625c-4c91-9456-1ab5cb33bd48",
        "authorId" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "body" : "Empty result here has a meaning - that we have to treat this class as Library dependency instead of External one (so names will be invalidated on any change in *.class or *.jar file).\r\n\r\nThis change was just optimization since `find` is faster then `collectFirst` (and code looks also better)",
        "createdAt" : "2017-10-14T19:43:47Z",
        "updatedAt" : "2017-10-24T09:31:00Z",
        "lastEditedBy" : "dd00f985-62e6-4807-b6a5-77e061400587",
        "tags" : [
        ]
      },
      {
        "id" : "05be1d4d-cebf-42d8-9737-bd2d3563df64",
        "parentId" : "5920955a-625c-4c91-9456-1ab5cb33bd48",
        "authorId" : "aa7d739b-1df0-4f48-bb63-d177aec43ac4",
        "body" : "I thought the empty meant that it falls back to the default impl of blindly using SHA-1. Couldn't that default impl just be moved to be the default?",
        "createdAt" : "2017-10-14T19:49:51Z",
        "updatedAt" : "2017-10-24T09:31:00Z",
        "lastEditedBy" : "aa7d739b-1df0-4f48-bb63-d177aec43ac4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7facecaf39eff18425840eda8983347d7f3e192",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +41,45 @@  private val entry = MixedAnalyzingCompiler.classPathLookup(compileConfiguration)\n\n  override def lookupAnalysis(binaryClassName: String): Option[CompileAnalysis] =\n    analyses.find(_.relations.productClassName._2s.contains(binaryClassName))\n"
  }
]