[
  {
    "id" : "f329798b-e59e-427d-bdeb-8de574ff5bad",
    "prId" : 1261,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4a8fcf42-2eaa-408c-8d48-84e5f16abda0",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "should we add this but have it take a timeout to the object where we define the `Monad`?\n\n`def futureEq[A: Eq](timeout: Duration): Eq[Future[A]] = ...`\n",
        "createdAt" : "2016-08-03T17:16:23Z",
        "updatedAt" : "2016-08-03T18:17:37Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "b7cab211-8a6b-4040-a9f5-0cb09e6bc82e",
        "parentId" : "4a8fcf42-2eaa-408c-8d48-84e5f16abda0",
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "@johnynek That's what I do for Twitter futures in catbird, but there's no chance for Scala.js there, anyway, and I think Scala.js support is the motivation for keeping all `Await` out of cats-core.\n",
        "createdAt" : "2016-08-03T17:39:18Z",
        "updatedAt" : "2016-08-03T18:17:37Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      },
      {
        "id" : "4e2b7016-680b-44d9-9ad9-d577dfcf3e08",
        "parentId" : "4a8fcf42-2eaa-408c-8d48-84e5f16abda0",
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "I see. I didn't know that restriction.\n",
        "createdAt" : "2016-08-03T17:40:41Z",
        "updatedAt" : "2016-08-03T18:17:37Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      }
    ],
    "commit" : "cad6429c2cb24a1feba229b96a7e9448dd317826",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +20,24 @@    f.map(Xor.right[Throwable, A]).recover { case t => Xor.left(t) }\n\n  implicit def eqfa[A: Eq]: Eq[Future[A]] =\n    new Eq[Future[A]] {\n      def eqv(fx: Future[A], fy: Future[A]): Boolean = {"
  },
  {
    "id" : "0fde6e68-1d7e-47d2-ba9f-2ba19d3b501f",
    "prId" : 1261,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ac92ff4d-e705-4bae-979a-9158dfaf4ff6",
        "parentId" : null,
        "authorId" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "body" : "isn't this repeated above?\n",
        "createdAt" : "2016-08-03T17:38:02Z",
        "updatedAt" : "2016-08-03T18:17:37Z",
        "lastEditedBy" : "64725de8-1e61-4b2f-a436-5cc06313d237",
        "tags" : [
        ]
      },
      {
        "id" : "aec1dd35-3dc8-4f49-b255-922dcbe21af2",
        "parentId" : "ac92ff4d-e705-4bae-979a-9158dfaf4ff6",
        "authorId" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "body" : "@johnynek There's a bit of duplication here across `js` and `jvm`, since the `Eq` instance for Scala.js uses a custom `Await`.\n",
        "createdAt" : "2016-08-03T17:41:32Z",
        "updatedAt" : "2016-08-03T18:17:37Z",
        "lastEditedBy" : "6943dbfe-856b-4f1b-bd04-dca0091e8291",
        "tags" : [
        ]
      }
    ],
    "commit" : "cad6429c2cb24a1feba229b96a7e9448dd317826",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +36,40 @@\n  checkAll(\"Future with Throwable\", MonadErrorTests[Future, Throwable].monadError[Int, Int, Int])\n  checkAll(\"Future\", MonadRecTests[Future].monadRec[Int, Int, Int])\n}"
  }
]