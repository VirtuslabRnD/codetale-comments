[
  {
    "id" : "1aae97cc-0df2-498c-980d-d7f142f07876",
    "prId" : 5597,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9df67def-62c5-4e55-8f42-a674e915f248",
        "parentId" : null,
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "it's more \"removing the need to use\" rather then \"disregarding\" right? One can still use a combination of both `runtime_library_dirs` and `LD_LIBRARY_PATH` if desired.\n",
        "createdAt" : "2015-02-25T09:10:14Z",
        "updatedAt" : "2015-02-27T07:14:30Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      },
      {
        "id" : "acc9769b-7ab8-4687-b9eb-48e9bf647ed7",
        "parentId" : "9df67def-62c5-4e55-8f42-a674e915f248",
        "authorId" : "dc16bbfe-41d1-4206-8e4e-13e63320eda1",
        "body" : "It depends, you cannot override a set runtime_library_dir by\nLD_LIBRARY_PATH. Only if the runtime library directory has not been set.\nHence, disregarding.\n\n2015-02-25 10:10 GMT+01:00 Ralf Gommers notifications@github.com:\n\n> In site.cfg.example\n> https://github.com/numpy/numpy/pull/5597#discussion_r25326065:\n> \n> > @@ -52,6 +52,26 @@\n> >  #       True) to tell numpy.distutils to prefer static libraries (.a) over\n> >  #       shared libraries (.so). It is turned off by default.\n> >  #           search_static_first = false\n> > +#\n> > +#   runtime_library_dirs\n> > +#       List of directories that contains the libraries that should be\n> > +#       used at runtime, thereby disregarding the LD_LIBRARY_PATH variable.\n> \n> it's more \"removing the need to use\" rather then \"disregarding\" right? One\n> can still use a combination of both runtime_library_dirs and\n> LD_LIBRARY_PATH if desired.\n> \n> â€”\n> Reply to this email directly or view it on GitHub\n> https://github.com/numpy/numpy/pull/5597/files#r25326065.\n\n## \n\nKind regards Nick\n",
        "createdAt" : "2015-02-25T09:41:44Z",
        "updatedAt" : "2015-02-27T07:14:30Z",
        "lastEditedBy" : "dc16bbfe-41d1-4206-8e4e-13e63320eda1",
        "tags" : [
        ]
      },
      {
        "id" : "d5f0a659-c8b1-464b-a11d-eb1c8131bc85",
        "parentId" : "9df67def-62c5-4e55-8f42-a674e915f248",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "true. So yes, maybe better leave as is.\n",
        "createdAt" : "2015-02-25T09:43:34Z",
        "updatedAt" : "2015-02-27T07:14:30Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "525f0cd85fa270ee0fb843a8cfdd21dfe98238cd",
    "line" : null,
    "diffHunk" : "@@ -1,1 +56,60 @@#   runtime_library_dirs/rpath\n#       List of directories that contains the libraries that should be \n#       used at runtime, thereby disregarding the LD_LIBRARY_PATH variable.\n#       See 'library_dirs' for formatting on different platforms.\n#           runtime_library_dirs = /opt/blas/lib:/opt/lapack/lib"
  },
  {
    "id" : "cbfe5e98-e35e-450b-b4c9-d22275c9ed61",
    "prId" : 5597,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4c4893a4-ff00-4c4d-baf2-2d004fc31e34",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "it is not clear here what the scope of these arguments are, library/runtime/include-dir are all related to binaries, compile args apply to sources. Does it apply to all numpy sources like the OPT env variable) or only part of them?\nI don't see a reason this flag should be specific to sections concerning libraries, maybe having one global one is enough?\n",
        "createdAt" : "2015-03-09T23:01:14Z",
        "updatedAt" : "2015-03-09T23:01:14Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "171cda76-4100-4d5f-a861-488b0c85dba5",
        "parentId" : "4c4893a4-ff00-4c4d-baf2-2d004fc31e34",
        "authorId" : "dc16bbfe-41d1-4206-8e4e-13e63320eda1",
        "body" : "My addition _only_ applies to codes/extensions using the `get_info` function from `numpy.distutils`. So I can't say if it is used for all numpy sources like `OPT`. See my comment on `lapack_lite` which shows one place where it would be used. So, these compile flags are _not_ used unless `get_info` is called on a section containing the above mentioned args.\n\nI have added the `extra_compile_args` mainly for completeness sake, I see no disadvantage of having the possibility of adding extra flags when compiling extensions. You may say it is not necessary for libraries, but it allows people to construct sections which can be used to compiling extensions with different flags, say:\n\n```\n[O2]\nextra_compile_args = -O2\n[O3]\nextra_compile_args = -O3\n```\n\nAnd then compiling can be done using:\n\n```\nconfig.add_extension('my_package',\n                         sources = ['my_package.c'],\n                         extra_info = get_info('O2')\n                         )\nconfig.add_extension('my_package3',\n                         sources = ['my_package3.c'],\n                         extra_info = get_info('O3')\n                         )\n```\n\nOne can of course extend several sections together.  \nI like to be able to fully control my compilation of source when using Python, with this PR the user can add new sections to their `site.cfg` and then control all sources/extensions individually, if needed. \n\nFurthermore using config files, I think, is much more streamlining the build process than having to use env's. This is a matter of taste, but I see no disadvantage in letting users have a choice of this.\n",
        "createdAt" : "2015-03-10T06:30:36Z",
        "updatedAt" : "2015-03-10T06:30:36Z",
        "lastEditedBy" : "dc16bbfe-41d1-4206-8e4e-13e63320eda1",
        "tags" : [
        ]
      },
      {
        "id" : "26ebbde1-1b5f-40fb-859c-76ef4212d814",
        "parentId" : "4c4893a4-ff00-4c4d-baf2-2d004fc31e34",
        "authorId" : "dc16bbfe-41d1-4206-8e4e-13e63320eda1",
        "body" : "But mainly I would use it for the `rpath` options to control the shared libraries. :)\n",
        "createdAt" : "2015-03-10T06:33:40Z",
        "updatedAt" : "2015-03-10T06:33:40Z",
        "lastEditedBy" : "dc16bbfe-41d1-4206-8e4e-13e63320eda1",
        "tags" : [
        ]
      }
    ],
    "commit" : "525f0cd85fa270ee0fb843a8cfdd21dfe98238cd",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +66,70 @@#       Simple variable with no parsing done. \n#       Provide a single line with all complete flags.\n#           extra_compile_args = -g -ftree-vectorize\n#\n#   extra_link_args"
  },
  {
    "id" : "f1f65cb2-5f6f-4531-9389-7cf0c87fc13e",
    "prId" : 7294,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e264a93-8aeb-486e-8ad5-3ab38bf3ed37",
        "parentId" : null,
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "this is unusual, normally the include directory is just \"include/\" and subfolders are included via the `#include` line\n",
        "createdAt" : "2016-02-23T00:26:42Z",
        "updatedAt" : "2016-02-23T21:31:18Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "d5ad2ab6-0f44-4f42-bf62-93c7089bc921",
        "parentId" : "3e264a93-8aeb-486e-8ad5-3ab38bf3ed37",
        "authorId" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "body" : "hm but it seems where blis puts its stuff, should probably have a comment that this needs to be the folder containing cblas.h which is `prefix/blis` by default\n",
        "createdAt" : "2016-02-23T00:37:14Z",
        "updatedAt" : "2016-02-23T21:31:18Z",
        "lastEditedBy" : "0e0ae9fd-53e5-41a6-8774-29bcec6001df",
        "tags" : [
        ]
      },
      {
        "id" : "f1c534a6-6555-4061-8d82-954f52ad8275",
        "parentId" : "3e264a93-8aeb-486e-8ad5-3ab38bf3ed37",
        "authorId" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "body" : "sure, done. also added a few more notes on compiling BLIS itself.\n",
        "createdAt" : "2016-02-23T21:31:42Z",
        "updatedAt" : "2016-02-23T21:31:42Z",
        "lastEditedBy" : "8ffdfffb-d8d9-40f6-9de3-dd0dee381149",
        "tags" : [
        ]
      }
    ],
    "commit" : "23033232cc2dbd119767d38fd3bfe13443e3b5d1",
    "line" : null,
    "diffHunk" : "@@ -1,1 +149,153 @@# libraries = blis\n# library_dirs = /home/username/blis/lib\n# include_dirs = /home/username/blis/include/blis\n# runtime_library_dirs = /home/username/blis/lib\n"
  },
  {
    "id" : "dcfcadd6-40fe-47fb-952b-e831b43e44b4",
    "prId" : 15069,
    "prUrl" : "https://github.com/numpy/numpy/pull/15069#pullrequestreview-332211512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "194aca01-b1e8-43e2-9d45-55084ca0670d",
        "parentId" : null,
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "For at least one major package manager (`spack`), the library will actually be called `openblas` without the `64` appended, even for the 64-bit integer variant, which causes this to fail (see my review comment with steps).\r\n\r\nI'm assuming that there's really no way we're going to cover the idiosyncrasies of all package managers/build systems here--maybe worth a comment though?!",
        "createdAt" : "2019-12-13T23:20:35Z",
        "updatedAt" : "2019-12-14T16:47:58Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      },
      {
        "id" : "244cb8cd-e759-496f-be7c-1a85812f1673",
        "parentId" : "194aca01-b1e8-43e2-9d45-55084ca0670d",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Added notice to site.cfg.example about this.\r\n\r\nI suspect the situation typically in this case is also that the 64-bit library is installed to a different directory (because of the filename conflict with 32-bit), so you'll anyway need to set the library_dirs.",
        "createdAt" : "2019-12-14T12:16:07Z",
        "updatedAt" : "2019-12-14T16:47:58Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "b56737ad-a2b1-4123-bd08-13ea3c7725a8",
        "parentId" : "194aca01-b1e8-43e2-9d45-55084ca0670d",
        "authorId" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "body" : "That's right, the 64-bit version gets a different hash in its absolute path when I use spack. Anyway, you've added the comment now, marking as resolved.",
        "createdAt" : "2019-12-14T12:23:34Z",
        "updatedAt" : "2019-12-14T16:47:58Z",
        "lastEditedBy" : "73d6f7d8-2c7d-4a48-8754-5ce4a97a850f",
        "tags" : [
        ]
      }
    ],
    "commit" : "85447b1ed7df98aff0ed9d666a92f8714f08c2ee",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +171,175 @@#\n# [openblas_ilp64]\n# libraries = openblas64\n# library_dirs = /opt/OpenBLAS/lib\n# include_dirs = /opt/OpenBLAS/include"
  },
  {
    "id" : "f0ba708f-696b-4421-8358-7788b4a4c4d3",
    "prId" : 15338,
    "prUrl" : "https://github.com/numpy/numpy/pull/15338#pullrequestreview-348339489",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8cc228b4-b807-4d43-aa58-f5cfde61a3ec",
        "parentId" : null,
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "This doesn't agree with `numpy/distutils/system_info.py`, which uses `ALL`. Why the change?",
        "createdAt" : "2020-01-17T18:26:15Z",
        "updatedAt" : "2020-01-26T12:09:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "ddbd5849-f79c-4fdc-94fe-08a09f27fce1",
        "parentId" : "8cc228b4-b807-4d43-aa58-f5cfde61a3ec",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "Seems this might break people currently using a `site.cfg` file.",
        "createdAt" : "2020-01-17T18:27:57Z",
        "updatedAt" : "2020-01-26T12:09:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "b58b24c8-2ad1-4398-838d-9988c928b2ca",
        "parentId" : "8cc228b4-b807-4d43-aa58-f5cfde61a3ec",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "If this is wrong, why are no tests failing? I think the documentation is wrong here: the `ALL` section does **not** override other section's missing values. I reverted the section name change in 8f94b292f, and added a test that shows the documentation is wrong. Do we want to fix the documentation or add code to override missing defaults?",
        "createdAt" : "2020-01-18T21:35:33Z",
        "updatedAt" : "2020-01-26T12:09:02Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "b715237c-0f82-4234-8edc-f93eca302181",
        "parentId" : "8cc228b4-b807-4d43-aa58-f5cfde61a3ec",
        "authorId" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "body" : "My only concern here is back compatibility. If the code can be changed without causing problems, that is OK. If not, I think the documentation should reflect reality. A new section, maybe `DEFAULT`, could be added if that adds useful functionality :)",
        "createdAt" : "2020-01-18T22:01:18Z",
        "updatedAt" : "2020-01-26T12:09:02Z",
        "lastEditedBy" : "e6b1ca39-8ea5-45f7-ae52-a080cee1181b",
        "tags" : [
        ]
      },
      {
        "id" : "769438d5-d1b2-4ccb-9b55-070b33668b06",
        "parentId" : "8cc228b4-b807-4d43-aa58-f5cfde61a3ec",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "It's true that `ALL` is the default value for `system_info.section`, but all the subclasses apart from the *_opt_info ones (which do no lookups themselves) override it. So it has no effect, the lookups just use `self.section`.\r\n\r\nThe `DEFAULT` section OTOH works, because that's builtin ConfigParser functionality.\r\n\r\nI'm not sure if the ALL stuff has worked at some point, but currently it does not, and probably the default should be changed to `section = None` in `class system_info` to avoid confusion. Also the comment on top of `system_info.py` should be corrected.",
        "createdAt" : "2020-01-18T22:12:35Z",
        "updatedAt" : "2020-01-26T12:09:02Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "7cc7d458-98e3-4288-96de-0b0ec17a24c8",
        "parentId" : "8cc228b4-b807-4d43-aa58-f5cfde61a3ec",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "So maybe just remove this part from site.cfg.example?",
        "createdAt" : "2020-01-18T22:13:36Z",
        "updatedAt" : "2020-01-26T12:09:02Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "856e5e0b-c361-499e-8455-125ade38b779",
        "parentId" : "8cc228b4-b807-4d43-aa58-f5cfde61a3ec",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "It turns out the `*_opt_info` and `f2py_info` classes use `ALL`. The other classes all override the `system_info` class's `section` value with more specific names. I tried to document all this in b4ccd24",
        "createdAt" : "2020-01-19T06:15:15Z",
        "updatedAt" : "2020-01-26T12:09:02Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "78654735-459d-4f31-b289-56c37bc3c6d0",
        "parentId" : "8cc228b4-b807-4d43-aa58-f5cfde61a3ec",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "The classes that use `ALL` I think don't have any tunable options.\r\nIn particular, the `*_opt_info` classes do not use their values of `include_dir` and `library_dir` options for looking up the libraries.\r\n\r\nIf so, I'd suggest to not document it, and just schedule it for removal.\r\nI think it's just some accumulated cruft that maybe one day was working, but due to lack of tests probably was broken already in Numpy 1.0.",
        "createdAt" : "2020-01-19T11:53:39Z",
        "updatedAt" : "2020-01-26T12:09:02Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "33feeb90-dbd8-4172-a643-147f9a637433",
        "parentId" : "8cc228b4-b807-4d43-aa58-f5cfde61a3ec",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "Sorry, this is not fully correct --- the `extra_compile_args` and `extra_link_args` in the `ALL` section may have an effect because they are added by `calc_extra_info`. They don't affect test compilations e.g. done by openblas_info though, as they are appended after the fact. The library_dir/include_dir variables don't have an effect, as libraries in `*_opt_info` is empty list in `calc_libraries_info`; if it is explicitly specified in `ALL` then the library_dir there do affect the lookup of these extra libraries, but not those of the openblas/etc classes.\r\n\r\nHowever, how this works still looks unintended, and works in a confusing way... (Note for example that `calc_libraries_info` duplicates the library names in the list, so you end with repeated `-lopenblas -lopenblas` etc.) Because it's confusing, I'd not mention it in user-facing documentation.",
        "createdAt" : "2020-01-19T12:16:04Z",
        "updatedAt" : "2020-01-26T12:09:02Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "499220f0-af09-490a-9041-f449dcd2326b",
        "parentId" : "8cc228b4-b807-4d43-aa58-f5cfde61a3ec",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "thanks for the deep dive. I will remove ALL from the docstring.",
        "createdAt" : "2020-01-19T21:25:59Z",
        "updatedAt" : "2020-01-26T12:09:02Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      },
      {
        "id" : "55784931-9fc1-4a94-92c9-7b093e4d3ab2",
        "parentId" : "8cc228b4-b807-4d43-aa58-f5cfde61a3ec",
        "authorId" : "0c741f60-21a1-4e19-bf63-054f36ebf377",
        "body" : "Setting [DEFAULT] libs and headers to a location different from OpenBLAS seems to break using a Debian 10 system OpenBLAS on a Python+numpy+scipy built from source in a non-standard location. Namely, if in the following `site.cfg`\r\n```\r\n[ALL]\r\nlibrary_dirs = /home/dimpase/sage-src/local/lib\r\ninclude_dirs = /home/dimpase/sage-src/local/include\r\n[blas]\r\ninclude_dirs = /usr/include/x86_64-linux-gnu\r\nblas_libs    = openblas\r\n[lapack]\r\nlapack_libs  = openblas\r\n```\r\none adds after [ALL] section\r\n```\r\n[DEFAULT]\r\nlibrary_dirs = /home/dimpase/sage-src/local/lib\r\ninclude_dirs = /home/dimpase/sage-src/local/include\r\n```\r\nthen scipy cannot be built any more, as it cannot find blas/lapack (and it can without [DEFAULT]  section).\r\n\r\nThis is from https://trac.sagemath.org/ticket/29051 and https://trac.sagemath.org/ticket/29051\r\n",
        "createdAt" : "2020-01-25T13:13:23Z",
        "updatedAt" : "2020-01-26T12:09:02Z",
        "lastEditedBy" : "0c741f60-21a1-4e19-bf63-054f36ebf377",
        "tags" : [
        ]
      },
      {
        "id" : "e63dea76-6d2b-4fab-a979-0f0aba20975a",
        "parentId" : "8cc228b4-b807-4d43-aa58-f5cfde61a3ec",
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "That's because setting DEFAULT overrides the default search paths, which *includes* `/usr/lib` etc standard places.\r\n\r\nSo you'd need to override them again in `[openblas]` (or wherever you need them).\r\n\r\nAs noted elsewhere, the search paths in ALL do not do anything at all so there's no point setting them. The documentation unfortunately has been wrong all these years...",
        "createdAt" : "2020-01-25T14:25:59Z",
        "updatedAt" : "2020-01-26T12:09:02Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "ed157ba1-4917-4ffc-8901-97dbd79746a0",
        "parentId" : "8cc228b4-b807-4d43-aa58-f5cfde61a3ec",
        "authorId" : "0c741f60-21a1-4e19-bf63-054f36ebf377",
        "body" : "> As noted elsewhere, the search paths in ALL do not do anything at all so there's no point setting them.\r\n\r\nOK, so that's very good to know, meaning that we may skip [ALL] and [DEFAULT] for the case at hand, at least.",
        "createdAt" : "2020-01-25T18:47:04Z",
        "updatedAt" : "2020-01-26T12:09:02Z",
        "lastEditedBy" : "0c741f60-21a1-4e19-bf63-054f36ebf377",
        "tags" : [
        ]
      }
    ],
    "commit" : "6472a7d4eee9d9997773177b08e30c9c4326fbeb",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +87,91 @@# override these settings, unless they are explicitly included.\n# The ``:`` is os.pathsep, which is ``;`` on windows\n#[DEFAULT]\n#library_dirs = /usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib\n#include_dirs = /usr/local/include:/usr/include"
  },
  {
    "id" : "91de4653-bae9-41fd-88a9-fd20f37912d6",
    "prId" : 15338,
    "prUrl" : "https://github.com/numpy/numpy/pull/15338#pullrequestreview-348373582",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c338173f-2ce8-4484-8dc2-2c18624bbef5",
        "parentId" : null,
        "authorId" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "body" : "These default values override the standard library search paths.\r\nSo the explanation should say instead\r\n```\r\nThese settings apply when they are not overridden in the sections below.\r\nNote that the standard paths (e.g. `/usr/lib`) are not searched if you override\r\nthese settings, unless they are explicitly included in the lists.\r\n```",
        "createdAt" : "2020-01-25T14:43:40Z",
        "updatedAt" : "2020-01-26T12:09:02Z",
        "lastEditedBy" : "48d7d71b-9655-46b2-9a18-7c1fba7837d0",
        "tags" : [
        ]
      },
      {
        "id" : "6dd32ae9-28a6-49ad-bc62-4bd222117427",
        "parentId" : "c338173f-2ce8-4484-8dc2-2c18624bbef5",
        "authorId" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "body" : "adding",
        "createdAt" : "2020-01-26T11:35:56Z",
        "updatedAt" : "2020-01-26T12:09:02Z",
        "lastEditedBy" : "919d650d-5f9e-4069-90f7-968e2cf7bb16",
        "tags" : [
        ]
      }
    ],
    "commit" : "6472a7d4eee9d9997773177b08e30c9c4326fbeb",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +80,84 @@# Defaults\n# ========\n# The settings here will apply to all sections as general defaults\n# This is a good place to add general library and include directories like\n# /usr/local/{lib,include}"
  }
]