[
  {
    "id" : "41aae2f2-b53b-4aed-a62d-52c9ef03bb51",
    "prId" : 13101,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/13101#pullrequestreview-13439368",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ace51da5-4230-4ba5-83e9-a88cd0a92b7c",
        "parentId" : null,
        "authorId" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "body" : "This link is useful, but I'm not sure what the intent of the comment above is. Do you mean it as a `TODO`? If so, how?",
        "createdAt" : "2016-12-13T08:43:33Z",
        "updatedAt" : "2017-01-06T15:10:01Z",
        "lastEditedBy" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "tags" : [
        ]
      },
      {
        "id" : "2f68866a-2f99-4b2a-b35e-5cbbf7e7594d",
        "parentId" : "ace51da5-4230-4ba5-83e9-a88cd0a92b7c",
        "authorId" : "c6a426d5-96ad-4c50-8161-5b7f6f4720ed",
        "body" : "As in, an attribute like `alignmentBaseline` may only take on certain values (including `inherit`, `auto`, `central`, and a few more). Many other attributes can be similarly typed as unions of string literals, but there is a lot of (often missing) documentation to dig through",
        "createdAt" : "2016-12-17T02:50:13Z",
        "updatedAt" : "2017-01-06T15:10:01Z",
        "lastEditedBy" : "c6a426d5-96ad-4c50-8161-5b7f6f4720ed",
        "tags" : [
        ]
      }
    ],
    "commit" : "dba03b3ae34c0612ce75266df631acfe75a399d7",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +2144,2148 @@    // this list is \"complete\" in that it contains every SVG attribute \n    // that React supports, but the types can be improved.\n    // Full list here: https://facebook.github.io/react/docs/dom-elements.html\n    //\n    // The three broad type categories are (in order of restrictiveness):"
  },
  {
    "id" : "2d5c322f-7257-4a39-928a-540d42ddfb26",
    "prId" : 13101,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/13101#pullrequestreview-12627883",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cc470f48-8fc1-4d96-800f-88350a707038",
        "parentId" : null,
        "authorId" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "body" : "This also seems pretty self-evident based on the types below, so not sure what value this comment is adding.",
        "createdAt" : "2016-12-13T08:44:22Z",
        "updatedAt" : "2017-01-06T15:10:01Z",
        "lastEditedBy" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "tags" : [
        ]
      }
    ],
    "commit" : "dba03b3ae34c0612ce75266df631acfe75a399d7",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +2149,2153 @@    //   - \"number | string\"\n    //   - \"string\"\n    //   - union of string literals\n    interface SVGAttributes<T> extends HTMLAttributes<T> {\n        accentHeight?: number | string;"
  },
  {
    "id" : "a68df6f7-0af3-4d1b-8ac6-07570560daba",
    "prId" : 14188,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/14188#pullrequestreview-19173383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8ea385b7-1bf4-45a8-bda3-5f3c74e52b96",
        "parentId" : null,
        "authorId" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "body" : "Do you know why this is an intersection type instead of a type constraint? ie.\r\n\r\n```ts\r\ninterface SyntheticEvent<T extends EventTarget> {\r\n    ...\r\n    currentTarget: T;\r\n}\r\n```",
        "createdAt" : "2017-01-26T18:55:00Z",
        "updatedAt" : "2017-01-31T09:43:17Z",
        "lastEditedBy" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "tags" : [
        ]
      },
      {
        "id" : "0b246703-169f-4c39-95ad-e4ed3bb9bb77",
        "parentId" : "8ea385b7-1bf4-45a8-bda3-5f3c74e52b96",
        "authorId" : "bf1e6b9f-200f-4a43-a736-f9332e7f804b",
        "body" : "@vsiao :\r\nThe diff above change just restores the original definition of `SyntheticEvent`.\r\n\r\nI agree with you that `T extends EventTarget` makes much more sense than just `T` but the changes required to implement that are quite extensive (and not directly related to this PR).\r\n\r\nIn order to introduce that refactor we would need to change:\r\n  - Every event (e.g. `interface FormEvent<T> extends SyntheticEvent<T>`) - about 12 interfaces.\r\n  - Every event handler (e.g. `type FormEventHandler<T> = EventHandler<FormEvent<T>>`) - about 12 type aliases\r\n  - `DOMAttributes`\r\n  - `HTMLAttributes` - requires also changing the types for `react-addons-linked-state-mixin`\r\n  - etc.\r\n\r\nI'm not against this change, but since it's so big, I believe we should create a separate PR for that.\r\n",
        "createdAt" : "2017-01-30T09:58:58Z",
        "updatedAt" : "2017-01-31T09:43:17Z",
        "lastEditedBy" : "bf1e6b9f-200f-4a43-a736-f9332e7f804b",
        "tags" : [
        ]
      },
      {
        "id" : "7b95dc33-bff1-43bd-9311-8d1d94e6294d",
        "parentId" : "8ea385b7-1bf4-45a8-bda3-5f3c74e52b96",
        "authorId" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "body" : "OK, sounds good. Thanks for explaining.",
        "createdAt" : "2017-01-30T20:06:56Z",
        "updatedAt" : "2017-01-31T09:43:17Z",
        "lastEditedBy" : "ca24dbcf-4d3f-43c9-b883-2659edddde43",
        "tags" : [
        ]
      }
    ],
    "commit" : "ec9bf7f22990ed5c3d419356e263f595bef7eebb",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +277,281 @@    interface SyntheticEvent<T> {\n        bubbles: boolean;\n        currentTarget: EventTarget & T;\n        cancelable: boolean;\n        defaultPrevented: boolean;"
  },
  {
    "id" : "ed413765-6393-4245-a5f1-3433a8470f7d",
    "prId" : 15242,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/15242#pullrequestreview-28226088",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd435eda-1c72-49f2-9772-8a9927a05dc6",
        "parentId" : null,
        "authorId" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "body" : "Is the type really `Validator<T>` and not `Validator<T[K]>`? Not familiar with the library but the latter is more common.",
        "createdAt" : "2017-03-21T20:08:40Z",
        "updatedAt" : "2017-03-21T20:17:48Z",
        "lastEditedBy" : "3869aabd-5b54-4208-bd58-934576e71b3a",
        "tags" : [
        ]
      },
      {
        "id" : "88a0e985-7944-40a6-8290-66182d3ef195",
        "parentId" : "fd435eda-1c72-49f2-9772-8a9927a05dc6",
        "authorId" : "dbc0e58d-9f4d-41a9-9fd8-c0b24e9aab13",
        "body" : "Yes; the validator functions receive all of `T` along with a `string` parameter that specified which key that function is being asked to validate. Good question though!",
        "createdAt" : "2017-03-21T20:19:43Z",
        "updatedAt" : "2017-03-21T20:19:43Z",
        "lastEditedBy" : "dbc0e58d-9f4d-41a9-9fd8-c0b24e9aab13",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ac0dc0c50d134dda95077b62063326636b4d0ed",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +2628,2632 @@    }\n\n    type ValidationMap<T> = { [K in keyof T]?: Validator<T> };\n\n    interface ReactPropTypes {"
  }
]