[
  {
    "id" : "1b0a15cb-aef5-4a4a-8ab9-1670c697a717",
    "prId" : 6761,
    "prUrl" : "https://github.com/root-project/root/pull/6761#pullrequestreview-527273708",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1df7a9e4-9458-4c03-8f27-c3717703657f",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "```suggestion\r\n   MnMigrad(const MnMigrad& migr) = default;\r\n   ~MnMigrad() {}\r\n```",
        "createdAt" : "2020-11-05T13:16:12Z",
        "updatedAt" : "2020-11-13T14:48:40Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "52a8bb56-508d-48f7-8c7b-6170e444c836",
        "parentId" : "1df7a9e4-9458-4c03-8f27-c3717703657f",
        "authorId" : "3773ed93-1876-4f73-a51b-eaae8c3a35b8",
        "body" : "I follow the \"rule of zero\" here, so no, I think we should not add an explicitly defaulted copy ctor.\r\nhttps://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c20-if-you-can-avoid-defining-default-operations-do",
        "createdAt" : "2020-11-06T14:25:44Z",
        "updatedAt" : "2020-11-13T14:48:40Z",
        "lastEditedBy" : "3773ed93-1876-4f73-a51b-eaae8c3a35b8",
        "tags" : [
        ]
      },
      {
        "id" : "0e2d94c4-f00d-4a61-9899-3873bfb02efc",
        "parentId" : "1df7a9e4-9458-4c03-8f27-c3717703657f",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "Not that we _have_ to agree with such guidelines, but anyway right below, this applies in this case: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c21-if-you-define-or-delete-any-copy-move-or-destructor-function-define-or-delete-them-all as the destructor and the copy-assignment operators are defined.",
        "createdAt" : "2020-11-06T14:31:27Z",
        "updatedAt" : "2020-11-13T14:48:40Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "1490d6e2-7765-4b96-899e-a49d22b6d429",
        "parentId" : "1df7a9e4-9458-4c03-8f27-c3717703657f",
        "authorId" : "3773ed93-1876-4f73-a51b-eaae8c3a35b8",
        "body" : "Ok, but making copy assignment private makes no sense here. If the class is default copyable it is also default assignable. (Edit: I was wrong as @lmoneta describes further below, a class with a reference member is default copyable but not default assignable.)",
        "createdAt" : "2020-11-08T13:57:35Z",
        "updatedAt" : "2020-11-13T14:48:40Z",
        "lastEditedBy" : "3773ed93-1876-4f73-a51b-eaae8c3a35b8",
        "tags" : [
        ]
      },
      {
        "id" : "dd4a571c-c8d0-4fbe-a5d2-4d40a6e73be7",
        "parentId" : "1df7a9e4-9458-4c03-8f27-c3717703657f",
        "authorId" : "3773ed93-1876-4f73-a51b-eaae8c3a35b8",
        "body" : "I also removed the private assignment, so I think this ready to merge now.",
        "createdAt" : "2020-11-10T14:19:31Z",
        "updatedAt" : "2020-11-13T14:48:40Z",
        "lastEditedBy" : "3773ed93-1876-4f73-a51b-eaae8c3a35b8",
        "tags" : [
        ]
      },
      {
        "id" : "882db40d-cb67-48ec-88b1-ba4752100822",
        "parentId" : "1df7a9e4-9458-4c03-8f27-c3717703657f",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "this is not going in the direction I suggested xD but I'm not the maintainer of Minuit (I was just on shift last week), so up to @lmoneta , I don't have a strong opinion",
        "createdAt" : "2020-11-10T14:44:25Z",
        "updatedAt" : "2020-11-13T14:48:40Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "05b1598b1801d8207fcde72aff0e8ed1389f13b9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +73,77 @@   MnMigrad(const FCNGradientBase& fcn, const MnUserParameterState& par, const MnStrategy& str) : MnApplication(fcn, MnUserParameterState(par), str), fMinimizer(VariableMetricMinimizer()) {}\n\n   ~MnMigrad() {}\n\n   /// Copy constructor, copy shares the reference to the same FCNBase in MnApplication"
  }
]