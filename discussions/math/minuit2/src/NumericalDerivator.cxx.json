[
  {
    "id" : "7c986c3e-05f1-4a02-affa-308792a62462",
    "prId" : 8567,
    "prUrl" : "https://github.com/root-project/root/pull/8567#pullrequestreview-707394689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c729f629-5846-4d46-9dac-e34655f6db1e",
        "parentId" : null,
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "```suggestion\r\nNumericalDerivator::Differentiate(const ROOT::Math::IBaseFunctionMultiDim &function, const double *cx,\r\n```\r\n`function` can not be a `nullptr` right? In this case, the function parameters could be taken by reference to make the code clearer (same for some other functions in this class).",
        "createdAt" : "2021-07-13T13:48:04Z",
        "updatedAt" : "2021-07-13T13:48:22Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      },
      {
        "id" : "9469c01c-d40d-4952-8e14-c7dee6449468",
        "parentId" : "c729f629-5846-4d46-9dac-e34655f6db1e",
        "authorId" : "4809a10a-85e2-4d0e-8c00-5a0777cea24e",
        "body" : "Ah, I have to check to be sure, but I think you're right. This was probably again a historical thing. There's even an assert checking for nullptr in SetupDifferentiate, so seems highly unlikely that nullptrs still make it through... Ah yeah, I think I remember now that I used to also have a copy of the function (pointer) in the class itself, but then for the newer class I needed to pass it in dynamically, so I added a check somewhere for nullptr calls, I think, that would use the internal function pointer...\r\n\r\nOk, so I think it can indeed be turned into a reference. However, I'm not completely confident that this won't mess up anything with the complicated inheritance hierarchy and pointer casting magic in #8596... Do you think it's ok to postpone this change?",
        "createdAt" : "2021-07-15T13:24:21Z",
        "updatedAt" : "2021-07-15T13:24:22Z",
        "lastEditedBy" : "4809a10a-85e2-4d0e-8c00-5a0777cea24e",
        "tags" : [
        ]
      },
      {
        "id" : "66ec653b-5bd4-4ceb-9826-60b834c3a23e",
        "parentId" : "c729f629-5846-4d46-9dac-e34655f6db1e",
        "authorId" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "body" : "Sure, we can do it later indeed!",
        "createdAt" : "2021-07-15T14:03:23Z",
        "updatedAt" : "2021-07-15T14:03:23Z",
        "lastEditedBy" : "080bddae-e637-45c8-b6c1-53aef7161d62",
        "tags" : [
        ]
      }
    ],
    "commit" : "435fe8fbd44318e2a89de45281054b15820119f1",
    "line" : 153,
    "diffHunk" : "@@ -1,1 +151,155 @@\nstd::vector<DerivatorElement>\nNumericalDerivator::Differentiate(const ROOT::Math::IBaseFunctionMultiDim *function, const double *cx,\n                                  const std::vector<ROOT::Fit::ParameterSettings> &parameters,\n                                  const std::vector<DerivatorElement> &previous_gradient)"
  }
]