[
  {
    "id" : "65c4d988-0a48-462b-8188-f9127ac83f71",
    "prId" : 6705,
    "prUrl" : "https://github.com/root-project/root/pull/6705#pullrequestreview-535955166",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e5d17a6b-6322-4acb-b644-0f4a4835d40e",
        "parentId" : null,
        "authorId" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "body" : "Is this line still needed ? Maybe not, since we use later  MnPrint::SetGlobalLevel ",
        "createdAt" : "2020-11-20T15:31:09Z",
        "updatedAt" : "2020-12-02T21:15:48Z",
        "lastEditedBy" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "tags" : [
        ]
      },
      {
        "id" : "8cbd2cab-5dec-4e7a-b01d-7b174da0b5b1",
        "parentId" : "e5d17a6b-6322-4acb-b644-0f4a4835d40e",
        "authorId" : "3773ed93-1876-4f73-a51b-eaae8c3a35b8",
        "body" : "I am not sure, I was a bit confused by the code in Minuit2Minimizer, so I tried to change as little as possible.\r\n\r\nA bit off-topic, but do you agree that ultimately our goal is to allow each class to have its own printing level that can be set by users, and to only fall back to a global print level if no custom setting is used?",
        "createdAt" : "2020-11-21T10:00:36Z",
        "updatedAt" : "2020-12-02T21:15:48Z",
        "lastEditedBy" : "3773ed93-1876-4f73-a51b-eaae8c3a35b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1f2943d9048aef9c6d9eaad68f9795d6757ecf5",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +427,431 @@\n   // internal minuit messages\n   fMinimizer->Builder().SetPrintLevel(printLevel);\n\n   // switch off Minuit2 printing"
  },
  {
    "id" : "923f7b98-62fc-4e24-9456-e9c8396e6578",
    "prId" : 6705,
    "prUrl" : "https://github.com/root-project/root/pull/6705#pullrequestreview-536617831",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46493151-b0a5-4d09-bdf8-f4348f5f4b62",
        "parentId" : null,
        "authorId" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "body" : "Here I think we need to adapt the printLevel of MInimizer to the unse used in MnPrint\r\nProbably we should do something like: \r\nMinuit2Minimizer::PrintLevel() < 0  --> all message suppressed MnPrint default level = 0\r\n                                                = 0   ->  Only Error message printed  (MnPrint::SetGlobalLevel(1)\r\n                                                = 1   ->  Error + warning message printed: MnPrint::SetGlobalLevel(2)\r\n                                                = 2,3   -> Info message printed : MnPrint::SetGlobalLevel(3)\r\n                                                > 3       -> Debug mode  : MnPrint::SetGlobalLevel(4)\r\n\r\nThis adaptation is needed to avoid changing output messages drammatically running workflow using MInuit2 with this MinimizerInterface from ROOT (e.g. ROOT fitting, Roofit/RooStats , etc....).\r\nI could eventually apply also after this PR is merged with a following PR",
        "createdAt" : "2020-11-20T15:38:24Z",
        "updatedAt" : "2020-12-02T21:15:48Z",
        "lastEditedBy" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "tags" : [
        ]
      },
      {
        "id" : "1ff6d014-7559-491f-bf4b-ebd189d15631",
        "parentId" : "46493151-b0a5-4d09-bdf8-f4348f5f4b62",
        "authorId" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "body" : "Thank you Hans for this nice improvement in the Minuit2 logging!\r\n\r\nI see in Debug mode that a lots of messages are printed. Is it possible to filter the messages on the class that generates them ? That would be useful\r\n\r\nAnother useful thing would be maybe to have two level of debug verbosity. For example when doing a fit with many parameters I guess you don;t want to print all parameter values and matrix values, because the messages will be unreadable. Maybe in that case only function values could be printed (and all in one line).\r\nAnyway these improvements could also be applied afterwards with an additional PR. \r\n\r\nCheers",
        "createdAt" : "2020-11-20T15:43:50Z",
        "updatedAt" : "2020-12-02T21:15:48Z",
        "lastEditedBy" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "tags" : [
        ]
      },
      {
        "id" : "fd7dc2e9-8a9f-40fa-af6e-e404fc64bb1f",
        "parentId" : "46493151-b0a5-4d09-bdf8-f4348f5f4b62",
        "authorId" : "3773ed93-1876-4f73-a51b-eaae8c3a35b8",
        "body" : "> I see in Debug mode that a lots of messages are printed. Is it possible to filter the messages on the class that generates them ? That would be useful\r\n\r\nI agree that this is useful and on my to-do list for follow-up work. There are several options, please let me know what you think about them:\r\n\r\n1) Make all prints one-line, so that one can grep out those of interest, just using the class name.\r\n- Pros:\r\n  - Simple to implement, simple to understand and simple to use\r\n- Cons:\r\n  - Lines will become very long in some cases\r\n  - Printing vectors and matrices in one line may hurt readability a lot\r\n\r\n2) Add a `SetPrintLevel` method to each class, so that the print level can be set individually for each class. If no specific level is chosen, use the global default level.\r\n- Pros:\r\n  - Very flexible. Can use multi-line printouts.\r\n  - Seems to be a standard solution. I have seen such an implementation e.g. in the LHCb software framework.\r\n  - Easy to pass down print level recursively, e.g. if MnMigrad is calling MnLineSearch, MnLineSearch can use the print level of MnMigrad.\r\n- Cons (sort of):\r\n  - Some interface needs to be added in ROOT to allow setting the debug level individually for each class. This needs some thought. In iminuit it is not an issue, because I use the Minuit2 classes directly, but ROOT has this abstract Minimizer interface on top of several minimizers, so it is not clear how to pass the information down to Minuit2. This could perhaps be done with a string based interface: `SetPrintLevel(\"MnLineSearch\", 3);` String-based interfaces are not ideal, but they have the advantage of being perfectly decoupled from the actual implementation below. An alternative is to use an enum instead of a string, but that exposes some details of the Minuit2 class structure.\r\n\r\n3) Build a global hash-map into MnPrint which stores individual print levels for each class using a mapping from class name (string) to print level.\r\n- Pros:\r\n  - A comparably simple extension of the current design.\r\n  - All control of print-levels still goes through MnPrint, one does not have to set print-levels individually on each class with a method on that class.\r\n- Cons:\r\n  - String-based interfaces are brittle, typos can only be detected at run-time.\r\n  - Like in 2) some interface in ROOT is needed to allow users to set the print level.\r\n  - Passing-down print levels is not so straight forward in this design.\r\n\r\nI suppose the best short-term solution is 3). We should decide whether we generally want classes that are internally called by other classes to inherit the print level of the caller. If that's desired, then solution 2) is cleaner. If not, then I would go for 3). I cannot predict at this point which design will be better in practice.\r\n\r\nIf we decide to go for 3), should I make the changes in this PR or implement that in a follow up PR?\r\n\r\nIn general, I am also very interested in more fine-grained control on the printing also for iminuit, although I would also like to keep an option to \"show me everything\", because it really helped me a lot to understand what Migrad actually does and in what order.",
        "createdAt" : "2020-11-21T10:34:11Z",
        "updatedAt" : "2020-12-02T21:15:48Z",
        "lastEditedBy" : "3773ed93-1876-4f73-a51b-eaae8c3a35b8",
        "tags" : [
        ]
      },
      {
        "id" : "2cd6e4a0-fa30-4485-804d-c58ceebad387",
        "parentId" : "46493151-b0a5-4d09-bdf8-f4348f5f4b62",
        "authorId" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "body" : "Hi Hans, \r\nThank you very much for your detailed analysis on how to implement a fine grained printing in Minuit2. \r\nMy preference would be probably to go for option (3) that is maybe less clean, but also more practical to implement. \r\nHowever I see that option (2) has the advantage to have a recursivw print level. \r\n\r\nBeing practical,  we would not need a detailed level for every single class, but for maybe some group of class implementing a specific algorithm. For example you would like to debug the iterations in the VariableMetric algorithm (MnMigrad) or the computation of numerical derivatives or the line search algorithm. \r\nThis could be controlled maybe easier with a global hash map as you suggest.\r\nThere is often the use case you want to debug a lower level class (e.g. MnLineSearch) but not debugging an higher level (MnMigrad) or the opposite (e.g. debugging MnMinos but not MnMigrad). \r\nOf course there is also the case you want to see everything. \r\nA simpler solution is also having multiple debug levels which apply to all Minuit. \r\n\r\nAnyway, I agree it is better to merge first this PR and do improvements eventually in a following one.  \r\n\r\nFor this PR, I would add just the fix for the Info message in MnSeedGenerator. I can then commit later a subsequent PR to adapt the Minuit2Minimizer setting of the Print Level. \r\n\r\nThank you !",
        "createdAt" : "2020-11-23T09:23:15Z",
        "updatedAt" : "2020-12-02T21:15:48Z",
        "lastEditedBy" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "tags" : [
        ]
      },
      {
        "id" : "3225a332-0612-4640-a047-d72d00214ff1",
        "parentId" : "46493151-b0a5-4d09-bdf8-f4348f5f4b62",
        "authorId" : "3773ed93-1876-4f73-a51b-eaae8c3a35b8",
        "body" : "Ok, will do! Thank you for the discussion! What you said gave me some food for thought.\r\n\r\nI think we both prefer option 3) then, but this approach should still make it easy to distinguish, staying with your example, MnLineSearch called by MnMigrad from MnLineSearch called by MnMinos. This means that the MnPrint instances need to know when they are nested.  I think this can be achieved with a minor modification of the current design at the cost of again manipulating global state.\r\n\r\nSince MnPrint is already a scope guard, it could modify a global prefix. Pseudo-code:\r\n```c++\r\n{\r\n  // in MnMigrad scope\r\n  MnPrint print(\"MnMigrad\"); // adds MnMigrad to global prefix\r\n \r\n  print.Info(\"foo\"); // prints MnPrint: foo\r\n  // ... at some point an instance of MnLineSearch is created\r\n  {\r\n     // in MnLineSearch scope\r\n     MnPrint print(\"MnLineSearch\"); // adds MnLineSearch to global prefix\r\n     // ...\r\n     print.Info(\"bar\"); // print MnPrint::MnLineSearch: bar\r\n     // end of scope, remove MnLineSearch from global prefix\r\n  }\r\n  // end of scope, remove MnMigrad from global prefix\r\n}\r\n```\r\nThe only challenge is to make this thread-safe. The global prefix must be a thread-local variable.",
        "createdAt" : "2020-11-23T10:59:00Z",
        "updatedAt" : "2020-12-02T21:15:48Z",
        "lastEditedBy" : "3773ed93-1876-4f73-a51b-eaae8c3a35b8",
        "tags" : [
        ]
      },
      {
        "id" : "8ea26438-0fe1-4939-9eda-7e679737e7f2",
        "parentId" : "46493151-b0a5-4d09-bdf8-f4348f5f4b62",
        "authorId" : "3773ed93-1876-4f73-a51b-eaae8c3a35b8",
        "body" : "In https://github.com/root-project/root/pull/6705/commits/a6968f4a79a3728385d1461400920e03d829e569, I implemented this idea and I made the global variables related to MnPrint thread_local (which I should have done anyway).\r\n\r\nI like these stacking prefixes, because they show how algorithm calls are nested. The downside is that the prefix gets rather long (which I find acceptable). An example from iminuit:\r\n```\r\nI MnApplication:MnSeedGenerator: Initial state: FCN =                 0 Edm =                 0 NCalls =      9\r\nI MnApplication:ModularFunctionMinimizer:VariableMetricBuilder: Start iterating until Edm is < 0.0002 with call limit = 420\r\nI MnApplication:ModularFunctionMinimizer:VariableMetricBuilder:    0 - FCN =                 0 Edm =                 0 NCalls =      9\r\nW MnApplication:ModularFunctionMinimizer:VariableMetricBuilder:MnHesse:MnPosDef: Matrix forced pos-def by adding to diagonal 0.002\r\nI MnApplication:ModularFunctionMinimizer:VariableMetricBuilder: After Hessian\r\nI MnApplication:ModularFunctionMinimizer:VariableMetricBuilder:    1 - FCN =                 0 Edm =                 0 NCalls =     19\r\n```",
        "createdAt" : "2020-11-23T16:02:56Z",
        "updatedAt" : "2020-12-02T21:15:48Z",
        "lastEditedBy" : "3773ed93-1876-4f73-a51b-eaae8c3a35b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d1f2943d9048aef9c6d9eaad68f9795d6757ecf5",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +431,435 @@   // switch off Minuit2 printing\n   const int prev_level = (printLevel <= 0 ) ?   TurnOffPrintInfoLevel() : -2;\n   const int prevGlobalLevel = MnPrint::SetGlobalLevel(printLevel);\n\n   // set the precision if needed"
  }
]