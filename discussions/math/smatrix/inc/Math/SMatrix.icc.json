[
  {
    "id" : "436f9284-2a03-4e21-a18c-7cc6966b1cfd",
    "prId" : 3867,
    "prUrl" : "https://github.com/root-project/root/pull/3867#pullrequestreview-243064410",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0fe4c11a-2948-4ef9-99a2-cec3c48594b6",
        "parentId" : null,
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "There is actually an assignment operator defined above. However, it's not picked up for some reason. Does someone know why?",
        "createdAt" : "2019-05-27T09:37:20Z",
        "updatedAt" : "2019-05-29T13:01:15Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "f4f3962e-9e29-40b6-ac92-a774aae5c4f2",
        "parentId" : "0fe4c11a-2948-4ef9-99a2-cec3c48594b6",
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "@Axel-Naumann just explained me why :) The compiler will always create a default operator unless you implement one with the *exact* signature of the default one. Otherwise it behaves like a free function vs a templated function.",
        "createdAt" : "2019-05-28T15:00:26Z",
        "updatedAt" : "2019-05-29T13:01:15Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "784c20d4-d0fb-4264-b9df-544205b3b06a",
        "parentId" : "0fe4c11a-2948-4ef9-99a2-cec3c48594b6",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "To be precise it doesn't have to be *exactly* the same signature, e.g. `Klass(Klass)` would do, or even (evil) `Klass(Klass&)`. There are a couple of allowed versions, basically any function (not function template!) that takes a `Klass()` value and that is not an r-value reference type.",
        "createdAt" : "2019-05-29T06:45:44Z",
        "updatedAt" : "2019-05-29T13:01:15Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6eaa6f9a359f907b72025640b8ebc5846081ede",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +159,163 @@\ntemplate <class T, unsigned int D1, unsigned int D2, class R>\nSMatrix<T,D1,D2,R>& SMatrix<T,D1,D2,R>::operator=(const SMatrix<T,D1,D2,R>&  rhs) {\n   fRep = rhs.fRep;\n   return *this;"
  }
]