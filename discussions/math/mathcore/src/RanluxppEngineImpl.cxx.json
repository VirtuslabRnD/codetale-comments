[
  {
    "id" : "b0ab2a92-7a42-473e-9071-a8e2cc4e56eb",
    "prId" : 6794,
    "prUrl" : "https://github.com/root-project/root/pull/6794#pullrequestreview-528844115",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7714d678-5597-4e54-9e4a-8b22fc594671",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "`NextRandomBits` seems to return 64 bits of randomness - is that motivated by what the original RANLUX++ does? Or can we make use of the discarded 12 bits, by requesting only 52 bits?",
        "createdAt" : "2020-11-11T15:58:53Z",
        "updatedAt" : "2020-11-18T08:54:02Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "16370c82-c0f1-4a4f-ba36-daf8297fd7af",
        "parentId" : "7714d678-5597-4e54-9e4a-8b22fc594671",
        "authorId" : "35f000f7-62f3-4cb3-8afc-e49e8974b5b5",
        "body" : "Partly yes: The way I implemented `RanluxppEngineImpl` allows to get custom amounts of random bits via the `w` template argument. For the exposed `RanluxppEngine`, we care mostly about `double`s which need 52 bits (well 53 bits according to the RANLUX++ paper, but this wastes more bits at the end of each block). In the future the flexibility of `RanluxppEngineImpl` could be used to create an engine that produces single precision `float`s with only 23/24 bits.",
        "createdAt" : "2020-11-12T07:47:21Z",
        "updatedAt" : "2020-11-18T08:54:02Z",
        "lastEditedBy" : "35f000f7-62f3-4cb3-8afc-e49e8974b5b5",
        "tags" : [
        ]
      },
      {
        "id" : "3c9e766e-ed9f-43d6-aab1-3cb137bc3f51",
        "parentId" : "7714d678-5597-4e54-9e4a-8b22fc594671",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Argh of course! I should have seen that. Thanks for explaining, Jonas!",
        "createdAt" : "2020-11-12T08:20:22Z",
        "updatedAt" : "2020-11-18T08:54:02Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6543b903c62d950fae69cf467e3d2d637981d82",
    "line" : 172,
    "diffHunk" : "@@ -1,1 +170,174 @@{\n   // Get 52 bits of randomness.\n   uint64_t bits = fImpl->NextRandomBits();\n\n   // Construct the double in [1, 2), using the random bits as mantissa."
  }
]