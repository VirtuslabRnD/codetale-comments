[
  {
    "id" : "ee144343-74d8-4286-866b-611908ed060f",
    "prId" : 567,
    "prUrl" : "https://github.com/root-project/root/pull/567#pullrequestreview-37975357",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b6b8bfe-e4a9-49d2-ad0b-2108924de447",
        "parentId" : null,
        "authorId" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "body" : "Do we really want that to be an ifdef?",
        "createdAt" : "2017-05-13T08:18:22Z",
        "updatedAt" : "2017-05-16T11:44:25Z",
        "lastEditedBy" : "6f6f52c8-bace-4788-98aa-f12fb2560025",
        "tags" : [
        ]
      },
      {
        "id" : "33af645d-c37d-439d-8372-27c62cce16dc",
        "parentId" : "4b6b8bfe-e4a9-49d2-ad0b-2108924de447",
        "authorId" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "body" : "@lmoneta ?",
        "createdAt" : "2017-05-13T08:48:40Z",
        "updatedAt" : "2017-05-16T11:44:25Z",
        "lastEditedBy" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "tags" : [
        ]
      }
    ],
    "commit" : "7feac35c8036123d7313a42466110b1fc7eca312",
    "line" : 317,
    "diffHunk" : "@@ -1,1 +339,343 @@         nPoints = 0; // count the effective non-zero points\n         // set parameters of the function to cache integral value\n#ifdef USE_PARAMCACHE\n         (const_cast<IModelFunctionTempl<T> &>(func)).SetParameters(p);\n#endif"
  },
  {
    "id" : "4544686e-18c1-454d-b428-8055410f5666",
    "prId" : 585,
    "prUrl" : "https://github.com/root-project/root/pull/585#pullrequestreview-44570761",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "418f8a63-3312-4611-b29f-d733b650bd72",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "I don't really like the `#ifdef` here and elsewhere. This is a nighmare for testing and maintaining. Isn't it possible to just define the function to always take two parameters, but ignore the second one when `USE_PARAMCACHE` is or is not defined? The logic looks backward here (looks like a parameter cache is passed when `USE_PARAMCACHE` is *not* defined).",
        "createdAt" : "2017-06-16T14:13:37Z",
        "updatedAt" : "2017-06-16T14:13:37Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d2b823c227e7c2b1cae3bd32a3ae6159cfa587c",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +486,490 @@#else\n                fval = func ( x.data(), p );\n#endif\n          // one -dim case\n            } else {"
  },
  {
    "id" : "acb67512-e157-4429-83df-3c95c360cfc1",
    "prId" : 793,
    "prUrl" : "https://github.com/root-project/root/pull/793#pullrequestreview-51426381",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "db92b48e-12c1-4651-909b-a833d3a306b2",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Is this ever compiled when `-Dveccore=OFF`? It looks like this would break in that case.",
        "createdAt" : "2017-07-21T07:43:05Z",
        "updatedAt" : "2017-08-15T15:20:41Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "6c06f4e8-aaf9-4df3-bc0b-2bbe25fbfe23",
        "parentId" : "db92b48e-12c1-4651-909b-a833d3a306b2",
        "authorId" : "15b6fa18-b433-42ff-9c73-3669d9346681",
        "body" : "It's inside an `#ifdef R__HAS_VECCORE`",
        "createdAt" : "2017-07-21T08:22:24Z",
        "updatedAt" : "2017-08-15T15:20:41Z",
        "lastEditedBy" : "15b6fa18-b433-42ff-9c73-3669d9346681",
        "tags" : [
        ]
      },
      {
        "id" : "e9e8cce6-b516-4c52-bc82-d3035ffb02fb",
        "parentId" : "db92b48e-12c1-4651-909b-a833d3a306b2",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Ok, thanks. From the diff it's hard to tell.",
        "createdAt" : "2017-07-21T08:24:29Z",
        "updatedAt" : "2017-08-15T15:20:41Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "38998482-0cc6-4c07-bafc-0d8f4e85525d",
        "parentId" : "db92b48e-12c1-4651-909b-a833d3a306b2",
        "authorId" : "15b6fa18-b433-42ff-9c73-3669d9346681",
        "body" : "Yeah, it's a huge chunk of code inside the `ifdef`. Thanks for the review, you reminded me that I should also build without `veccore`, I was not doing it",
        "createdAt" : "2017-07-21T09:26:12Z",
        "updatedAt" : "2017-08-15T15:20:41Z",
        "lastEditedBy" : "15b6fa18-b433-42ff-9c73-3669d9346681",
        "tags" : [
        ]
      }
    ],
    "commit" : "33229b3e25a9e6c4fab92f90b1905773ac361413",
    "line" : 550,
    "diffHunk" : "@@ -1,1 +837,841 @@      // The argument rval is updated so infinite numbers and NaN values are replaced by\n      // maximum finite values (preserving the original sign).\n      static vecCore::Mask<T> CheckInfNaNValues(T &rval)\n      {\n         auto mask = rval > -vecCore::NumericLimits<T>::Max() && rval < vecCore::NumericLimits<T>::Max();"
  },
  {
    "id" : "3a6acf73-46b0-41bf-8166-125c403c51a1",
    "prId" : 2333,
    "prUrl" : "https://github.com/root-project/root/pull/2333#pullrequestreview-138183970",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f754f7db-a343-43c6-ba9d-e24dc7966026",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Why have this as member instead of passing to `operator()`? Looks like it makes it harder to parallelize, since you have to `SetDerivComponent(n);` then calculate derivative, which then cannot happen concurrently using the same `ParamDerivFunc` object.",
        "createdAt" : "2018-07-18T11:37:03Z",
        "updatedAt" : "2018-09-25T13:41:48Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8f5b7aaab1e582ed6cce3b703bdbc96fbe37e53",
    "line" : 361,
    "diffHunk" : "@@ -1,1 +228,232 @@      unsigned int NDim() const { return fFunc.NDim(); }\n      const GradFunc &fFunc;\n      unsigned int fIpar;\n   };\n"
  },
  {
    "id" : "0a0b0821-0da8-468a-8930-f33d79da107e",
    "prId" : 2333,
    "prUrl" : "https://github.com/root-project/root/pull/2333#pullrequestreview-138227202",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "83168df9-2718-4d2b-b499-e82cc6f9d3ed",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "```\r\nreturn std::isfinite(rval) ? rval : std::copysign(std::numeric_limits<double>::max(), rval);\r\n```",
        "createdAt" : "2018-07-18T11:48:08Z",
        "updatedAt" : "2018-09-25T13:41:48Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "90b8b2df-c8a9-4543-bf8d-5e2866c76cb0",
        "parentId" : "83168df9-2718-4d2b-b499-e82cc6f9d3ed",
        "authorId" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "body" : ":ok_hand: ",
        "createdAt" : "2018-07-18T12:23:10Z",
        "updatedAt" : "2018-09-25T13:41:48Z",
        "lastEditedBy" : "eb1cc629-c047-424e-bc0f-ae19ac8ba815",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8f5b7aaab1e582ed6cce3b703bdbc96fbe37e53",
    "line" : 1409,
    "diffHunk" : "@@ -1,1 +335,339 @@      else if (rval < 0)\n         // case -inf\n         return -std::numeric_limits<double>::max();\n      else\n         // case + inf or nan"
  }
]