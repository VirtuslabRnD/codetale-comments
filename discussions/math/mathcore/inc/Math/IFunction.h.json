[
  {
    "id" : "d297db56-e43c-4dea-a0c8-6592f92c71dd",
    "prId" : 8369,
    "prUrl" : "https://github.com/root-project/root/pull/8369#pullrequestreview-684824744",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "056f1420-8b4d-40de-b5a6-17187af64db1",
        "parentId" : null,
        "authorId" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "body" : "Indentation here is not correct. \r\n\r\nTo minimize the changes in IFunction, and thinking that in the future we will add the support for the full second derivatives (Hessian matrix), I would not  add for the time being a SecondDerivative and StepSize member function, but just include a G2ndDerivative and GStepSize functions, which will be implemented as a dummy implementation \r\nin the IGradientFunctionMultiDim class\r\n",
        "createdAt" : "2021-06-16T07:37:54Z",
        "updatedAt" : "2021-06-16T14:45:41Z",
        "lastEditedBy" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "tags" : [
        ]
      }
    ],
    "commit" : "49bf5c7cf13480399ddc1ed24f6b3cd77ff218f4",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +360,364 @@            Gradient(x, df);\n         }\n\n         virtual bool returnsInMinuit2ParameterSpace() const { return false; }\n      };"
  },
  {
    "id" : "37a2c83f-10d8-4bc5-b3d4-84bd82ec4fe9",
    "prId" : 8369,
    "prUrl" : "https://github.com/root-project/root/pull/8369#pullrequestreview-701133999",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab47b4e1-71bc-4b15-a073-fe156f30a5c5",
        "parentId" : null,
        "authorId" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "body" : "Is this function really needed ? It should not be at the gradient calculator level to know if the internal parameter space is used",
        "createdAt" : "2021-07-06T07:04:17Z",
        "updatedAt" : "2021-07-06T07:39:29Z",
        "lastEditedBy" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "tags" : [
        ]
      },
      {
        "id" : "31945c48-1e07-4ad5-a5a2-6894c33e927f",
        "parentId" : "ab47b4e1-71bc-4b15-a073-fe156f30a5c5",
        "authorId" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "body" : "Looking at the code, I would add maybe a new flag to the \r\n`ROOT::Math::Minimiser::SetFunction( gradFunc & f, bool= false)`\r\nIn this way the Minuit2Minimizer can set this flag in the FCNGradientBase class when  creating it from the function interface passed by the clients (e.g. RooMinimizer).\r\nIf you prefer, we can merge with this and I can do this change later, please let me know\r\n",
        "createdAt" : "2021-07-06T07:19:18Z",
        "updatedAt" : "2021-07-06T07:39:29Z",
        "lastEditedBy" : "3cdeea47-0921-4380-9f86-57ac2ba3546a",
        "tags" : [
        ]
      },
      {
        "id" : "3b6916cc-6447-4fe8-94d3-9d43611f9842",
        "parentId" : "ab47b4e1-71bc-4b15-a073-fe156f30a5c5",
        "authorId" : "4809a10a-85e2-4d0e-8c00-5a0777cea24e",
        "body" : "Your suggestion makes sense, indeed it feels weird that a Minuit detail is in mathcore. In light of time constraints, I would prefer to keep it like this for now, if you don't mind too much. The problem is that returnsInMinuit2ParameterSpace is also used in other places right now, in particular in the `TestStatistics::MinuitFcnGrad` class that will be introduced in the next PR I will make.",
        "createdAt" : "2021-07-07T15:11:55Z",
        "updatedAt" : "2021-07-07T15:11:55Z",
        "lastEditedBy" : "4809a10a-85e2-4d0e-8c00-5a0777cea24e",
        "tags" : [
        ]
      }
    ],
    "commit" : "49bf5c7cf13480399ddc1ed24f6b3cd77ff218f4",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +361,365 @@         }\n\n         virtual bool returnsInMinuit2ParameterSpace() const { return false; }\n      };\n"
  }
]