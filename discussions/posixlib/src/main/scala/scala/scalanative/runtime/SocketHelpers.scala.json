[
  {
    "id" : "df78ed97-50e5-47a3-bf68-658f5866fa0e",
    "prId" : 2312,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/2312#pullrequestreview-668448982",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "68500c43-aae2-4437-a340-0d1c01f96f16",
        "parentId" : null,
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "Whatever this does could be a clue to the name of the function that calls it. Is this function returning 1 like true in C so that is good?",
        "createdAt" : "2021-05-24T17:03:59Z",
        "updatedAt" : "2021-05-24T17:03:59Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      },
      {
        "id" : "b5e4bf8f-1174-4557-a692-91e15c11a410",
        "parentId" : "68500c43-aae2-4437-a340-0d1c01f96f16",
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "Reworked to be less C and more Scala idiomatic.",
        "createdAt" : "2021-05-24T18:09:21Z",
        "updatedAt" : "2021-05-24T18:09:22Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      },
      {
        "id" : "3ca4797f-38af-4f67-9ebe-416777e27a66",
        "parentId" : "68500c43-aae2-4437-a340-0d1c01f96f16",
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "Re-worked again.  Gave helper method `tailorSockaddr()` a name which, I believe, \r\nbetter describes its intended use. \r\n\r\nI tried making that method local rather than private but the results left\r\nthe body of `ipToHost()` as nearly as long and confusing as the code this PR\r\nwants to replace.",
        "createdAt" : "2021-05-25T22:50:12Z",
        "updatedAt" : "2021-05-25T22:50:12Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      },
      {
        "id" : "81b078e9-8927-4223-92b1-4097805aaf14",
        "parentId" : "68500c43-aae2-4437-a340-0d1c01f96f16",
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "@LeeTibbert This satisfies my ideas - I like the Boolean and the naming better now.",
        "createdAt" : "2021-05-25T23:13:13Z",
        "updatedAt" : "2021-05-25T23:13:14Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      }
    ],
    "commit" : "ece8dbaade65bccb477f655944990db28f34dbd7",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +206,210 @@    // Return true iff output argument addr is now fit for use by intended\n    // sole caller, ipToHost().\n    inet_pton(addr.sa_family.toInt, src, dst) == 1\n  }\n"
  },
  {
    "id" : "6ee2cbfe-b09b-4a87-a8b6-ee09ec73bd50",
    "prId" : 2308,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/2308#pullrequestreview-665621611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7f251c8-bc65-4cc2-8108-8ea1c721c8c2",
        "parentId" : null,
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "See comment below about drawbacks of largish allocations on the stack.\r\nThere the 1 KiB is evident and clearly (to me) largish.\r\n\r\nHere the size of the fd_set allocation is most probably 128 bytes or more.\r\nWhether that is 'largish' depends upon and may vary with the designer\r\nand, ultimately, bug reports from active use in the field.\r\n\r\nI myself would consider that largish and retain the heap `alloc`, along with a terse comment.   Other designers might have a different threshold for \r\n'largish'\r\n\r\nThe dominating cost of  this function are the trips across the wire in\r\n`connect` and `select` (yuch!).   Running out of stack is a hard to discover\r\n& fatal error.  Changing from heap to stack allocation here saves a few CPU\r\ncycles, but the ratio of saved_Cycles/total_function_Cycles asymptotically approaches zero.",
        "createdAt" : "2021-05-21T15:54:50Z",
        "updatedAt" : "2021-05-21T15:54:50Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "66a7154e4207bc654b7b506845be842c99839144",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +54,58 @@\n        // stackalloc is documented as returning zeroed memory\n        val fdsetPtr = stackalloc[fd_set] //  No need to FD_ZERO\n        FD_SET(sock, fdsetPtr)\n"
  },
  {
    "id" : "334beb8f-8128-4ab2-adb5-7172581242d5",
    "prId" : 2308,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/2308#pullrequestreview-665903688",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0ec7ef76-5ae7-4437-ab39-f43c0f99f296",
        "parentId" : null,
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "Excellent change!  This removes my concern about the largish stack allocation.\r\n\r\n#####Warning: True, but tedious discussion below -- No changes required here.\r\n\r\nFor the record,I noticed that ipToHost() in SocketHelpers.scala could benefit from\r\nevolution & simplification.  If I ever get to a PR for that I might address\r\ntwo pedantic points in this edit.  I am not asking for a change here, \r\nonly capturing the info.\r\n\r\n1) Would `final val MAXmumble` allow the compiler to generate better code\r\n    (a constant? inlined?).  I have a vague memory of that.\r\n\r\n2) Since this is a Posix helper, HOST_NAME_MAX in posix limits.h should\r\n    be applicable.  However, that symbol does not exist in the SN implementation and would have to be added.  As said, subject for another PR.\r\n",
        "createdAt" : "2021-05-21T20:17:54Z",
        "updatedAt" : "2021-05-21T20:19:42Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      },
      {
        "id" : "c548f9e5-659a-4914-ac6a-0b5ee0070a63",
        "parentId" : "0ec7ef76-5ae7-4437-ab39-f43c0f99f296",
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "For future devos (tested on macOS):\r\n```c\r\n#include <unistd.h>\r\n// host name len\r\nprintf(\"MAXHOSTNAMELEN: %d\\n\", MAXHOSTNAMELEN);\r\nprintf(\"HOST_NAME_MAX: %ld\\n\", sysconf(_SC_HOST_NAME_MAX));\r\n```\r\nResult:\r\n```\r\nMAXHOSTNAMELEN: 256\r\nHOST_NAME_MAX: 255\r\n```",
        "createdAt" : "2021-05-21T21:02:49Z",
        "updatedAt" : "2021-05-21T21:02:50Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      },
      {
        "id" : "48b71562-c64c-47e7-8c4e-4d26f1cd16b8",
        "parentId" : "0ec7ef76-5ae7-4437-ab39-f43c0f99f296",
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "I really like the `sysconf()` approach.  It means a runtime call instead of a constant\r\nbut avoids a huge mess with pieces currently missing in SN.  Much easier to \r\ngrok on-sight.\r\n\r\nWith some thought, he runtime call might be reduced to 1.\r\n\r\n Good information for a future PR.",
        "createdAt" : "2021-05-21T21:17:56Z",
        "updatedAt" : "2021-05-21T21:17:57Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "66a7154e4207bc654b7b506845be842c99839144",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +22,26 @@   * https://man7.org/linux/man-pages/man2/gethostname.2.html\n   */\n  val MAXHOSTNAMELEN = 256.toUInt\n\n  def isReachableByEcho(ip: String, timeout: Int, port: Int): Boolean ="
  },
  {
    "id" : "f4ac195c-f979-404e-be6d-134e4940801c",
    "prId" : 1885,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1885#pullrequestreview-508597514",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cbb182f1-2645-470a-96f9-64013f112c98",
        "parentId" : null,
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "The change gets rid of a cast.  I spent more time that I admit trying to figure out which of the two uses of libc was relevant here, and in ratting through includes to figure it out. \r\n\r\nI believe that a special variant of libc and of memset() are being used. Withot\r\nfurther info, I expected the libc variant (yes, that libc ;-) which one I leave as\r\nan exercise for the Gentle Reader).\r\nIf I got it right, please consider `runtime.libc.memset`. I think that would give a \r\nbetter clue.\r\n\r\nIf I got it wrong, then I am clueless (could be! here and elsewhere) and could use\r\na better clue or more coffee.",
        "createdAt" : "2020-10-14T14:32:05Z",
        "updatedAt" : "2020-10-14T23:56:32Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      },
      {
        "id" : "6c4ab6c1-d855-42c7-89ae-e3740db56de2",
        "parentId" : "cbb182f1-2645-470a-96f9-64013f112c98",
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "This is using the special runtime `nativelib` `libc.memset` which is needed so that the runtime doesn't depend on `clib`. It uses this one so `posixlib` doesn't depend on `clib`.\r\n\r\nThe `SocketHelpers.scala` really belongs in the portion of `javalib` that depends on `posixlib`. It is in the `runtime` package but this needs to be a temporary home until a future PR. It should be private to Scala Native so people should not be using it.",
        "createdAt" : "2020-10-14T17:59:53Z",
        "updatedAt" : "2020-10-14T23:56:32Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      }
    ],
    "commit" : "7be6f0fd841c594db05ecc8aca0a0132367c0202",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +24,28 @@      var ret   = alloc[Ptr[addrinfo]]\n\n      libc.memset(hints.rawptr, 0, sizeof[addrinfo])\n      hints.ai_family = AF_UNSPEC\n      hints.ai_protocol = 0"
  },
  {
    "id" : "2e493bc9-1e04-4459-ad02-38ca644d40fe",
    "prId" : 1885,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1885#pullrequestreview-508610811",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c0c1bff-5e02-47a1-92e4-eff78a4ef772",
        "parentId" : null,
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "Ibid. & a third below.",
        "createdAt" : "2020-10-14T14:32:22Z",
        "updatedAt" : "2020-10-14T23:56:32Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      },
      {
        "id" : "1f7d5b94-90da-40c9-8a00-8ee4b38efcb5",
        "parentId" : "8c0c1bff-5e02-47a1-92e4-eff78a4ef772",
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "See above.",
        "createdAt" : "2020-10-14T18:17:59Z",
        "updatedAt" : "2020-10-14T23:56:32Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      }
    ],
    "commit" : "7be6f0fd841c594db05ecc8aca0a0132367c0202",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +112,116 @@\n      var ipstr = alloc[CChar](INET6_ADDRSTRLEN + 1)\n      libc.memset(hints.rawptr, 0, sizeof[addrinfo])\n      hints.ai_family = AF_UNSPEC\n      hints.ai_socktype = 0"
  }
]