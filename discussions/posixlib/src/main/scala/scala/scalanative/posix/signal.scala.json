[
  {
    "id" : "2ee74813-9a7c-4e43-9e11-c104fa3b3f84",
    "prId" : 1362,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1362#pullrequestreview-239257093",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53ebddac-f4ce-4272-88aa-14d397d21b95",
        "parentId" : null,
        "authorId" : "32fbd536-47f0-43f4-8249-14123bf300fe",
        "body" : "Is the reference to \"macros\" here a TODO? Looks like this code does not currently use macros. But could be replaced with a macro?",
        "createdAt" : "2019-05-19T17:48:10Z",
        "updatedAt" : "2021-04-30T02:00:33Z",
        "lastEditedBy" : "32fbd536-47f0-43f4-8249-14123bf300fe",
        "tags" : [
        ]
      },
      {
        "id" : "02a2a377-4b5c-4229-93d3-fd21686a6356",
        "parentId" : "53ebddac-f4ce-4272-88aa-14d397d21b95",
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "We have to have helper functions in C to support macros currently. The comment is from the standard and that portion is complete.\r\nhttp://pubs.opengroup.org/onlinepubs/9699919799/basedefs/signal.h.html\r\n\r\n",
        "createdAt" : "2019-05-19T21:21:10Z",
        "updatedAt" : "2021-04-30T02:00:33Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      },
      {
        "id" : "ed961f16-a6bf-4032-8fee-5ac132f3d743",
        "parentId" : "53ebddac-f4ce-4272-88aa-14d397d21b95",
        "authorId" : "32fbd536-47f0-43f4-8249-14123bf300fe",
        "body" : "Ah! Makes sense. I see now the reference is to the C preprocessor macros used to define the constant. I was stucking thinking only about Scala macros. LGTM!",
        "createdAt" : "2019-05-19T21:59:20Z",
        "updatedAt" : "2021-04-30T02:00:33Z",
        "lastEditedBy" : "32fbd536-47f0-43f4-8249-14123bf300fe",
        "tags" : [
        ]
      }
    ],
    "commit" : "941a4d0e9c88a56a121fb2150e87e01bb2415ecc",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +20,24 @@@extern\nobject signal {\n  // define the following macros, which shall expand to constant expressions with distinct values\n  // that have a type compatible with the second argument to, and the return value of, the signal() function,\n  // and whose values shall compare unequal to the address of any declarable function."
  },
  {
    "id" : "396d5df1-663a-4f34-88e2-d9dd8cb5927a",
    "prId" : 1362,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1362#pullrequestreview-629456964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "15228172-3990-4023-a24c-f4f0e126ae01",
        "parentId" : null,
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "Having the clue is good, but I must confess that I can not de-code it.\r\nIs it trying to say that the XSI obsolete SIG_HOLD is defined \r\nonly on Linux? or not on Linux?  \r\n\r\nAs someone who has spent __lots__ of time in understandably\r\nincomplete SN posix header files I appreciate having the \r\ncomment marker for entry points in the standard. They let\r\nme know that the entry point was considered and is \r\nintentionally not implemented.\r\n\r\nThe same comment convention is used in other places.",
        "createdAt" : "2021-04-06T17:44:17Z",
        "updatedAt" : "2021-04-30T02:00:33Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      },
      {
        "id" : "45160037-6e81-483d-8491-3f3bb1dd5328",
        "parentId" : "15228172-3990-4023-a24c-f4f0e126ae01",
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "See this - was updated.\r\nhttps://github.com/scala-native/scala-native/pull/1362/files/54a95930e67d8824aa17a5375fc3e7244d29cb79#diff-dc2e6a694318d6132b77e0d77932935258be9cda1c6c2d929cd50e8e96054f8eR16-R18",
        "createdAt" : "2021-04-06T22:26:12Z",
        "updatedAt" : "2021-04-30T02:00:33Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      }
    ],
    "commit" : "941a4d0e9c88a56a121fb2150e87e01bb2415ecc",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +24,28 @@  // and whose values shall compare unequal to the address of any declarable function.\n\n  // Note 1: Linux\n  // @name(\"scalanative_sig_hold\")\n  // def SIG_HOLD: CFunctionPtr1[CInt, Unit] = extern"
  },
  {
    "id" : "8fedbe1a-072b-413b-909f-3ad662684c46",
    "prId" : 1362,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1362#pullrequestreview-629458764",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "26efcd17-2983-4009-bad3-510d6f7f0340",
        "parentId" : null,
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "Granted all the discussions about SN, uni-threading, and multithreading.\r\nGranted also that `concurrent/atomic` belies it name in the multighread\r\ncase.\r\n\r\nSince this is posixlib, please consider using `javalib/src/main/scala/java/util/concurrent/atomic/AtomicInteger.scala`.",
        "createdAt" : "2021-04-06T17:49:54Z",
        "updatedAt" : "2021-04-30T02:00:33Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      },
      {
        "id" : "1d22cb29-48e2-4cb0-b96f-7de948badb26",
        "parentId" : "26efcd17-2983-4009-bad3-510d6f7f0340",
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "They are all just `int`s so I am guess this is correct or possible generated.\r\n>sig_atomic_t\r\n    Possibly volatile-qualified integer type of an object that can be accessed as an atomic entity, even in the presence of asynchronous interrupts.",
        "createdAt" : "2021-04-06T22:29:58Z",
        "updatedAt" : "2021-04-30T02:00:33Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      }
    ],
    "commit" : "941a4d0e9c88a56a121fb2150e87e01bb2415ecc",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +38,42 @@\n  // define the following data types\n  type sig_atomic_t = CInt\n\n  // Integer or structure type of an object used to represent sets of signals"
  },
  {
    "id" : "51149ebc-7836-4ccd-9f15-9860f0048a0c",
    "prId" : 1362,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1362#pullrequestreview-629459536",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c8dceff-9e52-43c6-8c1b-ca23d5515b86",
        "parentId" : null,
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "This comment can be skipped if one does not want to go down\r\nthe rabbit hole.   Understood entirely that this is an area of complexity,\r\nwhich is probably going to cause unending grief no matter how it is done.\r\n\r\nWe may both have other, urgent, areas of greater interest and with\r\na better cost/benefit ratio.\r\n\r\nSince this is review mode, Here we go, after the White Rabbit...\r\n\r\nLines 65/66 define the type sigval.  That definition appears reasonable\r\nbut may change as it is exercised in the field.   For now lets go with it.\r\n\r\nIf those lines were moved to jujst before here,  (yes, I am old Pascal style, declare before use. Understood they they do not technically need to be moved), I believe the type `sigval` could be used in the `sigevent` notification \r\nrather than as `Ptr[sigval]`.  That is,  use the type rather than a Ptr\r\nto the type.  Since we are doing `copy-in/copy-out` semantics anyway,\r\nthe underlying OS will not be writing directly into the SN structure.\r\n\r\nIMO, removing the level of indirection (if possible) make it easier to \r\ntrace the code.\r\n",
        "createdAt" : "2021-04-06T18:17:18Z",
        "updatedAt" : "2021-04-30T02:00:33Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      },
      {
        "id" : "45490f4f-14d3-4bfc-85cf-675328b56842",
        "parentId" : "1c8dceff-9e52-43c6-8c1b-ca23d5515b86",
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "No, this has to be a `Ptr` and de-referenced in the C helper.",
        "createdAt" : "2021-04-06T22:31:41Z",
        "updatedAt" : "2021-04-30T02:00:33Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      }
    ],
    "commit" : "941a4d0e9c88a56a121fb2150e87e01bb2415ecc",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +48,52 @@  type pthread_attr_t = types.pthread_attr_t\n\n  type sigevent = CStruct5[\n    CInt,                         // sigev_notify Notification type\n    CInt,                         // sigev_signo Signal number"
  },
  {
    "id" : "a3c1fff1-136f-4439-a02f-624ce4e2a905",
    "prId" : 1362,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/1362#pullrequestreview-629512176",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6735e3b1-4b4d-4762-a625-a7be0647634e",
        "parentId" : null,
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "Since si_band is `OB_XSR` (Obsolete, XSI Streams) in the spec, and we are\r\nusing copy-in/copy-out semantics, I suggest this field be changed to a placeholder comment giving the name and that it is obsolete. That would\r\nreduce complexity and cost spent on an obsolete field.  If done, a \r\ncorresponding change to the underlying C code and perhaps any Ops\r\nimplicit.\r\n\r\nAgain, if you agree with the concept but do not have time/patience for the\r\nchange, let me know.",
        "createdAt" : "2021-04-06T18:39:19Z",
        "updatedAt" : "2021-04-30T02:00:33Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      },
      {
        "id" : "756d3f31-1b79-4b51-842c-d956e2f9c5ff",
        "parentId" : "6735e3b1-4b4d-4762-a625-a7be0647634e",
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "I guess we could do this but we haven't in the past - we don't have any package docs to hold stuff like that.",
        "createdAt" : "2021-04-06T22:43:52Z",
        "updatedAt" : "2021-04-30T02:00:33Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      },
      {
        "id" : "4fcac179-9e5e-4d5d-8777-33a36e503d98",
        "parentId" : "6735e3b1-4b4d-4762-a625-a7be0647634e",
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "Not much in the way of docs - is the plan or do we want people to go the spec and stuff online? https://www.javadoc.io/doc/org.scala-native/posixlib_native0.4_2.11/latest/index.html#package",
        "createdAt" : "2021-04-06T22:47:25Z",
        "updatedAt" : "2021-04-30T02:00:33Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      },
      {
        "id" : "33e019e0-c281-43ae-8693-5a8778be5e23",
        "parentId" : "6735e3b1-4b4d-4762-a625-a7be0647634e",
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "I never knew or had see `www.javadoc.io/org.scala-native/posixlib_native`.  Learn something\r\nevery day.\r\n\r\nI am usually a \"document it all & do it early\" person but my thinking is that at most this\r\nshould be documented as `experimental`.  I think it needs/deserves some more maturity\r\nbefore even that.  ",
        "createdAt" : "2021-04-07T00:49:32Z",
        "updatedAt" : "2021-04-30T02:00:33Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "941a4d0e9c88a56a121fb2150e87e01bb2415ecc",
    "line" : 186,
    "diffHunk" : "@@ -1,1 +184,188 @@    Ptr[Byte],  // void *si_addr Address of faulting instruction\n    CInt,       // si_status Exit value or signal\n    CLong,      // si_band Band event for SIGPOLL\n    Ptr[sigval] // si_value Signal value (Ptr instead of value)\n  ]"
  }
]