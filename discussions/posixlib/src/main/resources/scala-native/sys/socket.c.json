[
  {
    "id" : "f8036bdd-cc0b-4ed3-a20e-d6a153d57f9d",
    "prId" : 2258,
    "prUrl" : "https://github.com/scala-native/scala-native/pull/2258#pullrequestreview-656103832",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a25b6dfa-f760-42d7-96a3-d3ba4f68d673",
        "parentId" : null,
        "authorId" : "7993fb77-2703-437b-8884-a8af6767e218",
        "body" : "I really don't have the knowledge to comment on static asserts in relation to struct alignment.\r\n\r\nIn my far past working with C, we would set a POSIX or C standard in the make file for compiling, forcing the C library to thread that path. I would think that we should be able to generate code that is compatible with a C library in regards to struct alignment and padding for a certain standard but I have yet to experiment and thread my way through that idea.\r\n\r\nIn a previous PR https://github.com/scala-native/scala-native/pull/2093, you had some checking of struct lengths. Is this similar? ",
        "createdAt" : "2021-05-10T00:22:18Z",
        "updatedAt" : "2021-05-10T22:14:37Z",
        "lastEditedBy" : "7993fb77-2703-437b-8884-a8af6767e218",
        "tags" : [
        ]
      },
      {
        "id" : "1e604cb7-d93e-4e38-a32d-18b9ca63fdaf",
        "parentId" : "a25b6dfa-f760-42d7-96a3-d3ba4f68d673",
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "re: In a previous PR #2093, you had some checking of struct lengths. Is this similar?\r\n\r\nExactly, the same concept of competently using the C compiler is applicable in many \r\nplaces.  To me the potential benefits of decreased execution time,  decreased development time\r\nwith easier correctness is worth presenting and explains a second, but not a third time.",
        "createdAt" : "2021-05-10T21:20:26Z",
        "updatedAt" : "2021-05-10T22:14:37Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      },
      {
        "id" : "e07ea0ae-c834-4976-8723-226a2c6098df",
        "parentId" : "a25b6dfa-f760-42d7-96a3-d3ba4f68d673",
        "authorId" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "body" : "Again, thank you for your time & detail, Let me describe more. I am trying for professional discourse\r\nand to filter out any crankiness or frustration on my part.  Forgive me if I fail in that effort.\r\n\r\nre: I would think that we should be able to generate code that is compatible with a C library in regards to struct alignment and padding for a certain standard\r\n\r\nTo the best of my knowledge, specifying either padding or/and alignment are off in the fringes of C & Posix\r\nstandards.  I want to say that none do, and in the main that is true.  I do vividly remember that network IPv6\r\nstructures were designed and specified on purpose to be aligned and, effectively, packed.  I would\r\nhave to check the sponsorship of that code to see how it relates to IEEE C (and/or ISO C and/or POSIX).\r\nI think there are some network extensions in those somewhere but I can not quote chapter and verse.\r\n\r\nTo the best of my knowledge that is a soft assumption that a developer will (os) link with a library\r\nwhich is known to be compatible with the include files specified to the compiler.  That is, I think\r\nthere is a soft correspondance:  e.g. \"Use Clang .h files and link with any library which matches them.\r\nIf you get it wrong, that is on you\".\r\n\r\nThe `_Static_assert()` of this PR assures that one of the following happens:\r\n\r\n1)  it is reported that structure checking can not happen and the build fails (with\r\n     a way to take the blade guards off and force compilation)\r\n\r\n2)  the SN and supplied .h files match (to a precision of interest)\r\n\r\n3)  any mismatch (to that degree of precision of interest) is reported. ",
        "createdAt" : "2021-05-10T21:33:15Z",
        "updatedAt" : "2021-05-10T22:14:37Z",
        "lastEditedBy" : "8268d89a-1c52-467c-9a13-921d930413d7",
        "tags" : [
        ]
      }
    ],
    "commit" : "7b055ee0accdacccc40220d90c4dc73c9610348e",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +32,36 @@                   offsetof(struct sockaddr, sa_data),\n               \"offset mismatch: sockaddr sa_data\");\n#endif\n#endif\n"
  }
]