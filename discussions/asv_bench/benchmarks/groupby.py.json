[
  {
    "id" : "52ac3e9d-bd8a-4f32-88cd-3c7237304156",
    "prId" : 18611,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/18611#pullrequestreview-81110643",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cee8d8d2-691c-4016-990c-7c45daddd803",
        "parentId" : null,
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "This still runs it for each benchmark in the class, instead of previously only once (I think)",
        "createdAt" : "2017-12-04T10:34:11Z",
        "updatedAt" : "2017-12-05T05:33:20Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      },
      {
        "id" : "ee544b0f-e03a-4af5-9b94-7165fc8c6513",
        "parentId" : "cee8d8d2-691c-4016-990c-7c45daddd803",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "I think `setup_cache` will still only run once:\r\n\r\n>If the setup is especially expensive, the setup_cache method may be used instead, which only performs the setup calculation once and then caches the result to disk. It is run only once also for repeated benchmarks and profiling, unlike setup",
        "createdAt" : "2017-12-05T05:37:44Z",
        "updatedAt" : "2017-12-05T05:37:44Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "a2213283-e0f6-4f94-867b-16b1e339dd93",
        "parentId" : "cee8d8d2-691c-4016-990c-7c45daddd803",
        "authorId" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "body" : "yeah, the wording is not very clear. I interpreted it to not run between repetitions of the same benchmark, not for multiple benchmarks in the same class",
        "createdAt" : "2017-12-05T09:08:23Z",
        "updatedAt" : "2017-12-05T09:08:23Z",
        "lastEditedBy" : "cc7022b2-2831-4c63-a4da-d18b0d342508",
        "tags" : [
        ]
      }
    ],
    "commit" : "b81baf501a408857ba4e603e27c434e1350344df",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +74,78 @@                    tm.makeStringIndex(10000).take(\n                        np.random.randint(0, 10000, size=size)))}\n        return data\n\n    def setup(self, data, key):"
  },
  {
    "id" : "01c00ddd-32fe-4676-8b2b-0e126e7b9908",
    "prId" : 19673,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19673#pullrequestreview-97325049",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ef61ef6c-6b92-4128-954f-e2bdd71a0285",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "do we bench for the compat methods for datetimelikes? (timestamp / timedelta), most of these would work (except prod, mean, mad, pct_change and a few more), though these likely work for timedeltas.  ok with adding an issue to do this as well (IOW doesn't need to be in this PR). ",
        "createdAt" : "2018-02-16T18:55:20Z",
        "updatedAt" : "2018-02-24T16:40:56Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "e8467c5b-043c-4448-93a9-f5decf239179",
        "parentId" : "ef61ef6c-6b92-4128-954f-e2bdd71a0285",
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "See #19733",
        "createdAt" : "2018-02-16T21:41:52Z",
        "updatedAt" : "2018-02-24T16:40:56Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "eff660370cceb2c26fef207ae444be9497d063a1",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +374,378 @@               'cumprod', 'cumsum', 'describe', 'ffill', 'first', 'head',\n               'last', 'mad', 'max', 'min', 'median', 'mean', 'nunique',\n               'pct_change', 'prod', 'rank', 'sem', 'shift', 'size', 'skew',\n               'std', 'sum', 'tail', 'unique', 'value_counts', 'var']]\n"
  },
  {
    "id" : "469815be-bd80-474b-9e94-8d6a6e1df1f7",
    "prId" : 19722,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/19722#pullrequestreview-100292157",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0a514967-b342-43fe-94f8-86eb3be64cc9",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "I didn't end up removing any other tests after adding this here so you could argue there's some bloat with this. That said, my plan was to take care of #19733 first and then come back to clean up where possible. The reason for that is some of the existing object tests are wrapped up with `datetime` tests as well (see `class FirstLast`) so it would add some complexity to try and unwind that before completing the change mentioned",
        "createdAt" : "2018-02-28T07:37:15Z",
        "updatedAt" : "2018-02-28T07:37:15Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      },
      {
        "id" : "760beee2-fce5-44f2-ac36-27a151c3ce72",
        "parentId" : "0a514967-b342-43fe-94f8-86eb3be64cc9",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "thats fine",
        "createdAt" : "2018-03-01T01:26:35Z",
        "updatedAt" : "2018-03-01T01:26:35Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      }
    ],
    "commit" : "ee4d0bd8a03539fa77ad9a43556aa979dd19bafd",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +378,382 @@\n    param_names = ['dtype', 'method']\n    params = [['int', 'float', 'object'],\n              ['all', 'any', 'bfill', 'count', 'cumcount', 'cummax', 'cummin',\n               'cumprod', 'cumsum', 'describe', 'ffill', 'first', 'head',"
  },
  {
    "id" : "c2e81a16-b30c-42f2-8491-bdaf1dbf751d",
    "prId" : 20043,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/20043#pullrequestreview-102089968",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3639081-11b3-4ec6-a54a-7a5c4b42c964",
        "parentId" : null,
        "authorId" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "body" : "`int` tests for `count` / `nunique` are already covered in `GroupByMethods` though the differentiator here is that we are testing the use of multiple fields in the grouping. It may make sense to just do that natively in `GroupByMethods` but I didn't want to rip up too many things as of yet",
        "createdAt" : "2018-03-07T20:44:23Z",
        "updatedAt" : "2018-03-08T00:48:11Z",
        "lastEditedBy" : "5e8c5ef2-940b-436e-9c5f-98ae5460128c",
        "tags" : [
        ]
      }
    ],
    "commit" : "23f07773c325e498f184db59a9df8379cd3c8c1e",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +209,213 @@\n\nclass CountMultiInt(object):\n\n    goal_time = 0.2"
  },
  {
    "id" : "b8460206-dedb-4c60-9524-0149f5f765ae",
    "prId" : 32854,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/32854#pullrequestreview-391913119",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45819f43-4d50-40d0-9f21-7db3aa19d073",
        "parentId" : null,
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "can you parameterize on the engine?",
        "createdAt" : "2020-04-08T20:50:12Z",
        "updatedAt" : "2020-04-16T04:34:38Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d33bb2c0-65f5-4ec2-9383-7ee9ad805ca4",
        "parentId" : "45819f43-4d50-40d0-9f21-7db3aa19d073",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "The functions signatures need to be different for cython vs numba engine, so I don't think this can be ASV parametrizable. ",
        "createdAt" : "2020-04-13T01:10:21Z",
        "updatedAt" : "2020-04-16T04:34:38Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      },
      {
        "id" : "0c76852e-153e-4862-8d4b-be0c0b0021b7",
        "parentId" : "45819f43-4d50-40d0-9f21-7db3aa19d073",
        "authorId" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "body" : "There are different benchmarks for each though",
        "createdAt" : "2020-04-13T01:10:30Z",
        "updatedAt" : "2020-04-16T04:34:38Z",
        "lastEditedBy" : "eb0b5a98-1084-4e61-8414-5fb19728b91f",
        "tags" : [
        ]
      }
    ],
    "commit" : "5909abb4948f3e53e3dce672e9b85e9b82467369",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +648,652 @@        self.grouper[1].transform(function, engine=\"cython\")\n\n    def time_dataframe_numba(self):\n        def function(values, index):\n            return values * 5"
  },
  {
    "id" : "03fad61e-dacb-4358-87f0-c381dbfdd2ec",
    "prId" : 37149,
    "prUrl" : "https://github.com/pandas-dev/pandas/pull/37149#pullrequestreview-511018952",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "689d3235-6a94-4403-9587-2801a1565636",
        "parentId" : null,
        "authorId" : "62ea8cf7-c1b2-44f6-8b58-8d97bc4dc7f0",
        "body" : "I'm not sure if ASV is usually added for regressions only, but at this point adding `self.df.groupby(\"group\").ffill()` and other methods as `self.df.groupby(\"group\").fillna(method=\"bfill\")` would make sense.",
        "createdAt" : "2020-10-17T00:15:42Z",
        "updatedAt" : "2020-10-17T22:24:26Z",
        "lastEditedBy" : "62ea8cf7-c1b2-44f6-8b58-8d97bc4dc7f0",
        "tags" : [
        ]
      },
      {
        "id" : "88f40cb1-96de-43d9-9385-61de64828b6c",
        "parentId" : "689d3235-6a94-4403-9587-2801a1565636",
        "authorId" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "body" : "yes it is fine to add here as well",
        "createdAt" : "2020-10-17T13:44:07Z",
        "updatedAt" : "2020-10-17T22:24:26Z",
        "lastEditedBy" : "7086d5c0-382b-4c41-b70d-144a07643f71",
        "tags" : [
        ]
      },
      {
        "id" : "d0e8864b-bae9-492a-8489-20e477e4f091",
        "parentId" : "689d3235-6a94-4403-9587-2801a1565636",
        "authorId" : "2733f79e-d99c-490f-8750-7e0bb6c75032",
        "body" : "Done",
        "createdAt" : "2020-10-17T22:24:36Z",
        "updatedAt" : "2020-10-17T22:24:37Z",
        "lastEditedBy" : "2733f79e-d99c-490f-8750-7e0bb6c75032",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a93e0b8b1e2f2777c0916f2d7a0ab176a9082d8",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +367,371 @@\n    def time_df_ffill(self):\n        self.df.groupby(\"group\").fillna(method=\"ffill\")\n\n    def time_df_bfill(self):"
  }
]