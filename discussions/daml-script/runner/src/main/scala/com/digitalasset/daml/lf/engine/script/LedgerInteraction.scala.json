[
  {
    "id" : "e8804d6b-ca46-48cb-b835-32378a245693",
    "prId" : 8750,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8750",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f53494cc-782e-46ef-9f41-634088de04e6",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I recommend reviewing this with whitespace changes hidden. Unfortunately, scalafmt is pretty dumb here.",
        "createdAt" : "2021-02-04T13:17:25Z",
        "updatedAt" : "2021-02-04T13:17:25Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "b9c1ef6bb1241e104dc87bb11b72911563a91125",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +583,587 @@  )(implicit ec: ExecutionContext): Future[\n    Either[StatusRuntimeException, (RichTransaction, Seq[ScriptLedgerClient.CommandResult])]\n  ] =\n    Future {\n      // Clear state at the beginning like in SBSBeginCommit for scenarios."
  },
  {
    "id" : "c305b2de-6958-4fa2-b056-a639f4f43649",
    "prId" : 7682,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aac5fad0-35af-4eca-8c6e-36f92eaa9129",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "```suggestion\r\n    } else if (tokenParties == parties.toSet.toSet[String]) {\r\n```",
        "createdAt" : "2020-10-14T14:05:39Z",
        "updatedAt" : "2020-10-14T14:06:43Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "7b74a566-e1ee-46e9-b781-fb7dd18fdce7",
        "parentId" : "aac5fad0-35af-4eca-8c6e-36f92eaa9129",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Do you really mean `toSet` twice or `toList` followed by `toSet`?",
        "createdAt" : "2020-10-14T14:10:02Z",
        "updatedAt" : "2020-10-14T14:10:02Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "877230a3-9445-406b-ab9e-4817db4f4316",
        "parentId" : "aac5fad0-35af-4eca-8c6e-36f92eaa9129",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Or maybe just `toSet` once?",
        "createdAt" : "2020-10-14T14:10:22Z",
        "updatedAt" : "2020-10-14T14:10:22Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "cd0499a9-ae06-43bc-8c47-bcc516186b4d",
        "parentId" : "aac5fad0-35af-4eca-8c6e-36f92eaa9129",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "I really mean `toSet` twice.",
        "createdAt" : "2020-10-14T14:17:17Z",
        "updatedAt" : "2020-10-14T14:17:17Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "c58e4a97-1671-440b-bb7d-c17568119df1",
        "parentId" : "aac5fad0-35af-4eca-8c6e-36f92eaa9129",
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "The first `toSet` doesn't take a type parameter; the second one does, which is where you can do the widen that you're doing with natural transformation to `List` and then using covariance in the merged code. The second `toSet` will return the receiver with its type changed.",
        "createdAt" : "2020-10-14T14:19:18Z",
        "updatedAt" : "2020-10-14T14:19:18Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      }
    ],
    "commit" : "d165b82f6311b3a5837d25035bd9c78b1f3b5e0c",
    "line" : 297,
    "diffHunk" : "@@ -1,1 +882,886 @@        new RuntimeException(\n          s\"Tried to $what as ${parties.toList.mkString(\" \")} but token contains no parties.\"))\n    } else if (tokenParties == Set[String](parties.toList: _*)) {\n      Future.unit\n    } else {"
  },
  {
    "id" : "6274cb2c-d038-4c9b-bd8c-7103a91e3c9a",
    "prId" : 7378,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7378",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcf3b59d-9b21-413d-b2f0-573dd9bd4e90",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This seems strictly slower than what we did before: We get an `SValue` for all commands from speedy. Then you convert it to a `Value` only to then convert it back to `SValue`s here. While you can argue that this is not a noticeable performance loss, I’m at least somewhat cautious in doing this without having measured it.",
        "createdAt" : "2020-09-14T07:24:25Z",
        "updatedAt" : "2020-09-14T11:23:26Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "9ce737f7c67beb87c4261e01e86fd50436368ede",
    "line" : 173,
    "diffHunk" : "@@ -1,1 +453,457 @@    machine.localContracts = Map.empty\n    machine.globalDiscriminators = Set.empty\n    val speedyCommands = preprocessor.unsafePreprocessCommands(commands.to[ImmArray])._1\n    val translated = compiledPackages.compiler.unsafeCompile(speedyCommands)\n    machine.setExpressionToEvaluate(SEApp(translated, Array(SEValue.Token)))"
  },
  {
    "id" : "500895ac-06c2-4e22-985e-e689bd23e12d",
    "prId" : 7354,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7354",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d67714e2-699f-42d0-aa49-196b5126c7b0",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "The implementation over the JSON API is a huge mess (for all methods). I’ll open an issue to clean this up separately.",
        "createdAt" : "2020-09-09T09:40:26Z",
        "updatedAt" : "2020-09-10T15:45:07Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "c78f22bbc802132f3022ab3407596ba027a98cd0",
    "line" : 107,
    "diffHunk" : "@@ -1,1 +774,778 @@    }\n  }\n  override def queryContractKey(party: SParty, templateId: Identifier, key: SValue)(\n      implicit ec: ExecutionContext,\n      mat: Materializer) = {"
  },
  {
    "id" : "f59a2483-ce81-4d3f-b372-f4f3ee01dfe9",
    "prId" : 7189,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7189",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cd963f25-91a7-47e3-b0d9-19d7358bb11f",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "Any chance we can do better than a `RuntimeException`?",
        "createdAt" : "2020-08-19T18:51:30Z",
        "updatedAt" : "2020-08-19T18:51:54Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "4fb5a8c6-77ee-4365-b6a1-89fda0b53e5d",
        "parentId" : "cd963f25-91a7-47e3-b0d9-19d7358bb11f",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "I will let that for `daml-application-runtime` team.",
        "createdAt" : "2020-08-20T07:15:51Z",
        "updatedAt" : "2020-08-20T07:15:51Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "868cb9ae-49bc-4db0-9d77-a001d81be7ab",
        "parentId" : "cd963f25-91a7-47e3-b0d9-19d7358bb11f",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Fair point, I need to brush up my knowledge of sensible exception types in Scala.",
        "createdAt" : "2020-08-20T07:23:32Z",
        "updatedAt" : "2020-08-20T07:27:48Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "4bea54adfba4d217c92a95e3c59673890277c712",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +435,439 @@                }\n              case Right(Left(x)) =>\n                result = Failure(new RuntimeException(s\"Unexpected abort: $x\"))\n              case Left(msg) =>\n                result = Failure(new RuntimeException(msg))"
  },
  {
    "id" : "a4ecfbc2-d991-4f58-8624-3da731308dcf",
    "prId" : 7154,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7154",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7d9516c-1304-4cb5-b292-af82b2dd9930",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It you want to be consistent the errors from here on could all start with `Encountered scenario instruction`.",
        "createdAt" : "2020-08-17T12:21:42Z",
        "updatedAt" : "2020-08-17T13:18:58Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4b7b8ad9-e3b3-4e51-a83c-5be91cd8b6b3",
        "parentId" : "c7d9516c-1304-4cb5-b292-af82b2dd9930",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Good point, I've made the messages more consistent.",
        "createdAt" : "2020-08-17T13:12:27Z",
        "updatedAt" : "2020-08-17T13:18:58Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "bf2b913218c5de31a221d04ff253bd69be6ff762",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +457,461 @@            new RuntimeException(\n              s\"FATAL: Missing package $pkg should have been reported at Script compilation\"))\n        case SResultScenarioInsertMustFail(committers @ _, optLocation @ _) =>\n          result = Failure(\n            new RuntimeException("
  },
  {
    "id" : "d18dd54d-7e75-456d-91a8-f2c6a7cef80e",
    "prId" : 7141,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7141",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1fa4b4c-bc76-4bcf-b0bf-51c845d5b059",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Does `disclosures` include signatories?",
        "createdAt" : "2020-08-17T07:38:52Z",
        "updatedAt" : "2020-08-17T07:52:04Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4ed0f930-09aa-417b-b4a9-3c21c005c52e",
        "parentId" : "e1fa4b4c-bc76-4bcf-b0bf-51c845d5b059",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Yes, printing out `ledgerParties` at [this `listKnownParties`](https://github.com/digital-asset/daml/pull/7141/files/f6638674e0b44cb4312366bd2c85ea1b076f1dd9#diff-cccb5410aed907fe161d04a35b70330cR451) shows that it includes `alice`, `alice1`, and `bob`. `alice` is only a signatory, not an observer at this point. As I understand it `disclosures` contains [`informeesOfNode`](https://github.com/digital-asset/daml/blob/19f002bb23ac4c48b408432dfaf1ee42f87a219a/daml-lf/transaction/src/main/scala/com/digitalasset/daml/lf/transaction/NodeInfo.scala#L22) which includes signatories.",
        "createdAt" : "2020-08-17T08:35:53Z",
        "updatedAt" : "2020-08-17T08:35:53Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6638674e0b44cb4312366bd2c85ea1b076f1dd9",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +474,478 @@  // allocated explicitly, e.g. parties created by `partyFromText`.\n  private def getLedgerParties(): Iterable[Ref.Party] = {\n    scenarioRunner.ledger.ledgerData.nodeInfos.values.flatMap(_.disclosures.keys)\n  }\n"
  },
  {
    "id" : "bebc558f-8e36-4640-b51a-d1fdf9bdde34",
    "prId" : 7076,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7076",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d79db12e-9a68-4b50-8a2b-6bd0716daa46",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I am slightly worried that we are effectively replicating a significant part of the logic of `submit`. What happens if we replace the whole implementation here by something that catches `SError` and flips it?",
        "createdAt" : "2020-08-11T14:47:31Z",
        "updatedAt" : "2020-08-12T08:10:17Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "fd75e0d7-bfe7-4c9d-a55c-f1dd4acf6cd4",
        "parentId" : "d79db12e-9a68-4b50-8a2b-6bd0716daa46",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "By catching `SError` you mean the `SResultError` branch? AFAIU that's not enough as we also want to flip in other cases, e.g. on `commitTransaction` error in `SResultScenarioCommit`. Conversely we don't always want to recover from `Failure`, e.g. AFAIU we don't want to recover from `Failure(new RuntimeException(s\"Unexpected abort: $x\"))`. The other `submit` implementations use `Left` for errors that should be caught by `submitMustFail` but the `Left` parameter is restricted to `StatusRuntimeException` which doesn't really work in this case.\r\n\r\nAn alternative might be to use a more general or a trait associated type instead of `StatusRuntimeException` and then use `Success(Left(_))` in `IdeClient.submit` for errors that `submitMustFail` should catch.",
        "createdAt" : "2020-08-11T15:44:28Z",
        "updatedAt" : "2020-08-12T08:10:17Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "b5b52d9c-cda3-4d2b-ab15-e08427ef27eb",
        "parentId" : "d79db12e-9a68-4b50-8a2b-6bd0716daa46",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Side note: SResultScenarioCommit was a bug, fixed in https://github.com/digital-asset/daml/pull/7089. Doesn’t change anything here.\r\n\r\nThere are a few cases to consider here:\r\n1. The future completes successfully. In that case, we want to turn it into a failure.\r\n2. The future fails with `SError`. This includes calls to `error` as well as `ScenarioErrorCommitError` which we will get back from a failed commit for things like authorization errors.\r\n3. Other stuff, e.g., the wildcard match at the end which we hope not to hit.\r\n\r\nMy idea would be to call `submit` and then handle the three cases.\r\n1. This is an actual failure. We expected things to fail and they didn’t.\r\n2. This is the successful case. We expected a failure during submission and we got one.\r\n3. This is a crash, something went wrong.",
        "createdAt" : "2020-08-11T16:12:55Z",
        "updatedAt" : "2020-08-12T08:10:17Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d81c8425-f466-4e44-acfd-ec724a7335c0",
        "parentId" : "d79db12e-9a68-4b50-8a2b-6bd0716daa46",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Ah, I see. That seems to be possible. I've pushed a commit implementing this.",
        "createdAt" : "2020-08-11T16:39:12Z",
        "updatedAt" : "2020-08-12T08:10:17Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b4069aeb0cabd660fe58e5ec6b9b3c3164957f2",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +477,481 @@  }\n\n  override def submitMustFail(party: SParty, commands: List[ScriptLedgerClient.Command])(\n      implicit ec: ExecutionContext,\n      mat: Materializer): Future[Either[Unit, Unit]] = {"
  },
  {
    "id" : "8d7604e3-acb2-47ed-a20d-463cd00ed8df",
    "prId" : 7076,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7076",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6188da5b-07e1-4c5e-a07e-7505708ed6e8",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We expect to never hit this right? Because in the script service you will always run against the current script library. If so, it might be useful to add a comment.",
        "createdAt" : "2020-08-11T16:47:29Z",
        "updatedAt" : "2020-08-12T08:10:17Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d8164639-acc9-4042-b1de-e1eb87811428",
        "parentId" : "6188da5b-07e1-4c5e-a07e-7505708ed6e8",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Yes, it's only listed for completeness. I've added a comment.",
        "createdAt" : "2020-08-12T08:10:25Z",
        "updatedAt" : "2020-08-12T08:10:25Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b4069aeb0cabd660fe58e5ec6b9b3c3164957f2",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +484,488 @@        case Right(_) => Left(())\n        // We don't expect to hit this case but list it for completeness.\n        case Left(_) => Right(())\n      })\n      .recoverWith({"
  },
  {
    "id" : "a34b0033-fc41-44d2-9383-04263e445ae9",
    "prId" : 5211,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5211",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8c76b396-be22-4d88-a3b5-ce82d2a8776e",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Agreed, validation is probably the best answer for now.",
        "createdAt" : "2020-03-27T09:27:42Z",
        "updatedAt" : "2020-03-27T10:23:32Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6226b8e83eea9fbd0ca6b2e4f6c1675dfc79391",
    "line" : 52,
    "diffHunk" : "@@ -1,1 +235,239 @@//    with a production ledger, this is probably not super important since you usually act as\n//    only one party there. So at least initially, we’re probably best off by just adding validation\n//    that ensures that the party you pass to `submit` and `query` matches.\n// 4. `submitMustFail` is not yet supported. No fundamental reason for this but it’s also not\n//    very useful in a production ledger. Currently, we just fail during unmarshalling for"
  },
  {
    "id" : "eb9415ea-0afc-41b9-bbc1-92ba9c6b61fa",
    "prId" : 5211,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5211",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d1f1505-aa33-423e-a16c-1631b7c28b0a",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "How does this handle errors returned by the JSON API? Does akka turn this into a failing future automatically?",
        "createdAt" : "2020-03-27T09:36:26Z",
        "updatedAt" : "2020-03-27T10:23:32Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "5e058a81-37b1-4514-bc87-0b01face950e",
        "parentId" : "4d1f1505-aa33-423e-a16c-1631b7c28b0a",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "No, it will fail during unmarshalling atm. Fixing that is part of making `submitMustFail` work. I’ve extended the comment for that.",
        "createdAt" : "2020-03-27T10:11:40Z",
        "updatedAt" : "2020-03-27T10:23:36Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "f6226b8e83eea9fbd0ca6b2e4f6c1675dfc79391",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +334,338 @@    Http()\n      .singleRequest(req)\n      .flatMap { resp =>\n        Unmarshal(resp.entity).to[JsonLedgerClient.CreateResponse]\n      }"
  }
]