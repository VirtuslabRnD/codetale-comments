[
  {
    "id" : "baaec177-4adb-451f-94a5-149b814ebc47",
    "prId" : 7682,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7682",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e65c5309-5e32-44d9-8a32-075b98c7428b",
        "parentId" : null,
        "authorId" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "body" : "`OneAnd` is way more flexible for this kind of thing.\r\n\r\n```suggestion\r\n        OneAnd(x, xs).traverse(toParty(_)).map(oafp => /*oafp: OneAnd[FrontStack, Party]; some conversion here*/)\r\n```",
        "createdAt" : "2020-10-14T14:03:54Z",
        "updatedAt" : "2020-10-14T14:06:43Z",
        "lastEditedBy" : "4c501a40-3340-4f35-b66e-fcfb75e20f37",
        "tags" : [
        ]
      },
      {
        "id" : "6ae06b8a-0ebb-4dbc-a196-67f886524d6e",
        "parentId" : "e65c5309-5e32-44d9-8a32-075b98c7428b",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "ah good point, somehow it didnâ€™t occur to me to use `OneAnd` for something other than `Set` here.",
        "createdAt" : "2020-10-14T14:08:15Z",
        "updatedAt" : "2020-10-14T14:08:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "d165b82f6311b3a5837d25035bd9c78b1f3b5e0c",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +382,386 @@    v match {\n      case SList(FrontStackCons(x, xs)) =>\n        NonEmptyList(x, xs.toList: _*).traverse(toParty(_)).map(toNonEmptySet(_))\n      case SParty(p) =>\n        Right(OneAnd(p, Set())) // For backwards compatibility, we support a single part here as well."
  },
  {
    "id" : "5c6bacd7-698f-4442-9cab-89fd64b2bb7c",
    "prId" : 7287,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7287",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fa2fa1c4-dead-4640-a86c-4a6f309244e2",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Is the idea that this is supposed to be sorted? If so, we should document this in a comment.",
        "createdAt" : "2020-09-01T08:06:32Z",
        "updatedAt" : "2020-09-01T09:15:16Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5e39cb2b-8420-419a-a0e2-5dd89114fa1a",
        "parentId" : "fa2fa1c4-dead-4640-a86c-4a6f309244e2",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "It is still not sorted. \r\nI just want the names and the indexes of the field factored out, so it simplify changes when I make the fields sorted. \r\nI will change the type of `SStruct#fiedls` in an upcoming PR. ",
        "createdAt" : "2020-09-01T08:22:08Z",
        "updatedAt" : "2020-09-01T09:15:16Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "ddf51121-737e-4b37-9d02-632717c363fd",
        "parentId" : "fa2fa1c4-dead-4640-a86c-4a6f309244e2",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "But the indices will be wrong if `tupleFieldNames` is not sorted right?",
        "createdAt" : "2020-09-01T08:23:19Z",
        "updatedAt" : "2020-09-01T09:15:16Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "6c7c63d4-75c4-4f7d-a7a3-6aa71bbee858",
        "parentId" : "fa2fa1c4-dead-4640-a86c-4a6f309244e2",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Currently, the indices should be in the same order as you build the arguments of the `SBStructCon` builtin.\r\nLatter `SBStructCon` will reorder the field, only then the order will be relevant.\r\n\r\nI replace the line \r\n```\r\n private[this] val Seq(fstIdx, sndIdx) = tupleFieldNames.indices\r\n```\r\nby \r\n```\r\n  private[this] val fstIdx = 0\r\n  private[this] val sndIdx = 1\r\n``` \r\nSo now, the change really just extract some expressions as values (+ renaming `\"a\"` to `\"fst\"` and `\"b\"` to `\"second\"`)\r\n",
        "createdAt" : "2020-09-01T09:15:24Z",
        "updatedAt" : "2020-09-01T09:15:25Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "d0738768-c8bc-4a5e-b28e-75099445391c",
        "parentId" : "fa2fa1c4-dead-4640-a86c-4a6f309244e2",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Thanks for the explanation!",
        "createdAt" : "2020-09-01T09:17:28Z",
        "updatedAt" : "2020-09-01T09:17:28Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "2e6415cad06ebb1042a067cefc30fe1269dcbfc5",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +210,214 @@    }\n\n  private[this] val tupleFieldNames =\n    ImmArray(Name.assertFromString(\"fst\"), Name.assertFromString(\"snd\"))\n  private[this] val fstIdx = 0"
  }
]