[
  {
    "id" : "1fb5ab67-1f4e-47e8-a529-fd44dfe7783b",
    "prId" : 9542,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9542",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "120d49a2-d3f1-484d-b498-e786386d7461",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We donâ€™t actually expect to ever have `acs.get` return `None` right? No objection to the change just wondering. I sometimes tend to prefer a crash for unexpected cases to silently swallowing them but seems fine here.",
        "createdAt" : "2021-04-30T12:44:27Z",
        "updatedAt" : "2021-04-30T12:48:05Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "9e7fdce0-ed96-41ed-a1b7-65fda0e3b821",
        "parentId" : "120d49a2-d3f1-484d-b498-e786386d7461",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "We do, if an ACS item has a reference to an unknown contract. E.g. the [`\"unknown\"` test-case](https://github.com/digital-asset/daml/pull/9542/files/65780dc798b7860e0d97c1a37cfc31d6a4ad8f00#diff-1fd7c179b7a83fed4577905906fd689510299a680d11464fc1a6aad1a60ceb3bR88) triggers this.\r\n\r\nYou're right that currently this doesn't occur with `daml ledger export` as invoked from the command-line because we guard against it with [this check](https://github.com/digital-asset/daml/pull/9542/files#diff-e376d2f8c626004f50a9317dc11a8944d4d9bc9eb00372ea4cd68628d5c5cfd6R131). However, the next step is to address https://github.com/digital-asset/daml/issues/8773 in which case we need to handle unknown contract ids here.",
        "createdAt" : "2021-05-03T08:42:20Z",
        "updatedAt" : "2021-05-03T08:42:20Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "65780dc798b7860e0d97c1a37cfc31d6a4ad8f00",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +59,63 @@      case Left(cycle) =>\n        throw new IllegalArgumentException(s\"Encountered cyclic contract dependencies: $cycle\")\n      case Right(sorted) => sorted.collect(Function.unlift(cid => acs.get(cid)))\n    }\n  }"
  },
  {
    "id" : "2b1fa534-16bc-45b1-ae94-c27df7265e80",
    "prId" : 10490,
    "prUrl" : "https://github.com/digital-asset/daml/pull/10490#pullrequestreview-723362877",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6443eb3a-7795-4e34-b537-8f701ecb97ce",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I think I forgot how we handle ExerciseByKey. Can you confirm that my understanding upon rereading the code is correct:\r\nWe turn each exercise into an exerciseByKey provided that the contract has been created (and has a key) in the current transaction and has not been archived since.",
        "createdAt" : "2021-08-05T13:09:05Z",
        "updatedAt" : "2021-08-05T13:09:25Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "75c45d03-6c69-45df-a139-6e30b60d0aec",
        "parentId" : "6443eb3a-7795-4e34-b537-8f701ecb97ce",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Correct, with one exception: If the exercise directly follows the create that created the contract, then we issue a createAndExercise instead of create followed by exerciseByKey.",
        "createdAt" : "2021-08-05T13:35:37Z",
        "updatedAt" : "2021-08-05T13:35:37Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "a28ae468dd317609b07308db0522bb855cb9908d",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +238,242 @@    def fromTree(tree: TransactionTree): Seq[Command] = {\n      val contractKeys = mutable.HashMap.empty[ContractId, Value]\n      def addContractKey(createdEvent: CreatedEvent): Unit = {\n        createdEvent.contractKey.foreach { contractKey =>\n          contractKeys += ContractId(createdEvent.contractId) -> contractKey"
  }
]