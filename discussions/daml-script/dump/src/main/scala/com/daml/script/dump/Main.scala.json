[
  {
    "id" : "ae944b2a-347f-4f4d-852d-aa8b2afeb550",
    "prId" : 8898,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0edd1f3f-5f5e-48cd-b753-a35f3bcb4036",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "We should move the logic out of `Main` into some more sensible places in separate PRs.",
        "createdAt" : "2021-02-19T12:22:49Z",
        "updatedAt" : "2021-02-19T16:54:03Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "d785f2f478199f22e6cf6f32675978033e331df1",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +61,65 @@  }\n\n  private def getACS(\n      client: LedgerClient,\n      parties: List[String],"
  },
  {
    "id" : "30919e7c-c25b-4cae-98c5-17a9e1f29fa4",
    "prId" : 8898,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d078d39f-92f7-4522-9579-4782303bdec1",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "This is purely an optimization right? The code below looks like itâ€™ll work without this.",
        "createdAt" : "2021-02-19T12:24:00Z",
        "updatedAt" : "2021-02-19T16:54:03Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d7c1efba-5af6-4512-a1e6-b48648e35ce1",
        "parentId" : "d078d39f-92f7-4522-9579-4782303bdec1",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Yes, if the range is going to be empty, then there is no need to issue an API call. The same holds in `getTransactionTrees`. I've added it there as well for consistency.",
        "createdAt" : "2021-02-19T16:00:26Z",
        "updatedAt" : "2021-02-19T16:54:03Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "d785f2f478199f22e6cf6f32675978033e331df1",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +72,76 @@    )\n    if (offset == ledgerBegin) {\n      Future.successful(Map.empty)\n    } else {\n      client.transactionClient"
  },
  {
    "id" : "f70ae30b-dd7d-44c7-8371-b6839ec1f4f1",
    "prId" : 8898,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2841e8a5-8944-4c42-99e9-a10e04f3a098",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe use `com.daml.ledger.api.refinements.ContractId` instead of a string?",
        "createdAt" : "2021-02-19T12:27:20Z",
        "updatedAt" : "2021-02-19T16:54:03Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "85047b0f-5360-453f-a626-378c87fb6df7",
        "parentId" : "2841e8a5-8944-4c42-99e9-a10e04f3a098",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Yes, I've used `String` here because the rest of the code also uses `String` for this purpose. I'll look into it in a follow-up PR.",
        "createdAt" : "2021-02-19T15:56:27Z",
        "updatedAt" : "2021-02-19T16:54:03Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "d785f2f478199f22e6cf6f32675978033e331df1",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +67,71 @@  )(implicit\n      mat: Materializer\n  ): Future[Map[String, CreatedEvent]] = {\n    val ledgerBegin = LedgerOffset(\n      LedgerOffset.Value.Boundary(LedgerOffset.LedgerBoundary.LEDGER_BEGIN)"
  },
  {
    "id" : "f921d37a-6926-406e-b2d8-a1e7f972e6dd",
    "prId" : 8898,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64c5d5df-fa05-4a9c-8799-0436c2ff3638",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Any reason not to work with sets here?",
        "createdAt" : "2021-02-19T12:31:39Z",
        "updatedAt" : "2021-02-19T16:54:03Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "14e15197-1e0a-45a5-87ac-25a9e3df4137",
        "parentId" : "64c5d5df-fa05-4a9c-8799-0436c2ff3638",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Not sure I follow, they are `Set[PackageId]`.",
        "createdAt" : "2021-02-19T16:02:12Z",
        "updatedAt" : "2021-02-19T16:54:03Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "d785f2f478199f22e6cf6f32675978033e331df1",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +120,124 @@        .foldMap(treeRefs(_))\n        .map(i => PackageId.assertFromString(i.packageId))\n      pkgRefs = acsPkgRefs ++ treePkgRefs\n      pkgs <- Dependencies.fetchPackages(client, pkgRefs.toList)\n      _ = writeDump("
  }
]