[
  {
    "id" : "71a50586-c3aa-4604-b34a-82d67d7e9fb5",
    "prId" : 8898,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8898",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a61c4b4-7fa7-4db5-9f86-df35e9382d72",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Is it worth comparing the ACS before and after at `skip` as well?",
        "createdAt" : "2021-02-19T12:44:12Z",
        "updatedAt" : "2021-02-19T16:54:03Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "0179766e-fe96-458d-84a0-560ace773234",
        "parentId" : "8a61c4b4-7fa7-4db5-9f86-df35e9382d72",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "Yes, that would be a good check to have. However, unless I'm missing something, this would require a bit more infrastructure. In `before` the ACS up to the offset is created by the original create and exercise commands in their original order. In `after` it is created by plain creates in some topological ordering based on contract dependencies. There is no guarantee that the contracts are created in the same order. I'm not sure that current unification algorithm can handle this.",
        "createdAt" : "2021-02-19T16:34:21Z",
        "updatedAt" : "2021-02-19T16:54:03Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "d785f2f478199f22e6cf6f32675978033e331df1",
    "line" : 186,
    "diffHunk" : "@@ -1,1 +211,215 @@      afterCmp = after.drop(after.length - beforeCmp.length)\n    } yield {\n      TransactionEq.equivalent(beforeCmp, afterCmp).fold(fail(_), _ => succeed)\n    }\n"
  },
  {
    "id" : "b0ed9acf-aedb-4277-9456-61802890c968",
    "prId" : 8829,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8829",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "513baa7d-3109-4737-a324-a210f551c6ef",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I recommend viewing that with whitespace changes hidden.",
        "createdAt" : "2021-02-12T11:41:59Z",
        "updatedAt" : "2021-02-12T11:42:20Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "720fb0c095f06f42ba8c444ff4279a8184181d9d",
    "line" : 177,
    "diffHunk" : "@@ -1,1 +175,179 @@\n  \"Generated dump for IOU transfer compiles\" in {\n    test(2) { case (client, Seq(p1, p2)) =>\n      for {\n        t0 <- submit("
  },
  {
    "id" : "7f383f61-d17f-49f7-b894-eb2d9208166e",
    "prId" : 7934,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e06e5086-5ae6-4cc4-8b28-4181513d215c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I don’t really like that test setup but I’m not quite sure what we should do instead. I think we probably want a function to diff ledger API transaction trees allowing for alpha-renaming of contract ids and party ids. Then we can make this fairly generic. However, that seems like a larger task so I’d prefer to leave it out of this PR•",
        "createdAt" : "2021-02-05T09:16:35Z",
        "updatedAt" : "2021-02-05T11:11:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b06b97faa32687d9061f524a07d3ea42a6d6ffb",
    "line" : 42,
    "diffHunk" : "@@ -1,1 +40,44 @@import org.scalatest.matchers.should.Matchers\n\nfinal class IT\n    extends AsyncFreeSpec\n    with Matchers"
  },
  {
    "id" : "a6228e52-6325-4ff5-8a36-076c5e35d0ff",
    "prId" : 7934,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7934",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bede8d27-b6d1-4aed-964e-ade5d61ef75c",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "I think this is scalafmt's fault, but it looks really weird to me.",
        "createdAt" : "2021-02-05T11:55:17Z",
        "updatedAt" : "2021-02-05T12:08:22Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "00b40c1b-b2fd-4d79-82d7-c599c978d716",
        "parentId" : "bede8d27-b6d1-4aed-964e-ade5d61ef75c",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "yeah agreed, I don’t like it either.",
        "createdAt" : "2021-02-05T12:10:15Z",
        "updatedAt" : "2021-02-05T12:10:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "0b06b97faa32687d9061f524a07d3ea42a6d6ffb",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +57,61 @@  val isWindows: Boolean = sys.props(\"os.name\").toLowerCase.contains(\"windows\")\n  val exe = if (isWindows) { \".exe\" }\n  else \"\"\n  private val tmpDir = Files.createTempDirectory(\"script_dump\")\n  private val damlc ="
  }
]