[
  {
    "id" : "f087a943-5037-4a1c-9786-e8a3a53e7630",
    "prId" : 9216,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9216",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ff78ac37-fa2b-4e31-b415-08ade9fcc104",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Probably perfectly fine for this PR but having just spent some time on optimizations: This type of code is usually much faster in Daml if you hand-write the selector since there is no list fusion so you pay for the full `mapOptional` and the allocation of the list + the second traversal for the index.",
        "createdAt" : "2021-03-24T07:49:24Z",
        "updatedAt" : "2021-03-24T11:25:03Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "4f6063772ca57590604d8027e4fbf649becd188f",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +569,573 @@fromTreeGo : Template t => TreeIndex t -> [TreeEvent] -> ContractId t\nfromTreeGo (CreatedIndex index) events =\n  case mapOptional fromCreated events of\n    [] -> error \"No created events for the requested template id found\"\n    contractIds ->"
  },
  {
    "id" : "f041f59c-d8be-43e4-98e1-eab91d0e1030",
    "prId" : 8240,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8240",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "07af8658-73b1-41c9-b849-3ae474c009ec",
        "parentId" : null,
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "My main concern here is accidentally mixing up `actAs` and `readAs`. In places like `allocatePartyWithHintOn` we use newtype wrappers to avoid such confusion. Maybe also worth adding here?",
        "createdAt" : "2020-12-11T09:06:31Z",
        "updatedAt" : "2020-12-11T09:37:03Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      },
      {
        "id" : "07c0aae0-58f6-47e9-aa89-535fbdfd62b9",
        "parentId" : "07af8658-73b1-41c9-b849-3ae474c009ec",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Yeah definitely a valid concern. The newtype on `allocatePartyWithHint` always seemed a bit awkward to me so I’m slightly hesitant to repeat that here but I could definitely be convinced otherwise.  One argument for why mistakes are not super crucial here is that they never change the resulting transaction if it succeeds, they can only change if the transaction succeeds or fails. Of course that can still cause issues.\r\n\r\n@bame-da do you have an opinion here?",
        "createdAt" : "2020-12-11T09:20:50Z",
        "updatedAt" : "2020-12-11T09:37:03Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "6fc14e02-f9ec-46fc-a0a4-1683d9e99d2f",
        "parentId" : "07af8658-73b1-41c9-b849-3ae474c009ec",
        "authorId" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "body" : "no :)\r\n\r\nI think as a user I would expect this signature. I agree that `allocatePartyWithHint` is awkward to use.",
        "createdAt" : "2020-12-11T10:13:23Z",
        "updatedAt" : "2020-12-11T10:13:24Z",
        "lastEditedBy" : "c2a5fc86-d15f-4be2-b872-e38684970a45",
        "tags" : [
        ]
      },
      {
        "id" : "b021235d-c00f-46ef-9fbc-c351cb20d6cf",
        "parentId" : "07af8658-73b1-41c9-b849-3ae474c009ec",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Alright, then I’ll keep this for now. It is marked early access so we could in principle break it at least for a bit if we really want to.",
        "createdAt" : "2020-12-11T11:45:27Z",
        "updatedAt" : "2020-12-11T11:45:28Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "5363d86498c71bf0d5cef6aa3904e23f48bc211c",
    "line" : 97,
    "diffHunk" : "@@ -1,1 +359,363 @@-- the gRPC API and the JSON API will follow.\nsubmitMulti : HasCallStack => [Party] -> [Party] -> Commands a -> Script a\nsubmitMulti actAs readAs cmds =\n    lift $ Free $ fmap pure $ Submit $ SubmitCmd with\n      actAs = actAsNonEmpty actAs"
  },
  {
    "id" : "9010caad-9c1a-41c5-8249-b9c24bdb143b",
    "prId" : 6417,
    "prUrl" : "https://github.com/digital-asset/daml/pull/6417",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b27194bf-d726-48ad-b7ea-f740245cbc10",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "When running in wallclock mode over the JSON API, do you get UTC time or Unix epoch? To me, that's not really clear from the comment.",
        "createdAt" : "2020-06-18T20:15:59Z",
        "updatedAt" : "2020-06-18T20:18:44Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "d695ae3b-84ce-43ce-b645-32c7e56febf3",
        "parentId" : "b27194bf-d726-48ad-b7ea-f740245cbc10",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "#6425 ",
        "createdAt" : "2020-06-19T06:53:42Z",
        "updatedAt" : "2020-06-19T06:53:42Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "e88d3d4fc2a2a6981f2976b76d4de5752bae8b1b",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +206,210 @@-- query the ledger time service for the current time when running over\n-- gRPC. When running over the JSON API, it will always\n-- return the Unix epoch.\ninstance HasTime Script where\n  getTime = lift $ Free (GetTime pure)"
  },
  {
    "id" : "88038091-0f1d-49cb-947e-b5881445d8f3",
    "prId" : 3428,
    "prUrl" : "https://github.com/digital-asset/daml/pull/3428",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b827a5fe-2ea5-4d84-9f78-88119c7b6bd7",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "```suggestion\r\n-- forall b. Ap (f b) (Ap f (b -> a))\r\n```",
        "createdAt" : "2019-11-12T17:46:12Z",
        "updatedAt" : "2019-11-12T17:56:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "74d88ca8-e6ab-46cb-81f5-d45f07ef2d90",
        "parentId" : "b827a5fe-2ea5-4d84-9f78-88119c7b6bd7",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Good catch, thanks! fixed in https://github.com/digital-asset/daml/pull/3438",
        "createdAt" : "2019-11-12T17:59:02Z",
        "updatedAt" : "2019-11-12T17:59:02Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "e607d4d5daa377415ce47b2303aec1cef06e892e",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +27,31 @@\n-- | A free applicative, since we don’t have existentials we have to use the weird RankNTypes encoding, this is isomorphic to\n-- forall b. Ap f b (Ap f (b -> a))\ndata Ap f a\n  = PureA a"
  }
]