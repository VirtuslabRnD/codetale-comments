[
  {
    "id" : "d560f918-fe05-429d-a8f1-1f084b29beef",
    "prId" : 573,
    "prUrl" : "https://github.com/root-project/root/pull/573#pullrequestreview-38014735",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "810b096c-defb-44c3-9757-da597c8c689d",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Can we use ```TEntryList &entries``` as there must be a TEntryList object for this signature?",
        "createdAt" : "2017-05-12T15:14:28Z",
        "updatedAt" : "2017-05-14T14:58:24Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "58a64c3a-5ed5-47e4-984f-11aaa95fc979",
        "parentId" : "810b096c-defb-44c3-9757-da597c8c689d",
        "authorId" : "95d25081-bab5-48a6-a128-d3f77acb4c78",
        "body" : "Yes. But then we have to add something in TEntryList to test is usability. All codes use the fact that 'entries == nullptr' means no entry list, and 'entries != nullptr' means a valid entry list. We need something like 'entries.IsValid()' or '!entries.IsNull()' . ",
        "createdAt" : "2017-05-14T13:14:03Z",
        "updatedAt" : "2017-05-14T14:58:24Z",
        "lastEditedBy" : "95d25081-bab5-48a6-a128-d3f77acb4c78",
        "tags" : [
        ]
      },
      {
        "id" : "4c2cd978-4d04-47db-b144-450e221b1094",
        "parentId" : "810b096c-defb-44c3-9757-da597c8c689d",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "> All codes use the fact that 'entries == nullptr' \r\n\r\nThis is in the inner function.  For interface purpose we could have a user level interface that takes a reference and a inner/private functions that is shared among implementation with TEntryList being a nullptr.",
        "createdAt" : "2017-05-15T01:19:08Z",
        "updatedAt" : "2017-05-15T01:19:08Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "daaa50b10d1d50cd05fa583c817a5a09c50a406a",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +36,40 @@public:\n   TMPWorkerTree();\n   TMPWorkerTree(const std::vector<std::string> &fileNames, TEntryList *entries, const std::string &treeName,\n                 UInt_t nWorkers, ULong64_t maxEntries, ULong64_t firstEntry);\n   TMPWorkerTree(TTree *tree, TEntryList *entries, UInt_t nWorkers, ULong64_t maxEntries, ULong64_t firstEntry);"
  }
]