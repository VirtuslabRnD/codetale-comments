[
  {
    "id" : "554eb865-1d8d-4e3a-bccb-1770cdef087b",
    "prId" : 1120,
    "prUrl" : "https://github.com/root-project/root/pull/1120#pullrequestreview-66757128",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b733fbf3-0f54-4539-be26-da94bc6ee12b",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I would expect `auto &rColl` here, how does this update the actual final result?",
        "createdAt" : "2017-10-03T12:13:27Z",
        "updatedAt" : "2017-10-03T13:34:27Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "43e047b2-5268-4473-a5f4-94ed83d1aa60",
        "parentId" : "b733fbf3-0f54-4539-be26-da94bc6ee12b",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Good comment. We could use a reference to optimise a bit, but fColls is a vector<shared_ptr<COLL>>, i.e. the way in which we access different slots.\r\n",
        "createdAt" : "2017-10-03T12:24:50Z",
        "updatedAt" : "2017-10-03T13:34:27Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "18c8f6d8-6bd9-499d-b3a6-48f05a727207",
        "parentId" : "b733fbf3-0f54-4539-be26-da94bc6ee12b",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "ah I forgot that we have `vec<shared_ptr<vec<T>>>` instead of `vec<vec<T>>`.\r\nthis is done to avoid a last copy from `fColls[0]` to the actual result object: we already make `fColls[0]` the actual result object.\r\n\r\nI think with little effort we could actually have `vec<vec<T>>` and then do a `std::swap` between the result vector and `fColls[0]`, i'll write it down as a note for the future",
        "createdAt" : "2017-10-03T12:30:28Z",
        "updatedAt" : "2017-10-03T13:34:27Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "0f7b14aa-5743-40c5-b6f3-db8434d7fd5b",
        "parentId" : "b733fbf3-0f54-4539-be26-da94bc6ee12b",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "All performance optimisations count. In this case, I think we do not have extra copies but I may be mistaken. With N slots, the slots from 1 to N-1 are folded into slot 0 and that one is the one passed by reference in the constructor of the helper.",
        "createdAt" : "2017-10-03T12:47:19Z",
        "updatedAt" : "2017-10-03T13:34:27Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "00ec5787-a2cb-4fec-af3d-8755a07fd128",
        "parentId" : "b733fbf3-0f54-4539-be26-da94bc6ee12b",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I agree we are not making more copies than necessary, _maybe_ `vec<vec<T>>` instead of `vec<shared_ptr<vec<T>>>` could help with less impactful things (inlining, or when a CPU loads `TakeHelper` it already loads the vectors in the same cache line and doesn't have to go through a shared_ptr, things like that).",
        "createdAt" : "2017-10-03T13:01:46Z",
        "updatedAt" : "2017-10-03T13:34:27Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "ac90dc83-6ae1-4516-aae2-0ca7ad7a2cbe",
        "parentId" : "b733fbf3-0f54-4539-be26-da94bc6ee12b",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "fair enough.",
        "createdAt" : "2017-10-03T13:33:50Z",
        "updatedAt" : "2017-10-03T13:34:27Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "49a6a8b0bcf9f509bb31a010feda1ea4d71a01ff",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +319,323 @@      for (auto &coll : fColls)\n         totSize += coll->size();\n      auto rColl = fColls[0];\n      rColl->reserve(totSize);\n      for (unsigned int i = 1; i < fColls.size(); ++i) {"
  }
]