[
  {
    "id" : "5438297a-9e57-4011-b3b8-9ff3fa865442",
    "prId" : 1613,
    "prUrl" : "https://github.com/root-project/root/pull/1613#pullrequestreview-96848316",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "130f8f38-f0c4-484a-8ea9-66c86c4bab17",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "we would also need a non-member function `swap` to be STL-swappable: http://en.cppreference.com/w/cpp/algorithm/swap",
        "createdAt" : "2018-02-14T09:55:59Z",
        "updatedAt" : "2018-02-23T16:10:13Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "453bfee5-755e-433d-8f0b-b81fd0d6d60f",
        "parentId" : "130f8f38-f0c4-484a-8ea9-66c86c4bab17",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "oh yes! Thanks for the reminder!",
        "createdAt" : "2018-02-15T13:39:15Z",
        "updatedAt" : "2018-02-23T16:10:13Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbda5dbd81bdc48422f8f73dea98ffdaeb718666",
    "line" : 238,
    "diffHunk" : "@@ -1,1 +236,240 @@   void resize(size_type count) { fData.resize(count); }\n   void resize(size_type count, const value_type &value) { fData.resize(count, value); }\n   void swap(TVec<T> &other) { std::swap(fData, other.fData); }\n   // arithmetic operators\n   template <typename V>"
  },
  {
    "id" : "2f4fee56-fd89-4a7d-a72e-1886169c9d45",
    "prId" : 1613,
    "prUrl" : "https://github.com/root-project/root/pull/1613#pullrequestreview-97371474",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d8f4600-ddbe-4776-bc67-0c6f5febfbbb",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "`w.reserve` is potentially wasteful, but it's not a problem if we expect reasonably small `TVec`'s most of the time.",
        "createdAt" : "2018-02-14T10:06:40Z",
        "updatedAt" : "2018-02-23T16:10:13Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "74b56ea5-13aa-4274-be35-ffe2bdd45d80",
        "parentId" : "9d8f4600-ddbe-4776-bc67-0c6f5febfbbb",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Here we may decide for something else, but would the initialisation of the memory be less expensive than a \"generous\" reserve?",
        "createdAt" : "2018-02-15T16:58:05Z",
        "updatedAt" : "2018-02-23T16:10:13Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "fcd4abfc-8881-436b-859a-50c24e39874c",
        "parentId" : "9d8f4600-ddbe-4776-bc67-0c6f5febfbbb",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I don't know ðŸ˜… ",
        "createdAt" : "2018-02-17T10:56:17Z",
        "updatedAt" : "2018-02-23T16:10:13Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbda5dbd81bdc48422f8f73dea98ffdaeb718666",
    "line" : 185,
    "diffHunk" : "@@ -1,1 +183,187 @@      ROOT::Internal::VecOps::CheckSizes(thisSize, conds.size(), \"operator[]\");\n      TVec<T> w;\n      w.reserve(thisSize);\n      for (std::size_t i = 0; i < thisSize; i++) {\n         if (conds[i]) {"
  },
  {
    "id" : "2a70b901-f57f-4820-8c87-6bd271843d95",
    "prId" : 1613,
    "prUrl" : "https://github.com/root-project/root/pull/1613#pullrequestreview-97814676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b96225d-944f-4a91-847b-34d427391e64",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I'm not sure how `printValue` works, is there a guarantee that the pointer passed to it is not null?",
        "createdAt" : "2018-02-14T10:35:03Z",
        "updatedAt" : "2018-02-23T16:10:13Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "7e763c73-b5e0-49a2-92a8-c4fe879da6fa",
        "parentId" : "1b96225d-944f-4a91-847b-34d427391e64",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "I think so...",
        "createdAt" : "2018-02-15T16:53:54Z",
        "updatedAt" : "2018-02-23T16:10:13Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "7b93864e-1332-4947-9d73-2f92fc2892be",
        "parentId" : "1b96225d-944f-4a91-847b-34d427391e64",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Yes it's guaranteed (this is just because it's a lot easier to implement overloading / fallback etc)",
        "createdAt" : "2018-02-20T12:25:25Z",
        "updatedAt" : "2018-02-23T16:10:13Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "3a10709b-ed59-460f-b6ad-d67dbef7c14f",
        "parentId" : "1b96225d-944f-4a91-847b-34d427391e64",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "`gsl::not_null` ftw :)",
        "createdAt" : "2018-02-20T13:04:32Z",
        "updatedAt" : "2018-02-23T16:10:13Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbda5dbd81bdc48422f8f73dea98ffdaeb718666",
    "line" : 663,
    "diffHunk" : "@@ -1,1 +661,665 @@{\n   std::stringstream ss;\n   ss << *tvec;\n   return ss.str();\n}"
  },
  {
    "id" : "96d3c661-b5d9-47aa-b6a1-d546c7ddc883",
    "prId" : 1613,
    "prUrl" : "https://github.com/root-project/root/pull/1613#pullrequestreview-97811076",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "334dc50c-80a2-4cc7-b7fe-19adbc68e182",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Can the transfer of memory ownership be made explicit? (`std::move` of a `std::unique_ptr` of something?)",
        "createdAt" : "2018-02-20T11:08:21Z",
        "updatedAt" : "2018-02-23T16:10:13Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "bef11db7-c1f8-4bf2-a9e1-d5cf168fc94f",
        "parentId" : "334dc50c-80a2-4cc7-b7fe-19adbc68e182",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "But this is not exactly transfer of ownership, right? Here we are adopting the memory pointed by \"p\".",
        "createdAt" : "2018-02-20T12:40:41Z",
        "updatedAt" : "2018-02-23T16:10:13Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "f3581a1e-b272-4f3a-8be6-0439f85bd2ce",
        "parentId" : "334dc50c-80a2-4cc7-b7fe-19adbc68e182",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "I see, the memory pointed to by `p` will never be deleted by the allocator... Indeed, then ignore my comment, please.",
        "createdAt" : "2018-02-20T12:50:55Z",
        "updatedAt" : "2018-02-23T16:10:13Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbda5dbd81bdc48422f8f73dea98ffdaeb718666",
    "line" : 169,
    "diffHunk" : "@@ -1,1 +167,171 @@   TVec(const std::vector<T> &other) { std::copy(other.begin(), other.end(), fData.begin()); }\n   TVec(std::initializer_list<T> init) : fData(init) {}\n   TVec(pointer p, size_type n) : fData(n, T(), ROOT::Detail::VecOps::TAdoptAllocator<T>(p, n)) {}\n   // assignment\n   TVec<T> &operator=(const TVec<T> &) = default;"
  },
  {
    "id" : "d26f0afe-4d30-438f-93ed-e91e54b79052",
    "prId" : 1613,
    "prUrl" : "https://github.com/root-project/root/pull/1613#pullrequestreview-97812114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6260fd9c-b7b8-4d2e-94c2-2fe1a10e532c",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Could you make them friends of TVec, available only for ADL-lookup?",
        "createdAt" : "2018-02-20T12:14:07Z",
        "updatedAt" : "2018-02-23T16:10:13Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "14a3feda-9804-47fc-b5a8-d9050d22e8ca",
        "parentId" : "6260fd9c-b7b8-4d2e-94c2-2fe1a10e532c",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Yes, thanks for the suggestion. This would make thinks much easier for the user.",
        "createdAt" : "2018-02-20T12:54:57Z",
        "updatedAt" : "2018-02-23T16:10:13Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbda5dbd81bdc48422f8f73dea98ffdaeb718666",
    "line" : 308,
    "diffHunk" : "@@ -1,1 +306,310 @@///@{\ntemplate <typename T, typename V>\nauto operator+(const TVec<T> &v, const V &c) -> TVec<decltype(v[0] + c)>\n{\n   return ROOT::Internal::VecOps::Operate(v, [&c](const T &t) { return t + c; });"
  },
  {
    "id" : "a68e9f5b-b0de-4554-a083-4be84ebc0cd6",
    "prId" : 1613,
    "prUrl" : "https://github.com/root-project/root/pull/1613#pullrequestreview-98761341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1c2f965e-63a3-45e0-9063-b24f70410e05",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Should we also have an operation that uses a mask?",
        "createdAt" : "2018-02-20T12:22:22Z",
        "updatedAt" : "2018-02-23T16:10:13Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "2f1edf18-5fed-476f-b076-071f19da197f",
        "parentId" : "1c2f965e-63a3-45e0-9063-b24f70410e05",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Isn't this &&? For example: mu_pt && (abs(mu_eta) < 2) ",
        "createdAt" : "2018-02-20T12:48:37Z",
        "updatedAt" : "2018-02-23T16:10:13Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "1e29a6ec-bd3e-4f88-9fcc-011568debca8",
        "parentId" : "1c2f965e-63a3-45e0-9063-b24f70410e05",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Isn't that *resulting* in a mask? What if I have such a mask and I'd like a vector that is possibly smaller, selecting only those elements from the original vector that pass the mask? I.e. in `Filter()`s terms:\r\n```\r\nauto mask = Map(v, f);\r\nassert(mask.size() == f.size());\r\nauto reduced = ThisOpMightBeMissing_CouldBeCalledReduce(v, mask);\r\n```\r\ninstead of\r\n```\r\nauto reduced = Filter(v, f);\r\n```\r\n",
        "createdAt" : "2018-02-20T12:56:37Z",
        "updatedAt" : "2018-02-23T16:10:13Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "9c074a29-2500-44db-b243-18f16272dfb6",
        "parentId" : "1c2f965e-63a3-45e0-9063-b24f70410e05",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "I see (with 48h delay, sorry).\r\nThis is what is available with the overloaded operator[], like in numpy:\r\n```\r\nauto reduced = v[mask];\r\n```\r\nor with a Physics hat on top:\r\n```\r\nauto goodPts = pts[pts > 15 && abs(etas) < 1.2];\r\n```\r\n",
        "createdAt" : "2018-02-22T23:02:47Z",
        "updatedAt" : "2018-02-23T16:10:13Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "fbda5dbd81bdc48422f8f73dea98ffdaeb718666",
    "line" : 612,
    "diffHunk" : "@@ -1,1 +610,614 @@/// Create a new collection with the elements passing the filter expressed by the predicate\ntemplate <typename T, typename F>\nTVec<T> Filter(const TVec<T> &v, F &&f)\n{\n   const auto thisSize = v.size();"
  }
]