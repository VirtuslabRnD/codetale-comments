[
  {
    "id" : "eb20e550-ed20-46a6-a3b4-5c676b5bfa64",
    "prId" : 1048,
    "prUrl" : "https://github.com/root-project/root/pull/1048#pullrequestreview-64838806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42193555-f173-42ee-a736-66bed99ec049",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I don't think alias mapping belongs in `JitTransformation`. What do you think about factoring out a function `ApplyAliases` from `FindUsedColumnNames` and also calling it right before `CallJitTransformation`? So `JitTransformation` always receives real column and does not have to know about aliases at all.",
        "createdAt" : "2017-09-25T07:23:10Z",
        "updatedAt" : "2017-09-25T20:17:21Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "b84db1e5-2f63-42a5-aa39-886eb4bfbd4b",
        "parentId" : "42193555-f173-42ee-a736-66bed99ec049",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "I realise the mapping here seems \"too much\". Ideally, TLoopManager should have an \"AddColumnAlias\" and a \"GetAliasedColumn\" method only. \r\nI think the issue here is that the expression may contain aliases. If we want to compile it, we need to deal with those while preparing the code to be jitted. A replace of alias->real column name in the expression will lead to a lot of trouble.",
        "createdAt" : "2017-09-25T08:15:19Z",
        "updatedAt" : "2017-09-25T20:17:21Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "9181a403-9001-4337-b6e6-2a7b4a8c2b25",
        "parentId" : "42193555-f173-42ee-a736-66bed99ec049",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "ah you're right. then maybe we could just use a list of `validColumnNames` here (local list, see main review comment) and leave alias application to the jitted, templated call that `JitTransformation` produces? This is what we do for `Define`d columns",
        "createdAt" : "2017-09-25T08:20:32Z",
        "updatedAt" : "2017-09-25T20:17:21Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "9527d34b-bc7c-408f-bbdc-84dc8e473cc4",
        "parentId" : "42193555-f173-42ee-a736-66bed99ec049",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Do you mean interrogate the alias mapping from within jitted code?",
        "createdAt" : "2017-09-25T09:08:44Z",
        "updatedAt" : "2017-09-25T20:17:21Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "780d1de3-35d8-4e74-ab34-d540800d9d4b",
        "parentId" : "42193555-f173-42ee-a736-66bed99ec049",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "agh, alright you need both old names and new names, the former to create the jitted string and the latter to get the column type. disregard my comments here :smile: ",
        "createdAt" : "2017-09-25T09:26:24Z",
        "updatedAt" : "2017-09-25T20:17:21Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d381c2214ee0e0d12fe58f64a437c9bb588d6e8",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +1268,1272 @@                                            aliasMap, branches, customColumns, tmpBookedBranches, tree,\n                                            returnTypeName, fDataSource);\n   }\n\n   /// Return string containing fully qualified type name of the node pointed by fProxied."
  },
  {
    "id" : "4201dff5-73b2-48d7-810c-8bc2832e30d6",
    "prId" : 1120,
    "prUrl" : "https://github.com/root-project/root/pull/1120#pullrequestreview-66737956",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e72935f-7b32-4d70-b2b8-916b196a13f4",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "is `TakeRealTypes<BranchTypes>::RealColl_t::value_type` different from `TakeRealTypes<BranchTypes>::RealT_t`?",
        "createdAt" : "2017-10-03T12:15:17Z",
        "updatedAt" : "2017-10-03T13:34:27Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "e41cbb61-592a-4ec8-b361-fac06f7b6a76",
        "parentId" : "4e72935f-7b32-4d70-b2b8-916b196a13f4",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Fair enough, they are not different.",
        "createdAt" : "2017-10-03T12:27:01Z",
        "updatedAt" : "2017-10-03T13:34:27Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "49a6a8b0bcf9f509bb31a010feda1ea4d71a01ff",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +1609,1613 @@      TDFInternal::CheckSnapshot(sizeof...(BranchTypes), columnList.size());\n      std::tuple<\n         TDFInternal::CacheColumnHolder<typename TDFDetail::TakeRealTypes<BranchTypes>::RealColl_t::value_type>...>\n         colHolders;\n"
  }
]