[
  {
    "id" : "eb20e550-ed20-46a6-a3b4-5c676b5bfa64",
    "prId" : 1048,
    "prUrl" : "https://github.com/root-project/root/pull/1048#pullrequestreview-64838806",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "42193555-f173-42ee-a736-66bed99ec049",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I don't think alias mapping belongs in `JitTransformation`. What do you think about factoring out a function `ApplyAliases` from `FindUsedColumnNames` and also calling it right before `CallJitTransformation`? So `JitTransformation` always receives real column and does not have to know about aliases at all.",
        "createdAt" : "2017-09-25T07:23:10Z",
        "updatedAt" : "2017-09-25T20:17:21Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "b84db1e5-2f63-42a5-aa39-886eb4bfbd4b",
        "parentId" : "42193555-f173-42ee-a736-66bed99ec049",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "I realise the mapping here seems \"too much\". Ideally, TLoopManager should have an \"AddColumnAlias\" and a \"GetAliasedColumn\" method only. \r\nI think the issue here is that the expression may contain aliases. If we want to compile it, we need to deal with those while preparing the code to be jitted. A replace of alias->real column name in the expression will lead to a lot of trouble.",
        "createdAt" : "2017-09-25T08:15:19Z",
        "updatedAt" : "2017-09-25T20:17:21Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "9181a403-9001-4337-b6e6-2a7b4a8c2b25",
        "parentId" : "42193555-f173-42ee-a736-66bed99ec049",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "ah you're right. then maybe we could just use a list of `validColumnNames` here (local list, see main review comment) and leave alias application to the jitted, templated call that `JitTransformation` produces? This is what we do for `Define`d columns",
        "createdAt" : "2017-09-25T08:20:32Z",
        "updatedAt" : "2017-09-25T20:17:21Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "9527d34b-bc7c-408f-bbdc-84dc8e473cc4",
        "parentId" : "42193555-f173-42ee-a736-66bed99ec049",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Do you mean interrogate the alias mapping from within jitted code?",
        "createdAt" : "2017-09-25T09:08:44Z",
        "updatedAt" : "2017-09-25T20:17:21Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "780d1de3-35d8-4e74-ab34-d540800d9d4b",
        "parentId" : "42193555-f173-42ee-a736-66bed99ec049",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "agh, alright you need both old names and new names, the former to create the jitted string and the latter to get the column type. disregard my comments here :smile: ",
        "createdAt" : "2017-09-25T09:26:24Z",
        "updatedAt" : "2017-09-25T20:17:21Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "7d381c2214ee0e0d12fe58f64a437c9bb588d6e8",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +1268,1272 @@                                            aliasMap, branches, customColumns, tmpBookedBranches, tree,\n                                            returnTypeName, fDataSource);\n   }\n\n   /// Return string containing fully qualified type name of the node pointed by fProxied."
  },
  {
    "id" : "4201dff5-73b2-48d7-810c-8bc2832e30d6",
    "prId" : 1120,
    "prUrl" : "https://github.com/root-project/root/pull/1120#pullrequestreview-66737956",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e72935f-7b32-4d70-b2b8-916b196a13f4",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "is `TakeRealTypes<BranchTypes>::RealColl_t::value_type` different from `TakeRealTypes<BranchTypes>::RealT_t`?",
        "createdAt" : "2017-10-03T12:15:17Z",
        "updatedAt" : "2017-10-03T13:34:27Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "e41cbb61-592a-4ec8-b361-fac06f7b6a76",
        "parentId" : "4e72935f-7b32-4d70-b2b8-916b196a13f4",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Fair enough, they are not different.",
        "createdAt" : "2017-10-03T12:27:01Z",
        "updatedAt" : "2017-10-03T13:34:27Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "49a6a8b0bcf9f509bb31a010feda1ea4d71a01ff",
    "line" : 96,
    "diffHunk" : "@@ -1,1 +1609,1613 @@      TDFInternal::CheckSnapshot(sizeof...(BranchTypes), columnList.size());\n      std::tuple<\n         TDFInternal::CacheColumnHolder<typename TDFDetail::TakeRealTypes<BranchTypes>::RealColl_t::value_type>...>\n         colHolders;\n"
  },
  {
    "id" : "922ca043-e290-4baf-b511-181b6d023c70",
    "prId" : 1454,
    "prUrl" : "https://github.com/root-project/root/pull/1454#pullrequestreview-82812305",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3b03f656-87a1-4daa-8567-0956f78d4b96",
        "parentId" : null,
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "Also after our discussion: in a second step after this PR, define Reduce in terms of Accumulate",
        "createdAt" : "2017-12-12T12:27:22Z",
        "updatedAt" : "2017-12-20T15:59:30Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      }
    ],
    "commit" : "07b95f9071dec317c3a51dbba6064e8aee11c638",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +1587,1591 @@      return MakeResultProxy(accObjPtr, loopManager, action.get());\n   }\n\n   ////////////////////////////////////////////////////////////////////////////\n   /// \\brief Execute a user-defined accumulation operation on the processed column values in each processing slot"
  },
  {
    "id" : "79f6faaa-ecfa-424e-8211-f0c1ddd81c3d",
    "prId" : 1870,
    "prUrl" : "https://github.com/root-project/root/pull/1870#pullrequestreview-112932826",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3aede09a-185f-4f99-8e23-060f90910f5c",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "this is a problem that was already present, but isn't the lifetime of this `TResultPtr` the same as ROOT's lifetime? it's basically hogging a tiny bit of memory",
        "createdAt" : "2018-04-17T15:26:19Z",
        "updatedAt" : "2018-04-17T15:26:20Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "73da40a2-4e63-4db9-92d7-afa0b54e27c0",
        "parentId" : "3aede09a-185f-4f99-8e23-060f90910f5c",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Comment noted. We can get rid of this widespread tiny memory hoarding later.",
        "createdAt" : "2018-04-17T18:13:59Z",
        "updatedAt" : "2018-04-17T18:13:59Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "2f72a93dfaea22bf43867fa67c57bd67da4d2f10",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +465,469 @@         throw std::runtime_error(msg);\n      }\n      return *reinterpret_cast<TResultPtr<TInterface<TLoopManager>> *>(newTDFPtr);\n   }\n"
  },
  {
    "id" : "5ea0ffce-79d8-4fc5-bf0b-e4062518b373",
    "prId" : 1884,
    "prUrl" : "https://github.com/root-project/root/pull/1884#pullrequestreview-113482604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b81985d9-6ea1-438a-860b-9fc3c5a2dfa3",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "iiuc now `Take<TVec<T>>` returns a `TResultPtr<TVec<T>>` instead of a `TResultPtr<std::vector<T>>` like before.\r\nthis change in return type probably deserves its own commit.\r\n\r\nlifetimes are ok right? we will never return adopting `TVec`s I guess..?",
        "createdAt" : "2018-04-18T22:39:21Z",
        "updatedAt" : "2018-04-19T07:07:41Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "073b8007-e73f-4238-a648-e6f31dec8e15",
        "parentId" : "b81985d9-6ea1-438a-860b-9fc3c5a2dfa3",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "I thought about this. We may be so efficient (0 copies) that we may end up with an adopting TVec. I'll force the realloc explicitly.",
        "createdAt" : "2018-04-19T06:45:32Z",
        "updatedAt" : "2018-04-19T07:07:41Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "e14a0663ddf98bc89846696407802204be1227aa",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +728,732 @@   /// booked but not executed. See TResultPtr documentation.\n   template <typename T, typename COLL = std::vector<T>>\n   TResultPtr<COLL> Take(std::string_view column = \"\")\n   {\n      auto loopManager = GetDataFrameChecked();"
  },
  {
    "id" : "83f60d90-9779-4094-b1b0-be3e2fc6a21b",
    "prId" : 1905,
    "prUrl" : "https://github.com/root-project/root/pull/1905#pullrequestreview-114528650",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b38e16bd-7862-4e3c-8e4a-d41eb7886238",
        "parentId" : null,
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "but also this one can be a no-op right? And technically, the others too if one is interested in a no-op action e.g. for benchmarking overheads, right?",
        "createdAt" : "2018-04-23T19:45:20Z",
        "updatedAt" : "2018-04-23T19:45:52Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "005f1916b07601eb311622fd2845af25485a9b15",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +1405,1409 @@   /// * void Initialize(): this method is called once before starting the event-loop. Useful for setup operations.\n   //                       Can be no-op.\n   /// * void Finalize(): this method is called at the end of the event loop. Commonly used to finalize the contents\n   ///   of the result.\n   /// * Result_t &PartialUpdate(unsigned int slot): this method is optional, i.e. can be omitted. If present, it should"
  }
]