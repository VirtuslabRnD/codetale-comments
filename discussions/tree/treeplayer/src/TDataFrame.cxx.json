[
  {
    "id" : "95595c9b-cb44-49a6-a620-6372645122a4",
    "prId" : 1103,
    "prUrl" : "https://github.com/root-project/root/pull/1103#pullrequestreview-66859490",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c3980bb6-2727-4733-89a0-7450802040a8",
        "parentId" : null,
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Just wording, feel free to apply this or not.\r\n\"An example of a more complex filter with just in time compilation is shown below\" -> \"An example of a more complex filter expressed as a string containing C++ code is shown below\" ",
        "createdAt" : "2017-10-03T18:59:38Z",
        "updatedAt" : "2017-10-04T11:31:51Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7489c483451685beb884f12744b0a3bb693e9e00",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +204,208 @@~~~\n\nAn example of a more complex filter with just in time compilation is shown below:\n\n~~~{.cpp}"
  },
  {
    "id" : "f1ffe4cd-2d4e-4774-a554-2467c6b2a4e0",
    "prId" : 1103,
    "prUrl" : "https://github.com/root-project/root/pull/1103#pullrequestreview-67036185",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "441ac10b-ea69-40f8-bddc-93f69a46e302",
        "parentId" : null,
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Some wording, feel free to adopt this or not: \",so it's cumbersome to use strings with more complex filters\" -> \"\" Perhaps this can be perceived as a negative message?\r\n",
        "createdAt" : "2017-10-03T19:02:25Z",
        "updatedAt" : "2017-10-04T11:31:51Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "3239ed5b-cd80-48be-8835-1f12097dc07f",
        "parentId" : "441ac10b-ea69-40f8-bddc-93f69a46e302",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "It's up to you, but I don't think it's negative. I'm basically saying that if you have a function that is 10 lines long, it's cumbersome to write it in a string. Either you'll have a very long line, or you'll have to create a doc string in Python, or you'll have to break the string in multiple lines, etc. Not a problem with Define/Filter themselves.",
        "createdAt" : "2017-10-04T11:44:45Z",
        "updatedAt" : "2017-10-04T11:44:45Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7489c483451685beb884f12744b0a3bb693e9e00",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +192,196 @@\nUsing string filters is nice for simple things, but they are limited to specifying the equivalent of a single return\nstatement or the body of a lambda, so it's cumbersome to use strings with more complex filters. They also add a small\nruntime overhead, as ROOT needs to just-in-time compile the string into C++ code. When more freedom is required or\nruntime performance is very important, a C++ callable can be specified instead (a lambda in the following snippet,"
  },
  {
    "id" : "9b7e972b-90a6-4b5e-8e60-c7ee1fed760c",
    "prId" : 1103,
    "prUrl" : "https://github.com/root-project/root/pull/1103#pullrequestreview-66859490",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2099bdce-7db5-4518-879a-e3e34936351b",
        "parentId" : null,
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Some wording. I find the mention of \"lambda\" perhaps confusing for the novice: for us it's the obvious word to use because we are familiar with the implementation. There is no lambda in the snippet above :)\r\n\"\"\"\r\nThe good thing about using strings like this for defining new columns is that this makes it easy to use with Python scripts, where creating a C++ callable can be an annoyance. However, there is still a limitation that the lambda cannot capture anything. For that, a C++ lambda is the best option.\r\n\"\"\" -->\r\n\"\"\"\r\nIt must be noted that the usage of strings to define columns like the one above is a major advantage when using PyROOT. However, only constants and data coming from other columns in the dataset can be involved in the code snippet and no variable defined in other places in the program.\r\n\"\"\"\r\nTwo observations:\r\n1) The last statement is not completely true: if it's jitted, it can be used :) This is to be kept in mind in case someone wants to use something like \"myAwesomeFunction(mytpe&)\"\r\n2) We have the opportunity to add a PyROOT snippet to the documentation of ROOT, the very first one.",
        "createdAt" : "2017-10-03T19:09:38Z",
        "updatedAt" : "2017-10-04T11:31:52Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7489c483451685beb884f12744b0a3bb693e9e00",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +216,220 @@is that this makes it easy to use with Python scripts, where creating a C++ callable can be an annoyance. However,\nthere is still a limitation that the lambda cannot capture anything. For that, a C++ lambda is the best option.\n\nMore information on filters and how to use them to automatically generate cutflow reports can be found [below](#Filters).\n"
  }
]