[
  {
    "id" : "a0c8cfcf-8c66-4c5c-8586-ca4a10fa4975",
    "prId" : 1160,
    "prUrl" : "https://github.com/root-project/root/pull/1160#pullrequestreview-68817564",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "290fd9c5-c5cc-4b1c-b08f-892307af0d0e",
        "parentId" : null,
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Do these regexes deserve unit tests for themselves only? @amadio, can you also have a look? You have quite some experience with TRegexp and stl regex.",
        "createdAt" : "2017-10-10T08:33:01Z",
        "updatedAt" : "2017-10-12T14:41:26Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "384b5b68-33e9-4133-bdea-882fccbd76b4",
        "parentId" : "290fd9c5-c5cc-4b1c-b08f-892307af0d0e",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "What is the context where these expressions will be used? A `^` usually marks beginning of a line, but in TRegexp this is probably going to be different, right? For `double`, one regex should be enough (the second one, to accomodate `.1`, etc). We still need to update it to be able to parse scientific notation numbers, such as `1.0E-3` for example. The current expression will fail for that. We may also want/need expressions for hexadecimals, octal, etc, to cover what `sscanf()` can read, more or less. We may also want to support `True`/`TRUE`, `False`/`FALSE`, and `0`/`1` for booleans.",
        "createdAt" : "2017-10-10T09:27:32Z",
        "updatedAt" : "2017-10-12T14:41:26Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "dcec461a-9257-4bea-a183-f2baa71f1884",
        "parentId" : "290fd9c5-c5cc-4b1c-b08f-892307af0d0e",
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Ah, there are also infinity and NaNs to think about...",
        "createdAt" : "2017-10-10T09:30:06Z",
        "updatedAt" : "2017-10-12T14:41:26Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "e1b8b7c0-8caa-435c-a119-34abd82a9ed6",
        "parentId" : "290fd9c5-c5cc-4b1c-b08f-892307af0d0e",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "In first approximation we can leave hex and oct unsupported I think :sweat_smile: \r\n\r\nThe `^` and `$` will mark beginning and end of the field here as the field is extracted from the line before it is matched with the regex.\r\n\r\nI think we need both regexes for the doubles, the second one does not match `1.`.",
        "createdAt" : "2017-10-10T14:25:37Z",
        "updatedAt" : "2017-10-12T14:41:26Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "719c3b84-1ac5-433b-bad3-589c703baacc",
        "parentId" : "290fd9c5-c5cc-4b1c-b08f-892307af0d0e",
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "Yes, the two double regexes are necessary because TRegexp does not support regexes with unions. The union is therefore implemented as a C++ or :)\r\nThe regexes could indeed be extended to support `1.0E-3` as well.",
        "createdAt" : "2017-10-10T14:43:48Z",
        "updatedAt" : "2017-10-12T14:41:26Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      },
      {
        "id" : "26ded85f-80b3-474f-b353-824404b9b67a",
        "parentId" : "290fd9c5-c5cc-4b1c-b08f-892307af0d0e",
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "Regarding the booleans, one thing we can do (which is actually what pandas does) is to support any combination of uppercase/lowercase in true and false (e.g. True, False, TRUE, FALSE but also TrUe and falsE). For that, we can just convert to lowercase and compare to `true` and `false`.\r\n\r\n0/1 for booleans is trickier because they would naturally be classified as integers.",
        "createdAt" : "2017-10-10T15:39:49Z",
        "updatedAt" : "2017-10-12T14:41:26Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      },
      {
        "id" : "602fe7db-e1a7-426c-857c-2546fa2e877c",
        "parentId" : "290fd9c5-c5cc-4b1c-b08f-892307af0d0e",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "If 0/1 are written, we treat them as integers, for TDF it will not be a problem to cast that later if needed. For the upper and lowercase, we can go for a *tolower* if that is not too difficult.",
        "createdAt" : "2017-10-12T05:12:44Z",
        "updatedAt" : "2017-10-12T14:41:26Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f10d6ee69ae0901280349e284c5c03fcfc59bd9",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +91,95 @@TRegexp TCsvDS::doubleRegex2(\"^[-+]?[0-9]*\\\\.[0-9]+$\");\nTRegexp TCsvDS::trueRegex(\"^true$\");\nTRegexp TCsvDS::falseRegex(\"^false$\");\n\nvoid TCsvDS::FillHeaders(const std::string &line)"
  },
  {
    "id" : "6ae541c9-572b-4430-a814-5b76d02556c8",
    "prId" : 1160,
    "prUrl" : "https://github.com/root-project/root/pull/1160#pullrequestreview-68817564",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "819a0ca3-819a-477d-a693-8c098b2ecf40",
        "parentId" : null,
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Not sure if this can help but: https://root.cern.ch/doc/master/classTDatime.html",
        "createdAt" : "2017-10-10T08:42:40Z",
        "updatedAt" : "2017-10-12T14:41:26Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "d3e0be5e-9783-42fb-8bf5-54949966f879",
        "parentId" : "819a0ca3-819a-477d-a693-8c098b2ecf40",
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "I will keep this on my TODO list for now and give more priority to the docs and tutorials.",
        "createdAt" : "2017-10-10T16:44:32Z",
        "updatedAt" : "2017-10-12T14:41:26Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      },
      {
        "id" : "d2766652-a26e-478f-a5a6-bf8f2ff5432f",
        "parentId" : "819a0ca3-819a-477d-a693-8c098b2ecf40",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "fine.",
        "createdAt" : "2017-10-12T05:12:59Z",
        "updatedAt" : "2017-10-12T14:41:26Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "5f10d6ee69ae0901280349e284c5c03fcfc59bd9",
    "line" : 170,
    "diffHunk" : "@@ -1,1 +168,172 @@      type = \"std::string\";\n   }\n   // TODO: Date\n\n   fColTypes[fHeaders[idxCol]] = type;"
  }
]