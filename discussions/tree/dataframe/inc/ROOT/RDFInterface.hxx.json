[
  {
    "id" : "5d92e870-82f3-4e76-9d7f-3f4dcb81ebc9",
    "prId" : 2313,
    "prUrl" : "https://github.com/root-project/root/pull/2313#pullrequestreview-151278436",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d1c7018-92a9-4df0-b3ae-b059d97cdd38",
        "parentId" : null,
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Perhaps it's worth investing in a std::copy_if based solution?\r\n",
        "createdAt" : "2018-08-30T13:32:07Z",
        "updatedAt" : "2018-08-31T08:56:55Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "8252f5f8-f975-420a-8021-5b032b630294",
        "parentId" : "9d1c7018-92a9-4df0-b3ae-b059d97cdd38",
        "authorId" : "9c5b50e9-7e3c-4cab-9d54-e46d6831dd3b",
        "body" : "Thanks Danilo. `std::copy_if` is not suitable approaches because I am copying one element of the map into an array, not the whole map entry. \r\n`std::transform` can't be used because it can't filter entries.",
        "createdAt" : "2018-08-31T07:03:17Z",
        "updatedAt" : "2018-08-31T08:56:55Z",
        "lastEditedBy" : "9c5b50e9-7e3c-4cab-9d54-e46d6831dd3b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a541f74b72f050e6c53760937f9c765825f592fa",
    "line" : 364,
    "diffHunk" : "@@ -1,1 +1441,1445 @@         if (!RDFInternal::IsInternalColumn(column.first) && !column.second->IsDataSourceColumn())\n            definedColumns.emplace_back(column.first);\n      }\n\n      return definedColumns;"
  },
  {
    "id" : "65cb58f8-acda-4a71-9262-a6d229ea91b8",
    "prId" : 2393,
    "prUrl" : "https://github.com/root-project/root/pull/2393#pullrequestreview-141969060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8500d10b-25f1-4b57-bb8f-2064c53fd01a",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "I like the idea of this function in general. I just ask myself, though: instead of making two copies of the string_view you take as input, why not just take a const ref to string?",
        "createdAt" : "2018-07-31T13:56:26Z",
        "updatedAt" : "2018-08-01T13:46:15Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "ecfb196f-a4ed-4822-b4ac-d7da9f4a54fc",
        "parentId" : "8500d10b-25f1-4b57-bb8f-2064c53fd01a",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "for a utility like this i prioritized usability over performance, and `std::string_view` also accepts `TString`. consistency is another argument: all (most?) of RDF interfaces take string_views instead of const string refs.\r\n\r\nof course the downside is that things might get a bit awkward in the function body, like here.\r\n\r\ni don't have a strong opinion, if people vote to change it, i'll change it",
        "createdAt" : "2018-07-31T14:01:18Z",
        "updatedAt" : "2018-08-01T13:46:15Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "89d83a5733fbc58ee15beb2230388892a0415e85",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1363,1367 @@         // must convert the alias \"__tdf::column_type\" to a readable type\n         const auto call = \"ROOT::Internal::RDF::TypeID2TypeName(typeid(__tdf\" + std::to_string(lm->GetID()) +\n                           \"::\" + std::string(column) + \"_type))\";\n         const auto callRes = gInterpreter->Calc(call.c_str());\n         return *reinterpret_cast<std::string *>(callRes); // copy result to stack"
  }
]