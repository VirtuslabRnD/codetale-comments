[
  {
    "id" : "5d92e870-82f3-4e76-9d7f-3f4dcb81ebc9",
    "prId" : 2313,
    "prUrl" : "https://github.com/root-project/root/pull/2313#pullrequestreview-151278436",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9d1c7018-92a9-4df0-b3ae-b059d97cdd38",
        "parentId" : null,
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Perhaps it's worth investing in a std::copy_if based solution?\r\n",
        "createdAt" : "2018-08-30T13:32:07Z",
        "updatedAt" : "2018-08-31T08:56:55Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "8252f5f8-f975-420a-8021-5b032b630294",
        "parentId" : "9d1c7018-92a9-4df0-b3ae-b059d97cdd38",
        "authorId" : "9c5b50e9-7e3c-4cab-9d54-e46d6831dd3b",
        "body" : "Thanks Danilo. `std::copy_if` is not suitable approaches because I am copying one element of the map into an array, not the whole map entry. \r\n`std::transform` can't be used because it can't filter entries.",
        "createdAt" : "2018-08-31T07:03:17Z",
        "updatedAt" : "2018-08-31T08:56:55Z",
        "lastEditedBy" : "9c5b50e9-7e3c-4cab-9d54-e46d6831dd3b",
        "tags" : [
        ]
      }
    ],
    "commit" : "a541f74b72f050e6c53760937f9c765825f592fa",
    "line" : 364,
    "diffHunk" : "@@ -1,1 +1441,1445 @@         if (!RDFInternal::IsInternalColumn(column.first) && !column.second->IsDataSourceColumn())\n            definedColumns.emplace_back(column.first);\n      }\n\n      return definedColumns;"
  },
  {
    "id" : "65cb58f8-acda-4a71-9262-a6d229ea91b8",
    "prId" : 2393,
    "prUrl" : "https://github.com/root-project/root/pull/2393#pullrequestreview-141969060",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8500d10b-25f1-4b57-bb8f-2064c53fd01a",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "I like the idea of this function in general. I just ask myself, though: instead of making two copies of the string_view you take as input, why not just take a const ref to string?",
        "createdAt" : "2018-07-31T13:56:26Z",
        "updatedAt" : "2018-08-01T13:46:15Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "ecfb196f-a4ed-4822-b4ac-d7da9f4a54fc",
        "parentId" : "8500d10b-25f1-4b57-bb8f-2064c53fd01a",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "for a utility like this i prioritized usability over performance, and `std::string_view` also accepts `TString`. consistency is another argument: all (most?) of RDF interfaces take string_views instead of const string refs.\r\n\r\nof course the downside is that things might get a bit awkward in the function body, like here.\r\n\r\ni don't have a strong opinion, if people vote to change it, i'll change it",
        "createdAt" : "2018-07-31T14:01:18Z",
        "updatedAt" : "2018-08-01T13:46:15Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "89d83a5733fbc58ee15beb2230388892a0415e85",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +1363,1367 @@         // must convert the alias \"__tdf::column_type\" to a readable type\n         const auto call = \"ROOT::Internal::RDF::TypeID2TypeName(typeid(__tdf\" + std::to_string(lm->GetID()) +\n                           \"::\" + std::string(column) + \"_type))\";\n         const auto callRes = gInterpreter->Calc(call.c_str());\n         return *reinterpret_cast<std::string *>(callRes); // copy result to stack"
  },
  {
    "id" : "54d2095c-a52c-4f54-b20b-e3c698ba22b6",
    "prId" : 2681,
    "prUrl" : "https://github.com/root-project/root/pull/2681#pullrequestreview-158756661",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "59ebd333-aa7d-4d76-8e20-2eee76d5f8c8",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "we might add `(optional)` for these template parameters that we can jit (in Snapshot, Cache, Histo*, Profile*, Min, Max, Mean...)",
        "createdAt" : "2018-09-25T13:47:33Z",
        "updatedAt" : "2018-09-25T21:51:53Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "05d83e7f-5ae7-400b-ade4-ab540218b023",
        "parentId" : "59ebd333-aa7d-4d76-8e20-2eee76d5f8c8",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "This is a good idea. I wonder if this would not be redundant with the signature for some of the methods. For methods like Min, absolutely. For Snapshot, if the method is template, the arguments are not optional. Maybe we can remind the user that it exists a sister method for which the template arguments are not necessary?",
        "createdAt" : "2018-09-25T21:38:29Z",
        "updatedAt" : "2018-09-25T21:51:53Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "241af49dccf5dfe66614fb95cac92f74b41dd3c9",
    "line" : 98,
    "diffHunk" : "@@ -1,1 +439,443 @@   ////////////////////////////////////////////////////////////////////////////\n   /// \\brief Save selected columns to disk, in a new TTree `treename` in file `filename`.\n   /// \\tparam ColumnTypes variadic list of branch/column types.\n   /// \\param[in] treename The name of the output TTree.\n   /// \\param[in] filename The name of the output TFile."
  },
  {
    "id" : "e6635a1b-29db-4f9c-a16a-afc71bd74bbd",
    "prId" : 2681,
    "prUrl" : "https://github.com/root-project/root/pull/2681#pullrequestreview-158753029",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adbd3203-c6ac-424a-ae7f-2ee2474404a6",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "should we specify somewhere that this is a `std::vector<std::string>`? users won't know what to do with a `ColumnNames_t`",
        "createdAt" : "2018-09-25T14:06:53Z",
        "updatedAt" : "2018-09-25T21:51:53Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "b92e80f7-9ba0-4907-8ae0-e2152bd23280",
        "parentId" : "adbd3203-c6ac-424a-ae7f-2ee2474404a6",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Wouldn't the user just click to know what is that? ",
        "createdAt" : "2018-09-25T21:27:12Z",
        "updatedAt" : "2018-09-25T21:51:53Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "241af49dccf5dfe66614fb95cac92f74b41dd3c9",
    "line" : 585,
    "diffHunk" : "@@ -1,1 +1476,1480 @@   /////////////////////////////////////////////////////////////////////////////\n   /// \\brief Returns the names of the available columns\n   /// \\return the container of column names.\n   ///\n   /// This is not an action nor a transformation, just a query to the RDataFrame object."
  }
]