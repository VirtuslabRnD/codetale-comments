[
  {
    "id" : "2a7261ef-b14e-4ab8-b009-58cbeae94e89",
    "prId" : 6380,
    "prUrl" : "https://github.com/root-project/root/pull/6380#pullrequestreview-493200472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "078e22ac-9947-4080-a306-baa785374f05",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "```suggestion\r\n   /// Check whether the result has already been computed\r\n   ///\r\n   /// ~~~{.cpp}\r\n   /// auto res = df.Count();\r\n   /// res.IsReady(); // false, access will trigger event loop\r\n   /// std::cout << *res << std::endl; // triggers event loop\r\n   /// res.IsReady(); // true\r\n   /// ~~~\r\n```",
        "createdAt" : "2020-09-22T08:19:18Z",
        "updatedAt" : "2020-09-23T09:38:22Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fa41fa0b68c38d05f25b0fe950c3704c9407c4d",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +304,308 @@\n   // clang-format off\n   /// Check whether the result has already been computed\n   ///\n   /// ~~~{.cpp}"
  },
  {
    "id" : "c28ac12f-14e8-4fc2-9976-389db8de02a2",
    "prId" : 7268,
    "prUrl" : "https://github.com/root-project/root/pull/7268#pullrequestreview-597976793",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3606de31-f95a-4477-8a52-8b1f9c0b0f96",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "```suggestion\r\n   template <typename T2, decltype(std::shared_ptr<T>(std::declval<T2*>()))* = nullptr>\r\n```",
        "createdAt" : "2021-02-23T15:57:59Z",
        "updatedAt" : "2021-02-23T15:58:00Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "733879d1-fde8-4955-a417-868a38818f31",
        "parentId" : "3606de31-f95a-4477-8a52-8b1f9c0b0f96",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "Should be `decltype(std::shared_ptr<T>(std::declval<std::shared_ptr<T2>>()))* = nullptr` to be precise, right? (EDIT: or better, to make sure that we inherit the behavior of `shared_ptr<A>(shared_ptr<B>)` whatever it is/will be)\r\n\r\nDo you find this more readable? I have a slight preference for the \"plain english\" `enable_if<is_constructible<...>>`",
        "createdAt" : "2021-02-23T16:05:44Z",
        "updatedAt" : "2021-02-23T16:17:25Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "f642c7b9-2fff-4167-b05d-b5219fcaac79",
        "parentId" : "3606de31-f95a-4477-8a52-8b1f9c0b0f96",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "That's totally fine if you prefer the spelled-out version, go for it!",
        "createdAt" : "2021-02-24T22:03:49Z",
        "updatedAt" : "2021-02-24T22:03:49Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "3427c72e95d33101d13aac17fad31ef84d1d3243",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +166,170 @@   /// The requirements on T2 and T are the same as for conversion between std::shared_ptr<T2> and std::shared_ptr<T>.\n   template <typename T2, typename std::enable_if<std::is_constructible<std::shared_ptr<T>, std::shared_ptr<T2>>::value,\n                                                  int>::type = 0>\n   RResultPtr(const RResultPtr<T2> &r) : fLoopManager(r.fLoopManager), fObjPtr(r.fObjPtr), fActionPtr(r.fActionPtr)\n   {"
  }
]