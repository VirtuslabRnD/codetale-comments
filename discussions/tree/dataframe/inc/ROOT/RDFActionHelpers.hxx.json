[
  {
    "id" : "241fb5a4-3aca-428a-9769-443ba49dd393",
    "prId" : 2269,
    "prUrl" : "https://github.com/root-project/root/pull/2269#pullrequestreview-133137069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cae85d48-2be8-4994-b793-6422d5df6913",
        "parentId" : null,
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "üëç ",
        "createdAt" : "2018-06-29T08:19:56Z",
        "updatedAt" : "2018-07-02T13:06:21Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "caf8a9c352efc07d9bb4c0e66cf5afdbc07a5558",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +677,681 @@extern template void StdDevHelper::Exec(unsigned int, const std::vector<int> &);\nextern template void StdDevHelper::Exec(unsigned int, const std::vector<unsigned int> &);\n\n/// Helper function for SnapshotHelper and SnapshotHelperMT. It creates new branches for the output TTree of a Snapshot.\ntemplate <typename T>"
  },
  {
    "id" : "eaf1fe03-732d-4431-9edb-49eb860565f8",
    "prId" : 2313,
    "prUrl" : "https://github.com/root-project/root/pull/2313#pullrequestreview-150978179",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9db84a0f-ba73-4df3-9d08-2901ea3baea8",
        "parentId" : null,
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "perhaps here we may return a string_view to avoid fresh creation of strings?",
        "createdAt" : "2018-07-18T11:23:18Z",
        "updatedAt" : "2018-08-31T08:56:55Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "ae9b4f08-de9a-4c4c-826c-2a29f4da2453",
        "parentId" : "9db84a0f-ba73-4df3-9d08-2901ea3baea8",
        "authorId" : "9c5b50e9-7e3c-4cab-9d54-e46d6831dd3b",
        "body" : "I think this represents a problem, as many of these strings are later manipulated for printing. Maybe it's better to use strings and pass them around as const ref whenever possible",
        "createdAt" : "2018-07-18T14:12:05Z",
        "updatedAt" : "2018-08-31T08:56:55Z",
        "lastEditedBy" : "9c5b50e9-7e3c-4cab-9d54-e46d6831dd3b",
        "tags" : [
        ]
      },
      {
        "id" : "0c83ae65-2185-48e3-9c7e-5ea142f1f089",
        "parentId" : "9db84a0f-ba73-4df3-9d08-2901ea3baea8",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "üëç ",
        "createdAt" : "2018-08-30T12:57:48Z",
        "updatedAt" : "2018-08-31T08:56:55Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a541f74b72f050e6c53760937f9c765825f592fa",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +112,116 @@   void Finalize() { /* noop */}\n\n   std::string GetActionName(){\n      return \"ForeachSlot\";\n   }"
  },
  {
    "id" : "9bcf5bb4-3a2a-4859-867c-0c4ad3de36ff",
    "prId" : 2708,
    "prUrl" : "https://github.com/root-project/root/pull/2708#pullrequestreview-160015978",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ffb3cbb6-e81a-40e7-b78a-d47f30f12aad",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "`TH1D`'s copy ctor is fairly heavy weight (see [its implementation](https://root.cern/doc/master/TH1_8cxx_source.html#l02580)), but here in principle it would be enough to create empty histograms with the correct binning, without performing a deep copy of `fObjects[0]`",
        "createdAt" : "2018-09-28T12:28:05Z",
        "updatedAt" : "2018-09-29T07:32:58Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "3ab8451d-be52-4e88-94d6-cb1c8d5e5fb4",
        "parentId" : "ffb3cbb6-e81a-40e7-b78a-d47f30f12aad",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Right. How would you do it in the general case?",
        "createdAt" : "2018-09-28T20:37:15Z",
        "updatedAt" : "2018-09-29T07:32:58Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbb92c95ecd2fd7e7fb545a6090252f0cadaa6f3",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +259,263 @@      // Initialise all other slots\n      for (unsigned int i = 1; i < nSlots; ++i) {\n         fObjects[i] = new HIST(*fObjects[0]);\n         fObjects[i]->SetDirectory(nullptr);\n      }"
  },
  {
    "id" : "40d8d34b-e204-4e20-8bc7-a612bf910c5c",
    "prId" : 2708,
    "prUrl" : "https://github.com/root-project/root/pull/2708#pullrequestreview-160016415",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05f79123-5ddc-456f-9055-4b759ec09cb8",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "if `FillParHelper` does not retain ownership of the contents of `h`, it should not take it by `shared_ptr` in its ctor, it's misleading.\r\n\r\nit's not _wrong_, because the helper will go out of scope if the corresponding `RResultPtr` goes out of scope, and the `RResultPtr` shares ownership of the contents of `h` -- so I don't think it can ever happen that `FillParHelper` fills a deleted histogram -- but ownership would be clearer if `FillTOHelper`'s ctor took the histogram by reference (and then stored it in a vector of raw pointers). Is that doable?",
        "createdAt" : "2018-09-28T12:34:51Z",
        "updatedAt" : "2018-09-29T07:32:58Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "e3900de7-e59d-4190-98a2-84d0a1bbbf9f",
        "parentId" : "05f79123-5ddc-456f-9055-4b759ec09cb8",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Perhaps. Not a good reason not to change this but this signature resisted all refactorings since the first implementation 2y ago.",
        "createdAt" : "2018-09-28T20:38:45Z",
        "updatedAt" : "2018-09-29T07:32:58Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbb92c95ecd2fd7e7fb545a6090252f0cadaa6f3",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +256,260 @@      : fObjects(nSlots, nullptr)\n   {\n      fObjects[0] = h.get();\n      // Initialise all other slots\n      for (unsigned int i = 1; i < nSlots; ++i) {"
  },
  {
    "id" : "02d8072f-b4f7-49ff-93bf-94a2550f48ed",
    "prId" : 2708,
    "prUrl" : "https://github.com/root-project/root/pull/2708#pullrequestreview-159833996",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "54a6118d-0c9e-485d-b4cd-92ede0cd02a1",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "same comment as per the `shared_ptr<TH1D>` above: if `FillTGraphHelper` does not retain ownership, it should not take it by `shared_ptr` in its ctor, it's misleading",
        "createdAt" : "2018-09-28T12:35:50Z",
        "updatedAt" : "2018-09-29T07:32:58Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "bbb92c95ecd2fd7e7fb545a6090252f0cadaa6f3",
    "line" : 146,
    "diffHunk" : "@@ -1,1 +386,390 @@      : fGraphs(nSlots, nullptr)\n   {\n      fGraphs[0] = g.get();\n      // Initialise all other slots\n      for (unsigned int i = 1; i < nSlots; ++i) {"
  }
]