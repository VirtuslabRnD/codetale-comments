[
  {
    "id" : "f179a576-6548-4dd7-95da-97d2bbd6dbe3",
    "prId" : 3077,
    "prUrl" : "https://github.com/root-project/root/pull/3077#pullrequestreview-180824217",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "758caffb-9306-49c3-a004-85ae45e5553c",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "is this error message still accurate (here and below)? iiuc we return the exact interprete error code anymore",
        "createdAt" : "2018-12-03T10:21:34Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "eeb2507b-9225-4e51-8f8a-a3882bccbc4d",
        "parentId" : "758caffb-9306-49c3-a004-85ae45e5553c",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Yes and maybe this is the best we can do now?",
        "createdAt" : "2018-12-03T12:10:52Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "a5e6d29c-8bfb-4cae-89c9-4edf0b4a7d13",
        "parentId" : "758caffb-9306-49c3-a004-85ae45e5553c",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "(I know that this interpreter calls need to go, that is really the best we can do)",
        "createdAt" : "2018-12-03T12:11:17Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "6f4f6e41-f2cb-4548-99d7-aef456948cae",
        "parentId" : "758caffb-9306-49c3-a004-85ae45e5553c",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "we could remove \"interpreter error code is ...\" from the error message since the number reported is not what the interpreter reported",
        "createdAt" : "2018-12-03T12:39:10Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "8efe8d9f-8204-4f19-88ad-ac879cca235a",
        "parentId" : "758caffb-9306-49c3-a004-85ae45e5553c",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "now we do.",
        "createdAt" : "2018-12-03T15:30:30Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "56e48526cf732e14583d5f4d68c846a1fc4f6f93",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +518,522 @@      auto calcRes = RDFInternal::InterpreterCalc(snapCall.str());\n      if (0 != calcRes.second) {\n         std::string msg = \"Cannot jit Snapshot call. Interpreter error code is \" + std::to_string(calcRes.second) + \".\";\n         throw std::runtime_error(msg);\n      }"
  },
  {
    "id" : "ae61730b-7171-4d70-be49-16ee77a08f20",
    "prId" : 3077,
    "prUrl" : "https://github.com/root-project/root/pull/3077#pullrequestreview-180736092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6661ec74-bbd1-4ee2-ad68-d273222191b5",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "In the documentation of `Snapshot` we give a couple of example usages: it could be useful to show how to select `muon_.*|electron_.*` -- mostly because people will confuse globbing syntax (`muon_*`) with regexp syntax (`muon_.*`)",
        "createdAt" : "2018-12-03T10:27:45Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "b9a33afc-46b9-419d-8bd9-1f97f7ae0cf5",
        "parentId" : "6661ec74-bbd1-4ee2-ad68-d273222191b5",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "yes, even if we say PCRE, it would be nice to show an example.",
        "createdAt" : "2018-12-03T12:12:53Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "56e48526cf732e14583d5f4d68c846a1fc4f6f93",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +529,533 @@   /// \\param[in] treename The name of the output TTree.\n   /// \\param[in] filename The name of the output TFile.\n   /// \\param[in] columnNameRegexp The regular expression to match the column names to be selected. The presence of a '^' and a '$' at the end of the string is implicitly assumed if they are not specified. The dialect supported is PCRE via the TPRegexp class. An empty string signals the selection of all columns.\n   /// \\param[in] options RSnapshotOptions struct with extra options to pass to TFile and TTree\n   /// \\return a `RDataFrame` that wraps the snapshotted dataset."
  },
  {
    "id" : "06571bf1-0673-4a44-bfe3-52a0799c345e",
    "prId" : 5354,
    "prUrl" : "https://github.com/root-project/root/pull/5354#pullrequestreview-394824292",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1e90706b-6772-448c-8297-665be1386511",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Why the spelling ```__rdf``` ?  Leading underscore is technically reserved for the compiler ... ",
        "createdAt" : "2020-04-15T11:53:44Z",
        "updatedAt" : "2020-04-15T11:53:44Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "d4270699-ab20-4209-980d-5d3ce1a6bb90",
        "parentId" : "1e90706b-6772-448c-8297-665be1386511",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I think all identifiers including double underscores in any position are in principle reserved. ROOT sometimes uses such identifiers anyway for \"special\" things. I think the choice was made (a couple of years ago) to make sure we never conflict with anything, but still produce readable code (e.g. `ROOTRDataFrameReservedNameSpace` also will not conflict with anything but hurts readabiliy).\r\n\r\nI'm open to changes though",
        "createdAt" : "2020-04-15T12:37:38Z",
        "updatedAt" : "2020-04-15T12:37:39Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "428a1c72-5c9c-4256-a473-8b008df2bdd4",
        "parentId" : "1e90706b-6772-448c-8297-665be1386511",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "We have often used ```R__``` for that purpose.",
        "createdAt" : "2020-04-15T18:30:08Z",
        "updatedAt" : "2020-04-15T18:30:08Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "c38bc2c1-a57f-453a-9a90-3db6b5096b2f",
        "parentId" : "1e90706b-6772-448c-8297-665be1386511",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "But that's just as reserved, as far as I know ",
        "createdAt" : "2020-04-15T20:33:39Z",
        "updatedAt" : "2020-04-15T20:33:52Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "b7dbb52a-be23-4e9c-b2e1-31b2cc66767c",
        "parentId" : "1e90706b-6772-448c-8297-665be1386511",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Why?  At least not according to ```http://www.gnu.org/software/libc/manual/html_node/Reserved-Names.html```  (to be clear for your usage I propose ```R__rdf```)",
        "createdAt" : "2020-04-15T22:26:36Z",
        "updatedAt" : "2020-04-15T22:27:15Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "19be0326-2eca-4d30-98f1-dd74c6a4ff8f",
        "parentId" : "1e90706b-6772-448c-8297-665be1386511",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "See https://stackoverflow.com/questions/228783/what-are-the-rules-about-using-an-underscore-in-a-c-identifier and the section of the standard mentioned in the first answer, 17.4.3.1.2 Global names [lib.global.names]",
        "createdAt" : "2020-04-16T07:46:01Z",
        "updatedAt" : "2020-04-16T07:46:01Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "fb21fa66-5c82-44ea-b571-057019f71a35",
        "parentId" : "1e90706b-6772-448c-8297-665be1386511",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "They reserved double underscore anywhere in the name!! \r\n\r\nSo minor tweak :) ```R_rdf```",
        "createdAt" : "2020-04-16T16:55:37Z",
        "updatedAt" : "2020-04-16T16:55:37Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "d45b28573c6951e848d5f20d0b14e2ae877b0e59",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +1889,1893 @@         const auto colID = std::to_string(fCustomColumns.GetColumns().at(std::string(column))->GetID());\n         const auto call =\n            \"ROOT::Internal::RDF::TypeID2TypeName(typeid(__rdf::\" + std::string(column) + colID + \"_type))\";\n         fLoopManager->JitDeclarations(); // some type aliases might be needed by the code jitted in the next line\n         const auto calcRes = RDFInternal::InterpreterCalc(call);"
  }
]