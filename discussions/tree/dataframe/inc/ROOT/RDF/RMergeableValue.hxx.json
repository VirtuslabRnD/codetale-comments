[
  {
    "id" : "a1709bad-afd8-4fd0-92da-20679b71af1f",
    "prId" : 5552,
    "prUrl" : "https://github.com/root-project/root/pull/5552#pullrequestreview-419873594",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1d834e83-786a-4c27-875b-007021ee716e",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "`RMergeableValue` is in `ROOT::RDF` but the only way to get one is in `ROOT::Detail::RDF`. We should align the two. I think `RMergeableValue` should move to `ROOT::Detail::RDF`.",
        "createdAt" : "2020-05-14T12:52:22Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "716bee5f-2047-47a6-a3c4-987daa46f550",
        "parentId" : "1d834e83-786a-4c27-875b-007021ee716e",
        "authorId" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "body" : "Yes, I was planning on doing at some point sorry",
        "createdAt" : "2020-05-14T14:04:09Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "tags" : [
        ]
      },
      {
        "id" : "26b215b4-8925-4a4f-a4c9-6a1ad0da6b3c",
        "parentId" : "1d834e83-786a-4c27-875b-007021ee716e",
        "authorId" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "body" : "Aligned now",
        "createdAt" : "2020-05-28T08:09:50Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ea47b65282af7dc93a386fddf1001401df7fbdd",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +27,31 @@namespace ROOT {\nnamespace Detail {\nnamespace RDF {\n\n// Fwd declarations for RMergeableValue"
  },
  {
    "id" : "1975e746-25bc-4c14-85d4-bc16c655a645",
    "prId" : 5552,
    "prUrl" : "https://github.com/root-project/root/pull/5552#pullrequestreview-420378602",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9011941f-ec9d-469d-83ec-23412273bf44",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "the ROOT header is missing",
        "createdAt" : "2020-05-14T12:53:12Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "a4c07931-62da-4a14-9543-8db4d5e4389c",
        "parentId" : "9011941f-ec9d-469d-83ec-23412273bf44",
        "authorId" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "body" : "Present now",
        "createdAt" : "2020-05-28T18:26:36Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ea47b65282af7dc93a386fddf1001401df7fbdd",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +15,19 @@ *************************************************************************/\n\n#ifndef ROOT_RDF_RMERGEABLEVALUE\n#define ROOT_RDF_RMERGEABLEVALUE\n"
  },
  {
    "id" : "15d0e8ef-acf9-4adf-b221-21a68379bdba",
    "prId" : 5552,
    "prUrl" : "https://github.com/root-project/root/pull/5552#pullrequestreview-425723370",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1574a6ba-efac-4b86-a975-ee94951f9590",
        "parentId" : null,
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "Design comment: the fact of having `template <typename T, typename... Ts>` means we can potentially instantiate this template for multiple types, which can lead to a merge incompatibility at runtime. Is there any way we can enforce all the `T`s to be the same at compile time or we need a runtime check?",
        "createdAt" : "2020-05-29T13:23:01Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      },
      {
        "id" : "15f97efc-a25e-4ae3-9b49-a07ba81bc020",
        "parentId" : "1574a6ba-efac-4b86-a975-ee94951f9590",
        "authorId" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "body" : "Yes indeed a `static_assert` could be inserted in the function body.\r\nI have though about it, but I have to say that I personally see no instance where `MergeValues` could try to merge two incompatible values without throwing erros. For instance two notable cases may be:\r\n* Merging Histo1D with Graph: they respectively are wrapped by `RMergeableFill<TH1D>` and `RMergeableFill<TGraph>` and when the function calls `RMergeableFill<TH1D>::Merge(const RMergeableValue<TH1D> &)` the argument has `TGraph` in the template and that produces a compilation error\r\n* Merging Min and Max: they both are wrapped by `RMergeableGenericAction<double>` in the Python side and when the function calls `RMergeableGenericAction<double>::Merge(const RMergeableValue<double> &)` the check for std::bad_cast present in the Merge method will throw a std::invalid_argument at runtime\r\n\r\nSo in the end some error should be thrown anyway if a user tries to merge incompatible types. That said, if it's desirable to have an early stopper even before trying to call `Merge` on the mergeables, I will add the `static_assert`",
        "createdAt" : "2020-05-29T14:25:55Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "tags" : [
        ]
      },
      {
        "id" : "96708354-c085-42dd-984e-348b964ceceb",
        "parentId" : "1574a6ba-efac-4b86-a975-ee94951f9590",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "i agree we should have a static assert here, it would also serve documentation purposes",
        "createdAt" : "2020-06-01T21:50:26Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "7b61f972-2b65-4532-9784-6987d38d8e32",
        "parentId" : "1574a6ba-efac-4b86-a975-ee94951f9590",
        "authorId" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "body" : "static assert added in the latest commits",
        "createdAt" : "2020-06-06T08:08:12Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ea47b65282af7dc93a386fddf1001401df7fbdd",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +34,38 @@\ntemplate <typename T, typename... Ts>\nstd::unique_ptr<RMergeableValue<T>> MergeValues(std::unique_ptr<RMergeableValue<T>> OutputMergeable,\n                                                std::unique_ptr<RMergeableValue<Ts>>... InputMergeables);\n"
  },
  {
    "id" : "582bddea-29e4-421c-ae2e-a1f24a24b569",
    "prId" : 5552,
    "prUrl" : "https://github.com/root-project/root/pull/5552#pullrequestreview-422410830",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "91717f82-e824-4359-91d3-5fde40949c55",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "can these `T1`s be `T`s instead?",
        "createdAt" : "2020-06-01T22:00:12Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "03872392-e7af-4fda-8c38-e7a861eb5108",
        "parentId" : "91717f82-e824-4359-91d3-5fde40949c55",
        "authorId" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "body" : "Seems like they can't:\r\n* Writing `T` in the template declaration shadows the `T` of the class template\r\n* Writing `template<typename ... Ts> friend void MergeValues<T>` gives error about not being able to make partial template instantiation",
        "createdAt" : "2020-06-02T07:05:15Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "tags" : [
        ]
      },
      {
        "id" : "c9014947-e344-4618-9a16-328cd1540dcd",
        "parentId" : "91717f82-e824-4359-91d3-5fde40949c55",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "alright :man_shrugging: ",
        "createdAt" : "2020-06-02T07:29:14Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ea47b65282af7dc93a386fddf1001401df7fbdd",
    "line" : 135,
    "diffHunk" : "@@ -1,1 +133,137 @@                                                           std::unique_ptr<RMergeableValue<Ts>>... InputMergeables);\n   template <typename T1, typename... Ts>\n   friend void MergeValues(RMergeableValue<T1> &OutputMergeable, const RMergeableValue<Ts> &... InputMergeables);\n\n   /////////////////////////////////////////////////////////////////////////////"
  },
  {
    "id" : "16e365fd-8d92-4c97-a774-ba46e4299945",
    "prId" : 5552,
    "prUrl" : "https://github.com/root-project/root/pull/5552#pullrequestreview-425723564",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a2310683-2899-4703-9429-424c38ecccf1",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "so iiuc this method is only meant to be called on RMergeableValues that contain the result of a merge. That's easily checked with a boolean, and it might be an easy way to prevent misuse, what do you think?",
        "createdAt" : "2020-06-01T22:10:13Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "762b6122-f148-4205-b6a0-9ab7177b9c62",
        "parentId" : "a2310683-2899-4703-9429-424c38ecccf1",
        "authorId" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "body" : "Fair enough yes, can  add a boolean to check `MergeValues` has been called at least once.\r\nThis wouldn't still account for all cases, e.g. a mergeable that needs to pass 2 or more rounds of merging before actually getting all the info (especially true for the `MergeValues` signature with the `unique_ptr`s). But I see the need for checking at least one merging has happened",
        "createdAt" : "2020-06-02T07:11:46Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "tags" : [
        ]
      },
      {
        "id" : "fceb26f2-d2f2-40a8-ada6-8d6615dbacaa",
        "parentId" : "a2310683-2899-4703-9429-424c38ecccf1",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "uhm ok up to you then, i don't know whether a check that might have false negatives is better than no check at all in this case",
        "createdAt" : "2020-06-02T07:30:46Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "d1d3f3e2-b504-4b92-9e24-98df7e1c2b28",
        "parentId" : "a2310683-2899-4703-9429-424c38ecccf1",
        "authorId" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "body" : "Added fIsMerged data member to check that the mergeable has been merged at least once",
        "createdAt" : "2020-06-06T08:11:44Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ea47b65282af7dc93a386fddf1001401df7fbdd",
    "line" : 166,
    "diffHunk" : "@@ -1,1 +164,168 @@   /////////////////////////////////////////////////////////////////////////////\n   /// \\brief Retrieve the result wrapped by this mergeable.\n   const T &GetValue() const { return fValue; }\n};\n"
  },
  {
    "id" : "f890988f-4775-45df-bc17-dc8dedc9e3df",
    "prId" : 8408,
    "prUrl" : "https://github.com/root-project/root/pull/8408#pullrequestreview-681724747",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fe2f9da-ead5-4bb0-ae22-f2f4186ccbe1",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Are we guaranteed that `U` (i.e. `T`) inherit from `TObject`?",
        "createdAt" : "2021-06-11T09:57:59Z",
        "updatedAt" : "2021-06-11T10:02:49Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "d17af34b-be09-4493-892d-f6a164e85c9e",
        "parentId" : "7fe2f9da-ead5-4bb0-ae22-f2f4186ccbe1",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "ah you are right, I forgot `TList` is not really a generic container. I will add a check: `template <typename U, typename = std::enable_if<std::is_base_of<...` and update `Fill`'s docs accordingly",
        "createdAt" : "2021-06-11T10:16:49Z",
        "updatedAt" : "2021-06-11T10:16:50Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "3bffa1f2-5aeb-43a7-a439-9f2eefa619d9",
        "parentId" : "7fe2f9da-ead5-4bb0-ae22-f2f4186ccbe1",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "done",
        "createdAt" : "2021-06-11T11:22:40Z",
        "updatedAt" : "2021-06-11T11:22:40Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "a36c6cdb485424dedd4aefa4067cf599be17ae96",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +241,245 @@   {\n      TList l;                               // The `Merge` method accepts a TList\n      l.Add(const_cast<U *>(&other.fValue)); // Ugly but needed because of the signature of TList::Add\n      this->fValue.Merge(&l); // if `T == TH1D` Eventually calls TH1::ExtendAxis that creates new instances of TH1D\n   }"
  },
  {
    "id" : "d6d86abd-8a13-4d36-8742-04e405d7d38f",
    "prId" : 8408,
    "prUrl" : "https://github.com/root-project/root/pull/8408#pullrequestreview-681699875",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f4d6ca81-b9ce-4307-85eb-acbd38bf424a",
        "parentId" : null,
        "authorId" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "body" : "Same doubt as above in `FillParHelper::Finalize`",
        "createdAt" : "2021-06-11T10:52:46Z",
        "updatedAt" : "2021-06-11T10:56:25Z",
        "lastEditedBy" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "a36c6cdb485424dedd4aefa4067cf599be17ae96",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +272,276 @@      try {\n         const auto &othercast = dynamic_cast<const RMergeableFill<T> &>(other);\n         DoMerge(othercast, /*toselecttherightoverload=*/0);\n      } catch (const std::bad_cast &) {\n         throw std::invalid_argument(\"Results from different actions cannot be merged together.\");"
  }
]