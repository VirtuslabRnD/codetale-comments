[
  {
    "id" : "f06abdea-b762-4a4a-b74c-e1c97dd7ec74",
    "prId" : 2709,
    "prUrl" : "https://github.com/root-project/root/pull/2709#pullrequestreview-206283983",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3560a3d0-a3fb-4300-b598-3d2087365dd0",
        "parentId" : null,
        "authorId" : "c2785bef-1def-4666-9391-8b42c0eb1216",
        "body" : "I actually used RDFUtils in my own datasource. Is this header really private or simply moved to a better place? I think retaining the ability to write datasources in user code is very important to us.",
        "createdAt" : "2019-02-21T12:28:11Z",
        "updatedAt" : "2019-02-21T12:28:11Z",
        "lastEditedBy" : "c2785bef-1def-4666-9391-8b42c0eb1216",
        "tags" : [
        ]
      },
      {
        "id" : "a3388103-e521-4187-b8f2-8bcc246b436a",
        "parentId" : "3560a3d0-a3fb-4300-b598-3d2087365dd0",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "Simply moved to a better place, you can keep including it (with the new name).\r\n\r\n\"private\" is too strong of a word, but the entities it contains are in namespace `ROOT::Internal`, so we might modify them (or move them, like in this case) without notice.\r\n\r\nWhat are you using from this header exactly? Maybe we should promote it to `ROOT::Detail` (expert-only but not \"private\").",
        "createdAt" : "2019-02-21T12:33:51Z",
        "updatedAt" : "2019-02-21T12:33:51Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "a8adb84a-793a-492a-9d66-fd8091e818aa",
        "parentId" : "3560a3d0-a3fb-4300-b598-3d2087365dd0",
        "authorId" : "c2785bef-1def-4666-9391-8b42c0eb1216",
        "body" : "Not sure, actually. I will play a bit...",
        "createdAt" : "2019-02-21T12:43:05Z",
        "updatedAt" : "2019-02-21T12:43:05Z",
        "lastEditedBy" : "c2785bef-1def-4666-9391-8b42c0eb1216",
        "tags" : [
        ]
      },
      {
        "id" : "97c636b3-9320-4747-8483-8934cd76f7da",
        "parentId" : "3560a3d0-a3fb-4300-b598-3d2087365dd0",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "In general, having external projects rely on entities in `ROOT::Internal` is bad. Let us know what classifies as generally useful and we will promote it to `ROOT::Detail`.",
        "createdAt" : "2019-02-21T12:45:22Z",
        "updatedAt" : "2019-02-21T12:45:22Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "21477fc2da7fbf03cdc428e3b5edba66825ef064",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +28,32 @@#include \"ROOT/TBufferMerger.hxx\" // for SnapshotHelper\n#include \"ROOT/RDF/RCutFlowReport.hxx\"\n#include \"ROOT/RDF/Utils.hxx\"\n#include \"ROOT/RMakeUnique.hxx\"\n#include \"ROOT/RSnapshotOptions.hxx\""
  },
  {
    "id" : "c6f48b9c-6afb-4572-8417-83b819f280f8",
    "prId" : 3135,
    "prUrl" : "https://github.com/root-project/root/pull/3135#pullrequestreview-184176230",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "513b4167-f39e-4b38-9e2b-d4a648ae4969",
        "parentId" : null,
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "@bluehood There was a reason not having `const` here? This fixed the range warnings in cxx17 if passing the reference to the function.",
        "createdAt" : "2018-12-12T12:56:04Z",
        "updatedAt" : "2018-12-12T12:57:57Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "423dedc0-9b4b-4783-a211-6aae9614d33f",
        "parentId" : "513b4167-f39e-4b38-9e2b-d4a648ae4969",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "no reason, it's a bit overkill in general, typically _I think_ you would do `for (T &&v : *coll)`",
        "createdAt" : "2018-12-12T13:29:19Z",
        "updatedAt" : "2018-12-12T13:29:19Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ed636593163dc33d32a04e683031815ae261990",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +464,468 @@      for (unsigned int i = 1; i < fColls.size(); ++i) {\n         auto &coll = fColls[i];\n         for (const T &v : *coll) {\n            FillColl(v, *rColl);\n         }"
  },
  {
    "id" : "1b1a7587-6ad5-49c0-9513-4a4fb4a77ad2",
    "prId" : 3135,
    "prUrl" : "https://github.com/root-project/root/pull/3135#pullrequestreview-184173576",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "183c3be0-afce-4ac0-a55c-4bbbd46cee3f",
        "parentId" : null,
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "@bluehood Does the implicit cast of `T&` to `const T&` always work?",
        "createdAt" : "2018-12-12T12:57:01Z",
        "updatedAt" : "2018-12-12T12:57:57Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "f564ce65-cf4e-47db-98d4-73ad81157f51",
        "parentId" : "183c3be0-afce-4ac0-a55c-4bbbd46cee3f",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "it certainly always compile, i'm not sure whether it's always the best match when you have another overload",
        "createdAt" : "2018-12-12T13:23:07Z",
        "updatedAt" : "2018-12-12T13:23:07Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ed636593163dc33d32a04e683031815ae261990",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +426,430 @@\ntemplate <typename T, typename COLL>\nvoid FillColl(const T& v, COLL& c) {\n   c.emplace_back(v);\n}"
  },
  {
    "id" : "ce59046c-39e9-411a-b334-b3613d0207f4",
    "prId" : 4649,
    "prUrl" : "https://github.com/root-project/root/pull/4649#pullrequestreview-323532280",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d3ed1df-e6bb-4667-ac1c-5d7794039c6e",
        "parentId" : null,
        "authorId" : "678cc757-c5b5-4f52-b00d-db56d81b988d",
        "body" : "@bluehood I had a similar worry. Is the fact that this comes up at all a sign that something is going wrong in `Snapshot`?",
        "createdAt" : "2019-11-26T16:56:44Z",
        "updatedAt" : "2019-12-02T17:26:58Z",
        "lastEditedBy" : "678cc757-c5b5-4f52-b00d-db56d81b988d",
        "tags" : [
        ]
      },
      {
        "id" : "c7282eec-89d3-4595-9a59-b29a708567cc",
        "parentId" : "4d3ed1df-e6bb-4667-ac1c-5d7794039c6e",
        "authorId" : "678cc757-c5b5-4f52-b00d-db56d81b988d",
        "body" : "@bluehood `mkdir` appears in `InitTask`. Print statements reveal that `InitTask` gets called multiple times for a given slot. Moreover, the number of times it gets called varies; I can call `Snapshot` several times in a row, and see that `InitTask` was called for slot 0 one, two, or three times.\r\n\r\nIf I have it print the number of entries when `fOutputFiles[slot]->Write` is called for slot 0, I can see that `Write` is called every time `InitTask` is called and that `fOutputFiles[0]` always has 1250 entries (4 slots for an `RDataFrame` with 10000 rows).\r\n\r\nI hope this helps. I'm not sure where else to look.",
        "createdAt" : "2019-11-26T21:04:28Z",
        "updatedAt" : "2019-12-02T17:26:58Z",
        "lastEditedBy" : "678cc757-c5b5-4f52-b00d-db56d81b988d",
        "tags" : [
        ]
      },
      {
        "id" : "afe442c0-9a31-4e42-bd1e-c502eaf2bf21",
        "parentId" : "4d3ed1df-e6bb-4667-ac1c-5d7794039c6e",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "Hi @goi42 , this is certainly useful! `InitTask` can indeed be called multiple times per thread.\r\n\r\nLooking at the code and your changes, I think this can go in safely.",
        "createdAt" : "2019-11-27T09:31:09Z",
        "updatedAt" : "2019-12-02T17:26:58Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "89894b3b84d6b812ac78f10c97c66bea29a540c6",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +1295,1299 @@      if (!fDirName.empty()) {\n         // call returnExistingDirectory=true since MT can end up making this call multiple times\n         treeDirectory = fOutputFiles[slot]->mkdir(fDirName.c_str(), \"\", true);\n      }\n      // re-create output tree as we need to create its branches again, with new input variables"
  },
  {
    "id" : "35feb0d8-5502-425a-a4aa-865d374f0cc2",
    "prId" : 5552,
    "prUrl" : "https://github.com/root-project/root/pull/5552#pullrequestreview-411755430",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b9af4ad2-da16-4eff-9b58-5dde99bea742",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "please remove this comment or move it below: the virtual dtor is not an helper function for RMergeableValue, it's a bug fix (thanks, by the way :smile: )",
        "createdAt" : "2020-05-14T12:32:54Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ea47b65282af7dc93a386fddf1001401df7fbdd",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +73,77 @@   void CallFinalizeTask(unsigned int, Args...) {}\n\n   // Helper functions for RMergeableValue\n   virtual std::unique_ptr<RMergeableValueBase> GetMergeableValue() const\n   {"
  },
  {
    "id" : "2ce88486-b712-4325-9921-293f7856377d",
    "prId" : 5552,
    "prUrl" : "https://github.com/root-project/root/pull/5552#pullrequestreview-422412640",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "86fd7839-484d-4963-9f58-acd64b723f3c",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "Does this not print a warning about the missing `return {}`?",
        "createdAt" : "2020-06-01T20:31:09Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "9665a9b8-b4a8-4e4d-a66e-42a9aa144aea",
        "parentId" : "86fd7839-484d-4963-9f58-acd64b723f3c",
        "authorId" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "body" : "It actually doesn't, and no warnings returned from the builds. I can still provide a return value if that seems more correct.",
        "createdAt" : "2020-06-02T07:16:58Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "tags" : [
        ]
      },
      {
        "id" : "8d535787-f4c0-4bee-a886-72201c265192",
        "parentId" : "86fd7839-484d-4963-9f58-acd64b723f3c",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "i think it's fine if there are no warnings. keep an eye on the nightlies, especially for platforms with older compilers, after the PR is merged",
        "createdAt" : "2020-06-02T07:31:59Z",
        "updatedAt" : "2020-06-08T12:57:18Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "2ea47b65282af7dc93a386fddf1001401df7fbdd",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +77,81 @@   {\n      throw std::logic_error(\"`GetMergeableValue` is not implemented for this type of action.\");\n   }\n};\n"
  },
  {
    "id" : "328517ad-7c94-496f-8cad-520dcb06ab68",
    "prId" : 5693,
    "prUrl" : "https://github.com/root-project/root/pull/5693#pullrequestreview-417650067",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5aa68c44-9cd7-42e4-89b1-424cdf2fc609",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "```suggestion\r\n                 \"Branch \\\"%s\\\" contains TClonesArrays but the type specified to Snapshot was RVec<T>. The branch will \"\r\n                 \"be written out as a std::vector instead of a TClonesArray. To write as TClonesArray, \"\r\n                 \"use TClonesArray as a Snapshot template parameter.\", inName.c_str());\r\n      }\r\n```",
        "createdAt" : "2020-05-25T11:34:20Z",
        "updatedAt" : "2020-05-28T11:49:21Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      }
    ],
    "commit" : "ba5a8161525f115e3f95c07df5f2201f33b3a3bd",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +1093,1097 @@                 \"be written out as a std::vector instead of a TClonesArray. Specify that the type of the branch is \"\n                 \"TClonesArray as a Snapshot template parameter to write out a TClonesArray instead.\", inName.c_str());\n      }\n      outputTree.Branch(outName.c_str(), &ab->AsVector());\n      return;"
  },
  {
    "id" : "b6176be3-4cb6-43f5-a3e8-5e5ab6bb4820",
    "prId" : 7552,
    "prUrl" : "https://github.com/root-project/root/pull/7552#pullrequestreview-615473662",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77bd454b-2766-441a-aeef-18c3b6847d21",
        "parentId" : null,
        "authorId" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "body" : "Is `R__ASSERT` also valid for non-debug code? I.e. is it always evaluated?",
        "createdAt" : "2021-03-18T14:10:04Z",
        "updatedAt" : "2021-03-18T14:23:39Z",
        "lastEditedBy" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "tags" : [
        ]
      },
      {
        "id" : "f8c7e040-211b-41d2-959e-61de7222ac81",
        "parentId" : "77bd454b-2766-441a-aeef-18c3b6847d21",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I hope not! :) These are debug asserts, if `Finalize` is called we really expect `fOutputTree` and `fOutputFile` to not be null (they are set in `Initialize`, a few lines above).",
        "createdAt" : "2021-03-18T14:20:43Z",
        "updatedAt" : "2021-03-18T14:23:39Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "23cafee8-cb30-44ba-a7b3-e1092fb7ef4c",
        "parentId" : "77bd454b-2766-441a-aeef-18c3b6847d21",
        "authorId" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "body" : "OK, thanks for the clarification :-)",
        "createdAt" : "2021-03-18T14:42:04Z",
        "updatedAt" : "2021-03-18T14:42:04Z",
        "lastEditedBy" : "23a1739a-fdf1-4508-8ccf-74a4e80d9852",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebcdc71bfc0889c229801700f69607600c05667a",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +1343,1347 @@   {\n      R__ASSERT(fOutputTree != nullptr);\n      R__ASSERT(fOutputFile != nullptr);\n\n      // use AutoSave to flush TTree contents because TTree::Write writes in gDirectory, not in fDirectory"
  },
  {
    "id" : "1d4e64ec-326d-4499-ae0f-8a21a5149ca3",
    "prId" : 8375,
    "prUrl" : "https://github.com/root-project/root/pull/8375#pullrequestreview-680177365",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ddbe626-7b3c-49f4-90f6-2a65c026d345",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "```suggestion\r\n   std::vector<std::pair<TBranch *, std::string> fBranches;\r\n```\r\nsince the 2 must to be in sync. (and then using std::find_if and a lamba still allows the needed searches).",
        "createdAt" : "2021-06-09T17:41:42Z",
        "updatedAt" : "2021-06-09T17:41:43Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "58d15940-b62b-4bba-a581-47201959e1de",
        "parentId" : "1ddbe626-7b3c-49f4-90f6-2a65c026d345",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "mmh it makes cache access worse and usage more awkward, for a struct that is 20 lines of code it seems overkill?",
        "createdAt" : "2021-06-09T18:13:27Z",
        "updatedAt" : "2021-06-09T18:13:28Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "48147d1e-1aec-4a2a-b0c3-757d8fea5502",
        "parentId" : "1ddbe626-7b3c-49f4-90f6-2a65c026d345",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "fair enough",
        "createdAt" : "2021-06-09T21:50:11Z",
        "updatedAt" : "2021-06-09T21:50:11Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "7ac34a14fe0af01430d15b5ed48b35b92bc95b34",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +99,103 @@class RBranchSet {\n   std::vector<TBranch *> fBranches;\n   std::vector<std::string> fNames;\n\npublic:"
  },
  {
    "id" : "ac86652d-0e7d-41ea-a243-e62a8350b70a",
    "prId" : 8408,
    "prUrl" : "https://github.com/root-project/root/pull/8408#pullrequestreview-681712276",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34509fb0-fa59-4750-8b0a-67f81be40ba2",
        "parentId" : null,
        "authorId" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "body" : "I'm not sure how this works in this case. Does it mean that it will always select the Merge overload that uses TList  (aka what was happening before)? If so, when will the other overload be called in general? ",
        "createdAt" : "2021-06-11T10:52:10Z",
        "updatedAt" : "2021-06-11T10:56:25Z",
        "lastEditedBy" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "tags" : [
        ]
      },
      {
        "id" : "229d2d2c-1ae5-4d9e-80d8-bb26a59f2953",
        "parentId" : "34509fb0-fa59-4750-8b0a-67f81be40ba2",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "that's an excess of care on my part: it's for types that implement _both_ allowed signatures of `Merge`, in which case the second parameter resolves the ambiguity on what to call",
        "createdAt" : "2021-06-11T11:05:29Z",
        "updatedAt" : "2021-06-11T11:05:30Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "a36c6cdb485424dedd4aefa4067cf599be17ae96",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +522,526 @@         return;\n\n      Merge(fObjects, /*toselectcorrectoverload=*/0);\n\n      // delete the copies we created for the slots other than the first"
  }
]