[
  {
    "id" : "ce566117-b46b-46f7-b1ce-d1ded691de51",
    "prId" : 6380,
    "prUrl" : "https://github.com/root-project/root/pull/6380#pullrequestreview-492539935",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fb71cbc5-5ff2-4425-9adc-2b0779af33d1",
        "parentId" : null,
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "Add comparison operators",
        "createdAt" : "2020-09-21T12:33:53Z",
        "updatedAt" : "2020-09-23T09:38:22Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fa41fa0b68c38d05f25b0fe950c3704c9407c4d",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +25,29 @@namespace RDF {\n\nclass RResultHandle {\n   ROOT::Detail::RDF::RLoopManager* fLoopManager; //< Pointer to the loop manager\n   /// Owning pointer to the action that will produce this result."
  },
  {
    "id" : "fd08f800-02c1-457a-9a93-53678bbaf2c4",
    "prId" : 6380,
    "prUrl" : "https://github.com/root-project/root/pull/6380#pullrequestreview-493594532",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e892c36c-280c-46b8-a9ca-0a33463cea4c",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "this needs a sanity check on `typeid(T) == fTypeID`, where `fTypeID` is set to `typeid(T)` in the ctor",
        "createdAt" : "2020-09-22T07:57:05Z",
        "updatedAt" : "2020-09-23T09:38:22Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "20ed041d-85af-4cdb-9969-2a6e21cc5705",
        "parentId" : "e892c36c-280c-46b8-a9ca-0a33463cea4c",
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "I guess you mean an assert?",
        "createdAt" : "2020-09-22T14:06:27Z",
        "updatedAt" : "2020-09-23T09:38:22Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "23aab6cc-04dd-444f-92ac-e96d78bf288c",
        "parentId" : "e892c36c-280c-46b8-a9ca-0a33463cea4c",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "no, we want to error out also in release builds. I think throwing would be ok",
        "createdAt" : "2020-09-22T14:09:32Z",
        "updatedAt" : "2020-09-23T09:38:22Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "f4671c92-c355-43fe-b0b2-d192dc12be66",
        "parentId" : "e892c36c-280c-46b8-a9ca-0a33463cea4c",
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : ":+1:",
        "createdAt" : "2020-09-22T14:12:35Z",
        "updatedAt" : "2020-09-23T09:38:22Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "c508e0ca-1550-4117-87fa-30e43a41b60a",
        "parentId" : "e892c36c-280c-46b8-a9ca-0a33463cea4c",
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "Done",
        "createdAt" : "2020-09-22T15:35:19Z",
        "updatedAt" : "2020-09-23T09:38:22Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fa41fa0b68c38d05f25b0fe950c3704c9407c4d",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +72,76 @@   {\n      CheckType(typeid(T));\n      return static_cast<T*>(Get());\n   }\n"
  },
  {
    "id" : "19d44940-e148-469a-a6fe-96a5fd3c5c0c",
    "prId" : 6380,
    "prUrl" : "https://github.com/root-project/root/pull/6380#pullrequestreview-493594722",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17c3ac62-18fb-4b74-afa7-195ab77e2d07",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "also needs a sanity check on T, see above",
        "createdAt" : "2020-09-22T07:57:27Z",
        "updatedAt" : "2020-09-23T09:38:22Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "41c8e135-0ab0-48af-bd7b-5bd550b16071",
        "parentId" : "17c3ac62-18fb-4b74-afa7-195ab77e2d07",
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "Done",
        "createdAt" : "2020-09-22T15:35:32Z",
        "updatedAt" : "2020-09-23T09:38:22Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fa41fa0b68c38d05f25b0fe950c3704c9407c4d",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +82,86 @@   {\n      CheckType(typeid(T));\n      return *static_cast<T*>(Get());\n   }\n"
  },
  {
    "id" : "3647cfa6-86ee-46e4-8e7f-b007136f1c8e",
    "prId" : 6380,
    "prUrl" : "https://github.com/root-project/root/pull/6380#pullrequestreview-493631473",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8f0643a2-1880-4b91-972c-35dc911dda90",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "it doesn't matter much in this case, but in general the preferred pattern to implement `operator==` is to declare it as a friend non-member function. this has certain benefits such as picking up implicit conversions and working the same in both \"directions\". e.g. if `std::string` implemented `operator==` as a member function, `str == \"foo\"` would compile but `\"foo\" == str` would not.",
        "createdAt" : "2020-09-22T08:12:15Z",
        "updatedAt" : "2020-09-23T09:38:22Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "7437d7c0-280d-4347-a050-4f159204de5c",
        "parentId" : "8f0643a2-1880-4b91-972c-35dc911dda90",
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "I've kept them for now inline. You have a strong preference for putting them external?",
        "createdAt" : "2020-09-22T16:12:43Z",
        "updatedAt" : "2020-09-23T09:38:22Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "31c333ac-b12c-4dc2-9d3e-e25017dee7d3",
        "parentId" : "8f0643a2-1880-4b91-972c-35dc911dda90",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "i think it's ok in this case",
        "createdAt" : "2020-09-22T16:14:36Z",
        "updatedAt" : "2020-09-23T09:38:22Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fa41fa0b68c38d05f25b0fe950c3704c9407c4d",
    "line" : 103,
    "diffHunk" : "@@ -1,1 +101,105 @@   {\n      return fObjPtr == rhs.fObjPtr;\n   }\n\n   bool operator!=(const RResultHandle &rhs) const"
  },
  {
    "id" : "bc8eee9c-18d4-44c2-9882-42d394d28347",
    "prId" : 6380,
    "prUrl" : "https://github.com/root-project/root/pull/6380#pullrequestreview-493200472",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "860d7f11-6088-4252-bed7-991ca1caa326",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "```suggestion\r\n   /// Check whether the result has already been computed\r\n   ///\r\n   /// ~~~{.cpp}\r\n   /// std::vector<RResultHandle> results;\r\n   /// results.emplace_back(df.Mean<double>(\"var\"));\r\n   /// res.IsReady(); // false, access will trigger event loop\r\n   /// std::cout << res.GetValue<double>() << std::endl; // triggers event loop\r\n   /// res.IsReady(); // true\r\n   /// ~~~\r\n```",
        "createdAt" : "2020-09-22T08:16:34Z",
        "updatedAt" : "2020-09-23T09:38:22Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fa41fa0b68c38d05f25b0fe950c3704c9407c4d",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +85,89 @@   }\n\n   /// Check whether the result has already been computed\n   ///\n   /// ~~~{.cpp}"
  },
  {
    "id" : "f1941401-0241-4217-8013-b1317fbfa7c3",
    "prId" : 6380,
    "prUrl" : "https://github.com/root-project/root/pull/6380#pullrequestreview-493594633",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "267850ee-5384-4c75-bee3-cb4ff1f99165",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I think we need a copy-ctor and a move-ctor too (at least set to `= default` to make sure they will never get implicitly deleted)",
        "createdAt" : "2020-09-22T08:40:57Z",
        "updatedAt" : "2020-09-23T09:38:22Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "c0d220e3-c222-492b-8803-cb9ebac19e1e",
        "parentId" : "267850ee-5384-4c75-bee3-cb4ff1f99165",
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "Done",
        "createdAt" : "2020-09-22T15:35:25Z",
        "updatedAt" : "2020-09-23T09:38:22Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      }
    ],
    "commit" : "1fa41fa0b68c38d05f25b0fe950c3704c9407c4d",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +64,68 @@   RResultHandle(const RResultHandle&) = default;\n   RResultHandle(RResultHandle&&) = default;\n\n   /// Get the pointer to the encapsulated object.\n   /// Triggers event loop and execution of all actions booked in the associated RLoopManager."
  }
]