[
  {
    "id" : "0a7d3ef5-62ef-4ee2-bdd1-08b49dcebf3c",
    "prId" : 3001,
    "prUrl" : "https://github.com/root-project/root/pull/3001#pullrequestreview-176392150",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "43f3dea0-b099-4b8a-9977-7533cf962417",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Note that LoadTree is legal on a TTree and you may actually want to call it there too in case some of the friend trees are TChains.",
        "createdAt" : "2018-11-19T16:45:56Z",
        "updatedAt" : "2018-11-19T16:45:57Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "dfdcbb02770617c0b466d85579b21f7878cf6bee",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +117,121 @@void RLoopManager::RunTreeReader()\n{\n   if (fTree->IsA() == TClass::GetClass(\"TChain\")) {\n      // in case this is not the first event loop, we bring the chain back to the first tree\n      // to avoid warnings from TTreeReader"
  },
  {
    "id" : "4354ecc3-6d71-48e3-8358-713162e0f611",
    "prId" : 5207,
    "prUrl" : "https://github.com/root-project/root/pull/5207#pullrequestreview-382022967",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bfcd2400-5896-4307-82ab-d378c2b3f7a9",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Does this cleanup need to be done before throwing the exception or it is okay to not run it at all?",
        "createdAt" : "2020-03-24T16:39:14Z",
        "updatedAt" : "2020-03-26T13:51:00Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "040a5669-452d-4ce5-9b33-f7add8185891",
        "parentId" : "bfcd2400-5896-4307-82ab-d378c2b3f7a9",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "It's \"ok\" not to run it at all: no leaks or anything like that.\r\n\r\nWithout calling `CleanUpTask`, the computation graph is not cleared of (partially, wrongly) executed nodes, and the results are not \"finalized\" (e.g. partial results of different threads are not merged). With `CleanUpTask` called, the computation graph is cleared, and the results are finalized (but anyway wrong, because something went wrong during the event loop).\r\n\r\nI would recommend users throw away the dataframe altogether if an exception is thrown during the event loop (that's _if_ they catch the exception at all), so whether `CleanUpTask` is called or not does not matter.",
        "createdAt" : "2020-03-24T17:08:04Z",
        "updatedAt" : "2020-03-26T13:51:00Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "9eba1fd8-e1ce-467a-a066-b5430a8d7562",
        "parentId" : "bfcd2400-5896-4307-82ab-d378c2b3f7a9",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I'm confusing `CleanUpTask` and `CleanUpNodes` a little bit in my answer above when I describe what `CleanUpTask` does, but since `CleanUpNodes` is also not executed, the answer mostly stands",
        "createdAt" : "2020-03-24T17:11:37Z",
        "updatedAt" : "2020-03-26T13:51:00Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "8af10e93-1ff3-4668-8663-557862ad4793",
        "parentId" : "bfcd2400-5896-4307-82ab-d378c2b3f7a9",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "Well -- cannot hurt to call `CleanUpTask` and might actually prevent tear-down issues in `SnapshotHelperMT`. Will fix :smile: Thanks for pointing this out",
        "createdAt" : "2020-03-24T17:15:43Z",
        "updatedAt" : "2020-03-26T13:51:00Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "724eca8e-e5e7-4508-8cb7-2091765f58a7",
        "parentId" : "bfcd2400-5896-4307-82ab-d378c2b3f7a9",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "@pcanal turns out this deserved a whole separate PR. It is now #5214 ",
        "createdAt" : "2020-03-24T18:35:07Z",
        "updatedAt" : "2020-03-26T13:51:00Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "b0dcd1c0-d96a-449d-83d9-0d04942b026d",
        "parentId" : "bfcd2400-5896-4307-82ab-d378c2b3f7a9",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "I take it that question is resolved now.",
        "createdAt" : "2020-03-26T08:17:51Z",
        "updatedAt" : "2020-03-26T13:51:00Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "601605a1-9a9b-4e03-9632-dd3a1494d810",
        "parentId" : "bfcd2400-5896-4307-82ab-d378c2b3f7a9",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "Yes, resolved by #5214 (just merged)",
        "createdAt" : "2020-03-26T13:46:39Z",
        "updatedAt" : "2020-03-26T13:51:00Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "6779605e20986e515b4146c79dd6dd49130815d8",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +348,352 @@                               std::to_string(r.GetEntryStatus()));\n   }\n   CleanUpTask(0u);\n}\n"
  },
  {
    "id" : "5bbe1ecb-d880-4104-bbc0-2598caa276bd",
    "prId" : 5214,
    "prUrl" : "https://github.com/root-project/root/pull/5214#pullrequestreview-382034090",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "369231eb-1365-49e5-87cb-ac15a10a1bf6",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Another alternative could have been:\r\n```\r\n         CleanUpTask(slot);\r\n         // Error might throw in experiment frameworks like CMSSW\r\n         try { Error(\"RDataFrame::Run\",\"Event was loop interrupted\") }\r\n         catch( .... ) {}\r\n         throw;\r\n```\r\n\r\n```",
        "createdAt" : "2020-03-26T13:58:04Z",
        "updatedAt" : "2020-03-26T13:58:05Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "9b29b8b6e86c98a14290d81e8f97a577a0e22342",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +262,266 @@         // Error might throw in experiment frameworks like CMSSW\n         std::cerr << \"RDataFrame::Run: event was loop interrupted\\n\";\n         throw;\n      }\n      CleanUpTask(slot);"
  },
  {
    "id" : "587c92f6-7868-4eb4-9ff0-a926877d3db0",
    "prId" : 6208,
    "prUrl" : "https://github.com/root-project/root/pull/6208#pullrequestreview-470194635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77d95320-d36d-489b-8220-0f255ee070ab",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Why is this a vector BTW? Is this for types that consist of multiple columns of primitive types?",
        "createdAt" : "2020-08-19T07:15:24Z",
        "updatedAt" : "2020-08-19T09:24:16Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "e3d06aa5-e9cb-49f3-afef-6421bbf5bd7c",
        "parentId" : "77d95320-d36d-489b-8220-0f255ee070ab",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "it's one vector element per processing slot (~per thread).",
        "createdAt" : "2020-08-19T07:31:11Z",
        "updatedAt" : "2020-08-19T09:24:16Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "019f38409435410ca4505b64c3cf7f654f303f0f",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +699,703 @@}\n\nvoid RLoopManager::AddDSValuePtrs(const std::string &col, const std::vector<void *> ptrs)\n{\n   fDSValuePtrMap[col] = ptrs;"
  },
  {
    "id" : "6097af0c-9b79-46e9-8811-4d243696b640",
    "prId" : 6266,
    "prUrl" : "https://github.com/root-project/root/pull/6266#pullrequestreview-477685832",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f8cd0c9e-ff66-4f15-8ab8-9db6735a0958",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "can we reduce the locking to just the `std::move(GetCodeToJit())`?",
        "createdAt" : "2020-08-27T16:22:39Z",
        "updatedAt" : "2020-09-18T07:54:08Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "b036f105-1f79-46bb-a3df-bcfd27bd8b28",
        "parentId" : "f8cd0c9e-ff66-4f15-8ab8-9db6735a0958",
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "I don't think we can remove it because then we could assume that code is already jitted although it's not yet available. I see crashes in the tests along these lines.",
        "createdAt" : "2020-08-28T12:25:36Z",
        "updatedAt" : "2020-09-18T07:54:08Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "1a745bab-c0c2-4946-ac1e-8dc34c797c50",
        "parentId" : "f8cd0c9e-ff66-4f15-8ab8-9db6735a0958",
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "So if i put the guard only round the move assignment.",
        "createdAt" : "2020-08-28T12:25:53Z",
        "updatedAt" : "2020-09-18T07:54:08Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "0a62390f-2699-4ad7-bea2-ef0515c34995",
        "parentId" : "f8cd0c9e-ff66-4f15-8ab8-9db6735a0958",
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "Does this make sense?",
        "createdAt" : "2020-08-28T12:26:02Z",
        "updatedAt" : "2020-09-18T07:54:08Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "9e088305-c423-40d8-a2e6-b93a5121f9eb",
        "parentId" : "f8cd0c9e-ff66-4f15-8ab8-9db6735a0958",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "yes you are completely right",
        "createdAt" : "2020-08-28T12:27:54Z",
        "updatedAt" : "2020-09-18T07:54:08Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "3efb2eab2c6c180045b7a1033f4abee5f5f112fe",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +527,531 @@void RLoopManager::Jit()\n{\n   R__LOCKGUARD(gROOTMutex);\n\n   const std::string code = std::move(GetCodeToJit());"
  },
  {
    "id" : "b9999f68-d7a6-4462-ad1e-fc679b7f8d65",
    "prId" : 6828,
    "prUrl" : "https://github.com/root-project/root/pull/6828#pullrequestreview-565165675",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "666e8361-ea3a-45e0-bb71-90f7dcac2f54",
        "parentId" : null,
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "Do you think that including info about the slot index could be useful here as well?",
        "createdAt" : "2021-01-08T14:46:35Z",
        "updatedAt" : "2021-01-11T14:45:10Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      },
      {
        "id" : "5ddd32dd-6d3d-4fd8-aed4-d394e6858d70",
        "parentId" : "666e8361-ea3a-45e0-bb71-90f7dcac2f54",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "why not :D",
        "createdAt" : "2021-01-08T15:00:56Z",
        "updatedAt" : "2021-01-11T14:45:10Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "329c753f-3de9-4202-aa13-9214e4febb71",
        "parentId" : "666e8361-ea3a-45e0-bb71-90f7dcac2f54",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "done",
        "createdAt" : "2021-01-11T09:07:12Z",
        "updatedAt" : "2021-01-11T14:45:10Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "47913ebdc4747bbe948329a1d0940041708cc4c3",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +243,247 @@{\n   std::stringstream msg;\n   msg << \"Processing \" << info.fDataSet << \": entry range [\" << info.fRangeStart << \",\" << info.fRangeEnd - 1\n       << \"], using slot \" << info.fSlot << \" in thread \" << std::this_thread::get_id() << '.';\n   return msg.str();"
  },
  {
    "id" : "08de4360-080d-4a09-9c15-94fafc6b6a63",
    "prId" : 6828,
    "prUrl" : "https://github.com/root-project/root/pull/6828#pullrequestreview-564329877",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "de5237b6-968c-463b-9001-da8919dc1828",
        "parentId" : null,
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "So you are going to measure the jitting time always, not just when you are logging? Does this happen once per event loop?",
        "createdAt" : "2021-01-08T14:48:27Z",
        "updatedAt" : "2021-01-11T14:45:10Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      },
      {
        "id" : "c7212a83-0d78-41ad-a856-f5977989bb1b",
        "parentId" : "de5237b6-968c-463b-9001-da8919dc1828",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "yes, but `Start` and `Stop` are basically just taking a timestamp, they are cheap (esp. compared to typical jitting or event loop times)",
        "createdAt" : "2021-01-08T15:06:16Z",
        "updatedAt" : "2021-01-11T14:45:10Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "47913ebdc4747bbe948329a1d0940041708cc4c3",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +631,635 @@\n   TStopwatch s;\n   s.Start();\n   RDFInternal::InterpreterCalc(code, \"RLoopManager::Run\");\n   s.Stop();"
  }
]