[
  {
    "id" : "b3e48445-a258-4c33-8b0e-5d8c2cd536a8",
    "prId" : 2872,
    "prUrl" : "https://github.com/root-project/root/pull/2872#pullrequestreview-170158082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6b47e78-57ed-4acf-a785-0abced5ce6a6",
        "parentId" : null,
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Given that here we count on 0 being a special ID, perhaps we could add a comment to the GetNextID method which says \"The initial ID is 1 and not 0. 0 has a special value, i.e. it is used ...\"",
        "createdAt" : "2018-10-31T09:25:40Z",
        "updatedAt" : "2018-10-31T09:30:15Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "8abfca8a-4232-482a-bb86-ca6666910028",
        "parentId" : "b6b47e78-57ed-4acf-a785-0abced5ce6a6",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "this pattern is not the nicest...0 is not special, the value there could be anything: if `isCustomColumn == false`, the `customColID` parameter is ignored",
        "createdAt" : "2018-10-31T09:31:43Z",
        "updatedAt" : "2018-10-31T09:31:43Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "b0ce2a95-386b-4b7a-bd58-5666267a4ac7",
        "parentId" : "b6b47e78-57ed-4acf-a785-0abced5ce6a6",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "(mentioned here: https://github.com/root-project/root/pull/2872/files#diff-a65e9e976fff601b600e033d307fa399R184)",
        "createdAt" : "2018-10-31T09:32:45Z",
        "updatedAt" : "2018-10-31T09:32:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2bd3942e602573655985dabb33656ddbeab97b5",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +496,500 @@      // The map is a const reference, so no operator[]\n      const auto isCustomCol = customCols.HasName(realColName);\n      const auto customColID = isCustomCol ? customCols.GetColumns()[realColName]->GetID() : 0;\n      const auto colTypeName =\n         ColumnName2ColumnTypeName(realColName, namespaceID, tree, ds, isCustomCol, /*vector2rvec=*/true, customColID);"
  },
  {
    "id" : "b4051a04-3cfe-4eea-b14a-b2550038fdea",
    "prId" : 3077,
    "prUrl" : "https://github.com/root-project/root/pull/3077#pullrequestreview-180731560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0505379d-2e1f-49a8-b9ff-238c5949d0eb",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "At this point I don't think this dance is required anymore: we should just construct a `RDataFrame(chain)` here",
        "createdAt" : "2018-12-03T10:07:01Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "5e9ecb54-d586-47f2-8248-d854be4bc1c9",
        "parentId" : "0505379d-2e1f-49a8-b9ff-238c5949d0eb",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Of course.",
        "createdAt" : "2018-12-03T12:00:11Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "56e48526cf732e14583d5f4d68c846a1fc4f6f93",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +84,88 @@   ::TDirectory::TContext ctxt;\n   auto snapshotRDF = std::make_shared<ROOT::RDataFrame>(treeName, fileName, validCols);\n   auto snapshotRDFResPtr = MakeResultPtr(snapshotRDF, loopManager, std::move(actionPtr));\n\n   if (!isLazy) {"
  },
  {
    "id" : "0395309e-3658-48f5-8091-e3ebe49b0ce1",
    "prId" : 3077,
    "prUrl" : "https://github.com/root-project/root/pull/3077#pullrequestreview-180812953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0541cb5-9f0c-4591-9481-64a23c0fffbe",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I don't think we need this -- can we just forward-declare `ROOT::IsImplicitMTEnabled` in `RInterface.hxx`?",
        "createdAt" : "2018-12-03T10:18:15Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "5dd8b7eb-667d-436c-aca1-b1395b939e2e",
        "parentId" : "a0541cb5-9f0c-4591-9481-64a23c0fffbe",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "I am not sure here. I think we call `ROOT::IsImplicitMTEnabled()` explicitly.",
        "createdAt" : "2018-12-03T12:10:11Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "a13a0caf-af58-483b-bd25-4e9df67807ca",
        "parentId" : "a0541cb5-9f0c-4591-9481-64a23c0fffbe",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "You can call it as long as you have a declaration for it, you don't need the definition",
        "createdAt" : "2018-12-03T12:37:59Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "d4dc9b3c-4276-4511-8382-256bc0ef449f",
        "parentId" : "a0541cb5-9f0c-4591-9481-64a23c0fffbe",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "it's a template!",
        "createdAt" : "2018-12-03T15:08:05Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "38876e5a-703a-4daf-aa7f-1c0a10dff55c",
        "parentId" : "a0541cb5-9f0c-4591-9481-64a23c0fffbe",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "but that would impose an implicit dependency of headers?",
        "createdAt" : "2018-12-03T15:08:50Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "2874eae3-5d08-4de8-b61a-0647aad0aa33",
        "parentId" : "a0541cb5-9f0c-4591-9481-64a23c0fffbe",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I'm pretty sure you can call `ROOT::IsImplicitMTEnabled` from the template if you just put a forward declaration for it",
        "createdAt" : "2018-12-03T15:10:51Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "56e48526cf732e14583d5f4d68c846a1fc4f6f93",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +72,76 @@{\n   return ROOT::IsImplicitMTEnabled();\n}\n\nHeadNode_t CreateSnaphotRDF(const ColumnNames_t &validCols,"
  },
  {
    "id" : "c827753e-66b0-46cb-ac64-56f885f965e3",
    "prId" : 3324,
    "prUrl" : "https://github.com/root-project/root/pull/3324#pullrequestreview-197451995",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "799971b8-6e62-4cd8-ae0a-0534edb17876",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Rcpp?",
        "createdAt" : "2019-01-29T09:33:13Z",
        "updatedAt" : "2019-01-29T09:33:14Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d9db23a7f0e78a25bc4a8bef747b9b8fe2ef987",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +27,31 @@#include <TTree.h>\n\n// pragma to disable warnings on Rcpp which have\n// so many noise compiling\n#if defined(__GNUC__)"
  },
  {
    "id" : "1c0033c5-3b71-4dba-90a7-9ad3e01b916d",
    "prId" : 5329,
    "prUrl" : "https://github.com/root-project/root/pull/5329#pullrequestreview-402889622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e10aba99-6230-4b26-9a00-72864f7aff7f",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Didn't think about this much. What puzzles me, though, is that you want something that's not something before return, but that's optional. In the end, you don't care if there's anything before `return`.",
        "createdAt" : "2020-04-28T07:27:36Z",
        "updatedAt" : "2020-04-28T08:10:06Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "79e2c4b9-e334-4deb-ad0a-38cf16c923bc",
        "parentId" : "e10aba99-6230-4b26-9a00-72864f7aff7f",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Note that I meant the line the github *doesn't show* here.",
        "createdAt" : "2020-04-28T07:35:07Z",
        "updatedAt" : "2020-04-28T08:10:06Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "25688e3a-c19b-41a3-97da-a38980e63008",
        "parentId" : "e10aba99-6230-4b26-9a00-72864f7aff7f",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "we care if there is something before `return` that _is_ `[a-zA-Z0-9_]`: we don't want to match something like `\"var_return\"`",
        "createdAt" : "2020-04-28T08:03:36Z",
        "updatedAt" : "2020-04-28T08:10:06Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "a4e2a1e5-ac7a-416d-9742-339359c79895",
        "parentId" : "e10aba99-6230-4b26-9a00-72864f7aff7f",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "That's what I meant:\r\n```\r\nTPRegexp re2(\"[^a-zA-Z0-9_]?return\")\r\nroot [4] re2.Match(\"areturn\")\r\n(int) 1\r\n```",
        "createdAt" : "2020-04-28T08:49:19Z",
        "updatedAt" : "2020-04-28T08:49:20Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "9011252b-568f-4f2e-aac3-7b50669f8f6b",
        "parentId" : "e10aba99-6230-4b26-9a00-72864f7aff7f",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I see! Well that's a bug I introduced in February 2019 then :+1: Thanks for spotting it! I'll fix it in another PR if that's ok",
        "createdAt" : "2020-04-28T08:59:08Z",
        "updatedAt" : "2020-04-28T08:59:08Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "19b38c32-7bd6-4c26-a1ab-b12b02d2d361",
        "parentId" : "e10aba99-6230-4b26-9a00-72864f7aff7f",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "Fixed in #5487 ",
        "createdAt" : "2020-04-29T17:35:03Z",
        "updatedAt" : "2020-04-29T17:35:03Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "c994093e4b4a2505f8a42f8de6011ff8ee3d7417",
    "line" : 238,
    "diffHunk" : "@@ -1,1 +794,798 @@   const auto exprVarTypes = GetColumnTypes(parsedExpr, tree, ds, customCols);\n\n   TRegexp re(\"[^a-zA-Z0-9_]?return[^a-zA-Z0-9_]\");\n   Ssiz_t matchedLen;\n   const bool hasReturnStmt = re.Index(parsedExpr.fExpr, &matchedLen) != -1;"
  }
]