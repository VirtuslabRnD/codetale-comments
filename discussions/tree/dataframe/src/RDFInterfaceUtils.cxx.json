[
  {
    "id" : "b3e48445-a258-4c33-8b0e-5d8c2cd536a8",
    "prId" : 2872,
    "prUrl" : "https://github.com/root-project/root/pull/2872#pullrequestreview-170158082",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b6b47e78-57ed-4acf-a785-0abced5ce6a6",
        "parentId" : null,
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Given that here we count on 0 being a special ID, perhaps we could add a comment to the GetNextID method which says \"The initial ID is 1 and not 0. 0 has a special value, i.e. it is used ...\"",
        "createdAt" : "2018-10-31T09:25:40Z",
        "updatedAt" : "2018-10-31T09:30:15Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "8abfca8a-4232-482a-bb86-ca6666910028",
        "parentId" : "b6b47e78-57ed-4acf-a785-0abced5ce6a6",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "this pattern is not the nicest...0 is not special, the value there could be anything: if `isCustomColumn == false`, the `customColID` parameter is ignored",
        "createdAt" : "2018-10-31T09:31:43Z",
        "updatedAt" : "2018-10-31T09:31:43Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "b0ce2a95-386b-4b7a-bd58-5666267a4ac7",
        "parentId" : "b6b47e78-57ed-4acf-a785-0abced5ce6a6",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "(mentioned here: https://github.com/root-project/root/pull/2872/files#diff-a65e9e976fff601b600e033d307fa399R184)",
        "createdAt" : "2018-10-31T09:32:45Z",
        "updatedAt" : "2018-10-31T09:32:45Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "c2bd3942e602573655985dabb33656ddbeab97b5",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +496,500 @@      // The map is a const reference, so no operator[]\n      const auto isCustomCol = customCols.HasName(realColName);\n      const auto customColID = isCustomCol ? customCols.GetColumns()[realColName]->GetID() : 0;\n      const auto colTypeName =\n         ColumnName2ColumnTypeName(realColName, namespaceID, tree, ds, isCustomCol, /*vector2rvec=*/true, customColID);"
  },
  {
    "id" : "b4051a04-3cfe-4eea-b14a-b2550038fdea",
    "prId" : 3077,
    "prUrl" : "https://github.com/root-project/root/pull/3077#pullrequestreview-180731560",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0505379d-2e1f-49a8-b9ff-238c5949d0eb",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "At this point I don't think this dance is required anymore: we should just construct a `RDataFrame(chain)` here",
        "createdAt" : "2018-12-03T10:07:01Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "5e9ecb54-d586-47f2-8248-d854be4bc1c9",
        "parentId" : "0505379d-2e1f-49a8-b9ff-238c5949d0eb",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "Of course.",
        "createdAt" : "2018-12-03T12:00:11Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      }
    ],
    "commit" : "56e48526cf732e14583d5f4d68c846a1fc4f6f93",
    "line" : 53,
    "diffHunk" : "@@ -1,1 +84,88 @@   ::TDirectory::TContext ctxt;\n   auto snapshotRDF = std::make_shared<ROOT::RDataFrame>(treeName, fileName, validCols);\n   auto snapshotRDFResPtr = MakeResultPtr(snapshotRDF, loopManager, std::move(actionPtr));\n\n   if (!isLazy) {"
  },
  {
    "id" : "0395309e-3658-48f5-8091-e3ebe49b0ce1",
    "prId" : 3077,
    "prUrl" : "https://github.com/root-project/root/pull/3077#pullrequestreview-180812953",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a0541cb5-9f0c-4591-9481-64a23c0fffbe",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I don't think we need this -- can we just forward-declare `ROOT::IsImplicitMTEnabled` in `RInterface.hxx`?",
        "createdAt" : "2018-12-03T10:18:15Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "5dd8b7eb-667d-436c-aca1-b1395b939e2e",
        "parentId" : "a0541cb5-9f0c-4591-9481-64a23c0fffbe",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "I am not sure here. I think we call `ROOT::IsImplicitMTEnabled()` explicitly.",
        "createdAt" : "2018-12-03T12:10:11Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "a13a0caf-af58-483b-bd25-4e9df67807ca",
        "parentId" : "a0541cb5-9f0c-4591-9481-64a23c0fffbe",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "You can call it as long as you have a declaration for it, you don't need the definition",
        "createdAt" : "2018-12-03T12:37:59Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "d4dc9b3c-4276-4511-8382-256bc0ef449f",
        "parentId" : "a0541cb5-9f0c-4591-9481-64a23c0fffbe",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "it's a template!",
        "createdAt" : "2018-12-03T15:08:05Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "38876e5a-703a-4daf-aa7f-1c0a10dff55c",
        "parentId" : "a0541cb5-9f0c-4591-9481-64a23c0fffbe",
        "authorId" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "body" : "but that would impose an implicit dependency of headers?",
        "createdAt" : "2018-12-03T15:08:50Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "28bf1eea-b1ed-4971-b001-9f6e3a5ec44f",
        "tags" : [
        ]
      },
      {
        "id" : "2874eae3-5d08-4de8-b61a-0647aad0aa33",
        "parentId" : "a0541cb5-9f0c-4591-9481-64a23c0fffbe",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I'm pretty sure you can call `ROOT::IsImplicitMTEnabled` from the template if you just put a forward declaration for it",
        "createdAt" : "2018-12-03T15:10:51Z",
        "updatedAt" : "2018-12-03T15:54:48Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "56e48526cf732e14583d5f4d68c846a1fc4f6f93",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +72,76 @@{\n   return ROOT::IsImplicitMTEnabled();\n}\n\nHeadNode_t CreateSnaphotRDF(const ColumnNames_t &validCols,"
  },
  {
    "id" : "c827753e-66b0-46cb-ac64-56f885f965e3",
    "prId" : 3324,
    "prUrl" : "https://github.com/root-project/root/pull/3324#pullrequestreview-197451995",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "799971b8-6e62-4cd8-ae0a-0534edb17876",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Rcpp?",
        "createdAt" : "2019-01-29T09:33:13Z",
        "updatedAt" : "2019-01-29T09:33:14Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d9db23a7f0e78a25bc4a8bef747b9b8fe2ef987",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +27,31 @@#include <TTree.h>\n\n// pragma to disable warnings on Rcpp which have\n// so many noise compiling\n#if defined(__GNUC__)"
  },
  {
    "id" : "1c0033c5-3b71-4dba-90a7-9ad3e01b916d",
    "prId" : 5329,
    "prUrl" : "https://github.com/root-project/root/pull/5329#pullrequestreview-402889622",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e10aba99-6230-4b26-9a00-72864f7aff7f",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Didn't think about this much. What puzzles me, though, is that you want something that's not something before return, but that's optional. In the end, you don't care if there's anything before `return`.",
        "createdAt" : "2020-04-28T07:27:36Z",
        "updatedAt" : "2020-04-28T08:10:06Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "79e2c4b9-e334-4deb-ad0a-38cf16c923bc",
        "parentId" : "e10aba99-6230-4b26-9a00-72864f7aff7f",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Note that I meant the line the github *doesn't show* here.",
        "createdAt" : "2020-04-28T07:35:07Z",
        "updatedAt" : "2020-04-28T08:10:06Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "25688e3a-c19b-41a3-97da-a38980e63008",
        "parentId" : "e10aba99-6230-4b26-9a00-72864f7aff7f",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "we care if there is something before `return` that _is_ `[a-zA-Z0-9_]`: we don't want to match something like `\"var_return\"`",
        "createdAt" : "2020-04-28T08:03:36Z",
        "updatedAt" : "2020-04-28T08:10:06Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "a4e2a1e5-ac7a-416d-9742-339359c79895",
        "parentId" : "e10aba99-6230-4b26-9a00-72864f7aff7f",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "That's what I meant:\r\n```\r\nTPRegexp re2(\"[^a-zA-Z0-9_]?return\")\r\nroot [4] re2.Match(\"areturn\")\r\n(int) 1\r\n```",
        "createdAt" : "2020-04-28T08:49:19Z",
        "updatedAt" : "2020-04-28T08:49:20Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "9011252b-568f-4f2e-aac3-7b50669f8f6b",
        "parentId" : "e10aba99-6230-4b26-9a00-72864f7aff7f",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I see! Well that's a bug I introduced in February 2019 then :+1: Thanks for spotting it! I'll fix it in another PR if that's ok",
        "createdAt" : "2020-04-28T08:59:08Z",
        "updatedAt" : "2020-04-28T08:59:08Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "19b38c32-7bd6-4c26-a1ab-b12b02d2d361",
        "parentId" : "e10aba99-6230-4b26-9a00-72864f7aff7f",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "Fixed in #5487 ",
        "createdAt" : "2020-04-29T17:35:03Z",
        "updatedAt" : "2020-04-29T17:35:03Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "c994093e4b4a2505f8a42f8de6011ff8ee3d7417",
    "line" : 238,
    "diffHunk" : "@@ -1,1 +794,798 @@   const auto exprVarTypes = GetColumnTypes(parsedExpr, tree, ds, customCols);\n\n   TRegexp re(\"[^a-zA-Z0-9_]?return[^a-zA-Z0-9_]\");\n   Ssiz_t matchedLen;\n   const bool hasReturnStmt = re.Index(parsedExpr.fExpr, &matchedLen) != -1;"
  },
  {
    "id" : "1c92af86-b622-44cf-9df9-fcd2757b6362",
    "prId" : 5487,
    "prUrl" : "https://github.com/root-project/root/pull/5487#pullrequestreview-402602312",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3df86ef-35ea-46d3-9e0d-0130e521f89e",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Viola, fixed. :-)\r\nNot sure if grouping is required here, but will match.",
        "createdAt" : "2020-04-29T12:01:36Z",
        "updatedAt" : "2020-04-29T12:26:27Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "15f8e4d5-8951-4ce4-9ec4-1adddbce7967",
        "parentId" : "d3df86ef-35ea-46d3-9e0d-0130e521f89e",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "it's not grouping, it's the raw string syntax :smile: ",
        "createdAt" : "2020-04-29T12:06:38Z",
        "updatedAt" : "2020-04-29T12:26:27Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bf630f36c1ca8945d3dd41d52d7fc8cf726bd18",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +210,214 @@   R__ASSERT(vars.size() == varTypes.size());\n\n   TPRegexp re(R\"(\\breturn\\b)\");\n   const bool hasReturnStmt = re.Match(expr) == 1;\n"
  },
  {
    "id" : "d136ab69-e05b-470b-908c-cb12857e3431",
    "prId" : 5595,
    "prUrl" : "https://github.com/root-project/root/pull/5595#pullrequestreview-410031332",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f90e2c64-4d22-456b-b71f-af05630e1c63",
        "parentId" : null,
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "`substr(19)` puzzles me. Why is this a fixed number?",
        "createdAt" : "2020-05-12T07:04:14Z",
        "updatedAt" : "2020-05-12T13:18:17Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "856a2a87-874f-45fa-95d7-be4d9afd140a",
        "parentId" : "f90e2c64-4d22-456b-b71f-af05630e1c63",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "it's `std::string(\"CLING_UNKNOWN_TYPE_\").size()`. what would you suggest?",
        "createdAt" : "2020-05-12T07:09:48Z",
        "updatedAt" : "2020-05-12T13:18:17Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "5cd75c57-0b72-4181-a730-59dcd9774632",
        "parentId" : "f90e2c64-4d22-456b-b71f-af05630e1c63",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "Oh, now I see it. Ok, it's safe here.",
        "createdAt" : "2020-05-12T07:43:32Z",
        "updatedAt" : "2020-05-12T13:18:17Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "70f4e5ee-1699-408c-a425-03a98fb8afa8",
        "parentId" : "f90e2c64-4d22-456b-b71f-af05630e1c63",
        "authorId" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "body" : "... unless the string changes at some point. If that might happen, you could do this:\r\n```\r\n      const auto unknownType = \"CLING_UNKNOWN_TYPE\";\r\n      if (rfind(unknownType)...\r\n            + unknownType\r\n```\r\nIt's unlikely, though, that cling type names change, I assume.",
        "createdAt" : "2020-05-12T07:46:51Z",
        "updatedAt" : "2020-05-12T13:18:17Z",
        "lastEditedBy" : "ec1903c5-44e7-4fb1-bee9-25de61836fba",
        "tags" : [
        ]
      },
      {
        "id" : "719ae068-9166-4e99-9710-0fa53d059baa",
        "parentId" : "f90e2c64-4d22-456b-b71f-af05630e1c63",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "`CLING_UNKNOWN_TYPE` is set by RDF itself, so it won't change unless RDF decides it should change. nevertheless I don't like the magic string floating around -- but I don't know of a nicer solution that would not complicate things further. I hope the unit test I added is enough to catch things going out of sync",
        "createdAt" : "2020-05-12T08:00:39Z",
        "updatedAt" : "2020-05-12T13:18:17Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "ef725773-3753-4472-9e1c-f1bbe366780b",
        "parentId" : "f90e2c64-4d22-456b-b71f-af05630e1c63",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "ok _now_ the test will definitely notice if the diagnostic changes :D",
        "createdAt" : "2020-05-12T13:18:56Z",
        "updatedAt" : "2020-05-12T13:18:56Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "f13e51a1a1872a37c508cd4e27794353be8d6ebb",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +737,741 @@      if (colType.rfind(\"CLING_UNKNOWN_TYPE\", 0) == 0) { // the interpreter does not know this type\n         const auto msg =\n            \"The type of custom column \\\"\" + c + \"\\\" (\" + colType.substr(19) +\n            \") is not known to the interpreter, but a just-in-time-compiled \" + context +\n            \" call requires this column. Make sure to create and load ROOT dictionaries for this column's class.\";"
  },
  {
    "id" : "af5fd263-5a9d-4f63-b54f-21642489d885",
    "prId" : 6266,
    "prUrl" : "https://github.com/root-project/root/pull/6266#pullrequestreview-478341171",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fd3fae3c-59a0-4b95-b0c5-f35840669546",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "```suggestion\r\n   const auto type = dt ? dt->GetFullTypeName() : \"\";\r\n```",
        "createdAt" : "2020-08-28T15:32:17Z",
        "updatedAt" : "2020-09-18T07:54:08Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "e616a804-d57b-4a15-a9d4-426ac51394fa",
        "parentId" : "fd3fae3c-59a0-4b95-b0c5-f35840669546",
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "Do we want to return an empty string or just throw an exception? @eguiraud ?",
        "createdAt" : "2020-08-28T15:33:17Z",
        "updatedAt" : "2020-09-18T07:54:08Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "a80d6717-f872-4846-bfca-9bd5b7a5240d",
        "parentId" : "fd3fae3c-59a0-4b95-b0c5-f35840669546",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Indeed if the calling function(s) are assuming success (and/or can not recover from the failure) then an exception might be better.",
        "createdAt" : "2020-08-28T16:41:45Z",
        "updatedAt" : "2020-09-18T07:54:08Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "c58533d8-aea9-480c-ab58-1d7d5346dd48",
        "parentId" : "fd3fae3c-59a0-4b95-b0c5-f35840669546",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "we don't expect this to fail, ever. an assert would be most appropriate",
        "createdAt" : "2020-08-28T17:38:34Z",
        "updatedAt" : "2020-09-18T07:54:08Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "b8956453-499e-4f36-9d41-450bde8fbedf",
        "parentId" : "fd3fae3c-59a0-4b95-b0c5-f35840669546",
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "Assert is in!",
        "createdAt" : "2020-08-31T06:16:40Z",
        "updatedAt" : "2020-09-18T07:54:08Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      }
    ],
    "commit" : "3efb2eab2c6c180045b7a1033f4abee5f5f112fe",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +253,257 @@   const auto dt = gROOT->GetType((lambdaName + \"_ret_t\").c_str());\n   R__ASSERT(dt != nullptr);\n   const auto type = dt->GetFullTypeName();\n   return type;\n}"
  },
  {
    "id" : "0cb523bc-fe90-4ec0-8b99-e7523591aad3",
    "prId" : 7394,
    "prUrl" : "https://github.com/root-project/root/pull/7394#pullrequestreview-608920876",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0ab2d15-3996-4252-a041-cdf89ec831f9",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Is the `} else` warranted?  Or should the code always (try to) insert (also) the name with the alias?",
        "createdAt" : "2021-03-06T00:16:47Z",
        "updatedAt" : "2021-03-10T11:33:20Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "d8f4a1b4-bdac-41f3-8bf8-bec109bf7123",
        "parentId" : "d0ab2d15-3996-4252-a041-cdf89ec831f9",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I think it's warranted, we don't want duplicated entries in the list of branches. If possible, we add the branch with its name -- otherwise (if a branch with that name already exists in the main tree) we add it as `friendname.branchname`.\r\n\r\nBefore this patch, we were only adding the friend branches that had names different from those of branches in the main tree.",
        "createdAt" : "2021-03-10T11:30:51Z",
        "updatedAt" : "2021-03-10T11:33:20Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "0b37415f-7bee-4986-a7c9-649d797e979a",
        "parentId" : "d0ab2d15-3996-4252-a041-cdf89ec831f9",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Yes but ... if the branch is in a friend and has a unique name you will be adding only \"branchname\" .. what happen if the user uses \"friendname.branchname\".",
        "createdAt" : "2021-03-10T16:22:28Z",
        "updatedAt" : "2021-03-10T16:22:28Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "dac02897-8c6e-4261-81f2-c8dab2935e9a",
        "parentId" : "d0ab2d15-3996-4252-a041-cdf89ec831f9",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "ah I understand the misunderstanding now: `GetTopLevelBranchNames` is not used by `RDataFrame` to create the list of valid column names, it's only used by `Snapshot` and `Cache` to create the default list of columns to write out to disk (overridable by passing a list of column names explicitly).",
        "createdAt" : "2021-03-10T16:33:43Z",
        "updatedAt" : "2021-03-10T16:34:03Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "f39b8fa8271baaf3204a00b130d0fc7b2e6a1502",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +311,315 @@         if (bNamesReg.insert(name).second) {\n            bNames.emplace_back(name);\n         } else if (!friendName.empty()) {\n            // If this is a friend and the branch name has already been inserted, it might be because the friend\n            // has a branch with the same name as a branch in the main tree. Let's add it as <friendname>.<branchname>."
  }
]