[
  {
    "id" : "a4d483b0-0073-46a6-a5e8-057e2b19542a",
    "prId" : 6423,
    "prUrl" : "https://github.com/root-project/root/pull/6423#pullrequestreview-496210341",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "852a50e7-f179-4d06-ad92-e24058d59524",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "```suggestion\r\n~~~{.cpp}\r\nROOT::EnableImplicitMT();\r\nROOT::RDataFrame df1(\"tree1\", \"f1.root\");\r\nROOT::RDataFrame df2(\"tree2\", \"f2.root\");\r\nauto histo1 = df1.Histo1D(\"x\");\r\nauto histo2 = df2.Histo1D(\"y\");\r\n\r\n// just accessing result pointers, the event loops of separate RDataFrames run one after the other\r\nhisto1->Draw(); // runs first multi-thread event loop\r\nhisto2->Draw(); // runs second multi-thread event loop\r\n\r\n// with ROOT::RDF::RunGraphs, event loops for separate computation graphs can run concurrently\r\nROOT::RDF::RunGraphs({histo1, histo2});\r\n~~~\r\n```",
        "createdAt" : "2020-09-25T08:22:21Z",
        "updatedAt" : "2020-09-25T08:38:46Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "b6f1aa72b40c9981243859223d4e511525365414",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +868,872 @@auto histo1 = df1.Histo1D(\"x\");\nauto histo2 = df2.Histo1D(\"y\");\n\n// just accessing result pointers, the event loops of separate RDataFrames run one after the other\nhisto1->Draw(); // runs first multi-thread event loop"
  },
  {
    "id" : "d71ac428-d7b0-493d-a281-64a6df76c4a6",
    "prId" : 7388,
    "prUrl" : "https://github.com/root-project/root/pull/7388#pullrequestreview-608438804",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "77cd1813-0777-4389-b0d7-101f3ae1f575",
        "parentId" : null,
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "What means lazy, the user may ask. So why not saying \"This books the filling of the histogram, but does not yet run it.\"",
        "createdAt" : "2021-03-08T10:34:34Z",
        "updatedAt" : "2021-03-10T08:51:03Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "75319b03-b674-4993-a595-58ec48796422",
        "parentId" : "77cd1813-0777-4389-b0d7-101f3ae1f575",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "the line right below mentions the event loop is run there. i can take out the `(lazy)` here but I put it in brackets precisely so it can be ignored by users that don't understand it",
        "createdAt" : "2021-03-10T08:23:32Z",
        "updatedAt" : "2021-03-10T08:51:03Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "05ddb9c4e0aad3b6ed9a5bc7c8ea8d0a3ee74f76",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +31,35 @@ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel\nROOT::RDataFrame d(\"myTree\", \"file_*.root\"); // Interface to TTree and TChain\nauto myHisto = d.Histo1D(\"Branch_A\"); // This books the (lazy) filling of a histogram\nmyHisto->Draw(); // Event loop is run here, upon first access to a result\n~~~"
  },
  {
    "id" : "49172802-41e5-47a5-814c-f92d68ec01c5",
    "prId" : 7388,
    "prUrl" : "https://github.com/root-project/root/pull/7388#pullrequestreview-608455979",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "30003cc1-cff7-4498-a108-741e43fe8b7a",
        "parentId" : null,
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "Why do you prefer the spelled out type? I like the `auto` more, because it suggest less raw pointer magic and more modern C++.",
        "createdAt" : "2021-03-08T10:36:15Z",
        "updatedAt" : "2021-03-10T08:51:03Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "1ca3e6e2-6789-4ec6-a810-e82a2a6b1624",
        "parentId" : "30003cc1-cff7-4498-a108-741e43fe8b7a",
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "In doubt, I would write `auto tree = f.Get<TTree>(\"treeName\");`",
        "createdAt" : "2021-03-08T10:36:50Z",
        "updatedAt" : "2021-03-10T08:51:03Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "ea803772-e7a3-4794-891b-79776fac3ab9",
        "parentId" : "30003cc1-cff7-4498-a108-741e43fe8b7a",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "`auto` here _hides_ the raw pointer. in docs, that's not necessarily a good thing. I want to document exactly what type is returned there for clarity. ",
        "createdAt" : "2021-03-10T08:08:56Z",
        "updatedAt" : "2021-03-10T08:51:03Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "4ce39920-a6be-416c-bcb3-e4b09771341c",
        "parentId" : "30003cc1-cff7-4498-a108-741e43fe8b7a",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "(I also considered using `auto *` but I thought it might throw off users that are not so proficient in C++)",
        "createdAt" : "2021-03-10T08:43:36Z",
        "updatedAt" : "2021-03-10T08:51:03Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "05ddb9c4e0aad3b6ed9a5bc7c8ea8d0a3ee74f76",
    "line" : 99,
    "diffHunk" : "@@ -1,1 +208,212 @@// single file -- all ctors are equivalent\nTFile *f = TFile::Open(\"file.root\");\nTTree *t = f.Get<TTree>(\"treeName\");\n\nRDataFrame d1(\"treeName\", \"file.root\");"
  },
  {
    "id" : "47b964a6-3d7d-4854-bff4-5cf857556236",
    "prId" : 7388,
    "prUrl" : "https://github.com/root-project/root/pull/7388#pullrequestreview-608440078",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0964226-b2cc-4605-b65c-88c737de16a8",
        "parentId" : null,
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "Link `RVec` to the respective doxygen entry!",
        "createdAt" : "2021-03-08T10:40:32Z",
        "updatedAt" : "2021-03-10T08:51:03Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "84e23b0f-0ff4-498a-ac7c-6cd51aabef12",
        "parentId" : "c0964226-b2cc-4605-b65c-88c737de16a8",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "Doxygen should do that automatically",
        "createdAt" : "2021-03-10T08:25:00Z",
        "updatedAt" : "2021-03-10T08:51:03Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "05ddb9c4e0aad3b6ed9a5bc7c8ea8d0a3ee74f76",
    "line" : 201,
    "diffHunk" : "@@ -1,1 +392,396 @@## <a name=\"collections\"></a> Working with collections\n\nRDataFrame reads collections as the special type RVec (e.g. a branch containing an array of floating point numbers can\nbe read as a `RVec<float>`). C-style arrays (with variable or static size), `std::vector`s and most other collection\ntypes can be read this way. When reading ROOT data, column values of type `RVec<T>` perform no copy of the underlying array."
  },
  {
    "id" : "3daf919e-c35f-423d-80c3-83fff32dc157",
    "prId" : 7388,
    "prUrl" : "https://github.com/root-project/root/pull/7388#pullrequestreview-606157676",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "10bc9446-2b9b-49e9-8fec-b85509093463",
        "parentId" : null,
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "Tricky! Typically we use the `good_pts` object as a mask given the result of `pt > 0`. This may clash with other docs?",
        "createdAt" : "2021-03-08T10:42:12Z",
        "updatedAt" : "2021-03-10T08:51:03Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "8ed961cb-7c5f-436f-95c8-771ab2c208ba",
        "parentId" : "10bc9446-2b9b-49e9-8fec-b85509093463",
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "Fair enough, I cannot come up with a better naming.",
        "createdAt" : "2021-03-08T10:42:42Z",
        "updatedAt" : "2021-03-10T08:51:03Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      }
    ],
    "commit" : "05ddb9c4e0aad3b6ed9a5bc7c8ea8d0a3ee74f76",
    "line" : 213,
    "diffHunk" : "@@ -1,1 +404,408 @@~~~{.cpp}\n# h is filled with all the elements of `good_pts`, for each event\nh = df.Define(\"good_pts\", \"pt[pt > 0]\").Histo1D(\"good_pts\")\n~~~\n"
  },
  {
    "id" : "321b6887-c04c-48ea-ae81-64f4640a18a6",
    "prId" : 7553,
    "prUrl" : "https://github.com/root-project/root/pull/7553#pullrequestreview-615109349",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee9bb526-c740-48f8-b674-0e6e3d379272",
        "parentId" : null,
        "authorId" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "body" : "Here you use again the name with the namespace. Is there some doxygen magic, which requires this?",
        "createdAt" : "2021-03-18T08:29:35Z",
        "updatedAt" : "2021-03-18T08:31:50Z",
        "lastEditedBy" : "3fcf578f-7d83-494c-917c-61c04f4fb016",
        "tags" : [
        ]
      },
      {
        "id" : "42201bb2-397b-46e7-9169-d831e677bf63",
        "parentId" : "ee9bb526-c740-48f8-b674-0e6e3d379272",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "yes, see above",
        "createdAt" : "2021-03-18T08:48:47Z",
        "updatedAt" : "2021-03-18T08:48:47Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "5754074e97ed4c59caeb65c12f8ae630eeac666b",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +57,61 @@- [Performance tips and parallel execution](#parallel-execution) -- how to use it and common pitfalls\n- [More features](#more-features)\n- [Class reference](#reference) -- most methods are implemented in the ROOT::RDF::RInterface base class\n\n## <a name=\"cheatsheet\"></a>Cheat sheet"
  },
  {
    "id" : "db81df54-f8a4-48ab-8c5d-a5d9189e1f68",
    "prId" : 8529,
    "prUrl" : "https://github.com/root-project/root/pull/8529#pullrequestreview-696243720",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1b83a454-eedb-4b99-ae69-471033109d01",
        "parentId" : null,
        "authorId" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "body" : "I guess this is already tested elsewhere? The fact that one can refer to a non-ambiguous friend column omitting the friend tree name or not.",
        "createdAt" : "2021-06-30T12:10:33Z",
        "updatedAt" : "2021-06-30T12:10:34Z",
        "lastEditedBy" : "4c541c6e-f658-422b-9f5a-7ae0b2a9a1f5",
        "tags" : [
        ]
      },
      {
        "id" : "4220dd65-b0cd-4b9b-9912-f71db6cc8b10",
        "parentId" : "1b83a454-eedb-4b99-ae69-471033109d01",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "yes `dataframe_friends.cxx` tests it ",
        "createdAt" : "2021-06-30T14:32:39Z",
        "updatedAt" : "2021-06-30T14:32:39Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "30053b5a3a56e026bd215ff8d24427205c20eaf0",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +1007,1011 @@\nColumns coming from the friend trees can be referred to by their full name, like in the example above,\nor the friend tree name can be omitted in case the branch name is not ambiguous (e.g. \"MyCol\" could be used instead of\n      \"myFriend.MyCol\" in the example above).\n"
  }
]