[
  {
    "id" : "60b19479-7093-49f6-a16d-9aa25a9ddf67",
    "prId" : 7918,
    "prUrl" : "https://github.com/root-project/root/pull/7918#pullrequestreview-639677876",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9d3fb2b-c27d-4f7f-8afe-77e20bad6425",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "```suggestion\r\n         return GetLeafTypeName(leaf, leaf->GetFullName());\r\n```",
        "createdAt" : "2021-04-19T18:06:50Z",
        "updatedAt" : "2021-04-19T18:06:50Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "5d4c78ec-6848-40ba-8c1f-91a1a128e34a",
        "parentId" : "d9d3fb2b-c27d-4f7f-8afe-77e20bad6425",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "Thanks, I will change this for all occurrences of `GetLeafTypeName` in another PR",
        "createdAt" : "2021-04-20T08:46:47Z",
        "updatedAt" : "2021-04-20T08:46:47Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b59d2bbe651a3d19fbd220d7364ec1e0afef20e",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +207,211 @@         // RDF and TTreeReader allow referring to branch.leaf as just branch if branch has only one leaf\n         leaf = static_cast<TLeaf *>(branch->GetListOfLeaves()->UncheckedAt(0));\n         return GetLeafTypeName(leaf, colName + '.' + leaf->GetName());\n      }\n   }"
  },
  {
    "id" : "837d7c7c-b5c1-418d-b2c8-92a1a5398927",
    "prId" : 8286,
    "prUrl" : "https://github.com/root-project/root/pull/8286#pullrequestreview-672394113",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6dbf9808-b3a4-4b04-903f-55d964deee0f",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "What about:\r\n```suggestion\r\n   const char *colTypeCStr = leaf->GetTypeName();\r\n   if (!colTypeCStr)\r\n      throw std::runtime_error(\"Could not deduce type of leaf \" + colName);\r\n   std::string colType = colTypeCStr;\r\n```",
        "createdAt" : "2021-05-31T14:00:35Z",
        "updatedAt" : "2021-05-31T14:00:36Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "04493970-188e-4590-9771-7268b3cb04db",
        "parentId" : "6dbf9808-b3a4-4b04-903f-55d964deee0f",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I never realized that with `const char*`s you can check for empty string and null at the same time :D ",
        "createdAt" : "2021-05-31T14:08:24Z",
        "updatedAt" : "2021-05-31T14:08:24Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "8d7b451d-acce-4b57-ab15-d68758dfd77b",
        "parentId" : "6dbf9808-b3a4-4b04-903f-55d964deee0f",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "Oh you can't - then it's `if (!colTypeCStr || !colTypeCStr[0])`\r\n",
        "createdAt" : "2021-05-31T14:44:20Z",
        "updatedAt" : "2021-05-31T14:44:20Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "0c6d3be7-b233-411a-aaf6-dcaa9779c1c2",
        "parentId" : "6dbf9808-b3a4-4b04-903f-55d964deee0f",
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "...and then the difference to your version isn't that noticeable anymore.",
        "createdAt" : "2021-05-31T14:45:29Z",
        "updatedAt" : "2021-05-31T14:45:29Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "dabc9224-00e7-4082-bf36-1b533e405ec3",
        "parentId" : "6dbf9808-b3a4-4b04-903f-55d964deee0f",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "...but it looks like you can?\r\n\r\n```\r\n~ root -l\r\nroot [0] const char* foo = \"\"\r\n(const char *) \"\"\r\nroot [1] bool(foo)\r\n(bool) false\r\nroot [2]\r\n```",
        "createdAt" : "2021-05-31T15:06:50Z",
        "updatedAt" : "2021-05-31T15:06:50Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "a8e14a8a-909d-4faa-8e3a-392c11fde4fa",
        "parentId" : "6dbf9808-b3a4-4b04-903f-55d964deee0f",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "ah no that...doesn't work as I thought",
        "createdAt" : "2021-05-31T15:07:25Z",
        "updatedAt" : "2021-05-31T15:07:25Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "04cbdf797fc9a31fa7f5846be7e16a34adf89b51",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +141,145 @@   std::string colType = colTypeCStr == nullptr ? \"\" : colTypeCStr;\n   if (colType.empty())\n      throw std::runtime_error(\"Could not deduce type of leaf \" + colName);\n   if (leaf->GetLeafCount() != nullptr && leaf->GetLenStatic() == 1) {\n      // this is a variable-sized array"
  }
]