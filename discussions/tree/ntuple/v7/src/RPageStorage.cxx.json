[
  {
    "id" : "4fd1768d-9fd4-4432-8068-3f6f1e634289",
    "prId" : 6825,
    "prUrl" : "https://github.com/root-project/root/pull/6825#pullrequestreview-547306784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5377d722-03cb-4119-ade3-d06b5b68ab80",
        "parentId" : null,
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "Move up to keep alphabetical order of includes",
        "createdAt" : "2020-12-08T14:56:57Z",
        "updatedAt" : "2021-04-29T11:11:52Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8b34228a646a7d71a5a16a435000706a575d2f8",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +26,30 @@#include <ROOT/RStringView.hxx>\n#ifdef R__ENABLE_DAOS\n# include <ROOT/RPageStorageDaos.hxx>\n#endif\n"
  },
  {
    "id" : "c85ca4a7-ac7d-45ee-b817-0505ccdee874",
    "prId" : 7025,
    "prUrl" : "https://github.com/root-project/root/pull/7025#pullrequestreview-574163702",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddd0e06e-41c4-423a-a50e-31f667ed428b",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "A similar feature might be useful for the Unsealing case (to reuse a scratch buffer rather than always reallocate it).",
        "createdAt" : "2021-01-14T18:55:29Z",
        "updatedAt" : "2021-03-22T12:56:10Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "efc9c446-a3e4-4d9b-8e88-1e7c5b7f5c39",
        "parentId" : "ddd0e06e-41c4-423a-a50e-31f667ed428b",
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "That's a good point!  I added a TODO in `UnsealPage()`",
        "createdAt" : "2021-01-22T11:09:35Z",
        "updatedAt" : "2021-03-22T12:56:10Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      }
    ],
    "commit" : "5699a9ec16890bd940cc2d9ea9f653ddc393547a",
    "line" : 59,
    "diffHunk" : "@@ -1,1 +255,259 @@   if ((compressionSetting != 0) || !element.IsMappable()) {\n      zippedBytes = fCompressor->Zip(buffer, packedBytes, fOptions.GetCompression());\n      if (!isAdoptedBuffer)\n         delete[] buffer;\n      buffer = const_cast<unsigned char *>(reinterpret_cast<const unsigned char *>(fCompressor->GetZipBuffer()));"
  }
]