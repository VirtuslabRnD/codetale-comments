[
  {
    "id" : "f5be1563-7ef0-44ae-93f8-7ea1ea866b4b",
    "prId" : 6106,
    "prUrl" : "https://github.com/root-project/root/pull/6106#pullrequestreview-552358605",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d4a405ee-d138-4f35-9177-251a4fad0504",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "`R__LOG_ERROR`, maybe?",
        "createdAt" : "2020-12-15T19:44:42Z",
        "updatedAt" : "2020-12-15T19:54:38Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      }
    ],
    "commit" : "d3ba2aa25fe80be3a3ab4d0c5b404e686ee4978b",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +47,51 @@   }\n   // never here\n   return nullptr;\n}\n"
  },
  {
    "id" : "b865fc70-b09c-498a-8971-a70044f4d2fc",
    "prId" : 6833,
    "prUrl" : "https://github.com/root-project/root/pull/6833#pullrequestreview-545064919",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e44edea5-aca6-4ccf-9453-f75862c41139",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "I am confused.  Didn't we (also) need `GetBitsInMemory` which return `sizeof(underlying_type)`?",
        "createdAt" : "2020-11-18T14:46:00Z",
        "updatedAt" : "2020-11-18T14:46:00Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "e8024d03-641b-4083-b74a-471ef650d955",
        "parentId" : "e44edea5-aca6-4ccf-9453-f75862c41139",
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "The column type only pins down the size on storage for sure. A column element of a certain type can, at least potentially, loaded into differently sized memory slots.  For instance, a 32bit float could be loaded to memory into a page of floats or a page of doubles.  All possible combinations of [on-disk type, memory type] are written out as template specializations of `RColumnElement`",
        "createdAt" : "2020-11-18T20:32:58Z",
        "updatedAt" : "2020-11-18T20:32:59Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      },
      {
        "id" : "381b43d5-a9aa-4e04-a2e9-3e813b6d070e",
        "parentId" : "e44edea5-aca6-4ccf-9453-f75862c41139",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Yes .. but I don't see (yet?) how the code we are talking about (which allocated then destruct a RColumnElement) would leverage any of that  (i.e. do anything but return the default mapping).  What am I missing?",
        "createdAt" : "2020-11-18T20:53:04Z",
        "updatedAt" : "2020-11-18T20:53:05Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "51ffc0d9-09d0-413d-a6f6-4e5427f2eab4",
        "parentId" : "e44edea5-aca6-4ccf-9453-f75862c41139",
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "In [CommitSealedPage](https://github.com/root-project/root/pull/6763/files#diff-311b1306fdf38fbec1f6e0eeb3065c34b411f6d3f6f05614eb75cc02968f2a84R141) we allocate a concrete `RColumnElement` with its default memory mapping (we don't care about the memory mapping) in order to call `GetBitsOnStorage()`.  That can now be replaced by the static `RColumnElementBase::GetBitsOnStorage(EColumnType)`.\r\n\r\nIn order to write the compression frame, we need both the compressed size and the uncompressed size.  The uncompressed size is the packed size of the page, which is (number of elements * bits on storage per element + 7) / 8.",
        "createdAt" : "2020-11-19T08:34:03Z",
        "updatedAt" : "2020-11-19T08:35:22Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      },
      {
        "id" : "1600d5ce-327b-4763-b435-3a9415019c40",
        "parentId" : "e44edea5-aca6-4ccf-9453-f75862c41139",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Ok but I still don't quite understand why it has to be done through code that will code that will essentially do \r\n```\r\nauto x = new X;\r\nauto res = x->GetSomeValue();\r\ndelete x;\r\nreturn res;\r\n```\r\non line RNTupleDescriptorFmt.cxx:118",
        "createdAt" : "2020-12-01T18:23:06Z",
        "updatedAt" : "2020-12-01T18:23:50Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "64fa068c-240e-4000-8b81-c22793f61dc8",
        "parentId" : "e44edea5-aca6-4ccf-9453-f75862c41139",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "I see ... the code (at currently) just need GetBitsOnStorage.",
        "createdAt" : "2020-12-04T15:36:14Z",
        "updatedAt" : "2020-12-04T15:36:15Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "bc931ea04608a4f185459dedd222a2665e7629e6",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +49,53 @@}\n\nstd::size_t ROOT::Experimental::Detail::RColumnElementBase::GetBitsOnStorage(EColumnType type) {\n   switch (type) {\n   case EColumnType::kReal32:"
  }
]