[
  {
    "id" : "0d31b956-be75-4b76-ad1e-9a3d65730093",
    "prId" : 6825,
    "prUrl" : "https://github.com/root-project/root/pull/6825#pullrequestreview-547306784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae63009b-cfcb-468a-8b79-cd0831e9a8a3",
        "parentId" : null,
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "Please explain by comments",
        "createdAt" : "2020-12-31T14:20:08Z",
        "updatedAt" : "2021-04-29T11:11:52Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8b34228a646a7d71a5a16a435000706a575d2f8",
    "line" : 64,
    "diffHunk" : "@@ -1,1 +62,66 @@/// \\brief Some random distribution/attribute key.  TODO: apply recommended schema, i.e.\n/// an OID for each cluster + a dkey for each page. \nstatic constexpr std::uint64_t kDistributionKey = 0x5a3c69f0cafe4a11;\nstatic constexpr std::uint64_t kAttributeKey = 0x4243544b5344422d;\n"
  },
  {
    "id" : "20ee1409-a258-4dda-b9a1-22e3d2ada767",
    "prId" : 6825,
    "prUrl" : "https://github.com/root-project/root/pull/6825#pullrequestreview-547306784",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1f65922-95cf-42c6-8d6d-f24fdba516a2",
        "parentId" : null,
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "Let's add a TODO comment here: the current byte range arithmetic makes little sense for the object store.  We might find out, however, that there are native ways to group clusters in DAOS.",
        "createdAt" : "2020-12-31T14:38:15Z",
        "updatedAt" : "2021-04-29T11:11:52Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8b34228a646a7d71a5a16a435000706a575d2f8",
    "line" : 174,
    "diffHunk" : "@@ -1,1 +172,176 @@// object store. We might find out, however, that there are native ways to group\n// clusters in DAOS.\nROOT::Experimental::RClusterDescriptor::RLocator\nROOT::Experimental::Detail::RPageSinkDaos::CommitClusterImpl(ROOT::Experimental::NTupleSize_t /* nEntries */)\n{"
  },
  {
    "id" : "3726f3a0-ed01-46c0-87ed-8a4d96c400be",
    "prId" : 6825,
    "prUrl" : "https://github.com/root-project/root/pull/6825#pullrequestreview-570748494",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7889bb99-b1b0-43ca-a5b3-32213c65e16b",
        "parentId" : null,
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "We probably don't need a custom allocator but we can simply use the heap page allocator.",
        "createdAt" : "2020-12-31T14:39:38Z",
        "updatedAt" : "2021-04-29T11:11:52Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      },
      {
        "id" : "201fbdd4-3031-4acd-97a2-9b6c5647800e",
        "parentId" : "7889bb99-b1b0-43ca-a5b3-32213c65e16b",
        "authorId" : "99b1a3c3-6269-4bb7-a482-a3f4d80a6b59",
        "body" : "`RPageAllocatorHeap` does not allow to \"adopt\" a buffer (used in line 341).  As discussed during the meeting, leaving it as-is.",
        "createdAt" : "2021-01-18T19:53:10Z",
        "updatedAt" : "2021-04-29T11:11:52Z",
        "lastEditedBy" : "99b1a3c3-6269-4bb7-a482-a3f4d80a6b59",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8b34228a646a7d71a5a16a435000706a575d2f8",
    "line" : 237,
    "diffHunk" : "@@ -1,1 +235,239 @@\n\nROOT::Experimental::Detail::RPage ROOT::Experimental::Detail::RPageAllocatorDaos::NewPage(\n   ColumnId_t columnId, void *mem, std::size_t elementSize, std::size_t nElements)\n{"
  },
  {
    "id" : "19989ea4-c848-4d00-936c-f7a6fcd82836",
    "prId" : 8309,
    "prUrl" : "https://github.com/root-project/root/pull/8309#pullrequestreview-673906413",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "93084520-0c7c-420d-8789-bf8305f39a30",
        "parentId" : null,
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "Wrap in bracelets (because of the multi-line if block).",
        "createdAt" : "2021-06-02T09:03:01Z",
        "updatedAt" : "2021-06-02T09:58:54Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9d04a3752c9db97fae6009be44bec3ac293d6e1",
    "line" : 50,
    "diffHunk" : "@@ -1,1 +323,327 @@   sealedPage.fNElements = pageInfo.fNElements;\n   if (sealedPage.fBuffer) {\n      fDaosContainer->ReadObject({static_cast<decltype(daos_obj_id_t::lo)>(pageInfo.fLocator.fPosition), 0},\n                                 const_cast<void *>(sealedPage.fBuffer), bytesOnStorage,\n                                 kDistributionKey, kAttributeKey);"
  }
]