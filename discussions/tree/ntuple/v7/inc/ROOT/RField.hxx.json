[
  {
    "id" : "5f446158-43cf-4689-87ca-e4e3fa3c7b78",
    "prId" : 4044,
    "prUrl" : "https://github.com/root-project/root/pull/4044#pullrequestreview-270086621",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e628153c-67cc-49d8-9ce0-875c94e0a195",
        "parentId" : null,
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "We should change the mechanics of this class a little: the constructor would take an RField and use it to determine `fLevel`, `fOrder`, and `fNumSiblings`.  These three fields should be private with const getters.  I.e., we would make an immutable object.",
        "createdAt" : "2019-08-02T09:49:41Z",
        "updatedAt" : "2019-08-13T12:26:28Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9c7be28b51949f3903ad6c811029ec9ec1e96d2",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +80,84 @@   bool fIsSimple;\n   /// Describes where the field is located inside the ntuple.\n   struct RLevelInfo {\n   private:\n      /// Tells how deep the field is in the ntuple. Rootfield has fLevel 0, direct subfield of Rootfield has fLevel 1, etc."
  },
  {
    "id" : "353b9024-d16e-4b01-b8dd-c34fd066aee5",
    "prId" : 7902,
    "prUrl" : "https://github.com/root-project/root/pull/7902#pullrequestreview-637864407",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b2000169-005a-4799-b2e9-9bdbcb541289",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "humm ... carefully here ... this is likely to lead to duplicate specialization (if 2 of the typedefs resolved to the same underlying type).",
        "createdAt" : "2021-04-16T15:52:00Z",
        "updatedAt" : "2021-04-26T15:55:46Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "e80430df-436d-47d6-8a8c-be823f2f49ce",
        "parentId" : "b2000169-005a-4799-b2e9-9bdbcb541289",
        "authorId" : "a8c9d8db-0fb8-4803-8857-3254086320bb",
        "body" : "In this case, are we OK by virtue of the guarantee that these are \"signed integer type with width of exactly 8, 16, 32 and 64 bits respectively\"? But it might be a problem for `std::int_fast16_t` \"fastest signed integer type with width of at least 8, 16, 32 and 64 bits respectively\" https://en.cppreference.com/w/cpp/types/integer",
        "createdAt" : "2021-04-16T16:04:49Z",
        "updatedAt" : "2021-04-26T15:55:46Z",
        "lastEditedBy" : "a8c9d8db-0fb8-4803-8857-3254086320bb",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d800413fcaf99b239d0453a28a937d38dfefb9d",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +1003,1007 @@\ntemplate <>\nclass RField<std::int64_t> : public Detail::RFieldBase {\nprotected:\n   std::unique_ptr<Detail::RFieldBase> CloneImpl(std::string_view newName) const final {"
  }
]