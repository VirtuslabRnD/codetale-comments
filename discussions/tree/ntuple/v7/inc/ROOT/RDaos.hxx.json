[
  {
    "id" : "86cb25ac-cce2-4487-8786-f7bd72737769",
    "prId" : 6825,
    "prUrl" : "https://github.com/root-project/root/pull/6825#pullrequestreview-563450467",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3016a08e-3407-4e87-b09a-9faf107551d6",
        "parentId" : null,
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "Seem a little bulky for a header.  Can it go into the translation unit?",
        "createdAt" : "2020-12-31T14:52:22Z",
        "updatedAt" : "2021-04-29T11:11:52Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      },
      {
        "id" : "3d5b72ab-06c6-4909-b926-bb25cbc1626c",
        "parentId" : "3016a08e-3407-4e87-b09a-9faf107551d6",
        "authorId" : "99b1a3c3-6269-4bb7-a482-a3f4d80a6b59",
        "body" : "This relies on template paramenters.  For this (and other declarations), I think I will move from the template definition on the header to the translation unit + explicit instantiation for the `uint64_t` type.",
        "createdAt" : "2021-01-07T12:34:48Z",
        "updatedAt" : "2021-04-29T11:11:52Z",
        "lastEditedBy" : "99b1a3c3-6269-4bb7-a482-a3f4d80a6b59",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8b34228a646a7d71a5a16a435000706a575d2f8",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +66,70 @@  \n   /// \\brief Contains required information for a single fetch/update operation.\n   struct FetchUpdateArgs {\n      FetchUpdateArgs() = default;\n      FetchUpdateArgs(const FetchUpdateArgs&) = delete;"
  },
  {
    "id" : "f9c54722-bd92-41ed-b804-580ff1989689",
    "prId" : 6825,
    "prUrl" : "https://github.com/root-project/root/pull/6825#pullrequestreview-642534458",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "62dff48c-f27d-4b93-8fc4-df58a0169fd7",
        "parentId" : null,
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "Since this class manages a DAOS pool connection, we should delete the copy assignment and constructor.",
        "createdAt" : "2021-03-30T12:49:41Z",
        "updatedAt" : "2021-04-29T11:11:53Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      },
      {
        "id" : "5fef29be-e9af-4b77-ab90-a373169f47f0",
        "parentId" : "62dff48c-f27d-4b93-8fc4-df58a0169fd7",
        "authorId" : "99b1a3c3-6269-4bb7-a482-a3f4d80a6b59",
        "body" : "Fixed.",
        "createdAt" : "2021-04-22T18:18:15Z",
        "updatedAt" : "2021-04-29T11:11:53Z",
        "lastEditedBy" : "99b1a3c3-6269-4bb7-a482-a3f4d80a6b59",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8b34228a646a7d71a5a16a435000706a575d2f8",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +49,53 @@   RDaosPool(const RDaosPool&) = delete;\n   RDaosPool(std::string_view poolUuid, std::string_view serviceReplicas);\n   ~RDaosPool();\n\n   RDaosPool& operator=(const RDaosPool&) = delete;"
  },
  {
    "id" : "08d952a8-e4e4-4038-a863-ed5e861283ad",
    "prId" : 6825,
    "prUrl" : "https://github.com/root-project/root/pull/6825#pullrequestreview-623999151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33f90530-3edc-48f2-beac-26b50c2bbc82",
        "parentId" : null,
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "Does this implicitly delete the assignment operator, too?",
        "createdAt" : "2021-04-08T12:12:27Z",
        "updatedAt" : "2021-04-29T11:11:53Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8b34228a646a7d71a5a16a435000706a575d2f8",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +68,72 @@   struct FetchUpdateArgs {\n      FetchUpdateArgs() = default;\n      FetchUpdateArgs(const FetchUpdateArgs&) = delete;\n      FetchUpdateArgs(FetchUpdateArgs&& fua);\n      FetchUpdateArgs(DistributionKey_t &d, AttributeKey_t &a, std::vector<d_iov_t> &v, daos_event_t *p = nullptr);"
  },
  {
    "id" : "8bc2be88-913b-4086-a9e0-7281d4fbcba3",
    "prId" : 6825,
    "prUrl" : "https://github.com/root-project/root/pull/6825#pullrequestreview-641438170",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1897571c-8b36-4256-8a9d-a7772823d87b",
        "parentId" : null,
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "We need `fDkey` and `fAkey` only to initialize `fDistributionKey` and `fIods`. So let's drop them as members.",
        "createdAt" : "2021-04-08T14:00:58Z",
        "updatedAt" : "2021-04-29T11:11:53Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      },
      {
        "id" : "4bb547ab-0a25-49c3-bffb-294b274d7760",
        "parentId" : "1897571c-8b36-4256-8a9d-a7772823d87b",
        "authorId" : "99b1a3c3-6269-4bb7-a482-a3f4d80a6b59",
        "body" : "Basically, a `daos_key_t` stores a pointer and a length.  These members keep a copy of the user-provided dkey/akey; this avoids any concurrency or lifetime issues.  The same rationale applies for `daos_iod_t`.",
        "createdAt" : "2021-04-21T19:11:57Z",
        "updatedAt" : "2021-04-29T11:11:53Z",
        "lastEditedBy" : "99b1a3c3-6269-4bb7-a482-a3f4d80a6b59",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8b34228a646a7d71a5a16a435000706a575d2f8",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +76,80 @@      /// In order for `fDistributionKey` and `fIods` to point to memory that we own, `fDkey` and\n      /// `fAkey` store a copy of the distribution and attribute key, respectively.\n      DistributionKey_t fDkey{};\n      AttributeKey_t fAkey{};\n"
  },
  {
    "id" : "8264d6fc-cca2-45a9-8615-a828def9add4",
    "prId" : 6825,
    "prUrl" : "https://github.com/root-project/root/pull/6825#pullrequestreview-623999151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "391d8541-54ca-49fe-995d-ba3b6ec74631",
        "parentId" : null,
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "Please document the members",
        "createdAt" : "2021-04-08T14:04:25Z",
        "updatedAt" : "2021-04-29T11:11:53Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8b34228a646a7d71a5a16a435000706a575d2f8",
    "line" : 82,
    "diffHunk" : "@@ -1,1 +80,84 @@\n      /// \\brief The distribution key, as used by the `daos_obj_{fetch,update}` functions.\n      daos_key_t fDistributionKey{};\n      daos_iod_t fIods[1] = {};\n      d_sg_list_t fSgls[1] = {};"
  },
  {
    "id" : "2ee72e2b-b466-4f01-bb94-eb7a9add9c02",
    "prId" : 6825,
    "prUrl" : "https://github.com/root-project/root/pull/6825#pullrequestreview-642559709",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b269a347-42c6-4516-a0ca-5a4a163b5337",
        "parentId" : null,
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "Can't we simply declare a `daos_iod_t fIods` instead of an array of size 1? Same for the next member.",
        "createdAt" : "2021-04-09T17:31:53Z",
        "updatedAt" : "2021-04-29T11:11:53Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      },
      {
        "id" : "97c80d93-4fcc-4b3d-922e-c8a00ab64f6a",
        "parentId" : "b269a347-42c6-4516-a0ca-5a4a163b5337",
        "authorId" : "99b1a3c3-6269-4bb7-a482-a3f4d80a6b59",
        "body" : "OFC, we could do that and pass a pointer to this member to the `daos_obj_fetch()` and `daos_obj_update()` functions.\r\n\r\nThese functions take as argument an array of I/O descriptors (`fIods`) and scatter/gather lists (`fSgls`).  Even if these are currently of size 1, I think we improve code readability preserving the array semantics. ",
        "createdAt" : "2021-04-22T18:48:19Z",
        "updatedAt" : "2021-04-29T11:11:53Z",
        "lastEditedBy" : "99b1a3c3-6269-4bb7-a482-a3f4d80a6b59",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8b34228a646a7d71a5a16a435000706a575d2f8",
    "line" : 83,
    "diffHunk" : "@@ -1,1 +81,85 @@      /// \\brief The distribution key, as used by the `daos_obj_{fetch,update}` functions.\n      daos_key_t fDistributionKey{};\n      daos_iod_t fIods[1] = {};\n      d_sg_list_t fSgls[1] = {};\n      std::vector<d_iov_t> fIovs{};"
  },
  {
    "id" : "398ce71f-0cad-45a0-b634-293fc4d3be0c",
    "prId" : 6825,
    "prUrl" : "https://github.com/root-project/root/pull/6825#pullrequestreview-641431051",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd00051a-3b12-4f20-8d5a-eebfbd8e615b",
        "parentId" : null,
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "We never use the move constructor, are we? If not used, let's drop/delete it.",
        "createdAt" : "2021-04-09T17:34:00Z",
        "updatedAt" : "2021-04-29T11:11:53Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      },
      {
        "id" : "45a46953-b6dc-46b8-aa51-2863bff7df3a",
        "parentId" : "dd00051a-3b12-4f20-8d5a-eebfbd8e615b",
        "authorId" : "99b1a3c3-6269-4bb7-a482-a3f4d80a6b59",
        "body" : "It is used by `std::vector<...>`, if the internal storage needs to be reallocated.  Even if we are calling `std::vector<...>::reserve()` (see the `RDaosContainer::VectorReadWrite()` function), it is not bad to keep it, as it might avoid problems in the future; basically, we need to update the pointers that are kept in the structure.",
        "createdAt" : "2021-04-21T19:02:16Z",
        "updatedAt" : "2021-04-29T11:11:53Z",
        "lastEditedBy" : "99b1a3c3-6269-4bb7-a482-a3f4d80a6b59",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8b34228a646a7d71a5a16a435000706a575d2f8",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +69,73 @@      FetchUpdateArgs() = default;\n      FetchUpdateArgs(const FetchUpdateArgs&) = delete;\n      FetchUpdateArgs(FetchUpdateArgs&& fua);\n      FetchUpdateArgs(DistributionKey_t &d, AttributeKey_t &a, std::vector<d_iov_t> &v, daos_event_t *p = nullptr);\n      FetchUpdateArgs& operator=(const FetchUpdateArgs&) = delete;"
  },
  {
    "id" : "73240ace-b257-4d70-9e5f-773a7e336d7f",
    "prId" : 6825,
    "prUrl" : "https://github.com/root-project/root/pull/6825#pullrequestreview-623999151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74bf0577-f758-4cca-80dc-8d04dccc2c06",
        "parentId" : null,
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "Document the return value.",
        "createdAt" : "2021-04-09T17:46:44Z",
        "updatedAt" : "2021-04-29T11:11:53Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8b34228a646a7d71a5a16a435000706a575d2f8",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +127,131 @@        \\return Number of events still in the queue. This should be 0 on success.\n       */\n      int Poll();\n   };\n"
  },
  {
    "id" : "cd282600-04a7-4c7d-a69c-851109881b75",
    "prId" : 6825,
    "prUrl" : "https://github.com/root-project/root/pull/6825#pullrequestreview-642574281",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fcecd3d-8974-45a2-ab14-ee674601e922",
        "parentId" : null,
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "Same here, let's only use in the constructor.",
        "createdAt" : "2021-04-09T17:53:58Z",
        "updatedAt" : "2021-04-29T11:11:53Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      },
      {
        "id" : "a208dd17-b12d-409c-9189-37032c2e0ef5",
        "parentId" : "4fcecd3d-8974-45a2-ab14-ee674601e922",
        "authorId" : "99b1a3c3-6269-4bb7-a482-a3f4d80a6b59",
        "body" : "Actually, this might be useful if exposed via a getter.  I think we could leave this for a future PR, though.",
        "createdAt" : "2021-04-22T19:06:09Z",
        "updatedAt" : "2021-04-29T11:11:53Z",
        "lastEditedBy" : "99b1a3c3-6269-4bb7-a482-a3f4d80a6b59",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8b34228a646a7d71a5a16a435000706a575d2f8",
    "line" : 133,
    "diffHunk" : "@@ -1,1 +131,135 @@\n   daos_handle_t fContainerHandle{};\n   uuid_t fContainerUuid{};\n   std::shared_ptr<RDaosPool> fPool;\n   /// OID that will be used by the next call to `WriteObject(const void *, std::size_t, DistributionKey_t, AttributeKey_t)`."
  }
]