[
  {
    "id" : "ddad8d48-f6f7-46ac-a4a3-e210645a20f4",
    "prId" : 4044,
    "prUrl" : "https://github.com/root-project/root/pull/4044#pullrequestreview-258415723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03a49198-a674-43b6-b66d-9d1b0ba52a84",
        "parentId" : null,
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "The comment should mention the visitor target, i.e. that we want to visit instances of the `RField` class hierarchy.",
        "createdAt" : "2019-07-08T07:39:43Z",
        "updatedAt" : "2019-08-13T12:26:28Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9c7be28b51949f3903ad6c811029ec9ec1e96d2",
    "line" : 36,
    "diffHunk" : "@@ -1,1 +34,38 @@\\class ROOT::Experimental::Detail::RNTupleVisitor\n\\ingroup NTuple\n\\brief Abstract base class for classes implementing the visitor design pattern.\n     \n RNTupleVisitor::VisitField() is invoked by RFieldBase::AcceptVisitor(). VisitField() is inherited for instance by the RPrintVisitor class. The RFieldBase Class and classes which inherit from it will be visited."
  },
  {
    "id" : "ad6f2c9e-7b4c-4ead-ab09-7615771373f7",
    "prId" : 4044,
    "prUrl" : "https://github.com/root-project/root/pull/4044#pullrequestreview-258415723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e8a15c4-d886-402b-80ff-78ecd84de7c4",
        "parentId" : null,
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "I think the RNTupleVisitor classes themselves belong in the `ROOT::Experimental::Detail` namespace",
        "createdAt" : "2019-07-08T07:41:17Z",
        "updatedAt" : "2019-08-13T12:26:28Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9c7be28b51949f3903ad6c811029ec9ec1e96d2",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +39,43 @@*/\n// clang-format on\nclass RNTupleVisitor {\npublic:\n   virtual void VisitField(const Detail::RFieldBase &field, int level) = 0;"
  },
  {
    "id" : "b48e33cd-e5cc-4d71-9474-4650a30c5df1",
    "prId" : 4044,
    "prUrl" : "https://github.com/root-project/root/pull/4044#pullrequestreview-258415723",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "67ec6428-be57-40ea-9a4e-d4c699aa295e",
        "parentId" : null,
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "Setting `fAvailableSpaceKeyString` could be done in both `SetDeepestLevel` and `SetNumFields`, which avoid the additional method.",
        "createdAt" : "2019-07-09T11:42:54Z",
        "updatedAt" : "2019-08-13T12:26:28Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      }
    ],
    "commit" : "c9c7be28b51949f3903ad6c811029ec9ec1e96d2",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +122,126 @@   // int fAvailableSpaceValueString(num characters on right side between \" : \" and '*')\n   //    The 6 subtracted characters are \"* \" (2) in the beginning,  \" : \" (3) and '*' (1) on the far right.\n   void SetAvailableSpaceForStrings() {\n      fAvailableSpaceKeyString = std::min(4 * fDeepestLevel + 4 + static_cast<int>(std::to_string(fNumFields).size()), fWidth - 15);\n      fAvailableSpaceValueString = fWidth - 6 - fAvailableSpaceKeyString;"
  }
]