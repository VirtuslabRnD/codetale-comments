[
  {
    "id" : "b5c7c342-ca58-437a-958f-764cabdc8c2c",
    "prId" : 6549,
    "prUrl" : "https://github.com/root-project/root/pull/6549#pullrequestreview-501945689",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1562f900-fc78-4d83-8777-7a1c3e196e62",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "would there be any reason to assume that having the `std::vector` re-allocate and then calling `Fill` again might not work?",
        "createdAt" : "2020-10-05T10:43:30Z",
        "updatedAt" : "2020-10-05T11:41:57Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "62010079-03af-4a85-a0f8-5fce23d45221",
        "parentId" : "1562f900-fc78-4d83-8777-7a1c3e196e62",
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "That should work fine",
        "createdAt" : "2020-10-05T11:06:25Z",
        "updatedAt" : "2020-10-05T11:41:57Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      }
    ],
    "commit" : "2bd0cc68d5f43d97d0a01d7d7a3ba3ebd3044141",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +48,52 @@      RNTupleWriter ntuple(std::move(modelWrite),\n         std::make_unique<RPageSinkFile>(\"myNTuple\", fileGuard.GetPath(), RNTupleWriteOptions()));\n      ntuple.Fill();\n   }\n"
  },
  {
    "id" : "da45853a-2955-407f-a6f9-346e024f7a12",
    "prId" : 6549,
    "prUrl" : "https://github.com/root-project/root/pull/6549#pullrequestreview-501969683",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ad4f5ae3-6e94-4f7a-8de5-63c638d0f810",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I don't understand the API here:\r\n\r\n- why do we need the last two lines? Couldn't I read `klassVec.a` using `fieldInner`?\r\n- why does `\"klassVec.a\"`, a float, need `ConnectRecursively` and `\"klassVec\"`, a complex object, is ok with just `Connect`?\r\n\r\nMaybe what I'm missing is what `RFieldFuse` is and does...I could not find docs though.",
        "createdAt" : "2020-10-05T10:51:17Z",
        "updatedAt" : "2020-10-05T11:41:57Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "43168800-ba71-4eba-a27b-f48865b7da7d",
        "parentId" : "ad4f5ae3-6e94-4f7a-8de5-63c638d0f810",
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "Unless `RFieldFuse::Connect` has been called, an `RField` object is dangling and not attached to any concrete storage backend.  The `RFieldFuse::Connect` call binds the columns that back the field to an underlying storage. Doing so recursively means for the field itself and all its subfields.  Here. we don't want to connect the vector of `klassVec` but only the vector of `klassVec.a`. A vector is always an outer field (for the length of the vector) plus a tree of inner fields (for the vector type). In line 64, we could as well use `RFieldFuse::Connect` instead of `RFieldFuse::ConnectRecursively` but only because `klassVec.a` is a simple type with no sub fields.",
        "createdAt" : "2020-10-05T11:41:23Z",
        "updatedAt" : "2020-10-05T11:41:57Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      }
    ],
    "commit" : "2bd0cc68d5f43d97d0a01d7d7a3ba3ebd3044141",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +65,69 @@\n   auto field = std::make_unique<ROOT::Experimental::RVectorField>(\"klassVec\", std::move(fieldInner));\n   RFieldFuse::Connect(idKlassVec, *source, *field);\n\n   auto value = field->GenerateValue();"
  },
  {
    "id" : "b949431f-66a6-4674-a92e-ee5a90879f13",
    "prId" : 6549,
    "prUrl" : "https://github.com/root-project/root/pull/6549#pullrequestreview-501930697",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea21e688-af1c-4c23-8bc0-b2a2067849a3",
        "parentId" : null,
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "```suggestion\r\n   field->DestroyValue(value);\r\n   \r\n   // TODO: test reading of \"klassVec.v1\"\r\n```",
        "createdAt" : "2020-10-05T10:52:23Z",
        "updatedAt" : "2020-10-05T11:41:57Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      }
    ],
    "commit" : "2bd0cc68d5f43d97d0a01d7d7a3ba3ebd3044141",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +72,76 @@   EXPECT_EQ(1U, aVec->size());\n   EXPECT_EQ(42.0, (*aVec)[0]);\n   field->DestroyValue(value);\n   \n   // TODO: test reading of \"klassVec.v1\""
  }
]