[
  {
    "id" : "167b6a43-a3f9-49a7-b49b-1e22baf4fec4",
    "prId" : 959,
    "prUrl" : "https://github.com/root-project/root/pull/959#pullrequestreview-61321151",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2208c9a-0013-4c2f-a3f3-b93d2db7c0ac",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "We should add a unit test that kSupported is indeed the | of all EIOBits.  For that it might make more sense to have kSupported outside of EIOBits.\r\n\r\nSince it is (currently) stored as a char we should also set the storage of EIOBits to be a char (via a enum class).",
        "createdAt" : "2017-09-07T16:31:15Z",
        "updatedAt" : "2017-09-18T14:45:59Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "3980ee82-f068-4101-86b2-26ea02fdb520",
        "parentId" : "e2208c9a-0013-4c2f-a3f3-b93d2db7c0ac",
        "authorId" : "f69dad7b-ed29-4b5b-abf6-8cc0eaed5055",
        "body" : "I'm not sure it's a foregone conclusion that `kSupported` should be `|` of all EIOBits.  Particularly, if there is an experimental feature that we decide to not put into production, we want the ability to define a IOBit but not support it.\r\n\r\nNow, in a future PR when I add an interface in the `ROOT::Experimental` namespace to enable / set IOBits in a basket, we must include a check that the user-requested IOBit is supported.",
        "createdAt" : "2017-09-07T17:42:41Z",
        "updatedAt" : "2017-09-18T14:45:59Z",
        "lastEditedBy" : "f69dad7b-ed29-4b5b-abf6-8cc0eaed5055",
        "tags" : [
        ]
      },
      {
        "id" : "bdc296c1-359d-4877-b4db-a34ad22db177",
        "parentId" : "e2208c9a-0013-4c2f-a3f3-b93d2db7c0ac",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "> Particularly, if there is an experimental feature that we decide to not put into production, we want the ability to define a IOBit but not support it.\r\n\r\nThis can be handled by adding a EObsoleteIOBits.  This has the additional great advantage of documenting for the user too the status of such bits (defined but not supported).",
        "createdAt" : "2017-09-07T17:48:23Z",
        "updatedAt" : "2017-09-18T14:45:59Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "899e807e-9545-40ee-ae2a-a7ae930653c2",
        "parentId" : "e2208c9a-0013-4c2f-a3f3-b93d2db7c0ac",
        "authorId" : "f69dad7b-ed29-4b5b-abf6-8cc0eaed5055",
        "body" : "Done!",
        "createdAt" : "2017-09-07T19:02:35Z",
        "updatedAt" : "2017-09-18T14:45:59Z",
        "lastEditedBy" : "f69dad7b-ed29-4b5b-abf6-8cc0eaed5055",
        "tags" : [
        ]
      }
    ],
    "commit" : "50adf054f2bc8b86752307cd3a1d4cb3c8d59351",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +73,77 @@      // kGenerateOffsetMap = BIT(1),\n      // kBasketClassMap = BIT(2),\n      kSupported = 0\n   };\n   // This enum covers IOBits that are known to this ROOT release but"
  }
]