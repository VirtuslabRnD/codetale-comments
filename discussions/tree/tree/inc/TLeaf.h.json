[
  {
    "id" : "aa1d090e-13f0-42f1-be68-57eb6fc0d1e3",
    "prId" : 1545,
    "prUrl" : "https://github.com/root-project/root/pull/1545#pullrequestreview-90922931",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "11003ccb-a217-4e48-ab3b-c6b8c13760f5",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "See also the documentation for fLen\r\n```\r\nInt_t fLen; ///<  Number of fixed length elements\r\n```\r\nwhich 'compactly' says the same thing (but it does sound too terse).",
        "createdAt" : "2018-01-23T17:08:53Z",
        "updatedAt" : "2018-01-24T08:55:20Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "ea80faba-c346-494a-9a09-5f41d82bb8fe",
        "parentId" : "11003ccb-a217-4e48-ab3b-c6b8c13760f5",
        "authorId" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "body" : "I don't think anyone except you could deduce those four lines of documentation I wrote from \"number of fixed length elements\" ðŸ˜… ",
        "createdAt" : "2018-01-23T17:29:05Z",
        "updatedAt" : "2018-01-24T08:55:20Z",
        "lastEditedBy" : "f2c15ca6-f995-45d3-a26d-40d002e52d07",
        "tags" : [
        ]
      },
      {
        "id" : "340f04dc-70ed-4ec2-9d4d-6c7844e34038",
        "parentId" : "11003ccb-a217-4e48-ab3b-c6b8c13760f5",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "I agree :) ",
        "createdAt" : "2018-01-23T18:02:33Z",
        "updatedAt" : "2018-01-24T08:55:20Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "555ac58782f7f5285e3fb9d54e0c8872314d1e71",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +80,84 @@   /// If the leaf stores an array with 2 or more dimensions, this method returns the total number of elements in the\n   /// dimensions with static length: for example for float[3][2][] it would return 6.\n   virtual Int_t    GetLenStatic() const { return fLen; }\n   virtual Int_t    GetLenType() const { return fLenType; }\n   virtual Int_t    GetMaximum() const { return 0; }"
  }
]