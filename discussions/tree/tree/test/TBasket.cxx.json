[
  {
    "id" : "de0f7879-c189-4ccc-a654-c36a4a93a44d",
    "prId" : 1209,
    "prUrl" : "https://github.com/root-project/root/pull/1209#pullrequestreview-70940862",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d606527-af86-4e2f-b6f6-c8328d77036a",
        "parentId" : null,
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "The compiler is still going to complain that saved_elem is not set (because it does not know about GetEntry).",
        "createdAt" : "2017-10-20T18:32:30Z",
        "updatedAt" : "2017-10-20T18:32:31Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "89c29f4e-756b-4a47-9e81-96196b803b93",
        "parentId" : "4d606527-af86-4e2f-b6f6-c8328d77036a",
        "authorId" : "f69dad7b-ed29-4b5b-abf6-8cc0eaed5055",
        "body" : "The warning was not about uninitialized use, but rather about the compiler being able to prove an ASSERT could not be triggered, right?\r\n\r\nI think that's because, in C++, one can assume the `Int[]` is not-`null`.  However, since we pass the address of `saved_elem` to `SetBranchAddress`, it should back off any uninitialized use error.\r\n\r\nAt least, it does that for me... I don't recall that showing up in the current Jenkins either?",
        "createdAt" : "2017-10-20T19:06:57Z",
        "updatedAt" : "2017-10-20T19:06:57Z",
        "lastEditedBy" : "f69dad7b-ed29-4b5b-abf6-8cc0eaed5055",
        "tags" : [
        ]
      },
      {
        "id" : "c78ef1ec-c40b-4fd4-8d66-b9d2097540b8",
        "parentId" : "4d606527-af86-4e2f-b6f6-c8328d77036a",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Fair enough, it was indeed about the array.",
        "createdAt" : "2017-10-20T19:15:40Z",
        "updatedAt" : "2017-10-20T19:15:40Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a49882e0cc8e7b9e070202846d4e3b41071fe35",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +263,267 @@      saved_t1->GetEntry(idx);\n      Int_t expected_elem = idx % 9;\n      EXPECT_EQ(expected_elem, saved_elem);\n      for (idx2 = 0; idx2 < expected_elem; idx2++) {\n         EXPECT_EQ(saved_sample[idx2], sample[idx2]);"
  }
]