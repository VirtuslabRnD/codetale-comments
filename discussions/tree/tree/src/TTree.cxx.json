[
  {
    "id" : "25ae757b-2aa3-4422-b49d-69adc0ed5679",
    "prId" : 6570,
    "prUrl" : "https://github.com/root-project/root/pull/6570#pullrequestreview-509432608",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c06b527-37b4-4f17-bf63-3887900140cb",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "@pcanal, instead of checking for a `TMemFile` here, would there be a way to check for a file on disk and revert the condition? For example, if `file` is a `TDirectoryFile`. The question is really for which of the classes below it makes sense to call `ChangeFile()`?\r\n```bash\r\n$ git grep -o 'class T.*File.*public T.*File'\r\ndcache/inc/TDCacheFile.h:class TDCacheFile : public TFile\r\ngfal/inc/TGFALFile.h:class TGFALFile : public TFile\r\nio/inc/ROOT/TBufferMerger.hxx:class TBufferMergerFile : public TMemFile\r\nio/inc/TFile.h:class TFile : public TDirectoryFile\r\nio/inc/TMemFile.h:class TMemFile : public TFile\r\nio/inc/TZIPFile.h:class TZIPFile : public TArchiveFile\r\nmpi/inc/TMPIFile.h:class TMPIFile : public TMemFile\r\nsql/inc/TSQLFile.h:class TSQLFile final : public TFile\r\nxml/inc/TXMLFile.h:class TXMLFile final : public TFile\r\n```\r\nI guess that `TMemFile` correctly also catches `TMPIFile` as needing to ignore the call, but it's not clear to me that `TGFALFile` or `TDCacheFile`, for example, would want to make the call.",
        "createdAt" : "2020-10-08T09:15:41Z",
        "updatedAt" : "2020-11-05T10:11:02Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "1d93203f-b5f3-4048-b6af-115e9e6a514b",
        "parentId" : "7c06b527-37b4-4f17-bf63-3887900140cb",
        "authorId" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "body" : "The original issue and the new one described in #6640 are addressed in the PR, if you think the solution should be modified I'm open to discussion :smile: .",
        "createdAt" : "2020-10-15T14:19:51Z",
        "updatedAt" : "2020-11-05T10:11:02Z",
        "lastEditedBy" : "82ce2c80-31ff-4f7b-91f0-fff78777d7f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "f7e7fbbcad5c3920f7ea3328897c982d848d7f85",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +4712,4716 @@            // Changing file clashes with the design of TMemFile and derivates, see #6523.\n            if (!(dynamic_cast<TMemFile *>(file)))\n               ChangeFile(file);\n\n   return nerror == 0 ? nbytes : -1;"
  },
  {
    "id" : "44b1667e-ff7b-4748-80f6-ee54f47d18bc",
    "prId" : 7286,
    "prUrl" : "https://github.com/root-project/root/pull/7286#pullrequestreview-601016611",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "da42f5b6-2bd8-48a0-ac69-b15680c31b70",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "That isn't called in a hot loop; no need for the extra characters and complexity of `R__unlikely`. Or what am I missing?",
        "createdAt" : "2021-03-01T13:46:40Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "cfd9148f-00e6-4154-ae0d-bebda2827faf",
        "parentId" : "da42f5b6-2bd8-48a0-ac69-b15680c31b70",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "That we do know that it is unlikely :)",
        "createdAt" : "2021-03-01T18:00:49Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "42f6af2ad3d5063d76a91b41221663a6f815ac92",
    "line" : 230,
    "diffHunk" : "@@ -1,1 +9615,9619 @@{\n   FlushBasketsImpl();\n   if (R__unlikely(option & kOnlyPrepStep))\n      return 0;\n   return TObject::Write(name, option, bufsize);"
  },
  {
    "id" : "90c2acee-b728-444c-802d-c81a8d561162",
    "prId" : 7286,
    "prUrl" : "https://github.com/root-project/root/pull/7286#pullrequestreview-602310604",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d5e5d31-46de-4db6-ae50-22492070201b",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Isn't zero an error code for `TObject::Write` in general? This might break code checking for the return value of `TTree::Write()`.",
        "createdAt" : "2021-03-01T15:16:31Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "97d9c1d6-3b9d-4a80-96c1-51903a97fc30",
        "parentId" : "6d5e5d31-46de-4db6-ae50-22492070201b",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "The code will (eventually) be migrated from `Write` to `Merge` avoid this odd return value pattern.",
        "createdAt" : "2021-03-02T21:58:12Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "42f6af2ad3d5063d76a91b41221663a6f815ac92",
    "line" : 231,
    "diffHunk" : "@@ -1,1 +9616,9620 @@   FlushBasketsImpl();\n   if (R__unlikely(option & kOnlyPrepStep))\n      return 0;\n   return TObject::Write(name, option, bufsize);\n}"
  }
]