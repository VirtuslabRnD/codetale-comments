[
  {
    "id" : "613af5b0-8366-41b3-8e34-08f41ef9bba6",
    "prId" : 1010,
    "prUrl" : "https://github.com/root-project/root/pull/1010#pullrequestreview-64602495",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "162ecef0-b683-48c4-9712-e3d0726f194a",
        "parentId" : null,
        "authorId" : "f69dad7b-ed29-4b5b-abf6-8cc0eaed5055",
        "body" : "I think this is the source of your speed issues.\r\n\r\nUsing `TThreadExecutor` causes you to have to pre-create all the tasks; the first one isn't executed until all are created.  Use the `TTaskGroup` object and it will schedule the tasks as they are created.",
        "createdAt" : "2017-09-22T14:09:04Z",
        "updatedAt" : "2018-01-27T03:46:49Z",
        "lastEditedBy" : "f69dad7b-ed29-4b5b-abf6-8cc0eaed5055",
        "tags" : [
        ]
      },
      {
        "id" : "6606106a-5fdf-4cab-8205-72330cc7040f",
        "parentId" : "162ecef0-b683-48c4-9712-e3d0726f194a",
        "authorId" : "af9713b5-1cc0-4269-9568-d7b1dcc602c0",
        "body" : "As we discussed earlier, the performance was decremented by another ~3% if I use TTaskGroup.Run here.\r\n\r\nSince I still keep outer TTaskGroup, so there is still ~3% performance drop, but replacing inner TTaskGroup by TThreadExecutor mitigate the slowdown.",
        "createdAt" : "2017-09-22T14:22:27Z",
        "updatedAt" : "2018-01-27T03:46:49Z",
        "lastEditedBy" : "af9713b5-1cc0-4269-9568-d7b1dcc602c0",
        "tags" : [
        ]
      },
      {
        "id" : "b2c33f5a-436c-43a9-907a-f3034347513a",
        "parentId" : "162ecef0-b683-48c4-9712-e3d0726f194a",
        "authorId" : "f69dad7b-ed29-4b5b-abf6-8cc0eaed5055",
        "body" : "Ok - per our discussion at the ROOT IO meeting, let's leave this for now and just focus on the code style cleanups.",
        "createdAt" : "2017-09-22T14:50:49Z",
        "updatedAt" : "2018-01-27T03:46:49Z",
        "lastEditedBy" : "f69dad7b-ed29-4b5b-abf6-8cc0eaed5055",
        "tags" : [
        ]
      }
    ],
    "commit" : "e23141a86ddff841a6c9b1fec16c847d842e0674",
    "line" : 870,
    "diffHunk" : "@@ -1,1 +664,668 @@      }\n      ROOT::TThreadExecutor pool;\n      pool.Foreach(unzipFunction, basketIndices);\n   };\n"
  }
]