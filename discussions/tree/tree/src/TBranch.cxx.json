[
  {
    "id" : "388d005b-f1ae-4869-8deb-c0d0acc3f0f2",
    "prId" : 1822,
    "prUrl" : "https://github.com/root-project/root/pull/1822#pullrequestreview-110707790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6b1065ba-5171-4f47-9add-5d40a77a5f41",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "Please apply proper formatting according to coding conventions. Thanks.",
        "createdAt" : "2018-04-10T06:37:12Z",
        "updatedAt" : "2018-04-10T06:37:20Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      }
    ],
    "commit" : "11a1e1bf21dbe75d56ed6c7e4a0855dc6b20094b",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +1833,1837 @@                i, fBasketEntry[i], fBasketSeek[i], fBasketBytes[i]);\n      }\n   }\n\n   Printf(\"*............................................................................*\");"
  },
  {
    "id" : "546dfa24-5949-4651-87e8-8367060af4d5",
    "prId" : 5721,
    "prUrl" : "https://github.com/root-project/root/pull/5721#pullrequestreview-423724234",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7006a440-2ecb-4f37-ad60-0cc98b2612f5",
        "parentId" : null,
        "authorId" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "body" : "Shouldn't this be `mother->GetFullName()`?",
        "createdAt" : "2020-06-03T16:01:26Z",
        "updatedAt" : "2020-06-08T16:48:04Z",
        "lastEditedBy" : "6cd3c9bc-f261-444d-81ab-c00c917f2197",
        "tags" : [
        ]
      },
      {
        "id" : "4e33580f-61a0-4f7c-8ec6-6f6bf6e97be5",
        "parentId" : "7006a440-2ecb-4f37-ad60-0cc98b2612f5",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "It should not matter.  Since the mother is the top level node (i.e. the ultimate parent) the full name and the name should be identical.",
        "createdAt" : "2020-06-03T16:21:56Z",
        "updatedAt" : "2020-06-08T16:48:04Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "65012106d75c3383e8a5214ad4d952e4fef263a0",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +1890,1894 @@      return fName;\n   }\n   TString motherName(mother->GetName());\n   if (motherName.Length() && (motherName[motherName.Length()-1] == '.')) {\n      return fName;"
  },
  {
    "id" : "70145351-e4dd-4b25-a7ce-70ab14b25f80",
    "prId" : 7286,
    "prUrl" : "https://github.com/root-project/root/pull/7286#pullrequestreview-601131712",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e50782a0-a765-4bbc-bad3-d4725cf84567",
        "parentId" : null,
        "authorId" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "body" : "That breaks any MT guarantee. Can you create a non-const overload that does the caching of `fMother`?",
        "createdAt" : "2021-03-01T13:38:43Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "09b7e073-cbeb-42e8-aa22-8b1468de56ae",
        "tags" : [
        ]
      },
      {
        "id" : "2de4febb-f21a-4ff6-840b-aacf081716e3",
        "parentId" : "e50782a0-a765-4bbc-bad3-d4725cf84567",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "Yes that is a problem.",
        "createdAt" : "2021-03-01T16:34:54Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      },
      {
        "id" : "e15baed6-03e5-4ed4-820f-12d16239697e",
        "parentId" : "e50782a0-a765-4bbc-bad3-d4725cf84567",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "> Can you create a non-const overload that does the caching of fMother?\r\n\r\nI could but it would defy the purpose.  The non-const version would have un-predictable performance (Slow until a non-const call to GetMother in the cases where fMother is not set at construction).  (The const version would be call indirectly from GetBranch)\r\n\r\nI.e. I need to make it thread safe ... \r\n\r\nNot however that the pattern is not new (see a few lines of code below) ... so the bug is pre-existing :(",
        "createdAt" : "2021-03-01T20:21:59Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "42f6af2ad3d5063d76a91b41221663a6f815ac92",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +2052,2056 @@      while(parent) {\n         if (parent->fMother) {\n            const_cast<TBranch*>(this)->fMother = parent->fMother; // We can not yet use the 'mutable' keyword\n            return fMother;\n         }"
  },
  {
    "id" : "c877f112-93a4-4a8c-a65e-5ca43076d782",
    "prId" : 7286,
    "prUrl" : "https://github.com/root-project/root/pull/7286#pullrequestreview-600973389",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e032828-0902-4c09-9b54-81b87d23d005",
        "parentId" : null,
        "authorId" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "body" : "This code is quite confusing. Just so I understand, what is the difference between `fParent` and `fMother` here? And why can't we use 'mutable'?",
        "createdAt" : "2021-03-01T15:06:39Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "a66b5f61-1206-4ddd-b280-befb0005276f",
        "tags" : [
        ]
      },
      {
        "id" : "ca67878d-071d-446d-8fd1-67d0cc409273",
        "parentId" : "3e032828-0902-4c09-9b54-81b87d23d005",
        "authorId" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "body" : "The `only` reason to not use `mutable` is/was to reduce the code churn.  When the (similar) code was written `mutable` was not working properly on all platforms.   It can now be used and the code 'simplified'.\r\n\r\n`fParent` is the immediate parent.\r\n`fMother` is the top level parent (the ultimate parent, one of the top level branches)",
        "createdAt" : "2021-03-01T17:13:49Z",
        "updatedAt" : "2021-03-02T22:50:28Z",
        "lastEditedBy" : "335eabbd-4b70-43fb-a046-bf82995f5dd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "42f6af2ad3d5063d76a91b41221663a6f815ac92",
    "line" : 73,
    "diffHunk" : "@@ -1,1 +2062,2066 @@         parent = parent->fParent;\n      }\n   }\n\n   const TObjArray* array = fTree->GetListOfBranches();"
  }
]