[
  {
    "id" : "ccb3580d-08c3-484a-ae0e-8cb58fc24f53",
    "prId" : 13214,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/13214#pullrequestreview-13683245",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f0699e8-9fb9-4bc7-9074-db75ac72dc6d",
        "parentId" : null,
        "authorId" : "ce6722c6-cf8d-4e9e-b4f2-07d1e2bcb965",
        "body" : "Is there a reason to have this generic interface? I believe this could be merged in to `Field` itself without additional interface.",
        "createdAt" : "2016-12-20T00:58:19Z",
        "updatedAt" : "2016-12-27T22:58:45Z",
        "lastEditedBy" : "ce6722c6-cf8d-4e9e-b4f2-07d1e2bcb965",
        "tags" : [
        ]
      },
      {
        "id" : "05c5132a-8929-458e-b49f-47e32d9f87d7",
        "parentId" : "1f0699e8-9fb9-4bc7-9074-db75ac72dc6d",
        "authorId" : "e237e490-dd66-4177-b766-f510e0ba5cd3",
        "body" : "Different base props, `BaseFieldArrayProps` vs `BaseFieldProps`.\r\n\r\nAre you questioning the need for `GenericField` interface?",
        "createdAt" : "2016-12-20T01:16:38Z",
        "updatedAt" : "2016-12-27T22:58:45Z",
        "lastEditedBy" : "e237e490-dd66-4177-b766-f510e0ba5cd3",
        "tags" : [
        ]
      },
      {
        "id" : "2088007e-67a1-4fda-a122-6b3e663fc3a2",
        "parentId" : "1f0699e8-9fb9-4bc7-9074-db75ac72dc6d",
        "authorId" : "ce6722c6-cf8d-4e9e-b4f2-07d1e2bcb965",
        "body" : "Kind of, I don't really see a case where you need to use `GenericField` alone. It's always used together with `Field` class, isn't it? \r\n\r\nThere was a concept which I gave up on to create `GenericField` interface with properties for `input` or `select` and other interface for custom react components. Unfortunately it had to be defined as union type in `Field` properties so explicit type casting was necessary.",
        "createdAt" : "2016-12-20T01:21:46Z",
        "updatedAt" : "2016-12-27T22:58:45Z",
        "lastEditedBy" : "ce6722c6-cf8d-4e9e-b4f2-07d1e2bcb965",
        "tags" : [
        ]
      },
      {
        "id" : "e714ff5a-2536-4737-b9d0-ba43e589ef65",
        "parentId" : "1f0699e8-9fb9-4bc7-9074-db75ac72dc6d",
        "authorId" : "e237e490-dd66-4177-b766-f510e0ba5cd3",
        "body" : "Here's how I'm using with Material UI components. \r\n```tsx\r\n/**\r\n * A redux-form Field for Material UI's `TextField` component.\r\n */\r\nexport class TextField extends React.Component<__MaterialUI.TextFieldProps & BaseFieldProps & {ref?: React.Ref<TextField>}, {}> {\r\n  render(): JSX.Element {\r\n    const F = Field as new () => GenericField<__MaterialUI.TextFieldProps, AppState>;\r\n\r\n    return <F component={MappedTextField} {...this.props} />;\r\n  }\r\n}\r\n\r\n/**\r\n * Maps the `error` property to the `errorText` property.\r\n */\r\nclass MappedTextField extends React.Component<WrappedFieldProps<any> & __MaterialUI.TextFieldProps, {}> {\r\n  render() {\r\n    const { input, meta, ...props } = this.props;\r\n\r\n    return <Mui.TextField errorText={meta.touched && meta.error ? meta.error : ''} {...input} {...props} />;\r\n  }\r\n}\r\n```\r\n",
        "createdAt" : "2016-12-20T01:28:14Z",
        "updatedAt" : "2016-12-27T22:58:45Z",
        "lastEditedBy" : "e237e490-dd66-4177-b766-f510e0ba5cd3",
        "tags" : [
        ]
      },
      {
        "id" : "eaa97f4d-de65-4231-916e-5e5336a86121",
        "parentId" : "1f0699e8-9fb9-4bc7-9074-db75ac72dc6d",
        "authorId" : "e237e490-dd66-4177-b766-f510e0ba5cd3",
        "body" : "Here's a simpler example for an `input` component.\r\n```tsx\r\nexport class InputField extends React.Component<React.HTMLAttributes<HTMLInputElement>, {}> {\r\n  render() {\r\n    const F = Field as new () => GenericField<React.HTMLAttributes<HTMLInputElement>, AppState>;\r\n\r\n    return <F component='input' {...this.props} />;\r\n  }\r\n}\r\n```",
        "createdAt" : "2016-12-20T02:26:30Z",
        "updatedAt" : "2016-12-27T22:58:45Z",
        "lastEditedBy" : "e237e490-dd66-4177-b766-f510e0ba5cd3",
        "tags" : [
        ]
      }
    ],
    "commit" : "2843da4f6ec1a9a5902c6ff396e6a2e3230918f7",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +53,57 @@ * Declare FieldArray as this interface to specify the generics.\n */\nexport interface GenericFieldArray<T, FieldCustomProps> extends Component<BaseFieldArrayProps & FieldCustomProps, {}> {\n\n    /**"
  }
]