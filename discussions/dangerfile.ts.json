[
  {
    "id" : "0e1089c1-621a-42ec-bcbd-4133a0b540c4",
    "prId" : 44656,
    "prUrl" : "https://github.com/DefinitelyTyped/DefinitelyTyped/pull/44656#pullrequestreview-410128037",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2917d56f-237c-45e5-be26-a48f1e4b6f0c",
        "parentId" : null,
        "authorId" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "body" : "@orta I'm nor familiar with async code in a dangerfile - do I need to hook up a `.catch` on these callbacks, or do I not? Is it fine as-is? Would we prefer an `async` function we call (and then do we need to `.catch` on that)?",
        "createdAt" : "2020-05-12T06:36:29Z",
        "updatedAt" : "2020-05-12T16:10:03Z",
        "lastEditedBy" : "8153deff-5248-4aa9-a800-b98b4fb63ca0",
        "tags" : [
        ]
      },
      {
        "id" : "87e6259e-b2ff-483d-931a-66370e0d9d9d",
        "parentId" : "2917d56f-237c-45e5-be26-a48f1e4b6f0c",
        "authorId" : "40e61ff8-b223-4e7e-8f91-44bc16197019",
        "body" : "Nah, this is fine - Danger's execution path is roughly that when the synchronous evaluation runs, then it hooks into the process exit code to catch all loose promises",
        "createdAt" : "2020-05-12T12:56:28Z",
        "updatedAt" : "2020-05-12T16:10:03Z",
        "lastEditedBy" : "40e61ff8-b223-4e7e-8f91-44bc16197019",
        "tags" : [
        ]
      },
      {
        "id" : "d0b259c0-fa78-48c7-a91a-b3a711532c94",
        "parentId" : "2917d56f-237c-45e5-be26-a48f1e4b6f0c",
        "authorId" : "40e61ff8-b223-4e7e-8f91-44bc16197019",
        "body" : "Oh yeah, the original point was about catching - Danger has a root catch which will fail the build and post a message with the stack along with any existing `markdown` or `fail` etc.\r\n\r\n IMO, this probably shouldn't ever catch (though maybe it could happen if that file was either _very_ big and/or a binary) but it's handled at runtime level either way",
        "createdAt" : "2020-05-12T14:55:21Z",
        "updatedAt" : "2020-05-12T16:10:03Z",
        "lastEditedBy" : "40e61ff8-b223-4e7e-8f91-44bc16197019",
        "tags" : [
        ]
      }
    ],
    "commit" : "d91d798762939fd4ce6b28ac7954fac816531518",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +65,69 @@            fail(\"The root .editorconfig style specifies spaces for whitespace. Please use spaces in new or changed types.\", filename, d.after.split(\"\\n\").findIndex(e => e.indexOf(\"\\t\") > -1) + 1)\n        }\n    })\n}"
  }
]