[
  {
    "id" : "ac3acbdf-1a15-442d-8a27-06d13067f674",
    "prId" : 1339,
    "prUrl" : "https://github.com/digital-asset/daml/pull/1339",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1fb78006-6f88-4396-ab25-180e008fe5cc",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Why is catching and discarding all IOExceptions a good idea here? Would be nice to capture this in a comment.",
        "createdAt" : "2019-05-23T11:22:42Z",
        "updatedAt" : "2019-05-23T14:05:16Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "42160d87-edb7-4bb3-9c1a-c59421a5e280",
        "parentId" : "1fb78006-6f88-4396-ab25-180e008fe5cc",
        "authorId" : null,
        "body" : "I'll add a comment",
        "createdAt" : "2019-05-23T11:34:20Z",
        "updatedAt" : "2019-05-23T14:05:16Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "d3a711ef84155acf0b8e25f398231dd2e4238e28",
    "line" : 112,
    "diffHunk" : "@@ -1,1 +115,119 @@saveToCache :: DamlPath -> CacheKey -> String -> IO ()\nsaveToCache damlPath key value =\n    void . tryIO $ do\n        let dirPath = cacheDirPath damlPath\n            filePath = cacheFilePath damlPath key"
  },
  {
    "id" : "48b76a32-bacd-4f91-ba89-fc314f495b41",
    "prId" : 859,
    "prUrl" : "https://github.com/digital-asset/daml/pull/859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ca81713-1af9-479d-9f3d-52ef27092a38",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Can we not just use System.Time.Extra.Seconds as the type here? I find NominalDiffTime a horrible type to work with...",
        "createdAt" : "2019-05-02T22:21:33Z",
        "updatedAt" : "2019-05-02T23:40:17Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "1815a588-a64f-4849-aadb-da7364491211",
        "parentId" : "1ca81713-1af9-479d-9f3d-52ef27092a38",
        "authorId" : null,
        "body" : ":+1: \r\n",
        "createdAt" : "2019-05-03T07:46:01Z",
        "updatedAt" : "2019-05-03T07:46:01Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "5c41807d4a80a44cc98e35ebd290d509b3a70c58",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +29,33 @@data UpdateCheck\n    = UpdateCheckNever\n    | UpdateCheckEvery CacheTimeout\n    deriving (Show, Eq, Ord)\n"
  },
  {
    "id" : "98d4f912-626b-43cb-a0e8-38a878a1e19a",
    "prId" : 859,
    "prUrl" : "https://github.com/digital-asset/daml/pull/859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b934a959-66ca-44c9-87ea-3b1504029b76",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Generally I like newtypes, but I don't feel this one adds much...",
        "createdAt" : "2019-05-02T22:22:16Z",
        "updatedAt" : "2019-05-02T23:40:17Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "5c41807d4a80a44cc98e35ebd290d509b3a70c58",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +24,28 @@    deriving (Show, Eq, Ord, IsString)\n\nnewtype CacheTimeout = CacheTimeout NominalDiffTime\n    deriving (Show, Eq, Ord, Y.FromJSON)\n"
  },
  {
    "id" : "5738690a-bb53-4b31-95f9-93264771f3e2",
    "prId" : 859,
    "prUrl" : "https://github.com/digital-asset/daml/pull/859",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "336049b0-119e-4ac3-b08e-02bff24d93ce",
        "parentId" : null,
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Is this right? I would have expected their to be an explicit `daml update` command (because it's super handy to say check now regardless), and I would expect if someone set UpdateNever then did `daml update` (or merely had ever been on UpdateCheckEvery beforehand) it would next time return the most recent version it had cached, but not check afresh.",
        "createdAt" : "2019-05-02T22:25:23Z",
        "updatedAt" : "2019-05-02T23:40:17Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "15d8133c-6a22-41ee-b6ee-f9afd9b18d83",
        "parentId" : "336049b0-119e-4ac3-b08e-02bff24d93ce",
        "authorId" : null,
        "body" : "That makes sense. Does `daml update` also install the latest version if it finds a new one?",
        "createdAt" : "2019-05-03T07:47:18Z",
        "updatedAt" : "2019-05-03T07:47:18Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "72f370c7-9ada-41b5-a105-ca6e55636fe3",
        "parentId" : "336049b0-119e-4ac3-b08e-02bff24d93ce",
        "authorId" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "body" : "Maybe? Not sure. Are you doing to suggest `daml install` already does what I want?",
        "createdAt" : "2019-05-03T09:04:26Z",
        "updatedAt" : "2019-05-03T09:04:27Z",
        "lastEditedBy" : "5364da9b-036b-4a1e-b26b-68138cc489f9",
        "tags" : [
        ]
      },
      {
        "id" : "0389a1f7-59a5-4014-94e4-66c7711f5cfb",
        "parentId" : "336049b0-119e-4ac3-b08e-02bff24d93ce",
        "authorId" : null,
        "body" : "`daml install latest --activate` will try to install the latest version of the sdk and assistant, regardless of the `update-check` setting.",
        "createdAt" : "2019-05-03T09:13:27Z",
        "updatedAt" : "2019-05-03T09:13:27Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "5c41807d4a80a44cc98e35ebd290d509b3a70c58",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +45,49 @@        defaultUpdateCheck = UpdateCheckEvery (CacheTimeout 86400)\n    case fromMaybe defaultUpdateCheck updateCheckM of\n        UpdateCheckNever -> pure Nothing\n        UpdateCheckEvery timeout ->\n            cacheWith \"latest-sdk-version\" timeout"
  }
]