[
  {
    "id" : "e23d159b-ab8d-4f9a-ae54-0bf967546db7",
    "prId" : 5632,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5632",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ab39687f-c4c2-4cb5-b06e-59824ff13c58",
        "parentId" : null,
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "In my experience, mutually-exclusive switches either cause an error or operate on a \"last one wins\" principle. Is it worth tweaking this behavior so it follows one of these?",
        "createdAt" : "2020-04-20T13:54:12Z",
        "updatedAt" : "2020-04-20T14:16:28Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      },
      {
        "id" : "8561d45b-7428-4ad1-a422-ce7f81a5e4ad",
        "parentId" : "ab39687f-c4c2-4cb5-b06e-59824ff13c58",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Good point, I copied the way sandbox handles this since it seems to make sense to be consistent here. Also I really miss optparse-applicative now :slightly_smiling_face: ",
        "createdAt" : "2020-04-20T14:16:57Z",
        "updatedAt" : "2020-04-20T14:16:57Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "b16c46f1-9c6f-4521-b42d-ecca42975951",
        "parentId" : "ab39687f-c4c2-4cb5-b06e-59824ff13c58",
        "authorId" : "181bcece-33df-41af-887d-5d5f51beb543",
        "body" : "I miss optparse-applicative in Scala too.",
        "createdAt" : "2020-04-20T14:21:20Z",
        "updatedAt" : "2020-04-20T14:21:20Z",
        "lastEditedBy" : "181bcece-33df-41af-887d-5d5f51beb543",
        "tags" : [
        ]
      }
    ],
    "commit" : "42a4e3bcdf25023c98e4452c8dc45c3453a2d5ad",
    "line" : 9,
    "diffHunk" : "@@ -1,1 +731,735 @@                    , if any (`elem` [\"-s\", \"--static-time\"]) sandboxOpts\n                        then \"--static-time\"\n                        else \"--wall-clock-time\"\n                    , \"--ledger-host\"\n                    , \"localhost\""
  },
  {
    "id" : "3f4b29c9-fdbe-458b-9db2-4cc262b437a3",
    "prId" : 5394,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f3bf0215-1a6f-4d63-9ff9-691c6890c375",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Shouldn’t this say `daml codegen js`. The executable invoked by that seems like an implementation detail.",
        "createdAt" : "2020-04-03T06:32:18Z",
        "updatedAt" : "2020-04-03T06:48:02Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "c763dd33aa767a9fa2e939b30d95300335c1b08b",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +330,334 @@    daml2js <- fmap (</> \"daml2js\" </> \"daml2js\") getSdkPath\n    withProcessWait_' (proc daml2js remainingArgs) (const $ pure ()) `catchIO`\n      (\\e -> hPutStrLn stderr \"Failed to invoke daml2js.\" *> throwIO e)\n\ngetLogbackArg :: FilePath -> IO String"
  },
  {
    "id" : "8b1e696c-233f-4009-9fa2-e605a374390e",
    "prId" : 5152,
    "prUrl" : "https://github.com/digital-asset/daml/pull/5152",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ef45353-6e7e-400f-be93-4b8a6ed60466",
        "parentId" : null,
        "authorId" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "body" : "Didn't know this URL existed, that's cool.",
        "createdAt" : "2020-03-24T17:20:14Z",
        "updatedAt" : "2020-03-24T17:27:27Z",
        "lastEditedBy" : "c1c263c2-6852-4f5d-a507-38300d7a6e98",
        "tags" : [
        ]
      },
      {
        "id" : "59233a6d-159e-4db4-b9f3-0e2212755d54",
        "parentId" : "1ef45353-6e7e-400f-be93-4b8a6ed60466",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It exists for at least every commit, branch and tag.",
        "createdAt" : "2020-03-24T17:29:36Z",
        "updatedAt" : "2020-03-24T17:29:36Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "6d59130e585d20018e3b1d91fc3e82aefaa532aa",
    "line" : 87,
    "diffHunk" : "@@ -1,1 +695,699 @@                 putStrLn $ \"Created a new DAML app in \" <> show targetFolder <> \".\"\n    where\n        url version = \"https://github.com/digital-asset/create-daml-app/archive/v\" <> version <> \".tar.gz\"\n\ndefaultProjectTemplate :: String"
  },
  {
    "id" : "8d53ec39-f8c1-4d5d-8732-5d8b183f751a",
    "prId" : 4799,
    "prUrl" : "https://github.com/digital-asset/daml/pull/4799",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "25e72476-8293-46d4-8ee9-2711458fb1f8",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Is there a reason behind doing that?",
        "createdAt" : "2020-03-04T19:19:51Z",
        "updatedAt" : "2020-03-04T19:55:59Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "771e26bd-1b50-455c-9100-a73e0d1aaf76",
        "parentId" : "25e72476-8293-46d4-8ee9-2711458fb1f8",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Yes. Although I ended up not adding/modifying code here in a material way, the indentation level was found to be inconsistent with the surrounding code so I fixed it.",
        "createdAt" : "2020-03-04T21:15:04Z",
        "updatedAt" : "2020-03-04T21:15:05Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      },
      {
        "id" : "e66e2941-4e18-4681-9899-140343f4c4e1",
        "parentId" : "25e72476-8293-46d4-8ee9-2711458fb1f8",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I'm not a huge fan of such corrections, particularly not in unrelated PRs which are already quite big.",
        "createdAt" : "2020-03-05T00:21:33Z",
        "updatedAt" : "2020-03-05T00:21:33Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "5515f4de-8b12-4e66-8feb-6c7f6b877d6c",
        "parentId" : "25e72476-8293-46d4-8ee9-2711458fb1f8",
        "authorId" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "body" : "Ok",
        "createdAt" : "2020-03-05T00:32:03Z",
        "updatedAt" : "2020-03-05T00:32:03Z",
        "lastEditedBy" : "be70ea6e-6fac-4058-8a37-3814d07afb64",
        "tags" : [
        ]
      }
    ],
    "commit" : "516a9a33965e2db029a67edd5bcf173e1f360b77",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +320,324 @@runDaml2ts :: [String] -> IO ()\nrunDaml2ts remainingArgs = do\n    daml2ts <- fmap (</> \"daml2ts\" </> \"daml2ts\") getSdkPath\n    withProcessWait_' (proc daml2ts remainingArgs) (const $ pure ()) `catchIO`\n      (\\e -> hPutStrLn stderr \"Failed to invoke daml2ts.\" *> throwIO e)"
  },
  {
    "id" : "34ae986a-a0d2-4fc8-bb7f-34924bd9fab5",
    "prId" : 2430,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2430",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5aa1e274-1210-4f08-bd34-0aac52489e64",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Why did you change the format here?",
        "createdAt" : "2019-08-06T15:06:14Z",
        "updatedAt" : "2019-08-06T15:06:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "5d33437f-f4cc-4752-9a4b-e28dc430ad06",
        "parentId" : "5aa1e274-1210-4f08-bd34-0aac52489e64",
        "authorId" : null,
        "body" : "I *think* the json format doesn't work, but I could be wrong. This might have just been the case of fixing the wrong thing by accident, before fixing the right thing.\r\n\r\nBut this format definitely works.",
        "createdAt" : "2019-08-06T15:08:41Z",
        "updatedAt" : "2019-08-06T15:08:41Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "0470db0d-dde5-4008-a214-d7fa5e7c9606",
        "parentId" : "5aa1e274-1210-4f08-bd34-0aac52489e64",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It definitely used to work at some point and iirc that was a feature of the underlying configuration lib so I would be surprised if it has changed. Using a standard format such as JSON does seem nicer than using whatever weird format that scala config lib is using but given that this will go away with #2418, it’s not worth spending any effort trying to figure out what’s going wrong :slightly_smiling_face: ",
        "createdAt" : "2019-08-06T15:10:34Z",
        "updatedAt" : "2019-08-06T15:10:34Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "ac8a17f9-89dc-46ee-833c-9e9865811941",
        "parentId" : "5aa1e274-1210-4f08-bd34-0aac52489e64",
        "authorId" : null,
        "body" : "I agree with everything you ~say~wrote :)",
        "createdAt" : "2019-08-06T15:13:09Z",
        "updatedAt" : "2019-08-06T15:13:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "83bc4b932fa966153b0f5754a96cdc1ecb00c64f",
    "line" : 46,
    "diffHunk" : "@@ -1,1 +820,824 @@  where\n    navigatorConfig :: [PartyDetails] -> T.Text\n    navigatorConfig partyDetails = T.unlines . concat $\n        [ [\"users\", \"  {\"]\n        , [ T.concat"
  },
  {
    "id" : "bbbecfb6-37d2-4604-a44e-67740d5a4687",
    "prId" : 2416,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2416",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb5e0c58-7db7-4b05-87b1-775919e30be4",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Should `runDeploy` call `runLedgerAllocateParty` and `runLedgerUploadDar`? It seems like this has a risk of the two getting slightly out of sync which could get rather confusing.",
        "createdAt" : "2019-08-06T11:28:36Z",
        "updatedAt" : "2019-08-06T11:29:36Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "4b44f474-c9e4-4117-b603-e0254a368e29",
        "parentId" : "eb5e0c58-7db7-4b05-87b1-775919e30be4",
        "authorId" : null,
        "body" : "👍 I'll save that for another PR, because the behavior is already a little bit different wrt allocate parties, and this seems like a good idea.",
        "createdAt" : "2019-08-06T11:41:01Z",
        "updatedAt" : "2019-08-06T11:41:11Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "172becf84237e97507ffe46f870956648ed94aa0",
    "line" : 84,
    "diffHunk" : "@@ -1,1 +699,703 @@runDeploy :: HostAndPortFlags -> IO ()\nrunDeploy flags = do\n    hp <- getHostAndPortDefaults flags\n    putStrLn $ \"Deploying to \" <> show hp\n    parties <- getProjectParties"
  },
  {
    "id" : "41424441-62ba-4954-a12c-38507fa97ce1",
    "prId" : 2384,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8050aeb4-a517-49d0-a4cd-da2235b56d50",
        "parentId" : null,
        "authorId" : null,
        "body" : "ah, ocaml...\r\n\r\nI think the more idiomatic phrasing would be:\r\n\r\n```Haskell\r\npartyM <- Ledger.lookupParty hp name\r\nparty <- flip fromMaybeM partyM $ do\r\n    putStrLn $ \"Allocating party for '\" <> name <> \"' at \" <> show hp\r\n    Ledger.allocateParty hp name\r\n```",
        "createdAt" : "2019-08-02T17:50:28Z",
        "updatedAt" : "2019-08-02T17:50:41Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "1f4a25f7-735a-4046-b46e-b8c625f2c55a",
        "parentId" : "8050aeb4-a517-49d0-a4cd-da2235b56d50",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I wish we had `whenNothing :: Applicative f => Maybe a -> f a -> f a`. @ndmitchell would you accept that for the `extra` package?",
        "createdAt" : "2019-08-05T12:28:19Z",
        "updatedAt" : "2019-08-05T12:37:51Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "b39d237a-1ab1-40fa-a6f5-64a136e419e0",
        "parentId" : "8050aeb4-a517-49d0-a4cd-da2235b56d50",
        "authorId" : "48f08da4-00c5-4c3b-a5f6-153f82b3416a",
        "body" : "concern is that I'd expect whenNothing to be when (isNothing x) ... and this doesn't have that type. flip fromMaybeM seems quite nice here, without inventing any new names. ",
        "createdAt" : "2019-08-05T13:50:20Z",
        "updatedAt" : "2019-08-05T13:50:20Z",
        "lastEditedBy" : "48f08da4-00c5-4c3b-a5f6-153f82b3416a",
        "tags" : [
        ]
      },
      {
        "id" : "b1cb7950-efd7-4c86-a7f4-f891f15ec37e",
        "parentId" : "8050aeb4-a517-49d0-a4cd-da2235b56d50",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Happy to change to Fran's suggestion",
        "createdAt" : "2019-08-05T14:23:53Z",
        "updatedAt" : "2019-08-05T14:23:53Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "69e50e7f-0993-4fe9-8bea-c4650dbf9462",
        "parentId" : "8050aeb4-a517-49d0-a4cd-da2235b56d50",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "depends what you idioms are :)\r\nbut I'll change it",
        "createdAt" : "2019-08-05T14:50:35Z",
        "updatedAt" : "2019-08-05T14:50:35Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8e94fef0071b44e845610dfb85f98680256ad50",
    "line" : 126,
    "diffHunk" : "@@ -1,1 +723,727 @@allocatePartyIfRequired hp name = do\n    party <-\n        Ledger.lookupParty hp name >>= \\case\n        Nothing -> do\n            putStrLn $ \"Allocating party for '\" <> name <> \"' at \" <> show hp"
  },
  {
    "id" : "0efd1fd6-2200-418e-99ce-8c4a80b0b7da",
    "prId" : 2384,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e858d78e-c5a4-46d3-81d5-7a67fb7926e8",
        "parentId" : null,
        "authorId" : null,
        "body" : "The error message seems a bit off, because it might appear if the parties are there but are ill formed, and only the left side of the Either has enough information to disambiguate the issue. I think something like `\"Failed to read list of parties from project config\"` would be better, which also lets the config error's `displayException` explain the error in more detail.",
        "createdAt" : "2019-08-02T17:54:37Z",
        "updatedAt" : "2019-08-02T17:56:03Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "f302b4d3-f91a-4308-9b52-ec8dc64d88e7",
        "parentId" : "e858d78e-c5a4-46d3-81d5-7a67fb7926e8",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "This message was modelled of the exiting message in the code:\r\n```\r\ngetProjectName :: IO String\r\ngetProjectName = do\r\n    projectConfig <- getProjectConfig\r\n    requiredE \"Project must have a name\" $\r\n        queryProjectConfigRequired [\"name\"] projectConfig\r\n```",
        "createdAt" : "2019-08-05T14:25:43Z",
        "updatedAt" : "2019-08-05T14:25:43Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "eba368cf-5961-4b5b-af3f-2c386416f740",
        "parentId" : "e858d78e-c5a4-46d3-81d5-7a67fb7926e8",
        "authorId" : null,
        "body" : "I see. That message has the same problem. Please change it to `\"Failed to read project name from project config\"` or so.",
        "createdAt" : "2019-08-05T14:41:47Z",
        "updatedAt" : "2019-08-05T14:41:47Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "5f822524-6c3c-41e1-87b6-a32bce58cb65",
        "parentId" : "e858d78e-c5a4-46d3-81d5-7a67fb7926e8",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "will fix both messages in next PR",
        "createdAt" : "2019-08-05T14:53:36Z",
        "updatedAt" : "2019-08-05T14:53:36Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "d2565c52-86af-4509-a5af-dbe6551c9670",
        "parentId" : "e858d78e-c5a4-46d3-81d5-7a67fb7926e8",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "@associahedron We could be more DRY here. The config lookup combinators should automate these messages.",
        "createdAt" : "2019-08-05T14:55:01Z",
        "updatedAt" : "2019-08-05T14:55:01Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8e94fef0071b44e845610dfb85f98680256ad50",
    "line" : 143,
    "diffHunk" : "@@ -1,1 +755,759 @@getProjectParties = do\n    projectConfig <- getProjectConfig\n    requiredE \"Project must have parties listed\" $\n        queryProjectConfigRequired [\"parties\"] projectConfig\n"
  },
  {
    "id" : "2366825c-4183-45ba-8bff-7780632e2415",
    "prId" : 2384,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b17459e3-94c1-4b71-ab06-1555facf9047",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Is there a way to do a batch allocation?",
        "createdAt" : "2019-08-05T12:31:42Z",
        "updatedAt" : "2019-08-05T12:37:51Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "70071844-191a-4dff-a0a4-4a591be3fc50",
        "parentId" : "b17459e3-94c1-4b71-ab06-1555facf9047",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "`daml deploy` does batch allocation of everything in the `daml.yaml` config.",
        "createdAt" : "2019-08-05T14:49:18Z",
        "updatedAt" : "2019-08-05T14:49:19Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "9bec7758-c555-403c-9f51-c0b128cde9c6",
        "parentId" : "b17459e3-94c1-4b71-ab06-1555facf9047",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I meant batch allocation over the Ledger API. This looks like we're checking for each individual party if it already exists and allocate it when it doesn't. That's `O(n)` API calls for allocating `n` parties. I'm wondering if there's a way to do it in `O(1)` API calls? (\"No\" is a perfectly fine answer.)",
        "createdAt" : "2019-08-05T14:52:37Z",
        "updatedAt" : "2019-08-05T14:52:38Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "8118e8c9-76b3-44c1-84bc-275ba51cb390",
        "parentId" : "b17459e3-94c1-4b71-ab06-1555facf9047",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "\"No\", the API does not support batch allocation.",
        "createdAt" : "2019-08-05T15:20:12Z",
        "updatedAt" : "2019-08-05T15:20:12Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "def3289e-7e7b-441c-ac00-ba4fa3826eaa",
        "parentId" : "b17459e3-94c1-4b71-ab06-1555facf9047",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Thanks.",
        "createdAt" : "2019-08-05T15:21:46Z",
        "updatedAt" : "2019-08-05T15:21:47Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8e94fef0071b44e845610dfb85f98680256ad50",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +710,714 @@    putStrLn $ \"Deploying to \" <> show hp\n    parties <- getProjectParties\n    mapM_ (allocatePartyIfRequired hp) parties\n    darPath <- getDarPath\n    doBuild"
  },
  {
    "id" : "921ff290-66d9-4d94-8abc-dc62c680b56c",
    "prId" : 2384,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0804980-2b83-49bb-8a2a-9ebe1c0b3af6",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "To me a function called `withX` suggests that it wants a continuation as one of its arguments, most likely the last one. Renaming this to `getX` might be a good idea.",
        "createdAt" : "2019-08-05T12:34:06Z",
        "updatedAt" : "2019-08-05T12:37:51Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "e18bf7d2-b959-4da2-9e16-ba9262684342",
        "parentId" : "d0804980-2b83-49bb-8a2a-9ebe1c0b3af6",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "ok, will do",
        "createdAt" : "2019-08-05T14:55:55Z",
        "updatedAt" : "2019-08-05T14:55:55Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8e94fef0071b44e845610dfb85f98680256ad50",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +683,687 @@data HostAndPortFlags = HostAndPortFlags { hostM :: Maybe String, portM :: Maybe Int }\n\nwithHostAndPortDefaults :: HostAndPortFlags -> IO HostAndPort\nwithHostAndPortDefaults HostAndPortFlags{hostM,portM} = do\n    host <- fromMaybeM getProjectLedgerHost hostM"
  },
  {
    "id" : "55bafc4a-dbad-46d0-9b86-37af5ab79986",
    "prId" : 2384,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63763e63-2a2e-4d37-8e12-716673d08973",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I think\r\n```suggestion\r\n    if null xs then putStrLn \"no parties are known\" else mapM_ print xs\r\n```\r\nand removing the next line is clearer.",
        "createdAt" : "2019-08-05T12:37:33Z",
        "updatedAt" : "2019-08-05T12:37:51Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "cbed0de7-7391-4d92-ba6f-c507943cc25e",
        "parentId" : "63763e63-2a2e-4d37-8e12-716673d08973",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "man, we are getting dangerously close to the bike shed here, but I will do it...",
        "createdAt" : "2019-08-05T14:57:06Z",
        "updatedAt" : "2019-08-05T14:57:06Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8e94fef0071b44e845610dfb85f98680256ad50",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +694,698 @@    putStrLn $ \"Listing parties at \" <> show hp\n    xs <- Ledger.listParties hp\n    when (null xs) $ putStrLn \"no parties are known\"\n    mapM_ print xs\n    exitSuccess"
  }
]