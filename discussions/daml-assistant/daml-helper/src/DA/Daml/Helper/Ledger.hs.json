[
  {
    "id" : "c36d1f70-803b-475c-8023-71353d29f8db",
    "prId" : 9414,
    "prUrl" : "https://github.com/digital-asset/daml/pull/9414",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ea168f05-116e-4398-97d4-08b93951768b",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "I don’t understand why you need to duplicate everything. `daml codegen java --help` works fine. What makes `daml ledger export script` different and forces us to duplicate the CLI parsing?",
        "createdAt" : "2021-04-16T07:26:28Z",
        "updatedAt" : "2021-04-16T09:56:58Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "24e39966-1aa3-449e-b912-bd318b24b56c",
        "parentId" : "ea168f05-116e-4398-97d4-08b93951768b",
        "authorId" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "body" : "That's good pointer, thanks. I had looked at `daml ledger navigator` instead, which has the same problem. `daml codegen java|scala|...` still at least replicates the command parsing, i.e. the `java|scala|...` part. But, it doesn't replicate the flags themselves. I'll look into avoiding the duplication in a follow-up.",
        "createdAt" : "2021-04-16T09:25:06Z",
        "updatedAt" : "2021-04-16T09:56:58Z",
        "lastEditedBy" : "0aa8e877-303a-4005-8f07-7003661da2a6",
        "tags" : [
        ]
      }
    ],
    "commit" : "99c690d85e10c5c021c4e76288c415a7b48b2e2a",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +510,514 @@  }\n\ndata LedgerExportType = LedgerExportScript\n  { acsBatchSize :: Maybe Int\n  , output :: String"
  },
  {
    "id" : "97363bad-84f9-4d79-af31-999fde600254",
    "prId" : 8192,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5a3a8d85-6dfc-45a3-8bc5-369bf1cb3d00",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Have you checked how well this works with large ACS sizes? I know that in the past, sending a large number of commands in one transaction caused issues and you were better off batching them in a few transactions but it’s been a while so maybe it’s fine now.",
        "createdAt" : "2020-12-18T08:14:53Z",
        "updatedAt" : "2020-12-18T15:20:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "6d41b124-04dd-481e-b46f-de83c2e8fb77",
        "parentId" : "5a3a8d85-6dfc-45a3-8bc5-369bf1cb3d00",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "I didn't test. Who could know about the current state? In the context of `daml start` I would suspect the ACS rather small. ",
        "createdAt" : "2020-12-18T11:12:28Z",
        "updatedAt" : "2020-12-18T15:20:15Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "c8e13dfb-da87-42ce-9abc-ea912ef2d598",
        "parentId" : "5a3a8d85-6dfc-45a3-8bc5-369bf1cb3d00",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Maybe @remyhaemmerle-da I think at least the obvious stackoverflows are fixed now. Not sure what other issues are lurking there.",
        "createdAt" : "2020-12-18T11:17:25Z",
        "updatedAt" : "2020-12-18T15:20:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "97aa7d95-008b-43d3-b11e-9268cca0476f",
        "parentId" : "5a3a8d85-6dfc-45a3-8bc5-369bf1cb3d00",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Only the very obvious stackoverflows are fixed, but the compiler still can blow up if the expression it generates are too big. \r\nI am not quite sure about what you trying to achieve here, but I think that in general one should try to make the smallest possible transactions. In other words one should use several commands in a submission only if one needs a atomic commit of those commands. ",
        "createdAt" : "2020-12-18T11:36:42Z",
        "updatedAt" : "2020-12-18T15:20:15Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "95916e67-ddf1-4afc-80d7-488d826dd46d",
        "parentId" : "5a3a8d85-6dfc-45a3-8bc5-369bf1cb3d00",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "one transaction per command is super slow here. I would batch it in batches of 100 or so",
        "createdAt" : "2020-12-18T11:43:48Z",
        "updatedAt" : "2020-12-18T15:20:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "a09bf97d-c152-4f12-97da-23de60c79c4e",
        "parentId" : "5a3a8d85-6dfc-45a3-8bc5-369bf1cb3d00",
        "authorId" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "body" : "Yes it is probably quite slow indeed.",
        "createdAt" : "2020-12-18T11:58:36Z",
        "updatedAt" : "2020-12-18T15:20:15Z",
        "lastEditedBy" : "7e495b20-db12-4c9f-84f9-0c729e38a0c9",
        "tags" : [
        ]
      },
      {
        "id" : "e041546c-7db7-457c-9c29-1e5720df34d1",
        "parentId" : "5a3a8d85-6dfc-45a3-8bc5-369bf1cb3d00",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "ok, we batch them now in chunks of 100.",
        "createdAt" : "2020-12-18T12:18:00Z",
        "updatedAt" : "2020-12-18T15:20:15Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "38a2efbd862c385a0b70440c4bb9bb235a239a77",
    "line" : 121,
    "diffHunk" : "@@ -1,1 +376,380 @@                  L.Commands\n                    { coms =\n                        [ L.ExerciseCommand\n                          { tid = tid\n                          , cid = cid"
  },
  {
    "id" : "8123bf2c-4df3-49f5-90a8-cb07f02b0972",
    "prId" : 8192,
    "prUrl" : "https://github.com/digital-asset/daml/pull/8192",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ac781f7-538c-4563-9e6b-90fd3ae8f31b",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "just an fyi, totally fine if not recommended to keep this out of this PR: multi-party submissions exist in the JSON API now.",
        "createdAt" : "2020-12-18T08:16:45Z",
        "updatedAt" : "2020-12-18T15:20:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "d48cdc33-b8e6-4bbf-8c0f-93a781a31faa",
        "parentId" : "9ac781f7-538c-4563-9e6b-90fd3ae8f31b",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "I'll add this in a follow up PR.",
        "createdAt" : "2020-12-18T11:07:13Z",
        "updatedAt" : "2020-12-18T15:20:15Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "38a2efbd862c385a0b70440c4bb9bb235a239a77",
    "line" : 145,
    "diffHunk" : "@@ -1,1 +400,404 @@              Right () -> pure ()\n    HttpJson ->\n      fail\n        \"The reset command is currently not available for the HTTP JSON API. Please use the gRPC API.\"\n"
  },
  {
    "id" : "ff66c3b5-7d59-43c3-8b74-9b0d0fab393d",
    "prId" : 7885,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7885",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45b5b845-9713-465c-b5d2-84cd577a9f44",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "What is the \"returned status\"?",
        "createdAt" : "2020-11-05T21:22:24Z",
        "updatedAt" : "2020-11-09T14:39:31Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "633992bf-b839-46a0-9ff9-5da25a611322",
        "parentId" : "45b5b845-9713-465c-b5d2-84cd577a9f44",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "The returned status will be reported by the http client itself for example: `daml-helper: user error (Request failed with error code Status {statusCode = 401, statusMessage = \"Unauthorized\"})`",
        "createdAt" : "2020-11-09T13:45:06Z",
        "updatedAt" : "2020-11-09T14:39:31Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "923de1ea-a3b9-4047-b0bc-08b97fd36811",
        "parentId" : "45b5b845-9713-465c-b5d2-84cd577a9f44",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I see. Thanks for the explanation.",
        "createdAt" : "2020-11-09T13:46:56Z",
        "updatedAt" : "2020-11-09T14:39:31Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "e94fa0db3880255cbd2eb3b3367ba90895ae3fe0",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +203,207 @@        if i == 1\n          then Right ()\n          else Left \"An error occured. Please check the returned status.\"\n\nnewtype JsonFlag = JsonFlag { unJsonFlag :: Bool }"
  },
  {
    "id" : "8e5d5e73-ddfb-46b0-87c0-e3e23a75ed45",
    "prId" : 7885,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7885",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c882c42f-df66-4658-ac7f-7acf36b1613d",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "How are the exceptions that could happen here being reported?",
        "createdAt" : "2020-11-05T21:24:27Z",
        "updatedAt" : "2020-11-09T14:39:31Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "1c0b199a-0620-4b50-b76d-4260986b2be5",
        "parentId" : "c882c42f-df66-4658-ac7f-7acf36b1613d",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "The http client will return the returned status code and the status message by the server, which is often not really helpful sadly, but that's all information there is. That's still better than what the gRPC endpoint is doing, which doesn't return anything at all and just fails.",
        "createdAt" : "2020-11-09T14:14:59Z",
        "updatedAt" : "2020-11-09T14:39:31Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "e94fa0db3880255cbd2eb3b3367ba90895ae3fe0",
    "line" : 88,
    "diffHunk" : "@@ -1,1 +304,308 @@          \"GET\"\n          (Path $ unPath \"/v1/packages/\" <> (T.encodeUtf8 $ LF.unPackageId pid))\n          id\n  let mode = LFArchive.DecodeAsMain\n  case LFArchive.decodePackage mode pid bs of"
  },
  {
    "id" : "96d730c9-595f-42c8-b224-a2ccb5da9941",
    "prId" : 7885,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7885",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9a074223-0403-432b-b5f9-1fd3c70143a5",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Calling `fail` is not the most user-friendly way to report errors. I'm absolutely aware that it was like this before but I think we can do better. Let's do that in a separate PR, if you don't mind.",
        "createdAt" : "2020-11-05T21:25:38Z",
        "updatedAt" : "2020-11-09T14:39:31Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "7e6190cd-d37c-4c20-a6f1-083aff64e5ef",
        "parentId" : "9a074223-0403-432b-b5f9-1fd3c70143a5",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "agreed.",
        "createdAt" : "2020-11-09T13:30:11Z",
        "updatedAt" : "2020-11-09T14:39:31Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "e94fa0db3880255cbd2eb3b3367ba90895ae3fe0",
    "line" : 81,
    "diffHunk" : "@@ -1,1 +297,301 @@          mbPkg <- L.getPackage lid $ convPid pid\n          case mbPkg of\n            Nothing -> fail $ \"Unable to download package with identity: \" <> show pid\n            Just (L.Package bs) -> pure bs\n      HttpJson ->"
  },
  {
    "id" : "fceb6c6c-dbcc-47cc-bfe9-c75e5622d707",
    "prId" : 7885,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7885",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1addc590-3f67-4127-82de-3a2912561a38",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "I must admit that passing around functions to modify requests feels a bit strange. But I don't know anything less strange given the design of the HTTP library... 🤷",
        "createdAt" : "2020-11-05T21:32:38Z",
        "updatedAt" : "2020-11-09T14:39:31Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "531ba932-ae24-4547-834a-4f5dcd3f740e",
        "parentId" : "1addc590-3f67-4127-82de-3a2912561a38",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : ":shrug: couldn't come up with something else either...",
        "createdAt" : "2020-11-06T21:21:00Z",
        "updatedAt" : "2020-11-09T14:39:31Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "e94fa0db3880255cbd2eb3b3367ba90895ae3fe0",
    "line" : 154,
    "diffHunk" : "@@ -1,1 +432,436 @@  runHttp httpBS req\n\nmakeRequest :: LedgerArgs -> Method -> Path -> (Request -> Request) -> IO Request\nmakeRequest LedgerArgs {sslConfigM, tokM, port, host} method path modify = do\n  when (isJust sslConfigM) $"
  },
  {
    "id" : "c9aef6d1-52e4-4f36-8e16-f5b9684d19d1",
    "prId" : 7777,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7777",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d45b27c4-7626-47c1-84e0-46debe052315",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "We're calling the `LedgerFlags` constructor without listing the field names somewhere below. That's not the best idea in terms of maintainability. When I tried to suggest naming the arguments, I noticed I'm pretty much defining a default value for `LedgerFlags`. Well, let's do this properly then:\r\n```suggestion\r\n\r\ndefaultLedgerFlags :: LedgerApi -> LedgerFlags\r\ndefaultLedgerFlags api = LedgerFlags\r\n  { fApi = api\r\n  , fSslConfigM = Nothing\r\n  , fTimeout = 10\r\n  , fHostM = Nothing\r\n  , fPortM = Nothing\r\n  , fTokFileM = Nothing\r\n  }\r\n\r\n```",
        "createdAt" : "2020-10-22T13:55:03Z",
        "updatedAt" : "2020-10-22T14:47:03Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      }
    ],
    "commit" : "9beba81036c277a388fcb2d86a847f54a3ae64b8",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +71,75 @@  , fTokFileM :: Maybe FilePath\n  }\n\ndefaultLedgerFlags :: LedgerApi -> LedgerFlags\ndefaultLedgerFlags api = LedgerFlags"
  },
  {
    "id" : "2cbf96b6-dc06-4e8a-9567-baebdda770ee",
    "prId" : 7700,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90f4f692-d00c-4f36-ba53-d5e1d98a230c",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "There are also HTTP APIs with more types like `req`. Maybe worth considering to use one if you care about this.",
        "createdAt" : "2020-10-16T07:26:25Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "492d0177-364b-4c8c-bf2c-78d72b4f7045",
        "parentId" : "90f4f692-d00c-4f36-ba53-d5e1d98a230c",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "@cocreature could you point me to one?",
        "createdAt" : "2020-10-19T16:26:37Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "9e89509a-94d4-4a45-9734-c0698b7815a1",
        "parentId" : "90f4f692-d00c-4f36-ba53-d5e1d98a230c",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "It’s literally called [req](https://hackage.haskell.org/package/req)",
        "createdAt" : "2020-10-19T16:30:31Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "9dde8c8e-da29-4423-8f00-049f25c42519",
        "parentId" : "90f4f692-d00c-4f36-ba53-d5e1d98a230c",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "Ah, was getting your comment wrong. I think for this simple use case using plain http-client-simple should be good enough.",
        "createdAt" : "2020-10-19T17:49:50Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "66b2918f-b82b-486d-a467-fde4299ab088",
        "parentId" : "90f4f692-d00c-4f36-ba53-d5e1d98a230c",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "agreed",
        "createdAt" : "2020-10-19T17:52:11Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8eedbfa7487539c8c7d7f663d13ec5fef4dda3a",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +248,252 @@newtype Path = Path\n  { unPath :: BS.ByteString\n  } deriving IsString\n\n-- | Run a request against the HTTP JSON API."
  },
  {
    "id" : "8c3586a4-bddc-4c32-afd5-250ebec76083",
    "prId" : 7700,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e9113ec5-9f4f-41f0-889d-34d40886885f",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "The logic here only works if the JSON API is hosted at `/` and not a subpath. I believe we have this limitation in other places (e.g., DAML Script) so not a big issue but worth keeping in mind.",
        "createdAt" : "2020-10-16T07:27:26Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "71f2faf1-2a7c-4924-9398-0a26fce15aa0",
        "parentId" : "e9113ec5-9f4f-41f0-889d-34d40886885f",
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Does that work with DABL?",
        "createdAt" : "2020-10-16T07:48:13Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "ec9f385e-1892-480e-b90d-62ad22c4a72f",
        "parentId" : "e9113ec5-9f4f-41f0-889d-34d40886885f",
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Not quite sure where dabl hosts the API but afaik they don’t expose the admin endpoints anyway.",
        "createdAt" : "2020-10-16T10:30:16Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8eedbfa7487539c8c7d7f663d13ec5fef4dda3a",
    "line" : 137,
    "diffHunk" : "@@ -1,1 +260,264 @@    setRequestHost (BSC.pack host) $\n    setRequestMethod (unMethod method) $\n    setRequestPath (unPath path) $\n    setRequestHeader\n      \"authorization\""
  },
  {
    "id" : "ed7ca28e-a38c-400d-a080-bca7d0bef238",
    "prId" : 7700,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a5f2aa70-8b10-451e-9ae5-6eab4885c605",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Do you know why we have this and `LedgerArgs`? That seems a bit redundant. It's also strange that import the compiler here. This is completely unrelated but might need some cleanup in the future. In the meantime, I think it would make sense to add the `api` field also do `LedgerArgs` instead of passing it around individually.",
        "createdAt" : "2020-10-20T16:16:29Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "3457acdf-03f9-4b13-b735-b7f079a7dca2",
        "parentId" : "a5f2aa70-8b10-451e-9ae5-6eab4885c605",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "I think the `LedgerArgs/LedgerFlags` and how the gRPC api is called would need some cleanup, it seems unnecessarily complicated to me.",
        "createdAt" : "2020-10-20T17:06:58Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      },
      {
        "id" : "e6e0fa66-c0a5-44e8-809f-597d5c766ae0",
        "parentId" : "a5f2aa70-8b10-451e-9ae5-6eab4885c605",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "Looking at it, I think the module `Compiler.Fetch` should move to the helper, and the `LedgerArgs` should become `LedgerFlags` or vice versa. I'd rather not add an unused field to `LedgerArgs` and clean this up in the near future.",
        "createdAt" : "2020-10-21T11:48:15Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8eedbfa7487539c8c7d7f663d13ec5fef4dda3a",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +54,58 @@  deriving (Show, Eq)\n\ndata LedgerFlags = LedgerFlags\n  { api :: LedgerApi\n  , hostM :: Maybe String"
  },
  {
    "id" : "d0784d7f-152a-47e0-a9b0-3a7f8a2a894b",
    "prId" : 7700,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7700",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33cd1823-e82e-4f20-8331-872068bab8d8",
        "parentId" : null,
        "authorId" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "body" : "Is there some form of error message we get from the JSON APU we could print here in case of a failure? It might also be better to `putStrLn` all the information we have and call `exitFailure`.",
        "createdAt" : "2020-10-20T16:21:04Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : "695308fb-441d-4069-a1cc-f8c5944daace",
        "tags" : [
        ]
      },
      {
        "id" : "4af06242-3d75-4bc9-8287-a28544d46697",
        "parentId" : "33cd1823-e82e-4f20-8331-872068bab8d8",
        "authorId" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "body" : "We now print the full status containing the error.",
        "createdAt" : "2020-10-21T13:25:06Z",
        "updatedAt" : "2020-10-21T14:02:15Z",
        "lastEditedBy" : "6bbb482c-d598-4c97-ac37-b89d94b27ee4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a8eedbfa7487539c8c7d7f663d13ec5fef4dda3a",
    "line" : 144,
    "diffHunk" : "@@ -1,1 +267,271 @@  let status = getResponseStatus resp\n  unless (statusCode status == 200) $\n    fail $ \"Request failed with error code \" <> show status\n  pure resp\n"
  },
  {
    "id" : "bc4ac028-2d59-4b4d-8200-a4ea3385c172",
    "prId" : 7510,
    "prUrl" : "https://github.com/digital-asset/daml/pull/7510",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "433658d2-8f06-4a07-a156-3cdb56827e78",
        "parentId" : null,
        "authorId" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "body" : "Please use `catch` from `safe-exceptions` or even better `catchIO`. You don’t want to catch asynchronous exceptions here.",
        "createdAt" : "2020-09-29T09:00:11Z",
        "updatedAt" : "2020-09-29T13:45:29Z",
        "lastEditedBy" : "7ddbf119-9fd4-4e95-b47a-aa60f2648372",
        "tags" : [
        ]
      },
      {
        "id" : "63cb8668-eab5-48e2-84e7-df8a018c0d6d",
        "parentId" : "433658d2-8f06-4a07-a156-3cdb56827e78",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "I switch to safe-exceptions.\r\nI couldn't use `catchIO` as this does not catch `GRPCIOTimeout` which is the one I really care about.",
        "createdAt" : "2020-09-29T13:48:19Z",
        "updatedAt" : "2020-09-29T13:48:19Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "aa973cef1f3fd7914d95629eb069b1268c7d93ac",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +137,141 @@    putStrLn $ \"Uploading \" <> darPath <> \" to \" <> show hp\n    bytes <- BS.readFile darPath\n    uploadDarFile hp bytes `catch` \\e -> throw (ExceptionDuringUploadDar e)\n    putStrLn \"DAR upload succeeded.\"\n"
  },
  {
    "id" : "7fa4c4e1-72e7-4a88-adfe-1c86a1c4bccd",
    "prId" : 2384,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "73e83537-6153-4115-abf1-d3ea624a231b",
        "parentId" : null,
        "authorId" : null,
        "body" : "I like the separate module :-) \r\n\r\nI'd also be happy if all of the related logic for running the commands was in this module as well (the `runDeploy`, `runAllocateParty`, `runListParty`, etc). But happy to leave this refactoring for another PR. DamlHelper sure needs it at this point.",
        "createdAt" : "2019-08-02T17:58:24Z",
        "updatedAt" : "2019-08-02T17:58:24Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      }
    ],
    "commit" : "f8e94fef0071b44e845610dfb85f98680256ad50",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +1,5 @@-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.\n-- SPDX-License-Identifier: Apache-2.0\nmodule DA.Daml.Helper.Ledger (\n    HostAndPort(..),\n    listParties, PartyDetails(..), Party(..),"
  },
  {
    "id" : "794d0157-1d9f-4de1-86dd-80e3a76ca60a",
    "prId" : 2384,
    "prUrl" : "https://github.com/digital-asset/daml/pull/2384",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c19394c6-debe-45a2-a58c-06b8851a0f8c",
        "parentId" : null,
        "authorId" : "3f440120-2bad-475a-a8b1-88aa44a32388",
        "body" : "Yes we should set the party name as a hint. Sandbox can take it as is and in Canton we would get more readable party ids.",
        "createdAt" : "2019-08-05T09:46:35Z",
        "updatedAt" : "2019-08-05T09:46:36Z",
        "lastEditedBy" : "3f440120-2bad-475a-a8b1-88aa44a32388",
        "tags" : [
        ]
      },
      {
        "id" : "7bdf4933-671a-40ac-930f-9eb05191789a",
        "parentId" : "c19394c6-debe-45a2-a58c-06b8851a0f8c",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "Why do we even care that party names are readable?",
        "createdAt" : "2019-08-05T12:14:13Z",
        "updatedAt" : "2019-08-05T12:14:14Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      },
      {
        "id" : "16141e45-a43d-45e2-af04-3f3a7fece569",
        "parentId" : "c19394c6-debe-45a2-a58c-06b8851a0f8c",
        "authorId" : "3f440120-2bad-475a-a8b1-88aa44a32388",
        "body" : "It makes debugging easier if the party ids are readable to some degree. I'd appreciate if we set the hint based on the name.",
        "createdAt" : "2019-08-05T12:47:29Z",
        "updatedAt" : "2019-08-05T12:47:29Z",
        "lastEditedBy" : "3f440120-2bad-475a-a8b1-88aa44a32388",
        "tags" : [
        ]
      },
      {
        "id" : "7a06904b-6286-4ccf-8b31-9b38033ed010",
        "parentId" : "c19394c6-debe-45a2-a58c-06b8851a0f8c",
        "authorId" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "body" : "done.. next PR",
        "createdAt" : "2019-08-05T14:51:44Z",
        "updatedAt" : "2019-08-05T14:51:44Z",
        "lastEditedBy" : "43409235-97e4-48dc-9ec7-403ee0a7de54",
        "tags" : [
        ]
      }
    ],
    "commit" : "f8e94fef0071b44e845610dfb85f98680256ad50",
    "line" : 37,
    "diffHunk" : "@@ -1,1 +35,39 @@    let text = Text.pack name\n    let request = L.AllocatePartyRequest\n            { partyIdHint = \"\" -- text -- ???\n            , displayName = text }\n    PartyDetails{party} <- L.allocateParty request"
  }
]