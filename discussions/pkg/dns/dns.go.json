[
  {
    "id" : "76f77f9b-beca-43c3-8fd0-c000c5d6cb2c",
    "prId" : 36013,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36013#pullrequestreview-7084607",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b79859d0-cf2d-449e-a1d1-9d2b70da272f",
        "parentId" : null,
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "I guess it also make sense to make it identical to the function name as it is V4?\n",
        "createdAt" : "2016-11-03T00:12:10Z",
        "updatedAt" : "2016-11-03T19:38:25Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      },
      {
        "id" : "c065c99c-4734-4d7c-9586-1ed7bb6cda23",
        "parentId" : "b79859d0-cf2d-449e-a1d1-9d2b70da272f",
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "it is the same?\n",
        "createdAt" : "2016-11-03T19:25:03Z",
        "updatedAt" : "2016-11-03T19:38:25Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      }
    ],
    "commit" : "d9557d4eaff96b59a59d45e019decfc1d6789007",
    "line" : 354,
    "diffHunk" : "@@ -1,1 +608,612 @@\t}\n\n\tglog.V(4).Infof(\"getRecordsForPath retval=%+v, path=%v\", retval, path)\n\n\treturn retval, nil"
  },
  {
    "id" : "ed5ba833-8fe0-4459-8eb6-29f2bfc7ced1",
    "prId" : 35449,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35449#pullrequestreview-5501214",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0e407d6-5b95-48ce-910b-2bad1cf75e18",
        "parentId" : null,
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "why select if there is only one case?\n",
        "createdAt" : "2016-10-24T17:34:11Z",
        "updatedAt" : "2016-12-07T04:55:16Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      },
      {
        "id" : "f1dc7af3-639e-4e78-928a-95acdd788f74",
        "parentId" : "d0e407d6-5b95-48ce-910b-2bad1cf75e18",
        "authorId" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "body" : "Removed.\n",
        "createdAt" : "2016-10-24T17:46:51Z",
        "updatedAt" : "2016-12-07T04:55:16Z",
        "lastEditedBy" : "26bd3fa6-ac8d-4cb0-b746-a30dc1dc2931",
        "tags" : [
        ]
      }
    ],
    "commit" : "19cf8310866291edb2f0a77fe541e7ad8e936837",
    "line" : null,
    "diffHunk" : "@@ -1,1 +165,169 @@\tdefer ticker.Stop()\n\tfor {\n\t\tselect {\n\t\tcase <-timeout:\n\t\t\tglog.Fatalf(\"Timeout waiting for initialization\")"
  },
  {
    "id" : "e98e229e-e7f8-4de9-aaf2-d6749030bb8a",
    "prId" : 35246,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35246#pullrequestreview-5318394",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "75d35cff-7ab1-451a-993a-e1994c27ea4a",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "alias this import to dnsutil or something? we already have too many utils \n",
        "createdAt" : "2016-10-21T00:45:34Z",
        "updatedAt" : "2016-10-21T00:57:53Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "343c4cfb-e19e-4509-8759-3f74ca7259bf",
        "parentId" : "75d35cff-7ab1-451a-993a-e1994c27ea4a",
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "go compiler will flag if there is a name conflict, I would prefer to not explicitly name unless it is required.\n",
        "createdAt" : "2016-10-21T20:53:41Z",
        "updatedAt" : "2016-10-21T20:53:41Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      },
      {
        "id" : "c8255dc1-de5a-4968-a2dc-f454f3be60e0",
        "parentId" : "75d35cff-7ab1-451a-993a-e1994c27ea4a",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "improves readability, I'd prefer to know which of the 26 util.gos this ends up in at a glance, but eitherway is fine\n",
        "createdAt" : "2016-10-21T20:57:26Z",
        "updatedAt" : "2016-10-21T20:57:26Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "28cd4c58e3a3a12e07661b05bbe4482118bdfe49",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +33,37 @@\tkcache \"k8s.io/kubernetes/pkg/client/cache\"\n\tclientset \"k8s.io/kubernetes/pkg/client/clientset_generated/internalclientset\"\n\t\"k8s.io/kubernetes/pkg/dns/util\"\n\t\"k8s.io/kubernetes/pkg/runtime\"\n\t\"k8s.io/kubernetes/pkg/util/validation\""
  },
  {
    "id" : "de500e88-37ee-4647-95c3-0b4be518500e",
    "prId" : 35246,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35246#pullrequestreview-5202083",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8186206-6e67-4aa8-89d1-da30bfef2028",
        "parentId" : null,
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Spammy debug lines should be V(4). Maybe kubedns is not thorough with log levels anyway so it might be ok. As long as it doesn't show up in a productio cluster on every normal request.\n",
        "createdAt" : "2016-10-21T00:47:54Z",
        "updatedAt" : "2016-10-21T00:57:53Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "ab1922d9-b8ed-4025-9de8-6621f9f147f5",
        "parentId" : "a8186206-6e67-4aa8-89d1-da30bfef2028",
        "authorId" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "body" : "I'm fixing these in a dedicated commit for logging...\n",
        "createdAt" : "2016-10-21T05:53:39Z",
        "updatedAt" : "2016-10-21T05:53:39Z",
        "lastEditedBy" : "b714f738-aa05-4f49-a624-eaaf3e0cbb70",
        "tags" : [
        ]
      }
    ],
    "commit" : "28cd4c58e3a3a12e07661b05bbe4482118bdfe49",
    "line" : 178,
    "diffHunk" : "@@ -1,1 +525,529 @@\t\t\tname = name + \".\"\n\t\t}\n\t\tglog.V(2).Infof(\"federation service query: Returning CNAME for local service : %s\", name)\n\t\treturn []skymsg.Service{{Host: name}}, nil\n\t}"
  },
  {
    "id" : "3274c08c-a040-4bfa-8c6c-4200e870e1ec",
    "prId" : 27960,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eb6a551b-1ef8-4503-8c3c-568ecee71354",
        "parentId" : null,
        "authorId" : null,
        "body" : "Two notes on this:\n1. A cluster can exist in more than 1 zone.\n2. The code to find all zones and the region already exists in https://github.com/kubernetes/kubernetes/blob/master/federation/pkg/federation-controller/service/dns.go#L79  .  It's not currently in a form where you can call it directly here, but we should refactor it so that you can (in a followup, non v1.3 PR).\n\nHappy to leave as is for this PR.\n",
        "createdAt" : "2016-06-23T19:03:00Z",
        "updatedAt" : "2016-06-23T19:33:56Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "d23dd918-e01e-4b46-9b67-be4660add3a2",
        "parentId" : "eb6a551b-1ef8-4503-8c3c-568ecee71354",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "For some additional context and clarification, the actual code that fetches the zones and regions is here - https://github.com/kubernetes/kubernetes/blob/master/federation/pkg/federation-controller/cluster/cluster_client.go#L143. It is doing the same thing we do here (except it stores all the zones and regions and we arbitrarily pick one here). We should definitely merge the two implementations.\n",
        "createdAt" : "2016-06-23T19:26:36Z",
        "updatedAt" : "2016-06-23T19:33:56Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "a827ef0713078cd3b1fca637f12f8afb631c9438",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +631,635 @@// Also note that zone here means the zone in cloud provider terminology, not\n// the DNS zone.\nfunc (kd *KubeDNS) getClusterZoneAndRegion() (string, string, error) {\n\tvar node *kapi.Node\n"
  },
  {
    "id" : "0994aac8-6ad1-4678-a493-475df0eec23b",
    "prId" : 27960,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05552e24-5fbc-4cd8-bad2-d7a5c4ca5385",
        "parentId" : null,
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "for a future PR? - When we find the first appropriate node, should we not break out of the for loop? (comment in line 652 indicates that we are just picking the first node, code indicates we are picking the last appropriate node)\n",
        "createdAt" : "2016-06-23T19:21:24Z",
        "updatedAt" : "2016-06-23T19:33:56Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      },
      {
        "id" : "58648588-9f88-4030-8a0b-40f21d053105",
        "parentId" : "05552e24-5fbc-4cd8-bad2-d7a5c4ca5385",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Thanks for catching that. Done in this PR.\n",
        "createdAt" : "2016-06-23T19:34:14Z",
        "updatedAt" : "2016-06-23T19:34:14Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "a827ef0713078cd3b1fca637f12f8afb631c9438",
    "line" : 70,
    "diffHunk" : "@@ -1,1 +659,663 @@\t\t\t}\n\t\t\t// Make a copy of the node, don't rely on the loop variable.\n\t\t\tnode = &(*(&nodeItem))\n\t\t\tif err := kd.nodesStore.Add(node); err != nil {\n\t\t\t\treturn \"\", \"\", fmt.Errorf(\"couldn't add the retrieved node to the cache: %v\", err)"
  },
  {
    "id" : "83b76f82-687c-4213-873c-697f8a6f0c57",
    "prId" : 27960,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "44f9ef7a-414a-45e6-9033-72f99c8fabbf",
        "parentId" : null,
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "Thanks for incorporating the feedback @madhusudancs !\n",
        "createdAt" : "2016-06-23T19:40:30Z",
        "updatedAt" : "2016-06-23T19:40:30Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a827ef0713078cd3b1fca637f12f8afb631c9438",
    "line" : null,
    "diffHunk" : "@@ -1,1 +664,668 @@\t\t\t}\n\t\t\t// Node is found, break out of the loop.\n\t\t\tbreak\n\t\t}\n\t}"
  },
  {
    "id" : "fd1e49ff-7aa8-47ad-b867-b4831996fbb8",
    "prId" : 27708,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c0d0e578-3316-408a-a5f1-339c2315ef9a",
        "parentId" : null,
        "authorId" : null,
        "body" : "Yes, I would like us to support wildcard queries for federated services, as this will be an easy way for clients to discover all shards of a service globally, with a single DNS query.  Pretty cool.  Can wait until post-1.3.\n",
        "createdAt" : "2016-06-23T20:23:37Z",
        "updatedAt" : "2016-06-24T00:50:28Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "84679c98-992d-46ff-aa45-05d7efd02412",
        "parentId" : "c0d0e578-3316-408a-a5f1-339c2315ef9a",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "@quinton-hoole How are the clients expected to format the wildcard-names? Specifically, where do you expect them to put the `*`?\n",
        "createdAt" : "2016-06-23T21:33:21Z",
        "updatedAt" : "2016-06-24T00:50:28Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "d95b0810-83c1-41f5-8401-6c72f77f473f",
        "parentId" : "c0d0e578-3316-408a-a5f1-339c2315ef9a",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Also, what do you expect the KubeDNS response to be? \n",
        "createdAt" : "2016-06-23T21:37:25Z",
        "updatedAt" : "2016-06-24T00:50:28Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "7be429307bdc7fc545c671e46be91f27e322f378",
    "line" : 212,
    "diffHunk" : "@@ -1,1 +674,678 @@//   Note: Because of the above conditions, this method will treat wildcard queries such as\n//   *.mysvc.myns.myfederation.svc.domain.path as non-federation queries.\n//   We can add support for wildcard queries later, if needed.\nfunc (kd *KubeDNS) isFederationQuery(path []string) bool {\n\tif len(path) == 4+len(kd.domainPath) &&"
  },
  {
    "id" : "6cec067e-fb4e-49ed-9d0f-b6aa26c589d0",
    "prId" : 27708,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c12256e-a4b6-4128-8fac-0465f0b20927",
        "parentId" : null,
        "authorId" : "d36c6e2e-68ff-4beb-99ef-11c76f6929ce",
        "body" : "Move this to a lower log level  ? Seems chatty with no specific information.\n",
        "createdAt" : "2016-06-24T00:17:06Z",
        "updatedAt" : "2016-06-24T00:50:28Z",
        "lastEditedBy" : "d36c6e2e-68ff-4beb-99ef-11c76f6929ce",
        "tags" : [
        ]
      },
      {
        "id" : "e82820b5-d561-42bd-a525-9d3fe4d027bd",
        "parentId" : "7c12256e-a4b6-4128-8fac-0465f0b20927",
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "the information this gives is that this query was interpreted as a federation query.\nI would like to keep it for debugging.\nNote that we wont see this in the logs unless someone has federation enabled and is sending federation queries.\n",
        "createdAt" : "2016-06-24T00:42:00Z",
        "updatedAt" : "2016-06-24T00:50:28Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "7be429307bdc7fc545c671e46be91f27e322f378",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +443,447 @@\tfederationSegments := []string{}\n\tif !exact && kd.isFederationQuery(segments) {\n\t\tglog.Infof(\"federation service query: Received federation query. Going to try to find local service first\")\n\t\t// Try quering the non-federation (local) service first.\n\t\t// Will try the federation one later, if this fails."
  },
  {
    "id" : "a0ef1adb-d5af-4d75-b635-1064e1776545",
    "prId" : 26226,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d0169a9c-14c4-4644-992f-76f641037734",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "should we add reverse records for petset pods (with hostname and subdomain set AND a governing headless service?  Maybe that's yet another followup.  Can you just file an issue on that?\n",
        "createdAt" : "2016-05-25T00:08:08Z",
        "updatedAt" : "2016-06-01T16:56:16Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "e644a6b9-c4bf-48a1-bbb9-96a1e4e06c0d",
        "parentId" : "d0169a9c-14c4-4644-992f-76f641037734",
        "authorId" : "d36c6e2e-68ff-4beb-99ef-11c76f6929ce",
        "body" : "Filed issue https://github.com/kubernetes/kubernetes/issues/26752 to track this.\n",
        "createdAt" : "2016-06-02T23:40:44Z",
        "updatedAt" : "2016-06-02T23:40:44Z",
        "lastEditedBy" : "d36c6e2e-68ff-4beb-99ef-11c76f6929ce",
        "tags" : [
        ]
      }
    ],
    "commit" : "4224dbd6c63dad37162a398b607b5a34429f69d3",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +297,301 @@\tdefer kd.cacheLock.Unlock()\n\tkd.cache.setSubCache(service.Name, subCache, subCachePath...)\n\tkd.reverseRecordMap[service.Spec.ClusterIP] = reverseRecord\n}\n"
  },
  {
    "id" : "829c415b-96b1-48be-bffb-bb001d354998",
    "prId" : 25727,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4ffbc653-7897-4cdc-b92a-3f376dcd772d",
        "parentId" : null,
        "authorId" : null,
        "body" : "Need to explain why this value was chosen please. What are the pros and cons of increasing or decreasing this value. Why is there a need to evict cache entries at all?  Are they not automatically kept up to date via watches?\n",
        "createdAt" : "2016-05-17T20:42:15Z",
        "updatedAt" : "2016-05-23T06:06:07Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "a9ca1e3d-0af6-4ff2-b4ef-604657f9a3c1",
        "parentId" : "4ffbc653-7897-4cdc-b92a-3f376dcd772d",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Added a clarification comment. We are not setting a watch here. We just need one node and our assumption is that the zone name annotation on the nodes don't change often, so there is not really a need to observe and react to the nodes' state changes. But we don't want to hold the values for ever without letting it ever change. So the value is chosen to be neither too long nor too short.\n",
        "createdAt" : "2016-05-19T18:26:31Z",
        "updatedAt" : "2016-05-23T06:06:07Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "006580abb9626a0c9ed249e075d2ead199b76fd2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +59,63 @@\t// never change. So we expire the cache and retrieve a node once every 180 seconds.\n\t// The value is chosen to be neither too long nor too short.\n\tnodeCacheTTL = 180 * time.Second\n)\n"
  },
  {
    "id" : "60054906-6418-49e8-aaca-7ec5a429082d",
    "prId" : 25727,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee78dcc0-51f1-4031-a51a-968770b45292",
        "parentId" : null,
        "authorId" : null,
        "body" : "Formatting got messed up.  I don't think that this line needs to change at all?\n",
        "createdAt" : "2016-05-17T20:44:50Z",
        "updatedAt" : "2016-05-23T06:06:07Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "a1f54f75-2bb0-4476-91f0-4832bbbc3fbb",
        "parentId" : "ee78dcc0-51f1-4031-a51a-968770b45292",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "I don't think it got messed up. It's just the way gofmt works. It is the result of adding a comment line after `serviceStore kcache.Store` line. Before the comment line, gofmt tried to align the type with the types in the following lines. But after inserting a comment it lost that constraint.\n",
        "createdAt" : "2016-05-19T18:37:47Z",
        "updatedAt" : "2016-05-23T06:06:07Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "006580abb9626a0c9ed249e075d2ead199b76fd2",
    "line" : null,
    "diffHunk" : "@@ -1,1 +74,78 @@\n\t// A cache that contains all the services in the system.\n\tservicesStore kcache.Store\n\n\t// stores DNS records for the domain."
  },
  {
    "id" : "729c7965-44d8-4ffa-80ce-8318ffca4685",
    "prId" : 25727,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4482c730-f12a-46f1-b942-5cc980ef9bbe",
        "parentId" : null,
        "authorId" : null,
        "body" : "I don't understand what an 'exact' query is, and why you would not want to handle it like any other request.  Can you add a comment to explain?\n",
        "createdAt" : "2016-05-18T18:44:43Z",
        "updatedAt" : "2016-05-23T06:06:07Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "e1912cfe-ddb4-49e6-935b-d7e6d89cde81",
        "parentId" : "4482c730-f12a-46f1-b942-5cc980ef9bbe",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "It's not very well documented, but if I understand it correctly, it means that SkyDNS wants the query names to be interpreted as is, without any modifications. Since we are going to modify the query name and send it as a CNAME response I think it is not appropriate to do it when it is true.\n\nI could be wrong here and will be happy to modify the code if this is not the behavior we want.\n\n@ArtfulCoder @thockin please correct me if I am wrong.\n",
        "createdAt" : "2016-05-19T18:41:55Z",
        "updatedAt" : "2016-05-23T06:06:07Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "006580abb9626a0c9ed249e075d2ead199b76fd2",
    "line" : 139,
    "diffHunk" : "@@ -1,1 +422,426 @@\t// If the name query is not an exact query and does not match any records in the local store,\n\t// attempt to send a federation redirect (CNAME) response.\n\tif !exact {\n\t\treturn kd.federationRecords(path)\n\t}"
  },
  {
    "id" : "86a228c1-08a6-4c2e-a906-1ac623d61267",
    "prId" : 23930,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2fee2a53-4e15-42db-a099-a83c52d2e0e3",
        "parentId" : null,
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Definitely do not want to block this PR, but we should consider moving to external client (v1 client) in a future PR.\n\ncc @caesarxuchao \n",
        "createdAt" : "2016-05-05T00:14:36Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "534a0fb8-a0d3-45ae-96dd-574e84c9dfef",
        "parentId" : "2fee2a53-4e15-42db-a099-a83c52d2e0e3",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "please log when type assertions that \"can't fail\" do fail.\n\n```\nif service, ok := obj.(*kapi.Service); !ok {\n    glog.Errorf(\"Holy smoke!  Type assertion expected 'Service', got %T\", service)\n    return\n}\n//rest of code\n```\n",
        "createdAt" : "2016-05-17T22:08:26Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "4eff1eea-6de4-4e3a-8c25-4cabd9881d9b",
        "parentId" : "2fee2a53-4e15-42db-a099-a83c52d2e0e3",
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "type check added.\n",
        "createdAt" : "2016-05-20T16:09:54Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ada2170a320b4bee15d6b1d372d0f9e0cadb838",
    "line" : null,
    "diffHunk" : "@@ -1,1 +167,171 @@\nfunc assertIsService(obj interface{}) (*kapi.Service, bool) {\n\tif service, ok := obj.(*kapi.Service); ok {\n\t\treturn service, ok\n\t} else {"
  },
  {
    "id" : "e0eade4a-05d7-47da-b538-e391f7c38e3c",
    "prId" : 23930,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c2744f6e-a093-40af-8eed-3950d28f35d9",
        "parentId" : null,
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "`kcache.MetaNamespaceKeyFunc(e)` constructs the key for the endpoints object and that is given to the service's `GetByKey()`. This only works because corresponding endpoints and the service objects have identical names. I think it is worth adding a comment about it here.\n",
        "createdAt" : "2016-05-05T00:31:10Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ada2170a320b4bee15d6b1d372d0f9e0cadb838",
    "line" : 227,
    "diffHunk" : "@@ -1,1 +225,229 @@\t\treturn nil, err\n\t}\n\tobj, exists, err := kd.servicesStore.GetByKey(key)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to get service object from services store - %v\", err)"
  },
  {
    "id" : "19bf47cd-de4e-49e5-9316-50f6923de614",
    "prId" : 23930,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c4e3ec5-1ec1-4243-ba08-c21782760b17",
        "parentId" : null,
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "I think it is useful to do a %T instead of a %v here or both.\n",
        "createdAt" : "2016-05-05T00:33:18Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ada2170a320b4bee15d6b1d372d0f9e0cadb838",
    "line" : null,
    "diffHunk" : "@@ -1,1 +236,240 @@\t\treturn svc, nil\n\t}\n\treturn nil, fmt.Errorf(\"got a non service object in services store %v\", obj)\n}\n"
  },
  {
    "id" : "089c723f-148c-440b-ac2b-4190c5fe861b",
    "prId" : 23930,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "658ab2ff-c491-4ce7-8149-ae0cfdf09ad7",
        "parentId" : null,
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Same comment as above, but for using a service key in endpoints lookup. Please consider adding a comment.\n",
        "createdAt" : "2016-05-05T01:16:14Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ada2170a320b4bee15d6b1d372d0f9e0cadb838",
    "line" : 337,
    "diffHunk" : "@@ -1,1 +335,339 @@\t\treturn err\n\t}\n\te, exists, err := kd.endpointsStore.GetByKey(key)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to get endpoints object from endpoints store - %v\", err)"
  },
  {
    "id" : "f84c1bd4-d3e6-4877-9294-5d7b2127dc35",
    "prId" : 23930,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "63a9d9f7-42c3-4ddd-bc78-aaef8d9a5ff3",
        "parentId" : null,
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "I think you should validate the type assertion here. Something like this:\n\n```\nrec, ok := val.(*skymsg.Service)\nif !ok {\n   return fmt.Errorf(\"invalid record type received: %T\", val)\n}\nretval = append(retval, *rec)\n```\n\nIf something goes wrong and you get an object of unexpected type, Go panics and the server crashes.\n",
        "createdAt" : "2016-05-05T01:30:48Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ada2170a320b4bee15d6b1d372d0f9e0cadb838",
    "line" : null,
    "diffHunk" : "@@ -1,1 +381,385 @@\tretval := []skymsg.Service{}\n\tfor _, val := range records {\n\t\tretval = append(retval, *(val.(*skymsg.Service)))\n\t}\n\tglog.Infof(\"records:%v, retval:%v, path:%v\", records, retval, path)"
  },
  {
    "id" : "8c837c1b-9642-4255-a4be-535fd24d5c6f",
    "prId" : 23930,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "095da7aa-1b6b-46d4-97d4-a0217b32fd9f",
        "parentId" : null,
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "Is this method TBD? I don't see anything happening here.\n",
        "createdAt" : "2016-05-05T01:32:35Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "d5bbe109-69ae-4ed4-84dd-4e670f177832",
        "parentId" : "095da7aa-1b6b-46d4-97d4-a0217b32fd9f",
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "there is a seperate work item for this.\nwe currently dont support reverse record lookup in v1.3\n",
        "createdAt" : "2016-05-05T17:32:32Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ada2170a320b4bee15d6b1d372d0f9e0cadb838",
    "line" : 403,
    "diffHunk" : "@@ -1,1 +401,405 @@\t}\n\n\treturn nil, fmt.Errorf(\"must be exactly one service record\")\n}\n"
  },
  {
    "id" : "6956b52a-ac37-4712-8615-de2895790720",
    "prId" : 23930,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e902248a-7db9-441a-9bea-e6de17ce7640",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@ArtfulCoder can you use the generated client instead? \"k8s.io/kubernetes/pkg/client/unversioned\" is deprecated.\n\nYou can try to use \"https://github.com/kubernetes/kubernetes/tree/master/pkg/client/clientset_generated/release_1_2\", then your code will be operating on versioned objects, so that future changes to the internal objects won't affect your code.\n\nIf that's too much trouble, you can use \"https://github.com/kubernetes/kubernetes/tree/master/pkg/client/clientset_generated/internalclientset\", that's almost the same as what you used now.\n",
        "createdAt" : "2016-05-05T17:38:27Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ada2170a320b4bee15d6b1d372d0f9e0cadb838",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +32,36 @@\t\"k8s.io/kubernetes/pkg/api/endpoints\"\n\tkcache \"k8s.io/kubernetes/pkg/client/cache\"\n\tkclient \"k8s.io/kubernetes/pkg/client/unversioned\"\n\tkframework \"k8s.io/kubernetes/pkg/controller/framework\"\n\tkselector \"k8s.io/kubernetes/pkg/fields\""
  },
  {
    "id" : "f2941678-4717-44dd-8fea-1584bca81c57",
    "prId" : 23930,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b7e7384d-3631-4b46-952b-feb95199ac00",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I don't think this is really worth caching.  Skydns already caches responses, fetching endpoints each time is cleaner.\n",
        "createdAt" : "2016-05-05T19:30:11Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "01c41bc4-bebd-4af8-9d7b-7f2a6228b8be",
        "parentId" : "b7e7384d-3631-4b46-952b-feb95199ac00",
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "skydns caching is poor. It does not respect the TTL of the dns response.\n\nFor example: if skydns TTL is set to 10 mins, and the upstream DNS response has a TTL of 30 seconds, skydns will still use the same response after 30 secs (upto 10 mins) without querying upstream.\n",
        "createdAt" : "2016-05-05T20:21:45Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      },
      {
        "id" : "5d12dd4d-bf91-4b49-b089-1fcaf251d542",
        "parentId" : "b7e7384d-3631-4b46-952b-feb95199ac00",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Why would we set skydns TTL to 10 mins anyway?\n\nOn Thu, May 5, 2016 at 4:22 PM, Abhi Shah notifications@github.com wrote:\n\n> In pkg/dns/dns.go\n> https://github.com/kubernetes/kubernetes/pull/23930#discussion_r62248366\n> :\n> \n> > +func (kd *KubeDNS) setServicesStore() {\n> > -   // Returns a cache.ListWatch that gets all changes to services.\n> > -   serviceWatch := kcache.NewListWatchFromClient(kd.kubeClient, \"services\", kapi.NamespaceAll, kselector.Everything())\n> > -   kd.servicesStore, kd.serviceController = kframework.NewInformer(\n> > -       serviceWatch,\n> > -       &kapi.Service{},\n> > -       resyncPeriod,\n> > -       kframework.ResourceEventHandlerFuncs{\n> > -           AddFunc:    kd.newService,\n> > -           DeleteFunc: kd.removeService,\n> > -           UpdateFunc: kd.updateService,\n> > -       },\n> > -   )\n> >   +}\n> >   +\n> >   +func (kd *KubeDNS) setEndpointsStore() {\n> \n> skydns caching is poor. It does not respect the TTL of the dns response.\n> \n> For example: if skydns TTL is set to 10 mins, and the upstream DNS\n> response has a TTL of 30 seconds, skydns will still use the same response\n> after 30 secs (upto 10 mins) without querying upstream.\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/23930/files/a33b1f831b93fa1402f82f687e83d0fb488d16cb..2b69fa8d68b059336a55ba56e9465e2a0c9e9fc9#r62248366\n",
        "createdAt" : "2016-05-05T20:24:15Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "95f7fc77-a3c0-4051-bf6d-6a298d99695c",
        "parentId" : "b7e7384d-3631-4b46-952b-feb95199ac00",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "We've been running with 30s TTL in this setup for a long time.\n\nOn Thu, May 5, 2016 at 4:24 PM, Clayton Coleman ccoleman@redhat.com wrote:\n\n> Why would we set skydns TTL to 10 mins anyway?\n> \n> On Thu, May 5, 2016 at 4:22 PM, Abhi Shah notifications@github.com\n> wrote:\n> \n> > In pkg/dns/dns.go\n> > https://github.com/kubernetes/kubernetes/pull/23930#discussion_r62248366\n> > :\n> > \n> > > +func (kd *KubeDNS) setServicesStore() {\n> > > -  // Returns a cache.ListWatch that gets all changes to services.\n> > > -  serviceWatch := kcache.NewListWatchFromClient(kd.kubeClient, \"services\", kapi.NamespaceAll, kselector.Everything())\n> > > -  kd.servicesStore, kd.serviceController = kframework.NewInformer(\n> > > -      serviceWatch,\n> > > -      &kapi.Service{},\n> > > -      resyncPeriod,\n> > > -      kframework.ResourceEventHandlerFuncs{\n> > > -          AddFunc:    kd.newService,\n> > > -          DeleteFunc: kd.removeService,\n> > > -          UpdateFunc: kd.updateService,\n> > > -      },\n> > > -  )\n> > >   +}\n> > >   +\n> > >   +func (kd *KubeDNS) setEndpointsStore() {\n> > \n> > skydns caching is poor. It does not respect the TTL of the dns response.\n> > \n> > For example: if skydns TTL is set to 10 mins, and the upstream DNS\n> > response has a TTL of 30 seconds, skydns will still use the same response\n> > after 30 secs (upto 10 mins) without querying upstream.\n> > \n> > —\n> > You are receiving this because you were mentioned.\n> > Reply to this email directly or view it on GitHub\n> > https://github.com/kubernetes/kubernetes/pull/23930/files/a33b1f831b93fa1402f82f687e83d0fb488d16cb..2b69fa8d68b059336a55ba56e9465e2a0c9e9fc9#r62248366\n",
        "createdAt" : "2016-05-05T20:25:11Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "171dafe9-2ce9-4c28-bd5b-246430006c3b",
        "parentId" : "b7e7384d-3631-4b46-952b-feb95199ac00",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Oh, you're talking about recursive.  Yeah, we haven't enabled recursive up\nuntil now.\n\nOn Thu, May 5, 2016 at 4:25 PM, Clayton Coleman ccoleman@redhat.com wrote:\n\n> We've been running with 30s TTL in this setup for a long time.\n> \n> On Thu, May 5, 2016 at 4:24 PM, Clayton Coleman ccoleman@redhat.com\n> wrote:\n> \n> > Why would we set skydns TTL to 10 mins anyway?\n> > \n> > On Thu, May 5, 2016 at 4:22 PM, Abhi Shah notifications@github.com\n> > wrote:\n> > \n> > > In pkg/dns/dns.go\n> > > https://github.com/kubernetes/kubernetes/pull/23930#discussion_r62248366\n> > > :\n> > > \n> > > > +func (kd *KubeDNS) setServicesStore() {\n> > > > - // Returns a cache.ListWatch that gets all changes to services.\n> > > > - serviceWatch := kcache.NewListWatchFromClient(kd.kubeClient, \"services\", kapi.NamespaceAll, kselector.Everything())\n> > > > - kd.servicesStore, kd.serviceController = kframework.NewInformer(\n> > > > -     serviceWatch,\n> > > > -     &kapi.Service{},\n> > > > -     resyncPeriod,\n> > > > -     kframework.ResourceEventHandlerFuncs{\n> > > > -         AddFunc:    kd.newService,\n> > > > -         DeleteFunc: kd.removeService,\n> > > > -         UpdateFunc: kd.updateService,\n> > > > -     },\n> > > > - )\n> > > >   +}\n> > > >   +\n> > > >   +func (kd *KubeDNS) setEndpointsStore() {\n> > > \n> > > skydns caching is poor. It does not respect the TTL of the dns response.\n> > > \n> > > For example: if skydns TTL is set to 10 mins, and the upstream DNS\n> > > response has a TTL of 30 seconds, skydns will still use the same response\n> > > after 30 secs (upto 10 mins) without querying upstream.\n> > > \n> > > —\n> > > You are receiving this because you were mentioned.\n> > > Reply to this email directly or view it on GitHub\n> > > https://github.com/kubernetes/kubernetes/pull/23930/files/a33b1f831b93fa1402f82f687e83d0fb488d16cb..2b69fa8d68b059336a55ba56e9465e2a0c9e9fc9#r62248366\n",
        "createdAt" : "2016-05-05T20:26:41Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ada2170a320b4bee15d6b1d372d0f9e0cadb838",
    "line" : 151,
    "diffHunk" : "@@ -1,1 +149,153 @@}\n\nfunc (kd *KubeDNS) setEndpointsStore() {\n\t// Returns a cache.ListWatch that gets all changes to endpoints.\n\tendpointsWatch := kcache.NewListWatchFromClient(kd.kubeClient, \"endpoints\", kapi.NamespaceAll, kselector.Everything())"
  },
  {
    "id" : "845b750f-10be-40e6-aa0e-1e0fbab0dc88",
    "prId" : 23930,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57055ca7-f3bf-49fc-9993-2368ac2fe9aa",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "As a general comment, this is 3-4x the amount of code in the Openshift DNS plugin (which is conformant), and I think is too literal.  The service lookup should be very clear in a single block.\n",
        "createdAt" : "2016-05-05T19:33:13Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "1cdd2794-18c3-4771-a492-e43b1f964fc0",
        "parentId" : "57055ca7-f3bf-49fc-9993-2368ac2fe9aa",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Also, I used cache.Indexer to access service IP which was a lot cleaner.\n",
        "createdAt" : "2016-05-05T19:55:00Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "1b05a27b-5257-4906-991d-b49fa35f8e7b",
        "parentId" : "57055ca7-f3bf-49fc-9993-2368ac2fe9aa",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "For context: https://github.com/openshift/origin/blob/master/pkg/dns/serviceresolver.go#L75\n",
        "createdAt" : "2016-05-05T19:57:18Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "7c8276cd-3a4f-4b16-b972-acfce507ddc5",
        "parentId" : "57055ca7-f3bf-49fc-9993-2368ac2fe9aa",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Specifically the tree cache?  It is a lot of code, but it has the nice property of having a chance of being able to serve even if apiserver is down.\n",
        "createdAt" : "2016-05-17T22:30:12Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ada2170a320b4bee15d6b1d372d0f9e0cadb838",
    "line" : 241,
    "diffHunk" : "@@ -1,1 +239,243 @@}\n\nfunc (kd *KubeDNS) newPortalService(service *kapi.Service) {\n\tsubCache := NewTreeCache()\n\trecordValue, recordLabel := getSkyMsg(service.Spec.ClusterIP, 0)"
  },
  {
    "id" : "ffea25e2-e324-4579-94e6-c201f3590a87",
    "prId" : 23930,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c644296e-47e2-4598-ad43-f2625c7dd1f9",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "this whole function is `sort.Sort(sort.Reverse(sort.StringSlice(arr)))`\n",
        "createdAt" : "2016-05-17T20:34:26Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "4d240de2-5c38-410f-84ff-2f3425bd9df3",
        "parentId" : "c644296e-47e2-4598-ad43-f2625c7dd1f9",
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "I dont think your suggestion works.\nwe have to reverse the array, not reverse sort the array..\n",
        "createdAt" : "2016-05-18T22:17:31Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      },
      {
        "id" : "4a2aaf40-9424-4e05-8af0-0e4863d1f694",
        "parentId" : "c644296e-47e2-4598-ad43-f2625c7dd1f9",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "doh, of course.\n",
        "createdAt" : "2016-05-21T00:26:41Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ada2170a320b4bee15d6b1d372d0f9e0cadb838",
    "line" : 450,
    "diffHunk" : "@@ -1,1 +448,452 @@\nfunc reverseArray(arr []string) []string {\n\tfor i := 0; i < len(arr)/2; i++ {\n\t\tj := len(arr) - i - 1\n\t\tarr[i], arr[j] = arr[j], arr[i]"
  },
  {
    "id" : "80ccca6a-0950-4e0a-a583-df262f9ade27",
    "prId" : 23930,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d2d361f-e9d9-4f0a-ad16-2e53bb60a9fd",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "do we have more details about this TODO?  what would cause unwanted updates?\n",
        "createdAt" : "2016-05-17T21:26:05Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ada2170a320b4bee15d6b1d372d0f9e0cadb838",
    "line" : 161,
    "diffHunk" : "@@ -1,1 +159,163 @@\t\t\tAddFunc: kd.handleEndpointAdd,\n\t\t\tUpdateFunc: func(oldObj, newObj interface{}) {\n\t\t\t\t// TODO: Avoid unwanted updates.\n\t\t\t\tkd.handleEndpointAdd(newObj)\n\t\t\t},"
  },
  {
    "id" : "eb3e527f-bae8-4c09-a29c-07a1defdedb1",
    "prId" : 23930,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "12699f0e-2855-4cf1-9df8-8f563a3002ed",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Does this NEED the master `kubernetes` service or would any service serve as proof-of-readiness?  Don't change behavior now, but maybe \"TODO: better if this were not hard-coded\"\n",
        "createdAt" : "2016-05-20T01:05:38Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "8232997e-2cef-4167-ab6d-cc43188d4a77",
        "parentId" : "12699f0e-2855-4cf1-9df8-8f563a3002ed",
        "authorId" : "0970b119-085d-41b4-8f33-e10409965eba",
        "body" : "added a TODO\n",
        "createdAt" : "2016-05-20T20:52:17Z",
        "updatedAt" : "2016-05-21T06:25:35Z",
        "lastEditedBy" : "0970b119-085d-41b4-8f33-e10409965eba",
        "tags" : [
        ]
      }
    ],
    "commit" : "3ada2170a320b4bee15d6b1d372d0f9e0cadb838",
    "line" : null,
    "diffHunk" : "@@ -1,1 +107,111 @@\t// TODO: we might not have to wait for kubernetes service specifically. We should just wait\n\t// for a list operation to be complete from APIServer.\n\tkd.waitForKubernetesService()\n}\n"
  }
]