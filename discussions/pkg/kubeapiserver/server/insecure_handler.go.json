[
  {
    "id" : "81d3e3d8-d97e-406c-bed2-126e9dab53d3",
    "prId" : 96061,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96061#pullrequestreview-526453635",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3e623d6d-d8ab-4f4e-84b1-90cd642734bd",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "why before WithWaitGroup?",
        "createdAt" : "2020-11-02T08:34:00Z",
        "updatedAt" : "2020-11-14T16:55:37Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "41baa69d-3a23-4d09-b816-65f0466b8ad9",
        "parentId" : "3e623d6d-d8ab-4f4e-84b1-90cd642734bd",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "I have moved it after `WithWaitGroup`",
        "createdAt" : "2020-11-09T15:20:38Z",
        "updatedAt" : "2020-11-14T16:55:37Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      },
      {
        "id" : "26105ac6-31fb-4e17-a182-f6c8c4051835",
        "parentId" : "3e623d6d-d8ab-4f4e-84b1-90cd642734bd",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "This looks better.",
        "createdAt" : "2020-11-09T16:50:14Z",
        "updatedAt" : "2020-11-14T16:55:37Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "83f869ee1350da1b65d508725749fb70d0f535f2",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +46,50 @@\n\t// WithRequestDeadline sets a deadline for the request context appropriately\n\thandler = genericapifilters.WithRequestDeadline(handler, c.LongRunningFunc, c.RequestTimeout)\n\n\thandler = genericfilters.WithWaitGroup(handler, c.LongRunningFunc, c.HandlerChainWaitGroup)"
  },
  {
    "id" : "392c15d6-f1a4-49fe-b909-9ee548a01a2a",
    "prId" : 96061,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/96061#pullrequestreview-527640790",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d10048eb-0c1c-42e4-bcd4-648d85d5b887",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "can I get a comment here explaining why I have a second timeout filter here?",
        "createdAt" : "2020-11-09T18:23:53Z",
        "updatedAt" : "2020-11-14T16:55:37Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "83654b11-7471-4a33-a9ac-c5bfeefa61aa",
        "parentId" : "d10048eb-0c1c-42e4-bcd4-648d85d5b887",
        "authorId" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "body" : "@deads2k `WithTimeoutForNonLongRunningRequests` is a filter that times out a request after `60s` if the response hasn't been written yet. The new filter `WithRequestDeadline` sets the context deadline.  \r\n\r\nI guess we still need the `WithTimeoutForNonLongRunningRequests` if processing not bound to any context goes rogue. in this case we will send a timeout error to the caller after `60s`. @sttts any thoughts here?",
        "createdAt" : "2020-11-09T23:29:26Z",
        "updatedAt" : "2020-11-14T16:55:37Z",
        "lastEditedBy" : "3e6e337f-0beb-4609-abc3-11b8e8cf5688",
        "tags" : [
        ]
      },
      {
        "id" : "d17b58ca-c99a-403e-91d8-a4269ec971f3",
        "parentId" : "d10048eb-0c1c-42e4-bcd4-648d85d5b887",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "`WithTimeoutForNonLongRunningRequests` has that support: it calls the rest of the request handling in a go-routine with the context with deadline. The go-routine can keep running, while the timeout logic will return a timeout to the client.",
        "createdAt" : "2020-11-10T10:20:45Z",
        "updatedAt" : "2020-11-14T16:55:37Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "b5a02e79-2c70-4751-ae35-b1a53392bc2b",
        "parentId" : "d10048eb-0c1c-42e4-bcd4-648d85d5b887",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Can I get these comments as comments in the code for future david?",
        "createdAt" : "2020-11-10T21:57:58Z",
        "updatedAt" : "2020-11-14T16:55:37Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "83f869ee1350da1b65d508725749fb70d0f535f2",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +43,47 @@\t// WithTimeoutForNonLongRunningRequests will call the rest of the request handling in a go-routine with the\n\t// context with deadline. The go-routine can keep running, while the timeout logic will return a timeout to the client.\n\thandler = genericfilters.WithTimeoutForNonLongRunningRequests(handler, c.LongRunningFunc)\n\n\t// WithRequestDeadline sets a deadline for the request context appropriately"
  },
  {
    "id" : "d56770d7-dfc8-41b7-adc6-50a8a1c9accb",
    "prId" : 82206,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/82206#pullrequestreview-290822006",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2b5ffa10-5946-495a-9386-772b50443f2a",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "if we're trying to match the order of DefaultBuildHandlerChain, we would do this:\r\n\r\n```\r\nWithMaxInFlightLimit\r\nWithAudit\r\nWithAuthentication\r\nWithCORS\r\nWithTimeoutForNonLongRunningRequests\r\nWithWaitGroup\r\nWithRequestInfo\r\nWithCacheControl\r\nWithPanicRecovery\r\n```",
        "createdAt" : "2019-09-19T20:25:10Z",
        "updatedAt" : "2019-09-19T20:40:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "cdc1b71bde6aca61208243edfaa4bc36289d2f4a",
    "line" : 2,
    "diffHunk" : "@@ -1,1 +26,30 @@\n// BuildInsecureHandlerChain sets up the server to listen to http. Should be removed.\nfunc BuildInsecureHandlerChain(apiHandler http.Handler, c *server.Config) http.Handler {\n\thandler := apiHandler\n\thandler = genericfilters.WithMaxInFlightLimit(handler, c.MaxRequestsInFlight, c.MaxMutatingRequestsInFlight, c.LongRunningFunc)"
  },
  {
    "id" : "43a97392-3f7d-4112-974e-f781798f57ac",
    "prId" : 43888,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43888#pullrequestreview-41679985",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "693a7d2c-2345-4455-bdc9-0ee0cc27a637",
        "parentId" : null,
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "@liggitt - Was it intentional to add the `AllAuthenticated` (as opposed to `AllUnauthenticated`) here? I know it's a \"sure user\" identity, but it seems a little funny to add the authenticated group when we've effectively skipped authentication.",
        "createdAt" : "2017-06-02T02:08:40Z",
        "updatedAt" : "2017-06-02T02:08:40Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      },
      {
        "id" : "4c523eab-6075-4f17-86e8-583e671ec33b",
        "parentId" : "693a7d2c-2345-4455-bdc9-0ee0cc27a637",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "it was... pairing the privileged group and the unauthenticated group seemed more bizarre than this. just don't think of this as unauthenticated, think of it as having authenticated the superuser by virtue of them arriving at the localhost port :-(",
        "createdAt" : "2017-06-02T02:10:56Z",
        "updatedAt" : "2017-06-02T02:10:56Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "688397b3-2ebb-4cbf-a310-da5c3e383883",
        "parentId" : "693a7d2c-2345-4455-bdc9-0ee0cc27a637",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "relatedly, I'd like to consider defaulting this port off in a future release and making deployments that want it explicitly enable it... it's too easy to run not knowing this exists on localhost",
        "createdAt" : "2017-06-02T02:12:43Z",
        "updatedAt" : "2017-06-02T02:12:43Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "95812251-c505-45b0-a850-23f1afdbd769",
        "parentId" : "693a7d2c-2345-4455-bdc9-0ee0cc27a637",
        "authorId" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "body" : "Thanks for the explanation. I noticed it while reading through the audit logs of an e2e test, and it struck me as odd.\r\n\r\n```\r\n2017-06-02T02:21:03.555917358Z AUDIT: id=\"286a4484-480d-41b8-b9b4-4c30305fe0f3\" stage=\"ResponseComplete\" ip=\"127.0.0.1\" method=\"get\" user=\"system:unsecured\" groups=\"\\\"system:masters\\\",\\\"system:authenticated\\\"\" as=\"<self>\" asgroups=\"<lookup>\" namespace=\"kube-system\" uri=\"/api/v1/namespaces/kube-system/configmaps/ingress-uid\" response=\"200\"\r\n```",
        "createdAt" : "2017-06-02T02:21:49Z",
        "updatedAt" : "2017-06-02T02:21:49Z",
        "lastEditedBy" : "0adf587c-aaa2-4e47-be0f-a26d4fde14ac",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d839d0d0b29d8c2744fa33863addca048ffab63",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +123,127 @@\treturn &user.DefaultInfo{\n\t\tName:   \"system:unsecured\",\n\t\tGroups: []string{user.SystemPrivilegedGroup, user.AllAuthenticated},\n\t}, true, nil\n}"
  }
]