[
  {
    "id" : "b96542b0-cf50-4bdd-b0da-d81715a5f0cf",
    "prId" : 78135,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/78135#pullrequestreview-240879069",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "235edca6-ef85-44cc-b14e-e2d51890d2d1",
        "parentId" : null,
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "why wasn't that there before and which influence had that?",
        "createdAt" : "2019-05-22T21:00:01Z",
        "updatedAt" : "2019-05-28T18:30:39Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      },
      {
        "id" : "1962c5c5-8467-40cf-83ca-14ce712ccf57",
        "parentId" : "235edca6-ef85-44cc-b14e-e2d51890d2d1",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "extensions/v1beta1 replicationcontrollers *only* serve a `scale` subresource, no parent resource, so no storage asked about the prefix for an `extensions/v1beta1` replicationcontrollers resource previously. We now need to know what storage is modified by the scale subresource, and the storage factory is the thing we use to answer that question, so I needed to register this cross-group relationship",
        "createdAt" : "2019-05-22T21:04:06Z",
        "updatedAt" : "2019-05-28T18:30:39Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "8c194ea615459ddab09938528eca3a3a228da8a3",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +112,116 @@\tstorageFactory.AddCohabitatingResources(apps.Resource(\"replicasets\"), extensions.Resource(\"replicasets\"))\n\tstorageFactory.AddCohabitatingResources(api.Resource(\"events\"), events.Resource(\"events\"))\n\tstorageFactory.AddCohabitatingResources(api.Resource(\"replicationcontrollers\"), extensions.Resource(\"replicationcontrollers\")) // to make scale subresources equivalent\n\tstorageFactory.AddCohabitatingResources(policy.Resource(\"podsecuritypolicies\"), extensions.Resource(\"podsecuritypolicies\"))\n\tstorageFactory.AddCohabitatingResources(networking.Resource(\"ingresses\"), extensions.Resource(\"ingresses\"))"
  },
  {
    "id" : "4e0c7c60-07aa-4a59-935e-6a60fd539463",
    "prId" : 77139,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/77139#pullrequestreview-232637047",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6edf167-c33a-447c-9145-278f0af39f06",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "also set this in master_test.go#setUp",
        "createdAt" : "2019-05-01T16:12:25Z",
        "updatedAt" : "2019-05-01T19:41:54Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "dd891bbbb8f560a926ea6619e0a28c2f7b87ffdc",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +56,60 @@\tresources := []schema.GroupVersionResource{\n\t\tbatch.Resource(\"cronjobs\").WithVersion(\"v1beta1\"),\n\t\tnetworking.Resource(\"ingresses\").WithVersion(\"v1beta1\"),\n\t}\n\t// add csinodes if CSINodeInfo feature gate is enabled"
  }
]