[
  {
    "id" : "6868c6f3-9a8f-4a93-874a-cadbf7418a83",
    "prId" : 15999,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b67ccb47-808b-4d3f-91a3-6c72c48919e9",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "eventType, but even better as eventSeverity, or best of all, just \"severity\"\n",
        "createdAt" : "2015-11-30T23:47:23Z",
        "updatedAt" : "2015-11-30T23:47:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c5676a10-7622-4c57-a211-4d922d550af9",
        "parentId" : "b67ccb47-808b-4d3f-91a3-6c72c48919e9",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "If we keep \"type\" as a name, this should just be \"type\", not eventtype.\n",
        "createdAt" : "2015-11-30T23:52:28Z",
        "updatedAt" : "2015-11-30T23:52:28Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "29a41ac7-59c3-48fc-b0b6-a832aa348b00",
        "parentId" : "b67ccb47-808b-4d3f-91a3-6c72c48919e9",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Yes, I intentionally wanted to avoid the term \"severity\". \n",
        "createdAt" : "2015-12-01T00:19:14Z",
        "updatedAt" : "2015-12-01T00:19:14Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "c053290e0447d4c316871025528f32a9b552c72e",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +62,66 @@\t//\n\t// The resulting event will be created in the same namespace as the reference object.\n\tEvent(object runtime.Object, eventtype, reason, message string)\n\n\t// Eventf is just like Event, but with Sprintf for the message field."
  },
  {
    "id" : "70dd7ce4-1db9-4f90-98b9-0ad2750bb5ae",
    "prId" : 15268,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0afa383a-e031-44e0-804b-149f6127e226",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "I was hoping using an existing method would reduce the amount of code here, but it increased it :) Oh well\n",
        "createdAt" : "2015-10-08T23:45:40Z",
        "updatedAt" : "2015-10-14T00:12:32Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "1eebe523-93e2-469f-aa8b-072e3f8d042e",
        "parentId" : "0afa383a-e031-44e0-804b-149f6127e226",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "It's better than spelling a string ourselves :) Thanks for the good advice.\n",
        "createdAt" : "2015-10-09T00:12:44Z",
        "updatedAt" : "2015-10-14T00:12:32Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "b443f1264c1d05f53432b7c1d8ad63d860583ac4",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +123,127 @@\t\t\t\tevent.Count = previousEvent.Count + 1\n\n\t\t\t\t// we need to make sure the Count and LastTimestamp are the only differences between event and the eventCopy2\n\t\t\t\teventCopy2 := *event\n\t\t\t\teventCopy2.Count = 0"
  },
  {
    "id" : "7dd50544-3225-4cf5-bf11-7e8c9ce7bfc3",
    "prId" : 6290,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "137a330d-e61d-49fe-bd79-d217d6523aaf",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "In addition to resetting the resourceVersion, since a new event is being created, we should reset the event object:\n- Set `event.count` back to 1\n- Set `event.FirstTimestamp` to `event.LastTimestamp`\n",
        "createdAt" : "2015-04-02T01:03:10Z",
        "updatedAt" : "2015-04-02T22:10:47Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "5937484d-1f02-4a7b-a36c-cb0e0f6b1c26",
        "parentId" : "137a330d-e61d-49fe-bd79-d217d6523aaf",
        "authorId" : "79abcd26-e388-4bae-92dd-9217be72eac3",
        "body" : "Are you sure you want to do that? I actually found quite nice that no information were lost in this case as well. Even if the event was deleted we still keep the count and first appearance.\n",
        "createdAt" : "2015-04-02T14:09:37Z",
        "updatedAt" : "2015-04-02T22:10:47Z",
        "lastEditedBy" : "79abcd26-e388-4bae-92dd-9217be72eac3",
        "tags" : [
        ]
      },
      {
        "id" : "2d128fb7-6ff5-4aaf-a76a-d7bb0449cefc",
        "parentId" : "137a330d-e61d-49fe-bd79-d217d6523aaf",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "You're right, this is fine as is. Resetting it would lose useful information.\n",
        "createdAt" : "2015-04-02T18:21:21Z",
        "updatedAt" : "2015-04-02T22:10:47Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "8849cf21d3621fbe1319047480da60d139778efe",
    "line" : null,
    "diffHunk" : "@@ -1,1 +161,165 @@\tif !updateExistingEvent || (updateExistingEvent && isKeyNotFoundError(err)) {\n\t\t// Making sure that ResourceVersion is empty on creation\n\t\tevent.ResourceVersion = \"\"\n\t\tnewEvent, err = sink.Create(event)\n\t}"
  },
  {
    "id" : "5b503ecd-6ddc-4f7e-9a87-da5dbc67b8e2",
    "prId" : 6290,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8d201d3e-dcca-4228-b68f-bfacaaae5b9e",
        "parentId" : null,
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Does it make sense to fall back to create on all update failures? Or should we only fall back to create on \"Key not found\" failures?\n",
        "createdAt" : "2015-04-02T01:04:24Z",
        "updatedAt" : "2015-04-02T22:10:47Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "2be7be2a-036d-46d3-9391-eaade9ecd186",
        "parentId" : "8d201d3e-dcca-4228-b68f-bfacaaae5b9e",
        "authorId" : "79abcd26-e388-4bae-92dd-9217be72eac3",
        "body" : "Best we can do is to check if err code is 500 because apiserver is not returning a more specific error than that.\n",
        "createdAt" : "2015-04-02T14:10:18Z",
        "updatedAt" : "2015-04-02T22:10:47Z",
        "lastEditedBy" : "79abcd26-e388-4bae-92dd-9217be72eac3",
        "tags" : [
        ]
      }
    ],
    "commit" : "8849cf21d3621fbe1319047480da60d139778efe",
    "line" : null,
    "diffHunk" : "@@ -1,1 +160,164 @@\t// Update can fail because the event may have been removed and it no longer exists.\n\tif !updateExistingEvent || (updateExistingEvent && isKeyNotFoundError(err)) {\n\t\t// Making sure that ResourceVersion is empty on creation\n\t\tevent.ResourceVersion = \"\"\n\t\tnewEvent, err = sink.Create(event)"
  },
  {
    "id" : "9dd88e53-56b9-4c68-bf64-ae67e88417dc",
    "prId" : 5535,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c7d24979-b6b9-4f13-9274-dc31ae11df9a",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Will more than one recorder ever be made for a broadcaster? Can we collapse those to be one object?\n",
        "createdAt" : "2015-03-27T22:53:55Z",
        "updatedAt" : "2015-03-30T21:22:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b8d97b04-3564-4ade-a869-7cec05e807fb",
        "parentId" : "c7d24979-b6b9-4f13-9274-dc31ae11df9a",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "I would prefer to leave recorder and broadcaster as separate objects. Although we only have one recorder per broadcaster so far, I'd like to leave the flexibility of having multiple recorders. The way I see it the broadcaster is a pipe, it can support multiple inputs via recorders, and multiple outputs via sinks. However, if you feel strongly, let me know--I can change it.\n",
        "createdAt" : "2015-03-27T23:23:44Z",
        "updatedAt" : "2015-03-30T21:22:39Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      },
      {
        "id" : "b18ed5c2-8362-49b0-9f2c-9466b3f6b092",
        "parentId" : "c7d24979-b6b9-4f13-9274-dc31ae11df9a",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "OK-- I don't have a super strong opinion, but creating one broadcaster per server object (instead of per binary) just seems a little inconsistent. Like presumably one server object won't ever want to send events from more than one source.\n",
        "createdAt" : "2015-03-28T00:41:00Z",
        "updatedAt" : "2015-03-30T21:22:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0f71cb21f6cfa50d8d3f70805e3a714295534ea",
    "line" : 48,
    "diffHunk" : "@@ -1,1 +81,85 @@\t// NewRecorder returns an EventRecorder that can be used to send events to this EventBroadcaster\n\t// with the event source set to the given event source.\n\tNewRecorder(source api.EventSource) EventRecorder\n}\n"
  },
  {
    "id" : "70c1e5a0-25f1-4337-a4be-1609b54e123e",
    "prId" : 5248,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "790652af-b235-4468-8ec5-17da71358a3a",
        "parentId" : null,
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Should Event just return an error instead?\n",
        "createdAt" : "2015-03-10T17:36:30Z",
        "updatedAt" : "2015-03-10T17:36:30Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "8720e7c2-d296-4b97-85de-4bc89515c118",
        "parentId" : "790652af-b235-4468-8ec5-17da71358a3a",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I guess this is good to bring back to old behavior.\n",
        "createdAt" : "2015-03-10T17:43:02Z",
        "updatedAt" : "2015-03-10T17:43:02Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "4625f35e-a107-4aec-81ae-05cfcad1d5b2",
        "parentId" : "790652af-b235-4468-8ec5-17da71358a3a",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, callers of Event/Eventf aren't really equipped to do something better with the error.\n",
        "createdAt" : "2015-03-10T19:12:11Z",
        "updatedAt" : "2015-03-10T19:12:11Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "a373b234e98b741a5fadab8ed22fd47c726e11dc",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +198,202 @@\tif err != nil {\n\t\tglog.Errorf(\"Could not construct reference to: '%#v' due to: '%v'. Will not report event: '%v' '%v'\", object, err, reason, message)\n\t\treturn\n\t}\n"
  },
  {
    "id" : "4de9c606-1049-4341-9df1-38f345de5a15",
    "prId" : 4306,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "79f31708-f72c-4688-b874-bc56da6f9f5e",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Move the `if err == nil` blocks out and below the block here:\n\n```\nif updateExistingEvent {\n  newEvent, err = recorder.Update(event)\n} else {\n  newEvent, err = recorder.Create(event)\n}\nif err == nil {\n  AddOrUpdateEvent(newEvent)\n}\n```\n",
        "createdAt" : "2015-02-12T04:53:02Z",
        "updatedAt" : "2015-02-12T06:58:01Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "303c8de1-0b14-4771-a8b5-79d62d7ac576",
        "parentId" : "79f31708-f72c-4688-b874-bc56da6f9f5e",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Done.\n",
        "createdAt" : "2015-02-12T05:27:50Z",
        "updatedAt" : "2015-02-12T06:58:01Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "033577efa2f76d817ff2a7fca04d3cecbe60fd33",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +98,102 @@\tvar err error\n\tif updateExistingEvent {\n\t\tnewEvent, err = recorder.Update(event)\n\t} else {\n\t\tnewEvent, err = recorder.Create(event)"
  },
  {
    "id" : "7c65f986-7c9a-4001-a4c5-07b25c9b36e3",
    "prId" : 1789,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "771dd295-d7fb-4847-9061-2e51839d2a6c",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Is it necessary to introduce this new public interface just to do unit testing in `pkg/client/record/event_test.go`?  See comments in that test. \n",
        "createdAt" : "2014-10-15T16:46:44Z",
        "updatedAt" : "2014-10-15T18:57:04Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "f1b91f60-acfe-4269-a8a8-8f0821aaf48d",
        "parentId" : "771dd295-d7fb-4847-9061-2e51839d2a6c",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It's good go style because it reduces dependencies. Notice how this package doesn't import pkg/client, and if I followed your suggestion, it would have to. Making a tiny interface describing exactly the functions you need allows for powerful code reuse, including in tests.\n",
        "createdAt" : "2014-10-15T18:20:05Z",
        "updatedAt" : "2014-10-15T18:57:04Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4c750a878ec7934445f75b2bf37a39f0db703ec",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +30,34 @@\n// EventRecorder knows how to store events (client.Client implements it.)\ntype EventRecorder interface {\n\tCreateEvent(event *api.Event) (*api.Event, error)\n}"
  },
  {
    "id" : "d97e5fb5-3b7f-453e-8ff7-6616031641e8",
    "prId" : 1789,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70d368f9-6321-4ead-b462-bd7c957d36f5",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "If it weren't for testing:\n- EventRecorder would not be needed\n- StartReporting would have just one string argument.\n- GetEvents would not need to be public\n- StartLogging would not need to take a function as an argument (and might not be needed at all).\n\nI'd much rather have a clean public interface than clean tests.  \n",
        "createdAt" : "2014-10-15T17:13:02Z",
        "updatedAt" : "2014-10-15T18:57:04Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "d95069ce-c023-4938-a7f5-50f6c3972e5f",
        "parentId" : "70d368f9-6321-4ead-b462-bd7c957d36f5",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Declaring an interface that provides _only_ the methods you use is good go style, not just for testability. StartRecording would still have to take a client argument even if I didn't declare it as an interface, so it's not making the interface any uglier-- bullet 2 is not true.\n\nGetEvents is a helper function because I found myself writing that set of assertions all over. I think it's legit to test event emission, because we're going to build higher level behaviors that depend on events being emitted; if you break that, you'll eventually break the cluster, so it needs to be tested. I can maybe see people wanting to process their local events, so this will save that use case some code, too.\n\nStartLogging is the way it is to allow sending events to: testing.T.Logf, testing.T.Logf, glog.V(X).Infof, glog.Infof, glog.Errorf. It's probably more normal to take an io.Writer, but we can add that later if needed--that doesn't address my immediate use case of getting events logged in tests for debugging.\n",
        "createdAt" : "2014-10-15T18:18:18Z",
        "updatedAt" : "2014-10-15T18:57:04Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4c750a878ec7934445f75b2bf37a39f0db703ec",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +55,59 @@}\n\n// StartLogging just logs local events, using the given logging function. The\n// return value can be ignored or used to stop logging, if desired.\nfunc StartLogging(logf func(format string, args ...interface{})) watch.Interface {"
  }
]