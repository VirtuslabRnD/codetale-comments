[
  {
    "id" : "fb73d029-f1b1-42e8-9940-75f31cf759ba",
    "prId" : 16798,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "76b3f3ed-0796-4db0-aa89-ce1c40568589",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "lastTime or maybe lastSeenTime\n",
        "createdAt" : "2015-11-04T19:35:48Z",
        "updatedAt" : "2015-11-06T21:59:46Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "fac508d2-afff-424f-b3ac-eff3b56c191a",
        "parentId" : "76b3f3ed-0796-4db0-aa89-ce1c40568589",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I was keeping naming consistent with the internal object.\n\n`Event.LastTimestamp` would map to `aggregrateRecord.LastTimestamp`\n",
        "createdAt" : "2015-11-06T13:52:08Z",
        "updatedAt" : "2015-11-06T21:59:46Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad7f1a8cb892b8b881c8a72355b74ed4f4f3078",
    "line" : 124,
    "diffHunk" : "@@ -1,1 +137,141 @@\tlocalKeys sets.String\n\t// The last time at which the aggregate was recorded\n\tlastTimestamp unversioned.Time\n}\n"
  },
  {
    "id" : "8eb19f39-a7df-448d-b5ba-a255877ff464",
    "prId" : 16798,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b53e9d61-c95e-4a67-922e-af319bf498cb",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Would it make more sense to call this just Aggregate?\n",
        "createdAt" : "2015-11-04T19:36:23Z",
        "updatedAt" : "2015-11-06T21:59:46Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "492cc2e2-197e-4ee4-b2b4-e450b1fc9984",
        "parentId" : "b53e9d61-c95e-4a67-922e-af319bf498cb",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Doesn't need to be exported?\n",
        "createdAt" : "2015-11-04T20:43:51Z",
        "updatedAt" : "2015-11-06T21:59:46Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "0985a212-7421-4e4d-a409-9f397448d922",
        "parentId" : "b53e9d61-c95e-4a67-922e-af319bf498cb",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "If it was in a package that was event specific, I would be more inclined to drop the `Event` prefix from the naming.  I think that can be a future re-factor.  As for having it exported, I thought that a next iteration on this work would be to modify the signature of `StartRecordingToSink` would possibly take in an `EventAggregator`.\n",
        "createdAt" : "2015-11-06T13:57:37Z",
        "updatedAt" : "2015-11-06T21:59:46Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad7f1a8cb892b8b881c8a72355b74ed4f4f3078",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +141,145 @@\n// EventAggregate identifies similar events and groups into a common event if required\nfunc (e *EventAggregator) EventAggregate(newEvent *api.Event) (*api.Event, error) {\n\taggregateKey, localKey := e.keyFunc(newEvent)\n\tnow := unversioned.NewTime(e.clock.Now())"
  },
  {
    "id" : "56f8c2bb-4e8f-4952-b3cf-18c8e31ecb64",
    "prId" : 16798,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "41c65457-2fa3-44cc-b408-f9f5cca41074",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Just call this Correlate?\n",
        "createdAt" : "2015-11-04T20:20:41Z",
        "updatedAt" : "2015-11-06T21:59:46Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "fa3a1c22-df01-4b2f-a9d3-d80ed88c72db",
        "parentId" : "41c65457-2fa3-44cc-b408-f9f5cca41074",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Same comment as above on `EventAggregate`\n",
        "createdAt" : "2015-11-06T14:00:00Z",
        "updatedAt" : "2015-11-06T21:59:46Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad7f1a8cb892b8b881c8a72355b74ed4f4f3078",
    "line" : 374,
    "diffHunk" : "@@ -1,1 +340,344 @@\n// EventCorrelate filters, aggregates, counts, and de-duplicates all incoming events\nfunc (c *EventCorrelator) EventCorrelate(newEvent *api.Event) (*EventCorrelateResult, error) {\n\tif c.filterFunc(newEvent) {\n\t\treturn &EventCorrelateResult{Skip: true}, nil"
  },
  {
    "id" : "312d9946-276c-431f-8f6d-e99391f3b5d1",
    "prId" : 16798,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f940ad9-d56a-4253-bc99-3f3583f68498",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Since this isn't a type definition, call this `EventAggregatorByReason` or something along those lines?\n",
        "createdAt" : "2015-11-04T20:36:55Z",
        "updatedAt" : "2015-11-06T21:59:46Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "2885a927-5809-4887-b559-be86ee8dc4de",
        "parentId" : "2f940ad9-d56a-4253-bc99-3f3583f68498",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "I chose to keep naming convention consistent with `cache.Indexer` indexing functions.\n\nFor example:\nhttps://github.com/kubernetes/kubernetes/blob/master/pkg/client/cache/index.go#L57\n",
        "createdAt" : "2015-11-06T14:05:34Z",
        "updatedAt" : "2015-11-06T21:59:46Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad7f1a8cb892b8b881c8a72355b74ed4f4f3078",
    "line" : 60,
    "diffHunk" : "@@ -1,1 +73,77 @@\n// EventAggregatorByReasonFunc aggregates events by exact match on event.Source, event.InvolvedObject, and event.Reason\nfunc EventAggregatorByReasonFunc(event *api.Event) (string, string) {\n\treturn strings.Join([]string{\n\t\tevent.Source.Component,"
  },
  {
    "id" : "15210836-b695-4a0e-b90d-91a42530cb08",
    "prId" : 16798,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50a74212-cdc1-4408-9a32-5b9ca5362266",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Same \"not a type definition\" comment from above\n",
        "createdAt" : "2015-11-04T20:37:21Z",
        "updatedAt" : "2015-11-06T21:59:46Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "6372f195-fe05-4aa9-bfde-0d20a55c70f3",
        "parentId" : "50a74212-cdc1-4408-9a32-5b9ca5362266",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "same response as above.\n",
        "createdAt" : "2015-11-06T14:06:10Z",
        "updatedAt" : "2015-11-06T21:59:46Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad7f1a8cb892b8b881c8a72355b74ed4f4f3078",
    "line" : 78,
    "diffHunk" : "@@ -1,1 +91,95 @@\n// EventAggregratorByReasonMessageFunc returns an aggregate message by prefixing the incoming message\nfunc EventAggregatorByReasonMessageFunc(event *api.Event) string {\n\treturn \"(events with common reason combined)\"\n}"
  },
  {
    "id" : "d65c3330-4909-4add-b29e-0c93543bd026",
    "prId" : 16798,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d55e052-bc4d-4b48-adfc-1a12467a0374",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "I don't see anything in this PR that does anything with Skip=true? And NewEventCorrelator makes filterFunc DefaultEventFilterFunc, so no events are ever skipped... do you want to leave this in here?\n",
        "createdAt" : "2015-11-04T20:48:46Z",
        "updatedAt" : "2015-11-06T21:59:46Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "ec9ce6e6-a99a-4d99-beb5-6cd1f5a23d49",
        "parentId" : "4d55e052-bc4d-4b48-adfc-1a12467a0374",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "It was a placeholder for if/when I wanted to add the ability to just ignore too-frequent events and drop them client-side.\n",
        "createdAt" : "2015-11-04T21:11:05Z",
        "updatedAt" : "2015-11-06T21:59:46Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      },
      {
        "id" : "57791e67-bc3c-4064-ad5e-4cea3aae1ae3",
        "parentId" : "4d55e052-bc4d-4b48-adfc-1a12467a0374",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Added the check on `result.Skip` in `StartRecordingToSink`.\n\nA quick follow-on if we continue to see issues is to add a spam filter in front of the aggregate.\n",
        "createdAt" : "2015-11-06T14:08:24Z",
        "updatedAt" : "2015-11-06T21:59:46Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad7f1a8cb892b8b881c8a72355b74ed4f4f3078",
    "line" : 376,
    "diffHunk" : "@@ -1,1 +342,346 @@func (c *EventCorrelator) EventCorrelate(newEvent *api.Event) (*EventCorrelateResult, error) {\n\tif c.filterFunc(newEvent) {\n\t\treturn &EventCorrelateResult{Skip: true}, nil\n\t}\n\taggregateEvent, err := c.aggregator.EventAggregate(newEvent)"
  },
  {
    "id" : "24be2a13-f34a-4b5b-a508-901be1759ef5",
    "prId" : 16798,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d912971a-bcf4-4fb1-ba9e-11e1abee2cbf",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "totally optional nit: might make sense to combine key & message funcs into an interface.\n",
        "createdAt" : "2015-11-04T21:14:59Z",
        "updatedAt" : "2015-11-06T21:59:46Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "6ad7f1a8cb892b8b881c8a72355b74ed4f4f3078",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +119,123 @@\n// NewEventAggregator returns a new instance of an EventAggregator\nfunc NewEventAggregator(lruCacheSize int, keyFunc EventAggregatorKeyFunc, messageFunc EventAggregatorMessageFunc,\n\tmaxEvents int, maxIntervalInSeconds int, clock util.Clock) *EventAggregator {\n\treturn &EventAggregator{"
  },
  {
    "id" : "edd1c3b7-9c69-4989-98f9-2b8614a8092b",
    "prId" : 4444,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "775f2501-71d6-4ae4-a6ff-c274eff8025f",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "History probably didn't need to be exposed outside the package?  Consider making it lower-case?\n",
        "createdAt" : "2015-02-14T08:08:02Z",
        "updatedAt" : "2015-02-17T19:40:50Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2735e6a4959c020097a7ac674d6cbf5e10816b52",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +23,27 @@\t\"sync\"\n)\n\ntype history struct {\n\t// The number of times the event has occured since first occurance."
  },
  {
    "id" : "ac67e2e6-9c0f-47f8-ae47-25004906c7a2",
    "prId" : 4444,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95c7928a-5006-47bb-ae67-e10c54b682c4",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "GetEvent probably doesn't need to be upper case.  The other files in this package can still see it if it is lowercase (packge private).\n",
        "createdAt" : "2015-02-14T08:10:23Z",
        "updatedAt" : "2015-02-17T19:40:50Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "2735e6a4959c020097a7ac674d6cbf5e10816b52",
    "line" : null,
    "diffHunk" : "@@ -1,1 +67,71 @@\n// getEvent returns the entry corresponding to the given event, if one exists, otherwise a history object\n// with a count of 0 is returned.\nfunc getEvent(event *api.Event) history {\n\tkey := getEventKey(event)"
  },
  {
    "id" : "a37a6c89-8ccf-49a9-8ec3-18940038140f",
    "prId" : 4306,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "50657e2f-9deb-4608-951e-35714e0d67ce",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Godoc\n",
        "createdAt" : "2015-02-12T04:48:55Z",
        "updatedAt" : "2015-02-12T06:58:01Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "3abb823e-8628-48c5-8b44-c1689df64543",
        "parentId" : "50657e2f-9deb-4608-951e-35714e0d67ce",
        "authorId" : "8e448017-7838-493d-a424-33cada0da657",
        "body" : "Done.\n",
        "createdAt" : "2015-02-12T05:19:19Z",
        "updatedAt" : "2015-02-12T06:58:01Z",
        "lastEditedBy" : "8e448017-7838-493d-a424-33cada0da657",
        "tags" : [
        ]
      }
    ],
    "commit" : "033577efa2f76d817ff2a7fca04d3cecbe60fd33",
    "line" : null,
    "diffHunk" : "@@ -1,1 +62,66 @@// GetEvent returns the entry corresponding to the given event, if one exists, otherwise a History object\n// with a count of 1 is returned.\nfunc GetEvent(event *api.Event) History {\n\tkey := getEventKey(event)\n\tpreviousEvents.RLock()"
  }
]