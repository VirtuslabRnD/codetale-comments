[
  {
    "id" : "c86e992b-a289-473b-8ab8-26399c72096b",
    "prId" : 15268,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4899abec-0490-457f-aee9-9b59c86daa18",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@liggitt @krousey is this better?\n",
        "createdAt" : "2015-10-13T23:19:28Z",
        "updatedAt" : "2015-10-14T00:12:32Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "bcf27c8d-a845-42bb-9b48-352ae7143edb",
        "parentId" : "4899abec-0490-457f-aee9-9b59c86daa18",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "Yes.\n",
        "createdAt" : "2015-10-13T23:31:18Z",
        "updatedAt" : "2015-10-14T00:12:32Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      }
    ],
    "commit" : "b443f1264c1d05f53432b7c1d8ad63d860583ac4",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +399,403 @@}\n\nfunc recorderWithFakeClock(eventSource api.EventSource, eventBroadcaster EventBroadcaster, clock util.Clock) EventRecorder {\n\treturn &recorderImpl{eventSource, eventBroadcaster.(*eventBroadcasterImpl).Broadcaster, clock}\n}"
  },
  {
    "id" : "48f99f7d-40ff-486b-a216-c25351070cbb",
    "prId" : 1789,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64e83549-5d0d-4a3e-949a-9d1eb847fee5",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "How about use `pkg/client/fake.go` or else write:\n\n``` go\nfunc (t *testEventRecorder) ListEvents(label, field labels.Selector) (*api.EventList, error) {\n  t.T.Errorf(\"Unexpected call to ListEvents\")\n}\nfunc (t *testEventRecorder) GetEvent(id string) (*api.Event, error) {\n   t.T.Errorf(\"Unexpected call to GetEvent\")\n}\nfunc (t *testEventRecorder) WatchEvents(label, field labels.Selector, resourceVersion string) (watch.Interface, error) {\n  t.T.Errorf(\"Unexpected call to WatchEvents\")\n}\n```\n",
        "createdAt" : "2014-10-15T16:51:32Z",
        "updatedAt" : "2014-10-15T18:57:04Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "4a666e54-4204-430d-8375-8d73af6519cb",
        "parentId" : "64e83549-5d0d-4a3e-949a-9d1eb847fee5",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The interface explicitly doesn't declare those methods. There's no way it can call them, the compiler checks this.\n",
        "createdAt" : "2014-10-15T18:07:12Z",
        "updatedAt" : "2014-10-15T18:57:04Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "0f55986a-3089-4c33-853c-3027abafe6f2",
        "parentId" : "64e83549-5d0d-4a3e-949a-9d1eb847fee5",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "I get how it works now.  I'm trying to get rid of the public interface you invented just for this test.  One option is to implement an already defined public interface, such as EventInterface.\n",
        "createdAt" : "2014-10-15T18:16:02Z",
        "updatedAt" : "2014-10-15T18:57:04Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "562f5157-d1eb-45ff-943a-1dc65b3ec3c4",
        "parentId" : "64e83549-5d0d-4a3e-949a-9d1eb847fee5",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Hopefully my other comments convince you that the interface is a feature and not a bug.\n",
        "createdAt" : "2014-10-15T18:31:02Z",
        "updatedAt" : "2014-10-15T18:57:04Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4c750a878ec7934445f75b2bf37a39f0db703ec",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +38,42 @@\t}\n\treturn e, nil\n}\n\nfunc (t *testEventRecorder) clearOnEvent() {"
  },
  {
    "id" : "55381a9b-c3ba-4354-81f2-3b9ae390d907",
    "prId" : 1789,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5e8fb233-a361-4bca-8dd9-15956d89bbf8",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "I don't see a lot of value in this test.  It is a lot of test code and a lot of touching the should-be-private parts of the module under test, in order to cover not a lot of lines.  I'd rather leave this code un-unit-tested and have an e2e test, or a manual test plus a promise of an e2e test in the future.\n",
        "createdAt" : "2014-10-15T17:18:06Z",
        "updatedAt" : "2014-10-15T18:57:04Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "8009a0f9-1948-482e-bc00-06caf49a18a5",
        "parentId" : "5e8fb233-a361-4bca-8dd9-15956d89bbf8",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "> a lot of touching the should-be-private parts of the module \n\nI made this test be package record_test, which means the complier disallows that. ? Also coverage is 81%ish, which is essentially everything except for error conditions.\n",
        "createdAt" : "2014-10-15T18:07:57Z",
        "updatedAt" : "2014-10-15T18:57:04Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "948b88f6-4a40-45c2-a417-ed527715762c",
        "parentId" : "5e8fb233-a361-4bca-8dd9-15956d89bbf8",
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "I said \"should-be-private\", not \"currently private\".  \n",
        "createdAt" : "2014-10-15T18:17:44Z",
        "updatedAt" : "2014-10-15T18:57:04Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4c750a878ec7934445f75b2bf37a39f0db703ec",
    "line" : 1,
    "diffHunk" : "@@ -1,1 +-1,3 @@/*\nCopyright 2014 Google Inc. All rights reserved.\n"
  }
]