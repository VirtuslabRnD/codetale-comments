[
  {
    "id" : "35041b54-20d8-4df5-8ee0-83189e3fb2fc",
    "prId" : 2437,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3cf95141-0b48-42ae-bcab-343fac6b768c",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Is this package intended to be appropriate for all golang-based clients of Kubernetes?  Or just ones that are part of Kubernetes and OpenShift projects?  If the latter, it seems pretty prescriptive to require anyone who wants to use this library to use pflags.  This pflags is not even the \"official\" pflags.  That appears to be \"github.com/ogier/pflags\".  I'm sure there is some good reason we are using \"github.com/spf13/pflags\" but I'm not sure that reason is good for all clients.  \n",
        "createdAt" : "2014-11-24T21:28:34Z",
        "updatedAt" : "2014-11-26T14:46:37Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      },
      {
        "id" : "7766cd48-d6bc-4375-9d7a-768d3bbebc86",
        "parentId" : "3cf95141-0b48-42ae-bcab-343fac6b768c",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "We ended up on spf13/pflags because we're using spf13/cobra for commands.  Cobra's Value interface isn't directly compatible with flags.Value, so I suspect that drove the usage of spf13/pflags (but I don't know for certain).\n\n@smarterclayton suggested compatibility with native flags as a follow-on todo.\n",
        "createdAt" : "2014-11-24T21:37:56Z",
        "updatedAt" : "2014-11-26T14:46:37Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "0da1f9c1-5e71-4b14-920a-2d06f8c444c5",
        "parentId" : "3cf95141-0b48-42ae-bcab-343fac6b768c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I believe Cobras/pflag value interface covers the stdlib pflag but I could be wrong.  So that would be goal.\n\n> On Nov 24, 2014, at 3:38 PM, David Eads notifications@github.com wrote:\n> \n> In pkg/client/clientcmd/client_builder.go:\n> \n> > -   }\n> >   +}\n> >   +\n> >   +const (\n> > -   FlagApiServer       = \"server\"\n> > -   FlagMatchApiVersion = \"match-server-version\"\n> > -   FlagApiVersion      = \"api-version\"\n> > -   FlagAuthPath        = \"auth-path\"\n> > -   FlagInsecure        = \"insecure-skip-tls-verify\"\n> > -   FlagCertFile        = \"client-certificate\"\n> > -   FlagKeyFile         = \"client-key\"\n> > -   FlagCAFile          = \"certificate-authority\"\n> > -   FlagBearerToken     = \"token\"\n> >   +)\n> >   +\n> >   +// BindFlags implements Builder\n> >   We ended up on spf13/pflags because we're using spf13/cobra for commands. Cobra's Value interface isn't directly compatible with flags.Value, so I suspect that drove the usage of spf13/pflags (but I don't know for certain).\n> \n> @smarterclayton suggested compatibility with native flags as a follow-on todo.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-11-24T21:42:55Z",
        "updatedAt" : "2014-11-26T14:46:37Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "61580244-47e1-48ba-a3ea-1f629b011d69",
        "parentId" : "3cf95141-0b48-42ae-bcab-343fac6b768c",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Unrelated: Any reason we can't change to pflag all over? it seems much nicer than go's flag lib...\n",
        "createdAt" : "2014-11-26T22:32:11Z",
        "updatedAt" : "2014-11-26T22:32:11Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "df9ace31-7329-4998-907c-1ecb2e733da9",
        "parentId" : "3cf95141-0b48-42ae-bcab-343fac6b768c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Just backwards compat around double vs single dash.  When we break that compat we should also sort out underscore vs dash (kubectl is dash).\n",
        "createdAt" : "2014-11-26T23:11:10Z",
        "updatedAt" : "2014-11-26T23:11:10Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "d47bf761-0e8b-4516-b61f-918e5e82e4e1",
        "parentId" : "3cf95141-0b48-42ae-bcab-343fac6b768c",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "We should argue for a feature of pflags (this form or the other one) that says ParseWithDashesOrUnderscores()\n",
        "createdAt" : "2014-11-26T23:12:52Z",
        "updatedAt" : "2014-11-26T23:12:52Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dbfb803497017b074422886dbb6bcb02af9e9e9",
    "line" : 86,
    "diffHunk" : "@@ -1,1 +84,88 @@)\n\n// BindFlags implements Builder\nfunc (builder *builder) BindFlags(flags *pflag.FlagSet) {\n\tflags.StringVarP(&builder.apiserver, FlagApiServer, \"s\", builder.apiserver, \"The address of the Kubernetes API server\")"
  },
  {
    "id" : "f0c32909-9c44-430c-b001-31b8e0ffb449",
    "prId" : 2437,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fe8ccb24-d720-4351-8433-08fca9e86da1",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "BuildConfig is not defined anywhere - Config?\n",
        "createdAt" : "2014-11-26T22:56:19Z",
        "updatedAt" : "2014-11-26T22:56:19Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "34fbd714-b200-4626-b99f-4b83d58e5a1a",
        "parentId" : "fe8ccb24-d720-4351-8433-08fca9e86da1",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Typo from an early refactor \n\n> On Nov 26, 2014, at 4:56 PM, Tim Hockin notifications@github.com wrote:\n> \n> In pkg/client/clientcmd/client_builder.go:\n> \n> > +\n> > -   \"github.com/spf13/pflag\"\n> >   +\n> > -   \"github.com/GoogleCloudPlatform/kubernetes/pkg/api/latest\"\n> > -   \"github.com/GoogleCloudPlatform/kubernetes/pkg/client\"\n> > -   \"github.com/GoogleCloudPlatform/kubernetes/pkg/clientauth\"\n> > -   \"github.com/GoogleCloudPlatform/kubernetes/pkg/version\"\n> >   +)\n> >   +\n> >   +// Builder are used to bind and interpret command line flags to make it easy to get an api server client\n> >   +type Builder interface {\n> > -   // BindFlags must bind and keep track of all the flags required to build a client config object\n> > -   BindFlags(flags *pflag.FlagSet)\n> > -   // Config uses the values of the bound flags and builds a complete client config\n> > -   Config() (*client.Config, error)\n> > -   // Client calls BuildConfig under the covers and uses that config to return a client\n> >   BuildConfig is not defined anywhere - Config?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-11-26T23:06:07Z",
        "updatedAt" : "2014-11-26T23:06:07Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dbfb803497017b074422886dbb6bcb02af9e9e9",
    "line" : 38,
    "diffHunk" : "@@ -1,1 +36,40 @@\t// Config uses the values of the bound flags and builds a complete client config\n\tConfig() (*client.Config, error)\n\t// Client calls BuildConfig under the covers and uses that config to return a client\n\tClient() (*client.Client, error)\n}"
  },
  {
    "id" : "a48194e8-acdf-44f4-a0e7-f200eea99bb8",
    "prId" : 2437,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cd26f4f-e3c5-4e6d-bb4c-ec3075a69b6f",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Are there pre-reqs for calling this?  Like \"flags must be parsed already\" ?\n",
        "createdAt" : "2014-11-26T23:01:17Z",
        "updatedAt" : "2014-11-26T23:01:17Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "3db5c923-35dd-46f5-8a7e-37f20b71b8b9",
        "parentId" : "7cd26f4f-e3c5-4e6d-bb4c-ec3075a69b6f",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yes.\n",
        "createdAt" : "2014-11-26T23:11:33Z",
        "updatedAt" : "2014-11-26T23:11:33Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dbfb803497017b074422886dbb6bcb02af9e9e9",
    "line" : 125,
    "diffHunk" : "@@ -1,1 +123,127 @@}\n\n// Config implements Builder\nfunc (builder *builder) Config() (*client.Config, error) {\n\tclientConfig := client.Config{}"
  },
  {
    "id" : "0629cddd-261a-49ee-bb1f-6720d1237331",
    "prId" : 2437,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "782b4de2-c2d2-47a3-9b67-f97270e3b233",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Minor: idiomatically, shouldn't this be &client.Config{}, so you don't return the address of a local later (which I know is valid, but I almost always see the local being a pointer type)?\n",
        "createdAt" : "2014-11-26T23:01:22Z",
        "updatedAt" : "2014-11-26T23:01:22Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "c9bde057-3091-4668-94db-71a45d0b5143",
        "parentId" : "782b4de2-c2d2-47a3-9b67-f97270e3b233",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Agree\n",
        "createdAt" : "2014-11-26T23:11:47Z",
        "updatedAt" : "2014-11-26T23:11:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dbfb803497017b074422886dbb6bcb02af9e9e9",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +125,129 @@// Config implements Builder\nfunc (builder *builder) Config() (*client.Config, error) {\n\tclientConfig := client.Config{}\n\tif len(builder.apiserver) > 0 {\n\t\tclientConfig.Host = builder.apiserver"
  },
  {
    "id" : "780ef47c-e409-44b0-8db0-5bf00ea6afdc",
    "prId" : 2437,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee89aed4-f7df-44d9-b224-11789ed92f2a",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "What happens if I never call BindFlags?  Is that a legitimate usage mode, or will this return an error?\n",
        "createdAt" : "2014-11-26T23:02:19Z",
        "updatedAt" : "2014-11-26T23:02:19Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "56b8b8af-6f92-4edb-bc9b-85b22d6eda72",
        "parentId" : "ee89aed4-f7df-44d9-b224-11789ed92f2a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It is if you fill the struct yourself - an example would be populating from file.\n\nI do think bind is separate from the factory aspect - since bind must precede config/client it would be better to require bind up front, with the outcome being an interface you can client or config.\n",
        "createdAt" : "2014-11-26T23:09:35Z",
        "updatedAt" : "2014-11-26T23:09:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dbfb803497017b074422886dbb6bcb02af9e9e9",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +37,41 @@\tConfig() (*client.Config, error)\n\t// Client calls BuildConfig under the covers and uses that config to return a client\n\tClient() (*client.Client, error)\n}\n"
  },
  {
    "id" : "6bfe2e3a-e77c-4b8a-9003-65cd87eb2d48",
    "prId" : 2437,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "486df43f-26e5-4a75-90ac-22fabada0ae2",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Frankly I find the idea of libs binding flags to be suspect from the beginning, doubly so if that imposes particular flag libs on the caller.  Instinct would lead me to say \"just fill a struct and let the main pkg define flags\".  Is that a non-starter?\n",
        "createdAt" : "2014-11-26T23:02:25Z",
        "updatedAt" : "2014-11-26T23:02:25Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "17176927-37a1-47b3-a927-6b8fc203a30d",
        "parentId" : "486df43f-26e5-4a75-90ac-22fabada0ae2",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The point of this was to prevent everyone from inventing their own flags.  Both major flag libs are compatible.\n",
        "createdAt" : "2014-11-26T23:07:11Z",
        "updatedAt" : "2014-11-26T23:07:11Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "1a440d2f-fd39-43b7-b666-cf6cd47a4845",
        "parentId" : "486df43f-26e5-4a75-90ac-22fabada0ae2",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "I get the point, but IMO flags are _strictly_ the domain of the app.  we use flags-in-libs pervasively in google and it's sort of a nightmare, in my opinion, though reasonable people disagree.  Without flag namespacing, it's a slippery slope, and I don't want most of our code following this pattern.\n",
        "createdAt" : "2014-11-26T23:18:32Z",
        "updatedAt" : "2014-11-26T23:18:32Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "2f2bf7ee-5de9-4fc5-a194-445c0ca0d5f3",
        "parentId" : "486df43f-26e5-4a75-90ac-22fabada0ae2",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "As an example of why I dislike it:  skydns uses our BindFlags... and they end up with a flag called -master.  That is a thoroughly UNHELPFUL flag name.  It should have been --kubernetes-master or something.  We can not, in a library, predict what flag names will make sense in an app, and we should not pretend we can.\n",
        "createdAt" : "2014-11-26T23:21:47Z",
        "updatedAt" : "2014-11-26T23:21:47Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "098c09c7-9e47-48c3-9319-721e8eb4a963",
        "parentId" : "486df43f-26e5-4a75-90ac-22fabada0ae2",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The counter argument here is that having 29 different flag names for the same security params is worse.  This was mostly targeted at that.  And if master doesn't have consistent meaning across our commands (kubelet, proxy, client), that's just as confusing\n\n> On Nov 26, 2014, at 5:22 PM, Tim Hockin notifications@github.com wrote:\n> \n> In pkg/client/clientcmd/client_builder.go:\n> \n> > -   \"fmt\"\n> > -   \"os\"\n> > -   \"reflect\"\n> >   +\n> > -   \"github.com/spf13/pflag\"\n> >   +\n> > -   \"github.com/GoogleCloudPlatform/kubernetes/pkg/api/latest\"\n> > -   \"github.com/GoogleCloudPlatform/kubernetes/pkg/client\"\n> > -   \"github.com/GoogleCloudPlatform/kubernetes/pkg/clientauth\"\n> > -   \"github.com/GoogleCloudPlatform/kubernetes/pkg/version\"\n> >   +)\n> >   +\n> >   +// Builder are used to bind and interpret command line flags to make it easy to get an api server client\n> >   +type Builder interface {\n> > -   // BindFlags must bind and keep track of all the flags required to build a client config object\n> > -   BindFlags(flags *pflag.FlagSet)\n> >   As an example of why I dislike it: skydns uses our BindFlags... and they end up with a flag called -master. That is a thoroughly UNHELPFUL flag name. It should have been --kubernetes-master or something. We can not, in a library, predict what flag names will make sense in an app, and we should not pretend we can.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-11-26T23:27:12Z",
        "updatedAt" : "2014-11-26T23:27:12Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "51403405-c5e8-491b-a775-856d109213a0",
        "parentId" : "486df43f-26e5-4a75-90ac-22fabada0ae2",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "Just because they CAN be different doesn't mean they WILL be.  simply being able to prefix them all with \"k8s-\" is \"different\" but not substantively so.\n\nAs a compromise, I could live with a lib that exposed the common flags and produced a set of common structs or an interface which was mandatory for any client binary inside our own codebase, but optional for clients like skydns.  Bonus points if the flag names could be trivially prefixed, so that this lib was usable by skydns in a sane way.\n",
        "createdAt" : "2014-11-26T23:34:00Z",
        "updatedAt" : "2014-11-26T23:34:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      },
      {
        "id" : "c7642b7f-b5e4-437c-b4c1-924bdc923810",
        "parentId" : "486df43f-26e5-4a75-90ac-22fabada0ae2",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "That makes sense to me.\n\n> On Nov 26, 2014, at 5:34 PM, Tim Hockin notifications@github.com wrote:\n> \n> In pkg/client/clientcmd/client_builder.go:\n> \n> > -   \"fmt\"\n> > -   \"os\"\n> > -   \"reflect\"\n> >   +\n> > -   \"github.com/spf13/pflag\"\n> >   +\n> > -   \"github.com/GoogleCloudPlatform/kubernetes/pkg/api/latest\"\n> > -   \"github.com/GoogleCloudPlatform/kubernetes/pkg/client\"\n> > -   \"github.com/GoogleCloudPlatform/kubernetes/pkg/clientauth\"\n> > -   \"github.com/GoogleCloudPlatform/kubernetes/pkg/version\"\n> >   +)\n> >   +\n> >   +// Builder are used to bind and interpret command line flags to make it easy to get an api server client\n> >   +type Builder interface {\n> > -   // BindFlags must bind and keep track of all the flags required to build a client config object\n> > -   BindFlags(flags *pflag.FlagSet)\n> >   Just because they CAN be different doesn't mean they WILL be. simply being able to prefix them all with \"k8s-\" is \"different\" but not substantively so.\n> \n> As a compromise, I could live with a lib that exposed the common flags and produced a set of common structs or an interface which was mandatory for any client binary inside our own codebase, but optional for clients like skydns. Bonus points if the flag names could be trivially prefixed, so that this lib was usable by skydns in a sane way.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-11-26T23:48:23Z",
        "updatedAt" : "2014-11-26T23:48:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "6780f877-c4cd-43b4-b1a7-70db54f1978d",
        "parentId" : "486df43f-26e5-4a75-90ac-22fabada0ae2",
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "#2644 filed\n",
        "createdAt" : "2014-11-26T23:57:00Z",
        "updatedAt" : "2014-11-26T23:57:00Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dbfb803497017b074422886dbb6bcb02af9e9e9",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@type Builder interface {\n\t// BindFlags must bind and keep track of all the flags required to build a client config object\n\tBindFlags(flags *pflag.FlagSet)\n\t// Config uses the values of the bound flags and builds a complete client config\n\tConfig() (*client.Config, error)"
  },
  {
    "id" : "11466554-f947-4020-8851-3d4937c71705",
    "prId" : 2437,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b06b7ad0-9b48-4d52-9c76-650eff883b5a",
        "parentId" : null,
        "authorId" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "body" : "NewClient() - makes it clear this is not an accessor and that repeated calls would get different instances.\n",
        "createdAt" : "2014-11-26T23:02:38Z",
        "updatedAt" : "2014-11-26T23:02:38Z",
        "lastEditedBy" : "f87fe7d3-581c-4cb6-b17e-b807c6f2c789",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dbfb803497017b074422886dbb6bcb02af9e9e9",
    "line" : 100,
    "diffHunk" : "@@ -1,1 +98,102 @@\n// Client implements Builder\nfunc (builder *builder) Client() (*client.Client, error) {\n\tclientConfig, err := builder.Config()\n\tif err != nil {"
  }
]