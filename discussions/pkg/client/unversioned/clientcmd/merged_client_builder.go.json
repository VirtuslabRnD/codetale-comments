[
  {
    "id" : "6593e036-9073-4db1-b038-ffc19477aac5",
    "prId" : 32613,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/32613#pullrequestreview-24460",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "29558eb0-a7e8-4154-a7c6-a50b929cf0e5",
        "parentId" : null,
        "authorId" : null,
        "body" : "I'm not 100% sure about the !IsEmptyConfig part.  @smarterclayton can you confirm?\nThe unit test looks legit to me, but I'm no expert on this stuff.\n",
        "createdAt" : "2016-09-13T22:55:43Z",
        "updatedAt" : "2016-09-13T22:55:43Z",
        "lastEditedBy" : null,
        "tags" : [
        ]
      },
      {
        "id" : "9a33366f-597f-4e09-9dce-341395c1c28f",
        "parentId" : "29558eb0-a7e8-4154-a7c6-a50b929cf0e5",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "A configuration that is both default and non-empty must still be checked.   DefaultClientConfigs are only sometimes empty.\n",
        "createdAt" : "2016-09-14T00:34:36Z",
        "updatedAt" : "2016-09-14T00:34:56Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "6d85ad5b-2bb1-43b6-89c1-dded9e87ee7f",
        "parentId" : "29558eb0-a7e8-4154-a7c6-a50b929cf0e5",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "So you still need to do the check against the default config in the non empty (err == nil) case.  IsConfigurationInvalid covers IsEmptyConfig already.\n",
        "createdAt" : "2016-09-14T00:36:06Z",
        "updatedAt" : "2016-09-14T00:36:06Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "e6a3771e-4c5d-4731-8a39-6e84f4ab555e",
        "parentId" : "29558eb0-a7e8-4154-a7c6-a50b929cf0e5",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "> A configuration that is both default and non-empty must still be checked. DefaultClientConfigs are only sometimes empty.\n\nThis code needs a major overhaul. I think it doesn't handle a few cases. But the question is, should that block the release?\n\n> So you still need to do the check against the default config in the non empty (err == nil) case. \n\nThis is already being done by `DeepEqual` below.\n\n> IsConfigurationInvalid covers IsEmptyConfig already.\n\nNo, they don't? `IsConfigurationInvalid` check is for the `DefaultConfig`. `IsEmptyConfig` is for the original config, i.e. `mergedConfig`. They are both calling different error objects, `defErr` and `err` respectively.\n",
        "createdAt" : "2016-09-14T00:48:06Z",
        "updatedAt" : "2016-09-14T00:48:06Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "854b83fd-94ff-4d3e-b10e-7bd9fd38d0c6",
        "parentId" : "29558eb0-a7e8-4154-a7c6-a50b929cf0e5",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Why are you checking IsEmptyConfig again then?  It's checked 3 lines above.\n",
        "createdAt" : "2016-09-14T00:54:24Z",
        "updatedAt" : "2016-09-14T00:54:24Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "8bb8601f-b5a9-4ec9-92dd-8eadb183e45f",
        "parentId" : "29558eb0-a7e8-4154-a7c6-a50b929cf0e5",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "> A configuration that is both default and non-empty must still be checked. DefaultClientConfigs are only sometimes empty.\n\nYes - if you do this you break kubectl's behavior here, which does have a default.\n",
        "createdAt" : "2016-09-14T00:54:47Z",
        "updatedAt" : "2016-09-14T00:54:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "450a3270-8c09-444a-b90d-a6110ffd27ae",
        "parentId" : "29558eb0-a7e8-4154-a7c6-a50b929cf0e5",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I see the moved deep equal - so if you remove the IsEmptyConfig check we're back to the original PR + test and I'm ok with it.\n",
        "createdAt" : "2016-09-14T00:56:35Z",
        "updatedAt" : "2016-09-14T00:56:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "c5fb30f7-8760-4ef0-8db8-cb4fd27d7a98",
        "parentId" : "29558eb0-a7e8-4154-a7c6-a50b929cf0e5",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "@smarterclayton \n\n> Why are you checking IsEmptyConfig again then? It's checked 3 lines above.\n\nThat check doesn't do what this check is doing. If err is `EmptyConfigError`\n\n``` go\ncase err != nil && !IsEmptyConfig(err):\n```\n\nfalls through, which means code enters \n\n``` go\ncase mergedConfig != nil:\n```\n\nwhen `mergedConfig` is not `nil`. But `mergedConfig` can still be non-nil and empty. I don't know if that ever happens in practice. But there is a unit test for it. See - https://github.com/kubernetes/kubernetes/blob/master/pkg/client/unversioned/clientcmd/merged_client_builder_test.go#L141.\n\n> > A configuration that is both default and non-empty must still be checked. DefaultClientConfigs are only sometimes empty.\n> \n> Yes - if you do this you break kubectl's behavior here, which does have a default.\n\nI am not sure what \"this\" means here. The context/quote isn't helping either. What breaks kubectl's behavior? Please help?\n\n> I see the moved deep equal - so if you remove the IsEmptyConfig check we're back to the original PR + test and I'm ok with it.\n\nThe original PR doesn't work. See a broken test from the original PR here - https://k8s-gubernator.appspot.com/build/kubernetes-jenkins/pr-logs/pull/32438/kubernetes-pull-test-unit-integration/44167/\n\nThe original PR doesn't check for the case when `mergedConfig` is empty but not nil.\n",
        "createdAt" : "2016-09-14T04:07:43Z",
        "updatedAt" : "2016-09-14T04:08:22Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "4961769b-5341-4a36-955f-c31983767d02",
        "parentId" : "29558eb0-a7e8-4154-a7c6-a50b929cf0e5",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Let's list the cases that should return the original base config:\n1. base config was returned and base config is not equal to defaultConfig (and the defaultConfig is not empty)\n\nThe cases that should return errors:\n1. base config returned any error except IsEmpty\n\nThe cases that should fall through to in-cluster are \n1. base config is valid and non-default\n2. base config is empty AND (default config is empty OR default config == base config)\n\nIt looks like the code you have here does that after deeper inspection, but I want to make sure we're all on the same page with the descriptions.\n",
        "createdAt" : "2016-09-14T15:59:02Z",
        "updatedAt" : "2016-09-14T15:59:57Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "8f6a4adf-5924-4b87-b6e6-3dfc6fd21d27",
        "parentId" : "29558eb0-a7e8-4154-a7c6-a50b929cf0e5",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "@smarterclayton I agree with all the cases here except:\n\n> The cases that should fall through to in-cluster are\n> 1. base config is valid and non-default\n\nWhy should this fall through to the in-cluster config? This is a problem, for example, for federation. The config is of federation API server and non-default. It cannot just return in-cluster config.\n\nI think this is an unfortunate consequence of an explicit lack of contract for `DefaultClientConfig`. In my view, constructed from grepping through Kubernetes source code, `DefaultClientConfig` is essentially a const. I don't see who/where it is modified. So it can never be non-empty or valid with the way it is now. But you probably have a different view where something is modifying the `DefaultClientConfig`.\n\nBut anyway, this is what is happening today. for this case. This isn't a problem for federation right now, because we never provide a valid default.\n\nI think we should get this merged to unblock federation and the release. and debate about the cases separately.\n",
        "createdAt" : "2016-09-14T18:22:48Z",
        "updatedAt" : "2016-09-14T18:23:24Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      },
      {
        "id" : "f5c81736-631d-43ac-9419-f9a7e3a5682e",
        "parentId" : "29558eb0-a7e8-4154-a7c6-a50b929cf0e5",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Case 1 was a cut and paste error apparently.\n\nThe reason I am being extra picky here is that this has already broken twice because it's hard to reason about what can happen.  I'd like to not have this be the third time - if we fix federation and break kubectl, that's not much better.\n\nAt this point I think this PR is correct so I'm ok with merging.\n",
        "createdAt" : "2016-09-14T18:50:24Z",
        "updatedAt" : "2016-09-14T18:50:24Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "cbe17221-596c-44d4-96b4-040ae6732b1f",
        "parentId" : "29558eb0-a7e8-4154-a7c6-a50b929cf0e5",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "> The reason I am being extra picky here is that this has already broken twice because it's hard to reason about what can happen.\n\n@smarterclayton that's fair and makes sense.\n\n> I'd like to not have this be the third time - if we fix federation and break kubectl, that's not much better.\n\nThat would be a much worse situation indeed :smile: \n\nThanks for the LGTM!\n",
        "createdAt" : "2016-09-14T19:00:52Z",
        "updatedAt" : "2016-09-14T19:00:52Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "c4acaa6717b8ef00ffcfbe33bbf88f355f010982",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +114,118 @@\t\t//   handling this.\n\t\tdefaultConfig, defErr := DefaultClientConfig.ClientConfig()\n\t\tif IsConfigurationInvalid(defErr) && !IsEmptyConfig(err) {\n\t\t\treturn mergedConfig, nil\n\t\t}"
  },
  {
    "id" : "3d0a9e99-954c-4a0d-b180-cc98fbe3a7c6",
    "prId" : 31947,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "53da6d2a-b7b9-44de-9411-e281fd970ade",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "If this is going to have priority, why don't we do it first?\n",
        "createdAt" : "2016-09-06T12:16:08Z",
        "updatedAt" : "2016-09-06T21:46:58Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "bbd987b4-59fa-444e-95ab-2745ebf7b395",
        "parentId" : "53da6d2a-b7b9-44de-9411-e281fd970ade",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "hrm, I see.  It doesn't have priority.  And it can't go into the switch above because of the error handling down the non-nil patch.  What sticky little bit of code.  \n",
        "createdAt" : "2016-09-06T12:19:34Z",
        "updatedAt" : "2016-09-06T21:46:58Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "48b4d6d30c69314c71d1d6eb0d048311d63f5f16",
    "line" : 68,
    "diffHunk" : "@@ -1,1 +120,124 @@\n\t// check for in-cluster configuration and use it\n\tif config.icc.Possible() {\n\t\treturn config.icc.ClientConfig()\n\t}"
  }
]