[
  {
    "id" : "cd816405-8d2e-40a0-a19c-4797fa9f83f8",
    "prId" : 35679,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35679#pullrequestreview-9222927",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8b7824c-7f4f-4843-a38d-ec285198de35",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I think you add the \"do I already have a username/password\" check right here.\n",
        "createdAt" : "2016-11-18T13:18:47Z",
        "updatedAt" : "2016-11-22T03:19:45Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "8d4df82d56d9f213d1e1495d5f8e90189570504e",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +247,251 @@\t\t\treturn mergedConfig, nil\n\t\t}\n\t\tprompter := NewPromptingAuthLoader(fallbackReader)\n\t\tpromptedAuthInfo, err := prompter.Prompt()\n\t\tif err != nil {"
  },
  {
    "id" : "123e7990-9512-4321-a6dd-0d3918d6509e",
    "prId" : 29236,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "490b3b19-4d67-4156-bbb1-3234daa6df11",
        "parentId" : null,
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "@liggitt \n\n> I would not expect specifying a current context that does not exist to work well... do we need to reexamine the test?\n\nHm, [the test does seem to pass a context](https://github.com/kubernetes/kubernetes/blob/master/test/integration/kubectl/kubectl_test.go#L56) to `clientcmd.ConfigOverrides`.\nPerhaps a possible change could be to alter this else if to be something like `} else if required && config.overrides.Context == nil {` ?\n",
        "createdAt" : "2016-08-29T18:51:18Z",
        "updatedAt" : "2016-10-06T20:29:14Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      },
      {
        "id" : "a7bf37f6-1501-46b5-9970-b1fd2c709a13",
        "parentId" : "490b3b19-4d67-4156-bbb1-3234daa6df11",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I'm still not seeing why the test needs to send an overridden \"current context\" at all, if it's overriding the actual context values\n",
        "createdAt" : "2016-08-29T19:09:37Z",
        "updatedAt" : "2016-10-06T20:29:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "562c7f4c-8eb2-4e62-854e-75517304c06a",
        "parentId" : "490b3b19-4d67-4156-bbb1-3234daa6df11",
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "@liggitt \n\n> I'm still not seeing why the test needs to send an overridden \"current context\" at all, if it's overriding the actual context values\n\nI went ahead and removed the `CurentContext` override from the test. I kept the new `IgnoreMissingContext` [flag as a way to tell client_config when to 'require' a context](https://github.com/kubernetes/kubernetes/pull/29236/commits/6adf162344be6d38f55fede3e016b33724918fa1#diff-093eaa515b227f1070ec0fda3f8e0137R297) that has been overridden (the kubectl integration test otherwise still fails without it). PTAL\n\nEDIT: Removed `IgnoreMissingContext`, all that was needed for the integration test to pass was to just remove the `CurrentContext` override it was doing.\n",
        "createdAt" : "2016-08-30T16:43:52Z",
        "updatedAt" : "2016-10-06T20:29:14Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "6f925b1f8267851f252c69478cbcf3dec1d181a5",
    "line" : 128,
    "diffHunk" : "@@ -1,1 +367,371 @@\tif configContext, exists := contexts[contextName]; exists {\n\t\tmergo.Merge(&mergedContext, configContext)\n\t} else if required {\n\t\treturn clientcmdapi.Context{}, fmt.Errorf(\"context %q does not exist\", contextName)\n\t}"
  },
  {
    "id" : "fa883a0c-1c1b-4592-b5e3-6f27e036d283",
    "prId" : 24304,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce7054d8-0c82-452c-85d6-4c87739c6dd4",
        "parentId" : null,
        "authorId" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "body" : "Copied over comments from old commit:\n\n> @deads2k: Seems like you have enough information here to build your persister instead of passing it around.\n> \n> @cjcullen: I passed it through the DirectClientConfig so that I could plumb through the loadingRules from the DeferredLoadingClientConfig in merged_client_builder.go. I assumed this was necessary to make sure the old config gets loaded correctly. Was that a bad assumption?\n",
        "createdAt" : "2016-04-15T00:40:30Z",
        "updatedAt" : "2016-05-08T01:15:30Z",
        "lastEditedBy" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "tags" : [
        ]
      },
      {
        "id" : "db45e4e4-ae3e-4893-8c6a-c125f70a75cd",
        "parentId" : "ce7054d8-0c82-452c-85d6-4c87739c6dd4",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> @cjcullen: I passed it through the DirectClientConfig so that I could plumb through the loadingRules from the DeferredLoadingClientConfig in merged_client_builder.go. I assumed this was necessary to make sure the old config gets loaded correctly. Was that a bad assumption?\n\nI think the API will be easier to use if the `ClientConfig` has a method to get its `ConfigAccess`, which I'm pretty sure has enough enough information to modify the config.  Looks like you've already got one in the persisting struct, but I think its locations aren't being set to match to loading rules.\n",
        "createdAt" : "2016-05-03T12:22:21Z",
        "updatedAt" : "2016-05-08T01:15:30Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "7532a41b-39bb-47ea-a494-251b803fbf38",
        "parentId" : "ce7054d8-0c82-452c-85d6-4c87739c6dd4",
        "authorId" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "body" : "That does sound cleaner. I'll rework this.\n",
        "createdAt" : "2016-05-03T16:33:40Z",
        "updatedAt" : "2016-05-08T01:15:30Z",
        "lastEditedBy" : "3cd3a661-80f4-45b3-bae0-5a78fbaedc59",
        "tags" : [
        ]
      }
    ],
    "commit" : "13a7d92d0f50e877edeb4225f73ae106b33bf152",
    "line" : null,
    "diffHunk" : "@@ -1,1 +120,124 @@\t\t\tpersister = PersisterForUser(config.configAccess, config.getAuthInfoName())\n\t\t}\n\t\tuserAuthPartialConfig, err := getUserIdentificationPartialConfig(configAuthInfo, config.fallbackReader, persister)\n\t\tif err != nil {\n\t\t\treturn nil, err"
  },
  {
    "id" : "c6a2e1fc-11b8-42cc-8749-4bee49fc7b38",
    "prId" : 21095,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e3c964c-47bd-4f19-bd6c-ef91894f05e1",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Note that this is required for backwards compatibility with old clients\n",
        "createdAt" : "2016-02-11T20:42:00Z",
        "updatedAt" : "2016-02-11T20:51:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "fa8ea888-eec8-4acd-8c2f-f41ea3b05546",
        "parentId" : "4e3c964c-47bd-4f19-bd6c-ef91894f05e1",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "noted\n",
        "createdAt" : "2016-02-11T20:49:47Z",
        "updatedAt" : "2016-02-11T20:51:34Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6be3610b-d901-43fa-9855-075345f860a1",
        "parentId" : "4e3c964c-47bd-4f19-bd6c-ef91894f05e1",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This should have been prefixed with KUBERNETES_, KUBE_, or somesuch. :-(\n\nLots of examples use this, but I don't see it actually documented somewhere. \n",
        "createdAt" : "2016-02-11T22:20:19Z",
        "updatedAt" : "2016-02-11T22:20:19Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "401f3c0b-190c-4c49-beed-d3a2de3dfc7b",
        "parentId" : "4e3c964c-47bd-4f19-bd6c-ef91894f05e1",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "agree :-(\n",
        "createdAt" : "2016-02-11T22:22:27Z",
        "updatedAt" : "2016-02-11T22:22:27Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "20216fa6076b9c6d7df8d137ea3c9a307566692b",
    "line" : 18,
    "diffHunk" : "@@ -1,1 +328,332 @@\nfunc (inClusterClientConfig) Namespace() (string, error) {\n\t// This way assumes you've set the POD_NAMESPACE environment variable using the downward API.\n\t// This check has to be done first for backwards compatibility with the way InClusterConfig was originally set up\n\tif ns := os.Getenv(\"POD_NAMESPACE\"); ns != \"\" {"
  }
]