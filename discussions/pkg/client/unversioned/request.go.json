[
  {
    "id" : "61c2f94c-7590-4d45-8449-abcd77c96c14",
    "prId" : 21104,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1513bdd5-26db-4e91-9f41-18f4acdd709c",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Godoc about what the throttle throttles\n",
        "createdAt" : "2016-02-12T00:34:23Z",
        "updatedAt" : "2016-02-12T00:34:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "8396df57e6d07567be1a88ae1e9744bf5ffdfefa",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +116,120 @@\n// NewRequest creates a new request helper object for accessing runtime.Objects on a server.\nfunc NewRequest(client HTTPClient, verb string, baseURL *url.URL, versionedAPIPath string, content ContentConfig, backoff BackoffManager, throttle util.RateLimiter) *Request {\n\tif backoff == nil {\n\t\tglog.V(2).Infof(\"Not implementing request backoff strategy.\")"
  },
  {
    "id" : "02507bde-7099-4636-a71f-42654b1e5420",
    "prId" : 20674,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a16f7026-a6bb-42d1-b417-030cc20b30c5",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Add a comment that this is for compatibility with servers that do not return proper version info on status so someone doesn't come along and refactor\n",
        "createdAt" : "2016-02-05T00:04:22Z",
        "updatedAt" : "2016-02-05T00:12:26Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "4fa70b5b-de42-4e6c-9e09-f9e5ffc59419",
        "parentId" : "a16f7026-a6bb-42d1-b417-030cc20b30c5",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Comments added.\n",
        "createdAt" : "2016-02-05T00:13:01Z",
        "updatedAt" : "2016-02-05T00:13:01Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "0d772a7a529208cc70432ddee0b24c907312d10c",
    "line" : null,
    "diffHunk" : "@@ -1,1 +846,850 @@\t// default groupVersion, otherwise a status response won't be correctly\n\t// decoded.\n\tstatus := &unversioned.Status{}\n\terr := runtime.DecodeInto(r.content.Codec, body, status)\n\tif err == nil && len(status.Status) > 0 {"
  },
  {
    "id" : "875b783d-5c24-4597-bb85-37a26ba68199",
    "prId" : 20623,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bf39d06-cae4-4ef5-a456-4f03a04e75d8",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Why not doing it inside the transformResponse?\n",
        "createdAt" : "2016-02-04T22:52:08Z",
        "updatedAt" : "2016-02-04T22:52:08Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "1fc914af-96f3-4607-a4e2-9ce5262eaf2b",
        "parentId" : "7bf39d06-cae4-4ef5-a456-4f03a04e75d8",
        "authorId" : "b96e61ce-4ca0-4aad-a5ec-fc085dbcb14a",
        "body" : "yes. i think of it. i wonder whether it(`the resp`) will be  used out side of the transformResponse.\n",
        "createdAt" : "2016-02-06T01:08:13Z",
        "updatedAt" : "2016-02-06T01:08:13Z",
        "lastEditedBy" : "b96e61ce-4ca0-4aad-a5ec-fc085dbcb14a",
        "tags" : [
        ]
      },
      {
        "id" : "7826955f-a7d5-47d2-9955-b2b4dfdfe848",
        "parentId" : "7bf39d06-cae4-4ef5-a456-4f03a04e75d8",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "It seems `resp.Body` is not used out side of transformResponse. Could you move it to where it's used inside transformResponse? Thanks.\n",
        "createdAt" : "2016-02-08T17:58:36Z",
        "updatedAt" : "2016-02-08T17:58:36Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "4258199d-140e-46dc-849b-62cfbe7fccd6",
        "parentId" : "7bf39d06-cae4-4ef5-a456-4f03a04e75d8",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I'd rather keep it here to make it easy to confirm that the body is closed in the same place we create it\n",
        "createdAt" : "2016-02-08T20:02:25Z",
        "updatedAt" : "2016-02-08T20:02:25Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e95ed007-2a79-4484-b130-e2a7999cd503",
        "parentId" : "7bf39d06-cae4-4ef5-a456-4f03a04e75d8",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "My bad, my understanding of `Close()` was wrong, we should close the body in this function. Although shall we do it out of the if condition, right after the error check?\n",
        "createdAt" : "2016-02-08T21:25:09Z",
        "updatedAt" : "2016-02-08T21:25:09Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "22a4e895-a32a-46a2-b4f6-00c91c8788b8",
        "parentId" : "7bf39d06-cae4-4ef5-a456-4f03a04e75d8",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "no, otherwise the returned streamwatcher would be useless, since the underlying body would have been closed.\n",
        "createdAt" : "2016-02-08T22:02:59Z",
        "updatedAt" : "2016-02-08T22:02:59Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2ad87379-0d46-499d-9a23-34d5cf66d1bd",
        "parentId" : "7bf39d06-cae4-4ef5-a456-4f03a04e75d8",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I see. Thanks for the explanation. LGTM.\n",
        "createdAt" : "2016-02-08T22:22:58Z",
        "updatedAt" : "2016-02-08T22:22:58Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "2d701e8ac807979d6be2ffd03852ed793e335255",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +643,647 @@\t}\n\tif resp.StatusCode != http.StatusOK {\n\t\tdefer resp.Body.Close()\n\t\tif result := r.transformResponse(resp, req); result.err != nil {\n\t\t\treturn nil, result.err"
  },
  {
    "id" : "38632820-c850-4277-ade7-61554ce27677",
    "prId" : 19105,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "14bce4ed-e0dc-4846-8b8a-b966f95fc794",
        "parentId" : null,
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "if you want to be a stickler about checking the length of strings...\n\nbtw, what's the reasoning of preferring one to the other?\n",
        "createdAt" : "2016-01-06T17:55:41Z",
        "updatedAt" : "2016-01-26T22:44:37Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "8f0b2ac5-f4aa-40af-85b4-59e5916c6353",
        "parentId" : "14bce4ed-e0dc-4846-8b8a-b966f95fc794",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It was just the convention we agreed on.  The two are equivalent and\nwe were using one fairly consistently.\n",
        "createdAt" : "2016-01-06T22:46:15Z",
        "updatedAt" : "2016-01-26T22:44:37Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "38c7eded9992ab3094d6d0173a722cf59f18006f",
    "line" : 113,
    "diffHunk" : "@@ -1,1 +446,450 @@\t\t\t// TODO: Move it to setParam method, once we get rid of\n\t\t\t// FieldSelectorParam & LabelSelectorParam methods.\n\t\t\tif k == unversioned.LabelSelectorQueryParam(r.content.GroupVersion.String()) && value == \"\" {\n\t\t\t\t// Don't set an empty selector for backward compatibility.\n\t\t\t\t// Since there is no way to get the difference between empty"
  },
  {
    "id" : "892d27be-046a-4377-9a11-aab41ce8f893",
    "prId" : 19105,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57722083-be2d-41d6-8f14-e3135b59c5ef",
        "parentId" : null,
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "Not sure I see why contentType is needed here...\n",
        "createdAt" : "2016-01-06T18:00:08Z",
        "updatedAt" : "2016-01-26T22:44:37Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "4205c783-a7c0-4661-9f19-aff2f2ce0b50",
        "parentId" : "57722083-be2d-41d6-8f14-e3135b59c5ef",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The returned response will dictate which decoder to use - negotiated\nserializer is part of #17922\n",
        "createdAt" : "2016-01-06T22:47:33Z",
        "updatedAt" : "2016-01-26T22:44:37Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "38c7eded9992ab3094d6d0173a722cf59f18006f",
    "line" : 220,
    "diffHunk" : "@@ -1,1 +965,969 @@type Result struct {\n\tbody        []byte\n\tcontentType string\n\terr         error\n\tstatusCode  int"
  },
  {
    "id" : "0bf60712-b5c4-474e-b872-bdee1b301657",
    "prId" : 17885,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "17cf212c-f27d-435a-9045-81437b1de209",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This is an improvement, but metrics itself should protect against double-registration IMO.\n",
        "createdAt" : "2015-11-30T20:59:39Z",
        "updatedAt" : "2015-11-30T20:59:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "101f3848-6c1e-47c5-bfd6-75af98fa746c",
        "parentId" : "17cf212c-f27d-435a-9045-81437b1de209",
        "authorId" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "body" : "@lavalamp It does protect you from this. And in the k8s metrics pkg, it has a double protection by using sync.Once. But this change makes things easier to reason about.\n",
        "createdAt" : "2015-11-30T21:01:53Z",
        "updatedAt" : "2015-11-30T21:01:53Z",
        "lastEditedBy" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "tags" : [
        ]
      },
      {
        "id" : "95a52812-b992-4eb9-a322-bf2239d64235",
        "parentId" : "17cf212c-f27d-435a-9045-81437b1de209",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Ah, great!\n\nOn Mon, Nov 30, 2015 at 1:02 PM, Xiang Li notifications@github.com wrote:\n\n> In pkg/client/unversioned/request.go\n> https://github.com/kubernetes/kubernetes/pull/17885#discussion_r46203052\n> :\n> \n> > @@ -48,6 +48,10 @@ import (\n> >  // are therefore not allowed to set manually.\n> >  var specialParams = sets.NewString(\"timeout\")\n> > \n> > +func init() {\n> > -   metrics.Register()\n> \n> @lavalamp https://github.com/lavalamp It does protect you from this.\n> And in the k8s metrics pkg, it has a double protection by using sync.Once.\n> But this change makes things easier to reason about.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/17885/files#r46203052.\n",
        "createdAt" : "2015-11-30T22:30:56Z",
        "updatedAt" : "2015-11-30T22:30:56Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "18d25a93-106d-4b56-9a01-a1995fb546cb",
        "parentId" : "17cf212c-f27d-435a-9045-81437b1de209",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yeah - the code before was correct - it wasn't correctness improvement.\n\nIt is just that we avoid some unnecessary checks (under lock) when creating every single request.\n",
        "createdAt" : "2015-12-01T07:10:09Z",
        "updatedAt" : "2015-12-01T07:10:09Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0521481655b2ead465f801711162ed9553ec9cb3",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +50,54 @@\nfunc init() {\n\tmetrics.Register()\n}\n"
  },
  {
    "id" : "cc45279b-f7c8-467d-a756-e9f34a545568",
    "prId" : 17836,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a8b3bb3f-3581-4f96-bd09-d82a207e2723",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "clarify the nature of the backwards compatibility?\n",
        "createdAt" : "2015-11-30T19:22:50Z",
        "updatedAt" : "2015-11-30T19:56:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "57eb1ecb-df91-4715-865d-99d13717efbe",
        "parentId" : "a8b3bb3f-3581-4f96-bd09-d82a207e2723",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "We just didn't set the corresponding url param it that wasn't set. So I didn't want to explicitly set fieldSelector=&labelSelector= in every request.\n",
        "createdAt" : "2015-11-30T19:32:17Z",
        "updatedAt" : "2015-11-30T19:56:23Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e7fd55922e01e299af9f2104523440d10ff4329",
    "line" : null,
    "diffHunk" : "@@ -1,1 +432,436 @@\t\t\t// FieldSelectorParam & LabelSelectorParam methods.\n\t\t\tif k == unversioned.LabelSelectorQueryParam(r.apiVersion) && value == \"\" {\n\t\t\t\t// Don't set an empty selector for backward compatibility.\n\t\t\t\t// Since there is no way to get the difference between empty\n\t\t\t\t// and unspecified string, we don't set it to avoid having"
  },
  {
    "id" : "00b5d942-54dd-4f34-acee-901b3f0a6eb0",
    "prId" : 17836,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1709aa35-29cd-47fa-8d82-7528877f9386",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I see. Perhaps we need to fix the converter or make something into a pointer so we can tell the difference between unspecified and deliberately set to \"\"? I don't _think_ we make a distinction in query parameters, but we do for the label selectors in e.g. service objects-- unset means nothing and set-but-empty means everything. So this may be important to get right, or at least expand the comment?\n",
        "createdAt" : "2015-11-30T19:39:33Z",
        "updatedAt" : "2015-11-30T19:56:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "1004e73f-f5af-4f8b-b67b-3d76680d969a",
        "parentId" : "1709aa35-29cd-47fa-8d82-7528877f9386",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "The issue here is that in golang there is no way to differ \"\" and unspecified string.\nI will expand this comment.\n",
        "createdAt" : "2015-11-30T19:42:46Z",
        "updatedAt" : "2015-11-30T19:56:23Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "d8ff2026-7589-4c89-9ff7-64dd99c47147",
        "parentId" : "1709aa35-29cd-47fa-8d82-7528877f9386",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Right, and this may not be a big deal-- but you'd probably have to fix this a level up by making unversioned.ListOptions distinguish between unset selector and set-but-empty (by making it a pointer, if necessary).\n",
        "createdAt" : "2015-11-30T19:49:11Z",
        "updatedAt" : "2015-11-30T19:56:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "f4b693a2-0096-40c2-8113-8e0beee6f736",
        "parentId" : "1709aa35-29cd-47fa-8d82-7528877f9386",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Can we do it in a separate PR?\nThis PR is not introducing any regression.\n",
        "createdAt" : "2015-11-30T19:51:49Z",
        "updatedAt" : "2015-11-30T19:56:23Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "a96a9e14-0409-4b61-8f18-8e2fc1fc7381",
        "parentId" : "1709aa35-29cd-47fa-8d82-7528877f9386",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Sure, that's fine.\n\nOn Mon, Nov 30, 2015 at 11:52 AM, Wojciech Tyczynski <\nnotifications@github.com> wrote:\n\n> In pkg/client/unversioned/request.go\n> https://github.com/kubernetes/kubernetes/pull/17836#discussion_r46193654\n> :\n> \n> > @@ -427,8 +427,36 @@ func (r *Request) VersionedParams(obj runtime.Object, convertor runtime.ObjectCo\n> >         return r\n> >     }\n> >     for k, v := range params {\n> > -       for _, vv := range v {\n> > -           r.setParam(k, vv)\n> > -       for _, value := range v {\n> > -           // TODO: Move it to setParam method, once we get rid of\n> > -           // FieldSelectorParam & LabelSelectorParam methods.\n> > -           if k == unversioned.LabelSelectorQueryParam(r.apiVersion) && value == \"\" {\n> > -               // Don't set an empty selector for backward compatibility.\n> \n> Can we do it in a separate PR?\n> This PR is not introducing any regression.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/17836/files#r46193654.\n",
        "createdAt" : "2015-11-30T19:53:45Z",
        "updatedAt" : "2015-11-30T19:56:23Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7078594e-46d9-44f7-81ee-1e052604ad62",
        "parentId" : "1709aa35-29cd-47fa-8d82-7528877f9386",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This really needs to be in a converter.  I view this as an ugly side effect of unversioned.ListOptions (which I commented on the other that I don't believe is the right direction anymore).\n",
        "createdAt" : "2015-12-09T16:11:31Z",
        "updatedAt" : "2015-12-09T16:11:31Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "6cd7f8d0-3fac-4153-8805-8d0ad607cebd",
        "parentId" : "1709aa35-29cd-47fa-8d82-7528877f9386",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yes - but we can move it to converter, without getting back to versioned ListOptions, I think.\n",
        "createdAt" : "2015-12-09T16:13:30Z",
        "updatedAt" : "2015-12-09T16:13:30Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "6993345c-045a-4cbf-bbdf-fee497544a17",
        "parentId" : "1709aa35-29cd-47fa-8d82-7528877f9386",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "ListOPtions _should_ be versioned is my argument.  Seeing this code, seeing\nthe field transformation code, it's basically versioning.  The API for that\nobject has to be stable, which is the whole point of what we had \"internal\"\nobjects before.  The rest of the path is wire transformation - saying that\nthere is no wire transformation for ListOptions is silly.  Creating a\ndifferent way of handling list options from all the other options is\nbasically creating an extra code path, not removing a code path.\n\nOn Wed, Dec 9, 2015 at 11:13 AM, Wojciech Tyczynski <\nnotifications@github.com> wrote:\n\n> In pkg/client/unversioned/request.go\n> https://github.com/kubernetes/kubernetes/pull/17836#discussion_r47111463\n> :\n> \n> > @@ -427,8 +427,36 @@ func (r *Request) VersionedParams(obj runtime.Object, convertor runtime.ObjectCo\n> >         return r\n> >     }\n> >     for k, v := range params {\n> > -       for _, vv := range v {\n> > -           r.setParam(k, vv)\n> > -       for _, value := range v {\n> > -           // TODO: Move it to setParam method, once we get rid of\n> > -           // FieldSelectorParam & LabelSelectorParam methods.\n> > -           if k == unversioned.LabelSelectorQueryParam(r.apiVersion) && value == \"\" {\n> > -               // Don't set an empty selector for backward compatibility.\n> \n> Yes - but we can move it to converter, without getting back to versioned\n> ListOptions, I think.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/17836/files#r47111463.\n",
        "createdAt" : "2015-12-09T16:23:18Z",
        "updatedAt" : "2015-12-09T16:23:18Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "fa779514-b75b-47c4-ba77-3a04a374c32b",
        "parentId" : "1709aa35-29cd-47fa-8d82-7528877f9386",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I'm not saying that we shouldn't get back to versioned ListOptions.\n\nWhat I'm saying is that we already had exactly the same code in Request::LabelSelector() and Request::FieldSelector before. So this code wasn't created - it was move from one place to the other.\n\nThat said - I agree it shouldn't be here. We should basically move \"fieldmappig\" to some more generic places (conversion-related) and once this is done, we can also move this code there.\nSo in my opinion, cleaning up this code is unrelated to getting back to ListOptions...\n",
        "createdAt" : "2015-12-09T16:54:54Z",
        "updatedAt" : "2015-12-09T16:54:54Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "8cfb6b97-4075-4e70-98b0-19d41dd254a3",
        "parentId" : "1709aa35-29cd-47fa-8d82-7528877f9386",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "So in other words - we should definitely clean this up, even before getting back to versioned ListOptions - because those are orthogonal problems.\n",
        "createdAt" : "2015-12-09T16:59:54Z",
        "updatedAt" : "2015-12-09T16:59:54Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "b56f8845-1f63-4c70-a814-6e23cb0f2395",
        "parentId" : "1709aa35-29cd-47fa-8d82-7528877f9386",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yes they are orthogonal, but related in the sense of location.\n\nThere should be conversion functions for field selectors that know how to\ntarget the field selectors.  The hard problem is that the type of the field\nselector is a dynamic input, not a static input.  We may need to support\nconversion options to Convert that define additional metadata that allows\nthe field selector conversion to target base on the input metadata\n(essentially an object reference).  One scheme is not guaranteed to hold\nall conversions either - so there's an inside out problem here we may have\nto solve in the future.\n\nOn Wed, Dec 9, 2015 at 12:00 PM, Wojciech Tyczynski <\nnotifications@github.com> wrote:\n\n> In pkg/client/unversioned/request.go\n> https://github.com/kubernetes/kubernetes/pull/17836#discussion_r47118963\n> :\n> \n> > @@ -427,8 +427,36 @@ func (r *Request) VersionedParams(obj runtime.Object, convertor runtime.ObjectCo\n> >         return r\n> >     }\n> >     for k, v := range params {\n> > -       for _, vv := range v {\n> > -           r.setParam(k, vv)\n> > -       for _, value := range v {\n> > -           // TODO: Move it to setParam method, once we get rid of\n> > -           // FieldSelectorParam & LabelSelectorParam methods.\n> > -           if k == unversioned.LabelSelectorQueryParam(r.apiVersion) && value == \"\" {\n> > -               // Don't set an empty selector for backward compatibility.\n> \n> So in other words - we should definitely clean this up, even before\n> getting back to versioned ListOptions - because those are orthogonal\n> problems.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/17836/files#r47118963.\n",
        "createdAt" : "2015-12-09T17:10:34Z",
        "updatedAt" : "2015-12-09T17:10:34Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "8b7a98a9-e7c6-40ce-886e-bbfb9a6fa405",
        "parentId" : "1709aa35-29cd-47fa-8d82-7528877f9386",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I agree with the first part.\n\n>  One scheme is not guaranteed to hold\n> all conversions either - so there's an inside out problem here we may have\n> to solve in the future.\n\nIf that's the case, we will need to change this code too, because currently we only have one convertor here.\n\nSorry -  I probably don't see some consequence that you can see, so I'm trying to understand them (also note that I'm not opting for not changing it back to versioned - I'm just trying to understand what it would give us now...)\n",
        "createdAt" : "2015-12-09T17:27:48Z",
        "updatedAt" : "2015-12-09T17:27:48Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "4e7fd55922e01e299af9f2104523440d10ff4329",
    "line" : 10,
    "diffHunk" : "@@ -1,1 +432,436 @@\t\t\t// FieldSelectorParam & LabelSelectorParam methods.\n\t\t\tif k == unversioned.LabelSelectorQueryParam(r.apiVersion) && value == \"\" {\n\t\t\t\t// Don't set an empty selector for backward compatibility.\n\t\t\t\t// Since there is no way to get the difference between empty\n\t\t\t\t// and unspecified string, we don't set it to avoid having"
  },
  {
    "id" : "78309450-5220-4fb5-90f4-9a78e2eac854",
    "prId" : 17535,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9515cf33-4a06-4ad2-b06d-44260e28888f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "If versionedAPIPath is supposed to overlap with any prefix in baseURL, please a) don't do that, or b) document document document, and I prefer a) unless there's a super good reason?\n",
        "createdAt" : "2016-01-08T21:12:03Z",
        "updatedAt" : "2016-01-20T00:39:11Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "dc8dc62a-ef0d-408f-839e-f0d8e6871e0e",
        "parentId" : "9515cf33-4a06-4ad2-b06d-44260e28888f",
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "OK, I've made versionedAPIPath relative\n",
        "createdAt" : "2016-01-08T23:14:05Z",
        "updatedAt" : "2016-01-20T00:39:11Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      }
    ],
    "commit" : "75f487f7bfbe0fa2d6ba23933b1a2e80e1939509",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +116,120 @@\n// NewRequest creates a new request helper object for accessing runtime.Objects on a server.\nfunc NewRequest(client HTTPClient, verb string, baseURL *url.URL, versionedAPIPath string, groupVersion unversioned.GroupVersion, codec runtime.Codec, backoff BackoffManager) *Request {\n\tif backoff == nil {\n\t\tglog.V(2).Infof(\"Not implementing request backoff strategy.\")"
  },
  {
    "id" : "d42322a0-2baa-4008-9f98-04864e76fa97",
    "prId" : 16807,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "145d7287-18eb-437a-8daa-469291312926",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I liked what I saw until I got here. Why should our client retry on server errors?  Can you tighten this to \"500's that are also ServerTimeout errors\"?  That would require pulling the body.\n",
        "createdAt" : "2015-11-05T14:26:50Z",
        "updatedAt" : "2015-11-05T14:26:50Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "80a98522-559a-4ebc-b051-6472a18e50a2",
        "parentId" : "145d7287-18eb-437a-8daa-469291312926",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Retry-After is an HTTP header that indicates the server wants the client to\ntry again.  We widen the set of errors that we honor Retry-After (we don't\nhonor everything, for precisely that reason), but if the server gives us an\nerror and tells us to try again, we'll honor it.  We may need a client\nbehavior that says \"i really, really, really never want to try again\", but\nthe server is probably right.\n\nOn Thu, Nov 5, 2015 at 9:27 AM, David Eads notifications@github.com wrote:\n\n> In pkg/client/unversioned/request.go\n> https://github.com/kubernetes/kubernetes/pull/16807#discussion_r44016403\n> :\n> \n> > @@ -839,7 +839,10 @@ func isTextResponse(resp *http.Response) bool {\n> >  // checkWait returns true along with a number of seconds if the server instructed us to wait\n> >  // before retrying.\n> >  func checkWait(resp *http.Response) (int, bool) {\n> > -   if resp.StatusCode != errors.StatusTooManyRequests {\n> > -   switch r := resp.StatusCode; {\n> > -   // any 500 error code and 429 can trigger a wait\n> > -   case r == errors.StatusTooManyRequests, r >= 500:\n> \n> I liked what I saw until I got here. Why should our client retry on server\n> errors? Can you tighten this to \"500's that are also ServerTimeout errors\"?\n> That would require pulling the body.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/16807/files#r44016403.\n",
        "createdAt" : "2015-11-05T20:06:49Z",
        "updatedAt" : "2015-11-05T20:06:49Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "3da15535b6c87e0bb8246f026cb15a21c4d05933",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +842,846 @@\tswitch r := resp.StatusCode; {\n\t// any 500 error code and 429 can trigger a wait\n\tcase r == errors.StatusTooManyRequests, r >= 500:\n\tdefault:\n\t\treturn 0, false"
  },
  {
    "id" : "a2e1edbb-c82e-4498-8c2d-52c53686a1bf",
    "prId" : 16717,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "dd214aa2-2291-4c9e-8678-ad8369df5c15",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Same everywhere in file.\n",
        "createdAt" : "2015-11-03T18:40:01Z",
        "updatedAt" : "2015-11-03T19:48:04Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "366ecd5a-5a39-4450-b98a-c00ff2275ef7",
        "parentId" : "dd214aa2-2291-4c9e-8678-ad8369df5c15",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "we either have to guard everywhere every one of these methods is called, or guard here. the primary problem is with names that will get collapsed or traverse client-side\n",
        "createdAt" : "2015-11-03T18:43:13Z",
        "updatedAt" : "2015-11-03T19:48:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "f50f7808-3be8-483a-9a3d-9edc0a196cf6",
        "parentId" : "dd214aa2-2291-4c9e-8678-ad8369df5c15",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "see examples called out in https://github.com/kubernetes/kubernetes/pull/16717#issuecomment-153275275\n",
        "createdAt" : "2015-11-03T18:43:55Z",
        "updatedAt" : "2015-11-03T19:48:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c4bb9399-cead-4a28-9809-d2dcd976664e",
        "parentId" : "dd214aa2-2291-4c9e-8678-ad8369df5c15",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Fixing this in the client is at best an optimization for non-adversarial clients, and I worry it will lead to us leaving a vulnerability in the server.\n\nIf that doesn't persuade you, then I would at least like to not import the entire api/validation package, and I think it might be simpler to check the path once in the function that builds the final URL.\n",
        "createdAt" : "2015-11-03T18:55:28Z",
        "updatedAt" : "2015-11-03T19:48:04Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "a15fedf4-9e39-4cfd-89b2-57d47b784331",
        "parentId" : "dd214aa2-2291-4c9e-8678-ad8369df5c15",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> Fixing this in the client is at best an optimization for non-adversarial clients, and I worry it will lead to us leaving a vulnerability in the server.\n\nYou need both client-side and server-side checks. Server-side URL normalization we get for free(ish) from ServeMux, and we obviously want to defer as much validation to the server as possible, but it only makes sense to prevent the client from building requests that are invalid, yet will appear valid to the server (like path segments that will collapse or traverse).\n\n> I would at least like to not import the entire api/validation package\n\nI can copy the check into this package if you like.\n\n> I think it might be simpler to check the path once in the function that builds the final URL.\n\nThe checks need to remain on the individual segments. Once you combine segments into the final URL, you lose to ability to detect invalid resource names like \"foo/bar\" (not to mention path.Join(...) does a Clean, which also masks traversal)\n",
        "createdAt" : "2015-11-03T19:13:56Z",
        "updatedAt" : "2015-11-03T19:48:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "09be732a-fa9a-4413-9f44-659b340f561c",
        "parentId" : "dd214aa2-2291-4c9e-8678-ad8369df5c15",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "> > I would at least like to not import the entire api/validation package\n> \n> I can copy the check into this package if you like.\n\nAlthough we're already using these packages:\n\n```\n    \"k8s.io/kubernetes/pkg/api/errors\"\n    \"k8s.io/kubernetes/pkg/api/unversioned\"\n```\n\nWhy don't you want to use a shared function for minimal safe path segment validation?\n",
        "createdAt" : "2015-11-03T19:15:29Z",
        "updatedAt" : "2015-11-03T19:48:04Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "967584e5-c27e-4fcc-aa7c-6d4c29f453c0",
        "parentId" : "dd214aa2-2291-4c9e-8678-ad8369df5c15",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "We have a huge import tree right now, which makes the client inconvenient for people to use, I'd like to not make that problem worse. But I guess we can fix that problem later.\n\nI guess I will not object as long as we're all on the same page that we do not get any additional security from these checks in the client.\n",
        "createdAt" : "2015-11-03T20:25:47Z",
        "updatedAt" : "2015-11-03T20:25:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "b3157d1445baef3b5adbaa97da9fca5154bfe251",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +170,174 @@\t\treturn r\n\t}\n\tfor _, s := range subresources {\n\t\tif ok, msg := validation.IsValidPathSegmentName(s); !ok {\n\t\t\tr.err = fmt.Errorf(\"invalid subresource %q: %s\", s, msg)"
  },
  {
    "id" : "cc6a97fe-d4aa-4ba8-8980-b672ff46860d",
    "prId" : 16271,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3eb1f70c-3b46-42dc-9d34-8f76a5ea5938",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The error check must remain first.\n",
        "createdAt" : "2015-10-28T23:42:38Z",
        "updatedAt" : "2015-11-05T23:12:37Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "072980af140395c5dfcf99b5662f8ec41671e89d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +662,666 @@func (r *Request) request(fn func(*http.Request, *http.Response)) error {\n\t//Metrics for total request latency\n\tstart := time.Now()\n\tdefer func() {\n\t\tmetrics.RequestLatency.WithLabelValues(r.verb, r.finalURLTemplate()).Observe(metrics.SinceInMicroseconds(start))"
  },
  {
    "id" : "38bde062-caa2-4b29-a890-075e733a8a0b",
    "prId" : 16271,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "df7bcf01-e9a0-44cd-8e55-70944f0aa558",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "why are you only recording the host?\n",
        "createdAt" : "2015-11-03T22:54:02Z",
        "updatedAt" : "2015-11-05T23:12:37Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "92c91770-c043-4145-89b4-881eb0e86f5c",
        "parentId" : "df7bcf01-e9a0-44cd-8e55-70944f0aa558",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "this gives us granularity of information which is sufficient to solve the usecase which is most intersting for now, which is  backoff  for a host+port.... no doubt that there are other usecases where more lables  (i.e. `/pods` might be performing very poorly while other urls might work just fine) might be useful.\n",
        "createdAt" : "2015-11-04T20:05:55Z",
        "updatedAt" : "2015-11-05T23:12:37Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      }
    ],
    "commit" : "072980af140395c5dfcf99b5662f8ec41671e89d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +594,598 @@\turl := \"none\"\n\tif req.baseURL != nil {\n\t\turl = req.baseURL.Host\n\t}\n"
  },
  {
    "id" : "22cc2053-c270-4487-b81d-92a33168f02f",
    "prId" : 16271,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2253d197-d864-47f8-9d80-1271317000ce",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I don't think this is right, now that I look at it again. You're timing all retries in one chunk. You should measure them individually, no?\n",
        "createdAt" : "2015-11-11T17:20:47Z",
        "updatedAt" : "2015-11-11T17:20:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "79cd19b9-9612-4369-935d-7d223f6c622e",
        "parentId" : "2253d197-d864-47f8-9d80-1271317000ce",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "the current code is chunking retries already. Maybe separate issue? Or should I fix it all in here ?\n",
        "createdAt" : "2015-11-11T18:42:51Z",
        "updatedAt" : "2015-11-11T18:42:51Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "a1629111-75d3-4041-a2fa-6fc3018aa675",
        "parentId" : "2253d197-d864-47f8-9d80-1271317000ce",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'm really not sure-- what is the goal of this latency measurement?\n\nOn Wed, Nov 11, 2015 at 10:43 AM, jay vyas notifications@github.com wrote:\n\n> In pkg/client/unversioned/request.go\n> https://github.com/kubernetes/kubernetes/pull/16271#discussion_r44568576\n> :\n> \n> > @@ -641,6 +660,12 @@ func (r _Request) Stream() (io.ReadCloser, error) {\n> >  // fn at most once. It will return an error if a problem occurred prior to connecting to the\n> >  // server - the provided function is responsible for handling server errors.\n> >  func (r *Request) request(fn func(_http.Request, *http.Response)) error {\n> > -   //Metrics for total request latency\n> \n> the current code is chunking retries already. Maybe separate issue? Or\n> should I fix it all in here ?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/kubernetes/kubernetes/pull/16271/files#r44568576.\n",
        "createdAt" : "2015-11-11T18:50:33Z",
        "updatedAt" : "2015-11-11T18:50:33Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "619f9bad-90f7-4e1c-b1f8-31d5c978030e",
        "parentId" : "2253d197-d864-47f8-9d80-1271317000ce",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "- I created a separate issue below.  I think your onto something: The semantics of that metrics are ill-defined.\n- As this stands, this code doesn't change the metric.\n",
        "createdAt" : "2015-11-11T19:16:44Z",
        "updatedAt" : "2015-11-11T19:16:44Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      }
    ],
    "commit" : "072980af140395c5dfcf99b5662f8ec41671e89d",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +661,665 @@// server - the provided function is responsible for handling server errors.\nfunc (r *Request) request(fn func(*http.Request, *http.Response)) error {\n\t//Metrics for total request latency\n\tstart := time.Now()\n\tdefer func() {"
  },
  {
    "id" : "5cdcc79b-6a2b-4397-8ddd-2ab0c590a467",
    "prId" : 15971,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e1a8971c-40c2-40ae-943c-6ff24a3a9214",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This is a property of the encoding, but I guess it's fine right now since we only have one.\n",
        "createdAt" : "2015-10-27T22:32:56Z",
        "updatedAt" : "2015-10-27T22:32:56Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "583246a22fcbe7cbe515b9d3e8be561e790d66f4",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +492,496 @@\t\tglog.V(8).Infof(\"Request Body: %s\", string(data))\n\t\tr.body = bytes.NewBuffer(data)\n\t\tr.SetHeader(\"Content-Type\", \"application/json\")\n\tdefault:\n\t\tr.err = fmt.Errorf(\"unknown type used for body: %+v\", obj)"
  },
  {
    "id" : "b7ab01da-e084-4a39-a5e6-7d69c8fe1a5b",
    "prId" : 14618,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6b1e2c0-bc11-4920-880a-04458d9c1962",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Godoc?\n",
        "createdAt" : "2015-10-07T19:27:28Z",
        "updatedAt" : "2015-10-09T18:34:51Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "3f1b18fbba80ba871d4e1494fbc44a551c99354b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +409,413 @@// implicit RESTClient API version and the provided object convertor, and then add those as parameters\n// to the request. Use this to provide versioned query parameters from client libraries.\nfunc (r *Request) VersionedParams(obj runtime.Object, convertor runtime.ObjectConvertor) *Request {\n\tif r.err != nil {\n\t\treturn r"
  }
]