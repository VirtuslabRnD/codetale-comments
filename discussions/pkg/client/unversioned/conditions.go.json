[
  {
    "id" : "1847f1f8-95bc-44b8-932e-2303a96f719f",
    "prId" : 35663,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/35663#pullrequestreview-6164056",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "832d6522-0342-4878-b9f7-54e8c98385ea",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "s/Pets/Pods/?  Okay to do in future PR.\n",
        "createdAt" : "2016-10-27T23:16:14Z",
        "updatedAt" : "2016-10-28T00:26:22Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "e0252f9be0cffce73c712f4d1f7de4fbc25f9894",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +78,82 @@}\n\n// StatefulSetHasDesiredPets returns a conditon that checks the number of petset replicas\nfunc StatefulSetHasDesiredPets(psClient appsclient.StatefulSetsGetter, petset *apps.StatefulSet) wait.ConditionFunc {\n\t// TODO: Differentiate between 0 pets and a really quick scale down using generation."
  },
  {
    "id" : "f6b3d7ab-81b0-431b-930c-d16ecf3c9b54",
    "prId" : 23912,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "70ec3fee-5422-402c-86ab-21c959e978c1",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It would be nice to not add these to the unversioned client, and add them to the new typed ones instead. @caesarxuchao do you have any suggestions about where we could put these?\n",
        "createdAt" : "2016-04-06T18:01:39Z",
        "updatedAt" : "2016-04-16T02:21:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "f8ef0198-0b7d-44c1-95ef-b246b521daf1",
        "parentId" : "70ec3fee-5422-402c-86ab-21c959e978c1",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "(I mostly mean the functions here, not the error message)\n",
        "createdAt" : "2016-04-06T18:02:25Z",
        "updatedAt" : "2016-04-16T02:21:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "f54ed8fb-ab75-4f24-9bee-00ed15c1051a",
        "parentId" : "70ec3fee-5422-402c-86ab-21c959e978c1",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It's very frustrating because basically these functions work no matter which typed client you're importing :/\n",
        "createdAt" : "2016-04-06T18:04:02Z",
        "updatedAt" : "2016-04-16T02:21:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "090ca83d-d2a9-4e31-84d1-3ab0722a5715",
        "parentId" : "70ec3fee-5422-402c-86ab-21c959e978c1",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Most of the code that benefits from using this the most now is not typed client.  I would like to bake these a bit before adding them to the typed client, because a) we may find different conditions or b) want to structure them differently after use.  e2e, server code, and controllers.  I would expect someone converting code that uses this to typed clients would be the one who does the conversion once they've settled enough.\n",
        "createdAt" : "2016-04-06T18:20:24Z",
        "updatedAt" : "2016-04-16T02:21:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "845e49657262a52d262aa60b18699ab24b466c6d",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +175,179 @@// ErrPodCompleted is returned by PodRunning or PodContainerRunning to indicate that\n// the pod has already reached completed state.\nvar ErrPodCompleted = fmt.Errorf(\"pod ran to completion\")\n\n// PodRunning returns true if the pod is running, false if the pod has not yet reached running state,"
  },
  {
    "id" : "fd8269ad-53ba-49b1-8c69-36cbaf484ed2",
    "prId" : 22847,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "39671e43-d83d-4426-986c-e91b31faf175",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@janetkuo @bgrant0607 The condition is added.\n",
        "createdAt" : "2016-03-11T23:42:23Z",
        "updatedAt" : "2016-03-12T07:55:27Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "a6240c1ab864de4931b8dcbd3d6ef61886998ddd",
    "line" : 8,
    "diffHunk" : "@@ -1,1 +158,162 @@\t// noticed the update yet. Polling status.Replicas is not safe in the latter\n\t// case.\n\tdesiredGeneration := deployment.Generation\n\n\treturn func() (bool, error) {"
  },
  {
    "id" : "6438300d-65a2-4782-86c7-a83b9e7ad3f5",
    "prId" : 18169,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7821d9bc-c26e-4379-97e8-2eb3d45c7b1a",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Parallelism will never be nil, since it's defaulted if not present. No need to change that.\n",
        "createdAt" : "2015-12-04T12:54:31Z",
        "updatedAt" : "2015-12-21T09:07:28Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e894dcc8ff526f86944aaf9bdb5895fe483ecdc0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +55,59 @@\n\t\t// desired parallelism can be either the exact number, in which case return immediately\n\t\tif job.Spec.Parallelism != nil && job.Status.Active == *job.Spec.Parallelism {\n\t\t\treturn true, nil\n\t\t}"
  },
  {
    "id" : "15008468-c573-4eb7-8a37-7bf71d82ed6e",
    "prId" : 16067,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "46ac395e-1afd-411b-abe7-d8023775f7ef",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Add the PR example comment here.\n",
        "createdAt" : "2015-10-21T23:53:01Z",
        "updatedAt" : "2016-01-21T03:58:24Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "29028a1332a71e7386c83a7d4b0229b3ed1b15c7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +60,64 @@//     ...\n//\n// TODO: Make Backoff an interface?\nfunc RetryOnConflict(backoff wait.Backoff, fn func() error) error {\n\tvar lastConflictErr error"
  },
  {
    "id" : "efa39363-6b0c-4979-80b8-4ca650583ee5",
    "prId" : 16067,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "90e90af3-9056-43be-8a2c-4cc5d6b2b11a",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Is exponential backoff correct for this? This isn't like TCP where the same two packets collide over and over. If you got a conflict, that means someone else succeeded. \n",
        "createdAt" : "2015-10-21T23:54:31Z",
        "updatedAt" : "2016-01-21T03:58:24Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7fa4d0cb-d906-4363-af3c-ef980d1c5201",
        "parentId" : "90e90af3-9056-43be-8a2c-4cc5d6b2b11a",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I was torn on this (and the default backoff may not be the right numbers).  A common case we're wanting to use this in is where multiple clients are competing to update the same entry.  We have a few controllers that are performing idempotent actions on the same resource, but we also have actions driven by clients where the initial action triggers a flurry of updates.\n\nFor example, our deployment controller (in OpenShift) deals with the deployment trigger controller updating the same resources.  That's a case where straight up retry is appropriate.  The second case is creating a deployment from the CLI - the first action (create) results in a bunch of controllers acting on it to create status.  In that case, backoff helps reduce the conflict.\n\nI can add a `DefaultRetry` that has Factor 1.0.  I'll also find one of the instances in the code and replace it.\n",
        "createdAt" : "2015-10-22T01:22:01Z",
        "updatedAt" : "2016-01-21T03:58:24Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "29028a1332a71e7386c83a7d4b0229b3ed1b15c7",
    "line" : null,
    "diffHunk" : "@@ -1,1 +63,67 @@func RetryOnConflict(backoff wait.Backoff, fn func() error) error {\n\tvar lastConflictErr error\n\terr := wait.ExponentialBackoff(backoff, func() (bool, error) {\n\t\terr := fn()\n\t\tswitch {"
  },
  {
    "id" : "b8d0d221-8dd6-46cc-b178-570eb2bd9b20",
    "prId" : 16067,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9c5eaedb-88d6-439d-9ec0-525faec0d86d",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "You seem to be making a distinction between Backoff and Retry, is it a common one?\n",
        "createdAt" : "2015-10-28T23:15:13Z",
        "updatedAt" : "2016-01-21T03:58:24Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "aef01542-a979-4f23-8513-fbef709a58f6",
        "parentId" : "9c5eaedb-88d6-439d-9ec0-525faec0d86d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I have historically differentiated - retry is the expectation that the conflict is random, backoff is intended where the caller  expects a flurry of modifications post creation (pods -> backoff, because of scheduling and kubelet, while retry is unrelated modification).\n",
        "createdAt" : "2016-01-20T01:11:01Z",
        "updatedAt" : "2016-01-21T03:58:24Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "29028a1332a71e7386c83a7d4b0229b3ed1b15c7",
    "line" : 21,
    "diffHunk" : "@@ -1,1 +35,39 @@}\n\n// DefaultBackoff is the recommended backoff for a conflict where a client\n// may be attempting to make an unrelated modification to a resource under\n// active management by one or more controllers."
  },
  {
    "id" : "40a7e0a1-d892-46cf-9a03-d20c3be581ae",
    "prId" : 16067,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf93c506-39b6-4dbb-b243-a6cf906fedc9",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "The assumption that would make this make sense is that a controller that just made a change is less likely to make another change in the more distant future, but I don't see why that assumption should be true.\n",
        "createdAt" : "2015-10-28T23:16:10Z",
        "updatedAt" : "2016-01-21T03:58:24Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "385bdbbe-9ff0-43ad-88cd-fab9917df99c",
        "parentId" : "cf93c506-39b6-4dbb-b243-a6cf906fedc9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "In practice a lot of controllers do a flurry of updates right after a\nresource is created.  We see this on deployments, builds, pods, replication\ncontrollers, and PVCs.  And service accounts.\n\nOn Oct 28, 2015, at 7:16 PM, Daniel Smith notifications@github.com wrote:\n\nIn pkg/client/unversioned/conditions.go\nhttps://github.com/kubernetes/kubernetes/pull/16067#discussion_r43331509:\n\n> +// DefaultRetry is the recommended retry for a conflict where multiple clients\n> +// are making changes to the same resource.\n> +var DefaultRetry = wait.Backoff{\n> - Steps:    5,\n> - Duration: 10 \\* time.Millisecond,\n> - Factor:   1.0,\n> - Jitter:   0.1,\n>   +}\n>   +\n>   +// DefaultBackoff is the recommended backoff for a conflict where a client\n>   +// may be attempting to make an unrelated modification to a resource under\n>   +// active management by one or more controllers.\n>   +var DefaultBackoff = wait.Backoff{\n> - Steps:    4,\n> - Duration: 10 \\* time.Millisecond,\n> - Factor:   5.0,\n\nThe assumption that would make this make sense is that a controller that\njust made a change is less likely to make another change in the more\ndistant future, but I don't see why that assumption should be true.\n\n—\nReply to this email directly or view it on GitHub\nhttps://github.com/kubernetes/kubernetes/pull/16067/files#r43331509.\n",
        "createdAt" : "2015-10-29T00:16:32Z",
        "updatedAt" : "2016-01-21T03:58:24Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "29028a1332a71e7386c83a7d4b0229b3ed1b15c7",
    "line" : 27,
    "diffHunk" : "@@ -1,1 +41,45 @@\tSteps:    4,\n\tDuration: 10 * time.Millisecond,\n\tFactor:   5.0,\n\tJitter:   0.1,\n}"
  },
  {
    "id" : "f4201af6-2626-428c-bfd0-c1f56524fd10",
    "prId" : 16067,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "74c80ce2-1711-440f-9103-9956098baeea",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Minor, but I would consider making Retry a method of Backoff, so that users write `client.DefaultBackoff.RetryOnConflict(fn)` instead of `client.RetryOnConflict(client.DefaultBackoff, fn)`.\n\nHm, I guess that doesn't work when backoff is from another package.\n",
        "createdAt" : "2015-10-28T23:18:12Z",
        "updatedAt" : "2016-01-21T03:58:24Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "cb2e4896-f2f2-4713-87f1-0c4f7153c84f",
        "parentId" : "74c80ce2-1711-440f-9103-9956098baeea",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The cockroachdb guys had a good set of utilities for this, I need to review\nwhat they did and crib more closely.  Also, David noticed and I agreed that\nthe back off/poll callback function is more useful than retry on conflict.\nI need to see whether I can find a happier refactoring.  Hold slightly.\n",
        "createdAt" : "2015-10-29T00:17:56Z",
        "updatedAt" : "2016-01-21T03:58:24Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "29028a1332a71e7386c83a7d4b0229b3ed1b15c7",
    "line" : 47,
    "diffHunk" : "@@ -1,1 +61,65 @@//\n// TODO: Make Backoff an interface?\nfunc RetryOnConflict(backoff wait.Backoff, fn func() error) error {\n\tvar lastConflictErr error\n\terr := wait.ExponentialBackoff(backoff, func() (bool, error) {"
  }
]