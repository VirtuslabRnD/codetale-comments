[
  {
    "id" : "b5f0b204-9c4d-4535-939f-9b5599a4c016",
    "prId" : 19105,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2ebc4ee4-5316-4958-922c-02ffdf893af9",
        "parentId" : null,
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "I don't understand why this defaulting was added.\n",
        "createdAt" : "2016-01-06T18:16:04Z",
        "updatedAt" : "2016-01-26T22:44:37Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "2afe2ffd-0dc8-4108-a693-a57e4f9042c2",
        "parentId" : "2ebc4ee4-5316-4958-922c-02ffdf893af9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "As per the godoc of this type, group version should not be nil.  We\nuse empty group version to denote the absence of a version today.\n",
        "createdAt" : "2016-01-06T22:48:58Z",
        "updatedAt" : "2016-01-26T22:44:37Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "92f021c0-5e06-443d-821b-c87e60472e72",
        "parentId" : "2ebc4ee4-5316-4958-922c-02ffdf893af9",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "Ah I see. This looked like something more to me at first glance. This is fine.\n",
        "createdAt" : "2016-01-07T18:59:44Z",
        "updatedAt" : "2016-01-26T22:44:37Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      }
    ],
    "commit" : "38c7eded9992ab3094d6d0173a722cf59f18006f",
    "line" : 51,
    "diffHunk" : "@@ -1,1 +73,77 @@\tif config.GroupVersion == nil {\n\t\tconfig.GroupVersion = &unversioned.GroupVersion{}\n\t}\n\tif len(config.ContentType) == 0 {\n\t\tconfig.ContentType = \"application/json\""
  },
  {
    "id" : "8912a4b7-449d-49b2-955b-cea67c3c1976",
    "prId" : 17529,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "98cd294e-d2f9-4de4-9fab-0c2512e0dcf0",
        "parentId" : null,
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "I think this should be a function that returns a backoff object, not two config parameters from it. Ideally returning NoBackoff when unset.\n",
        "createdAt" : "2015-11-24T19:39:25Z",
        "updatedAt" : "2015-12-08T01:20:13Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "3933321c-bc93-4e66-8d95-c8f77e4cb197",
        "parentId" : "98cd294e-d2f9-4de4-9fab-0c2512e0dcf0",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "Hmmmm... Not a bad idea but you think it couples the design a little?  I think functions with side effects like reading env cars should be minimized in their scope.\nMaybe two functions..?\n",
        "createdAt" : "2015-11-24T20:46:14Z",
        "updatedAt" : "2015-12-08T01:20:13Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "fdf0c985-d748-439f-b00a-b32c55e79633",
        "parentId" : "98cd294e-d2f9-4de4-9fab-0c2512e0dcf0",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "How does reading an environment variable have side effects?\n",
        "createdAt" : "2015-11-24T20:55:11Z",
        "updatedAt" : "2015-12-08T01:20:13Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "b51318ca-d9a9-4902-b511-d0088e5baea0",
        "parentId" : "98cd294e-d2f9-4de4-9fab-0c2512e0dcf0",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "s/side effect/impurities ... not a big deal either way, i can refactor\n",
        "createdAt" : "2015-11-24T21:33:25Z",
        "updatedAt" : "2015-12-08T01:20:13Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      },
      {
        "id" : "9155f585-0ec3-463d-b30f-631e19dbf1da",
        "parentId" : "98cd294e-d2f9-4de4-9fab-0c2512e0dcf0",
        "authorId" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "body" : "For simplicity ive updated this as you suggested. \n",
        "createdAt" : "2015-11-25T00:12:14Z",
        "updatedAt" : "2015-12-08T01:20:13Z",
        "lastEditedBy" : "a5be0b3b-3db2-4c99-a598-55f8708db5df",
        "tags" : [
        ]
      }
    ],
    "commit" : "76e6281168c40521a45aba813c39702bcede3bdf",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +86,90 @@}\n\n// readExpBackoffConfig handles the internal logic of determining what the\n// backoff policy is.  By default if no information is available, NoBackoff.\n// TODO Generalize this see #17727 ."
  },
  {
    "id" : "d82a87b4-8fd8-457f-ae55-1019ced1c3ed",
    "prId" : 17074,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c8d1938b-a8cd-4b32-a1bb-13e220c6d023",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Why do we need to make this a special case? Seems the next line will handle this case.\n",
        "createdAt" : "2015-11-11T19:23:50Z",
        "updatedAt" : "2015-11-11T19:55:39Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "9b132021-22f0-4155-88ff-f56e991adceb",
        "parentId" : "c8d1938b-a8cd-4b32-a1bb-13e220c6d023",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "`NewRequest` takes an interface as its first parameter. You can think of an interface as a tuple of value and the type of the value. `(v, t)`. A nil check against and interface(`intf == nil`) is only true if both `t` AND `v` are nil. `c.Client` is a nil value, but it has a type, `*http.Client`. So when we pass it, it is `(nil, *http.Client)`. The nil check in the request code doesn't catch this, tries to use it, then panics. To prevent this, we pass an untyped nil here so it gets `(nil, nil)` and the nil check in the request code works.\n\nhttp://research.swtch.com/interfaces\n",
        "createdAt" : "2015-11-11T19:35:02Z",
        "updatedAt" : "2015-11-11T19:55:39Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      },
      {
        "id" : "2be0498c-4af5-4f63-9f6f-60d0c6cce9b5",
        "parentId" : "c8d1938b-a8cd-4b32-a1bb-13e220c6d023",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I see. Thank you for the detailed explanation.\n",
        "createdAt" : "2015-11-11T19:41:41Z",
        "updatedAt" : "2015-11-11T19:55:39Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "ffed6f57-db9d-4ad1-965a-360f220eebfe",
        "parentId" : "c8d1938b-a8cd-4b32-a1bb-13e220c6d023",
        "authorId" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "body" : "More info on how this usually bites people: https://golang.org/doc/faq#nil_error\n",
        "createdAt" : "2015-11-11T19:52:09Z",
        "updatedAt" : "2015-11-11T19:55:39Z",
        "lastEditedBy" : "ad0a3561-db60-47a9-b82f-ac613199f968",
        "tags" : [
        ]
      }
    ],
    "commit" : "eacf65ddce26ad39dfbec682d40ce31e5c675eeb",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +92,96 @@\tif c.Client == nil {\n\t\treturn NewRequest(nil, verb, c.baseURL, c.apiVersion, c.Codec)\n\t}\n\treturn NewRequest(c.Client, verb, c.baseURL, c.apiVersion, c.Codec)\n}"
  }
]