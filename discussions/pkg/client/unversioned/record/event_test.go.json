[
  {
    "id" : "ff2c0724-c1f0-4350-8c0d-5ba0419b57eb",
    "prId" : 13058,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "609a98bc-2b9e-4b24-a53c-b38c08983432",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "go1.5 comment please\n",
        "createdAt" : "2015-08-31T20:01:30Z",
        "updatedAt" : "2015-09-10T21:33:35Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "40221f31-ecfd-4ccd-a037-3b7328ecde06",
        "parentId" : "609a98bc-2b9e-4b24-a53c-b38c08983432",
        "authorId" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "body" : "This isn't a go1.5 workaround/fix. Just a small code simplification I did along the way while I fixed the race bug.\n",
        "createdAt" : "2015-08-31T20:03:55Z",
        "updatedAt" : "2015-09-10T21:33:35Z",
        "lastEditedBy" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "tags" : [
        ]
      },
      {
        "id" : "f62d4bfd-884e-4987-a497-35f9df2334eb",
        "parentId" : "609a98bc-2b9e-4b24-a53c-b38c08983432",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Ah ok thanks.\n",
        "createdAt" : "2015-08-31T20:07:10Z",
        "updatedAt" : "2015-09-10T21:33:35Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "d15de72a92c8841d069b1265e433eb52edc29822",
    "line" : 61,
    "diffHunk" : "@@ -1,1 +320,324 @@\t\tt.Errorf(\"timestamp wasn't set: %#v\", *actualEvent)\n\t}\n\tactualFirstTimestamp := actualEvent.FirstTimestamp\n\tactualLastTimestamp := actualEvent.LastTimestamp\n\tif actualFirstTimestamp.Equal(actualLastTimestamp) {"
  },
  {
    "id" : "acf033ac-942f-49a8-a1eb-a165bbbc9cc8",
    "prId" : 13058,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81de2562-dbd8-4dd2-b20a-46d65b28bac2",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Instead of adding a wait group, why not just move one of the `<-called` to this line? Isn't that the same?\n",
        "createdAt" : "2015-08-31T20:04:42Z",
        "updatedAt" : "2015-09-10T21:33:35Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "8527232a-67d4-4424-a5f4-8e8871358d76",
        "parentId" : "81de2562-dbd8-4dd2-b20a-46d65b28bac2",
        "authorId" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "body" : "A waitgroup is simpler to use and better (e.g. it lets goroutines die sooner).\n\nThe original code did the waiting right before the Stop() calls, so I did the same with a waitgroup. Splitting the waiting in two separate blocks of code would confuse things, especially since you cannot know which of the two channel receives would correspond to which of the channel sends.\n",
        "createdAt" : "2015-08-31T20:11:25Z",
        "updatedAt" : "2015-09-10T21:33:35Z",
        "lastEditedBy" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "tags" : [
        ]
      },
      {
        "id" : "a3be088f-86cd-4ec1-a9e3-54284fbad39b",
        "parentId" : "81de2562-dbd8-4dd2-b20a-46d65b28bac2",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Why not start the wait group off with 2 to begin with?\n",
        "createdAt" : "2015-08-31T23:32:51Z",
        "updatedAt" : "2015-09-10T21:33:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8a5b09d8-b31f-46b6-95a7-46e672dcbd4c",
        "parentId" : "81de2562-dbd8-4dd2-b20a-46d65b28bac2",
        "authorId" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "body" : "The idea is to keep each `Add(1)` close to what will later trigger the `Done()` call. If you do a single `Add(n)` at the top, it might later be harder to spot what blocks of code amount for how many of the `Done()` calls.\n\nThis of course doesn't apply to loops.\n",
        "createdAt" : "2015-08-31T23:37:09Z",
        "updatedAt" : "2015-09-10T21:33:35Z",
        "lastEditedBy" : "e17c0720-a868-4134-a8e1-a3896b8caa8b",
        "tags" : [
        ]
      },
      {
        "id" : "6a3bf46f-0420-4a7c-8dba-7f9b608bf559",
        "parentId" : "81de2562-dbd8-4dd2-b20a-46d65b28bac2",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "+1 for pairing Add/Done calls\n",
        "createdAt" : "2015-08-31T23:44:05Z",
        "updatedAt" : "2015-09-10T21:33:35Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d15de72a92c8841d069b1265e433eb52edc29822",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +297,301 @@\t\tsinkWatcher := eventBroadcaster.StartRecordingToSink(&testEvents)\n\t\tlogWatcher1 := eventBroadcaster.StartLogging(t.Logf) // Prove that it is useful\n\t\twg.Add(1)\n\t\tlogWatcher2 := eventBroadcaster.StartLogging(func(formatter string, args ...interface{}) {\n\t\t\tdefer wg.Done()"
  }
]