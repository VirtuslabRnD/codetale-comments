[
  {
    "id" : "743efa90-18bd-4334-bcf6-4a95862acdcd",
    "prId" : 6278,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "474ffbec-42e9-4d7d-ac23-f8883845d038",
        "parentId" : null,
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "remove `hostname` and hardcode `localhost`\n",
        "createdAt" : "2015-04-01T14:19:15Z",
        "updatedAt" : "2015-04-21T18:19:43Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "bb6a9d7d-c5b4-4272-b58c-d15a3bc5c219",
        "parentId" : "474ffbec-42e9-4d7d-ac23-f8883845d038",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Oh I know why you're including it...\n",
        "createdAt" : "2015-04-01T14:19:45Z",
        "updatedAt" : "2015-04-21T18:19:43Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      },
      {
        "id" : "c1ccb4c6-7c94-4e61-a6fe-fb2a27cbe3e0",
        "parentId" : "474ffbec-42e9-4d7d-ac23-f8883845d038",
        "authorId" : "8adc9068-9e5f-4deb-92cf-a6bcbc43d00b",
        "body" : "So I can keep it? right?\n",
        "createdAt" : "2015-04-02T07:41:26Z",
        "updatedAt" : "2015-04-21T18:19:43Z",
        "lastEditedBy" : "8adc9068-9e5f-4deb-92cf-a6bcbc43d00b",
        "tags" : [
        ]
      },
      {
        "id" : "e011f4f9-b84d-4cc3-85c7-38d1d1a26e42",
        "parentId" : "474ffbec-42e9-4d7d-ac23-f8883845d038",
        "authorId" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "body" : "Yes\n",
        "createdAt" : "2015-04-02T11:24:31Z",
        "updatedAt" : "2015-04-21T18:19:43Z",
        "lastEditedBy" : "b15d5707-82a8-4448-b49d-a2d6502b10f9",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7fc22be8a52b63bb74fa50ff80e6177c2ae42f2",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +201,205 @@// the given protocol. protocol is in net.Listen style which basically admits values like tcp, tcp4, tcp6\nfunc (pf *PortForwarder) getListener(protocol string, hostname string, port *ForwardedPort) (net.Listener, error) {\n\tlistener, err := net.Listen(protocol, fmt.Sprintf(\"%s:%d\", hostname, port.Local))\n\tif err != nil {\n\t\tglog.Errorf(\"Unable to create listener: Error %s\", err)"
  }
]