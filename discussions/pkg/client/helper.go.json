[
  {
    "id" : "988c46e4-3008-4cc1-9de3-dfe6c528546b",
    "prId" : 10032,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "13612970-7554-4ac7-bbfd-e19ff8a3e7f3",
        "parentId" : null,
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "I'm ignorant of glog. Will glog.V(6) be true if I pass `--v=7` to the command? Can you explain how these transports aren't getting quadruple wrapped at `--v=9` without breaks?\n",
        "createdAt" : "2015-06-18T18:51:45Z",
        "updatedAt" : "2015-06-18T18:53:33Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "99549c48-8906-41d3-996c-1af02196e86f",
        "parentId" : "13612970-7554-4ac7-bbfd-e19ff8a3e7f3",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I used a switch/case, so only one case is executed.\n",
        "createdAt" : "2015-06-18T18:56:42Z",
        "updatedAt" : "2015-06-18T18:56:42Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "71f20cbf-73ce-4367-b3ef-d369ef19afb6",
        "parentId" : "13612970-7554-4ac7-bbfd-e19ff8a3e7f3",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "Ahhh okay thanks. Did not realize that about go switches. I feel like that's different than other switches...\n",
        "createdAt" : "2015-06-18T19:00:40Z",
        "updatedAt" : "2015-06-18T19:00:40Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      },
      {
        "id" : "6ceb1a77-c820-46c1-9c93-4fcf227d3641",
        "parentId" : "13612970-7554-4ac7-bbfd-e19ff8a3e7f3",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I feel like that's different than other switches...\n\nThe no explicit `break` is required.  If you want to `fallthrough`, you have to ask for it.\n",
        "createdAt" : "2015-06-18T19:03:03Z",
        "updatedAt" : "2015-06-18T19:03:03Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "bab0a61ef1e68e2dc780656a9f12eb7d347175ee",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +362,366 @@\tcase bool(glog.V(7)):\n\t\ttransport = NewDebuggingRoundTripper(transport, JustURL, RequestHeaders, ResponseStatus)\n\tcase bool(glog.V(6)):\n\t\ttransport = NewDebuggingRoundTripper(transport, URLTiming)\n\t}"
  },
  {
    "id" : "35ad316d-38d4-4280-90a6-2db76468b059",
    "prId" : 4278,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1ce748df-a8aa-4b33-a434-98b08cde1863",
        "parentId" : null,
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "These are the exact same parameters that are in http.DefaultTransport. If you just add the TLSClientConfig to the DefaultTransport will that cause it to be applied elsewhere that we want to use the DefaultTransport (and if so, then using DefaultTransport anywhere seems like a terrible idea since it's a global variable). \n",
        "createdAt" : "2015-02-10T18:25:42Z",
        "updatedAt" : "2015-02-10T18:25:42Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "10db19e9-4438-48f1-819d-34248c2d4ab8",
        "parentId" : "1ce748df-a8aa-4b33-a434-98b08cde1863",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It would probably be better to copy the http.DefaultTransform's fields (if these are truly the same) rather than add the new ones.\n",
        "createdAt" : "2015-02-12T04:55:51Z",
        "updatedAt" : "2015-02-12T04:55:51Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9f038cc5-b235-48ae-a558-23dc9a6567b5",
        "parentId" : "1ce748df-a8aa-4b33-a434-98b08cde1863",
        "authorId" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "body" : "From http://golang.org/pkg/net/http/:\n\nvar DefaultTransport RoundTripper = &Transport{\n        Proxy: ProxyFromEnvironment,\n        Dial: (&net.Dialer{\n                Timeout:   30 \\* time.Second,\n                KeepAlive: 30 \\* time.Second,\n        }).Dial,\n        TLSHandshakeTimeout: 10 \\* time.Second,\n}\n",
        "createdAt" : "2015-02-12T06:58:23Z",
        "updatedAt" : "2015-02-12T06:58:23Z",
        "lastEditedBy" : "c2b5c827-efcd-438f-8db5-52d917b1cde9",
        "tags" : [
        ]
      },
      {
        "id" : "71c9886e-7d9f-4e9b-9886-7023449d3aee",
        "parentId" : "1ce748df-a8aa-4b33-a434-98b08cde1863",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It would probably be better for us to copy the attributes we want:\n\n```\n&Transport{\n  Proxy: http.DefaultTransport.Proxy,\n  Dial: http.DefaultTransport.Dial,\n  TLSHandshakeTimeout: http.DefaultTransport.TLSHandshakeTimeout,\n}\n```\n\nWe can't copy the transport without sharing its pool which is verboten (i believe)\n\n----- Original Message -----\n\n> > @@ -228,6 +230,12 @@ func TransportFor(config *Config) (http.RoundTripper,\n> > error) {\n> >         if tlsConfig != nil {\n> >             transport = &http.Transport{\n> >                 TLSClientConfig: tlsConfig,\n> \n> From http://golang.org/pkg/net/http/:\n> \n> var DefaultTransport RoundTripper = &Transport{\n>         Proxy: ProxyFromEnvironment,\n>         Dial: (&net.Dialer{\n>                 Timeout:   30 \\* time.Second,\n>                 KeepAlive: 30 \\* time.Second,\n>         }).Dial,\n>         TLSHandshakeTimeout: 10 \\* time.Second,\n> }\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/4278/files#r24562008\n",
        "createdAt" : "2015-02-12T14:43:37Z",
        "updatedAt" : "2015-02-12T14:43:37Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "3fa9ddd1e129333768e49501c856c1e70eeff339",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +230,234 @@\t\tif tlsConfig != nil {\n\t\t\ttransport = &http.Transport{\n\t\t\t\tTLSClientConfig: tlsConfig,\n\t\t\t\tProxy:           http.ProxyFromEnvironment,\n\t\t\t\tDial: (&net.Dialer{"
  },
  {
    "id" : "7a245f06-02fd-4d80-8970-846368eb54b1",
    "prId" : 3564,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a46a276a-73d7-480a-bf35-b8c478904e17",
        "parentId" : null,
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "Ideally we would have a set of CAs that we trust.  As this stuff is new, it might be easier to make this be a list now instead of fixing it up later.\n\nIf/when a user needs to rotate CA certs, having a list here will make it _much_ easier. \n",
        "createdAt" : "2015-01-16T21:14:54Z",
        "updatedAt" : "2015-01-16T21:14:54Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      },
      {
        "id" : "4a32bafb-6eae-4fca-9f10-225a25a346e4",
        "parentId" : "a46a276a-73d7-480a-bf35-b8c478904e17",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "typically, CAFile (or the corresponding []byte sucked in from it) contains 1..N trusted root certs... serialized like\n\n```\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n```\n",
        "createdAt" : "2015-01-16T21:17:59Z",
        "updatedAt" : "2015-01-16T21:17:59Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "98ae5464-8173-4d06-8a8c-bda4b3db4deb",
        "parentId" : "a46a276a-73d7-480a-bf35-b8c478904e17",
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "Ah -- good. I see how that works now.  Thanks.\n",
        "createdAt" : "2015-01-16T21:19:35Z",
        "updatedAt" : "2015-01-16T21:19:35Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ebe885827d80967d64be96acdc2617978539784",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +67,71 @@\tKeyFile string\n\t// Trusted root certificates for server\n\tCAFile string\n\n\t// CertData holds PEM-encoded bytes (typically read from a client certificate file)."
  },
  {
    "id" : "0789a3c7-80bc-4969-971d-e92a26b9841e",
    "prId" : 1500,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "66f38a5a-bf49-4e14-930a-05bb9cdf6865",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Hrm, I don't super love all of these fields for different auth smashed together here?  Break them up into per-auth type pointers to structs?\n",
        "createdAt" : "2014-09-30T03:39:50Z",
        "updatedAt" : "2014-10-01T19:23:41Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "012819ff-9ba2-43b2-b4ae-39edf8f1872c",
        "parentId" : "66f38a5a-bf49-4e14-930a-05bb9cdf6865",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I considered it (and was halfway on the fence) - two things that have me leaning slightly to the big jumble:\n1. Makes it easier to initialize and bind the fields to flags (which was partially the point) - with pointers you'd have to create the nested object anyway to bind it to a flag\n2. Makes nested initialization in tests and simple usage shorter.  I'm assuming every client will supply a form of auth eventually, so doing\n   \n   ```\n   client.New(&client.Config{Host: host, Basic: &client.BasicAuth{Username: \"bob\", Password: \"test\"}})\n   ```\n   \n   Just didn't seem as clear as\n   \n   ```\n   client.New(&client.Config{Host: host, Username: \"bob\", Password: \"test\"})\n   ```\n\nI also figured that more complicated config can be done piecemeal without calling New, so I was thinking of New as the convenience constructor.\n\nCould be persuaded otherwise if you feel strongly about the other way.\n\n> On Sep 29, 2014, at 11:40 PM, Brendan Burns notifications@github.com wrote:\n> \n> In pkg/client/helper.go:\n> \n> > +package client\n> > +\n> > +import (\n> > -   \"fmt\"\n> > -   \"net/http\"\n> > -   \"net/url\"\n> > -   \"path\"\n> > -   \"strings\"\n> >   +\n> > -   \"github.com/GoogleCloudPlatform/kubernetes/pkg/api/latest\"\n> >   +)\n> >   +\n> >   +// Config holds the common attributes that can be passed to a Kubernetes client on\n> >   +// initialization.\n> >   +type Config struct {\n> > -   // Host must be a host string, a host:port pair, or a URL to the base of the API.\n> >   Hrm, I don't super love all of these fields for different auth smashed together here? Break them up into per-auth type pointers to structs?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-09-30T14:34:22Z",
        "updatedAt" : "2014-10-01T19:23:41Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "ff2eca97d9f202fb05f35582f2dad57fd53a1450",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +31,35 @@// initialization.\ntype Config struct {\n\t// Host must be a host string, a host:port pair, or a URL to the base of the API.\n\tHost    string\n\tVersion string"
  }
]