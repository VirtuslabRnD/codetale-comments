[
  {
    "id" : "1f00af95-5595-444b-82a4-e299e9f990d1",
    "prId" : 9966,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "927f41d6-c761-4615-8f8c-32eb4ef68da1",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "PodHost is spec.nodeName in v1.\n",
        "createdAt" : "2015-06-17T20:10:48Z",
        "updatedAt" : "2015-06-17T20:10:48Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "0f3852bd-4fbd-4226-abac-061400c0f174",
        "parentId" : "927f41d6-c761-4615-8f8c-32eb4ef68da1",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "that may be true, but this needs updating as well then:\n\n```\nfunc PodToSelectableFields(pod *api.Pod) fields.Set {\n    return fields.Set{\n        \"metadata.name\": pod.Name,\n        \"spec.host\":     pod.Spec.NodeName,\n        \"status.phase\":  string(pod.Status.Phase),\n    }\n}\n```\n",
        "createdAt" : "2015-06-17T20:17:13Z",
        "updatedAt" : "2015-06-17T20:17:13Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "ed68c792-eee5-48cd-b2c5-2049ba9156e1",
        "parentId" : "927f41d6-c761-4615-8f8c-32eb4ef68da1",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "if I understand correctly, all of these things have to match:\n- the label returned from the `AddFieldLabelConversionFunc` for Pod in all versions\n- the key returned from `PodToSelectableFields`\n- the value of `client.PodHost`\n",
        "createdAt" : "2015-06-17T20:23:57Z",
        "updatedAt" : "2015-06-17T20:23:57Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "6fe8c10c-381c-42e4-bbde-2e2e43beb34f",
        "parentId" : "927f41d6-c761-4615-8f8c-32eb4ef68da1",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Good point. Yes, we should fix those.\n",
        "createdAt" : "2015-06-18T20:00:44Z",
        "updatedAt" : "2015-06-18T20:00:44Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f990899290c4618c331f4f30a278af520121ff35",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +347,351 @@\t\t},\n\t},\n\t\"v1\": resourceTypeToFieldMapping{\n\t\t\"nodes\": clientFieldNameToAPIVersionFieldName{\n\t\t\tObjectNameField:   \"metadata.name\","
  },
  {
    "id" : "64ac0570-67e6-4b9b-8722-8592b6eec973",
    "prId" : 9966,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fdebc2e-21de-4712-99a8-834879dca5ef",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "We should eliminate minions, at least in v1. \n",
        "createdAt" : "2015-06-17T20:14:41Z",
        "updatedAt" : "2015-06-17T20:14:41Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "f990899290c4618c331f4f30a278af520121ff35",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +319,323 @@\t\t},\n\t\t\"minions\": clientFieldNameToAPIVersionFieldName{\n\t\t\tObjectNameField:   \"metadata.name\",\n\t\t\tNodeUnschedulable: \"spec.unschedulable\",\n\t\t},"
  },
  {
    "id" : "8033ef74-4044-486b-b791-719beea9b18c",
    "prId" : 6671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e6993008-c0ec-48c3-9f11-81ec3865b078",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I thought some objects (e.g. nodes, some events) didn't have a namespace?\n",
        "createdAt" : "2015-04-10T17:36:14Z",
        "updatedAt" : "2015-04-10T17:36:14Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "c9aec252-6b56-43c1-ac39-33ca92c7c159",
        "parentId" : "e6993008-c0ec-48c3-9f11-81ec3865b078",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The client shouldn't set a namespace then (it shouldn't call client.Request().Namespace()) if the type doesn't have a namespace.  Basically we know whether namespace is set and empty vs unset and empty.\n\n----- Original Message -----\n\n> > @@ -619,8 +619,23 @@ func (r _Request) Upgrade(config *Config,\n> > newRoundTripperFunc func(_tls.Config)\n> >     return upgradeRoundTripper.NewConnection(resp)\n> >  }\n> > \n> > -// DoRaw executes a raw request which is not subject to interpretation as\n> > an API response.\n> > -func (r _Request) DoRaw() ([]byte, error) {\n> > +// request connects to the server and invokes the provided function when a\n> > server response is\n> > +// received. It handles retry behavior and up front validation of\n> > requests. It wil invoke\n> > +// fn at most once. It will return an error if a problem occured prior to\n> > connecting to the\n> > +// server - the provided function is responsible for handling server\n> > errors.\n> > +func (r *Request) request(fn func(_http.Request, *http.Response)) error {\n> > -   if r.err != nil {\n> > -       return r.err\n> > -   }\n> >   +\n> > -   // TODO: added to catch programmer errors (invoking operations with an\n> >   object with an empty namespace)\n> > -   if (r.verb == \"GET\" || r.verb == \"PUT\" || r.verb == \"DELETE\") &&\n> >   r.namespaceSet && len(r.resourceName) > 0 && len(r.namespace) == 0 {\n> > -       return fmt.Errorf(\"an empty namespace may not be set when a resource\n> >   name is provided\")\n> \n> I thought some objects (e.g. nodes, some events) didn't have a namespace?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/6671/files#r28164366\n",
        "createdAt" : "2015-04-10T17:47:23Z",
        "updatedAt" : "2015-04-10T17:47:23Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "863ee7d9-7348-4d8a-9879-e5cc7a559034",
        "parentId" : "e6993008-c0ec-48c3-9f11-81ec3865b078",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Ah, thanks-- missed the namespaceSet bit.\n",
        "createdAt" : "2015-04-10T18:45:19Z",
        "updatedAt" : "2015-04-10T18:45:19Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "852ef7b63795218d78f38ef8492f563c48009b30",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +631,635 @@\t// TODO: added to catch programmer errors (invoking operations with an object with an empty namespace)\n\tif (r.verb == \"GET\" || r.verb == \"PUT\" || r.verb == \"DELETE\") && r.namespaceSet && len(r.resourceName) > 0 && len(r.namespace) == 0 {\n\t\treturn fmt.Errorf(\"an empty namespace may not be set when a resource name is provided\")\n\t}\n\tif (r.verb == \"POST\") && r.namespaceSet && len(r.namespace) == 0 {"
  },
  {
    "id" : "8aa885bf-95b8-483d-8a1d-e170dba257b7",
    "prId" : 6671,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b71bc5ca-b771-46ab-b522-58df213b1942",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "nit: const?\n",
        "createdAt" : "2015-04-10T17:41:56Z",
        "updatedAt" : "2015-04-10T17:41:56Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "852ef7b63795218d78f38ef8492f563c48009b30",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +644,648 @@\t// Right now we make about ten retry attempts if we get a Retry-After response.\n\t// TODO: Change to a timeout based approach.\n\tmaxRetries := 10\n\tretries := 0\n\tfor {"
  },
  {
    "id" : "116546ad-16e9-47d6-9f66-e6054e3e1d17",
    "prId" : 5233,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4b98d362-b9cd-479d-bc0b-674c3262e61a",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "This does not seem to be used anywhere.\nIs this change required? Or am I missing something.\n",
        "createdAt" : "2015-03-16T21:11:19Z",
        "updatedAt" : "2015-03-16T21:11:19Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      }
    ],
    "commit" : "266234f3b9ccce6519c2bb500a2b102bf4b7fa16",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +111,115 @@\ttimeout      time.Duration\n\n\tapiVersion string\n\n\t// output"
  },
  {
    "id" : "4f9721c0-1ad2-47fe-9883-0fbca4204150",
    "prId" : 5016,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6425e8f3-31d9-46e5-b223-699f47ab2156",
        "parentId" : null,
        "authorId" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "body" : "Does this need to be changed? Just for my own education...\n",
        "createdAt" : "2015-03-04T19:29:18Z",
        "updatedAt" : "2015-03-07T10:39:40Z",
        "lastEditedBy" : "f22a9095-b804-4932-8c62-ecb134b86477",
        "tags" : [
        ]
      },
      {
        "id" : "f78184d9-f9a0-4b7b-a48c-b9b77208d8ca",
        "parentId" : "6425e8f3-31d9-46e5-b223-699f47ab2156",
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "More of a style thing, I think. The pattern is to either declare a variable with `var name type` and assign to it later or let the compiler infer type by assigning with `name :=`. Doing both in the same statement is unnecessary.\n",
        "createdAt" : "2015-03-06T17:49:23Z",
        "updatedAt" : "2015-03-07T10:39:40Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      }
    ],
    "commit" : "f505a339983897c5ef9a4a0d14b8ae45cc8f5e7c",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +584,588 @@\t\tif !isStatusResponse {\n\t\t\tvar err error\n\t\t\terr = &UnexpectedStatusError{\n\t\t\t\tRequest:  req,\n\t\t\t\tResponse: resp,"
  },
  {
    "id" : "3a053c6e-5024-4a8a-bb58-382f96c3d8f9",
    "prId" : 3066,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "196405d8-1664-476c-83ab-40b09a810c4f",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Clearer? `If true, put ns/<namespace> in path; if false, add \"?namespace=<namespace>\" as a query parameter.`\n",
        "createdAt" : "2014-12-19T22:06:18Z",
        "updatedAt" : "2014-12-19T22:06:18Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "abb6632d756957dbfb970dd79fd3e005e3ffbecf",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +97,101 @@\ttimeout  time.Duration\n\n\t// flag to control how to use namespace in urls\n\tnamespaceAsPath bool\n"
  },
  {
    "id" : "78174340-fe89-4546-8a37-fdac07aadfc8",
    "prId" : 3066,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "81394273-4c69-4221-b76e-60bfaa6c2889",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Nit: \"namespaceInPath\"?\n",
        "createdAt" : "2014-12-19T22:07:42Z",
        "updatedAt" : "2014-12-19T22:07:42Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "abb6632d756957dbfb970dd79fd3e005e3ffbecf",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +98,102 @@\n\t// flag to control how to use namespace in urls\n\tnamespaceAsPath bool\n\n\t// output"
  },
  {
    "id" : "1de18cc1-cb56-4a8e-9230-a4b273645150",
    "prId" : 3037,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1a247006-57e9-4b12-825e-4864fe51068b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Bad net/http package. ಠ_ಠ\n",
        "createdAt" : "2014-12-18T20:52:59Z",
        "updatedAt" : "2014-12-18T21:16:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "57e2b3d0-4cff-4ffa-b8a8-8574bf452fc1",
        "parentId" : "1a247006-57e9-4b12-825e-4864fe51068b",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Seriously - golang stdlib error handling makes me cry.\n\n----- Original Message -----\n\n> > @@ -310,6 +314,25 @@ func (r *Request) Watch() (watch.Interface, error) {\n> >     return watch.NewStreamWatcher(watchjson.NewDecoder(resp.Body, r.codec)),\n> >     nil\n> >  }\n> > \n> > +// isProbableEOF returns true if the given error resembles a connection\n> > termination\n> > +// scenario that would justify assuming that the watch is empty. The watch\n> > stream\n> > +// mechanism handles many common partial data errors, so closed\n> > connections can be\n> > +// retried in many cases.\n> > +func isProbableEOF(err error) bool {\n> > -   if uerr, ok := err.(*url.Error); ok {\n> > -       err = uerr.Err\n> > -   }\n> > -   switch {\n> > -   case err == io.EOF:\n> > -       return true\n> > -   case err.Error() == \"http: can't write HTTP request on broken\n> >   connection\":\n> \n> Bad net/http package. ಠ_ಠ\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/3037/files#r22070294\n",
        "createdAt" : "2014-12-18T20:53:58Z",
        "updatedAt" : "2014-12-18T21:16:00Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "e3e27b75-0cf0-48a1-b5b3-e49e5bf5fd2a",
        "parentId" : "1a247006-57e9-4b12-825e-4864fe51068b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I filed https://github.com/golang/go/issues/9383\n",
        "createdAt" : "2014-12-18T21:02:27Z",
        "updatedAt" : "2014-12-18T21:16:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "b2434de777254f52d1ebcf6ae490b00dcb2b6d78",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +326,330 @@\tcase err == io.EOF:\n\t\treturn true\n\tcase err.Error() == \"http: can't write HTTP request on broken connection\":\n\t\treturn true\n\tcase strings.Contains(err.Error(), \"connection reset by peer\"):"
  },
  {
    "id" : "64148f2c-297b-405d-9b45-2470fc3b3fab",
    "prId" : 2813,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b873896-4750-4050-805b-216bc01d2475",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "This changes when you're required to call Namespace; I'm worried that our tests will not catch all instances of Namespace getting called in the wrong order. I'm not sure what the best thing to do about this is; panic if the path already has a resource in it? Set an errror?\n",
        "createdAt" : "2014-12-10T21:56:36Z",
        "updatedAt" : "2014-12-18T20:27:39Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "f82cfc5f-6fa6-4c9f-b6f4-2a4574b2a1e5",
        "parentId" : "9b873896-4750-4050-805b-216bc01d2475",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "From experience in this PR, our tests did a good job catching this, as we were no longer able to find resources.\n\nThere were a few options:\n\n1) hold `namespace` as a special attribute on `Request`, append to a special `path` for normal Path calls, and in `finalURL` build the URL with the proper ordering of basePath, namespace, path.\n2) keep as is ;-)\n3) set an err \n\nI chose 2, because in the long-run it was simpler code, and things fail early when you cant find the resource you expected to find.  I would prefer 3 to 1 though, but I was good with 2.\n",
        "createdAt" : "2014-12-10T22:04:38Z",
        "updatedAt" : "2014-12-18T20:27:39Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "cbbe61d115011acd2cf428e8ee170a7e40010fa0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +137,141 @@\t}\n\tif len(namespace) > 0 {\n\t\treturn r.Path(\"ns\").Path(namespace)\n\t}\n\treturn r"
  },
  {
    "id" : "dfcd7dd0-89e8-4c6c-840f-38ba72939b22",
    "prId" : 805,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0d1f280f-70f2-4b34-8940-e00515778d28",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "nit (future): sync and timeout are special params, setting them generically for a client user should indicate that you can't set them via standard Param\\* calls.  Doesn't have to be done here.\n",
        "createdAt" : "2014-08-07T14:14:44Z",
        "updatedAt" : "2014-08-08T21:09:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "eec2d004-14e0-4c4c-a68a-58eb436073de",
        "parentId" : "0d1f280f-70f2-4b34-8940-e00515778d28",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Doing it here anyway.\n",
        "createdAt" : "2014-08-08T20:35:56Z",
        "updatedAt" : "2014-08-08T21:09:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "5dd130a350388f8c3a9aaefe3508905752870d15",
    "line" : 173,
    "diffHunk" : "@@ -1,1 +234,238 @@\t\tquery.Add(key, value)\n\t}\n\t// sync and timeout are handled specially here, to allow setting them\n\t// in any order.\n\tif r.sync {"
  },
  {
    "id" : "e8263fe4-499a-4c0c-8224-261c0e6bd632",
    "prId" : 217,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d63f6be0-de24-48f8-9cdb-8e6155072769",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Nit: Lost an 'e'.\n",
        "createdAt" : "2014-06-24T18:33:19Z",
        "updatedAt" : "2014-06-24T18:33:19Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "8b50e45dccb50056d668e12c41d82b379dd4cffd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +148,152 @@}\n\n// Format and xecute the request. Returns the API object received, or an error.\nfunc (r *Request) Do() Result {\n\tif r.err != nil {"
  }
]