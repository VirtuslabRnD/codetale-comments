[
  {
    "id" : "6b95dc1e-c24d-4e77-9417-df1fca7ac52e",
    "prId" : 1937,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "47c0704a-b33f-4997-acc2-a8c6d7773460",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Are minions not namespaced yet?\n",
        "createdAt" : "2014-10-23T22:17:43Z",
        "updatedAt" : "2014-10-24T15:50:15Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "78b779bd-b358-4aa8-9104-03da88f527f8",
        "parentId" : "47c0704a-b33f-4997-acc2-a8c6d7773460",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "Nope\n\nSent from my iPhone\n\n> On Oct 23, 2014, at 6:18 PM, Daniel Smith notifications@github.com wrote:\n> \n> In pkg/client/client.go:\n> \n> >  }\n> > \n> > -// ReplicationControllerInterface has methods to work with ReplicationController resources.\n> > -type ReplicationControllerInterface interface {\n> > -   ListReplicationControllers(ctx api.Context, selector labels.Selector) (*api.ReplicationControllerList, error)\n> > -   GetReplicationController(ctx api.Context, id string) (*api.ReplicationController, error)\n> > -   CreateReplicationController(ctx api.Context, ctrl _api.ReplicationController) (_api.ReplicationController, error)\n> > -   UpdateReplicationController(ctx api.Context, ctrl _api.ReplicationController) (_api.ReplicationController, error)\n> > -   DeleteReplicationController(ctx api.Context, id string) error\n> > -   WatchReplicationControllers(ctx api.Context, label, field labels.Selector, resourceVersion string) (watch.Interface, error)\n> >   +func (c *Client) Minions() MinionInterface {\n> >   Are minions not namespaced yet?\n> \n> â€”\n> Reply to this email directly or view it on GitHub.\n",
        "createdAt" : "2014-10-23T22:53:40Z",
        "updatedAt" : "2014-10-24T15:50:15Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7be298f544087a93851bf4177936e1969e145c1",
    "line" : 44,
    "diffHunk" : "@@ -1,1 +40,44 @@}\n\nfunc (c *Client) Minions() MinionInterface {\n\treturn newMinions(c)\n}"
  },
  {
    "id" : "7739f9c0-bd17-4053-af9b-fe8247445c1d",
    "prId" : 1937,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee764e9d-2f0f-4bad-aaf5-dc3bb647edca",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I'll add namespaces to events after this goes in.\n",
        "createdAt" : "2014-10-23T22:56:27Z",
        "updatedAt" : "2014-10-24T15:50:15Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "b7be298f544087a93851bf4177936e1969e145c1",
    "line" : 56,
    "diffHunk" : "@@ -1,1 +44,48 @@}\n\nfunc (c *Client) Events() EventInterface {\n\treturn newEvents(c)\n}"
  },
  {
    "id" : "0fee2602-9308-4954-b8de-1e98ee969264",
    "prId" : 1789,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4e6380f0-2c0d-4669-981d-f435a4dcb38f",
        "parentId" : null,
        "authorId" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "body" : "Need to pass context to these like the other method.  I know you take issue with use of context in client, and I think your position is valid.  But consistency please while we sort out that separate debate.\n",
        "createdAt" : "2014-10-15T16:10:02Z",
        "updatedAt" : "2014-10-15T18:57:04Z",
        "lastEditedBy" : "020e031c-c298-4e7e-a533-9a04439c203c",
        "tags" : [
        ]
      }
    ],
    "commit" : "d4c750a878ec7934445f75b2bf37a39f0db703ec",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +74,78 @@}\n\n// EventInterface has methods to work with Event resources\ntype EventInterface interface {\n\tCreateEvent(event *api.Event) (*api.Event, error)"
  },
  {
    "id" : "055a327f-0f41-46d9-8367-38051eebd3d3",
    "prId" : 1103,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6013ea91-145a-4063-8a8b-e356ca73c6a9",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Split out an EndpointsInterface?\n",
        "createdAt" : "2014-08-29T20:21:17Z",
        "updatedAt" : "2014-09-03T20:05:06Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8fcccd61-7f43-4e59-8589-ba67d1fc400c",
        "parentId" : "6013ea91-145a-4063-8a8b-e356ca73c6a9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Yeah\n",
        "createdAt" : "2014-08-29T20:32:01Z",
        "updatedAt" : "2014-09-03T20:05:06Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "01e668187cc728e73b09286839ee3435c41e43bc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +76,80 @@// EndpointsInterface has methods to work with Endpoints resources\ntype EndpointsInterface interface {\n\tListEndpoints(selector labels.Selector) (api.EndpointsList, error)\n\tWatchEndpoints(label, field labels.Selector, resourceVersion uint64) (watch.Interface, error)\n}"
  },
  {
    "id" : "774a3e34-8c67-4979-9d23-98bf807fb120",
    "prId" : 1058,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cda64271-5c62-489f-8d6b-066e5f32bb80",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I know it's \"obviously\" correct, but can you add a test? I believe the other one liners here have tests.\n",
        "createdAt" : "2014-08-27T19:01:59Z",
        "updatedAt" : "2014-08-27T21:08:09Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7e0631fd-16b8-47bd-b2b3-500e775648c1",
        "parentId" : "cda64271-5c62-489f-8d6b-066e5f32bb80",
        "authorId" : "a0c645c0-b588-49b3-acdb-b2ad182a663e",
        "body" : "For some reason I find this a bit harder to read. Maybe?\n\n```\nfunc (c *Client) ListMinions() (api.MinionList, error) {\n  var minonList api.MinionList\n  err = c.Get().Path(\"minions\").Do().Into(&minonList)\n  return minonList, err\n}\n```\n\nAlso since this method is exported please add a comment.\n",
        "createdAt" : "2014-08-27T19:21:27Z",
        "updatedAt" : "2014-08-27T21:08:09Z",
        "lastEditedBy" : "a0c645c0-b588-49b3-acdb-b2ad182a663e",
        "tags" : [
        ]
      },
      {
        "id" : "08fd1112-85e5-48c3-be4e-33124e905a9e",
        "parentId" : "cda64271-5c62-489f-8d6b-066e5f32bb80",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "All of these functions have the form that Vish used-- I would vote for staying consistent. You can change them all in another PR if you wish, but since it's boilerplate I kinda prefer the very short version...\n",
        "createdAt" : "2014-08-27T19:25:39Z",
        "updatedAt" : "2014-08-27T21:08:09Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "3da48ac8-4eae-427e-9d4a-33288a3dde94",
        "parentId" : "cda64271-5c62-489f-8d6b-066e5f32bb80",
        "authorId" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "body" : "@kelseyhightower: Added function description. As @lavalamp mentioned, I chose to be consistent. I share your distaste for the current model.\n",
        "createdAt" : "2014-08-27T21:11:05Z",
        "updatedAt" : "2014-08-27T21:11:05Z",
        "lastEditedBy" : "c4b970b3-3b9c-4773-bc9b-f8d005b15fd1",
        "tags" : [
        ]
      }
    ],
    "commit" : "180e9ed493c50cf536654c2b5b278d3cca756631",
    "line" : null,
    "diffHunk" : "@@ -1,1 +331,335 @@// Lists all the minions in the cluster.\nfunc (c *Client) ListMinions() (minionList api.MinionList, err error) {\n\terr = c.Get().Path(\"minions\").Do().Into(&minionList)\n\treturn\n}"
  },
  {
    "id" : "cf505ffb-fbdb-4852-afa8-c989f5062275",
    "prId" : 995,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "08090f7f-7847-4a6b-992a-f2c5a5bd8412",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It may not be necessary to split each of these as granularly - it might be ok to say that a client that knows about any of  pods / replication controllers / services is assumed to know about the others.  I feel like version client might actually be better if it was coupled to an api version, in case a consumer decided to unify a set of apis behind a proxy.  In which case we could return an api description object from /api/v1beta1 that listed the resources supported and also returned version info.  That's a separate concern though.\n",
        "createdAt" : "2014-08-21T21:29:11Z",
        "updatedAt" : "2014-08-25T11:54:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "fbde2586-d683-4076-acb2-6fc982b5b1fc",
        "parentId" : "08090f7f-7847-4a6b-992a-f2c5a5bd8412",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "+1; the interface change is good, but I can't see how it helps to arrange the structs like this?\n",
        "createdAt" : "2014-08-21T21:41:10Z",
        "updatedAt" : "2014-08-25T11:54:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "d2da78c2-2fff-4301-aaec-7910b8f36955",
        "parentId" : "08090f7f-7847-4a6b-992a-f2c5a5bd8412",
        "authorId" : "3a60a43e-3e3d-40f9-b82d-24959d7af0d3",
        "body" : "Makes sense, it can be one single struct. However, I think it still makes sense to separate out the core client functionality from the thing that knows about pods, services, and replication controllers.\n",
        "createdAt" : "2014-08-21T21:48:11Z",
        "updatedAt" : "2014-08-25T11:54:47Z",
        "lastEditedBy" : "3a60a43e-3e3d-40f9-b82d-24959d7af0d3",
        "tags" : [
        ]
      },
      {
        "id" : "d50741b2-c3b5-4906-9ac5-36eb00ca8003",
        "parentId" : "08090f7f-7847-4a6b-992a-f2c5a5bd8412",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I suppose I can see a case for that separation. I would prefer to see this client get a different name, rather than the existing client..\n",
        "createdAt" : "2014-08-21T22:19:13Z",
        "updatedAt" : "2014-08-25T11:54:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "938548a9fb2db22f55ec9067b2968902edf9ea93",
    "line" : null,
    "diffHunk" : "@@ -1,1 +76,80 @@\n// Client is the actual implementation of a Kubernetes client.\ntype Client struct {\n\t*RESTClient\n}"
  },
  {
    "id" : "9b3016f3-63f7-4127-ab56-a58fcc219cd9",
    "prId" : 995,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0b67f6d7-e727-4906-8990-dce1ea360c5c",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "It would be cool to reconcile these interfaces with the extremely similar methods in the registry packages...\n",
        "createdAt" : "2014-08-21T22:21:19Z",
        "updatedAt" : "2014-08-25T11:54:47Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "539d66d7-6dbf-4c3f-ab10-18ddb130c7e4",
        "parentId" : "0b67f6d7-e727-4906-8990-dce1ea360c5c",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "The big difference is that the client reads the response after write and tools helper prevents it in code.  What's the disadvantage of having registry expose the read/written/merged write?\n",
        "createdAt" : "2014-08-23T14:58:23Z",
        "updatedAt" : "2014-08-25T11:54:47Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "938548a9fb2db22f55ec9067b2968902edf9ea93",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +54,58 @@// ReplicationControllerInterface has methods to work with ReplicationController resources\ntype ReplicationControllerInterface interface {\n\tListReplicationControllers(selector labels.Selector) (api.ReplicationControllerList, error)\n\tGetReplicationController(name string) (api.ReplicationController, error)\n\tCreateReplicationController(api.ReplicationController) (api.ReplicationController, error)"
  },
  {
    "id" : "b0fe0aff-2794-4fc3-98cb-b0f7be3b2767",
    "prId" : 805,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e19cf162-6202-46be-a352-f4826fea6cb8",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Agree should be split by resource.\n",
        "createdAt" : "2014-08-06T20:27:06Z",
        "updatedAt" : "2014-08-08T21:09:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "f4a041db-758a-4745-b640-a9abf9328fc4",
        "parentId" : "e19cf162-6202-46be-a352-f4826fea6cb8",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, in another PR though.\n",
        "createdAt" : "2014-08-06T20:36:22Z",
        "updatedAt" : "2014-08-08T21:09:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "5dd130a350388f8c3a9aaefe3508905752870d15",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +36,40 @@// an interface to allow mock testing.\n// TODO: split this up by resource?\n// TODO: these should return/take pointers.\ntype Interface interface {\n\tListPods(selector labels.Selector) (api.PodList, error)"
  },
  {
    "id" : "98e61d88-9bc4-4d2d-be00-1701570b4612",
    "prId" : 205,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "49a10e17-7645-4d92-9fe0-02fe744e5da4",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "consistency viz []byte{} vs nil\n",
        "createdAt" : "2014-06-24T02:49:42Z",
        "updatedAt" : "2014-06-24T17:08:13Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "175e998258c68bf48d36ec4297faaa8d29c3a4e3",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +102,106 @@\t}\n\tif response.StatusCode < http.StatusOK || response.StatusCode > http.StatusPartialContent {\n\t\treturn nil, fmt.Errorf(\"request [%#v] failed (%d) %s: %s\", request, response.StatusCode, response.Status, string(body))\n\t}\n\tif response.StatusCode == http.StatusAccepted {"
  },
  {
    "id" : "e6417fef-8d96-4c24-b777-bce9ce03eda3",
    "prId" : 80,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "69ca7bb0-ad8c-47ef-9cc9-6a99e7f04947",
        "parentId" : null,
        "authorId" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "body" : "It seems the idiomatic way to do this is to create a new file called `doc.go` that has nothing but the package comment and the package statement.  That way it is obvious which file contains the package comment.\n",
        "createdAt" : "2014-06-12T20:24:32Z",
        "updatedAt" : "2014-06-13T03:26:23Z",
        "lastEditedBy" : "e19009d8-ed5c-45bb-b5ce-4f8d956c6c45",
        "tags" : [
        ]
      },
      {
        "id" : "5a3e5616-405e-47dc-bf0f-537a763a130f",
        "parentId" : "69ca7bb0-ad8c-47ef-9cc9-6a99e7f04947",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Done.  PTAL\n\nThanks!\n--brendan\n",
        "createdAt" : "2014-06-13T03:27:21Z",
        "updatedAt" : "2014-06-13T03:27:21Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "164160adefa82b6063b3d97e04524b7664027584",
    "line" : null,
    "diffHunk" : "@@ -1,1 +15,19 @@*/\n\npackage client\n\nimport ("
  }
]