[
  {
    "id" : "925d7274-9d13-4fd8-82ef-1064ce66cb07",
    "prId" : 36909,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36909#pullrequestreview-10979797",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0d35a69-124e-46be-a929-ee272957215a",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Issue to fix this flow up.  The current solution seems hard to reason about.",
        "createdAt" : "2016-12-01T14:48:35Z",
        "updatedAt" : "2016-12-05T11:42:45Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "cf5523ab-1ad0-41e4-84be-aef42fa10abe",
        "parentId" : "f0d35a69-124e-46be-a929-ee272957215a",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Issue to fix this flow up. The current solution seems hard to reason about.\r\n\r\nWith federated API servers, individual failures will be more common.  I'm hard pressed to say why we shouldn't tolerate them.",
        "createdAt" : "2016-12-01T14:49:26Z",
        "updatedAt" : "2016-12-05T11:42:45Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "31eeb5c6-591d-4692-89e6-fd09b6d17aa0",
        "parentId" : "f0d35a69-124e-46be-a929-ee272957215a",
        "authorId" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "body" : "Totally agree. And the controllers must be prepared that resources come and go. Then temporary NotFounds do not matter.",
        "createdAt" : "2016-12-01T14:54:06Z",
        "updatedAt" : "2016-12-05T11:42:45Z",
        "lastEditedBy" : "f0985d19-4073-49b4-832a-0b89b15a1431",
        "tags" : [
        ]
      }
    ],
    "commit" : "2dff13f332bef6cddff2613023eced01518c5c02",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +187,191 @@\t\t\tresources, err := d.ServerResourcesForGroupVersion(version.GroupVersion)\n\t\t\tif err != nil {\n\t\t\t\t// TODO: maybe restrict this to NotFound errors\n\t\t\t\tfailedGroups[gv] = err\n\t\t\t\tif failEarly {"
  },
  {
    "id" : "ed03bcbf-3ed4-4eb1-81e4-1149d708cfa7",
    "prId" : 36444,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/36444#pullrequestreview-9125344",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d174feff-1a64-45bb-8c9f-be7f3d854681",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "I still don't understand why we aren't including the resources that only exist in non-preferred versions in the result of this function. anyone using this method today is missing resources. if a resource exists only in non-preferred versions, then I think we should pick something reasonable (like first version found), but still include the resource\n",
        "createdAt" : "2016-11-17T21:43:16Z",
        "updatedAt" : "2016-11-18T22:32:24Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "2f60cac4-4704-459b-bb1c-3ee5baac4b7e",
        "parentId" : "d174feff-1a64-45bb-8c9f-be7f3d854681",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Yeah, I think with the current implementation it makes sense to extend previous method, @krousey any disagreement on that?\n",
        "createdAt" : "2016-11-17T21:46:35Z",
        "updatedAt" : "2016-11-18T22:32:24Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4401c814fcc09f894a9c2f55f81a735ba3c578d6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +70,74 @@\t// ServerPreferredResources returns the supported resources with the version preferred by the\n\t// server.\n\tServerPreferredResources() ([]unversioned.GroupVersionResource, error)\n\t// ServerPreferredNamespacedResources returns the supported namespaced resources with the\n\t// version preferred by the server."
  },
  {
    "id" : "f026107d-6701-4060-8d4d-cf927ae6d9cc",
    "prId" : 33234,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33234#pullrequestreview-2801092",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "419482fa-aee7-4b2c-921c-250dac6148bc",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "maybe try again from the top if this isn't the last try?\n",
        "createdAt" : "2016-10-04T20:51:53Z",
        "updatedAt" : "2016-10-05T04:50:03Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "04ac4a4020e5439db0784639713fe008ee3cef21",
    "line" : null,
    "diffHunk" : "@@ -1,1 +221,225 @@\t\t\t\t\tcontinue RetrieveGroups\n\t\t\t\t}\n\t\t\t\tfailedGroups[groupVersion] = err\n\t\t\t\tcontinue\n\t\t\t}"
  },
  {
    "id" : "d65d5bbc-1be6-4010-9b0f-1715912b68de",
    "prId" : 32182,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "3eb29458-0b83-4150-bef7-753d4ad4e4fe",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Can you add a test case to cover this flow. While doing so please rename `client_test.go` to appropriate `discovery_client_test.go`.\n",
        "createdAt" : "2016-09-07T10:04:34Z",
        "updatedAt" : "2016-09-07T14:59:49Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "88b64a7a8209c2a0698ea4e33a002ad267f57074",
    "line" : 85,
    "diffHunk" : "@@ -1,1 +230,234 @@\t}\n\tif len(failedGroups) > 0 {\n\t\treturn results, &ErrGroupDiscoveryFailed{Groups: failedGroups}\n\t}\n\treturn results, nil"
  },
  {
    "id" : "2feb8d56-e898-4578-9585-538202df2014",
    "prId" : 24509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b4556f9b-ce26-4c38-9dbe-6e1233b9b37b",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I could see putting RootScoped in the name. Your call.\n",
        "createdAt" : "2016-05-11T23:29:01Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "4d4e76c5-70f6-4072-bdcd-d0e3af31b410",
        "parentId" : "b4556f9b-ce26-4c38-9dbe-6e1233b9b37b",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Yeah, scratch this.\n",
        "createdAt" : "2016-05-11T23:30:21Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cda99b8d7942c20e0242d6e5cf7564c30984615",
    "line" : 67,
    "diffHunk" : "@@ -1,1 +206,210 @@// ServerPreferredResources returns the supported resources with the version preferred by the\n// server.\nfunc (d *DiscoveryClient) ServerPreferredResources() ([]unversioned.GroupVersionResource, error) {\n\treturn d.serverPreferredResources(false)\n}"
  },
  {
    "id" : "6148a1c2-6820-4c59-88ed-3fba66b5fab6",
    "prId" : 24509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bade9be4-c7fb-4383-a4f8-25efc446bbf5",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Comment should mention that it's root scoped only.\n",
        "createdAt" : "2016-05-11T23:29:20Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "97ee7910-ad18-4bf3-8cc7-c4dff85bff67",
        "parentId" : "bade9be4-c7fb-4383-a4f8-25efc446bbf5",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Oh, I guess it's not root scoped only. nvm. maybe the comment can emphasize that.\n",
        "createdAt" : "2016-05-11T23:30:10Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cda99b8d7942c20e0242d6e5cf7564c30984615",
    "line" : 65,
    "diffHunk" : "@@ -1,1 +204,208 @@}\n\n// ServerPreferredResources returns the supported resources with the version preferred by the\n// server.\nfunc (d *DiscoveryClient) ServerPreferredResources() ([]unversioned.GroupVersionResource, error) {"
  },
  {
    "id" : "e7b83478-c6d3-42e7-bc2b-d389e2fc074f",
    "prId" : 24509,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6de6e9e9-b608-49dc-aaa6-30381bf2cb69",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Is this being added so the garbage collector only watches the preferred version?\n",
        "createdAt" : "2016-05-11T23:36:39Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "c8260940-ce41-4ac5-b7df-e46740f1acd9",
        "parentId" : "6de6e9e9-b608-49dc-aaa6-30381bf2cb69",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Yes.\n\nThe namespace controller uses a similar function, but it only cares about namespace-scoped resources. I slightly adjusted that function and moved it to the discovery client.\n",
        "createdAt" : "2016-05-11T23:40:17Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "acc7da72-baff-44d6-8815-26152db7a472",
        "parentId" : "6de6e9e9-b608-49dc-aaa6-30381bf2cb69",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "So does the garbage collector ignore the version specified in the owner reference? Wondering how that will work with third party resource data objects whose versions are independent and unconnected. \n",
        "createdAt" : "2016-05-11T23:46:59Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "4f58070c-efb8-4830-bd93-cc0a77a21bd0",
        "parentId" : "6de6e9e9-b608-49dc-aaa6-30381bf2cb69",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "Though that's something that needs solving already for the namespace controller as well\n",
        "createdAt" : "2016-05-11T23:47:20Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "569d80d5-ea23-467f-b78e-202f0c04d2c8",
        "parentId" : "6de6e9e9-b608-49dc-aaa6-30381bf2cb69",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "> So does the garbage collector ignore the version specified in the owner reference?\n\nNo, gc uses the dynamic client and that client will use the version specified in the owner reference.\n\nGC only uses the preferredVersion to watch the resource.\n\nI don't see why third party resource will be a problem, could you explain more?\n",
        "createdAt" : "2016-05-12T01:53:23Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "66fc0c8e-0c67-41d8-b8da-50b1f85616ca",
        "parentId" : "6de6e9e9-b608-49dc-aaa6-30381bf2cb69",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "API versions of third party resource data objects are unrelated to each other. If the GC controller is watching v1 of myresource.mygroup.io because v1 is the preferred version, it won't know about v2 objects of that group/resource. \n",
        "createdAt" : "2016-05-12T02:01:27Z",
        "updatedAt" : "2016-05-17T20:49:00Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "0cda99b8d7942c20e0242d6e5cf7564c30984615",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +174,178 @@// serverPreferredResources returns the supported resources with the version preferred by the\n// server. If namespaced is true, only namespaced resources will be returned.\nfunc (d *DiscoveryClient) serverPreferredResources(namespaced bool) ([]unversioned.GroupVersionResource, error) {\n\tresults := []unversioned.GroupVersionResource{}\n\tserverGroupList, err := d.ServerGroups()"
  }
]