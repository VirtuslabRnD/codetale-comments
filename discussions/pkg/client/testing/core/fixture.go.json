[
  {
    "id" : "1b4bca49-9f0f-4be1-a934-14614369447b",
    "prId" : 26680,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "525aef7c-ce6a-403b-90d1-8eb8fa2f3a91",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Can we get a separate list method?\n",
        "createdAt" : "2016-06-07T13:39:15Z",
        "updatedAt" : "2016-06-28T19:31:35Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "9b0d7e9e-3bd8-4cbf-b5f5-32d276558d22",
        "parentId" : "525aef7c-ce6a-403b-90d1-8eb8fa2f3a91",
        "authorId" : "1cb05d99-3dec-4446-a1fa-4aeb956021e5",
        "body" : "Yeah, it will make things cleaner for sure. I am still not clear on a distinction between GroupResource and GroupKind: existing code seems to be using them interchangeably.\n",
        "createdAt" : "2016-06-07T17:24:44Z",
        "updatedAt" : "2016-06-28T19:31:35Z",
        "lastEditedBy" : "1cb05d99-3dec-4446-a1fa-4aeb956021e5",
        "tags" : [
        ]
      }
    ],
    "commit" : "a58b4cf59df732d432ae10a39647f843e26b6d9b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +39,43 @@\n\t// Get retrieves the object by its kind, namespace and name.\n\tGet(gvk unversioned.GroupVersionKind, ns, name string) (runtime.Object, error)\n\n\t// Update updates an existing object in the tracker."
  },
  {
    "id" : "fa3e9d9b-a28b-407f-baad-65441fdc8d05",
    "prId" : 26680,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a170e1e9-c21e-477a-9567-d02323c7f907",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "doc the meaning of empty here.  Empty namespace is one of the worst constructs we have.  Sometimes it is none, sometimes it is all, sometimes it is any, and sometimes it is \"default\".\n",
        "createdAt" : "2016-06-15T15:38:50Z",
        "updatedAt" : "2016-06-28T19:31:35Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "a58b4cf59df732d432ae10a39647f843e26b6d9b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +364,368 @@// match provided namespace and name. Empty namespace matches\n// non-namespaced objects.\nfunc filterByNamespaceAndName(objs []runtime.Object, ns, name string) ([]runtime.Object, error) {\n\tvar res []runtime.Object\n"
  },
  {
    "id" : "c91c834b-4332-4ecf-8f67-1e23130803b4",
    "prId" : 26680,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d9b8cff3-d319-4477-acfd-4062b502535b",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "make an error of some kind for getting more than one here.\n",
        "createdAt" : "2016-06-15T15:42:39Z",
        "updatedAt" : "2016-06-28T19:31:35Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "a58b4cf59df732d432ae10a39647f843e26b6d9b",
    "line" : 314,
    "diffHunk" : "@@ -1,1 +215,219 @@\t\treturn nil, err\n\t}\n\tif len(matchingObjs) == 0 {\n\t\treturn nil, errNotFound\n\t}"
  },
  {
    "id" : "9023cabe-04d4-47f1-9e12-f1f9ed2d02af",
    "prId" : 26680,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "eeaa12ad-c586-4efc-9539-a11d03203d87",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "How and why would I get here with a list type?\n",
        "createdAt" : "2016-06-15T15:45:10Z",
        "updatedAt" : "2016-06-28T19:31:35Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "e2aada6b-bb8f-46eb-9f44-c35686a98d25",
        "parentId" : "eeaa12ad-c586-4efc-9539-a11d03203d87",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> How and why would I get here with a list type?\n\nOh, you're using this for initialization?  I think I'd suggest a different external method for initialization that breaks it apart and does the individual adds.\n",
        "createdAt" : "2016-06-15T15:47:41Z",
        "updatedAt" : "2016-06-28T19:31:35Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "aa300aa9-dc55-4dcc-82ff-371a0787b872",
        "parentId" : "eeaa12ad-c586-4efc-9539-a11d03203d87",
        "authorId" : "1cb05d99-3dec-4446-a1fa-4aeb956021e5",
        "body" : "Yeah, the existing code assumes Add can accept the list, I wasn't a big fan but decided to keep it. Will experiment with adding a separate `Init()` method.\n",
        "createdAt" : "2016-06-15T17:00:47Z",
        "updatedAt" : "2016-06-28T19:31:35Z",
        "lastEditedBy" : "1cb05d99-3dec-4446-a1fa-4aeb956021e5",
        "tags" : [
        ]
      },
      {
        "id" : "9809cd90-555d-45c3-b4e6-1d305c974550",
        "parentId" : "eeaa12ad-c586-4efc-9539-a11d03203d87",
        "authorId" : "1cb05d99-3dec-4446-a1fa-4aeb956021e5",
        "body" : "It seems that will be slightly more involved than I expected, since tests use both list and non-list objects for the fake clientset initialization and sometimes mix them together. Should I just change all tests to not add lists? The alternative is to keep the current behavior for now and revisit it along with further fake clientset improvements.\n",
        "createdAt" : "2016-06-15T17:11:30Z",
        "updatedAt" : "2016-06-28T19:31:35Z",
        "lastEditedBy" : "1cb05d99-3dec-4446-a1fa-4aeb956021e5",
        "tags" : [
        ]
      },
      {
        "id" : "043baec5-e069-441b-92c9-351ef940b66c",
        "parentId" : "eeaa12ad-c586-4efc-9539-a11d03203d87",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> It seems that will be slightly more involved than I expected, since tests use both list and non-list objects for the fake clientset initialization and sometimes mix them together. Should I just change all tests to not add lists? The alternative is to keep the current behavior for now and revisit it along with further fake clientset improvements.\n\nI won't block the pull on this.  Fixing in the future would be desireable.  Initialization is special and I'd rather have accidents in unit tests.\n",
        "createdAt" : "2016-06-15T17:51:09Z",
        "updatedAt" : "2016-06-28T19:31:35Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "a58b4cf59df732d432ae10a39647f843e26b6d9b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +251,255 @@\nfunc (t *tracker) add(obj runtime.Object, replaceExisting bool) error {\n\tif meta.IsListType(obj) {\n\t\treturn t.addList(obj, replaceExisting)\n\t}"
  }
]