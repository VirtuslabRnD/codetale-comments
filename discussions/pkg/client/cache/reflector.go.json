[
  {
    "id" : "83947229-5e76-4a46-9e83-922113682330",
    "prId" : 25945,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "680a1123-373c-49a8-a994-49fb69213eb0",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "As I wrote in the PR comment - with this approach timeoutForWatch can be signiifcantly simplied.\nSo it should be just:\n\n```\n time.Duration(float64(minWatchTimeout) * (rand.Float64() + 1.0))\n```\n\nand we don't even need a function for it.\nIt was necessary when relist was strictly connected to resync (i.e. we couldnt' do resync with watch opened).\n",
        "createdAt" : "2016-05-20T08:56:37Z",
        "updatedAt" : "2016-05-23T01:04:34Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "abbbd7c2f2bbf5eb79e97e1337f406c631754dd3",
    "line" : null,
    "diffHunk" : "@@ -1,1 +304,308 @@\t\t\tTimeoutSeconds: &timemoutseconds,\n\t\t}\n\n\t\tw, err := r.listerWatcher.Watch(options)\n\t\tif err != nil {"
  },
  {
    "id" : "f913af43-0225-4dbd-a16f-9046e9ec2575",
    "prId" : 16266,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9b06da1e-0295-4ed3-88a9-095032a49dc8",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Did you consider using http.Hijacker, getting the raw net.Conn, closing the write half, and waiting for the server to then close the other half? (not sure if it will work but would perhaps be simpler than this)\n",
        "createdAt" : "2015-10-27T04:28:50Z",
        "updatedAt" : "2015-10-27T04:28:50Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "b89822bd-65d2-4d21-ad0c-e93a8a1c4d8e",
        "parentId" : "9b06da1e-0295-4ed3-88a9-095032a49dc8",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Anything http Hijacked can't be returned to the pool and is closed at the\nend\n\nOn Oct 27, 2015, at 12:29 AM, Daniel Smith notifications@github.com wrote:\n\nIn pkg/client/cache/reflector.go\nhttps://github.com/kubernetes/kubernetes/pull/16266#discussion_r43083521:\n\n>   t := time.NewTimer(r.resyncPeriod)\n>   return t.C, t.Stop\n>  }\n> \n> +// We want to avoid situations when periodic resyncing is breaking the TCP\n> +// connection.\n> +// If response`s body is not read to completion before calling body.Close(),\n> +// that TCP connection will not be reused in the future - see #15664 issue\n> +// for more details.\n\nDid you consider using http.Hijacker, getting the raw net.Conn, closing the\nwrite half, and waiting for the server to then close the other half? (not\nsure if it will work but would perhaps be simpler than this)\n\nâ€”\nReply to this email directly or view it on GitHub\nhttps://github.com/kubernetes/kubernetes/pull/16266/files#r43083521.\n",
        "createdAt" : "2015-10-27T04:37:46Z",
        "updatedAt" : "2015-10-27T04:37:46Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "d47e21f19feeb5322de51fb25ee8ce51d0e0ea1c",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +197,201 @@// If response`s body is not read to completion before calling body.Close(),\n// that TCP connection will not be reused in the future - see #15664 issue\n// for more details.\n// Thus, we set timeout for watch requests to be smaller than the remaining\n// time until next periodic resync and force resyncing ourself to avoid"
  },
  {
    "id" : "00673d35-82bf-4ca7-b7ea-ec8baba1d7f8",
    "prId" : 16266,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "914a1747-e055-4664-90c8-90df084cd7db",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I don't understand this-- I thought the deal was that the server always had to be the one closing the connection?\n",
        "createdAt" : "2015-10-27T04:29:29Z",
        "updatedAt" : "2015-10-27T04:29:29Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "fe5afc23-6461-4037-b411-2221ca5637f1",
        "parentId" : "914a1747-e055-4664-90c8-90df084cd7db",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yes - but server can close the connection only on timeout - that's why if we are close to next resync, we just do not start next watch and force periodic resync.\n",
        "createdAt" : "2015-10-27T07:53:50Z",
        "updatedAt" : "2015-10-27T07:53:50Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "10657270-5564-4560-b300-e82ac644123e",
        "parentId" : "914a1747-e055-4664-90c8-90df084cd7db",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I still don't really follow this. How do you know the timeout the server selected for you?\n",
        "createdAt" : "2015-10-27T17:56:27Z",
        "updatedAt" : "2015-10-27T17:56:27Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "77146dff-da76-4db6-a415-abba865217ac",
        "parentId" : "914a1747-e055-4664-90c8-90df084cd7db",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Sorry - I will try to explain cleaner:\n I'm explicitly setting timeout for the request using \"?timeoutSeconds=\" parameter. Thanks to it I know that the request should finish not later than that timeout.\n When the request is finished (terminated by the server, because of set timeout), I check how far we are from the next planned periodic resync - if we are close, we just force the resync slightly before the planned time, if not we send another watch request from the last resource version.\n",
        "createdAt" : "2015-10-27T18:04:05Z",
        "updatedAt" : "2015-10-27T18:04:05Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "2843f7e6-7aaa-415e-826c-f1e773dc1e41",
        "parentId" : "914a1747-e055-4664-90c8-90df084cd7db",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "OK, that makes sense now, thanks-- maybe you can expand this comment.\n\n>  if not we send another watch request from the last resource version.\n\nJudging from the last log I looked at, this is broken right now, it doesn't update its resource version as new watch events come in.\n",
        "createdAt" : "2015-10-27T20:57:10Z",
        "updatedAt" : "2015-10-27T20:57:10Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "769a3da8-ba33-4d4e-9e8e-df7db8ed1b4f",
        "parentId" : "914a1747-e055-4664-90c8-90df084cd7db",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "No - it works fine (in fact I didn't touch the logic around resourceVersion).\nSo to clarify:\n- internal resourceVersion is updated every time we process an event from watch:\n  https://github.com/kubernetes/kubernetes/blob/master/pkg/client/cache/reflector.go#L348\n- we pass a pointer to resourceVersion to watchHandler, so next time we call watchHandler we use the last we observed:\n  https://github.com/kubernetes/kubernetes/blob/master/pkg/client/cache/reflector.go#L279\n",
        "createdAt" : "2015-10-28T07:31:02Z",
        "updatedAt" : "2015-10-28T07:31:02Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "d47e21f19feeb5322de51fb25ee8ce51d0e0ea1c",
    "line" : 93,
    "diffHunk" : "@@ -1,1 +213,217 @@}\n\n// Returns true if we are close enough to next planned periodic resync\n// and we can force resyncing ourself now.\nfunc (r *Reflector) canForceResyncNow() bool {"
  },
  {
    "id" : "f007a5e0-21dd-46fb-b8a3-183ec4f7b013",
    "prId" : 12268,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c71ec0f8-c5a3-4405-8ca4-21cd1ea50bff",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It's weird to do the string->int conversion here.  Would suggest this become an interface VersionedStore that implements ReplaceWithVersion(string).  Reflector shouldn't have to know about int resource versions.\n",
        "createdAt" : "2015-08-06T17:15:13Z",
        "updatedAt" : "2015-08-07T06:29:49Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "2fc35966-92b7-4b8c-b151-09829c06a70a",
        "parentId" : "c71ec0f8-c5a3-4405-8ca4-21cd1ea50bff",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "SGTM - will fix that tomorrow.\n",
        "createdAt" : "2015-08-06T17:17:47Z",
        "updatedAt" : "2015-08-07T06:29:49Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "32da7a52-c06d-4c43-a6d5-418198470b62",
        "parentId" : "c71ec0f8-c5a3-4405-8ca4-21cd1ea50bff",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Done.\n",
        "createdAt" : "2015-08-07T06:30:04Z",
        "updatedAt" : "2015-08-07T06:30:04Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "52e3af4e9358cb59852544cf0e6d90a3611ee58c",
    "line" : 45,
    "diffHunk" : "@@ -1,1 +239,243 @@\t}\n\n\tmyStore, ok := r.store.(*WatchCache)\n\tif ok {\n\t\treturn myStore.ReplaceWithVersion(found, resourceVersion)"
  },
  {
    "id" : "a9bda36f-f081-466e-b2fc-daf5ed74ffb0",
    "prId" : 10024,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "03ee84b2-4868-4ef6-bfd4-82fbefb80df4",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This belongs someplace else (utility method) that lets you specify all these things as arguments.\n",
        "createdAt" : "2015-06-18T17:22:17Z",
        "updatedAt" : "2015-07-10T15:35:08Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "d222420c-cf2c-49f9-8dc0-46958dc35b98",
        "parentId" : "03ee84b2-4868-4ef6-bfd4-82fbefb80df4",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> This belongs someplace else (utility method) that lets you specify all these things as arguments.\n\nrefactored.\n",
        "createdAt" : "2015-06-18T17:49:15Z",
        "updatedAt" : "2015-07-10T15:35:08Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "f203b16cd9b67e0f9916ffb9b41e822ebdef454b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +108,112 @@// it returns back a shortpath/filename:line to aid in identification of this reflector when it starts logging\nfunc getDefaultReflectorName(ignoredPackages ...string) string {\n\tname := \"????\"\nouter:\n\tfor i := 1; i < 10; i++ {"
  },
  {
    "id" : "60f1346a-a2f4-4d83-80fe-d35945a08439",
    "prId" : 10024,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57205ff4-6991-4788-ac1b-cf8c61525a5f",
        "parentId" : null,
        "authorId" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "body" : "Does this impose a requirement that consuming code/projects are structured with the `pkg/` convention?\n",
        "createdAt" : "2015-07-10T13:35:15Z",
        "updatedAt" : "2015-07-10T15:35:08Z",
        "lastEditedBy" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "tags" : [
        ]
      },
      {
        "id" : "a72fd576-d72b-480a-8063-38cec3f7a469",
        "parentId" : "57205ff4-6991-4788-ac1b-cf8c61525a5f",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Does this impose a requirement that consuming code/projects are structured with the pkg/ convention?\n\nNo, it just makes the string prettier if you do.  If you do, it gives everything past `pkg` for shorter display.  Otherwise, it logs with the entire long package.\n",
        "createdAt" : "2015-07-10T13:48:43Z",
        "updatedAt" : "2015-07-10T15:35:08Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "d16e5e03-b1b9-4187-ac74-839c2866308b",
        "parentId" : "57205ff4-6991-4788-ac1b-cf8c61525a5f",
        "authorId" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "body" : "Oh, I see. Thanks!\n",
        "createdAt" : "2015-07-10T13:51:16Z",
        "updatedAt" : "2015-07-10T15:35:08Z",
        "lastEditedBy" : "f04ec747-f3ff-4334-a66e-6daaf4497091",
        "tags" : [
        ]
      }
    ],
    "commit" : "f203b16cd9b67e0f9916ffb9b41e822ebdef454b",
    "line" : 63,
    "diffHunk" : "@@ -1,1 +122,126 @@\t\t}\n\n\t\tpkgLocation := strings.LastIndex(file, \"/pkg/\")\n\t\tif pkgLocation >= 0 {\n\t\t\tfile = file[pkgLocation+1:]"
  },
  {
    "id" : "6b7ed841-3dbe-48bc-a66e-a793133d8743",
    "prId" : 6074,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a68cdaeb-1da2-4f6e-a6ae-748c38910b8e",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Suggestion, maybe:\n\n``` go\nfunc (r *Reflector) IsMostRecentResourceVersion(rv string) bool {\n    return r.lastSyncResourceVersion == rv\n}\n```\n\nwill help people use this safely?\n\nAlso please comment on the thread safety here. I'm having a hard time convincing myself that there's a race-free way to use this.\n",
        "createdAt" : "2015-03-27T21:04:41Z",
        "updatedAt" : "2015-04-08T21:09:21Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "0464618e-dbc0-4d5d-924c-32b00be01da0",
        "parentId" : "a68cdaeb-1da2-4f6e-a6ae-748c38910b8e",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "There are two cases I need:\n1. as a caller of reflector, I need to have a way of getting the latest known resource version\n2. a way to know if what i have as last known resource version is still accurate\n\nThe IsMostRecentResourceVersion is probably needed to avoid a race condition.\n",
        "createdAt" : "2015-03-30T20:51:34Z",
        "updatedAt" : "2015-04-08T21:09:21Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "9df41301f09eeaff5db437a309423c62d3058657",
    "line" : null,
    "diffHunk" : "@@ -1,1 +226,230 @@// The value returned is not synchronized with access to the underlying store and is not thread-safe\nfunc (r *Reflector) LastSyncResourceVersion() string {\n\treturn r.lastSyncResourceVersion\n}"
  },
  {
    "id" : "e9a281df-99c7-4af0-a9ab-0dadcaaaf39d",
    "prId" : 909,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d6f1db9-28fa-4ddc-b692-d4de085e9829",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Comment is old name\n",
        "createdAt" : "2014-08-19T01:54:08Z",
        "updatedAt" : "2014-08-20T23:50:08Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "833e9f24-f7c1-455e-8f62-87c898b430d1",
        "parentId" : "4d6f1db9-28fa-4ddc-b692-d4de085e9829",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Not sure how my find and replace missed that one.\n",
        "createdAt" : "2014-08-19T17:45:30Z",
        "updatedAt" : "2014-08-20T23:50:08Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "03cd22d4f4a682dc1a6d87f30bec08d45d4e7ef8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +34,38 @@\tstore Store\n\t// watchFactory is called to initiate watches.\n\twatchFactory WatchFactory\n\t// period controls timing between one watch ending and\n\t// the beginning of the next one."
  },
  {
    "id" : "02593eac-b64a-42c3-8e1d-b53e26c83859",
    "prId" : 909,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccd0ad01-af02-498b-910d-a3cfa984d02f",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Since this is a func type would it not be more idiomatic for it to be WatcherFunc?\n",
        "createdAt" : "2014-08-19T01:56:03Z",
        "updatedAt" : "2014-08-20T23:50:08Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "0d892231-1eca-4bc6-ad61-f5635659916c",
        "parentId" : "ccd0ad01-af02-498b-910d-a3cfa984d02f",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I want some name that indicates that this function creates a watch. \"WatcherFunc\" to me sounds like it _is_ a watch.\n",
        "createdAt" : "2014-08-19T17:45:00Z",
        "updatedAt" : "2014-08-20T23:50:08Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "03cd22d4f4a682dc1a6d87f30bec08d45d4e7ef8",
    "line" : null,
    "diffHunk" : "@@ -1,1 +41,45 @@\n// WatchFactory should begin a watch at the specified version.\ntype WatchFactory func(resourceVersion uint64) (watch.Interface, error)\n\n// NewReflector makes a new Reflector object which will keep the given store up to"
  }
]