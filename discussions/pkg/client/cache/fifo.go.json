[
  {
    "id" : "5bc1af23-f58f-424a-bb3a-9dac88fddaea",
    "prId" : 27435,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "33b82c09-c4e1-4078-9e29-5d3044e8d7f3",
        "parentId" : null,
        "authorId" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "body" : "4 really's are really not enough :)\n",
        "createdAt" : "2016-06-15T17:12:13Z",
        "updatedAt" : "2016-06-15T17:12:13Z",
        "lastEditedBy" : "bd04f755-e62f-45fb-8771-4cc2b5db49d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccd42e923608481ed1977b0cb9282ccbf620ff17",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +47,51 @@// Helper function for popping from Queue.\n// WARNING: Do NOT use this function in non-test code to avoid races\n// unless you really really really really know what you are doing.\nfunc Pop(queue Queue) interface{} {\n\tvar result interface{}"
  },
  {
    "id" : "9654d981-b7e8-4004-8c16-60d1d5f70a44",
    "prId" : 27341,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "95ec76a4-6f9f-4805-b8d8-6e2c86e43b02",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Go doc defining what this should do.\n",
        "createdAt" : "2016-06-14T13:49:57Z",
        "updatedAt" : "2016-06-14T14:40:58Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "f3317c17-d9db-4d2f-95f1-717af0a55f98",
        "parentId" : "95ec76a4-6f9f-4805-b8d8-6e2c86e43b02",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "done\n",
        "createdAt" : "2016-06-14T14:05:30Z",
        "updatedAt" : "2016-06-14T14:40:58Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d702a32c14a764397d9d1dd96ed4e994b47072d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +25,29 @@// PopProcessFunc is passed to Pop() method of Queue interface.\n// It is supposed to process the element popped from the queue.\ntype PopProcessFunc func(interface{}) error\n\n// Queue is exactly like a Store, but has a Pop() method too."
  },
  {
    "id" : "60126110-a13b-40b2-b167-d7e4dfe1032a",
    "prId" : 27341,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5fd9aaec-7f9d-4ca1-80f9-93afb3444157",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Add comment about how the process semantics work (i.e. anything passed to popprocessfunc is done under the lock and is safe, etc)\n",
        "createdAt" : "2016-06-14T13:50:28Z",
        "updatedAt" : "2016-06-14T14:40:58Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "bdcfb896-9b22-452d-8322-946d8ca659d3",
        "parentId" : "5fd9aaec-7f9d-4ca1-80f9-93afb3444157",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "done\n",
        "createdAt" : "2016-06-14T14:05:34Z",
        "updatedAt" : "2016-06-14T14:40:58Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d702a32c14a764397d9d1dd96ed4e994b47072d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +202,206 @@// ready, they are returned in the order in which they were added/updated.\n// The item is removed from the queue (and the store) before it is processed,\n// so if you don't successfully process it, it should be added back with\n// AddIfNotPresent(). process function is called under lock, so it is safe\n// update data structures in it that need to be in sync with the queue."
  },
  {
    "id" : "1a0f50fc-da93-461c-9f3e-987bbcabad38",
    "prId" : 27341,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d13b02dd-aae8-4217-b705-f44a2171d88c",
        "parentId" : null,
        "authorId" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "body" : "I understand the intention. However, I dislike this interface change. I would still keep the Queue is a simple data structure without the ability to process the out-coming data. Is there anything prevent us from doing this outside the queue (holding some locks)?\n",
        "createdAt" : "2016-06-14T14:28:10Z",
        "updatedAt" : "2016-06-14T14:45:06Z",
        "lastEditedBy" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "tags" : [
        ]
      },
      {
        "id" : "257a940c-119d-4f1b-845b-6e922636accf",
        "parentId" : "d13b02dd-aae8-4217-b705-f44a2171d88c",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Unfortunately that's not going to happen. Basically the problem is that we need to sync between DeltaFIFO and \"knownKeys\" that is passed to it. If we don't change the interface like that, the locking will be spreaded all over the code everywhere.\n",
        "createdAt" : "2016-06-14T14:42:01Z",
        "updatedAt" : "2016-06-14T14:42:02Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "96bbf31c-6999-44b1-a298-8eed9c2b996f",
        "parentId" : "d13b02dd-aae8-4217-b705-f44a2171d88c",
        "authorId" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "body" : "@wojtek-t \n\nI understand the intention. However, as far as I can see we do not really need to change a lot of places if we try to approach this problem in a different way that solving it outside the queue. I may be wrong. And I am OK with this solution as a temp one.\n\nSo here is my thought:\nWe now try to force the dequeue operation and the processing of the dequeued item protected by a shared queue lock. To be more concrete, for the service controller it is its cache.\n\nFirst, I do not believe this is not a good abstraction. Queue now needs to worry about the synchronization between internal and external objects.  Second, this does not prevent the synchronization problem to happen. The knowobject cache still can be accessed externally asynchronously. This solves today's issue in a not elegant and sustainable way I think. \n\nThus I dislike it. And I suggest to clean this whole thing up after 1.3 if we want to go this approach right now.\n",
        "createdAt" : "2016-06-14T14:59:17Z",
        "updatedAt" : "2016-06-14T15:05:15Z",
        "lastEditedBy" : "55c0e4a8-86f8-4426-a163-752ee421c57e",
        "tags" : [
        ]
      },
      {
        "id" : "d1beb9f8-49a0-497c-a8a7-17e3ba156add",
        "parentId" : "d13b02dd-aae8-4217-b705-f44a2171d88c",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I definitely agree that it's not an ideal solution. But fixing it properly can't be done within an hour or - it would require days, which we don't have before 1.3. And this is fixing the problem that we are facing now.\nAnd I completely agree that fixing it properly after 1.3 is a good thing to do.\n",
        "createdAt" : "2016-06-14T16:15:27Z",
        "updatedAt" : "2016-06-14T16:15:27Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d702a32c14a764397d9d1dd96ed4e994b47072d",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +33,37 @@\t// Pop blocks until it has something to process.\n\t// It returns the object that was process and the result of processing.\n\tPop(PopProcessFunc) (interface{}, error)\n\n\t// AddIfNotPresent adds a value previously"
  },
  {
    "id" : "e45accd5-81a2-48a0-b694-a67795791c88",
    "prId" : 27341,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09fa400c-9d2f-4cab-a502-d4b893e9b988",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I don't understand how anyone using this helper function will not have the problem you're trying to prevent?\n",
        "createdAt" : "2016-06-14T17:29:06Z",
        "updatedAt" : "2016-06-14T17:29:06Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "559f5c10-8cdb-4c3b-8d76-f83d2addf3e3",
        "parentId" : "09fa400c-9d2f-4cab-a502-d4b893e9b988",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I see, you're only using it for tests. Please update this comment or people are going to get bitten by this.\n",
        "createdAt" : "2016-06-14T17:32:59Z",
        "updatedAt" : "2016-06-14T17:32:59Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "2b58d493-af1d-4af3-b134-fd87a6e27993",
        "parentId" : "09fa400c-9d2f-4cab-a502-d4b893e9b988",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "@lavalamp - since this is already merged and we probably need to fix some more issues - see https://github.com/kubernetes/kubernetes/issues/27004#issuecomment-225963877 (but those one are very local changes) I will update the comment in that PR tomorrow.\n",
        "createdAt" : "2016-06-14T18:29:57Z",
        "updatedAt" : "2016-06-14T18:29:57Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5d702a32c14a764397d9d1dd96ed4e994b47072d",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +46,50 @@\n// Helper function for popping from Queue.\nfunc Pop(queue Queue) interface{} {\n\tvar result interface{}\n\tqueue.Pop(func(obj interface{}) error {"
  },
  {
    "id" : "b160b36a-9ecd-41f4-bf74-b8af5d47abdf",
    "prId" : 24142,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4023cffc-2e81-4ff7-a6cb-79b1cffb2fa5",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "We should add all existing elements to the \"f.queue\" here.\n",
        "createdAt" : "2016-05-16T07:53:10Z",
        "updatedAt" : "2016-05-19T11:53:25Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "17de99a4-e04f-48ad-afa9-2f8bf4a15fd4",
        "parentId" : "4023cffc-2e81-4ff7-a6cb-79b1cffb2fa5",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Similarly to what Replace was doing.\n",
        "createdAt" : "2016-05-16T07:53:27Z",
        "updatedAt" : "2016-05-19T11:53:25Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "a0b170be-a761-495c-acdb-3866bdc98852",
        "parentId" : "4023cffc-2e81-4ff7-a6cb-79b1cffb2fa5",
        "authorId" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "body" : "A concern I had doing this was adding an item into the processing queue twice.  If something is in f.items and f.queue and then resync is called, the result would be some items in f.queue twice unless we try to verify whether the item exists already.\n\nThe bigger question in my mind is whether iterating over f.items and placing into f.queue made sense.  Since this is a FIFO one would expect the items to be removed when processed, but that isn't a guarantee.\n\nDo we care if we add an item into the queue twice?\n",
        "createdAt" : "2016-05-16T11:59:35Z",
        "updatedAt" : "2016-05-19T11:53:25Z",
        "lastEditedBy" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "tags" : [
        ]
      },
      {
        "id" : "fdd26c97-df2d-4b0a-aab5-3b538d1fb02f",
        "parentId" : "4023cffc-2e81-4ff7-a6cb-79b1cffb2fa5",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yeah - I probably wasn't clear enough.\nWe basically want to do a similar thing we are doing in Add. So we are iterating over all elements that exists, and add to queue only those that are not in it already.\n\nDoes it sound ok for you?\n",
        "createdAt" : "2016-05-16T12:06:25Z",
        "updatedAt" : "2016-05-19T11:53:25Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "fa2f505a-9cfe-4ec0-8152-a7210a803f52",
        "parentId" : "4023cffc-2e81-4ff7-a6cb-79b1cffb2fa5",
        "authorId" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "body" : "Yep, sounds fine.\n",
        "createdAt" : "2016-05-16T12:14:38Z",
        "updatedAt" : "2016-05-19T11:53:25Z",
        "lastEditedBy" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "tags" : [
        ]
      },
      {
        "id" : "9165745e-fb14-4b03-86b7-dd08134cae88",
        "parentId" : "4023cffc-2e81-4ff7-a6cb-79b1cffb2fa5",
        "authorId" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "body" : "Done\n",
        "createdAt" : "2016-05-16T15:11:43Z",
        "updatedAt" : "2016-05-19T11:53:25Z",
        "lastEditedBy" : "aee8926e-0646-4183-b0d7-65633cf782b0",
        "tags" : [
        ]
      },
      {
        "id" : "2b58a2f9-1f76-48b5-ada0-a316941543b0",
        "parentId" : "4023cffc-2e81-4ff7-a6cb-79b1cffb2fa5",
        "authorId" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "body" : "is there a commit missing w/ respect to the last comment here?\n",
        "createdAt" : "2016-05-16T15:32:15Z",
        "updatedAt" : "2016-05-19T11:53:25Z",
        "lastEditedBy" : "aefa6d0d-0ad0-4062-966c-ddc56e70652b",
        "tags" : [
        ]
      }
    ],
    "commit" : "e388c137bba8d97be9607661b62d7cb1ec77c416",
    "line" : null,
    "diffHunk" : "@@ -1,1 +261,265 @@\t\tf.cond.Broadcast()\n\t}\n\treturn nil\n}\n"
  },
  {
    "id" : "d345348d-7212-45ad-ae46-12d5e4bca657",
    "prId" : 758,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "27a3363c-5f1b-42fe-8493-eb3352c28f64",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "Document type.\n",
        "createdAt" : "2014-08-04T16:39:43Z",
        "updatedAt" : "2014-08-04T21:50:31Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "999293ce-f656-4592-88f9-66acc6ced361",
        "parentId" : "27a3363c-5f1b-42fe-8493-eb3352c28f64",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Documented.\n",
        "createdAt" : "2014-08-04T21:50:44Z",
        "updatedAt" : "2014-08-04T21:50:44Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "041d56f3d0aa43c95f446903d91200406bfe0dc5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +26,30 @@// processed once, and when it is processed, the most recent version will be\n// processed. This can't be done with a channel.\ntype FIFO struct {\n\tlock  sync.RWMutex\n\tcond  sync.Cond"
  },
  {
    "id" : "fa41a0d2-fad9-4de7-a7e0-4d44636e65cc",
    "prId" : 758,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c72790f1-3d42-4bc0-ba2b-2c88c8391177",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "I'm not 100% clear about how this is different enough from a channel to create a new struct.  Couldn't we just use a channel for this?\n",
        "createdAt" : "2014-08-04T16:41:52Z",
        "updatedAt" : "2014-08-04T21:50:31Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "0020fb0a-7abc-424f-ad17-283a92d3b8dd",
        "parentId" : "c72790f1-3d42-4bc0-ba2b-2c88c8391177",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "See my new comment for why a channel isn't sufficient.\n",
        "createdAt" : "2014-08-04T21:50:41Z",
        "updatedAt" : "2014-08-04T21:50:41Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "041d56f3d0aa43c95f446903d91200406bfe0dc5",
    "line" : 35,
    "diffHunk" : "@@ -1,1 +33,37 @@}\n\n// Add inserts an item, and puts it in the queue.\nfunc (f *FIFO) Add(ID string, obj interface{}) {\n\tf.lock.Lock()"
  }
]