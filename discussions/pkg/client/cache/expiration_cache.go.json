[
  {
    "id" : "b1d07b0f-fe5a-4e28-b4fd-3b79b9dcfd37",
    "prId" : 21856,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a9c55fd7-bacf-4134-977f-0a8d9471e356",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Since we don't take the lock above, isn't it possible that timestampedItem could already be removed by this point?\n",
        "createdAt" : "2016-02-24T05:53:19Z",
        "updatedAt" : "2016-02-24T22:06:34Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "035180cd-e1b7-41d0-a344-c3da1bd51624",
        "parentId" : "a9c55fd7-bacf-4134-977f-0a8d9471e356",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "We'll just call delete with the key again. If it was added it'll have a new timestamp and IsExpired won't pass. \n",
        "createdAt" : "2016-02-24T06:02:05Z",
        "updatedAt" : "2016-02-24T22:06:34Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e88b3ec84efe7561f6f272bd66448277de443aa",
    "line" : null,
    "diffHunk" : "@@ -1,1 +89,93 @@\t// delete it, so an un-expired item doesn't sneak in under the same key, just\n\t// before the Delete.\n\tc.expirationLock.Lock()\n\tdefer c.expirationLock.Unlock()\n\ttimestampedItem, exists := c.getTimestampedEntry(key)"
  },
  {
    "id" : "feb30c53-cab4-4605-a349-54fc5b4a0940",
    "prId" : 21856,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7642a845-0db6-4df2-9c3b-7de0687ce305",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "I don't understand how this can work. timestampedItem is potentially stale. There could have been a delete / add cycle between when you get it and when this executes.\n",
        "createdAt" : "2016-02-24T21:47:00Z",
        "updatedAt" : "2016-02-24T22:06:34Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "7e88b3ec84efe7561f6f272bd66448277de443aa",
    "line" : null,
    "diffHunk" : "@@ -1,1 +95,99 @@\t\treturn nil, false\n\t}\n\tif c.expirationPolicy.IsExpired(timestampedItem) {\n\t\tglog.V(4).Infof(\"Entry %v: %+v has expired\", key, timestampedItem.obj)\n\t\tc.cacheStorage.Delete(key)"
  },
  {
    "id" : "9819af58-3302-42af-a610-6485ffa5adae",
    "prId" : 6179,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ec479b5e-fa6f-455a-bb1a-331bc354c0f2",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "+1 also return nil, false if the item has the wrong type.\n",
        "createdAt" : "2015-03-31T20:03:58Z",
        "updatedAt" : "2015-04-08T22:07:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "365d54d5-3ec8-455c-bbce-c70faa3d0f24",
        "parentId" : "ec479b5e-fa6f-455a-bb1a-331bc354c0f2",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "done\n",
        "createdAt" : "2015-04-03T19:05:43Z",
        "updatedAt" : "2015-04-08T22:07:35Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7864aa230183d830b810ef3128b176d2f732ad9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +66,70 @@func (c *ExpirationCache) getTimestampedEntry(key string) (*timestampedEntry, bool) {\n\titem, _ := c.cacheStorage.Get(key)\n\t// TODO: Check the cast instead\n\tif tsEntry, ok := item.(*timestampedEntry); ok {\n\t\treturn tsEntry, true"
  },
  {
    "id" : "7a94aee8-5a0a-418a-82aa-1f50635facb4",
    "prId" : 6179,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f0a65300-45f8-4d27-a29b-5208b31f44c9",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Suggestion: check type of obj; if it happens to be a timestampedEntry, don't wrap it in another timestamped entry. Has nice side effect of letting people provide the time themselves if they wish. Document this.\n\nAlso fix the error type returned here.\n",
        "createdAt" : "2015-03-31T20:12:25Z",
        "updatedAt" : "2015-04-08T22:07:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "ac53d935-c57c-4fc3-b072-c1d01422fc13",
        "parentId" : "f0a65300-45f8-4d27-a29b-5208b31f44c9",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Alternatively, make TimestampedEntry private so that no one can pass you one.\n",
        "createdAt" : "2015-03-31T20:13:24Z",
        "updatedAt" : "2015-04-08T22:07:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "7296d286-510e-47a4-86a9-fd436a2aea26",
        "parentId" : "f0a65300-45f8-4d27-a29b-5208b31f44c9",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "Made it private. Inserting a timestamped entry means we need to detect that it was inserted and pass it out somehow on Get, which gets a little messy. \n",
        "createdAt" : "2015-04-03T19:05:55Z",
        "updatedAt" : "2015-04-08T22:07:35Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7864aa230183d830b810ef3128b176d2f732ad9",
    "line" : null,
    "diffHunk" : "@@ -1,1 +141,145 @@\tif err != nil {\n\t\treturn KeyError{obj, err}\n\t}\n\tc.cacheStorage.Add(key, &timestampedEntry{obj, c.clock.Now()})\n\treturn nil"
  },
  {
    "id" : "e2193f4a-98a6-4880-a6eb-742508a06750",
    "prId" : 6179,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b04f404e-d98c-49d2-9f65-b114a6d70aef",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Does the clock need to be both here and also in TTLPolicy?\n",
        "createdAt" : "2015-04-06T22:01:20Z",
        "updatedAt" : "2015-04-08T22:07:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "ae202380-78c4-4a3c-a15d-b9f32b73b900",
        "parentId" : "b04f404e-d98c-49d2-9f65-b114a6d70aef",
        "authorId" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "body" : "If one of these uses time.Now() there is a potential race right? I was trying to simulate time.Since accurately in the tests, suggestions? \n",
        "createdAt" : "2015-04-06T22:05:11Z",
        "updatedAt" : "2015-04-08T22:07:35Z",
        "lastEditedBy" : "395f4f9a-98be-4485-b436-51f0897d7c9f",
        "tags" : [
        ]
      },
      {
        "id" : "9be33fca-5601-4029-b057-5e6fc10b9e26",
        "parentId" : "b04f404e-d98c-49d2-9f65-b114a6d70aef",
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "oh, I see, the cache uses it to timestamp objects, policy uses it to compute expiration. That's fine.\n",
        "createdAt" : "2015-04-06T22:05:41Z",
        "updatedAt" : "2015-04-08T22:07:35Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "a7864aa230183d830b810ef3128b176d2f732ad9",
    "line" : 33,
    "diffHunk" : "@@ -1,1 +31,35 @@\tcacheStorage     ThreadSafeStore\n\tkeyFunc          KeyFunc\n\tclock            util.Clock\n\texpirationPolicy ExpirationPolicy\n}"
  }
]