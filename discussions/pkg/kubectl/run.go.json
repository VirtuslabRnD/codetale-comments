[
  {
    "id" : "c51b1103-8b8b-41fe-833c-7fcb51483932",
    "prId" : 42362,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42362#pullrequestreview-26149739",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7c9842ff-3152-4682-b593-42af4ee8886c",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "nit: document what's returned ",
        "createdAt" : "2017-03-09T22:12:59Z",
        "updatedAt" : "2017-03-10T11:08:25Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "597a359c38e5bbd457db670e775d9e2dc176bab7",
    "line" : 262,
    "diffHunk" : "@@ -1,1 +527,531 @@}\n\n// populateResourceListV1 takes strings of form <resourceName1>=<value1>,<resourceName1>=<value2>\n// and returns ResourceList.\nfunc populateResourceListV1(spec string) (v1.ResourceList, error) {"
  },
  {
    "id" : "f0d303c1-63e4-45b3-88ef-ff94d7238c1a",
    "prId" : 38614,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38614#pullrequestreview-13414719",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04a14dcd-227d-434f-b766-ce1cf8d7689f",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "We should use `v1.` instead of `api.`?",
        "createdAt" : "2016-12-16T19:36:48Z",
        "updatedAt" : "2016-12-16T23:26:03Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "c656d23f-e785-4bda-9e6c-440c05c3afb3",
        "parentId" : "04a14dcd-227d-434f-b766-ce1cf8d7689f",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "See my other answer in v1 vs regular api. ",
        "createdAt" : "2016-12-16T21:29:56Z",
        "updatedAt" : "2016-12-16T23:26:03Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "4188bb71d3ecd178beb74523dfe333eaa3e31338",
    "line" : 183,
    "diffHunk" : "@@ -1,1 +339,343 @@\t}\n\n\timagePullPolicy := api.PullPolicy(params[\"image-pull-policy\"])\n\tif err = updatePodContainers(params, args, envs, imagePullPolicy, podSpec); err != nil {\n\t\treturn nil, err"
  },
  {
    "id" : "bda06206-8cb6-4931-8b03-476b109eb511",
    "prId" : 22762,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7bebdcc1-53e7-4b59-9e4c-3537e8af49e6",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Are there any material changes, or just changing the type of the generated object?\n",
        "createdAt" : "2016-03-10T00:12:45Z",
        "updatedAt" : "2016-03-10T19:03:03Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "720bcb14-a696-4542-9111-9eaa94f66c58",
        "parentId" : "7bebdcc1-53e7-4b59-9e4c-3537e8af49e6",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "I was hoping to avoid the code duplication. The only alternative I could think of is to create an internal extensions.Job, as in v1beta1, and then explicitly convert it to batch.Job.\n",
        "createdAt" : "2016-03-10T00:34:59Z",
        "updatedAt" : "2016-03-10T19:03:03Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "719ef1d8-82b5-4e4d-b605-b4bbd028fd0b",
        "parentId" : "7bebdcc1-53e7-4b59-9e4c-3537e8af49e6",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Since we're targeting to get rid of internal representations entirely from kubectl (as pointed in #3955). I've decided to go with the code duplication for now. I'm planning to create a followup, probably next week, converting all to versioned objects. I'm aware it won't make it 1.2 but still I thought about it as the easiest option.\n",
        "createdAt" : "2016-03-10T10:42:16Z",
        "updatedAt" : "2016-03-10T19:03:03Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "de836317685dde1ac080edd521ce0a9ab5c8d6dc",
    "line" : 75,
    "diffHunk" : "@@ -1,1 +331,335 @@\t}\n\n\tenvs, err := getV1Envs(genericParams)\n\tif err != nil {\n\t\treturn nil, err"
  },
  {
    "id" : "99b6d53c-ae74-42b3-953a-319a29ef4898",
    "prId" : 22762,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f1e84e8a-4497-40df-bc96-27f36eea2510",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This is needed. Sorry I didn't catch this before.\n",
        "createdAt" : "2016-03-10T18:39:48Z",
        "updatedAt" : "2016-03-10T19:03:03Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "de836317685dde1ac080edd521ce0a9ab5c8d6dc",
    "line" : null,
    "diffHunk" : "@@ -1,1 +384,388 @@\t\t\tTemplate: v1.PodTemplateSpec{\n\t\t\t\tObjectMeta: v1.ObjectMeta{\n\t\t\t\t\tLabels: labels,\n\t\t\t\t},\n\t\t\t\tSpec: *podSpec,"
  },
  {
    "id" : "62e172b9-3444-4030-9e00-76a382769909",
    "prId" : 17195,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2873269-c794-4979-a7bc-4af529872619",
        "parentId" : null,
        "authorId" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "body" : "Add a TODO here specifying the issue, so that people reading this code (or copying the pattern) know that we need to fix this to generate versioned types.\n",
        "createdAt" : "2015-11-19T08:04:24Z",
        "updatedAt" : "2015-11-24T18:21:47Z",
        "lastEditedBy" : "f2369046-26b1-4b8c-a8cd-5671ab22066c",
        "tags" : [
        ]
      },
      {
        "id" : "df17c417-111b-4ccd-8a2e-a8ed4bb8131e",
        "parentId" : "e2873269-c794-4979-a7bc-4af529872619",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Done\n",
        "createdAt" : "2015-11-19T19:03:41Z",
        "updatedAt" : "2015-11-24T18:21:47Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "c0c02c95c4cbd5e4a4f1bef65e813e85035f998e",
    "line" : null,
    "diffHunk" : "@@ -1,1 +96,100 @@\t// TODO: use versioned types for generators so that we don't need to\n\t// set default values manually (see issue #17384)\n\tdeployment := extensions.Deployment{\n\t\tObjectMeta: api.ObjectMeta{\n\t\t\tName:   name,"
  },
  {
    "id" : "714e0caf-fa97-409b-b205-3c1e683ab78a",
    "prId" : 13422,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09e74b77-da24-40f4-b808-3eecff6954f2",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Follow the same pattern as above and return an error in case `envStrings` is not an array.\n",
        "createdAt" : "2015-09-02T10:53:47Z",
        "updatedAt" : "2015-09-08T06:35:52Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "84e94e39cd958b9ae9925e75170b370e4ec88e9b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +86,90 @@\tenvStrings, found := genericParams[\"env\"]\n\tif found {\n\t\tif envStringArray, isArray := envStrings.([]string); isArray {\n\t\t\tvar err error\n\t\t\tenvs, err = parseEnvs(envStringArray)"
  },
  {
    "id" : "b920c637-a3ca-426d-b415-c93dd251f31c",
    "prId" : 13422,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ae596a19-c623-4912-aeb3-af7b5fa2af07",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This can be a todo, but we should abstract this logic so that multiple generators can handle env in the same way.  Same for parse envs.  This method is getting pretty long.\n",
        "createdAt" : "2015-09-08T00:47:37Z",
        "updatedAt" : "2015-09-08T06:35:52Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "84e94e39cd958b9ae9925e75170b370e4ec88e9b",
    "line" : null,
    "diffHunk" : "@@ -1,1 +83,87 @@\n\t// TODO: abstract this logic so that multiple generators can handle env in the same way. Same for parse envs.\n\tvar envs []api.EnvVar\n\tenvStrings, found := genericParams[\"env\"]\n\tif found {"
  },
  {
    "id" : "ebee5940-a1cf-46e0-8e8d-396eec9d28b7",
    "prId" : 12571,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "227248cf-9b13-4cab-aa02-83df815b8edf",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "We don't delete any other field, is there any specific reason for this?\n",
        "createdAt" : "2015-08-13T09:09:08Z",
        "updatedAt" : "2015-08-13T16:42:07Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "e1907a1c-f442-4561-8ffd-2098a36487bd",
        "parentId" : "227248cf-9b13-4cab-aa02-83df815b8edf",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Ok now I see, you delete it because later you cast to strings.\n",
        "createdAt" : "2015-08-13T09:11:30Z",
        "updatedAt" : "2015-08-13T16:42:07Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "961246f8-9af6-42b3-bcfe-6346361ae9db",
        "parentId" : "227248cf-9b13-4cab-aa02-83df815b8edf",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "given this is a magic key, couldn't you just as easily do an `if/continue` below and avoid the mutation?\n",
        "createdAt" : "2015-08-13T20:04:46Z",
        "updatedAt" : "2015-08-13T20:04:46Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "586931fe16ef4bbe0f4798bd61cef2ae7a2bf883",
    "line" : 23,
    "diffHunk" : "@@ -1,1 +76,80 @@\t\t\treturn nil, fmt.Errorf(\"expected []string, found: %v\", val)\n\t\t}\n\t\tdelete(genericParams, \"args\")\n\t}\n\tparams := map[string]string{}"
  },
  {
    "id" : "0c6ce6dc-c07c-4829-a47f-c39ca3b46cff",
    "prId" : 12571,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7fa1a8c3-8b2f-46d0-aaac-c91a8b98c911",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "scope into the `if` block?\n",
        "createdAt" : "2015-08-13T20:02:55Z",
        "updatedAt" : "2015-08-13T20:02:55Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "586931fe16ef4bbe0f4798bd61cef2ae7a2bf883",
    "line" : 16,
    "diffHunk" : "@@ -1,1 +69,73 @@func (BasicReplicationController) Generate(genericParams map[string]interface{}) (runtime.Object, error) {\n\targs := []string{}\n\tval, found := genericParams[\"args\"]\n\tif found {\n\t\tvar isArray bool"
  },
  {
    "id" : "66cd8b86-98fc-4a25-ab9f-19a2711e6e25",
    "prId" : 12571,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bad66913-a9cb-4cf1-95cf-dcd91e8d9e9a",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This method didn't mutate the `params` before and I wouldn't expect it to based on it's name.  Can you prevent the mutation (preferred) or document it?\n",
        "createdAt" : "2015-08-13T20:04:05Z",
        "updatedAt" : "2015-08-13T20:04:05Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "586931fe16ef4bbe0f4798bd61cef2ae7a2bf883",
    "line" : 14,
    "diffHunk" : "@@ -1,1 +67,71 @@}\n\nfunc (BasicReplicationController) Generate(genericParams map[string]interface{}) (runtime.Object, error) {\n\targs := []string{}\n\tval, found := genericParams[\"args\"]"
  },
  {
    "id" : "b711bae5-49ee-495a-9369-f978143bf76f",
    "prId" : 12571,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "488f7c77-e63a-45f1-9a0c-0a52e0e490f3",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "same mutation concerns\n",
        "createdAt" : "2015-08-13T20:14:18Z",
        "updatedAt" : "2015-08-13T20:14:18Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "586931fe16ef4bbe0f4798bd61cef2ae7a2bf883",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +211,215 @@\t\t\treturn nil, fmt.Errorf(\"expected []string, found: %v\", val)\n\t\t}\n\t\tdelete(genericParams, \"args\")\n\t}\n\tparams := map[string]string{}"
  },
  {
    "id" : "61d55148-4d02-422d-992e-8d179e91c48f",
    "prId" : 12571,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4fc61be2-5e72-4d5f-9406-9d35b5b7dfa4",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Why isn't this part of making the pod spec itself?\n",
        "createdAt" : "2015-08-13T20:14:58Z",
        "updatedAt" : "2015-08-13T20:14:58Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "586931fe16ef4bbe0f4798bd61cef2ae7a2bf883",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +116,120 @@\t\treturn nil, err\n\t}\n\tif len(args) > 0 {\n\t\tcommand, err := GetBool(params, \"command\", false)\n\t\tif err != nil {"
  },
  {
    "id" : "9a291fc9-6657-49e0-b20a-fdad653ce59c",
    "prId" : 3424,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d60460a5-d09e-461b-b2ef-7f5f8d170a12",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "// TODO: extract this flag to a central location, when such a location exists.\n\nI really want custom support for some curated labels, in which case we'll really want a centralized implementation of construction of the labels map.\n",
        "createdAt" : "2015-01-13T22:17:47Z",
        "updatedAt" : "2015-01-14T04:00:47Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "37c5fd22-0262-4309-abb6-10c53e23d03c",
        "parentId" : "d60460a5-d09e-461b-b2ef-7f5f8d170a12",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2015-01-13T22:48:12Z",
        "updatedAt" : "2015-01-14T04:00:47Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ce6c27f3d7689c8fd46a6a993b1e13534b7217f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +39,43 @@func (BasicReplicationController) Generate(params map[string]string) (runtime.Object, error) {\n\t// TODO: extract this flag to a central location.\n\tlabelString, found := params[\"labels\"]\n\tvar labels map[string]string\n\tif found && len(labelString) > 0 {"
  },
  {
    "id" : "6a99ffd2-6a9b-4b23-89d7-fc3569c8d0c3",
    "prId" : 3424,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c6173a65-6613-41ff-aaff-1a18344ed6c4",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "You need to set the labels in the PodTemplateSpec.\n",
        "createdAt" : "2015-01-13T22:36:27Z",
        "updatedAt" : "2015-01-14T04:00:47Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "04f3f428-b146-458d-89d4-2134f104e7aa",
        "parentId" : "c6173a65-6613-41ff-aaff-1a18344ed6c4",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "good catch.  done.\n",
        "createdAt" : "2015-01-13T22:48:18Z",
        "updatedAt" : "2015-01-14T04:00:47Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ce6c27f3d7689c8fd46a6a993b1e13534b7217f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +64,68 @@\t\t\t\t\tLabels: labels,\n\t\t\t\t},\n\t\t\t\tSpec: api.PodSpec{\n\t\t\t\t\tContainers: []api.Container{\n\t\t\t\t\t\t{"
  },
  {
    "id" : "81f7fa73-d4cf-4f3f-b084-1a1994b6651d",
    "prId" : 3424,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34e8c032-955d-4868-92fd-6401d2dd32ff",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Also TODO hoisting this to a common location. I'd like create to support this.\n",
        "createdAt" : "2015-01-13T22:46:40Z",
        "updatedAt" : "2015-01-14T04:00:47Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "561d8f74-ce8e-4f80-ac07-400b9187f0af",
        "parentId" : "34e8c032-955d-4868-92fd-6401d2dd32ff",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2015-01-13T22:49:01Z",
        "updatedAt" : "2015-01-14T04:00:47Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "1ce6c27f3d7689c8fd46a6a993b1e13534b7217f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +79,83 @@\n// TODO: extract this to a common location.\nfunc ParseLabels(labelString string) map[string]string {\n\tif len(labelString) == 0 {\n\t\treturn nil"
  }
]