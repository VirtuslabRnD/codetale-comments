[
  {
    "id" : "8b36eef2-4848-457f-906f-06acb56d1e4b",
    "prId" : 75210,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/75210#pullrequestreview-220813809",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ce8f9417-ee2a-4c9d-ac37-7704624b7b12",
        "parentId" : null,
        "authorId" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "body" : "This assignment can be moved into the else block of the preconditions check.",
        "createdAt" : "2019-03-30T09:04:15Z",
        "updatedAt" : "2019-03-30T09:04:15Z",
        "lastEditedBy" : "42b1e004-4fa7-4e43-84cf-5378839b49ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "838721b0aae37bbfad83f4a0aba881423a48fb11",
    "line" : 30,
    "diffHunk" : "@@ -1,1 +115,119 @@// ScaleSimple updates a scale of a given resource. It returns the resourceVersion of the scale if the update was successful.\nfunc (s *genericScaler) ScaleSimple(namespace, name string, preconditions *ScalePrecondition, newSize uint, gr schema.GroupResource) (updatedResourceVersion string, err error) {\n\tscale := &autoscalingv1.Scale{\n\t\tObjectMeta: metav1.ObjectMeta{Namespace: namespace, Name: name},\n\t}"
  },
  {
    "id" : "0085bcc1-cb56-4418-9510-202b373a051e",
    "prId" : 60455,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/60455#pullrequestreview-104548203",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "aed5a69f-a909-4f51-80ad-c36e762fb768",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "@p0lyn0mial are you up for removing this in a follow-up pull.  @soltysh got it deprecated in 1.10, so we'll be good to remove in 1.11.",
        "createdAt" : "2018-03-14T12:31:59Z",
        "updatedAt" : "2018-03-26T17:44:02Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "ff9636fc-47b1-46c2-b3fc-49cded035d33",
        "parentId" : "aed5a69f-a909-4f51-80ad-c36e762fb768",
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "sure, no problem, does it mean that we actually want to have a scale endpoint for jobs ?\r\n (https://github.com/kubernetes/kubernetes/pull/58468)",
        "createdAt" : "2018-03-14T19:59:34Z",
        "updatedAt" : "2018-03-26T17:44:02Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      },
      {
        "id" : "cfac122d-7d37-43f5-9e85-10e4e4881a4c",
        "parentId" : "aed5a69f-a909-4f51-80ad-c36e762fb768",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> sure, no problem, does it mean that we actually want to have a scale endpoint for jobs ?\r\n> (#58468)\r\n\r\nNo.  We'll remove the special case here and you'll no longer be able to scale them from kubectl since it wasn't scaling in the same sense.",
        "createdAt" : "2018-03-16T12:34:03Z",
        "updatedAt" : "2018-03-26T17:44:02Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "1f1d24005a6776d2aafbb7ca9f40807d8bc70434",
    "line" : 19,
    "diffHunk" : "@@ -1,1 +54,58 @@\tswitch kind {\n\tcase batch.Kind(\"Job\"):\n\t\treturn &jobScaler{jobsClient} // Either kind of job can be scaled with Batch interface.\n\tdefault:\n\t\treturn NewScaler(scalesGetter, gr)"
  },
  {
    "id" : "966af9dc-8491-4d4c-8a8d-24a8993d3d2b",
    "prId" : 58298,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58298#pullrequestreview-89078210",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c996885c-43fb-4bb3-8d33-8e469f96d8f2",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Being held for the reapers?  If so, open an issue.",
        "createdAt" : "2018-01-15T16:10:09Z",
        "updatedAt" : "2018-01-29T19:20:13Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "ac5bb541-b92e-44ed-a8b3-d9f5e77e82df",
        "parentId" : "c996885c-43fb-4bb3-8d33-8e469f96d8f2",
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "Yes, that is correct. I was planning to deal with the reapers in the very next pull. In that case do we need an issue for that ?\r\n\r\nUnless your plan is to leave the reapers for the time being and focus on preparing kubectl to support scaling custom resources.",
        "createdAt" : "2018-01-16T12:27:06Z",
        "updatedAt" : "2018-01-29T19:20:13Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      }
    ],
    "commit" : "71eb1ff3b10ec0ed1b48eea697d35f2d50001987",
    "line" : 39,
    "diffHunk" : "@@ -1,1 +162,166 @@}\n\n// TODO(p0lyn0mial): remove ReplicationControllerScaler\ntype ReplicationControllerScaler struct {\n\tc coreclient.ReplicationControllersGetter"
  },
  {
    "id" : "6eec94a4-8654-44d5-97e3-e3b508bdf7a7",
    "prId" : 56075,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/56075#pullrequestreview-99658964",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cf7baf3d-f6f3-4dc9-8a38-38ec6287b85b",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Why? Can you add a comment?",
        "createdAt" : "2018-02-26T13:28:18Z",
        "updatedAt" : "2018-02-27T12:10:54Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "ba623997-0134-427c-bece-e84bc97dcc4f",
        "parentId" : "cf7baf3d-f6f3-4dc9-8a38-38ec6287b85b",
        "authorId" : "57a5e7e7-e6d7-467b-96ab-41e4ca978eee",
        "body" : "Copied from elsewhere. I'm not quite sure why we're not waiting for the replicas to be created if there are initializers present (though IMO it sounds reasonable to me given that initializers may take arbitrary amount of time). Wdyt?",
        "createdAt" : "2018-02-26T15:05:50Z",
        "updatedAt" : "2018-02-27T12:10:54Z",
        "lastEditedBy" : "57a5e7e7-e6d7-467b-96ab-41e4ca978eee",
        "tags" : [
        ]
      },
      {
        "id" : "ed2d7aa0-69fe-45f1-96a4-080b4fc291a1",
        "parentId" : "cf7baf3d-f6f3-4dc9-8a38-38ec6287b85b",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "Yeah - the make. But still if something finishes without an error and was supposed to wait for something, I would expect that this \"something\" happened. And in this case it wouldn't.",
        "createdAt" : "2018-02-26T15:49:01Z",
        "updatedAt" : "2018-02-27T12:10:54Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "bbc1a4a2-dfae-4087-be67-0b815a6d34d6",
        "parentId" : "cf7baf3d-f6f3-4dc9-8a38-38ec6287b85b",
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "I still believe that this isn't what users may expect.\r\nI agree that consistency is important, so let's add a TODO at the higher level (file) to consider whether we should check for non-nil initializers or not.",
        "createdAt" : "2018-02-27T12:07:04Z",
        "updatedAt" : "2018-02-27T12:10:54Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      },
      {
        "id" : "4f4465be-1622-423a-9aa8-ebbda21b83d3",
        "parentId" : "cf7baf3d-f6f3-4dc9-8a38-38ec6287b85b",
        "authorId" : "57a5e7e7-e6d7-467b-96ab-41e4ca978eee",
        "body" : "Sorry, I missed your earlier comment.\r\nI agree - added a TODO.",
        "createdAt" : "2018-02-27T12:11:19Z",
        "updatedAt" : "2018-02-27T12:11:19Z",
        "lastEditedBy" : "57a5e7e7-e6d7-467b-96ab-41e4ca978eee",
        "tags" : [
        ]
      }
    ],
    "commit" : "fd2ea3ff3109f7685b289a4c7b2634beaea71d97",
    "line" : 76,
    "diffHunk" : "@@ -1,1 +210,214 @@\t\t\treturn err\n\t\t}\n\t\tif rc.Initializers != nil {\n\t\t\treturn nil\n\t\t}"
  },
  {
    "id" : "139a9d9a-4f7c-4314-8bf0-af0e35da017b",
    "prId" : 31051,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5747e83a-1537-4c5f-8a10-2c3d0f8a4640",
        "parentId" : null,
        "authorId" : "24302707-9254-48df-89a5-cbcc349462b8",
        "body" : "nit: please make results unnamed\n",
        "createdAt" : "2016-08-23T06:21:05Z",
        "updatedAt" : "2016-08-24T17:28:39Z",
        "lastEditedBy" : "24302707-9254-48df-89a5-cbcc349462b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fd19d3766b0bd07d279c943d5b64b233585d434",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +42,46 @@\t// ScaleSimple does a simple one-shot attempt at scaling - not useful on its own, but\n\t// a necessary building block for Scale\n\tScaleSimple(namespace, name string, preconditions *ScalePrecondition, newSize uint) (updatedResourceVersion string, err error)\n}\n"
  },
  {
    "id" : "9abe05fd-a217-43a6-a09e-60757962c25f",
    "prId" : 31051,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52ee804d-b46f-41ce-b6b8-2db2ba1ed0f3",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@wojtek-t I removed the name of the output parameter and added the comment. PTAL. Thanks.\n",
        "createdAt" : "2016-08-24T17:29:37Z",
        "updatedAt" : "2016-08-24T17:29:37Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "5fd19d3766b0bd07d279c943d5b64b233585d434",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +161,165 @@// ScaleSimple does a simple one-shot attempt at scaling. It returns the\n// resourceVersion of the replication controller if the update is successful.\nfunc (scaler *ReplicationControllerScaler) ScaleSimple(namespace, name string, preconditions *ScalePrecondition, newSize uint) (string, error) {\n\tcontroller, err := scaler.c.ReplicationControllers(namespace).Get(name)\n\tif err != nil {"
  },
  {
    "id" : "76001cf3-cf63-4b86-8a35-5dc0ff6ce2a9",
    "prId" : 30383,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b3f979b2-8def-4b84-8bb6-7762bc5ca9bc",
        "parentId" : null,
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "May as well delete `client.ControllerHasDesiredReplicas` and inline the code in the other call (or update `rolling_update.go` too ;)\n",
        "createdAt" : "2016-08-11T15:17:36Z",
        "updatedAt" : "2016-08-12T12:19:14Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      },
      {
        "id" : "b90d02d7-b9a7-4f20-897c-e0cb55596f68",
        "parentId" : "b3f979b2-8def-4b84-8bb6-7762bc5ca9bc",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> May as well delete client.ControllerHasDesiredReplicas and inline the code in the other call (or update rolling_update.go too ;)\n\nI've added it to https://github.com/kubernetes/kubernetes/issues/30501 for @fabianofranz to follow up on.\n",
        "createdAt" : "2016-08-12T12:25:54Z",
        "updatedAt" : "2016-08-12T12:25:54Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "553313f8678fa6a092b0dc13cbb8ef3a002922c3",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +189,193 @@\n\t\t\trc := event.Object.(*api.ReplicationController)\n\t\t\treturn rc.Status.ObservedGeneration >= rc.Generation && rc.Status.Replicas == rc.Spec.Replicas, nil\n\t\t})\n\t\tif err == wait.ErrWaitTimeout {"
  },
  {
    "id" : "166b0f83-fc92-44b8-bbaa-49011733dfc5",
    "prId" : 23493,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e04f7839-89f0-4c90-8c58-198f60c800aa",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Sorry I don't understand why can't `extensions.Kind(\"Job\")` be removed?\n",
        "createdAt" : "2016-04-22T23:06:10Z",
        "updatedAt" : "2016-04-25T09:28:09Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "37c75bab-fb31-458a-9d0d-fc211c6eae7f",
        "parentId" : "e04f7839-89f0-4c90-8c58-198f60c800aa",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Otherwise LGTM, thanks. Just want to make sure I understand it correctly before merging.\n",
        "createdAt" : "2016-04-22T23:14:46Z",
        "updatedAt" : "2016-04-25T09:28:09Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "c470afc2062f6a5c3a45e6a7bf76cd74da14e5d9",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +48,52 @@\tcase extensions.Kind(\"ReplicaSet\"):\n\t\treturn &ReplicaSetScaler{c.Extensions()}, nil\n\tcase extensions.Kind(\"Job\"), batch.Kind(\"Job\"):\n\t\treturn &JobScaler{c.Batch()}, nil // Either kind of job can be scaled with Batch interface.\n\tcase extensions.Kind(\"Deployment\"):"
  },
  {
    "id" : "565c18a4-3a31-4c95-a1dd-849e0035cbe3",
    "prId" : 19840,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1f27bf60-7cb1-48ba-b5f9-cc931dcfaf48",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "@bgrant0607 why the current state of the scale subresource warrants disabling of deployment scaling?\n",
        "createdAt" : "2016-02-10T09:47:54Z",
        "updatedAt" : "2016-02-10T09:47:54Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "514f55ac-96dc-4f18-a4b9-a131592fb118",
        "parentId" : "1f27bf60-7cb1-48ba-b5f9-cc931dcfaf48",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "@kargakis The scale subresource has been temporarily removed from Deployment, until the new autoscaling API group is created and we figure out how to register an endpoint for a resource from a different API group from the parent resource.\n",
        "createdAt" : "2016-02-10T15:18:26Z",
        "updatedAt" : "2016-02-10T15:18:26Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e7a9f309361787679f2210ea4714b79420fc3cba",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +329,333 @@}\n\n// TODO(madhusudancs): Fix this when Scale group issues are resolved (see issue #18528).\n// type DeploymentScaler struct {\n// \tc client.ExtensionsInterface"
  },
  {
    "id" : "3ff2e949-4713-4b9d-a229-66e78c843389",
    "prId" : 18169,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "94dd7477-fe28-4b15-a0b1-9e1e989b24a5",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Again no need for nil check.\n",
        "createdAt" : "2015-12-04T12:57:42Z",
        "updatedAt" : "2015-12-21T09:07:28Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "892cffaa-a0c9-4c2d-880d-965bb0f32317",
        "parentId" : "94dd7477-fe28-4b15-a0b1-9e1e989b24a5",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "I cringe in the face of accessing a pointer w/o checking for nil first. I am going to leave this around since it doesn't harm having safer code:)\n",
        "createdAt" : "2015-12-07T12:08:55Z",
        "updatedAt" : "2015-12-21T09:07:28Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "e894dcc8ff526f86944aaf9bdb5895fe483ecdc0",
    "line" : 57,
    "diffHunk" : "@@ -1,1 +227,231 @@\t}\n\tparallelism := int(newSize)\n\tif job.Spec.Parallelism != nil && *job.Spec.Parallelism == parallelism {\n\t\treturn ScaleError{AlreadyScaled, job.ResourceVersion, alreadyScaledErr}\n\t}"
  },
  {
    "id" : "9fbd96d6-3ea0-4c5d-afda-80d46805f236",
    "prId" : 14046,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e07c2454-4619-4d5d-b54b-9fdb4a0b2f94",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "nil reference protection?\n",
        "createdAt" : "2015-09-17T13:46:18Z",
        "updatedAt" : "2015-09-23T11:10:13Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "a58183a6-474f-4f06-a591-fb4900c2f9f5",
        "parentId" : "e07c2454-4619-4d5d-b54b-9fdb4a0b2f94",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Parallelism should never be nil, will always be set by [defaults](https://github.com/kubernetes/kubernetes/pull/13259/files#diff-3502a0889593893dcea4fc9488cfff56).\n",
        "createdAt" : "2015-09-17T13:51:07Z",
        "updatedAt" : "2015-09-23T11:10:13Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "55d89157-74de-4373-aec6-4b83795914e1",
        "parentId" : "e07c2454-4619-4d5d-b54b-9fdb4a0b2f94",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Parallelism should never be nil, will always be set by defaults.\n\nUpdate GoDoc in the `JobSpec` to indicate that.\n",
        "createdAt" : "2015-09-17T13:54:06Z",
        "updatedAt" : "2015-09-23T11:10:13Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "b2244d16-b839-4583-bb79-0245d5b9e518",
        "parentId" : "e07c2454-4619-4d5d-b54b-9fdb4a0b2f94",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> Parallelism should never be nil, will always be set by defaults.\n\nThinking on it, I'd still prefer the protection since it's possible to create the object without going through conversions.  Has the argument been had in another pull?\n",
        "createdAt" : "2015-09-17T13:55:42Z",
        "updatedAt" : "2015-09-23T11:10:13Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "16ddfd46-182a-463e-baef-3af57167f916",
        "parentId" : "e07c2454-4619-4d5d-b54b-9fdb4a0b2f94",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "No, it wasn't mentioned before and I don't recall doing nil check anywhere.\n",
        "createdAt" : "2015-09-17T13:58:29Z",
        "updatedAt" : "2015-09-23T11:10:13Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "5b29745b-6ff9-4ba0-b138-22612ec137fe",
        "parentId" : "e07c2454-4619-4d5d-b54b-9fdb4a0b2f94",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "An object that isn't defaulted or goes through conversions is invalid.  it shouldn't be in this code path.\n",
        "createdAt" : "2015-09-17T14:10:34Z",
        "updatedAt" : "2015-09-23T11:10:13Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "8c115847-fe62-4a9b-9876-e39f0f40f3a6",
        "parentId" : "e07c2454-4619-4d5d-b54b-9fdb4a0b2f94",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> An object that isn't defaulted or goes through conversions is invalid. it shouldn't be in this code path.\n\nThis also means that its invalid for any bit of code to decide it wants to clear `Parallelism` for some reason.\n",
        "createdAt" : "2015-09-17T14:11:43Z",
        "updatedAt" : "2015-09-23T11:10:13Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "821598b7-fb9c-4486-bfea-1b7af0a33daf",
        "parentId" : "e07c2454-4619-4d5d-b54b-9fdb4a0b2f94",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "If the field is required internally, we typically do not nil check it.  Although in this case, if parallelism could _ever_ be nil, then you should do the check.\n",
        "createdAt" : "2015-09-17T14:13:01Z",
        "updatedAt" : "2015-09-23T11:10:13Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "18e7e072-2210-4154-9c34-0d1f63f0fe28",
        "parentId" : "e07c2454-4619-4d5d-b54b-9fdb4a0b2f94",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Also if it's required internally internal should be int64\n",
        "createdAt" : "2015-09-17T14:17:30Z",
        "updatedAt" : "2015-09-23T11:10:13Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "69f13ab4-0d3c-44b3-9cbe-86280ede9f59",
        "parentId" : "e07c2454-4619-4d5d-b54b-9fdb4a0b2f94",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Done.\n",
        "createdAt" : "2015-09-18T11:46:37Z",
        "updatedAt" : "2015-09-23T11:10:13Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "48775319d937cca12d2a8770a3f72d73c205b4c6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +88,92 @@\t\treturn PreconditionError{\"parallelism\", strconv.Itoa(precondition.Size), \"nil\"}\n\t}\n\tif precondition.Size != -1 && *job.Spec.Parallelism != precondition.Size {\n\t\treturn PreconditionError{\"parallelism\", strconv.Itoa(precondition.Size), strconv.Itoa(*job.Spec.Parallelism)}\n\t}"
  },
  {
    "id" : "0ef21e96-1de2-4bce-841c-bb637d1d0ed5",
    "prId" : 14046,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "948cc7df-b812-4aaf-a7ac-27650f85d023",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Should parallelism have been a `uint`?  There's no godoc explaining what a negative value would mean.\n",
        "createdAt" : "2015-09-17T14:03:36Z",
        "updatedAt" : "2015-09-23T11:10:13Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "c252c722-7975-4e2b-ae9e-a3fccc6fca77",
        "parentId" : "948cc7df-b812-4aaf-a7ac-27650f85d023",
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "This is analogical to replicas in RC. Nobody raised that concern before.\n",
        "createdAt" : "2015-09-18T12:07:10Z",
        "updatedAt" : "2015-09-23T11:10:13Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      }
    ],
    "commit" : "48775319d937cca12d2a8770a3f72d73c205b4c6",
    "line" : null,
    "diffHunk" : "@@ -1,1 +212,216 @@\t\t}\n\t}\n\tparallelism := int(newSize)\n\tjob.Spec.Parallelism = &parallelism\n\tif _, err := scaler.c.Experimental().Jobs(namespace).Update(job); err != nil {"
  },
  {
    "id" : "5764ef9f-0eaa-4065-95fc-67d8a4c26a25",
    "prId" : 13977,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d548bbf2-a19b-4ab2-b7d8-457b153cdd53",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "@derekwaynecarr do admission rejections because of quota show up as IsInvalid errors? Are there any Invalid errors that could go away after a time? If so, how do we ensure the RC retries after a time?\n",
        "createdAt" : "2015-09-15T19:37:42Z",
        "updatedAt" : "2015-09-16T01:04:31Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "47a5cc89-e06e-45ed-a1c9-8112b9834e34",
        "parentId" : "d548bbf2-a19b-4ab2-b7d8-457b153cdd53",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "@liggitt Quota rejections show up as a Forbidden error.  That said, admission control on quota does not care about the replica size for a ReplicationController.  It just blocks the ReplicationController from scaling up to the desired state by rejecting pods if it exceeds your allowed quota.\n",
        "createdAt" : "2015-09-15T20:39:55Z",
        "updatedAt" : "2015-09-16T01:04:31Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "3aad8cabbd4169cf67a636eb9630f677622b4396",
    "line" : 31,
    "diffHunk" : "@@ -1,1 +146,150 @@\t// TODO: do retry on 409 errors here?\n\tif _, err := scaler.c.UpdateReplicationController(namespace, controller); err != nil {\n\t\tif errors.IsInvalid(err) {\n\t\t\treturn \"\", ControllerScaleError{ControllerScaleUpdateInvalidFailure, controller.ResourceVersion, err}\n\t\t}"
  }
]