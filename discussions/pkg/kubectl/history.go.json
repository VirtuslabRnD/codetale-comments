[
  {
    "id" : "1f393f7e-0532-41da-9197-7fdc889bc847",
    "prId" : 61419,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/61419#pullrequestreview-122334946",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "2f67e283-a402-4a35-8985-97b464e36cdb",
        "parentId" : null,
        "authorId" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "body" : "Have you checked if these commands work fine with previous version of the server, it should but I'm asking to have that double checked. ",
        "createdAt" : "2018-05-22T11:45:57Z",
        "updatedAt" : "2018-05-22T20:43:25Z",
        "lastEditedBy" : "b7d2a698-a6e1-4031-bb69-8b45505badb5",
        "tags" : [
        ]
      },
      {
        "id" : "90a9614e-c661-4f28-a6c4-bc67e84a21f3",
        "parentId" : "2f67e283-a402-4a35-8985-97b464e36cdb",
        "authorId" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "body" : "I checked a build of kubectl from this PR against a v1.9.3 cluster, and the following commands worked:\r\n\r\n```\r\nkubectl edit deployment <x> (to create history)\r\nkubectl rollout history deployment/<x>\r\nkubectl rollout undo deployment/<x>\r\nkubectl rollout status deployment/<x>\r\n```\r\n\r\nWe also have automated kubectl skew tests that should run post-submit.\r\n\r\nAs expected, I observed that the rollout commands *do not* work against a v1.8.9 cluster, because apps/v1 did not exist until v1.9.0. This is fine because this change will roll out with kubectl v1.11 at the earliest, and v1.8 clusters are outside the client/server compatibility window for that release.",
        "createdAt" : "2018-05-22T20:35:10Z",
        "updatedAt" : "2018-05-22T20:43:25Z",
        "lastEditedBy" : "97dce74b-9a86-4bd2-812f-a7a70df47473",
        "tags" : [
        ]
      }
    ],
    "commit" : "046ae81e35cce52860d66d2cf9720fe1a2aaaef4",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +103,107 @@// TODO: this should be a describer\nfunc (h *DeploymentHistoryViewer) ViewHistory(namespace, name string, revision int64) (string, error) {\n\tversionedAppsClient := h.c.AppsV1()\n\tdeployment, err := versionedAppsClient.Deployments(namespace).Get(name, metav1.GetOptions{})\n\tif err != nil {"
  },
  {
    "id" : "30021279-96d6-4e32-96ee-c01fef3555b1",
    "prId" : 55257,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/55257#pullrequestreview-75205800",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0e1830aa-3a9c-4d0f-b651-12bbea99c295",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "It's unfortunate that we have to add these dummy functions for the resources that history viewer don't/won't support. It seems unavoidable if we choose to use visitor here. @pwittrock ",
        "createdAt" : "2017-11-08T18:59:09Z",
        "updatedAt" : "2017-11-09T08:11:31Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "1d2a14dd885ac5274c3835aebeb60a645c712007",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +73,77 @@func (v *HistoryVisitor) VisitPod(kind kapps.GroupKindElement)                   {}\nfunc (v *HistoryVisitor) VisitReplicaSet(kind kapps.GroupKindElement)            {}\nfunc (v *HistoryVisitor) VisitReplicationController(kind kapps.GroupKindElement) {}\n\n// HistoryViewerFor returns an implementation of HistoryViewer interface for the given schema kind"
  },
  {
    "id" : "62fb9174-1403-4df4-a857-1b7b0fd0bfa3",
    "prId" : 53679,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/53679#pullrequestreview-68792686",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6cdebf46-890a-472d-a820-4e45de67d945",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "It looks like we don't need internal clientset at all in history viewer, do we?",
        "createdAt" : "2017-10-12T01:03:07Z",
        "updatedAt" : "2017-11-03T17:17:04Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "5590c1fb94e09f9a2b7a09c9776e8d6535b18304",
    "line" : 25,
    "diffHunk" : "@@ -1,1 +53,57 @@\tViewHistory(namespace, name string, revision int64) (string, error)\n}\n\nfunc HistoryViewerFor(kind schema.GroupKind, c kubernetes.Interface) (HistoryViewer, error) {\n\tswitch kind {"
  },
  {
    "id" : "0ebc7bbc-fda0-4660-9231-5ed17ed5242b",
    "prId" : 49674,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49674#pullrequestreview-57593114",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c1070a8d-20d4-407d-8d53-1817a8bb801a",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "This change isn't necessary (unless there's a reason to move it?)",
        "createdAt" : "2017-08-21T18:29:42Z",
        "updatedAt" : "2017-08-24T23:43:50Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "492626e1-46e7-4f10-a177-ab10788c943b",
        "parentId" : "c1070a8d-20d4-407d-8d53-1817a8bb801a",
        "authorId" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "body" : "I switched the order that puts `versionedExtensionsClient` before `versionedAppsClient`. There are 2 reasons behind:\r\n(1) it is alphabetically ordered for having `versionedAppsClient` before `versionedExtensionsClient`\r\n(2) `controlledHistories` function brings argument in the order of `versionedAppsClient` and then `versionedExtensionsClient`",
        "createdAt" : "2017-08-21T18:54:15Z",
        "updatedAt" : "2017-08-24T23:43:50Z",
        "lastEditedBy" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "tags" : [
        ]
      },
      {
        "id" : "745db29a-ce2c-4287-9149-2fff2d863b06",
        "parentId" : "c1070a8d-20d4-407d-8d53-1817a8bb801a",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "okay",
        "createdAt" : "2017-08-21T19:50:39Z",
        "updatedAt" : "2017-08-24T23:43:50Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebdbafd2c509fde48935a97a812b4c1c394b3561",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +155,159 @@func (h *DaemonSetHistoryViewer) ViewHistory(namespace, name string, revision int64) (string, error) {\n\tversionedAppsClient := versionedAppsClientV1beta1(h.c)\n\tversionedExtensionsClient := versionedExtensionsClientV1beta1(h.c)\n\tversionedObj, allHistory, err := controlledHistories(versionedAppsClient, versionedExtensionsClient, namespace, name, \"DaemonSet\")\n\tif err != nil {"
  },
  {
    "id" : "ddd679d4-aee2-45b2-99dd-1a034d46d37f",
    "prId" : 49674,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/49674#pullrequestreview-57585010",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "617c1d02-d948-4000-86c3-e607ff5cfd73",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Should we add a default case and return error?",
        "createdAt" : "2017-08-21T18:36:11Z",
        "updatedAt" : "2017-08-24T23:43:50Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "69360870-3996-41da-842a-bc092aa77145",
        "parentId" : "617c1d02-d948-4000-86c3-e607ff5cfd73",
        "authorId" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "body" : "Sure!",
        "createdAt" : "2017-08-21T19:14:53Z",
        "updatedAt" : "2017-08-24T23:43:50Z",
        "lastEditedBy" : "a3d6d690-2601-4c58-a5bc-a3eaa025f8e0",
        "tags" : [
        ]
      }
    ],
    "commit" : "ebdbafd2c509fde48935a97a812b4c1c394b3561",
    "line" : 55,
    "diffHunk" : "@@ -1,1 +282,286 @@\t\t}\n\t\tlabelSelector = ss.Spec.Selector\n\t\tobj = ss\n\tdefault:\n\t\treturn nil, nil, fmt.Errorf(\"unsupported API object kind: %s\", kind)"
  },
  {
    "id" : "f61984d2-9519-4ae4-8259-aee0b62f0059",
    "prId" : 46669,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46669#pullrequestreview-41290526",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "1492bb73-2d52-4d2e-bf96-8705fed28d38",
        "parentId" : null,
        "authorId" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "body" : "is this loop necessary  ? just use revision.Items directly everywhere ?",
        "createdAt" : "2017-05-31T04:56:33Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "224e1088-78fe-4bdd-99d1-31be3e464996",
        "tags" : [
        ]
      },
      {
        "id" : "2fa66c25-638a-4b72-a545-09d860ef0093",
        "parentId" : "1492bb73-2d52-4d2e-bf96-8705fed28d38",
        "authorId" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "body" : "It is necessary to sort the slice of revisions for display.",
        "createdAt" : "2017-05-31T17:17:39Z",
        "updatedAt" : "2017-06-06T20:47:39Z",
        "lastEditedBy" : "6935d5b2-c3de-4596-9c98-055bd55df973",
        "tags" : [
        ]
      }
    ],
    "commit" : "1a784ef86ff94994e984753d885ffeff6e1772ac",
    "line" : 49,
    "diffHunk" : "@@ -1,1 +239,243 @@\t}\n\trevisionNumbers := make([]int64, len(revisions.Items))\n\tfor i := range revisions.Items {\n\t\tif owner := getOwner(revisions.Items[i]); owner != nil && owner.UID == sts.UID {\n\t\t\trevisionNumbers[i] = revisions.Items[i].Revision"
  },
  {
    "id" : "506aeae4-8681-4f29-a30b-f3485879f1d1",
    "prId" : 46144,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/46144#pullrequestreview-41622601",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "b11f20ab-24c9-4ff1-b84f-38f6636dad4d",
        "parentId" : null,
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "Do we need to use versioned clientset here like Deployment?",
        "createdAt" : "2017-05-31T23:18:50Z",
        "updatedAt" : "2017-06-04T00:11:19Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "de754119-4f40-478a-ad87-ac229b7700f1",
        "parentId" : "b11f20ab-24c9-4ff1-b84f-38f6636dad4d",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "No, we need unversioned DS below",
        "createdAt" : "2017-06-01T05:45:14Z",
        "updatedAt" : "2017-06-04T00:11:19Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "d2a33978-a65a-47ee-b663-30fc2ea4d8fb",
        "parentId" : "b11f20ab-24c9-4ff1-b84f-38f6636dad4d",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "I found variable `ds` is used only in `controlledHistories`. And I found we are using versioned client, version `ControllerRevisionList` and unversioned DS. Not sure if it will cause any problem in the future?\r\nIt's up to you. If you're sure it's OK, then I'm fine with it.",
        "createdAt" : "2017-06-01T17:58:47Z",
        "updatedAt" : "2017-06-04T00:11:19Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "c3003bd3-c79f-46b0-a571-fb04dcc07708",
        "parentId" : "b11f20ab-24c9-4ff1-b84f-38f6636dad4d",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "We only use ds `UID`, `Selector`, and `Namespace` in `controlledHistories`, which should be fine. Used versioned history because we used code from controller, used unversioned DaemonSet because kubectl only gives us unversioned DaemonSet. ",
        "createdAt" : "2017-06-01T20:01:50Z",
        "updatedAt" : "2017-06-04T00:11:19Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "c9b5a50d-2ef3-416e-aaef-2475cb273502",
        "parentId" : "b11f20ab-24c9-4ff1-b84f-38f6636dad4d",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Added a TODO and linked to #3955 ",
        "createdAt" : "2017-06-01T20:07:41Z",
        "updatedAt" : "2017-06-04T00:11:19Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "edabdac094b4b3b3cb29b03af75256e54b5cfca2",
    "line" : 71,
    "diffHunk" : "@@ -1,1 +148,152 @@// TODO: this should be a describer\nfunc (h *DaemonSetHistoryViewer) ViewHistory(namespace, name string, revision int64) (string, error) {\n\tds, err := h.c.Extensions().DaemonSets(namespace).Get(name, metav1.GetOptions{})\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to retrieve DaemonSet %s: %v\", name, err)"
  },
  {
    "id" : "b9287fcc-a5ae-470e-8b70-42849efbdd86",
    "prId" : 43239,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/43239#pullrequestreview-27679056",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bef2a893-3efc-4b46-9bd6-dfc9a31feb96",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Maybe we should check if the deployment has the overlapping annotation (not in this PR, not release-blocking). Filed #43321",
        "createdAt" : "2017-03-17T20:15:43Z",
        "updatedAt" : "2017-03-17T20:16:07Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "de92f90f12dbc17c8ecdc1b54121d976e17dcd15",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +66,70 @@\t\treturn \"\", fmt.Errorf(\"failed to retrieve deployment %s: %v\", name, err)\n\t}\n\t_, allOldRSs, newRS, err := deploymentutil.GetAllReplicaSetsV15(deployment, versionedClient)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"failed to retrieve replica sets from deployment %s: %v\", name, err)"
  },
  {
    "id" : "48374a16-f60a-4090-b866-4dd39207bfc0",
    "prId" : 20928,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f2e61175-0cb0-442b-926f-802b9ab5dead",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "This fix is unrelated to this PR, but ok.\n",
        "createdAt" : "2016-02-10T23:50:15Z",
        "updatedAt" : "2016-02-11T03:37:20Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "849b4c17-a99a-47c4-9ba1-a17baf1da298",
        "parentId" : "f2e61175-0cb0-442b-926f-802b9ab5dead",
        "authorId" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "body" : "@bgrant0607 This was an artifact of the weird commits ordering, which itself was due to an incorrect rebase. Fixed the rebase and squashed the commits. This has disappeared now.\n",
        "createdAt" : "2016-02-11T04:37:53Z",
        "updatedAt" : "2016-02-11T04:38:02Z",
        "lastEditedBy" : "f6905dc9-1980-4381-8220-a1c7ad8d5c82",
        "tags" : [
        ]
      }
    ],
    "commit" : "293793cf0d3c13f9ece496d22d1f2353531fa9d5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +68,72 @@\t\treturn historyInfo, fmt.Errorf(\"failed to retrieve deployment %s: %v\", name, err)\n\t}\n\t_, allOldRSs, err := deploymentutil.GetOldReplicaSets(*deployment, h.c)\n\tif err != nil {\n\t\treturn historyInfo, fmt.Errorf(\"failed to retrieve old replica sets from deployment %s: %v\", name, err)"
  },
  {
    "id" : "0daf330b-f5e5-4903-b754-8933d1691982",
    "prId" : 20035,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "96574d66-d8a7-47c1-b90b-d9c10ee14bda",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Do we need to parse it, or could we just print the string?\n",
        "createdAt" : "2016-02-02T20:51:50Z",
        "updatedAt" : "2016-02-03T18:21:09Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "bb85bf55-9355-4f6b-8c12-a0ae1d7f8db8",
        "parentId" : "96574d66-d8a7-47c1-b90b-d9c10ee14bda",
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Ah, I see you use it as a map key. String would probably be fine, but ok.\n",
        "createdAt" : "2016-02-02T20:52:36Z",
        "updatedAt" : "2016-02-03T18:21:09Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "e3cb44aaffca4eefceec6e3754a44d419c770736",
    "line" : null,
    "diffHunk" : "@@ -1,1 +110,114 @@\t\tfor _, r := range revisions {\n\t\t\t// Find the change-cause of revision r\n\t\t\tr64, err := strconv.ParseInt(r, 10, 64)\n\t\t\tif err != nil {\n\t\t\t\terrs = append(errs, err)"
  },
  {
    "id" : "6ead6158-6f94-44be-b12b-0012f7f3e32b",
    "prId" : 19893,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6c6497d2-224b-4f7e-8949-7de8770bf1b4",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "ugh, this is tiring. How about:\n\n``` go\nvar revisions []int\nfor k := range historyInfo.RevisionToTemplate {\n    revisions = append(revisions, int(k))\n}\nsort.Ints(revisions)\n// ...\nfor _, r := range revisions {\n   changeCause := historyInfo.RevisionToTemplate[int64(r)].Annotations[ChangeCauseAnnotation]\n  // ...\n```\n",
        "createdAt" : "2016-02-01T22:38:28Z",
        "updatedAt" : "2016-02-01T23:35:44Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "6279b6f1-92b6-4756-931f-fa99e1e2435f",
        "parentId" : "6c6497d2-224b-4f7e-8949-7de8770bf1b4",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "revision is `int64` and `sort` doesn't supports `int64`. \n",
        "createdAt" : "2016-02-01T22:43:22Z",
        "updatedAt" : "2016-02-01T23:35:44Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "f7d5bf51-e72f-4d9f-924d-89526984d6c2",
        "parentId" : "6c6497d2-224b-4f7e-8949-7de8770bf1b4",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Note that I cast between int and int64 which is better than casting between strings and int64\n\nAlso https://golang.org/pkg/sort/#Ints\n",
        "createdAt" : "2016-02-01T22:46:38Z",
        "updatedAt" : "2016-02-01T23:35:44Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "e9ae163f-0261-464f-b781-b949f0ac2d68",
        "parentId" : "6c6497d2-224b-4f7e-8949-7de8770bf1b4",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "What if revision is something like `int64(3546343826724305832)`? It's incorrect after `int(revision)`. \n",
        "createdAt" : "2016-02-01T22:52:59Z",
        "updatedAt" : "2016-02-01T23:35:44Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "6fea50ed-8c38-459e-8505-cd26965fd319",
        "parentId" : "6c6497d2-224b-4f7e-8949-7de8770bf1b4",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Well, I guess string->int64 is safer. But will we ever get to such numbers? Anyway, I am fine with this too\n",
        "createdAt" : "2016-02-02T06:27:35Z",
        "updatedAt" : "2016-02-02T06:27:35Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fb86a3d3b57d11f31e3aba66b607839c735004f",
    "line" : 117,
    "diffHunk" : "@@ -1,1 +115,119 @@\t\tfor _, r := range revisions {\n\t\t\t// Find the change-cause of revision r\n\t\t\tr64, err := strconv.ParseInt(r, 10, 64)\n\t\t\tif err != nil {\n\t\t\t\terrs = append(errs, err)"
  },
  {
    "id" : "d4e685d4-0490-4d1b-9b2e-09ba60f9c4b9",
    "prId" : 19893,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9da67ea5-1f26-4d9e-9499-20e8d26afcda",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Return early if len(historyInfo.RevisionToTemplate) == 0 by printing an appropriate message?\n",
        "createdAt" : "2016-02-01T22:40:47Z",
        "updatedAt" : "2016-02-01T23:35:44Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "f89e39e8-dd2d-4959-8649-7fdb6cd20a18",
        "parentId" : "9da67ea5-1f26-4d9e-9499-20e8d26afcda",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Fixed\n",
        "createdAt" : "2016-02-01T23:35:54Z",
        "updatedAt" : "2016-02-01T23:35:54Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "8fb86a3d3b57d11f31e3aba66b607839c735004f",
    "line" : null,
    "diffHunk" : "@@ -1,1 +102,106 @@\t\treturn fmt.Sprintf(\"No rollout history found in %s %q\", resource, name), nil\n\t}\n\t// Sort the revisionToChangeCause map by revision\n\tvar revisions []string\n\tfor k := range historyInfo.RevisionToTemplate {"
  }
]