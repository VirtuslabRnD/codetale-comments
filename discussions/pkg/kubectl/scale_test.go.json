[
  {
    "id" : "3511c706-892e-4531-b401-0b2f519fca72",
    "prId" : 56077,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/56077#pullrequestreview-81846383",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "22b79181-ac51-4738-a8fb-dbc806c7be24",
        "parentId" : null,
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "at the beginning I was trying to use the `fake` client but it turned out I couldn't pass the `version`, so I decided to build the fake client from scratch. \r\n\r\nThe following code was copied from https://github.com/kubernetes/client-go/blob/master/scale/client_test.go#L56",
        "createdAt" : "2017-11-20T18:20:33Z",
        "updatedAt" : "2017-12-18T21:44:58Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      },
      {
        "id" : "d8f0f96a-f4ab-4d3f-a882-11e81fa809f1",
        "parentId" : "22b79181-ac51-4738-a8fb-dbc806c7be24",
        "authorId" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "body" : "what, specifically, is the issue with the fake scale client?  I'd much rather fix that (the only reason we use this type of logic in the file you linked to is so that we can test the actual client code itself).",
        "createdAt" : "2017-11-27T20:08:47Z",
        "updatedAt" : "2017-12-18T21:44:58Z",
        "lastEditedBy" : "3a4b4830-dc71-4d7e-a7db-de2453284945",
        "tags" : [
        ]
      },
      {
        "id" : "4baeb9b3-c602-4d5f-aa16-ad5b9bbf808c",
        "parentId" : "22b79181-ac51-4738-a8fb-dbc806c7be24",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> at the beginning I was trying to use the fake client but it turned out I couldn't pass the version, so I decided to build the fake client from scratch.\r\n\r\nBased on the code here, I'm guessing some piece is missing in the fake discovery client?  Given the value of generic scale, I could see bypassing it, but we'd certainly want to chase an issue if that's the case.",
        "createdAt" : "2017-11-27T20:44:34Z",
        "updatedAt" : "2017-12-18T21:44:58Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "b0f7afe7-4903-453f-acf5-2f7de2a18d85",
        "parentId" : "22b79181-ac51-4738-a8fb-dbc806c7be24",
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "np, I'll take one more shot at it. Do you think I could follow up that one ?",
        "createdAt" : "2017-11-29T17:57:00Z",
        "updatedAt" : "2017-12-18T21:44:58Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      },
      {
        "id" : "c5a0df87-7d9b-404a-9689-9de4a8098551",
        "parentId" : "22b79181-ac51-4738-a8fb-dbc806c7be24",
        "authorId" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "body" : "If I recall correctly the problem was the lack of `RESTMapper` in the fake client, because I remember having issues with the version. During the test initialisation I registered some types in the store (scheme) but then the test framework couldn't find the exact match - this is because scale client doesn't accept the version. ",
        "createdAt" : "2017-12-05T13:12:38Z",
        "updatedAt" : "2017-12-18T21:44:58Z",
        "lastEditedBy" : "13c01cb8-6052-4a98-b6fd-20d3acd6332f",
        "tags" : [
        ]
      },
      {
        "id" : "f128046d-585a-4f4a-a979-c0ccfef4e444",
        "parentId" : "22b79181-ac51-4738-a8fb-dbc806c7be24",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> what, specifically, is the issue with the fake scale client? I'd much rather fix that (the only reason we use this type of logic in the file you linked to is so that we can test the actual client code itself).\r\n\r\n@DirectXMan12 I think we'll take a little debt here for the net reduction this will bring to `kubectl` and the increase in power.\r\n\r\n\r\n\r\n> If I recall correctly the problem was the lack of RESTMapper in the fake client, because I remember having issues with the version. During the test initialisation I registered some types in the store (scheme) but then the test framework couldn't find the exact match - this is because scale client doesn't accept the version.\r\n\r\n@juanvallejo After this merges, can you see what you can do with it?  I suspect that a mapper of some kind in the FakeScaleClient from groupresource to version can get the job done.",
        "createdAt" : "2017-12-07T13:12:20Z",
        "updatedAt" : "2017-12-18T21:44:58Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "da05fbe03642c6c5a9964df69faa2a4d30bb3a07",
    "line" : 242,
    "diffHunk" : "@@ -1,1 +1537,1541 @@}\n\nfunc fakeScaleClient(discoveryResources []*metav1.APIResourceList, pathsResources map[string]runtime.Object) (scale.ScalesGetter, error) {\n\tfakeDiscoveryClient := &fakedisco.FakeDiscovery{Fake: &testcore.Fake{}}\n\tfakeDiscoveryClient.Resources = discoveryResources"
  },
  {
    "id" : "821815ff-ce12-4a64-a807-8d730fb8e8a5",
    "prId" : 56077,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/56077#pullrequestreview-81682134",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "52301e44-e796-494d-9a03-c4c9af51e7af",
        "parentId" : null,
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "nit: no linebreak here",
        "createdAt" : "2017-12-06T21:55:27Z",
        "updatedAt" : "2017-12-18T21:44:58Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "da05fbe03642c6c5a9964df69faa2a4d30bb3a07",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +27,31 @@\t\"testing\"\n\t\"time\"\n\n\tappsv1beta2 \"k8s.io/api/apps/v1beta2\"\n\tkerrors \"k8s.io/apimachinery/pkg/api/errors\""
  }
]