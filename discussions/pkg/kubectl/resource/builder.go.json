[
  {
    "id" : "2b0cfb57-ea96-49c9-a9ad-8a20c9a1a3da",
    "prId" : 63376,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63376#pullrequestreview-117145267",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6d249164-5590-4e83-8aae-9ce84eb637b0",
        "parentId" : null,
        "authorId" : "e4b03d1a-8620-4310-9c5c-493d80e551a3",
        "body" : "Does it mean that there is no error even if internal mapper is set?",
        "createdAt" : "2018-05-02T21:54:29Z",
        "updatedAt" : "2018-05-02T21:59:44Z",
        "lastEditedBy" : "e4b03d1a-8620-4310-9c5c-493d80e551a3",
        "tags" : [
        ]
      },
      {
        "id" : "f357472a-02a1-466a-8ee6-27ca9111074e",
        "parentId" : "6d249164-5590-4e83-8aae-9ce84eb637b0",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "no, it means we tolerate a second call to `Unstructured()`",
        "createdAt" : "2018-05-03T02:55:14Z",
        "updatedAt" : "2018-05-03T02:55:14Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "1aa029e8-6670-4ae9-bc2f-fc9e92edc858",
        "parentId" : "6d249164-5590-4e83-8aae-9ce84eb637b0",
        "authorId" : "e4b03d1a-8620-4310-9c5c-493d80e551a3",
        "body" : "The fix works only because two calls do NOT share the same Builder as previous (changes in `describe.go`).\r\n\r\nI think the change in `builder.go` is unnecessary and it changes current behavior.\r\n\r\nYou can assume that the first call set `b.mapper = b.unstructured`, so if using the same builder the second call will meet the condition and get the error.\r\n\r\n",
        "createdAt" : "2018-05-03T06:19:00Z",
        "updatedAt" : "2018-05-03T06:19:01Z",
        "lastEditedBy" : "e4b03d1a-8620-4310-9c5c-493d80e551a3",
        "tags" : [
        ]
      }
    ],
    "commit" : "ccd820d6808d12278bbc9d1338718ca8dd2c9507",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +199,203 @@\t\treturn b\n\t}\n\tif b.mapper != nil && b.mapper != b.unstructured {\n\t\tb.errs = append(b.errs, fmt.Errorf(\"another mapper was already selected, cannot use unstructured types\"))\n\t\treturn b"
  },
  {
    "id" : "7ad2aa7a-dfc4-4d1d-b249-dd74558da692",
    "prId" : 63335,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63335#pullrequestreview-116628987",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d3d3e30c-0e27-4524-b93b-84cb5f4ae2e3",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "just an internal map key",
        "createdAt" : "2018-05-01T17:05:46Z",
        "updatedAt" : "2018-05-01T20:35:04Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "9a480667493f6275c22cc9cd0f69fb0c75ef3579",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +829,833 @@\tclients := make(map[string]RESTClient)\n\tfor _, mapping := range mappings {\n\t\ts := fmt.Sprintf(\"%s/%s\", mapping.GroupVersionKind.GroupVersion().String(), mapping.Resource.Resource)\n\t\tif _, ok := clients[s]; ok {\n\t\t\tcontinue"
  },
  {
    "id" : "492a5774-b215-4ab1-bd86-41a2e372bd43",
    "prId" : 63206,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63206#pullrequestreview-116335926",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d43e9aa0-43a5-4c3a-8a3f-5912e52ddb50",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "why does Unstructured affect isLocal? whether or not you make use of conversion or typed objects depends on the typer/convertor you give to the builder, not whether it has a server connection and can look up restmappings, right?",
        "createdAt" : "2018-04-30T14:41:02Z",
        "updatedAt" : "2018-05-01T11:58:46Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "e7e1e929-fbf6-4ea0-abc3-644c3b7cce40",
        "parentId" : "d43e9aa0-43a5-4c3a-8a3f-5912e52ddb50",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> why does Unstructured affect isLocal? whether or not you make use of conversion or typed objects depends on the typer/convertor you give to the builder, not whether it has a server connection and can look up restmappings, right?\r\n\r\nIt's the point where the mapper is chosen and the old spot can logically wire this piece of information.  A few more pulls and the mapper won't be specified by callers and this will effectively drop out.",
        "createdAt" : "2018-04-30T15:47:47Z",
        "updatedAt" : "2018-05-01T11:58:46Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e5372b6204db9f70de3683fb6546bfe6828cb67",
    "line" : 29,
    "diffHunk" : "@@ -1,1 +204,208 @@\t}\n\tb.mapper = b.unstructured\n\tb.mapper.localFn = b.isLocal\n\n\tb.objectTyper = unstructuredscheme.NewUnstructuredObjectTyper()"
  },
  {
    "id" : "6d8f9d93-5566-4414-8a55-f1d1833551a7",
    "prId" : 63206,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/63206#pullrequestreview-116351618",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "cba933e9-3a99-4c5d-9bfe-d0b79c67ef98",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "doc this means the returned Info will not have a RESTMapping or Client set",
        "createdAt" : "2018-04-30T14:41:54Z",
        "updatedAt" : "2018-05-01T11:58:46Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "3b3032b0-4043-40dd-b822-fc0e98be8b98",
        "parentId" : "cba933e9-3a99-4c5d-9bfe-d0b79c67ef98",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> doc this means the returned Info will not have a RESTMapping or Client set\r\n\r\nThat's already doc'ed on the mapping and client fields",
        "createdAt" : "2018-04-30T15:46:53Z",
        "updatedAt" : "2018-05-01T11:58:46Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "82433e65-465a-418e-98ae-639f469bb249",
        "parentId" : "cba933e9-3a99-4c5d-9bfe-d0b79c67ef98",
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "not seeing that doc, but fine to include in follow up cleanup pulls. also, the doc on the Object field is drifting, should update once this is in it's final shape.",
        "createdAt" : "2018-04-30T16:35:21Z",
        "updatedAt" : "2018-05-01T11:58:46Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      }
    ],
    "commit" : "1e5372b6204db9f70de3683fb6546bfe6828cb67",
    "line" : 43,
    "diffHunk" : "@@ -1,1 +239,243 @@}\n\n// Local will avoid asking the server for results.\nfunc (b *Builder) Local() *Builder {\n\tb.local = true"
  },
  {
    "id" : "a9d7a674-21f6-40e8-a5d5-12937daa4354",
    "prId" : 59353,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59353#pullrequestreview-95566814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9ff9df1b-23d2-48e9-976e-05ec2cd8b208",
        "parentId" : null,
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "@deads2k thanks, comments addressed. However the `b.mapper.RESTMapping` here and in line 612 will return a \"not matched\" error if only the kind is given: `$ kubectl get Kind`.\r\n\r\nThe following will work:\r\n```\r\n$ kubectl get Kind.group.com/resource_name\r\n$ kubectl get Kind.group.com\r\n```",
        "createdAt" : "2018-02-08T00:25:06Z",
        "updatedAt" : "2018-02-15T15:33:14Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      },
      {
        "id" : "4c296a46-9f89-48cc-84bf-d43f8f5e79d9",
        "parentId" : "9ff9df1b-23d2-48e9-976e-05ec2cd8b208",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> $ kubectl get Kind.group.com/resource\r\n\r\nThis string makes no sense.  Try explaining again.  is \"resource\" actually a \"resourcename\"?",
        "createdAt" : "2018-02-09T19:16:09Z",
        "updatedAt" : "2018-02-15T15:33:14Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "6ae8912b-8c65-438b-82c4-73254d455146",
        "parentId" : "9ff9df1b-23d2-48e9-976e-05ec2cd8b208",
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "> This string makes no sense. Try explaining again. is \"resource\" actually a \"resourcename\"?\r\n\r\nYes, edited my previous comment's example to reflect this better. It should have been `Kind.group.com/resource_name`",
        "createdAt" : "2018-02-09T21:23:59Z",
        "updatedAt" : "2018-02-15T15:33:14Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "765f9ec68b0d0759e64d474f9dfb3bf22c24cadf",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +613,617 @@\t\t\treturn mapping, nil\n\t\t} else {\n\t\t\tif mapping, err := b.mapper.RESTMapping(groupKind, \"\"); err == nil {\n\t\t\t\treturn mapping, nil\n\t\t\t}"
  },
  {
    "id" : "6e8ef3a3-af5e-4dd2-91c6-3d767cea8ed3",
    "prId" : 59353,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/59353#pullrequestreview-102382205",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ccd438fb-28b3-4886-b7c5-c6fe5478dc33",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This is not correct code.  We were always accepting resource before first here.  Checking for kind first causes an invalidation of the discovery cache on *every* CLI call, which is a huge usability regression.\r\n\r\nThis chunk either needs to be reverted, or KindFor() must be checked first.",
        "createdAt" : "2018-03-08T02:35:08Z",
        "updatedAt" : "2018-03-08T02:35:20Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "8ea19b43-8899-4781-8b4b-2d60a90432c1",
        "parentId" : "ccd438fb-28b3-4886-b7c5-c6fe5478dc33",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This is must fix for 1.10 because of the regression.",
        "createdAt" : "2018-03-08T02:36:35Z",
        "updatedAt" : "2018-03-08T02:36:35Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9b6bc3df-d29f-40c6-b528-a3437edb7d70",
        "parentId" : "ccd438fb-28b3-4886-b7c5-c6fe5478dc33",
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "Thanks, this is addressed by https://github.com/kubernetes/kubernetes/pull/60932",
        "createdAt" : "2018-03-08T17:15:53Z",
        "updatedAt" : "2018-03-08T17:15:54Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "765f9ec68b0d0759e64d474f9dfb3bf22c24cadf",
    "line" : 11,
    "diffHunk" : "@@ -1,1 +602,606 @@// prefers a fully specified GroupVersionKind match. If we don't have one, match on a fully specified\n// GroupVersionResource, or fallback to a match on GroupResource.\nfunc (b *Builder) mappingFor(resourceOrKindArg string) (*meta.RESTMapping, error) {\n\tfullySpecifiedGVK, groupKind := schema.ParseKindArg(resourceOrKindArg)\n\tif fullySpecifiedGVK == nil {"
  },
  {
    "id" : "e7cd3879-1be9-4507-a1e9-47ac47944510",
    "prId" : 50140,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/50140#pullrequestreview-71383814",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "04ba17d0-3b5f-4e4c-bd1a-c19808ea3e4c",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "What if fieldSelector is not nil?  What happens then?",
        "createdAt" : "2017-10-23T17:43:22Z",
        "updatedAt" : "2017-11-06T09:27:54Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "e00b5390-638c-4a5f-a91b-31b46b9e6799",
        "parentId" : "04ba17d0-3b5f-4e4c-bd1a-c19808ea3e4c",
        "authorId" : "3c1422a0-6358-4857-8f56-961979171514",
        "body" : "> What if fieldSelector is not nil? What happens then?\r\n\r\nThis does not affect `fieldSelector`. Will work as expected.\r\n",
        "createdAt" : "2017-10-24T02:48:36Z",
        "updatedAt" : "2017-11-06T09:27:54Z",
        "lastEditedBy" : "3c1422a0-6358-4857-8f56-961979171514",
        "tags" : [
        ]
      }
    ],
    "commit" : "fa143c6ddf18f051f1c6e5c7261d731e69f668d3",
    "line" : 74,
    "diffHunk" : "@@ -1,1 +413,417 @@\tcase len(args) == 1:\n\t\tb.ResourceTypes(SplitResourceArgument(args[0])...)\n\t\tif b.labelSelector == nil && allowEmptySelector {\n\t\t\tselector := labels.Everything().String()\n\t\t\tb.labelSelector = &selector"
  },
  {
    "id" : "9030f2bc-8ba7-4aa4-bde3-0f76d5493b79",
    "prId" : 48763,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48763#pullrequestreview-71619349",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "c259872b-3461-4b2e-965d-4c97eebb6fc5",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This is not the right place to check this.  Local and unstructured have nothing to do with each other.  Local commands should absolutely be able to function without needing to have compiled in objects.",
        "createdAt" : "2017-10-24T01:59:29Z",
        "updatedAt" : "2017-10-24T01:59:29Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "3a2a19c4-c967-4855-9475-bff016ef327a",
        "parentId" : "c259872b-3461-4b2e-965d-4c97eebb6fc5",
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "@smarterclayton Thanks, will make a patch to address this",
        "createdAt" : "2017-10-24T18:11:29Z",
        "updatedAt" : "2017-10-24T18:11:29Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "04d319dc2ad51cbb5e518ea41a1c416fee61394e",
    "line" : 66,
    "diffHunk" : "@@ -1,1 +183,187 @@// ObjectTyper, and codec for working with unstructured api objects\nfunc (b *Builder) Unstructured(mapperFunc ClientMapperFunc, mapper meta.RESTMapper, typer runtime.ObjectTyper) *Builder {\n\tif b.isLocal {\n\t\tb.errs = append(b.errs, LocalUnstructuredBuilderError)\n\t\treturn b"
  },
  {
    "id" : "9b98e4f3-a21d-401c-936f-b8ba1b883fc4",
    "prId" : 48244,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/48244#pullrequestreview-57113250",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9244e929-a591-4885-8247-a1f1f68a9f83",
        "parentId" : null,
        "authorId" : "b1ad4056-936e-4ce6-ab7b-55870c4e6024",
        "body" : "Why check if b.errs is empty?",
        "createdAt" : "2017-08-17T15:47:27Z",
        "updatedAt" : "2017-08-18T05:17:07Z",
        "lastEditedBy" : "b1ad4056-936e-4ce6-ab7b-55870c4e6024",
        "tags" : [
        ]
      },
      {
        "id" : "7f87ef46-8cd7-4b1c-b9e8-e2f44b1a9ecf",
        "parentId" : "9244e929-a591-4885-8247-a1f1f68a9f83",
        "authorId" : "9c76f9d4-eaaa-4ca5-ab15-871535509602",
        "body" : "> Why check if b.errs is empty?\r\n\r\nIf the path cannot be accessed, b.paths is empty. I think file extension is not the reason, we do not need to return the message.",
        "createdAt" : "2017-08-18T05:23:26Z",
        "updatedAt" : "2017-08-18T05:23:26Z",
        "lastEditedBy" : "9c76f9d4-eaaa-4ca5-ab15-871535509602",
        "tags" : [
        ]
      }
    ],
    "commit" : "a9086f9b4f3e666cbe349e030206011dc851dbae",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +213,217 @@\t\tb.paths = append(b.paths, visitors...)\n\t}\n\tif len(b.paths) == 0 && len(b.errs) == 0 {\n\t\tb.errs = append(b.errs, fmt.Errorf(\"error reading %v: recognized file extensions are %v\", paths, FileExtensions))\n\t}"
  },
  {
    "id" : "6db96067-2f8e-4f3a-a215-dc4bb2f81b17",
    "prId" : 42216,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42216#pullrequestreview-24250246",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bcc8073e-bb1b-4bba-8d6f-cfdffca98c67",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I don't think this change made the method more readable.",
        "createdAt" : "2017-02-28T14:26:56Z",
        "updatedAt" : "2017-03-01T00:19:40Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "27f836c4-c28d-45fc-a165-d8a7795cadf5",
        "parentId" : "bcc8073e-bb1b-4bba-8d6f-cfdffca98c67",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I don't want every exit to declare the whole struct though.  I think that's not a consistent pattern.",
        "createdAt" : "2017-02-28T14:30:56Z",
        "updatedAt" : "2017-03-01T00:19:40Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "bace93743812338c8f7ba92a690cc14b63e8d7cc",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +568,572 @@\nfunc (b *Builder) visitBySelector() *Result {\n\tresult := &Result{\n\t\ttargetsSingleItems: false,\n\t}"
  },
  {
    "id" : "cfb4b84b-b774-4fc3-96df-885c7cd9570b",
    "prId" : 42216,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/42216#pullrequestreview-24256623",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "197413f6-2d97-4f8d-8536-78a2e59f5a10",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "This never mutates.  Again, I find the value questionable in a method this size.",
        "createdAt" : "2017-02-28T14:30:41Z",
        "updatedAt" : "2017-03-01T00:19:40Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "a1dcf94e-8846-4f14-bb33-2275053d527b",
        "parentId" : "197413f6-2d97-4f8d-8536-78a2e59f5a10",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "I'm not sure what you're arguing for.  I don't want each line to have 40 characters that are exactly the same that someone will cut and paste incorrectly.",
        "createdAt" : "2017-02-28T14:31:41Z",
        "updatedAt" : "2017-03-01T00:19:40Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "34ce5b87-50df-4e77-917f-06bca4643038",
        "parentId" : "197413f6-2d97-4f8d-8536-78a2e59f5a10",
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "> I'm not sure what you're arguing for. I don't want each line to have 40 characters that are exactly the same that someone will cut and paste incorrectly.\r\n\r\nI'd prefer a `.with` construct, but I won't stick on it.  There already be dragons here.",
        "createdAt" : "2017-02-28T14:55:37Z",
        "updatedAt" : "2017-03-01T00:19:40Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "bace93743812338c8f7ba92a690cc14b63e8d7cc",
    "line" : 58,
    "diffHunk" : "@@ -1,1 +619,623 @@\tresult := &Result{\n\t\tsingleItemImplied:  isSingleItemImplied,\n\t\ttargetsSingleItems: true,\n\t}\n"
  },
  {
    "id" : "781aee53-5b0a-4627-a935-6ebada415f37",
    "prId" : 40046,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40046#pullrequestreview-17236335",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "57a1728f-0f37-4546-957d-c8ec678f9887",
        "parentId" : null,
        "authorId" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "body" : "Is args the list of args to the sub command?  Or the full list of args?",
        "createdAt" : "2017-01-17T23:22:25Z",
        "updatedAt" : "2017-01-25T15:16:30Z",
        "lastEditedBy" : "47ec15eb-72b4-4618-9e01-e3b37b6bac00",
        "tags" : [
        ]
      },
      {
        "id" : "291aa44e-ea87-418e-937a-ef9441edb8f2",
        "parentId" : "57a1728f-0f37-4546-957d-c8ec678f9887",
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "They're only the set passed to the sub command (in `kubectl get all`, `[all]` would be the args slice)",
        "createdAt" : "2017-01-18T14:45:21Z",
        "updatedAt" : "2017-01-25T15:16:30Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b8f4e0b7d9107eaa352e08da7c91626e98074cd",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +807,811 @@// MultipleTypesRequested returns true if the provided args contain multiple resource kinds\nfunc MultipleTypesRequested(args []string) bool {\n\tif len(args) == 1 && args[0] == \"all\" {\n\t\treturn true\n\t}"
  },
  {
    "id" : "2bf6ada0-8bf2-428f-abb2-60d394a231b0",
    "prId" : 40046,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/40046#pullrequestreview-18308435",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "7cc7a2e7-e5c7-4582-a011-c177520ac766",
        "parentId" : null,
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "This check is somewhat misleading. In resource/builder.go, the call to `ReplaceAliases` replaces `all` with all supported resources [1], and then `ResourceTypeOrNameArgs` will split it into a slice of string [2]\r\n\r\n1.`pods,replicationcontrollers,services,statefulsets,horizontalpodautoscalers,jobs,deployments,replicasets`\r\n2.`[]string{\"pods,replicationcontrollers,services,statefulsets,horizontalpodautoscalers,jobs,deployments,replicasets\"}`\r\n\r\nThis means that `all` won't be passed in as `args[0]`.\r\n\r\nThe unit test needs to be updated as well. ",
        "createdAt" : "2017-01-18T02:02:58Z",
        "updatedAt" : "2017-01-25T15:16:30Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "15f1ee75-4694-4411-aedd-e04e885511e1",
        "parentId" : "7cc7a2e7-e5c7-4582-a011-c177520ac766",
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "> This check is somewhat misleading. In resource/builder.go, the call to ReplaceAliases replaces all with all supported resources [1], and then ResourceTypeOrNameArgs will split it into a slice of string [2]\r\n> This means that all won't be passed in as args[0].\r\n\r\nAlthough `all` will never be `args[0]` if the args slice that is passed to `MultipleTypesRequested` is built from the output of `replaceAliases` or `SplitResourceArgument`, this check is mostly for cases such as https://github.com/kubernetes/kubernetes/blob/master/pkg/kubectl/cmd/get.go#L424, where arguments from a sub command are passed to it, without first going through other functions in resource/builder.go",
        "createdAt" : "2017-01-18T15:16:01Z",
        "updatedAt" : "2017-01-25T15:16:30Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      },
      {
        "id" : "6e73c38f-0e8d-4556-9fd1-1efe9802f3d6",
        "parentId" : "7cc7a2e7-e5c7-4582-a011-c177520ac766",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "> this check is mostly for cases such as https://github.com/kubernetes/kubernetes/blob/master/pkg/kubectl/cmd/get.go#L424\r\n\r\nDid you mean this line? (line number was changed since the link points to `master`):\r\n\r\n```go\r\nif resource.MultipleTypesRequested(args) || cmdutil.MustPrintWithKinds(objs, infos, sorter) {\r\n```\r\n\r\nIIUC, before this line, we make a call to `ResourceTypeOrNameArgs`:\r\n\r\n```go \r\n\tr := resource.NewBuilder(mapper, typer, resource.ClientMapperFunc(f.UnstructuredClientForMapping), unstructured.UnstructuredJSONScheme).\r\n\t\tNamespaceParam(cmdNamespace).DefaultNamespace().AllNamespaces(allNamespaces).\r\n\t\tFilenameParam(enforceNamespace, &options.FilenameOptions).\r\n\t\tSelectorParam(selector).\r\n\t\tExportParam(export).\r\n\t\tResourceTypeOrNameArgs(true, args...).\r\n\t\tContinueOnError().\r\n\t\tLatest().\r\n\t\tFlatten().\r\n\t\tDo()\r\n```\r\n\r\nAfter this call, `args` has been changed (aliases, including `all`, are expanded). Would you explain more on when the following situation would happen? \r\n> arguments from a sub command are passed to it, without first going through other functions in resource/builder.go",
        "createdAt" : "2017-01-20T01:38:37Z",
        "updatedAt" : "2017-01-25T15:16:30Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "dca04322-a0b0-4eac-a570-767d753a18fe",
        "parentId" : "7cc7a2e7-e5c7-4582-a011-c177520ac766",
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "@janetkuo \r\n> After this call, args has been changed (aliases, including all, are expanded).\r\n\r\nApologies, I see what you mean now. I had tested the values of `args` in a line located above the call to `ResourceTypeOrNameArgs` in [this PR](https://github.com/kubernetes/kubernetes/pull/39042#discussion_r96523358), and had not realized that its value is mutated by the time it is used in \r\n```go\r\nif resource.MultipleTypesRequested(args) || cmdutil.MustPrintWithKinds(objs, infos, sorter) {\r\n```\r\n\r\n> Would you explain more on when the following situation would happen?\r\n>>arguments from a sub command are passed to it, without first going through other functions in resource/builder.go\r\n\r\nI realize now that, at least for the time being, `MultipleTypesRequested` will never receive `all` as one of its arguments, however a potential situation where it will is if a call to this helper is ever made before a call to `ReplaceAliases`.",
        "createdAt" : "2017-01-20T15:39:25Z",
        "updatedAt" : "2017-01-25T15:16:30Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      },
      {
        "id" : "d9a299d9-92b9-4e4b-abf7-d419ef187d72",
        "parentId" : "7cc7a2e7-e5c7-4582-a011-c177520ac766",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "I see. LGTM then ",
        "createdAt" : "2017-01-25T01:13:44Z",
        "updatedAt" : "2017-01-25T15:16:30Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "1b8f4e0b7d9107eaa352e08da7c91626e98074cd",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +808,812 @@func MultipleTypesRequested(args []string) bool {\n\tif len(args) == 1 && args[0] == \"all\" {\n\t\treturn true\n\t}\n"
  },
  {
    "id" : "0750ada6-ec2d-4fa1-bc4c-6c4948f7e96f",
    "prId" : 37636,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37636#pullrequestreview-11058462",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5983cb42-be10-4960-9be5-cb778b0e6625",
        "parentId" : null,
        "authorId" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "body" : "If `arg` contains \",\" then this is already > 1, isn't it? Is this check here because of something like `pods,pods`?",
        "createdAt" : "2016-12-01T19:08:34Z",
        "updatedAt" : "2016-12-02T20:14:53Z",
        "lastEditedBy" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "tags" : [
        ]
      },
      {
        "id" : "6e4c181b-de55-4471-b17a-9fb01e360df7",
        "parentId" : "5983cb42-be10-4960-9be5-cb778b0e6625",
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "@fabianofranz \r\n> If arg contains \",\" then this is already > 1, isn't it? Is this check here because of something like pods,pods?\r\n\r\nYeah, it is just in case a resource type is specified twice",
        "createdAt" : "2016-12-01T21:15:03Z",
        "updatedAt" : "2016-12-02T20:14:53Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      }
    ],
    "commit" : "3484c6f67637792a3a91a5c7ff04cb5b28e56c23",
    "line" : 24,
    "diffHunk" : "@@ -1,1 +824,828 @@\t\t\tif strings.Contains(arg, \",\") {\n\t\t\t\tsplitArgs := SplitResourceArgument(arg)\n\t\t\t\tif len(splitArgs) > 1 {\n\t\t\t\t\treturn true\n\t\t\t\t}"
  },
  {
    "id" : "a593ff60-95a4-4731-abc9-0ee89f0426a5",
    "prId" : 37636,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37636#pullrequestreview-11165238",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "776a835e-6d26-4e86-90a3-c9ca09e5065b",
        "parentId" : null,
        "authorId" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "body" : "Unrelated note, we need to think of a better structure for aliases. This and a number places will have issues once we add more aliases in addition to \"all\" (the only existing one ATM). Might be worth adding an issue.",
        "createdAt" : "2016-12-01T19:13:50Z",
        "updatedAt" : "2016-12-02T20:14:53Z",
        "lastEditedBy" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "tags" : [
        ]
      },
      {
        "id" : "5bde66fd-f563-45b3-bedb-3847b84a02a2",
        "parentId" : "776a835e-6d26-4e86-90a3-c9ca09e5065b",
        "authorId" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "body" : "@fabianofranz hm, maybe for cases like this one, we could have a controller for aliases with a method that could return a boolean if the alias maps to more than one kind? Something like \r\n```go\r\naliasctrl := NewAliasController(alias)\r\nif aliasctrl.MapsToMixedTypes() {\r\n   // left to the reader as an exercise :)\r\n}\r\n```",
        "createdAt" : "2016-12-01T21:46:20Z",
        "updatedAt" : "2016-12-02T20:14:53Z",
        "lastEditedBy" : "0385dfd1-e8a7-41a8-8213-eabe697d14cd",
        "tags" : [
        ]
      },
      {
        "id" : "d7a4c989-91de-4c48-87ca-58e727b9775c",
        "parentId" : "776a835e-6d26-4e86-90a3-c9ca09e5065b",
        "authorId" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "body" : "@juanvallejo exactly, something along these lines. The important part is to have a structure to handle the configured aliases so we don't hardcode \"all\" everywhere, and it has to know if it maps to more than one kind. ;)",
        "createdAt" : "2016-12-02T14:03:20Z",
        "updatedAt" : "2016-12-02T20:14:53Z",
        "lastEditedBy" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "tags" : [
        ]
      }
    ],
    "commit" : "3484c6f67637792a3a91a5c7ff04cb5b28e56c23",
    "line" : null,
    "diffHunk" : "@@ -1,1 +810,814 @@\trKinds := sets.NewString()\n\tfor _, arg := range args {\n\t\tif arg == \"all\" {\n\t\t\treturn true\n\t\t}"
  },
  {
    "id" : "c7bb3120-e9f7-4a74-a6b2-18fa9eaef3f1",
    "prId" : 37636,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/37636#pullrequestreview-11222424",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "6a84bf7b-cbcc-4fa8-97e4-7e460f478887",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This needs unit tests.",
        "createdAt" : "2016-12-02T17:22:25Z",
        "updatedAt" : "2016-12-02T20:14:53Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "f9f3d7b4-f736-4b79-a6fe-d5dbc24b37c2",
        "parentId" : "6a84bf7b-cbcc-4fa8-97e4-7e460f478887",
        "authorId" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "body" : "Need to adjust the comment for proper godoc.",
        "createdAt" : "2016-12-02T19:16:06Z",
        "updatedAt" : "2016-12-02T20:14:53Z",
        "lastEditedBy" : "ad267631-96d1-4bad-b913-e8d6342e65a2",
        "tags" : [
        ]
      }
    ],
    "commit" : "3484c6f67637792a3a91a5c7ff04cb5b28e56c23",
    "line" : null,
    "diffHunk" : "@@ -1,1 +806,810 @@\n// MultipleTypesRequested returns true if the provided args contain multiple resource kinds\nfunc MultipleTypesRequested(args []string) bool {\n\targs = normalizeMultipleResourcesArgs(args)\n\trKinds := sets.NewString()"
  },
  {
    "id" : "035877b2-b352-4466-8ef5-e22c9fcfe7e2",
    "prId" : 33075,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/33075#pullrequestreview-752019",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "4d74e0d9-d650-4500-9253-1b7b91009205",
        "parentId" : null,
        "authorId" : "d37d9758-bdf5-4c23-a40e-a85099689a0c",
        "body" : "Is this code simply moved from down below, or it also contains some changes? May be good idea to make a separate PR for moving this first. Also, this looks like a ginormous func and some parts of it can be broken out,\n",
        "createdAt" : "2016-09-20T08:39:31Z",
        "updatedAt" : "2016-10-07T00:49:13Z",
        "lastEditedBy" : "d37d9758-bdf5-4c23-a40e-a85099689a0c",
        "tags" : [
        ]
      },
      {
        "id" : "6b2ca421-5dce-4761-884f-c56cb7173b69",
        "parentId" : "4d74e0d9-d650-4500-9253-1b7b91009205",
        "authorId" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "body" : "https://github.com/kubernetes/kubernetes/pull/32599\n",
        "createdAt" : "2016-09-20T13:58:34Z",
        "updatedAt" : "2016-10-07T00:49:13Z",
        "lastEditedBy" : "392f7c7a-6820-4848-94e2-2b8e009fec9d",
        "tags" : [
        ]
      }
    ],
    "commit" : "62960aace74ef097546f17ff7550c53b9dcb9b98",
    "line" : null,
    "diffHunk" : "@@ -1,1 +539,543 @@\t}\n\n\t// visit items specified by paths\n\tif len(b.paths) != 0 {\n\t\treturn b.visitByPaths()"
  },
  {
    "id" : "6c19222c-c2bd-4151-a0ce-9f6518b16e1a",
    "prId" : 22853,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "d6fbd4e8-ab5d-42ec-8e24-595a3beabe55",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "nit: cliffhanger\n",
        "createdAt" : "2016-03-11T18:07:32Z",
        "updatedAt" : "2016-03-11T18:07:32Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      }
    ],
    "commit" : "5bd161a9ccaf471b464167bb7a155a0764e987a0",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +435,439 @@\n// mappingFor returns the RESTMapping for the Kind referenced by the resource.\n// prefers a fully specified GroupVersionResource match.  If we don't have one match on GroupResource\nfunc (b *Builder) mappingFor(resourceArg string) (*meta.RESTMapping, error) {\n\tfullySpecifiedGVR, groupResource := unversioned.ParseResourceArg(resourceArg)"
  },
  {
    "id" : "46bf91c1-b296-41d7-89d8-006effeb384b",
    "prId" : 14461,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "adea5376-e341-405c-8900-02aa55befbf9",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "What about `(<group> <resource type>)`?\n",
        "createdAt" : "2015-09-24T19:13:37Z",
        "updatedAt" : "2015-10-06T20:12:51Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "bc6ec0b2-8ed3-48e1-bb1e-1dbbf5b40321",
        "parentId" : "adea5376-e341-405c-8900-02aa55befbf9",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Didn't support that at this moment since it'll make the code logic more complicated. \n",
        "createdAt" : "2015-09-24T22:53:45Z",
        "updatedAt" : "2015-10-06T20:12:51Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "57388f9f9436e9154b068e01a414be14035e699d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +312,316 @@// When one argument is received, the types provided will be retrieved from the server (and be comma delimited).\n// The allowEmptySelector permits to select all the resources (via Everything func).\n// <type> = (<group>/<resource type> | <resource type>)\nfunc (b *Builder) ResourceTypeOrNameArgs(allowEmptySelector bool, args ...string) *Builder {\n\thasNames := b.hasNamesArg(args)"
  },
  {
    "id" : "1b279107-a90a-4560-b817-48884c2db344",
    "prId" : 14461,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "45801817-6aa3-4757-ad7d-a60a973276d9",
        "parentId" : null,
        "authorId" : "b86e7e78-bb07-417f-8470-39407559c779",
        "body" : "Please add a unit test for this function, too.\n",
        "createdAt" : "2015-09-24T19:14:38Z",
        "updatedAt" : "2015-10-06T20:12:51Z",
        "lastEditedBy" : "b86e7e78-bb07-417f-8470-39407559c779",
        "tags" : [
        ]
      },
      {
        "id" : "8e8a3a16-1af6-476b-ad19-c0f1865d0101",
        "parentId" : "45801817-6aa3-4757-ad7d-a60a973276d9",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Done\n",
        "createdAt" : "2015-09-24T22:50:55Z",
        "updatedAt" : "2015-10-06T20:12:51Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "57388f9f9436e9154b068e01a414be14035e699d",
    "line" : 106,
    "diffHunk" : "@@ -1,1 +403,407 @@// splitGroupResourceTypeName handles group/type/name resource formats and returns a resource tuple\n// (empty or not), whether it successfully found one, and an error\nfunc splitGroupResourceTypeName(s string) (resourceTuple, bool, error) {\n\tif !strings.Contains(s, \"/\") {\n\t\treturn resourceTuple{}, false, nil"
  },
  {
    "id" : "a73ac842-87f7-476e-9e88-96b39fee518e",
    "prId" : 14461,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "5af38e4a-b9c3-48fa-bb1c-781f79086427",
        "parentId" : null,
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "I think you may want to edit `ResourceNames` as well to be able to set default group/type combinations. \n\n@smarterclayton \n",
        "createdAt" : "2015-09-25T08:24:40Z",
        "updatedAt" : "2015-10-06T20:12:51Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "839c20c4-39ce-4762-85e5-bcb06ea44598",
        "parentId" : "5af38e4a-b9c3-48fa-bb1c-781f79086427",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "Done\n",
        "createdAt" : "2015-09-25T17:36:18Z",
        "updatedAt" : "2015-10-06T20:12:51Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "57388f9f9436e9154b068e01a414be14035e699d",
    "line" : null,
    "diffHunk" : "@@ -1,1 +313,317 @@// The allowEmptySelector permits to select all the resources (via Everything func).\n// <type> = (<group>/<resource type> | <resource type>)\nfunc (b *Builder) ResourceTypeOrNameArgs(allowEmptySelector bool, args ...string) *Builder {\n\thasNames := b.hasNamesArg(args)\n"
  },
  {
    "id" : "4b452c3a-57b0-4c7a-9335-a922f8170a1f",
    "prId" : 12900,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "0511710e-e58c-41f3-8064-65c824860f14",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Can you add a test case in resource/builder_test.go to verify the new cases we've added (`1,2,3 a b` and `1,2 a`)?\n",
        "createdAt" : "2015-08-21T14:27:14Z",
        "updatedAt" : "2015-08-24T07:22:07Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "943c57ff4e2da8545161d3964666e54d549de475",
    "line" : 3,
    "diffHunk" : "@@ -1,1 +256,260 @@// When two or more arguments are received, they must be a single type and resource name(s).\n// The allowEmptySelector permits to select all the resources (via Everything func).\nfunc (b *Builder) ResourceTypeOrNameArgs(allowEmptySelector bool, args ...string) *Builder {\n\t// convert multiple resources to resource tuples, a,b,c d as a transform to a/d b/d c/d\n\tif len(args) >= 2 {"
  },
  {
    "id" : "dddc589a-73cd-4291-8195-ceceb94b95dc",
    "prId" : 12326,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "34db612b-8ae2-4e07-ba8e-2aa4a99b163d",
        "parentId" : null,
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "I don't see why these code are related to this PR. Could you shed some light? Thank you.\n",
        "createdAt" : "2015-08-07T06:51:54Z",
        "updatedAt" : "2015-08-13T02:25:37Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "bc42849b-9b09-4074-88b3-231caadbd110",
        "parentId" : "34db612b-8ae2-4e07-ba8e-2aa4a99b163d",
        "authorId" : "72935ebf-c497-440a-ac8d-70d86560a131",
        "body" : "@caesarxuchao Because in the label command, it invokes RetrieveLatest function, which needs object's namespace, we should invoke SetNamespace before RetrieveLatest, otherwise it will return an error message \"\"no namespace set on resource %s %q\"\"\n",
        "createdAt" : "2015-08-07T07:50:00Z",
        "updatedAt" : "2015-08-13T02:25:37Z",
        "lastEditedBy" : "72935ebf-c497-440a-ac8d-70d86560a131",
        "tags" : [
        ]
      },
      {
        "id" : "20526297-f15c-4905-83be-645b060f47c8",
        "parentId" : "34db612b-8ae2-4e07-ba8e-2aa4a99b163d",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thank you @feihujiang. Sounds reasonable. RetrieveLatest is also used by other kubectl commands, why doesn't this cause problem for them?\n",
        "createdAt" : "2015-08-07T16:38:15Z",
        "updatedAt" : "2015-08-13T02:25:37Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      },
      {
        "id" : "b9ec9205-b3fd-4364-956b-b43425561baf",
        "parentId" : "34db612b-8ae2-4e07-ba8e-2aa4a99b163d",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "@caesarxuchao Correct me if I'm wrong... I think it's because other commands don't use `FilenameParam()` and `Latest()` together. \n\n@feihujiang Can you add a comment like line 583 does?\n",
        "createdAt" : "2015-08-07T22:35:04Z",
        "updatedAt" : "2015-08-13T02:25:37Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      },
      {
        "id" : "e6c1c0e0-8c9d-42b9-9cbf-c518ef117ad7",
        "parentId" : "34db612b-8ae2-4e07-ba8e-2aa4a99b163d",
        "authorId" : "72935ebf-c497-440a-ac8d-70d86560a131",
        "body" : "@caesarxuchao yes, the answer @JanetKuo gived is my opinion.\n",
        "createdAt" : "2015-08-10T06:29:11Z",
        "updatedAt" : "2015-08-13T02:25:37Z",
        "lastEditedBy" : "72935ebf-c497-440a-ac8d-70d86560a131",
        "tags" : [
        ]
      },
      {
        "id" : "f667954d-4680-4ca0-bef0-8405a138f6fd",
        "parentId" : "34db612b-8ae2-4e07-ba8e-2aa4a99b163d",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "Thank you both.\n",
        "createdAt" : "2015-08-10T16:37:48Z",
        "updatedAt" : "2015-08-13T02:25:37Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "4b9afc516e3544d444c139a6fcf964c5f57c47b5",
    "line" : null,
    "diffHunk" : "@@ -1,1 +588,592 @@\t\t\tif b.defaultNamespace {\n\t\t\t\tvisitors = NewDecoratedVisitor(visitors, SetNamespace(b.namespace))\n\t\t\t}\n\t\t\tvisitors = NewDecoratedVisitor(visitors, RetrieveLatest)\n\t\t}"
  },
  {
    "id" : "fcfe62da-ecdd-418a-9270-388336133777",
    "prId" : 10979,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ee0e24ed-c24d-41c0-b7b2-6876f1ef3e6d",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This should handle tuples (pod/foo) and names (foo).\n",
        "createdAt" : "2015-07-11T13:52:40Z",
        "updatedAt" : "2015-08-25T07:36:54Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9e3efc1a-30b6-494a-92a5-ddbee198c512",
        "parentId" : "ee0e24ed-c24d-41c0-b7b2-6876f1ef3e6d",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "So if we don't pass a resource type, just append to `b.names`?\n",
        "createdAt" : "2015-07-12T12:21:21Z",
        "updatedAt" : "2015-08-25T07:36:54Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "5632ead7-d5a1-4cce-88bb-729dd7b5edd4",
        "parentId" : "ee0e24ed-c24d-41c0-b7b2-6876f1ef3e6d",
        "authorId" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "body" : "Ok, I see that this has to be the equivalent of `ResourceTypeOrNameArgs` for names\n",
        "createdAt" : "2015-07-12T17:46:13Z",
        "updatedAt" : "2015-08-25T07:36:54Z",
        "lastEditedBy" : "11efe503-096f-46dd-a8c8-28ba38a0157a",
        "tags" : [
        ]
      },
      {
        "id" : "e4556b16-6036-4cd7-ba4c-46eaff26d07c",
        "parentId" : "ee0e24ed-c24d-41c0-b7b2-6876f1ef3e6d",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Exactly\n\nOn Jul 12, 2015, at 1:46 PM, Michail Kargakis notifications@github.com\nwrote:\n\nIn pkg/kubectl/resource/builder.go\nhttps://github.com/GoogleCloudPlatform/kubernetes/pull/10979#discussion_r34423735\n:\n\n> @@ -184,6 +184,15 @@ func (b *Builder) ResourceTypes(types ...string) *Builder {\n>   return b\n>  }\n> \n> +// ResourceNames accepts a default type and one or more names, and creates tuples of\n> +// resources\n> +func (b *Builder) ResourceNames(resource string, names ...string) *Builder {\n> - for _, name := range names {\n\nOk, I see that this has to be the equivalent of ResourceTypeOrNameArgs for\nnames\n\n—\nReply to this email directly or view it on GitHub\nhttps://github.com/GoogleCloudPlatform/kubernetes/pull/10979/files#r34423735\n.\n",
        "createdAt" : "2015-07-13T00:36:02Z",
        "updatedAt" : "2015-08-25T07:36:54Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "f3c63ba16b525050280da1e15a98904d47335810",
    "line" : 7,
    "diffHunk" : "@@ -1,1 +188,192 @@// resources\nfunc (b *Builder) ResourceNames(resource string, names ...string) *Builder {\n\tfor _, name := range names {\n\t\t// See if this input string is of type/name format\n\t\ttuple, ok, err := splitResourceTypeName(name)"
  },
  {
    "id" : "4cc03027-c655-4785-82d7-e2f268db394f",
    "prId" : 10493,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e283059f-7acd-4a14-ac53-72fe3101dde0",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Much nicer.\n",
        "createdAt" : "2015-07-01T20:37:44Z",
        "updatedAt" : "2015-07-01T20:37:44Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      }
    ],
    "commit" : "ffa764d60bd4e7768401a25e95eb77a0d7c9ddc0",
    "line" : 20,
    "diffHunk" : "@@ -1,1 +111,115 @@\n\tif enforceNamespace {\n\t\tb.RequireNamespace()\n\t}\n"
  },
  {
    "id" : "dd67cfe7-8216-406b-badb-826c3ffae66d",
    "prId" : 3944,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "64488690-19e4-4143-a116-f09940f11e67",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Add a todo that kubectl should probably warn / prevent the user from creating different type of resources at the same time.\n",
        "createdAt" : "2015-01-30T19:43:07Z",
        "updatedAt" : "2015-02-02T16:01:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "356b9897-0e76-4721-9d8f-d88a8d0b1feb",
        "parentId" : "64488690-19e4-4143-a116-f09940f11e67",
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "I thought the point of the resource builder was to allow creating different types of resources at the same time?\n",
        "createdAt" : "2015-01-30T21:46:41Z",
        "updatedAt" : "2015-02-02T16:01:19Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      }
    ],
    "commit" : "a928be56ba229e4a0456b9d4a0aeb1d4f73a5494",
    "line" : 41,
    "diffHunk" : "@@ -1,1 +412,416 @@\t\thelpers = append(helpers, RequireNamespace(b.namespace))\n\t}\n\thelpers = append(helpers, FilterNamespace())\n\tr.visitor = NewDecoratedVisitor(r.visitor, helpers...)\n\treturn r"
  }
]