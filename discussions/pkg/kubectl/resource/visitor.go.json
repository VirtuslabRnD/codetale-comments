[
  {
    "id" : "71be3232-ae2a-4502-abda-f7a0d36c9488",
    "prId" : 58787,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/58787#pullrequestreview-104758960",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "279cafe6-9a10-43fd-b877-ab30fc973503",
        "parentId" : null,
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : "> Object: %+q\r\n\r\nCan you paste a example output here?\r\nDo you think using `%+q` will be better than `%#v`?",
        "createdAt" : "2018-02-13T00:42:13Z",
        "updatedAt" : "2018-03-17T07:11:03Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "e1b8afcc-b624-462e-8e34-5599ace55d0e",
        "parentId" : "279cafe6-9a10-43fd-b877-ab30fc973503",
        "authorId" : "7173451b-f4a3-4cf8-93b2-48874c3fbf28",
        "body" : "Here is the example output of `%+q`\r\n```shell\r\n\r\nF0222 12:18:31.699709   77239 helpers.go:119] error: error when retrieving current configuration of:\r\nResource: \"pods\", Version: \"/v1, Kind=Pod\"\r\nName: \"\", Namespace: \"default\"\r\nObject: &{map[\"apiVersion\":\"v1\" \"kind\":\"Pod\" \"metadata\":map[\"generateName\":\"testing-nnp-\" \"namespace\":\"default\" \"annotations\":map[\"kubectl.kubernetes.io/last-applied-configuration\":\"\"]] \"spec\":map[\"restartPolicy\":\"Never\" \"containers\":[map[\"command\":[\"grep NoNewPriv /proc/self/status\"] \"image\":\"busybox\" \"name\":\"simple-container\"]] \"initContainers\":[map[\"command\":[\"grep NoNewPriv /proc/self/status\"] \"image\":\"busybox\" \"name\":\"init-container\"]]]]}\r\nfrom server for: \"lw.yml\": resource name may not be empty\r\n```\r\nAnd output of `%#v`\r\n```shell\r\n\r\nF0222 12:21:28.568327   81874 helpers.go:119] error: error when retrieving current configuration of:\r\nResource: \"pods\", Version: \"/v1, Kind=Pod\"\r\nName: \"\", Namespace: \"default\"\r\nObject: &unstructured.Unstructured{Object:map[string]interface {}{\"apiVersion\":\"v1\", \"kind\":\"Pod\", \"metadata\":map[string]interface {}{\"generateName\":\"testing-nnp-\", \"namespace\":\"default\", \"annotations\":map[string]interface {}{\"kubectl.kubernetes.io/last-applied-configuration\":\"\"}}, \"spec\":map[string]interface {}{\"containers\":[]interface {}{map[string]interface {}{\"command\":[]interface {}{\"grep NoNewPriv /proc/self/status\"}, \"image\":\"busybox\", \"name\":\"simple-container\"}}, \"initContainers\":[]interface {}{map[string]interface {}{\"command\":[]interface {}{\"grep NoNewPriv /proc/self/status\"}, \"image\":\"busybox\", \"name\":\"init-container\"}}, \"restartPolicy\":\"Never\"}}}\r\n```\r\n",
        "createdAt" : "2018-02-22T04:25:59Z",
        "updatedAt" : "2018-03-17T07:11:03Z",
        "lastEditedBy" : "7173451b-f4a3-4cf8-93b2-48874c3fbf28",
        "tags" : [
        ]
      },
      {
        "id" : "234668ae-80a4-4e93-a2a0-5d712b4494eb",
        "parentId" : "279cafe6-9a10-43fd-b877-ab30fc973503",
        "authorId" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "body" : ">\r\n```\r\n+\talways print a sign for numeric values;\r\n\tguarantee ASCII-only output for %q (%+q)\r\n```\r\n\r\nI think `%+q` is fine.",
        "createdAt" : "2018-03-15T16:15:43Z",
        "updatedAt" : "2018-03-17T07:11:03Z",
        "lastEditedBy" : "cdb05f24-d700-4d96-a683-3e4de7effbf5",
        "tags" : [
        ]
      },
      {
        "id" : "03a195fd-7b50-4eaa-8ac4-a65c76e6bcb0",
        "parentId" : "279cafe6-9a10-43fd-b877-ab30fc973503",
        "authorId" : "7173451b-f4a3-4cf8-93b2-48874c3fbf28",
        "body" : "ï¼š)",
        "createdAt" : "2018-03-17T06:58:22Z",
        "updatedAt" : "2018-03-17T07:11:03Z",
        "lastEditedBy" : "7173451b-f4a3-4cf8-93b2-48874c3fbf28",
        "tags" : [
        ]
      }
    ],
    "commit" : "e2dedc76a852e20613a785543898512c055561b9",
    "line" : 6,
    "diffHunk" : "@@ -1,1 +157,161 @@// String returns the general purpose string representation\nfunc (i *Info) String() string {\n\tbasicInfo := fmt.Sprintf(\"Name: %q, Namespace: %q\\nObject: %+q\", i.Name, i.Namespace, i.Object)\n\tif i.Mapping != nil {\n\t\tmappingInfo := fmt.Sprintf(\"Resource: %q, GroupVersionKind: %q\", i.Mapping.Resource,"
  },
  {
    "id" : "526aa9a6-a456-4680-a1b9-258d6f229bdd",
    "prId" : 39404,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/39404#pullrequestreview-21688554",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e37f7aa8-6ac5-46e6-8005-e474255ad12d",
        "parentId" : null,
        "authorId" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "body" : "Is this function original move from `pkg/kubectl/cmd/create.go` and made it public ? if so, can we delete the previous one and only keep this one ? ",
        "createdAt" : "2017-02-14T07:17:23Z",
        "updatedAt" : "2017-04-18T12:45:04Z",
        "lastEditedBy" : "54f3e5e9-1cb7-407a-b12d-39bb41fa5e9e",
        "tags" : [
        ]
      }
    ],
    "commit" : "5ed1ab66a293bebc03219d1338804a2131ba4271",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +650,654 @@\n// CreateAndRefresh creates an object from input info and refreshes info with that object\nfunc CreateAndRefresh(info *Info) error {\n\tobj, err := NewHelper(info.Client, info.Mapping).Create(info.Namespace, true, info.Object)\n\tif err != nil {"
  },
  {
    "id" : "b5e91dfa-7d68-4dcd-aacd-1066125a2be6",
    "prId" : 38406,
    "prUrl" : "https://github.com/kubernetes/kubernetes/pull/38406#pullrequestreview-12291512",
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "632ad69d-95c7-4de9-b1d0-0932c930223f",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Hrm... I can't remember why this was interface{}",
        "createdAt" : "2016-12-09T19:31:55Z",
        "updatedAt" : "2016-12-09T21:26:21Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "4536388909d13287acabe9c659f704aa540de8f1",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +82,86 @@\t// and conversions into its corresponding internal type. This is useful for\n\t// reflecting on user intent which may be lost after defaulting and conversions.\n\tVersionedObject runtime.Object\n\t// Optional, this is the most recent value returned by the server if available\n\tObject runtime.Object"
  },
  {
    "id" : "387e9ff8-4f83-414a-a1cd-ef0909b4783f",
    "prId" : 23112,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "fac12586-9eca-4882-82c6-6e6d74cb272e",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "This needs to know about the content encoding and type - I think we have a gap here for implementation (to be followed up later).  Add a `TODO: InfoForData needs to be able to handle objects in other encodings and schemas` and we should probably add this to the protobuf checklist on the protobuf issue.\n",
        "createdAt" : "2016-03-17T17:38:38Z",
        "updatedAt" : "2016-03-18T11:35:37Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "89585237cdb9fe79ae3d7e8028562d0a3cafa52a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +476,480 @@\t\t}\n\t\t// TODO: This needs to be able to handle object in other encodings and schemas.\n\t\text.Raw = bytes.TrimSpace(ext.Raw)\n\t\tif len(ext.Raw) == 0 || bytes.Equal(ext.Raw, []byte(\"null\")) {\n\t\t\tcontinue"
  },
  {
    "id" : "717b70d1-1d10-405d-b02e-b985c0c9b996",
    "prId" : 18101,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "09fed2a5-ab31-4dc0-a3e8-f95ba0628034",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "Keep this as an un-named return value.  You're not using the feature and it often leads to unusual name shadowing.\n",
        "createdAt" : "2015-12-21T20:15:27Z",
        "updatedAt" : "2015-12-22T18:42:19Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "2d55d263-e25a-4f35-a954-a84a89478ece",
        "parentId" : "09fed2a5-ab31-4dc0-a3e8-f95ba0628034",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2015-12-21T20:29:45Z",
        "updatedAt" : "2015-12-22T18:42:19Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "4123a61df7d4898e65b423bcff30784f88bae83b",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +107,111 @@\n// Get retrieves the object from the Namespace and Name fields\nfunc (i *Info) Get() (err error) {\n\tobj, err := NewHelper(i.Client, i.Mapping).Get(i.Namespace, i.Name, i.Export)\n\tif err != nil {"
  },
  {
    "id" : "a62b64a1-d597-4524-be72-858fc8fc77cb",
    "prId" : 12837,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "05bb42e1-c362-4e1c-80a9-685cc11008e8",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "How about an issue to create an `AggregatedValidationError` type so that we could plumb the handling for this all the way back to the caller?\n",
        "createdAt" : "2015-08-20T18:24:06Z",
        "updatedAt" : "2015-08-25T14:02:20Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      }
    ],
    "commit" : "5823ef771bcb90f60dc149c6f323f5cc708f1724",
    "line" : 17,
    "diffHunk" : "@@ -1,1 +209,213 @@\t}\n\tif err := schema.ValidateBytes(data); err != nil {\n\t\treturn fmt.Errorf(\"error validating data: %v; %s\", err, stopValidateMessage)\n\t}\n\treturn nil"
  },
  {
    "id" : "7eeb9fc9-e228-474a-9cfc-e3275f0f95c8",
    "prId" : 12837,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "f38cc9d3-c5b4-4adc-8420-faa49e85f555",
        "parentId" : null,
        "authorId" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "body" : "What is the behavior of this when schema is `validation.NullSchema{}`\n",
        "createdAt" : "2015-08-21T20:58:50Z",
        "updatedAt" : "2015-08-25T14:02:20Z",
        "lastEditedBy" : "8076e56f-768c-4f89-90e6-045ef34e1525",
        "tags" : [
        ]
      },
      {
        "id" : "76ff5293-e19b-432f-b328-d3dd597a35b7",
        "parentId" : "f38cc9d3-c5b4-4adc-8420-faa49e85f555",
        "authorId" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "body" : "It does nothing but return `nil`. See https://github.com/kubernetes/kubernetes/blob/master/pkg/api/validation/schema.go#L53. \n",
        "createdAt" : "2015-08-21T21:05:37Z",
        "updatedAt" : "2015-08-25T14:02:20Z",
        "lastEditedBy" : "01c14569-b640-48af-98cc-aa9dd12da7b6",
        "tags" : [
        ]
      }
    ],
    "commit" : "5823ef771bcb90f60dc149c6f323f5cc708f1724",
    "line" : 15,
    "diffHunk" : "@@ -1,1 +208,212 @@\t\treturn fmt.Errorf(\"error converting to YAML: %v\", err)\n\t}\n\tif err := schema.ValidateBytes(data); err != nil {\n\t\treturn fmt.Errorf(\"error validating data: %v; %s\", err, stopValidateMessage)\n\t}"
  },
  {
    "id" : "600f8957-0250-4dad-b5d7-3b1a7bc1227b",
    "prId" : 9787,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e2349027-82a8-4d18-a55d-b24738e06779",
        "parentId" : null,
        "authorId" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "body" : "I haven't had time to do a review, but I took a quick glance.  Can you add some godoc about this error argument?  It looks like the intent is to allow some error handling to be delegated down to the `VisitorFunc`, but if that's the case, it's a little unclear to me why I wouldn't have something more like\n\n```\ntype Visitor interface{\n    // In the normal path, Visit is called with an info\n    Visit(*Info) error\n\n    // If an error occurs before Visit is called, HandleError is invoked.  A nil return indicates a desire to continue to the next time to be visited.\n    // This is useful for ignoring certain kinds of errors or aggregating errors in some way.\n    HandleError(error) error\n```\n",
        "createdAt" : "2015-08-13T19:53:24Z",
        "updatedAt" : "2015-08-20T03:15:08Z",
        "lastEditedBy" : "fa477146-9a47-4754-b38c-de8062e65e13",
        "tags" : [
        ]
      },
      {
        "id" : "c6e42e5e-1c85-4f0b-8a40-756fbde8297a",
        "parentId" : "e2349027-82a8-4d18-a55d-b24738e06779",
        "authorId" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "body" : "@feihujiang, please add the godoc as @deads2k suggested. I think the HandleError() func would do the same job and looks cleaner, but I can live with this PR's approach.\n",
        "createdAt" : "2015-08-16T07:54:02Z",
        "updatedAt" : "2015-08-20T03:15:08Z",
        "lastEditedBy" : "ca7e5a52-cab7-4f09-8ff8-da79f43339d4",
        "tags" : [
        ]
      }
    ],
    "commit" : "29dc7f6ec20aecf8887ed897ba3445d9ec64d042",
    "line" : null,
    "diffHunk" : "@@ -1,1 +47,51 @@// A nil returned indicates to accept an error to continue loops even when errors happen.\n// This is useful for ignoring certain kinds of errors or aggregating errors in some way.\ntype VisitorFunc func(*Info, error) error\n\n// Watchable describes a resource that can be watched for changes that occur on the server,"
  },
  {
    "id" : "57430564-ad20-48e8-b213-c8baa0d5a59d",
    "prId" : 9781,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "9e28d953-65a9-4560-b7b3-6761c60d2ef7",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It's too easy to leave files open this way.  I'm concerned about any use of the Builder outside if a one-and-done command, which makes this leak file handles.  Can we solve this in a way that we don't leak?\n",
        "createdAt" : "2015-06-20T02:17:49Z",
        "updatedAt" : "2015-06-29T21:12:28Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "9c905aec-f878-4c2b-9fd2-1b95e96fec87",
        "parentId" : "9e28d953-65a9-4560-b7b3-6761c60d2ef7",
        "authorId" : "6ed9b702-dbb2-49f6-bd7f-82ec8d552ed2",
        "body" : "I can use `ioutil.ReadFile` instead of `Open(path)`. That implies that we lose the generality of large files.\n\nAbout leaking: If I document explicitly that this function is opening files then it is up to the user to close those files. It should be ok, no?\n\nBTW, in the previous version we were already leaking STDIN. No one was closing it.\n\nThe way I see it is that we either specifically declare that `ExpandPathsToStreamVisitors` keeps files open until `StreamVisitor` visits them, or we read the whole file and keep it in memory from the beginning (we must also change the way we use STDIN in this case).\n",
        "createdAt" : "2015-06-20T13:16:22Z",
        "updatedAt" : "2015-06-29T21:12:28Z",
        "lastEditedBy" : "6ed9b702-dbb2-49f6-bd7f-82ec8d552ed2",
        "tags" : [
        ]
      },
      {
        "id" : "df62dedc-e2b8-419d-ba48-5c861426ce1d",
        "parentId" : "9e28d953-65a9-4560-b7b3-6761c60d2ef7",
        "authorId" : "6ed9b702-dbb2-49f6-bd7f-82ec8d552ed2",
        "body" : "Or maybe I can create a new `FileVisitor` that is going to store all the available paths in a slice and then open them and close them as the `Visit` is called. Also will handle STDIN as it a file.\n\nThis `FileVisitor` can use the `StreamVisitor` internally just like `ContinueOnErrorVisitor` is doing.\n",
        "createdAt" : "2015-06-20T16:44:05Z",
        "updatedAt" : "2015-06-29T21:12:28Z",
        "lastEditedBy" : "6ed9b702-dbb2-49f6-bd7f-82ec8d552ed2",
        "tags" : [
        ]
      }
    ],
    "commit" : "697e07f864a09a4346475ef00d602b522aea564a",
    "line" : null,
    "diffHunk" : "@@ -1,1 +390,394 @@\t\t\tStreamVisitor: NewStreamVisitor(nil, mapper, path, ignoreErrors, schema),\n\t\t}\n\n\t\tvisitors = append(visitors, visitor)\n\t\treturn nil"
  },
  {
    "id" : "32b502f1-0e88-418a-872a-9fae2d1dd52b",
    "prId" : 7969,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a89950bd-c89d-4073-95e6-ea35b5db9e17",
        "parentId" : null,
        "authorId" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "body" : "should this err if `!info.Namespaced() && len(namespace) > 0`?\n",
        "createdAt" : "2015-05-08T17:36:45Z",
        "updatedAt" : "2015-05-11T19:51:18Z",
        "lastEditedBy" : "8be927c4-cfb4-4077-b355-f4f3d84849b8",
        "tags" : [
        ]
      },
      {
        "id" : "103f4b15-5b5f-426d-beeb-437fa297e1a4",
        "parentId" : "a89950bd-c89d-4073-95e6-ea35b5db9e17",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "No, namespace is always provided into the builder, but this is specifically \"set namespace if it can be set\", not \"hey, I expect set namespace to work on every object I pass it\".\n\n----- Original Message -----\n\n> > @@ -441,6 +441,9 @@ func FilterNamespace(info *Info) error {\n> >  // set. If info.Object is set, it will be mutated as well.\n> >  func SetNamespace(namespace string) VisitorFunc {\n> >     return func(info *Info) error {\n> > -       if !info.Namespaced() {\n> \n> should this err if `!info.Namespaced() && len(namespace) > 0`?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/7969/files#r29959580\n",
        "createdAt" : "2015-05-08T19:41:22Z",
        "updatedAt" : "2015-05-11T19:51:18Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "ecbca9eb171b9a1f978b9676595db1dac181fa90",
    "line" : 4,
    "diffHunk" : "@@ -1,1 +475,479 @@func SetNamespace(namespace string) VisitorFunc {\n\treturn func(info *Info) error {\n\t\tif !info.Namespaced() {\n\t\t\treturn nil\n\t\t}"
  },
  {
    "id" : "9854403b-1d6c-4677-8240-cbb9c4189469",
    "prId" : 7919,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "a3301390-0424-47c6-8cf5-5e0e6a38e3bd",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "It's unfortunate having to decorate all the visitors like this.  There is no other way today unless we instead made this a generic interface (that allows you to act on the undecoded data prior to operating on it).\n",
        "createdAt" : "2015-05-07T22:54:27Z",
        "updatedAt" : "2015-05-08T21:01:08Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "e429ee83-2b86-4b5f-a60b-7e5938c9afc3",
        "parentId" : "a3301390-0424-47c6-8cf5-5e0e6a38e3bd",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "acknowledged.\n",
        "createdAt" : "2015-05-08T16:54:26Z",
        "updatedAt" : "2015-05-08T21:01:08Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f11585972dd787a2b9d42f3457ec388cd58b15b",
    "line" : 101,
    "diffHunk" : "@@ -1,1 +417,421 @@// TODO: convert ignoreErrors into a func(data, error, count) bool that consumers can use to decide\n// what to do with ignored errors.\nfunc NewStreamVisitor(r io.Reader, mapper *Mapper, schema validation.Schema, source string, ignoreErrors bool) Visitor {\n\treturn &StreamVisitor{r, mapper, source, ignoreErrors, schema}\n}"
  },
  {
    "id" : "f06ede78-c6a2-47db-bbac-13c71c62e944",
    "prId" : 7919,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "ddd1f420-6df7-46d7-bca3-e29098705896",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "You need to add this to the streamVisitor Visit method\n",
        "createdAt" : "2015-05-07T22:54:39Z",
        "updatedAt" : "2015-05-08T21:01:08Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "c1128793-5cfa-48c7-933a-74bbbef80cfd",
        "parentId" : "ddd1f420-6df7-46d7-bca3-e29098705896",
        "authorId" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "body" : "done.\n",
        "createdAt" : "2015-05-08T16:54:31Z",
        "updatedAt" : "2015-05-08T21:01:08Z",
        "lastEditedBy" : "d0e97b49-eba2-4b22-8695-df4f8a6776ad",
        "tags" : [
        ]
      }
    ],
    "commit" : "7f11585972dd787a2b9d42f3457ec388cd58b15b",
    "line" : 102,
    "diffHunk" : "@@ -1,1 +418,422 @@// what to do with ignored errors.\nfunc NewStreamVisitor(r io.Reader, mapper *Mapper, schema validation.Schema, source string, ignoreErrors bool) Visitor {\n\treturn &StreamVisitor{r, mapper, source, ignoreErrors, schema}\n}\n"
  },
  {
    "id" : "5a551f84-1176-49e6-ba88-f661b1de1b54",
    "prId" : 3944,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "8a9f473d-de78-4ed9-b9b4-177e58f31a97",
        "parentId" : null,
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Needs a test case.\n",
        "createdAt" : "2015-01-30T19:43:26Z",
        "updatedAt" : "2015-02-02T16:01:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "a40f9610-816e-4e87-983f-35ea3ba87640",
        "parentId" : "8a9f473d-de78-4ed9-b9b4-177e58f31a97",
        "authorId" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "body" : "TestNodeBuilder only works by virtue of its existence.\n",
        "createdAt" : "2015-01-30T21:51:36Z",
        "updatedAt" : "2015-02-02T16:01:19Z",
        "lastEditedBy" : "6eca0ade-9879-4dd7-ad14-547e16f5c041",
        "tags" : [
        ]
      }
    ],
    "commit" : "a928be56ba229e4a0456b9d4a0aeb1d4f73a5494",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +386,390 @@\n// FilterNamespace omits the namespace if the object is not namespace scoped\nfunc FilterNamespace() VisitorFunc {\n\treturn func(info *Info) error {\n\t\tif info.Mapping.Scope.Name() != meta.RESTScopeNameNamespace {"
  },
  {
    "id" : "5ee0e78e-01b9-49b8-9b1c-e33e86e27d15",
    "prId" : 3152,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "e7ab9060-a839-450f-a55e-d4c196b89ede",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "Trying to understand the approach here...\n\nAre these really general visitors, or just collectors? My mental model is that we need to collect lots of input sources, parse out their lists of objects and merge them into a big object stream, and then provide general visitation of the objects, for iterative generation, transformation, and the final operation.\n",
        "createdAt" : "2015-01-08T21:43:56Z",
        "updatedAt" : "2015-01-09T17:06:19Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "a92391b7-b726-4923-bae7-8c786eb45716",
        "parentId" : "e7ab9060-a839-450f-a55e-d4c196b89ede",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "----- Original Message -----\n\n> > -   }\n> > -   return util.SliceToError(errs)\n> >   +}\n> >   +\n> >   +// PathVisitor visits a given path and returns an object representing the\n> >   file\n> >   +// at that path.\n> >   +type PathVisitor struct {\n> > -   *Mapper\n> > -   // The file path to load\n> > -   Path string\n> > -   // Whether to ignore files that are not recognized as API objects\n> > -   IgnoreErrors bool\n> >   +}\n> >   +\n> >   +func (v *PathVisitor) Visit(fn VisitorFunc) error {\n> > -   data, err := ioutil.ReadFile(v.Path)\n> \n> Trying to understand the approach here...\n> \n> Are these really general visitors, or just collectors? My mental model is\n> that we need to collect lots of input sources, parse out their lists of\n> objects and merge them into a big object stream, and then provide general\n> visitation of the objects, for iterative generation, transformation, and the\n> final operation.\n\nPathVisitor is really PathCollector, that's a better name.  PathCollector, URLCollector, StreamCollector, SelectorCollector, ..., all of which can be visited.  Will make that refactor.\n\n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/3152/files#r22685083\n",
        "createdAt" : "2015-01-08T21:48:03Z",
        "updatedAt" : "2015-01-09T17:06:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      },
      {
        "id" : "66e5f7d2-fecd-41ef-963c-152c2be4785a",
        "parentId" : "e7ab9060-a839-450f-a55e-d4c196b89ede",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "Renamed to collectors\n\n----- Original Message -----\n\n> ----- Original Message -----\n> \n> > > - }\n> > > - return util.SliceToError(errs)\n> > >   +}\n> > >   +\n> > >   +// PathVisitor visits a given path and returns an object representing\n> > >   the\n> > >   file\n> > >   +// at that path.\n> > >   +type PathVisitor struct {\n> > > - *Mapper\n> > > - // The file path to load\n> > > - Path string\n> > > - // Whether to ignore files that are not recognized as API objects\n> > > - IgnoreErrors bool\n> > >   +}\n> > >   +\n> > >   +func (v *PathVisitor) Visit(fn VisitorFunc) error {\n> > > - data, err := ioutil.ReadFile(v.Path)\n> > \n> > Trying to understand the approach here...\n> > \n> > Are these really general visitors, or just collectors? My mental model is\n> > that we need to collect lots of input sources, parse out their lists of\n> > objects and merge them into a big object stream, and then provide general\n> > visitation of the objects, for iterative generation, transformation, and\n> > the\n> > final operation.\n> \n> PathVisitor is really PathCollector, that's a better name.  PathCollector,\n> URLCollector, StreamCollector, SelectorCollector, ..., all of which can be\n> visited.  Will make that refactor.\n> \n> > ---\n> > \n> > Reply to this email directly or view it on GitHub:\n> > https://github.com/GoogleCloudPlatform/kubernetes/pull/3152/files#r22685083\n",
        "createdAt" : "2015-01-08T22:09:32Z",
        "updatedAt" : "2015-01-09T17:06:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a4f2259413bbf24d2cb75afff5baf5c0e3c8f18",
    "line" : 155,
    "diffHunk" : "@@ -1,1 +153,157 @@\nfunc (v *PathVisitor) Visit(fn VisitorFunc) error {\n\tdata, err := ioutil.ReadFile(v.Path)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"unable to read %q: %v\", v.Path, err)"
  },
  {
    "id" : "ebbbdc47-318e-4af7-8db0-7ff878e3dd24",
    "prId" : 3152,
    "prUrl" : null,
    "prSource" : "GitHub",
    "comments" : [
      {
        "id" : "bf070e9b-1670-4638-b2a4-55bb7c2988e9",
        "parentId" : null,
        "authorId" : "7be32503-562e-4caa-838d-bba025e626b5",
        "body" : "What is the expected format of multiple objects in a single file (or URL, etc.)?\n",
        "createdAt" : "2015-01-08T22:37:40Z",
        "updatedAt" : "2015-01-09T17:06:19Z",
        "lastEditedBy" : "7be32503-562e-4caa-838d-bba025e626b5",
        "tags" : [
        ]
      },
      {
        "id" : "42104503-da7b-4334-98ac-b531738a4b47",
        "parentId" : "bf070e9b-1670-4638-b2a4-55bb7c2988e9",
        "authorId" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "body" : "List, PodList, *List.  Basically if the internal object structure conforms to the List convention (runtime.GetItemsPtr) and it can be decoded, we will treat it as many things.  Since we explicitly state that *List is an aggregate kind, it feels reasonably safe.  If we wanted more advanced behavior in the future we would want to abstract the List -> Items conversion (done by FlattenListVisitor, which is added by saying .Flatten() on the builder)\n\n----- Original Message -----\n\n> > +// PathCollector visits a given path and returns an object representing\n> > the file\n> > +// at that path.\n> > +type PathCollector struct {\n> > -   *Mapper\n> > -   // The file path to load\n> > -   Path string\n> > -   // Whether to ignore files that are not recognized as API objects\n> > -   IgnoreErrors bool\n> >   +}\n> >   +\n> >   +func (v *PathCollector) Visit(fn VisitorFunc) error {\n> > -   data, err := ioutil.ReadFile(v.Path)\n> > -   if err != nil {\n> > -       return fmt.Errorf(\"unable to read %q: %v\", v.Path, err)\n> > -   }\n> > -   info, err := v.Mapper.InfoForData(data, v.Path)\n> \n> What is the expected format of multiple objects in a single file (or URL,\n> etc.)?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/GoogleCloudPlatform/kubernetes/pull/3152/files#r22688598\n",
        "createdAt" : "2015-01-08T22:47:29Z",
        "updatedAt" : "2015-01-09T17:06:19Z",
        "lastEditedBy" : "6e2b5eda-1533-4798-a56c-432faaf38480",
        "tags" : [
        ]
      }
    ],
    "commit" : "8a4f2259413bbf24d2cb75afff5baf5c0e3c8f18",
    "line" : 159,
    "diffHunk" : "@@ -1,1 +157,161 @@\t\treturn fmt.Errorf(\"unable to read %q: %v\", v.Path, err)\n\t}\n\tinfo, err := v.Mapper.InfoForData(data, v.Path)\n\tif err != nil {\n\t\tif v.IgnoreErrors {"
  }
]